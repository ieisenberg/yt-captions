[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "welcome everyone we're gonna go ahead and get started because we don't have a",
    "start": "60",
    "end": "5940"
  },
  {
    "text": "lot of time so if you need translation things please put them in now my name is Josh burkas I",
    "start": "5940",
    "end": "14580"
  },
  {
    "text": "work for Red Hat these days what I work on all the time is kubernetes I'm in",
    "start": "14580",
    "end": "22050"
  },
  {
    "text": "said release the dribble experience spend a bunch of time working around",
    "start": "22050",
    "end": "27720"
  },
  {
    "text": "with storage stuff but how I got into kubernetes in the first place was I was",
    "start": "27720",
    "end": "35399"
  },
  {
    "text": "looking for a way to host and automate databases for fully automated h.a",
    "start": "35399",
    "end": "41460"
  },
  {
    "text": "application stacks and one of the things I let's come up there is one of things I",
    "start": "41460",
    "end": "48450"
  },
  {
    "text": "got originally was can you run databases in kubernetes cloud native environment and there are",
    "start": "48450",
    "end": "55710"
  },
  {
    "text": "people who said no it's a fairly famous tweet from a conversation I had with",
    "start": "55710",
    "end": "62309"
  },
  {
    "text": "Kelsey Hightower where he's like no don't run databases on kubernetes for a",
    "start": "62309",
    "end": "70770"
  },
  {
    "text": "variety of reasons and so we discussed some of the set of previous conference",
    "start": "70770",
    "end": "76130"
  },
  {
    "text": "and talked about the reasons why he would say something like that and there",
    "start": "76130",
    "end": "82590"
  },
  {
    "text": "are a number of reasons number one he is",
    "start": "82590",
    "end": "87799"
  },
  {
    "text": "running a database on kubernetes with the exception of implementing a Chae",
    "start": "87799",
    "end": "94290"
  },
  {
    "text": "aside from that running in kubernetes and database a database in kubernetes there's no easier than running a",
    "start": "94290",
    "end": "99509"
  },
  {
    "text": "database on bare metal and therefore you need the same skills just putting it on",
    "start": "99509",
    "end": "104820"
  },
  {
    "text": "kubernetes does not make B be a headaches go away second thing is setting up storage for",
    "start": "104820",
    "end": "110759"
  },
  {
    "text": "kubernetes can be complicated and hard to figure out and the third reason",
    "start": "110759",
    "end": "117570"
  },
  {
    "text": "potentially is performance this is one of the things people are worried about right about who my database and kubernetes what is performance going to",
    "start": "117570",
    "end": "124380"
  },
  {
    "text": "be like now I'm involved with another project that's dealing with the storage",
    "start": "124380",
    "end": "130470"
  },
  {
    "text": "set up complexity issue that's the rook project in order to be able to set up cloud",
    "start": "130470",
    "end": "135870"
  },
  {
    "text": "native storage for kubernetes and openshift and make that easy I don't have ancestry",
    "start": "135870",
    "end": "141989"
  },
  {
    "text": "in the database management thing I was literally this morning troubleshooting a thing for a project I'm involved in",
    "start": "141989",
    "end": "148110"
  },
  {
    "text": "where one of the developers noticed an error from the database and they decided",
    "start": "148110",
    "end": "154319"
  },
  {
    "text": "to try and fix it which meant that they needed to then call me up and fix what the developer did because you still need",
    "start": "154319",
    "end": "161760"
  },
  {
    "text": "to actually understand how the database works even if it's operating in cloud native environment so what this talk is",
    "start": "161760",
    "end": "169680"
  },
  {
    "text": "about actually is the third component which is performance which is if I throw my databases on kubernetes on cloud",
    "start": "169680",
    "end": "175980"
  },
  {
    "text": "native storage how do they perform is it good enough for my applications and",
    "start": "175980",
    "end": "181380"
  },
  {
    "text": "that's what I've been spending a few months on a particular cluster working",
    "start": "181380",
    "end": "186900"
  },
  {
    "text": "on now the reason why performance is critical there's a couple of things one is if you talk to any group of database",
    "start": "186900",
    "end": "195299"
  },
  {
    "start": "187000",
    "end": "187000"
  },
  {
    "text": "geeks any group of system infrastructure admin gigs they care about performance write me one of the first questions they",
    "start": "195299",
    "end": "201720"
  },
  {
    "text": "ask and therefore you have to have an answer for them the second thing is for",
    "start": "201720",
    "end": "206940"
  },
  {
    "text": "any platform there's this trade-off between ease of use ease of management and speed the I you know does an example",
    "start": "206940",
    "end": "217380"
  },
  {
    "text": "for example low level programming languages things like C little and assembler execute faster than",
    "start": "217380",
    "end": "224040"
  },
  {
    "text": "higher-level languages that are often easier to use and easier to learn and the same is truly an infrastructure",
    "start": "224040",
    "end": "229319"
  },
  {
    "text": "platforms and then a third is if your application was designed to expect a",
    "start": "229319",
    "end": "236160"
  },
  {
    "text": "certain level performance from the database then if you can't get that level of performance on a cloud native",
    "start": "236160",
    "end": "241440"
  },
  {
    "text": "platform that is going to be a blocker to migrating to kubernetes and cloud native technology in general you don't",
    "start": "241440",
    "end": "248670"
  },
  {
    "text": "want it to be a blocker the other reason is I've been doing database performance stuff since my hair was still blonde",
    "start": "248670",
    "end": "257959"
  },
  {
    "text": "so I'm not gonna stop I actually find it kind of fun because I'm weird that way",
    "start": "258690",
    "end": "264780"
  },
  {
    "text": "so and the main way that you actually deal with database performance is",
    "start": "264780",
    "end": "270520"
  },
  {
    "text": "through benchmarking now we've got a bunch of people here from ping cap they know what database benchmarking is etc",
    "start": "270520",
    "end": "275710"
  },
  {
    "text": "but for everybody else to talk a little bit what Barry King is and benchmarking isn't so when we're talking about",
    "start": "275710",
    "end": "283540"
  },
  {
    "start": "281000",
    "end": "281000"
  },
  {
    "text": "benchmarking stuff we're actually talking about comparing right we want to",
    "start": "283540",
    "end": "288700"
  },
  {
    "text": "compare two things that are equal in all but one respect so we can find out what",
    "start": "288700",
    "end": "294310"
  },
  {
    "text": "effect that difference has you know so benchmarking between two different types",
    "start": "294310",
    "end": "300250"
  },
  {
    "text": "of storage - from one release to another from one configuration change to another",
    "start": "300250",
    "end": "305980"
  },
  {
    "text": "or from the requirements that we already have on spec of must return X number of",
    "start": "305980",
    "end": "312070"
  },
  {
    "text": "responses per second right this is what we're looking on comparing and so anytime you were looking at benchmarking",
    "start": "312070",
    "end": "317440"
  },
  {
    "text": "you should be saying what two things are three things or ten things am I going to be comparing now for this talk what I am",
    "start": "317440",
    "end": "327550"
  },
  {
    "start": "323000",
    "end": "323000"
  },
  {
    "text": "actually comparing is types of storage because part of the way I get started in this I work at Red Hat I work",
    "start": "327550",
    "end": "334930"
  },
  {
    "text": "collaborate with the Ceph and rook teams that we have at Red Hat and one of the",
    "start": "334930",
    "end": "340090"
  },
  {
    "text": "things we wanted to look at is if you have pure cloud native storage like a rooks F stack is performance on that",
    "start": "340090",
    "end": "346570"
  },
  {
    "text": "acceptable for a database workload nobody had an answer nobody good answer",
    "start": "346570",
    "end": "352360"
  },
  {
    "text": "that I saw before I started doing it and so over time I've been comparing four",
    "start": "352360",
    "end": "357850"
  },
  {
    "text": "different your four different basic types of storage right we have bare metal we have kubernetes but using node local",
    "start": "357850",
    "end": "364840"
  },
  {
    "text": "storage that's either local dear or local PV network storage so no logs",
    "start": "364840",
    "end": "373090"
  },
  {
    "text": "there's like host path Network storage which is like EBS cloud provider storage",
    "start": "373090",
    "end": "378220"
  },
  {
    "text": "or whatever and then cloud native distributed storage so something like a real safe combo or other advanced file",
    "start": "378220",
    "end": "383890"
  },
  {
    "text": "systems now I already did a run for this and you can actually find my talk from",
    "start": "383890",
    "end": "389350"
  },
  {
    "text": "coop con Seattle what I did comparisons on AWS and I actually checked on performance for",
    "start": "389350",
    "end": "395500"
  },
  {
    "text": "cloud native storage for a cloud provider storage for network storage so I'm not going to actually be providing a",
    "start": "395500",
    "end": "401620"
  },
  {
    "text": "comparison for network storage today because this set of tests is all about the bare metal now beyond that we need",
    "start": "401620",
    "end": "411610"
  },
  {
    "text": "to talk about types of i/o performance that you get in a database workload so",
    "start": "411610",
    "end": "418600"
  },
  {
    "text": "database words basically do four things and they often do them concurrently with each other right you have random reads",
    "start": "418600",
    "end": "425170"
  },
  {
    "text": "so reading one small fact at a time random writes writing one small fact at",
    "start": "425170",
    "end": "430750"
  },
  {
    "text": "a time sequential reads when you read big blocks of data and sequential writes when you write big blocks of data databases will do all of these things",
    "start": "430750",
    "end": "436990"
  },
  {
    "text": "concurrently or consecutively and so we care about the performance of all of them now generally when we're doing our",
    "start": "436990",
    "end": "444040"
  },
  {
    "text": "synthetic benchmark we can actually combine the random reads and random writes which we'll be doing in these",
    "start": "444040",
    "end": "449050"
  },
  {
    "text": "benchmarks that I show you because most workloads that do random rates do random writes etc and you can do them together",
    "start": "449050",
    "end": "455440"
  },
  {
    "text": "without messing with the numbers and then we actually care about two",
    "start": "455440",
    "end": "461590"
  },
  {
    "text": "different classes of metrics for those right we care about latency which is if",
    "start": "461590",
    "end": "467290"
  },
  {
    "text": "we make a request how long does it take that request to return affects",
    "start": "467290",
    "end": "472720"
  },
  {
    "text": "application performance right and we also care about throughput which is how many requests per second or how many megabytes of data per second can I say",
    "start": "472720",
    "end": "481390"
  },
  {
    "text": "read from or write to the database for throughput so we care about both of",
    "start": "481390",
    "end": "486850"
  },
  {
    "text": "these and so what we have here is three different storage platforms three",
    "start": "486850",
    "end": "494190"
  },
  {
    "text": "different types of i/o and two different classes of metrics that we care about",
    "start": "494460",
    "end": "500070"
  },
  {
    "text": "that's a lot of different tests across the different environments fortunately the database industry for a",
    "start": "500070",
    "end": "508690"
  },
  {
    "text": "long time has been obsessed with benchmarking things and so there are tons of tools and benchmarking tools and",
    "start": "508690",
    "end": "515440"
  },
  {
    "text": "measurement tools already designed to generate these kinds of traffic and record this kinds of information that",
    "start": "515440",
    "end": "521770"
  },
  {
    "text": "you can just use and tap into and I'll be naming a few of those here um particularly what I'm gonna be",
    "start": "521770",
    "end": "528550"
  },
  {
    "start": "526000",
    "end": "526000"
  },
  {
    "text": "talking about because this was easy for me to do since this is not my full-time job most of my job is managing",
    "start": "528550",
    "end": "534160"
  },
  {
    "text": "kubernetes community stuff is I ran a series of what I know is micro",
    "start": "534160",
    "end": "539380"
  },
  {
    "text": "benchmarks so you have your benchmark Suites things like transaction processing council and spec and stuff",
    "start": "539380",
    "end": "545680"
  },
  {
    "text": "that have an enormous amount of battery of different things that they do and they're audited and that sort of thing",
    "start": "545680",
    "end": "551410"
  },
  {
    "text": "and that's that's a benchmark benchmark with a capital B and then you have micro benchmarks which are smaller easy to run",
    "start": "551410",
    "end": "558400"
  },
  {
    "text": "workloads and these are generally if you're running it personally for yourself and you're not doing it for",
    "start": "558400",
    "end": "563440"
  },
  {
    "text": "publication you just want to know how your Hardware performs micro benchmarks is what you're looking at and actually",
    "start": "563440",
    "end": "570100"
  },
  {
    "text": "ran in three different micro benchmarks sis bench post-crisis PG bench and the cockroach DB workloads unfortunately I'm",
    "start": "570100",
    "end": "579550"
  },
  {
    "text": "gonna show you the cockroach DB workloads and results that I got but these are no longer open-source so this is the last time that you will see these",
    "start": "579550",
    "end": "585340"
  },
  {
    "text": "for me because they change the license for them and they're not open source anymore unfortunately so talk about",
    "start": "585340",
    "end": "592660"
  },
  {
    "text": "suspense suspense is a nice toolkit like first thing you should try honestly is as much because it's a sort of omnibus",
    "start": "592660",
    "end": "599710"
  },
  {
    "text": "micro benchmark created by the my sequel folks years ago it can do tests of a whole bunch of different system",
    "start": "599710",
    "end": "605680"
  },
  {
    "text": "performance CPU memories database tests i/o tests that sort of thing in this",
    "start": "605680",
    "end": "611080"
  },
  {
    "text": "example I'm just using it to test directly some of the i/o operations",
    "start": "611080",
    "end": "616530"
  },
  {
    "start": "616000",
    "end": "616000"
  },
  {
    "text": "posters PG bench is a super simple database benchmark it ships with Postgres it does a database micro",
    "start": "616530",
    "end": "624040"
  },
  {
    "text": "benchmark and it measures basically two things one is random transactional reads",
    "start": "624040",
    "end": "629830"
  },
  {
    "text": "and writes and then the second thing is load in index x which would simulate and",
    "start": "629830",
    "end": "636790"
  },
  {
    "text": "a date a loading analytics workload and then the Cobblers DB people created this",
    "start": "636790",
    "end": "643780"
  },
  {
    "start": "640000",
    "end": "640000"
  },
  {
    "text": "really nice suite of light benchmarks that they use to and then publish them",
    "start": "643780",
    "end": "649990"
  },
  {
    "text": "as open source originally including Bank which is a lot like PG bench in its",
    "start": "649990",
    "end": "655450"
  },
  {
    "text": "operation and T BCC which is a much more calm right heavy workload with a lot of luck",
    "start": "655450",
    "end": "661750"
  },
  {
    "text": "walking inside of it and want conflicts it's a common problem in databases and",
    "start": "661750",
    "end": "667890"
  },
  {
    "text": "the two of these within that suite is I found Bank was really good for measuring throughput and TPCC was really good for",
    "start": "667890",
    "end": "674440"
  },
  {
    "text": "measuring latency for complex operations that need to do transactions so now let",
    "start": "674440",
    "end": "684340"
  },
  {
    "text": "me give you some tips because part of my goal in this talk is not necessarily to show you the numbers that I have because",
    "start": "684340",
    "end": "691420"
  },
  {
    "text": "the numbers that I have are not your numbers your hardware is not my hardware your application is not my application",
    "start": "691420",
    "end": "698620"
  },
  {
    "text": "and your stack is not my stack what I want you to get out of this is you can do this yourself and you should do this",
    "start": "698620",
    "end": "705820"
  },
  {
    "text": "yourself particularly before you deploy a new platform in production and it's not that hard so let me give you a few",
    "start": "705820",
    "end": "712360"
  },
  {
    "text": "tips on that one is if you're running micro benchmarking you need to do a",
    "start": "712360",
    "end": "717430"
  },
  {
    "text": "bunch of runs don't run it once recorded that number and say that's how it is because there's a certain amount of",
    "start": "717430",
    "end": "723280"
  },
  {
    "text": "randomness and all of these benchmarks and if you just depend on a single run",
    "start": "723280",
    "end": "728560"
  },
  {
    "text": "the randomness may be what you get instead of a real thing you also need to",
    "start": "728560",
    "end": "733810"
  },
  {
    "text": "do long runs a lot of people would say oh I did a 30 second run and I got this well you have memory cache effects and",
    "start": "733810",
    "end": "740080"
  },
  {
    "text": "CPU cache effects and a lot of things where you will get artificially inflated",
    "start": "740080",
    "end": "745780"
  },
  {
    "text": "performance on really short runs and you really need to see how the system is going to behave under more sustained",
    "start": "745780",
    "end": "752050"
  },
  {
    "text": "load ideally you want to do multiple database and file sizes particular you",
    "start": "752050",
    "end": "757780"
  },
  {
    "text": "want to measure both things that fit in memory and things that don't you wanted",
    "start": "757780",
    "end": "763210"
  },
  {
    "text": "you multiple you want a concurrent workload because your real production workload is going to be concurrent so",
    "start": "763210",
    "end": "769480"
  },
  {
    "text": "multiple users accessing the database or the file storage at the same time and",
    "start": "769480",
    "end": "774940"
  },
  {
    "text": "you want to use bare metal now a lot of people like this well why would I want",
    "start": "774940",
    "end": "780700"
  },
  {
    "start": "778000",
    "end": "778000"
  },
  {
    "text": "to use bare metal well here's the problem I've done also a lot of benchmarking on cloud providers and the",
    "start": "780700",
    "end": "786280"
  },
  {
    "text": "problem with benchmarking in cloud providers is that a lot of your performance effects have",
    "start": "786280",
    "end": "792460"
  },
  {
    "text": "more to do with who else is on the cloud with you than they do with any changes in platform so like if you look at the",
    "start": "792460",
    "end": "799510"
  },
  {
    "text": "stuff that are presented in Seattle if you look at Ben's run runs in AWS I consider a minimum number of runs for a",
    "start": "799510",
    "end": "806860"
  },
  {
    "text": "single AWS workload at a specific size to be like 25 and for each of those I",
    "start": "806860",
    "end": "812830"
  },
  {
    "text": "actually recreate the instances because you never know what's gonna be the effect of a bad instance or a noisy",
    "start": "812830",
    "end": "819220"
  },
  {
    "text": "neighbor also frankly a large cloud",
    "start": "819220",
    "end": "824250"
  },
  {
    "text": "instance is a pretty small bare metal instance and as a result you're not",
    "start": "824250",
    "end": "829810"
  },
  {
    "text": "really going to be testing things for really large workloads so um if you have",
    "start": "829810",
    "end": "835240"
  },
  {
    "text": "a choice of platforms bare metal is going to actually give you more useful results so that said let's look at some",
    "start": "835240",
    "end": "841930"
  },
  {
    "text": "numbers because it's one of the things that we care about here right so I also",
    "start": "841930",
    "end": "848650"
  },
  {
    "text": "want to add some caution here which is please do not compare the numbers",
    "start": "848650",
    "end": "854290"
  },
  {
    "text": "between different benchmarks and different databases these numbers are",
    "start": "854290",
    "end": "859330"
  },
  {
    "text": "not meant to be comparable right so the TPCC benchmark for cockroach DB does not",
    "start": "859330",
    "end": "865900"
  },
  {
    "text": "perform the same activity as the PG vent one for Postgres and those numbers are not comparable the databases were",
    "start": "865900",
    "end": "873670"
  },
  {
    "text": "minimally tuned on purpose um basically I did the Proform or performance tuning",
    "start": "873670",
    "end": "879910"
  },
  {
    "text": "that you could do in ten minutes for any of the databases because that's kind of what most people are running on on top",
    "start": "879910",
    "end": "885820"
  },
  {
    "text": "of which I didn't want to make this an exercise in performance tuning the database my goal was to test the cloud",
    "start": "885820",
    "end": "891310"
  },
  {
    "text": "native platforms um and then again like I said my software my hardware is going to be different",
    "start": "891310",
    "end": "897280"
  },
  {
    "text": "from yours you need to test yours and not just read my numbers so here was our",
    "start": "897280",
    "end": "904270"
  },
  {
    "text": "bare metal platform that I was doing this on I'm continuing to run tests on this because I have this cluster it's a six blade cluster um each of the blades",
    "start": "904270",
    "end": "911290"
  },
  {
    "text": "is 20 cores 128 gigabytes of RAM two",
    "start": "911290",
    "end": "916480"
  },
  {
    "text": "SSDs with 200 gigabytes of storage each and a shared network this is in the open",
    "start": "916480",
    "end": "923350"
  },
  {
    "text": "source lab at Red Hat the stuff that we have we had it for testing something else in the past and I",
    "start": "923350",
    "end": "930579"
  },
  {
    "text": "repurposed it for this now there is one caveat here that limited the kind of tests I can run now for one of the",
    "start": "930579",
    "end": "937930"
  },
  {
    "text": "things you want to test is things that fit in memory and things that don't fit in memory the problem is that when you",
    "start": "937930",
    "end": "943750"
  },
  {
    "text": "have a drive that's 200 gigabytes and you have 128 gigabytes of RAM it's very",
    "start": "943750",
    "end": "949690"
  },
  {
    "text": "hard to test the out of memory use case because you'll run out of disk space so you won't be seeing that in my numbers",
    "start": "949690",
    "end": "955149"
  },
  {
    "text": "my numbers are all going to be fits in memory use cases because I don't have",
    "start": "955149",
    "end": "960519"
  },
  {
    "text": "the storage to do out of memory use cases I'm waiting on some new SSDs so I can actually test that so and that does",
    "start": "960519",
    "end": "970000"
  },
  {
    "text": "mean because of that the primary i/o were actually measuring is file sync",
    "start": "970000",
    "end": "975970"
  },
  {
    "text": "time the time to actually write and commit stuff to disk rather than raw",
    "start": "975970",
    "end": "982089"
  },
  {
    "text": "throughput from the storage that's going to dominate our numbers the other thing",
    "start": "982089",
    "end": "989050"
  },
  {
    "text": "is I've assured Network and that had an effect on one of the tests later on that I will show you that that eclipses the",
    "start": "989050",
    "end": "997449"
  },
  {
    "text": "effect that I wanted to get in terms of actually comparing things so the first",
    "start": "997449",
    "end": "1004350"
  },
  {
    "start": "1001000",
    "end": "1001000"
  },
  {
    "text": "set of tests that I ran is you want to start out with a cavity you want to start out with a benchmark of this is",
    "start": "1004350",
    "end": "1009720"
  },
  {
    "text": "this is what I would get on a plane platform before I do cloud native anything right and so we get a host file",
    "start": "1009720",
    "end": "1015720"
  },
  {
    "text": "system where I've got a host install no kubernetes to get reference numbers just using X FS and l VM and hosting",
    "start": "1015720",
    "end": "1023760"
  },
  {
    "text": "databases and file storage on that so first I want to start out with suspense that is just going to check the sort of",
    "start": "1023760",
    "end": "1030209"
  },
  {
    "text": "direct IO numbers it does a bunch of i/o operations and see and record this back and so the numbers that we got here from",
    "start": "1030209",
    "end": "1038010"
  },
  {
    "text": "the SSDs here right is that random reads per second 10,000 whatever high number because",
    "start": "1038010",
    "end": "1044428"
  },
  {
    "text": "we're getting this out of memory because again I can't actually use a file size that's bigger than memory so that should",
    "start": "1044429",
    "end": "1050400"
  },
  {
    "text": "be really fast and it is but also random writes are also really fast right 7,000",
    "start": "1050400",
    "end": "1055620"
  },
  {
    "text": "random writes per second nice fast SSD being able to use two of them there I",
    "start": "1055620",
    "end": "1061049"
  },
  {
    "text": "can read 22 gigabytes per second of data so here's our throughput numbers and I",
    "start": "1061049",
    "end": "1067049"
  },
  {
    "text": "can write 88 megabytes per second of data so here you see this is gonna be a typical pattern of SSDs where SSDs are",
    "start": "1067049",
    "end": "1075149"
  },
  {
    "text": "much faster than old spinning drives for random writes but they're not necessarily all that faster in",
    "start": "1075149",
    "end": "1081629"
  },
  {
    "text": "throughput because that's writing big blocks of data now a little bit more",
    "start": "1081629",
    "end": "1089850"
  },
  {
    "text": "complicated chart here this is the set of database benchmark so we've got PG bench well we want to get some",
    "start": "1089850",
    "end": "1095309"
  },
  {
    "text": "throughput in terms of database load time simulating loading large amounts of",
    "start": "1095309",
    "end": "1100710"
  },
  {
    "text": "data into the database transactions per second for another measure of throughput",
    "start": "1100710",
    "end": "1107369"
  },
  {
    "text": "and then average latency to measure latency and then for bank similarly on cockroach DBU transactions",
    "start": "1107369",
    "end": "1114509"
  },
  {
    "text": "per second 95% latency and TBC see when you're actually doing that benchmark",
    "start": "1114509",
    "end": "1120029"
  },
  {
    "text": "competitively the standard is new orders per something new order transaction per minute I'm doing per second and so",
    "start": "1120029",
    "end": "1126840"
  },
  {
    "text": "that's what I actually have there whether or not I'm meeting an arbitrary target of how many new orders I can",
    "start": "1126840",
    "end": "1132450"
  },
  {
    "text": "process in 90% latency so on the bare thing for PG bench 404 seconds for the",
    "start": "1132450",
    "end": "1142230"
  },
  {
    "text": "bulk load so again lower is better here 440 seconds for the book load 11,000",
    "start": "1142230",
    "end": "1147779"
  },
  {
    "text": "transactions per second so I'm actually doing slightly better than the file system so there we see post quizzes batch writing kicking in and then an",
    "start": "1147779",
    "end": "1155909"
  },
  {
    "text": "average latency of 2.8 milliseconds now one of the things actually discovered",
    "start": "1155909",
    "end": "1161039"
  },
  {
    "text": "through this is it's a lot easier to install and configure cockroach DB on",
    "start": "1161039",
    "end": "1166470"
  },
  {
    "text": "kubernetes than it is to do it on bare metal as a matter of fact I was getting",
    "start": "1166470",
    "end": "1171899"
  },
  {
    "text": "performance figures that were so bad that I was sure that I had misconfigured something somehow in the bare metal",
    "start": "1171899",
    "end": "1177779"
  },
  {
    "text": "install and all of the cockroach DB instructions and advice on how to configure Congress DB for performance is",
    "start": "1177779",
    "end": "1183629"
  },
  {
    "text": "oriented at a kubernetes environment and so I'm not going to show you those numbers because I don't think that",
    "start": "1183629",
    "end": "1189509"
  },
  {
    "text": "they're realistic and then after that would she be change to license so I'm not gonna rerun any of that so then the",
    "start": "1189509",
    "end": "1199349"
  },
  {
    "start": "1196000",
    "end": "1196000"
  },
  {
    "text": "next thing here is to use local volumes and this actually if you are concerned if you're hosting a database and kubernetes and you're concerned about",
    "start": "1199349",
    "end": "1205079"
  },
  {
    "text": "kubernetes database performance then this is actually what you're probably",
    "start": "1205079",
    "end": "1210389"
  },
  {
    "text": "going to be doing provided that your database can manage replication and failover itself without being dependent",
    "start": "1210389",
    "end": "1218429"
  },
  {
    "text": "on kubernetes persistent volumes to do it for it is that you do local storage",
    "start": "1218429",
    "end": "1223440"
  },
  {
    "text": "either using host path or using the new local PVS in order to do storage and the thing is",
    "start": "1223440",
    "end": "1231329"
  },
  {
    "text": "this is local storage in a container and so performance should be almost identical to bare metal performance",
    "start": "1231329",
    "end": "1237389"
  },
  {
    "text": "right because all we have this some cgroups overhead and whatever kubernetes",
    "start": "1237389",
    "end": "1242399"
  },
  {
    "text": "networking overhead is and otherwise we really are running on bare metal so let's look at that here so suspense here",
    "start": "1242399",
    "end": "1249209"
  },
  {
    "text": "again miniscule difference with the",
    "start": "1249209",
    "end": "1254309"
  },
  {
    "text": "suspense tasks I mean almost immeasurably small in terms of a difference with just running on straight",
    "start": "1254309",
    "end": "1260729"
  },
  {
    "text": "bare metal the database tests are a little bit more different right so one",
    "start": "1260729",
    "end": "1269819"
  },
  {
    "text": "of the things so bulk loads is a little bit slower ten percent slower the",
    "start": "1269819",
    "end": "1275659"
  },
  {
    "text": "transactional throughput fifteen percent lower and latency is higher and those two go together right higher latency",
    "start": "1275659",
    "end": "1281579"
  },
  {
    "text": "lower throughput on a random right we're cloud makes a lot of sense and here we have our first numbers from cockroach",
    "start": "1281579",
    "end": "1288449"
  },
  {
    "text": "DBU which we're going to be comparing later on with cloud native storage where we've got these operations and that sort",
    "start": "1288449",
    "end": "1295019"
  },
  {
    "text": "of thing well let's talk about what's going on here because that was a much higher penalty",
    "start": "1295019",
    "end": "1300449"
  },
  {
    "text": "than I was expecting for just having a basically container wrapper around it",
    "start": "1300449",
    "end": "1306799"
  },
  {
    "text": "you remember I mentioned that we were on a shared network for the set of blades well that's actually what's going on",
    "start": "1306799",
    "end": "1313619"
  },
  {
    "text": "here because so for the bare metal test I had to run the PG bench client on bare",
    "start": "1313619",
    "end": "1319859"
  },
  {
    "text": "metal which means that to make things a good comparison I'm still running the",
    "start": "1319859",
    "end": "1325349"
  },
  {
    "text": "PGP client unbearable and using node port to route it to post was running on kubernetes the problem with that is that",
    "start": "1325349",
    "end": "1333539"
  },
  {
    "text": "means that we've actually added a couple of extra Network hops for every request and it'll work load like PG bench that",
    "start": "1333539",
    "end": "1340200"
  },
  {
    "text": "has a lot of requests whose entire you know throughput time is less than a millisecond those extra network hops",
    "start": "1340200",
    "end": "1346919"
  },
  {
    "text": "duly count and as a result and particularly on a shared network well we",
    "start": "1346919",
    "end": "1353549"
  },
  {
    "text": "don't have a dedicated network for kubernetes networking you can really see",
    "start": "1353549",
    "end": "1358710"
  },
  {
    "text": "that in the increased latency and the drop throughput so next storage",
    "start": "1358710",
    "end": "1367020"
  },
  {
    "start": "1363000",
    "end": "1363000"
  },
  {
    "text": "configuration right this is this is what I really cared about comparing right because this is what I'm looking at evaluating here right so we've got rook",
    "start": "1367020",
    "end": "1372480"
  },
  {
    "text": "storage and a five node plus F cluster only two replicas per per data block",
    "start": "1372480",
    "end": "1383240"
  },
  {
    "text": "because it was such a small cluster I didn't want to do the standard 3x replication because we're only talking",
    "start": "1383240",
    "end": "1389279"
  },
  {
    "text": "about five rook nodes the some default tweaks off of the rook documentation for",
    "start": "1389279",
    "end": "1395190"
  },
  {
    "text": "performance and also by the way whose important thing I will be showing you cockroach TV things there's two different ways you can do cockroach TV",
    "start": "1395190",
    "end": "1401309"
  },
  {
    "text": "with rock one is you the standard thing to do is you run have rook manage cockroach TV for you which is honestly",
    "start": "1401309",
    "end": "1407760"
  },
  {
    "text": "the easiest way to install cockroach TV if you still want to install it at this point but my goal was to test set",
    "start": "1407760",
    "end": "1414659"
  },
  {
    "text": "performance so I was actually installing cockroach TV on top of Ceph rather than in so on cockroach to be with rook this",
    "start": "1414659",
    "end": "1421260"
  },
  {
    "text": "is probably not something you would actually do because cockroach TB and Seth provides similar levels of",
    "start": "1421260",
    "end": "1428340"
  },
  {
    "text": "redundancy and so I have double redundancy here which is probably not necessary for most workloads but it does",
    "start": "1428340",
    "end": "1434669"
  },
  {
    "text": "help me measure performance so let's look at suspense here so just off of raw",
    "start": "1434669",
    "end": "1441179"
  },
  {
    "text": "stuff I was really pleasantly surprised by what we were looking for Rafael IO",
    "start": "1441179",
    "end": "1446309"
  },
  {
    "text": "right I mean that is minority loss of performance now mind you keep in mind",
    "start": "1446309",
    "end": "1452940"
  },
  {
    "text": "this is files that fit in memory but even with the right",
    "start": "1452940",
    "end": "1459510"
  },
  {
    "text": "Brook is just not imposing much of a penalty on my right speed for those I",
    "start": "1459510",
    "end": "1464520"
  },
  {
    "text": "mean considering that I basically haven't automated backup in this right I'm those files all exist in new places",
    "start": "1464520",
    "end": "1470270"
  },
  {
    "text": "that's actually really nice the biggest",
    "start": "1470270",
    "end": "1477030"
  },
  {
    "text": "thing that we're actually seeing there is and then the other weird thing is for my sequential reads my large block reads",
    "start": "1477030",
    "end": "1483470"
  },
  {
    "text": "it's actually faster so talk to some of the people about this like why it would",
    "start": "1483470",
    "end": "1489630"
  },
  {
    "text": "be faster on sequential reads than bare metal and it turns out that Seth if",
    "start": "1489630",
    "end": "1494670"
  },
  {
    "text": "you're reading a bunch of contiguous blocks it will try to pull them from multiple replicas so you can read them",
    "start": "1494670",
    "end": "1501030"
  },
  {
    "text": "faster and it turns out that that has a real-life benefit in the sequential read case now let's actually talk a little",
    "start": "1501030",
    "end": "1508890"
  },
  {
    "text": "bit about the database mint marks here right so bulk load gets lower spec to",
    "start": "1508890",
    "end": "1514500"
  },
  {
    "text": "that but only about a third slower and the biggest thing is my latency doubled",
    "start": "1514500",
    "end": "1519990"
  },
  {
    "text": "which is not a big surprise again for redundant cloud native storage what is",
    "start": "1519990",
    "end": "1525690"
  },
  {
    "text": "pleasant is that yet only about doubled how many people here have worked with forms of redundant clustered file",
    "start": "1525690",
    "end": "1532590"
  },
  {
    "text": "systems before cuz I've been doing this for a while we knew this for a number of years and doubled is actually a very",
    "start": "1532590",
    "end": "1538410"
  },
  {
    "text": "good number for some of the older ones like moose Orange FS and stuff we would be looking at more like quadrupling or",
    "start": "1538410",
    "end": "1546030"
  },
  {
    "text": "Quinn tooling the latency and so double latency is actually pretty good because we are after all writing everything",
    "start": "1546030",
    "end": "1551280"
  },
  {
    "text": "twice so same thing with the copper HD benchmarks is we're getting about double",
    "start": "1551280",
    "end": "1557400"
  },
  {
    "text": "the latency and half the throughput which are directly related to each other now TPCC is a target based benchmark so",
    "start": "1557400",
    "end": "1566250"
  },
  {
    "text": "that 1290 is how many transactions did we complete that will within the target window not what's the maximum number of",
    "start": "1566250",
    "end": "1572850"
  },
  {
    "text": "transaction that we can complete and we could still make the threshold because",
    "start": "1572850",
    "end": "1577920"
  },
  {
    "text": "that double agency was still below our threshold and rook you know Seth didn't add any additional overhead now some",
    "start": "1577920",
    "end": "1586170"
  },
  {
    "text": "things I actually want to do to tinker with this is obviously I want to actually do it on something without a",
    "start": "1586170",
    "end": "1591300"
  },
  {
    "text": "shared network so I can eliminate the shirt now effects from my figures I want to actually get bigger SSDs so that I can",
    "start": "1591300",
    "end": "1600480"
  },
  {
    "text": "do bigger workload not in median cockroach TV anymore I'll be looking at another cloud native database to",
    "start": "1600480",
    "end": "1607710"
  },
  {
    "text": "actually do performance tests on and to maybe do some additional tests tuning but let me give you some conclusions and",
    "start": "1607710",
    "end": "1614130"
  },
  {
    "start": "1611000",
    "end": "1611000"
  },
  {
    "text": "walk away it's from this yes first of all you can benchmark your own hardware and your own cloud native stack with",
    "start": "1614130",
    "end": "1619800"
  },
  {
    "text": "simple database benchmarks to test the performance of that stack and whether or",
    "start": "1619800",
    "end": "1624990"
  },
  {
    "text": "not you need to change it local volume performance should be roughly equivalent to bare metal and",
    "start": "1624990",
    "end": "1632750"
  },
  {
    "text": "rooks F has good throughput but about double the latency compared to running",
    "start": "1633080",
    "end": "1640350"
  },
  {
    "text": "on bare metal which again if the redundancy if the cloud native storage is valuable to you double the latency is",
    "start": "1640350",
    "end": "1647250"
  },
  {
    "text": "good if it's not valuable to you you should be aware that that exists more",
    "start": "1647250",
    "end": "1652980"
  },
  {
    "text": "important things beware secondary issues that will click performance differences like my shared network problems and an",
    "start": "1652980",
    "end": "1660270"
  },
  {
    "text": "important thing and go back to look away my presentation from coupe con see at all and you will see that on public",
    "start": "1660270",
    "end": "1666000"
  },
  {
    "text": "cloud cloud latency effects mask a lot of performance differences that you",
    "start": "1666000",
    "end": "1672000"
  },
  {
    "text": "can't actually see a lot of these performance differences because the effect of the cloud itself is so large",
    "start": "1672000",
    "end": "1677030"
  },
  {
    "text": "so questions contact if you have questions about rook a couple of the",
    "start": "1677030",
    "end": "1683490"
  },
  {
    "text": "rook developers are here at the conference and you can find them there's going to be actually two rook talks later today one in the next time slot",
    "start": "1683490",
    "end": "1689880"
  },
  {
    "text": "one at 6:00 p.m. so you can find out about that my contact information and we",
    "start": "1689880",
    "end": "1696030"
  },
  {
    "text": "have about four or five minutes for questions I think so questions go for it",
    "start": "1696030",
    "end": "1707210"
  },
  {
    "text": "we pass this back",
    "start": "1707210",
    "end": "1710750"
  },
  {
    "text": "oh thank you thank you for talk I have some questions the first is that what",
    "start": "1718220",
    "end": "1724730"
  },
  {
    "text": "kind of the SSC did you use in their testing I don't remember the model right",
    "start": "1724730",
    "end": "1732049"
  },
  {
    "text": "off can I get back to you on that so we we built these systems a while ago Niger certain what the model was is this SATA",
    "start": "1732049",
    "end": "1738169"
  },
  {
    "text": "or nvme no it's PCI bus so the second is",
    "start": "1738169",
    "end": "1747549"
  },
  {
    "text": "for the benchmark result of the system ang yeah for the biomat ho environment I see",
    "start": "1747549",
    "end": "1755720"
  },
  {
    "text": "the sequential ride is quite a small number that just some no more than 100",
    "start": "1755720",
    "end": "1762799"
  },
  {
    "text": "megabytes yeah for a second so why it's so slow",
    "start": "1762799",
    "end": "1768878"
  },
  {
    "text": "the probably there's the SSDs right is that ultimately I'm writing to a single",
    "start": "1768909",
    "end": "1776090"
  },
  {
    "text": "SSD and you know both the bus and the",
    "start": "1776090",
    "end": "1781789"
  },
  {
    "text": "RAM cache and the SSD you know with a large right because it's writing several gigabytes of data the REM cache in the",
    "start": "1781789",
    "end": "1788450"
  },
  {
    "text": "SSD is going to fill up pretty quickly and then at that point you're going to actually be at its performance which",
    "start": "1788450",
    "end": "1795320"
  },
  {
    "text": "apparently isn't that great so the I didn't actually care that much about it",
    "start": "1795320",
    "end": "1800779"
  },
  {
    "text": "except to get it for reference but it's not actually that unusual for large writes is all of us as these benefits",
    "start": "1800779",
    "end": "1807259"
  },
  {
    "text": "are in random writes in small rights etc for large writes you're operating in the",
    "start": "1807259",
    "end": "1813200"
  },
  {
    "text": "performance of whatever the slowest component in the whole bus is which",
    "start": "1813200",
    "end": "1820220"
  },
  {
    "text": "apparently is not that fast in this case these are blades after all and not full servers ok another questions in your",
    "start": "1820220",
    "end": "1828559"
  },
  {
    "text": "safe environment so did you use this same configuration of SAP for example to",
    "start": "1828559",
    "end": "1835759"
  },
  {
    "text": "SSE and so the configuration for staff",
    "start": "1835759",
    "end": "1840879"
  },
  {
    "text": "all right yes but Seth likes raw devices so it used each SSD separately so each",
    "start": "1840879",
    "end": "1850669"
  },
  {
    "text": "SSD is a separate device and Seth handles bundling them together so maybe for one asset you have multiple",
    "start": "1850669",
    "end": "1856950"
  },
  {
    "text": "OSD know I think well wait I think each",
    "start": "1856950",
    "end": "1864600"
  },
  {
    "text": "one is one LSD isn't it yeah each one each one is one OSD okay thank you yeah",
    "start": "1864600",
    "end": "1872960"
  },
  {
    "text": "more questions Shirley our database crew here has some",
    "start": "1874460",
    "end": "1880169"
  },
  {
    "text": "questions now have you guys tested",
    "start": "1880169",
    "end": "1885809"
  },
  {
    "text": "anything on SEF Brook Mineo any of the",
    "start": "1885809",
    "end": "1890820"
  },
  {
    "text": "cloud native storage things okay well",
    "start": "1890820",
    "end": "1898649"
  },
  {
    "text": "thank you [Applause]",
    "start": "1898649",
    "end": "1904899"
  }
]