[
  {
    "text": "uh so good morning good evening good afternoon depending on where you are in the world uh thank you for joining today's cncf",
    "start": "80",
    "end": "6960"
  },
  {
    "text": "webinar uh i'd like to thank you all for joining us um today's webinar is how to migrate",
    "start": "6960",
    "end": "12000"
  },
  {
    "text": "databases into kubernetes i'm christy tan and i'll be moderating today's webinar we would like to welcome",
    "start": "12000",
    "end": "17680"
  },
  {
    "text": "our presenters today alex cherkov ceo and founder of storage os and for ron castell pro product",
    "start": "17680",
    "end": "24640"
  },
  {
    "text": "reliability engineer at storage os a few housekeeping items before we get started during the webinar you are not",
    "start": "24640",
    "end": "31359"
  },
  {
    "text": "able to talk and as a as an attendee there is a q a box at the bottom of your screen please feel free to drop in your",
    "start": "31359",
    "end": "37840"
  },
  {
    "text": "questions and we'll get to as many as we can at the end of the presentation this is an official webinar of the cncf",
    "start": "37840",
    "end": "45039"
  },
  {
    "text": "and as such is subject to the cncf code of conduct please do not add anything to the chat",
    "start": "45039",
    "end": "50160"
  },
  {
    "text": "or questions that would be in violation of that code of conduct basically please be respectful of all of",
    "start": "50160",
    "end": "55680"
  },
  {
    "text": "your fellow participants and presenters please also note that the recording and slides will be posted later today to the",
    "start": "55680",
    "end": "61680"
  },
  {
    "text": "cncf webinars page at cncf dot io webinars with that i'll hand it over to",
    "start": "61680",
    "end": "67520"
  },
  {
    "text": "alex and faron to kick off today's presentation take it away thank you kirsty and",
    "start": "67520",
    "end": "74240"
  },
  {
    "text": "um good morning good afternoon and good evening depending where you're dialing in from um so a little bit about myself uh my",
    "start": "74240",
    "end": "82240"
  },
  {
    "text": "name is alex kirkup i'm the founder and ceo of storage os i also hold two hats",
    "start": "82240",
    "end": "87360"
  },
  {
    "text": "and i'm the co-chair of the cncf uh storage sig and i am very focused on on building",
    "start": "87360",
    "end": "96720"
  },
  {
    "text": "cloud-native storage solutions at storage os but before that i spent 25 years",
    "start": "96720",
    "end": "104240"
  },
  {
    "text": "engineering a number of different infrastructure platforms um primarily for financial services",
    "start": "104240",
    "end": "111040"
  },
  {
    "text": "always happy to to hear uh feedback from the community so uh",
    "start": "111040",
    "end": "116079"
  },
  {
    "text": "feel free to dm me or or join our slack and uh and and interact for ron do you want",
    "start": "116079",
    "end": "122079"
  },
  {
    "text": "to quickly introduce yourself sure alex uh hello everyone my name is faran",
    "start": "122079",
    "end": "127119"
  },
  {
    "text": "i'm based in london as our company storage as is i'm a platform",
    "start": "127119",
    "end": "133840"
  },
  {
    "text": "reliability engineer or with a background on infrastructure and platform engineering",
    "start": "133840",
    "end": "140000"
  },
  {
    "text": "we usually run a lot of infrastructure on on clouds and bare metals so so my background is mainly on on systems",
    "start": "140000",
    "end": "147280"
  },
  {
    "text": "and and a bit of devops as well brilliant thanks both um so",
    "start": "147280",
    "end": "154879"
  },
  {
    "text": "before we start um i just want to give you a bit of background on on storage os where we come from so um at storage os",
    "start": "154879",
    "end": "162319"
  },
  {
    "text": "we are building um cloud native platforms um for customers and users who are who are",
    "start": "162319",
    "end": "168640"
  },
  {
    "text": "running uh platforms in the clouds on prem or in hybrid environments so one of the",
    "start": "168640",
    "end": "173840"
  },
  {
    "text": "things we come across very often is customers wanting to run databases in kubernetes so we're going",
    "start": "173840",
    "end": "180480"
  },
  {
    "text": "to share some of the experiences as i mentioned i've also got my other hat so i'm going to do a little bit of",
    "start": "180480",
    "end": "187040"
  },
  {
    "text": "um sick advertising here um the the cncf storage sig is a is a",
    "start": "187040",
    "end": "193440"
  },
  {
    "text": "public group um it's uh it works with the cncf uh toc",
    "start": "193440",
    "end": "200560"
  },
  {
    "text": "team and we help create content for end users as well as review projects and provide technical",
    "start": "200560",
    "end": "208239"
  },
  {
    "text": "storage expertise to the sig to the to the toc um the calls are open and are open every",
    "start": "208239",
    "end": "215440"
  },
  {
    "text": "second or fourth wednesday um of the month so we'd love to see you",
    "start": "215440",
    "end": "220640"
  },
  {
    "text": "there um okay so i talked about what we're seeing uh in",
    "start": "220640",
    "end": "228000"
  },
  {
    "text": "in our end users communities um of course everybody begins uh",
    "start": "228000",
    "end": "234080"
  },
  {
    "text": "their client native journey typically with with containers and containers um changed the the",
    "start": "234080",
    "end": "241760"
  },
  {
    "text": "have changed the container landscape have changed the application landscape because they've broken the dependencies",
    "start": "241760",
    "end": "247920"
  },
  {
    "text": "between an application and an individual specific server so this concept of of cattle versus pets",
    "start": "247920",
    "end": "256400"
  },
  {
    "text": "which which we hear about quite a bit containers allow applications to be",
    "start": "256400",
    "end": "262240"
  },
  {
    "text": "portable and of course the minutes applications are portable they can be orchestrated",
    "start": "262240",
    "end": "268560"
  },
  {
    "text": "and this is where kubernetes comes in so kubernetes being that container orchestrator um allows",
    "start": "268560",
    "end": "275040"
  },
  {
    "text": "uh allows developers to be able to compose and declare what they need out",
    "start": "275040",
    "end": "280639"
  },
  {
    "text": "of their applications by defining for example compute requirements or or network requirements and kubernetes i",
    "start": "280639",
    "end": "288160"
  },
  {
    "text": "guess plays like an expert tetris game with your applications",
    "start": "288160",
    "end": "294720"
  },
  {
    "text": "to abstract away your infrastructure and fit the applications in the in the most efficient way",
    "start": "294720",
    "end": "299919"
  },
  {
    "text": "to the to the available resources and of course because it has the automation it can do lots of uh",
    "start": "299919",
    "end": "308880"
  },
  {
    "text": "advanced services you know like uh automating scaling and and healing and connectivity",
    "start": "308880",
    "end": "315600"
  },
  {
    "text": "but of course all applications store states somewhere and one of the",
    "start": "315600",
    "end": "322080"
  },
  {
    "text": "amazing things with kubernetes is how with the power of of",
    "start": "322080",
    "end": "328240"
  },
  {
    "text": "new standards like like csi um kubernetes can interface with different storage systems",
    "start": "328240",
    "end": "336720"
  },
  {
    "text": "so now developers can use cloud native storage um functionality",
    "start": "336720",
    "end": "342240"
  },
  {
    "text": "that will integrate with kubernetes to not only automate",
    "start": "342240",
    "end": "347280"
  },
  {
    "text": "their compute or networking for example but also to automate storage provisioning availability and",
    "start": "347280",
    "end": "353680"
  },
  {
    "text": "scaling now what does that actually mean in terms of in terms of an end user so so",
    "start": "353680",
    "end": "360960"
  },
  {
    "text": "effectively now that you can specify storage requirements um it makes it very",
    "start": "360960",
    "end": "369039"
  },
  {
    "text": "easy to move stateful applications into kubernetes and because",
    "start": "369039",
    "end": "375840"
  },
  {
    "text": "those storage requirements and those applications can be defined with a standard set",
    "start": "375840",
    "end": "383520"
  },
  {
    "text": "of yaml we we move to to the scenario where it's possible to",
    "start": "383520",
    "end": "389440"
  },
  {
    "text": "build anything as a service and one of the one of the things that we see happening very regularly",
    "start": "389440",
    "end": "396000"
  },
  {
    "text": "is uh the concept of building databases as a service so why would you want to automate um the",
    "start": "396000",
    "end": "403440"
  },
  {
    "text": "deployment of of databases uh in kubernetes and what are some of the advantages",
    "start": "403440",
    "end": "409280"
  },
  {
    "text": "in this so one of the one of the key things um one of the key",
    "start": "409280",
    "end": "414720"
  },
  {
    "text": "things with with kubernetes and and cloud native storage um relates to the",
    "start": "414720",
    "end": "422160"
  },
  {
    "text": "this key concept that the containers and the applications are portable so in this case when i refer to an",
    "start": "422160",
    "end": "428880"
  },
  {
    "text": "application i'm talking about your database because um every type of database is is",
    "start": "428880",
    "end": "435039"
  },
  {
    "text": "now mostly available as as a container too so you know popular databases like postgres",
    "start": "435039",
    "end": "442560"
  },
  {
    "text": "or or mysql for example as well as databases like say or cassandra",
    "start": "442560",
    "end": "449759"
  },
  {
    "text": "more distributed systems like uh like the tess for example are all deployed as containers",
    "start": "449759",
    "end": "456720"
  },
  {
    "text": "uh within kubernetes environments um one of the key things here though is that",
    "start": "456720",
    "end": "462639"
  },
  {
    "text": "those applications those those databases um are inherently portable and they benefit",
    "start": "462639",
    "end": "468400"
  },
  {
    "text": "from the ability for kubernetes to dynamically scale out and scale down a cluster",
    "start": "468400",
    "end": "474400"
  },
  {
    "text": "and to be able to upgrade nodes on the fly whether it's because you want to upgrade the",
    "start": "474400",
    "end": "479840"
  },
  {
    "text": "resources of nodes or you want to um you want to upgrade uh nodes",
    "start": "479840",
    "end": "485440"
  },
  {
    "text": "um for for to make sure that software is current and security patches are applied for example",
    "start": "485440",
    "end": "492160"
  },
  {
    "text": "so one of the key things to look out for here is to look for storage that is portable and",
    "start": "492160",
    "end": "499840"
  },
  {
    "text": "supports the cloud-native attributes of of that of that type of application and database",
    "start": "499840",
    "end": "506080"
  },
  {
    "text": "running in kubernetes so effectively we're moving from we're moving away from an environment",
    "start": "506080",
    "end": "511440"
  },
  {
    "text": "where server servers um and storage are tightly coupled where the storage is",
    "start": "511440",
    "end": "517039"
  },
  {
    "text": "locked into individual server nodes um and we're moving to to an environment where um the",
    "start": "517039",
    "end": "524720"
  },
  {
    "text": "data and the storage is locked into the database and the application and kubernetes has the ability to move",
    "start": "524720",
    "end": "532720"
  },
  {
    "text": "your application and therefore the storage um is portable too",
    "start": "532720",
    "end": "537760"
  },
  {
    "text": "we talked a lot about the fact that in kubernetes the environments are",
    "start": "537760",
    "end": "544000"
  },
  {
    "text": "declarative and reproducible so what do we mean by that well in much the same way that you can specify",
    "start": "544000",
    "end": "550240"
  },
  {
    "text": "um the containers that are needed in this case the database and then the compute and memory",
    "start": "550240",
    "end": "555360"
  },
  {
    "text": "and network requirements you can also declare the storage requirements and items like",
    "start": "555360",
    "end": "562080"
  },
  {
    "text": "scaling or availability for example and the reason why this is so incredibly",
    "start": "562080",
    "end": "569040"
  },
  {
    "text": "powerful is because it makes your environment",
    "start": "569040",
    "end": "574880"
  },
  {
    "text": "recoverable and reproducible so you're no longer um you no longer are nurturing",
    "start": "574880",
    "end": "581279"
  },
  {
    "text": "individual servers um but kubernetes has that power of of uh of extending the database and and",
    "start": "581279",
    "end": "588480"
  },
  {
    "text": "recreating that that environment wherever you are making it very easy to to have um uh pre-production or or or",
    "start": "588480",
    "end": "597279"
  },
  {
    "text": "development and production environments replicated very easily one of the other",
    "start": "597279",
    "end": "603279"
  },
  {
    "text": "things which um which applies to databases in in kubernetes um is the way you scale the",
    "start": "603279",
    "end": "610880"
  },
  {
    "text": "um the organ the the deployments of those databases um and we'll talk about that detail in a",
    "start": "610880",
    "end": "617120"
  },
  {
    "text": "little bit but but effectively what we're um what we're what we're recommending is that you co-opt the same sort of",
    "start": "617120",
    "end": "624079"
  },
  {
    "text": "concept as as microservices where where effectively um a database is",
    "start": "624079",
    "end": "629680"
  },
  {
    "text": "no longer um deploys in in large gigantic instances but",
    "start": "629680",
    "end": "635519"
  },
  {
    "text": "different different databases can be deployed in in separate smaller",
    "start": "635519",
    "end": "641040"
  },
  {
    "text": "instances and can be scaled out horizontally with um",
    "start": "641040",
    "end": "646399"
  },
  {
    "text": "with uh high highly available or or dynamically available and database",
    "start": "646399",
    "end": "651760"
  },
  {
    "text": "endpoints abstractions um allowing you to tune the workloads and to to right size the environment",
    "start": "651760",
    "end": "657440"
  },
  {
    "text": "appropriately so we talked a bit about um",
    "start": "657440",
    "end": "662720"
  },
  {
    "text": "we talked a bit about how that dynamic provisioning um works so i'll give you um a little",
    "start": "662720",
    "end": "668240"
  },
  {
    "text": "example of what we're referring to specifically for a database so within a database um we start off",
    "start": "668240",
    "end": "676160"
  },
  {
    "text": "with a storage class a storage class is a way to abstract away the the",
    "start": "676160",
    "end": "683760"
  },
  {
    "text": "definition for accessing a storage provider that kubernetes is",
    "start": "683760",
    "end": "688880"
  },
  {
    "text": "going to talk to now we mentioned csi csi is the container storage interface",
    "start": "688880",
    "end": "695440"
  },
  {
    "text": "and this is the standardized api which is used by a number of different",
    "start": "695440",
    "end": "700880"
  },
  {
    "text": "storage providers to provide the interaction to dynamically provision volumes but also",
    "start": "700880",
    "end": "706880"
  },
  {
    "text": "to to dynamically attach detection and mass volumes uh into different uh into different uh",
    "start": "706880",
    "end": "714000"
  },
  {
    "text": "nodes within your environment effectively using a storage class which is which is an abstraction",
    "start": "714000",
    "end": "720000"
  },
  {
    "text": "point for your storage provider you can now define a persistent volume",
    "start": "720000",
    "end": "725040"
  },
  {
    "text": "claim that persistent volume claim uses uses the storage provider to dynamically",
    "start": "725040",
    "end": "731279"
  },
  {
    "text": "provision a volume and is identified using using a friendly name which you",
    "start": "731279",
    "end": "739040"
  },
  {
    "text": "can then refer to in the in the application itself typically uh defined in a pod or or a",
    "start": "739040",
    "end": "746720"
  },
  {
    "text": "stateful set so in this case for example we're showing the crunchy data",
    "start": "746720",
    "end": "752880"
  },
  {
    "text": "example to to to define a postgres uh container that will use the the database volume that we defined in",
    "start": "754160",
    "end": "761279"
  },
  {
    "text": "the in the persistent volume claim the the idea behind this",
    "start": "761279",
    "end": "766320"
  },
  {
    "text": "is that we now have a very simple way to to define um the way the database is",
    "start": "766320",
    "end": "774240"
  },
  {
    "text": "run and the volume requirements um that uh that is that are being used um and if",
    "start": "774240",
    "end": "780959"
  },
  {
    "text": "you're we're using um a software defined uh storage system you can also",
    "start": "780959",
    "end": "788399"
  },
  {
    "text": "have the benefits of being able to use this the same yaml uh configuration whether you're",
    "start": "788399",
    "end": "793760"
  },
  {
    "text": "deploying say in a cloud instance or on-prem or or perhaps in different vms or developer",
    "start": "793760",
    "end": "799600"
  },
  {
    "text": "environments for example um i'm going to caveat this and say that",
    "start": "799600",
    "end": "806000"
  },
  {
    "text": "many databases actually have a superset of automation nowadays called",
    "start": "806000",
    "end": "811839"
  },
  {
    "text": "an operator or some sort of capability to to to um actually provide additional",
    "start": "811839",
    "end": "818880"
  },
  {
    "text": "functionality around the life cycle of of the database um for for the purposes",
    "start": "818880",
    "end": "824240"
  },
  {
    "text": "of of this particular uh webinar and this example where we're restricting ourselves to um providing",
    "start": "824240",
    "end": "832399"
  },
  {
    "text": "examples that are related to starting a database using a simple pod or a stateful set",
    "start": "832399",
    "end": "837440"
  },
  {
    "text": "um and that's mostly for for simplicity but for for completeness sake i'm i'm mentioning",
    "start": "837440",
    "end": "843279"
  },
  {
    "text": "the fact that you know operators are available for most uh types of databases to provide that",
    "start": "843279",
    "end": "848800"
  },
  {
    "text": "database lifecycle so what does it look like in terms of um",
    "start": "848800",
    "end": "855519"
  },
  {
    "text": "you know what we what we've seen uh happen time and time again in in uh different uh enterprises and then",
    "start": "855519",
    "end": "862240"
  },
  {
    "text": "user environments so so typically um we we start off with",
    "start": "862240",
    "end": "868399"
  },
  {
    "text": "um you know a large server or or or a service that has um",
    "start": "868399",
    "end": "875360"
  },
  {
    "text": "uh potentially multiple databases hosted in in a single database instance typically",
    "start": "875360",
    "end": "881360"
  },
  {
    "text": "on a large node and and that may or may not have um you know dedicated",
    "start": "881360",
    "end": "887120"
  },
  {
    "text": "um storage or or or may have you know some existing other storage provider um",
    "start": "887120",
    "end": "893279"
  },
  {
    "text": "the the point that i'm wanting to emphasize here is that most of this definition",
    "start": "893279",
    "end": "898399"
  },
  {
    "text": "is now very very server-centric and it's based on a scale-up",
    "start": "898399",
    "end": "903760"
  },
  {
    "text": "architecture which which obviously gets more expensive based on based on",
    "start": "903760",
    "end": "909040"
  },
  {
    "text": "the the capacity of those of those individual servers um but more than that um the",
    "start": "909040",
    "end": "915680"
  },
  {
    "text": "the functionality becomes um uh becomes uh operationally more complex um and",
    "start": "915680",
    "end": "923199"
  },
  {
    "text": "and prone to failure simply because of the fact that that we're talking about um running multiple databases within",
    "start": "923199",
    "end": "930320"
  },
  {
    "text": "within that large instance so every time a new database um is required it requires a fair amount",
    "start": "930320",
    "end": "936480"
  },
  {
    "text": "of of of manual effort perhaps it involves database administrators or devops teams",
    "start": "936480",
    "end": "942399"
  },
  {
    "text": "to to get involved and of course you know potentially operational change in those um for for your database",
    "start": "942399",
    "end": "949839"
  },
  {
    "text": "environment so what does this look like in in the new world so",
    "start": "949839",
    "end": "955440"
  },
  {
    "text": "starting off with that um large database instance we can we then are",
    "start": "955440",
    "end": "963040"
  },
  {
    "text": "looking at how we deploy this within our kubernetes instance for the sake of the",
    "start": "963040",
    "end": "969279"
  },
  {
    "text": "for the sake of this particular example we're using um storage os as the underlying storage",
    "start": "969279",
    "end": "976079"
  },
  {
    "text": "layer but of course other storage providers are available and we start off by moving",
    "start": "976079",
    "end": "981680"
  },
  {
    "text": "a single database instance within a container that is now",
    "start": "981680",
    "end": "988560"
  },
  {
    "text": "runnable and accessible within the nodes within within a node in the kubernetes",
    "start": "988560",
    "end": "994959"
  },
  {
    "text": "cluster and this this is typically a pod or or a stateful set that might be managed by an operator",
    "start": "994959",
    "end": "1001279"
  },
  {
    "text": "we can then continue to break out the additional um kubernetes uh that destroy the",
    "start": "1001279",
    "end": "1007600"
  },
  {
    "text": "additional uh postgres databases into their own mini instances effectively",
    "start": "1007600",
    "end": "1014480"
  },
  {
    "text": "making them portable standalone products that can be distributed across the different",
    "start": "1014480",
    "end": "1020399"
  },
  {
    "text": "nodes in the cluster so so effectively we're we're we're using the the functionality um of of kubernetes to",
    "start": "1020399",
    "end": "1029038"
  },
  {
    "text": "turn each database instance into a declarative uh self-contained uh",
    "start": "1029039",
    "end": "1036360"
  },
  {
    "text": "container um one of the one of the aspects um of using um",
    "start": "1036360",
    "end": "1042480"
  },
  {
    "text": "the the the provisions of the cloud-native storage within kubernetes",
    "start": "1042480",
    "end": "1048880"
  },
  {
    "text": "is that a lot of the storage providers um provides the the capability of",
    "start": "1048880",
    "end": "1054720"
  },
  {
    "text": "having uh primary volumes and and and replica copies of that data in in",
    "start": "1054720",
    "end": "1060400"
  },
  {
    "text": "some form that are that are distributed between the different nodes um within the environment what this",
    "start": "1060400",
    "end": "1067120"
  },
  {
    "text": "means is that and again using the the the automation that's that's available through",
    "start": "1067120",
    "end": "1072480"
  },
  {
    "text": "through csi um that allows uh kubernetes to to uh to talk to the service to talk to",
    "start": "1072480",
    "end": "1079679"
  },
  {
    "text": "the storage provider when a database is is",
    "start": "1079679",
    "end": "1085840"
  },
  {
    "text": "is is working with a copy of the data the data can actually be replicated and",
    "start": "1085840",
    "end": "1093280"
  },
  {
    "text": "data protection can be can be applied such that transactions are",
    "start": "1093280",
    "end": "1098320"
  },
  {
    "text": "are being replicated to more than one nodes um within the cluster and there are and",
    "start": "1098320",
    "end": "1104240"
  },
  {
    "text": "again there are a number of different software options that allow you to do this",
    "start": "1104240",
    "end": "1109600"
  },
  {
    "text": "and the the cncf6 storage has created um a white paper to describe the",
    "start": "1109600",
    "end": "1116160"
  },
  {
    "text": "storage landscape and the cncf which is which is a good reference point that i'd recommend that you read",
    "start": "1116160",
    "end": "1122480"
  },
  {
    "text": "this type of data protection means that if um if a database",
    "start": "1122480",
    "end": "1128880"
  },
  {
    "text": "commits a transaction to the storage environment that data is now available on multiple",
    "start": "1128880",
    "end": "1134480"
  },
  {
    "text": "nodes within a cluster which means that if a copy of that data fails",
    "start": "1134480",
    "end": "1139520"
  },
  {
    "text": "say due to a disk failure resource failure or or a node failure that the database can",
    "start": "1139520",
    "end": "1146640"
  },
  {
    "text": "continue to run transparently because the storage system is handling this in the background so this gives additional options to",
    "start": "1146640",
    "end": "1154880"
  },
  {
    "text": "to some of the database providers by providing storage level replication that's managed",
    "start": "1154880",
    "end": "1161520"
  },
  {
    "text": "by kubernetes uh to protect your to protect uh the databases",
    "start": "1161520",
    "end": "1166640"
  },
  {
    "text": "um within that within that kubernetes environment of course there are um there are other projects",
    "start": "1166640",
    "end": "1172160"
  },
  {
    "text": "you know like uh like vitesse for example um that provide other methods of doing database level",
    "start": "1172160",
    "end": "1178160"
  },
  {
    "text": "replication which can also apply in these environments but suffice to say that the whole concept of allowing the",
    "start": "1178160",
    "end": "1184320"
  },
  {
    "text": "database within the kubernetes environment to benefit from that transparent",
    "start": "1184320",
    "end": "1189919"
  },
  {
    "text": "replication means that you get automated failovers within your environment especially",
    "start": "1189919",
    "end": "1195280"
  },
  {
    "text": "because the database remains especially because the database remains",
    "start": "1195280",
    "end": "1201120"
  },
  {
    "text": "accessible via the the service accounts and the",
    "start": "1201120",
    "end": "1206320"
  },
  {
    "text": "service ips that are defined as part of the as part of the the pod or the stateful",
    "start": "1206320",
    "end": "1213919"
  },
  {
    "text": "set so just summarizing databases are of course",
    "start": "1213919",
    "end": "1219600"
  },
  {
    "text": "stateful workloads and in order to take real advantage of these kubernetes",
    "start": "1219600",
    "end": "1226000"
  },
  {
    "text": "workloads and kubernetes environments it's important that that you are able to apply the same",
    "start": "1226000",
    "end": "1234480"
  },
  {
    "text": "declarative construct and composable construct that you apply to your to your",
    "start": "1234480",
    "end": "1241039"
  },
  {
    "text": "applications uh to to the stateful workloads to like databases",
    "start": "1241039",
    "end": "1247679"
  },
  {
    "text": "containers are of course ephemeral and unknowns can be ephemeral but but using",
    "start": "1247679",
    "end": "1252720"
  },
  {
    "text": "the capability of software-defined storage within kubernetes we can",
    "start": "1252720",
    "end": "1259120"
  },
  {
    "text": "ensure that there are multiple copies of your data and data is accessible anywhere",
    "start": "1259120",
    "end": "1264240"
  },
  {
    "text": "and you know i'm just re-emphasizing that csi as the as a standard interface that",
    "start": "1264240",
    "end": "1269840"
  },
  {
    "text": "kubernetes uses to talk to storage providers has now been around",
    "start": "1269840",
    "end": "1275600"
  },
  {
    "text": "for uh over two years as a ga function and uh this provides uh",
    "start": "1275600",
    "end": "1282480"
  },
  {
    "text": "all of the benefits um uh to provide flexible storage for these environments to allow",
    "start": "1282480",
    "end": "1288159"
  },
  {
    "text": "the databases to be to be portable with dynamic provisioning",
    "start": "1288159",
    "end": "1293200"
  },
  {
    "text": "um one other one other a couple of other aspects that i'd like to cover",
    "start": "1293200",
    "end": "1298240"
  },
  {
    "text": "is that by splitting out um each database instance each database into",
    "start": "1298240",
    "end": "1305280"
  },
  {
    "text": "into its own separate containerized database instance",
    "start": "1305280",
    "end": "1310320"
  },
  {
    "text": "we have um better performance and better throughput typically because kubernetes can now",
    "start": "1310320",
    "end": "1317840"
  },
  {
    "text": "balance the loads more effectively into into multiple instances we have we have the concept that",
    "start": "1317840",
    "end": "1326159"
  },
  {
    "text": "each one of those database instances can be tuned and resources allocated",
    "start": "1326159",
    "end": "1333280"
  },
  {
    "text": "individually per database so so you're not having to to worry about one large uh instance for",
    "start": "1333280",
    "end": "1339600"
  },
  {
    "text": "multiple databases and of course by by having uh by scaling outwards only rather than focusing on a",
    "start": "1339600",
    "end": "1346400"
  },
  {
    "text": "vertical scale up with kubernetes you reduce the failure domains and you reduce the blast radius of",
    "start": "1346400",
    "end": "1351919"
  },
  {
    "text": "of and the impact of of any one components within within the cluster failing",
    "start": "1351919",
    "end": "1360000"
  },
  {
    "text": "all right so with that i'm going to pass on to i'm going to pass the battle",
    "start": "1360000",
    "end": "1365520"
  },
  {
    "text": "on to um to furan who's going to give us",
    "start": "1365520",
    "end": "1370720"
  },
  {
    "text": "a live demo um talking um providing a demo to show us how to actually move a",
    "start": "1370720",
    "end": "1376640"
  },
  {
    "text": "database from a standard server into uh kubernetes so this is probably",
    "start": "1376640",
    "end": "1381840"
  },
  {
    "text": "the exciting part uh of the of the environment and i'll pass over to right now i'll stop showing my screen thank you",
    "start": "1381840",
    "end": "1389200"
  },
  {
    "text": "alex i'll start sharing mine second great cool so",
    "start": "1389200",
    "end": "1396880"
  },
  {
    "text": "as alex mentioned we're going to go into a live demo first of all let me give you a bit of",
    "start": "1396880",
    "end": "1401919"
  },
  {
    "text": "introduction uh what we have we have a kubernetes cluster uh four nodes in",
    "start": "1401919",
    "end": "1407919"
  },
  {
    "text": "google cloud could be somewhere else but google cloud is is as good as as any other",
    "start": "1407919",
    "end": "1413360"
  },
  {
    "text": "and we're gonna do actually what alex explained about sending uh",
    "start": "1413360",
    "end": "1420000"
  },
  {
    "text": "the main data a main database into multiple ones in kubernetes so we have one main server",
    "start": "1420000",
    "end": "1426799"
  },
  {
    "text": "with postgres uh let's actually have a look it's a it's a standard ubuntu box",
    "start": "1426799",
    "end": "1435120"
  },
  {
    "text": "with a postgres running",
    "start": "1435120",
    "end": "1438320"
  },
  {
    "text": "you can see just a simple process it's just a standalone machine with a with a postgres um and multiple",
    "start": "1440799",
    "end": "1447440"
  },
  {
    "text": "postgres databases so let's have a look we can see actually",
    "start": "1447440",
    "end": "1454400"
  },
  {
    "text": "that we have multiple databases those databases or schemas um i created with ordinal numbers those databases for",
    "start": "1454400",
    "end": "1462000"
  },
  {
    "text": "simplicity so we actually can see what we are migrating but keeping keep in mind or try to understand that",
    "start": "1462000",
    "end": "1467279"
  },
  {
    "text": "this is something that we are creating a database for each micro service or for each component of our",
    "start": "1467279",
    "end": "1472559"
  },
  {
    "text": "application or for each part of our holding our company et cetera so um",
    "start": "1472559",
    "end": "1479600"
  },
  {
    "text": "there are different ways of distributing how our data is stored so i'm gonna move all these databases",
    "start": "1479600",
    "end": "1486320"
  },
  {
    "text": "which i will understand each database the microservice into kubernetes",
    "start": "1486320",
    "end": "1492320"
  },
  {
    "text": "so i'm gonna use k instead of kibctl to save everyone's time um just bear with me",
    "start": "1492559",
    "end": "1501679"
  },
  {
    "text": "so i created the namespaces so we have one namespace for microservice very simple um",
    "start": "1501679",
    "end": "1508799"
  },
  {
    "text": "we want to keep isolated them and when they can access through a network one component to the other we keep them",
    "start": "1508799",
    "end": "1515279"
  },
  {
    "text": "separate um by the way everything i'm going to use today is available in github and",
    "start": "1515279",
    "end": "1522000"
  },
  {
    "text": "we're going to share the links for for the yamas etc and i want to encourage that everything",
    "start": "1522000",
    "end": "1528159"
  },
  {
    "text": "you see today is something that i highly recommend to using to see icd environments so",
    "start": "1528159",
    "end": "1533600"
  },
  {
    "text": "we're going to do it by hand so you actually can see what is under the hood or um in the kubernetes",
    "start": "1533600",
    "end": "1540000"
  },
  {
    "text": "constructs but you use you you would use a ci cd or junking server whatever tool you prefer",
    "start": "1540000",
    "end": "1545520"
  },
  {
    "text": "to actually run those automations it will make your life way way easier",
    "start": "1545520",
    "end": "1550640"
  },
  {
    "text": "so first of all i'm going to deploy a postgres server on every single one of these namespaces",
    "start": "1550640",
    "end": "1557600"
  },
  {
    "text": "so we're going to have 10 databases or 10 instances of postgres itself to do so i'm going to use these yamus",
    "start": "1557600",
    "end": "1564880"
  },
  {
    "text": "that as i said they're in a github repository completely public and and then we're gonna migrate the",
    "start": "1564880",
    "end": "1570480"
  },
  {
    "text": "data so i'm gonna iterate over them and just",
    "start": "1570480",
    "end": "1577120"
  },
  {
    "text": "create the resources um in a second i'm just gonna show um what actually are we doing",
    "start": "1577120",
    "end": "1583360"
  },
  {
    "text": "so to be able to provision databases as alex mentioned before we're",
    "start": "1583360",
    "end": "1588640"
  },
  {
    "text": "going to use stateful sets every stateful set is a kubernetes controller",
    "start": "1588640",
    "end": "1594960"
  },
  {
    "text": "that will enforce certain requirements for instance the amount of instances of the",
    "start": "1594960",
    "end": "1600240"
  },
  {
    "text": "application so let's have a look at the stateful stateful set itself they said this is a",
    "start": "1600240",
    "end": "1608400"
  },
  {
    "text": "coordinate controller that will enforce in our case to have one instance of the application always running we are using a fairly",
    "start": "1608400",
    "end": "1615600"
  },
  {
    "text": "standard or fairly common postgres instance and very importantly",
    "start": "1615600",
    "end": "1621679"
  },
  {
    "text": "we're going to mount a volume into pg data into slash pg data that is where",
    "start": "1621679",
    "end": "1626799"
  },
  {
    "text": "postgres will write the data if you want to use and split the write ahead log um and all other components that",
    "start": "1626799",
    "end": "1634000"
  },
  {
    "text": "postgres allows for speed or whatever you can do that here create different volumes",
    "start": "1634000",
    "end": "1639039"
  },
  {
    "text": "because this is the clarity it's very easy to just provision your volumes um where are the volumes coming from",
    "start": "1639039",
    "end": "1646480"
  },
  {
    "text": "these volumes are coming from a template that template is a persistent volume claim template",
    "start": "1646480",
    "end": "1654240"
  },
  {
    "text": "so for every application for every part that this controller starts it will have one",
    "start": "1654240",
    "end": "1660640"
  },
  {
    "text": "persistent volume claim always associated to it in this case uh we're just referencing the storage class",
    "start": "1660640",
    "end": "1668240"
  },
  {
    "text": "that we want to use for our uh for our software defined",
    "start": "1668240",
    "end": "1673760"
  },
  {
    "text": "storage backend but there are actually different ones in this cluster",
    "start": "1673760",
    "end": "1683840"
  },
  {
    "text": "so we have multiple um there are two of them that are uh software based and there is one actually that is the",
    "start": "1684159",
    "end": "1689919"
  },
  {
    "text": "the world cloud volumes so you can and actually you can add more and create different storage classes",
    "start": "1689919",
    "end": "1695520"
  },
  {
    "text": "that will actually have different capabilities or options for for your specific use cases now",
    "start": "1695520",
    "end": "1701360"
  },
  {
    "text": "let's actually have a look at the pods that we have created i'm going to use k n s which actually is very cool tool um",
    "start": "1701360",
    "end": "1708320"
  },
  {
    "text": "for for live information i'm searching for up",
    "start": "1708320",
    "end": "1714090"
  },
  {
    "text": "[Music] we can see that for every namespace",
    "start": "1714090",
    "end": "1719279"
  },
  {
    "text": "there is one bot one possible spot for every single one of those microservices so now every microservice",
    "start": "1719279",
    "end": "1726640"
  },
  {
    "text": "can have its own database cool every one of those databases have a",
    "start": "1726640",
    "end": "1732960"
  },
  {
    "text": "volume associated let's say up three to say something get",
    "start": "1732960",
    "end": "1738640"
  },
  {
    "text": "bbc and we can see that there is a pvc associated to it",
    "start": "1738640",
    "end": "1744159"
  },
  {
    "text": "so now we have 10 instances of postgres running and they have 10 volumes associated to",
    "start": "1744159",
    "end": "1751279"
  },
  {
    "text": "each other cool now we have postgres running we have the main server running",
    "start": "1751279",
    "end": "1756640"
  },
  {
    "text": "now let's run the migration let's see let's see for for instance uh",
    "start": "1756640",
    "end": "1764880"
  },
  {
    "text": "let me show you in the instance itself before we do the migration some data that actually is in this in",
    "start": "1764880",
    "end": "1770240"
  },
  {
    "text": "this table so actually i can relate later about them uh let's connect to",
    "start": "1770240",
    "end": "1775440"
  },
  {
    "text": "uh one of the applications let's say up two",
    "start": "1775440",
    "end": "1781840"
  },
  {
    "text": "let's see there is one table actually it's just random data",
    "start": "1782559",
    "end": "1787919"
  },
  {
    "text": "and there is just blob files and blob um information there is no real use but we",
    "start": "1793520",
    "end": "1799440"
  },
  {
    "text": "will be able to see that this table actually is migrated along to this to the database itself",
    "start": "1799440",
    "end": "1807039"
  },
  {
    "text": "cool as i said it's very important that you guys use ci cd for this kind of",
    "start": "1807039",
    "end": "1813440"
  },
  {
    "text": "tools or for this kind of executions i'm going to do now um there is one thing that we actually",
    "start": "1813440",
    "end": "1820159"
  },
  {
    "text": "need to have before we do the the import itself and that is a way to connect our",
    "start": "1820159",
    "end": "1828880"
  },
  {
    "text": "postgres servers our many instances into kubernetes to the main server we do that using this",
    "start": "1828880",
    "end": "1837039"
  },
  {
    "text": "external service it's a standard ammo if you're not familiar with external services with kubernetes don't worry too much",
    "start": "1837039",
    "end": "1842399"
  },
  {
    "text": "just for context what we are doing is we are telling kubernetes that there is",
    "start": "1842399",
    "end": "1848640"
  },
  {
    "text": "an ip that we want to access from inside the cluster but we want to give it a name",
    "start": "1848640",
    "end": "1854000"
  },
  {
    "text": "so instead of accessing the api itself of the postgres server the main server",
    "start": "1854000",
    "end": "1859600"
  },
  {
    "text": "we are creating an endpoint and a special service that will that allows us to",
    "start": "1859600",
    "end": "1866559"
  },
  {
    "text": "um access those uh that main server from a dns name inside the cluster so we",
    "start": "1866559",
    "end": "1873679"
  },
  {
    "text": "keep good practices and an elegant distribution of concerns",
    "start": "1873679",
    "end": "1879200"
  },
  {
    "text": "so actually i have a namespace that has that service",
    "start": "1879200",
    "end": "1885840"
  },
  {
    "text": "so we can see that a service called pg so we're going to access pg.namespace so",
    "start": "1888159",
    "end": "1894039"
  },
  {
    "text": "pg.posgresexternal and that will forward into that specific",
    "start": "1894039",
    "end": "1900240"
  },
  {
    "text": "postgres database so we see the endpoints actually it's",
    "start": "1900240",
    "end": "1905440"
  },
  {
    "text": "mapped to a specific ap where my postgres server is running cool",
    "start": "1905440",
    "end": "1910720"
  },
  {
    "text": "this is important because when we want to do things from an automated point of view we want",
    "start": "1910720",
    "end": "1917600"
  },
  {
    "text": "to change configuration while we don't have to change anything else so",
    "start": "1917600",
    "end": "1922799"
  },
  {
    "text": "how are we going to run the migration i'm going to use a job a job is a kubernetes construct or",
    "start": "1922799",
    "end": "1928960"
  },
  {
    "text": "kubernetes controller that will execute my container or in this case my task once",
    "start": "1928960",
    "end": "1936640"
  },
  {
    "text": "what this task does is a simple pg dump and pipe to pg restore um of course if",
    "start": "1936640",
    "end": "1943039"
  },
  {
    "text": "you have big databases i have small databases today but if you have big databases you can add",
    "start": "1943039",
    "end": "1949519"
  },
  {
    "text": "the size of the migration in here or the size of every chunk of data that is migrated so",
    "start": "1949519",
    "end": "1954559"
  },
  {
    "text": "you can control a bit of the the flow on on the data and be more sophisticated with that",
    "start": "1954559",
    "end": "1960320"
  },
  {
    "text": "but essentially it's very simple there is a source a source and a destination where these source and destination",
    "start": "1960320",
    "end": "1966880"
  },
  {
    "text": "variables come from they come from configuration as actually it's quite common and quite obvious but",
    "start": "1966880",
    "end": "1972880"
  },
  {
    "text": "sometimes we just want to keep these these jobs as agnostic as possible and through configuration we will be able to",
    "start": "1972880",
    "end": "1979519"
  },
  {
    "text": "run this so we will create one of these jobs for every namespace so we will",
    "start": "1979519",
    "end": "1985760"
  },
  {
    "text": "do an import an independent import for every uh database that we have so let's have a",
    "start": "1985760",
    "end": "1991760"
  },
  {
    "text": "look actually at the configmap the content map itself is again it's",
    "start": "1991760",
    "end": "1996880"
  },
  {
    "text": "quite simple we have a database this is only one database so we will have to use some",
    "start": "1996880",
    "end": "2002159"
  },
  {
    "text": "templating and some or patching to be able to specify the source database that we want to",
    "start": "2002159",
    "end": "2008080"
  },
  {
    "text": "migrate user and password of course use secrets for this this is just a demo um the source and the destination and",
    "start": "2008080",
    "end": "2014799"
  },
  {
    "text": "this is very important the source and destination are those dns names i was mentioning before the source",
    "start": "2014799",
    "end": "2021279"
  },
  {
    "text": "is this external name that points to the main postgres server while destination",
    "start": "2021279",
    "end": "2026480"
  },
  {
    "text": "is the name of the pot dot the service because i'm using a stateful set along a",
    "start": "2026480",
    "end": "2031519"
  },
  {
    "text": "headless service which is a service that goes along with the stateful sets",
    "start": "2031519",
    "end": "2036640"
  },
  {
    "text": "i can always access my application with the same name podname.servicename",
    "start": "2036640",
    "end": "2043279"
  },
  {
    "text": "because this spot will run in the same name space as every database it will always connect to the right one",
    "start": "2043279",
    "end": "2050240"
  },
  {
    "text": "because i don't have to specify the namespace itself so with this the only thing we",
    "start": "2050240",
    "end": "2055760"
  },
  {
    "text": "need to do is the pipe so let me create a conflict map and then i'll show you how to patch it",
    "start": "2055760",
    "end": "2061838"
  },
  {
    "text": "loop so let's iterate once again over all the namespaces",
    "start": "2062000",
    "end": "2075838"
  },
  {
    "text": "so one counting number namespace 10 copy marks in the end and now let's apply a touch a patch is a",
    "start": "2075919",
    "end": "2083440"
  },
  {
    "text": "simple kubernetes i could say construct but",
    "start": "2083440",
    "end": "2088560"
  },
  {
    "text": "um it's a way that we can alter the yamus themselves of course you can use for instance",
    "start": "2088560",
    "end": "2094079"
  },
  {
    "text": "customize or hum or any tool that you find or you prefer for your own",
    "start": "2094079",
    "end": "2100400"
  },
  {
    "text": "templating i just want to keep it simple and on the other hand you can do that from a",
    "start": "2100400",
    "end": "2106480"
  },
  {
    "text": "cicd point of view very easy to do that you have your applications or microservices listed",
    "start": "2106480",
    "end": "2112079"
  },
  {
    "text": "you simply iterate over them and you tell every configuration or every application which configuration",
    "start": "2112079",
    "end": "2119040"
  },
  {
    "text": "has to apply so we applied the patch let's have a look at one of them",
    "start": "2119040",
    "end": "2124880"
  },
  {
    "text": "so we have the main postgres and the postgres migration",
    "start": "2129040",
    "end": "2133599"
  },
  {
    "text": "great we can see that in namespace up1 we have the database up one quite simple",
    "start": "2136560",
    "end": "2143839"
  },
  {
    "text": "but actually this allows us to be agnostic as and run that as many places as we",
    "start": "2143839",
    "end": "2149359"
  },
  {
    "text": "want now we have to just create a job for every namespace",
    "start": "2149359",
    "end": "2154560"
  },
  {
    "text": "let's iterate over the namespaces once again and create the job",
    "start": "2154560",
    "end": "2160640"
  },
  {
    "text": "well they are created let's go and keep looking at the real-time information we can see that",
    "start": "2162079",
    "end": "2167920"
  },
  {
    "text": "the populate itself you can see there are different ones and for every name space",
    "start": "2167920",
    "end": "2173119"
  },
  {
    "text": "we keep having one actually because obviously the data is quite small they're finishing fairly fast let's have",
    "start": "2173119",
    "end": "2178720"
  },
  {
    "text": "a look at the logs of um of one of them let's say up six blocks",
    "start": "2178720",
    "end": "2187280"
  },
  {
    "text": "and we can see simple pg restore restoring our data that database my data",
    "start": "2187280",
    "end": "2194960"
  },
  {
    "text": "so now let's go into one of the applications themselves let's get a shell into them",
    "start": "2194960",
    "end": "2202320"
  },
  {
    "text": "and let's get a shell",
    "start": "2202320",
    "end": "2205280"
  },
  {
    "text": "and we can see that in app2 we have only one database instead of having 10 we have one let's connect to it",
    "start": "2209599",
    "end": "2218800"
  },
  {
    "text": "we have the same data as before something for the trivial it's just a pg restore in our case which is restored is not blocking",
    "start": "2227359",
    "end": "2233200"
  },
  {
    "text": "so for prediction is pretty alright um for other databases like my sql if you use my sql down be careful because",
    "start": "2233200",
    "end": "2239200"
  },
  {
    "text": "that's blocking there are different tools um so adapt to your your specific use case",
    "start": "2239200",
    "end": "2245839"
  },
  {
    "text": "as as always in engineering we have to always find the best solution for our use case not",
    "start": "2245839",
    "end": "2251119"
  },
  {
    "text": "for every someone else's use case so pretty much we have now 10 databases",
    "start": "2251119",
    "end": "2258000"
  },
  {
    "text": "with their own applications and they are segmented so we just migrated in a matter of for 10 minutes while i was",
    "start": "2258000",
    "end": "2264560"
  },
  {
    "text": "talking um databases from one big instance that can be difficult to maintain difficult",
    "start": "2264560",
    "end": "2271119"
  },
  {
    "text": "to upgrade to multiple databases where their concern is split let's say",
    "start": "2271119",
    "end": "2277599"
  },
  {
    "text": "that app one for instance is very intense on reits that application that database",
    "start": "2277599",
    "end": "2283599"
  },
  {
    "text": "can be scaled for reads can be improved um to scale better for reads let's say",
    "start": "2283599",
    "end": "2290000"
  },
  {
    "text": "we cannot read replicas or we can scale the size of that stateful cell or the pot itself to scale",
    "start": "2290000",
    "end": "2296079"
  },
  {
    "text": "horizontally to make it bigger or we can specify different different",
    "start": "2296079",
    "end": "2303680"
  },
  {
    "text": "different configurations well maybe app2 has a different concern for instance is",
    "start": "2303680",
    "end": "2308880"
  },
  {
    "text": "a microservice for user logins where latency is not as important but consistency is",
    "start": "2308880",
    "end": "2314240"
  },
  {
    "text": "really really highly important backups doesn't have to be the same time we have different concern we have",
    "start": "2314240",
    "end": "2319520"
  },
  {
    "text": "different tuning options we can improve our availability and",
    "start": "2319520",
    "end": "2324720"
  },
  {
    "text": "actually the blast radius of that the our databases if our main big instance of postgres",
    "start": "2324720",
    "end": "2331839"
  },
  {
    "text": "goes down even it's a cluster itself if we have a problem with that cluster we will end up with a situation where",
    "start": "2331839",
    "end": "2338000"
  },
  {
    "text": "all our information all our services are done with this model of course it has caveats there is an overhead of running a",
    "start": "2338000",
    "end": "2343599"
  },
  {
    "text": "database that depends on your use case and how you want to split that you will have a better scalability",
    "start": "2343599",
    "end": "2351119"
  },
  {
    "text": "and a better micro service architecture in my opinion at least cool so the demo is um",
    "start": "2351119",
    "end": "2358640"
  },
  {
    "text": "is pretty over we can we can keep going and start doing things to to databases but i think it's a good",
    "start": "2358640",
    "end": "2365119"
  },
  {
    "text": "time to pass to the q a so if you have any questions about the demo feel free i can re-share my",
    "start": "2365119",
    "end": "2370400"
  },
  {
    "text": "screen once again and um and answer and answer them online or on the command line",
    "start": "2370400",
    "end": "2378160"
  },
  {
    "text": "that's fantastic thanks so much faran um we've had uh a few questions come in so",
    "start": "2379200",
    "end": "2386640"
  },
  {
    "text": "we can we can go through them um one uh olivier um asked",
    "start": "2386640",
    "end": "2393119"
  },
  {
    "text": "if um we can share the the repo that we're using um for the for the use case um so",
    "start": "2393119",
    "end": "2400560"
  },
  {
    "text": "perhaps if you can send that uh to the chat window and now and and i can mention that um",
    "start": "2400560",
    "end": "2408240"
  },
  {
    "text": "we also had a question around uh what is the opinion about",
    "start": "2408240",
    "end": "2414880"
  },
  {
    "text": "local pv for for postgres with replicas such as crunchy or with stolen",
    "start": "2414880",
    "end": "2422000"
  },
  {
    "text": "implementation so this is this is a question that that comes up um that comes out fairly",
    "start": "2422000",
    "end": "2429440"
  },
  {
    "text": "often right we we often um we often have",
    "start": "2429440",
    "end": "2436720"
  },
  {
    "text": "a discussion about the pros and cons of of different instances effectively if you are",
    "start": "2436720",
    "end": "2443599"
  },
  {
    "text": "thinking of a database like postgres availability can be done at the postgres",
    "start": "2443599",
    "end": "2449920"
  },
  {
    "text": "level with replication at the database level it can also be done at the storage level um or perhaps it",
    "start": "2449920",
    "end": "2455680"
  },
  {
    "text": "can be done with with both the each each of those each of those options",
    "start": "2455680",
    "end": "2463839"
  },
  {
    "text": "has perhaps different use cases so using a local",
    "start": "2463839",
    "end": "2470560"
  },
  {
    "text": "a local pv which is effectively a disk that's only available on an",
    "start": "2470560",
    "end": "2476400"
  },
  {
    "text": "individual node means that that postgres instance is is",
    "start": "2476400",
    "end": "2482079"
  },
  {
    "text": "very tightly coupled to that to that node and it does make services",
    "start": "2482079",
    "end": "2487119"
  },
  {
    "text": "like like failover a bit more a bit more complicated if the disk on that particular node",
    "start": "2487119",
    "end": "2494160"
  },
  {
    "text": "is fails it means that that it's not straightforward to move the",
    "start": "2494160",
    "end": "2499520"
  },
  {
    "text": "database to another node of course you can do database level replication in that instance",
    "start": "2499520",
    "end": "2504880"
  },
  {
    "text": "and then have and then recover to to another database but that said you are",
    "start": "2504880",
    "end": "2510720"
  },
  {
    "text": "now managing two sets of databases um and two sets of compute resources because",
    "start": "2510720",
    "end": "2516960"
  },
  {
    "text": "um both databases have to be up to do replication",
    "start": "2516960",
    "end": "2522079"
  },
  {
    "text": "on the flip side if you're using um a storage system that's providing",
    "start": "2522079",
    "end": "2527119"
  },
  {
    "text": "um storage level uh replication you know and again there are a number of different",
    "start": "2527119",
    "end": "2532560"
  },
  {
    "text": "options how to do that you tend to have better portability so databases can",
    "start": "2532560",
    "end": "2540000"
  },
  {
    "text": "database instances can move around horizontally across the different nodes within the cluster",
    "start": "2540000",
    "end": "2546400"
  },
  {
    "text": "and additionally you have you have the benefit that you have an extremely low um",
    "start": "2546400",
    "end": "2553839"
  },
  {
    "text": "recovery time if a database instance uh actually fails to say a node or or or",
    "start": "2553839",
    "end": "2560160"
  },
  {
    "text": "a data set fails because one of the one of the things that we do come across um quite a lot is",
    "start": "2560160",
    "end": "2566160"
  },
  {
    "text": "what is um how how how does a failure affect the deterministic performance or",
    "start": "2566160",
    "end": "2573119"
  },
  {
    "text": "the recovery process of a database so for example if you have a very small database and you're doing",
    "start": "2573119",
    "end": "2579760"
  },
  {
    "text": "database level um replication then if a database fails um it might be quite quick to to",
    "start": "2579760",
    "end": "2587680"
  },
  {
    "text": "to sync up another replica of the database but if the database is large um that you know creating another",
    "start": "2587680",
    "end": "2595599"
  },
  {
    "text": "replica instance of database could could take a long time and and potentially that impacts performance",
    "start": "2595599",
    "end": "2601599"
  },
  {
    "text": "you know from uh from a disk and from a network resource point of view while that recovery is happening so so",
    "start": "2601599",
    "end": "2608720"
  },
  {
    "text": "that's also another reason why you know we we've seen end users deploy both database level",
    "start": "2608720",
    "end": "2615520"
  },
  {
    "text": "replication and or disk level replication uh in in both of those instances",
    "start": "2615520",
    "end": "2623440"
  },
  {
    "text": "um we have had another question to sorry go on um i was about to ask one of the",
    "start": "2623760",
    "end": "2629520"
  },
  {
    "text": "questions uh actually for you alex because you are here you know quite a bit about this what's the preferred storage",
    "start": "2629520",
    "end": "2635920"
  },
  {
    "text": "uh selected to deploy storage for stateful databases what's the best recommendation that's",
    "start": "2635920",
    "end": "2642560"
  },
  {
    "text": "actually a really good question as well it is a good question so um",
    "start": "2642560",
    "end": "2648079"
  },
  {
    "text": "the answer is it depends and i'll i'll i'll i'll sort of expand on that",
    "start": "2648079",
    "end": "2654880"
  },
  {
    "text": "slightly so um in the past we've often",
    "start": "2654880",
    "end": "2659920"
  },
  {
    "text": "thought of the attributes of the storage system in terms of how the access method for",
    "start": "2659920",
    "end": "2668400"
  },
  {
    "text": "that storage system is defined right so san being sort of block based devices or",
    "start": "2668400",
    "end": "2673920"
  },
  {
    "text": "nas being for example a file system based device or or das being directly attached storage to an individual node",
    "start": "2673920",
    "end": "2681680"
  },
  {
    "text": "um the reality is though in in a kubernetes type environment we have",
    "start": "2681680",
    "end": "2689280"
  },
  {
    "text": "a lot more layers to a storage system so i guess the important thing to understand first",
    "start": "2689280",
    "end": "2694720"
  },
  {
    "text": "is what are the attributes of your database or your application",
    "start": "2694720",
    "end": "2700000"
  },
  {
    "text": "often databases may not necessarily be um may not necessarily be optimized for",
    "start": "2700000",
    "end": "2707119"
  },
  {
    "text": "throughput but they probably are uh they probably do require lower latency if if they are to handle",
    "start": "2707119",
    "end": "2714720"
  },
  {
    "text": "transactional performance for example and and also databases um typically have",
    "start": "2714720",
    "end": "2721359"
  },
  {
    "text": "storage attributes that require strong consistency for for data integrity and strong data",
    "start": "2721359",
    "end": "2726880"
  },
  {
    "text": "durability um all of these different attributes by the way are are well defined",
    "start": "2726880",
    "end": "2732240"
  },
  {
    "text": "in the in the cncf um storage landscape which which we publish on the cncf uh storage",
    "start": "2732240",
    "end": "2739280"
  },
  {
    "text": "sig and we define these different attributes and explain the different layers within the storage system that contribute to",
    "start": "2739280",
    "end": "2745520"
  },
  {
    "text": "these attributes so one of the things that that changes quite uh quite dramatically in in cloud native",
    "start": "2745520",
    "end": "2753119"
  },
  {
    "text": "world is that because of those layers it's no longer safe to assume",
    "start": "2753119",
    "end": "2758240"
  },
  {
    "text": "that the way you consume the storage say fire a block a distributed block system or or say a",
    "start": "2758240",
    "end": "2764319"
  },
  {
    "text": "fire system um is uh defines the attributes such as performance or or latency because for",
    "start": "2764319",
    "end": "2771760"
  },
  {
    "text": "example we see file systems that are sometimes built on top of object stores so it might have",
    "start": "2771760",
    "end": "2777839"
  },
  {
    "text": "the file sharing attributes of a file system but the latency attributes of an object store for example",
    "start": "2777839",
    "end": "2784079"
  },
  {
    "text": "and therefore what you really need to do is just understand the attributes of the storage system in",
    "start": "2784079",
    "end": "2789200"
  },
  {
    "text": "relation to what you need out of your databases typically databases as i mentioned require the low latency and the high",
    "start": "2789200",
    "end": "2795599"
  },
  {
    "text": "consistency and therefore you're you're looking at a storage system that can provide",
    "start": "2795599",
    "end": "2801520"
  },
  {
    "text": "um strong consistency and um and and deterministic latency within",
    "start": "2801520",
    "end": "2807359"
  },
  {
    "text": "these environments so that would that would tend to naturally um select distributed block",
    "start": "2807359",
    "end": "2814880"
  },
  {
    "text": "systems but that doesn't always have to be the case",
    "start": "2814880",
    "end": "2819040"
  },
  {
    "text": "may i answer one of the questions alex well will you go through the other if that's okay of course go first there is",
    "start": "2826160",
    "end": "2833280"
  },
  {
    "text": "a question talking about um [Music] the size of the persistent volume in the",
    "start": "2833280",
    "end": "2839440"
  },
  {
    "text": "context of databases in kubernetes um that is definitely a situation where",
    "start": "2839440",
    "end": "2845200"
  },
  {
    "text": "it's not easy to to know which kind of size you want to put obviously persistent volume claims are",
    "start": "2845200",
    "end": "2850720"
  },
  {
    "text": "declarative and when they are declarative uh you have to set them at bootstrap so when you create the pvc you",
    "start": "2850720",
    "end": "2856800"
  },
  {
    "text": "set that image that size of course you don't know how it grows you cannot just go plug this in in fact most or",
    "start": "2856800",
    "end": "2864960"
  },
  {
    "text": "some of the storage providers for kubernetes implement resize of pvcs so if your database",
    "start": "2864960",
    "end": "2872000"
  },
  {
    "text": "runs out of the space because you put 25 gigs and it's not enough most of or or i would say most but some",
    "start": "2872000",
    "end": "2878559"
  },
  {
    "text": "of the the solutions mostly the the software defined storage solutions allow resize of pvcs",
    "start": "2878559",
    "end": "2886960"
  },
  {
    "text": "so it couldn't really be a problem for that of course the answer is it depends on the size of your database and your data for each state",
    "start": "2886960",
    "end": "2893119"
  },
  {
    "text": "for for each data set but in the end you can just resize based on on the storage provider",
    "start": "2893119",
    "end": "2901839"
  },
  {
    "text": "yeah that's that that's brilliant um it's it's um it's fantastic to see the",
    "start": "2902319",
    "end": "2908640"
  },
  {
    "text": "continued development of csi and and how this enables uh sort of the day",
    "start": "2908640",
    "end": "2915920"
  },
  {
    "text": "two operations like like resize um it's it's sort of key to the day-to-day operations",
    "start": "2915920",
    "end": "2923440"
  },
  {
    "text": "um hey ferran one of this questions is for you um so a user has asked",
    "start": "2923440",
    "end": "2932240"
  },
  {
    "text": "is it possible to um to replicate data from an on-prem database",
    "start": "2932240",
    "end": "2939920"
  },
  {
    "text": "to kubernetes databases in order to to uh to require minimum",
    "start": "2939920",
    "end": "2946720"
  },
  {
    "text": "time time yeah 100 um the what we did today",
    "start": "2946720",
    "end": "2952640"
  },
  {
    "text": "was no more than connecting one application to another we didn't care about the infrastructure we just needed obviously the plumbing of",
    "start": "2952640",
    "end": "2960079"
  },
  {
    "text": "or the network in between so as soon as your kubernetes cluster can access whether if you have a vpn",
    "start": "2960079",
    "end": "2967119"
  },
  {
    "text": "access in between instances they are in the same subnets or they are visible through the network",
    "start": "2967119",
    "end": "2972160"
  },
  {
    "text": "from your bare metal through vpn for instance to a cloud environment or wherever it is you can just come here one of these",
    "start": "2972160",
    "end": "2979359"
  },
  {
    "text": "databases to pull that data to replicate from from",
    "start": "2979359",
    "end": "2984559"
  },
  {
    "text": "that master um from a podcast point of view that's not problematic actually it's fairly",
    "start": "2984559",
    "end": "2990240"
  },
  {
    "text": "easy it's a synchronous when it's ready it's ready the only thing you have to do is set up the configuration",
    "start": "2990240",
    "end": "2996000"
  },
  {
    "text": "we created a conflict map while i didn't show the conflict map today but when we created stateful set to",
    "start": "2996000",
    "end": "3001839"
  },
  {
    "text": "create the application itself the the podcast application that has a conflict map which in there",
    "start": "3001839",
    "end": "3007200"
  },
  {
    "text": "you can specify all the configuration and you can configure there a slave or or",
    "start": "3007200",
    "end": "3012640"
  },
  {
    "text": "more commonly called a a passive um instance of a master so i could highly",
    "start": "3012640",
    "end": "3019200"
  },
  {
    "text": "recommend though if you do that and you have higher latencies more than five six milliseconds",
    "start": "3019200",
    "end": "3024640"
  },
  {
    "text": "to do a synchronous and to do a transaction log replication through postgres for",
    "start": "3024640",
    "end": "3030400"
  },
  {
    "text": "instance is good enough for that if you create synchronous replication um in between",
    "start": "3030400",
    "end": "3037200"
  },
  {
    "text": "a data center and a cloud provider that or something that is far apart you will struggle a bit with performance",
    "start": "3037200",
    "end": "3043280"
  },
  {
    "text": "because the latency affects the input output operations on synchronous replication",
    "start": "3043280",
    "end": "3049040"
  },
  {
    "text": "brilliant thanks for anne um we've also had a follow-up question on the database um sizing um",
    "start": "3050319",
    "end": "3058079"
  },
  {
    "text": "the the question is about what is the recommended size um of database storage",
    "start": "3058079",
    "end": "3065200"
  },
  {
    "text": "to be effective in in a kubernetes database um i think that's that's a fairly",
    "start": "3065200",
    "end": "3070400"
  },
  {
    "text": "open-ended question um i don't think you know there is a specific size that we would",
    "start": "3070400",
    "end": "3076079"
  },
  {
    "text": "necessarily um recommend it",
    "start": "3076079",
    "end": "3081119"
  },
  {
    "text": "it can be as small as a a few gig all the way up to you know several terabytes based on you",
    "start": "3081119",
    "end": "3086559"
  },
  {
    "text": "know the actual size of your database however that said um one of the things",
    "start": "3086559",
    "end": "3092000"
  },
  {
    "text": "that is worth understanding is again how size translates to",
    "start": "3092000",
    "end": "3100000"
  },
  {
    "text": "the different attributes within within your storage system so for example depending on",
    "start": "3100000",
    "end": "3106720"
  },
  {
    "text": "the storage provider you may you might find that perhaps there are",
    "start": "3106720",
    "end": "3115280"
  },
  {
    "text": "iop thresholds or input output operation thresholds um or or megabyte per second throughput",
    "start": "3115280",
    "end": "3121520"
  },
  {
    "text": "thresholds that are correlated to the to the size of the volume so so sometimes you may find yourself",
    "start": "3121520",
    "end": "3129520"
  },
  {
    "text": "having to over provision the size of the volume to ensure that you have you have the the correct uh",
    "start": "3129520",
    "end": "3137520"
  },
  {
    "text": "number of iops uh available to to run your database um but that is definitely a factor which",
    "start": "3137520",
    "end": "3144800"
  },
  {
    "text": "is you know very specific to the to the particular um storage provider",
    "start": "3144800",
    "end": "3153838"
  },
  {
    "text": "okay alex if um i'm gonna shoot a question to you what is the overhead in terms of memory",
    "start": "3154400",
    "end": "3160400"
  },
  {
    "text": "cpu to deploy storage on all the nodes of the cluster in specifically in kubernetes",
    "start": "3160400",
    "end": "3168800"
  },
  {
    "text": "um so so specifically with storage os um sewage os is is um built to be um",
    "start": "3168880",
    "end": "3175920"
  },
  {
    "text": "extremely low overhead so you know we source os can typically run with",
    "start": "3175920",
    "end": "3182720"
  },
  {
    "text": "a single core and and maybe a gig or two of ram depending on the depending on the amount",
    "start": "3182720",
    "end": "3188000"
  },
  {
    "text": "of uh activity so so storage os will will largely",
    "start": "3188000",
    "end": "3193359"
  },
  {
    "text": "coexist with additional workloads which are running on the cluster and and",
    "start": "3193359",
    "end": "3198480"
  },
  {
    "text": "typically it's often deployed in a hyperconverged type of topology where nodes are used",
    "start": "3198480",
    "end": "3205839"
  },
  {
    "text": "to provide storage to the pool but also for those nodes also run the same",
    "start": "3205839",
    "end": "3213119"
  },
  {
    "text": "applications that that run on the pool of course the amount of",
    "start": "3213119",
    "end": "3219520"
  },
  {
    "text": "cpu that any storage system um utilizes uh will be will be",
    "start": "3219520",
    "end": "3225920"
  },
  {
    "text": "tied to the actual amount of activity of course if um if there's lots of uh iops or or",
    "start": "3225920",
    "end": "3232960"
  },
  {
    "text": "you know a high number like hundreds of thousands of iops you'll see higher higher cpu",
    "start": "3232960",
    "end": "3240799"
  },
  {
    "text": "contention by the storage system",
    "start": "3241359",
    "end": "3251838"
  },
  {
    "text": "so we had um another question around uh container attached storage so so",
    "start": "3252240",
    "end": "3258400"
  },
  {
    "text": "container attached storage is a term um that's used uh that's used by",
    "start": "3258400",
    "end": "3264480"
  },
  {
    "text": "a number of software defined storage providers where those storage providers are actually",
    "start": "3264480",
    "end": "3269680"
  },
  {
    "text": "providing storage uh are actually deployed as a container and",
    "start": "3269680",
    "end": "3276559"
  },
  {
    "text": "providing storage to to a cluster that way i think the answer to this to this",
    "start": "3276559",
    "end": "3282640"
  },
  {
    "text": "question is in terms of does container attach storage lend itself to databases the answer is obviously yes",
    "start": "3282640",
    "end": "3289040"
  },
  {
    "text": "there are a number of cncf projects you know like um like longhorn which which falls into",
    "start": "3289040",
    "end": "3294720"
  },
  {
    "text": "this category as well as you know a number of different vendor-supported uh projects like",
    "start": "3294720",
    "end": "3300559"
  },
  {
    "text": "storage os that work in this method and effectively um create",
    "start": "3300559",
    "end": "3306880"
  },
  {
    "text": "volumes out of the available storage on individual nodes within within the",
    "start": "3306880",
    "end": "3312559"
  },
  {
    "text": "cluster so yes i think it is a particularly good fit for databases it's a very common use",
    "start": "3312559",
    "end": "3319599"
  },
  {
    "text": "cases things like databases and and maybe message queues are",
    "start": "3319599",
    "end": "3324720"
  },
  {
    "text": "are one of the most common use cases in terms of stateful workloads that move into kubernetes first",
    "start": "3324720",
    "end": "3330319"
  },
  {
    "text": "and a lot of the services offer some you know more advanced",
    "start": "3330319",
    "end": "3335839"
  },
  {
    "text": "functionality like which we haven't talked about today but things like affinity and locality which",
    "start": "3335839",
    "end": "3340960"
  },
  {
    "text": "which provide uh additional benefits to to databases within within the kubernetes environment",
    "start": "3340960",
    "end": "3349839"
  },
  {
    "text": "we also have another question around is it possible to run a postgres cluster",
    "start": "3358079",
    "end": "3365920"
  },
  {
    "text": "um like a primary replica set up in kubernetes and also how would you load balance to",
    "start": "3365920",
    "end": "3372079"
  },
  {
    "text": "it and shard it foreign is that something you can cover uh yeah one second i was answering one",
    "start": "3372079",
    "end": "3378000"
  },
  {
    "text": "of the one of them the answers uh sorry one of the the questions on the chat",
    "start": "3378000",
    "end": "3383440"
  },
  {
    "text": "so yeah about uh you you mentioned about the primary replica setup right",
    "start": "3383440",
    "end": "3388720"
  },
  {
    "text": "yeah cool let me let me re-ask the question a lot um is it",
    "start": "3388720",
    "end": "3394559"
  },
  {
    "text": "possible to run postgresql cluster like primary replica setup in kubernetes also hollow balance and sharing working",
    "start": "3394559",
    "end": "3399839"
  },
  {
    "text": "kubernetes kubernetes i would say that is no different from running that in a different server",
    "start": "3399839",
    "end": "3406559"
  },
  {
    "text": "what happens is that you have an orchestrator that will leverage uh the startup of",
    "start": "3406559",
    "end": "3411920"
  },
  {
    "text": "applications anywhere in the cluster real fast and that's that's fantastic you no longer have",
    "start": "3411920",
    "end": "3418000"
  },
  {
    "text": "nodes tied to applications you have applications tied to resources",
    "start": "3418000",
    "end": "3423760"
  },
  {
    "text": "so storage is a resource no different from cpu or memory so when you're asking for",
    "start": "3423760",
    "end": "3431680"
  },
  {
    "text": "storage itself if you have a system that gives that storage as actually what i was doing today with the pvc is you're just asking for",
    "start": "3431680",
    "end": "3438079"
  },
  {
    "text": "capacity and and the storage system is giving you that capacity running the application on top of this is no different than running it",
    "start": "3438079",
    "end": "3444480"
  },
  {
    "text": "somewhere else in fact because kubernetes gives you the networking interface and the dns itself is actually",
    "start": "3444480",
    "end": "3451920"
  },
  {
    "text": "very easy to configure uh primary replicas or read replicas or active passive model",
    "start": "3451920",
    "end": "3457920"
  },
  {
    "text": "i actually would say regret because it's easy active passive use a storage system because that will be way more difficult um and",
    "start": "3457920",
    "end": "3464799"
  },
  {
    "text": "it's done for you so you don't actually need to do so when we're thinking about primary replicas you can configure very very",
    "start": "3464799",
    "end": "3471200"
  },
  {
    "text": "easy uh a service that is for the primary and then another service",
    "start": "3471200",
    "end": "3476319"
  },
  {
    "text": "let's say a stateful set with a headless service then it's very easy to configure",
    "start": "3476319",
    "end": "3481359"
  },
  {
    "text": "another deployment or stateful set that holds replicas i would say stateful said you can have a",
    "start": "3481359",
    "end": "3487359"
  },
  {
    "text": "stateful set and scale that to 10 instances if you want so you would have the primary statement set under",
    "start": "3487359",
    "end": "3493200"
  },
  {
    "text": "replica status set tiny bit of configuration to sync all the data or to put configuration for the syncing using",
    "start": "3493200",
    "end": "3499839"
  },
  {
    "text": "dns names that they never change whether even though the applications the pod restarts here and there",
    "start": "3499839",
    "end": "3505839"
  },
  {
    "text": "that doesn't change kubernetes handles that frontend dns for you",
    "start": "3505839",
    "end": "3511040"
  },
  {
    "text": "and then you can just access the replicas through one service called read replicas",
    "start": "3511040",
    "end": "3517119"
  },
  {
    "text": "dot postgres and the main one to main dot positive to say something",
    "start": "3517119",
    "end": "3522960"
  },
  {
    "text": "then when it comes to sharding and things like that you can do exactly the same the load balancers that run in",
    "start": "3522960",
    "end": "3529040"
  },
  {
    "text": "kubernetes it's a it's a level four load balancing so it's based on networking it's not really um you can configure",
    "start": "3529040",
    "end": "3536880"
  },
  {
    "text": "that if you want but you don't need to you can configure a load balancer itself physically but you don't need to because",
    "start": "3536880",
    "end": "3543359"
  },
  {
    "text": "all everything is handled whether it's whether it is with ipbs or ip tables",
    "start": "3543359",
    "end": "3548720"
  },
  {
    "text": "or different components of the cni the access to network you can do by name so when you have to",
    "start": "3548720",
    "end": "3555040"
  },
  {
    "text": "sharp you you will hit any of the pots that serve a service so when you have to",
    "start": "3555040",
    "end": "3562720"
  },
  {
    "text": "chart you have to keep the sharding in your own application all posters can do that for you because",
    "start": "3562720",
    "end": "3568799"
  },
  {
    "text": "the routers are in front and they're front-ended if you use for instance elasticsearch elasticsearch does something similar",
    "start": "3568799",
    "end": "3575359"
  },
  {
    "text": "you hit some front-end part of the application that knows where the back-end data is and it does",
    "start": "3575359",
    "end": "3580799"
  },
  {
    "text": "all the aggregation when it comes to sharding etc so it's fairly easy and in fact i",
    "start": "3580799",
    "end": "3586160"
  },
  {
    "text": "would say that it makes your life easier to run this kind of infrastructure components in kubernetes",
    "start": "3586160",
    "end": "3592559"
  },
  {
    "text": "at least in my opinion fantastic and i think that covers um all",
    "start": "3592559",
    "end": "3600079"
  },
  {
    "text": "of the open questions and puts us neatly just a little bit over time yeah perfect",
    "start": "3600079",
    "end": "3607040"
  },
  {
    "text": "thank you again both um for the great presentation today is there um maybe your twitter handles or a slack",
    "start": "3607040",
    "end": "3613280"
  },
  {
    "text": "link that you want to share with folks in case they have lingering questions after the webinar",
    "start": "3613280",
    "end": "3618400"
  },
  {
    "text": "yes indeed um so drop those in the chat oh orange slide works too",
    "start": "3618400",
    "end": "3623839"
  },
  {
    "text": "yeah by the way i shared the github repo as well on the chat and in the questions",
    "start": "3623839",
    "end": "3630480"
  },
  {
    "text": "so so we're all all of our engineers and ferran and myself are",
    "start": "3630480",
    "end": "3635520"
  },
  {
    "text": "are available on uh slackthestorageos.com and all the demos and use cases are",
    "start": "3635520",
    "end": "3641760"
  },
  {
    "text": "available in the documentation on our website i would happily discuss use cases and",
    "start": "3641760",
    "end": "3649040"
  },
  {
    "text": "different options for moving databases into kubernetes thank you very much great well thanks",
    "start": "3649040",
    "end": "3654880"
  },
  {
    "text": "everyone again for attending um we hope to see you at a future cncf webinar a reminder that the",
    "start": "3654880",
    "end": "3660960"
  },
  {
    "text": "slides and recording will be posted later today to the cncf webinars page take care everyone and stay safe thanks",
    "start": "3660960",
    "end": "3666960"
  },
  {
    "text": "bye thank you very much",
    "start": "3666960",
    "end": "3671520"
  }
]