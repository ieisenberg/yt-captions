[
  {
    "text": "so welcome everybody to our talk unlocking the future of kubernetes policy as code with kaberno so I'm Frank",
    "start": "80",
    "end": "8480"
  },
  {
    "text": "I'm a senior software engineer at pneumatada and I I'm visual and I'm a",
    "start": "8480",
    "end": "13759"
  },
  {
    "text": "kiburn maintainer um yeah let's start with the first topic",
    "start": "13759",
    "end": "21920"
  },
  {
    "text": "um or our short agenda so first we talk about what Cavverno is for this folks",
    "start": "21920",
    "end": "28240"
  },
  {
    "text": "who doesn't work with it yet um what it does today and how you can achieve um",
    "start": "28240",
    "end": "34399"
  },
  {
    "text": "your goals with it then we will go into the next features of our upcoming",
    "start": "34399",
    "end": "40079"
  },
  {
    "text": "release which will change the way Kerno worked before a bit and yeah at the end",
    "start": "40079",
    "end": "47680"
  },
  {
    "text": "we showcasing these new features with some demonstrations and uh we have prepared",
    "start": "47680",
    "end": "53920"
  },
  {
    "text": "some stuff that you can try it out yourself if you like to so let's getting started with what is Calono um who of",
    "start": "53920",
    "end": "62399"
  },
  {
    "text": "our audience already using it in some way nice that's a lot thank you so what",
    "start": "62399",
    "end": "69600"
  },
  {
    "text": "is Kyverno um Kyerno is a CNCF incubating project",
    "start": "69600",
    "end": "76720"
  },
  {
    "text": "the name comes from the Greek word uh word to govern which means basically uh",
    "start": "76720",
    "end": "83159"
  },
  {
    "text": "governance so it's a policy engine built for Kubernetes in a Kubernetes native",
    "start": "83159",
    "end": "89840"
  },
  {
    "text": "way to help to achieve what your compliance uh or what your workloads",
    "start": "89840",
    "end": "97200"
  },
  {
    "text": "needs to be compliant um Kubernetes native means that it's only uses Kubernetes native um logic or tools to",
    "start": "97200",
    "end": "107040"
  },
  {
    "text": "write policies um like or it's basically relying only on YAML so you don't need to write any",
    "start": "107040",
    "end": "115840"
  },
  {
    "text": "other programming languages in or um what is needed in other similar tools",
    "start": "115840",
    "end": "123119"
  },
  {
    "text": "like OPA or Cuborn for example so you only need YAML to achieve or to write your policies it's working as an",
    "start": "123119",
    "end": "130319"
  },
  {
    "text": "admission controller so it already reviews and validates your workloads",
    "start": "130319",
    "end": "135599"
  },
  {
    "text": "doing the admission review it also works as a scanner so you can um validate",
    "start": "135599",
    "end": "142160"
  },
  {
    "text": "resources which are already applied in a cluster so when you have an already running cluster for a while and decide",
    "start": "142160",
    "end": "148879"
  },
  {
    "text": "to introduce Kyerno you can just run your policies in a background scanning",
    "start": "148879",
    "end": "154720"
  },
  {
    "text": "manner and already check how your existing workloads are compliant with",
    "start": "154720",
    "end": "160640"
  },
  {
    "text": "your given rule set we also providing uh features for auditing and reporting so that you can",
    "start": "160640",
    "end": "168640"
  },
  {
    "text": "uh see in an easy way how well your resources",
    "start": "168640",
    "end": "173680"
  },
  {
    "text": "um yeah work with your current rule set um so why Kyerno as I mentioned as a",
    "start": "173680",
    "end": "181120"
  },
  {
    "text": "Kubernetes native tool it's easy to use so folks which had no experience with",
    "start": "181120",
    "end": "187760"
  },
  {
    "text": "other Kubernetes or policy engines in the past can easily start adopting it we",
    "start": "187760",
    "end": "194080"
  },
  {
    "text": "have a very large library of predefined um policies for different use cases um",
    "start": "194080",
    "end": "201360"
  },
  {
    "text": "yeah we have a really active community so with around 3,000 users in our Kyvernos Slack",
    "start": "201360",
    "end": "208879"
  },
  {
    "text": "channel you get really fast help if you stuck somehow and um yeah nowadays we",
    "start": "208879",
    "end": "215040"
  },
  {
    "text": "also support payloads outside of Kubernetes as long as it's based on a",
    "start": "215040",
    "end": "220720"
  },
  {
    "text": "JSON format okay so let's talk about different",
    "start": "220720",
    "end": "227200"
  },
  {
    "text": "features of Kerno and what they can currently do for you and this will also act as a summary of current capabilities",
    "start": "227200",
    "end": "233920"
  },
  {
    "text": "and use cases so starting with validation so validation as the name",
    "start": "233920",
    "end": "239120"
  },
  {
    "text": "suggests validates a resource so it's a standard yes or no policy where whenever",
    "start": "239120",
    "end": "244159"
  },
  {
    "text": "you give this policy a resource it will run the validation checks as you have defined in the policy against the",
    "start": "244159",
    "end": "249599"
  },
  {
    "text": "resource it will give you a yes or no response and you can do whatever you want based on the response that you get",
    "start": "249599",
    "end": "255519"
  },
  {
    "text": "so if you want to outright block the resource when it fails the policy you can do that or you can just like create",
    "start": "255519",
    "end": "261759"
  },
  {
    "text": "a report uh with all the results in it to use it for compliance reasons right um this is the most common policy type",
    "start": "261759",
    "end": "268720"
  },
  {
    "text": "that we have it can be used for various cases like ensuring that a label is present on your resource or something",
    "start": "268720",
    "end": "274639"
  },
  {
    "text": "like the the resource requirements like the CPU and memory limits are set properly you can use it for that too",
    "start": "274639",
    "end": "280639"
  },
  {
    "text": "currently we supports validation using patterns which is a declarative way of specifying validation logic so as you",
    "start": "280639",
    "end": "286400"
  },
  {
    "text": "can see in on the screen there's an example where you are where we're verifying that the label name is set",
    "start": "286400",
    "end": "292800"
  },
  {
    "text": "properly on your resource if you have a complicated condition you can use that our condition block which uses James",
    "start": "292800",
    "end": "298720"
  },
  {
    "text": "path and James path functions uh for pro for writing complicated conditions we also recently added support for cell and",
    "start": "298720",
    "end": "305440"
  },
  {
    "text": "we also support port security policies um besides this you can also run background scans against your resources",
    "start": "305440",
    "end": "311919"
  },
  {
    "text": "so um you can just periodically run those policy against all the resources in your cluster it will create policy",
    "start": "311919",
    "end": "317440"
  },
  {
    "text": "reports for you and you will be aware of if every resource in the cluster is currently um compliant with your",
    "start": "317440",
    "end": "323520"
  },
  {
    "text": "standards and this is great for time proofing and preventing misconfiguration moving on so as uh",
    "start": "323520",
    "end": "330880"
  },
  {
    "text": "let's say in case you uh instead of wanting to validate resource you just want to mutate the resource tweak it up",
    "start": "330880",
    "end": "336560"
  },
  {
    "text": "a bit um to meet your requirements instead of just blocking it you can use a mutation policy so as the name",
    "start": "336560",
    "end": "342560"
  },
  {
    "text": "suggests it will mutate the resource and uh and mutation always occurs before",
    "start": "342560",
    "end": "347680"
  },
  {
    "text": "validation in the admission chain which means that you cannot bypass any validation logic just by using mutation",
    "start": "347680",
    "end": "353360"
  },
  {
    "text": "policy um currently we support both strategic merge patch and JSON patch so strategic merge patch would be your",
    "start": "353360",
    "end": "359280"
  },
  {
    "text": "declarative way of specifying how you want to mutate the resource you can see an example on the screen where uh we are",
    "start": "359280",
    "end": "365440"
  },
  {
    "text": "mutating the security context and you can also just specify the patches directly using the patch uh JSON patch",
    "start": "365440",
    "end": "372400"
  },
  {
    "text": "format right you can just specify the operation path and value it will do it for you and even if you have installed kivero later um on cluster and you want",
    "start": "372400",
    "end": "380319"
  },
  {
    "text": "to mutate resources that are already present in the cluster you can do that using kivero as well we also have",
    "start": "380319",
    "end": "385759"
  },
  {
    "text": "support for mutating existing resources coming to the case where you'd want to let's say generate or create a new",
    "start": "385759",
    "end": "392360"
  },
  {
    "text": "resource when a condition is fulfilled you can do that using kernel generation policy a use case for that would be",
    "start": "392360",
    "end": "399440"
  },
  {
    "text": "let's say you just created a new namespace and you want to ensure that that name space has a network policy in",
    "start": "399440",
    "end": "405120"
  },
  {
    "text": "it by default you can do that using kuberno generate policy um how you would define that um you can define that",
    "start": "405120",
    "end": "411680"
  },
  {
    "text": "define the object you want to create using um uh either you can specify a clone a clone object a source which can",
    "start": "411680",
    "end": "418479"
  },
  {
    "text": "be an object present in the cluster so you can just use let's say an existing network policy as a source or you can",
    "start": "418479",
    "end": "423919"
  },
  {
    "text": "just directly define the YAML of the object you want to create in the cluster policy itself and when you're using a",
    "start": "423919",
    "end": "430479"
  },
  {
    "text": "source um Kerno make sure that the object is the new object that is created is synchronized with the one you use as",
    "start": "430479",
    "end": "436479"
  },
  {
    "text": "a source so if you make any change in like the source resource the clone resource will also have that change so",
    "start": "436479",
    "end": "442319"
  },
  {
    "text": "this is very good if you have a secret that you modify if every single secret that's created from that will also be",
    "start": "442319",
    "end": "447520"
  },
  {
    "text": "modified and it is good it provides tamper resistance and it is ideal for multi-ent",
    "start": "447520",
    "end": "453080"
  },
  {
    "text": "workloads next um a good use case that you have seen from the community is resource optimization where you can",
    "start": "453080",
    "end": "460560"
  },
  {
    "text": "create a policy which will match stateful sets and deployments and whenever those are created it will",
    "start": "460560",
    "end": "466080"
  },
  {
    "text": "create a vertical bot autoscaler for them and this is a policy that was used by Adidas to reduce the cost of running",
    "start": "466080",
    "end": "472160"
  },
  {
    "text": "their cluster by 50% and this was a major part of how they did that next one",
    "start": "472160",
    "end": "477599"
  },
  {
    "text": "okay um coming to cleaning up resources so we have this thing called a kerno cleanup policy which will periodically",
    "start": "477599",
    "end": "484560"
  },
  {
    "text": "look for resources in your cluster and it will um find them and clean them up for you on a regular basis and this is",
    "start": "484560",
    "end": "491360"
  },
  {
    "text": "like ideal for removing unused resources or resources that violate your conditions um we also support another",
    "start": "491360",
    "end": "498400"
  },
  {
    "text": "behavior for cleanup where you can like set up a label called TTL it's cleanup.io/TL and you can let's say set",
    "start": "498400",
    "end": "505520"
  },
  {
    "text": "that on a board with a duration so you can create a pod with a cleanup TTL label set to one day and after one day",
    "start": "505520",
    "end": "511840"
  },
  {
    "text": "Kerno will automatically like delete that resource for you so this is also very good for setting expiration date on",
    "start": "511840",
    "end": "519760"
  },
  {
    "text": "resources uh one more use case for this would be to cleaning up pod disruption budget so sometimes what we have seen is",
    "start": "521719",
    "end": "527519"
  },
  {
    "text": "that um some pod disruption budgets they do not get deleted and sometimes they block nodes from being turned off which",
    "start": "527519",
    "end": "534080"
  },
  {
    "text": "can which can cause like extra cost so what you can do is you can just create a cluster cleanup policy which will find",
    "start": "534080",
    "end": "540640"
  },
  {
    "text": "those pod disruption budgets and automatically delete them like and help you in resource",
    "start": "540640",
    "end": "546200"
  },
  {
    "text": "optimization the last one would be image verification so since Kubernetes um is",
    "start": "546200",
    "end": "551360"
  },
  {
    "text": "based on containers so it is paramount that you only allow trusted containers",
    "start": "551360",
    "end": "556800"
  },
  {
    "text": "in your cluster right and one way to do it would be to making sure that you only use trusted images and you can do that",
    "start": "556800",
    "end": "562959"
  },
  {
    "text": "by using image verification and signing logic so you can verify images that were",
    "start": "562959",
    "end": "568480"
  },
  {
    "text": "signed by either no notary and cosign both of the major um image verification solution and you can verify the",
    "start": "568480",
    "end": "574399"
  },
  {
    "text": "signature on your container images you can also verify the signatures on attestations like esper or vulnerability",
    "start": "574399",
    "end": "580160"
  },
  {
    "text": "scan reports on those images you can let's say if you have a sb and you want to verify that it has um the right",
    "start": "580160",
    "end": "586000"
  },
  {
    "text": "licenses or like the right dependency you can also do that using kerno we allow you to um check the payload object",
    "start": "586000",
    "end": "592399"
  },
  {
    "text": "and make sure it has specific conditions on it um we support cosign keyless and",
    "start": "592399",
    "end": "598320"
  },
  {
    "text": "certificates and recently we also added support for the new GitHub artifact at astation so these are all the kerno",
    "start": "598320",
    "end": "604720"
  },
  {
    "text": "features and we can use them for any compliance or security or automation use case might you might have of going on",
    "start": "604720",
    "end": "611760"
  },
  {
    "text": "thanks so yeah now that we know what Kaberno can do and what different types",
    "start": "611760",
    "end": "617839"
  },
  {
    "text": "of policies we have why do we want to change Kyerno in its way it's working",
    "start": "617839",
    "end": "623360"
  },
  {
    "text": "today so um many of you might heard that",
    "start": "623360",
    "end": "628720"
  },
  {
    "text": "Kubernetes nowadays has an inbuilt admission policy feature and provides an",
    "start": "628720",
    "end": "635040"
  },
  {
    "text": "admission uh policy type for validating as well as mutating and Kubernetes",
    "start": "635040",
    "end": "640399"
  },
  {
    "text": "decided to go with cell as a solution to declare expressions for this kind of",
    "start": "640399",
    "end": "646079"
  },
  {
    "text": "policy types on the other hand we have Kyerno which also evolves over time and",
    "start": "646079",
    "end": "651200"
  },
  {
    "text": "brings today many different ways to achieve the same or similar logic to",
    "start": "651200",
    "end": "656920"
  },
  {
    "text": "yeah declare how or what your policy should do we have for example pattern",
    "start": "656920",
    "end": "662640"
  },
  {
    "text": "matching as described we have assertion trees we have a basic cell support already but this brings also some",
    "start": "662640",
    "end": "670000"
  },
  {
    "text": "difficulties for us as a maintainer and for you as a user because we providing",
    "start": "670000",
    "end": "675200"
  },
  {
    "text": "in the end one really large API um and you have one single C for each",
    "start": "675200",
    "end": "682480"
  },
  {
    "text": "type of policy so you might not know what is the best solution for me should I go with James path should I maybe go",
    "start": "682480",
    "end": "689680"
  },
  {
    "text": "with cell will uh pattern matching do the trick for me it's really hard to",
    "start": "689680",
    "end": "695360"
  },
  {
    "text": "decide and also it's sometimes hard to know what fields or what configurations",
    "start": "695360",
    "end": "701360"
  },
  {
    "text": "I need for my type of policy and how it will affect how my policy is executed in",
    "start": "701360",
    "end": "706720"
  },
  {
    "text": "the cluster for us as maintainers and also for the community to support it's",
    "start": "706720",
    "end": "712320"
  },
  {
    "text": "not easy to say you should go with one or another solution as it's really depending on the user on the environment",
    "start": "712320",
    "end": "720160"
  },
  {
    "text": "and on the scale so um let's take a deeper look on cell",
    "start": "720160",
    "end": "726959"
  },
  {
    "text": "what kerno kubernetes choose for their solution and what makes it different so",
    "start": "726959",
    "end": "733680"
  },
  {
    "text": "on the first point we already have a really large feature set we have mayo",
    "start": "733680",
    "end": "739279"
  },
  {
    "text": "features as as James pass already without any custom um ext",
    "start": "739279",
    "end": "746680"
  },
  {
    "text": "extensions we have a really large community which already provides a large",
    "start": "746680",
    "end": "752160"
  },
  {
    "text": "library of different um features you can easily add to your cell",
    "start": "752160",
    "end": "757800"
  },
  {
    "text": "environment this makes it really simple and powerful and it is side effect free",
    "start": "757800",
    "end": "763920"
  },
  {
    "text": "so it doesn't um mutate or change the input in any way",
    "start": "763920",
    "end": "771079"
  },
  {
    "text": "so Kyerno always had a goal to be cloudnative as possible and to make it",
    "start": "771079",
    "end": "777440"
  },
  {
    "text": "easy for you as a user to switch um from",
    "start": "777440",
    "end": "783040"
  },
  {
    "text": "other solutions or from the Kyerno admission validation policy to Kyerno to",
    "start": "783040",
    "end": "788720"
  },
  {
    "text": "use the extended feature set so it's more like natural that we now take a",
    "start": "788720",
    "end": "795680"
  },
  {
    "text": "look on what Kubernetes does and how we could utilizing it to make Kyverno",
    "start": "795680",
    "end": "801120"
  },
  {
    "text": "better for you as a user and improvements we wanted to",
    "start": "801120",
    "end": "807880"
  },
  {
    "text": "achieve as a list we want to be simpler and expressive",
    "start": "807880",
    "end": "814160"
  },
  {
    "text": "we also use this as a chance to improve our performance but also retain our current",
    "start": "814160",
    "end": "821920"
  },
  {
    "text": "feature set so it was not an option to go with cell now but limiting the",
    "start": "821920",
    "end": "827200"
  },
  {
    "text": "features Kyverno already provides to the user because it doesn't help if the user",
    "start": "827200",
    "end": "832560"
  },
  {
    "text": "has another way to write policies but can no longer achieve what it uh what",
    "start": "832560",
    "end": "838399"
  },
  {
    "text": "the user achieved before and as mentioned Kubernetes native we um",
    "start": "838399",
    "end": "846160"
  },
  {
    "text": "decided to go with the standardized Kubernetes API as much as possible so we",
    "start": "846160",
    "end": "851760"
  },
  {
    "text": "basically reused the API for validation admission policies and just extended it",
    "start": "851760",
    "end": "858000"
  },
  {
    "text": "with um additional features Kyerno provides for you as a",
    "start": "858000",
    "end": "863560"
  },
  {
    "text": "user in the last releases we left the Kubernetes space and are also be able to",
    "start": "863560",
    "end": "872160"
  },
  {
    "text": "validate or gener uh in general operate on resources outside of Kubernetes and",
    "start": "872160",
    "end": "879279"
  },
  {
    "text": "we also want to keep this supported and this means we have now one single API or",
    "start": "879279",
    "end": "886639"
  },
  {
    "text": "C in case of validation for example to validate all kind of JSON based payloads",
    "start": "886639",
    "end": "893680"
  },
  {
    "text": "as well as your Kubernetes resources so you no longer have to learn different",
    "start": "893680",
    "end": "898880"
  },
  {
    "text": "things if you want to use Kyerno JSON for external resources or if you stick",
    "start": "898880",
    "end": "906320"
  },
  {
    "text": "to Kubernetes resources and use things like pattern matching um yeah as mentioned we want to",
    "start": "906320",
    "end": "913040"
  },
  {
    "text": "keep our functionality this means for us that we decided to extend the cell um",
    "start": "913040",
    "end": "920800"
  },
  {
    "text": "implementation we are using with our feature set and adding libraries that",
    "start": "920800",
    "end": "926959"
  },
  {
    "text": "yeah implementing uh given features like um resource lookups external service",
    "start": "926959",
    "end": "934360"
  },
  {
    "text": "calls config map lookups and other features you know from the existing",
    "start": "934360",
    "end": "940760"
  },
  {
    "text": "API and yeah in the end we have a better balance between be declarative and have",
    "start": "940760",
    "end": "946560"
  },
  {
    "text": "an imperative syntax with the cell approach yeah yeah so based on the limitations",
    "start": "946560",
    "end": "953759"
  },
  {
    "text": "that we just identified and the features that we want we decided to create a brand new policy types and these policy",
    "start": "953759",
    "end": "960480"
  },
  {
    "text": "types will be simple and they are very expressive and they will retain all the current kerno features as well as we",
    "start": "960480",
    "end": "966079"
  },
  {
    "text": "will add new features like support for any GSON payload right so here's what we did we created five different policy",
    "start": "966079",
    "end": "972639"
  },
  {
    "text": "types so previously we only had one cluster policy but we decided to split them into all of the five different",
    "start": "972639",
    "end": "979279"
  },
  {
    "text": "rules that they have which creates a very simpler API and we created the validating policy image validating",
    "start": "979279",
    "end": "985440"
  },
  {
    "text": "policy mutating policy generating policy and the cleanup policy the first two will be available right now in 114",
    "start": "985440",
    "end": "992079"
  },
  {
    "text": "release and the next three will be added um in the future releases based on the feedback and what community wants so",
    "start": "992079",
    "end": "998880"
  },
  {
    "text": "let's get into the first one the validating policy if you look at the policy um from the overview of the",
    "start": "998880",
    "end": "1004800"
  },
  {
    "text": "policy it looks very similar to the cubernetes VAP API because that's the API we based this thing on um but if you",
    "start": "1004800",
    "end": "1012079"
  },
  {
    "text": "look closely you will see that we have added some um small things like the evaluation config and you will see an",
    "start": "1012079",
    "end": "1017519"
  },
  {
    "text": "audit annotation at the bottom so what we have basically done here is we have taken the VAP API and extended it with",
    "start": "1017519",
    "end": "1023279"
  },
  {
    "text": "features that cannot be added in the API server and VIAP because of performance constraints so the features that we",
    "start": "1023279",
    "end": "1030160"
  },
  {
    "text": "added can be some of them are let's say if you want to make an API call um to an external server you cannot do it in the",
    "start": "1030160",
    "end": "1036480"
  },
  {
    "text": "API server because they have time constraint but you can do it here you can use our own http.get library to make",
    "start": "1036480",
    "end": "1042558"
  },
  {
    "text": "an API call you can also fetch any resource that's pres present in the cluster you could already do it do do it",
    "start": "1042559",
    "end": "1047839"
  },
  {
    "text": "in a cluster policy that feature is also retained here and let's say if you want to create a report and you want to make",
    "start": "1047839",
    "end": "1053520"
  },
  {
    "text": "sure that the report has some custom properties you can also add them using the audit annotation thing so we still",
    "start": "1053520",
    "end": "1061200"
  },
  {
    "text": "have the um evaluation config you can see inspect.ealuation you will see there's a",
    "start": "1061200",
    "end": "1066320"
  },
  {
    "text": "background enabled true so the those things replicate the background scanning behavior that we previously had and we",
    "start": "1066320",
    "end": "1074160"
  },
  {
    "text": "also have the admission disabling so every single thing that you know from current verno will still be available in",
    "start": "1074160",
    "end": "1079760"
  },
  {
    "text": "these but they are we just created a simpler and like more expressive API so talking about expressive API we said",
    "start": "1079760",
    "end": "1086880"
  },
  {
    "text": "that we would support JSON payload so what we have done here is we have added support for JSON so you can use the same",
    "start": "1086880",
    "end": "1093520"
  },
  {
    "text": "API to create a policy that will be you will be able to use on any JSON payload",
    "start": "1093520",
    "end": "1098880"
  },
  {
    "text": "so what you have to do is you'll have to just set the evaluation mode to JSON and then you can just write any validation",
    "start": "1098880",
    "end": "1105360"
  },
  {
    "text": "logic in cell so in this example we are basically um verifying the JSON um the",
    "start": "1105360",
    "end": "1111120"
  },
  {
    "text": "parse JSON value of a docker file and we're running some checks on it to disable um use of curl command right so",
    "start": "1111120",
    "end": "1117840"
  },
  {
    "text": "you can do all of these um with this API the same API you won't have to use nojson or any different um solution that",
    "start": "1117840",
    "end": "1124480"
  },
  {
    "text": "we have we just have one single API that will be able to satisfy all your needs in cub in Kubernetes and outside of",
    "start": "1124480",
    "end": "1130960"
  },
  {
    "text": "Kubernetes as well so yep based on the well-known betting emission policy API",
    "start": "1130960",
    "end": "1137280"
  },
  {
    "text": "we extended with kerno features that you already know and love the policy boundaries have been made clearer by",
    "start": "1137280",
    "end": "1143039"
  },
  {
    "text": "separating the policy into their own CRDs and we have also added support for any JSON payload now so the other policy",
    "start": "1143039",
    "end": "1150080"
  },
  {
    "text": "that we we're going to talk about here was the image validating policy this is also based on the VAP API so just like",
    "start": "1150080",
    "end": "1157200"
  },
  {
    "text": "the VAP it still has the validation block where you specify the expression but if you look closely you will see it",
    "start": "1157200",
    "end": "1164000"
  },
  {
    "text": "has some special things like you will see there's an images variable here and there's this thing called attesters and",
    "start": "1164000",
    "end": "1170320"
  },
  {
    "text": "there are functions that are not present in anywhere else so we have added these things ourselves to facilitate image",
    "start": "1170320",
    "end": "1176080"
  },
  {
    "text": "verification in these different type of policy and so like we retain every single behavior that we currently had",
    "start": "1176080",
    "end": "1182000"
  },
  {
    "text": "and we added some more here as well so one thing that we added for image",
    "start": "1182000",
    "end": "1187760"
  },
  {
    "text": "verification was at basically any trusted authority right so you can have an attestation of type",
    "start": "1187760",
    "end": "1195200"
  },
  {
    "text": "notary or cosign all the current cosign features like keyless or key kms that",
    "start": "1195200",
    "end": "1200400"
  },
  {
    "text": "you already know they're already present here um you can also specify notary adister using notary certificates that",
    "start": "1200400",
    "end": "1206720"
  },
  {
    "text": "you might create and this this variable can you can specify these and then access them in the validation block and",
    "start": "1206720",
    "end": "1212640"
  },
  {
    "text": "you can run like set expression on them to do image verification other features that we had to add was an image",
    "start": "1212640",
    "end": "1219360"
  },
  {
    "text": "extraction logic because we want to support image verification on any JSON payload um we'll have we will need your",
    "start": "1219360",
    "end": "1224960"
  },
  {
    "text": "help to um tell us where the images are right so if you have a generic JSON you will have to tell us where the images",
    "start": "1224960",
    "end": "1231360"
  },
  {
    "text": "are and for that what we have done is we have created an images variable you can just specify the location of the images",
    "start": "1231360",
    "end": "1237440"
  },
  {
    "text": "using cell and we will find those images and then you can access them to run image verification against them you",
    "start": "1237440",
    "end": "1242799"
  },
  {
    "text": "won't have to define these if you're using just a pod or pod controllers they're autofilled for you in those case but for any custom resource or JSON you",
    "start": "1242799",
    "end": "1249760"
  },
  {
    "text": "will have to specify these yourself um at aist stations as I previously discussed J um um it can be sbombs or",
    "start": "1249760",
    "end": "1257280"
  },
  {
    "text": "vulnerability scan reports you can um you can already you can still use the cosign into addestation and the OCI",
    "start": "1257280",
    "end": "1264080"
  },
  {
    "text": "refers API attentation you can define them in your policy and then refer and they can refer to them in the validation",
    "start": "1264080",
    "end": "1269520"
  },
  {
    "text": "block using cell so here's a sample image validating policy so you can see",
    "start": "1269520",
    "end": "1276000"
  },
  {
    "text": "there's the attesttor block there's an attestation block and there's a verifications block since this policy",
    "start": "1276000",
    "end": "1282000"
  },
  {
    "text": "only matches Paul you won't need to define the images variable here and if you look at u verifications block you",
    "start": "1282000",
    "end": "1288240"
  },
  {
    "text": "will see that um there is a expression and in the expression you we are looping",
    "start": "1288240",
    "end": "1293679"
  },
  {
    "text": "over all the images in the containers and then we're using the verify image signature function and we verifying them",
    "start": "1293679",
    "end": "1300559"
  },
  {
    "text": "against the notary address that we defined here right and the second one once that once the first one passes it",
    "start": "1300559",
    "end": "1306080"
  },
  {
    "text": "will go to the second one and it will verify the signatures on the vulnerability scans and once that is",
    "start": "1306080",
    "end": "1312000"
  },
  {
    "text": "done then you can specify a condition that will find the payload of the vulnerability scan report and then it will make sure that that payload doesn't",
    "start": "1312000",
    "end": "1319120"
  },
  {
    "text": "have any critical or high vulnerability scan um vulnerability um in it right so",
    "start": "1319120",
    "end": "1325280"
  },
  {
    "text": "this gives you a more expressive syntax for writing complicated condition you can um write it on JSON now as well so",
    "start": "1325280",
    "end": "1332080"
  },
  {
    "text": "that's that's a very nifty feature that people wanted and yeah so as I said all",
    "start": "1332080",
    "end": "1338159"
  },
  {
    "text": "we can add complexation using cell all the features from image verify fe verify",
    "start": "1338159",
    "end": "1343200"
  },
  {
    "text": "image rules are already present and now you can just use it on any JSON payload so we will have other features like um",
    "start": "1343200",
    "end": "1349679"
  },
  {
    "text": "mutating policy and generate and other ones in the future releases right now we have these two and you can try it out in",
    "start": "1349679",
    "end": "1355200"
  },
  {
    "text": "the new one release i think the RC for that is out already and you'll be able to access it um there so let's move to",
    "start": "1355200",
    "end": "1361679"
  },
  {
    "text": "the demo um yeah so before I go strict into the",
    "start": "1361679",
    "end": "1368799"
  },
  {
    "text": "demo I prepared a QA code to a repository which has all the uh",
    "start": "1368799",
    "end": "1374799"
  },
  {
    "text": "resources I will showcase in the demo as well as uh links to the demon uh",
    "start": "1374799",
    "end": "1380679"
  },
  {
    "text": "demonstrated demonstration setups uh to our playground um so you will be able",
    "start": "1380679",
    "end": "1388159"
  },
  {
    "text": "without installing any LC or um test build of Cavono to try it out",
    "start": "1388159",
    "end": "1395919"
  },
  {
    "text": "and experiments with it and yeah every feedback will be uh very",
    "start": "1395919",
    "end": "1403559"
  },
  {
    "text": "welcome so let me quickly I can show the Q code later again if anyone",
    "start": "1403559",
    "end": "1410799"
  },
  {
    "text": "um was not able to take a picture so this is how the repository will look like you have the different links to our",
    "start": "1410799",
    "end": "1418320"
  },
  {
    "text": "um playground i will showcase this in a minute so every demo we will presenting",
    "start": "1418320",
    "end": "1425039"
  },
  {
    "text": "um are here and you can try it out and modify it uh so let me start so this is our um",
    "start": "1425039",
    "end": "1435200"
  },
  {
    "text": "playground where you can try things out um this is uh we",
    "start": "1435200",
    "end": "1441600"
  },
  {
    "text": "already have a preview build for 113 um",
    "start": "1441600",
    "end": "1447240"
  },
  {
    "text": "40 where the new policy types are available so as you already saw this is",
    "start": "1447240",
    "end": "1453440"
  },
  {
    "text": "a very basic uh no let me go with a validating policy um which checks uh a",
    "start": "1453440",
    "end": "1461679"
  },
  {
    "text": "deployment label so we using a match condition to targeting deployments in",
    "start": "1461679",
    "end": "1468159"
  },
  {
    "text": "this case um as in previous or for our current policy uh C you can also just",
    "start": "1468159",
    "end": "1476080"
  },
  {
    "text": "targeting pots and we still uh autogenerate our rules for other",
    "start": "1476080",
    "end": "1481760"
  },
  {
    "text": "controllers like replica set deployment stateful sets and so on so this feature",
    "start": "1481760",
    "end": "1488559"
  },
  {
    "text": "will also be available for um the new policy types and you can still configure it over an",
    "start": "1488559",
    "end": "1494760"
  },
  {
    "text": "annotation and yeah now we have a variable block where we basically",
    "start": "1494760",
    "end": "1502440"
  },
  {
    "text": "using an end label from the resource we",
    "start": "1502440",
    "end": "1507760"
  },
  {
    "text": "we are getting and checking if it's if the value is pro and in the actual",
    "start": "1507760",
    "end": "1515039"
  },
  {
    "text": "validation we're just checking if the value of the variable is true if so um",
    "start": "1515039",
    "end": "1521679"
  },
  {
    "text": "we will get a success if not we will get an error message and on the right side",
    "start": "1521679",
    "end": "1529200"
  },
  {
    "text": "we see um two example resources so we have a deployment with the expected",
    "start": "1529200",
    "end": "1534480"
  },
  {
    "text": "label on it and we have a bad deployment with the wrong label on it and you can",
    "start": "1534480",
    "end": "1541760"
  },
  {
    "text": "run it and as you might guess the good deployment passed the evaluation and the",
    "start": "1541760",
    "end": "1548159"
  },
  {
    "text": "bad one um provided our defined error message so",
    "start": "1548159",
    "end": "1553360"
  },
  {
    "text": "this is a very basic um policy and as I mentioned we",
    "start": "1553360",
    "end": "1561679"
  },
  {
    "text": "implemented different ways to um reimplement the features Kao already",
    "start": "1561679",
    "end": "1568720"
  },
  {
    "text": "had one of them are the resource lookup so we implemented a resource library",
    "start": "1568720",
    "end": "1575360"
  },
  {
    "text": "which makes it possible for you to access other resourcing uh resources in",
    "start": "1575360",
    "end": "1580880"
  },
  {
    "text": "your policy so for this example I have",
    "start": "1580880",
    "end": "1586360"
  },
  {
    "text": "a simple config map with a single item it's a list of name spaces I want to",
    "start": "1586360",
    "end": "1592640"
  },
  {
    "text": "allow in my policy and in the policy we use a",
    "start": "1592640",
    "end": "1598880"
  },
  {
    "text": "variable again to yeah get config map from the",
    "start": "1598880",
    "end": "1604400"
  },
  {
    "text": "default name space and the given name of our config map and in our validation we",
    "start": "1604400",
    "end": "1610320"
  },
  {
    "text": "can access this variable um the data and splitting the list so it",
    "start": "1610320",
    "end": "1615679"
  },
  {
    "text": "converts from a string to a list and then we checks via the in operator if",
    "start": "1615679",
    "end": "1621440"
  },
  {
    "text": "our nameace of the object is part of the list we defined in our quantific map or",
    "start": "1621440",
    "end": "1627000"
  },
  {
    "text": "not and also in this one I have an example with a test which was part of",
    "start": "1627000",
    "end": "1632480"
  },
  {
    "text": "the uh quantic map list and a second one",
    "start": "1632480",
    "end": "1641880"
  },
  {
    "text": "um which is not part of the list so and also in this case you",
    "start": "1641880",
    "end": "1648880"
  },
  {
    "text": "see it's passing and failing as expected and in our error message in",
    "start": "1648880",
    "end": "1654720"
  },
  {
    "text": "this case I used an message expression so you can also use cell in for example",
    "start": "1654720",
    "end": "1661520"
  },
  {
    "text": "your message or audit annotations to dynamically um access variables values of your",
    "start": "1661520",
    "end": "1669120"
  },
  {
    "text": "resource in the express in the message and yeah in this case we see that only",
    "start": "1669120",
    "end": "1675760"
  },
  {
    "text": "the dev test and stage name space is allowed but in this case we had a uh pro",
    "start": "1675760",
    "end": "1683440"
  },
  {
    "text": "name space um the last thing I want to show",
    "start": "1683440",
    "end": "1688559"
  },
  {
    "text": "is uh also is a is a helper um function we providing um in this case it's the",
    "start": "1688559",
    "end": "1696480"
  },
  {
    "text": "image data helper so it passes your image string in your deployment pot",
    "start": "1696480",
    "end": "1702640"
  },
  {
    "text": "whatever and you can do easily checks for example in this we are checking that",
    "start": "1702640",
    "end": "1708320"
  },
  {
    "text": "all containers um in",
    "start": "1708320",
    "end": "1713480"
  },
  {
    "text": "our pot um have the GitHub container registry as",
    "start": "1713480",
    "end": "1720960"
  },
  {
    "text": "its image registry so when we have a deployment with GitHub registry it",
    "start": "1720960",
    "end": "1728399"
  },
  {
    "text": "should work if we have one without then it should fail and also in this case um",
    "start": "1728399",
    "end": "1736480"
  },
  {
    "text": "we see that the expected resource passes and the other one",
    "start": "1736480",
    "end": "1743039"
  },
  {
    "text": "not so yeah this are my examples for the validating policy and now we continue",
    "start": "1744440",
    "end": "1751200"
  },
  {
    "text": "with some examples for the image validation",
    "start": "1751200",
    "end": "1756158"
  },
  {
    "text": "policy okay so let's load a policy to verify image signature so you can see we",
    "start": "1756919",
    "end": "1763200"
  },
  {
    "text": "have a image validating policy which ma matches on all the parts in the cluster",
    "start": "1763200",
    "end": "1768240"
  },
  {
    "text": "and then um this is the match condition to verify that the prod is true that doesn't matter here and we are only",
    "start": "1768240",
    "end": "1774399"
  },
  {
    "text": "verifying images that are present in the gcr.io registry so you can specify a glob or a cell expression here if you",
    "start": "1774399",
    "end": "1781679"
  },
  {
    "text": "only want to verify certain images on that resource and in the addister section which is the trusted authority",
    "start": "1781679",
    "end": "1787120"
  },
  {
    "text": "we are creating a notary adister u and we're passing a cert value will be",
    "start": "1787120",
    "end": "1792880"
  },
  {
    "text": "verified against the signature on the image and then you turn that",
    "start": "1792880",
    "end": "1799880"
  },
  {
    "text": "on and then we are running some validation checks here so in the validation check what we're doing is we",
    "start": "1799880",
    "end": "1806000"
  },
  {
    "text": "have a images variable and we're checking all the images on the container we map we are mapping against all of",
    "start": "1806000",
    "end": "1811679"
  },
  {
    "text": "them and then we are running the verify image signature so this is the function that takes the image as the first",
    "start": "1811679",
    "end": "1818000"
  },
  {
    "text": "argument and a list of atttor you want to verify it against and then in the return value it will give you the count",
    "start": "1818000",
    "end": "1823840"
  },
  {
    "text": "of that passed the image so what we're doing here is we are passing the single address that we had and then we are",
    "start": "1823840",
    "end": "1830720"
  },
  {
    "text": "checking that the value of uh the return value is more than zero so one of the address you provided verified the image",
    "start": "1830720",
    "end": "1836640"
  },
  {
    "text": "so if we run this since this making a this makes a network call it might take some time let's see oh quick so this",
    "start": "1836640",
    "end": "1844559"
  },
  {
    "text": "passed the image because we're using the signed one and if I use the unsigned",
    "start": "1844559",
    "end": "1850559"
  },
  {
    "text": "one it failed because that one did not have a signature that can be verified against this policy nice so that's the",
    "start": "1850600",
    "end": "1859200"
  },
  {
    "text": "example for image verification now let's just look at um atestation verification",
    "start": "1859200",
    "end": "1864399"
  },
  {
    "text": "so here we have a similar policy but instead of verifying the image we're verifying the sbomb attestation so it is",
    "start": "1864399",
    "end": "1871840"
  },
  {
    "text": "a refer API attestation which means it was um attested to the image using the OCI referers API and what we doing is we",
    "start": "1871840",
    "end": "1879600"
  },
  {
    "text": "are using the verify at stationation signature function we're passing the image we're passing the atestation and",
    "start": "1879600",
    "end": "1885760"
  },
  {
    "text": "then we're passing the array of atesters we want to verify it against and we're doing the same thing we're making sure that the value is greater than zero and",
    "start": "1885760",
    "end": "1893200"
  },
  {
    "text": "if we run it",
    "start": "1893200",
    "end": "1896240"
  },
  {
    "text": "here this one um and if you this passes because the image has the add a station",
    "start": "1899559",
    "end": "1906159"
  },
  {
    "text": "and quickly let's look at one more um here's one where you want to verify that",
    "start": "1906159",
    "end": "1911679"
  },
  {
    "text": "the payload of the addestation is the right one um again similar policy but",
    "start": "1911679",
    "end": "1917519"
  },
  {
    "text": "we're just checking in the second condition that we're fetching the payload and verifying that the bomb format is set to cyclone DX and if you",
    "start": "1917519",
    "end": "1924080"
  },
  {
    "text": "run it this should pass and if I just change",
    "start": "1924080",
    "end": "1929600"
  },
  {
    "text": "it from cyclone DX to say um yeah temp something",
    "start": "1929600",
    "end": "1937159"
  },
  {
    "text": "this fails because this is not the not the L bomb format that was defined in the um in the payload right so this is",
    "start": "1938960",
    "end": "1945600"
  },
  {
    "text": "these are the two policies that we have available at the moment you can just try them out on the playground on the link that we have which is where's the",
    "start": "1945600",
    "end": "1955559"
  },
  {
    "text": "this one right this one just give me a second should be here",
    "start": "1956080",
    "end": "1962480"
  },
  {
    "text": "yeah so you can just check out the um the examples in the repository that we",
    "start": "1962480",
    "end": "1967519"
  },
  {
    "text": "have provided and yeah that's all we had to talk about so do you have any questions",
    "start": "1967519",
    "end": "1973150"
  },
  {
    "text": "[Applause]",
    "start": "1973150",
    "end": "1979069"
  }
]