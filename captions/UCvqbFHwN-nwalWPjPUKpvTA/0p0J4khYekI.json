[
  {
    "start": "0",
    "end": "148000"
  },
  {
    "text": "uh my name is uh",
    "start": "60",
    "end": "6140"
  },
  {
    "text": "uh I'm looking for Fujitsu and uh",
    "start": "7080",
    "end": "12840"
  },
  {
    "text": "responsible for developing Linux and open source software",
    "start": "12840",
    "end": "19740"
  },
  {
    "text": "today I take charge of chair of this beginner",
    "start": "19740",
    "end": "25859"
  },
  {
    "text": "session each speaker is given 30 minutes",
    "start": "25859",
    "end": "34340"
  },
  {
    "text": "20 minutes for talk and 10 minutes for Q and A",
    "start": "34340",
    "end": "43440"
  },
  {
    "text": "and uh I have a favor for",
    "start": "43440",
    "end": "49020"
  },
  {
    "text": "ask please put put on your face mask during",
    "start": "49020",
    "end": "56160"
  },
  {
    "text": "session okay",
    "start": "56160",
    "end": "59539"
  },
  {
    "text": "so uh okay let's start",
    "start": "61559",
    "end": "67280"
  },
  {
    "text": "our first speaker is ah",
    "start": "67280",
    "end": "73159"
  },
  {
    "text": "Hiroshi hayakawa uh Yahoo Japan Corporation",
    "start": "73200",
    "end": "79040"
  },
  {
    "text": "he is leader engineer of kubernetes-based application platform in",
    "start": "79040",
    "end": "84540"
  },
  {
    "text": "Yahoo Japan private Cloud division and today's title is best practices for",
    "start": "84540",
    "end": "93180"
  },
  {
    "text": "applications on kubernetes for both frequent update and stability",
    "start": "93180",
    "end": "99119"
  },
  {
    "text": "okay here we go",
    "start": "99119",
    "end": "103880"
  },
  {
    "text": "so good morning everybody my name is",
    "start": "117439",
    "end": "122960"
  },
  {
    "text": "platformed developer for Yahoo Japan me and my team developer March tenant",
    "start": "122960",
    "end": "130200"
  },
  {
    "text": "platform using kubernetes focusing on running web applications",
    "start": "130200",
    "end": "136860"
  },
  {
    "text": "so we have been running and operating many web applications on such a platform",
    "start": "136860",
    "end": "142860"
  },
  {
    "text": "and today I would like to share our findings with you",
    "start": "142860",
    "end": "148920"
  },
  {
    "start": "148000",
    "end": "433000"
  },
  {
    "text": "and first I will try to give you a little more background on this",
    "start": "148920",
    "end": "153959"
  },
  {
    "text": "presentation from my perspective as a platform",
    "start": "153959",
    "end": "161340"
  },
  {
    "text": "developer I think the most important characteristic of modern application is",
    "start": "161340",
    "end": "169019"
  },
  {
    "text": "that they are frequently restarted in fact there are many reasons to",
    "start": "169019",
    "end": "175379"
  },
  {
    "text": "restart applications for example they may be updated to add new features",
    "start": "175379",
    "end": "183720"
  },
  {
    "text": "or they may be scared automatically or manually what they may be restarted for",
    "start": "183720",
    "end": "190440"
  },
  {
    "text": "maintenance of infrastructure on which the application is running such as kubernetes",
    "start": "190440",
    "end": "197819"
  },
  {
    "text": "so we need to view restarts of application as something that can happen",
    "start": "197819",
    "end": "203819"
  },
  {
    "text": "at any time therefore modern application must be",
    "start": "203819",
    "end": "209400"
  },
  {
    "text": "able to work reliably under such frequent restarts",
    "start": "209400",
    "end": "216379"
  },
  {
    "text": "and in addition to this fundamental requirements we also want to achieve",
    "start": "217500",
    "end": "223799"
  },
  {
    "text": "more for example we want to achieve a specific level of stability defined as a",
    "start": "223799",
    "end": "230580"
  },
  {
    "text": "types level or we want to achieve this in a larger scale application",
    "start": "230580",
    "end": "238019"
  },
  {
    "text": "and I think achieving these things will help us all sleep well at night and get",
    "start": "238019",
    "end": "245220"
  },
  {
    "text": "healthy quality of life lives",
    "start": "245220",
    "end": "249260"
  },
  {
    "text": "so what specific efforts should be made to achieve it",
    "start": "251040",
    "end": "257639"
  },
  {
    "text": "to consider this let's take a look at an overview of the life cycle of pots on",
    "start": "257639",
    "end": "264660"
  },
  {
    "text": "kubernetes in this presentation I will mainly",
    "start": "264660",
    "end": "269820"
  },
  {
    "text": "consider Java applications deployed on kubernetes with deployment resource",
    "start": "269820",
    "end": "278280"
  },
  {
    "text": "but anyway the lifestyle group such an application roughly looks like this",
    "start": "278280",
    "end": "285540"
  },
  {
    "text": "on the first deployment several reports are newly launched",
    "start": "285540",
    "end": "291000"
  },
  {
    "text": "later when we update the development resource supports are replaced with new",
    "start": "291000",
    "end": "297000"
  },
  {
    "text": "ones by Rolling updates and at this time the new version of",
    "start": "297000",
    "end": "303720"
  },
  {
    "text": "support is newly launched and the old ones are terminated",
    "start": "303720",
    "end": "310100"
  },
  {
    "text": "and learning ports may stop and expect unexpectedly for some reason",
    "start": "311880",
    "end": "319199"
  },
  {
    "text": "and the new one will be deployed and you may want to add more ports if",
    "start": "319199",
    "end": "325320"
  },
  {
    "text": "the load to support growth then again",
    "start": "325320",
    "end": "330780"
  },
  {
    "text": "the ports are updated to the new version and it causes supports to start and stop",
    "start": "330780",
    "end": "339138"
  },
  {
    "text": "as described above when an application is running many",
    "start": "340199",
    "end": "345900"
  },
  {
    "text": "things happen during its life how can we obtain application stability",
    "start": "345900",
    "end": "352320"
  },
  {
    "text": "in the face of these policy events I think we can simplifies the problem",
    "start": "352320",
    "end": "359460"
  },
  {
    "text": "and think about it from three perspectives the first is when the Newport is starts",
    "start": "359460",
    "end": "369180"
  },
  {
    "text": "make sure the pot is well prepared to handle requests without errors",
    "start": "369180",
    "end": "376320"
  },
  {
    "text": "right from the startup the second is when a pot is running",
    "start": "376320",
    "end": "383039"
  },
  {
    "text": "especially when the application load is high unexpected Port outages tend to happen",
    "start": "383039",
    "end": "392699"
  },
  {
    "text": "it is necessary to prevent this the third is when a port is terminating",
    "start": "392699",
    "end": "400979"
  },
  {
    "text": "to shut down a port without errors you need to be aware of kubernetes support",
    "start": "400979",
    "end": "406919"
  },
  {
    "text": "termination process and shut it down gracefully",
    "start": "406919",
    "end": "413120"
  },
  {
    "text": "in the life of an application many things can happen but by considering the",
    "start": "414000",
    "end": "420419"
  },
  {
    "text": "three perspectives to enhance the stability of each board it is possible",
    "start": "420419",
    "end": "426720"
  },
  {
    "text": "to stabilize the applications as a whole",
    "start": "426720",
    "end": "431360"
  },
  {
    "start": "433000",
    "end": "728000"
  },
  {
    "text": "so I will delve into each of the three perspectives in turn first let's talk about preparation in",
    "start": "434460",
    "end": "442919"
  },
  {
    "text": "launch of launcher pots",
    "start": "442919",
    "end": "447020"
  },
  {
    "text": "one seemed to be especially careful is that what support status become ready",
    "start": "448199",
    "end": "455780"
  },
  {
    "text": "requests from end users will come into support",
    "start": "455780",
    "end": "462479"
  },
  {
    "text": "when a port is added to add it to already running pot grip go to Rolling",
    "start": "462479",
    "end": "469620"
  },
  {
    "text": "updates or horizontal scaling once the boat is ready the production",
    "start": "469620",
    "end": "475380"
  },
  {
    "text": "volume of traffic will be sent from that point on",
    "start": "475380",
    "end": "481319"
  },
  {
    "text": "so the container containers in the port must be able to handle such volume of",
    "start": "481319",
    "end": "487500"
  },
  {
    "text": "requests before the status of the boat becomes ready",
    "start": "487500",
    "end": "493460"
  },
  {
    "text": "so what kind of preparation is required in a particular application",
    "start": "494819",
    "end": "502099"
  },
  {
    "text": "unfortunately it is necessary to consider for each of your applications",
    "start": "502940",
    "end": "509220"
  },
  {
    "text": "for example if the application depends on a database prepare a connection pool",
    "start": "509220",
    "end": "515399"
  },
  {
    "text": "for the database for Java applications you may want to",
    "start": "515399",
    "end": "521180"
  },
  {
    "text": "reserve an initial Heap memory or perform warm up to ensure the best",
    "start": "521180",
    "end": "528420"
  },
  {
    "text": "performance of it",
    "start": "528420",
    "end": "531560"
  },
  {
    "text": "so how do you prepare for kubernetes spot in an application",
    "start": "533760",
    "end": "540060"
  },
  {
    "text": "to know that we need to understand what happens in a boat when it is launched",
    "start": "540060",
    "end": "548040"
  },
  {
    "text": "the first step is to learn init containers they are executed sequentially if",
    "start": "548040",
    "end": "555899"
  },
  {
    "text": "multiple its containers exist after that the main container is started",
    "start": "555899",
    "end": "562800"
  },
  {
    "text": "and the post start lifecycle Hook is executed at the same time",
    "start": "562800",
    "end": "569459"
  },
  {
    "text": "when the posts start with finishes things three kind of pro three kind of",
    "start": "569459",
    "end": "575820"
  },
  {
    "text": "proofs starts",
    "start": "575820",
    "end": "579140"
  },
  {
    "text": "afterwards redness proof succeeds the pot is determined to be ready",
    "start": "581180",
    "end": "588540"
  },
  {
    "text": "and register sent to it therefore we can use init containers and",
    "start": "588540",
    "end": "595500"
  },
  {
    "text": "post start Slicer group for the preparation of containers",
    "start": "595500",
    "end": "602300"
  },
  {
    "text": "here is an important difference between init containers and post-start livestock",
    "start": "605940",
    "end": "611760"
  },
  {
    "text": "works in its container is a process that is executed in the separate container",
    "start": "611760",
    "end": "619440"
  },
  {
    "text": "before the main container is started on the other hand the post start work is",
    "start": "619440",
    "end": "627800"
  },
  {
    "text": "executed in the main container as soon as the main container is started",
    "start": "627800",
    "end": "633899"
  },
  {
    "text": "for example for warm up of Java application",
    "start": "633899",
    "end": "639360"
  },
  {
    "text": "which needs to be performed by the main application is running",
    "start": "639360",
    "end": "644700"
  },
  {
    "text": "post start work should be used",
    "start": "644700",
    "end": "648800"
  },
  {
    "text": "this is an example of using posts such like hook to warm up a Java application",
    "start": "652740",
    "end": "660120"
  },
  {
    "text": "the post-start process is described in the lifecycle field on the right",
    "start": "660120",
    "end": "667500"
  },
  {
    "text": "when written in this way the post start work is executed in the main container",
    "start": "667500",
    "end": "673620"
  },
  {
    "text": "here it slips for 10 seconds to wait for the",
    "start": "673620",
    "end": "678899"
  },
  {
    "text": "application to finish starting up and then send requests to it",
    "start": "678899",
    "end": "686959"
  },
  {
    "text": "lovely speaking in Java applications the same",
    "start": "687440",
    "end": "693140"
  },
  {
    "text": "code of the application same line is compiled from byte code to",
    "start": "693140",
    "end": "702120"
  },
  {
    "text": "Native machine code after about 10 000 executions",
    "start": "702120",
    "end": "707820"
  },
  {
    "text": "so it sends requests ten thousand times",
    "start": "707820",
    "end": "714360"
  },
  {
    "text": "since Readiness probe is always executed after the post start hook",
    "start": "714360",
    "end": "720480"
  },
  {
    "text": "when the pot is ready the performance is high enough",
    "start": "720480",
    "end": "726199"
  },
  {
    "start": "728000",
    "end": "740000"
  },
  {
    "text": "next we will discuss how to prevent unexpected pot shutdowns",
    "start": "730560",
    "end": "737100"
  },
  {
    "text": "when puts are running if our put stops kubernetes old hearing",
    "start": "737100",
    "end": "745620"
  },
  {
    "text": "will start a new Port but simply letting it to do so will not be stable enough",
    "start": "745620",
    "end": "754440"
  },
  {
    "text": "because if the container cannot be terminated gracefully the in-flight requests will result in",
    "start": "754440",
    "end": "761459"
  },
  {
    "text": "errors also if a port is stopped and high load",
    "start": "761459",
    "end": "767880"
  },
  {
    "text": "the remaining Port will have to endure the load before Newport starts",
    "start": "767880",
    "end": "775019"
  },
  {
    "text": "when a port stops and a heavy Road it is not expected that the remaining Port",
    "start": "775019",
    "end": "781440"
  },
  {
    "text": "will be able to withstand the load so our support will also stop one after",
    "start": "781440",
    "end": "788160"
  },
  {
    "text": "another therefore we must avoid the situation where both stops working as much as",
    "start": "788160",
    "end": "796440"
  },
  {
    "text": "possible [Music]",
    "start": "796440",
    "end": "801390"
  },
  {
    "start": "800000",
    "end": "822000"
  },
  {
    "text": "this diagram shows the summary of class patterns I have often encountered in my",
    "start": "802519",
    "end": "808320"
  },
  {
    "text": "experience running Java applications excluding application bugs or",
    "start": "808320",
    "end": "815639"
  },
  {
    "text": "misconfigurations in most cases High loads are beginning",
    "start": "815639",
    "end": "823279"
  },
  {
    "start": "822000",
    "end": "878000"
  },
  {
    "text": "the high road triggers are CPU one memory shortage",
    "start": "823680",
    "end": "828720"
  },
  {
    "text": "in the port or a bottleneck outside the pot become apparent",
    "start": "828720",
    "end": "835500"
  },
  {
    "text": "if memory consumption is too high the kubernetes will perform oom kill",
    "start": "835500",
    "end": "842880"
  },
  {
    "text": "also if liveness blue fails due to insufficient CPU or hurt garbage",
    "start": "842880",
    "end": "849779"
  },
  {
    "text": "collection associated with insufficient memory this will oh this is this will also",
    "start": "849779",
    "end": "857579"
  },
  {
    "text": "bring the pot to hot if liveness proof is not well configured",
    "start": "857579",
    "end": "863940"
  },
  {
    "text": "other next outside support may also cause a pot to",
    "start": "863940",
    "end": "869040"
  },
  {
    "text": "stop it is necessary to make efforts to stop such crash scenarios",
    "start": "869040",
    "end": "877399"
  },
  {
    "start": "878000",
    "end": "890000"
  },
  {
    "text": "to prevent CPU and memory shortage it is",
    "start": "879480",
    "end": "884639"
  },
  {
    "text": "necessary to perform load testing and tuning well",
    "start": "884639",
    "end": "890420"
  },
  {
    "text": "before before we get into the details here is a quick review of kubernetes",
    "start": "891839",
    "end": "898380"
  },
  {
    "text": "resource control CPU and memory allocation for both can",
    "start": "898380",
    "end": "904199"
  },
  {
    "text": "be set in resource requests and limits the value is setting resource request is",
    "start": "904199",
    "end": "911399"
  },
  {
    "text": "the amount of resources that will be guaranteed to The Container can use",
    "start": "911399",
    "end": "918300"
  },
  {
    "text": "and resource limits is a maximum amount of resources that can be used if the container used",
    "start": "918300",
    "end": "925380"
  },
  {
    "text": "to exceeds the requests",
    "start": "925380",
    "end": "929300"
  },
  {
    "start": "929000",
    "end": "987000"
  },
  {
    "text": "if a container's resource usage is about to exceed",
    "start": "931320",
    "end": "938600"
  },
  {
    "text": "resource limits kubernetes will control it to prevent it from exceeding them",
    "start": "939139",
    "end": "946740"
  },
  {
    "text": "in practice Linux C grips control is used if the CPU is about to exceed the limits",
    "start": "946740",
    "end": "956519"
  },
  {
    "text": "throttling occurs and the container is kept around the CPU usage settings are",
    "start": "956519",
    "end": "962339"
  },
  {
    "text": "limits if memory uses sees the limits the port",
    "start": "962339",
    "end": "969060"
  },
  {
    "text": "is killed by omkir at this time signal handling is impossible on the",
    "start": "969060",
    "end": "977639"
  },
  {
    "text": "application side and the in in brightly case will result",
    "start": "977639",
    "end": "983279"
  },
  {
    "text": "in errors",
    "start": "983279",
    "end": "986360"
  },
  {
    "start": "987000",
    "end": "1013000"
  },
  {
    "text": "in the case of Java application there are many types of memory areas and you",
    "start": "989220",
    "end": "994560"
  },
  {
    "text": "need to make them well tuned to keep the total memory usage within resource",
    "start": "994560",
    "end": "1000920"
  },
  {
    "text": "limits unfortunately the optimal value bodies from applications to applications",
    "start": "1000920",
    "end": "1008300"
  },
  {
    "text": "and must be found by enough Road testing",
    "start": "1008300",
    "end": "1013339"
  },
  {
    "start": "1013000",
    "end": "1077000"
  },
  {
    "text": "however at the starting point I recommend raising the Heap memory around to about",
    "start": "1013339",
    "end": "1021259"
  },
  {
    "text": "50 percent of the resource limits by default",
    "start": "1021259",
    "end": "1026959"
  },
  {
    "text": "the jvm sets Heap memory to about 20 to 30 percent of limits",
    "start": "1026959",
    "end": "1034579"
  },
  {
    "text": "so the amount of bleeding in the resource request and limits is often",
    "start": "1034579",
    "end": "1040400"
  },
  {
    "text": "left over this may not allow the application to perform as expected",
    "start": "1040400",
    "end": "1046640"
  },
  {
    "text": "and waste or gated memory so it is recommended to pull it up",
    "start": "1046640",
    "end": "1054100"
  },
  {
    "text": "the plug Max lamp percentage can be used to set the memory as a percentage of the",
    "start": "1054980",
    "end": "1062720"
  },
  {
    "text": "resource limits next we will discuss how to prevent the",
    "start": "1062720",
    "end": "1070100"
  },
  {
    "text": "port from stopping triggered by food garbage collection",
    "start": "1070100",
    "end": "1077320"
  },
  {
    "start": "1077000",
    "end": "1117000"
  },
  {
    "text": "first I'd like to talk about the fact that constellations about garbage",
    "start": "1078620",
    "end": "1084020"
  },
  {
    "text": "collection have changed since we learn Java applications in",
    "start": "1084020",
    "end": "1091100"
  },
  {
    "text": "containers in containers resources are often",
    "start": "1091100",
    "end": "1096559"
  },
  {
    "text": "allocated in a relatively small amount so the crcc is often used",
    "start": "1096559",
    "end": "1104780"
  },
  {
    "text": "since crtc takes a long time for full garbage collection it is easy for the liveness group to",
    "start": "1104780",
    "end": "1112100"
  },
  {
    "text": "fail and cubelete to terminate support",
    "start": "1112100",
    "end": "1117160"
  },
  {
    "text": "so if the third CC stop time makes your application unstable",
    "start": "1118100",
    "end": "1125240"
  },
  {
    "text": "please consider algorithms that emphasize response time such as G1 GC",
    "start": "1125240",
    "end": "1134240"
  },
  {
    "text": "also another tip please note that even if you just just increase the amount of",
    "start": "1134240",
    "end": "1141260"
  },
  {
    "text": "hip memory do not skip the test increasing the amount of memory will",
    "start": "1141260",
    "end": "1148039"
  },
  {
    "text": "increase the time it takes for full coverage collection",
    "start": "1148039",
    "end": "1154039"
  },
  {
    "text": "and if making a put more unstable than with less memory has",
    "start": "1154039",
    "end": "1160539"
  },
  {
    "text": "business mode next",
    "start": "1161200",
    "end": "1166700"
  },
  {
    "start": "1164000",
    "end": "1179000"
  },
  {
    "text": "let's consider support stoppage that occurs when liveness will be sprung to",
    "start": "1166700",
    "end": "1172820"
  },
  {
    "text": "failure when you start the brightness group what settings do you use",
    "start": "1172820",
    "end": "1180220"
  },
  {
    "start": "1179000",
    "end": "1205000"
  },
  {
    "text": "this is a quote from the kubernetes documentation which mentions that liveness proved",
    "start": "1180440",
    "end": "1187240"
  },
  {
    "text": "detects that an application is running but unable to make progress and it gives",
    "start": "1187240",
    "end": "1195440"
  },
  {
    "text": "example of a Deadlock but I think it isn't easy to come up",
    "start": "1195440",
    "end": "1202100"
  },
  {
    "text": "with other examples on the other hand I think",
    "start": "1202100",
    "end": "1207679"
  },
  {
    "start": "1205000",
    "end": "1266000"
  },
  {
    "text": "the liveness proof setting should be carefully considered especially for application facing unpredictable laws",
    "start": "1207679",
    "end": "1217100"
  },
  {
    "text": "if the application is overloaded it may not even respond to the likeness",
    "start": "1217100",
    "end": "1223460"
  },
  {
    "text": "group and if so cubelet will decide that the restart is necessary",
    "start": "1223460",
    "end": "1229580"
  },
  {
    "text": "and thumbnailing support but in a situation where a large amount",
    "start": "1229580",
    "end": "1236240"
  },
  {
    "text": "of traffic has to be processed it is still better to keep support running",
    "start": "1236240",
    "end": "1242419"
  },
  {
    "text": "than to restart it therefore it is better to live it as a",
    "start": "1242419",
    "end": "1248720"
  },
  {
    "text": "default than configurable HTTP liveness group without much salt",
    "start": "1248720",
    "end": "1256160"
  },
  {
    "text": "by default as long as application process runs liveness group is considered successful",
    "start": "1256160",
    "end": "1263260"
  },
  {
    "text": "[Music] finally this is a simple tip but it is",
    "start": "1263260",
    "end": "1269299"
  },
  {
    "start": "1266000",
    "end": "1277000"
  },
  {
    "text": "also important not to make liveness groups dependent on components outside support",
    "start": "1269299",
    "end": "1277039"
  },
  {
    "start": "1277000",
    "end": "1332000"
  },
  {
    "text": "for example in the lightness group you check the connectivity of a database",
    "start": "1277039",
    "end": "1283120"
  },
  {
    "text": "that application depends on such a configuration will cause support",
    "start": "1283120",
    "end": "1289280"
  },
  {
    "text": "to restart when the database is unstable also it will to live",
    "start": "1289280",
    "end": "1297380"
  },
  {
    "text": "it will do later to improve the state of the database",
    "start": "1297380",
    "end": "1303700"
  },
  {
    "text": "in these cases it is better that the port stays running and it gets to",
    "start": "1304220",
    "end": "1309799"
  },
  {
    "text": "support result in an error circuit breakers Technique we may be may",
    "start": "1309799",
    "end": "1316640"
  },
  {
    "text": "also be effective so please consider",
    "start": "1316640",
    "end": "1321460"
  },
  {
    "text": "so finally we will discuss how to safely stop ports without causing user traffic errors",
    "start": "1323179",
    "end": "1332260"
  },
  {
    "start": "1332000",
    "end": "1373000"
  },
  {
    "text": "even before running applications in kubernetes it was necessary to terminate",
    "start": "1333140",
    "end": "1339140"
  },
  {
    "text": "applications gracefully however with kubernetes there are few more",
    "start": "1339140",
    "end": "1344960"
  },
  {
    "text": "considerations in shutting down the port on kubernetes",
    "start": "1344960",
    "end": "1350780"
  },
  {
    "text": "two things happen one is that the cube rate Terminator board",
    "start": "1350780",
    "end": "1357080"
  },
  {
    "text": "the other is that the cube proxy stop traffic to the pot",
    "start": "1357080",
    "end": "1364000"
  },
  {
    "text": "and the port needs to be terminated after the traffic was",
    "start": "1364100",
    "end": "1369320"
  },
  {
    "text": "stopped",
    "start": "1369320",
    "end": "1371980"
  },
  {
    "text": "this diagram shows what happens when a port templates",
    "start": "1374780",
    "end": "1380019"
  },
  {
    "text": "first the cube proxy starts to stop traffic and in parallel the pre-stop rice cycle",
    "start": "1381080",
    "end": "1389000"
  },
  {
    "text": "is executed based off work is similar to The Post start work",
    "start": "1389000",
    "end": "1395900"
  },
  {
    "text": "and it's performed in the main container at Exit time",
    "start": "1395900",
    "end": "1401120"
  },
  {
    "text": "when this light sacrifice completes it cubelet sends a sick time signal to the",
    "start": "1401120",
    "end": "1406940"
  },
  {
    "text": "application and the application enters the termination process",
    "start": "1406940",
    "end": "1413900"
  },
  {
    "text": "there's no particular order in which the traffic stops and the port",
    "start": "1413900",
    "end": "1419480"
  },
  {
    "text": "shuts down so the application must be terminated before the traffic stop",
    "start": "1419480",
    "end": "1427720"
  },
  {
    "start": "1428000",
    "end": "1479000"
  },
  {
    "text": "so use the Play Store PlayStation work to wait until traffic stops",
    "start": "1430400",
    "end": "1438200"
  },
  {
    "text": "the Press stop work process cannot detect the stoppage so I use a sleep command",
    "start": "1438200",
    "end": "1445280"
  },
  {
    "text": "and wait for certain period when the application receives a sick",
    "start": "1445280",
    "end": "1451580"
  },
  {
    "text": "term signal it should 100 and exit gracefully",
    "start": "1451580",
    "end": "1457700"
  },
  {
    "text": "this ensures that the application terminates after returning response to",
    "start": "1457700",
    "end": "1464659"
  },
  {
    "text": "implied this in-flight requests",
    "start": "1464659",
    "end": "1469360"
  },
  {
    "text": "this slide says same thing as a previous one so I skip",
    "start": "1472600",
    "end": "1479200"
  },
  {
    "start": "1479000",
    "end": "1494000"
  },
  {
    "text": "here is an example example of an actual manifest in this example the pre-stop",
    "start": "1480620",
    "end": "1487340"
  },
  {
    "text": "life cycle is used to wait for 10 seconds foreign",
    "start": "1487340",
    "end": "1493900"
  },
  {
    "start": "1494000",
    "end": "1527000"
  },
  {
    "text": "requests [Music]",
    "start": "1495919",
    "end": "1500349"
  },
  {
    "text": "in many cases sdks or programming language or framework supports this",
    "start": "1504620",
    "end": "1512840"
  },
  {
    "text": "so you can use it this is an example of spring boot it is",
    "start": "1512840",
    "end": "1519260"
  },
  {
    "text": "sufficient to write such a configuration in application properties",
    "start": "1519260",
    "end": "1525500"
  },
  {
    "text": "[Music] I have shown you how to stabilize your",
    "start": "1525500",
    "end": "1532220"
  },
  {
    "text": "ports from three perspectives yeah of course what I have described",
    "start": "1532220",
    "end": "1538760"
  },
  {
    "text": "have is only what my team and I have experienced and I am sure there is room",
    "start": "1538760",
    "end": "1547340"
  },
  {
    "text": "for you to start more I hope this prep I hope this",
    "start": "1547340",
    "end": "1553039"
  },
  {
    "text": "presentation helps you in your exploration and finally I wish you all good night",
    "start": "1553039",
    "end": "1561020"
  },
  {
    "text": "sleeps thank you thank you very much",
    "start": "1561020",
    "end": "1566790"
  },
  {
    "start": "1565000",
    "end": "1953000"
  },
  {
    "text": "[Applause] very much is there any questions",
    "start": "1566790",
    "end": "1573399"
  },
  {
    "text": "okay thank you for your good presentations I",
    "start": "1587559",
    "end": "1592880"
  },
  {
    "text": "have one question so you mentioned so om killer Yes on your presentation so",
    "start": "1592880",
    "end": "1601400"
  },
  {
    "text": "so I have a question did you use a she group River so when you got or makira",
    "start": "1601400",
    "end": "1607820"
  },
  {
    "text": "right yeah yes have you ever been tried to use a she",
    "start": "1607820",
    "end": "1613700"
  },
  {
    "text": "group B2 so I asked her because she group Brito has considered as sorry C",
    "start": "1613700",
    "end": "1620120"
  },
  {
    "text": "group B2 consider so resource request of memory so if you have a result to use C",
    "start": "1620120",
    "end": "1628640"
  },
  {
    "text": "group on your application or something so I want to know oh",
    "start": "1628640",
    "end": "1634480"
  },
  {
    "text": "sorry I in my work I use only secrets to be one",
    "start": "1634480",
    "end": "1640820"
  },
  {
    "text": "so I not experienced such a good functionalities of secret security okay",
    "start": "1640820",
    "end": "1648620"
  },
  {
    "text": "thanks thanks I am looking forward to seeing your result in the future yeah",
    "start": "1648620",
    "end": "1657400"
  },
  {
    "text": "thank you",
    "start": "1664900",
    "end": "1667900"
  },
  {
    "text": "thank you for your presentation uh I was wondering uh how how did you",
    "start": "1676940",
    "end": "1683000"
  },
  {
    "text": "figure out that the optimal memory settings for I I assume use uh springboot also and uh like uh for",
    "start": "1683000",
    "end": "1690919"
  },
  {
    "text": "example the initial REM percentage and Max percent is like how do you figure out the optimal settings and also like",
    "start": "1690919",
    "end": "1698000"
  },
  {
    "text": "uh should those be equal like this seems to be some debate on this also yeah uh",
    "start": "1698000",
    "end": "1706899"
  },
  {
    "text": "I think the default settings of hip memory to 20 percent to 30 percent is a",
    "start": "1707179",
    "end": "1715059"
  },
  {
    "text": "because the first made JPM when there's no containers in the world",
    "start": "1716120",
    "end": "1723200"
  },
  {
    "text": "and it is a so",
    "start": "1723200",
    "end": "1727658"
  },
  {
    "text": "it's not enough to run job applications in containers",
    "start": "1728299",
    "end": "1735020"
  },
  {
    "text": "you know containers are Oliva",
    "start": "1735020",
    "end": "1740419"
  },
  {
    "text": "most cases only one processing containers and",
    "start": "1740419",
    "end": "1746720"
  },
  {
    "text": "um why I choose 50 percent",
    "start": "1746720",
    "end": "1752120"
  },
  {
    "text": "the reason is I what",
    "start": "1752120",
    "end": "1759700"
  },
  {
    "text": "Cloud native build box for Java applications and that product has a",
    "start": "1759860",
    "end": "1765200"
  },
  {
    "text": "memory calculator of java applications and",
    "start": "1765200",
    "end": "1771260"
  },
  {
    "text": "this we this memory calculator release upper",
    "start": "1771260",
    "end": "1777740"
  },
  {
    "text": "hip memory and users can specify a custom tunics",
    "start": "1777740",
    "end": "1784220"
  },
  {
    "text": "so I think that this is the best I thought this is the best to recommend",
    "start": "1784220",
    "end": "1791480"
  },
  {
    "text": "fast start point for 50 percent respecting",
    "start": "1791480",
    "end": "1798559"
  },
  {
    "text": "made it back memory calculate it makes sense yeah thank you so actually",
    "start": "1798559",
    "end": "1805580"
  },
  {
    "text": "we had recently uh uh optimization uh regarding this uh yeah uh also some",
    "start": "1805580",
    "end": "1811520"
  },
  {
    "text": "failures so we tried also a bit to uh uh high setting uh like a 80 80 or",
    "start": "1811520",
    "end": "1817399"
  },
  {
    "text": "something and uh then and ended up with uh issues and currently uh uh we are using",
    "start": "1817399",
    "end": "1824659"
  },
  {
    "text": "a 70 and uh so far no no issues maybe it's a bit too high I guess 50 is safe safe to",
    "start": "1824659",
    "end": "1832640"
  },
  {
    "text": "start yeah some some applications in yeah for Japan uses a",
    "start": "1832640",
    "end": "1839740"
  },
  {
    "text": "I think 80 percent right some applications usage pattern settings",
    "start": "1839740",
    "end": "1846080"
  },
  {
    "text": "so I think it is reasonable oh thank you thank you very much",
    "start": "1846080",
    "end": "1853419"
  },
  {
    "text": "hi a really great presentation um I was curious it seems like a lot of",
    "start": "1869600",
    "end": "1875960"
  },
  {
    "text": "the configuration um can be set according to like how you do your load testing yeah um so I'm just",
    "start": "1875960",
    "end": "1882919"
  },
  {
    "text": "kind of curious I know something that our company is struggling with is figuring out the most optimal way to do",
    "start": "1882919",
    "end": "1887960"
  },
  {
    "text": "load testing I just want to see if there's any uh tips or guidance that you could give for that",
    "start": "1887960",
    "end": "1894158"
  },
  {
    "text": "uh",
    "start": "1894260",
    "end": "1897159"
  },
  {
    "text": "[Music] in my company",
    "start": "1899500",
    "end": "1906100"
  },
  {
    "text": "we also struggling about finding the such a good Solutions",
    "start": "1906760",
    "end": "1913779"
  },
  {
    "text": "but but now",
    "start": "1913779",
    "end": "1918620"
  },
  {
    "text": "we our team",
    "start": "1919100",
    "end": "1924880"
  },
  {
    "text": "makes a load testing or tuning activities with Subs application",
    "start": "1925100",
    "end": "1932120"
  },
  {
    "text": "developers sometimes yeah I I have no idea",
    "start": "1932120",
    "end": "1939520"
  },
  {
    "text": "another good idea that's okay It's Tricky yeah yeah",
    "start": "1939520",
    "end": "1947200"
  },
  {
    "text": "thank you",
    "start": "1947659",
    "end": "1950320"
  }
]