[
  {
    "text": "hello everyone so welcome to this talk which is about analyzing the resilience of software composition analyszis",
    "start": "640",
    "end": "8240"
  },
  {
    "text": "against the container image opuscation so today with me there is",
    "start": "8240",
    "end": "13360"
  },
  {
    "text": "Yakopo um hello everyone i'm Yakopo i'm a PhD candidate at AL University and at",
    "start": "13360",
    "end": "20560"
  },
  {
    "text": "the same time I'm working as a researcher at the Senam Institute in in Paris uh my research revolves around",
    "start": "20560",
    "end": "28000"
  },
  {
    "text": "container and network security and my name is Agad BL i'm a research engineer",
    "start": "28000",
    "end": "33520"
  },
  {
    "text": "working at Tales in France and I'm especially working on the security or virtualiz network",
    "start": "33520",
    "end": "41160"
  },
  {
    "text": "environments so very brief advertisement before we dive into the technical content so this project was partially",
    "start": "41160",
    "end": "48559"
  },
  {
    "text": "funded by a project which is named SE for Y for sec it is a European project",
    "start": "48559",
    "end": "53600"
  },
  {
    "text": "so I put the link and QR code here if you're interested in what we are doing uh please check it out we are always",
    "start": "53600",
    "end": "60079"
  },
  {
    "text": "looking for collaborations so now diving into the",
    "start": "60079",
    "end": "65680"
  },
  {
    "text": "content of this talk which is obuscation in container in image why should we care",
    "start": "65680",
    "end": "70880"
  },
  {
    "text": "in the first place so two years ago at CubeCon 2023 a talk introduced the",
    "start": "70880",
    "end": "76720"
  },
  {
    "text": "concept of what we call malicious compliance and container opuscation so",
    "start": "76720",
    "end": "81920"
  },
  {
    "text": "starting from a base container the presenters progressively introduced some modification to a docker file and",
    "start": "81920",
    "end": "88640"
  },
  {
    "text": "ultimately reduce the number of vulnerabilities that were found by open source tools so they actually fooled the",
    "start": "88640",
    "end": "96479"
  },
  {
    "text": "container vulnerability scanners and uh which are in charge of detecting package",
    "start": "96479",
    "end": "102159"
  },
  {
    "text": "and vulnerabilities in the container image so in this work we wanted to analyze how the landscape evolved over",
    "start": "102159",
    "end": "109680"
  },
  {
    "text": "the past two years and we proposed an academic approach to the problem that we will detail right",
    "start": "109680",
    "end": "117359"
  },
  {
    "text": "after so I will first give a short overview of the tools that exist for",
    "start": "117719",
    "end": "123200"
  },
  {
    "text": "container vulnerability analysis and scanning so there are typically two main",
    "start": "123200",
    "end": "128800"
  },
  {
    "text": "steps when we want to scan for vulnerabilities in a container image so",
    "start": "128800",
    "end": "134000"
  },
  {
    "text": "first the tool will index the content of the container image so they will analyze",
    "start": "134000",
    "end": "139680"
  },
  {
    "text": "the container file systems and try to find installed software so it can be the operating system the operating system",
    "start": "139680",
    "end": "147200"
  },
  {
    "text": "packages the programming language the dependencies and libraries and finally",
    "start": "147200",
    "end": "153040"
  },
  {
    "text": "the binaries and at the end of this process they will generate a software bill of materials or sbomb that is a",
    "start": "153040",
    "end": "160400"
  },
  {
    "text": "list of components all of packages uh running into that container then the",
    "start": "160400",
    "end": "167360"
  },
  {
    "text": "second step is to search for vulnerabilities in this software so they will match uh those package against the",
    "start": "167360",
    "end": "174560"
  },
  {
    "text": "base of non vulnerabilities and typically they leverage custom online",
    "start": "174560",
    "end": "180319"
  },
  {
    "text": "sources and aggregate them together here is an example to find installed",
    "start": "180319",
    "end": "186800"
  },
  {
    "text": "software using sift which is an open source tool from narr we analyzed python",
    "start": "186800",
    "end": "194720"
  },
  {
    "text": "3.10 image and output the result as the bomb uh for JSON uh so here is a list of",
    "start": "194720",
    "end": "202319"
  },
  {
    "text": "artifacts as you can see we have a list of packages uh each package is uniquely",
    "start": "202319",
    "end": "208239"
  },
  {
    "text": "identified using annotation we have the common platform enumeration or CP and we",
    "start": "208239",
    "end": "214159"
  },
  {
    "text": "have the package URL or P so those notation enable to give a unique",
    "start": "214159",
    "end": "219200"
  },
  {
    "text": "identifier and to give details like the package name the organization",
    "start": "219200",
    "end": "224720"
  },
  {
    "text": "uh the version and even the author or distribution so they um also provide the",
    "start": "224720",
    "end": "232000"
  },
  {
    "text": "path of the file that were used to find the given software uh the layer ID where",
    "start": "232000",
    "end": "237120"
  },
  {
    "text": "the file is and finally some metadata information on the",
    "start": "237120",
    "end": "242519"
  },
  {
    "text": "package the second step is to search for vulnerability so here it uh we use gripe",
    "start": "242519",
    "end": "249200"
  },
  {
    "text": "which is another tool from ensure and it will process the sbomb previously",
    "start": "249200",
    "end": "254599"
  },
  {
    "text": "generated so on the left you can see the list of package that were previously identified u with their version and the",
    "start": "254599",
    "end": "263960"
  },
  {
    "text": "type for each package you have one or several vulnerabilities uh mostly",
    "start": "263960",
    "end": "269840"
  },
  {
    "text": "expressed as CVS with their severity and fixes if possible to upgrade to a newer",
    "start": "269840",
    "end": "274880"
  },
  {
    "text": "version so we can wonder which files are actually indexed to find those package",
    "start": "274880",
    "end": "282160"
  },
  {
    "text": "and actually there are different kinds of files corresponding to different types of packages so first we have the",
    "start": "282160",
    "end": "289840"
  },
  {
    "text": "operating system and it is mostly explicitly written in a file like uh etc",
    "start": "289840",
    "end": "298120"
  },
  {
    "text": "release uh it can be different files depending on the distribution and on the",
    "start": "298120",
    "end": "303360"
  },
  {
    "text": "operating system then we have the package installed via the package manager of US here is an example to find",
    "start": "303360",
    "end": "310880"
  },
  {
    "text": "DPKG package for Debian uh concerning programming language we have the",
    "start": "310880",
    "end": "316560"
  },
  {
    "text": "dependencies and the files uh installed as a package manager so requirements.txt",
    "start": "316560",
    "end": "323199"
  },
  {
    "text": "for Python package log.json for NodeJS and with the package manager we have",
    "start": "323199",
    "end": "329680"
  },
  {
    "text": "distin for Python and N modules for NodeJS and finally we can retrieve some",
    "start": "329680",
    "end": "335280"
  },
  {
    "text": "information about the binary so how these tools index this",
    "start": "335280",
    "end": "342240"
  },
  {
    "text": "content from the file system by default they will analyze the squashed representation of the container image",
    "start": "342240",
    "end": "349360"
  },
  {
    "text": "meaning they will combine all of the layers together to produce the final file system and then they will search",
    "start": "349360",
    "end": "356400"
  },
  {
    "text": "for nonfindings uh containing package related information just like the one",
    "start": "356400",
    "end": "361759"
  },
  {
    "text": "that we saw previously and they will use regex based uh search for license",
    "start": "361759",
    "end": "368400"
  },
  {
    "text": "package version author and so on so we can wonder uh what happen if",
    "start": "368400",
    "end": "376960"
  },
  {
    "text": "some of these files are removed or even do not exist one example could be then a",
    "start": "376960",
    "end": "383199"
  },
  {
    "text": "developer did not use a package manager to install dependencies but it downloaded software from source and",
    "start": "383199",
    "end": "389520"
  },
  {
    "text": "compile it locally so in this case we don't have all of the files to do the analysis we also have meaningful content",
    "start": "389520",
    "end": "397600"
  },
  {
    "text": "that is not indexed and not used by container vulnerability scanners so we",
    "start": "397600",
    "end": "402880"
  },
  {
    "text": "can think of the path uh of the file which are not fully analyzed we also",
    "start": "402880",
    "end": "408400"
  },
  {
    "text": "have some content files which is related to the package like the configuration",
    "start": "408400",
    "end": "413680"
  },
  {
    "text": "file the binaries but not actual package metadata so those file currently are not",
    "start": "413680",
    "end": "420120"
  },
  {
    "text": "analyzed we have the history or docker file commands where we can see for example the URL that were used to",
    "start": "420120",
    "end": "426800"
  },
  {
    "text": "download software and finally we have uh intermediate layers that may contain",
    "start": "426800",
    "end": "432720"
  },
  {
    "text": "very interesting information so typically files that were previous",
    "start": "432720",
    "end": "437840"
  },
  {
    "text": "removed in next layer of the",
    "start": "437840",
    "end": "443080"
  },
  {
    "text": "container and from this observation we now give a definition to the concept of",
    "start": "443080",
    "end": "449039"
  },
  {
    "text": "container opuscation so application is the act of intentionally or unintentionally",
    "start": "449039",
    "end": "456400"
  },
  {
    "text": "uh modifying or generating the content of a container image so when designing the docker file the docker file in such",
    "start": "456400",
    "end": "464720"
  },
  {
    "text": "a way that the installed software is partially or even totally undetected by",
    "start": "464720",
    "end": "469919"
  },
  {
    "text": "the container vulnerability scanners and this can arise for several",
    "start": "469919",
    "end": "475360"
  },
  {
    "text": "reasons as we see developers may want to reduce or to minimize the size of the",
    "start": "475360",
    "end": "480720"
  },
  {
    "text": "container image uh so to do so they can remove installation folders or it can be",
    "start": "480720",
    "end": "487440"
  },
  {
    "text": "also the case when using custom software installation without using the package",
    "start": "487440",
    "end": "492599"
  },
  {
    "text": "manager and finally using multi-stage builds so we have several intermediate",
    "start": "492599",
    "end": "497919"
  },
  {
    "text": "base image in the container when we copy only some of the files and we can miss",
    "start": "497919",
    "end": "503759"
  },
  {
    "text": "important files to do the analysis and those are actually best practices and",
    "start": "503759",
    "end": "508960"
  },
  {
    "text": "good guidelines when we write the docker file but at the same time they make the tools vulnerable to opuscation and the",
    "start": "508960",
    "end": "516640"
  },
  {
    "text": "the container image opiscated so from this observation we",
    "start": "516640",
    "end": "523839"
  },
  {
    "text": "derive a list of objectives that we would like to cover during this",
    "start": "523839",
    "end": "529000"
  },
  {
    "text": "presentation and in this work we make the assumption that the container opuscation is only inintentional meaning",
    "start": "529000",
    "end": "536320"
  },
  {
    "text": "it is not introduced by purpose and for malicious intents and first we want to understand",
    "start": "536320",
    "end": "543680"
  },
  {
    "text": "what are the main opuscation and how they occur then we will study different",
    "start": "543680",
    "end": "551440"
  },
  {
    "text": "state-of-the-art tools to see whether they are vulnerable to offiscation so we look both at cloud-based and open source",
    "start": "551440",
    "end": "557959"
  },
  {
    "text": "tools we also analyze a real and popular container image to see whether they",
    "start": "557959",
    "end": "564080"
  },
  {
    "text": "actually contain opuscation and maybe uh deploy in production and finally we",
    "start": "564080",
    "end": "569920"
  },
  {
    "text": "propose counter measures and mitigation to avoid container opiscation when building the images",
    "start": "569920",
    "end": "576880"
  },
  {
    "text": "so now I will give the floor to my colleague Yakopo he will present you the objectives and the work we've been doing",
    "start": "576880",
    "end": "583440"
  },
  {
    "text": "to enter them hello again um so let's start our",
    "start": "583440",
    "end": "591279"
  },
  {
    "text": "journey towards container opiscation um first objective is to uh derive a",
    "start": "591279",
    "end": "598640"
  },
  {
    "text": "taxonomy of the different offiscation techniques uh for that uh we uh explored",
    "start": "598640",
    "end": "606080"
  },
  {
    "text": "different uh information sources uh starting from uh research papers in academia then white papers industry",
    "start": "606080",
    "end": "613079"
  },
  {
    "text": "standards and we even went uh into open source software and looked at the source",
    "start": "613079",
    "end": "619200"
  },
  {
    "text": "code and how they they work we then built a taxonomy of the different type",
    "start": "619200",
    "end": "626000"
  },
  {
    "text": "of techniques that can be used to obuscate the content of a of a container image and here is the list of eight",
    "start": "626000",
    "end": "634720"
  },
  {
    "text": "techniques that we were able to to devise uh bear in mind that all of this assumes that the creator of the docker",
    "start": "634720",
    "end": "642160"
  },
  {
    "text": "file is has a non-malicious intent um so first tactic is the OS offuscation",
    "start": "642160",
    "end": "650079"
  },
  {
    "text": "meaning that uh users can delete modify or somehow alter the content of",
    "start": "650079",
    "end": "656880"
  },
  {
    "text": "the uh uh files containing operating system information then we have OS",
    "start": "656880",
    "end": "662959"
  },
  {
    "text": "package information uh where basically users they alter the content of the",
    "start": "662959",
    "end": "668560"
  },
  {
    "text": "databases or files that contain information on the installed dependencies uh similarly we have",
    "start": "668560",
    "end": "676240"
  },
  {
    "text": "dependency offiscation this time we talk about uh programming language dependency",
    "start": "676240",
    "end": "681360"
  },
  {
    "text": "files let's say requirements.txt for Python or package.json for for",
    "start": "681360",
    "end": "687320"
  },
  {
    "text": "Noode.js um similarly we have package offuscation",
    "start": "687320",
    "end": "692720"
  },
  {
    "text": "uh package obuscation happens when uh a user downloads dependencies and then",
    "start": "692720",
    "end": "698480"
  },
  {
    "text": "alters the content of the downloaded dependency let's say changes the content of the node modules so that uh the",
    "start": "698480",
    "end": "706240"
  },
  {
    "text": "version information or author information of the dependency is altered",
    "start": "706240",
    "end": "711519"
  },
  {
    "text": "uh then we have URL autheis basically uh the the user downloads software uh from",
    "start": "711519",
    "end": "719040"
  },
  {
    "text": "the internet rather than using package managers uh then we have alias and link",
    "start": "719040",
    "end": "726600"
  },
  {
    "text": "offiscation uh in this case we use aliases or links to to hide the path the",
    "start": "726600",
    "end": "732639"
  },
  {
    "text": "the real path of some files that are used uh as index files from uh software",
    "start": "732639",
    "end": "738560"
  },
  {
    "text": "composition analysis tools and finally we have the pack ofcation uh basically",
    "start": "738560",
    "end": "744959"
  },
  {
    "text": "the content of the image is compressed uh so this refers to uh multi-stage",
    "start": "744959",
    "end": "751360"
  },
  {
    "text": "builds or tools that uh compress the the layers into a single one",
    "start": "751360",
    "end": "758880"
  },
  {
    "text": "um so now that we have a taxonomy of the different offuscation techniques uh the",
    "start": "759320",
    "end": "765360"
  },
  {
    "text": "next question is is obuscation detected by state-of-the-art tools uh so we need to find to find out",
    "start": "765360",
    "end": "774480"
  },
  {
    "text": "whether uh this offuscation techniques can be actually uh exploited by an",
    "start": "774480",
    "end": "780480"
  },
  {
    "text": "attacker so for this we selected uh six different tools ranging from uh",
    "start": "780480",
    "end": "786480"
  },
  {
    "text": "open-source tools to cloud ones so here we have uh CNCF projects like tree but",
    "start": "786480",
    "end": "792320"
  },
  {
    "text": "also open source uh tools like sift and gripe we also have docker scout uh",
    "start": "792320",
    "end": "798720"
  },
  {
    "text": "artifact registry for Google defender for cloud in Microsoft and Amazon inspector",
    "start": "798720",
    "end": "805959"
  },
  {
    "text": "okay now we have tools we have techniques how to test them uh we need",
    "start": "805959",
    "end": "811760"
  },
  {
    "text": "to find uh we need to generate a data set of images that are increasingly",
    "start": "811760",
    "end": "818120"
  },
  {
    "text": "obiscated so um we curated a data set uh",
    "start": "818120",
    "end": "823279"
  },
  {
    "text": "to test the resilience of tools to offiscation and you can find it here",
    "start": "823279",
    "end": "828399"
  },
  {
    "text": "there's a QR code so we started by a base image base Python 10 image that is",
    "start": "828399",
    "end": "834399"
  },
  {
    "text": "not obuscated and then we started progressively adding more and more obiscation techniques first individual",
    "start": "834399",
    "end": "841360"
  },
  {
    "text": "techniques and then we combined multiple techniques in the same uh image and uh here are the some of the",
    "start": "841360",
    "end": "849440"
  },
  {
    "text": "results so as you can see uh many tools actually can I use this maybe",
    "start": "849440",
    "end": "855959"
  },
  {
    "text": "hello does it work anyway yes um so as you can see um many",
    "start": "855959",
    "end": "863519"
  },
  {
    "text": "of of the of the tools are vulnerable to individual instances of offiscation but",
    "start": "863519",
    "end": "868959"
  },
  {
    "text": "then uh as more um techniques are combined the tools become more and more",
    "start": "868959",
    "end": "875519"
  },
  {
    "text": "vulnerable to them um so what what we decided to do was that we decided to check for uh vulnerabilities and",
    "start": "875519",
    "end": "883600"
  },
  {
    "text": "packages detected for each tool and technique just to have a more comprehensive uh uh overview uh so here",
    "start": "883600",
    "end": "891440"
  },
  {
    "text": "is a table that shows for each uh technique and uh for each tool the number of vulnerabilities and packages",
    "start": "891440",
    "end": "898480"
  },
  {
    "text": "that are that are found um and we can see also that the impact of obuscation",
    "start": "898480",
    "end": "904880"
  },
  {
    "text": "increases also also here with the number of of techniques and we can see that for many tools and many techniques we have",
    "start": "904880",
    "end": "912000"
  },
  {
    "text": "zero uh vulnerabilities and zero packages identified meaning that we",
    "start": "912000",
    "end": "917440"
  },
  {
    "text": "reduce quite a lot the the visibility of this uh software composition analysis",
    "start": "917440",
    "end": "922639"
  },
  {
    "text": "tools um but we also see something else uh we see on on the right here you see",
    "start": "922639",
    "end": "927920"
  },
  {
    "text": "not not available not available uh this is because uh some of the cloud tools",
    "start": "927920",
    "end": "933760"
  },
  {
    "text": "they actually make assumptions on the content of containers so if containers do not have a specific file or specific",
    "start": "933760",
    "end": "940880"
  },
  {
    "text": "files then they will refuse to scan them for vulnerabilities and many times it's very hard to",
    "start": "940880",
    "end": "948480"
  },
  {
    "text": "distinguish a container that cannot be scanned from a container that has no vulnerabilities in the",
    "start": "948480",
    "end": "955320"
  },
  {
    "text": "UI um also food for thoughts as you can see tools report different numbers of",
    "start": "955320",
    "end": "961680"
  },
  {
    "text": "vulnerabilities and packages and sometimes uh tools may have uh may",
    "start": "961680",
    "end": "966800"
  },
  {
    "text": "recognize for different type of offiscation the same number of uh packages but different vulnerabilities",
    "start": "966800",
    "end": "973519"
  },
  {
    "text": "for instance uh sift for the OS offiscation finds nine vulnerabilities",
    "start": "973519",
    "end": "979360"
  },
  {
    "text": "but for the alias offiscation uh finds 625",
    "start": "979360",
    "end": "985320"
  },
  {
    "text": "um so to sum up the key findings are that there's a significant impact of",
    "start": "985320",
    "end": "991839"
  },
  {
    "text": "obiscation across multiple uh uh tools every tool has at least one is",
    "start": "991839",
    "end": "997839"
  },
  {
    "text": "vulnerable to at least one opuscation technique and that cloud scanners reject",
    "start": "997839",
    "end": "1003519"
  },
  {
    "text": "at times images that missing that are missing some specific",
    "start": "1003519",
    "end": "1009560"
  },
  {
    "text": "files let's now go to our third objective obuscation in the wild so now",
    "start": "1009560",
    "end": "1016240"
  },
  {
    "text": "we know that obuscation exists tools are somehow not resilient to it but our",
    "start": "1016240",
    "end": "1024199"
  },
  {
    "text": "containers in the wild using obuscation techniques uh so for that we first uh",
    "start": "1024199",
    "end": "1033839"
  },
  {
    "text": "decided on a data set we had to to find containers to to scan um we selected six",
    "start": "1033839",
    "end": "1039360"
  },
  {
    "text": "different data sets um because uh we wanted to cover as many use cases as",
    "start": "1039360",
    "end": "1045600"
  },
  {
    "text": "possible so uh are uh obuscation techniques happening only in uh hobbyist",
    "start": "1045600",
    "end": "1051919"
  },
  {
    "text": "uh container images or are they available in uh in production or do do we see cases in in production",
    "start": "1051919",
    "end": "1059799"
  },
  {
    "text": "um so we selected DockerHub official images DockerHub Bitnami images that are",
    "start": "1059799",
    "end": "1066160"
  },
  {
    "text": "very popular for hobbyist and in the cloud uh DockerHub verified uh open source software and then the quay.io",
    "start": "1066160",
    "end": "1074000"
  },
  {
    "text": "registry and the official Amazon ECR registry",
    "start": "1074000",
    "end": "1080120"
  },
  {
    "text": "um okay uh how to detect obuscation uh",
    "start": "1080120",
    "end": "1085840"
  },
  {
    "text": "we devised uh a methodology to effectively detect cases of obuscation",
    "start": "1085840",
    "end": "1092000"
  },
  {
    "text": "in uh in cont in in containers uh so how",
    "start": "1092000",
    "end": "1098000"
  },
  {
    "text": "how this works is that we take the container image uh and we do two things so first we",
    "start": "1098000",
    "end": "1105120"
  },
  {
    "text": "extract the lay the image layers and at the same time uh using the OCI standard",
    "start": "1105120",
    "end": "1111120"
  },
  {
    "text": "we are able to uh reconstruct and extract the metadata information on the",
    "start": "1111120",
    "end": "1116160"
  },
  {
    "text": "original docker file uh with the uh with the analyze lay with the with the",
    "start": "1116160",
    "end": "1122400"
  },
  {
    "text": "container image layers we we basically generate a sort of a G repository by",
    "start": "1122400",
    "end": "1129039"
  },
  {
    "text": "looking at all the modifications and changes on each individual file um and",
    "start": "1129039",
    "end": "1136559"
  },
  {
    "text": "then uh for the Docker file we instead look at instances where software is",
    "start": "1136559",
    "end": "1142600"
  },
  {
    "text": "downloaded from the internet uh if and at the end of the day if we",
    "start": "1142600",
    "end": "1148960"
  },
  {
    "text": "see uh software downloaded from the internet in the docker file or we see that files",
    "start": "1148960",
    "end": "1155080"
  },
  {
    "text": "with a a known file name let's say requirement.txt changes or gets deleted",
    "start": "1155080",
    "end": "1161280"
  },
  {
    "text": "then this is a an hint for us that the container was modified or was",
    "start": "1161280",
    "end": "1167720"
  },
  {
    "text": "obiscated um so we have a data set we have a methodology let's test this 600",
    "start": "1167720",
    "end": "1174559"
  },
  {
    "text": "containers and see what what happens um okay this is a glo global",
    "start": "1174559",
    "end": "1181440"
  },
  {
    "text": "view across this the the different uh containers and these are all the the different cases of offiscation that that",
    "start": "1181440",
    "end": "1188400"
  },
  {
    "text": "we find so we see that more than 10% of uh of the containers they they present",
    "start": "1188400",
    "end": "1194960"
  },
  {
    "text": "OS offiscation uh most of the times they modify the OS information but sometimes",
    "start": "1194960",
    "end": "1201039"
  },
  {
    "text": "the OS information is also deleted uh then we see a spike on the OS package",
    "start": "1201039",
    "end": "1206559"
  },
  {
    "text": "and that is because mainly most of the containers uh docker files they run a",
    "start": "1206559",
    "end": "1212480"
  },
  {
    "text": "get update as a first command but however we cannot um really remove them",
    "start": "1212480",
    "end": "1218559"
  },
  {
    "text": "from from this count because in many other cases uh the upgrading the",
    "start": "1218559",
    "end": "1224000"
  },
  {
    "text": "dependencies also comes with installing software from source um then we can see",
    "start": "1224000",
    "end": "1230159"
  },
  {
    "text": "that there are many uh containers that are downloaded from the internet like 20% of them and uh uh also uh package",
    "start": "1230159",
    "end": "1238000"
  },
  {
    "text": "and dependencies are removed then we uh computed this the",
    "start": "1238000",
    "end": "1244720"
  },
  {
    "text": "same results but we grouped them by data set uh and those are the uh the",
    "start": "1244720",
    "end": "1249919"
  },
  {
    "text": "observation that that we see is that offuscation is present in all of the containers so all of the registries so",
    "start": "1249919",
    "end": "1257360"
  },
  {
    "text": "it means that there is a small but not significant difference in the amount of obuscation from hobbyist to production",
    "start": "1257360",
    "end": "1265600"
  },
  {
    "text": "grade uh containers and also we see that bit nami has a surprisingly low number",
    "start": "1265600",
    "end": "1271039"
  },
  {
    "text": "of uh OS and OS package obuscation and this is because Bitnami pack packs all",
    "start": "1271039",
    "end": "1278000"
  },
  {
    "text": "the layers inside one using a tool called claim so we basically don't have a view",
    "start": "1278000",
    "end": "1284320"
  },
  {
    "text": "of the of the changes in the in the file system uh let's now see a practical",
    "start": "1284320",
    "end": "1290640"
  },
  {
    "text": "offiscation attack um this is an extract from a very popular uh docker file for",
    "start": "1290640",
    "end": "1297720"
  },
  {
    "text": "posgrql as you can see there's a really large rank command that first installs all the dependencies then download some",
    "start": "1297720",
    "end": "1304960"
  },
  {
    "text": "software from the internet then it also installs plugins for uh for posgress and",
    "start": "1304960",
    "end": "1311360"
  },
  {
    "text": "then builds the software and then downloads everything so what it means is that uh the corresponding layer will",
    "start": "1311360",
    "end": "1317200"
  },
  {
    "text": "just have a couple of binaries and one of them will be a go binary which is",
    "start": "1317200",
    "end": "1322400"
  },
  {
    "text": "okay you can uh actually get the dependencies but the other one is going to be a C binary and it will not be",
    "start": "1322400",
    "end": "1327919"
  },
  {
    "text": "recognized by any software composition analysis tool so how can an attacker",
    "start": "1327919",
    "end": "1333280"
  },
  {
    "text": "leverage this well basically uh the attacker will",
    "start": "1333280",
    "end": "1338320"
  },
  {
    "text": "just wait that somebody uh creates this container or just downloads the container and then uh it will actually",
    "start": "1338320",
    "end": "1346080"
  },
  {
    "text": "check that it will uh exploit known vulnerabilities on this image and one of",
    "start": "1346080",
    "end": "1351600"
  },
  {
    "text": "them is the CV 2024 10979 which allows um",
    "start": "1351600",
    "end": "1358200"
  },
  {
    "text": "uh an an unauthenticated uh or unprivileged attack to the to the uh",
    "start": "1358200",
    "end": "1366559"
  },
  {
    "text": "postgress SQL container so basically the external attacker will just gain access",
    "start": "1366559",
    "end": "1372000"
  },
  {
    "text": "uh leveraging this CV and no CI/CD tool will report this",
    "start": "1372000",
    "end": "1378919"
  },
  {
    "text": "vulnerability good uh but can we actually oh sorry can we actually",
    "start": "1378919",
    "end": "1384480"
  },
  {
    "text": "mitigate instances of offiscation so we know that offiscation exists we have",
    "start": "1384480",
    "end": "1391120"
  },
  {
    "text": "seen several cases of obiscation in open source uh containers uh how can we",
    "start": "1391120",
    "end": "1397200"
  },
  {
    "text": "mitigate it so we kind of borrowed some of the uh uh ideas from our first",
    "start": "1397200",
    "end": "1403520"
  },
  {
    "text": "methodology where we were able to identify cases of offiscation and",
    "start": "1403520",
    "end": "1409039"
  },
  {
    "text": "basically at the first fourth step we do an iterative analysis of all the layers",
    "start": "1409039",
    "end": "1414720"
  },
  {
    "text": "and the reconstructed docker file and we basically",
    "start": "1414720",
    "end": "1420200"
  },
  {
    "text": "uh examine each layer individually then we analyze package metadata and the uh",
    "start": "1420200",
    "end": "1428720"
  },
  {
    "text": "the actual downloaded packages so not only the requirements.xt txt but we go",
    "start": "1428720",
    "end": "1433840"
  },
  {
    "text": "in and we look at every uh downloaded dependency um then we also uh analyze",
    "start": "1433840",
    "end": "1440960"
  },
  {
    "text": "binaries like go binaries configuration files libraries and uh uh we also look",
    "start": "1440960",
    "end": "1447120"
  },
  {
    "text": "at the file paths so we we try to uh somehow increase the coverage on the on",
    "start": "1447120",
    "end": "1454400"
  },
  {
    "text": "the container file system so we use coverage as a metric to understand how well we are able to reconstruct the uh",
    "start": "1454400",
    "end": "1461760"
  },
  {
    "text": "content of the image and uh uh we built an open source tool called ORCA which is",
    "start": "1461760",
    "end": "1467520"
  },
  {
    "text": "available here and uh feel free to to check it out so those are the results uh of our",
    "start": "1467520",
    "end": "1477039"
  },
  {
    "text": "tool basically we are um this uh this methodology is basically resilient to",
    "start": "1477039",
    "end": "1482559"
  },
  {
    "text": "many instances of obuscation way more than the state than the state-of-the-art um but still you see that there are",
    "start": "1482559",
    "end": "1490799"
  },
  {
    "text": "there are some cases of obuscation that cannot be reconstructed and that is",
    "start": "1490799",
    "end": "1496640"
  },
  {
    "text": "because of the data loss that occurs when you use multi-stage build or where you compress the content of of an image",
    "start": "1496640",
    "end": "1505679"
  },
  {
    "text": "uh we're getting close to the end so these are the takeaways of this presentation so container image",
    "start": "1505679",
    "end": "1512240"
  },
  {
    "text": "offuscation is still very much a problem in 2025 uh obscure images are spread across",
    "start": "1512240",
    "end": "1520400"
  },
  {
    "text": "multiple use cases from hob to production deployments uh we built a",
    "start": "1520400",
    "end": "1526080"
  },
  {
    "text": "tool to discover and mitigate many cases of obuscation but not all of them can be",
    "start": "1526080",
    "end": "1534120"
  },
  {
    "text": "mitigated we have seen that multi-stage builds compressed images they actually",
    "start": "1534120",
    "end": "1540480"
  },
  {
    "text": "make it very hard for any tool to discover obuscation",
    "start": "1540480",
    "end": "1545600"
  },
  {
    "text": "so we need to update the the best practices that we have because we've seen um an unbalance between the image",
    "start": "1545600",
    "end": "1555200"
  },
  {
    "text": "size so what people are trying to do reduce the image size or reduce uh the instances of CVS that are are related to",
    "start": "1555200",
    "end": "1563279"
  },
  {
    "text": "a given software but on the other side we have to think about the ease of scanning we need to be able to provide",
    "start": "1563279",
    "end": "1569919"
  },
  {
    "text": "new um techniques and new best practices to make it easy and more transparent to",
    "start": "1569919",
    "end": "1576320"
  },
  {
    "text": "build containers that are easy to scan um and uh with that uh we thank you",
    "start": "1576320",
    "end": "1586559"
  },
  {
    "text": "and uh if you want to check out uh our tool is is there and uh I think we have",
    "start": "1586559",
    "end": "1593279"
  },
  {
    "text": "couple of minutes for for questions [Applause]",
    "start": "1593279",
    "end": "1607440"
  },
  {
    "text": "okay questions uh I think I think we can use this um my",
    "start": "1607440",
    "end": "1613279"
  },
  {
    "text": "question is while doing this research have you ever seen cases where for",
    "start": "1613279",
    "end": "1618400"
  },
  {
    "text": "example the the file like the requirements.txt txt is saying one thing but then actually in while doing with",
    "start": "1618400",
    "end": "1626640"
  },
  {
    "text": "the other scanning techniques is actually something else so is like a",
    "start": "1626640",
    "end": "1632799"
  },
  {
    "text": "sort of obuscation but it's saying that it has certain file certain packages but",
    "start": "1632799",
    "end": "1638640"
  },
  {
    "text": "actually has others so the question is have you ever seen cases where the content of the",
    "start": "1638640",
    "end": "1645679"
  },
  {
    "text": "dependency file is different from the downloaded package uh actually we have",
    "start": "1645679",
    "end": "1651120"
  },
  {
    "text": "seen cases of that uh we have seen mostly cases where um the package the the the",
    "start": "1651120",
    "end": "1659080"
  },
  {
    "text": "requirements.xt is updated in a subsequent layer so the the user loads",
    "start": "1659080",
    "end": "1665279"
  },
  {
    "text": "two different requirements.xt or cases where the um there is no version pinning so one",
    "start": "1665279",
    "end": "1672200"
  },
  {
    "text": "version is basically the um the version uh on the requirements.xt XT may be",
    "start": "1672200",
    "end": "1679039"
  },
  {
    "text": "vulnerable but in the end the version that is installed is not vulnerable or the opposite yeah that being said thank",
    "start": "1679039",
    "end": "1685679"
  },
  {
    "text": "you hi there thank you great talk by the way i loved it um I have a point of",
    "start": "1685679",
    "end": "1691880"
  },
  {
    "text": "understanding because I'm not very familiar with SIFT um what's the difference between the columns of SIFT",
    "start": "1691880",
    "end": "1698320"
  },
  {
    "text": "and SIFT all because there were very stark differences yes I got Yeah I can understand uh so",
    "start": "1698320",
    "end": "1708159"
  },
  {
    "text": "here sift all is the so sift is the only tool from the tools we analyze that",
    "start": "1708159",
    "end": "1713679"
  },
  {
    "text": "allow to scan every layer independently rather than scanning the squash representation of all of the layers so",
    "start": "1713679",
    "end": "1720799"
  },
  {
    "text": "that's why it perform significantly better than other so this is a good recommendation that uh we can say to um",
    "start": "1720799",
    "end": "1729919"
  },
  {
    "text": "increase uh the the performance of the tools and the only difference is that or",
    "start": "1729919",
    "end": "1736640"
  },
  {
    "text": "can also uh analyze the URL downloaded compared to sift all okay",
    "start": "1736640",
    "end": "1744480"
  },
  {
    "text": "thank you very much hello um thank you for the talk so you",
    "start": "1744480",
    "end": "1752080"
  },
  {
    "text": "had the table with vulnerabilities and packages identified for each tool and",
    "start": "1752080",
    "end": "1758159"
  },
  {
    "text": "there was quite a wide difference in results across tools um firstly did you",
    "start": "1758159",
    "end": "1765360"
  },
  {
    "text": "check kind of accuracy or or differences across these tools and quality and then",
    "start": "1765360",
    "end": "1771559"
  },
  {
    "text": "secondly how does Orca fit into this table does it identify packages and",
    "start": "1771559",
    "end": "1778279"
  },
  {
    "text": "vulnerabilities or does it fix the sbomb and then you would feed that to trivial",
    "start": "1778279",
    "end": "1784559"
  },
  {
    "text": "or or something like that maybe I I can so there are multiple",
    "start": "1784559",
    "end": "1790080"
  },
  {
    "text": "questions here first question is about um uh the difference in packages and",
    "start": "1790080",
    "end": "1796720"
  },
  {
    "text": "vulnerabilities across tools and then the question the second question is about Orca how it performs okay uh",
    "start": "1796720",
    "end": "1802720"
  },
  {
    "text": "really quickly because we're running out of time so um with with respect to packages uh we didn't do this work of",
    "start": "1802720",
    "end": "1810159"
  },
  {
    "text": "actually uh understanding which is the source of truth so we which one of the",
    "start": "1810159",
    "end": "1816720"
  },
  {
    "text": "tools uh has a good representation of the of the content that's actually what",
    "start": "1816720",
    "end": "1822960"
  },
  {
    "text": "we want to do research next so we would like to find a benchmark of containers",
    "start": "1822960",
    "end": "1828080"
  },
  {
    "text": "for which we know they installed software and see uh how it compares with the across the",
    "start": "1828080",
    "end": "1834960"
  },
  {
    "text": "the the other tools basically uh because we don't have a clear idea of a cont what is the content of a container image",
    "start": "1834960",
    "end": "1841679"
  },
  {
    "text": "in the first place so unfortunately I have no good answer on that but uh for the second question about orca uh our to",
    "start": "1841679",
    "end": "1849279"
  },
  {
    "text": "our idea was mainly to uh work on sbombs so the output of Orca is an sbomb",
    "start": "1849279",
    "end": "1855679"
  },
  {
    "text": "uh that then can be ingested by other tools then of course there are problems also there because there's",
    "start": "1855679",
    "end": "1861640"
  },
  {
    "text": "incompatibility between uh uh bomb sbomb formats but we made it sure that it was",
    "start": "1861640",
    "end": "1868480"
  },
  {
    "text": "compatible at least with the sift so that you you can use it with the with se",
    "start": "1868480",
    "end": "1874000"
  },
  {
    "text": "yes okay awesome thanks you're welcome great talk thanks uh my question is on a",
    "start": "1874000",
    "end": "1880559"
  },
  {
    "text": "developer point of view so uh as a developer some some of these offiscation I say oh I'm doing it in my dockers and",
    "start": "1880559",
    "end": "1887679"
  },
  {
    "text": "I can do it do you have set of guidelines so I can me and my team can prevent um doing this obuscation like",
    "start": "1887679",
    "end": "1895520"
  },
  {
    "text": "unintentionally on our dockers images",
    "start": "1895520",
    "end": "1901159"
  },
  {
    "text": "okay um so the question is um do you have a set of guidelines uh well uh we have",
    "start": "1902159",
    "end": "1909919"
  },
  {
    "text": "ideas on what to do but this requires a community effort so I can tell you uh",
    "start": "1909919",
    "end": "1915039"
  },
  {
    "text": "don't uh use multi-stage builds and everyone here would say oh my god what is he saying well there's like a balance",
    "start": "1915039",
    "end": "1921440"
  },
  {
    "text": "between easy to scan and best practices when it comes to sides so uh the idea is",
    "start": "1921440",
    "end": "1928399"
  },
  {
    "text": "basically uh do not delete anything leave everything as is uh and all and",
    "start": "1928399",
    "end": "1936399"
  },
  {
    "text": "this is kind of a initial step but then of course you will end up with gigabytes and gigabytes of images so",
    "start": "1936399",
    "end": "1944000"
  },
  {
    "text": "uh it kind of depends uh for sure um the idea would be to use our tool to",
    "start": "1944000",
    "end": "1951760"
  },
  {
    "text": "find out if something is wrong and then start from there and modify your docker",
    "start": "1951760",
    "end": "1957200"
  },
  {
    "text": "file habits but we hope that in the near future we will be able to publish some",
    "start": "1957200",
    "end": "1962640"
  },
  {
    "text": "uh real guidelines on how to uh make it easier for tools to scan containers",
    "start": "1962640",
    "end": "1969039"
  },
  {
    "text": "thank you thanks hi there um one understanding question",
    "start": "1969039",
    "end": "1975600"
  },
  {
    "text": "about the Vietnami images so they came out with quite few obuscations and you",
    "start": "1975600",
    "end": "1981919"
  },
  {
    "text": "said that it was because of the compression that they use so did they obuscate the obuscation with that is",
    "start": "1981919",
    "end": "1989200"
  },
  {
    "text": "that what the outcome of that is",
    "start": "1989200",
    "end": "1994120"
  },
  {
    "text": "so if I understood correctly the question is uh why is so that bit nam that bit nami contain container have",
    "start": "1996159",
    "end": "2003279"
  },
  {
    "text": "less uh obuscation well the the problem is that uh during their cicd process",
    "start": "2003279",
    "end": "2010799"
  },
  {
    "text": "they compress the content of the image so the image has only one layer and we",
    "start": "2010799",
    "end": "2016240"
  },
  {
    "text": "cannot reconstruct what happened to the image basically so we cannot say whether",
    "start": "2016240",
    "end": "2022240"
  },
  {
    "text": "or not they have they're more obiscated than others because they just compress everything in a single layer so we could",
    "start": "2022240",
    "end": "2029200"
  },
  {
    "text": "only get information from the original Docker file and that's it great thanks",
    "start": "2029200",
    "end": "2036320"
  },
  {
    "text": "hi thank you for the talk um just thinking about not using multi-stage",
    "start": "2036320",
    "end": "2041440"
  },
  {
    "text": "builds i feel like that's a pretty heavy cost that a lot of people aren't going to want to swallow so is there maybe a",
    "start": "2041440",
    "end": "2048240"
  },
  {
    "text": "middle ground where when like we could standardize a technique where when",
    "start": "2048240",
    "end": "2053599"
  },
  {
    "text": "images are built a some sort of metadata is added to the image on the way like as",
    "start": "2053599",
    "end": "2059440"
  },
  {
    "text": "to what was in the image would that be like a better approach or is there like a a middle ground we can aim for",
    "start": "2059440",
    "end": "2066000"
  },
  {
    "text": "yeah I think it will be a good practice because it's important to reduce the size of the image also to reduce the",
    "start": "2066000",
    "end": "2072398"
  },
  {
    "text": "surface of attack but still by providing important metadata information about",
    "start": "2072399",
    "end": "2078560"
  },
  {
    "text": "what is actually present in the image so the objective would be to good a good balance between uh the transparency of",
    "start": "2078560",
    "end": "2086240"
  },
  {
    "text": "the containers and and the same way reduce as much as we can the size and",
    "start": "2086240",
    "end": "2093839"
  },
  {
    "text": "vulnerabilities in the image",
    "start": "2093839",
    "end": "2098200"
  }
]