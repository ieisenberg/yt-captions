[
  {
    "text": "hi everyone thank you for joining me",
    "start": "30",
    "end": "2280"
  },
  {
    "text": "today today I'm going to talk about",
    "start": "2280",
    "end": "5370"
  },
  {
    "text": "Athens with sto single access control",
    "start": "5370",
    "end": "8760"
  },
  {
    "text": "model in cloud infrastructure I'd like",
    "start": "8760",
    "end": "14370"
  },
  {
    "text": "to start off by telling you about Athens",
    "start": "14370",
    "end": "17340"
  },
  {
    "text": "and show how we use multi cloud in the",
    "start": "17340",
    "end": "21150"
  },
  {
    "text": "Yahoo Japan then show benefits of using",
    "start": "21150",
    "end": "24630"
  },
  {
    "text": "Athens with East EO my name is Tatyana",
    "start": "24630",
    "end": "29609"
  },
  {
    "text": "I'm a platform developer in Yahoo Japan",
    "start": "29609",
    "end": "32930"
  },
  {
    "text": "I've been contributing to Athens and",
    "start": "32930",
    "end": "36090"
  },
  {
    "text": "having session in open source summit",
    "start": "36090",
    "end": "39030"
  },
  {
    "text": "Japan so if you and if anyone is",
    "start": "39030",
    "end": "41879"
  },
  {
    "text": "interested please visit the site first",
    "start": "41879",
    "end": "46559"
  },
  {
    "text": "what is Athens Athens is an open source",
    "start": "46559",
    "end": "50399"
  },
  {
    "text": "system created by Yahoo Inc it provides",
    "start": "50399",
    "end": "54090"
  },
  {
    "text": "two major features the first feature is",
    "start": "54090",
    "end": "57539"
  },
  {
    "text": "service authentication Athens provides",
    "start": "57539",
    "end": "61410"
  },
  {
    "text": "secure identities in the forum",
    "start": "61410",
    "end": "64220"
  },
  {
    "text": "short-lived x.509 certificate to any",
    "start": "64220",
    "end": "67380"
  },
  {
    "text": "modern cloud environments the second",
    "start": "67380",
    "end": "71790"
  },
  {
    "text": "feature is authorization it provides",
    "start": "71790",
    "end": "74700"
  },
  {
    "text": "fine-grained role based access control",
    "start": "74700",
    "end": "77000"
  },
  {
    "text": "[Music]",
    "start": "77000",
    "end": "79009"
  },
  {
    "text": "so let's start from service",
    "start": "79009",
    "end": "81540"
  },
  {
    "text": "authentication when talking about",
    "start": "81540",
    "end": "84420"
  },
  {
    "text": "authentication there are two different",
    "start": "84420",
    "end": "87150"
  },
  {
    "text": "principles there are many easy",
    "start": "87150",
    "end": "90119"
  },
  {
    "text": "standardized ways to do user",
    "start": "90119",
    "end": "92430"
  },
  {
    "text": "authentication like Active Directory",
    "start": "92430",
    "end": "94970"
  },
  {
    "text": "LDAP Kerberos or etc however we still",
    "start": "94970",
    "end": "100049"
  },
  {
    "text": "don't have as many good solutions for",
    "start": "100049",
    "end": "102420"
  },
  {
    "text": "service authentication a service can be",
    "start": "102420",
    "end": "106229"
  },
  {
    "text": "determined as many things like process",
    "start": "106229",
    "end": "108770"
  },
  {
    "text": "application instance or host for example",
    "start": "108770",
    "end": "113520"
  },
  {
    "text": "by using IP alcohols the configuration",
    "start": "113520",
    "end": "116610"
  },
  {
    "text": "will be more complex as the system scale",
    "start": "116610",
    "end": "120649"
  },
  {
    "text": "by using headless user account we have",
    "start": "120649",
    "end": "124710"
  },
  {
    "text": "to register and manage each account",
    "start": "124710",
    "end": "128330"
  },
  {
    "text": "another way to do this is to use share",
    "start": "128330",
    "end": "131370"
  },
  {
    "text": "secrets",
    "start": "131370",
    "end": "132510"
  },
  {
    "text": "however this approach can be vulnerable",
    "start": "132510",
    "end": "134310"
  },
  {
    "text": "to leakage of the secrets themselves for",
    "start": "134310",
    "end": "137489"
  },
  {
    "text": "example in man-in-the-middle attacks in",
    "start": "137489",
    "end": "141290"
  },
  {
    "text": "multi cloud environments",
    "start": "141290",
    "end": "143489"
  },
  {
    "text": "the most common secure way is to use",
    "start": "143489",
    "end": "146760"
  },
  {
    "text": "mutual TLS authentication with x.509",
    "start": "146760",
    "end": "149579"
  },
  {
    "text": "certificates by using search key based",
    "start": "149579",
    "end": "153750"
  },
  {
    "text": "authentication every instance or service",
    "start": "153750",
    "end": "157200"
  },
  {
    "text": "in your cloud can have their own",
    "start": "157200",
    "end": "159599"
  },
  {
    "text": "identities that allows them to",
    "start": "159599",
    "end": "162359"
  },
  {
    "text": "communicate to each other",
    "start": "162359",
    "end": "164430"
  },
  {
    "text": "securely by using metrio TLS",
    "start": "164430",
    "end": "166769"
  },
  {
    "text": "authentication mutual TLS authentication",
    "start": "166769",
    "end": "171329"
  },
  {
    "text": "enables us to securely identify the",
    "start": "171329",
    "end": "173760"
  },
  {
    "text": "client and server on both sides also in",
    "start": "173760",
    "end": "178470"
  },
  {
    "text": "cloud modern cloud environments since",
    "start": "178470",
    "end": "181920"
  },
  {
    "text": "our system can be sometimes built",
    "start": "181920",
    "end": "183930"
  },
  {
    "text": "outside of our private networks it's",
    "start": "183930",
    "end": "186930"
  },
  {
    "text": "becoming more important not to just",
    "start": "186930",
    "end": "188790"
  },
  {
    "text": "trust their access but to verify every",
    "start": "188790",
    "end": "191760"
  },
  {
    "text": "access before authorizing them in Athens",
    "start": "191760",
    "end": "197819"
  },
  {
    "text": "we is short-lived search gets to prevent",
    "start": "197819",
    "end": "200849"
  },
  {
    "text": "the credential in case of leaks the",
    "start": "200849",
    "end": "203790"
  },
  {
    "text": "circuits will be expired in 30 days by",
    "start": "203790",
    "end": "207359"
  },
  {
    "text": "default and the distillation can be",
    "start": "207359",
    "end": "211440"
  },
  {
    "text": "shortened with your security",
    "start": "211440",
    "end": "213000"
  },
  {
    "text": "requirements accordingly using",
    "start": "213000",
    "end": "217739"
  },
  {
    "text": "certificate based authentication can",
    "start": "217739",
    "end": "219780"
  },
  {
    "text": "provide good security but we still would",
    "start": "219780",
    "end": "222750"
  },
  {
    "text": "have a remaining question then how do we",
    "start": "222750",
    "end": "226709"
  },
  {
    "text": "provision those circuits into our",
    "start": "226709",
    "end": "229049"
  },
  {
    "text": "workloads Athens provides a generalized",
    "start": "229049",
    "end": "233250"
  },
  {
    "text": "model to boost rapid certificates into",
    "start": "233250",
    "end": "236419"
  },
  {
    "text": "each pod or instance by doing a call",
    "start": "236419",
    "end": "239730"
  },
  {
    "text": "back based verification against",
    "start": "239730",
    "end": "242549"
  },
  {
    "text": "authorized service providers we call",
    "start": "242549",
    "end": "245940"
  },
  {
    "text": "this model Kapur Argus Athens also",
    "start": "245940",
    "end": "250530"
  },
  {
    "text": "supports adding specie ID which is a",
    "start": "250530",
    "end": "253340"
  },
  {
    "text": "standardized format of identity in the",
    "start": "253340",
    "end": "256739"
  },
  {
    "text": "Sam field of the certificates so any",
    "start": "256739",
    "end": "260010"
  },
  {
    "text": "product which can identify other",
    "start": "260010",
    "end": "262650"
  },
  {
    "text": "services with speechy ID can be",
    "start": "262650",
    "end": "264990"
  },
  {
    "text": "compatible with Athens this is the flow",
    "start": "264990",
    "end": "269849"
  },
  {
    "text": "to do the bootstrap in copper argus",
    "start": "269849",
    "end": "271830"
  },
  {
    "text": "model first on number one the authorized",
    "start": "271830",
    "end": "276690"
  },
  {
    "text": "principles try to launch the instance by",
    "start": "276690",
    "end": "279599"
  },
  {
    "text": "contacting the provider on their cloud",
    "start": "279599",
    "end": "282530"
  },
  {
    "text": "then on number two the provider will",
    "start": "282530",
    "end": "287069"
  },
  {
    "text": "generate an identity document that is",
    "start": "287069",
    "end": "289530"
  },
  {
    "text": "signed by their own private key and",
    "start": "289530",
    "end": "291810"
  },
  {
    "text": "identifies an instance they boot then",
    "start": "291810",
    "end": "295169"
  },
  {
    "text": "passes it to the instance on bootstrap",
    "start": "295169",
    "end": "299930"
  },
  {
    "text": "then on number three",
    "start": "299930",
    "end": "302099"
  },
  {
    "text": "Athens provides a client called SIA SIA",
    "start": "302099",
    "end": "305669"
  },
  {
    "text": "means service identity agent that runs",
    "start": "305669",
    "end": "309300"
  },
  {
    "text": "in each instance CL generates its",
    "start": "309300",
    "end": "313259"
  },
  {
    "text": "private key inside the instance which",
    "start": "313259",
    "end": "316169"
  },
  {
    "text": "never leads from assistant height and",
    "start": "316169",
    "end": "318139"
  },
  {
    "text": "also generates a CSR from the private",
    "start": "318139",
    "end": "321449"
  },
  {
    "text": "key that was created by itself then on",
    "start": "321449",
    "end": "326610"
  },
  {
    "text": "number four SIA will make a request",
    "start": "326610",
    "end": "328860"
  },
  {
    "text": "against Athens server to register the",
    "start": "328860",
    "end": "331349"
  },
  {
    "text": "instance information by passing the",
    "start": "331349",
    "end": "333719"
  },
  {
    "text": "identity document which was signed by",
    "start": "333719",
    "end": "336000"
  },
  {
    "text": "the provider and also the CSR created by",
    "start": "336000",
    "end": "339360"
  },
  {
    "text": "itself when Athens receives a request on",
    "start": "339360",
    "end": "345389"
  },
  {
    "text": "number five it will first verify if the",
    "start": "345389",
    "end": "348840"
  },
  {
    "text": "provider Whitten in the identity",
    "start": "348840",
    "end": "351570"
  },
  {
    "text": "document is authorized to launch the",
    "start": "351570",
    "end": "353669"
  },
  {
    "text": "particular instance then on number six",
    "start": "353669",
    "end": "358080"
  },
  {
    "text": "it will make a callback request to the",
    "start": "358080",
    "end": "360509"
  },
  {
    "text": "provider to confirm if the identity",
    "start": "360509",
    "end": "362789"
  },
  {
    "text": "document that was passed from the",
    "start": "362789",
    "end": "364889"
  },
  {
    "text": "instance is valid and also the instance",
    "start": "364889",
    "end": "367560"
  },
  {
    "text": "is managed by the provider Athens will",
    "start": "367560",
    "end": "371430"
  },
  {
    "text": "report the instances IP address to",
    "start": "371430",
    "end": "373650"
  },
  {
    "text": "provide a provider so the provider can",
    "start": "373650",
    "end": "376530"
  },
  {
    "text": "verify that the request is coming from",
    "start": "376530",
    "end": "379050"
  },
  {
    "text": "the expected client then if the",
    "start": "379050",
    "end": "384080"
  },
  {
    "text": "verification on the provider succeeds on",
    "start": "384080",
    "end": "386909"
  },
  {
    "text": "number seven Athens will make a request",
    "start": "386909",
    "end": "390030"
  },
  {
    "text": "to a different component called",
    "start": "390030",
    "end": "391979"
  },
  {
    "text": "certificate signer to ask for generating",
    "start": "391979",
    "end": "395190"
  },
  {
    "text": "actual certificate",
    "start": "395190",
    "end": "398000"
  },
  {
    "text": "when the surgical signer receives the",
    "start": "398000",
    "end": "400710"
  },
  {
    "text": "request we will talk to HSM hardware",
    "start": "400710",
    "end": "403560"
  },
  {
    "text": "security module which does the actual",
    "start": "403560",
    "end": "405690"
  },
  {
    "text": "signing and generating a new certificate",
    "start": "405690",
    "end": "408740"
  },
  {
    "text": "after Athens getting the search gift",
    "start": "408740",
    "end": "411569"
  },
  {
    "text": "from certificate signer it will send",
    "start": "411569",
    "end": "413550"
  },
  {
    "text": "back it to the asia on number eight this",
    "start": "413550",
    "end": "419400"
  },
  {
    "text": "is the flow to do boostrap in copper",
    "start": "419400",
    "end": "421620"
  },
  {
    "text": "argus model the search kid issued in",
    "start": "421620",
    "end": "425849"
  },
  {
    "text": "this flow is short-lived so we don't",
    "start": "425849",
    "end": "430110"
  },
  {
    "text": "need to manage your ELLs sia will also",
    "start": "430110",
    "end": "433770"
  },
  {
    "text": "continue to run on the instance in order",
    "start": "433770",
    "end": "436620"
  },
  {
    "text": "to refer to the certificates by",
    "start": "436620",
    "end": "438690"
  },
  {
    "text": "following the same flow the second",
    "start": "438690",
    "end": "443220"
  },
  {
    "text": "feature is to support authorization in",
    "start": "443220",
    "end": "448080"
  },
  {
    "text": "order to do otter ization in Athens I'd",
    "start": "448080",
    "end": "451530"
  },
  {
    "text": "like to explain the four main words in",
    "start": "451530",
    "end": "453930"
  },
  {
    "text": "Athens is data model the first one is",
    "start": "453930",
    "end": "457740"
  },
  {
    "text": "the main the main is an namespace to",
    "start": "457740",
    "end": "461849"
  },
  {
    "text": "seperate other entities into different",
    "start": "461849",
    "end": "464190"
  },
  {
    "text": "scopes other entities will be defined",
    "start": "464190",
    "end": "467039"
  },
  {
    "text": "under a specific domain the second one",
    "start": "467039",
    "end": "470819"
  },
  {
    "text": "is principal principles can be users or",
    "start": "470819",
    "end": "474259"
  },
  {
    "text": "services that are authenticated then we",
    "start": "474259",
    "end": "479009"
  },
  {
    "text": "gather principals to roles every domain",
    "start": "479009",
    "end": "482370"
  },
  {
    "text": "has admin role inside by default and",
    "start": "482370",
    "end": "485370"
  },
  {
    "text": "only the members of the admin role can",
    "start": "485370",
    "end": "488279"
  },
  {
    "text": "modify the domains entity lastly we can",
    "start": "488279",
    "end": "493259"
  },
  {
    "text": "create policies policy is a set of",
    "start": "493259",
    "end": "496650"
  },
  {
    "text": "assertions that can be defined to grant",
    "start": "496650",
    "end": "499860"
  },
  {
    "text": "or deny any particular action to a",
    "start": "499860",
    "end": "502770"
  },
  {
    "text": "certain role on a specific resource by",
    "start": "502770",
    "end": "507300"
  },
  {
    "text": "defining these entities on Athens we can",
    "start": "507300",
    "end": "510779"
  },
  {
    "text": "have a role based access control on any",
    "start": "510779",
    "end": "513870"
  },
  {
    "text": "modern cloud environments with single",
    "start": "513870",
    "end": "516659"
  },
  {
    "text": "source of truth most infrastructures in",
    "start": "516659",
    "end": "520469"
  },
  {
    "text": "cloud computing environments like",
    "start": "520469",
    "end": "522390"
  },
  {
    "text": "kubernetes OpenStack a bit AWS or other",
    "start": "522390",
    "end": "526579"
  },
  {
    "text": "have their own system of access control",
    "start": "526579",
    "end": "529709"
  },
  {
    "text": "but Athens",
    "start": "529709",
    "end": "531390"
  },
  {
    "text": "provides interface to integrate with",
    "start": "531390",
    "end": "533970"
  },
  {
    "text": "each infrastructure to run multi",
    "start": "533970",
    "end": "536850"
  },
  {
    "text": "environments with a single access",
    "start": "536850",
    "end": "538680"
  },
  {
    "text": "control model this is an example how we",
    "start": "538680",
    "end": "545130"
  },
  {
    "text": "can register those on Athens Athens has",
    "start": "545130",
    "end": "548940"
  },
  {
    "text": "a web UI REST API and CLI to configure",
    "start": "548940",
    "end": "553920"
  },
  {
    "text": "any entities under the domains in this",
    "start": "553920",
    "end": "557700"
  },
  {
    "text": "example domain Athens first we have the",
    "start": "557700",
    "end": "562800"
  },
  {
    "text": "admin role by default and front-end",
    "start": "562800",
    "end": "566190"
  },
  {
    "text": "role that the service Athens of instance",
    "start": "566190",
    "end": "569580"
  },
  {
    "text": "is a member of then we have policies the",
    "start": "569580",
    "end": "574440"
  },
  {
    "text": "admin policy is created by default",
    "start": "574440",
    "end": "576890"
  },
  {
    "text": "corresponding with the admin role also",
    "start": "576890",
    "end": "580380"
  },
  {
    "text": "in this particular domain I created",
    "start": "580380",
    "end": "582540"
  },
  {
    "text": "policies called blacklist and white",
    "start": "582540",
    "end": "584820"
  },
  {
    "text": "lists blacklist is denying post to admin",
    "start": "584820",
    "end": "589590"
  },
  {
    "text": "on Web API slash secret and whitelist is",
    "start": "589590",
    "end": "593720"
  },
  {
    "text": "granting get and post to action to",
    "start": "593720",
    "end": "597440"
  },
  {
    "text": "front-end role on way via Web API slash",
    "start": "597440",
    "end": "600960"
  },
  {
    "text": "back-end resource by writing assertions",
    "start": "600960",
    "end": "605700"
  },
  {
    "text": "with certain syntax we can configure",
    "start": "605700",
    "end": "608610"
  },
  {
    "text": "fine-grained authorization",
    "start": "608610",
    "end": "612350"
  },
  {
    "text": "by registering these entities we can do",
    "start": "613649",
    "end": "617649"
  },
  {
    "text": "an authorization in two different flows",
    "start": "617649",
    "end": "620370"
  },
  {
    "text": "the first way to do this is centralized",
    "start": "620370",
    "end": "625000"
  },
  {
    "text": "access control first the administrator",
    "start": "625000",
    "end": "629920"
  },
  {
    "text": "of the domain will register a policy",
    "start": "629920",
    "end": "632740"
  },
  {
    "text": "granting sports.com fig manager's access",
    "start": "632740",
    "end": "635560"
  },
  {
    "text": "to set max seat memory settings then the",
    "start": "635560",
    "end": "639399"
  },
  {
    "text": "service that was bootstrap with its",
    "start": "639399",
    "end": "641980"
  },
  {
    "text": "Athens certificate will make a request",
    "start": "641980",
    "end": "644140"
  },
  {
    "text": "to configuration service manager by",
    "start": "644140",
    "end": "646600"
  },
  {
    "text": "asking to set maximum error setting to 8",
    "start": "646600",
    "end": "649420"
  },
  {
    "text": "gigabytes when the other service in this",
    "start": "649420",
    "end": "652870"
  },
  {
    "text": "example configuration service manager",
    "start": "652870",
    "end": "654970"
  },
  {
    "text": "receives the request from the client",
    "start": "654970",
    "end": "656770"
  },
  {
    "text": "first it will verify their client",
    "start": "656770",
    "end": "659950"
  },
  {
    "text": "subscribe with its pre installed Athens",
    "start": "659950",
    "end": "662200"
  },
  {
    "text": "GA circuit after the verification it",
    "start": "662200",
    "end": "667360"
  },
  {
    "text": "will extract the service name from the",
    "start": "667360",
    "end": "669339"
  },
  {
    "text": "surf kit and make a request against",
    "start": "669339",
    "end": "671500"
  },
  {
    "text": "Athens to ask if the sports off config",
    "start": "671500",
    "end": "674560"
  },
  {
    "text": "managers does have access to set max",
    "start": "674560",
    "end": "677200"
  },
  {
    "text": "heap memory setting value and decides",
    "start": "677200",
    "end": "679630"
  },
  {
    "text": "from the response so this is the",
    "start": "679630",
    "end": "683380"
  },
  {
    "text": "centralized access control model another",
    "start": "683380",
    "end": "687279"
  },
  {
    "text": "way to do otter ization is to use this",
    "start": "687279",
    "end": "690040"
  },
  {
    "text": "centralized model in this model first",
    "start": "690040",
    "end": "693820"
  },
  {
    "text": "the administrator of the domain will",
    "start": "693820",
    "end": "696130"
  },
  {
    "text": "register a policy granting sports.com",
    "start": "696130",
    "end": "698470"
  },
  {
    "text": "pick managers access to projects at",
    "start": "698470",
    "end": "700900"
  },
  {
    "text": "secret it's exactly the same flow as we",
    "start": "700900",
    "end": "704740"
  },
  {
    "text": "used in centralized model in this model",
    "start": "704740",
    "end": "708150"
  },
  {
    "text": "before the service making a request to",
    "start": "708150",
    "end": "710980"
  },
  {
    "text": "the secret management system it talks to",
    "start": "710980",
    "end": "713740"
  },
  {
    "text": "Athens server to get authorization role",
    "start": "713740",
    "end": "716020"
  },
  {
    "text": "token or role certificate which attests",
    "start": "716020",
    "end": "718779"
  },
  {
    "text": "that the service is in the particular",
    "start": "718779",
    "end": "721750"
  },
  {
    "text": "role I think after getting a row token",
    "start": "721750",
    "end": "727029"
  },
  {
    "text": "or role circuit the service will make a",
    "start": "727029",
    "end": "730510"
  },
  {
    "text": "request to the assistant to receive a",
    "start": "730510",
    "end": "733300"
  },
  {
    "text": "retrieve a project act secret by",
    "start": "733300",
    "end": "735820"
  },
  {
    "text": "submitting the credential which go from",
    "start": "735820",
    "end": "738250"
  },
  {
    "text": "Athens server before the secret",
    "start": "738250",
    "end": "742029"
  },
  {
    "text": "management system receives the request",
    "start": "742029",
    "end": "744370"
  },
  {
    "text": "from the client",
    "start": "744370",
    "end": "745910"
  },
  {
    "text": "of synchronously and periodically",
    "start": "745910",
    "end": "747740"
  },
  {
    "text": "receives policy data from Athens server",
    "start": "747740",
    "end": "751810"
  },
  {
    "text": "when it receives the request it will",
    "start": "751810",
    "end": "754850"
  },
  {
    "text": "first verify the Prudential if the",
    "start": "754850",
    "end": "758060"
  },
  {
    "text": "Prudential is role circuit it will",
    "start": "758060",
    "end": "760670"
  },
  {
    "text": "verify with its pre-installed Athens CA",
    "start": "760670",
    "end": "763130"
  },
  {
    "text": "circuit after verifying the Prudential",
    "start": "763130",
    "end": "767540"
  },
  {
    "text": "the system will extract the role for an",
    "start": "767540",
    "end": "772040"
  },
  {
    "text": "role name from the credential and",
    "start": "772040",
    "end": "774050"
  },
  {
    "text": "compare with the roles that were written",
    "start": "774050",
    "end": "776780"
  },
  {
    "text": "in the policy if the role name matches",
    "start": "776780",
    "end": "781550"
  },
  {
    "text": "and the policy is explicitly granting",
    "start": "781550",
    "end": "785660"
  },
  {
    "text": "their action on the particular resource",
    "start": "785660",
    "end": "788090"
  },
  {
    "text": "then it will be it will grant access",
    "start": "788090",
    "end": "790640"
  },
  {
    "text": "itself by using this flow all",
    "start": "790640",
    "end": "795020"
  },
  {
    "text": "information will be on the host so the",
    "start": "795020",
    "end": "798680"
  },
  {
    "text": "system doesn't have to contact and",
    "start": "798680",
    "end": "800630"
  },
  {
    "text": "outgoing service and can make the",
    "start": "800630",
    "end": "802940"
  },
  {
    "text": "decision then and there in conclusion",
    "start": "802940",
    "end": "808240"
  },
  {
    "text": "the two major features of Athens our",
    "start": "808240",
    "end": "811430"
  },
  {
    "text": "service authentication authorization for",
    "start": "811430",
    "end": "814160"
  },
  {
    "text": "a service authentication Athens provides",
    "start": "814160",
    "end": "816440"
  },
  {
    "text": "identity x.509 search gets to each",
    "start": "816440",
    "end": "819140"
  },
  {
    "text": "instance on your cloud without human",
    "start": "819140",
    "end": "822200"
  },
  {
    "text": "intervention for authorization Athens",
    "start": "822200",
    "end": "826400"
  },
  {
    "text": "can provide precise and frequently",
    "start": "826400",
    "end": "828440"
  },
  {
    "text": "configurable access control with single",
    "start": "828440",
    "end": "831020"
  },
  {
    "text": "source of truth today we use Athens in",
    "start": "831020",
    "end": "837200"
  },
  {
    "text": "Yahoo Japan to authenticate and",
    "start": "837200",
    "end": "838970"
  },
  {
    "text": "authorize each services access on our",
    "start": "838970",
    "end": "841700"
  },
  {
    "text": "multi cloud environments we've been",
    "start": "841700",
    "end": "845360"
  },
  {
    "text": "using OpenStack now using pivotal",
    "start": "845360",
    "end": "847760"
  },
  {
    "text": "application service and starting to use",
    "start": "847760",
    "end": "850490"
  },
  {
    "text": "kubernetes we being able to frequently",
    "start": "850490",
    "end": "854420"
  },
  {
    "text": "and precisely configure our",
    "start": "854420",
    "end": "856790"
  },
  {
    "text": "authorization policy in our standardized",
    "start": "856790",
    "end": "859340"
  },
  {
    "text": "access control model by using Athens if",
    "start": "859340",
    "end": "862760"
  },
  {
    "text": "we look at each cloud environment there",
    "start": "862760",
    "end": "866510"
  },
  {
    "text": "are also many other ways to do this for",
    "start": "866510",
    "end": "869150"
  },
  {
    "text": "example in kubernetes we can use East EO",
    "start": "869150",
    "end": "871580"
  },
  {
    "text": "to authenticate or authorize each",
    "start": "871580",
    "end": "873800"
  },
  {
    "text": "service",
    "start": "873800",
    "end": "875670"
  },
  {
    "text": "so we also considered integrating Athens",
    "start": "875670",
    "end": "880389"
  },
  {
    "text": "with a steel when you hear this for the",
    "start": "880389",
    "end": "885850"
  },
  {
    "text": "first time the question can be why is",
    "start": "885850",
    "end": "888249"
  },
  {
    "text": "deal or what is a steel some of you may",
    "start": "888249",
    "end": "892269"
  },
  {
    "text": "not be too familiar with steel steel is",
    "start": "892269",
    "end": "895569"
  },
  {
    "text": "an open-source product that connects",
    "start": "895569",
    "end": "897490"
  },
  {
    "text": "secures controls and observed services",
    "start": "897490",
    "end": "900870"
  },
  {
    "text": "it does automatic load balancing and",
    "start": "900870",
    "end": "904089"
  },
  {
    "text": "fine grained control of traffic behavior",
    "start": "904089",
    "end": "907050"
  },
  {
    "text": "provides pluggable policy layer and",
    "start": "907050",
    "end": "909879"
  },
  {
    "text": "configurable a API enables automatic",
    "start": "909879",
    "end": "914019"
  },
  {
    "text": "metrics logs and chases for all traffic",
    "start": "914019",
    "end": "916930"
  },
  {
    "text": "and provides secure with service to",
    "start": "916930",
    "end": "920769"
  },
  {
    "text": "service communication this teo has many",
    "start": "920769",
    "end": "926230"
  },
  {
    "text": "attractive features it has now surpassed",
    "start": "926230",
    "end": "928930"
  },
  {
    "text": "version 1.0 and its production ready and",
    "start": "928930",
    "end": "932620"
  },
  {
    "text": "already in CNCs landscape and the",
    "start": "932620",
    "end": "937870"
  },
  {
    "text": "philosophy of service matched strongly",
    "start": "937870",
    "end": "940029"
  },
  {
    "text": "supports serve microservices",
    "start": "940029",
    "end": "941860"
  },
  {
    "text": "architecture since Athens strongly",
    "start": "941860",
    "end": "946209"
  },
  {
    "text": "supports fine-grained access control in",
    "start": "946209",
    "end": "948759"
  },
  {
    "text": "multi cloud by integrating these two",
    "start": "948759",
    "end": "951519"
  },
  {
    "text": "products we can get the best of both",
    "start": "951519",
    "end": "954129"
  },
  {
    "text": "worlds before talking about integration",
    "start": "954129",
    "end": "958779"
  },
  {
    "text": "I'd like to review some basics of sto",
    "start": "958779",
    "end": "961839"
  },
  {
    "text": "mixer in sto service mash when an app in",
    "start": "961839",
    "end": "967839"
  },
  {
    "text": "a pod tries to access to other service",
    "start": "967839",
    "end": "971110"
  },
  {
    "text": "or pod it will contact through employ",
    "start": "971110",
    "end": "973779"
  },
  {
    "text": "proxy which can be automatically",
    "start": "973779",
    "end": "976300"
  },
  {
    "text": "injected to each pod this employ proxy",
    "start": "976300",
    "end": "980949"
  },
  {
    "text": "will afford the request to other proxy",
    "start": "980949",
    "end": "983350"
  },
  {
    "text": "and receiver side of proxy will get the",
    "start": "983350",
    "end": "987000"
  },
  {
    "text": "configuration of traffic management and",
    "start": "987000",
    "end": "989800"
  },
  {
    "text": "access control from mixer mixer stores",
    "start": "989800",
    "end": "994120"
  },
  {
    "text": "the authorization policies for access",
    "start": "994120",
    "end": "996639"
  },
  {
    "text": "control before talking about integration",
    "start": "996639",
    "end": "1001339"
  },
  {
    "text": "I'd like to review UPS by considering a",
    "start": "1001339",
    "end": "1006149"
  },
  {
    "text": "way to integrate Athens with Sto our",
    "start": "1006149",
    "end": "1009440"
  },
  {
    "text": "prototype design is to use mixer adapter",
    "start": "1009440",
    "end": "1012610"
  },
  {
    "text": "mixture has an interface to add your own",
    "start": "1012610",
    "end": "1016430"
  },
  {
    "text": "adaptor to support customized",
    "start": "1016430",
    "end": "1018470"
  },
  {
    "text": "authorization the adapter can talk to",
    "start": "1018470",
    "end": "1021890"
  },
  {
    "text": "our back-end servers with preferred",
    "start": "1021890",
    "end": "1024230"
  },
  {
    "text": "protocols to achieve attributes for",
    "start": "1024230",
    "end": "1027740"
  },
  {
    "text": "customized authorization by using this",
    "start": "1027740",
    "end": "1031100"
  },
  {
    "text": "interface we've created a prototype",
    "start": "1031100",
    "end": "1033680"
  },
  {
    "text": "design by adding add Athens's mixer",
    "start": "1033680",
    "end": "1036560"
  },
  {
    "text": "adapter this is how the authorization",
    "start": "1036560",
    "end": "1040970"
  },
  {
    "text": "with the adapter works in this prototype",
    "start": "1040970",
    "end": "1046938"
  },
  {
    "text": "we use row token as credentials an app",
    "start": "1046939",
    "end": "1050780"
  },
  {
    "text": "makes a request to will first get a roll",
    "start": "1050780",
    "end": "1055220"
  },
  {
    "text": "token from Athens with its bootstrap",
    "start": "1055220",
    "end": "1058160"
  },
  {
    "text": "certificate then submit it with its",
    "start": "1058160",
    "end": "1061010"
  },
  {
    "text": "request the rotor King will be sent",
    "start": "1061010",
    "end": "1064430"
  },
  {
    "text": "through and boy proxy and the proxy on",
    "start": "1064430",
    "end": "1067400"
  },
  {
    "text": "the receiver side receives it it will",
    "start": "1067400",
    "end": "1070460"
  },
  {
    "text": "then pass the row token to mixer to",
    "start": "1070460",
    "end": "1073310"
  },
  {
    "text": "request now an authorization Athens",
    "start": "1073310",
    "end": "1077990"
  },
  {
    "text": "adapter on mixture will fetch policy",
    "start": "1077990",
    "end": "1080360"
  },
  {
    "text": "data from Athens server periodically and",
    "start": "1080360",
    "end": "1082670"
  },
  {
    "text": "stores on memory when mixer receives a",
    "start": "1082670",
    "end": "1086720"
  },
  {
    "text": "request from employed proxy it will",
    "start": "1086720",
    "end": "1089420"
  },
  {
    "text": "verify the wrote him first",
    "start": "1089420",
    "end": "1091160"
  },
  {
    "text": "then extracts the row name and compare",
    "start": "1091160",
    "end": "1094280"
  },
  {
    "text": "the roles that were written in the",
    "start": "1094280",
    "end": "1096980"
  },
  {
    "text": "policy to check if the request is",
    "start": "1096980",
    "end": "1098990"
  },
  {
    "text": "granted or not this is exactly the same",
    "start": "1098990",
    "end": "1102530"
  },
  {
    "text": "flow as the centralized access control",
    "start": "1102530",
    "end": "1104690"
  },
  {
    "text": "model this is just a prototype",
    "start": "1104690",
    "end": "1109970"
  },
  {
    "text": "we have other simpler ways employ",
    "start": "1109970",
    "end": "1113600"
  },
  {
    "text": "application pod gets provisioned with",
    "start": "1113600",
    "end": "1116620"
  },
  {
    "text": "Athens service identity x5 and nine",
    "start": "1116620",
    "end": "1119900"
  },
  {
    "text": "circuits using an Athens identity",
    "start": "1119900",
    "end": "1122330"
  },
  {
    "text": "sidecar these Athens x.509 certificates",
    "start": "1122330",
    "end": "1126620"
  },
  {
    "text": "are then leveraged from mutual TLS",
    "start": "1126620",
    "end": "1129590"
  },
  {
    "text": "authentication by sto employ proxy",
    "start": "1129590",
    "end": "1132650"
  },
  {
    "text": "during service to service calls we still",
    "start": "1132650",
    "end": "1136370"
  },
  {
    "text": "use mutual TLS authentication by default",
    "start": "1136370",
    "end": "1140690"
  },
  {
    "text": "which we also needed a way to define",
    "start": "1140690",
    "end": "1144809"
  },
  {
    "text": "authorization through the Athens data",
    "start": "1144809",
    "end": "1147030"
  },
  {
    "text": "model we created a controller to convert",
    "start": "1147030",
    "end": "1151740"
  },
  {
    "text": "Athens role or policy mappings into",
    "start": "1151740",
    "end": "1156030"
  },
  {
    "text": "service role and service role binding",
    "start": "1156030",
    "end": "1158250"
  },
  {
    "text": "steal customer resources in order to go",
    "start": "1158250",
    "end": "1163260"
  },
  {
    "text": "through this architecture consider an",
    "start": "1163260",
    "end": "1166020"
  },
  {
    "text": "example front-end and back-end service",
    "start": "1166020",
    "end": "1168470"
  },
  {
    "text": "we want a way to authorize only the",
    "start": "1168470",
    "end": "1172049"
  },
  {
    "text": "front-end to be able to talk to the",
    "start": "1172049",
    "end": "1174600"
  },
  {
    "text": "back-end service using the HTTP GET",
    "start": "1174600",
    "end": "1176880"
  },
  {
    "text": "method in Athens the role and policy",
    "start": "1176880",
    "end": "1180750"
  },
  {
    "text": "names will represent the back-end",
    "start": "1180750",
    "end": "1184380"
  },
  {
    "text": "service and the policy will contain the",
    "start": "1184380",
    "end": "1187230"
  },
  {
    "text": "get HTTP method as an action in the",
    "start": "1187230",
    "end": "1190260"
  },
  {
    "text": "assertion any authorized service in this",
    "start": "1190260",
    "end": "1195360"
  },
  {
    "text": "case the front-end will be added as a",
    "start": "1195360",
    "end": "1198809"
  },
  {
    "text": "member to the backend role this steel",
    "start": "1198809",
    "end": "1202470"
  },
  {
    "text": "controller will fetch the role and",
    "start": "1202470",
    "end": "1205799"
  },
  {
    "text": "policy information from Athens and",
    "start": "1205799",
    "end": "1208320"
  },
  {
    "text": "convert it to a steel service role and",
    "start": "1208320",
    "end": "1211080"
  },
  {
    "text": "service or binding or customer resources",
    "start": "1211080",
    "end": "1213150"
  },
  {
    "text": "object once these customer resources are",
    "start": "1213150",
    "end": "1217799"
  },
  {
    "text": "created a steel pilot will pick them up",
    "start": "1217799",
    "end": "1221700"
  },
  {
    "text": "and convert them into an invoice",
    "start": "1221700",
    "end": "1224490"
  },
  {
    "text": "auerbach configuration once the",
    "start": "1224490",
    "end": "1227809"
  },
  {
    "text": "front-end service calls the backend and",
    "start": "1227809",
    "end": "1231000"
  },
  {
    "text": "boy will check the spiffy URI of the",
    "start": "1231000",
    "end": "1234600"
  },
  {
    "text": "incoming certificates request and will",
    "start": "1234600",
    "end": "1237450"
  },
  {
    "text": "check if the principal it has defined in",
    "start": "1237450",
    "end": "1240929"
  },
  {
    "text": "memory is authorized to access that",
    "start": "1240929",
    "end": "1242940"
  },
  {
    "text": "action now I'd like to show a demo for",
    "start": "1242940",
    "end": "1249419"
  },
  {
    "text": "the first prototype I showed",
    "start": "1249419",
    "end": "1253100"
  },
  {
    "text": "so I configured domain on my Athens Oh",
    "start": "1259700",
    "end": "1268299"
  },
  {
    "text": "it's not showing",
    "start": "1272120",
    "end": "1274930"
  },
  {
    "text": "sorry too mister",
    "start": "1282090",
    "end": "1285350"
  },
  {
    "text": "yes showing",
    "start": "1303070",
    "end": "1306330"
  },
  {
    "text": "so first this is the domain I configured",
    "start": "1312740",
    "end": "1316100"
  },
  {
    "text": "on the domain name is Athens and we have",
    "start": "1316100",
    "end": "1319970"
  },
  {
    "text": "an admin role and front-end role and",
    "start": "1319970",
    "end": "1322990"
  },
  {
    "text": "there's a Athens dot instance service in",
    "start": "1322990",
    "end": "1326630"
  },
  {
    "text": "the member and we have policies admin",
    "start": "1326630",
    "end": "1330620"
  },
  {
    "text": "policy by default and I added blacklist",
    "start": "1330620",
    "end": "1333830"
  },
  {
    "text": "policy and white lace policy and there's",
    "start": "1333830",
    "end": "1337940"
  },
  {
    "text": "a service called Athens instance this",
    "start": "1337940",
    "end": "1340549"
  },
  {
    "text": "service is bootstrap the idea with the",
    "start": "1340549",
    "end": "1344659"
  },
  {
    "text": "search gets by a hello Athens so I'm",
    "start": "1344659",
    "end": "1351500"
  },
  {
    "text": "going to use these client search kids",
    "start": "1351500",
    "end": "1354230"
  },
  {
    "text": "that was bootstrap by Athens and",
    "start": "1354230",
    "end": "1356950"
  },
  {
    "text": "corresponding private key to make a",
    "start": "1356950",
    "end": "1359750"
  },
  {
    "text": "request to Athens server and also using",
    "start": "1359750",
    "end": "1363429"
  },
  {
    "text": "see a search get Athens is see a",
    "start": "1363429",
    "end": "1366500"
  },
  {
    "text": "certificate and getting a row token and",
    "start": "1366500",
    "end": "1369940"
  },
  {
    "text": "I'll convert the row token - I'll encode",
    "start": "1369940",
    "end": "1374419"
  },
  {
    "text": "a token to big 64 and pass it to the",
    "start": "1374419",
    "end": "1379340"
  },
  {
    "text": "script I created to generate a command",
    "start": "1379340",
    "end": "1381590"
  },
  {
    "text": "to run a mixer client command so in this",
    "start": "1381590",
    "end": "1388429"
  },
  {
    "text": "command I've configured typing in a",
    "start": "1388429",
    "end": "1393350"
  },
  {
    "text": "mixie check command by targeting mixer",
    "start": "1393350",
    "end": "1397070"
  },
  {
    "text": "host as sto telemetry service and",
    "start": "1397070",
    "end": "1400659"
  },
  {
    "text": "destination services NGH service and",
    "start": "1400659",
    "end": "1404500"
  },
  {
    "text": "service is making a post request against",
    "start": "1404500",
    "end": "1407870"
  },
  {
    "text": "two resources for example and one",
    "start": "1407870",
    "end": "1411260"
  },
  {
    "text": "example to web EIP is slash back end and",
    "start": "1411260",
    "end": "1414860"
  },
  {
    "text": "the another example to the web api is",
    "start": "1414860",
    "end": "1418909"
  },
  {
    "text": "last secret and I think I only added the",
    "start": "1418909",
    "end": "1423230"
  },
  {
    "text": "policy to allow the access to back-end",
    "start": "1423230",
    "end": "1426380"
  },
  {
    "text": "and I didn't add any policy granting",
    "start": "1426380",
    "end": "1428659"
  },
  {
    "text": "access to secret so this access to the",
    "start": "1428659",
    "end": "1431450"
  },
  {
    "text": "secret should be denied and also I'm not",
    "start": "1431450",
    "end": "1436039"
  },
  {
    "text": "putting the road talking on the header",
    "start": "1436039",
    "end": "1438529"
  },
  {
    "text": "and Athens",
    "start": "1438529",
    "end": "1440840"
  },
  {
    "text": "that's role - oh this is the default",
    "start": "1440840",
    "end": "1444140"
  },
  {
    "text": "header name but it can be configured and",
    "start": "1444140",
    "end": "1446770"
  },
  {
    "text": "the other part is printing the command",
    "start": "1446770",
    "end": "1449450"
  },
  {
    "text": "so I'll just run this by passing the",
    "start": "1449450",
    "end": "1453170"
  },
  {
    "text": "road token here will you get two",
    "start": "1453170",
    "end": "1457270"
  },
  {
    "text": "examples of commands one is to be",
    "start": "1457270",
    "end": "1460520"
  },
  {
    "text": "expected to be allowed and another one",
    "start": "1460520",
    "end": "1463370"
  },
  {
    "text": "expected to be denied so just type this",
    "start": "1463370",
    "end": "1468230"
  },
  {
    "text": "in the one part I already attached in",
    "start": "1468230",
    "end": "1472990"
  },
  {
    "text": "then this one is check the RPC completed",
    "start": "1474880",
    "end": "1480530"
  },
  {
    "text": "successfully and the check status was",
    "start": "1480530",
    "end": "1482780"
  },
  {
    "text": "okay so let's try the another example so",
    "start": "1482780",
    "end": "1492710"
  },
  {
    "text": "the another example is accessing two-way",
    "start": "1492710",
    "end": "1495380"
  },
  {
    "text": "VIP where the API slash secret",
    "start": "1495380",
    "end": "1497900"
  },
  {
    "text": "so our PCH check is completed",
    "start": "1497900",
    "end": "1503120"
  },
  {
    "text": "successfully but the check status was",
    "start": "1503120",
    "end": "1505430"
  },
  {
    "text": "permission denied",
    "start": "1505430",
    "end": "1506570"
  },
  {
    "text": "and the request was rejected so this is",
    "start": "1506570",
    "end": "1511070"
  },
  {
    "text": "pretty much for the demo so let's go",
    "start": "1511070",
    "end": "1514940"
  },
  {
    "text": "back to the presentation",
    "start": "1514940",
    "end": "1518379"
  },
  {
    "text": "okay so um for future plans",
    "start": "1548640",
    "end": "1552930"
  },
  {
    "text": "Athens already support providing at",
    "start": "1552930",
    "end": "1555810"
  },
  {
    "text": "Amazon machine image and to support",
    "start": "1555810",
    "end": "1560340"
  },
  {
    "text": "Athens on kubernetes more easily we're",
    "start": "1560340",
    "end": "1563190"
  },
  {
    "text": "working on docker images first servers",
    "start": "1563190",
    "end": "1566130"
  },
  {
    "text": "and also help charts we're also working",
    "start": "1566130",
    "end": "1569730"
  },
  {
    "text": "on production izing components to",
    "start": "1569730",
    "end": "1572160"
  },
  {
    "text": "support stills original mutual TLS",
    "start": "1572160",
    "end": "1574800"
  },
  {
    "text": "authentication these features will",
    "start": "1574800",
    "end": "1578220"
  },
  {
    "text": "productionize Athens x.509 circuit",
    "start": "1578220",
    "end": "1580800"
  },
  {
    "text": "project provisioning and authorization",
    "start": "1580800",
    "end": "1584220"
  },
  {
    "text": "flow using a steal and boy I'd like to",
    "start": "1584220",
    "end": "1589020"
  },
  {
    "text": "share some of the resources for Athens",
    "start": "1589020",
    "end": "1591690"
  },
  {
    "text": "as well we have a website github repo",
    "start": "1591690",
    "end": "1595380"
  },
  {
    "text": "slack channel and google group and if",
    "start": "1595380",
    "end": "1598440"
  },
  {
    "text": "you have any further questions after",
    "start": "1598440",
    "end": "1600540"
  },
  {
    "text": "this session please contact me via this",
    "start": "1600540",
    "end": "1602730"
  },
  {
    "text": "email address please join us thank you",
    "start": "1602730",
    "end": "1608040"
  },
  {
    "text": "and I'd like to thank Alan steam and for",
    "start": "1608040",
    "end": "1613230"
  },
  {
    "text": "infra team at oath from here I'd like to",
    "start": "1613230",
    "end": "1624750"
  },
  {
    "text": "open the floor for some questions I'd",
    "start": "1624750",
    "end": "1627330"
  },
  {
    "text": "like to ask our evolution from oath to",
    "start": "1627330",
    "end": "1629700"
  },
  {
    "text": "join me to answer questions Thank You",
    "start": "1629700",
    "end": "1636030"
  },
  {
    "text": "Prabhu",
    "start": "1636030",
    "end": "1638420"
  },
  {
    "text": "we can use this any questions so it ins",
    "start": "1644180",
    "end": "1669530"
  },
  {
    "text": "provides you see and the provider so",
    "start": "1669530",
    "end": "1674930"
  },
  {
    "text": "with a steel you can plug in the our",
    "start": "1674930",
    "end": "1680180"
  },
  {
    "text": "back policy so that with the custom",
    "start": "1680180",
    "end": "1683540"
  },
  {
    "text": "resources with a steel 1.0 custom",
    "start": "1683540",
    "end": "1685820"
  },
  {
    "text": "resources you can plug in this",
    "start": "1685820",
    "end": "1688880"
  },
  {
    "text": "controller which will convert the",
    "start": "1688880",
    "end": "1691220"
  },
  {
    "text": "attends are back policies directly into",
    "start": "1691220",
    "end": "1694190"
  },
  {
    "text": "sto are back to that answer a pressure",
    "start": "1694190",
    "end": "1699940"
  },
  {
    "text": "any other questions",
    "start": "1709910",
    "end": "1713570"
  },
  {
    "text": "yes so if you have any questions after",
    "start": "1720350",
    "end": "1724190"
  },
  {
    "text": "this session please contact me via email",
    "start": "1724190",
    "end": "1726529"
  },
  {
    "text": "address thank you very much",
    "start": "1726529",
    "end": "1730630"
  }
]