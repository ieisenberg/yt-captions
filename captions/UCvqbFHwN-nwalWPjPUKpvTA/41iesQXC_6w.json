[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "hi i'm marcus johansen i'm going to talk to you about using crossplane to provision cloud init resources which",
    "start": "240",
    "end": "7279"
  },
  {
    "text": "is effectively text which we're then going to use to provision bare metal resources or vm",
    "start": "7279",
    "end": "13519"
  },
  {
    "text": "instances that take a user data parameter the user data parameter is a blob of string text",
    "start": "13519",
    "end": "21279"
  },
  {
    "text": "but cloud init is a special format for user data that allows us to get more text in there",
    "start": "21279",
    "end": "27760"
  },
  {
    "text": "by compressing it and mime encoding it let's take a look",
    "start": "27760",
    "end": "32960"
  },
  {
    "text": "what do we know about cloud init well it's a service that runs inside the operating system",
    "start": "32960",
    "end": "38640"
  },
  {
    "start": "33000",
    "end": "33000"
  },
  {
    "text": "that knows how to determine what cloud it's running in if it's running in a cloud or if it's",
    "start": "38640",
    "end": "44719"
  },
  {
    "text": "using some local uh configuration say pulling cloud data from a floppy disk from cd-rom",
    "start": "44719",
    "end": "53600"
  },
  {
    "text": "or from the metadata of your cloud provider what is inside of that cloud init what",
    "start": "53600",
    "end": "59600"
  },
  {
    "text": "is that cloud net service um processing the data that it's fetching from that metadata service the",
    "start": "59600",
    "end": "65119"
  },
  {
    "text": "data that's touching from that floppy or cd-rom drive uh well what it's processing is",
    "start": "65119",
    "end": "72000"
  },
  {
    "text": "a number of different possible formats it could be uh mime encoded multi-part mime encoded",
    "start": "72000",
    "end": "78000"
  },
  {
    "text": "text it could be gzipped multi-part miming coded text it could be a shell script it could be",
    "start": "78000",
    "end": "84400"
  },
  {
    "text": "another specific to cloud net format called the cloud config which is very similar to what you might",
    "start": "84400",
    "end": "90560"
  },
  {
    "text": "expect looking at salt or puppet syntax or chef syntax where you can do things like declare",
    "start": "90560",
    "end": "98000"
  },
  {
    "text": "what packages you want to have installed define what ssh keys and what users",
    "start": "98000",
    "end": "103840"
  },
  {
    "text": "should be pre-configured on the system and enable a host of other features",
    "start": "103840",
    "end": "110079"
  },
  {
    "text": "so what does it look like to use cloud net well it there's not um an api",
    "start": "110079",
    "end": "116320"
  },
  {
    "text": "that is out there called cloudinit.com where you do anything with this is i'm sure that domain exists but that's",
    "start": "116320",
    "end": "122079"
  },
  {
    "text": "not what we're talking about so um the way that you typically interact",
    "start": "122079",
    "end": "127439"
  },
  {
    "text": "with cloud in it is through your cloud provider if you're spinning up a vm instance or a bare",
    "start": "127439",
    "end": "133840"
  },
  {
    "text": "metal instance you need to provide some sort of way to provision that resource",
    "start": "133840",
    "end": "139920"
  },
  {
    "text": "and usually they will provide a field called a user data field in this user data field they will make",
    "start": "139920",
    "end": "145680"
  },
  {
    "text": "available through their metadata service when cloud init starts up one of the first things it does is detects what",
    "start": "145680",
    "end": "151760"
  },
  {
    "text": "cloud it's running in based on that cloud that it's running in it knows exactly where to find that metadata service within that metadata service",
    "start": "151760",
    "end": "159519"
  },
  {
    "text": "it will fetch the user data um some when i say metadata service so like",
    "start": "159519",
    "end": "165200"
  },
  {
    "text": "ec2 instances they have this address uh i think it's once extined at 254.110",
    "start": "165200",
    "end": "171519"
  },
  {
    "text": "uh and then there's a common url path to get to that user data i think it",
    "start": "171519",
    "end": "176560"
  },
  {
    "text": "in this case it's just slash user data or it might be slash metadata user data in any case when system boots",
    "start": "176560",
    "end": "183519"
  },
  {
    "text": "up it is essentially fetching that web address and uh what it finds there is some blob",
    "start": "183519",
    "end": "190560"
  },
  {
    "text": "of text the blobs of text that cloud and it recognizes and knows how to handle",
    "start": "190560",
    "end": "195920"
  },
  {
    "text": "typically start with a shebang and if they don't start with the sherbeting then it also knows how to handle the multi-part mime",
    "start": "195920",
    "end": "202159"
  },
  {
    "text": "format so when you are provisioning the device you have",
    "start": "202159",
    "end": "207760"
  },
  {
    "text": "some field where you're specifying the user data that you want to boot with",
    "start": "207760",
    "end": "213280"
  },
  {
    "text": "and that's it the uh like i said it's the user data becomes available within",
    "start": "213280",
    "end": "218480"
  },
  {
    "text": "the metadata service um the api that you're creating the device through or the instance through",
    "start": "218480",
    "end": "225200"
  },
  {
    "text": "may let you modify that user data later later or look at that user data later",
    "start": "225200",
    "end": "231599"
  },
  {
    "text": "why you might think why would that be a useful thing to do well the user data",
    "start": "231599",
    "end": "238640"
  },
  {
    "text": "is typically used at startup but other formats of user data say the ignition",
    "start": "238640",
    "end": "245120"
  },
  {
    "text": "format or the kickstart format so in some systems this data can be",
    "start": "245120",
    "end": "250720"
  },
  {
    "text": "used on subsequent boots or if the api allows you to always fetch",
    "start": "250720",
    "end": "257280"
  },
  {
    "text": "that user data then you could sort of use it as a way to um to be bad and send messages",
    "start": "257280",
    "end": "263840"
  },
  {
    "text": "from your api from your cloud providers api to your metadata service that your",
    "start": "263840",
    "end": "269040"
  },
  {
    "text": "instance can then pick up usually these metadata services are isolated so that",
    "start": "269040",
    "end": "275120"
  },
  {
    "text": "that instance and only that instance can access that metadata service sometimes without a token which makes it very convenient",
    "start": "275120",
    "end": "281360"
  },
  {
    "text": "way to interact with the machine so this is cross playing community today why am i",
    "start": "281360",
    "end": "286400"
  },
  {
    "text": "sitting here talking about cloud net and provisioning devices well crossplane is known for was known",
    "start": "286400",
    "end": "293840"
  },
  {
    "text": "for managing services on various clouds it's known for managing storage in some cases like through the",
    "start": "293840",
    "end": "300160"
  },
  {
    "text": "rook provider or through block storage services on various clouds",
    "start": "300160",
    "end": "305600"
  },
  {
    "text": "and all kinds of sql databases and kubernetes manage kubernetes services",
    "start": "305600",
    "end": "312240"
  },
  {
    "text": "and any kind of managed service you can think of but wait there's more crossplane also knows how to provision vms and bare",
    "start": "312240",
    "end": "318960"
  },
  {
    "text": "metal instances now i with the providers that are out there today",
    "start": "318960",
    "end": "324160"
  },
  {
    "text": "i don't know how strong that statement is i know that the equinix metal uh provider does allow you to provision",
    "start": "324160",
    "end": "330960"
  },
  {
    "text": "bare metal devices um i think that the digitalocean provider lets you",
    "start": "330960",
    "end": "336720"
  },
  {
    "text": "provision droplets i previously worked on a linux provider that knew how to provision instances",
    "start": "336720",
    "end": "343120"
  },
  {
    "text": "so there are um there are at least a handful half a handful maybe",
    "start": "343120",
    "end": "350400"
  },
  {
    "text": "i think ec2 instances are probably supported in the aws provider since that's generated and there's some like",
    "start": "350400",
    "end": "356639"
  },
  {
    "text": "60 plus resources supported point being that with crossplane there",
    "start": "356639",
    "end": "363680"
  },
  {
    "text": "are a number of ways to a number of providers that allow you to provision resources that would",
    "start": "363680",
    "end": "370479"
  },
  {
    "text": "benefit from user data you might be saying to yourself hold on there i don't need user data i've got a",
    "start": "370479",
    "end": "377199"
  },
  {
    "start": "373000",
    "end": "373000"
  },
  {
    "text": "host of other ways of provisioning my instance i can write custom images",
    "start": "377199",
    "end": "382400"
  },
  {
    "text": "i can use cloud formation or whatever my cloud's version of that is i",
    "start": "382400",
    "end": "388960"
  },
  {
    "text": "can use ssh to just hop into the box and configure whatever i want",
    "start": "388960",
    "end": "394000"
  },
  {
    "text": "okay yeah i can use user data maybe i can use cloud init with it",
    "start": "394000",
    "end": "399759"
  },
  {
    "text": "there's also ipixi some some systems allow you to skip the raw images and just provide an",
    "start": "399759",
    "end": "406080"
  },
  {
    "text": "ipixi configuration and and then you you take the wheel from there so why user data",
    "start": "406080",
    "end": "414479"
  },
  {
    "text": "and uh why do we need more than just a text field to deal with user data",
    "start": "414479",
    "end": "420840"
  },
  {
    "text": "well one of the things about user data endpoints fields in the various cloud",
    "start": "420840",
    "end": "427199"
  },
  {
    "text": "provider endpoints is that there are limitations on it so you might have a 65 character",
    "start": "427199",
    "end": "433680"
  },
  {
    "text": "limit on your user data or whatever the size is there's still some size restriction out",
    "start": "433680",
    "end": "439680"
  },
  {
    "text": "there or you might want to specify multiple files and",
    "start": "439680",
    "end": "445039"
  },
  {
    "text": "if you were to supply this in your cross plane provisioned ec2 instance or",
    "start": "445039",
    "end": "452080"
  },
  {
    "text": "equinix metal device instance you're going to have this user data field with this long blob of",
    "start": "452080",
    "end": "457360"
  },
  {
    "text": "text that you're going to handcraft because you can because it's yaml because it's easy to get to",
    "start": "457360",
    "end": "464560"
  },
  {
    "text": "and then maybe you're going to mime encode it by hand to add multiple",
    "start": "464560",
    "end": "470319"
  },
  {
    "text": "files and maybe it got too long so you're going to gzip it by hand and then base64 encode that no right",
    "start": "470319",
    "end": "478160"
  },
  {
    "text": "we're going to stop somewhere between here and there and we're going to benefit",
    "start": "478160",
    "end": "483759"
  },
  {
    "text": "from there being a cross plane provider to do this work for us wait a second",
    "start": "483759",
    "end": "490160"
  },
  {
    "text": "crossplane provider there's no provider here who there's you said there's no cloudynet.com i heard you",
    "start": "490160",
    "end": "497520"
  },
  {
    "text": "and uh there's no remote api right so crossplane has crosstalk providers",
    "start": "497520",
    "end": "503680"
  },
  {
    "text": "have this concept of credentials and and provider configuration and",
    "start": "503680",
    "end": "510160"
  },
  {
    "text": "usually there's some sort of status when the resource is done you don't have any of those things with",
    "start": "510160",
    "end": "516560"
  },
  {
    "text": "cloud in it right so why why are we going to make a provider at all",
    "start": "516560",
    "end": "522479"
  },
  {
    "start": "522000",
    "end": "522000"
  },
  {
    "text": "why not this doesn't have to be a cross-plane provider though i hear you saying this",
    "start": "522479",
    "end": "528080"
  },
  {
    "text": "and uh you're right you know there you could just make a custom controller that save rights to the um",
    "start": "528080",
    "end": "535600"
  },
  {
    "text": "to the cross plain resource writes the user data that you want or um maybe it will do something similar",
    "start": "535600",
    "end": "542240"
  },
  {
    "text": "to what we're going to do with this provider maybe it'll write out a config map then we can read in that config map",
    "start": "542240",
    "end": "547920"
  },
  {
    "text": "so why bother using crossplane to create this custom controller and my answers are that",
    "start": "547920",
    "end": "554959"
  },
  {
    "text": "crossplane has the an installer for installing various packages and when it installs those packages it",
    "start": "554959",
    "end": "561279"
  },
  {
    "text": "takes care of their dependencies we could go in reverse here and say that if you're going to install the",
    "start": "561279",
    "end": "567360"
  },
  {
    "text": "equinix metal provider then i expect you to have the cloud init provider installed too",
    "start": "567360",
    "end": "573279"
  },
  {
    "text": "maybe because it's useful for compositions or my examples or just like a recommended package",
    "start": "573279",
    "end": "580800"
  },
  {
    "text": "and one of the other things that that installer does is it sets up some roles that you can reuse and you can assign to give your",
    "start": "581600",
    "end": "590000"
  },
  {
    "text": "application deployment teams and operations teams the correct roles that they will need to",
    "start": "590000",
    "end": "596800"
  },
  {
    "text": "interact with your services so if you're interacting with their metal devices you're probably",
    "start": "596800",
    "end": "602079"
  },
  {
    "text": "going to need access to these configmap resources or maybe some select ones maybe we're",
    "start": "602079",
    "end": "608160"
  },
  {
    "text": "going to take these cross-plain resources and tie",
    "start": "608160",
    "end": "613839"
  },
  {
    "text": "opa policy policy checks against the fields and make sure that you're only",
    "start": "614000",
    "end": "619519"
  },
  {
    "text": "writing to config maps that you're allowed to write to and so there's a nice story there with cross playing and policy",
    "start": "619519",
    "end": "626640"
  },
  {
    "text": "uh also why use a cross plane provider because the cross plane runtime just makes it convenient",
    "start": "626640",
    "end": "632560"
  },
  {
    "text": "to do so we're already managing a or we're already authoring a provider",
    "start": "632560",
    "end": "639760"
  },
  {
    "text": "for equinix metal so a provider using the provider syntax the provider",
    "start": "639760",
    "end": "645920"
  },
  {
    "text": "at sdk the crosstalk cross plane runtime makes it a convenient way to write this",
    "start": "645920",
    "end": "653680"
  },
  {
    "text": "cloud in it provider another reason is that crossplane providers give you",
    "start": "653680",
    "end": "659360"
  },
  {
    "text": "composability now you could say well anything's composable but",
    "start": "659360",
    "end": "664800"
  },
  {
    "text": "at least in the past i think it's still the case today there are limitations on what you can use in a composition and",
    "start": "664800",
    "end": "670160"
  },
  {
    "text": "those things that you use in a composition have to be cross plane package managed",
    "start": "670160",
    "end": "675920"
  },
  {
    "text": "resources so if we want to compose a combination of a device",
    "start": "675920",
    "end": "682800"
  },
  {
    "text": "with a cloud in it resource they're going to have to both be um",
    "start": "682800",
    "end": "688880"
  },
  {
    "text": "cross-plane managed resources and uh you know the the future is so far",
    "start": "688880",
    "end": "694399"
  },
  {
    "text": "away that that may not be the case anymore i'll take the comments um so in the",
    "start": "694399",
    "end": "699760"
  },
  {
    "text": "future uh we might also want to make these different providers uh more tied",
    "start": "699760",
    "end": "707040"
  },
  {
    "text": "together and crossplane has a thing called referencers which allows you to grab one",
    "start": "707040",
    "end": "712320"
  },
  {
    "text": "field from one resource and bring it into another resource so perhaps in the future we might be",
    "start": "712320",
    "end": "717839"
  },
  {
    "text": "able to do that as a form of templating why do we need a crossplan provider we",
    "start": "717839",
    "end": "723680"
  },
  {
    "text": "have xrd's which allow you to make these compositions that uh make it so that you don't need to make a",
    "start": "723680",
    "end": "730240"
  },
  {
    "text": "controller you don't need to make a cross plane provider for every possible thing you could imagine just",
    "start": "730240",
    "end": "736560"
  },
  {
    "text": "create a composition for it um well i would really like to see that be the",
    "start": "736560",
    "end": "743279"
  },
  {
    "text": "option here and the way out i couldn't figure out how to make that work today i did find",
    "start": "743279",
    "end": "749360"
  },
  {
    "text": "a i was referred to an open issue that deals with making",
    "start": "749360",
    "end": "755360"
  },
  {
    "text": "available more functions that x that compositions could take advantage of",
    "start": "755360",
    "end": "760720"
  },
  {
    "text": "the kind of functions that we would need to handle cloud in it would be first off reading",
    "start": "760720",
    "end": "767279"
  },
  {
    "text": "config maps multiple config maps or secrets and then concatenating them all and then",
    "start": "767279",
    "end": "773440"
  },
  {
    "text": "base64 encoding that data and gzip uh compressing it and then base64",
    "start": "773440",
    "end": "779440"
  },
  {
    "text": "encoding that as part of a multi-part mime document",
    "start": "779440",
    "end": "784480"
  },
  {
    "text": "so it's not a lot of complexity there these aren't complex functions um but we don't have a way to run these",
    "start": "784480",
    "end": "792399"
  },
  {
    "text": "functions right now so we can't do it so what does the syntax for this look",
    "start": "792399",
    "end": "797440"
  },
  {
    "start": "796000",
    "end": "796000"
  },
  {
    "text": "like well we've got our typical preamble of api version in kind we've got our metadata that i've omitted",
    "start": "797440",
    "end": "803360"
  },
  {
    "text": "here with a name no namespace because this is a cluster scope resource as all providers are um",
    "start": "803360",
    "end": "811440"
  },
  {
    "text": "so that means that when we're writing our spec here we're going to have to give we're gonna have to name a",
    "start": "811440",
    "end": "816560"
  },
  {
    "text": "namespace uh for both the cloud init config map that",
    "start": "816560",
    "end": "822320"
  },
  {
    "text": "we're writing out and any config maps that we're going to read in as the source values for our multi-part config map",
    "start": "822320",
    "end": "830560"
  },
  {
    "text": "in here i only show the example of a plain text content but there's also a",
    "start": "830560",
    "end": "837199"
  },
  {
    "text": "there's also a field to specify config maps and secrets uh baked into this provider",
    "start": "837199",
    "end": "843040"
  },
  {
    "text": "and we'll take a look at that in a moment the moment has come",
    "start": "843040",
    "end": "848160"
  },
  {
    "text": "this is uh my demo and we'll be running a kind cluster with cross crossplane",
    "start": "848160",
    "end": "855600"
  },
  {
    "text": "already pre-installed we'll install the provider um i'm going to cheat a little bit i'm",
    "start": "855600",
    "end": "862800"
  },
  {
    "text": "going to use make run which is available from the upbound build",
    "start": "862800",
    "end": "868720"
  },
  {
    "text": "git sub module and that's just going to allow uh for a more rapid development cycle",
    "start": "868720",
    "end": "876800"
  },
  {
    "text": "uh and in the case of this demo it's going to allow me to take a much rougher version of this code",
    "start": "876800",
    "end": "882880"
  },
  {
    "text": "than i would like to deploy on the world and demonstrate with that",
    "start": "882880",
    "end": "888800"
  },
  {
    "text": "all right so let's take a look this is the project and in here we see",
    "start": "890399",
    "end": "897839"
  },
  {
    "text": "an examples directory and here i have some yamo representing the resources",
    "start": "897839",
    "end": "903120"
  },
  {
    "text": "that we'll need to test this out including a",
    "start": "903120",
    "end": "909600"
  },
  {
    "text": "simple config map that will be pulled into the cloudinet resource cloud knit resource",
    "start": "910079",
    "end": "917839"
  },
  {
    "text": "has a few more lines that we can cat so there is the definition",
    "start": "917839",
    "end": "924240"
  },
  {
    "text": "of what config map we will write out to and uh can i just call that cloudnet we",
    "start": "924240",
    "end": "930399"
  },
  {
    "text": "have to give it a namespace again because this is not a namespace resource being a provider resource a managed",
    "start": "930399",
    "end": "936800"
  },
  {
    "text": "provider resource they are cluster scope today",
    "start": "936800",
    "end": "941839"
  },
  {
    "text": "so our four provider field again this is a field that doesn't really make sense in this provider so maybe this",
    "start": "942000",
    "end": "948000"
  },
  {
    "text": "level will go away in the future but the arguments that are available",
    "start": "948000",
    "end": "954639"
  },
  {
    "text": "here are a boundary we're just going to go with the default of mind boundary um and the only reason you would change",
    "start": "954639",
    "end": "962079"
  },
  {
    "text": "that is if your text contained the word mind boundary in it somewhere then you would have to set a",
    "start": "962079",
    "end": "967360"
  },
  {
    "text": "unique boundary part so there's multiple parts this is actually out of date this should be",
    "start": "967360",
    "end": "973279"
  },
  {
    "text": "parts there's a config map key ref this is the",
    "start": "973279",
    "end": "979279"
  },
  {
    "text": "foo that we're going to be reading in from the default name space there's a a key in there called foo and it's",
    "start": "979279",
    "end": "986320"
  },
  {
    "text": "optional meaning that if that config map does not exist that's not going to stop",
    "start": "986320",
    "end": "992800"
  },
  {
    "text": "this resource from syncing and we're also going to put in a simple",
    "start": "992800",
    "end": "1000639"
  },
  {
    "text": "hello world script and then we're also going to put in a cloud config configuration",
    "start": "1000639",
    "end": "1006399"
  },
  {
    "text": "that says that the users on the provisioned machine should be me and i should bring all of my ssh keys",
    "start": "1006399",
    "end": "1013839"
  },
  {
    "text": "that are public on github with me",
    "start": "1013839",
    "end": "1018480"
  },
  {
    "text": "okay and then the other file that's in here is a provider config interesting thing about",
    "start": "1019759",
    "end": "1026880"
  },
  {
    "text": "the provider config is that it won't actually load right now there's no spec because there's no spec",
    "start": "1026880",
    "end": "1031918"
  },
  {
    "text": "to provide and we don't actually need the provider config because this config this cloud init config",
    "start": "1031919",
    "end": "1039438"
  },
  {
    "text": "resource just doesn't load a provider config it doesn't have a provider reference",
    "start": "1039439",
    "end": "1044480"
  },
  {
    "text": "it doesn't need one okay on a previous view i showed",
    "start": "1044480",
    "end": "1052720"
  },
  {
    "text": "this config map incorrectly there's supposed to be some spaces here i've added those spaces and now i can",
    "start": "1052720",
    "end": "1060160"
  },
  {
    "text": "show that i do not have a config or config map resource again config is the cloud init",
    "start": "1060160",
    "end": "1066640"
  },
  {
    "text": "config resource or custom resource that we're provisioning so now we're going to make run",
    "start": "1066640",
    "end": "1073360"
  },
  {
    "text": "and in this examples directory we are going to first insert this foo resource",
    "start": "1073360",
    "end": "1079679"
  },
  {
    "text": "which is just the one line shell script",
    "start": "1079679",
    "end": "1083679"
  },
  {
    "text": "and then we are going to apply the cloudinet resource which combines the",
    "start": "1084720",
    "end": "1090160"
  },
  {
    "text": "food resource with two other string",
    "start": "1090160",
    "end": "1095200"
  },
  {
    "text": "cloud config parts cloud init parts and now that's",
    "start": "1095200",
    "end": "1102640"
  },
  {
    "text": "reconciled so let's show what has happened here let's do another get and this time we",
    "start": "1102640",
    "end": "1109679"
  },
  {
    "text": "can see that we have both the uh the cloud",
    "start": "1109679",
    "end": "1114799"
  },
  {
    "text": "resource we've created it created a config map called cloud init we have our foo config map",
    "start": "1114799",
    "end": "1121200"
  },
  {
    "text": "and we have our coordinate config map so let's take a look at that cloud config init",
    "start": "1121200",
    "end": "1128320"
  },
  {
    "text": "map cloud and knit config map",
    "start": "1128320",
    "end": "1133360"
  },
  {
    "text": "and here we see that it has all of our multi-part mime contents it has the empty shell script",
    "start": "1133679",
    "end": "1141200"
  },
  {
    "text": "here it has the hello world shell script here and it has the cloud config which is",
    "start": "1141200",
    "end": "1149120"
  },
  {
    "text": "all of this business here that gets my ssh keys in place all right so now we",
    "start": "1149120",
    "end": "1155679"
  },
  {
    "text": "have a config map with a cloud init key ready to be used by",
    "start": "1155679",
    "end": "1161039"
  },
  {
    "text": "any cross plane managed resource that has say a user data field that",
    "start": "1161039",
    "end": "1166960"
  },
  {
    "text": "could benefit from this so now that we've seen the demo um i'm sure there are some alternatives",
    "start": "1166960",
    "end": "1174720"
  },
  {
    "text": "that you're considering like why did you bother with that i'm sure there's better ways to do it and yeah there probably are so",
    "start": "1174720",
    "end": "1182480"
  },
  {
    "text": "what could we have done we could have maybe gone the other way and told our told our managed resource the",
    "start": "1182480",
    "end": "1190240"
  },
  {
    "start": "1184000",
    "end": "1184000"
  },
  {
    "text": "the equinix metal device how to read multiple config maps as user data we could have told it that if it's going",
    "start": "1190240",
    "end": "1196960"
  },
  {
    "text": "to do that then it should also mime encoded base64 encoded and that",
    "start": "1196960",
    "end": "1202880"
  },
  {
    "text": "is that's probably fair now this is something that i think user data is something that's reusable and other",
    "start": "1202880",
    "end": "1209120"
  },
  {
    "text": "cloud providers are going to be able to benefit from it so that's one reason for making this an independent provider",
    "start": "1209120",
    "end": "1215919"
  },
  {
    "text": "another reason for doing so is uh do we really want to bake all of these",
    "start": "1215919",
    "end": "1222000"
  },
  {
    "text": "things into each provider no maybe we could bake all of these things bake the appending the base64",
    "start": "1222000",
    "end": "1228159"
  },
  {
    "text": "encoding the g-zipping maybe we could make that into cross-plane run time as a new field type that's understood",
    "start": "1228159",
    "end": "1234880"
  },
  {
    "text": "like it knows how to um take secrets as parameters there's some type definitions for that so maybe it knows how to take um a list",
    "start": "1234880",
    "end": "1242720"
  },
  {
    "text": "of config maps and do this thing that a handful of providers could benefit from",
    "start": "1242720",
    "end": "1248559"
  },
  {
    "text": "maybe maybe not another way that this could be implemented is maybe with just a a",
    "start": "1248559",
    "end": "1255679"
  },
  {
    "text": "selector field so we'd say config map selector and provide some labels to look for to search uh",
    "start": "1255679",
    "end": "1263039"
  },
  {
    "text": "available config maps for we'll just take all the config maps that match that selector and we will do the base 64 encoding",
    "start": "1263039",
    "end": "1270640"
  },
  {
    "text": "we'll do the mine multiparting we'll do the gzipping all at so there are other ways that we",
    "start": "1270640",
    "end": "1277440"
  },
  {
    "text": "could do this um and in the future you know another reason why i think that",
    "start": "1277440",
    "end": "1283840"
  },
  {
    "text": "this is better to have as an independent provider so in the future i think there's a world where we can tie templating into this",
    "start": "1283840",
    "end": "1290720"
  },
  {
    "text": "where we take um fields from the various resources and we somehow get this cloud in it",
    "start": "1290720",
    "end": "1296320"
  },
  {
    "text": "provider to take those variables and apply them to the config maps that it's",
    "start": "1296320",
    "end": "1301440"
  },
  {
    "text": "going to concatenate and ultimately render now this is an experience that's similar",
    "start": "1301440",
    "end": "1307440"
  },
  {
    "text": "to what you may be familiar with if you've used terraforms",
    "start": "1307440",
    "end": "1312880"
  },
  {
    "text": "providers for cloudnit or terraforms providers for templates so they have an example",
    "start": "1312880",
    "end": "1320320"
  },
  {
    "text": "uh right on one of these pages where they show you having a template file applying some",
    "start": "1320320",
    "end": "1326960"
  },
  {
    "text": "variables to it combining it all into one cloud init data",
    "start": "1326960",
    "end": "1332080"
  },
  {
    "text": "that the terraform provider knows how to to um how to render it knows how to take multiple parts it knows how to",
    "start": "1332080",
    "end": "1338799"
  },
  {
    "text": "take the options of base64 encoding mime encoding uh taking even a mime boundary field so",
    "start": "1338799",
    "end": "1345679"
  },
  {
    "text": "that in case you need a custom one for some reason",
    "start": "1345679",
    "end": "1351440"
  },
  {
    "text": "and so terraform has all of those things already that was one of the examples that we used in defining this",
    "start": "1351520",
    "end": "1358640"
  },
  {
    "text": "this concept of a provider well crossplane knows how to ingest terraform",
    "start": "1358640",
    "end": "1365039"
  },
  {
    "text": "providers so why didn't we just make a cross plane provider that ingests this terraform provider and",
    "start": "1365039",
    "end": "1372240"
  },
  {
    "text": "get this for free well the reason why we haven't done that is because um well i think it might be a little",
    "start": "1372240",
    "end": "1378880"
  },
  {
    "text": "complicated it might be a bit bulkier uh to run terraform in a container",
    "start": "1378880",
    "end": "1384559"
  },
  {
    "text": "uh where now we're just running a little bit of string processing in a",
    "start": "1384559",
    "end": "1389760"
  },
  {
    "text": "container but the other thing is that the terraform",
    "start": "1389760",
    "end": "1396000"
  },
  {
    "text": "providers that are supported now don't believe that they support data sources and the cloud init provider that's out",
    "start": "1396000",
    "end": "1402559"
  },
  {
    "text": "there works as a data source",
    "start": "1402559",
    "end": "1406879"
  },
  {
    "text": "one more way that we could have approached this is to use the composition to construct our",
    "start": "1408640",
    "end": "1415200"
  },
  {
    "text": "user data and that that's an area that might be possible",
    "start": "1415200",
    "end": "1420240"
  },
  {
    "text": "now might be possible soon but effectively we would need a composition that knows how to",
    "start": "1420240",
    "end": "1426799"
  },
  {
    "text": "read in a config map that may or may not exist yet take the data from that config map and",
    "start": "1426799",
    "end": "1432400"
  },
  {
    "text": "drop it into the user data field of some other managed resource we would bundle those two things up as",
    "start": "1432400",
    "end": "1440400"
  },
  {
    "text": "a single composition and then we might have other compositions that we would use to",
    "start": "1440400",
    "end": "1446960"
  },
  {
    "text": "say take fields from that composition and use those fields put them in our config",
    "start": "1446960",
    "end": "1452400"
  },
  {
    "text": "map that we're going to use to provision our device so yeah there are alternatives",
    "start": "1452400",
    "end": "1458320"
  },
  {
    "text": "i wasn't ready to hop into any of those and i don't know how far i would have gotten",
    "start": "1458320",
    "end": "1463760"
  },
  {
    "text": "with those uh writing this provider other than getting stuck on a few simple things perhaps in part",
    "start": "1463760",
    "end": "1471039"
  },
  {
    "text": "because i tried to copy an existing provider and just modify it to suit my purposes instead of starting from scratch",
    "start": "1471039",
    "end": "1478159"
  },
  {
    "text": "but in the end it was pretty quick to turn this around so i've mentioned uh that there were",
    "start": "1478159",
    "end": "1483200"
  },
  {
    "text": "some influences going into this that were the terraform providers it's interesting to me that the",
    "start": "1483200",
    "end": "1489200"
  },
  {
    "text": "terraform cloud init provider it has been deprecated in favor of the",
    "start": "1489200",
    "end": "1497679"
  },
  {
    "text": "cloud init config data source and the template file provider is seemingly",
    "start": "1497679",
    "end": "1504480"
  },
  {
    "text": "deprecated in favor of a template file function which is an hcl level function so it",
    "start": "1504480",
    "end": "1511520"
  },
  {
    "text": "would be interesting to see crossplane develop a similar function to",
    "start": "1511520",
    "end": "1517679"
  },
  {
    "text": "serve a similar function since we don't have paths to load in well i suppose we do have pads you can",
    "start": "1517679",
    "end": "1526159"
  },
  {
    "text": "you have paths that are volume mounts on pods but we're not dealing with that with",
    "start": "1526159",
    "end": "1532159"
  },
  {
    "start": "1532000",
    "end": "1532000"
  },
  {
    "text": "cross plane we are dealing with various crd cr instances there there's no pod",
    "start": "1532159",
    "end": "1537600"
  },
  {
    "text": "here to for a path to be relevant so the kind of path thing that is available to us is",
    "start": "1537600",
    "end": "1542880"
  },
  {
    "text": "config maps and secrets and they live in different name spaces and they have different names and they have different keys",
    "start": "1542880",
    "end": "1549120"
  },
  {
    "text": "um so perhaps some way that cross plains function library or",
    "start": "1549120",
    "end": "1556559"
  },
  {
    "text": "the composition library gives you access to managing mangling reading",
    "start": "1556559",
    "end": "1564080"
  },
  {
    "text": "config maps and secrets taking those variables and applying additional functions on",
    "start": "1564080",
    "end": "1571360"
  },
  {
    "text": "them and then putting them back somewhere so read them from somewhere",
    "start": "1571360",
    "end": "1577600"
  },
  {
    "text": "hang on to all those variables use those variables to modify other variables with functions that are available and",
    "start": "1577600",
    "end": "1583760"
  },
  {
    "text": "ultimately deposit that into a resource a config map or secret",
    "start": "1583760",
    "end": "1589440"
  },
  {
    "text": "one of the other inspirations for this was the helm provider for crossplay there's some similarities in that both",
    "start": "1589440",
    "end": "1597200"
  },
  {
    "text": "of them uh work within within the scope of a cluster",
    "start": "1597200",
    "end": "1602799"
  },
  {
    "text": "there might be some blurriness here i think that the helm provider has the capability of uh connecting to a remote",
    "start": "1602960",
    "end": "1608799"
  },
  {
    "text": "cluster um but a lot of the functions that it had uh made available to it really suited um what i was trying to",
    "start": "1608799",
    "end": "1617679"
  },
  {
    "text": "do uh there were functions in there to read in config map and secrets",
    "start": "1617679",
    "end": "1623440"
  },
  {
    "text": "and that's something that i needed to do here so i took a lot of inspiration from that",
    "start": "1623440",
    "end": "1630240"
  },
  {
    "text": "provider one of the big differences though is",
    "start": "1630240",
    "end": "1635279"
  },
  {
    "text": "that again there's no api this is this cloud provider provider has",
    "start": "1635279",
    "end": "1642720"
  },
  {
    "text": "there's no api calls i'm considering making some some pretty drastic i think compared to",
    "start": "1642720",
    "end": "1649840"
  },
  {
    "text": "the uh the normal provider changes to this ripping out the provider config because we don't need to configure a",
    "start": "1649840",
    "end": "1656720"
  },
  {
    "text": "provider ripping out the at provider and the four",
    "start": "1656720",
    "end": "1661840"
  },
  {
    "text": "provider components of the spec and status because again we don't need that and so",
    "start": "1661840",
    "end": "1668720"
  },
  {
    "text": "it raises the question like why is this a provider at all or what are providers really built for",
    "start": "1668720",
    "end": "1676480"
  },
  {
    "text": "earlier in in the life cycle of uh cross plane there were some uh thoughts",
    "start": "1676480",
    "end": "1683360"
  },
  {
    "text": "about having providers that didn't interact with uh remote apis",
    "start": "1683360",
    "end": "1688960"
  },
  {
    "text": "they didn't have credentials they didn't have um this ad provider for provider",
    "start": "1688960",
    "end": "1696240"
  },
  {
    "text": "at provider and for provider uh fields uh and you can tell that that was part",
    "start": "1696240",
    "end": "1702080"
  },
  {
    "text": "of the thinking because of the way that the managed resources in crossplane runtime",
    "start": "1702080",
    "end": "1707840"
  },
  {
    "text": "are named they're named after external provider external this",
    "start": "1707840",
    "end": "1714880"
  },
  {
    "text": "there's no external client needed here so have we lost sight of what it looks like",
    "start": "1714880",
    "end": "1720640"
  },
  {
    "text": "to make a provider that doesn't interact with an api and how can we improve that experience",
    "start": "1720640",
    "end": "1727039"
  },
  {
    "text": "do we want to improve that experience taking terraform for an example",
    "start": "1727039",
    "end": "1732640"
  },
  {
    "text": "terraform does have a handful of these providers that just operate without an api",
    "start": "1732640",
    "end": "1739360"
  },
  {
    "text": "and perhaps uh you know we need more of those in cross play then again we have",
    "start": "1739360",
    "end": "1745520"
  },
  {
    "text": "compositions that are allowing us to skirt some of those responsibilities as",
    "start": "1745520",
    "end": "1751760"
  },
  {
    "text": "long as we can take advantage of functions and compositions we might be able to avoid the need for",
    "start": "1751760",
    "end": "1760799"
  },
  {
    "text": "api less providers in cross plane",
    "start": "1760799",
    "end": "1766000"
  },
  {
    "text": "i understand how janky this must appear to uh many of you and so i'm willing to accept questions",
    "start": "1766000",
    "end": "1772320"
  },
  {
    "text": "and negative feedback on the github provider uh repo display slash in it",
    "start": "1772320",
    "end": "1780159"
  },
  {
    "text": "at the time of recording this in the future who knows where it might live uh maybe it'll live in cross plain",
    "start": "1780159",
    "end": "1785520"
  },
  {
    "text": "contribs and uh if you want to get a hold of me outside of now",
    "start": "1785520",
    "end": "1790640"
  },
  {
    "text": "the twitter is uh one good way and you can find my work on github at",
    "start": "1790640",
    "end": "1796399"
  },
  {
    "text": "display thanks for listening to my rambling and i look forward to your comments",
    "start": "1796399",
    "end": "1803600"
  },
  {
    "text": "all my slides are available in the github project take a look there issues prs let's",
    "start": "1803600",
    "end": "1810399"
  },
  {
    "text": "turn this into something useful and might actually mean closing this project down in order to",
    "start": "1810399",
    "end": "1815440"
  },
  {
    "text": "make something useful thanks bye",
    "start": "1815440",
    "end": "1820720"
  }
]