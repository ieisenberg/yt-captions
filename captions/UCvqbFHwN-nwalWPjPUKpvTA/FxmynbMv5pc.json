[
  {
    "start": "0",
    "end": "13000"
  },
  {
    "text": "uh yeah as Vic said my name is Mike I",
    "start": "0",
    "end": "2159"
  },
  {
    "text": "work on the mesh team at Kong and uh we",
    "start": "2159",
    "end": "5220"
  },
  {
    "text": "work on Kuma the cncf service mesh and",
    "start": "5220",
    "end": "8280"
  },
  {
    "text": "today I want to talk a little bit about",
    "start": "8280",
    "end": "9360"
  },
  {
    "text": "what I call domain oriented Kuma",
    "start": "9360",
    "end": "12000"
  },
  {
    "text": "um and I'll jump right into some",
    "start": "12000",
    "end": "13320"
  },
  {
    "start": "13000",
    "end": "13000"
  },
  {
    "text": "motivation for talking about",
    "start": "13320",
    "end": "14700"
  },
  {
    "text": "microservice architecture",
    "start": "14700",
    "end": "17400"
  },
  {
    "text": "um if we take this like generic store",
    "start": "17400",
    "end": "20160"
  },
  {
    "text": "as an example and we want to do it using",
    "start": "20160",
    "end": "23580"
  },
  {
    "text": "microservices the most naive way is just",
    "start": "23580",
    "end": "25380"
  },
  {
    "text": "to",
    "start": "25380",
    "end": "26160"
  },
  {
    "text": "Implement our functionalities",
    "start": "26160",
    "end": "27420"
  },
  {
    "text": "microservices and have a flat network of",
    "start": "27420",
    "end": "29400"
  },
  {
    "text": "microservices and every service",
    "start": "29400",
    "end": "31820"
  },
  {
    "text": "exposes some functionality in its API",
    "start": "31820",
    "end": "34260"
  },
  {
    "text": "and this API is public that means any",
    "start": "34260",
    "end": "37200"
  },
  {
    "text": "other service in the mesh can use it",
    "start": "37200",
    "end": "40320"
  },
  {
    "text": "um",
    "start": "40320",
    "end": "41399"
  },
  {
    "text": "and as we scale up to more and more",
    "start": "41399",
    "end": "43559"
  },
  {
    "text": "microservices there are some",
    "start": "43559",
    "end": "45360"
  },
  {
    "text": "disadvantages to this um architecture",
    "start": "45360",
    "end": "48539"
  },
  {
    "text": "and the first is that uh if you put",
    "start": "48539",
    "end": "52500"
  },
  {
    "text": "yourself in the place of a service owner",
    "start": "52500",
    "end": "55320"
  },
  {
    "text": "um",
    "start": "55320",
    "end": "55860"
  },
  {
    "text": "like I said every API is essentially",
    "start": "55860",
    "end": "57539"
  },
  {
    "text": "completely public any functionality that",
    "start": "57539",
    "end": "60420"
  },
  {
    "text": "your service offers is being used",
    "start": "60420",
    "end": "62039"
  },
  {
    "text": "directly by any other service so say you",
    "start": "62039",
    "end": "64320"
  },
  {
    "text": "want to make a change to your API for",
    "start": "64320",
    "end": "65939"
  },
  {
    "text": "performance reasons whatever",
    "start": "65939",
    "end": "68100"
  },
  {
    "text": "um",
    "start": "68100",
    "end": "69180"
  },
  {
    "text": "you need to go and make sure that when",
    "start": "69180",
    "end": "71040"
  },
  {
    "text": "you change your API you're not going to",
    "start": "71040",
    "end": "72420"
  },
  {
    "text": "break all of those other services",
    "start": "72420",
    "end": "73740"
  },
  {
    "text": "because there's nothing between them and",
    "start": "73740",
    "end": "75180"
  },
  {
    "text": "you right and",
    "start": "75180",
    "end": "78600"
  },
  {
    "text": "uh yeah so what that means you have to",
    "start": "79400",
    "end": "81720"
  },
  {
    "text": "start coordinating with other teams so",
    "start": "81720",
    "end": "83159"
  },
  {
    "text": "you're the owner of your service but",
    "start": "83159",
    "end": "84540"
  },
  {
    "text": "you've got to talk to the owners of the",
    "start": "84540",
    "end": "85740"
  },
  {
    "text": "other services and you've got to",
    "start": "85740",
    "end": "87360"
  },
  {
    "text": "coordinate deployments you've got to",
    "start": "87360",
    "end": "88799"
  },
  {
    "text": "make sure that um that what they're",
    "start": "88799",
    "end": "91080"
  },
  {
    "text": "running doesn't break when you change",
    "start": "91080",
    "end": "92520"
  },
  {
    "text": "yours and maybe one of the teams doesn't",
    "start": "92520",
    "end": "94619"
  },
  {
    "text": "have the bandwidth to do this at the",
    "start": "94619",
    "end": "96119"
  },
  {
    "text": "moment but you want to get your release",
    "start": "96119",
    "end": "97259"
  },
  {
    "text": "out so maybe you just implemented",
    "start": "97259",
    "end": "98939"
  },
  {
    "text": "yourself in their service just to get it",
    "start": "98939",
    "end": "100320"
  },
  {
    "text": "done right",
    "start": "100320",
    "end": "101640"
  },
  {
    "text": "um and this doesn't scale very well",
    "start": "101640",
    "end": "103560"
  },
  {
    "text": "what you've basically created is uh",
    "start": "103560",
    "end": "105420"
  },
  {
    "text": "what's known as a distributed model with",
    "start": "105420",
    "end": "106920"
  },
  {
    "text": "where the services appear to be",
    "start": "106920",
    "end": "109320"
  },
  {
    "text": "independent but really they're very",
    "start": "109320",
    "end": "110700"
  },
  {
    "text": "tightly coupled",
    "start": "110700",
    "end": "112860"
  },
  {
    "text": "um and if we're using a service mesh",
    "start": "112860",
    "end": "115619"
  },
  {
    "text": "there's another aspect to this and that",
    "start": "115619",
    "end": "117540"
  },
  {
    "text": "is",
    "start": "117540",
    "end": "118380"
  },
  {
    "text": "um in a service mesh every node is able",
    "start": "118380",
    "end": "120780"
  },
  {
    "text": "to communicate with every other node",
    "start": "120780",
    "end": "121920"
  },
  {
    "text": "right that's kind of the idea of a mesh",
    "start": "121920",
    "end": "123420"
  },
  {
    "text": "and what this means is that the control",
    "start": "123420",
    "end": "125520"
  },
  {
    "text": "plane is calculating configuration for",
    "start": "125520",
    "end": "128220"
  },
  {
    "text": "all the sidecars for these services",
    "start": "128220",
    "end": "130739"
  },
  {
    "text": "and if we imagine a new service coming",
    "start": "130739",
    "end": "132780"
  },
  {
    "text": "up",
    "start": "132780",
    "end": "134040"
  },
  {
    "text": "um the control plane in order to handle",
    "start": "134040",
    "end": "135900"
  },
  {
    "text": "this new service the control plane needs",
    "start": "135900",
    "end": "137340"
  },
  {
    "text": "to calculate configuration for sidecars",
    "start": "137340",
    "end": "140099"
  },
  {
    "text": "of all other services this uses CPU it",
    "start": "140099",
    "end": "143400"
  },
  {
    "text": "needs to send that configuration over",
    "start": "143400",
    "end": "145620"
  },
  {
    "text": "the wire depending on the protocol",
    "start": "145620",
    "end": "146940"
  },
  {
    "text": "you'll be wasting bytes and finally the",
    "start": "146940",
    "end": "149879"
  },
  {
    "text": "sidecar itself is holding this config in",
    "start": "149879",
    "end": "152160"
  },
  {
    "text": "memory and this is the case even if this",
    "start": "152160",
    "end": "154080"
  },
  {
    "text": "new service is only used by say one or",
    "start": "154080",
    "end": "155879"
  },
  {
    "text": "two Services of the many microservices",
    "start": "155879",
    "end": "158280"
  },
  {
    "text": "you have",
    "start": "158280",
    "end": "160500"
  },
  {
    "text": "um so those are some issues with this",
    "start": "160500",
    "end": "162239"
  },
  {
    "text": "sort of naive way to do a microservice",
    "start": "162239",
    "end": "164519"
  },
  {
    "text": "architecture",
    "start": "164519",
    "end": "165959"
  },
  {
    "text": "um and I'm going to talk about Doma",
    "start": "165959",
    "end": "168180"
  },
  {
    "text": "which is domain oriented microservice",
    "start": "168180",
    "end": "169800"
  },
  {
    "text": "architecture but first I want to jump",
    "start": "169800",
    "end": "172019"
  },
  {
    "start": "172000",
    "end": "172000"
  },
  {
    "text": "back to domain oriented design which",
    "start": "172019",
    "end": "174420"
  },
  {
    "text": "sort of applies to you know a single",
    "start": "174420",
    "end": "176220"
  },
  {
    "text": "Deployable application or a library and",
    "start": "176220",
    "end": "178680"
  },
  {
    "text": "it's also an answer to the question of",
    "start": "178680",
    "end": "180180"
  },
  {
    "text": "how do you design your software with",
    "start": "180180",
    "end": "181560"
  },
  {
    "text": "ideas like maintainability and ownership",
    "start": "181560",
    "end": "183900"
  },
  {
    "text": "in mind and what it says is basically",
    "start": "183900",
    "end": "186180"
  },
  {
    "text": "use the business domain that your",
    "start": "186180",
    "end": "187739"
  },
  {
    "text": "application lives in create modules for",
    "start": "187739",
    "end": "189959"
  },
  {
    "text": "your application",
    "start": "189959",
    "end": "191940"
  },
  {
    "text": "um",
    "start": "191940",
    "end": "192480"
  },
  {
    "text": "these modules have public interfaces",
    "start": "192480",
    "end": "195060"
  },
  {
    "text": "that they provide other modules use that",
    "start": "195060",
    "end": "197819"
  },
  {
    "text": "functionality directly by the public",
    "start": "197819",
    "end": "199319"
  },
  {
    "text": "interface but otherwise what you have is",
    "start": "199319",
    "end": "202500"
  },
  {
    "text": "private and that allows you to iterate",
    "start": "202500",
    "end": "204000"
  },
  {
    "text": "and refactor and re-implement inside a",
    "start": "204000",
    "end": "206580"
  },
  {
    "text": "module as long as you don't break the",
    "start": "206580",
    "end": "208019"
  },
  {
    "text": "public interface something we all have",
    "start": "208019",
    "end": "210060"
  },
  {
    "text": "seen before",
    "start": "210060",
    "end": "211400"
  },
  {
    "text": "and your language hopefully is sort of",
    "start": "211400",
    "end": "214080"
  },
  {
    "text": "holding your hand here and making sure",
    "start": "214080",
    "end": "215340"
  },
  {
    "text": "you don't break these rules right",
    "start": "215340",
    "end": "217440"
  },
  {
    "text": "um and Doma comes in here and it builds",
    "start": "217440",
    "end": "220980"
  },
  {
    "text": "on the ideas of domain oriented design",
    "start": "220980",
    "end": "222840"
  },
  {
    "text": "and it kind of lifts it into the world",
    "start": "222840",
    "end": "225299"
  },
  {
    "text": "of microservices",
    "start": "225299",
    "end": "227519"
  },
  {
    "text": "um it was extensively described by Uber",
    "start": "227519",
    "end": "229620"
  },
  {
    "text": "on their Tech blog and definitely check",
    "start": "229620",
    "end": "231360"
  },
  {
    "text": "out this post because it goes into a lot",
    "start": "231360",
    "end": "232980"
  },
  {
    "text": "more detail",
    "start": "232980",
    "end": "234239"
  },
  {
    "text": "um than what I'm going to talk about",
    "start": "234239",
    "end": "235140"
  },
  {
    "text": "here and there's more to it",
    "start": "235140",
    "end": "238019"
  },
  {
    "text": "um but there's two basic building blocks",
    "start": "238019",
    "end": "239640"
  },
  {
    "text": "for DOMA",
    "start": "239640",
    "end": "241620"
  },
  {
    "text": "the first is uh",
    "start": "241620",
    "end": "244560"
  },
  {
    "text": "do you take your services and you group",
    "start": "244560",
    "end": "246299"
  },
  {
    "text": "them together according to the business",
    "start": "246299",
    "end": "248280"
  },
  {
    "text": "domain that they live in",
    "start": "248280",
    "end": "250739"
  },
  {
    "text": "um and then we say inside a domain and",
    "start": "250739",
    "end": "252959"
  },
  {
    "text": "these are examples here inside a domain",
    "start": "252959",
    "end": "255720"
  },
  {
    "text": "Services communicate with each other",
    "start": "255720",
    "end": "257100"
  },
  {
    "text": "directly but services in different",
    "start": "257100",
    "end": "258840"
  },
  {
    "text": "domains can't communicate at all",
    "start": "258840",
    "end": "261479"
  },
  {
    "text": "um so you've essentially privatized the",
    "start": "261479",
    "end": "263880"
  },
  {
    "text": "interfaces of those microservices and",
    "start": "263880",
    "end": "266580"
  },
  {
    "text": "then you introduce uh the idea of a",
    "start": "266580",
    "end": "268860"
  },
  {
    "text": "domain Gateway which exposes the",
    "start": "268860",
    "end": "271259"
  },
  {
    "text": "functionality of those domains uh",
    "start": "271259",
    "end": "274680"
  },
  {
    "text": "in a public interface",
    "start": "274680",
    "end": "277620"
  },
  {
    "text": "and this public interface can be",
    "start": "277620",
    "end": "280199"
  },
  {
    "text": "consumed by the services in other",
    "start": "280199",
    "end": "282180"
  },
  {
    "text": "domains so now you've got private and",
    "start": "282180",
    "end": "284940"
  },
  {
    "text": "public interfaces for your microservices",
    "start": "284940",
    "end": "288000"
  },
  {
    "text": "and domains and gateways are really just",
    "start": "288000",
    "end": "291180"
  },
  {
    "text": "rules about how Services communicate",
    "start": "291180",
    "end": "292560"
  },
  {
    "text": "with each other and that's kind of uh",
    "start": "292560",
    "end": "294960"
  },
  {
    "text": "what a service mesh does right it's what",
    "start": "294960",
    "end": "296639"
  },
  {
    "text": "a service mess is there for and maybe we",
    "start": "296639",
    "end": "298919"
  },
  {
    "text": "can use a service mesh to help us",
    "start": "298919",
    "end": "300360"
  },
  {
    "text": "enforce and implement this architecture",
    "start": "300360",
    "end": "302820"
  },
  {
    "text": "and I think we can with Kuma",
    "start": "302820",
    "end": "305419"
  },
  {
    "text": "the first way we're going to do that is",
    "start": "305419",
    "end": "307740"
  },
  {
    "text": "the mesh resource that Kuma offers now",
    "start": "307740",
    "end": "310979"
  },
  {
    "text": "the mesh the word mesh can refer to like",
    "start": "310979",
    "end": "312720"
  },
  {
    "text": "the entire control plane the whole data",
    "start": "312720",
    "end": "314400"
  },
  {
    "text": "plane but Kuma also offers a resource",
    "start": "314400",
    "end": "317160"
  },
  {
    "text": "which is basically called mesh which is",
    "start": "317160",
    "end": "319259"
  },
  {
    "text": "basically a way to partition your data",
    "start": "319259",
    "end": "321120"
  },
  {
    "text": "plane into separate separate meshes",
    "start": "321120",
    "end": "324300"
  },
  {
    "text": "and it does this by uh virtue of the",
    "start": "324300",
    "end": "327720"
  },
  {
    "text": "fact that in a mesh every mesh defines",
    "start": "327720",
    "end": "330120"
  },
  {
    "text": "its own CA so for every service that",
    "start": "330120",
    "end": "332639"
  },
  {
    "text": "ends up in a mesh mcls guarantees that",
    "start": "332639",
    "end": "334860"
  },
  {
    "text": "it can only communicate with other",
    "start": "334860",
    "end": "336419"
  },
  {
    "text": "services in that mesh via mtls and and",
    "start": "336419",
    "end": "340560"
  },
  {
    "text": "um the fact that they have their",
    "start": "340560",
    "end": "341460"
  },
  {
    "text": "individual Cas",
    "start": "341460",
    "end": "343560"
  },
  {
    "text": "um",
    "start": "343560",
    "end": "344220"
  },
  {
    "text": "this allows us to make an optimization",
    "start": "344220",
    "end": "345660"
  },
  {
    "text": "in the control plane if a new service in",
    "start": "345660",
    "end": "348600"
  },
  {
    "text": "say mesh a comes up",
    "start": "348600",
    "end": "350280"
  },
  {
    "text": "the control plane knows that it doesn't",
    "start": "350280",
    "end": "351660"
  },
  {
    "text": "need to recalculate any configuration",
    "start": "351660",
    "end": "353160"
  },
  {
    "text": "for mesh B because it's impossible for a",
    "start": "353160",
    "end": "355800"
  },
  {
    "text": "meshp service to reach a service in",
    "start": "355800",
    "end": "357300"
  },
  {
    "text": "meshe anyway and so our resource usage",
    "start": "357300",
    "end": "360120"
  },
  {
    "text": "becomes independent between meshes",
    "start": "360120",
    "end": "362580"
  },
  {
    "text": "uh we can also create a like we don't",
    "start": "362580",
    "end": "365100"
  },
  {
    "text": "have to create any additional permission",
    "start": "365100",
    "end": "366360"
  },
  {
    "text": "policies here we can rely on the ca to",
    "start": "366360",
    "end": "368820"
  },
  {
    "text": "enforce um this separation between",
    "start": "368820",
    "end": "370620"
  },
  {
    "text": "meshes and otherwise say okay every",
    "start": "370620",
    "end": "372539"
  },
  {
    "text": "service inside a mesh can just",
    "start": "372539",
    "end": "373740"
  },
  {
    "text": "communicate freely",
    "start": "373740",
    "end": "375479"
  },
  {
    "text": "and we still only have one actual",
    "start": "375479",
    "end": "376919"
  },
  {
    "text": "control plane deployment to worry about",
    "start": "376919",
    "end": "378660"
  },
  {
    "text": "so one control plane deployment is",
    "start": "378660",
    "end": "379979"
  },
  {
    "text": "handling these multiple meshes",
    "start": "379979",
    "end": "382319"
  },
  {
    "text": "uh the second the second aspect of this",
    "start": "382319",
    "end": "384600"
  },
  {
    "text": "is ownership so",
    "start": "384600",
    "end": "386340"
  },
  {
    "text": "every policy in Kuma applies to a",
    "start": "386340",
    "end": "388680"
  },
  {
    "text": "specific mesh so we can have sort of the",
    "start": "388680",
    "end": "391440"
  },
  {
    "text": "role of a mesh owner who is able to",
    "start": "391440",
    "end": "393660"
  },
  {
    "text": "Define how uh you know all the network",
    "start": "393660",
    "end": "395460"
  },
  {
    "text": "policies that Kuma provides but only for",
    "start": "395460",
    "end": "397860"
  },
  {
    "text": "their mesh and they you know it won't",
    "start": "397860",
    "end": "400020"
  },
  {
    "text": "affect any other services",
    "start": "400020",
    "end": "402120"
  },
  {
    "text": "um",
    "start": "402120",
    "end": "402960"
  },
  {
    "text": "these two things together give us a",
    "start": "402960",
    "end": "404699"
  },
  {
    "text": "pretty great way to model the domain",
    "start": "404699",
    "end": "406800"
  },
  {
    "text": "from domain oriented design so in domain",
    "start": "406800",
    "end": "408780"
  },
  {
    "text": "oriented Kuma we model domains using",
    "start": "408780",
    "end": "410400"
  },
  {
    "text": "meshes uh the second part uh for",
    "start": "410400",
    "end": "413340"
  },
  {
    "start": "413000",
    "end": "413000"
  },
  {
    "text": "gateways we recently introduced the",
    "start": "413340",
    "end": "415560"
  },
  {
    "text": "built-in Gateway in Kuma which is an",
    "start": "415560",
    "end": "418199"
  },
  {
    "text": "Envoy based Gateway",
    "start": "418199",
    "end": "419940"
  },
  {
    "text": "for north south trap for North South",
    "start": "419940",
    "end": "421620"
  },
  {
    "text": "traffic",
    "start": "421620",
    "end": "423240"
  },
  {
    "text": "um",
    "start": "423240",
    "end": "424139"
  },
  {
    "text": "and when we were looking at how to",
    "start": "424139",
    "end": "426360"
  },
  {
    "text": "handle communication between meshes we",
    "start": "426360",
    "end": "428880"
  },
  {
    "text": "decided to reuse the Gateway a little",
    "start": "428880",
    "end": "431639"
  },
  {
    "text": "differently we don't just",
    "start": "431639",
    "end": "433740"
  },
  {
    "text": "uh use it to trust I mean we don't just",
    "start": "433740",
    "end": "435900"
  },
  {
    "text": "use it to accept any traffic from say",
    "start": "435900",
    "end": "437340"
  },
  {
    "text": "the internet uh but instead we keep mtls",
    "start": "437340",
    "end": "440520"
  },
  {
    "text": "on and we accept traffic only from some",
    "start": "440520",
    "end": "444000"
  },
  {
    "text": "ca for any mesh that the control plane",
    "start": "444000",
    "end": "446400"
  },
  {
    "text": "knows about",
    "start": "446400",
    "end": "447840"
  },
  {
    "text": "um so it's a little different than the",
    "start": "447840",
    "end": "448740"
  },
  {
    "text": "services in a mesh we accept at traffic",
    "start": "448740",
    "end": "450419"
  },
  {
    "text": "from NECA at a Gateway",
    "start": "450419",
    "end": "453000"
  },
  {
    "text": "um",
    "start": "453000",
    "end": "453720"
  },
  {
    "text": "and so this allows us to take the",
    "start": "453720",
    "end": "456360"
  },
  {
    "text": "functionality that the microservices in",
    "start": "456360",
    "end": "457919"
  },
  {
    "text": "a mesh Implement and then expose it via",
    "start": "457919",
    "end": "460380"
  },
  {
    "text": "the cross mesh Gateway for the other",
    "start": "460380",
    "end": "462120"
  },
  {
    "text": "meshes to use for those Services which",
    "start": "462120",
    "end": "464940"
  },
  {
    "text": "makes it a perfect way to model the",
    "start": "464940",
    "end": "467099"
  },
  {
    "text": "domain Gateway of DOMA",
    "start": "467099",
    "end": "469800"
  },
  {
    "text": "so uh yeah so we've got meshes modeling",
    "start": "469800",
    "end": "472979"
  },
  {
    "text": "domains and we have cross mesh gateways",
    "start": "472979",
    "end": "474660"
  },
  {
    "text": "modeling uh the domain Gateway and as an",
    "start": "474660",
    "end": "478259"
  },
  {
    "text": "example",
    "start": "478259",
    "end": "479220"
  },
  {
    "text": "if you were here earlier you saw the",
    "start": "479220",
    "end": "481139"
  },
  {
    "text": "talk about Gateway API and you'll",
    "start": "481139",
    "end": "482699"
  },
  {
    "text": "recognize this this is a gateway API",
    "start": "482699",
    "end": "484919"
  },
  {
    "text": "Gateway and so Kuma supports Gateway API",
    "start": "484919",
    "end": "488039"
  },
  {
    "text": "here we've created a Gateway we've",
    "start": "488039",
    "end": "490440"
  },
  {
    "text": "labeled it with the mesh we want it to",
    "start": "490440",
    "end": "492300"
  },
  {
    "text": "belong to",
    "start": "492300",
    "end": "493380"
  },
  {
    "text": "and we've pointed to a Gateway class",
    "start": "493380",
    "end": "496680"
  },
  {
    "text": "that Kuma provides for making cross mesh",
    "start": "496680",
    "end": "498660"
  },
  {
    "text": "gateways the hostname that we set is the",
    "start": "498660",
    "end": "502199"
  },
  {
    "text": "name that the cross mesh Gateway will be",
    "start": "502199",
    "end": "503879"
  },
  {
    "text": "accessible at for all other services in",
    "start": "503879",
    "end": "506460"
  },
  {
    "text": "our mesh",
    "start": "506460",
    "end": "508940"
  },
  {
    "text": "um and then we can create you know HTTP",
    "start": "509039",
    "end": "510660"
  },
  {
    "text": "routes like normal to expose that",
    "start": "510660",
    "end": "512940"
  },
  {
    "text": "functionality uh from our services",
    "start": "512940",
    "end": "514860"
  },
  {
    "text": "inside the mesh to services in other",
    "start": "514860",
    "end": "516839"
  },
  {
    "text": "meshes",
    "start": "516839",
    "end": "518820"
  },
  {
    "text": "um just to drive home the point about",
    "start": "518820",
    "end": "520399"
  },
  {
    "text": "how mtls is what mtls is doing for us",
    "start": "520399",
    "end": "523500"
  },
  {
    "text": "here if we imagine a client here making",
    "start": "523500",
    "end": "526860"
  },
  {
    "text": "a request to The Domain Gateway like I",
    "start": "526860",
    "end": "530100"
  },
  {
    "text": "said it's at orders.mesh um",
    "start": "530100",
    "end": "533519"
  },
  {
    "text": "the envoy config is made up of well we",
    "start": "533519",
    "end": "537360"
  },
  {
    "text": "model this in Envoy by on the client",
    "start": "537360",
    "end": "540000"
  },
  {
    "text": "side creating a cluster which is",
    "start": "540000",
    "end": "541800"
  },
  {
    "text": "basically a set of envoy endpoints",
    "start": "541800",
    "end": "544140"
  },
  {
    "text": "um that point to a uh yeah point to an",
    "start": "544140",
    "end": "547560"
  },
  {
    "text": "endpoint in the Gateway we have a",
    "start": "547560",
    "end": "549120"
  },
  {
    "text": "listener that corresponds to The",
    "start": "549120",
    "end": "550380"
  },
  {
    "text": "Listener we created earlier",
    "start": "550380",
    "end": "552899"
  },
  {
    "text": "um and the",
    "start": "552899",
    "end": "555720"
  },
  {
    "text": "client is it's opening a TLS connection",
    "start": "555720",
    "end": "559980"
  },
  {
    "text": "Upstream",
    "start": "559980",
    "end": "561420"
  },
  {
    "text": "and it's providing an identity that's",
    "start": "561420",
    "end": "563940"
  },
  {
    "text": "given to it by the payments which is the",
    "start": "563940",
    "end": "566580"
  },
  {
    "text": "mesh it's a part of CA",
    "start": "566580",
    "end": "568680"
  },
  {
    "text": "it sends this when it's making a request",
    "start": "568680",
    "end": "570480"
  },
  {
    "text": "to The Domain Gateway listener the",
    "start": "570480",
    "end": "572580"
  },
  {
    "text": "domain Gateway identifies itself with",
    "start": "572580",
    "end": "575160"
  },
  {
    "text": "the orders with a certificate from the",
    "start": "575160",
    "end": "578399"
  },
  {
    "text": "order CA",
    "start": "578399",
    "end": "579660"
  },
  {
    "text": "and then we have on the client side we",
    "start": "579660",
    "end": "584100"
  },
  {
    "text": "trust the order CA because uh",
    "start": "584100",
    "end": "587820"
  },
  {
    "text": "it that's what the cluster is configured",
    "start": "587820",
    "end": "589980"
  },
  {
    "text": "to do because it's configured for a",
    "start": "589980",
    "end": "591180"
  },
  {
    "text": "domain Gateway and on the Gateway side",
    "start": "591180",
    "end": "593339"
  },
  {
    "text": "we are trusting the payment CA amongst",
    "start": "593339",
    "end": "596100"
  },
  {
    "text": "the other Cas in our mesh so we see that",
    "start": "596100",
    "end": "599220"
  },
  {
    "text": "these two things in combination mean",
    "start": "599220",
    "end": "601440"
  },
  {
    "text": "that the request will be successful and",
    "start": "601440",
    "end": "603480"
  },
  {
    "text": "we've maintained our mcls guarantee but",
    "start": "603480",
    "end": "605339"
  },
  {
    "text": "we're moving between meshes here",
    "start": "605339",
    "end": "608459"
  },
  {
    "text": "um yeah so that's domain oriented Kuma",
    "start": "608459",
    "end": "610440"
  },
  {
    "text": "in short",
    "start": "610440",
    "end": "611880"
  },
  {
    "text": "um the takeaways here I think are Doma",
    "start": "611880",
    "end": "614519"
  },
  {
    "text": "is a good way to avoid some of the",
    "start": "614519",
    "end": "616019"
  },
  {
    "text": "complexity of microservices and avoid",
    "start": "616019",
    "end": "619260"
  },
  {
    "text": "some of the pitfalls",
    "start": "619260",
    "end": "620820"
  },
  {
    "text": "and Kuma is a great service mesh that um",
    "start": "620820",
    "end": "625200"
  },
  {
    "text": "is uh a great way to add an",
    "start": "625200",
    "end": "627779"
  },
  {
    "text": "infrastructure layer for uh that",
    "start": "627779",
    "end": "630660"
  },
  {
    "text": "implements the Domo architecture",
    "start": "630660",
    "end": "634500"
  },
  {
    "text": "thank you",
    "start": "634500",
    "end": "637060"
  },
  {
    "text": "[Applause]",
    "start": "637060",
    "end": "640310"
  }
]