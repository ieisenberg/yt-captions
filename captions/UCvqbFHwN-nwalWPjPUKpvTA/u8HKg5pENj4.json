[
  {
    "text": "hello everyone and then welcome to the last day of kubecon and thank you for",
    "start": "0",
    "end": "5339"
  },
  {
    "text": "coming um today we will we will talk about the next look for shell and then how can we",
    "start": "5339",
    "end": "12300"
  },
  {
    "text": "prepare for these CVS with the help of evpf so who is speaking today my name is",
    "start": "12300",
    "end": "19500"
  },
  {
    "text": "Natalie ivanko I'm a security product lead at ISO Island and here is with me",
    "start": "19500",
    "end": "24539"
  },
  {
    "text": "John who is a staff software engineer tetragon lead and then a Serial",
    "start": "24539",
    "end": "30000"
  },
  {
    "text": "maintainer at isovand so a little bit about the agenda so we",
    "start": "30000",
    "end": "37620"
  },
  {
    "text": "will start with a motivation like a quick recap like what is look for sure just in a one-on-one because I'm not a",
    "start": "37620",
    "end": "44160"
  },
  {
    "text": "Java developer so I cannot really go in very details and then we will see like",
    "start": "44160",
    "end": "49320"
  },
  {
    "text": "why ebpf would be the optimal solution to detect that we obviously an open",
    "start": "49320",
    "end": "54600"
  },
  {
    "text": "source tool um tetragon and then we will Deep dive into how this solution would pick up",
    "start": "54600",
    "end": "61800"
  },
  {
    "text": "lock for shell and then we wish you a demo and then I will finish with some",
    "start": "61800",
    "end": "67260"
  },
  {
    "text": "further detection and then prevention techniques like how could we do detect the next log for sure because there will",
    "start": "67260",
    "end": "74640"
  },
  {
    "text": "be many more coming so let's start with a quick one of them",
    "start": "74640",
    "end": "80100"
  },
  {
    "text": "so what is lock for Shell it's actually a vulnerability in a Java logging",
    "start": "80100",
    "end": "85979"
  },
  {
    "text": "Library which is licensed by apache2 and then it allows remote code execution so",
    "start": "85979",
    "end": "91740"
  },
  {
    "text": "basically the attacker who could control the log messages that are going into an",
    "start": "91740",
    "end": "96900"
  },
  {
    "text": "application and then is vulnerable um the attacker would be able to execute",
    "start": "96900",
    "end": "103340"
  },
  {
    "text": "arbitrarily code loaded and then of course it affects wide range of products servers and vendors",
    "start": "103340",
    "end": "111119"
  },
  {
    "text": "so why is it happening uh why this vulnerability actually exists so it's",
    "start": "111119",
    "end": "116640"
  },
  {
    "text": "actually due to three features bugs whatever you want to call it and then",
    "start": "116640",
    "end": "121740"
  },
  {
    "text": "two of them is in actual log forgery and then the third is actually a Java feature so the first one is",
    "start": "121740",
    "end": "129599"
  },
  {
    "text": "um the look for JL Library allows you to log messages from sources that you",
    "start": "129599",
    "end": "134640"
  },
  {
    "text": "actually don't control so for example if you're receiving data in your application it allows you to look for",
    "start": "134640",
    "end": "140940"
  },
  {
    "text": "example usernames passwords or error codes return codes and so on",
    "start": "140940",
    "end": "146819"
  },
  {
    "text": "the second one is it also allows you to lock for example environment variables",
    "start": "146819",
    "end": "152040"
  },
  {
    "text": "so if you do like dollar sign curly based Java version curly base it will of course log the Java version you could do",
    "start": "152040",
    "end": "159180"
  },
  {
    "text": "for example OS version and then it would actually log the OS version",
    "start": "159180",
    "end": "164340"
  },
  {
    "text": "and normally what's interesting that it allows you to do that recursively so if",
    "start": "164340",
    "end": "169680"
  },
  {
    "text": "the Java version actually that string contains under a dollar sign current base something something cannabis it",
    "start": "169680",
    "end": "176580"
  },
  {
    "text": "will actually resolve that analog that as well and then the third one did the gnd",
    "start": "176580",
    "end": "184319"
  },
  {
    "text": "feature it's actually a Java feature so what it does it allows you to look up",
    "start": "184319",
    "end": "189540"
  },
  {
    "text": "information on other servers so for example you could do like DNS lookups",
    "start": "189540",
    "end": "194640"
  },
  {
    "text": "you could do like add up lookups and then you can actually put like an ldap server address and then basically what",
    "start": "194640",
    "end": "201780"
  },
  {
    "text": "look for JVL do it will connect to that server look up that information basically return back and then basically",
    "start": "201780",
    "end": "208319"
  },
  {
    "text": "logged uh what was looked up and then what's interesting that you can",
    "start": "208319",
    "end": "213599"
  },
  {
    "text": "actually return with a Java object so for example if that information on the adap server was actually a Java object",
    "start": "213599",
    "end": "220260"
  },
  {
    "text": "basically look for JVL return with a job object and then it will happily run",
    "start": "220260",
    "end": "227040"
  },
  {
    "text": "so for example if I'm like a crafty individual I can like set up my ldap",
    "start": "227040",
    "end": "232860"
  },
  {
    "text": "server put my Java object finder and then send that string to a vulnerable",
    "start": "232860",
    "end": "239040"
  },
  {
    "text": "log4j application so what would happen then so let's say",
    "start": "239040",
    "end": "245519"
  },
  {
    "text": "I'm an attacker I figured out that there is like vulnerable web application which is exposed to the internet it has a",
    "start": "245519",
    "end": "252720"
  },
  {
    "text": "static IP it's exposed by a load balancer and then it's running a lot of vulnerable log 4G version",
    "start": "252720",
    "end": "259680"
  },
  {
    "text": "let's say I set up my ldap server put my malicious Java cluster and then I also",
    "start": "259680",
    "end": "265320"
  },
  {
    "text": "have another server with a netcut listener so let's say I send the malicious string",
    "start": "265320",
    "end": "272460"
  },
  {
    "text": "um to that word above application so what look for G will do it will pass",
    "start": "272460",
    "end": "277919"
  },
  {
    "text": "that string a reserve the IP address and contact to the idab server",
    "start": "277919",
    "end": "283680"
  },
  {
    "text": "and then it will of course return and then if I put a measures Java cluster it",
    "start": "283680",
    "end": "288720"
  },
  {
    "text": "will actually return with the Java class um develop application with block 4G of",
    "start": "288720",
    "end": "294720"
  },
  {
    "text": "course will execute the Java class and then basically run the code that I",
    "start": "294720",
    "end": "300419"
  },
  {
    "text": "actually put in the Java classifier and then for example if it was a reverse it",
    "start": "300419",
    "end": "305460"
  },
  {
    "text": "will of course conduct to my other machine and around that reverse and then basically after that I can do basically",
    "start": "305460",
    "end": "312540"
  },
  {
    "text": "whatever I want so why is it so powerful so it's like",
    "start": "312540",
    "end": "318720"
  },
  {
    "text": "very easy to exploit like you can just pass that string um to an application with your domain",
    "start": "318720",
    "end": "325199"
  },
  {
    "text": "that you actually set up and then basically uh you can run like arbitrary code",
    "start": "325199",
    "end": "330720"
  },
  {
    "text": "so I'm not a Java developer but when I was talking to my friends it's basically almost everywhere so if you are using",
    "start": "330720",
    "end": "336900"
  },
  {
    "text": "Java probably um you are going to use that login Library and then yeah let me know if I missed",
    "start": "336900",
    "end": "343080"
  },
  {
    "text": "anything so what can detection and a response",
    "start": "343080",
    "end": "348240"
  },
  {
    "text": "team can do like in this case or for example security teams of course they",
    "start": "348240",
    "end": "353400"
  },
  {
    "text": "would need to identify and then patch these systems but it will take a very",
    "start": "353400",
    "end": "358860"
  },
  {
    "text": "long time and then until that patching is completed",
    "start": "358860",
    "end": "364259"
  },
  {
    "text": "um they would need to answer questions like how can we detect that actually the software is unpatched or for example if",
    "start": "364259",
    "end": "371880"
  },
  {
    "text": "it's on patched like how can we make sure that our kubernetes workloads and",
    "start": "371880",
    "end": "377039"
  },
  {
    "text": "then servers are running safe and then if they are not safe like how can we detect if we have been compromised",
    "start": "377039",
    "end": "385139"
  },
  {
    "text": "so to be able to do that we would need like a low overhead and reality time solution which would provide",
    "start": "385139",
    "end": "391380"
  },
  {
    "text": "observability into occupantis workloads and then it needs to be dynamic",
    "start": "391380",
    "end": "397740"
  },
  {
    "text": "so that's where basically ebpf comes into the picture",
    "start": "397740",
    "end": "403460"
  },
  {
    "text": "great hi good morning so I have about 10 or 15 minutes and I'm going to try to",
    "start": "403500",
    "end": "408840"
  },
  {
    "text": "convince you that BPF is the right technology for this problem",
    "start": "408840",
    "end": "414360"
  },
  {
    "text": "um and then hopefully I can convince you of that here very quickly and then we'll",
    "start": "414360",
    "end": "419759"
  },
  {
    "text": "look about how to build up the right infrastructure to detect these",
    "start": "419759",
    "end": "425280"
  },
  {
    "text": "kinds of cves in your cluster all right so first I guess if you don't know what BPF is there's been a few talks about it",
    "start": "425280",
    "end": "432180"
  },
  {
    "text": "but I'd give you this like the quick high level overview right what does it",
    "start": "432180",
    "end": "437520"
  },
  {
    "text": "do primarily we can extend the Linux kernel right so previously before we had BPF if you were a kernel developer like",
    "start": "437520",
    "end": "443940"
  },
  {
    "text": "myself what you had to do is write some kernel code submit it to the kernel Community get that patch in and then you",
    "start": "443940",
    "end": "449940"
  },
  {
    "text": "had to wait a long time right because that code has",
    "start": "449940",
    "end": "454979"
  },
  {
    "text": "to get upstream and then it has to get into the vendor and then your vendor might take a couple years and then by",
    "start": "454979",
    "end": "460620"
  },
  {
    "text": "the time your patch is there doing the stuff you want to do it's unlikely many people care anymore and you might be off",
    "start": "460620",
    "end": "467400"
  },
  {
    "text": "doing something else so vpf gives you that ability to write some C code it has some restraints of course because it",
    "start": "467400",
    "end": "473460"
  },
  {
    "text": "needs to be safe when it's put into the kernel the kernel can't crash or can't run your code forever and forget about",
    "start": "473460",
    "end": "479460"
  },
  {
    "text": "the rest of the jobs that are on the scheduler and so on but that the BPF core will ensure those properties for",
    "start": "479460",
    "end": "485940"
  },
  {
    "text": "you you write your little C program and you load it into the kernel and you",
    "start": "485940",
    "end": "491340"
  },
  {
    "text": "basically extended the kernel at this point what's nice is you can hook almost anywhere in the kernel",
    "start": "491340",
    "end": "497720"
  },
  {
    "text": "most functions in the kernel can be hooked if you're in the networking space we have some performant hooks if you're",
    "start": "497720",
    "end": "504000"
  },
  {
    "text": "in the security space we have some LSM hooks which are security hooks that sort of well-known security checkpoints in",
    "start": "504000",
    "end": "510300"
  },
  {
    "text": "the kernel so that's BPF in a nutshell the other two nice properties for this",
    "start": "510300",
    "end": "515760"
  },
  {
    "text": "particular problem that we're looking at are it's minimally invasive meaning it's",
    "start": "515760",
    "end": "521099"
  },
  {
    "text": "barely performant right it's about basically taking an extra function call when you're in the kernel right and so you can imagine like the TCP stack with",
    "start": "521099",
    "end": "527580"
  },
  {
    "text": "everything it's doing one extra function call is going to be minimally noticeable and then the other thing is it's Dynamic",
    "start": "527580",
    "end": "533760"
  },
  {
    "text": "and this is quite useful when you have big clusters mini clusters maybe maybe you have 10 000 plus nodes and you want",
    "start": "533760",
    "end": "540360"
  },
  {
    "text": "to roll out an update to your BPF program to recognize a new cve so you can do this and then you can swap",
    "start": "540360",
    "end": "547920"
  },
  {
    "text": "the BPF programs on the fly without having to reboot your nodes sometimes without even having to restart any pod",
    "start": "547920",
    "end": "553800"
  },
  {
    "text": "your sort of management pod and definitely without having to restart the pods that are your workloads right so everything keeps running and you have a",
    "start": "553800",
    "end": "560760"
  },
  {
    "text": "seamless sort of update okay so that's my BPF pitch what are some questions that our",
    "start": "560760",
    "end": "567120"
  },
  {
    "text": "observability platform would like to ask right so we can say what binaries are",
    "start": "567120",
    "end": "572640"
  },
  {
    "text": "running in our system and your system in this context can be your kubernetes cluster your virtual machines your bare",
    "start": "572640",
    "end": "579000"
  },
  {
    "text": "metal if you're building up this observability platform you want to know everything that's run in that cluster",
    "start": "579000",
    "end": "585540"
  },
  {
    "text": "right this will let you know if things are being run that aren't expected you want to know what versions are being run",
    "start": "585540",
    "end": "591060"
  },
  {
    "text": "right and not just the versions of the binaries you want to know the versions of the libraries too right because we know",
    "start": "591060",
    "end": "596459"
  },
  {
    "text": "um an old uh like a Docker I'm sorry kubernetes pod or something might be",
    "start": "596459",
    "end": "601740"
  },
  {
    "text": "linking against an old version of openssl I want to know that I want to make sure that my libraries are patched and up to",
    "start": "601740",
    "end": "607980"
  },
  {
    "text": "date I want to know all the network connections right imagine a pod spins up it's running happily for",
    "start": "607980",
    "end": "615720"
  },
  {
    "text": "I don't know an hour or two and then all of a sudden it starts doing a remote connection I'll do some S3 buckets or something",
    "start": "615720",
    "end": "621240"
  },
  {
    "text": "right you might want to know that it sounds a little suspicious um",
    "start": "621240",
    "end": "626700"
  },
  {
    "text": "TLS compliance is another big one that we see a lot I want to know all the TLs if TLS is being used if ipsec is being",
    "start": "626700",
    "end": "633660"
  },
  {
    "text": "used wire guard whatever I want to get those encryption policies in place and I want to make sure I can observe them at runtime and make some guarantees so",
    "start": "633660",
    "end": "640860"
  },
  {
    "text": "here's a list of things and of course if you're someone who writes this software you're going to customers will probably",
    "start": "640860",
    "end": "646320"
  },
  {
    "text": "tell you I want to do it in real time or close to real time with microseconds and millisecond time bounds I don't want you",
    "start": "646320",
    "end": "652200"
  },
  {
    "text": "to use very much CPU and I really don't like you to use a whole lot of memory either you know",
    "start": "652200",
    "end": "658860"
  },
  {
    "text": "um of course if you're running a cluster then you're on the other end of that and you're telling folks like me please",
    "start": "658860",
    "end": "664620"
  },
  {
    "text": "don't use too much CPU please don't use too much memory and um please feed my pipeline in close to",
    "start": "664620",
    "end": "671040"
  },
  {
    "text": "real time so we have these constraints and a bunch of questions we'd like to ask um due to limited time you know we're",
    "start": "671040",
    "end": "677760"
  },
  {
    "text": "not going to go through every one of these so I highlighted a few like we're going to walk through that then Natalia",
    "start": "677760",
    "end": "683339"
  },
  {
    "text": "will be able to show you in the demo here namely what's running what libraries are included what network",
    "start": "683339",
    "end": "688680"
  },
  {
    "text": "connections we're doing and any file access read write open this gives us a good sort of",
    "start": "688680",
    "end": "694620"
  },
  {
    "text": "Baseline framework to build an observability platform",
    "start": "694620",
    "end": "698839"
  },
  {
    "text": "we're going to base this off a tetragon tetragon is under the psyllium umbrella of projects it's the runtime",
    "start": "700279",
    "end": "706079"
  },
  {
    "text": "observability and security piece I'm the maintainer one of the maintainers at least there's a whole bunch of people",
    "start": "706079",
    "end": "711120"
  },
  {
    "text": "that work on this a few of them at I surveillance a few of them not at isovalent it's an open source project if",
    "start": "711120",
    "end": "716880"
  },
  {
    "text": "you go to a GitHub cilium it'll be under that umbrella basically what it does is",
    "start": "716880",
    "end": "723180"
  },
  {
    "text": "it gives you a framework to start hooking into the kernel at all these various access points and then it gives",
    "start": "723180",
    "end": "728700"
  },
  {
    "text": "you a mechanism to pull those out of the kernel once they've been filtered in the kernel which is important because you're going",
    "start": "728700",
    "end": "734700"
  },
  {
    "text": "to see in a couple minutes that you could get a lot of data out of the kernel here if you wanted to um and then also aggregate it so that we",
    "start": "734700",
    "end": "740760"
  },
  {
    "text": "get sort of smart metrics we're not just dumping everything that the kernel ever does up to user space we're collecting",
    "start": "740760",
    "end": "746700"
  },
  {
    "text": "um kind of heuristics histograms stats about the kernel and then exporting what",
    "start": "746700",
    "end": "751920"
  },
  {
    "text": "we want that's useful for us out to the agent and then the agent then can",
    "start": "751920",
    "end": "757260"
  },
  {
    "text": "interact with the world so you have Prometheus metrics logs Json logs grpc a",
    "start": "757260",
    "end": "763200"
  },
  {
    "text": "whole series of ways you can get this data off the system depending on what sort of back end Sim you're running",
    "start": "763200",
    "end": "768480"
  },
  {
    "text": "so let's dive in first thing we want to have some executables tracing I want to see every process that runs in the",
    "start": "768480",
    "end": "774240"
  },
  {
    "text": "system tetragon provides that it'll throw up a Json event when something gets executed",
    "start": "774240",
    "end": "780440"
  },
  {
    "text": "what you can see on the right there is some sort of a mock-up of what you might build from this you know an execution",
    "start": "780440",
    "end": "785880"
  },
  {
    "text": "tree you see Java we see a lot of java applications and they're sort of interesting in the ways that they",
    "start": "785880",
    "end": "791040"
  },
  {
    "text": "execute lots of children and how jvm works and stuff so you want to trace all of that and you can see on the left is",
    "start": "791040",
    "end": "796860"
  },
  {
    "text": "basically an example of what a Json output might include I sort of slim this down tetragon has the ability to sort of",
    "start": "796860",
    "end": "803639"
  },
  {
    "text": "blow that structure up or Shrink It Down based on what information you're using in this case an exec ID is interesting",
    "start": "803639",
    "end": "810420"
  },
  {
    "text": "because it gives you a unique ID for an executable in a system right so anywhere in my cluster I want to have a unique ID",
    "start": "810420",
    "end": "816600"
  },
  {
    "text": "for that ex that specific executable um you might have a shot 256.",
    "start": "816600",
    "end": "822240"
  },
  {
    "text": "you know binary names are not particularly secure it's quite nice to say this is the digest of this binary",
    "start": "822240",
    "end": "828000"
  },
  {
    "text": "that executed um PID CW you see a lot of useful things in Linux here there's a bunch of pod",
    "start": "828000",
    "end": "834360"
  },
  {
    "text": "information that you can include the container the runtime the name space all of your normal kubernetes metadata and",
    "start": "834360",
    "end": "840660"
  },
  {
    "text": "sort of interesting from this talk for this talk is you also have the time timestamp so you you can then push this",
    "start": "840660",
    "end": "846600"
  },
  {
    "text": "into a database and now you have what executed a unique ID for it in a time",
    "start": "846600",
    "end": "852120"
  },
  {
    "text": "which allows you to build a Time slice time series database right and so you can go back and forth in time and say",
    "start": "852120",
    "end": "857880"
  },
  {
    "text": "what executed a month ago what executed five minutes ago you can do sort of more complex things like diffing the two I",
    "start": "857880",
    "end": "864839"
  },
  {
    "text": "want to see what my pod ran yesterday I want to see what my pod ran today uh maybe that's the empty set or maybe",
    "start": "864839",
    "end": "871980"
  },
  {
    "text": "there's some extra stuff in there that you should be paying attention to okay um on the this the Little Flower picture",
    "start": "871980",
    "end": "878220"
  },
  {
    "text": "here um is just taking that mock-up pulling in some real data from one of our test clusters and and kind of",
    "start": "878220",
    "end": "884940"
  },
  {
    "text": "zooming out and basically what you see is you know every executable in our cluster on a graph it looks good",
    "start": "884940",
    "end": "892260"
  },
  {
    "text": "um if you were to zoom in and each one of those you would each one of those clusters is actually a pod because you",
    "start": "892260",
    "end": "898139"
  },
  {
    "text": "can see how you can imagine pod executables are all related to each other and you can see their names and",
    "start": "898139",
    "end": "903480"
  },
  {
    "text": "all their stuff in there if you were to click on them um it's a fun a fun picture for a talk",
    "start": "903480",
    "end": "910320"
  },
  {
    "text": "um the next thing here so we have executable traces now um and I have five minutes so that's",
    "start": "910320",
    "end": "916079"
  },
  {
    "text": "good let's go with the next thing we want to know about libraries right I want to know what I'm pulling in and so",
    "start": "916079",
    "end": "921480"
  },
  {
    "text": "here's an example again you say you get the exec ID which gives you back to the",
    "start": "921480",
    "end": "926699"
  },
  {
    "text": "original Parent of the pro or sorry the original process right and you can say this process",
    "start": "926699",
    "end": "933000"
  },
  {
    "text": "has these libraries associated with it I know by the shaw that this library is one of my good libraries I know by the",
    "start": "933000",
    "end": "940139"
  },
  {
    "text": "shot that this is one of my unpatched libraries again it's a time stamp so I can go forward and backwards in time and",
    "start": "940139",
    "end": "945540"
  },
  {
    "text": "say is this Library patched is this Library not patched I know this is the digest of my patch Library I know this",
    "start": "945540",
    "end": "952079"
  },
  {
    "text": "is the digest of my unpatched library let me go and look for my look in my runtime",
    "start": "952079",
    "end": "957480"
  },
  {
    "text": "and see if I have anything running that is using an unpatched library right",
    "start": "957480",
    "end": "964339"
  },
  {
    "text": "and when we think about how we pull this data out right so that's just the raw the last slide was the Json we look at",
    "start": "966720",
    "end": "974100"
  },
  {
    "text": "how we pull that out there's a couple ways to do that you can put it in a database you can do queries over it SQL",
    "start": "974100",
    "end": "979620"
  },
  {
    "text": "queries the bottom is an example of a Splunk query if you've kind of done",
    "start": "979620",
    "end": "985199"
  },
  {
    "text": "Splunk before this should look familiar you're giving yourself fields and names since doing a query over a database if",
    "start": "985199",
    "end": "991139"
  },
  {
    "text": "database if you don't want to store so much data we can compress that down and that's what the metrics are at the top",
    "start": "991139",
    "end": "996180"
  },
  {
    "text": "right it's just the binary name and the namespace in this particular example that was",
    "start": "996180",
    "end": "1001880"
  },
  {
    "text": "something that was running on the host so it doesn't have a pod but if it was running in a pod it would pod name and",
    "start": "1001880",
    "end": "1007339"
  },
  {
    "text": "namespace would be there um so we think about this now we have",
    "start": "1007339",
    "end": "1012920"
  },
  {
    "text": "everything that's executed we have all the libraries we have a good sense of what our network is doing the next the",
    "start": "1012920",
    "end": "1018980"
  },
  {
    "text": "next thing to sort of ask in this context is what are we connecting to right like what are the network",
    "start": "1018980",
    "end": "1024798"
  },
  {
    "text": "connections in the system and um that's what the network connectivity observability does and we can monitor",
    "start": "1024799",
    "end": "1031100"
  },
  {
    "text": "connects listens and accepts what's interesting about this from from a tetragon standpoint versus I say a",
    "start": "1031100",
    "end": "1037819"
  },
  {
    "text": "middle box or something running in the actual networking data path is it's done at the socket level so we see sockets",
    "start": "1037819",
    "end": "1045140"
  },
  {
    "text": "and we're not intercepting packets um that has some advantages especially when you think about listening",
    "start": "1045140",
    "end": "1051140"
  },
  {
    "text": "um sockets you can imagine something opens a listening Port if you're in the actual data path you wouldn't know about",
    "start": "1051140",
    "end": "1056480"
  },
  {
    "text": "that until it actually packet was received or since right with something like tetragon where you're monitoring the runtime at the socket level you can",
    "start": "1056480",
    "end": "1063799"
  },
  {
    "text": "say just give me a list of everything that's listening to my cluster right and maybe um maybe that that thing",
    "start": "1063799",
    "end": "1069919"
  },
  {
    "text": "that's listening hasn't actually even been talked to yet right so there's no actual data on the thing there's just a socket in your system",
    "start": "1069919",
    "end": "1076720"
  },
  {
    "text": "and the last next piece here we have is um file Integrity monitoring we call it",
    "start": "1077080",
    "end": "1082940"
  },
  {
    "text": "fem this is the idea that now I know executables I know my libraries I know my network connections next thing I want",
    "start": "1082940",
    "end": "1089539"
  },
  {
    "text": "to know is my files you know what am I opening what am I reading what am I writing this one is particularly",
    "start": "1089539",
    "end": "1094940"
  },
  {
    "text": "interesting because when you build the system and maybe your first attempt at this would be let me just monitor all of",
    "start": "1094940",
    "end": "1101059"
  },
  {
    "text": "the CIS open sys rights it's just reads or something like this and you'll quickly realize that a Linux system",
    "start": "1101059",
    "end": "1107720"
  },
  {
    "text": "does a lot of stuff with files right everything is a file open close read",
    "start": "1107720",
    "end": "1112880"
  },
  {
    "text": "write and you'll very quickly spam your your back end most likely depending on what you have in that pipeline but your",
    "start": "1112880",
    "end": "1119120"
  },
  {
    "text": "sim was going to get a lot of file data so one of the nice things about tetragon",
    "start": "1119120",
    "end": "1124160"
  },
  {
    "text": "then is you can build these filters in which you see here on the bottom there's a lot of different ways to do those we",
    "start": "1124160",
    "end": "1130940"
  },
  {
    "text": "have equality tests substrings and so on but the basic idea is you can say I want to only monitor files in this directory",
    "start": "1130940",
    "end": "1138080"
  },
  {
    "text": "or I want to monitor just a specific file and for a specific operation maybe just write I don't care if you read it",
    "start": "1138080",
    "end": "1145340"
  },
  {
    "text": "Etsy password for example is as maybe an example of this where lots and lots of stuff will read Etsy password right",
    "start": "1145340",
    "end": "1151700"
  },
  {
    "text": "probably very few things should be writing to Etsy password you know SSH keys are another example",
    "start": "1151700",
    "end": "1157400"
  },
  {
    "text": "right if you um if your pods are writing to SSH keys maybe that's not expected host file",
    "start": "1157400",
    "end": "1163940"
  },
  {
    "text": "system for example is another one on the Pod maybe it's okay to read the host file system but you probably don't want your pods to be writing to those file",
    "start": "1163940",
    "end": "1170600"
  },
  {
    "text": "system and those are the kind of policies you can put in tetragon that then get loaded down into the kernel so",
    "start": "1170600",
    "end": "1176240"
  },
  {
    "text": "that we get this low overhead property right and we also use less memory in the",
    "start": "1176240",
    "end": "1181580"
  },
  {
    "text": "data stream because we're compressing only two events that you really really care about",
    "start": "1181580",
    "end": "1187059"
  },
  {
    "text": "um finally the kind of the last piece I want to mention is we can enforce things in tetragon this allows you to say I",
    "start": "1188480",
    "end": "1194179"
  },
  {
    "text": "want to um when I see this particular event maybe it's that right to Etsy password I wanna stop the action kill",
    "start": "1194179",
    "end": "1200840"
  },
  {
    "text": "the process and freeze the pawn this allows an operator to come back later and um figure it out and the key for",
    "start": "1200840",
    "end": "1208640"
  },
  {
    "text": "tetrachon's point of view is that it's done in line with the kernel so the event happens while the call is being",
    "start": "1208640",
    "end": "1214460"
  },
  {
    "text": "made into the kernel we block that call and stop it from running in the kernel and then go back and do the action this",
    "start": "1214460",
    "end": "1220400"
  },
  {
    "text": "way um versus a model where we just generate the event and we're to do it from user space you know if you're right to Etsy",
    "start": "1220400",
    "end": "1226700"
  },
  {
    "text": "password we want to make sure that that write doesn't actually happen versus sort of an async system system where it",
    "start": "1226700",
    "end": "1232700"
  },
  {
    "text": "would you would see the the right could happen and then you could stop the pod which would be kind of after the action happened",
    "start": "1232700",
    "end": "1239799"
  },
  {
    "text": "um just to go back to sort of a little bit performance this is a benchmark that we have in the in the repo so you can",
    "start": "1240020",
    "end": "1245240"
  },
  {
    "text": "run it if you'd like um the time doesn't particularly matter but basically what we're showing is that let's compile the",
    "start": "1245240",
    "end": "1250700"
  },
  {
    "text": "kernel a whole bunch which is interesting as a stress test because you're going to create a lot of open and close a lot of files you're going to",
    "start": "1250700",
    "end": "1256400"
  },
  {
    "text": "execute a lot of things and basically what you can see there is for for um if you do proper the top one is just",
    "start": "1256400",
    "end": "1263660"
  },
  {
    "text": "the base system doing all the library loads and executables you can see very you know less than five percent overhead",
    "start": "1263660",
    "end": "1269140"
  },
  {
    "text": "if you do a syscall monitoring less than 10 overhead and that 23 is what I said",
    "start": "1269140",
    "end": "1275419"
  },
  {
    "text": "you probably don't want to do that's what a good example of something that may not be good is if you monitor every",
    "start": "1275419",
    "end": "1280640"
  },
  {
    "text": "file read and write in a system so that's sort of like the worst case thing we don't actually use that policy in",
    "start": "1280640",
    "end": "1286280"
  },
  {
    "text": "production but it it sort of highlights the need to do in kernel filtering and",
    "start": "1286280",
    "end": "1291860"
  },
  {
    "text": "kernel aggregation okay so these are the things we've talked about",
    "start": "1291860",
    "end": "1296960"
  },
  {
    "text": "right here I'm not going to go through them again but it's a nice summary and then Natalia is going to walk you",
    "start": "1296960",
    "end": "1302840"
  },
  {
    "text": "through this workload flow here determine if we've been exploited and use tetragon to to detect that",
    "start": "1302840",
    "end": "1311260"
  },
  {
    "text": "cool so let's dive into a quick demo I will be very good because we don't have",
    "start": "1311260",
    "end": "1316820"
  },
  {
    "text": "so much time so for like a test environment I'm going to use like a GK cluster very easy it",
    "start": "1316820",
    "end": "1323000"
  },
  {
    "text": "has one node it's Ubuntu on 22041 at yes it's running of 515 kernel",
    "start": "1323000",
    "end": "1329780"
  },
  {
    "text": "version on that road tetragon is running running actually as a demon set and I",
    "start": "1329780",
    "end": "1335900"
  },
  {
    "text": "have the vulnerable web application as a pod like jaguar Baba pod and then it's",
    "start": "1335900",
    "end": "1341419"
  },
  {
    "text": "running on the Tenon jobs namespace so I also have the ldap server where I put the Mauritius Java class file and The",
    "start": "1341419",
    "end": "1348140"
  },
  {
    "text": "netcat Listener on that same node so what we will see we will see um the",
    "start": "1348140",
    "end": "1353419"
  },
  {
    "text": "exploitation of the web application so I'm just going to send other crafted string and then basically look for",
    "start": "1353419",
    "end": "1359659"
  },
  {
    "text": "jv.parts that and then um the Java classifier will execute actually a reversial that the netcat listener is",
    "start": "1359659",
    "end": "1366500"
  },
  {
    "text": "going to pick up and then from the Traverse I'm just trying to list some environment variables and the read sensitive files",
    "start": "1366500",
    "end": "1374900"
  },
  {
    "text": "so this is how it looks like um tetragon can run of course in a multiple node cluster right now I'm just",
    "start": "1374900",
    "end": "1380840"
  },
  {
    "text": "using like one node and then it's running as a demon set and then as we",
    "start": "1380840",
    "end": "1386120"
  },
  {
    "text": "mentioned we are observing like a process execution network connections and then sensitive files",
    "start": "1386120",
    "end": "1392900"
  },
  {
    "text": "so all these events are actually exported like other Json events and then it contains for example kubernetes",
    "start": "1392900",
    "end": "1399260"
  },
  {
    "text": "identity over metadata the process visibility information network connection information DNS of our",
    "start": "1399260",
    "end": "1406159"
  },
  {
    "text": "metadata and then for further investigation you could actually import that to a CM system like elasticsearch",
    "start": "1406159",
    "end": "1413720"
  },
  {
    "text": "sub Splunk or S3 for later invest incident investigation or for quick demos you can actually use our CLI which",
    "start": "1413720",
    "end": "1422600"
  },
  {
    "text": "actually parses these events so this is how it looks like I have the",
    "start": "1422600",
    "end": "1429080"
  },
  {
    "text": "Java pod on the 109 jobs namespace it has like an external IP that I that I",
    "start": "1429080",
    "end": "1435020"
  },
  {
    "text": "can open from the browser and then I have the adap server and then the netcat listener",
    "start": "1435020",
    "end": "1441440"
  },
  {
    "text": "so let me just switch to the terminal very quickly so I can actually",
    "start": "1441440",
    "end": "1448220"
  },
  {
    "text": "um see if the Java output is running",
    "start": "1448220",
    "end": "1453400"
  },
  {
    "text": "we see that it's up and running and then I can actually open it from the browser",
    "start": "1457419",
    "end": "1462740"
  },
  {
    "text": "so this is how it looks like and then this is on the bottom terminal and then I can actually set up the idap",
    "start": "1462740",
    "end": "1471020"
  },
  {
    "text": "server on the top um so let me just do that",
    "start": "1471020",
    "end": "1476860"
  },
  {
    "text": "so let's take a moment to appreciate like what's actually written here um here I actually set up the ldap",
    "start": "1480320",
    "end": "1486799"
  },
  {
    "text": "server and then I created the malicious Java class file and then I put that on",
    "start": "1486799",
    "end": "1492140"
  },
  {
    "text": "the server and then it actually created a string that I actually can paste into the browser and then which will trigger",
    "start": "1492140",
    "end": "1498980"
  },
  {
    "text": "the exploit so I took this POC from a GitHub repository it it's Cosmetics PLC",
    "start": "1498980",
    "end": "1505760"
  },
  {
    "text": "very good for like testing purposes so let me just start the net cut",
    "start": "1505760",
    "end": "1511460"
  },
  {
    "text": "listener on The Middle and now let me just start to observe the",
    "start": "1511460",
    "end": "1518480"
  },
  {
    "text": "events from tetragon",
    "start": "1518480",
    "end": "1521799"
  },
  {
    "text": "all right um let me just um paste the string",
    "start": "1554000",
    "end": "1560799"
  },
  {
    "text": "foreign",
    "start": "1561140",
    "end": "1563320"
  },
  {
    "text": "click on login all right so what we can see here on the",
    "start": "1566960",
    "end": "1573980"
  },
  {
    "text": "top I clicked twice on the login so we will see the execution twice so it actually connected to the adap server we",
    "start": "1573980",
    "end": "1580820"
  },
  {
    "text": "can see that the execution was successful it returned with 200 we can see that the expert dot class was",
    "start": "1580820",
    "end": "1586640"
  },
  {
    "text": "actually downloaded we can see the connection that was received on The netcut Listener so this",
    "start": "1586640",
    "end": "1592520"
  },
  {
    "text": "is actually the reversia that was executed by the Java classifier and now let's take",
    "start": "1592520",
    "end": "1597980"
  },
  {
    "text": "a look at the data Dragon events so what we can see here is actually the",
    "start": "1597980",
    "end": "1604220"
  },
  {
    "text": "connective and we can actually see that there was a connection from the Java pod",
    "start": "1604220",
    "end": "1609620"
  },
  {
    "text": "only 10 on jobs namespace it reached out to the adap server and then what's interestingly on the close event we",
    "start": "1609620",
    "end": "1616880"
  },
  {
    "text": "actually do statistics so we can see that there was one 1600",
    "start": "1616880",
    "end": "1622340"
  },
  {
    "text": "bytes downloaded which is actually on the Java class file we can also see the",
    "start": "1622340",
    "end": "1628340"
  },
  {
    "text": "kubernetes identity over information so we have an idea like where this external",
    "start": "1628340",
    "end": "1633620"
  },
  {
    "text": "connection was coming from and then what's also interesting this is the Bina Sage the reverse the Israel",
    "start": "1633620",
    "end": "1640460"
  },
  {
    "text": "execution um so we could pick that up as well so let me just list some environment",
    "start": "1640460",
    "end": "1646039"
  },
  {
    "text": "variables so we can actually see that we are inside the Java pod and then we can see the process execution as well as the",
    "start": "1646039",
    "end": "1653600"
  },
  {
    "text": "exit event and I can just read like Etsy password as an example",
    "start": "1653600",
    "end": "1659779"
  },
  {
    "text": "and then we could say for example that there was an execution event and then a zaxi exit event and an open and close",
    "start": "1659779",
    "end": "1667460"
  },
  {
    "text": "event on Etsy password all right",
    "start": "1667460",
    "end": "1674000"
  },
  {
    "text": "um let me just go back",
    "start": "1674000",
    "end": "1679240"
  },
  {
    "text": "great so how for example a security team could use that like in like in area",
    "start": "1680000",
    "end": "1687080"
  },
  {
    "text": "about scenario so you could export those Json events into a CM system and then",
    "start": "1687080",
    "end": "1692419"
  },
  {
    "text": "you could create signatures for example late process execution so you would know for example like no external connection",
    "start": "1692419",
    "end": "1701299"
  },
  {
    "text": "um should have reached out from the Java application five minutes after the container has started that's super",
    "start": "1701299",
    "end": "1706760"
  },
  {
    "text": "amazing or for example there should be never there should be no shell execution",
    "start": "1706760",
    "end": "1712059"
  },
  {
    "text": "or that job application should have never shout out five minutes after the container started",
    "start": "1712059",
    "end": "1718400"
  },
  {
    "text": "so two quick examples I have a short dashboard later on so this is for example a Splunk signature for late",
    "start": "1718400",
    "end": "1725120"
  },
  {
    "text": "process execution so this would pick that for example the external reach out from the Java application and actually",
    "start": "1725120",
    "end": "1732020"
  },
  {
    "text": "the shell as well and then this is the Splunk query for Shell execution",
    "start": "1732020",
    "end": "1737840"
  },
  {
    "text": "um this would for example wake up like measures keep catalog SEC so for example if you have a workload and then you keep",
    "start": "1737840",
    "end": "1743539"
  },
  {
    "text": "catalog second date or someone asking your team that's also something that we should consider",
    "start": "1743539",
    "end": "1750679"
  },
  {
    "text": "all right so I actually I prepared a a dashboard so what we can see here on",
    "start": "1750679",
    "end": "1757039"
  },
  {
    "text": "the top like um there is a Java pop-up container started and then five minutes later there was just like um external reach",
    "start": "1757039",
    "end": "1764480"
  },
  {
    "text": "out which downloaded 1000 and um 600 bytes and then if we take a look",
    "start": "1764480",
    "end": "1770480"
  },
  {
    "text": "at and start to investigate we see like okay this was the Java pod from the talent jobs namespace and then we can",
    "start": "1770480",
    "end": "1778159"
  },
  {
    "text": "see like okay it was the GRE bin Java binary as a parent process and then we",
    "start": "1778159",
    "end": "1783260"
  },
  {
    "text": "can see that okay it's actually actually executed a show and then on the bottom you can actually",
    "start": "1783260",
    "end": "1788480"
  },
  {
    "text": "see like what other processes were executed by that child like okay there was an 8C password read and there was",
    "start": "1788480",
    "end": "1794899"
  },
  {
    "text": "for example of right or we can see like there was some listing to the existing directories",
    "start": "1794899",
    "end": "1802179"
  },
  {
    "text": "and then as a last step for like um prevention we should apply least",
    "start": "1805100",
    "end": "1811779"
  },
  {
    "text": "privileged principle for network connection um so all only the network connections",
    "start": "1811779",
    "end": "1817820"
  },
  {
    "text": "that your application needs and basically no more so for this uh we",
    "start": "1817820",
    "end": "1823460"
  },
  {
    "text": "would take advantage of the cerium Network policies and basically two features the first is the dns-based",
    "start": "1823460",
    "end": "1829580"
  },
  {
    "text": "policies which kind of allows traffic based on DNS names instead of like IPS",
    "start": "1829580",
    "end": "1834799"
  },
  {
    "text": "insiders so you can say like my application should communicate to only api.twitter.com and then nothing else",
    "start": "1834799",
    "end": "1841880"
  },
  {
    "text": "and then the second feature is basically deny policies it's also like a cilium Network basic feature which defines a",
    "start": "1841880",
    "end": "1849020"
  },
  {
    "text": "set of destinations that will be denied by allows that or network traffic and",
    "start": "1849020",
    "end": "1855559"
  },
  {
    "text": "then we can take advantage of the word concept which defines like host on the internet",
    "start": "1855559",
    "end": "1862240"
  },
  {
    "text": "so there is a quick example like how could we prevent this so the first",
    "start": "1862240",
    "end": "1868220"
  },
  {
    "text": "cilium Network places actually allows connections only to api.twitter.com and",
    "start": "1868220",
    "end": "1874460"
  },
  {
    "text": "then the second deny policy is actually on the nice connections to everything else",
    "start": "1874460",
    "end": "1881679"
  },
  {
    "text": "all right so we are still on time and wrapping up so what did we see today we",
    "start": "1882440",
    "end": "1888620"
  },
  {
    "text": "see like a very quick intro to look for Shell as a 101 we see like why ebpf",
    "start": "1888620",
    "end": "1894380"
  },
  {
    "text": "would be the optimal solution for it I think John covered it pretty clearly we saw a quick demo like how could we pick",
    "start": "1894380",
    "end": "1901760"
  },
  {
    "text": "that up with like an existing open source stores like tetragon on the NBC like for example further detection and",
    "start": "1901760",
    "end": "1908659"
  },
  {
    "text": "then prevention techniques like the late process execution or the shell execution in Splunk and then the prevention with",
    "start": "1908659",
    "end": "1916580"
  },
  {
    "text": "network policies yeah so if you're interested like how to contribute",
    "start": "1916580",
    "end": "1923240"
  },
  {
    "text": "yeah so go to the GitHub repository joins like",
    "start": "1923240",
    "end": "1928760"
  },
  {
    "text": "um use the tool report box create feature request audio use cases improved documentation",
    "start": "1928760",
    "end": "1937700"
  },
  {
    "text": "um yeah we have like a lot of work across the layers of the stack so it's",
    "start": "1937700",
    "end": "1943279"
  },
  {
    "text": "not only BPF code you can like contribute regarding to Google code kubernetes",
    "start": "1943279",
    "end": "1949059"
  },
  {
    "text": "documentation packaging and so on",
    "start": "1949059",
    "end": "1954940"
  },
  {
    "text": "um yeah and then we still have some time so I would open it for candy and yeah thank you for coming",
    "start": "1955159",
    "end": "1961450"
  },
  {
    "text": "[Applause]",
    "start": "1961450",
    "end": "1971399"
  },
  {
    "text": "I think there's a question in the front here if there's a mic anywhere hi thank you for your I think it's",
    "start": "1973340",
    "end": "1980480"
  },
  {
    "text": "working thank you for your presentation I have a question we have a couple of colleagues we are currently trying uh",
    "start": "1980480",
    "end": "1985820"
  },
  {
    "text": "Alpha feature of kubernetes which is called the snapshoting so you can basically snapshot uh",
    "start": "1985820",
    "end": "1992659"
  },
  {
    "text": "or you can take like a picture of the current state of your container you have the ram Etc here tetragon is more for",
    "start": "1992659",
    "end": "2001000"
  },
  {
    "text": "runtime can we imagine you stay Dragon for forensic analysis or postmodern polynomic analysis yeah so I think",
    "start": "2001000",
    "end": "2008080"
  },
  {
    "text": "there's a there's a couple efforts in this place that I that I know about um there's a group of folks that are",
    "start": "2008080",
    "end": "2013240"
  },
  {
    "text": "working on doing it and plugging it into like their GitHub actions where they run the Pod and they get a snapshot of like",
    "start": "2013240",
    "end": "2020500"
  },
  {
    "text": "events you want to to have so like you want to know what do I connect to what files open what executes so they",
    "start": "2020500",
    "end": "2026500"
  },
  {
    "text": "basically build a trace from that and once you have the trace um you can basically take that trace and",
    "start": "2026500",
    "end": "2033340"
  },
  {
    "text": "build a policy kind of automate a policy from that and then enforce it right so that that's one approach I know some",
    "start": "2033340",
    "end": "2038919"
  },
  {
    "text": "people are working on now um kind of in the s-bomb kind of space very similar to an s-bomb but then enforced",
    "start": "2038919",
    "end": "2045100"
  },
  {
    "text": "um and then there's a another idea that people are thinking about right now is",
    "start": "2045100",
    "end": "2050618"
  },
  {
    "text": "like if we publish well-known images like nginx or SQL or jaw you know",
    "start": "2050619",
    "end": "2056560"
  },
  {
    "text": "whatever pick your favorite thing um we could ship that with what we know it does right like some things we just",
    "start": "2056560",
    "end": "2062560"
  },
  {
    "text": "understand well enough to say these things are what execute because that's what we put in the entry point you know",
    "start": "2062560",
    "end": "2067839"
  },
  {
    "text": "and so you could build that policy just as part of the image and package them together and then when it gets deployed",
    "start": "2067839",
    "end": "2074138"
  },
  {
    "text": "you would automatically apply the policy behind it or probably in front of it actually so you don't have a race and",
    "start": "2074139",
    "end": "2079179"
  },
  {
    "text": "then you would get this kind of property that you're looking for sort of know an image along with known policy that",
    "start": "2079179",
    "end": "2084940"
  },
  {
    "text": "restricts it yeah good",
    "start": "2084940",
    "end": "2089980"
  },
  {
    "text": "is there another question thank you yeah perfect",
    "start": "2089980",
    "end": "2095580"
  },
  {
    "text": "I'm looking into the lights are there any other questions let me take a couple steps back I can see that",
    "start": "2096099",
    "end": "2102480"
  },
  {
    "text": "if not come find us I mean I will be around today um I'm either at the silliam booth or the I surveillance Booth",
    "start": "2103900",
    "end": "2110440"
  },
  {
    "text": "um or if you want to just come on up and chat with us for a little bit we'll be around for a little while",
    "start": "2110440",
    "end": "2116460"
  },
  {
    "text": "thank you yeah thanks a lot [Applause]",
    "start": "2116740",
    "end": "2121239"
  }
]