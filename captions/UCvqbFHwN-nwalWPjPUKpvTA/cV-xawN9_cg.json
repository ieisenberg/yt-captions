[
  {
    "start": "0",
    "end": "76000"
  },
  {
    "text": "hi everyone my name is alexander young",
    "start": "1599",
    "end": "3600"
  },
  {
    "text": "and i'm the cpo at unicraft and i'm also",
    "start": "3600",
    "end": "5759"
  },
  {
    "text": "a phd student at lancaster university",
    "start": "5759",
    "end": "7680"
  },
  {
    "text": "focusing primarily on lightweight",
    "start": "7680",
    "end": "9120"
  },
  {
    "text": "virtualization i'm very honored today to",
    "start": "9120",
    "end": "11280"
  },
  {
    "text": "be able to give you a presentation today",
    "start": "11280",
    "end": "12799"
  },
  {
    "text": "at kubecon on some of the work we've",
    "start": "12799",
    "end": "14320"
  },
  {
    "text": "been cooking up at unicroft this has",
    "start": "14320",
    "end": "16080"
  },
  {
    "text": "been an ongoing effort with the",
    "start": "16080",
    "end": "18160"
  },
  {
    "text": "university of lancaster university of",
    "start": "18160",
    "end": "19680"
  },
  {
    "text": "polytechnic bulcarest and nec labs",
    "start": "19680",
    "end": "21920"
  },
  {
    "text": "europe and today's talk it's all about",
    "start": "21920",
    "end": "24480"
  },
  {
    "text": "how we can introduce unikernels into the",
    "start": "24480",
    "end": "26720"
  },
  {
    "text": "ecosystem",
    "start": "26720",
    "end": "28880"
  },
  {
    "text": "but let's start with our premise",
    "start": "28880",
    "end": "30320"
  },
  {
    "text": "achieving higher cluster utilization",
    "start": "30320",
    "end": "32078"
  },
  {
    "text": "whilst maintaining performance and",
    "start": "32079",
    "end": "33440"
  },
  {
    "text": "security is fundamental to service",
    "start": "33440",
    "end": "35440"
  },
  {
    "text": "operators such as infrastructures or",
    "start": "35440",
    "end": "37040"
  },
  {
    "text": "service providers or devops engineers",
    "start": "37040",
    "end": "39360"
  },
  {
    "text": "who wish to decrease operational",
    "start": "39360",
    "end": "41040"
  },
  {
    "text": "expenditure",
    "start": "41040",
    "end": "42160"
  },
  {
    "text": "we're actually seeing a lot of great",
    "start": "42160",
    "end": "43280"
  },
  {
    "text": "work in this space recently on how to",
    "start": "43280",
    "end": "44960"
  },
  {
    "text": "reduce the cost of services running in",
    "start": "44960",
    "end": "46559"
  },
  {
    "text": "the cloud however virtualization",
    "start": "46559",
    "end": "48879"
  },
  {
    "text": "strategies such as with containers have",
    "start": "48879",
    "end": "50719"
  },
  {
    "text": "gained immense popularity thanks to",
    "start": "50719",
    "end": "52719"
  },
  {
    "text": "orchestration frameworks such as",
    "start": "52719",
    "end": "54320"
  },
  {
    "text": "kubernetes",
    "start": "54320",
    "end": "55760"
  },
  {
    "text": "thanks to their ease of use containers",
    "start": "55760",
    "end": "57440"
  },
  {
    "text": "and kubernetes have been adopted as the",
    "start": "57440",
    "end": "59440"
  },
  {
    "text": "de facto industry standard for",
    "start": "59440",
    "end": "60960"
  },
  {
    "text": "deployments of diverse workloads on",
    "start": "60960",
    "end": "62879"
  },
  {
    "text": "heterogeneous infrastructure deployments",
    "start": "62879",
    "end": "65040"
  },
  {
    "text": "vary from big data web services and edge",
    "start": "65040",
    "end": "67040"
  },
  {
    "text": "computing some really awesome stuff and",
    "start": "67040",
    "end": "69200"
  },
  {
    "text": "the mix is enabled in vast advancements",
    "start": "69200",
    "end": "71200"
  },
  {
    "text": "in scheduling strategies deployment",
    "start": "71200",
    "end": "72960"
  },
  {
    "text": "architectures and workload monitoring",
    "start": "72960",
    "end": "75840"
  },
  {
    "text": "but let's take a look at what a typical",
    "start": "75840",
    "end": "77360"
  },
  {
    "start": "76000",
    "end": "76000"
  },
  {
    "text": "deployment looks like with kubernetes",
    "start": "77360",
    "end": "79600"
  },
  {
    "text": "and dive into the full stack to see",
    "start": "79600",
    "end": "81119"
  },
  {
    "text": "what's going on you can see here in this",
    "start": "81119",
    "end": "83200"
  },
  {
    "text": "figure that what may resemble a typical",
    "start": "83200",
    "end": "85119"
  },
  {
    "text": "worker node in a cluster the node is",
    "start": "85119",
    "end": "87280"
  },
  {
    "text": "provisioned in a cluster typically as a",
    "start": "87280",
    "end": "88960"
  },
  {
    "text": "virtual machine itself running on top of",
    "start": "88960",
    "end": "90720"
  },
  {
    "text": "a hypervisor the worker node has a fully",
    "start": "90720",
    "end": "93280"
  },
  {
    "text": "functional general purpose operating",
    "start": "93280",
    "end": "94799"
  },
  {
    "text": "system and the container runtime engine",
    "start": "94799",
    "end": "96960"
  },
  {
    "text": "such as container d",
    "start": "96960",
    "end": "98720"
  },
  {
    "text": "which manages a number of name space",
    "start": "98720",
    "end": "100479"
  },
  {
    "text": "separated processes for both the system",
    "start": "100479",
    "end": "102240"
  },
  {
    "text": "kubernetes services cube system as well",
    "start": "102240",
    "end": "104880"
  },
  {
    "text": "as provision services and their actual",
    "start": "104880",
    "end": "106640"
  },
  {
    "text": "pods",
    "start": "106640",
    "end": "108079"
  },
  {
    "text": "but what's the problem",
    "start": "108079",
    "end": "109680"
  },
  {
    "text": "well there are actually four degrees of",
    "start": "109680",
    "end": "111439"
  },
  {
    "text": "virtualization and indirection there's",
    "start": "111439",
    "end": "114159"
  },
  {
    "text": "of course the hypervisor which is",
    "start": "114159",
    "end": "115600"
  },
  {
    "text": "hosting the virtual machine it's keeping",
    "start": "115600",
    "end": "117439"
  },
  {
    "text": "the vm safe from other vms in what is",
    "start": "117439",
    "end": "119280"
  },
  {
    "text": "probably the most secure way possible",
    "start": "119280",
    "end": "121360"
  },
  {
    "text": "the os itself is managing a number of",
    "start": "121360",
    "end": "123520"
  },
  {
    "text": "internal system processes along with the",
    "start": "123520",
    "end": "125680"
  },
  {
    "text": "container runtime the container runtime",
    "start": "125680",
    "end": "128000"
  },
  {
    "text": "is managing the lifecycle and managing",
    "start": "128000",
    "end": "129679"
  },
  {
    "text": "the namespaces and isolation of all the",
    "start": "129679",
    "end": "131680"
  },
  {
    "text": "services and all the pods and in some",
    "start": "131680",
    "end": "133760"
  },
  {
    "text": "cases the container parts introduce",
    "start": "133760",
    "end": "135360"
  },
  {
    "text": "their own level of virtualization",
    "start": "135360",
    "end": "136800"
  },
  {
    "text": "separating internal services to achieve",
    "start": "136800",
    "end": "139040"
  },
  {
    "text": "a functionality of the application",
    "start": "139040",
    "end": "141280"
  },
  {
    "text": "to quote anil merhada petty are we",
    "start": "141280",
    "end": "143680"
  },
  {
    "text": "really doomed to adding new layers of",
    "start": "143680",
    "end": "145840"
  },
  {
    "text": "indirection and abstraction every few",
    "start": "145840",
    "end": "147760"
  },
  {
    "text": "years leaving future generations of",
    "start": "147760",
    "end": "149680"
  },
  {
    "text": "programmers to become virtual",
    "start": "149680",
    "end": "151200"
  },
  {
    "text": "archaeologists as they dig through",
    "start": "151200",
    "end": "153040"
  },
  {
    "text": "hundreds of layers of software emulation",
    "start": "153040",
    "end": "154879"
  },
  {
    "text": "to debug even the simplest of",
    "start": "154879",
    "end": "156319"
  },
  {
    "text": "applications",
    "start": "156319",
    "end": "157440"
  },
  {
    "text": "not only is the amount of indirection",
    "start": "157440",
    "end": "159120"
  },
  {
    "text": "between the different levels of",
    "start": "159120",
    "end": "160720"
  },
  {
    "text": "virtualizations difficult to debug",
    "start": "160720",
    "end": "162800"
  },
  {
    "text": "especially for mission critical",
    "start": "162800",
    "end": "164160"
  },
  {
    "text": "applications or performance sensitive",
    "start": "164160",
    "end": "166319"
  },
  {
    "text": "applications but it adds performance",
    "start": "166319",
    "end": "168319"
  },
  {
    "text": "penalties every step of the way it's",
    "start": "168319",
    "end": "170400"
  },
  {
    "text": "making things slower it's making things",
    "start": "170400",
    "end": "172160"
  },
  {
    "text": "slower and it's adding bloat to the",
    "start": "172160",
    "end": "173680"
  },
  {
    "text": "system meaning that we have to scale",
    "start": "173680",
    "end": "175120"
  },
  {
    "text": "horizontally to new workers",
    "start": "175120",
    "end": "177200"
  },
  {
    "text": "when the resources of the machine are no",
    "start": "177200",
    "end": "178959"
  },
  {
    "text": "longer adequate for the service",
    "start": "178959",
    "end": "181920"
  },
  {
    "text": "another thing to mention is that the",
    "start": "181920",
    "end": "183440"
  },
  {
    "text": "system pods are mingling with actual",
    "start": "183440",
    "end": "185280"
  },
  {
    "text": "service pods they're only separated by",
    "start": "185280",
    "end": "187440"
  },
  {
    "text": "name spacing there have been some work",
    "start": "187440",
    "end": "189599"
  },
  {
    "text": "to make the separation stronger but uh",
    "start": "189599",
    "end": "191760"
  },
  {
    "text": "and i'll get on to this in a second but",
    "start": "191760",
    "end": "193840"
  },
  {
    "text": "it's very soft meaning that we're",
    "start": "193840",
    "end": "195120"
  },
  {
    "text": "relying on the operating system to",
    "start": "195120",
    "end": "196480"
  },
  {
    "text": "ensure this for us we rely on the",
    "start": "196480",
    "end": "198159"
  },
  {
    "text": "operating system to be secure and",
    "start": "198159",
    "end": "200000"
  },
  {
    "text": "hardened",
    "start": "200000",
    "end": "201120"
  },
  {
    "start": "201000",
    "end": "201000"
  },
  {
    "text": "okay what can we do to try and address",
    "start": "201120",
    "end": "203120"
  },
  {
    "text": "this bloat over the last few years we've",
    "start": "203120",
    "end": "205519"
  },
  {
    "text": "been seeing some great work pop up to",
    "start": "205519",
    "end": "207440"
  },
  {
    "text": "creating a full stack operating system",
    "start": "207440",
    "end": "209040"
  },
  {
    "text": "tailored for the kubernetes experience",
    "start": "209040",
    "end": "211040"
  },
  {
    "text": "they have a single goal tailor the os",
    "start": "211040",
    "end": "213200"
  },
  {
    "text": "for kubernetes only include its",
    "start": "213200",
    "end": "214799"
  },
  {
    "text": "libraries services and daemons and what",
    "start": "214799",
    "end": "216480"
  },
  {
    "text": "have yous to make kubernetes run and",
    "start": "216480",
    "end": "218879"
  },
  {
    "text": "they're pretty good at what they do",
    "start": "218879",
    "end": "220159"
  },
  {
    "text": "we've got k3os and rhinzos which creates",
    "start": "220159",
    "end": "222879"
  },
  {
    "text": "separate daemon processes for system",
    "start": "222879",
    "end": "224560"
  },
  {
    "text": "containers and service containers we",
    "start": "224560",
    "end": "226480"
  },
  {
    "text": "also have some tailoring of the linux",
    "start": "226480",
    "end": "227920"
  },
  {
    "text": "kernel from the folks at docker who",
    "start": "227920",
    "end": "229360"
  },
  {
    "text": "build it only only the necessary kernel",
    "start": "229360",
    "end": "231519"
  },
  {
    "text": "components the folks at vmware take a",
    "start": "231519",
    "end": "233680"
  },
  {
    "text": "similar approach but also include",
    "start": "233680",
    "end": "235280"
  },
  {
    "text": "necessary drivers to work on their",
    "start": "235280",
    "end": "236959"
  },
  {
    "text": "virtualization platform",
    "start": "236959",
    "end": "239200"
  },
  {
    "text": "but they still use a monolithic kernel",
    "start": "239200",
    "end": "241680"
  },
  {
    "text": "linux",
    "start": "241680",
    "end": "242799"
  },
  {
    "text": "and they still run on top of a",
    "start": "242799",
    "end": "243920"
  },
  {
    "text": "hypervisor",
    "start": "243920",
    "end": "245599"
  },
  {
    "text": "so the question i'm really getting at is",
    "start": "245599",
    "end": "247200"
  },
  {
    "start": "246000",
    "end": "246000"
  },
  {
    "text": "whether we can reduce the degrees of",
    "start": "247200",
    "end": "248879"
  },
  {
    "text": "unnecessary components even further by",
    "start": "248879",
    "end": "251120"
  },
  {
    "text": "looking directly at linux",
    "start": "251120",
    "end": "252840"
  },
  {
    "text": "linux kit does this to some extent i",
    "start": "252840",
    "end": "255680"
  },
  {
    "text": "actually really like the way they",
    "start": "255680",
    "end": "256720"
  },
  {
    "text": "approach the problem it's a nice tool",
    "start": "256720",
    "end": "258239"
  },
  {
    "text": "and you should check it out if you can",
    "start": "258239",
    "end": "259680"
  },
  {
    "text": "it allows for very bespoke builds of",
    "start": "259680",
    "end": "261199"
  },
  {
    "text": "linux kernel",
    "start": "261199",
    "end": "262479"
  },
  {
    "text": "um it's really cool too but it suffers",
    "start": "262479",
    "end": "264400"
  },
  {
    "text": "from the same premise um and that's the",
    "start": "264400",
    "end": "266560"
  },
  {
    "text": "linux kernel is inherently monolithic",
    "start": "266560",
    "end": "268960"
  },
  {
    "text": "and it's totally understandable it was",
    "start": "268960",
    "end": "270720"
  },
  {
    "text": "built organically over the last 30 years",
    "start": "270720",
    "end": "273360"
  },
  {
    "text": "it's been growing and growing and",
    "start": "273360",
    "end": "274720"
  },
  {
    "text": "suiting every need that's been thrown at",
    "start": "274720",
    "end": "276320"
  },
  {
    "text": "it to increase performance or adjust to",
    "start": "276320",
    "end": "278080"
  },
  {
    "text": "new use cases for code reuse it has very",
    "start": "278080",
    "end": "280960"
  },
  {
    "text": "strong interdependencies with other sub",
    "start": "280960",
    "end": "282560"
  },
  {
    "text": "components",
    "start": "282560",
    "end": "283680"
  },
  {
    "text": "but if you build the linux kernel from",
    "start": "283680",
    "end": "285360"
  },
  {
    "text": "scratch you'll just know how many",
    "start": "285360",
    "end": "286720"
  },
  {
    "text": "configuration options i'm talking about",
    "start": "286720",
    "end": "288639"
  },
  {
    "text": "thousands many thousands but turning one",
    "start": "288639",
    "end": "291520"
  },
  {
    "text": "of these off doesn't necessarily mean",
    "start": "291520",
    "end": "292960"
  },
  {
    "text": "the whole linux is excluded from one",
    "start": "292960",
    "end": "295680"
  },
  {
    "text": "another",
    "start": "295680",
    "end": "296400"
  },
  {
    "text": "all these components the linux apis for",
    "start": "296400",
    "end": "298800"
  },
  {
    "text": "each component um",
    "start": "298800",
    "end": "300400"
  },
  {
    "text": "are very rich and that are you know",
    "start": "300400",
    "end": "302639"
  },
  {
    "text": "grown very organically and the component",
    "start": "302639",
    "end": "304800"
  },
  {
    "text": "separation is often blurred to achieve",
    "start": "304800",
    "end": "306479"
  },
  {
    "text": "this performance for instance send files",
    "start": "306479",
    "end": "308639"
  },
  {
    "text": "short circuits the networking and",
    "start": "308639",
    "end": "309919"
  },
  {
    "text": "storage stacks",
    "start": "309919",
    "end": "311199"
  },
  {
    "text": "we tried to quantify this api complexity",
    "start": "311199",
    "end": "313360"
  },
  {
    "text": "in the linux kernel and analyze the",
    "start": "313360",
    "end": "314800"
  },
  {
    "text": "dependencies between the main components",
    "start": "314800",
    "end": "316880"
  },
  {
    "text": "we use a program called c-scope to",
    "start": "316880",
    "end": "318479"
  },
  {
    "text": "extract all the functions from their",
    "start": "318479",
    "end": "319919"
  },
  {
    "text": "sources of the kernel components and",
    "start": "319919",
    "end": "321840"
  },
  {
    "text": "then for each cool check to see if",
    "start": "321840",
    "end": "323520"
  },
  {
    "text": "there's a function in defined in the",
    "start": "323520",
    "end": "325120"
  },
  {
    "text": "same component or in a different one in",
    "start": "325120",
    "end": "326800"
  },
  {
    "text": "the latter case we recorded the",
    "start": "326800",
    "end": "328320"
  },
  {
    "text": "dependency in this graph you can see all",
    "start": "328320",
    "end": "330479"
  },
  {
    "text": "the dependencies in between different",
    "start": "330479",
    "end": "332400"
  },
  {
    "text": "kernel components",
    "start": "332400",
    "end": "334400"
  },
  {
    "text": "so back to our premise the challenge",
    "start": "334400",
    "end": "336400"
  },
  {
    "text": "operators face with containers is found",
    "start": "336400",
    "end": "338240"
  },
  {
    "text": "with the increased desire to utilize the",
    "start": "338240",
    "end": "340560"
  },
  {
    "text": "public cloud through ease of use despite",
    "start": "340560",
    "end": "342800"
  },
  {
    "text": "its negative effect on cost performance",
    "start": "342800",
    "end": "345039"
  },
  {
    "text": "and security",
    "start": "345039",
    "end": "346479"
  },
  {
    "text": "actually there's a very interesting",
    "start": "346479",
    "end": "347840"
  },
  {
    "text": "article by sarah wang and martin casado",
    "start": "347840",
    "end": "350160"
  },
  {
    "text": "on the paradox of the cloud which goes",
    "start": "350160",
    "end": "351840"
  },
  {
    "text": "into more of this problem in this",
    "start": "351840",
    "end": "353440"
  },
  {
    "text": "article they essentially discuss the",
    "start": "353440",
    "end": "355280"
  },
  {
    "text": "ease of use and to get developers",
    "start": "355280",
    "end": "358240"
  },
  {
    "text": "operators companies everyone to use the",
    "start": "358240",
    "end": "360080"
  },
  {
    "text": "public cloud and attempt to centralize",
    "start": "360080",
    "end": "362319"
  },
  {
    "text": "and achieve economies of scale but it",
    "start": "362319",
    "end": "364080"
  },
  {
    "text": "isn't quite scaling as expected it's",
    "start": "364080",
    "end": "366160"
  },
  {
    "text": "very easy to get started with aws google",
    "start": "366160",
    "end": "368720"
  },
  {
    "text": "compute microsoft azure is actually",
    "start": "368720",
    "end": "370800"
  },
  {
    "text": "quite cheap for a small project but as",
    "start": "370800",
    "end": "372560"
  },
  {
    "text": "soon as your services start to scale so",
    "start": "372560",
    "end": "374800"
  },
  {
    "text": "does the cost of the bill naturally but",
    "start": "374800",
    "end": "377120"
  },
  {
    "text": "it's not linear it's not linear because",
    "start": "377120",
    "end": "379280"
  },
  {
    "text": "it's not enough physical infrastructure",
    "start": "379280",
    "end": "380960"
  },
  {
    "text": "specialized or ready for your exact use",
    "start": "380960",
    "end": "382960"
  },
  {
    "text": "case",
    "start": "382960",
    "end": "384479"
  },
  {
    "text": "this is where i get to to introduce you",
    "start": "384479",
    "end": "386319"
  },
  {
    "text": "to the concept of a unikernel i'm very",
    "start": "386319",
    "end": "388400"
  },
  {
    "text": "excited about this technology it's been",
    "start": "388400",
    "end": "390080"
  },
  {
    "text": "on the radar for a few years now but",
    "start": "390080",
    "end": "391440"
  },
  {
    "text": "largely poop of concepts experimentation",
    "start": "391440",
    "end": "393520"
  },
  {
    "text": "research projects etc but unit kernels",
    "start": "393520",
    "end": "395840"
  },
  {
    "text": "in contrast to containers and the full",
    "start": "395840",
    "end": "397280"
  },
  {
    "text": "stack full os stack are an increasingly",
    "start": "397280",
    "end": "399680"
  },
  {
    "text": "relevant model for deploying services as",
    "start": "399680",
    "end": "401680"
  },
  {
    "text": "they serve for an uncompromising",
    "start": "401680",
    "end": "403120"
  },
  {
    "text": "approach for gains and performance by",
    "start": "403120",
    "end": "404639"
  },
  {
    "text": "tailoring the os specializing the",
    "start": "404639",
    "end": "406560"
  },
  {
    "text": "application's needs and stripping away",
    "start": "406560",
    "end": "408400"
  },
  {
    "text": "unnecessary functionality right to the",
    "start": "408400",
    "end": "410400"
  },
  {
    "text": "core the focus has been largely targeted",
    "start": "410400",
    "end": "412800"
  },
  {
    "text": "toward memory safety through single",
    "start": "412800",
    "end": "414560"
  },
  {
    "text": "address space single application",
    "start": "414560",
    "end": "416800"
  },
  {
    "text": "performance through a specialized",
    "start": "416800",
    "end": "418560"
  },
  {
    "text": "language runtime or customization of os",
    "start": "418560",
    "end": "421199"
  },
  {
    "text": "primitives such as the memory allocator",
    "start": "421199",
    "end": "423039"
  },
  {
    "text": "and scheduler reducing latency and",
    "start": "423039",
    "end": "424960"
  },
  {
    "text": "increasing bandwidth by specializing the",
    "start": "424960",
    "end": "426639"
  },
  {
    "text": "networking stack however until now these",
    "start": "426639",
    "end": "429360"
  },
  {
    "text": "efforts have fallen short when",
    "start": "429360",
    "end": "430639"
  },
  {
    "text": "considering large-scale heterogeneous",
    "start": "430639",
    "end": "432720"
  },
  {
    "text": "deployments with overheads experienced",
    "start": "432720",
    "end": "434400"
  },
  {
    "text": "in real-world context such as those",
    "start": "434400",
    "end": "436400"
  },
  {
    "text": "experienced with services deployed by",
    "start": "436400",
    "end": "438319"
  },
  {
    "text": "kubernetes",
    "start": "438319",
    "end": "440000"
  },
  {
    "start": "440000",
    "end": "440000"
  },
  {
    "text": "okay first let's cover some basics of",
    "start": "440000",
    "end": "442000"
  },
  {
    "text": "how a unikernel is built we start with",
    "start": "442000",
    "end": "443919"
  },
  {
    "text": "the full stack application and you can",
    "start": "443919",
    "end": "445680"
  },
  {
    "text": "see here that we have your application",
    "start": "445680",
    "end": "447199"
  },
  {
    "text": "and its runtime configuration right at",
    "start": "447199",
    "end": "449039"
  },
  {
    "text": "the top of the stack it runs as for",
    "start": "449039",
    "end": "451680"
  },
  {
    "text": "instance a linux user space program a",
    "start": "451680",
    "end": "454240"
  },
  {
    "text": "typical go-to example is say nginx nginx",
    "start": "454240",
    "end": "457840"
  },
  {
    "text": "itself requires a number of third-party",
    "start": "457840",
    "end": "459759"
  },
  {
    "text": "libraries to work for example openssl",
    "start": "459759",
    "end": "462880"
  },
  {
    "text": "nginx is also usually dynamically",
    "start": "462880",
    "end": "464879"
  },
  {
    "text": "compiled and then so shares libraries",
    "start": "464879",
    "end": "467840"
  },
  {
    "text": "that are installed on the operating",
    "start": "467840",
    "end": "468879"
  },
  {
    "text": "system the operating system and the",
    "start": "468879",
    "end": "470639"
  },
  {
    "text": "kernel provides two nginx a number of",
    "start": "470639",
    "end": "472879"
  },
  {
    "text": "pieces of intrinsic functional",
    "start": "472879",
    "end": "474639"
  },
  {
    "text": "functionality like scheduling and",
    "start": "474639",
    "end": "476639"
  },
  {
    "text": "threadling the kernel also facilitates",
    "start": "476639",
    "end": "479360"
  },
  {
    "text": "system calls like reading and writing to",
    "start": "479360",
    "end": "481360"
  },
  {
    "text": "a file or opening a socket",
    "start": "481360",
    "end": "483520"
  },
  {
    "text": "if we look at the operating system and",
    "start": "483520",
    "end": "484960"
  },
  {
    "text": "its requirements its needs and",
    "start": "484960",
    "end": "487440"
  },
  {
    "text": "it needs a lot of functionality itself",
    "start": "487440",
    "end": "489360"
  },
  {
    "text": "to run",
    "start": "489360",
    "end": "490319"
  },
  {
    "text": "it runs demons services like ssh and",
    "start": "490319",
    "end": "493199"
  },
  {
    "text": "also relies on the kernel for",
    "start": "493199",
    "end": "494479"
  },
  {
    "text": "multitasking the kernel is also compiled",
    "start": "494479",
    "end": "497199"
  },
  {
    "text": "and has diverse",
    "start": "497199",
    "end": "499120"
  },
  {
    "text": "sorry drivers which are tailored to the",
    "start": "499120",
    "end": "501120"
  },
  {
    "text": "platform it runs on like kvm zen or",
    "start": "501120",
    "end": "503520"
  },
  {
    "text": "vmware and lastly it has hardware",
    "start": "503520",
    "end": "505680"
  },
  {
    "text": "specific code machine code which",
    "start": "505680",
    "end": "507759"
  },
  {
    "text": "interfaces with the processor such as",
    "start": "507759",
    "end": "509919"
  },
  {
    "text": "with intel x86",
    "start": "509919",
    "end": "512240"
  },
  {
    "text": "the idea of the uni kernel and with",
    "start": "512240",
    "end": "513839"
  },
  {
    "text": "unicraft in particular is that we libra",
    "start": "513839",
    "end": "516320"
  },
  {
    "text": "size all of these components and create",
    "start": "516320",
    "end": "518000"
  },
  {
    "text": "a library operating system",
    "start": "518000",
    "end": "519839"
  },
  {
    "text": "all traditional components of the",
    "start": "519839",
    "end": "521440"
  },
  {
    "text": "monolithic operating system the kernel",
    "start": "521440",
    "end": "523360"
  },
  {
    "text": "and all third-party libraries are made",
    "start": "523360",
    "end": "525200"
  },
  {
    "text": "available in a pick and choose fashion",
    "start": "525200",
    "end": "527360"
  },
  {
    "text": "you select them based on your",
    "start": "527360",
    "end": "528720"
  },
  {
    "text": "application's needs you don't need to",
    "start": "528720",
    "end": "531360"
  },
  {
    "text": "schedule because your application is run",
    "start": "531360",
    "end": "533120"
  },
  {
    "text": "to completion no problem but not only",
    "start": "533120",
    "end": "535839"
  },
  {
    "text": "that we can pick different libraries",
    "start": "535839",
    "end": "537519"
  },
  {
    "text": "with the same interface which interact",
    "start": "537519",
    "end": "539360"
  },
  {
    "text": "in the same way but offer different",
    "start": "539360",
    "end": "540720"
  },
  {
    "text": "functionality i'll cover more of this",
    "start": "540720",
    "end": "542399"
  },
  {
    "text": "later the unicroft is built on this",
    "start": "542399",
    "end": "545279"
  },
  {
    "text": "system and this library operating system",
    "start": "545279",
    "end": "547440"
  },
  {
    "text": "so you start with your application your",
    "start": "547440",
    "end": "549600"
  },
  {
    "text": "configuration",
    "start": "549600",
    "end": "551040"
  },
  {
    "text": "and then through a number of steps such",
    "start": "551040",
    "end": "552800"
  },
  {
    "text": "as retrieving relevant libraries",
    "start": "552800",
    "end": "554320"
  },
  {
    "text": "preparation compilation and linking",
    "start": "554320",
    "end": "557120"
  },
  {
    "text": "you get a final binary a full virtual",
    "start": "557120",
    "end": "558880"
  },
  {
    "text": "machine image it only has the necessary",
    "start": "558880",
    "end": "560959"
  },
  {
    "text": "components for the application to run",
    "start": "560959",
    "end": "562640"
  },
  {
    "text": "and nothing more it's tailored exactly",
    "start": "562640",
    "end": "564800"
  },
  {
    "text": "as your application needs it",
    "start": "564800",
    "end": "567600"
  },
  {
    "text": "so uni kernels they are compile time",
    "start": "567600",
    "end": "570080"
  },
  {
    "text": "specialization strategy you can actually",
    "start": "570080",
    "end": "572320"
  },
  {
    "text": "very easily integrate them into a ci cd",
    "start": "572320",
    "end": "574560"
  },
  {
    "text": "pipeline and generate the artifact ready",
    "start": "574560",
    "end": "576640"
  },
  {
    "text": "for deploying deployment and to the",
    "start": "576640",
    "end": "578800"
  },
  {
    "text": "relevant platform and hardware",
    "start": "578800",
    "end": "580399"
  },
  {
    "text": "architecture",
    "start": "580399",
    "end": "581600"
  },
  {
    "text": "they are a form of lightweight virtual",
    "start": "581600",
    "end": "583360"
  },
  {
    "text": "machine they just boot like any other os",
    "start": "583360",
    "end": "585920"
  },
  {
    "text": "but unlike traditional operating systems",
    "start": "585920",
    "end": "588080"
  },
  {
    "text": "they boot much faster i'll cover how",
    "start": "588080",
    "end": "590640"
  },
  {
    "text": "much faster a little bit later the",
    "start": "590640",
    "end": "592480"
  },
  {
    "text": "application and the kernel share the",
    "start": "592480",
    "end": "594080"
  },
  {
    "text": "same address space so there is no",
    "start": "594080",
    "end": "595760"
  },
  {
    "text": "separation between the two there's no",
    "start": "595760",
    "end": "597600"
  },
  {
    "text": "user space there's no kernel space um",
    "start": "597600",
    "end": "600160"
  },
  {
    "text": "this means that the cost of cisco's are",
    "start": "600160",
    "end": "602160"
  },
  {
    "text": "much cheaper they're actually just",
    "start": "602160",
    "end": "603519"
  },
  {
    "text": "function calls now this means we can",
    "start": "603519",
    "end": "605440"
  },
  {
    "text": "also do optimizations on their call",
    "start": "605440",
    "end": "608079"
  },
  {
    "text": "making them in line when possible",
    "start": "608079",
    "end": "609920"
  },
  {
    "text": "through compile time optimization",
    "start": "609920",
    "end": "611440"
  },
  {
    "text": "strategies",
    "start": "611440",
    "end": "612880"
  },
  {
    "text": "the unikernel only has the necessary",
    "start": "612880",
    "end": "614720"
  },
  {
    "text": "functionalities for the application to",
    "start": "614720",
    "end": "616079"
  },
  {
    "text": "run nothing more which means that there",
    "start": "616079",
    "end": "618640"
  },
  {
    "text": "are no daemons no system libraries",
    "start": "618640",
    "end": "620640"
  },
  {
    "text": "background tasks and really you know no",
    "start": "620640",
    "end": "622560"
  },
  {
    "text": "ssh for example",
    "start": "622560",
    "end": "624079"
  },
  {
    "text": "uh oops",
    "start": "624079",
    "end": "625360"
  },
  {
    "text": "uni kernels target a specific platform",
    "start": "625360",
    "end": "627760"
  },
  {
    "text": "and hardware combination they're",
    "start": "627760",
    "end": "629120"
  },
  {
    "text": "tailored for not only the application",
    "start": "629120",
    "end": "631120"
  },
  {
    "text": "but for their runtime environment",
    "start": "631120",
    "end": "633360"
  },
  {
    "text": "with unicroft nginx has only the",
    "start": "633360",
    "end": "635600"
  },
  {
    "text": "necessary dependencies dependencies for",
    "start": "635600",
    "end": "637519"
  },
  {
    "text": "it to run",
    "start": "637519",
    "end": "638880"
  },
  {
    "text": "networking ipc file system memory",
    "start": "638880",
    "end": "641279"
  },
  {
    "text": "management and scheduling we don't need",
    "start": "641279",
    "end": "643279"
  },
  {
    "text": "for instance usb drivers we don't need",
    "start": "643279",
    "end": "645360"
  },
  {
    "text": "iscsi we don't need it",
    "start": "645360",
    "end": "647200"
  },
  {
    "text": "and we don't and if we know the file",
    "start": "647200",
    "end": "648720"
  },
  {
    "text": "system that we're working with we only",
    "start": "648720",
    "end": "650399"
  },
  {
    "text": "need to compile in those particular",
    "start": "650399",
    "end": "652240"
  },
  {
    "text": "drivers such as ext4 9pfs etc",
    "start": "652240",
    "end": "656240"
  },
  {
    "text": "so",
    "start": "656240",
    "end": "657200"
  },
  {
    "start": "657000",
    "end": "657000"
  },
  {
    "text": "okay let's check out some numbers we",
    "start": "657200",
    "end": "659120"
  },
  {
    "text": "compared the ports of nginx and compared",
    "start": "659120",
    "end": "662480"
  },
  {
    "text": "the performance of nginx against",
    "start": "662480",
    "end": "665200"
  },
  {
    "text": "different solutions including a full vm",
    "start": "665200",
    "end": "668560"
  },
  {
    "text": "running linux",
    "start": "668560",
    "end": "669839"
  },
  {
    "text": "nginx running of course inside and other",
    "start": "669839",
    "end": "672720"
  },
  {
    "text": "unique kernel projects and of course",
    "start": "672720",
    "end": "674480"
  },
  {
    "text": "docker",
    "start": "674480",
    "end": "675600"
  },
  {
    "text": "all versions of nginx were the same and",
    "start": "675600",
    "end": "677360"
  },
  {
    "text": "we ran a simple throughput test using 14",
    "start": "677360",
    "end": "680079"
  },
  {
    "text": "threads and 30 connections with the same",
    "start": "680079",
    "end": "682560"
  },
  {
    "text": "html payload size",
    "start": "682560",
    "end": "684959"
  },
  {
    "text": "as you can see compared to docker we had",
    "start": "684959",
    "end": "686640"
  },
  {
    "text": "an 82 82 increase in throughput",
    "start": "686640",
    "end": "690399"
  },
  {
    "text": "and when it comes to performance it's",
    "start": "690399",
    "end": "692079"
  },
  {
    "text": "also worth looking at memory usage and",
    "start": "692079",
    "end": "693760"
  },
  {
    "text": "we're experiencing much lower memory",
    "start": "693760",
    "end": "695440"
  },
  {
    "text": "footprints too",
    "start": "695440",
    "end": "697279"
  },
  {
    "text": "we also measured the boot time of",
    "start": "697279",
    "end": "698560"
  },
  {
    "text": "unicraft here we tried different virtual",
    "start": "698560",
    "end": "700480"
  },
  {
    "text": "machine monitors more on how we can use",
    "start": "700480",
    "end": "702480"
  },
  {
    "text": "these later later with kubernetes but we",
    "start": "702480",
    "end": "705360"
  },
  {
    "text": "can also achieve boot times into the",
    "start": "705360",
    "end": "707360"
  },
  {
    "text": "running main thread program in as little",
    "start": "707360",
    "end": "709760"
  },
  {
    "text": "as 3.1 milliseconds",
    "start": "709760",
    "end": "712160"
  },
  {
    "text": "and just for fun i ran some experiments",
    "start": "712160",
    "end": "714160"
  },
  {
    "text": "on my raspberry pi and just wanted to",
    "start": "714160",
    "end": "715839"
  },
  {
    "text": "quickly show you um that it also runs",
    "start": "715839",
    "end": "718079"
  },
  {
    "text": "directly on hardware um there was an",
    "start": "718079",
    "end": "719839"
  },
  {
    "text": "order of magnitude difference in boot",
    "start": "719839",
    "end": "721920"
  },
  {
    "text": "time between uh raspbian os uh the",
    "start": "721920",
    "end": "724000"
  },
  {
    "text": "default um standard os that ships with",
    "start": "724000",
    "end": "727120"
  },
  {
    "text": "uh raspberry pi's and the unicropped",
    "start": "727120",
    "end": "729440"
  },
  {
    "text": "unicorn image uh unicraft's build system",
    "start": "729440",
    "end": "731920"
  },
  {
    "text": "can tailor it to different platforms and",
    "start": "731920",
    "end": "733519"
  },
  {
    "text": "architectures and here i just had to",
    "start": "733519",
    "end": "735920"
  },
  {
    "text": "rebuild the nginx application targeting",
    "start": "735920",
    "end": "738639"
  },
  {
    "text": "a different platform and hardware",
    "start": "738639",
    "end": "740639"
  },
  {
    "text": "architecture",
    "start": "740639",
    "end": "741839"
  },
  {
    "text": "and when it comes to the separation",
    "start": "741839",
    "end": "743920"
  },
  {
    "text": "between kernel space and user space",
    "start": "743920",
    "end": "746000"
  },
  {
    "text": "cisco's represent a huge bottleneck it's",
    "start": "746000",
    "end": "748160"
  },
  {
    "text": "understandable there are a lot of checks",
    "start": "748160",
    "end": "750320"
  },
  {
    "text": "which occur to ensure that the user",
    "start": "750320",
    "end": "751760"
  },
  {
    "text": "space application does not make",
    "start": "751760",
    "end": "753839"
  },
  {
    "text": "incorrect or potentially malicious calls",
    "start": "753839",
    "end": "755839"
  },
  {
    "text": "to the kernel which can disrupt the",
    "start": "755839",
    "end": "757839"
  },
  {
    "text": "runtime of other services if our if our",
    "start": "757839",
    "end": "761200"
  },
  {
    "text": "vm is running in the same address space",
    "start": "761200",
    "end": "762880"
  },
  {
    "text": "which it is because we know the exact",
    "start": "762880",
    "end": "765040"
  },
  {
    "text": "exactly what we want we don't need this",
    "start": "765040",
    "end": "766880"
  },
  {
    "text": "mitigation",
    "start": "766880",
    "end": "768079"
  },
  {
    "text": "here we demonstrated that a function",
    "start": "768079",
    "end": "769600"
  },
  {
    "text": "call is two orders of magnitude faster",
    "start": "769600",
    "end": "772480"
  },
  {
    "text": "in terms of cpu cycles at unicraft",
    "start": "772480",
    "end": "775839"
  },
  {
    "text": "i'm going to dive into the specifics of",
    "start": "775839",
    "end": "777519"
  },
  {
    "start": "776000",
    "end": "776000"
  },
  {
    "text": "how we get to these images in a few",
    "start": "777519",
    "end": "779040"
  },
  {
    "text": "slides yet but i want to show you that",
    "start": "779040",
    "end": "781600"
  },
  {
    "text": "when it comes to packing images in an",
    "start": "781600",
    "end": "783839"
  },
  {
    "text": "oci registry ready to be retrieved by",
    "start": "783839",
    "end": "786240"
  },
  {
    "text": "the relevant worker node we can often",
    "start": "786240",
    "end": "788399"
  },
  {
    "text": "try to minimize the file system as much",
    "start": "788399",
    "end": "790079"
  },
  {
    "text": "as possible right there are some classic",
    "start": "790079",
    "end": "792320"
  },
  {
    "text": "techniques um like with the go program",
    "start": "792320",
    "end": "794240"
  },
  {
    "text": "you often create the final static binary",
    "start": "794240",
    "end": "797200"
  },
  {
    "text": "image and you place it in a scratch and",
    "start": "797200",
    "end": "799839"
  },
  {
    "text": "it's the last step in the build step and",
    "start": "799839",
    "end": "802000"
  },
  {
    "text": "you just hook it as the main entry",
    "start": "802000",
    "end": "803519"
  },
  {
    "text": "program in a way this is almost exactly",
    "start": "803519",
    "end": "805680"
  },
  {
    "text": "what we're doing with uni kernels just",
    "start": "805680",
    "end": "807200"
  },
  {
    "text": "with the whole os and kernel to give you",
    "start": "807200",
    "end": "809279"
  },
  {
    "text": "an idea uh however of the difference",
    "start": "809279",
    "end": "811279"
  },
  {
    "text": "between grabbing the official docker",
    "start": "811279",
    "end": "812800"
  },
  {
    "text": "image for nginx um is 4.2 megabytes in",
    "start": "812800",
    "end": "816480"
  },
  {
    "text": "size uh but our complete uni kernel",
    "start": "816480",
    "end": "819120"
  },
  {
    "text": "image for nginx of the same version is",
    "start": "819120",
    "end": "820959"
  },
  {
    "text": "1.3 megabytes in size both oci images",
    "start": "820959",
    "end": "824399"
  },
  {
    "text": "are compressed in the same way and have",
    "start": "824399",
    "end": "825839"
  },
  {
    "text": "the same configuration inside",
    "start": "825839",
    "end": "829279"
  },
  {
    "start": "829000",
    "end": "829000"
  },
  {
    "text": "having a reduced image size naturally",
    "start": "829279",
    "end": "831519"
  },
  {
    "text": "comes with security benefits including a",
    "start": "831519",
    "end": "833839"
  },
  {
    "text": "much smaller attack surface there's no",
    "start": "833839",
    "end": "836000"
  },
  {
    "text": "shell to drop into actually this is a",
    "start": "836000",
    "end": "837760"
  },
  {
    "text": "problem later and i'll explain",
    "start": "837760",
    "end": "840000"
  },
  {
    "text": "but there's no concept of a user there's",
    "start": "840000",
    "end": "842079"
  },
  {
    "text": "nothing running in the background which",
    "start": "842079",
    "end": "843600"
  },
  {
    "text": "could disrupt the runtime of the",
    "start": "843600",
    "end": "844880"
  },
  {
    "text": "application either",
    "start": "844880",
    "end": "846560"
  },
  {
    "text": "each image has a reduced memory size and",
    "start": "846560",
    "end": "848880"
  },
  {
    "text": "we can introduce address space layout",
    "start": "848880",
    "end": "850880"
  },
  {
    "text": "randomization at compile time to make",
    "start": "850880",
    "end": "853040"
  },
  {
    "text": "each image more unique",
    "start": "853040",
    "end": "855040"
  },
  {
    "text": "and because we're dealing with virtual",
    "start": "855040",
    "end": "856480"
  },
  {
    "text": "machines we're making use of hardware",
    "start": "856480",
    "end": "858240"
  },
  {
    "text": "based isolation using the lowest level",
    "start": "858240",
    "end": "860480"
  },
  {
    "text": "virtualization the vm is really just the",
    "start": "860480",
    "end": "863199"
  },
  {
    "text": "standard units unit which large",
    "start": "863199",
    "end": "865519"
  },
  {
    "text": "infrastructure as a service providers",
    "start": "865519",
    "end": "867519"
  },
  {
    "text": "offer so hardened",
    "start": "867519",
    "end": "869360"
  },
  {
    "text": "it's way more hardened and it's more",
    "start": "869360",
    "end": "870959"
  },
  {
    "text": "hardened than the os that they actually",
    "start": "870959",
    "end": "872399"
  },
  {
    "text": "provide to you um",
    "start": "872399",
    "end": "874399"
  },
  {
    "text": "and the provision to you finally um i'd",
    "start": "874399",
    "end": "876480"
  },
  {
    "text": "like to mention that at unicraft we have",
    "start": "876480",
    "end": "878320"
  },
  {
    "text": "some ongoing work which is introducing",
    "start": "878320",
    "end": "880240"
  },
  {
    "text": "in unikernel memory protection using",
    "start": "880240",
    "end": "882399"
  },
  {
    "text": "hardware acceleration to separate for",
    "start": "882399",
    "end": "884240"
  },
  {
    "text": "instance different library components",
    "start": "884240",
    "end": "885680"
  },
  {
    "text": "such as the network stack and the",
    "start": "885680",
    "end": "887279"
  },
  {
    "text": "scheduler or application from each other",
    "start": "887279",
    "end": "890160"
  },
  {
    "text": "for instance by using uh intel npk",
    "start": "890160",
    "end": "893760"
  },
  {
    "text": "okay we have uni kernels and they seem",
    "start": "893760",
    "end": "896079"
  },
  {
    "start": "894000",
    "end": "894000"
  },
  {
    "text": "to provide a battery of different",
    "start": "896079",
    "end": "897440"
  },
  {
    "text": "benefits a stepping stone however",
    "start": "897440",
    "end": "900560"
  },
  {
    "text": "towards the ultimate use of lightweight",
    "start": "900560",
    "end": "902160"
  },
  {
    "text": "virtualization via uni kernels requires",
    "start": "902160",
    "end": "904880"
  },
  {
    "text": "integration into an orchestration",
    "start": "904880",
    "end": "906639"
  },
  {
    "text": "framework which maintains this ability",
    "start": "906639",
    "end": "908800"
  },
  {
    "text": "to dynamically and quickly provision new",
    "start": "908800",
    "end": "910639"
  },
  {
    "text": "services to schedule and reschedule",
    "start": "910639",
    "end": "912880"
  },
  {
    "text": "services based on workload known as auto",
    "start": "912880",
    "end": "914880"
  },
  {
    "text": "scaling and collecting co-locating",
    "start": "914880",
    "end": "917760"
  },
  {
    "text": "relevant jobs and required resources",
    "start": "917760",
    "end": "919760"
  },
  {
    "text": "such as static volumes kubernetes",
    "start": "919760",
    "end": "921839"
  },
  {
    "text": "provides all of these requirements and",
    "start": "921839",
    "end": "923440"
  },
  {
    "text": "as such acts as an ideal tool to be able",
    "start": "923440",
    "end": "925440"
  },
  {
    "text": "to test large scale deployments for uni",
    "start": "925440",
    "end": "927279"
  },
  {
    "text": "kernels the same or varying comparable",
    "start": "927279",
    "end": "929920"
  },
  {
    "text": "workloads our main goal is to allow for",
    "start": "929920",
    "end": "933040"
  },
  {
    "text": "the seamless use of unikernels through",
    "start": "933040",
    "end": "935040"
  },
  {
    "text": "the orchestration platform kubernetes at",
    "start": "935040",
    "end": "937360"
  },
  {
    "text": "a high level we envision dynamic",
    "start": "937360",
    "end": "939120"
  },
  {
    "text": "workloads scheduled in the same way as",
    "start": "939120",
    "end": "940880"
  },
  {
    "text": "their traditional",
    "start": "940880",
    "end": "942160"
  },
  {
    "text": "container-based counterparts the use of",
    "start": "942160",
    "end": "944240"
  },
  {
    "text": "kubernetes itself is fueled by its",
    "start": "944240",
    "end": "945920"
  },
  {
    "text": "widespread adoption as an industry",
    "start": "945920",
    "end": "947759"
  },
  {
    "text": "leading platform for the scheduling and",
    "start": "947759",
    "end": "949759"
  },
  {
    "text": "orchestration of services",
    "start": "949759",
    "end": "952160"
  },
  {
    "text": "and two",
    "start": "952160",
    "end": "953120"
  },
  {
    "text": "uh make it easy as possible to achieve",
    "start": "953120",
    "end": "955279"
  },
  {
    "text": "the first goal we want to make",
    "start": "955279",
    "end": "956720"
  },
  {
    "text": "everything as pluginizable as possible",
    "start": "956720",
    "end": "958880"
  },
  {
    "text": "make the experience seamless attempting",
    "start": "958880",
    "end": "960800"
  },
  {
    "text": "to make little to no modifications to",
    "start": "960800",
    "end": "962800"
  },
  {
    "text": "existing ecosystem internals which would",
    "start": "962800",
    "end": "964880"
  },
  {
    "text": "require operators to make non-trivial",
    "start": "964880",
    "end": "966880"
  },
  {
    "text": "require modifications to the host",
    "start": "966880",
    "end": "970240"
  },
  {
    "text": "but the ecosystem already has some great",
    "start": "970240",
    "end": "972800"
  },
  {
    "start": "971000",
    "end": "971000"
  },
  {
    "text": "tools for running virtual machines by",
    "start": "972800",
    "end": "975199"
  },
  {
    "text": "kubernetes uh we have pubert and we have",
    "start": "975199",
    "end": "977759"
  },
  {
    "text": "well we did have one v which is now kata",
    "start": "977759",
    "end": "980160"
  },
  {
    "text": "containers um but when we took a closer",
    "start": "980160",
    "end": "982959"
  },
  {
    "text": "look at what these tools did we noticed",
    "start": "982959",
    "end": "985120"
  },
  {
    "text": "one major problem",
    "start": "985120",
    "end": "986639"
  },
  {
    "text": "and that they were launching new vms in",
    "start": "986639",
    "end": "988399"
  },
  {
    "text": "the same with the same assumptions a",
    "start": "988399",
    "end": "990480"
  },
  {
    "text": "monolithic os running multiple services",
    "start": "990480",
    "end": "992720"
  },
  {
    "text": "including your application actually one",
    "start": "992720",
    "end": "994880"
  },
  {
    "text": "of the way some of the ways that uh we",
    "start": "994880",
    "end": "997040"
  },
  {
    "text": "interface with uh configuring these um",
    "start": "997040",
    "end": "1000880"
  },
  {
    "text": "vm based containers through kubernetes",
    "start": "1000880",
    "end": "1003120"
  },
  {
    "text": "was via ssh and we as you saw before we",
    "start": "1003120",
    "end": "1006320"
  },
  {
    "text": "can't do this with uni kernels because",
    "start": "1006320",
    "end": "1007759"
  },
  {
    "text": "it boots and then it starts the",
    "start": "1007759",
    "end": "1009040"
  },
  {
    "text": "application and does nothing more",
    "start": "1009040",
    "end": "1012160"
  },
  {
    "text": "okay let in the next few slides i'd like",
    "start": "1012160",
    "end": "1014720"
  },
  {
    "text": "to explore with you the necessary steps",
    "start": "1014720",
    "end": "1016560"
  },
  {
    "text": "to make our integration with uni kernels",
    "start": "1016560",
    "end": "1019040"
  },
  {
    "text": "into kubernetes possible",
    "start": "1019040",
    "end": "1020880"
  },
  {
    "text": "we start by studying how kubernetes as a",
    "start": "1020880",
    "end": "1023040"
  },
  {
    "text": "whole operates and how kubernetes talks",
    "start": "1023040",
    "end": "1025600"
  },
  {
    "text": "to a container runtime engine um via",
    "start": "1025600",
    "end": "1028319"
  },
  {
    "text": "something called the container runtime",
    "start": "1028319",
    "end": "1030000"
  },
  {
    "text": "interface the cri which is implemented",
    "start": "1030000",
    "end": "1032798"
  },
  {
    "text": "using a tool for instance like container",
    "start": "1032799",
    "end": "1034480"
  },
  {
    "text": "d",
    "start": "1034480",
    "end": "1035760"
  },
  {
    "text": "and how the container runtime engine",
    "start": "1035760",
    "end": "1038480"
  },
  {
    "text": "speaks with a oci or open container",
    "start": "1038480",
    "end": "1041520"
  },
  {
    "text": "initiative runtime image or a",
    "start": "1041520",
    "end": "1043678"
  },
  {
    "text": "specification compliant program such as",
    "start": "1043679",
    "end": "1045918"
  },
  {
    "text": "one c",
    "start": "1045919",
    "end": "1047678"
  },
  {
    "text": "here is a general overview of a",
    "start": "1047679",
    "end": "1049520"
  },
  {
    "text": "multi-node kubernetes cluster with a",
    "start": "1049520",
    "end": "1051360"
  },
  {
    "text": "controller node the api server speaks",
    "start": "1051360",
    "end": "1053919"
  },
  {
    "text": "with all worker nodes by a protobuf but",
    "start": "1053919",
    "end": "1056400"
  },
  {
    "text": "on the host the main daemon for managing",
    "start": "1056400",
    "end": "1059039"
  },
  {
    "text": "the lifecycle of deployed services",
    "start": "1059039",
    "end": "1061120"
  },
  {
    "text": "speaks to standard databases",
    "start": "1061120",
    "end": "1063520"
  },
  {
    "text": "oci and cri if we're wanting to make the",
    "start": "1063520",
    "end": "1066960"
  },
  {
    "text": "host of the worker node instantiate",
    "start": "1066960",
    "end": "1068720"
  },
  {
    "text": "unicorn virtual machines we're going to",
    "start": "1068720",
    "end": "1071120"
  },
  {
    "text": "need to be able to work inside of this",
    "start": "1071120",
    "end": "1072720"
  },
  {
    "text": "framework",
    "start": "1072720",
    "end": "1073919"
  },
  {
    "text": "let's take a look at how a request is",
    "start": "1073919",
    "end": "1075840"
  },
  {
    "text": "served from the kubernetes control plane",
    "start": "1075840",
    "end": "1077520"
  },
  {
    "text": "towards the instantiation of a service",
    "start": "1077520",
    "end": "1080799"
  },
  {
    "text": "first a request is made which is passed",
    "start": "1080799",
    "end": "1082960"
  },
  {
    "text": "to kublet we want to create a new pod",
    "start": "1082960",
    "end": "1085280"
  },
  {
    "text": "for our particular service",
    "start": "1085280",
    "end": "1087360"
  },
  {
    "text": "cubelet speaks with the container",
    "start": "1087360",
    "end": "1089039"
  },
  {
    "text": "runtime engine in this case container d",
    "start": "1089039",
    "end": "1091520"
  },
  {
    "text": "and makes a request to create a sandbox",
    "start": "1091520",
    "end": "1093440"
  },
  {
    "text": "environment",
    "start": "1093440",
    "end": "1095120"
  },
  {
    "text": "the sandbox is passed to a binary shim",
    "start": "1095120",
    "end": "1097440"
  },
  {
    "text": "which is demonized as a demonized",
    "start": "1097440",
    "end": "1099600"
  },
  {
    "text": "process on the host",
    "start": "1099600",
    "end": "1101200"
  },
  {
    "text": "this process serves as an interface for",
    "start": "1101200",
    "end": "1103440"
  },
  {
    "text": "example with run c but one i put a star",
    "start": "1103440",
    "end": "1106320"
  },
  {
    "text": "here",
    "start": "1106320",
    "end": "1107200"
  },
  {
    "text": "the interface of the container runtime",
    "start": "1107200",
    "end": "1109440"
  },
  {
    "text": "interface",
    "start": "1109440",
    "end": "1110799"
  },
  {
    "text": "the daemon is in charge of creating new",
    "start": "1110799",
    "end": "1113679"
  },
  {
    "text": "processes on kubernetes behalf the sub",
    "start": "1113679",
    "end": "1116320"
  },
  {
    "text": "process of the run c shim layer and the",
    "start": "1116320",
    "end": "1118240"
  },
  {
    "text": "run c binary so the star here we can",
    "start": "1118240",
    "end": "1121840"
  },
  {
    "text": "replace it with our own tools run u and",
    "start": "1121840",
    "end": "1125039"
  },
  {
    "text": "where we can instantiate and manage the",
    "start": "1125039",
    "end": "1126799"
  },
  {
    "text": "life cycle of unikernel virtual machines",
    "start": "1126799",
    "end": "1130160"
  },
  {
    "start": "1130000",
    "end": "1130000"
  },
  {
    "text": "so introducing this shim layer and",
    "start": "1130160",
    "end": "1132320"
  },
  {
    "text": "runtime manager into container d is",
    "start": "1132320",
    "end": "1134480"
  },
  {
    "text": "actually quite simple and works towards",
    "start": "1134480",
    "end": "1136480"
  },
  {
    "text": "this higher level goal being very",
    "start": "1136480",
    "end": "1138240"
  },
  {
    "text": "pluginizable",
    "start": "1138240",
    "end": "1140160"
  },
  {
    "text": "we introduce a new plugin to the",
    "start": "1140160",
    "end": "1141600"
  },
  {
    "text": "container d and for a program which",
    "start": "1141600",
    "end": "1143919"
  },
  {
    "text": "matches at the runtime type",
    "start": "1143919",
    "end": "1146559"
  },
  {
    "text": "we've seen this here",
    "start": "1146559",
    "end": "1148240"
  },
  {
    "text": "and sets the path of the binary of the",
    "start": "1148240",
    "end": "1150240"
  },
  {
    "text": "union kernel runtime manager",
    "start": "1150240",
    "end": "1152640"
  },
  {
    "text": "so our first contribution is a new tool",
    "start": "1152640",
    "end": "1154880"
  },
  {
    "start": "1153000",
    "end": "1153000"
  },
  {
    "text": "run you to run unicorns to be oci",
    "start": "1154880",
    "end": "1157760"
  },
  {
    "text": "compliant this program must essentially",
    "start": "1157760",
    "end": "1159679"
  },
  {
    "text": "have the following sub-commands and",
    "start": "1159679",
    "end": "1161760"
  },
  {
    "text": "arguments available to it that's create",
    "start": "1161760",
    "end": "1164080"
  },
  {
    "text": "delete kill spec which i'll cover in the",
    "start": "1164080",
    "end": "1166160"
  },
  {
    "text": "next few slides start and a method to",
    "start": "1166160",
    "end": "1168320"
  },
  {
    "text": "query the state",
    "start": "1168320",
    "end": "1170320"
  },
  {
    "text": "okay so that's all well and good but",
    "start": "1170320",
    "end": "1172240"
  },
  {
    "start": "1171000",
    "end": "1171000"
  },
  {
    "text": "we're still dealing with oci formatted",
    "start": "1172240",
    "end": "1174400"
  },
  {
    "text": "images this means we must disguise unit",
    "start": "1174400",
    "end": "1176640"
  },
  {
    "text": "kernels in oci compatible images",
    "start": "1176640",
    "end": "1179360"
  },
  {
    "text": "the ecosystem aka container d relies on",
    "start": "1179360",
    "end": "1182640"
  },
  {
    "text": "the use of remotely accessible",
    "start": "1182640",
    "end": "1184559"
  },
  {
    "text": "registries which understand the contents",
    "start": "1184559",
    "end": "1186960"
  },
  {
    "text": "of container images standardize again",
    "start": "1186960",
    "end": "1189520"
  },
  {
    "text": "through the oci image specification the",
    "start": "1189520",
    "end": "1191840"
  },
  {
    "text": "distribution of such images makes the",
    "start": "1191840",
    "end": "1193520"
  },
  {
    "text": "instantiation of services easier as",
    "start": "1193520",
    "end": "1195840"
  },
  {
    "text": "their content are remotely accessible",
    "start": "1195840",
    "end": "1197840"
  },
  {
    "text": "and can be transported when necessary",
    "start": "1197840",
    "end": "1201039"
  },
  {
    "text": "uni kernels are typically binary format",
    "start": "1201039",
    "end": "1203200"
  },
  {
    "text": "a single virtual machine image which can",
    "start": "1203200",
    "end": "1205200"
  },
  {
    "text": "be launched via virtual machine monitor",
    "start": "1205200",
    "end": "1207039"
  },
  {
    "text": "such as camu",
    "start": "1207039",
    "end": "1208480"
  },
  {
    "text": "typical standardization for virtual",
    "start": "1208480",
    "end": "1210400"
  },
  {
    "text": "machine images are iso qca2 and raw",
    "start": "1210400",
    "end": "1213360"
  },
  {
    "text": "format and are not compatible with",
    "start": "1213360",
    "end": "1215120"
  },
  {
    "text": "existing container-based infrastructure",
    "start": "1215120",
    "end": "1217679"
  },
  {
    "text": "to package a uni kernel into oci",
    "start": "1217679",
    "end": "1219840"
  },
  {
    "text": "clothing we must follow the",
    "start": "1219840",
    "end": "1221840"
  },
  {
    "text": "specification dictated by oci",
    "start": "1221840",
    "end": "1224320"
  },
  {
    "text": "to do so in this example of an nginx",
    "start": "1224320",
    "end": "1226240"
  },
  {
    "text": "unikernel we have to create a tarbell",
    "start": "1226240",
    "end": "1229200"
  },
  {
    "text": "that contains a manifest or index.json",
    "start": "1229200",
    "end": "1231840"
  },
  {
    "text": "file with information about its contents",
    "start": "1231840",
    "end": "1234400"
  },
  {
    "text": "and to contain a series of um again",
    "start": "1234400",
    "end": "1237760"
  },
  {
    "text": "tarball images inside the blobs sha 256",
    "start": "1237760",
    "end": "1241280"
  },
  {
    "text": "directory",
    "start": "1241280",
    "end": "1242320"
  },
  {
    "text": "these are known as layers right",
    "start": "1242320",
    "end": "1245520"
  },
  {
    "text": "these layers are simply file systems",
    "start": "1245520",
    "end": "1247520"
  },
  {
    "text": "which are extracted over one one another",
    "start": "1247520",
    "end": "1250320"
  },
  {
    "text": "and to create a complete file system",
    "start": "1250320",
    "end": "1252799"
  },
  {
    "text": "so we go back to the life cycle of our",
    "start": "1252799",
    "end": "1254960"
  },
  {
    "text": "oci image and once it's retrieved this",
    "start": "1254960",
    "end": "1258159"
  },
  {
    "text": "is part of the spec command before we",
    "start": "1258159",
    "end": "1259760"
  },
  {
    "text": "unpack it we unpack it and prepare it",
    "start": "1259760",
    "end": "1262559"
  },
  {
    "text": "on the host",
    "start": "1262559",
    "end": "1263679"
  },
  {
    "text": "environment in all scenarios each layer",
    "start": "1263679",
    "end": "1265840"
  },
  {
    "text": "is extracted atop one another to create",
    "start": "1265840",
    "end": "1267840"
  },
  {
    "text": "a final file system of the container in",
    "start": "1267840",
    "end": "1270240"
  },
  {
    "text": "our case we simply need to extract the",
    "start": "1270240",
    "end": "1272640"
  },
  {
    "text": "binary image of the unikernel runyou",
    "start": "1272640",
    "end": "1274880"
  },
  {
    "text": "will know where these are in a",
    "start": "1274880",
    "end": "1276000"
  },
  {
    "text": "well-defined location",
    "start": "1276000",
    "end": "1277679"
  },
  {
    "text": "and from there run you can interface",
    "start": "1277679",
    "end": "1279919"
  },
  {
    "text": "with libert and any other",
    "start": "1279919",
    "end": "1282799"
  },
  {
    "text": "virtual machine monitor that we choose",
    "start": "1282799",
    "end": "1284960"
  },
  {
    "text": "to instantiate the uni kernel",
    "start": "1284960",
    "end": "1287440"
  },
  {
    "text": "so to put it all together taking a look",
    "start": "1287440",
    "end": "1289679"
  },
  {
    "start": "1288000",
    "end": "1288000"
  },
  {
    "text": "at our previous systems diagram",
    "start": "1289679",
    "end": "1292000"
  },
  {
    "text": "where our service pods mingled with cube",
    "start": "1292000",
    "end": "1294000"
  },
  {
    "text": "system pods which are managed by",
    "start": "1294000",
    "end": "1296159"
  },
  {
    "text": "container d which is managed by the host",
    "start": "1296159",
    "end": "1298400"
  },
  {
    "text": "operating system which is managed by the",
    "start": "1298400",
    "end": "1300080"
  },
  {
    "text": "hypervisor a unikernel is instantiated",
    "start": "1300080",
    "end": "1302960"
  },
  {
    "text": "from the cube system and it's now its",
    "start": "1302960",
    "end": "1305520"
  },
  {
    "text": "own virtual machine sitting on top of",
    "start": "1305520",
    "end": "1307200"
  },
  {
    "text": "the hypervisor only when it's booted it",
    "start": "1307200",
    "end": "1309760"
  },
  {
    "text": "will do one thing and one thing only and",
    "start": "1309760",
    "end": "1311679"
  },
  {
    "text": "that's perform the actions of the",
    "start": "1311679",
    "end": "1313200"
  },
  {
    "text": "application in our case libert manages",
    "start": "1313200",
    "end": "1315840"
  },
  {
    "text": "interfacing with the hypervisor",
    "start": "1315840",
    "end": "1318400"
  },
  {
    "text": "so enough talk",
    "start": "1318400",
    "end": "1320480"
  },
  {
    "text": "let's check out a demo",
    "start": "1320480",
    "end": "1323360"
  },
  {
    "text": "so",
    "start": "1326240",
    "end": "1327120"
  },
  {
    "text": "here we have a manifest.yaml",
    "start": "1327120",
    "end": "1329760"
  },
  {
    "text": "file it contains um a specification that",
    "start": "1329760",
    "end": "1333440"
  },
  {
    "text": "will deploy two kubernetes and you can",
    "start": "1333440",
    "end": "1334960"
  },
  {
    "text": "see here that it requires um the run u",
    "start": "1334960",
    "end": "1338720"
  },
  {
    "text": "class and pulls the relevant image from",
    "start": "1338720",
    "end": "1341280"
  },
  {
    "text": "our registry containing the packaged uni",
    "start": "1341280",
    "end": "1344000"
  },
  {
    "text": "kernel",
    "start": "1344000",
    "end": "1345120"
  },
  {
    "text": "so when we run it um it launches via",
    "start": "1345120",
    "end": "1347679"
  },
  {
    "text": "kubernetes you just do apply uh we can",
    "start": "1347679",
    "end": "1350000"
  },
  {
    "text": "see that we created a new pod and then",
    "start": "1350000",
    "end": "1351760"
  },
  {
    "text": "it is running",
    "start": "1351760",
    "end": "1353360"
  },
  {
    "text": "um now if we inspect this pod",
    "start": "1353360",
    "end": "1356720"
  },
  {
    "text": "we can just follow along the logs",
    "start": "1356720",
    "end": "1360159"
  },
  {
    "text": "uh you'll see it boots and it's now",
    "start": "1360159",
    "end": "1362000"
  },
  {
    "text": "running uh unicraft this is running uh",
    "start": "1362000",
    "end": "1364880"
  },
  {
    "text": "the nginx instance and it's been",
    "start": "1364880",
    "end": "1366880"
  },
  {
    "text": "allocated an ip address and when we curl",
    "start": "1366880",
    "end": "1369120"
  },
  {
    "text": "it we of course get our",
    "start": "1369120",
    "end": "1371200"
  },
  {
    "text": "unicroft image",
    "start": "1371200",
    "end": "1372640"
  },
  {
    "text": "uh with the payload",
    "start": "1372640",
    "end": "1374880"
  },
  {
    "text": "saying powered by unicroft i've just",
    "start": "1374880",
    "end": "1376880"
  },
  {
    "text": "opened up the kubernetes dashboard and",
    "start": "1376880",
    "end": "1378880"
  },
  {
    "text": "you can see here",
    "start": "1378880",
    "end": "1380240"
  },
  {
    "text": "everything is sort of running and it's",
    "start": "1380240",
    "end": "1382559"
  },
  {
    "text": "appearing as usual in the same place",
    "start": "1382559",
    "end": "1384640"
  },
  {
    "text": "that you would expect",
    "start": "1384640",
    "end": "1387200"
  },
  {
    "text": "cool",
    "start": "1387200",
    "end": "1388400"
  },
  {
    "text": "so",
    "start": "1388400",
    "end": "1389120"
  },
  {
    "start": "1389000",
    "end": "1389000"
  },
  {
    "text": "for future work there's still lots to do",
    "start": "1389120",
    "end": "1391360"
  },
  {
    "text": "and we're looking forward to getting",
    "start": "1391360",
    "end": "1392960"
  },
  {
    "text": "this release very soon for now we want",
    "start": "1392960",
    "end": "1394799"
  },
  {
    "text": "to create a better integration with the",
    "start": "1394799",
    "end": "1396480"
  },
  {
    "text": "oci image and with run you to be able to",
    "start": "1396480",
    "end": "1398880"
  },
  {
    "text": "instantiate unicorn virtual machines in",
    "start": "1398880",
    "end": "1400880"
  },
  {
    "text": "different ways depending on their needs",
    "start": "1400880",
    "end": "1402559"
  },
  {
    "text": "and contexts and there's a lot of",
    "start": "1402559",
    "end": "1404720"
  },
  {
    "text": "metadata that is attributed with the",
    "start": "1404720",
    "end": "1406880"
  },
  {
    "text": "build of a uni kernel um how it's built",
    "start": "1406880",
    "end": "1409840"
  },
  {
    "text": "the things that it contains um if you've",
    "start": "1409840",
    "end": "1412480"
  },
  {
    "text": "ever dived into building the linux",
    "start": "1412480",
    "end": "1414559"
  },
  {
    "text": "kernel",
    "start": "1414559",
    "end": "1415600"
  },
  {
    "text": "k config is its main",
    "start": "1415600",
    "end": "1417919"
  },
  {
    "text": "configuration mechanic and unicroft uses",
    "start": "1417919",
    "end": "1420159"
  },
  {
    "text": "the same system so there's a lot of",
    "start": "1420159",
    "end": "1422320"
  },
  {
    "text": "information about how the unikernel",
    "start": "1422320",
    "end": "1424799"
  },
  {
    "text": "operates before it's even instantiated",
    "start": "1424799",
    "end": "1426880"
  },
  {
    "text": "that we can make use of as we boot them",
    "start": "1426880",
    "end": "1429120"
  },
  {
    "text": "in different places",
    "start": "1429120",
    "end": "1430400"
  },
  {
    "text": "and so if we have a particular file",
    "start": "1430400",
    "end": "1432480"
  },
  {
    "text": "system baked in for instance we can use",
    "start": "1432480",
    "end": "1434720"
  },
  {
    "text": "the different metadata there to",
    "start": "1434720",
    "end": "1437039"
  },
  {
    "text": "locate it in a in a specific place that",
    "start": "1437039",
    "end": "1439360"
  },
  {
    "text": "is a able to facilitate the runtime",
    "start": "1439360",
    "end": "1442159"
  },
  {
    "text": "we're also starting to experiment with",
    "start": "1442159",
    "end": "1444080"
  },
  {
    "text": "new scheduling techniques for kubernetes",
    "start": "1444080",
    "end": "1445760"
  },
  {
    "text": "to be able to co-locate unit kernels",
    "start": "1445760",
    "end": "1447679"
  },
  {
    "text": "unit kernels of course can adopt the",
    "start": "1447679",
    "end": "1449120"
  },
  {
    "text": "same sidecar model seen in typical",
    "start": "1449120",
    "end": "1451039"
  },
  {
    "text": "deployments but we can do some really",
    "start": "1451039",
    "end": "1452640"
  },
  {
    "text": "interesting things like network",
    "start": "1452640",
    "end": "1454080"
  },
  {
    "text": "offloading dma and inter",
    "start": "1454080",
    "end": "1456240"
  },
  {
    "text": "virtual machine communication",
    "start": "1456240",
    "end": "1458400"
  },
  {
    "text": "another thing that we are working on is",
    "start": "1458400",
    "end": "1460080"
  },
  {
    "text": "expanding our oci registry uh with",
    "start": "1460080",
    "end": "1462480"
  },
  {
    "text": "matrices of builds with the same",
    "start": "1462480",
    "end": "1463919"
  },
  {
    "text": "application but for different",
    "start": "1463919",
    "end": "1465360"
  },
  {
    "text": "applications and hardware targets you",
    "start": "1465360",
    "end": "1467440"
  },
  {
    "text": "already see this in major",
    "start": "1467440",
    "end": "1470159"
  },
  {
    "text": "registries for oci containers uh docker",
    "start": "1470159",
    "end": "1473200"
  },
  {
    "text": "hub for instance allows you to download",
    "start": "1473200",
    "end": "1475520"
  },
  {
    "text": "uh a different architecture depending on",
    "start": "1475520",
    "end": "1478640"
  },
  {
    "text": "the oci or depending on the you know the",
    "start": "1478640",
    "end": "1480880"
  },
  {
    "text": "host platform that's requesting it so",
    "start": "1480880",
    "end": "1482240"
  },
  {
    "text": "you can get an arm image or you can get",
    "start": "1482240",
    "end": "1484000"
  },
  {
    "text": "a x86 image for instance and so we want",
    "start": "1484000",
    "end": "1486400"
  },
  {
    "text": "to tailor that experience but to a lot",
    "start": "1486400",
    "end": "1488080"
  },
  {
    "text": "more of a diverse workload",
    "start": "1488080",
    "end": "1490400"
  },
  {
    "text": "um i think that's it for me um thank you",
    "start": "1490400",
    "end": "1492640"
  },
  {
    "text": "so much for having me at kubecon um",
    "start": "1492640",
    "end": "1495360"
  },
  {
    "text": "i know this is a recorded presentation",
    "start": "1495360",
    "end": "1496960"
  },
  {
    "text": "and so if you have any questions please",
    "start": "1496960",
    "end": "1498480"
  },
  {
    "text": "feel free to reach out by email or",
    "start": "1498480",
    "end": "1500640"
  },
  {
    "text": "twitter",
    "start": "1500640",
    "end": "1503640"
  }
]