[
  {
    "text": "hello welcome everyone to another",
    "start": "2159",
    "end": "4319"
  },
  {
    "text": "kitchen session",
    "start": "4319",
    "end": "5520"
  },
  {
    "text": "i hope you enjoy the event in this talk",
    "start": "5520",
    "end": "8400"
  },
  {
    "text": "i'll show you the different ways to",
    "start": "8400",
    "end": "9679"
  },
  {
    "text": "attack storage volumes that are",
    "start": "9679",
    "end": "10960"
  },
  {
    "text": "dynamically provisioned with a csi drive",
    "start": "10960",
    "end": "13200"
  },
  {
    "text": "and how you as an sae can prevent",
    "start": "13200",
    "end": "16240"
  },
  {
    "text": "my name is hendrick i'm a solution",
    "start": "16240",
    "end": "17680"
  },
  {
    "text": "architect at netapp and i help our",
    "start": "17680",
    "end": "19760"
  },
  {
    "text": "customers with storage and data",
    "start": "19760",
    "end": "21039"
  },
  {
    "text": "management solutions for kubernetes",
    "start": "21039",
    "end": "23119"
  },
  {
    "text": "both in public cloud as well as in their",
    "start": "23119",
    "end": "24960"
  },
  {
    "text": "own data centers",
    "start": "24960",
    "end": "26560"
  },
  {
    "text": "and one of the questions i get a lot is",
    "start": "26560",
    "end": "28720"
  },
  {
    "text": "around csi the container storage",
    "start": "28720",
    "end": "30400"
  },
  {
    "text": "interface",
    "start": "30400",
    "end": "31279"
  },
  {
    "text": "which is really nice because it",
    "start": "31279",
    "end": "32558"
  },
  {
    "text": "orchestrates the equation of volumes",
    "start": "32559",
    "end": "34160"
  },
  {
    "text": "snapshots and clones",
    "start": "34160",
    "end": "36000"
  },
  {
    "text": "but the question is how does it protect",
    "start": "36000",
    "end": "37840"
  },
  {
    "text": "my data from unauthorized access",
    "start": "37840",
    "end": "40640"
  },
  {
    "text": "in this session i will show you what is",
    "start": "40640",
    "end": "42559"
  },
  {
    "text": "available in kubernetes and how to",
    "start": "42559",
    "end": "44160"
  },
  {
    "text": "enable and configure it",
    "start": "44160",
    "end": "47280"
  },
  {
    "text": "we will have a live q a at the end so if",
    "start": "47360",
    "end": "49440"
  },
  {
    "text": "you have any questions please let me",
    "start": "49440",
    "end": "50960"
  },
  {
    "text": "know",
    "start": "50960",
    "end": "52079"
  },
  {
    "text": "you can also find me on the cubecon",
    "start": "52079",
    "end": "53440"
  },
  {
    "text": "slack if you'd like to discuss anything",
    "start": "53440",
    "end": "57120"
  },
  {
    "text": "so just as a very brief recap how does",
    "start": "57199",
    "end": "59199"
  },
  {
    "text": "dynamic storage provisioning with csi",
    "start": "59199",
    "end": "61039"
  },
  {
    "text": "work",
    "start": "61039",
    "end": "62239"
  },
  {
    "text": "for the purpose of this session i'm",
    "start": "62239",
    "end": "63680"
  },
  {
    "text": "going to focus on the part level",
    "start": "63680",
    "end": "65920"
  },
  {
    "text": "of course in a real world environment",
    "start": "65920",
    "end": "67439"
  },
  {
    "text": "you would have to stay for set if it is",
    "start": "67439",
    "end": "69119"
  },
  {
    "text": "a stateful workload",
    "start": "69119",
    "end": "70400"
  },
  {
    "text": "or a deployment or replica set i'm",
    "start": "70400",
    "end": "72880"
  },
  {
    "text": "leaving these details out",
    "start": "72880",
    "end": "74159"
  },
  {
    "text": "that they are not relevant for this",
    "start": "74159",
    "end": "75439"
  },
  {
    "text": "topic i'm also focusing on dynamic",
    "start": "75439",
    "end": "78000"
  },
  {
    "text": "storage provisioning with the container",
    "start": "78000",
    "end": "79439"
  },
  {
    "text": "storage interface",
    "start": "79439",
    "end": "82240"
  },
  {
    "text": "so with csi along with the pot the user",
    "start": "82240",
    "end": "84560"
  },
  {
    "text": "requests another kubernetes resource",
    "start": "84560",
    "end": "86400"
  },
  {
    "text": "the persistent volume plane or short pvc",
    "start": "86400",
    "end": "89759"
  },
  {
    "text": "that volume claim references the storage",
    "start": "89759",
    "end": "91600"
  },
  {
    "text": "class the storage class allows to offer",
    "start": "91600",
    "end": "94320"
  },
  {
    "text": "multiple service levels for storage in",
    "start": "94320",
    "end": "96079"
  },
  {
    "text": "our cluster",
    "start": "96079",
    "end": "97119"
  },
  {
    "text": "so the user can decide what type of",
    "start": "97119",
    "end": "98720"
  },
  {
    "text": "storage service he needs by using a",
    "start": "98720",
    "end": "100400"
  },
  {
    "text": "specific storage class for the volume",
    "start": "100400",
    "end": "102240"
  },
  {
    "text": "thing",
    "start": "102240",
    "end": "103680"
  },
  {
    "text": "and this is where the container storage",
    "start": "103680",
    "end": "105040"
  },
  {
    "text": "interface comes into play",
    "start": "105040",
    "end": "107759"
  },
  {
    "text": "the storage class has a csi provisioner",
    "start": "107759",
    "end": "110479"
  },
  {
    "text": "and this is how you can integrate",
    "start": "110479",
    "end": "111759"
  },
  {
    "text": "different storage solutions into",
    "start": "111759",
    "end": "113040"
  },
  {
    "text": "kubernetes",
    "start": "113040",
    "end": "114560"
  },
  {
    "text": "each solution has its own provisioner",
    "start": "114560",
    "end": "116399"
  },
  {
    "text": "that takes care of everything that's",
    "start": "116399",
    "end": "117680"
  },
  {
    "text": "required for that specific solution",
    "start": "117680",
    "end": "120240"
  },
  {
    "text": "but for the user or application all of",
    "start": "120240",
    "end": "122320"
  },
  {
    "text": "these complexities are stacked",
    "start": "122320",
    "end": "123920"
  },
  {
    "text": "away you just create a pvc that",
    "start": "123920",
    "end": "126159"
  },
  {
    "text": "references a storage class",
    "start": "126159",
    "end": "128160"
  },
  {
    "text": "everything else happens automatically by",
    "start": "128160",
    "end": "129840"
  },
  {
    "text": "whatever csi provisioner is running in",
    "start": "129840",
    "end": "132000"
  },
  {
    "text": "your cluster",
    "start": "132000",
    "end": "134560"
  },
  {
    "text": "the provisioner creates an actual",
    "start": "135120",
    "end": "136560"
  },
  {
    "text": "storage volume depending on the solution",
    "start": "136560",
    "end": "139280"
  },
  {
    "text": "you're using",
    "start": "139280",
    "end": "139920"
  },
  {
    "text": "that can be a software-defined storage",
    "start": "139920",
    "end": "141599"
  },
  {
    "text": "running in your kubernetes",
    "start": "141599",
    "end": "143200"
  },
  {
    "text": "or an external storage array of storage",
    "start": "143200",
    "end": "145120"
  },
  {
    "text": "server",
    "start": "145120",
    "end": "146720"
  },
  {
    "text": "the volume from a storage solution is",
    "start": "146720",
    "end": "148560"
  },
  {
    "text": "then represented inside kubernetes as a",
    "start": "148560",
    "end": "150480"
  },
  {
    "text": "persistent volume",
    "start": "150480",
    "end": "151519"
  },
  {
    "text": "or short pv and that pv is bound to the",
    "start": "151519",
    "end": "154800"
  },
  {
    "text": "volume plane",
    "start": "154800",
    "end": "155680"
  },
  {
    "text": "and finally made available as a file",
    "start": "155680",
    "end": "157360"
  },
  {
    "text": "system inside your container",
    "start": "157360",
    "end": "160640"
  },
  {
    "text": "so much for the basics so let's think",
    "start": "160879",
    "end": "163519"
  },
  {
    "text": "about how an attacker might try to get",
    "start": "163519",
    "end": "165120"
  },
  {
    "text": "access to our data",
    "start": "165120",
    "end": "166720"
  },
  {
    "text": "the first one is easy assume the",
    "start": "166720",
    "end": "168879"
  },
  {
    "text": "attacker can run another plot in the",
    "start": "168879",
    "end": "170400"
  },
  {
    "text": "cluster",
    "start": "170400",
    "end": "172480"
  },
  {
    "text": "now an obvious target are our kubernetes",
    "start": "172480",
    "end": "175120"
  },
  {
    "text": "resources",
    "start": "175120",
    "end": "175760"
  },
  {
    "text": "the pv and the pvc if someone could get",
    "start": "175760",
    "end": "178640"
  },
  {
    "text": "access to these",
    "start": "178640",
    "end": "179599"
  },
  {
    "text": "they would be able to mount the volume",
    "start": "179599",
    "end": "181040"
  },
  {
    "text": "into their own pot and access the data",
    "start": "181040",
    "end": "184159"
  },
  {
    "text": "fortunately the answer to this problem",
    "start": "184159",
    "end": "185840"
  },
  {
    "text": "is easy what do we do to separate",
    "start": "185840",
    "end": "188159"
  },
  {
    "text": "resources went up within our cluster",
    "start": "188159",
    "end": "190400"
  },
  {
    "text": "correct namespaces the interesting point",
    "start": "190400",
    "end": "194239"
  },
  {
    "text": "when it comes to storage is",
    "start": "194239",
    "end": "195519"
  },
  {
    "text": "that only the pvc is namespace the",
    "start": "195519",
    "end": "198080"
  },
  {
    "text": "underlying pv",
    "start": "198080",
    "end": "199120"
  },
  {
    "text": "as well as the storage class are global",
    "start": "199120",
    "end": "200640"
  },
  {
    "text": "resources in the cluster",
    "start": "200640",
    "end": "202560"
  },
  {
    "text": "they are not within the specific",
    "start": "202560",
    "end": "203840"
  },
  {
    "text": "namespace that is okay for the storage",
    "start": "203840",
    "end": "206640"
  },
  {
    "text": "class",
    "start": "206640",
    "end": "207040"
  },
  {
    "text": "as it's only used during the dynamic",
    "start": "207040",
    "end": "208640"
  },
  {
    "text": "provisioning of a pv",
    "start": "208640",
    "end": "210080"
  },
  {
    "text": "but doesn't give any access to the",
    "start": "210080",
    "end": "211519"
  },
  {
    "text": "volume itself we're going to look into",
    "start": "211519",
    "end": "213840"
  },
  {
    "text": "limiting access to a storage class later",
    "start": "213840",
    "end": "215519"
  },
  {
    "text": "on",
    "start": "215519",
    "end": "216400"
  },
  {
    "text": "for now just remember that there can be",
    "start": "216400",
    "end": "218400"
  },
  {
    "text": "one and only one default storage class",
    "start": "218400",
    "end": "221280"
  },
  {
    "text": "whenever a user doesn't specify any",
    "start": "221280",
    "end": "223120"
  },
  {
    "text": "storage class as part of the pvc",
    "start": "223120",
    "end": "224959"
  },
  {
    "text": "the default class will be used and most",
    "start": "224959",
    "end": "227599"
  },
  {
    "text": "users don't specify class",
    "start": "227599",
    "end": "229120"
  },
  {
    "text": "so the default class will typically be",
    "start": "229120",
    "end": "230799"
  },
  {
    "text": "used a lot and that means you should be",
    "start": "230799",
    "end": "233040"
  },
  {
    "text": "extra careful when deciding what your",
    "start": "233040",
    "end": "234720"
  },
  {
    "text": "default is",
    "start": "234720",
    "end": "237120"
  },
  {
    "text": "the pv though that looks like it might",
    "start": "237120",
    "end": "238720"
  },
  {
    "text": "be a problem right it's not part of the",
    "start": "238720",
    "end": "240560"
  },
  {
    "text": "namespace",
    "start": "240560",
    "end": "241280"
  },
  {
    "text": "but it directly gives access to the",
    "start": "241280",
    "end": "242959"
  },
  {
    "text": "underlying storage one",
    "start": "242959",
    "end": "244879"
  },
  {
    "text": "the good news is that while it's not",
    "start": "244879",
    "end": "246480"
  },
  {
    "text": "part of the namespace kubernetes still",
    "start": "246480",
    "end": "248720"
  },
  {
    "text": "sort of attaches it to the namespace",
    "start": "248720",
    "end": "250560"
  },
  {
    "text": "once it's bound to a volume plane",
    "start": "250560",
    "end": "253040"
  },
  {
    "text": "and since we are dynamically",
    "start": "253040",
    "end": "254159"
  },
  {
    "text": "provisioning via csi the binding between",
    "start": "254159",
    "end": "256239"
  },
  {
    "text": "pvc and pv happens immediately",
    "start": "256239",
    "end": "258639"
  },
  {
    "text": "it might look like the pv is unprotected",
    "start": "258639",
    "end": "260720"
  },
  {
    "text": "because it's outside the namespace",
    "start": "260720",
    "end": "262720"
  },
  {
    "text": "but kubernetes ensures that no one else",
    "start": "262720",
    "end": "264639"
  },
  {
    "text": "can access it",
    "start": "264639",
    "end": "266320"
  },
  {
    "text": "let's take a look at how that works i",
    "start": "266320",
    "end": "269440"
  },
  {
    "text": "have a kubernetes cluster with",
    "start": "269440",
    "end": "270880"
  },
  {
    "text": "three storage classes silver gold and",
    "start": "270880",
    "end": "273120"
  },
  {
    "text": "basket",
    "start": "273120",
    "end": "274800"
  },
  {
    "text": "i'm using the netapp trident provisioner",
    "start": "274800",
    "end": "276639"
  },
  {
    "text": "simply because i'm most familiar with",
    "start": "276639",
    "end": "278080"
  },
  {
    "text": "that one",
    "start": "278080",
    "end": "278960"
  },
  {
    "text": "but all of this would work the same as",
    "start": "278960",
    "end": "280639"
  },
  {
    "text": "any other csi provisioner",
    "start": "280639",
    "end": "283840"
  },
  {
    "text": "so let's create a volume and a part that",
    "start": "284080",
    "end": "285840"
  },
  {
    "text": "uses the volume",
    "start": "285840",
    "end": "288800"
  },
  {
    "text": "i have a pvc resource just a few",
    "start": "289440",
    "end": "291440"
  },
  {
    "text": "gigabytes that uses the best custodial",
    "start": "291440",
    "end": "294840"
  },
  {
    "text": "class",
    "start": "294840",
    "end": "297840"
  },
  {
    "text": "and i have a very simple alpine pot that",
    "start": "298080",
    "end": "299840"
  },
  {
    "text": "mounts this volume as slash data",
    "start": "299840",
    "end": "301840"
  },
  {
    "text": "and otherwise really doesn't do anything",
    "start": "301840",
    "end": "303360"
  },
  {
    "text": "useful",
    "start": "303360",
    "end": "304960"
  },
  {
    "text": "let's go ahead and create the pvc and",
    "start": "304960",
    "end": "306639"
  },
  {
    "text": "the pot in my tattooing namespace",
    "start": "306639",
    "end": "308720"
  },
  {
    "text": "that only takes a few seconds",
    "start": "308720",
    "end": "311759"
  },
  {
    "text": "we can now check the volume plane and we",
    "start": "311759",
    "end": "313680"
  },
  {
    "text": "see that it is bound already",
    "start": "313680",
    "end": "315280"
  },
  {
    "text": "so all provisioning is completed and the",
    "start": "315280",
    "end": "317039"
  },
  {
    "text": "volume is ready to use",
    "start": "317039",
    "end": "319199"
  },
  {
    "text": "we can also check the underlying pv and",
    "start": "319199",
    "end": "321199"
  },
  {
    "text": "that is bound as well",
    "start": "321199",
    "end": "325680"
  },
  {
    "text": "we also see that the pv has a reclaim",
    "start": "325680",
    "end": "327520"
  },
  {
    "text": "policy of retain",
    "start": "327520",
    "end": "329199"
  },
  {
    "text": "so the volume will continue to exist",
    "start": "329199",
    "end": "331199"
  },
  {
    "text": "even if the claim is deleted",
    "start": "331199",
    "end": "333360"
  },
  {
    "text": "this is especially useful if you want to",
    "start": "333360",
    "end": "335120"
  },
  {
    "text": "delete the pvc but keep the data for",
    "start": "335120",
    "end": "337039"
  },
  {
    "text": "later reuse or restore requirements",
    "start": "337039",
    "end": "340160"
  },
  {
    "text": "now let's take a closer look at the pv",
    "start": "340160",
    "end": "341840"
  },
  {
    "text": "by getting the full yaml output",
    "start": "341840",
    "end": "345039"
  },
  {
    "text": "the magic that protects the pvc from",
    "start": "345039",
    "end": "346960"
  },
  {
    "text": "being accessed by anyone outside my",
    "start": "346960",
    "end": "348639"
  },
  {
    "text": "namespace",
    "start": "348639",
    "end": "349520"
  },
  {
    "text": "is in the claim graph kubernetes adds",
    "start": "349520",
    "end": "352080"
  },
  {
    "text": "this to the pv automatically",
    "start": "352080",
    "end": "353600"
  },
  {
    "text": "as soon as it is bound to a claim and",
    "start": "353600",
    "end": "355840"
  },
  {
    "text": "this contains a reference to the pvc",
    "start": "355840",
    "end": "358080"
  },
  {
    "text": "its namespace as well as the specific",
    "start": "358080",
    "end": "360080"
  },
  {
    "text": "uid of the claim that it is bound to",
    "start": "360080",
    "end": "362800"
  },
  {
    "text": "as long as this claim graph is in place",
    "start": "362800",
    "end": "364720"
  },
  {
    "text": "kubernetes will not allow any other pvc",
    "start": "364720",
    "end": "366800"
  },
  {
    "text": "or namespace to request this volume",
    "start": "366800",
    "end": "369919"
  },
  {
    "text": "what happens if i now delete the ppc the",
    "start": "369919",
    "end": "372479"
  },
  {
    "text": "pv is still there because the policy is",
    "start": "372479",
    "end": "374160"
  },
  {
    "text": "set to retain",
    "start": "374160",
    "end": "375360"
  },
  {
    "text": "but the status changes from bound to",
    "start": "375360",
    "end": "377199"
  },
  {
    "text": "release",
    "start": "377199",
    "end": "378560"
  },
  {
    "text": "even in the released state no one can",
    "start": "378560",
    "end": "380319"
  },
  {
    "text": "reuse the volume or access the data",
    "start": "380319",
    "end": "382240"
  },
  {
    "text": "because the claim ref still exists i can",
    "start": "382240",
    "end": "384880"
  },
  {
    "text": "now patch the pv and remove the uid",
    "start": "384880",
    "end": "386880"
  },
  {
    "text": "reference of the old claim",
    "start": "386880",
    "end": "390080"
  },
  {
    "text": "and when i do that the status of the pv",
    "start": "393680",
    "end": "395680"
  },
  {
    "text": "changes to available",
    "start": "395680",
    "end": "397520"
  },
  {
    "text": "so now i can reuse the pv and bind it to",
    "start": "397520",
    "end": "399759"
  },
  {
    "text": "another volume plane",
    "start": "399759",
    "end": "401280"
  },
  {
    "text": "but the claim rev still contains the",
    "start": "401280",
    "end": "402800"
  },
  {
    "text": "namespace and pvc name",
    "start": "402800",
    "end": "404400"
  },
  {
    "text": "i only deleted the urd so the pv is",
    "start": "404400",
    "end": "406880"
  },
  {
    "text": "still protected cannot be accessed from",
    "start": "406880",
    "end": "408639"
  },
  {
    "text": "any other namespace",
    "start": "408639",
    "end": "410160"
  },
  {
    "text": "if i want to make it available to",
    "start": "410160",
    "end": "411440"
  },
  {
    "text": "another namespace i would need to delete",
    "start": "411440",
    "end": "413520"
  },
  {
    "text": "that part of the claim reps as well",
    "start": "413520",
    "end": "415919"
  },
  {
    "text": "since the pv is a global resource in",
    "start": "415919",
    "end": "417599"
  },
  {
    "text": "kubernetes no one else but a cluster",
    "start": "417599",
    "end": "419599"
  },
  {
    "text": "admin can make that change",
    "start": "419599",
    "end": "422240"
  },
  {
    "text": "the inherent security model of",
    "start": "422240",
    "end": "423680"
  },
  {
    "text": "kubernetes protects the pv",
    "start": "423680",
    "end": "425520"
  },
  {
    "text": "even though it's not part of the",
    "start": "425520",
    "end": "426639"
  },
  {
    "text": "namespace and it also protects it beyond",
    "start": "426639",
    "end": "429120"
  },
  {
    "text": "the lifecycle of the volume plane",
    "start": "429120",
    "end": "431360"
  },
  {
    "text": "so protection mechanism number one is",
    "start": "431360",
    "end": "433120"
  },
  {
    "text": "kind of obvious make use of namespaces",
    "start": "433120",
    "end": "435759"
  },
  {
    "text": "and make sure that no one has access",
    "start": "435759",
    "end": "437280"
  },
  {
    "text": "rights to the persistent volume resource",
    "start": "437280",
    "end": "440960"
  },
  {
    "text": "so if pvc and pv are protected what else",
    "start": "441840",
    "end": "444319"
  },
  {
    "text": "might an attacker do",
    "start": "444319",
    "end": "446240"
  },
  {
    "text": "well bypass the whole mechanism of pvc",
    "start": "446240",
    "end": "448400"
  },
  {
    "text": "and pv and directly access the",
    "start": "448400",
    "end": "450080"
  },
  {
    "text": "underlying storage volume",
    "start": "450080",
    "end": "452160"
  },
  {
    "text": "this is often connected via standard",
    "start": "452160",
    "end": "453759"
  },
  {
    "text": "protocols such as nfs or iscs",
    "start": "453759",
    "end": "456319"
  },
  {
    "text": "and kubernetes has built-in",
    "start": "456319",
    "end": "457599"
  },
  {
    "text": "functionality to do direct inline and",
    "start": "457599",
    "end": "459599"
  },
  {
    "text": "advanced viscosity access in a pod",
    "start": "459599",
    "end": "461759"
  },
  {
    "text": "without using a pvc or pe fortunately",
    "start": "461759",
    "end": "464879"
  },
  {
    "text": "there are ways to prevent that",
    "start": "464879",
    "end": "466240"
  },
  {
    "text": "in particular port security policies and",
    "start": "466240",
    "end": "468319"
  },
  {
    "text": "worldwide sexes",
    "start": "468319",
    "end": "470400"
  },
  {
    "text": "let's take a look at how that works we",
    "start": "470400",
    "end": "472800"
  },
  {
    "text": "have our pot that has the volume",
    "start": "472800",
    "end": "474240"
  },
  {
    "text": "attached",
    "start": "474240",
    "end": "475199"
  },
  {
    "text": "we can take a closer look at that if we",
    "start": "475199",
    "end": "476800"
  },
  {
    "text": "extract into the pot and check what is",
    "start": "476800",
    "end": "478720"
  },
  {
    "text": "mounted",
    "start": "478720",
    "end": "480400"
  },
  {
    "text": "and from there we see that slash data is",
    "start": "480400",
    "end": "482240"
  },
  {
    "text": "backed by the nfs mod",
    "start": "482240",
    "end": "483919"
  },
  {
    "text": "simply because my best car storage class",
    "start": "483919",
    "end": "485599"
  },
  {
    "text": "uses nfs storage",
    "start": "485599",
    "end": "487360"
  },
  {
    "text": "this would be iscsi or anything else we",
    "start": "487360",
    "end": "489599"
  },
  {
    "text": "would see some more details about that",
    "start": "489599",
    "end": "491360"
  },
  {
    "text": "such as the device path on the",
    "start": "491360",
    "end": "492720"
  },
  {
    "text": "kubernetes host the actual mount is",
    "start": "492720",
    "end": "495199"
  },
  {
    "text": "performed by the kubernetes node",
    "start": "495199",
    "end": "496800"
  },
  {
    "text": "not by the pot but we see the mount from",
    "start": "496800",
    "end": "499039"
  },
  {
    "text": "within the pot as well",
    "start": "499039",
    "end": "501680"
  },
  {
    "text": "let's assume that someone found out that",
    "start": "501680",
    "end": "503280"
  },
  {
    "text": "this is the nfs mount",
    "start": "503280",
    "end": "504720"
  },
  {
    "text": "contains the uid of the pv so nothing",
    "start": "504720",
    "end": "507199"
  },
  {
    "text": "you could easily guess",
    "start": "507199",
    "end": "508560"
  },
  {
    "text": "but there are tools such as show mount",
    "start": "508560",
    "end": "510240"
  },
  {
    "text": "to discover all mounts on an",
    "start": "510240",
    "end": "511599"
  },
  {
    "text": "mfs server or iscsi discovery to find",
    "start": "511599",
    "end": "514080"
  },
  {
    "text": "all iscsi luns",
    "start": "514080",
    "end": "516000"
  },
  {
    "text": "with that knowledge an attacker could",
    "start": "516000",
    "end": "517599"
  },
  {
    "text": "simply do an inline nfs mount in the pot",
    "start": "517599",
    "end": "520640"
  },
  {
    "text": "and that would look like this we have a",
    "start": "520640",
    "end": "523360"
  },
  {
    "text": "simple pot definition if we specify a",
    "start": "523360",
    "end": "525120"
  },
  {
    "text": "volume and tell kubernetes that this",
    "start": "525120",
    "end": "527040"
  },
  {
    "text": "should be accessed via nfs",
    "start": "527040",
    "end": "528640"
  },
  {
    "text": "at the same server and export path that",
    "start": "528640",
    "end": "530800"
  },
  {
    "text": "our pv is using",
    "start": "530800",
    "end": "532560"
  },
  {
    "text": "so we bypass the whole pvc and pv",
    "start": "532560",
    "end": "534800"
  },
  {
    "text": "mechanism and do an inline storage",
    "start": "534800",
    "end": "536560"
  },
  {
    "text": "access",
    "start": "536560",
    "end": "537920"
  },
  {
    "text": "and kubernetes will happily do the nfs",
    "start": "537920",
    "end": "539920"
  },
  {
    "text": "mod for us and make the data available",
    "start": "539920",
    "end": "541680"
  },
  {
    "text": "to the pot",
    "start": "541680",
    "end": "543279"
  },
  {
    "text": "i'm using nfs here in the example but",
    "start": "543279",
    "end": "545200"
  },
  {
    "text": "this would work the same with other",
    "start": "545200",
    "end": "546399"
  },
  {
    "text": "protocols as well",
    "start": "546399",
    "end": "549040"
  },
  {
    "text": "so how do we prevent someone from doing",
    "start": "549040",
    "end": "550880"
  },
  {
    "text": "this",
    "start": "550880",
    "end": "552080"
  },
  {
    "text": "how do we control what a pot can do what",
    "start": "552080",
    "end": "554880"
  },
  {
    "text": "security policies",
    "start": "554880",
    "end": "556800"
  },
  {
    "text": "let's take a look at an example besides",
    "start": "556800",
    "end": "559040"
  },
  {
    "text": "the regular security policy settings to",
    "start": "559040",
    "end": "560720"
  },
  {
    "text": "prevent pods from running as root",
    "start": "560720",
    "end": "562720"
  },
  {
    "text": "we can also specify what volume types a",
    "start": "562720",
    "end": "564720"
  },
  {
    "text": "pot can use",
    "start": "564720",
    "end": "566240"
  },
  {
    "text": "there are a couple that we should",
    "start": "566240",
    "end": "567519"
  },
  {
    "text": "include here such as config maps and",
    "start": "567519",
    "end": "569120"
  },
  {
    "text": "sequence",
    "start": "569120",
    "end": "569760"
  },
  {
    "text": "because we won't need these and in",
    "start": "569760",
    "end": "571519"
  },
  {
    "text": "kubernetes they work like a volume as",
    "start": "571519",
    "end": "573120"
  },
  {
    "text": "well",
    "start": "573120",
    "end": "574080"
  },
  {
    "text": "and we want to have persistent volume",
    "start": "574080",
    "end": "575600"
  },
  {
    "text": "claim so users can dynamically provision",
    "start": "575600",
    "end": "577680"
  },
  {
    "text": "volumes",
    "start": "577680",
    "end": "578880"
  },
  {
    "text": "what we don't want is volume types such",
    "start": "578880",
    "end": "580800"
  },
  {
    "text": "as nfs or iscsi",
    "start": "580800",
    "end": "582800"
  },
  {
    "text": "so make sure these are not in your pot",
    "start": "582800",
    "end": "584240"
  },
  {
    "text": "security policy",
    "start": "584240",
    "end": "586560"
  },
  {
    "text": "if i now switch to a user that is",
    "start": "586560",
    "end": "588080"
  },
  {
    "text": "limited by a pot security policy",
    "start": "588080",
    "end": "590080"
  },
  {
    "text": "and i then tried to create the pot with",
    "start": "590080",
    "end": "591600"
  },
  {
    "text": "the inline and a vest mount",
    "start": "591600",
    "end": "593120"
  },
  {
    "text": "kubernetes will prevent me from doing so",
    "start": "593120",
    "end": "595279"
  },
  {
    "text": "the policy provides protection against",
    "start": "595279",
    "end": "597279"
  },
  {
    "text": "that attack",
    "start": "597279",
    "end": "605839"
  },
  {
    "text": "but there's one more thing our attacker",
    "start": "610399",
    "end": "612399"
  },
  {
    "text": "could do instead of doing the nfs mod",
    "start": "612399",
    "end": "614640"
  },
  {
    "text": "inline in the pot",
    "start": "614640",
    "end": "616000"
  },
  {
    "text": "he could create a static persistent",
    "start": "616000",
    "end": "617519"
  },
  {
    "text": "volume that does the nfs access",
    "start": "617519",
    "end": "620560"
  },
  {
    "text": "and that would look like this we simply",
    "start": "620560",
    "end": "623200"
  },
  {
    "text": "define a persistent volume and tell",
    "start": "623200",
    "end": "624800"
  },
  {
    "text": "kubernetes to use the nfs export as the",
    "start": "624800",
    "end": "627040"
  },
  {
    "text": "backing storage for that pv",
    "start": "627040",
    "end": "629920"
  },
  {
    "text": "the attacker could then simply use a pvc",
    "start": "629920",
    "end": "632000"
  },
  {
    "text": "that claims this specifically manually",
    "start": "632000",
    "end": "634000"
  },
  {
    "text": "created pb",
    "start": "634000",
    "end": "635839"
  },
  {
    "text": "we allow pvcs for the pot because this",
    "start": "635839",
    "end": "637839"
  },
  {
    "text": "is what we want to use",
    "start": "637839",
    "end": "639279"
  },
  {
    "text": "so we cannot remove the volume claim",
    "start": "639279",
    "end": "641040"
  },
  {
    "text": "from list of allowed volume types",
    "start": "641040",
    "end": "643120"
  },
  {
    "text": "but we can also not prevent the pvc from",
    "start": "643120",
    "end": "645120"
  },
  {
    "text": "claiming a specific pv that already",
    "start": "645120",
    "end": "647200"
  },
  {
    "text": "exists in the environment",
    "start": "647200",
    "end": "649200"
  },
  {
    "text": "pod security policies do not help with",
    "start": "649200",
    "end": "650959"
  },
  {
    "text": "this",
    "start": "650959",
    "end": "652880"
  },
  {
    "text": "but what we can do is to use role-based",
    "start": "652880",
    "end": "654800"
  },
  {
    "text": "access control and disallow the creation",
    "start": "654800",
    "end": "656720"
  },
  {
    "text": "of pbs",
    "start": "656720",
    "end": "658560"
  },
  {
    "text": "this does not prevent dynamic",
    "start": "658560",
    "end": "659839"
  },
  {
    "text": "provisioning as the pv is created by the",
    "start": "659839",
    "end": "661680"
  },
  {
    "text": "csi driver",
    "start": "661680",
    "end": "662800"
  },
  {
    "text": "and that has permissions for it but it",
    "start": "662800",
    "end": "665040"
  },
  {
    "text": "prevents an attacker from manually",
    "start": "665040",
    "end": "666640"
  },
  {
    "text": "creating a pv that excess storage",
    "start": "666640",
    "end": "668560"
  },
  {
    "text": "it shouldn't have access to so the sre",
    "start": "668560",
    "end": "671920"
  },
  {
    "text": "strikes back by enabling",
    "start": "671920",
    "end": "673279"
  },
  {
    "text": "part security policy that disallows",
    "start": "673279",
    "end": "675440"
  },
  {
    "text": "direct storage access",
    "start": "675440",
    "end": "677120"
  },
  {
    "text": "and by configuring role-based access",
    "start": "677120",
    "end": "678800"
  },
  {
    "text": "control so that users cannot manually",
    "start": "678800",
    "end": "680800"
  },
  {
    "text": "create a pv",
    "start": "680800",
    "end": "683440"
  },
  {
    "text": "we talked about preventing access to the",
    "start": "683760",
    "end": "685440"
  },
  {
    "text": "pvc the pv",
    "start": "685440",
    "end": "686880"
  },
  {
    "text": "and the underlying storage volume but",
    "start": "686880",
    "end": "689680"
  },
  {
    "text": "what about a valid application that",
    "start": "689680",
    "end": "691360"
  },
  {
    "text": "should access the volume",
    "start": "691360",
    "end": "692880"
  },
  {
    "text": "how do we ensure that the file system",
    "start": "692880",
    "end": "694399"
  },
  {
    "text": "permissions are correctly set for our",
    "start": "694399",
    "end": "696000"
  },
  {
    "text": "application",
    "start": "696000",
    "end": "697680"
  },
  {
    "text": "kubernetes can take care of that for us",
    "start": "697680",
    "end": "699680"
  },
  {
    "text": "we just do need to enable it in the",
    "start": "699680",
    "end": "701279"
  },
  {
    "text": "security context of our file",
    "start": "701279",
    "end": "703519"
  },
  {
    "text": "let's take a look within the port we can",
    "start": "703519",
    "end": "707360"
  },
  {
    "text": "set the security context to control the",
    "start": "707360",
    "end": "709360"
  },
  {
    "text": "user that our app is running with as",
    "start": "709360",
    "end": "711200"
  },
  {
    "text": "well as the group",
    "start": "711200",
    "end": "712800"
  },
  {
    "text": "in this case here i set the user id to",
    "start": "712800",
    "end": "714560"
  },
  {
    "text": "100 000 and the group id",
    "start": "714560",
    "end": "716000"
  },
  {
    "text": "to 200 000. in addition to that i can",
    "start": "716000",
    "end": "718720"
  },
  {
    "text": "set the apis group",
    "start": "718720",
    "end": "719600"
  },
  {
    "text": "parameter and this specifies the group",
    "start": "719600",
    "end": "721920"
  },
  {
    "text": "permissions on the volume",
    "start": "721920",
    "end": "723680"
  },
  {
    "text": "so when the container starts kubernetes",
    "start": "723680",
    "end": "725440"
  },
  {
    "text": "actually sets the group of all files and",
    "start": "725440",
    "end": "727200"
  },
  {
    "text": "folders in our pvc to this value and the",
    "start": "727200",
    "end": "730079"
  },
  {
    "text": "container is started with this group",
    "start": "730079",
    "end": "731839"
  },
  {
    "text": "in my example 300 000 as a supplemental",
    "start": "731839",
    "end": "734320"
  },
  {
    "text": "group",
    "start": "734320",
    "end": "734880"
  },
  {
    "text": "so if the application can access the",
    "start": "734880",
    "end": "737040"
  },
  {
    "text": "data on the volume",
    "start": "737040",
    "end": "739360"
  },
  {
    "text": "there are two caveats with this first",
    "start": "739360",
    "end": "742079"
  },
  {
    "text": "even if you specify the fs group in the",
    "start": "742079",
    "end": "744000"
  },
  {
    "text": "security context",
    "start": "744000",
    "end": "745279"
  },
  {
    "text": "there are some cases in which kubernetes",
    "start": "745279",
    "end": "746880"
  },
  {
    "text": "does not apply these permissions",
    "start": "746880",
    "end": "749200"
  },
  {
    "text": "simply because it's not possible as the",
    "start": "749200",
    "end": "751040"
  },
  {
    "text": "underlying storage does not support that",
    "start": "751040",
    "end": "753200"
  },
  {
    "text": "or in cases where applying those",
    "start": "753200",
    "end": "754800"
  },
  {
    "text": "permissions might break things",
    "start": "754800",
    "end": "756800"
  },
  {
    "text": "for example if you have a read write",
    "start": "756800",
    "end": "758240"
  },
  {
    "text": "many volume with multiple pots that",
    "start": "758240",
    "end": "760160"
  },
  {
    "text": "access the same data",
    "start": "760160",
    "end": "761680"
  },
  {
    "text": "you cannot have each pot apply different",
    "start": "761680",
    "end": "763519"
  },
  {
    "text": "permissions to the volume",
    "start": "763519",
    "end": "765200"
  },
  {
    "text": "one pot would effectively lock out the",
    "start": "765200",
    "end": "766880"
  },
  {
    "text": "other part",
    "start": "766880",
    "end": "768959"
  },
  {
    "text": "also if the fs type is not specified in",
    "start": "768959",
    "end": "770959"
  },
  {
    "text": "the storage class",
    "start": "770959",
    "end": "772160"
  },
  {
    "text": "kubernetes will not apply those",
    "start": "772160",
    "end": "773440"
  },
  {
    "text": "permissions assuming that it is a file",
    "start": "773440",
    "end": "775120"
  },
  {
    "text": "system that does not support this",
    "start": "775120",
    "end": "777200"
  },
  {
    "text": "so in those cases kubernetes does not",
    "start": "777200",
    "end": "778959"
  },
  {
    "text": "apply the fs group permission",
    "start": "778959",
    "end": "780320"
  },
  {
    "text": "even if you set them in a security",
    "start": "780320",
    "end": "782000"
  },
  {
    "text": "context",
    "start": "782000",
    "end": "783839"
  },
  {
    "text": "there is a recent addition in the csi",
    "start": "783839",
    "end": "785519"
  },
  {
    "text": "spec that allows drivers to specify if",
    "start": "785519",
    "end": "787600"
  },
  {
    "text": "they support every scoop changes or not",
    "start": "787600",
    "end": "790079"
  },
  {
    "text": "that will hopefully make this a little",
    "start": "790079",
    "end": "791680"
  },
  {
    "text": "more transparent in the future",
    "start": "791680",
    "end": "795040"
  },
  {
    "text": "the second caveat with fs group is",
    "start": "795040",
    "end": "796720"
  },
  {
    "text": "performance by default kubernetes will",
    "start": "796720",
    "end": "799200"
  },
  {
    "text": "do a recursive modification across the",
    "start": "799200",
    "end": "801040"
  },
  {
    "text": "entire file system",
    "start": "801040",
    "end": "802320"
  },
  {
    "text": "every time the pvc is mounted usually",
    "start": "802320",
    "end": "805440"
  },
  {
    "text": "you would only need that operation the",
    "start": "805440",
    "end": "807040"
  },
  {
    "text": "first time the pvc gets mounted",
    "start": "807040",
    "end": "808800"
  },
  {
    "text": "but kubernetes doesn't have any way to",
    "start": "808800",
    "end": "810720"
  },
  {
    "text": "figure out if this is the first time the",
    "start": "810720",
    "end": "812240"
  },
  {
    "text": "volume gets used or not",
    "start": "812240",
    "end": "814079"
  },
  {
    "text": "so it goes through all files and",
    "start": "814079",
    "end": "815360"
  },
  {
    "text": "directories every single time",
    "start": "815360",
    "end": "817920"
  },
  {
    "text": "and if you have a large file system with",
    "start": "817920",
    "end": "819519"
  },
  {
    "text": "lots of small files that can take many",
    "start": "819519",
    "end": "821440"
  },
  {
    "text": "minutes",
    "start": "821440",
    "end": "822000"
  },
  {
    "text": "and your pot won't come up until this is",
    "start": "822000",
    "end": "823760"
  },
  {
    "text": "done so every time your pot is",
    "start": "823760",
    "end": "826000"
  },
  {
    "text": "rescheduled to another node the volume",
    "start": "826000",
    "end": "827760"
  },
  {
    "text": "has to be mounted again",
    "start": "827760",
    "end": "828880"
  },
  {
    "text": "and this process is triggered",
    "start": "828880",
    "end": "832160"
  },
  {
    "text": "in order to address this kubernetes 120",
    "start": "832320",
    "end": "834720"
  },
  {
    "text": "introduced the new option in the",
    "start": "834720",
    "end": "836079"
  },
  {
    "text": "security context",
    "start": "836079",
    "end": "838079"
  },
  {
    "text": "you can now set the fs group change",
    "start": "838079",
    "end": "839760"
  },
  {
    "text": "policy to enroute mismatch",
    "start": "839760",
    "end": "842639"
  },
  {
    "text": "kubernetes will then check the",
    "start": "842639",
    "end": "843920"
  },
  {
    "text": "permissions of the volume route",
    "start": "843920",
    "end": "846320"
  },
  {
    "text": "if they already match the requested",
    "start": "846320",
    "end": "848000"
  },
  {
    "text": "efforts group kubernetes assumes that",
    "start": "848000",
    "end": "849920"
  },
  {
    "text": "the rest of the file system is ok as",
    "start": "849920",
    "end": "851360"
  },
  {
    "text": "well",
    "start": "851360",
    "end": "851839"
  },
  {
    "text": "and skips the recursive modification of",
    "start": "851839",
    "end": "853760"
  },
  {
    "text": "permissions",
    "start": "853760",
    "end": "855120"
  },
  {
    "text": "so unless you or your application mess",
    "start": "855120",
    "end": "857040"
  },
  {
    "text": "around with your permission",
    "start": "857040",
    "end": "858639"
  },
  {
    "text": "this option enables kubernetes to only",
    "start": "858639",
    "end": "860480"
  },
  {
    "text": "apply permissions once and avoid the",
    "start": "860480",
    "end": "862160"
  },
  {
    "text": "performance penalty on every mount",
    "start": "862160",
    "end": "865759"
  },
  {
    "text": "let's see this in action we create the",
    "start": "866160",
    "end": "868320"
  },
  {
    "text": "pvc and the pot",
    "start": "868320",
    "end": "869760"
  },
  {
    "text": "that has the average group set to 300",
    "start": "869760",
    "end": "871440"
  },
  {
    "text": "thousand if we now exec into the pot",
    "start": "871440",
    "end": "874079"
  },
  {
    "text": "and check the permissions of our slash",
    "start": "874079",
    "end": "875600"
  },
  {
    "text": "data amount we see that they are",
    "start": "875600",
    "end": "877600"
  },
  {
    "text": "correctly applied",
    "start": "877600",
    "end": "885839"
  },
  {
    "text": "so we looked into securing the pvc and",
    "start": "890000",
    "end": "892000"
  },
  {
    "text": "pv preventing inline mounts of the",
    "start": "892000",
    "end": "894000"
  },
  {
    "text": "storage volume",
    "start": "894000",
    "end": "894720"
  },
  {
    "text": "and controlling processor functions but",
    "start": "894720",
    "end": "897600"
  },
  {
    "text": "how do we ensure that the user on our",
    "start": "897600",
    "end": "899199"
  },
  {
    "text": "platform behaves",
    "start": "899199",
    "end": "900880"
  },
  {
    "text": "how do we control the amount of capacity",
    "start": "900880",
    "end": "902720"
  },
  {
    "text": "consumed by a namespace",
    "start": "902720",
    "end": "904720"
  },
  {
    "text": "well the same way we control usage of",
    "start": "904720",
    "end": "906560"
  },
  {
    "text": "cpu and memory",
    "start": "906560",
    "end": "908079"
  },
  {
    "text": "resource quotas and limit ranges let's",
    "start": "908079",
    "end": "911199"
  },
  {
    "text": "explore that",
    "start": "911199",
    "end": "913440"
  },
  {
    "text": "this is an example for resource quota",
    "start": "913440",
    "end": "915519"
  },
  {
    "text": "that controls storage consumption",
    "start": "915519",
    "end": "918000"
  },
  {
    "text": "we can limit the number of pvcs as well",
    "start": "918000",
    "end": "920399"
  },
  {
    "text": "as setting a limit for the total",
    "start": "920399",
    "end": "921600"
  },
  {
    "text": "capacity of our previous",
    "start": "921600",
    "end": "924000"
  },
  {
    "text": "we can also break those limits down by",
    "start": "924000",
    "end": "925680"
  },
  {
    "text": "storage class",
    "start": "925680",
    "end": "927040"
  },
  {
    "text": "so in this example the user can consume",
    "start": "927040",
    "end": "928959"
  },
  {
    "text": "a total of 200 gigabytes from storage",
    "start": "928959",
    "end": "930720"
  },
  {
    "text": "class basker",
    "start": "930720",
    "end": "931680"
  },
  {
    "text": "and with a maximum of five pvcs and in",
    "start": "931680",
    "end": "934959"
  },
  {
    "text": "addition to that 600 gigabytes from",
    "start": "934959",
    "end": "936720"
  },
  {
    "text": "storage class gold with a maximum of 10",
    "start": "936720",
    "end": "938839"
  },
  {
    "text": "pvcs",
    "start": "938839",
    "end": "941040"
  },
  {
    "text": "let's see if that works we have our",
    "start": "941040",
    "end": "943199"
  },
  {
    "text": "example pot",
    "start": "943199",
    "end": "944399"
  },
  {
    "text": "and now i'm requesting 500 gigabyte of",
    "start": "944399",
    "end": "946320"
  },
  {
    "text": "storage class pascal",
    "start": "946320",
    "end": "948160"
  },
  {
    "text": "remember the total limit for all volumes",
    "start": "948160",
    "end": "949920"
  },
  {
    "text": "in that class was 200 gigabyte",
    "start": "949920",
    "end": "952079"
  },
  {
    "text": "so i shouldn't be able to get a single",
    "start": "952079",
    "end": "953600"
  },
  {
    "text": "500 gigabyte volume",
    "start": "953600",
    "end": "956720"
  },
  {
    "text": "and i can't",
    "start": "960800",
    "end": "963759"
  },
  {
    "text": "now this sets upper limits for the whole",
    "start": "967759",
    "end": "969440"
  },
  {
    "text": "namespace in addition to that we can",
    "start": "969440",
    "end": "971600"
  },
  {
    "text": "also apply limits for each individual",
    "start": "971600",
    "end": "973279"
  },
  {
    "text": "volume",
    "start": "973279",
    "end": "974560"
  },
  {
    "text": "we do that with a limit range for",
    "start": "974560",
    "end": "976959"
  },
  {
    "text": "example we could specify that each pvc",
    "start": "976959",
    "end": "979040"
  },
  {
    "text": "has to have a minimum size of 1 gigabyte",
    "start": "979040",
    "end": "981279"
  },
  {
    "text": "and a maximum size of 10 gigabyte",
    "start": "981279",
    "end": "984959"
  },
  {
    "text": "now if i modify my pot to request the 20",
    "start": "990240",
    "end": "992320"
  },
  {
    "text": "gigabyte volume",
    "start": "992320",
    "end": "993519"
  },
  {
    "text": "the limit range will prevent me from",
    "start": "993519",
    "end": "995120"
  },
  {
    "text": "doing so",
    "start": "995120",
    "end": "997839"
  },
  {
    "text": "last but not least there are a few",
    "start": "1013440",
    "end": "1015680"
  },
  {
    "text": "things outside of kubernetes itself",
    "start": "1015680",
    "end": "1017680"
  },
  {
    "text": "that you can do to improve security",
    "start": "1017680",
    "end": "1020399"
  },
  {
    "text": "first on the prodigal side",
    "start": "1020399",
    "end": "1022320"
  },
  {
    "text": "many csi drivers use standard protocols",
    "start": "1022320",
    "end": "1024558"
  },
  {
    "text": "such as nfs or iscardia in the",
    "start": "1024559",
    "end": "1026160"
  },
  {
    "text": "background",
    "start": "1026160",
    "end": "1027520"
  },
  {
    "text": "we won't have time today to go over all",
    "start": "1027520",
    "end": "1029360"
  },
  {
    "text": "the best practices for these protocols",
    "start": "1029360",
    "end": "1031600"
  },
  {
    "text": "but here are a few things you should",
    "start": "1031600",
    "end": "1032880"
  },
  {
    "text": "consider",
    "start": "1032880",
    "end": "1034640"
  },
  {
    "text": "for nfs the first question is about",
    "start": "1034640",
    "end": "1036400"
  },
  {
    "text": "protocol version",
    "start": "1036400",
    "end": "1038000"
  },
  {
    "text": "nfs version 3 has been around for a very",
    "start": "1038000",
    "end": "1040079"
  },
  {
    "text": "long time",
    "start": "1040079",
    "end": "1041199"
  },
  {
    "text": "the code for the client is very robust",
    "start": "1041199",
    "end": "1042880"
  },
  {
    "text": "and optimized",
    "start": "1042880",
    "end": "1045120"
  },
  {
    "text": "the nfs v4 standard also has been",
    "start": "1045120",
    "end": "1046959"
  },
  {
    "text": "published for quite a while now but",
    "start": "1046959",
    "end": "1048319"
  },
  {
    "text": "adoption was slow",
    "start": "1048319",
    "end": "1050400"
  },
  {
    "text": "but in general security was much more of",
    "start": "1050400",
    "end": "1052320"
  },
  {
    "text": "a design focus for v4",
    "start": "1052320",
    "end": "1054080"
  },
  {
    "text": "so it should be considered the more",
    "start": "1054080",
    "end": "1055440"
  },
  {
    "text": "secure version however",
    "start": "1055440",
    "end": "1057600"
  },
  {
    "text": "a lot of that is based on using cabras",
    "start": "1057600",
    "end": "1059440"
  },
  {
    "text": "authentication",
    "start": "1059440",
    "end": "1060799"
  },
  {
    "text": "something you cannot easily implement in",
    "start": "1060799",
    "end": "1062320"
  },
  {
    "text": "your kubernetes cluster as there is no",
    "start": "1062320",
    "end": "1064160"
  },
  {
    "text": "way to distribute the required key tab",
    "start": "1064160",
    "end": "1066080"
  },
  {
    "text": "across all the nodes so you won't really",
    "start": "1066080",
    "end": "1068720"
  },
  {
    "text": "benefit from cables",
    "start": "1068720",
    "end": "1070240"
  },
  {
    "text": "but if possible i'd still say go for nfs",
    "start": "1070240",
    "end": "1072480"
  },
  {
    "text": "version 4.",
    "start": "1072480",
    "end": "1073840"
  },
  {
    "text": "most linux systems are configured to try",
    "start": "1073840",
    "end": "1075760"
  },
  {
    "text": "version 4 first and then fall back to",
    "start": "1075760",
    "end": "1077440"
  },
  {
    "text": "version 3 if necessary",
    "start": "1077440",
    "end": "1079280"
  },
  {
    "text": "but you can also enforce a specific",
    "start": "1079280",
    "end": "1080960"
  },
  {
    "text": "version with mount options specified in",
    "start": "1080960",
    "end": "1082960"
  },
  {
    "text": "your storage class",
    "start": "1082960",
    "end": "1085360"
  },
  {
    "text": "as all mounting of volumes is handled by",
    "start": "1085360",
    "end": "1087120"
  },
  {
    "text": "your csi driver there's no need for the",
    "start": "1087120",
    "end": "1089280"
  },
  {
    "text": "show mount utility that reveals the list",
    "start": "1089280",
    "end": "1091280"
  },
  {
    "text": "of all exports on the nfs server",
    "start": "1091280",
    "end": "1093440"
  },
  {
    "text": "as we saw earlier the mount path can be",
    "start": "1093440",
    "end": "1095360"
  },
  {
    "text": "used to create an inline mount in a pod",
    "start": "1095360",
    "end": "1098000"
  },
  {
    "text": "not revealing that mount path in the",
    "start": "1098000",
    "end": "1099520"
  },
  {
    "text": "first place is a good additional step",
    "start": "1099520",
    "end": "1101360"
  },
  {
    "text": "you can take",
    "start": "1101360",
    "end": "1102559"
  },
  {
    "text": "so if your nfs server allows to disable",
    "start": "1102559",
    "end": "1104480"
  },
  {
    "text": "show mode functionality",
    "start": "1104480",
    "end": "1105840"
  },
  {
    "text": "then make use of that root squash in nfs",
    "start": "1105840",
    "end": "1109440"
  },
  {
    "text": "allows you to map any file activity of",
    "start": "1109440",
    "end": "1111120"
  },
  {
    "text": "the root user to someone else",
    "start": "1111120",
    "end": "1113039"
  },
  {
    "text": "typically the user nobody as your",
    "start": "1113039",
    "end": "1115280"
  },
  {
    "text": "containers shouldn't run with root",
    "start": "1115280",
    "end": "1116640"
  },
  {
    "text": "anyway",
    "start": "1116640",
    "end": "1117360"
  },
  {
    "text": "enabling root squash does not impact",
    "start": "1117360",
    "end": "1118960"
  },
  {
    "text": "your applications but it makes sure that",
    "start": "1118960",
    "end": "1121200"
  },
  {
    "text": "no one can access files with root",
    "start": "1121200",
    "end": "1122880"
  },
  {
    "text": "permissions",
    "start": "1122880",
    "end": "1124000"
  },
  {
    "text": "this is already enabled by default on",
    "start": "1124000",
    "end": "1125679"
  },
  {
    "text": "most nfs",
    "start": "1125679",
    "end": "1128640"
  },
  {
    "text": "most servers also allow you to configure",
    "start": "1128640",
    "end": "1130320"
  },
  {
    "text": "export policies that limit access to an",
    "start": "1130320",
    "end": "1132320"
  },
  {
    "text": "nfs export to specific appear addresses",
    "start": "1132320",
    "end": "1134480"
  },
  {
    "text": "or hostnames",
    "start": "1134480",
    "end": "1136000"
  },
  {
    "text": "it acts a little bit like a firewall",
    "start": "1136000",
    "end": "1137760"
  },
  {
    "text": "just for nfs",
    "start": "1137760",
    "end": "1139200"
  },
  {
    "text": "as the nodes in the kubernetes cluster",
    "start": "1139200",
    "end": "1140799"
  },
  {
    "text": "might change over time your csi driver",
    "start": "1140799",
    "end": "1143039"
  },
  {
    "text": "should have the ability to dynamically",
    "start": "1143039",
    "end": "1144640"
  },
  {
    "text": "update this xbox",
    "start": "1144640",
    "end": "1147440"
  },
  {
    "text": "for iscsi as a protocol two things are",
    "start": "1147440",
    "end": "1149360"
  },
  {
    "text": "relevant first",
    "start": "1149360",
    "end": "1150720"
  },
  {
    "text": "iscsi allows you to configure",
    "start": "1150720",
    "end": "1152000"
  },
  {
    "text": "authentication between client and server",
    "start": "1152000",
    "end": "1154320"
  },
  {
    "text": "this is based on check that might not be",
    "start": "1154320",
    "end": "1156960"
  },
  {
    "text": "the most secure authentication mechanism",
    "start": "1156960",
    "end": "1158720"
  },
  {
    "text": "in the world",
    "start": "1158720",
    "end": "1159520"
  },
  {
    "text": "but it definitely is better than no",
    "start": "1159520",
    "end": "1160960"
  },
  {
    "text": "authentication at all",
    "start": "1160960",
    "end": "1162960"
  },
  {
    "text": "if you have a good csi driver that",
    "start": "1162960",
    "end": "1164640"
  },
  {
    "text": "should automatically handle all chat",
    "start": "1164640",
    "end": "1166320"
  },
  {
    "text": "setup on the nodes in your cluster",
    "start": "1166320",
    "end": "1169520"
  },
  {
    "text": "and then similar to the export list for",
    "start": "1169520",
    "end": "1171440"
  },
  {
    "text": "nfs servers",
    "start": "1171440",
    "end": "1172559"
  },
  {
    "text": "many iscsi servers support initiator",
    "start": "1172559",
    "end": "1174640"
  },
  {
    "text": "groups as a way to limit storage access",
    "start": "1174640",
    "end": "1176559"
  },
  {
    "text": "to specific nodes",
    "start": "1176559",
    "end": "1178240"
  },
  {
    "text": "in the case of iscsi that is usually not",
    "start": "1178240",
    "end": "1180400"
  },
  {
    "text": "based on ip addresses but on the iqn",
    "start": "1180400",
    "end": "1182480"
  },
  {
    "text": "identifier of the client",
    "start": "1182480",
    "end": "1184480"
  },
  {
    "text": "and again if you have a good csi driver",
    "start": "1184480",
    "end": "1186160"
  },
  {
    "text": "that should manage this automatically",
    "start": "1186160",
    "end": "1187600"
  },
  {
    "text": "for you",
    "start": "1187600",
    "end": "1188480"
  },
  {
    "text": "so whenever a new node is added to your",
    "start": "1188480",
    "end": "1190480"
  },
  {
    "text": "cluster the csi driver automatically",
    "start": "1190480",
    "end": "1192480"
  },
  {
    "text": "adds the iqn of node",
    "start": "1192480",
    "end": "1194000"
  },
  {
    "text": "to the list of the stored server and",
    "start": "1194000",
    "end": "1197039"
  },
  {
    "text": "beyond that",
    "start": "1197039",
    "end": "1197919"
  },
  {
    "text": "please check the documentation offices",
    "start": "1197919",
    "end": "1199600"
  },
  {
    "text": "either either many drivers support",
    "start": "1199600",
    "end": "1201440"
  },
  {
    "text": "additional features",
    "start": "1201440",
    "end": "1202400"
  },
  {
    "text": "that are vendor-specific and allow you",
    "start": "1202400",
    "end": "1204000"
  },
  {
    "text": "to control encryption of data",
    "start": "1204000",
    "end": "1206080"
  },
  {
    "text": "in flight and at rest configure quality",
    "start": "1206080",
    "end": "1208880"
  },
  {
    "text": "of service",
    "start": "1208880",
    "end": "1209520"
  },
  {
    "text": "to guarantee certain performance levels",
    "start": "1209520",
    "end": "1211520"
  },
  {
    "text": "but also to limit storage consumption",
    "start": "1211520",
    "end": "1213360"
  },
  {
    "text": "based on a number of iops or bandwidth",
    "start": "1213360",
    "end": "1215840"
  },
  {
    "text": "and best practices around securing the",
    "start": "1215840",
    "end": "1217520"
  },
  {
    "text": "driver itself",
    "start": "1217520",
    "end": "1218400"
  },
  {
    "text": "and the communication between driver and",
    "start": "1218400",
    "end": "1220000"
  },
  {
    "text": "the backend system",
    "start": "1220000",
    "end": "1222400"
  },
  {
    "text": "let's do a quick recap make use of",
    "start": "1222400",
    "end": "1224960"
  },
  {
    "text": "namespaces and the inherent security",
    "start": "1224960",
    "end": "1226799"
  },
  {
    "text": "model of kubernetes will protect the pvc",
    "start": "1226799",
    "end": "1228720"
  },
  {
    "text": "in the namespace",
    "start": "1228720",
    "end": "1229679"
  },
  {
    "text": "as well as the tv that lives outside of",
    "start": "1229679",
    "end": "1231600"
  },
  {
    "text": "the",
    "start": "1231600",
    "end": "1233360"
  },
  {
    "text": "configure namespace pod security policy",
    "start": "1233360",
    "end": "1234880"
  },
  {
    "text": "that prevents inline nfs and iscs",
    "start": "1234880",
    "end": "1238000"
  },
  {
    "text": "enable always access control so users",
    "start": "1238000",
    "end": "1240320"
  },
  {
    "text": "cannot manually create a pd",
    "start": "1240320",
    "end": "1242240"
  },
  {
    "text": "everything should be based on dynamic",
    "start": "1242240",
    "end": "1243760"
  },
  {
    "text": "provision",
    "start": "1243760",
    "end": "1245840"
  },
  {
    "text": "set the security context of your pot to",
    "start": "1245840",
    "end": "1247840"
  },
  {
    "text": "control the file system permissions of",
    "start": "1247840",
    "end": "1249360"
  },
  {
    "text": "the volume",
    "start": "1249360",
    "end": "1251840"
  },
  {
    "text": "make use of resource quotas and limit",
    "start": "1252480",
    "end": "1254320"
  },
  {
    "text": "ranges to control storage consumption",
    "start": "1254320",
    "end": "1257760"
  },
  {
    "text": "if you use storage protocols such as nfs",
    "start": "1257760",
    "end": "1259600"
  },
  {
    "text": "and nazcasi configure them correctly",
    "start": "1259600",
    "end": "1263200"
  },
  {
    "text": "and check what additional features you",
    "start": "1263200",
    "end": "1264720"
  },
  {
    "text": "see is either of course",
    "start": "1264720",
    "end": "1267600"
  },
  {
    "text": "i hope you enjoyed this session if you",
    "start": "1269600",
    "end": "1271039"
  },
  {
    "text": "have any questions or comments",
    "start": "1271039",
    "end": "1272640"
  },
  {
    "text": "please let me know thank you",
    "start": "1272640",
    "end": "1276960"
  }
]