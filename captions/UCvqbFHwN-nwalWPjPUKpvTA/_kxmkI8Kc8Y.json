[
  {
    "text": "hi everyone welcome back we have another talk for you another exciting security talk for you securing kubernetes with trusted",
    "start": "30",
    "end": "5940"
  },
  {
    "text": "platform module presented by Alex for Nicole Sookie and Alec and ing Latinos",
    "start": "5940",
    "end": "14450"
  },
  {
    "text": "Google kubernetes engine engineers on the security team please make sure to",
    "start": "14450",
    "end": "20310"
  },
  {
    "text": "rate the talk online after the talk on the shed website and if you have any questions after the talk I'll be running around the microphone thanks Maya",
    "start": "20310",
    "end": "29160"
  },
  {
    "text": "all right so this is securing kubernetes with a trusted platform module mildly",
    "start": "29160",
    "end": "34829"
  },
  {
    "text": "introduced us so manager this is Alex and we're gonna talk to you today about",
    "start": "34829",
    "end": "39870"
  },
  {
    "text": "trusted platform modules or tpms who knows what a TPM is awesome",
    "start": "39870",
    "end": "46469"
  },
  {
    "text": "who used one actually like program something for it sweet okay for those of you who actually haven't used it a lot",
    "start": "46469",
    "end": "53180"
  },
  {
    "text": "TPMS are small crypto coprocessors they can be a hardware chip like in this",
    "start": "53180",
    "end": "58530"
  },
  {
    "text": "picture they can be a software implementation for example in your hypervisor or your firmware they're",
    "start": "58530",
    "end": "64260"
  },
  {
    "text": "meant to be cheap and literally ball powered so they don't have high",
    "start": "64260",
    "end": "69630"
  },
  {
    "text": "throughput they don't have a lot of memory but they still have a lot of useful functionality this pack for this",
    "start": "69630",
    "end": "76110"
  },
  {
    "text": "is designed by the trusted computing group which is an independent industry organization and they have to mainstream",
    "start": "76110",
    "end": "82470"
  },
  {
    "text": "versions of the spec but we will focus on 2.0 for this talk just to set some",
    "start": "82470",
    "end": "88320"
  },
  {
    "text": "expectations for this talk we are not presenting an existing project that you",
    "start": "88320",
    "end": "94860"
  },
  {
    "text": "can just leave and like flip a switch in your cluster news this is more to show",
    "start": "94860",
    "end": "100500"
  },
  {
    "text": "to match some of the capabilities of TPMS to the kubernetes world and sort of",
    "start": "100500",
    "end": "105869"
  },
  {
    "text": "fuel further work by cigars or any of the other people interested in in this",
    "start": "105869",
    "end": "114500"
  },
  {
    "text": "okay so we will try to tackle some pretty tricky security problems that we",
    "start": "114500",
    "end": "120299"
  },
  {
    "text": "face as you give for hosting companies but little anyone running a cluster will also sometimes have to think about the",
    "start": "120299",
    "end": "128610"
  },
  {
    "text": "first one of these is no trust bootstrap and this is essentially how do we provision",
    "start": "128610",
    "end": "134260"
  },
  {
    "text": "credentials for a cubelet in a trusted way from the very beginning and also how",
    "start": "134260",
    "end": "139810"
  },
  {
    "text": "do we trust those credentials going forward and also make that automated without any human involvement second",
    "start": "139810",
    "end": "148450"
  },
  {
    "text": "problem is the first secret problem so any sensitive data in a cities such as secrets we want to encrypt in transit a",
    "start": "148450",
    "end": "154870"
  },
  {
    "text": "done trust when you encrypt them a trust you essentially encrypt a bunch of data with a key well how do you secure that key",
    "start": "154870",
    "end": "161770"
  },
  {
    "text": "when it's supposed to be available master and protected from a compromised the first two problems we have made",
    "start": "161770",
    "end": "169170"
  },
  {
    "text": "proofs of concept for we don't have the time unfortunately start for all the demos but just as they work the third",
    "start": "169170",
    "end": "177940"
  },
  {
    "text": "one is a little more theoretical we haven't actually wrote like we didn't",
    "start": "177940",
    "end": "183130"
  },
  {
    "text": "actually write any code to do this but in theory is supposed to work and this is that tamper-evident solid logging",
    "start": "183130",
    "end": "189780"
  },
  {
    "text": "audit logging in this zone is a straightforward problem you just log everything that's happening to your",
    "start": "189780",
    "end": "195790"
  },
  {
    "text": "resources and ship it over somewhere but to make them tamper evidence you have to think about what if attacker actually",
    "start": "195790",
    "end": "202180"
  },
  {
    "text": "compromises the thing that tries those logs and modifies them delete them and whatnot and we believe there's a",
    "start": "202180",
    "end": "208600"
  },
  {
    "text": "solution to detect any tampering after the fact so for this talk we'll start by",
    "start": "208600",
    "end": "216730"
  },
  {
    "text": "briefly covering some theory some features of the TPMS that we'll use and then we'll tackle those three problems",
    "start": "216730",
    "end": "222700"
  },
  {
    "text": "one by one okay so some theory on TPMS",
    "start": "222700",
    "end": "228900"
  },
  {
    "text": "some of the use cases for CTMS out like out in the wilds currently in use that",
    "start": "228900",
    "end": "236110"
  },
  {
    "text": "outside of communities world our platform integrity so for example you",
    "start": "236110",
    "end": "241690"
  },
  {
    "text": "have a Corp laptop how do you verify that it hasn't been compromised tampered",
    "start": "241690",
    "end": "246970"
  },
  {
    "text": "with and before letting it onto your Corp Network before shipping it any software updates and things like that",
    "start": "246970",
    "end": "252300"
  },
  {
    "text": "the other one is full disk encryption so BitLocker and DM crypt for example we'll use TPMS if they're available to protect",
    "start": "252300",
    "end": "260049"
  },
  {
    "text": "the encryption keys used for actually encryption",
    "start": "260049",
    "end": "265740"
  },
  {
    "text": "so okay the main selling point of TPMS at a high level is memory isolation TPMS",
    "start": "265949",
    "end": "273669"
  },
  {
    "text": "live in a separate world of their own outside of your OS firmware bootloader",
    "start": "273669",
    "end": "279009"
  },
  {
    "text": "and the software on your system interacts with them through a set of",
    "start": "279009",
    "end": "285099"
  },
  {
    "text": "very specialized commands it's a simple request response protocol but then the",
    "start": "285099",
    "end": "291789"
  },
  {
    "text": "TPM is completely passive so unless this system access to do something it doesn't do anything",
    "start": "291789",
    "end": "297900"
  },
  {
    "text": "TPM has two types of memory so the runtime memory same as your RAM that",
    "start": "297900",
    "end": "303039"
  },
  {
    "text": "swiped on reboots and non-volatile memory which is persistent across reboots there are commands that allow",
    "start": "303039",
    "end": "310030"
  },
  {
    "text": "you to read and write there's non-volatile memory arbitrarily pretty much as if it's just another little disk",
    "start": "310030",
    "end": "316840"
  },
  {
    "text": "but you cannot read the runtime memory directly you can not only interact with",
    "start": "316840",
    "end": "322479"
  },
  {
    "text": "it through very specific commands and none of the data in there is available",
    "start": "322479",
    "end": "327490"
  },
  {
    "text": "for two to five shot of the TPM and the",
    "start": "327490",
    "end": "333039"
  },
  {
    "text": "main thread model they are meant to be used against is when your OS is",
    "start": "333039",
    "end": "338800"
  },
  {
    "text": "compromised when you don't trust all the software running outside that's outside of the TPM you want to protect some very",
    "start": "338800",
    "end": "346659"
  },
  {
    "text": "very sensitive small pieces of data or credentials let's cover a few features",
    "start": "346659",
    "end": "353620"
  },
  {
    "text": "we'll use first one is TPM keys so these are cryptographic keys that are started",
    "start": "353620",
    "end": "360159"
  },
  {
    "text": "in the runtime memory that's very your typical RSA or elliptic Keys symmetric a",
    "start": "360159",
    "end": "366280"
  },
  {
    "text": "symmetric whatnot there's a lot of attributes you don't read them directly",
    "start": "366280",
    "end": "371710"
  },
  {
    "text": "because they're a rare sight in the runtime memory you interact with them through specific commands such as sign",
    "start": "371710",
    "end": "376990"
  },
  {
    "text": "this blob or decrypt encrypt things like that but you don't actually have the key in your memory yet yourself next thing",
    "start": "376990",
    "end": "386560"
  },
  {
    "text": "is endorsement key so this is a special type of key that's baked into the TPM",
    "start": "386560",
    "end": "392540"
  },
  {
    "text": "and to match that 80 p.m. vendor will also sign a TLS certificate and put that",
    "start": "392540",
    "end": "398990"
  },
  {
    "text": "into the non-volatile memory this key and certificate are supposed to act as",
    "start": "398990",
    "end": "404660"
  },
  {
    "text": "machine identity so if you can prove that you have both of those you prove that you own the TPM and no one else is",
    "start": "404660",
    "end": "411020"
  },
  {
    "text": "theoretically supposed to be able to do that next we'll cover PCRs and",
    "start": "411020",
    "end": "417830"
  },
  {
    "text": "measurements measurement is just a fancy crypto board for hashing something so if you want to measure for example your",
    "start": "417830",
    "end": "424190"
  },
  {
    "text": "kernel you just run it through a hash function and the hash resulting hash is called a measurement this is used for",
    "start": "424190",
    "end": "430400"
  },
  {
    "text": "example in something called measure boot so when your machine boots it goes",
    "start": "430400",
    "end": "435950"
  },
  {
    "text": "through a sequence of steps it starts with boot loader then goes into firmer and it goes into your kernel",
    "start": "435950",
    "end": "442060"
  },
  {
    "text": "those pieces of software passed execution from one to the other with measured boots before passing execution",
    "start": "442060",
    "end": "448970"
  },
  {
    "text": "to the next step they will actually measure it so they'll hash the night the binary of the next step record that in a",
    "start": "448970",
    "end": "455870"
  },
  {
    "text": "TPM and then pass the execution onwards what it does is if you if an attacker",
    "start": "455870",
    "end": "462470"
  },
  {
    "text": "modifies any of the subsequent piece of software that will reflect in the measurement and you can detect it and do",
    "start": "462470",
    "end": "470030"
  },
  {
    "text": "appropriate action these measurements are stored in the platform configuration registers or VCRs these elect annual",
    "start": "470030",
    "end": "477860"
  },
  {
    "text": "registers in the runtime memory of the TPM they are bound in number they have",
    "start": "477860",
    "end": "484130"
  },
  {
    "text": "defined purposes in the spec for example PCR 7 will be used for secure boots information and the value you put in the",
    "start": "484130",
    "end": "494720"
  },
  {
    "text": "VCRs is not written in directly you don't just set this PCR to this measurement you use an operation called",
    "start": "494720",
    "end": "500000"
  },
  {
    "text": "extent which essentially concatenates the existing value with the new measurement hashes that and gives it a",
    "start": "500000",
    "end": "507350"
  },
  {
    "text": "new value of the PCR that means that you",
    "start": "507350",
    "end": "514130"
  },
  {
    "text": "can record a sequence of measurements in the same PCR without blowing up your memory and as long as the sequence is",
    "start": "514130",
    "end": "521330"
  },
  {
    "text": "the same the PCR values will always be the same so you can record multiple steps good process for example in the same in",
    "start": "521330",
    "end": "529370"
  },
  {
    "text": "a single pcr register there is a ton more functionality that TPMS provides",
    "start": "529370",
    "end": "534760"
  },
  {
    "text": "but we don't have the time to go into that and we're not gonna use them for this talk but there's gonna be a link to",
    "start": "534760",
    "end": "540470"
  },
  {
    "text": "the spec at the end of this the slides and feel free to read and come up with",
    "start": "540470",
    "end": "545690"
  },
  {
    "text": "more creative ways to use it in kubernetes but this is a very complicated and functional piece of",
    "start": "545690",
    "end": "553630"
  },
  {
    "text": "technology okay let's finally jump into the fun parts let's tackle our security problems the",
    "start": "553630",
    "end": "559190"
  },
  {
    "text": "node trust bootstrap is first as I described before is just how do we provision credentials for equivalents in",
    "start": "559190",
    "end": "566360"
  },
  {
    "text": "a trusted way kubernetes for that provides a very handy API called the",
    "start": "566360",
    "end": "571519"
  },
  {
    "text": "certificate signing request API so your master serves that as it's a kubernetes",
    "start": "571519",
    "end": "578899"
  },
  {
    "text": "tile API started by master at a very very high level it works this way",
    "start": "578899",
    "end": "584560"
  },
  {
    "text": "cubelets sends a CSR request master doesn't validation keyboard approves it sends",
    "start": "584560",
    "end": "590449"
  },
  {
    "text": "back a certificate before we jump into the details the threat model we will try",
    "start": "590449",
    "end": "597589"
  },
  {
    "text": "to implement this under is an attacker that can compromise the pod they can",
    "start": "597589",
    "end": "604040"
  },
  {
    "text": "break out of the pod they can compromise the node so we assume they have full root access to the node usually they",
    "start": "604040",
    "end": "610459"
  },
  {
    "text": "will try to go after application configs to sort of get some reconnaissance data",
    "start": "610459",
    "end": "616790"
  },
  {
    "text": "on your environment move laterally they will try to maybe steal your secrets to access some",
    "start": "616790",
    "end": "622519"
  },
  {
    "text": "sensitive data and usually you'll want to persist this access for as long as possible to catch any future data that",
    "start": "622519",
    "end": "630290"
  },
  {
    "text": "comes into your cluster alright so in the CSR API what we want to prevent as",
    "start": "630290",
    "end": "638329"
  },
  {
    "text": "two things first we want to prevent the attacker from abusing this API to mint",
    "start": "638329",
    "end": "644089"
  },
  {
    "text": "new credentials pretending to be a node we also want to as much as possible limit the attacker from stealing the",
    "start": "644089",
    "end": "651110"
  },
  {
    "text": "credentials that do not has already provisioned and using it offline",
    "start": "651110",
    "end": "657579"
  },
  {
    "text": "so the certificates and request API is named after the x.509 protocol CSR's and",
    "start": "657690",
    "end": "664050"
  },
  {
    "text": "that's the standard protocol that certificate authorities used to request an issue certificates the way CSR's work",
    "start": "664050",
    "end": "671940"
  },
  {
    "text": "in that protocol is we have your CA you have your hosts at once the certificates",
    "start": "671940",
    "end": "677610"
  },
  {
    "text": "the host creates a public/private key pair locally then they start creating the csr which is essentially just the",
    "start": "677610",
    "end": "683910"
  },
  {
    "text": "public key some metadata such as DNS name IP address use cases for this",
    "start": "683910",
    "end": "689010"
  },
  {
    "text": "certificate and then a signature of those two things with the private key the hosting sends that over to the CAC",
    "start": "689010",
    "end": "696480"
  },
  {
    "text": "it does some validation uses private key to sign it and sends back the certificate the important point here is",
    "start": "696480",
    "end": "703260"
  },
  {
    "text": "that the private key never leaves the machine that requests the certificate and is meant to be always kept secure",
    "start": "703260",
    "end": "708780"
  },
  {
    "text": "well the public key can travel freely in the CSR API in the kubernetes world your",
    "start": "708780",
    "end": "715230"
  },
  {
    "text": "node is your host your master controls your CA so node creates this you started",
    "start": "715230",
    "end": "720540"
  },
  {
    "text": "with the keeper and sends it over to master master dust invalidation signs",
    "start": "720540",
    "end": "725850"
  },
  {
    "text": "that with its local CA and sends back the certificate so we essentially scope down the problem of this trust bootstrap",
    "start": "725850",
    "end": "732420"
  },
  {
    "text": "down to validating a CSR request from an arbitrary machine summer on your network",
    "start": "732420",
    "end": "739230"
  },
  {
    "text": "the naive approach to fix that would be for example this issue a shared",
    "start": "739230",
    "end": "745200"
  },
  {
    "text": "credential to all the nodes in potential everywhere and master also has knowledge of this pretend credential this will be",
    "start": "745200",
    "end": "751440"
  },
  {
    "text": "done by your management plane so your cloud provider or whatever else that spins up your VMs and configures them",
    "start": "751440",
    "end": "756950"
  },
  {
    "text": "that credential start on the nodes it's passed along as the bearer token with the ICS our request master checks that",
    "start": "756950",
    "end": "765510"
  },
  {
    "text": "and signs the certificate and sends back the certificate this is a pretty weak",
    "start": "765510",
    "end": "772730"
  },
  {
    "text": "implementation because if our attacker can compromise a node they can just wait",
    "start": "772730",
    "end": "779100"
  },
  {
    "text": "for that credential to appear grab it and mint arbitrary retire but rarely",
    "start": "779100",
    "end": "784890"
  },
  {
    "text": "node identity as I can say I'm node a and B and Master will just trust it we can do",
    "start": "784890",
    "end": "790170"
  },
  {
    "text": "a little better by issuing credentials that are unique to that note so it's not gets its own unique credential but it's",
    "start": "790170",
    "end": "797579"
  },
  {
    "text": "still not great because I can just wait for the CSR process to complete they can",
    "start": "797579",
    "end": "802920"
  },
  {
    "text": "grab that no credential off of the disk and just pretend to be that note just slightly better you can't mint arbitrary",
    "start": "802920",
    "end": "809490"
  },
  {
    "text": "identities but it's still pretty bad it doesn't accomplish our goals so let's finally get to use our new",
    "start": "809490",
    "end": "816690"
  },
  {
    "text": "fancy TPM for this as I mentioned before TPM scam baked with the endorsement key",
    "start": "816690",
    "end": "823230"
  },
  {
    "text": "baked in which is meant to act as a identity of that machine",
    "start": "823230",
    "end": "828480"
  },
  {
    "text": "so our idea is we will use that key to sign part of the CSR to prove that we",
    "start": "828480",
    "end": "833880"
  },
  {
    "text": "have the private the endorsement key itself and it will also attach the endorsement key certificate along with the request",
    "start": "833880",
    "end": "839060"
  },
  {
    "text": "so cubed as before creates a private key public private key on disk science the",
    "start": "839060",
    "end": "847319"
  },
  {
    "text": "CSR with the interest on key sends over the CSR blob endorsement key signature",
    "start": "847319",
    "end": "852449"
  },
  {
    "text": "and the endorsement key certificate master which knows about the certificate",
    "start": "852449",
    "end": "858149"
  },
  {
    "text": "authority that TPM used to sign this the key certificate will validate it they'll validate the signature of the CSR blob",
    "start": "858149",
    "end": "865019"
  },
  {
    "text": "and importantly it will also check the intended membership so is this note",
    "start": "865019",
    "end": "870720"
  },
  {
    "text": "expected to be in this cluster at all because otherwise any note that has a TPM for exactly the same vendor it could",
    "start": "870720",
    "end": "876899"
  },
  {
    "text": "just pretend to be a note and get a certificate so then it's size issues the",
    "start": "876899",
    "end": "883319"
  },
  {
    "text": "certificate sends it back and it's stored on disk okay so that doesn't really solve our second",
    "start": "883319",
    "end": "889139"
  },
  {
    "text": "problem attacker just waiting for that whole dance to be finished and just grabbing the certificate after so why",
    "start": "889139",
    "end": "895920"
  },
  {
    "text": "don't we just put in the GPM because that way they can't accelerate it so the idea here is exactly the same as the",
    "start": "895920",
    "end": "902069"
  },
  {
    "text": "previous example the only main the only difference is that we start by creating the key in the TPM instead of on disk",
    "start": "902069",
    "end": "908600"
  },
  {
    "text": "and then we just go through exactly the same step we assign this circuit if Santi CSR with the ek send that over to",
    "start": "908600",
    "end": "916620"
  },
  {
    "text": "the master master validates it validates membership and sends back a",
    "start": "916620",
    "end": "922260"
  },
  {
    "text": "certificate that's stored on disk so it's okay to start a certificate itself on disk without the private key you",
    "start": "922260",
    "end": "927870"
  },
  {
    "text": "can't really use a certificate on its own for a TLS handshake and the attacker can no longer steal this private key to",
    "start": "927870",
    "end": "937170"
  },
  {
    "text": "do no impersonation of line so this the need to be physically in a no the",
    "start": "937170",
    "end": "944460"
  },
  {
    "text": "physically have to execute code on the note every time they want to do a TLS handshake to talk to the master so it's",
    "start": "944460",
    "end": "950430"
  },
  {
    "text": "not a like a perfect solution but it's about as good as we can do given that our attacker has a root access to the",
    "start": "950430",
    "end": "957300"
  },
  {
    "text": "node right the good things here we can immediately lock down this come from like if we figure out a way that",
    "start": "957300",
    "end": "964440"
  },
  {
    "text": "attacker used to get into the note we can immediately lock them out and that locks them out from using those",
    "start": "964440",
    "end": "970620"
  },
  {
    "text": "credentials when they can no longer as a good code on the node also we're using an industry standard for this so this",
    "start": "970620",
    "end": "978240"
  },
  {
    "text": "solution is relatively portable and can be used on Prem and on different cloud providers so this was no trespass trap",
    "start": "978240",
    "end": "986160"
  },
  {
    "text": "and I'm gonna hand it over to Alex to talk about the other two problems",
    "start": "986160",
    "end": "990950"
  },
  {
    "text": "so in this section our talk will examine probably the most common use case for using TPM which is storing credentials",
    "start": "994830",
    "end": "1002779"
  },
  {
    "text": "at rest and by credentials I mean things like API keys passwords service account",
    "start": "1002779",
    "end": "1009769"
  },
  {
    "text": "tokens so to make the discussion more concrete we'll examine how TPM could be",
    "start": "1009769",
    "end": "1016640"
  },
  {
    "text": "used while integrating with key management services so can quickly cubed",
    "start": "1016640",
    "end": "1023390"
  },
  {
    "text": "concretely kubernetes starting this version one point ten supports integration with various kms providers",
    "start": "1023390",
    "end": "1029630"
  },
  {
    "text": "via kms plugin so how does this work when cube API server for example",
    "start": "1029630",
    "end": "1036350"
  },
  {
    "text": "receives a request to create a secret this secret is passed over UNIX the main",
    "start": "1036350",
    "end": "1042770"
  },
  {
    "text": "socket to game s plugin give me as plugin in turn orchestrates interaction",
    "start": "1042770",
    "end": "1048740"
  },
  {
    "text": "with for example Google Cloud EMS or AWS cloud HSM to encrypt the data eventually",
    "start": "1048740",
    "end": "1056840"
  },
  {
    "text": "a cube API server receives the encrypted payload and passes it over to HDD already in the encrypted form where it",
    "start": "1056840",
    "end": "1062840"
  },
  {
    "text": "is stored in a CD stored on disk an encrypted form I purposely made it a lot",
    "start": "1062840",
    "end": "1070760"
  },
  {
    "text": "of details from this flow we have a link in a reference slide to a prior cube con",
    "start": "1070760",
    "end": "1076130"
  },
  {
    "text": "talk that discusses game as plug-in and envelope encryption in more detail so if you interested please take a look so in",
    "start": "1076130",
    "end": "1084200"
  },
  {
    "text": "our trap model we assume that in this trap model we assume that attackers have complete access to an offline image of",
    "start": "1084200",
    "end": "1090980"
  },
  {
    "text": "the master so think of a scenario where attackers were able to get a backup of the master VM or the way they were able",
    "start": "1090980",
    "end": "1098210"
  },
  {
    "text": "to get a clone of the master VM we also",
    "start": "1098210",
    "end": "1104780"
  },
  {
    "text": "need to assume because we're interacting with cloud service that kms is",
    "start": "1104780",
    "end": "1109790"
  },
  {
    "text": "accessible over the internet and that came as plugin must have must be running",
    "start": "1109790",
    "end": "1114919"
  },
  {
    "text": "in a security context that allows it to make encrypt decrypt calls against the kms so this introduces what we call a",
    "start": "1114919",
    "end": "1123800"
  },
  {
    "text": "first secret or last mile problem who the fact that Camus plugin must be have",
    "start": "1123800",
    "end": "1129190"
  },
  {
    "text": "the security context to interact with EMS it must have a credential in order to bootstrap that trust and all an issue",
    "start": "1129190",
    "end": "1136840"
  },
  {
    "text": "and request in all stalkin for for the kms service however this is an important",
    "start": "1136840",
    "end": "1143200"
  },
  {
    "text": "part if such bootstrap credential is persisted to disk alongside the HDD data",
    "start": "1143200",
    "end": "1148270"
  },
  {
    "text": "file then we haven't really achieved anything because when attackers get that offline image they can extract that",
    "start": "1148270",
    "end": "1153730"
  },
  {
    "text": "credential and start making calls to kms and unwrap our secrets so therefore our",
    "start": "1153730",
    "end": "1159850"
  },
  {
    "text": "design objective core design objective here is that at no point in time we should be storing credential for kms on",
    "start": "1159850",
    "end": "1166270"
  },
  {
    "text": "disk which we assume attackers will have access to so I'm pretty sure you already",
    "start": "1166270",
    "end": "1172600"
  },
  {
    "text": "know where this is all going yes we can use TPM to steal credential kms",
    "start": "1172600",
    "end": "1177760"
  },
  {
    "text": "credential and instruct EMS plugin to",
    "start": "1177760",
    "end": "1182860"
  },
  {
    "text": "instill this credential at startup time so what does it mean to seal and seal so",
    "start": "1182860",
    "end": "1189970"
  },
  {
    "text": "Andrew mentioned GPM supports has this concept of keys which are managed",
    "start": "1189970",
    "end": "1195520"
  },
  {
    "text": "internally so we can use one of those skis to encrypt encrypt the let's say a",
    "start": "1195520",
    "end": "1201640"
  },
  {
    "text": "service account token which is stored on disk so that basically solves our threat",
    "start": "1201640",
    "end": "1206650"
  },
  {
    "text": "model where the credential is now stored on this but it is encrypted by TPM and kms plug-in a startup will interact with",
    "start": "1206650",
    "end": "1214480"
  },
  {
    "text": "TPM and steal the credential and place it in its memory so therefore at no",
    "start": "1214480",
    "end": "1220299"
  },
  {
    "text": "point in time I was storing the credential on disk we can extend this",
    "start": "1220299",
    "end": "1227049"
  },
  {
    "text": "model a little bit further into the online attack world where we can",
    "start": "1227049",
    "end": "1232360"
  },
  {
    "text": "leverage PCRs so Andrew talked about measure boot where the ID basic idea being that you can make assertions about",
    "start": "1232360",
    "end": "1241240"
  },
  {
    "text": "the state of the system by looking at the PCR registers and if the PCR registers indicative of the state that",
    "start": "1241240",
    "end": "1247600"
  },
  {
    "text": "you trust and verify you can take those registers and you can create a policy out of them which can be assigned to a",
    "start": "1247600",
    "end": "1255309"
  },
  {
    "text": "key in other words we can lock this the use of this key to this specific state of the system in",
    "start": "1255309",
    "end": "1261400"
  },
  {
    "text": "other words if attackers were able to inject a rootkit or something along",
    "start": "1261400",
    "end": "1267130"
  },
  {
    "text": "those lines then the key will become unusable because the state of PC ours will differ from what the policy states",
    "start": "1267130",
    "end": "1275158"
  },
  {
    "text": "so what do you go from here assuming you like you you interested in this approach how would you how would you implement it",
    "start": "1275340",
    "end": "1281200"
  },
  {
    "text": "in your environment so you have two options available to you you can use a go TPM library which thank you Andrew",
    "start": "1281200",
    "end": "1288789"
  },
  {
    "text": "for being a great contributor there I have an example here TPM seal and seal it's about 40 lines of",
    "start": "1288789",
    "end": "1296080"
  },
  {
    "text": "ball code where you can instrument your application to steal and steal secrets",
    "start": "1296080",
    "end": "1302110"
  },
  {
    "text": "from TPM this is available today if you",
    "start": "1302110",
    "end": "1307539"
  },
  {
    "text": "prefer to keep that logic out of your application take a look at another project code TPM two tools where you",
    "start": "1307539",
    "end": "1316210"
  },
  {
    "text": "will find command line utilities which you can which allow you to interact with",
    "start": "1316210",
    "end": "1321400"
  },
  {
    "text": "TPM so you can think of a like for example in the need container which will start up and seal the credentials and",
    "start": "1321400",
    "end": "1327460"
  },
  {
    "text": "place them on a shared volume for your main application to use ok I think",
    "start": "1327460",
    "end": "1333970"
  },
  {
    "text": "that's all I have to say about first secret problem and let's move to the",
    "start": "1333970",
    "end": "1339309"
  },
  {
    "text": "tamper evident audit logs so if you're not familiar with the df' tamper evident",
    "start": "1339309",
    "end": "1344530"
  },
  {
    "text": "logs it will become fairly clear and when I describe the threat model so just bear with me for a minute",
    "start": "1344530",
    "end": "1349679"
  },
  {
    "text": "so we're back in the same scenario of using EMS plugin with the goal of",
    "start": "1349679",
    "end": "1355000"
  },
  {
    "text": "protecting our secrets encrypting our secrets but this scenario is very different in this scenario we assuming",
    "start": "1355000",
    "end": "1360940"
  },
  {
    "text": "that attacker has a root access on the live master host and the goal of the",
    "start": "1360940",
    "end": "1368230"
  },
  {
    "text": "attackers is to extract exfiltrate this secrets from the from the master and use",
    "start": "1368230",
    "end": "1373960"
  },
  {
    "text": "them somewhere else in other words for attackers this is just a stepping stone they're not actually particularly",
    "start": "1373960",
    "end": "1379390"
  },
  {
    "text": "interested in this particular cluster they're after some other system and they want to extract the credentials",
    "start": "1379390",
    "end": "1385110"
  },
  {
    "text": "undetected without raising any others and use those credentials somewhere else what is our goal excuse me",
    "start": "1385110",
    "end": "1393159"
  },
  {
    "text": "course we want to detect that compromise and we want to revoke the credentials revoke the credentials the part of being",
    "start": "1393159",
    "end": "1402580"
  },
  {
    "text": "not discovered is very important here which implies that attackers will try to cover their tracks and will modify the",
    "start": "1402580",
    "end": "1408039"
  },
  {
    "text": "audit log entries let me first explain how GPM auditing works TPM auditing",
    "start": "1408039",
    "end": "1414549"
  },
  {
    "text": "works very similar conceptually to to measure boot in measure boot we",
    "start": "1414549",
    "end": "1419739"
  },
  {
    "text": "measuring the software the sequence of different pieces of software that executes during boot with with audit",
    "start": "1419739",
    "end": "1427450"
  },
  {
    "text": "logging we measure the sequence of commands the TPM executes so what is the measurement of a command let's take a",
    "start": "1427450",
    "end": "1434200"
  },
  {
    "text": "command for example TPM has a command TPM - H Mac which generates H Mac so",
    "start": "1434200",
    "end": "1439749"
  },
  {
    "text": "that command has a unique code in TPM and we take that unique code the inputs",
    "start": "1439749",
    "end": "1444789"
  },
  {
    "text": "to the H Mac function its outputs concatenate it all together hash it and",
    "start": "1444789",
    "end": "1450669"
  },
  {
    "text": "then extend it over the audit register and what it registers are similar to PCRs but they are in fact similar pieces",
    "start": "1450669",
    "end": "1457869"
  },
  {
    "text": "of hardware on the TPM so let me took a take a look at it before I jump into an",
    "start": "1457869",
    "end": "1463869"
  },
  {
    "text": "example and explain how that works in practice I wanted to explain probably an",
    "start": "1463869",
    "end": "1469210"
  },
  {
    "text": "obvious thing that GPM is a very memory constrained device so we can't just write log entries into the TPM directly",
    "start": "1469210",
    "end": "1475779"
  },
  {
    "text": "just not possible just doesn't have enough memory this means that we should be able to safely store our log outside",
    "start": "1475779",
    "end": "1481899"
  },
  {
    "text": "the TPM on disk because would it lock may grow quite large however as you will",
    "start": "1481899",
    "end": "1487179"
  },
  {
    "text": "see we can still maintain detect tampering by virtue of the TPM so let me",
    "start": "1487179",
    "end": "1493179"
  },
  {
    "text": "set up this example in this example I will use I will assume that Q Byrne ADC",
    "start": "1493179",
    "end": "1498729"
  },
  {
    "text": "certificate authority uses TPM sign operations in order to sign certificates",
    "start": "1498729",
    "end": "1504369"
  },
  {
    "text": "by the way this is another great use case we didn't have time to cover here but imagine taking the signing key of",
    "start": "1504369",
    "end": "1511570"
  },
  {
    "text": "the Kuban ADC in placing in add hardware that dramatically improves the security posture of your cluster so but back to",
    "start": "1511570",
    "end": "1519129"
  },
  {
    "text": "my example we have we should the first certificate and in the lock maintained",
    "start": "1519129",
    "end": "1525999"
  },
  {
    "text": "by the sea or by proxy that process the request to the CA we wrote exactly the data in fact that",
    "start": "1525999",
    "end": "1533080"
  },
  {
    "text": "is the CSR that will be signed that would both that was signed by BC also",
    "start": "1533080",
    "end": "1538360"
  },
  {
    "text": "note is that the fact of signing the FC a certificate request was issued a TPM",
    "start": "1538360",
    "end": "1544570"
  },
  {
    "text": "signed to command which we audit and what we have in a TPM audit register is the digest of that operation and you can",
    "start": "1544570",
    "end": "1552640"
  },
  {
    "text": "imagine that goes on for a long time then we issue another certificate and over time the audit register basically",
    "start": "1552640",
    "end": "1558730"
  },
  {
    "text": "reflects the life cycle the whole life cycle of the see that comes on a darker",
    "start": "1558730",
    "end": "1565210"
  },
  {
    "text": "and they issue a certificate certificate number three and again the audit",
    "start": "1565210",
    "end": "1570760"
  },
  {
    "text": "register reflects that fact so from attackers point of view dealing with the audio talk is very simple it's just a",
    "start": "1570760",
    "end": "1577000"
  },
  {
    "text": "text file they can go safely they can easily remove that that record from the from the from the log however the fact",
    "start": "1577000",
    "end": "1585160"
  },
  {
    "text": "that they remove the fact that the certificate 3 was issued does not change anything with respect to the audit",
    "start": "1585160",
    "end": "1591070"
  },
  {
    "text": "register attackers cannot write cannot roll back the value of the audit register back it's just not something",
    "start": "1591070",
    "end": "1597220"
  },
  {
    "text": "that TPM will allow you to do so that that's your problem reduced I understand where this is going we will use the fact",
    "start": "1597220",
    "end": "1603970"
  },
  {
    "text": "that now the wooded register does not correspond with the actual interest in the log how do you catch attackers it's",
    "start": "1603970",
    "end": "1612190"
  },
  {
    "text": "a three-step process first we issue TPM gate command what it digests this gives",
    "start": "1612190",
    "end": "1618580"
  },
  {
    "text": "us the signed structure it is signed by the key in the key p.m. which contains the current value of the audit register",
    "start": "1618580",
    "end": "1625560"
  },
  {
    "text": "this also reset the registers to zeros and then we're looking at our logs and",
    "start": "1625560",
    "end": "1631270"
  },
  {
    "text": "we start replaying the key p.m. sign operations and once we're done replaying we expect the value of the audit",
    "start": "1631270",
    "end": "1637090"
  },
  {
    "text": "register to be exactly the same what we got in the step right of the replay and if they register do not match like in",
    "start": "1637090",
    "end": "1644080"
  },
  {
    "text": "this case we obviously need to assume a compromise because our we Mitch we need to seem a compromise or at least minute",
    "start": "1644080",
    "end": "1649750"
  },
  {
    "text": "assume the tampering was logging because the the the state of the audio dog does",
    "start": "1649750",
    "end": "1654880"
  },
  {
    "text": "not respond to the to the state of the audit register there is one thing that",
    "start": "1654880",
    "end": "1660160"
  },
  {
    "text": "attackers can also try attackers can also think in terms of what attackers can we set the",
    "start": "1660160",
    "end": "1666670"
  },
  {
    "text": "audio treasurer said they can set it to all zeros it is something they can do and they could be smart and they can",
    "start": "1666670",
    "end": "1671680"
  },
  {
    "text": "replay the legitimate certificates and therefore place that what is their state of the place the state of the audit",
    "start": "1671680",
    "end": "1678040"
  },
  {
    "text": "register in this in this in the state that we expect however TPM a smart in this respect it will record the fact",
    "start": "1678040",
    "end": "1684670"
  },
  {
    "text": "that an extra reset operation was performed so therefore on our validation step we can detect that somebody",
    "start": "1684670",
    "end": "1690790"
  },
  {
    "text": "received the register without our knowledge so are we done I just",
    "start": "1690790",
    "end": "1697270"
  },
  {
    "text": "explained to you how we can do tamper evidence and how we can detect and bring muscle logs but I didn't really solve",
    "start": "1697270",
    "end": "1704440"
  },
  {
    "text": "our original problem remember our original problem was how we cache our attackers how we catch attackers in if",
    "start": "1704440",
    "end": "1711580"
  },
  {
    "text": "in the act of extracting our secrets right now KMS plugin and interacts with",
    "start": "1711580",
    "end": "1718300"
  },
  {
    "text": "KMS without using TPM at all so our objective is to place a call to",
    "start": "1718300",
    "end": "1725110"
  },
  {
    "text": "kms to place TPM on path to call to kms and in the next couple of slides I will",
    "start": "1725110",
    "end": "1732730"
  },
  {
    "text": "explain how we can accomplish this by merging some capabilities of TPM and kms",
    "start": "1732730",
    "end": "1738180"
  },
  {
    "text": "so I already explained how what it what it in works we will need some additional",
    "start": "1738180",
    "end": "1743410"
  },
  {
    "text": "capabilities from TPM we'll take a look at how H Mac could be generated on on TPM and we will need something from kms",
    "start": "1743410",
    "end": "1750700"
  },
  {
    "text": "so kms must support authenticated encryption with additional data and don't worried some of these terms are",
    "start": "1750700",
    "end": "1756820"
  },
  {
    "text": "new to you I will explain exactly what we need to know in the next couple of slides so first let me explain what H",
    "start": "1756820",
    "end": "1763720"
  },
  {
    "text": "Mac is just to make sure that we are all on the same page even though I'm pretty sure most of you know what this is H Mac",
    "start": "1763720",
    "end": "1769690"
  },
  {
    "text": "is based on hashing with the key exception that we use a key as an input",
    "start": "1769690",
    "end": "1775660"
  },
  {
    "text": "to the digest with the basic ideas that only that part is that passed as the key",
    "start": "1775660",
    "end": "1780730"
  },
  {
    "text": "can perform the authenticated measurement of the piece of data and can validate it so TPM is a great device for",
    "start": "1780730",
    "end": "1789730"
  },
  {
    "text": "generating h max why well it manages its own keys and number two the operation the",
    "start": "1789730",
    "end": "1797020"
  },
  {
    "text": "cryptographic operation of performing the H Mac is actually conducted inside the TPM outside the host main memory so",
    "start": "1797020",
    "end": "1805540"
  },
  {
    "text": "that's all we need to know about HTML let's move to the authenticated encryption so this is how you probably",
    "start": "1805540",
    "end": "1811120"
  },
  {
    "text": "this is how you probably think about encryption you supply the plaintext and you get the ciphertext back so",
    "start": "1811120",
    "end": "1818610"
  },
  {
    "text": "authenticated encryption with additional data throws a little bit of a twist into this in addition to the plaintext you",
    "start": "1818610",
    "end": "1824290"
  },
  {
    "text": "can supply a Adia additional authenticated data typically a D contains some metadata about the about",
    "start": "1824290",
    "end": "1832120"
  },
  {
    "text": "the plaintext so if we use cuban ad secrets as an example a good piece of metadata about the secret would be the",
    "start": "1832120",
    "end": "1838390"
  },
  {
    "text": "key that uniquely identifies your secret within the cluster something like namespace in the name of the secret so",
    "start": "1838390",
    "end": "1847720"
  },
  {
    "text": "when you the important part about the important part about authenticated",
    "start": "1847720",
    "end": "1852880"
  },
  {
    "text": "encryption is that when you perform decryption you must supply the same AAG",
    "start": "1852880",
    "end": "1858270"
  },
  {
    "text": "edition authenticated data that you use during the encryption operation otherwise KMS will refuse to perform",
    "start": "1858270",
    "end": "1864430"
  },
  {
    "text": "this operation so in other words we must ensure that ad is supply is the same on",
    "start": "1864430",
    "end": "1869680"
  },
  {
    "text": "encrypt and on decrypt and that is the key part that we will use in our in our scenario so now we have all the",
    "start": "1869680",
    "end": "1876520"
  },
  {
    "text": "technology we understand all the technology we need to build a solution so this is the main idea what if we use",
    "start": "1876520",
    "end": "1882550"
  },
  {
    "text": "TPM to produce the additional authenticated data concretely we can",
    "start": "1882550",
    "end": "1887650"
  },
  {
    "text": "take the key of the secret take it through the H Mac function on the on the",
    "start": "1887650",
    "end": "1892810"
  },
  {
    "text": "TPM which produces a value that uniquely identifies the secret but the trick is",
    "start": "1892810",
    "end": "1898390"
  },
  {
    "text": "that this value can only be produced on the same TPM they can only be decrypted this operation can only be reversed",
    "start": "1898390",
    "end": "1905050"
  },
  {
    "text": "decrypted on the same TPM that produce the encryption what this means if we audit the H makam and when attackers",
    "start": "1905050",
    "end": "1912550"
  },
  {
    "text": "want to accelerate the data that will be forced to go through the TPM because there is no other way in which they can",
    "start": "1912550",
    "end": "1918550"
  },
  {
    "text": "generate the EAD and that will force the extension of the audit register and we",
    "start": "1918550",
    "end": "1924010"
  },
  {
    "text": "can basically use the same trick we used in the in the circuit get example where we can catch the extra",
    "start": "1924010",
    "end": "1930700"
  },
  {
    "text": "a decryption of the secret so there is a",
    "start": "1930700",
    "end": "1935860"
  },
  {
    "text": "couple of scenarios there is a couple of vectors that this does not cover attackers can be by virtue of being",
    "start": "1935860",
    "end": "1942490"
  },
  {
    "text": "having root on the master they can directly attack a memory and extract secrets from the from the from memory",
    "start": "1942490",
    "end": "1950620"
  },
  {
    "text": "but the good news is that encrypted memory is apparently coming there was a talk on Tuesday they talked about",
    "start": "1950620",
    "end": "1956230"
  },
  {
    "text": "bringing kubernetes bringing encrypted memories into kubernetes world so by combining this",
    "start": "1956230",
    "end": "1962320"
  },
  {
    "text": "two scenarios you can actually even counteract this attack as well attackers",
    "start": "1962320",
    "end": "1968590"
  },
  {
    "text": "can wait for the for the user to request the secret they're interested in and",
    "start": "1968590",
    "end": "1974679"
  },
  {
    "text": "that's a heart attack to deal with but I would say that making attackers wait sometimes is a victory on its own",
    "start": "1974679",
    "end": "1981879"
  },
  {
    "text": "because the longer they have to persist their stay on the on the master the Machinists we have been catching them",
    "start": "1981879",
    "end": "1989789"
  },
  {
    "text": "well I want to wrap up with a couple of scenarios where we would not recommend",
    "start": "1990299",
    "end": "1995950"
  },
  {
    "text": "to use TPM because we described a couple of scenarios where we suggest we use them so TPMS are not really used to",
    "start": "1995950",
    "end": "2002879"
  },
  {
    "text": "perform to be performance crew don't put TPM on a execution path crypt execution",
    "start": "2002879",
    "end": "2008940"
  },
  {
    "text": "path where you have performance constraints it just simply have not been designed for that if you using virtual",
    "start": "2008940",
    "end": "2015090"
  },
  {
    "text": "TPM that may not be the case but check the latencies with your check the latest is before you use it there it is not",
    "start": "2015090",
    "end": "2022080"
  },
  {
    "text": "used for bulk encryption is typically used to encrypt small pieces of data like keys so so think about not using it",
    "start": "2022080",
    "end": "2029309"
  },
  {
    "text": "in those scenarios as well don't think ft p.m. as tamper proof it's tamper",
    "start": "2029309",
    "end": "2035669"
  },
  {
    "text": "resistant they have been attacks against TPM where through some chemical peeling",
    "start": "2035669",
    "end": "2040860"
  },
  {
    "text": "keys were extracted from TPM so so physical security still is a thing that",
    "start": "2040860",
    "end": "2047190"
  },
  {
    "text": "you need to worry about that's all we have I think we have one minute for",
    "start": "2047190",
    "end": "2054658"
  },
  {
    "text": "questions I'm sorry we went a little bit over [Applause]",
    "start": "2054659",
    "end": "2067079"
  },
  {
    "text": "so I wanted to ask with like using like trying to combine kms and TPM how would",
    "start": "2067110",
    "end": "2075669"
  },
  {
    "text": "we do that like if you have like multiple multiple masters and h.a all of which have distinct TPMS sure i push it",
    "start": "2075670",
    "end": "2085629"
  },
  {
    "text": "you like this we actually had a slide to cover this scenario but just couldn't fit it in the the basic idea is that the",
    "start": "2085630",
    "end": "2092440"
  },
  {
    "text": "TPMS have the bill you can create an exportable key in the TPM and you can",
    "start": "2092440",
    "end": "2099460"
  },
  {
    "text": "basically when the master knows its neighbors so to speak basically you elect them a leader and",
    "start": "2099460",
    "end": "2106240"
  },
  {
    "text": "that leader will generate a key and it will encrypt that key to its neighbors",
    "start": "2106240",
    "end": "2112200"
  },
  {
    "text": "because it knows the public key of its neighbors and they can safely pass that key to its neighbors and they basically",
    "start": "2112200",
    "end": "2118000"
  },
  {
    "text": "will use the city same very key so there is an extra step that you need to do but it is something that is it's a common",
    "start": "2118000",
    "end": "2124210"
  },
  {
    "text": "enough scenario for users if the p.m. we actually don't have time for any more questions so thank you so much Andrew",
    "start": "2124210",
    "end": "2130810"
  },
  {
    "text": "and Alex please rate your session online on shed and come back for more security",
    "start": "2130810",
    "end": "2135880"
  },
  {
    "text": "later we're gonna be here I know we're running out of time so if you have any questions please come here and we'll be happy to talk",
    "start": "2135880",
    "end": "2142660"
  },
  {
    "text": "[Applause]",
    "start": "2142660",
    "end": "2145390"
  }
]