[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "welcome everyone my name is annual christian says deva hope you all are enjoying kubecon today i'll be talking about managing",
    "start": "80",
    "end": "6480"
  },
  {
    "text": "container lifecycle correctly before moving forward let me introduce myself i am a site reliability engineer",
    "start": "6480",
    "end": "12400"
  },
  {
    "text": "and currently i am working at the oilx group i am an international tech speaker a distinguished guest lecturer and also i",
    "start": "12400",
    "end": "18000"
  },
  {
    "text": "have represented india at reputed international hackathons i love doing research in the field of deep learning and computational",
    "start": "18000",
    "end": "23920"
  },
  {
    "text": "neuroscience and have eight plus publications to my account i describe myself as an all-star developer that is a person who is",
    "start": "23920",
    "end": "29679"
  },
  {
    "text": "capable of designing and developing solutions for platforms like web mobile desktop and embedded systems",
    "start": "29679",
    "end": "35440"
  },
  {
    "text": "apart from that i also like mentoring people now let's have a look at the olex group olex group is a global product and tech",
    "start": "35440",
    "end": "41920"
  },
  {
    "start": "39000",
    "end": "39000"
  },
  {
    "text": "group consisting of 20 plus brands we are an online buying selling and exchange platform serving approximately",
    "start": "41920",
    "end": "47520"
  },
  {
    "text": "350 million people per month and also we are present in around 45 countries across the five continents",
    "start": "47520",
    "end": "53520"
  },
  {
    "text": "we have more than 10 million online listings every single month and we have billions of headshots per day also we have hundreds of thousands of",
    "start": "53520",
    "end": "60000"
  },
  {
    "text": "cache sheets per second and all of this is packed by hundreds of micro services that we run in our kubernetes clusters",
    "start": "60000",
    "end": "65439"
  },
  {
    "text": "that's fantastic let's have a look at the infrastructure landscape mostly the tools and platforms that we",
    "start": "65439",
    "end": "70640"
  },
  {
    "start": "68000",
    "end": "68000"
  },
  {
    "text": "use at olx belong to the cncf landscape i will not be drilling down into details of this let's have a look at the agenda",
    "start": "70640",
    "end": "77680"
  },
  {
    "text": "of today's talk today's talk is divided into six segments the first segment is about unix",
    "start": "77680",
    "end": "83119"
  },
  {
    "start": "78000",
    "end": "78000"
  },
  {
    "text": "processes and init systems we'll be talking about zombies and orphans also in this section",
    "start": "83119",
    "end": "88159"
  },
  {
    "text": "the next section is about managed lifecycle here we'll be talking about pardon container lifecycle along with",
    "start": "88159",
    "end": "93600"
  },
  {
    "text": "linux signal handling the third section talks about resiliency and high availability",
    "start": "93600",
    "end": "98720"
  },
  {
    "text": "through health checks and probes specifically we will be talking about liveness probe readiness probe and startup pro",
    "start": "98720",
    "end": "104560"
  },
  {
    "text": "the fourth segment is about life cycle hooks and graceful termination of bot we're going down into deep detail of how",
    "start": "104560",
    "end": "110159"
  },
  {
    "text": "graceful termination happens the fifth section is all about init containers and it's detailed working",
    "start": "110159",
    "end": "116399"
  },
  {
    "text": "the sixth segment is about init container uh the comparison between init container startup probe and the post",
    "start": "116399",
    "end": "121840"
  },
  {
    "text": "auto so let's get started in this section we'll be discussing about processes and unit systems we'll also be talking about",
    "start": "121840",
    "end": "128959"
  },
  {
    "text": "zombies and orphans and how to deal with them inside the containers so just to give you an overview of what",
    "start": "128959",
    "end": "135200"
  },
  {
    "start": "133000",
    "end": "133000"
  },
  {
    "text": "unix processes are a unix process is basically an instance of a running application and the processes are",
    "start": "135200",
    "end": "140959"
  },
  {
    "text": "ordered in form of a tree each process can spawn several child processes we can see on the left hand",
    "start": "140959",
    "end": "146800"
  },
  {
    "text": "side there's a process the top most process which is called as the inert process or the pid 1 process",
    "start": "146800",
    "end": "153200"
  },
  {
    "text": "it is a process which is started by the kernel at the time of boot and it takes care of spinning the rest",
    "start": "153200",
    "end": "158560"
  },
  {
    "text": "of the system processes we can see that pid 1 or the inner process is the main process",
    "start": "158560",
    "end": "164080"
  },
  {
    "text": "it has two children one is pid 2 running sshd and one is pid3 running nginx pid2",
    "start": "164080",
    "end": "170800"
  },
  {
    "text": "further has created another process which is pid4 and is running bash",
    "start": "170800",
    "end": "176400"
  },
  {
    "text": "let's have a look at zombies so what are zombies suppose a process is there consider pid4",
    "start": "176400",
    "end": "183200"
  },
  {
    "text": "in our case and this process has terminated once the process has terminated it is referred to",
    "start": "183200",
    "end": "189440"
  },
  {
    "text": "as defunct or zombie process what a zombie process basically means it's a process which has terminated but",
    "start": "189440",
    "end": "196560"
  },
  {
    "text": "has not been waited for by its parent now what means by waited for waited for basically means",
    "start": "196560",
    "end": "203360"
  },
  {
    "text": "that the parent actually waits for the child to return its exit code or the exit status so that the parent",
    "start": "203360",
    "end": "209599"
  },
  {
    "text": "can actually release the resources that it is holding and this process is often called as",
    "start": "209599",
    "end": "215920"
  },
  {
    "text": "reaping so basically parent triggers weight pid system call here",
    "start": "215920",
    "end": "222080"
  },
  {
    "text": "the flow is that there is a sick child signal which the child process when terminating",
    "start": "222080",
    "end": "227519"
  },
  {
    "text": "generates the sick child signal is sent to the parent process id and then the parent actually calls this",
    "start": "227519",
    "end": "234080"
  },
  {
    "text": "weight pid system call once this weight pid system call is triggered the reaping starts",
    "start": "234080",
    "end": "240799"
  },
  {
    "text": "so in nutshell zombies are the processes that have terminated but have not yet been weighted for by their parent processes",
    "start": "240799",
    "end": "248000"
  },
  {
    "text": "now what happens if a process loses its parent consider in our case pid4 which is a",
    "start": "248000",
    "end": "253760"
  },
  {
    "start": "250000",
    "end": "250000"
  },
  {
    "text": "child process of pid 2 but pid 2 has somehow got terminated from now onwards pid 4 will be called as",
    "start": "253760",
    "end": "260799"
  },
  {
    "text": "often process because it doesn't have any parent in unix systems pid 1 is responsible for",
    "start": "260799",
    "end": "267040"
  },
  {
    "text": "reparenting the child to itself so pid4 will now become child of pid 1",
    "start": "267040",
    "end": "272800"
  },
  {
    "text": "because pid 1 will re-parent erd4 with this we wrap up our overview",
    "start": "272800",
    "end": "278080"
  },
  {
    "text": "of zombies and orphans now let's see how zombies are harmful for each zombie process",
    "start": "278080",
    "end": "283120"
  },
  {
    "start": "280000",
    "end": "280000"
  },
  {
    "text": "there is an entry in the process table and zombie processes keep on acquiring the kernel resources",
    "start": "283120",
    "end": "288240"
  },
  {
    "text": "though in a minimal fashion if the number of zombie processes is high then the creation of new processes may",
    "start": "288240",
    "end": "294400"
  },
  {
    "text": "not be possible because resource starvation may be there having zombies inside the containers",
    "start": "294400",
    "end": "299680"
  },
  {
    "start": "299000",
    "end": "299000"
  },
  {
    "text": "also poses some challenges generally one main application process runs per container and it is treated as",
    "start": "299680",
    "end": "305039"
  },
  {
    "text": "pid 1 so whatever we specify in the entry point of the container is treated as pid 1.",
    "start": "305039",
    "end": "310320"
  },
  {
    "text": "now say we have coded an application to solve a specific purpose this is not meant to suffice in unit",
    "start": "310320",
    "end": "316000"
  },
  {
    "text": "systems functionalities what if there are many zombies getting created our process will not be able to",
    "start": "316000",
    "end": "322080"
  },
  {
    "text": "reap them also if we are using some third-party managed docker containers we are not sure whether they are",
    "start": "322080",
    "end": "328639"
  },
  {
    "text": "actually having the process being created as an internet process or not whether they have the functionality of",
    "start": "328639",
    "end": "333680"
  },
  {
    "text": "an init system or not so this also poses some challenges there comes a need of having a proper unit",
    "start": "333680",
    "end": "339680"
  },
  {
    "text": "system in our containers now sometimes people use bash but the thing is that bash is able to perform",
    "start": "339680",
    "end": "346639"
  },
  {
    "text": "some of the reaping functions but is not able to handle the signals properly is not able to pass the signals which it",
    "start": "346639",
    "end": "352160"
  },
  {
    "text": "receives from the operating system to the child processes now let's talk about some sophisticated linear systems",
    "start": "352160",
    "end": "358880"
  },
  {
    "start": "357000",
    "end": "357000"
  },
  {
    "text": "upstart and systemd are two options but these are heavyweight systems we have tiny and dumb in it these are",
    "start": "358880",
    "end": "365360"
  },
  {
    "text": "lightweight systems so we'll be taking into account chinese in this stock tiny is an init system which is an open",
    "start": "365360",
    "end": "372240"
  },
  {
    "start": "370000",
    "end": "370000"
  },
  {
    "text": "source system and it's suitable for docker containers and also it's suitable for production",
    "start": "372240",
    "end": "377680"
  },
  {
    "text": "environments it's simple and lightweight it also reaps zombies and does the signal forwarding properly",
    "start": "377680",
    "end": "384160"
  },
  {
    "text": "adding or removing tiny doesn't have any negative impact so let's not wait and get started with",
    "start": "384160",
    "end": "389199"
  },
  {
    "text": "setting up tiny setting up tiny is pretty straight forward on the left hand side you see a code snippet this is the docker file",
    "start": "389199",
    "end": "396960"
  },
  {
    "start": "390000",
    "end": "390000"
  },
  {
    "text": "the first four lines actually are the contents of a docker file which contains the command to run a",
    "start": "396960",
    "end": "402160"
  },
  {
    "text": "python program inside the top container lines 7 to 13 are relevant for us so we",
    "start": "402160",
    "end": "407840"
  },
  {
    "text": "will be focusing on them we just need to specify version of ine and the remote url from where we can",
    "start": "407840",
    "end": "413120"
  },
  {
    "text": "fetch the release then we just set the permission of this binary and then we provide the entry",
    "start": "413120",
    "end": "418319"
  },
  {
    "text": "point entry point can be provided as tiny followed by two hyphens then we just need to supply a regular",
    "start": "418319",
    "end": "424080"
  },
  {
    "text": "command like we did before now this defunct dot pi which is a",
    "start": "424080",
    "end": "429120"
  },
  {
    "text": "program that i want to run inside the container its content are on the right hand side",
    "start": "429120",
    "end": "434160"
  },
  {
    "text": "this program actually shows how zombies are created and how orphans are read so we'll be having a",
    "start": "434160",
    "end": "439520"
  },
  {
    "text": "quick look in the next step so let's look at the configuration of the pod resources for both of them",
    "start": "439520",
    "end": "445360"
  },
  {
    "text": "one is for the version which doesn't contain tiny the first one which is tiny disabled yaml the second",
    "start": "445360",
    "end": "451759"
  },
  {
    "text": "one is for the one which contains in it it's a simple python script that i showed which will be",
    "start": "451759",
    "end": "458160"
  },
  {
    "text": "running in both of them the first one should show defunct processes and the second one should not show different",
    "start": "458160",
    "end": "463680"
  },
  {
    "text": "processes because the parent should be able to reap them now let me run both of them",
    "start": "463680",
    "end": "471599"
  },
  {
    "text": "so we see at the top that the two containers are running and since these are short-lived containers they will be just",
    "start": "477759",
    "end": "483039"
  },
  {
    "text": "going into crash loopback and then restarting themselves let me print the logs for both of them so you will see",
    "start": "483039",
    "end": "488240"
  },
  {
    "text": "the difference the first one actually shows the process as defunct process",
    "start": "488240",
    "end": "493280"
  },
  {
    "text": "and it's also labeling the prd8 as zombie process the second one also shows that pid8 will",
    "start": "493280",
    "end": "499680"
  },
  {
    "text": "be zombie process but it actually reaps the zombie process so we are not having any defunct label",
    "start": "499680",
    "end": "506160"
  },
  {
    "text": "like we had in the first case so using tiny actually reaps the zombie processes",
    "start": "506160",
    "end": "511759"
  },
  {
    "text": "this is a simple example which shows the same so let's discuss more details on tiny",
    "start": "511759",
    "end": "517440"
  },
  {
    "text": "before moving forward this is a script which i used for creating the zombies you can have a",
    "start": "517440",
    "end": "523120"
  },
  {
    "text": "look here okay some more details",
    "start": "523120",
    "end": "528399"
  },
  {
    "start": "526000",
    "end": "526000"
  },
  {
    "text": "so tiny needs to run as pid 1 in order to read zombies and if it is not able to run as pid 1 it",
    "start": "528399",
    "end": "534160"
  },
  {
    "text": "also has a provision to be run as a sub reader so who is a subreaper subreaper is any",
    "start": "534160",
    "end": "540080"
  },
  {
    "text": "process which is not running as pid 1 but can actually perform the function of reaping so tiny can do it pretty simply",
    "start": "540080",
    "end": "548080"
  },
  {
    "text": "just need to pass another argument so it is hyphen s so it looks like tiny hyphen is followed",
    "start": "548080",
    "end": "553440"
  },
  {
    "text": "by double hyphens and the special thing about tiny is that",
    "start": "553440",
    "end": "558480"
  },
  {
    "text": "it exists with the child's exit code and remapping is also possible so if you want to remap some",
    "start": "558480",
    "end": "564560"
  },
  {
    "text": "say exit code to something else we can do that with tiny this wraps up the section of zombies",
    "start": "564560",
    "end": "570160"
  },
  {
    "text": "orphans and tiny system let's move on with the managed life cycle till now we have understood how",
    "start": "570160",
    "end": "577279"
  },
  {
    "text": "processes work in containers and how to manage them through init systems now we'll be discussing about the",
    "start": "577279",
    "end": "582480"
  },
  {
    "text": "lifecycle of container and box there are five distinct phases of a false life cycle these are pending",
    "start": "582480",
    "end": "588720"
  },
  {
    "start": "586000",
    "end": "586000"
  },
  {
    "text": "running unknown succeeded and failed pending state means that the part has been created through the api and is",
    "start": "588720",
    "end": "594880"
  },
  {
    "text": "waiting for some node to get your rule on the running state means that the pod is operational and is running fine",
    "start": "594880",
    "end": "600320"
  },
  {
    "text": "unknown state is a rare reference and it means that the kubernetes cluster has some internal problem due to which it is",
    "start": "600320",
    "end": "605360"
  },
  {
    "text": "unable to communicate with the pod then comes the last two states these are often found when we use cron jobs",
    "start": "605360",
    "end": "611839"
  },
  {
    "text": "one is succeeded which means that the pot has finished normally the other one is failed which means the pot has crashed",
    "start": "611839",
    "end": "618399"
  },
  {
    "text": "kubernetes also watches the state of all the containers and containers have three states in their life cycle",
    "start": "618399",
    "end": "624640"
  },
  {
    "text": "the first one is waiting the second one is running the third one is terminated waiting state means that the container",
    "start": "624640",
    "end": "630880"
  },
  {
    "start": "625000",
    "end": "625000"
  },
  {
    "text": "is performing some operations which are required before the startup it may be pulling images or applying",
    "start": "630880",
    "end": "636000"
  },
  {
    "text": "secrets running means that it is running without any issues and terminated means it may have",
    "start": "636000",
    "end": "641279"
  },
  {
    "text": "suffered some failure or it may have succeeded to know about the exact reason for termination of the container",
    "start": "641279",
    "end": "647519"
  },
  {
    "text": "one may use the queue control describe port command now let's talk about something really important the graceful termination",
    "start": "647519",
    "end": "654160"
  },
  {
    "start": "653000",
    "end": "653000"
  },
  {
    "text": "process when talking about an application's performance and behavior one thing to consider is that whether the application",
    "start": "654160",
    "end": "659519"
  },
  {
    "text": "handles the termination process gracefully or not handling the termination process gracefully it means whether any cleanups",
    "start": "659519",
    "end": "664880"
  },
  {
    "text": "are required or not before terminating there may be some need of cleaning up files there may be some need of cleaning up",
    "start": "664880",
    "end": "671040"
  },
  {
    "text": "the resources maybe releasing some connections making transactional commits and if not done this may impact the",
    "start": "671040",
    "end": "677040"
  },
  {
    "text": "performance of the application and this may impact the users also first terminations are a big threat",
    "start": "677040",
    "end": "683680"
  },
  {
    "text": "first terminations could often lead to degraded performance or even some time times the outage may be there because the",
    "start": "683680",
    "end": "689920"
  },
  {
    "text": "application may have ended up in an improper state because of the forceful termination now let's talk about the two important",
    "start": "689920",
    "end": "696240"
  },
  {
    "text": "linux signals that form the part of the port termination process sect term and secure sick term can be",
    "start": "696240",
    "end": "702240"
  },
  {
    "text": "considered as a gentle poke to the container to cause termination of the processes it doesn't cause any immediate",
    "start": "702240",
    "end": "708480"
  },
  {
    "text": "termination and this signal can be handled or even ignored on the other hand sick kill is like a",
    "start": "708480",
    "end": "713920"
  },
  {
    "text": "hard kill it's analogous to the kill hyphen 9 command that we use to kill the processes",
    "start": "713920",
    "end": "719360"
  },
  {
    "text": "this cannot be handled and it's like cutting the power of the machine now let's talk about the termination",
    "start": "719360",
    "end": "725120"
  },
  {
    "text": "life cycle first the grace period is set and the default is 30 seconds here the pod enters the terminating",
    "start": "725120",
    "end": "730720"
  },
  {
    "start": "726000",
    "end": "726000"
  },
  {
    "text": "state and stops getting any sort of traffic next is the execution of pre-stop hook if it exists",
    "start": "730720",
    "end": "736880"
  },
  {
    "text": "and we will cover the details of this in a bit then comes the sec term signal which is",
    "start": "736880",
    "end": "742079"
  },
  {
    "text": "sent to pid 1 of each container there that is there in the pot here comes the role of the edit system and signal",
    "start": "742079",
    "end": "748000"
  },
  {
    "text": "handling that we talked about earlier today if one is using an image system and then",
    "start": "748000",
    "end": "753360"
  },
  {
    "text": "it can be ensured that proper system forwarding is happening however it still depends on the application whether it can handle",
    "start": "753360",
    "end": "759680"
  },
  {
    "text": "the signal or not we will discuss about this and how to deal with such situations shortly",
    "start": "759680",
    "end": "765600"
  },
  {
    "text": "then comes the fourth stage it is when the grace period ends and the sick kill is actually issued then the",
    "start": "765600",
    "end": "772480"
  },
  {
    "text": "api server deletes the ports api object and finally the port terminates let's analyze the termination lifecycle",
    "start": "772480",
    "end": "779040"
  },
  {
    "text": "through a time series graph suppose the pot enters the terminating state here and stops receiving any sort",
    "start": "779040",
    "end": "784399"
  },
  {
    "text": "of traffic race period is set and the pre-stock hook starts executing say the hook got executed by this point",
    "start": "784399",
    "end": "791200"
  },
  {
    "text": "then sec turn signal is issued to all the containers in the pot once the grace period ends sequel is",
    "start": "791200",
    "end": "797040"
  },
  {
    "text": "issued and the pod forcibly shuts down this is the complete termination lifecycle",
    "start": "797040",
    "end": "802560"
  },
  {
    "text": "all right so now is the time to learn about achieving resiliency and high availability through the use of health",
    "start": "802560",
    "end": "808079"
  },
  {
    "text": "checks and probes let us understand the help of pattern first and its need kubernetes should know the state of the",
    "start": "808079",
    "end": "814320"
  },
  {
    "start": "811000",
    "end": "811000"
  },
  {
    "text": "fort so that it can decide whether to send the request to the bot or not all of this becomes easy if the",
    "start": "814320",
    "end": "820160"
  },
  {
    "text": "container exposes some apis for different kinds of health checks kubernetes containers are self-healing",
    "start": "820160",
    "end": "825440"
  },
  {
    "text": "entities there is a component called the cubelet which runs on each node and is responsible for bringing up the",
    "start": "825440",
    "end": "831519"
  },
  {
    "start": "827000",
    "end": "827000"
  },
  {
    "text": "containers and keeping them running the cubelet even restarts the containers in case if there is any crash",
    "start": "831519",
    "end": "838079"
  },
  {
    "text": "this is done by doing generic health checks against the containers and it is called the process health check a container's",
    "start": "838079",
    "end": "844079"
  },
  {
    "text": "main process can crash due to numerous reasons like seg faults can happen or some unknown bug may be there",
    "start": "844079",
    "end": "849519"
  },
  {
    "text": "in such situations the health checks help a lot let us look at some more problems in detail",
    "start": "849519",
    "end": "854639"
  },
  {
    "start": "854000",
    "end": "854000"
  },
  {
    "text": "what if an application stops working without its main process crashing it's not weird and it's common deadlocks",
    "start": "854639",
    "end": "861199"
  },
  {
    "text": "memory leaks infinite loops thrashing and many other reasons may be true applications should be able to handle",
    "start": "861199",
    "end": "867519"
  },
  {
    "text": "some of the mentioned problems by using some complex logic however there needs to be some sophisticated",
    "start": "867519",
    "end": "873040"
  },
  {
    "text": "reliable and an easier way to tackle such problems other services should not be",
    "start": "873040",
    "end": "878160"
  },
  {
    "text": "sending requests to crash applications so let's see and discover some of the effective ways",
    "start": "878160",
    "end": "883839"
  },
  {
    "text": "to tackle such problems probes offer solutions to such problems a probe is basically a diagnostic",
    "start": "883839",
    "end": "889279"
  },
  {
    "text": "performed by the tubelet on the containers in a periodic fashion it helps in achieving resiliency",
    "start": "889279",
    "end": "895279"
  },
  {
    "text": "and also helps in better load balancing and routing of traffic since the pods which are not ready to",
    "start": "895279",
    "end": "900639"
  },
  {
    "text": "receive the traffic because maybe their containers are unhealthy will have either their containers",
    "start": "900639",
    "end": "905839"
  },
  {
    "text": "restarted or the traffic will not be sent to them this will also ensure timely response to the requests now let's look at some",
    "start": "905839",
    "end": "912480"
  },
  {
    "text": "technicalities of probes probing is basically possible via calling handlers implemented by the containers",
    "start": "912480",
    "end": "918000"
  },
  {
    "start": "913000",
    "end": "913000"
  },
  {
    "text": "and there are three types of handlers exec tcp and http exec is the one which executes some code",
    "start": "918000",
    "end": "924800"
  },
  {
    "text": "and expects exit code 0 tcp socket check is performed by a tcp check",
    "start": "924800",
    "end": "930079"
  },
  {
    "text": "against the specified port http get request is also possible on a specified ip port combination along",
    "start": "930079",
    "end": "937040"
  },
  {
    "text": "with the paths it expects a response code in the range of 200 to 399. the resultant states can be success",
    "start": "937040",
    "end": "944480"
  },
  {
    "text": "failure or unknown now coming to the probes there are three types of probes that we will be covering one is liveness",
    "start": "944480",
    "end": "950320"
  },
  {
    "start": "947000",
    "end": "947000"
  },
  {
    "text": "one is readiness pro and other one is startup pro talking about the liveness pro it helps in identifying whether the",
    "start": "950320",
    "end": "956240"
  },
  {
    "start": "954000",
    "end": "954000"
  },
  {
    "text": "container is alive or dead in case a failure is observed in the liveness pro",
    "start": "956240",
    "end": "961600"
  },
  {
    "text": "the cubelet kills the container and then restarts it whether the container will restart actually or not depends on the restart",
    "start": "961600",
    "end": "967920"
  },
  {
    "text": "policy of the container which can be always never or on failure we will see the implementation of",
    "start": "967920",
    "end": "973680"
  },
  {
    "text": "liveness probe shortly before moving forward let me give you some tips first one is that always define a",
    "start": "973680",
    "end": "980000"
  },
  {
    "text": "liveness pro for bots running in production it is really important second is have the application expose a",
    "start": "980000",
    "end": "986320"
  },
  {
    "text": "health check api in the format of say slash health or something like that the health check api should not require",
    "start": "986320",
    "end": "993120"
  },
  {
    "text": "any kind of authentication else the probe will always fail this is a point that should be noted",
    "start": "993120",
    "end": "998639"
  },
  {
    "text": "then keep it light on computational resources don't put much complex logic in the",
    "start": "998639",
    "end": "1004160"
  },
  {
    "text": "liveness probe section probe cpu time is part of the container cpu time quota so you should not be putting any kind of",
    "start": "1004160",
    "end": "1010240"
  },
  {
    "text": "complex logic in the liveness probe before moving forward with the demo i would first like to cover the concept of readiness group",
    "start": "1010240",
    "end": "1016240"
  },
  {
    "start": "1014000",
    "end": "1014000"
  },
  {
    "text": "a readiness probe signals whether a container is ready to accept new connections or not say during the startup some warm-up",
    "start": "1016240",
    "end": "1022880"
  },
  {
    "text": "procedure is to be followed and this may take some time so the container can actually delay sending request to the pod using the readiness",
    "start": "1022880",
    "end": "1029600"
  },
  {
    "text": "proof another use case can be to stop sending requests to the port when the container is actually overloaded",
    "start": "1029600",
    "end": "1035918"
  },
  {
    "text": "it must be noted that until all the containers are ready for a pot the pot isn't treated to be ready",
    "start": "1035919",
    "end": "1041038"
  },
  {
    "text": "unlike liveness pro on failure and readiness probe a container isn't killed it should also be noted that after",
    "start": "1041039",
    "end": "1046720"
  },
  {
    "text": "receiving acetone signal sale even though if the radiance check passes kubernetes tries not to send new",
    "start": "1046720",
    "end": "1052640"
  },
  {
    "text": "requests to the container now let us understand how to use liveness and readiness probes in",
    "start": "1052640",
    "end": "1057919"
  },
  {
    "text": "kubernetes using the code for demonstrating the usefulness of liveness and readiness pro",
    "start": "1057919",
    "end": "1063360"
  },
  {
    "start": "1059000",
    "end": "1059000"
  },
  {
    "text": "i have built a small yet powerful application powered by flask that will help in understanding the",
    "start": "1063360",
    "end": "1068880"
  },
  {
    "text": "probes easily on the left hand side you see that there is a snippet from the pod resource manifest",
    "start": "1068880",
    "end": "1074960"
  },
  {
    "text": "which shows the usage of liveness and readiness probes on the right hand side you see a snippet",
    "start": "1074960",
    "end": "1080320"
  },
  {
    "text": "from the flask application which shows some apis and routing logic so let's look at the pod manifest first",
    "start": "1080320",
    "end": "1086240"
  },
  {
    "text": "so here inside the container you have the regular image image policy and name then you see two",
    "start": "1086240",
    "end": "1092400"
  },
  {
    "text": "new sections starting at 10 and 17. so lightness probe and readiness pro liveness probe and readiness probe both",
    "start": "1092400",
    "end": "1098960"
  },
  {
    "text": "in this example are using the http get probing mechanism and",
    "start": "1098960",
    "end": "1104320"
  },
  {
    "text": "they have uh the path set to health life and health ready respectively and the port is 5000",
    "start": "1104320",
    "end": "1110559"
  },
  {
    "text": "because 5000 is the port on which flask application is running there are three new terms which you can",
    "start": "1110559",
    "end": "1116000"
  },
  {
    "text": "see initial delay seconds failure threshold and period period seconds so initial delay seconds",
    "start": "1116000",
    "end": "1122320"
  },
  {
    "text": "is basically the time by which we have to delay the probe so the probe will start after two",
    "start": "1122320",
    "end": "1127520"
  },
  {
    "text": "seconds of the start of container in this case and likewise the readiness probe will start after two seconds of the container",
    "start": "1127520",
    "end": "1135039"
  },
  {
    "text": "so basically there will be a delay of two seconds uh and then the probes will start",
    "start": "1135039",
    "end": "1140640"
  },
  {
    "text": "working you can have different uh values liveness and regular respect",
    "start": "1140640",
    "end": "1145919"
  },
  {
    "text": "then we have failure threshold failure threshold specifies how many times the probe is allowed to fail and in my case i have specified as two",
    "start": "1145919",
    "end": "1153039"
  },
  {
    "text": "and two in both then period seconds basically sets the periodicity or the frequency after which",
    "start": "1153039",
    "end": "1159360"
  },
  {
    "text": "the probe should hit again the application so it's two seconds in our case",
    "start": "1159360",
    "end": "1164480"
  },
  {
    "text": "now coming to the application code uh this is just a snippet and the application code is a bit",
    "start": "1164480",
    "end": "1169520"
  },
  {
    "text": "huge uh it actually has different routes so health ready is one health ready stop",
    "start": "1169520",
    "end": "1175600"
  },
  {
    "text": "ready is there health start ready is there health ready basically tells whether the pod is ready",
    "start": "1175600",
    "end": "1180960"
  },
  {
    "text": "or not just it prints something uh and then gives 200 as the code if the pod is ready it",
    "start": "1180960",
    "end": "1187919"
  },
  {
    "text": "prints uh the pod is not ready and gives 502 code if the pod is actually not ready so i am",
    "start": "1187919",
    "end": "1194480"
  },
  {
    "text": "just implementing a name logic here in which when i hit health stop ready then it",
    "start": "1194480",
    "end": "1201280"
  },
  {
    "text": "actually turns the pod ready variable to 1 and when it finds in health's ready state",
    "start": "1201280",
    "end": "1207679"
  },
  {
    "text": "when it finds that quad ready is not equal to 0 then it actually trades the pot is not",
    "start": "1207679",
    "end": "1212799"
  },
  {
    "text": "ready likewise i set pod ready to be equal to 0 here in",
    "start": "1212799",
    "end": "1218000"
  },
  {
    "text": "health start ready and we can play around this uh in the demo",
    "start": "1218000",
    "end": "1223360"
  },
  {
    "text": "so let's have a look at the demo so just for quick demo here's the file here's the port manifest file",
    "start": "1223360",
    "end": "1228640"
  },
  {
    "text": "which contains the liveness proven readiness group sections as explained in the slides so let's apply this uh yammer and see",
    "start": "1228640",
    "end": "1235520"
  },
  {
    "text": "how the parts react so you'll see the parts are coming so basically there's only one port",
    "start": "1235520",
    "end": "1241360"
  },
  {
    "text": "so python health is the name of the part so i'll just start tailing the logs",
    "start": "1241360",
    "end": "1246639"
  },
  {
    "text": "so you see uh live and ready these two are the apis which are getting hit and these are",
    "start": "1247760",
    "end": "1253200"
  },
  {
    "text": "basically the hits coming from the probes so you see live ready live ready this will keep on continuing",
    "start": "1253200",
    "end": "1259280"
  },
  {
    "text": "uh now let me go to the browser and show you how the app looks like",
    "start": "1259280",
    "end": "1265760"
  },
  {
    "text": "so i haven't started the port forwarding so let me start the port forwarding for",
    "start": "1266640",
    "end": "1273360"
  },
  {
    "text": "this let me forward it to 8989",
    "start": "1274840",
    "end": "1280799"
  },
  {
    "text": "now i have started the port forwarding let me hit 8989 and i should see some response",
    "start": "1281120",
    "end": "1286400"
  },
  {
    "text": "hello from python now let me try and hit here uh",
    "start": "1286400",
    "end": "1292080"
  },
  {
    "text": "health life and it should hopefully give me the pod is life right i'll hit it",
    "start": "1292480",
    "end": "1299360"
  },
  {
    "text": "multiple times and also just so that you can see the response code let me open the network console",
    "start": "1299360",
    "end": "1306320"
  },
  {
    "text": "so it's giving me 200 again 200 okay now let's try with ready",
    "start": "1306320",
    "end": "1312880"
  },
  {
    "text": "okay so we see that here we are always getting 200 as a response",
    "start": "1312880",
    "end": "1318400"
  },
  {
    "text": "now let me do one thing let me stop the readiness",
    "start": "1318400",
    "end": "1323440"
  },
  {
    "text": "before hitting enter just see that here we are having one one as the ready state so one one",
    "start": "1323440",
    "end": "1329200"
  },
  {
    "text": "running here as a ready state and here we are having 200 as the response for ready health ready",
    "start": "1329200",
    "end": "1336159"
  },
  {
    "text": "now let me hit on stop and i got ready has been stopped",
    "start": "1336159",
    "end": "1342559"
  },
  {
    "text": "now let me hit on ready again and it's giving me 502 as expected",
    "start": "1342559",
    "end": "1347600"
  },
  {
    "text": "let's see these these purple colored lines these are basically the lines when",
    "start": "1347600",
    "end": "1354400"
  },
  {
    "text": "the readiness probe started failing and the part has gone into zero one state now",
    "start": "1354400",
    "end": "1359600"
  },
  {
    "text": "let me resume the readiness state for this by hitting the api again so",
    "start": "1359600",
    "end": "1366320"
  },
  {
    "text": "start ready should actually do and then if i hit ready again i'm able to see",
    "start": "1366320",
    "end": "1373120"
  },
  {
    "text": "the cord in running state so see the purple lines have gone the pod has again become ready so",
    "start": "1373120",
    "end": "1378799"
  },
  {
    "text": "basically what i did was i failed the readiness pro so that the traffic doesn't get routed to my pod",
    "start": "1378799",
    "end": "1384880"
  },
  {
    "text": "now we'll see what happens when i stop the liveness spoke as in i feel the lightness broke",
    "start": "1384880",
    "end": "1391679"
  },
  {
    "text": "so i have done this and it should actually kill the pot kill uh the container",
    "start": "1391679",
    "end": "1398640"
  },
  {
    "text": "basically not the pot so you see uh you were getting purple lined uh healthy uh health life and now",
    "start": "1398640",
    "end": "1406720"
  },
  {
    "text": "the pot must be uh the container must be serving its uh graceful period and shortly we should",
    "start": "1406720",
    "end": "1412480"
  },
  {
    "text": "see a restart happening here and what we can do is simultaneously we",
    "start": "1412480",
    "end": "1419360"
  },
  {
    "text": "can see the describe output of the parts here",
    "start": "1419360",
    "end": "1425200"
  },
  {
    "text": "so you see liveness probe field with 502 and then you can see the restart count",
    "start": "1425200",
    "end": "1431360"
  },
  {
    "text": "also bumped so that's all for the demo for the liveness probe and readiness pro",
    "start": "1431360",
    "end": "1437440"
  },
  {
    "text": "uh let's get back to the slides and uh start with the next section so before",
    "start": "1437440",
    "end": "1443200"
  },
  {
    "text": "moving forward with the next section we need to discuss about startup probe also so startup probe is basically a probe",
    "start": "1443200",
    "end": "1448640"
  },
  {
    "start": "1446000",
    "end": "1446000"
  },
  {
    "text": "which indicates whether the application within the container has started or not all the other probes are disabled until",
    "start": "1448640",
    "end": "1453760"
  },
  {
    "text": "the startup process succeeds and also it is mainly used with slow starting containers",
    "start": "1453760",
    "end": "1458880"
  },
  {
    "text": "we use a decent failure threshold uh with startup probes generally maybe say 10 or 15",
    "start": "1458880",
    "end": "1465600"
  },
  {
    "text": "and it is meant to be executed at a startup only unlike others which run periodically it may share the",
    "start": "1465600",
    "end": "1471520"
  },
  {
    "text": "same uh probing mechanism as that of liveness probe and readiness both and in case of sttp get method",
    "start": "1471520",
    "end": "1478000"
  },
  {
    "text": "they all all the three of them can use the same path also but the behavior of the three probes is",
    "start": "1478000",
    "end": "1483360"
  },
  {
    "text": "different now let's quickly have a look at the lifecycle hooks lifecycle hooks are actually required for managing the container lifecycle in a better manner",
    "start": "1483360",
    "end": "1490000"
  },
  {
    "start": "1488000",
    "end": "1488000"
  },
  {
    "text": "since only signal handling is not the thing which we need to worry about so there are two lifecycle hooks available",
    "start": "1490000",
    "end": "1495039"
  },
  {
    "text": "one is postdot and one is pre-stock postart hook is actually executed just after the container starts and it runs",
    "start": "1495039",
    "end": "1500880"
  },
  {
    "text": "parallely with the main container it can be used to implement some warm-up logic or maybe a signal",
    "start": "1500880",
    "end": "1506240"
  },
  {
    "text": "to an external listener about the application getting started also it can be used to do some pre-conditional checks it must be noted",
    "start": "1506240",
    "end": "1512720"
  },
  {
    "text": "that there are no guarantees of the post start hook running and also it uh makes the container stay in the waiting state till it has executed fully",
    "start": "1512720",
    "end": "1519679"
  },
  {
    "start": "1514000",
    "end": "1514000"
  },
  {
    "text": "and keeps the pod in pending state it may also happen that the hook gets executed fully even before the main",
    "start": "1519679",
    "end": "1525200"
  },
  {
    "text": "process has started fully and in case of any failure no return has happened the container restarts",
    "start": "1525200",
    "end": "1530320"
  },
  {
    "text": "depending on the restart policy of the container now talking about the pre-stock it's a call that is sent to the container",
    "start": "1530320",
    "end": "1536480"
  },
  {
    "start": "1534000",
    "end": "1534000"
  },
  {
    "text": "before it is terminated and it triggers the graceful termination process so basically it is used to execute some",
    "start": "1536480",
    "end": "1542080"
  },
  {
    "text": "graceful termination logic either outside the application or by having some application endpoint which can be triggered which can trigger",
    "start": "1542080",
    "end": "1549279"
  },
  {
    "text": "actually the graceful termination of the app in case of third-party managed containers also",
    "start": "1549279",
    "end": "1554320"
  },
  {
    "text": "this comes handy we at olx are using pre-stock book heavily and to quote an example we have a chat",
    "start": "1554320",
    "end": "1560559"
  },
  {
    "text": "server powered by azure bird and it uses the pre-stock hook to clean up the redis connections",
    "start": "1560559",
    "end": "1566080"
  },
  {
    "text": "and entries on termination of the azure wordpod let's revisit the termination lifecycle",
    "start": "1566080",
    "end": "1571200"
  },
  {
    "text": "graph and see where the pre-stock hook fits in so as you can see here the pre-stock hook is actually immediately called as",
    "start": "1571200",
    "end": "1577840"
  },
  {
    "start": "1574000",
    "end": "1574000"
  },
  {
    "text": "the craze period starts and it ends before the sector signal actually starts",
    "start": "1577840",
    "end": "1583440"
  },
  {
    "text": "so it can be used to handle graceful termination effectively and even for the cases where the",
    "start": "1583440",
    "end": "1589039"
  },
  {
    "text": "application don't implicitly support graceful termination this can be used to have uh the graceful termination done for",
    "start": "1589039",
    "end": "1594880"
  },
  {
    "text": "those applications now let's quickly see how these books can be implemented in kubernetes so here is the snippet of the code uh i",
    "start": "1594880",
    "end": "1602159"
  },
  {
    "text": "am actually adding a line uh in both the hooks to index.html of engineering so i am using nginx image",
    "start": "1602159",
    "end": "1608880"
  },
  {
    "text": "line 9 actually states the life cycle section and inside that we have post start and",
    "start": "1608880",
    "end": "1614159"
  },
  {
    "text": "free stock then we have a command here specified for post up and please drop respectively",
    "start": "1614159",
    "end": "1620000"
  },
  {
    "text": "in playstore i am doing additionally the prenup of nginx after uh the scope actually executes so let me",
    "start": "1620000",
    "end": "1626640"
  },
  {
    "text": "apply the configuration now this will take 20 seconds as i have specified this in",
    "start": "1626640",
    "end": "1632880"
  },
  {
    "text": "the post start hooks command okay so it has started running let me",
    "start": "1632880",
    "end": "1637919"
  },
  {
    "text": "put forward it and then let me try and open here so you see poster now let me uh delete this",
    "start": "1637919",
    "end": "1646559"
  },
  {
    "text": "and we'll see please stop has here started coming here and the pod is now",
    "start": "1649039",
    "end": "1655520"
  },
  {
    "text": "serving its traceable termination period and also it must have cleaned the engine x",
    "start": "1655520",
    "end": "1661840"
  },
  {
    "text": "process all right now is the time to discuss about the unit containers so when your containers are specialized",
    "start": "1661840",
    "end": "1667440"
  },
  {
    "text": "containers that run before the application containers room and that also means that they are separate from the application containers",
    "start": "1667440",
    "end": "1673120"
  },
  {
    "text": "and run on separate images these may contain some setup which is not present in the main application image",
    "start": "1673120",
    "end": "1678480"
  },
  {
    "text": "and multiple unit containers can run inside a port and almost run successfully and sequentially in the",
    "start": "1678480",
    "end": "1683520"
  },
  {
    "text": "specified order in the manifest also though any unit containers don't support any sort of hooks or probes that",
    "start": "1683520",
    "end": "1689760"
  },
  {
    "text": "we have seen so far in case if there is any failure which unit containers encounters it depends on the parts restart policy",
    "start": "1689760",
    "end": "1696320"
  },
  {
    "text": "whether to restart the init container or not if it is set to always then it will always restart also init containers can",
    "start": "1696320",
    "end": "1702559"
  },
  {
    "text": "share the same volumes and that of the application containers and altering any kind of code in the",
    "start": "1702559",
    "end": "1707840"
  },
  {
    "text": "unit container leads to restarting of the point let us now see how to implement init containers in kubernetes",
    "start": "1707840",
    "end": "1713440"
  },
  {
    "text": "here i am using an nginx container which is an application container and a busybox container which is the",
    "start": "1713440",
    "end": "1718640"
  },
  {
    "text": "init container both are using the same empty directory volume the init container just modifies the index file of the nginx container and",
    "start": "1718640",
    "end": "1725840"
  },
  {
    "text": "let's see how it happens so let me apply the manifest the pod has started initializing you can see init",
    "start": "1725840",
    "end": "1732480"
  },
  {
    "text": "zero of one that means one container in a container is there out of which zero has been initialized",
    "start": "1732480",
    "end": "1738159"
  },
  {
    "text": "now the part is coming to the start state it's initializing basically",
    "start": "1738159",
    "end": "1743600"
  },
  {
    "text": "and this it's running let's go to nginx and see what it is displaying this",
    "start": "1743600",
    "end": "1749919"
  },
  {
    "text": "displaying hello world from internet container so this shows that in a container was able to modify in the nginx index.html file now since we have",
    "start": "1749919",
    "end": "1757600"
  },
  {
    "text": "seen how the inner container works let's see at the usage of internet controllers here containers can be used for delaying",
    "start": "1757600",
    "end": "1762720"
  },
  {
    "start": "1760000",
    "end": "1760000"
  },
  {
    "text": "the application container startup or can be used to perform pre-condition sets they can also be used to run utility",
    "start": "1762720",
    "end": "1768000"
  },
  {
    "text": "support that is not part of the application container they can be used to see data in database before the application",
    "start": "1768000",
    "end": "1773039"
  },
  {
    "text": "start even it can be run to uh it can be run to configure things at the runtime and wait for something to",
    "start": "1773039",
    "end": "1778880"
  },
  {
    "text": "uh become available maybe a db uh maybe a service that that needs to be available before our",
    "start": "1778880",
    "end": "1784880"
  },
  {
    "text": "application starts it can also perform database schema migrations and preparation and also prepare the schema and it can",
    "start": "1784880",
    "end": "1792159"
  },
  {
    "text": "also be used to create user accounts so several use cases are there wherein we can use the in-depth containers",
    "start": "1792159",
    "end": "1797279"
  },
  {
    "text": "now let's get started with the scheduling and uh resources of internet containers so init containers and",
    "start": "1797279",
    "end": "1802399"
  },
  {
    "start": "1799000",
    "end": "1799000"
  },
  {
    "text": "application containers co-exist inside a bond and the effective request or limit for a resource of pod depends on",
    "start": "1802399",
    "end": "1808960"
  },
  {
    "text": "what we specify for both init containers and the application containers so the effective request limit for the",
    "start": "1808960",
    "end": "1814399"
  },
  {
    "text": "pods resource is the higher of the sum of request limit for a resource of all the application containers that",
    "start": "1814399",
    "end": "1820159"
  },
  {
    "text": "are present and the effective request limit for the resource of the init containers wherein the effective request limit for",
    "start": "1820159",
    "end": "1826240"
  },
  {
    "text": "the resource of the init containers is the highest of any particular resource request limit that is defined",
    "start": "1826240",
    "end": "1831279"
  },
  {
    "text": "on all the unit containers with this we wrap up our section and we move on with the face off",
    "start": "1831279",
    "end": "1837279"
  },
  {
    "text": "so this is the comparison between init container startup probe and post output",
    "start": "1837279",
    "end": "1842320"
  },
  {
    "start": "1842000",
    "end": "1842000"
  },
  {
    "text": "so first let's set the parameters uh based on the container so yeah post start hook can be used inside the",
    "start": "1842320",
    "end": "1847760"
  },
  {
    "text": "same container as well as startup uh probe can be used inside the same container uh but",
    "start": "1847760",
    "end": "1852960"
  },
  {
    "text": "init container requires a separate container so application container is different and energy container is different",
    "start": "1852960",
    "end": "1858240"
  },
  {
    "text": "then the score so uh scope of post art hook is limited to a container likewise scope of the startup rope is",
    "start": "1858240",
    "end": "1865440"
  },
  {
    "text": "limited to a container while the init container scope is not restricted to a container but to the whole pot",
    "start": "1865440",
    "end": "1871279"
  },
  {
    "text": "so init containers are bound to the pot and not some particular application container now running the container image uh so",
    "start": "1871279",
    "end": "1878559"
  },
  {
    "text": "init container has the freedom to run the same or separate image but the post art hook and startup probe don't have this privilege",
    "start": "1878559",
    "end": "1884960"
  },
  {
    "text": "so they run on the same image as that of the application because they are running inside the same container",
    "start": "1884960",
    "end": "1890480"
  },
  {
    "text": "and the run guarantees suppose start hook has no guarantee at all and rest of the two must run successfully in order to",
    "start": "1890480",
    "end": "1897840"
  },
  {
    "text": "proceed forward then talking about the failure thresholds and restarts so startup probe can have the threshold",
    "start": "1897840",
    "end": "1905519"
  },
  {
    "text": "specified and those should be decent in number should be a bit higher than what we specify for lightness program readiness for",
    "start": "1905519",
    "end": "1911600"
  },
  {
    "text": "for post start hooks uh we don't have any threshold but we starts happen depending on the pods restart policy",
    "start": "1911600",
    "end": "1918240"
  },
  {
    "text": "and for the init containers uh restart actually happens again depending on the parts restart policy",
    "start": "1918240",
    "end": "1924320"
  },
  {
    "text": "and in case uh the post start hook actually fails then the container fails and the container actually restarts and",
    "start": "1924320",
    "end": "1929840"
  },
  {
    "text": "requests usage so usage is almost similar but",
    "start": "1929840",
    "end": "1934960"
  },
  {
    "text": "the distinct things i'll mention here so post art is generally used to uh signal the external listeners that my",
    "start": "1934960",
    "end": "1942000"
  },
  {
    "text": "application is going to start now or maybe it can be used for preconditional checks and may be introducing some delays uh",
    "start": "1942000",
    "end": "1949120"
  },
  {
    "text": "specifically init containers i have covered separately so this can be used for various initialization purposes",
    "start": "1949120",
    "end": "1955519"
  },
  {
    "text": "and for startup probes it is appropriate for slow starting containers and we must be specifying some huge",
    "start": "1955519",
    "end": "1962159"
  },
  {
    "text": "number in the failure threshold last is the count so init containers can",
    "start": "1962159",
    "end": "1968000"
  },
  {
    "text": "be multiple in numbers so we can have 10 unit containers depending on say or needs but for start hook can be one",
    "start": "1968000",
    "end": "1974799"
  },
  {
    "text": "and we can choose between the mechanisms that are present for the post output likewise uh there can be",
    "start": "1974799",
    "end": "1981679"
  },
  {
    "text": "only one startup probe and we can choose with between the different mechanisms for probing",
    "start": "1981679",
    "end": "1987360"
  },
  {
    "text": "thanks a lot for joining this talk uh now it's a time for qa it's bit late",
    "start": "1987360",
    "end": "1992799"
  },
  {
    "text": "only uh we are left with almost two minutes or so so we can join in slack at this channel uh to kubecon 101 uh",
    "start": "1992799",
    "end": "2000720"
  },
  {
    "text": "hope you enjoyed the conference and i hope you enjoyed my talk also see you in the slack channel now",
    "start": "2000720",
    "end": "2007440"
  }
]