[
  {
    "text": "hi i'm david adams a senior principal",
    "start": "80",
    "end": "2080"
  },
  {
    "text": "tech marketing engineer",
    "start": "2080",
    "end": "3439"
  },
  {
    "text": "with dell technologies cloud and with me",
    "start": "3439",
    "end": "5520"
  },
  {
    "text": "are ashish batwara",
    "start": "5520",
    "end": "6960"
  },
  {
    "text": "engineering head streaming data platform",
    "start": "6960",
    "end": "9360"
  },
  {
    "text": "and andre keady",
    "start": "9360",
    "end": "10559"
  },
  {
    "text": "senior principal software engineer today",
    "start": "10559",
    "end": "13200"
  },
  {
    "text": "we'll be demoing a real-time object",
    "start": "13200",
    "end": "14960"
  },
  {
    "text": "detection application",
    "start": "14960",
    "end": "16320"
  },
  {
    "text": "which utilizes data streams from dell",
    "start": "16320",
    "end": "18240"
  },
  {
    "text": "emc streaming data platform",
    "start": "18240",
    "end": "20240"
  },
  {
    "text": "and tiers long-term storage to s3",
    "start": "20240",
    "end": "22320"
  },
  {
    "text": "compatible object storage",
    "start": "22320",
    "end": "23840"
  },
  {
    "text": "with the recently announced dell emc",
    "start": "23840",
    "end": "25680"
  },
  {
    "text": "object scale",
    "start": "25680",
    "end": "26960"
  },
  {
    "text": "currently in early access all deployed",
    "start": "26960",
    "end": "29199"
  },
  {
    "text": "on dell technologies cloud platform",
    "start": "29199",
    "end": "31039"
  },
  {
    "text": "with vsphere with tonzu enabled",
    "start": "31039",
    "end": "34559"
  },
  {
    "text": "this demo solution is made up of four",
    "start": "34559",
    "end": "36719"
  },
  {
    "text": "key technologies",
    "start": "36719",
    "end": "38559"
  },
  {
    "text": "dell technologies cloud platform dtcp",
    "start": "38559",
    "end": "41440"
  },
  {
    "text": "delivers a turnkey experience that's",
    "start": "41440",
    "end": "43440"
  },
  {
    "text": "easy to deploy and manage",
    "start": "43440",
    "end": "45200"
  },
  {
    "text": "due to the tight integration between",
    "start": "45200",
    "end": "46719"
  },
  {
    "text": "vmware cloud foundation and vxrail",
    "start": "46719",
    "end": "49200"
  },
  {
    "text": "with dtcp organizations can now develop",
    "start": "49200",
    "end": "52239"
  },
  {
    "text": "test and run cloud native applications",
    "start": "52239",
    "end": "54719"
  },
  {
    "text": "alongside",
    "start": "54719",
    "end": "55760"
  },
  {
    "text": "virtualized applications in a single",
    "start": "55760",
    "end": "57600"
  },
  {
    "text": "platform",
    "start": "57600",
    "end": "59520"
  },
  {
    "text": "vsphere with tonzu is the",
    "start": "59520",
    "end": "61120"
  },
  {
    "text": "re-architecting of vsphere",
    "start": "61120",
    "end": "62640"
  },
  {
    "text": "to embed kubernetes into the control",
    "start": "62640",
    "end": "64559"
  },
  {
    "text": "plane of vsphere",
    "start": "64559",
    "end": "65760"
  },
  {
    "text": "to unify access to compute storage and",
    "start": "65760",
    "end": "68240"
  },
  {
    "text": "networking",
    "start": "68240",
    "end": "69200"
  },
  {
    "text": "it allows a user to deploy pods directly",
    "start": "69200",
    "end": "71680"
  },
  {
    "text": "into vsphere",
    "start": "71680",
    "end": "72720"
  },
  {
    "text": "known as a vsphere pod or create",
    "start": "72720",
    "end": "75040"
  },
  {
    "text": "developer managed",
    "start": "75040",
    "end": "76880"
  },
  {
    "text": "tanzu kubernetes grid clusters which run",
    "start": "76880",
    "end": "79119"
  },
  {
    "text": "in virtual machines",
    "start": "79119",
    "end": "80640"
  },
  {
    "text": "we will be deploying both of these in",
    "start": "80640",
    "end": "82479"
  },
  {
    "text": "this demo",
    "start": "82479",
    "end": "84479"
  },
  {
    "text": "dell emc object scale is a re-engineered",
    "start": "84479",
    "end": "87680"
  },
  {
    "text": "object storage",
    "start": "87680",
    "end": "88400"
  },
  {
    "text": "platform which takes advantage of",
    "start": "88400",
    "end": "90320"
  },
  {
    "text": "kubernetes native",
    "start": "90320",
    "end": "91840"
  },
  {
    "text": "automation for deployment scaling and",
    "start": "91840",
    "end": "94240"
  },
  {
    "text": "management capabilities",
    "start": "94240",
    "end": "96320"
  },
  {
    "text": "with rich s3 compatibility and",
    "start": "96320",
    "end": "98159"
  },
  {
    "text": "self-service apis developer can quickly",
    "start": "98159",
    "end": "100880"
  },
  {
    "text": "spin up",
    "start": "100880",
    "end": "101680"
  },
  {
    "text": "object storage containers to fuel",
    "start": "101680",
    "end": "103520"
  },
  {
    "text": "everything from big data and analytics",
    "start": "103520",
    "end": "105520"
  },
  {
    "text": "applications",
    "start": "105520",
    "end": "106479"
  },
  {
    "text": "to ephemeral devtest sandboxes in this",
    "start": "106479",
    "end": "109360"
  },
  {
    "text": "case we'll be using it as the long-term",
    "start": "109360",
    "end": "111280"
  },
  {
    "text": "storage",
    "start": "111280",
    "end": "112000"
  },
  {
    "text": "for our streaming application",
    "start": "112000",
    "end": "115520"
  },
  {
    "text": "the dell emc streaming data platform",
    "start": "115520",
    "end": "117759"
  },
  {
    "text": "takes the best of open source",
    "start": "117759",
    "end": "119439"
  },
  {
    "text": "streaming data software in prevega and",
    "start": "119439",
    "end": "121439"
  },
  {
    "text": "apache flink",
    "start": "121439",
    "end": "122560"
  },
  {
    "text": "and pulls it together in a production",
    "start": "122560",
    "end": "124159"
  },
  {
    "text": "grade supported",
    "start": "124159",
    "end": "125680"
  },
  {
    "text": "platform sdp provides the reliable",
    "start": "125680",
    "end": "128640"
  },
  {
    "text": "repeatable platform",
    "start": "128640",
    "end": "129920"
  },
  {
    "text": "for edge and core solutions next",
    "start": "129920",
    "end": "133280"
  },
  {
    "text": "let's take a look at the basic",
    "start": "133280",
    "end": "135120"
  },
  {
    "text": "architectural view for what we've",
    "start": "135120",
    "end": "136879"
  },
  {
    "text": "deployed for this demo solution",
    "start": "136879",
    "end": "142239"
  },
  {
    "text": "first we've deployed dtcp",
    "start": "142239",
    "end": "145599"
  },
  {
    "text": "then enabled vsphere with tonsu",
    "start": "145599",
    "end": "149360"
  },
  {
    "text": "next we deploy object scale as vsphere",
    "start": "149360",
    "end": "151840"
  },
  {
    "text": "pods in its own namespace",
    "start": "151840",
    "end": "153519"
  },
  {
    "text": "in the supervisor cluster",
    "start": "153519",
    "end": "156640"
  },
  {
    "text": "and create an object store for streaming",
    "start": "156640",
    "end": "158640"
  },
  {
    "text": "data platform",
    "start": "158640",
    "end": "160239"
  },
  {
    "text": "then we created a namespace and tkg",
    "start": "160239",
    "end": "162800"
  },
  {
    "text": "clusters for streaming data platform",
    "start": "162800",
    "end": "164800"
  },
  {
    "text": "and jupyterhub then we deployed sdp",
    "start": "164800",
    "end": "170319"
  },
  {
    "text": "jupiter hub and then our streaming",
    "start": "170319",
    "end": "173920"
  },
  {
    "text": "application for object detection",
    "start": "173920",
    "end": "178000"
  },
  {
    "text": "let's quickly review the infrastructure",
    "start": "178000",
    "end": "179599"
  },
  {
    "text": "deployment in vsphere before we move on",
    "start": "179599",
    "end": "185040"
  },
  {
    "text": "here we can see that our dell emc object",
    "start": "185040",
    "end": "187200"
  },
  {
    "text": "scale",
    "start": "187200",
    "end": "188480"
  },
  {
    "text": "service has been enabled under",
    "start": "188480",
    "end": "190000"
  },
  {
    "text": "supervisor services",
    "start": "190000",
    "end": "191599"
  },
  {
    "text": "and so our vsphere plugin has been",
    "start": "191599",
    "end": "194480"
  },
  {
    "text": "enabled",
    "start": "194480",
    "end": "195519"
  },
  {
    "text": "we can look here under object stores to",
    "start": "195519",
    "end": "197840"
  },
  {
    "text": "see that we've already created an object",
    "start": "197840",
    "end": "199680"
  },
  {
    "text": "store",
    "start": "199680",
    "end": "200400"
  },
  {
    "text": "we can either create new stores here or",
    "start": "200400",
    "end": "202720"
  },
  {
    "text": "view our existing ones",
    "start": "202720",
    "end": "205120"
  },
  {
    "text": "this is this object store that we're",
    "start": "205120",
    "end": "206720"
  },
  {
    "text": "using for our streaming data platform",
    "start": "206720",
    "end": "209840"
  },
  {
    "text": "long term storage you can see here that",
    "start": "209840",
    "end": "211680"
  },
  {
    "text": "we have several buckets",
    "start": "211680",
    "end": "213040"
  },
  {
    "text": "and we can also manage users kubernetes",
    "start": "213040",
    "end": "215440"
  },
  {
    "text": "resources",
    "start": "215440",
    "end": "216239"
  },
  {
    "text": "for this deployment certificates events",
    "start": "216239",
    "end": "218959"
  },
  {
    "text": "and health checks",
    "start": "218959",
    "end": "220239"
  },
  {
    "text": "on the left hand side you can see that",
    "start": "220239",
    "end": "221840"
  },
  {
    "text": "it's all deployed in a dell emc",
    "start": "221840",
    "end": "223680"
  },
  {
    "text": "object scale system namespace",
    "start": "223680",
    "end": "227120"
  },
  {
    "text": "as vsphere pods",
    "start": "227120",
    "end": "230239"
  },
  {
    "text": "taking a look at our streaming data",
    "start": "230720",
    "end": "233040"
  },
  {
    "text": "platform namespace where we've",
    "start": "233040",
    "end": "234720"
  },
  {
    "text": "deployed prevega apache flink and all",
    "start": "234720",
    "end": "237760"
  },
  {
    "text": "the other resources",
    "start": "237760",
    "end": "239360"
  },
  {
    "text": "you'll see that we have multiple tkg",
    "start": "239360",
    "end": "241680"
  },
  {
    "text": "clusters that we've deployed here",
    "start": "241680",
    "end": "243840"
  },
  {
    "text": "we have a cluster for our jupiter hub",
    "start": "243840",
    "end": "246720"
  },
  {
    "text": "deployment",
    "start": "246720",
    "end": "247360"
  },
  {
    "text": "as well as a streaming data platform",
    "start": "247360",
    "end": "250239"
  },
  {
    "text": "cluster",
    "start": "250239",
    "end": "251040"
  },
  {
    "text": "which has highly available masternodes",
    "start": "251040",
    "end": "254400"
  },
  {
    "text": "and multiple worker nodes where we've",
    "start": "254400",
    "end": "256720"
  },
  {
    "text": "deployed the streaming data platform",
    "start": "256720",
    "end": "258479"
  },
  {
    "text": "application",
    "start": "258479",
    "end": "259359"
  },
  {
    "text": "which will be reviewed later on in the",
    "start": "259359",
    "end": "260880"
  },
  {
    "text": "demo",
    "start": "260880",
    "end": "263199"
  },
  {
    "text": "now i'm going to hand it over to ashish",
    "start": "266720",
    "end": "268560"
  },
  {
    "text": "to give some more detail",
    "start": "268560",
    "end": "269840"
  },
  {
    "text": "on the streaming data platform",
    "start": "269840",
    "end": "271280"
  },
  {
    "text": "architecture",
    "start": "271280",
    "end": "273919"
  },
  {
    "text": "thank you david uh so let me start with",
    "start": "274080",
    "end": "276960"
  },
  {
    "text": "the dell emc streaming data platform so",
    "start": "276960",
    "end": "278960"
  },
  {
    "text": "dell emc streaming data platform is a",
    "start": "278960",
    "end": "281199"
  },
  {
    "text": "modern",
    "start": "281199",
    "end": "282080"
  },
  {
    "text": "analytic platform that solves the",
    "start": "282080",
    "end": "284320"
  },
  {
    "text": "problem of ingesting",
    "start": "284320",
    "end": "285840"
  },
  {
    "text": "storing and analyzing real time and",
    "start": "285840",
    "end": "288400"
  },
  {
    "text": "historical streaming data",
    "start": "288400",
    "end": "290320"
  },
  {
    "text": "all with enterprise skill and production",
    "start": "290320",
    "end": "292080"
  },
  {
    "text": "support streaming data platform is built",
    "start": "292080",
    "end": "295360"
  },
  {
    "text": "using community developed open source",
    "start": "295360",
    "end": "297520"
  },
  {
    "text": "software components for example",
    "start": "297520",
    "end": "299840"
  },
  {
    "text": "it uses kubernetes as the orchestration",
    "start": "299840",
    "end": "302240"
  },
  {
    "text": "layer",
    "start": "302240",
    "end": "303280"
  },
  {
    "text": "pravega which is a core key component",
    "start": "303280",
    "end": "305120"
  },
  {
    "text": "for streaming data platform",
    "start": "305120",
    "end": "307280"
  },
  {
    "text": "is a streaming storage that simplifies",
    "start": "307280",
    "end": "309520"
  },
  {
    "text": "the development of streaming",
    "start": "309520",
    "end": "310880"
  },
  {
    "text": "applications",
    "start": "310880",
    "end": "312000"
  },
  {
    "text": "by unifying the concept of historical",
    "start": "312000",
    "end": "314400"
  },
  {
    "text": "and real-time data",
    "start": "314400",
    "end": "315840"
  },
  {
    "text": "while providing powerful production",
    "start": "315840",
    "end": "317680"
  },
  {
    "text": "abilities such as exactly once",
    "start": "317680",
    "end": "319440"
  },
  {
    "text": "consistency",
    "start": "319440",
    "end": "320880"
  },
  {
    "text": "and injection auto scaling etc",
    "start": "320880",
    "end": "324240"
  },
  {
    "text": "the main the main other component is a",
    "start": "324240",
    "end": "326479"
  },
  {
    "text": "plug-in architecture",
    "start": "326479",
    "end": "328000"
  },
  {
    "text": "to support modern real-time analytics",
    "start": "328000",
    "end": "330560"
  },
  {
    "text": "engines such as apache flink",
    "start": "330560",
    "end": "332560"
  },
  {
    "text": "also available in the upcoming release",
    "start": "332560",
    "end": "334400"
  },
  {
    "text": "apache spark and provider search",
    "start": "334400",
    "end": "336560"
  },
  {
    "text": "which is kind of an elastic search like",
    "start": "336560",
    "end": "338560"
  },
  {
    "text": "engine that also allows for real-time",
    "start": "338560",
    "end": "341039"
  },
  {
    "text": "streaming queries",
    "start": "341039",
    "end": "342720"
  },
  {
    "text": "of your unstructured log data all on the",
    "start": "342720",
    "end": "345199"
  },
  {
    "text": "same stp platform",
    "start": "345199",
    "end": "347199"
  },
  {
    "text": "hence reducing the need for separate",
    "start": "347199",
    "end": "349120"
  },
  {
    "text": "pipeline and hardware",
    "start": "349120",
    "end": "350880"
  },
  {
    "text": "by taking the best of open source and",
    "start": "350880",
    "end": "352720"
  },
  {
    "text": "pulling it together",
    "start": "352720",
    "end": "354080"
  },
  {
    "text": "in a production grid supported platform",
    "start": "354080",
    "end": "356880"
  },
  {
    "text": "sdp provides the reliable secure",
    "start": "356880",
    "end": "359360"
  },
  {
    "text": "manageable and repeatable platform for",
    "start": "359360",
    "end": "362000"
  },
  {
    "text": "edge and core solutions",
    "start": "362000",
    "end": "364240"
  },
  {
    "text": "streaming data platform has a few key",
    "start": "364240",
    "end": "366800"
  },
  {
    "text": "features",
    "start": "366800",
    "end": "367919"
  },
  {
    "text": "number one unified data analytics",
    "start": "367919",
    "end": "370960"
  },
  {
    "text": "for both real time and historical data",
    "start": "370960",
    "end": "373520"
  },
  {
    "text": "so that",
    "start": "373520",
    "end": "374160"
  },
  {
    "text": "data scientists and developers write",
    "start": "374160",
    "end": "376880"
  },
  {
    "text": "code once that deals with all types of",
    "start": "376880",
    "end": "379039"
  },
  {
    "text": "data without worrying about",
    "start": "379039",
    "end": "380960"
  },
  {
    "text": "independent batch and stream processing",
    "start": "380960",
    "end": "383360"
  },
  {
    "text": "in other words",
    "start": "383360",
    "end": "384479"
  },
  {
    "text": "developers don't have to code",
    "start": "384479",
    "end": "386000"
  },
  {
    "text": "differently against the live",
    "start": "386000",
    "end": "387919"
  },
  {
    "text": "of the wired data versus historical",
    "start": "387919",
    "end": "389840"
  },
  {
    "text": "files of data",
    "start": "389840",
    "end": "391520"
  },
  {
    "text": "now batch iot events and pure byte",
    "start": "391520",
    "end": "394720"
  },
  {
    "text": "stream use cases",
    "start": "394720",
    "end": "396080"
  },
  {
    "text": "all can co-exist on the same platform",
    "start": "396080",
    "end": "398960"
  },
  {
    "text": "the second key feature",
    "start": "398960",
    "end": "400319"
  },
  {
    "text": "is a dvr-like injection and playback",
    "start": "400319",
    "end": "402800"
  },
  {
    "text": "capabilities that stp has",
    "start": "402800",
    "end": "404880"
  },
  {
    "text": "that allows ingestion of historical and",
    "start": "404880",
    "end": "407600"
  },
  {
    "text": "real-time data using the single",
    "start": "407600",
    "end": "409520"
  },
  {
    "text": "injection pipeline",
    "start": "409520",
    "end": "410800"
  },
  {
    "text": "unlike two existing solutions that",
    "start": "410800",
    "end": "412639"
  },
  {
    "text": "require one solution for real-time data",
    "start": "412639",
    "end": "415599"
  },
  {
    "text": "and another one for different batch",
    "start": "415599",
    "end": "417840"
  },
  {
    "text": "processing",
    "start": "417840",
    "end": "419039"
  },
  {
    "text": "for the historical data for sdp users",
    "start": "419039",
    "end": "421680"
  },
  {
    "text": "can go back in time and play the",
    "start": "421680",
    "end": "423440"
  },
  {
    "text": "historical stream",
    "start": "423440",
    "end": "424720"
  },
  {
    "text": "alongside the real time stream the third",
    "start": "424720",
    "end": "427440"
  },
  {
    "text": "key feature is that",
    "start": "427440",
    "end": "428960"
  },
  {
    "text": "the support for two tier long term",
    "start": "428960",
    "end": "431199"
  },
  {
    "text": "stories",
    "start": "431199",
    "end": "432479"
  },
  {
    "text": "an architecture that allows industry",
    "start": "432479",
    "end": "435120"
  },
  {
    "text": "standard storage systems such as ice",
    "start": "435120",
    "end": "436960"
  },
  {
    "text": "salon",
    "start": "436960",
    "end": "437440"
  },
  {
    "text": "and ecs to be used for the long term",
    "start": "437440",
    "end": "439360"
  },
  {
    "text": "storage the configuration allows users",
    "start": "439360",
    "end": "442160"
  },
  {
    "text": "to configure data retention period",
    "start": "442160",
    "end": "444240"
  },
  {
    "text": "or until the size grows to a specific",
    "start": "444240",
    "end": "446400"
  },
  {
    "text": "limit",
    "start": "446400",
    "end": "447440"
  },
  {
    "text": "the fourth key feature is the enterprise",
    "start": "447440",
    "end": "449360"
  },
  {
    "text": "grade security",
    "start": "449360",
    "end": "450560"
  },
  {
    "text": "which is of prime importance when",
    "start": "450560",
    "end": "452080"
  },
  {
    "text": "multiple business units leverages on the",
    "start": "452080",
    "end": "454080"
  },
  {
    "text": "same platform",
    "start": "454080",
    "end": "455120"
  },
  {
    "text": "instead of every business unit building",
    "start": "455120",
    "end": "457039"
  },
  {
    "text": "their own independent solutions",
    "start": "457039",
    "end": "459360"
  },
  {
    "text": "and last but not least to the secure and",
    "start": "459360",
    "end": "461280"
  },
  {
    "text": "scalable multi-tenant",
    "start": "461280",
    "end": "462880"
  },
  {
    "text": "development platform a platform that can",
    "start": "462880",
    "end": "465360"
  },
  {
    "text": "be used",
    "start": "465360",
    "end": "466319"
  },
  {
    "text": "by multiple independent business units",
    "start": "466319",
    "end": "468160"
  },
  {
    "text": "in comparison to existing solutions",
    "start": "468160",
    "end": "470400"
  },
  {
    "text": "that require each business unit to stay",
    "start": "470400",
    "end": "473039"
  },
  {
    "text": "stand their own",
    "start": "473039",
    "end": "474000"
  },
  {
    "text": "system for the analytics so that means",
    "start": "474000",
    "end": "477199"
  },
  {
    "text": "sdp has",
    "start": "477199",
    "end": "478560"
  },
  {
    "text": "necessary access control to ensure that",
    "start": "478560",
    "end": "480720"
  },
  {
    "text": "data is secure",
    "start": "480720",
    "end": "482319"
  },
  {
    "text": "with streaming data platform in place",
    "start": "482319",
    "end": "484720"
  },
  {
    "text": "organizations can now",
    "start": "484720",
    "end": "486160"
  },
  {
    "text": "ingest real-time streaming data and work",
    "start": "486160",
    "end": "488639"
  },
  {
    "text": "with it",
    "start": "488639",
    "end": "489440"
  },
  {
    "text": "in ways that they have never even",
    "start": "489440",
    "end": "491360"
  },
  {
    "text": "imagined we are seeing customers solve",
    "start": "491360",
    "end": "494639"
  },
  {
    "text": "some amazing problems just by having",
    "start": "494639",
    "end": "496639"
  },
  {
    "text": "this access to the depth and breadth of",
    "start": "496639",
    "end": "498560"
  },
  {
    "text": "their",
    "start": "498560",
    "end": "499199"
  },
  {
    "text": "sea of data and being able to analyze it",
    "start": "499199",
    "end": "501759"
  },
  {
    "text": "however they need to",
    "start": "501759",
    "end": "503199"
  },
  {
    "text": "with each let's take a look at our next",
    "start": "503199",
    "end": "505759"
  },
  {
    "text": "section",
    "start": "505759",
    "end": "506319"
  },
  {
    "text": "where andre is demonstrating real-time",
    "start": "506319",
    "end": "508639"
  },
  {
    "text": "object detection",
    "start": "508639",
    "end": "510000"
  },
  {
    "text": "using streaming data platform",
    "start": "510000",
    "end": "513360"
  },
  {
    "text": "hi everyone today i'm going to show you",
    "start": "513760",
    "end": "515919"
  },
  {
    "text": "the object detection demo",
    "start": "515919",
    "end": "517360"
  },
  {
    "text": "using streaming data platform running on",
    "start": "517360",
    "end": "519518"
  },
  {
    "text": "vmware tenzoo",
    "start": "519519",
    "end": "522240"
  },
  {
    "text": "my persona in this demo is data",
    "start": "522240",
    "end": "524399"
  },
  {
    "text": "scientist i'm a part of a team",
    "start": "524399",
    "end": "526160"
  },
  {
    "text": "development advanced driver assistant",
    "start": "526160",
    "end": "528000"
  },
  {
    "text": "system",
    "start": "528000",
    "end": "528880"
  },
  {
    "text": "we continuously collect video and other",
    "start": "528880",
    "end": "531600"
  },
  {
    "text": "sensor data from",
    "start": "531600",
    "end": "533040"
  },
  {
    "text": "the fleet of test vehicles",
    "start": "533040",
    "end": "536080"
  },
  {
    "text": "there is a three stage of this",
    "start": "536080",
    "end": "537440"
  },
  {
    "text": "experiment first",
    "start": "537440",
    "end": "539519"
  },
  {
    "text": "we use the proviga grpc connector and",
    "start": "539519",
    "end": "541920"
  },
  {
    "text": "jupyter notebook to push the video",
    "start": "541920",
    "end": "543839"
  },
  {
    "text": "frames",
    "start": "543839",
    "end": "544480"
  },
  {
    "text": "into a prevega stream proviga provides",
    "start": "544480",
    "end": "548240"
  },
  {
    "text": "a python and java client for the grpc",
    "start": "548240",
    "end": "551200"
  },
  {
    "text": "connector",
    "start": "551200",
    "end": "552399"
  },
  {
    "text": "here in jupiter hub we are using the",
    "start": "552399",
    "end": "554399"
  },
  {
    "text": "python client",
    "start": "554399",
    "end": "556959"
  },
  {
    "text": "the data will be stored in the proviga",
    "start": "556959",
    "end": "558640"
  },
  {
    "text": "stream that i call the",
    "start": "558640",
    "end": "560160"
  },
  {
    "text": "raw video for object detection",
    "start": "560160",
    "end": "563360"
  },
  {
    "text": "i created a flink application",
    "start": "563360",
    "end": "566480"
  },
  {
    "text": "the object detection model runs as a",
    "start": "566480",
    "end": "568160"
  },
  {
    "text": "fling job in",
    "start": "568160",
    "end": "569680"
  },
  {
    "text": "stp it uses the yolo object detection",
    "start": "569680",
    "end": "572399"
  },
  {
    "text": "model",
    "start": "572399",
    "end": "572959"
  },
  {
    "text": "which stands for you only look ones the",
    "start": "572959",
    "end": "575680"
  },
  {
    "text": "fling job uses java binding for",
    "start": "575680",
    "end": "577360"
  },
  {
    "text": "tensorflow",
    "start": "577360",
    "end": "578640"
  },
  {
    "text": "as each video frame is ingested the",
    "start": "578640",
    "end": "581600"
  },
  {
    "text": "object detection model",
    "start": "581600",
    "end": "583040"
  },
  {
    "text": "is used to detect objects such as cars",
    "start": "583040",
    "end": "585760"
  },
  {
    "text": "bosses and people",
    "start": "585760",
    "end": "587440"
  },
  {
    "text": "and it will add labeled boxes to the",
    "start": "587440",
    "end": "590240"
  },
  {
    "text": "video frames around detected objects",
    "start": "590240",
    "end": "593120"
  },
  {
    "text": "it will also enrich the metadata with",
    "start": "593120",
    "end": "595279"
  },
  {
    "text": "the detected object list",
    "start": "595279",
    "end": "597120"
  },
  {
    "text": "and the detection accuracy and finally",
    "start": "597120",
    "end": "600880"
  },
  {
    "text": "using the same connector the grpc i can",
    "start": "600880",
    "end": "604320"
  },
  {
    "text": "pull the events from the object detector",
    "start": "604320",
    "end": "606399"
  },
  {
    "text": "output video stream in prevega and play",
    "start": "606399",
    "end": "608560"
  },
  {
    "text": "the video in",
    "start": "608560",
    "end": "609519"
  },
  {
    "text": "jupiter notebook",
    "start": "609519",
    "end": "612560"
  },
  {
    "text": "and now let's move to the actual demo",
    "start": "612800",
    "end": "615760"
  },
  {
    "text": "we're starting at the sdp ui",
    "start": "615760",
    "end": "619839"
  },
  {
    "text": "first going to log in",
    "start": "620160",
    "end": "623360"
  },
  {
    "text": "and here under the analytics tab",
    "start": "627839",
    "end": "632160"
  },
  {
    "text": "i can create a project this will create",
    "start": "632160",
    "end": "636079"
  },
  {
    "text": "a namespace",
    "start": "636079",
    "end": "636959"
  },
  {
    "text": "for my provega streams in my flink",
    "start": "636959",
    "end": "638959"
  },
  {
    "text": "cluster",
    "start": "638959",
    "end": "641440"
  },
  {
    "text": "note that for this example we are using",
    "start": "642880",
    "end": "645040"
  },
  {
    "text": "the object",
    "start": "645040",
    "end": "646240"
  },
  {
    "text": "object store available on ttcp which was",
    "start": "646240",
    "end": "649279"
  },
  {
    "text": "reviewed earlier in this demo",
    "start": "649279",
    "end": "652560"
  },
  {
    "text": "to the left side i can create a flink",
    "start": "654320",
    "end": "657519"
  },
  {
    "text": "cluster",
    "start": "657519",
    "end": "658160"
  },
  {
    "text": "for my application this can be created",
    "start": "658160",
    "end": "661760"
  },
  {
    "text": "using this ui",
    "start": "661760",
    "end": "664560"
  },
  {
    "text": "or the helm to deploy the flink cluster",
    "start": "664560",
    "end": "667680"
  },
  {
    "text": "size that we need",
    "start": "667680",
    "end": "670560"
  },
  {
    "text": "for the flink application stp provides",
    "start": "670800",
    "end": "674000"
  },
  {
    "text": "a local maven repo where we can upload",
    "start": "674000",
    "end": "676880"
  },
  {
    "text": "the application",
    "start": "676880",
    "end": "678079"
  },
  {
    "text": "needed for this project",
    "start": "678079",
    "end": "681279"
  },
  {
    "text": "now i can run the flink application for",
    "start": "683360",
    "end": "687360"
  },
  {
    "text": "object detection",
    "start": "687360",
    "end": "688240"
  },
  {
    "text": "that reads from the raw video stream",
    "start": "688240",
    "end": "690640"
  },
  {
    "text": "process the data",
    "start": "690640",
    "end": "692079"
  },
  {
    "text": "and push the processed video to a new",
    "start": "692079",
    "end": "694880"
  },
  {
    "text": "stream called object detector",
    "start": "694880",
    "end": "696720"
  },
  {
    "text": "output video on our vega tab here",
    "start": "696720",
    "end": "701360"
  },
  {
    "text": "we can see all the work all the streams",
    "start": "701360",
    "end": "705760"
  },
  {
    "text": "to build this demo first we can start",
    "start": "706000",
    "end": "708480"
  },
  {
    "text": "with the raw video",
    "start": "708480",
    "end": "711440"
  },
  {
    "text": "and the output of the processing goes",
    "start": "711600",
    "end": "714079"
  },
  {
    "text": "into the stream",
    "start": "714079",
    "end": "717839"
  },
  {
    "text": "from the jupiter notebook from the",
    "start": "718639",
    "end": "720800"
  },
  {
    "text": "jupiter hub",
    "start": "720800",
    "end": "721680"
  },
  {
    "text": "i created two notebooks one called",
    "start": "721680",
    "end": "724959"
  },
  {
    "text": "the adas ingest and that will",
    "start": "724959",
    "end": "728320"
  },
  {
    "text": "push the data into provega stream",
    "start": "728320",
    "end": "733519"
  },
  {
    "text": "i'm going to go ahead and start it",
    "start": "736720",
    "end": "740079"
  },
  {
    "text": "the second notebook will use the grpc",
    "start": "740800",
    "end": "744480"
  },
  {
    "text": "to read the video and display it here",
    "start": "744480",
    "end": "748639"
  },
  {
    "text": "with the object detection",
    "start": "748639",
    "end": "751680"
  },
  {
    "text": "both those notebooks are needed for this",
    "start": "753120",
    "end": "755120"
  },
  {
    "text": "demo one for the ingestion",
    "start": "755120",
    "end": "756800"
  },
  {
    "text": "and one to read the data processed by",
    "start": "756800",
    "end": "759680"
  },
  {
    "text": "our flink application",
    "start": "759680",
    "end": "762320"
  },
  {
    "text": "and now let's go back to our sdp ui",
    "start": "762320",
    "end": "766240"
  },
  {
    "text": "from here we're going to look at the",
    "start": "766240",
    "end": "767920"
  },
  {
    "text": "proviga streams",
    "start": "767920",
    "end": "771200"
  },
  {
    "text": "we should be able to see the data start",
    "start": "771200",
    "end": "774079"
  },
  {
    "text": "to",
    "start": "774079",
    "end": "776320"
  },
  {
    "text": "get in the stream here and as the data",
    "start": "777040",
    "end": "780480"
  },
  {
    "text": "is coming into the",
    "start": "780480",
    "end": "781440"
  },
  {
    "text": "vega stream we're seeing the flink",
    "start": "781440",
    "end": "783279"
  },
  {
    "text": "application reading",
    "start": "783279",
    "end": "785040"
  },
  {
    "text": "the data and processing it",
    "start": "785040",
    "end": "788399"
  },
  {
    "text": "so below that here is the flink job",
    "start": "795040",
    "end": "798160"
  },
  {
    "text": "reading from the stream processing and",
    "start": "798160",
    "end": "799760"
  },
  {
    "text": "writing this data",
    "start": "799760",
    "end": "800880"
  },
  {
    "text": "to the object detector output video",
    "start": "800880",
    "end": "802720"
  },
  {
    "text": "stream",
    "start": "802720",
    "end": "804399"
  },
  {
    "text": "if you go back to the scope",
    "start": "804399",
    "end": "808320"
  },
  {
    "text": "we should see the data again written to",
    "start": "808320",
    "end": "810240"
  },
  {
    "text": "this stream here",
    "start": "810240",
    "end": "814240"
  },
  {
    "text": "as you can see",
    "start": "814240",
    "end": "816959"
  },
  {
    "text": "on the screen here",
    "start": "818320",
    "end": "821120"
  },
  {
    "text": "here is the enrich raw video after",
    "start": "823120",
    "end": "825199"
  },
  {
    "text": "running the object detection job back to",
    "start": "825199",
    "end": "828160"
  },
  {
    "text": "the jupiter hub",
    "start": "828160",
    "end": "830480"
  },
  {
    "text": "now let's test the new object detection",
    "start": "830480",
    "end": "832480"
  },
  {
    "text": "model on the video collected",
    "start": "832480",
    "end": "835839"
  },
  {
    "text": "that video that raw video has been",
    "start": "835839",
    "end": "837920"
  },
  {
    "text": "continuously ingested into the scp",
    "start": "837920",
    "end": "841120"
  },
  {
    "text": "and now i'm going to play the demo",
    "start": "841120",
    "end": "845120"
  },
  {
    "text": "as you can see in this picture there's",
    "start": "855839",
    "end": "857680"
  },
  {
    "text": "frames around the detected objects",
    "start": "857680",
    "end": "860480"
  },
  {
    "text": "people buses cars",
    "start": "860480",
    "end": "864800"
  },
  {
    "text": "bicycles",
    "start": "868839",
    "end": "870079"
  },
  {
    "text": "and it's running live as we are",
    "start": "870079",
    "end": "872160"
  },
  {
    "text": "ingesting the data",
    "start": "872160",
    "end": "874240"
  },
  {
    "text": "the object detection runs the",
    "start": "874240",
    "end": "877680"
  },
  {
    "text": "model detect the objects and we can",
    "start": "877680",
    "end": "880240"
  },
  {
    "text": "process it",
    "start": "880240",
    "end": "880959"
  },
  {
    "text": "and display it",
    "start": "880959",
    "end": "884079"
  },
  {
    "text": "as you can see here with this this",
    "start": "884079",
    "end": "886639"
  },
  {
    "text": "concludes our demo",
    "start": "886639",
    "end": "887839"
  },
  {
    "text": "for the object detection using the",
    "start": "887839",
    "end": "890079"
  },
  {
    "text": "streaming data platform running on",
    "start": "890079",
    "end": "891519"
  },
  {
    "text": "vmware 10 zoom",
    "start": "891519",
    "end": "893199"
  },
  {
    "text": "thank you",
    "start": "893199",
    "end": "899510"
  },
  {
    "text": "[Music]",
    "start": "899510",
    "end": "903519"
  },
  {
    "text": "you",
    "start": "903519",
    "end": "905600"
  }
]