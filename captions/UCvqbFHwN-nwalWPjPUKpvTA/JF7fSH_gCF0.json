[
  {
    "text": "hello everyone I'm David I work for G research who are a originally uk- based",
    "start": "80",
    "end": "5920"
  },
  {
    "text": "company but expanding in Dallas now um I work on kubernetes and related",
    "start": "5920",
    "end": "12320"
  },
  {
    "text": "Technologies in our open source division um I'm here to talk about username spaces in",
    "start": "12320",
    "end": "18640"
  },
  {
    "text": "kubernetes but first of all I just want to start off with a shell so this is",
    "start": "18640",
    "end": "24720"
  },
  {
    "text": "just a standard Linux command line no name spaces or anything going on here",
    "start": "24720",
    "end": "29759"
  },
  {
    "text": "I'm just logged into a Linux machine um I've got a little exploit here so what",
    "start": "29759",
    "end": "35719"
  },
  {
    "text": "happens when I run it oh I assume to be root so yeah okay I'm root right well",
    "start": "35719",
    "end": "43920"
  },
  {
    "text": "let's see so what did that exploit actually do it's not an exploit all it",
    "start": "43920",
    "end": "50640"
  },
  {
    "text": "actually did is create a username space and mapped the root user to my current",
    "start": "50640",
    "end": "56920"
  },
  {
    "text": "username so basically the user ID that I'm logged in as becomes mapped to uid Z",
    "start": "56920",
    "end": "64080"
  },
  {
    "text": "so it appears to be root but it's not really root so this is what username",
    "start": "64080",
    "end": "69479"
  },
  {
    "text": "spaces gives you at a very basic level um and I'm using the unshare command",
    "start": "69479",
    "end": "74840"
  },
  {
    "text": "here which is a very simple command that interfaces to the unshare system Coe which is what is used underneath",
    "start": "74840",
    "end": "82320"
  },
  {
    "text": "containers so just to sort of look at that um unshare does a lot of things um",
    "start": "82320",
    "end": "88600"
  },
  {
    "text": "but if you scroll down a bit in the man page it says somewhere yeah it creates a username space so yeah it created a",
    "start": "88600",
    "end": "95920"
  },
  {
    "text": "username space so username spaces well sure I've sort of shown what they are a",
    "start": "95920",
    "end": "102880"
  },
  {
    "text": "very high level there um there's a little bit more to them than that uh but let's first of all just recap some",
    "start": "102880",
    "end": "109320"
  },
  {
    "text": "container Basics so when I'm talking about containers I'm going to be talking about Linux containers obviously there's",
    "start": "109320",
    "end": "116280"
  },
  {
    "text": "Solaris zones FreeBSD jails and windows containers as well which kubernetes does",
    "start": "116280",
    "end": "122399"
  },
  {
    "text": "support Windows containers it doesn't quite support any of the other Technologies although there are ways to build containers on top of some of them",
    "start": "122399",
    "end": "130160"
  },
  {
    "text": "um but we're not talking about that here this is very very definitely focused on a particular implementation of",
    "start": "130160",
    "end": "135599"
  },
  {
    "text": "containers in Linux that supports username spaces",
    "start": "135599",
    "end": "140680"
  },
  {
    "text": "so um this is one of the things that containers are built out of on Linux",
    "start": "140680",
    "end": "146760"
  },
  {
    "text": "you've got name spaces which isolate things so you're probably familiar with",
    "start": "146760",
    "end": "152120"
  },
  {
    "text": "things like the mount namespace PID namespace Network namespace um there's more than that as I just showed in the",
    "start": "152120",
    "end": "158280"
  },
  {
    "text": "unshare example um usern name spaces being one of them but there's also the",
    "start": "158280",
    "end": "163760"
  },
  {
    "text": "UTS namespace which covers what your host name is amongst some other bits and pieces the sort of miscellaneous things",
    "start": "163760",
    "end": "171200"
  },
  {
    "text": "um and then there's cgroups as well as Nam spaces so the way to think about it is nam spaces isolate things whereas",
    "start": "171200",
    "end": "178599"
  },
  {
    "text": "cgroups limit things things so cgroups limit the amount of memory you can use the amount of CPU you can use and also",
    "start": "178599",
    "end": "185760"
  },
  {
    "text": "things like IO bandwidth and there's other things there like in coups version two uh CPS can limit the devices that",
    "start": "185760",
    "end": "193519"
  },
  {
    "text": "you can access um and it's associated with the c group even though it's a little bit strange because it's sort of",
    "start": "193519",
    "end": "200440"
  },
  {
    "text": "closer to the more isolation side rather than limiting but you know a lot of this",
    "start": "200440",
    "end": "206680"
  },
  {
    "text": "comes down to just how it happened to be implemented in the kernel um and actually that's actually one of the tricky things about getting some of this",
    "start": "206680",
    "end": "212519"
  },
  {
    "text": "right is the interfaces are sometimes a little bit strange often just because of quirks of",
    "start": "212519",
    "end": "218680"
  },
  {
    "text": "implementation um so we'll look at some examples of that in a moment",
    "start": "218680",
    "end": "224799"
  },
  {
    "text": "so this diagram is a rough example to sort of show how namespaces work so",
    "start": "224799",
    "end": "230680"
  },
  {
    "text": "within the kernel a process is in a particular namespace and then that",
    "start": "230680",
    "end": "236000"
  },
  {
    "text": "process only sees that particular namespace so for example the mount namespace the process only",
    "start": "236000",
    "end": "243159"
  },
  {
    "text": "sees those those mounts that are in that namespace but some of the Nam spaces",
    "start": "243159",
    "end": "248400"
  },
  {
    "text": "like the mount Nam space in particular are hierarchical so if something is mounted in the mount Nam space above it",
    "start": "248400",
    "end": "255239"
  },
  {
    "text": "depending how the namespace is set up it may see the files above it so you can you can use a mount namespace to add",
    "start": "255239",
    "end": "262000"
  },
  {
    "text": "particular files into the visibility of a process but it can still see the processes sorry the the mount point",
    "start": "262000",
    "end": "270000"
  },
  {
    "text": "above that in the tree of um namespaces uh whereas the PID namespace",
    "start": "270000",
    "end": "276160"
  },
  {
    "text": "is not really hierarchical um so why why am I sort of going into the detail of that well it's kind of interesting and",
    "start": "276160",
    "end": "284039"
  },
  {
    "text": "we can also demonstrate some of this so here again I'm using unshare to demonstrate this and by adding minus",
    "start": "284039",
    "end": "290479"
  },
  {
    "text": "minus user there I'm creating the user name space and as we see we get another",
    "start": "290479",
    "end": "295680"
  },
  {
    "text": "root shell and we know now that this is not a root shell really but we've also created a pit namespace",
    "start": "295680",
    "end": "302360"
  },
  {
    "text": "so if we just look at what PID we have well we're press id1 but actually",
    "start": "302360",
    "end": "307880"
  },
  {
    "text": "interestingly if we ask for all the processes it's like oh interesting that's um a huge list of processes so",
    "start": "307880",
    "end": "315199"
  },
  {
    "text": "what have I done here well I haven't created a mount namespace so if I add",
    "start": "315199",
    "end": "321720"
  },
  {
    "text": "this option on the end minus minus Mount proc then unshare will actually create a",
    "start": "321720",
    "end": "326960"
  },
  {
    "text": "mount namespace as well and if I do that I'm still PID one if I do PS ux I see just",
    "start": "326960",
    "end": "334880"
  },
  {
    "text": "what's in my namespace here so that's a little bit strange and we have to be a",
    "start": "334880",
    "end": "340000"
  },
  {
    "text": "little bit careful with how we set up name spaces obviously normally something like Docker or uh if you're using",
    "start": "340000",
    "end": "345680"
  },
  {
    "text": "kubernetes run C underneath it uh depending exactly what implementation you're using is going to do that for you",
    "start": "345680",
    "end": "351440"
  },
  {
    "text": "so it's quite hard to get that wrong but as we'll see there are ways that the underlying tools occasionally do get",
    "start": "351440",
    "end": "356880"
  },
  {
    "text": "this wrong and create security issues so um let close that",
    "start": "356880",
    "end": "365280"
  },
  {
    "text": "so um I quite like this as a sort of comic example of what username spaces",
    "start": "365280",
    "end": "371120"
  },
  {
    "text": "are this is from uh Julia Evans with wizard Zen um and she's got a whole",
    "start": "371120",
    "end": "376680"
  },
  {
    "text": "series on uh containers and what they what what they're built out of um and as",
    "start": "376680",
    "end": "383440"
  },
  {
    "text": "you can see on one of the panels here it says that not all Container run times use them and so kubernetes for a long",
    "start": "383440",
    "end": "389400"
  },
  {
    "text": "time has not used username spaces it's been possible to enable them on Docker but by default most people don't and",
    "start": "389400",
    "end": "396440"
  },
  {
    "text": "they're often not used which is a shame um so what is",
    "start": "396440",
    "end": "402560"
  },
  {
    "text": "a username space well we have a PID name space which isolates pids as I just",
    "start": "402560",
    "end": "409639"
  },
  {
    "text": "showed you um you get a totally new set of process IDs and actually username",
    "start": "409639",
    "end": "415199"
  },
  {
    "text": "spaces are more like a uid namespace it lets you map one uid or a range of uids",
    "start": "415199",
    "end": "421440"
  },
  {
    "text": "inside a container to a different range outside them um now not you have to be",
    "start": "421440",
    "end": "426520"
  },
  {
    "text": "root to map to anything other than your own user ID but the demo I just showed where I was only mapping a single user",
    "start": "426520",
    "end": "432680"
  },
  {
    "text": "ID so I was mapping my own user ID to Roots actually any user on a Linux machine can do that if nothing else",
    "start": "432680",
    "end": "439039"
  },
  {
    "text": "limits that so there are interesting use cases here for sandboxing and um some",
    "start": "439039",
    "end": "444319"
  },
  {
    "text": "things like Chrome for example do actually try to use username spaces in some of their sandboxing if they can um",
    "start": "444319",
    "end": "451199"
  },
  {
    "text": "there are slight complexities there but I'm talking about kubernetes so I won't go into the details of how Chrome does",
    "start": "451199",
    "end": "456800"
  },
  {
    "text": "sandboxing but if you're interested this is definitely a way of sandboxing things that means that if for example something",
    "start": "456800",
    "end": "464599"
  },
  {
    "text": "runs a different process uh sorry user ID then it can't there's no way of even mapping to that other user ID or it",
    "start": "464599",
    "end": "470599"
  },
  {
    "text": "appear as nobody um so it can't talk between two different user IDs even",
    "start": "470599",
    "end": "476360"
  },
  {
    "text": "unexpectedly so it's quite a nice form of sand boxing for user IDs which if you",
    "start": "476360",
    "end": "483400"
  },
  {
    "text": "actually think about how often if you're following best practices you run not as",
    "start": "483400",
    "end": "488759"
  },
  {
    "text": "root with Docker or kubernetes you run as you know uid a th thousand or whatever is the standard uid in your",
    "start": "488759",
    "end": "494720"
  },
  {
    "text": "distribution usually um but the issue there is actually if you think about it other containers running are also",
    "start": "494720",
    "end": "502039"
  },
  {
    "text": "running as uid a th thousand so following best practices it turns out",
    "start": "502039",
    "end": "507800"
  },
  {
    "text": "that actually you still may be running things the same user ID on the host as far as it's concerned and the isolation is",
    "start": "507800",
    "end": "514719"
  },
  {
    "text": "provided by namespaces but if for example something leaks between containers then it's still possible that",
    "start": "514719",
    "end": "521159"
  },
  {
    "text": "you could attack the other container from a partial container Escape um so",
    "start": "521159",
    "end": "528000"
  },
  {
    "text": "user name spaces add a extra layer on top of that so I haven't really talked about",
    "start": "528000",
    "end": "534360"
  },
  {
    "text": "kubernetes yet but what's happening in kubernetes so usern space is Now Beta as",
    "start": "534360",
    "end": "540399"
  },
  {
    "text": "of kubernetes 1.30 which was released a month or so ago I think um and how does",
    "start": "540399",
    "end": "547920"
  },
  {
    "text": "that work well it's actually very simple so forun I can't see my mouse up here",
    "start": "547920",
    "end": "553839"
  },
  {
    "text": "but where it says host users up there um you just set host users false so this",
    "start": "553839",
    "end": "560160"
  },
  {
    "text": "follows the pattern of um Network for example where you say host Network true",
    "start": "560160",
    "end": "566920"
  },
  {
    "text": "and the default is false this is the other way so host users is defaulting to true because it's a new thing and so",
    "start": "566920",
    "end": "574200"
  },
  {
    "text": "it's always been that way around whereas if you think about host network if you are running something that wants host",
    "start": "574200",
    "end": "579600"
  },
  {
    "text": "network access you say you want the host Network whereas username space is the other way around but it is the same it's",
    "start": "579600",
    "end": "585839"
  },
  {
    "text": "the same mechanism the same similar name so it's not really very complicated you",
    "start": "585839",
    "end": "590959"
  },
  {
    "text": "you turn a flag on and that's it so what does that look like well I've got a",
    "start": "590959",
    "end": "596440"
  },
  {
    "text": "thing running here hopefully it's running still yes it is uh so here I am I'm inside a kubernetes",
    "start": "596440",
    "end": "604560"
  },
  {
    "text": "container with a username space so I'm running this as rout obviously not",
    "start": "604560",
    "end": "610600"
  },
  {
    "text": "necessarily best practices but actually this is not running as user ID user ID",
    "start": "610600",
    "end": "616040"
  },
  {
    "text": "zero on the host so um if I look at this magic file I can see what the uid map is",
    "start": "616040",
    "end": "624079"
  },
  {
    "text": "um and this this is a file that serves two purposes you can use it for debugging but it's also the file that",
    "start": "624079",
    "end": "629320"
  },
  {
    "text": "under the hood um the container runtime or whatever is setting up this container wres to to say what to map particular",
    "start": "629320",
    "end": "636800"
  },
  {
    "text": "uids to so here it's chosen a very big number you can see on the second column",
    "start": "636800",
    "end": "643480"
  },
  {
    "text": "um and then it's mapped a range of 65,000 user IDs to zero inside the container so what the what the what the",
    "start": "643480",
    "end": "650600"
  },
  {
    "text": "free numbers are are the uid inside the container to start at the uid outside",
    "start": "650600",
    "end": "656600"
  },
  {
    "text": "the container to start at and the number of U ID s to map so in this case it's",
    "start": "656600",
    "end": "661720"
  },
  {
    "text": "saying map zero inside the container to that very big number whatever that is",
    "start": "661720",
    "end": "667680"
  },
  {
    "text": "can't do that but two two billion or something um map 65,000 users so one one",
    "start": "667680",
    "end": "674959"
  },
  {
    "text": "thing that is a limiting factor with usern name space is you only actually get 35,000 user sorry not 65,000 user",
    "start": "674959",
    "end": "682240"
  },
  {
    "text": "IDs um but generally that's enough for container usage unless you're doing something crazy um in the past",
    "start": "682240",
    "end": "689880"
  },
  {
    "text": "on older Linux machines that was how many you got anyway and then the user ID was increased to 32 bit a very long time",
    "start": "689880",
    "end": "695839"
  },
  {
    "text": "ago um but username spaces just carve up that existing range um there is a",
    "start": "695839",
    "end": "702320"
  },
  {
    "text": "potential future work going on in the kernel to actually expand the Kernel's internal user ID to 64 bits so that",
    "start": "702320",
    "end": "710000"
  },
  {
    "text": "containers could actually have a 32bit range but that would never be uh a",
    "start": "710000",
    "end": "715040"
  },
  {
    "text": "particular username space would never have more than 32 bits worth of user ID so that way it could actually be almost",
    "start": "715040",
    "end": "721440"
  },
  {
    "text": "fully virtualized as it were you wouldn't you you could have something that wouldn't be visible",
    "start": "721440",
    "end": "727040"
  },
  {
    "text": "from outside as a limiting factor um but for now this is not really a limiting factor the only the only thing that is",
    "start": "727040",
    "end": "733920"
  },
  {
    "text": "slightly annoying is if you do want to create a username space within a username space which is fine you can Nest them up to 16 times um you can't",
    "start": "733920",
    "end": "743199"
  },
  {
    "text": "you you lose some number of uids each time uh assuming you don't want to map root inside the usernames space to the",
    "start": "743199",
    "end": "749639"
  },
  {
    "text": "other route in the next usern name space so you're probably going to lose at least one user idea each time you do",
    "start": "749639",
    "end": "755079"
  },
  {
    "text": "that um you can do tricks like carve out in the middle so that because nobody is",
    "start": "755079",
    "end": "760199"
  },
  {
    "text": "normally 65334 uh you can keep that at the same",
    "start": "760199",
    "end": "765320"
  },
  {
    "text": "uid range and then make some uid in the middle not work um some of this may be",
    "start": "765320",
    "end": "770800"
  },
  {
    "text": "supported better in later versions of kubernetes you can ask for more user IDs and things um but for now it's not a",
    "start": "770800",
    "end": "776920"
  },
  {
    "text": "huge limiting factor anyway so so other than that sort of weird thing with user",
    "start": "776920",
    "end": "783480"
  },
  {
    "text": "ID is this is just totally like I'm inside a normal container um running as",
    "start": "783480",
    "end": "789000"
  },
  {
    "text": "root uh I can actually do some things in here that I can't normally do inside a",
    "start": "789000",
    "end": "794360"
  },
  {
    "text": "container I can um Mount things I can if I have the capabilities um I'll get to",
    "start": "794360",
    "end": "800199"
  },
  {
    "text": "that in a second but for now this is actually a more secure container than a normal",
    "start": "800199",
    "end": "807480"
  },
  {
    "text": "container so I did lie slightly um so when I said that this is in beta it's in beta and",
    "start": "807480",
    "end": "815279"
  },
  {
    "text": "kubernetes but you actually need release candidate release candidate versions of container D and run C at the moment or",
    "start": "815279",
    "end": "823680"
  },
  {
    "text": "you can use a release candidate version of container d and a release version of crun instead but yeah you you generally",
    "start": "823680",
    "end": "831160"
  },
  {
    "text": "have to mess around with a few versions to make this work so this is actually the kind config that I'm using to run",
    "start": "831160",
    "end": "836440"
  },
  {
    "text": "this example on um so it definitely does work um and that image is actually a Public Image I pushed so if you want to test",
    "start": "836440",
    "end": "843480"
  },
  {
    "text": "this out you can just you know trust me and use that use that image there",
    "start": "843480",
    "end": "849720"
  },
  {
    "text": "um so on the topic of trusting me there was a bug in",
    "start": "849720",
    "end": "855600"
  },
  {
    "text": "runy um this was made the news quite a lot sort of in February or so uh people",
    "start": "855600",
    "end": "861360"
  },
  {
    "text": "probably noticed it and hopefully patched um so I thought I'd just demonstrate this um so it's actually the",
    "start": "861360",
    "end": "869120"
  },
  {
    "text": "world's simplest bug to exploit the the exploit here is uh if I can lose my",
    "start": "869120",
    "end": "874440"
  },
  {
    "text": "mouse again yeah I've lost it there we go um the exploit is there so it leaks",
    "start": "874440",
    "end": "881120"
  },
  {
    "text": "the file descriptor of a particular directory which um happens to be CFSC",
    "start": "881120",
    "end": "886720"
  },
  {
    "text": "group but it doesn't really matter it leaks something that is in the wrong Mount name space to the other Mount name",
    "start": "886720",
    "end": "892399"
  },
  {
    "text": "space so if we just check that this is",
    "start": "892399",
    "end": "897480"
  },
  {
    "text": "working okay so this is actually working this is expected this error message so we're",
    "start": "897480",
    "end": "902959"
  },
  {
    "text": "running a shell in a very strange way um if we ask it where the shell is it says it doesn't know where it is",
    "start": "902959",
    "end": "909120"
  },
  {
    "text": "today um but if we ask it what's in the directory well we see some stuff and you",
    "start": "909120",
    "end": "915720"
  },
  {
    "text": "might notice if you look closely there's some weird cysts fuse things and some kernel stuff which we wouldn't expect",
    "start": "915720",
    "end": "922680"
  },
  {
    "text": "normally to be in the c groups inside a container so what is this well",
    "start": "922680",
    "end": "930319"
  },
  {
    "text": "simple to answer that we just go a few levels up it gives an error message if we ask it what the",
    "start": "930319",
    "end": "936680"
  },
  {
    "text": "working directory is again it tells us it's some dots which is a bit strange but if we type LS uh we we seem to be on",
    "start": "936680",
    "end": "942680"
  },
  {
    "text": "a root file system um and so then we can just do something simple like",
    "start": "942680",
    "end": "949480"
  },
  {
    "text": "uh that and then if we just close this and so I'm running this inside kind so if I",
    "start": "949480",
    "end": "957360"
  },
  {
    "text": "do then uh Docker exec and the the name of the container that the kubernetes",
    "start": "957360",
    "end": "964519"
  },
  {
    "text": "node is running in is V vulnerable control plane um so then if I just run bash here uh it says owned before it",
    "start": "964519",
    "end": "972240"
  },
  {
    "text": "gives me a prompt so I injected something from a container to the host in possibly one of the more trivial uh",
    "start": "972240",
    "end": "979480"
  },
  {
    "text": "container escapes ever so if you haven't patched runy you probably should um but",
    "start": "979480",
    "end": "986040"
  },
  {
    "text": "the interesting thing there is why is that possible well that's possible because my user id user ID Z within the",
    "start": "986040",
    "end": "993800"
  },
  {
    "text": "container is the same as the user ID Z outside the container so if anything like a file descriptor leaks from one",
    "start": "993800",
    "end": "1000680"
  },
  {
    "text": "context to another then you can use that file descriptor to well do anything that",
    "start": "1000680",
    "end": "1005880"
  },
  {
    "text": "root can because there's nothing limiting what root can do inside a container if you're using username",
    "start": "1005880",
    "end": "1012519"
  },
  {
    "text": "spaces um it turns out that it's not even possible actually it fails I won't",
    "start": "1012519",
    "end": "1017839"
  },
  {
    "text": "demo it but it fails to run the container in most cases because it tries to CD to the directory and it just can't",
    "start": "1017839",
    "end": "1023639"
  },
  {
    "text": "it can't get there um because it tries to do a mkd for reasons um it possibly",
    "start": "1023639",
    "end": "1029760"
  },
  {
    "text": "is possible to get further than that but you might be able to get readon access but you definitely can't get right",
    "start": "1029760",
    "end": "1035400"
  },
  {
    "text": "access um with this so username spaces limit pretty much the damage that can be done to just an arbitrary read rather",
    "start": "1035400",
    "end": "1042480"
  },
  {
    "text": "than an arbitrary right um so how we doing for time",
    "start": "1042480",
    "end": "1049400"
  },
  {
    "text": "okay so why why now why why username space support now you know actually",
    "start": "1049400",
    "end": "1055640"
  },
  {
    "text": "username spaces have been in the Kel for 10 years or so um",
    "start": "1055640",
    "end": "1062480"
  },
  {
    "text": "so ID match mounts is the reason for this",
    "start": "1062480",
    "end": "1068240"
  },
  {
    "text": "so ID mapped mounts are a feature that was added in 2020 to Linux um but each",
    "start": "1069679",
    "end": "1075720"
  },
  {
    "text": "file system needs some extra support so um um over time file systems are gaining",
    "start": "1075720",
    "end": "1082120"
  },
  {
    "text": "support and uh Rodrigo Campos who did some of the work for the kubernetes support actually added support for temp",
    "start": "1082120",
    "end": "1088400"
  },
  {
    "text": "Fs in Linux 6.3 and so that's the minimum version of Linux that you need",
    "start": "1088400",
    "end": "1093840"
  },
  {
    "text": "for kubernetes to work with username spaces um conveniently that the version",
    "start": "1093840",
    "end": "1099440"
  },
  {
    "text": "in Ubuntu 2404 which is the LTS version of yuntu is recent enough that it has a",
    "start": "1099440",
    "end": "1105320"
  },
  {
    "text": "newer kernel than that so one way is run Ubuntu depending uh what what",
    "start": "1105320",
    "end": "1111000"
  },
  {
    "text": "distribution you use I'm not sure if Red Hat have backported it yet there was some talk that they might I haven't kept",
    "start": "1111000",
    "end": "1116360"
  },
  {
    "text": "up on that [Music] um sorry 2404 is the yuntu version so",
    "start": "1116360",
    "end": "1124640"
  },
  {
    "text": "the the latest LTS so it should be something if you're using yunu that you upgrade to anyway so it's not it's not a",
    "start": "1124640",
    "end": "1131120"
  },
  {
    "text": "special version um so id M mounts is basically using the",
    "start": "1131120",
    "end": "1138960"
  },
  {
    "text": "uid mapping that I showed you for file systems as well that didn't exist before",
    "start": "1138960",
    "end": "1144880"
  },
  {
    "text": "before if you created a username space you just saw the IDS that the the files had outside the container if they mapped",
    "start": "1144880",
    "end": "1152559"
  },
  {
    "text": "to an ID inside the container otherwise you saw them owned by nobody so files that were owned by root outside of the",
    "start": "1152559",
    "end": "1159799"
  },
  {
    "text": "um container would just show was owned by nobody which wasn't very helpful um and this is a totally different",
    "start": "1159799",
    "end": "1166120"
  },
  {
    "text": "mechanism to NFS ID mapping if you're familiar with that this is a sort of internal kernel only thing rather than",
    "start": "1166120",
    "end": "1172080"
  },
  {
    "text": "something that is done over the wire or things like NFS is um actually there's no support yet for NFS ID mapping that's",
    "start": "1172080",
    "end": "1179159"
  },
  {
    "text": "a different complex thing um so to try and explain this a little bit um when",
    "start": "1179159",
    "end": "1185159"
  },
  {
    "text": "you write the file you write something like 013 to the magic uid map file um",
    "start": "1185159",
    "end": "1192600"
  },
  {
    "text": "I'm simplifying here you actually can't always Echo to it because it has to be a single right that does it but um",
    "start": "1192600",
    "end": "1199360"
  },
  {
    "text": "anyway for avoiding simplification basically you may have fewer IDs inside",
    "start": "1199360",
    "end": "1205360"
  },
  {
    "text": "the container so here I've got zero on the bottom left is root on the host and",
    "start": "1205360",
    "end": "1211919"
  },
  {
    "text": "so actually root in the container is mapped to uid one outside of the container so fairly simple normally it",
    "start": "1211919",
    "end": "1219880"
  },
  {
    "text": "would be a much larger number than that but possibly using smaller numbers makes it easier to understand um and you can",
    "start": "1219880",
    "end": "1225960"
  },
  {
    "text": "actually Nest these further so that's what I was sort of saying that you you could have a range of U IDs and then you have a smaller range of U IDs and go",
    "start": "1225960",
    "end": "1233200"
  },
  {
    "text": "on with that um little bit of a pain to set up but there are there are reasons that you might want to do that",
    "start": "1233200",
    "end": "1240159"
  },
  {
    "text": "um [Music] so since kubernetes 128 this has been",
    "start": "1240159",
    "end": "1245760"
  },
  {
    "text": "supported called stateful container support so it means that volumes and other things were supported with",
    "start": "1245760",
    "end": "1251159"
  },
  {
    "text": "username spaces before that if you wanted to use username spaces you had to either not have volumes or the other",
    "start": "1251159",
    "end": "1257840"
  },
  {
    "text": "option was to use cryo which supported username spaces via separate annotation rather than the built-in support",
    "start": "1257840",
    "end": "1265799"
  },
  {
    "text": "um so if your workload can run in the restricted po security standards you can",
    "start": "1265799",
    "end": "1273039"
  },
  {
    "text": "basically just add host users false once this has become GA and all the other versions of things are new enough um so",
    "start": "1273039",
    "end": "1281960"
  },
  {
    "text": "that's a thing that hopefully people will just start doing soon you know if you're not doing anything special that",
    "start": "1281960",
    "end": "1287799"
  },
  {
    "text": "needs any special access this should just work um it's a standard Unix",
    "start": "1287799",
    "end": "1292960"
  },
  {
    "text": "interface right nothing looks any stranger than anything else in a container at that point",
    "start": "1292960",
    "end": "1299799"
  },
  {
    "text": "um so where can we go from here so I mentioned that we have root inside the",
    "start": "1299799",
    "end": "1306440"
  },
  {
    "text": "container and that root is a more capable in some ways root than root outside the",
    "start": "1306440",
    "end": "1313120"
  },
  {
    "text": "container it is possible to do something like this so this is from the G lab docs",
    "start": "1313120",
    "end": "1319760"
  },
  {
    "text": "which says that you should run your Runners as privileged true um that allows the docker kind Docker and Docker",
    "start": "1319760",
    "end": "1325799"
  },
  {
    "text": "image to run Docker commands it also allows the image to totally Escape",
    "start": "1325799",
    "end": "1330919"
  },
  {
    "text": "anything and basically do what it likes but that's one way to deal with the problem",
    "start": "1330919",
    "end": "1337039"
  },
  {
    "text": "um but a better way is understanding how capabilities work and username spaces so again I'm just going to run a",
    "start": "1337039",
    "end": "1344880"
  },
  {
    "text": "little prompt here so we can see inside this usern name space",
    "start": "1344880",
    "end": "1352159"
  },
  {
    "text": "we actually have some capabilities and that is a bit of a hard output to read but you can",
    "start": "1352159",
    "end": "1359559"
  },
  {
    "text": "do this so the the effective capabilities are um this and if I I",
    "start": "1360640",
    "end": "1367360"
  },
  {
    "text": "won't decode it but if we decode it that is essentially all the capabilities in that list up there so you'll see that is",
    "start": "1367360",
    "end": "1374000"
  },
  {
    "text": "a lot of capabilities um but actually that doesn't matter matter because the kernel",
    "start": "1374000",
    "end": "1379919"
  },
  {
    "text": "understands that you're in a usern space and it only asks about capabilities in the right name space where they matter",
    "start": "1379919",
    "end": "1386120"
  },
  {
    "text": "so some of these for example CIS module well you can only load a module in the",
    "start": "1386120",
    "end": "1391600"
  },
  {
    "text": "host or initial username space so it doesn't matter what whether you've got",
    "start": "1391600",
    "end": "1396679"
  },
  {
    "text": "CIS module in a container because it won't do anything which is very",
    "start": "1396679",
    "end": "1401840"
  },
  {
    "text": "different to how it currently works with a privileged container where it will definitely be able to mess with kernel",
    "start": "1401840",
    "end": "1407960"
  },
  {
    "text": "modules and do all sorts so this is kind of neat because it means",
    "start": "1407960",
    "end": "1414039"
  },
  {
    "text": "that um we can do this so in the docker",
    "start": "1414039",
    "end": "1420440"
  },
  {
    "text": "source code is the list of the default capabilities it wants so to make make it so that people don't have to configure",
    "start": "1420440",
    "end": "1425880"
  },
  {
    "text": "anything strange for Docker um we can put this list so it's got",
    "start": "1425880",
    "end": "1430919"
  },
  {
    "text": "capsus admin in there and some other things um there's also another thing in here called proc Mount unmasked which",
    "start": "1430919",
    "end": "1437840"
  },
  {
    "text": "means that it doesn't mount something over proc Cy to",
    "start": "1437840",
    "end": "1444480"
  },
  {
    "text": "which is normally needed to stop someone writing to CIS controls and things um",
    "start": "1444480",
    "end": "1449559"
  },
  {
    "text": "again the colonel understands that you're in a username space and that you shouldn't have permission to do that so it's safe to do that there are a couple",
    "start": "1449559",
    "end": "1456039"
  },
  {
    "text": "of extra information leaks that come up but the worst I can find is someone complains that someone could figure out",
    "start": "1456039",
    "end": "1462120"
  },
  {
    "text": "if they were playing sound on their desktop if they were also running kubernetes so there's not actually like any serious security issues there um and",
    "start": "1462120",
    "end": "1469799"
  },
  {
    "text": "so this is probably going to become a a thing that people can make use of um",
    "start": "1469799",
    "end": "1475520"
  },
  {
    "text": "that that particular feature has actually been stuck in Alpha in kubernetes for two or possibly more",
    "start": "1475520",
    "end": "1481200"
  },
  {
    "text": "years um it's now hopefully coming out of alpha um and it just makes it easier to do this it turns out it doesn't",
    "start": "1481200",
    "end": "1487559"
  },
  {
    "text": "actually matter if you have this feature or not because because you have capsis admin inside the uh container you can",
    "start": "1487559",
    "end": "1494320"
  },
  {
    "text": "just unmount things anyway um so it's a bit of a confus thing um but currently",
    "start": "1494320",
    "end": "1502200"
  },
  {
    "text": "to run Docker needs cryo because there's one extra feature that we don't have in",
    "start": "1502200",
    "end": "1507640"
  },
  {
    "text": "kubernetes itself and in container D so um how how this works is when cryo sees",
    "start": "1507640",
    "end": "1517360"
  },
  {
    "text": "Espin in it as the entry point that is being run it does some extra tricks to",
    "start": "1517360",
    "end": "1522720"
  },
  {
    "text": "set up the cgroups to be owned by the user ID inside the container um",
    "start": "1522720",
    "end": "1529799"
  },
  {
    "text": "so somewhere here I've got already running I've got a docket test so if I",
    "start": "1529799",
    "end": "1535440"
  },
  {
    "text": "just go into this uh looks like",
    "start": "1535440",
    "end": "1542760"
  },
  {
    "text": "test so hopefully this has worked so here I have a sleep Infinity running",
    "start": "1545279",
    "end": "1550760"
  },
  {
    "text": "inside this so like I showed before this is just a user user username space",
    "start": "1550760",
    "end": "1559960"
  },
  {
    "text": "container um it's running as root it's running on cryo for this this example",
    "start": "1559960",
    "end": "1565159"
  },
  {
    "text": "just because as I said the C group needs to be owned by the right um user which cryo does automatically um it's should",
    "start": "1565159",
    "end": "1572559"
  },
  {
    "text": "be possible very soon for container D to do that whether through a add-on or we get that into kuet itself I'm not sure",
    "start": "1572559",
    "end": "1580520"
  },
  {
    "text": "um so while I'm here I'll just run something again uh outline",
    "start": "1580520",
    "end": "1589399"
  },
  {
    "text": "yeah okay so now now there's two things running inside that so you can see Docker Docker",
    "start": "1590600",
    "end": "1596840"
  },
  {
    "text": "just works um and if I now go back onto the",
    "start": "1596840",
    "end": "1602960"
  },
  {
    "text": "host um so we can see a lot of things here um somewhere hopefully in this",
    "start": "1605039",
    "end": "1612480"
  },
  {
    "text": "output we should see you can see Docker running here and",
    "start": "1612480",
    "end": "1618240"
  },
  {
    "text": "in the middle I can see there's a sleep infinity and a sleep 4242 so this this cryoscope here is",
    "start": "1618240",
    "end": "1627200"
  },
  {
    "text": "actually the cryo scope that has been created for the container and then we're running",
    "start": "1627200",
    "end": "1633159"
  },
  {
    "text": "system D inside that container um and basically within that we then have",
    "start": "1633159",
    "end": "1639919"
  },
  {
    "text": "container D running which Docker has run for us and we then have some Docker Scopes that have been created and you",
    "start": "1639919",
    "end": "1645679"
  },
  {
    "text": "can see those would be running Alpine but because we just ran directly run sleep we don't see an in it or anything",
    "start": "1645679",
    "end": "1651399"
  },
  {
    "text": "inside them we just see the commands but as you can see here this is correctly nesting c groups and things so that",
    "start": "1651399",
    "end": "1658399"
  },
  {
    "text": "actually we can run Docker within Docker without having a privilege container or any of the other things that um might be",
    "start": "1658399",
    "end": "1665559"
  },
  {
    "text": "needed for that so what does the docker file for this look like well it's as simple as this we install Docker and",
    "start": "1665559",
    "end": "1672640"
  },
  {
    "text": "system day and set the entry point to/ sbin in it which if you compare that to the docker",
    "start": "1672640",
    "end": "1678840"
  },
  {
    "text": "Docker in Docker image is considerably simpler and much easier to reason about it's just a standard Linux setup really",
    "start": "1678840",
    "end": "1686399"
  },
  {
    "text": "you're running system D and when you install a component system D is set to start it automatically so you don't even",
    "start": "1686399",
    "end": "1692320"
  },
  {
    "text": "have to think about it it just works which is quite nice and hopefully makes",
    "start": "1692320",
    "end": "1698080"
  },
  {
    "text": "things much easier um there's various issues with the docker IND Docker image",
    "start": "1698080",
    "end": "1703320"
  },
  {
    "text": "itself other than that people mostly run it as privileged um I think actually the docker and Docker image IM would",
    "start": "1703320",
    "end": "1708440"
  },
  {
    "text": "probably work inside this environment I've not tested but uh no reason it wouldn't",
    "start": "1708440",
    "end": "1714519"
  },
  {
    "text": "um one issue though is that Docker needs IP tables and IP tables needs capet",
    "start": "1714519",
    "end": "1721440"
  },
  {
    "text": "admin and capet admin has some issues so that was one of them that was",
    "start": "1721440",
    "end": "1727880"
  },
  {
    "text": "in 2022 um more recently there was this one",
    "start": "1727880",
    "end": "1734640"
  },
  {
    "text": "so do we actually want to give people um the ability to run stuff with capet",
    "start": "1734640",
    "end": "1741320"
  },
  {
    "text": "admin well you don't have to give capet admin you can potentially use something",
    "start": "1741320",
    "end": "1746399"
  },
  {
    "text": "like podman with user space networking but it's still probably is possible to exploit that you still need to allow",
    "start": "1746399",
    "end": "1753480"
  },
  {
    "text": "inside one of the containers you need to allow some level of network configuration which needs net admin so",
    "start": "1753480",
    "end": "1759720"
  },
  {
    "text": "it's sort of unavoidable so um it's it's avoided in normal",
    "start": "1759720",
    "end": "1765320"
  },
  {
    "text": "containers which aren't trying to run Docker or do anything crazy because the set comp policy blocks the",
    "start": "1765320",
    "end": "1771799"
  },
  {
    "text": "Clone system call and the unshare system call when it tries to create a name space um but we weren't allow it so I",
    "start": "1771799",
    "end": "1779039"
  },
  {
    "text": "didn't show that actually but you set a set comp policy that doesn't filter anything um so what's the answer so this",
    "start": "1779039",
    "end": "1788000"
  },
  {
    "text": "is tetragon um tetragon is from I surveillance to also make psyllium and",
    "start": "1788000",
    "end": "1793399"
  },
  {
    "text": "it it works with psyllium but can also be used on its own and it can use EB have to filter various things so this is",
    "start": "1793399",
    "end": "1803559"
  },
  {
    "text": "a policy that somewhere up here it's got a system call so it filters the socket",
    "start": "1803559",
    "end": "1809320"
  },
  {
    "text": "system call uh somewhere there um and it looks for arguments of AF net link with",
    "start": "1809320",
    "end": "1816880"
  },
  {
    "text": "sock and netlink net filter um so what what does that what",
    "start": "1816880",
    "end": "1823880"
  },
  {
    "text": "does that mean well so when when you want to talk to IP tables the the program that is trying to talk",
    "start": "1823880",
    "end": "1829840"
  },
  {
    "text": "to it will call the socket system Co with those arguments oops",
    "start": "1829840",
    "end": "1835360"
  },
  {
    "text": "um and down here you'll see that what I've actually done in this policy is",
    "start": "1835360",
    "end": "1841960"
  },
  {
    "text": "I've allowed it or if it's not if it's so if it's not IP tables itself then",
    "start": "1841960",
    "end": "1848640"
  },
  {
    "text": "it's not allowed um actually youra need to allow Docker there's also obviously",
    "start": "1848640",
    "end": "1854080"
  },
  {
    "text": "an issue with this which is If someone knows that this is the policy they can just replace the IP tables binary",
    "start": "1854080",
    "end": "1859240"
  },
  {
    "text": "they're exploit and it will still work um there are some features in celium possibly upcoming that allow you to do",
    "start": "1859240",
    "end": "1866240"
  },
  {
    "text": "some kind of hashing of binaries so that um you can you can make sure that only certain binaries are allowed but that's",
    "start": "1866240",
    "end": "1872320"
  },
  {
    "text": "a bit hard to set up um but the point is this does begin to give you a way to at",
    "start": "1872320",
    "end": "1877639"
  },
  {
    "text": "least audit what people are doing inside username spaces and maybe maybe do something that would block some exploits",
    "start": "1877639",
    "end": "1884720"
  },
  {
    "text": "at least the you know the really obvious someone downloads the EXP exploit and runs it directly rather than modifying",
    "start": "1884720",
    "end": "1889919"
  },
  {
    "text": "it um so it's still not great but you know",
    "start": "1889919",
    "end": "1897080"
  },
  {
    "text": "that's partly the cost of flexibility right um",
    "start": "1897080",
    "end": "1902200"
  },
  {
    "text": "so one interesting thing here is that you to 2404 added a restricted mode for",
    "start": "1902200",
    "end": "1909919"
  },
  {
    "text": "user namespaces so that if you're an unprivileged user the demo I was just doing what I did unshare that doesn't",
    "start": "1909919",
    "end": "1916039"
  },
  {
    "text": "work on yourto anymore which also means that exploits like the settlers of netlink one and the other one won't work",
    "start": "1916039",
    "end": "1923519"
  },
  {
    "text": "which is good um it turns out actually this is not applicable in our case because usually what's happening is",
    "start": "1923519",
    "end": "1929240"
  },
  {
    "text": "cubet is running as the root user so it's not unprivileged and then it's creating a user n space so it can still",
    "start": "1929240",
    "end": "1935320"
  },
  {
    "text": "do that but the problem is that that still means someone has to use a GN space that if you give them the cabinet",
    "start": "1935320",
    "end": "1940679"
  },
  {
    "text": "admin capability in they are still capable to exploit the machine based on",
    "start": "1940679",
    "end": "1946240"
  },
  {
    "text": "that so um um that's possibly helping in one respect but not really in the",
    "start": "1946240",
    "end": "1952679"
  },
  {
    "text": "kubernetes respect um other than tetron or other ebpf based",
    "start": "1952679",
    "end": "1958399"
  },
  {
    "text": "filterings I don't really have any good ideas other than maybe we can you know filter the kernel a bit more but uh",
    "start": "1958399",
    "end": "1965080"
  },
  {
    "text": "that's a different discussion so other options are gvisor um but",
    "start": "1965080",
    "end": "1972200"
  },
  {
    "text": "gvisor lets you run workloads in a sandbox and it does that by there was a",
    "start": "1972200",
    "end": "1977399"
  },
  {
    "text": "talk earlier uh yesterday and one of the things that it won't do",
    "start": "1977399",
    "end": "1983880"
  },
  {
    "text": "is it won't give you enough system called surface to run the whole of Docker it I don't think they're probably",
    "start": "1983880",
    "end": "1989519"
  },
  {
    "text": "ever going to Target that I ask them but uh it seems unlikely that they would try to implement the whole of Ip tables in",
    "start": "1989519",
    "end": "1995880"
  },
  {
    "text": "user space I would be surprised anyway um the better option is to use something",
    "start": "1995880",
    "end": "2001480"
  },
  {
    "text": "like C containers which is a virtual machine of some kind that is run as a",
    "start": "2001480",
    "end": "2007200"
  },
  {
    "text": "container um and in many ways if you actually want real proper sandboxing that is the",
    "start": "2007200",
    "end": "2013679"
  },
  {
    "text": "better option if you also want to be able to run you know Docker like workloads or more capable workloads so",
    "start": "2013679",
    "end": "2020600"
  },
  {
    "text": "if you want to use that I would really recommend that the issue is actually the things I showed you with ebpf and tetron",
    "start": "2020600",
    "end": "2026960"
  },
  {
    "text": "that won't work because it's a kernel inside the other kernel so it's actually harder in some way to get visibility",
    "start": "2026960",
    "end": "2033240"
  },
  {
    "text": "into it but the the big one is the performance isn't as good because for example a block device is going out of",
    "start": "2033240",
    "end": "2041159"
  },
  {
    "text": "cata and in again um there's some optimizations there but none of them are quite as fast as directly running on the",
    "start": "2041159",
    "end": "2048158"
  },
  {
    "text": "host itself so as usual it's a trade-off with security and at least for the use",
    "start": "2048159",
    "end": "2053520"
  },
  {
    "text": "cases that we're using them for we quite like username spaces because it gives us a little bit more capability um",
    "start": "2053520",
    "end": "2061280"
  },
  {
    "text": "and maybe some slightly better security than you know directly running privileged things or or other options",
    "start": "2061280",
    "end": "2068599"
  },
  {
    "text": "like that um so yeah in summary if you can",
    "start": "2068599",
    "end": "2074240"
  },
  {
    "text": "try username spaces and give some feedback on the beta um like I said you",
    "start": "2074240",
    "end": "2079839"
  },
  {
    "text": "may need to install release candidate versions of things right now uh that should soon be released but I can't",
    "start": "2079839",
    "end": "2085878"
  },
  {
    "text": "speak for projects as to when they will release things um hopefully in the future that actually if you can use",
    "start": "2085879",
    "end": "2093158"
  },
  {
    "text": "username spaces so if your workload can run in the restricted part security standards you should be able to use them",
    "start": "2093159",
    "end": "2100280"
  },
  {
    "text": "if it needs privileges but not host level privileges you should be able to use them um but if not maybe C",
    "start": "2100280",
    "end": "2106320"
  },
  {
    "text": "containers is the answer there else I'm curious what use case you have that doesn't work here there are some so for",
    "start": "2106320",
    "end": "2113720"
  },
  {
    "text": "example components like agent which needs to configure the host networking",
    "start": "2113720",
    "end": "2118760"
  },
  {
    "text": "clearly can't run in anything other than the host Network namespace which means it can't run any username space um so",
    "start": "2118760",
    "end": "2128119"
  },
  {
    "text": "that would that would be you know what you're doing so don't use it to name spaces but other than sort of system level components like that possibly some",
    "start": "2128119",
    "end": "2135040"
  },
  {
    "text": "monitoring systems might need to not run in usern name spaces but nearly everything it would be a few components",
    "start": "2135040",
    "end": "2142200"
  },
  {
    "text": "running outside of them and then they should just become the default so that's all I have um there's",
    "start": "2142200",
    "end": "2148560"
  },
  {
    "text": "some links there so Rodrigo and the other people who worked on the uh user namespace supportting kubernetes wrot a",
    "start": "2148560",
    "end": "2154880"
  },
  {
    "text": "blog post um I helped a tiny bit but not very much um and there's also a",
    "start": "2154880",
    "end": "2160000"
  },
  {
    "text": "historical article there from Netflix which is very interesting because they they they are internally using a",
    "start": "2160000",
    "end": "2165240"
  },
  {
    "text": "different container runtime of their own um but they kicked off some of the work to get this integrated in kubernetes so",
    "start": "2165240",
    "end": "2172560"
  },
  {
    "text": "a lot of that is what I said in this talk but there's some interesting background there as well um and yeah",
    "start": "2172560",
    "end": "2179240"
  },
  {
    "text": "that's all I had thank you very much and any questions if you call them",
    "start": "2179240",
    "end": "2189560"
  },
  {
    "text": "yes it does um it needs a patch I've got a patch that needs to actually get cleaned up um there's a detail there",
    "start": "2192440",
    "end": "2199760"
  },
  {
    "text": "that CFS is usually mounted read only inside a usern name space it's actually",
    "start": "2199760",
    "end": "2205839"
  },
  {
    "text": "safe to write it read right um sorry mount it read right but that's not yet",
    "start": "2205839",
    "end": "2212880"
  },
  {
    "text": "um ready and it certainly probably won't be an upstream kubernetes for a long time if at all it's currently available",
    "start": "2212880",
    "end": "2219720"
  },
  {
    "text": "the patch I've done is an annotation for cryo um we're actually using that internally and I think people have run",
    "start": "2219720",
    "end": "2226480"
  },
  {
    "text": "kubernetes on kubernetes for testing things um I yeah it's a bit crazy but I",
    "start": "2226480",
    "end": "2233280"
  },
  {
    "text": "do I don't have it handy but I do have a screenshot somewhere of what I showed with system system D with nested nested",
    "start": "2233280",
    "end": "2239240"
  },
  {
    "text": "nested so you get like three levels of nesting so it's kind of crazy and fun but like I said you can Nest this up to",
    "start": "2239240",
    "end": "2245200"
  },
  {
    "text": "16 times so give people the tools and they'll do crazy",
    "start": "2245200",
    "end": "2250720"
  },
  {
    "text": "things what the wouldn't that cause haveit with the grades um I mean if you were doing",
    "start": "2252599",
    "end": "2258800"
  },
  {
    "text": "something serious but this is mostly for testing purposes so I don't think like",
    "start": "2258800",
    "end": "2264280"
  },
  {
    "text": "if you actually want to run kubernetes in kubernetes and do clusters differently than that there's there's",
    "start": "2264280",
    "end": "2269400"
  },
  {
    "text": "other ways that would probably be better than doing this this is this is more for",
    "start": "2269400",
    "end": "2275280"
  },
  {
    "text": "this is more for I want to run a kind cluster inside my kubernetes cluster for testing things and then I can have",
    "start": "2275280",
    "end": "2281119"
  },
  {
    "text": "kubernetes everywhere but I mean kubernetes themselves use kind for testing kubernetes on kubernetes but I",
    "start": "2281119",
    "end": "2287760"
  },
  {
    "text": "think they're doing that by just getting privileged because they trust the infrastructure but if you don't necessarily trust your users as much or",
    "start": "2287760",
    "end": "2294400"
  },
  {
    "text": "whatever then this is the way to do it any other questions yeah",
    "start": "2294400",
    "end": "2303760"
  },
  {
    "text": "yes so the question was would this be part of the restricted pod security standards eventually I I hope so um",
    "start": "2312040",
    "end": "2318440"
  },
  {
    "text": "there was some talk of actually having like an intermediate pod security standard that allowed some of the extra things that usern Nam spaces allowed you",
    "start": "2318440",
    "end": "2324920"
  },
  {
    "text": "to do I don't know if that one's going to happen it was there was some push back on that but yeah I think",
    "start": "2324920",
    "end": "2330640"
  },
  {
    "text": "eventually making it part of the part security standards would be great the problem with that is kubernetes support",
    "start": "2330640",
    "end": "2337400"
  },
  {
    "text": "reports back to quite old Linux kernels and so making it officially part of the p security standards would limit the",
    "start": "2337400",
    "end": "2344319"
  },
  {
    "text": "kernel support to a very recent kernel um and kubernetes is still supporting back to 4 point something so it would",
    "start": "2344319",
    "end": "2352200"
  },
  {
    "text": "probably be like five years in the future just because of you know cycles and timelines for long-term support and",
    "start": "2352200",
    "end": "2358720"
  },
  {
    "text": "things that when that would actually happen yeah another question",
    "start": "2358720",
    "end": "2366160"
  },
  {
    "text": "um so for a long time the risk was that it would break things because the ID",
    "start": "2372960",
    "end": "2378079"
  },
  {
    "text": "mapping wasn't there for f files actually the ID mapping for files is still the riskiest part because even if",
    "start": "2378079",
    "end": "2384800"
  },
  {
    "text": "you have root inside a usern name space if you create a file the ID mapping",
    "start": "2384800",
    "end": "2390160"
  },
  {
    "text": "means it goes back to being owned by root on the actual host itself um",
    "start": "2390160",
    "end": "2397800"
  },
  {
    "text": "that's mostly fine because it you shouldn't be able to access the files because permissions restrict them but it does mean if you have a set u ID binary",
    "start": "2397800",
    "end": "2404400"
  },
  {
    "text": "it's still actually somehow ends up as owned by rout on the host so there are",
    "start": "2404400",
    "end": "2409920"
  },
  {
    "text": "potential Escape scenarios there um",
    "start": "2409920",
    "end": "2416920"
  },
  {
    "text": "yeah anymore no okay thank you very much everyone",
    "start": "2417280",
    "end": "2425079"
  }
]