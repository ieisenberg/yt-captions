[
  {
    "text": "hi everyone uh welcome to don't write controllers like Charlie Don't does uh I",
    "start": "240",
    "end": "5600"
  },
  {
    "text": "am Nick Young from isalen at Cisco uh yeah and I'm here to talk to you today about writing controllers and how it's a",
    "start": "5600",
    "end": "11679"
  },
  {
    "text": "bit trickier than you might think okay so first up who am I to talk about this um well yeah like I said I'm",
    "start": "11679",
    "end": "19199"
  },
  {
    "text": "Nick Young but uh I started looking into CDs in early 2017 when they were still called third party resources um I was",
    "start": "19199",
    "end": "26400"
  },
  {
    "text": "involved in building out uh Contour's HTTP proxy C that replaced its ingress route C so I've done a couple of like",
    "start": "26400",
    "end": "32160"
  },
  {
    "text": "real life redesigns uh and I've been involved in gateway API since its",
    "start": "32160",
    "end": "37280"
  },
  {
    "text": "inception of 2018 um which is delivered purely using C so I've done lots of C",
    "start": "37280",
    "end": "42399"
  },
  {
    "text": "stuff uh I've done lots of C design uh and most importantly uh I built lots of controllers to do the same thing and",
    "start": "42399",
    "end": "48559"
  },
  {
    "text": "I've screwed it up plenty of times right so don't feel bad if you screw this stuff up it's actually surprisingly",
    "start": "48559",
    "end": "53760"
  },
  {
    "text": "difficult okay so today's agenda we're going to walk through some uh CRD",
    "start": "53760",
    "end": "59120"
  },
  {
    "text": "controller any patterns using Charlie don't as our straw man you can see from the name I chose the names so it's got",
    "start": "59120",
    "end": "65040"
  },
  {
    "text": "CRD in it um but yeah I want to give you some tips on how to avoid them how not to make the mistakes I have um have a",
    "start": "65040",
    "end": "71680"
  },
  {
    "text": "look at some of the frameworks available that make some of this stuff a lot easier uh and give you some tips about what not to do with them again based on",
    "start": "71680",
    "end": "78159"
  },
  {
    "text": "stuff that I have done okay so why Charlie don't well you can thank The",
    "start": "78159",
    "end": "83280"
  },
  {
    "text": "Simpsons for that um so uh I love The Simpsons uh this particular episode was Bark Got a Knife and they gave him this",
    "start": "83280",
    "end": "90000"
  },
  {
    "text": "helpful book with uh Don't Do What Donny Don't Does uh and so uh yeah so I was",
    "start": "90000",
    "end": "96400"
  },
  {
    "text": "trying to figure a way to make this sort of stuff a little bit less dry a little bit more fun uh and so yeah I came up",
    "start": "96400",
    "end": "102159"
  },
  {
    "text": "with Charlie Don't uh Charlie works on a custom controller for Kubernetes a big co uh yeah he just always manages to",
    "start": "102159",
    "end": "108399"
  },
  {
    "text": "make the wrong decision and like and mess himself up so yeah take a moment to feel sorry for Charlie but we're all",
    "start": "108399",
    "end": "114560"
  },
  {
    "text": "going to learn from his mistakes today so thank you now so uh I've done two",
    "start": "114560",
    "end": "119840"
  },
  {
    "text": "talks uh using Charlie before the first one was about designing CDs that uh QR code will take you to the to the YouTube",
    "start": "119840",
    "end": "127119"
  },
  {
    "text": "uh for that talk that was a reax um so these are the tips I you know stuff like",
    "start": "127119",
    "end": "132560"
  },
  {
    "text": "reading the API bibles uh thinking about how your users will use the CD using",
    "start": "132560",
    "end": "137920"
  },
  {
    "text": "status you know avoiding certain types of uh values all of this stuff is really",
    "start": "137920",
    "end": "143200"
  },
  {
    "text": "helpful when you're doing this and the reason for a lot of those rules is actually about making API changes um so",
    "start": "143200",
    "end": "152000"
  },
  {
    "text": "when you're when you're making API changes it's really important to uh handle them correctly so that you can",
    "start": "152000",
    "end": "159040"
  },
  {
    "text": "have your users have make their API a changes where you can make your API changes in a way that doesn't screw over",
    "start": "159040",
    "end": "165599"
  },
  {
    "text": "your users okay um the important part is to make compatible changes uh so yeah",
    "start": "165599",
    "end": "171599"
  },
  {
    "text": "there's a bunch of rules there i don't want to spend too long going into all these but most of them boil down to make",
    "start": "171599",
    "end": "176800"
  },
  {
    "text": "it so that when between the new version and the old version if nothing changes",
    "start": "176800",
    "end": "182080"
  },
  {
    "text": "then no behavior changes right it seems like the most bananal thing to say in the world but it's actually really easy",
    "start": "182080",
    "end": "187200"
  },
  {
    "text": "to make to get this wrong okay but today what we want to talk about is writing",
    "start": "187200",
    "end": "192640"
  },
  {
    "text": "controllers now um some of this applies directly to Go controllers some of it doesn't some of it applies to whatever",
    "start": "192640",
    "end": "198480"
  },
  {
    "text": "language you're writing in i don't know much about writing controllers in languages any other than go in any other than Go language than Go sorry uh so",
    "start": "198480",
    "end": "205760"
  },
  {
    "text": "yeah it's mostly in Go today if you're if you're using QRS like well done you",
    "start": "205760",
    "end": "211599"
  },
  {
    "text": "um but and I'm I'm happy to talk to you about it later but I just don't know enough to tell you about anything mistakes you're going to make there",
    "start": "211599",
    "end": "218280"
  },
  {
    "text": "so So first thing Charlie does is he uses a simple client just the client go client he writes a controller he's like",
    "start": "218280",
    "end": "224959"
  },
  {
    "text": "\"Okay cool i need to get some resources i'm just going to call get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get it it from the API server every every time I",
    "start": "224959",
    "end": "230640"
  },
  {
    "text": "do I'm just going to list from the API server yeah that's all cool when he's doing local dev on his machine but when",
    "start": "230640",
    "end": "236000"
  },
  {
    "text": "you start running in a cluster and you're getting a thousand objects multiple times a second all of a sudden",
    "start": "236000",
    "end": "241920"
  },
  {
    "text": "you might you a poor old API server is going \"What are you doing to me?\" Right like and a lot of those gets are not",
    "start": "241920",
    "end": "247040"
  },
  {
    "text": "required a lot of the time the the mirror of that problem is every time you do an update you post the whole object",
    "start": "247040",
    "end": "253519"
  },
  {
    "text": "back to the API server and the API server has to take that object uh check it all for uh storage versions and stuff",
    "start": "253519",
    "end": "259759"
  },
  {
    "text": "and then push it back down to ATD and if you're doing no op updates most of that happens anyway and so you're burning a",
    "start": "259759",
    "end": "265759"
  },
  {
    "text": "lot of time and API server resources on doing nothing right so you know it's it's really easy mistake to make",
    "start": "265759",
    "end": "272000"
  },
  {
    "text": "especially if you're just starting out um yeah and so one of the ways that you",
    "start": "272000",
    "end": "277120"
  },
  {
    "text": "can get around this is using a C client now the basic the basic client go doesn't provide a C client so you're",
    "start": "277120",
    "end": "283840"
  },
  {
    "text": "kind of out of luck um but there is a way to solve this i'm going to talk about in just a couple of minutes but",
    "start": "283840",
    "end": "288960"
  },
  {
    "text": "you know ideally you want a client that maintains a case of current state and you know there's a lot of ways to do",
    "start": "288960",
    "end": "294960"
  },
  {
    "text": "this um but also once you do that it now means you have a cation validation problem like yay you know like I always",
    "start": "294960",
    "end": "302000"
  },
  {
    "text": "like to say there's two hard problems in computer science naming things cation validation and off by one errors right",
    "start": "302000",
    "end": "308320"
  },
  {
    "text": "so um the uh you know cation validation is a really hard problem so it makes sense to try and make it not your",
    "start": "308320",
    "end": "314639"
  },
  {
    "text": "problem um but the most important thing here that even no matter what framework you're choosing is to limit the number",
    "start": "314639",
    "end": "320479"
  },
  {
    "text": "of API server updates and requests make sure you're only touching the API server when you really need to um it's really",
    "start": "320479",
    "end": "327280"
  },
  {
    "text": "easy to bring an API server to its knees if you've got a lot of objects and a lot of nodes and a lot of controllers",
    "start": "327280",
    "end": "333440"
  },
  {
    "text": "reconciling those objects um so yeah check your own updates instead is the quickest and easiest thing you can do",
    "start": "333440",
    "end": "339199"
  },
  {
    "text": "here like when you're about to send an update you know you've got a copy of the original thing you've got a copy of the",
    "start": "339199",
    "end": "344720"
  },
  {
    "text": "new thing check them make sure that there's no difference make sure there is a difference rather if there's no",
    "start": "344720",
    "end": "349919"
  },
  {
    "text": "difference don't send them like you and so it's a pretty basic stuff but it's",
    "start": "349919",
    "end": "355039"
  },
  {
    "text": "really easy to forget to do and you can really mess yourself up so yeah also the",
    "start": "355039",
    "end": "360080"
  },
  {
    "text": "other thing that you can do here is you can use patch instead of update where if you only send the fields that are",
    "start": "360080",
    "end": "365919"
  },
  {
    "text": "changed then the API server says \"Oh okay those are the only things that have changed.\" And if it's empty then API",
    "start": "365919",
    "end": "371039"
  },
  {
    "text": "server knows that it's a noop right so yeah it it does it also helps avoid",
    "start": "371039",
    "end": "377280"
  },
  {
    "text": "problems with racing updates so I don't know if you've written a controller you've probably had it happen where you've tried to uh apply an update and",
    "start": "377280",
    "end": "383440"
  },
  {
    "text": "it's like \"Oh hey that object that object has been modified since you since you uh uh since you got it.\" And so that",
    "start": "383440",
    "end": "391039"
  },
  {
    "text": "like if two controllers are updating the same object they could both be racing to make updates and if they're both doing not patches you can end up with updates",
    "start": "391039",
    "end": "398240"
  },
  {
    "text": "just failing to apply because the API server is like \"Hey you don't have the most recent version of the of the",
    "start": "398240",
    "end": "403319"
  },
  {
    "text": "object.\" So that goes double for status updates really easy to do this for status so Charlie don't figures this",
    "start": "403319",
    "end": "411360"
  },
  {
    "text": "this out eventually and then makes his own cing client using the informers constructs that are built in the in the",
    "start": "411360",
    "end": "416400"
  },
  {
    "text": "client go um he hand rolls a cing client and uses informers it starts up the",
    "start": "416400",
    "end": "421759"
  },
  {
    "text": "informers uses all the standard code and standard patterns of how to do this he now gets to handle all the concurrency",
    "start": "421759",
    "end": "427440"
  },
  {
    "text": "and ordering problems that he gets from doing that um you know so there are and speaking from experience here again",
    "start": "427440",
    "end": "433520"
  },
  {
    "text": "there are a lot of weird edge cases that can happen there when you've got updates from one object and you need updates for",
    "start": "433520",
    "end": "438639"
  },
  {
    "text": "a dependent object they haven't come yet but then when you do get the dependent object update you there's no update from",
    "start": "438639",
    "end": "445360"
  },
  {
    "text": "the first object to tell you that everything is now in sync so you you it becomes really difficult to tell what's",
    "start": "445360",
    "end": "451280"
  },
  {
    "text": "in sync and what's not and what you what information you're waiting for and what just doesn't exist right",
    "start": "451280",
    "end": "458440"
  },
  {
    "text": "so yeah so each controller has to maintain a a per kind c so you have to",
    "start": "458440",
    "end": "464240"
  },
  {
    "text": "have a for each controller that you're doing that's watching if it's watching seven kinds you've now got seven ces",
    "start": "464240",
    "end": "470080"
  },
  {
    "text": "right and if those kinds have references between each other you now have to make sure that those references are",
    "start": "470080",
    "end": "475280"
  },
  {
    "text": "consistent between those cached objects and because everything's eventually consistent means you actually have no",
    "start": "475280",
    "end": "480800"
  },
  {
    "text": "way of being sure or it's very difficult to be sure that you actually have the full state of the system so it's very",
    "start": "480800",
    "end": "486960"
  },
  {
    "text": "difficult to tell the difference between so in the example of G gateway API if you've got a HTTP route update and you",
    "start": "486960",
    "end": "493599"
  },
  {
    "text": "can't find the service is that because the service doesn't exist or because it doesn't exist yet and it's about the",
    "start": "493599",
    "end": "500000"
  },
  {
    "text": "next update that you're going to process is a service update right and so like it's very difficult to tell that stuff",
    "start": "500000",
    "end": "505120"
  },
  {
    "text": "and what happens is you end up processing things many many many many times u for no good",
    "start": "505120",
    "end": "510520"
  },
  {
    "text": "reason so the the answer here is simple like use a framework instead frameworks are specific specifically built to do",
    "start": "510520",
    "end": "516640"
  },
  {
    "text": "this stuff for you people who are writing frameworks are doing it to make this stuff easier so that you don't have",
    "start": "516640",
    "end": "521919"
  },
  {
    "text": "to think about all of the eventual consistency stuff mostly i mean obviously you're going to have to think about it in when you find edge cases um",
    "start": "521919",
    "end": "528640"
  },
  {
    "text": "but yeah so you're looking for things that something that watches resources and maintains the current state of them",
    "start": "528640",
    "end": "535040"
  },
  {
    "text": "for you something that allows you to do things when objects when particular sets of objects change and ideally ideally",
    "start": "535040",
    "end": "542560"
  },
  {
    "text": "something that helps with coalesing rights back to the API server so that you're not needing to do as much spend as much time checking your rights",
    "start": "542560",
    "end": "548800"
  },
  {
    "text": "against each other that's a nice to have though the other two are must haves so uh there are",
    "start": "548800",
    "end": "554720"
  },
  {
    "text": "three frameworks I know of there's probably other ones but these are the ones that I've either heard of or used",
    "start": "554720",
    "end": "560000"
  },
  {
    "text": "uh so KRT state DB and controller runtime now KRT uh is written by John",
    "start": "560000",
    "end": "566399"
  },
  {
    "text": "Howard as part of it as an experimental refactoring of ISTTO it's used in some experimental stuff in ISTO and it's also",
    "start": "566399",
    "end": "572160"
  },
  {
    "text": "used in K gateway in this one you perform operations on collections so they can be sourced from any Kubernetes",
    "start": "572160",
    "end": "578080"
  },
  {
    "text": "object via informers or other objects as well one of the nice things about KRT is",
    "start": "578080",
    "end": "583200"
  },
  {
    "text": "that it's much more generic it doesn't only cover Kubernetes objects you can do other cool stuff with it um but the key",
    "start": "583200",
    "end": "589680"
  },
  {
    "text": "part is that when when you define them you also set a bunch of relevant fetch functions which are kind of fetching",
    "start": "589680",
    "end": "595920"
  },
  {
    "text": "objects from the collection based on some set of criteria when that fetch function would change uh like when new",
    "start": "595920",
    "end": "603279"
  },
  {
    "text": "objects arrive or when old objects would disappear the transformation functions are called the do things those things",
    "start": "603279",
    "end": "609519"
  },
  {
    "text": "are usually output a bunch of other objects that you then feed into something else that then turns them in",
    "start": "609519",
    "end": "614720"
  },
  {
    "text": "that then takes actions on them so I think it's a very interesting approach that's still under active development um",
    "start": "614720",
    "end": "620160"
  },
  {
    "text": "for me I'm kind of used to some of the other approaches so there was a bit of a bit of a cognitive overload cognitive",
    "start": "620160",
    "end": "626560"
  },
  {
    "text": "overhead sorry to uh to sort of process exactly how this would work i had to look at some examples but I think it's",
    "start": "626560",
    "end": "632399"
  },
  {
    "text": "pretty neat another one is uh state DB i'm more familiar with this cuz uh you know I work on selium um psyllium is",
    "start": "632399",
    "end": "639680"
  },
  {
    "text": "divided into two parts an operator and an agent in the operator we use controller runtime which is the next",
    "start": "639680",
    "end": "644800"
  },
  {
    "text": "fragment uh framework and state DB which is used in the agent now state DB is a",
    "start": "644800",
    "end": "650640"
  },
  {
    "text": "in-memory radical tree database for go that supports cross cross table write transactions and most importantly watch",
    "start": "650640",
    "end": "656720"
  },
  {
    "text": "channels that close when that part of the radics tree is updated so what that gets you is you can basically it lets",
    "start": "656720",
    "end": "664399"
  },
  {
    "text": "you set up a table that stores all of the records of a partic particular kind and when that table gets updated you can",
    "start": "664399",
    "end": "670800"
  },
  {
    "text": "do stuff uh and so table being updated means a row being added a row being",
    "start": "670800",
    "end": "676160"
  },
  {
    "text": "removed so you're an object being added or removed or updated um and so those",
    "start": "676160",
    "end": "682079"
  },
  {
    "text": "update or delete operations like that are executed when those things happen so it basically it lets you treat a",
    "start": "682079",
    "end": "689120"
  },
  {
    "text": "collection of Kubernetes objects like a database like rows in a database um and it's also still pretty new we've done",
    "start": "689120",
    "end": "695360"
  },
  {
    "text": "we've moved some things over it does make some things really easy um some things it doesn't like gateway API",
    "start": "695360",
    "end": "700959"
  },
  {
    "text": "processing where you've got a lot of related tables you start have to treat it a lot more like old fashioned",
    "start": "700959",
    "end": "707120"
  },
  {
    "text": "relational database with all of the sort of uh cognitive overhead and problems that entails but that doesn't mean not",
    "start": "707120",
    "end": "712800"
  },
  {
    "text": "to do it it's just uh you know that's one of the reasons why we don't use it in the other part uh the operator which",
    "start": "712800",
    "end": "718640"
  },
  {
    "text": "uses controller runtime now controller runtime is included as part of the the cube builder controller tool set and",
    "start": "718640",
    "end": "724880"
  },
  {
    "text": "that that that cube builder project is actually part of upstream Kubernetes this one uses a really deep reconcile",
    "start": "724880",
    "end": "730720"
  },
  {
    "text": "pattern with a keybased lookup on top of a cing Kubernetes client that has exactly the same API as the base client",
    "start": "730720",
    "end": "737200"
  },
  {
    "text": "go version so the nice part about this is um the uh controller runtime uh",
    "start": "737200",
    "end": "743440"
  },
  {
    "text": "watches are set up so that they maintain a cache for you and you get list update",
    "start": "743440",
    "end": "748480"
  },
  {
    "text": "in that cache the same as you would with the vanilla client so you can it's very easy to move code that uses the vanilla",
    "start": "748480",
    "end": "754399"
  },
  {
    "text": "client over to use controller runtime which is really nice um so yeah the reconcile pattern works like this so",
    "start": "754399",
    "end": "760639"
  },
  {
    "text": "you've got um a controller that runs go routines to that actually does the watching and updates the local ces and",
    "start": "760639",
    "end": "767839"
  },
  {
    "text": "then each one controller has one main resource that it reconciles so when uh stuff happens a reconcile request is",
    "start": "767839",
    "end": "774720"
  },
  {
    "text": "returned and then it triggers the reconcile function so this is just an interface in go terms and that reconcile",
    "start": "774720",
    "end": "780880"
  },
  {
    "text": "function does whatever you want it to do now that can also be go and look up the state of other objects in the in the ces",
    "start": "780880",
    "end": "787120"
  },
  {
    "text": "and take ob and take actions um one of the really nice things about this though is that you're watching one main kind",
    "start": "787120",
    "end": "794959"
  },
  {
    "text": "but you can also say I am interested in when when changes to this main kind",
    "start": "794959",
    "end": "800079"
  },
  {
    "text": "happen we'll reconcile that main kind and your reconcile function gets the name and namespace of an object that's",
    "start": "800079",
    "end": "805600"
  },
  {
    "text": "changed so then you go off and you get the object and you see if it's been deleted or updated or created um but the",
    "start": "805600",
    "end": "811360"
  },
  {
    "text": "other thing that you can do is you can add extra watches that say if one of these objects gets updated then call a",
    "start": "811360",
    "end": "818240"
  },
  {
    "text": "reconciliation on the main function right it's a little hard to explain in that way so oh hang on I preempted",
    "start": "818240",
    "end": "825040"
  },
  {
    "text": "myself here I forgot about that slide um so yeah the important part here is that the local c store uh the local c stores",
    "start": "825040",
    "end": "832240"
  },
  {
    "text": "the state for you and the reconcile function function lets you do things when that state changes so this is uh",
    "start": "832240",
    "end": "839120"
  },
  {
    "text": "some code from Selium's gateway API reconciler um you can see here that uh it watches gateways it says for gateway",
    "start": "839120",
    "end": "846800"
  },
  {
    "text": "with predicates now those predicates let you slice down the number of gateways",
    "start": "846800",
    "end": "852160"
  },
  {
    "text": "that you're actually going to attempt to reconcile right so those predicates um basically it says for gateway API if",
    "start": "852160",
    "end": "858560"
  },
  {
    "text": "your controller isn't managing a gateway class that the gateway is associated with then you shouldn't touch it so this",
    "start": "858560",
    "end": "863920"
  },
  {
    "text": "is saying for you know I I want to be I want to call reconcile whenever a gateway that I care about changes and",
    "start": "863920",
    "end": "870240"
  },
  {
    "text": "then so the reconcile should only receive uh rec reconciliations for gateways that you care about so it it's",
    "start": "870240",
    "end": "876880"
  },
  {
    "text": "like one layer less processing but the nice part is you can also watch gateway class resources with their own",
    "start": "876880",
    "end": "882959"
  },
  {
    "text": "predicates uh services HTTP routes and like tons more this would have been like",
    "start": "882959",
    "end": "888160"
  },
  {
    "text": "five sides long if I included the entire thing because gateway requires you to watch a lot of objects but if any one of",
    "start": "888160",
    "end": "893920"
  },
  {
    "text": "those things updates in a way that the predicate functions say is relevant then the main reconcile function for gateway",
    "start": "893920",
    "end": "900480"
  },
  {
    "text": "will be called and what that means in gateway API terms is that when any of the dependent objects change you",
    "start": "900480",
    "end": "906880"
  },
  {
    "text": "recalculate the whole thing but and recalculating the whole thing would normally be something you'd be like \"Oh no that's pretty expensive.\" But because",
    "start": "906880",
    "end": "913600"
  },
  {
    "text": "all of this is using a local cache the recalculation just involves retrieving objects from the C and checking them all",
    "start": "913600",
    "end": "919600"
  },
  {
    "text": "right so you're not talking you're not doing any network access it's basically as efficient as you could possibly get to do this sort of",
    "start": "919600",
    "end": "925880"
  },
  {
    "text": "thing so um yeah Charlie don't coming back to",
    "start": "925880",
    "end": "932480"
  },
  {
    "text": "poor old Charlie uh he makes reconcile mistakes uh so he doesn't realize that any predicates applied to four don't get",
    "start": "932480",
    "end": "940160"
  },
  {
    "text": "also get applied to predicates applied to other watch calls and so and he also uses the wrong resource for his uh main",
    "start": "940160",
    "end": "946880"
  },
  {
    "text": "reconcile loop now in this case uh it's me I'm Charlie i I did this um very",
    "start": "946880",
    "end": "952480"
  },
  {
    "text": "recently uh so selium uh selium's gateway API and gamma controllers there are two they're both written with",
    "start": "952480",
    "end": "958320"
  },
  {
    "text": "controller runtime they were not each checking the parent refs for their HTTP routes correctly so they were triggering",
    "start": "958320",
    "end": "964160"
  },
  {
    "text": "extra reconciliations that were then thrown away so what's happening here is that thing I showed you before gateway",
    "start": "964160",
    "end": "970240"
  },
  {
    "text": "is the reconciled object uh we're going oh there's an updating there's an update in a HTTP route that that HTTP route was",
    "start": "970240",
    "end": "977440"
  },
  {
    "text": "doing some checks to say do I care about this update what it wasn't checking was does the h the gateway that this is",
    "start": "977440",
    "end": "984000"
  },
  {
    "text": "attached to roll up to a gateway class like the predicate function or gate on on the gateway reconciler so the key",
    "start": "984000",
    "end": "990480"
  },
  {
    "text": "part here is for that first part you need the reconcile the predicates on the",
    "start": "990480",
    "end": "996000"
  },
  {
    "text": "downstream watches also need to repeat the logic that you have in the four call at the top of the controller tools okay",
    "start": "996000",
    "end": "1003199"
  },
  {
    "text": "let me roll that one back cuz the more I say it the more the more I realize it's really hard to explain so in this one",
    "start": "1003199",
    "end": "1010079"
  },
  {
    "text": "we've got four uh four gateway builder with predicates predicate new predicate",
    "start": "1010079",
    "end": "1015600"
  },
  {
    "text": "functions thanks go for all of your nested function things here has matching controller function that has matching",
    "start": "1015600",
    "end": "1022000"
  },
  {
    "text": "controller function does a lookup that says okay the gateway references a gateway class the gateway class has a",
    "start": "1022000",
    "end": "1027678"
  },
  {
    "text": "field set that means that selium cares about it the problem was here that in the HTTP route watcher down the bottom",
    "start": "1027679",
    "end": "1034558"
  },
  {
    "text": "the incue request for owning HTTP route function did not check that so it would",
    "start": "1034559",
    "end": "1040240"
  },
  {
    "text": "just check some other stuff and then it would incue the request for the gateway so that meant we're reconciling a bunch",
    "start": "1040240",
    "end": "1045678"
  },
  {
    "text": "of gateways that we didn't actually need to this was really important when we got to the state that we had the two",
    "start": "1045679",
    "end": "1052480"
  },
  {
    "text": "reconcilers the gateway API and the gamma ones because they both reconcile HTTP routes they're very different kinds",
    "start": "1052480",
    "end": "1058160"
  },
  {
    "text": "of HTTP routes because they refer to a different object they go up to a different object but because they were both reconciling HTTP routes the code it",
    "start": "1058160",
    "end": "1066160"
  },
  {
    "text": "meant that basically we were doing double the number of reconciliation that we would otherwise need to do if we had written this properly also the gamma",
    "start": "1066160",
    "end": "1073360"
  },
  {
    "text": "reconciler was is reconciling HTTP routes rather than service so when we",
    "start": "1073360",
    "end": "1078480"
  },
  {
    "text": "pick this object uh in the the in the um in this thing for gamma",
    "start": "1078480",
    "end": "1087039"
  },
  {
    "text": "the four is for uh HTTP route so the the main object we're reconciling is HTTP",
    "start": "1087039",
    "end": "1092559"
  },
  {
    "text": "route the problem is HTTP routes in gamma roll up to a service object right",
    "start": "1092559",
    "end": "1098640"
  },
  {
    "text": "so the service object is the higher layer construct we're reconciling too low down in the tree of objects here",
    "start": "1098640",
    "end": "1105360"
  },
  {
    "text": "and so the re the way that that found out is in in gamma you're allowed to have multiple HTTP routes point to the",
    "start": "1105360",
    "end": "1111120"
  },
  {
    "text": "same service it's it's a one to many relationship because we're reconciling down here every time we update any HTTP",
    "start": "1111120",
    "end": "1118160"
  },
  {
    "text": "route we regenerate all the config and stuff and what that means is the last HTTP route to get reconciled is the only",
    "start": "1118160",
    "end": "1124559"
  },
  {
    "text": "one that that gets config all the other config gets wiped away and that's because we weren't reconciling at the",
    "start": "1124559",
    "end": "1130000"
  },
  {
    "text": "right level right so give me a sec",
    "start": "1130000",
    "end": "1136240"
  },
  {
    "text": "that's it it's critical to make sure you're reconciling the right object and so you really need to understand the",
    "start": "1139520",
    "end": "1145200"
  },
  {
    "text": "design of your system of CRDs to do this top tip if you are writing a gateway API",
    "start": "1145200",
    "end": "1150240"
  },
  {
    "text": "controller reconcile gateways don't re like that that should be your main your main thing that you're",
    "start": "1150240",
    "end": "1156679"
  },
  {
    "text": "watching okay wow I've gone a bit faster than I thought I would um there's going to be plenty of time for questions i",
    "start": "1156679",
    "end": "1162160"
  },
  {
    "text": "hope there will be uh some so yeah um it's really easy to make mistakes writing controllers um use a framework",
    "start": "1162160",
    "end": "1170320"
  },
  {
    "text": "um I recommend controller runtime for people who are starting out because it's relatively straightforward and it's",
    "start": "1170320",
    "end": "1176000"
  },
  {
    "text": "upstream you know um use patch andor check your changes to make sure that they're",
    "start": "1176000",
    "end": "1182160"
  },
  {
    "text": "relevant before sending to the API server especially status updates here when you're updating the status sub",
    "start": "1182160",
    "end": "1188440"
  },
  {
    "text": "resource it's really important to make sure that you're not sending no op updates because it's if you've got",
    "start": "1188440",
    "end": "1195600"
  },
  {
    "text": "thousands of objects that are all uh you one problem I had here was we had some",
    "start": "1195600",
    "end": "1202160"
  },
  {
    "text": "people who had uh selium installations with gateways and then hundreds of HTTP routes attached to the gateway or a",
    "start": "1202160",
    "end": "1207840"
  },
  {
    "text": "large number of HTTP routes so if you update the gateway status anytime one of those HTTP routes changes when you start",
    "start": "1207840",
    "end": "1214880"
  },
  {
    "text": "up you're now doing hundreds of status updates for that gateway that you don't need to be doing right and so when you",
    "start": "1214880",
    "end": "1221440"
  },
  {
    "text": "it can create thundering herd problems on startup really easily um that can just you know and that sort of",
    "start": "1221440",
    "end": "1227280"
  },
  {
    "text": "thundering herd problem is of course one of the suckiest things to do deal with as an operator because you're like oh I",
    "start": "1227280",
    "end": "1232640"
  },
  {
    "text": "restarted and now everything's falling over because I restarted you really don't want to have your users in that sort of position",
    "start": "1232640",
    "end": "1238960"
  },
  {
    "text": "so if you are using controller runtime remember that all your predicate functions need to check that that",
    "start": "1238960",
    "end": "1244080"
  },
  {
    "text": "reconciled resource is relevant as well as whatever checks they run don't be me this I was really annoyed at myself when",
    "start": "1244080",
    "end": "1250080"
  },
  {
    "text": "I figured this one out um yeah so Charlie Don and I both say thanks for listening we've got plenty of time for",
    "start": "1250080",
    "end": "1256320"
  },
  {
    "text": "questions i really like honestly if you've got a curly uh question then feel free to come up and ask it",
    "start": "1256320",
    "end": "1264320"
  },
  {
    "text": "please",
    "start": "1264360",
    "end": "1267360"
  },
  {
    "text": "awesome hit me uh thanks for the talk uh my question is whether have you looked",
    "start": "1269480",
    "end": "1275039"
  },
  {
    "text": "at to um being able to reason about how many reconciliations occur and which event sources and which other um I guess",
    "start": "1275039",
    "end": "1282400"
  },
  {
    "text": "watches and other sort of channels that they come from like are you able to reason about in a large scale setting",
    "start": "1282400",
    "end": "1288240"
  },
  {
    "text": "like Celium for example or we're receiving this many reconciliations and this is why yeah yeah so the frameworks",
    "start": "1288240",
    "end": "1294080"
  },
  {
    "text": "actually help you by providing metrics about um about how many uh reconciliations you do and of course if",
    "start": "1294080",
    "end": "1299280"
  },
  {
    "text": "you're doing your own metrics uh it's really helpful in your reconcile function to like increment metrics about",
    "start": "1299280",
    "end": "1305679"
  },
  {
    "text": "I just did a reconcile you know here's how long it took um that sort of thing very very helpful to include metric my",
    "start": "1305679",
    "end": "1311679"
  },
  {
    "text": "question is a little bit like not exactly how many times you're reconciling but more like do you understand exactly why you're receiving",
    "start": "1311679",
    "end": "1317520"
  },
  {
    "text": "that reconciliation request yeah I think that's a that's a really good point um the uh it can be tricky because when",
    "start": "1317520",
    "end": "1323440"
  },
  {
    "text": "you're using for when you're using controller runtime the thing that you output from those watches calls is",
    "start": "1323440",
    "end": "1329039"
  },
  {
    "text": "actually just a request to reconcile the main object right so the best that you could do is as you're rebuilding to say",
    "start": "1329039",
    "end": "1335600"
  },
  {
    "text": "like I think maybe this might have changed but honestly the um like the a",
    "start": "1335600",
    "end": "1342000"
  },
  {
    "text": "lot of the time the amount of value you extract out of that is going to be much less than the problems that you're going to build for yourself by trying to keep",
    "start": "1342000",
    "end": "1348960"
  },
  {
    "text": "I would strongly recommend end don't keep uh a before and after state when you're doing that just rebuild the state",
    "start": "1348960",
    "end": "1354960"
  },
  {
    "text": "of the world every time you get a reconcile request because um that is the most efficient way to make sure you you're sort of getting everything",
    "start": "1354960",
    "end": "1361120"
  },
  {
    "text": "correct trying to keep track of things you have to keep track of like uh you know did this exist before is it new has",
    "start": "1361120",
    "end": "1366960"
  },
  {
    "text": "it been deleted tombstoneing things all that sort of thing so yeah I I really strongly recommend rebuild the state of",
    "start": "1366960",
    "end": "1372720"
  },
  {
    "text": "the world in your reconcile functions thank you excellent",
    "start": "1372720",
    "end": "1378279"
  },
  {
    "text": "hi just a question about um how would you structure an operator in general um",
    "start": "1378600",
    "end": "1385360"
  },
  {
    "text": "I have just started my first approach and uh decided to make something with",
    "start": "1385360",
    "end": "1390960"
  },
  {
    "text": "multiple threats and uh because to have some easy stage sharing uh to monitor",
    "start": "1390960",
    "end": "1396880"
  },
  {
    "text": "multiple resources mhm um is this a good approach or should I e better switch to",
    "start": "1396880",
    "end": "1403200"
  },
  {
    "text": "something more like a single thread in each container so the um the nice part",
    "start": "1403200",
    "end": "1408880"
  },
  {
    "text": "one of the reasons that controller runtime uses that reconcile approach is that it's the each reconcile operation",
    "start": "1408880",
    "end": "1414240"
  },
  {
    "text": "is relatively orthogonal um you know because you're they're all uh for the same type of object so you can do",
    "start": "1414240",
    "end": "1420720"
  },
  {
    "text": "multiple ones kind of at once um and as long as you're as long as each is ident",
    "start": "1420720",
    "end": "1426159"
  },
  {
    "text": "and rebuilds the state of the world then it doesn't matter so then you can go wide in terms of multiple threads much",
    "start": "1426159",
    "end": "1431919"
  },
  {
    "text": "easier i think the thing you got to be careful about if you're going wide and doing lots of threads is uh is uh",
    "start": "1431919",
    "end": "1437919"
  },
  {
    "text": "consistency and making sure that uh whatever is Yeah so at the because at the end of what is whatever you're",
    "start": "1437919",
    "end": "1444159"
  },
  {
    "text": "outputting from that um ends up in a consistent state right like so uh if you if you're reconciling gateways a lot of",
    "start": "1444159",
    "end": "1450720"
  },
  {
    "text": "the time for selium the reason we're reconciling gateways is we want to be able to output an object at the at the",
    "start": "1450720",
    "end": "1455919"
  },
  {
    "text": "end of it selium the way selium does it is we reconcile the gateways we output a thing called a selium envoy config that",
    "start": "1455919",
    "end": "1461440"
  },
  {
    "text": "then configures the agent to do envoy config right uh and so like we want to end up with like one selium envoy config",
    "start": "1461440",
    "end": "1468720"
  },
  {
    "text": "and not be updating that selium envoy config constantly unless it's actually changed and that's another time where",
    "start": "1468720",
    "end": "1474080"
  },
  {
    "text": "the updates thing becomes important so if you're making that too wide then and",
    "start": "1474080",
    "end": "1480320"
  },
  {
    "text": "you need them you need the all of those operations to be ident and to be generating the same config at the end of",
    "start": "1480320",
    "end": "1485679"
  },
  {
    "text": "the day ex except for their extra uh operation does that make sense so um",
    "start": "1485679",
    "end": "1491600"
  },
  {
    "text": "like I'd say yeah go wide but just be really careful about what the output is and make sure that that output is",
    "start": "1491600",
    "end": "1497679"
  },
  {
    "text": "consistent and that you're checking it for uh uh uh for real operations and not",
    "start": "1497679",
    "end": "1503279"
  },
  {
    "text": "doing no operations at the end yeah okay does that make sense a bit sorry i have",
    "start": "1503279",
    "end": "1509200"
  },
  {
    "text": "a look into it yeah okay great thanks okay since no one's asking other questions I'll ask another one yeah what",
    "start": "1509200",
    "end": "1516080"
  },
  {
    "text": "are your thoughts about controllers reconciling um results into an external you know outside world like for example",
    "start": "1516080",
    "end": "1522640"
  },
  {
    "text": "changing something in a cloud provider API I don't know writing something into a bucket or stuff like that so basically",
    "start": "1522640",
    "end": "1528720"
  },
  {
    "text": "all the stuff that you mentioned so far okay when everything is in Kubernetes uh you can maintain informers on them and",
    "start": "1528720",
    "end": "1534320"
  },
  {
    "text": "you can in memory do inmemory comparison of the objects rather cheaply but when something is in an external world",
    "start": "1534320",
    "end": "1540000"
  },
  {
    "text": "suddenly that reconcile function becomes expensive and no longer offline right yeah I mean in that case I would",
    "start": "1540000",
    "end": "1546080"
  },
  {
    "text": "actually recommend to do something more like what uh the the KRT framework is doing with collections and represent",
    "start": "1546080",
    "end": "1551360"
  },
  {
    "text": "that external state with an in-memory thing here that then does it the sort of the the other way around operation right",
    "start": "1551360",
    "end": "1558559"
  },
  {
    "text": "so when you when a Kubernetes thing calls a reconcile function that then updates the state that should be written",
    "start": "1558559",
    "end": "1565360"
  },
  {
    "text": "out to the outside world then you wait a little bit and then then write that state so that it's consistent and only a certain amount of time and you know you",
    "start": "1565360",
    "end": "1571600"
  },
  {
    "text": "can do hold down timers and a bunch of other neat stuff there to make sure you're not overloading things right i guess in that case like when someone",
    "start": "1571600",
    "end": "1577840"
  },
  {
    "text": "goes to a cloud provider API and manually changes something without you know that the controller is supposed to manage I guess you never get to correct",
    "start": "1577840",
    "end": "1585840"
  },
  {
    "text": "that mistake or you know overwrite that decision right so yeah well I mean it comes that comes down to a philosophy thing I guess like what are you",
    "start": "1585840",
    "end": "1591919"
  },
  {
    "text": "anticipating the uh the thing to do here are you anticipating that the um that the the cloud provider state is the",
    "start": "1591919",
    "end": "1598240"
  },
  {
    "text": "source of truth or are you anticipating that your controller is the source of truth right if you want to be able to take changes and synchronize them into",
    "start": "1598240",
    "end": "1604640"
  },
  {
    "text": "your controller then it's a much harder problem than if you say okay whatever's happening in the controller is the",
    "start": "1604640",
    "end": "1610000"
  },
  {
    "text": "answer uh and you know we want to just take whatever is in the controller and push it out to the outside world and if",
    "start": "1610000",
    "end": "1615039"
  },
  {
    "text": "someone changes it too bad your changes got lost right like you know I would probably argue that most of the time you",
    "start": "1615039",
    "end": "1620559"
  },
  {
    "text": "want that like you know it's going to be weird that not often that you're going to want to persist uh um like manually",
    "start": "1620559",
    "end": "1628240"
  },
  {
    "text": "made changes it's better if you've got a reconciled system for the system the reconciliation based system to",
    "start": "1628240",
    "end": "1634000"
  },
  {
    "text": "completely reflect the state of the world and to push reconciled state as far as possible out yeah makes sense",
    "start": "1634000",
    "end": "1639039"
  },
  {
    "text": "thank you yeah excellent thanks very much um yeah any other questions very welcomed um yeah sorry for burning",
    "start": "1639039",
    "end": "1645520"
  },
  {
    "text": "through that a bit quicker than I thought it would in practice I must have talked slower or",
    "start": "1645520",
    "end": "1651440"
  },
  {
    "text": "something oh great excellent hit me hit me thanks a lot for the call uh so my",
    "start": "1651799",
    "end": "1656880"
  },
  {
    "text": "question is a bit of a tangent but how do you test your operator before deploying it to production it's more like a So this is actually a really good",
    "start": "1656880",
    "end": "1664240"
  },
  {
    "text": "question um so um one of the things that we try and do is so for selium for",
    "start": "1664240",
    "end": "1669760"
  },
  {
    "text": "psyllium the selium operator this is actually relatively straightforward because our it depends on the answer really depends on what your outputs are",
    "start": "1669760",
    "end": "1676799"
  },
  {
    "text": "like for us our output is a Kubernetes object so we can test that the in-memory representation of the Kubernetes object",
    "start": "1676799",
    "end": "1683360"
  },
  {
    "text": "matches what it should be um you so you're testing the that the inputs the inputs you have control over match the",
    "start": "1683360",
    "end": "1689440"
  },
  {
    "text": "output you have control over right so very easy to do there's no mocking required you know you just basically say",
    "start": "1689440",
    "end": "1695120"
  },
  {
    "text": "run here's the inputs run the function here's what here's what I expect to be the output if you are testing things",
    "start": "1695120",
    "end": "1700480"
  },
  {
    "text": "that are um like that require pushing out to other APIs like that other guy I",
    "start": "1700480",
    "end": "1705760"
  },
  {
    "text": "just uh mentioned then having some sort of in-memory representation of that state is the only real way to be able to",
    "start": "1705760",
    "end": "1712000"
  },
  {
    "text": "test otherwise you're going to have to mock the AWS API or something and like jump through a bunch of hoops definitely",
    "start": "1712000",
    "end": "1717679"
  },
  {
    "text": "doable but like way more work than just having some inmemory states so yeah like generally the the method I recommend",
    "start": "1717679",
    "end": "1724880"
  },
  {
    "text": "people do for complicated controllers is to use a sort of it's like a descendant",
    "start": "1724880",
    "end": "1730000"
  },
  {
    "text": "of the model view controller kind of thing where you've got an ingestion layer a data model and a a sort of",
    "start": "1730000",
    "end": "1735679"
  },
  {
    "text": "translation layer that takes the data model the data model is like a pretty generic representation of your problem",
    "start": "1735679",
    "end": "1741120"
  },
  {
    "text": "domain the ingestion layer lets you take config from Kubernetes or wherever put it into your data model and then your",
    "start": "1741120",
    "end": "1747120"
  },
  {
    "text": "data model the translation layer takes the data model and turns it into whatever form you need and so that means",
    "start": "1747120",
    "end": "1752640"
  },
  {
    "text": "that testing you can take various ingestion things run them through the thing into the model and test the step",
    "start": "1752640",
    "end": "1758480"
  },
  {
    "text": "that's ingestion into model and then you can test the step that's model into translated version in se as a separate",
    "start": "1758480",
    "end": "1763919"
  },
  {
    "text": "step yeah so you're not testing that in one go you got two spots where you can test that",
    "start": "1763919",
    "end": "1770080"
  },
  {
    "text": "thank you yeah no",
    "start": "1770080",
    "end": "1772960"
  },
  {
    "text": "problems excellent uh I got we do have plenty more time so if anyone wants to come and see me afterwards feel free um",
    "start": "1776440",
    "end": "1783120"
  },
  {
    "text": "oh do we have another question excellent hit me i have one question so we have currently we use like content hashing so",
    "start": "1783120",
    "end": "1789120"
  },
  {
    "text": "we get like the objects check uh the hash great method yeah yeah so we do",
    "start": "1789120",
    "end": "1795039"
  },
  {
    "text": "like no patch operations because we don't get the div do you use any library to see also diffs between what is",
    "start": "1795039",
    "end": "1801760"
  },
  {
    "text": "currently deployed in Kubernetes and what the object should be yeah so I think that's one of the that's an",
    "start": "1801760",
    "end": "1807919"
  },
  {
    "text": "interesting that's sort of a downside of using like the the the uh hash method is that you're not retrieving the original",
    "start": "1807919",
    "end": "1814080"
  },
  {
    "text": "state of the object one of the nice things about the way the controller runtime does things is that you're getting your the controller runtime",
    "start": "1814080",
    "end": "1820399"
  },
  {
    "text": "maintains a a case of like what it believes is the latest state of the object and so that you can be pretty",
    "start": "1820399",
    "end": "1826000"
  },
  {
    "text": "confident will be updated like is either updated now or will be updated real soon",
    "start": "1826000",
    "end": "1831600"
  },
  {
    "text": "uh and so like that that's a good way to make sure that you have the actual object and then um the the other thing I",
    "start": "1831600",
    "end": "1838320"
  },
  {
    "text": "would recommend is try to make it so that you're not caring about the diff of the objects right like ideally the what",
    "start": "1838320",
    "end": "1843760"
  },
  {
    "text": "you're doing here is you're taking the set of objects that you care about and you're doing something with them to build that model that I talked about and",
    "start": "1843760",
    "end": "1850159"
  },
  {
    "text": "then that model just goes and gets translated it doesn't matter if that model is different to before or not right like except at the time when you",
    "start": "1850159",
    "end": "1857200"
  },
  {
    "text": "actually send the translation off to to Kubernetes yeah so like the more you can do that the more you can delay that step",
    "start": "1857200",
    "end": "1863600"
  },
  {
    "text": "of where you have to look at something that is currently in Kubernetes and compare what you're going to send what you're going to update the better off",
    "start": "1863600",
    "end": "1869120"
  },
  {
    "text": "you are does that make sense yeah makes sense excellent thank you thanks very much",
    "start": "1869120",
    "end": "1876360"
  },
  {
    "text": "okay well uh yeah looks like uh looks like we're we're out of questions that are willing to come up to the mic feel",
    "start": "1881480",
    "end": "1887279"
  },
  {
    "text": "free to come and find me for other questions um thanks again for listening uh and uh really appreciate it uh see",
    "start": "1887279",
    "end": "1894960"
  },
  {
    "text": "you all around [Applause]",
    "start": "1894960",
    "end": "1899479"
  }
]