[
  {
    "text": "all right hi i'm julius i'm the co-founder of the prometheus monitoring system and i also recently created a company",
    "start": "80",
    "end": "7600"
  },
  {
    "text": "around prometheus called prom labs and in this session i'm going to just give an introductory talk",
    "start": "7600",
    "end": "13920"
  },
  {
    "text": "about what promises is what are some of the main features and why you might want to use it",
    "start": "13920",
    "end": "21359"
  },
  {
    "text": "so first of all prometheus is a monitoring system that is based on purely numeric metrics",
    "start": "21520",
    "end": "29679"
  },
  {
    "text": "it cares about the entire chain of monitoring meaning from getting metrics out of things you",
    "start": "29679",
    "end": "36239"
  },
  {
    "text": "care about instrumentation then collecting those metrics storing them and making them useful you",
    "start": "36239",
    "end": "43280"
  },
  {
    "text": "know for dashboarding for alerting and so on and it really doesn't focus on any",
    "start": "43280",
    "end": "48640"
  },
  {
    "text": "single part of the stack but is useful from networking devices up to the application layer anything",
    "start": "48640",
    "end": "55680"
  },
  {
    "text": "that can expose metrics basically it also works especially well for dynamic",
    "start": "55680",
    "end": "61280"
  },
  {
    "text": "cloud environments um you know especially in the kubernetes environment this is very relevant",
    "start": "61280",
    "end": "67600"
  },
  {
    "text": "because both kubernetes and prometheus have mutually good support for each",
    "start": "67600",
    "end": "72720"
  },
  {
    "text": "other we also explicitly try not to do everything so",
    "start": "72720",
    "end": "78880"
  },
  {
    "text": "we don't do logging or tracing which are important in their own rights but prometheus only focuses on numeric values that",
    "start": "78880",
    "end": "86400"
  },
  {
    "text": "change over time we allow you to define alerting rules that might be complex potentially but",
    "start": "86400",
    "end": "92479"
  },
  {
    "text": "they have to be explicit so prometheus also doesn't do automatic machine learning style anomaly detection",
    "start": "92479",
    "end": "100720"
  },
  {
    "text": "and while prometheus's local storage is pretty efficient and good it's still tied to a single node so it's",
    "start": "100720",
    "end": "108640"
  },
  {
    "text": "not a horizontally clustered complex a durable system",
    "start": "108640",
    "end": "113680"
  },
  {
    "text": "it's really geared towards live monitoring",
    "start": "113680",
    "end": "118159"
  },
  {
    "text": "so prometheus started at in 2012 at soundcloud when matt proud and myself",
    "start": "119119",
    "end": "125360"
  },
  {
    "text": "came from google to soundcloud and we found already a cluster scheduler at the",
    "start": "125360",
    "end": "130560"
  },
  {
    "text": "company there that was in-house built and this was before docker before kubernetes",
    "start": "130560",
    "end": "136160"
  },
  {
    "text": "very early on and there were no proper oss monitoring tools that could deal with",
    "start": "136160",
    "end": "141599"
  },
  {
    "text": "that situation well so we started building prometheus first in our free time",
    "start": "141599",
    "end": "147120"
  },
  {
    "text": "and then more and more on soundcloud time and we're really inspired by google's",
    "start": "147120",
    "end": "152640"
  },
  {
    "text": "pokemon when we did that so you know once it was somewhat",
    "start": "152640",
    "end": "158319"
  },
  {
    "text": "successful at soundcloud we fully published it in 2015 and then a bit more than a year later we",
    "start": "158319",
    "end": "164720"
  },
  {
    "text": "actually joined the cloud native computing foundation just after kubernetes the first project",
    "start": "164720",
    "end": "171519"
  },
  {
    "text": "and you know by now prometheus is an independent project where many companies",
    "start": "171519",
    "end": "176720"
  },
  {
    "text": "are working on and basically you know many many companies are using it all kinds of",
    "start": "176720",
    "end": "182159"
  },
  {
    "text": "small startups to huge corporations and you can find prometheus the project itself",
    "start": "182159",
    "end": "187760"
  },
  {
    "text": "at prometheus io so let's look at the overall",
    "start": "187760",
    "end": "194080"
  },
  {
    "text": "architecture of prometheus for a second so imagine you have some",
    "start": "194080",
    "end": "200159"
  },
  {
    "text": "you know web applications or api servers where you can control the code yourself and you want to monitor these",
    "start": "200159",
    "end": "205920"
  },
  {
    "text": "with prometheus somehow you need to expose metrics to prometheus",
    "start": "205920",
    "end": "211200"
  },
  {
    "text": "over http so prometheus actually wants to actively go to the different things you",
    "start": "211200",
    "end": "218319"
  },
  {
    "text": "care about and pull metrics over a format that you that prometheus defines so the",
    "start": "218319",
    "end": "224400"
  },
  {
    "text": "things that you care about that you want to monitor we call targets in prometheus and the",
    "start": "224400",
    "end": "230080"
  },
  {
    "text": "best case is when you can actually um modify the code of these things",
    "start": "230080",
    "end": "235599"
  },
  {
    "text": "include a prometheus client library into the code that tracks metrics like counters",
    "start": "235599",
    "end": "241120"
  },
  {
    "text": "gauges histograms summaries and then exposes those metrics every time that",
    "start": "241120",
    "end": "246799"
  },
  {
    "text": "promises comes by over http now there are",
    "start": "246799",
    "end": "251920"
  },
  {
    "text": "some other things where you can't actually do that necessarily for example you know you might have an actual linux",
    "start": "251920",
    "end": "258160"
  },
  {
    "text": "virtual machine or the mysql daemon c code base or so",
    "start": "258160",
    "end": "263440"
  },
  {
    "text": "things where you can't easily just add a direct prometheus metric server too so we have another pattern for that",
    "start": "263440",
    "end": "270080"
  },
  {
    "text": "that's the exporter pattern where the you run an extra process",
    "start": "270080",
    "end": "277520"
  },
  {
    "text": "next to the thing you actually care about that does the translation from whatever the backend metrics format is",
    "start": "277520",
    "end": "283600"
  },
  {
    "text": "to the prometheus metrics format so in the end then prometheus",
    "start": "283600",
    "end": "291280"
  },
  {
    "text": "knows about all these targets and scrapes these targets in a regular interval and",
    "start": "291280",
    "end": "298320"
  },
  {
    "text": "you might be wondering what does the actual format get looks like that gets transferred over",
    "start": "298320",
    "end": "304800"
  },
  {
    "text": "the wire here so let's have a brief interlude about that it's a simple text-based format",
    "start": "304800",
    "end": "310639"
  },
  {
    "text": "where every sample of a time series is on one single line giving you a metric name and then uh",
    "start": "310639",
    "end": "317919"
  },
  {
    "text": "labels that further specify the sub-dimension of what you're measuring and then the actual current",
    "start": "317919",
    "end": "323440"
  },
  {
    "text": "sample value so this only always transfers the current sample value that is either",
    "start": "323440",
    "end": "329360"
  },
  {
    "text": "being counted or tracked or whatever and as you can see this format is pretty",
    "start": "329360",
    "end": "335199"
  },
  {
    "text": "easy to produce and we'll talk about the data model in a second more",
    "start": "335199",
    "end": "340400"
  },
  {
    "text": "so now another question is how does prometheus know where all these targets are and this is where service discovery",
    "start": "341120",
    "end": "347520"
  },
  {
    "text": "comes in where prometheus knows how to talk to different sources of truth that tell prometheus what is supposed to be",
    "start": "347520",
    "end": "354080"
  },
  {
    "text": "where and how to gather data once it has gathered the data in a local time series",
    "start": "354080",
    "end": "360160"
  },
  {
    "text": "database you can then point tools like grafana the dashboard builder or",
    "start": "360160",
    "end": "366080"
  },
  {
    "text": "edit to create dashboards or you can use prometheuses built in web ui or you could also build automation",
    "start": "366080",
    "end": "372800"
  },
  {
    "text": "against prometheus's query apis to actually do things like autoremediation or so",
    "start": "372800",
    "end": "380400"
  },
  {
    "text": "finally you can also use prometheus to calculate alerts based on the collected data for",
    "start": "380400",
    "end": "385680"
  },
  {
    "text": "you and then send those alerts to actual humans or machines via",
    "start": "385680",
    "end": "391520"
  },
  {
    "text": "a separate service called alert manager and typically you would have maybe many",
    "start": "391520",
    "end": "396880"
  },
  {
    "text": "prometheus servers in your organizations but just one alert manager and all the different alerts in your",
    "start": "396880",
    "end": "402160"
  },
  {
    "text": "organization come together in alert manager and get grouped over time across dimensions and so on",
    "start": "402160",
    "end": "408560"
  },
  {
    "text": "and then get rooted to the right teams and the right notification mechanisms",
    "start": "408560",
    "end": "414720"
  },
  {
    "text": "so i would say the the four main selling points of prometheus are these four",
    "start": "415360",
    "end": "422880"
  },
  {
    "text": "the data model of prometheus allows you to collect data in pretty good detail about all the",
    "start": "422880",
    "end": "430400"
  },
  {
    "text": "different moving infrastructure and service parts in your org",
    "start": "430400",
    "end": "436000"
  },
  {
    "text": "and then we offer you a query language to work usefully with that language to actually ask interesting questions",
    "start": "436000",
    "end": "442960"
  },
  {
    "text": "the architecture of prometheus is also relatively simple and a single server is also you know it",
    "start": "442960",
    "end": "450160"
  },
  {
    "text": "can store it can process and store a lot of samples and then the service discovery",
    "start": "450160",
    "end": "456479"
  },
  {
    "text": "integration is the part that makes it work well in dynamic environments i will now",
    "start": "456479",
    "end": "462160"
  },
  {
    "text": "dive a bit deeper into each of these four parts to flesh them out a bit more so first",
    "start": "462160",
    "end": "467759"
  },
  {
    "text": "the data model prometheus fundamentally tracks numeric",
    "start": "467759",
    "end": "473840"
  },
  {
    "text": "time series so numeric values that change over time um and you know they have some kind of",
    "start": "473840",
    "end": "481520"
  },
  {
    "text": "identifier and then they we just once we have indexed this identifier one time",
    "start": "481520",
    "end": "487280"
  },
  {
    "text": "um we just track timestamp value pairs on an ongoing basis for this identifier",
    "start": "487280",
    "end": "494319"
  },
  {
    "text": "so for example how the temperature in a given room develops over time and all the time stamps in prometheus",
    "start": "494319",
    "end": "501199"
  },
  {
    "text": "are millisecond in 64 timestamps and all the sample values",
    "start": "501199",
    "end": "506240"
  },
  {
    "text": "are float64s even if you're just tracking integers this actually compresses really well",
    "start": "506240",
    "end": "512000"
  },
  {
    "text": "under the hood and is tracked nicely so a big difference to other monitoring",
    "start": "512000",
    "end": "517680"
  },
  {
    "text": "systems or time series databases that came before prometheus is how time series get identified so",
    "start": "517680",
    "end": "524399"
  },
  {
    "text": "that we can better query and filter them in the query language",
    "start": "524399",
    "end": "530560"
  },
  {
    "text": "so what does this look like the identifier of a time series rather than going for a flat single",
    "start": "530560",
    "end": "537279"
  },
  {
    "text": "metric name or just a hierarchical data model in prometheus we identify each time",
    "start": "537279",
    "end": "544080"
  },
  {
    "text": "series first by its metric name in this case http requests total and then you know this would be",
    "start": "544080",
    "end": "551600"
  },
  {
    "text": "the total number of http requests handled in a given type of web server for example",
    "start": "551600",
    "end": "557760"
  },
  {
    "text": "and then we subdifferentiate the different dimensions in which specific process this happened",
    "start": "557760",
    "end": "564080"
  },
  {
    "text": "on which specific path an http request got handled and so on in things we call",
    "start": "564080",
    "end": "569680"
  },
  {
    "text": "labels so we have these key value pairs called labels that help us",
    "start": "569680",
    "end": "574880"
  },
  {
    "text": "create the sub dimensions in the metric name that tells us the central aspect of a system we are monitoring",
    "start": "574880",
    "end": "582959"
  },
  {
    "text": "now this data model has the benefit that it's pretty flexible you know in a hierarchy you",
    "start": "583519",
    "end": "591200"
  },
  {
    "text": "a hierarchical data model is a bit harder to change after the fact if you add a new dimension for example",
    "start": "591200",
    "end": "597120"
  },
  {
    "text": "and you have to know which component in a hierarchy actually is for example the path",
    "start": "597120",
    "end": "602160"
  },
  {
    "text": "or the status or the instance um and in this case it's",
    "start": "602160",
    "end": "609279"
  },
  {
    "text": "completely not order based not hierarchical and you see very explicitly which dimension actually",
    "start": "609279",
    "end": "614480"
  },
  {
    "text": "means what so now that we know this data model we also have a query language that",
    "start": "614480",
    "end": "621839"
  },
  {
    "text": "goes on top of the data model called promql the prometheus query language and you know this is a completely new",
    "start": "621839",
    "end": "628160"
  },
  {
    "text": "query language it's explicitly not a sql style language which sometimes irritates people but we",
    "start": "628160",
    "end": "635760"
  },
  {
    "text": "still think that the way promql works is better for",
    "start": "635760",
    "end": "641600"
  },
  {
    "text": "numeric time series computations that you typically want to do in systems monitoring",
    "start": "641600",
    "end": "647279"
  },
  {
    "text": "than a sql style language so let's just look at a couple of",
    "start": "647279",
    "end": "652880"
  },
  {
    "text": "examples without diving into deeply imagine you have a node exporter",
    "start": "652880",
    "end": "658640"
  },
  {
    "text": "running on all the different nodes in your infrastructure giving you file system metrics for",
    "start": "658640",
    "end": "664320"
  },
  {
    "text": "example the total size of all your mounted partitions in your infrastructure",
    "start": "664320",
    "end": "669920"
  },
  {
    "text": "and now you would one might want to know give me all the give me all the partitions in my",
    "start": "669920",
    "end": "676399"
  },
  {
    "text": "infrastructure that are not mounted on root and that are larger than 100 gigabytes of capacity so you can",
    "start": "676399",
    "end": "682480"
  },
  {
    "text": "even ask these kind of questions against prometheus which might not directly be relevant for alert but",
    "start": "682480",
    "end": "689040"
  },
  {
    "text": "just help you look into your infrastructure so you know in this case you would just start by the metric name",
    "start": "689040",
    "end": "694959"
  },
  {
    "text": "that gives you the size of all partitions then filter it down with a negative matcher to all",
    "start": "694959",
    "end": "703040"
  },
  {
    "text": "all partitions that are not mounted on root these are still in bytes so now we're",
    "start": "703040",
    "end": "708160"
  },
  {
    "text": "dividing by a billion to get to a gigabyte and then filtering it down to",
    "start": "708160",
    "end": "713200"
  },
  {
    "text": "the ones that are actually larger than 100 gigabytes and what you get out of this is an",
    "start": "713200",
    "end": "719440"
  },
  {
    "text": "actual labeled list of all the different partitions with their dimensions so you actually know",
    "start": "719440",
    "end": "726560"
  },
  {
    "text": "all the metadata about them another example that's pretty common is",
    "start": "726560",
    "end": "732560"
  },
  {
    "text": "that you might want to know the ratio of errors to the total request so your error rate basically um",
    "start": "732560",
    "end": "739120"
  },
  {
    "text": "in this case you could just select all the 500 status quo requests form a per second rate over",
    "start": "739120",
    "end": "745839"
  },
  {
    "text": "them and then you know some sum all these requests over all the different",
    "start": "745839",
    "end": "751440"
  },
  {
    "text": "dimensions path method and so on to get a single number and divide that by all the requests so",
    "start": "751440",
    "end": "757360"
  },
  {
    "text": "not only 500 ones this would give you a single output number for the ratio of errors",
    "start": "757360",
    "end": "763440"
  },
  {
    "text": "but often you might want to preserve some dimensionality for example you might want to see",
    "start": "763440",
    "end": "768639"
  },
  {
    "text": "this whole result for every path in your infrastructure or in your service so in this case",
    "start": "768639",
    "end": "775839"
  },
  {
    "text": "you could just take the same expression and add a bypath modifier to the sum",
    "start": "775839",
    "end": "782720"
  },
  {
    "text": "which preserves the path dimension in the sum on the left hand side and on the",
    "start": "783200",
    "end": "788320"
  },
  {
    "text": "right hand side and then prometheus knows how to automatically join the left-hand",
    "start": "788320",
    "end": "794959"
  },
  {
    "text": "side with the right-hand side based on identical label sets so they will have the same",
    "start": "794959",
    "end": "800000"
  },
  {
    "text": "path label and give you the ratio for every path now and you know there's more",
    "start": "800000",
    "end": "805959"
  },
  {
    "text": "customizability around this possible but this is just a simple example",
    "start": "805959",
    "end": "811519"
  },
  {
    "text": "um you can also do things in prom ql like um without diving too deeply into it",
    "start": "811920",
    "end": "817519"
  },
  {
    "text": "like collecting latencies request latencies in histogram and then estimating for example the 99th",
    "start": "817519",
    "end": "824079"
  },
  {
    "text": "percentile latency based on that histogram aggregated over all instances but still preserving other",
    "start": "824079",
    "end": "831199"
  },
  {
    "text": "labels like the path and the method so you know once you actually learn this",
    "start": "831199",
    "end": "837519"
  },
  {
    "text": "language what can you do with it so you might just start using the",
    "start": "837519",
    "end": "843519"
  },
  {
    "text": "expression browser in prometheus that is built in to kind of introspect what's currently happening",
    "start": "843519",
    "end": "849600"
  },
  {
    "text": "in your prometheus server so you can show in your infrastructure you can show things in the table uh by the way excuse me for some of the",
    "start": "849600",
    "end": "856959"
  },
  {
    "text": "fonts that are bit off this happened while uh converting to powerpoint from google slides",
    "start": "856959",
    "end": "863760"
  },
  {
    "text": "um you can also graph uh the expressions that you that you",
    "start": "863760",
    "end": "869279"
  },
  {
    "text": "learned and then once you want to build a bit more like serious dashboards you would typically go to grafana and",
    "start": "869279",
    "end": "876720"
  },
  {
    "text": "um you know create dashboards with all the bells and whistles that you can save and you can share with your colleagues",
    "start": "876720",
    "end": "883199"
  },
  {
    "text": "um another thing though that prometheus allows you to do is actually base alerting on the collected",
    "start": "883199",
    "end": "890000"
  },
  {
    "text": "data so you know whereas previously you might have had a separate system for alerting from your",
    "start": "890000",
    "end": "896639"
  },
  {
    "text": "time series database prometheus integrates all that with each other so first collect everything as",
    "start": "896639",
    "end": "902240"
  },
  {
    "text": "time series and then you can use promql to formulate alerting conditions",
    "start": "902240",
    "end": "908959"
  },
  {
    "text": "in this example we want to alert when there's a path in our service that has a larger",
    "start": "908959",
    "end": "914560"
  },
  {
    "text": "than five percent error rate so we take the expression that we saw earlier uh that gives us this",
    "start": "914560",
    "end": "920560"
  },
  {
    "text": "ratio of errors for every path and we multiply it by a hundred to get to percent and then we filter it",
    "start": "920560",
    "end": "927199"
  },
  {
    "text": "down by only the ones that are larger than five percent and then we add another condition here to say",
    "start": "927199",
    "end": "933759"
  },
  {
    "text": "only paths that are in a bad error rate for at least five minutes should alert",
    "start": "933759",
    "end": "940000"
  },
  {
    "text": "us and in the end for the paths for which this is true we will then get a single alert output element for",
    "start": "940000",
    "end": "947199"
  },
  {
    "text": "each of these paths and then an alert manager later on we can actually choose how to group these",
    "start": "947199",
    "end": "952240"
  },
  {
    "text": "into single notifications or multiple",
    "start": "952240",
    "end": "956880"
  },
  {
    "text": "now prometheus itself is operationally pretty simple at least to start out with",
    "start": "958480",
    "end": "963920"
  },
  {
    "text": "so it only writes into local storage directly on the file system you don't need a special database",
    "start": "963920",
    "end": "969600"
  },
  {
    "text": "or so it's all integrated it doesn't have clustering features",
    "start": "969600",
    "end": "975440"
  },
  {
    "text": "and you know if you want to have high availability for alerting you just run two of the same",
    "start": "975440",
    "end": "981040"
  },
  {
    "text": "prometheuses that are configured in exactly the same way and they will calculate the same alerts",
    "start": "981040",
    "end": "987040"
  },
  {
    "text": "send the same alerts to alert manager and alert manager then will actually deduplicate them on their label sets so you will only get",
    "start": "987040",
    "end": "994000"
  },
  {
    "text": "one notification in the end it's also written in go which makes it easy to deploy in case you're not",
    "start": "994000",
    "end": "1000480"
  },
  {
    "text": "anyway using something like docker nowadays where that doesn't matter so much anymore but it's a nice language to run in the",
    "start": "1000480",
    "end": "1007120"
  },
  {
    "text": "cloud a single server can also get you quite far um",
    "start": "1007120",
    "end": "1012639"
  },
  {
    "text": "if you have a big machine you might be able to get to something close of a million samples",
    "start": "1012639",
    "end": "1018240"
  },
  {
    "text": "ingested per second and i typically see big prometer servers with many millions of series",
    "start": "1018240",
    "end": "1025438"
  },
  {
    "text": "and the local storage also compresses these the samples that it collects very",
    "start": "1025439",
    "end": "1031280"
  },
  {
    "text": "well so every numerical sample that it actually collects ends up on disk typically using maybe",
    "start": "1031280",
    "end": "1037038"
  },
  {
    "text": "one to two bytes with all the overhead around it so the local storage is good for keeping maybe",
    "start": "1037039",
    "end": "1042640"
  },
  {
    "text": "a couple of weeks or months of data and i do have to mention that you know some people actually use it",
    "start": "1042640",
    "end": "1048160"
  },
  {
    "text": "for keeping years of data but then if you want to do that you have to be really careful uh not to",
    "start": "1048160",
    "end": "1054400"
  },
  {
    "text": "overload your prometheus to back up your data regularly you can create uh consistent",
    "start": "1054400",
    "end": "1059919"
  },
  {
    "text": "snapshots that you can back up and so on um but prometheus is at least initially was more designed as a live monitoring",
    "start": "1059919",
    "end": "1066880"
  },
  {
    "text": "system with you know a couple of weeks or months of data",
    "start": "1066880",
    "end": "1071280"
  },
  {
    "text": "so for people who do want to keep data more durably and long term their prometheus gives you an",
    "start": "1072799",
    "end": "1079120"
  },
  {
    "text": "integration called the remote read and writes protocol where prometheus can send any sample or",
    "start": "1079120",
    "end": "1085360"
  },
  {
    "text": "a subset thereof that it collects to a remote endpoint to some kind of",
    "start": "1085360",
    "end": "1090799"
  },
  {
    "text": "bigger clustered durable database uh either through an adapter or nowadays",
    "start": "1090799",
    "end": "1096640"
  },
  {
    "text": "there's more and more products and projects that actually support this protocol out of the box",
    "start": "1096640",
    "end": "1103520"
  },
  {
    "text": "and then you know on the remote end it could really be anything and prometheus can also read back the",
    "start": "1103520",
    "end": "1109840"
  },
  {
    "text": "data from the remote end and do promql on it again",
    "start": "1109840",
    "end": "1115760"
  },
  {
    "text": "and so we have many many different integrations offering this kind of protocol already",
    "start": "1115760",
    "end": "1122320"
  },
  {
    "text": "for example cortex is an open source one or influx db or time scale and many others",
    "start": "1122320",
    "end": "1129440"
  },
  {
    "text": "there's also a long-term storage solution that integrates in a quite different way which is called",
    "start": "1130320",
    "end": "1135520"
  },
  {
    "text": "thanos this is pretty close to the prometheus project as well large overlap with",
    "start": "1135520",
    "end": "1141039"
  },
  {
    "text": "developers and pretty popular in the community this works not using the remote right protocol",
    "start": "1141039",
    "end": "1148080"
  },
  {
    "text": "nowadays it actually starts to support that as well but the original idea is that",
    "start": "1148080",
    "end": "1153600"
  },
  {
    "text": "you don't use that protocol but you add a thanos sidecar to all of your existing prometheus",
    "start": "1153600",
    "end": "1159280"
  },
  {
    "text": "servers and then the thanoside car ships any older",
    "start": "1159280",
    "end": "1164720"
  },
  {
    "text": "persisted data on these prometheus servers to an object storage like s3 gcs or mineo or so",
    "start": "1164720",
    "end": "1172400"
  },
  {
    "text": "and then you have other thanos components like the store gateway and the querier which allow you to get an integrated",
    "start": "1172400",
    "end": "1178559"
  },
  {
    "text": "view over all the recent data in multiple different prometheus servers all in one query and",
    "start": "1178559",
    "end": "1184960"
  },
  {
    "text": "the object storage which has potentially very very long-term data and can be durably replicated and",
    "start": "1184960",
    "end": "1192559"
  },
  {
    "text": "the thunder's querier also implements prometheus's query api so you can just point grafana at it as",
    "start": "1192559",
    "end": "1199600"
  },
  {
    "text": "if you're pointing at a prometheus server and run the same kind of queries",
    "start": "1199600",
    "end": "1207039"
  },
  {
    "text": "all right so the last point is about dynamic environments and making a monitoring system that works well with",
    "start": "1207039",
    "end": "1212799"
  },
  {
    "text": "them so nowadays you know we have more and more stuff happening in the cloud with",
    "start": "1212799",
    "end": "1218159"
  },
  {
    "text": "dynamically created vms and then on top of that we put cluster schedulers like kubernetes and",
    "start": "1218159",
    "end": "1224240"
  },
  {
    "text": "then on top of that we put rapidly moving microservices that are just being deployed and rolled out and taken",
    "start": "1224240",
    "end": "1230799"
  },
  {
    "text": "down again and so on so many many processes that are just moving around",
    "start": "1230799",
    "end": "1235919"
  },
  {
    "text": "a lot and are living on different hosts and ports all the time how do you still",
    "start": "1235919",
    "end": "1242240"
  },
  {
    "text": "make sense of this kind of environment as a monitoring system so this again is where service discovery",
    "start": "1242240",
    "end": "1249200"
  },
  {
    "text": "comes in uh prometheus supports talking to many different kinds of service",
    "start": "1249200",
    "end": "1255360"
  },
  {
    "text": "discoveries whether they're more particular to a cloud provider or cluster scheduler or more generic ones",
    "start": "1255360",
    "end": "1262159"
  },
  {
    "text": "but in all cases prometheus uses service discovery for three distinct purposes",
    "start": "1262159",
    "end": "1268240"
  },
  {
    "text": "the first one is i'm a monitoring system and i want to know what should be there so you know so i",
    "start": "1268240",
    "end": "1275360"
  },
  {
    "text": "can even tell you that something is broken right the other thing is technically okay now i",
    "start": "1275360",
    "end": "1280400"
  },
  {
    "text": "i know something should be there how do i actually go out actively and pull data from it um this information typically comes from",
    "start": "1280400",
    "end": "1287280"
  },
  {
    "text": "the service discovery in the form of a host and a port for example and sometimes more options and then the third thing",
    "start": "1287280",
    "end": "1295520"
  },
  {
    "text": "if it's a good service discovery like the kubernetes one it will know certain details about the",
    "start": "1295520",
    "end": "1300559"
  },
  {
    "text": "the target the object that you discovered so it can tell you you know a particular part is in",
    "start": "1300559",
    "end": "1306960"
  },
  {
    "text": "environment equals production part for example and then it allows you to map that metadata",
    "start": "1306960",
    "end": "1312720"
  },
  {
    "text": "into the actual time series labels that you collect so you can use it later on in the query language",
    "start": "1312720",
    "end": "1320399"
  },
  {
    "text": "so prometheus has built-in support for over 10 different service discovery",
    "start": "1320559",
    "end": "1325679"
  },
  {
    "text": "mechanisms by now yeah some are for vm providers aws azure",
    "start": "1325679",
    "end": "1331120"
  },
  {
    "text": "google and so on to actually discover instances others are you know for cluster managers",
    "start": "1331120",
    "end": "1338000"
  },
  {
    "text": "for example in kubernetes you can say stuff like give me every endpoint give me every service give me a parts",
    "start": "1338000",
    "end": "1344159"
  },
  {
    "text": "give me ingresses and so on and then you have more generic ones like dns and so on and even a custom plugin where",
    "start": "1344159",
    "end": "1351440"
  },
  {
    "text": "you can build your own service discovery if it's not one that is built into prometheus yet",
    "start": "1351440",
    "end": "1356720"
  },
  {
    "text": "and this works over a file based watcher mechanism",
    "start": "1356720",
    "end": "1362240"
  },
  {
    "text": "so in conclusion prometheus is a monitoring system that works well with these dynamic",
    "start": "1362880",
    "end": "1367919"
  },
  {
    "text": "environments and can tell you what's broken and also allows you to make nice",
    "start": "1367919",
    "end": "1373200"
  },
  {
    "text": "dashboards and with the data model in the query language it allows you to get really",
    "start": "1373200",
    "end": "1378480"
  },
  {
    "text": "good detailed insight into your infrastructure while being able to use that both for",
    "start": "1378480",
    "end": "1385200"
  },
  {
    "text": "dashboards and alerting and you know it's implemented in a pretty simple architecture with good efficiency",
    "start": "1385200",
    "end": "1392880"
  },
  {
    "text": "and the service discovery integration really makes it work well together with dynamic environments",
    "start": "1392880",
    "end": "1401280"
  },
  {
    "text": "all right thank you",
    "start": "1401280",
    "end": "1404799"
  },
  {
    "text": "all right hi now we'll get to the live q a part some people have submitted",
    "start": "1408559",
    "end": "1414559"
  },
  {
    "text": "questions really built in chat in the platform um so let's start with the first one",
    "start": "1414559",
    "end": "1421039"
  },
  {
    "text": "so someone asked can it also be used for snmp monitoring",
    "start": "1421039",
    "end": "1426240"
  },
  {
    "text": "and also monitoring the devices via sorry via rest api interfaces is it fully open",
    "start": "1426240",
    "end": "1432880"
  },
  {
    "text": "source or also enterprise um so first of all yes you can monitor snmp devices using",
    "start": "1432880",
    "end": "1441120"
  },
  {
    "text": "prometheus there's a an exporter called the snmp exporter if you google that it's part",
    "start": "1441120",
    "end": "1447440"
  },
  {
    "text": "of the official exporters that we have in the prometheus github org and yeah you basically provided with a",
    "start": "1447440",
    "end": "1455120"
  },
  {
    "text": "configuration of the network devices that you want to scrape and then prometheus",
    "start": "1455120",
    "end": "1460799"
  },
  {
    "text": "basically scrapes those network devices through the snmp exporter the snmp exporter is the thing that then",
    "start": "1460799",
    "end": "1467039"
  },
  {
    "text": "actually runs snmp against your network devices and translates metrics back into",
    "start": "1467039",
    "end": "1473200"
  },
  {
    "text": "prometheus format rest api interface",
    "start": "1473200",
    "end": "1487840"
  },
  {
    "text": "so generally prometheus itself can only",
    "start": "1490159",
    "end": "1495039"
  },
  {
    "text": "scroll",
    "start": "1498840",
    "end": "1501840"
  },
  {
    "text": "it's usually",
    "start": "1600559",
    "end": "1603278"
  },
  {
    "text": "easy to convert any rest based interface into this format so you will",
    "start": "1610400",
    "end": "1615840"
  },
  {
    "text": "need to use some kind of exporter the first thing that i would recommend is going to prometheus.io",
    "start": "1615840",
    "end": "1623919"
  },
  {
    "text": "and in the search bar search for exporters and integrations very often you will already",
    "start": "1623919",
    "end": "1629840"
  },
  {
    "text": "find a custom exporter integration to scrape exactly the type of system that you want",
    "start": "1629840",
    "end": "1635679"
  },
  {
    "text": "to get metrics out of if it doesn't exist yet there is also um",
    "start": "1635679",
    "end": "1641600"
  },
  {
    "text": "something called the json exporter if you search on google for a prometheus json exporter",
    "start": "1641600",
    "end": "1649039"
  },
  {
    "text": "this allows you to define to use like it's basically a generic exporter which you can configure",
    "start": "1649039",
    "end": "1656320"
  },
  {
    "text": "to look at any json endpoint which might be part of a rest api and then translate some of the",
    "start": "1656320",
    "end": "1662480"
  },
  {
    "text": "components in there into prometheus metrics and of course you can always build your",
    "start": "1662480",
    "end": "1667520"
  },
  {
    "text": "own custom exporter um and then is it fully open source or also enterprise",
    "start": "1667520",
    "end": "1673360"
  },
  {
    "text": "uh prometheus the main project is fully open source there's no company behind it it belongs to the cncf uh but there are",
    "start": "1673360",
    "end": "1681600"
  },
  {
    "text": "many companies offering different you know hosted monitoring services around it",
    "start": "1681600",
    "end": "1686880"
  },
  {
    "text": "that you know do long-term storage and sometimes do prom ql or sometimes doesn't",
    "start": "1686880",
    "end": "1692640"
  },
  {
    "text": "don't and sometimes they integrate alerting in their platform and some some of those interfaces are",
    "start": "1692640",
    "end": "1699120"
  },
  {
    "text": "maybe compatible with prometheus and others are their own you can find out more about",
    "start": "1699120",
    "end": "1707278"
  },
  {
    "text": "commercial stuff if you go to prometheus io there is a section called support and",
    "start": "1707679",
    "end": "1715279"
  },
  {
    "text": "training and there's at least some companies listed there but there's many more companies you know offering",
    "start": "1715279",
    "end": "1721120"
  },
  {
    "text": "support around prometheus can you recommend any resources to learn",
    "start": "1721120",
    "end": "1728320"
  },
  {
    "text": "from ql so i think i mean this is a shameless self plug",
    "start": "1728320",
    "end": "1734080"
  },
  {
    "text": "but a long time ago or a while ago at least i wrote a two-part tutorial which i many people told me is",
    "start": "1734080",
    "end": "1741760"
  },
  {
    "text": "very helpful if you search for querying prometheus",
    "start": "1741760",
    "end": "1746880"
  },
  {
    "text": "digitalocean on google there so if you just say crank prometheus digital ocean on google",
    "start": "1746880",
    "end": "1753760"
  },
  {
    "text": "you will find two parts of a tutorial that is named how to query prometheus",
    "start": "1753760",
    "end": "1758880"
  },
  {
    "text": "on ubuntu 14.04 so you'll see it's not 100 up to date but if you need to understand",
    "start": "1758880",
    "end": "1765440"
  },
  {
    "text": "the language from the ground up i think that's a good resource to start with and then of course in the commercial",
    "start": "1765440",
    "end": "1771679"
  },
  {
    "text": "support section on our website you will also find trainings my company does trainings brian's",
    "start": "1771679",
    "end": "1777679"
  },
  {
    "text": "company robust perception does trainings the linux foundation does trainings um so yeah many many places to learn",
    "start": "1777679",
    "end": "1785039"
  },
  {
    "text": "uh in youtube videos and so on um let's see brian wanted to send me a",
    "start": "1785039",
    "end": "1790880"
  },
  {
    "text": "comment about savix",
    "start": "1790880",
    "end": "1795840"
  },
  {
    "text": "[Music] okay so there was one question about in your opinion",
    "start": "1796450",
    "end": "1801760"
  },
  {
    "text": "what what's the best way to integrate prometheus with old tools like zabbix",
    "start": "1801760",
    "end": "1807679"
  },
  {
    "text": "please if possible show me where i can find out about this um",
    "start": "1807679",
    "end": "1814240"
  },
  {
    "text": "okay brian just sent me a link there is okay brian do you want to put that in as",
    "start": "1814559",
    "end": "1820559"
  },
  {
    "text": "a public answer to that question um",
    "start": "1820559",
    "end": "1826159"
  },
  {
    "text": "that would be cool so brian has a link on zybax.com that mentions something about prometheus integration",
    "start": "1826159",
    "end": "1832559"
  },
  {
    "text": "um okay",
    "start": "1832559",
    "end": "1837840"
  },
  {
    "text": "because because i don't know much about zavik itself but there's many ways to integrate with prometheus",
    "start": "1838000",
    "end": "1843679"
  },
  {
    "text": "um what about the semantic of value in your time series i",
    "start": "1843679",
    "end": "1850000"
  },
  {
    "text": "come from the networking world where we have data models which have strict semantics like mibs",
    "start": "1850000",
    "end": "1856480"
  },
  {
    "text": "and [Music] y-a-n-g netflow ipfix etc",
    "start": "1856480",
    "end": "1861760"
  },
  {
    "text": "by just having a metric name such as http requests total to take your example",
    "start": "1861760",
    "end": "1867120"
  },
  {
    "text": "we lose the semantic definition defined somewhere else how to use the prometheus metric name",
    "start": "1867120",
    "end": "1872159"
  },
  {
    "text": "while not losing the semantic definition defined somewhere else yeah so i mean prometheus itself has a",
    "start": "1872159",
    "end": "1879440"
  },
  {
    "text": "pretty loose schema and data model um prometheus itself doesn't really have a",
    "start": "1879440",
    "end": "1884480"
  },
  {
    "text": "programmatic understanding of what exactly a metric name means it does allow on a slash metrics endpoints in",
    "start": "1884480",
    "end": "1891679"
  },
  {
    "text": "the in the transfer protocol to attach a type of the metric and the help string and the unit now nowadays um so the the",
    "start": "1891679",
    "end": "1899440"
  },
  {
    "text": "help string would be a human readable interpretation of a metric name um basically saying this is the count of",
    "start": "1899440",
    "end": "1906880"
  },
  {
    "text": "http requests served by this binary or so and then the type could be a counter",
    "start": "1906880",
    "end": "1913120"
  },
  {
    "text": "metric or gauge metric or histogram summary or unknown um and then the unit is kind of a future",
    "start": "1913120",
    "end": "1920799"
  },
  {
    "text": "thing which which we're not really using yet um and currently so for the longest time",
    "start": "1920799",
    "end": "1926559"
  },
  {
    "text": "prometheus hasn't done anything with that but currently we do ingest that data uh into the in-memory portion",
    "start": "1926559",
    "end": "1933840"
  },
  {
    "text": "of prometheus and there's an api to retrieve it four give metric names for a given target that it scrapes it",
    "start": "1933840",
    "end": "1940640"
  },
  {
    "text": "from so you eyes can start working with it so for example in grafana it i think it in the explore",
    "start": "1940640",
    "end": "1947760"
  },
  {
    "text": "mode it already shows you the help strings for a given metric name when you ought to complete it and stuff like that",
    "start": "1947760",
    "end": "1954080"
  },
  {
    "text": "um but it's not you know deeply integrated into any correctness checks yet or so",
    "start": "1954080",
    "end": "1960559"
  },
  {
    "text": "we're we're hoping to uh thread that kind of information more and more",
    "start": "1960559",
    "end": "1965840"
  },
  {
    "text": "through to also remote storage systems there's currently work going on on that",
    "start": "1965840",
    "end": "1971440"
  },
  {
    "text": "and then making more and more use of metadata like that in the ui and the query language at some",
    "start": "1971440",
    "end": "1977679"
  },
  {
    "text": "point maybe it's going to take prometheus 3.x or so but we can do some uh stuff",
    "start": "1977679",
    "end": "1983840"
  },
  {
    "text": "already in the current major version so yeah that's the developing area",
    "start": "1983840",
    "end": "1991840"
  },
  {
    "text": "and yeah do you have any specific reasons oh no that i got that one sorry um oh yeah there was another prom qr",
    "start": "1992799",
    "end": "2001600"
  },
  {
    "text": "question and i already talked about prom qr what would you say about prometheus",
    "start": "2001600",
    "end": "2007120"
  },
  {
    "text": "operator so the prometheus operator is a tool originally by",
    "start": "2007120",
    "end": "2013039"
  },
  {
    "text": "core os now red hat now ibm to run to automatically run prometheus",
    "start": "2013039",
    "end": "2020880"
  },
  {
    "text": "on kubernetes clusters and i think it's a good thing um i would recommend i mean it's very",
    "start": "2020880",
    "end": "2027600"
  },
  {
    "text": "popular it's written by people who know both kubernetes and prometheus as",
    "start": "2027600",
    "end": "2032880"
  },
  {
    "text": "well so there's a large overlap with maintainers there and yeah but i think the majority of",
    "start": "2032880",
    "end": "2040159"
  },
  {
    "text": "people running prometheus on kubernetes who i know of",
    "start": "2040159",
    "end": "2045200"
  },
  {
    "text": "run that using the prometheus operator and it's you know it works very well it takes a lot of",
    "start": "2045200",
    "end": "2051679"
  },
  {
    "text": "details of the day-to-day operation and rollout and so on and versioning of the config file from",
    "start": "2051679",
    "end": "2058398"
  },
  {
    "text": "you as an operator and otherwise you know you know it does introduce another layer of abstraction and another",
    "start": "2058399",
    "end": "2064158"
  },
  {
    "text": "tool that you need to understand and of course if it breaks then you need to understand the operator as well but it on the other hand it really",
    "start": "2064159",
    "end": "2072158"
  },
  {
    "text": "integrates a lot of the operative knowledge you need for running prometheus on kubernetes so i like it",
    "start": "2072159",
    "end": "2080000"
  },
  {
    "text": "[Music] hi do you have a suggestion for a tool for automation or",
    "start": "2080010",
    "end": "2085919"
  },
  {
    "text": "structured queries of data in prometheus other than the web ui or grafana the",
    "start": "2085919",
    "end": "2093358"
  },
  {
    "text": "odd for automation or structured queries so i mean so so there's one thing that",
    "start": "2093359",
    "end": "2102079"
  },
  {
    "text": "would be plugging my own uh tool at the moment of my new company prom labs",
    "start": "2102079",
    "end": "2107200"
  },
  {
    "text": "it's called promlenz.comlens.com which is kind of a power tool at the",
    "start": "2107200",
    "end": "2114079"
  },
  {
    "text": "moment for helping people understand the structure of a complex pronql query",
    "start": "2114079",
    "end": "2120640"
  },
  {
    "text": "and you know you can run this you can use it the preview version on promnents.com but you can also",
    "start": "2120640",
    "end": "2127280"
  },
  {
    "text": "run it in a docker container either with a license or the free version locally against your own prometheus servers and",
    "start": "2127280",
    "end": "2133599"
  },
  {
    "text": "at least you know it helps you understand a bit more um which node sub node in a query",
    "start": "2133599",
    "end": "2139599"
  },
  {
    "text": "selects what data where exactly an error is happening and stuff like that other than that like",
    "start": "2139599",
    "end": "2145520"
  },
  {
    "text": "grafana is pretty much the standard dashboarding tool that everyone uses and",
    "start": "2145520",
    "end": "2151680"
  },
  {
    "text": "it does have besides the main dashboarding mode it has an explore mode",
    "start": "2151680",
    "end": "2157280"
  },
  {
    "text": "which already is a bit better for just exploring from ql data so you know looking at metadata and",
    "start": "2157280",
    "end": "2165200"
  },
  {
    "text": "stuff like that um okay",
    "start": "2165200",
    "end": "2170640"
  },
  {
    "text": "is it possible to send snmp trap alarms and brian sends me a chat message",
    "start": "2170640",
    "end": "2177359"
  },
  {
    "text": "saying snm pretraps no but i put links in the question for am webhooks put links in the",
    "start": "2177359",
    "end": "2185280"
  },
  {
    "text": "question ah okay brian i guess then you can publish this answer right and turn off the private mode",
    "start": "2185280",
    "end": "2195359"
  },
  {
    "text": "or i will just turn off the private mode",
    "start": "2198079",
    "end": "2201839"
  },
  {
    "text": "let's see oh okay",
    "start": "2203280",
    "end": "2207599"
  },
  {
    "text": "i turned off private on that answer hopefully it will show up now okay next question mine there's many",
    "start": "2212079",
    "end": "2218079"
  },
  {
    "text": "questions how would you deploy prometheus in production um roll it onto the kubernetes cluster",
    "start": "2218079",
    "end": "2224400"
  },
  {
    "text": "next to the application it is monitoring or on a separate vm",
    "start": "2224400",
    "end": "2230240"
  },
  {
    "text": "i mean typically if you want to run if you want to monitor stuff on a kubernetes cluster",
    "start": "2232160",
    "end": "2237760"
  },
  {
    "text": "it's better to run prometheus in the kubernetes cluster itself as well",
    "start": "2237760",
    "end": "2243040"
  },
  {
    "text": "simply because it's easier to reach all your targets in the kubernetes cluster you're part of that clusters network and",
    "start": "2243040",
    "end": "2250560"
  },
  {
    "text": "you automatically get the right service account tokens mounted into your",
    "start": "2250560",
    "end": "2256079"
  },
  {
    "text": "prometheus um so it's you know it can reach all the right things and can it can do service discovery uh",
    "start": "2256079",
    "end": "2262560"
  },
  {
    "text": "easily against the kubernetes api server of course then you might be wondering like what is what happens if that entire",
    "start": "2262560",
    "end": "2268880"
  },
  {
    "text": "cluster has an issue then you i would still want to have at least some kind of meta monitor outside",
    "start": "2268880",
    "end": "2275839"
  },
  {
    "text": "somewhere that monitors that this entire cluster isn't completely down of course but for the applications on",
    "start": "2275839",
    "end": "2282560"
  },
  {
    "text": "the cluster yeah i would i would have it i would have the prometheus in the cluster",
    "start": "2282560",
    "end": "2288390"
  },
  {
    "text": "[Music] what are the scalability solutions to",
    "start": "2288390",
    "end": "2295040"
  },
  {
    "text": "scrape from thousands of targets streaming or message queues um",
    "start": "2295040",
    "end": "2302960"
  },
  {
    "text": "well i mean a single prometheus server can get you quite far up to maybe like a",
    "start": "2303280",
    "end": "2309359"
  },
  {
    "text": "thousand or a couple of thousands of targets um if it's a very large server but",
    "start": "2309359",
    "end": "2315440"
  },
  {
    "text": "ultimately we recommend uh in the prometheus project",
    "start": "2315440",
    "end": "2320800"
  },
  {
    "text": "to start at some point functionally sharding uh either you know sharding your",
    "start": "2320800",
    "end": "2326240"
  },
  {
    "text": "prometheus installations by the type of service they're monitoring by team by organization or so",
    "start": "2326240",
    "end": "2332079"
  },
  {
    "text": "find some kind of natural subdivisions to create multiple prometheus servers that each",
    "start": "2332079",
    "end": "2338480"
  },
  {
    "text": "scrape a portion of your infrastructure there's also ways of doing kind of clue",
    "start": "2338480",
    "end": "2344160"
  },
  {
    "text": "g horizontal charting where where you have let's say 10 pro meter servers and they all have the same targets",
    "start": "2344160",
    "end": "2350800"
  },
  {
    "text": "configured maybe 10 000 but each of them only scrapes uh one-tenth of those targets",
    "start": "2350800",
    "end": "2357839"
  },
  {
    "text": "but then you need to build stuff on top of it to kind of find the right one of those to query for",
    "start": "2357839",
    "end": "2364640"
  },
  {
    "text": "a subset of the data and so on so that's not the super common use case um there's also approaches like",
    "start": "2364640",
    "end": "2372320"
  },
  {
    "text": "the grafana agent for example which is and there's similar tools by other monitoring vendors",
    "start": "2372320",
    "end": "2378720"
  },
  {
    "text": "which you put on every host and then they scrape exactly only the targets on that host and but that's like the",
    "start": "2378720",
    "end": "2386160"
  },
  {
    "text": "grafana agent for example isn't a fully fledged prometheus server it can only forward",
    "start": "2386160",
    "end": "2392400"
  },
  {
    "text": "it can only forward data that it collects via the remote write protocol to some",
    "start": "2392400",
    "end": "2397520"
  },
  {
    "text": "kind of prometheus compatible long-term storage um but yeah so you know there's there's",
    "start": "2397520",
    "end": "2404640"
  },
  {
    "text": "different ways of functioning charting and then using federation and building um there if you search for",
    "start": "2404640",
    "end": "2410480"
  },
  {
    "text": "scaling and federation and promises on google i think you'll find in some ways as well um and then if",
    "start": "2410480",
    "end": "2416319"
  },
  {
    "text": "you want to get a you like a unified query view over multiple prometheus servers",
    "start": "2416319",
    "end": "2421520"
  },
  {
    "text": "um thanos is for example a good candidate for for establishing that again",
    "start": "2421520",
    "end": "2428640"
  },
  {
    "text": "okay um what is the major difference between",
    "start": "2431760",
    "end": "2437040"
  },
  {
    "text": "using kubernetes client library for kubernetes api and prometheus",
    "start": "2437040",
    "end": "2444000"
  },
  {
    "text": "i don't understand the question exactly the kubernetes client library",
    "start": "2444400",
    "end": "2450560"
  },
  {
    "text": "for the kubernetes api i guess i mean that's just a general client library to do to interact with",
    "start": "2450560",
    "end": "2456960"
  },
  {
    "text": "kubernetes in arbitrary ways and prometheus is a monitoring system",
    "start": "2456960",
    "end": "2462000"
  },
  {
    "text": "that collects metrics on an ongoing basis from the different metrics and points",
    "start": "2462000",
    "end": "2468480"
  },
  {
    "text": "um yeah i don't i don't i'm not sure if i understand that question completely um what is the",
    "start": "2468480",
    "end": "2477200"
  },
  {
    "text": "what is the best practices to secure the scraping of prometheus endpoints",
    "start": "2477200",
    "end": "2482640"
  },
  {
    "text": "so for the longest time there hasn't been any built-in security on the serving side of the prometheus",
    "start": "2482640",
    "end": "2490160"
  },
  {
    "text": "metrics endpoints like if you have an exporter somewhere and the x the official exporters that we",
    "start": "2490160",
    "end": "2495920"
  },
  {
    "text": "offer uh they wouldn't have you know a facility to say listen on https and",
    "start": "2495920",
    "end": "2503520"
  },
  {
    "text": "with a given authentication setting and if you wanted that inside your",
    "start": "2503520",
    "end": "2508800"
  },
  {
    "text": "organization we always told people hey just put an engine x in front with your preferred tls and auth",
    "start": "2508800",
    "end": "2515119"
  },
  {
    "text": "settings and now finally we're getting to the point where in the node exporter the one that gives",
    "start": "2515119",
    "end": "2520160"
  },
  {
    "text": "you linux and unix metrics we're starting to try out integrating",
    "start": "2520160",
    "end": "2525359"
  },
  {
    "text": "that directly into the exporter because obviously a lot of people want that and it makes things a lot more convenient",
    "start": "2525359",
    "end": "2531839"
  },
  {
    "text": "so you will have in the future once that goes well in all of our",
    "start": "2531839",
    "end": "2538319"
  },
  {
    "text": "official exporters you will have built-in tls and basic",
    "start": "2538319",
    "end": "2543760"
  },
  {
    "text": "authentication settings but you know for any support any exporter out there in the world that",
    "start": "2543760",
    "end": "2549760"
  },
  {
    "text": "doesn't support that we still just say yeah secure it in any way you want",
    "start": "2549760",
    "end": "2555599"
  },
  {
    "text": "for example put an engine x in front of it and configure that the way you want and then prometheus itself on the scraping side",
    "start": "2555599",
    "end": "2562880"
  },
  {
    "text": "can it does support tls it does support various",
    "start": "2562880",
    "end": "2568720"
  },
  {
    "text": "scrape authentication options bearer tokens client certs basic auth and so on",
    "start": "2568720",
    "end": "2574000"
  },
  {
    "text": "so that site is already solved all right um can i use prometheus to scrape the",
    "start": "2574000",
    "end": "2580960"
  },
  {
    "text": "data from kafka i'm pretty sure there's a kafka exporter",
    "start": "2580960",
    "end": "2587040"
  },
  {
    "text": "yup so if you go on promises io exporters and integrations page",
    "start": "2587040",
    "end": "2592160"
  },
  {
    "text": "you can find it through the search there's a kafka exporter which you could use for that",
    "start": "2592160",
    "end": "2598800"
  },
  {
    "text": "what protocol does prometheus use normally to get the metrics is it http yes it is http",
    "start": "2599119",
    "end": "2606000"
  },
  {
    "text": "um so early in the talk i showed the payload and that is transferred",
    "start": "2606000",
    "end": "2611520"
  },
  {
    "text": "over http this simple text-based format thanks for your presentation could you",
    "start": "2611520",
    "end": "2617359"
  },
  {
    "text": "kindly explain the best practice of prometheus federations yeah so federation is a way for one",
    "start": "2617359",
    "end": "2624800"
  },
  {
    "text": "prometheus server to pull over via a normal scrape or roughly normal scrape at least",
    "start": "2624800",
    "end": "2630960"
  },
  {
    "text": "some of the collected times used data from one prometheus server into another prometa server and it's not",
    "start": "2630960",
    "end": "2637680"
  },
  {
    "text": "meant to work as a full replication mode thing where you",
    "start": "2637680",
    "end": "2642960"
  },
  {
    "text": "pull over all the data from one server into another it's rather you like",
    "start": "2642960",
    "end": "2650560"
  },
  {
    "text": "should be used to transfer only specific metrics from one server to another like",
    "start": "2650560",
    "end": "2656560"
  },
  {
    "text": "aggregations for example are very common use case so let's say you have 10 data centers and then each you have one prometheus",
    "start": "2656560",
    "end": "2663119"
  },
  {
    "text": "server monitoring only the local stuff and fitting all the 10 data centers data",
    "start": "2663119",
    "end": "2671119"
  },
  {
    "text": "wouldn't directly fit into one prometheus server so you could have a global prometheus server though that",
    "start": "2671119",
    "end": "2677760"
  },
  {
    "text": "federates only the aggregations for each of the 10 data centers into a global level",
    "start": "2677760",
    "end": "2682960"
  },
  {
    "text": "so each of the 10 per data center or per cluster prometheus service would",
    "start": "2682960",
    "end": "2688720"
  },
  {
    "text": "record aggregations over this cluster so it's fewer time series because it's not anymore for every process and so on",
    "start": "2688720",
    "end": "2697520"
  },
  {
    "text": "but really for the entire cluster some kind of sum over everything and then you could pull that into a",
    "start": "2697520",
    "end": "2703599"
  },
  {
    "text": "global level and this is also one of the ways you can scale prometheus",
    "start": "2703599",
    "end": "2708800"
  },
  {
    "text": "by building these kind of trees where you have a more global level and a more local level",
    "start": "2708800",
    "end": "2713920"
  },
  {
    "text": "and the local level has all the detail and the global level uh has the entire world view but it doesn't",
    "start": "2713920",
    "end": "2720480"
  },
  {
    "text": "have all the detail anymore so this is one one example for federation but don't use it to replicate",
    "start": "2720480",
    "end": "2727839"
  },
  {
    "text": "all of the data from one prometheus server to another because it's not built for that it's not efficient for that",
    "start": "2727839",
    "end": "2733680"
  },
  {
    "text": "you'll basically it will fail or you will kill your prometa server at least for very large prometheus",
    "start": "2733680",
    "end": "2739839"
  },
  {
    "text": "servers that have millions of series okay is it somehow possible to integrate",
    "start": "2739839",
    "end": "2744880"
  },
  {
    "text": "prometheus with i singer yes brian sent me another link search for",
    "start": "2744880",
    "end": "2752119"
  },
  {
    "text": "nrpe exporter and brian if you want you can add that again as a public answer",
    "start": "2752119",
    "end": "2758560"
  },
  {
    "text": "to that question and make the make the answer and the question public but yeah nrpe exporter for prometheus is",
    "start": "2758560",
    "end": "2766079"
  },
  {
    "text": "what you want to look for and this nrx nrpe exporter exposes",
    "start": "2766079",
    "end": "2772160"
  },
  {
    "text": "metrics on commands sent to a running nrpe daemon",
    "start": "2772160",
    "end": "2777680"
  },
  {
    "text": "okay is it somehow possible to integrate oh we had that question sorry is it",
    "start": "2778720",
    "end": "2785040"
  },
  {
    "text": "enough to work with prometheus with python background or is golang preferred for working with",
    "start": "2785040",
    "end": "2791839"
  },
  {
    "text": "prometheus itself you don't need to program at all so prometheus and all the",
    "start": "2791839",
    "end": "2797599"
  },
  {
    "text": "most of the official prometheus components are written in go but if you just want to monitor things",
    "start": "2797599",
    "end": "2804000"
  },
  {
    "text": "with it you don't need to be able to code at all there's a lot of existing",
    "start": "2804000",
    "end": "2809040"
  },
  {
    "text": "exporters and if you want to build your own exporter you can also use any programming language that you prefer so",
    "start": "2809040",
    "end": "2815599"
  },
  {
    "text": "that doesn't really matter of course if you want to start developing on prometheus itself then at",
    "start": "2815599",
    "end": "2820960"
  },
  {
    "text": "some point you'll probably need to learn go and oh yeah",
    "start": "2820960",
    "end": "2826560"
  },
  {
    "text": "also there's this client libraries official client libraries for tracking metrics and then exposing them",
    "start": "2826560",
    "end": "2832560"
  },
  {
    "text": "in for multiple different languages so for example you know python there's one",
    "start": "2832560",
    "end": "2839839"
  },
  {
    "text": "and there's java and there's go and so on does prometheus work out of the box with",
    "start": "2839839",
    "end": "2845920"
  },
  {
    "text": "open telemetry so open telemetry is another effort to create client libraries",
    "start": "2845920",
    "end": "2851520"
  },
  {
    "text": "uh for tracking metrics logs traces and so on and i only know that richard hartman",
    "start": "2851520",
    "end": "2858480"
  },
  {
    "text": "one of the prometheus people from our team has been communicating with them and working with",
    "start": "2858480",
    "end": "2864240"
  },
  {
    "text": "them and the prometheus or well it's it's the prometheus format is evolving into a standard called",
    "start": "2864240",
    "end": "2871200"
  },
  {
    "text": "open metrics not to be confused with open telemetry but open metrics is basically the",
    "start": "2871200",
    "end": "2878880"
  },
  {
    "text": "prometheus transfer format of the future and it will be one of the supported output",
    "start": "2878880",
    "end": "2886160"
  },
  {
    "text": "formats for open telemetry so yes they will work together",
    "start": "2886160",
    "end": "2891760"
  },
  {
    "text": "does it make sense to collect metrics directly via kubernetes api what are the drawbacks",
    "start": "2893520",
    "end": "2901839"
  },
  {
    "text": "so again i'm not sure exactly what it means to collect metrics directly via the kubernetes api the kubernetes api",
    "start": "2903839",
    "end": "2910160"
  },
  {
    "text": "does expose certain information that you might want to track",
    "start": "2910160",
    "end": "2915359"
  },
  {
    "text": "as metrics and there are already exporters that",
    "start": "2915359",
    "end": "2921599"
  },
  {
    "text": "translate kubernetes api calls directly into prometheus metrics for example if you search for cube",
    "start": "2921599",
    "end": "2927520"
  },
  {
    "text": "state metrics this is one of these exporters that does that it",
    "start": "2927520",
    "end": "2932559"
  },
  {
    "text": "talks to the kubernetes api server and then tells you like how many replicas of a given deployment there currently are",
    "start": "2932559",
    "end": "2939200"
  },
  {
    "text": "how many there should be and so on and translates that to prometheus metrics",
    "start": "2939200",
    "end": "2945200"
  },
  {
    "text": "um and yeah that's that's one example of that so that totally works um four",
    "start": "2945200",
    "end": "2952880"
  },
  {
    "text": "things that the kubernetes components don't already just expose as an existing prometheus",
    "start": "2952880",
    "end": "2959680"
  },
  {
    "text": "endpoint you know if there's already an existing prometheus endpoint um then that is usually easier to scrape directly",
    "start": "2959680",
    "end": "2968800"
  },
  {
    "text": "all right that is the last question and i will go over to slack and answer some more questions over there thank you",
    "start": "2969280",
    "end": "2978559"
  }
]