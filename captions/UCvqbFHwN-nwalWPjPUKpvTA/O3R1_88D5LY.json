[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "hey everyone thanks for joining us um for our coupon session if we're marketers and if we can learn",
    "start": "560",
    "end": "5920"
  },
  {
    "text": "distributed systems so can you my name is betty gennad i am senior director of multi-cloud solutions at vmware and i'm",
    "start": "5920",
    "end": "12160"
  },
  {
    "text": "here with my buddy paul burt hi i work at hashicorp and i'm a senior pmm there",
    "start": "12160",
    "end": "17359"
  },
  {
    "text": "working on open source stuff awesome so we are super excited to talk to you about something that's near and",
    "start": "17359",
    "end": "22960"
  },
  {
    "text": "dear to our hearts um first off the slides and the reading list we've got an extensive reading list",
    "start": "22960",
    "end": "28960"
  },
  {
    "text": "at the end of this can be found at this link and we'll make these slides available from to cncf so you all can",
    "start": "28960",
    "end": "34960"
  },
  {
    "text": "download it so first let's start with why",
    "start": "34960",
    "end": "40800"
  },
  {
    "text": "we're all here because we're interested in kubernetes but have we thought about why why do we want why do we want",
    "start": "40800",
    "end": "45920"
  },
  {
    "text": "kubernetes because everyone else does it's there's fomo everyone's using it um",
    "start": "45920",
    "end": "50960"
  },
  {
    "text": "but we really wanted to start with the question of why why do we want kubernetes um we really",
    "start": "50960",
    "end": "56239"
  },
  {
    "text": "are thinking why it's it's that why behind why we want distributed systems and really distributed systems are all",
    "start": "56239",
    "end": "63120"
  },
  {
    "start": "62000",
    "end": "62000"
  },
  {
    "text": "about failure so fundamentally accepting that systems will fail your applications",
    "start": "63120",
    "end": "68720"
  },
  {
    "text": "will fail your server will fail your network will fail anything can fail at any given time",
    "start": "68720",
    "end": "74240"
  },
  {
    "text": "and it's not that it there's it's someone's at fault for that but it's a specific mindset that applies to your",
    "start": "74240",
    "end": "81200"
  },
  {
    "text": "design so uh if you accept that failure is inevitable in any layer of the stack",
    "start": "81200",
    "end": "86720"
  },
  {
    "text": "then what you do is you will design your systems to fundamentally handle that failure and handling that means two things not",
    "start": "86720",
    "end": "94079"
  },
  {
    "text": "only building your system so that it is more resistant to failure so that you can prevent it but also knowing that",
    "start": "94079",
    "end": "100320"
  },
  {
    "text": "planning for when failures happen across the environment how to handle that gracefully so what will you optimize for",
    "start": "100320",
    "end": "107439"
  },
  {
    "text": "in the event of a failure so failure is inevitable and we know this",
    "start": "107439",
    "end": "113119"
  },
  {
    "text": "because we used to live in a world where we deployed thing a single app to a single server and we're like this is",
    "start": "113119",
    "end": "118399"
  },
  {
    "text": "great now it's running but we all knew that if that thing went down the whole thing failed right you can't get to the",
    "start": "118399",
    "end": "123600"
  },
  {
    "text": "app anymore so what do we did what do we do we said we need more servers so great we went from one to three to five or",
    "start": "123600",
    "end": "130399"
  },
  {
    "text": "whatever and now we have a cluster of servers and so we have some fault tolerance built in um so that if one of them fails we can",
    "start": "130399",
    "end": "137520"
  },
  {
    "text": "route the traffic to another one we can write some rules throughout the traffic to another machine",
    "start": "137520",
    "end": "142560"
  },
  {
    "text": "and this is not a new problem it's not something that started you know just recently with uh you know in the recent",
    "start": "142560",
    "end": "147760"
  },
  {
    "start": "143000",
    "end": "143000"
  },
  {
    "text": "years because of kubernetes it's actually a problem that we've been trying to solve for a very long time started way back in 1969 with arpanet",
    "start": "147760",
    "end": "156160"
  },
  {
    "text": "this was a military project military and academic project thinking about um can",
    "start": "156160",
    "end": "161360"
  },
  {
    "text": "we build a decentralized system so that if a headquarters location was",
    "start": "161360",
    "end": "166400"
  },
  {
    "text": "suffered a catastrophic failure for whatever reason can the systems and command center still be online because",
    "start": "166400",
    "end": "172800"
  },
  {
    "text": "we've distributed that information out so this is the first uh first sketch of the arpanet when it was launched in 1969",
    "start": "172800",
    "end": "180720"
  },
  {
    "text": "you can see that there are four locations and these were distributed across um different states",
    "start": "180720",
    "end": "186480"
  },
  {
    "text": "different cities and having those um environments connected to each other through dedicated phone lines",
    "start": "186480",
    "end": "192879"
  },
  {
    "text": "the first ever one of the earliest uh systems whiteboards",
    "start": "192879",
    "end": "199319"
  },
  {
    "start": "200000",
    "end": "200000"
  },
  {
    "text": "and what happens is when you start to distribute systems when you start to scale out um even just in the cluster",
    "start": "200000",
    "end": "206879"
  },
  {
    "text": "and then you start to think about distributing those systems across different geographic locations",
    "start": "206879",
    "end": "212400"
  },
  {
    "text": "you start asking you start having to answer a whole lot of new questions right um as you distribute systems you",
    "start": "212400",
    "end": "218720"
  },
  {
    "text": "need to understand how will these systems know what is the correct plan what was",
    "start": "218720",
    "end": "223840"
  },
  {
    "text": "the idea intent for that system how should it behave what should be running",
    "start": "223840",
    "end": "229120"
  },
  {
    "text": "and then how will those systems talk to each other so that they know what's going on you",
    "start": "229120",
    "end": "234239"
  },
  {
    "text": "know is everything behaving the way it should and when it finds out that something isn't",
    "start": "234239",
    "end": "239439"
  },
  {
    "text": "what is it what are the instructions what are its what is it supposed to do to get it back to the desired state",
    "start": "239439",
    "end": "245200"
  },
  {
    "text": "uh a simple example here is for those of you who've ever played the game of telephone you know as a child you've got",
    "start": "245200",
    "end": "250239"
  },
  {
    "text": "like you and your ten friends lined up in a row the first person says whispers a little message into the second",
    "start": "250239",
    "end": "255599"
  },
  {
    "text": "person's ear and you know by the time it gets the other end it is nothing like what you first said",
    "start": "255599",
    "end": "261199"
  },
  {
    "text": "so distributed systems in many ways trying to solve that problem but that's not necessarily an easy",
    "start": "261199",
    "end": "267600"
  },
  {
    "text": "problem to solve so distributed systems are hard and paul can you go into like why it's so hard",
    "start": "267600",
    "end": "274560"
  },
  {
    "text": "definitely thanks for asking uh so we'll talk about some theory up front uh cap theorem is the big one that",
    "start": "274560",
    "end": "280800"
  },
  {
    "text": "you need to know about it's classic choose two of three and in this case we're choosing between consistency",
    "start": "280800",
    "end": "286639"
  },
  {
    "text": "availability and tolerance of network partitions uh that last one is something turns out is really hard to avoid in the",
    "start": "286639",
    "end": "294080"
  },
  {
    "text": "modern internet so essentially we're choosing between consistency and availability or a cp system or an ap",
    "start": "294080",
    "end": "300400"
  },
  {
    "text": "system we'll take a look at what consistency and availability are uh in a second here with some examples",
    "start": "300400",
    "end": "306240"
  },
  {
    "start": "304000",
    "end": "304000"
  },
  {
    "text": "suffice to say most modern systems and what we'll really be looking at in detail with raft uh use a leader and",
    "start": "306240",
    "end": "313520"
  },
  {
    "text": "follower topology and then they have to find consensus or figure out availability in the face of a failure",
    "start": "313520",
    "end": "320720"
  },
  {
    "text": "based on that topology uh they also have mechanisms baked in uh to achieve quorum",
    "start": "320720",
    "end": "326080"
  },
  {
    "text": "in case maybe a leader fails uh if you can still communicate with the majority of the cluster in this case two out of",
    "start": "326080",
    "end": "332000"
  },
  {
    "text": "three nodes um you can still have consensus and return responses so we'll",
    "start": "332000",
    "end": "337039"
  },
  {
    "text": "look at elections and how all that stuff works in a bit too so first up is availability availability",
    "start": "337039",
    "end": "342880"
  },
  {
    "text": "means we always return a response even if there's a failure and in this case that means that the",
    "start": "342880",
    "end": "348560"
  },
  {
    "text": "data might be slightly out of date or it might be out of sync that server that got disconnected can still uh return",
    "start": "348560",
    "end": "355039"
  },
  {
    "text": "responses if it needs to uh just means uh our data is a little bit stale and",
    "start": "355039",
    "end": "360160"
  },
  {
    "text": "this isn't a big deal for things like likes or anything along those lines so it's a great way to go if you need an ap system",
    "start": "360160",
    "end": "366960"
  },
  {
    "text": "think about that for social media that sort of stuff on the flip side if we're dealing with money or shopping parts we",
    "start": "366960",
    "end": "373360"
  },
  {
    "text": "kind of have to have the correct data so what we really want is a cp system in that case",
    "start": "373360",
    "end": "379360"
  },
  {
    "text": "and kubernetes uh as we'll learn is based on raft which generally gives you a cp system so we",
    "start": "379360",
    "end": "385680"
  },
  {
    "text": "want consistency between all of the nodes to ensure that we're returning the correct data",
    "start": "385680",
    "end": "391680"
  },
  {
    "start": "390000",
    "end": "390000"
  },
  {
    "text": "um eric brewer is the person who kind of came up with cap theorem originally and he's noted uh recently in a follow-up to",
    "start": "391680",
    "end": "398400"
  },
  {
    "text": "that that uh he thinks we can do more interesting things with consistency and availability using them in uh sort of",
    "start": "398400",
    "end": "404880"
  },
  {
    "text": "contextual moments to provide a faster or a better service because trying to achieve",
    "start": "404880",
    "end": "411199"
  },
  {
    "text": "consistency can slow us down um and there are some really interesting theorems and protocols that follow that",
    "start": "411199",
    "end": "417360"
  },
  {
    "text": "like tape here and pack help uh but we'll leave those as things in the notes for you to discover sort of an exercise",
    "start": "417360",
    "end": "424160"
  },
  {
    "text": "best left to the reader uh and we'll just talk about cap theorem as it relates to raft which is what most",
    "start": "424160",
    "end": "429840"
  },
  {
    "text": "modern distributed systems are based on uh which we'll learn but before we dive into that let's talk about what",
    "start": "429840",
    "end": "435520"
  },
  {
    "text": "consistency is specifically because database consistency is a bit different than distributed systems consistency so",
    "start": "435520",
    "end": "442160"
  },
  {
    "text": "with database consistency what you're really looking forward to is all the rules of the database are followed so",
    "start": "442160",
    "end": "448240"
  },
  {
    "text": "the schema the constraints that you've placed on stuff all of that gets followed when a transaction gets",
    "start": "448240",
    "end": "453440"
  },
  {
    "text": "committed whereas distributed systems consistency what you're looking for is a majority of the nodes in your cluster",
    "start": "453440",
    "end": "461039"
  },
  {
    "text": "are in agreement when it comes to returning a response so you're checking that there's agreement uh on the data",
    "start": "461039",
    "end": "467520"
  },
  {
    "text": "that you're returning to make sure that it's correct another issue is availability uh high availability is slightly different than",
    "start": "467520",
    "end": "474639"
  },
  {
    "text": "some of the other availability that's discussed so there's a great ibm paper that talks about high availability in the abstract",
    "start": "474639",
    "end": "480960"
  },
  {
    "text": "and high availability for some people might be just having a good battery system connected and a regular backup",
    "start": "480960",
    "end": "488400"
  },
  {
    "text": "schedule whereas high availability can also extend at a larger scale to using",
    "start": "488400",
    "end": "493680"
  },
  {
    "text": "multiple clouds or multiple regions the scale that you want to go to with high availability kind of depends on you",
    "start": "493680",
    "end": "501039"
  },
  {
    "text": "and distributed systems availability means when there is a partition or an issue with the system um you're still",
    "start": "501039",
    "end": "507680"
  },
  {
    "text": "going to give a response even though your data might be slightly stale or slightly out of date",
    "start": "507680",
    "end": "513919"
  },
  {
    "text": "so uh one thing to note about cap theorem is it's sort of a boundary it sort of makes us take the problem",
    "start": "513919",
    "end": "521200"
  },
  {
    "text": "seriously that we can't just do everything which was an issue when we first started designing distributed systems",
    "start": "521200",
    "end": "528080"
  },
  {
    "text": "but it doesn't necessarily help us build distributed systems uh thankfully there are things that help us build",
    "start": "528080",
    "end": "534000"
  },
  {
    "text": "distributed systems so yeah do you want to talk about raft betty well actually you mentioned a lot about",
    "start": "534000",
    "end": "539920"
  },
  {
    "text": "uh braft and the big question is like wtf is it you know yeah it seems like a",
    "start": "539920",
    "end": "544959"
  },
  {
    "text": "lot of systems are based on it um and so you know i know you did a lot of preparation on this so i will let you uh",
    "start": "544959",
    "end": "551360"
  },
  {
    "text": "i will tee you up for that all right thank you um so",
    "start": "551360",
    "end": "556880"
  },
  {
    "start": "556000",
    "end": "556000"
  },
  {
    "text": "raft uh whoops i think let's see if we can go back a slide",
    "start": "556880",
    "end": "563839"
  },
  {
    "text": "yeah so ref's goal is to be a more understandable paxos uh and that's just because what is paxos",
    "start": "563920",
    "end": "570959"
  },
  {
    "text": "that's a good question we should cover that uh so paxos is a formal system that",
    "start": "570959",
    "end": "576640"
  },
  {
    "text": "was built to help design distributed systems so it's been proven with a language like tla plus um that it's a",
    "start": "576640",
    "end": "584640"
  },
  {
    "text": "correct system and the issue with paxos is it's really hard to understand so uh in getting his",
    "start": "584640",
    "end": "592640"
  },
  {
    "text": "paper reviewed diego angara the creator of raft um you know got comments about",
    "start": "592640",
    "end": "598160"
  },
  {
    "text": "how just ridiculously hard paxos was so in addition to correctness and performance one of the",
    "start": "598160",
    "end": "604880"
  },
  {
    "text": "goals of raft is to be a subset of axos that is also understandable",
    "start": "604880",
    "end": "610160"
  },
  {
    "text": "so we'll cover that in a second here um one thing to note with all this is that",
    "start": "610160",
    "end": "616000"
  },
  {
    "start": "611000",
    "end": "611000"
  },
  {
    "text": "as our size of our cluster grows when we're building a cluster that's based on raft um it gets a little bit slower",
    "start": "616000",
    "end": "623040"
  },
  {
    "text": "because the networking gets more complicated we have to talk to each of the nodes and try and get a majority",
    "start": "623040",
    "end": "628880"
  },
  {
    "text": "rule on things before we deliver a response from the leader that happens for reads rights election results",
    "start": "628880",
    "end": "635440"
  },
  {
    "text": "everything is sort of a majority rule",
    "start": "635440",
    "end": "639360"
  },
  {
    "start": "640000",
    "end": "640000"
  },
  {
    "text": "and uh as an example let's talk about how rights happen um kind of work out how reads happen as a",
    "start": "640640",
    "end": "646959"
  },
  {
    "text": "result of this but uh the leader will get a write request it will stage the write in the replicated log the",
    "start": "646959",
    "end": "652640"
  },
  {
    "text": "replicated log is sort of the shared data state um that's linearizable so we",
    "start": "652640",
    "end": "657760"
  },
  {
    "text": "can replicate it deterministically the leader will then send a message out saying hey uh majority of the systems",
    "start": "657760",
    "end": "664240"
  },
  {
    "start": "660000",
    "end": "660000"
  },
  {
    "text": "i'd like you to stage this on your log and they'll give the leader response once it hears back from a majority of",
    "start": "664240",
    "end": "669760"
  },
  {
    "text": "the systems uh it will then say okay great everybody go ahead and stage that commit uh or commit that uh and then",
    "start": "669760",
    "end": "677279"
  },
  {
    "start": "672000",
    "end": "672000"
  },
  {
    "text": "that is committed to the log and that is the state of truth at this point when a read request comes in after this",
    "start": "677279",
    "end": "683839"
  },
  {
    "text": "the leader just has to check with the majority to make sure that it is indeed agreeing with that majority and as part",
    "start": "683839",
    "end": "690000"
  },
  {
    "start": "687000",
    "end": "687000"
  },
  {
    "text": "of this uh the heartbeat message goes out to each of the followers when it's taking some of these actions like an",
    "start": "690000",
    "end": "695920"
  },
  {
    "text": "append entry or it'll just go out naturally as a heartbeat message itself",
    "start": "695920",
    "end": "701120"
  },
  {
    "text": "uh and the heartbeat message basically tells the system or the followers in the system that they are still connected to",
    "start": "701120",
    "end": "706320"
  },
  {
    "text": "the leader and everything is good uh if they stop receiving the heartbeat then they know something has happened to the",
    "start": "706320",
    "end": "711519"
  },
  {
    "start": "709000",
    "end": "709000"
  },
  {
    "text": "leader either a network partition or the leader has crashed and in that case uh on you know 100",
    "start": "711519",
    "end": "717279"
  },
  {
    "text": "millisecond or 300 milliseconds sort of random interval uh the candidate uh or one of the followers would promote",
    "start": "717279",
    "end": "723680"
  },
  {
    "text": "itself to a candidate and then vote for itself and then ask other followers to vote for it as well",
    "start": "723680",
    "end": "729839"
  },
  {
    "text": "other followers may also promote themselves candidacy uh and vote for themselves but each member of the system",
    "start": "729839",
    "end": "736959"
  },
  {
    "text": "is only able to vote once so eventually uh one of these systems will",
    "start": "736959",
    "end": "742800"
  },
  {
    "text": "be validated as getting a majority of the votes and be elected to a leader and each time this occurs a term number is",
    "start": "742800",
    "end": "750160"
  },
  {
    "text": "incremented and that term sort of helps the system recover from a failure or know which log is the most up-to-date uh",
    "start": "750160",
    "end": "757839"
  },
  {
    "text": "in case the cluster is restored or networking sort of comes back online uh the creator is very democratic it's a",
    "start": "757839",
    "end": "764720"
  },
  {
    "start": "762000",
    "end": "762000"
  },
  {
    "text": "very democratic system it is for these servers definitely and it's kind of like a it's it kind of",
    "start": "764720",
    "end": "771200"
  },
  {
    "text": "flips that game of telephone on its head where it's always one person sending that message right sure yeah and to your",
    "start": "771200",
    "end": "776480"
  },
  {
    "text": "point earlier about how do we communicate or how do we know what's correct a lot of it is just um talking",
    "start": "776480",
    "end": "782560"
  },
  {
    "text": "to the other people in the chain and making sure that they agree with you rather than just passing the message",
    "start": "782560",
    "end": "788480"
  },
  {
    "text": "along without doing that sort of checking um so this gets very complicated uh relatively quickly",
    "start": "788480",
    "end": "795279"
  },
  {
    "text": "and the creator raft has some great talks out there there are a lot of other talks about raft but we have links to",
    "start": "795279",
    "end": "800800"
  },
  {
    "text": "this um with more detail on the actual specification that check out",
    "start": "800800",
    "end": "806880"
  },
  {
    "text": "so um paul you know this this sounds amazing because you know what we're trying to do like we say we're trying to",
    "start": "806880",
    "end": "812320"
  },
  {
    "text": "solve for uh you know designing for failure right and with um and this is important for bigger and bigger systems",
    "start": "812320",
    "end": "818240"
  },
  {
    "text": "right because you can't manually touch everything you know you'd probably be getting as an operator like a gazillion or pings",
    "start": "818240",
    "end": "824399"
  },
  {
    "text": "a day and so a lot of this is around having the system do that checking autonomously",
    "start": "824399",
    "end": "830160"
  },
  {
    "text": "and adjusting for these things at a time but sometimes with all that kind of automation built in it can be",
    "start": "830160",
    "end": "836800"
  },
  {
    "text": "problematic if something is off so can you i know you've got a great um",
    "start": "836800",
    "end": "843279"
  },
  {
    "text": "example here for us to talk through on like you know when you can have like a real world cascading failure because",
    "start": "843279",
    "end": "849839"
  },
  {
    "text": "yeah because of all the automation let's take a look so target uh thankfully shared an example thank you to all of",
    "start": "849839",
    "end": "855839"
  },
  {
    "start": "851000",
    "end": "851000"
  },
  {
    "text": "the companies that share their failure stories that's just how we learn this place is so complex um they had a",
    "start": "855839",
    "end": "862240"
  },
  {
    "text": "upgrade to their kafka cluster which did messaging and collected logs for all the various systems they had sort of a",
    "start": "862240",
    "end": "868240"
  },
  {
    "text": "heterogeneous network and that caused intermittent network issues where the",
    "start": "868240",
    "end": "873279"
  },
  {
    "text": "kafka system sort of slowed down during that upgrade as a result uh all of the kubernetes",
    "start": "873279",
    "end": "878720"
  },
  {
    "text": "systems that had logging sidecars determined that they were having issues and their all of",
    "start": "878720",
    "end": "885839"
  },
  {
    "text": "their pods and everything needed to be rescheduled because things became unhealthy and it triggered a thundering",
    "start": "885839",
    "end": "891440"
  },
  {
    "text": "herd uh so yeah spinning up at the same time and just hitting the system right yeah",
    "start": "891440",
    "end": "898079"
  },
  {
    "text": "exactly that's that's the gist of a thundering herd so it's uh an event comes in everything wakes up at once and",
    "start": "898079",
    "end": "904959"
  },
  {
    "text": "because it's all automated um it's all pushing forward at once it's trying to do good things but because it's all",
    "start": "904959",
    "end": "911040"
  },
  {
    "text": "synchronized at the exact same time uh it really hits the system like a tsunami wave in a way",
    "start": "911040",
    "end": "918160"
  },
  {
    "text": "everything just starts toppling down like don domino's so in this case um i think target said over 41 000 nodes",
    "start": "918160",
    "end": "925360"
  },
  {
    "text": "which spun up really quickly and added to their service discovery uh before everything sort of calms down",
    "start": "925360",
    "end": "932000"
  },
  {
    "text": "so this can get really big and really nasty very quickly it's just one of the fun things you sort of get to deal with",
    "start": "932000",
    "end": "938399"
  },
  {
    "text": "when you're working with distributed systems so uh that's sort of the theory uh do",
    "start": "938399",
    "end": "944160"
  },
  {
    "text": "you want to talk about some modern implementations betty yeah so in this um we'll go through kind",
    "start": "944160",
    "end": "949440"
  },
  {
    "text": "of four different examples of distributed systems and how they approach things differently and i think",
    "start": "949440",
    "end": "954639"
  },
  {
    "text": "one thing that's really important for us as a community to understand is that we hear a lot of x versus why which is",
    "start": "954639",
    "end": "961600"
  },
  {
    "text": "better and really we are only here at this point because of some of the work that has happened over the decades and",
    "start": "961600",
    "end": "967920"
  },
  {
    "text": "so um it's not really an x versus why um there are generational aspects related to the",
    "start": "967920",
    "end": "973440"
  },
  {
    "text": "technologies for distributed systems as well as in many cases different ones are",
    "start": "973440",
    "end": "978959"
  },
  {
    "text": "better for better for different types of workloads or personas so this is an interesting area to dive",
    "start": "978959",
    "end": "986079"
  },
  {
    "text": "into so you know back let's go back to our timeline a little bit we had arpanet we're talking 1969",
    "start": "986079",
    "end": "993440"
  },
  {
    "start": "988000",
    "end": "988000"
  },
  {
    "text": "way back when the next kind of sets of innovations that impact what we're doing with",
    "start": "993440",
    "end": "998800"
  },
  {
    "text": "distributed systems are in the 80s and 90s first is the x86 uh cpu standards and that actually",
    "start": "998800",
    "end": "1006399"
  },
  {
    "text": "brings forward this era of more commodity-based hardware which then leads to mass virtualization",
    "start": "1006399",
    "end": "1013279"
  },
  {
    "text": "so introducing um you know a broadly accessible um abstraction layer from",
    "start": "1013279",
    "end": "1019600"
  },
  {
    "text": "from physical compute with modern virtualization in the late 90s and then",
    "start": "1019600",
    "end": "1024880"
  },
  {
    "text": "arpanet coincidentally ended in 1989 and that is also the same time the first isps offered internet access so make up",
    "start": "1024880",
    "end": "1032400"
  },
  {
    "text": "that what you will but those two things are pretty foundational to the next era which is the 2000s and",
    "start": "1032400",
    "end": "1039360"
  },
  {
    "text": "what's interesting here is we have had more innovation within the distributed system space in the last 20 years than",
    "start": "1039360",
    "end": "1045678"
  },
  {
    "text": "in the previous like you know decades and that's really a confluence of a number of things um we have",
    "start": "1045679",
    "end": "1053200"
  },
  {
    "text": "you know we have like mass adoption of the internet since the late 80s um with that came the birth of web",
    "start": "1053200",
    "end": "1059760"
  },
  {
    "start": "1054000",
    "end": "1054000"
  },
  {
    "text": "scale companies so companies that fundamentally delivered experience over the internet right so uh web apps um you",
    "start": "1059760",
    "end": "1066559"
  },
  {
    "text": "see like the the likes of google facebook twitter and netflix were all kind of founded in the late 90s to the",
    "start": "1066559",
    "end": "1072640"
  },
  {
    "text": "2000s and so that's only possible with the internet and broad-based connectivity for",
    "start": "1072640",
    "end": "1078160"
  },
  {
    "text": "everyone so you had that infrastructure that global infrastructure plumbing there um the availability of commodity",
    "start": "1078160",
    "end": "1084640"
  },
  {
    "text": "hardware and concepts like virtualization so people were able to buy lots of",
    "start": "1084640",
    "end": "1090000"
  },
  {
    "text": "lots of servers running big data centers and from that they needed to solve problems of how do i make um how do i",
    "start": "1090000",
    "end": "1096320"
  },
  {
    "text": "you know make better use of my individual hardware resources cloud computing",
    "start": "1096320",
    "end": "1102400"
  },
  {
    "text": "once people started to move to like using things in the cloud that then further extracted this concept",
    "start": "1102400",
    "end": "1107760"
  },
  {
    "text": "and then the last bits are containers and open source there is a clear line in orchestration systems in a pre and post",
    "start": "1107760",
    "end": "1114000"
  },
  {
    "text": "container era and because what containers did is actually kind of change it from being",
    "start": "1114000",
    "end": "1120080"
  },
  {
    "text": "just a hardware level thing that you needed to fix and a data center a data center kind of pooling to now",
    "start": "1120080",
    "end": "1126080"
  },
  {
    "text": "like i'm doing some stuff in cloud i'm doing some stuff on prem and also now i've blown up my construct so i now have diff",
    "start": "1126080",
    "end": "1133440"
  },
  {
    "text": "i've made my distributed systems were distributing the systems itself so we're distributing the little application",
    "start": "1133440",
    "end": "1138960"
  },
  {
    "text": "components across them so we've added more layers we've diced up uh the stack even more",
    "start": "1138960",
    "end": "1146240"
  },
  {
    "text": "so let's first start with mesos meso started out in 2009",
    "start": "1147600",
    "end": "1153200"
  },
  {
    "text": "out of berkeley and really what they were looking at is how do we turn a bunch of data centers data center",
    "start": "1153200",
    "end": "1160000"
  },
  {
    "text": "orchestration so how do i cluster a bunch of systems in the data center to make it look like one giant",
    "start": "1160000",
    "end": "1165840"
  },
  {
    "text": "effectively one giant server like i could have like a 10 000 servers underneath but it looks like one server",
    "start": "1165840",
    "end": "1171280"
  },
  {
    "text": "so then i can't um schedule a workload on top of that and be able to pull you",
    "start": "1171280",
    "end": "1176960"
  },
  {
    "text": "know just pull from a pool of resources so that workload may be using uh compute and memory from you know three or four",
    "start": "1176960",
    "end": "1183760"
  },
  {
    "text": "machines right so um it's almost like the reverse of virtualization one of their premises was to kind of",
    "start": "1183760",
    "end": "1190320"
  },
  {
    "text": "eliminate the concept of vms and instead just look at it as isolation of resources that can be assigned to a",
    "start": "1190320",
    "end": "1196640"
  },
  {
    "text": "workload so what are mesos strengths with scale um you know it was run in production at",
    "start": "1196640",
    "end": "1203520"
  },
  {
    "start": "1198000",
    "end": "1198000"
  },
  {
    "text": "twitter um for a long time it is can scale to like tens of thousands of machines to then um present itself like",
    "start": "1203520",
    "end": "1210720"
  },
  {
    "text": "as one machine for the operator um and another strength that was brought up was modularity so",
    "start": "1210720",
    "end": "1217200"
  },
  {
    "text": "that things like of all these things were pluggable um and things like frameworks",
    "start": "1217200",
    "end": "1222400"
  },
  {
    "text": "and such could be um uh developed independently of the core architecture and it was very popular for",
    "start": "1222400",
    "end": "1229679"
  },
  {
    "text": "very like for workloads like kafka hadoop those ones listed below which is also which is specifically like what uh",
    "start": "1229679",
    "end": "1236880"
  },
  {
    "text": "twitter used um this for and there's lots of blog posts and such on how they use that and",
    "start": "1236880",
    "end": "1243120"
  },
  {
    "text": "for all their data processing because they're so memory intensive um an interesting thing about mesos is",
    "start": "1243120",
    "end": "1248799"
  },
  {
    "text": "that um just this year earlier this year it almost went to the attic which is kind of apache's way of um ending a life",
    "start": "1248799",
    "end": "1255520"
  },
  {
    "text": "cycle on a product but it was um it didn't make it and so it's still there it is still running in",
    "start": "1255520",
    "end": "1261679"
  },
  {
    "text": "production at a lot of places but it's not something that we see a lot of today um because some of the shifts",
    "start": "1261679",
    "end": "1270000"
  },
  {
    "text": "over to kubernetes however still very popular for certain workloads",
    "start": "1270000",
    "end": "1276520"
  },
  {
    "text": "so how are apps represented um in mesos um apps are represented as frameworks a",
    "start": "1276799",
    "end": "1282320"
  },
  {
    "text": "framework is something that people can develop um it can be schedulers it can be for certain types of workloads etc it",
    "start": "1282320",
    "end": "1290240"
  },
  {
    "text": "actually includes two bits one is a scheduler and this is really what talks to the uh the master to understand how",
    "start": "1290240",
    "end": "1296559"
  },
  {
    "text": "much resource needs to be applied to this thing um and then it also includes an executor which is really the task itself",
    "start": "1296559",
    "end": "1303039"
  },
  {
    "text": "and later on so meso started before containers and later on added support so",
    "start": "1303039",
    "end": "1308159"
  },
  {
    "text": "the task so the the tasks itself can be run in containers now um and with the event of kubernetes and",
    "start": "1308159",
    "end": "1314880"
  },
  {
    "text": "the concept of pods they've also added support for something called task groups so that you can have a collection of",
    "start": "1314880",
    "end": "1320799"
  },
  {
    "text": "containers as part of this",
    "start": "1320799",
    "end": "1324639"
  },
  {
    "text": "and how do the apps communicate um what's interesting here with nasa's is they drew a clear line and what that um",
    "start": "1326159",
    "end": "1332559"
  },
  {
    "text": "while data center while networking is very important in the data center a large part of that is out of the scope",
    "start": "1332559",
    "end": "1338400"
  },
  {
    "text": "of what mesos will actually orchestrate and so instead what they've done is made the networking pluggable and integrate",
    "start": "1338400",
    "end": "1344559"
  },
  {
    "text": "two existing network solutions so as an example meso supports two container runtimes the mesos container",
    "start": "1344559",
    "end": "1351200"
  },
  {
    "text": "and docker containers and so with that they actually support the cni spec as well as a docker container",
    "start": "1351200",
    "end": "1358080"
  },
  {
    "text": "networking spec and so with that they allow to create um you know an enable ip",
    "start": "1358080",
    "end": "1364000"
  },
  {
    "text": "for containers you can create a network and then attach the containers to them",
    "start": "1364000",
    "end": "1369039"
  },
  {
    "text": "and swarm so next we'll talk about spora and full disclosure i worked at docker for about five years so um was there for",
    "start": "1370320",
    "end": "1377200"
  },
  {
    "text": "the history of swarm and in fact i joined the company right after the first",
    "start": "1377200",
    "end": "1382400"
  },
  {
    "text": "first generation of swarm was introduced in 2014.",
    "start": "1382400",
    "end": "1387440"
  },
  {
    "start": "1387000",
    "end": "1387000"
  },
  {
    "text": "and so like what is uh what is swarm it's the way to cluster docker engines and swarm actually had two lights um",
    "start": "1387520",
    "end": "1394720"
  },
  {
    "text": "first we now the original swarm is now called classic swarm and then around 2016 there was something introduced",
    "start": "1394720",
    "end": "1400400"
  },
  {
    "text": "called swarm mode in the first generation of swarm it was uh yeah simple clustering um networking had some",
    "start": "1400400",
    "end": "1407039"
  },
  {
    "text": "ability to like uh link containers to each other it was directly done in compose files which is",
    "start": "1407039",
    "end": "1413760"
  },
  {
    "text": "the which is how you um uh write an application um and swarm's focus was really around",
    "start": "1413760",
    "end": "1419440"
  },
  {
    "text": "um the ease of use ease of use and simplicity not from the perspective of like lacking uh you know we're not gonna",
    "start": "1419440",
    "end": "1425440"
  },
  {
    "text": "build up on we weren't gonna build a bunch of features but from the perspective of like building for the developer right it was very much a",
    "start": "1425440",
    "end": "1431120"
  },
  {
    "text": "developer experience let's have simple commands in the cli to do these things at a",
    "start": "1431120",
    "end": "1436760"
  },
  {
    "text": "multi-multi-node level connecting multi-container level and the idea of have the simplicity for having fewer",
    "start": "1436760",
    "end": "1443279"
  },
  {
    "text": "components even as the migration happened to the next generation of swarm mode it was",
    "start": "1443279",
    "end": "1449120"
  },
  {
    "text": "like the idea that you didn't need all of these other bits in order to make a clustered environment so swarm mode has",
    "start": "1449120",
    "end": "1456400"
  },
  {
    "text": "a lot of similar kind of constructs as does kubernetes constructs but what they",
    "start": "1456400",
    "end": "1461440"
  },
  {
    "text": "did is actually built that all into the docker engine so as you instantiate new nodes um turning",
    "start": "1461440",
    "end": "1467840"
  },
  {
    "text": "one of those into a manager node or a worker node a single command things like joining and leaving clusters single",
    "start": "1467840",
    "end": "1474000"
  },
  {
    "text": "commands also with a lot of built-in defaults so upon instantiating it as a clustered node things like pki um",
    "start": "1474000",
    "end": "1481840"
  },
  {
    "text": "other security certs and tokens were all kind of automatically handled by the swarm itself",
    "start": "1481840",
    "end": "1486960"
  },
  {
    "text": "so really focusing on that um uh you know the ease of the experience",
    "start": "1486960",
    "end": "1493120"
  },
  {
    "text": "and how are applications um represented well in the docker construct there's something called a compose file it's a",
    "start": "1493440",
    "end": "1499200"
  },
  {
    "text": "yaml and there's also a compose version one and compose version two um because",
    "start": "1499200",
    "end": "1504320"
  },
  {
    "text": "as applications and the use of containers got more interesting and more complicated as people started using",
    "start": "1504320",
    "end": "1510480"
  },
  {
    "text": "more of those technologies compose v2 also took those things into account",
    "start": "1510480",
    "end": "1515600"
  },
  {
    "text": "um and so that it defines the the the containers how they should be instantiated what um you know uh what",
    "start": "1515600",
    "end": "1522880"
  },
  {
    "text": "images are going to be built from services and the environment how they should be scheduled and how they should",
    "start": "1522880",
    "end": "1528240"
  },
  {
    "text": "be networked they're all part of that or potterback file the definition of services is a little",
    "start": "1528240",
    "end": "1534240"
  },
  {
    "text": "bit different and composed as it is in kubernetes and i know a lot of kubernetes",
    "start": "1534240",
    "end": "1539919"
  },
  {
    "text": "developers love compose still and use it let's just translate it to kubernetes yeah it's been super popular um i just",
    "start": "1539919",
    "end": "1547120"
  },
  {
    "text": "um i just saw on twitter today that one of my",
    "start": "1547120",
    "end": "1552400"
  },
  {
    "text": "someone i know they're now actually receiving applications from their software vendors as compose files so it's great it's a",
    "start": "1552400",
    "end": "1559440"
  },
  {
    "text": "very simple way to define things and you can kind of define all of these things in an order",
    "start": "1559440",
    "end": "1564480"
  },
  {
    "text": "and with that you know specifically like networking right once you start having um multi-container applications they",
    "start": "1564480",
    "end": "1571120"
  },
  {
    "text": "fundamentally need to talk to each other right so in um in the docker construct of swarm mode",
    "start": "1571120",
    "end": "1576880"
  },
  {
    "text": "there's you know swarm classics form and score mode um in classic swarm you did things like uh links and you would",
    "start": "1576880",
    "end": "1582720"
  },
  {
    "text": "actually define in the file like i'm going to link container a to container b with swarm mode actually there's a",
    "start": "1582720",
    "end": "1588880"
  },
  {
    "text": "number of default network drivers that were provided so things like you can do bridge networking",
    "start": "1588880",
    "end": "1594400"
  },
  {
    "text": "host you know host networking where it's kind of you don't need any isolation everything on the host can talk to each",
    "start": "1594400",
    "end": "1599440"
  },
  {
    "text": "other over the networks so that containers across a number of different hosts can talk to",
    "start": "1599440",
    "end": "1604880"
  },
  {
    "text": "each other as well as a mac vlan which is something that's also popular in kubernetes",
    "start": "1604880",
    "end": "1610320"
  },
  {
    "text": "so they shipped with those network drivers allowing um the operator to kind of set up whatever they wanted um you",
    "start": "1610320",
    "end": "1615840"
  },
  {
    "text": "can instantiate the network and then attach your containers to them um or or define them in the compose file",
    "start": "1615840",
    "end": "1621600"
  },
  {
    "text": "as well as use a number of network plugins and this is where you can plug in",
    "start": "1621600",
    "end": "1626960"
  },
  {
    "text": "various network solutions from the ecosystem um and with that paul",
    "start": "1626960",
    "end": "1634400"
  },
  {
    "text": "since you work at hashicorp if you want to go into nomad definitely yeah so uh hashcorp runs",
    "start": "1634400",
    "end": "1640080"
  },
  {
    "text": "nomad uh or builds nomad primarily uh and nomad has a lot of strength similar",
    "start": "1640080",
    "end": "1645279"
  },
  {
    "start": "1641000",
    "end": "1641000"
  },
  {
    "text": "to some of the other stuff we've talked about uh one big strength that i think differentiates it is it's really easy to",
    "start": "1645279",
    "end": "1650480"
  },
  {
    "text": "plug into an existing paths platform on that's because it's very simple and flexible has a lot fewer moving parts",
    "start": "1650480",
    "end": "1657440"
  },
  {
    "text": "than most of these other systems it's also a bit more flexible on what it manages or what it schedules so it can",
    "start": "1657440",
    "end": "1663760"
  },
  {
    "text": "run a bunch of different types of processes in addition to containers uh and multi-cluster and federation are",
    "start": "1663760",
    "end": "1669919"
  },
  {
    "text": "already a feature so it's fun to play around with if you like experimenting with that stuff",
    "start": "1669919",
    "end": "1675279"
  },
  {
    "text": "um similar to what you mentioned with a docker betty a job file kind of contains",
    "start": "1675279",
    "end": "1681679"
  },
  {
    "text": "everything that you would expect to see in a deployment and a service it's sort of a monolithic file",
    "start": "1681679",
    "end": "1686799"
  },
  {
    "text": "uh similarly based on a hashicorp configuration language which is sort of a close cousin of yaml",
    "start": "1686799",
    "end": "1693200"
  },
  {
    "text": "it's just slightly more readable and friendly borrow some ideas from tommel and that sort of thing",
    "start": "1693200",
    "end": "1700080"
  },
  {
    "text": "um and then as far as apps communicating with each other uh nomad prefers to keep things pluggable so you can run it with",
    "start": "1700080",
    "end": "1706080"
  },
  {
    "text": "console doing service discovery and service mesh type stuff for you uh or you can just run it there by itself in",
    "start": "1706080",
    "end": "1712799"
  },
  {
    "text": "which case it shares the host network uh for any of the applications that are running on top of it and then you're",
    "start": "1712799",
    "end": "1718000"
  },
  {
    "text": "free to kind of customize it however you like uh should we cover k3s next",
    "start": "1718000",
    "end": "1723440"
  },
  {
    "text": "yeah cool so this is sort of like kubernetes little brother uh k3s is a smaller lighter and it's a",
    "start": "1723440",
    "end": "1731919"
  },
  {
    "text": "single binary um it's sort of a batteries included solution so it's similar to other distributions of",
    "start": "1731919",
    "end": "1738000"
  },
  {
    "text": "kubernetes where all the tools that you kind of need to make it work um are there packaged with it uh as it's",
    "start": "1738000",
    "end": "1744320"
  },
  {
    "text": "installed so it contains helm for instance uh and it's unique in that most of these systems that we've talked about",
    "start": "1744320",
    "end": "1750399"
  },
  {
    "text": "operate on raft or some raft-like system so far this runs on top of a traditional",
    "start": "1750399",
    "end": "1757440"
  },
  {
    "text": "relational database instead of xcd it can also run on ncd but you know that comes with trade-offs of",
    "start": "1757440",
    "end": "1763520"
  },
  {
    "text": "in the case of a failure um things may not quite be as correct as they would be",
    "start": "1763520",
    "end": "1769200"
  },
  {
    "text": "in a system designed with raft and xcd uh but it's a nice trade-off if you want to do something like have a managed",
    "start": "1769200",
    "end": "1775840"
  },
  {
    "text": "postgres service from the cloud uh manage your your kind of state management layer which is what xe",
    "start": "1775840",
    "end": "1782000"
  },
  {
    "text": "generally does for kubernetes so k3s is great because you get the same kubernetes ecosystem because it's just a",
    "start": "1782000",
    "end": "1788880"
  },
  {
    "text": "slimmed down version of kubernetes uh and same deal you also kind of network",
    "start": "1788880",
    "end": "1794000"
  },
  {
    "text": "things together in a very similar way i think they include their own load balancer as an add-on um which is nice",
    "start": "1794000",
    "end": "1800880"
  },
  {
    "text": "but uh for the most part it's basically kubernetes under the cover uh so we should probably talk about",
    "start": "1800880",
    "end": "1807039"
  },
  {
    "text": "kubernetes since we've been doing all this uh so yeah let's let's dive in um so you",
    "start": "1807039",
    "end": "1813360"
  },
  {
    "start": "1813000",
    "end": "1813000"
  },
  {
    "text": "may be aware of pods and kubernetes and the control plane um all of those components but uh really where at cd and",
    "start": "1813360",
    "end": "1821919"
  },
  {
    "text": "the raft component lives within kubernetes is in the control plane it's a set of",
    "start": "1821919",
    "end": "1827120"
  },
  {
    "text": "nodes that xcd gets deployed on um and the control plane may include other components like poor dns the api server",
    "start": "1827120",
    "end": "1834799"
  },
  {
    "text": "controller manager a proxy scheduler which helps place uh workloads that come",
    "start": "1834799",
    "end": "1840000"
  },
  {
    "text": "in um this is all just sort of uh what runs the stuff that uh your cube",
    "start": "1840000",
    "end": "1847279"
  },
  {
    "text": "cuddle connects to when you're trying to deploy something um it makes the decisions it does reconciliation for you",
    "start": "1847279",
    "end": "1853440"
  },
  {
    "text": "this is kind of the brains of kubernetes uh and what all these things do is they push their state down to scd for the",
    "start": "1853440",
    "end": "1860480"
  },
  {
    "text": "most part so fcd is sort of the most complicated or the most frustrating part of the distributed system for a lot of",
    "start": "1860480",
    "end": "1866960"
  },
  {
    "text": "people um right paul that's yeah exactly that's",
    "start": "1866960",
    "end": "1872159"
  },
  {
    "text": "you nailed it um and then when we look at one of the worker nodes that's connected to kubernetes where the actual",
    "start": "1872159",
    "end": "1877679"
  },
  {
    "text": "apps get deployed to um you know they're things like cube proxy and cubelet which",
    "start": "1877679",
    "end": "1883200"
  },
  {
    "text": "receive communication from the control plane and send communication back they actually execute the commands that they",
    "start": "1883200",
    "end": "1889519"
  },
  {
    "text": "receive and then we need something to run containers so container d is running there as well and uh you can probably",
    "start": "1889519",
    "end": "1896000"
  },
  {
    "text": "explain container d better than i can uh so what's container d betty yeah so container d when you look at um docker",
    "start": "1896000",
    "end": "1902320"
  },
  {
    "text": "it's it's and you have the docker engine container d was a component of that as the core container run time and what we",
    "start": "1902320",
    "end": "1908720"
  },
  {
    "text": "had done years ago at docker is take that part and then actually donate it into the cncf and make it part of the",
    "start": "1908720",
    "end": "1915279"
  },
  {
    "text": "community so that everyone in the ecosystem can leverage that for the core runtime aspects of containers",
    "start": "1915279",
    "end": "1922399"
  },
  {
    "text": "awesome yeah so now it's part of kubernetes um similarly xcd is part of kubernetes and",
    "start": "1922399",
    "end": "1928559"
  },
  {
    "text": "like we said uh ncd is where a lot of state gets pushed to so if you're really",
    "start": "1928559",
    "end": "1933760"
  },
  {
    "text": "looking to learn distributed systems and want to learn more start learning about the failure modes of xcd as betty said",
    "start": "1933760",
    "end": "1940480"
  },
  {
    "text": "earlier failure is sort of the key of distributed systems and we have a lot of great content that",
    "start": "1940480",
    "end": "1945519"
  },
  {
    "text": "helps teach that in the notes of this presentation and speaking of failures uh i think you",
    "start": "1945519",
    "end": "1951919"
  },
  {
    "text": "can help us understand the byzantine fault tolerance of the byzantine generals problem yes and so this is an interesting one",
    "start": "1951919",
    "end": "1958240"
  },
  {
    "text": "and so a great way to uh great kind of a human example of this is you're out with your with a group of friends one night",
    "start": "1958240",
    "end": "1964880"
  },
  {
    "text": "and one of your friends trips and falls and they're obviously bleeding and you say hey are you hey buddy are you all",
    "start": "1964880",
    "end": "1970240"
  },
  {
    "text": "right and they're like i'm totally fine you can obviously see that there's a problem but that person has decided to",
    "start": "1970240",
    "end": "1975760"
  },
  {
    "text": "tell you that they're fine so and then the rest of your friends you're trying to figure out what to do so in",
    "start": "1975760",
    "end": "1981519"
  },
  {
    "text": "the example of distributed systems is that you know you're sending traffic and you're sending data and the system is",
    "start": "1981519",
    "end": "1986720"
  },
  {
    "text": "not returning response or behaving like it should but all the health checks turn out fine",
    "start": "1986720",
    "end": "1991919"
  },
  {
    "text": "um so it's kind of like this mismatch in um the desire what you know the state should be but it's not behaving that way",
    "start": "1991919",
    "end": "1998640"
  },
  {
    "text": "but then the rest of you can't figure out what to do yet yeah and that's a problem for raft raft",
    "start": "1998640",
    "end": "2004240"
  },
  {
    "text": "saves us from a lot of problems but uh most protocols can't save us from all",
    "start": "2004240",
    "end": "2009279"
  },
  {
    "text": "problems so there's always going to be stuff like this that kind of lurks in the shadows and will",
    "start": "2009279",
    "end": "2014559"
  },
  {
    "text": "bite you when you're working on distributed systems uh kind of closing things off i really",
    "start": "2014559",
    "end": "2020320"
  },
  {
    "text": "like this example from kent c dodds he's got a master's degree in management information systems and when you're",
    "start": "2020320",
    "end": "2027360"
  },
  {
    "text": "evaluating any of this type of technology it's incredibly complex and incredibly difficult and sort of the",
    "start": "2027360",
    "end": "2032720"
  },
  {
    "text": "beauty of working in the open and doing things collaboratively through open source and with the community is we all",
    "start": "2032720",
    "end": "2039440"
  },
  {
    "text": "get to kind of share this burden together and learn from each other so you know we learned from the target example earlier because they were great",
    "start": "2039440",
    "end": "2046880"
  },
  {
    "text": "gracious enough to share with us um there's a lot of other great examples you can learn from if you get involved",
    "start": "2046880",
    "end": "2052560"
  },
  {
    "text": "with the community yeah we've got this really long um",
    "start": "2052560",
    "end": "2057599"
  },
  {
    "text": "reading list for you with all with links to everything that we've mentioned in the talk as well as other things um",
    "start": "2057599",
    "end": "2062960"
  },
  {
    "text": "there's also um you know there's vendor options where they handle some of these other uh managing some of those other",
    "start": "2062960",
    "end": "2068878"
  },
  {
    "text": "bits for you so that you can get some of the experience but then not have to handle all of the lifecycle stuff with",
    "start": "2068879",
    "end": "2074398"
  },
  {
    "text": "it and then there's things like fully hosted options in the cloud where you can play with actually deploying",
    "start": "2074399",
    "end": "2081040"
  },
  {
    "text": "focusing on the application side and maybe not have to worry about managing all of the the internals",
    "start": "2081040",
    "end": "2088560"
  }
]