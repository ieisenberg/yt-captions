[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "but afternoon everyone thanks for being here my name is Pinot and Emily decrypted huawei I am here with my",
    "start": "89",
    "end": "6990"
  },
  {
    "text": "co-speaker Irene she is a researcher at Microsoft and holds a PhD in distributed",
    "start": "6990",
    "end": "12990"
  },
  {
    "text": "systems and I would like to mention about my colleague Quinton hole who has envisioned that this project and thought",
    "start": "12990",
    "end": "19560"
  },
  {
    "text": "that it would be worth outsourcing it unfortunately he couldn't make it to this event due to some reasons alright",
    "start": "19560",
    "end": "26430"
  },
  {
    "text": "let's get started our team and Irene's group had been collaborating for the",
    "start": "26430",
    "end": "31830"
  },
  {
    "text": "past few years and a pretty exciting project to take the research and she did in distributed systems for her PhD",
    "start": "31830",
    "end": "38370"
  },
  {
    "text": "thesis and expanded into a full-fledged open-source project in C&C F we are here",
    "start": "38370",
    "end": "43950"
  },
  {
    "text": "to talk about this project today in",
    "start": "43950",
    "end": "50340"
  },
  {
    "start": "48000",
    "end": "102000"
  },
  {
    "text": "today's agenda will cover the brief history of evolution of applications nature of applications development from",
    "start": "50340",
    "end": "57390"
  },
  {
    "text": "monolithic to micro services and the skill set required for application developers system developers a service a",
    "start": "57390",
    "end": "64320"
  },
  {
    "text": "DevOps engineers note that the application developer I meant here is not a standard industry term I will talk",
    "start": "64320",
    "end": "70710"
  },
  {
    "text": "about it when I get to that slide and then we'll briefly touch on a broader effort to create a full distributed",
    "start": "70710",
    "end": "76830"
  },
  {
    "text": "operating system amino s and then zoom in to the most interesting part of it I mean or an micro-service runtime system",
    "start": "76830",
    "end": "84560"
  },
  {
    "text": "Irene will describe the internals of how this amino runtime system works and show some interesting findings from her",
    "start": "84560",
    "end": "90810"
  },
  {
    "text": "research and then I'll summarize with current ongoing work and show that they wore face recognition app running on the",
    "start": "90810",
    "end": "96450"
  },
  {
    "text": "minnow runtime",
    "start": "96450",
    "end": "99020"
  },
  {
    "start": "102000",
    "end": "154000"
  },
  {
    "text": "once upon a time applications that people interacted day-to-day were pretty simple they typically support single",
    "start": "103719",
    "end": "110319"
  },
  {
    "text": "user ran on a single operating system and on a standalone machine they were things like text editor document viewers",
    "start": "110319",
    "end": "118590"
  },
  {
    "text": "calendars and simple games life was good for application programmers single",
    "start": "118590",
    "end": "125560"
  },
  {
    "text": "machine operating systems work fairly well Linux Windows Mac OS all of them",
    "start": "125560",
    "end": "130840"
  },
  {
    "text": "provide a great layer of abstraction for application programming with the basic building blocks like local process",
    "start": "130840",
    "end": "136329"
  },
  {
    "text": "virtual memory file system synchronization primitives and locks all of these are indispensable when writing",
    "start": "136329",
    "end": "143200"
  },
  {
    "text": "an application for sing-sing single submission mostly one or two programming languages are required to build an",
    "start": "143200",
    "end": "148989"
  },
  {
    "text": "application and the application programmers understand that platform pretty well but suddenly everything",
    "start": "148989",
    "end": "156549"
  },
  {
    "text": "changed cloud computing happened everybody moved to smartphone mobile for strategies",
    "start": "156549",
    "end": "161579"
  },
  {
    "text": "ubiquitous network connectivity high-speed Internet everywhere so the type of applications changed suddenly we",
    "start": "161579",
    "end": "168819"
  },
  {
    "text": "have social media applications like Twitter Pinterest Facebook and in",
    "start": "168819",
    "end": "175480"
  },
  {
    "text": "addition to that some of the previously existing applications with single user also became collaborative multi-user",
    "start": "175480",
    "end": "181810"
  },
  {
    "text": "applications there are fairly some big differences with today's applications in",
    "start": "181810",
    "end": "187750"
  },
  {
    "text": "the nature of application and the kind of application development we need to do",
    "start": "187750",
    "end": "193829"
  },
  {
    "text": "firstly users share these applications so the application has to run on the",
    "start": "194459",
    "end": "200889"
  },
  {
    "text": "number of servers in the cloud next users access these applications through",
    "start": "200889",
    "end": "207190"
  },
  {
    "text": "mobile devices like cell phones and tablets so it means that applications",
    "start": "207190",
    "end": "213310"
  },
  {
    "text": "need to have a mobile component cloud component sometimes a desktop component and increasingly sometimes edge",
    "start": "213310",
    "end": "220239"
  },
  {
    "text": "components too in case of smart cities and autonomous systems autonomous vehicles and lastly these application",
    "start": "220239",
    "end": "227799"
  },
  {
    "text": "need to coordinate across distributed components over the links that are sometimes flow are unreliable",
    "start": "227799",
    "end": "236698"
  },
  {
    "text": "today even an aquarium at home can have a Raspberry Pi attached to it that controls the water level temperature",
    "start": "237000",
    "end": "243810"
  },
  {
    "text": "feed and the chemicals all this being controlled through the software running in the cloud in summary all this adds up",
    "start": "243810",
    "end": "254680"
  },
  {
    "text": "to some significant challenges for application programming they have to coordinate data and computation across",
    "start": "254680",
    "end": "261639"
  },
  {
    "text": "distributed nodes they have to meet application requirements with guaranteed performance and limitations performance",
    "start": "261639",
    "end": "266949"
  },
  {
    "text": "limitations and failures and they have to do all this across different programming environment and varying",
    "start": "266949",
    "end": "273820"
  },
  {
    "text": "hardware resources which means application development is really very hard with multi-user multi program",
    "start": "273820",
    "end": "280889"
  },
  {
    "text": "multi-platform multi node etc this is one of the reason why cloud native computing foundation exists along came",
    "start": "280889",
    "end": "290500"
  },
  {
    "start": "288000",
    "end": "324000"
  },
  {
    "text": "essentially cnc of containers kubernetes micro services etc most of you know well",
    "start": "290500",
    "end": "296110"
  },
  {
    "text": "about the things on this slide things have certainly got better applications",
    "start": "296110",
    "end": "301630"
  },
  {
    "text": "can be partitioned into deployable containers programmatically orchestrated and declarative configurations with",
    "start": "301630",
    "end": "307960"
  },
  {
    "text": "kubernetes different language can be used in every single container and we",
    "start": "307960",
    "end": "314050"
  },
  {
    "text": "can connect micro services with service measures like linker D sto etc a service",
    "start": "314050",
    "end": "319330"
  },
  {
    "text": "can run these things in developers and develop them however the problem is",
    "start": "319330",
    "end": "326830"
  },
  {
    "start": "324000",
    "end": "422000"
  },
  {
    "text": "somebody still got to write the code that runs in these containers and it turns out to be it is very difficult to",
    "start": "326830",
    "end": "333729"
  },
  {
    "text": "do it reliably in a way that use the application properties that you want",
    "start": "333729",
    "end": "339210"
  },
  {
    "text": "companies like Google and Amazon have been doing it for quite long but they do have somewhere around 100,000 pretty",
    "start": "339210",
    "end": "345669"
  },
  {
    "text": "good software engineers spent and building this resilient and scalable systems problem is that a company that",
    "start": "345669",
    "end": "352930"
  },
  {
    "text": "needs to build some end-user application doesn't necessary have thousands of distributed system software engineers ax",
    "start": "352930",
    "end": "360720"
  },
  {
    "text": "kinds of problem people run into very frequently are things like distributed concurrency synchronization reliable",
    "start": "360720",
    "end": "368950"
  },
  {
    "text": "artist how do you make available Network look like reliable reliable from remote procedure call point-of-view how do you",
    "start": "368950",
    "end": "378100"
  },
  {
    "text": "handle the failures disconnections reconnections replication leader",
    "start": "378100",
    "end": "383650"
  },
  {
    "text": "election sharding for horizontal scaling all of these are complex distributed system problems that we are forcing",
    "start": "383650",
    "end": "389800"
  },
  {
    "text": "application developers to understand them and handle them some of these areas",
    "start": "389800",
    "end": "395350"
  },
  {
    "text": "are partially fulfilled with things like service wishes but there isn't a single",
    "start": "395350",
    "end": "400930"
  },
  {
    "text": "platform where you can sit down at and write a distributed application and know that you have got all the primitives you",
    "start": "400930",
    "end": "407290"
  },
  {
    "text": "need in order to build a distributed application if you contrast this with single machine operating system like",
    "start": "407290",
    "end": "413440"
  },
  {
    "text": "Linux they provide a great abstraction but we don't have equivalent of it for",
    "start": "413440",
    "end": "418570"
  },
  {
    "text": "distributed systems not surprisingly",
    "start": "418570",
    "end": "423880"
  },
  {
    "text": "these are distributed system problems these are the things we study in computer science operating system",
    "start": "423880",
    "end": "429700"
  },
  {
    "text": "classes we learn about how virtual memory manager works understand how TCP sliding-window protocol works but we",
    "start": "429700",
    "end": "436300"
  },
  {
    "text": "don't expect application developer to implement TCP sliding-window protocol in their applications or decided which",
    "start": "436300",
    "end": "443170"
  },
  {
    "text": "memory should go on disk and which memory should go on to ram this should be abstracted away which at the moment",
    "start": "443170",
    "end": "449500"
  },
  {
    "text": "is not in case of distributed systems unlike single machine operating system",
    "start": "449500",
    "end": "455410"
  },
  {
    "text": "unlike single machine operating system which takes care of them all these things under the hood so the question is",
    "start": "455410",
    "end": "463410"
  },
  {
    "text": "what do we do about this we clearly need",
    "start": "463410",
    "end": "469450"
  },
  {
    "text": "people to solve these problems and are not necessarily application developers and they should be specialized in this",
    "start": "469450",
    "end": "476670"
  },
  {
    "start": "481000",
    "end": "578000"
  },
  {
    "text": "the terminology i'm using here application developer is not something everybody understands certainly not in",
    "start": "481690",
    "end": "488380"
  },
  {
    "text": "standard term in the industry just want to be clear on what I am talking about here and I think there is a large amount",
    "start": "488380",
    "end": "495850"
  },
  {
    "text": "of very necessary specialization developed around this area these are application developers these",
    "start": "495850",
    "end": "502690"
  },
  {
    "text": "are the kind of people who know particular application domain very well like social networking travel finance",
    "start": "502690",
    "end": "508750"
  },
  {
    "text": "banking etc they know what their systems need to do what their customers want",
    "start": "508750",
    "end": "514390"
  },
  {
    "text": "what functionality they need they don't give a hoot to distributor system",
    "start": "514390",
    "end": "520240"
  },
  {
    "text": "problems in the middle we have sis system developers they are the people who are interested in understanding and",
    "start": "520240",
    "end": "527020"
  },
  {
    "text": "solving the complex distributed system problems they are extremely short in supply problematically they don't",
    "start": "527020",
    "end": "533770"
  },
  {
    "text": "understand your business needs and on the right hand side we have a service DevOps engineers they are the people who",
    "start": "533770",
    "end": "541240"
  },
  {
    "text": "understand how your actual application behaves in real life what happens when a",
    "start": "541240",
    "end": "546400"
  },
  {
    "text": "particular customer hits your application how much capacity you will need overload what do your shouting",
    "start": "546400",
    "end": "553510"
  },
  {
    "text": "systems look like what breaks and why once again they are not necessarily distributed system experts and not",
    "start": "553510",
    "end": "560590"
  },
  {
    "text": "necessarily application domain expert but they do understand how to run the systems well I think it is very useful",
    "start": "560590",
    "end": "570340"
  },
  {
    "text": "to understand these distinctions a Suri's are good at running reliable systems application developers are good",
    "start": "570340",
    "end": "575920"
  },
  {
    "text": "at application domain so what we think",
    "start": "575920",
    "end": "580960"
  },
  {
    "text": "is ultimately we need a distributed operating system I mean always I mean oh",
    "start": "580960",
    "end": "586660"
  },
  {
    "text": "is this an umbrella project we think it should probably compress of at least these major subsystems first twenty",
    "start": "586660",
    "end": "593860"
  },
  {
    "text": "Cimino run manages distributed micro services it's a distributed programming",
    "start": "593860",
    "end": "598870"
  },
  {
    "text": "system that provides customizable and extensible deployment of mobile and cloud applications this flexibility",
    "start": "598870",
    "end": "606130"
  },
  {
    "text": "enables program was to separate deployment logic from their applications second one is aminos sync reactive data",
    "start": "606130",
    "end": "614260"
  },
  {
    "text": "management service which provides the persistent cloud storage and reliable synchronization",
    "start": "614260",
    "end": "620590"
  },
  {
    "text": "between storage in mobile devices and also provides automated execution of application code in response to shared",
    "start": "620590",
    "end": "626860"
  },
  {
    "text": "data updates third one is Cimino store distributed transaction protocol like",
    "start": "626860",
    "end": "632860"
  },
  {
    "text": "that droids linearizable transactions using inconsistent replication unlike two-phase commit with strong",
    "start": "632860",
    "end": "639640"
  },
  {
    "text": "replication strong consistent replications within the partition lasts",
    "start": "639640",
    "end": "646150"
  },
  {
    "text": "20 Cimino safe distributed system that gives user control over how mobile and",
    "start": "646150",
    "end": "651880"
  },
  {
    "text": "cloud applications share sensitive user data collected on mobile devices basically deals with privacy and",
    "start": "651880",
    "end": "658150"
  },
  {
    "text": "security aspects we are going to talk about Amina run for today Irene will be",
    "start": "658150",
    "end": "663910"
  },
  {
    "text": "describing it in detail I just wanted to give the context and where does this amino acids this picture is",
    "start": "663910",
    "end": "672820"
  },
  {
    "start": "670000",
    "end": "702000"
  },
  {
    "text": "self-explanatory what we really want you to be thinking is distributed cloud native applications doesn't actually",
    "start": "672820",
    "end": "679240"
  },
  {
    "text": "have to worry about pieces which piece of code runs on which machine operating systems has to take care of them and we",
    "start": "679240",
    "end": "686650"
  },
  {
    "text": "know it is a unified system that provides microservice runtime memory management storage and security",
    "start": "686650",
    "end": "693700"
  },
  {
    "text": "components it needs to run across all the operating systems in the network",
    "start": "693700",
    "end": "700200"
  },
  {
    "text": "a lot of research had been going on for several years in the university of washington but only the time Irene had",
    "start": "704130",
    "end": "710040"
  },
  {
    "text": "published published her theses we came across it and thought that it's worth turning into an open source project in",
    "start": "710040",
    "end": "716070"
  },
  {
    "text": "the CNC F so that people can use it research wasn't intended for that purpose originally it was really",
    "start": "716070",
    "end": "723960"
  },
  {
    "text": "experiment related figure out what this face looks like and what we needed in particular there are academic papers",
    "start": "723960",
    "end": "732360"
  },
  {
    "text": "floating around in Internet some of the terminology in the papers are different from what we have described here over",
    "start": "732360",
    "end": "739020"
  },
  {
    "text": "time we discovered that certain terms we use were confusing for example we renamed amino system to amino run aminos",
    "start": "739020",
    "end": "746880"
  },
  {
    "text": "diamond to amino sinc etc so if you see the contradictory terms floating around",
    "start": "746880",
    "end": "752430"
  },
  {
    "text": "the internet hopefully you'll understand the origin I'm going to hand over to Irene from here",
    "start": "752430",
    "end": "759560"
  },
  {
    "start": "760000",
    "end": "821000"
  },
  {
    "text": "seemed like Jhelum ah on you ho okay I seen the neck wandering Roman ah ha no really I'm actually gonna do this",
    "start": "769149",
    "end": "774790"
  },
  {
    "text": "talk in English because my Chinese is not that good so okay you've gotten a",
    "start": "774790",
    "end": "782290"
  },
  {
    "text": "great introduction to the overview of the whole amino system I'm going to focus today on the very detailed parts",
    "start": "782290",
    "end": "789100"
  },
  {
    "text": "of the amino run sub system sort of what the magic is and what the knobs are that",
    "start": "789100",
    "end": "795610"
  },
  {
    "text": "make it all happen so the for this subsection of the talk I'm going to talk about the goals that",
    "start": "795610",
    "end": "801550"
  },
  {
    "text": "we had in doing the research for this portion of the amino Run system its",
    "start": "801550",
    "end": "806920"
  },
  {
    "text": "architecture and how it actually works and then I'll talk a little bit about deployment managers which are the magic",
    "start": "806920",
    "end": "813550"
  },
  {
    "text": "sauce to this system and then finally I'll wrap up with some experience and evaluation and then we'll go back for a",
    "start": "813550",
    "end": "820120"
  },
  {
    "text": "demo so when we started taking a look at",
    "start": "820120",
    "end": "825399"
  },
  {
    "start": "821000",
    "end": "907000"
  },
  {
    "text": "this problem space of developing a distributed operating system for mobile and cloud application developers we had",
    "start": "825399",
    "end": "834100"
  },
  {
    "text": "a couple of goals that we wanted to achieve when we were looking at building this runtime system so the first is that",
    "start": "834100",
    "end": "840399"
  },
  {
    "text": "we did not want what we consider deployment logic to be mixed in with the",
    "start": "840399",
    "end": "845410"
  },
  {
    "text": "application logic so you can think of this as the code that a distributed systems programmer would have to",
    "start": "845410",
    "end": "851800"
  },
  {
    "text": "implement like building RPC compared to something that an application programmer should be building which is like you",
    "start": "851800",
    "end": "858490"
  },
  {
    "text": "know how your operation how your application operates or you know what a tweet is we wanted to make sure that the",
    "start": "858490",
    "end": "866679"
  },
  {
    "text": "application code itself was able to be very simple and intuitive but we still wanted application programmers or sres",
    "start": "866679",
    "end": "874540"
  },
  {
    "text": "to be able to decide how actually to deploy their applications so we didn't want to take all of this control away",
    "start": "874540",
    "end": "880839"
  },
  {
    "text": "even though we were going to separate the deployment code from the application code itself then you know we had some",
    "start": "880839",
    "end": "888790"
  },
  {
    "text": "other high-level goals like we want to be able to support a large number of programming languages and then of course",
    "start": "888790",
    "end": "896290"
  },
  {
    "text": "we want to provide reasonable performance and we want to for sure support external",
    "start": "896290",
    "end": "902709"
  },
  {
    "text": "infrastructure systems like kubernetes sto and @cd so what we came up with was",
    "start": "902709",
    "end": "910600"
  },
  {
    "start": "907000",
    "end": "935000"
  },
  {
    "text": "this Amino run system which is a distributed operating system that",
    "start": "910600",
    "end": "915879"
  },
  {
    "text": "supports pluggable deployment managers which extend the functionality of the",
    "start": "915879",
    "end": "921040"
  },
  {
    "text": "the distributed operating system in various ways and so I'll show you how",
    "start": "921040",
    "end": "927040"
  },
  {
    "text": "these deployment managers actually allow application programmers to decide exactly how their application is going",
    "start": "927040",
    "end": "932800"
  },
  {
    "text": "to be deployed so the best way to understand how Amino run works is by",
    "start": "932800",
    "end": "939399"
  },
  {
    "start": "935000",
    "end": "994000"
  },
  {
    "text": "taking a look at its architecture and the key thing here to notice is that there going to be three layers to this",
    "start": "939399",
    "end": "945699"
  },
  {
    "text": "architecture at the top will be the distributed application which is the application code that's going to run",
    "start": "945699",
    "end": "951249"
  },
  {
    "text": "across all of your mobile devices and IOT devices and cloud servers then at",
    "start": "951249",
    "end": "958029"
  },
  {
    "text": "the very bottom layer we have a deployment kernel which implements best-effort basic deployment tasks like",
    "start": "958029",
    "end": "965110"
  },
  {
    "text": "just making a call to a different part of the application or being able to find",
    "start": "965110",
    "end": "970929"
  },
  {
    "text": "other components in the application but the most important part of the amino run",
    "start": "970929",
    "end": "976629"
  },
  {
    "text": "architecture is the deployment manager this layer so the deployment management",
    "start": "976629",
    "end": "981759"
  },
  {
    "text": "layer extends the functionality of the deployment kernel in such a way so that application programmers can actually",
    "start": "981759",
    "end": "988389"
  },
  {
    "text": "choose what kind of functionality the deployment kernel will offer each part of their application so to give you an",
    "start": "988389",
    "end": "996579"
  },
  {
    "start": "994000",
    "end": "1026000"
  },
  {
    "text": "example the application programmer takes their application and splits it up into",
    "start": "996579",
    "end": "1001679"
  },
  {
    "text": "a couple of large micro services what we do underneath then is that we have the",
    "start": "1001679",
    "end": "1007699"
  },
  {
    "text": "deployment kernel which runs these Microsystems services but then for each micro service there's going to be a",
    "start": "1007699",
    "end": "1014399"
  },
  {
    "text": "deployment manager that provides the exact functionality and deployment tasks",
    "start": "1014399",
    "end": "1021360"
  },
  {
    "text": "that the applicant micro service needs",
    "start": "1021360",
    "end": "1025670"
  },
  {
    "start": "1026000",
    "end": "1078000"
  },
  {
    "text": "so going back to the top level of the amino architecture immuno applications",
    "start": "1027319",
    "end": "1035370"
  },
  {
    "text": "are fundamentally large microservices they run in a single address space so",
    "start": "1035370",
    "end": "1041519"
  },
  {
    "text": "any amino Run microservice can call any other amino Run microservice but they",
    "start": "1041519",
    "end": "1047579"
  },
  {
    "text": "can execute anywhere and they can move transparent to the application itself so the application code doesn't have to",
    "start": "1047579",
    "end": "1053490"
  },
  {
    "text": "worry about where these micro-services run and it doesn't have to worry about how to find where each one of these",
    "start": "1053490",
    "end": "1058799"
  },
  {
    "text": "micro-services what's important about the micro-service encapsulation is that",
    "start": "1058799",
    "end": "1066539"
  },
  {
    "text": "it gives a granularity for which the runtime itself the deployment kernel can",
    "start": "1066539",
    "end": "1071730"
  },
  {
    "text": "decide to move and allocate instances of this application",
    "start": "1071730",
    "end": "1077299"
  },
  {
    "start": "1078000",
    "end": "1150000"
  },
  {
    "text": "so if you had a distributed game for example you might create one micro service that holds your game board",
    "start": "1080050",
    "end": "1085960"
  },
  {
    "text": "another micro-service that holds the scores of all the players and then maybe",
    "start": "1085960",
    "end": "1091090"
  },
  {
    "text": "another microservice that implements some sort of game logic or physics engine so then if we look down into the",
    "start": "1091090",
    "end": "1098740"
  },
  {
    "text": "deployment kernel the deployment kernel is a piece of software that is",
    "start": "1098740",
    "end": "1103750"
  },
  {
    "text": "distributed but it runs on every single cloud server and mobile device its entire job is to instantiate and manage",
    "start": "1103750",
    "end": "1111820"
  },
  {
    "text": "these high-level micro services that comprise the Amino run applications it",
    "start": "1111820",
    "end": "1118080"
  },
  {
    "text": "tracks where each micro service is it enables micro services to move around",
    "start": "1118080",
    "end": "1124170"
  },
  {
    "text": "transparent to the application and then it also makes sure that the micro",
    "start": "1124170",
    "end": "1130120"
  },
  {
    "text": "services can call to each other transparently without having to you know look up the IP address and you know",
    "start": "1130120",
    "end": "1138490"
  },
  {
    "text": "actually set up TCP connections and things like that so that's the bottom",
    "start": "1138490",
    "end": "1144610"
  },
  {
    "text": "layer of the architecture so now I'll talk about the deployment managers which are the secret sauce so the way the",
    "start": "1144610",
    "end": "1152170"
  },
  {
    "start": "1150000",
    "end": "1235000"
  },
  {
    "text": "deployment manager is work is that they implement sophisticated micro service deployment tasks by interposing on calls",
    "start": "1152170",
    "end": "1160150"
  },
  {
    "text": "to the micro service on our pcs essentially and then routing or managing",
    "start": "1160150",
    "end": "1168370"
  },
  {
    "text": "those calls so as an example to give you a concrete example one deployment manager might replicate a micro surface",
    "start": "1168370",
    "end": "1175870"
  },
  {
    "text": "by creating multiple instances of that Microsoft service in different containers for example then every time",
    "start": "1175870",
    "end": "1182740"
  },
  {
    "text": "the application makes a call to that micro service the deployment the",
    "start": "1182740",
    "end": "1189160"
  },
  {
    "text": "deployment manager will route the call to all of the replicas so the nice thing",
    "start": "1189160",
    "end": "1195280"
  },
  {
    "text": "about deployment managers is that they encapsulate deployment code and tasks",
    "start": "1195280",
    "end": "1200530"
  },
  {
    "text": "separate from the application code itself so programmers can decide that they have implemented this this piece of",
    "start": "1200530",
    "end": "1208330"
  },
  {
    "text": "this micro service this piece of application logic but then later they want replication",
    "start": "1208330",
    "end": "1213850"
  },
  {
    "text": "they can simply add a deployment manager sort of like a library onto their micro",
    "start": "1213850",
    "end": "1218980"
  },
  {
    "text": "service and transparently achieve that functionality without having to change their application code",
    "start": "1218980",
    "end": "1226860"
  },
  {
    "text": "so I'll give some examples in the next section about how exactly these deployment managers work but understand",
    "start": "1230210",
    "end": "1238309"
  },
  {
    "text": "a little bit better if you think of each of these as being a micro service we",
    "start": "1238309",
    "end": "1243350"
  },
  {
    "text": "could decide that perhaps this game board micro service needs to be replicated so we would attach a",
    "start": "1243350",
    "end": "1248830"
  },
  {
    "text": "replication deployment manager to it which would ensure that the game board micro service is replicated to and",
    "start": "1248830",
    "end": "1257179"
  },
  {
    "text": "instantiated in different containers and then have each of the RPC calls to the",
    "start": "1257179",
    "end": "1263029"
  },
  {
    "text": "micro Service replicated then we might have a set of least caching micro",
    "start": "1263029",
    "end": "1271119"
  },
  {
    "text": "deployment managers for your scoreboard and maybe some code offloading for your",
    "start": "1271119",
    "end": "1277869"
  },
  {
    "text": "physics engine so we have a large range of deployment managers the thing to",
    "start": "1277869",
    "end": "1282889"
  },
  {
    "start": "1279000",
    "end": "1320000"
  },
  {
    "text": "understand here is that almost any deployment tasks that you might want to implement could be implemented in a",
    "start": "1282889",
    "end": "1288379"
  },
  {
    "text": "deployment manager so essentially as long as you're able to implement the tasks by interposing on calls to the",
    "start": "1288379",
    "end": "1294679"
  },
  {
    "text": "micro service then you're able to implement this deployment tasks inside a deployment manager and we've built a",
    "start": "1294679",
    "end": "1301730"
  },
  {
    "text": "fairly extensive library already of stock deployment managers that",
    "start": "1301730",
    "end": "1307279"
  },
  {
    "text": "application programmers can go ahead and use or go ahead and modify themselves if you're a distributed systems person the",
    "start": "1307279",
    "end": "1314210"
  },
  {
    "text": "other thing that's interesting is that you can combine them in interesting ways so that you can use more than one deployment manager at a time so we have",
    "start": "1314210",
    "end": "1322970"
  },
  {
    "start": "1320000",
    "end": "1348000"
  },
  {
    "text": "lots of different categories in which we group our deployment managers we have a bunch of deployment managers that just",
    "start": "1322970",
    "end": "1328190"
  },
  {
    "text": "implement very primitive deployment tasks like exactly once RPC we also have",
    "start": "1328190",
    "end": "1333830"
  },
  {
    "text": "caching and serial light serializability checkpointing replication mobility",
    "start": "1333830",
    "end": "1340309"
  },
  {
    "text": "scalability and more so there are a very large set of these library deployment",
    "start": "1340309",
    "end": "1345740"
  },
  {
    "text": "managers already and more to come so I'm",
    "start": "1345740",
    "end": "1351529"
  },
  {
    "text": "gonna talk a little bit more about how the oh so how the Sapphire / Kamino run",
    "start": "1351529",
    "end": "1358730"
  },
  {
    "text": "deployment manager library works in order for you to understand how possible for just any programmer to",
    "start": "1358730",
    "end": "1365730"
  },
  {
    "text": "extend these deployment managers so when",
    "start": "1365730",
    "end": "1372750"
  },
  {
    "start": "1371000",
    "end": "1528000"
  },
  {
    "text": "I talked about how the deployment managers interpose on our PC the way",
    "start": "1372750",
    "end": "1377789"
  },
  {
    "text": "that we actually implement deployment managers is through an interface provided by the south by the Amino run",
    "start": "1377789",
    "end": "1383970"
  },
  {
    "text": "deployment kernel so what happens actually is that each deployment manager",
    "start": "1383970",
    "end": "1389100"
  },
  {
    "text": "is implemented as three separate components each of which support a",
    "start": "1389100",
    "end": "1394440"
  },
  {
    "text": "sequence of up calls that the deployment kernel automatically invokes when our",
    "start": "1394440",
    "end": "1399690"
  },
  {
    "text": "pcs come in so let me give you an example so we have a server side",
    "start": "1399690",
    "end": "1404789"
  },
  {
    "text": "component which is co-located where with where the micro service actually runs so",
    "start": "1404789",
    "end": "1409830"
  },
  {
    "text": "when an RPC comes in an up call will be made to the server side deployment manager similarly for the client side",
    "start": "1409830",
    "end": "1418049"
  },
  {
    "text": "deployment manager we have another component that runs where the client makes the RPC so then from the client",
    "start": "1418049",
    "end": "1425250"
  },
  {
    "text": "side whenever the client makes an RPC will invoke an up call inside this component of the deployment manager then",
    "start": "1425250",
    "end": "1431789"
  },
  {
    "text": "we have a centralized component for every deployment manager which we implement on something that is essentially a an at CD kind of service",
    "start": "1431789",
    "end": "1439440"
  },
  {
    "text": "to provide replication and fault tolerance for these components as you",
    "start": "1439440",
    "end": "1444990"
  },
  {
    "text": "can imagine these components are going to be much slower when they run compared to the server side and client side",
    "start": "1444990",
    "end": "1451919"
  },
  {
    "text": "deployment manager components so we encourage programmers to put most of their implementation into the other two",
    "start": "1451919",
    "end": "1458960"
  },
  {
    "text": "so let's take a look at what happens exactly when an RPC is made to a SATA to",
    "start": "1458960",
    "end": "1465570"
  },
  {
    "text": "a sapphire or Amino run micro service so when you start the micro Service the",
    "start": "1465570",
    "end": "1472940"
  },
  {
    "text": "Sapphire deployment kernel will actually instantiate the deployment managers",
    "start": "1472940",
    "end": "1479940"
  },
  {
    "text": "automatically so let's say we're trying to replicate this micro service so what will happen is the deployment manager",
    "start": "1479940",
    "end": "1488490"
  },
  {
    "text": "will receive an up call saying that the micro Service has been created at which",
    "start": "1488490",
    "end": "1494190"
  },
  {
    "text": "point it will create replicas of the micro-service on to other kernel",
    "start": "1494190",
    "end": "1501240"
  },
  {
    "text": "servers these replicas can talk to each other and so when the clients make calls",
    "start": "1501240",
    "end": "1509160"
  },
  {
    "text": "they can the client-side deployment manager component will forward those RPC",
    "start": "1509160",
    "end": "1515010"
  },
  {
    "text": "calls to where the micro service is and then those calls can be replicated to",
    "start": "1515010",
    "end": "1520320"
  },
  {
    "text": "the other copies of the micro service",
    "start": "1520320",
    "end": "1526159"
  },
  {
    "text": "so let's look at exactly what happens with a primary backup sort of leader",
    "start": "1529409",
    "end": "1538419"
  },
  {
    "text": "based replication protocol so we first stand up three copies of the micro",
    "start": "1538419",
    "end": "1546609"
  },
  {
    "text": "service for a consensus-based kind of leader based replication protocol we designate one of the micro",
    "start": "1546609",
    "end": "1553840"
  },
  {
    "text": "service instances as the leader and then when any other micro service makes over",
    "start": "1553840",
    "end": "1560289"
  },
  {
    "text": "RPC to this micro service the client-side component will direct the",
    "start": "1560289",
    "end": "1566590"
  },
  {
    "text": "call to the leader based micro service instance which will then replicate the call to the two backups wait until the",
    "start": "1566590",
    "end": "1574570"
  },
  {
    "text": "RPC finishes running and then respond to the client saying that the RPC was",
    "start": "1574570",
    "end": "1582609"
  },
  {
    "text": "successfully made and of course replicated to the two other instances of the micro service so this is essentially",
    "start": "1582609",
    "end": "1589899"
  },
  {
    "text": "simple state machine replication but as you can see we've been able to do it inside a library completely separate",
    "start": "1589899",
    "end": "1596679"
  },
  {
    "text": "from the application code itself and we're able to essentially attach this",
    "start": "1596679",
    "end": "1601749"
  },
  {
    "text": "deployment manager to a micro service and provide the state machine replication as a service without",
    "start": "1601749",
    "end": "1608710"
  },
  {
    "text": "changing any of the code of the application itself so I'll go really",
    "start": "1608710",
    "end": "1614139"
  },
  {
    "start": "1612000",
    "end": "1659000"
  },
  {
    "text": "quickly through how this works for a couple of other things because we're running a little bit short on time so",
    "start": "1614139",
    "end": "1620229"
  },
  {
    "text": "another option would be taking a micro service that perhaps runs some code on",
    "start": "1620229",
    "end": "1626710"
  },
  {
    "text": "the client side like maybe an IOT device of some sort and offloading that to the",
    "start": "1626710",
    "end": "1633820"
  },
  {
    "text": "cloud so essentially what would happen is we would need to just create an instance of the micro Service the same",
    "start": "1633820",
    "end": "1640450"
  },
  {
    "text": "code in the cloud and then just forward calls from the code that was running on",
    "start": "1640450",
    "end": "1647499"
  },
  {
    "text": "the IOT device or phone to the cloud instance and so depending on which of",
    "start": "1647499",
    "end": "1653200"
  },
  {
    "text": "the to run faster then we can make a decision about where to actually run",
    "start": "1653200",
    "end": "1658539"
  },
  {
    "text": "that code we can sort of do the same thing essentially in reverse to cache data from a micro",
    "start": "1658539",
    "end": "1666190"
  },
  {
    "start": "1659000",
    "end": "1688000"
  },
  {
    "text": "service locally on the mobile device so what happens is we have some sort of",
    "start": "1666190",
    "end": "1671640"
  },
  {
    "text": "instance of the application micro service in the cloud then we when we",
    "start": "1671640",
    "end": "1676900"
  },
  {
    "text": "make a call we bring the data from the micro service in the cloud to the mobile",
    "start": "1676900",
    "end": "1682809"
  },
  {
    "text": "device and then make the call locally on the mobile device instead so those two",
    "start": "1682809",
    "end": "1691660"
  },
  {
    "text": "those couple of examples that I did were pretty simple just so that you could understand how exactly the sequence of",
    "start": "1691660",
    "end": "1698320"
  },
  {
    "text": "events happens inside a deployment manager but you might want to run a much more sophisticated algorithm for example",
    "start": "1698320",
    "end": "1704980"
  },
  {
    "text": "to automatically deploy an application based on minimizing the latency so what",
    "start": "1704980",
    "end": "1712150"
  },
  {
    "text": "we actually are able to do with the deployment kernel is things are things that are much more sophisticated so we",
    "start": "1712150",
    "end": "1718030"
  },
  {
    "text": "can take a look and monitor the latency and throughput of every call between",
    "start": "1718030",
    "end": "1724240"
  },
  {
    "text": "every kernel server and every micro service and then make a decision about where to place these using a distributed",
    "start": "1724240",
    "end": "1732400"
  },
  {
    "text": "algorithm and we'll actually see an example of this migration and dynamic",
    "start": "1732400",
    "end": "1737770"
  },
  {
    "text": "placement happening in a demo later so we can compose deployment managers as",
    "start": "1737770",
    "end": "1745330"
  },
  {
    "start": "1740000",
    "end": "1766000"
  },
  {
    "text": "well it's done by chaining deployment managers so you can imagine every time you make an RPC the call goes through a",
    "start": "1745330",
    "end": "1751750"
  },
  {
    "text": "series or a sequence of deployment managers but of course you could imagine",
    "start": "1751750",
    "end": "1758080"
  },
  {
    "text": "that this rapidly gets very complicated so we don't imagine people would be chaining a lot of these deployment",
    "start": "1758080",
    "end": "1763720"
  },
  {
    "text": "managers together all right so five years ago when I did this",
    "start": "1763720",
    "end": "1770320"
  },
  {
    "start": "1766000",
    "end": "1916000"
  },
  {
    "text": "research we did a little experiment and I'll show you the experimental results although the demo that we're going to",
    "start": "1770320",
    "end": "1776559"
  },
  {
    "text": "show later is probably much more interesting so we did this experiment on a couple of mobile devices they were",
    "start": "1776559",
    "end": "1782860"
  },
  {
    "text": "pretty out of date and a Dell server that we just had in our lab and so all of this stuff was running over Wi-Fi and",
    "start": "1782860",
    "end": "1790020"
  },
  {
    "text": "also like 3G or whatever we had at the time",
    "start": "1790020",
    "end": "1795090"
  },
  {
    "text": "so essentially what we did was we built a multiplayer game so we were able to oh",
    "start": "1795160",
    "end": "1804630"
  },
  {
    "text": "so we were able to use a couple of different deployments of the multiplayer game and so what you're seeing here is",
    "start": "1804630",
    "end": "1811170"
  },
  {
    "text": "in each case the read and write latency for making a move and then reading the",
    "start": "1811170",
    "end": "1818020"
  },
  {
    "text": "state of the board the game board in milliseconds so the first thing that we",
    "start": "1818020",
    "end": "1825190"
  },
  {
    "text": "did was we put the game board as a micro service in the cloud and then we let",
    "start": "1825190",
    "end": "1832840"
  },
  {
    "text": "both mobile devices make calls to the cloud to both make moves as well as",
    "start": "1832840",
    "end": "1838900"
  },
  {
    "text": "fetch the state of the game board so that means that everybody sees roughly",
    "start": "1838900",
    "end": "1844840"
  },
  {
    "text": "high latency uniformly but we were then able to do is change the deployment",
    "start": "1844840",
    "end": "1851440"
  },
  {
    "text": "manager to move the game board micro service on to one of the onto one of the",
    "start": "1851440",
    "end": "1858010"
  },
  {
    "text": "phones at which point the player whose phone the micro service is running on obviously sees very low latency and then",
    "start": "1858010",
    "end": "1866110"
  },
  {
    "text": "the latency for the other player Rises and the really cool thing here is that we didn't have to actually change any",
    "start": "1866110",
    "end": "1872590"
  },
  {
    "text": "application code it should change this game essentially from something that is",
    "start": "1872590",
    "end": "1877870"
  },
  {
    "text": "a cloud server based game to appear to peer application and then we were able",
    "start": "1877870",
    "end": "1884110"
  },
  {
    "text": "to do the same thing where we just replicated the micro service on both players devices so reading the state of",
    "start": "1884110",
    "end": "1892390"
  },
  {
    "text": "the board game became very fast but then every time the player made a move they would have to update both copies of the",
    "start": "1892390",
    "end": "1899110"
  },
  {
    "text": "board game on both devices which increased the write Lansing so I'm gonna",
    "start": "1899110",
    "end": "1904420"
  },
  {
    "text": "skip this next experiment because it sort of shows something very similar I",
    "start": "1904420",
    "end": "1912060"
  },
  {
    "text": "will also say that the the amino Run",
    "start": "1912060",
    "end": "1918940"
  },
  {
    "start": "1916000",
    "end": "1949000"
  },
  {
    "text": "system does support multiple programming languages through the use of grail vm",
    "start": "1918940",
    "end": "1924700"
  },
  {
    "text": "and so this was one of our goals to be able to be somewhat programming language agnostic",
    "start": "1924700",
    "end": "1931059"
  },
  {
    "text": "so you can essentially write your amino run application and deployment managers",
    "start": "1931059",
    "end": "1936429"
  },
  {
    "text": "in any of these languages so that's pretty much it for the guts of the amino",
    "start": "1936429",
    "end": "1944830"
  },
  {
    "text": "run system I will give it back to Ron",
    "start": "1944830",
    "end": "1951700"
  },
  {
    "start": "1949000",
    "end": "2144000"
  },
  {
    "text": "ooh for the next steps in demo",
    "start": "1951700",
    "end": "1958260"
  },
  {
    "text": "about the next steps it's still early we have lot of ways in which we would like to extend I mean no run in the future",
    "start": "1967320",
    "end": "1974080"
  },
  {
    "text": "today micro service migration only works for the state stored into the but inside the micro services but there can be",
    "start": "1974080",
    "end": "1981070"
  },
  {
    "text": "local files a dynamic state where we are not migrating as of now you have to work on that and we need to support",
    "start": "1981070",
    "end": "1988810"
  },
  {
    "text": "definitely need to support more language we support very few now with the support of Calvin we are going to extend it and",
    "start": "1988810",
    "end": "1995110"
  },
  {
    "text": "we want to build some more DMS to integrate with external systems like load balancers sto etcd",
    "start": "1995110",
    "end": "2001590"
  },
  {
    "text": "tik v and at the end we still need to",
    "start": "2001590",
    "end": "2006660"
  },
  {
    "text": "build some good edge applications and verify that everything works well at least on the qubit rather than under",
    "start": "2006660",
    "end": "2013470"
  },
  {
    "text": "normal cuban it is",
    "start": "2013470",
    "end": "2016429"
  },
  {
    "text": "feel free to get involved this is already open source there is a slack channel github repo website you can have",
    "start": "2019840",
    "end": "2026110"
  },
  {
    "text": "a look at it and get in touch with us if you are interested in it I will run the",
    "start": "2026110",
    "end": "2033220"
  },
  {
    "text": "demo perfect face recognition app okay we don't have time now we'll be doing",
    "start": "2033220",
    "end": "2039640"
  },
  {
    "text": "that we'll share it offline if people are interested we are open for Q&A",
    "start": "2039640",
    "end": "2046440"
  },
  {
    "text": "any questions yeah yeah",
    "start": "2052230",
    "end": "2059940"
  },
  {
    "text": "oh hello okay so um you said earlier that you were able to sort of turn a a",
    "start": "2066460",
    "end": "2073210"
  },
  {
    "text": "cloud game into this peer-to-peer game um is that like a live migration or is",
    "start": "2073210",
    "end": "2079030"
  },
  {
    "text": "it some kind of you you need to kind of take the service down and do some sort of reset and start it back up so okay so",
    "start": "2079030",
    "end": "2092550"
  },
  {
    "text": "so the question was whether the evaluation the experiment that I showed",
    "start": "2092550",
    "end": "2098470"
  },
  {
    "text": "was a live migration or not so the particular example I showed was not it",
    "start": "2098470",
    "end": "2104260"
  },
  {
    "text": "was a change of one line of code and then standing up the service again but the demo we have if you want to look at",
    "start": "2104260",
    "end": "2110980"
  },
  {
    "text": "it online is actually live migration heading to that it's a Java serialization and deserialization so",
    "start": "2110980",
    "end": "2117369"
  },
  {
    "text": "it's it's a java-based application right so it's the Java serialization and",
    "start": "2117369",
    "end": "2122650"
  },
  {
    "text": "deserialization at betherine we don't have dynamic state migration as a flow we I want to extend it support",
    "start": "2122650",
    "end": "2130109"
  },
  {
    "text": "thank you you're done [Applause]",
    "start": "2137600",
    "end": "2145849"
  }
]