[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "hello and welcome to the state of",
    "start": "0",
    "end": "3120"
  },
  {
    "text": "serverless",
    "start": "3120",
    "end": "4319"
  },
  {
    "text": "my name is jeremy and i'm the director",
    "start": "4319",
    "end": "6240"
  },
  {
    "text": "of technical community and open source",
    "start": "6240",
    "end": "8080"
  },
  {
    "text": "here at datadog",
    "start": "8080",
    "end": "9760"
  },
  {
    "text": "if you have any questions or comments",
    "start": "9760",
    "end": "11599"
  },
  {
    "text": "want to make a correction or just talk",
    "start": "11599",
    "end": "13200"
  },
  {
    "text": "about serverless observability open",
    "start": "13200",
    "end": "15519"
  },
  {
    "text": "source or anything else hit me up at",
    "start": "15519",
    "end": "18000"
  },
  {
    "text": "linux questions on twitter and i'm",
    "start": "18000",
    "end": "19840"
  },
  {
    "text": "always happy to have those discussions",
    "start": "19840",
    "end": "23840"
  },
  {
    "text": "for those of you unfamiliar with datadog",
    "start": "24160",
    "end": "26160"
  },
  {
    "text": "it's an observability platform that",
    "start": "26160",
    "end": "28240"
  },
  {
    "text": "provides full visibility across your",
    "start": "28240",
    "end": "30480"
  },
  {
    "text": "entire organization",
    "start": "30480",
    "end": "32320"
  },
  {
    "text": "we have everything from infrastructure",
    "start": "32320",
    "end": "34000"
  },
  {
    "text": "metrics distributed tracing and apm and",
    "start": "34000",
    "end": "36239"
  },
  {
    "text": "logs all under a single pane of glass",
    "start": "36239",
    "end": "39520"
  },
  {
    "text": "we've recently added things like",
    "start": "39520",
    "end": "40960"
  },
  {
    "text": "security monitoring compliance",
    "start": "40960",
    "end": "42480"
  },
  {
    "text": "monitoring synthetics rum and much much",
    "start": "42480",
    "end": "45280"
  },
  {
    "text": "more",
    "start": "45280",
    "end": "46719"
  },
  {
    "text": "so if you're interested in learning more",
    "start": "46719",
    "end": "48559"
  },
  {
    "text": "about that go to datadoghq.com",
    "start": "48559",
    "end": "52000"
  },
  {
    "text": "but what's important for this particular",
    "start": "52000",
    "end": "54559"
  },
  {
    "text": "talk in this report is that more and",
    "start": "54559",
    "end": "57039"
  },
  {
    "text": "more of our customers are using",
    "start": "57039",
    "end": "58719"
  },
  {
    "text": "serverless and this gives us a wide",
    "start": "58719",
    "end": "60719"
  },
  {
    "text": "amount of information to to create a",
    "start": "60719",
    "end": "63199"
  },
  {
    "text": "report of this nature",
    "start": "63199",
    "end": "66080"
  },
  {
    "text": "let's start with some definitions and",
    "start": "66080",
    "end": "68159"
  },
  {
    "start": "67000",
    "end": "67000"
  },
  {
    "text": "i'm not going to try to define",
    "start": "68159",
    "end": "69520"
  },
  {
    "text": "serverless here i understand that it has",
    "start": "69520",
    "end": "71680"
  },
  {
    "text": "quite a few different definitions and",
    "start": "71680",
    "end": "73840"
  },
  {
    "text": "depends on who you're talking to and",
    "start": "73840",
    "end": "75680"
  },
  {
    "text": "what portion of the ecosystem you're",
    "start": "75680",
    "end": "77200"
  },
  {
    "text": "talking about but",
    "start": "77200",
    "end": "78799"
  },
  {
    "text": "i would like to set some context for its",
    "start": "78799",
    "end": "81040"
  },
  {
    "text": "usage in this particular talk",
    "start": "81040",
    "end": "84400"
  },
  {
    "text": "so what we're going to focus on here is",
    "start": "84400",
    "end": "86400"
  },
  {
    "text": "a subset of serverless known as",
    "start": "86400",
    "end": "88320"
  },
  {
    "text": "functions as a service which is well",
    "start": "88320",
    "end": "90400"
  },
  {
    "text": "defined and well understood so that",
    "start": "90400",
    "end": "92079"
  },
  {
    "text": "we're all on the same page",
    "start": "92079",
    "end": "95439"
  },
  {
    "text": "for the purposes of this talk we're",
    "start": "95680",
    "end": "97600"
  },
  {
    "text": "going to focus specifically on aws",
    "start": "97600",
    "end": "100479"
  },
  {
    "text": "lambda which at the start of 2020 when",
    "start": "100479",
    "end": "103040"
  },
  {
    "text": "the data for this report was collected",
    "start": "103040",
    "end": "105439"
  },
  {
    "text": "and was the most mature and widely",
    "start": "105439",
    "end": "107600"
  },
  {
    "text": "adopted serverless platform certainly",
    "start": "107600",
    "end": "109840"
  },
  {
    "text": "function as a service platform in our",
    "start": "109840",
    "end": "112159"
  },
  {
    "text": "user base and realistically and beyond",
    "start": "112159",
    "end": "114640"
  },
  {
    "text": "our user base",
    "start": "114640",
    "end": "116799"
  },
  {
    "text": "now in future editions of this report we",
    "start": "116799",
    "end": "119920"
  },
  {
    "text": "will examine and include serverless",
    "start": "119920",
    "end": "121520"
  },
  {
    "text": "offerings from other providers such as",
    "start": "121520",
    "end": "123600"
  },
  {
    "text": "gcp and microsoft azure but again to be",
    "start": "123600",
    "end": "127040"
  },
  {
    "text": "clear here this is just aws lambda usage",
    "start": "127040",
    "end": "132239"
  },
  {
    "start": "133000",
    "end": "133000"
  },
  {
    "text": "let's talk a little bit about the",
    "start": "133920",
    "end": "136080"
  },
  {
    "text": "methodology used for these numbers",
    "start": "136080",
    "end": "137760"
  },
  {
    "text": "because obviously that's important",
    "start": "137760",
    "end": "139599"
  },
  {
    "text": "whenever you're looking at data of this",
    "start": "139599",
    "end": "141200"
  },
  {
    "text": "nature let's start with population",
    "start": "141200",
    "end": "144640"
  },
  {
    "text": "we compiled usage data from thousands of",
    "start": "144640",
    "end": "147200"
  },
  {
    "text": "customers in datadog's customer base",
    "start": "147200",
    "end": "149520"
  },
  {
    "text": "but while data.customers cover the",
    "start": "149520",
    "end": "151360"
  },
  {
    "text": "spectrum of company size and industry in",
    "start": "151360",
    "end": "153760"
  },
  {
    "text": "a wide variety of demographics all the",
    "start": "153760",
    "end": "155599"
  },
  {
    "text": "way around they do share some common",
    "start": "155599",
    "end": "157840"
  },
  {
    "text": "traits and i'll underscore those here",
    "start": "157840",
    "end": "160640"
  },
  {
    "text": "first they tend to be serious about",
    "start": "160640",
    "end": "162480"
  },
  {
    "text": "software infrastructure and application",
    "start": "162480",
    "end": "164480"
  },
  {
    "text": "performance which is probably",
    "start": "164480",
    "end": "166160"
  },
  {
    "text": "unsurprising giving the nature of what",
    "start": "166160",
    "end": "167760"
  },
  {
    "text": "we do as a company",
    "start": "167760",
    "end": "170160"
  },
  {
    "text": "they also skew towards adoption of cloud",
    "start": "170160",
    "end": "172080"
  },
  {
    "text": "platforms and services more than the",
    "start": "172080",
    "end": "173760"
  },
  {
    "text": "general population",
    "start": "173760",
    "end": "175360"
  },
  {
    "text": "so all of the results in this report are",
    "start": "175360",
    "end": "177519"
  },
  {
    "text": "biased by the fact that this data is",
    "start": "177519",
    "end": "179200"
  },
  {
    "text": "coming from our customer base which is a",
    "start": "179200",
    "end": "181360"
  },
  {
    "text": "very large but imperfect sample of the",
    "start": "181360",
    "end": "183760"
  },
  {
    "text": "entire global market",
    "start": "183760",
    "end": "186879"
  },
  {
    "text": "let's move on to lambda adoption",
    "start": "187840",
    "end": "190640"
  },
  {
    "text": "we consider a company for the purposes",
    "start": "190640",
    "end": "192720"
  },
  {
    "text": "of this report to have quote-unquote",
    "start": "192720",
    "end": "194879"
  },
  {
    "text": "adopted lambda if they ran at least five",
    "start": "194879",
    "end": "198159"
  },
  {
    "text": "distinct lambda functions in any given",
    "start": "198159",
    "end": "200560"
  },
  {
    "text": "month now the data dog forwarder is a",
    "start": "200560",
    "end": "203280"
  },
  {
    "text": "lambda function and that is explicitly",
    "start": "203280",
    "end": "205840"
  },
  {
    "text": "excluded so that again that's five",
    "start": "205840",
    "end": "208159"
  },
  {
    "text": "distinct lambda functions that are not",
    "start": "208159",
    "end": "210560"
  },
  {
    "text": "the datadog forwarder",
    "start": "210560",
    "end": "213760"
  },
  {
    "text": "let's move on to aws usage",
    "start": "213760",
    "end": "216319"
  },
  {
    "text": "we consider a company to be quote",
    "start": "216319",
    "end": "218000"
  },
  {
    "text": "unquote using aws for this report if",
    "start": "218000",
    "end": "221040"
  },
  {
    "text": "they ran at least five distinct lambda",
    "start": "221040",
    "end": "223680"
  },
  {
    "text": "functions or five distinct ec2 instances",
    "start": "223680",
    "end": "227200"
  },
  {
    "text": "in any given month now the reason that",
    "start": "227200",
    "end": "229280"
  },
  {
    "text": "we do this is it allows us to capture an",
    "start": "229280",
    "end": "231280"
  },
  {
    "text": "aws user base comprising companies that",
    "start": "231280",
    "end": "233760"
  },
  {
    "text": "are exclusively running ec2 companies",
    "start": "233760",
    "end": "236400"
  },
  {
    "text": "that are exclusively running serverless",
    "start": "236400",
    "end": "238480"
  },
  {
    "text": "or companies that are running a mix of",
    "start": "238480",
    "end": "240400"
  },
  {
    "text": "both",
    "start": "240400",
    "end": "242720"
  },
  {
    "text": "scale of environments",
    "start": "242799",
    "end": "245519"
  },
  {
    "text": "to estimate the relative scale of a",
    "start": "245519",
    "end": "247120"
  },
  {
    "text": "company's infrastructure we examine the",
    "start": "247120",
    "end": "249040"
  },
  {
    "text": "company's usage of serverless of",
    "start": "249040",
    "end": "250959"
  },
  {
    "text": "containers of physical servers cloud",
    "start": "250959",
    "end": "253280"
  },
  {
    "text": "instances and a variety of other",
    "start": "253280",
    "end": "255519"
  },
  {
    "text": "infrastructure services offered by",
    "start": "255519",
    "end": "257280"
  },
  {
    "text": "amazon",
    "start": "257280",
    "end": "258400"
  },
  {
    "text": "so the boundaries between these",
    "start": "258400",
    "end": "259919"
  },
  {
    "text": "categories which for those this report",
    "start": "259919",
    "end": "262240"
  },
  {
    "text": "are small medium large and enterprise",
    "start": "262240",
    "end": "264800"
  },
  {
    "text": "they're necessarily artificial but i",
    "start": "264800",
    "end": "266880"
  },
  {
    "text": "can't say the trends across these",
    "start": "266880",
    "end": "268720"
  },
  {
    "text": "categories were very very clear",
    "start": "268720",
    "end": "272240"
  },
  {
    "text": "so do keep these definitions and this",
    "start": "272240",
    "end": "274080"
  },
  {
    "text": "methodology in mind as we go through",
    "start": "274080",
    "end": "275680"
  },
  {
    "text": "these numbers and through this data and",
    "start": "275680",
    "end": "277280"
  },
  {
    "text": "through these charts together",
    "start": "277280",
    "end": "280639"
  },
  {
    "start": "280000",
    "end": "280000"
  },
  {
    "text": "all right first up is adoption",
    "start": "280720",
    "end": "283120"
  },
  {
    "text": "just shy of half of data. customers that",
    "start": "283120",
    "end": "285520"
  },
  {
    "text": "use aws and now remember our methodology",
    "start": "285520",
    "end": "287840"
  },
  {
    "text": "here have now adopted lambda",
    "start": "287840",
    "end": "291040"
  },
  {
    "text": "this is up from about 20 in january of",
    "start": "291040",
    "end": "294000"
  },
  {
    "text": "2018 so what we're seeing here is a very",
    "start": "294000",
    "end": "296960"
  },
  {
    "text": "steady climb you will notice probably",
    "start": "296960",
    "end": "299600"
  },
  {
    "text": "the two little bumps there and there's",
    "start": "299600",
    "end": "301600"
  },
  {
    "text": "no way for us to definitively confirm",
    "start": "301600",
    "end": "303919"
  },
  {
    "text": "here but this is likely due to the",
    "start": "303919",
    "end": "305680"
  },
  {
    "text": "timing of re invent which is usually",
    "start": "305680",
    "end": "307280"
  },
  {
    "text": "late november early december",
    "start": "307280",
    "end": "310080"
  },
  {
    "text": "what does this mean to us",
    "start": "310080",
    "end": "311759"
  },
  {
    "text": "lambda is clearly no longer a niche",
    "start": "311759",
    "end": "313919"
  },
  {
    "text": "technology and it's realistically no",
    "start": "313919",
    "end": "316560"
  },
  {
    "text": "longer limited to cloud native early",
    "start": "316560",
    "end": "318240"
  },
  {
    "text": "adopters or niche use cases on the",
    "start": "318240",
    "end": "320560"
  },
  {
    "text": "contrary we're seeing serverless",
    "start": "320560",
    "end": "322720"
  },
  {
    "text": "functions are now in widespread use",
    "start": "322720",
    "end": "325280"
  },
  {
    "text": "across a variety of companies within",
    "start": "325280",
    "end": "327759"
  },
  {
    "text": "infrastructure and aws",
    "start": "327759",
    "end": "330560"
  },
  {
    "text": "not only that but lambda is more",
    "start": "330560",
    "end": "332240"
  },
  {
    "start": "331000",
    "end": "331000"
  },
  {
    "text": "prevalent in large environments and this",
    "start": "332240",
    "end": "334080"
  },
  {
    "text": "one was to be frank a little bit of a",
    "start": "334080",
    "end": "336000"
  },
  {
    "text": "surprise to me the widespread adoption",
    "start": "336000",
    "end": "338240"
  },
  {
    "text": "of lambda has not been driven by newer",
    "start": "338240",
    "end": "340720"
  },
  {
    "text": "smaller companies rather what we're",
    "start": "340720",
    "end": "342720"
  },
  {
    "text": "seeing is a clear correlation between",
    "start": "342720",
    "end": "344720"
  },
  {
    "text": "lambda adoption and the scale of a",
    "start": "344720",
    "end": "346560"
  },
  {
    "text": "company's environment so whether that",
    "start": "346560",
    "end": "348880"
  },
  {
    "text": "environment is primarily servers",
    "start": "348880",
    "end": "351039"
  },
  {
    "text": "primarily containers primarily",
    "start": "351039",
    "end": "352960"
  },
  {
    "text": "serverless or a mix it doesn't matter",
    "start": "352960",
    "end": "356720"
  },
  {
    "text": "in fact what we're seeing is among the",
    "start": "356720",
    "end": "358240"
  },
  {
    "text": "companies with the largest",
    "start": "358240",
    "end": "359680"
  },
  {
    "text": "infrastructure footprint which is all",
    "start": "359680",
    "end": "361120"
  },
  {
    "text": "the way to the right and labeled",
    "start": "361120",
    "end": "362400"
  },
  {
    "text": "enterprise here more than three quarters",
    "start": "362400",
    "end": "364880"
  },
  {
    "text": "have a dip adopted lambda while for the",
    "start": "364880",
    "end": "367280"
  },
  {
    "text": "smallest it's closer to one third so a",
    "start": "367280",
    "end": "369680"
  },
  {
    "text": "pretty stark difference",
    "start": "369680",
    "end": "371840"
  },
  {
    "text": "now many and as i indicated me included",
    "start": "371840",
    "end": "374319"
  },
  {
    "text": "i expected smaller kind of you you",
    "start": "374319",
    "end": "376319"
  },
  {
    "text": "perceive them to be more nimble",
    "start": "376319",
    "end": "377520"
  },
  {
    "text": "companies to be the early adopters here",
    "start": "377520",
    "end": "379199"
  },
  {
    "text": "and larger enterprises to be the",
    "start": "379199",
    "end": "380960"
  },
  {
    "text": "laggards but the numbers just do not",
    "start": "380960",
    "end": "382639"
  },
  {
    "text": "bear that out it is not the case and",
    "start": "382639",
    "end": "385199"
  },
  {
    "text": "we're continuing since this report to",
    "start": "385199",
    "end": "387199"
  },
  {
    "text": "see the trend of significant lambda",
    "start": "387199",
    "end": "389199"
  },
  {
    "text": "adoption in the largest organizations",
    "start": "389199",
    "end": "391120"
  },
  {
    "text": "accelerate even more",
    "start": "391120",
    "end": "392880"
  },
  {
    "text": "and a new thing that we're seeing more",
    "start": "392880",
    "end": "394720"
  },
  {
    "text": "and more of is customer facing",
    "start": "394720",
    "end": "397039"
  },
  {
    "text": "serverless applications",
    "start": "397039",
    "end": "398880"
  },
  {
    "text": "and one thing we see quite a bit is",
    "start": "398880",
    "end": "401120"
  },
  {
    "text": "lambda usage will start with a security",
    "start": "401120",
    "end": "403280"
  },
  {
    "text": "team within an organization and then",
    "start": "403280",
    "end": "405199"
  },
  {
    "text": "grow out to other teams from there",
    "start": "405199",
    "end": "408560"
  },
  {
    "text": "another thing we're seeing more and more",
    "start": "408560",
    "end": "410479"
  },
  {
    "text": "of as this report is released is an",
    "start": "410479",
    "end": "412240"
  },
  {
    "text": "increase in serverless first startups",
    "start": "412240",
    "end": "416080"
  },
  {
    "start": "417000",
    "end": "417000"
  },
  {
    "text": "moving on a bit container users have",
    "start": "417840",
    "end": "420319"
  },
  {
    "text": "absolutely flocked to lambda and at the",
    "start": "420319",
    "end": "422960"
  },
  {
    "text": "time this report which as i said was",
    "start": "422960",
    "end": "424720"
  },
  {
    "text": "early 2020 almost 80 percent of",
    "start": "424720",
    "end": "427520"
  },
  {
    "text": "organizations in aws that are running",
    "start": "427520",
    "end": "429599"
  },
  {
    "text": "containers have also adopted lambda now",
    "start": "429599",
    "end": "432479"
  },
  {
    "text": "obviously serverless functions and",
    "start": "432479",
    "end": "433919"
  },
  {
    "text": "containers are two very different things",
    "start": "433919",
    "end": "436000"
  },
  {
    "text": "they're very different environments that",
    "start": "436000",
    "end": "437360"
  },
  {
    "text": "have very different constraints but they",
    "start": "437360",
    "end": "439360"
  },
  {
    "text": "do tend to be adopted we're finding for",
    "start": "439360",
    "end": "441680"
  },
  {
    "text": "similar reasons the main one being",
    "start": "441680",
    "end": "444000"
  },
  {
    "text": "abstracting away that infrastructure",
    "start": "444000",
    "end": "445759"
  },
  {
    "text": "concern for ease of operations they both",
    "start": "445759",
    "end": "448240"
  },
  {
    "text": "do that and it's clear once you adopt",
    "start": "448240",
    "end": "450319"
  },
  {
    "text": "one you have a very high probability of",
    "start": "450319",
    "end": "452400"
  },
  {
    "text": "adopting the other",
    "start": "452400",
    "end": "455440"
  },
  {
    "start": "455000",
    "end": "455000"
  },
  {
    "text": "what we're seeing here amazon sqs and",
    "start": "456000",
    "end": "458479"
  },
  {
    "text": "dynamodb pair very well with lambda and",
    "start": "458479",
    "end": "461440"
  },
  {
    "text": "really this entire slide is about",
    "start": "461440",
    "end": "463120"
  },
  {
    "text": "natural fits",
    "start": "463120",
    "end": "464400"
  },
  {
    "text": "so lambda functions calling other lambda",
    "start": "464400",
    "end": "466720"
  },
  {
    "text": "functions is considered an anti-pattern",
    "start": "466720",
    "end": "469199"
  },
  {
    "text": "a few edge use cases aside",
    "start": "469199",
    "end": "472319"
  },
  {
    "text": "but lambda users have a wide variety of",
    "start": "472319",
    "end": "474720"
  },
  {
    "text": "technology choices when it comes to",
    "start": "474720",
    "end": "476240"
  },
  {
    "text": "connecting their functions to their",
    "start": "476240",
    "end": "477919"
  },
  {
    "text": "infrastructure or connecting their",
    "start": "477919",
    "end": "479440"
  },
  {
    "text": "functions to their application",
    "start": "479440",
    "end": "480720"
  },
  {
    "text": "components",
    "start": "480720",
    "end": "481840"
  },
  {
    "text": "the reality here is aws has a lot of",
    "start": "481840",
    "end": "484400"
  },
  {
    "text": "services",
    "start": "484400",
    "end": "485520"
  },
  {
    "text": "so once a function is triggered it",
    "start": "485520",
    "end": "487440"
  },
  {
    "text": "usually sends data or at least often",
    "start": "487440",
    "end": "489199"
  },
  {
    "text": "sends data",
    "start": "489199",
    "end": "490400"
  },
  {
    "text": "to a message queue which then routes",
    "start": "490400",
    "end": "492080"
  },
  {
    "text": "that data onward message queues help",
    "start": "492080",
    "end": "494479"
  },
  {
    "text": "organizations embrace that pay what you",
    "start": "494479",
    "end": "496800"
  },
  {
    "text": "want or pay for only what you use model",
    "start": "496800",
    "end": "498879"
  },
  {
    "text": "of serverless so once again as i said",
    "start": "498879",
    "end": "500720"
  },
  {
    "text": "this slide is all about natural fits so",
    "start": "500720",
    "end": "503759"
  },
  {
    "text": "among the services that are called or",
    "start": "503759",
    "end": "505520"
  },
  {
    "text": "queried in the same request as a lambda",
    "start": "505520",
    "end": "507599"
  },
  {
    "text": "function dynamodb comes out on top",
    "start": "507599",
    "end": "510960"
  },
  {
    "text": "again its auto scaling nature and low",
    "start": "510960",
    "end": "512880"
  },
  {
    "text": "latency make it a natural fit the next",
    "start": "512880",
    "end": "515440"
  },
  {
    "text": "most popular choices for data stores",
    "start": "515440",
    "end": "517518"
  },
  {
    "text": "when we're considering lambda here are",
    "start": "517519",
    "end": "519440"
  },
  {
    "text": "sql databases and that's whether we're",
    "start": "519440",
    "end": "521279"
  },
  {
    "text": "talking rds or we're talking",
    "start": "521279",
    "end": "522880"
  },
  {
    "text": "self-managed and then s3 in that order",
    "start": "522880",
    "end": "526720"
  },
  {
    "text": "sqs is the top choice for message queues",
    "start": "526720",
    "end": "529120"
  },
  {
    "text": "followed by kinesis and sns once again",
    "start": "529120",
    "end": "532080"
  },
  {
    "text": "respectively",
    "start": "532080",
    "end": "533360"
  },
  {
    "text": "now one thing we have seen",
    "start": "533360",
    "end": "535200"
  },
  {
    "text": "post releasing this report is appsync",
    "start": "535200",
    "end": "537839"
  },
  {
    "text": "usage among serverless customers is",
    "start": "537839",
    "end": "540160"
  },
  {
    "text": "accelerating rapidly what are the most",
    "start": "540160",
    "end": "542800"
  },
  {
    "text": "popular languages by distinct function",
    "start": "542800",
    "end": "545440"
  },
  {
    "start": "543000",
    "end": "543000"
  },
  {
    "text": "well amongst languages and frameworks we",
    "start": "545440",
    "end": "547920"
  },
  {
    "text": "see two clear clear leaders in terms of",
    "start": "547920",
    "end": "550399"
  },
  {
    "text": "usage and that's python and javascript",
    "start": "550399",
    "end": "553040"
  },
  {
    "text": "really by a node.js here so 47",
    "start": "553040",
    "end": "556399"
  },
  {
    "text": "of all deployed lambdas currently run",
    "start": "556399",
    "end": "558080"
  },
  {
    "text": "python and i'll note that's my language",
    "start": "558080",
    "end": "560000"
  },
  {
    "text": "of choice when i'm using serverless",
    "start": "560000",
    "end": "561839"
  },
  {
    "text": "myself and another 39 are running",
    "start": "561839",
    "end": "564640"
  },
  {
    "text": "node.js applications so as you can see",
    "start": "564640",
    "end": "566560"
  },
  {
    "text": "this is the vast vast majority in fact",
    "start": "566560",
    "end": "569519"
  },
  {
    "text": "the remaining 14",
    "start": "569519",
    "end": "571440"
  },
  {
    "text": "is split among java and go ruby.net and",
    "start": "571440",
    "end": "574560"
  },
  {
    "text": "all the other languages combined",
    "start": "574560",
    "end": "577519"
  },
  {
    "text": "one additional data point here on python",
    "start": "577519",
    "end": "580160"
  },
  {
    "text": "is that python 3 outweighs python 2",
    "start": "580160",
    "end": "583279"
  },
  {
    "text": "which remember this python 2 reached",
    "start": "583279",
    "end": "585360"
  },
  {
    "text": "onto life in january of 2020 by a factor",
    "start": "585360",
    "end": "588240"
  },
  {
    "text": "of roughly two to one i would have",
    "start": "588240",
    "end": "590480"
  },
  {
    "text": "thought it was a little higher than that",
    "start": "590480",
    "end": "591760"
  },
  {
    "text": "given the end of life but one thing",
    "start": "591760",
    "end": "593600"
  },
  {
    "text": "that's become clear based on this and",
    "start": "593600",
    "end": "595440"
  },
  {
    "text": "another data point that i'll get to",
    "start": "595440",
    "end": "596959"
  },
  {
    "text": "shortly is that there are quite a few",
    "start": "596959",
    "end": "598959"
  },
  {
    "text": "lambdas out there that haven't been",
    "start": "598959",
    "end": "600399"
  },
  {
    "text": "touched in quite some time",
    "start": "600399",
    "end": "604279"
  },
  {
    "start": "604000",
    "end": "604000"
  },
  {
    "text": "moving on to duration the median lambda",
    "start": "605760",
    "end": "608560"
  },
  {
    "text": "runs for just under 800 milliseconds and",
    "start": "608560",
    "end": "611600"
  },
  {
    "text": "this is averaged across all of its",
    "start": "611600",
    "end": "613279"
  },
  {
    "text": "invocations",
    "start": "613279",
    "end": "614560"
  },
  {
    "text": "one thing that you'll notice here is",
    "start": "614560",
    "end": "616079"
  },
  {
    "text": "that the tail of this latency",
    "start": "616079",
    "end": "617760"
  },
  {
    "text": "distribution is really long",
    "start": "617760",
    "end": "620320"
  },
  {
    "text": "digging in a little bit further you'll",
    "start": "620320",
    "end": "621600"
  },
  {
    "text": "find that nearly one-fifth of functions",
    "start": "621600",
    "end": "623839"
  },
  {
    "text": "execute within a hundred milliseconds",
    "start": "623839",
    "end": "625839"
  },
  {
    "text": "and then roughly one-third execute",
    "start": "625839",
    "end": "627760"
  },
  {
    "text": "within 400 milliseconds but",
    "start": "627760",
    "end": "630320"
  },
  {
    "text": "one-quarter have an average execution",
    "start": "630320",
    "end": "632480"
  },
  {
    "text": "time of more than three seconds and a",
    "start": "632480",
    "end": "634560"
  },
  {
    "text": "full 12 percent take 10 seconds or more",
    "start": "634560",
    "end": "637839"
  },
  {
    "text": "now this long duration is notable and",
    "start": "637839",
    "end": "640880"
  },
  {
    "text": "frankly a little surprising for two",
    "start": "640880",
    "end": "643440"
  },
  {
    "text": "reasons and that is because serverless",
    "start": "643440",
    "end": "645440"
  },
  {
    "text": "latency obviously not only impacts",
    "start": "645440",
    "end": "647839"
  },
  {
    "text": "performance that one's obvious but it",
    "start": "647839",
    "end": "649680"
  },
  {
    "text": "also directly impacts your costs here",
    "start": "649680",
    "end": "652079"
  },
  {
    "text": "remember lambda pricing is based on",
    "start": "652079",
    "end": "654240"
  },
  {
    "text": "gigabyte seconds of compute time which",
    "start": "654240",
    "end": "656240"
  },
  {
    "text": "is the memory allocated to the function",
    "start": "656240",
    "end": "658240"
  },
  {
    "text": "multiplied by the duration of its",
    "start": "658240",
    "end": "660000"
  },
  {
    "text": "invocations so like i said direct impact",
    "start": "660000",
    "end": "663360"
  },
  {
    "text": "this also segues nicely with half of",
    "start": "663360",
    "end": "665920"
  },
  {
    "start": "665000",
    "end": "665000"
  },
  {
    "text": "lambdas have a minimum memory allocated",
    "start": "665920",
    "end": "669440"
  },
  {
    "text": "so because of the aforementioned billing",
    "start": "669440",
    "end": "671839"
  },
  {
    "text": "model companies running lambda are",
    "start": "671839",
    "end": "673519"
  },
  {
    "text": "incentivized to limit the memory",
    "start": "673519",
    "end": "675200"
  },
  {
    "text": "allocation for their functions so keep",
    "start": "675200",
    "end": "677440"
  },
  {
    "text": "in mind this is a configurable knob this",
    "start": "677440",
    "end": "679600"
  },
  {
    "text": "is a setting and it's therefore much",
    "start": "679600",
    "end": "681360"
  },
  {
    "text": "easier to control than a function's",
    "start": "681360",
    "end": "683200"
  },
  {
    "text": "duration",
    "start": "683200",
    "end": "684480"
  },
  {
    "text": "again digging into the numbers a little",
    "start": "684480",
    "end": "685920"
  },
  {
    "text": "bit we find that 47 of functions are",
    "start": "685920",
    "end": "688560"
  },
  {
    "text": "configured to run with the minimum",
    "start": "688560",
    "end": "690079"
  },
  {
    "text": "memory setting of 128 megabytes now by",
    "start": "690079",
    "end": "692880"
  },
  {
    "text": "contrast only 14 percent of functions",
    "start": "692880",
    "end": "695519"
  },
  {
    "text": "have that allocation greater than 512",
    "start": "695519",
    "end": "697839"
  },
  {
    "text": "megs even though you can allocate up to",
    "start": "697839",
    "end": "700160"
  },
  {
    "text": "three gigs which we very rarely see",
    "start": "700160",
    "end": "703519"
  },
  {
    "text": "defined timeouts",
    "start": "703519",
    "end": "705200"
  },
  {
    "start": "704000",
    "end": "704000"
  },
  {
    "text": "here two-thirds of defined timelocks are",
    "start": "705200",
    "end": "707760"
  },
  {
    "text": "under one minute",
    "start": "707760",
    "end": "709200"
  },
  {
    "text": "so each landa again has a configurable",
    "start": "709200",
    "end": "711440"
  },
  {
    "text": "timeout setting ranging from a second to",
    "start": "711440",
    "end": "714079"
  },
  {
    "text": "15 minutes the default for some context",
    "start": "714079",
    "end": "716720"
  },
  {
    "text": "there is three seconds",
    "start": "716720",
    "end": "719360"
  },
  {
    "text": "so most functions",
    "start": "719360",
    "end": "721040"
  },
  {
    "text": "as is clear by this graph make use of a",
    "start": "721040",
    "end": "723360"
  },
  {
    "text": "short timeout in fact two thirds of",
    "start": "723360",
    "end": "725839"
  },
  {
    "text": "configured timeouts are 60 seconds or",
    "start": "725839",
    "end": "727760"
  },
  {
    "text": "less and almost half are under 30",
    "start": "727760",
    "end": "729920"
  },
  {
    "text": "seconds there's two reasons for that",
    "start": "729920",
    "end": "732320"
  },
  {
    "text": "first as i said the default is three",
    "start": "732320",
    "end": "734240"
  },
  {
    "text": "seconds far under the 30 second",
    "start": "734240",
    "end": "735920"
  },
  {
    "text": "threshold but something else to keep in",
    "start": "735920",
    "end": "738000"
  },
  {
    "text": "mind using api gateway to provide a rest",
    "start": "738000",
    "end": "740959"
  },
  {
    "text": "interface in front of a lambda is a",
    "start": "740959",
    "end": "742800"
  },
  {
    "text": "super common pattern that we see",
    "start": "742800",
    "end": "745839"
  },
  {
    "text": "because it itself has a maximum timeout",
    "start": "745839",
    "end": "748000"
  },
  {
    "text": "of 29 seconds any function behind an api",
    "start": "748000",
    "end": "750800"
  },
  {
    "text": "gateway that takes longer than 29",
    "start": "750800",
    "end": "752720"
  },
  {
    "text": "seconds to respond it will result in an",
    "start": "752720",
    "end": "754880"
  },
  {
    "text": "error regardless if if the lambda",
    "start": "754880",
    "end": "756800"
  },
  {
    "text": "eventually completes so that's another",
    "start": "756800",
    "end": "759200"
  },
  {
    "text": "reason you're going to see under 30",
    "start": "759200",
    "end": "760800"
  },
  {
    "text": "seconds here",
    "start": "760800",
    "end": "762240"
  },
  {
    "text": "you might be wondering what are the two",
    "start": "762240",
    "end": "764240"
  },
  {
    "text": "you know the in the middle there there's",
    "start": "764240",
    "end": "765519"
  },
  {
    "text": "a bump and then at the very end there's",
    "start": "765519",
    "end": "766800"
  },
  {
    "text": "a bump what are those on the graphs well",
    "start": "766800",
    "end": "768880"
  },
  {
    "text": "it turns out many functions have just",
    "start": "768880",
    "end": "770880"
  },
  {
    "text": "been configured and dialed up to use the",
    "start": "770880",
    "end": "772639"
  },
  {
    "text": "maximum allowable setting and that's",
    "start": "772639",
    "end": "774720"
  },
  {
    "text": "both the current 900 second setting",
    "start": "774720",
    "end": "776639"
  },
  {
    "text": "which is the one all the way to the",
    "start": "776639",
    "end": "777839"
  },
  {
    "text": "right and then the previous limit of 300",
    "start": "777839",
    "end": "780240"
  },
  {
    "text": "seconds you'll notice that one's",
    "start": "780240",
    "end": "781839"
  },
  {
    "text": "actually bigger than the one on the",
    "start": "781839",
    "end": "783040"
  },
  {
    "text": "right this went into effect in october",
    "start": "783040",
    "end": "785200"
  },
  {
    "text": "of 2018 so again we're seeing quite a",
    "start": "785200",
    "end": "787440"
  },
  {
    "text": "few lambdas that haven't been touched in",
    "start": "787440",
    "end": "789120"
  },
  {
    "text": "a while",
    "start": "789120",
    "end": "790560"
  },
  {
    "text": "lastly only four percent of functions",
    "start": "790560",
    "end": "793040"
  },
  {
    "start": "791000",
    "end": "791000"
  },
  {
    "text": "have a defined concurrency limit now by",
    "start": "793040",
    "end": "795519"
  },
  {
    "text": "default lambda customers are limited to",
    "start": "795519",
    "end": "797680"
  },
  {
    "text": "a thousand concurrent executions across",
    "start": "797680",
    "end": "800240"
  },
  {
    "text": "any given region for all functions from",
    "start": "800240",
    "end": "802480"
  },
  {
    "text": "there you can set per function",
    "start": "802480",
    "end": "804399"
  },
  {
    "text": "concurrency limits which effectively",
    "start": "804399",
    "end": "806160"
  },
  {
    "text": "reserve a portion of the total",
    "start": "806160",
    "end": "807600"
  },
  {
    "text": "concurrency for that function and if the",
    "start": "807600",
    "end": "809920"
  },
  {
    "text": "function then exceeds that limit it will",
    "start": "809920",
    "end": "811680"
  },
  {
    "text": "be throttled",
    "start": "811680",
    "end": "812880"
  },
  {
    "text": "today what we're seeing is only 4.2 of",
    "start": "812880",
    "end": "815760"
  },
  {
    "text": "all functions have a configured limit",
    "start": "815760",
    "end": "817920"
  },
  {
    "text": "even though most organizations are",
    "start": "817920",
    "end": "820079"
  },
  {
    "text": "definitely aware of that optional limit",
    "start": "820079",
    "end": "822560"
  },
  {
    "text": "how do we know they're aware of it well",
    "start": "822560",
    "end": "824399"
  },
  {
    "text": "88.6",
    "start": "824399",
    "end": "826000"
  },
  {
    "text": "of companies do make use of concurrency",
    "start": "826000",
    "end": "828160"
  },
  {
    "text": "limits for at least a single function in",
    "start": "828160",
    "end": "830240"
  },
  {
    "text": "their environment moving on to what",
    "start": "830240",
    "end": "832079"
  },
  {
    "text": "repercussions they have functions that",
    "start": "832079",
    "end": "834079"
  },
  {
    "text": "do have a defined concurrency limit are",
    "start": "834079",
    "end": "836160"
  },
  {
    "text": "far more likely to be throttled we took",
    "start": "836160",
    "end": "838800"
  },
  {
    "text": "a five-day evaluation window and found",
    "start": "838800",
    "end": "840720"
  },
  {
    "text": "that 8.3 of functions with the limit",
    "start": "840720",
    "end": "843440"
  },
  {
    "text": "were throttled at least once compared to",
    "start": "843440",
    "end": "845760"
  },
  {
    "text": "less than a third of a percent of",
    "start": "845760",
    "end": "847120"
  },
  {
    "text": "functions where the only constraint was",
    "start": "847120",
    "end": "848959"
  },
  {
    "text": "that per region limit i should note here",
    "start": "848959",
    "end": "851440"
  },
  {
    "text": "we don't have any data to share right",
    "start": "851440",
    "end": "853199"
  },
  {
    "text": "now on provision concurrency but it's",
    "start": "853199",
    "end": "855120"
  },
  {
    "text": "something that we do think is",
    "start": "855120",
    "end": "856240"
  },
  {
    "text": "interesting and something we will try to",
    "start": "856240",
    "end": "858079"
  },
  {
    "text": "include in an update of this report",
    "start": "858079",
    "end": "860320"
  },
  {
    "text": "that's digging into the data and those",
    "start": "860320",
    "end": "861920"
  },
  {
    "text": "are the charts and information that we",
    "start": "861920",
    "end": "863600"
  },
  {
    "text": "have i wanted to give just a couple",
    "start": "863600",
    "end": "865360"
  },
  {
    "text": "quotes that came up while we were",
    "start": "865360",
    "end": "866720"
  },
  {
    "text": "chatting with serverless customers and",
    "start": "866720",
    "end": "868320"
  },
  {
    "text": "this one is single engineers are now",
    "start": "868320",
    "end": "870480"
  },
  {
    "text": "shipping projects on the order of one to",
    "start": "870480",
    "end": "872320"
  },
  {
    "text": "two weeks that previously took multiple",
    "start": "872320",
    "end": "874959"
  },
  {
    "text": "people much longer and i thought this",
    "start": "874959",
    "end": "877360"
  },
  {
    "text": "one resonated i thought it's kind of",
    "start": "877360",
    "end": "878800"
  },
  {
    "text": "illustrative of the operational benefits",
    "start": "878800",
    "end": "880959"
  },
  {
    "text": "and increased efficiencies that we're",
    "start": "880959",
    "end": "882399"
  },
  {
    "text": "seeing many of our customers gain by",
    "start": "882399",
    "end": "884800"
  },
  {
    "text": "using serverless another one that i",
    "start": "884800",
    "end": "886720"
  },
  {
    "text": "found a little bit amusing and i would",
    "start": "886720",
    "end": "888160"
  },
  {
    "text": "thought i would include here is we no",
    "start": "888160",
    "end": "890000"
  },
  {
    "text": "longer have quote ops people and this",
    "start": "890000",
    "end": "892639"
  },
  {
    "text": "wasn't them saying that they were moving",
    "start": "892639",
    "end": "894000"
  },
  {
    "text": "to the devops model it was kind of a",
    "start": "894000",
    "end": "896320"
  },
  {
    "text": "joke that they had gone all in on",
    "start": "896320",
    "end": "898079"
  },
  {
    "text": "serverless and they got automatically",
    "start": "898079",
    "end": "900560"
  },
  {
    "text": "scalable and high availability and all",
    "start": "900560",
    "end": "902399"
  },
  {
    "text": "those things without any dedicated team",
    "start": "902399",
    "end": "905120"
  },
  {
    "text": "so once again thought this was a little",
    "start": "905120",
    "end": "907199"
  },
  {
    "text": "bit interesting",
    "start": "907199",
    "end": "908560"
  },
  {
    "text": "i would be remiss if i didn't mention a",
    "start": "908560",
    "end": "910560"
  },
  {
    "start": "910000",
    "end": "910000"
  },
  {
    "text": "couple of the common pain points that",
    "start": "910560",
    "end": "912399"
  },
  {
    "text": "we're seeing with serverless which like",
    "start": "912399",
    "end": "914079"
  },
  {
    "text": "i said of course do exist",
    "start": "914079",
    "end": "916079"
  },
  {
    "text": "so one thing that comes up a lot is",
    "start": "916079",
    "end": "918480"
  },
  {
    "text": "there are a lot of options for building",
    "start": "918480",
    "end": "920560"
  },
  {
    "text": "apis in serverless i mentioned api",
    "start": "920560",
    "end": "922959"
  },
  {
    "text": "gateway but some people feel like it's a",
    "start": "922959",
    "end": "924800"
  },
  {
    "text": "little bit cost prohibitive there's http",
    "start": "924800",
    "end": "927279"
  },
  {
    "text": "apis which are definitely less money but",
    "start": "927279",
    "end": "929759"
  },
  {
    "text": "are less feature-rich there's appsync",
    "start": "929759",
    "end": "931680"
  },
  {
    "text": "which we're seeing an uptick of there's",
    "start": "931680",
    "end": "933279"
  },
  {
    "text": "just a lot of options which add some",
    "start": "933279",
    "end": "935199"
  },
  {
    "text": "additional complexity in the actual",
    "start": "935199",
    "end": "937199"
  },
  {
    "text": "thought process of deciding and that's",
    "start": "937199",
    "end": "939360"
  },
  {
    "text": "the same ci cd comes up a lot as well",
    "start": "939360",
    "end": "941759"
  },
  {
    "text": "and again it's the abundance of options",
    "start": "941759",
    "end": "943839"
  },
  {
    "text": "here that can be a little bit tricky and",
    "start": "943839",
    "end": "945920"
  },
  {
    "text": "a little bit of a hurdle for adoption",
    "start": "945920",
    "end": "947680"
  },
  {
    "text": "what we're seeing is many folks will",
    "start": "947680",
    "end": "949759"
  },
  {
    "text": "have a ci cd that kicks off when changes",
    "start": "949759",
    "end": "951920"
  },
  {
    "text": "are merged into their main branch but in",
    "start": "951920",
    "end": "953839"
  },
  {
    "text": "that process we see a lot of trial a lot",
    "start": "953839",
    "end": "955600"
  },
  {
    "text": "of errors and a little bit of",
    "start": "955600",
    "end": "956880"
  },
  {
    "text": "frustration",
    "start": "956880",
    "end": "959040"
  },
  {
    "text": "another thing that we're seeing is stack",
    "start": "959040",
    "end": "960880"
  },
  {
    "text": "shift and what that is is most lambdas",
    "start": "960880",
    "end": "963120"
  },
  {
    "text": "are deployed in a cloud formation stack",
    "start": "963120",
    "end": "965199"
  },
  {
    "text": "so let's say you deploy a lambda in",
    "start": "965199",
    "end": "967279"
  },
  {
    "text": "cloud formation with one gig of memory",
    "start": "967279",
    "end": "969199"
  },
  {
    "text": "assigned but at some point someone not",
    "start": "969199",
    "end": "972079"
  },
  {
    "text": "being you goes into the aws console and",
    "start": "972079",
    "end": "974399"
  },
  {
    "text": "changes it let's say to a lower setting",
    "start": "974399",
    "end": "977040"
  },
  {
    "text": "now you're in a state where what you've",
    "start": "977040",
    "end": "978639"
  },
  {
    "text": "described in your infrastructure's code",
    "start": "978639",
    "end": "980560"
  },
  {
    "text": "isn't consistent with what's running and",
    "start": "980560",
    "end": "982480"
  },
  {
    "text": "now your ma yaml doesn't match reality",
    "start": "982480",
    "end": "985120"
  },
  {
    "text": "and we have seen this more and more",
    "start": "985120",
    "end": "988240"
  },
  {
    "text": "so with that i'd like to open it up for",
    "start": "988240",
    "end": "990160"
  },
  {
    "text": "questions once again my name is jeremy",
    "start": "990160",
    "end": "992000"
  },
  {
    "text": "and i'm the director of technical",
    "start": "992000",
    "end": "993279"
  },
  {
    "text": "community and open source here at",
    "start": "993279",
    "end": "994720"
  },
  {
    "text": "datadog and if you have any questions as",
    "start": "994720",
    "end": "997120"
  },
  {
    "text": "i said at linuxquestions on twitter",
    "start": "997120",
    "end": "999920"
  },
  {
    "text": "looking forward to your questions",
    "start": "999920",
    "end": "1003639"
  }
]