[
  {
    "text": "last year cluster api has been used rapidly and we have seen a lot of usage and there are plethora of cluster api",
    "start": "719",
    "end": "7440"
  },
  {
    "text": "providers for you to choose from but what if none of the existing providers",
    "start": "7440",
    "end": "12559"
  },
  {
    "text": "suit your use case in this conversation we will learn about the different provider types and also",
    "start": "12559",
    "end": "21279"
  },
  {
    "text": "we need to evaluate whether we really need to write a new provider if your answer is yes we can walk you through",
    "start": "21279",
    "end": "27439"
  },
  {
    "text": "how to build your own classroom provider over to my co-presenter",
    "start": "27439",
    "end": "33600"
  },
  {
    "text": "hi everyone my name is richard i'm a principal engineer at weaveworks i'm currently one of the maintainers of the",
    "start": "33600",
    "end": "40559"
  },
  {
    "text": "aws and micro vm cluster api providers this talk was uh how to build your own",
    "start": "40559",
    "end": "47200"
  },
  {
    "text": "one the easy way it's turning into how to do it the hard way um so we'll see what we can do",
    "start": "47200",
    "end": "53680"
  },
  {
    "text": "so just a recap on what cluster api provider is so it was originally",
    "start": "53680",
    "end": "59840"
  },
  {
    "text": "designed with the the premise that actually provisioning clusters and it's that the",
    "start": "59840",
    "end": "65198"
  },
  {
    "text": "life cycle of those classes is actually difficult um there's been many",
    "start": "65199",
    "end": "70799"
  },
  {
    "text": "many ways to provision clusters depending on your target environment and very little is being done to provide",
    "start": "70799",
    "end": "78479"
  },
  {
    "text": "consistency from a from a user experience point of view and this is really where cluster api comes into it",
    "start": "78479",
    "end": "84640"
  },
  {
    "text": "so if you've been building or provisioning clusters for a very very long time i'm sure you you've played",
    "start": "84640",
    "end": "91600"
  },
  {
    "text": "with things like papanetti's cops and various other things so cluster api provider tries to make",
    "start": "91600",
    "end": "98799"
  },
  {
    "text": "that experience and the way that you provision clusters consistent and so it does this by having this",
    "start": "98799",
    "end": "105200"
  },
  {
    "text": "concept of providers and providers are essentially the parts that do the infrastructure or",
    "start": "105200",
    "end": "113200"
  },
  {
    "text": "environment specific operations and they they talk nicely with core",
    "start": "113200",
    "end": "118560"
  },
  {
    "text": "cluster api and you perform your operations against the core cluster api types",
    "start": "118560",
    "end": "124079"
  },
  {
    "text": "and so it handles that aspect for you so in this in this session we were going",
    "start": "124079",
    "end": "129440"
  },
  {
    "text": "to walk you through some of the the main topics in in designing",
    "start": "129440",
    "end": "135440"
  },
  {
    "text": "developing testing and then releasing your your provider so i'm doing this all for",
    "start": "135440",
    "end": "142640"
  },
  {
    "text": "memory for my slides so as well as i guess the consistency in it from a",
    "start": "142640",
    "end": "149360"
  },
  {
    "text": "user perspective the cluster api also brings in higher level",
    "start": "149360",
    "end": "155680"
  },
  {
    "text": "functionalities so as well as just the pure provisioning of infrastructure and",
    "start": "155680",
    "end": "160879"
  },
  {
    "text": "then kubernetes on top of those it has higher order functionality like",
    "start": "160879",
    "end": "166080"
  },
  {
    "text": "automatically scaling or automatically",
    "start": "166080",
    "end": "171360"
  },
  {
    "text": "doing the upgrades of kubernetes versions for example and the other area is automatically",
    "start": "171360",
    "end": "177599"
  },
  {
    "text": "spreading machines across failure domains because you don't want all the machines in the same failure domain because if that rack goes down then your",
    "start": "177599",
    "end": "183920"
  },
  {
    "text": "whole cluster goes down so there's lots of functionality built into the cluster api like that",
    "start": "183920",
    "end": "190800"
  },
  {
    "text": "so we're still observing issues so the core to cluster api is this concept",
    "start": "190800",
    "end": "198080"
  },
  {
    "text": "of a provider and a provider is can seem scary but essentially a",
    "start": "198080",
    "end": "204560"
  },
  {
    "text": "provider is is just a kubernetes operator so if you've built a kubernetes operator",
    "start": "204560",
    "end": "211440"
  },
  {
    "text": "previously then you should have no problem building a cluster api",
    "start": "211440",
    "end": "216879"
  },
  {
    "text": "is it is it the anticipation is amazing um",
    "start": "216879",
    "end": "222480"
  },
  {
    "text": "so yeah so if you've built a communities operator in the past then you should have no problems",
    "start": "222480",
    "end": "229200"
  },
  {
    "text": "yes fantastic can i also",
    "start": "233280",
    "end": "238640"
  },
  {
    "text": "yeah we still got problems um",
    "start": "262720",
    "end": "266759"
  },
  {
    "text": "so i'm back to entertain you um so so where were we so yeah we were talking about um the provider is basically a",
    "start": "268639",
    "end": "275600"
  },
  {
    "text": "kubernetes operator and as such there is going to be uh a number of custom resources for for",
    "start": "275600",
    "end": "282639"
  },
  {
    "text": "your your provider and those resources have to adhere to a contract and that",
    "start": "282639",
    "end": "287759"
  },
  {
    "text": "contract is dependent on the provider type that you are building so this will cover provider type shortly and",
    "start": "287759",
    "end": "294080"
  },
  {
    "text": "hopefully we'll have the diagrams before then so then they're with along with those custom resource definitions",
    "start": "294080",
    "end": "301600"
  },
  {
    "text": "very fantastic",
    "start": "301600",
    "end": "306479"
  },
  {
    "text": "so i should have started with this actually so a couple of quick questions um for your hands in your hair",
    "start": "307680",
    "end": "314000"
  },
  {
    "text": "who uses cluster api already many people fantastic",
    "start": "314000",
    "end": "319520"
  },
  {
    "text": "who actually contributes to cappy or a provider",
    "start": "319520",
    "end": "325120"
  },
  {
    "text": "brilliant and actually and who's thinking of building a provider",
    "start": "325120",
    "end": "330960"
  },
  {
    "text": "wow i'm actually quite surprised so that yeah that's really good so this session was mainly focused on",
    "start": "330960",
    "end": "337039"
  },
  {
    "text": "people for the last question who want to actually build their own provider but hopefully there will be some",
    "start": "337039",
    "end": "343039"
  },
  {
    "text": "be useful for everyone else so let's skip forward to that",
    "start": "343039",
    "end": "349360"
  },
  {
    "text": "a couple of things i didn't mention here is um so core to to the life cycle of",
    "start": "349360",
    "end": "357919"
  },
  {
    "text": "cluster cut [Music] call to apis yeah it's mandatory",
    "start": "358160",
    "end": "364000"
  },
  {
    "text": "so spacing operator it has to adhere to the contract and that contract is dependent",
    "start": "364000",
    "end": "369360"
  },
  {
    "text": "on the provider type um the contract is important because it allows that interaction between core",
    "start": "369360",
    "end": "375600"
  },
  {
    "text": "capi and the providers so that things can talk so i've mentioned provider types a",
    "start": "375600",
    "end": "381759"
  },
  {
    "text": "couple of times so there are three provider types currently in cluster api",
    "start": "381759",
    "end": "387360"
  },
  {
    "text": "so the first and probably the most widely used provider type is the infrastructure",
    "start": "387360",
    "end": "392400"
  },
  {
    "text": "provider you can probably guess from the name the infrastructure provider",
    "start": "392400",
    "end": "399360"
  },
  {
    "text": "is mainly concerned with provisioning the infrastructure that is required for",
    "start": "399360",
    "end": "404639"
  },
  {
    "text": "your cluster it is not concerned with kubernetes itself and bootstrapping kubernetes",
    "start": "404639",
    "end": "411599"
  },
  {
    "text": "it's just purely building that environment for you so as an example the cluster api provider for aws or",
    "start": "411599",
    "end": "419280"
  },
  {
    "text": "kappa is is an infrastructure provider and it provisions aws resources such as you",
    "start": "419280",
    "end": "427199"
  },
  {
    "text": "know vpcs uh or security groups etc and those are then used as a basis to to",
    "start": "427199",
    "end": "434080"
  },
  {
    "text": "create the kubernetes cluster i mentioned that",
    "start": "434080",
    "end": "440160"
  },
  {
    "text": "the infrastructure provider doesn't uh boost doesn't provision kubernetes itself and that's actually",
    "start": "440160",
    "end": "446560"
  },
  {
    "text": "handled by a bootstrap provider which is our second type of provider",
    "start": "446560",
    "end": "451840"
  },
  {
    "text": "the bootstrap provider as the name suggests is actually used to bootstrap kubernetes on top of the infrastructure",
    "start": "451840",
    "end": "457440"
  },
  {
    "text": "that has been provisioned",
    "start": "457440",
    "end": "460720"
  },
  {
    "text": "and then it will then create or join machines to a",
    "start": "462720",
    "end": "469120"
  },
  {
    "text": "existing cluster there are generally two parts to this bootstrap process",
    "start": "469120",
    "end": "474240"
  },
  {
    "text": "the first part is the actual command so how do i create a kubernetes cluster",
    "start": "474240",
    "end": "479919"
  },
  {
    "text": "and how do i join one so think something like cube adm here so that is the nuts and bolts of how i",
    "start": "479919",
    "end": "486080"
  },
  {
    "text": "create a kubernetes cluster the second part is how do i format those commands so that they can be run",
    "start": "486080",
    "end": "494160"
  },
  {
    "text": "so generally this involves putting them into a specific format so something like",
    "start": "494160",
    "end": "499599"
  },
  {
    "text": "cloud init or ignition and making that making that available",
    "start": "499599",
    "end": "505039"
  },
  {
    "text": "via a secret or s3 so that so that secret can then be used",
    "start": "505039",
    "end": "511759"
  },
  {
    "text": "by the infrastructure provider when provisioning machines so that it can execute those commands as",
    "start": "511759",
    "end": "517518"
  },
  {
    "text": "part of creating that machine via user data or some other mechanism",
    "start": "517519",
    "end": "524639"
  },
  {
    "text": "the third the third provider type is the control plane provider and this essentially",
    "start": "525120",
    "end": "530560"
  },
  {
    "text": "represents the control plane of your your kubernetes cluster it can you can take advantage of",
    "start": "530560",
    "end": "538240"
  },
  {
    "text": "bootstrap and infrastructure providers to do certain tasks but it's purely focused on the control",
    "start": "538240",
    "end": "543519"
  },
  {
    "text": "plane if you have something like a managed",
    "start": "543519",
    "end": "549279"
  },
  {
    "text": "kubernetes service this might actually directly be responsible for creating and manage",
    "start": "549279",
    "end": "556800"
  },
  {
    "text": "managing something like eks or aks but generally you know it might be",
    "start": "556800",
    "end": "563040"
  },
  {
    "text": "responsible for also provisioning the machine the machines under that the reason for this is it means that you",
    "start": "563040",
    "end": "569360"
  },
  {
    "text": "can control the life cycle of the control plane differently to the actual worker nodes",
    "start": "569360",
    "end": "576480"
  },
  {
    "text": "so the first rule of creating a provider this is a bit tongue-in-cheek",
    "start": "576480",
    "end": "582160"
  },
  {
    "text": "you don't need to really create a provider so you know actually",
    "start": "582160",
    "end": "587600"
  },
  {
    "text": "you know there are a lot of providers already so that the hope is that there is already a provider that you need",
    "start": "587600",
    "end": "593839"
  },
  {
    "text": "creating a provider a provider or generally an operator is a lot easier nowadays with things",
    "start": "593839",
    "end": "600800"
  },
  {
    "text": "like q builder and controller runtime but it's still non-trivial",
    "start": "600800",
    "end": "606320"
  },
  {
    "text": "and then there is a cost and an ongoing burden to you as as for building that",
    "start": "606320",
    "end": "612720"
  },
  {
    "text": "so what actually constitutes a cluster api provider as i mentioned before it's basically a",
    "start": "614320",
    "end": "621440"
  },
  {
    "text": "kubernetes operator sometimes it's referred to as a controller manager",
    "start": "621440",
    "end": "626800"
  },
  {
    "text": "so this has basically means so it has crds and it has controllers that reconcile those crds",
    "start": "626800",
    "end": "633519"
  },
  {
    "text": "additionally there's going to be some some kubernetes",
    "start": "633519",
    "end": "638640"
  },
  {
    "text": "resources to deploy your controller into a cluster instant management cluster",
    "start": "638640",
    "end": "644160"
  },
  {
    "text": "so this is plain old plain old demo uh there will be a deployment a bunch of our back maybe some secrets you know",
    "start": "644160",
    "end": "650640"
  },
  {
    "text": "whatever just just normal kubernetes yaml you have the option within those to",
    "start": "650640",
    "end": "656800"
  },
  {
    "text": "tokenize various parts of it so that you can override those when the providers are installed",
    "start": "656800",
    "end": "662640"
  },
  {
    "text": "so this might be useful for credentials or secrets that may be used to connect to aws or something like that",
    "start": "662640",
    "end": "669759"
  },
  {
    "text": "within that customize and m subs is used heavily lastly there are some requirements uh on",
    "start": "670640",
    "end": "678320"
  },
  {
    "text": "you as a provider implementer around how you structure your your git repo",
    "start": "678320",
    "end": "683519"
  },
  {
    "text": "and the git releases and some some files within your repo",
    "start": "683519",
    "end": "688800"
  },
  {
    "text": "so i'm going to move on to actually the the resource kinds so this is a",
    "start": "688800",
    "end": "695120"
  },
  {
    "text": "diagram that we generally use the reason we're going to cover this is because it's really important when you",
    "start": "695120",
    "end": "701040"
  },
  {
    "text": "implement a provider cappy has a number of different custom resources",
    "start": "701040",
    "end": "706240"
  },
  {
    "text": "and are basically used to logically represent a kubernetes cluster and its life cycle",
    "start": "706240",
    "end": "712480"
  },
  {
    "text": "so you can see this these are basically the grey boxes here they represent um",
    "start": "712639",
    "end": "717920"
  },
  {
    "text": "those the cappy resource kinds so the cluster at the top there",
    "start": "717920",
    "end": "723360"
  },
  {
    "text": "that represents the cluster as a whole so think of that as as the route",
    "start": "723360",
    "end": "729360"
  },
  {
    "text": "and it has general configuration so things like pod cider blocks or service cider blocks",
    "start": "729360",
    "end": "734800"
  },
  {
    "text": "that are not specific to to infrastructure or how you actually uh provision or boot kubernetes",
    "start": "734800",
    "end": "742560"
  },
  {
    "text": "it's really really important to to remember that the cluster at the top here is is the the root and the owner of",
    "start": "742560",
    "end": "749120"
  },
  {
    "text": "all of the other resource kinds so you end up with essentially a um",
    "start": "749120",
    "end": "755040"
  },
  {
    "text": "a tree of ownership um and this you will see more of this later on",
    "start": "755040",
    "end": "760399"
  },
  {
    "text": "we then have a number of resource kinds that represents individual machines that are used as nodes for your",
    "start": "760399",
    "end": "767519"
  },
  {
    "text": "kubernetes cluster so we have machine on the left there so that represents a",
    "start": "767519",
    "end": "773760"
  },
  {
    "text": "individual machine and a node in in a cluster so there's a one-to-one map in there",
    "start": "773760",
    "end": "779360"
  },
  {
    "text": "so then we have something in the middle which is called a machine deployment and that represents a set of machines",
    "start": "779360",
    "end": "786399"
  },
  {
    "text": "that have the same template and you you specify a number of replicas for those",
    "start": "786399",
    "end": "792800"
  },
  {
    "text": "then we have the machine pool so this represents again a set of machines",
    "start": "792800",
    "end": "798480"
  },
  {
    "text": "but that pooler machines can scale up and down and it's normally backed by a",
    "start": "798480",
    "end": "804240"
  },
  {
    "text": "an infrastructure specific service so think of water scale groups in aws or",
    "start": "804240",
    "end": "809279"
  },
  {
    "text": "virtual machine scale sets in azure",
    "start": "809279",
    "end": "813880"
  },
  {
    "text": "so now we're going to move on to creating a specific provider type so",
    "start": "815839",
    "end": "822000"
  },
  {
    "text": "if you're going to create a bootstrap provider so then you're going to need to create a custom resource that represents",
    "start": "822000",
    "end": "828720"
  },
  {
    "text": "uh the bootstrap information for for kubernetes it will need to contain all of the",
    "start": "828720",
    "end": "834959"
  },
  {
    "text": "configuration so you need to represent that within your custom resource about how you will",
    "start": "834959",
    "end": "840720"
  },
  {
    "text": "will boot sorry provision kubernetes or and either create it or join a cluster",
    "start": "840720",
    "end": "848079"
  },
  {
    "text": "for example you would have cube adm here so capi comes with a cube adm bootstrap",
    "start": "848079",
    "end": "855199"
  },
  {
    "text": "provider and this this exposes the cube adm configuration for you you'll see that in this diagram that",
    "start": "855199",
    "end": "861279"
  },
  {
    "text": "i've highlighted so the bootstrap providers here are in pink and i've drawn and we've put them on",
    "start": "861279",
    "end": "867199"
  },
  {
    "text": "there so they're encompassed by the cappy resource kinds now this is this is on purpose this is basically to show",
    "start": "867199",
    "end": "874240"
  },
  {
    "text": "that the capital capi types uh own and reference the the bootstrap",
    "start": "874240",
    "end": "880959"
  },
  {
    "text": "provider's configuration so this is a common pattern",
    "start": "880959",
    "end": "886160"
  },
  {
    "text": "you can also see here that the bootstrap information is required by all by all of the machine variants so normal machines",
    "start": "886480",
    "end": "893839"
  },
  {
    "text": "machine deployments and also machine pools just to give an example here um i've",
    "start": "893839",
    "end": "899920"
  },
  {
    "text": "noticed there's a bit of a typo towards the bottom there so this is a snippet of a cluster so",
    "start": "899920",
    "end": "904959"
  },
  {
    "text": "so the top level and in it you can see it's referencing two different provider types",
    "start": "904959",
    "end": "910160"
  },
  {
    "text": "so there's an infrastructure provider referenced by the infrastructure ref and then there's a control plane",
    "start": "910160",
    "end": "916320"
  },
  {
    "text": "provider referenced by the control plane ref",
    "start": "916320",
    "end": "921519"
  },
  {
    "text": "both of these will implement that contract the relevant contracts for their provider type so it's really",
    "start": "921519",
    "end": "926720"
  },
  {
    "text": "important and anytime you see something ref it's normally a reference to another provider or similar or",
    "start": "926720",
    "end": "935360"
  },
  {
    "text": "so moving on to the infrastructure provider so this is the most the most common one",
    "start": "935920",
    "end": "941360"
  },
  {
    "text": "so this is used to represent the infrastructure you will be creating in your target environment so if you are",
    "start": "941360",
    "end": "948240"
  },
  {
    "text": "creating clusters in aws this will be aws specific infrastructure configuration",
    "start": "948240",
    "end": "954880"
  },
  {
    "text": "in this diagram they are in the orange boxes",
    "start": "954880",
    "end": "959600"
  },
  {
    "text": "so it normally relates to networking and security group stuff it's",
    "start": "960959",
    "end": "966320"
  },
  {
    "text": "not specifically for kubernetes and it's not specifically about machines generally um",
    "start": "966320",
    "end": "972480"
  },
  {
    "text": "you know there is it's not so black and white with that you know there are shades of grey within",
    "start": "972480",
    "end": "978240"
  },
  {
    "text": "that the infrastructure machine kinds will all contain configuration that is",
    "start": "978240",
    "end": "983759"
  },
  {
    "text": "specific to creating whatever compute kubernetes is going to sit on so this could be things like ec2 instances or",
    "start": "983759",
    "end": "991839"
  },
  {
    "text": "gcp compute instances one other thing to note from this one",
    "start": "991839",
    "end": "997680"
  },
  {
    "text": "diagram is it also uh gives an example of some of the naming conventions that",
    "start": "997680",
    "end": "1003279"
  },
  {
    "text": "as a provider implementer most providers follow so you'll see at the top here we have something called",
    "start": "1003279",
    "end": "1009759"
  },
  {
    "text": "aws cluster or podman cluster so the provider name is generally prefixed on your custom resource types",
    "start": "1009759",
    "end": "1019519"
  },
  {
    "text": "so you're probably getting a good id you know good idea of how this is represented now and that actually",
    "start": "1020240",
    "end": "1025520"
  },
  {
    "text": "applies to the control plane provider as well so now over to a new show thank you",
    "start": "1025520",
    "end": "1032240"
  },
  {
    "text": "so before getting into the nitty-gritties of writing a provider let's do a small refresher course on the",
    "start": "1032240",
    "end": "1038240"
  },
  {
    "text": "basics so what is an operator an operator is a way to create manage and",
    "start": "1038240",
    "end": "1043760"
  },
  {
    "text": "configure complex kubernetes applications suppose say you want to create a kubernetes cluster",
    "start": "1043760",
    "end": "1049919"
  },
  {
    "text": "the steps involved are creating an infrastructure bootstrapping kubernetes possibly using cube adm and then managing the versions",
    "start": "1049919",
    "end": "1057280"
  },
  {
    "text": "an operator codifies all of these steps for you and the native way to do this in kubernetes is where declarative apis or",
    "start": "1057280",
    "end": "1064880"
  },
  {
    "text": "crds or customer resource definition as we all know it using a crd you can",
    "start": "1064880",
    "end": "1070480"
  },
  {
    "text": "specify the infrastructure of your choice specify how you want to bootstrap kubernetes and specify versions etc",
    "start": "1070480",
    "end": "1077200"
  },
  {
    "text": "these crds are then monitored and reconciled by one or more controllers that brings to our next question what's",
    "start": "1077200",
    "end": "1083679"
  },
  {
    "text": "a controller a controller is nothing but a control loop that watches the desired",
    "start": "1083679",
    "end": "1088720"
  },
  {
    "text": "state of the cluster through the api server and continuously reconciles to move from the current state to the",
    "start": "1088720",
    "end": "1094640"
  },
  {
    "text": "desired state one last bit about the control loop so this is the core principle of kubernetes",
    "start": "1094640",
    "end": "1102080"
  },
  {
    "text": "you watch for the changes in the resources that you're interested in if there are if there's any diff you take",
    "start": "1102080",
    "end": "1108240"
  },
  {
    "text": "necessary action to move from the current state to the desired state and this works in an infinite loop so",
    "start": "1108240",
    "end": "1114559"
  },
  {
    "text": "basically watch diff act repeat is your mantra",
    "start": "1114559",
    "end": "1119840"
  },
  {
    "text": "so richard spoke about three different types of providers and let's look at in what scenario you may",
    "start": "1120799",
    "end": "1126400"
  },
  {
    "text": "want to write what kind of provider if you are operating on a cloud or bare",
    "start": "1126400",
    "end": "1131600"
  },
  {
    "text": "metal service then you will need an infrastructure provider if you want a different way to bootstrap",
    "start": "1131600",
    "end": "1137280"
  },
  {
    "text": "kubernetes instead of cube adm then you would need a bootstrap provider and maybe a complementing control plane",
    "start": "1137280",
    "end": "1143039"
  },
  {
    "text": "provider as well if you have a hosted kubernetes control plane service no surprises there you",
    "start": "1143039",
    "end": "1148480"
  },
  {
    "text": "need a control plane provider but if you want to use virtualization technologies like vsphere or kvm then",
    "start": "1148480",
    "end": "1155120"
  },
  {
    "text": "you need an infrastructure provider but make sure to check out the existing providers like vsphere micro vm and cube",
    "start": "1155120",
    "end": "1162400"
  },
  {
    "text": "word because more often than not they would solve your use case if you want to provision your own",
    "start": "1162400",
    "end": "1168240"
  },
  {
    "text": "infrastructure and get cappy to manage kubernetes on them you can use the existing bring your own host provider it",
    "start": "1168240",
    "end": "1174320"
  },
  {
    "text": "is used to provision kubernetes on top of your existing infrastructure or something like cluster api provider for",
    "start": "1174320",
    "end": "1180240"
  },
  {
    "text": "aws wherein say you want to create or configure your own vpc and want to make that vpc as part of your cluster",
    "start": "1180240",
    "end": "1187600"
  },
  {
    "text": "if none of the existing providers suit your use case then you may want to write",
    "start": "1187600",
    "end": "1193120"
  },
  {
    "text": "one or all of the different kinds of providers that we've mentioned so far",
    "start": "1193120",
    "end": "1198240"
  },
  {
    "text": "okay now that you have decided you absolutely need to write a new provider and none of the existing providers suit",
    "start": "1198240",
    "end": "1204000"
  },
  {
    "text": "your need let's look at what are the basic steps in creating a new provider",
    "start": "1204000",
    "end": "1209440"
  },
  {
    "text": "we so for writing a new provider q builder and controller runtime are your friends",
    "start": "1209440",
    "end": "1214880"
  },
  {
    "text": "we start off with the cube builder init command this generates the basic repository layout for your provider it",
    "start": "1214880",
    "end": "1222159"
  },
  {
    "text": "creates the necessary docker files make files project files and a starting main dot go for your project",
    "start": "1222159",
    "end": "1229440"
  },
  {
    "text": "also make sure to provide the versioning information and this should be confirmed with kubernetes versioning",
    "start": "1229440",
    "end": "1235440"
  },
  {
    "text": "standard it all queue builder also allows for you to create controllers for the crds that",
    "start": "1235440",
    "end": "1241280"
  },
  {
    "text": "you have created to create crds you will use the cube builder create api command and",
    "start": "1241280",
    "end": "1247120"
  },
  {
    "text": "throughout this talk we will be referring to a hypothetical infrastructure cluster api provider for",
    "start": "1247120",
    "end": "1252880"
  },
  {
    "text": "podman so all of the crd and controller references will be with respect to this provider",
    "start": "1252880",
    "end": "1258720"
  },
  {
    "text": "so we use the q builder create api command to create the crds and we have an option to also create a controller",
    "start": "1258720",
    "end": "1264960"
  },
  {
    "text": "for the crd most of the times you would need a controller because the controller is the",
    "start": "1264960",
    "end": "1270320"
  },
  {
    "text": "one that is continuously monitoring for the crd that you created but there are also times when you don't",
    "start": "1270320",
    "end": "1276880"
  },
  {
    "text": "need a controller something like a podman machine template so this provides a blueprint",
    "start": "1276880",
    "end": "1283360"
  },
  {
    "text": "that can be create that can be used to create podman instances out of so the podman machine template is used",
    "start": "1283360",
    "end": "1289600"
  },
  {
    "text": "to create podman machine resources which in turn is reconciled by podman machine controller therefore you would not need",
    "start": "1289600",
    "end": "1296000"
  },
  {
    "text": "a podman machine template controller so you also need to specify metadata",
    "start": "1296000",
    "end": "1303200"
  },
  {
    "text": "this is to specify the compatibility of your provider with the cluster api contract",
    "start": "1303200",
    "end": "1308559"
  },
  {
    "text": "this is mainly used by the class api command line tool that is cluster ctl",
    "start": "1308559",
    "end": "1313600"
  },
  {
    "text": "cluster ctl can be used to initialize your provider so it so like in the snippet here major 0 and minor 1 means",
    "start": "1313600",
    "end": "1320840"
  },
  {
    "text": "0.1.x of your provider is conformant with v 1 beta 1 contract of cluster api",
    "start": "1320840",
    "end": "1328480"
  },
  {
    "text": "so defining the api so cube builder would have scaffolded some code for you so these are basically",
    "start": "1329440",
    "end": "1335120"
  },
  {
    "text": "for an api it creates a apartment cluster spec and a podman cluster status",
    "start": "1335120",
    "end": "1340640"
  },
  {
    "text": "but there are some fields that your type of provider has to be conformed with cluster api",
    "start": "1340640",
    "end": "1346400"
  },
  {
    "text": "as in this example we add a control plane endpoint and this field represents the end point that is used to",
    "start": "1346400",
    "end": "1351840"
  },
  {
    "text": "communicate with your control plane similarly there's a ready field in the podman cluster status this is used to",
    "start": "1351840",
    "end": "1358000"
  },
  {
    "text": "indicate that if your infrastructure is ready or not these fields in turn are read by cluster",
    "start": "1358000",
    "end": "1363440"
  },
  {
    "text": "api crds like the cluster crd to indicate the overall readiness of your cluster",
    "start": "1363440",
    "end": "1368880"
  },
  {
    "text": "so apart from these absolutely necessary fields you can also specify fields that make",
    "start": "1368880",
    "end": "1374880"
  },
  {
    "text": "sense only to your provider for example in this case provider id and extra amounts",
    "start": "1374880",
    "end": "1381440"
  },
  {
    "text": "so finalizers also play a very good role in writing your provider so finalizers provide a way for the",
    "start": "1381919",
    "end": "1388559"
  },
  {
    "text": "controller to clean up any external resources that it has created before deleting the api resource itself so",
    "start": "1388559",
    "end": "1395440"
  },
  {
    "text": "while writing a provider you'll mostly end up creating external resources so it's always a good idea to add",
    "start": "1395440",
    "end": "1400799"
  },
  {
    "text": "finalizers to your api resources in the controller",
    "start": "1400799",
    "end": "1405919"
  },
  {
    "text": "so this is one such example so this is a reconcile normal function a reconcile normal function is for a create or an",
    "start": "1406320",
    "end": "1413200"
  },
  {
    "text": "update flow you would have an equivalent reconciled delete function for a delete",
    "start": "1413200",
    "end": "1418559"
  },
  {
    "text": "api workflow so as you can see we are using controller util dot add finalizer and",
    "start": "1418559",
    "end": "1424240"
  },
  {
    "text": "you have an equivalent remove finalizer so whenever you add this finalizer make sure are patching the object so that the",
    "start": "1424240",
    "end": "1430880"
  },
  {
    "text": "changes are persisted in the api server similarly in the delete workflow make sure to remove those finalizers",
    "start": "1430880",
    "end": "1438880"
  },
  {
    "text": "next we go into implementing the controller for the api types that we've created cube builder would have scaffolded",
    "start": "1439919",
    "end": "1447679"
  },
  {
    "text": "controllers for you these controllers pretty much contain two functions one is reconcile and other is set up with",
    "start": "1447679",
    "end": "1453520"
  },
  {
    "text": "manager the rest of the logic can reconcile should be filled by the provider implementer",
    "start": "1453520",
    "end": "1459760"
  },
  {
    "text": "you can do additional things like add cue builder annotations to watch for any additional crds that you want or basic",
    "start": "1459760",
    "end": "1466320"
  },
  {
    "text": "logic like if your cluster or your api resource is paused make sure not to go ahead with the reconciliation or don't",
    "start": "1466320",
    "end": "1472960"
  },
  {
    "text": "do reconciliation if it is an externally managed resource",
    "start": "1472960",
    "end": "1477919"
  },
  {
    "text": "so this is the typical set of steps if you are writing a provider this specific example is for",
    "start": "1478480",
    "end": "1484240"
  },
  {
    "text": "an infrastructure machine controller so the first step is get the instance of the api type being reconciled using a",
    "start": "1484240",
    "end": "1491440"
  },
  {
    "text": "get call on the api resource then get the owning capi type we'll get to owner references in a bit example if",
    "start": "1491440",
    "end": "1498240"
  },
  {
    "text": "we are reconciling a podman machine get the machine resource if we are reconciling podman cluster get the",
    "start": "1498240",
    "end": "1503520"
  },
  {
    "text": "cluster resource if we don't have this owner reference set yet we exit from the control loop",
    "start": "1503520",
    "end": "1510080"
  },
  {
    "text": "optionally you can also get cluster and infrastructure cluster objects and then from this top level reconcile",
    "start": "1510080",
    "end": "1516559"
  },
  {
    "text": "function we either break into a reconcile normal or a reconciled delete now this depends on the deletion time",
    "start": "1516559",
    "end": "1522640"
  },
  {
    "text": "stamp on the resource so if a resource with a finalizer field set is",
    "start": "1522640",
    "end": "1529279"
  },
  {
    "text": "is requested for a delete call kubernetes does not directly delete the resource instead it updates the resource",
    "start": "1529279",
    "end": "1536559"
  },
  {
    "text": "with a deletion timestamp field so if the deletion timestamp field is",
    "start": "1536559",
    "end": "1541600"
  },
  {
    "text": "present on the resource then it means it's a delete request you jump into the reconcile delete function",
    "start": "1541600",
    "end": "1547120"
  },
  {
    "text": "you clean up any externally managed resources that you want and then remove the finalizer so that your resources can",
    "start": "1547120",
    "end": "1553440"
  },
  {
    "text": "be deleted from the api server if there is no deletion timestamp on the",
    "start": "1553440",
    "end": "1559600"
  },
  {
    "text": "resource then it means it's either a create or an update request and you jump into the reconcile normal function so",
    "start": "1559600",
    "end": "1565840"
  },
  {
    "text": "the first step that you do here is to add the finalizer field and then proceed towards any actions for creating or",
    "start": "1565840",
    "end": "1571919"
  },
  {
    "text": "updating your resource so owner references are heavily used in",
    "start": "1571919",
    "end": "1577279"
  },
  {
    "text": "cluster api so it is a link to a resource that is the owner example",
    "start": "1577279",
    "end": "1582320"
  },
  {
    "text": "deployment on spots or cluster own spotman cluster machine podman machine",
    "start": "1582320",
    "end": "1588400"
  },
  {
    "text": "and it is implemented by a metadata owner reference field but now what happens if the owner itself",
    "start": "1588400",
    "end": "1594480"
  },
  {
    "text": "is deleted so it could be one of the two things either your child resource become",
    "start": "1594480",
    "end": "1599760"
  },
  {
    "text": "orphaned resources or we can do the cascading deletion so this is what cluster api uses it means it will wait",
    "start": "1599760",
    "end": "1606320"
  },
  {
    "text": "for all the child resources to be deleted before the owner resources deleted",
    "start": "1606320",
    "end": "1612480"
  },
  {
    "text": "now that we have apis and controllers you may also want to write web hooks for your providers so web hooks are",
    "start": "1612480",
    "end": "1618000"
  },
  {
    "text": "admission controllers that are used to add custom logic or validation to your crds",
    "start": "1618000",
    "end": "1624000"
  },
  {
    "text": "queue builder can scaffold web hooks for you you have to use the queue builder create webhook command and you can use",
    "start": "1624000",
    "end": "1630480"
  },
  {
    "text": "either of defaulting or programmatic validation or both of these flags the defaulting flag would create a",
    "start": "1630480",
    "end": "1636480"
  },
  {
    "text": "defaulting web hook and programmatic validation would create a validation webhook we'll look uh a couple of",
    "start": "1636480",
    "end": "1643360"
  },
  {
    "text": "examples so this is for the validation webhook so as you can see queuebuilder created a",
    "start": "1643360",
    "end": "1650080"
  },
  {
    "text": "validate create function for us similarly it would have scaffolded a validate update and a validate delete as",
    "start": "1650080",
    "end": "1655919"
  },
  {
    "text": "well so it is our job to fill in the logic into these empty scaffolded functions",
    "start": "1655919",
    "end": "1661120"
  },
  {
    "text": "one thing to note here is that you can add as many number of rules as possible to your validate functions and aggregate",
    "start": "1661120",
    "end": "1667919"
  },
  {
    "text": "all of the errors and return all of them together this is one such example for defaulting",
    "start": "1667919",
    "end": "1675039"
  },
  {
    "text": "on the top we have if you i don't know if you can read it but there's a queue builder annotation",
    "start": "1675039",
    "end": "1681120"
  },
  {
    "text": "for adding a default number of cpus to b2 so cube builder also provides a way for you to add defaults only if this is",
    "start": "1681120",
    "end": "1687919"
  },
  {
    "text": "not enough not enough for your use case then you go and write a custom default web hook so if you had used the default",
    "start": "1687919",
    "end": "1695360"
  },
  {
    "text": "flag during creating webhook step then it would have created a default function",
    "start": "1695360",
    "end": "1701200"
  },
  {
    "text": "and that is where you write any bit of logic and add defaults for your fields",
    "start": "1701200",
    "end": "1707039"
  },
  {
    "text": "well these are the building blocks for writing a provider over to richard",
    "start": "1707039",
    "end": "1712799"
  },
  {
    "text": "so i don't think we're going to have time to cover fully the rest of the slicer we'll probably stop on this slide after this",
    "start": "1714799",
    "end": "1720720"
  },
  {
    "text": "slide so we'll allow time for questions so once you've developed your operator you",
    "start": "1720720",
    "end": "1726080"
  },
  {
    "text": "need a you need a way to to test run it and debug it locally",
    "start": "1726080",
    "end": "1731679"
  },
  {
    "text": "and this is where tilt comes in so you can tell cluster api and it's",
    "start": "1731679",
    "end": "1737440"
  },
  {
    "text": "tilt file about your provider so if you're building your provider you need to create a file called tilt json",
    "start": "1737440",
    "end": "1744399"
  },
  {
    "text": "in the root of your repo there's a few important things here to remember so you see there there is an",
    "start": "1744399",
    "end": "1750000"
  },
  {
    "text": "image so that image name must match the name of the image within your deployment",
    "start": "1750000",
    "end": "1755840"
  },
  {
    "text": "configuration this is normally has a tag of dev and that will be replaced as part of your",
    "start": "1755840",
    "end": "1761440"
  },
  {
    "text": "your build process the second important part is this live reload depth",
    "start": "1761440",
    "end": "1766880"
  },
  {
    "text": "so tilt has a iterative development model so it will watch those files and",
    "start": "1766880",
    "end": "1772640"
  },
  {
    "text": "those paths within those files if there's any changes to those tilt will automatically",
    "start": "1772640",
    "end": "1778840"
  },
  {
    "text": "recompile your provider it will package it into your container",
    "start": "1778840",
    "end": "1784640"
  },
  {
    "text": "and then it will instruct the deployment to use that new container all without reloading the rest of of the",
    "start": "1784640",
    "end": "1791520"
  },
  {
    "text": "controllers think of it as pot reloading for for for your solution",
    "start": "1791520",
    "end": "1798320"
  },
  {
    "text": "so i think we do have a lot more slides we have probably about seven slides in there but it's probably a good time to",
    "start": "1799360",
    "end": "1805200"
  },
  {
    "text": "pause you can download the slides and see what we talk about with the testing uh the debugging is very very useful",
    "start": "1805200",
    "end": "1812399"
  },
  {
    "text": "within the tilt so i would recommend that you look at that as well and around the end-to-end testing but",
    "start": "1812399",
    "end": "1817679"
  },
  {
    "text": "maybe we have time for some questions [Applause]",
    "start": "1817679",
    "end": "1825490"
  },
  {
    "text": "you",
    "start": "1826000",
    "end": "1828080"
  }
]