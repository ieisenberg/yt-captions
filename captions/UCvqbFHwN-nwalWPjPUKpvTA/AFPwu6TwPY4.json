[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "well good day today i'm going to talk about um kind of a case study of",
    "start": "560",
    "end": "7680"
  },
  {
    "text": "something that i've been working on for about a year and a half crunchy has been working on",
    "start": "7680",
    "end": "13040"
  },
  {
    "text": "basically creating a containerized environment around the postgres database",
    "start": "13040",
    "end": "19359"
  },
  {
    "text": "and crunchy data a little bit about us we're",
    "start": "19359",
    "end": "24480"
  },
  {
    "start": "22000",
    "end": "22000"
  },
  {
    "text": "a postgresql company based in the u.s it's what we work",
    "start": "24480",
    "end": "30000"
  },
  {
    "text": "on uh it's our niche um it's really our focus we offer secure support",
    "start": "30000",
    "end": "35440"
  },
  {
    "text": "um there's several committers and various postgres folks in the community",
    "start": "35440",
    "end": "40640"
  },
  {
    "text": "work for us so it's really what we do and so for me",
    "start": "40640",
    "end": "46559"
  },
  {
    "text": "my opportunity with them was to figure out a way to containerize",
    "start": "46559",
    "end": "52000"
  },
  {
    "text": "the postgres and make that experience good for people that want to deploy postgres in",
    "start": "52000",
    "end": "58000"
  },
  {
    "text": "kind of a cloud environment",
    "start": "58000",
    "end": "61680"
  },
  {
    "text": "crunchy offers up a certified version of postgres which is the open source bits",
    "start": "63520",
    "end": "69280"
  },
  {
    "text": "basically in a packaged format and that's something that we offer to",
    "start": "69280",
    "end": "74720"
  },
  {
    "text": "customers it's past common criteria certification which may mean something",
    "start": "74720",
    "end": "80080"
  },
  {
    "text": "to some of y'all that work in dod or federal space",
    "start": "80080",
    "end": "85360"
  },
  {
    "text": "so why would you containerize postgres what are some of the things why would you do this one is",
    "start": "85360",
    "end": "92960"
  },
  {
    "start": "89000",
    "end": "89000"
  },
  {
    "text": "to encapsulate any complexities around deploying a database installation",
    "start": "92960",
    "end": "100400"
  },
  {
    "text": "configuration of a database can oftentimes be something that's",
    "start": "100400",
    "end": "106799"
  },
  {
    "text": "complicated at least for a lot of developers and places i've worked anyway",
    "start": "106799",
    "end": "111840"
  },
  {
    "text": "usually you go to a database group they would provision you a database and data kind of in consumers that",
    "start": "111840",
    "end": "119360"
  },
  {
    "text": "developers really didn't know the complexities of that so this was really a way",
    "start": "119360",
    "end": "126159"
  },
  {
    "text": "to give developers in particular quick way to spin up a postgres database",
    "start": "126159",
    "end": "132319"
  },
  {
    "text": "and not have to worry about uh all the permutations and complexities that",
    "start": "132319",
    "end": "137440"
  },
  {
    "text": "that may be involved with that the other is um whenever we started doing this",
    "start": "137440",
    "end": "144080"
  },
  {
    "text": "container uh originally i started with a postgresql container and that was great and then it quickly became obvious that",
    "start": "144080",
    "end": "151280"
  },
  {
    "text": "there was a need for other containers things like being able to do a database backup",
    "start": "151280",
    "end": "158400"
  },
  {
    "text": "things like administering or monitoring containers of postgres that you might",
    "start": "158400",
    "end": "164640"
  },
  {
    "text": "have deployed so containers provide a relatively lightweight way",
    "start": "164640",
    "end": "170640"
  },
  {
    "text": "to spin up or deploy postgres and for some environments and some",
    "start": "170640",
    "end": "175920"
  },
  {
    "text": "customers being able to maybe spin up 50 databases really rapidly",
    "start": "175920",
    "end": "182319"
  },
  {
    "text": "is what their business requires them and before that used to be a very timely or costly experience",
    "start": "182319",
    "end": "190319"
  },
  {
    "text": "so containers really um enable that rapid deployment and",
    "start": "190319",
    "end": "198080"
  },
  {
    "text": "most customers we're dealing with now are putting their applications in more of a cloud environment as well",
    "start": "198080",
    "end": "204879"
  },
  {
    "text": "so we wanted the database to go along with say web applications or",
    "start": "204879",
    "end": "210000"
  },
  {
    "text": "end user applications so we want that same kind of",
    "start": "210000",
    "end": "215040"
  },
  {
    "text": "lightweightness and rapid deployment model for databases as we did for web",
    "start": "215200",
    "end": "221360"
  },
  {
    "text": "applications we use docker for this about two and a",
    "start": "221360",
    "end": "226959"
  },
  {
    "text": "half years ago i was working with running postgres and open shift whenever",
    "start": "226959",
    "end": "232000"
  },
  {
    "text": "it was pre-docker and then when red hat announced they",
    "start": "232000",
    "end": "237360"
  },
  {
    "text": "were gonna need a docker i was kind of the guy standing there going what's docker and",
    "start": "237360",
    "end": "242799"
  },
  {
    "text": "we kind of made our bet that was going to be the widely adopted container platform and",
    "start": "242799",
    "end": "248159"
  },
  {
    "text": "i think so far that's turned out very well so what are some of the design goals of",
    "start": "248159",
    "end": "254239"
  },
  {
    "start": "252000",
    "end": "252000"
  },
  {
    "text": "a postgres container suite early on i wanted to design the",
    "start": "254239",
    "end": "263359"
  },
  {
    "text": "docker files in such a way that i could support different types of operating systems as",
    "start": "263360",
    "end": "268880"
  },
  {
    "text": "the base image and i wanted to provide this container suite on a consistent base image",
    "start": "268880",
    "end": "275600"
  },
  {
    "text": "customers that that we deal with they would prefer to manage and deploy",
    "start": "275600",
    "end": "282800"
  },
  {
    "text": "you know usually one kind of operating system so that applies with the containers as well",
    "start": "282800",
    "end": "288479"
  },
  {
    "text": "so all of the docker files in crunchy container suite are either based on cenos7 or rel7 and",
    "start": "288479",
    "end": "296560"
  },
  {
    "text": "that was by design so that whenever you deploy the container suite",
    "start": "296560",
    "end": "302000"
  },
  {
    "text": "you're you're able to deal with one consistent base image and deal with security issues and",
    "start": "302000",
    "end": "307680"
  },
  {
    "text": "whatever with that one base image may support other ones in the future but those are",
    "start": "307680",
    "end": "313120"
  },
  {
    "text": "the ones that we initially targeted the other is we wanted to support",
    "start": "313120",
    "end": "319680"
  },
  {
    "text": "different deployment models so the container suite of early on was designed",
    "start": "319680",
    "end": "325520"
  },
  {
    "text": "to deploy on just pure docker then on openshift and then as well on",
    "start": "325520",
    "end": "332160"
  },
  {
    "text": "kubernetes and recently i've started a a version that will work on mesos",
    "start": "332160",
    "end": "340160"
  },
  {
    "text": "uh marathon so um that is really i guess the power of docker",
    "start": "340160",
    "end": "346639"
  },
  {
    "text": "being a standardized container suite is i'm able to just through configuration files target",
    "start": "346639",
    "end": "353520"
  },
  {
    "text": "these different orchestration environments pretty easily and in a pretty seamless way",
    "start": "353520",
    "end": "361600"
  },
  {
    "text": "the github project that i'll have a link to in a second has examples for all of those",
    "start": "361600",
    "end": "368240"
  },
  {
    "text": "environments deploying the container suite in all of those different environments",
    "start": "368240",
    "end": "374160"
  },
  {
    "text": "and there will be probably others added to that list as",
    "start": "374160",
    "end": "379600"
  },
  {
    "text": "as i learn more about some real exciting new container platform orchestration platforms",
    "start": "379600",
    "end": "385520"
  },
  {
    "text": "that will certainly grow over time",
    "start": "385520",
    "end": "389840"
  },
  {
    "text": "all of these basically containers postgres containers in particular all",
    "start": "390800",
    "end": "397199"
  },
  {
    "text": "have to address the issue of persistence though so people ask me all the time about",
    "start": "397199",
    "end": "403039"
  },
  {
    "text": "postgres data and where does it store well all of the data is offloaded onto",
    "start": "403039",
    "end": "408960"
  },
  {
    "text": "outside of the container obviously so you get to the data files for postgres",
    "start": "408960",
    "end": "414960"
  },
  {
    "text": "through some kind of volume mount and all of those different deployment platforms give you different options for",
    "start": "414960",
    "end": "422160"
  },
  {
    "text": "persistence and how you mount volumes and how you provision volumes i could probably talk for two hours just",
    "start": "422160",
    "end": "429599"
  },
  {
    "text": "alone on all the various ways and gotchas and security issues",
    "start": "429599",
    "end": "434720"
  },
  {
    "text": "so that's a big topic just unto itself one of the goals or design goals with",
    "start": "434720",
    "end": "442240"
  },
  {
    "start": "438000",
    "end": "438000"
  },
  {
    "text": "this was to allow end users to customize postgres configuration you can configure",
    "start": "442240",
    "end": "449039"
  },
  {
    "text": "postgres uh in like an infinite number of ways it seems like so things like this",
    "start": "449039",
    "end": "457039"
  },
  {
    "text": "the sql that initializes a database for instance is",
    "start": "457039",
    "end": "462319"
  },
  {
    "text": "is something i wanted to be outside or mounted outside of the container itself so that enables",
    "start": "462319",
    "end": "469280"
  },
  {
    "text": "users to customize the objects that populate the database when it comes up things like",
    "start": "469280",
    "end": "476240"
  },
  {
    "text": "the postgres hba conf and postgresql.com files",
    "start": "476240",
    "end": "481840"
  },
  {
    "text": "are other examples of you can use the ones that are generated or initialized by postgres",
    "start": "481840",
    "end": "489680"
  },
  {
    "text": "by the container itself or you can mount those externally if you want to completely control",
    "start": "489680",
    "end": "496720"
  },
  {
    "text": "those configuration files there's other examples too where",
    "start": "496720",
    "end": "504479"
  },
  {
    "text": "maybe you don't want to supply your own configuration files but maybe you want to tweak just some",
    "start": "504479",
    "end": "510400"
  },
  {
    "text": "values inside a standard configuration file so those examples are or those kind of",
    "start": "510400",
    "end": "518320"
  },
  {
    "text": "things are exposed with environment variables",
    "start": "518320",
    "end": "523120"
  },
  {
    "text": "and then lastly if this be with this being open source as well you can pull down the docker",
    "start": "523440",
    "end": "529279"
  },
  {
    "text": "files and completely customize the behavior as you want so all of those things were",
    "start": "529279",
    "end": "534800"
  },
  {
    "text": "design goals really early on um and the goal was to make this container suite you",
    "start": "534800",
    "end": "541600"
  },
  {
    "text": "know as usable and as extensible by as many wide audiences we could make it",
    "start": "541600",
    "end": "548320"
  },
  {
    "text": "really any database as a service type container environment you would want those kind of",
    "start": "548320",
    "end": "553480"
  },
  {
    "text": "extensibility features in it and you'd want to look at those from the from kind of the beginning if",
    "start": "553480",
    "end": "559279"
  },
  {
    "text": "you were going to look at you know non-postgres database container environments are",
    "start": "559279",
    "end": "565200"
  },
  {
    "text": "container suites as well you want those kinds of extension points",
    "start": "565200",
    "end": "570560"
  },
  {
    "start": "569000",
    "end": "569000"
  },
  {
    "text": "postgres in particular some of the things that customers ask us is they wanted the",
    "start": "571279",
    "end": "576880"
  },
  {
    "text": "ability to create a postgres streaming replication type cluster environment they wanted to do that pretty easily",
    "start": "576880",
    "end": "583680"
  },
  {
    "text": "and the reason is that was something that a lot of them had struggled with and doing it in a",
    "start": "583680",
    "end": "590800"
  },
  {
    "text": "consistent way and some some shops found that kind of complicated",
    "start": "590800",
    "end": "596720"
  },
  {
    "text": "so clustering postgres was an early design goal as well replication is part",
    "start": "596720",
    "end": "604320"
  },
  {
    "text": "of that and we wanted to support either synchronous or asynchronous replicas so postgres is a single",
    "start": "604320",
    "end": "611120"
  },
  {
    "text": "master database today and then you can have multiple read-only replicas",
    "start": "611120",
    "end": "616640"
  },
  {
    "text": "so that's another design constraint whenever you talk about building a container suite is you have",
    "start": "616640",
    "end": "623279"
  },
  {
    "text": "to keep that in mind of the inherent way postgres",
    "start": "623279",
    "end": "628480"
  },
  {
    "text": "replication works multiple locale support is something that's built into",
    "start": "628480",
    "end": "634000"
  },
  {
    "text": "the container suite for the postgres database container and in a cube environment or an open shift",
    "start": "634000",
    "end": "640399"
  },
  {
    "text": "environment we support the ability to encode your database credentials in the secrets",
    "start": "640399",
    "end": "648480"
  },
  {
    "text": "and that's a feature that's just unique to kubernetes environments",
    "start": "648480",
    "end": "654240"
  },
  {
    "text": "again i talked about the ability to override config files and then the ability to use a random uid",
    "start": "654240",
    "end": "662560"
  },
  {
    "text": "instead of a normal postgres uid was something that i had to basically learn and that's in",
    "start": "662560",
    "end": "669680"
  },
  {
    "text": "particular comes into play in an open shift environment like openshift dedicated where that's",
    "start": "669680",
    "end": "676880"
  },
  {
    "text": "another targeted environment that with a little bit of configuration",
    "start": "676880",
    "end": "683519"
  },
  {
    "text": "i was able to make postgres basically work with a randomly assigned uid",
    "start": "683519",
    "end": "689040"
  },
  {
    "text": "and that's unique to the openshift paths environment",
    "start": "689040",
    "end": "694079"
  },
  {
    "text": "that took a while to figure out as well it wasn't something i'd ever done before but",
    "start": "694079",
    "end": "699279"
  },
  {
    "text": "that's an example of little bit of wrapper code inside the",
    "start": "699279",
    "end": "705120"
  },
  {
    "text": "postgres container enabled you to do something like random uid support",
    "start": "705120",
    "end": "711839"
  },
  {
    "text": "features like restoring a database from a backup or other design",
    "start": "711839",
    "end": "716880"
  },
  {
    "text": "features which came immediately after the initial database container it was like okay great i've",
    "start": "716880",
    "end": "724160"
  },
  {
    "text": "got a database container but i would really like to be able to run a",
    "start": "724160",
    "end": "729200"
  },
  {
    "text": "another container to perform a backup on it so that gets you into kind of like more",
    "start": "729200",
    "end": "735839"
  },
  {
    "text": "than just a database container it started us thinking about a suite or kind of a database as a service and what",
    "start": "735839",
    "end": "742240"
  },
  {
    "text": "does that look like backup and restore is a big feature of that and right today",
    "start": "742240",
    "end": "750320"
  },
  {
    "start": "744000",
    "end": "744000"
  },
  {
    "text": "the container suite supports a full database backup using a postgres utility called pg based",
    "start": "750320",
    "end": "756320"
  },
  {
    "text": "backup so from a design perspective i didn't want to recreate pg-based backup it",
    "start": "756320",
    "end": "763519"
  },
  {
    "text": "comes with postgres so the way in which",
    "start": "763519",
    "end": "769440"
  },
  {
    "text": "the philosophy with this container suite is when there's a postgres utility that really works and is",
    "start": "769440",
    "end": "774480"
  },
  {
    "text": "standardized within the community we just want to enable that use or",
    "start": "774480",
    "end": "779600"
  },
  {
    "text": "execution of that in a container environment so created a",
    "start": "779600",
    "end": "785200"
  },
  {
    "text": "backup container which is called crunchy backup and when you run that container as like",
    "start": "785200",
    "end": "791040"
  },
  {
    "text": "a kubernetes job you just pass it enough information about a running database container",
    "start": "791040",
    "end": "797040"
  },
  {
    "text": "and it begins to create a full database backup it'll persist it",
    "start": "797040",
    "end": "803040"
  },
  {
    "text": "off to something like an nfs volume mount and all of those nfs",
    "start": "803040",
    "end": "808240"
  },
  {
    "text": "volumes are basically time snapped or so that you can then fire up a brand new",
    "start": "808240",
    "end": "814240"
  },
  {
    "text": "database container pass it in an environment variable where its backup is",
    "start": "814240",
    "end": "819680"
  },
  {
    "text": "and it will restore from that backup that is a very very small thin container",
    "start": "819680",
    "end": "826959"
  },
  {
    "text": "but it's an example of not reinventing the wheel but just cloud",
    "start": "826959",
    "end": "833360"
  },
  {
    "text": "enabling a already bulletproof postgres feature or utility",
    "start": "833360",
    "end": "842079"
  },
  {
    "start": "841000",
    "end": "841000"
  },
  {
    "text": "um typically kind of backtrack a little bit typically um that container most of the logic in",
    "start": "842079",
    "end": "850079"
  },
  {
    "text": "it is just a simple bash script as well so there's it's very easy",
    "start": "850079",
    "end": "856000"
  },
  {
    "text": "for people that if you understand bash and a little bit of linux you can get in and look at the docker file",
    "start": "856000",
    "end": "861760"
  },
  {
    "text": "and tweak that docker file and the bash script that just merely wraps pg based backup",
    "start": "861760",
    "end": "869040"
  },
  {
    "text": "and customize it to fit your needs so that's the other goal is to kind of keep the",
    "start": "869040",
    "end": "874639"
  },
  {
    "text": "orchestration inside the containers to bare minimum and then depend on orchestration outside",
    "start": "874639",
    "end": "880240"
  },
  {
    "text": "of the containers so i've seen some people they'll write a container they'll bake into a million",
    "start": "880240",
    "end": "885839"
  },
  {
    "text": "different things even orchestration logic and",
    "start": "885839",
    "end": "890959"
  },
  {
    "text": "i've really tried to resist that temptation and make this just a real lightweight set of docker or",
    "start": "890959",
    "end": "897279"
  },
  {
    "text": "wrappers essentially around some of these things high availability was another thing that came up",
    "start": "897279",
    "end": "902959"
  },
  {
    "text": "as most db databases of service environments have some mechanism",
    "start": "902959",
    "end": "909600"
  },
  {
    "text": "of connection pooling of handling automated failover so there's a",
    "start": "909600",
    "end": "916240"
  },
  {
    "text": "container called crunchy watch that does nothing but looks at a postgres master container to see if it's if",
    "start": "916240",
    "end": "924320"
  },
  {
    "text": "it's responding if so gray but if not it will trigger a failover to one of the",
    "start": "924320",
    "end": "930000"
  },
  {
    "text": "slave replicas again a very small amount of code that's probably about like 100 lines of bash",
    "start": "930000",
    "end": "935440"
  },
  {
    "text": "script it leverages a existing postgres",
    "start": "935440",
    "end": "940560"
  },
  {
    "text": "utility called pg is ready so again that was really the philosophy",
    "start": "940560",
    "end": "948399"
  },
  {
    "text": "and that's the way we like to build out this container suite where possible database monitoring was a",
    "start": "948399",
    "end": "956560"
  },
  {
    "start": "954000",
    "end": "954000"
  },
  {
    "text": "little bit different i saw an opportunity to take something",
    "start": "956560",
    "end": "962079"
  },
  {
    "text": "like prometheus and make use of it and store postgres metrics there's different kinds",
    "start": "962079",
    "end": "969199"
  },
  {
    "text": "of metrics tools out there and this was an attempt to say what can i leverage",
    "start": "969199",
    "end": "976000"
  },
  {
    "text": "out there in the open source space to create a cloud-based postgres monitoring metric tool",
    "start": "976000",
    "end": "984240"
  },
  {
    "text": "and what i ended up with was prometheus as the data store and i use the prometheus push gateway as",
    "start": "984240",
    "end": "991360"
  },
  {
    "text": "a means to kind of temporarily hold metrics and",
    "start": "991360",
    "end": "996639"
  },
  {
    "text": "then i wrote another container called crunchy collect and",
    "start": "996639",
    "end": "1002560"
  },
  {
    "text": "crunchy collect is a small amount of golang code that talks to a database container",
    "start": "1002560",
    "end": "1009600"
  },
  {
    "text": "and basically pulls 20 or 30 different postgres specific metrics from the container using a sql interface",
    "start": "1009600",
    "end": "1017199"
  },
  {
    "text": "to the database and then also externally because if you place that",
    "start": "1017199",
    "end": "1023040"
  },
  {
    "text": "crunchy collect and let's say a kubernetes pod it has access to the data files and so",
    "start": "1023040",
    "end": "1028880"
  },
  {
    "text": "it can do actually metrics-based work against the data files of postgres as well it collects those and pushes",
    "start": "1028880",
    "end": "1035918"
  },
  {
    "text": "them off to prometheus and then i used something like grafana",
    "start": "1035919",
    "end": "1041520"
  },
  {
    "text": "again all very very well known stable open source projects",
    "start": "1041520",
    "end": "1047760"
  },
  {
    "text": "containerized those and now i've basically got a custom postgres metrics collection and",
    "start": "1047760",
    "end": "1055280"
  },
  {
    "text": "graphing dashboard with again very little bit of code and i think that's really",
    "start": "1055280",
    "end": "1062080"
  },
  {
    "text": "the future again a nice aspect of using open source projects",
    "start": "1062080",
    "end": "1068720"
  },
  {
    "start": "1068000",
    "end": "1068000"
  },
  {
    "text": "things like backups and running database vacuums people were asking me well that's pretty",
    "start": "1071440",
    "end": "1078559"
  },
  {
    "text": "neat but my administrators you know i need to run these jobs on a periodic basis",
    "start": "1078559",
    "end": "1086240"
  },
  {
    "text": "and my administrators won't give me access to like the kron system how can we do that with",
    "start": "1086240",
    "end": "1093360"
  },
  {
    "text": "containers so i found a great open source project that's a very small cron implementation and",
    "start": "1093360",
    "end": "1100720"
  },
  {
    "text": "going again wrote a container called crunchy dba and",
    "start": "1100720",
    "end": "1105840"
  },
  {
    "text": "wrote a little bit of glue code in there so that it will spawn off based on that cron schedule",
    "start": "1105840",
    "end": "1111919"
  },
  {
    "text": "backup containers and then also vacuum analyze containers and that gives your",
    "start": "1111919",
    "end": "1119520"
  },
  {
    "text": "your normal user of this suite the ability to",
    "start": "1119520",
    "end": "1124640"
  },
  {
    "text": "automate basically different dba tasks and over time i see that growing out",
    "start": "1124640",
    "end": "1130559"
  },
  {
    "text": "into a much richer capability to do say reporting and",
    "start": "1130559",
    "end": "1136320"
  },
  {
    "text": "also health check and things that a dba would do just routine task but this moves the",
    "start": "1136320",
    "end": "1142679"
  },
  {
    "text": "responsibility of of automating all that now it gives the keys kind of to a developer if they can",
    "start": "1142679",
    "end": "1150000"
  },
  {
    "text": "run the crunchy dba container you basically now have the ability to",
    "start": "1150000",
    "end": "1157600"
  },
  {
    "text": "have your own schedule of things that you want to do there is a one-to-one relationship",
    "start": "1157600",
    "end": "1163520"
  },
  {
    "text": "between the crunchy dba container instance and a database container as well",
    "start": "1163520",
    "end": "1170160"
  },
  {
    "text": "so that was kind of the model there is if you had 50 databases you could assign a unique dba container",
    "start": "1170160",
    "end": "1177760"
  },
  {
    "text": "to each one so it's kind of a virtualized dba that you you would associate so again i",
    "start": "1177760",
    "end": "1184559"
  },
  {
    "text": "was trying to cloud scale out automation or admin task and monitoring along with the database",
    "start": "1184559",
    "end": "1192640"
  },
  {
    "text": "container so what did we end up with uh at the end of about a year of",
    "start": "1192640",
    "end": "1198799"
  },
  {
    "start": "1194000",
    "end": "1194000"
  },
  {
    "text": "development and this is what we ended up with so i've talked about most of these there's",
    "start": "1198799",
    "end": "1204559"
  },
  {
    "text": "crunchy pg which is just the database container runs postgres 95 currently",
    "start": "1204559",
    "end": "1211120"
  },
  {
    "text": "that gets updated every time there's a new postgres release crunchy backup runs that pg base back up",
    "start": "1211120",
    "end": "1218720"
  },
  {
    "text": "it's meant to be run like a kubernetes job so you run it once it executes and it",
    "start": "1218720",
    "end": "1224720"
  },
  {
    "text": "dies so it's not a long running container at all it starts it finishes it does its job",
    "start": "1224720",
    "end": "1232400"
  },
  {
    "text": "and that leverages features like the kubernetes job construct crunchy pg",
    "start": "1232400",
    "end": "1240320"
  },
  {
    "text": "badger is an example of again taking an existing postgres utility written in pearl",
    "start": "1240320",
    "end": "1246720"
  },
  {
    "text": "never designed with a web interface or with an http interface or cloud in mind",
    "start": "1246720",
    "end": "1254000"
  },
  {
    "text": "probably wrapped it with about 60 lines of golan code to put an http wrapper around",
    "start": "1254000",
    "end": "1261039"
  },
  {
    "text": "pg badger utility and that way if i add that container inside of kubernetes pod",
    "start": "1261039",
    "end": "1268640"
  },
  {
    "text": "and it has access therefore to the postgres data files it can generate a static log analysis off the postgres",
    "start": "1268640",
    "end": "1276400"
  },
  {
    "text": "logs and hopefully i'll have time i'll show you a demo of that but again very simple amount of code but",
    "start": "1276400",
    "end": "1284000"
  },
  {
    "text": "it it enables you to kind of cloud enable something like pg badger crunchy pg pool",
    "start": "1284000",
    "end": "1291360"
  },
  {
    "text": "is a very similar example there's a product called pg pool an open source project which is",
    "start": "1291360",
    "end": "1297520"
  },
  {
    "text": "a smart postgres knowledgeable load balancer that understands how to load balance",
    "start": "1297520",
    "end": "1304159"
  },
  {
    "text": "between a master and multiple postgres slaves people use it as a",
    "start": "1304159",
    "end": "1310240"
  },
  {
    "text": "single entry point into a postgres cluster took that utility wrapped it in a docker",
    "start": "1310240",
    "end": "1317520"
  },
  {
    "text": "container add just a little bit of integration points so that it can understand what your",
    "start": "1317520",
    "end": "1323840"
  },
  {
    "text": "master service and your your replica services are how to find them",
    "start": "1323840",
    "end": "1329440"
  },
  {
    "text": "and now you whenever you stand that up in front of a postgres container cluster you essentially have a",
    "start": "1329440",
    "end": "1337679"
  },
  {
    "text": "smart load balancer crunchy watch is the automated failover",
    "start": "1337679",
    "end": "1343840"
  },
  {
    "text": "container i mentioned crunchy collect is really the the entire suite of crunchy prometheus",
    "start": "1343840",
    "end": "1351120"
  },
  {
    "text": "grafana and the prometheus gateway all kind of just wrapped up under",
    "start": "1351120",
    "end": "1357360"
  },
  {
    "text": "something we call crunchy collect but there's also an actual crunchy collect container that is",
    "start": "1357600",
    "end": "1363360"
  },
  {
    "text": "that goal line code that scrapes or pulls postgres metrics",
    "start": "1363360",
    "end": "1370320"
  },
  {
    "text": "crunchy dba we mentioned which is a simple cron scheduler with a small amount of glue code",
    "start": "1370480",
    "end": "1376080"
  },
  {
    "text": "that leverages another feature of kubernetes called a service account and service",
    "start": "1376080",
    "end": "1382559"
  },
  {
    "text": "accounts enable you to do things like dynamically talk to the kubernetes api",
    "start": "1382559",
    "end": "1388080"
  },
  {
    "text": "and dynamically therefore spin up containers on demand so that's how it's able to dynamically",
    "start": "1388080",
    "end": "1395840"
  },
  {
    "text": "spawn off things like backup jobs and vacuum jobs",
    "start": "1395840",
    "end": "1401200"
  },
  {
    "text": "and then the last one that we created was a containerized version of a",
    "start": "1401200",
    "end": "1407919"
  },
  {
    "text": "i have another open source project called pg admin 4 which is a brand new rewrite of the older pg admin",
    "start": "1407919",
    "end": "1416000"
  },
  {
    "text": "tool pg admin 4 is a web-based console for postgres so",
    "start": "1416000",
    "end": "1423200"
  },
  {
    "text": "and it's the build of it is kind of interesting if you try to build it from source so this was a good example of",
    "start": "1423200",
    "end": "1429919"
  },
  {
    "text": "when you containerize something like that it becomes way more consumable for a",
    "start": "1429919",
    "end": "1436400"
  },
  {
    "text": "suite of developers and this is something that if you had 50 postgres developers or 50 developers in general",
    "start": "1436400",
    "end": "1443600"
  },
  {
    "text": "you could give them each the pg admin 4 and they instantly can connect to databases and start using it and not to",
    "start": "1443600",
    "end": "1450320"
  },
  {
    "text": "worry about building pg admin for themselves",
    "start": "1450320",
    "end": "1455840"
  },
  {
    "text": "orchestration orchestration intersects with something",
    "start": "1455840",
    "end": "1462080"
  },
  {
    "start": "1457000",
    "end": "1457000"
  },
  {
    "text": "like this container suite in a number of different ways",
    "start": "1462080",
    "end": "1468000"
  },
  {
    "text": "replicas need to be able to look up their masters and that ultimately usually turns into a dns",
    "start": "1468320",
    "end": "1476400"
  },
  {
    "text": "resolution so when you run a container suite in all of",
    "start": "1476400",
    "end": "1481520"
  },
  {
    "text": "these different orchestration environments you need to think about okay how am i going to do",
    "start": "1481520",
    "end": "1487039"
  },
  {
    "text": "resolution in a pure docker environment you may do that just with container links okay if you're",
    "start": "1487039",
    "end": "1494000"
  },
  {
    "text": "not running dna some kind of dns service but in something like kubernetes or openshift",
    "start": "1494000",
    "end": "1500480"
  },
  {
    "text": "you can leverage the dns that's built in there so that's how some service discovery",
    "start": "1500480",
    "end": "1506799"
  },
  {
    "text": "the service discovery that we're making use of typically when a replica runs it just needs to find its master",
    "start": "1506799",
    "end": "1513760"
  },
  {
    "text": "and it needs to be able to look that up in some way so that's something orchestration",
    "start": "1513760",
    "end": "1519200"
  },
  {
    "text": "frameworks make a lot easier for you than if you didn't use an orchestration framework or",
    "start": "1519200",
    "end": "1525679"
  },
  {
    "text": "try to roll your own but that places a burden on you to understand dns networking and make sure",
    "start": "1525679",
    "end": "1532799"
  },
  {
    "text": "that your dns environment is set up networking in general multi-host docker",
    "start": "1532799",
    "end": "1540240"
  },
  {
    "text": "is where orchestration frameworks i think really shine and make your life easier uh as somebody",
    "start": "1540240",
    "end": "1546480"
  },
  {
    "text": "who early on tried to set up my own multi-host doctor environment",
    "start": "1546480",
    "end": "1551679"
  },
  {
    "text": "two years ago it was definitely a challenging thing there's also",
    "start": "1551679",
    "end": "1559440"
  },
  {
    "text": "another environment i didn't mention but we've ported this to actually work with portworx to import our source here",
    "start": "1559440",
    "end": "1566640"
  },
  {
    "text": "yesterday demoing and that's the basically they offer a doctor volume",
    "start": "1566640",
    "end": "1575039"
  },
  {
    "text": "driver mechanism so there's also if you look in the examples a way of",
    "start": "1575039",
    "end": "1580880"
  },
  {
    "text": "running the crunchy container suite to use the portworx environment and that's a persistence mechanism",
    "start": "1580880",
    "end": "1588559"
  },
  {
    "text": "just in a pure docker environment that you can leverage to do replicated volume management so that's",
    "start": "1588559",
    "end": "1594880"
  },
  {
    "text": "an interesting one to look at if you've never looked at portworx",
    "start": "1594880",
    "end": "1599840"
  },
  {
    "text": "let's see that's a swarm deployment nothing interesting there really you",
    "start": "1599919",
    "end": "1605600"
  },
  {
    "start": "1600000",
    "end": "1600000"
  },
  {
    "text": "probably know swarm but when you talk about multi-host you have these different deployment models",
    "start": "1605600",
    "end": "1611760"
  },
  {
    "start": "1611000",
    "end": "1611000"
  },
  {
    "text": "depending on what orchestration engine you have and different networking in particular",
    "start": "1611760",
    "end": "1617120"
  },
  {
    "text": "and different networking choices ultimately though in terms of the",
    "start": "1617120",
    "end": "1622240"
  },
  {
    "text": "postgres suite really all you need is a way for replicas to look up their master",
    "start": "1622240",
    "end": "1629039"
  },
  {
    "start": "1624000",
    "end": "1624000"
  },
  {
    "text": "and for you to be able to access databases through things like host names or container",
    "start": "1629039",
    "end": "1634640"
  },
  {
    "text": "names and the examples that we have out there you'll see how i do",
    "start": "1634640",
    "end": "1640000"
  },
  {
    "text": "that if you there's a document for each environment that the container suite supports",
    "start": "1640000",
    "end": "1647360"
  },
  {
    "text": "persistence in general is an interesting topic i could give a",
    "start": "1647360",
    "end": "1652880"
  },
  {
    "text": "separate discussion on that but there are some interesting things with postgres you want to have a a reliable right so whatever",
    "start": "1652880",
    "end": "1662080"
  },
  {
    "text": "file system you're writing to if it's really low or really slow over a network",
    "start": "1662080",
    "end": "1668880"
  },
  {
    "text": "it's obviously going to impact your postgres performance so when you talk about deploying these",
    "start": "1668880",
    "end": "1674000"
  },
  {
    "text": "containers for real in a production setting the choice of your persistence is really key",
    "start": "1674000",
    "end": "1680399"
  },
  {
    "text": "and that's where the orchestration frameworks really um i think differentiate",
    "start": "1680399",
    "end": "1685600"
  },
  {
    "text": "themselves and if you were going to deploy postgres for instance especially clusters of postgres",
    "start": "1685600",
    "end": "1693679"
  },
  {
    "text": "that would weigh probably in into your decision on which orchestration framework and also",
    "start": "1693679",
    "end": "1699440"
  },
  {
    "text": "once you pick an orchestration framework usually they offer up multiple different choices for file systems",
    "start": "1699440",
    "end": "1706480"
  },
  {
    "text": "um that's probably a separate discussion but i would say that whenever customers try to deploy this",
    "start": "1706480",
    "end": "1712480"
  },
  {
    "text": "this always comes up and it's always a big issue of okay which storage infrastructure should",
    "start": "1712480",
    "end": "1718880"
  },
  {
    "text": "i use and why and then how do you monitor measure postgres performance",
    "start": "1718880",
    "end": "1724080"
  },
  {
    "text": "on that hopefully i'll i'm going to give you a",
    "start": "1724080",
    "end": "1729120"
  },
  {
    "start": "1728000",
    "end": "1728000"
  },
  {
    "text": "demo of this but i've cooked up an example called the kitchen sink example so what can you do with this",
    "start": "1729120",
    "end": "1734960"
  },
  {
    "text": "other than just deploy a single database which is sort of uninteresting so i",
    "start": "1734960",
    "end": "1740880"
  },
  {
    "text": "cooked up this example that tries to use as many of the containers as possible",
    "start": "1740880",
    "end": "1745919"
  },
  {
    "text": "to deploy a non-trivial postgres deployment so what this has is a master pod this is",
    "start": "1745919",
    "end": "1753679"
  },
  {
    "text": "a kubernetes example the master pod has three containers in a",
    "start": "1753679",
    "end": "1759120"
  },
  {
    "text": "badger which is going to give me log analysis reports",
    "start": "1759120",
    "end": "1764320"
  },
  {
    "text": "the master database itself the metrics collector which collects metrics",
    "start": "1764320",
    "end": "1769760"
  },
  {
    "text": "then there's going to be a replica controller and this basically lets me",
    "start": "1769760",
    "end": "1777520"
  },
  {
    "text": "spin up a replica that's going to replicate from the master but then also it's going to allow me in",
    "start": "1777520",
    "end": "1783440"
  },
  {
    "text": "kubernetes to scale that replica up dynamically and that's again a feature of an orchestration",
    "start": "1783440",
    "end": "1789840"
  },
  {
    "text": "engine that you want is that ability to scale things up dynamically",
    "start": "1789840",
    "end": "1794880"
  },
  {
    "text": "i wanted replica though that is also synchronous so i'm going to spin up a synchronous",
    "start": "1794880",
    "end": "1800640"
  },
  {
    "text": "replica the other replicas are asynchronous and i want a synchronous replica",
    "start": "1800640",
    "end": "1807600"
  },
  {
    "text": "that's going to guarantee that my master is always in sync with something in case the master falls",
    "start": "1807600",
    "end": "1813919"
  },
  {
    "text": "over then i'm going to put a master proxy in front of the master container",
    "start": "1813919",
    "end": "1819600"
  },
  {
    "text": "and then i'm going to route basically use that as a basically a router or a service endpoint",
    "start": "1819600",
    "end": "1825919"
  },
  {
    "text": "into the master i'm going to do the same for the replicas the replicas that are pointed",
    "start": "1825919",
    "end": "1831039"
  },
  {
    "text": "to both the synchronous and the asynchronous so it's going to do round-robin load balancing between those",
    "start": "1831039",
    "end": "1838399"
  },
  {
    "text": "then there's going to be the watcher that's going to look at the master and see if let me go back and see",
    "start": "1838399",
    "end": "1845360"
  },
  {
    "text": "if the master falls over and it will perform a failover onto the synchronous replica pod",
    "start": "1845360",
    "end": "1852799"
  },
  {
    "text": "there's also some things there the pg pool is deployed that's going to again load balance",
    "start": "1852880",
    "end": "1859279"
  },
  {
    "text": "between the master service and the replica service so it's another layer of load balancing so in postgres only a",
    "start": "1859279",
    "end": "1866960"
  },
  {
    "text": "master can do rights replicas can only do reads so pg pool is the only thing i've",
    "start": "1866960",
    "end": "1874559"
  },
  {
    "text": "seen smart enough to direct sql traffic to the right endpoint based on the type of sql",
    "start": "1874559",
    "end": "1881200"
  },
  {
    "text": "statement so there's a service in front of pg pool as well so that example ultimately is worked up",
    "start": "1881200",
    "end": "1888799"
  },
  {
    "start": "1885000",
    "end": "1885000"
  },
  {
    "text": "into lots of different js kubernetes json templates these are all out in the",
    "start": "1888799",
    "end": "1894720"
  },
  {
    "text": "github and you execute some people never worked with kubernetes so i've let this slide in here",
    "start": "1894720",
    "end": "1900559"
  },
  {
    "text": "but it shows you you execute these commands it reads in these templates which acts",
    "start": "1900559",
    "end": "1905919"
  },
  {
    "text": "as acts as reps recipes for the build out of all of that infrastructure",
    "start": "1905919",
    "end": "1911600"
  },
  {
    "text": "on that diagram and this example is out there it's called kitchen sync you'll see it",
    "start": "1911600",
    "end": "1918240"
  },
  {
    "text": "inside those json files again as kind of a recipe of exactly what container",
    "start": "1918240",
    "end": "1924240"
  },
  {
    "text": "should it start up and what kind of parameters should it pass",
    "start": "1924240",
    "end": "1929120"
  },
  {
    "text": "that's the location of this example if you really want to see details of a real complicated example",
    "start": "1929519",
    "end": "1937440"
  },
  {
    "text": "that's just the dashboard for kubernetes because there's nothing else graphical to see and then just to summarize the crunchy",
    "start": "1937919",
    "end": "1946080"
  },
  {
    "start": "1942000",
    "end": "1942000"
  },
  {
    "text": "postgres container suite is just one example of a database as a service there's lots of other ones out there",
    "start": "1946080",
    "end": "1952320"
  },
  {
    "text": "that are being built or have already been built but i think it is representative of what",
    "start": "1952320",
    "end": "1958159"
  },
  {
    "text": "people would run into the kinds of issues if they were going to build their own database as a service",
    "start": "1958159",
    "end": "1963760"
  },
  {
    "text": "suite networking and storage are particularly hard",
    "start": "1963760",
    "end": "1969279"
  },
  {
    "text": "to do when it comes to building out clustered databases in particular storage and replicating",
    "start": "1969279",
    "end": "1976159"
  },
  {
    "text": "storage and making making sure that it meets your kind of slas monitoring administration",
    "start": "1976159",
    "end": "1985679"
  },
  {
    "text": "need to really mirror the the agility that you get whenever you deploy databases if you",
    "start": "1985679",
    "end": "1992000"
  },
  {
    "text": "deploy a database container in a second you really don't want to go use some",
    "start": "1992000",
    "end": "1997279"
  },
  {
    "text": "really slow process to deploy administration and monitoring features so",
    "start": "1997279",
    "end": "2003120"
  },
  {
    "text": "really what you want to do i think is try to automate the administrative and monitoring features features along",
    "start": "2003120",
    "end": "2009519"
  },
  {
    "text": "with the database itself using an open source database like postgres made this a lot easier",
    "start": "2009519",
    "end": "2016480"
  },
  {
    "text": "i could take all of these utilities and code build out these containers without",
    "start": "2016480",
    "end": "2022960"
  },
  {
    "text": "worrying about a lot of close source licensing issues which you which would make this a lot harder to do",
    "start": "2022960",
    "end": "2030159"
  },
  {
    "text": "so i'm freely able to build out these containers and distribute them like they",
    "start": "2030159",
    "end": "2035200"
  },
  {
    "text": "like i do and in some cases i even was able to had to basically go into the postgres c",
    "start": "2035200",
    "end": "2041760"
  },
  {
    "text": "source code to figure out exactly what it was doing to make it actually work in things like",
    "start": "2041760",
    "end": "2048320"
  },
  {
    "text": "open shift dedicated so if that had been closed source that probably would have been hard to debug",
    "start": "2048320",
    "end": "2054158"
  },
  {
    "text": "some of those issues and then one sort one size does not fit",
    "start": "2054159",
    "end": "2060398"
  },
  {
    "text": "all so really it does place a premium on your configuration design",
    "start": "2060399",
    "end": "2067839"
  },
  {
    "text": "that's my contact information um if you've got any questions there's also the github site on here",
    "start": "2067839",
    "end": "2074079"
  },
  {
    "text": "you can download all of this and the containers themselves are out on docker hub",
    "start": "2074079",
    "end": "2079599"
  },
  {
    "text": "i don't have the docker have a link there but it's if you do a search for crunchy data on docker hub",
    "start": "2079599",
    "end": "2084800"
  },
  {
    "text": "you'll see all of the the different containers now if i've got two minutes i'll just",
    "start": "2084800",
    "end": "2090480"
  },
  {
    "text": "show you a brief demo if or no we're out of time okay so anyway thank you very much",
    "start": "2090480",
    "end": "2102640"
  }
]