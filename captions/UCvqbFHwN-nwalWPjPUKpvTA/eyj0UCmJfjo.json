[
  {
    "text": "all right welcome everyone um my name is Michael Peters I'm an engineer at Red Hat I work primarily in",
    "start": "60",
    "end": "7259"
  },
  {
    "text": "the security space in emerging Technologies I'm a member of the keyline project if you're not familiar with key",
    "start": "7259",
    "end": "13200"
  },
  {
    "text": "lime we'll touch briefly on key lime in a bit um but uh today's talk is zero trust workload identity in kubernetes is",
    "start": "13200",
    "end": "20900"
  },
  {
    "text": "really Broad and all of the pretty much every slide I have in here could be a",
    "start": "20900",
    "end": "26220"
  },
  {
    "text": "whole talk in and of itself um just the the ideas and Concepts behind zero trust what is identity",
    "start": "26220",
    "end": "32758"
  },
  {
    "text": "um and and how that integrates with everything in the in the cloud native space is tricky and Myriad and so we're",
    "start": "32759",
    "end": "39899"
  },
  {
    "text": "just going to be sort of doing a general overview of all that if you want more information I'll try to answer that so",
    "start": "39899",
    "end": "45540"
  },
  {
    "text": "I'm going to make some assumptions as we go if those assumptions prove incorrect just let me know wait wave your hand and say something uh have me back up",
    "start": "45540",
    "end": "52200"
  },
  {
    "text": "whatever that'll work so talking about zero trust",
    "start": "52200",
    "end": "57719"
  },
  {
    "text": "it's kind of a misnomer zero trust actually means zero implicit trust it's",
    "start": "57719",
    "end": "63180"
  },
  {
    "text": "not as um people don't want to go around like ZT is a better acronym than zit",
    "start": "63180",
    "end": "68220"
  },
  {
    "text": "right um so uh but when we're talking about zero trust you can't have zero trust you",
    "start": "68220",
    "end": "74100"
  },
  {
    "text": "have to trust something but what we're saying is we don't trust things just by where they are on the network so this is",
    "start": "74100",
    "end": "80100"
  },
  {
    "text": "an architectural pattern where we apply security at the asset level not the location level so in the past",
    "start": "80100",
    "end": "87600"
  },
  {
    "text": "a lot of things were set up in this castle and moat scenario where the castle is your data center and you're trying to protect it and you have you",
    "start": "87600",
    "end": "94799"
  },
  {
    "text": "know a moat and walls uh and guards around the the data center",
    "start": "94799",
    "end": "99960"
  },
  {
    "text": "um so your your firewalls your network segmentation your ACLS your vpns and so",
    "start": "99960",
    "end": "105479"
  },
  {
    "text": "everything was focused on this perimeter security if we lock everything out then we can trust everything inside and that",
    "start": "105479",
    "end": "111360"
  },
  {
    "text": "turns out to not be the case for lots of reasons um and even when this was implemented if",
    "start": "111360",
    "end": "118560"
  },
  {
    "text": "it was done well then it was actually a burden and very strict and rigid in how",
    "start": "118560",
    "end": "123960"
  },
  {
    "text": "things could be set up and this led to a lot of the conflict that exists between developers and operations and developers",
    "start": "123960",
    "end": "129899"
  },
  {
    "text": "and security people um and when it wasn't super well done when it was lacks it led Intruders in",
    "start": "129899",
    "end": "135480"
  },
  {
    "text": "and there were lots of holes in in the castle so as things started to grow and and the",
    "start": "135480",
    "end": "144480"
  },
  {
    "text": "modern world started to change a bit right we have a whole bunch of things coming into microservices and bring your",
    "start": "144480",
    "end": "149700"
  },
  {
    "text": "own devices and API gateways multi-cloud setups and serverless functions running",
    "start": "149700",
    "end": "154920"
  },
  {
    "text": "all over the place and so your definition of of um what could be inside of this these",
    "start": "154920",
    "end": "160500"
  },
  {
    "text": "walls changed and you you couldn't just always get a VPN connection between one thing or another or there's a constant",
    "start": "160500",
    "end": "167040"
  },
  {
    "text": "battle every time you wanted to bring some new service into your to your system you'd have to contact security to",
    "start": "167040",
    "end": "172920"
  },
  {
    "text": "set up these you know tunnels or vpns or whatever and so it just became this mess and um you essentially had a world where",
    "start": "172920",
    "end": "180840"
  },
  {
    "text": "the walls of your Castle need to basically Encompass everything which just is not possible so we have a larger number of smaller",
    "start": "180840",
    "end": "188400"
  },
  {
    "text": "pieces of software larger attack surfaces and the old security paradigms of mapping and restricting everything by",
    "start": "188400",
    "end": "194340"
  },
  {
    "text": "port and IP addresses just doesn't work anymore",
    "start": "194340",
    "end": "198500"
  },
  {
    "text": "so another portion of zero trust that's important is identity so it's kind of",
    "start": "199500",
    "end": "205260"
  },
  {
    "text": "central to zero trust and that identity is no longer implicit but has to be very explicit",
    "start": "205260",
    "end": "211680"
  },
  {
    "text": "um identity itself is a little complicated like uh in in the real world when when you're talking about your",
    "start": "211680",
    "end": "216959"
  },
  {
    "text": "personal Identity or how you prove your identity you usually have to rely on some third party right my government issued ID well do I trust your",
    "start": "216959",
    "end": "223440"
  },
  {
    "text": "government it depends right if if it's the state of North Carolina trusting a",
    "start": "223440",
    "end": "228599"
  },
  {
    "text": "Seattle driver's license okay but if it's me traveling to Paris they're not going to care that I have a North",
    "start": "228599",
    "end": "233879"
  },
  {
    "text": "Carolina driver's license right so the how we trust those third parties becomes part of the identity question",
    "start": "233879",
    "end": "241019"
  },
  {
    "text": "and then the old castle in most scenario we have a lot of cases where identity wasn't even",
    "start": "241019",
    "end": "246980"
  },
  {
    "text": "existent right a lot of services could be non-credentialed it's just like well",
    "start": "246980",
    "end": "252000"
  },
  {
    "text": "we're both inside the same VPN so one service can talk to another and we're good and and as we go to zero trust and",
    "start": "252000",
    "end": "257940"
  },
  {
    "text": "zero implicit trust we can't have that anymore so um and even in the scenarios where",
    "start": "257940",
    "end": "263880"
  },
  {
    "text": "identity was existent it was usually tied to some sort of shared credential some secret um so the identity I proved my identity",
    "start": "263880",
    "end": "269940"
  },
  {
    "text": "by saying I have this password and you recognize that password and that proves my identity",
    "start": "269940",
    "end": "275820"
  },
  {
    "text": "and this is week two Insider threats this week to credential compromises credential leaks if I can get that",
    "start": "275820",
    "end": "281639"
  },
  {
    "text": "password now I can impersonate you all over the place um a secret rotation is hard to do right",
    "start": "281639",
    "end": "287400"
  },
  {
    "text": "if if that password gets leaked now I have to change it in all the right places and if I don't don't do it",
    "start": "287400",
    "end": "292620"
  },
  {
    "text": "correctly I can cost outages and then how do we get that secret into the workload to begin with right are we",
    "start": "292620",
    "end": "298080"
  },
  {
    "text": "embedding in code which is obviously a bad idea are we passing it around through the environment which could be",
    "start": "298080",
    "end": "304020"
  },
  {
    "text": "leaked in other ways are we um like how are we how are we giving that secret",
    "start": "304020",
    "end": "309120"
  },
  {
    "text": "um to the workload and then how do we apply identities to ephemeral things so we're",
    "start": "309120",
    "end": "315419"
  },
  {
    "text": "talking serverless functions we're talking cicd build pipelines and things like that that just or even just a",
    "start": "315419",
    "end": "320820"
  },
  {
    "text": "natural system that expands and contracts um under its elastic load",
    "start": "320820",
    "end": "326580"
  },
  {
    "text": "so solving this identity crisis is crucial identities have to be explicit ACLS are based on identities but not",
    "start": "326580",
    "end": "334139"
  },
  {
    "text": "just credentials or locations and everything has an identity in a zero trust system people machines workloads",
    "start": "334139",
    "end": "340500"
  },
  {
    "text": "everything so this is where the spiffy comes in so just how many people are here familiar",
    "start": "340500",
    "end": "346919"
  },
  {
    "text": "spiffy how many people use spiffy or spire it's a little less okay so um spiffy",
    "start": "346919",
    "end": "353340"
  },
  {
    "text": "started as a project in 2016 by Joe beta and trying to to get organizations to",
    "start": "353340",
    "end": "359520"
  },
  {
    "text": "come together and take all this knowledge that we have about identity and and um",
    "start": "359520",
    "end": "364919"
  },
  {
    "text": "security and bring them together into a single project spiffy stands for the secure production identity framework for",
    "start": "364919",
    "end": "371280"
  },
  {
    "text": "everyone and they wanted to leverage a lot of existing stuff so primarily using x509",
    "start": "371280",
    "end": "377580"
  },
  {
    "text": "certificates and JWT so the Json web tokens",
    "start": "377580",
    "end": "383819"
  },
  {
    "text": "um preferably x509 those are more secure and can be rotated and expired and but",
    "start": "383819",
    "end": "391139"
  },
  {
    "text": "for both of these there's a lot of tooling available and a lot of systems will take them as identity to begin with",
    "start": "391139",
    "end": "396840"
  },
  {
    "text": "and so we also want to ident a divorce identity just from the the",
    "start": "396840",
    "end": "402120"
  },
  {
    "text": "um the concept of identity from the credential and from the network location and spiffy also tries to solve what we",
    "start": "402120",
    "end": "407460"
  },
  {
    "text": "call the bottom Turtle problem is anyone familiar with this old story about turtles all the way down",
    "start": "407460",
    "end": "414539"
  },
  {
    "text": "okay so apparently there's this apocryphal story of a guy giving a lecture and a lady a lecture about the",
    "start": "414539",
    "end": "421800"
  },
  {
    "text": "the world floating through the the universe and that this lady old lady said no the world rests on a turtle on",
    "start": "421800",
    "end": "428639"
  },
  {
    "text": "the back of a turtle and he says well what does the turtle rest on and she's like don't aha it's Turtles all the way down so like once you have this concept",
    "start": "428639",
    "end": "436440"
  },
  {
    "text": "of I need this Secret well how do I protect that secret well I can use say pki a public private key",
    "start": "436440",
    "end": "443460"
  },
  {
    "text": "I'll encrypt it with the private key and then let go the public key well then how",
    "start": "443460",
    "end": "448500"
  },
  {
    "text": "do I get access to the public key or oh no I'll protect that by such and like so you get in this cycle of I need to",
    "start": "448500",
    "end": "454560"
  },
  {
    "text": "protect this credential with another credential with another credential and so the bottom turtle is what we call",
    "start": "454560",
    "end": "459900"
  },
  {
    "text": "our root of trust there's always a root of trust in the system even if it's not explicit so if",
    "start": "459900",
    "end": "465840"
  },
  {
    "text": "you don't know what your root of trust is you're probably in a bad State because you're trusting something you're putting your weight on something that",
    "start": "465840",
    "end": "472440"
  },
  {
    "text": "you don't know how strong that is and um so for as a good zero trust system or",
    "start": "472440",
    "end": "478620"
  },
  {
    "text": "ZT system we need a solid route of trust um with spiffy is our root of trust",
    "start": "478620",
    "end": "484319"
  },
  {
    "text": "instead of some ultimate password or last password that we try to protect um it lets us put the trust in something",
    "start": "484319",
    "end": "491940"
  },
  {
    "text": "solid which bases the identity not on some shared secret but on the actual identity of that workload and the nodes",
    "start": "491940",
    "end": "498240"
  },
  {
    "text": "that it's running on and we'll talk about that in a second how does how does spiffy guarantee the identity of that that ultimate piece",
    "start": "498240",
    "end": "505379"
  },
  {
    "text": "so the spiffy consists of a couple of things one first off spiffy is a speck",
    "start": "505379",
    "end": "510599"
  },
  {
    "text": "so there's lots of things that can Implement spiffy and in fact in the cloud native um",
    "start": "510599",
    "end": "516200"
  },
  {
    "text": "ecosystem there are a lot of things that Implement different parts of spiffy because they're either consumers or",
    "start": "516200",
    "end": "521279"
  },
  {
    "text": "producers of different parts of spiffy but it consists of several parts the spiffy ID",
    "start": "521279",
    "end": "526500"
  },
  {
    "text": "which is a text representation of the identity the svid which is the identity",
    "start": "526500",
    "end": "532500"
  },
  {
    "text": "document which is a cryptographically verified document that contains this ID",
    "start": "532500",
    "end": "537839"
  },
  {
    "text": "and it's usually an x509 cert or a JWT we need the workload API and this is a",
    "start": "537839",
    "end": "545519"
  },
  {
    "text": "node local API that workloads talk to to get their identity to get these um",
    "start": "545519",
    "end": "550920"
  },
  {
    "text": "the svid we have the trust bundle which is a set",
    "start": "550920",
    "end": "557100"
  },
  {
    "text": "of public keys for that spiffy issuing authority and for that sort of defines",
    "start": "557100",
    "end": "562620"
  },
  {
    "text": "that what we call the trust domain and then Federation which allows you to have multiple spiffy setups that share",
    "start": "562620",
    "end": "569899"
  },
  {
    "text": "information across explicitly by sharing trust bundles in a federation so what",
    "start": "569899",
    "end": "575640"
  },
  {
    "text": "spiffy is not it's not designed for non-software so this is all about software workload",
    "start": "575640",
    "end": "581339"
  },
  {
    "text": "identity so it's not good for humans animals artwork nfts anything like that like it's just this is identifying",
    "start": "581339",
    "end": "588180"
  },
  {
    "text": "software it's also not an authorization framework identity is necessary for authorization",
    "start": "588180",
    "end": "595040"
  },
  {
    "text": "so you need something to say what is my definitive Identity or how do I prove my identity but that doesn't say can I run",
    "start": "595040",
    "end": "601380"
  },
  {
    "text": "this workload right it's not the authorization part of that you have to implement that yourself and there's lots of things that know how to talk about",
    "start": "601380",
    "end": "606899"
  },
  {
    "text": "and with spiffy identities um but that that's not what spiffy does",
    "start": "606899",
    "end": "612540"
  },
  {
    "text": "so it's it's like tangential and once you have spiffy and once you have identity solved then your authorization",
    "start": "612540",
    "end": "618660"
  },
  {
    "text": "actually becomes a much easier problem so the spiffy ID is just a URI with a",
    "start": "618660",
    "end": "624839"
  },
  {
    "text": "spiffy prefix we have a domain which is our trust domain so that's everything under this",
    "start": "624839",
    "end": "630180"
  },
  {
    "text": "domain is issued by this spiffy setup and we trust it and then everything on",
    "start": "630180",
    "end": "636779"
  },
  {
    "text": "the path is the identifier it can be hierarchical it could be",
    "start": "636779",
    "end": "642180"
  },
  {
    "text": "location based like you say EU versus US it could be name value pairs spiffy",
    "start": "642180",
    "end": "647880"
  },
  {
    "text": "doesn't say what this needs to be you can do whatever you want that but that doesn't mean you can do whatever you want because a lot of systems have their",
    "start": "647880",
    "end": "654240"
  },
  {
    "text": "own idea of what this spiffy ID should look like and since we're talking about kubernetes the specific ID will look something like this with your cluster",
    "start": "654240",
    "end": "660600"
  },
  {
    "text": "name as your trusted root or your trusted domain then we have an s slash",
    "start": "660600",
    "end": "666899"
  },
  {
    "text": "the namespace name slash sa slash your service account and so",
    "start": "666899",
    "end": "673200"
  },
  {
    "text": "this means that our identity of what this workload is is tied to which cluster is running which namespace is in",
    "start": "673200",
    "end": "678779"
  },
  {
    "text": "and what service account is using and those are in most setups in kubernetes I use spiffy our ID for the workload this",
    "start": "678779",
    "end": "686820"
  },
  {
    "text": "means that your service account you need to be kind of conscious of how you use that and not use that across multiple",
    "start": "686820",
    "end": "692160"
  },
  {
    "text": "things that are not the same workload or they'll end up with the same ID and then you can't really distinguish them when you're talking about authorization",
    "start": "692160",
    "end": "699720"
  },
  {
    "text": "um but it makes sense that like some pods are gonna a lot of pods are going to be having the same ID right if they're part of the same deployment or",
    "start": "699720",
    "end": "705060"
  },
  {
    "text": "same service they're going to be they should logically have the same spiffy ID but you should not if you're using",
    "start": "705060",
    "end": "711899"
  },
  {
    "text": "spiffy inspire you shouldn't be reusing your service accounts where things are not logically the same identity",
    "start": "711899",
    "end": "720019"
  },
  {
    "text": "so that brings us to spire so Spire is the spiffy runtime environment and is the production",
    "start": "720959",
    "end": "727560"
  },
  {
    "text": "reference implementation of spire and as I said before spiers of spec or spiffy suspect sorry this is it's confusing it",
    "start": "727560",
    "end": "734880"
  },
  {
    "text": "confuses me even when I talk about it most of the time so a lot of times you'll say spiffy or Spire when you're",
    "start": "734880",
    "end": "740040"
  },
  {
    "text": "actually meeting one or the other I'll try to be explicit when I'm talking about and a lot of times when you're talking about just the system in general you'll say spiffy Spire right to lump",
    "start": "740040",
    "end": "746579"
  },
  {
    "text": "them together but Spire is the implementation the production implementation of spiffy and",
    "start": "746579",
    "end": "752760"
  },
  {
    "text": "there's other things that can introduce or that can Implement different parts of the spiffy spec like your service mesh",
    "start": "752760",
    "end": "758640"
  },
  {
    "text": "or your um whatever um and",
    "start": "758640",
    "end": "765420"
  },
  {
    "text": "um this is the architecture of spire so we have a Aspire server and agents so",
    "start": "765420",
    "end": "771600"
  },
  {
    "text": "the agents live in kubernetes uh on each node is a Daemon set",
    "start": "771600",
    "end": "777300"
  },
  {
    "text": "and the what we call the attestation which is basically",
    "start": "777300",
    "end": "783899"
  },
  {
    "text": "um some set of of facts that that we can make provable observations about",
    "start": "783899",
    "end": "791459"
  },
  {
    "text": "um this attestation happens between these the agent and the node um so in Inspire we want two identities",
    "start": "791459",
    "end": "799320"
  },
  {
    "text": "we want the node to have an identity and then we want the workload on that node to have its own identity",
    "start": "799320",
    "end": "805260"
  },
  {
    "text": "um so the agents and the server work together to do both so first off",
    "start": "805260",
    "end": "811260"
  },
  {
    "text": "um when a node comes up and has a Spire agent come up it wants to prove his identity to the server and this could be",
    "start": "811260",
    "end": "819000"
  },
  {
    "text": "done in a couple different ways and there's there's different ways this happens depending on your environment but it basically",
    "start": "819000",
    "end": "824519"
  },
  {
    "text": "comes up with some provable or facts about the system that it then sends to the server and then the server usually",
    "start": "824519",
    "end": "832500"
  },
  {
    "text": "by a third party attest to the validity of those facts",
    "start": "832500",
    "end": "837540"
  },
  {
    "text": "and then once the node has this identity workloads can then communicate with the agent over this workload API and say",
    "start": "837540",
    "end": "843360"
  },
  {
    "text": "what is now give me my identity what is my identity give me my my cert that asserts my identity and then the agent",
    "start": "843360",
    "end": "850980"
  },
  {
    "text": "will query the the kernel usually and other things on",
    "start": "850980",
    "end": "857220"
  },
  {
    "text": "the Kernel depending on the plugins you're using to find out what is the identity of this workload and then I send that back to the",
    "start": "857220",
    "end": "864240"
  },
  {
    "text": "um server to make sure that this workload has been registered and then I can get this ass fit now it seems like a",
    "start": "864240",
    "end": "869399"
  },
  {
    "text": "complicated process but there's a lot of good caching involved in that so it's relatively quick and then the identity gives back is",
    "start": "869399",
    "end": "876899"
  },
  {
    "text": "giving back its spiffy ID and an svid that's this certificate or JWT token",
    "start": "876899",
    "end": "882120"
  },
  {
    "text": "that cryptographically validates my identity the sfit is a short-lived certificate",
    "start": "882120",
    "end": "889079"
  },
  {
    "text": "um that will that Spire will take care of rotating",
    "start": "889079",
    "end": "895500"
  },
  {
    "text": "the agent will take care of rotating that and then notifying the workload when it's rotated so if you've ever dealt with like SSL TLS certificates and",
    "start": "895500",
    "end": "901800"
  },
  {
    "text": "rotation on that you know how much of a pain it is right there's there's ways to automate that with like let's encrypt and things like that this fire can take",
    "start": "901800",
    "end": "907860"
  },
  {
    "text": "care of all that for you and you can make these credentials very short-lived on on the order of a few minutes if you",
    "start": "907860",
    "end": "913500"
  },
  {
    "text": "want obviously there's scalability issues in there so you find the right value but it means that if this credential is ever compromised it's",
    "start": "913500",
    "end": "918959"
  },
  {
    "text": "usually dead fairly quickly um so this idea of these sort of",
    "start": "918959",
    "end": "924779"
  },
  {
    "text": "credentials living outside of the workload but being attached to the workload um I've heard it referred to as ambient",
    "start": "924779",
    "end": "931019"
  },
  {
    "text": "credentials which I really like meaning that it's not something shared that the workload has embedded it's not just",
    "start": "931019",
    "end": "937980"
  },
  {
    "text": "there but it accompanies a workload and it's part of the workloads identity",
    "start": "937980",
    "end": "942860"
  },
  {
    "text": "so as I mentioned before Spire uses a plug-in architecture so the first set of plugins is",
    "start": "943620",
    "end": "949800"
  },
  {
    "text": "communicating with the Upstream Authority so you can have Spire to be your ca your ultimate route of trust for",
    "start": "949800",
    "end": "957420"
  },
  {
    "text": "your your certificate Authority or you can tie it to an existing CA infrastructure if you haven't",
    "start": "957420",
    "end": "963680"
  },
  {
    "text": "um and then the other parts of the the that are plugins are the node testers and the workloaded testers and so these",
    "start": "963779",
    "end": "970079"
  },
  {
    "text": "would be plugins both on the server and the the agent side um so for instance let's talk about like",
    "start": "970079",
    "end": "976320"
  },
  {
    "text": "a real world scenario like an AWS deployment if you have a kubernetes cluster in AWS and you have Spire running on that the Spire agent will",
    "start": "976320",
    "end": "983820"
  },
  {
    "text": "query the local AWS API that's available to that node to find out who am I what",
    "start": "983820",
    "end": "989760"
  },
  {
    "text": "is this node gathers that information sends it off to the Spire server and then the Spire server will also talk to",
    "start": "989760",
    "end": "995339"
  },
  {
    "text": "AWS out of bound out of band to confirm all this information that I just got from the Spire agent once they can agree",
    "start": "995339",
    "end": "1001639"
  },
  {
    "text": "that they both can get the same information from AWS they can now say all right this node is this node in AWS",
    "start": "1001639",
    "end": "1006920"
  },
  {
    "text": "so that we can have that identity now we can issue certificates to that node and that node can now issue identity based",
    "start": "1006920",
    "end": "1013820"
  },
  {
    "text": "on that node and so then the the workload attestators would come into play when a workload comes up",
    "start": "1013820",
    "end": "1020300"
  },
  {
    "text": "and they'll carry uh query the kernel getting say the process ID they'll if",
    "start": "1020300",
    "end": "1025339"
  },
  {
    "text": "you have a kubernetes set up they can be set up to query kubernetes what is my pod name what is what are the images I'm",
    "start": "1025339",
    "end": "1031880"
  },
  {
    "text": "running in this pod all this sort of information that it combines together um",
    "start": "1031880",
    "end": "1038798"
  },
  {
    "text": "so in this scenario the workloads are completely untrusted",
    "start": "1038959",
    "end": "1044178"
  },
  {
    "text": "the Spire server is completely trusted this is part of your ca infrastructure and should be secure just like you would",
    "start": "1044179",
    "end": "1049940"
  },
  {
    "text": "for any issuing authority wherever you're you're putting your your root certificates or things like that in the organization and the Spire agent is sort",
    "start": "1049940",
    "end": "1057020"
  },
  {
    "text": "of in the middle it's mostly trusted because it's the one that can issue the workload identity certificates",
    "start": "1057020",
    "end": "1063020"
  },
  {
    "text": "um but a lot of its measurements are concerned confirmed by the Spire server as it's doing its work",
    "start": "1063020",
    "end": "1070059"
  },
  {
    "text": "um so the other thing to realize here is that workloads have to be pre-registered",
    "start": "1071660",
    "end": "1077900"
  },
  {
    "text": "with the Spire server so that not just any that so that certain nodes can only make",
    "start": "1077900",
    "end": "1083900"
  },
  {
    "text": "um identities for certain workloads and so you set that up previously out of band essentially",
    "start": "1083900",
    "end": "1090500"
  },
  {
    "text": "but um you can do that manually through the command line but better ways are through automated processes like either your CI",
    "start": "1090500",
    "end": "1097100"
  },
  {
    "text": "CD process during a deployment or you could also have things running on your kubernetes cluster that will do that as",
    "start": "1097100",
    "end": "1103160"
  },
  {
    "text": "new pods come up as new workloads start that they will then register themselves with the Spire server and then the",
    "start": "1103160",
    "end": "1108860"
  },
  {
    "text": "workload is registered when it tries to get its identity",
    "start": "1108860",
    "end": "1114640"
  },
  {
    "text": "so now that we've broken some ground there and talked about sort of these fundamental things of what is zero trust",
    "start": "1115280",
    "end": "1122000"
  },
  {
    "text": "what is identity how do we get into this practice well in most situations that you come into you're not going to be",
    "start": "1122000",
    "end": "1127100"
  },
  {
    "text": "Greenfield right you're going to have a lot of Legacy systems that have usernames and passwords and Bearer",
    "start": "1127100",
    "end": "1132140"
  },
  {
    "text": "tokens or other sort of secret credentials that you have stored somewhere so how do you get access to that well vault is a very common one",
    "start": "1132140",
    "end": "1137960"
  },
  {
    "text": "some sort of password management system or a secret management system so how do you then integrate this with your existing",
    "start": "1137960",
    "end": "1145160"
  },
  {
    "text": "workflow well Vault can use x509 certificates as its identity and you can",
    "start": "1145160",
    "end": "1150860"
  },
  {
    "text": "configure Vault to trust the the um spiffy ID that's in as part of the",
    "start": "1150860",
    "end": "1158059"
  },
  {
    "text": "certificate so you can put a an ACL involved that says trust this particular",
    "start": "1158059",
    "end": "1163100"
  },
  {
    "text": "spiffy ID this specific specific ID coming from these certs that you then validate the certain and you know prove",
    "start": "1163100",
    "end": "1169820"
  },
  {
    "text": "that it's valid in your trust domain and then they get access to the secrets so now you have these workloads that",
    "start": "1169820",
    "end": "1176240"
  },
  {
    "text": "have no embedded secrets that can talk to a vault and get the secrets they need for talking to third-party systems if",
    "start": "1176240",
    "end": "1181340"
  },
  {
    "text": "they need to there's another project called spiffy vault",
    "start": "1181340",
    "end": "1186440"
  },
  {
    "text": "which lets you read um secrets from Vault based on from inside of that that current process",
    "start": "1186440",
    "end": "1192500"
  },
  {
    "text": "based on that process is spiffy s vid so if you think of it like the the scenario",
    "start": "1192500",
    "end": "1198860"
  },
  {
    "text": "here that's really common that this solves is I have a CI CD process it's a it's a bash script but it needs to be",
    "start": "1198860",
    "end": "1204080"
  },
  {
    "text": "able to get some secrets from something and then um so it tries to pull those secrets from Vault but I don't want to embed the",
    "start": "1204080",
    "end": "1210320"
  },
  {
    "text": "the Vault um secret into this workload so this when this script starts up in my cicd",
    "start": "1210320",
    "end": "1216559"
  },
  {
    "text": "process say in in the kubernetes cluster it can get its identity from spiffy use",
    "start": "1216559",
    "end": "1222500"
  },
  {
    "text": "that to get the credentials from Vault and then be able to execute Vault command line utilities as if the",
    "start": "1222500",
    "end": "1227720"
  },
  {
    "text": "password was already there for vault so databases will work in a very similar",
    "start": "1227720",
    "end": "1235160"
  },
  {
    "text": "way a lot of the most common popular databases will allow x509 certificates to be used as your identity",
    "start": "1235160",
    "end": "1242620"
  },
  {
    "text": "so when you configure this uh in the the details vary by database engine but",
    "start": "1242620",
    "end": "1248780"
  },
  {
    "text": "essentially you configure the user to be identified by",
    "start": "1248780",
    "end": "1254559"
  },
  {
    "text": "different criteria on the certificate so you install the Spire trust bundle that's part of your aspire issuer you",
    "start": "1254559",
    "end": "1261500"
  },
  {
    "text": "take the trust bundle you install it in your database engine however that happens and then now we can validate the",
    "start": "1261500",
    "end": "1267919"
  },
  {
    "text": "certificate certificates were signed by a a Aspire trusted Authority and then",
    "start": "1267919",
    "end": "1274580"
  },
  {
    "text": "you can do things like say that the issuer needs to match whatever your Spire route is and then the subject name",
    "start": "1274580",
    "end": "1280580"
  },
  {
    "text": "of the certificate also needs to match the Spire ID or the spiffy ID um which is uh that URI that we talked",
    "start": "1280580",
    "end": "1286760"
  },
  {
    "text": "about and so then you can tie specifically identity identifiers into database users and now any workload with",
    "start": "1286760",
    "end": "1294320"
  },
  {
    "text": "those identifiers will just magically be able to connect to the database and have it all work",
    "start": "1294320",
    "end": "1299500"
  },
  {
    "text": "another very popular integration here with spiffy identifiers is your service mesh I'm assuming most people here know",
    "start": "1299559",
    "end": "1305659"
  },
  {
    "text": "to service meshes but just everybody raise your hand if you notice service meshes or all right so",
    "start": "1305659",
    "end": "1312260"
  },
  {
    "text": "um just very briefly it's the dedicated infrastructure layer that does the service to service communication and a",
    "start": "1312260",
    "end": "1317539"
  },
  {
    "text": "lot of the nice features that a service mesh provide service Discovery load balancing failover recovery encryption",
    "start": "1317539",
    "end": "1323960"
  },
  {
    "text": "and security policy enforcement and there's usually some API to control",
    "start": "1323960",
    "end": "1329059"
  },
  {
    "text": "some data plane and control plane and things like that the most popular ones istio Linker D and console",
    "start": "1329059",
    "end": "1335720"
  },
  {
    "text": "um and of these specific features that I mentioned that sort of server meshes provide encryption and security policy",
    "start": "1335720",
    "end": "1342559"
  },
  {
    "text": "enforcement are the ones that are really important to something like um your identity what and so some",
    "start": "1342559",
    "end": "1350179"
  },
  {
    "text": "um most or all of the uh service measures out there have some concept of identity or their own concept",
    "start": "1350179",
    "end": "1356480"
  },
  {
    "text": "of identity or maybe they piggyback on um like kubernetes I identity attributes",
    "start": "1356480",
    "end": "1363980"
  },
  {
    "text": "but they don't go as far as spiffy does right we talked about those",
    "start": "1363980",
    "end": "1369679"
  },
  {
    "text": "attestation features specifically doesn't just trust that the kubernetes service account is right it actually",
    "start": "1369679",
    "end": "1376400"
  },
  {
    "text": "interrogates kubernetes it interrogates the kernel uh processes and and then or",
    "start": "1376400",
    "end": "1382400"
  },
  {
    "text": "your node uh deployment on AWS or bare metal or um even to the hardware TPM if you",
    "start": "1382400",
    "end": "1388039"
  },
  {
    "text": "wanted to so so the Spire can do these deeper attestations of what your identity actually is and we want to be",
    "start": "1388039",
    "end": "1393200"
  },
  {
    "text": "able to leverage that in our service mesh so when we're talking about kubernetes the most popular service mesh is istio",
    "start": "1393200",
    "end": "1399919"
  },
  {
    "text": "which was a project started um by Google IBM lift and using the envoy",
    "start": "1399919",
    "end": "1405679"
  },
  {
    "text": "proxy designed to be kubernetes native but also to work in in non-kubernetes",
    "start": "1405679",
    "end": "1411280"
  },
  {
    "text": "scenarios to be platform independent um so",
    "start": "1411280",
    "end": "1416539"
  },
  {
    "text": "as part of this communication between like Services most service meshes will do mtls so",
    "start": "1416539",
    "end": "1423799"
  },
  {
    "text": "mutual TLS connections between them and the nice thing about that is we have spiffy being able to issue these x509",
    "start": "1423799",
    "end": "1430700"
  },
  {
    "text": "certificates which can be used then as the keys and certificates for encryption",
    "start": "1430700",
    "end": "1436039"
  },
  {
    "text": "here and so when you you can configure istio to",
    "start": "1436039",
    "end": "1443240"
  },
  {
    "text": "use spire and and to use the Spire Secrets there's a secret Discovery service API in Envoy and istio that",
    "start": "1443240",
    "end": "1450260"
  },
  {
    "text": "allows um the istio sidecar to talk to the Spire agent and get these secrets for",
    "start": "1450260",
    "end": "1457220"
  },
  {
    "text": "this particular work workload so they can share them and then spiral will take care of rotating those Secrets as well",
    "start": "1457220",
    "end": "1465220"
  },
  {
    "text": "um and so this lets you use the spiffy ID and because we're using Spire we can go further and deeper into more than",
    "start": "1466100",
    "end": "1473840"
  },
  {
    "text": "just service account we can do things like make attestations based on the Pod name the container image the kubernetes",
    "start": "1473840",
    "end": "1479659"
  },
  {
    "text": "labels the annotations um and and so we can use these these deeper infrastructure attributes and and",
    "start": "1479659",
    "end": "1485960"
  },
  {
    "text": "things that we've attested to to then um have policy enforcement at the the",
    "start": "1485960",
    "end": "1492620"
  },
  {
    "text": "service mesh level so Switching gears a little bit here",
    "start": "1492620",
    "end": "1497720"
  },
  {
    "text": "we're talking about supply chain security um so sonotype puts out a state of the",
    "start": "1497720",
    "end": "1502940"
  },
  {
    "text": "supply software supply chain report every year and since 2019 they've had an",
    "start": "1502940",
    "end": "1508880"
  },
  {
    "text": "average of 742 percent year-over-year increases that's crazy high and it's",
    "start": "1508880",
    "end": "1515960"
  },
  {
    "text": "getting worse and it's going to get worse I think part of this is not just that",
    "start": "1515960",
    "end": "1522020"
  },
  {
    "text": "um well it's because as we get more mature as an industry we're our runtime environments are getting more and more",
    "start": "1522020",
    "end": "1527900"
  },
  {
    "text": "secure we're having less and less holes but it means that they've gone looking for other places and I don't know about",
    "start": "1527900",
    "end": "1535039"
  },
  {
    "text": "you but I've never been in an organization that put as much love attention and money into their build",
    "start": "1535039",
    "end": "1540980"
  },
  {
    "text": "system as they do in their production system and so that's where the attacks are going",
    "start": "1540980",
    "end": "1546260"
  },
  {
    "text": "and also I think hackers also see the benefit of supply chain breaches because you can get something early enough on",
    "start": "1546260",
    "end": "1553520"
  },
  {
    "text": "and have a far-reaching um uh consequences for any Hanks that you",
    "start": "1553520",
    "end": "1559340"
  },
  {
    "text": "might do if you can compromise a low-level Library that's used all over the place like log4j then you can reap",
    "start": "1559340",
    "end": "1566659"
  },
  {
    "text": "those rewards in in lots of different ways so um who here is familiar with tecton as a",
    "start": "1566659",
    "end": "1574100"
  },
  {
    "text": "project all right not as many but if you're familiar with supply chain security stuff technology is a big",
    "start": "1574100",
    "end": "1580700"
  },
  {
    "text": "um a big part of that in the cloud native world but tecton is a kubernetes native CI CD system or a framework for",
    "start": "1580700",
    "end": "1588620"
  },
  {
    "text": "building CI CD systems might be a better way to say it um so like in kubernetes everything is",
    "start": "1588620",
    "end": "1593840"
  },
  {
    "text": "yaml objects and tecton also has some umbrella projects like tecton chains that when put together give you first",
    "start": "1593840",
    "end": "1600260"
  },
  {
    "text": "class security features like signed provenance and hermetic builds and sign Providence basically means that every",
    "start": "1600260",
    "end": "1607340"
  },
  {
    "text": "step of the build is signed and can be crypto cryptographically verified later by someone else",
    "start": "1607340",
    "end": "1615020"
  },
  {
    "text": "um so going further with that like how do",
    "start": "1615020",
    "end": "1620299"
  },
  {
    "text": "how where does spiffy come into this well there's something that's called Salsa s-l-s-a which stands for the",
    "start": "1620299",
    "end": "1626600"
  },
  {
    "text": "supply chain levels for software artifacts and it's basically a recommendation system for software",
    "start": "1626600",
    "end": "1632080"
  },
  {
    "text": "recommendations for software build systems and there's different levels and as you go through these levels there are",
    "start": "1632080",
    "end": "1637460"
  },
  {
    "text": "stricter requirements about how your builds are done and the security controls around artifacts that you're producing but level three which is the",
    "start": "1637460",
    "end": "1644059"
  },
  {
    "text": "second highest um it wants to have this one requirement",
    "start": "1644059",
    "end": "1649720"
  },
  {
    "text": "non-fossil bio so non-falsifiable provenance basically means it's not just",
    "start": "1649720",
    "end": "1655820"
  },
  {
    "text": "enough to say that this artifact was signed but how do I know some step of the of the process wasn't compromised",
    "start": "1655820",
    "end": "1662000"
  },
  {
    "text": "along the way so who cares if I get a binary that's signed if something was",
    "start": "1662000",
    "end": "1667279"
  },
  {
    "text": "injected in the middle or the build process was changed in the middle right um so technone chains because of just",
    "start": "1667279",
    "end": "1673940"
  },
  {
    "text": "the way it works with the kubernetes pods can't guarantee this it can guarantee the Providence of the build",
    "start": "1673940",
    "end": "1680840"
  },
  {
    "text": "artifacts but not that something could have modified one of the processes along the way",
    "start": "1680840",
    "end": "1686620"
  },
  {
    "text": "um so like I can guarantee like the steps between the processes but not that something didn't modify the task as it",
    "start": "1686840",
    "end": "1692480"
  },
  {
    "text": "was running so for that you need something outside of that and that's where spiffy comes in so there's a uh",
    "start": "1692480",
    "end": "1698240"
  },
  {
    "text": "what called what's called tep0089 which is the tecton enhancement proposal which",
    "start": "1698240",
    "end": "1703400"
  },
  {
    "text": "uses spiffy Inspire identities on the task run pods in kubernetes that use",
    "start": "1703400",
    "end": "1710059"
  },
  {
    "text": "these x509s vid identities to sign each task run and so you can tell before",
    "start": "1710059",
    "end": "1717200"
  },
  {
    "text": "and after if the task run was modified and so it's not just a not just the",
    "start": "1717200",
    "end": "1722960"
  },
  {
    "text": "outputs but the the Run itself um so that something didn't modify it as it",
    "start": "1722960",
    "end": "1728120"
  },
  {
    "text": "was running so this work is ongoing uh parts of it have been merged uh and parts of it are still going but this is",
    "start": "1728120",
    "end": "1733700"
  },
  {
    "text": "a feature that I'm really looking forward to and tecton um and then as",
    "start": "1733700",
    "end": "1739220"
  },
  {
    "text": "um one as technology becomes more popular and people are using it further to replace Jenkins and things like that",
    "start": "1739220",
    "end": "1746360"
  },
  {
    "text": "um we people will just get these features by default like when if you can say out of the box I because I have a",
    "start": "1746360",
    "end": "1752360"
  },
  {
    "text": "Spire server and I've connected my tecton build to my Spire server I now have salsa 3 uh level",
    "start": "1752360",
    "end": "1759380"
  },
  {
    "text": "um it's also a three-level build system which is um quite impressive if you can get that",
    "start": "1759380",
    "end": "1765140"
  },
  {
    "text": "out of the box another project that can integrate with",
    "start": "1765140",
    "end": "1770779"
  },
  {
    "text": "spiffy in interesting ways is six door project I if you haven't heard about Sig store I I don't know where you've been the past couple years but it's",
    "start": "1770779",
    "end": "1776779"
  },
  {
    "text": "everywhere at pretty much every conference I go to that's mentioned somewhere in the keynote but Sig store",
    "start": "1776779",
    "end": "1782299"
  },
  {
    "text": "if you're not familiar there's an open source project that handles the signing verification and checks for Providence and this is as someone mentioned in one",
    "start": "1782299",
    "end": "1789440"
  },
  {
    "text": "Aquino City this is probably something we should have solved in 2005. when we think about it and lots of different projects have tried to solve it in lots",
    "start": "1789440",
    "end": "1794899"
  },
  {
    "text": "of different ways but never in a really robust easy to use and",
    "start": "1794899",
    "end": "1801039"
  },
  {
    "text": "cryptographically verifiable by everyone system",
    "start": "1801039",
    "end": "1806440"
  },
  {
    "text": "um so lots of big companies are working behind are working on uh six store",
    "start": "1806720",
    "end": "1811820"
  },
  {
    "text": "Google Cisco GitHub Red Hats one of them and so it has a lot of this Integrations",
    "start": "1811820",
    "end": "1816919"
  },
  {
    "text": "with various build systems and Packaging Systems including tecton chains that I mentioned earlier that's one of the ways",
    "start": "1816919",
    "end": "1822620"
  },
  {
    "text": "that tecton chains proves its Providence about is by putting signatures into six store",
    "start": "1822620",
    "end": "1828278"
  },
  {
    "text": "um so there's a couple of ways that we can have integration between spiffy identities and Sig store",
    "start": "1829399",
    "end": "1834980"
  },
  {
    "text": "so if you've ever used Sig store one of the the cool features about it is something called keyless signing and so",
    "start": "1834980",
    "end": "1842059"
  },
  {
    "text": "Sig store can integrate with an oidc provider which is an open identity connect and can let you once you've proven your",
    "start": "1842059",
    "end": "1849679"
  },
  {
    "text": "identity to some oidc provider say Google or Facebook or GitHub or whatever you want to choose your internal",
    "start": "1849679",
    "end": "1856039"
  },
  {
    "text": "identity provider it can then use that identity to sign the artifact produce a temporary key that only lives",
    "start": "1856039",
    "end": "1862580"
  },
  {
    "text": "just for those long to sign that artifact and can tie it back to your identity and then throw the keys away and so no one can ever reuse or",
    "start": "1862580",
    "end": "1867980"
  },
  {
    "text": "compromise that key and you can guarantee it was signed by the person who owned that identity but this means",
    "start": "1867980",
    "end": "1873320"
  },
  {
    "text": "that a person has to be there right so when you're talking about an automated build system there's not necessarily tied to a person and there's not a",
    "start": "1873320",
    "end": "1879260"
  },
  {
    "text": "person at every time a build is running to sign into an oid CD provider with their credentials and say okay I signed",
    "start": "1879260",
    "end": "1884840"
  },
  {
    "text": "this artifact so we want to be able to do this in an automated way so Sig store can use spiffy as its oidc",
    "start": "1884840",
    "end": "1891679"
  },
  {
    "text": "provider and so you can tie in spiffy um credentials or spiffy identity and",
    "start": "1891679",
    "end": "1898340"
  },
  {
    "text": "that's what's used to sign it and so it can create this temporary certificate tied to the spiffy ID and then put that",
    "start": "1898340",
    "end": "1904220"
  },
  {
    "text": "into six store so that's how we're using",
    "start": "1904220",
    "end": "1909380"
  },
  {
    "text": "um this truss model where um Sig stories is basing its trust off",
    "start": "1909380",
    "end": "1914480"
  },
  {
    "text": "of these spiffy ideas but let's go the other way around let's um there's a new experimental feature that's been merged",
    "start": "1914480",
    "end": "1920179"
  },
  {
    "text": "into Spire that allows kubernetes workloads to CU Sig store to verify",
    "start": "1920179",
    "end": "1925279"
  },
  {
    "text": "container container images so as I talked about this before when the node attestators are running and",
    "start": "1925279",
    "end": "1931820"
  },
  {
    "text": "trying to verify this workload it can look at various attributes of the that workload in kubernetes a pod name what",
    "start": "1931820",
    "end": "1937880"
  },
  {
    "text": "what image is running and things like that now with these features it can say also is the image that's running was it",
    "start": "1937880",
    "end": "1944960"
  },
  {
    "text": "does it have a signature in Sig store and does the signature that the identities that sign that signature do I",
    "start": "1944960",
    "end": "1951320"
  },
  {
    "text": "trust them so for instance I can say I only in my cluster I only allow",
    "start": "1951320",
    "end": "1957140"
  },
  {
    "text": "um images that are signed by m Peterson sorry M Peter said red hat to get spiffy",
    "start": "1957140",
    "end": "1963799"
  },
  {
    "text": "IDs and spiffy credentials and so you can sort of you can complete the circle and say these containers have been",
    "start": "1963799",
    "end": "1971299"
  },
  {
    "text": "signed these I'm sorry these images have been signed during the six door and now my identity provider can trust or can",
    "start": "1971299",
    "end": "1978320"
  },
  {
    "text": "link that to The Container running that specific image that's been signed by identities that I",
    "start": "1978320",
    "end": "1985100"
  },
  {
    "text": "approve that makes sense it's a little circular right because we have both things that",
    "start": "1985100",
    "end": "1991279"
  },
  {
    "text": "they can use the other as trust but this gives us a nice like completed circle of of the build system",
    "start": "1991279",
    "end": "1998019"
  },
  {
    "text": "so I talked about this before um this this plug-in architecture um so now the node attach stator can",
    "start": "1998240",
    "end": "2004299"
  },
  {
    "text": "reach out to Sig's door as part of its um sorry the workload attestation can",
    "start": "2004299",
    "end": "2009340"
  },
  {
    "text": "reach out to Sig stores part of its attestation",
    "start": "2009340",
    "end": "2013860"
  },
  {
    "text": "so I mentioned at the very beginning that I work on a project called key lime um and key lime is I I it's it's really",
    "start": "2014740",
    "end": "2021100"
  },
  {
    "text": "hard for me to give a talk without talking about key lime because I think it should be used everywhere but um key lime is a cncs Sandbox project that",
    "start": "2021100",
    "end": "2028480"
  },
  {
    "text": "provides remote boot attestation and also runtime file Integrity attestation um and it ties it back to a hardware",
    "start": "2028480",
    "end": "2034539"
  },
  {
    "text": "route of trust and basically what this means is that you we can create policy based on your your",
    "start": "2034539",
    "end": "2043000"
  },
  {
    "text": "measured boot so as your your machine boots up and records different things and the kernel knows how to record those and your your Booter your bootloader",
    "start": "2043000",
    "end": "2050138"
  },
  {
    "text": "knows how to record those and put them inside the hardware TPM or software TPM or Cloud TPM or whatever but these",
    "start": "2050139",
    "end": "2055599"
  },
  {
    "text": "cryptographic devices that lets you basically create a hash of a hash of a hash of different properties and so you",
    "start": "2055599",
    "end": "2062020"
  },
  {
    "text": "can make guarantees about those hashes and then use those to to verify",
    "start": "2062020",
    "end": "2068320"
  },
  {
    "text": "that nothing has been tampered with along the way um great talks about key lime out there but um essentially what we want to be",
    "start": "2068320",
    "end": "2075700"
  },
  {
    "text": "able to do is say has this node been tampered with or if you remember we talked about the Spire agent right we're",
    "start": "2075700",
    "end": "2081700"
  },
  {
    "text": "trusting the Spire agent to a certain degree to not have been tampered with well how do we make guarantees about that well key lime can make guarantees",
    "start": "2081700",
    "end": "2088000"
  },
  {
    "text": "about your Spire agent not having been tampered with or anything on your system",
    "start": "2088000",
    "end": "2093099"
  },
  {
    "text": "um and so there's a couple of ways that we can integrate this with key lime one",
    "start": "2093099",
    "end": "2099339"
  },
  {
    "text": "like we talked about with service mesh um we have",
    "start": "2099339",
    "end": "2105720"
  },
  {
    "text": "the uh the mtls connections can be secured through spire and and that's fine um that's a very common way but the",
    "start": "2106060",
    "end": "2113859"
  },
  {
    "text": "other thing is that and this is an Avenue I have been thinking about if",
    "start": "2113859",
    "end": "2118900"
  },
  {
    "text": "somebody finds this interesting let me know and I'll work on this but using key lime as an attestator plug-in in",
    "start": "2118900",
    "end": "2126280"
  },
  {
    "text": "Spire so that when Spire is at doing an attestation on the Node you can tell it make sure or have the Spire agent gather",
    "start": "2126280",
    "end": "2133839"
  },
  {
    "text": "information about the hardware TPM or software TPM whatever about the TPM and about the key lime agent",
    "start": "2133839",
    "end": "2139839"
  },
  {
    "text": "and then the server side of the attestator can then query the key lime server and say it does this match right",
    "start": "2139839",
    "end": "2146740"
  },
  {
    "text": "do I know about this node is it the TPM a valid TPA manufacturer but also has",
    "start": "2146740",
    "end": "2152200"
  },
  {
    "text": "the node passed acidation attestation has has anything been tampered with on this node if anything has been tampered",
    "start": "2152200",
    "end": "2157780"
  },
  {
    "text": "with on this node then I'm not going to let it issue any identities and so this would also again give this nice sort of",
    "start": "2157780",
    "end": "2164920"
  },
  {
    "text": "closed loop on on now we're not just trusting Spire but we're trusting the",
    "start": "2164920",
    "end": "2170560"
  },
  {
    "text": "hardware measurements inside that TPM as our route of trust for this whole system for identity system",
    "start": "2170560",
    "end": "2176680"
  },
  {
    "text": "so it would be very similar so I showed for Six Tour we would have um the node access data on the server",
    "start": "2176680",
    "end": "2182800"
  },
  {
    "text": "side be talking to the verifier to verify that everything is correct and the node attestator on the agent talking",
    "start": "2182800",
    "end": "2189099"
  },
  {
    "text": "to the key lime agent to get information about that TPM and the hardware and the",
    "start": "2189099",
    "end": "2195780"
  },
  {
    "text": "attributes of the key lime agent on that node so if something modifies your boot",
    "start": "2195780",
    "end": "2201880"
  },
  {
    "text": "sequence if someone injects a kernel parameter that you don't approve of if somebody modifies a key lime agent or",
    "start": "2201880",
    "end": "2207880"
  },
  {
    "text": "some file on your system and that you're that you're not okay with key lime can fail the the attestation and then when",
    "start": "2207880",
    "end": "2215079"
  },
  {
    "text": "Spire comes up to try to issue an identity for that node it'll say nope sorry the node does not pass that test",
    "start": "2215079",
    "end": "2220240"
  },
  {
    "text": "station and so none of the identities would work and none of the credentials could be compromised",
    "start": "2220240",
    "end": "2225720"
  },
  {
    "text": "all right thank you um so I know I covered a lot a lot of different systems talking to each other but if you have any questions",
    "start": "2226599",
    "end": "2234660"
  },
  {
    "text": "okay thanks [Applause]",
    "start": "2237400",
    "end": "2243320"
  }
]