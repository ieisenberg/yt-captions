[
  {
    "text": "my name is Ron Schneider I'm CTO co-founder of diagram and a Dapper maintainer and stream Committee Member",
    "start": "620",
    "end": "7859"
  },
  {
    "text": "hello can I hear me okay my name is Arthur I'm engineering manager for the adapter team at Microsoft also",
    "start": "7859",
    "end": "14160"
  },
  {
    "text": "maintainer and SCC member and today we're going to talk to you about a few updates that we've been",
    "start": "14160",
    "end": "21359"
  },
  {
    "text": "seeing for the Dapper project that we'd like to share with the broader community and everyone and also talk about pluggable components in the upper which",
    "start": "21359",
    "end": "28199"
  },
  {
    "text": "were recently introduced in adapter 1.9 and before we go into all the details I",
    "start": "28199",
    "end": "33960"
  },
  {
    "text": "really want to thank our amazing Community contributors who really helped Drive plugable components into Dapper",
    "start": "33960",
    "end": "39120"
  },
  {
    "text": "this is something we've been talking about I think since the very first versions of the operator",
    "start": "39120",
    "end": "44399"
  },
  {
    "text": "um how we want to basically extend the apron and make it pluggable so that people can bring in their own components",
    "start": "44399",
    "end": "50820"
  },
  {
    "text": "so thank you to all of our amazing contributors and so let's talk a little bit about",
    "start": "50820",
    "end": "56460"
  },
  {
    "text": "what Dapper is and what Dapper does um as a another application developer writing a distributed system or a micro",
    "start": "56460",
    "end": "62399"
  },
  {
    "text": "service architecture on top of kubernetes or anywhere really you might be writing something like this right you",
    "start": "62399",
    "end": "68100"
  },
  {
    "text": "might have a bunch of services that communicate with each other they might have a queue or a database they're writing to you might have a secret story",
    "start": "68100",
    "end": "74580"
  },
  {
    "text": "configuration store you know the underlying infrastructure for all of your applications and it looks simple on",
    "start": "74580",
    "end": "80820"
  },
  {
    "text": "the surface but when you get into the nitty-gritty details of it there are many many distributed systems challenges",
    "start": "80820",
    "end": "87360"
  },
  {
    "text": "that developers have to solve each and every day really with every new feature also so things like how do you do State",
    "start": "87360",
    "end": "94439"
  },
  {
    "text": "Management from multiple replicas writing to the same record how do you do conflict management at scale how do you",
    "start": "94439",
    "end": "100380"
  },
  {
    "text": "do error handling and fault resiliency when you talk to your message bus how do you delay messages being sent over an",
    "start": "100380",
    "end": "106200"
  },
  {
    "text": "event-driven system how do you secure messages not just between your service to service calls but to your database",
    "start": "106200",
    "end": "111899"
  },
  {
    "text": "and encrypt those connections and rotate these keys so so lots of these distributed systems challenges are",
    "start": "111899",
    "end": "117360"
  },
  {
    "text": "meeting developers and as complexity Rises these challenges rise too and so",
    "start": "117360",
    "end": "123479"
  },
  {
    "text": "the Opera comes in as the set of apis distributed systems apis that allow developers to focus under code under",
    "start": "123479",
    "end": "130319"
  },
  {
    "text": "business logic and really remove the boilerplate code associated with all of these hard problems so the Opera can be",
    "start": "130319",
    "end": "137280"
  },
  {
    "text": "invoked by HTTP or grpc so it's very inclusive to the two developers everywhere if you're using a language",
    "start": "137280",
    "end": "143340"
  },
  {
    "text": "that knows how to talk to httpc you can use Dapper and we have a bunch of these apis we're not going to cover all of",
    "start": "143340",
    "end": "150060"
  },
  {
    "text": "them today but some things you can see here are service to service invocation which is a way to find discover and",
    "start": "150060",
    "end": "156000"
  },
  {
    "text": "secure communication calls State Management which allow you to save State and get state in a reliable way Pub sub",
    "start": "156000",
    "end": "161940"
  },
  {
    "text": "which allows you to very easily create event driven system without all the boilerplate code and issues associated",
    "start": "161940",
    "end": "168060"
  },
  {
    "text": "with it resource bindings which is a way to trigger your application based on events coming in from external systems",
    "start": "168060",
    "end": "173879"
  },
  {
    "text": "Act this is a very specific programming model that distributes compute and state",
    "start": "173879",
    "end": "178980"
  },
  {
    "text": "at a high granular rate observability and secrets are ways to basically",
    "start": "178980",
    "end": "184260"
  },
  {
    "text": "observe everything that's going on in Dapper because Dapper is at the intersection of all of your application Communications that were basically",
    "start": "184260",
    "end": "190560"
  },
  {
    "text": "observed everything for you whether it reverses services to service calls or whether it's coming in from something",
    "start": "190560",
    "end": "196920"
  },
  {
    "text": "like copper AWS sqs without you as a developer needing to take any sdks and defenses into your code and these apis",
    "start": "196920",
    "end": "203879"
  },
  {
    "text": "are being added by the community at a very active pace and of course Dapper is not only tied to kubernetes kubernetes",
    "start": "203879",
    "end": "209640"
  },
  {
    "text": "is of course the best way to run dapper today but Dapper runs as a single binary on your laptop whether you're using a",
    "start": "209640",
    "end": "214680"
  },
  {
    "text": "Mac a Linux or a Windows machine um so really adapter doesn't have your Lifting for you and this is how you use",
    "start": "214680",
    "end": "220799"
  },
  {
    "text": "the operator to have your application process the Dapper process it's called overheated pure grpc and these are a",
    "start": "220799",
    "end": "226799"
  },
  {
    "text": "bunch of examples of how for example you would use the app or to discover a different application wherever it's",
    "start": "226799",
    "end": "231840"
  },
  {
    "text": "running just by its name um and invoke a method or get some state or publish a message to the uh orders",
    "start": "231840",
    "end": "240000"
  },
  {
    "text": "topic or get a secret from some Secret store called Apple so as a developer you get these consistent apis and Dapper",
    "start": "240000",
    "end": "247319"
  },
  {
    "text": "basically make sure that everything's secure reliable and traceable under the hoods so at this point you might think",
    "start": "247319",
    "end": "252720"
  },
  {
    "text": "well this Dapper replace State Stores or Pub sub well the answer is no it doesn't integrate with over 105 components that",
    "start": "252720",
    "end": "260100"
  },
  {
    "text": "represents the majority of services that you will find in clouds like AWS Google",
    "start": "260100",
    "end": "265259"
  },
  {
    "text": "cloud and Azure and also open source ones so these are just a few here on the right",
    "start": "265259",
    "end": "270479"
  },
  {
    "text": "but Dapper has a very extensible model to it where you can come in to our",
    "start": "270479",
    "end": "275639"
  },
  {
    "text": "repository you can add in a different component and when we launch the upper in 1.0 how many components do we have",
    "start": "275639",
    "end": "281400"
  },
  {
    "text": "like seven or eight um I think and uh since then we maintainers did not contribute a single",
    "start": "281400",
    "end": "287880"
  },
  {
    "text": "component um all of these components were contributed by our amazing community so that really integrates so as a developer",
    "start": "287880",
    "end": "294960"
  },
  {
    "text": "you let your developers talk to it very consistent and portable API but as an operator infrastructure person you can",
    "start": "294960",
    "end": "301199"
  },
  {
    "text": "decide what the underlying implementation is based on the environment that you're running in and it's basically a yaml swap",
    "start": "301199",
    "end": "308160"
  },
  {
    "text": "um but Dapper is not only just a lowest common denominator Replay in many cases Dapper will add features on top of the",
    "start": "308160",
    "end": "313979"
  },
  {
    "text": "implementations that you won't find on their open source versions or even their Cloud versions",
    "start": "313979",
    "end": "319320"
  },
  {
    "text": "uh this is an update for the community traction that we're seeing dapper today is the ninth largest project in cncf",
    "start": "319320",
    "end": "325620"
  },
  {
    "text": "based on the report it was released by cncf a month ago I think it was we're seeing lots of amazing companies",
    "start": "325620",
    "end": "332280"
  },
  {
    "text": "contributing to the project yeah we have over uh 2 200 computers contributors",
    "start": "332280",
    "end": "337979"
  },
  {
    "text": "today and our Discord Community is growing please join us after the talk it'd be great to get your thoughts and",
    "start": "337979",
    "end": "344460"
  },
  {
    "text": "feedback on the project so this is really how Dapper components are plugged into our runtime today so we",
    "start": "344460",
    "end": "352620"
  },
  {
    "text": "have the Dapper binary Dappers written in go which means that every time you want to add a binary oh sorry a",
    "start": "352620",
    "end": "357900"
  },
  {
    "text": "component to the Dapper binary you need to go to our repository you need to basically write the implementation and go it has to be go because the app is",
    "start": "357900",
    "end": "364259"
  },
  {
    "text": "written and go we will accept the pr we'll approve it we'll lgtm it and then when the next version of dapper ships",
    "start": "364259",
    "end": "370500"
  },
  {
    "text": "it'll get compiled into the Dapper binary and that's where we have over 100 different components but many",
    "start": "370500",
    "end": "376800"
  },
  {
    "text": "organizations actually need to extend Dapper for adapter to be able to talk to systems that are proprietary to their",
    "start": "376800",
    "end": "383340"
  },
  {
    "text": "own organizations or if they have some kind of business logic that's an IEP to",
    "start": "383340",
    "end": "388800"
  },
  {
    "text": "their company and they can't actually contribute it Upstream so this is a use case that we're seeing more and more of",
    "start": "388800",
    "end": "394860"
  },
  {
    "text": "and today it's very difficult adding these private components um before version 1.9 so you would have",
    "start": "394860",
    "end": "401340"
  },
  {
    "text": "to Fork the main Dapper repository you would need to force the components contribute repository um get those local",
    "start": "401340",
    "end": "407759"
  },
  {
    "text": "versions you need to write your custom component and go which means if you're an organization that doesn't have knowledge and go you need to learn go",
    "start": "407759",
    "end": "414300"
  },
  {
    "text": "it's I love go it's my favorite language no that's not true anymore typescript is now favorite language but my second",
    "start": "414300",
    "end": "420900"
  },
  {
    "text": "favorite one especially for back-end uh stuff and you know you need to become an expert in it although it's it's kind of",
    "start": "420900",
    "end": "426720"
  },
  {
    "text": "easy but you still need to learn go which is a major hurdle for many organization and then once you have your",
    "start": "426720",
    "end": "432000"
  },
  {
    "text": "components set up you basically need to integrate it into Dapper build your custom binary if you're building a",
    "start": "432000",
    "end": "437580"
  },
  {
    "text": "custom container you need to go to the adapter settings and basically pull off your version of the image so this is the",
    "start": "437580",
    "end": "444660"
  },
  {
    "text": "the configuration of the environment really so it's kind of a convoluted process but now in 1.9 we have the",
    "start": "444660",
    "end": "450900"
  },
  {
    "text": "concept of plugable components so you can write a component in any language that supports grpc and then you just",
    "start": "450900",
    "end": "457560"
  },
  {
    "text": "need to package that into a container or a process depending on whether or not you're running Dapper in a containerized",
    "start": "457560",
    "end": "463080"
  },
  {
    "text": "environment or not and then you just deploy your application code so this has become comes really easy",
    "start": "463080",
    "end": "468120"
  },
  {
    "text": "the core design settings for us are of course to be securing performance so we use Unix domain sockets so you can't",
    "start": "468120",
    "end": "475440"
  },
  {
    "text": "invoke these components from outside of your local network namespace whether you know it's your VM or a pod on kubernetes",
    "start": "475440",
    "end": "481800"
  },
  {
    "text": "we're leveraging RPC standards so there's no new RPC framework here we're just leveraging Google grpc which is",
    "start": "481800",
    "end": "489240"
  },
  {
    "text": "fully supported no limitations there on any grpc features there is very low operational overhead because we are",
    "start": "489240",
    "end": "495720"
  },
  {
    "text": "leveraging existing Dapper crds so if you're familiar with the concept of crd it's basically a kubernetes resource",
    "start": "495720",
    "end": "501599"
  },
  {
    "text": "that allows you to extend kubernetes and many projects that you will find that basically Deploy on top of kubernetes",
    "start": "501599",
    "end": "507300"
  },
  {
    "text": "have 10 20 30 some of them even have 80 crds and that adds a lot of operational",
    "start": "507300",
    "end": "513360"
  },
  {
    "text": "overhead in dapper today we have four crds and so we did not add a new one to",
    "start": "513360",
    "end": "518520"
  },
  {
    "text": "add plugable components we're basically raising our same component CBD and then it's platform agnostic we make sure that",
    "start": "518520",
    "end": "525060"
  },
  {
    "text": "everything we do in Dapper is compliant both to kubernetes and kubernetes and so yes bugable components run inside",
    "start": "525060",
    "end": "532140"
  },
  {
    "text": "Fitness and outside of it something we ruled out was used go",
    "start": "532140",
    "end": "537180"
  },
  {
    "text": "plugins because it requires the use of sigo and one of the founders and",
    "start": "537180",
    "end": "542220"
  },
  {
    "text": "creators of the go project we go around time basically said that seago is not go if you if you Google sigo is not go you",
    "start": "542220",
    "end": "550200"
  },
  {
    "text": "will find the the article that explains why I'm not going to go into details here but it's basically causing lots of",
    "start": "550200",
    "end": "556019"
  },
  {
    "text": "cross compilation issues with basically be telling everyone this developer out there no you can't really you know run",
    "start": "556019",
    "end": "561899"
  },
  {
    "text": "pluggable components locally or on Windows machines and there's low performance so it takes the performance",
    "start": "561899",
    "end": "567779"
  },
  {
    "text": "here and then there is also some dependency Management in your host processing the plugin if you have if",
    "start": "567779",
    "end": "573720"
  },
  {
    "text": "you're referencing other packages they must have the same version and that creates version and conflict management and that becomes a real issue and then",
    "start": "573720",
    "end": "581339"
  },
  {
    "text": "of course yeah the language support they talked about earlier so this is the user experience basically",
    "start": "581339",
    "end": "587040"
  },
  {
    "text": "um this is 80 of user experience so this is what a component crd in Dapper would look like you have the type there which",
    "start": "587040",
    "end": "592560"
  },
  {
    "text": "is State mydb that's a custom pluggable component I don't know if you know um how Dapper series look like we probably",
    "start": "592560",
    "end": "598860"
  },
  {
    "text": "should have put an image here but it would basically change type state.mydb to something like",
    "start": "598860",
    "end": "604640"
  },
  {
    "text": "state.aws.sqs if this was a component that's built into Dapper that you get with the Dapper stable release and so",
    "start": "604640",
    "end": "611519"
  },
  {
    "text": "just by putting State money to be here we'll basically telling the upper hey this is my own custom component and you",
    "start": "611519",
    "end": "617040"
  },
  {
    "text": "can have your own metadata which really targets whatever underlying system you",
    "start": "617040",
    "end": "622200"
  },
  {
    "text": "might be writing this component for and we use a domain socket so we adapter",
    "start": "622200",
    "end": "627839"
  },
  {
    "text": "basically the Dapper runtime looks at the local file system it searches for a local domain socket and then it",
    "start": "627839",
    "end": "634019"
  },
  {
    "text": "basically looks for other processes should registered to it which would be",
    "start": "634019",
    "end": "639120"
  },
  {
    "text": "the plugable components and this is really what it looks like so you have the Dapper D binary uh here on the left",
    "start": "639120",
    "end": "645120"
  },
  {
    "text": "and there is a discovery mechanism which will basically listen to sockets on the file system and this file system can be",
    "start": "645120",
    "end": "651360"
  },
  {
    "text": "mounted on kubernetes it can be an in-memory file system too by the way and then you have the plugable component",
    "start": "651360",
    "end": "657240"
  },
  {
    "text": "process which is a totally separate process to the Dapper D1 it can be a separate container inside of your",
    "start": "657240",
    "end": "662640"
  },
  {
    "text": "deployment or if you're running Dapper outside of kubernetes it can just be a process co-located inside of your VM and",
    "start": "662640",
    "end": "669240"
  },
  {
    "text": "the important thing is that they both have access to the mounted file system that you're giving it so that the app",
    "start": "669240",
    "end": "675300"
  },
  {
    "text": "can basically discover these plugable components once the Opera has discovered the socket",
    "start": "675300",
    "end": "680760"
  },
  {
    "text": "uh in the public one has listened to the socket they will basically connect um and the pluggable components will",
    "start": "680760",
    "end": "686519"
  },
  {
    "text": "connect to Dapper via jrpc so Dapper will basically use grp3 reflection The",
    "start": "686519",
    "end": "691920"
  },
  {
    "text": "Jerk reflection API to talk to the components and discover all of its different properties and make sure that",
    "start": "691920",
    "end": "697079"
  },
  {
    "text": "you know it's actually a Dapper plug build component to it now just something that's not compliant to the interface",
    "start": "697079",
    "end": "702660"
  },
  {
    "text": "the adapter expense so this is basically how it works and uh adding private",
    "start": "702660",
    "end": "707880"
  },
  {
    "text": "components now in um in Standalone mode is very simple you basically just give",
    "start": "707880",
    "end": "713399"
  },
  {
    "text": "your uh a plugable component the uh the Unix domain socket path you can see it here at Unix temp uh Dapper component",
    "start": "713399",
    "end": "720600"
  },
  {
    "text": "socket and and then the component will basically just listen on the grpc socket",
    "start": "720600",
    "end": "726360"
  },
  {
    "text": "there pretty simple this is how it would look like in kubernetes uh not certainly not in kubernetes this is what the Dapper d",
    "start": "726360",
    "end": "732600"
  },
  {
    "text": "uh site will show once it discovered a plugable component and successfully register it so that's the lining right",
    "start": "732600",
    "end": "738240"
  },
  {
    "text": "there the line at the top base is basically a Dapper CLI command we have developer tooling adapter will take",
    "start": "738240",
    "end": "745079"
  },
  {
    "text": "basically your application the upper side can run it together and Dapper will successfully register the plugable",
    "start": "745079",
    "end": "751019"
  },
  {
    "text": "component if it was able to Discover It by a geography reflection as I've mentioned earlier",
    "start": "751019",
    "end": "756440"
  },
  {
    "text": "adding components in kubernetes looks like this so the way to inject Dapper into your deployment yaml is basically",
    "start": "756440",
    "end": "762360"
  },
  {
    "text": "annotated with a bunch of annotations which you can see on the bottom there you go the upper i o enable true which",
    "start": "762360",
    "end": "769200"
  },
  {
    "text": "means uh the upper hey wants you to inject the upper side car using your mutating web hook and then you you have",
    "start": "769200",
    "end": "775740"
  },
  {
    "text": "all other every other annotation that you can think of like an app ID to give your application ID and app port and the",
    "start": "775740",
    "end": "782459"
  },
  {
    "text": "very last one at the bottom is the Unix domain socket path so inside of your application you will Mount volume which",
    "start": "782459",
    "end": "788399"
  },
  {
    "text": "will be used to host the socket that both the pluggable component and damp releasing on so it's a it's a very nice",
    "start": "788399",
    "end": "794040"
  },
  {
    "text": "user experience um inside of your deployment yaml that's something that's a little less nice but",
    "start": "794040",
    "end": "800339"
  },
  {
    "text": "we're working on improving that experience um that's what you would need to do on your deployment side uh you of course",
    "start": "800339",
    "end": "805380"
  },
  {
    "text": "have your plug glue components you're built into a Docker image you pushed it into registry and so you're adding it as",
    "start": "805380",
    "end": "810600"
  },
  {
    "text": "an additional container inside of your deployments back inside of your pod spec so you're mounting the volume it's all",
    "start": "810600",
    "end": "817019"
  },
  {
    "text": "pretty easy stuff standard here nothing special that you need to do it's all documented on our website and this this",
    "start": "817019",
    "end": "823920"
  },
  {
    "text": "makes up the user experience of how you would go about communicating and adding these plugable components now I'm going",
    "start": "823920",
    "end": "829920"
  },
  {
    "text": "to hand it over to Arthur okay thank you you can hear me awesome so for probably",
    "start": "829920",
    "end": "835920"
  },
  {
    "text": "this Devon we're going to use Discord so and if you have this quad on the phone you'll be able to interact with the demo",
    "start": "835920",
    "end": "842160"
  },
  {
    "text": "so uh if you don't have your one installed you could take a time to install now",
    "start": "842160",
    "end": "848160"
  },
  {
    "text": "so let's get started with the demo",
    "start": "848160",
    "end": "853220"
  },
  {
    "text": "first of all the code is available uh online so you can go to GitHub with this URL",
    "start": "853860",
    "end": "861959"
  },
  {
    "text": "here uh might not be so readable but basic r22. oh I can Zone in right here yeah there",
    "start": "861959",
    "end": "870480"
  },
  {
    "text": "you go so you can go in it's public and queue and you can go through and try the demo",
    "start": "870480",
    "end": "876300"
  },
  {
    "text": "yourself okay and we're going to actually do this demo together here right now so",
    "start": "876300",
    "end": "881760"
  },
  {
    "text": "uh to do this demo you have to use basically have make to compile install the Dapper CLI if you don't have one and",
    "start": "881760",
    "end": "889680"
  },
  {
    "text": "you can also use to install the grpc tool for local certification and as a",
    "start": "889680",
    "end": "895199"
  },
  {
    "text": "model that dependencies here depends on which part of the game I'm going to take so I have checked out the code already and then there's existing code for the",
    "start": "895199",
    "end": "902820"
  },
  {
    "text": "mem store so the same example that we saw on the slide there's some Echo going",
    "start": "902820",
    "end": "908399"
  },
  {
    "text": "on here where we'll just simply do a dyna run but before we do that let's look at the",
    "start": "908399",
    "end": "914100"
  },
  {
    "text": "code so oh let me zoom in one more time there you go",
    "start": "914100",
    "end": "919199"
  },
  {
    "text": "so if I look at our plugable components folder you're going to see the mem store",
    "start": "919199",
    "end": "924959"
  },
  {
    "text": "which is basically a grpc service in.net",
    "start": "924959",
    "end": "930600"
  },
  {
    "text": "program.cs basically handle the socket so in this case we're going to put the",
    "start": "930600",
    "end": "937620"
  },
  {
    "text": "socket in slash DMP handle the socket creation and then we're going to configure the",
    "start": "937620",
    "end": "944220"
  },
  {
    "text": "socket with adding the grpc listening and in this we also need the grpc reflection so whatever language you use",
    "start": "944220",
    "end": "952199"
  },
  {
    "text": "to implement a plugable component for the upper we require the DRC reflection",
    "start": "952199",
    "end": "957720"
  },
  {
    "text": "because there is one that's the way we found should not require a new crd and",
    "start": "957720",
    "end": "962880"
  },
  {
    "text": "make damper sidecar automatically discover the components that are listed",
    "start": "962880",
    "end": "968160"
  },
  {
    "text": "in the socket in the socket directory so every socket in the directory will be scanned by the sidecar and are going to",
    "start": "968160",
    "end": "975240"
  },
  {
    "text": "invoke the reflection API for each one of them to this Auto discover what type",
    "start": "975240",
    "end": "980399"
  },
  {
    "text": "of component that is so that's how we could bring in that Simplicity and uh kudos to uh",
    "start": "980399",
    "end": "987000"
  },
  {
    "text": "uh Marcos and yadam for uh having that idea and work on that change okay",
    "start": "987000",
    "end": "993060"
  },
  {
    "text": "so and then this is just handling the socket file",
    "start": "993060",
    "end": "998339"
  },
  {
    "text": "um one thing that I want to call out is you can see this as an example uh but as we work on that we want to make that",
    "start": "998339",
    "end": "1004820"
  },
  {
    "text": "even easier and we are now riding on we are writing new sdks for the upper to",
    "start": "1004820",
    "end": "1011120"
  },
  {
    "text": "compose components so now you're not only going to have sdks to use the adapter apis but we're also writing sdks",
    "start": "1011120",
    "end": "1018380"
  },
  {
    "text": "for you to make it very easy for you to write uh any component in the languages in",
    "start": "1018380",
    "end": "1023660"
  },
  {
    "text": "most popular languages that we have which are DOT net Java Python and go uh",
    "start": "1023660",
    "end": "1029660"
  },
  {
    "text": "these are the sdks that are going to come up and now we're going to look at show you",
    "start": "1029660",
    "end": "1035480"
  },
  {
    "text": "how the service is implemented so the main store implements um",
    "start": "1035480",
    "end": "1041000"
  },
  {
    "text": "basically this interface sorry I will just um go ahead just one comment there although we are writing these sdks to",
    "start": "1041000",
    "end": "1048079"
  },
  {
    "text": "make it easier for you to write plugable components uh it's important for me to call out that you can write them in any language even without the sdks you just",
    "start": "1048079",
    "end": "1054919"
  },
  {
    "text": "need to do a little bit of grpc Plumbing which is isn't really a problematic yeah",
    "start": "1054919",
    "end": "1060880"
  },
  {
    "text": "thanks for the call out so these are the interface that you're going to implement based on the grpc",
    "start": "1060880",
    "end": "1067039"
  },
  {
    "text": "service you're offering and you can do like the get to get a key",
    "start": "1067039",
    "end": "1072500"
  },
  {
    "text": "set just had a key bulk set should have handle a bulk request in it so init",
    "start": "1072500",
    "end": "1078320"
  },
  {
    "text": "method is the one that the sidecar will invoke uh passing the metadata that yeah",
    "start": "1078320",
    "end": "1084559"
  },
  {
    "text": "I don't show previously on the slide so all those metadata attributes is per",
    "start": "1084559",
    "end": "1089600"
  },
  {
    "text": "component some components like the mem store for example that I'm implemented doesn't require any metadata attribute",
    "start": "1089600",
    "end": "1096020"
  },
  {
    "text": "but you could pass like a URL you could even pass a secret if you want and you",
    "start": "1096020",
    "end": "1101480"
  },
  {
    "text": "use a secret reference a feature that adapter has if you're not familiar with that I recommend taking a look later",
    "start": "1101480",
    "end": "1108320"
  },
  {
    "text": "um and of course paying for the health check of your components so uh with that we can go to the folder",
    "start": "1108320",
    "end": "1116840"
  },
  {
    "text": "plugable components mem store",
    "start": "1116840",
    "end": "1121940"
  },
  {
    "text": "and then we do.net run",
    "start": "1121940",
    "end": "1125500"
  },
  {
    "text": "there we go one thing I'm going to show is I'm going to show that in the in the",
    "start": "1132980",
    "end": "1140600"
  },
  {
    "text": "Dapper CLI install the folder for you with components",
    "start": "1140600",
    "end": "1146179"
  },
  {
    "text": "and we change the name store yaml file",
    "start": "1146179",
    "end": "1151520"
  },
  {
    "text": "to handle the memory store so like you can see it's as simple as that it doesn't require any metadata and in this",
    "start": "1151520",
    "end": "1157880"
  },
  {
    "text": "case you're not going to be using radius we're going to use be using uh the name store okay now if I go back to our demo list",
    "start": "1157880",
    "end": "1166539"
  },
  {
    "text": "we can go now to the hello world on quick starts and we're going to run the same quick",
    "start": "1167000",
    "end": "1174200"
  },
  {
    "text": "start that other people have tried Dapper already but this is a usual quick",
    "start": "1174200",
    "end": "1179299"
  },
  {
    "text": "start for hello world uh to make invocations so we're going to go to a different folder",
    "start": "1179299",
    "end": "1187059"
  },
  {
    "text": "there you go and I'm just gonna do uh npm install uh actually I've done this",
    "start": "1195140",
    "end": "1201200"
  },
  {
    "text": "before but it should be fast and then we're going to be able to run",
    "start": "1201200",
    "end": "1206960"
  },
  {
    "text": "the node.js application so the node.js application if you haven't seen this example before",
    "start": "1206960",
    "end": "1212059"
  },
  {
    "text": "um all it does is receive the call from the python application that we're",
    "start": "1212059",
    "end": "1217220"
  },
  {
    "text": "going to run in a minute and save that state your Stage store as simple as that",
    "start": "1217220",
    "end": "1223700"
  },
  {
    "text": "so I'm running this in a new terminal",
    "start": "1223700",
    "end": "1228640"
  },
  {
    "text": "and yeah we see the name store detected",
    "start": "1228740",
    "end": "1233740"
  },
  {
    "text": "okay",
    "start": "1234080",
    "end": "1236620"
  },
  {
    "text": "I'm not going to spend uh too much time time to look for the message now but let's just proceed to",
    "start": "1239179",
    "end": "1245000"
  },
  {
    "text": "the next step of the demo where we're going to run now we can evoke",
    "start": "1245000",
    "end": "1251780"
  },
  {
    "text": "actually this service and see",
    "start": "1251780",
    "end": "1257679"
  },
  {
    "text": "okay what Arthur is showing right now or two applications of python app invoking a node.js app through the apparent so",
    "start": "1274340",
    "end": "1280460"
  },
  {
    "text": "it's invoking with Dapper directly and so you get empty lots of their ability to empty all the Dapper features and",
    "start": "1280460",
    "end": "1285679"
  },
  {
    "text": "that no depth is going to get that request from the python now through the upper I'm going to save it to the state store which is the custom plugable",
    "start": "1285679",
    "end": "1292039"
  },
  {
    "text": "component sensor which isn't compiled in the Dapper bundle yeah so in this example I did not end up running the",
    "start": "1292039",
    "end": "1297980"
  },
  {
    "text": "python by the way but I did use the adapter invoke feature to make the invocation and you can see here that",
    "start": "1297980",
    "end": "1305360"
  },
  {
    "text": "this date was saved God New Order there you go",
    "start": "1305360",
    "end": "1310700"
  },
  {
    "text": "and the save was persisted so now let's look at a more cool demo uh this is just",
    "start": "1310700",
    "end": "1315980"
  },
  {
    "text": "for you to get started on local development so this is this virtual dot enabled now",
    "start": "1315980",
    "end": "1323480"
  },
  {
    "text": "so if you have um seeing the Twitter processing demo in",
    "start": "1323480",
    "end": "1328880"
  },
  {
    "text": "the past uh they're multiple demos online you can see that it basically uses damper with the Twitter input",
    "start": "1328880",
    "end": "1335659"
  },
  {
    "text": "binding to receive tweets you make a service invocation to the sentiment processor to the settlement analysis",
    "start": "1335659",
    "end": "1342400"
  },
  {
    "text": "annotate the payload with that extra information saves to your Stage store",
    "start": "1342400",
    "end": "1347799"
  },
  {
    "text": "publishes to a pub sub topic and there's another application with a dashboard that consumes uh those uh tweets with",
    "start": "1347799",
    "end": "1355340"
  },
  {
    "text": "the sentiment analysis results and displays on the dashboard okay and uh so we're going to do this we did them",
    "start": "1355340",
    "end": "1361340"
  },
  {
    "text": "it's already running but I'm going to go through some of the steps with you guys so there's also a time if you want to",
    "start": "1361340",
    "end": "1368740"
  },
  {
    "text": "interact to download to connect to our Discord server for the demo so if you",
    "start": "1368740",
    "end": "1375020"
  },
  {
    "text": "have Discord I'll give you a few minutes so what we did is we took the Twitter binding and we wrote a custom component",
    "start": "1375020",
    "end": "1382340"
  },
  {
    "text": "in Java that will instead take messages from Discord so uh and you I don't know if you follow",
    "start": "1382340",
    "end": "1388820"
  },
  {
    "text": "TechCrunch but today was announced that Twitter has a new owner so how convenient My Demo to replace Twitter by",
    "start": "1388820",
    "end": "1395419"
  },
  {
    "text": "through Discord so uh just uh some news there",
    "start": "1395419",
    "end": "1401419"
  },
  {
    "text": "so the Tweeter gonna be basically Discord um so we're going to show the QR code",
    "start": "1401419",
    "end": "1407419"
  },
  {
    "text": "one more time anybody else need to scan this",
    "start": "1407419",
    "end": "1411520"
  },
  {
    "text": "okay so uh I have this demo Ronnie",
    "start": "1412820",
    "end": "1417919"
  },
  {
    "text": "uh for a few days now as you can see um and I'm gonna do uh",
    "start": "1417919",
    "end": "1424100"
  },
  {
    "text": "pause without getting all namespaces so you can have a clear view of what's",
    "start": "1424100",
    "end": "1429200"
  },
  {
    "text": "going on so what you will see is that the processor",
    "start": "1429200",
    "end": "1435200"
  },
  {
    "text": "is the one that does the settlement analysis and still only has uh two sidecars but if you look at the provider",
    "start": "1435200",
    "end": "1442880"
  },
  {
    "text": "it now has three sidecars sorry three containers uh two of them",
    "start": "1442880",
    "end": "1449419"
  },
  {
    "text": "are different sidecars uh one sidecar for damper and one for the plugable",
    "start": "1449419",
    "end": "1455240"
  },
  {
    "text": "component so if I do logs on this particular pod",
    "start": "1455240",
    "end": "1462340"
  },
  {
    "text": "you're going to show going to show that you have provider which is the name of the application Discord and upper D and",
    "start": "1462860",
    "end": "1468679"
  },
  {
    "text": "then you can put Discord here",
    "start": "1468679",
    "end": "1472539"
  },
  {
    "text": "and you're going to see that we already got some messages but thanks for that",
    "start": "1474260",
    "end": "1479659"
  },
  {
    "text": "so the name is already working as we can all see and upper D we're going to see",
    "start": "1479659",
    "end": "1485179"
  },
  {
    "text": "anything interesting here uh yeah it shows that we detected one binding component",
    "start": "1485179",
    "end": "1490820"
  },
  {
    "text": "okay awesome so we are all up here running uh but also going to do a describe",
    "start": "1490820",
    "end": "1495980"
  },
  {
    "text": "so I'm going to describe the deployment",
    "start": "1495980",
    "end": "1500919"
  },
  {
    "text": "and um one thing you will see is that you have",
    "start": "1503780",
    "end": "1509360"
  },
  {
    "text": "the same annotations that yada mentioned in this case we'll use a custom image but that's just a detail for this demo I",
    "start": "1509360",
    "end": "1517580"
  },
  {
    "text": "don't really require that and you have the Unix dummy sucker path",
    "start": "1517580",
    "end": "1523159"
  },
  {
    "text": "the same way that the application requires okay now that we have done that",
    "start": "1523159",
    "end": "1531140"
  },
  {
    "text": "um let's go to the demo before I show you more of the code okay so let's do a",
    "start": "1531140",
    "end": "1536720"
  },
  {
    "text": "port forward",
    "start": "1536720",
    "end": "1539080"
  },
  {
    "text": "and then we're going to do port 8080. okay so you didn't make any typo we",
    "start": "1545539",
    "end": "1552200"
  },
  {
    "text": "should work there you go now I'm going to open my browser I keep forgetting where my browser is that's my",
    "start": "1552200",
    "end": "1558200"
  },
  {
    "text": "usual problem here There You Go hose there we go so now if people want to try",
    "start": "1558200",
    "end": "1564559"
  },
  {
    "text": "it out just send some messages we can see them here so please be nice no send angry messages",
    "start": "1564559",
    "end": "1570620"
  },
  {
    "text": "there you go so you still see the Twitter logo because that's how the demos are going",
    "start": "1570620",
    "end": "1576500"
  },
  {
    "text": "to be built for but it's all coming from this chord now",
    "start": "1576500",
    "end": "1581019"
  },
  {
    "text": "awesome thank you um we're not done yet there's more yeah",
    "start": "1581900",
    "end": "1589700"
  },
  {
    "text": "I think okay we're engaging them",
    "start": "1589700",
    "end": "1595419"
  },
  {
    "text": "okay and uh uh yeah and then now we're gonna see um",
    "start": "1595460",
    "end": "1600799"
  },
  {
    "text": "some of the code that we did to get this done okay so you saw in.net uh mem store",
    "start": "1600799",
    "end": "1606980"
  },
  {
    "text": "and this one's a little bit more complicated it uses the input binding so",
    "start": "1606980",
    "end": "1612380"
  },
  {
    "text": "we have to stream the messages um from the from Discord API into the",
    "start": "1612380",
    "end": "1618140"
  },
  {
    "text": "sidecar so let's open this code a little bit so the server does the same thing",
    "start": "1618140",
    "end": "1625340"
  },
  {
    "text": "that's the.net equivalent where it basically manages the socket for you",
    "start": "1625340",
    "end": "1630559"
  },
  {
    "text": "like how do you start this on the socket how it change",
    "start": "1630559",
    "end": "1635600"
  },
  {
    "text": "the permission to make sure another process can read and write to it so",
    "start": "1635600",
    "end": "1640880"
  },
  {
    "text": "uh so this code is what we think it should belong in a in a SDK that makes",
    "start": "1640880",
    "end": "1646460"
  },
  {
    "text": "things easier for you because there's nothing specific uh for us to handle here uh but then the core of the code is",
    "start": "1646460",
    "end": "1653179"
  },
  {
    "text": "actually in the Discord uh bind implementation where uh you basically have",
    "start": "1653179",
    "end": "1660080"
  },
  {
    "text": "they knit that we discussed and in this example we do get a token so I'm going",
    "start": "1660080",
    "end": "1665659"
  },
  {
    "text": "to show the yellow in a minute so we do actually get the token to connect to Discord through the metadata and it's",
    "start": "1665659",
    "end": "1672620"
  },
  {
    "text": "not hard coded at all but you still get it here uh for in your in your code so",
    "start": "1672620",
    "end": "1678559"
  },
  {
    "text": "and then we start the client and then we respond to the message",
    "start": "1678559",
    "end": "1683600"
  },
  {
    "text": "we also have the pink and we also had the Reed so the Reed we",
    "start": "1683600",
    "end": "1689720"
  },
  {
    "text": "basically start uh in this case is using the Discord SDK behind the scenes I",
    "start": "1689720",
    "end": "1696260"
  },
  {
    "text": "don't even know if this is a girl maybe there is but yeah I think so um and then we're gonna keep forwarding the",
    "start": "1696260",
    "end": "1702380"
  },
  {
    "text": "messages uh to build a lot to make sure it's working and then we're going to create a payload following the same",
    "start": "1702380",
    "end": "1708140"
  },
  {
    "text": "structure as a Twitter binding was working before to make sure we keep the",
    "start": "1708140",
    "end": "1713240"
  },
  {
    "text": "compatibility so it's a plugable so we can remove one and put the other one in place with no code change in the rest of",
    "start": "1713240",
    "end": "1718940"
  },
  {
    "text": "the code um and then those messages are going to be sent in the response Observer so",
    "start": "1718940",
    "end": "1727820"
  },
  {
    "text": "this is how we wrote a binding component in Java and I'm going to show you in a",
    "start": "1727820",
    "end": "1734360"
  },
  {
    "text": "moment right now how does the component actually look like um let me just move here so the all the",
    "start": "1734360",
    "end": "1741740"
  },
  {
    "text": "kubernetes artifacts you need for this demo are available in the repository as well",
    "start": "1741740",
    "end": "1746960"
  },
  {
    "text": "so I'm going to open up the Discord example but even the mem store",
    "start": "1746960",
    "end": "1753200"
  },
  {
    "text": "example you can run a kubernetes as well if you want a simpler easier way to to get this working so as",
    "start": "1753200",
    "end": "1760640"
  },
  {
    "text": "you can see we have the metadata it has the token and this is a nice feature that Dapper has and for those are not",
    "start": "1760640",
    "end": "1766580"
  },
  {
    "text": "familiar with that Vapor has a secret store and our components are integrated natively with that and also in this case",
    "start": "1766580",
    "end": "1773360"
  },
  {
    "text": "I'm using the kubernetes secret itself and you can see how I reference that without having to hard code the token on",
    "start": "1773360",
    "end": "1778820"
  },
  {
    "text": "my demo so you can there's the examples of how to get this core token if you want to do this yourself but that's how",
    "start": "1778820",
    "end": "1785419"
  },
  {
    "text": "we manage secrets in the upper uh the configuration I added and you is",
    "start": "1785419",
    "end": "1791299"
  },
  {
    "text": "a new feature here but it's a different a different conversation uh the processor uh this is uh the same way we",
    "start": "1791299",
    "end": "1798679"
  },
  {
    "text": "use for the original Twitter demo and in this case I'm using Azure using Azure economic services and you can use that",
    "start": "1798679",
    "end": "1804620"
  },
  {
    "text": "yourself or if you want you can change um the code to not use Azure and just do",
    "start": "1804620",
    "end": "1810200"
  },
  {
    "text": "a random sentiment analysis in the code the provider",
    "start": "1810200",
    "end": "1815779"
  },
  {
    "text": "is the one that we actually use uh the plugable component and like like we saw",
    "start": "1815779",
    "end": "1821720"
  },
  {
    "text": "on kubernetes it has the crystal image but it has also the domain socket path",
    "start": "1821720",
    "end": "1827419"
  },
  {
    "text": "and it has the container for the provider and the container for this cord and you can use this image just as well",
    "start": "1827419",
    "end": "1834140"
  },
  {
    "text": "from Docker Hub this is the image I built with this same code and then Pub sub has no difference is",
    "start": "1834140",
    "end": "1841700"
  },
  {
    "text": "the usual Pub sub again using the his secret reference uh in this case",
    "start": "1841700",
    "end": "1847460"
  },
  {
    "text": "and there's nothing different in particular for this demo for that uh the the Stage store also redis and the",
    "start": "1847460",
    "end": "1854419"
  },
  {
    "text": "viewer application are also just the same as we had before there was no",
    "start": "1854419",
    "end": "1860000"
  },
  {
    "text": "change here so uh yeah that's all I have okay thank you everyone thank you for coming",
    "start": "1860000",
    "end": "1866360"
  },
  {
    "text": "and uh yes thank you",
    "start": "1866360",
    "end": "1869799"
  },
  {
    "text": "and we are here for questions",
    "start": "1873559",
    "end": "1877120"
  },
  {
    "text": "you can get a different mug as well if you're having a good question oh that's a good idea you're going to get a Dapper mug now for asking a",
    "start": "1881000",
    "end": "1887179"
  },
  {
    "text": "question yeah well um thank you that was an excellent",
    "start": "1887179",
    "end": "1892399"
  },
  {
    "text": "talk thank you I appreciated the description of how Dapper provides the apis",
    "start": "1892399",
    "end": "1898580"
  },
  {
    "text": "um I was wondering for those who aren't familiar could you go over the merits of the pub sub architecture",
    "start": "1898580",
    "end": "1904820"
  },
  {
    "text": "and then as well could you uh briefly describe the grpc reflection API I'm",
    "start": "1904820",
    "end": "1912260"
  },
  {
    "text": "unfamiliar uh describe the WASP sorry the grpc",
    "start": "1912260",
    "end": "1917419"
  },
  {
    "text": "reflection API yeah so I'll start with the Positive questions so your question",
    "start": "1917419",
    "end": "1922940"
  },
  {
    "text": "was whether the merits of the pub sub API yeah so uh many times you would want",
    "start": "1922940",
    "end": "1929059"
  },
  {
    "text": "to create an Avenger of an architecture where you publish a message and these Publishers are decoupled from",
    "start": "1929059",
    "end": "1934100"
  },
  {
    "text": "subscribers and it's very hard to create on your own because if you have multiple subscribers even multiple Publishers you",
    "start": "1934100",
    "end": "1940820"
  },
  {
    "text": "need to basically handle scale you know how do you handle error handling or throttling from the publisher every",
    "start": "1940820",
    "end": "1946159"
  },
  {
    "text": "subscriber you need to start learning about consumer groups and partitions and how you listen on these and handle you",
    "start": "1946159",
    "end": "1952760"
  },
  {
    "text": "know errors and faults coming in from these Concepts and so dap really encapsulates all of that for you it creates consumer groups creates",
    "start": "1952760",
    "end": "1958880"
  },
  {
    "text": "partitions it configures them the only thing you need to do as a publisher is just preach the through the Dapper API",
    "start": "1958880",
    "end": "1963980"
  },
  {
    "text": "and say hey Dapper published this message and as a subscriber you have an HTTP endpoint that you put in your app",
    "start": "1963980",
    "end": "1969980"
  },
  {
    "text": "Dapper will send you the message on your application code um or if you're using grpc it'll it'll send it back the",
    "start": "1969980",
    "end": "1976820"
  },
  {
    "text": "geometry reflection API is something that we only use for plugable components and that's basically a way for grpc",
    "start": "1976820",
    "end": "1982880"
  },
  {
    "text": "services to discover Properties or characteristics of other grpc services",
    "start": "1982880",
    "end": "1988179"
  },
  {
    "text": "and so the app will basically use this reflection API to reflect on the properties of the plugable component and",
    "start": "1988179",
    "end": "1994519"
  },
  {
    "text": "see that it enters all of its requirements all right more questions",
    "start": "1994519",
    "end": "2000640"
  },
  {
    "text": "there's one over there hi I want to know how long a particular message can stay in their queue before",
    "start": "2000640",
    "end": "2007720"
  },
  {
    "text": "it is consumed by another component that that depends on the component so that's",
    "start": "2007720",
    "end": "2014320"
  },
  {
    "text": "a configuration that you can have in your radius or Azure service bus but",
    "start": "2014320",
    "end": "2019480"
  },
  {
    "text": "damper can also add a feature on top which is a message TTL that optionally you can put a metadata parameter to say",
    "start": "2019480",
    "end": "2026080"
  },
  {
    "text": "oh this message is in the queue only for let's say one day and then the double side card that consumes that we",
    "start": "2026080",
    "end": "2032440"
  },
  {
    "text": "understand that and they'll send that to the application and you can also bundle that feature with that letter Q I have",
    "start": "2032440",
    "end": "2039279"
  },
  {
    "text": "the message should be sent here that letter Q via Dapper which is basically another Pub sub component so you can",
    "start": "2039279",
    "end": "2045039"
  },
  {
    "text": "have that done all within the Dapper layer itself or if you want you can also",
    "start": "2045039",
    "end": "2050500"
  },
  {
    "text": "do the same within the broker that you chose if it's a native feature and I I'm",
    "start": "2050500",
    "end": "2056200"
  },
  {
    "text": "there is one more follow-up question so I'm thinking about this in the context of workflows so is there a way to cancel",
    "start": "2056200",
    "end": "2063398"
  },
  {
    "text": "a job which is running for too long for example a Dapper endpoint which is",
    "start": "2063399",
    "end": "2068980"
  },
  {
    "text": "processing for a very long time not right now but we are going to add workflows as code to the upper it's a",
    "start": "2068980",
    "end": "2075158"
  },
  {
    "text": "community proposal that's being discussed right now and so you will get these uh these types of of apis and",
    "start": "2075159",
    "end": "2080800"
  },
  {
    "text": "operations in dapper thank you",
    "start": "2080800",
    "end": "2085320"
  },
  {
    "text": "come get your mug after oh yeah actually everyone will get mugs if you",
    "start": "2086260",
    "end": "2091658"
  },
  {
    "text": "come fast enough after we're done we have so I have I have four mugs total so the first four questions only all right",
    "start": "2091659",
    "end": "2097780"
  },
  {
    "text": "I have one of thanks a basic question but I I might have missed it to consume the adapter API in your application do",
    "start": "2097780",
    "end": "2105099"
  },
  {
    "text": "you have client libraries that you import include that package okay and then locally you're just doing rest or",
    "start": "2105099",
    "end": "2111460"
  },
  {
    "text": "grpc to the sidecar yes and actually actually did SDK most of them I think",
    "start": "2111460",
    "end": "2117400"
  },
  {
    "text": "you use grpc awesome which is Fester yeah okay",
    "start": "2117400",
    "end": "2122640"
  },
  {
    "text": "thank you okay thank you everyone thanks again",
    "start": "2122920",
    "end": "2129240"
  }
]