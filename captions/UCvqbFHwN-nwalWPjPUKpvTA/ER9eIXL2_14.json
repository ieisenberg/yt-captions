[
  {
    "start": "0",
    "end": "72000"
  },
  {
    "text": "all right hello many faces I've seen before that's good",
    "start": "30",
    "end": "5509"
  },
  {
    "text": "welcome to my talk my talk is going to be about accelerating HDL and envoy or",
    "start": "5509",
    "end": "12120"
  },
  {
    "text": "the overall service match space or technology that is evolving using solium",
    "start": "12120",
    "end": "17460"
  },
  {
    "text": "using BPF and using the Linux kernel why the Linux kernel I'm my background is",
    "start": "17460",
    "end": "23730"
  },
  {
    "text": "kernel development I've been a kernel level upper floor last 15 years I was at Red Hat for 10 years and helped develop",
    "start": "23730",
    "end": "31230"
  },
  {
    "text": "the loose curls many features so I've worked on IP tables I worked on that filter and ipv6 IV for routing open V",
    "start": "31230",
    "end": "37739"
  },
  {
    "text": "switch so I've been helping construct a lot of these components that were using today and we're the next generation that",
    "start": "37739",
    "end": "45149"
  },
  {
    "text": "is coming right now is BPF so I want to talk a little bit more about PPF and give you a very specific examples how we",
    "start": "45149",
    "end": "50969"
  },
  {
    "text": "can leverage BPF Berkley a packet filter to accelerate Envoy initio so BPF",
    "start": "50969",
    "end": "58859"
  },
  {
    "text": "there's superpowers of linux this is what brandon grecque at netflix cultish",
    "start": "58859",
    "end": "64518"
  },
  {
    "text": "i'm going to dive into a couple of use cases or BPF shines there many use cases",
    "start": "64519",
    "end": "73439"
  },
  {
    "start": "72000",
    "end": "72000"
  },
  {
    "text": "deal if these are the four that I'm picking for this talk the first one we're looking into is how Facebook uses",
    "start": "73439",
    "end": "79560"
  },
  {
    "text": "BPF and xdp xtp is a special version of PPF to do load balancing",
    "start": "79560",
    "end": "86610"
  },
  {
    "text": "lopa Lansing at lvl 4 so not the service mash use case at l7 but just L 3 L for",
    "start": "86610",
    "end": "92340"
  },
  {
    "text": "lope Lansing and DDoS mitigation we're looking at our Netflix and Brendan gank",
    "start": "92340",
    "end": "97680"
  },
  {
    "text": "Brandon Greg uses VPS for profiling and tracing finding finding the the",
    "start": "97680",
    "end": "103680"
  },
  {
    "text": "bottleneck in applications we're looking at B PFD which is a project by Google that allows tracing and visualizations",
    "start": "103680",
    "end": "111329"
  },
  {
    "text": "on a large set of servers so how do i how do i trace how to work a profiling",
    "start": "111329",
    "end": "116790"
  },
  {
    "text": "data out of a thousand servers that are running without having to log on into every every server and then the last one",
    "start": "116790",
    "end": "122969"
  },
  {
    "text": "why the heck is the Linux kernel community currently replacing the in kernel part of IP tables with PPF so",
    "start": "122969",
    "end": "130950"
  },
  {
    "text": "these are the for use case that we're looking into step-by-step that kind of gives the foundation and gives an overview of what",
    "start": "130950",
    "end": "137060"
  },
  {
    "text": "BPF can do and then we're going to explain how that applies to service mesh",
    "start": "137060",
    "end": "142390"
  },
  {
    "text": "so Facebook published these numbers out of the blue about two years ago at the conference Facebook is not very public",
    "start": "142390",
    "end": "150050"
  },
  {
    "start": "143000",
    "end": "143000"
  },
  {
    "text": "about everything so they're not actually publishing the absolute numbers the",
    "start": "150050",
    "end": "155960"
  },
  {
    "text": "absolute performance numbers but I've published this slide and what this slide is is showing us is they have been using",
    "start": "155960",
    "end": "161630"
  },
  {
    "text": "IP vs which is a Linux based software based load balancing technology that has",
    "start": "161630",
    "end": "166700"
  },
  {
    "text": "been in the kernel for over 15 years how they've been using IP leas for many many years and then have experienced the",
    "start": "166700",
    "end": "175190"
  },
  {
    "text": "powers of BPF and how they can leverage BPF to get better faster lopa lancers",
    "start": "175190",
    "end": "180560"
  },
  {
    "text": "and the performance difference with BPF was 10x which was way too good to be",
    "start": "180560",
    "end": "187670"
  },
  {
    "text": "true so they've obviously repeated the measurements many many times just feeling like we need to be really are we actually measuring correctly but the",
    "start": "187670",
    "end": "194450"
  },
  {
    "text": "numbers are the reason for these numbers is because BPF is kind of changing the game first of all BPF features like JIT",
    "start": "194450",
    "end": "201980"
  },
  {
    "text": "compiler so BPF is capable of programming the kernel but then the",
    "start": "201980",
    "end": "207440"
  },
  {
    "text": "kernel will on-the-fly take software instructions and compile them into what the CPU understands so",
    "start": "207440",
    "end": "213830"
  },
  {
    "text": "it's almost like it would we compile the kernel on-the-fly and reboot it but without actually rebooting it so you can",
    "start": "213830",
    "end": "219500"
  },
  {
    "text": "kind of modify the behavior off the kernel and you can do this in a safe way",
    "start": "219500",
    "end": "225590"
  },
  {
    "text": "so amazing isn't it right so and this this this this power is being used for",
    "start": "225590",
    "end": "232970"
  },
  {
    "text": "one in this example for load balancing we've done something similar in solium",
    "start": "232970",
    "end": "238880"
  },
  {
    "start": "237000",
    "end": "237000"
  },
  {
    "text": "where we use PPF and x DB for DDoS mitigation so this is a very simple example where we use a DPF program to",
    "start": "238880",
    "end": "247190"
  },
  {
    "text": "drop connections from IP sources that are host out to us so the typical DDoS",
    "start": "247190",
    "end": "252620"
  },
  {
    "text": "use case where you have a large pool of IP addressing spamming your servers and you want to drop these packets as",
    "start": "252620",
    "end": "258979"
  },
  {
    "text": "quickly as possible this this demo shows or this this table shows basically two machines one machine",
    "start": "258979",
    "end": "265280"
  },
  {
    "text": "is spamming the other machine with point six million million packets per second and then we have the first set up",
    "start": "265280",
    "end": "271759"
  },
  {
    "text": "which is dropping all of these packets with a single iptables rule running IP set and just looking at the source IP",
    "start": "271759",
    "end": "278000"
  },
  {
    "text": "and dropping all of that all of the matches right and the second program is doing or a second set up is doing the",
    "start": "278000",
    "end": "283729"
  },
  {
    "text": "same with PPF in the IP tables IP set version we can only drop about seven",
    "start": "283729",
    "end": "288830"
  },
  {
    "text": "million packets out of these total 11 million packets this means that this this server this machine is basically",
    "start": "288830",
    "end": "295120"
  },
  {
    "text": "occupied 100% by just dropping packets by it so it was this is basically",
    "start": "295120",
    "end": "300560"
  },
  {
    "text": "showing this is a successful DDoS DDoS attack with the machine is using all of",
    "start": "300560",
    "end": "305780"
  },
  {
    "text": "its powers just to drop packets which means that the latencies gone up and we can only handle about 280 requests per",
    "start": "305780",
    "end": "313310"
  },
  {
    "text": "second of good traffic in the BPF use case first of all we can drop all of the hostile packets we can still while this",
    "start": "313310",
    "end": "320360"
  },
  {
    "text": "machine is under attack by eleven point six million packets per second we can still process over eighty thousand",
    "start": "320360",
    "end": "326030"
  },
  {
    "text": "requests per second of good HTTP requests or good TCP requests this is",
    "start": "326030",
    "end": "333229"
  },
  {
    "start": "332000",
    "end": "332000"
  },
  {
    "text": "the second use case kind of which is profiling and tracing some call this the G trace for Linux many have been have",
    "start": "333229",
    "end": "339830"
  },
  {
    "text": "been waiting for this for many many years teachers teachers has been super powerful and Linux has always kind of",
    "start": "339830",
    "end": "345199"
  },
  {
    "text": "lagged behind a bit so BPF gave this flexibility and the power and the visibility to bring something that may",
    "start": "345199",
    "end": "352310"
  },
  {
    "text": "be not quite there but very very close already to 2d trace I'm not going to talk too much about this if you are",
    "start": "352310",
    "end": "358580"
  },
  {
    "text": "interested in this go to Brandon blacks Brandon directs blog post I have the URL",
    "start": "358580",
    "end": "363919"
  },
  {
    "text": "on the slides it has many many examples and gives instructions how you can",
    "start": "363919",
    "end": "369110"
  },
  {
    "text": "generate these amazing flame graphs that can basically track down which parts of your applications are consuming CPU then",
    "start": "369110",
    "end": "380150"
  },
  {
    "text": "Google came around said well this is amazing we want this but we need this at scale we cannot really like the previous",
    "start": "380150",
    "end": "385190"
  },
  {
    "text": "examples is BCC this is from vpf compiler collection has examples that",
    "start": "385190",
    "end": "391159"
  },
  {
    "text": "allow it to run this on one machine Google does everything at scale so a state-created be PFD which gives you the",
    "start": "391159",
    "end": "397279"
  },
  {
    "text": "ability to do the same but for a thousand servers we having to manually do something on every server basically gives you the",
    "start": "397279",
    "end": "404140"
  },
  {
    "text": "capability that if you're running an application at scale on many many servers you can profile them while",
    "start": "404140",
    "end": "410450"
  },
  {
    "text": "they're all running at the same time and you can figure out what each of them are doing on each on each on each server basically expanding the profiling and",
    "start": "410450",
    "end": "417710"
  },
  {
    "text": "tracing capability to work like a set of clusters or a set of or a cluster of",
    "start": "417710",
    "end": "422900"
  },
  {
    "text": "machines then the last one is IP table",
    "start": "422900",
    "end": "427940"
  },
  {
    "start": "424000",
    "end": "424000"
  },
  {
    "text": "so what is your favorite memory of I details I think a lot of us have moments where we maybe we're in the middle of",
    "start": "427940",
    "end": "435550"
  },
  {
    "text": "troubleshooting a huge IP table set up with many hundreds or even thousands of rules maybe several components maybe a",
    "start": "435550",
    "end": "443690"
  },
  {
    "text": "cute proxy maybe something else modifying these IP tables rule all time maybe an attempt to delete nigh details",
    "start": "443690",
    "end": "449540"
  },
  {
    "text": "at all and another component we added this again I think we all have memories in that in that regard I like I like",
    "start": "449540",
    "end": "456140"
  },
  {
    "text": "this quote so Jerome has has hurt it I don't think he mentioned this himself but if any team in any team you need a",
    "start": "456140",
    "end": "462710"
  },
  {
    "text": "tank you need a healer you need a damage dealer some of if crowd control crowd control abilities and another who",
    "start": "462710",
    "end": "470330"
  },
  {
    "text": "knows IP tables I think that's very true so what's happening right now and this",
    "start": "470330",
    "end": "477740"
  },
  {
    "text": "is this is not this is not making IP tables obsolete per se but the kernel community is basically decided the",
    "start": "477740",
    "end": "483920"
  },
  {
    "text": "future is BPF we don't want to maintain both of ABPA F specific data paths and then also maintain these upcoming next",
    "start": "483920",
    "end": "491420"
  },
  {
    "text": "generation of networking feature by BPF can we somehow translate IP tables like",
    "start": "491420",
    "end": "497510"
  },
  {
    "text": "the configuration requests by the user and use BPF to implement this and this is what's happening now is called the",
    "start": "497510",
    "end": "503510"
  },
  {
    "text": "BPF filter project it basically allows you to continue using IP tables but the",
    "start": "503510",
    "end": "508610"
  },
  {
    "text": "kernel itself will use BPF to enforce this and just just by doing prettify",
    "start": "508610",
    "end": "514580"
  },
  {
    "text": "replacing the enforcement part we already seen massive performance increase so this this graph is an early",
    "start": "514580",
    "end": "521930"
  },
  {
    "start": "517000",
    "end": "517000"
  },
  {
    "text": "benchmark that shows in yellow existing IP tables performance blue nf tables",
    "start": "521930",
    "end": "527300"
  },
  {
    "text": "enforcement which is which was supposed to be the successor for IP tables has been trying to do so for ten years",
    "start": "527300",
    "end": "533780"
  },
  {
    "text": "it's never really really taken off and then BPF filter which is about three",
    "start": "533780",
    "end": "538850"
  },
  {
    "text": "times or more than three times faster so the gray is the softer version of vpf and because BPF is a generic bytecode",
    "start": "538850",
    "end": "545780"
  },
  {
    "text": "language like like Java it can actually be offloaded onto smart NICs so the the blue one is BPF but",
    "start": "545780",
    "end": "552950"
  },
  {
    "text": "offloaded to smart makes the kind of this next generation of linux networking is actually so generic and programmable",
    "start": "552950",
    "end": "559220"
  },
  {
    "text": "that it can be offloaded onto smart NICs for the next four the vex next wave of performance needs excellent and there",
    "start": "559220",
    "end": "569030"
  },
  {
    "text": "will be many many more examples I have compiled a list here we don't have time to go through all of them but the amount",
    "start": "569030",
    "end": "574790"
  },
  {
    "text": "of BPF based projects in the last couple of months has basically exploded so BPF is is now everywhere so what is this PPF",
    "start": "574790",
    "end": "583940"
  },
  {
    "start": "583000",
    "end": "583000"
  },
  {
    "text": "how can I use it so a typical BPF chain looks something like this so you have a user I could for example a developer",
    "start": "583940",
    "end": "591860"
  },
  {
    "text": "writes a BPF program in source code this can be sudo C it can be Python and",
    "start": "591860",
    "end": "598250"
  },
  {
    "text": "then there's a compiler right now there's two major ones there is LLVM clang which can take sudo C code and",
    "start": "598250",
    "end": "604730"
  },
  {
    "text": "there is BCC which can take Python code and both will then generate BPF bytecode PPF bytecode",
    "start": "604730",
    "end": "611660"
  },
  {
    "text": "is basically something that looks very similar to x86 assembly the but is completely in software this program is",
    "start": "611660",
    "end": "619010"
  },
  {
    "text": "basically it's basically a computer program you can then load this into the kernel and attach it to multiple points",
    "start": "619010",
    "end": "624800"
  },
  {
    "text": "you can attach it to whenever a network packet is being received whenever a system call is being performed whenever",
    "start": "624800",
    "end": "630710"
  },
  {
    "text": "a trace point in the kernel is being being hit whenever a user space probe so",
    "start": "630710",
    "end": "636020"
  },
  {
    "text": "whenever a function in your application is being hit so for all of these events we can run a BPF program so for the",
    "start": "636020",
    "end": "641990"
  },
  {
    "text": "networking part of for the you're always losing the packet hooks for the tracing part using system call hooks reusing",
    "start": "641990",
    "end": "648350"
  },
  {
    "text": "trace points for security for example seccomp we are attaching this to system calls so every system call being called",
    "start": "648350",
    "end": "654920"
  },
  {
    "text": "a DPF program runs and decides whether whether the caller is allowed called to",
    "start": "654920",
    "end": "660050"
  },
  {
    "text": "do to make this system call or not so BPF basically gives us the flexibility to run these small little",
    "start": "660050",
    "end": "665720"
  },
  {
    "text": "programs everywhere inside Colonel and extends the logic of the kernel itself so I",
    "start": "665720",
    "end": "671620"
  },
  {
    "text": "talked about DPF being safe so how does that work so when you load the program into the kernel it goes through the very",
    "start": "671620",
    "end": "678280"
  },
  {
    "text": "fire and the verifier will look at the program and will make sure that it cannot hurt the kernel right so you",
    "start": "678280",
    "end": "684310"
  },
  {
    "text": "cannot crash the kernel you can you can it has to be able to run to completion it cannot loop forever it cannot expose",
    "start": "684310",
    "end": "691210"
  },
  {
    "text": "kernel memory right this is the major difference between BPF and the Linux kernel module like if a linux kernel",
    "start": "691210",
    "end": "697570"
  },
  {
    "text": "module has a bug if it if it if it has a null pointer year of dereference it will",
    "start": "697570",
    "end": "702790"
  },
  {
    "text": "crash your kernel and your machine will be dead if the BPF program you can load a faulty program but the kernel will",
    "start": "702790",
    "end": "708850"
  },
  {
    "text": "reject it and not load it properly so only only safe programs are loadable and",
    "start": "708850",
    "end": "714730"
  },
  {
    "text": "the last step aspect is the JIT compiler so this takes the software own instructions and compile sits this to",
    "start": "714730",
    "end": "721480"
  },
  {
    "text": "x86 arm and so on so basically instead of having a software based virtual",
    "start": "721480",
    "end": "726730"
  },
  {
    "text": "machine that runs the program it gets translated into something that the CPU understands so it runs at native speed",
    "start": "726730",
    "end": "732430"
  },
  {
    "text": "this is why we get this amazing performance so how does BPF how does all",
    "start": "732430",
    "end": "740380"
  },
  {
    "text": "of this apply to Envoy and service mesh so I think all of you have heard about",
    "start": "740380",
    "end": "747130"
  },
  {
    "text": "service mesh is to your envoy this week so I'm not going to do an intro on that if you don't know about it there are",
    "start": "747130",
    "end": "753340"
  },
  {
    "text": "many many good talks that have been recorded this week so I recommend watching one of watching one of those",
    "start": "753340",
    "end": "758740"
  },
  {
    "text": "but overall it looks something like this where we have two services and they use",
    "start": "758740",
    "end": "765220"
  },
  {
    "start": "759000",
    "end": "759000"
  },
  {
    "text": "a sidecar on each side to communicate with each other so instead of services talking through the network directly we",
    "start": "765220",
    "end": "772270"
  },
  {
    "text": "basically inject the sidecar proxy inside of each part which then talks on",
    "start": "772270",
    "end": "778000"
  },
  {
    "text": "behalf of the service this allows for example to do retry so if the service at",
    "start": "778000",
    "end": "783760"
  },
  {
    "text": "the other end responds with a 5x HTTP we can for example retry and do this again",
    "start": "783760",
    "end": "790000"
  },
  {
    "text": "right it allows you to trace again so y'all y'all know about the the promise and the values that instead of service",
    "start": "790000",
    "end": "796180"
  },
  {
    "text": "match can provide and if you look at this picture it looks pretty simple looks neat it's a good architecture if",
    "start": "796180",
    "end": "802300"
  },
  {
    "text": "you now look at what's actually going on under the hood you might see where where some of the where some of the",
    "start": "802300",
    "end": "807940"
  },
  {
    "text": "performance overhead is coming from and this has nothing to do with the proxies themselves it's all outside of the proxy",
    "start": "807940",
    "end": "814240"
  },
  {
    "text": "it's how the proxy is being put into the picture so first of all what do all",
    "start": "814240",
    "end": "820000"
  },
  {
    "text": "applications use to talk to each other they use sockets right so the service",
    "start": "820000",
    "end": "826000"
  },
  {
    "text": "the application opens a socket and makes a makes an outgoing HTTP request the",
    "start": "826000",
    "end": "832480"
  },
  {
    "text": "citecar itself the proxy listens on a port it's also a socket I then will will",
    "start": "832480",
    "end": "838509"
  },
  {
    "text": "open a second connection on behalf of the of the application that's another socket and then the same this same",
    "start": "838509",
    "end": "844480"
  },
  {
    "text": "picture is on the receiving side so we already went from two sockets to six",
    "start": "844480",
    "end": "849940"
  },
  {
    "text": "sockets because if the if the services will be talking to each other obviously would also have sockets but only two of",
    "start": "849940",
    "end": "856120"
  },
  {
    "text": "them then what do these sockets talk they talk TCP so we're going through the",
    "start": "856120",
    "end": "862209"
  },
  {
    "text": "TCP stack the kernel itself is not able",
    "start": "862209",
    "end": "867970"
  },
  {
    "text": "to do forward Alfre only which means that it cannot actually four about TCP only it needs a layer 2 protocol as well",
    "start": "867970",
    "end": "874480"
  },
  {
    "text": "and basically we're still talking Ethernet here so yes let's add Ethernet to the mix so it's maybe a bit",
    "start": "874480",
    "end": "880810"
  },
  {
    "text": "surprising that an application is talking to a sidecar and Ethernet is involved but even that so Linux is not",
    "start": "880810",
    "end": "889209"
  },
  {
    "text": "Linux does everything the files and devices so worried where are my devices let's add the devices to the mix so from",
    "start": "889209",
    "end": "897459"
  },
  {
    "start": "894000",
    "end": "894000"
  },
  {
    "text": "from app to sidecar this could be the loopback right this is the case where you tell the site well where you tell",
    "start": "897459",
    "end": "903910"
  },
  {
    "text": "your application to talk to the sidecar directly so let's say the sidecar is listening on port 4000 you're telling",
    "start": "903910",
    "end": "910029"
  },
  {
    "text": "the application instead of talking anywhere talk to 127 or 140 thousand",
    "start": "910029",
    "end": "915189"
  },
  {
    "text": "talk directly to the sidecar this is this model even in this model we already going through the TCP stack 6 times",
    "start": "915189",
    "end": "922449"
  },
  {
    "text": "we're going through Ethernet stack 6 times we're going through four different devices all of this adds a lot of",
    "start": "922449",
    "end": "930519"
  },
  {
    "text": "latency it's literally running through millions of C code inside of the Windows kernel",
    "start": "930519",
    "end": "937360"
  },
  {
    "text": "if you want to do this transparently so without having to tell the application",
    "start": "937570",
    "end": "942910"
  },
  {
    "text": "to talk to the site core we have to add something else and this is an IP tables",
    "start": "942910",
    "end": "948019"
  },
  {
    "start": "947000",
    "end": "947000"
  },
  {
    "text": "rule so if for example if you deploy SEO right now of the box you get an IP tables redirect rule that's running",
    "start": "948019",
    "end": "954050"
  },
  {
    "text": "inside of the part that will redirect all traffic that's that wants to exit",
    "start": "954050",
    "end": "959660"
  },
  {
    "text": "the container that wants to exit the part and redirects that back into the sidecar this is this IP tables rule",
    "start": "959660",
    "end": "965529"
  },
  {
    "text": "we're not going through these rule once we're actually going through this rule twice because when the site card and",
    "start": "965529",
    "end": "971540"
  },
  {
    "text": "opens the second part of the code actual real connection that goes out that also goes through that IP tables role that",
    "start": "971540",
    "end": "977630"
  },
  {
    "text": "rule will actually have an exception and says well if you are coming from the sidecar then I'm not redirecting you",
    "start": "977630",
    "end": "982699"
  },
  {
    "text": "everything else gets redirected to the sidecar so we're actually hitting this cost twice and then obviously on the on",
    "start": "982699",
    "end": "988639"
  },
  {
    "text": "the incoming side as well any packet any connection that goes into a cycle into a",
    "start": "988639",
    "end": "993800"
  },
  {
    "text": "part gets transparently redirected to the sidecar why do we why do like this",
    "start": "993800",
    "end": "1002260"
  },
  {
    "text": "is all like the site cards always in the end in the same pod or is all isn't running next to the applications always",
    "start": "1002260",
    "end": "1008410"
  },
  {
    "text": "on the same note why do we use why do you use Ethernet why do we use TCP TCP",
    "start": "1008410",
    "end": "1013870"
  },
  {
    "text": "has been designed to survive nuclear blasts right so TCP has pins has been designed to survive lossy environments",
    "start": "1013870",
    "end": "1021670"
  },
  {
    "text": "where packets can get lost if you're staying on the same note packets are not",
    "start": "1021670",
    "end": "1027130"
  },
  {
    "text": "getting lost in fact it's basically choose data it's data that we have to move from one from the app to the",
    "start": "1027130",
    "end": "1033159"
  },
  {
    "text": "sidecar why do we use TCP and Ethernet yeah so why do we use it I don't really",
    "start": "1033159",
    "end": "1039668"
  },
  {
    "text": "know because it's possible to do it without it and this is where BPF and Salim comes in so in this case where you",
    "start": "1039669",
    "end": "1046750"
  },
  {
    "start": "1040000",
    "end": "1040000"
  },
  {
    "text": "run the sidecar the sidecar model for example if on why we noticed that both",
    "start": "1046750",
    "end": "1055090"
  },
  {
    "text": "the application and the sidecar on the same note which is taking TCP Ethernet",
    "start": "1055090",
    "end": "1061360"
  },
  {
    "text": "and all of this out of the picture right we have two local sockets and basically the one saw",
    "start": "1061360",
    "end": "1067120"
  },
  {
    "text": "is trying to send data doesn't need to be TCP and the only intent we have is move that data to the other socket so",
    "start": "1067120",
    "end": "1073360"
  },
  {
    "text": "that why don't we just move it over that's what we do with BPF right this is this is the socket level BPF that we",
    "start": "1073360",
    "end": "1080830"
  },
  {
    "text": "have added to the Linux kernel that allows you to do this obviously simplifies or it it enhances the",
    "start": "1080830",
    "end": "1089050"
  },
  {
    "text": "performance a lot because we're no longer having to go through the TCP stack and so on and the beauty of this",
    "start": "1089050",
    "end": "1094720"
  },
  {
    "text": "is it does not require any changes at all because the application is still talking TCP the sidecar is still",
    "start": "1094720",
    "end": "1101080"
  },
  {
    "text": "listening as a TCP socket so nothing has to change right you can run this as is you bring cilium into the picture and",
    "start": "1101080",
    "end": "1107710"
  },
  {
    "text": "will accelerate this transparently for you so I like what does that bring us so",
    "start": "1107710",
    "end": "1113800"
  },
  {
    "start": "1112000",
    "end": "1112000"
  },
  {
    "text": "we have we have non measurements and kind of at the same moment are the same the same but the yeah we're in the same",
    "start": "1113800",
    "end": "1119770"
  },
  {
    "text": "moment as Facebook that we have to measure this again this cannot be true like let's meet let's remesh sure we cannot just publish these numbers it's",
    "start": "1119770",
    "end": "1125530"
  },
  {
    "text": "too good to be true so we've measured three three cases blue is the IP tables redirect that's",
    "start": "1125530",
    "end": "1132190"
  },
  {
    "text": "basically when you deploy is two out of the box this is what you would get right now orange is the case where you point",
    "start": "1132190",
    "end": "1138460"
  },
  {
    "text": "the the app to the sidecar so you don't need the IP tables redirect rule so the",
    "start": "1138460",
    "end": "1143830"
  },
  {
    "text": "difference between blue and orange is already that single IP table the cost of a single IP tables redirect it's quite",
    "start": "1143830",
    "end": "1149470"
  },
  {
    "text": "massive already and then or the yellow is solium accelerating this",
    "start": "1149470",
    "end": "1155580"
  },
  {
    "text": "transparently and it's somewhere between 3 3 to 4x faster if you're wondering",
    "start": "1155580",
    "end": "1164500"
  },
  {
    "text": "what the X bar here is although the Y order the y axis is a it's the number of",
    "start": "1164500",
    "end": "1169510"
  },
  {
    "text": "requests per second the the x axis is the number of persistent connections",
    "start": "1169510",
    "end": "1174940"
  },
  {
    "text": "typically if you're running service mesh or you're running with with a sidecar",
    "start": "1174940",
    "end": "1180250"
  },
  {
    "text": "the app does not open a new connection for every request like most most most",
    "start": "1180250",
    "end": "1185950"
  },
  {
    "text": "networking libraries will maintain connection pools and will reuse the same TCP connection multiple times for for",
    "start": "1185950",
    "end": "1193150"
  },
  {
    "text": "for new requests so the x-axis is the number of persistent connections that",
    "start": "1193150",
    "end": "1198400"
  },
  {
    "text": "we're using in parallel so yes measurement we found out that we need about 50 parallel persistent connections",
    "start": "1198400",
    "end": "1207010"
  },
  {
    "text": "to actually max out the machine and this",
    "start": "1207010",
    "end": "1212050"
  },
  {
    "text": "is just the fact that your systems hasn't has multiple cores so in order to maximize use of the machine we have to",
    "start": "1212050",
    "end": "1218500"
  },
  {
    "text": "do things in parallel so how do we do",
    "start": "1218500",
    "end": "1223600"
  },
  {
    "start": "1222000",
    "end": "1222000"
  },
  {
    "text": "this specifically I like what it what are they if you look under the hood what we",
    "start": "1223600",
    "end": "1229270"
  },
  {
    "text": "found out we wanted to make as minimal changes as possible first of all we did not want to emulate TCP or anything like",
    "start": "1229270",
    "end": "1234880"
  },
  {
    "text": "that so what we decided to do is we will keep the existing behavior for the",
    "start": "1234880",
    "end": "1240130"
  },
  {
    "text": "handshake so for the syn for the TCP handshakes with all no for the non networking people this is basically the",
    "start": "1240130",
    "end": "1246370"
  },
  {
    "text": "initial three packets that are exchanged between sender and receiver to basically confirm to build up a connection these",
    "start": "1246370",
    "end": "1252670"
  },
  {
    "text": "are three packets are being sent initially and after this a TCP connection is established so this still",
    "start": "1252670",
    "end": "1258760"
  },
  {
    "text": "goes through the existing path this is basically just the connection building up but if you're using persistent",
    "start": "1258760",
    "end": "1263950"
  },
  {
    "text": "connections we call it we're paying this cost once and after that we don't pay it anymore and then only in the data phase",
    "start": "1263950",
    "end": "1270910"
  },
  {
    "text": "where we actually exchange data in both directions do we use the acceleration this means all TCP options all flags all",
    "start": "1270910",
    "end": "1278710"
  },
  {
    "text": "of this just continues working it's completely transparent it's only the data that gets accelerated we're even",
    "start": "1278710",
    "end": "1286150"
  },
  {
    "text": "working on making it possible that you can still use for example TCP timestamps this still works but the data is still",
    "start": "1286150",
    "end": "1293230"
  },
  {
    "text": "getting accelerated this means there's",
    "start": "1293230",
    "end": "1299620"
  },
  {
    "text": "no changes to the application required right if your if your application is using TCP sockets you can transparently",
    "start": "1299620",
    "end": "1305200"
  },
  {
    "text": "redirect to a sidecar to for example envoy envoy does also not need any changes it will simply benefit from this",
    "start": "1305200",
    "end": "1311590"
  },
  {
    "text": "acceleration but wait this is actually not sidecar specific at all this will",
    "start": "1311590",
    "end": "1318460"
  },
  {
    "text": "work across any to connect or any connections that connects to local",
    "start": "1318460",
    "end": "1324370"
  },
  {
    "text": "applications so it could be two containers talking on the same note the sidecar is just it's a perfect example",
    "start": "1324370",
    "end": "1330010"
  },
  {
    "text": "because in this scenario you always have two containers or two applications talk talking to each other but it will",
    "start": "1330010",
    "end": "1335560"
  },
  {
    "text": "actually work as well if you have two containers talking to each other you're running psyllium they will just get this",
    "start": "1335560",
    "end": "1340810"
  },
  {
    "text": "boot boost automatically so this also works across container namespaces right the kernel itself is not isolated in",
    "start": "1340810",
    "end": "1347470"
  },
  {
    "text": "that sense it actually sees all the sockets we will still like respect namespace isolation from a security",
    "start": "1347470",
    "end": "1353350"
  },
  {
    "text": "perspective but if they are allowed to talk we will accelerate this so it will actually benefit from this not even in",
    "start": "1353350",
    "end": "1358990"
  },
  {
    "text": "this in the sidecar case but also interest the plain forward in case you are too local applications or two local",
    "start": "1358990",
    "end": "1364390"
  },
  {
    "text": "containers are talking to each other so how do I get this you can run psyllium",
    "start": "1364390",
    "end": "1371800"
  },
  {
    "text": "right this is this is the way to get this psyllium brings BPF to cuba Nettie's and other orchestration systems",
    "start": "1371800",
    "end": "1377710"
  },
  {
    "text": "I will talk a little bit about PPF or about süleyman its scope in the next",
    "start": "1377710",
    "end": "1382930"
  },
  {
    "text": "slide but the main requirements to get this is for psyllium itself you need to run a Linux kernel that is at least four",
    "start": "1382930",
    "end": "1389980"
  },
  {
    "text": "point nine most distributions for example if you're running Ubuntu 1804 you'll get this out of the box chorus",
    "start": "1389980",
    "end": "1395860"
  },
  {
    "text": "you get this out of the box for us for all our distributions that say Punto 1604 they are kernels so you may you may",
    "start": "1395860",
    "end": "1402130"
  },
  {
    "text": "there's official packages so you may need to reboot once to just run a more recent kernel that the default one for",
    "start": "1402130",
    "end": "1408730"
  },
  {
    "text": "example Google announced or told us this week that the container optimized Linux",
    "start": "1408730",
    "end": "1415030"
  },
  {
    "text": "image that they're using for chica is now also unable to run this and so on so the most most distres will bring you",
    "start": "1415030",
    "end": "1422350"
  },
  {
    "text": "this if you want to use the side core acceleration that's a more recent feature that is in for sixteen right so",
    "start": "1422350",
    "end": "1431500"
  },
  {
    "text": "as you can see on this slide psyllium is basically taking orchestration or is combining or translating orchestration",
    "start": "1431500",
    "end": "1438580"
  },
  {
    "text": "system concepts like like a policy networking load balancing and translates",
    "start": "1438580",
    "end": "1443800"
  },
  {
    "text": "that into BPF programs that get attached to containers to parts so it's basically doing the magic so you don't have to",
    "start": "1443800",
    "end": "1450220"
  },
  {
    "text": "know about and how to you don't need to know how to be right BPF programs we are doing this for you",
    "start": "1450220",
    "end": "1455530"
  },
  {
    "text": "but basically implement the non-standardized orchestration system standards like for",
    "start": "1455530",
    "end": "1461560"
  },
  {
    "text": "example C&I or network policy or accumulated services and so on",
    "start": "1461560",
    "end": "1467600"
  },
  {
    "start": "1467000",
    "end": "1467000"
  },
  {
    "text": "so what exactly does sodium and I've tried to compress this into one slide salam in a nutshell so we have a we have",
    "start": "1467600",
    "end": "1474440"
  },
  {
    "text": "a release we released 1.0 a couple of weeks back we're now at 1 0 1 we have this highly efficient BPF based data",
    "start": "1474440",
    "end": "1481160"
  },
  {
    "text": "path it's fully distributed so there's no centralized control plane anyway like all the functionality runs on each node",
    "start": "1481160",
    "end": "1487040"
  },
  {
    "text": "so it scales out really well we have this service mesh data pay data paths which is what I just talked about this",
    "start": "1487040",
    "end": "1493130"
  },
  {
    "text": "acceleration of the sidecar we have a CNI and the CMM that's the the docker lip network model so we support these",
    "start": "1493130",
    "end": "1501680"
  },
  {
    "text": "two models CNI gives us kubernetes of course gives us the more recent version of foundry gives us mezzos and so on",
    "start": "1501680",
    "end": "1508670"
  },
  {
    "text": "we implement network security and we do this both at packet level so this is the",
    "start": "1508670",
    "end": "1514130"
  },
  {
    "text": "existing traditional layer 3 layer for this part can talk to this part on the",
    "start": "1514130",
    "end": "1519170"
  },
  {
    "text": "on port 80 that's kind of the packet based we also have the API level so the kind of this the world of API calls that",
    "start": "1519170",
    "end": "1526610"
  },
  {
    "text": "the eastery on service magic cares about so not saying that yes two parts can",
    "start": "1526610",
    "end": "1531950"
  },
  {
    "text": "talk to each other but they can only do a certain API calls for example only I get to slash public but I get to slash",
    "start": "1531950",
    "end": "1539060"
  },
  {
    "text": "private should be denied so I can restrict access to my API and shrink the",
    "start": "1539060",
    "end": "1544730"
  },
  {
    "text": "API service we can do this for HTTP we can do is for T RPC Kafka and then more",
    "start": "1544730",
    "end": "1550850"
  },
  {
    "text": "and more more are coming we're having very interesting conversation with Matz how we can simplify and lower the",
    "start": "1550850",
    "end": "1557860"
  },
  {
    "text": "barrier to add more and more protocols into envoy on the security side we can",
    "start": "1557860",
    "end": "1563600"
  },
  {
    "text": "do traditional IP cider based enforcement that means you can say I want to talk to this IP or this block of",
    "start": "1563600",
    "end": "1569630"
  },
  {
    "text": "IPs all cluster in terminal communica or all cluster internal security is label based",
    "start": "1569630",
    "end": "1575210"
  },
  {
    "text": "like all other a lot of plugins as well that's implementing the cube analysis or security the main difference is that",
    "start": "1575210",
    "end": "1581270"
  },
  {
    "text": "we're using identity based enforcement so we're not basically mapping labels to IPs and then whitelist in individual IPS",
    "start": "1581270",
    "end": "1588560"
  },
  {
    "text": "we're actually generating a strong identity and when a part sends out packets we're attaching the identity to",
    "start": "1588560",
    "end": "1595160"
  },
  {
    "text": "the packet and then we're verifying this identity instead of relying on",
    "start": "1595160",
    "end": "1602270"
  },
  {
    "text": "source IP addresses so similar to mutual TLS I think this next wave of security",
    "start": "1602270",
    "end": "1607970"
  },
  {
    "text": "has to be cannot be IP based it has to be identity based then we do distributed",
    "start": "1607970",
    "end": "1613850"
  },
  {
    "text": "and scalable load balancing on l3 l4 so basically complementing a service",
    "start": "1613850",
    "end": "1619070"
  },
  {
    "text": "mesh which would do this primarily l7 they can also do well for of course we're doing this in a very efficient way",
    "start": "1619070",
    "end": "1625490"
  },
  {
    "text": "so we're replacing the IP tables and I previous version of IP V of Q proxy",
    "start": "1625490",
    "end": "1631040"
  },
  {
    "text": "we're losing doing this in BPF I know in a way that actually scales to thousands and thousands of services the",
    "start": "1631040",
    "end": "1636950"
  },
  {
    "text": "performance is the same whether you're running one service a thousand ten thousand or five hundred thousand services it's a very efficient hash",
    "start": "1636950",
    "end": "1643760"
  },
  {
    "text": "table based lookup we have a very simplified networking model so we're trying to keep networking as simple as",
    "start": "1643760",
    "end": "1649700"
  },
  {
    "text": "possible we support or an overlay mode which is kind of V excellent and Eve paste we",
    "start": "1649700",
    "end": "1655429"
  },
  {
    "text": "also support a direct routing mode where you can run your routing demons we're trying to not be not actually restricted",
    "start": "1655429",
    "end": "1661730"
  },
  {
    "text": "to one specific routing daemon so you could run something like like a cube router you could you could run zebra",
    "start": "1661730",
    "end": "1667429"
  },
  {
    "text": "whatever this this will function and then in then one of the next releases will have delegation to another",
    "start": "1667429",
    "end": "1673190"
  },
  {
    "text": "networking plug-in which means that maybe you're already running flannel and you don't want to change this but you still want to have the benefits of for",
    "start": "1673190",
    "end": "1679760"
  },
  {
    "text": "example the service mesh acceleration you want the scalable lopa lansing with sodium you can run sodium on top of",
    "start": "1679760",
    "end": "1686510"
  },
  {
    "text": "other networking products and then we have visibility and tracing this is",
    "start": "1686510",
    "end": "1691520"
  },
  {
    "text": "basically bringing the power of PPF in terms of profiling and tracing and bringing that as well so that is",
    "start": "1691520",
    "end": "1697400"
  },
  {
    "text": "certainly the the least advanced feature that what we have right now but is it will be the focus in forthcoming",
    "start": "1697400",
    "end": "1702860"
  },
  {
    "text": "releases but wait actually gets better",
    "start": "1702860",
    "end": "1710500"
  },
  {
    "text": "the exciting part is coming now and it's a little bit scary maybe let's see so",
    "start": "1710500",
    "end": "1719110"
  },
  {
    "start": "1719000",
    "end": "1719000"
  },
  {
    "text": "TLS uses in-service mash very simple sidecar is running on both sides right",
    "start": "1719110",
    "end": "1724270"
  },
  {
    "text": "the side cause are implementing the actual encryption service to sidecar is unencrypted the",
    "start": "1724270",
    "end": "1730520"
  },
  {
    "text": "sidecar can see HTTP requests can for example do path based routing and",
    "start": "1730520",
    "end": "1735530"
  },
  {
    "text": "to hostname based routing and so on simple we all understand this what are we how does this look like if",
    "start": "1735530",
    "end": "1743330"
  },
  {
    "start": "1741000",
    "end": "1741000"
  },
  {
    "text": "you're talking to external services let's say a github API or a payment",
    "start": "1743330",
    "end": "1749270"
  },
  {
    "text": "service API something that's outside of the cluster in that case the application is obviously using TLS encryption and",
    "start": "1749270",
    "end": "1756200"
  },
  {
    "text": "it's encrypted in the application itself right the application is using SSL to talk to get up using HTTPS it's",
    "start": "1756200",
    "end": "1763130"
  },
  {
    "text": "definitely not gonna send your password clear text across the internet right so",
    "start": "1763130",
    "end": "1768260"
  },
  {
    "text": "how does that work with the sidecar because at this point the HTTP payload is already encrypted how do we solve",
    "start": "1768260",
    "end": "1774980"
  },
  {
    "text": "this I think there are two options the first option is we could actually inject",
    "start": "1774980",
    "end": "1781730"
  },
  {
    "start": "1780000",
    "end": "1780000"
  },
  {
    "text": "a root CA that basically allows the sidecar to decrypt so the sidecar will",
    "start": "1781730",
    "end": "1788960"
  },
  {
    "text": "basically behave as if if it was get up calm as an API this I've heard this a",
    "start": "1788960",
    "end": "1794210"
  },
  {
    "text": "couple of times this week there people are thinking about this because this is kind of if you don't know about the next step that I'm about to explain this is",
    "start": "1794210",
    "end": "1800900"
  },
  {
    "text": "kind of the obvious hack that we could put in place I'm seeing like hats no no no no yeah no it's not what we want so",
    "start": "1800900",
    "end": "1809270"
  },
  {
    "text": "that's actually a beautiful solution that we can provide in the future which is K TLS which stands for kernel TLS so",
    "start": "1809270",
    "end": "1818960"
  },
  {
    "text": "Katie Ellis is actually not that complicated what it does is the kernel already has a very rich set of ciphers",
    "start": "1818960",
    "end": "1825110"
  },
  {
    "text": "for crypto for IPSec so it can already do encryption so what Katie Ellis does",
    "start": "1825110",
    "end": "1830690"
  },
  {
    "text": "is it keeps all the complicated logic of negotiation keys and all the control",
    "start": "1830690",
    "end": "1836360"
  },
  {
    "text": "playing all day the handshake all of that remains in the SSL library but that once the key is known the keys pushed",
    "start": "1836360",
    "end": "1842990"
  },
  {
    "text": "down to the kernel and the kernel will do the symmetric encryption part the actual encrypt encryption of that data",
    "start": "1842990",
    "end": "1849340"
  },
  {
    "text": "this was not added because of like of this use case it was actually added because a lot of static content",
    "start": "1849340",
    "end": "1855410"
  },
  {
    "text": "providers they saw a three four percent CPU reduction of this model of this",
    "start": "1855410",
    "end": "1862010"
  },
  {
    "text": "method if you are streaming video data over SSL three to four percent C production really matters right you have",
    "start": "1862010",
    "end": "1868070"
  },
  {
    "text": "you just need less less machines so basically the encryption point moves from the SSL library to the socket layer",
    "start": "1868070",
    "end": "1875109"
  },
  {
    "text": "inside of the kernel let's combine this",
    "start": "1875109",
    "end": "1881709"
  },
  {
    "text": "so this brings deep the previous picture back which is kind of application socket",
    "start": "1881709",
    "end": "1887619"
  },
  {
    "text": "sidecar what if we actually delayed is further and do the encryption after the",
    "start": "1887619",
    "end": "1892899"
  },
  {
    "text": "sidecar so we have the key and at this point we know it's going into the sidecar what if we don't encrypt there",
    "start": "1892899",
    "end": "1899469"
  },
  {
    "text": "but only encrypt after it went through the sidecar in this case the picture",
    "start": "1899469",
    "end": "1905019"
  },
  {
    "text": "will look something like this even though we are talking to an external service we're not changing the root CA",
    "start": "1905019",
    "end": "1911889"
  },
  {
    "text": "suet CA in any in any way the sidecar or",
    "start": "1911889",
    "end": "1918519"
  },
  {
    "text": "the app to sidecar communication will be unencrypted the sidecar can see the plaintext HTTP header can do routing and",
    "start": "1918519",
    "end": "1924909"
  },
  {
    "text": "so on but when it leaves the sidecar it gets encrypted if the key that was negotiated by the application in open",
    "start": "1924909",
    "end": "1931809"
  },
  {
    "text": "SSL or in whatever SSL library you are using that solves the problem",
    "start": "1931809",
    "end": "1937659"
  },
  {
    "text": "alright and the kernel is is a trusted entity and does this for us we can trust the kernel to do this it's just it's",
    "start": "1937659",
    "end": "1944589"
  },
  {
    "text": "delaying it's making the sidecar part of the application that's using SSL all right so it's it solved this and it does",
    "start": "1944589",
    "end": "1950709"
  },
  {
    "text": "not even require us to decrypt like even an option one if we go back even if we would want to do this you would have to",
    "start": "1950709",
    "end": "1957849"
  },
  {
    "text": "decrypt at that sidecar and then re-encrypt again which is obviously a",
    "start": "1957849",
    "end": "1962889"
  },
  {
    "text": "massive latency and CPU over overhead that you're adding so what do I need to",
    "start": "1962889",
    "end": "1969070"
  },
  {
    "text": "get Katie Ellis in order to get Keith Katie alas it was merged a couple of weeks ago so it was a joint coloration",
    "start": "1969070",
    "end": "1975369"
  },
  {
    "text": "of Facebook and Google and some others you will need a recent kernel and you will need an open SSL or an SSL library",
    "start": "1975369",
    "end": "1982089"
  },
  {
    "text": "that knows about K TLS which also means you actually need to opt in to this so",
    "start": "1982089",
    "end": "1987190"
  },
  {
    "text": "if you don't want this you don't need you can you can basically say I don't want to grant the kernel this capability",
    "start": "1987190",
    "end": "1992469"
  },
  {
    "text": "you need to opt in to this right which means that the kernel cannot just magically see into your data if the",
    "start": "1992469",
    "end": "1998349"
  },
  {
    "text": "application encrypts it the application must allow this defer operation of the encryption I think",
    "start": "1998349",
    "end": "2004260"
  },
  {
    "text": "right now the the support is baked into blue TLS and open SSL and I know that support is coming for the canoe work for",
    "start": "2004260",
    "end": "2011760"
  },
  {
    "text": "the NGO version of an officer ssl library and also for boring ssl so",
    "start": "2011760",
    "end": "2020460"
  },
  {
    "start": "2019000",
    "end": "2019000"
  },
  {
    "text": "basically this gives us like sidecar for TLS encrypted connections without CIA injection without without decryption",
    "start": "2020460",
    "end": "2026850"
  },
  {
    "text": "when we basically thought about this I had this wow moment like kind of this will change a lot of things because in",
    "start": "2026850",
    "end": "2032700"
  },
  {
    "text": "the end it's like things are always simple if you control both sides but a lot of communication it will be to",
    "start": "2032700",
    "end": "2039660"
  },
  {
    "text": "external services so how do we how do we for example do retries to an external service how do we how do we do retries",
    "start": "2039660",
    "end": "2045870"
  },
  {
    "text": "to a get up api without actually baking this into the application and I think this will basically open up sidecar",
    "start": "2045870",
    "end": "2052050"
  },
  {
    "text": "functionality to the world of external API calls or the world of external services excellent what day is today so",
    "start": "2052050",
    "end": "2065128"
  },
  {
    "text": "today is May 4th though may the 4th be with you so we have a little present because we're actually very very very",
    "start": "2065129",
    "end": "2071790"
  },
  {
    "text": "close to 2,000 stars let me pull it up I wanna do a quick let me refresh it so",
    "start": "2071790",
    "end": "2080540"
  },
  {
    "text": "what we'll do is the following I have the following little present here",
    "start": "2080540",
    "end": "2087118"
  },
  {
    "text": "which is we're in Denmark so this is Lego this is a Star Wars Lego spaceship",
    "start": "2087119",
    "end": "2094230"
  },
  {
    "text": "and if you are storing the cilium repo in the next 10 minutes let's say left 5",
    "start": "2094230",
    "end": "2100560"
  },
  {
    "text": "minutes in the next 5 minutes we will pick a random star person or giveaway this Lego box",
    "start": "2100560",
    "end": "2106109"
  },
  {
    "text": "so before you soil stops not don't don't start yet I have to refresh first we'll look at who starred last and then it",
    "start": "2106109",
    "end": "2113070"
  },
  {
    "text": "will will count the number of stars alright alright so Aleksandra is the",
    "start": "2113070",
    "end": "2121830"
  },
  {
    "text": "latest person that I'm really sound sorry if you're in the room but you don't have a chance to win it so if you store in the next 5 minutes we'll count",
    "start": "2121830",
    "end": "2128369"
  },
  {
    "text": "the number of new stars and we'll give up a this this Lego box if that said I'm opening up for questions you have",
    "start": "2128369",
    "end": "2134310"
  },
  {
    "text": "questions please come to the microphone and ask them we have I think five minutes for questions hey I",
    "start": "2134310",
    "end": "2147900"
  },
  {
    "text": "have a question about IP tables so my understanding is like one of the downsides of IP tables is that under the hood every time you change a rule you",
    "start": "2147900",
    "end": "2153900"
  },
  {
    "text": "actually have to unload and then reload the entire rule set you can BPF do you",
    "start": "2153900",
    "end": "2159119"
  },
  {
    "text": "say like partial recompilation or like does it suffer from that same alright so",
    "start": "2159119",
    "end": "2166260"
  },
  {
    "text": "I IP tables houses probably you can only replace an entire table which means entire entire change right so an entire",
    "start": "2166260",
    "end": "2173730"
  },
  {
    "text": "filter table and for example an F tables already don't house it it doesn't have this problem anymore PPF also doesn't",
    "start": "2173730",
    "end": "2179579"
  },
  {
    "text": "have this problem like in BPF you would compile the program loaded in and then use BPF maps which kind of contains the",
    "start": "2179579",
    "end": "2186299"
  },
  {
    "text": "state for example the policy and these maps can be updated like multiple type multiple hundred thousands of times per",
    "start": "2186299",
    "end": "2192150"
  },
  {
    "text": "second it's kind of incremental updates so it vpf does not suffer from this problem in general thanks but that said",
    "start": "2192150",
    "end": "2198809"
  },
  {
    "text": "the DPF filter project which is kind of this iptables compatible version does",
    "start": "2198809",
    "end": "2204329"
  },
  {
    "text": "not solve this problem because it's a it's an IP tables fundamental problem so BPF only accelerates the actual",
    "start": "2204329",
    "end": "2210089"
  },
  {
    "text": "enforcement of it yeah just quick question so I've been really on lwn",
    "start": "2210089",
    "end": "2215579"
  },
  {
    "text": "recently about xtp sockets like a FX DP so I'm curious how that fits into all of this awesome yeah so FX DP x DP is the",
    "start": "2215579",
    "end": "2224250"
  },
  {
    "text": "BPF version that runs at the network device driver level it actually allows",
    "start": "2224250",
    "end": "2229380"
  },
  {
    "text": "vpf programs to look into what's in a packet data on the DMA buffer like very very close this is what we use for DDoS",
    "start": "2229380",
    "end": "2235829"
  },
  {
    "text": "protection AF x DP is a way to export this data to user space so this for",
    "start": "2235829",
    "end": "2241619"
  },
  {
    "text": "example allows us to build a very fast very efficient efficient new version of TCP dump for example that is that is",
    "start": "2241619",
    "end": "2247950"
  },
  {
    "text": "super low overhead it allows us for example to gain insight into what is",
    "start": "2247950",
    "end": "2253650"
  },
  {
    "text": "going on at the network device layer without actually copying the copying data around Salim that currently does",
    "start": "2253650",
    "end": "2259529"
  },
  {
    "text": "not use this but we definitely have plans to use this it was only merged a couple of weeks ago",
    "start": "2259529",
    "end": "2265640"
  },
  {
    "text": "to sophistic or for the application to sidecar communication I can use TCP dump",
    "start": "2268400",
    "end": "2274160"
  },
  {
    "text": "to debug yes if we redirect with sockets as it's possible so you will see the",
    "start": "2274160",
    "end": "2281450"
  },
  {
    "text": "handshake you will not see the data but bbr we expose information by our beef",
    "start": "2281450",
    "end": "2288980"
  },
  {
    "text": "PPF specific way if we would do this if you would actually expose this through TCP dump again we would lose all of the",
    "start": "2288980",
    "end": "2294440"
  },
  {
    "text": "all of the benefits we've just gained but you will so you will still see the connection opening and you will still",
    "start": "2294440",
    "end": "2299870"
  },
  {
    "text": "see the connection closing but you will not see an entry for every single data packet because there's no packet yes",
    "start": "2299870",
    "end": "2308060"
  },
  {
    "text": "correct yes you can so even even for the non sidecar case you can still use TCP",
    "start": "2308060",
    "end": "2313460"
  },
  {
    "text": "dump if you want we have a more efficient version of TCP dump that also gives you more context so instead of",
    "start": "2313460",
    "end": "2319040"
  },
  {
    "text": "just IP addresses well for example show you hey there is a container if these labels talking to this container if these labels instead",
    "start": "2319040",
    "end": "2326420"
  },
  {
    "text": "of just this IP do to actually this IP so we have a microservices ready TCP",
    "start": "2326420",
    "end": "2331430"
  },
  {
    "text": "dump clone alright so you talked about",
    "start": "2331430",
    "end": "2341740"
  },
  {
    "text": "helium working with envoy and and all",
    "start": "2341740",
    "end": "2347390"
  },
  {
    "text": "the performance gain that we are getting but I think in Austin we we did come to you and we asked about is there a",
    "start": "2347390",
    "end": "2354200"
  },
  {
    "text": "possibility with helium not working without envoy oh yes up so so silly uses",
    "start": "2354200",
    "end": "2359750"
  },
  {
    "text": "envoy for all layer 7 enforcement so whenever you have a policy rule that",
    "start": "2359750",
    "end": "2365870"
  },
  {
    "text": "requires to restrict on HTTP level so lean will automatically get envoy into",
    "start": "2365870",
    "end": "2371090"
  },
  {
    "text": "the picture if you don't have these rules then envoy rule we will only go through one Roy if we need to alright so",
    "start": "2371090",
    "end": "2377840"
  },
  {
    "text": "the main thing was the main concern we did not wanted to introduce eesti or",
    "start": "2377840",
    "end": "2383210"
  },
  {
    "text": "this was last year and well the reason we could not go for CVM at that time first because helium was to intertwine",
    "start": "2383210",
    "end": "2389780"
  },
  {
    "text": "with easty oh is that still the case so we have we've just finished a prototype where we can where we run side by side",
    "start": "2389780",
    "end": "2396410"
  },
  {
    "text": "sto variable X basically is your pilot manages the Envoy instance for all the",
    "start": "2396410",
    "end": "2401540"
  },
  {
    "text": "parts and psyllium talks to the same Envoy instance so basically instead of running two instances of Envoy we",
    "start": "2401540",
    "end": "2407690"
  },
  {
    "text": "basically use the same instance so I it's it's not tightly coupled X I think",
    "start": "2407690",
    "end": "2413750"
  },
  {
    "text": "we are running out of time and I want to make sure I give this away so let's see we were at 1968 so let's see alright we",
    "start": "2413750",
    "end": "2426140"
  },
  {
    "text": "made two thousand stars [Music]",
    "start": "2426140",
    "end": "2432479"
  },
  {
    "text": "all right so let's see any Google for the math so",
    "start": "2432599",
    "end": "2442059"
  },
  {
    "text": "we have 6832",
    "start": "2442059",
    "end": "2450869"
  },
  {
    "text": "so pick a number so yeah we are received 74 stars will have Google pick a random",
    "start": "2451950",
    "end": "2459760"
  },
  {
    "text": "number for us so the number is 7 so we",
    "start": "2459760",
    "end": "2466119"
  },
  {
    "text": "go back to the stars we reload this and we'll go to Alexandrine then count 7 up",
    "start": "2466119",
    "end": "2476430"
  },
  {
    "text": "all right so one two three four five six",
    "start": "2481490",
    "end": "2487280"
  },
  {
    "text": "seven Simon and very Simon there you go",
    "start": "2487280",
    "end": "2492980"
  },
  {
    "text": "[Music]",
    "start": "2492980",
    "end": "2496030"
  },
  {
    "text": "thank thanks a lot for your star all right so I think we have a couple of t-shirts left in the back unfortunately",
    "start": "2498190",
    "end": "2505099"
  },
  {
    "text": "run out of some sizes so if you still want a cilium shirt we also have stickers make sure you check at the exit",
    "start": "2505099",
    "end": "2511190"
  },
  {
    "text": "I'm also available outside for more questions",
    "start": "2511190",
    "end": "2514960"
  }
]