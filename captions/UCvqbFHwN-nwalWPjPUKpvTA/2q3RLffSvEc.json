[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "all right I guess we'll go ahead and get started I'm Flynn I'm a tech evangelist with buyant I mostly work on the open",
    "start": "520",
    "end": "7359"
  },
  {
    "text": "source side of linker in a previous life I was the original author of The Emissary English Gateway but now I work",
    "start": "7359",
    "end": "14599"
  },
  {
    "text": "in marketing so everybody has filled the room to listen to a marketer talk about",
    "start": "14599",
    "end": "20680"
  },
  {
    "text": "a programming language I am going to talk about why rust is the future of a cloud native but",
    "start": "20680",
    "end": "26480"
  },
  {
    "text": "to do that I'm going to start in the past in 1996 at the operating systems",
    "start": "26480",
    "end": "32279"
  },
  {
    "start": "27000",
    "end": "268000"
  },
  {
    "text": "design and implementation conference in Seattle where in the vendors Hall at one",
    "start": "32279",
    "end": "38000"
  },
  {
    "text": "point I ended having ended up having a conversation for about half an hour with a guy with white hair and a white beard",
    "start": "38000",
    "end": "45000"
  },
  {
    "text": "and a name tag that said Dennis Richie if you are not familiar with this",
    "start": "45000",
    "end": "50039"
  },
  {
    "text": "guy and many of you may not be he was the inventor of the C programming language he co-invented Unix which means",
    "start": "50039",
    "end": "57600"
  },
  {
    "text": "that he pretty much kickstarted what we're doing here in this industry today and in the process he brought us Decades",
    "start": "57600",
    "end": "65280"
  },
  {
    "text": "of buffer overruns and security violations and cves and countless hours and dollars",
    "start": "65280",
    "end": "72000"
  },
  {
    "text": "lost ripping our Collective hair out trying to figure out what was going on with our",
    "start": "72000",
    "end": "79320"
  },
  {
    "text": "programs that's honestly the biggest thing I remember about that conversation",
    "start": "79320",
    "end": "84960"
  },
  {
    "text": "he was very Charming he was clearly brilliant nice guy great conversationalist",
    "start": "84960",
    "end": "90759"
  },
  {
    "text": "and it was very very difficult to reconcile in my head all the amazing",
    "start": "90759",
    "end": "96880"
  },
  {
    "text": "stuff he'd done and all the incredible pain that had gone along with it so this talk is pretty much about how",
    "start": "96880",
    "end": "104079"
  },
  {
    "text": "we do better and about why that's important I'm starting with C because it",
    "start": "104079",
    "end": "110079"
  },
  {
    "text": "has been massively influential on all the tools that we use today and that",
    "start": "110079",
    "end": "116360"
  },
  {
    "text": "influence should not be understated but it was written for a very different time",
    "start": "116360",
    "end": "122039"
  },
  {
    "text": "when it was written in 1972 the industry believed that programmers could write code that was",
    "start": "122039",
    "end": "128200"
  },
  {
    "text": "correct and that they would not write code that was malicious and we know that both of these things are false at this",
    "start": "128200",
    "end": "134599"
  },
  {
    "text": "point that we as people working in a programming language will make every single mistake the language will allow",
    "start": "134599",
    "end": "141239"
  },
  {
    "text": "us to make eventually and we know that there are some people who are going to write malicious",
    "start": "141239",
    "end": "147640"
  },
  {
    "text": "code that was not the world that C was written in so the end result is that c and C++",
    "start": "147640",
    "end": "155120"
  },
  {
    "text": "are fast but they have no safety in some of you may be thinking oh C+",
    "start": "155120",
    "end": "162920"
  },
  {
    "text": "plus is safer than C no it is not and we'll come back to",
    "start": "162920",
    "end": "168640"
  },
  {
    "text": "that I will fight you there are a bunch of other languages",
    "start": "168800",
    "end": "174080"
  },
  {
    "text": "that make different trade-offs right we have this interpreted languages that tend to be fairly safe",
    "start": "174080",
    "end": "180360"
  },
  {
    "text": "but usually quite slow uh go is kind of in an interesting place all its own where it's fairly safe",
    "start": "180360",
    "end": "188159"
  },
  {
    "text": "and pretty fast but it's interesting to note that at this point the only choice",
    "start": "188159",
    "end": "193599"
  },
  {
    "text": "we have for both very safe and very fast is rest to understand why we need to talk",
    "start": "193599",
    "end": "200280"
  },
  {
    "text": "about pointers we need to talk about ownership we need to talk about lifetimes and we also need to talk a",
    "start": "200280",
    "end": "205640"
  },
  {
    "text": "little bit about static analysis versus Dynamic analysis python down there I",
    "start": "205640",
    "end": "210959"
  },
  {
    "text": "show is less safe than its interpreted siblings because of its type system",
    "start": "210959",
    "end": "216959"
  },
  {
    "text": "everything in Python is dynamically typed those of you who have worked with me in the past know that I'm quite fond",
    "start": "216959",
    "end": "223360"
  },
  {
    "text": "of python for lots of things but the fact of the matter is that the dynamic type system means that it is not",
    "start": "223360",
    "end": "230000"
  },
  {
    "text": "possible to read python source code and know for certain that it is going to",
    "start": "230000",
    "end": "235319"
  },
  {
    "text": "work you have to actually run it to find out if it's going to work and you have to put in a lot of effort to try to make",
    "start": "235319",
    "end": "242079"
  },
  {
    "text": "sure that you follow all of the code paths so that you can know that they will all work this is an example of the kind of",
    "start": "242079",
    "end": "249159"
  },
  {
    "text": "difference where static analysis does a better job because static analysis which",
    "start": "249159",
    "end": "254799"
  },
  {
    "text": "will not work for things like python type checking but status static analysis lets you look at the entirety of the",
    "start": "254799",
    "end": "260519"
  },
  {
    "text": "source code all at once and know for certain that you've covered everything which Dynamic typing cannot do Dynamic",
    "start": "260519",
    "end": "267680"
  },
  {
    "text": "analysis cannot do so that's our first axium for safety static things are better than Dynamic things you would",
    "start": "267680",
    "end": "274960"
  },
  {
    "start": "268000",
    "end": "515000"
  },
  {
    "text": "much rather have the compiler check everything for correctness then have to follow every path and trust that you got",
    "start": "274960",
    "end": "280199"
  },
  {
    "text": "that right that brings us to the",
    "start": "280199",
    "end": "287160"
  },
  {
    "text": "pointer or as I like to call it the root of all",
    "start": "287160",
    "end": "293159"
  },
  {
    "text": "evil conceptually pointers are not all that evil they're just an implementation of the concept of a reference",
    "start": "294199",
    "end": "300520"
  },
  {
    "text": "where you have some chunk of data and you want a way to access it that does not involve referring specifically to",
    "start": "300520",
    "end": "307800"
  },
  {
    "text": "that thing you want something that's a little bit indirect um that's a reference these things underly pretty",
    "start": "307800",
    "end": "315360"
  },
  {
    "text": "much any data structure more advanced than an array we use them all over the place they're very",
    "start": "315360",
    "end": "321400"
  },
  {
    "text": "important uh pointers are the simplest implementation of references where you go oh hey my",
    "start": "321400",
    "end": "328880"
  },
  {
    "text": "datum food lives at this particular address and you take that address like the numerical",
    "start": "328880",
    "end": "334160"
  },
  {
    "text": "value and you say great that's my pointer that's how I refer to Fu this is very simple it's very powerful and it is",
    "start": "334160",
    "end": "340639"
  },
  {
    "text": "extremely dangerous usually people start off",
    "start": "340639",
    "end": "346800"
  },
  {
    "text": "talking about the dangling pointer problem for why pointers are dangerous suppose we have to move Foo for some",
    "start": "346800",
    "end": "351840"
  },
  {
    "text": "reason it changes its address when we move it but the pointer didn't get updated and then when you try",
    "start": "351840",
    "end": "358039"
  },
  {
    "text": "to follow the pointer bad things happen this is the least bad thing that can",
    "start": "358039",
    "end": "363319"
  },
  {
    "text": "happen with pointers uh there's actually such a",
    "start": "363319",
    "end": "368400"
  },
  {
    "text": "thing as a dangling reference not involving pointers at all but you know this is a thing that happens a lot the",
    "start": "368400",
    "end": "375280"
  },
  {
    "text": "worst thing that happens with pointers immediately you run across with the languages like C and C++ where we can do",
    "start": "375280",
    "end": "381240"
  },
  {
    "text": "pointer arithmetic where we get to alter the number the numeric value of the",
    "start": "381240",
    "end": "387080"
  },
  {
    "text": "pointer the whole concept behind pointer arithmetic is that we take advantage of",
    "start": "387080",
    "end": "392400"
  },
  {
    "text": "the fact that memory is laid out in this linear way and then if we have a pointer pointing to one of these values then you",
    "start": "392400",
    "end": "398800"
  },
  {
    "text": "figure oh we should just be able to go and add to that pointer itself not the value it points to add to the pointer",
    "start": "398800",
    "end": "405039"
  },
  {
    "text": "and then it will go point to something different and you can do a bunch of things very quickly with this and uh it",
    "start": "405039",
    "end": "411919"
  },
  {
    "text": "has a couple of huge problems the first one is that your program can scribble all of",
    "start": "411919",
    "end": "417960"
  },
  {
    "text": "memory as soon as you to set the value of the address in the",
    "start": "417960",
    "end": "423800"
  },
  {
    "text": "pointer everything the runtime can do to protect you from yourself goes out the",
    "start": "423800",
    "end": "430400"
  },
  {
    "text": "window because this is an intentional thing that was added to the language you are supposed to be able to go and modify",
    "start": "430400",
    "end": "437360"
  },
  {
    "text": "things at arbitrary addresses in memory and that means that you can make mistakes and stomp on stack frames and",
    "start": "437360",
    "end": "442440"
  },
  {
    "text": "memory management metadata and other executable code sometimes and all this horrible stuff a slightly more subtle",
    "start": "442440",
    "end": "449199"
  },
  {
    "text": "thing is also as soon as you can do this the type system goes out the window as",
    "start": "449199",
    "end": "455280"
  },
  {
    "text": "well because even if our datm there is an integer and we have a pointer that is",
    "start": "455280",
    "end": "460720"
  },
  {
    "text": "typed as an integer pointer there's nothing preventing us from creating another pointer that has the same",
    "start": "460720",
    "end": "466879"
  },
  {
    "text": "numeric value but a different type and then when you go through that second pointer you've just changed the type of",
    "start": "466879",
    "end": "472960"
  },
  {
    "text": "your data as far as the runtime is concerned again this is not something it",
    "start": "472960",
    "end": "478240"
  },
  {
    "text": "can protect against because this is designed into the",
    "start": "478240",
    "end": "483599"
  },
  {
    "text": "language this is also why I say that C++ is not any safer than c c was built to",
    "start": "485080",
    "end": "492039"
  },
  {
    "text": "do this particular operation because when you're writing operating systems which is the thing that c was designed",
    "start": "492039",
    "end": "497680"
  },
  {
    "text": "to do when you're writing operating systems you often need to be able to go and manipulate data structures at",
    "start": "497680",
    "end": "503960"
  },
  {
    "text": "specific places in memory and C++ decided it wanted to be a superet of",
    "start": "503960",
    "end": "509520"
  },
  {
    "text": "C and it had to do everything that c would allow you so even though C++ has smart pointers and stuff The Language by",
    "start": "509520",
    "end": "518039"
  },
  {
    "start": "515000",
    "end": "720000"
  },
  {
    "text": "Design allows you to go and always you use raw pointers everywhere so you can",
    "start": "518039",
    "end": "523279"
  },
  {
    "text": "bypass any safety thing that C++ does and the language has to allow you to do",
    "start": "523279",
    "end": "530760"
  },
  {
    "text": "this another thing that's a little bit interesting about pointers is the concept to null pointers these exist in",
    "start": "535519",
    "end": "541720"
  },
  {
    "text": "languages Beyond C go has null pointers for example um a null pointer is just an",
    "start": "541720",
    "end": "548800"
  },
  {
    "text": "exp explicit pointer to nowhere so that you can explicitly say",
    "start": "548800",
    "end": "554120"
  },
  {
    "text": "that this pointer doesn't point to anything on the face of it this seems like a pretty reasonable thing the",
    "start": "554120",
    "end": "559160"
  },
  {
    "text": "problem is first it's another thing you have to check for at runtime and I'm sure none of us know",
    "start": "559160",
    "end": "564600"
  },
  {
    "text": "programmers who would ever forget to check null pointers at runtime certainly I've never forgotten",
    "start": "564600",
    "end": "570440"
  },
  {
    "text": "that check but the other thing that's a little more subtle about this is that",
    "start": "570440",
    "end": "575880"
  },
  {
    "text": "null is a value it's not a type you can't do static analysis to make sure",
    "start": "575880",
    "end": "581360"
  },
  {
    "text": "that you never D reference a null pointer it's just not a thing that can happen",
    "start": "581360",
    "end": "587760"
  },
  {
    "text": "um so it is much better to use a different system so that you can do",
    "start": "587760",
    "end": "593320"
  },
  {
    "text": "static checking for it I am realizing right now that I forgot to mention a",
    "start": "593320",
    "end": "598640"
  },
  {
    "text": "particular feature and rust that makes this particular thing go away so I'll try to remember to mention that when I get to it sorry I forgot to put it in",
    "start": "598640",
    "end": "605160"
  },
  {
    "text": "the slides um so yeah since you can't to do static checking for null you have to actually run the program and find out if",
    "start": "605160",
    "end": "610279"
  },
  {
    "text": "you hit any null pointers not great we're back to that first axum we're Dynamic is not as safe",
    "start": "610279",
    "end": "616480"
  },
  {
    "text": "as static another interesting bit is that",
    "start": "616480",
    "end": "621920"
  },
  {
    "text": "null gets worse in languages like C and C++ where you can only return one value at a time if you do things like this in",
    "start": "621920",
    "end": "628680"
  },
  {
    "text": "go and and run TR you can just return multiple values which is great if you want to do the same thing in C you have",
    "start": "628680",
    "end": "633760"
  },
  {
    "text": "to introduce a structure and then allocate the structure and put stuff in the thing that you've have allocated and then return a pointer to the thing that",
    "start": "633760",
    "end": "639560"
  },
  {
    "text": "you have just allocated and everybody has to check for null and it can be really bad the fine print down there is",
    "start": "639560",
    "end": "645160"
  },
  {
    "text": "that yes technically you can return structures and see if you actually do it it ends up abusing the stack frame if",
    "start": "645160",
    "end": "650839"
  },
  {
    "text": "you're talking about large things and so people don't do that they tend to use tend to allocate and use",
    "start": "650839",
    "end": "656720"
  },
  {
    "text": "pointers so yeah not great C++ also has the standard Tuple type but guess what",
    "start": "656720",
    "end": "661760"
  },
  {
    "text": "that's allocating stuff under the hood so ultimately that kind of thing gives",
    "start": "661760",
    "end": "669600"
  },
  {
    "text": "you more chances to make mistakes it gives you more ways that you can make mistakes and like I pointed out earlier",
    "start": "669600",
    "end": "676880"
  },
  {
    "text": "we now know that eventually when writing programs we will make every mistake that the language allows us to make so",
    "start": "676880",
    "end": "683920"
  },
  {
    "text": "introducing more ways that the language allows us to make mistakes is not a great idea",
    "start": "683920",
    "end": "691240"
  },
  {
    "text": "second axum with apologies to Richard Bach from whom I stole this line sort of",
    "start": "691680",
    "end": "697720"
  },
  {
    "text": "in order to code freely and easily you must first give up",
    "start": "697720",
    "end": "703040"
  },
  {
    "text": "pointers I should probably also point out yes those of you who are already rest stations are probably thinking but",
    "start": "703399",
    "end": "710079"
  },
  {
    "text": "wait rest has pointers no rusts normal pointers are actually references and unsafe pointers are unsafe so we don't",
    "start": "710079",
    "end": "716279"
  },
  {
    "text": "have to talk about them right now but might come back to that if we have time let's talk a little bit about",
    "start": "716279",
    "end": "722920"
  },
  {
    "start": "720000",
    "end": "824000"
  },
  {
    "text": "ownership uh ownership is a little bit of an abstract sort of thing it refers",
    "start": "722920",
    "end": "729200"
  },
  {
    "text": "to who is it really refers to who is responsible for dealing with a particular piece of data and in",
    "start": "729200",
    "end": "738360"
  },
  {
    "text": "languages where you have to do Dynamic me or have to do manual memory management excuse me say that three",
    "start": "738360",
    "end": "743600"
  },
  {
    "text": "times fast then ownership is often described as who has to free the thing",
    "start": "743600",
    "end": "748639"
  },
  {
    "text": "when you're done with it a better way to look at it is who gets to decide you're done with it and",
    "start": "748639",
    "end": "755519"
  },
  {
    "text": "this is implicit in almost all of the languages that we use uh I don't think I",
    "start": "755519",
    "end": "761560"
  },
  {
    "text": "know of a language other than rust that talks explicitly about ownership",
    "start": "761560",
    "end": "767240"
  },
  {
    "text": "Objective C kind of kind of weasles in on it and you know",
    "start": "767240",
    "end": "772440"
  },
  {
    "text": "stuff like that um some of the automatic reference check offer automatic",
    "start": "772440",
    "end": "777560"
  },
  {
    "text": "reference counting stuff touches on it but I don't know of a language other than rust that explicitly talks about",
    "start": "777560",
    "end": "783240"
  },
  {
    "text": "ownership in lifetimes ownership is explicit in rest the compiler checks it the compiler",
    "start": "783240",
    "end": "789680"
  },
  {
    "text": "makes certain that you have not gotten it wrong uh this is a quote from the Wikipedia page on Rust every value must",
    "start": "789680",
    "end": "797160"
  },
  {
    "text": "be attached to a variable called its owner every value must have exactly one owner we're going to come back to that",
    "start": "797160",
    "end": "802959"
  },
  {
    "text": "in a minute because this was one of the things that caused me a fair amount of pain while messing with some Rust code",
    "start": "802959",
    "end": "808880"
  },
  {
    "text": "not too long well I guess it wasn't that long ago um but the other bit is that",
    "start": "808880",
    "end": "814079"
  },
  {
    "text": "rust is explicit about when ownership gets transferred both via assignment but",
    "start": "814079",
    "end": "819720"
  },
  {
    "text": "also by making a function call so if we do this in",
    "start": "819720",
    "end": "826959"
  },
  {
    "start": "824000",
    "end": "1320000"
  },
  {
    "text": "go this program will run fine and it will print hello world",
    "start": "826959",
    "end": "833040"
  },
  {
    "text": "twice if we do exactly the same thing in Rust it will not compile and the reason",
    "start": "834160",
    "end": "840000"
  },
  {
    "text": "is that when you call printer s on the line above the compilation error that",
    "start": "840000",
    "end": "845440"
  },
  {
    "text": "transfers ownership away from Main and once main doesn't own that s variable",
    "start": "845440",
    "end": "850600"
  },
  {
    "text": "anymore you don't get to do anything else with it so the compiler says Nope you can't do that cut it",
    "start": "850600",
    "end": "857759"
  },
  {
    "text": "out the compiler errors I'd like to take a moment as well to point out because the compiler errors and rust are",
    "start": "858320",
    "end": "864279"
  },
  {
    "text": "actually useful this one going hey look you have made a mistake or ownership and this is",
    "start": "864279",
    "end": "870519"
  },
  {
    "text": "what you might do about it and here's where to go for more information I'm a huge fan of this more languages should",
    "start": "870519",
    "end": "876120"
  },
  {
    "text": "really do this um it turns out to be really hard which is why more languages don't do",
    "start": "876120",
    "end": "882560"
  },
  {
    "text": "it the easiest way to solve this problem is instead of passing the string itself",
    "start": "882560",
    "end": "887720"
  },
  {
    "text": "pass a reference to the string and then ownership doesn't transfer and then you can do it twice and everything is great",
    "start": "887720",
    "end": "892959"
  },
  {
    "text": "uh I should point out that the compiler is still checking to make sure that you",
    "start": "892959",
    "end": "898519"
  },
  {
    "text": "haven't done horrible things with references which we'll get you shortly and the compiler also is checking to",
    "start": "898519",
    "end": "904320"
  },
  {
    "text": "make sure that you don't try to use an immutable reference to modify something because it's",
    "start": "904320",
    "end": "909800"
  },
  {
    "text": "immutable so there's another large class of Errors where the compiler will",
    "start": "909800",
    "end": "915279"
  },
  {
    "text": "protect you from making these",
    "start": "915279",
    "end": "918440"
  },
  {
    "text": "mistakes here's a more subtle example that deals with ownership oh man I missed an opportunity",
    "start": "920680",
    "end": "927320"
  },
  {
    "text": "I should have left off the explanation of what was wrong and asked you to guess what it was if you run this go code it",
    "start": "927320",
    "end": "933639"
  },
  {
    "text": "will say found one found two found three all the way up to found five and then it will print the array at the end and it",
    "start": "933639",
    "end": "939319"
  },
  {
    "text": "will go one through six instead of one through five because this go code",
    "start": "939319",
    "end": "944639"
  },
  {
    "text": "modifies our array while we're in the middle of uh iterating over it basically",
    "start": "944639",
    "end": "950120"
  },
  {
    "text": "everybody knows that this is a bad idea and you shouldn't do this but even though it's a bad idea and",
    "start": "950120",
    "end": "956720"
  },
  {
    "text": "you shouldn't do it the go compiler will not protect you from that error because it can't the rest compiler will uh the rest",
    "start": "956720",
    "end": "964800"
  },
  {
    "text": "compiler on that line that says error will come back and say no calling",
    "start": "964800",
    "end": "970240"
  },
  {
    "text": "numbers. push here requires a mutable reference and the four Loop already",
    "start": "970240",
    "end": "975880"
  },
  {
    "text": "grabbed an immutable reference and you don't get to do those two things at the same time so you have to go through and",
    "start": "975880",
    "end": "981240"
  },
  {
    "text": "restructure this code instead of just falling quietly into this",
    "start": "981240",
    "end": "986959"
  },
  {
    "text": "trap and again I I want to emphasize this is a compile time check if you manage to somehow have a",
    "start": "987399",
    "end": "995600"
  },
  {
    "text": "mutable reference in one function and then try to use it as an immutable reference in another function then the",
    "start": "995600",
    "end": "1000920"
  },
  {
    "text": "compiler will still find it uh it actually turns out to be fairly",
    "start": "1000920",
    "end": "1006240"
  },
  {
    "text": "difficult to write a concise example of the compiler doing that across multiple functions so I didn't do",
    "start": "1006240",
    "end": "1013199"
  },
  {
    "text": "it third axium which is a thing that R kind of does a lot of is requiring you",
    "start": "1014399",
    "end": "1022160"
  },
  {
    "text": "to be explicit making things explicit is harder up front you have to go to more work it will cost you more effort but",
    "start": "1022160",
    "end": "1029079"
  },
  {
    "text": "then it will pay dividends for the rest of your life and possibly more importantly it will pay dividends for the rest of your code's",
    "start": "1029079",
    "end": "1035438"
  },
  {
    "text": "life it would be nice if we outlived all our code but uh you know who",
    "start": "1035439",
    "end": "1041879"
  },
  {
    "text": "knows all right let's talk a little bit about lifetimes",
    "start": "1044079",
    "end": "1050840"
  },
  {
    "text": "this is another concept that's implicit in a lot of languages but explicit in",
    "start": "1052400",
    "end": "1059600"
  },
  {
    "text": "Rust this go code will actually run even though up there in the create",
    "start": "1060559",
    "end": "1068960"
  },
  {
    "text": "pointer function we are allocating and creating a local variable and then we",
    "start": "1068960",
    "end": "1074400"
  },
  {
    "text": "are returning a reference to that local variable before the function returns",
    "start": "1074400",
    "end": "1079720"
  },
  {
    "text": "so we've now returned a reference to a thing that has not really it shouldn't",
    "start": "1079720",
    "end": "1085480"
  },
  {
    "text": "really exist at that point but that works okay in go because go has a garbage collector and the garbage",
    "start": "1085480",
    "end": "1090760"
  },
  {
    "text": "collector will recognize that there's an outstanding reference to our local variable V and so the garbage collector",
    "start": "1090760",
    "end": "1097120"
  },
  {
    "text": "will keep it around just in case you're still using that reference if we try the same thing in C",
    "start": "1097120",
    "end": "1104600"
  },
  {
    "text": "it will compile but it will not work bonus points anybody have guesses",
    "start": "1104600",
    "end": "1109919"
  },
  {
    "text": "for what this will actually do if you run",
    "start": "1109919",
    "end": "1113480"
  },
  {
    "text": "it I guess I should probably be happy that nobody's been doing ANC that they want to Hazard a guess here um I was",
    "start": "1115000",
    "end": "1122039"
  },
  {
    "text": "expecting this to crash when I ran it actually it turns out it doesn't crash it just prints 42 the first time and",
    "start": "1122039",
    "end": "1128240"
  },
  {
    "text": "then prints garbage the second call um the what's actually happening here is",
    "start": "1128240",
    "end": "1134200"
  },
  {
    "text": "that when you call create pointer then a stack frame gets allocated that includes space for V it then returns a pointer to",
    "start": "1134200",
    "end": "1142159"
  },
  {
    "text": "that location on the stack which is not active anymore in the program but the",
    "start": "1142159",
    "end": "1147640"
  },
  {
    "text": "memory is still there and unless you get really really unlucky and cross the page boundary at exactly the same time that",
    "start": "1147640",
    "end": "1153360"
  },
  {
    "text": "the operating system wanted to release that page you'll still be able to access it uh but then the first call to prf",
    "start": "1153360",
    "end": "1160600"
  },
  {
    "text": "will copy the 42 out of the pointer push it onto the stack frame for the printf",
    "start": "1160600",
    "end": "1167720"
  },
  {
    "text": "call in the process smashing the original value of v and then the second",
    "start": "1167720",
    "end": "1173559"
  },
  {
    "text": "print F will dreference the pointer to the same spot on the stack that V used to be but now that's just some garbage",
    "start": "1173559",
    "end": "1179960"
  },
  {
    "text": "from the called to perf the first time isn't it fun when we get to deal",
    "start": "1179960",
    "end": "1185600"
  },
  {
    "text": "with pointers don't answer that I don't want to know if you think it's",
    "start": "1185600",
    "end": "1192039"
  },
  {
    "text": "fun there we go rust will detect that this sort of thing is wrong and will refuse to",
    "start": "1193120",
    "end": "1200200"
  },
  {
    "text": "compile because it will come back and demand that you just don't get to do that you",
    "start": "1200200",
    "end": "1206240"
  },
  {
    "text": "have to explicitly Mark the lifetime of your variable so that rust knows what to",
    "start": "1206240",
    "end": "1212000"
  },
  {
    "text": "do with it in the second example here we've used that static uh there we go",
    "start": "1212000",
    "end": "1219520"
  },
  {
    "text": "we've used that static lifetime marker to tell the compiler hey create value is",
    "start": "1219520",
    "end": "1224840"
  },
  {
    "text": "going to return something that is required to live for the entire life of the program and so this is safe this",
    "start": "1224840",
    "end": "1231760"
  },
  {
    "text": "will",
    "start": "1231760",
    "end": "1234000"
  },
  {
    "text": "work here's a much more subtle example of a lifetime bug this one from",
    "start": "1239240",
    "end": "1246640"
  },
  {
    "text": "C++ um when I run this on my machine it compiles but it does not say hello world",
    "start": "1246760",
    "end": "1253799"
  },
  {
    "text": "it just says hello well okay it says hello comma",
    "start": "1253799",
    "end": "1260600"
  },
  {
    "text": "again anybody want to raise a hand haard a guess for what's actually going on",
    "start": "1260799",
    "end": "1266320"
  },
  {
    "text": "here nobody man fear of commitment so what's actually happening",
    "start": "1271880",
    "end": "1278799"
  },
  {
    "text": "here is that here's where the error is that make Hello World",
    "start": "1278799",
    "end": "1285279"
  },
  {
    "text": "function by the time it Returns the world string goes out of scope and is destroyed and it so happens that at",
    "start": "1285279",
    "end": "1292320"
  },
  {
    "text": "least with my C++ compiler when it gets destroyed the compiler is at least polite enough to go and stick a zero in",
    "start": "1292320",
    "end": "1298400"
  },
  {
    "text": "the first bite and then it ends up not crashing but that's kind of implementation specific that's not a",
    "start": "1298400",
    "end": "1305600"
  },
  {
    "text": "thing you can rely on if you try this in Rust it will not",
    "start": "1305600",
    "end": "1313200"
  },
  {
    "text": "compile it will come back and say no no no you have to be explicit about the lifetime of this string in your greeter",
    "start": "1313200",
    "end": "1319640"
  },
  {
    "text": "structure and so to make it work correct we have to sprinkle these",
    "start": "1319640",
    "end": "1325400"
  },
  {
    "start": "1320000",
    "end": "1485000"
  },
  {
    "text": "lifetime specifiers around so that the compiler knows how long the thing has to",
    "start": "1325400",
    "end": "1330559"
  },
  {
    "text": "live and so that it knows that it can actually rely on that thing coming back",
    "start": "1330559",
    "end": "1336400"
  },
  {
    "text": "this example will compile and run and correctly say hello",
    "start": "1336400",
    "end": "1341520"
  },
  {
    "text": "world this is probably as good a time as I need to mention the thing in r that I forgot",
    "start": "1343960",
    "end": "1349559"
  },
  {
    "text": "to put on the slide which is instead of null pointers rust has a concept called an option that can have either a value",
    "start": "1349559",
    "end": "1356840"
  },
  {
    "text": "that is specified as some with a real value or none and so uh the compiler can",
    "start": "1356840",
    "end": "1362919"
  },
  {
    "text": "keep track of that because it's a type so if you get an option back you are required to do the right things to make",
    "start": "1362919",
    "end": "1369400"
  },
  {
    "text": "sure that it will work properly rather than just hopefully forgetting or",
    "start": "1369400",
    "end": "1374440"
  },
  {
    "text": "hopefully not forgetting to check for null and again all of these things get",
    "start": "1374440",
    "end": "1380120"
  },
  {
    "text": "checked at compile time across the entire program on the one hand this is great",
    "start": "1380120",
    "end": "1385520"
  },
  {
    "text": "because it prevents you as a programmer from making a mistake but on the other hand it's great because it means the",
    "start": "1385520",
    "end": "1391760"
  },
  {
    "text": "runtime gets to go very very fast because the compiler has already done all the hard work this is a good thing",
    "start": "1391760",
    "end": "1399799"
  },
  {
    "text": "it also means that rust gets to get rid of both n pointers and the garbage collector which is pretty cool because",
    "start": "1399799",
    "end": "1406720"
  },
  {
    "text": "as soon as you get rid of the garbage collector you do not have to deal with unpredictable delays during which the garbage collector is collecting the",
    "start": "1406720",
    "end": "1413279"
  },
  {
    "text": "garbage it gets to just run quickly and",
    "start": "1413279",
    "end": "1417880"
  },
  {
    "text": "predictably there's another Axiom there if you make lifetimes explicit in particular you get to get rid of pointers and you get to get rid of the",
    "start": "1420320",
    "end": "1426400"
  },
  {
    "text": "garbage",
    "start": "1426400",
    "end": "1428679"
  },
  {
    "text": "collector so all of this is why I stick rust alone by itself up in the very fast",
    "start": "1431600",
    "end": "1437799"
  },
  {
    "text": "and very safe category where we don't have null pointers we don't have manual memory management we don't have dangling",
    "start": "1437799",
    "end": "1443720"
  },
  {
    "text": "pointers we don't have garbage collector unpredictability we don't have data races I didn't really talk about that",
    "start": "1443720",
    "end": "1448760"
  },
  {
    "text": "very much but the rust compiler can detect when you are trying to do things like modify the same piece of data from",
    "start": "1448760",
    "end": "1454679"
  },
  {
    "text": "multiple asynchronous things at the same time and then refuse to let you do that which is",
    "start": "1454679",
    "end": "1461679"
  },
  {
    "text": "amazing there is absolutely a learning curve for all this though all those things that I was talking about that you",
    "start": "1462640",
    "end": "1469000"
  },
  {
    "text": "have to be explicit about in Rust that you don't have to be explicit about in other languages yeah you have to learn how to",
    "start": "1469000",
    "end": "1475399"
  },
  {
    "text": "do that it takes some doing it's a little weird in actually it's a lot weird in the beginning but you know it's",
    "start": "1475399",
    "end": "1481640"
  },
  {
    "text": "okay the learning curve is worth it in particular for the cloud native",
    "start": "1481640",
    "end": "1487440"
  },
  {
    "start": "1485000",
    "end": "1601000"
  },
  {
    "text": "world at this point I think it's fair to say that the ecosystem is ready for the things that we're doing with Cloud",
    "start": "1487440",
    "end": "1492600"
  },
  {
    "text": "native um there are I called these out as crates you know R packages that get",
    "start": "1492600",
    "end": "1500120"
  },
  {
    "text": "used a lot in the cloud native world that are really really helpful Tokyo for asynchronous hyper somebody should",
    "start": "1500120",
    "end": "1507120"
  },
  {
    "text": "donate a logo to the hyper project by the way um hyper is a very fast and correct HTTP",
    "start": "1507120",
    "end": "1514320"
  },
  {
    "text": "Library there are other things built on top of it that are probably worth looking into if you want a very",
    "start": "1514320",
    "end": "1519440"
  },
  {
    "text": "userfriendly HTTP library but all of these work really nicely together to",
    "start": "1519440",
    "end": "1524600"
  },
  {
    "text": "give you really you know pretty elegant asynchronous Network protocol and",
    "start": "1524600",
    "end": "1531399"
  },
  {
    "text": "kubernetes stuff kubs is uh the main set of kubernetes bindings for",
    "start": "1531399",
    "end": "1539640"
  },
  {
    "text": "rust kubert is a thing that uh one of the Linker maintainers wrote that sort",
    "start": "1539640",
    "end": "1545960"
  },
  {
    "text": "of a more opinionated controller runtime based on based on cubars so kubert is the thing that the",
    "start": "1545960",
    "end": "1553559"
  },
  {
    "text": "linkerd rust controllers are based on all of these things have made",
    "start": "1553559",
    "end": "1559600"
  },
  {
    "text": "dramatic Leaps and Bounds since we started at Linker in 2018 uh our first rust controller didn't",
    "start": "1559600",
    "end": "1567159"
  },
  {
    "text": "come along until 2022 with you know more support for kubernetes bindings and such",
    "start": "1567159",
    "end": "1572720"
  },
  {
    "text": "uh anybody starting today with rust congratulations you get to benefit from our suffering at voyet enjoy because man",
    "start": "1572720",
    "end": "1580200"
  },
  {
    "text": "there was a lot of suffering back then uh earlier today my colleague mate actually gave a talk about the specifics",
    "start": "1580200",
    "end": "1586559"
  },
  {
    "text": "of writing kubernetes controllers in Rust if you were not able to make that one I would encourage you to go and",
    "start": "1586559",
    "end": "1592960"
  },
  {
    "text": "check it out on video if you're interested in this sort of thing if you're in this room you're probably interested in this sort of thing",
    "start": "1592960",
    "end": "1600760"
  },
  {
    "start": "1601000",
    "end": "2030000"
  },
  {
    "text": "so finally one more thing to wrap all this",
    "start": "1601360",
    "end": "1608519"
  },
  {
    "text": "up backing up again to the mid 90s I was at I think it was the unck security",
    "start": "1608559",
    "end": "1614120"
  },
  {
    "text": "conference I ran across a talk by a guy named Marcus Ram who did security for white white house.gov in the beginning",
    "start": "1614120",
    "end": "1619960"
  },
  {
    "text": "and he pointed out that in the 1950s in the United States we had cars that could do 100 milph 160 km per",
    "start": "1619960",
    "end": "1627760"
  },
  {
    "text": "hour but we didn't mandate seat belts until the 1980s 30 years",
    "start": "1627760",
    "end": "1634240"
  },
  {
    "text": "later which means that there was an entire generation of human beings who lived just believing that",
    "start": "1634240",
    "end": "1642399"
  },
  {
    "text": "well yeah you get into an accident and you die that's just the way it goes that was accepted that was a normal",
    "start": "1642399",
    "end": "1651480"
  },
  {
    "text": "thing we've been writing unsafe code with unsafe tools now for more than 50",
    "start": "1651480",
    "end": "1658919"
  },
  {
    "text": "years C came out in 1972 that's a generation and a half of",
    "start": "1658919",
    "end": "1667960"
  },
  {
    "text": "humans I would be willing to bet that it spans more than the career of everyone in this",
    "start": "1667960",
    "end": "1674559"
  },
  {
    "text": "room and for all that time it's just being accepted that yeah eventually we make mistakes and get",
    "start": "1674559",
    "end": "1680960"
  },
  {
    "text": "horrible security problems and that's just the way of the world this is not",
    "start": "1680960",
    "end": "1686440"
  },
  {
    "text": "okay we do not write software that does nothing we don't write software just for",
    "start": "1687559",
    "end": "1692880"
  },
  {
    "text": "the sake of writing software we have a purpose in mind for it a lot of the infrastructure that we write in this",
    "start": "1692880",
    "end": "1698760"
  },
  {
    "text": "world is handling things that are very critical picking on Linker D for a",
    "start": "1698760",
    "end": "1704159"
  },
  {
    "text": "minute linkerd gets used in emergency dispatch call centers in the US and probably elsewhere we get used in",
    "start": "1704159",
    "end": "1710080"
  },
  {
    "text": "healthcare organizations where patient data is wrangling around and at risk we",
    "start": "1710080",
    "end": "1716159"
  },
  {
    "text": "get used in financial organizations where your money is at",
    "start": "1716159",
    "end": "1721200"
  },
  {
    "text": "risk all of the stuff that we're doing here people rely on it it has to be safe",
    "start": "1721320",
    "end": "1727880"
  },
  {
    "text": "it has to be reliable it has to be fast and that order is deliberate Safety",
    "start": "1727880",
    "end": "1734440"
  },
  {
    "text": "First no matter what we do right lighting safe software is really hard so",
    "start": "1735799",
    "end": "1740919"
  },
  {
    "text": "we should be using the tools that make it the most easy it can be even though that's not going to be very easy there's",
    "start": "1740919",
    "end": "1747559"
  },
  {
    "text": "no point in making it harder than it has to be in other words if you want to remember just one thing from this talk",
    "start": "1747559",
    "end": "1753760"
  },
  {
    "text": "it's that it's time to put on your seat Bel throw away this unsafe crap and",
    "start": "1753760",
    "end": "1760240"
  },
  {
    "text": "write and rest thank",
    "start": "1760240",
    "end": "1763559"
  },
  {
    "text": "you",
    "start": "1767039",
    "end": "1770039"
  },
  {
    "text": "I think we have a couple minutes for questions if anybody has any or I'll be up after um do we have a mic for",
    "start": "1773159",
    "end": "1779519"
  },
  {
    "text": "questions in the",
    "start": "1779519",
    "end": "1782080"
  },
  {
    "text": "audience thank you so I really enjoyed this uh marketing for",
    "start": "1788519",
    "end": "1795080"
  },
  {
    "text": "rust it was really fair to say that there is a fairly High um learning curve",
    "start": "1795080",
    "end": "1802240"
  },
  {
    "text": "um as a go developer who has now spent quite some time with rust there's",
    "start": "1802240",
    "end": "1807440"
  },
  {
    "text": "another thing what do you think about compile time so the time it needs to compile your rust",
    "start": "1807440",
    "end": "1813760"
  },
  {
    "text": "program controversial opinion possibly I don't care um and I'm being slightly sned",
    "start": "1813760",
    "end": "1823200"
  },
  {
    "text": "there but only slightly um",
    "start": "1823200",
    "end": "1829519"
  },
  {
    "text": "on the one hand I've worked with projects that literally took more than 24 hours to compile so basically",
    "start": "1829519",
    "end": "1836840"
  },
  {
    "text": "everything we do in this world is great um but what I also find is that rust seems",
    "start": "1836840",
    "end": "1844840"
  },
  {
    "text": "to do a pretty good job for me personally at least of not rebuilding",
    "start": "1844840",
    "end": "1850200"
  },
  {
    "text": "the world and redownloading the internet and things like that so when I'm doing development in Rust and trying to",
    "start": "1850200",
    "end": "1856279"
  },
  {
    "text": "iterate fairly quickly it's seems to work out okay and if I'm talking about I'm going to go and release something",
    "start": "1856279",
    "end": "1862760"
  },
  {
    "text": "and I'm running it in CI whatever I don't really care all that much so I guess the short answer is that",
    "start": "1862760",
    "end": "1869080"
  },
  {
    "text": "is that in my experience it has been good enough not perfect but good enough",
    "start": "1869080",
    "end": "1874720"
  },
  {
    "text": "does that answer the question sure yeah when go does not have to download",
    "start": "1874720",
    "end": "1882240"
  },
  {
    "text": "the internet I think go is faster probably but it's not enough to make a big difference for me",
    "start": "1882240",
    "end": "1889200"
  },
  {
    "text": "also go downloads the internet a lot it's really annoying I think there was somebody over",
    "start": "1889200",
    "end": "1894639"
  },
  {
    "text": "here yeah yeah I um yeah thank you on the refresher for uh yeah pointers and",
    "start": "1894639",
    "end": "1900240"
  },
  {
    "text": "their challenges um I mean there are already like hundreds of projects in the cncf landscape are you aware of um any",
    "start": "1900240",
    "end": "1907679"
  },
  {
    "text": "project that uh in hindsight would have uh go better with rust or other way",
    "start": "1907679",
    "end": "1912919"
  },
  {
    "text": "around are there any project where you would consider a rewrite and rust",
    "start": "1912919",
    "end": "1918639"
  },
  {
    "text": "maybe not you personally but rewrites are hard um so let me take those two",
    "start": "1918639",
    "end": "1924600"
  },
  {
    "text": "questions separately are there any projects that in hindsight might have thought rust was better um there's",
    "start": "1924600",
    "end": "1931799"
  },
  {
    "text": "actually one I know of right now BL Blick which is I believe going to be Rewritten in",
    "start": "1931799",
    "end": "1939200"
  },
  {
    "text": "Rust so what Shane says is that they originally wrote the data plane in C oh dear God um and then rewrote that in",
    "start": "1943639",
    "end": "1951039"
  },
  {
    "text": "Rust and then had the control plane go and now the whole thing is going to be in Rust um I congratulations Shane",
    "start": "1951039",
    "end": "1957360"
  },
  {
    "text": "that's literally the first Cloud native infrastructure project I've heard of using C that's wow uh linkerd also",
    "start": "1957360",
    "end": "1964799"
  },
  {
    "text": "linkerd version one was written in Scala for the most part and then linkerd version two the data planes in Rust the",
    "start": "1964799",
    "end": "1971360"
  },
  {
    "text": "control plane had go and the control plane is making its way to rest as well um Linker did this",
    "start": "1971360",
    "end": "1980240"
  },
  {
    "text": "by taking pieces that needed to be created new and doing them in Rust rather than going back and rewriting the",
    "start": "1980240",
    "end": "1986600"
  },
  {
    "text": "world all the time so the second part of that would be rewrites rewrites are hard",
    "start": "1986600",
    "end": "1991960"
  },
  {
    "text": "rewrites are expensive rewrites mostly are a question of trading an existing known set of bugs for a different set of",
    "start": "1991960",
    "end": "1999039"
  },
  {
    "text": "bugs that might be unknown and so I would tend to caution people about rewrites in general but you know yeah",
    "start": "1999039",
    "end": "2005559"
  },
  {
    "text": "maybe there's a way you can start doing new work in Rust and uh do the migration that way anyone",
    "start": "2005559",
    "end": "2013720"
  },
  {
    "text": "else going once going twice deliberately ignoring Shane trying to cause",
    "start": "2016240",
    "end": "2022880"
  },
  {
    "text": "trouble uh all right thank you very much I appreciate",
    "start": "2022880",
    "end": "2027760"
  },
  {
    "text": "it",
    "start": "2029600",
    "end": "2032600"
  }
]