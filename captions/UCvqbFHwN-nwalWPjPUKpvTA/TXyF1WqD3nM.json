[
  {
    "text": "[Music]",
    "start": "5490",
    "end": "13630"
  },
  {
    "text": "is a software engineer at Red Hat Who currently works on developing scalable programs for Red Hat openshift container",
    "start": "14420",
    "end": "21600"
  },
  {
    "text": "platform chirag is a software engineer at Red Hat working with openshift customer focused",
    "start": "21600",
    "end": "26699"
  },
  {
    "text": "engineering team on various things related to The openshift Container platform welcome to you guys over to you",
    "start": "26699",
    "end": "32220"
  },
  {
    "text": "hello everyone good afternoon thanks for joining here today for this talk",
    "start": "32220",
    "end": "38160"
  },
  {
    "text": "um I hope you guys have a great lunch I have I like the food",
    "start": "38160",
    "end": "43680"
  },
  {
    "text": "so my name is join me with my friend and colleague",
    "start": "43680",
    "end": "49140"
  },
  {
    "text": "swarup ghost we both are working at red hat at software Engineers we basically",
    "start": "49140",
    "end": "55199"
  },
  {
    "text": "work in openshift engineering team so today we are going to discuss about",
    "start": "55199",
    "end": "60420"
  },
  {
    "text": "encrypting secrets in kubernetes cluster using KMS okay so before I go too deep into the",
    "start": "60420",
    "end": "68280"
  },
  {
    "text": "discussion let me ask you a couple of questions so how many of you guys are using kubernetes Secret",
    "start": "68280",
    "end": "74939"
  },
  {
    "text": "I hope most of you write okay how many of you are using in in a production",
    "start": "74939",
    "end": "80759"
  },
  {
    "text": "cluster a couple of you um are you managing your secrets",
    "start": "80759",
    "end": "87659"
  },
  {
    "text": "securely in the production cluster or ever come across questions like how can I securely manage my secrets whether",
    "start": "87659",
    "end": "95100"
  },
  {
    "text": "my secrets are secure or not if you ever come across these questions I hope this talk can help you understand",
    "start": "95100",
    "end": "102540"
  },
  {
    "text": "uh bits and pieces of that so without a further Ado let's get started",
    "start": "102540",
    "end": "108060"
  },
  {
    "text": "so first I will start with some basics of kubernetes secret so",
    "start": "108060",
    "end": "113759"
  },
  {
    "text": "so anything that is sensitive uh be it credential your username password token",
    "start": "113759",
    "end": "120180"
  },
  {
    "text": "API keys see if you wanted to use and store such kind of sensitive data inside your",
    "start": "120180",
    "end": "126060"
  },
  {
    "text": "kubernetes cluster then kubernetes has this awesome mechanism of kubernetes Secrets",
    "start": "126060",
    "end": "132500"
  },
  {
    "text": "where you do not have to include your Cuban you do not have to include any of",
    "start": "132500",
    "end": "138060"
  },
  {
    "text": "your sensitive data directly inside your container images rather you can reference this Secrets during runtime",
    "start": "138060",
    "end": "145099"
  },
  {
    "text": "inside your container be it as an environment variable or you can use any",
    "start": "145099",
    "end": "151500"
  },
  {
    "text": "file system Mount and you can mount your Cuban identity Secrets directly to your",
    "start": "151500",
    "end": "156599"
  },
  {
    "text": "containers at runtime so this is the advantage of using kubernetes secret so whenever you try to",
    "start": "156599",
    "end": "163019"
  },
  {
    "text": "create any secret what happens is that your API server gets the request it",
    "start": "163019",
    "end": "168840"
  },
  {
    "text": "reads that request and store your secret as a key value pair inside its database",
    "start": "168840",
    "end": "174000"
  },
  {
    "text": "that is SCD so inside hcd all your secrets are getting stored as a key value pair",
    "start": "174000",
    "end": "180120"
  },
  {
    "text": "so with this setup I hope everyone is happy here like your API server is Happy",
    "start": "180120",
    "end": "185819"
  },
  {
    "text": "it has stored your secrets inside hcd your container is happy because it is getting all the secrets from there you",
    "start": "185819",
    "end": "192540"
  },
  {
    "text": "are also happy do you feel like there is some problem with this setup I feel there it is there is some",
    "start": "192540",
    "end": "199500"
  },
  {
    "text": "security problem with this default setup because by default kubernetes store all",
    "start": "199500",
    "end": "205800"
  },
  {
    "text": "the secrets as unencrypted format inside the hcd database so if you try to visualize what is there",
    "start": "205800",
    "end": "212400"
  },
  {
    "text": "inside your hcd database using some STD CTL tool you will get to know that all",
    "start": "212400",
    "end": "219000"
  },
  {
    "text": "the secrets inside it are getting stored as a print test format they are not encrypted okay",
    "start": "219000",
    "end": "226080"
  },
  {
    "text": "that is the default implementation that kubernetes has so if any attacker by any chance get to",
    "start": "226080",
    "end": "234780"
  },
  {
    "text": "get get the access of your hcd database they can basically",
    "start": "234780",
    "end": "240900"
  },
  {
    "text": "gain all the sensitive data that is present inside it and they can happily",
    "start": "240900",
    "end": "245940"
  },
  {
    "text": "create a backup of your essay database and walk away with all the sensitive data that is present inside that so all",
    "start": "245940",
    "end": "252780"
  },
  {
    "text": "your sensitive data all your username password be it anything get compromised",
    "start": "252780",
    "end": "258720"
  },
  {
    "text": "or can get leaked with the default implementation so that is that is the problem of the",
    "start": "258720",
    "end": "265500"
  },
  {
    "text": "default implementation of kubernetes that secrets are not encrypted by",
    "start": "265500",
    "end": "270900"
  },
  {
    "text": "default so what is the solution for this problem I hope you might have guessed it right",
    "start": "270900",
    "end": "276780"
  },
  {
    "text": "looking at the picture at the right hand side that you need to encrypt your secrets at rest inside the HCA database",
    "start": "276780",
    "end": "284699"
  },
  {
    "text": "okay now if you search kubernetes documentation that how can I encrypt my",
    "start": "284699",
    "end": "292979"
  },
  {
    "text": "secrets you will land this page and you will see kubernetes is giving",
    "start": "292979",
    "end": "298740"
  },
  {
    "text": "different types of encryption providers like AES CBC asgcm KMS V1 V2 there are",
    "start": "298740",
    "end": "305040"
  },
  {
    "text": "quite a few these encryption providers are basically classified into two types one is called",
    "start": "305040",
    "end": "311940"
  },
  {
    "text": "as local encryption provider and another one is called as remote or external",
    "start": "311940",
    "end": "317460"
  },
  {
    "text": "encryption provider I will I'll go a bit deep into this topics",
    "start": "317460",
    "end": "323400"
  },
  {
    "text": "first let's discuss about local encryption provider",
    "start": "323400",
    "end": "328440"
  },
  {
    "text": "so um in order to use any encryption provider you have to use something called as",
    "start": "328440",
    "end": "335460"
  },
  {
    "text": "encryption config okay so this is a configuration yaml",
    "start": "335460",
    "end": "340740"
  },
  {
    "text": "that basically sits inside the API server and it instructs the API server",
    "start": "340740",
    "end": "346560"
  },
  {
    "text": "how to encrypt any Secret how it does is that you need to add this",
    "start": "346560",
    "end": "352320"
  },
  {
    "text": "encryption configuration yaml inside the sa database and you have to write all",
    "start": "352320",
    "end": "358139"
  },
  {
    "text": "the configurations like which provider you wanted to use so for local encryption you can choose between AES",
    "start": "358139",
    "end": "364919"
  },
  {
    "text": "GCM aacbc secret box doesn't matter which one you are picking so along with that provider name you",
    "start": "364919",
    "end": "372419"
  },
  {
    "text": "have to give keys so these keys are basically used by the API server to",
    "start": "372419",
    "end": "379800"
  },
  {
    "text": "encrypt all the secrets so ah now what happens when you do Cube",
    "start": "379800",
    "end": "385500"
  },
  {
    "text": "CTL create secret your API server reads this encrypts and configures in yaml it",
    "start": "385500",
    "end": "391199"
  },
  {
    "text": "uses that encryption key that is basically present inside that configuration yaml and stores your",
    "start": "391199",
    "end": "397440"
  },
  {
    "text": "secret as encrypted format inside the hcd database okay now",
    "start": "397440",
    "end": "403800"
  },
  {
    "text": "during decryption or when you do Cube CTL get secret the reverse process happened your API server get the",
    "start": "403800",
    "end": "411979"
  },
  {
    "text": "encrypted secret from the HCA database uses the same encryption key that is",
    "start": "411979",
    "end": "418080"
  },
  {
    "text": "present in the configuration yaml and decrypts the secret and give it back to you",
    "start": "418080",
    "end": "424020"
  },
  {
    "text": "okay so this is this is the mechanism of local encryption provider",
    "start": "424020",
    "end": "431100"
  },
  {
    "text": "till now with me any question with local encryption provider",
    "start": "431100",
    "end": "436319"
  },
  {
    "text": "all right so local encryption provider it mitigates one major concern that is the",
    "start": "436319",
    "end": "443160"
  },
  {
    "text": "hcd compromise problem because all the secrets inside your STD is now encrypted",
    "start": "443160",
    "end": "450840"
  },
  {
    "text": "so if any attacker even if they tries to get access to your H3 database they",
    "start": "450840",
    "end": "456840"
  },
  {
    "text": "won't get much out of it because all the secrets are encrypted now inside that",
    "start": "456840",
    "end": "462120"
  },
  {
    "text": "but it doesn't mitigate one major problem that is your host compromise problem",
    "start": "462120",
    "end": "467520"
  },
  {
    "text": "think about this way uh suppose your attacker tries to gain the access of the",
    "start": "467520",
    "end": "473699"
  },
  {
    "text": "host itself or they get the access of your disk of the node where your API server",
    "start": "473699",
    "end": "480300"
  },
  {
    "text": "is running what will happen is that they will get the they will get the encryption key you",
    "start": "480300",
    "end": "486780"
  },
  {
    "text": "see over here that is the encryption key that is present inside your configuration yaml so they can easily",
    "start": "486780",
    "end": "493680"
  },
  {
    "text": "grab that encryption key take a backup of your silly database and happily encrypt decrypt all the secrets",
    "start": "493680",
    "end": "502139"
  },
  {
    "text": "so now your secrets are again compromised so local encryption provider its",
    "start": "502139",
    "end": "509879"
  },
  {
    "text": "mitigates one major problem that is hcd compromise problem but it doesn't mitigate the host compromise problem",
    "start": "509879",
    "end": "516719"
  },
  {
    "text": "so to mitigate both the problems we have something called as KMS envelope",
    "start": "516719",
    "end": "523919"
  },
  {
    "text": "encryption or using the external encryption provider first let's discuss about what is KMS so",
    "start": "523919",
    "end": "531839"
  },
  {
    "text": "KMS stands for key management system or service so it is an automated system provided by",
    "start": "531839",
    "end": "538380"
  },
  {
    "text": "all the major Cloud providers to automatically manage your cryptographic",
    "start": "538380",
    "end": "544260"
  },
  {
    "text": "keys and its metadata so all the major Cloud providers like gcp has their Cloud KMS Azure has their key Vault then AWS",
    "start": "544260",
    "end": "553019"
  },
  {
    "text": "has their AWS KMS so all the major Cloud providers have their own flavor of KMS",
    "start": "553019",
    "end": "558120"
  },
  {
    "text": "this KMS uses something called as envelope encryption how many of you guys",
    "start": "558120",
    "end": "563399"
  },
  {
    "text": "know about envelope encryption no okay so in case of envelope",
    "start": "563399",
    "end": "568680"
  },
  {
    "text": "encryption there are two types of keys one is called as D case that is data encryption key and another one is called",
    "start": "568680",
    "end": "575519"
  },
  {
    "text": "as kek that is key encryption key so in case of envelope encryption your",
    "start": "575519",
    "end": "581160"
  },
  {
    "text": "data are basically getting encrypted using the data encryption key after encrypting your data your dek goes",
    "start": "581160",
    "end": "589019"
  },
  {
    "text": "to the remote KMS server get that DK encrypted using the key encryption key",
    "start": "589019",
    "end": "595500"
  },
  {
    "text": "that is kek get a ciphertext back and store that encrypted dek along with the encrypted",
    "start": "595500",
    "end": "603000"
  },
  {
    "text": "data inside your disk so this is how the flow works during the",
    "start": "603000",
    "end": "608100"
  },
  {
    "text": "encryption for your envelope encryption provider during decryption the exact reverse",
    "start": "608100",
    "end": "614700"
  },
  {
    "text": "process happen so your encrypted DK goes to the remote KMS server get it",
    "start": "614700",
    "end": "620640"
  },
  {
    "text": "decrypted from there and using that decrypted DK it basically decrypts all the data",
    "start": "620640",
    "end": "626700"
  },
  {
    "text": "so you see uh with envelope encryption the advantage is that your key",
    "start": "626700",
    "end": "632279"
  },
  {
    "text": "encryption key never gets stored along with your data it always present inside",
    "start": "632279",
    "end": "638700"
  },
  {
    "text": "some external remote server so",
    "start": "638700",
    "end": "643760"
  },
  {
    "text": "your your attacker cannot get the access of kek",
    "start": "643760",
    "end": "649019"
  },
  {
    "text": "because that is backed by all the cloud providers so that is that acts as a root",
    "start": "649019",
    "end": "654600"
  },
  {
    "text": "of trust now let's see how you can use KMS in",
    "start": "654600",
    "end": "660120"
  },
  {
    "text": "case of kubernetes so in order to use KMS you need to you need to have",
    "start": "660120",
    "end": "665339"
  },
  {
    "text": "something called as KMS plugin so this basically acts as a bridge between your",
    "start": "665339",
    "end": "671100"
  },
  {
    "text": "API server and the external KMS it's an grpc server that basically talks",
    "start": "671100",
    "end": "678120"
  },
  {
    "text": "to your API server and the KMS now what happens when you do Cube City create",
    "start": "678120",
    "end": "683519"
  },
  {
    "text": "secret your API server sends a signal to the KMS plugin KMS plugin then generates a dek so that",
    "start": "683519",
    "end": "691740"
  },
  {
    "text": "dek basically used to encrypt the data once the data is encrypted",
    "start": "691740",
    "end": "697500"
  },
  {
    "text": "KMS plugin talks to the cloud KMS decrypt the DK using the KE that is",
    "start": "697500",
    "end": "704579"
  },
  {
    "text": "present inside the KMS service get a ciphertext back and writes the",
    "start": "704579",
    "end": "711000"
  },
  {
    "text": "encrypted DK along with the encrypted Secret inside the hcd",
    "start": "711000",
    "end": "716040"
  },
  {
    "text": "so you see your encryption key that is your ke never writes never get written inside the HC",
    "start": "716040",
    "end": "724079"
  },
  {
    "text": "database it always present Outside Inside Outside to your cluster",
    "start": "724079",
    "end": "730860"
  },
  {
    "text": "okay so using your external Secrets provider or KMS we can mitigate both the",
    "start": "730860",
    "end": "737880"
  },
  {
    "text": "security problems that I have been talking about it mitigates the ACD compromise problem and it also mitigates",
    "start": "737880",
    "end": "743459"
  },
  {
    "text": "the host compromise problem will discuss about the architecture of",
    "start": "743459",
    "end": "748860"
  },
  {
    "text": "KMS",
    "start": "748860",
    "end": "751279"
  },
  {
    "text": "explained to you about the different encryption providers that you get with kubernetes these days so basically we",
    "start": "754459",
    "end": "761880"
  },
  {
    "text": "are at a point where we have an understanding that an unencrypted secrets are anyways not a good idea and",
    "start": "761880",
    "end": "768360"
  },
  {
    "text": "if you move one step forward when you move to something like a local provider a local encryption provider you have the",
    "start": "768360",
    "end": "774839"
  },
  {
    "text": "risk of getting your um like host compromised and still you get attacked on to your secrets so we",
    "start": "774839",
    "end": "781500"
  },
  {
    "text": "are here with KMS encryption provider where the keys are stored remotely in",
    "start": "781500",
    "end": "786540"
  },
  {
    "text": "some remote location managed by the cloud provider or you can also use your",
    "start": "786540",
    "end": "791579"
  },
  {
    "text": "uh what would I say like a custom Key Management solution running on a bare",
    "start": "791579",
    "end": "796680"
  },
  {
    "text": "metal kind of a setup within your environment where you can manage the keys securely and keep it as like",
    "start": "796680",
    "end": "803160"
  },
  {
    "text": "isolated from your actual control plane and your actual cluster so let's dive deep into what happens",
    "start": "803160",
    "end": "810899"
  },
  {
    "text": "when we use kubernetes KMS and I'll also walk you through a demo with it how it",
    "start": "810899",
    "end": "816300"
  },
  {
    "text": "how it looks like uh so um so as we see that there is a",
    "start": "816300",
    "end": "821579"
  },
  {
    "text": "lot of encryption and decryption going on and uh and at a very high level there's API server hcd and in between",
    "start": "821579",
    "end": "828540"
  },
  {
    "text": "them there's a new new agent it's called KMS plugin the KMS plugins job is to",
    "start": "828540",
    "end": "834839"
  },
  {
    "text": "talk to the KMS provider and ensure that keys are encrypted and encrypted when",
    "start": "834839",
    "end": "839880"
  },
  {
    "text": "the API server wants to that's all the plugin does so the communication",
    "start": "839880",
    "end": "845279"
  },
  {
    "text": "essentially happens over a grpc connection so typically you would run the plugin as",
    "start": "845279",
    "end": "851519"
  },
  {
    "text": "a static pod or uh or as a as a like on the host itself any way you want",
    "start": "851519",
    "end": "858779"
  },
  {
    "text": "basically what queue API server needs from the control plane is a unique socket where it can communicate with the",
    "start": "858779",
    "end": "865800"
  },
  {
    "text": "plugin and make those encryption decryption calls",
    "start": "865800",
    "end": "871160"
  },
  {
    "text": "and if you see this representation where the secret is where the secret is",
    "start": "871220",
    "end": "877920"
  },
  {
    "text": "getting stored in hcd it is getting stored in format where it's encrypted",
    "start": "877920",
    "end": "883680"
  },
  {
    "text": "and it's and it's safe for anyone to like Whoever has access to the disk or",
    "start": "883680",
    "end": "889500"
  },
  {
    "text": "those kind of things they still cannot get the actual secret itself so moving on we have two implementations",
    "start": "889500",
    "end": "897540"
  },
  {
    "text": "of KMS in kubernetes as of today one is the V1 implementation which has",
    "start": "897540",
    "end": "902760"
  },
  {
    "text": "existed for quite some time and there is V2 as well which we will discuss later on so V1 has been there for quite some",
    "start": "902760",
    "end": "909300"
  },
  {
    "text": "time uh I think yeah v1.10 or when the 13 I don't remember yeah and the new V2",
    "start": "909300",
    "end": "916560"
  },
  {
    "text": "is there from V 1.27 onwards it's available as a beta uh well I walk you through what happens",
    "start": "916560",
    "end": "922740"
  },
  {
    "text": "when you create a secret using V1 so there's a client that tries to create",
    "start": "922740",
    "end": "928199"
  },
  {
    "text": "a talk to API server to give it the contents of the secret usually it's",
    "start": "928199",
    "end": "933600"
  },
  {
    "text": "base64 encoded even if it is not if you use the new string data field uh if it's",
    "start": "933600",
    "end": "939779"
  },
  {
    "text": "not base64 encoded the API server receives it if requireds decodes it from the normal base64 to the no to the",
    "start": "939779",
    "end": "947459"
  },
  {
    "text": "normal string and what it does is it randomly generates a number which we call the dek or the data encryption key",
    "start": "947459",
    "end": "954660"
  },
  {
    "text": "this dek will be used to encrypt the secret so this dek this dek will be",
    "start": "954660",
    "end": "962000"
  },
  {
    "text": "ciphered upon the actual secret itself and you will get an encrypted secret which will be stored on the disk so on",
    "start": "962000",
    "end": "968639"
  },
  {
    "text": "the disk two things are stored one is the encrypted secret itself and this dek is also sent to that KMS plugin which",
    "start": "968639",
    "end": "974699"
  },
  {
    "text": "sends uh encrypted dvk back and once the encrypted DK is available the encrypted dek along with the encrypted secret is",
    "start": "974699",
    "end": "982199"
  },
  {
    "text": "stored uh stored on your hcd another good part is that your secret act and",
    "start": "982199",
    "end": "987660"
  },
  {
    "text": "its actual actual contents doesn't leave the node so it doesn't go to KMS this is",
    "start": "987660",
    "end": "993660"
  },
  {
    "text": "why envelope encryption is helpful apart from that there is also another",
    "start": "993660",
    "end": "998820"
  },
  {
    "text": "interesting bit which is the if you see over here this is the cache size this cache size you can configure from your",
    "start": "998820",
    "end": "1005000"
  },
  {
    "text": "end when you are configuring the encryption provider what it will basically do is whenever making these",
    "start": "1005000",
    "end": "1010579"
  },
  {
    "text": "encryptions happen they will also cache the dek's encrypted like the plain text",
    "start": "1010579",
    "end": "1017120"
  },
  {
    "text": "dek as well as the encrypted DK keeper mapping it's essentially an lru cache what it helps to do is avoid like avoid",
    "start": "1017120",
    "end": "1026120"
  },
  {
    "text": "or like I would say decrease the number of KMS calls later on when we use it for decryption uh it's up to you if you want",
    "start": "1026120",
    "end": "1033380"
  },
  {
    "text": "a very secure setup where you do not want anything to be running on the memory itself you can use something like",
    "start": "1033380",
    "end": "1039020"
  },
  {
    "text": "cache 0 but that's that would add a lot of network overhead between KMS plugin and your API server and we could just",
    "start": "1039020",
    "end": "1047540"
  },
  {
    "text": "make a note that for this particular KMS V1 there's a one dek for each Secret",
    "start": "1047540",
    "end": "1053540"
  },
  {
    "text": "so when we decrypt it the hcd data is read and basically you get the encrypted",
    "start": "1053540",
    "end": "1059299"
  },
  {
    "text": "encrypted dek and the encrypted secret so when you get the encrypted encrypted",
    "start": "1059299",
    "end": "1064760"
  },
  {
    "text": "secret uh sorry when you get the encrypted DK you send it back to the KMS plugin to get the plaintext use it to",
    "start": "1064760",
    "end": "1072260"
  },
  {
    "text": "decrypt the encrypted data and give it to the client if it is available in the cache you save yourself from I mean Cube",
    "start": "1072260",
    "end": "1079220"
  },
  {
    "text": "API server saves itself from the from the extra KMS plugin called it had to made depends upon what is the cache size",
    "start": "1079220",
    "end": "1086419"
  },
  {
    "text": "and how the cache works so this is how it works at a high level I'll also walk you through V2 so things",
    "start": "1086419",
    "end": "1094160"
  },
  {
    "text": "change in V2 a bit it's it's basically tries to reduce the number of calls to",
    "start": "1094160",
    "end": "1099559"
  },
  {
    "text": "KMS that's happening and also the total number of decays that get generated so before in KMS we won what used to happen",
    "start": "1099559",
    "end": "1106220"
  },
  {
    "text": "was we used to have that many number of deks as the number of Secrets but now usually when the API server starts up it",
    "start": "1106220",
    "end": "1113299"
  },
  {
    "text": "creates one dek and caches it so it doesn't create one DK per uh per secret",
    "start": "1113299",
    "end": "1118580"
  },
  {
    "text": "anymore but it only does this when it is required uh by by when it is required I",
    "start": "1118580",
    "end": "1125360"
  },
  {
    "text": "mean that this happens on API server startup and if the KMS key is rotated so if the KMS key is rotated this is how it",
    "start": "1125360",
    "end": "1131900"
  },
  {
    "text": "will go on if not then uh if it doesn't get rotated then the dek",
    "start": "1131900",
    "end": "1137780"
  },
  {
    "text": "will remain the same internally the cache is a Time limited cache so after a point of time it does talk to KMS again",
    "start": "1137780",
    "end": "1144620"
  },
  {
    "text": "but shouldn't be a problem since it's just one key or maybe two three keys so yeah so essentially you see now the flow",
    "start": "1144620",
    "end": "1152240"
  },
  {
    "text": "is simpler you when you create a secret you need not make a KMS plugin call you have the dek available in the cache",
    "start": "1152240",
    "end": "1158600"
  },
  {
    "text": "itself that one particular DK use it to encrypt the secret and store it in the at CD DB that's it the another",
    "start": "1158600",
    "end": "1166820"
  },
  {
    "text": "difference is if you check out the representation on the data hcd data itself previously it used to append the",
    "start": "1166820",
    "end": "1172820"
  },
  {
    "text": "dek and the encrypted secret now it uses a protocol buffer so you can also store",
    "start": "1172820",
    "end": "1178580"
  },
  {
    "text": "other information like annotations and any things that the KMS plugin provider provides with you but you shouldn't be",
    "start": "1178580",
    "end": "1183980"
  },
  {
    "text": "concerned about these from a cluster administrator perspective until unless you are developing a KMS plugin yourself",
    "start": "1183980",
    "end": "1190600"
  },
  {
    "text": "there's this field the key ID this is changed only when the kms's master key",
    "start": "1190600",
    "end": "1196340"
  },
  {
    "text": "is rotated so Q API server gets a signal that the that the master key for the KMS",
    "start": "1196340",
    "end": "1202160"
  },
  {
    "text": "has changed and now it is time for me to to re-encrypt everything basically",
    "start": "1202160",
    "end": "1208940"
  },
  {
    "text": "same thing when we have the secret being read from the KMS V2 what happens is it",
    "start": "1208940",
    "end": "1214520"
  },
  {
    "text": "takes the it takes the data from the it already has the deks plain text version",
    "start": "1214520",
    "end": "1219620"
  },
  {
    "text": "in the cache so it doesn't need to make a plug-in call it will just directly use it and decrypt it from hcd and give it",
    "start": "1219620",
    "end": "1226340"
  },
  {
    "text": "back to the user if there's a key ID change it will perform the encryption okay so we'll move to the more",
    "start": "1226340",
    "end": "1232880"
  },
  {
    "text": "interesting part to the demo hmm",
    "start": "1232880",
    "end": "1239559"
  },
  {
    "text": "I hope you can see my screen so what I did is I created a cluster not",
    "start": "1242600",
    "end": "1249080"
  },
  {
    "text": "a cluster a single node kubernetes VM a VMware single node kubernetes is",
    "start": "1249080",
    "end": "1255080"
  },
  {
    "text": "learning using cubadium nothing special [Music] um if you check so I'll just show you what",
    "start": "1255080",
    "end": "1263480"
  },
  {
    "text": "you need to actually change to enable this KMS thing which I told you so",
    "start": "1263480",
    "end": "1269000"
  },
  {
    "text": "kubernetes would store its static pod manifests in",
    "start": "1269000",
    "end": "1275000"
  },
  {
    "text": "this URL in this directory Etc kubernetes manifests you can check the cube API",
    "start": "1275000",
    "end": "1282620"
  },
  {
    "text": "server pod EML from here if you want",
    "start": "1282620",
    "end": "1287620"
  },
  {
    "text": "yes pretty much this one so this doesn't have a flag encryption",
    "start": "1289419",
    "end": "1295820"
  },
  {
    "text": "provider config yet I will give one of that to this and I'll also add another static pod which will run that KMS",
    "start": "1295820",
    "end": "1303440"
  },
  {
    "text": "plugin so I already have these things stored",
    "start": "1303440",
    "end": "1309020"
  },
  {
    "text": "yeah so this is my updated Q API server static pod",
    "start": "1309020",
    "end": "1315879"
  },
  {
    "text": "what it has add-on is this last line over here this encryption",
    "start": "1321700",
    "end": "1328760"
  },
  {
    "text": "provider config I'll also show you what's in this config",
    "start": "1328760",
    "end": "1333820"
  },
  {
    "text": "yeah this is what is basically there in the config the path to the Unix socket and the cache size this is KMS V1 so",
    "start": "1343039",
    "end": "1350960"
  },
  {
    "text": "this is where it should be running and for this to run I will spin up another static part",
    "start": "1350960",
    "end": "1356780"
  },
  {
    "text": "so I'll quickly copy this",
    "start": "1356780",
    "end": "1360280"
  },
  {
    "text": "and if I restart cubelet my",
    "start": "1366799",
    "end": "1372399"
  },
  {
    "text": "my kubernetes should now start using KMS",
    "start": "1374059",
    "end": "1379120"
  },
  {
    "text": "okay yeah another issue now what I will try",
    "start": "1384500",
    "end": "1389720"
  },
  {
    "text": "to do is",
    "start": "1389720",
    "end": "1392320"
  },
  {
    "text": "yeah we have them running okay",
    "start": "1398720",
    "end": "1406120"
  },
  {
    "text": "yeah this is using the older just give me a minute this is an older",
    "start": "1413380",
    "end": "1419780"
  },
  {
    "text": "Cube config running at my end",
    "start": "1419780",
    "end": "1423520"
  },
  {
    "text": "which will not work",
    "start": "1425240",
    "end": "1428620"
  },
  {
    "text": "yep so",
    "start": "1440120",
    "end": "1443740"
  },
  {
    "text": "I think it should work now yeah so this is",
    "start": "1449419",
    "end": "1455900"
  },
  {
    "text": "so what I will show is create a secret yeah I'm trying to create this secret",
    "start": "1455900",
    "end": "1462200"
  },
  {
    "text": "generic generic secret DB user pass just some dummy values uh admin and password",
    "start": "1462200",
    "end": "1469780"
  },
  {
    "text": "xxy whatever so this went through KMS internally I will show you that",
    "start": "1469780",
    "end": "1476419"
  },
  {
    "text": "so if",
    "start": "1476419",
    "end": "1479620"
  },
  {
    "text": "yeah so this if you see this is not the plaintext secret this is some encrypted",
    "start": "1485900",
    "end": "1492980"
  },
  {
    "text": "and if I do a hex dump over it it will give a better like a better",
    "start": "1492980",
    "end": "1501020"
  },
  {
    "text": "um better representation of it basically but yeah this is what is contained",
    "start": "1501020",
    "end": "1507620"
  },
  {
    "text": "inside the inside the secret I'll also show you another secret that was there",
    "start": "1507620",
    "end": "1513620"
  },
  {
    "text": "from before which is not encrypted and how it looks like",
    "start": "1513620",
    "end": "1518740"
  },
  {
    "text": "this is the support",
    "start": "1521720",
    "end": "1525158"
  },
  {
    "text": "[Music] um I think I messed up with a",
    "start": "1544620",
    "end": "1552260"
  },
  {
    "text": "okay oh yeah this should be Cube system",
    "start": "1552260",
    "end": "1557679"
  },
  {
    "text": "yeah you see this secret is there as plain text from whatever was there in the API server so this is the difference",
    "start": "1562760",
    "end": "1568880"
  },
  {
    "text": "essentially from KMS and without KMS so this is how it works if you do manage",
    "start": "1568880",
    "end": "1575299"
  },
  {
    "text": "your cluster from your end and you have access to the control plane uh what happens is what happens is there can be",
    "start": "1575299",
    "end": "1581900"
  },
  {
    "text": "scenarios where your control plane is managed by someone else for something like for something like managed Services",
    "start": "1581900",
    "end": "1587900"
  },
  {
    "text": "you can use gke AKs that has off the fly KMS encryption that is one alternative",
    "start": "1587900",
    "end": "1593240"
  },
  {
    "text": "apart from that if you have some tooling on top of it which manages the control plane which manages the control plane",
    "start": "1593240",
    "end": "1599179"
  },
  {
    "text": "for you you would typically need to change the cube API server manifest through code whatever tooling you use",
    "start": "1599179",
    "end": "1606080"
  },
  {
    "text": "and add a container for that KMS plugin [Music]",
    "start": "1606080",
    "end": "1611539"
  },
  {
    "text": "KMS plugin and change that encryption provider config from inside and it should work it should look something",
    "start": "1611539",
    "end": "1617539"
  },
  {
    "text": "similar to this spaces of gcp or AWS wherever you are running so this is this is the basic change that",
    "start": "1617539",
    "end": "1625100"
  },
  {
    "text": "you need to do to your Cube API server if you want to do it in a managed kind of an environment where there's a",
    "start": "1625100",
    "end": "1630380"
  },
  {
    "text": "control plane manager and those kinds of things so right now this feature is not there within openshift but we are actively",
    "start": "1630380",
    "end": "1636440"
  },
  {
    "text": "investigating how we bring this in but you can definitely use it on a regular kubernetes cluster on AKs on eks on gke",
    "start": "1636440",
    "end": "1644360"
  },
  {
    "text": "and if you are running something on a and if you are running something on a",
    "start": "1644360",
    "end": "1650659"
  },
  {
    "text": "bare metal kind of a bare metal kind of a deployment what you could do is you",
    "start": "1650659",
    "end": "1655820"
  },
  {
    "text": "could uh you could directly use a another KMS KMS provider that's called",
    "start": "1655820",
    "end": "1664039"
  },
  {
    "text": "that's called trusso that's a not that's not a KMS provider my bad that's a KMS plugin that connects to Vault so if",
    "start": "1664039",
    "end": "1670820"
  },
  {
    "text": "you're running a vault internally in your bare metal or in your network you",
    "start": "1670820",
    "end": "1675919"
  },
  {
    "text": "can uh you can essentially use true so KMS plugin that will connect to Vault very well and would run very well for",
    "start": "1675919",
    "end": "1682820"
  },
  {
    "text": "your bare metal bare metal clusters uh we discussed a lot about securing and",
    "start": "1682820",
    "end": "1689120"
  },
  {
    "text": "securing and encrypting kubernetes Secrets using KMS but what if you are doing trying to do something things",
    "start": "1689120",
    "end": "1695419"
  },
  {
    "text": "differently and you want to uh and you still want to like use security or just just to discuss on the other approaches",
    "start": "1695419",
    "end": "1702980"
  },
  {
    "text": "that you get so hashikar Vault has a vault sidecars injector that injects the",
    "start": "1702980",
    "end": "1709640"
  },
  {
    "text": "secrets into the containers into the pods directly through a sidecar container there's no involvement of",
    "start": "1709640",
    "end": "1716000"
  },
  {
    "text": "kubernetes as such the kubernetes API server as such but it's secure because it directly talks to Vault and bypasses",
    "start": "1716000",
    "end": "1722539"
  },
  {
    "text": "Cube API server external Secrets operator this one is more like a synchronization point between an",
    "start": "1722539",
    "end": "1728720"
  },
  {
    "text": "external system or an external API where your secrets are stored and then it injects the cube into kubernetes secrets",
    "start": "1728720",
    "end": "1735200"
  },
  {
    "text": "seal Secrets is another thing it's similar to KMS but it works a little bit",
    "start": "1735200",
    "end": "1740419"
  },
  {
    "text": "differently that is it actually changes the original secret itself and there's a controller running that decrypts it at",
    "start": "1740419",
    "end": "1747679"
  },
  {
    "text": "runtime so even if you run on a git Ops environment or something if you are using a public GitHub public git repo if",
    "start": "1747679",
    "end": "1754100"
  },
  {
    "text": "you are using seal secrets you can keep your secrets even on GitHub it's it seals and keeps your encryptions running",
    "start": "1754100",
    "end": "1760159"
  },
  {
    "text": "that way it's that safe so yeah thanks pretty much that's what I",
    "start": "1760159",
    "end": "1765679"
  },
  {
    "text": "had we had and uh if you want to contact us we have our handles on the screen and",
    "start": "1765679",
    "end": "1771140"
  },
  {
    "text": "I would be I would give you the opportunity to like question back whatever you want or relating to",
    "start": "1771140",
    "end": "1776600"
  },
  {
    "text": "whatever we discussed today any questions",
    "start": "1776600",
    "end": "1783940"
  },
  {
    "text": "detail presentation so there is one question that I have is like we have a similar scenario and what we did is we",
    "start": "1784399",
    "end": "1790279"
  },
  {
    "text": "actually used the external Secrets operator to resolve that issue uh so I kind of don't understand like where or",
    "start": "1790279",
    "end": "1797720"
  },
  {
    "text": "what kind of use cases this KMS based stuff will be useful and because the external Secrets also you know it",
    "start": "1797720",
    "end": "1804080"
  },
  {
    "text": "connects to the cloud provider secret itself and then get it synchronized and you know store it in a secure way yeah",
    "start": "1804080",
    "end": "1811100"
  },
  {
    "text": "so external secret providers do not encrypt your secret so it just creates a synchronization between your storage",
    "start": "1811100",
    "end": "1817940"
  },
  {
    "text": "your remote storage and reads your secret from there and creates a",
    "start": "1817940",
    "end": "1823279"
  },
  {
    "text": "community secret itself inside your cluster so it's it's creating a secret only and it's creating a synchronization",
    "start": "1823279",
    "end": "1829340"
  },
  {
    "text": "but it is not encrypting any of the secret so if even if you are using the external Secrets provider your secrets",
    "start": "1829340",
    "end": "1835039"
  },
  {
    "text": "are not encrypted they are just synchronizing between the external remote server and your kubernetes",
    "start": "1835039",
    "end": "1840320"
  },
  {
    "text": "cluster so if you do the hex term of your hcd database you will see the secrets are still plain text they are",
    "start": "1840320",
    "end": "1846559"
  },
  {
    "text": "not encrypted okay thanks",
    "start": "1846559",
    "end": "1850299"
  },
  {
    "text": "so you are saying while doing the synchronization it it won't be a kind of",
    "start": "1857440",
    "end": "1862760"
  },
  {
    "text": "applying it but in HTTPS mode if I am getting from the external work it will",
    "start": "1862760",
    "end": "1868039"
  },
  {
    "text": "automatically but at rest inside the AC database it is not during transition it",
    "start": "1868039",
    "end": "1873320"
  },
  {
    "text": "could it can be encrypted I'm talking about at rest what is happening inside the cluster",
    "start": "1873320",
    "end": "1879740"
  },
  {
    "text": "if external Secrets operator will create a secret itself and that secret will be",
    "start": "1879740",
    "end": "1885260"
  },
  {
    "text": "stored inside the it's a database only the problem is inside the HC database it",
    "start": "1885260",
    "end": "1890360"
  },
  {
    "text": "is plain text inside hcd it is not encrypted so external security provider won't solve the",
    "start": "1890360",
    "end": "1897039"
  },
  {
    "text": "encryption and decryption problem",
    "start": "1897039",
    "end": "1900879"
  },
  {
    "text": "we are we are this entire presentation is for rest inside SCD",
    "start": "1903980",
    "end": "1910820"
  },
  {
    "text": "the data that is present inside the city that is not encrypted entire presentation is talking about at rest",
    "start": "1910820",
    "end": "1918200"
  },
  {
    "text": "problem also another thing like if that is not the solution you're looking for you can",
    "start": "1918200",
    "end": "1924320"
  },
  {
    "text": "also consider encrypting your nodes that does some point of the exercise that we",
    "start": "1924320",
    "end": "1929720"
  },
  {
    "text": "are doing but yeah nothing it doesn't touch anything at Cube level is another thing you can encrypt your nodes disk",
    "start": "1929720",
    "end": "1936559"
  },
  {
    "text": "basically it offers similar kind of a encryption but doesn't always work if you have multi-tenant workloads or some",
    "start": "1936559",
    "end": "1942440"
  },
  {
    "text": "kind of a thing then it doesn't work workload like each tenant can have their own KMS plugins and those kind of things",
    "start": "1942440",
    "end": "1949279"
  },
  {
    "text": "so if you are using openshift cluster uh we are sorry uh it's it's not uh it's",
    "start": "1949279",
    "end": "1956059"
  },
  {
    "text": "not launched yet uh internally we are working heavily to get it G8 and beta",
    "start": "1956059",
    "end": "1961520"
  },
  {
    "text": "version so just bear some time to get it released in openshift",
    "start": "1961520",
    "end": "1969039"
  },
  {
    "text": "cache is evaluated out of the games",
    "start": "1974140",
    "end": "1981278"
  },
  {
    "text": "so that um",
    "start": "1981559",
    "end": "1985059"
  },
  {
    "text": "and then the secret is okay no secrets are not shared to the KMS the DK is shared to the KMS",
    "start": "1989480",
    "end": "1997340"
  },
  {
    "text": "the dek goes to the KMS get it encrypted and stored with the encrypted Secret",
    "start": "1997340",
    "end": "2003399"
  },
  {
    "text": "inside the sa database your secret never goes to the remote KMS server only the dek goes to the remote KMS server get it",
    "start": "2003399",
    "end": "2010899"
  },
  {
    "text": "encrypted and stores uh along with your encrypted Secret",
    "start": "2010899",
    "end": "2016910"
  },
  {
    "text": "[Applause]",
    "start": "2016910",
    "end": "2020099"
  },
  {
    "text": "so if your cache is so you can you can configure your cache size so if your cache is zero so your API server will",
    "start": "2027539",
    "end": "2034480"
  },
  {
    "text": "then talk to the KMS plugin so KMS plugin won't find any cache it will talk to the uh your remote KMS and pick the",
    "start": "2034480",
    "end": "2043600"
  },
  {
    "text": "decrypted DK from there so that your cash is null right your cash is nothing so you have the KMS plugin have to go to",
    "start": "2043600",
    "end": "2050919"
  },
  {
    "text": "the KMS service again and again there will be latency issue that we talked about for KMS V1 and the km is V2 solves",
    "start": "2050919",
    "end": "2058358"
  },
  {
    "text": "that problem",
    "start": "2058359",
    "end": "2060720"
  },
  {
    "text": "not your disk if you have more questions maybe we could take it offline yeah",
    "start": "2067740",
    "end": "2072878"
  },
  {
    "text": "thanks everyone thank you guys uh in the interest of time we'll take the Q a of stage so I request money to give away",
    "start": "2072879",
    "end": "2079540"
  },
  {
    "text": "the token of appreciation to check against whatever foreign",
    "start": "2079540",
    "end": "2085200"
  }
]