[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "hi i'm liz rice i am the chief open",
    "start": "1439",
    "end": "4880"
  },
  {
    "text": "source officer at isovalent we're the",
    "start": "4880",
    "end": "7759"
  },
  {
    "text": "company behind the psyllium networking",
    "start": "7759",
    "end": "10400"
  },
  {
    "text": "project",
    "start": "10400",
    "end": "11759"
  },
  {
    "text": "and i'm also the chair of the technical",
    "start": "11759",
    "end": "14480"
  },
  {
    "text": "oversight committee at the cncf",
    "start": "14480",
    "end": "17600"
  },
  {
    "text": "and today i want to talk to you about a",
    "start": "17600",
    "end": "19520"
  },
  {
    "text": "technology i'm very excited about",
    "start": "19520",
    "end": "22160"
  },
  {
    "text": "called ebpf",
    "start": "22160",
    "end": "23840"
  },
  {
    "text": "and how this is bringing superpowers",
    "start": "23840",
    "end": "26560"
  },
  {
    "text": "particularly for networking and security",
    "start": "26560",
    "end": "29679"
  },
  {
    "text": "and observability to the world of cloud",
    "start": "29679",
    "end": "32880"
  },
  {
    "text": "native",
    "start": "32880",
    "end": "34559"
  },
  {
    "text": "so let's start by saying what ebpf is",
    "start": "34559",
    "end": "39120"
  },
  {
    "start": "39000",
    "end": "39000"
  },
  {
    "text": "it stands for extended berkeley packet",
    "start": "39120",
    "end": "42079"
  },
  {
    "text": "filter",
    "start": "42079",
    "end": "43440"
  },
  {
    "text": "but i'm not sure that's terribly helpful",
    "start": "43440",
    "end": "46559"
  },
  {
    "text": "what ebpf allows us to do is to run",
    "start": "46559",
    "end": "49920"
  },
  {
    "text": "custom programs within the kernel",
    "start": "49920",
    "end": "54800"
  },
  {
    "text": "so",
    "start": "54800",
    "end": "55520"
  },
  {
    "text": "you can",
    "start": "55520",
    "end": "56879"
  },
  {
    "text": "write custom programs you don't need to",
    "start": "56879",
    "end": "59840"
  },
  {
    "text": "reboot your machine you can add and",
    "start": "59840",
    "end": "62640"
  },
  {
    "text": "remove these programs dynamically and",
    "start": "62640",
    "end": "64960"
  },
  {
    "text": "it's incredibly powerful",
    "start": "64960",
    "end": "67840"
  },
  {
    "text": "over the last few years there's been a",
    "start": "67840",
    "end": "69680"
  },
  {
    "text": "lot of innovation and development within",
    "start": "69680",
    "end": "72640"
  },
  {
    "text": "the kernel itself and also with",
    "start": "72640",
    "end": "75119"
  },
  {
    "text": "surrounding tool chains and",
    "start": "75119",
    "end": "77840"
  },
  {
    "text": "verifiers and other components that have",
    "start": "77840",
    "end": "80640"
  },
  {
    "text": "made this ebpf technology possible",
    "start": "80640",
    "end": "83840"
  },
  {
    "text": "and nowadays most of the linux kernels",
    "start": "83840",
    "end": "86960"
  },
  {
    "text": "that people are using in production",
    "start": "86960",
    "end": "89680"
  },
  {
    "text": "supports",
    "start": "89680",
    "end": "91439"
  },
  {
    "text": "sufficient ebpf functionality that we",
    "start": "91439",
    "end": "93439"
  },
  {
    "text": "can really start making use of it in the",
    "start": "93439",
    "end": "96000"
  },
  {
    "text": "world of cloud native today",
    "start": "96000",
    "end": "99520"
  },
  {
    "text": "you may have heard there's been an ebpf",
    "start": "99759",
    "end": "101920"
  },
  {
    "text": "foundation created recently",
    "start": "101920",
    "end": "104240"
  },
  {
    "text": "and this is really concentrating on that",
    "start": "104240",
    "end": "106880"
  },
  {
    "text": "underlying ebpf technology the",
    "start": "106880",
    "end": "110640"
  },
  {
    "text": "changes to the kernel and the tool",
    "start": "110640",
    "end": "112240"
  },
  {
    "text": "chains that enable projects to build on",
    "start": "112240",
    "end": "115520"
  },
  {
    "text": "top of ebpf",
    "start": "115520",
    "end": "117439"
  },
  {
    "text": "the ebpf foundation is like the cncf a",
    "start": "117439",
    "end": "120799"
  },
  {
    "text": "part of the linux foundation",
    "start": "120799",
    "end": "123119"
  },
  {
    "text": "and so where the ebpf foundation",
    "start": "123119",
    "end": "125520"
  },
  {
    "text": "concentrates on that underlying",
    "start": "125520",
    "end": "127040"
  },
  {
    "text": "technology there are several projects",
    "start": "127040",
    "end": "129520"
  },
  {
    "text": "within the cncf that make use of that",
    "start": "129520",
    "end": "132319"
  },
  {
    "text": "technology and we're going to look at",
    "start": "132319",
    "end": "134480"
  },
  {
    "text": "some examples of using these projects to",
    "start": "134480",
    "end": "137440"
  },
  {
    "text": "explore",
    "start": "137440",
    "end": "138720"
  },
  {
    "text": "some of the power that ebpf gives us",
    "start": "138720",
    "end": "143040"
  },
  {
    "text": "but before we do that let's just",
    "start": "143040",
    "end": "145599"
  },
  {
    "text": "understand what we mean by ebpf programs",
    "start": "145599",
    "end": "150560"
  },
  {
    "start": "150000",
    "end": "150000"
  },
  {
    "text": "so",
    "start": "150560",
    "end": "152080"
  },
  {
    "text": "our user space applications",
    "start": "152080",
    "end": "154879"
  },
  {
    "text": "can load ebpf programs into the kernel",
    "start": "154879",
    "end": "159280"
  },
  {
    "text": "this can happen dynamically as and when",
    "start": "159280",
    "end": "161440"
  },
  {
    "text": "required",
    "start": "161440",
    "end": "162959"
  },
  {
    "text": "and",
    "start": "162959",
    "end": "164640"
  },
  {
    "text": "we also have to attach those ebpf",
    "start": "164640",
    "end": "167120"
  },
  {
    "text": "programs to",
    "start": "167120",
    "end": "168560"
  },
  {
    "text": "an event when that event happens it",
    "start": "168560",
    "end": "171440"
  },
  {
    "text": "triggers the associated ebpf program",
    "start": "171440",
    "end": "175200"
  },
  {
    "text": "what kind of events",
    "start": "175200",
    "end": "176720"
  },
  {
    "text": "it could be the arrival of a network",
    "start": "176720",
    "end": "178720"
  },
  {
    "text": "packet",
    "start": "178720",
    "end": "179680"
  },
  {
    "text": "it could be",
    "start": "179680",
    "end": "181760"
  },
  {
    "text": "a user space application making a system",
    "start": "181760",
    "end": "184400"
  },
  {
    "text": "call it could be hitting a particular",
    "start": "184400",
    "end": "186879"
  },
  {
    "text": "trace point or some dedicated hooks",
    "start": "186879",
    "end": "189519"
  },
  {
    "text": "within the kernel there are a lot of",
    "start": "189519",
    "end": "191440"
  },
  {
    "text": "different places we can",
    "start": "191440",
    "end": "193040"
  },
  {
    "text": "attach these ebpf programs",
    "start": "193040",
    "end": "196959"
  },
  {
    "text": "so",
    "start": "196959",
    "end": "197760"
  },
  {
    "text": "let's make this concrete by looking at a",
    "start": "197760",
    "end": "200720"
  },
  {
    "text": "very very basic example of",
    "start": "200720",
    "end": "203920"
  },
  {
    "text": "an ebpf program this is going to be like",
    "start": "203920",
    "end": "206159"
  },
  {
    "text": "a hello world",
    "start": "206159",
    "end": "209040"
  },
  {
    "text": "so this is my ebpf code that i'm going",
    "start": "209840",
    "end": "213680"
  },
  {
    "text": "to run within the kernel it's very",
    "start": "213680",
    "end": "215680"
  },
  {
    "text": "straightforward it's called hello",
    "start": "215680",
    "end": "218239"
  },
  {
    "text": "and i'm just going to make it trace out",
    "start": "218239",
    "end": "220799"
  },
  {
    "text": "some",
    "start": "220799",
    "end": "221840"
  },
  {
    "text": "tracing let's say hello cubecon as the",
    "start": "221840",
    "end": "225360"
  },
  {
    "text": "message",
    "start": "225360",
    "end": "227840"
  },
  {
    "text": "and i'm going to",
    "start": "228159",
    "end": "229519"
  },
  {
    "text": "attach this to the event",
    "start": "229519",
    "end": "231920"
  },
  {
    "text": "of entering uh the exec ve system call",
    "start": "231920",
    "end": "235920"
  },
  {
    "text": "exec ve",
    "start": "235920",
    "end": "237439"
  },
  {
    "text": "is used every time we execute a new",
    "start": "237439",
    "end": "239760"
  },
  {
    "text": "program so whenever",
    "start": "239760",
    "end": "242560"
  },
  {
    "text": "any new program is executed on my",
    "start": "242560",
    "end": "244799"
  },
  {
    "text": "virtual machine it's going to trigger",
    "start": "244799",
    "end": "247439"
  },
  {
    "text": "this ebpf program",
    "start": "247439",
    "end": "250239"
  },
  {
    "text": "and i've also got some user space code",
    "start": "250239",
    "end": "252400"
  },
  {
    "text": "that's going to read the compiled object",
    "start": "252400",
    "end": "255840"
  },
  {
    "text": "created from that",
    "start": "255840",
    "end": "257519"
  },
  {
    "text": "c code and it's going to load it into",
    "start": "257519",
    "end": "259680"
  },
  {
    "text": "the kernel and attach hello to that",
    "start": "259680",
    "end": "264080"
  },
  {
    "text": "exec ve system call",
    "start": "264080",
    "end": "268198"
  },
  {
    "text": "when i make this it's got two steps it's",
    "start": "269360",
    "end": "272639"
  },
  {
    "text": "doing a go build to build the user space",
    "start": "272639",
    "end": "275280"
  },
  {
    "text": "part of the code and it's also going to",
    "start": "275280",
    "end": "278080"
  },
  {
    "text": "use clang to compile the c code into the",
    "start": "278080",
    "end": "282000"
  },
  {
    "text": "ebpf code that will run in the kernel",
    "start": "282000",
    "end": "285360"
  },
  {
    "text": "i need to run this as root",
    "start": "285360",
    "end": "289040"
  },
  {
    "text": "and",
    "start": "289040",
    "end": "290320"
  },
  {
    "text": "that's attached my tracing",
    "start": "290320",
    "end": "294240"
  },
  {
    "text": "function there to exactly system calls",
    "start": "294400",
    "end": "297520"
  },
  {
    "text": "and we can see there's lots going on on",
    "start": "297520",
    "end": "299120"
  },
  {
    "text": "this particular",
    "start": "299120",
    "end": "300720"
  },
  {
    "text": "virtual machine",
    "start": "300720",
    "end": "303360"
  },
  {
    "text": "you can also see that the",
    "start": "303360",
    "end": "306080"
  },
  {
    "text": "tracing function that i've used",
    "start": "306080",
    "end": "308479"
  },
  {
    "text": "automatically gives us some additional",
    "start": "308479",
    "end": "310800"
  },
  {
    "text": "contextual information about what was",
    "start": "310800",
    "end": "313199"
  },
  {
    "text": "happening when this trace was generated",
    "start": "313199",
    "end": "316800"
  },
  {
    "text": "we can see the name of the executable we",
    "start": "316800",
    "end": "319440"
  },
  {
    "text": "can see this is actually the process id",
    "start": "319440",
    "end": "321680"
  },
  {
    "text": "there's timestamp information so",
    "start": "321680",
    "end": "325280"
  },
  {
    "text": "ebpf programs when they run have this",
    "start": "325280",
    "end": "328080"
  },
  {
    "text": "additional context",
    "start": "328080",
    "end": "330479"
  },
  {
    "text": "that can be very powerful",
    "start": "330479",
    "end": "334000"
  },
  {
    "start": "334000",
    "end": "334000"
  },
  {
    "text": "so that's my ebpf hello world",
    "start": "334000",
    "end": "336840"
  },
  {
    "text": "example and i hope it illustrates that",
    "start": "336840",
    "end": "341120"
  },
  {
    "text": "it was triggered",
    "start": "341120",
    "end": "342800"
  },
  {
    "text": "by processes running across the virtual",
    "start": "342800",
    "end": "345600"
  },
  {
    "text": "machine",
    "start": "345600",
    "end": "347039"
  },
  {
    "text": "so ebpf programs are aware of everything",
    "start": "347039",
    "end": "350400"
  },
  {
    "text": "that's happening across the entire",
    "start": "350400",
    "end": "352960"
  },
  {
    "text": "kernel we're seeing",
    "start": "352960",
    "end": "355759"
  },
  {
    "text": "executables being run in lots of",
    "start": "355759",
    "end": "357520"
  },
  {
    "text": "different processes here",
    "start": "357520",
    "end": "360800"
  },
  {
    "start": "362000",
    "end": "362000"
  },
  {
    "text": "when we run an ebpf program it has to",
    "start": "362080",
    "end": "365600"
  },
  {
    "text": "not crash the kernel it has to not",
    "start": "365600",
    "end": "368560"
  },
  {
    "text": "leave the kernel in an infinite loop",
    "start": "368560",
    "end": "370800"
  },
  {
    "text": "those things would be bad",
    "start": "370800",
    "end": "372800"
  },
  {
    "text": "and in order to ensure that an ebpf",
    "start": "372800",
    "end": "375440"
  },
  {
    "text": "program is safe to run there's a",
    "start": "375440",
    "end": "377360"
  },
  {
    "text": "component called the verifier",
    "start": "377360",
    "end": "380400"
  },
  {
    "text": "and the verifier will check for example",
    "start": "380400",
    "end": "383360"
  },
  {
    "text": "that",
    "start": "383360",
    "end": "384560"
  },
  {
    "text": "every time you",
    "start": "384560",
    "end": "386400"
  },
  {
    "text": "have a pointer that you want to",
    "start": "386400",
    "end": "387759"
  },
  {
    "text": "dereference you have to in your ebpf",
    "start": "387759",
    "end": "390639"
  },
  {
    "text": "program",
    "start": "390639",
    "end": "391680"
  },
  {
    "text": "check that that pointer is not nil",
    "start": "391680",
    "end": "393759"
  },
  {
    "text": "before you dereference it that ensures",
    "start": "393759",
    "end": "396479"
  },
  {
    "text": "that you're not going to be",
    "start": "396479",
    "end": "397840"
  },
  {
    "text": "dereferencing a nil pointer",
    "start": "397840",
    "end": "401360"
  },
  {
    "text": "ebpf programs are limited in what memory",
    "start": "401520",
    "end": "404639"
  },
  {
    "text": "they can access and they are the",
    "start": "404639",
    "end": "407360"
  },
  {
    "text": "verifier will check what memory the",
    "start": "407360",
    "end": "409759"
  },
  {
    "text": "program is trying to access",
    "start": "409759",
    "end": "412479"
  },
  {
    "text": "uh and it will also check for things",
    "start": "412479",
    "end": "415199"
  },
  {
    "text": "like",
    "start": "415199",
    "end": "416080"
  },
  {
    "text": "not",
    "start": "416080",
    "end": "417440"
  },
  {
    "text": "falling into an infinite loop",
    "start": "417440",
    "end": "420800"
  },
  {
    "text": "and because the verifier is ensuring",
    "start": "420800",
    "end": "424080"
  },
  {
    "text": "that the ebpf program complies with",
    "start": "424080",
    "end": "426160"
  },
  {
    "text": "these rules",
    "start": "426160",
    "end": "428479"
  },
  {
    "text": "ebpf is sometimes described as a sandbox",
    "start": "428479",
    "end": "432720"
  },
  {
    "text": "and that's absolutely true but for those",
    "start": "432720",
    "end": "436080"
  },
  {
    "text": "of us used to the idea of containers it",
    "start": "436080",
    "end": "439039"
  },
  {
    "text": "can be a little bit uh well",
    "start": "439039",
    "end": "441840"
  },
  {
    "text": "kind of confusing because",
    "start": "441840",
    "end": "444080"
  },
  {
    "text": "people also describe containers as",
    "start": "444080",
    "end": "445840"
  },
  {
    "text": "sandboxes and these are very different",
    "start": "445840",
    "end": "448080"
  },
  {
    "text": "types of sandbox",
    "start": "448080",
    "end": "450160"
  },
  {
    "text": "one misconception that i've heard is",
    "start": "450160",
    "end": "452560"
  },
  {
    "text": "people thinking that maybe ebpf is a",
    "start": "452560",
    "end": "455360"
  },
  {
    "text": "replacement for containerization and",
    "start": "455360",
    "end": "457759"
  },
  {
    "text": "that is not the case",
    "start": "457759",
    "end": "459840"
  },
  {
    "text": "both are kind of sandbox but they're for",
    "start": "459840",
    "end": "462720"
  },
  {
    "text": "very different purposes",
    "start": "462720",
    "end": "465280"
  },
  {
    "text": "but let's take a look at what it means",
    "start": "465280",
    "end": "467039"
  },
  {
    "text": "to be able to run an ebpf program in a",
    "start": "467039",
    "end": "471199"
  },
  {
    "text": "kubernetes environment",
    "start": "471199",
    "end": "474720"
  },
  {
    "text": "so in kubernetes all our application",
    "start": "474720",
    "end": "477440"
  },
  {
    "text": "code is running in containers that are",
    "start": "477440",
    "end": "480000"
  },
  {
    "text": "grouped together into pods",
    "start": "480000",
    "end": "482319"
  },
  {
    "text": "but however many containers we have",
    "start": "482319",
    "end": "484240"
  },
  {
    "text": "however many pods there are",
    "start": "484240",
    "end": "486240"
  },
  {
    "text": "there is one kernel",
    "start": "486240",
    "end": "488479"
  },
  {
    "text": "per node whether that node is running on",
    "start": "488479",
    "end": "491280"
  },
  {
    "text": "a bare metal machine or a virtual",
    "start": "491280",
    "end": "493039"
  },
  {
    "text": "machine there is one kernel for that",
    "start": "493039",
    "end": "495680"
  },
  {
    "text": "machine",
    "start": "495680",
    "end": "497520"
  },
  {
    "text": "and every time our applications running",
    "start": "497520",
    "end": "499520"
  },
  {
    "text": "in pods want to do anything interesting",
    "start": "499520",
    "end": "502639"
  },
  {
    "text": "they have to get help from the kernel to",
    "start": "502639",
    "end": "505919"
  },
  {
    "text": "do that so for example if your code",
    "start": "505919",
    "end": "508240"
  },
  {
    "text": "wants to",
    "start": "508240",
    "end": "509520"
  },
  {
    "text": "read or write from a file or send or",
    "start": "509520",
    "end": "512000"
  },
  {
    "text": "receive a message",
    "start": "512000",
    "end": "513680"
  },
  {
    "text": "even if",
    "start": "513680",
    "end": "515839"
  },
  {
    "text": "even if kubernetes is creating new",
    "start": "515839",
    "end": "517839"
  },
  {
    "text": "containers for all of these activities",
    "start": "517839",
    "end": "520719"
  },
  {
    "text": "the kernel has to be involved",
    "start": "520719",
    "end": "524320"
  },
  {
    "text": "so that means",
    "start": "524320",
    "end": "525680"
  },
  {
    "text": "the kernel",
    "start": "525680",
    "end": "526880"
  },
  {
    "text": "is aware of everything that's happening",
    "start": "526880",
    "end": "529040"
  },
  {
    "text": "in all the pods",
    "start": "529040",
    "end": "530720"
  },
  {
    "text": "and",
    "start": "530720",
    "end": "531839"
  },
  {
    "text": "uncontainerized processes on that host",
    "start": "531839",
    "end": "537200"
  },
  {
    "text": "the kernel is aware of everything on the",
    "start": "537200",
    "end": "539440"
  },
  {
    "text": "host",
    "start": "539440",
    "end": "540320"
  },
  {
    "text": "and we can",
    "start": "540320",
    "end": "541760"
  },
  {
    "text": "attach ebpf programs to that kernel",
    "start": "541760",
    "end": "545440"
  },
  {
    "text": "our ebpf programs can be aware of",
    "start": "545440",
    "end": "548560"
  },
  {
    "text": "everything that's happening on the host",
    "start": "548560",
    "end": "552320"
  },
  {
    "text": "so we can for example redirect or drop",
    "start": "552320",
    "end": "556240"
  },
  {
    "text": "network packets from inside ebpf and",
    "start": "556240",
    "end": "559360"
  },
  {
    "text": "that's the basis of ebpf networking as",
    "start": "559360",
    "end": "562640"
  },
  {
    "text": "used by psyllium",
    "start": "562640",
    "end": "565920"
  },
  {
    "text": "we can bring together the information",
    "start": "566080",
    "end": "568720"
  },
  {
    "text": "obtained by ebpf programs we can share",
    "start": "568720",
    "end": "571200"
  },
  {
    "text": "it with user space and pull it together",
    "start": "571200",
    "end": "573600"
  },
  {
    "text": "into really powerful observability",
    "start": "573600",
    "end": "577279"
  },
  {
    "text": "applications",
    "start": "577279",
    "end": "578720"
  },
  {
    "text": "and we can use it to detect",
    "start": "578720",
    "end": "581920"
  },
  {
    "text": "potentially malicious activity for",
    "start": "581920",
    "end": "584560"
  },
  {
    "text": "security purposes",
    "start": "584560",
    "end": "587519"
  },
  {
    "text": "one thing i want to be clear about is",
    "start": "587839",
    "end": "589680"
  },
  {
    "text": "that",
    "start": "589680",
    "end": "590560"
  },
  {
    "text": "i doubt very many of you will need to",
    "start": "590560",
    "end": "593040"
  },
  {
    "text": "write ebpf programs yourself",
    "start": "593040",
    "end": "595519"
  },
  {
    "text": "i showed you that hello world to make it",
    "start": "595519",
    "end": "598080"
  },
  {
    "text": "concrete",
    "start": "598080",
    "end": "599279"
  },
  {
    "text": "but for most of us you can use the ebpf",
    "start": "599279",
    "end": "603040"
  },
  {
    "text": "applications that have been written",
    "start": "603040",
    "end": "605680"
  },
  {
    "text": "by",
    "start": "605680",
    "end": "606640"
  },
  {
    "text": "projects that make your life easier",
    "start": "606640",
    "end": "609839"
  },
  {
    "text": "ebpf programming can get really complex",
    "start": "609839",
    "end": "612320"
  },
  {
    "text": "so unless you have a good reason to do",
    "start": "612320",
    "end": "614079"
  },
  {
    "text": "it yourself you will probably be better",
    "start": "614079",
    "end": "616880"
  },
  {
    "text": "off using",
    "start": "616880",
    "end": "619200"
  },
  {
    "text": "the tools created by different projects",
    "start": "619200",
    "end": "624160"
  },
  {
    "start": "623000",
    "end": "623000"
  },
  {
    "text": "so let's take a look at some examples of",
    "start": "624240",
    "end": "627360"
  },
  {
    "text": "using cncf ebpf projects to illustrate",
    "start": "627360",
    "end": "630720"
  },
  {
    "text": "some of the powerful things that we can",
    "start": "630720",
    "end": "632800"
  },
  {
    "text": "do with this technology",
    "start": "632800",
    "end": "636079"
  },
  {
    "text": "so i have a kubernetes cluster",
    "start": "636240",
    "end": "639000"
  },
  {
    "text": "[Music]",
    "start": "639000",
    "end": "640480"
  },
  {
    "text": "running a few different sample",
    "start": "640480",
    "end": "642000"
  },
  {
    "text": "applications",
    "start": "642000",
    "end": "643519"
  },
  {
    "text": "this has",
    "start": "643519",
    "end": "644720"
  },
  {
    "text": "falco and psyllium and",
    "start": "644720",
    "end": "647440"
  },
  {
    "text": "pixie all installed",
    "start": "647440",
    "end": "650800"
  },
  {
    "text": "and let's start by taking a look at some",
    "start": "650800",
    "end": "654399"
  },
  {
    "text": "network flows",
    "start": "654399",
    "end": "656079"
  },
  {
    "text": "this is using psyllium's hubble ui",
    "start": "656079",
    "end": "659120"
  },
  {
    "text": "and we can see a service map here",
    "start": "659120",
    "end": "662240"
  },
  {
    "text": "showing us",
    "start": "662240",
    "end": "663920"
  },
  {
    "text": "how network traffic is flowing between",
    "start": "663920",
    "end": "666959"
  },
  {
    "text": "different services in",
    "start": "666959",
    "end": "669519"
  },
  {
    "text": "this particular namespace tenant jobs",
    "start": "669519",
    "end": "672839"
  },
  {
    "text": "and because",
    "start": "672839",
    "end": "675279"
  },
  {
    "text": "psyllium as a cni is aware of",
    "start": "675279",
    "end": "679519"
  },
  {
    "text": "the kubernetes entities making and",
    "start": "679519",
    "end": "682000"
  },
  {
    "text": "receiving these network requests",
    "start": "682000",
    "end": "684240"
  },
  {
    "text": "it can map",
    "start": "684240",
    "end": "686560"
  },
  {
    "text": "flow information network flow",
    "start": "686560",
    "end": "688800"
  },
  {
    "text": "details to",
    "start": "688800",
    "end": "690399"
  },
  {
    "text": "the pods and the services that made them",
    "start": "690399",
    "end": "693440"
  },
  {
    "text": "receive those requests so we can build",
    "start": "693440",
    "end": "695760"
  },
  {
    "text": "you know nice",
    "start": "695760",
    "end": "697839"
  },
  {
    "text": "ui like this to see",
    "start": "697839",
    "end": "699920"
  },
  {
    "text": "for example crawler service sent a",
    "start": "699920",
    "end": "702959"
  },
  {
    "text": "message to",
    "start": "702959",
    "end": "704399"
  },
  {
    "text": "elasticsearch service and we can dig",
    "start": "704399",
    "end": "707519"
  },
  {
    "text": "into the details of",
    "start": "707519",
    "end": "709920"
  },
  {
    "text": "of that http request",
    "start": "709920",
    "end": "713760"
  },
  {
    "text": "yeah so that's an example of using",
    "start": "713760",
    "end": "716480"
  },
  {
    "text": "psyllium for kubernetes aware network",
    "start": "716480",
    "end": "719519"
  },
  {
    "text": "information",
    "start": "719519",
    "end": "721440"
  },
  {
    "text": "as another example let's take a look at",
    "start": "721440",
    "end": "724000"
  },
  {
    "start": "722000",
    "end": "722000"
  },
  {
    "text": "falco detecting one of its rules being",
    "start": "724000",
    "end": "726240"
  },
  {
    "text": "violated",
    "start": "726240",
    "end": "727839"
  },
  {
    "text": "so falco",
    "start": "727839",
    "end": "729600"
  },
  {
    "text": "much like my hello world example",
    "start": "729600",
    "end": "731760"
  },
  {
    "text": "attaches to system call events",
    "start": "731760",
    "end": "734720"
  },
  {
    "text": "and this particular rule is like my",
    "start": "734720",
    "end": "737440"
  },
  {
    "text": "hello world looking for processes being",
    "start": "737440",
    "end": "740079"
  },
  {
    "text": "executed using the exec ve system call",
    "start": "740079",
    "end": "744399"
  },
  {
    "text": "and this rule is looking for processes",
    "start": "744399",
    "end": "747680"
  },
  {
    "text": "called nc netcat",
    "start": "747680",
    "end": "750240"
  },
  {
    "text": "which",
    "start": "750240",
    "end": "751120"
  },
  {
    "text": "is",
    "start": "751120",
    "end": "752560"
  },
  {
    "text": "often used for malicious activities",
    "start": "752560",
    "end": "756639"
  },
  {
    "text": "so let's try and trigger this rule",
    "start": "756639",
    "end": "760079"
  },
  {
    "text": "so first of all i'm going to tail the",
    "start": "760079",
    "end": "762000"
  },
  {
    "text": "logs from falco and there are a few",
    "start": "762000",
    "end": "764560"
  },
  {
    "text": "things that have been detected",
    "start": "764560",
    "end": "766560"
  },
  {
    "text": "in the past already",
    "start": "766560",
    "end": "769600"
  },
  {
    "text": "now i'm going to",
    "start": "769600",
    "end": "771680"
  },
  {
    "text": "exec into a pod",
    "start": "771680",
    "end": "773839"
  },
  {
    "text": "in this cluster and i'm going to run a",
    "start": "773839",
    "end": "775600"
  },
  {
    "text": "shell and we should straight away see",
    "start": "775600",
    "end": "777440"
  },
  {
    "text": "another rule being",
    "start": "777440",
    "end": "779600"
  },
  {
    "text": "detected there it is a shell was spawned",
    "start": "779600",
    "end": "782800"
  },
  {
    "text": "in a container with an attached terminal",
    "start": "782800",
    "end": "787040"
  },
  {
    "text": "and if i run",
    "start": "787040",
    "end": "789120"
  },
  {
    "text": "netcat",
    "start": "789120",
    "end": "791440"
  },
  {
    "text": "won't actually work but the point is",
    "start": "791440",
    "end": "794399"
  },
  {
    "text": "that",
    "start": "794399",
    "end": "795839"
  },
  {
    "text": "the system call was detected it",
    "start": "795839",
    "end": "798880"
  },
  {
    "text": "triggered the assessment of that rule",
    "start": "798880",
    "end": "801360"
  },
  {
    "text": "and falco admitted the fact that what",
    "start": "801360",
    "end": "804160"
  },
  {
    "text": "omitted a warning about netcat running",
    "start": "804160",
    "end": "806480"
  },
  {
    "text": "inside this container",
    "start": "806480",
    "end": "809440"
  },
  {
    "text": "now let's turn to observability we",
    "start": "809440",
    "end": "811760"
  },
  {
    "text": "already saw in the psyllium hubble ui",
    "start": "811760",
    "end": "815600"
  },
  {
    "text": "the ability to observe network traffic",
    "start": "815600",
    "end": "820079"
  },
  {
    "text": "pixi allows us to run scripts to",
    "start": "820079",
    "end": "822720"
  },
  {
    "text": "generate",
    "start": "822720",
    "end": "824320"
  },
  {
    "text": "lots of other kinds of observability",
    "start": "824320",
    "end": "826839"
  },
  {
    "text": "data i quite like this",
    "start": "826839",
    "end": "829920"
  },
  {
    "text": "example let's",
    "start": "829920",
    "end": "831519"
  },
  {
    "text": "run this again just to prove that it's",
    "start": "831519",
    "end": "833600"
  },
  {
    "text": "live",
    "start": "833600",
    "end": "834639"
  },
  {
    "text": "where it's",
    "start": "834639",
    "end": "836399"
  },
  {
    "text": "showing a flame graph of",
    "start": "836399",
    "end": "839440"
  },
  {
    "text": "how resources are being used so we could",
    "start": "839440",
    "end": "842880"
  },
  {
    "text": "dig in to see",
    "start": "842880",
    "end": "844480"
  },
  {
    "text": "which",
    "start": "844480",
    "end": "845519"
  },
  {
    "text": "of the applications are using the most",
    "start": "845519",
    "end": "847839"
  },
  {
    "text": "resources and we can see",
    "start": "847839",
    "end": "849760"
  },
  {
    "text": "the whole stack trace",
    "start": "849760",
    "end": "852160"
  },
  {
    "text": "to understand",
    "start": "852160",
    "end": "854079"
  },
  {
    "text": "where our cpu is being used",
    "start": "854079",
    "end": "857600"
  },
  {
    "text": "across the cluster",
    "start": "857600",
    "end": "860320"
  },
  {
    "text": "we can also get some interesting data",
    "start": "860320",
    "end": "863360"
  },
  {
    "text": "about",
    "start": "863360",
    "end": "865839"
  },
  {
    "text": "node",
    "start": "866320",
    "end": "868639"
  },
  {
    "text": "resource usage using this pixie ui",
    "start": "869199",
    "end": "873839"
  },
  {
    "text": "so we've seen that ebpf applications can",
    "start": "874160",
    "end": "879279"
  },
  {
    "text": "offer very powerful observability",
    "start": "879279",
    "end": "881199"
  },
  {
    "text": "because they can access everything",
    "start": "881199",
    "end": "883040"
  },
  {
    "text": "that's happening across",
    "start": "883040",
    "end": "884399"
  },
  {
    "text": "an entire node",
    "start": "884399",
    "end": "887440"
  },
  {
    "text": "they can also give us some real",
    "start": "887680",
    "end": "889600"
  },
  {
    "text": "performance improvements and i want to",
    "start": "889600",
    "end": "891839"
  },
  {
    "text": "touch on how ebpf improves network",
    "start": "891839",
    "end": "894959"
  },
  {
    "text": "efficiency",
    "start": "894959",
    "end": "897959"
  },
  {
    "text": "we run",
    "start": "898079",
    "end": "899279"
  },
  {
    "text": "applications in a pod the pod has its",
    "start": "899279",
    "end": "902320"
  },
  {
    "text": "own",
    "start": "902320",
    "end": "903199"
  },
  {
    "text": "networking stack",
    "start": "903199",
    "end": "905360"
  },
  {
    "text": "and that's connected to the networking",
    "start": "905360",
    "end": "907760"
  },
  {
    "text": "stack on the host through a virtual",
    "start": "907760",
    "end": "910560"
  },
  {
    "text": "ethernet connection",
    "start": "910560",
    "end": "913839"
  },
  {
    "text": "so imagine a pod arrives on the physical",
    "start": "913839",
    "end": "917040"
  },
  {
    "text": "interface to this host",
    "start": "917040",
    "end": "919199"
  },
  {
    "text": "and it's destined for the pod or a pod",
    "start": "919199",
    "end": "922000"
  },
  {
    "text": "on this host",
    "start": "922000",
    "end": "923920"
  },
  {
    "text": "that packet has to traverse the whole",
    "start": "923920",
    "end": "926160"
  },
  {
    "text": "networking stack on the host",
    "start": "926160",
    "end": "928320"
  },
  {
    "text": "to get",
    "start": "928320",
    "end": "930240"
  },
  {
    "text": "sent on through that virtual ethernet",
    "start": "930240",
    "end": "932160"
  },
  {
    "text": "connection to the pod",
    "start": "932160",
    "end": "935680"
  },
  {
    "text": "as an ebpf application psyllium can hook",
    "start": "936639",
    "end": "941199"
  },
  {
    "text": "into an event called xdp where",
    "start": "941199",
    "end": "945279"
  },
  {
    "text": "the moment the packet is received onto",
    "start": "945279",
    "end": "947600"
  },
  {
    "text": "the host",
    "start": "947600",
    "end": "949360"
  },
  {
    "text": "before it's",
    "start": "949360",
    "end": "950639"
  },
  {
    "text": "hit the networking stack at all",
    "start": "950639",
    "end": "952880"
  },
  {
    "text": "and because cilium was responsible for",
    "start": "952880",
    "end": "955519"
  },
  {
    "text": "setting up",
    "start": "955519",
    "end": "956639"
  },
  {
    "text": "the networking inside the pod it can",
    "start": "956639",
    "end": "960399"
  },
  {
    "text": "detect that the packet is",
    "start": "960399",
    "end": "963360"
  },
  {
    "text": "destined for that pod and it can route",
    "start": "963360",
    "end": "965279"
  },
  {
    "text": "it directly",
    "start": "965279",
    "end": "966720"
  },
  {
    "text": "to the pod",
    "start": "966720",
    "end": "968639"
  },
  {
    "text": "avoiding having to go through the whole",
    "start": "968639",
    "end": "970560"
  },
  {
    "text": "ip stack on the host",
    "start": "970560",
    "end": "974000"
  },
  {
    "text": "and this leads to some genuine",
    "start": "974000",
    "end": "976000"
  },
  {
    "start": "976000",
    "end": "976000"
  },
  {
    "text": "performance improvements we can see this",
    "start": "976000",
    "end": "978320"
  },
  {
    "text": "in another flame graph here we can see",
    "start": "978320",
    "end": "981040"
  },
  {
    "text": "the what's happening when a packet is",
    "start": "981040",
    "end": "984399"
  },
  {
    "text": "received",
    "start": "984399",
    "end": "985759"
  },
  {
    "text": "it spends some time being received in",
    "start": "985759",
    "end": "988320"
  },
  {
    "text": "ebpf on the host",
    "start": "988320",
    "end": "990320"
  },
  {
    "text": "and then it's sent into the tcp stack",
    "start": "990320",
    "end": "993680"
  },
  {
    "text": "within a pod",
    "start": "993680",
    "end": "995440"
  },
  {
    "text": "i think that",
    "start": "995440",
    "end": "996639"
  },
  {
    "text": "probably illustrates how that is more",
    "start": "996639",
    "end": "999279"
  },
  {
    "text": "efficient than it would be if we had to",
    "start": "999279",
    "end": "1000800"
  },
  {
    "text": "also run through the tcp stack on the",
    "start": "1000800",
    "end": "1003600"
  },
  {
    "text": "host",
    "start": "1003600",
    "end": "1004639"
  },
  {
    "text": "but more importantly we measured it",
    "start": "1004639",
    "end": "1007759"
  },
  {
    "text": "and there's lots of details in this cni",
    "start": "1007759",
    "end": "1010800"
  },
  {
    "text": "benchmarking blog post",
    "start": "1010800",
    "end": "1012480"
  },
  {
    "text": "on the psyllium site",
    "start": "1012480",
    "end": "1015839"
  },
  {
    "text": "the blue line on the left here shows how",
    "start": "1015839",
    "end": "1019199"
  },
  {
    "text": "fast requests and responses can",
    "start": "1019199",
    "end": "1022560"
  },
  {
    "text": "happen",
    "start": "1022560",
    "end": "1024240"
  },
  {
    "text": "with no containerization at all so",
    "start": "1024240",
    "end": "1026558"
  },
  {
    "text": "sending and receiving between two",
    "start": "1026559",
    "end": "1029038"
  },
  {
    "text": "nodes",
    "start": "1029039",
    "end": "1031199"
  },
  {
    "text": "the",
    "start": "1031199",
    "end": "1032240"
  },
  {
    "text": "red and the orange bars show that we can",
    "start": "1032240",
    "end": "1034558"
  },
  {
    "text": "achieve",
    "start": "1034559",
    "end": "1035918"
  },
  {
    "text": "very close to the same network",
    "start": "1035919",
    "end": "1039438"
  },
  {
    "text": "performance",
    "start": "1039439",
    "end": "1040880"
  },
  {
    "text": "using ebpf the",
    "start": "1040880",
    "end": "1043199"
  },
  {
    "text": "the psyllium and calico in ebpf modes in",
    "start": "1043199",
    "end": "1047280"
  },
  {
    "text": "those red and orange bars and you can",
    "start": "1047280",
    "end": "1049200"
  },
  {
    "text": "see that's significantly better than the",
    "start": "1049200",
    "end": "1052400"
  },
  {
    "text": "yellow and green bars in the middle",
    "start": "1052400",
    "end": "1054080"
  },
  {
    "text": "where that's psyllium and calico",
    "start": "1054080",
    "end": "1056960"
  },
  {
    "text": "in non-ebpf mode",
    "start": "1056960",
    "end": "1059360"
  },
  {
    "text": "so the takeaway here is ebpf networking",
    "start": "1059360",
    "end": "1062320"
  },
  {
    "text": "can enable",
    "start": "1062320",
    "end": "1064720"
  },
  {
    "text": "faster networking",
    "start": "1064720",
    "end": "1066640"
  },
  {
    "text": "and there's a lot more detail in that",
    "start": "1066640",
    "end": "1069120"
  },
  {
    "text": "benchmark blog post",
    "start": "1069120",
    "end": "1072320"
  },
  {
    "text": "so ebpf",
    "start": "1072799",
    "end": "1074960"
  },
  {
    "text": "allows us to build this huge range of",
    "start": "1074960",
    "end": "1078080"
  },
  {
    "text": "different networking and observability",
    "start": "1078080",
    "end": "1080160"
  },
  {
    "text": "and security tools",
    "start": "1080160",
    "end": "1083280"
  },
  {
    "text": "but the characteristic of being able to",
    "start": "1083280",
    "end": "1086000"
  },
  {
    "text": "see everything that's happening across",
    "start": "1086000",
    "end": "1088320"
  },
  {
    "text": "an entire node gives us another really",
    "start": "1088320",
    "end": "1090559"
  },
  {
    "text": "significant advantage",
    "start": "1090559",
    "end": "1093039"
  },
  {
    "text": "that is we don't need to change the",
    "start": "1093039",
    "end": "1096640"
  },
  {
    "text": "application or the way",
    "start": "1096640",
    "end": "1098799"
  },
  {
    "text": "an app is configured",
    "start": "1098799",
    "end": "1100480"
  },
  {
    "text": "in order to instrument it with ebpf",
    "start": "1100480",
    "end": "1104799"
  },
  {
    "text": "contrast that to the sidecar model that",
    "start": "1104799",
    "end": "1107440"
  },
  {
    "text": "we typically use for a lot of",
    "start": "1107440",
    "end": "1109200"
  },
  {
    "text": "instrumentation in the kubernetes world",
    "start": "1109200",
    "end": "1112880"
  },
  {
    "text": "nathan leclaire did this really great",
    "start": "1112880",
    "end": "1115360"
  },
  {
    "text": "cartoon",
    "start": "1115360",
    "end": "1116640"
  },
  {
    "text": "illustrating how ebpf is",
    "start": "1116640",
    "end": "1120480"
  },
  {
    "text": "a really great uh new model for",
    "start": "1120480",
    "end": "1123840"
  },
  {
    "text": "instrumenting applications",
    "start": "1123840",
    "end": "1126799"
  },
  {
    "text": "let's explain why that is",
    "start": "1126799",
    "end": "1130000"
  },
  {
    "start": "1129000",
    "end": "1129000"
  },
  {
    "text": "in a sidecar model we have a container",
    "start": "1130000",
    "end": "1133600"
  },
  {
    "text": "for the",
    "start": "1133600",
    "end": "1134880"
  },
  {
    "text": "instrumentation",
    "start": "1134880",
    "end": "1136559"
  },
  {
    "text": "that's injected into the application pod",
    "start": "1136559",
    "end": "1141360"
  },
  {
    "text": "in order to get that sidecar into the",
    "start": "1141360",
    "end": "1143600"
  },
  {
    "text": "pod there has to be yaml definition",
    "start": "1143600",
    "end": "1148000"
  },
  {
    "start": "1144000",
    "end": "1144000"
  },
  {
    "text": "now",
    "start": "1148000",
    "end": "1149280"
  },
  {
    "text": "you probably don't have to manually",
    "start": "1149280",
    "end": "1150960"
  },
  {
    "text": "configure that yaml it's probably done",
    "start": "1150960",
    "end": "1152960"
  },
  {
    "text": "as part of an automated process perhaps",
    "start": "1152960",
    "end": "1155520"
  },
  {
    "text": "in ci cd perhaps",
    "start": "1155520",
    "end": "1158080"
  },
  {
    "text": "through an admission control web hook",
    "start": "1158080",
    "end": "1160400"
  },
  {
    "text": "something adds the yaml definition for",
    "start": "1160400",
    "end": "1163120"
  },
  {
    "text": "the sidecar container into the pod",
    "start": "1163120",
    "end": "1166480"
  },
  {
    "text": "specification",
    "start": "1166480",
    "end": "1169360"
  },
  {
    "text": "but what if that goes wrong or what if",
    "start": "1170080",
    "end": "1172400"
  },
  {
    "text": "somehow an application doesn't go",
    "start": "1172400",
    "end": "1174720"
  },
  {
    "text": "through that automated process",
    "start": "1174720",
    "end": "1177440"
  },
  {
    "text": "if you don't have the sidecar in the pod",
    "start": "1177440",
    "end": "1180640"
  },
  {
    "text": "it's not instrumented you have to get",
    "start": "1180640",
    "end": "1183440"
  },
  {
    "text": "that sidecar successfully configured",
    "start": "1183440",
    "end": "1185520"
  },
  {
    "text": "into every application pod that you want",
    "start": "1185520",
    "end": "1188320"
  },
  {
    "text": "to instrument",
    "start": "1188320",
    "end": "1191880"
  },
  {
    "text": "that isn't the case if we're using evpf",
    "start": "1192240",
    "end": "1195200"
  },
  {
    "start": "1193000",
    "end": "1193000"
  },
  {
    "text": "because the ebpf is hooked into the",
    "start": "1195200",
    "end": "1198799"
  },
  {
    "text": "kernel the ebpf program is hooked into",
    "start": "1198799",
    "end": "1200880"
  },
  {
    "text": "the kernel",
    "start": "1200880",
    "end": "1202400"
  },
  {
    "text": "so it doesn't matter",
    "start": "1202400",
    "end": "1204320"
  },
  {
    "text": "the the pod yeah it can see what's",
    "start": "1204320",
    "end": "1206720"
  },
  {
    "text": "happening in any pod without any need to",
    "start": "1206720",
    "end": "1209440"
  },
  {
    "text": "change or reconfigure that pod",
    "start": "1209440",
    "end": "1213360"
  },
  {
    "text": "that makes it much more secure in terms",
    "start": "1213520",
    "end": "1216720"
  },
  {
    "text": "of",
    "start": "1216720",
    "end": "1218720"
  },
  {
    "text": "being able to see every application",
    "start": "1218720",
    "end": "1221039"
  },
  {
    "text": "that's running whether it got there by",
    "start": "1221039",
    "end": "1222960"
  },
  {
    "text": "fair means or foul if somebody manages",
    "start": "1222960",
    "end": "1225440"
  },
  {
    "text": "to maliciously run some code on your",
    "start": "1225440",
    "end": "1227760"
  },
  {
    "text": "cluster they probably won't go through",
    "start": "1227760",
    "end": "1229360"
  },
  {
    "text": "the trouble of adding a sidecar pod into",
    "start": "1229360",
    "end": "1232480"
  },
  {
    "text": "it with ebpf",
    "start": "1232480",
    "end": "1234799"
  },
  {
    "text": "it will be instrumented because it's",
    "start": "1234799",
    "end": "1236640"
  },
  {
    "text": "running on that shared kernel",
    "start": "1236640",
    "end": "1239679"
  },
  {
    "text": "if we use ebpf tooling to instrument our",
    "start": "1239679",
    "end": "1243440"
  },
  {
    "text": "kubernetes applications you've seen how",
    "start": "1243440",
    "end": "1246000"
  },
  {
    "text": "we're able to collect a really wide",
    "start": "1246000",
    "end": "1248480"
  },
  {
    "text": "range of",
    "start": "1248480",
    "end": "1250400"
  },
  {
    "text": "different information different",
    "start": "1250400",
    "end": "1252720"
  },
  {
    "text": "characteristics about our applications",
    "start": "1252720",
    "end": "1256159"
  },
  {
    "text": "and we can use that for security",
    "start": "1256159",
    "end": "1259200"
  },
  {
    "text": "forensics",
    "start": "1259200",
    "end": "1260799"
  },
  {
    "text": "here's an example of something that",
    "start": "1260799",
    "end": "1262080"
  },
  {
    "start": "1262000",
    "end": "1262000"
  },
  {
    "text": "we've been experimenting with in",
    "start": "1262080",
    "end": "1264080"
  },
  {
    "text": "psyllium",
    "start": "1264080",
    "end": "1265200"
  },
  {
    "text": "you've already seen how we can map",
    "start": "1265200",
    "end": "1267600"
  },
  {
    "text": "network flows to kubernetes identities",
    "start": "1267600",
    "end": "1270720"
  },
  {
    "text": "we know exactly which pods and services",
    "start": "1270720",
    "end": "1273600"
  },
  {
    "text": "are involved in any given networking",
    "start": "1273600",
    "end": "1276159"
  },
  {
    "text": "flow",
    "start": "1276159",
    "end": "1277919"
  },
  {
    "text": "you've also seen even in the hello world",
    "start": "1277919",
    "end": "1280400"
  },
  {
    "text": "example how we can see contextual",
    "start": "1280400",
    "end": "1283679"
  },
  {
    "text": "information about the process that was",
    "start": "1283679",
    "end": "1285760"
  },
  {
    "text": "involved",
    "start": "1285760",
    "end": "1286880"
  },
  {
    "text": "when a particular ebpf program was",
    "start": "1286880",
    "end": "1289360"
  },
  {
    "text": "triggered",
    "start": "1289360",
    "end": "1291120"
  },
  {
    "text": "if we combine those two things we can",
    "start": "1291120",
    "end": "1293280"
  },
  {
    "text": "get some really",
    "start": "1293280",
    "end": "1294880"
  },
  {
    "text": "deep insight into",
    "start": "1294880",
    "end": "1297760"
  },
  {
    "text": "what happened",
    "start": "1297760",
    "end": "1299039"
  },
  {
    "text": "perhaps for malicious activity",
    "start": "1299039",
    "end": "1302080"
  },
  {
    "text": "in this example we can see a pod that's",
    "start": "1302080",
    "end": "1305200"
  },
  {
    "text": "got network connections to two",
    "start": "1305200",
    "end": "1306960"
  },
  {
    "text": "completely legitimate",
    "start": "1306960",
    "end": "1308799"
  },
  {
    "text": "uh destinations twitter api and an",
    "start": "1308799",
    "end": "1312559"
  },
  {
    "text": "elastic search",
    "start": "1312559",
    "end": "1314799"
  },
  {
    "text": "service",
    "start": "1314799",
    "end": "1317799"
  },
  {
    "text": "we can also see exactly",
    "start": "1318000",
    "end": "1320799"
  },
  {
    "text": "which",
    "start": "1320799",
    "end": "1321840"
  },
  {
    "text": "pod has those connections but",
    "start": "1321840",
    "end": "1325760"
  },
  {
    "text": "within that which executable in which",
    "start": "1325760",
    "end": "1328240"
  },
  {
    "text": "process id in which container",
    "start": "1328240",
    "end": "1332480"
  },
  {
    "text": "generated those network connections",
    "start": "1332480",
    "end": "1335919"
  },
  {
    "text": "we can also see when this happened",
    "start": "1335919",
    "end": "1339280"
  },
  {
    "text": "so imagine that one of those",
    "start": "1339280",
    "end": "1341120"
  },
  {
    "text": "destinations were",
    "start": "1341120",
    "end": "1342880"
  },
  {
    "text": "was a",
    "start": "1342880",
    "end": "1344559"
  },
  {
    "text": "commander control center for malicious",
    "start": "1344559",
    "end": "1346400"
  },
  {
    "text": "activity or perhaps it's a",
    "start": "1346400",
    "end": "1347760"
  },
  {
    "text": "cryptocurrency mining pool",
    "start": "1347760",
    "end": "1350480"
  },
  {
    "text": "we'd be able to see exactly",
    "start": "1350480",
    "end": "1352880"
  },
  {
    "text": "what process caused that network",
    "start": "1352880",
    "end": "1355120"
  },
  {
    "text": "connection to that",
    "start": "1355120",
    "end": "1356880"
  },
  {
    "text": "dubious endpoint we'd be able to see",
    "start": "1356880",
    "end": "1359280"
  },
  {
    "text": "when it happened",
    "start": "1359280",
    "end": "1360400"
  },
  {
    "text": "we'd be able to see what pod",
    "start": "1360400",
    "end": "1362720"
  },
  {
    "text": "was presumably compromised and with this",
    "start": "1362720",
    "end": "1365360"
  },
  {
    "text": "information we would find it much easier",
    "start": "1365360",
    "end": "1368080"
  },
  {
    "text": "to track back whether the pod was",
    "start": "1368080",
    "end": "1370080"
  },
  {
    "text": "compromised at runtime or whether it was",
    "start": "1370080",
    "end": "1373840"
  },
  {
    "text": "already compromised before it was even",
    "start": "1373840",
    "end": "1376159"
  },
  {
    "text": "deployed perhaps at some point during",
    "start": "1376159",
    "end": "1378480"
  },
  {
    "text": "the the supply chain",
    "start": "1378480",
    "end": "1380960"
  },
  {
    "text": "this kind of deep forensic insight that",
    "start": "1380960",
    "end": "1383520"
  },
  {
    "text": "we're able to collect using ebpf is",
    "start": "1383520",
    "end": "1386960"
  },
  {
    "text": "hugely powerful",
    "start": "1386960",
    "end": "1389840"
  },
  {
    "text": "so i hope this has given you",
    "start": "1390480",
    "end": "1393120"
  },
  {
    "text": "some insight into why i believe evpf",
    "start": "1393120",
    "end": "1396960"
  },
  {
    "text": "and the ability to run custom code in",
    "start": "1396960",
    "end": "1399760"
  },
  {
    "text": "the kernel",
    "start": "1399760",
    "end": "1401039"
  },
  {
    "text": "is revolutionizing the kind of tools we",
    "start": "1401039",
    "end": "1403360"
  },
  {
    "text": "can build for networking and security",
    "start": "1403360",
    "end": "1405760"
  },
  {
    "text": "and observability it's creating a whole",
    "start": "1405760",
    "end": "1408320"
  },
  {
    "text": "new generation of amazingly powerful",
    "start": "1408320",
    "end": "1411120"
  },
  {
    "text": "tools to help you",
    "start": "1411120",
    "end": "1413039"
  },
  {
    "text": "operate your clusters safely",
    "start": "1413039",
    "end": "1417120"
  },
  {
    "text": "thank you so much for your time i do",
    "start": "1417120",
    "end": "1418799"
  },
  {
    "text": "hope you have questions so come and ask",
    "start": "1418799",
    "end": "1421120"
  },
  {
    "text": "me your questions and if you want to",
    "start": "1421120",
    "end": "1423039"
  },
  {
    "text": "find out more about ebpf",
    "start": "1423039",
    "end": "1425039"
  },
  {
    "text": "the foundation site is at ebpf.io",
    "start": "1425039",
    "end": "1428320"
  },
  {
    "text": "and of course you can find out more",
    "start": "1428320",
    "end": "1429679"
  },
  {
    "text": "about psyllium and about isovalent on",
    "start": "1429679",
    "end": "1432159"
  },
  {
    "text": "our websites",
    "start": "1432159",
    "end": "1433919"
  },
  {
    "text": "thank you",
    "start": "1433919",
    "end": "1437158"
  }
]