[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "all right good morning and welcome to our first and to your first session at kubecon uh north",
    "start": "399",
    "end": "6720"
  },
  {
    "text": "america 2021 in los angeles my name is archie i'm cncf ambassador",
    "start": "6720",
    "end": "11920"
  },
  {
    "text": "from canada i will be a host track please welcome our speakers uh",
    "start": "11920",
    "end": "17840"
  },
  {
    "text": "katrina veray uh sig lead instructor for six cli",
    "start": "17840",
    "end": "22960"
  },
  {
    "text": "she's also software engineer at apple and we have jeff regen",
    "start": "22960",
    "end": "29359"
  },
  {
    "text": "software stuff engineer at tesla though they are customized contributors",
    "start": "29359",
    "end": "35920"
  },
  {
    "text": "so please welcome them at our first talk",
    "start": "35920",
    "end": "41280"
  },
  {
    "text": "okay hello uh quick housekeeping items um at the end of the session you may",
    "start": "42879",
    "end": "48000"
  },
  {
    "text": "raise your hand and ask you a question i will be running around with microphone and helping uh to answer the questions",
    "start": "48000",
    "end": "53920"
  },
  {
    "text": "if you're watching us online you can also submit your questions in the q a box and we'll make sure your question is",
    "start": "53920",
    "end": "60800"
  },
  {
    "text": "answered thank you thank you thanks for the introduction okay so i'm jeff and this is katrina",
    "start": "60800",
    "end": "68080"
  },
  {
    "text": "we're going to talk about customizing customize with custom uh resources",
    "start": "68080",
    "end": "75680"
  },
  {
    "start": "75000",
    "end": "348000"
  },
  {
    "text": "uh thanks to the cncf for bringing us all here to i'm really glad to be at a live event this time around uh the",
    "start": "75920",
    "end": "81280"
  },
  {
    "text": "talk's gonna have three sections we're gonna talk about what is customized at least in the context of extending it",
    "start": "81280",
    "end": "87119"
  },
  {
    "text": "it's not going to be an introduction then we're going to go into talking about how you would use custom",
    "start": "87119",
    "end": "92240"
  },
  {
    "text": "client-side custom resources to do this extension and then go into the nuts and bolts of that",
    "start": "92240",
    "end": "97439"
  },
  {
    "text": "so first let me review what customize is so we can talk about extending it",
    "start": "97439",
    "end": "103280"
  },
  {
    "text": "it's three things uh it's a command line utility freestanding ammo editor that knows",
    "start": "103280",
    "end": "108960"
  },
  {
    "text": "about kubernetes it is a set of go modules right and it",
    "start": "108960",
    "end": "114720"
  },
  {
    "text": "is also a command in coupe cuddle so back in late 2009 or early 2019 late",
    "start": "114720",
    "end": "120960"
  },
  {
    "text": "2018 uh brian grant phil wittrock and others noticed that there were many missing",
    "start": "120960",
    "end": "126079"
  },
  {
    "text": "features outstanding issues include cuddle that kind of centered around doing edits to the client side data",
    "start": "126079",
    "end": "132879"
  },
  {
    "text": "either edits or creating data as opposed to what kubecuttle normally does which is edit the live cluster",
    "start": "132879",
    "end": "139920"
  },
  {
    "text": "so we wanted to fix or provide a fix for these features",
    "start": "139920",
    "end": "146160"
  },
  {
    "text": "but it was complicated we felt it was kind of big so we decided to do it outside of the contents of cube cuddle",
    "start": "146160",
    "end": "152239"
  },
  {
    "text": "because we figured we'd probably throw away a few versions so this resulted in some modules",
    "start": "152239",
    "end": "157440"
  },
  {
    "text": "which are now called by customizers there's a relatively thin cli",
    "start": "157440",
    "end": "162879"
  },
  {
    "text": "and the same modules are called by a coupe cuddle so",
    "start": "162879",
    "end": "168319"
  },
  {
    "text": "customizes configuration stream editor works with kubernetes yaml as i just said it's also very good with working",
    "start": "168319",
    "end": "173599"
  },
  {
    "text": "with variants now everybody has multiple environments uh multiple clusters multiple namespaces",
    "start": "173599",
    "end": "178959"
  },
  {
    "text": "maybe multiple namespaces and clusters and customize is really good at expressing the differences between these",
    "start": "178959",
    "end": "184640"
  },
  {
    "text": "different environments if you've got production staging and development and they all share like 90",
    "start": "184640",
    "end": "191280"
  },
  {
    "text": "of it in common customize allows you to succinctly describe the differences between these",
    "start": "191280",
    "end": "196480"
  },
  {
    "text": "different environments and it plays next we'll get so it can read information from git",
    "start": "196480",
    "end": "203760"
  },
  {
    "text": "and you're encouraged to write the information back into a git repository and it can be extended which is what the",
    "start": "203760",
    "end": "208879"
  },
  {
    "text": "core of this talk is going to be so what are the guiding principles when you're thinking about customize and",
    "start": "208879",
    "end": "214159"
  },
  {
    "text": "thinking about writing extensions first configuration is at rest is just data it",
    "start": "214159",
    "end": "221920"
  },
  {
    "text": "should be directly usable by kubernetes so we issue templating",
    "start": "221920",
    "end": "227040"
  },
  {
    "text": "we eschew domain specific languages we just want to see kubernetes ammo",
    "start": "227040",
    "end": "233680"
  },
  {
    "text": "second edits or generating again what should be done uh that that",
    "start": "233920",
    "end": "241040"
  },
  {
    "text": "operation should be described itself using kubernetes example so no matter where you look you see kubernetes",
    "start": "241040",
    "end": "247040"
  },
  {
    "text": "example uh whoops skipped a slide there",
    "start": "247040",
    "end": "252799"
  },
  {
    "text": "um this seems to be aggressive",
    "start": "253599",
    "end": "257518"
  },
  {
    "text": "not too close okay um so this is an example of a",
    "start": "258959",
    "end": "264639"
  },
  {
    "text": "layout for a very simple customized situation where you've got three um",
    "start": "264639",
    "end": "271680"
  },
  {
    "text": "you've got a three uh normal kubernetes files you want to make edits to them you you can edit them with vi or emacs or",
    "start": "271680",
    "end": "277919"
  },
  {
    "text": "whatever or you can drop a customization file in there to describe the edits that you'd like to perform and this makes",
    "start": "277919",
    "end": "283120"
  },
  {
    "text": "sense in in many different contexts which we're not going to go into today the customization file is the center",
    "start": "283120",
    "end": "289759"
  },
  {
    "text": "file on this screen it's saying add a name prefix add some labels do it to the service.yaml file so that",
    "start": "289759",
    "end": "296560"
  },
  {
    "text": "the service.yaml file on the left comes out standard out looking like the on the left your left comes out looking",
    "start": "296560",
    "end": "303360"
  },
  {
    "text": "like the file on the right so you invoke this by writing customize",
    "start": "303360",
    "end": "309759"
  },
  {
    "text": "build and then the path to the folder that has a customization file in it",
    "start": "309759",
    "end": "315520"
  },
  {
    "text": "there's no there's other flags you can apply here the flags don't affect the output the",
    "start": "315520",
    "end": "320639"
  },
  {
    "text": "only thing that does affect the output is the you can have a flag that says put the output into a bunch of",
    "start": "320639",
    "end": "327039"
  },
  {
    "text": "individual files one per resource with names that are generated from the resources kind and",
    "start": "327039",
    "end": "333759"
  },
  {
    "text": "name normally though you can just pipe it standard out and when you're doing development you",
    "start": "333759",
    "end": "339759"
  },
  {
    "text": "can pipe it directly into your kind cluster your kubernetes and docker",
    "start": "339759",
    "end": "345039"
  },
  {
    "text": "cluster that's running on your laptop you never do that in production though so what we have is customize",
    "start": "345039",
    "end": "351120"
  },
  {
    "start": "348000",
    "end": "375000"
  },
  {
    "text": "orchestrating transformers it reads the ammo from disc runs generators to create more ammo",
    "start": "351120",
    "end": "357680"
  },
  {
    "text": "feeds all that yaml into a pipeline or transformers and some of those transformers are listed up on the right there you've got a",
    "start": "357680",
    "end": "363840"
  },
  {
    "text": "patch transformer for you can do json patching you can do strategic merge patching you can change the namespace",
    "start": "363840",
    "end": "369600"
  },
  {
    "text": "modify the names add labels annotations and whatnot",
    "start": "369600",
    "end": "375280"
  },
  {
    "start": "375000",
    "end": "566000"
  },
  {
    "text": "so getting down into how we're going to extend customize here are two",
    "start": "376160",
    "end": "381919"
  },
  {
    "text": "customizations files that do exactly the same thing on the left is a short customization",
    "start": "381919",
    "end": "387759"
  },
  {
    "text": "file with one field in it that actually does stuff it's the name prefix field and it says add a name prefix bob hyphen",
    "start": "387759",
    "end": "395280"
  },
  {
    "text": "and that's going to add that name prefix to all of the resources in the view of the customization units",
    "start": "395280",
    "end": "400479"
  },
  {
    "text": "in this per view on the right [Music] there's no name prefix field there's a",
    "start": "400479",
    "end": "405680"
  },
  {
    "text": "transformers field and that has a list of",
    "start": "405680",
    "end": "410720"
  },
  {
    "text": "transformer specifications there's only one of them there there's only one transformer there it's the prefix suffix",
    "start": "410720",
    "end": "415840"
  },
  {
    "text": "transformer and there's a prefix field that says bob hyphen and there's a field spec that says",
    "start": "415840",
    "end": "422319"
  },
  {
    "text": "modify the data that's in the field that's at the jsonpath metadata name",
    "start": "422319",
    "end": "427520"
  },
  {
    "text": "now whoever owns this customization file could add more fields there and thus",
    "start": "427520",
    "end": "433039"
  },
  {
    "text": "uh have bob added to the value in those fields they could also add kind specifications",
    "start": "433039",
    "end": "438479"
  },
  {
    "text": "to limit the transformation to only apply to say deployments or cron jobs and leave ingress and services alone",
    "start": "438479",
    "end": "445680"
  },
  {
    "text": "so you get the full power by using the specification on the right it's just more verbose so at 90 of the time people",
    "start": "445680",
    "end": "452479"
  },
  {
    "text": "are going to use the thing on the left but this is the pathway to expansion so",
    "start": "452479",
    "end": "458639"
  },
  {
    "text": "on the left you see the same thing again that's the prefix suffix transformer um it represents there's a chunk of code",
    "start": "458639",
    "end": "464000"
  },
  {
    "text": "specified there and there's how do you configure that chunk of code to run and on the right there's a proposed",
    "start": "464000",
    "end": "471440"
  },
  {
    "text": "custom resource that's doing the same thing it's specifying a chunk of code in this case a containerized image",
    "start": "471440",
    "end": "477360"
  },
  {
    "text": "and there's going to be data in that custom resource spec telling that image telling that code",
    "start": "477360",
    "end": "482800"
  },
  {
    "text": "what to do so it's helpful for us it's helpful for",
    "start": "482800",
    "end": "489120"
  },
  {
    "text": "me anyway to think about how uh what problems we're going to solve and we with customer resources or",
    "start": "489120",
    "end": "495360"
  },
  {
    "text": "extensions and we put those into three different categories one is generation and then transformational validation",
    "start": "495360",
    "end": "501680"
  },
  {
    "text": "with generation you might take it you might want to create a config map from a basic amv file you might want to create",
    "start": "501680",
    "end": "507280"
  },
  {
    "text": "a kubernetes secret by exchanging your single sign-on token for some",
    "start": "507280",
    "end": "512399"
  },
  {
    "text": "passwords that you're pulling from hashicorp vault or you might want to do something really fancy generate a bunch of things in",
    "start": "512399",
    "end": "518479"
  },
  {
    "text": "grass service deployments for a java instead of java microservices in a spring spring with environment",
    "start": "518479",
    "end": "525599"
  },
  {
    "text": "if you're customizing your uh transformations and you're working you're developing your own say",
    "start": "525600",
    "end": "531760"
  },
  {
    "text": "server side custom resources and let's say you're you haven't debugged your reconciliation very well and you need to make sure that",
    "start": "531760",
    "end": "538320"
  },
  {
    "text": "you apply things to the cluster in the order that you like you might write a client-side reordering",
    "start": "538320",
    "end": "543920"
  },
  {
    "text": "function to just actually not modify the transfer the the individual resources but actually change the order in which",
    "start": "543920",
    "end": "549120"
  },
  {
    "text": "they appear in the animal stream and then finally you might want to do a validator",
    "start": "549120",
    "end": "554800"
  },
  {
    "text": "uh this is like a transformer that doesn't do any transformation it just simply fails with good error messages telling you what you've done this might",
    "start": "554800",
    "end": "561040"
  },
  {
    "text": "be a way to say constrain the number of replicas to some bound",
    "start": "561040",
    "end": "566560"
  },
  {
    "start": "566000",
    "end": "589000"
  },
  {
    "text": "okay so this slide is meant to trigger just ideas about the kinds of extensions you might want to write",
    "start": "567040",
    "end": "572959"
  },
  {
    "text": "there's all sorts of things you could do you could generate from helm you could write sidecar generators etc",
    "start": "572959",
    "end": "579200"
  },
  {
    "text": "and now katrina is going to talk about the whys and where fours",
    "start": "579200",
    "end": "586160"
  },
  {
    "text": "thanks jeff so hopefully now we have a good idea of",
    "start": "586320",
    "end": "592480"
  },
  {
    "start": "589000",
    "end": "664000"
  },
  {
    "text": "how customized extensions work and the many use cases that we could have for them but you might still have some questions about why you should build a",
    "start": "592480",
    "end": "598480"
  },
  {
    "text": "formal extension this way after all the fact that customized deals strictly in kubernetes data means that",
    "start": "598480",
    "end": "604399"
  },
  {
    "text": "it is easy to pipeline it with other tools and in some cases it might be easier to write a script than to build a formal",
    "start": "604399",
    "end": "610399"
  },
  {
    "text": "extension and maybe that makes sense as an option sometimes but building the functionality",
    "start": "610399",
    "end": "615519"
  },
  {
    "text": "as a customized extension has many benefits most of these come from the fact that extension follows so exactly in the",
    "start": "615519",
    "end": "621920"
  },
  {
    "text": "footsteps of core customized features as we're just seeing this means that the users of your",
    "start": "621920",
    "end": "626959"
  },
  {
    "text": "extension will retain customized properties that they know and love that is they retain a purely declarative",
    "start": "626959",
    "end": "633600"
  },
  {
    "text": "configuration that is fully encapsulated by their customization directly directory",
    "start": "633600",
    "end": "639839"
  },
  {
    "text": "and they can use the familiar customized resource model exclusively in making their edits they also are not exposed to any",
    "start": "639839",
    "end": "645920"
  },
  {
    "text": "templating and have no new language to learn on their part another awesome property of customized",
    "start": "645920",
    "end": "651360"
  },
  {
    "text": "extensions is that they're based on an open standard which means that if you build an extension for customize it's also going to work in some other",
    "start": "651360",
    "end": "657120"
  },
  {
    "text": "client-side configuration tools such as kept we're going to talk about that more later",
    "start": "657120",
    "end": "662640"
  },
  {
    "start": "664000",
    "end": "688000"
  },
  {
    "text": "since we've been describing this extension format as client-side custom resources another thing that might come to mind for you is the question of",
    "start": "666000",
    "end": "672640"
  },
  {
    "text": "when you use the client-side customers or pattern versus the server side traditional server-side custom",
    "start": "672640",
    "end": "678160"
  },
  {
    "text": "resources how do you decide well there are many benefits to moving more of your configuration management to",
    "start": "678160",
    "end": "684240"
  },
  {
    "text": "the client side and therefore earlier in your software development life cycle a really obvious one is that client-side",
    "start": "684240",
    "end": "690720"
  },
  {
    "start": "688000",
    "end": "702000"
  },
  {
    "text": "custom resources naturally do not require you to install anything in your clusters which can be a huge benefit",
    "start": "690720",
    "end": "696000"
  },
  {
    "text": "especially in some multi-tenant situations where crd installation might be not desired or not even possible",
    "start": "696000",
    "end": "702640"
  },
  {
    "start": "702000",
    "end": "781000"
  },
  {
    "text": "from an abstraction designer perspective there's also an advantage to the fact that the end user retains control over the final result",
    "start": "702640",
    "end": "708959"
  },
  {
    "text": "specifically the client-side version of this pattern is perfect for situations where you have an abstraction that your",
    "start": "708959",
    "end": "714000"
  },
  {
    "text": "concerns might become leaky over time for example imagine you're designing an app abstraction that wraps a deployment",
    "start": "714000",
    "end": "720240"
  },
  {
    "text": "and some best practices for your organization if you do it on the client side your end users are going to be able to use the",
    "start": "720240",
    "end": "726240"
  },
  {
    "text": "familiar language of customize to modify the deployment uh arbitrary fields of that deployment even after you generate",
    "start": "726240",
    "end": "733200"
  },
  {
    "text": "it and you don't have to require you don't have to expose any additional fields to let them make those arbitrary",
    "start": "733200",
    "end": "738800"
  },
  {
    "text": "modifications so your abstraction stays tight and yet they get the power to modify whatever they need",
    "start": "738800",
    "end": "745839"
  },
  {
    "text": "related to that uh once you have the results of your extension and the modifications that",
    "start": "746000",
    "end": "752639"
  },
  {
    "text": "your end users make all of that is going to still end up as gamble in your source control if you're",
    "start": "752639",
    "end": "758240"
  },
  {
    "text": "using github's best practices of course this provides greater auditability and change management change management",
    "start": "758240",
    "end": "763760"
  },
  {
    "text": "capabilities and then server-side implementation of the same thing would and then finally the fact that we're",
    "start": "763760",
    "end": "770320"
  },
  {
    "text": "fully finalizing our configuration on the client side also means that any problems with it can be surfaced earlier in the development life cycle that is",
    "start": "770320",
    "end": "776800"
  },
  {
    "text": "say they can be surfaced even before commit or maybe nci",
    "start": "776800",
    "end": "781600"
  },
  {
    "text": "so that sounds great right let's shift everything to the client well no",
    "start": "782399",
    "end": "787920"
  },
  {
    "start": "787000",
    "end": "859000"
  },
  {
    "text": "there are many use cases for server side custom resources that are really not suitable for being ported to",
    "start": "787920",
    "end": "793200"
  },
  {
    "text": "the client side notably server side custom resources should be completely side effect free",
    "start": "793200",
    "end": "798720"
  },
  {
    "text": "which means that they can only be used for abstractions that simply resolve to a set of resources",
    "start": "798720",
    "end": "803760"
  },
  {
    "text": "for example let's say you're designing a custom resource that's going to cause a database to be configured in a",
    "start": "803760",
    "end": "809200"
  },
  {
    "text": "third-party cloud somewhere well that is an enormous side effect and it should definitely not be happening",
    "start": "809200",
    "end": "814800"
  },
  {
    "text": "from a client side cr also um although customized extensions are really great way to validate",
    "start": "814800",
    "end": "821199"
  },
  {
    "text": "kubernetes resources they're generally not suitable for doing any sort of enforcement of either policies or",
    "start": "821199",
    "end": "826639"
  },
  {
    "text": "standards because as we were just mentioning in the benefits section the flip side of giving your users a control over the",
    "start": "826639",
    "end": "833279"
  },
  {
    "text": "final modifications is that they're always able to do that so uh you don't actually have full control",
    "start": "833279",
    "end": "839040"
  },
  {
    "text": "in typical workflows again over the final result after your extension runs",
    "start": "839040",
    "end": "844720"
  },
  {
    "text": "then finally you need to keep in mind when you're building extension that using extensions is going to add dependencies to your customized build",
    "start": "844720",
    "end": "851600"
  },
  {
    "text": "that's really important to keep in mind especially if you're not already committing the results of the build to",
    "start": "851600",
    "end": "856880"
  },
  {
    "text": "get so now we understand how extensions work",
    "start": "856880",
    "end": "862480"
  },
  {
    "start": "859000",
    "end": "868000"
  },
  {
    "text": "and what they're good for so let's have a look at what it's like to build one",
    "start": "862480",
    "end": "867680"
  },
  {
    "start": "868000",
    "end": "889000"
  },
  {
    "text": "first an important note about extensions and customize the type of extension that we're talking",
    "start": "869199",
    "end": "874720"
  },
  {
    "text": "about today isn't actually the only one that customize currently supports it's the one that we recommend though",
    "start": "874720",
    "end": "880720"
  },
  {
    "text": "customize actually has five different types of extensions all of which have been in alpha for quite some time",
    "start": "880720",
    "end": "886320"
  },
  {
    "text": "first we had a format for extensions that could be written as binaries or as go plugins and they had to be",
    "start": "886320",
    "end": "892320"
  },
  {
    "start": "889000",
    "end": "897000"
  },
  {
    "text": "installed imperatively by each end user then came a newer format that follows something called the krm",
    "start": "892320",
    "end": "898480"
  },
  {
    "start": "897000",
    "end": "956000"
  },
  {
    "text": "function specification this is actually the open specification that i was mentioning earlier it's",
    "start": "898480",
    "end": "903519"
  },
  {
    "text": "shared with other configuration management tools such as cats and this gives your extensions written in this format more reach",
    "start": "903519",
    "end": "910160"
  },
  {
    "text": "the newer format currently supports authoring as binaries in starlark or as containers",
    "start": "910160",
    "end": "915440"
  },
  {
    "text": "so this year we had a look at all this we decided that extensions are really important and we",
    "start": "915440",
    "end": "921680"
  },
  {
    "text": "really want to graduate them out of alpha but having these various ways of doing things having to maintain all of this",
    "start": "921680",
    "end": "927920"
  },
  {
    "text": "it's really not sustainable and it's pretty confusing so we have a proposal open that",
    "start": "927920",
    "end": "933120"
  },
  {
    "text": "deprecates the legacy plug-in styles and promotes the style that follows that newer specification",
    "start": "933120",
    "end": "939040"
  },
  {
    "text": "for the time being we recommend that you build containerized care and function specifically because starlark is also proposed for",
    "start": "939040",
    "end": "944880"
  },
  {
    "text": "deprecation and exec might undergo more small changes as part of the progression to stable whereas containerized functions were",
    "start": "944880",
    "end": "951199"
  },
  {
    "text": "expecting to graduate in fairly consistent state to the way they are now",
    "start": "951199",
    "end": "957120"
  },
  {
    "text": "if you're curious about the details of these plans please check out the caps that we have open we're going to include these links again",
    "start": "957120",
    "end": "962480"
  },
  {
    "text": "at the end of the slides and our slides are also available in the conference schedule so don't worry about copying it down",
    "start": "962480",
    "end": "968720"
  },
  {
    "start": "968000",
    "end": "998000"
  },
  {
    "text": "so as i was just saying to recap the recommendation uh we're highly encouraging extension authors who are",
    "start": "968720",
    "end": "974880"
  },
  {
    "text": "getting started today to build containerized care and function specifically and if you know go there's an easy way",
    "start": "974880",
    "end": "980639"
  },
  {
    "text": "to do this as part of customize there is a package called k yaml and uh it has a",
    "start": "980639",
    "end": "987839"
  },
  {
    "text": "function framework package uh that can be used to help you easily author",
    "start": "987839",
    "end": "992959"
  },
  {
    "text": "extensions so we're gonna look through we're going to walk through some examples of how to use that today",
    "start": "992959",
    "end": "999199"
  },
  {
    "start": "998000",
    "end": "1056000"
  },
  {
    "text": "let's get started with an example where we're going to build a transformer that does something really simple",
    "start": "1000079",
    "end": "1005839"
  },
  {
    "text": "what it's going to do is hide a single annotation that has a static key and a user controlled value",
    "start": "1005839",
    "end": "1011199"
  },
  {
    "text": "so in other words we're determining what the key is the user is giving us the value that's all they get to do we're",
    "start": "1011199",
    "end": "1016399"
  },
  {
    "text": "going to insert that annotation into all the resources they give us simple",
    "start": "1016399",
    "end": "1021680"
  },
  {
    "text": "so in our customization we want to write something like this this is what the end user should get to write",
    "start": "1021680",
    "end": "1027918"
  },
  {
    "text": "as you can see we have a transformer configuration it has its own kind the value annotator and we're using an api",
    "start": "1027919",
    "end": "1034319"
  },
  {
    "text": "version that is unique to our company in the transformer configuration the user is going to be supplying our",
    "start": "1034319",
    "end": "1040480"
  },
  {
    "text": "extension with that very important data that they want us to put in the annotation",
    "start": "1040480",
    "end": "1045839"
  },
  {
    "text": "so understand what this extension is going to need to do we're going to first take a step back and review what's going to happen to this",
    "start": "1045839",
    "end": "1051919"
  },
  {
    "text": "configuration when customized finds it as part of running the customized build",
    "start": "1051919",
    "end": "1057279"
  },
  {
    "start": "1056000",
    "end": "1097000"
  },
  {
    "text": "so going back to what we learned earlier in the presentation customize is essentially a series of generators that are going to feed their data into a",
    "start": "1057760",
    "end": "1063600"
  },
  {
    "text": "pipeline of transformers within that pipeline everything is configured with care",
    "start": "1063600",
    "end": "1069039"
  },
  {
    "text": "enamel inside the transformer pipeline itself the output of each transformer in turn",
    "start": "1069039",
    "end": "1074240"
  },
  {
    "text": "is passed to the next one in the line as the input and then finally we get our final yaml",
    "start": "1074240",
    "end": "1079600"
  },
  {
    "text": "result so in this case here we're making a transformer which means customize is",
    "start": "1079600",
    "end": "1084960"
  },
  {
    "text": "going to find that configuration we're writing in that transformers field",
    "start": "1084960",
    "end": "1090080"
  },
  {
    "text": "but then what is it going to do how will it know where to find the code we're writing",
    "start": "1090080",
    "end": "1097440"
  },
  {
    "text": "turns out that the transformer configuration i showed you previously was missing something super important the part that points customized to the",
    "start": "1098080",
    "end": "1104480"
  },
  {
    "text": "implementation we're about to build currently this is actually done with our annotation on the customer resource",
    "start": "1104480",
    "end": "1110080"
  },
  {
    "text": "though one of the open caps that i mentioned earlier proposes a way to remove this concern from the end user which would be really nice",
    "start": "1110080",
    "end": "1116000"
  },
  {
    "text": "for now though this is what the end user configuration is actually going to look like as you can see there's a direct",
    "start": "1116000",
    "end": "1122000"
  },
  {
    "text": "reference in there to a docker container that we're going to build and uh when customized gets to this step",
    "start": "1122000",
    "end": "1127280"
  },
  {
    "text": "in this transformers pipeline it's going to be able to read that annotation and say oh i know where to find the annotate the implementation for this value",
    "start": "1127280",
    "end": "1134240"
  },
  {
    "text": "annotator type and it's going to go get your docker container and execute it it's going to specifically pass the",
    "start": "1134240",
    "end": "1140559"
  },
  {
    "text": "resources that is accumulated so far from that pipeline that we're looking at to the docker container in a really",
    "start": "1140559",
    "end": "1146559"
  },
  {
    "text": "specific format we're going to take a look at next so that input format is a kubernetes",
    "start": "1146559",
    "end": "1153120"
  },
  {
    "start": "1149000",
    "end": "1199000"
  },
  {
    "text": "resource model api of course because everything customize is and it's called a resource list",
    "start": "1153120",
    "end": "1159840"
  },
  {
    "text": "this resource list is going to be passed to the extension on standard in and it looks it looks like this it's got",
    "start": "1159840",
    "end": "1165600"
  },
  {
    "text": "two fields that we care about today and these fields are determined by the way by that karen function specification",
    "start": "1165600",
    "end": "1170720"
  },
  {
    "text": "that i keep mentioning so the first field that we're interested in is the items field",
    "start": "1170720",
    "end": "1177039"
  },
  {
    "text": "items simply contains that list of resources that we've accumulated so far and that's in other words the resources",
    "start": "1177039",
    "end": "1182880"
  },
  {
    "text": "that we need to process in our extension the second part is called the function config field and the content there",
    "start": "1182880",
    "end": "1188400"
  },
  {
    "text": "probably looks pretty familiar by now it's that same client-side custom resource that we're using to define our extensions configuration",
    "start": "1188400",
    "end": "1194880"
  },
  {
    "text": "it's coming straight to us from that transformers field and the customization",
    "start": "1194880",
    "end": "1199600"
  },
  {
    "start": "1199000",
    "end": "1262000"
  },
  {
    "text": "it turns out that resource list is actually both the input and the output format required by the karen function specification so when we receive that",
    "start": "1199919",
    "end": "1207280"
  },
  {
    "text": "input on the left in the form of a resource list we're going to need to do our extensions work",
    "start": "1207280",
    "end": "1212480"
  },
  {
    "text": "and then we're going to need to output a resource list as our result so specifically what we're going to do",
    "start": "1212480",
    "end": "1218559"
  },
  {
    "text": "here in this example we're receiving a config map as the in the items list and",
    "start": "1218559",
    "end": "1224240"
  },
  {
    "text": "our job is to add annotations so we're going to go look in the function config we're going to see the important data",
    "start": "1224240",
    "end": "1229280"
  },
  {
    "text": "that we need to put on as the annotation we're going to put that onto our config map and then we're going to write the",
    "start": "1229280",
    "end": "1234799"
  },
  {
    "text": "transform config map into the items list the items field of the resource list",
    "start": "1234799",
    "end": "1240320"
  },
  {
    "text": "and finally we're going to output that resource list on standard out to get it back to customize",
    "start": "1240320",
    "end": "1245520"
  },
  {
    "text": "so would you actually implement this no no way customize has a really",
    "start": "1245520",
    "end": "1251200"
  },
  {
    "text": "powerful annotation feature built right in so you wouldn't bother doing this the purpose of this example is to just get",
    "start": "1251200",
    "end": "1256480"
  },
  {
    "text": "started with showing how easy it is to reproduce simple customized style transformations using the kml sdk",
    "start": "1256480",
    "end": "1262720"
  },
  {
    "text": "so let's take a look at that this here is the code the entire implementation of the simple",
    "start": "1262720",
    "end": "1267919"
  },
  {
    "text": "extension fits in just 26 lines of go let's zoom in on the interesting part",
    "start": "1267919",
    "end": "1274399"
  },
  {
    "start": "1274000",
    "end": "1322000"
  },
  {
    "text": "so the important thing to notice here is the signature of that function that we're implementing in the middle",
    "start": "1275120",
    "end": "1280240"
  },
  {
    "text": "it takes the list of items that we're getting from the resource list so the framework itself is going to take them",
    "start": "1280240",
    "end": "1285840"
  },
  {
    "text": "out of the resource list that received as input reading from standard in and pass it to our function here",
    "start": "1285840",
    "end": "1291600"
  },
  {
    "text": "items field then we're going to do the work that we want to do in in the body of function",
    "start": "1291600",
    "end": "1297520"
  },
  {
    "text": "and we have to return those items and again the framework is going to take care of taking those items that we give",
    "start": "1297520",
    "end": "1302799"
  },
  {
    "text": "it and writing them into a resource list outputting them on standard out as required by the uh specification",
    "start": "1302799",
    "end": "1309280"
  },
  {
    "text": "the other thing i want to point out about this example is the pipe e and set annotation helpers camel has a lot of",
    "start": "1309280",
    "end": "1314320"
  },
  {
    "text": "stuff like this that helps you do simple yaml manipulations for common transformations that you might want to implement",
    "start": "1314320",
    "end": "1321919"
  },
  {
    "text": "now let's move on to a more advanced use case here we're imagining that we're a platform maintainer and we want to",
    "start": "1323679",
    "end": "1329520"
  },
  {
    "text": "promote our company's best practices for spring boot applications we also want to avoid having to teach our end users how",
    "start": "1329520",
    "end": "1336400"
  },
  {
    "text": "to wire up ingress for their apps so what we decided to do is create a client-side custom resource for use in",
    "start": "1336400",
    "end": "1342000"
  },
  {
    "text": "customize it's going to be a customized extension notice that we're going to be asking the",
    "start": "1342000",
    "end": "1348240"
  },
  {
    "text": "user to give us two inputs in this case the image that's containing their code plus the domain that they want us to",
    "start": "1348240",
    "end": "1354080"
  },
  {
    "text": "expose their application at in all likelihood a real implementation of this would have a bunch more options but to keep it simple we're just going",
    "start": "1354080",
    "end": "1360000"
  },
  {
    "text": "to go with these fields let's start once again by looking at the",
    "start": "1360000",
    "end": "1365280"
  },
  {
    "start": "1362000",
    "end": "1407000"
  },
  {
    "text": "input and the output specification required by the krm function specification",
    "start": "1365280",
    "end": "1371039"
  },
  {
    "text": "so we have a resource list of course on both sides but in this example we see the",
    "start": "1371039",
    "end": "1376320"
  },
  {
    "text": "client side custom resource that we just looked at from our customization so now it's the spring boot up",
    "start": "1376320",
    "end": "1382000"
  },
  {
    "text": "and then we're going to work with an empty items in this case because if you think about what we're doing here we're not transforming anymore this time we're",
    "start": "1382000",
    "end": "1388000"
  },
  {
    "text": "a generator so if you look at the output that we need to create we have some items in our",
    "start": "1388000",
    "end": "1394080"
  },
  {
    "text": "items list specifically we've got a deployment a service an ingress network policy we're",
    "start": "1394080",
    "end": "1399600"
  },
  {
    "text": "going to have to generate those from scratch and we're gonna have to make sure they're all wired up together the way the user asks for",
    "start": "1399600",
    "end": "1406399"
  },
  {
    "start": "1407000",
    "end": "1450000"
  },
  {
    "text": "the first thing that we're going to do to implement something more sophisticated like this is define a type",
    "start": "1408159",
    "end": "1413520"
  },
  {
    "text": "and go that corresponds to that custom resource that we're exposing as you can see this type is going to have standard metadata inspect fields",
    "start": "1413520",
    "end": "1420320"
  },
  {
    "text": "that you would think a custom kubernetes object would have and we have a spec that actually has",
    "start": "1420320",
    "end": "1426320"
  },
  {
    "text": "three fields so we see the domain and image fields that we looked at earlier in the",
    "start": "1426320",
    "end": "1431840"
  },
  {
    "text": "end user configuration example but we also have a replicas field here we're going to implement that one as",
    "start": "1431840",
    "end": "1437919"
  },
  {
    "text": "being optional so you're going to see how that's easy to do as well since this struct is going to be",
    "start": "1437919",
    "end": "1443200"
  },
  {
    "text": "populated from haml you'll also notice a bunch of gamble tags here and that's going to be really important to remember",
    "start": "1443200",
    "end": "1449679"
  },
  {
    "start": "1450000",
    "end": "1481000"
  },
  {
    "text": "the next thing that we're going to need to do is implement a filter method on that type that has that same signature that we're just looking at in the basic",
    "start": "1451039",
    "end": "1457440"
  },
  {
    "text": "example it's going to take in a list of items coming from the resource list we're going to do whatever we need to do",
    "start": "1457440",
    "end": "1462880"
  },
  {
    "text": "to those items then we're going to return the resulting items and or an error as applicable",
    "start": "1462880",
    "end": "1468159"
  },
  {
    "text": "the framework is once again going to take care of reading for standard infras and it's going to call this filter function on our type",
    "start": "1468159",
    "end": "1474240"
  },
  {
    "text": "and it's going to take the items we give it put it back into a resource list and then it's standard up",
    "start": "1474240",
    "end": "1480720"
  },
  {
    "start": "1481000",
    "end": "1531000"
  },
  {
    "text": "camel actually has a variety of tools to help you implement the business logic of your function as well",
    "start": "1482320",
    "end": "1488400"
  },
  {
    "text": "earlier we saw some simple helpers that help you manipulate individual nodes like by adding annotations like we're",
    "start": "1488400",
    "end": "1493440"
  },
  {
    "text": "doing in the simple example but we also have some higher level tools here such as the template processor that",
    "start": "1493440",
    "end": "1499679"
  },
  {
    "text": "we're using in this example here what we're doing is we're creating a bunch of templates for all of those",
    "start": "1499679",
    "end": "1504960"
  },
  {
    "text": "many resources that we need to generate and we're putting them into an embedded directory then we're using the abstraction type",
    "start": "1504960",
    "end": "1511600"
  },
  {
    "text": "itself so that v1 alpha 1 java spring boot we're using that directly as template data",
    "start": "1511600",
    "end": "1520000"
  },
  {
    "text": "template processor type actually also has a bunch of other interesting features that we're not showing here including the ability to select subsets",
    "start": "1520000",
    "end": "1526720"
  },
  {
    "text": "of resources and apply patches to them which is a super handy operation",
    "start": "1526720",
    "end": "1532158"
  },
  {
    "start": "1531000",
    "end": "1554000"
  },
  {
    "text": "another thing that we might want to do especially because as i just said in this example we're using the user input",
    "start": "1532720",
    "end": "1538640"
  },
  {
    "text": "template data is validate that input before we actually run our filter luckily the framework makes this super",
    "start": "1538640",
    "end": "1544720"
  },
  {
    "text": "easy to do as well all you need to do is implement this validate method and the framework is",
    "start": "1544720",
    "end": "1549840"
  },
  {
    "text": "going to automatically call it before it calls your filter",
    "start": "1549840",
    "end": "1554320"
  },
  {
    "start": "1554000",
    "end": "1576000"
  },
  {
    "text": "then uh we might also want to implement defaulting and this is gonna how we're going to make that replicas field",
    "start": "1555840",
    "end": "1561600"
  },
  {
    "text": "optional so the end user in the example didn't give us any replicas field uh and we're going to implement this default",
    "start": "1561600",
    "end": "1567600"
  },
  {
    "text": "method that detects that and sets it to three for us so this is also going to be called",
    "start": "1567600",
    "end": "1572640"
  },
  {
    "text": "automatically by the framework before filter is called",
    "start": "1572640",
    "end": "1577039"
  },
  {
    "start": "1576000",
    "end": "1593000"
  },
  {
    "text": "the framework even helps you make your custom resource api sustainable by versioning over time",
    "start": "1577760",
    "end": "1583360"
  },
  {
    "text": "this version api processor type that we're showing here essentially wraps related implementations and acts as a",
    "start": "1583360",
    "end": "1589279"
  },
  {
    "text": "dispatcher based on api version and kind the firmware has even more tools than we",
    "start": "1589279",
    "end": "1595760"
  },
  {
    "start": "1593000",
    "end": "1615000"
  },
  {
    "text": "have time to show off today notably it supports patching including for crds and at the container level which can help you do a bunch of really",
    "start": "1595760",
    "end": "1603200"
  },
  {
    "text": "handy operations it also has a suite of selector and matcher tools that can help you target exactly the resources that you want",
    "start": "1603200",
    "end": "1610240"
  },
  {
    "text": "it can even help you kick-start containerization by generating your docker file",
    "start": "1610240",
    "end": "1615679"
  },
  {
    "start": "1615000",
    "end": "1631000"
  },
  {
    "text": "so now that we've seen an example of how to build extensions i'm going to pass it back to jeff to discuss some best practices that you should keep in mind",
    "start": "1616320",
    "end": "1622320"
  },
  {
    "text": "when authoring for customize thanks",
    "start": "1622320",
    "end": "1627679"
  },
  {
    "text": "okay best practices uh first keep your uh extensions",
    "start": "1627679",
    "end": "1634559"
  },
  {
    "start": "1631000",
    "end": "1683000"
  },
  {
    "text": "declarative the whole thing about customize is to keep everything declarative so nothing should depend on flags nothing",
    "start": "1634559",
    "end": "1641200"
  },
  {
    "text": "should depend on environment variables or any kind of outside resource or to the extent that you can limit it",
    "start": "1641200",
    "end": "1646990"
  },
  {
    "text": "[Music] the output should be deterministic so think in terms of unit tests if your",
    "start": "1646990",
    "end": "1652640"
  },
  {
    "text": "input doesn't change your output shouldn't change either so uh you want to have some predictable",
    "start": "1652640",
    "end": "1658159"
  },
  {
    "text": "outcomes right as katrina just mentioned leverage the api version one of the reasons we want",
    "start": "1658159",
    "end": "1663919"
  },
  {
    "text": "to use custom resources rather than inventing some other new way of doing this is to leverage all these concepts",
    "start": "1663919",
    "end": "1669120"
  },
  {
    "text": "that we all know so use the api version field to keep the uh your existing users of your extensions",
    "start": "1669120",
    "end": "1674960"
  },
  {
    "text": "happy while you move into the future with maybe possibly breaking changes and finally uh testing is important",
    "start": "1674960",
    "end": "1683279"
  },
  {
    "start": "1683000",
    "end": "1720000"
  },
  {
    "text": "uh anybody trying to get you to use a framework the first question you should ask is well how do i test things",
    "start": "1683279",
    "end": "1688960"
  },
  {
    "text": "so this should be recognizable that anybody's done go unit testing so if you're working in go and of course you can use any language you want because",
    "start": "1688960",
    "end": "1694799"
  },
  {
    "text": "the uh the underlying format is a container but if you're using go you can use this",
    "start": "1694799",
    "end": "1700320"
  },
  {
    "text": "where you see the word processor just put in transformer or generator or whatever and you can specify the inputs into that",
    "start": "1700320",
    "end": "1706960"
  },
  {
    "text": "thing exp and specify the expected outputs and you can also specify inputs that generate errors so you can check",
    "start": "1706960",
    "end": "1713360"
  },
  {
    "text": "that the errors are what you want that's important for validators because that's the whole business in life is to report errors",
    "start": "1713360",
    "end": "1720640"
  },
  {
    "start": "1720000",
    "end": "1795000"
  },
  {
    "text": "stepping back to the bigger picture customize is part of a cd",
    "start": "1721919",
    "end": "1728399"
  },
  {
    "text": "pipeline and it wants you work with git and we recommend using what's called a hydrated repository so",
    "start": "1728399",
    "end": "1734740"
  },
  {
    "text": "[Music] imagine you do a deployment you run customized build and you're using all these extensions and now you're using",
    "start": "1734740",
    "end": "1740480"
  },
  {
    "text": "containers in your pipeline you've just introduced some risk there's the usual risk which we've all been",
    "start": "1740480",
    "end": "1746480"
  },
  {
    "text": "bearing for many years now pulling down the containers of the internet you mitigate that by using a trusted catalog",
    "start": "1746480",
    "end": "1752720"
  },
  {
    "text": "right but the new risk is now you've got an extra piece that's running in your cd pipeline and something could go wrong",
    "start": "1752720",
    "end": "1759039"
  },
  {
    "text": "so what you do is you put uh you run customize build you put the output into a repository",
    "start": "1759039",
    "end": "1764480"
  },
  {
    "text": "usually with a robot right and then a robot also reads a repository on say a tag event and deploys to the cluster",
    "start": "1764480",
    "end": "1771840"
  },
  {
    "text": "so now if something goes wrong as the british would say your cluster goes pairs up pair up or pear shape",
    "start": "1771840",
    "end": "1777919"
  },
  {
    "text": "you can do a rollback easily by just telling the robot go apply the last tag you don't have to",
    "start": "1777919",
    "end": "1783039"
  },
  {
    "text": "worry about running customize build or going back to the original dry material finding the tag you checked in and then",
    "start": "1783039",
    "end": "1789039"
  },
  {
    "text": "going rolling back to that tag and then running customize build again",
    "start": "1789039",
    "end": "1795080"
  },
  {
    "text": "okay so here's the link slide uh that's where customize lives there's",
    "start": "1795440",
    "end": "1800640"
  },
  {
    "text": "extension documentation there there is uh the kml live framework that we were just",
    "start": "1800640",
    "end": "1807440"
  },
  {
    "text": "talking about as listed there there's some caps that are talking about future plans um especially the catalog which is a",
    "start": "1807440",
    "end": "1813679"
  },
  {
    "text": "cool project there's a contributing file at the site i would recommend anybody here who is interested in writing go or contributing",
    "start": "1813679",
    "end": "1820399"
  },
  {
    "text": "to kubernetes in general to come take a look at the contributing file look at issues that are marked help wanted turns",
    "start": "1820399",
    "end": "1826960"
  },
  {
    "text": "out customize has been a great place for many people to start working on kubernetes",
    "start": "1826960",
    "end": "1832080"
  },
  {
    "text": "lots of people started here even just writing documentation and now they're doing releases or now they are",
    "start": "1832080",
    "end": "1837840"
  },
  {
    "text": "six cli tech leads so um it's a good place to get started and and and get involved with the six cli",
    "start": "1837840",
    "end": "1844580"
  },
  {
    "text": "[Music] that's it right awesome",
    "start": "1844580",
    "end": "1851799"
  },
  {
    "text": "all right uh thank you katrina and jeff for amazing presentation we are now have few minutes uh for your questions uh so",
    "start": "1852960",
    "end": "1860240"
  },
  {
    "text": "actually we have a few questions that our users asking online uh first question from daniel uh how do you",
    "start": "1860240",
    "end": "1867200"
  },
  {
    "text": "how would we combine customized with home charts yeah is is there any ways that uh they",
    "start": "1867200",
    "end": "1872880"
  },
  {
    "text": "can be you know used together yes you want to take that or should i",
    "start": "1872880",
    "end": "1878080"
  },
  {
    "text": "take that sure uh yeah i can take it we have a built-in helm generator function",
    "start": "1878080",
    "end": "1883360"
  },
  {
    "text": "right now um that you can use that it has evolved over time uh and the latest version of it requires you to set",
    "start": "1883360",
    "end": "1889760"
  },
  {
    "text": "additional flags on the command line invocation of customize but it works as a generator so we talked about",
    "start": "1889760",
    "end": "1895679"
  },
  {
    "text": "generators today part of that generator pipeline is just going to read your your home chart",
    "start": "1895679",
    "end": "1900720"
  },
  {
    "text": "and send the results through to the next thing in line another thing that you could do is you",
    "start": "1900720",
    "end": "1905760"
  },
  {
    "text": "if if the built-in extension doesn't expose the home options that you want you can build an extension generator",
    "start": "1905760",
    "end": "1911519"
  },
  {
    "text": "extension like we were talking about today that that renders home in fact the kept folks have created an extension",
    "start": "1911519",
    "end": "1919120"
  },
  {
    "text": "generator for helm that follows the care and function specification so that's yet another option that you can use",
    "start": "1919120",
    "end": "1926480"
  },
  {
    "text": "to to bring those two tools together awesome i think another question is very similar",
    "start": "1926480",
    "end": "1932559"
  },
  {
    "text": "would it be possible to combine gold templating with customize no i just got done saying that the one",
    "start": "1932559",
    "end": "1938720"
  },
  {
    "text": "of the guiding principles is we're not going to do that at least we want the raw material the material",
    "start": "1938720",
    "end": "1943840"
  },
  {
    "text": "the configuration at rest to be just normal kubernetes ammo uh no templates",
    "start": "1943840",
    "end": "1948960"
  },
  {
    "text": "and no uh no designs uh domain specific language i i guess a caveat on that yeah the",
    "start": "1948960",
    "end": "1955440"
  },
  {
    "text": "cameo and that was that uh you might have noticed we had template processor as part of the extension guide there so",
    "start": "1955440",
    "end": "1962480"
  },
  {
    "text": "template if you want to use templating we recommend that you hide it behind a formal api right so you're defining your",
    "start": "1962480",
    "end": "1967760"
  },
  {
    "text": "formal type it has the fields your end users are working with pure kubernetes data like they would always with",
    "start": "1967760",
    "end": "1973360"
  },
  {
    "text": "customize but then within your extension if you so choose you can use templating in there and you're not exposing it to",
    "start": "1973360",
    "end": "1979360"
  },
  {
    "text": "your end users at that point so that's an implementation detail yes you could write it in parole if you wanted",
    "start": "1979360",
    "end": "1985360"
  },
  {
    "text": "exactly awesome uh there's actually i'm gonna take last question from virtual attendees and then i will be asking you",
    "start": "1985360",
    "end": "1992960"
  },
  {
    "text": "but actually i can answer that question would it be possible",
    "start": "1992960",
    "end": "1997760"
  },
  {
    "text": "what is possible uh the compatibility of customizable tools like argo cd or",
    "start": "1998000",
    "end": "2004880"
  },
  {
    "text": "flux um so if you look into the documentation of flux or argo cd there's actually a",
    "start": "2004880",
    "end": "2011200"
  },
  {
    "text": "the whole chapter around how to use customize so get up storing fully supporting right now",
    "start": "2011200",
    "end": "2017360"
  },
  {
    "text": "the customized so any questions here okay",
    "start": "2017360",
    "end": "2022610"
  },
  {
    "text": "[Music] i wanted to ask so i happen to have the sad task of",
    "start": "2022610",
    "end": "2028720"
  },
  {
    "text": "maintaining the capability of installing manifest across a very large set of kubernetes",
    "start": "2028720",
    "end": "2034000"
  },
  {
    "text": "versions so today i support all the way from 117 to like the head of master on kk",
    "start": "2034000",
    "end": "2040000"
  },
  {
    "text": "does is there any provisions for making it easier to like",
    "start": "2040000",
    "end": "2045039"
  },
  {
    "text": "as a for example you know certain apis get deprecated and removed and later kubernetes versions new versions get added",
    "start": "2045039",
    "end": "2050878"
  },
  {
    "text": "uh it would be nice to have some capability to express that like hey if it's like a 122 cluster you can use this",
    "start": "2050879",
    "end": "2057200"
  },
  {
    "text": "new api but if it's not use the old one or whatever right so",
    "start": "2057200",
    "end": "2063359"
  },
  {
    "text": "[Music] so you're talking about um you've got multiple clusters running at different",
    "start": "2063639",
    "end": "2069440"
  },
  {
    "text": "versions and you would like to have customize manage that or you'd have",
    "start": "2069440",
    "end": "2075440"
  },
  {
    "text": "maybe use is can customize be used to help you manage that yeah like i don't want to",
    "start": "2075440",
    "end": "2080720"
  },
  {
    "text": "i don't want to have to like maintain distinct manifest for distinct kubernetes api versions over time right",
    "start": "2080720",
    "end": "2086480"
  },
  {
    "text": "i want to have the same manifest but tweaked like it's a 116 cluster so i have to use like",
    "start": "2086480",
    "end": "2092398"
  },
  {
    "text": "the beta api for crds not the v1 because it didn't yeah i mean i may be wrong this sounds like a perfect use for",
    "start": "2092399",
    "end": "2098320"
  },
  {
    "start": "2096000",
    "end": "2209000"
  },
  {
    "text": "variants i mean this is kind of customizes stock and trade",
    "start": "2098320",
    "end": "2103359"
  },
  {
    "text": "you figure out what you have in common between these different environments or these different versions and that becomes your base and then you",
    "start": "2103359",
    "end": "2109839"
  },
  {
    "text": "use a different customization to modify those modify your base to head",
    "start": "2109839",
    "end": "2115680"
  },
  {
    "text": "off to your your various variants after your various versions",
    "start": "2115680",
    "end": "2120720"
  },
  {
    "text": "if you wanted to sort of extract over the different like api changes for for some end users to say or if you want to",
    "start": "2120720",
    "end": "2126960"
  },
  {
    "text": "do this yourself you could do that in extension because extension's one of the tools that we have allows you to select on on",
    "start": "2126960",
    "end": "2133680"
  },
  {
    "text": "different resources that exist in the source so you can even theoretically identify that the input stream has the",
    "start": "2133680",
    "end": "2140160"
  },
  {
    "text": "older api versions and as part of your extension spec you could you can include that cluster version you could like",
    "start": "2140160",
    "end": "2146800"
  },
  {
    "text": "inside your extensions business logic you could look up well what api versions are supported here and you could even do the",
    "start": "2146800",
    "end": "2152800"
  },
  {
    "text": "conversion internally since you're writing a full program there you can do essentially whatever whatever you would",
    "start": "2152800",
    "end": "2158720"
  },
  {
    "text": "like you just got to expose the data that you need to on to form the basis of those decisions um in in the api that",
    "start": "2158720",
    "end": "2165359"
  },
  {
    "text": "that that you're configuring and then uh and then you can take care of that within the extension um and since you're",
    "start": "2165359",
    "end": "2172079"
  },
  {
    "text": "you're writing a full program there you can you can use the testing framework that we that we uh we're showing off",
    "start": "2172079",
    "end": "2177200"
  },
  {
    "text": "there to make sure that it's going to behave as expected right now there's no built-in api version modifier so if all you were",
    "start": "2177200",
    "end": "2184000"
  },
  {
    "text": "trying to do is like use like say a deployment at beta v1 or something and you wanted to switch that",
    "start": "2184000",
    "end": "2189200"
  },
  {
    "text": "to just v1 i i don't think we have that but it would be relatively straightforward to build such a thing",
    "start": "2189200",
    "end": "2194880"
  },
  {
    "text": "all right thank you katrina jeff we we need to conclude our presentation because we're running out of the time if",
    "start": "2194880",
    "end": "2200640"
  },
  {
    "text": "you have any questions to speakers please reach out to them maybe you can talk at the both and thank you very much and",
    "start": "2200640",
    "end": "2206560"
  },
  {
    "text": "enjoy the rest of the cubecom",
    "start": "2206560",
    "end": "2210280"
  }
]