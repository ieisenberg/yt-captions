[
  {
    "text": "hi i'm ben hirschberg i'm going to talk to you today uh about how many cpu cycles you need to",
    "start": "80",
    "end": "7440"
  },
  {
    "text": "invest in your cloud security so really short about me um i'm an ex-white",
    "start": "7440",
    "end": "15120"
  },
  {
    "text": "hacker with a long history of security and testing and",
    "start": "15120",
    "end": "21840"
  },
  {
    "text": "development and today i'm an entrepreneur in the cloud native",
    "start": "21840",
    "end": "27680"
  },
  {
    "text": "field and the cloud native security field to be more precise um and i have a few hobbies one of them",
    "start": "27680",
    "end": "35200"
  },
  {
    "text": "is teaching uh and and i love to present such interesting things that like what",
    "start": "35200",
    "end": "41200"
  },
  {
    "text": "i'm going to present to you today so what we are going to do",
    "start": "41200",
    "end": "47120"
  },
  {
    "text": "today is we are going to talk about uh tls and in cloud native and how much we need",
    "start": "47120",
    "end": "52879"
  },
  {
    "text": "to invest in tls we are going to run some benchmarking tests",
    "start": "52879",
    "end": "58320"
  },
  {
    "text": "will try to understand how much really want me to invest in order to move from non-protected",
    "start": "58320",
    "end": "66159"
  },
  {
    "text": "connections to tls and we'll try to learn together how these numbers are built up and",
    "start": "66159",
    "end": "74159"
  },
  {
    "text": "and at the end hopefully i will able to to tell you a few improvements you can make",
    "start": "74159",
    "end": "79280"
  },
  {
    "text": "uh to to improve uh the time that your perfor uh tls",
    "start": "79280",
    "end": "84880"
  },
  {
    "text": "performance okay so why why are we talking about uh tls and cloud security at all so",
    "start": "84880",
    "end": "93200"
  },
  {
    "text": "uh in general obviously all of us know that that in the recent i can say 10",
    "start": "93200",
    "end": "100640"
  },
  {
    "text": "15 years uh uh cyber attacks has leaked to a higher level and we see",
    "start": "100640",
    "end": "108079"
  },
  {
    "text": "that these many many not just many money goes into the protection",
    "start": "108079",
    "end": "113520"
  },
  {
    "text": "but also a lot of money going into the attacks and uh and there is a big interest in",
    "start": "113520",
    "end": "119439"
  },
  {
    "text": "attacking systems and therefore when we are moving to cloud and somehow we are even",
    "start": "119439",
    "end": "127520"
  },
  {
    "text": "a little bit losing our connection with our physical systems we even need to invest a little bit more",
    "start": "127520",
    "end": "134640"
  },
  {
    "text": "into our security than before and tls is a cornerstone of cloud",
    "start": "134640",
    "end": "140840"
  },
  {
    "text": "security okay and also we have to do all of this while keeping our our expenses",
    "start": "140840",
    "end": "147040"
  },
  {
    "text": "uh at a reasonable level",
    "start": "147040",
    "end": "151040"
  },
  {
    "text": "okay okay so what is tls uh",
    "start": "154840",
    "end": "161680"
  },
  {
    "text": "i don't want to speak too much about it because this is not a security lecture uh i assume that you have some knowledge",
    "start": "161680",
    "end": "168080"
  },
  {
    "text": "of tls but just for the sake of of the discussion uh um centia's security uh communication",
    "start": "168080",
    "end": "176560"
  },
  {
    "text": "protocol today it uh uh it contains nearly all uh almost interesting secure proto uh",
    "start": "176560",
    "end": "184400"
  },
  {
    "text": "security features uh which we need in a secure connection",
    "start": "184400",
    "end": "189519"
  },
  {
    "text": "uh protocol uh we have confidentiality encryption integrity uh uh which is message authentication",
    "start": "189519",
    "end": "198080"
  },
  {
    "text": "uh authenticity where we can validate uh the communicate the communicating uh",
    "start": "198080",
    "end": "203840"
  },
  {
    "text": "parties in our connection and all these are given uh tias gives these features and it is does it by using",
    "start": "203840",
    "end": "211680"
  },
  {
    "text": "nearly all of the uh new uh um and modern uh uh crypto algorithms are around",
    "start": "211680",
    "end": "219599"
  },
  {
    "text": "in the world and and diaz continuously updates the list of of crypto algorithms depending on",
    "start": "219599",
    "end": "225360"
  },
  {
    "text": "whether a new algorithm comes up or or something becomes uh",
    "start": "225360",
    "end": "231040"
  },
  {
    "text": "broken and going forward what we need to",
    "start": "231040",
    "end": "237200"
  },
  {
    "text": "understand is what are the parts which are building up uh tls in order to understand",
    "start": "237200",
    "end": "242640"
  },
  {
    "text": "how much we need to invest we have to break the protocol into the into the part its parts and see which",
    "start": "242640",
    "end": "248480"
  },
  {
    "text": "parts does what and how much time it takes so um the handshake protocol",
    "start": "248480",
    "end": "254799"
  },
  {
    "text": "uh is is the first part of anything as connection establishment uh",
    "start": "254799",
    "end": "261199"
  },
  {
    "text": "it has two main goals okay one goal is to authenticate the the communication",
    "start": "261199",
    "end": "268080"
  },
  {
    "text": "uh uh parties uh in the connection whether it is a one-part tls uh which we call what a",
    "start": "268080",
    "end": "274880"
  },
  {
    "text": "single sided tls or a mutual tls where we are both",
    "start": "274880",
    "end": "280400"
  },
  {
    "text": "parties are authenticating the other uh what it does is uh is authenticate that we are we are",
    "start": "280400",
    "end": "286800"
  },
  {
    "text": "really talking to one to whom we wanted to talk and the second important part is that it",
    "start": "286800",
    "end": "293280"
  },
  {
    "text": "creates what we call a session key so handshake protocol is is uh um results in two things",
    "start": "293280",
    "end": "300960"
  },
  {
    "text": "main things one is the authentication of the peer the second is the creation of a session key now the",
    "start": "300960",
    "end": "307280"
  },
  {
    "text": "session key is a symmetric key okay the handshake protocol mostly is",
    "start": "307280",
    "end": "312800"
  },
  {
    "text": "based on asymmetric cryptography okay essentially i don't want to go into the deeper right now but but",
    "start": "312800",
    "end": "320479"
  },
  {
    "text": "in order to authenticate the peer without knowing its secret uh is based on by",
    "start": "320479",
    "end": "327039"
  },
  {
    "text": "asymmetric cryptography but asymmetric cryptography is a computationally high demanding",
    "start": "327039",
    "end": "333520"
  },
  {
    "text": "uh uh field okay and on contrary uh symmetry cryptography",
    "start": "333520",
    "end": "340320"
  },
  {
    "text": "is which is used by the application protocol uh is the less computationally",
    "start": "340320",
    "end": "345520"
  },
  {
    "text": "computational intensive uh uh field and therefore the",
    "start": "345520",
    "end": "353680"
  },
  {
    "text": "the main goals is of the henry protocol is to create a symmetric key between uh the two parties who haven't",
    "start": "353680",
    "end": "360560"
  },
  {
    "text": "met before and the application protocol which is the main part",
    "start": "360560",
    "end": "366080"
  },
  {
    "text": "from the application point of view of the tls protocol is actually",
    "start": "366080",
    "end": "371919"
  },
  {
    "text": "the part where where tls takes uh the application data let's be html or",
    "start": "371919",
    "end": "378160"
  },
  {
    "text": "grpc or any other kind of tcp uh based",
    "start": "378160",
    "end": "383360"
  },
  {
    "text": "protocol and wraps it in a secure uh enclosing encrypts the data and and",
    "start": "383360",
    "end": "390000"
  },
  {
    "text": "creates a message authenticating authentication code which enables the other side to validate they really got",
    "start": "390000",
    "end": "396080"
  },
  {
    "text": "the original message it wanted to get and this is done using symmetric cryptography using the",
    "start": "396080",
    "end": "402160"
  },
  {
    "text": "session key created in the handshake protocol the third part of of the cs uh protocol",
    "start": "402160",
    "end": "410000"
  },
  {
    "text": "is alert protocol which is not really interesting for the sake of of our discussion today",
    "start": "410000",
    "end": "415599"
  },
  {
    "text": "um but but for the completeness i'm telling you that there it exists in our particular it doesn't",
    "start": "415599",
    "end": "421440"
  },
  {
    "text": "have to really do something with cryptography it's only a way to alert the other side that something really went wrong",
    "start": "421440",
    "end": "427599"
  },
  {
    "text": "uh with with the signatures or or other parts of of",
    "start": "427599",
    "end": "432800"
  },
  {
    "text": "of the henship or the application protocol the other side that something is wrong and we are going to disconnect",
    "start": "432800",
    "end": "440319"
  },
  {
    "text": "so as i told you we are going to mostly talk about about cpu today um and",
    "start": "444160",
    "end": "451440"
  },
  {
    "text": "i wanted to give you an outline of of in computational in intensity of of the ng protocol",
    "start": "451440",
    "end": "458479"
  },
  {
    "text": "application protocol as the opening of our discussion um",
    "start": "458479",
    "end": "463520"
  },
  {
    "text": "if you look we look at tenshi pro coins how much cpu it needs as i told you before it is based on",
    "start": "463520",
    "end": "469199"
  },
  {
    "text": "asymmetric cryptography and asymmetric cryptography takes time and it takes cpu",
    "start": "469199",
    "end": "474960"
  },
  {
    "text": "so it's for a short time but it loads the cpu really uh pretty heavily relatively and and",
    "start": "474960",
    "end": "483599"
  },
  {
    "text": "and this has been taken into account um on the other hand the handshake",
    "start": "483599",
    "end": "489360"
  },
  {
    "text": "protocol itself doesn't use a really much ram i mean it uses a few kilobytes",
    "start": "489360",
    "end": "494960"
  },
  {
    "text": "but but it's not something that really worry us um all together and also from networks",
    "start": "494960",
    "end": "502240"
  },
  {
    "text": "perspective the handshake proco is um is taking a a few",
    "start": "502240",
    "end": "509680"
  },
  {
    "text": "kilobytes at the beginning of every session opening which if we compare",
    "start": "509680",
    "end": "515599"
  },
  {
    "text": "against pure tcp connections which was you know",
    "start": "515599",
    "end": "520640"
  },
  {
    "text": "a few tens of bytes there is some considerable addition at the at",
    "start": "520640",
    "end": "525920"
  },
  {
    "text": "connection opening and overhead to tls on the other hand if you look at the application protocol as",
    "start": "525920",
    "end": "532000"
  },
  {
    "text": "i told you before this a symmetric cryptography of the application protocol is rather relatively less cpu intensive",
    "start": "532000",
    "end": "539839"
  },
  {
    "text": "but obviously this has to take into account the the uh the number of bytes which is",
    "start": "539839",
    "end": "547360"
  },
  {
    "text": "being transferred over the application protocol so if we take the handshake protocol is given every connection open is",
    "start": "547360",
    "end": "553360"
  },
  {
    "text": "this is a constant number application protocol cpus it depends on the number of bytes which is meant to be",
    "start": "553360",
    "end": "559760"
  },
  {
    "text": "transferred over the connection therefore um this is really a relative",
    "start": "559760",
    "end": "566000"
  },
  {
    "text": "uh impression i can tell you at this stage but but but yeah it's a little less than",
    "start": "566000",
    "end": "572560"
  },
  {
    "text": "handshake cpu intensive than the handshake protocol itself the same goes from ram uh on from their",
    "start": "572560",
    "end": "580160"
  },
  {
    "text": "own perspective the application protocol is not really using more ram than than without",
    "start": "580160",
    "end": "586240"
  },
  {
    "text": "using without tls and also its overhead over the wire",
    "start": "586240",
    "end": "592959"
  },
  {
    "text": "is is pretty small it's like um 20 30 bytes uh per per dls frame which",
    "start": "592959",
    "end": "600000"
  },
  {
    "text": "is like something we can easily manage",
    "start": "600000",
    "end": "605440"
  },
  {
    "text": "i also wanted to before going into the benchmarking to talk about the types of tls and the use cases so we",
    "start": "605440",
    "end": "613120"
  },
  {
    "text": "have the north south traffic use case which is mostly the end point talking",
    "start": "613120",
    "end": "618160"
  },
  {
    "text": "to our backhand side to you usually today talking in the cloud into a application",
    "start": "618160",
    "end": "623920"
  },
  {
    "text": "load balancers of some kind type of or an ingress controller um",
    "start": "623920",
    "end": "629440"
  },
  {
    "text": "and there is dls termination usually at this stage so um usually the incoming tls",
    "start": "629440",
    "end": "635839"
  },
  {
    "text": "against the public internet is one-sided because usually the the client's",
    "start": "635839",
    "end": "641760"
  },
  {
    "text": "endpoints want to verify before they send some kind of authentication token or or or or",
    "start": "641760",
    "end": "649360"
  },
  {
    "text": "credential um they want to verify that they are talking to the right server um and there is no real point on",
    "start": "649360",
    "end": "657040"
  },
  {
    "text": "validating the endpoint uh identity at this stage so it's one-sided tls um",
    "start": "657040",
    "end": "664640"
  },
  {
    "text": "and and and usually we terminated somewhere at the beginning because usually application load balancers",
    "start": "664640",
    "end": "671279"
  },
  {
    "text": "ingress controllers usually want to look into uh the tls traffic into the traffic the",
    "start": "671279",
    "end": "677120"
  },
  {
    "text": "application level uh of the traffic in order to do uh",
    "start": "677120",
    "end": "682240"
  },
  {
    "text": "uh intelligent stuff um on the other side we have the east-west",
    "start": "682240",
    "end": "687680"
  },
  {
    "text": "traffic okay and up until the cloud transition okay we usually is",
    "start": "687680",
    "end": "692959"
  },
  {
    "text": "closed the east-west traffic within a firewall in into a perimeter but today going into",
    "start": "692959",
    "end": "698880"
  },
  {
    "text": "the cloud native world okay these old parameter setups",
    "start": "698880",
    "end": "704000"
  },
  {
    "text": "and concepts are less and less elastic and expandable and therefore",
    "start": "704000",
    "end": "711839"
  },
  {
    "text": "we are we see that more and more that that the east-west traffic needs to be protected because there is no clear perimeter",
    "start": "711839",
    "end": "719040"
  },
  {
    "text": "around it there are three uh i three examples which i brought in how to do east west",
    "start": "719040",
    "end": "725200"
  },
  {
    "text": "set up one is some which i called homebrew taking um taking existing applications and",
    "start": "725200",
    "end": "732240"
  },
  {
    "text": "adding tls to them which is a pretty con complex from demand from the operational part point of view",
    "start": "732240",
    "end": "739920"
  },
  {
    "text": "because we start to have to manage every service with its own private keys and certificates which is a",
    "start": "739920",
    "end": "747440"
  },
  {
    "text": "big fuss and therefore we have uh our service mesh solutions",
    "start": "747440",
    "end": "753040"
  },
  {
    "text": "uh like istio which are using side cars and within cyber armor we are using for",
    "start": "753040",
    "end": "759519"
  },
  {
    "text": "the same uh uh purpose we are using what you call the inline based setup where we are not using a a sidecar",
    "start": "759519",
    "end": "766399"
  },
  {
    "text": "proxy but we are adding an extra uh component to to the uh to the process in order to",
    "start": "766399",
    "end": "774079"
  },
  {
    "text": "upgrade existing connections to tls and both in history and our case we are managing the certificates and and",
    "start": "774079",
    "end": "780240"
  },
  {
    "text": "private keys instead of the application developers or",
    "start": "780240",
    "end": "785279"
  },
  {
    "text": "the operators okay well in this east-west case we see more dominance of of mutual tls",
    "start": "785279",
    "end": "792160"
  },
  {
    "text": "use case where both services which are talking to each other authenticating uh themselves to each",
    "start": "792160",
    "end": "798160"
  },
  {
    "text": "other okay and we have to know here that both mutual tls are adding extra cpu usage because of",
    "start": "798160",
    "end": "806160"
  },
  {
    "text": "the secondary authentication and the sidecar proxy is adding sram and cpu usage to the system",
    "start": "806160",
    "end": "814639"
  },
  {
    "text": "so my simple setup started from from adding uh using apache j meter",
    "start": "814639",
    "end": "821839"
  },
  {
    "text": "against a simple nginx static web server i've used different file sizes in the",
    "start": "821839",
    "end": "828320"
  },
  {
    "text": "static web servers one byte one kilobyte one megabyte uh and hundred megabytes",
    "start": "828320",
    "end": "834079"
  },
  {
    "text": "and i gave it four cpus per uh per microservice and i started to run",
    "start": "834079",
    "end": "841839"
  },
  {
    "text": "my bench my first benchmark and i got to image a really uh dramatic initial results",
    "start": "841839",
    "end": "848399"
  },
  {
    "text": "because what i saw that uh that if we are going moving from from clear to",
    "start": "848399",
    "end": "855440"
  },
  {
    "text": "to to tls are uh our performance is dropping very rapidly",
    "start": "855440",
    "end": "862320"
  },
  {
    "text": "so if i'm looking at the right side requests per second if i'm requesting a buy a one byte file",
    "start": "862320",
    "end": "868720"
  },
  {
    "text": "from the web server from going from uh 4 000 requests per second",
    "start": "868720",
    "end": "875199"
  },
  {
    "text": "to merely a 300 um if i'm going to the other other end of",
    "start": "875199",
    "end": "881600"
  },
  {
    "text": "of the scale and going to uh files with with the 100 megabyte uh",
    "start": "881600",
    "end": "887839"
  },
  {
    "text": "uh uh content i can see that although the ratio is not one to ten but",
    "start": "887839",
    "end": "894800"
  },
  {
    "text": "still one to four and it's it's pretty high ratio so at this time i i was you know not that i",
    "start": "894800",
    "end": "902800"
  },
  {
    "text": "was puzzled but i saw that that this is not really a good way to to to calculate things and get to",
    "start": "902800",
    "end": "909199"
  },
  {
    "text": "somewhere from here um and and i went through to start to",
    "start": "909199",
    "end": "914240"
  },
  {
    "text": "do some calculations during the bottom-up calculations to understand how much uh how much every part of the tos takes",
    "start": "914240",
    "end": "922320"
  },
  {
    "text": "and how much addition it gives to my existing application",
    "start": "922320",
    "end": "927760"
  },
  {
    "text": "using both network capture and after performance monitoring tools like perf",
    "start": "927760",
    "end": "935600"
  },
  {
    "text": "i've calculated rough numbers of of tia's handshake and i got the numbers",
    "start": "935600",
    "end": "941519"
  },
  {
    "text": "that that there's handshake constantly in every connection takes uh like around two milliseconds on the",
    "start": "941519",
    "end": "948880"
  },
  {
    "text": "client uh side and around one millisecond at cpu site uh the server side um",
    "start": "948880",
    "end": "957199"
  },
  {
    "text": "this is for for server certificate validation but if we are doing mutual certificate validation by two",
    "start": "957199",
    "end": "962959"
  },
  {
    "text": "sides then obviously the client cpu time goes up also server cpu time goes up a little bit",
    "start": "962959",
    "end": "968639"
  },
  {
    "text": "and i got a to um sorry i got to the measurements of of",
    "start": "968639",
    "end": "975440"
  },
  {
    "text": "2.5 milliseconds per side calculating the tls handshake",
    "start": "975440",
    "end": "983040"
  },
  {
    "text": "um now this is given uh uh one of the mod today's in 2020 the most",
    "start": "983040",
    "end": "988959"
  },
  {
    "text": "common uh uh key exchange and handshake algorithms like elliptic curve defilement with rsa",
    "start": "988959",
    "end": "995920"
  },
  {
    "text": "signatures and and two kilobits keys um i did the same",
    "start": "995920",
    "end": "1003199"
  },
  {
    "text": "try to them make up same rough numbers for for the application protocol when in the application protocol we do",
    "start": "1003199",
    "end": "1008480"
  },
  {
    "text": "encrypt uh every byte and and hash them also to create a message",
    "start": "1008480",
    "end": "1014079"
  },
  {
    "text": "authentication code um i got to the numbers of of uh",
    "start": "1014079",
    "end": "1019519"
  },
  {
    "text": "of uh 250 megabytes per second for an as",
    "start": "1019519",
    "end": "1024918"
  },
  {
    "text": "256 uh per bandwidth and for message authentication like 300 megabytes",
    "start": "1024919",
    "end": "1031760"
  },
  {
    "text": "per second for shell 3 to 56 okay and these are rough numbers",
    "start": "1031760",
    "end": "1038959"
  },
  {
    "text": "uh and we'll try to improve it at the end but but this is some kind of good uh a good start",
    "start": "1038959",
    "end": "1045120"
  },
  {
    "text": "and from this i could see that that we can get to uh something like 143",
    "start": "1045120",
    "end": "1052160"
  },
  {
    "text": "megabytes per second we need um to calculate with as a",
    "start": "1052160",
    "end": "1059120"
  },
  {
    "text": "bandwidth for a cpu so and this is sorry this is going to be",
    "start": "1059120",
    "end": "1065840"
  },
  {
    "text": "the hardest part of of our discussion i hope it is not that hard but i've created a small and simple",
    "start": "1065840",
    "end": "1073200"
  },
  {
    "text": "simple formula for calculating this ts overhead okay i took into account the number of",
    "start": "1073200",
    "end": "1079200"
  },
  {
    "text": "transactions i want to make which is m the h is the client or the server side the cpu time we need for the handshake uh s",
    "start": "1079200",
    "end": "1087520"
  },
  {
    "text": "is the encryption bandwidth and t is the bytes in one transaction and using this formula i want to",
    "start": "1087520",
    "end": "1093840"
  },
  {
    "text": "calculate the overheads of tls of how much time i need uh for",
    "start": "1093840",
    "end": "1100240"
  },
  {
    "text": "ex for n transactions uh to calculate tls or on the other hand i can calculate",
    "start": "1100240",
    "end": "1106480"
  },
  {
    "text": "also an invert this this formula and i calculated",
    "start": "1106480",
    "end": "1111679"
  },
  {
    "text": "how many transactions i can make make in a given time so using using this formula",
    "start": "1111679",
    "end": "1119840"
  },
  {
    "text": "i could represent what we need to know and what you need to calculate on the one hand you can see here in the first",
    "start": "1119840",
    "end": "1126320"
  },
  {
    "text": "line that that i start by beginning to calculate the number of of time we need",
    "start": "1126320",
    "end": "1133440"
  },
  {
    "text": "for for the handshake both on the client and server side and on the",
    "start": "1133440",
    "end": "1138559"
  },
  {
    "text": "uh on the left side i can i've added how much time i need for encrypting and",
    "start": "1138559",
    "end": "1145120"
  },
  {
    "text": "validating the application the application protocol messages uh",
    "start": "1145120",
    "end": "1152720"
  },
  {
    "text": "for tls and from this i could uh explain uh how much uh how many",
    "start": "1152720",
    "end": "1158720"
  },
  {
    "text": "transactions i can do uh within a simple second by inverting",
    "start": "1158720",
    "end": "1163840"
  },
  {
    "text": "uh this formula so i took uh return to my original test setup but",
    "start": "1163840",
    "end": "1170080"
  },
  {
    "text": "this time i've used only a single core i've created a test application which",
    "start": "1170080",
    "end": "1177200"
  },
  {
    "text": "i call intestinal application one where uh in every ts i do have ts handshake per every uh tcp",
    "start": "1177200",
    "end": "1184880"
  },
  {
    "text": "connection uh i don't use keeper lives what i do is i've i've using the same crypto",
    "start": "1184880",
    "end": "1190960"
  },
  {
    "text": "parameters as described before and i'm requesting one",
    "start": "1190960",
    "end": "1196160"
  },
  {
    "text": "kilobyte of application data per trans uh transaction and i got to them",
    "start": "1196160",
    "end": "1202000"
  },
  {
    "text": "to the part where where i could calculate the results using my formula and i got",
    "start": "1202000",
    "end": "1207840"
  },
  {
    "text": "to uh 331 uh 32 uh if i round up uh transactions",
    "start": "1207840",
    "end": "1213760"
  },
  {
    "text": "uh per uh per second and um and and when i'm looking running the",
    "start": "1213760",
    "end": "1220000"
  },
  {
    "text": "same test uh on on jmeter i cut to 328",
    "start": "1220000",
    "end": "1225679"
  },
  {
    "text": "uh transactions per second which is shows that it's really close it's one percent difference",
    "start": "1225679",
    "end": "1230720"
  },
  {
    "text": "uh between the theoretical and the actual uh numbers i did the same for my second",
    "start": "1230720",
    "end": "1238240"
  },
  {
    "text": "application where i've used uh a hundred megabyte application data per transaction",
    "start": "1238240",
    "end": "1243440"
  },
  {
    "text": "i got in the in my formula i got to a uh 0.68",
    "start": "1243440",
    "end": "1249919"
  },
  {
    "text": "um transactions per second um",
    "start": "1249919",
    "end": "1256240"
  },
  {
    "text": "and when i run it through j meter okay i saw a transaction per second",
    "start": "1256240",
    "end": "1263520"
  },
  {
    "text": "which is again it is pretty close and and i was you know more or less uh good with my",
    "start": "1263520",
    "end": "1269039"
  },
  {
    "text": "formula here but if i'm if i want to exp",
    "start": "1269039",
    "end": "1274400"
  },
  {
    "text": "conclude my formula and one i know i have a service where i have uh 5000 uh requests",
    "start": "1274400",
    "end": "1281120"
  },
  {
    "text": "uh and i have mutual tls and the agency two edges are 2.5 million milliseconds",
    "start": "1281120",
    "end": "1289600"
  },
  {
    "text": "and i have the this crypto brand with of application data when i'm using my formula i've got a",
    "start": "1289600",
    "end": "1297280"
  },
  {
    "text": "and calculated how much time i need cpu time i need to to for these transactions",
    "start": "1297280",
    "end": "1304240"
  },
  {
    "text": "um i saw that i got a 25 seconds for 5 000",
    "start": "1304240",
    "end": "1311200"
  },
  {
    "text": "requests which is you know it's if you for the first blink it's it it's a lot",
    "start": "1311200",
    "end": "1316799"
  },
  {
    "text": "of a lot of overhead and we understand that the main component here is uh",
    "start": "1316799",
    "end": "1322159"
  },
  {
    "text": "the handshake uh protocol itself now if we look into the handshake",
    "start": "1322159",
    "end": "1327200"
  },
  {
    "text": "protocol how we can improve the handshake protocol itself uh at the first step we have to",
    "start": "1327200",
    "end": "1332559"
  },
  {
    "text": "understand what kind of of algorithms we are using in the handshake protocol",
    "start": "1332559",
    "end": "1337600"
  },
  {
    "text": "and as i told you before we are using eptic curve dp element for the key exchange algorithm uh there",
    "start": "1337600",
    "end": "1345280"
  },
  {
    "text": "is no real contest here because the other we could use rsa uh but are using rsa for key",
    "start": "1345280",
    "end": "1353440"
  },
  {
    "text": "exchange algorithm has what we call forward secrecy problems it means that if someone uh records",
    "start": "1353440",
    "end": "1360000"
  },
  {
    "text": "today uh the conversation and it's not able to decrypt it an attacker is not able to decrypt it",
    "start": "1360000",
    "end": "1365760"
  },
  {
    "text": "but if he steals it my private key later on like in five",
    "start": "1365760",
    "end": "1371600"
  },
  {
    "text": "years he will be able to decrypt my old uh uh traffic",
    "start": "1371600",
    "end": "1380080"
  },
  {
    "text": "if i'm using what i could what we call forward secrecy algorithms like diffie element it means that even if",
    "start": "1380080",
    "end": "1386080"
  },
  {
    "text": "someone steals my key in the in a year it won't be able to decrypt all",
    "start": "1386080",
    "end": "1391200"
  },
  {
    "text": "uh all the traffic and this is obviously very very preferable uh today so therefore it is",
    "start": "1391200",
    "end": "1399760"
  },
  {
    "text": "we prefer to use optic curved uh dpl also the keysight key exchange signing",
    "start": "1399760",
    "end": "1405120"
  },
  {
    "text": "algorithm is rsa uh with the with key size of of",
    "start": "1405120",
    "end": "1410240"
  },
  {
    "text": "two kilobits with sha256 the same for the certificate validation",
    "start": "1410240",
    "end": "1415440"
  },
  {
    "text": "and these are the smallest these are actually more or less the default numbers today and i have to tell you that that going",
    "start": "1415440",
    "end": "1422799"
  },
  {
    "text": "from down there using a smaller key sizes and all their hashes",
    "start": "1422799",
    "end": "1428240"
  },
  {
    "text": "is is really going to hurt your security therefore there is not really much uh",
    "start": "1428240",
    "end": "1435919"
  },
  {
    "text": "space here to to to improve your handshake what you can improve your handshake is",
    "start": "1435919",
    "end": "1442320"
  },
  {
    "text": "what you call the world of expedited handshakes uh uh i brought here two",
    "start": "1442320",
    "end": "1447520"
  },
  {
    "text": "examples one is client-side session ticket uh it is a it is defined in their tls",
    "start": "1447520",
    "end": "1452960"
  },
  {
    "text": "rfcs it enables the client to request from the server on opening the tls session",
    "start": "1452960",
    "end": "1460880"
  },
  {
    "text": "to give him a session ticket the session tickets contain the session key encrypted only",
    "start": "1460880",
    "end": "1466720"
  },
  {
    "text": "for the server itself so the client cannot look into it but that's not the point because what",
    "start": "1466720",
    "end": "1472240"
  },
  {
    "text": "enables that if the client client closes the connections and decides to reconnect the same server can take the same ticket",
    "start": "1472240",
    "end": "1479919"
  },
  {
    "text": "and and do an expedited uh uh handshake protocol with where the server",
    "start": "1479919",
    "end": "1486480"
  },
  {
    "text": "is taking the uh the ticket decrypts it and looks uses it as a session key which is like 10 times faster than",
    "start": "1486480",
    "end": "1494480"
  },
  {
    "text": "than recreating doing a new key exchange and it obviously it requires the client",
    "start": "1494480",
    "end": "1501120"
  },
  {
    "text": "to remember these tickets uh and associated to the servers but on the other hand after the creation of the phone first uh",
    "start": "1501120",
    "end": "1508480"
  },
  {
    "text": "uh handshake you don't really need to add more uh to your uh uh",
    "start": "1508480",
    "end": "1515440"
  },
  {
    "text": "to your current transactions and it's very very fast uh the same with the pre-shared keys the pre-shared keys is",
    "start": "1515440",
    "end": "1521279"
  },
  {
    "text": "a is a protocol where you can use tls with symmetric trees pre-shared among",
    "start": "1521279",
    "end": "1527600"
  },
  {
    "text": "the parties it is very fast the same enables also even the first connection",
    "start": "1527600",
    "end": "1532720"
  },
  {
    "text": "to be done without the full key uh full key exchange but uh",
    "start": "1532720",
    "end": "1538400"
  },
  {
    "text": "but it really has a big burden of of pre-sharing symmetric keys and it's it's a really big it's not an easy",
    "start": "1538400",
    "end": "1546080"
  },
  {
    "text": "solution so i it's not really good for uh for our cloud native environment",
    "start": "1546080",
    "end": "1551600"
  },
  {
    "text": "so just uh uh uh to show you that if we assume i returned to my previous calculation",
    "start": "1551600",
    "end": "1557679"
  },
  {
    "text": "with the formula and assume that we have a session ticket and our handshake time is going down by",
    "start": "1557679",
    "end": "1564880"
  },
  {
    "text": "an order of magnitude okay from at two and a half uh milliseconds to to the 10th time",
    "start": "1564880",
    "end": "1572799"
  },
  {
    "text": "we can see that also the the time we need uh to complete the full 5000",
    "start": "1572799",
    "end": "1580640"
  },
  {
    "text": "handshake 5000 connections is 2.1 uh seconds which is uh",
    "start": "1580640",
    "end": "1586960"
  },
  {
    "text": "less than obviously a very good improvement here so uh so appreciation tickets are really",
    "start": "1586960",
    "end": "1593520"
  },
  {
    "text": "really good uh for for performance talking about the application protocol the application",
    "start": "1593520",
    "end": "1599600"
  },
  {
    "text": "protocol is is on the one hand it can be improved and it has a big effect especially on on",
    "start": "1599600",
    "end": "1607120"
  },
  {
    "text": "on applications which uses big big uh chunk of memories",
    "start": "1607120",
    "end": "1613919"
  },
  {
    "text": "transferred between the two parties uh mostly today more most new cpu is supporting asni um",
    "start": "1613919",
    "end": "1621120"
  },
  {
    "text": "which gives you a fantastic uh throughput as hardware supported in most intel",
    "start": "1621120",
    "end": "1628480"
  },
  {
    "text": "chips make sure that your applications are are using it and and using asni because it",
    "start": "1628480",
    "end": "1635679"
  },
  {
    "text": "improves your performance very much in the application protocol if you don't have hardware support uh",
    "start": "1635679",
    "end": "1641120"
  },
  {
    "text": "mostly in iot devices and embedded devices you can still use chacha which is a",
    "start": "1641120",
    "end": "1646399"
  },
  {
    "text": "less secure algorithm day than aes but still a very good one and it's less time and cpu consuming",
    "start": "1646399",
    "end": "1654080"
  },
  {
    "text": "for message authentication um we are suggesting to look into",
    "start": "1654080",
    "end": "1660960"
  },
  {
    "text": "authenticated encryption uh which are mostly as gcd like uh protocols",
    "start": "1660960",
    "end": "1668720"
  },
  {
    "text": "where you don't need to go through two times over the same message and they give a way better uh output",
    "start": "1668720",
    "end": "1676880"
  },
  {
    "text": "uh of in the application protocol uh against charles and other uh message",
    "start": "1676880",
    "end": "1683360"
  },
  {
    "text": "authentication protocols so i suggest you looking into asgcd uh from this part um",
    "start": "1683360",
    "end": "1692720"
  },
  {
    "text": "i think that that we've ended the main part of our discussion i will be happy",
    "start": "1692720",
    "end": "1699919"
  },
  {
    "text": "to answer your questions now in q a and thank you for your attention",
    "start": "1699919",
    "end": "1711840"
  },
  {
    "text": "hi everyone um now i'm taking here the questions uh after the presentation so",
    "start": "1722080",
    "end": "1729039"
  },
  {
    "text": "uh the first question is about whether to use rsa or ecdsa um",
    "start": "1729039",
    "end": "1737039"
  },
  {
    "text": "the the questioner asked that says that i heard that ecdsa is less cpu intensive on the",
    "start": "1737039",
    "end": "1742720"
  },
  {
    "text": "server side but more intensive on the client side so this scenario where so in a scenario",
    "start": "1742720",
    "end": "1748000"
  },
  {
    "text": "where both of the client and server is located in our data center service",
    "start": "1748000",
    "end": "1753760"
  },
  {
    "text": "the service mutual tls is ecdsa really beneficial over tsa",
    "start": "1753760",
    "end": "1759120"
  },
  {
    "text": "or rsa so it's a really good question um there are actually two two things to",
    "start": "1759120",
    "end": "1766240"
  },
  {
    "text": "to think about one is the security okay as i said in the uh presentation um",
    "start": "1766240",
    "end": "1773760"
  },
  {
    "text": "are using ecl dsa for uh for a key exchange algorithm it has a",
    "start": "1773760",
    "end": "1780080"
  },
  {
    "text": "big benefit from the security side so you don't you have forward secrecy which means",
    "start": "1780080",
    "end": "1786080"
  },
  {
    "text": "that uh if someone records today your conversation cannot decrypt it",
    "start": "1786080",
    "end": "1791600"
  },
  {
    "text": "but will be able to take your keys uh steal them in a later phase he will able to decrypt them if you are",
    "start": "1791600",
    "end": "1798880"
  },
  {
    "text": "using rsa on the other hand if they are using uh uh defeatment based algorithms like",
    "start": "1798880",
    "end": "1804720"
  },
  {
    "text": "ecdsa uh uh uh then then i i think that that the",
    "start": "1804720",
    "end": "1812640"
  },
  {
    "text": "better uh use is the um the uh this the led curve uh defiant key",
    "start": "1812640",
    "end": "1820640"
  },
  {
    "text": "exchange on the other hand there rsa has a big uh",
    "start": "1820640",
    "end": "1826399"
  },
  {
    "text": "big performance upside on usually on the client side",
    "start": "1826399",
    "end": "1833440"
  },
  {
    "text": "because when the server in rsa there is no tweak that in rsa the public key can be a very",
    "start": "1833440",
    "end": "1839039"
  },
  {
    "text": "small number and using a very small number means that there has to be less computation to be",
    "start": "1839039",
    "end": "1846240"
  },
  {
    "text": "done and and using rsa uh is uh can be beneficial on the",
    "start": "1846240",
    "end": "1853760"
  },
  {
    "text": "client side but again the question here relates more to um service to service mutual tls case where",
    "start": "1853760",
    "end": "1861519"
  },
  {
    "text": "in the same data center i think that that that using uh rsa",
    "start": "1861519",
    "end": "1867120"
  },
  {
    "text": "elliptic curves um doesn't really have a beginner effect because",
    "start": "1867120",
    "end": "1872320"
  },
  {
    "text": "on the other hand the server will work harder and if this is a symmetric case i i",
    "start": "1872320",
    "end": "1878080"
  },
  {
    "text": "would say that there won't be here a big performance improvement",
    "start": "1878080",
    "end": "1883679"
  },
  {
    "text": "yeah let's see the next question",
    "start": "1885679",
    "end": "1893840"
  },
  {
    "text": "so why i'm waiting for uh uh for for the next question i'm returning",
    "start": "1910320",
    "end": "1917039"
  },
  {
    "text": "to this original question of whether to use rsa or ecdsa",
    "start": "1917039",
    "end": "1924799"
  },
  {
    "text": "led curves led curve algorithms are usually have a better performance overall",
    "start": "1924799",
    "end": "1933120"
  },
  {
    "text": "so usually if we're we have the same uh um",
    "start": "1933200",
    "end": "1939760"
  },
  {
    "text": "we we are keeping you know using this we are providing say two sides of the conversation we have to",
    "start": "1939760",
    "end": "1945039"
  },
  {
    "text": "take into account both sides both sides then then",
    "start": "1945039",
    "end": "1950240"
  },
  {
    "text": "then i think that that is elliptickers are making a a really good case",
    "start": "1950240",
    "end": "1956159"
  },
  {
    "text": "but if we can say that that the that we are holding uh one side of the",
    "start": "1956159",
    "end": "1961600"
  },
  {
    "text": "conversation and we want to take its performance into the context like",
    "start": "1961600",
    "end": "1967600"
  },
  {
    "text": "if you have an endpoint which is low power consumption device or any kind of",
    "start": "1967600",
    "end": "1973600"
  },
  {
    "text": "other device which is limited from the computational perspective rsa has a good tweak so",
    "start": "1973600",
    "end": "1981200"
  },
  {
    "text": "there is here no a black and white answer but really you know it's a nice engineering question which where the",
    "start": "1981200",
    "end": "1987840"
  },
  {
    "text": "application the specific parameters of the specific application has to be taken into the",
    "start": "1987840",
    "end": "1994960"
  },
  {
    "text": "account",
    "start": "2002840",
    "end": "2005840"
  },
  {
    "text": "if there are more questions i will happy to take here if no then",
    "start": "2069839",
    "end": "2075280"
  },
  {
    "text": "i will be moving on to the slack channel after this presentation and i will be",
    "start": "2075280",
    "end": "2080960"
  },
  {
    "text": "happy to answer more questions",
    "start": "2080960",
    "end": "2086000"
  },
  {
    "text": "if needed",
    "start": "2086800",
    "end": "2089839"
  },
  {
    "text": "yeah okay so um we yeah we are moving to slack right",
    "start": "2154560",
    "end": "2162880"
  },
  {
    "text": "now i will be happy to take friends uh questions there i was glad that you attended my uh",
    "start": "2162880",
    "end": "2169040"
  },
  {
    "text": "uh speech i will happy my lecture i'll be happy to talk to you later",
    "start": "2169040",
    "end": "2176480"
  }
]