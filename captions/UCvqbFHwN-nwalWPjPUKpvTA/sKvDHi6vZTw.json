[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "hey uh good morning or good afternoon wherever you are um welcome to today's deep dive",
    "start": "160",
    "end": "5680"
  },
  {
    "text": "maintainer track for spire my name is andrew harding and i work at hewlett packard enterprise and i'm a",
    "start": "5680",
    "end": "11599"
  },
  {
    "text": "full-time maintainer of spire in this session we're going to explore a few ways to deploy spire and build a",
    "start": "11599",
    "end": "17920"
  },
  {
    "text": "reliable identity plane for your infrastructure before we get into it uh i want to first",
    "start": "17920",
    "end": "23359"
  },
  {
    "text": "apologize in advance for any mistakes or problems due to the pre-recorded nature of this presentation",
    "start": "23359",
    "end": "29599"
  },
  {
    "text": "presenting in this way is new to many of us so i appreciate your patience and leniency",
    "start": "29599",
    "end": "36079"
  },
  {
    "text": "okay so if you're attending this session you should probably be at least superficially familiar with spiffy",
    "start": "39040",
    "end": "44239"
  },
  {
    "text": "inspire if that isn't the case yeah you may want to look up some introductory videos from",
    "start": "44239",
    "end": "49520"
  },
  {
    "text": "earlier kubecon events to get yourself familiarized you can also of course go to the spiffy.io",
    "start": "49520",
    "end": "55600"
  },
  {
    "text": "website to learn more so if you're attending kubecon you're",
    "start": "55600",
    "end": "61920"
  },
  {
    "start": "58000",
    "end": "135000"
  },
  {
    "text": "probably a bit like me and you have an interest in technology that facilitates deploying software at",
    "start": "61920",
    "end": "67040"
  },
  {
    "text": "scale and provides highly available infrastructure today we're going to discuss strategies",
    "start": "67040",
    "end": "72240"
  },
  {
    "text": "for deploying spire to meet that kind of a need and and we're going to discuss",
    "start": "72240",
    "end": "77680"
  },
  {
    "text": "and focus on two main aspects the first is load distribution",
    "start": "77680",
    "end": "83600"
  },
  {
    "text": "specifically how can we just deploy spire in order to distribute load related to workload",
    "start": "83600",
    "end": "89280"
  },
  {
    "text": "registration and identity management and as we scale up the number of workloads that spire is servicing",
    "start": "89280",
    "end": "96000"
  },
  {
    "text": "how do we ensure that spire and the issuance of service identity doesn't itself become a bottleneck as we",
    "start": "96000",
    "end": "101600"
  },
  {
    "text": "scale out your application the second aspect we'll be focusing on",
    "start": "101600",
    "end": "106880"
  },
  {
    "text": "is fault mitigation and isolation as much as we hope for perfect infrastructure",
    "start": "106880",
    "end": "112479"
  },
  {
    "text": "the reality of the situation is that hard drives fail networks break data centers catch fire",
    "start": "112479",
    "end": "118399"
  },
  {
    "text": "power's lost um developers write bad code bad configuration gets deployed",
    "start": "118399",
    "end": "123840"
  },
  {
    "text": "etc um so how can we deploy our spire infrastructure to minimize the impact of these events",
    "start": "123840",
    "end": "130399"
  },
  {
    "text": "so that they are more of an inconvenience than a catastrophe so before we talk spire large scale",
    "start": "130399",
    "end": "139360"
  },
  {
    "text": "let's take a step back and do a quick recap of the essence of what spire provides at",
    "start": "139360",
    "end": "144720"
  },
  {
    "text": "the most granular scale and what it is exactly that we want to ensure reliability of",
    "start": "144720",
    "end": "150000"
  },
  {
    "text": "as our spire deployment grows spire is a reference implementation of the spiffy specification",
    "start": "150000",
    "end": "156560"
  },
  {
    "text": "fundamentally what this means is that spire particularly the spire agent provides",
    "start": "156560",
    "end": "162319"
  },
  {
    "text": "the spiffy workload api now workloads leverage the workload api",
    "start": "162319",
    "end": "168080"
  },
  {
    "text": "to obtain a couple of different things um the first is a spiffy verifiable",
    "start": "168080",
    "end": "173200"
  },
  {
    "text": "identity document or s-vid for short an s-vid is a document with which workloads prove their",
    "start": "173200",
    "end": "179200"
  },
  {
    "text": "identity the s-vit contains a spiffy id which represents the identity of the workload",
    "start": "179200",
    "end": "185920"
  },
  {
    "text": "s bids are authenticated using authorities from the trust domain from which it was issued",
    "start": "185920",
    "end": "191519"
  },
  {
    "text": "this brings us to the second thing workloads retrieve over the workload api which is the spiffy bundle again this",
    "start": "191519",
    "end": "199519"
  },
  {
    "text": "bundle contains x 509 and jot authorities that are used to verify svids one important aspect of the",
    "start": "199519",
    "end": "207200"
  },
  {
    "text": "workload api is that as these s-vids or the spiffy bundle are rotated or updated those updates are",
    "start": "207200",
    "end": "214959"
  },
  {
    "text": "streamed back to the workload over the workload api giving the workload an up-to-date view of its identity",
    "start": "214959",
    "end": "220959"
  },
  {
    "text": "and the material it needs to authenticate other identities the ultimate goal of building up robust",
    "start": "220959",
    "end": "227440"
  },
  {
    "text": "highly available spire deployments is to ensure that this relationship between workloads and the workload api",
    "start": "227440",
    "end": "234480"
  },
  {
    "text": "can be maintained that workloads are always in a position to reach out to the workload api to",
    "start": "234480",
    "end": "240879"
  },
  {
    "text": "obtain s-vids and bundle content so let's begin with the most basic spire",
    "start": "240879",
    "end": "248239"
  },
  {
    "start": "245000",
    "end": "359000"
  },
  {
    "text": "deployment the first thing we define in our spire deployment is the trust domain",
    "start": "248239",
    "end": "254000"
  },
  {
    "text": "the trust domain is a logical construct that represents a security boundary within our",
    "start": "254000",
    "end": "259199"
  },
  {
    "text": "organization you could define a trust domain for each business unit for example or maybe around different classes of",
    "start": "259199",
    "end": "265680"
  },
  {
    "text": "software within a business unit the key takeaway here is that the identities issued to workloads",
    "start": "265680",
    "end": "272160"
  },
  {
    "text": "within a trust domain are all issued by the same set of authorities and can be verified",
    "start": "272160",
    "end": "277919"
  },
  {
    "text": "using the spiffy bundle of the trust domain also there's no requirement on how many trust domains",
    "start": "277919",
    "end": "283680"
  },
  {
    "text": "you know you maintain within your organization it's all dependent on on what your needs are around security boundaries in isolation now",
    "start": "283680",
    "end": "292080"
  },
  {
    "text": "within that trust domain we have a machine virtual or otherwise",
    "start": "292080",
    "end": "297600"
  },
  {
    "text": "which is hosting some workloads and our workloads are of course spiffy enabled",
    "start": "297600",
    "end": "302720"
  },
  {
    "text": "workloads that leverage the spiffy workload api hosted by the spire agent through which they obtain their service",
    "start": "302720",
    "end": "308880"
  },
  {
    "text": "identity and bundle information now spireagent does not mint s-vids",
    "start": "308880",
    "end": "314240"
  },
  {
    "text": "itself but rather relies on the spire server within the trust domain",
    "start": "314240",
    "end": "319440"
  },
  {
    "text": "spire servers have a few responsibilities but the primary of which is to act as the certificate authorities",
    "start": "319440",
    "end": "325680"
  },
  {
    "text": "and job issuers of the trust domain they maintain and rotate key pairs for",
    "start": "325680",
    "end": "330720"
  },
  {
    "text": "signing x-509 and jot svets spire agents query the servers about",
    "start": "330720",
    "end": "337120"
  },
  {
    "text": "workloads they are responsible for and they also issue signing requests to spire server to obtain identity",
    "start": "337120",
    "end": "343680"
  },
  {
    "text": "or s-vids on behalf of those workloads now there is one more actor we need to",
    "start": "343680",
    "end": "349440"
  },
  {
    "text": "consider in our basic deployment and that is the database in the fulfillment of its duties the",
    "start": "349440",
    "end": "355199"
  },
  {
    "text": "spire server has various persistent storage needs let's step aside for a moment and",
    "start": "355199",
    "end": "361520"
  },
  {
    "start": "359000",
    "end": "450000"
  },
  {
    "text": "discuss the database layer in more detail the database layer is a critical component in aspire deployment",
    "start": "361520",
    "end": "368479"
  },
  {
    "text": "it acts as the unified persistent storage layer for all of the spire servers within that deployment",
    "start": "368479",
    "end": "374880"
  },
  {
    "text": "for the purpose of today's discussion let's focus on just a few things stored by the database",
    "start": "374880",
    "end": "380720"
  },
  {
    "text": "the first is the spiffy bundle like we discussed earlier the spiffy bundle contains the public key material for the x509 and jot",
    "start": "380720",
    "end": "388080"
  },
  {
    "text": "authorities that workloads use to authenticate svids second are registrations these",
    "start": "388080",
    "end": "394240"
  },
  {
    "text": "registrations form the policy in the trust domain about what workloads exist and how to",
    "start": "394240",
    "end": "399680"
  },
  {
    "text": "identify them and where they are authorized to run the synchronization of these first two",
    "start": "399680",
    "end": "405520"
  },
  {
    "text": "things you know the spiffy bundle and the registrations along with the signing requests for",
    "start": "405520",
    "end": "411599"
  },
  {
    "text": "sveds that agents do constitute the majority of the traffic and communication efforts that",
    "start": "411599",
    "end": "417280"
  },
  {
    "text": "take place between the spire server and agent the third thing that the database stores",
    "start": "417280",
    "end": "423360"
  },
  {
    "text": "is agent authorization information or in other words the authorization policy for authenticated agents",
    "start": "423360",
    "end": "429840"
  },
  {
    "text": "this information plays an important part in ensuring that incoming agent requests are being issued by valid agents",
    "start": "429840",
    "end": "437520"
  },
  {
    "text": "it's important to note that this database layer is what links up spire servers within aspire deployment",
    "start": "437520",
    "end": "443280"
  },
  {
    "text": "spire servers attached to the same database have a shared view of all the above information",
    "start": "443280",
    "end": "451280"
  },
  {
    "start": "450000",
    "end": "705000"
  },
  {
    "text": "all right so now that we've discussed the database layer let's return to our basic deployment we've got a spire agent servicing",
    "start": "451280",
    "end": "457440"
  },
  {
    "text": "workloads with s-vids and bundle information which that agent obtained through coordination with aspire server backed",
    "start": "457440",
    "end": "463520"
  },
  {
    "text": "by a database that holds bundle and registration information and with that we've got a complete spire deployment",
    "start": "463520",
    "end": "470879"
  },
  {
    "text": "but you know this uh this deployment is nowhere close to robust",
    "start": "470879",
    "end": "476479"
  },
  {
    "text": "so we're going to look at a few ways to scale this up but first let's go over some failure",
    "start": "476479",
    "end": "481759"
  },
  {
    "text": "scenarios for example what happens when the spire server can no longer talk to the database",
    "start": "481759",
    "end": "490479"
  },
  {
    "text": "without access to the database there's not much that can happen within your deployment new workloads",
    "start": "490639",
    "end": "497039"
  },
  {
    "text": "cannot be registered new agents cannot attest and join the trust domain",
    "start": "497039",
    "end": "502639"
  },
  {
    "text": "and like we mentioned before the database contains authorization policy for agent sveds",
    "start": "502639",
    "end": "508400"
  },
  {
    "text": "without access to that policy the server cannot authenticate requests from existing agents",
    "start": "508400",
    "end": "513518"
  },
  {
    "text": "and will deny access this means agents cannot mint svids for workloads or maintain up-to-date bundle and",
    "start": "513519",
    "end": "519680"
  },
  {
    "text": "registration information critically it also prevents s-vits from renewing their own",
    "start": "519680",
    "end": "525360"
  },
  {
    "text": "sved sorry agents it prevents agents from renewing their own svid which means that eventually the agent",
    "start": "525360",
    "end": "532080"
  },
  {
    "text": "may effectively lose its membership in the trust domain and we'll talk about that more a little bit later",
    "start": "532080",
    "end": "538560"
  },
  {
    "text": "a failure event of this magnitude would need to be addressed very quickly in order to decrease the chance of this",
    "start": "538560",
    "end": "545839"
  },
  {
    "text": "failure event happening and to provide a quick failover path when it does we want",
    "start": "545839",
    "end": "550959"
  },
  {
    "text": "to add some redundancy in our database layer there are a variety of options here with",
    "start": "550959",
    "end": "556560"
  },
  {
    "text": "various trade-offs in reliability cost and performance for example we could set up and manage",
    "start": "556560",
    "end": "562560"
  },
  {
    "text": "our own database cluster with read-only replicas and a quick strategy for promotion to master in the case of",
    "start": "562560",
    "end": "568320"
  },
  {
    "text": "failover we could also leverage a managed database solution like amazon rds or cloud sql or any of the other",
    "start": "568320",
    "end": "575120"
  },
  {
    "text": "solutions offered by the various cloud providers in any case with robun redundancy or robust failover",
    "start": "575120",
    "end": "581920"
  },
  {
    "text": "strategy in place we've reduced the chances of a problem in our database layer and given us a path to quickly repair an outage",
    "start": "581920",
    "end": "589600"
  },
  {
    "text": "next let's let's discuss what happens when there's a loss of communication with the spire server",
    "start": "589600",
    "end": "596000"
  },
  {
    "text": "now in this failure scenario the outlook is still pretty bad in fact from an agent perspective this",
    "start": "596000",
    "end": "602640"
  },
  {
    "text": "scenario more or less mimics that of a loss of availability in the database no new workload s vids no updates for",
    "start": "602640",
    "end": "609040"
  },
  {
    "text": "bundle or registration information no agent s vid rotation",
    "start": "609040",
    "end": "614079"
  },
  {
    "text": "depending on the nature of the failure say a network failure in between agents and servers we may",
    "start": "614079",
    "end": "619120"
  },
  {
    "text": "still have other actors in the system that are able to talk to the spire server and perform registration or other",
    "start": "619120",
    "end": "624959"
  },
  {
    "text": "administrative maintenance but from the agent's perspective which is the most critical actor according to",
    "start": "624959",
    "end": "630560"
  },
  {
    "text": "our workloads you know the agent is just out of luck like the previous failure scenario",
    "start": "630560",
    "end": "636720"
  },
  {
    "text": "the deployment is in an unhealthy state that should be addressed quickly even so what can we do to decrease the",
    "start": "636720",
    "end": "643839"
  },
  {
    "text": "chances of downed or otherwise unavailable spire service from impacting our spire infrastructure",
    "start": "643839",
    "end": "649839"
  },
  {
    "text": "the natural solution here is to scale out the number of spire servers so that if one server goes down agents",
    "start": "649839",
    "end": "656320"
  },
  {
    "text": "have another place to go operating multiple servers at scale like this isn't without its own challenges",
    "start": "656320",
    "end": "662880"
  },
  {
    "text": "for example when you go to roll out new software configuration you want to adopt a rolling deployment",
    "start": "662880",
    "end": "668399"
  },
  {
    "text": "strategy so that the problem with the updates does not take out all of your servers at once and you can roll back",
    "start": "668399",
    "end": "673920"
  },
  {
    "text": "failed servers in the case there is a problem there's a lot of collective operations knowledge out",
    "start": "673920",
    "end": "679680"
  },
  {
    "text": "there around this sort of thing so we won't go into that in more detail however",
    "start": "679680",
    "end": "685040"
  },
  {
    "text": "despite our best attempts at shoring up the server or the database layer no infrastructure is perfect and there",
    "start": "685040",
    "end": "691760"
  },
  {
    "text": "will be outages due to unforeseen circumstances luckily there is a saving grace and this",
    "start": "691760",
    "end": "698079"
  },
  {
    "text": "is a critical mitigation for all of these failure modes and that is where the spire agent comes",
    "start": "698079",
    "end": "703360"
  },
  {
    "text": "in if we dig into the agent internals we see that the agents do not mint workload",
    "start": "703360",
    "end": "710079"
  },
  {
    "start": "705000",
    "end": "772000"
  },
  {
    "text": "s-vids on demand instead they actively maintain an s-vid cache the agent fetches and maintains",
    "start": "710079",
    "end": "717519"
  },
  {
    "text": "fresh s-vids for all workloads it is authorized for independent of whether or not that",
    "start": "717519",
    "end": "722720"
  },
  {
    "text": "workload has attempted to contact the agent through the workload api this cache becomes an important property",
    "start": "722720",
    "end": "728639"
  },
  {
    "text": "for surviving infrastructure outages by buying time for operators to repair the infrastructure",
    "start": "728639",
    "end": "734079"
  },
  {
    "text": "without causing loss of valid service identity for workloads",
    "start": "734079",
    "end": "739360"
  },
  {
    "text": "each asvid minted by spire has a time to live or ttl under healthy conditions an agent does",
    "start": "739680",
    "end": "746480"
  },
  {
    "text": "not let an svid drop below half of its ttl agents actively check all of the aspects",
    "start": "746480",
    "end": "752399"
  },
  {
    "text": "they have cached and quickly rotate them when they cross the half ttl threshold",
    "start": "752399",
    "end": "757920"
  },
  {
    "text": "this means that in the face of an infrastructure outage operators have a buffer",
    "start": "757920",
    "end": "763519"
  },
  {
    "text": "of up to half of the smallest svid ttl to repair the outage to the infrastructure",
    "start": "763519",
    "end": "768639"
  },
  {
    "text": "before the yesvid will expire",
    "start": "768639",
    "end": "773839"
  },
  {
    "start": "772000",
    "end": "800000"
  },
  {
    "text": "the ttl is a powerful knob for operators to configure the trade-off on ttls is between",
    "start": "773839",
    "end": "779600"
  },
  {
    "text": "security and reliability the smaller the ttl the faster a",
    "start": "779600",
    "end": "784800"
  },
  {
    "text": "compromised s-vit expires this reduces the time an attacker has to abuse the svid",
    "start": "784800",
    "end": "790800"
  },
  {
    "text": "for impersonation however the higher the ttl the more time operators have to address",
    "start": "790800",
    "end": "797279"
  },
  {
    "text": "infrastructure outages now the spire agent has two kinds of",
    "start": "797279",
    "end": "804320"
  },
  {
    "start": "800000",
    "end": "914000"
  },
  {
    "text": "svids cached the one we've primarily focused on so far are the workload svids",
    "start": "804320",
    "end": "810000"
  },
  {
    "text": "these are the ones that are served to workloads over the workload api and uh you know they are primarily a",
    "start": "810000",
    "end": "815120"
  },
  {
    "text": "concern of the data plane when a workload estimate expires or is otherwise unavailable",
    "start": "815120",
    "end": "820880"
  },
  {
    "text": "this leads to workload level failures which are the ones that are most apparent to our customers unfortunately",
    "start": "820880",
    "end": "828399"
  },
  {
    "text": "the second is the agent's own s-vid this s-vid is given to the agent when it enters the",
    "start": "828399",
    "end": "834079"
  },
  {
    "text": "trust domain via node attestation it is maintained and rotated by the agent the agent s-vid is used to",
    "start": "834079",
    "end": "840800"
  },
  {
    "text": "authenticate requests aspire servers and represents the agent's membership in the trust domain",
    "start": "840800",
    "end": "846240"
  },
  {
    "text": "if the agent esvide is allowed to expire the agent will no longer be able to authenticate with spire servers in the",
    "start": "846240",
    "end": "851839"
  },
  {
    "text": "trust domain effectively losing its membership this means that the agent will have to rejoin",
    "start": "851839",
    "end": "857120"
  },
  {
    "text": "the trust domain throughout a station however reatta station can be burdensome",
    "start": "857120",
    "end": "862399"
  },
  {
    "text": "for most agestation methods so allowing an s-vid to lapse is not ideal",
    "start": "862399",
    "end": "867600"
  },
  {
    "text": "generally speaking ttls for both workload svids and agent svids are configured to some low number of",
    "start": "867600",
    "end": "873920"
  },
  {
    "text": "days or hours the ttls of these two svids can be controlled independently",
    "start": "873920",
    "end": "879360"
  },
  {
    "text": "this gives operators flexibility with the security reliability trade-off for example",
    "start": "879360",
    "end": "884959"
  },
  {
    "text": "if the workload aspect lapses but the agent s-vid does not after the outage is repaired the agent",
    "start": "884959",
    "end": "890720"
  },
  {
    "text": "will be able to quickly recover since its membership in the trust domain has not been lost",
    "start": "890720",
    "end": "895839"
  },
  {
    "text": "for this reason it isn't uncommon for agent svids to be given a higher ttl than a workload svid",
    "start": "895839",
    "end": "901440"
  },
  {
    "text": "especially if the control plane segregation makes it more unlikely that an agent aspect is compromised",
    "start": "901440",
    "end": "906880"
  },
  {
    "text": "than a workload asvid sitting in the data plane the takeaway here is that operators are",
    "start": "906880",
    "end": "912240"
  },
  {
    "text": "given a choice so to quickly summarize database inspire",
    "start": "912240",
    "end": "919199"
  },
  {
    "start": "914000",
    "end": "964000"
  },
  {
    "text": "server reliability is critical to maintain a healthy spire infrastructure redundancy and quick failover will go",
    "start": "919199",
    "end": "926320"
  },
  {
    "text": "very far to provide reliability in these layers the agent cache is the first line of",
    "start": "926320",
    "end": "931600"
  },
  {
    "text": "defense to mitigate infrastructure outage this is because the cache allows spire",
    "start": "931600",
    "end": "936720"
  },
  {
    "text": "to continue in its fundamental mission to provide s vids and bundles over the workload api",
    "start": "936720",
    "end": "943040"
  },
  {
    "text": "while the infrastructure is being repaired and last ttls are a powerful knob to adjust",
    "start": "943040",
    "end": "949120"
  },
  {
    "text": "between the trade-off of security and reliability keeping the ttls as small as possible",
    "start": "949120",
    "end": "955120"
  },
  {
    "text": "but no smaller is important to survive infrastructure outage while reducing the window of impact for compromised",
    "start": "955120",
    "end": "961759"
  },
  {
    "text": "svids so now that we know a little about",
    "start": "961759",
    "end": "968000"
  },
  {
    "text": "failure modes and mitigations let's go back to our simple deployment and talk scale for a while",
    "start": "968000",
    "end": "974880"
  },
  {
    "text": "in our simple deployment we had a single agent servicing a handful of workloads of course that isn't going to be enough",
    "start": "974880",
    "end": "981600"
  },
  {
    "text": "our business is of course thriving and load against our workloads is climbing in order to meet customer",
    "start": "981600",
    "end": "987600"
  },
  {
    "text": "demand we need to scale up the number of workloads as the number of workloads and",
    "start": "987600",
    "end": "992800"
  },
  {
    "text": "accompanying agents grow the load on that lonely little spire server is going to go up and up",
    "start": "992800",
    "end": "998320"
  },
  {
    "text": "and of course if that spire server falls over agents are suddenly unable to obtain or",
    "start": "998320",
    "end": "1003600"
  },
  {
    "text": "rotate workload s-vids to increase the reliability of our system and to scale up demand let's add",
    "start": "1003600",
    "end": "1010399"
  },
  {
    "text": "a few servers to our deployment of course as we mentioned earlier spire",
    "start": "1010399",
    "end": "1016160"
  },
  {
    "text": "servers and a highly divisible available deployment will share a database sufficient to say",
    "start": "1016160",
    "end": "1022560"
  },
  {
    "text": "that a single database instance will not provide the reliability we need so we'll need to provide some redundancy",
    "start": "1022560",
    "end": "1027839"
  },
  {
    "text": "here as well all right now we are cooking we've got some redundancy in our spire server and",
    "start": "1027839",
    "end": "1034558"
  },
  {
    "text": "database layers this will help us prevent and mitigate those failure modes we discussed as well as distribute load but now we've",
    "start": "1034559",
    "end": "1043038"
  },
  {
    "text": "got another problem our trust domain is all within a single data center zone",
    "start": "1043039",
    "end": "1048240"
  },
  {
    "text": "let's take a look how we can scale out across multiple data centers or zones",
    "start": "1048240",
    "end": "1053840"
  },
  {
    "start": "1053000",
    "end": "1129000"
  },
  {
    "text": "so on the left here you can see zone a has a bunch of workloads running serviced by agents that are distributing",
    "start": "1055200",
    "end": "1061440"
  },
  {
    "text": "their load across several spire servers of course this is all well and good unless a whole zone has an outage",
    "start": "1061440",
    "end": "1068559"
  },
  {
    "text": "so let's go ahead and deploy spire to a few more zones and just a reminder we're still talking",
    "start": "1068559",
    "end": "1074720"
  },
  {
    "text": "about several spire deployments belonging to a single trust domain",
    "start": "1074720",
    "end": "1080240"
  },
  {
    "text": "like we mentioned previously s vids within a single trust domain are minted by the same set of authorities this means that each of",
    "start": "1080240",
    "end": "1087200"
  },
  {
    "text": "these zones must have a shared view of the spiffy bundle for the trust domain so the workloads minted in one zone",
    "start": "1087200",
    "end": "1093520"
  },
  {
    "text": "can authenticate and be authenticated by workloads in other zones let's explore some",
    "start": "1093520",
    "end": "1099840"
  },
  {
    "text": "options when we mentioned the database layer we talked about how every spire server",
    "start": "1099840",
    "end": "1105760"
  },
  {
    "text": "attached to the same database layer has a shared view amongst other things of bundle information so our first option to",
    "start": "1105760",
    "end": "1113039"
  },
  {
    "text": "linking the spire clusters in each zone is to employ a shared database this ensures that all zones see the same",
    "start": "1113039",
    "end": "1119600"
  },
  {
    "text": "bundle in order to understand how this works let's go over how the spiffy bundle is",
    "start": "1119600",
    "end": "1124880"
  },
  {
    "text": "built by multiple spire servers on top of a shared database",
    "start": "1124880",
    "end": "1130559"
  },
  {
    "start": "1129000",
    "end": "1186000"
  },
  {
    "text": "the way this works is that the spire server generates the keys it uses to sign s-vids concretely",
    "start": "1130640",
    "end": "1137919"
  },
  {
    "text": "spires self-signs in x-59 root ca for x-511svids and a public-private key pair",
    "start": "1137919",
    "end": "1143360"
  },
  {
    "text": "for joddsvids the x59 root ca certificate and the jot signing public key are appended to the",
    "start": "1143360",
    "end": "1150160"
  },
  {
    "text": "spiffy bundle stored in the database this process is repeated for each spire",
    "start": "1150160",
    "end": "1156799"
  },
  {
    "text": "server every time it rotates the x509ca or jot signing key",
    "start": "1156799",
    "end": "1163280"
  },
  {
    "text": "a new key pair is generated and the newly self-signed ca certificate or public key for that key pair is appended",
    "start": "1163280",
    "end": "1168880"
  },
  {
    "text": "to the spiffy bundle whenever aspire server is queried for the bundle of the trust domain",
    "start": "1168880",
    "end": "1174400"
  },
  {
    "text": "it returns the appended tube bundle from the database which to reiterate contains the ca",
    "start": "1174400",
    "end": "1180080"
  },
  {
    "text": "certificates and public keys for each spire server that shares that database",
    "start": "1180080",
    "end": "1186159"
  },
  {
    "start": "1186000",
    "end": "1252000"
  },
  {
    "text": "going back to our multi-zone deployment each spire server from each zone will be appending to the spiffy bundle stored in",
    "start": "1187280",
    "end": "1194000"
  },
  {
    "text": "that shared database since the spiffy bundle contains the public key material for each spire server",
    "start": "1194000",
    "end": "1199360"
  },
  {
    "text": "any workload obtaining that bundle via the workload api can authenticate the svids signed by any spire server across",
    "start": "1199360",
    "end": "1205679"
  },
  {
    "text": "all zones let's talk about the advantages of this kind of deployment as long as",
    "start": "1205679",
    "end": "1212159"
  },
  {
    "text": "you already have a scalable robust database layer accessible from each zone this can be a pretty convenient option",
    "start": "1212159",
    "end": "1219200"
  },
  {
    "text": "both in terms of configuration and deployment simplicity it has a smaller number of moving parts than the",
    "start": "1219200",
    "end": "1225360"
  },
  {
    "text": "alternatives however there are some potential downsides to consider first that shared database becomes a",
    "start": "1225360",
    "end": "1233039"
  },
  {
    "text": "single point of failure for all zones second the database has to handle all of",
    "start": "1233039",
    "end": "1238240"
  },
  {
    "text": "the queries for servers from all zones which definitely adds up this can make it hard to distribute load",
    "start": "1238240",
    "end": "1245360"
  },
  {
    "text": "and scale the database appropriately as the number of zones or workloads in each zone's grows",
    "start": "1245360",
    "end": "1252640"
  },
  {
    "start": "1252000",
    "end": "1312000"
  },
  {
    "text": "the next option is to leverage the upstream authority plugin interface",
    "start": "1254480",
    "end": "1259520"
  },
  {
    "text": "on the spire server the upstream authority provides a common x-509 authority that all spire servers",
    "start": "1259520",
    "end": "1266159"
  },
  {
    "text": "use to sign their cas every svid signed by these spire servers therefore has a chain of trust",
    "start": "1266159",
    "end": "1273039"
  },
  {
    "text": "backed to the same x-509 authority are authorities from the upstream authority plugin as you can see in this",
    "start": "1273039",
    "end": "1280080"
  },
  {
    "text": "deployment option each zone has its own distinct database cluster this means that each zone has",
    "start": "1280080",
    "end": "1285120"
  },
  {
    "text": "its own unique view of the spiffy bundle registration information etc",
    "start": "1285120",
    "end": "1290799"
  },
  {
    "text": "however because each x509s bit is signed by a common authority or authorities",
    "start": "1290799",
    "end": "1297120"
  },
  {
    "text": "the x-509 authorities present in the bundle for each zone ends up being the same this again",
    "start": "1297120",
    "end": "1302720"
  },
  {
    "text": "enables mutual authentication between workloads across zones let's take a detailed look at how",
    "start": "1302720",
    "end": "1308640"
  },
  {
    "text": "the bundle in each zone is built",
    "start": "1308640",
    "end": "1312159"
  },
  {
    "start": "1312000",
    "end": "1395000"
  },
  {
    "text": "when configured for an upstream authority instead of self-signing the spire server instead generates a key",
    "start": "1314720",
    "end": "1320720"
  },
  {
    "text": "pair and sends off a certificate signing request or csr to the upstream authority the",
    "start": "1320720",
    "end": "1326720"
  },
  {
    "text": "upstream authority signs that csr and produces an intermediate ca certificate",
    "start": "1326720",
    "end": "1332480"
  },
  {
    "text": "it returns that intermediate ca certificate along with a set of upstream route authorities back to the spire server spire server",
    "start": "1332480",
    "end": "1340000"
  },
  {
    "text": "then appends the upstream route authority to the bundle in the database",
    "start": "1340000",
    "end": "1346720"
  },
  {
    "text": "since the spire server ca is an intermediate authority off of that root authority an s-vid signed by that server has a",
    "start": "1346720",
    "end": "1353200"
  },
  {
    "text": "valid chain of trust back to the upstream wind authority present in the bundle the spire servers in other zones",
    "start": "1353200",
    "end": "1359760"
  },
  {
    "text": "likewise get an intermediate ca signed by the upstream authority and append the upstream authority to the bundle in",
    "start": "1359760",
    "end": "1365600"
  },
  {
    "text": "their own database as you can see the database in each zone has an identical bundle",
    "start": "1365600",
    "end": "1372080"
  },
  {
    "text": "furthermore vids signed by each zone will be signed by intermediates that chain back to the upstream end authority",
    "start": "1372080",
    "end": "1377919"
  },
  {
    "text": "in that bundle this is how workloads attached to any of these zones can mutually authenticate",
    "start": "1377919",
    "end": "1384400"
  },
  {
    "text": "now what i just described only applies to the intermediate ca used to sign x 509s vids the story is a little bit",
    "start": "1384400",
    "end": "1392000"
  },
  {
    "text": "different for jot signing keys jotsvids are signed by independent keys",
    "start": "1392000",
    "end": "1398960"
  },
  {
    "start": "1395000",
    "end": "1479000"
  },
  {
    "text": "that aren't part of the certificate chain of trust this means that we cannot rely on the same sort of chaining properties",
    "start": "1398960",
    "end": "1405760"
  },
  {
    "text": "that we can with x509svids that being said the upstream authority",
    "start": "1405760",
    "end": "1410960"
  },
  {
    "text": "interface does provide a mechanism for spire servers to use to publish their jot signing keys to",
    "start": "1410960",
    "end": "1417200"
  },
  {
    "text": "each other when aspire server generates a new jot signing key it depends the public key",
    "start": "1417200",
    "end": "1423360"
  },
  {
    "text": "for that jot signing key to the bundle in its own database it also sends that public key to the",
    "start": "1423360",
    "end": "1429919"
  },
  {
    "text": "upstream authority other spire servers are watching the upstream authority for new jot signing",
    "start": "1429919",
    "end": "1436080"
  },
  {
    "text": "keys they receive the jot signing key of the other spire server and likewise append the public key to",
    "start": "1436080",
    "end": "1442559"
  },
  {
    "text": "the bundle in their own database this process is repeated for each spire",
    "start": "1442559",
    "end": "1447760"
  },
  {
    "text": "server that shares the upstream authority and after that's all propagated each",
    "start": "1447760",
    "end": "1454080"
  },
  {
    "text": "bundle now contains the complete set of jot signing keys for aspire servers which share the upstream authority",
    "start": "1454080",
    "end": "1462320"
  },
  {
    "text": "before we go on i'd like to point out that this ability to publish jot signing keys upstream",
    "start": "1462320",
    "end": "1467919"
  },
  {
    "text": "is an optional feature of upstream authorities and is not widely implemented so you have to be careful about which",
    "start": "1467919",
    "end": "1473840"
  },
  {
    "text": "upstream authority you choose if jot s vids are important to you",
    "start": "1473840",
    "end": "1479760"
  },
  {
    "start": "1479000",
    "end": "1568000"
  },
  {
    "text": "the advantage of using the upstream authority option is that beyond providing a shared view of the",
    "start": "1480799",
    "end": "1486400"
  },
  {
    "text": "spiffy bundle of the trust domain each zone has its own database instance to handle the queries for that zone",
    "start": "1486400",
    "end": "1492799"
  },
  {
    "text": "this makes it easier to distribute load and scale out the database layer within a single zone another advantage",
    "start": "1492799",
    "end": "1499919"
  },
  {
    "text": "when considering tying together multiple spire deployments using the upstream authority is that interactions with the upstream",
    "start": "1499919",
    "end": "1505840"
  },
  {
    "text": "authority are relatively infrequent spire servers only use the upstream authority when they rotate their x 509",
    "start": "1505840",
    "end": "1512320"
  },
  {
    "text": "intermediate ca or jot signing keys which is a configurable but relatively infrequent event",
    "start": "1512320",
    "end": "1520080"
  },
  {
    "text": "spire servers rotate the signing key pairs at half at the half ttl point similar to the",
    "start": "1520080",
    "end": "1525520"
  },
  {
    "text": "agent and its asvid rotation strategy the ttl for the ca and jot signing keys",
    "start": "1525520",
    "end": "1531200"
  },
  {
    "text": "defaults to 24 hours but it isn't abnormal to have a much larger lifetime say a week or a month or",
    "start": "1531200",
    "end": "1536880"
  },
  {
    "text": "more this means that if the upstream authority goes down there's quite a bit of leniency",
    "start": "1536880",
    "end": "1542240"
  },
  {
    "text": "in how fast the outage needs to be addressed the disadvantage is of course that it is",
    "start": "1542240",
    "end": "1547679"
  },
  {
    "text": "a more complicated setup with more moving parts and more points of failure however if your deployment is large this",
    "start": "1547679",
    "end": "1555120"
  },
  {
    "text": "can provide better scaling properties than the shared database spire has a few built-in upstream",
    "start": "1555120",
    "end": "1561520"
  },
  {
    "text": "authority implementations for example one that leverages aws certificate manager's private ca feature",
    "start": "1561520",
    "end": "1569600"
  },
  {
    "start": "1568000",
    "end": "1609000"
  },
  {
    "text": "but uh let's turn to the third option which is a refinement of the upstream authority approach",
    "start": "1569600",
    "end": "1575840"
  },
  {
    "text": "where the spire cluster where aspire cluster itself is acting as the upstream authority for",
    "start": "1575840",
    "end": "1581120"
  },
  {
    "text": "a downstream spire cluster this is something that we call nested spire",
    "start": "1581120",
    "end": "1587360"
  },
  {
    "text": "the spire servers in each zone have their intermediate ca signed by the spire cluster acting as the upstream",
    "start": "1587360",
    "end": "1593200"
  },
  {
    "text": "authority of course this means that s vids signed by zone again have a chain of trust through the same",
    "start": "1593200",
    "end": "1599200"
  },
  {
    "text": "authority in this case the upstream spire cluster which fulfills the criteria that all identities in a trust domain are signed",
    "start": "1599200",
    "end": "1605679"
  },
  {
    "text": "from a shared set of roots nested spire allows you to organize your",
    "start": "1605679",
    "end": "1612400"
  },
  {
    "start": "1609000",
    "end": "1683000"
  },
  {
    "text": "spire deployments into clusters that are largely independent if an upstream cluster goes down",
    "start": "1612400",
    "end": "1618080"
  },
  {
    "text": "the downstream clusters stay relatively operational for the reasons we mentioned when discussing the upstream authority",
    "start": "1618080",
    "end": "1624480"
  },
  {
    "text": "this can be a very powerful way to scale out and isolate your deployments there is a trade-off however remember",
    "start": "1624480",
    "end": "1632080"
  },
  {
    "text": "that each of these clusters has its own database the advantage of course there is load distribution and fault isolation",
    "start": "1632080",
    "end": "1638480"
  },
  {
    "text": "however if you remember our earlier discussion about what the database is in charge of",
    "start": "1638480",
    "end": "1643760"
  },
  {
    "text": "you'll recall that workload registrations are stored in the database each cluster is in charge of its own",
    "start": "1643760",
    "end": "1650159"
  },
  {
    "text": "registrations this may complicate things somewhat since registrars will need to be",
    "start": "1650159",
    "end": "1656159"
  },
  {
    "text": "deployed per cluster or at least be able to register things per with a per cluster granularity against",
    "start": "1656159",
    "end": "1662080"
  },
  {
    "text": "the database for the specific cluster the workload's going to run in but this reliability trade-off can be",
    "start": "1662080",
    "end": "1668640"
  },
  {
    "text": "well worth it um i'll mention another benefit of using spire as the upstream authority",
    "start": "1668640",
    "end": "1674080"
  },
  {
    "text": "which is that upstream spire implements the optional publishing of the jot signing keys that we mentioned earlier",
    "start": "1674080",
    "end": "1683840"
  },
  {
    "text": "so we've talked about a few options now and how we might span a aspired trust domain across multiple",
    "start": "1684640",
    "end": "1690799"
  },
  {
    "text": "zones either using a shared database or an upstream authority however what do we do when those options",
    "start": "1690799",
    "end": "1696399"
  },
  {
    "text": "are off the table at this point it may make sense to break our deployment into more than one trust",
    "start": "1696399",
    "end": "1702399"
  },
  {
    "text": "domain and how do we enable authentication between workloads and two distinct trust",
    "start": "1702399",
    "end": "1708399"
  },
  {
    "start": "1703000",
    "end": "1736000"
  },
  {
    "text": "domains well the answer here is spiffy federation federation is the process by which a",
    "start": "1708399",
    "end": "1714799"
  },
  {
    "text": "trust domain gains the ability to authenticate workloads from another trust domain it is a one-way relationship meaning",
    "start": "1714799",
    "end": "1722799"
  },
  {
    "text": "that to enable mutual authentication each trust domain needs to federate with each other the active federation",
    "start": "1722799",
    "end": "1729360"
  },
  {
    "text": "involves obtaining and disseminating the spiffy bundle of a foreign trust domain to the workloads in your own trust",
    "start": "1729360",
    "end": "1734799"
  },
  {
    "text": "domain spiffy defines an interoperable mechanism by which a trust domain can",
    "start": "1734799",
    "end": "1740720"
  },
  {
    "start": "1736000",
    "end": "1774000"
  },
  {
    "text": "obtain the bundle before and trust domain this mechanism is the spiffy bundle endpoint which is an https endpoint that",
    "start": "1740720",
    "end": "1747840"
  },
  {
    "text": "serves the spiffy bundle of the foreign trust domain the endpoint is authenticated and at",
    "start": "1747840",
    "end": "1754720"
  },
  {
    "text": "this time we define two authentication mechanisms the first is via web pki or",
    "start": "1754720",
    "end": "1761039"
  },
  {
    "text": "via spiffy authentication as the foreign trust domain rotates its authorities",
    "start": "1761039",
    "end": "1766720"
  },
  {
    "text": "this bundle endpoint can be pulled with some frequency to maintain an up-to-date view of the",
    "start": "1766720",
    "end": "1772000"
  },
  {
    "text": "foreign trust domain bundle spire distributes the foreign trust",
    "start": "1772000",
    "end": "1777120"
  },
  {
    "text": "domain bundle to workloads over the workload api enabling workloads to authenticate svids from the foreign trust domain",
    "start": "1777120",
    "end": "1785120"
  },
  {
    "start": "1784000",
    "end": "1804000"
  },
  {
    "text": "so our distinct trust domains can establish a federation relationship",
    "start": "1785279",
    "end": "1790480"
  },
  {
    "text": "and retrieve each other's bundles and mutually authenticate it's also worth mentioning this",
    "start": "1790480",
    "end": "1796320"
  },
  {
    "text": "deployment strategy is one way that people deploy spire across cloud and on-premise data centers",
    "start": "1796320",
    "end": "1803840"
  },
  {
    "start": "1804000",
    "end": "1843000"
  },
  {
    "text": "well that's it for today that's what i have for you uh to summarize today we've explored",
    "start": "1805360",
    "end": "1810559"
  },
  {
    "text": "deployments from the very simple to multi-zone to nested hierarchies and",
    "start": "1810559",
    "end": "1815600"
  },
  {
    "text": "onto federated trust domains we've talked a little bit about failure modes and the various layers that require redundancy",
    "start": "1815600",
    "end": "1822080"
  },
  {
    "text": "in order to achieve a highly available deployment that can scale and we've also dug into the details of",
    "start": "1822080",
    "end": "1827360"
  },
  {
    "text": "how bundles are built across databases or shared databases",
    "start": "1827360",
    "end": "1833600"
  },
  {
    "text": "and we've touched on the mechanisms around spiffy federation and the ability",
    "start": "1833600",
    "end": "1839840"
  },
  {
    "text": "for two trust domains to federate with each other so thank you for hanging in there that",
    "start": "1839840",
    "end": "1846159"
  },
  {
    "start": "1843000",
    "end": "1871000"
  },
  {
    "text": "was definitely a lot to go over if you have questions feel free to reach out on the session chat",
    "start": "1846159",
    "end": "1851919"
  },
  {
    "text": "we'll be happy to address them you can also visit us at the spiffy slack and we've got a",
    "start": "1851919",
    "end": "1859360"
  },
  {
    "text": "friendly community there to help you get going with spiffy inspire you can also hit up the github pages for",
    "start": "1859360",
    "end": "1864720"
  },
  {
    "text": "spiffy inspire or the spiffy.io website for more information thank you very much",
    "start": "1864720",
    "end": "1873360"
  }
]