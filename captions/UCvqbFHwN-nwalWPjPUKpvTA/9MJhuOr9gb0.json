[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "hi i'm tobias i work for region and i",
    "start": "80",
    "end": "3120"
  },
  {
    "text": "live in zurich switzerland",
    "start": "3120",
    "end": "6240"
  },
  {
    "text": "vision operates managed services for the",
    "start": "6240",
    "end": "8480"
  },
  {
    "text": "customers all around the world",
    "start": "8480",
    "end": "10480"
  },
  {
    "start": "10000",
    "end": "50000"
  },
  {
    "text": "even in australia for the australian",
    "start": "10480",
    "end": "12480"
  },
  {
    "text": "government",
    "start": "12480",
    "end": "14160"
  },
  {
    "text": "usually the customers have high security",
    "start": "14160",
    "end": "16320"
  },
  {
    "text": "requirements",
    "start": "16320",
    "end": "17440"
  },
  {
    "text": "and some of them are in highly regulated",
    "start": "17440",
    "end": "19600"
  },
  {
    "text": "areas like banks",
    "start": "19600",
    "end": "20960"
  },
  {
    "text": "insurances or telecommunication",
    "start": "20960",
    "end": "23199"
  },
  {
    "text": "companies",
    "start": "23199",
    "end": "25279"
  },
  {
    "text": "about a year ago we decided to base our",
    "start": "25279",
    "end": "27920"
  },
  {
    "text": "next generation managed services",
    "start": "27920",
    "end": "29760"
  },
  {
    "text": "offering on kubernetes",
    "start": "29760",
    "end": "31519"
  },
  {
    "text": "and discovered crossplane as the",
    "start": "31519",
    "end": "33280"
  },
  {
    "text": "potential control plane to achieve that",
    "start": "33280",
    "end": "36800"
  },
  {
    "text": "with our open source tooling called",
    "start": "36800",
    "end": "38800"
  },
  {
    "text": "project syn",
    "start": "38800",
    "end": "40079"
  },
  {
    "text": "we created the basis to orchestrate",
    "start": "40079",
    "end": "42160"
  },
  {
    "text": "configuration on a huge feed of",
    "start": "42160",
    "end": "44000"
  },
  {
    "text": "kubernetes clusters",
    "start": "44000",
    "end": "45680"
  },
  {
    "text": "including the deployment and",
    "start": "45680",
    "end": "47200"
  },
  {
    "text": "configuration of crossplane itself",
    "start": "47200",
    "end": "51280"
  },
  {
    "start": "50000",
    "end": "114000"
  },
  {
    "text": "our first implementation is crossplane",
    "start": "51600",
    "end": "53920"
  },
  {
    "text": "as the orchestration control plane",
    "start": "53920",
    "end": "56160"
  },
  {
    "text": "to gather its projects zoon is made for",
    "start": "56160",
    "end": "58640"
  },
  {
    "text": "the biggest swiss telecommunication",
    "start": "58640",
    "end": "60559"
  },
  {
    "text": "company",
    "start": "60559",
    "end": "61120"
  },
  {
    "text": "called swisscom at the beginning",
    "start": "61120",
    "end": "64400"
  },
  {
    "text": "swisscom offers redis and mariah db",
    "start": "64400",
    "end": "66880"
  },
  {
    "text": "galera",
    "start": "66880",
    "end": "67520"
  },
  {
    "text": "in their internal services marketplace",
    "start": "67520",
    "end": "69680"
  },
  {
    "text": "as a managed service",
    "start": "69680",
    "end": "71439"
  },
  {
    "text": "running on kubernetes at massive scale",
    "start": "71439",
    "end": "74560"
  },
  {
    "text": "the amount of expected service instances",
    "start": "74560",
    "end": "76960"
  },
  {
    "text": "is so high",
    "start": "76960",
    "end": "78080"
  },
  {
    "text": "that it's not possible to run them all",
    "start": "78080",
    "end": "80080"
  },
  {
    "text": "on a single cluster",
    "start": "80080",
    "end": "81520"
  },
  {
    "text": "of their internal kubernetes offering",
    "start": "81520",
    "end": "85520"
  },
  {
    "text": "these services are currently consumed by",
    "start": "85520",
    "end": "87920"
  },
  {
    "text": "applications running on cloud foundry",
    "start": "87920",
    "end": "90560"
  },
  {
    "text": "and the services need to be available as",
    "start": "90560",
    "end": "92799"
  },
  {
    "text": "a full sales service offering in their",
    "start": "92799",
    "end": "95040"
  },
  {
    "text": "internal marketplace",
    "start": "95040",
    "end": "97840"
  },
  {
    "text": "it is planned to extend the offering to",
    "start": "97840",
    "end": "99920"
  },
  {
    "text": "users of the managed kubernetes offering",
    "start": "99920",
    "end": "102560"
  },
  {
    "text": "called icube",
    "start": "102560",
    "end": "103840"
  },
  {
    "text": "using the kubernetes service catalog all",
    "start": "103840",
    "end": "107040"
  },
  {
    "text": "these services are running in swisscom's",
    "start": "107040",
    "end": "109280"
  },
  {
    "text": "own data center and",
    "start": "109280",
    "end": "110479"
  },
  {
    "text": "infrastructure with high security",
    "start": "110479",
    "end": "112840"
  },
  {
    "text": "measures",
    "start": "112840",
    "end": "115119"
  },
  {
    "start": "114000",
    "end": "168000"
  },
  {
    "text": "for matching swiss commerce requirements",
    "start": "115119",
    "end": "117360"
  },
  {
    "text": "we had to implement an open service",
    "start": "117360",
    "end": "119520"
  },
  {
    "text": "broker api",
    "start": "119520",
    "end": "120560"
  },
  {
    "text": "application which maps crossblank",
    "start": "120560",
    "end": "122880"
  },
  {
    "text": "concepts to the concepts of the open",
    "start": "122880",
    "end": "125119"
  },
  {
    "text": "service broker api specifications",
    "start": "125119",
    "end": "128720"
  },
  {
    "text": "as the ideas behind crowsplain matched",
    "start": "128720",
    "end": "130959"
  },
  {
    "text": "the ideas behind open service broker api",
    "start": "130959",
    "end": "133680"
  },
  {
    "text": "very well",
    "start": "133680",
    "end": "134640"
  },
  {
    "text": "we were able to write the translator",
    "start": "134640",
    "end": "137120"
  },
  {
    "text": "between these two worlds",
    "start": "137120",
    "end": "138959"
  },
  {
    "text": "called the swisscom the crowsplain",
    "start": "138959",
    "end": "141280"
  },
  {
    "text": "service broker",
    "start": "141280",
    "end": "143440"
  },
  {
    "text": "in this diagram you can see that the",
    "start": "143440",
    "end": "146160"
  },
  {
    "text": "service offering maps to the composite",
    "start": "146160",
    "end": "148480"
  },
  {
    "text": "resource definitions",
    "start": "148480",
    "end": "150720"
  },
  {
    "text": "service plans mapped to compositions and",
    "start": "150720",
    "end": "153840"
  },
  {
    "text": "service instances mapped to composite",
    "start": "153840",
    "end": "156080"
  },
  {
    "text": "resources all are integral concepts of",
    "start": "156080",
    "end": "159440"
  },
  {
    "text": "crossplane",
    "start": "159440",
    "end": "161040"
  },
  {
    "text": "the crossplane service broker operates",
    "start": "161040",
    "end": "163040"
  },
  {
    "text": "solely on crossplane objects",
    "start": "163040",
    "end": "165200"
  },
  {
    "text": "and no other state is needed",
    "start": "165200",
    "end": "168959"
  },
  {
    "start": "168000",
    "end": "222000"
  },
  {
    "text": "let's have a look at how this looks like",
    "start": "169440",
    "end": "171680"
  },
  {
    "text": "in a live demo",
    "start": "171680",
    "end": "173200"
  },
  {
    "text": "we'll see a redis instance provisioned",
    "start": "173200",
    "end": "175200"
  },
  {
    "text": "on the service cluster",
    "start": "175200",
    "end": "176720"
  },
  {
    "text": "which was requested by a user via the",
    "start": "176720",
    "end": "179360"
  },
  {
    "text": "service catalog",
    "start": "179360",
    "end": "181440"
  },
  {
    "text": "the demo environment consists of three",
    "start": "181440",
    "end": "183760"
  },
  {
    "text": "local k3d",
    "start": "183760",
    "end": "184959"
  },
  {
    "text": "clusters and this architecture",
    "start": "184959",
    "end": "187599"
  },
  {
    "text": "represents",
    "start": "187599",
    "end": "188400"
  },
  {
    "text": "a real world example",
    "start": "188400",
    "end": "191680"
  },
  {
    "text": "a cross plane cluster in the middle of",
    "start": "191680",
    "end": "193840"
  },
  {
    "text": "this diagram",
    "start": "193840",
    "end": "194800"
  },
  {
    "text": "exists once and runs crossplane and the",
    "start": "194800",
    "end": "197200"
  },
  {
    "text": "crossbar and service broker",
    "start": "197200",
    "end": "199360"
  },
  {
    "text": "the services itself are provisioned by",
    "start": "199360",
    "end": "201760"
  },
  {
    "text": "the crossplane helm provider on the",
    "start": "201760",
    "end": "203519"
  },
  {
    "text": "service cluster",
    "start": "203519",
    "end": "205040"
  },
  {
    "text": "from which many of them could exist and",
    "start": "205040",
    "end": "207840"
  },
  {
    "text": "in reality",
    "start": "207840",
    "end": "208720"
  },
  {
    "text": "a lot of them exist the end user is",
    "start": "208720",
    "end": "211920"
  },
  {
    "text": "using the services from the consumer",
    "start": "211920",
    "end": "213920"
  },
  {
    "text": "cluster",
    "start": "213920",
    "end": "214720"
  },
  {
    "text": "by using the kubernetes service catalog",
    "start": "214720",
    "end": "217920"
  },
  {
    "text": "now let's dive into it straight away",
    "start": "217920",
    "end": "222239"
  },
  {
    "start": "222000",
    "end": "442000"
  },
  {
    "text": "in the middle you see the control",
    "start": "222959",
    "end": "224840"
  },
  {
    "text": "cluster",
    "start": "224840",
    "end": "226560"
  },
  {
    "text": "this cluster is running crossplane and",
    "start": "226560",
    "end": "228640"
  },
  {
    "text": "we will now have a look around what is",
    "start": "228640",
    "end": "230879"
  },
  {
    "text": "available in this cluster",
    "start": "230879",
    "end": "233120"
  },
  {
    "text": "first we will have a look at the",
    "start": "233120",
    "end": "234720"
  },
  {
    "text": "composite resource definitions you see",
    "start": "234720",
    "end": "237280"
  },
  {
    "text": "there is a redis instance defined",
    "start": "237280",
    "end": "240400"
  },
  {
    "text": "this composite resource definition also",
    "start": "240400",
    "end": "243040"
  },
  {
    "text": "has a lot of metadata available",
    "start": "243040",
    "end": "245519"
  },
  {
    "text": "which is then consumed by the crossplane",
    "start": "245519",
    "end": "247599"
  },
  {
    "text": "service broker",
    "start": "247599",
    "end": "248799"
  },
  {
    "text": "to be presented to the user of the",
    "start": "248799",
    "end": "250879"
  },
  {
    "text": "broker",
    "start": "250879",
    "end": "252959"
  },
  {
    "text": "when we look at the compositions which",
    "start": "252959",
    "end": "255200"
  },
  {
    "text": "map to the service plans",
    "start": "255200",
    "end": "256799"
  },
  {
    "text": "on the open service broker api you can",
    "start": "256799",
    "end": "259840"
  },
  {
    "text": "see that there is one",
    "start": "259840",
    "end": "261440"
  },
  {
    "text": "plan defined which is called ready small",
    "start": "261440",
    "end": "264240"
  },
  {
    "text": "and this is represented by this",
    "start": "264240",
    "end": "266840"
  },
  {
    "text": "composition",
    "start": "266840",
    "end": "268800"
  },
  {
    "text": "also this composition has metadata which",
    "start": "268800",
    "end": "271840"
  },
  {
    "text": "again is used by the crossplane",
    "start": "271840",
    "end": "273680"
  },
  {
    "text": "service broker to be presented to the",
    "start": "273680",
    "end": "276320"
  },
  {
    "text": "user of the broker",
    "start": "276320",
    "end": "278880"
  },
  {
    "text": "querying the cost of already instances",
    "start": "278880",
    "end": "281120"
  },
  {
    "text": "shows us that there is currently no",
    "start": "281120",
    "end": "282880"
  },
  {
    "text": "redis instance provisioned",
    "start": "282880",
    "end": "284720"
  },
  {
    "text": "let's change that we will switch now to",
    "start": "284720",
    "end": "288000"
  },
  {
    "text": "the consumer cluster",
    "start": "288000",
    "end": "289600"
  },
  {
    "text": "and check what brokers are available on",
    "start": "289600",
    "end": "292560"
  },
  {
    "text": "this cluster",
    "start": "292560",
    "end": "294000"
  },
  {
    "text": "the only broker configured at this time",
    "start": "294000",
    "end": "296800"
  },
  {
    "text": "is the redis broker",
    "start": "296800",
    "end": "298240"
  },
  {
    "text": "which is ready querying this broker for",
    "start": "298240",
    "end": "301600"
  },
  {
    "text": "available services",
    "start": "301600",
    "end": "303280"
  },
  {
    "text": "is returning us just one service it's",
    "start": "303280",
    "end": "307039"
  },
  {
    "text": "the ready",
    "start": "307039",
    "end": "307840"
  },
  {
    "text": "ready service and one plan the small",
    "start": "307840",
    "end": "310080"
  },
  {
    "text": "plan",
    "start": "310080",
    "end": "311440"
  },
  {
    "text": "which we can now provision this is very",
    "start": "311440",
    "end": "314880"
  },
  {
    "text": "easy with the service catalog command",
    "start": "314880",
    "end": "317440"
  },
  {
    "text": "and at this time the service is getting",
    "start": "317440",
    "end": "319600"
  },
  {
    "text": "provisioned",
    "start": "319600",
    "end": "320560"
  },
  {
    "text": "what we can see with this cad instances",
    "start": "320560",
    "end": "323039"
  },
  {
    "text": "command",
    "start": "323039",
    "end": "323680"
  },
  {
    "text": "with which shows us the state",
    "start": "323680",
    "end": "326160"
  },
  {
    "text": "provisioning",
    "start": "326160",
    "end": "328400"
  },
  {
    "text": "going back to the control cluster now we",
    "start": "328400",
    "end": "331440"
  },
  {
    "text": "can see that",
    "start": "331440",
    "end": "332479"
  },
  {
    "text": "there is now one redis instance object",
    "start": "332479",
    "end": "335919"
  },
  {
    "text": "available this has been created by the",
    "start": "335919",
    "end": "338000"
  },
  {
    "text": "crossplane service broker on the call",
    "start": "338000",
    "end": "340160"
  },
  {
    "text": "from the consumer cluster",
    "start": "340160",
    "end": "342639"
  },
  {
    "text": "this is now being provisioned by via the",
    "start": "342639",
    "end": "345680"
  },
  {
    "text": "crossplane health provider",
    "start": "345680",
    "end": "347440"
  },
  {
    "text": "and we can see that there was is already",
    "start": "347440",
    "end": "350000"
  },
  {
    "text": "a release object created",
    "start": "350000",
    "end": "352000"
  },
  {
    "text": "by crossplane and this actually",
    "start": "352000",
    "end": "355440"
  },
  {
    "text": "instantiates a hem chart on the service",
    "start": "355440",
    "end": "357840"
  },
  {
    "text": "cluster",
    "start": "357840",
    "end": "359120"
  },
  {
    "text": "and this is already done here down on",
    "start": "359120",
    "end": "362639"
  },
  {
    "text": "the bottom of this window",
    "start": "362639",
    "end": "364160"
  },
  {
    "text": "in the service cluster also",
    "start": "364160",
    "end": "367440"
  },
  {
    "text": "this service is provisioned into its own",
    "start": "367440",
    "end": "370080"
  },
  {
    "text": "namespace",
    "start": "370080",
    "end": "370960"
  },
  {
    "text": "which we can now have a look into and",
    "start": "370960",
    "end": "374080"
  },
  {
    "text": "see",
    "start": "374080",
    "end": "374720"
  },
  {
    "text": "what ports are available in this",
    "start": "374720",
    "end": "376880"
  },
  {
    "text": "namespace",
    "start": "376880",
    "end": "379199"
  },
  {
    "text": "so you can see the ready service is",
    "start": "379199",
    "end": "381759"
  },
  {
    "text": "already up and running",
    "start": "381759",
    "end": "383440"
  },
  {
    "text": "and if we go back to the consumer",
    "start": "383440",
    "end": "385280"
  },
  {
    "text": "cluster we can see that the status is",
    "start": "385280",
    "end": "387840"
  },
  {
    "text": "in this time ready so the service is",
    "start": "387840",
    "end": "390080"
  },
  {
    "text": "available for the end user",
    "start": "390080",
    "end": "391520"
  },
  {
    "text": "to be consumed for that we are now",
    "start": "391520",
    "end": "394560"
  },
  {
    "text": "creating a service binding which",
    "start": "394560",
    "end": "397120"
  },
  {
    "text": "returns us all the needed information to",
    "start": "397120",
    "end": "399600"
  },
  {
    "text": "actually connect to this service",
    "start": "399600",
    "end": "402000"
  },
  {
    "text": "this is now done the status is already",
    "start": "402000",
    "end": "405440"
  },
  {
    "text": "ready",
    "start": "405440",
    "end": "406000"
  },
  {
    "text": "and this created a secret on the on the",
    "start": "406000",
    "end": "408560"
  },
  {
    "text": "consumer cluster",
    "start": "408560",
    "end": "409919"
  },
  {
    "text": "ready to be used by the application this",
    "start": "409919",
    "end": "413120"
  },
  {
    "text": "secret",
    "start": "413120",
    "end": "413840"
  },
  {
    "text": "contains information like the server ip",
    "start": "413840",
    "end": "416800"
  },
  {
    "text": "addresses",
    "start": "416800",
    "end": "417520"
  },
  {
    "text": "ports uh usernames passwords and all",
    "start": "417520",
    "end": "420479"
  },
  {
    "text": "other parameters which are needed to",
    "start": "420479",
    "end": "423360"
  },
  {
    "text": "con contact the service actually",
    "start": "423360",
    "end": "426560"
  },
  {
    "text": "that's the end of the demo let's go back",
    "start": "426560",
    "end": "429120"
  },
  {
    "text": "to the slides",
    "start": "429120",
    "end": "430000"
  },
  {
    "text": "shortly if you want to try this out",
    "start": "430000",
    "end": "434319"
  },
  {
    "text": "yourself",
    "start": "434319",
    "end": "434960"
  },
  {
    "text": "it's hosted on github the full",
    "start": "434960",
    "end": "436720"
  },
  {
    "text": "demonstration is available under this",
    "start": "436720",
    "end": "438720"
  },
  {
    "text": "url",
    "start": "438720",
    "end": "439280"
  },
  {
    "text": "displayed on the slides",
    "start": "439280",
    "end": "442400"
  },
  {
    "start": "442000",
    "end": "517000"
  },
  {
    "text": "the crossplane open service broker api",
    "start": "443039",
    "end": "445759"
  },
  {
    "text": "is open source on github",
    "start": "445759",
    "end": "447919"
  },
  {
    "text": "and it's already being used in",
    "start": "447919",
    "end": "449599"
  },
  {
    "text": "production and will be gradually",
    "start": "449599",
    "end": "451599"
  },
  {
    "text": "improved over time we have some points",
    "start": "451599",
    "end": "454960"
  },
  {
    "text": "on the roadmap already",
    "start": "454960",
    "end": "456880"
  },
  {
    "text": "so the first thing we will do is",
    "start": "456880",
    "end": "458639"
  },
  {
    "text": "implement authentication with bearer",
    "start": "458639",
    "end": "460800"
  },
  {
    "text": "token which",
    "start": "460800",
    "end": "462319"
  },
  {
    "text": "could contain meta information for",
    "start": "462319",
    "end": "464479"
  },
  {
    "text": "example for access control",
    "start": "464479",
    "end": "466639"
  },
  {
    "text": "or for filtering plans which are",
    "start": "466639",
    "end": "468800"
  },
  {
    "text": "available to this particular user or",
    "start": "468800",
    "end": "471199"
  },
  {
    "text": "team",
    "start": "471199",
    "end": "471759"
  },
  {
    "text": "whatever information is stored in the",
    "start": "471759",
    "end": "473520"
  },
  {
    "text": "token",
    "start": "473520",
    "end": "475520"
  },
  {
    "text": "this will allow us also to as mentioned",
    "start": "475520",
    "end": "479840"
  },
  {
    "text": "implement the plan filtering on the",
    "start": "479840",
    "end": "481360"
  },
  {
    "text": "broker side we will also",
    "start": "481360",
    "end": "483360"
  },
  {
    "text": "implement asynchronous binding",
    "start": "483360",
    "end": "485520"
  },
  {
    "text": "operations",
    "start": "485520",
    "end": "486879"
  },
  {
    "text": "and last but not least we have plan plan",
    "start": "486879",
    "end": "489280"
  },
  {
    "text": "upgrades on our plate so that we can",
    "start": "489280",
    "end": "491520"
  },
  {
    "text": "upgrade for example",
    "start": "491520",
    "end": "492800"
  },
  {
    "text": "from small to medium plans and so on",
    "start": "492800",
    "end": "496319"
  },
  {
    "text": "we'll work on these features over the",
    "start": "496319",
    "end": "498080"
  },
  {
    "text": "next weeks and months",
    "start": "498080",
    "end": "499840"
  },
  {
    "text": "some of these features are depending on",
    "start": "499840",
    "end": "502319"
  },
  {
    "text": "features in crossbrain which",
    "start": "502319",
    "end": "503840"
  },
  {
    "text": "will be hopefully available very soon",
    "start": "503840",
    "end": "507440"
  },
  {
    "text": "if you want to know more about what we",
    "start": "507440",
    "end": "509199"
  },
  {
    "text": "did please reach out to me at my email",
    "start": "509199",
    "end": "511520"
  },
  {
    "text": "address or on twitter",
    "start": "511520",
    "end": "513360"
  },
  {
    "text": "thanks for listening and enjoy the",
    "start": "513360",
    "end": "515120"
  },
  {
    "text": "crossband community day",
    "start": "515120",
    "end": "518880"
  }
]