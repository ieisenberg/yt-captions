[
  {
    "text": "so hello i'm marasti sol sabo from",
    "start": "80",
    "end": "1920"
  },
  {
    "text": "pantone tech and today i'll show you how",
    "start": "1920",
    "end": "4240"
  },
  {
    "text": "you can build and deploy a cnf in five",
    "start": "4240",
    "end": "6319"
  },
  {
    "text": "minutes",
    "start": "6319",
    "end": "8000"
  },
  {
    "text": "so before we go to that let me talk uh",
    "start": "8000",
    "end": "10639"
  },
  {
    "text": "about what the cnn is",
    "start": "10639",
    "end": "12639"
  },
  {
    "text": "cna for cloud native network function is",
    "start": "12639",
    "end": "14960"
  },
  {
    "text": "a software implementation",
    "start": "14960",
    "end": "16320"
  },
  {
    "text": "of some network functionality such as",
    "start": "16320",
    "end": "18640"
  },
  {
    "text": "router switch",
    "start": "18640",
    "end": "19760"
  },
  {
    "text": "vpn gateway or firewall which is built",
    "start": "19760",
    "end": "22880"
  },
  {
    "text": "and deployed in a cloud native way",
    "start": "22880",
    "end": "24800"
  },
  {
    "text": "meaning that that it runs in a container",
    "start": "24800",
    "end": "28400"
  },
  {
    "text": "in kubernetes it can be configured using",
    "start": "28400",
    "end": "31199"
  },
  {
    "text": "cloud native apis such as crds or grpc",
    "start": "31199",
    "end": "34960"
  },
  {
    "text": "and it can be chained with other cnfs to",
    "start": "34960",
    "end": "36960"
  },
  {
    "text": "provide some more complex network",
    "start": "36960",
    "end": "38960"
  },
  {
    "text": "functionality",
    "start": "38960",
    "end": "41200"
  },
  {
    "text": "so how can we build a cnf in order to do",
    "start": "41200",
    "end": "44399"
  },
  {
    "text": "that we need to address",
    "start": "44399",
    "end": "45600"
  },
  {
    "text": "three main challenges first we need to",
    "start": "45600",
    "end": "48079"
  },
  {
    "text": "have a data plan which can provide",
    "start": "48079",
    "end": "49600"
  },
  {
    "text": "directional",
    "start": "49600",
    "end": "50399"
  },
  {
    "text": "network functionality an excellent open",
    "start": "50399",
    "end": "53680"
  },
  {
    "text": "source choice for that",
    "start": "53680",
    "end": "54800"
  },
  {
    "text": "is the universal fdio vpp",
    "start": "54800",
    "end": "57840"
  },
  {
    "text": "data plane then we need to build the",
    "start": "57840",
    "end": "60399"
  },
  {
    "text": "cloud native control and management for",
    "start": "60399",
    "end": "62160"
  },
  {
    "text": "it",
    "start": "62160",
    "end": "62559"
  },
  {
    "text": "and for that legato io is a very good",
    "start": "62559",
    "end": "65439"
  },
  {
    "text": "open source",
    "start": "65439",
    "end": "66159"
  },
  {
    "text": "framework and finally we need to",
    "start": "66159",
    "end": "69840"
  },
  {
    "text": "interconnect the cnfs with each other or",
    "start": "69840",
    "end": "72080"
  },
  {
    "text": "with some external networking",
    "start": "72080",
    "end": "73680"
  },
  {
    "text": "infrastructure",
    "start": "73680",
    "end": "75119"
  },
  {
    "text": "very often on lower networking layers",
    "start": "75119",
    "end": "77520"
  },
  {
    "text": "than what we can get from the cni",
    "start": "77520",
    "end": "79360"
  },
  {
    "text": "plugins",
    "start": "79360",
    "end": "80640"
  },
  {
    "text": "and for that we can use the network",
    "start": "80640",
    "end": "82880"
  },
  {
    "text": "service mesh io project",
    "start": "82880",
    "end": "86080"
  },
  {
    "text": "and so the simple cnf that you can run",
    "start": "86080",
    "end": "87920"
  },
  {
    "text": "in kubernetes is essentially this",
    "start": "87920",
    "end": "90400"
  },
  {
    "text": "a legato vpp agent occur image started",
    "start": "90400",
    "end": "93280"
  },
  {
    "text": "in kubernetes",
    "start": "93280",
    "end": "94400"
  },
  {
    "text": "with a single crypt catal command it",
    "start": "94400",
    "end": "97040"
  },
  {
    "text": "already contains the vpp data plane",
    "start": "97040",
    "end": "99360"
  },
  {
    "text": "and the management plan for its",
    "start": "99360",
    "end": "101119"
  },
  {
    "text": "configuration",
    "start": "101119",
    "end": "103119"
  },
  {
    "text": "but the data plan is not connected",
    "start": "103119",
    "end": "104720"
  },
  {
    "text": "anywhere at this point so it is",
    "start": "104720",
    "end": "106720"
  },
  {
    "text": "actually not doing anything so how can",
    "start": "106720",
    "end": "109200"
  },
  {
    "text": "we connect it",
    "start": "109200",
    "end": "110479"
  },
  {
    "text": "to some other cnfs and one solution for",
    "start": "110479",
    "end": "114479"
  },
  {
    "text": "that may be the network service mesh",
    "start": "114479",
    "end": "116399"
  },
  {
    "text": "uh with combination of the nsm plugin",
    "start": "116399",
    "end": "118799"
  },
  {
    "text": "for legato",
    "start": "118799",
    "end": "120479"
  },
  {
    "text": "uh which",
    "start": "120479",
    "end": "123840"
  },
  {
    "text": "which provides a seamless integration of",
    "start": "123840",
    "end": "126399"
  },
  {
    "text": "ligato based cnfs with network",
    "start": "126399",
    "end": "128000"
  },
  {
    "text": "service mesh most importantly it allows",
    "start": "128000",
    "end": "130720"
  },
  {
    "text": "to define connections between cnfs fully",
    "start": "130720",
    "end": "133120"
  },
  {
    "text": "declaratively",
    "start": "133120",
    "end": "134160"
  },
  {
    "text": "without the need for writing any code",
    "start": "134160",
    "end": "138959"
  },
  {
    "text": "as an example let's think about the",
    "start": "138959",
    "end": "140400"
  },
  {
    "text": "network address translation cnf that",
    "start": "140400",
    "end": "142400"
  },
  {
    "text": "needs to be",
    "start": "142400",
    "end": "143040"
  },
  {
    "text": "connected to two other ports here named",
    "start": "143040",
    "end": "145280"
  },
  {
    "text": "as the client and the web server",
    "start": "145280",
    "end": "147680"
  },
  {
    "text": "the interconnection between the pods is",
    "start": "147680",
    "end": "149840"
  },
  {
    "text": "first described with the standard and",
    "start": "149840",
    "end": "151440"
  },
  {
    "text": "some crd as shown on this slide",
    "start": "151440",
    "end": "155440"
  },
  {
    "text": "and then another crd is deployed which",
    "start": "155440",
    "end": "157680"
  },
  {
    "text": "contains some",
    "start": "157680",
    "end": "158560"
  },
  {
    "text": "nsm wiring information uh like ip",
    "start": "158560",
    "end": "161519"
  },
  {
    "text": "addresses applied on nsm interfaces",
    "start": "161519",
    "end": "164800"
  },
  {
    "text": "and the actual cnn functionality",
    "start": "164800",
    "end": "166560"
  },
  {
    "text": "configuration which is network address",
    "start": "166560",
    "end": "168319"
  },
  {
    "text": "translation configuration in this case",
    "start": "168319",
    "end": "170800"
  },
  {
    "text": "as shown on the right side of the slide",
    "start": "170800",
    "end": "174160"
  },
  {
    "text": "and there is all of the deployment is",
    "start": "174160",
    "end": "175680"
  },
  {
    "text": "shown on this picture as you can see we",
    "start": "175680",
    "end": "177440"
  },
  {
    "text": "have three pots",
    "start": "177440",
    "end": "178800"
  },
  {
    "text": "with additional network interfaces",
    "start": "178800",
    "end": "180800"
  },
  {
    "text": "attached by networks",
    "start": "180800",
    "end": "182000"
  },
  {
    "text": "service mesh running here",
    "start": "182000",
    "end": "185840"
  },
  {
    "text": "and you can see that the client port has",
    "start": "186400",
    "end": "188800"
  },
  {
    "text": "multiple network interfaces",
    "start": "188800",
    "end": "190560"
  },
  {
    "text": "uh connected to it eth0 is its cni and",
    "start": "190560",
    "end": "194560"
  },
  {
    "text": "the tab zero is it's an sm attached",
    "start": "194560",
    "end": "196840"
  },
  {
    "text": "interface",
    "start": "196840",
    "end": "198400"
  },
  {
    "text": "the web server has one mamiv interface",
    "start": "198400",
    "end": "200879"
  },
  {
    "text": "connected",
    "start": "200879",
    "end": "202000"
  },
  {
    "text": "to it by the network service mesh and",
    "start": "202000",
    "end": "205840"
  },
  {
    "text": "not 4cnf running in the middle has two",
    "start": "205840",
    "end": "209120"
  },
  {
    "text": "member interfaces attached by the",
    "start": "209120",
    "end": "210959"
  },
  {
    "text": "network service mesh",
    "start": "210959",
    "end": "212560"
  },
  {
    "text": "with a network address translation",
    "start": "212560",
    "end": "214319"
  },
  {
    "text": "configured between them",
    "start": "214319",
    "end": "217519"
  },
  {
    "text": "and here we have a curl test where the",
    "start": "217599",
    "end": "220319"
  },
  {
    "text": "client is accessing the web server",
    "start": "220319",
    "end": "222159"
  },
  {
    "text": "via the not cnf port through the nsm",
    "start": "222159",
    "end": "225360"
  },
  {
    "text": "network interconnections",
    "start": "225360",
    "end": "228560"
  },
  {
    "text": "so if you want to reproduce this demo",
    "start": "228879",
    "end": "230560"
  },
  {
    "text": "yourself and explore it in a little bit",
    "start": "230560",
    "end": "233120"
  },
  {
    "text": "more detail",
    "start": "233120",
    "end": "234400"
  },
  {
    "text": "feel free to visit this github page",
    "start": "234400",
    "end": "236000"
  },
  {
    "text": "which contains all the deployment files",
    "start": "236000",
    "end": "237760"
  },
  {
    "text": "and instructions for the deployment",
    "start": "237760",
    "end": "240720"
  },
  {
    "text": "that's it from me thank you for watching",
    "start": "240720",
    "end": "242239"
  },
  {
    "text": "this talk",
    "start": "242239",
    "end": "246000"
  }
]