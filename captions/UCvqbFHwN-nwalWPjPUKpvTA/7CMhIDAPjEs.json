[
  {
    "start": "0",
    "end": "28000"
  },
  {
    "text": "hello good morning and welcome i'm very pleased to see people uh in",
    "start": "320",
    "end": "5759"
  },
  {
    "text": "person as opposed to on the other side of some amorphous internet screen um we're gonna talk about the software",
    "start": "5759",
    "end": "12080"
  },
  {
    "text": "factory today some supply chain fun and uh yeah thank you for coming to my talk in advance",
    "start": "12080",
    "end": "18560"
  },
  {
    "text": "so cuban let's supply chain security the software factory aka who is afraid of the big bad supply",
    "start": "18560",
    "end": "26800"
  },
  {
    "text": "chain hi i'm andy i'm from control plane we are a cloud native security consultancy",
    "start": "26800",
    "end": "34719"
  },
  {
    "start": "28000",
    "end": "41000"
  },
  {
    "text": "we have audit pen tests and engineering capabilities and i have a wonderful team",
    "start": "34719",
    "end": "41520"
  },
  {
    "text": "uh i've done lots of development that's kind of where the background comes from security is a deep passion",
    "start": "41520",
    "end": "48239"
  },
  {
    "text": "and operations of course is necessary as the strong baseline and watched which to build",
    "start": "48239",
    "end": "53600"
  },
  {
    "text": "solid security engineering practices i am very lucky to have had the",
    "start": "53600",
    "end": "59120"
  },
  {
    "text": "opportunity to write sans sec 584 attacking and defending containers and kubernetes",
    "start": "59120",
    "end": "65600"
  },
  {
    "text": "uh with my preeminent co-author mr michael hassenblast i have written the book hacking kubernetes it has gone into",
    "start": "65600",
    "end": "72479"
  },
  {
    "text": "print today it will be available on the ebook by the end of the week it's already available on early access and uh",
    "start": "72479",
    "end": "79520"
  },
  {
    "text": "yeah huge thanks to michael it is a step-by-step guide to attacking defending and ultimately",
    "start": "79520",
    "end": "86960"
  },
  {
    "text": "securely deploying kubernetes um for regulated environments and",
    "start": "86960",
    "end": "92560"
  },
  {
    "text": "everywhere else and today we are going to talk about the",
    "start": "92560",
    "end": "97680"
  },
  {
    "start": "94000",
    "end": "135000"
  },
  {
    "text": "supply chain what is it why is it a problem then we will look concretely at how to attack a couple of different",
    "start": "97680",
    "end": "104240"
  },
  {
    "text": "supply chains specifically at install time for a package and secondarily if i can get malicious code",
    "start": "104240",
    "end": "111439"
  },
  {
    "text": "running in your kubernetes clusters what can i do we will look at signing signing is the",
    "start": "111439",
    "end": "116960"
  },
  {
    "text": "fated mechanism by which to fix all these things signing is easy verification is hard and finally draw",
    "start": "116960",
    "end": "124320"
  },
  {
    "text": "everything together with the software factory pattern the panacea potentially",
    "start": "124320",
    "end": "129840"
  },
  {
    "text": "not but certainly a useful advancement in our journey",
    "start": "129840",
    "end": "136480"
  },
  {
    "start": "135000",
    "end": "166000"
  },
  {
    "text": "there has been so much chat about the supply chain already at kubecon there was a supply chain security con on",
    "start": "136480",
    "end": "142720"
  },
  {
    "text": "monday seek security or tag security as they are now ran the security day yesterday",
    "start": "142720",
    "end": "149760"
  },
  {
    "text": "and there's so much going on in the ecosystem right now we're really moving forward after a difficult i guess kind",
    "start": "149760",
    "end": "155840"
  },
  {
    "text": "of a few years of stasis as we build out new package managers and kind of since oci",
    "start": "155840",
    "end": "161120"
  },
  {
    "text": "existed so there is a lot here i will be referencing other talks throughout",
    "start": "161120",
    "end": "166879"
  },
  {
    "start": "166000",
    "end": "217000"
  },
  {
    "text": "so what is a supply chain it is anything that we depend upon in a military context this could be",
    "start": "166879",
    "end": "175120"
  },
  {
    "text": "the individual nuts and bolts that go into your aircraft carriers your collectively",
    "start": "175120",
    "end": "180560"
  },
  {
    "text": "pharmaceutically it is how we get drugs from a factory into a person without them dying from some sort of",
    "start": "180560",
    "end": "186319"
  },
  {
    "text": "contamination on the way same for food manufacturing is kind of just in time",
    "start": "186319",
    "end": "192159"
  },
  {
    "text": "toyota style manufacturing and software software is built of other pieces of",
    "start": "192159",
    "end": "197200"
  },
  {
    "text": "software and each of them has an independent supply chain as a consumer it is beyond our direct",
    "start": "197200",
    "end": "203280"
  },
  {
    "text": "control we have to have that trust in the previous steps and finally it is",
    "start": "203280",
    "end": "208799"
  },
  {
    "text": "reliant on trust which is never a solid thing on which to",
    "start": "208799",
    "end": "213840"
  },
  {
    "text": "base and so something we need to look at in depth so for a software supply chain any code",
    "start": "213840",
    "end": "220480"
  },
  {
    "start": "217000",
    "end": "236000"
  },
  {
    "text": "that ends up running in production is part of the supply chain",
    "start": "220480",
    "end": "225760"
  },
  {
    "text": "could possibly go wrong we ask ourselves",
    "start": "225760",
    "end": "230000"
  },
  {
    "text": "potentially a lot we rely upon our producers to have done things sensibly",
    "start": "232480",
    "end": "239200"
  },
  {
    "start": "236000",
    "end": "292000"
  },
  {
    "text": "and we can't necessarily always validate those things that they have done so as we move into this post",
    "start": "239200",
    "end": "246879"
  },
  {
    "text": "bare metal uh sort of cloud native renaissance future everything is defined as software that",
    "start": "246879",
    "end": "253200"
  },
  {
    "text": "extends from of course the applications that have always been software but the infrastructure is now programmable",
    "start": "253200",
    "end": "259359"
  },
  {
    "text": "our security is now defined and the same with policy as code it's reproducible",
    "start": "259359",
    "end": "264800"
  },
  {
    "text": "it's statically analyzable and this is really useful for us because it ensures reproducibility it gives us the",
    "start": "264800",
    "end": "270800"
  },
  {
    "text": "advantage of being able to test things in all sorts of different dimensions and domains and it means that with consistency we",
    "start": "270800",
    "end": "276560"
  },
  {
    "text": "can apply the same style and type of controls to each of those things so static",
    "start": "276560",
    "end": "282320"
  },
  {
    "text": "analysis and linting is a fine example in the kubernetes world everything is declarative and therefore we can define",
    "start": "282320",
    "end": "288880"
  },
  {
    "text": "what a good baseline state looks like and test it so",
    "start": "288880",
    "end": "294080"
  },
  {
    "start": "292000",
    "end": "343000"
  },
  {
    "text": "from a software factory perspective we're potentially building anything and everything software",
    "start": "294080",
    "end": "299680"
  },
  {
    "text": "what could that be well various different examples here artifacts the the actual deployment into clouds",
    "start": "299680",
    "end": "306479"
  },
  {
    "text": "that would that we're doing into some of those platforms all the way through infrastructure and especially our security and nfrs",
    "start": "306479",
    "end": "314560"
  },
  {
    "text": "importantly if we are going to use full build automation for all of these things which of course we should do",
    "start": "314560",
    "end": "321280"
  },
  {
    "text": "segregation of the build service becomes important because the privilege afforded to a security",
    "start": "321280",
    "end": "328080"
  },
  {
    "text": "based build server or perhaps something that's going on rotating certificates in networking appliances etc that should",
    "start": "328080",
    "end": "334400"
  },
  {
    "text": "probably be so isolated segregated and on its own managed network that it's not",
    "start": "334400",
    "end": "339759"
  },
  {
    "text": "visible to a lot of the rest of the organization",
    "start": "339759",
    "end": "344800"
  },
  {
    "start": "343000",
    "end": "447000"
  },
  {
    "text": "so supply chain everything is software we compose software of other pieces of software and",
    "start": "344800",
    "end": "352080"
  },
  {
    "text": "we've rely upon our producers for safety uh this is correct and non-violent in",
    "start": "352080",
    "end": "359600"
  },
  {
    "text": "the classic sense what does that mean well if we have a supply chain here with bob in the middle",
    "start": "359600",
    "end": "366400"
  },
  {
    "text": "bob as we see delivers alice's code to charlie if bob drops some malware and implant",
    "start": "366400",
    "end": "373039"
  },
  {
    "text": "some malicious software which does not perform the highest and best use of",
    "start": "373039",
    "end": "378560"
  },
  {
    "text": "the infrastructure that is on perhaps it's very difficult to detect and this process of malicious supply",
    "start": "378560",
    "end": "386080"
  },
  {
    "text": "chain insertion is something that we've seen happen more and more and increasingly um",
    "start": "386080",
    "end": "392000"
  },
  {
    "text": "becomes the new attack surface supply chains are very long and difficult to secure because not all of",
    "start": "392000",
    "end": "399120"
  },
  {
    "text": "the events occurring in the supply chain are even visible to us",
    "start": "399120",
    "end": "404160"
  },
  {
    "text": "and when we say the new software security frontier we're actually talking back to reflections on trusting trust to the",
    "start": "404160",
    "end": "410560"
  },
  {
    "text": "seminal paper on malicious compilers that build malware into their outputs",
    "start": "410560",
    "end": "417280"
  },
  {
    "text": "so there we are we must essentially trust everything in a supply chain",
    "start": "417280",
    "end": "422400"
  },
  {
    "text": "and this is where things get really difficult because if we don't trust each and every step",
    "start": "422400",
    "end": "428080"
  },
  {
    "text": "that's the insertion point at which stage potentially some malicious code is inserted into a",
    "start": "428080",
    "end": "434479"
  },
  {
    "text": "compiled artifact very difficult to detect because you have to perhaps reverse engineer or",
    "start": "434479",
    "end": "440319"
  },
  {
    "text": "decompile the thing in order to understand if there's a malicious side effect from the implant as we'll call it",
    "start": "440319",
    "end": "448240"
  },
  {
    "text": "there we go the reflections on trusting trust uh mr thompson himself okay so let's look at how to attack a",
    "start": "448240",
    "end": "455199"
  },
  {
    "start": "452000",
    "end": "501000"
  },
  {
    "text": "supply chain um the book features an archetypal eight-bit adversary this is",
    "start": "455199",
    "end": "460560"
  },
  {
    "text": "captain hash jack and his many guises",
    "start": "460560",
    "end": "465840"
  },
  {
    "text": "this malicious adversary wants to run his code in our production systems",
    "start": "466080",
    "end": "472800"
  },
  {
    "text": "it's really that simple it doesn't matter if that's crypto mining or popping a reverse shell which we'll look",
    "start": "472800",
    "end": "478720"
  },
  {
    "text": "at in a moment or in fact just adding ourselves or adding our infrastructure to a command",
    "start": "478720",
    "end": "484639"
  },
  {
    "text": "and control network so we can use that at a later point perhaps balance other malicious traffic through it use it for",
    "start": "484639",
    "end": "490479"
  },
  {
    "text": "something like a watering hole attack where you surface um or you host malicious code on somebody else's",
    "start": "490479",
    "end": "497039"
  },
  {
    "text": "infrastructure and so it becomes essentially a wide and recursive game what has happened recently",
    "start": "497039",
    "end": "504240"
  },
  {
    "start": "501000",
    "end": "636000"
  },
  {
    "text": "in the danger zone we have had uh the rebel gang",
    "start": "504240",
    "end": "509440"
  },
  {
    "text": "attack the colonial pipeline through a provider we've seen solarwinds which is kind of",
    "start": "509440",
    "end": "514560"
  },
  {
    "text": "the canonical example at this point because the impact was so wide",
    "start": "514560",
    "end": "522560"
  },
  {
    "text": "when we have a highly privileged piece of software like a server monitoring agent or observability and security",
    "start": "522880",
    "end": "530160"
  },
  {
    "text": "those kind of tools generally need a lot of access to the underlying system",
    "start": "530160",
    "end": "535440"
  },
  {
    "text": "that's because necessarily they're performing a task on behalf of humans and instead of having a human go in kind",
    "start": "535440",
    "end": "541440"
  },
  {
    "text": "of check the process table every so often we have something else do that monitoring for us",
    "start": "541440",
    "end": "547040"
  },
  {
    "text": "that kind of highly privileged software if attacked of course then has um",
    "start": "547040",
    "end": "552160"
  },
  {
    "text": "complete control of the underlying system and can perform uh sort of behavioral um",
    "start": "552160",
    "end": "558320"
  },
  {
    "text": "obfuscation and kind of hide what it's actually doing in the solarwinds case that was by using uh very very similar",
    "start": "558320",
    "end": "564880"
  },
  {
    "text": "debug style out network messages to the underlying products but just to",
    "start": "564880",
    "end": "571200"
  },
  {
    "text": "um to a maliciously hosted dns server and running command control that way",
    "start": "571200",
    "end": "577360"
  },
  {
    "text": "the network effect of this because one provider is attacked and that piece of software is installed in 50 hundred",
    "start": "577360",
    "end": "584480"
  },
  {
    "text": "thousand places it becomes um a huge amplification of",
    "start": "584480",
    "end": "589920"
  },
  {
    "text": "maliciousness perhaps what else we've seen uh code curve that was attacking a ci build and and the",
    "start": "589920",
    "end": "596399"
  },
  {
    "text": "point here as solarwinds was is that ci is highly privileged and therefore the",
    "start": "596399",
    "end": "601440"
  },
  {
    "text": "software factory makes some sense as i will attempt to convince you of um",
    "start": "601440",
    "end": "607600"
  },
  {
    "text": "notably here the last one as well xcode ghost was a concrete implementation of the reflections on trusting trust issue",
    "start": "607600",
    "end": "614640"
  },
  {
    "text": "which was a compiler that it was a backdoored version of xcode",
    "start": "614640",
    "end": "620399"
  },
  {
    "text": "and uh it would compile artifacts with a command control",
    "start": "620399",
    "end": "625920"
  },
  {
    "text": "botnet um client in it so anybody who compiled an artifact with this and distributed it",
    "start": "625920",
    "end": "631519"
  },
  {
    "text": "was then putting their consumers onto a botnet inadvertently",
    "start": "631519",
    "end": "637279"
  },
  {
    "start": "636000",
    "end": "800000"
  },
  {
    "text": "tag security one of my favorite places to hang out has this useful catalogue of supply chain compromises the groups a",
    "start": "637279",
    "end": "644640"
  },
  {
    "text": "lot of the attacks that we've seen in the past years into caspers as we can see",
    "start": "644640",
    "end": "650640"
  },
  {
    "text": "source code is the preeminent attack path here that means",
    "start": "650640",
    "end": "656240"
  },
  {
    "text": "getting someone's someone else's code into well getting malicious code into somebody else's repository",
    "start": "656240",
    "end": "662480"
  },
  {
    "text": "but hot on its heels developer tooling we'll look at how this this works with uh with the demo in a bit",
    "start": "662480",
    "end": "669920"
  },
  {
    "text": "publishing infrastructure at that point of course this is the icd systems this might be",
    "start": "669920",
    "end": "675920"
  },
  {
    "text": "um well in fact the next group trusting signing trust and signing as well getting into",
    "start": "675920",
    "end": "681920"
  },
  {
    "text": "the publishing infrastructure and either changing the source code just before it's built that was the solarwinds style",
    "start": "681920",
    "end": "688320"
  },
  {
    "text": "attack it becomes very difficult to determine what's occurred there because the compiler takes in trusted inputs",
    "start": "688320",
    "end": "695680"
  },
  {
    "text": "on the assumption that the build server is secure when we consider what a build server",
    "start": "695680",
    "end": "701360"
  },
  {
    "text": "does it's remote code execution as a service it's running on behalf of developers in order to save them from",
    "start": "701360",
    "end": "707760"
  },
  {
    "text": "the job of manually packaging their bits and shuffling them off somewhere else it's necessarily highly privileged",
    "start": "707760",
    "end": "714720"
  },
  {
    "text": "therein lies the attraction for an attacker",
    "start": "714720",
    "end": "720000"
  },
  {
    "text": "when we look at trust and signing often that is also a function of the build server those keys will be available or",
    "start": "720000",
    "end": "725279"
  },
  {
    "text": "there will be a signing endpoint that the build server has permission to push um artifacts to and receive signatures",
    "start": "725279",
    "end": "731440"
  },
  {
    "text": "in return like a kms system again it's the process of being on the build server and in control of its",
    "start": "731440",
    "end": "737120"
  },
  {
    "text": "behaviors that opens up these these types of attacks and of course we can chain them",
    "start": "737120",
    "end": "742399"
  },
  {
    "text": "together negligence makes an appearance notably that's for a pie pie typo",
    "start": "742399",
    "end": "748000"
  },
  {
    "text": "squatting attack hypo squatting is the process of taking something like event stream with a",
    "start": "748000",
    "end": "755120"
  },
  {
    "text": "hyphen in the middle that package to event stream without the hyphen and when developers are happily",
    "start": "755120",
    "end": "761680"
  },
  {
    "text": "just manually defining their dependencies on the command line both of them resolve and the attacker",
    "start": "761680",
    "end": "768240"
  },
  {
    "text": "keeps the malicious typo squatted secondary package up to date and then at",
    "start": "768240",
    "end": "773360"
  },
  {
    "text": "some point decides once it's got 100 000 in stores a week to add their own piece of malicious code maybe as a transitive",
    "start": "773360",
    "end": "779600"
  },
  {
    "text": "dependency so it's not clear to the original package and uh there and like the problems",
    "start": "779600",
    "end": "785200"
  },
  {
    "text": "fortunately the manifestations that we've seen of this so far are generally looking for crypto wallets",
    "start": "785200",
    "end": "791440"
  },
  {
    "text": "if they start looking for ssh keys gpg keys your aws credentials",
    "start": "791440",
    "end": "797200"
  },
  {
    "text": "then we might see these kind of things taken a little bit more seriously so how do we attack well",
    "start": "797200",
    "end": "804399"
  },
  {
    "start": "800000",
    "end": "962000"
  },
  {
    "text": "we can get into a developer's machine the end user device if it has a specific",
    "start": "804399",
    "end": "810480"
  },
  {
    "text": "endpoint protection may detect some of this probably not",
    "start": "810480",
    "end": "815519"
  },
  {
    "text": "it's legitimate that we're using our credentials getting into the source repository well that makes some sense it does leave a",
    "start": "815519",
    "end": "821279"
  },
  {
    "text": "trail of course because um we have uh everything is a merkle tree in gates and",
    "start": "821279",
    "end": "826800"
  },
  {
    "text": "that means that we can't rewrite that history unless we're forced pushing so once the",
    "start": "826800",
    "end": "831920"
  },
  {
    "text": "attack is in there as long as the repository has suitable sensible branch protections we'll be able to detect it",
    "start": "831920",
    "end": "838480"
  },
  {
    "text": "at a later stage the build infrastructure of course we've been talking about this hosted build",
    "start": "838480",
    "end": "844000"
  },
  {
    "text": "infrastructure um still suffers the same problems it's a question of access and",
    "start": "844000",
    "end": "849279"
  },
  {
    "text": "we'll look at how to detect compromises of build infrastructure as we progress",
    "start": "849279",
    "end": "855360"
  },
  {
    "text": "or we go into the trusted supply chain we move backwards from what the developer is doing um in their",
    "start": "855360",
    "end": "860959"
  },
  {
    "text": "repository and we say okay well you're putting in this dependency i'll attack that dependency or that dependency is",
    "start": "860959",
    "end": "866560"
  },
  {
    "text": "pulling in yet another dependency that's that's where we'll start any of these things can can run code and",
    "start": "866560",
    "end": "873839"
  },
  {
    "text": "if we consider where we might want to put that code it doesn't matter we can put it into the test suite a test suite",
    "start": "873839",
    "end": "879920"
  },
  {
    "text": "while it may be exercising the underlying code also has the ability to just dump",
    "start": "879920",
    "end": "885519"
  },
  {
    "text": "environment variables read things from disk push off the dns servers [Music]",
    "start": "885519",
    "end": "890639"
  },
  {
    "text": "we've also got the potential for command and control even if we're restricting what we allow into our organization places like github and",
    "start": "890639",
    "end": "898160"
  },
  {
    "text": "docker hub image registers we can publish to those as well so even running um air gaps or offline",
    "start": "898160",
    "end": "905519"
  },
  {
    "text": "infrastructure poses some sort of problem without being very strict and i say air gaps in the cloud sense very",
    "start": "905519",
    "end": "912079"
  },
  {
    "text": "strict and doing things like running split horizon dns so really just keeping this code out of",
    "start": "912079",
    "end": "918399"
  },
  {
    "text": "production is the the first line of defense finally of course we can actually attack",
    "start": "918399",
    "end": "924480"
  },
  {
    "text": "the runtime environment which is to say well everybody is using for example uh debian or ubuntu let's attack let's",
    "start": "924480",
    "end": "931680"
  },
  {
    "text": "attack one of the common packages in there fortunately that is significantly more difficult because we have a lot more eyes on that code",
    "start": "931680",
    "end": "938399"
  },
  {
    "text": "open source has a variance of how many people are taking the supply chain security seriously unfortunately",
    "start": "938399",
    "end": "945839"
  },
  {
    "text": "there's been a lot of effort put into things like reproducible builds and of course the fact that there are a lot of trusted",
    "start": "945839",
    "end": "952079"
  },
  {
    "text": "maintainers who are known individuals in those domains so in sort of order of",
    "start": "952079",
    "end": "958320"
  },
  {
    "text": "difficulty it's certainly the most difficult",
    "start": "958320",
    "end": "963680"
  },
  {
    "start": "962000",
    "end": "1034000"
  },
  {
    "text": "we have had salsa released recently which is a supply chain security framework",
    "start": "963680",
    "end": "970240"
  },
  {
    "text": "it does base a lot of its assumptions on the fact that your build server is not already compromised",
    "start": "970240",
    "end": "975759"
  },
  {
    "text": "if it is a lot of these things uh these things fall fall down but this is an example of various places",
    "start": "975759",
    "end": "982800"
  },
  {
    "text": "you can attack build obviously um if we bypass the code review or we don't",
    "start": "982800",
    "end": "988160"
  },
  {
    "text": "have four eyes as in a secondary individual merging code uh that there's potential for uh",
    "start": "988160",
    "end": "995040"
  },
  {
    "text": "any old junk to be committed we can compromise source control of course again we're leaving some evidence",
    "start": "995040",
    "end": "1000800"
  },
  {
    "text": "what we've done there modified after source control but that's a bit more interesting that's our solarwinds style attack",
    "start": "1000800",
    "end": "1007279"
  },
  {
    "text": "um compromise the build platform again they're kind of we're in a very difficult situation when",
    "start": "1007279",
    "end": "1012399"
  },
  {
    "text": "trusted infrastructure is compromised bad dependencies yes bypassing cicd all",
    "start": "1012399",
    "end": "1018000"
  },
  {
    "text": "together so just pushing straight into a package registry arguably you could do that by getting onto the build server",
    "start": "1018000",
    "end": "1024480"
  },
  {
    "text": "and uh exfiltrating those credentials you generally need a network route to do that of course",
    "start": "1024480",
    "end": "1029839"
  },
  {
    "text": "um and yeah bypassing compromising and uh bad packages",
    "start": "1029839",
    "end": "1035360"
  },
  {
    "text": "okay so let's put some meats on these bones",
    "start": "1035360",
    "end": "1041038"
  },
  {
    "text": "if we have an application dependency that we install from the internet onto our device in the process of building",
    "start": "1041280",
    "end": "1047199"
  },
  {
    "text": "software perfectly legitimate use we can potentially have that run malware",
    "start": "1047199",
    "end": "1053679"
  },
  {
    "text": "and i'll give you a quick example here um game over approaching",
    "start": "1053679",
    "end": "1059039"
  },
  {
    "text": "so how are we doing",
    "start": "1059039",
    "end": "1065440"
  },
  {
    "text": "um let's make that simpler uh right so what we've got here is an",
    "start": "1065440",
    "end": "1072559"
  },
  {
    "text": "npm package and as you can see in the package itself",
    "start": "1072559",
    "end": "1080080"
  },
  {
    "text": "it's an npm malicious implant example and we have this marvelous pre-installed hook",
    "start": "1080080",
    "end": "1085760"
  },
  {
    "text": "this means that before the package does anything it runs arbitrary code who's looking after that code when it's pushed",
    "start": "1085760",
    "end": "1092080"
  },
  {
    "text": "into npm",
    "start": "1092080",
    "end": "1095320"
  },
  {
    "text": "it's not us that's for sure so hypothetically we're just pulling a package especially if we're looking at",
    "start": "1097840",
    "end": "1103200"
  },
  {
    "text": "something that's been typo squatted we might expect this to be legitimate and we'll just do an npm install of uh",
    "start": "1103200",
    "end": "1109840"
  },
  {
    "text": "in our local directory and this is my example script what can",
    "start": "1109840",
    "end": "1116320"
  },
  {
    "text": "we do well we've got the permissions of the user running the script here these are uh",
    "start": "1116320",
    "end": "1122400"
  },
  {
    "text": "i mean yes we could do a denial of wallet attack on someone's laptop that's probably not very sensible but these are",
    "start": "1122400",
    "end": "1127840"
  },
  {
    "text": "bits of credentials um truncated bits and credentials for my ssh directory and my cloud providers and",
    "start": "1127840",
    "end": "1134640"
  },
  {
    "text": "this is a very real concern operations engineers may have",
    "start": "1134640",
    "end": "1139840"
  },
  {
    "text": "innumerable different kubernetes clusters listed in their cube config so this is a very difficult thing to",
    "start": "1139840",
    "end": "1145919"
  },
  {
    "text": "protect against there's no malware detection there's no antivirus that will stop an install performing",
    "start": "1145919",
    "end": "1153280"
  },
  {
    "text": "local file system actions that's the point that's what it's there to do so",
    "start": "1153280",
    "end": "1159760"
  },
  {
    "text": "that is the first attempt what can we actually do here well",
    "start": "1159760",
    "end": "1165919"
  },
  {
    "text": "2fa really is the uh the defense there's a reason that we put passwords and",
    "start": "1165919",
    "end": "1171200"
  },
  {
    "text": "things that we have uber keys and we have physical auth tokens because otherwise these things are very",
    "start": "1171200",
    "end": "1177360"
  },
  {
    "text": "easy to exfiltrate um plain text credentials yes of course um",
    "start": "1177360",
    "end": "1183120"
  },
  {
    "text": "crypto wallets really are the main target of all of these attacks at the moment so",
    "start": "1183120",
    "end": "1188160"
  },
  {
    "text": "um if you have money in them i'm sure you know how to look after them and air gap developments okay let's look at a",
    "start": "1188160",
    "end": "1195120"
  },
  {
    "start": "1193000",
    "end": "1579000"
  },
  {
    "text": "different demo now in kubernetes itself so",
    "start": "1195120",
    "end": "1199919"
  },
  {
    "text": "the principle here is that i as an attacker have managed to get you to run something in production that",
    "start": "1200160",
    "end": "1206480"
  },
  {
    "text": "contains my code there's a few ways to do this it could be an easter egg style attack where",
    "start": "1206480",
    "end": "1212960"
  },
  {
    "text": "it requires some form of trigger maybe that's a type the time and date maybe it's an identifier in the cluster itself",
    "start": "1212960",
    "end": "1221840"
  },
  {
    "text": "and the idea is that i sit on the internet",
    "start": "1222720",
    "end": "1230159"
  },
  {
    "text": "with an open port that's linked through to my machine i get the malicious image",
    "start": "1230159",
    "end": "1236960"
  },
  {
    "text": "and actually there's a wonderful way to do this with um with an app called uh",
    "start": "1236960",
    "end": "1242240"
  },
  {
    "text": "docker scan that will trojanize applications just by messing with the ld preload so you can't even see the thing",
    "start": "1242240",
    "end": "1248720"
  },
  {
    "text": "happening in the in the containers file system startup it's metadata in the",
    "start": "1248720",
    "end": "1254080"
  },
  {
    "text": "oci image and so what this does is when the container starts",
    "start": "1254080",
    "end": "1260480"
  },
  {
    "text": "it fires a reverse shell and it's called a reverse shell because you're going back to an attacker controlled endpoint",
    "start": "1260480",
    "end": "1265760"
  },
  {
    "text": "from inside the infrastructure back out so it punches through firewalls of course because if you have internet",
    "start": "1265760",
    "end": "1271600"
  },
  {
    "text": "access you're just going to resolve a host and port combination",
    "start": "1271600",
    "end": "1277600"
  },
  {
    "text": "and then i'm listening on the other end let's have a look at how this works",
    "start": "1277600",
    "end": "1283519"
  },
  {
    "text": "uh in order to get the reverse shell this is a prayer to the wi-fi gods incidentally in order to get the reverse",
    "start": "1284480",
    "end": "1290720"
  },
  {
    "text": "shell we use something called ngrok which is just free tcp forwarding so that's",
    "start": "1290720",
    "end": "1297200"
  },
  {
    "text": "opening a tunnel [Music] what we've got here is a local listener so that's just running",
    "start": "1297200",
    "end": "1303120"
  },
  {
    "text": "ncat here locally and that won't do anything until we have done this",
    "start": "1303120",
    "end": "1309120"
  },
  {
    "text": "so what we're going to do here is just create a pod",
    "start": "1309120",
    "end": "1315120"
  },
  {
    "text": "that pod is running this reverse shell to the resolved ip of the angular tunnel that we've just opened",
    "start": "1315120",
    "end": "1321840"
  },
  {
    "text": "this is the joy of having bash in your in your containers because you've got",
    "start": "1321840",
    "end": "1327120"
  },
  {
    "text": "this virtual dev tcp endpoint that we can use for nefarious activities such as this then we do a dynamic rewrite so",
    "start": "1327120",
    "end": "1334240"
  },
  {
    "text": "let's enable host pids let's uh let's make ourselves privileged",
    "start": "1334240",
    "end": "1340080"
  },
  {
    "text": "and with those two things we can either remount the host file system into the container or we can ana center the host",
    "start": "1340080",
    "end": "1346240"
  },
  {
    "text": "namespaces um and let's obviously in this situation i am",
    "start": "1346240",
    "end": "1351760"
  },
  {
    "text": "privileged uh in that i already have the capacity to very slowly",
    "start": "1351760",
    "end": "1358000"
  },
  {
    "text": "potentially deploy to the cluster let's see if that actually does everything",
    "start": "1358000",
    "end": "1365120"
  },
  {
    "text": "yes eventually okay",
    "start": "1366000",
    "end": "1371679"
  },
  {
    "text": "so let's run this it will it will spit out the",
    "start": "1371679",
    "end": "1377120"
  },
  {
    "text": "yaml that it runs as well you can you can see because this is um",
    "start": "1377120",
    "end": "1383600"
  },
  {
    "text": "because this is a publicly this public ip people are scanning this range and somebody's just tried to",
    "start": "1383600",
    "end": "1389600"
  },
  {
    "text": "connect to uh to my laptop oh wonderful and terminated this command",
    "start": "1389600",
    "end": "1395760"
  },
  {
    "text": "doesn't look good",
    "start": "1395760",
    "end": "1399240"
  },
  {
    "text": "okay so that's halfway there",
    "start": "1410000",
    "end": "1414600"
  },
  {
    "text": "i think it's because there's new lines nice",
    "start": "1417840",
    "end": "1422799"
  },
  {
    "text": "there we go so what have we done we've just dynamically created a reverse shell to",
    "start": "1423919",
    "end": "1428960"
  },
  {
    "text": "the endpoint that we've created here we have loved a privileged security",
    "start": "1428960",
    "end": "1434320"
  },
  {
    "text": "context in and enabled host pid and there we go there's the reverse shell",
    "start": "1434320",
    "end": "1439440"
  },
  {
    "text": "so what does this mean well i'm now inside a container in your infrastructure because you ran a",
    "start": "1439440",
    "end": "1446240"
  },
  {
    "text": "thing that i hid a back door in essentially and from here of course we've got the canonical",
    "start": "1446240",
    "end": "1451600"
  },
  {
    "text": "what is available let's map well we know that we're",
    "start": "1451600",
    "end": "1457039"
  },
  {
    "text": "uh we know that we're in a privileged container because dev is unmasked we can see all the",
    "start": "1457520",
    "end": "1463520"
  },
  {
    "text": "things in here um [Music] and because we can use df to see",
    "start": "1463520",
    "end": "1469919"
  },
  {
    "text": "where etsy hosts is mounted in by the container runtime that's leaked the name of the underlying disk and then we can",
    "start": "1469919",
    "end": "1476080"
  },
  {
    "text": "remount that into oops to daisy dratz okay",
    "start": "1476080",
    "end": "1482240"
  },
  {
    "text": "i'm just going to do that again for the sake of actually finishing that demo because i managed to close the window",
    "start": "1482240",
    "end": "1489039"
  },
  {
    "text": "so if i just delete that deployment",
    "start": "1489039",
    "end": "1493759"
  },
  {
    "text": "and then rerun the shell catcher so that's now opening another public ip",
    "start": "1495840",
    "end": "1503039"
  },
  {
    "text": "and port combination then i'll rerun this",
    "start": "1503039",
    "end": "1508158"
  },
  {
    "text": "and it's not there and i expect that also there we go and that then fires this okay so as we",
    "start": "1509360",
    "end": "1516240"
  },
  {
    "text": "were we can see let's remount this into amount endpoints",
    "start": "1516240",
    "end": "1524720"
  },
  {
    "text": "and then we can see so that's the host file system and from here we can do whatever we like we can go and exfiltrate thing we can pull the",
    "start": "1525039",
    "end": "1531440"
  },
  {
    "text": "authorized key well we can pull any private keys that are sat in the host file system we can add our own keys into",
    "start": "1531440",
    "end": "1537600"
  },
  {
    "text": "authorized keys if we want to get there we can also um securely by this route",
    "start": "1537600",
    "end": "1543440"
  },
  {
    "text": "fire off another persistence uh reverse shell and just jump straight in it's game over for that node without node",
    "start": "1543440",
    "end": "1550240"
  },
  {
    "text": "authorization this game over the cluster and if there are any privileged workload integrations it might be game over for",
    "start": "1550240",
    "end": "1556559"
  },
  {
    "text": "the cloud account okay so that's what happened we went outbound to the developers sorry to the",
    "start": "1556559",
    "end": "1563279"
  },
  {
    "text": "uh so from my machine i created that public sockets",
    "start": "1563279",
    "end": "1569360"
  },
  {
    "text": "i ran the implant which then connected back to it and then i've got essentially a command control session a reverse",
    "start": "1569360",
    "end": "1575039"
  },
  {
    "text": "shell into the into the victim the point here is that we do not want under any circumstances that to happen",
    "start": "1575039",
    "end": "1582320"
  },
  {
    "start": "1579000",
    "end": "1654000"
  },
  {
    "text": "there are ways around this we've got things like trivia to scan our images which should prevent some of these things of course",
    "start": "1582320",
    "end": "1588880"
  },
  {
    "text": "we need somebody to detect a malicious image in the first place obviously we want security context",
    "start": "1588880",
    "end": "1594480"
  },
  {
    "text": "there's build time behavioral analysis that we can do and the ebpf of course is the buzzword and the thing that will",
    "start": "1594480",
    "end": "1600000"
  },
  {
    "text": "help us do that okay so",
    "start": "1600000",
    "end": "1605120"
  },
  {
    "text": "let's move on into the last section of the software factory looking at policy and attestation as",
    "start": "1605120",
    "end": "1610880"
  },
  {
    "text": "we've said signing is the easy part verification is more difficult",
    "start": "1610880",
    "end": "1617279"
  },
  {
    "text": "um mike and tim uh from citibank did a great demo",
    "start": "1617279",
    "end": "1623039"
  },
  {
    "text": "yesterday on monday actually at supply chain security con with a modern implementation of the reflections",
    "start": "1623039",
    "end": "1629600"
  },
  {
    "text": "on trusting trust attack that is going into the build server and swapping things out and looking at how we can use",
    "start": "1629600",
    "end": "1636159"
  },
  {
    "text": "uh coastline which is which is part of the sig store suite of tools to protect against that",
    "start": "1636159",
    "end": "1644080"
  },
  {
    "text": "um yes and that demo is uh there we go sloane's loading um that",
    "start": "1644080",
    "end": "1649120"
  },
  {
    "text": "demo is available i think the videos for that will be out in a couple of weeks and well worth a watch",
    "start": "1649120",
    "end": "1654799"
  },
  {
    "start": "1654000",
    "end": "1703000"
  },
  {
    "text": "okay so looking at all those problems how do we fix them signing is the way",
    "start": "1654799",
    "end": "1660720"
  },
  {
    "text": "we take a public and private key pair we use some data and we create a signature that can then be revalidated",
    "start": "1660720",
    "end": "1666960"
  },
  {
    "text": "at a later date with the public key",
    "start": "1666960",
    "end": "1671440"
  },
  {
    "text": "in terms of build server attestation and security we can also sign each",
    "start": "1672159",
    "end": "1677440"
  },
  {
    "text": "individual build step now this gets difficult because we need to know that the inputs and the outputs stay consistent if we're performing a",
    "start": "1677440",
    "end": "1684000"
  },
  {
    "text": "translation or compilation step in the middle then we're just signing the fact that a",
    "start": "1684000",
    "end": "1689279"
  },
  {
    "text": "build step occurred this is better than nothing but still there are constraints to what this can do",
    "start": "1689279",
    "end": "1694399"
  },
  {
    "text": "in toto is the de facto tool to do this it's integrated into tech on chains at",
    "start": "1694399",
    "end": "1699440"
  },
  {
    "text": "this point and uh and there's a lot of work on going in there as well",
    "start": "1699440",
    "end": "1705760"
  },
  {
    "start": "1703000",
    "end": "1750000"
  },
  {
    "text": "we can also sign container images so we've got those individual signatures for the build stages that creates an",
    "start": "1705760",
    "end": "1711360"
  },
  {
    "text": "artifact that artifact is then trusted in inverted commas and we can then go and sign the things",
    "start": "1711360",
    "end": "1717360"
  },
  {
    "text": "so that again we can revalidate that at a later date and sigstor",
    "start": "1717360",
    "end": "1722720"
  },
  {
    "text": "and notary v2 are the emergent forerunners in the space",
    "start": "1722720",
    "end": "1728480"
  },
  {
    "text": "to effectively sign our artifacts recall as a transparency log operates in",
    "start": "1728480",
    "end": "1733760"
  },
  {
    "text": "the same way as the let's encrypt style of certificate transparency log",
    "start": "1733760",
    "end": "1739279"
  },
  {
    "text": "where all our metadata is put somewhere public so that anybody can revalidate it at a",
    "start": "1739279",
    "end": "1744559"
  },
  {
    "text": "later stage and be sure that it was us doing the thing to the artifact",
    "start": "1744559",
    "end": "1751279"
  },
  {
    "start": "1750000",
    "end": "1811000"
  },
  {
    "text": "there's all sorts of different parts of sigstor uh the uh the maintainers have just started a company around this as",
    "start": "1751279",
    "end": "1757200"
  },
  {
    "text": "well they have a booth here somewhere um they are called chain guards and well worth conversation",
    "start": "1757200",
    "end": "1764960"
  },
  {
    "text": "and uh i've i've got a quote from um from mike himself here software does not compromise itself it's humans that are",
    "start": "1765360",
    "end": "1772320"
  },
  {
    "text": "the problem and if companies don't publicly provide transparency into what is inside their",
    "start": "1772320",
    "end": "1778320"
  },
  {
    "text": "compiled artifacts so what happened in the build this is the software bill of materials that again there's a lot of",
    "start": "1778320",
    "end": "1783760"
  },
  {
    "text": "conversation about this week if uh i mean perhaps it's the one thing",
    "start": "1783760",
    "end": "1790159"
  },
  {
    "text": "to say but um if if you've got nothing to hide you've got nothing to fear or something around that ultimately we want",
    "start": "1790159",
    "end": "1796559"
  },
  {
    "text": "to know if somebody ships us a binary artifact with a compromised packaging because we want to upgrade that when",
    "start": "1796559",
    "end": "1802880"
  },
  {
    "text": "there's a zero-day release for a dependency that's packaged and deployed in our systems we deserve to",
    "start": "1802880",
    "end": "1808640"
  },
  {
    "text": "know so we can take remediative action okay so underpinning all of these things",
    "start": "1808640",
    "end": "1814159"
  },
  {
    "text": "is a question of identity spiffy another cncf project is ephemeral workload identity this gives us it signs a",
    "start": "1814159",
    "end": "1821760"
  },
  {
    "text": "certificate containing metadata about the process and with a very short expiration that",
    "start": "1821760",
    "end": "1828399"
  },
  {
    "text": "can be used to be used as the root of trust signing it can be used as an identity istio uses",
    "start": "1828399",
    "end": "1834240"
  },
  {
    "text": "this concept from mutual tls for workload identity and it's incredibly powerful",
    "start": "1834240",
    "end": "1839600"
  },
  {
    "text": "all of these projects are kind of being smushed together in this concept of a software factory in order to give us",
    "start": "1839600",
    "end": "1846480"
  },
  {
    "text": "and in totogolang is again another integration in order to give us this kind of",
    "start": "1846480",
    "end": "1851840"
  },
  {
    "text": "end-to-end signing and this takes us to the software factory so",
    "start": "1851840",
    "end": "1858000"
  },
  {
    "text": "what is this it is building pipelines that build other pipelines so that our devops is strong",
    "start": "1858000",
    "end": "1864960"
  },
  {
    "text": "that is bertha the uh 1980s children's tv show in the uk and it means that",
    "start": "1864960",
    "end": "1871519"
  },
  {
    "text": "we have a strong baseline of devops skills if you like and the ability to",
    "start": "1871519",
    "end": "1876640"
  },
  {
    "text": "stand up new infrastructure very quickly aggressive automation and it welcomes signing approaches",
    "start": "1876640",
    "end": "1883518"
  },
  {
    "text": "so there's lots of different moving parts it is a large complex not intractable problem with a lot of",
    "start": "1885760",
    "end": "1891279"
  },
  {
    "text": "different organizations um working to working to deliver a sort of canonical",
    "start": "1891279",
    "end": "1897679"
  },
  {
    "text": "implementation the department of defense is one of those organizations they have built a",
    "start": "1897679",
    "end": "1903200"
  },
  {
    "start": "1898000",
    "end": "1965000"
  },
  {
    "text": "reference design it doesn't come with an implementation it's a white paper so um",
    "start": "1903200",
    "end": "1909840"
  },
  {
    "text": "a control plane and colleagues at citibank and the tag security supply chain working group",
    "start": "1909840",
    "end": "1915919"
  },
  {
    "text": "are looking to build out a concrete implementation based upon these things and of course um underpinning everything",
    "start": "1915919",
    "end": "1922799"
  },
  {
    "text": "is this concept of rigorous automation um the reference architecture",
    "start": "1922799",
    "end": "1928240"
  },
  {
    "text": "i apologize for the slow image loading on these okay so",
    "start": "1928240",
    "end": "1933360"
  },
  {
    "text": "what we're looking at here is a subdivision of different trust domains",
    "start": "1933360",
    "end": "1938399"
  },
  {
    "text": "and in the bottom corner we've got the source control and in the bottom green",
    "start": "1938399",
    "end": "1945039"
  },
  {
    "text": "uh box we see an identity a tester that is a privileged process that is looking",
    "start": "1945039",
    "end": "1950159"
  },
  {
    "text": "at metadata about processes running on the same system in order to uniquely identify it attest to its identity and",
    "start": "1950159",
    "end": "1957120"
  },
  {
    "text": "then provide that as the route of identity with which to mint a certificate",
    "start": "1957120",
    "end": "1963679"
  },
  {
    "text": "i'm sure there's a nice image there okay so the the trick here",
    "start": "1963679",
    "end": "1969440"
  },
  {
    "text": "um oh that's all right so just to roll back slightly so different views on the software factory architecture here",
    "start": "1969440",
    "end": "1975360"
  },
  {
    "text": "what we're looking at here is a kubernetes system running tekton the",
    "start": "1975360",
    "end": "1980880"
  },
  {
    "text": "distributed build system um that's actually underpinning jenkins x2 i think",
    "start": "1980880",
    "end": "1987840"
  },
  {
    "text": "they've moved on to it there is an assumption here that the cluster is secured that the the",
    "start": "1987840",
    "end": "1993039"
  },
  {
    "text": "infrastructure that the sres the people with access to it it's all locked down",
    "start": "1993039",
    "end": "1998880"
  },
  {
    "text": "once that assumption is valid then we see we have tekton here which is able to perform these individual task runs which",
    "start": "1998880",
    "end": "2005120"
  },
  {
    "text": "are our build steps text on chains ensures that the steps are run generates that signature and pushes it",
    "start": "2005120",
    "end": "2011760"
  },
  {
    "text": "out to a signature store and recall so again that's the public transparency log",
    "start": "2011760",
    "end": "2016880"
  },
  {
    "text": "and an evidence lake of some description um and then we see we have also got our",
    "start": "2016880",
    "end": "2023840"
  },
  {
    "text": "signing key in order to get that s-vid and at the top we have spire which is that workload",
    "start": "2023840",
    "end": "2030880"
  },
  {
    "text": "identity it's that dynamic attestation of uh which means certificates for us to",
    "start": "2030880",
    "end": "2037679"
  },
  {
    "text": "use in signing none of this solves the problem of compromised build infrastructure so how",
    "start": "2037679",
    "end": "2043360"
  },
  {
    "start": "2038000",
    "end": "2161000"
  },
  {
    "text": "do we fix malicious sres or underlying maybe the supply chain attack against our",
    "start": "2043360",
    "end": "2049919"
  },
  {
    "text": "hosting provider the trick is to run it twice in different places this is already done by",
    "start": "2049919",
    "end": "2055679"
  },
  {
    "text": "the entoto project which supports well entoto supports this this is how our",
    "start": "2055679",
    "end": "2061599"
  },
  {
    "text": "operating systems build packages globally distributed builds um",
    "start": "2061599",
    "end": "2067440"
  },
  {
    "text": "the idea being if one of those builds is compromised and we have reproducibility for all the artifacts that we build we",
    "start": "2067440",
    "end": "2073760"
  },
  {
    "text": "compare the hashes and if the hashes don't line up something's changed that might be non-determinism in the build that might",
    "start": "2073760",
    "end": "2079839"
  },
  {
    "text": "be the introduction of temporal data or change of locale so things are ordered differently on disk they go into a",
    "start": "2079839",
    "end": "2085200"
  },
  {
    "text": "compressed artifact and they have a different ordering so there's a different hash but on the assumption that those things",
    "start": "2085200",
    "end": "2090800"
  },
  {
    "text": "are normalized and we actually have full reproducibility of the artifacts that we build this is uh this is the de facto",
    "start": "2090800",
    "end": "2097760"
  },
  {
    "text": "mechanism by which to detect compromised building structure going all the way back to the software",
    "start": "2097760",
    "end": "2103359"
  },
  {
    "text": "factory pattern the software factory should be able to build itself it should be able to recover from disaster",
    "start": "2103359",
    "end": "2108800"
  },
  {
    "text": "effectively and should be able to build other types of pipeline very effectively as well",
    "start": "2108800",
    "end": "2114240"
  },
  {
    "text": "once that level of automation and sort of rigor has been achieved this becomes a natural extension",
    "start": "2114240",
    "end": "2120560"
  },
  {
    "text": "up until that point there is a lot of work it's difficult to front load this kind of efforts and",
    "start": "2120560",
    "end": "2125920"
  },
  {
    "text": "i'm not going to try and say that it's not but once we have that solid baseline the",
    "start": "2125920",
    "end": "2131440"
  },
  {
    "text": "evidence lake becomes a comparative place where we can essentially detect signals of compromise",
    "start": "2131440",
    "end": "2137839"
  },
  {
    "text": "in a way that's very difficult to do otherwise as we've seen the uh sig store um group have put",
    "start": "2137839",
    "end": "2146800"
  },
  {
    "text": "together this uh and dan lawrence is here as well um put together an excellent white paper if you'd like to read more on that",
    "start": "2146800",
    "end": "2154240"
  },
  {
    "text": "that is the end that is captain hashtag and thank you very much for your attention",
    "start": "2154240",
    "end": "2160920"
  }
]