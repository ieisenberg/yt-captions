[
  {
    "text": "well good morning everyone we're gonna go ahead and get started hope you all enjoy the keynotes this morning my name is Tim Hendricks I'm",
    "start": "179",
    "end": "6629"
  },
  {
    "text": "from open policy agent and steer and I'm your track host for the next couple of presentations just a reminder we're",
    "start": "6629",
    "end": "13290"
  },
  {
    "text": "gonna have the usual set up for this talk so five minutes for Q&A at the end I'll run around with a microphone if you",
    "start": "13290",
    "end": "18600"
  },
  {
    "text": "have questions and don't forget to rate the session by logging into sched at the",
    "start": "18600",
    "end": "24029"
  },
  {
    "text": "end of the talk so without further ado we have cornelia davis here with us today the vp of technology at pivotal",
    "start": "24029",
    "end": "30720"
  },
  {
    "text": "and she'll be discussing kubernetes and containers all through the lens of functional programming so it should be",
    "start": "30720",
    "end": "37020"
  },
  {
    "text": "pretty great all right thank you so much [Music]",
    "start": "37020",
    "end": "43070"
  },
  {
    "text": "and and just so that I make sure that I'm gonna do my best for the five minutes of Q&A at the end",
    "start": "43070",
    "end": "49379"
  },
  {
    "text": "but it's 35 minutes total right okay so right mental note okay so this is a",
    "start": "49379",
    "end": "57270"
  },
  {
    "text": "crazy huge room and I was in here the other day when Zalando spoke and they filled every seat thank you for coming",
    "start": "57270",
    "end": "64619"
  },
  {
    "text": "because I thought it was gonna feel like there's 10 of us in this room that holds 14-under people and so i'm delighted",
    "start": "64619",
    "end": "70920"
  },
  {
    "text": "that you're here and i hope to make it worth your while I am hoping that this is going to be a really fun presentation",
    "start": "70920",
    "end": "76799"
  },
  {
    "text": "I do think it's kind of funny I am call out to the person who's sitting in the last row on the last seat how you doing",
    "start": "76799",
    "end": "86479"
  },
  {
    "text": "big room plenty of room alright so let's get started the first thing that I want",
    "start": "86479",
    "end": "93180"
  },
  {
    "text": "to do is introduce myself a little bit and tell you where this is coming from so before I do that how many people in",
    "start": "93180",
    "end": "100680"
  },
  {
    "text": "the room would self-identify as a functional programmer okay about what I",
    "start": "100680",
    "end": "107369"
  },
  {
    "text": "expected it looks like maybe about 10 15 % so I think this is going to be really",
    "start": "107369",
    "end": "114090"
  },
  {
    "text": "fun so that's really cool let me tell you a little bit about myself and I do self-identify as a functional programmer",
    "start": "114090",
    "end": "120390"
  },
  {
    "text": "which is why I have been so in crate crazy incredibly delighted with",
    "start": "120390",
    "end": "125790"
  },
  {
    "text": "kubernetes over the last couple of years as I've gotten involved I like many of",
    "start": "125790",
    "end": "131370"
  },
  {
    "text": "you started out I was studying computer science quite a",
    "start": "131370",
    "end": "137189"
  },
  {
    "text": "number of years ago thirty years ago I think I graduated thirty years ago from university I went to Cal State",
    "start": "137189",
    "end": "143879"
  },
  {
    "text": "University Northridge which is in the Greater Los Angeles area because it was in the Greater Los Angeles area that",
    "start": "143879",
    "end": "150689"
  },
  {
    "text": "curriculum for computer science was really focused on getting people ready for industry and what that meant was",
    "start": "150689",
    "end": "158209"
  },
  {
    "text": "iterative programming languages unfortunately very much the same way it",
    "start": "158209",
    "end": "164099"
  },
  {
    "text": "still is today maybe fortunately maybe unfortunately we'll get into that in a little bit more detail the languages",
    "start": "164099",
    "end": "171090"
  },
  {
    "text": "that I programmed in I programmed a little bit in high school I used basic in high school",
    "start": "171090",
    "end": "176849"
  },
  {
    "text": "basic when it still had line numbers some of you may never have seen that I",
    "start": "176849",
    "end": "182099"
  },
  {
    "text": "programmed in Pascal anybody else Fortran COBOL EDA yeah these are all the",
    "start": "182099",
    "end": "193260"
  },
  {
    "text": "languages that I programmed in all imperative languages and if you don't know exactly what I mean by that I'm",
    "start": "193260",
    "end": "198870"
  },
  {
    "text": "going to go into a little bit more of an example and I went into industry and I worked for a number of years I worked",
    "start": "198870",
    "end": "205169"
  },
  {
    "text": "for a large aerospace company Hughes Aircraft and after a few years of work I said I'll screw this I'm going to go",
    "start": "205169",
    "end": "210389"
  },
  {
    "text": "back to school and I went back to school and started a PhD I never finished I'm a",
    "start": "210389",
    "end": "215459"
  },
  {
    "text": "beedi all but dissertation and I went to Indiana University which was interesting",
    "start": "215459",
    "end": "221370"
  },
  {
    "text": "because it was a University out in the middle of nowhere small town 30,000 people in southern Indiana very research",
    "start": "221370",
    "end": "229709"
  },
  {
    "text": "oriented school and when I went there I studied programming languages and",
    "start": "229709",
    "end": "234810"
  },
  {
    "text": "theoretical computer science for three years I did my qualls in theoretical computer science and in the interesting",
    "start": "234810",
    "end": "244019"
  },
  {
    "text": "thing when you do something like theoretical computer science and programming languages is that you learn it from a very mathematical standpoint",
    "start": "244019",
    "end": "250560"
  },
  {
    "text": "and it turns out the math is a lot easier with functional programming than it is iterative and that's really the",
    "start": "250560",
    "end": "258060"
  },
  {
    "text": "theme that's the thing that's going to the undercurrent that's going to cut through this entire presentation in",
    "start": "258060",
    "end": "264130"
  },
  {
    "text": "at Indiana University when I was there I think it may have changed but when I was there we taught scheme as the first",
    "start": "264130",
    "end": "272110"
  },
  {
    "text": "language that we taught to our undergraduates coming in I was a teaching assistant while I was there and",
    "start": "272110",
    "end": "277900"
  },
  {
    "text": "that's the first language we taught them and there was some really interesting things that all maybe touch upon as we",
    "start": "277900",
    "end": "284590"
  },
  {
    "text": "go through the presentation I obviously can't get too far away from my laptop",
    "start": "284590",
    "end": "289660"
  },
  {
    "text": "there we go a pivotal I work on product strategy I did that for I've been with",
    "start": "289660",
    "end": "295540"
  },
  {
    "text": "pivotal since the spinoff so I worked on Cloud Foundry for a number of years I worked on our cloud caching product and",
    "start": "295540",
    "end": "301750"
  },
  {
    "text": "for about the last two years I've been working on our pivotal container service product which is our kubernetes product",
    "start": "301750",
    "end": "308590"
  },
  {
    "text": "I identified as a dev but since working at pivotal and working with customers on",
    "start": "308590",
    "end": "314200"
  },
  {
    "text": "the platform I have become an Operations person as well and more recently I have",
    "start": "314200",
    "end": "320620"
  },
  {
    "text": "just finished this book it started the print copies started shipping the day",
    "start": "320620",
    "end": "326290"
  },
  {
    "text": "before yesterday so I just finished it and if you're interested there's a discount code there for 40% I'll put",
    "start": "326290",
    "end": "333160"
  },
  {
    "text": "this up again at the end the discount code if you're interested the book is an architectural book so it's all about",
    "start": "333160",
    "end": "339760"
  },
  {
    "text": "cloud native patterns things like scale out statelessness retries retry storms",
    "start": "339760",
    "end": "347050"
  },
  {
    "text": "circuit breakers service discovery all that stuff but very much from a focus of",
    "start": "347050",
    "end": "352540"
  },
  {
    "text": "why are you doing these patterns the patterns themselves aren't that hard but if you understand the why behind them",
    "start": "352540",
    "end": "359020"
  },
  {
    "text": "you'll be able to use them a lot more effectively so that's a that's what the book is about all right without further",
    "start": "359020",
    "end": "365410"
  },
  {
    "text": "ado let's jump into it and that's a blank screen and what R is",
    "start": "365410",
    "end": "370660"
  },
  {
    "text": "I remember where we're going so when I started programming I actually started",
    "start": "370660",
    "end": "375970"
  },
  {
    "text": "programming embedded systems and what we had in embedded systems was we had",
    "start": "375970",
    "end": "381040"
  },
  {
    "text": "single threaded processes running on a single processor on a single machine that was it",
    "start": "381040",
    "end": "387070"
  },
  {
    "text": "know distributed systems whatsoever and then we started to evolve and we started",
    "start": "387070",
    "end": "393190"
  },
  {
    "text": "to have multiple processors I even member working on an embedded system once where we had two processors and we",
    "start": "393190",
    "end": "400340"
  },
  {
    "text": "actually had out on the whiteboard where the communication points were going to be and we actually timed how long it was",
    "start": "400340",
    "end": "407120"
  },
  {
    "text": "going to take to run a certain piece of code over on this processor so that we could then hand over to this other",
    "start": "407120",
    "end": "412610"
  },
  {
    "text": "processor that was going to do in a number of things I see a couple of people nodding so this is somewhat",
    "start": "412610",
    "end": "417710"
  },
  {
    "text": "familiar so we started having multi processors or or you know maybe even multi-threading so we added that then we",
    "start": "417710",
    "end": "425840"
  },
  {
    "text": "started having us so multi-threading and then we added multiple processors and now we're all distributed systems",
    "start": "425840",
    "end": "434120"
  },
  {
    "text": "programmers agreed right the internet happened and we all program distributed",
    "start": "434120",
    "end": "439700"
  },
  {
    "text": "systems part of our logic runs in the browser part of it runs on that mid tier",
    "start": "439700",
    "end": "444800"
  },
  {
    "text": "which used to be a single machine but now is a whole bunch of different machines that's one of the things that",
    "start": "444800",
    "end": "450560"
  },
  {
    "text": "characterizes the cloud so we're all distributed systems programmers now thirty years ago there that was just",
    "start": "450560",
    "end": "457010"
  },
  {
    "text": "very niche so what has happened to programming languages over the course of this well in the beginning I even did a",
    "start": "457010",
    "end": "464840"
  },
  {
    "text": "little bit of assembly programming to really optimize all of the the the processing that you could do on that",
    "start": "464840",
    "end": "470450"
  },
  {
    "text": "single processor but arguably when you start going into multiple threads programming us in assembly gets really",
    "start": "470450",
    "end": "476870"
  },
  {
    "text": "hard so you have to use some higher-level languages that maybe know some things about threads and those",
    "start": "476870",
    "end": "482150"
  },
  {
    "text": "types of things so you see a whole host of languages here what is interesting is",
    "start": "482150",
    "end": "487970"
  },
  {
    "text": "that as we've all become distributed systems programmers we've started to see",
    "start": "487970",
    "end": "494110"
  },
  {
    "text": "popularity emerge for a new category of languages and those are the functional",
    "start": "494110",
    "end": "501530"
  },
  {
    "text": "languages so that earlier languages were all imperative languages and that's what again I learned about 30 years ago but",
    "start": "501530",
    "end": "508940"
  },
  {
    "text": "these newer languages are fall into the category of functional languages okay so",
    "start": "508940",
    "end": "514880"
  },
  {
    "text": "that's for functional programming and there's a couple of reasons for that but I'll go into that in just a moment I",
    "start": "514880",
    "end": "521450"
  },
  {
    "text": "want to show you an example so for those of you who really don't are thinking like okay",
    "start": "521450",
    "end": "526830"
  },
  {
    "text": "eglee I understand the difference between imperative and functional let me give you a little bit of a review and I",
    "start": "526830",
    "end": "532350"
  },
  {
    "text": "want to do so with an example so when I initially started doing some of this",
    "start": "532350",
    "end": "537450"
  },
  {
    "text": "work my son was taking my son who graduated with a degree in computer science I am so happy he was doing a",
    "start": "537450",
    "end": "546990"
  },
  {
    "text": "class in bioinformatics and one of the projects that he needed to work on it was they were taking the human genome",
    "start": "546990",
    "end": "553140"
  },
  {
    "text": "and they were doing some sequencing on that and what they needed to do was take the genome and break it down into",
    "start": "553140",
    "end": "559260"
  },
  {
    "text": "segments and then they process each one of the segments of course they're doing it in parallel and then they merged the",
    "start": "559260",
    "end": "565380"
  },
  {
    "text": "results together there was an algorithm that they were doing there and so the first step was to take this really long",
    "start": "565380",
    "end": "570990"
  },
  {
    "text": "string and break it down into segments but if the segments were too small then",
    "start": "570990",
    "end": "576030"
  },
  {
    "text": "the processing that happened within a single segment wasn't really meaningful anymore there wasn't enough data so",
    "start": "576030",
    "end": "582230"
  },
  {
    "text": "after breaking into smaller segments he wrote an algorithm to merge together",
    "start": "582230",
    "end": "587820"
  },
  {
    "text": "segments that were too small so what you see here is you see the range is on segments the first segment is 5 long 0",
    "start": "587820",
    "end": "594870"
  },
  {
    "text": "through 5 non-inclusive than 5 through 17 17 through 20 and so on and so what",
    "start": "594870",
    "end": "600390"
  },
  {
    "text": "we want to do is we want to merge this together into segments that have a",
    "start": "600390",
    "end": "605480"
  },
  {
    "text": "minimum size well actually initially and so that's what we're gonna do here sorry",
    "start": "605480",
    "end": "611730"
  },
  {
    "text": "I'm stealing my thunder so this is going to be the output 0 through 5 is too small 17 through 20 s too small and",
    "start": "611730",
    "end": "618780"
  },
  {
    "text": "we're gonna merge them together so let's look at a couple of different ways of doing that the first thing that my son",
    "start": "618780",
    "end": "624480"
  },
  {
    "text": "did was he wrote it in Python and he wrote it despite my by my best efforts",
    "start": "624480",
    "end": "630330"
  },
  {
    "text": "he wrote it wrote it in an iterative style and rather than stepping through the code let me show you pictorially",
    "start": "630330",
    "end": "635760"
  },
  {
    "text": "what this algorithm effectively does starts out with the first array of the segments and it does a scan it finds one",
    "start": "635760",
    "end": "643080"
  },
  {
    "text": "that is too short and it merges it into the next moves the cursor over finds",
    "start": "643080",
    "end": "649230"
  },
  {
    "text": "another one that's too short merges it in moves the cursor over and now the cursor the counter is one beyond the end",
    "start": "649230",
    "end": "657490"
  },
  {
    "text": "that was the exit criteria for the loop and you get this answer but you know",
    "start": "657490",
    "end": "663519"
  },
  {
    "text": "what there's actually a bug in that algorithm which gets me to the point of some of the characteristics the",
    "start": "663519",
    "end": "669670"
  },
  {
    "text": "hallmarks of iterative programs they're sequential you control every step",
    "start": "669670",
    "end": "676379"
  },
  {
    "text": "remember that because that's one of the important things that when I start to characterize it in the kubernetes lens",
    "start": "676379",
    "end": "683339"
  },
  {
    "text": "that you don't you no longer control every step that's one of the big differences",
    "start": "683339",
    "end": "688629"
  },
  {
    "text": "so with imperative you you're you control every step and you have side",
    "start": "688629",
    "end": "693970"
  },
  {
    "text": "effects you've got variables and what you end up with is hairy edge cases and it's",
    "start": "693970",
    "end": "700569"
  },
  {
    "text": "difficult to parallel eyes because you have shared state so how are you going to coordinate all of these different",
    "start": "700569",
    "end": "706240"
  },
  {
    "text": "threads that are working together on shared State so it's very difficult to parallel eyes and in fact that algorithm",
    "start": "706240",
    "end": "713259"
  },
  {
    "text": "that I just showed you a moment ago had a bug in it it worked out because the last segment happened to be long enough",
    "start": "713259",
    "end": "719350"
  },
  {
    "text": "if the last segment in the end had been too short we would have had an error in that program okay so would have crashed",
    "start": "719350",
    "end": "727049"
  },
  {
    "text": "so instead if we take that approach in a functional style sorry I'm double",
    "start": "727049",
    "end": "733360"
  },
  {
    "text": "clicking here I've written the same algorithm in scheme and what you see",
    "start": "733360",
    "end": "739089"
  },
  {
    "text": "here is that there are no side effects it's entirely immutable and the way that",
    "start": "739089",
    "end": "744579"
  },
  {
    "text": "it works is very interesting we're gonna start with the same thing and what we do is we peel off the in scheme or list we",
    "start": "744579",
    "end": "752199"
  },
  {
    "text": "call it the car you haven't done your schemer list and a lisp in a long time",
    "start": "752199",
    "end": "758439"
  },
  {
    "text": "we peel off the head of the list then we make a recursive call on the rest of the",
    "start": "758439",
    "end": "763749"
  },
  {
    "text": "list and we trust that we're gonna get the right answer doesn't that sound a little bit like inductive proofs assume",
    "start": "763749",
    "end": "771249"
  },
  {
    "text": "n then you can prove n plus 1 so we make the recursive call we assume we're",
    "start": "771249",
    "end": "776709"
  },
  {
    "text": "getting back the list and then we finish our processing where we do a merge and we get the final result so that is a",
    "start": "776709",
    "end": "783850"
  },
  {
    "text": "fundamentally different approach there's no bugs in this particular particular algorithm",
    "start": "783850",
    "end": "789500"
  },
  {
    "text": "now the homeworks of functional programming men are that they're declarative you're not doing every step",
    "start": "789500",
    "end": "796910"
  },
  {
    "text": "in the sequence yourself you're taking this leap of faith and saying the recursive calls gonna give me something",
    "start": "796910",
    "end": "801920"
  },
  {
    "text": "back and I'm not worried about how it does it and so that's a much more",
    "start": "801920",
    "end": "807080"
  },
  {
    "text": "declarative approach there's no side effects so yes there is a set bang and",
    "start": "807080",
    "end": "813290"
  },
  {
    "text": "scheme don't use it and you're generally doing recursion and you'll see where",
    "start": "813290",
    "end": "818330"
  },
  {
    "text": "these themes come in and what that ends up is that it's easier to program in a",
    "start": "818330",
    "end": "824150"
  },
  {
    "text": "way that allows for parallelization you have far fewer hairy edge cases and it's",
    "start": "824150",
    "end": "830600"
  },
  {
    "text": "provably correct and allows you to do certain optimizations like partial",
    "start": "830600",
    "end": "837800"
  },
  {
    "text": "evaluation and lazy evaluation not going to talk more about that because we want to get on to the kubernetes stuff all",
    "start": "837800",
    "end": "845240"
  },
  {
    "text": "right now this is some work that I've been doing with a colleague and Industry",
    "start": "845240",
    "end": "851480"
  },
  {
    "text": "colleague of mine who many of you probably know by name it's Jane Kim who's one of the co-authors of the",
    "start": "851480",
    "end": "857210"
  },
  {
    "text": "Phoenix project and he has been going through this transition of from it being",
    "start": "857210",
    "end": "863390"
  },
  {
    "text": "an iterative programmer to a functional programmer and this is a quote that I got from him which is he had a program",
    "start": "863390",
    "end": "869570"
  },
  {
    "text": "that he wrote that took 3,000 lines of objective-c he rewrote it into 15",
    "start": "869570",
    "end": "875510"
  },
  {
    "text": "hundred lines of typescript and then eventually into 500 lines of closure and he absolutely adores closure I'll say",
    "start": "875510",
    "end": "882800"
  },
  {
    "text": "more about that transition that he went through at the very end of the presentation so it allows you to write",
    "start": "882800",
    "end": "889550"
  },
  {
    "text": "more compact code the real point here is that this iterative model in the",
    "start": "889550",
    "end": "895040"
  },
  {
    "text": "functional model there are two different models not only of programming but also of the way that we think and that's the",
    "start": "895040",
    "end": "903230"
  },
  {
    "text": "question that I'm gonna pose is what's the model that we're going to use to reason with in iterative versus",
    "start": "903230",
    "end": "912410"
  },
  {
    "text": "functional programming to sum it up on the left-hand side we're doing iterative on the right hand side declarative",
    "start": "912410",
    "end": "919270"
  },
  {
    "text": "left-hand side mutable state two immutable state and we'll see how that comes up again",
    "start": "919270",
    "end": "924770"
  },
  {
    "text": "looping to recursion and it's not really functional programming but it is a",
    "start": "924770",
    "end": "931430"
  },
  {
    "text": "modern programming practice that shows up in the kubernetes space that i want to talk about which is the difference",
    "start": "931430",
    "end": "937940"
  },
  {
    "text": "between libraries compiled in and something like aspect oriented programming in dependency injection so",
    "start": "937940",
    "end": "945920"
  },
  {
    "text": "as much as I love this woman who is a",
    "start": "945920",
    "end": "950959"
  },
  {
    "text": "like 80 year old computer programmer rock star as much as I love her there",
    "start": "950959",
    "end": "957890"
  },
  {
    "text": "are certain things our systems have gotten so complex that we don't want the",
    "start": "957890",
    "end": "963980"
  },
  {
    "text": "human programmer to be doing all of the reasoning anymore we want to allow our",
    "start": "963980",
    "end": "970580"
  },
  {
    "text": "software to do some of that reasoning for us if you remember the transition if",
    "start": "970580",
    "end": "976010"
  },
  {
    "text": "I had to do write my programs and assembly and that was the model that I thought in I wouldn't be able to solve",
    "start": "976010",
    "end": "981920"
  },
  {
    "text": "the same level of complexity in those problems all right so let's ship now",
    "start": "981920",
    "end": "988279"
  },
  {
    "text": "let's turn our view I'm just looking at the time great the whole point here is",
    "start": "988279",
    "end": "994250"
  },
  {
    "text": "that we can't we with distributed systems we can no longer reason about every detail that we used to reason",
    "start": "994250",
    "end": "1000820"
  },
  {
    "text": "about our systems are just too complex so we've shifted the model and that's",
    "start": "1000820",
    "end": "1007390"
  },
  {
    "text": "one of the most powerful things in kubernetes yes it's a container",
    "start": "1007390",
    "end": "1012610"
  },
  {
    "text": "Orchestrator that's great it knows how to schedule but it's all of the other things that it does that I'm gonna touch",
    "start": "1012610",
    "end": "1019600"
  },
  {
    "text": "upon in this talk that make it even more powerful all right so if we now turn to",
    "start": "1019600",
    "end": "1026620"
  },
  {
    "text": "systems programming I want to go through now when I say systems programming I'm",
    "start": "1026620",
    "end": "1032620"
  },
  {
    "text": "not talking about the code in my applications I'm actually talking about things like my actual application",
    "start": "1032620",
    "end": "1038350"
  },
  {
    "text": "topology my application deployments my application upgrades my application",
    "start": "1038350",
    "end": "1043569"
  },
  {
    "text": "security those types of things that's what I mean by systems programming so it's kind of that next level up so in",
    "start": "1043569",
    "end": "1050290"
  },
  {
    "text": "the olden days what we were able to do was we will we use things like automation",
    "start": "1050290",
    "end": "1056190"
  },
  {
    "text": "and we used languages like bash and puppet and chef and ansible and salt",
    "start": "1056190",
    "end": "1061370"
  },
  {
    "text": "those are all iterative programming languages systems programming languages but as our systems have gotten more",
    "start": "1061370",
    "end": "1068910"
  },
  {
    "text": "complex so these are imperative as those systems have gotten more complex and I",
    "start": "1068910",
    "end": "1074700"
  },
  {
    "text": "have more nodes in there what are some of the languages that are emerging the languages well I come from Cloud Foundry",
    "start": "1074700",
    "end": "1082800"
  },
  {
    "text": "so Cloud Foundry has embraced that in large part because Cloud Foundry was incubated by handful of folks that came",
    "start": "1082800",
    "end": "1089970"
  },
  {
    "text": "over from Google who had worked with Google Borg before kubernetes of course",
    "start": "1089970",
    "end": "1095580"
  },
  {
    "text": "and that's what we're going to talk about today and then another subsystem that's within Cloud Foundry called Bosh",
    "start": "1095580",
    "end": "1100590"
  },
  {
    "text": "which has the same DNA as Cloud Foundry has and as kubernetes some of the same",
    "start": "1100590",
    "end": "1107040"
  },
  {
    "text": "patterns that we're going to talk about here and so that's what I'm calling functional systems programming so",
    "start": "1107040",
    "end": "1114360"
  },
  {
    "text": "remember that previous slide let me build that out what we're going to look at is on the imperative side we have",
    "start": "1114360",
    "end": "1120090"
  },
  {
    "text": "scripted deployments now we have declarative deployments everybody's probably pretty familiar with that now",
    "start": "1120090",
    "end": "1125640"
  },
  {
    "text": "hopefully you're not just doing a coop cuttle run you are using manifests in",
    "start": "1125640",
    "end": "1130680"
  },
  {
    "text": "doing declarative manifest and declarative deployments in the olden days we might have SSH tin to a box",
    "start": "1130680",
    "end": "1136970"
  },
  {
    "text": "never anymore we've got--we've works for example down there that has on its",
    "start": "1136970",
    "end": "1142110"
  },
  {
    "text": "poster behind there's Vera there booth get ops so they're talking about doing",
    "start": "1142110",
    "end": "1148620"
  },
  {
    "text": "all of this via get and immutable infrastructure and I'll drill into each",
    "start": "1148620",
    "end": "1153780"
  },
  {
    "text": "one of these long-running contexts versus ephemeral containers I'm going to",
    "start": "1153780",
    "end": "1159120"
  },
  {
    "text": "show you something that might surprise you a little bit around ephemeral containers in just a moment and then",
    "start": "1159120",
    "end": "1164790"
  },
  {
    "text": "finally we're moving from kind of the old way of doing middleware to sidecars",
    "start": "1164790",
    "end": "1170390"
  },
  {
    "text": "so instead of having a entire platform we're even doing that within cloud foundry cloud foundry used to be a",
    "start": "1170390",
    "end": "1176940"
  },
  {
    "text": "little bit more middleware or like it had everything baked into that platform now we're starting to put some of that",
    "start": "1176940",
    "end": "1182190"
  },
  {
    "text": "capability into sidecars and I'll talk about how that works so again it's all",
    "start": "1182190",
    "end": "1187320"
  },
  {
    "text": "about the model okay so let's jump into each one of",
    "start": "1187320",
    "end": "1192820"
  },
  {
    "text": "those this one I'm going to go through fairly quickly because I think it's pretty familiar to all of you in this",
    "start": "1192820",
    "end": "1199059"
  },
  {
    "text": "kubernetes space so of course here I have my kubernetes notes and when I want",
    "start": "1199059",
    "end": "1204520"
  },
  {
    "text": "to do a deployment of my application no longer do I say stand up this node deploy the app here stand up this node",
    "start": "1204520",
    "end": "1211179"
  },
  {
    "text": "deploy the app here even with you know imperative even with imperative",
    "start": "1211179",
    "end": "1216400"
  },
  {
    "text": "automation what I simply say is here's my topology this is it make it so and",
    "start": "1216400",
    "end": "1222990"
  },
  {
    "text": "that application gets deployed there we",
    "start": "1222990",
    "end": "1228730"
  },
  {
    "text": "go the animations are going super slow so I never know and it does that deployment so notice that you didn't",
    "start": "1228730",
    "end": "1236289"
  },
  {
    "text": "have to make those decisions and that's where the scheduling comes in but it's not only the scheduling because what I",
    "start": "1236289",
    "end": "1242559"
  },
  {
    "text": "want to say is that it goes beyond scheduling and actually if you think",
    "start": "1242559",
    "end": "1247929"
  },
  {
    "text": "about it the equivalent of the scheme interpreter that decided when it was",
    "start": "1247929",
    "end": "1253630"
  },
  {
    "text": "going to execute that recursive call and how far down the recursive call it's gonna go before it were before it stops",
    "start": "1253630",
    "end": "1262690"
  },
  {
    "text": "you know gets down to a base case so things in functional language is like",
    "start": "1262690",
    "end": "1268030"
  },
  {
    "text": "lazy evaluation that say you know what I'm gonna defer the execution of this",
    "start": "1268030",
    "end": "1273789"
  },
  {
    "text": "entire stack of function of recursive calls until I actually need them instead",
    "start": "1273789",
    "end": "1279280"
  },
  {
    "text": "of doing them when you say you want me to do them I know better I can do an optimization for you so that is what",
    "start": "1279280",
    "end": "1286929"
  },
  {
    "text": "kubernetes is doing so that when you oh and with compliance there's an example",
    "start": "1286929",
    "end": "1292090"
  },
  {
    "text": "here with daemon sets of course it does that on the nodes as well the whole notion there is that the control loop is",
    "start": "1292090",
    "end": "1299669"
  },
  {
    "text": "the place where you can do optimizations and because you are following functional",
    "start": "1299669",
    "end": "1307210"
  },
  {
    "text": "principles like immutability like declarative configurations it allows you",
    "start": "1307210",
    "end": "1313900"
  },
  {
    "text": "to put more intelligence into the reconciliation loops that are in kubernetes and notice that I said loops",
    "start": "1313900",
    "end": "1321010"
  },
  {
    "text": "for some of you who are new to kubernetes you might be just thinking about the replica set controller but",
    "start": "1321010",
    "end": "1327309"
  },
  {
    "text": "there's a lot of reconciliation loops in kubernetes I sometimes like to say that kubernetes is just a system of a whole",
    "start": "1327309",
    "end": "1333549"
  },
  {
    "text": "bunch of it's it's a registry of a whole bunch of infinite loops that are all running and doing reconciliation okay",
    "start": "1333549",
    "end": "1340240"
  },
  {
    "text": "that's really at the core of the architecture and that's really the point here ah and notice here that I also had",
    "start": "1340240",
    "end": "1348160"
  },
  {
    "text": "a node go away and we can in fact even use control loops to recover those nodes",
    "start": "1348160",
    "end": "1354929"
  },
  {
    "text": "we do that today with PKS using Bosh and you saw Joe Beda talk in the keynote",
    "start": "1354929",
    "end": "1362110"
  },
  {
    "text": "yesterday about cluster API same basic idea reconciliation loops for the",
    "start": "1362110",
    "end": "1367809"
  },
  {
    "text": "clusters themselves and of course here's my point is that you have multiple",
    "start": "1367809",
    "end": "1373570"
  },
  {
    "text": "reconciliation loops and they're all independent okay so this is a little bit",
    "start": "1373570",
    "end": "1379630"
  },
  {
    "text": "like functional programming I'm gonna go through this very quickly I already talked about this you've got the base",
    "start": "1379630",
    "end": "1384700"
  },
  {
    "text": "case and then that recursive call is a little bit of a leap of faith when you make the recursive call you don't worry",
    "start": "1384700",
    "end": "1391210"
  },
  {
    "text": "about how it's actually getting the answer you just trust that it's getting the right answer and then you just go on",
    "start": "1391210",
    "end": "1397870"
  },
  {
    "text": "your way alright so that was declarative let's now move on to a mutable infrastructure",
    "start": "1397870",
    "end": "1404710"
  },
  {
    "text": "so there's a couple of things that are really interesting about immutable infrastructure so in the olden days we",
    "start": "1404710",
    "end": "1412600"
  },
  {
    "text": "had we certainly had pipelines so that's the first step and we've had pipelines for a long time so that we aren't having",
    "start": "1412600",
    "end": "1419620"
  },
  {
    "text": "a human being sitting at a console saying oh let me do an AWS get machine",
    "start": "1419620",
    "end": "1424630"
  },
  {
    "text": "and then I'm gonna do it you know I'm gonna SSH into the box and I'm going to start executing some commands apt-get",
    "start": "1424630",
    "end": "1431049"
  },
  {
    "text": "s-- and things like that I at least have all of that in a pipeline which by the way is imperative so I've got provision",
    "start": "1431049",
    "end": "1438520"
  },
  {
    "text": "and configure and then deploy and then configure my apps so provision the infrastructure configure the",
    "start": "1438520",
    "end": "1443679"
  },
  {
    "text": "infrastructure deploy the app configure the app and notice that I've got the little git icons in there so my",
    "start": "1443679",
    "end": "1449950"
  },
  {
    "text": "configurations are all source code controlled right we're all doing that",
    "start": "1449950",
    "end": "1455220"
  },
  {
    "text": "so if we start to but if we take a look at that that the way that we've been",
    "start": "1455220",
    "end": "1460480"
  },
  {
    "text": "doing things there's still challenges that remain and I won't go into a lot of",
    "start": "1460480",
    "end": "1465549"
  },
  {
    "text": "details but one of those that I have seen in customer sites over and over is",
    "start": "1465549",
    "end": "1471309"
  },
  {
    "text": "that it's slow to provision a new VM it's slow to provision a new VM remember",
    "start": "1471309",
    "end": "1479860"
  },
  {
    "text": "I said and actually Tim said when he introduced this that we're going to look at some of the principles of kubernetes",
    "start": "1479860",
    "end": "1486639"
  },
  {
    "text": "and containers from a functional lens and immutability is one of those things",
    "start": "1486639",
    "end": "1492009"
  },
  {
    "text": "well the fact that we immutability is really important for repeatability right",
    "start": "1492009",
    "end": "1498159"
  },
  {
    "text": "everything comes from get everything is repeatable but what happens is if",
    "start": "1498159",
    "end": "1503289"
  },
  {
    "text": "there's a step in your pipeline that takes too long then we start putting in shortcuts so I worked with a customer",
    "start": "1503289",
    "end": "1510730"
  },
  {
    "text": "once who discovered that they had all sorts of shortcuts where they actually weren't starting from scratch they were",
    "start": "1510730",
    "end": "1517240"
  },
  {
    "text": "leaving VMs in place and so they were getting configuration drift all over the place so even with that pipeline driven",
    "start": "1517240",
    "end": "1524799"
  },
  {
    "text": "process that's one of the problems so we end up with snowflakes and then there's",
    "start": "1524799",
    "end": "1530080"
  },
  {
    "text": "super complex dependencies and we can't necessarily we're doing a good job capturing those because we don't have a",
    "start": "1530080",
    "end": "1536980"
  },
  {
    "text": "declarative way of capturing those and I'll get back to that in just a moment so if we go back to this picture then",
    "start": "1536980",
    "end": "1544480"
  },
  {
    "text": "the first thing that I want to do is I want to take the first two steps and I",
    "start": "1544480",
    "end": "1550299"
  },
  {
    "text": "will totally admit that this has a bias hat on it because I come from a platform",
    "start": "1550299",
    "end": "1555519"
  },
  {
    "text": "vendor and we've seen the value of platforms now this is a friendly audience because we're all here talking",
    "start": "1555519",
    "end": "1562779"
  },
  {
    "text": "about a platform for building platforms right so everybody buys that platforms helped us here so what we want to do is",
    "start": "1562779",
    "end": "1569740"
  },
  {
    "text": "we want to take the first couple of steps and push those down into a configured platform like kubernetes that",
    "start": "1569740",
    "end": "1576700"
  },
  {
    "text": "still leaves the deploying configure step on the right-hand side so what we",
    "start": "1576700",
    "end": "1582820"
  },
  {
    "text": "do now is for that deploy and configure we can start leveraging",
    "start": "1582820",
    "end": "1588410"
  },
  {
    "text": "containers it's now going to take milliseconds instead of five minutes and",
    "start": "1588410",
    "end": "1594060"
  },
  {
    "text": "so some of those shortcuts that I talked about before you no longer need those so that's one",
    "start": "1594060",
    "end": "1600750"
  },
  {
    "text": "of the advantages so we can take that process then and of course we can do that for we have multiple instances of",
    "start": "1600750",
    "end": "1607530"
  },
  {
    "text": "apps now that's one of the characteristics of cloud native up native applications so I want to be able",
    "start": "1607530",
    "end": "1613200"
  },
  {
    "text": "to do all of that bundling and configuration once so that I can scale",
    "start": "1613200",
    "end": "1618750"
  },
  {
    "text": "out my number of pods scale in my number of pods move pods when I'm doing some",
    "start": "1618750",
    "end": "1624510"
  },
  {
    "text": "type of it see the Eve ulnar ability I'm patching or something like that and so",
    "start": "1624510",
    "end": "1629910"
  },
  {
    "text": "if I take that now and I move it up here and I say great I'm gonna do that whole",
    "start": "1629910",
    "end": "1635250"
  },
  {
    "text": "step and I'm going to do it earlier in the process that I'm gonna leverage things like helm get and image",
    "start": "1635250",
    "end": "1643620"
  },
  {
    "text": "repositories like harbor I can do all of that stuff that I used to do a",
    "start": "1643620",
    "end": "1648870"
  },
  {
    "text": "deployment time I can do it before and in the DevOps community and I spend a",
    "start": "1648870",
    "end": "1654840"
  },
  {
    "text": "lot of time in the DevOps community we talk about shift left so what this means is that I can do all of this very early",
    "start": "1654840",
    "end": "1661560"
  },
  {
    "text": "on in my development cycle so that deployments then are a no-brainer and",
    "start": "1661560",
    "end": "1666870"
  },
  {
    "text": "easy deployments are an important part of writing cloud native software and cloud native practices so you might be",
    "start": "1666870",
    "end": "1675330"
  },
  {
    "text": "thinking well what does all of that have to do with imperative and functional models okay you're telling me about",
    "start": "1675330",
    "end": "1680370"
  },
  {
    "text": "kubernetes but come on bring this back to functional models so let's take a look at that when we did state the the",
    "start": "1680370",
    "end": "1688860"
  },
  {
    "text": "previous way remember there's the counter there the way that worked was that we were constantly moving state",
    "start": "1688860",
    "end": "1695070"
  },
  {
    "text": "around Anne muting state and all of that stuff and in the end we really have no",
    "start": "1695070",
    "end": "1700740"
  },
  {
    "text": "idea we have the final answer but we have no idea how we arrived at that",
    "start": "1700740",
    "end": "1706140"
  },
  {
    "text": "final answer because all of that history is lost if instead on the imperative",
    "start": "1706140",
    "end": "1712080"
  },
  {
    "text": "side we end up looking at things uh and so here's the point is",
    "start": "1712080",
    "end": "1717850"
  },
  {
    "text": "how do you prove the correctness remember I said that that algorithm had a bug in it so if you're allowing for",
    "start": "1717850",
    "end": "1724600"
  },
  {
    "text": "side effects how do you ever prove the correctness of a piece of software it's",
    "start": "1724600",
    "end": "1731890"
  },
  {
    "text": "very difficult if not impossible so other influences plus a state-based a",
    "start": "1731890",
    "end": "1738610"
  },
  {
    "text": "mutant mutation based algorithm and you end up you can't prove the correctness of that if on the other hand you take a",
    "start": "1738610",
    "end": "1746020"
  },
  {
    "text": "functional approach this is what your functional execution looks like remember",
    "start": "1746020",
    "end": "1752260"
  },
  {
    "text": "it's a whole bunch of recursive calls and each one of the frames on the stack are immutable frames and then to",
    "start": "1752260",
    "end": "1760260"
  },
  {
    "text": "actually achieve the answer you're just playing through that call stack to get",
    "start": "1760260",
    "end": "1767470"
  },
  {
    "text": "the answer so the call stack and again it's just going my my animations aren't",
    "start": "1767470",
    "end": "1773080"
  },
  {
    "text": "usually that slow I don't know what's going on the frames are immutable and what we're gonna do is play through the call stack to get the final answer okay",
    "start": "1773080",
    "end": "1781299"
  },
  {
    "text": "so that is you see kind of you see at least at a gut level the kind of",
    "start": "1781299",
    "end": "1786370"
  },
  {
    "text": "parallels that are going on there okay so okay there's a funky animation",
    "start": "1786370",
    "end": "1797760"
  },
  {
    "text": "obviously didn't double triple check these last night sorry ah and so if you",
    "start": "1797760",
    "end": "1808630"
  },
  {
    "text": "draw that parallel the container images are a bit like your stack frames and your interpreter kubernetes the",
    "start": "1808630",
    "end": "1815230"
  },
  {
    "text": "controller is a little bit like the the execution through the call stack so",
    "start": "1815230",
    "end": "1821020"
  },
  {
    "text": "great thank you all right so let me push forward there's another place that we're",
    "start": "1821020",
    "end": "1827830"
  },
  {
    "text": "seeing this pattern I'm just gonna build out the slide very quickly and it has to do with the way that we're doing",
    "start": "1827830",
    "end": "1832929"
  },
  {
    "text": "eventing and doing things like immutable event logs so event sourcing in Kafka",
    "start": "1832929",
    "end": "1840190"
  },
  {
    "text": "where you have all sorts of different event sources that are putting things into this event store so legacy store is",
    "start": "1840190",
    "end": "1847870"
  },
  {
    "text": "adding change events into the event store and then each one of the consumers and again",
    "start": "1847870",
    "end": "1853490"
  },
  {
    "text": "those events are sequenced and immutable just like the call stack we talked about a moment ago and then we can play",
    "start": "1853490",
    "end": "1860390"
  },
  {
    "text": "through each one of those things to get to a to other sources so there's a whole",
    "start": "1860390",
    "end": "1866270"
  },
  {
    "text": "other talk there all right let me quickly go through these last two things and that is ephemeral containers now",
    "start": "1866270",
    "end": "1874280"
  },
  {
    "text": "this is a story that I can tell very quickly everybody here is familiar with what this picture is we've got a host on",
    "start": "1874280",
    "end": "1881180"
  },
  {
    "text": "the host is the kernel operating system running inside of the container is a root filesystem some other runtime stuff",
    "start": "1881180",
    "end": "1887450"
  },
  {
    "text": "and then finally the application on top and I've got multiple containers I'm just showing one here for for simplicity",
    "start": "1887450",
    "end": "1894730"
  },
  {
    "text": "so we know that these containers are immutable and that we have container images that we can spin up let me share",
    "start": "1894730",
    "end": "1900980"
  },
  {
    "text": "with you a super cool use case about this yeah and here's the thing",
    "start": "1900980",
    "end": "1906430"
  },
  {
    "text": "malware a bad actor comes in and drops",
    "start": "1906430",
    "end": "1911900"
  },
  {
    "text": "malware into my system and we know that a lot of the breaches out there are caused from malware that went undetected",
    "start": "1911900",
    "end": "1918830"
  },
  {
    "text": "for months at a time and then the bad",
    "start": "1918830",
    "end": "1924020"
  },
  {
    "text": "actor moves away goes away and so we can't detect the bad actor anymore but the malware is still there okay there we",
    "start": "1924020",
    "end": "1933170"
  },
  {
    "text": "go bad actor goes away so how do containers help you with this so again remember the",
    "start": "1933170",
    "end": "1939650"
  },
  {
    "text": "difference was long-running state versus immutable ephemeral containers well",
    "start": "1939650",
    "end": "1945440"
  },
  {
    "text": "here's what one of our customers at cloud foundry does because we're a container based not quite kubernetes",
    "start": "1945440",
    "end": "1950840"
  },
  {
    "text": "based yet because we predate kubernetes but its container based what they do is",
    "start": "1950840",
    "end": "1956620"
  },
  {
    "text": "proactively they without knowing whether there's malware or not they do this they",
    "start": "1956620",
    "end": "1964340"
  },
  {
    "text": "on a periodic basis just throw away the container and stand up a new one if",
    "start": "1964340",
    "end": "1970750"
  },
  {
    "text": "there was malware on it it's gone now if there was no malware on it cool there's",
    "start": "1970750",
    "end": "1977150"
  },
  {
    "text": "still no malware on it and they not only do that at the container level but they also do it at the host level so they",
    "start": "1977150",
    "end": "1984920"
  },
  {
    "text": "throw away the host stand up a new host so if there was malware on it it's gone",
    "start": "1984920",
    "end": "1990350"
  },
  {
    "text": "and the container is stood up and it's clean so they do this proactively they",
    "start": "1990350",
    "end": "1997310"
  },
  {
    "text": "repaved their environment and they're able to do this because of the containers that they have I'm suggesting",
    "start": "1997310",
    "end": "2003250"
  },
  {
    "text": "that you do that very often this particular customer in US Wells Fargo because they talk about it very publicly",
    "start": "2003250",
    "end": "2009130"
  },
  {
    "text": "they do it every three days Lance wants to do it so that he does it every single",
    "start": "2009130",
    "end": "2014980"
  },
  {
    "text": "day he doesn't want a container in his infrastructure to live longer than a day which is super cool all right I hear I",
    "start": "2014980",
    "end": "2022060"
  },
  {
    "text": "have one minute left so let me wrap it up and I will stick around afterward we can go out in the hallway and I'll",
    "start": "2022060",
    "end": "2027190"
  },
  {
    "text": "answer questions there finally on the sidecars thing I'm going to flip through this very very quickly and that is oh",
    "start": "2027190",
    "end": "2035980"
  },
  {
    "text": "let me skip through this slide because I really just want to talk about here we've got our containers and now what we",
    "start": "2035980",
    "end": "2043450"
  },
  {
    "text": "want to do is without actually having to insert something into the code itself what we want to do is we want to take",
    "start": "2043450",
    "end": "2050800"
  },
  {
    "text": "advantage of cross-cutting concerns like routing like auditing like certain",
    "start": "2050800",
    "end": "2058810"
  },
  {
    "text": "security things and we do that of course with sidecars and there's there's",
    "start": "2058810",
    "end": "2065110"
  },
  {
    "text": "personas here that care about that so this is this is for example your auditor that cares about that the way that we're",
    "start": "2065110",
    "end": "2070990"
  },
  {
    "text": "going to do that of course is in the pod so a pod this is why pods have more than",
    "start": "2070990",
    "end": "2076179"
  },
  {
    "text": "one container in them or certainly one of the great use cases is that I can have my application container and I can",
    "start": "2076179",
    "end": "2084040"
  },
  {
    "text": "have my sidecar okay so that's that and of course we can do that using things",
    "start": "2084040",
    "end": "2092290"
  },
  {
    "text": "like daemon sets we can do that at the host level as well and that's what I'm showing you in this picture okay and I",
    "start": "2092290",
    "end": "2102490"
  },
  {
    "text": "see that I'm 20 seconds over I'm gonna leave you if you'll permit me 30 more seconds I just want to share one final",
    "start": "2102490",
    "end": "2109690"
  },
  {
    "text": "thought and that is sorry",
    "start": "2109690",
    "end": "2115190"
  },
  {
    "text": "ah yes this is the final thought that I'm gonna leave you with is if we take a",
    "start": "2115190",
    "end": "2121460"
  },
  {
    "text": "look and we go all the way back to the functional programming metaphor if you",
    "start": "2121460",
    "end": "2127730"
  },
  {
    "text": "remember those things were declarative and at the top here we see declarative",
    "start": "2127730",
    "end": "2133910"
  },
  {
    "text": "deployments well that was a hallmark of functional programming we had immutability well immutable",
    "start": "2133910",
    "end": "2139880"
  },
  {
    "text": "infrastructure immutability is a hallmark of functional programming ephemeral containers that you can use to",
    "start": "2139880",
    "end": "2147830"
  },
  {
    "text": "that you can then recreate and compose that is where it the parallel is to",
    "start": "2147830",
    "end": "2156020"
  },
  {
    "text": "recursive and then sidecars they look an awful light lot like aspect oriented",
    "start": "2156020",
    "end": "2161660"
  },
  {
    "text": "programming so I hope that was kind of a fun look between functional programming",
    "start": "2161660",
    "end": "2168590"
  },
  {
    "text": "and iterative programming and kind of the parallels into our kubernetes world I'm going to go ahead and put up the",
    "start": "2168590",
    "end": "2173900"
  },
  {
    "text": "last slide while I step off the stage and start to maybe answer a few questions apologies for not having time",
    "start": "2173900",
    "end": "2180260"
  },
  {
    "text": "thanks so much have a great day [Applause] you",
    "start": "2180260",
    "end": "2185950"
  },
  {
    "text": "[Applause]",
    "start": "2185950",
    "end": "2188660"
  }
]