[
  {
    "text": "hi thank you all so much for joining my name is seth wiesman i am a solutions architect at pureverica and committer on",
    "start": "2560",
    "end": "8320"
  },
  {
    "text": "apache flink and i'm really excited to be giving this hands-on demonstration of building stateful serverless applications",
    "start": "8320",
    "end": "14240"
  },
  {
    "text": "using apache flink stateful functions so if you're already familiar with apache flink you likely know it as a",
    "start": "14240",
    "end": "19920"
  },
  {
    "text": "world-class stream processor it's very popular in the data engineering space for continuous etls",
    "start": "19920",
    "end": "25199"
  },
  {
    "text": "real-time aggregations and reporting and so there's this obvious question right what does a stream processor have",
    "start": "25199",
    "end": "31679"
  },
  {
    "text": "to say about serverless and at the end of the session i hope you walk away thinking quite a lot",
    "start": "31679",
    "end": "37680"
  },
  {
    "text": "so to begin i want to do a little bit of table setting i think these terms serverless and stateful serverless have",
    "start": "37680",
    "end": "42879"
  },
  {
    "text": "become a bit loaded in recent years and that a lot of people are using them to mean many different things",
    "start": "42879",
    "end": "49039"
  },
  {
    "text": "to me serverless is not simply abused commercial function as they service products although that certainly does fall under",
    "start": "49039",
    "end": "55360"
  },
  {
    "text": "the umbrella really it is a realization of modern",
    "start": "55360",
    "end": "60640"
  },
  {
    "text": "infrastructure capabilities allowing us to iterate more quickly and with more confidence",
    "start": "60640",
    "end": "66159"
  },
  {
    "text": "so if our business is running a web app and business is doing really well traffic spikes we need to go from one",
    "start": "66159",
    "end": "72000"
  },
  {
    "text": "instance to three we're no longer requisitioning hardware installing vms setting up networks",
    "start": "72000",
    "end": "78000"
  },
  {
    "text": "instead we simply increase our replica accounts stateful serverless at its core is",
    "start": "78000",
    "end": "83920"
  },
  {
    "text": "really just about bringing these advances to the application layer along with some key primitives that any",
    "start": "83920",
    "end": "90479"
  },
  {
    "text": "real world application needs so consistent durable states your application",
    "start": "90479",
    "end": "95920"
  },
  {
    "text": "needs to be able to retain information it can act on in the future cloud native fault tolerance so as we",
    "start": "95920",
    "end": "103280"
  },
  {
    "text": "are maintaining the state we want to do so in a way that leverages what this underlying modern",
    "start": "103280",
    "end": "108320"
  },
  {
    "text": "infrastructure is really good at and to make our lives as easy as possible in production",
    "start": "108320",
    "end": "114399"
  },
  {
    "text": "and simple messaging primitives between systems your business is not built on a single",
    "start": "114399",
    "end": "119439"
  },
  {
    "text": "application but a whole host of systems that need to communicate with each other in arbitrary and complex ways we want to",
    "start": "119439",
    "end": "126640"
  },
  {
    "text": "make this as easy and intuitive as possible",
    "start": "126640",
    "end": "131840"
  },
  {
    "text": "so this diagram shows a very traditional two-tiered application architecture something i'm sure everyone here is very",
    "start": "132800",
    "end": "139200"
  },
  {
    "text": "familiar with where business logic is deployed via stateless tier giving us those nice serverless benefits",
    "start": "139200",
    "end": "145920"
  },
  {
    "text": "state is then managed on a separate tier via database or other data store details here are not so important",
    "start": "145920",
    "end": "152239"
  },
  {
    "text": "uh but when an application receives a request or other message something to trigger computation it will",
    "start": "152239",
    "end": "159360"
  },
  {
    "text": "likely communicate with that data store and potentially update some values and then do one of three things one it",
    "start": "159360",
    "end": "165840"
  },
  {
    "text": "could do nothing it could be that this message was simply to update state we have done that and we are finished",
    "start": "165840",
    "end": "172000"
  },
  {
    "text": "two we may send results back to an end user so this message or this trigger was to read some",
    "start": "172000",
    "end": "178159"
  },
  {
    "text": "information we're querying something or three we're going to invoke another service repeating the cycle",
    "start": "178159",
    "end": "186080"
  },
  {
    "text": "you can think of these different components interacting with each other as a sort of data flow and the obvious question arises what",
    "start": "186080",
    "end": "193120"
  },
  {
    "text": "happens when something fails well a fundamental problem with this architecture is that for any failure",
    "start": "193120",
    "end": "200000"
  },
  {
    "text": "in any call across a service boundary it becomes very hard to reason about which of the desired outcomes were actually",
    "start": "200000",
    "end": "206480"
  },
  {
    "text": "achieved applications are forced to have a method of determining whether or not to attempt to retry",
    "start": "206480",
    "end": "212080"
  },
  {
    "text": "or somehow make their state updates item post but what if we rethought this problem",
    "start": "212080",
    "end": "218000"
  },
  {
    "text": "from the beginning right what if we inverted it so that messaging runs through the database",
    "start": "218000",
    "end": "223440"
  },
  {
    "text": "well it turns out this is exactly what stream processors like apache flink have been doing for years",
    "start": "223440",
    "end": "228640"
  },
  {
    "text": "to provide what we call exactly one state semantics business logic remains stateless and is",
    "start": "228640",
    "end": "235280"
  },
  {
    "text": "deployed as a separate service from data storage but this time messaging is going to flow",
    "start": "235280",
    "end": "240640"
  },
  {
    "text": "through the database and the data store is going to invoke functions in stateless containers",
    "start": "240640",
    "end": "245920"
  },
  {
    "text": "supplying state is the part of the payload of each message these application functions will then",
    "start": "245920",
    "end": "251519"
  },
  {
    "text": "return back both state updates and messages to be sent to other functions",
    "start": "251519",
    "end": "256959"
  },
  {
    "text": "by moving messaging from the compute layer to the storage layer state and messaging is easily made",
    "start": "256959",
    "end": "262079"
  },
  {
    "text": "atomic and if messaging were to fail for whatever reason the state update is also",
    "start": "262079",
    "end": "267759"
  },
  {
    "text": "rolled back so retries are always idempotent this is exactly the approach taken by",
    "start": "267759",
    "end": "274400"
  },
  {
    "text": "apache flink stateful functions we are using a flink cluster for message routing and state management",
    "start": "274400",
    "end": "280080"
  },
  {
    "text": "while allowing the actual functions containing application logic to be deployed in a separate compute",
    "start": "280080",
    "end": "285199"
  },
  {
    "text": "tier this gives us a very powerful run time where compute and state are logically co-located for consistency",
    "start": "285199",
    "end": "291840"
  },
  {
    "text": "but at the same time physically separated all state accesses and updates are integrated as part of the function",
    "start": "291840",
    "end": "298160"
  },
  {
    "text": "invocation request and response so our business logic can be deployed however we so choose it could be a",
    "start": "298160",
    "end": "304320"
  },
  {
    "text": "standard kubernetes service using an orchestration tool like k-native or even a wholly managed",
    "start": "304320",
    "end": "309600"
  },
  {
    "text": "service like aws lambda yet we are able to uh retain consistent state and messaging",
    "start": "309600",
    "end": "318560"
  },
  {
    "text": "so as we go through our checklist of a proper stateful serverless framework the initial requirements under",
    "start": "319039",
    "end": "326639"
  },
  {
    "text": "pure serverless are easily met by deploying our business logic in stateless containers separate from",
    "start": "326639",
    "end": "333199"
  },
  {
    "text": "everything else but what about the stateful cons specific requirements",
    "start": "333199",
    "end": "339759"
  },
  {
    "text": "well to understand that let's talk about some of the core concepts in stateful functions when developing an application you're",
    "start": "339759",
    "end": "346000"
  },
  {
    "text": "going to implement several services or what we call functions that are basically small pieces of code or logic representing entities within an",
    "start": "346000",
    "end": "352560"
  },
  {
    "text": "application you could for example define a function type representing a user with a single instance of that function",
    "start": "352560",
    "end": "359360"
  },
  {
    "text": "type representing a single user within our application think of this as an object-oriented",
    "start": "359360",
    "end": "364960"
  },
  {
    "text": "terms as being the difference between a class in an instance these function instances are",
    "start": "364960",
    "end": "370560"
  },
  {
    "text": "invokable through messages and do not consume resources while inactive or simply when they are not",
    "start": "370560",
    "end": "375600"
  },
  {
    "text": "being invoked what this means is the runtime can host a theoretically infinite number of function instances",
    "start": "375600",
    "end": "381520"
  },
  {
    "text": "within a fixed finite set of resources and this whole thing is polygon from the ground up so we are deploying these",
    "start": "381520",
    "end": "387840"
  },
  {
    "text": "functions their own containers meaning you can do so in any language you so choose the only requirements",
    "start": "387840",
    "end": "393759"
  },
  {
    "text": "is that the language supports http grpc or unix sockets which is to say we support virtually",
    "start": "393759",
    "end": "400080"
  },
  {
    "text": "every language communication between the flink cluster and user code happens through a very",
    "start": "400080",
    "end": "405919"
  },
  {
    "text": "well defined and small protocol certainly something you could develop against",
    "start": "405919",
    "end": "411360"
  },
  {
    "text": "yourself at the same time we realize that most people don't want to do that day to day and so the community does",
    "start": "411360",
    "end": "417199"
  },
  {
    "text": "ship a number of predefined sdks that wrap that protocol in higher level idiomatic constructs for",
    "start": "417199",
    "end": "423759"
  },
  {
    "text": "that language so there's an sdk for python active development on golang and rust",
    "start": "423759",
    "end": "430160"
  },
  {
    "text": "there's even a haskell sdk that recently popped up in the community and hopefully your favorite language",
    "start": "430160",
    "end": "435599"
  },
  {
    "text": "coming soon uh adding new sdks is very high on our uh prioritizations",
    "start": "435599",
    "end": "442560"
  },
  {
    "text": "but okay so we can have user code we can write in different languages lots of people can do that uh where things get interesting is that",
    "start": "442560",
    "end": "449039"
  },
  {
    "text": "we can run these functions with dynamic messaging and consistent state",
    "start": "449039",
    "end": "454639"
  },
  {
    "text": "so if you have used apache flink in the past and you're familiar with this idea of a dataflow dag",
    "start": "454639",
    "end": "459840"
  },
  {
    "text": "that is completely gone instead we support arbitrary communication",
    "start": "459840",
    "end": "465280"
  },
  {
    "text": "between functions using logical ids and so the only thing uh an instance needs to know to message",
    "start": "465280",
    "end": "473199"
  },
  {
    "text": "some other function instance is its function type and id so what sort of function do i want to message in",
    "start": "473199",
    "end": "479599"
  },
  {
    "text": "which particular instance if we were maintaining user function to keep track of users of our business",
    "start": "479599",
    "end": "487280"
  },
  {
    "text": "we would have user as our function type and there would be an instance for myself seth my id would be seth someone else's",
    "start": "487280",
    "end": "494479"
  },
  {
    "text": "might be john or eagle or gordon or whoever else and all of this can be done with exactly",
    "start": "494479",
    "end": "501840"
  },
  {
    "text": "one semantics so function instances are able to maintain local state",
    "start": "501840",
    "end": "506960"
  },
  {
    "text": "while the run time ensures that messaging and state updates are integrated so users can have out of the box",
    "start": "506960",
    "end": "512560"
  },
  {
    "text": "efficient consistency this is true across event inputs to the application",
    "start": "512560",
    "end": "518320"
  },
  {
    "text": "application state itself and outputs delivered from the application",
    "start": "518320",
    "end": "523839"
  },
  {
    "text": "and i think most importantly all this is no database required or better put we are using apache flink",
    "start": "523839",
    "end": "531040"
  },
  {
    "text": "as our database so flink has long provided large-scale consistent state management",
    "start": "531040",
    "end": "536959"
  },
  {
    "text": "through these concepts of state back-ends and distributed snapshotting state is stored locally within the",
    "start": "536959",
    "end": "543440"
  },
  {
    "text": "cluster for fast accesses and is periodically backed up to simple blob storage",
    "start": "543440",
    "end": "548880"
  },
  {
    "text": "this could be amazon s3 google cloud storage hdfs an nfs drive min io whatever you",
    "start": "548880",
    "end": "555920"
  },
  {
    "text": "already have available in the case of failure when a pod that is part of the flint cluster",
    "start": "555920",
    "end": "561920"
  },
  {
    "text": "itself restarts for whatever reason it will simply download its latest snapshot and continue on processing",
    "start": "561920",
    "end": "569200"
  },
  {
    "text": "this means we are not reliant on stateful sets or persistent volumes for high availability of state",
    "start": "569200",
    "end": "574560"
  },
  {
    "text": "the only thing we need highly available in the system is our blob storage which is the easiest thing to achieve",
    "start": "574560",
    "end": "582000"
  },
  {
    "text": "using those model organizations have scaled to managing hundreds of terabytes of state within flink applications",
    "start": "582000",
    "end": "587680"
  },
  {
    "text": "themselves with the confidence they're delivering consistent reliable results",
    "start": "587680",
    "end": "594480"
  },
  {
    "text": "so that is enough uh on concepts let's take a look at some specific sdks",
    "start": "594720",
    "end": "600240"
  },
  {
    "text": "uh actually build something today we're going to be looking at the python sdk in",
    "start": "600240",
    "end": "605279"
  },
  {
    "text": "particular but all of these concepts translate to all the different sdks they all offer the same core primitives",
    "start": "605279",
    "end": "612800"
  },
  {
    "text": "so we need to begin by thinking about types because remote functions can be",
    "start": "612800",
    "end": "618240"
  },
  {
    "text": "implemented in any language and a single application can be composed of many functions",
    "start": "618240",
    "end": "624160"
  },
  {
    "text": "written in many different languages we need a uniform format for communication and for",
    "start": "624160",
    "end": "630640"
  },
  {
    "text": "that we've decided to standardize on protobuf if you're not familiar it is a serialization uh",
    "start": "630640",
    "end": "636399"
  },
  {
    "text": "standard out of google that has very strong cross language support and so all messages passed between",
    "start": "636399",
    "end": "643519"
  },
  {
    "text": "functions must be encoded as protobuf and in particular they must be encoded",
    "start": "643519",
    "end": "649279"
  },
  {
    "text": "as protobuf any which is very convenient because it contains both the logical type",
    "start": "649279",
    "end": "655040"
  },
  {
    "text": "along with the serialized bytes and so within a particular user function you can then",
    "start": "655040",
    "end": "661760"
  },
  {
    "text": "quote unquote unwrap that any message into a specific concrete type using your",
    "start": "661760",
    "end": "668160"
  },
  {
    "text": "language specific protobuf library that you can then work against same thing goes for state type so",
    "start": "668160",
    "end": "674240"
  },
  {
    "text": "anything we want as consistent durable state must be protobuf any and this allows",
    "start": "674240",
    "end": "679519"
  },
  {
    "text": "state-written arbitrary languages to be uniformly maintained by the flint cluster",
    "start": "679519",
    "end": "684640"
  },
  {
    "text": "flinks date back-ends are simply going to store the serialized",
    "start": "684640",
    "end": "689760"
  },
  {
    "text": "any record uh at the same time we realize this is kind of boilerplaty",
    "start": "689760",
    "end": "695200"
  },
  {
    "text": "and so and it is if you're working directly against the protocol but for all of the language sdks we do",
    "start": "695200",
    "end": "703200"
  },
  {
    "text": "offer higher level constructs so that you only ever have to develop against specific protobuf types",
    "start": "703200",
    "end": "710160"
  },
  {
    "text": "using say the python sdk you will rarely if ever actually see in any record",
    "start": "710160",
    "end": "717200"
  },
  {
    "text": "so uh as with any good introduction to a new bit of software we're going to start with hello world",
    "start": "717200",
    "end": "723120"
  },
  {
    "text": "but make it state fund specific and so we're building a greeter application",
    "start": "723120",
    "end": "728800"
  },
  {
    "text": "that is going to greet users of our service based on the number of times that",
    "start": "728800",
    "end": "734959"
  },
  {
    "text": "specific user has been seen so far so every user is going to get a personalized grading",
    "start": "734959",
    "end": "741839"
  },
  {
    "text": "first time i'm greeted it might say welcome seth second time it may be welcome back seth and third time third",
    "start": "741839",
    "end": "747839"
  },
  {
    "text": "time's the charmsa yet if someone else is greeted they are going to get their own personalized",
    "start": "747839",
    "end": "752880"
  },
  {
    "text": "reading and this is going to show off some very important primitives so we're going to talk about messages right how to",
    "start": "752880",
    "end": "759760"
  },
  {
    "text": "agree request for myself specifically how does that get to a function and state so we need",
    "start": "759760",
    "end": "765600"
  },
  {
    "text": "to maintain for every user a count of how many times they have been seen",
    "start": "765600",
    "end": "773040"
  },
  {
    "text": "so each function instance is associated with function type and id as i said before",
    "start": "773040",
    "end": "778720"
  },
  {
    "text": "which forms its unique address this logical address is what we do",
    "start": "778720",
    "end": "784399"
  },
  {
    "text": "use when messaging that function so when i'm to be greeted we're going to send a greet request to",
    "start": "784399",
    "end": "791440"
  },
  {
    "text": "the function type greeter and the id seth",
    "start": "791440",
    "end": "797360"
  },
  {
    "text": "we can see that as our input to the function so this is the message that was being passed to us",
    "start": "797360",
    "end": "802560"
  },
  {
    "text": "again as i mentioned while the runtime is using protobuf any by leveraging python3 types in this case",
    "start": "802560",
    "end": "809279"
  },
  {
    "text": "we are able to have the sdk automatically unwrap that for us",
    "start": "809279",
    "end": "815120"
  },
  {
    "text": "similarly we can send our result to another function we'll look at the middle bit of creating",
    "start": "815120",
    "end": "822160"
  },
  {
    "text": "the grading in just a moment but we are going to both pack our results into an any type so we can avoid",
    "start": "822160",
    "end": "828800"
  },
  {
    "text": "that boilerplate and send it to another function instance in this case we're sending it to",
    "start": "828800",
    "end": "834160"
  },
  {
    "text": "an email sender that is going to ship out that greeting when messaging we're using our address",
    "start": "834160",
    "end": "840240"
  },
  {
    "text": "so we have our function type which one is it well it is email center that's the sort of function i want to message which specific one",
    "start": "840240",
    "end": "847120"
  },
  {
    "text": "well i want to message the email center for this specific email address",
    "start": "847120",
    "end": "853920"
  },
  {
    "text": "and then we can go into our personalized grading itself uh and this is showing off what i think is our most powerful feature which is",
    "start": "854160",
    "end": "860800"
  },
  {
    "text": "durable state uh all this method is doing is keeping",
    "start": "860800",
    "end": "866160"
  },
  {
    "text": "track of the number of times this particular user has been seen so far and then",
    "start": "866160",
    "end": "871440"
  },
  {
    "text": "generating a message based on that count so our state is being accessed via our",
    "start": "871440",
    "end": "877519"
  },
  {
    "text": "context and we are able to read out our state based on some name and specify the type",
    "start": "877519",
    "end": "885920"
  },
  {
    "text": "so we're keeping track of scene count which is the protobuf type i've predefined we can both read that type out and write",
    "start": "885920",
    "end": "892959"
  },
  {
    "text": "it back and you know what that that's it the rest of this is",
    "start": "892959",
    "end": "898000"
  },
  {
    "text": "standard python there's nothing state fund specific about the rest of this method uh the only thing that we have done",
    "start": "898000",
    "end": "904639"
  },
  {
    "text": "differently than say building this in your cs 101 course is that our variables are being managed via",
    "start": "904639",
    "end": "911600"
  },
  {
    "text": "the context instead of basic instance variables right so we're",
    "start": "911600",
    "end": "917199"
  },
  {
    "text": "using our context but otherwise it's just python right and we get all these nice primitives",
    "start": "917199",
    "end": "924399"
  },
  {
    "text": "like durability out of the box so we've written our code right but we",
    "start": "924399",
    "end": "930959"
  },
  {
    "text": "have to make it available right it's it's running in some remote container and so the first thing we need",
    "start": "930959",
    "end": "938160"
  },
  {
    "text": "is our function registry this is going to map logical function types to",
    "start": "938160",
    "end": "945360"
  },
  {
    "text": "concrete bits of code so in this example we have written both our greet function and our send email",
    "start": "945360",
    "end": "952079"
  },
  {
    "text": "function they are both written in python and they are both written in the same file but neither of those requirements the",
    "start": "952079",
    "end": "958560"
  },
  {
    "text": "send email function for example could be a rust function or could be implemented",
    "start": "958560",
    "end": "963839"
  },
  {
    "text": "in haskell and it could be running halfway around the world from our reader but we're going to bind these to a",
    "start": "963839",
    "end": "969920"
  },
  {
    "text": "registry and we're giving the function type so that when we shoot off a message to that type we know how to associate it",
    "start": "969920",
    "end": "976480"
  },
  {
    "text": "with a specific concrete method and then we need to expose it uh to",
    "start": "976480",
    "end": "983279"
  },
  {
    "text": "the flink cluster and we need to ensure that uh it actually works against our",
    "start": "983279",
    "end": "988399"
  },
  {
    "text": "protocol and for that we ship a request reply handler which dispatches the invocation requests",
    "start": "988399",
    "end": "996320"
  },
  {
    "text": "to the bound functions and then encodes their side effects both resulting output messages along",
    "start": "996320",
    "end": "1002480"
  },
  {
    "text": "with state updates as an http response to be sent back to the flint cluster",
    "start": "1002480",
    "end": "1009279"
  },
  {
    "text": "and then we simply expose this handler using your favorite http framework in this example and the",
    "start": "1009279",
    "end": "1015680"
  },
  {
    "text": "later examples i'm using flask but that is not a hard requirement that is just something that i chose to use",
    "start": "1015680",
    "end": "1021600"
  },
  {
    "text": "uh plug in your favorite library here",
    "start": "1021600",
    "end": "1026558"
  },
  {
    "text": "okay so greeters are interesting readers are fun but that's not what you're building your",
    "start": "1026880",
    "end": "1033360"
  },
  {
    "text": "business is not built on hello world applications but it might be built on model serving",
    "start": "1033360",
    "end": "1039678"
  },
  {
    "text": "so we're going to take a look at building a fraud detection application specifically for credit card",
    "start": "1039679",
    "end": "1045280"
  },
  {
    "text": "transactions so as a transaction comes in we want to build up feature vectors",
    "start": "1045280",
    "end": "1050320"
  },
  {
    "text": "which require looking at states right we need to remember things about our users and our merchants",
    "start": "1050320",
    "end": "1056160"
  },
  {
    "text": "we need to query these functions in dynamic ways and then we want to score that against",
    "start": "1056160",
    "end": "1061760"
  },
  {
    "text": "something that was likely provided by our data science team giving us back a score on whether or not",
    "start": "1061760",
    "end": "1068480"
  },
  {
    "text": "we believe this transaction to be fraudulent and at that point we can take some action",
    "start": "1068480",
    "end": "1074080"
  },
  {
    "text": "okay let's take a look at the code for this model serving example again we're going to be sticking with",
    "start": "1074080",
    "end": "1079360"
  },
  {
    "text": "the python sdk and for simplicity all of the functions are implemented in a single file as a single flask",
    "start": "1079360",
    "end": "1085280"
  },
  {
    "text": "application but just reiterate make it very clear though that is not a hard requirement",
    "start": "1085280",
    "end": "1091360"
  },
  {
    "text": "simply for simplicity of this demonstration these functions could all be implemented in different languages",
    "start": "1091360",
    "end": "1097679"
  },
  {
    "text": "they can be packaged and deployed separately that is supported and expected workflow",
    "start": "1097679",
    "end": "1104080"
  },
  {
    "text": "of many state fund systems so we're going to be building up feature",
    "start": "1104080",
    "end": "1109840"
  },
  {
    "text": "vectors whenever a transaction comes in we need to get information that we can use to",
    "start": "1109840",
    "end": "1116320"
  },
  {
    "text": "send to our model and one of those features is a fraud count so how many times over",
    "start": "1116320",
    "end": "1123520"
  },
  {
    "text": "the last 30 days has this particular account reported and confirmed fraudulent activity",
    "start": "1123520",
    "end": "1130640"
  },
  {
    "text": "the idea here being that the more often that we see fraud for a particular account the",
    "start": "1130640",
    "end": "1135760"
  },
  {
    "text": "more likely we are to continue to see it in the future it's a rolling 30-day sum because",
    "start": "1135760",
    "end": "1144000"
  },
  {
    "text": "people's behavior changes and so as things become further in the past they become",
    "start": "1144000",
    "end": "1149280"
  },
  {
    "text": "less relevant so our function type is varica",
    "start": "1149280",
    "end": "1154880"
  },
  {
    "text": "counter right this is the logical type we will use to message this function and we take into",
    "start": "1154880",
    "end": "1161440"
  },
  {
    "text": "parameters our context it gives us access to capabilities like state and messaging and the actual message that",
    "start": "1161440",
    "end": "1167360"
  },
  {
    "text": "was sent to us leveraging python 3 type annotations we get to avoid all of our",
    "start": "1167360",
    "end": "1173120"
  },
  {
    "text": "any protobuf boilerplates and i'm using a union type here because we support uh working against multiple message",
    "start": "1173120",
    "end": "1181039"
  },
  {
    "text": "types so let's start with this confirm fraud message",
    "start": "1181039",
    "end": "1187120"
  },
  {
    "text": "a record is going to come in say from a kafka topic that uh tells us that a user has confirmed",
    "start": "1187120",
    "end": "1194480"
  },
  {
    "text": "fraudulent activity against a particular account this function i forgot to mention is",
    "start": "1194480",
    "end": "1200240"
  },
  {
    "text": "always scoped to a particular account id so fraud count is our function type account is",
    "start": "1200240",
    "end": "1206480"
  },
  {
    "text": "going to be our id for the logical address when this comes in we need to increment",
    "start": "1206480",
    "end": "1212240"
  },
  {
    "text": "our accounts and so all we're going to do is go into our context",
    "start": "1212240",
    "end": "1217520"
  },
  {
    "text": "we're going to read out the current counts and then we're going to increment it if it already exists or",
    "start": "1217520",
    "end": "1223120"
  },
  {
    "text": "initialize it if there has been no fraud over the last 30 days for this particular account once we have done",
    "start": "1223120",
    "end": "1230000"
  },
  {
    "text": "that we will simply re-pack it we will set that value and we're done so while we have",
    "start": "1230000",
    "end": "1238880"
  },
  {
    "text": "switched to using a context versus local variables we are otherwise just writing very",
    "start": "1238880",
    "end": "1245039"
  },
  {
    "text": "simple python code and getting fault tolerance and durability from the runtime",
    "start": "1245039",
    "end": "1251039"
  },
  {
    "text": "but i said we also need to do a rolling 30-day count so every time i increment this fraud counts",
    "start": "1251039",
    "end": "1258720"
  },
  {
    "text": "value in 30 days i need to decrement it well we're able to send messages to other",
    "start": "1258720",
    "end": "1265360"
  },
  {
    "text": "functions but it turns out we're also able to send messages to ourselves",
    "start": "1265360",
    "end": "1271280"
  },
  {
    "text": "and more interestingly we can send messages with delay so after we",
    "start": "1271280",
    "end": "1276640"
  },
  {
    "text": "increment our account we are going to pack and send after and we are this",
    "start": "1276640",
    "end": "1282080"
  },
  {
    "text": "means we are going to send a message where are we sending it well we're going to send it to ourselves via the context",
    "start": "1282080",
    "end": "1287440"
  },
  {
    "text": "we can get the current address and so we're going to send ourselves an expire fraud message that tells us to decrement but we are",
    "start": "1287440",
    "end": "1294640"
  },
  {
    "text": "going to give it a delay of 30 days so this message will not arrive until 30",
    "start": "1294640",
    "end": "1299760"
  },
  {
    "text": "days after we send it and the runtime is able to ensure that",
    "start": "1299760",
    "end": "1304880"
  },
  {
    "text": "this message is consistent and durable so that if we have failure over the",
    "start": "1304880",
    "end": "1310159"
  },
  {
    "text": "course of that 30-day period for whatever reason this message will not be lost when we do",
    "start": "1310159",
    "end": "1315919"
  },
  {
    "text": "that and we're ready to go so we see that expired fraud is also an accepted type",
    "start": "1315919",
    "end": "1321360"
  },
  {
    "text": "and so after 30 days it will arrive and what are we going to do with it well we're simply going to decrement our",
    "start": "1321360",
    "end": "1327280"
  },
  {
    "text": "value so i will read out our fraud counts we'll decrement it and then if it's zero we'll",
    "start": "1327280",
    "end": "1332960"
  },
  {
    "text": "go ahead and delete the state entirely just frees up a bit of space and makes things uh more scalable",
    "start": "1332960",
    "end": "1339520"
  },
  {
    "text": "but this is really in optimization detail otherwise we are going to go ahead and",
    "start": "1339520",
    "end": "1345280"
  },
  {
    "text": "set the new value so if it was five it's now four we have decremented it and we are good to go",
    "start": "1345280",
    "end": "1352320"
  },
  {
    "text": "but storing state is fine we also need to act upon it and so the third message",
    "start": "1352320",
    "end": "1357919"
  },
  {
    "text": "type that this function accepts is query fraud someone can message a particular",
    "start": "1357919",
    "end": "1363360"
  },
  {
    "text": "instance of this function right they can query for a particular account and ask how much fraud have you seen over the",
    "start": "1363360",
    "end": "1369440"
  },
  {
    "text": "last 30 days when we receive this we'll simply check our state value if it's not",
    "start": "1369440",
    "end": "1374799"
  },
  {
    "text": "already set if there is nothing there we'll give it some default and then we will reply so send this message",
    "start": "1374799",
    "end": "1381120"
  },
  {
    "text": "back to the caller this is everything we need for a distributed durable consistent",
    "start": "1381120",
    "end": "1388240"
  },
  {
    "text": "state and messaging of this function let's now see how it's used so i have",
    "start": "1388240",
    "end": "1393440"
  },
  {
    "text": "some other functions in here we're going to skip past but the main function in this workflow is what i'm going to call the",
    "start": "1393440",
    "end": "1399280"
  },
  {
    "text": "transaction manager this is what coordinates the whole workflow",
    "start": "1399280",
    "end": "1404400"
  },
  {
    "text": "and builds up our feature vector every time a transaction comes in",
    "start": "1404400",
    "end": "1410000"
  },
  {
    "text": "so uh again we have our contacts we have our message types the main one being a transaction so",
    "start": "1410000",
    "end": "1415280"
  },
  {
    "text": "every time a user says swipes their credit card or does something else we will get a transaction event that",
    "start": "1415280",
    "end": "1421919"
  },
  {
    "text": "contains the account id it contains the merchant id of where they were making this purchase",
    "start": "1421919",
    "end": "1427840"
  },
  {
    "text": "and the amount of the transaction and so we see this we're going to cache",
    "start": "1427840",
    "end": "1433600"
  },
  {
    "text": "it in state we want to hold on to this and make it available later on and then we're going to",
    "start": "1433600",
    "end": "1439360"
  },
  {
    "text": "farm out to our different functions that we are using to build up our feature vector so you can see here we are querying that",
    "start": "1439360",
    "end": "1445840"
  },
  {
    "text": "counter we just defined above and we are going to the instance for this particular account",
    "start": "1445840",
    "end": "1451120"
  },
  {
    "text": "we are also getting some merchant information and some other values",
    "start": "1451120",
    "end": "1458159"
  },
  {
    "text": "when these functions respond right we saw that our fraud count replies back with a reported fraud well here it is",
    "start": "1458159",
    "end": "1465520"
  },
  {
    "text": "when we get this what are we going to do well there's a bit of business logic to ensure that we have",
    "start": "1465520",
    "end": "1471360"
  },
  {
    "text": "gotten all of our features if we haven't we'll store that reported fraud count and state until we get all the different features",
    "start": "1471360",
    "end": "1477679"
  },
  {
    "text": "back but when we have them all we are going to build up our feature vector and message our model",
    "start": "1477679",
    "end": "1483600"
  },
  {
    "text": "this is likely living somewhere else it's provided by the data science team",
    "start": "1483600",
    "end": "1489440"
  },
  {
    "text": "they're going to iterate and deploy this separately of the rest of the application and it will take in that feature vector",
    "start": "1489440",
    "end": "1497679"
  },
  {
    "text": "compute a score and respond back when it does so we are going to get this",
    "start": "1497679",
    "end": "1503919"
  },
  {
    "text": "fraud score so this is our confidence interval from 0 to 100",
    "start": "1503919",
    "end": "1509360"
  },
  {
    "text": "of how likely we think it is that something is fraudulent 0 being is absolutely not and 100 being",
    "start": "1509360",
    "end": "1516640"
  },
  {
    "text": "this is absolutely fraud when we get that score we will compare it to some",
    "start": "1516640",
    "end": "1522640"
  },
  {
    "text": "predefined interval and if it is above the threshold say 80 percent well we will send an",
    "start": "1522640",
    "end": "1529360"
  },
  {
    "text": "alert to a kafka topic called alerts that says hey we think this is fraudulent and the user",
    "start": "1529360",
    "end": "1536000"
  },
  {
    "text": "will see that and they can act upon it they can maybe confirm it and the bank will block that transaction",
    "start": "1536000",
    "end": "1541760"
  },
  {
    "text": "or they can say you know what this was really me uh please let it go through",
    "start": "1541760",
    "end": "1547279"
  },
  {
    "text": "we are also going to delete all of our state values at the end because hey we have scored",
    "start": "1547279",
    "end": "1553919"
  },
  {
    "text": "and alerted on this transaction we don't need to retain this information any longer as we have built all of these",
    "start": "1553919",
    "end": "1562000"
  },
  {
    "text": "up we are making them available via the request reply handler and we are packaging this as a flask",
    "start": "1562000",
    "end": "1568240"
  },
  {
    "text": "application i've defined an endpoint state fund that accepts a post and so whenever data arrives whenever we",
    "start": "1568240",
    "end": "1575279"
  },
  {
    "text": "receive that we'll simply send the whole payload to the handler and it will manage",
    "start": "1575279",
    "end": "1580480"
  },
  {
    "text": "dispatching to our functions encoding our effects our state updates and our",
    "start": "1580480",
    "end": "1585760"
  },
  {
    "text": "responses and we will simply send that back to the caller of this endpoint which is",
    "start": "1585760",
    "end": "1592559"
  },
  {
    "text": "the flink cluster when we go to package this so let's take",
    "start": "1592559",
    "end": "1598960"
  },
  {
    "text": "a look at the docker file you'll see that there is nothing state fund specific here this",
    "start": "1598960",
    "end": "1604880"
  },
  {
    "text": "is a plain and simple flask application there's nothing about the flink runtime",
    "start": "1604880",
    "end": "1610559"
  },
  {
    "text": "we're going to see there's nothing special about this in any way",
    "start": "1610559",
    "end": "1616480"
  },
  {
    "text": "and if we look at our dependencies as well we are including the state fund sdk",
    "start": "1616480",
    "end": "1624080"
  },
  {
    "text": "which is what wraps that high-level protocol and then we are pulling in flask and whatever other",
    "start": "1624080",
    "end": "1629120"
  },
  {
    "text": "python dependencies we need so we're this the model function we might be pulling in numpy or scipy or any of those good data",
    "start": "1629120",
    "end": "1635520"
  },
  {
    "text": "science libraries uh we have full flexibility here and when it comes time to deploy this",
    "start": "1635520",
    "end": "1642720"
  },
  {
    "text": "well we are going to deploy it as a standard uh kubernetes deployment",
    "start": "1642720",
    "end": "1649120"
  },
  {
    "text": "so i have written this deployment specification um i've pushed my image i want 10 replicas",
    "start": "1649120",
    "end": "1655279"
  },
  {
    "text": "of this because i want to be able to scale out we are exposing it under port 8000",
    "start": "1655279",
    "end": "1662399"
  },
  {
    "text": "but this is all stock and standard kubernetes additionally there is a service that is",
    "start": "1662399",
    "end": "1668320"
  },
  {
    "text": "making it reachable so that gives us our user code but what about the flink cluster right how does",
    "start": "1668320",
    "end": "1674399"
  },
  {
    "text": "it know where to all right so this file is uh our module.yaml file this is the",
    "start": "1674399",
    "end": "1680960"
  },
  {
    "text": "configuration we give to the flink cluster that tells it how to map function types",
    "start": "1680960",
    "end": "1687840"
  },
  {
    "text": "logical function types to addresses under which our functions are",
    "start": "1687840",
    "end": "1693120"
  },
  {
    "text": "reachable so we can see here i have our counter function i have said that",
    "start": "1693120",
    "end": "1699440"
  },
  {
    "text": "this is the logical function type so when you see a message that is targeting ververica counter this is the metadata you should",
    "start": "1699440",
    "end": "1705760"
  },
  {
    "text": "use the function is exposed as an http endpoint",
    "start": "1705760",
    "end": "1710880"
  },
  {
    "text": "and this is the specific end point you should use we also have at the bottom our e",
    "start": "1710880",
    "end": "1718320"
  },
  {
    "text": "ingresses and egresses this is how the functions communicate with the outside world",
    "start": "1718320",
    "end": "1723679"
  },
  {
    "text": "so you saw for example that we were sending alerts to a kafka topic we are also reading our data from kafka",
    "start": "1723679",
    "end": "1730640"
  },
  {
    "text": "topics let's look at the example of our confirm fraud",
    "start": "1730640",
    "end": "1736080"
  },
  {
    "text": "message well i have said that this is coming from kafka i have given a name",
    "start": "1736080",
    "end": "1742799"
  },
  {
    "text": "and i have my kafka specific configuration so where the brokers live consumer group ids things like that",
    "start": "1742799",
    "end": "1750399"
  },
  {
    "text": "and then uh we give it a list of topics to consume from so we are reading from the confirmed",
    "start": "1750399",
    "end": "1756320"
  },
  {
    "text": "topic we've specified our type url so what sort of data are we reading",
    "start": "1756320",
    "end": "1761679"
  },
  {
    "text": "and then we give it a list of targets so what function types do we want to send",
    "start": "1761679",
    "end": "1767039"
  },
  {
    "text": "these messages to we give it a list of types the id is implicitly pulled from the header",
    "start": "1767039",
    "end": "1773919"
  },
  {
    "text": "and it will route our messages to the appropriate function to begin that computation",
    "start": "1773919",
    "end": "1781039"
  },
  {
    "text": "along with kafka we support aws kinesis out of the box and then if you're comfortable writing a",
    "start": "1781039",
    "end": "1787200"
  },
  {
    "text": "little bit of java code we also support a whole host of other systems including",
    "start": "1787200",
    "end": "1792480"
  },
  {
    "text": "jdbc elastic pulsar provika rabbit mq and",
    "start": "1792480",
    "end": "1799520"
  },
  {
    "text": "as we see demand we will add more first class camel support for those other systems",
    "start": "1799520",
    "end": "1806480"
  },
  {
    "text": "we we're going to take this file after we have written it and uh build our docker image",
    "start": "1807760",
    "end": "1814720"
  },
  {
    "text": "so uh this base image flink state fund contains the entire apache flink runtime",
    "start": "1814720",
    "end": "1820559"
  },
  {
    "text": "along with all the stateful function specific runtime code and all we need to do is copy our",
    "start": "1820559",
    "end": "1827720"
  },
  {
    "text": "module.yaml file onto the image there's no java code to write there is",
    "start": "1827720",
    "end": "1833360"
  },
  {
    "text": "no flink specific codes right i am also",
    "start": "1833360",
    "end": "1838480"
  },
  {
    "text": "uh including a flink conf which is some flink cluster configurations uh but this",
    "start": "1838480",
    "end": "1844640"
  },
  {
    "text": "is stock and standard if you have written other apache flink applications in the past",
    "start": "1844640",
    "end": "1850799"
  },
  {
    "text": "and this is the image we are going to use to run our cluster",
    "start": "1850799",
    "end": "1856000"
  },
  {
    "text": "and so i'm in fact already doing that let's go ahead and take a look at our",
    "start": "1856000",
    "end": "1861360"
  },
  {
    "text": "pods i have a kubernetes cluster that is",
    "start": "1861360",
    "end": "1866399"
  },
  {
    "text": "running uh three kafka brokers for our data i have a data simulator that is",
    "start": "1866399",
    "end": "1872080"
  },
  {
    "text": "simulating transactions and confirm fraud accounts and all those good things and then we",
    "start": "1872080",
    "end": "1878480"
  },
  {
    "text": "are running our flint cluster and our user code so i'm running three instances uh",
    "start": "1878480",
    "end": "1886240"
  },
  {
    "text": "three nodes in my flint cluster each of these only have a single core so it's very small",
    "start": "1886240",
    "end": "1891840"
  },
  {
    "text": "and then we are running our user code and i have a replica set of 10. so i want to really scale out",
    "start": "1891840",
    "end": "1898720"
  },
  {
    "text": "that compute if we go ahead and let's go ahead and",
    "start": "1898720",
    "end": "1904480"
  },
  {
    "text": "i believe i'm already port forwarded so i can pull over the flink ui",
    "start": "1904480",
    "end": "1911200"
  },
  {
    "text": "you can see that everything is up and running this is the flink ui if you're not familiar it tells us what our application is",
    "start": "1911200",
    "end": "1917120"
  },
  {
    "text": "doing and so we can see here we have processed uh since i started",
    "start": "1917120",
    "end": "1922559"
  },
  {
    "text": "this roughly 200 000 messages uh let's these are all calling out to",
    "start": "1922559",
    "end": "1928559"
  },
  {
    "text": "our user code it is being routed through this application it is syncing the results",
    "start": "1928559",
    "end": "1933679"
  },
  {
    "text": "into kafka if we take a look at our checkpoints at our fault tolerance",
    "start": "1933679",
    "end": "1939360"
  },
  {
    "text": "we can see that things are going through smoothly there was a failure but that's okay we handled it gracefully",
    "start": "1939360",
    "end": "1944880"
  },
  {
    "text": "uh and currently i'm managing about seven gigabytes of state within the flink cluster",
    "start": "1944880",
    "end": "1950240"
  },
  {
    "text": "remember this is being stored locally either in local memory or spilling to local disk",
    "start": "1950240",
    "end": "1955519"
  },
  {
    "text": "but it is always local we are never uh using persistent volumes of stateful sets min io is providing",
    "start": "1955519",
    "end": "1962080"
  },
  {
    "text": "all of our fault tolerance and when it is time to go make a change",
    "start": "1962080",
    "end": "1968080"
  },
  {
    "text": "so maybe i want to change my replica account or i want to deploy a new version of my user code all",
    "start": "1968080",
    "end": "1975919"
  },
  {
    "text": "i need to do is apply those values that we have",
    "start": "1975919",
    "end": "1982399"
  },
  {
    "text": "for our function so i can cube control apply dash f state fun functions and this has our",
    "start": "1982399",
    "end": "1988240"
  },
  {
    "text": "deployment yaml and our service gamble and this will apply those changes in",
    "start": "1988240",
    "end": "1993679"
  },
  {
    "text": "this case i haven't actually changed anything we can also apply a horizontal load",
    "start": "1993679",
    "end": "2000720"
  },
  {
    "text": "balancer so perhaps i did not want to have a static set of",
    "start": "2000720",
    "end": "2005760"
  },
  {
    "text": "functions but i want to scale as my load goes up and down throughout the day we can do that and we will be able to do",
    "start": "2005760",
    "end": "2011039"
  },
  {
    "text": "so gracefully and we can multiplex different function",
    "start": "2011039",
    "end": "2017519"
  },
  {
    "text": "modules together so i'm running this code perhaps i'm more of a data engineering team",
    "start": "2017519",
    "end": "2022960"
  },
  {
    "text": "and so we're in charge of building the feature vectors maintaining that state the data science team has their python",
    "start": "2022960",
    "end": "2030159"
  },
  {
    "text": "code that is our model they're going to deploy that separately and make their own updates and we can all do that gracefully and",
    "start": "2030159",
    "end": "2036799"
  },
  {
    "text": "consistent so i really appreciate you taking the time to listen my talk today i hope you",
    "start": "2036799",
    "end": "2043679"
  },
  {
    "text": "are excited about stateful functions and the future of stateful serverless applications",
    "start": "2043679",
    "end": "2050000"
  },
  {
    "text": "if you have any questions i'm always on twitter at sjwiestman also the apache flink user",
    "start": "2050480",
    "end": "2057919"
  },
  {
    "text": "mailing list is the most active user mailing list of any apache project and it's a great place to get help thank",
    "start": "2057919",
    "end": "2065679"
  },
  {
    "text": "you so much and i hope you enjoy the rest of the conference",
    "start": "2065679",
    "end": "2071520"
  }
]