[
  {
    "text": "my name is Sally I'm a software engineer at Google I am the tech lead of the gke",
    "start": "120",
    "end": "5790"
  },
  {
    "text": "storage team and I work primarily on the kubernetes project I'm a co-lead of the",
    "start": "5790",
    "end": "12389"
  },
  {
    "text": "storage special interest group so today the agenda is pretty simple the storage",
    "start": "12389",
    "end": "19410"
  },
  {
    "text": "subsystem the volume subsystem of kubernetes is pretty complicated there's a ton of terminology and if you're not",
    "start": "19410",
    "end": "25830"
  },
  {
    "text": "familiar with it it can get pretty overwhelming by a show of hands how many",
    "start": "25830",
    "end": "31230"
  },
  {
    "text": "of you know all of the words that are on this screen should be at least one",
    "start": "31230",
    "end": "37829"
  },
  {
    "text": "person how many of you know some of these words okay and how many of you",
    "start": "37829",
    "end": "45180"
  },
  {
    "text": "don't know any of these words all right cool so I think by the end of this talk",
    "start": "45180",
    "end": "50850"
  },
  {
    "text": "I'm hoping that you guys are familiar with all of this and we have a lot of material to cover so I'm not gonna take",
    "start": "50850",
    "end": "58170"
  },
  {
    "text": "questions during the presentation save those till the end let's get started so",
    "start": "58170",
    "end": "64400"
  },
  {
    "text": "one of the most important principles of kubernetes is the idea that we want to",
    "start": "64400",
    "end": "70590"
  },
  {
    "text": "make workloads portable across clusters it doesn't matter what type of cluster that you're running on the idea is that",
    "start": "70590",
    "end": "78210"
  },
  {
    "text": "we want to abstract away the implementation from your actual workload",
    "start": "78210",
    "end": "84920"
  },
  {
    "text": "now what this allows you as an end-user",
    "start": "85220",
    "end": "91680"
  },
  {
    "text": "to do is write your application once and be able to deploy it anywhere you can",
    "start": "91680",
    "end": "98880"
  },
  {
    "text": "write your application on a cloud provider like GCE on Amazon if you'd",
    "start": "98880",
    "end": "104759"
  },
  {
    "text": "like or on your own on-premise deployment regardless of where you are",
    "start": "104759",
    "end": "110790"
  },
  {
    "text": "the way that you deploy your application is going to be consistent for example",
    "start": "110790",
    "end": "115860"
  },
  {
    "text": "you can use a replica set or a pod you use the same exact Yam well regardless of what cluster you're actually running",
    "start": "115860",
    "end": "121530"
  },
  {
    "text": "on to deploy your workload the challenge",
    "start": "121530",
    "end": "128399"
  },
  {
    "text": "now is with stateful services pods and replica sets abstract away compute in",
    "start": "128399",
    "end": "133770"
  },
  {
    "text": "memory but they don't really address stateful services the problem with state is that",
    "start": "133770",
    "end": "138820"
  },
  {
    "text": "containers are inherently ephemeral there is no way to persist State inside",
    "start": "138820",
    "end": "144100"
  },
  {
    "text": "of a container once a container is terminated everything that you've written inside the container is gone and",
    "start": "144100",
    "end": "150010"
  },
  {
    "text": "containers can't really share data across container boundaries so if you have a couple of containers that are",
    "start": "150010",
    "end": "155260"
  },
  {
    "text": "working together which would be the case if you're familiar with the concept of a kubernetes pod you can have multiple containers that",
    "start": "155260",
    "end": "162100"
  },
  {
    "text": "are working together so for example you could have some-some container that's",
    "start": "162100",
    "end": "167260"
  },
  {
    "text": "pulling some static content from somewhere and a web server that's serving up that static content you",
    "start": "167260",
    "end": "173680"
  },
  {
    "text": "without a way to be able to share state you have no way to be able to share data",
    "start": "173680",
    "end": "179770"
  },
  {
    "text": "between these two containers so now",
    "start": "179770",
    "end": "186640"
  },
  {
    "text": "storage is a very big nasty concept there's a lot of different types of",
    "start": "186640",
    "end": "192730"
  },
  {
    "text": "storage systems you have object stores like s3 GCS on Google you've got sequel",
    "start": "192730",
    "end": "200860"
  },
  {
    "text": "databases you've got no sequel databases you've got pub subsystems you've got time series databases and of course file",
    "start": "200860",
    "end": "207250"
  },
  {
    "text": "and block storage and even file on block so what how do we tackle all of this the",
    "start": "207250",
    "end": "214900"
  },
  {
    "text": "answer is that we can't tackle all of it we have to go back to the core principle",
    "start": "214900",
    "end": "220630"
  },
  {
    "text": "of kubernetes which is workload portability so what we decided is that",
    "start": "220630",
    "end": "227050"
  },
  {
    "text": "we're going to focus on file and block storage and not on everything else not on the objects stores the sequel",
    "start": "227050",
    "end": "233980"
  },
  {
    "text": "databases etc and the reason for that is because the data path for both file and",
    "start": "233980",
    "end": "239200"
  },
  {
    "text": "block has been standardized your Linux operating system your operating system",
    "start": "239200",
    "end": "244360"
  },
  {
    "text": "basically takes care of writing block and file for you so your application doesn't need to be aware of how to do",
    "start": "244360",
    "end": "250030"
  },
  {
    "text": "those things whereas for the rest of these data services your application has",
    "start": "250030",
    "end": "256540"
  },
  {
    "text": "to be aware of it you have to have some sort of SDK built into your application that understands how to read and write",
    "start": "256540",
    "end": "262840"
  },
  {
    "text": "from these different sources and the problem is that there is no comment",
    "start": "262840",
    "end": "268000"
  },
  {
    "text": "and for any of any of those things yet once there is we can talk about",
    "start": "268000",
    "end": "273570"
  },
  {
    "text": "abstracting that away within kubernetes so kubernetes doesn't build standard",
    "start": "273570",
    "end": "279220"
  },
  {
    "text": "data paths but once the standard data path exists we can do some really really cool stuff with it so let's see what we",
    "start": "279220",
    "end": "285490"
  },
  {
    "text": "did with file and block so the",
    "start": "285490",
    "end": "291550"
  },
  {
    "text": "kubernetes way to abstract away extract a WAV file and block is the volume",
    "start": "291550",
    "end": "296860"
  },
  {
    "text": "plug-in volume plugin is just a way to be able to reference either a block device or a mounted filesystem and make",
    "start": "296860",
    "end": "304930"
  },
  {
    "text": "it available to all the containers inside of a pod a volume plug-in",
    "start": "304930",
    "end": "310060"
  },
  {
    "text": "basically specifies how to make that volume available inside of a pod and the",
    "start": "310060",
    "end": "316600"
  },
  {
    "text": "medium that backs it the lifecycle of any given volume could be the same as",
    "start": "316600",
    "end": "322270"
  },
  {
    "text": "the lifecycle of the pod or it could extend beyond the lifecycle of a pod and B could be persistent persisted beyond",
    "start": "322270",
    "end": "328810"
  },
  {
    "text": "the lifecycle of any individual pod so this is the set of volume plugins that",
    "start": "328810",
    "end": "335320"
  },
  {
    "text": "kubernetes currently supports I break it up into five big areas one is remote",
    "start": "335320",
    "end": "341260"
  },
  {
    "text": "storage the idea here is this is network-attached storage that persists",
    "start": "341260",
    "end": "346630"
  },
  {
    "text": "beyond the lifecycle if in any individual pod then you have ephemeral storage which has its lifecycle tied to",
    "start": "346630",
    "end": "354940"
  },
  {
    "text": "a given pod then you have local persistent volumes which are which",
    "start": "354940",
    "end": "360550"
  },
  {
    "text": "enable local storage to be used in a persistent manner and then you have",
    "start": "360550",
    "end": "365950"
  },
  {
    "text": "these new out of tree volume plugins and finally you have host paths which you should never use if there's one thing",
    "start": "365950",
    "end": "371919"
  },
  {
    "text": "you take away from this talk don't use those back so let's dive into this a",
    "start": "371919",
    "end": "377650"
  },
  {
    "text": "little bit ephemeral storage so ephemeral storage is basically temporary",
    "start": "377650",
    "end": "383500"
  },
  {
    "text": "scratch space that's stolen from the underlying host machine temporarily and",
    "start": "383500",
    "end": "388530"
  },
  {
    "text": "it is exposed to all the containers inside of a pod so you can think of it",
    "start": "388530",
    "end": "393669"
  },
  {
    "text": "as just scratch space if you need to share files between two containers you",
    "start": "393669",
    "end": "398680"
  },
  {
    "text": "set up an empty durval um-- and at any files that are written onto that scratch",
    "start": "398680",
    "end": "404840"
  },
  {
    "text": "space or visible from all containers that make up that pod these volumes can",
    "start": "404840",
    "end": "411680"
  },
  {
    "text": "only be referenced in line meaning your pod definition has to actually specify",
    "start": "411680",
    "end": "417410"
  },
  {
    "text": "the volume type emptied er you can't use a persistent volume persistent volume",
    "start": "417410",
    "end": "422810"
  },
  {
    "text": "claimed to reference empty directories and I'll talk about what pvp VCS are in a little bit so the basic volume plug-in here is the",
    "start": "422810",
    "end": "431030"
  },
  {
    "text": "empty der that you need to be aware of let's take a look at what that actually looks like when you're deploying a pod",
    "start": "431030",
    "end": "436970"
  },
  {
    "text": "so this is a basic pod definition that has two containers container one and",
    "start": "436970",
    "end": "445700"
  },
  {
    "text": "container two both of them mount a single volume which is an empty der called shared scratch space into a mount",
    "start": "445700",
    "end": "453410"
  },
  {
    "text": "path inside the container at shared so if either if these containers writes",
    "start": "453410",
    "end": "458450"
  },
  {
    "text": "into that path it's visible by the other container so fairly straightforward and",
    "start": "458450",
    "end": "466670"
  },
  {
    "text": "now the cool thing about empty ders is that it does maintain this principle of workload portability if I move this pod",
    "start": "466670",
    "end": "473000"
  },
  {
    "text": "yeah mell that I showed you - any other cluster it'll work in exactly the same way regardless of the cluster that",
    "start": "473000",
    "end": "478940"
  },
  {
    "text": "you're actually running on there is a",
    "start": "478940",
    "end": "484520"
  },
  {
    "text": "set of volume plugins that are built on top of empty der specifically secret volumes config map volumes and downward",
    "start": "484520",
    "end": "491720"
  },
  {
    "text": "API volumes basically what they do is create an empty der and pre populate it",
    "start": "491720",
    "end": "497090"
  },
  {
    "text": "with some data in this case it's data from the kubernetes api so for example a",
    "start": "497090",
    "end": "503480"
  },
  {
    "text": "secret volume allows a secret in the kubernetes api to be exposed as a file",
    "start": "503480",
    "end": "508580"
  },
  {
    "text": "to your pod the reason we made these volume plugins is again a new kubernetes",
    "start": "508580",
    "end": "514640"
  },
  {
    "text": "principle meet users where they are the idea here is we don't want folks to have",
    "start": "514640",
    "end": "521659"
  },
  {
    "text": "to rewrite their applications to be kubernetes aware you know we want your",
    "start": "521660",
    "end": "528440"
  },
  {
    "text": "applications to just work on kubernetes so if you had an application that understood how to read some credentials",
    "start": "528440",
    "end": "534290"
  },
  {
    "text": "from a file we don't want you to have to modify that to then you know call out to the",
    "start": "534290",
    "end": "540290"
  },
  {
    "text": "kubernetes api and fetch secrets so instead what you can do is use a secret",
    "start": "540290",
    "end": "545839"
  },
  {
    "text": "volume and the secret volume will basically fetch the secret on your behalf and mount it inside that",
    "start": "545839",
    "end": "551540"
  },
  {
    "text": "container as a file and your workload doesn't need to be changed at all so",
    "start": "551540",
    "end": "558829"
  },
  {
    "text": "that's a ephemeral storage now let's move on to remote storage the remote storage is storage that exists beyond",
    "start": "558829",
    "end": "565970"
  },
  {
    "text": "the lifecycle of any one pod this allows data to be persisted so that you can",
    "start": "565970",
    "end": "572839"
  },
  {
    "text": "actually have stateful services examples of these volumes include gcep DS Amazon",
    "start": "572839",
    "end": "578749"
  },
  {
    "text": "EBS I scuzzy NFS and there's a lot more",
    "start": "578749",
    "end": "583899"
  },
  {
    "text": "these remote volume plugins can be referenced either in line or through a",
    "start": "584230",
    "end": "589970"
  },
  {
    "text": "persistent volume persistent volume claim object and I'll talk about that in a little bit",
    "start": "589970",
    "end": "596089"
  },
  {
    "text": "the beauty of remote storage is that this is what enables kubernetes to be",
    "start": "596089",
    "end": "604100"
  },
  {
    "text": "able to shuffle your workloads around because it decouples your storage from your compute so the pod that is serving",
    "start": "604100",
    "end": "612410"
  },
  {
    "text": "up your service can be terminated on any one node for any reason either the node goes bad or there's too many other",
    "start": "612410",
    "end": "619790"
  },
  {
    "text": "workloads running on this node and there isn't enough CPU or memory available that workload gets moved somewhere else",
    "start": "619790",
    "end": "627100"
  },
  {
    "text": "remote storage allows the the persistent State for that application to be made",
    "start": "627100",
    "end": "633230"
  },
  {
    "text": "available regardless of where your actual pod gets scheduled so now let's",
    "start": "633230",
    "end": "639649"
  },
  {
    "text": "take a look at what this would look like in using it so you create a pod in this",
    "start": "639649",
    "end": "646639"
  },
  {
    "text": "case I have a single container it's just a busybox container when it starts it's",
    "start": "646639",
    "end": "652670"
  },
  {
    "text": "going to just go to sleep for for a minute or 6s and seconds and I have a",
    "start": "652670",
    "end": "658939"
  },
  {
    "text": "volume in this case a GCE persistent disk and I specify the name of the disk and the filesystem I want on it and then",
    "start": "658939",
    "end": "667339"
  },
  {
    "text": "in my inside my container I I specify where it should be mounted in this case /data and now when this",
    "start": "667339",
    "end": "675190"
  },
  {
    "text": "container is started any data that is written to that path is then persisted",
    "start": "675190",
    "end": "681230"
  },
  {
    "text": "to this persistent disk and if this pod is terminated from one machine and move",
    "start": "681230",
    "end": "686870"
  },
  {
    "text": "to another machine that data comes along with it because the data is independent",
    "start": "686870",
    "end": "693050"
  },
  {
    "text": "of the pod and it is moved along with the storage and kubernetes will automatically take care of attaching the",
    "start": "693050",
    "end": "700850"
  },
  {
    "text": "volume to the correct node and mounting it to make it available inside the container so all of the the pipe work is",
    "start": "700850",
    "end": "710570"
  },
  {
    "text": "is taken care of by kubernetes automatically but don't do this do not",
    "start": "710570",
    "end": "717710"
  },
  {
    "text": "reference volumes directly in your pod the problem with this is what is this",
    "start": "717710",
    "end": "727130"
  },
  {
    "text": "workload Portability right we talked about this principle again and again but the problem with the Yambol that I just",
    "start": "727130",
    "end": "733520"
  },
  {
    "text": "showed you is that it references GC persistent disks directly inside the pod",
    "start": "733520",
    "end": "738830"
  },
  {
    "text": "yeah Mille now if I were to move that pod yeah Mille to a cluster that's running on Amazon it wouldn't work",
    "start": "738830",
    "end": "746120"
  },
  {
    "text": "because there's no GC persistent disks if I were to move it on Prem it wouldn't work because there's no GC persistent",
    "start": "746120",
    "end": "751760"
  },
  {
    "text": "disks so how do we fix that so yes this",
    "start": "751760",
    "end": "761900"
  },
  {
    "text": "pod yeah Mel is no longer portable across cluster so how do we fix that persistent volumes and persistent volume claims I've been saying that word over",
    "start": "761900",
    "end": "769220"
  },
  {
    "text": "and over again this is the solution to workload portability for storage across clusters it decouples storage",
    "start": "769220",
    "end": "776540"
  },
  {
    "text": "implementation from storage consumption and the way that it works is your",
    "start": "776540",
    "end": "782390"
  },
  {
    "text": "cluster administrator can be aware of the storage that exists within that cluster but your end user shouldn't have",
    "start": "782390",
    "end": "788600"
  },
  {
    "text": "to so what your storage your cluster administrator can do is they can come",
    "start": "788600",
    "end": "793790"
  },
  {
    "text": "along and create persistent volume objects within the kubernetes api to represent volumes that can then be used",
    "start": "793790",
    "end": "801080"
  },
  {
    "text": "by end-user they knew that by creating a persistent volume object inside this object they",
    "start": "801080",
    "end": "807990"
  },
  {
    "text": "define the actual storage that will be used so in this case I'm going to define",
    "start": "807990",
    "end": "814790"
  },
  {
    "text": "two persistent volume objects referencing two different disks one is",
    "start": "814790",
    "end": "821130"
  },
  {
    "text": "panda disk and other is panda disk 2 one is 10 gigabytes though there's 100 gigabytes they're both GC persistent",
    "start": "821130",
    "end": "828120"
  },
  {
    "text": "disks if I happen to have two different storage systems within my cluster let's say GC persistent disks and NFS then one",
    "start": "828120",
    "end": "836670"
  },
  {
    "text": "of these could have referenced an NFS share as well so this is basically the",
    "start": "836670",
    "end": "842550"
  },
  {
    "text": "cluster administrator going ahead and pre provisioning these volumes to make them available for consumption now when",
    "start": "842550",
    "end": "848940"
  },
  {
    "text": "somebody comes along and they want to use the storage what they're going to do is create a persistent volume claim",
    "start": "848940",
    "end": "854940"
  },
  {
    "text": "object now if you'll notice the persistent volume claim object doesn't",
    "start": "854940",
    "end": "860550"
  },
  {
    "text": "contain any specific implementation details it's simply a generic description of the type of storage that",
    "start": "860550",
    "end": "867810"
  },
  {
    "text": "the user wants in this case they describe that they want a minimum of",
    "start": "867810",
    "end": "873240"
  },
  {
    "text": "minimum of 100 gigabytes of storage and they want it to be read/write once and so now when the user creates this",
    "start": "873240",
    "end": "881250"
  },
  {
    "text": "persistent volume claim object the kubernetes system automatically figures out what Peavey's are available and",
    "start": "881250",
    "end": "887880"
  },
  {
    "text": "binds the claim to one of the persistent volumes that's available the beauty of",
    "start": "887880",
    "end": "896010"
  },
  {
    "text": "this is that now your workload your pod definition can now be portable so",
    "start": "896010",
    "end": "902820"
  },
  {
    "text": "instead of referencing the GC persistent disk directly the user simply references",
    "start": "902820",
    "end": "909450"
  },
  {
    "text": "the persistent volume claim and now if you were to move this pod Yamma Lacrosse",
    "start": "909450",
    "end": "915030"
  },
  {
    "text": "to a different cluster that doesn't have GCE persistent disks it would still work because as long as the the cluster",
    "start": "915030",
    "end": "921960"
  },
  {
    "text": "administrator has some TVs made available to the end user so if I was running on Amazon I could expose",
    "start": "921960",
    "end": "928880"
  },
  {
    "text": "persistent volumes that point to Amazon EBS disks if I was running on pram I",
    "start": "928880",
    "end": "935460"
  },
  {
    "text": "could expose is a Gluster a filesystem SEF whatever I want so one of the problems you might",
    "start": "935460",
    "end": "945430"
  },
  {
    "text": "have noticed with this is having a cluster administrator pre provision volumes that is both painful and",
    "start": "945430",
    "end": "954610"
  },
  {
    "text": "wasteful a cluster administrator can't necessarily predict how much storage",
    "start": "954610",
    "end": "962189"
  },
  {
    "text": "every single workload is going to use and having to manually provision for",
    "start": "962189",
    "end": "967629"
  },
  {
    "text": "every single workload is very painful and so in kubernetes this is one of the unique things about kubernetes is we",
    "start": "967629",
    "end": "973629"
  },
  {
    "text": "have the ability to dynamically create volumes on-demand when the user requests",
    "start": "973629",
    "end": "979779"
  },
  {
    "text": "them so the way that this works is through another kubernetes api object",
    "start": "979779",
    "end": "986709"
  },
  {
    "text": "called the storage class the storage class by the creation of a storage class",
    "start": "986709",
    "end": "993309"
  },
  {
    "text": "is a signal from the cluster administrator to say I want to enable dynamic provisioning so as a cluster",
    "start": "993309",
    "end": "1000029"
  },
  {
    "text": "administrator instead of creating PV objects what I can do is create a person",
    "start": "1000029",
    "end": "1005550"
  },
  {
    "text": "a storage class that points to a specific volume plug-in in this case I'm",
    "start": "1005550",
    "end": "1010620"
  },
  {
    "text": "going to point to GCE PD and specify the set of parameters to use when that",
    "start": "1010620",
    "end": "1016470"
  },
  {
    "text": "volume is provisioned so think of this as a template for when a new volume needs to be created this is these are",
    "start": "1016470",
    "end": "1023459"
  },
  {
    "text": "the parameters that will be used to create it in this case I created two",
    "start": "1023459",
    "end": "1028500"
  },
  {
    "text": "sets of storage classes one that I'm going to call slow and one that I'm going to call fast you can call them",
    "start": "1028500",
    "end": "1034079"
  },
  {
    "text": "whatever you want for me slow is something that's going to translate into",
    "start": "1034079",
    "end": "1039298"
  },
  {
    "text": "a standard GC persistent disk and a fast is going to be a SSD GC persistent disk",
    "start": "1039299",
    "end": "1046880"
  },
  {
    "text": "now the cool thing is that you could create the same exact storage classes on",
    "start": "1046880",
    "end": "1053760"
  },
  {
    "text": "your own cluster which may be running on Prem and has a completely different storage system the names of the storage",
    "start": "1053760",
    "end": "1060179"
  },
  {
    "text": "classes could still be slow and fast but you can point to your own volume plug-in and set some other opaque parameters",
    "start": "1060179",
    "end": "1067530"
  },
  {
    "text": "these parameters are opaque to kubernetes so you can pass through whatever makes sense for that particular volume",
    "start": "1067530",
    "end": "1074340"
  },
  {
    "text": "subsystem this is basically the way that we got around the fact that you know",
    "start": "1074340",
    "end": "1079440"
  },
  {
    "text": "these different storage systems are going to have so many different knobs and things that we can't necessarily",
    "start": "1079440",
    "end": "1085730"
  },
  {
    "text": "encapsulate everything into the kubernetes api so the way that we got around it is these opaque parameters",
    "start": "1085730",
    "end": "1092090"
  },
  {
    "text": "kubernetes doesn't care what you put in there only the volume plug-in cares about it and the cluster administrator",
    "start": "1092090",
    "end": "1098580"
  },
  {
    "text": "creates these storage class objects so the cluster administrator knows the type of storage that's running on there and",
    "start": "1098580",
    "end": "1104280"
  },
  {
    "text": "they can fill in the parameters with whatever makes sense for their system and now we're decoupling this the",
    "start": "1104280",
    "end": "1110730"
  },
  {
    "text": "underlying storage from the consumption of storage so now that we've made a",
    "start": "1110730",
    "end": "1115800"
  },
  {
    "text": "storage class to allow the creation of volumes dynamically the next question is",
    "start": "1115800",
    "end": "1122190"
  },
  {
    "text": "well how do you actually create a new volume so as an end user very little",
    "start": "1122190",
    "end": "1128040"
  },
  {
    "text": "changes you still request storage in the same way you create a claim a persistent",
    "start": "1128040",
    "end": "1134490"
  },
  {
    "text": "volume claim to a generic request for storage in this case the only thing",
    "start": "1134490",
    "end": "1140220"
  },
  {
    "text": "that's different from before is that I specified the storage class that I want in this case I want fast storage as an",
    "start": "1140220",
    "end": "1147270"
  },
  {
    "text": "end user I don't care whether it's SSD or not SSD or certain number of i/o ops",
    "start": "1147270",
    "end": "1152670"
  },
  {
    "text": "or whatever I just go you know look at the storage classes that exist on this",
    "start": "1152670",
    "end": "1157890"
  },
  {
    "text": "cluster and specify one to use and once",
    "start": "1157890",
    "end": "1164580"
  },
  {
    "text": "that store a persistent volume claim is used what kubernetes will do is it'll go out look at the storage class object",
    "start": "1164580",
    "end": "1171090"
  },
  {
    "text": "call out to the volume plug-in that the storage class references to create a new",
    "start": "1171090",
    "end": "1177480"
  },
  {
    "text": "volume once a new volumes created kubernetes will automatically create a persistent volume API object to",
    "start": "1177480",
    "end": "1184800"
  },
  {
    "text": "represent that new volume and then it'll bind the persistent volume claim with a persistent volume so everything is",
    "start": "1184800",
    "end": "1190740"
  },
  {
    "text": "automated and then you can reference the",
    "start": "1190740",
    "end": "1196850"
  },
  {
    "text": "volume in exactly the same way as before a persistent volume claim in your pod",
    "start": "1196850",
    "end": "1202020"
  },
  {
    "text": "and again this is portable across clusters",
    "start": "1202020",
    "end": "1208510"
  },
  {
    "text": "now you can also as a cluster administrator choose to mark a specific",
    "start": "1208540",
    "end": "1213650"
  },
  {
    "text": "storage class as default if you mark a storage class as default what this",
    "start": "1213650",
    "end": "1219620"
  },
  {
    "text": "allows is the end user no longer has to specify a storage class in their",
    "start": "1219620",
    "end": "1226130"
  },
  {
    "text": "persistent volume claim object if even if they don't specify a storage class kubernetes will automatically use the",
    "start": "1226130",
    "end": "1233390"
  },
  {
    "text": "storage class that the cluster administrator marked as default to do dynamic provisioning so it's a way for",
    "start": "1233390",
    "end": "1239210"
  },
  {
    "text": "the cluster administrator to basically enable dynamic provisioning for everybody on their cluster and if you",
    "start": "1239210",
    "end": "1249680"
  },
  {
    "text": "use AWS using cube up.we pre-install as",
    "start": "1249680",
    "end": "1255500"
  },
  {
    "text": "a default storage class for you that creates EBS volumes and on Google Cloud if you use GCE or gke we will have a",
    "start": "1255500",
    "end": "1264290"
  },
  {
    "text": "default storage class as well that will provision GC persistent disks and we have a default storage class for",
    "start": "1264290",
    "end": "1270200"
  },
  {
    "text": "OpenStack that creates cinder volumes as well alright so that was remote storage",
    "start": "1270200",
    "end": "1277880"
  },
  {
    "text": "and we talked about how to use remote storage don't reference it directly in",
    "start": "1277880",
    "end": "1283250"
  },
  {
    "text": "your pod use a PvP VC so that you maintain workload portability next we're",
    "start": "1283250",
    "end": "1289280"
  },
  {
    "text": "going to talk very briefly about host path volumes host path volumes are a way to be able to expose a directory on your",
    "start": "1289280",
    "end": "1297500"
  },
  {
    "text": "host machine directly into the pod but",
    "start": "1297500",
    "end": "1302960"
  },
  {
    "text": "there's problems with this if you expose a directory from your host machine what happens if your workload is killed and",
    "start": "1302960",
    "end": "1308090"
  },
  {
    "text": "moved to a different node if your application expects that data to be persisted the data just changed",
    "start": "1308090",
    "end": "1314840"
  },
  {
    "text": "underneath the application so our recommendation is not to use host path",
    "start": "1314840",
    "end": "1320630"
  },
  {
    "text": "unless you have a very specific need and you understand what it is that you're doing some people use host paths along",
    "start": "1320630",
    "end": "1326900"
  },
  {
    "text": "with things like node affinity to try to pin a pod to a specific node but you",
    "start": "1326900",
    "end": "1334340"
  },
  {
    "text": "know take a look at your use cases and see if it makes sense and think twice before using host path",
    "start": "1334340",
    "end": "1339980"
  },
  {
    "text": "but this leads into local persistent volumes local persistent volumes are a",
    "start": "1339980",
    "end": "1347190"
  },
  {
    "text": "way to expose either block or file from the local machine as a persistent volume",
    "start": "1347190",
    "end": "1352919"
  },
  {
    "text": "so what we recognized was some people were using host paths to try to expose underlying storage from a host machine",
    "start": "1352919",
    "end": "1360240"
  },
  {
    "text": "in a persistent way but there were tons of challenges with doing that so what we",
    "start": "1360240",
    "end": "1365490"
  },
  {
    "text": "did is create a new volume plug-in called the local persistent volume and what it does is allows local storage to",
    "start": "1365490",
    "end": "1374640"
  },
  {
    "text": "be used as a persistent volume persistent volume claim it's referenced in exactly the same way that you saw the",
    "start": "1374640",
    "end": "1381090"
  },
  {
    "text": "GCE PD examples that I've been showing you the only difference is that the PV object would reference a local storage",
    "start": "1381090",
    "end": "1387899"
  },
  {
    "text": "volume the cool thing about this is that kubernetes is aware that local storage",
    "start": "1387899",
    "end": "1394830"
  },
  {
    "text": "volumes are special so it takes care of data gravity for you what that means is that once your workload is created and",
    "start": "1394830",
    "end": "1402090"
  },
  {
    "text": "it's using a local persistent storage volume if it needs to be moved",
    "start": "1402090",
    "end": "1407809"
  },
  {
    "text": "kubernetes is not going to move it anywhere else it knows that this workload can only be fulfilled from this",
    "start": "1407809",
    "end": "1413669"
  },
  {
    "text": "given node that comes with drawbacks right if you're unable to move your",
    "start": "1413669",
    "end": "1418980"
  },
  {
    "text": "workload you have reduced possibly reduced availability and reduced",
    "start": "1418980",
    "end": "1424760"
  },
  {
    "text": "durability so if you're going to use local storage make sure you understand",
    "start": "1424760",
    "end": "1429929"
  },
  {
    "text": "what the purpose is there's primarily two purposes as I understand it one is for building higher-level distributed",
    "start": "1429929",
    "end": "1437250"
  },
  {
    "text": "storage systems on top of kubernetes right you can to aggregate all the",
    "start": "1437250",
    "end": "1442529"
  },
  {
    "text": "storage available from each one of the nodes use local persistent volume to",
    "start": "1442529",
    "end": "1447659"
  },
  {
    "text": "expose it to an application that then aggregates it and exposes it as network attached storage to the rest of the",
    "start": "1447659",
    "end": "1453450"
  },
  {
    "text": "cluster another use case is high-performance caching so if you have some very high performance disks that",
    "start": "1453450",
    "end": "1461760"
  },
  {
    "text": "are attached to specific machines and you want to use those as a caching layer",
    "start": "1461760",
    "end": "1466970"
  },
  {
    "text": "that's a perfectly valid use case michelle is giving a talk right after",
    "start": "1466970",
    "end": "1472090"
  },
  {
    "text": "this in this room talking about local persistent volumes in depth and she'll do it far more justice than I can next",
    "start": "1472090",
    "end": "1482890"
  },
  {
    "text": "up is let's talk about volume plugins in general so the volume plugins that I've talked about so far",
    "start": "1482890",
    "end": "1488830"
  },
  {
    "text": "GC persistent disks Amazon EBS volumes all of them are entry what that means is",
    "start": "1488830",
    "end": "1496060"
  },
  {
    "text": "that the code for these volume plugins actually resides in the kubernetes code",
    "start": "1496060",
    "end": "1501220"
  },
  {
    "text": "base and so all the kubernetes components are built and compiled with these volume plugins and shipped with",
    "start": "1501220",
    "end": "1507520"
  },
  {
    "text": "these volume plugins the reason we did that initially was to allow us to move",
    "start": "1507520",
    "end": "1512650"
  },
  {
    "text": "very quickly we didn't need to expose an API for volume plugins so we could",
    "start": "1512650",
    "end": "1519070"
  },
  {
    "text": "modify that API because it was internal so anytime we needed to change it we would modify the API internally and",
    "start": "1519070",
    "end": "1524920"
  },
  {
    "text": "update the volume plugins because they were also entry and whenever we ship a version of kubernetes everything was",
    "start": "1524920",
    "end": "1530860"
  },
  {
    "text": "compatible but there are drawbacks to entry volume plugins actually before I",
    "start": "1530860",
    "end": "1537790"
  },
  {
    "text": "talk about the drawbacks let's discuss why they're awesome right kubernetes volume plugins are allow you to do",
    "start": "1537790",
    "end": "1545080"
  },
  {
    "text": "dynamic provisioning which no other cluster orchestration system allows you to do they automatically attach and",
    "start": "1545080",
    "end": "1550090"
  },
  {
    "text": "mount your workload wherever it exists and they provide a powerful abstraction",
    "start": "1550090",
    "end": "1557610"
  },
  {
    "text": "that'll decouple your storage from your",
    "start": "1557610",
    "end": "1563020"
  },
  {
    "text": "from your workload that's consuming that storage so the volume plugins are awesome but they have these drawbacks",
    "start": "1563020",
    "end": "1568690"
  },
  {
    "text": "where the there they're built into",
    "start": "1568690",
    "end": "1573790"
  },
  {
    "text": "built-in tree so the drawbacks are that they're painful for kubernetes",
    "start": "1573790",
    "end": "1579820"
  },
  {
    "text": "developers so we have to maintain these volume plugins and in a lot of cases we don't have the resources to be able to",
    "start": "1579820",
    "end": "1586240"
  },
  {
    "text": "actually test and maintain them they may have dependencies which we don't where",
    "start": "1586240",
    "end": "1591280"
  },
  {
    "text": "we don't have so we can't properly actually test these volume plugins in",
    "start": "1591280",
    "end": "1598570"
  },
  {
    "text": "addition any bugs in these volume plugins can act",
    "start": "1598570",
    "end": "1603950"
  },
  {
    "text": "we affect core kubernetes components so you can cause cubelet to crash if there's a bug in the volume plug-in and",
    "start": "1603950",
    "end": "1611240"
  },
  {
    "text": "then because these volume plugins are built into kubernetes it means that they implicitly get all the permissions that",
    "start": "1611240",
    "end": "1617810"
  },
  {
    "text": "we give to the core kubernetes components which is not necessarily something that we want to do from a security perspective it's not just",
    "start": "1617810",
    "end": "1625250"
  },
  {
    "text": "painful for kubernetes developers to have entry volume plugins it's also painful for the storage vendors who want",
    "start": "1625250",
    "end": "1631160"
  },
  {
    "text": "to expose their volume plugins in kubernetes it means that they have to be aligned with the kubernetes release",
    "start": "1631160",
    "end": "1636830"
  },
  {
    "text": "schedule so for for things like patches they have to check into the main",
    "start": "1636830",
    "end": "1642470"
  },
  {
    "text": "kubernetes repository and cherry-pick things back to the appropriate kubernetes releases which can be",
    "start": "1642470",
    "end": "1648230"
  },
  {
    "text": "extremely painful and probably not at the pace that they want to move and it",
    "start": "1648230",
    "end": "1653690"
  },
  {
    "text": "also forces them to open-source their code whether or not they want to open-source it there are some volume",
    "start": "1653690",
    "end": "1659930"
  },
  {
    "text": "vendors who would choose not to do it if they had the option and so this is where out of tree volume plugins come in so",
    "start": "1659930",
    "end": "1667400"
  },
  {
    "text": "you guys have probably heard of container storage interface it went to beta in 1.10 which was the release of",
    "start": "1667400",
    "end": "1675500"
  },
  {
    "text": "kubernetes last quarter the idea with CSI is that it makes the volume layer",
    "start": "1675500",
    "end": "1680780"
  },
  {
    "text": "truly extensible it allows volume plugins to be deployed on top of kubernetes as just any other workload",
    "start": "1680780",
    "end": "1687920"
  },
  {
    "text": "that can be containerized and deployed using cube cuttle create a chef samyama",
    "start": "1687920",
    "end": "1693550"
  },
  {
    "text": "and the benefit of this is that the",
    "start": "1693550",
    "end": "1698660"
  },
  {
    "text": "volume plugins are now completely decoupled from the core kubernetes codebase there's going to be a talk this",
    "start": "1698660",
    "end": "1705680"
  },
  {
    "text": "afternoon by GU who is one of the co-authors of CSI along with me so if",
    "start": "1705680",
    "end": "1710870"
  },
  {
    "text": "you're interested in learning more about it please attend that the other out of",
    "start": "1710870",
    "end": "1717560"
  },
  {
    "text": "tree volume plug-in mechanism is called flex volumes flex volumes was an earlier attempt by six storage to do out of tree",
    "start": "1717560",
    "end": "1725000"
  },
  {
    "text": "volume plugins the big difference between flex and CSI is that flex is an",
    "start": "1725000",
    "end": "1730160"
  },
  {
    "text": "exec base model meaning it whenever we need to do a mount operation and attach",
    "start": "1730160",
    "end": "1736130"
  },
  {
    "text": "operation kubernetes will call out to a flex binary or script that exists on the",
    "start": "1736130",
    "end": "1743150"
  },
  {
    "text": "machine the drawback of this approach is that the binaries for the driver are",
    "start": "1743150",
    "end": "1748610"
  },
  {
    "text": "files that must be copied to the node machines as well as the master machines",
    "start": "1748610",
    "end": "1754130"
  },
  {
    "text": "and that just means that deployment of these flex volume drivers is much much",
    "start": "1754130",
    "end": "1759740"
  },
  {
    "text": "more difficult you actually have to have access to be able to copy these volume plugins instead of being able to deploy",
    "start": "1759740",
    "end": "1765470"
  },
  {
    "text": "a kubernetes workload and it also means that for a set of clusters that don't",
    "start": "1765470",
    "end": "1770720"
  },
  {
    "text": "give access to the master so for example on gke we prevent users from having",
    "start": "1770720",
    "end": "1776780"
  },
  {
    "text": "access to the master Google manages the masters for you it means you cannot install flex volume drivers onto the",
    "start": "1776780",
    "end": "1783650"
  },
  {
    "text": "master so you can't do things like attach so flex is limited but we're",
    "start": "1783650",
    "end": "1789890"
  },
  {
    "text": "going to continue to support it because there are a set of drivers that were written for flex the idea is that we'll",
    "start": "1789890",
    "end": "1795860"
  },
  {
    "text": "keep it in maintenance mode and invest in the future with CSI so CSI is API is",
    "start": "1795860",
    "end": "1801920"
  },
  {
    "text": "going to continue to it expand and flex",
    "start": "1801920",
    "end": "1807110"
  },
  {
    "text": "is going to be maintained as is and that's it so if you have any questions",
    "start": "1807110",
    "end": "1814670"
  },
  {
    "text": "please or if you want to get involved please join the kubernetes storage",
    "start": "1814670",
    "end": "1821930"
  },
  {
    "text": "special interest group for storage we have meetings every two weeks if you go to that link you can find details about",
    "start": "1821930",
    "end": "1829880"
  },
  {
    "text": "how to join we have a mailing list if you have any questions you can reach out and reach out to us there there's also a",
    "start": "1829880",
    "end": "1836300"
  },
  {
    "text": "slack channel for the bi-weekly meetings there's an agenda doc that is attached",
    "start": "1836300",
    "end": "1841430"
  },
  {
    "text": "to the meeting invite feel free to edit that if there is a bug that you have that's not getting traction if there's a",
    "start": "1841430",
    "end": "1848750"
  },
  {
    "text": "design that you'd like to discuss just add an item into that agenda dock and we'll find time in the next meeting to",
    "start": "1848750",
    "end": "1853790"
  },
  {
    "text": "discuss it and if we don't we'll just move it along to the next next meeting",
    "start": "1853790",
    "end": "1859730"
  },
  {
    "text": "and with that I'll open it up to questions yes",
    "start": "1859730",
    "end": "1868390"
  },
  {
    "text": "yeah excellent question so the question is given the drawbacks of entry volume",
    "start": "1874450",
    "end": "1879680"
  },
  {
    "text": "plugins is there any plan to migrate the entry volume plugins to si si the answer to that is yes the challenge is that the",
    "start": "1879680",
    "end": "1889100"
  },
  {
    "text": "kubernetes api has a very strict deprecation policy so we can't deprecated the the the the api objects",
    "start": "1889100",
    "end": "1899720"
  },
  {
    "text": "that we expose like GCE persistent disks Amazon EBS we can't deprecated those very easily so the plan is not to",
    "start": "1899720",
    "end": "1906290"
  },
  {
    "text": "actually deprecated the api but instead modified the internal logic to proxy",
    "start": "1906290",
    "end": "1911450"
  },
  {
    "text": "through to si si the design for that is underway right now and probably q3 q4 we're gonna start",
    "start": "1911450",
    "end": "1918500"
  },
  {
    "text": "implementing that ideally once this is complete the end users shouldn't notice that it happened they're still going to",
    "start": "1918500",
    "end": "1924860"
  },
  {
    "text": "consume these volume plugins in exactly the same way using the same API s but",
    "start": "1924860",
    "end": "1930020"
  },
  {
    "text": "under the covers we'll have those requests fulfilled by the NEX ternal si si driver instead of the core kubernetes",
    "start": "1930020",
    "end": "1936080"
  },
  {
    "text": "binaries yes",
    "start": "1936080",
    "end": "1942490"
  },
  {
    "text": "for CSI sure so the question is does the",
    "start": "1946340",
    "end": "1951810"
  },
  {
    "text": "abstraction of CSI being out of tree affect performance latency i/o things",
    "start": "1951810",
    "end": "1957630"
  },
  {
    "text": "like that the answer for that is no because kubernetes is not in the data",
    "start": "1957630",
    "end": "1963210"
  },
  {
    "text": "path kubernetes is strictly in the control path so the responsibility of kubernetes is to set up a volume and",
    "start": "1963210",
    "end": "1970290"
  },
  {
    "text": "expose it either as file or block into the container and then get out of the",
    "start": "1970290",
    "end": "1976980"
  },
  {
    "text": "way and so when you read or write from a file system you're writing through the kernel to the underlying storage system",
    "start": "1976980",
    "end": "1986750"
  },
  {
    "text": "any other questions yes no mention of",
    "start": "1988370",
    "end": "1999450"
  },
  {
    "text": "OpenStack Swift API I think what we tried to do with with I'm not super",
    "start": "1999450",
    "end": "2005840"
  },
  {
    "text": "familiar with OpenStack Swift what we try to do with kubernetes is evolve an API that makes sense with kubernetes so",
    "start": "2005840",
    "end": "2013730"
  },
  {
    "text": "we started from the user perspective first the idea was to try to create",
    "start": "2013730",
    "end": "2019610"
  },
  {
    "text": "something that would enable workload portability and things like dynamic provisioning and so we wanted to start",
    "start": "2019610",
    "end": "2026600"
  },
  {
    "text": "with something that actually makes sense for kubernetes so we started with an entry volume plugins and once we got",
    "start": "2026600",
    "end": "2032330"
  },
  {
    "text": "that to a place that we're comfortable with and we see that it's working we promoted that to an external API that's",
    "start": "2032330",
    "end": "2038690"
  },
  {
    "text": "CSI yes",
    "start": "2038690",
    "end": "2044320"
  },
  {
    "text": "okay sorry can I use packets",
    "start": "2046289",
    "end": "2051598"
  },
  {
    "text": "let's follow up offline I think we're just about out of time thank you very",
    "start": "2062450",
    "end": "2067700"
  },
  {
    "text": "much if you have any questions feel free to reach out to me [Applause]",
    "start": "2067700",
    "end": "2077158"
  }
]