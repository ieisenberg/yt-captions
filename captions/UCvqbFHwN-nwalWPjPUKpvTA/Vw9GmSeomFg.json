[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "alright alright good afternoon everybody",
    "start": "30",
    "end": "7740"
  },
  {
    "text": "my name is min Han I'm a software engineer at Google and my co-speaker is ping he she's a software engineer I",
    "start": "7740",
    "end": "14610"
  },
  {
    "text": "enjoy it so we're here to talk about pot readiness and part readiness gates and we're here to explore their meanings and",
    "start": "14610",
    "end": "22050"
  },
  {
    "text": "their usages so we have four parts one is the quick recap on PHA status and",
    "start": "22050",
    "end": "28199"
  },
  {
    "text": "also intro to part Ren is gate and a usage at gke and into it so quick recap",
    "start": "28199",
    "end": "38879"
  },
  {
    "start": "37000",
    "end": "37000"
  },
  {
    "text": "so kubernetes api expose reach set of containers status so here's an example of container status here like it has",
    "start": "38879",
    "end": "46200"
  },
  {
    "text": "image IDs like container runtime IDs underneath and explicitly has a",
    "start": "46200",
    "end": "53309"
  },
  {
    "text": "readiness per container and also the state per container and communities also",
    "start": "53309",
    "end": "60180"
  },
  {
    "text": "let users to define liveness and readiness via the form of liveness probe",
    "start": "60180",
    "end": "65518"
  },
  {
    "text": "and readiness probe so each container gets to define okay a library's probe and a readiness broke and cubelet will",
    "start": "65519",
    "end": "72299"
  },
  {
    "text": "execute this probe on the local node and for liveness is basically signals",
    "start": "72299",
    "end": "78479"
  },
  {
    "text": "whether cubelet has to kill the pot and restart it I'll kill the container or you start it and the readiness basically",
    "start": "78479",
    "end": "85020"
  },
  {
    "text": "reflects if the part is ready and also",
    "start": "85020",
    "end": "90270"
  },
  {
    "start": "88000",
    "end": "88000"
  },
  {
    "text": "there's a rich set of pot level status so there are parts scheduled which means",
    "start": "90270",
    "end": "95280"
  },
  {
    "text": "that if the scheduler has already scheduled a pod or initialized means that if there's like all the any",
    "start": "95280",
    "end": "101400"
  },
  {
    "text": "containers in the pot are like actually successfully started and finally its",
    "start": "101400",
    "end": "106530"
  },
  {
    "text": "readiness right whether all the containers are actually ready or not so here's a quick example of pot life cycle",
    "start": "106530",
    "end": "114899"
  },
  {
    "start": "111000",
    "end": "111000"
  },
  {
    "text": "so here is a pod with two containers if no liveness probe is specified then it's",
    "start": "114899",
    "end": "121380"
  },
  {
    "text": "live by default so you can see when the part is started the both containers are",
    "start": "121380",
    "end": "127110"
  },
  {
    "text": "considered alive and container to first become ready and then container one becomes ready later then",
    "start": "127110",
    "end": "134040"
  },
  {
    "text": "the pot becomes ready and they start serving traffic and when the pot is deleted a sick term like Kuebler will",
    "start": "134040",
    "end": "141450"
  },
  {
    "text": "get a signal both containers a sick term signal and then they will gracefully shut down if the container image can",
    "start": "141450",
    "end": "148290"
  },
  {
    "text": "handle it and then when the graceful termination pur is done then it will",
    "start": "148290",
    "end": "154049"
  },
  {
    "text": "Kuebler basically signal is to kill and kill the pod so what does part redness",
    "start": "154049",
    "end": "162510"
  },
  {
    "text": "mean horrendous means that all containers are ready and then the pot is",
    "start": "162510",
    "end": "167700"
  },
  {
    "text": "ready then part is ready to serve traffic and what are the meanings it has so each consumer of part readiness is",
    "start": "167700",
    "end": "176190"
  },
  {
    "start": "173000",
    "end": "173000"
  },
  {
    "text": "actually effectively extending its definition so here we look at workload",
    "start": "176190",
    "end": "181650"
  },
  {
    "text": "and specifically we wanted to take a look at deployment and in deployment you",
    "start": "181650",
    "end": "187140"
  },
  {
    "text": "can specify the rollout strategy where you can say hey what's the max surge and",
    "start": "187140",
    "end": "192420"
  },
  {
    "text": "Max unavailable that basically configure how fast you wanted to like proceed the",
    "start": "192420",
    "end": "197940"
  },
  {
    "text": "rollout and what happened underneath is that the deployment controller will",
    "start": "197940",
    "end": "204239"
  },
  {
    "start": "200000",
    "end": "200000"
  },
  {
    "text": "actually control like valuable in in one case of a rolling update it's gonna be",
    "start": "204239",
    "end": "209609"
  },
  {
    "text": "juggling between two replicas set and in this example it's in the middle of roll",
    "start": "209609",
    "end": "216450"
  },
  {
    "text": "out and you can see generation 1 replica set has replicas 5 and generation to replicate has replicas 5 that means you",
    "start": "216450",
    "end": "223799"
  },
  {
    "text": "have we have five old parts and five new parts so here's a typical workflow of",
    "start": "223799",
    "end": "229620"
  },
  {
    "text": "the rolling update you can see part one's gets created and part one gets",
    "start": "229620",
    "end": "235709"
  },
  {
    "text": "scheduled and cubelet gets Kuebler watches the pod that is scheduled on its",
    "start": "235709",
    "end": "240750"
  },
  {
    "text": "own and cubelet runs the pod in and start a part in to onto the container",
    "start": "240750",
    "end": "245790"
  },
  {
    "text": "runtime and container under reported success then cubelet says the part is ready and when the part becomes ready",
    "start": "245790",
    "end": "253139"
  },
  {
    "text": "and cute deployment controller observe the pot readiness via like replica set",
    "start": "253139",
    "end": "260130"
  },
  {
    "text": "and then it makes a decision to say hey it's it's time for me based on the deployment inspect the rollout strategy",
    "start": "260130",
    "end": "267780"
  },
  {
    "text": "whether I should proceed to the next pod and in this case it says okay then like",
    "start": "267780",
    "end": "274110"
  },
  {
    "text": "the part one is ready then I should proceed to the next one which is part two and then part two go through the",
    "start": "274110",
    "end": "279840"
  },
  {
    "text": "same cycle as you can see part readiness is a core signal for deployment",
    "start": "279840",
    "end": "285900"
  },
  {
    "text": "decision-making well similarly service",
    "start": "285900",
    "end": "291630"
  },
  {
    "start": "289000",
    "end": "289000"
  },
  {
    "text": "is also a consumer of part readiness and and pair with sickness service is the",
    "start": "291630",
    "end": "298409"
  },
  {
    "text": "endpoints object and the endpoints object contains all the end points behind the service and for all the end",
    "start": "298409",
    "end": "304979"
  },
  {
    "text": "points for all the parts that are ready it should be contained into in the in",
    "start": "304979",
    "end": "311550"
  },
  {
    "text": "this end points object so this is a typical endpoint update flow so when the",
    "start": "311550",
    "end": "318840"
  },
  {
    "text": "service is created the endpoint controller is already automatically creating the corresponding endpoint",
    "start": "318840",
    "end": "324090"
  },
  {
    "text": "object so when the service is created the end points already exist the part gets started Hawk gets scheduled then",
    "start": "324090",
    "end": "330509"
  },
  {
    "text": "cubelets sees it and cubelet starts the pod and reports the part ready when the",
    "start": "330509",
    "end": "337139"
  },
  {
    "text": "container runtime everything is in in shape or the like readiness for reporting ready and then endpoints",
    "start": "337139",
    "end": "345389"
  },
  {
    "text": "controller are watching all the pods and he sees this new part belongs to the service has become ready then the",
    "start": "345389",
    "end": "353219"
  },
  {
    "text": "endpoint controller updates the endpoint object and the end point once the",
    "start": "353219",
    "end": "358440"
  },
  {
    "text": "endpoint object gets updated it's reflected this new endpoint is ready in the endpoints object itself and the",
    "start": "358440",
    "end": "367020"
  },
  {
    "text": "endpoints object will be distributed to all the queue proxies and the queue proxies will further implement the",
    "start": "367020",
    "end": "373259"
  },
  {
    "text": "actual load balancing mechanism underneath is either iptables or IV vs or EVP F or whatever like queue proxy",
    "start": "373259",
    "end": "380610"
  },
  {
    "text": "you use and then finally the endpoint is program so you can see the color coding",
    "start": "380610",
    "end": "387960"
  },
  {
    "text": "the blue states means the outer state the green state is the actual intended state in",
    "start": "387960",
    "end": "394620"
  },
  {
    "text": "various dimensions so if we look closer",
    "start": "394620",
    "end": "400580"
  },
  {
    "text": "the endpoint status is actually not feed back into like anywhere so it's just",
    "start": "400580",
    "end": "406380"
  },
  {
    "text": "program it's like sort of like a best effort and obviously the end point like",
    "start": "406380",
    "end": "412830"
  },
  {
    "text": "whether the end point is program or not does not reflect back into the pot readiness and you can see there's a gap",
    "start": "412830",
    "end": "419970"
  },
  {
    "text": "there is actually a programming latency from like the pot becomes ready and the",
    "start": "419970",
    "end": "426300"
  },
  {
    "text": "endpoint is actually getting reflected in IP tables or IP vs and also combined",
    "start": "426300",
    "end": "433740"
  },
  {
    "text": "with the fact that it's a cluster it has many nodes and then each no you have to",
    "start": "433740",
    "end": "438840"
  },
  {
    "text": "program each no to actually reflect it so so there's a programming latency",
    "start": "438840",
    "end": "443940"
  },
  {
    "text": "between the pot becomes ready and it's reflected globally in the cluster so so",
    "start": "443940",
    "end": "451620"
  },
  {
    "start": "449000",
    "end": "449000"
  },
  {
    "text": "what is part readiness it's a core signal to workloads",
    "start": "451620",
    "end": "456720"
  },
  {
    "text": "it's either kubernetes native workloads third party workloads operators like",
    "start": "456720",
    "end": "462060"
  },
  {
    "text": "they all look at pot readiness and also it's also a key like signal to",
    "start": "462060",
    "end": "469800"
  },
  {
    "text": "networking like abstraction like services ingress because ingress",
    "start": "469800",
    "end": "475170"
  },
  {
    "text": "reference services so inherently rely on pods and also network policy although",
    "start": "475170",
    "end": "481980"
  },
  {
    "text": "never policy does not rely on heart readiness but it needs to be programmed",
    "start": "481980",
    "end": "487440"
  },
  {
    "text": "so effectively part readiness is the round oval point of like the whole",
    "start": "487440",
    "end": "494130"
  },
  {
    "text": "communities API ecosystem so actually",
    "start": "494130",
    "end": "499980"
  },
  {
    "start": "498000",
    "end": "498000"
  },
  {
    "text": "does these like do these API is work together right intuitively they should",
    "start": "499980",
    "end": "505230"
  },
  {
    "text": "they should work together if if they don't like why why do people actually a",
    "start": "505230",
    "end": "511050"
  },
  {
    "text": "table like kubernetes why do we have such a big cube card right so the answer",
    "start": "511050",
    "end": "516090"
  },
  {
    "text": "is yes but not without caveats so if you",
    "start": "516090",
    "end": "521550"
  },
  {
    "text": "if we look closer workloads and pods have a closed feedback loop",
    "start": "521550",
    "end": "528090"
  },
  {
    "text": "that means what close they managed the pods and also observed the pod they they",
    "start": "528090",
    "end": "533430"
  },
  {
    "text": "rely on the pot readiness for their internals like either for rolling updates or reacting to changes like for",
    "start": "533430",
    "end": "540720"
  },
  {
    "text": "instance the note goes down and then you wanted to maintain the certain healthy the certain ready replicas available",
    "start": "540720",
    "end": "547860"
  },
  {
    "text": "replicas stand you were gonna schedule more parts which runs elsewhere right and on the other side the the",
    "start": "547860",
    "end": "556640"
  },
  {
    "text": "relationship between parts and the networking abstractions are actually one",
    "start": "556640",
    "end": "562320"
  },
  {
    "text": "one directional right when so a single directional relationship so so if let's",
    "start": "562320",
    "end": "569520"
  },
  {
    "text": "say if the end point is program there's nothing to feedback it back into the pod or whether the network policy is",
    "start": "569520",
    "end": "575670"
  },
  {
    "text": "actually enforced there's no nothing you can feed back into it's sort of a best-effort so why this hasn't been a",
    "start": "575670",
    "end": "585210"
  },
  {
    "text": "big problem so far why does one directional like a relationship between",
    "start": "585210",
    "end": "592140"
  },
  {
    "text": "the parts and the networking aspect and then there's and then the workload",
    "start": "592140",
    "end": "597410"
  },
  {
    "text": "effectively ignores the the networking abstractions so this is mostly thanks to",
    "start": "597410",
    "end": "604500"
  },
  {
    "text": "the robust implementation of Q proxies and the underlying API machinery so from",
    "start": "604500",
    "end": "610050"
  },
  {
    "text": "what we have observed is that in a like like normal cluster not under load it's",
    "start": "610050",
    "end": "616920"
  },
  {
    "text": "pretty reliable and fast to update a single end point usually it's less than",
    "start": "616920",
    "end": "621990"
  },
  {
    "text": "five seconds and the new end point will get reflected go blow globally in the cluster and not much people not much",
    "start": "621990",
    "end": "629339"
  },
  {
    "text": "user acumen a user has like complain about it and say hey we have like the",
    "start": "629339",
    "end": "634830"
  },
  {
    "text": "end point update is too slow or something like that and it's very unlikely to hit the corner case",
    "start": "634830",
    "end": "641100"
  },
  {
    "text": "something like my deployment is done and I have rolled out all my new pause but",
    "start": "641100",
    "end": "646950"
  },
  {
    "text": "my service is still pointing to my ol pods right this is pretty we're like",
    "start": "646950",
    "end": "653070"
  },
  {
    "text": "like it's like very small cases like this so here comes the paw trainees gate",
    "start": "653070",
    "end": "661500"
  },
  {
    "start": "661000",
    "end": "661000"
  },
  {
    "text": "so cubelet dictates part readiness so",
    "start": "661500",
    "end": "666760"
  },
  {
    "text": "far readiness probe only executes on the node and there's no external feedback",
    "start": "666760",
    "end": "672490"
  },
  {
    "text": "allowed to influence the pot readiness so what if Cuba is not capable of",
    "start": "672490",
    "end": "680550"
  },
  {
    "text": "determine whether a pot is ready or not right and secondly what if we want the",
    "start": "680550",
    "end": "689890"
  },
  {
    "text": "workloads to be network aware meaning that let's say when I proceed the road",
    "start": "689890",
    "end": "696520"
  },
  {
    "text": "out I want to make sure that everything is ready when what I mean everything's ready is that endpoint is ready Network",
    "start": "696520",
    "end": "704410"
  },
  {
    "text": "policy is ready everything like everything related is ready right before I proceed not only what cubelet tells me",
    "start": "704410",
    "end": "712180"
  },
  {
    "text": "is ready so and finally there are more there are more sophisticated service",
    "start": "712180",
    "end": "718960"
  },
  {
    "text": "health management solutions which incorporate more application level metrics like like latencies and things",
    "start": "718960",
    "end": "726700"
  },
  {
    "text": "like that how can they better integrate with kubernetes internals so can we do",
    "start": "726700",
    "end": "732730"
  },
  {
    "text": "something like part ready plus plus and",
    "start": "732730",
    "end": "738360"
  },
  {
    "start": "738000",
    "end": "738000"
  },
  {
    "text": "when we look at like when we are trying to solve this problem and we actually",
    "start": "739140",
    "end": "745300"
  },
  {
    "text": "face a lot of constraints so the constraints are mostly summarized to backward compatibility backward",
    "start": "745300",
    "end": "752230"
  },
  {
    "text": "compatibility and backward compatibility so kubernetes api is have been well",
    "start": "752230",
    "end": "758890"
  },
  {
    "text": "adopted and it's many people are running in production and currents although",
    "start": "758890",
    "end": "764710"
  },
  {
    "text": "current system is not perfect but it works right it works most of the time so how can we introduce a new part ready",
    "start": "764710",
    "end": "772510"
  },
  {
    "text": "plus plus mechanism without breaking the backward compatibility so some of the",
    "start": "772510",
    "end": "778720"
  },
  {
    "text": "concerns are like how to make it work with existing part specifications how to",
    "start": "778720",
    "end": "784870"
  },
  {
    "text": "make it work with existing cubelet control flows and I don't want to inject overly complex Kuebler control flows so",
    "start": "784870",
    "end": "792910"
  },
  {
    "text": "that because Kuebler runs there where it should be reliable and yeah you",
    "start": "792910",
    "end": "797959"
  },
  {
    "text": "should just work and also how can the mechanism work with existing workflows",
    "start": "797959",
    "end": "804680"
  },
  {
    "text": "right there are many different workflows there are replicas that they were like kubernetes natives native ones",
    "start": "804680",
    "end": "810740"
  },
  {
    "text": "deployments they've all said and they are user-defined controls how can we",
    "start": "810740",
    "end": "816910"
  },
  {
    "text": "like make this change without changing all these controllers and finally like",
    "start": "816910",
    "end": "823970"
  },
  {
    "text": "how to make it like transparent to the user so that the user is not aware of",
    "start": "823970",
    "end": "829600"
  },
  {
    "text": "this new change and the part rating scale was proposed and implemented and",
    "start": "829600",
    "end": "837259"
  },
  {
    "text": "it's now g8 in since one the company is 1.14 and here's an example of the pot",
    "start": "837259",
    "end": "845420"
  },
  {
    "text": "renegade like configuration it's it has two parts one is in the pots back one",
    "start": "845420",
    "end": "852800"
  },
  {
    "text": "can specify a list of part readiness Kate and the pot renegades are each part",
    "start": "852800",
    "end": "859819"
  },
  {
    "text": "renegade reference a pod condition and in the past status the pod conditions",
    "start": "859819",
    "end": "868040"
  },
  {
    "text": "are in like indicating whether the readiness gate is actually ready or not",
    "start": "868040",
    "end": "874639"
  },
  {
    "text": "ready in this particular case although I do not like basically let's assume all the containers are ready and you can see",
    "start": "874639",
    "end": "883160"
  },
  {
    "text": "that readiness gate one is false hired the status is false and readiness",
    "start": "883160",
    "end": "888319"
  },
  {
    "text": "KB is true so that means readiness K a is not ready and that means the whole",
    "start": "888319",
    "end": "894709"
  },
  {
    "text": "part is not ready so we effectively change the pot life cycle into this graph right you can see",
    "start": "894709",
    "end": "903980"
  },
  {
    "start": "898000",
    "end": "898000"
  },
  {
    "text": "when the pot starts up everything is nothing ready nothing's ready",
    "start": "903980",
    "end": "910699"
  },
  {
    "text": "so then even though a container one and container to both up both have become",
    "start": "910699",
    "end": "917240"
  },
  {
    "text": "ready pot is still not ready because it's waiting for readiness gate right so",
    "start": "917240",
    "end": "924829"
  },
  {
    "text": "only when everything is ready the pot is considered ready and then it",
    "start": "924829",
    "end": "930260"
  },
  {
    "text": "starts serving traffic and yeah and then the rest of the the lifecycle is the",
    "start": "930260",
    "end": "937160"
  },
  {
    "text": "same so what hot ready skate container",
    "start": "937160",
    "end": "942770"
  },
  {
    "start": "939000",
    "end": "939000"
  },
  {
    "text": "pot readiness means all containers are running all containers are ready and all",
    "start": "942770",
    "end": "949280"
  },
  {
    "text": "part readiness gates conditions are true",
    "start": "949280",
    "end": "955030"
  },
  {
    "text": "so in order to capture the existing part readiness which means like all",
    "start": "955060",
    "end": "962240"
  },
  {
    "text": "containers are running and ready we introduce a new part condition which is",
    "start": "962240",
    "end": "968600"
  },
  {
    "text": "which is called containers ready right so when the containers are ready then it preserves the old definition of par",
    "start": "968600",
    "end": "975830"
  },
  {
    "text": "readiness which is all containers already so whoever like wants to consume",
    "start": "975830",
    "end": "981130"
  },
  {
    "text": "like this can ya can switch to consume then the containers ready condition well",
    "start": "981130",
    "end": "990050"
  },
  {
    "start": "989000",
    "end": "989000"
  },
  {
    "text": "so far we we talked about the API how do we use it like with a seamless user",
    "start": "990050",
    "end": "996530"
  },
  {
    "text": "experience so there are two parts one is how do you inject the readiness gate as",
    "start": "996530",
    "end": "1002320"
  },
  {
    "text": "you can see it's a part of the pots back well there are already pretty mature",
    "start": "1002320",
    "end": "1007630"
  },
  {
    "text": "mechanism to inject stuff into like any object in kubernetes that is web hooks",
    "start": "1007630",
    "end": "1013450"
  },
  {
    "text": "so if you have some kind of infrastructure or platform specific",
    "start": "1013450",
    "end": "1018640"
  },
  {
    "text": "reading scale you want to inject write your own web hook and then who how to",
    "start": "1018640",
    "end": "1026819"
  },
  {
    "text": "update the readiness condition right because so far only cubelet gets to",
    "start": "1026819",
    "end": "1032470"
  },
  {
    "text": "update the heart conditions apart like part statuses so as part of these depart",
    "start": "1032470",
    "end": "1039640"
  },
  {
    "text": "renegade the cubelet has been changed to use patch to update part status it will",
    "start": "1039640",
    "end": "1047319"
  },
  {
    "text": "ignore like the fields that it does not belong to so it does not own like",
    "start": "1047319",
    "end": "1052570"
  },
  {
    "text": "cubelet owns certain fields and it leaves the other fields to other components",
    "start": "1052570",
    "end": "1059559"
  },
  {
    "text": "so that means you can use patch to update a single condition in a pod and",
    "start": "1059559",
    "end": "1068490"
  },
  {
    "text": "this will actually cause no conflicts and also there will be no race condition",
    "start": "1068490",
    "end": "1075370"
  },
  {
    "text": "since the fields are like separated separately owned one part of the pasture",
    "start": "1075370",
    "end": "1082269"
  },
  {
    "text": "is owned by cubelet and then something can own the part readiness gate",
    "start": "1082269",
    "end": "1087820"
  },
  {
    "text": "condition you can even do it in a custom controller and then that automatically",
    "start": "1087820",
    "end": "1093490"
  },
  {
    "text": "reflects the condition and as part of",
    "start": "1093490",
    "end": "1099970"
  },
  {
    "text": "the power ratings gate change cube carro has been like a new field has been added",
    "start": "1099970",
    "end": "1107470"
  },
  {
    "text": "it's called radius gate so we decided not to change the existing ready column",
    "start": "1107470",
    "end": "1113350"
  },
  {
    "text": "because so many tools and so many people are relying on it and cube Caudill get",
    "start": "1113350",
    "end": "1118450"
  },
  {
    "text": "pods it's sort of like the mostly executed cube color command so we don't want it",
    "start": "1118450",
    "end": "1124929"
  },
  {
    "text": "to change it if let's say many people are adopting readiness power in this",
    "start": "1124929",
    "end": "1131019"
  },
  {
    "text": "case so we can revisit this decision so you can see there's a separate column",
    "start": "1131019",
    "end": "1137049"
  },
  {
    "text": "and like the ready column ready column means that how many containers are ready",
    "start": "1137049",
    "end": "1142990"
  },
  {
    "text": "for the pod and the radius K column means that how many reflects how many",
    "start": "1142990",
    "end": "1148659"
  },
  {
    "text": "various gates are stat is true",
    "start": "1148659",
    "end": "1154289"
  },
  {
    "text": "okay so let me talk about the kubernetes engine use cases for part readiness gate",
    "start": "1157320",
    "end": "1165900"
  },
  {
    "start": "1165000",
    "end": "1165000"
  },
  {
    "text": "so we use it extensively for the",
    "start": "1165900",
    "end": "1171100"
  },
  {
    "text": "container native low balancing feature we have so on the left is how a typical",
    "start": "1171100",
    "end": "1176680"
  },
  {
    "text": "cloud load balancer integrated with kubernetes so the load balancer does not",
    "start": "1176680",
    "end": "1181870"
  },
  {
    "text": "no pods low bouncer like basically targets the cluster nodes and then",
    "start": "1181870",
    "end": "1187600"
  },
  {
    "text": "typically the low balancer points to the service no ports and the no port type",
    "start": "1187600",
    "end": "1194320"
  },
  {
    "text": "service because they expose a consistent port on all the cluster nodes any traffic flows to that no port will be",
    "start": "1194320",
    "end": "1201130"
  },
  {
    "text": "like randomly so like forwarded to one of the backend pods so on the left the",
    "start": "1201130",
    "end": "1208090"
  },
  {
    "text": "typical case is that there's a secondary load balancing happening on the nodes",
    "start": "1208090",
    "end": "1213430"
  },
  {
    "text": "and further delivered the the traffic to the back-end pods so this setup actually",
    "start": "1213430",
    "end": "1220360"
  },
  {
    "text": "has many downside it's actually worth a complete talk to describe the problems",
    "start": "1220360",
    "end": "1225930"
  },
  {
    "text": "so we're not going to do it here so probably next time on the right is what",
    "start": "1225930",
    "end": "1233200"
  },
  {
    "text": "we call container native low balancing so the Google cloud load balancer can actually target arbitrary endpoints so",
    "start": "1233200",
    "end": "1240400"
  },
  {
    "text": "it has a new construct called NetWare endpoint groups so you just need to put the endpoints into this construct and",
    "start": "1240400",
    "end": "1247030"
  },
  {
    "text": "low bouncer can directly send traffic to the pods so it has many it has many",
    "start": "1247030",
    "end": "1254320"
  },
  {
    "text": "advantages so obviously there's no second hop so pods become first-class endpoints and like and also the cloud",
    "start": "1254320",
    "end": "1263800"
  },
  {
    "text": "load balancer features just works like for instance traffic shifting cookie",
    "start": "1263800",
    "end": "1269440"
  },
  {
    "text": "affinity and things like that like for instance the traffic shifting right if you are doing the secondary low",
    "start": "1269440",
    "end": "1275170"
  },
  {
    "text": "balancing if you shift traffic on mount vm's it doesn't translate to shifting traffic among the backend parts because",
    "start": "1275170",
    "end": "1282160"
  },
  {
    "text": "any vm were just randomly for traffic to one of the back-end parts so for",
    "start": "1282160",
    "end": "1289450"
  },
  {
    "text": "the with this container native low bouncing you can actually actually shift traffic among the pods and also it can",
    "start": "1289450",
    "end": "1299440"
  },
  {
    "text": "evenly distribute the load of accurately because consider if let's say if the low",
    "start": "1299440",
    "end": "1307030"
  },
  {
    "text": "bouncer is targeting the VMS so the low bouncer is basically doing traffic accounting per VM you think the lowness",
    "start": "1307030",
    "end": "1313150"
  },
  {
    "text": "of things that oh I'm perfectly balanced and I'm gonna send traffic to my",
    "start": "1313150",
    "end": "1318280"
  },
  {
    "text": "back-end in a balanced way well actually because of the again because of the",
    "start": "1318280",
    "end": "1323860"
  },
  {
    "text": "secondary low balancing happened on the node it messes up that accounting and",
    "start": "1323860",
    "end": "1329440"
  },
  {
    "text": "then it becomes irrelevant and with this direct like targeting yeah so it's",
    "start": "1329440",
    "end": "1337840"
  },
  {
    "text": "better balanced however it's not without his challenges so the classic setup just need it's like",
    "start": "1337840",
    "end": "1347710"
  },
  {
    "text": "for an endpoint update in the classic setup we just need to update the IP tables and update IP tables it pretty",
    "start": "1347710",
    "end": "1354610"
  },
  {
    "text": "fast right from what we what I just mentioned it's like less than five seconds but when you're talking about",
    "start": "1354610",
    "end": "1361600"
  },
  {
    "text": "like programming an external low bouncer it's a different story yet there are many flavors or low grounds that they",
    "start": "1361600",
    "end": "1367300"
  },
  {
    "text": "are regional there are like four for Google Cloud it provides a global low bouncer that means a single pot a single",
    "start": "1367300",
    "end": "1375280"
  },
  {
    "text": "endpoint change it needs to program a globally distributed infrastructure like",
    "start": "1375280",
    "end": "1380680"
  },
  {
    "text": "on all the Google edges and it's definitely higher than like five seconds",
    "start": "1380680",
    "end": "1387610"
  },
  {
    "text": "so for the extreme case since the pods can start out very fast depending on",
    "start": "1387610",
    "end": "1392770"
  },
  {
    "text": "your container image some image can start at like less than a second and it starts and it become ready then the",
    "start": "1392770",
    "end": "1399460"
  },
  {
    "text": "deployments say I can just proceed and then like within seconds your backends",
    "start": "1399460",
    "end": "1405250"
  },
  {
    "text": "can finish rollout right within seconds but but the low bouncer is not actually",
    "start": "1405250",
    "end": "1412990"
  },
  {
    "text": "completed and completed of programming for new endpoints so in that case your own endpoints are all gone and your new",
    "start": "1412990",
    "end": "1419920"
  },
  {
    "text": "endpoints are not programmed that would in the extreme case that it will cause an outage so how we solve it so here",
    "start": "1419920",
    "end": "1428309"
  },
  {
    "text": "we're gonna walk through a rolling update case so on the left a blue replica set is the v1 replica version of",
    "start": "1428309",
    "end": "1435720"
  },
  {
    "text": "the application and the green one is the v2 so at first everything is stable the",
    "start": "1435720",
    "end": "1441299"
  },
  {
    "text": "low browser is targeting the old version then let's say the rolling update starts",
    "start": "1441299",
    "end": "1447389"
  },
  {
    "text": "right the new part gets started and from the pot it becomes part of it becomes",
    "start": "1447389",
    "end": "1454379"
  },
  {
    "text": "ready the containers becomes ready to serve but but the the low bounce is",
    "start": "1454379",
    "end": "1460379"
  },
  {
    "text": "still not programmed to target a new pod and the old part gets removed in this",
    "start": "1460379",
    "end": "1465929"
  },
  {
    "text": "case in this transition period there's a slight reduce of the capacity because it",
    "start": "1465929",
    "end": "1472350"
  },
  {
    "text": "used to be three pods serving traffic now it's only two and however kubernetes",
    "start": "1472350",
    "end": "1477570"
  },
  {
    "text": "deployment will not proceed because part is not ready because there's an extra",
    "start": "1477570",
    "end": "1482669"
  },
  {
    "text": "readiness gate to reflect whether the infrastructure is ready so the the red",
    "start": "1482669",
    "end": "1487889"
  },
  {
    "text": "new escape will wait till the Google cloud load balancer to say hey I'm ready",
    "start": "1487889",
    "end": "1493259"
  },
  {
    "text": "I'm ready for this new endpoint what is this ready the readiness gate will",
    "start": "1493259",
    "end": "1499409"
  },
  {
    "text": "condition will reflect that and kubernetes workload and the cloud",
    "start": "1499409",
    "end": "1506279"
  },
  {
    "text": "network infrastructure will work together seamlessly you can just use the native kubernetes were close to manage",
    "start": "1506279",
    "end": "1513629"
  },
  {
    "text": "this the cloud infrastructure with all",
    "start": "1513629",
    "end": "1519119"
  },
  {
    "text": "that I wanted to pass the mic to my co-speaker ping she's going to talk",
    "start": "1519119",
    "end": "1524609"
  },
  {
    "text": "about use cases add into it [Applause]",
    "start": "1524609",
    "end": "1535210"
  },
  {
    "text": "first thanks me want to invite me to present how for most rabbits pod",
    "start": "1535210",
    "end": "1542330"
  },
  {
    "text": "readiness gate",
    "start": "1542330",
    "end": "1545260"
  },
  {
    "text": "and let me first briefly introduce what is",
    "start": "1553930",
    "end": "1560090"
  },
  {
    "text": "the foremast and why is the foremast for most is intuitive sponsor open source crowd",
    "start": "1560090",
    "end": "1568910"
  },
  {
    "text": "native platform for ability to monitor the application health in steady state",
    "start": "1568910",
    "end": "1579639"
  },
  {
    "text": "of operations running on kubernetes it",
    "start": "1579880",
    "end": "1588610"
  },
  {
    "text": "lavish matrix locks tracings as a",
    "start": "1588610",
    "end": "1599000"
  },
  {
    "text": "barricade signal it also used a I based",
    "start": "1599000",
    "end": "1605059"
  },
  {
    "text": "anomaly detection and can perform auto limitation based on once the nominee is",
    "start": "1605059",
    "end": "1613160"
  },
  {
    "text": "detected so now let's talk about poverty",
    "start": "1613160",
    "end": "1621020"
  },
  {
    "text": "miss gateways formats the use case so today I'd like to like I introduce two",
    "start": "1621020",
    "end": "1627890"
  },
  {
    "text": "of use case we can live it the first one is continuously health check",
    "start": "1627890",
    "end": "1634600"
  },
  {
    "text": "so for must not only can monitor the application health but also pot health",
    "start": "1634600",
    "end": "1645010"
  },
  {
    "text": "based on the dodecyl signal",
    "start": "1645040",
    "end": "1649900"
  },
  {
    "text": "once for mustard detector a particular part is unhealth our AB nominee so we",
    "start": "1651650",
    "end": "1661200"
  },
  {
    "text": "leveraged pod readiness gate feature to set par the readiness conditioning to",
    "start": "1661200",
    "end": "1668640"
  },
  {
    "text": "force so in this way the pod can take that particular part can take out of",
    "start": "1668640",
    "end": "1674250"
  },
  {
    "text": "traffic then people can debug and/or troubleshooting it so the second thing",
    "start": "1674250",
    "end": "1681690"
  },
  {
    "text": "at the second use case is of order force alert so in the past we found was right",
    "start": "1681690",
    "end": "1689520"
  },
  {
    "text": "after pod ready and pod start to serve the traffic at the very beginning of",
    "start": "1689520",
    "end": "1695040"
  },
  {
    "text": "first one to two thrashing appears have",
    "start": "1695040",
    "end": "1700620"
  },
  {
    "text": "highlighted sea or sometimes even learn to like a error timeout that is because",
    "start": "1700620",
    "end": "1711000"
  },
  {
    "text": "of application means some of applications component some of the",
    "start": "1711000",
    "end": "1716700"
  },
  {
    "text": "component may still not fully initialized all some depends on some",
    "start": "1716700",
    "end": "1723990"
  },
  {
    "text": "external dependency so we introduced the pod readiness condition features so we",
    "start": "1723990",
    "end": "1732750"
  },
  {
    "text": "first we checked readiness resource",
    "start": "1732750",
    "end": "1738120"
  },
  {
    "text": "signal is if it's ready and then set for the readiness condition to chew and then",
    "start": "1738120",
    "end": "1744780"
  },
  {
    "text": "start to serve the traffic",
    "start": "1744780",
    "end": "1749600"
  },
  {
    "start": "1764000",
    "end": "1764000"
  },
  {
    "text": "so today I'd like to have a demo of the",
    "start": "1766680",
    "end": "1772080"
  },
  {
    "text": "second use case this is a brief demo fro so I mark the step 1 2 3 4 5 so first",
    "start": "1772080",
    "end": "1782760"
  },
  {
    "text": "step is right when we started the month",
    "start": "1782760",
    "end": "1789590"
  },
  {
    "text": "the one application is deployed and the",
    "start": "1789590",
    "end": "1795660"
  },
  {
    "text": "second step is we start to deploy v2 to",
    "start": "1795660",
    "end": "1802080"
  },
  {
    "text": "repress v1 and now v2 is the v2 is",
    "start": "1802080",
    "end": "1810690"
  },
  {
    "text": "deployed and a pod pod is ready and then we add additional readiness resource",
    "start": "1810690",
    "end": "1819990"
  },
  {
    "text": "check for v2 and then set up B to pot the readiness condition to choose",
    "start": "1819990",
    "end": "1827720"
  },
  {
    "text": "between three and a floor pod start to serve the traffic 4 to 5 is we found",
    "start": "1827720",
    "end": "1835490"
  },
  {
    "text": "application have a high error spark so",
    "start": "1835490",
    "end": "1840800"
  },
  {
    "text": "the light of orange sorry the line is indicated we have the machine learning",
    "start": "1840800",
    "end": "1847770"
  },
  {
    "text": "model this is the upper bound which is generated based on historical data so in",
    "start": "1847770",
    "end": "1856410"
  },
  {
    "text": "number 5 is 4 must detect anomaly and issued autoroute look limitation which",
    "start": "1856410",
    "end": "1865800"
  },
  {
    "text": "is a low back in this case number 6 is",
    "start": "1865800",
    "end": "1871550"
  },
  {
    "text": "v1 is a replaced the place to be b2 so",
    "start": "1871550",
    "end": "1879900"
  },
  {
    "text": "the one application is there like a deployed you know in this case let me",
    "start": "1879900",
    "end": "1885990"
  },
  {
    "text": "have a real time demo for it",
    "start": "1885990",
    "end": "1891470"
  },
  {
    "text": "yeah step 1 just like I mentioned under demo flow so application is the demo",
    "start": "1914120",
    "end": "1922549"
  },
  {
    "text": "version is a v1",
    "start": "1922549",
    "end": "1926320"
  },
  {
    "text": "is deployed",
    "start": "1928450",
    "end": "1931440"
  },
  {
    "text": "now I just this is just the price is greater we were hot name and a skill",
    "start": "1939650",
    "end": "1948289"
  },
  {
    "text": "step one I just give you more information v2 it's not there step two we start to deploy v1 by",
    "start": "1948289",
    "end": "1960340"
  },
  {
    "text": "replace deployment of e 1 by V 2 so ok",
    "start": "1960340",
    "end": "1966710"
  },
  {
    "text": "ok so you can see the department is",
    "start": "1966710",
    "end": "1972070"
  },
  {
    "text": "replaced",
    "start": "1972070",
    "end": "1975070"
  },
  {
    "text": "just indicate application is now verging is application is demo it is already now",
    "start": "1980019",
    "end": "1996640"
  },
  {
    "text": "let me get spray the part the veto I",
    "start": "1996640",
    "end": "2004809"
  },
  {
    "text": "search the father readiness",
    "start": "2004809",
    "end": "2008730"
  },
  {
    "text": "so the second graph is the readiness",
    "start": "2014929",
    "end": "2020629"
  },
  {
    "text": "resource check so now the readiness",
    "start": "2020629",
    "end": "2026349"
  },
  {
    "text": "condition is set to 2 you can see one of world",
    "start": "2026349",
    "end": "2031570"
  },
  {
    "text": "we won got a terminator here",
    "start": "2036649",
    "end": "2040779"
  },
  {
    "text": "now applications start to serve the traffic",
    "start": "2045630",
    "end": "2050329"
  },
  {
    "text": "yeah you can see yes and also we we have the aromatic skin",
    "start": "2081330",
    "end": "2091220"
  },
  {
    "text": "so here because error appears hi so for",
    "start": "2098890",
    "end": "2106280"
  },
  {
    "text": "must indicate application years in health",
    "start": "2106280",
    "end": "2110650"
  },
  {
    "text": "so our limitation is Auto robot so now let's display what is the",
    "start": "2122120",
    "end": "2133310"
  },
  {
    "text": "department version is robot to be one",
    "start": "2133310",
    "end": "2137530"
  },
  {
    "text": "here's some more information here is the v1 pod and then here just spray me -",
    "start": "2140730",
    "end": "2151710"
  },
  {
    "text": "it's like there's a no no video part anymore yeah top of graph is like v2 is replaced",
    "start": "2151710",
    "end": "2175440"
  },
  {
    "text": "by v1 was an anomaly",
    "start": "2175440",
    "end": "2178880"
  },
  {
    "text": "yeah here's the foremast e for mysterious open-source project welcome",
    "start": "2196550",
    "end": "2203510"
  },
  {
    "text": "to join the forum ask cool so that",
    "start": "2203510",
    "end": "2210230"
  },
  {
    "text": "concludes our presentation so yeah question I think we're technical",
    "start": "2210230",
    "end": "2215420"
  },
  {
    "text": "at a time but they're probably here for a couple minutes afterwards the questions appear again please thank you for coming and remember to rate the the",
    "start": "2215420",
    "end": "2222350"
  },
  {
    "text": "session on your app thank you guys very much",
    "start": "2222350",
    "end": "2225730"
  }
]