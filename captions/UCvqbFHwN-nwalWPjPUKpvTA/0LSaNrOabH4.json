[
  {
    "text": "so hi everybody thanks everyone for coming down I know this is the last slot of the first day that's always a tough",
    "start": "359",
    "end": "7529"
  },
  {
    "text": "one to stay awake in and participate in so thank you for thank you for making it down and also for finding these rooms so",
    "start": "7529",
    "end": "14429"
  },
  {
    "text": "my name is Andrew I work at a company called site ale I'm not going to talk too much about Scytale today but I am going to talk a",
    "start": "14429",
    "end": "19890"
  },
  {
    "text": "lot about the project that we've been helping helping steward called spiffy",
    "start": "19890",
    "end": "25460"
  },
  {
    "text": "and out of interest just a quick show of hands who had actually heard of spiffy",
    "start": "25460",
    "end": "31890"
  },
  {
    "text": "before today okay cool about half excellent so that means that that means",
    "start": "31890",
    "end": "39120"
  },
  {
    "text": "at least half of you are very excited so I'm gonna jump in and and give you a",
    "start": "39120",
    "end": "45930"
  },
  {
    "text": "little bit of an overview of what's 50 years and and and also spire the the action which is the actual implementation of spiffy we we also have",
    "start": "45930",
    "end": "54420"
  },
  {
    "text": "another session on tomorrow the spiffy deep dive where we're going to take some of the ideas that we talk about at a",
    "start": "54420",
    "end": "60690"
  },
  {
    "text": "very hand wavy conceptual graphical level and dive into the meat of how they actually work and so my colleague",
    "start": "60690",
    "end": "67290"
  },
  {
    "text": "Emiliano along with a couple of friends of ours from VMware are going to run",
    "start": "67290",
    "end": "72360"
  },
  {
    "text": "that so I'd encourage folks who find this interesting and want to get to the meat of it if we don't get to your",
    "start": "72360",
    "end": "77759"
  },
  {
    "text": "questions later please do please do get involve there as well there's a few other events as well a few panels and",
    "start": "77759",
    "end": "83520"
  },
  {
    "text": "things like that and then of course we're all on slack and github so to jump",
    "start": "83520",
    "end": "88950"
  },
  {
    "text": "into spiffy so spiffy is fundamentally solving for the problem of trust between",
    "start": "88950",
    "end": "96119"
  },
  {
    "text": "workloads and by workloads we really is a general term we use for any software system you might also use the word",
    "start": "96119",
    "end": "101970"
  },
  {
    "text": "service which is also kind of an overloaded term but fundamentally we're trying to solve for trust and by that by",
    "start": "101970",
    "end": "107700"
  },
  {
    "text": "trust what I mean is that if I'm a source work load trying to talk to a destination work load to use some networking nomenclature as a destination",
    "start": "107700",
    "end": "115020"
  },
  {
    "text": "workload can I trust that something else talking to me is in fact who it says it is and that the messages that it's",
    "start": "115020",
    "end": "121380"
  },
  {
    "text": "sending me were actually from that that original source now Trust is not a new problem by the way if",
    "start": "121380",
    "end": "128129"
  },
  {
    "text": "you've ever used a password or a shared secret or a shared token of some kind then you've participated",
    "start": "128129",
    "end": "133740"
  },
  {
    "text": "in establishing trust what is a new problem though or is becoming",
    "start": "133740",
    "end": "138960"
  },
  {
    "text": "increasingly a more acute problem is is really twofold one of them is just",
    "start": "138960",
    "end": "144210"
  },
  {
    "text": "simply the number of workloads that need to establish trust between each other in order to deliver some kind of let's call",
    "start": "144210",
    "end": "150630"
  },
  {
    "text": "it customer experience and this is kind of a contrived piece of market texture but you get the idea when people start",
    "start": "150630",
    "end": "156360"
  },
  {
    "text": "throwing around words like micro services and or service orientated architecture what that means in practice",
    "start": "156360",
    "end": "162690"
  },
  {
    "text": "is that you have a number of discreet independent running processes that are connected over a network that need to be",
    "start": "162690",
    "end": "169320"
  },
  {
    "text": "able to trust each other the number of these things is growing as an industry we're starting to build more",
    "start": "169320",
    "end": "174990"
  },
  {
    "text": "and more and build more maturity and practice and tooling around taking monolithic applications that just shared",
    "start": "174990",
    "end": "181260"
  },
  {
    "text": "memory and breaking them out into these different components so we have more things that need to trust each other for one thing the other thing that's",
    "start": "181260",
    "end": "187560"
  },
  {
    "text": "something of an emerging trend over the last maybe five years or so has been the",
    "start": "187560",
    "end": "192780"
  },
  {
    "text": "heterogeneity that we're starting to deploy these systems into no longer are they just running in a data center",
    "start": "192780",
    "end": "198780"
  },
  {
    "text": "somewhere where the hardware has been spectin fitted out by a single team now maybe some of my solutions running in",
    "start": "198780",
    "end": "204330"
  },
  {
    "text": "one cloud provider some of my solution is still running on premise maybe some other part of my solution is running on",
    "start": "204330",
    "end": "209640"
  },
  {
    "text": "another cloud provider when I used to work at Google as a product manager at Google I saw more and more I saw this",
    "start": "209640",
    "end": "216600"
  },
  {
    "text": "becoming an increasing problem rather than a decreasing problem the heterogeneity of infrastructure is",
    "start": "216600",
    "end": "222920"
  },
  {
    "text": "becoming a real challenge the other dimension of heterogeneity that's often",
    "start": "222920",
    "end": "228150"
  },
  {
    "text": "a challenge is than the middleware layer the number of different systems I can use to manage these running workloads",
    "start": "228150",
    "end": "234330"
  },
  {
    "text": "now that might be a you know I container shed yellow like kubernetes it might be a pass system built on top of a",
    "start": "234330",
    "end": "240540"
  },
  {
    "text": "container scheduler it might be something independent like say Cloud Foundry it may be JBoss or WebSphere or",
    "start": "240540",
    "end": "246660"
  },
  {
    "text": "something you've rolled yourself but again you have this rich diversity of different ways you can run systems and",
    "start": "246660",
    "end": "252540"
  },
  {
    "text": "when most and when you build a project in isolation maybe you'll just pick one of these for the case of simplicity but",
    "start": "252540",
    "end": "258450"
  },
  {
    "text": "when you have legacy and when you have for that matter just different teams operating independently they may all",
    "start": "258450",
    "end": "263460"
  },
  {
    "text": "make different technology choices even if you standardize on something like say kubernetes you may well have may well even desire",
    "start": "263460",
    "end": "269790"
  },
  {
    "text": "to have multiple kubernetes clusters either for availability or for isolation or for some other reason",
    "start": "269790",
    "end": "275040"
  },
  {
    "text": "so either way we also have heterogeneity at the middleware layer and then of course people pick and choose their own",
    "start": "275040",
    "end": "281460"
  },
  {
    "text": "stacks for actually doing or thin and Odyssey and so forth then finally we",
    "start": "281460",
    "end": "286560"
  },
  {
    "text": "have third party ap is you know as we as we start to see these rich services that",
    "start": "286560",
    "end": "292950"
  },
  {
    "text": "provide third party infrastructure things like you know whether that's something as transactional or sending an",
    "start": "292950",
    "end": "299100"
  },
  {
    "text": "email or something more robust like say invoice management we start to farm out",
    "start": "299100",
    "end": "304560"
  },
  {
    "text": "a lot of our workloads to third party systems where we have no idea what the infrastructure is that they're running on so this is kind of the world this is",
    "start": "304560",
    "end": "311760"
  },
  {
    "text": "just really just to set the stage of the world that spiffy is entering into and operating in too before we get too",
    "start": "311760",
    "end": "317970"
  },
  {
    "text": "spiffy worth recapping a couple of strategies that are used today to solve for this the first is what I might",
    "start": "317970",
    "end": "323550"
  },
  {
    "text": "consider kind of classical trust management or classical for that matter authentication and I've kind of crudely",
    "start": "323550",
    "end": "328740"
  },
  {
    "text": "generalized here Morais every shared secret form of authentication that you can manage but it basically works the",
    "start": "328740",
    "end": "334140"
  },
  {
    "text": "same way you have a destination workload has some concept of identities for the",
    "start": "334140",
    "end": "340020"
  },
  {
    "text": "cysts for the sauce workloads that want to connect to it might be a registry of accounts a concrete example might be I'm",
    "start": "340020",
    "end": "345660"
  },
  {
    "text": "running a my sequel database and I have my sequel usernames and passwords that are stored in a table in that database",
    "start": "345660",
    "end": "350930"
  },
  {
    "text": "and then I I send that I then create an",
    "start": "350930",
    "end": "356340"
  },
  {
    "text": "accounts to represent my source work load I take that credential I give it to the source work load the source work",
    "start": "356340",
    "end": "362760"
  },
  {
    "text": "load then uses that to authenticate as part of a handshake so that hopefully looks in abstract fairly familiar to you",
    "start": "362760",
    "end": "368390"
  },
  {
    "text": "in some form there's a couple of problems with this model though for one we need to fit we need it's it doesn't",
    "start": "368390",
    "end": "375870"
  },
  {
    "text": "really eat itself well to being automatable we need to create these accounts for one thing and the way you create these accounts is different for",
    "start": "375870",
    "end": "382380"
  },
  {
    "text": "every different system because it has a different author and all three model you then need to distribute these secrets or",
    "start": "382380",
    "end": "388710"
  },
  {
    "text": "the the the token for these secrets and the identity metadata over to the source workload so that can actually",
    "start": "388710",
    "end": "393800"
  },
  {
    "text": "authenticate and then you need to and and we need to figure out a distribution",
    "start": "393800",
    "end": "399990"
  },
  {
    "text": "system that's robust we also need to figure out how to rotate these things you know to constantly",
    "start": "399990",
    "end": "406770"
  },
  {
    "text": "manage them and there are a number of secret stores and other products that do a great job of maintaining secret",
    "start": "406770",
    "end": "413430"
  },
  {
    "text": "credentials on your behalf and they can dynamically in some cases dynamically create accounts and dynamically rotate",
    "start": "413430",
    "end": "419490"
  },
  {
    "text": "them for you but even with secret stores you have a problem which is the secure introduction problem or the trust",
    "start": "419490",
    "end": "424800"
  },
  {
    "text": "bootstrapping problem which is how does your workload actually connect to the secret store in the first place to authenticate itself it's using a token",
    "start": "424800",
    "end": "431130"
  },
  {
    "text": "it has these same problems for the most part so this is one model for doing authentication the other model is is",
    "start": "431130",
    "end": "439860"
  },
  {
    "text": "what we often see when we have consistent platforms so for example you might see this in AWS for example you",
    "start": "439860",
    "end": "446700"
  },
  {
    "text": "see this actually in kubernetes and broadly again I'm generalizing here but",
    "start": "446700",
    "end": "452430"
  },
  {
    "text": "the way this model works is you have some kind of privileged API that is able",
    "start": "452430",
    "end": "458730"
  },
  {
    "text": "to reason out-of-band who a workload is and so the workload rather than having credentials created",
    "start": "458730",
    "end": "465990"
  },
  {
    "text": "in it rather than having credentials defined in a destination workload and then copied to a source workload instead",
    "start": "465990",
    "end": "472169"
  },
  {
    "text": "this platform mediated privileged API is able to say well we we have some existing concept of who you are if",
    "start": "472169",
    "end": "478320"
  },
  {
    "text": "you're running an AWS or say an ec2 instance for example well we know what security group you in we know what I am",
    "start": "478320",
    "end": "483360"
  },
  {
    "text": "roles you might have associated with you so we already know we have some concept of identity for you already and we can",
    "start": "483360",
    "end": "489330"
  },
  {
    "text": "we can allow you to we know that you are they caller requesting that identity so we can",
    "start": "489330",
    "end": "494940"
  },
  {
    "text": "retrieve for you your specific identity and the documents that you might need to prove that likewise a remote API is able",
    "start": "494940",
    "end": "502440"
  },
  {
    "text": "to verify those documents or verify key or verify say a nonce that's been",
    "start": "502440",
    "end": "508530"
  },
  {
    "text": "encrypted using those documents so a destination workload is also able to to",
    "start": "508530",
    "end": "513930"
  },
  {
    "text": "lean in this with this as well and this is a much more preferable model for",
    "start": "513930",
    "end": "519089"
  },
  {
    "text": "several reasons for one of it is its API driven so it's it's much more amenable to automation another nice property of",
    "start": "519089",
    "end": "525900"
  },
  {
    "text": "this API is that every identity is that you have one identity per workload",
    "start": "525900",
    "end": "532260"
  },
  {
    "text": "effectively so rather than the former model where you might have where",
    "start": "532260",
    "end": "537570"
  },
  {
    "text": "as a workload I need multiple different identities for every other workload that I'm gonna need to talk to I need I need to identify",
    "start": "537570",
    "end": "543750"
  },
  {
    "text": "myself to an API I need to identify myself to a database I need to identify myself to my queuing system with this",
    "start": "543750",
    "end": "549600"
  },
  {
    "text": "model instead I have one identity which is me and then I can prove that identity asserted to anyone else that I need to",
    "start": "549600",
    "end": "555540"
  },
  {
    "text": "talk to and then that other system can make a decision based on that identity as to whether or not it wants to actually allow a connection or allow me",
    "start": "555540",
    "end": "561540"
  },
  {
    "text": "to perform some action so this is a really nice model conceptually it has one problem though which is that it",
    "start": "561540",
    "end": "568200"
  },
  {
    "text": "requires every workload to be running on that platform or at least every source workload to be running on that platform",
    "start": "568200",
    "end": "574850"
  },
  {
    "text": "so if you're running everything inside AWS and you're running everything in a form that AWS can reason about ie you're",
    "start": "574850",
    "end": "581520"
  },
  {
    "text": "not running it on a Hadoop cluster say that you're running yourself for a kubernetes cluster you're running yourself this model actually works",
    "start": "581520",
    "end": "586830"
  },
  {
    "text": "really well as long as you don't mind really locking yourself into AWS to a certain extent but as soon as but in the",
    "start": "586830",
    "end": "593490"
  },
  {
    "text": "real world we often see again multiple different environments that I want to be",
    "start": "593490",
    "end": "598560"
  },
  {
    "text": "able to span trust across and in this case this model starts to break down so",
    "start": "598560",
    "end": "604190"
  },
  {
    "text": "enter at a very crude level the goal that we're trying to solve for for spiffy which is to try and provide a",
    "start": "604190",
    "end": "610500"
  },
  {
    "text": "version of this kind of platform mediated identity without necessarily we're necessarily requiring you to buy",
    "start": "610500",
    "end": "616470"
  },
  {
    "text": "in to a an entire homogeneous platform and just to summarize you know this is",
    "start": "616470",
    "end": "622620"
  },
  {
    "text": "kind of the sort of you know business call one-on-one shot on the the strengths of spiffy as a system we're",
    "start": "622620",
    "end": "628920"
  },
  {
    "text": "trying to have our cake and eat it to to a certain extent in terms of a reliable primitive to build authentication on top",
    "start": "628920",
    "end": "635400"
  },
  {
    "text": "of but that it does not require us to lock into a single platform so when we talk about spiffy we actually talked",
    "start": "635400",
    "end": "642180"
  },
  {
    "text": "about two projects spiffy itself really refers now to a specification in a",
    "start": "642180",
    "end": "647850"
  },
  {
    "text": "particular specification for this work with an API and I'm going to talk about some of the components for that a second",
    "start": "647850",
    "end": "653250"
  },
  {
    "text": "the other project we talk about is spire the spiffy runtime environment which is the software that actually implements",
    "start": "653250",
    "end": "659790"
  },
  {
    "text": "that specification that allows you to use it yourself fairly early on in the project we",
    "start": "659790",
    "end": "665400"
  },
  {
    "text": "recognized the benefits of actually separating these as concerns that there may be multiple providers",
    "start": "665400",
    "end": "671040"
  },
  {
    "text": "that implement the spiffy interface it may even be cloud providers at some point start to implement this spire is",
    "start": "671040",
    "end": "677279"
  },
  {
    "text": "one implementation that you can use and in fact something that we won't get too much time to talk about today but it's a",
    "start": "677279",
    "end": "682860"
  },
  {
    "text": "really interesting idea is the ability to be able to federate across and bridge trust between multiple different spiffy",
    "start": "682860",
    "end": "690690"
  },
  {
    "text": "compliant installations but this this is spiffy inspires kind of the core of the",
    "start": "690690",
    "end": "695790"
  },
  {
    "text": "project so the spiffy specifications are covered in detail three things the first is the format of an ID itself which is",
    "start": "695790",
    "end": "702389"
  },
  {
    "text": "really a string and an ID you know a string format sounds boring but it's important the the spiffy ID it's it's a",
    "start": "702389",
    "end": "710550"
  },
  {
    "text": "you probably recognize this format broadly it's a URI and there's two really important parts of this URI the",
    "start": "710550",
    "end": "715680"
  },
  {
    "text": "first is what we call a trust domain a trust domain effectively maps to the the",
    "start": "715680",
    "end": "723630"
  },
  {
    "text": "identity issuing infrastructure so every spire installation corresponds to a",
    "start": "723630",
    "end": "729329"
  },
  {
    "text": "trust Amin trust domains can be hierarchical much as much as domain names can be and if you've ever worked",
    "start": "729329",
    "end": "736170"
  },
  {
    "text": "with PKI and you've worked with kind of named constraint delegated certificates you can do the same you can you can lean",
    "start": "736170",
    "end": "743399"
  },
  {
    "text": "on similar properties with with spiffy as well the other piece of this is the workload identifier so once we have a",
    "start": "743399",
    "end": "749100"
  },
  {
    "text": "trust domaine now I I need to identify specific workloads inside it and this is",
    "start": "749100",
    "end": "754980"
  },
  {
    "text": "you know looks a lot like and behaves a lot like a file path spiffy itself just treats this as an opaque string it",
    "start": "754980",
    "end": "760769"
  },
  {
    "text": "doesn't really reason about hierarchy or anything like that but you can you can implement hierarchy if you want to say",
    "start": "760769",
    "end": "766170"
  },
  {
    "text": "for for a chling rules and policy so once you have this string then we need a",
    "start": "766170",
    "end": "771300"
  },
  {
    "text": "way of for a workload to be able to prove that in that in fact has Bob to",
    "start": "771300",
    "end": "776850"
  },
  {
    "text": "provide proof of possession to prove that it is entitled and has claimed on",
    "start": "776850",
    "end": "783149"
  },
  {
    "text": "this particular spiffy ID and so for that we use the what we call the spiffy verifiable identity document this is",
    "start": "783149",
    "end": "789630"
  },
  {
    "text": "actually a fairly generic idea over time we expect multiple different formats of",
    "start": "789630",
    "end": "795290"
  },
  {
    "text": "estimates for now though the spiffy there's we have a we specify a particular flavor of the",
    "start": "795290",
    "end": "801960"
  },
  {
    "text": "spiffy verifiable identity document which from now on I'm gonna call s vid as a particular flavor of the Esprit",
    "start": "801960",
    "end": "807930"
  },
  {
    "text": "called the x.509 s vid that's based on x.509 certificates basically what we've done is taken the x.509 spec and provide",
    "start": "807930",
    "end": "814050"
  },
  {
    "text": "and worked out a robust but meaningfully for a size subset of that that's used to",
    "start": "814050",
    "end": "820980"
  },
  {
    "text": "encode spiffy IDs inside certificates and provide keys that can be used to assert that and crucially you know we we",
    "start": "820980",
    "end": "829320"
  },
  {
    "text": "expect these documents to typically be short-lived and it's feasible for us to do that in part because these things are",
    "start": "829320",
    "end": "834959"
  },
  {
    "text": "API driven there are other formats of espied we're looking at such as you know one based on jot for example in cases",
    "start": "834959",
    "end": "841980"
  },
  {
    "text": "where you want a document format that might survive you know layer 7 but",
    "start": "841980",
    "end": "847850"
  },
  {
    "text": "generally speaking these are the documents that the API provides and then we have the workload API itself the",
    "start": "847850",
    "end": "855209"
  },
  {
    "text": "workload API runs is available to every workload that needs it inside a spiffy a",
    "start": "855209",
    "end": "863399"
  },
  {
    "text": "set of spiffy enabled workloads if you will the workload API is node local it",
    "start": "863399",
    "end": "869040"
  },
  {
    "text": "doesn't require any authentication and this is actually crucial because the core problem we're solving for is trust",
    "start": "869040",
    "end": "874350"
  },
  {
    "text": "bootstrapping so if we required you to provide some kind of API key to authenticate the spiffy would somewhat defeat the whole purpose so this",
    "start": "874350",
    "end": "881130"
  },
  {
    "text": "workload is node local in practice in UNIX it's exposed via a UNIX domain socket we're looking at other ways of",
    "start": "881130",
    "end": "886440"
  },
  {
    "text": "exposing it as well and a workload when it wants to retrieve its identity when",
    "start": "886440",
    "end": "891570"
  },
  {
    "text": "it wakes up and wants to know who it is it doesn't need any a priori knowledge of who it is it doesn't need to know if",
    "start": "891570",
    "end": "897240"
  },
  {
    "text": "it's running in kubernetes on Azure it doesn't need to know if it's running on Prem in jboss it doesn't need to know if it's in staging or production or",
    "start": "897240",
    "end": "902910"
  },
  {
    "text": "development it can it can it can ask this of the system itself so it does",
    "start": "902910",
    "end": "908910"
  },
  {
    "text": "this by calling a workload API the workload API the infrastructure behind it is then responsible for figuring out",
    "start": "908910",
    "end": "915329"
  },
  {
    "text": "who this workload is in the case of a cloud platform it might already know who this workload is because it's already got metadata from its control plane to",
    "start": "915329",
    "end": "921870"
  },
  {
    "text": "figure that out in the case of spire we'll talk a little bit about the mechanics of how this works in a second",
    "start": "921870",
    "end": "927140"
  },
  {
    "text": "but it makes a Who am I call the workload API attests this workload",
    "start": "927140",
    "end": "933089"
  },
  {
    "text": "verifies who it is and once if it if it's fine a if it can identify this workload it",
    "start": "933089",
    "end": "940079"
  },
  {
    "text": "will retreat it will send it both back the spiffy ID and then also these short-lived documents that it can use",
    "start": "940079",
    "end": "945179"
  },
  {
    "text": "the keys it can use to prove that identity to other systems and also a",
    "start": "945179",
    "end": "950939"
  },
  {
    "text": "what we call a certificate bundle a set of certificates that allows it to verify the identities of any other running",
    "start": "950939",
    "end": "956939"
  },
  {
    "text": "workload that's been suitably spiffy enabled as well and these are just x.509 certificates so for the most part if you",
    "start": "956939",
    "end": "963179"
  },
  {
    "text": "have client libraries that are x.509 compliant and in particular compliant with the espen spec then you can use",
    "start": "963179",
    "end": "969660"
  },
  {
    "text": "them to do anything you like so you can use them to establish a TLS connection you can use them to sign a jot token",
    "start": "969660",
    "end": "977300"
  },
  {
    "text": "I'll talk a little bit more about some of the use cases we're seeing out of spite spiffy inspire in a moment but I I",
    "start": "977360",
    "end": "983160"
  },
  {
    "text": "wanted a sec to talk about how spire actually works because I think that's a useful exercise so spire is composed of",
    "start": "983160",
    "end": "990240"
  },
  {
    "text": "an agent and a server the agent runs on every node inside your infrastructure again its node local and this is what",
    "start": "990240",
    "end": "996449"
  },
  {
    "text": "exposes the workload API the server is effectively kind of a combination of an",
    "start": "996449",
    "end": "1002119"
  },
  {
    "text": "API itself a registry of these identities of your workload identities",
    "start": "1002119",
    "end": "1008329"
  },
  {
    "text": "and what we call the attestation policies that describe how those identities should be issued and then",
    "start": "1008329",
    "end": "1013670"
  },
  {
    "text": "finally it's effectively a certificate authority as well which can be seeded by",
    "start": "1013670",
    "end": "1018860"
  },
  {
    "text": "intermediate keys the registry that it contains you know contains metadata that",
    "start": "1018860",
    "end": "1025579"
  },
  {
    "text": "looks I'm simplifying a little here but it looks a little bit like this you have firstly the ID that you want",
    "start": "1025579",
    "end": "1030620"
  },
  {
    "text": "issued and then you have a set of selectors that define the conditions that a workload must match in order to",
    "start": "1030620",
    "end": "1037760"
  },
  {
    "text": "be granted that identity and there's a number of different spire is extremely modular so there's a number of different",
    "start": "1037760",
    "end": "1044058"
  },
  {
    "text": "mechanisms you can use to describe a workload but typically you would do it in with with at least two forms of",
    "start": "1044059",
    "end": "1050390"
  },
  {
    "text": "selector one at the infrastructure level and then one at the workload or",
    "start": "1050390",
    "end": "1055789"
  },
  {
    "text": "middleware level so the infrastructure level might be in this case we're saying the billing payments service of Acme com",
    "start": "1055789",
    "end": "1064070"
  },
  {
    "text": "must be running in this particular security group within AWS",
    "start": "1064070",
    "end": "1069280"
  },
  {
    "text": "but you could use other mechanisms there as well it might be a particular network policy or a particular label inside",
    "start": "1069280",
    "end": "1076670"
  },
  {
    "text": "other constructs like say VMware you might use other ways of describing the set of virtual machines the set of nodes",
    "start": "1076670",
    "end": "1082940"
  },
  {
    "text": "that comprise the workload but that's often not enough you know particularly",
    "start": "1082940",
    "end": "1088190"
  },
  {
    "text": "when we're talking about kubernetes and we may have a cluster with multiple different workloads running on it it's important for us to be able to",
    "start": "1088190",
    "end": "1093910"
  },
  {
    "text": "distinguish beyond the node level what a you know what constitutes a workload and",
    "start": "1093910",
    "end": "1100580"
  },
  {
    "text": "so therefore we need no workload level selectors in this case we have a very simple example which is the workload",
    "start": "1100580",
    "end": "1106550"
  },
  {
    "text": "must also have the UNIX UID of 1001 but you could you could lean on other",
    "start": "1106550",
    "end": "1112250"
  },
  {
    "text": "metadata as well I'll give an example later where we talk about this with kubernetes and pod spec metadata as selectors but basic but the key point",
    "start": "1112250",
    "end": "1119660"
  },
  {
    "text": "here is that spire this the spire server maintains a large registry of all of these different identities so now I'm",
    "start": "1119660",
    "end": "1127160"
  },
  {
    "text": "going to work through a contrived example of how a workload when it wakes",
    "start": "1127160",
    "end": "1133070"
  },
  {
    "text": "up actually retrieves an identity so and in this case we're going to assume we're",
    "start": "1133070",
    "end": "1139310"
  },
  {
    "text": "going to assume basically the the set that we talked about before our workload running in a particular security group inside AWS and that is also running as a",
    "start": "1139310",
    "end": "1146660"
  },
  {
    "text": "particular UNIX process so for those who aren't necessarily familiar with AWS or UNIX I'm going to ask you to squint a",
    "start": "1146660",
    "end": "1151910"
  },
  {
    "text": "little bit with some of the detail here but this is just a work example so first",
    "start": "1151910",
    "end": "1158330"
  },
  {
    "text": "of all we have a workload running on an ec2 instance it's this billing service the ec2 instance is booted for the first",
    "start": "1158330",
    "end": "1166190"
  },
  {
    "text": "time and running on the cc2 instance as well as the workload is this spire agent running as a daemon this Meier agent",
    "start": "1166190",
    "end": "1173120"
  },
  {
    "text": "wakes up and the first thing it needs to do is authenticate itself to the spire server the way it does this is by",
    "start": "1173120",
    "end": "1179180"
  },
  {
    "text": "leaning on the trust primitive of AWS which is the ec2 instance I'd sorry easy",
    "start": "1179180",
    "end": "1186440"
  },
  {
    "text": "to metadata API and from that it's able to retrieve a thing called the instance",
    "start": "1186440",
    "end": "1192080"
  },
  {
    "text": "identity document which is effectively which is a document that contains a subset of the metadata about that",
    "start": "1192080",
    "end": "1198260"
  },
  {
    "text": "instance including its instance ID and that's been signed by Amazon the",
    "start": "1198260",
    "end": "1204010"
  },
  {
    "text": "the ECE process running on the ec2 instance can retrieve this without again",
    "start": "1204010",
    "end": "1209420"
  },
  {
    "text": "any authentication and they can provide it to the spire and it can provide it to another process in order to assert that",
    "start": "1209420",
    "end": "1217060"
  },
  {
    "text": "this instance is in fact the instance it claims to be so we use this in the",
    "start": "1217060",
    "end": "1222290"
  },
  {
    "text": "handshake to the spire server we pass we pass this document the spire server is",
    "start": "1222290",
    "end": "1228770"
  },
  {
    "text": "they unable to verify it with Amazon's public key it's then also able to look up back into Amazon and retrieve additional metadata",
    "start": "1228770",
    "end": "1235010"
  },
  {
    "text": "about this workload so I have an instance ID but I want to know what network it's running in what security",
    "start": "1235010",
    "end": "1240080"
  },
  {
    "text": "group it's running in what labels it has what I am roles it has etc so spy server",
    "start": "1240080",
    "end": "1245690"
  },
  {
    "text": "does this and it then goes through that rectory of identities to retrieve the",
    "start": "1245690",
    "end": "1252380"
  },
  {
    "text": "and to figure out the subset of identities that are entitled to be run on that node again we have a set of node",
    "start": "1252380",
    "end": "1258410"
  },
  {
    "text": "selectors in place so it's basically saying ok now I have an ec2 instance find me the list of nodes that match",
    "start": "1258410",
    "end": "1263480"
  },
  {
    "text": "that ID that so the list of attestation policies that match this instance and it",
    "start": "1263480",
    "end": "1270380"
  },
  {
    "text": "will then return it'll return a list of spiffy IDs as well as all of the",
    "start": "1270380",
    "end": "1275930"
  },
  {
    "text": "selectors associated with those IDs back to the spire agent at this point the workload doesn't know anything by the",
    "start": "1275930",
    "end": "1281420"
  },
  {
    "text": "way so now the workload wakes up the workload wants to know who it is so it makes its who am i call to the local",
    "start": "1281420",
    "end": "1288100"
  },
  {
    "text": "workload API which is provided by the spire agent the spire agent needs to",
    "start": "1288100",
    "end": "1294500"
  },
  {
    "text": "figure out who this workload is we expose this workload API as a UNIX domain socket which means that we can",
    "start": "1294500",
    "end": "1299720"
  },
  {
    "text": "retrieve metadata from the kernel to figure out who this workload is again it assumes that we trust the kernel here so",
    "start": "1299720",
    "end": "1306940"
  },
  {
    "text": "so the spire Asian world will do this out-of-band check it'll pull down kernel metadata like UID and PID and so forth",
    "start": "1306940",
    "end": "1313850"
  },
  {
    "text": "and compare that to the list of attestation policies that it got from the spire server in more interesting",
    "start": "1313850",
    "end": "1320930"
  },
  {
    "text": "example say with kubernetes the spire agent can also then go and look up against say the couplet to",
    "start": "1320930",
    "end": "1327950"
  },
  {
    "text": "cross-reference and say hey cubed is this does this PID a correspond to a",
    "start": "1327950",
    "end": "1334430"
  },
  {
    "text": "workload that you scheduled on this node and if so can you tell us a bit about it given me a pots back foreign and so forth so what",
    "start": "1334430",
    "end": "1341510"
  },
  {
    "text": "collects all of this data about the workload and then again it goes through its list of attestation policies and finds the list of identities and",
    "start": "1341510",
    "end": "1347330"
  },
  {
    "text": "hopefully there's only one the correspond to this workload if it finds",
    "start": "1347330",
    "end": "1352910"
  },
  {
    "text": "one then the first thing it will do is it'll generate the key for that workload on that node and this is actually a",
    "start": "1352910",
    "end": "1358520"
  },
  {
    "text": "pretty important property of spire the key material for this workload never should leave this node so generates a",
    "start": "1358520",
    "end": "1366170"
  },
  {
    "text": "key and then sends a certificate signing request back to the spire server saying hey I've got a I've got an identity I've",
    "start": "1366170",
    "end": "1373130"
  },
  {
    "text": "got a have an identity I have a I know",
    "start": "1373130",
    "end": "1378200"
  },
  {
    "text": "that it's meant to be running on this node please issue a so please issue certificates to every other identity so",
    "start": "1378200",
    "end": "1385430"
  },
  {
    "text": "that they can prove so that we can associate this key with that ID so it sends a CSR of the spire server that's",
    "start": "1385430",
    "end": "1390980"
  },
  {
    "text": "by a server make sure that this yes we do expect this workload to exist on this machine and it'll and it'll issue to",
    "start": "1390980",
    "end": "1399350"
  },
  {
    "text": "both back to the original workload and to every other workload the certificate that's necessary to verify it and then",
    "start": "1399350",
    "end": "1406850"
  },
  {
    "text": "finally the workload API will wrap all of this up and deliver this material to the workload itself so as I said this is",
    "start": "1406850",
    "end": "1416270"
  },
  {
    "text": "basically the spire authentication mechanism in a nutshell one thing that I",
    "start": "1416270",
    "end": "1421850"
  },
  {
    "text": "have in this case I've provided a contrived example but one really important point about spire is it's",
    "start": "1421850",
    "end": "1427130"
  },
  {
    "text": "extremely modular so it supports a number of different attestation mechanisms via a plug-in model and",
    "start": "1427130",
    "end": "1433660"
  },
  {
    "text": "through that a number of different selectors so selectors maybe in terms of infrastructure concepts it might also be",
    "start": "1433660",
    "end": "1439700"
  },
  {
    "text": "in terms of kubernetes concepts you might also say for example that a particular doc a a the workload must",
    "start": "1439700",
    "end": "1447800"
  },
  {
    "text": "also correspond to a particular docker image or have been started from a particular docker image with a",
    "start": "1447800",
    "end": "1453290"
  },
  {
    "text": "particular content char for example so in terms of use cases for for spiffy",
    "start": "1453290",
    "end": "1458900"
  },
  {
    "text": "inspire you know we're starting to see quite a few a very key one actually is secure introduction to secrets doors be",
    "start": "1458900",
    "end": "1465230"
  },
  {
    "text": "they things like vaults Pinterest have started using this for security action",
    "start": "1465230",
    "end": "1470270"
  },
  {
    "text": "to know because it solves quite nicely for the biggest problem with secret stores which is the secure introduction problem some",
    "start": "1470270",
    "end": "1478940"
  },
  {
    "text": "we're starting to see integration into some low-level libraries that perform authentication again you know by hooking",
    "start": "1478940",
    "end": "1484820"
  },
  {
    "text": "directly into the workload API you can avoid a lot of the nastiness involved in generating PKI and delivering it to",
    "start": "1484820",
    "end": "1491120"
  },
  {
    "text": "nodes and and the significant nuance involved if you want to automatically",
    "start": "1491120",
    "end": "1496670"
  },
  {
    "text": "rotate those keys really interesting use cases for proxies you know having rather",
    "start": "1496670",
    "end": "1501740"
  },
  {
    "text": "than necessarily building all of this into existing software systems use a proxy as an ambassador and have that",
    "start": "1501740",
    "end": "1508010"
  },
  {
    "text": "proxy call into the workload API to retrieve the identity of the workload",
    "start": "1508010",
    "end": "1513560"
  },
  {
    "text": "and the key material to prove it and use that to establish trust between trusts",
    "start": "1513560",
    "end": "1519410"
  },
  {
    "text": "to another workload another use case that we haven't seen a ton of use of yet but we think is a really compelling use",
    "start": "1519410",
    "end": "1525260"
  },
  {
    "text": "case perspire is actually simplifying the simplifying the bootstrapping of",
    "start": "1525260",
    "end": "1531790"
  },
  {
    "text": "existing distributed systems things like kubernetes although Kuban is now has a few projects to solve for this projects",
    "start": "1531790",
    "end": "1537650"
  },
  {
    "text": "like hadoop projects like chef and puppet and so forth where you also have these distributed systems where you have",
    "start": "1537650",
    "end": "1544250"
  },
  {
    "text": "different nodes with different roles that need to be able to establish material to them if you've ever tried if you've ever followed Kelsi Hightower's",
    "start": "1544250",
    "end": "1550040"
  },
  {
    "text": "cubing it is the hard way you'll know you spend the first four or five months of following their tutorial setting up",
    "start": "1550040",
    "end": "1555110"
  },
  {
    "text": "PKI so there's potentially a role for something like spire to help I'll help with that significantly we're trying to",
    "start": "1555110",
    "end": "1562940"
  },
  {
    "text": "build basically though two communities in this one of them is the community of projects that are starting to adopt the",
    "start": "1562940",
    "end": "1569600"
  },
  {
    "text": "spiffy workload API to simplify authentication and to simplify trust",
    "start": "1569600",
    "end": "1575300"
  },
  {
    "text": "establishment an equally important community is the community around spire",
    "start": "1575300",
    "end": "1580310"
  },
  {
    "text": "both getting it in place helping to build it out and making it more robust and contributing components to it again",
    "start": "1580310",
    "end": "1586280"
  },
  {
    "text": "spire is verify design extraordinarily modular which makes contributing in particular extension points for",
    "start": "1586280",
    "end": "1592040"
  },
  {
    "text": "particular environments very easy the deep dive talk tomorrow at the folks",
    "start": "1592040",
    "end": "1597470"
  },
  {
    "text": "from VMware are going to talk about the Kerberos known a tester that they built for example for folks who already have Kerberos to establish trust",
    "start": "1597470",
    "end": "1605170"
  },
  {
    "text": "but there's also extension points for different orchestra orchestrators",
    "start": "1605170",
    "end": "1610580"
  },
  {
    "text": "different operating systems and for that matter different backing CAS and secrets doors as well as things like TPMS so",
    "start": "1610580",
    "end": "1617450"
  },
  {
    "text": "this work is interesting to you by the way please do get in touch because we'd love to see more here and there's now is",
    "start": "1617450",
    "end": "1622550"
  },
  {
    "text": "an excellent time to start getting involved in the project where the bones of it are pretty well factored but there's a lot of work to do",
    "start": "1622550",
    "end": "1628520"
  },
  {
    "text": "to grow it another thing we're working on is a security audit that's due in the",
    "start": "1628520",
    "end": "1633800"
  },
  {
    "text": "next couple of months I think it's alright Justin yeah you know ultimately this is a security",
    "start": "1633800",
    "end": "1639230"
  },
  {
    "text": "product so having a good understanding of what the threat model is best practices for implementing and and and",
    "start": "1639230",
    "end": "1646220"
  },
  {
    "text": "what spiffy doesn't solve for as much as what it does solve for is particularly important and so you know we've wanted",
    "start": "1646220",
    "end": "1653180"
  },
  {
    "text": "to make sure that we have you know good visibility and a certain a certain",
    "start": "1653180",
    "end": "1660890"
  },
  {
    "text": "position from the community on where and how you should be able to trust spiffy and for that matter to help us",
    "start": "1660890",
    "end": "1666110"
  },
  {
    "text": "understand our roadmap so we should be I think in the next couple of months we should be having some some more public discussion about that it's and actually",
    "start": "1666110",
    "end": "1675200"
  },
  {
    "text": "that's a good segue into what spiffy isn't because this is often misunderstood spiffy is about identity",
    "start": "1675200",
    "end": "1681350"
  },
  {
    "text": "you could argue spiffiest to a certain extent about authentication what it is not is about authorization spiffy will",
    "start": "1681350",
    "end": "1687680"
  },
  {
    "text": "tell you who you're talking to it won't tell you if you should",
    "start": "1687680",
    "end": "1692750"
  },
  {
    "text": "that's authorization and that's a policy decision that you can implement separately the good news is there's a bunch of very interesting projects that",
    "start": "1692750",
    "end": "1699350"
  },
  {
    "text": "are starting to tackle that in a meaningful way and there's plenty of different protocols for mediating authorization are several different",
    "start": "1699350",
    "end": "1705110"
  },
  {
    "text": "proxies as you know and then there are a number of different policy engines that are starting to provide a way of of",
    "start": "1705110",
    "end": "1711080"
  },
  {
    "text": "taking the configuration for these things and rolling them up in a useful way so there's a lot of good work happening there we see spiffy airs very",
    "start": "1711080",
    "end": "1717440"
  },
  {
    "text": "much a fundamental pillar upon which systems can be built the other thing it's not it's not transport level",
    "start": "1717440",
    "end": "1723440"
  },
  {
    "text": "security spiffy will give you IDs it'll give you documents to prove those IDs but it doesn't actually mitigate a",
    "start": "1723440",
    "end": "1729650"
  },
  {
    "text": "connection for you it doesn't reason about the IP address that a remote workload is running on it doesn't reason about how to negotiate a connection to",
    "start": "1729650",
    "end": "1736370"
  },
  {
    "text": "that that is left to the protocols themselves again good news is there's plenty of prior out there that we can lean on",
    "start": "1736370",
    "end": "1742649"
  },
  {
    "text": "already so you can use x.509 certificates generated by spiffy to mimic to establish a TLS connection you",
    "start": "1742649",
    "end": "1748860"
  },
  {
    "text": "can use them to sign a jot token and you know we hope to see again more and more projects aligned around",
    "start": "1748860",
    "end": "1755190"
  },
  {
    "text": "that but fundamentally spiffy is about identity so finally I wanted to close",
    "start": "1755190",
    "end": "1760350"
  },
  {
    "text": "out on some of the things we didn't talk about to wet your appetite a little bit you know the as I said spire is",
    "start": "1760350",
    "end": "1767100"
  },
  {
    "text": "extremely modular you can integrate it into custom as well as custom PKI infrastructure also custom data stores",
    "start": "1767100",
    "end": "1772850"
  },
  {
    "text": "we haven't talked about that much yet there's a number of interesting design patterns coming out we had a talk",
    "start": "1772850",
    "end": "1778500"
  },
  {
    "text": "earlier today about a design pattern whereby spiffy can be used with vault or",
    "start": "1778500",
    "end": "1784320"
  },
  {
    "text": "for that matter any robust secret store to be able to act as an identity translation layer for projects that",
    "start": "1784320",
    "end": "1790380"
  },
  {
    "text": "aren't necessarily sniffing away yet like a database for example and provide you know richer echoing policies you",
    "start": "1790380",
    "end": "1797610"
  },
  {
    "text": "know service meshes obviously I'm gonna call it a design pattern here is a really interesting model whereby you",
    "start": "1797610",
    "end": "1802679"
  },
  {
    "text": "have these Ambassador proxies running everywhere an obvious integration point for spiffy inspire and we have to have more talks",
    "start": "1802679",
    "end": "1808770"
  },
  {
    "text": "on that in the future another piece that we will totally talk about later at some",
    "start": "1808770",
    "end": "1814260"
  },
  {
    "text": "point is Federation again this ability to be able to take multiple spiffy compliant pieces of infrastructure and",
    "start": "1814260",
    "end": "1820830"
  },
  {
    "text": "have them peer with each other and establish mutual trust even though the identity providers are logically",
    "start": "1820830",
    "end": "1826740"
  },
  {
    "text": "distinct pieces of infrastructure and we did talk about the security order this time but there'll be more details coming",
    "start": "1826740",
    "end": "1834360"
  },
  {
    "text": "later so we'll take some questions in a second but I'll close out on saying we've got as well as the deep dive",
    "start": "1834360",
    "end": "1840809"
  },
  {
    "text": "tomorrow and as well as several panels going on throughout the week we also have we also have a great community",
    "start": "1840809",
    "end": "1847020"
  },
  {
    "text": "online so I'd encourage folks who are interested in this problem space to jump",
    "start": "1847020",
    "end": "1852120"
  },
  {
    "text": "on slack get involved in the community and of course find the code on github and get involved there as well and thank",
    "start": "1852120",
    "end": "1859980"
  },
  {
    "text": "you good that all",
    "start": "1859980",
    "end": "1863330"
  },
  {
    "text": "we got any questions so I didn't notice",
    "start": "1866540",
    "end": "1874380"
  },
  {
    "text": "how you solve the problem of it working only if everything's on the same platform so the the so spire can run on",
    "start": "1874380",
    "end": "1886350"
  },
  {
    "text": "multiple platforms you can you can have a workload running in AWS you can have a workload running in Google Google Cloud",
    "start": "1886350",
    "end": "1894690"
  },
  {
    "text": "for example they can both have they both have identities issued to them by the same spy server yes if you want to",
    "start": "1894690",
    "end": "1904380"
  },
  {
    "text": "another model would be you have to spy servers and you federate to them but the idea behind it is that the the spire",
    "start": "1904380",
    "end": "1914130"
  },
  {
    "text": "deployment itself can span multiple different providers it doesn't miss it's not necessarily limited to one",
    "start": "1914130",
    "end": "1921919"
  },
  {
    "text": "hopefully at some point that's what--that's that's where Federation comes into this and that is I won't you",
    "start": "1938510",
    "end": "1944850"
  },
  {
    "text": "know super interesting problem that's where we want to be I wouldn't call it a solve problem at this point yeah",
    "start": "1944850",
    "end": "1959430"
  },
  {
    "text": "certainly so the question was how does this apply to service and we're still working through some design patterns",
    "start": "1959430",
    "end": "1964950"
  },
  {
    "text": "there to be honest one of them is you have very fat client libraries that do a lot of the work of the spire agent which",
    "start": "1964950",
    "end": "1971130"
  },
  {
    "text": "is a model that works but it's not a great model another one is that you have you know an ambassador proxy that you're",
    "start": "1971130",
    "end": "1977400"
  },
  {
    "text": "able to establish trust from the service component to there's a project called",
    "start": "1977400",
    "end": "1982740"
  },
  {
    "text": "glue I think Glu you that's starting to do that the other model the ideal the",
    "start": "1982740",
    "end": "1988080"
  },
  {
    "text": "long-term model is for cloud providers to start baking these primitives in so you can start using you can just",
    "start": "1988080",
    "end": "1993540"
  },
  {
    "text": "retrieve the identity directly yeah with pass if you don't have direct access to",
    "start": "1993540",
    "end": "2001640"
  },
  {
    "text": "the infrastructure of the past platform then yeah that's the model you end up looking at understood correctly that the",
    "start": "2001640",
    "end": "2013340"
  },
  {
    "text": "trust between the agent and the spire servers is to establish true Amazon certificates in the case you given but",
    "start": "2013340",
    "end": "2020210"
  },
  {
    "text": "is there another way to do that or that the only way because I feel they're",
    "start": "2020210",
    "end": "2025400"
  },
  {
    "text": "there they're there needs to be a trust between the agent of the server somehow",
    "start": "2025400",
    "end": "2031610"
  },
  {
    "text": "so how does that get bootstrap in a case where you don't run Amazon that's exactly right we so that the example we",
    "start": "2031610",
    "end": "2038000"
  },
  {
    "text": "gave you is for a workload running on Amazon but it is there are multiple ways to do it and it is extremely extensible",
    "start": "2038000",
    "end": "2044240"
  },
  {
    "text": "so if you're running in Google Cloud for example you could use the the GCE instance metadata API which provides a",
    "start": "2044240",
    "end": "2051290"
  },
  {
    "text": "an equivalent but different document another model is if you have say TPMS or HSMs you can you can have a you can lean",
    "start": "2051290",
    "end": "2058730"
  },
  {
    "text": "into the TPM and sign a nonce and use that to establish trust if you have Kerberos that you've already",
    "start": "2058730",
    "end": "2064358"
  },
  {
    "text": "used to establish trust if you have met these you can lean on a Kerberos ticket",
    "start": "2064359",
    "end": "2069490"
  },
  {
    "text": "if you like and then you can you can use manual join tokens if you really want to as well so but the general idea here is",
    "start": "2069490",
    "end": "2076720"
  },
  {
    "text": "that the this attestation framework is pluggable so if you already have some way of establishing trust of the node",
    "start": "2076720",
    "end": "2082358"
  },
  {
    "text": "you can write a plug-in for spire and make it work question of the back hi",
    "start": "2082359",
    "end": "2095408"
  },
  {
    "text": "this might be a stupid question but what about using spiffy on the client-side let's say that I have like a factory",
    "start": "2095409",
    "end": "2102160"
  },
  {
    "text": "that produces a lot of IOT devices and I want to bootstrap the IOT devices with spiffy is that possible it's a good",
    "start": "2102160",
    "end": "2110319"
  },
  {
    "text": "question it's a use case that's come up a few times the if you can the way I",
    "start": "2110319",
    "end": "2116950"
  },
  {
    "text": "would frame it is to say if you can if you have a way of establishing trust to the device if you have some say embedded",
    "start": "2116950",
    "end": "2122710"
  },
  {
    "text": "credential inside the device itself then you can use you can write a you could",
    "start": "2122710",
    "end": "2128799"
  },
  {
    "text": "write an attest earth that could lean into that and then use that to establish 50 IDs to your software that's running",
    "start": "2128799",
    "end": "2134710"
  },
  {
    "text": "on the device so yes there's definitely a model question",
    "start": "2134710",
    "end": "2142170"
  },
  {
    "text": "how do you establish trust between the spiffy agent and the your code because",
    "start": "2145600",
    "end": "2151420"
  },
  {
    "text": "this vacations gonna tell it what else to trust yeah so the spiffy in the model",
    "start": "2151420",
    "end": "2157060"
  },
  {
    "text": "we showed the spiffy agent is actually leaning on the colonel to provide trust so in this case the the workload calls",
    "start": "2157060",
    "end": "2162820"
  },
  {
    "text": "the spiffy API with via a UNIX domain socket the the agent will then use the",
    "start": "2162820",
    "end": "2169810"
  },
  {
    "text": "metadata it gets from that call to go back to the kernel and say well ok tell me tell me who this is give me it spit",
    "start": "2169810",
    "end": "2175240"
  },
  {
    "text": "you ID and so forth I can then it can nearly lean into other things like couplets if it needs to what I mean is",
    "start": "2175240",
    "end": "2181120"
  },
  {
    "text": "how does your app know that the spiffy agent is trustworthy oh I see it doesn't",
    "start": "2181120",
    "end": "2187420"
  },
  {
    "text": "it has it has to trust we assume that the in this case we have a model that assumes that the that the spiffy",
    "start": "2187420",
    "end": "2194260"
  },
  {
    "text": "infrastructure itself is trustworthy the app may not be",
    "start": "2194260",
    "end": "2198720"
  },
  {
    "text": "I see did I answer the question properly I see",
    "start": "2210270",
    "end": "2220590"
  },
  {
    "text": "so well yes to an extent right it's a it's a in this case a proper but that",
    "start": "2220590",
    "end": "2230100"
  },
  {
    "text": "said it's the we assume at this point",
    "start": "2230100",
    "end": "2235680"
  },
  {
    "text": "it's the responsibility of the infrastructure provider to maintain that so it's the responsibility of the spiffy implementer basically so hopefully the",
    "start": "2235680",
    "end": "2244500"
  },
  {
    "text": "credentials you get from this fake system aren't actually usable in any meaningful way yeah and there may be",
    "start": "2244500",
    "end": "2249780"
  },
  {
    "text": "ways in the future to mitigate some of that which is part of what we'll have a discussion about when we start to talk",
    "start": "2249780",
    "end": "2255720"
  },
  {
    "text": "about the security audit results a bit",
    "start": "2255720",
    "end": "2260180"
  },
  {
    "text": "cool question of the back",
    "start": "2261170",
    "end": "2264859"
  },
  {
    "text": "and how is the trust established between the agent and the spiffy server so when",
    "start": "2266269",
    "end": "2272609"
  },
  {
    "text": "it come you communicates I mean it probably uses TLS for that or something like that yes so the I think there's two",
    "start": "2272609",
    "end": "2280739"
  },
  {
    "text": "parts to that it is mutual TLS between the two okay the way the way that we",
    "start": "2280739",
    "end": "2286769"
  },
  {
    "text": "Estelle sari was your question about how the how the how the agent trusts the server exactly so that when agent",
    "start": "2286769",
    "end": "2293849"
  },
  {
    "text": "communicates to the spiffy server that he knows that it is - correct server not someone else",
    "start": "2293849",
    "end": "2299569"
  },
  {
    "text": "that's a great question there is a there's a there's a pre-established certificate that you can deploy that can",
    "start": "2299569",
    "end": "2305039"
  },
  {
    "text": "verify it there is I believe a better way of doing it than just trusting the pre-established key that you can rotate",
    "start": "2305039",
    "end": "2311489"
  },
  {
    "text": "but I could be wrong about that don't",
    "start": "2311489",
    "end": "2317160"
  },
  {
    "text": "even microphones so when you you install the agent it'll come with its initial bundle from the server and then that",
    "start": "2317160",
    "end": "2323039"
  },
  {
    "text": "gets rotated - yep so when you install",
    "start": "2323039",
    "end": "2329729"
  },
  {
    "text": "the agent it'll come with a bundle from the server so you don't man-in-the-middle it so it just doesn't",
    "start": "2329729",
    "end": "2334890"
  },
  {
    "text": "take it by default so you all have that trust and then that gets rotated also so",
    "start": "2334890",
    "end": "2340979"
  },
  {
    "text": "those sorts can get rotated and the big thing is that up and down the whole scheme just from intermediate up to and",
    "start": "2340979",
    "end": "2348329"
  },
  {
    "text": "the sign insert which will be upstream that could all be all rotated also",
    "start": "2348329",
    "end": "2354349"
  },
  {
    "text": "deployed",
    "start": "2354349",
    "end": "2357349"
  },
  {
    "text": "so regarding the the authentication between agent and the server using the",
    "start": "2363380",
    "end": "2369200"
  },
  {
    "text": "AWS metadata if you have a workload on that instance which is configured in such a way that it has unrestricted",
    "start": "2369200",
    "end": "2375200"
  },
  {
    "text": "network access what's to prevent the workload from fetching the instance metadata and pretending to be a spiffy",
    "start": "2375200",
    "end": "2381680"
  },
  {
    "text": "aspire agent to the spire server not a lot but then again the only thing it",
    "start": "2381680",
    "end": "2387470"
  },
  {
    "text": "would be able to have access to is to workload metadata locally metadata from",
    "start": "2387470",
    "end": "2393200"
  },
  {
    "text": "that node so really if you if you're saying what's 50 doesn't provide is any",
    "start": "2393200",
    "end": "2400580"
  },
  {
    "text": "isolation guarantees between processes running on that node so if you have a mechanism for providing that isolation spiffy can work with it in order to",
    "start": "2400580",
    "end": "2407270"
  },
  {
    "text": "issue identities but it doesn't guarantee that isolation in any way so if you trust kubernetes to provide that isolate or you know container runtime to",
    "start": "2407270",
    "end": "2413930"
  },
  {
    "text": "provide that isolation for you for example then spiff you can work with it but it won't guarantee that so if your",
    "start": "2413930",
    "end": "2419720"
  },
  {
    "text": "container isolation fails then it will Felton",
    "start": "2419720",
    "end": "2424720"
  },
  {
    "text": "all right I think that's it for questions thank you so much for sticking with us guys [Applause]",
    "start": "2429280",
    "end": "2436590"
  }
]