[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "all right thank you very much um as",
    "start": "0",
    "end": "2000"
  },
  {
    "text": "mentioned my name is derek parker",
    "start": "2000",
    "end": "4080"
  },
  {
    "text": "and first i would just like to start off",
    "start": "4080",
    "end": "5520"
  },
  {
    "text": "by thanking the organizers for allowing",
    "start": "5520",
    "end": "7680"
  },
  {
    "text": "me to present this talk here and for",
    "start": "7680",
    "end": "10000"
  },
  {
    "text": "everybody in the audience in person in",
    "start": "10000",
    "end": "12160"
  },
  {
    "text": "virtual for checking this talk out it's",
    "start": "12160",
    "end": "14080"
  },
  {
    "text": "something that i'm very excited about uh",
    "start": "14080",
    "end": "16800"
  },
  {
    "text": "so as mentioned the title of this talk",
    "start": "16800",
    "end": "18800"
  },
  {
    "text": "is debuggers and ebpf bringing debugging",
    "start": "18800",
    "end": "21359"
  },
  {
    "text": "to production",
    "start": "21359",
    "end": "22880"
  },
  {
    "start": "22000",
    "end": "113000"
  },
  {
    "text": "so as you might be able to tell just",
    "start": "22880",
    "end": "24800"
  },
  {
    "text": "from the title we're entering into uh",
    "start": "24800",
    "end": "27599"
  },
  {
    "text": "something a little bit different than",
    "start": "27599",
    "end": "29279"
  },
  {
    "text": "most of the talks that we've had so far",
    "start": "29279",
    "end": "30960"
  },
  {
    "text": "around networking and security and",
    "start": "30960",
    "end": "32398"
  },
  {
    "text": "things like that so um",
    "start": "32399",
    "end": "35440"
  },
  {
    "text": "the the bulk of this talk is going to be",
    "start": "35440",
    "end": "37840"
  },
  {
    "text": "centered around",
    "start": "37840",
    "end": "39200"
  },
  {
    "text": "my personal experience",
    "start": "39200",
    "end": "41440"
  },
  {
    "text": "rewriting",
    "start": "41440",
    "end": "42879"
  },
  {
    "text": "the delve debugger tracing back end",
    "start": "42879",
    "end": "46640"
  },
  {
    "text": "using ebpf",
    "start": "46640",
    "end": "48559"
  },
  {
    "text": "now if you're not familiar uh delve is a",
    "start": "48559",
    "end": "50879"
  },
  {
    "text": "is a debugger for the go programming",
    "start": "50879",
    "end": "52480"
  },
  {
    "text": "language and it has a trace sub command",
    "start": "52480",
    "end": "55120"
  },
  {
    "text": "so if you think of something like s",
    "start": "55120",
    "end": "56399"
  },
  {
    "text": "trace or something like that it's",
    "start": "56399",
    "end": "57760"
  },
  {
    "text": "somewhat similar except for in this case",
    "start": "57760",
    "end": "59920"
  },
  {
    "text": "we're kind of talking about user space",
    "start": "59920",
    "end": "61520"
  },
  {
    "text": "tracing",
    "start": "61520",
    "end": "62719"
  },
  {
    "text": "so",
    "start": "62719",
    "end": "63440"
  },
  {
    "text": "if you want to take and kind of spy on",
    "start": "63440",
    "end": "65280"
  },
  {
    "text": "your programs and see what they're doing",
    "start": "65280",
    "end": "66720"
  },
  {
    "text": "in real time without dropping into a",
    "start": "66720",
    "end": "69439"
  },
  {
    "text": "full interactive debug session this is a",
    "start": "69439",
    "end": "71840"
  },
  {
    "text": "way to do that",
    "start": "71840",
    "end": "73119"
  },
  {
    "text": "and i say",
    "start": "73119",
    "end": "74400"
  },
  {
    "text": "bringing debugging to production because",
    "start": "74400",
    "end": "76240"
  },
  {
    "text": "typically when you think about debuggers",
    "start": "76240",
    "end": "77680"
  },
  {
    "text": "you think about kind of like a slow",
    "start": "77680",
    "end": "79759"
  },
  {
    "text": "methodical back and forth kind of",
    "start": "79759",
    "end": "82159"
  },
  {
    "text": "conversation that you're having with",
    "start": "82159",
    "end": "83439"
  },
  {
    "text": "your program where you're asking it a",
    "start": "83439",
    "end": "84799"
  },
  {
    "text": "bunch of questions you expect some sort",
    "start": "84799",
    "end": "86799"
  },
  {
    "text": "of responses and hopefully you figure",
    "start": "86799",
    "end": "88560"
  },
  {
    "text": "out what's going on",
    "start": "88560",
    "end": "90000"
  },
  {
    "text": "but what i want to talk about today",
    "start": "90000",
    "end": "91520"
  },
  {
    "text": "specifically is",
    "start": "91520",
    "end": "93360"
  },
  {
    "text": "more spying on your program um just kind",
    "start": "93360",
    "end": "96240"
  },
  {
    "text": "of seeing what it's doing under the hood",
    "start": "96240",
    "end": "98159"
  },
  {
    "text": "from a user space perspective the actual",
    "start": "98159",
    "end": "100720"
  },
  {
    "text": "functions that you've written um",
    "start": "100720",
    "end": "103280"
  },
  {
    "text": "and doing that in a way that's that's",
    "start": "103280",
    "end": "104960"
  },
  {
    "text": "performance so that maybe you can",
    "start": "104960",
    "end": "106320"
  },
  {
    "text": "actually spy on your your software",
    "start": "106320",
    "end": "109119"
  },
  {
    "text": "that's running in in production",
    "start": "109119",
    "end": "113240"
  },
  {
    "start": "113000",
    "end": "152000"
  },
  {
    "text": "so we've already done a little bit of",
    "start": "114079",
    "end": "115840"
  },
  {
    "text": "introductions but again my name is derek",
    "start": "115840",
    "end": "117360"
  },
  {
    "text": "parker i'm a senior software engineer at",
    "start": "117360",
    "end": "119920"
  },
  {
    "text": "red hat",
    "start": "119920",
    "end": "121280"
  },
  {
    "text": "where i work on upstream go and i also",
    "start": "121280",
    "end": "123200"
  },
  {
    "text": "work on delve as well",
    "start": "123200",
    "end": "124880"
  },
  {
    "text": "um so",
    "start": "124880",
    "end": "126159"
  },
  {
    "text": "this being kind of my experience uh",
    "start": "126159",
    "end": "128640"
  },
  {
    "text": "using this with the delve debugger some",
    "start": "128640",
    "end": "130399"
  },
  {
    "text": "of this stuff might be a little bit",
    "start": "130399",
    "end": "132000"
  },
  {
    "text": "ghost-centric but the bulk of it is",
    "start": "132000",
    "end": "133840"
  },
  {
    "text": "about how",
    "start": "133840",
    "end": "135520"
  },
  {
    "text": "the tool uses ebpf so there's going to",
    "start": "135520",
    "end": "137840"
  },
  {
    "text": "be a lot of talking about you probes you",
    "start": "137840",
    "end": "141120"
  },
  {
    "text": "probes all that fun stuff and especially",
    "start": "141120",
    "end": "143200"
  },
  {
    "text": "how we can coordinate and communicate",
    "start": "143200",
    "end": "145120"
  },
  {
    "text": "between a user space program i.e the",
    "start": "145120",
    "end": "147440"
  },
  {
    "text": "debugger and the ebpf program that's",
    "start": "147440",
    "end": "149599"
  },
  {
    "text": "running in kernel space",
    "start": "149599",
    "end": "152560"
  },
  {
    "start": "152000",
    "end": "178000"
  },
  {
    "text": "so first off",
    "start": "153280",
    "end": "154560"
  },
  {
    "text": "why right the the the essential question",
    "start": "154560",
    "end": "156720"
  },
  {
    "text": "that you have to ask with any of this",
    "start": "156720",
    "end": "157920"
  },
  {
    "text": "stuff is is why i mentioned initially",
    "start": "157920",
    "end": "160319"
  },
  {
    "text": "that i'm rewriting the implementation so",
    "start": "160319",
    "end": "162239"
  },
  {
    "text": "the implementation is already there",
    "start": "162239",
    "end": "164720"
  },
  {
    "text": "why why am i spending time on this",
    "start": "164720",
    "end": "168400"
  },
  {
    "text": "we have p trace and if you're not",
    "start": "169280",
    "end": "170720"
  },
  {
    "text": "familiar with p trace",
    "start": "170720",
    "end": "172319"
  },
  {
    "text": "i'll explain in a little bit but you",
    "start": "172319",
    "end": "174000"
  },
  {
    "text": "already have we already have an existing",
    "start": "174000",
    "end": "175360"
  },
  {
    "text": "solution shouldn't it shouldn't that be",
    "start": "175360",
    "end": "176800"
  },
  {
    "text": "enough",
    "start": "176800",
    "end": "179120"
  },
  {
    "start": "178000",
    "end": "206000"
  },
  {
    "text": "let's take a little bit of a digression",
    "start": "179360",
    "end": "180720"
  },
  {
    "text": "so if you're not",
    "start": "180720",
    "end": "182159"
  },
  {
    "text": "explicitly familiar with p trace i'll",
    "start": "182159",
    "end": "184080"
  },
  {
    "text": "talk about it just for a second",
    "start": "184080",
    "end": "186159"
  },
  {
    "text": "essentially it's process trace um it's a",
    "start": "186159",
    "end": "189280"
  },
  {
    "text": "feature of a lot of unixy systems",
    "start": "189280",
    "end": "190879"
  },
  {
    "text": "there's parallels and other non-unix",
    "start": "190879",
    "end": "192640"
  },
  {
    "text": "systems as well",
    "start": "192640",
    "end": "194000"
  },
  {
    "text": "but it essentially",
    "start": "194000",
    "end": "195680"
  },
  {
    "text": "provides a means for a user space",
    "start": "195680",
    "end": "197519"
  },
  {
    "text": "program to take over inspect control",
    "start": "197519",
    "end": "200560"
  },
  {
    "text": "another user space program it's",
    "start": "200560",
    "end": "201840"
  },
  {
    "text": "basically how debuggers work underneath",
    "start": "201840",
    "end": "203680"
  },
  {
    "text": "the hood",
    "start": "203680",
    "end": "206000"
  },
  {
    "text": "however there's a problem with it",
    "start": "206720",
    "end": "209360"
  },
  {
    "text": "p trace is pretty slow and i mentioned",
    "start": "209360",
    "end": "211760"
  },
  {
    "text": "petraeus specifically in this talk but",
    "start": "211760",
    "end": "215280"
  },
  {
    "text": "sis calls are slow is really what it",
    "start": "215280",
    "end": "216959"
  },
  {
    "text": "comes down to at the end of the day",
    "start": "216959",
    "end": "218879"
  },
  {
    "text": "and i'll i'll kind of dig into why that",
    "start": "218879",
    "end": "220640"
  },
  {
    "text": "that is so problematic for us",
    "start": "220640",
    "end": "222720"
  },
  {
    "text": "but p-trace and syscalls kind of in",
    "start": "222720",
    "end": "224720"
  },
  {
    "text": "general are slow they're very slow",
    "start": "224720",
    "end": "227290"
  },
  {
    "text": "[Music]",
    "start": "227290",
    "end": "229120"
  },
  {
    "start": "228000",
    "end": "311000"
  },
  {
    "text": "so i when i was initially starting to",
    "start": "229120",
    "end": "231200"
  },
  {
    "text": "work on this implementation i did a",
    "start": "231200",
    "end": "233040"
  },
  {
    "text": "little bit of testing",
    "start": "233040",
    "end": "234480"
  },
  {
    "text": "and some measuring and i wrote just kind",
    "start": "234480",
    "end": "236959"
  },
  {
    "text": "of like a small example toy program",
    "start": "236959",
    "end": "239120"
  },
  {
    "text": "measured how long it took to execute and",
    "start": "239120",
    "end": "240959"
  },
  {
    "text": "then measured how long it took to",
    "start": "240959",
    "end": "242159"
  },
  {
    "text": "execute",
    "start": "242159",
    "end": "243599"
  },
  {
    "text": "with different kinds of tracing",
    "start": "243599",
    "end": "246080"
  },
  {
    "text": "implementations on top of it so as you",
    "start": "246080",
    "end": "248239"
  },
  {
    "text": "can see the program execution just by",
    "start": "248239",
    "end": "250319"
  },
  {
    "text": "itself is around 23 microseconds we're",
    "start": "250319",
    "end": "253840"
  },
  {
    "text": "talking microseconds not milliseconds",
    "start": "253840",
    "end": "255840"
  },
  {
    "text": "we're talking like extremely extremely",
    "start": "255840",
    "end": "257440"
  },
  {
    "text": "quick",
    "start": "257440",
    "end": "258479"
  },
  {
    "text": "so with the ebpf base tracer you can see",
    "start": "258479",
    "end": "261359"
  },
  {
    "text": "it balloons up",
    "start": "261359",
    "end": "262800"
  },
  {
    "text": "a decent amount so we go from 23 to",
    "start": "262800",
    "end": "265120"
  },
  {
    "text": "about 683",
    "start": "265120",
    "end": "266800"
  },
  {
    "text": "but but still remember we're talking",
    "start": "266800",
    "end": "269199"
  },
  {
    "text": "about microseconds like this is this is",
    "start": "269199",
    "end": "271680"
  },
  {
    "text": "not this is you know a decent amount of",
    "start": "271680",
    "end": "274240"
  },
  {
    "text": "overhead but",
    "start": "274240",
    "end": "275840"
  },
  {
    "text": "nothing too crazy then we look at the",
    "start": "275840",
    "end": "278000"
  },
  {
    "text": "traditional based the the",
    "start": "278000",
    "end": "280080"
  },
  {
    "text": "traditional approach of p-trace space",
    "start": "280080",
    "end": "281840"
  },
  {
    "text": "tracing and we go all the way up to 2.3",
    "start": "281840",
    "end": "284400"
  },
  {
    "text": "seconds",
    "start": "284400",
    "end": "285440"
  },
  {
    "text": "now for a program that executes in that",
    "start": "285440",
    "end": "288240"
  },
  {
    "text": "small amount of time",
    "start": "288240",
    "end": "289759"
  },
  {
    "text": "ballooning up",
    "start": "289759",
    "end": "291280"
  },
  {
    "text": "several several orders of magnitude of",
    "start": "291280",
    "end": "293600"
  },
  {
    "text": "overhead would never be viable in",
    "start": "293600",
    "end": "295600"
  },
  {
    "text": "production",
    "start": "295600",
    "end": "296479"
  },
  {
    "text": "so this is kind of the basis for this",
    "start": "296479",
    "end": "298000"
  },
  {
    "text": "work is how can we bring this kind of",
    "start": "298000",
    "end": "300000"
  },
  {
    "text": "user space tracing a little bit more",
    "start": "300000",
    "end": "302400"
  },
  {
    "text": "interactive and ask these kind of",
    "start": "302400",
    "end": "304000"
  },
  {
    "text": "questions to a process that's",
    "start": "304000",
    "end": "305919"
  },
  {
    "text": "potentially running in production in in",
    "start": "305919",
    "end": "307680"
  },
  {
    "text": "a kubernetes cluster or somewhere else",
    "start": "307680",
    "end": "311759"
  },
  {
    "start": "311000",
    "end": "372000"
  },
  {
    "text": "so let's talk a little bit about why p",
    "start": "311759",
    "end": "313360"
  },
  {
    "text": "trace is so slow",
    "start": "313360",
    "end": "316319"
  },
  {
    "text": "essentially what it comes down to is the",
    "start": "316800",
    "end": "318479"
  },
  {
    "text": "syscall overhead",
    "start": "318479",
    "end": "320560"
  },
  {
    "text": "the user space and kernel context",
    "start": "320560",
    "end": "322160"
  },
  {
    "text": "switching gets very very expensive",
    "start": "322160",
    "end": "323919"
  },
  {
    "text": "especially when you have to do",
    "start": "323919",
    "end": "326639"
  },
  {
    "text": "those kinds of operations multiple times",
    "start": "326639",
    "end": "328720"
  },
  {
    "text": "per trace so say for example you're",
    "start": "328720",
    "end": "331440"
  },
  {
    "text": "tracing the the the entry point and the",
    "start": "331440",
    "end": "334479"
  },
  {
    "text": "exit point of a function when you hit",
    "start": "334479",
    "end": "336080"
  },
  {
    "text": "the entry point you want to get the",
    "start": "336080",
    "end": "338000"
  },
  {
    "text": "arguments to the function and things",
    "start": "338000",
    "end": "339440"
  },
  {
    "text": "like that that could potentially be",
    "start": "339440",
    "end": "341600"
  },
  {
    "text": "you know",
    "start": "341600",
    "end": "342560"
  },
  {
    "text": "a single p-trace call for every argument",
    "start": "342560",
    "end": "345039"
  },
  {
    "text": "and then if you want to follow pointers",
    "start": "345039",
    "end": "346800"
  },
  {
    "text": "now you have even more",
    "start": "346800",
    "end": "348320"
  },
  {
    "text": "p-trace calls and you're inspecting more",
    "start": "348320",
    "end": "349919"
  },
  {
    "text": "things so this kind of can balloon out",
    "start": "349919",
    "end": "351440"
  },
  {
    "text": "of control really quickly and get a lot",
    "start": "351440",
    "end": "354000"
  },
  {
    "text": "of overhead",
    "start": "354000",
    "end": "356560"
  },
  {
    "text": "and",
    "start": "356639",
    "end": "357520"
  },
  {
    "text": "additionally if you want to do",
    "start": "357520",
    "end": "360080"
  },
  {
    "text": "inputs and exits that's two stops you're",
    "start": "360080",
    "end": "363039"
  },
  {
    "text": "stopping at where the function starts",
    "start": "363039",
    "end": "365039"
  },
  {
    "text": "and where the function returns and",
    "start": "365039",
    "end": "366319"
  },
  {
    "text": "you're doing potentially multiple p",
    "start": "366319",
    "end": "367759"
  },
  {
    "text": "trace events within that so overall",
    "start": "367759",
    "end": "370240"
  },
  {
    "text": "there's just a lot of overhead",
    "start": "370240",
    "end": "373280"
  },
  {
    "start": "372000",
    "end": "386000"
  },
  {
    "text": "so our solution to this is let's use",
    "start": "373280",
    "end": "375440"
  },
  {
    "text": "eppf why do we have to do any of this",
    "start": "375440",
    "end": "378000"
  },
  {
    "text": "context switching can we we can do",
    "start": "378000",
    "end": "379600"
  },
  {
    "text": "better the the technology is there",
    "start": "379600",
    "end": "382080"
  },
  {
    "text": "um",
    "start": "382080",
    "end": "383280"
  },
  {
    "text": "so ebpf turns out to be very fast again",
    "start": "383280",
    "end": "386800"
  },
  {
    "start": "386000",
    "end": "398000"
  },
  {
    "text": "when we look at the benchmarking there",
    "start": "386800",
    "end": "388479"
  },
  {
    "text": "is still some overhead there but but in",
    "start": "388479",
    "end": "390800"
  },
  {
    "text": "terms of of the other solutions that we",
    "start": "390800",
    "end": "393440"
  },
  {
    "text": "have right now it's it's pretty",
    "start": "393440",
    "end": "394639"
  },
  {
    "text": "negligible",
    "start": "394639",
    "end": "395759"
  },
  {
    "text": "um",
    "start": "395759",
    "end": "397280"
  },
  {
    "text": "so",
    "start": "397280",
    "end": "398880"
  },
  {
    "start": "398000",
    "end": "438000"
  },
  {
    "text": "let's dig into a little bit about why",
    "start": "398880",
    "end": "400319"
  },
  {
    "text": "ebpf is so fast",
    "start": "400319",
    "end": "402639"
  },
  {
    "text": "first it runs in the kernel right so",
    "start": "402639",
    "end": "404479"
  },
  {
    "text": "there's no contact switching we get rid",
    "start": "404479",
    "end": "406160"
  },
  {
    "text": "of that overhead just right off right",
    "start": "406160",
    "end": "408479"
  },
  {
    "text": "out of the gate",
    "start": "408479",
    "end": "410800"
  },
  {
    "text": "and",
    "start": "410800",
    "end": "411840"
  },
  {
    "text": "on top of that ebpf programs are are",
    "start": "411840",
    "end": "413680"
  },
  {
    "text": "typically small targeted programs so the",
    "start": "413680",
    "end": "415680"
  },
  {
    "text": "execution of those programs happens very",
    "start": "415680",
    "end": "417440"
  },
  {
    "text": "quickly",
    "start": "417440",
    "end": "419280"
  },
  {
    "text": "so",
    "start": "419280",
    "end": "420240"
  },
  {
    "text": "we're not kind of running in huge loops",
    "start": "420240",
    "end": "422080"
  },
  {
    "text": "and unconstrained uh kind of behavior",
    "start": "422080",
    "end": "426000"
  },
  {
    "text": "and that single program that single stop",
    "start": "426000",
    "end": "428400"
  },
  {
    "text": "can can",
    "start": "428400",
    "end": "429840"
  },
  {
    "text": "by itself gather all of the data that we",
    "start": "429840",
    "end": "432000"
  },
  {
    "text": "need and send it back to user space",
    "start": "432000",
    "end": "434160"
  },
  {
    "text": "without doing multiple points of contact",
    "start": "434160",
    "end": "436479"
  },
  {
    "text": "switching",
    "start": "436479",
    "end": "438479"
  },
  {
    "start": "438000",
    "end": "497000"
  },
  {
    "text": "so",
    "start": "438479",
    "end": "439520"
  },
  {
    "text": "let's talk about the requirements that",
    "start": "439520",
    "end": "440880"
  },
  {
    "text": "we had for our tracing back end because",
    "start": "440880",
    "end": "442639"
  },
  {
    "text": "i think this is where it gets the most",
    "start": "442639",
    "end": "444319"
  },
  {
    "text": "interesting um",
    "start": "444319",
    "end": "446319"
  },
  {
    "text": "in my opinion so one of the things that",
    "start": "446319",
    "end": "448080"
  },
  {
    "text": "we wanted to do one of the requirements",
    "start": "448080",
    "end": "451039"
  },
  {
    "text": "was essentially it has it has to",
    "start": "451039",
    "end": "452800"
  },
  {
    "text": "maintain parity with the existing uh",
    "start": "452800",
    "end": "454720"
  },
  {
    "text": "tracing implementation right so we need",
    "start": "454720",
    "end": "456880"
  },
  {
    "text": "to be able to trace arbitrary functions",
    "start": "456880",
    "end": "458960"
  },
  {
    "text": "that's very interesting to me because a",
    "start": "458960",
    "end": "460720"
  },
  {
    "text": "lot of the use cases for ebpf programs",
    "start": "460720",
    "end": "463360"
  },
  {
    "text": "are usually very small and targeted you",
    "start": "463360",
    "end": "465199"
  },
  {
    "text": "kind of already know what syscall you're",
    "start": "465199",
    "end": "466720"
  },
  {
    "text": "going to be attaching to or what thing",
    "start": "466720",
    "end": "468639"
  },
  {
    "text": "you're going to be inspecting um so",
    "start": "468639",
    "end": "471680"
  },
  {
    "text": "it's",
    "start": "471680",
    "end": "472560"
  },
  {
    "text": "it there's not a lot of guesswork there",
    "start": "472560",
    "end": "474080"
  },
  {
    "text": "you can kind of build in a lot of the",
    "start": "474080",
    "end": "476000"
  },
  {
    "text": "logic just within your program",
    "start": "476000",
    "end": "479520"
  },
  {
    "text": "we for",
    "start": "479520",
    "end": "480560"
  },
  {
    "text": "uh for go programs and in the context of",
    "start": "480560",
    "end": "482800"
  },
  {
    "text": "delve we need to be able to retrieve the",
    "start": "482800",
    "end": "484240"
  },
  {
    "text": "go routine id so we need to know where",
    "start": "484240",
    "end": "485840"
  },
  {
    "text": "to find it and all that stuff",
    "start": "485840",
    "end": "488400"
  },
  {
    "text": "we need to be able to read function",
    "start": "488400",
    "end": "489599"
  },
  {
    "text": "input arguments and we need to be able",
    "start": "489599",
    "end": "491120"
  },
  {
    "text": "to read function return arguments",
    "start": "491120",
    "end": "494080"
  },
  {
    "text": "so let's talk a little bit about tracing",
    "start": "494080",
    "end": "495440"
  },
  {
    "text": "arbitrary functions",
    "start": "495440",
    "end": "497919"
  },
  {
    "text": "so in general in order to make this",
    "start": "497919",
    "end": "499840"
  },
  {
    "text": "stuff work we use lib bpf and lib bpf go",
    "start": "499840",
    "end": "502160"
  },
  {
    "text": "so we've heard about libby pf",
    "start": "502160",
    "end": "504400"
  },
  {
    "text": "and for uh anybody trying to experiment",
    "start": "504400",
    "end": "506639"
  },
  {
    "text": "with ebpf stuff and go there's there's a",
    "start": "506639",
    "end": "508479"
  },
  {
    "text": "bunch of different frameworks but um",
    "start": "508479",
    "end": "510160"
  },
  {
    "text": "we've decided to go the route of using",
    "start": "510160",
    "end": "511520"
  },
  {
    "text": "libby pf go",
    "start": "511520",
    "end": "513039"
  },
  {
    "text": "it's worked out very well for us so far",
    "start": "513039",
    "end": "515279"
  },
  {
    "text": "um so",
    "start": "515279",
    "end": "516479"
  },
  {
    "text": "we load the ebay payoff program and",
    "start": "516479",
    "end": "518000"
  },
  {
    "text": "that's embedded in the dell binary and",
    "start": "518000",
    "end": "519839"
  },
  {
    "text": "i'll talk about that a little bit more",
    "start": "519839",
    "end": "521120"
  },
  {
    "text": "but that that has some interesting uh",
    "start": "521120",
    "end": "523279"
  },
  {
    "text": "side effects",
    "start": "523279",
    "end": "525360"
  },
  {
    "text": "so we attach u probes and uret probes",
    "start": "525360",
    "end": "527760"
  },
  {
    "text": "for each symbol now this all seems",
    "start": "527760",
    "end": "530080"
  },
  {
    "text": "pretty standard but in the context of go",
    "start": "530080",
    "end": "531920"
  },
  {
    "text": "i'll explain a little bit how you rep",
    "start": "531920",
    "end": "533279"
  },
  {
    "text": "probes can be",
    "start": "533279",
    "end": "534399"
  },
  {
    "text": "particularly tricky",
    "start": "534399",
    "end": "536560"
  },
  {
    "start": "536000",
    "end": "584000"
  },
  {
    "text": "so",
    "start": "536560",
    "end": "537920"
  },
  {
    "text": "initially we",
    "start": "537920",
    "end": "539440"
  },
  {
    "text": "we embed the ebpf object in the dell",
    "start": "539440",
    "end": "541600"
  },
  {
    "text": "binary this is something that i think is",
    "start": "541600",
    "end": "542959"
  },
  {
    "text": "really cool it's a feature of the go",
    "start": "542959",
    "end": "544320"
  },
  {
    "text": "programming language in general but it",
    "start": "544320",
    "end": "546240"
  },
  {
    "text": "allows us to basically continue to ship",
    "start": "546240",
    "end": "548880"
  },
  {
    "text": "delve as a single binary without any",
    "start": "548880",
    "end": "550959"
  },
  {
    "text": "kind of dependencies on disk or anything",
    "start": "550959",
    "end": "552959"
  },
  {
    "text": "like that",
    "start": "552959",
    "end": "553839"
  },
  {
    "text": "in terms of trying to find where this",
    "start": "553839",
    "end": "556240"
  },
  {
    "text": "ebpf program is or anything like that",
    "start": "556240",
    "end": "561080"
  },
  {
    "text": "um and then and then from there we you",
    "start": "562240",
    "end": "564320"
  },
  {
    "text": "know pretty standard stuff we we uh we",
    "start": "564320",
    "end": "566560"
  },
  {
    "text": "load it we load the ebpf program um into",
    "start": "566560",
    "end": "570080"
  },
  {
    "text": "into the kernel",
    "start": "570080",
    "end": "571440"
  },
  {
    "text": "and kind of hold on to some references",
    "start": "571440",
    "end": "572959"
  },
  {
    "text": "from from it",
    "start": "572959",
    "end": "575440"
  },
  {
    "text": "now we have our we have our ebpf program",
    "start": "575440",
    "end": "577839"
  },
  {
    "text": "we have it loaded uh it's it's in the",
    "start": "577839",
    "end": "579839"
  },
  {
    "text": "kernel",
    "start": "579839",
    "end": "580800"
  },
  {
    "text": "now how do we kind of interact with it",
    "start": "580800",
    "end": "584800"
  },
  {
    "start": "584000",
    "end": "593000"
  },
  {
    "text": "so",
    "start": "584800",
    "end": "586000"
  },
  {
    "text": "i want to get into some kind of uh",
    "start": "586000",
    "end": "588240"
  },
  {
    "text": "low-level implementation details because",
    "start": "588240",
    "end": "590080"
  },
  {
    "text": "that's what i think is is most exciting",
    "start": "590080",
    "end": "591680"
  },
  {
    "text": "for these kinds of talks so",
    "start": "591680",
    "end": "594560"
  },
  {
    "start": "593000",
    "end": "621000"
  },
  {
    "text": "in order to communicate back and forth",
    "start": "594560",
    "end": "596320"
  },
  {
    "text": "between the debugger and the ebpf",
    "start": "596320",
    "end": "598160"
  },
  {
    "text": "program we use some pretty standard eppf",
    "start": "598160",
    "end": "600560"
  },
  {
    "text": "tough stuff",
    "start": "600560",
    "end": "601839"
  },
  {
    "text": "ring buffers and maps and we use them in",
    "start": "601839",
    "end": "605040"
  },
  {
    "text": "what i think is some somewhat creative",
    "start": "605040",
    "end": "606640"
  },
  {
    "text": "ways so we use a ring buffer to",
    "start": "606640",
    "end": "608320"
  },
  {
    "text": "communicate from ebpf land back up to",
    "start": "608320",
    "end": "612079"
  },
  {
    "text": "user space to the debugger and then we",
    "start": "612079",
    "end": "614079"
  },
  {
    "text": "use the map to communicate vital",
    "start": "614079",
    "end": "615839"
  },
  {
    "text": "information from",
    "start": "615839",
    "end": "617519"
  },
  {
    "text": "the debugger user space to the ebpf",
    "start": "617519",
    "end": "619600"
  },
  {
    "text": "program",
    "start": "619600",
    "end": "621920"
  },
  {
    "start": "621000",
    "end": "772000"
  },
  {
    "text": "so one of the things that we communicate",
    "start": "622160",
    "end": "624240"
  },
  {
    "text": "from",
    "start": "624240",
    "end": "625120"
  },
  {
    "text": "user space to the ebpf program is all of",
    "start": "625120",
    "end": "628240"
  },
  {
    "text": "the information that it needs to know to",
    "start": "628240",
    "end": "630240"
  },
  {
    "text": "find how many arguments does this",
    "start": "630240",
    "end": "632079"
  },
  {
    "text": "function have where do they live we're",
    "start": "632079",
    "end": "634079"
  },
  {
    "text": "talking specifically in the context of",
    "start": "634079",
    "end": "635760"
  },
  {
    "text": "go",
    "start": "635760",
    "end": "636560"
  },
  {
    "text": "you may or may not be aware that go has",
    "start": "636560",
    "end": "638959"
  },
  {
    "text": "recently changed its abi from a stack",
    "start": "638959",
    "end": "641519"
  },
  {
    "text": "based calling convention to a registered",
    "start": "641519",
    "end": "643120"
  },
  {
    "text": "base calling convention within delve we",
    "start": "643120",
    "end": "645360"
  },
  {
    "text": "have to support both of these versions",
    "start": "645360",
    "end": "647040"
  },
  {
    "text": "so we have to know where to find",
    "start": "647040",
    "end": "648720"
  },
  {
    "text": "arguments on the stack we also have to",
    "start": "648720",
    "end": "650720"
  },
  {
    "text": "know where to find them in",
    "start": "650720",
    "end": "653279"
  },
  {
    "text": "in registers and if we have pointers we",
    "start": "653279",
    "end": "655360"
  },
  {
    "text": "need to know how to follow them and get",
    "start": "655360",
    "end": "656720"
  },
  {
    "text": "that data and we need to know that it is",
    "start": "656720",
    "end": "658399"
  },
  {
    "text": "a pointer in the first place so",
    "start": "658399",
    "end": "660480"
  },
  {
    "text": "we uh",
    "start": "660480",
    "end": "662480"
  },
  {
    "text": "we try to convey as much of this",
    "start": "662480",
    "end": "664079"
  },
  {
    "text": "information as possible from the",
    "start": "664079",
    "end": "665920"
  },
  {
    "text": "debugger and we store this information",
    "start": "665920",
    "end": "667680"
  },
  {
    "text": "in the map that's keyed by",
    "start": "667680",
    "end": "670079"
  },
  {
    "text": "uh the uh the instruction address so we",
    "start": "670079",
    "end": "672720"
  },
  {
    "text": "can say when the ebpf program is hit it",
    "start": "672720",
    "end": "675279"
  },
  {
    "text": "can look at what the current instruction",
    "start": "675279",
    "end": "676959"
  },
  {
    "text": "pointer value is",
    "start": "676959",
    "end": "678640"
  },
  {
    "text": "look up in the map the information that",
    "start": "678640",
    "end": "680880"
  },
  {
    "text": "it needs to be able to decode all of the",
    "start": "680880",
    "end": "682800"
  },
  {
    "text": "information and then the the program can",
    "start": "682800",
    "end": "685360"
  },
  {
    "text": "kind of run and do its thing",
    "start": "685360",
    "end": "687279"
  },
  {
    "text": "so as you can see here",
    "start": "687279",
    "end": "688800"
  },
  {
    "text": "we kind of put a lot of information in",
    "start": "688800",
    "end": "690720"
  },
  {
    "text": "like the go id offset so where the go id",
    "start": "690720",
    "end": "693360"
  },
  {
    "text": "struct uh",
    "start": "693360",
    "end": "695279"
  },
  {
    "text": "is from the offset of the go id from the",
    "start": "695279",
    "end": "697839"
  },
  {
    "text": "the actual like where the",
    "start": "697839",
    "end": "699680"
  },
  {
    "text": "go routine struct lives",
    "start": "699680",
    "end": "701839"
  },
  {
    "text": "we described the g adder offset so the",
    "start": "701839",
    "end": "704800"
  },
  {
    "text": "the uh the offset of the go routine from",
    "start": "704800",
    "end": "707839"
  },
  {
    "text": "thread local storage",
    "start": "707839",
    "end": "709680"
  },
  {
    "text": "it's a lot of kind of low level",
    "start": "709680",
    "end": "711279"
  },
  {
    "text": "information but it's this kind of",
    "start": "711279",
    "end": "712480"
  },
  {
    "text": "information that the debugger already",
    "start": "712480",
    "end": "714240"
  },
  {
    "text": "has so instead of like re-implementing a",
    "start": "714240",
    "end": "716880"
  },
  {
    "text": "dwarf parser in ebpf or something like",
    "start": "716880",
    "end": "719360"
  },
  {
    "text": "that we try to provide as much context",
    "start": "719360",
    "end": "721519"
  },
  {
    "text": "as we can from the user space side of",
    "start": "721519",
    "end": "723279"
  },
  {
    "text": "things and we do that ahead of time so",
    "start": "723279",
    "end": "725200"
  },
  {
    "text": "that by the time the ebpf program is",
    "start": "725200",
    "end": "727279"
  },
  {
    "text": "actually triggered it has all the",
    "start": "727279",
    "end": "728720"
  },
  {
    "text": "information that it needs to be able to",
    "start": "728720",
    "end": "730320"
  },
  {
    "text": "just quickly as quickly as possible read",
    "start": "730320",
    "end": "732480"
  },
  {
    "text": "all this information and send it back to",
    "start": "732480",
    "end": "734320"
  },
  {
    "text": "user space",
    "start": "734320",
    "end": "736959"
  },
  {
    "text": "so again more information so for each",
    "start": "737040",
    "end": "740959"
  },
  {
    "text": "function parameter input or output we",
    "start": "740959",
    "end": "743200"
  },
  {
    "text": "have a ton of information about it what",
    "start": "743200",
    "end": "744959"
  },
  {
    "text": "kind of variable is this what's the size",
    "start": "744959",
    "end": "746880"
  },
  {
    "text": "of it what's the offset from the stack",
    "start": "746880",
    "end": "748880"
  },
  {
    "text": "pointer if this is uh stack based",
    "start": "748880",
    "end": "751600"
  },
  {
    "text": "api",
    "start": "751600",
    "end": "752880"
  },
  {
    "text": "if it's in a register all this all these",
    "start": "752880",
    "end": "755120"
  },
  {
    "text": "kind of information and then also",
    "start": "755120",
    "end": "757600"
  },
  {
    "text": "the information that we want to convey",
    "start": "757600",
    "end": "759200"
  },
  {
    "text": "back to user space like the values the",
    "start": "759200",
    "end": "760880"
  },
  {
    "text": "actual raw bytes of of these variables",
    "start": "760880",
    "end": "764079"
  },
  {
    "text": "we want to pass that back to user space",
    "start": "764079",
    "end": "765760"
  },
  {
    "text": "so we do it through these various kind",
    "start": "765760",
    "end": "767440"
  },
  {
    "text": "of structs that we pass around using",
    "start": "767440",
    "end": "769360"
  },
  {
    "text": "ring buffers and maps",
    "start": "769360",
    "end": "773079"
  },
  {
    "start": "772000",
    "end": "810000"
  },
  {
    "text": "so now that we have",
    "start": "773120",
    "end": "774560"
  },
  {
    "text": "all of our information set up",
    "start": "774560",
    "end": "776560"
  },
  {
    "text": "from user space and",
    "start": "776560",
    "end": "779519"
  },
  {
    "text": "in in the ebpf program let's talk a",
    "start": "779519",
    "end": "781519"
  },
  {
    "text": "little bit about",
    "start": "781519",
    "end": "782959"
  },
  {
    "text": "how we",
    "start": "782959",
    "end": "783920"
  },
  {
    "text": "how we kick all of this stuff off and",
    "start": "783920",
    "end": "785680"
  },
  {
    "text": "how we start triggering these these",
    "start": "785680",
    "end": "787600"
  },
  {
    "text": "events",
    "start": "787600",
    "end": "789040"
  },
  {
    "text": "so from the delve side of things we",
    "start": "789040",
    "end": "791519"
  },
  {
    "text": "attach u probes into rep probes so if if",
    "start": "791519",
    "end": "794880"
  },
  {
    "text": "you're not familiar with this",
    "start": "794880",
    "end": "796800"
  },
  {
    "text": "through ebpf you can you can attach",
    "start": "796800",
    "end": "799200"
  },
  {
    "text": "user space probes uh and typically you",
    "start": "799200",
    "end": "802720"
  },
  {
    "text": "probe would be at the function entry",
    "start": "802720",
    "end": "804320"
  },
  {
    "text": "point and then there's also uret probes",
    "start": "804320",
    "end": "806720"
  },
  {
    "text": "which uh can trigger whenever a function",
    "start": "806720",
    "end": "808800"
  },
  {
    "text": "returns",
    "start": "808800",
    "end": "811200"
  },
  {
    "start": "810000",
    "end": "847000"
  },
  {
    "text": "so here we do a thing where it's update",
    "start": "811200",
    "end": "814160"
  },
  {
    "text": "arcmap which is what i was kind of",
    "start": "814160",
    "end": "815519"
  },
  {
    "text": "saying where we pass all the information",
    "start": "815519",
    "end": "817839"
  },
  {
    "text": "from user space about how many arguments",
    "start": "817839",
    "end": "819760"
  },
  {
    "text": "where they're located all that stuff",
    "start": "819760",
    "end": "821839"
  },
  {
    "text": "and",
    "start": "821839",
    "end": "822639"
  },
  {
    "text": "it's keyed by",
    "start": "822639",
    "end": "824320"
  },
  {
    "text": "a memory address so",
    "start": "824320",
    "end": "826480"
  },
  {
    "text": "we say the function entry which is where",
    "start": "826480",
    "end": "828880"
  },
  {
    "text": "the ebpfu probe is going to be",
    "start": "828880",
    "end": "831360"
  },
  {
    "text": "and we pass it all the information that",
    "start": "831360",
    "end": "832800"
  },
  {
    "text": "it needs and so this is us",
    "start": "832800",
    "end": "835120"
  },
  {
    "text": "updating the ebpf map",
    "start": "835120",
    "end": "837360"
  },
  {
    "text": "from from go",
    "start": "837360",
    "end": "839600"
  },
  {
    "text": "then from there we get the offset to the",
    "start": "839600",
    "end": "841440"
  },
  {
    "text": "symbol that we want to start probing",
    "start": "841440",
    "end": "843680"
  },
  {
    "text": "and then we attach our probe and our",
    "start": "843680",
    "end": "845360"
  },
  {
    "text": "ubrep probe",
    "start": "845360",
    "end": "848079"
  },
  {
    "text": "now",
    "start": "848639",
    "end": "849839"
  },
  {
    "text": "specifically with you reprobes when",
    "start": "849839",
    "end": "851440"
  },
  {
    "text": "you're talking about using them with go",
    "start": "851440",
    "end": "853519"
  },
  {
    "text": "programs they get a little bit tricky so",
    "start": "853519",
    "end": "856079"
  },
  {
    "text": "the way that you rep probes actually",
    "start": "856079",
    "end": "857760"
  },
  {
    "text": "work is they modify some information on",
    "start": "857760",
    "end": "859920"
  },
  {
    "text": "the stack so they modify actually where",
    "start": "859920",
    "end": "862320"
  },
  {
    "text": "the function returns to it actually ends",
    "start": "862320",
    "end": "864480"
  },
  {
    "text": "up returning into kind of like a",
    "start": "864480",
    "end": "866079"
  },
  {
    "text": "trampoline that ends up executing the",
    "start": "866079",
    "end": "868079"
  },
  {
    "text": "ebpf program",
    "start": "868079",
    "end": "870160"
  },
  {
    "text": "this has a tendency to make go very very",
    "start": "870160",
    "end": "872000"
  },
  {
    "text": "upset because go likes to look in the",
    "start": "872000",
    "end": "873600"
  },
  {
    "text": "mirror a lot it likes to inspect itself",
    "start": "873600",
    "end": "876079"
  },
  {
    "text": "um so",
    "start": "876079",
    "end": "877199"
  },
  {
    "text": "if you're not super familiar with go go",
    "start": "877199",
    "end": "879040"
  },
  {
    "text": "has this concept of go routines which",
    "start": "879040",
    "end": "880720"
  },
  {
    "text": "are these very very small kind of units",
    "start": "880720",
    "end": "882800"
  },
  {
    "text": "of execution and they start with really",
    "start": "882800",
    "end": "884959"
  },
  {
    "text": "small stacks and that stack grows and",
    "start": "884959",
    "end": "887120"
  },
  {
    "text": "gets copied over time so when when go",
    "start": "887120",
    "end": "889440"
  },
  {
    "text": "does this it needs to inspect the stack",
    "start": "889440",
    "end": "891680"
  },
  {
    "text": "look at pointers update a bunch of stuff",
    "start": "891680",
    "end": "893920"
  },
  {
    "text": "and when it's doing the stack inspection",
    "start": "893920",
    "end": "895760"
  },
  {
    "text": "if it sees an address that it's not",
    "start": "895760",
    "end": "897360"
  },
  {
    "text": "familiar with it's going to blow up so",
    "start": "897360",
    "end": "898959"
  },
  {
    "text": "we have to be really really tricky or we",
    "start": "898959",
    "end": "900880"
  },
  {
    "text": "have to be really careful with how we",
    "start": "900880",
    "end": "902560"
  },
  {
    "text": "use uret probes specifically so that",
    "start": "902560",
    "end": "904800"
  },
  {
    "text": "when you're tracing your program it just",
    "start": "904800",
    "end": "906480"
  },
  {
    "text": "it doesn't just start panicking because",
    "start": "906480",
    "end": "907920"
  },
  {
    "text": "what's the point at that at that point",
    "start": "907920",
    "end": "909920"
  },
  {
    "text": "right",
    "start": "909920",
    "end": "911120"
  },
  {
    "text": "so to do that we we kind of we set a",
    "start": "911120",
    "end": "913839"
  },
  {
    "text": "break point a real break point like a p",
    "start": "913839",
    "end": "915680"
  },
  {
    "text": "tracy break point on um",
    "start": "915680",
    "end": "918959"
  },
  {
    "text": "on the runtime function that handles",
    "start": "918959",
    "end": "920800"
  },
  {
    "text": "this copy stack so we kind of do this",
    "start": "920800",
    "end": "922320"
  },
  {
    "text": "like real quick",
    "start": "922320",
    "end": "923839"
  },
  {
    "text": "when go's about to copy the the stack we",
    "start": "923839",
    "end": "925920"
  },
  {
    "text": "remove the urep probes and then when",
    "start": "925920",
    "end": "928480"
  },
  {
    "text": "it's done we kind of put everything back",
    "start": "928480",
    "end": "930240"
  },
  {
    "text": "so it's kind of like a weird little hack",
    "start": "930240",
    "end": "932160"
  },
  {
    "text": "but",
    "start": "932160",
    "end": "933279"
  },
  {
    "text": "it's",
    "start": "933279",
    "end": "934000"
  },
  {
    "text": "mostly working for us right now",
    "start": "934000",
    "end": "937360"
  },
  {
    "start": "936000",
    "end": "1002000"
  },
  {
    "text": "so let's talk a little bit about getting",
    "start": "937519",
    "end": "938880"
  },
  {
    "text": "data back from the ebpf program so",
    "start": "938880",
    "end": "942639"
  },
  {
    "text": "libyapf go has a really nice interface",
    "start": "942639",
    "end": "944720"
  },
  {
    "text": "where if you're communicating back and",
    "start": "944720",
    "end": "946320"
  },
  {
    "text": "forth using a ring buffer on the go side",
    "start": "946320",
    "end": "948399"
  },
  {
    "text": "of things you can consume it just via",
    "start": "948399",
    "end": "950000"
  },
  {
    "text": "like a channel so within delve we have a",
    "start": "950000",
    "end": "952560"
  },
  {
    "text": "go routine that's long running starts",
    "start": "952560",
    "end": "954959"
  },
  {
    "text": "communicating and and just kind of uh",
    "start": "954959",
    "end": "957600"
  },
  {
    "text": "getting this information back from the",
    "start": "957600",
    "end": "959040"
  },
  {
    "text": "ebpf program and it can parse it and",
    "start": "959040",
    "end": "961440"
  },
  {
    "text": "essentially the the nice thing about",
    "start": "961440",
    "end": "962959"
  },
  {
    "text": "this approach is it can impart it can",
    "start": "962959",
    "end": "965360"
  },
  {
    "text": "start parsing it at its at its leisure",
    "start": "965360",
    "end": "967920"
  },
  {
    "text": "for the most part i mean the hard work",
    "start": "967920",
    "end": "969759"
  },
  {
    "text": "is done like what we really want to do",
    "start": "969759",
    "end": "971759"
  },
  {
    "text": "is we want to we want to prevent the",
    "start": "971759",
    "end": "973759"
  },
  {
    "text": "program",
    "start": "973759",
    "end": "974800"
  },
  {
    "text": "um",
    "start": "974800",
    "end": "975680"
  },
  {
    "text": "from stopping for too long right we want",
    "start": "975680",
    "end": "977600"
  },
  {
    "text": "to prevent the overhead so we just need",
    "start": "977600",
    "end": "980160"
  },
  {
    "text": "to get the data",
    "start": "980160",
    "end": "981519"
  },
  {
    "text": "in the ebpf land we just need to gather",
    "start": "981519",
    "end": "983360"
  },
  {
    "text": "all this data as quickly as possible",
    "start": "983360",
    "end": "985040"
  },
  {
    "text": "shoot it over to user space once it's",
    "start": "985040",
    "end": "986880"
  },
  {
    "text": "back to user space we can kind of parse",
    "start": "986880",
    "end": "988560"
  },
  {
    "text": "it and present it to the user",
    "start": "988560",
    "end": "990959"
  },
  {
    "text": "you know not not slowly but there's",
    "start": "990959",
    "end": "992959"
  },
  {
    "text": "there's less time constraints there",
    "start": "992959",
    "end": "994320"
  },
  {
    "text": "because that doesn't actually affect the",
    "start": "994320",
    "end": "996000"
  },
  {
    "text": "the program that's being run",
    "start": "996000",
    "end": "998320"
  },
  {
    "text": "so this interface is really nice and",
    "start": "998320",
    "end": "999680"
  },
  {
    "text": "it's been working out really great for",
    "start": "999680",
    "end": "1001199"
  },
  {
    "text": "us",
    "start": "1001199",
    "end": "1003279"
  },
  {
    "text": "now",
    "start": "1003519",
    "end": "1004560"
  },
  {
    "text": "uh",
    "start": "1004560",
    "end": "1006880"
  },
  {
    "start": "1006000",
    "end": "1021000"
  },
  {
    "text": "there's there's a lot of like upsides uh",
    "start": "1006959",
    "end": "1009759"
  },
  {
    "text": "about this this approach and this",
    "start": "1009759",
    "end": "1012800"
  },
  {
    "text": "rewrite and it's been a lot of fun it's",
    "start": "1012800",
    "end": "1014240"
  },
  {
    "text": "been very exciting but as with",
    "start": "1014240",
    "end": "1015920"
  },
  {
    "text": "everything",
    "start": "1015920",
    "end": "1017600"
  },
  {
    "text": "there are a little bit of downsides",
    "start": "1017600",
    "end": "1021519"
  },
  {
    "start": "1021000",
    "end": "1111000"
  },
  {
    "text": "so one of the first things is uh in my",
    "start": "1022560",
    "end": "1024959"
  },
  {
    "text": "opinion ebpf programs",
    "start": "1024959",
    "end": "1027280"
  },
  {
    "text": "if you uh if you've written if you've",
    "start": "1027280",
    "end": "1029760"
  },
  {
    "text": "written them you know if you haven't um",
    "start": "1029760",
    "end": "1032558"
  },
  {
    "text": "they're they're",
    "start": "1032559",
    "end": "1033760"
  },
  {
    "text": "you mostly write them in like a",
    "start": "1033760",
    "end": "1034798"
  },
  {
    "text": "constrained version of c and when i say",
    "start": "1034799",
    "end": "1036798"
  },
  {
    "text": "constrained i mean you can't loop you",
    "start": "1036799",
    "end": "1038558"
  },
  {
    "text": "have very strict",
    "start": "1038559",
    "end": "1040160"
  },
  {
    "text": "requirements on like how much space or",
    "start": "1040160",
    "end": "1042480"
  },
  {
    "text": "how much memory you can you can allocate",
    "start": "1042480",
    "end": "1044400"
  },
  {
    "text": "in the stack there's no concept of",
    "start": "1044400",
    "end": "1046558"
  },
  {
    "text": "allocating in a heap so you have to kind",
    "start": "1046559",
    "end": "1048079"
  },
  {
    "text": "of make your own heap using like",
    "start": "1048079",
    "end": "1050880"
  },
  {
    "text": "a map or your own kind of ring buffer",
    "start": "1050880",
    "end": "1053039"
  },
  {
    "text": "that you that you just used yourself um",
    "start": "1053039",
    "end": "1055120"
  },
  {
    "text": "there's a lot of kind of weird",
    "start": "1055120",
    "end": "1056880"
  },
  {
    "text": "non-standard stuff that you don't have",
    "start": "1056880",
    "end": "1058320"
  },
  {
    "text": "to think about when you're when you're",
    "start": "1058320",
    "end": "1059679"
  },
  {
    "text": "writing in like a you know like just",
    "start": "1059679",
    "end": "1062240"
  },
  {
    "text": "regular go or even normalcy or anything",
    "start": "1062240",
    "end": "1064160"
  },
  {
    "text": "like that um so that kind of cognitive",
    "start": "1064160",
    "end": "1066400"
  },
  {
    "text": "overhead",
    "start": "1066400",
    "end": "1067440"
  },
  {
    "text": "i think i on you know i understand why",
    "start": "1067440",
    "end": "1069840"
  },
  {
    "text": "it needs it needs to be that way but um",
    "start": "1069840",
    "end": "1071840"
  },
  {
    "text": "that is in my opinion just a little bit",
    "start": "1071840",
    "end": "1073360"
  },
  {
    "text": "of a downside there's there's a little",
    "start": "1073360",
    "end": "1074640"
  },
  {
    "text": "bit more that you have to think about um",
    "start": "1074640",
    "end": "1076880"
  },
  {
    "text": "and you have to be really creative with",
    "start": "1076880",
    "end": "1078559"
  },
  {
    "text": "certain things so for example like lack",
    "start": "1078559",
    "end": "1080640"
  },
  {
    "text": "of of being able to write loops in an",
    "start": "1080640",
    "end": "1082559"
  },
  {
    "text": "ebpf program from for this particular uh",
    "start": "1082559",
    "end": "1086240"
  },
  {
    "text": "implementation we need to be able to say",
    "start": "1086240",
    "end": "1088320"
  },
  {
    "text": "well i want to parse three input",
    "start": "1088320",
    "end": "1090240"
  },
  {
    "text": "arguments or four or five how do you do",
    "start": "1090240",
    "end": "1092480"
  },
  {
    "text": "that if you can't loop and kind of you",
    "start": "1092480",
    "end": "1094240"
  },
  {
    "text": "know do this kind of arbitrary thing",
    "start": "1094240",
    "end": "1096799"
  },
  {
    "text": "so in our case we kind of took advantage",
    "start": "1096799",
    "end": "1099039"
  },
  {
    "text": "of uh",
    "start": "1099039",
    "end": "1100559"
  },
  {
    "text": "c style switch statements and automatic",
    "start": "1100559",
    "end": "1102400"
  },
  {
    "text": "follow-through to make like weird pseudo",
    "start": "1102400",
    "end": "1104720"
  },
  {
    "text": "loops and stuff like that so there is",
    "start": "1104720",
    "end": "1106799"
  },
  {
    "text": "workarounds but um it's just something",
    "start": "1106799",
    "end": "1109200"
  },
  {
    "text": "that i think people should be aware of",
    "start": "1109200",
    "end": "1112160"
  },
  {
    "start": "1111000",
    "end": "1140000"
  },
  {
    "text": "another thing is kind of fighting the",
    "start": "1112160",
    "end": "1113679"
  },
  {
    "text": "verifier so it's like you're fighting a",
    "start": "1113679",
    "end": "1116480"
  },
  {
    "text": "whole another compiler",
    "start": "1116480",
    "end": "1118080"
  },
  {
    "text": "so also if you're not familiar",
    "start": "1118080",
    "end": "1120320"
  },
  {
    "text": "when you when you load uh an ebpf",
    "start": "1120320",
    "end": "1122400"
  },
  {
    "text": "program into the kernel it goes through",
    "start": "1122400",
    "end": "1124160"
  },
  {
    "text": "like a verifier where it just makes sure",
    "start": "1124160",
    "end": "1126320"
  },
  {
    "text": "that um this function or that this",
    "start": "1126320",
    "end": "1128720"
  },
  {
    "text": "particular program is going to execute",
    "start": "1128720",
    "end": "1130480"
  },
  {
    "text": "the way that it it expects it's not",
    "start": "1130480",
    "end": "1132799"
  },
  {
    "text": "going to do anything dangerous it's not",
    "start": "1132799",
    "end": "1134240"
  },
  {
    "text": "looping or",
    "start": "1134240",
    "end": "1136240"
  },
  {
    "text": "and verify that it actually will exit",
    "start": "1136240",
    "end": "1138240"
  },
  {
    "text": "deterministically",
    "start": "1138240",
    "end": "1141039"
  },
  {
    "start": "1140000",
    "end": "1148000"
  },
  {
    "text": "i mentioned this a little bit but the",
    "start": "1141039",
    "end": "1142240"
  },
  {
    "text": "small stack requirement can be a little",
    "start": "1142240",
    "end": "1143679"
  },
  {
    "text": "bit of a hindrance",
    "start": "1143679",
    "end": "1145120"
  },
  {
    "text": "and something to that you might have to",
    "start": "1145120",
    "end": "1146799"
  },
  {
    "text": "work around a lot",
    "start": "1146799",
    "end": "1148880"
  },
  {
    "start": "1148000",
    "end": "1156000"
  },
  {
    "text": "again no loops limited control flow um",
    "start": "1148880",
    "end": "1152000"
  },
  {
    "text": "it uh",
    "start": "1152000",
    "end": "1154160"
  },
  {
    "text": "forces you to be very creative",
    "start": "1154160",
    "end": "1157120"
  },
  {
    "start": "1156000",
    "end": "1172000"
  },
  {
    "text": "and as i mentioned you rep probes do not",
    "start": "1157120",
    "end": "1159200"
  },
  {
    "text": "play with uh play well with with go",
    "start": "1159200",
    "end": "1160960"
  },
  {
    "text": "programs by default um if you're not",
    "start": "1160960",
    "end": "1163520"
  },
  {
    "text": "really really careful with how you use",
    "start": "1163520",
    "end": "1164960"
  },
  {
    "text": "your rep probes you're guaranteed pretty",
    "start": "1164960",
    "end": "1166880"
  },
  {
    "text": "much guaranteed to crash any go program",
    "start": "1166880",
    "end": "1168720"
  },
  {
    "text": "that you use them with",
    "start": "1168720",
    "end": "1171520"
  },
  {
    "text": "and that's it",
    "start": "1172720",
    "end": "1173840"
  },
  {
    "text": "thank you very much again my name is",
    "start": "1173840",
    "end": "1175760"
  },
  {
    "text": "derek parker you can find me on the",
    "start": "1175760",
    "end": "1177600"
  },
  {
    "text": "twitters there at dirk the daring and",
    "start": "1177600",
    "end": "1180480"
  },
  {
    "text": "i'll be around for if anybody has any",
    "start": "1180480",
    "end": "1182480"
  },
  {
    "text": "questions comments or anything like that",
    "start": "1182480",
    "end": "1184000"
  },
  {
    "text": "but thank you all very much",
    "start": "1184000",
    "end": "1187880"
  },
  {
    "text": "basis or globally does this hack have a",
    "start": "1199760",
    "end": "1202480"
  },
  {
    "text": "const or linear execution time based",
    "start": "1202480",
    "end": "1206640"
  },
  {
    "text": "so i'll repeat the question uh as i",
    "start": "1209760",
    "end": "1211919"
  },
  {
    "text": "understand it is um are are these probes",
    "start": "1211919",
    "end": "1214799"
  },
  {
    "text": "handled on a go on a per go routine",
    "start": "1214799",
    "end": "1216960"
  },
  {
    "text": "basis or are they global so",
    "start": "1216960",
    "end": "1220159"
  },
  {
    "text": "um in in the strictest sense they are",
    "start": "1220159",
    "end": "1222799"
  },
  {
    "text": "global um but that's one of the things",
    "start": "1222799",
    "end": "1224960"
  },
  {
    "text": "that we do uh from the debugger side of",
    "start": "1224960",
    "end": "1227039"
  },
  {
    "text": "things is try to figure out how to",
    "start": "1227039",
    "end": "1228799"
  },
  {
    "text": "collate all of this information and",
    "start": "1228799",
    "end": "1231039"
  },
  {
    "text": "present it linearly um so that's one of",
    "start": "1231039",
    "end": "1233760"
  },
  {
    "text": "the things that's why it's important uh",
    "start": "1233760",
    "end": "1235520"
  },
  {
    "text": "when when i showed some of the code",
    "start": "1235520",
    "end": "1237039"
  },
  {
    "text": "examples where we're parsing the go",
    "start": "1237039",
    "end": "1238880"
  },
  {
    "text": "routine structure and we're getting the",
    "start": "1238880",
    "end": "1240640"
  },
  {
    "text": "go id so we're we're using that",
    "start": "1240640",
    "end": "1243120"
  },
  {
    "text": "information to take that back to user",
    "start": "1243120",
    "end": "1244880"
  },
  {
    "text": "space and kind of present like a",
    "start": "1244880",
    "end": "1246840"
  },
  {
    "text": "cohesive um",
    "start": "1246840",
    "end": "1249120"
  },
  {
    "text": "story of",
    "start": "1249120",
    "end": "1250480"
  },
  {
    "text": "when a function is hit and when it's",
    "start": "1250480",
    "end": "1251919"
  },
  {
    "text": "returned and making sure that that that",
    "start": "1251919",
    "end": "1254159"
  },
  {
    "text": "uh the input and the return values are",
    "start": "1254159",
    "end": "1256640"
  },
  {
    "text": "all being associated with the same",
    "start": "1256640",
    "end": "1258960"
  },
  {
    "text": "the context of execution so the same go",
    "start": "1258960",
    "end": "1261280"
  },
  {
    "text": "routine so to answer the question in",
    "start": "1261280",
    "end": "1263440"
  },
  {
    "text": "general yes they are global but we do",
    "start": "1263440",
    "end": "1266240"
  },
  {
    "text": "a little bit of work on top of it and",
    "start": "1266240",
    "end": "1267679"
  },
  {
    "text": "the debugger end to kind of stitch all",
    "start": "1267679",
    "end": "1269440"
  },
  {
    "text": "of those things together",
    "start": "1269440",
    "end": "1272919"
  },
  {
    "text": "um",
    "start": "1280799",
    "end": "1283799"
  },
  {
    "text": "uh yeah that's a that's a great question",
    "start": "1295760",
    "end": "1297120"
  },
  {
    "text": "so the question was are there are there",
    "start": "1297120",
    "end": "1299039"
  },
  {
    "text": "any limitations of um when this this",
    "start": "1299039",
    "end": "1302159"
  },
  {
    "text": "particular implementation of the",
    "start": "1302159",
    "end": "1303280"
  },
  {
    "text": "back-end can be used",
    "start": "1303280",
    "end": "1304880"
  },
  {
    "text": "so um yes so right now you do have to be",
    "start": "1304880",
    "end": "1307679"
  },
  {
    "text": "a privileged user to be able to load the",
    "start": "1307679",
    "end": "1309840"
  },
  {
    "text": "ebpf program into the kernel um or have",
    "start": "1309840",
    "end": "1312880"
  },
  {
    "text": "uh syscap admin i think if you have",
    "start": "1312880",
    "end": "1314720"
  },
  {
    "text": "syscap admin you can do whatever you",
    "start": "1314720",
    "end": "1316159"
  },
  {
    "text": "want but um uh that that's another kind",
    "start": "1316159",
    "end": "1318960"
  },
  {
    "text": "of workaround um",
    "start": "1318960",
    "end": "1321600"
  },
  {
    "text": "and uh but",
    "start": "1321600",
    "end": "1323760"
  },
  {
    "text": "um and you right now it's it's still",
    "start": "1323760",
    "end": "1326480"
  },
  {
    "text": "like this this implementation is ongoing",
    "start": "1326480",
    "end": "1328640"
  },
  {
    "text": "and something that i'm still kind of",
    "start": "1328640",
    "end": "1329840"
  },
  {
    "text": "currently working on so right now it's",
    "start": "1329840",
    "end": "1331760"
  },
  {
    "text": "kind of uh you have to build like a",
    "start": "1331760",
    "end": "1335120"
  },
  {
    "text": "uh",
    "start": "1335120",
    "end": "1336480"
  },
  {
    "text": "like we have a make file entry of like",
    "start": "1336480",
    "end": "1338080"
  },
  {
    "text": "build bpf right where it's like you",
    "start": "1338080",
    "end": "1339679"
  },
  {
    "text": "build like a slightly different version",
    "start": "1339679",
    "end": "1341039"
  },
  {
    "text": "of it um",
    "start": "1341039",
    "end": "1342640"
  },
  {
    "text": "so you have to do that first and then",
    "start": "1342640",
    "end": "1344400"
  },
  {
    "text": "also be yeah a privileged user to be",
    "start": "1344400",
    "end": "1346240"
  },
  {
    "text": "able to do the rest of the stuff",
    "start": "1346240",
    "end": "1350200"
  },
  {
    "text": "um i think",
    "start": "1364559",
    "end": "1367200"
  },
  {
    "text": "the same works requires",
    "start": "1367200",
    "end": "1369400"
  },
  {
    "text": "uh in production there are cases where",
    "start": "1369400",
    "end": "1375120"
  },
  {
    "text": "great question um so just to repeat the",
    "start": "1384480",
    "end": "1386559"
  },
  {
    "text": "question",
    "start": "1386559",
    "end": "1388000"
  },
  {
    "text": "since we're talking about this in the",
    "start": "1388000",
    "end": "1389280"
  },
  {
    "text": "context of production a lot of people",
    "start": "1389280",
    "end": "1391919"
  },
  {
    "text": "will strip debug information out of",
    "start": "1391919",
    "end": "1393760"
  },
  {
    "text": "their production binaries to make them",
    "start": "1393760",
    "end": "1395200"
  },
  {
    "text": "even smaller um when they when they run",
    "start": "1395200",
    "end": "1397600"
  },
  {
    "text": "them on you know in any kind of",
    "start": "1397600",
    "end": "1399280"
  },
  {
    "text": "production context so yes this that that",
    "start": "1399280",
    "end": "1401760"
  },
  {
    "text": "is a huge um",
    "start": "1401760",
    "end": "1403360"
  },
  {
    "text": "for this aspect that that would be a",
    "start": "1403360",
    "end": "1404720"
  },
  {
    "text": "huge hindrance and limitation um a",
    "start": "1404720",
    "end": "1407520"
  },
  {
    "text": "workaround for that is delve does allow",
    "start": "1407520",
    "end": "1409360"
  },
  {
    "text": "you to supply external debug information",
    "start": "1409360",
    "end": "1411919"
  },
  {
    "text": "so if you have it stripped but you also",
    "start": "1411919",
    "end": "1414320"
  },
  {
    "text": "have it around somewhere",
    "start": "1414320",
    "end": "1416559"
  },
  {
    "text": "you can you can provide that information",
    "start": "1416559",
    "end": "1418320"
  },
  {
    "text": "after the fact even if it's not present",
    "start": "1418320",
    "end": "1420080"
  },
  {
    "text": "in the binary delve can use that",
    "start": "1420080",
    "end": "1421679"
  },
  {
    "text": "information just as it would if it was",
    "start": "1421679",
    "end": "1423039"
  },
  {
    "text": "in the binary",
    "start": "1423039",
    "end": "1426200"
  },
  {
    "text": "thanks",
    "start": "1432400",
    "end": "1435400"
  }
]