[
  {
    "start": "0",
    "end": "370000"
  },
  {
    "text": "okay cool hi everyone can you guys hear me cuz I can hear myself good so I'm",
    "start": "140",
    "end": "7560"
  },
  {
    "text": "really excited because we have Netflix on stage with us they're an end-user for",
    "start": "7560",
    "end": "12630"
  },
  {
    "text": "virtual kulit but I'm going to go through an intro first but first to introduce myself my name is Rhea Bhatia I'm a program manager at Microsoft I am",
    "start": "12630",
    "end": "19980"
  },
  {
    "text": "one of the maintainer zuv virtual couplet and here's Sargon sorry we don't take that I lied so I've been doing I",
    "start": "19980",
    "end": "27090"
  },
  {
    "text": "work at Netflix on titus our container runtime and I'm a senior software",
    "start": "27090",
    "end": "32578"
  },
  {
    "text": "engineer cool so to get us started a little bit of history about virtual ku but um it started off as a small project",
    "start": "32579",
    "end": "40260"
  },
  {
    "text": "actually a just an experimental project by Brendon burns at Microsoft and we",
    "start": "40260",
    "end": "46410"
  },
  {
    "text": "basically were just playing around with what it meant to make kubernetes more flexible because a node and kubernetes",
    "start": "46410",
    "end": "51600"
  },
  {
    "text": "is inherently not very flexible um so that's where we started and it was",
    "start": "51600",
    "end": "56730"
  },
  {
    "text": "actually called the ACI connector a long time ago and before koukaon into summer",
    "start": "56730",
    "end": "62090"
  },
  {
    "text": "2017 I want to say we decided to make it open and we decided to make it pluggable",
    "start": "62090",
    "end": "68520"
  },
  {
    "text": "so anybody that had a use case for virtual couplet or like the concept of making the couplet more flexible and",
    "start": "68520",
    "end": "73770"
  },
  {
    "text": "kubernetes could actually use this project past just Microsoft it actually",
    "start": "73770",
    "end": "81270"
  },
  {
    "text": "started out as a tight script project and then we rewrote everything and go presumably to make it more friendly to",
    "start": "81270",
    "end": "88439"
  },
  {
    "text": "get working developers in the project I think it worked I don't know if you guys want to work in typescript but we could",
    "start": "88439",
    "end": "94229"
  },
  {
    "text": "probably do that too in the future probably not yeah but that was the room",
    "start": "94229",
    "end": "99329"
  },
  {
    "text": "that we all worked in we hacked on it and there's Eric who's over here he was also one of the core people in the",
    "start": "99329",
    "end": "105540"
  },
  {
    "text": "beginning to help us start on the project ok so what is virtual kulit so",
    "start": "105540",
    "end": "112079"
  },
  {
    "text": "rich I'll cool it we don't replace the couplet but what we've done is inherently make it more flexible for you",
    "start": "112079",
    "end": "118049"
  },
  {
    "text": "so for example one use case enema I'm gonna make it really abstract so it makes sense if you wanted to order pizza",
    "start": "118049",
    "end": "125969"
  },
  {
    "text": "for example and you wanted to create a provider that ordered pizza you could do",
    "start": "125969",
    "end": "131039"
  },
  {
    "text": "that with virtual couplet so anytime you in a pod against the virtual couplet node in your cluster it would spin out",
    "start": "131039",
    "end": "137940"
  },
  {
    "text": "and actually call Domino's and get you a pizza so that's how abstract we've made",
    "start": "137940",
    "end": "143130"
  },
  {
    "text": "the note if you know how to fill in the functions of creating a pod deleting a pot and updating a pod you can basically",
    "start": "143130",
    "end": "148860"
  },
  {
    "text": "create a provider for virtual kulit and that could be anything from ordering a pizza to turning on the lights in this",
    "start": "148860",
    "end": "155850"
  },
  {
    "text": "room it's really really flexible in that case in super-easy gate get started and",
    "start": "155850",
    "end": "161250"
  },
  {
    "text": "these are the things that we've built into it so you can get pods you can get pod status you can update the pod you",
    "start": "161250",
    "end": "167610"
  },
  {
    "text": "can create a pod and we also have some loosely defined capacity like",
    "start": "167610",
    "end": "174120"
  },
  {
    "text": "restrictions around it because we don't actually need to make a restriction so they're restrictions like one terabyte",
    "start": "174120",
    "end": "179340"
  },
  {
    "text": "of memory and things like that but that's because we're not an actual node",
    "start": "179340",
    "end": "184590"
  },
  {
    "text": "we're just sending out API calls to whatever is in the backend so whether it's Domino's whether it's a sure",
    "start": "184590",
    "end": "190320"
  },
  {
    "text": "whether it's Amazon whatever it could be all we're doing is just transferring information from kubernetes to that",
    "start": "190320",
    "end": "197280"
  },
  {
    "text": "actual back-end service alright so the",
    "start": "197280",
    "end": "202380"
  },
  {
    "text": "anatomy of the node today and I'm gonna step in front of here just so I don't miss anything um so the node inherently comes with a",
    "start": "202380",
    "end": "210270"
  },
  {
    "text": "lot of constraints and that's what we set out to solve how do we make a node more flexible how do you have an unbounded amount of resource and things",
    "start": "210270",
    "end": "217680"
  },
  {
    "text": "like that and so and there's a lot of constructs of pods actually getting",
    "start": "217680",
    "end": "222900"
  },
  {
    "text": "scheduled out to nodes that we also needed to figure out within virtual kulit so when you schedule a pod to a",
    "start": "222900",
    "end": "228480"
  },
  {
    "text": "virtual couplet node we actually changed the way that you have to interact with",
    "start": "228480",
    "end": "233550"
  },
  {
    "text": "the node itself so you don't lie within the same capacity restraints because you're not actually in the cluster so a",
    "start": "233550",
    "end": "239880"
  },
  {
    "text": "lot of the pods that we're spitting out are actually backed by a different service and they're not in your kubernetes cluster at all ok and this is",
    "start": "239880",
    "end": "248910"
  },
  {
    "text": "another slide to show you what the node does today um we're continuously in",
    "start": "248910",
    "end": "254480"
  },
  {
    "text": "kubernetes getting there we have control loops to basically get container logs",
    "start": "254480",
    "end": "259829"
  },
  {
    "text": "and get status and things like that this is something that we've replicated in virtual Kubla but we have a smaller",
    "start": "259830",
    "end": "265410"
  },
  {
    "text": "set of things that we've replicated in virtual kulit itself and what is virtual couplet so",
    "start": "265410",
    "end": "272320"
  },
  {
    "text": "virtual couplet creates treats the concept of pods and nodes in the abstract just like what we talked about before with Domino's it's an unbounded I",
    "start": "272320",
    "end": "280600"
  },
  {
    "text": "know it isn't about an amount of resource but virtual qubit itself is not we have a lot of common code in the VK",
    "start": "280600",
    "end": "287530"
  },
  {
    "text": "in virtual couplet well we don't have a lot of common code but that's where providers come in so you actually gets",
    "start": "287530",
    "end": "293680"
  },
  {
    "text": "to define how networking works you define how creating a pod works how updating a pod we just give you a",
    "start": "293680",
    "end": "299050"
  },
  {
    "text": "library which you fill in on your own and we also have a community that can",
    "start": "299050",
    "end": "304510"
  },
  {
    "text": "back you up and help you write your own providers and virtual Kumud itself can actually be deployed as a pod so that's",
    "start": "304510",
    "end": "309820"
  },
  {
    "text": "what we do in a jar today we're deploying virtual cool it as a pod but it looks like a node in your cluster but",
    "start": "309820",
    "end": "315250"
  },
  {
    "text": "if you go into your coop system name is face you'll be able to deciever to cool it as a pod cool",
    "start": "315250",
    "end": "322360"
  },
  {
    "text": "so why virtual couplet and we have a bunch of different use cases one of them being I'm the bursting use case of being",
    "start": "322360",
    "end": "328900"
  },
  {
    "text": "able to burst into a different service so you don't have to use the capacity within your cluster you can burst out somewhere else",
    "start": "328900",
    "end": "334480"
  },
  {
    "text": "we also have some IOT use cases if you want to basically represent a virtual couplet pod as an IOT device I mean",
    "start": "334480",
    "end": "342250"
  },
  {
    "text": "things like that and then also just an alternate couplet and we'll probably get into that a little bit later and this is",
    "start": "342250",
    "end": "348640"
  },
  {
    "text": "a shout-out to the azure folks and something that I worked on in the beginning so I kind of wanted to show",
    "start": "348640",
    "end": "353980"
  },
  {
    "text": "off the virtual couplet first we can use case where basically you have a defined",
    "start": "353980",
    "end": "359280"
  },
  {
    "text": "pool of resources within your VMs and you use virtual kulit to spin out into something called a dream container",
    "start": "359280",
    "end": "365200"
  },
  {
    "text": "instances and if you want to learn more I come to our deep dive session this week on virtual cupola and then I'm gonna hand it off to start again",
    "start": "365200",
    "end": "372340"
  },
  {
    "start": "370000",
    "end": "552000"
  },
  {
    "text": "great so I'm we're talking about changing the engines out and fight in how we adopted the virtual kulit for",
    "start": "372340",
    "end": "378730"
  },
  {
    "text": "utilization and production the system I'm going to be talking about is called Titus Titus is the primary container",
    "start": "378730",
    "end": "384790"
  },
  {
    "text": "runtime that's used at Netflix it's used for all sorts of applications at Netflix from big data workloads like presto to",
    "start": "384790",
    "end": "392800"
  },
  {
    "text": "our online streaming service so if you've used Netflix on your phone you probably use Titus to our media encoding",
    "start": "392800",
    "end": "399460"
  },
  {
    "text": "engine and the project was started in 2015 in 2015 the container run time landscape",
    "start": "399460",
    "end": "405130"
  },
  {
    "text": "was pretty significantly different for one kubernetes was only about a year old and it hadn't really become the",
    "start": "405130",
    "end": "410830"
  },
  {
    "text": "ubiquitous cluster manager that it has become today and when we started the project we",
    "start": "410830",
    "end": "415930"
  },
  {
    "text": "weren't really sure whether this was gonna work or not so we wanted to try to leverage as many off-the-shelf technologies as possible",
    "start": "415930",
    "end": "422050"
  },
  {
    "text": "in leveraging those technologies we decided to use docker as a container runtime basis as our cluster management",
    "start": "422050",
    "end": "428530"
  },
  {
    "text": "and resource management layer and G RPC of protobufs for API definitions the",
    "start": "428530",
    "end": "433570"
  },
  {
    "text": "team that works on titus is relatively tiny today we're an 11 person team in about two years ago we were a six-person",
    "start": "433570",
    "end": "439360"
  },
  {
    "text": "team we develop operate and support the product we're on call for it",
    "start": "439360",
    "end": "444430"
  },
  {
    "text": "we have to provide user support and given that we're such a lean team we have to make our decisions relatively",
    "start": "444430",
    "end": "451870"
  },
  {
    "text": "conservatively and in that when we adopt new technologies we'd like to move iteratively as opposed to make big jumps",
    "start": "451870",
    "end": "458010"
  },
  {
    "text": "about a year ago we decided to open source office code and what I'm gonna be",
    "start": "458010",
    "end": "463420"
  },
  {
    "text": "talking about today is mostly in the open source now the tightest",
    "start": "463420",
    "end": "468640"
  },
  {
    "text": "architecture is a little bit different than what you have in traditional kubernetes environment the tightest",
    "start": "468640",
    "end": "474490"
  },
  {
    "text": "architecture works with the tightest API fronting fronting it the tightest API has many concepts that are very similar",
    "start": "474490",
    "end": "482200"
  },
  {
    "text": "to AWS concepts because most people and Netflix are used to AWS concepts so we have the idea of a job which is very",
    "start": "482200",
    "end": "488470"
  },
  {
    "text": "similar to an ASG and the idea of a task which is very similar to an instance in addition to this the tightest API has",
    "start": "488470",
    "end": "495400"
  },
  {
    "text": "many references to actual AWS constructs like a Obi's like Auto scale and groups",
    "start": "495400",
    "end": "501180"
  },
  {
    "text": "etcetera because we try to mirror these concepts as closely as possible or even",
    "start": "501180",
    "end": "506380"
  },
  {
    "text": "push responsibilities as much as possible onto AWS behind that tightest API we have the tightest master and the",
    "start": "506380",
    "end": "513010"
  },
  {
    "text": "tightest master is responsible for orchestrating the cluster and it has the source of truth of the cluster that",
    "start": "513010",
    "end": "518590"
  },
  {
    "text": "stores inside Cassandra and it forces down all of the state of cluster in tomatoes and maize so this is then",
    "start": "518590",
    "end": "524740"
  },
  {
    "text": "responsible for farm and get out to all of the agents and getting them to converge on the intended state of the cluster",
    "start": "524740",
    "end": "531390"
  },
  {
    "text": "diving a little bit deeper into the tightest agent architecture today we use a previously we've used meso station and",
    "start": "531780",
    "end": "538890"
  },
  {
    "text": "Mesa cosa agent has around the tightest executors and the tightest executors effectively our own you can think of it",
    "start": "538890",
    "end": "545550"
  },
  {
    "text": "as a provider where it talks a docker it spins up containers it matters that container lifecycle so what's missing in",
    "start": "545550",
    "end": "552690"
  },
  {
    "start": "552000",
    "end": "635000"
  },
  {
    "text": "this architecture it's lasted us a few years now it's in production and we were",
    "start": "552690",
    "end": "558240"
  },
  {
    "text": "pretty happy with it there's a couple of things that we wanted",
    "start": "558240",
    "end": "563490"
  },
  {
    "text": "what are these was a northbound API so the idea that pods and nodes could signal upstream weather status is we've",
    "start": "563490",
    "end": "571890"
  },
  {
    "text": "actually talked about this in our blog in the blog post of using predictive CPU scheduling for opportunistic workloads",
    "start": "571890",
    "end": "578700"
  },
  {
    "text": "these nodes know more about their state than the cluster of control plane does for example a node can analyze its",
    "start": "578700",
    "end": "585360"
  },
  {
    "text": "workload and say I have for free CP is available and change its node status to say this the other aspect is",
    "start": "585360",
    "end": "593460"
  },
  {
    "text": "extensibility the fact that the downstream API can include anything like",
    "start": "593460",
    "end": "599880"
  },
  {
    "text": "an I am role or various metadata about the pod allows us to go ahead and",
    "start": "599880",
    "end": "604950"
  },
  {
    "text": "monitor that information and act upon that information intelligently previously with meso the answer for this",
    "start": "604950",
    "end": "610440"
  },
  {
    "text": "was to write a custom C++ module and do a bunch of awkward stuff to make it work whereas a you know kubernetes has some",
    "start": "610440",
    "end": "617760"
  },
  {
    "text": "better solutions for this and at the end of the day we wanted to leverage custom data we wanted to be able to leverage",
    "start": "617760",
    "end": "623490"
  },
  {
    "text": "the RDS and we wanted to leverage config maps in other objects in order to",
    "start": "623490",
    "end": "628560"
  },
  {
    "text": "instrument our system in order to go ahead and experiment with our system and",
    "start": "628560",
    "end": "635250"
  },
  {
    "start": "635000",
    "end": "730000"
  },
  {
    "text": "lastly the vibrant community we saw what the kubernetes community was doing and what all of you out there have been",
    "start": "635250",
    "end": "641640"
  },
  {
    "text": "developing and we were kind of jealous like we wanted access to this so that",
    "start": "641640",
    "end": "647010"
  },
  {
    "text": "left us kubernetes curious and we wanted to see whether we could start to",
    "start": "647010",
    "end": "652680"
  },
  {
    "text": "leverage parts of kubernetes in our ecosystem or in our environment so we looked at the typical kubernetes",
    "start": "652680",
    "end": "658680"
  },
  {
    "text": "architecture and in the typical kubernetes architecture instead of having a separate API and control plane",
    "start": "658680",
    "end": "663959"
  },
  {
    "text": "and that everything is built around the API server and all of your clients go ahead and talk to the API server and whisper",
    "start": "663959",
    "end": "670370"
  },
  {
    "text": "in your objects around you know replication sets or staple sets etc and",
    "start": "670370",
    "end": "675740"
  },
  {
    "text": "then you have controllers that go ahead and act on these objects to go ahead and create the pods inside of the API server",
    "start": "675740",
    "end": "682070"
  },
  {
    "text": "that then the kubja is responsible for converging the state on if we look at",
    "start": "682070",
    "end": "687230"
  },
  {
    "text": "the typical couplet the couplet does have a level of modularity the level of",
    "start": "687230",
    "end": "692480"
  },
  {
    "text": "modularity in the Kubla is built upon the idea of using the CRI the container runtime interface the container runtime",
    "start": "692480",
    "end": "698959"
  },
  {
    "text": "interface allows people to drop in replacement container runtimes and run",
    "start": "698959",
    "end": "704209"
  },
  {
    "text": "their own containers but these container runtimes and it has two other large portions of plug ability CSI the",
    "start": "704209",
    "end": "709910"
  },
  {
    "text": "container storage interface and CNI the container network interface and as long as you conform to the idea that the",
    "start": "709910",
    "end": "715940"
  },
  {
    "text": "couplet uses to build up pods and build up containerization environments you can",
    "start": "715940",
    "end": "721339"
  },
  {
    "text": "go ahead and implement a CRI compliant runtime and get all of the features and the capabilities that the cupola gives",
    "start": "721339",
    "end": "727279"
  },
  {
    "text": "you so we had a couple options forward with this and a couple options to decide",
    "start": "727279",
    "end": "733339"
  },
  {
    "text": "how we wanted to start to adopt kubernetes the first option was to",
    "start": "733339",
    "end": "738829"
  },
  {
    "text": "leverage pure kubernetes with kubernetes controllers and this is how a lot of the",
    "start": "738829",
    "end": "744140"
  },
  {
    "text": "community runs kubernetes is a simple architecture it works for most people but Titus has grown over the past couple",
    "start": "744140",
    "end": "751880"
  },
  {
    "text": "years to become a fairly large portion of our fleet and in that we have a lot",
    "start": "751880",
    "end": "756890"
  },
  {
    "text": "of users inside of Netflix that are used to Titus API and asking those hundreds of users to move over to a new API would",
    "start": "756890",
    "end": "764839"
  },
  {
    "text": "probably be a little bit difficult the other aspect is that we wanted to use as many components as we had today because",
    "start": "764839",
    "end": "771980"
  },
  {
    "text": "we were operationally used to them and we had known too we we knew how to run them at scale so the other approach is",
    "start": "771980",
    "end": "780140"
  },
  {
    "text": "to run the API server as a replacement tomatoes this is nice because it's a",
    "start": "780140",
    "end": "785990"
  },
  {
    "text": "small incremental change it involves replacing one component the other aspect",
    "start": "785990",
    "end": "791870"
  },
  {
    "text": "is that it doesn't require those hundreds of callers to move over the the downside of this is it's an unproven",
    "start": "791870",
    "end": "796940"
  },
  {
    "text": "path it not always in unproven paths the couplet itself isn't meant to absorb",
    "start": "796940",
    "end": "803070"
  },
  {
    "text": "pods really from like arbitrary pod providers or have a lot of the information that we were able to pass in",
    "start": "803070",
    "end": "809340"
  },
  {
    "text": "to the containerization platform previously in addition to that the other",
    "start": "809340",
    "end": "817710"
  },
  {
    "text": "aspects are that Titus has some different concerns in terms of security and in terms of isolation that D typical",
    "start": "817710",
    "end": "825480"
  },
  {
    "text": "our architecture did for example we care a lot about security in terms of container breakout we care a lot about",
    "start": "825480",
    "end": "831840"
  },
  {
    "text": "isolation in terms of performance so with this architecture we decided to go down the route of using API server as a",
    "start": "831840",
    "end": "839220"
  },
  {
    "text": "drop-in replacement from asos and running this thing that we've decide to call titus kubernetes in titus",
    "start": "839220",
    "end": "845280"
  },
  {
    "text": "kubernetes what we do is we have the Titus master and the Titus master all it does is it pushes pods down into API",
    "start": "845280",
    "end": "851790"
  },
  {
    "text": "server and then API server only runs a subset or runs with a subset of the",
    "start": "851790",
    "end": "857370"
  },
  {
    "text": "controllers that you typically have make kubernetes architecture and these are just your basic things to maintain your",
    "start": "857370",
    "end": "862590"
  },
  {
    "text": "namespaces to maintain policy etc and then this gets pushed down to the agent",
    "start": "862590",
    "end": "868620"
  },
  {
    "text": "whose job it is to eventually converge upon the state that the Titus control plane has whispered down into API server",
    "start": "868620",
    "end": "874920"
  },
  {
    "text": "and these controllers are things that we all largely have already implemented so",
    "start": "874920",
    "end": "880920"
  },
  {
    "text": "we already have implemented things like resource code isn't the tightest master a horizontal pod let's go in the ties",
    "start": "880920",
    "end": "886230"
  },
  {
    "text": "master the idea of a cloud controller and these are the proven components that I was talking about earlier not only",
    "start": "886230",
    "end": "891930"
  },
  {
    "text": "this but we also have components inside of the rest of the ecosystem like spinnaker that does deployments and that",
    "start": "891930",
    "end": "897450"
  },
  {
    "text": "does config management for us so what about the agent how do we move forward",
    "start": "897450",
    "end": "902670"
  },
  {
    "start": "900000",
    "end": "1300000"
  },
  {
    "text": "with the agent given that this is how we move forward with the control plane so we ask ourselves what if we just",
    "start": "902670",
    "end": "910470"
  },
  {
    "text": "implements Eri what if we just implement that API that I was talking about",
    "start": "910470",
    "end": "915540"
  },
  {
    "text": "earlier that anyone can go ahead and drop in a replacement modular interface well first year to understand what we",
    "start": "915540",
    "end": "922680"
  },
  {
    "text": "were working against before we were working against the maysa API and the miso API is a much smaller footprint in",
    "start": "922680",
    "end": "930030"
  },
  {
    "text": "a much less opinion API it effectively has two callbacks launch tasks in kill tasks and in that",
    "start": "930030",
    "end": "936480"
  },
  {
    "text": "it basically passes use and bytes that are from the control plane and you get to decide whatever you want to do with",
    "start": "936480",
    "end": "942780"
  },
  {
    "text": "it it's not particularly opinionated on what's what's in that it can be a pod it can be a container it can even be a",
    "start": "942780",
    "end": "948870"
  },
  {
    "text": "spark job on the other hand this is the CRI API and this is only a subset of the",
    "start": "948870",
    "end": "954690"
  },
  {
    "text": "CRI API the CRI API is incredibly opinionated about how backends have to",
    "start": "954690",
    "end": "959760"
  },
  {
    "text": "work least of the composition model that it dictates and that composition model is built around the idea of pods and",
    "start": "959760",
    "end": "965400"
  },
  {
    "text": "although that composition model is super powerful it's also fairly complicated",
    "start": "965400",
    "end": "970410"
  },
  {
    "text": "and it had a lot of cost for us to move over to and part of this cost comes from",
    "start": "970410",
    "end": "976470"
  },
  {
    "text": "the fact that the tightest executor actually implemented a lot of aspects that the cupola was responsible for in a",
    "start": "976470",
    "end": "983280"
  },
  {
    "text": "CRI world because we talk directly to docker we were responsible for much of",
    "start": "983280",
    "end": "989130"
  },
  {
    "text": "the container orchestration in terms of starting up the container creating in the container an image management that",
    "start": "989130",
    "end": "994320"
  },
  {
    "text": "the Koopa is typically responsible for and we wanted to keep this code given that we knew how it worked and it had been operationalized at our scale in",
    "start": "994320",
    "end": "1002900"
  },
  {
    "text": "addition to that we had built up our own networking plugins in our own storage plugins that didn't really jive in the",
    "start": "1002900",
    "end": "1008990"
  },
  {
    "text": "world of CNI in CSI and the cost of moving these over was unknown at the time we also had our own container",
    "start": "1008990",
    "end": "1015680"
  },
  {
    "text": "composition model that wasn't pods instead we relied on this idea of system services where the actual executor was",
    "start": "1015680",
    "end": "1022130"
  },
  {
    "text": "responsible for injecting in the sidecars that ran alongside the user's code the only real thing that we were",
    "start": "1022130",
    "end": "1030500"
  },
  {
    "text": "missing that the Koopa implemented was C group management and being able to make sure that the container is torn down at",
    "start": "1030500",
    "end": "1036949"
  },
  {
    "text": "the end of the the executors lifecycle so another question was what if we just",
    "start": "1036949",
    "end": "1042050"
  },
  {
    "text": "implement a kubernetes api client what if we go ahead and we talk directly to",
    "start": "1042050",
    "end": "1047839"
  },
  {
    "text": "api server and we go ahead and have all the behavior of converging the state of",
    "start": "1047839",
    "end": "1053840"
  },
  {
    "text": "the node ourselves",
    "start": "1053840",
    "end": "1057159"
  },
  {
    "text": "and this is where we realized everything that we have missing inside the tightest",
    "start": "1058880",
    "end": "1064529"
  },
  {
    "text": "executors the tightest executors delegated the idea of no registration to the maysa agent it delegated that",
    "start": "1064529",
    "end": "1071010"
  },
  {
    "text": "reconciliation model of when the system comes up from fresh or when the system comes up from failure to the Mesa agent",
    "start": "1071010",
    "end": "1077549"
  },
  {
    "text": "and it left state cash into the meso station and this is where virtual Kubla came in where virtual couplet",
    "start": "1077549",
    "end": "1084570"
  },
  {
    "text": "effectively takes the API servers model of a declarative API saying this is what",
    "start": "1084570",
    "end": "1090210"
  },
  {
    "text": "you should be running to pushing that down to an imperative API and where you",
    "start": "1090210",
    "end": "1095490"
  },
  {
    "text": "can implement the callbacks to say let me actuate your system say run this task or set this task down in addition to",
    "start": "1095490",
    "end": "1103230"
  },
  {
    "text": "that virtual couplet makes it so that you don't have to do a lot of the heavy lifting that you traditionally have to",
    "start": "1103230",
    "end": "1108360"
  },
  {
    "text": "do when you're implementing an API server client like for example the state caching it does secret caching and it",
    "start": "1108360",
    "end": "1114899"
  },
  {
    "text": "has config map caching so you don't have to implement a lot of this what we call under French and heavy lifting it also",
    "start": "1114899",
    "end": "1121440"
  },
  {
    "text": "implements a reconciliation model it's been proven by a bunch of folks and been operationalized by a bunch of other",
    "start": "1121440",
    "end": "1127169"
  },
  {
    "text": "folks rather than having to have us figure out how to implement this in step on all the potential landmines that are",
    "start": "1127169",
    "end": "1132960"
  },
  {
    "text": "out there in the virtual coop of the API the callbacks that we I was talking about are really similar to the Masons",
    "start": "1132960",
    "end": "1139500"
  },
  {
    "text": "callbacks the mesas callbacks are launched a scintilla task whereas the virtual couplets api's our create pod",
    "start": "1139500",
    "end": "1147840"
  },
  {
    "text": "delete pod update pod and if you want to implement reconciliation you have to implement get pod a couple api's and",
    "start": "1147840",
    "end": "1155899"
  },
  {
    "text": "virtual couplet really doesn't care what's inside of that pod specification in fact we were able to move over by",
    "start": "1155899",
    "end": "1162750"
  },
  {
    "text": "simply taking the mesas container info that we had before and encoding that as",
    "start": "1162750",
    "end": "1168029"
  },
  {
    "text": "a base64 value and stuffing that in the pod and saying this is gonna be our pod spec we're gonna kind of ignore all of",
    "start": "1168029",
    "end": "1174510"
  },
  {
    "text": "the fields that kubernetes is super opinionated about and then said overload those with their own specifications of",
    "start": "1174510",
    "end": "1180779"
  },
  {
    "text": "you know what image we're using or what resources were using for example we have this idea of two level resources where",
    "start": "1180779",
    "end": "1187470"
  },
  {
    "text": "resources can specialize and that's not really something that implemented vascular resources so",
    "start": "1187470",
    "end": "1194549"
  },
  {
    "text": "instead we were able to leverage virtual Kuwait and pass down these our pay Cree sources through the pot specification",
    "start": "1194549",
    "end": "1202350"
  },
  {
    "text": "lastly the transformation of that declarative API is really important to us because for every Titus executor to",
    "start": "1202350",
    "end": "1210970"
  },
  {
    "text": "have to have the knowledge to converge upon a given state would have been cumbersome and being able to delegate",
    "start": "1210970",
    "end": "1217269"
  },
  {
    "text": "that to a library is a separation of concerns so you can let a shared system",
    "start": "1217269",
    "end": "1222429"
  },
  {
    "text": "do this and this is how we came up with the Titus virtual Kubla architecture where our implementation of the virtual",
    "start": "1222429",
    "end": "1230230"
  },
  {
    "text": "couplet goes ahead and uses system D as a replacement to the responsibilities",
    "start": "1230230",
    "end": "1236380"
  },
  {
    "text": "that couplet was previously performing to create and destroy C groups in those",
    "start": "1236380",
    "end": "1241630"
  },
  {
    "text": "C groups we run the tightest executors and this is the exact same code that we were able to run in our previous",
    "start": "1241630",
    "end": "1247539"
  },
  {
    "text": "architecture without having to change any lines of code and then that can go ahead and talk back to docker and run",
    "start": "1247539",
    "end": "1254470"
  },
  {
    "text": "the user container and this was really appealing to us because it meant that we could run almost all the same code that",
    "start": "1254470",
    "end": "1262419"
  },
  {
    "text": "we previously ran and we previously operationalized and for the team at 11 people we didn't have to retrain",
    "start": "1262419",
    "end": "1268299"
  },
  {
    "text": "everyone on how the the system runs differently on kubernetes versus on our",
    "start": "1268299",
    "end": "1274840"
  },
  {
    "text": "legacy architecture and as a cluster what we can do is we can run an instance",
    "start": "1274840",
    "end": "1280000"
  },
  {
    "text": "of Titus virtual kuba on every instance inside if our our clusters and then",
    "start": "1280000",
    "end": "1285730"
  },
  {
    "text": "these can go ahead and spend uptight executors underneath them and we can reroll these in flight so did the the",
    "start": "1285730",
    "end": "1292779"
  },
  {
    "text": "virtual couplet library has features to be able to do in place we start in a place reconciliation so what about the",
    "start": "1292779",
    "end": "1301480"
  },
  {
    "start": "1300000",
    "end": "1430000"
  },
  {
    "text": "transition we obviously couldn't say hey everyone shut down your pods shut down",
    "start": "1301480",
    "end": "1307600"
  },
  {
    "text": "your clusters and move over we had to have a Federation solution and that's",
    "start": "1307600",
    "end": "1312880"
  },
  {
    "text": "where Titus Federation came into play and what Titus Federation is is it's a",
    "start": "1312880",
    "end": "1317889"
  },
  {
    "text": "mechanism by which we can use to route different workloads to different cells in each region we have about two cells",
    "start": "1317889",
    "end": "1325360"
  },
  {
    "text": "today to the three cells and we split workloads in order to scale tightest because we know how much scale a given",
    "start": "1325360",
    "end": "1332470"
  },
  {
    "text": "cell can handle we can basically rely on on this information to say let me go",
    "start": "1332470",
    "end": "1338049"
  },
  {
    "text": "ahead and take you to the next chunk of reliable scale by adding another cell we",
    "start": "1338049",
    "end": "1343299"
  },
  {
    "text": "have a look a side table that says based on some routing rules dispatch this workload to a cell and we were able to",
    "start": "1343299",
    "end": "1349570"
  },
  {
    "text": "leverage the same capability to say hey your workload is a little bit more tolerant to things therefore we can",
    "start": "1349570",
    "end": "1355960"
  },
  {
    "text": "route you to the Cooper knyghtes cluster earlier rather than a very high risk workload and then on the read path it",
    "start": "1355960",
    "end": "1363429"
  },
  {
    "text": "can take the view from our kubernetes cells and our Mesa cells and combine these into one global view of the system",
    "start": "1363429",
    "end": "1371429"
  },
  {
    "text": "so what we were able to do in transition was run the stack with maysa and run the",
    "start": "1371429",
    "end": "1379120"
  },
  {
    "text": "staff with kubernetes side by side under tightest Federation and our users were able to continue to speak the same API",
    "start": "1379120",
    "end": "1386639"
  },
  {
    "text": "that they were speaking to before where they had these models that were very similar to AWS models and this is",
    "start": "1386639",
    "end": "1395649"
  },
  {
    "text": "something that we been able to prove at some level scale this is one of our",
    "start": "1395649",
    "end": "1400840"
  },
  {
    "text": "clusters that effectively runs production like workloads and this is a graph of container starts per second",
    "start": "1400840",
    "end": "1407679"
  },
  {
    "text": "where the green line is the number of container starts per second-- on the virtual couplet and the red line is the",
    "start": "1407679",
    "end": "1413500"
  },
  {
    "text": "number were on basis and we were able to effectively switch to users in flight",
    "start": "1413500",
    "end": "1418720"
  },
  {
    "text": "without any of them noticing that the underlying architecture had changed out",
    "start": "1418720",
    "end": "1425250"
  },
  {
    "text": "so what about the challenges this project had you know challenges like",
    "start": "1428530",
    "end": "1435640"
  },
  {
    "start": "1430000",
    "end": "1498000"
  },
  {
    "text": "every project does the first aspect that was difficult was the lack of",
    "start": "1435640",
    "end": "1440800"
  },
  {
    "text": "documentation on controllers kubernetes the fact that we were running kubernetes in kind of an odd way and that virtual",
    "start": "1440800",
    "end": "1447850"
  },
  {
    "text": "coop let us do a lot of stuff that you wouldn't traditionally have the ability to do in a controller kubernetes world",
    "start": "1447850",
    "end": "1455170"
  },
  {
    "text": "meant that we have to effectively run the kulit and figure out what the kulit was doing in order to determine what the",
    "start": "1455170",
    "end": "1462190"
  },
  {
    "text": "behavior the virtual Kubla should do or the types of virtual couplets should do and really that boils down to the lack",
    "start": "1462190",
    "end": "1467650"
  },
  {
    "text": "of a formalized container state machine so what we ended up doing in order to",
    "start": "1467650",
    "end": "1472930"
  },
  {
    "text": "solve this problem was we ran the couplet and we simulated a bunch of state transitions and we figured out",
    "start": "1472930",
    "end": "1478750"
  },
  {
    "text": "what the couplet was doing in made the virtual koopa act in the same way and that kind of became like a running thing",
    "start": "1478750",
    "end": "1486160"
  },
  {
    "text": "where rather than having any kind of documentation to look towards the solution was to look towards the good",
    "start": "1486160",
    "end": "1492790"
  },
  {
    "text": "code in the couplet as a formalization of the specification so what about the",
    "start": "1492790",
    "end": "1499270"
  },
  {
    "start": "1498000",
    "end": "1537000"
  },
  {
    "text": "future one of the things that we've considered is moving more and more States to the API server and saying you",
    "start": "1499270",
    "end": "1507400"
  },
  {
    "text": "know maybe have like jobs in the API server or maybe having more configuration information inside of the API server the other aspect that we've",
    "start": "1507400",
    "end": "1515710"
  },
  {
    "text": "considered is how do we scale out API server and can we leverage --vk to scale at the API server of saying have one v-k",
    "start": "1515710",
    "end": "1522490"
  },
  {
    "text": "that registers in multiple API servers and combines this data together we're alternatively even having a VK that",
    "start": "1522490",
    "end": "1529950"
  },
  {
    "text": "represents multiple API servers underneath it or multiple clusters underneath it lastly the flexibility",
    "start": "1529950",
    "end": "1539470"
  },
  {
    "start": "1537000",
    "end": "1589000"
  },
  {
    "text": "that the VK gives us is immense and we've thought about adding new executors to the virtual kulit for example the",
    "start": "1539470",
    "end": "1546640"
  },
  {
    "text": "ability to add a firecracker G visor based executors would give us the ability to run containers in greater",
    "start": "1546640",
    "end": "1552520"
  },
  {
    "text": "isolation rather than having a environment where we're using docker that has lesser isolation and that is",
    "start": "1552520",
    "end": "1560980"
  },
  {
    "text": "the tightest virtual couplet thank you I think we ended a little bit",
    "start": "1560980",
    "end": "1571600"
  },
  {
    "text": "early so we can take some questions now and you might get a sticker you asked early hey do you have one he's gonna",
    "start": "1571600",
    "end": "1580210"
  },
  {
    "text": "come with a mic too so you have said",
    "start": "1580210",
    "end": "1590080"
  },
  {
    "start": "1589000",
    "end": "1855000"
  },
  {
    "text": "that we can use the pad abstraction to express pretty much anything which I understand that this does not need to be",
    "start": "1590080",
    "end": "1597280"
  },
  {
    "text": "necessarily were close as we know them with some kubernetes you use the example",
    "start": "1597280",
    "end": "1602560"
  },
  {
    "text": "of ordering pizza the question is kubernetes like the",
    "start": "1602560",
    "end": "1607750"
  },
  {
    "text": "extreme kubernetes is pretty strict about the schema of the pod template of",
    "start": "1607750",
    "end": "1613660"
  },
  {
    "text": "the pods back so how do you create your",
    "start": "1613660",
    "end": "1619390"
  },
  {
    "text": "own custom schema for a pods back for pods back yes we basically take in the",
    "start": "1619390",
    "end": "1625120"
  },
  {
    "text": "same pod sect that kubernetes does it's still kubernetes that's delegating the workloads to the nodes specifically so",
    "start": "1625120",
    "end": "1631990"
  },
  {
    "text": "it's still Cuban eyes that's scheduling it out so it still needs to understand the same things and we take in so what",
    "start": "1631990",
    "end": "1638080"
  },
  {
    "text": "we've done on the provider side is we'll take in the same like if you're having a CPU constraint it's up to the provider",
    "start": "1638080",
    "end": "1644710"
  },
  {
    "text": "itself to write that in and take it in but if you do write it in it's not gonna stop you from scheduling out to the",
    "start": "1644710",
    "end": "1650590"
  },
  {
    "text": "virtual couplet node it just probably won't work as expected so it means that",
    "start": "1650590",
    "end": "1655750"
  },
  {
    "text": "the schema of a parts back for like any",
    "start": "1655750",
    "end": "1660850"
  },
  {
    "text": "obstruction that they can think of yeah needs to be the same schema that's for regular pods yeah and that's it's really we put a lot",
    "start": "1660850",
    "end": "1667390"
  },
  {
    "text": "of that work and I'm talking from like a maintainer virtual kulit we put a lot of that onus on the actual providers",
    "start": "1667390",
    "end": "1673960"
  },
  {
    "text": "themselves so you will implement as much of the pods back as you want to and",
    "start": "1673960",
    "end": "1679540"
  },
  {
    "text": "you'll take in you'll figure out what it means in terms of consumption and in terms of what even like what a pod image",
    "start": "1679540",
    "end": "1685480"
  },
  {
    "text": "would mean and things like that but for curious discovery well it does need to have some sort of you know aspect of a",
    "start": "1685480",
    "end": "1692260"
  },
  {
    "text": "pod I mean to expand a little bit upon that Titus solves this problem by basically",
    "start": "1692260",
    "end": "1699779"
  },
  {
    "text": "taking all four customer information and just stuffing it into object meta as a base64 encoded string yeah as an",
    "start": "1699779",
    "end": "1709619"
  },
  {
    "text": "annotation and in doing this we were able to move over our legacy schema over",
    "start": "1709619",
    "end": "1716460"
  },
  {
    "text": "to virtual couplet without having to figure out how to map things like image and map things like resources because",
    "start": "1716460",
    "end": "1722759"
  },
  {
    "text": "the resources model that we had previously was a little bit different",
    "start": "1722759",
    "end": "1727970"
  },
  {
    "text": "yeah so I think this in the Netflix use cases Stephanie is good one demonstrator",
    "start": "1729919",
    "end": "1735929"
  },
  {
    "text": "use these of the virtue coupe net buy and shooing and how to adapt existing",
    "start": "1735929",
    "end": "1741149"
  },
  {
    "text": "and software platform right using other technology and into the kubernetes in a",
    "start": "1741149",
    "end": "1747960"
  },
  {
    "text": "platform you also discussed the three dolphin have between different options I was just wondering and if",
    "start": "1747960",
    "end": "1753690"
  },
  {
    "text": "Jerez speaking the English it'll cases if I build something from scratch so",
    "start": "1753690",
    "end": "1758999"
  },
  {
    "text": "what's the good user case is Steven useful using the coop net also if you look at the long term rights and",
    "start": "1758999",
    "end": "1765749"
  },
  {
    "text": "montañas other thing so you think this kind of the solution yeah by introducing",
    "start": "1765749",
    "end": "1771239"
  },
  {
    "text": "the cubanelle what you could let us do a good solution from the non-han perspective or why don't we just have a",
    "start": "1771239",
    "end": "1778639"
  },
  {
    "text": "puny and kubernetes and the native solution thank you so for us we had a",
    "start": "1778639",
    "end": "1786419"
  },
  {
    "text": "couple things to consider we had the immediate world to consider do we spend",
    "start": "1786419",
    "end": "1791460"
  },
  {
    "text": "a bunch of time transitioning to a code base which although people run at a relatively large scale don't run an",
    "start": "1791460",
    "end": "1797909"
  },
  {
    "text": "environment that's like exactly like ours and the other aspect was how long",
    "start": "1797909",
    "end": "1803789"
  },
  {
    "text": "do we want to spend migrating our code there was the slide earlier that I had that showed the overlap between",
    "start": "1803789",
    "end": "1809129"
  },
  {
    "text": "components at the virtual couplet at the time his executors implemented and the Kouba implemented now we could spend all",
    "start": "1809129",
    "end": "1816299"
  },
  {
    "text": "the time to move over our code to go right under the couplet and to go run into the couplet architecture but we",
    "start": "1816299",
    "end": "1822809"
  },
  {
    "text": "wanted to make an incremental decision at the time at least to utilize the components that",
    "start": "1822809",
    "end": "1829190"
  },
  {
    "text": "we had that we knew worked whereas you know the the API server components that",
    "start": "1829190",
    "end": "1834529"
  },
  {
    "text": "we knew that worked and use the best of both worlds longer term we might consider changing how things work but given the different",
    "start": "1834529",
    "end": "1843169"
  },
  {
    "text": "priorities we had at our scale we would have to reconsider in the future of whether we want to move to Rockland or",
    "start": "1843169",
    "end": "1849559"
  },
  {
    "text": "not are you asking for like the general",
    "start": "1849559",
    "end": "1858139"
  },
  {
    "start": "1855000",
    "end": "1926000"
  },
  {
    "text": "use kit it's a general use case of virtual couplet I mean if you're trying to mask different infrastructure that's",
    "start": "1858139",
    "end": "1864039"
  },
  {
    "text": "not easily implemented in core kubernetes already that's where I would",
    "start": "1864039",
    "end": "1869840"
  },
  {
    "text": "the couplet would come in or if you're trying to spin out to a different infrastructure or a different service and things like that if couplet bridge",
    "start": "1869840",
    "end": "1878179"
  },
  {
    "text": "to a couplet isn't it's the solution to the problem you wouldn't look at virtual cool at first you would say hey I have",
    "start": "1878179",
    "end": "1883760"
  },
  {
    "text": "this problem I want to use kubernetes on top of Titus or I want to I want to be able to use my container instances",
    "start": "1883760",
    "end": "1891320"
  },
  {
    "text": "infrastructure but I want to use the same API is as kubernetes and have a cluster on this side or a hybrid use",
    "start": "1891320",
    "end": "1897230"
  },
  {
    "text": "case could also be in this case where I have on-prem and I want I'm on prime clustered nodes or something that I also",
    "start": "1897230",
    "end": "1903710"
  },
  {
    "text": "have a cluster in the cloud I want to be able to use my same cluster my same API",
    "start": "1903710",
    "end": "1909380"
  },
  {
    "text": "to spin out to both that's when like the couplet could be a solution for you or the virtual couplet but there's a lot of",
    "start": "1909380",
    "end": "1915889"
  },
  {
    "text": "use cases so it's really like do you have a problem come talk to us and then maybe virtual ku with the right answer",
    "start": "1915889",
    "end": "1924070"
  },
  {
    "start": "1926000",
    "end": "2085000"
  },
  {
    "text": "do you have any examples other than the tightest virtual couplet and the other",
    "start": "1927110",
    "end": "1932420"
  },
  {
    "text": "question I had is is there the notion of a mixed mode cluster where you can use the regular pod controller and I guess",
    "start": "1932420",
    "end": "1940880"
  },
  {
    "text": "like the virtual kulit controller or I guess it's not a controller and like using nodes in your cluster and a",
    "start": "1940880",
    "end": "1947510"
  },
  {
    "text": "virtual couplet node right yeah that's one of our primary use cases in Azure actually in a lot of the clouds is we",
    "start": "1947510",
    "end": "1953870"
  },
  {
    "text": "run in this mixed mode where we use Azure container instances and we back that up by virtual couplet and then in",
    "start": "1953870",
    "end": "1961100"
  },
  {
    "text": "the cluster itself in your Karina's cluster wherever it is that's the nodes that are in the cluster and then anytime",
    "start": "1961100",
    "end": "1967130"
  },
  {
    "text": "you spin out to the virtual Kubla it actually spins out to a different service so it looks like it's in your",
    "start": "1967130",
    "end": "1973040"
  },
  {
    "text": "cluster but actually you don't hold any of those nodes or any of that compute perfect first question yeah wait what",
    "start": "1973040",
    "end": "1982160"
  },
  {
    "text": "was the first one sorry do you have any other examples of virtual couplets apart from the tightest version apart from Netflix yeah yeah so I'm a one thing I",
    "start": "1982160",
    "end": "1991010"
  },
  {
    "text": "didn't mention is we have a lot of providers in virtual couplet and so past Netflix past Microsoft we also have been",
    "start": "1991010",
    "end": "1998150"
  },
  {
    "text": "working with Alibaba VMware and those are provided in Hashi corp and these are",
    "start": "1998150",
    "end": "2003460"
  },
  {
    "text": "providers that are providing services to people in terms of end-users since we're",
    "start": "2003460",
    "end": "2009700"
  },
  {
    "text": "all like since the thing is virtual Kubla it's very specific in the terms of your spitting out two different service",
    "start": "2009700",
    "end": "2015520"
  },
  {
    "text": "correct so what ends up happening is a lot of us have a lot of customers that",
    "start": "2015520",
    "end": "2020710"
  },
  {
    "text": "we can't talk about it's like running a chaos it's like running gke and things like that so yes there's a lot of",
    "start": "2020710",
    "end": "2026740"
  },
  {
    "text": "end-user Netflix is one of the only ones that have built their own provider and built it for their own ease case I ask",
    "start": "2026740",
    "end": "2034300"
  },
  {
    "text": "one last question yeah when would I use like a runtime class versus a virtual",
    "start": "2034300",
    "end": "2040660"
  },
  {
    "text": "virtual kublai a runtime class is like a CRI implementation yeah I think that any",
    "start": "2040660",
    "end": "2047290"
  },
  {
    "text": "time where you have a composition model that's different than the CRI composition model or the composition",
    "start": "2047290",
    "end": "2052629"
  },
  {
    "text": "model is one case so for example if you want to run virtual machines they don't compose the same way that",
    "start": "2052630",
    "end": "2059500"
  },
  {
    "text": "particularly composed and some a bit darker or a container T and in the other",
    "start": "2059500",
    "end": "2064929"
  },
  {
    "text": "cases where you have pods that might not really be VMs or containers at all for",
    "start": "2064929",
    "end": "2071408"
  },
  {
    "text": "example if you want to run like a service function as a pod and I think",
    "start": "2071409",
    "end": "2077110"
  },
  {
    "text": "that time for me we want a one quick question and then you guys feel free to come and talk to this after for a couple",
    "start": "2077110",
    "end": "2083860"
  },
  {
    "text": "minutes yeah so the API between the hue API",
    "start": "2083860",
    "end": "2089648"
  },
  {
    "text": "server and the cubelet is not versioned and considered to be internal as the has",
    "start": "2089649",
    "end": "2095860"
  },
  {
    "text": "the virtual cubelet interface ever been broken by changes that are made in core cube between api server in couplet so",
    "start": "2095860",
    "end": "2103950"
  },
  {
    "text": "the virtual couplet one point out a little while ago and in that time we",
    "start": "2103950",
    "end": "2109570"
  },
  {
    "text": "haven't seen any breaking API changes but we would have to go ahead and mash",
    "start": "2109570",
    "end": "2115420"
  },
  {
    "text": "those API changes from the provider as that transition one of the aspects that",
    "start": "2115420",
    "end": "2120460"
  },
  {
    "text": "kinda makes us more complicated is that not all people who are creating pods for",
    "start": "2120460",
    "end": "2126700"
  },
  {
    "text": "consumption by the virtual crew but are actually conforming to the way that kubernetes behaves itself in at the end",
    "start": "2126700",
    "end": "2134920"
  },
  {
    "text": "of the day like this is kind of the problem you're gonna hate because you're running out of control Alice Cooper",
    "start": "2134920",
    "end": "2140080"
  },
  {
    "text": "Nettie's and that's not I wanted to officially supported and to like we're",
    "start": "2140080",
    "end": "2145360"
  },
  {
    "text": "kind of reverse engineering the behavior that the current system implements in implementing it ourselves Thanks okay well thank you thank you all",
    "start": "2145360",
    "end": "2154240"
  },
  {
    "text": "for coming out and if you want a couple more stickers feel free to come up",
    "start": "2154240",
    "end": "2159990"
  }
]