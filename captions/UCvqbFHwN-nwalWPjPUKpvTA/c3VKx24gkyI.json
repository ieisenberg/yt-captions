[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "my name is seo chang i'm a cto at infineon",
    "start": "560",
    "end": "6000"
  },
  {
    "text": "this talk we're going to talk about how our web assembly powers our fluvia open source project",
    "start": "6080",
    "end": "15799"
  },
  {
    "start": "15000",
    "end": "15000"
  },
  {
    "text": "for agenda for this talk we'll start with the overview of a fluvia project",
    "start": "16720",
    "end": "22720"
  },
  {
    "text": "and then we're going to challenges we encounters while building a flu build",
    "start": "22720",
    "end": "29119"
  },
  {
    "text": "a project that we are trying to solve um spoilers red",
    "start": "29119",
    "end": "34960"
  },
  {
    "text": "we think the western is a really powerful solution to our challenges",
    "start": "34960",
    "end": "40399"
  },
  {
    "text": "lastly we talk about the future directions",
    "start": "40399",
    "end": "45320"
  },
  {
    "text": "okay fluvio is open source event streaming platform",
    "start": "46399",
    "end": "52480"
  },
  {
    "text": "we open source in 2019 fluvio is retaining rust",
    "start": "52480",
    "end": "59600"
  },
  {
    "start": "56000",
    "end": "56000"
  },
  {
    "text": "and designed as a cloud-native platform from the ground up",
    "start": "59600",
    "end": "65439"
  },
  {
    "text": "we have basically the platform does is it collects",
    "start": "65439",
    "end": "70479"
  },
  {
    "text": "events from consumers and the producer and then it stores",
    "start": "70479",
    "end": "77280"
  },
  {
    "text": "and processed to the consumers and connectors",
    "start": "77280",
    "end": "83200"
  },
  {
    "text": "we have the producer can be written in many languages such as javascript",
    "start": "83200",
    "end": "89840"
  },
  {
    "text": "and python and rus of course the connectors that we have can",
    "start": "89840",
    "end": "95759"
  },
  {
    "text": "collect the data source from other database different variety of other platforms",
    "start": "95759",
    "end": "102880"
  },
  {
    "text": "such as kaffa the bluefield platform can persist",
    "start": "102880",
    "end": "108880"
  },
  {
    "text": "those events and dispatch to consumer other data syncs",
    "start": "108880",
    "end": "115359"
  },
  {
    "text": "okay so why build the platform for the event streaming",
    "start": "115920",
    "end": "121840"
  },
  {
    "text": "now before we can talk about event streaming we need to discuss one of the most significant trend in the",
    "start": "121840",
    "end": "128319"
  },
  {
    "text": "world right now the we defined",
    "start": "128319",
    "end": "135040"
  },
  {
    "text": "the trend that mattered to us is what we call building a real-time economy",
    "start": "136080",
    "end": "142879"
  },
  {
    "start": "138000",
    "end": "138000"
  },
  {
    "text": "this is where the business process and value chains are intelligent size",
    "start": "142879",
    "end": "148560"
  },
  {
    "text": "and connected we have made progress in a lot of digitization",
    "start": "148560",
    "end": "155040"
  },
  {
    "text": "as you can see on ag devices",
    "start": "155040",
    "end": "160080"
  },
  {
    "text": "converting a paper uh process to digi digital formats",
    "start": "160480",
    "end": "166560"
  },
  {
    "text": "the challenge is the second part the connected it is where the trillions of dollars",
    "start": "166560",
    "end": "172239"
  },
  {
    "text": "will be made or lost and the most important part of the connector",
    "start": "172239",
    "end": "177440"
  },
  {
    "text": "is latency for example the uber as a business",
    "start": "177440",
    "end": "183599"
  },
  {
    "text": "wasn't possible until we figured out how to rock the right request to other",
    "start": "183599",
    "end": "189760"
  },
  {
    "text": "drivers in a real time it is no longer options to",
    "start": "189760",
    "end": "195760"
  },
  {
    "text": "wait for hours or days to connect the data",
    "start": "195760",
    "end": "200879"
  },
  {
    "text": "either you adopt to the real-time economy or perish",
    "start": "200879",
    "end": "206640"
  },
  {
    "start": "207000",
    "end": "207000"
  },
  {
    "text": "okay so what are the challenges of trying to connect this data",
    "start": "207200",
    "end": "212799"
  },
  {
    "text": "the biggest issue is existing data processing paradigm we're using",
    "start": "212799",
    "end": "218640"
  },
  {
    "text": "request and response model in that model",
    "start": "218640",
    "end": "224159"
  },
  {
    "text": "you basically persist the data into some kind of storage devices or database",
    "start": "224159",
    "end": "231440"
  },
  {
    "text": "and you make requested response from the application",
    "start": "231440",
    "end": "237120"
  },
  {
    "text": "the most existing backend and microservices are done in this way",
    "start": "237120",
    "end": "243040"
  },
  {
    "text": "the problem with the request and response model is they are very inefficient",
    "start": "243040",
    "end": "248959"
  },
  {
    "text": "it takes minutes hours to process this data",
    "start": "248959",
    "end": "254400"
  },
  {
    "text": "and get and get to the app this paradigm is also known as a data",
    "start": "254400",
    "end": "260160"
  },
  {
    "text": "rest and it assumes the natural state of data is at the rest",
    "start": "260160",
    "end": "266080"
  },
  {
    "text": "which makes very difficult to reduce the latency since it's hard to",
    "start": "266080",
    "end": "272400"
  },
  {
    "text": "move things at rest okay so",
    "start": "272400",
    "end": "278479"
  },
  {
    "start": "276000",
    "end": "276000"
  },
  {
    "text": "how do we make a progress the pro the way the better way to",
    "start": "278479",
    "end": "284320"
  },
  {
    "text": "approach is to move to what's called approach call data emotion",
    "start": "284320",
    "end": "289440"
  },
  {
    "text": "which assumes that instead of moving instead of having a data at rest",
    "start": "289440",
    "end": "295680"
  },
  {
    "text": "let's make the data move always this improves efficiency",
    "start": "295680",
    "end": "301759"
  },
  {
    "text": "and also it maps to a lot of natural asynchronous oil processing",
    "start": "301759",
    "end": "310479"
  },
  {
    "text": "the the best approach for data emotion is",
    "start": "310479",
    "end": "316639"
  },
  {
    "text": "it's done to what's called stream processing and one way to visualize this is just",
    "start": "316639",
    "end": "322720"
  },
  {
    "text": "like flowing the stream of water where the data kind of represents the",
    "start": "322720",
    "end": "328560"
  },
  {
    "text": "water and we have a processing steps in that can transform data in any way that",
    "start": "328560",
    "end": "335759"
  },
  {
    "text": "should we need to do okay",
    "start": "335759",
    "end": "340960"
  },
  {
    "start": "339000",
    "end": "339000"
  },
  {
    "text": "the best part of the data stream the stream process is is a composable",
    "start": "340960",
    "end": "346880"
  },
  {
    "text": "you can filter or map or combine into other streams you can split them and you can merge it",
    "start": "346880",
    "end": "354479"
  },
  {
    "text": "and into many different shapes and also it is very functional",
    "start": "354479",
    "end": "360560"
  },
  {
    "text": "which means that this is where a lot of developers find easier to",
    "start": "360560",
    "end": "366639"
  },
  {
    "text": "to have mental constructs okay",
    "start": "366639",
    "end": "372720"
  },
  {
    "text": "so you are convinced that data in motion and streaming process is the best thing in the world",
    "start": "372720",
    "end": "379199"
  },
  {
    "text": "however there's no free launch moving data is to be very expensive",
    "start": "379199",
    "end": "385919"
  },
  {
    "text": "here's one map of visualizing the aws",
    "start": "385919",
    "end": "391039"
  },
  {
    "text": "transit costs this is how aws makes money from you",
    "start": "391039",
    "end": "397520"
  },
  {
    "start": "393000",
    "end": "393000"
  },
  {
    "text": "uh and your worth your uh cfo you know uh have a very interesting and digging",
    "start": "397520",
    "end": "404639"
  },
  {
    "text": "into these these numbers now anything beyond the bpc will cost you daily",
    "start": "404639",
    "end": "412880"
  },
  {
    "text": "now it gets worse as you transfer to h to n80 gateway",
    "start": "412880",
    "end": "418560"
  },
  {
    "text": "or nab and two various different proxies",
    "start": "418560",
    "end": "423759"
  },
  {
    "text": "so this can be very expensive and if you don't carefully model your costs",
    "start": "423759",
    "end": "430319"
  },
  {
    "text": "on your microservices or the databases it can be a very",
    "start": "430319",
    "end": "435520"
  },
  {
    "text": "difference between successful project or or you're",
    "start": "435520",
    "end": "440639"
  },
  {
    "text": "shutting down your business okay now let's typically look at other existing",
    "start": "440639",
    "end": "447919"
  },
  {
    "start": "443000",
    "end": "443000"
  },
  {
    "text": "stream process how they done it they typically have some kind of ingest streams",
    "start": "447919",
    "end": "454800"
  },
  {
    "text": "that collects the data and put that into different processing",
    "start": "454800",
    "end": "461919"
  },
  {
    "text": "such as the filtering now the ingest stream can compress into smaller datasets but",
    "start": "462240",
    "end": "469919"
  },
  {
    "text": "still is somewhat similar magnitude now",
    "start": "469919",
    "end": "475360"
  },
  {
    "text": "the problem is that this network the large network",
    "start": "475360",
    "end": "480400"
  },
  {
    "text": "is going across the network and and",
    "start": "480400",
    "end": "485919"
  },
  {
    "text": "those network processing as you can see on before it can be really expensive",
    "start": "485919",
    "end": "491120"
  },
  {
    "text": "and you have to be very considerable to architecture networks such that it's",
    "start": "491120",
    "end": "496560"
  },
  {
    "text": "very cost efficient and reduce latency okay",
    "start": "496560",
    "end": "502319"
  },
  {
    "start": "501000",
    "end": "501000"
  },
  {
    "text": "the next there is a security problem whenever you are moving data across the",
    "start": "502319",
    "end": "508720"
  },
  {
    "text": "network it gives the potential for a network of the hackers and other",
    "start": "508720",
    "end": "517518"
  },
  {
    "text": "entity to to steal your data the zero trust model assumes there's no",
    "start": "518000",
    "end": "524560"
  },
  {
    "text": "basically secure or trusted network you have to have a mind of that",
    "start": "524560",
    "end": "530399"
  },
  {
    "text": "then your network is inherently insecure and the more data you move",
    "start": "530399",
    "end": "536160"
  },
  {
    "text": "and the faster moves the harder is to secure those data",
    "start": "536160",
    "end": "542000"
  },
  {
    "text": "okay so how do we solve this problem so so basically solution is",
    "start": "543279",
    "end": "549600"
  },
  {
    "start": "546000",
    "end": "546000"
  },
  {
    "text": "to actually reduce the data movement and one way to do is that instead of",
    "start": "549600",
    "end": "555600"
  },
  {
    "text": "moving the data we reduce the data by moving a compute2 near to the store as much as possible or",
    "start": "555600",
    "end": "563040"
  },
  {
    "text": "to the source of data and we leveraged power compute to reduce the data",
    "start": "563040",
    "end": "569120"
  },
  {
    "text": "to small as possible and the most low",
    "start": "569120",
    "end": "575279"
  },
  {
    "text": "with the powerful muscle low the computer and computer is getting faster while your network is not getting",
    "start": "575279",
    "end": "581839"
  },
  {
    "text": "there much faster so by doing that we saving the bandwidth",
    "start": "581839",
    "end": "588800"
  },
  {
    "text": "and reduce the latency at the same time saving costs and",
    "start": "588800",
    "end": "594080"
  },
  {
    "text": "increase reliability and and since data is small it's much easier",
    "start": "594080",
    "end": "599920"
  },
  {
    "text": "to audit and enforce the security policies",
    "start": "599920",
    "end": "605839"
  },
  {
    "text": "okay so now let's go back to this previous example and see how we saw this",
    "start": "606079",
    "end": "612959"
  },
  {
    "text": "the problems we encountered previously so instead of sending",
    "start": "612959",
    "end": "618480"
  },
  {
    "text": "string data to another another node we can actually combine into a single uh in",
    "start": "618480",
    "end": "624480"
  },
  {
    "text": "a node where we process the data and and only send out the data that makes",
    "start": "624480",
    "end": "632160"
  },
  {
    "text": "sense for the downstream stages",
    "start": "632160",
    "end": "637040"
  },
  {
    "text": "so in this example we actually gain factor of 50 to 1 reduction in in",
    "start": "637519",
    "end": "643920"
  },
  {
    "text": "bandwidth and i'm sure your cfo will love that",
    "start": "643920",
    "end": "649440"
  },
  {
    "text": "and if the network is go over to the aeg devices this",
    "start": "649440",
    "end": "655360"
  },
  {
    "text": "savings of course increases uh we call this a project called smart",
    "start": "655360",
    "end": "661040"
  },
  {
    "text": "stream processing where instead of having a stream to be kind of dumb pipe",
    "start": "661040",
    "end": "667040"
  },
  {
    "text": "we enhanced by adding intelligence uh two more to make this one network efficient",
    "start": "667040",
    "end": "676160"
  },
  {
    "start": "677000",
    "end": "677000"
  },
  {
    "text": "okay now with edge devices the smart streaming can be even more powerful",
    "start": "677120",
    "end": "683279"
  },
  {
    "text": "so one of the biggest issues dealing with iot device which is large data volumes",
    "start": "683279",
    "end": "689519"
  },
  {
    "text": "iot device doesn't usually have reliable or fast connections",
    "start": "689519",
    "end": "695360"
  },
  {
    "text": "it's not feasible to ship all the raw data to cloud for processing",
    "start": "695360",
    "end": "700880"
  },
  {
    "text": "it'll be too expensive and that just takes too long with the smart streaming we can move",
    "start": "700880",
    "end": "706959"
  },
  {
    "text": "data processing in the edges and move the only developer data to cloud for the further",
    "start": "706959",
    "end": "714720"
  },
  {
    "text": "analysis okay so now to enable smart streaming we need a computer infrastructure with",
    "start": "714839",
    "end": "721519"
  },
  {
    "start": "716000",
    "end": "716000"
  },
  {
    "text": "following properties first it needs to be portable",
    "start": "721519",
    "end": "726639"
  },
  {
    "text": "so we can move to support different cpus such as arm32 or",
    "start": "726639",
    "end": "733360"
  },
  {
    "text": "a powerful compute servers like intel amd",
    "start": "733360",
    "end": "739440"
  },
  {
    "text": "next you need to be efficient to minimize energy to run small devices",
    "start": "739440",
    "end": "746320"
  },
  {
    "text": "third you need to be able to sandbox such that it can be",
    "start": "746320",
    "end": "752320"
  },
  {
    "text": "run in any environment and the lastly",
    "start": "752320",
    "end": "757360"
  },
  {
    "text": "you need to support different languages it's no longer",
    "start": "757360",
    "end": "762639"
  },
  {
    "text": "too sufficient to just support a single language or single set of set of language related families",
    "start": "762639",
    "end": "770480"
  },
  {
    "start": "770000",
    "end": "770000"
  },
  {
    "text": "of course you know the answer we believe that the western or weapon sibling is truly",
    "start": "771200",
    "end": "777600"
  },
  {
    "text": "what we call movable compute does the existing the computer",
    "start": "777600",
    "end": "786160"
  },
  {
    "text": "platform is doesn't provide isolation and security guarantees that",
    "start": "786160",
    "end": "791920"
  },
  {
    "text": "we require a virtual machine is just basically too too heavy",
    "start": "791920",
    "end": "798079"
  },
  {
    "text": "and it doesn't provide probability the the containers are much better",
    "start": "798079",
    "end": "803920"
  },
  {
    "text": "but it doesn't provide a true isolation because there's a lot of money spending",
    "start": "803920",
    "end": "809440"
  },
  {
    "text": "on trying to lock up the containers um the other",
    "start": "809440",
    "end": "815200"
  },
  {
    "text": "the traditional approach of moving to the jar offers portability",
    "start": "815200",
    "end": "821279"
  },
  {
    "text": "uh but you know very tight to java virtual machine and it doesn't provide actually the true",
    "start": "821279",
    "end": "827519"
  },
  {
    "text": "isolation so web assembly technology is a game changer by providing true isolation",
    "start": "827519",
    "end": "834800"
  },
  {
    "text": "with portability it is better tested because everyone not running on every",
    "start": "834800",
    "end": "841920"
  },
  {
    "text": "browser with",
    "start": "841920",
    "end": "847519"
  },
  {
    "text": "webassembly now we have opportunity to move compute to anywhere",
    "start": "847519",
    "end": "853440"
  },
  {
    "text": "and this is the new type of infrastructure that we can advantage to to move everything to",
    "start": "853440",
    "end": "861279"
  },
  {
    "text": "the data emotion okay the bigger picture is that",
    "start": "861279",
    "end": "868160"
  },
  {
    "start": "864000",
    "end": "864000"
  },
  {
    "text": "the portability and isolation provide to allow us to reshape our compute",
    "start": "868160",
    "end": "875199"
  },
  {
    "text": "infrastructure and and data stack by flattening into vertical unified",
    "start": "875199",
    "end": "880800"
  },
  {
    "text": "stack instead of having to think of a separate computer and data stack",
    "start": "880800",
    "end": "887440"
  },
  {
    "text": "we can think of as just a unified stack",
    "start": "887440",
    "end": "893519"
  },
  {
    "text": "this stack can go from edges to cloud it can span a continent can span",
    "start": "893519",
    "end": "901839"
  },
  {
    "text": "to different locations or even to event to space and allow us to disaggregate",
    "start": "901839",
    "end": "909040"
  },
  {
    "text": "it's a lot existing monolithic micro service",
    "start": "909040",
    "end": "915440"
  },
  {
    "text": "or data stack and create a lot to compose different",
    "start": "915440",
    "end": "921680"
  },
  {
    "text": "more flexible stacks for our needs",
    "start": "921680",
    "end": "927680"
  },
  {
    "text": "okay so now let's go into how fluvio leverages web assembly",
    "start": "927680",
    "end": "933839"
  },
  {
    "text": "flubio combines streaming processing with the problem web assembly modules",
    "start": "933839",
    "end": "940800"
  },
  {
    "text": "which we call smart module and fluvia used the smart module as the",
    "start": "940800",
    "end": "947600"
  },
  {
    "text": "fundamental part of its platform the",
    "start": "947600",
    "end": "952959"
  },
  {
    "text": "fluvial has the part of a platform is control plane",
    "start": "952959",
    "end": "958320"
  },
  {
    "text": "which actually distribute this smart module into different parts of",
    "start": "958320",
    "end": "964079"
  },
  {
    "text": "platform you can move the smart module to the",
    "start": "964079",
    "end": "969519"
  },
  {
    "start": "966000",
    "end": "966000"
  },
  {
    "text": "connector that we can transfer which it can transform a various different protocol",
    "start": "969519",
    "end": "974720"
  },
  {
    "text": "into shapes necessary for further down into streams",
    "start": "974720",
    "end": "980480"
  },
  {
    "text": "it can also go into our domain the streaming process",
    "start": "980480",
    "end": "985920"
  },
  {
    "text": "unit where you can actually transform the stream into or merge them",
    "start": "985920",
    "end": "993360"
  },
  {
    "text": "and lastly it can also power our consumer which can be other aged devices",
    "start": "994000",
    "end": "1001680"
  },
  {
    "text": "for example iot devices it can be drawn or it can be autonomous vehicles",
    "start": "1001680",
    "end": "1009639"
  },
  {
    "text": "now we go further into how fluvial use western to",
    "start": "1011120",
    "end": "1016959"
  },
  {
    "text": "how computer underlying streams smart module itself is very opinionated",
    "start": "1016959",
    "end": "1024240"
  },
  {
    "text": "webassembly module optimized for streaming process now we want to",
    "start": "1024240",
    "end": "1031360"
  },
  {
    "text": "have smart module to make to be easy as possible for developers to",
    "start": "1031360",
    "end": "1036839"
  },
  {
    "text": "write so we abstract out the small modules to very simplest",
    "start": "1036839",
    "end": "1043280"
  },
  {
    "text": "constructs the green boxes where the smart modules are in relation to the rest of web",
    "start": "1043280",
    "end": "1051039"
  },
  {
    "text": "assembly modules the",
    "start": "1051039",
    "end": "1056880"
  },
  {
    "text": "the blue on the left side is the store binding this is where",
    "start": "1056880",
    "end": "1062799"
  },
  {
    "text": "the smart module intersects intersect with the data from the store",
    "start": "1062799",
    "end": "1068400"
  },
  {
    "text": "now the store can be different types of implementation it can be a file",
    "start": "1068400",
    "end": "1076640"
  },
  {
    "text": "it can be ebs or s3 or it can be a storage array",
    "start": "1076640",
    "end": "1083200"
  },
  {
    "text": "the regardless of the storage devices the store binding basically abstract out",
    "start": "1083760",
    "end": "1090080"
  },
  {
    "text": "into a unified api and then we layer on top of that ross",
    "start": "1090080",
    "end": "1095520"
  },
  {
    "text": "api to of course to give us the api in terms of web assembly module",
    "start": "1095520",
    "end": "1102640"
  },
  {
    "text": "and then and then we have we are working on different language bindings to expose",
    "start": "1102640",
    "end": "1108559"
  },
  {
    "text": "that into different language such as assembly script or python and other possible languages",
    "start": "1108559",
    "end": "1115520"
  },
  {
    "text": "in the future okay so this is",
    "start": "1115520",
    "end": "1120640"
  },
  {
    "start": "1118000",
    "end": "1118000"
  },
  {
    "text": "example of writing this filter in rust",
    "start": "1120640",
    "end": "1126080"
  },
  {
    "text": "and this is a simple example of filter that filters out the records based on whether",
    "start": "1127679",
    "end": "1135039"
  },
  {
    "text": "contains you know letter a okay now the",
    "start": "1135039",
    "end": "1141120"
  },
  {
    "text": "we the interesting part is that we're using the",
    "start": "1141120",
    "end": "1147360"
  },
  {
    "text": "the roses language constructs called procedure macro to",
    "start": "1147360",
    "end": "1152640"
  },
  {
    "text": "basically annotate them to indicate that what kind of binding we want to perform so in this case of",
    "start": "1152640",
    "end": "1159360"
  },
  {
    "text": "course the filter okay the next this is the rust api",
    "start": "1159360",
    "end": "1166720"
  },
  {
    "text": "signature and it provides the filter and then it has",
    "start": "1166720",
    "end": "1171919"
  },
  {
    "text": "only one single argument the record so directory is the basically the primitive",
    "start": "1171919",
    "end": "1177679"
  },
  {
    "text": "the basic constructs are the storage the bindings",
    "start": "1177679",
    "end": "1182799"
  },
  {
    "text": "it can either return boolean true or false if it's satisfied criteria",
    "start": "1182799",
    "end": "1189760"
  },
  {
    "text": "or it can the exception the the result type is the",
    "start": "1189760",
    "end": "1194880"
  },
  {
    "text": "rust equivalent to indicate that it does exception occurs",
    "start": "1194880",
    "end": "1199919"
  },
  {
    "text": "okay and then um so this allows to provide a",
    "start": "1199919",
    "end": "1207679"
  },
  {
    "text": "same api for the same storage bindings",
    "start": "1207679",
    "end": "1213200"
  },
  {
    "text": "okay next this is where we convert the binary records into string",
    "start": "1213200",
    "end": "1220919"
  },
  {
    "text": "because fluvia stream can handle any arbitrary data you need to convert into",
    "start": "1221039",
    "end": "1227200"
  },
  {
    "text": "a basic data type for processing okay and the lastly of course is a",
    "start": "1227200",
    "end": "1234960"
  },
  {
    "text": "simple expression to indicate that if the string contains a or not",
    "start": "1234960",
    "end": "1240960"
  },
  {
    "text": "now note that the user doesn't have to worry about how to encode and decode",
    "start": "1241760",
    "end": "1247280"
  },
  {
    "text": "is basically is done through this wrapper that procedure macro that generates all",
    "start": "1247280",
    "end": "1255039"
  },
  {
    "text": "the glue routines it's done by a smart modules",
    "start": "1255039",
    "end": "1260840"
  },
  {
    "text": "framework okay now let's move further go down into how actually binding their stores in with",
    "start": "1260840",
    "end": "1268000"
  },
  {
    "text": "the smart module by default the fluid streams are",
    "start": "1268000",
    "end": "1273360"
  },
  {
    "text": "stored in a pen only file system they are immutable",
    "start": "1273360",
    "end": "1278720"
  },
  {
    "text": "the streams could be stored also in different file system depends on infrastructure",
    "start": "1278880",
    "end": "1286240"
  },
  {
    "text": "the regardless of implementation the streams are considered as immutable and ordered",
    "start": "1287520",
    "end": "1296960"
  },
  {
    "text": "for fast system implementation these records are grouping of batches",
    "start": "1296960",
    "end": "1303039"
  },
  {
    "text": "so when we actually send these records to fluvial smart modules",
    "start": "1303039",
    "end": "1309600"
  },
  {
    "text": "the entire the records group records is read in a",
    "start": "1309600",
    "end": "1314960"
  },
  {
    "text": "single batch and this in this case the wreck the group",
    "start": "1314960",
    "end": "1322480"
  },
  {
    "text": "the batch group starts at five offset one thousand and two five pointer twelve hundred",
    "start": "1322559",
    "end": "1330559"
  },
  {
    "text": "so in one single shot you'll read those file contents and",
    "start": "1330559",
    "end": "1335919"
  },
  {
    "text": "and and send over to those smart modules",
    "start": "1335919",
    "end": "1342640"
  },
  {
    "text": "okay so first what it does is it copies this the blossom memory into vason",
    "start": "1342799",
    "end": "1350400"
  },
  {
    "text": "memory block and then increments the last the read position",
    "start": "1350400",
    "end": "1357120"
  },
  {
    "start": "1357000",
    "end": "1357000"
  },
  {
    "text": "okay next it now the copying of binary the blob into",
    "start": "1357200",
    "end": "1364640"
  },
  {
    "text": "west is actually turned out to be quite interesting challenges",
    "start": "1364640",
    "end": "1369760"
  },
  {
    "text": "at the time when we were building this initial implementation the wasm the reference type",
    "start": "1369919",
    "end": "1377440"
  },
  {
    "text": "and other spec was was very working in",
    "start": "1377440",
    "end": "1382559"
  },
  {
    "text": "very stage and there was much of a way to",
    "start": "1382559",
    "end": "1387679"
  },
  {
    "text": "looking at the implementation and the documentation was very skimpy",
    "start": "1387679",
    "end": "1393280"
  },
  {
    "text": "so the approach was by look i was suggested by",
    "start": "1393280",
    "end": "1399440"
  },
  {
    "text": "someone else that was encountering the same problem so the way you do it is you actually",
    "start": "1399440",
    "end": "1406559"
  },
  {
    "text": "implement airlock and dialogue in the washroom",
    "start": "1406559",
    "end": "1412320"
  },
  {
    "text": "and you invoke this uh unlock function to create a",
    "start": "1412320",
    "end": "1417440"
  },
  {
    "text": "space in a wasm memory space and then you copy those blocks into the",
    "start": "1417440",
    "end": "1422799"
  },
  {
    "text": "west memory space of course when you are done dallas blood must be deal located",
    "start": "1422799",
    "end": "1430799"
  },
  {
    "text": "okay and then after we copied these memory blocks into",
    "start": "1430799",
    "end": "1438240"
  },
  {
    "text": "lasso memory space that we deserialize into rust structure",
    "start": "1438240",
    "end": "1443279"
  },
  {
    "text": "so the rust program can perform filtering functions",
    "start": "1443279",
    "end": "1450080"
  },
  {
    "text": "okay now actually this is not normal filter function",
    "start": "1450159",
    "end": "1457520"
  },
  {
    "text": "this actually the filter function is it's actually part of a map filter",
    "start": "1457520",
    "end": "1463279"
  },
  {
    "text": "function because what happened is is that the outer the map filter",
    "start": "1463279",
    "end": "1470159"
  },
  {
    "text": "take those filters filter results and a copies",
    "start": "1470159",
    "end": "1475760"
  },
  {
    "text": "the successful records that satisfy criteria okay",
    "start": "1475760",
    "end": "1481360"
  },
  {
    "text": "and this actually uh makes the ease uh makes it easier to implement it",
    "start": "1481360",
    "end": "1488000"
  },
  {
    "text": "uh other way to do exact another way to do is to pass this result uh true and",
    "start": "1488000",
    "end": "1494000"
  },
  {
    "text": "false back into host and do another processing but this",
    "start": "1494000",
    "end": "1499039"
  },
  {
    "text": "turned out to be much easier and and that's also creates a unified pipeline",
    "start": "1499039",
    "end": "1507279"
  },
  {
    "text": "okay next",
    "start": "1507360",
    "end": "1511840"
  },
  {
    "text": "okay and then we copy after we copy this uh",
    "start": "1512799",
    "end": "1518880"
  },
  {
    "text": "filtering this records we send back to the host spu",
    "start": "1518880",
    "end": "1524799"
  },
  {
    "text": "and then we send back to the downstream consumers",
    "start": "1524799",
    "end": "1530639"
  },
  {
    "text": "okay does the next binding is it's a map",
    "start": "1530799",
    "end": "1536480"
  },
  {
    "start": "1531000",
    "end": "1531000"
  },
  {
    "text": "and it's very similar to record except it can transform from one shape",
    "start": "1536480",
    "end": "1542400"
  },
  {
    "text": "to a different shape and and because",
    "start": "1542400",
    "end": "1548880"
  },
  {
    "text": "we share the same logic as the filter map it's essentially a same process",
    "start": "1548880",
    "end": "1556679"
  },
  {
    "text": "okay now these previous bindings are very similar the next binding aggregate is",
    "start": "1557840",
    "end": "1564640"
  },
  {
    "start": "1558000",
    "end": "1558000"
  },
  {
    "text": "different with the aggregate we maintain the interim state",
    "start": "1564640",
    "end": "1571360"
  },
  {
    "text": "to pass back the state back to the smart module to do further processing",
    "start": "1571360",
    "end": "1578000"
  },
  {
    "text": "so with aggregation you can implement things like sum average mean and max",
    "start": "1578000",
    "end": "1586559"
  },
  {
    "start": "1587000",
    "end": "1587000"
  },
  {
    "text": "okay and this is a list of our discriminant bindings that we implemented",
    "start": "1587360",
    "end": "1593600"
  },
  {
    "text": "we have things like array map which is the records into a multiple different",
    "start": "1593600",
    "end": "1599600"
  },
  {
    "text": "records now we have implemented some basic use",
    "start": "1599600",
    "end": "1606400"
  },
  {
    "start": "1603000",
    "end": "1603000"
  },
  {
    "text": "cases but there are so many more interesting use cases there that we are",
    "start": "1606400",
    "end": "1611760"
  },
  {
    "text": "working on in the future the very good example is a join which is",
    "start": "1611760",
    "end": "1617840"
  },
  {
    "text": "able to combine multiple streams based on some criteria",
    "start": "1617840",
    "end": "1623520"
  },
  {
    "text": "other is windowing which allow to process records in basically time-based",
    "start": "1623520",
    "end": "1630080"
  },
  {
    "text": "functions other interesting use case is a key value which allow to",
    "start": "1630080",
    "end": "1637039"
  },
  {
    "text": "process the records in terms of key and values this is very critical for a lot of",
    "start": "1637039",
    "end": "1643279"
  },
  {
    "text": "microservices and business logic and then there's a virtualized bill",
    "start": "1643279",
    "end": "1649440"
  },
  {
    "text": "which allow you to cache values for subsequent access",
    "start": "1649440",
    "end": "1654640"
  },
  {
    "text": "and then the transaction support which use combined with external process",
    "start": "1654640",
    "end": "1662000"
  },
  {
    "text": "to build some in long-term workflow",
    "start": "1662000",
    "end": "1667440"
  },
  {
    "text": "um if you're interested in supporting other store bindings or",
    "start": "1667440",
    "end": "1674559"
  },
  {
    "text": "or different ideas please reach out please participate in you know",
    "start": "1674559",
    "end": "1680080"
  },
  {
    "text": "fluvia projects okay now as you can see the current stove",
    "start": "1680080",
    "end": "1686640"
  },
  {
    "start": "1682000",
    "end": "1682000"
  },
  {
    "text": "binding is done in very simplistic manner so we are looking into",
    "start": "1686640",
    "end": "1692399"
  },
  {
    "text": "using the the new capabilities of web assembly",
    "start": "1692399",
    "end": "1698799"
  },
  {
    "text": "such as a reference type razzy and of course the component model to",
    "start": "1698799",
    "end": "1704320"
  },
  {
    "text": "link to process these records and stream in much more efficient manner",
    "start": "1704320",
    "end": "1711279"
  },
  {
    "text": "to allow this allows to build a sort of a zero cost",
    "start": "1711279",
    "end": "1716960"
  },
  {
    "text": "stream processing and to efficiently process this data over the network more efficiently",
    "start": "1716960",
    "end": "1724760"
  },
  {
    "text": "okay so fluid is still a young project but we think with the power vessel",
    "start": "1725120",
    "end": "1732000"
  },
  {
    "text": "we can make a string process easier and can be used everywhere",
    "start": "1732000",
    "end": "1737360"
  },
  {
    "text": "here's a list of project docs and where you can get it started and contributions always welcome",
    "start": "1737360",
    "end": "1745919"
  },
  {
    "text": "okay that's it [Applause]",
    "start": "1746320",
    "end": "1756940"
  },
  {
    "text": "oh yeah",
    "start": "1757919",
    "end": "1761080"
  },
  {
    "text": "yes we are we have a very um uh the question was i guessed uh is there work",
    "start": "1778720",
    "end": "1784480"
  },
  {
    "text": "like a kapha yes uh the reliable yes so currently we",
    "start": "1784480",
    "end": "1790720"
  },
  {
    "text": "implement uh at least once and we are working toward to implementing exactly once in the future",
    "start": "1790720",
    "end": "1799200"
  },
  {
    "text": "well we think we i think uh",
    "start": "1803919",
    "end": "1809120"
  },
  {
    "text": "uh we think uh our streaming process allows to build a",
    "start": "1809120",
    "end": "1814720"
  },
  {
    "text": "a lot more use case than the kafa does and of course uh you know being in rus",
    "start": "1814720",
    "end": "1820240"
  },
  {
    "text": "and we allows through the web assembly we can actually spread the stream process to edge devices where the kafka",
    "start": "1820240",
    "end": "1826559"
  },
  {
    "text": "doesn't because",
    "start": "1826559",
    "end": "1832559"
  },
  {
    "text": "being rushed for example our the memory reduction is pretty much",
    "start": "1832559",
    "end": "1837840"
  },
  {
    "text": "over one tenth of of kapha because with a rush we don't have to",
    "start": "1837840",
    "end": "1846480"
  },
  {
    "text": "have a garbage collection so you don't need to do a lot of maintain this extra overhead",
    "start": "1846480",
    "end": "1855278"
  },
  {
    "text": "okay all right thank you [Applause]",
    "start": "1859200",
    "end": "1865069"
  }
]