[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "hello everyone today we will be discussing about deploy a full cncf based observability stack in under 5",
    "start": "2159",
    "end": "7520"
  },
  {
    "text": "minutes with tops so let's get started what is an observability stack so",
    "start": "7520",
    "end": "13679"
  },
  {
    "start": "10000",
    "end": "304000"
  },
  {
    "text": "observability in general is an ability to infer internal state of the system uh using the system's external output so",
    "start": "13679",
    "end": "20640"
  },
  {
    "text": "this outputs can be metrics logs and traces so these are the three main data types of observability",
    "start": "20640",
    "end": "28560"
  },
  {
    "text": "so about me so let me introduce myself so my name is vinit laparti i'm the",
    "start": "28560",
    "end": "34079"
  },
  {
    "text": "product manager at time scale working on observability application stream uh primarily on prom scale and tops i'm",
    "start": "34079",
    "end": "40960"
  },
  {
    "text": "also the maintainer of open telemetry operators so if you're already using open telemetry operator i'm always into",
    "start": "40960",
    "end": "48960"
  },
  {
    "text": "here audio feedback and if you're using open telemetry collector in kubernetes cluster you should definitely try out",
    "start": "48960",
    "end": "55199"
  },
  {
    "text": "open telemetry operator it just eases your deployment and managing of open",
    "start": "55199",
    "end": "61359"
  },
  {
    "text": "telemetry collector uh i also enjoy cycling and tasting whiskies but not at the same time so if",
    "start": "61359",
    "end": "68240"
  },
  {
    "text": "you are based out of hyderabad india i would definitely love to join for cycling and tasting whiskey so",
    "start": "68240",
    "end": "76080"
  },
  {
    "text": "yeah you can reach out to me in twitter or and slack so",
    "start": "76080",
    "end": "81680"
  },
  {
    "text": "let's see what are the data types in observability so first comes the metric so metric is all about trying to",
    "start": "81680",
    "end": "88400"
  },
  {
    "text": "understand the state of something uh using uh the metric name and the value",
    "start": "88400",
    "end": "94720"
  },
  {
    "text": "so here you can see that metric denotes go gc duration seconds this is the metric name and the value is the float",
    "start": "94720",
    "end": "100799"
  },
  {
    "text": "value 0.0034 so uh it can be anything like you want to",
    "start": "100799",
    "end": "107200"
  },
  {
    "text": "get the runtime state of number of core routines running in your application or",
    "start": "107200",
    "end": "112799"
  },
  {
    "text": "go gc duration second as for this metric how much time is your garbage collector taking uh to process the",
    "start": "112799",
    "end": "119600"
  },
  {
    "text": "garbage collection or you can see number of threads and memory being utilized so",
    "start": "119600",
    "end": "125119"
  },
  {
    "text": "metric is all about capturing a runtime state of something in your application",
    "start": "125119",
    "end": "132319"
  },
  {
    "text": "so what are traces so i love traces so i'll be a bit biased towards traces so",
    "start": "132319",
    "end": "137440"
  },
  {
    "text": "this is uh the image you see here is the eager ui so it's the visualization of a trace so if you need to define a trace",
    "start": "137440",
    "end": "144959"
  },
  {
    "text": "so trace is nothing but a request life cycle basically so how does your request",
    "start": "144959",
    "end": "151280"
  },
  {
    "text": "path flow in your set of micro services and function calls in a particular service so if you think uh of an",
    "start": "151280",
    "end": "157760"
  },
  {
    "text": "e-commerce site like amazon if you're ordering something so it just uh the request goes to the cart service payment",
    "start": "157760",
    "end": "164319"
  },
  {
    "text": "gateway and then you'll get an acknowledgement saying that the order is successfully placed so this involves the",
    "start": "164319",
    "end": "170480"
  },
  {
    "text": "request traveling into multiple microservices and in each microservice it needs to travel into",
    "start": "170480",
    "end": "176319"
  },
  {
    "text": "multiple functions so with trace you can understand what's the request lifecycle",
    "start": "176319",
    "end": "181440"
  },
  {
    "text": "is like and where is the where is the most amount of your time is being spent like the added latency",
    "start": "181440",
    "end": "187280"
  },
  {
    "text": "throughput in each and every part by just looking at a trace so here you can see that um the duration for this trace",
    "start": "187280",
    "end": "194720"
  },
  {
    "text": "to happen was 18.54 milliseconds and total services this trace has panned as three services",
    "start": "194720",
    "end": "201519"
  },
  {
    "text": "and the depth is eight which means there are total eight spans so here you can see uh this uh bars basically it's like",
    "start": "201519",
    "end": "208879"
  },
  {
    "text": "a parent span and you have a chill span so you can see there is a span which is consuming 12.94 milliseconds so if you",
    "start": "208879",
    "end": "215200"
  },
  {
    "text": "just hover or click on this span this also captures some metadata to",
    "start": "215200",
    "end": "220799"
  },
  {
    "text": "understand uh what is the metadata in this particular request lifecycle uh to analyze uh further into a trace so these",
    "start": "220799",
    "end": "228319"
  },
  {
    "text": "are trace these are traces in the high level so water logs so i think logs need",
    "start": "228319",
    "end": "233920"
  },
  {
    "text": "not need any special introduction because that's the first place where any kind of",
    "start": "233920",
    "end": "239519"
  },
  {
    "text": "instrumentation or observability starts from today so these are uh logs from the",
    "start": "239519",
    "end": "245840"
  },
  {
    "text": "open telemetry collector so basically logs help you to understand the current uh",
    "start": "245840",
    "end": "251200"
  },
  {
    "text": "action being performed on your application so you can log some error debug logs info logs to understand uh",
    "start": "251200",
    "end": "258720"
  },
  {
    "text": "what exactly is happening in your log so this this is the first",
    "start": "258720",
    "end": "263840"
  },
  {
    "text": "step to your observability and today will not be discussing more about logs our primary focus will be on",
    "start": "263840",
    "end": "269919"
  },
  {
    "text": "metrics and traces so let's get back to the title uh the full observability stack yes i mean so i",
    "start": "269919",
    "end": "277280"
  },
  {
    "text": "mean in the title if i deploy a full cncf-based observability stack so yes",
    "start": "277280",
    "end": "282400"
  },
  {
    "text": "it's the full observability stack in under five minutes yes am i serious yes i'm serious about it so",
    "start": "282400",
    "end": "288720"
  },
  {
    "text": "let's see what we have uh in this presentation so it supports complete metrics it support",
    "start": "288720",
    "end": "295440"
  },
  {
    "text": "complete traces and logs just needs an external storage system so you can complement tops",
    "start": "295440",
    "end": "300960"
  },
  {
    "text": "by adding your preferred logging solution to store the logs and introducing tops so the top stands",
    "start": "300960",
    "end": "308320"
  },
  {
    "start": "304000",
    "end": "336000"
  },
  {
    "text": "for the observability stack for kubernetes so the definition of top just stops is a cli tool and a helm chart that aims to",
    "start": "308320",
    "end": "315680"
  },
  {
    "text": "make it as easy as possible to install a full observability stack in your kubernetes cluster so",
    "start": "315680",
    "end": "322720"
  },
  {
    "text": "you can either use the cli tool or the helm chart to install this observability stack so",
    "start": "322720",
    "end": "328479"
  },
  {
    "text": "it's it's totally your preference and if you want to check out more about tabs you can check out and this link github",
    "start": "328479",
    "end": "334000"
  },
  {
    "text": "dot com slash time skill slash tops and let's discuss about uh what does",
    "start": "334000",
    "end": "339360"
  },
  {
    "start": "336000",
    "end": "839000"
  },
  {
    "text": "this stops uh include so we'll just go layer by layer so first let's discuss",
    "start": "339360",
    "end": "344800"
  },
  {
    "text": "the exposition layer so in observability uh we definitely need some kind of components which which ex which extract",
    "start": "344800",
    "end": "351680"
  },
  {
    "text": "some kind of metrics from the targeted uh resources so here we have node exporter",
    "start": "351680",
    "end": "358800"
  },
  {
    "text": "to basically scrape the node metrics from all the nodes running in your kubernetes cluster but basically there",
    "start": "358800",
    "end": "364319"
  },
  {
    "text": "are the cubelets there and you have cubestate metrics to scrape the kubernetes metrics from the cube api",
    "start": "364319",
    "end": "371039"
  },
  {
    "text": "server so this gives you uh the overall understanding on the state of your kubernetes cluster so by default tops",
    "start": "371039",
    "end": "377120"
  },
  {
    "text": "includes both node exporter and cube state metrics for you out of the box and visualization layer so tops includes",
    "start": "377120",
    "end": "383520"
  },
  {
    "text": "graphana so you can use grafana for visualizing anything like metrics logs traces anything and you can use multiple",
    "start": "383520",
    "end": "391199"
  },
  {
    "text": "data sources to query with your preferred language like sql promptcurl",
    "start": "391199",
    "end": "396880"
  },
  {
    "text": "or some filtering mechanism what eager offers so we also deploy eager so if",
    "start": "396880",
    "end": "402639"
  },
  {
    "text": "you're so eager is the cncf-based tracing solution so from",
    "start": "402639",
    "end": "408240"
  },
  {
    "text": "eager we just use the eager query to visualize the traces so if you have already using aeger",
    "start": "408240",
    "end": "413280"
  },
  {
    "text": "this is already covered for you so you can just use the for the visualization as well for traces",
    "start": "413280",
    "end": "419840"
  },
  {
    "text": "and collection so we have seen the exposition how does the specific",
    "start": "419840",
    "end": "424960"
  },
  {
    "text": "targeted metrics get extracted from uh from the nodes and the",
    "start": "424960",
    "end": "430800"
  },
  {
    "text": "cube api server and we have seen the visualization layer for grafana and using aeger and here we have the",
    "start": "430800",
    "end": "436800"
  },
  {
    "text": "collection layer how does uh the data gets collected so firstly we have prometheus so prometheus is a graduated",
    "start": "436800",
    "end": "442800"
  },
  {
    "text": "cncf project for uh monitoring and alerting system for your services so",
    "start": "442800",
    "end": "449360"
  },
  {
    "text": "i will will not go deep into this project but i hope you are already aware of it if you",
    "start": "449360",
    "end": "455360"
  },
  {
    "text": "are new to prometheus and open telemetry you should definitely check it out because the observability today without the",
    "start": "455360",
    "end": "461599"
  },
  {
    "text": "stools is close to impossible i should say so yeah so prometheus basically uh helps you to",
    "start": "461599",
    "end": "469280"
  },
  {
    "text": "scrape the metrics from the targets like node exporter cubestate metrics or",
    "start": "469280",
    "end": "474400"
  },
  {
    "text": "your custom business applications which you have instrumented using prometheus so uh",
    "start": "474400",
    "end": "479520"
  },
  {
    "text": "that basically scrapes the metrics from them or you can also for push the metrics to the prometheus and",
    "start": "479520",
    "end": "485599"
  },
  {
    "text": "prometheus also supports the remote right uh back-end so from prometheus we do remote right to",
    "start": "485599",
    "end": "492160"
  },
  {
    "text": "the prom scale which we'll be seeing in the other slides so it's basically uh prometheus is like uh supports scraping",
    "start": "492160",
    "end": "498720"
  },
  {
    "text": "the metrics from the targets also it also supports uh in-house storage engine so prometheus also supports storing it",
    "start": "498720",
    "end": "505520"
  },
  {
    "text": "uh within prometheus or if you would like to store it for longer durations aggregate from different prometheus",
    "start": "505520",
    "end": "511280"
  },
  {
    "text": "instances the metrics coming in so you can use the remote right systems like prom skill and the coming to the open",
    "start": "511280",
    "end": "517440"
  },
  {
    "text": "telemetry so open telemetry is the second active project in the cncf so after kubernetes so open telemetry um uh",
    "start": "517440",
    "end": "527200"
  },
  {
    "text": "is like it includes so many projects like the instrumentation layer the collector layer uh and everything and",
    "start": "527200",
    "end": "533760"
  },
  {
    "text": "even the open telemetry operator so here though when i say open telemeter it's the open telemetry collector which means",
    "start": "533760",
    "end": "539680"
  },
  {
    "text": "uh if you have instrumented your application with uh tracing client libraries you can just",
    "start": "539680",
    "end": "544800"
  },
  {
    "text": "forward the traces to the open telemetry uh you can configure the receivers like",
    "start": "544800",
    "end": "550240"
  },
  {
    "text": "eager zipkin or otlp so all kind of tracing instrumentations can can be",
    "start": "550240",
    "end": "557839"
  },
  {
    "text": "connected to the open telemetry collector so all the traces you can forward to the open telemetry and in",
    "start": "557839",
    "end": "562880"
  },
  {
    "text": "open telemetry you can also configure the exporter so where we will configure otlp exporter to forward the traces from",
    "start": "562880",
    "end": "569519"
  },
  {
    "text": "open telemetry collector to the prom scale so open telemetry collector doesn't support storing of",
    "start": "569519",
    "end": "577040"
  },
  {
    "text": "traces for future visualization and analysis so this definitely needs a back end to store the traces",
    "start": "577040",
    "end": "584399"
  },
  {
    "text": "and here comes the the prom scale which is like",
    "start": "584399",
    "end": "590880"
  },
  {
    "text": "the the powerful agent of the observability i should say the powerful component of the observability because uh it helps",
    "start": "590880",
    "end": "598000"
  },
  {
    "text": "you to process the data for long uh and also helps you for long term storage so in observability it's like for every",
    "start": "598000",
    "end": "604560"
  },
  {
    "text": "five to ten seconds the data just keeps coming in and gets ingested and you need to process that data and visualize it so",
    "start": "604560",
    "end": "610720"
  },
  {
    "text": "when i mean process uh you like for example you you want to down sample it or you want to correlate it so all this",
    "start": "610720",
    "end": "617040"
  },
  {
    "text": "data sets on the prom scale so this is the storage layer for all the observability data we are discussing in this",
    "start": "617040",
    "end": "623519"
  },
  {
    "text": "presentation so detailed overview this tag basically we have discussed the",
    "start": "623519",
    "end": "629519"
  },
  {
    "text": "exposition layer visualization layer collection layer and the storage layer so here it's we're just listing",
    "start": "629519",
    "end": "635279"
  },
  {
    "text": "everything in one slide for the easier understanding so the complete uh",
    "start": "635279",
    "end": "642000"
  },
  {
    "text": "tops basically the helm chart is a combination of multiple health charts and here you can see we are using cube",
    "start": "642160",
    "end": "647600"
  },
  {
    "text": "prometheus the kubernetes monitoring stack basically offered by the prometheus community it includes",
    "start": "647600",
    "end": "653440"
  },
  {
    "text": "prometheus alert prometheus to collect the metrics alert manager to fire the alerts so in cube prometheus the alert",
    "start": "653440",
    "end": "659839"
  },
  {
    "text": "manager uh comes with default alerting rules for your",
    "start": "659839",
    "end": "664959"
  },
  {
    "text": "kubernetes cluster and node exporter which means if there are any incidents",
    "start": "664959",
    "end": "670160"
  },
  {
    "text": "or anomalies or something which is which causes issues in your cluster will",
    "start": "670160",
    "end": "675360"
  },
  {
    "text": "be automatically alerted uh to the alert manager using the out of the box alerting rules offered by cube",
    "start": "675360",
    "end": "681839"
  },
  {
    "text": "prometheus and there is grafana to visualize what's going on for visualization and also for alerting",
    "start": "681839",
    "end": "688640"
  },
  {
    "text": "you can also alert through graphene and we have node exporter to export the metrics from your nodes and cube state",
    "start": "688640",
    "end": "694560"
  },
  {
    "text": "metrics to get metrics from your kubernetes api server and prometheus operator is to manage the lifecycle of",
    "start": "694560",
    "end": "700399"
  },
  {
    "text": "prometheus and the alert manager so it uses the custom resource definitions to deploy",
    "start": "700399",
    "end": "706720"
  },
  {
    "text": "manage prometheus and alert manager so if you are using prometheus in kubernetes cluster you should definitely",
    "start": "706720",
    "end": "712800"
  },
  {
    "text": "check out cube prometheus because it comes with prometheus operator it eases the management of prometheus for you in",
    "start": "712800",
    "end": "719120"
  },
  {
    "text": "the kubernetes world and the prom scale to store metrics and",
    "start": "719120",
    "end": "725360"
  },
  {
    "text": "traces for long term a long term storage and allows you to analyze analyze the data which is stored using both prom ql",
    "start": "725360",
    "end": "732639"
  },
  {
    "text": "and sql and prom length is a tool to build and analyze prompt your queries with ease so",
    "start": "732639",
    "end": "738399"
  },
  {
    "text": "basically many users may not be aware of prom cure or will have hard time building some",
    "start": "738399",
    "end": "744160"
  },
  {
    "text": "complex queries with prom cool so prominence is a tool which helps you to build this queries with much more ease",
    "start": "744160",
    "end": "750240"
  },
  {
    "text": "so by default tops includes problems to make your life easier while working with prom ql",
    "start": "750240",
    "end": "756880"
  },
  {
    "text": "queries and we have open telemetry operator to manage the life cycle of open telemetry collector so uh same as",
    "start": "756880",
    "end": "763920"
  },
  {
    "text": "the prometheus operator the open telemetry operator also manages the open telemetry collector using the custom",
    "start": "763920",
    "end": "770480"
  },
  {
    "text": "resources so so it just makes the installation managing upgrading everything easier",
    "start": "770480",
    "end": "777200"
  },
  {
    "text": "with the operator and in open telemetry operator recently we have also added support for auto instrumentation which",
    "start": "777200",
    "end": "783680"
  },
  {
    "text": "means you just create the instrumentation cr and you just need to add annotations for your deployment",
    "start": "783680",
    "end": "789040"
  },
  {
    "text": "saying that inject java true and then automatically the open telemetry uh",
    "start": "789040",
    "end": "794480"
  },
  {
    "text": "operator injects the side car for your java node.js and python applications so without any code changes you can achieve",
    "start": "794480",
    "end": "801360"
  },
  {
    "text": "the auto instrumentation to your applications using the open telemetry operator auto instrumentation feature so",
    "start": "801360",
    "end": "808160"
  },
  {
    "text": "you should definitely check it out that's really really interesting and you can just get the observability uh traces",
    "start": "808160",
    "end": "815519"
  },
  {
    "text": "uh like the observability uh for your business applications without",
    "start": "815519",
    "end": "820800"
  },
  {
    "text": "zero code changes so the traces just come uh are just exposed and the sidecar",
    "start": "820800",
    "end": "826160"
  },
  {
    "text": "just forwards them to the open telemetry collector yeah and we have eager query to visualize the",
    "start": "826160",
    "end": "832480"
  },
  {
    "text": "traces so uh you can either use grafana or eager query it's just a preference",
    "start": "832480",
    "end": "837519"
  },
  {
    "text": "and a choice to visualize traces and what is prompt scale so let's see uh",
    "start": "837519",
    "end": "843760"
  },
  {
    "start": "839000",
    "end": "958000"
  },
  {
    "text": "the complete overview of prom scale so the prom scale is an observability backend powered by sql so it supports",
    "start": "843760",
    "end": "850240"
  },
  {
    "text": "unparalleled insights when i say unparalleled insight it uses one database to store all the",
    "start": "850240",
    "end": "856320"
  },
  {
    "text": "observability data here it's the metrics and traces you can also store your business data in the same system which",
    "start": "856320",
    "end": "862880"
  },
  {
    "text": "means you have all the data sitting in one database and you can correlate",
    "start": "862880",
    "end": "867920"
  },
  {
    "text": "all this different data types at a specific window",
    "start": "867920",
    "end": "873519"
  },
  {
    "text": "in time so it just gives you the ability to do all kind of analytics and processing",
    "start": "873519",
    "end": "880399"
  },
  {
    "text": "in a specific time window so sql just offers anything so the sky is the limit for you if you",
    "start": "880399",
    "end": "886800"
  },
  {
    "text": "are using sql as the query language and it has a proven foundation so",
    "start": "886800",
    "end": "892240"
  },
  {
    "text": "it's built on petabyte scale foundation of time scale db and postgres sql which means it also supports advanced",
    "start": "892240",
    "end": "899440"
  },
  {
    "text": "database features like high availability replication and compression and many more so you're fully covered for the",
    "start": "899440",
    "end": "906800"
  },
  {
    "text": "reliability of the database layer and it's easy to get started and use so trust me this is the major",
    "start": "906800",
    "end": "913760"
  },
  {
    "text": "uh differentiator for the prom skill because you need not worry about how to run",
    "start": "913760",
    "end": "919360"
  },
  {
    "text": "manage this observability stack or the long term storage system whereas with",
    "start": "919360",
    "end": "924720"
  },
  {
    "text": "other solutions you should be running tens of micro services installation upgrades scaling them is like very uh",
    "start": "924720",
    "end": "932160"
  },
  {
    "text": "it just causes so much of problem for you you should have a dedicated sra team whereas with prom skill all you have to",
    "start": "932160",
    "end": "938480"
  },
  {
    "text": "do is just run a prom scale connector stateless one and the database itself so",
    "start": "938480",
    "end": "944160"
  },
  {
    "text": "and it's also easy to integrate with grafana prometheus open telemetry and all the tools you know and love because",
    "start": "944160",
    "end": "950800"
  },
  {
    "text": "today we support all the major observability open source solutions with prong scale",
    "start": "950800",
    "end": "958880"
  },
  {
    "start": "958000",
    "end": "1065000"
  },
  {
    "text": "and here comes the prom scale architecture so on the left you can see there is open uh prometheus which can do",
    "start": "958880",
    "end": "964720"
  },
  {
    "text": "remote write and remote read from the prom scale connector and we have open telemetry uh which uses the open",
    "start": "964720",
    "end": "970720"
  },
  {
    "text": "telemetry collector which uses the otlp grpc endpoint to ingest the traces to the prom scale connector if you're not",
    "start": "970720",
    "end": "977120"
  },
  {
    "text": "using open telemetry collector you can directly also instrument your application using open telemetry client",
    "start": "977120",
    "end": "983040"
  },
  {
    "text": "libraries and directly forward the traces from your application to the prom skill connector that's totally possible",
    "start": "983040",
    "end": "988800"
  },
  {
    "text": "and coming to the prom scale itself so prom scale is a combination of two components one is the prom scale",
    "start": "988800",
    "end": "993839"
  },
  {
    "text": "connector which is stateless and the other one is the time scale db database so all you need is just two components",
    "start": "993839",
    "end": "999920"
  },
  {
    "text": "running and you're fully covered for the storage of all your observability data you need not need multiple systems or",
    "start": "999920",
    "end": "1007440"
  },
  {
    "text": "two different stacks to manage traces metrics and everything so in prom scale",
    "start": "1007440",
    "end": "1012800"
  },
  {
    "text": "all the data sets in one system and its prom scale and coming to the visualization layer we have eager ui to",
    "start": "1012800",
    "end": "1019759"
  },
  {
    "text": "visualize the traces from the prom scale connector and we have grafana to query",
    "start": "1019759",
    "end": "1026240"
  },
  {
    "text": "metrics using prom kill from the prom scale connector and on the side note the prom scale connector has 100 percent",
    "start": "1026240",
    "end": "1033120"
  },
  {
    "text": "compatibility support for prom ql queries and you can use grafana to query uh",
    "start": "1033120",
    "end": "1039600"
  },
  {
    "text": "using sql from directly from the timescale db so you can use sql for all",
    "start": "1039600",
    "end": "1044798"
  },
  {
    "text": "the data which is stored in the timescale db and any tool that speaks sql should just work out of the box with",
    "start": "1044799",
    "end": "1050480"
  },
  {
    "text": "the timescale db so this is the visualization layer for prom skin",
    "start": "1050480",
    "end": "1056000"
  },
  {
    "text": "and if you want to do the check out more on the prom scale feel free to",
    "start": "1056000",
    "end": "1061280"
  },
  {
    "text": "open this link tsdb dot co slash prom skin",
    "start": "1061280",
    "end": "1066400"
  },
  {
    "start": "1065000",
    "end": "1280000"
  },
  {
    "text": "and let's discuss about what are the features offered by prom scale in the high level so these are",
    "start": "1066400",
    "end": "1072320"
  },
  {
    "text": "just the top level features we have many more getting cooked and developed in the prom scale today and this just this list",
    "start": "1072320",
    "end": "1079520"
  },
  {
    "text": "just grows in the coming days so we have full sql support and analytics support on your observability data which means",
    "start": "1079520",
    "end": "1086640"
  },
  {
    "text": "all the data which you are sending to prom skill can be queried with a full sql support and you can also do",
    "start": "1086640",
    "end": "1092960"
  },
  {
    "text": "analytics on them using the analytical functions offered by time scale db and uh we",
    "start": "1092960",
    "end": "1098720"
  },
  {
    "text": "the storage support for metrics and traces so as i told uh for other solutions in the market or the",
    "start": "1098720",
    "end": "1105919"
  },
  {
    "text": "other open source solutions it's about you need two different systems to store and process metrics and for traces",
    "start": "1105919",
    "end": "1113440"
  },
  {
    "text": "so whereas with prom skill all you need is one system the prompt scale itself for storing metrics and traces so it's",
    "start": "1113440",
    "end": "1120480"
  },
  {
    "text": "easy to run and manage for you and we also uh offer uh high availability for",
    "start": "1120480",
    "end": "1125679"
  },
  {
    "text": "prom scale so with prometheus you can just use the external labels of prometheus to leverage high availability",
    "start": "1125679",
    "end": "1132080"
  },
  {
    "text": "from prom scale and even multi-tenancy is offered in prom scale so you can use the tenant ids if you have multiple",
    "start": "1132080",
    "end": "1138960"
  },
  {
    "text": "prometheus instances which are uh sending metrics to the prom scale you can just",
    "start": "1138960",
    "end": "1144799"
  },
  {
    "text": "attach them with the tenant id and the data is just separated out between uh tenants",
    "start": "1144799",
    "end": "1150480"
  },
  {
    "text": "we also support exemplars in prom scale so if you have instrumented examples with prometheus",
    "start": "1150480",
    "end": "1157280"
  },
  {
    "text": "client client libraries in your application so just promise you scrapes the exemplars",
    "start": "1157280",
    "end": "1162480"
  },
  {
    "text": "and does a remote right to the prom scale and we just store it for the future analysis",
    "start": "1162480",
    "end": "1167760"
  },
  {
    "text": "and the continuous aggregates for prom scale for metrics which means if you are already using time scale db you should",
    "start": "1167760",
    "end": "1174480"
  },
  {
    "text": "already be knowing continuous aggregate so continuous aggregates are the down sampling of of time scale db so it's",
    "start": "1174480",
    "end": "1181280"
  },
  {
    "text": "much more than down sampling much more accurate and all so it's we do support",
    "start": "1181280",
    "end": "1186559"
  },
  {
    "text": "continuous aggregates for the metric stored and rom scale so this is another interesting feature parametric retention",
    "start": "1186559",
    "end": "1193200"
  },
  {
    "text": "so many users love it basically if you have hundreds of metrics being stored in prom scale so",
    "start": "1193200",
    "end": "1200400"
  },
  {
    "text": "you're only interested in few metrics to be stored for one year and you want the other metrics to be stored for 90 days",
    "start": "1200400",
    "end": "1207120"
  },
  {
    "text": "or 120 days and 180 days based on your preference so you can just apply parametric retention on on per metric",
    "start": "1207120",
    "end": "1214400"
  },
  {
    "text": "basis so uh the metrics which are interested in to store for long term gets stored for a long period of time",
    "start": "1214400",
    "end": "1220720"
  },
  {
    "text": "and the other metrics based on the retention policies gets dropped based on your preference so",
    "start": "1220720",
    "end": "1226640"
  },
  {
    "text": "that's totally possible with prom scale and you can also ingest your own time series data alongside prometheus data",
    "start": "1226640",
    "end": "1233679"
  },
  {
    "text": "so if you have time series data from your legacy monitoring solutions or from other",
    "start": "1233679",
    "end": "1239760"
  },
  {
    "text": "sources all you have to do is change this time series data into a json",
    "start": "1239760",
    "end": "1245120"
  },
  {
    "text": "schema which is offered by prom scale it's in prom scale docs so all you have",
    "start": "1245120",
    "end": "1250320"
  },
  {
    "text": "to do is uh convert the data into the prom skill uh json uh",
    "start": "1250320",
    "end": "1255760"
  },
  {
    "text": "streaming uh request format and all you have to do is just do a post request to prom skill and all this",
    "start": "1255760",
    "end": "1261520"
  },
  {
    "text": "time series data of yours will be stored alongside prometheus data which means it gives you a power of querying uh this",
    "start": "1261520",
    "end": "1268559"
  },
  {
    "text": "time series data using both prom ql and sql so that's totally possible so if you have any legacy systems and metrics",
    "start": "1268559",
    "end": "1276400"
  },
  {
    "text": "should just try out this grpc streaming endpoint of promskin and this is the internals of top so we",
    "start": "1276400",
    "end": "1283120"
  },
  {
    "start": "1280000",
    "end": "1308000"
  },
  {
    "text": "have seen what sprom scale is so now let's get back to the top side of the house so we have top cli which basically",
    "start": "1283120",
    "end": "1289440"
  },
  {
    "text": "installs the top's health chart into the cover notice cluster and top cell chart is the",
    "start": "1289440",
    "end": "1294640"
  },
  {
    "text": "combination of all the cell charts the cube prometheus from scale time scale db and open telemetry operator health chart",
    "start": "1294640",
    "end": "1301760"
  },
  {
    "text": "so tops is basically a super help chart which combines all this and helm charts under the hood",
    "start": "1301760",
    "end": "1308639"
  },
  {
    "start": "1308000",
    "end": "1400000"
  },
  {
    "text": "and this is the top architecture it looks complex but trust me are just",
    "start": "1309200",
    "end": "1314400"
  },
  {
    "text": "one command away from deploying the stack and configuring all this components so the tops does all the",
    "start": "1314400",
    "end": "1320720"
  },
  {
    "text": "heavy lifting for you it's pre pre-configured and pre-baked for you all you have to do is just deploy it and",
    "start": "1320720",
    "end": "1326880"
  },
  {
    "text": "start using the stack and here comes the cube prometheus tag you see the box here it includes cube state matrix node",
    "start": "1326880",
    "end": "1332880"
  },
  {
    "text": "exporter alert manager prometheus and the prometheus operator to manage the q prometheus tag the graphana",
    "start": "1332880",
    "end": "1339520"
  },
  {
    "text": "and here comes the prom scale itself the prom scale connector and the time scale db and we have prominence to help you",
    "start": "1339520",
    "end": "1346000"
  },
  {
    "text": "build prom queries and here comes the tracing stack we have hotel operator uh",
    "start": "1346000",
    "end": "1351280"
  },
  {
    "text": "the hotel operator has a dependency on cert manager so we do deploy search manager for open telemetry operator and",
    "start": "1351280",
    "end": "1358000"
  },
  {
    "text": "here is the open telemetry collector and eager query to visualize the traces in eager so if your",
    "start": "1358000",
    "end": "1364559"
  },
  {
    "text": "business applications are instrumented for with traces all you have to do is configure the open telemetry collector",
    "start": "1364559",
    "end": "1371200"
  },
  {
    "text": "as the end point to forward the traces and your services will forward the traces to the hotel collector and the",
    "start": "1371200",
    "end": "1377120"
  },
  {
    "text": "hotel collector will forward them to the prom scale and here comes the prometheus so the prometheus also scrapes",
    "start": "1377120",
    "end": "1385679"
  },
  {
    "text": "the slash metrics endpoints from all your services which means it just scrapes all the metrics from your",
    "start": "1385679",
    "end": "1392080"
  },
  {
    "text": "applications and the metrics from prometheus gets forwarded to the prom scale so this is how the stack works and",
    "start": "1392080",
    "end": "1397360"
  },
  {
    "text": "it's all pre-configured for you and it's the demo time",
    "start": "1397360",
    "end": "1403440"
  },
  {
    "start": "1400000",
    "end": "1715000"
  },
  {
    "text": "let's pray for the demo gods for the demo to work successfully so here is the kubernetes cluster so i'm just doing",
    "start": "1403440",
    "end": "1410960"
  },
  {
    "text": "cubic tl get parts yeah",
    "start": "1410960",
    "end": "1416480"
  },
  {
    "text": "i just have the cube system board so the cluster is just empty",
    "start": "1416480",
    "end": "1421520"
  },
  {
    "text": "and uh let's see the top cla what top cla has to offer",
    "start": "1421520",
    "end": "1428159"
  },
  {
    "text": "for us and tops basically has the sub commands as grafana to do graphene operations like graphana get password",
    "start": "1428159",
    "end": "1435679"
  },
  {
    "text": "change password port forwarding and help basically to do helm operations like",
    "start": "1435679",
    "end": "1441039"
  },
  {
    "text": "show values for uh your tops helm chart as the as the core component of tops",
    "start": "1441039",
    "end": "1448799"
  },
  {
    "text": "architecture is held so we do have some helm operations for you to have ease ease with dealing with top cli",
    "start": "1448799",
    "end": "1456559"
  },
  {
    "text": "and we do support ins installation of observability stack using the install command and we have eager to perform",
    "start": "1456559",
    "end": "1463360"
  },
  {
    "text": "eager operations like port forward and we have metrics to do metric operations like applying per metric retention",
    "start": "1463360",
    "end": "1469760"
  },
  {
    "text": "directly from the cli and uh configuring the cheng interval for the time scale db for metrics and",
    "start": "1469760",
    "end": "1476960"
  },
  {
    "text": "the port forwarding for time scale db prompt scale prominence graphene prometheus agar to localhost so all the",
    "start": "1476960",
    "end": "1483600"
  },
  {
    "text": "components which are deployed by tops can be port forwarded to your local host using the support forward sub command",
    "start": "1483600",
    "end": "1490000"
  },
  {
    "text": "and we have prometheus for prometheus operation rom lens rom scale and time",
    "start": "1490000",
    "end": "1495200"
  },
  {
    "text": "scale db for time scale db operation with time scale db sub command you can do get password change password of the",
    "start": "1495200",
    "end": "1501440"
  },
  {
    "text": "database and you can also do connect which means you can just uh get into the psql prompt right from",
    "start": "1501440",
    "end": "1507760"
  },
  {
    "text": "your shell so you don't need to ssh into the part of the database all you have to do is just do tops",
    "start": "1507760",
    "end": "1513760"
  },
  {
    "text": "timescale db connect and it just connects to the database for you so how cool is it so you don't need to uh find",
    "start": "1513760",
    "end": "1519760"
  },
  {
    "text": "the timescale db uh pod and try to understand what is the secret it's mounted to and then you need to",
    "start": "1519760",
    "end": "1525919"
  },
  {
    "text": "capture the secret which is a password string in the secret which is base64 encoded you need to decode it and",
    "start": "1525919",
    "end": "1532880"
  },
  {
    "text": "then you need to do psq you need to take you need to do exec into the port and then apply the password so it's a bit",
    "start": "1532880",
    "end": "1539440"
  },
  {
    "text": "cumbersome so all you have to do is uh just do tops time scale db connect and it just",
    "start": "1539440",
    "end": "1545520"
  },
  {
    "text": "gets connected and it's the same with uh other commands as well it just makes",
    "start": "1545520",
    "end": "1551600"
  },
  {
    "text": "your life easier while managing the observability stack",
    "start": "1551600",
    "end": "1557279"
  },
  {
    "text": "and let's install the stack for you",
    "start": "1557279",
    "end": "1561840"
  },
  {
    "text": "okay let me do quebec till get crds i just wanted to check is my cluster in",
    "start": "1564320",
    "end": "1570000"
  },
  {
    "text": "the state i expect it to be so yes that's the way i want it to be",
    "start": "1570000",
    "end": "1575919"
  },
  {
    "text": "and let's do tabs install so i'm just doing tops install iphone",
    "start": "1575919",
    "end": "1581919"
  },
  {
    "text": "iphone tracing because today the tracing support in prom scale is in beta so",
    "start": "1581919",
    "end": "1587279"
  },
  {
    "text": "in next in few weeks we'll be announcing tracing ga which means by default top should also",
    "start": "1587279",
    "end": "1593840"
  },
  {
    "text": "support tracing installation all the tracing components installation so at the moment you need to explicitly enable",
    "start": "1593840",
    "end": "1600000"
  },
  {
    "text": "it by entering iphone iphone tracing flag so i'm just doing enter",
    "start": "1600000",
    "end": "1605840"
  },
  {
    "text": "so the installation is running my fingers crossed for the demo to work",
    "start": "1605840",
    "end": "1610960"
  },
  {
    "text": "and it asks you for the confirmation of the cert manager is required to deploy open telemetry do you want to install",
    "start": "1610960",
    "end": "1617360"
  },
  {
    "text": "the cert manager so as i told the open telemetry operator has a dependency with cert manager and as the third manager",
    "start": "1617360",
    "end": "1623679"
  },
  {
    "text": "doesn't exist in the cluster it's asking for a confirmation if the search manager already exists in the cluster it just",
    "start": "1623679",
    "end": "1628880"
  },
  {
    "text": "skips the installation of the search manager so i'm just doing yes and i just processed the installation so in",
    "start": "1628880",
    "end": "1635440"
  },
  {
    "text": "the meantime we can just see from my previous installation uh installations what does the stack actually contain so",
    "start": "1635440",
    "end": "1642240"
  },
  {
    "text": "here you can see that i have another stack which was running so",
    "start": "1642240",
    "end": "1647919"
  },
  {
    "text": "i'll just show you what are the components which the stack deploys by the time it gets deployed so",
    "start": "1647919",
    "end": "1653360"
  },
  {
    "text": "now the time is 6 14 pm in my time so let's see does the stack gets deployed",
    "start": "1653360",
    "end": "1658559"
  },
  {
    "text": "in less than five minutes as the title says so here we have",
    "start": "1658559",
    "end": "1664000"
  },
  {
    "text": "time scale db the pod for the database and we have prom scale and we have the prom lens and we have",
    "start": "1664000",
    "end": "1670480"
  },
  {
    "text": "the prometheus node exporter so as this is the three node cluster the node exporter is deployed as the daemon set",
    "start": "1670480",
    "end": "1676559"
  },
  {
    "text": "so you have three parts as the node exporter and this is the open telemetry collector and the cube state metrics",
    "start": "1676559",
    "end": "1682960"
  },
  {
    "text": "prometheus operator eager and you have grafana db to",
    "start": "1682960",
    "end": "1689039"
  },
  {
    "text": "pre-configure the dashboards and users in the grafana and this is the grafana",
    "start": "1689039",
    "end": "1696640"
  },
  {
    "text": "pod itself and we have some demo services to show to generate some traces for this demo and we have alert manager",
    "start": "1696640",
    "end": "1703679"
  },
  {
    "text": "here and this is the cert manager which is deployed for the open telemetry operator",
    "start": "1703679",
    "end": "1710240"
  },
  {
    "text": "so the installation is going on till then what we'll do is we'll just",
    "start": "1710240",
    "end": "1716240"
  },
  {
    "text": "i just wanted to show you a few dashboards so just give me a second",
    "start": "1719200",
    "end": "1726080"
  },
  {
    "text": "so the installation is happening it's waiting for the parts to get started",
    "start": "1726080",
    "end": "1731600"
  },
  {
    "text": "and and",
    "start": "1733120",
    "end": "1739080"
  },
  {
    "start": "1740000",
    "end": "1785000"
  },
  {
    "text": "okay so i have another environment with all the dashboards which i wanted to show",
    "start": "1740799",
    "end": "1746080"
  },
  {
    "text": "you using sql command so these dashboards are not pre-configured in the tops at the moment",
    "start": "1746080",
    "end": "1751679"
  },
  {
    "text": "but in the future releases we will also pre-configure this dashboards for the uh",
    "start": "1751679",
    "end": "1758000"
  },
  {
    "text": "for the for the tops by default out of the box you'll have this dashboards configured",
    "start": "1758000",
    "end": "1764799"
  },
  {
    "text": "for you so before we jump into this dashboards i want to check the state of",
    "start": "1764799",
    "end": "1770880"
  },
  {
    "text": "the cluster so it's getting installed so we'll give a few more minutes for the",
    "start": "1770880",
    "end": "1777600"
  },
  {
    "text": "stack to be up and running so in the meantime let's just check",
    "start": "1777600",
    "end": "1783520"
  },
  {
    "text": "what are this dashboard so i have prom scale with sql here",
    "start": "1784559",
    "end": "1789600"
  },
  {
    "text": "and you can see uh basically these are the dashboards built on top of traces so we have traces",
    "start": "1790240",
    "end": "1797840"
  },
  {
    "text": "coming from hipster shop demo applications uh so these traces are stored into the prom scale and this uh",
    "start": "1797840",
    "end": "1805039"
  },
  {
    "text": "we are using sql to query all this data on top of traces for you so you can",
    "start": "1805039",
    "end": "1810559"
  },
  {
    "text": "see the p99 latency for all the traces in an average is 173 milliseconds and",
    "start": "1810559",
    "end": "1816559"
  },
  {
    "text": "the throughput is 6.82 requests per second and there is no error rate interestingly which is great and we have",
    "start": "1816559",
    "end": "1823039"
  },
  {
    "text": "p99 response time here as",
    "start": "1823039",
    "end": "1828960"
  },
  {
    "text": "as p90 and response time for each service you see here we have a recommendation service currency service",
    "start": "1829760",
    "end": "1836080"
  },
  {
    "text": "email service and if you just hover on it you can see that the cart service has",
    "start": "1836080",
    "end": "1841279"
  },
  {
    "text": "some like the response time is ranging to two seconds which is not good so this is the",
    "start": "1841279",
    "end": "1847919"
  },
  {
    "text": "p 19 response time and here you can see the heat map for the trace duration uh",
    "start": "1847919",
    "end": "1853360"
  },
  {
    "text": "for all the traces aggregated",
    "start": "1853360",
    "end": "1858480"
  },
  {
    "start": "1857000",
    "end": "1875000"
  },
  {
    "text": "so this is one dashboard i wanted to show you so in the meantime we'll just check the status of the stack so yep so",
    "start": "1858480",
    "end": "1864320"
  },
  {
    "text": "at 6 18 now so i can think it has four minutes from the time we have deployed it uh deployed the stack so let's do",
    "start": "1864320",
    "end": "1871519"
  },
  {
    "text": "cubic tail get parts so still the uh deployment is",
    "start": "1871519",
    "end": "1876799"
  },
  {
    "start": "1875000",
    "end": "1940000"
  },
  {
    "text": "the observability stack is deployed in four minutes so the grafana is in cash flow back off let's give it 10 more",
    "start": "1876799",
    "end": "1882880"
  },
  {
    "text": "seconds for it to uh start up and running it's dependent on the time scale db but in the meantime we can see that",
    "start": "1882880",
    "end": "1890240"
  },
  {
    "text": "we have time scale db deployed prom scale prom lens uh the prometheus node exporter the open telemetry collector",
    "start": "1890240",
    "end": "1896880"
  },
  {
    "text": "the cube state matrix and the from this operator so yeah you can now you can see that",
    "start": "1896880",
    "end": "1903679"
  },
  {
    "text": "tops graphene the pod is up and running",
    "start": "1903679",
    "end": "1908559"
  },
  {
    "text": "so yep so we'll just use bin tops grafana get password command to",
    "start": "1910640",
    "end": "1917840"
  },
  {
    "text": "get the password from the using the top cli and you can see the password is here",
    "start": "1917840",
    "end": "1923679"
  },
  {
    "text": "and we can just do port forward",
    "start": "1923679",
    "end": "1928158"
  },
  {
    "text": "graph on a port forward so the graphana is port forwarder to the localhost 8080 so",
    "start": "1929200",
    "end": "1935200"
  },
  {
    "text": "let's copy this password which is randomly generated by tops",
    "start": "1935200",
    "end": "1940559"
  },
  {
    "start": "1940000",
    "end": "1958000"
  },
  {
    "text": "and let's do localhost",
    "start": "1941919",
    "end": "1946080"
  },
  {
    "text": "8080 okay",
    "start": "1947519",
    "end": "1953919"
  },
  {
    "text": "so we have admin and then the password which we copied and we are logged in so this is the",
    "start": "1953919",
    "end": "1960799"
  },
  {
    "start": "1958000",
    "end": "1968000"
  },
  {
    "text": "graphana and we have pre-configured dashboards and tops using the cube prometheus which",
    "start": "1960799",
    "end": "1967120"
  },
  {
    "text": "internally uses the kubernetes mixins so let's navigate through this dashboard so these are the dashboards which are",
    "start": "1967120",
    "end": "1973080"
  },
  {
    "start": "1968000",
    "end": "1977000"
  },
  {
    "text": "pre-configured by cube prometheus so you can just get into node exporter nodes to",
    "start": "1973080",
    "end": "1979360"
  },
  {
    "start": "1977000",
    "end": "1992000"
  },
  {
    "text": "understand what is the metric so as the stack is just uh five minutes old so the",
    "start": "1979360",
    "end": "1984399"
  },
  {
    "text": "data is just getting uh filled in so here you can see all the cpu usage load average for the node so let's give it",
    "start": "1984399",
    "end": "1991120"
  },
  {
    "text": "some time and in the meantime we can check the data sources so in tops by default the data sources are",
    "start": "1991120",
    "end": "1997600"
  },
  {
    "start": "1992000",
    "end": "2037000"
  },
  {
    "text": "configured for you out of the box here you see the prometheus data source which is configured to use prom scale so here we",
    "start": "1997600",
    "end": "2005360"
  },
  {
    "text": "have prom scale to query prompt queries as the prometheus data source and we have from",
    "start": "2005360",
    "end": "2011440"
  },
  {
    "text": "scale sql which is the postgres sql data source to query using sql from the time",
    "start": "2011440",
    "end": "2016480"
  },
  {
    "text": "scale db and you have prompt scale tracing so it's an eager data source to",
    "start": "2016480",
    "end": "2021519"
  },
  {
    "text": "query traces from prom scan so these are the three data sources which are pre-configured for you using tops",
    "start": "2021519",
    "end": "2029518"
  },
  {
    "text": "and now uh we can just go to the other date",
    "start": "2030320",
    "end": "2037440"
  },
  {
    "start": "2037000",
    "end": "2090000"
  },
  {
    "text": "prometheus dashboard to understand what is the data so here you can see that these are the prometheus stats uptime",
    "start": "2037440",
    "end": "2044000"
  },
  {
    "text": "and everything for these things and here you can see the target sink target so this it says uh it has more than 750",
    "start": "2044000",
    "end": "2051200"
  },
  {
    "text": "targets at the moment so it's 8 10 to be precise and average scrape interval is one in one minute and the scrape",
    "start": "2051200",
    "end": "2058480"
  },
  {
    "text": "failures there is no data yet and it's appending samples head series so the head series is 59 000 at the moment",
    "start": "2058480",
    "end": "2067440"
  },
  {
    "text": "so these are some metrics all these dashboards are out of the box available for you if you are using tops",
    "start": "2067440",
    "end": "2074320"
  },
  {
    "text": "and this is the grafana visualization from the tops which we have deployed and how we have also seen how we have",
    "start": "2074320",
    "end": "2082240"
  },
  {
    "text": "captured the password using the top cli and let's get back to the sql dashboards",
    "start": "2082240",
    "end": "2087358"
  },
  {
    "text": "which i've built for this demo in another environment so here you can see that",
    "start": "2087359",
    "end": "2094720"
  },
  {
    "start": "2090000",
    "end": "2227000"
  },
  {
    "text": "the service performances so even these dashboards are built on top of traces using sql as the query language so",
    "start": "2094720",
    "end": "2101040"
  },
  {
    "text": "coming to the first panel here you see operations with highest error rate in last 24 hours so this is the service",
    "start": "2101040",
    "end": "2108240"
  },
  {
    "text": "name and this is the operation so in front and service the checkout service is having",
    "start": "2108240",
    "end": "2114839"
  },
  {
    "text": "2121 spans with errors and the total spans are 3083",
    "start": "2114839",
    "end": "2120800"
  },
  {
    "text": "a k total spans and the error rate is 55 000 55 percent 55.4 percent the error",
    "start": "2120800",
    "end": "2128160"
  },
  {
    "text": "rate is so each and every operation shows the error rates per uh",
    "start": "2128160",
    "end": "2134000"
  },
  {
    "text": "api here for operation and the operations with highest rate errors in the last 24 hours so",
    "start": "2134000",
    "end": "2141680"
  },
  {
    "text": "this is what the data is so the front-end card checkout",
    "start": "2141680",
    "end": "2148640"
  },
  {
    "text": "has the 55.5 percent errors as we have seen here it's the same error rate for the same",
    "start": "2148640",
    "end": "2154800"
  },
  {
    "text": "operation here and you can see all the list of uh apis which have the error rates and here you can see the slowest",
    "start": "2154800",
    "end": "2161839"
  },
  {
    "text": "operation in the last 24 hours so the front end service has p99 latency of",
    "start": "2161839",
    "end": "2167880"
  },
  {
    "text": "28.9 seconds which is not good and here we also have the p triple line",
    "start": "2167880",
    "end": "2174480"
  },
  {
    "text": "latency it's the same again and for the product id also it's the same so",
    "start": "2174480",
    "end": "2179920"
  },
  {
    "text": "the p99 is almost 30 seconds which is not good and here the slowest operations in the",
    "start": "2179920",
    "end": "2185520"
  },
  {
    "text": "last 24 hours so the health check for card gr pc service is taking approximately one point like 1.64",
    "start": "2185520",
    "end": "2192480"
  },
  {
    "text": "seconds so this is the slash check is taking this much time so which is not good so it just gives you",
    "start": "2192480",
    "end": "2199119"
  },
  {
    "text": "all this kind of anomalies and for example we can just jump into the sql query we use to build this dashboard",
    "start": "2199119",
    "end": "2204880"
  },
  {
    "text": "it's as easy as that so this is a nested sql query you're just doing select and then you're applying to care like you",
    "start": "2204880",
    "end": "2211440"
  },
  {
    "text": "need to do some small casting of for data to visualize in",
    "start": "2211440",
    "end": "2216720"
  },
  {
    "text": "grafana and there's another nested query here so all you it's just 10 lines of sql query",
    "start": "2216720",
    "end": "2223119"
  },
  {
    "text": "for you to get this kind of insights and let's jump into another interesting",
    "start": "2223119",
    "end": "2230160"
  },
  {
    "start": "2227000",
    "end": "2442000"
  },
  {
    "text": "uh dashboards i have here to demo and the service dependencies so you want to",
    "start": "2230160",
    "end": "2235200"
  },
  {
    "text": "understand what what are the dependencies for a service so you have a client service as front end check out",
    "start": "2235200",
    "end": "2240960"
  },
  {
    "text": "service and they are dependent on ad service here and basically uh the front end client is calling the ad service",
    "start": "2240960",
    "end": "2248599"
  },
  {
    "text": "2715 times and the specific api is get ads so the total execution time is 1.03",
    "start": "2248599",
    "end": "2255920"
  },
  {
    "text": "seconds so how cool is that you just know the service dependencies for each and every application uh by",
    "start": "2255920",
    "end": "2261760"
  },
  {
    "text": "by processing the traces and here you can see another interesting thing the front end is calling the",
    "start": "2261760",
    "end": "2267119"
  },
  {
    "text": "product catalog twenty 000 requests so this is definitely not great so you",
    "start": "2267119",
    "end": "2273920"
  },
  {
    "text": "should you should definitely dig into it by looking at the number of requests the product catalog service is getting",
    "start": "2273920",
    "end": "2280800"
  },
  {
    "text": "so it just gives you this deeper insights into your applications how is how many invocations are",
    "start": "2280800",
    "end": "2287359"
  },
  {
    "text": "happening for api and what is the client the source where this requests are getting uh",
    "start": "2287359",
    "end": "2294800"
  },
  {
    "text": "invoked from and this is the heat map of the trace duration which i've seen in other",
    "start": "2294800",
    "end": "2301200"
  },
  {
    "text": "other dashboard and here is the slowest traces so here you can see the start time the",
    "start": "2301839",
    "end": "2307440"
  },
  {
    "text": "trace id the service name and the operation so basically the slowest trace duration is",
    "start": "2307440",
    "end": "2314160"
  },
  {
    "text": "from the card service and the duration is 1.98 seconds and these are the resource tags so we'll just see what is",
    "start": "2314160",
    "end": "2320560"
  },
  {
    "text": "the sql query used to get this so the sql query is not more than eight lines i should say",
    "start": "2320560",
    "end": "2326640"
  },
  {
    "text": "uh here so it's just the select so you're doing select of start time and replacing this trace id special",
    "start": "2326640",
    "end": "2333200"
  },
  {
    "text": "characters with an empty string that's the trace id here and we are doing the service name selection span name",
    "start": "2333200",
    "end": "2339520"
  },
  {
    "text": "duration second and we're converting the resource tags into the json b for easier visualization here in the table and we",
    "start": "2339520",
    "end": "2346000"
  },
  {
    "text": "are doing from so there's a span table we are just querying all this data from the span table where uh parent span id",
    "start": "2346000",
    "end": "2352240"
  },
  {
    "text": "is null so basically a trace is nothing but a parent span itself when we d when we understand the trace",
    "start": "2352240",
    "end": "2360000"
  },
  {
    "text": "data model so we are just saying that capture all the parents fans because they denote the",
    "start": "2360000",
    "end": "2366560"
  },
  {
    "text": "traces and just limit them for 100 so these are the top 100 slowest traces you",
    "start": "2366560",
    "end": "2372400"
  },
  {
    "text": "see in this table so it's as easy as you see it so the sql",
    "start": "2372400",
    "end": "2378480"
  },
  {
    "text": "way of querying your observability is like a new approach and it's really easy and",
    "start": "2378480",
    "end": "2384160"
  },
  {
    "text": "the sky is the limit you can correlate and you can build this kind of dashboards as per your requirements so",
    "start": "2384160",
    "end": "2390640"
  },
  {
    "text": "it's just easy and it just offers tremendous value for you to understand",
    "start": "2390640",
    "end": "2396079"
  },
  {
    "text": "your services and yep these are the three dashboards i",
    "start": "2396079",
    "end": "2401119"
  },
  {
    "text": "wanted to show you and these all these dashboards are again a note that are built on top of traces",
    "start": "2401119",
    "end": "2408880"
  },
  {
    "text": "using sql as the query language and they are querying directly from the",
    "start": "2408880",
    "end": "2414240"
  },
  {
    "text": "timescale db",
    "start": "2414240",
    "end": "2417119"
  },
  {
    "text": "and",
    "start": "2420000",
    "end": "2423000"
  },
  {
    "text": "so we can just check the dashboard so now the data is coming and you can see that",
    "start": "2427839",
    "end": "2432880"
  },
  {
    "text": "as the stack is running for last 10 minutes here so the data is just filling in",
    "start": "2432880",
    "end": "2438720"
  },
  {
    "text": "from the stack and to make sure that prom scale",
    "start": "2438720",
    "end": "2445760"
  },
  {
    "start": "2442000",
    "end": "2583000"
  },
  {
    "text": "the tops which we have installed is that ingesting the is it ingesting the metrics and traces",
    "start": "2445760",
    "end": "2452000"
  },
  {
    "text": "all you have to do is just do prom scale and check the logs of it so here you can see",
    "start": "2452000",
    "end": "2459680"
  },
  {
    "text": "so again here you can see that it's ingesting basically 4500 samples per second so these are the info logs of",
    "start": "2461760",
    "end": "2468960"
  },
  {
    "text": "the prom scale uh stating that hey this is the injection of samples i'm doing at",
    "start": "2468960",
    "end": "2474640"
  },
  {
    "text": "the moment and uh just as the final demo will just",
    "start": "2474640",
    "end": "2480000"
  },
  {
    "text": "deploy the sample micro services so that we can see how does the",
    "start": "2480000",
    "end": "2486160"
  },
  {
    "text": "how does the traces",
    "start": "2486160",
    "end": "2491599"
  },
  {
    "text": "okay traces apps okay so i'm just deploying a bunch of micro services",
    "start": "2491599",
    "end": "2496960"
  },
  {
    "text": "which basically uh forward emit the traces to the open telemetry collector and open telemetry collector forwards",
    "start": "2496960",
    "end": "2503520"
  },
  {
    "text": "this traces to the prompt skill and then you can see in the prom scale logs that it's ingesting",
    "start": "2503520",
    "end": "2508880"
  },
  {
    "text": "uh x number of samples per second so this might take a couple of minutes",
    "start": "2508880",
    "end": "2514720"
  },
  {
    "text": "as the pods needs to get up and running so i think they're almost up and running",
    "start": "2514720",
    "end": "2522359"
  },
  {
    "text": "so let's do the logs just let's tail the logs of prom skill",
    "start": "2525440",
    "end": "2532960"
  },
  {
    "text": "so here you can see that it says it's already ingesting spans like five spans eight spans per second so",
    "start": "2532960",
    "end": "2539440"
  },
  {
    "text": "even the traces are getting ingested into the prom scale now as we just deployed uh",
    "start": "2539440",
    "end": "2544720"
  },
  {
    "text": "the demo microservices here you can see two uh 2000 samples and",
    "start": "2544720",
    "end": "2553440"
  },
  {
    "text": "all the samples and spans which are getting ingested so here we see as high as 231 spans",
    "start": "2553839",
    "end": "2561040"
  },
  {
    "text": "getting ingested here so yep 231 span so yep prom scale is now",
    "start": "2561040",
    "end": "2567760"
  },
  {
    "text": "ingesting both the metrics and traces for you",
    "start": "2567760",
    "end": "2572960"
  },
  {
    "text": "yep so this is the demo i had and thanks to the demo gods",
    "start": "2572960",
    "end": "2578400"
  },
  {
    "text": "as my demo just worked as expected",
    "start": "2578400",
    "end": "2583359"
  },
  {
    "start": "2583000",
    "end": "2912000"
  },
  {
    "text": "and to learn more you can find all this resources for slides and resources so",
    "start": "2584960",
    "end": "2590400"
  },
  {
    "text": "this link is uh not correct it's uh it's my bad sorry for that so it's a prom con talk link i just added here i should",
    "start": "2590400",
    "end": "2597040"
  },
  {
    "text": "replace this so but you can find this slides in the description i'll just share the slides with in the cncf",
    "start": "2597040",
    "end": "2602880"
  },
  {
    "text": "webinar and the observability stack for kubernetes can be found basically you can get find the github report",
    "start": "2602880",
    "end": "2610920"
  },
  {
    "text": "tsdb.co tops github and prom skill github repo at slash time skills slash prom skill and you can also find the",
    "start": "2610920",
    "end": "2618640"
  },
  {
    "text": "prom scale blog post on this link and if you are interested to discuss more about tops and from skill joiners and time",
    "start": "2618640",
    "end": "2625280"
  },
  {
    "text": "scale dbs like hash prompt skill currently we are also rethinking the tops architecture to support git ops and",
    "start": "2625280",
    "end": "2632160"
  },
  {
    "text": "infrastructure as code so each enterprise has their own way of deploying components into their infrastructure so if you have any",
    "start": "2632160",
    "end": "2638720"
  },
  {
    "text": "thoughts suggestions feedback on tops you should definitely reach out to us on slack we would love to have a quick call",
    "start": "2638720",
    "end": "2645040"
  },
  {
    "text": "with you to understand your use cases and requirements to better shape the future of tops so",
    "start": "2645040",
    "end": "2651280"
  },
  {
    "text": "tops will have some architectural revamping and some changes in the near future which should",
    "start": "2651280",
    "end": "2657440"
  },
  {
    "text": "make it even more powerful and easier to deploy the observability stack so now you just see",
    "start": "2657440",
    "end": "2663200"
  },
  {
    "text": "it as one command away but now we will expand this ease of deploying into different architectures and",
    "start": "2663200",
    "end": "2669520"
  },
  {
    "text": "infrastructures like the githubs infrastructures code and different ways so we are still exploring that side of",
    "start": "2669520",
    "end": "2675119"
  },
  {
    "text": "tops so your feedback is definitely valuable for us you can reach out to us and time scale",
    "start": "2675119",
    "end": "2681280"
  },
  {
    "text": "db slack so i'll just show you quickly the tops github repos if you are",
    "start": "2681280",
    "end": "2687599"
  },
  {
    "text": "interested to check it out do check out the tops github so here we have the tops project and a",
    "start": "2687599",
    "end": "2694880"
  },
  {
    "text": "quick start getting guides how you can install the cla and get the stack up and running it's the same command which we",
    "start": "2694880",
    "end": "2700400"
  },
  {
    "text": "have run to get the tops up and running and uh we",
    "start": "2700400",
    "end": "2705520"
  },
  {
    "text": "have prom skill here so so here is the prom skill repo for you",
    "start": "2705520",
    "end": "2711119"
  },
  {
    "text": "so you can learn more about uh prom skill here and we do have time scale uh",
    "start": "2711119",
    "end": "2717040"
  },
  {
    "text": "docs so if you are interested in getting",
    "start": "2717040",
    "end": "2722800"
  },
  {
    "text": "started with prompt scale you should definitely check out the prom skill docs on the timescale db website so it gives",
    "start": "2722800",
    "end": "2727839"
  },
  {
    "text": "you more details about prom skill architecture and also some high level information on how is the schema",
    "start": "2727839",
    "end": "2734400"
  },
  {
    "text": "designed in the relational database for observability data and installing tops also has all kind of examples for",
    "start": "2734400",
    "end": "2741839"
  },
  {
    "text": "you and justin heads up that we recently launched the",
    "start": "2741839",
    "end": "2747359"
  },
  {
    "text": "prom scale logo and i'm very excited about this logo so i just wanted to share it with you so you'll be seeing",
    "start": "2747359",
    "end": "2753920"
  },
  {
    "text": "more prom skill and this logo and all the future talks in cncf webinars and",
    "start": "2753920",
    "end": "2759599"
  },
  {
    "text": "other platforms and you can also check out the time",
    "start": "2759599",
    "end": "2765680"
  },
  {
    "text": "scale the blog post from the observability team at time scale",
    "start": "2765680",
    "end": "2771119"
  },
  {
    "text": "and time scale website so basically the time scale uh website holds all interesting blog posts on the time scale",
    "start": "2771119",
    "end": "2777359"
  },
  {
    "text": "db and observability so you can also check out some uh crypto related blog posts how is this crypto data uh stored",
    "start": "2777359",
    "end": "2785280"
  },
  {
    "text": "in time scale db and if you are interested into the observability so you need to check out this filter observability and uh block so here we",
    "start": "2785280",
    "end": "2793760"
  },
  {
    "text": "recently published how to turn time scale cloud into observability back in with rom scale should definitely check",
    "start": "2793760",
    "end": "2799200"
  },
  {
    "text": "out so it says about how you can install tops and prom skill uh by powering all",
    "start": "2799200",
    "end": "2806640"
  },
  {
    "text": "data into the timescale cloud so all the storage layer it will be offloaded from your kubernetes cluster to the time",
    "start": "2806640",
    "end": "2812720"
  },
  {
    "text": "scale cloud so it just works out of the box for you so this is the architectures of the you",
    "start": "2812720",
    "end": "2818160"
  },
  {
    "text": "will have all the tops components in your cluster the prom scale connector but just the database will be offloaded",
    "start": "2818160",
    "end": "2823599"
  },
  {
    "text": "to the timescale cloud and it will be running in timescale cloud so it offers all the major features like ease of",
    "start": "2823599",
    "end": "2829520"
  },
  {
    "text": "operations for your scaling the compute disk and everything so timescale dba has",
    "start": "2829520",
    "end": "2836400"
  },
  {
    "text": "some amazing features so we do have 30 day free trial if you are interested to check out the timescale cloud",
    "start": "2836400",
    "end": "2843200"
  },
  {
    "text": "for storing all the observability data and do check out this blog post if you are",
    "start": "2843200",
    "end": "2849680"
  },
  {
    "text": "interested in getting started with tabs and time scale cloud and there are other blog posts here as",
    "start": "2849680",
    "end": "2855359"
  },
  {
    "text": "well if you are interested like how to down sample from this metrics in prom scale and what are traces and how sql",
    "start": "2855359",
    "end": "2861920"
  },
  {
    "text": "helps you in getting the deeper insights from your traces it discusses about the dashboards",
    "start": "2861920",
    "end": "2867760"
  },
  {
    "text": "which i have demoed today and simplifying the prometheus monitoring for your entire organization using prom",
    "start": "2867760",
    "end": "2873839"
  },
  {
    "text": "scale and there are many blog posts like that here for the observability so do check out if you are interested",
    "start": "2873839",
    "end": "2881599"
  },
  {
    "text": "and and we are hiring so if you are",
    "start": "2881599",
    "end": "2888319"
  },
  {
    "text": "interested to join time scale uh both in the time scale db the database side of the house the time scale flowed",
    "start": "2888319",
    "end": "2895040"
  },
  {
    "text": "or in the observability group so feel free to check out our careers or reach out to us and slack so we would love to",
    "start": "2895040",
    "end": "2901599"
  },
  {
    "text": "have you as a part of our time skill team and thank you",
    "start": "2901599",
    "end": "2907280"
  },
  {
    "text": "see you in the future talks from from scale and time skill",
    "start": "2907280",
    "end": "2913640"
  }
]