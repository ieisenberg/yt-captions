[
  {
    "text": "okay let's get started Um thanks for waiting everybody Uh the keynotes got going a little bit late Um so I just",
    "start": "640",
    "end": "7040"
  },
  {
    "text": "given a couple minutes for people to um make their way over My name is Joe Betts",
    "start": "7040",
    "end": "12160"
  },
  {
    "text": "I work on SIG API machinery as a technical lead I've been doing that for a couple years Um before I worked on API",
    "start": "12160",
    "end": "18960"
  },
  {
    "text": "machinery I also worked on uh as a maintainer of CD for a couple years So um have a background in kind of both",
    "start": "18960",
    "end": "24960"
  },
  {
    "text": "systems So today's um agenda is kind of an intro level um session for API machinery So if",
    "start": "24960",
    "end": "32558"
  },
  {
    "text": "you don't know what API machinery is um we're going to spend some time going over that Then we're going to go over the updates um in the Kubernetes 1.33",
    "start": "32559",
    "end": "40239"
  },
  {
    "text": "release that we've been working on Um and then we'll kind of finish out talking about some future plans and how",
    "start": "40239",
    "end": "45680"
  },
  {
    "text": "to get involved in the SIG So let's look at what API machinery",
    "start": "45680",
    "end": "51920"
  },
  {
    "text": "is It's a kind of a broad crosscutting SIG Um so it's a lot of different",
    "start": "51920",
    "end": "57800"
  },
  {
    "text": "responsibilities Um our core responsibility is the rest mechanics of the Kubernetes API Um so that includes",
    "start": "57800",
    "end": "65760"
  },
  {
    "text": "everything that is involved in defining a REST API the versioning um the serialization protocols resources sub",
    "start": "65760",
    "end": "73439"
  },
  {
    "text": "resources all of that Um and at its core like one of the",
    "start": "73439",
    "end": "78799"
  },
  {
    "text": "main things we do is we provide support for building resource definitions Um so",
    "start": "78799",
    "end": "84320"
  },
  {
    "text": "that's how you build types like the built-in types pod node those types of",
    "start": "84320",
    "end": "89439"
  },
  {
    "text": "things But also how you build custom resources so CRDs and things like that Um sometimes you'll hear the term KRM",
    "start": "89439",
    "end": "96720"
  },
  {
    "text": "which means Kubernetes of resource model So we kind of have an opinionated approach to what a resource is Um and a",
    "start": "96720",
    "end": "104079"
  },
  {
    "text": "lot of that is supported by API machinery Um the various aspects of that include everything from defaulting to",
    "start": "104079",
    "end": "110079"
  },
  {
    "text": "versioning to conversion um the semantics of apply and patch",
    "start": "110079",
    "end": "115880"
  },
  {
    "text": "mechanics subresources um all kinds of things like that Um we have um a significant amount",
    "start": "115880",
    "end": "123520"
  },
  {
    "text": "of investment into control plane extensibility So that includes you know",
    "start": "123520",
    "end": "129280"
  },
  {
    "text": "custom resources is one of the most prominent and obvious examples Um but you can also add custom resources",
    "start": "129280",
    "end": "135440"
  },
  {
    "text": "through aggregated API servers So we support that Um we support extensibility of the admission control What that means",
    "start": "135440",
    "end": "142480"
  },
  {
    "text": "is anytime a request um is coming in a right request is coming in to the",
    "start": "142480",
    "end": "148080"
  },
  {
    "text": "control plane you can intercept that um through admission control You can either reject it or modify it Um and so we have",
    "start": "148080",
    "end": "155760"
  },
  {
    "text": "two mechanisms mechanisms for that One is called web hooks So admission web hooks you can validate or mutate um",
    "start": "155760",
    "end": "162879"
  },
  {
    "text": "resources um during admission Um we also have a new form of admission control um",
    "start": "162879",
    "end": "168560"
  },
  {
    "text": "that is based on inline logic You don't have to write your own binary as a web hook Um so we call those admission",
    "start": "168560",
    "end": "173680"
  },
  {
    "text": "policies and they use a small embedded programming language called the common",
    "start": "173680",
    "end": "178720"
  },
  {
    "text": "expression language or cell to do that We also support cell more generally throughout the API So that is a",
    "start": "178720",
    "end": "185280"
  },
  {
    "text": "mechanism that we support that allows you to have small inline chunks of logic",
    "start": "185280",
    "end": "190319"
  },
  {
    "text": "um throughout the API It's used in um like DRRA for um expressing complex um",
    "start": "190319",
    "end": "195840"
  },
  {
    "text": "semantics if you want to allocate a resource Um we're responsible for the language",
    "start": "195840",
    "end": "202720"
  },
  {
    "text": "clients of um of the API server Um so in particular we spend a lot of time on the",
    "start": "202720",
    "end": "208000"
  },
  {
    "text": "Go clients Um but we support a variety of different clients Um we have both typed and dynamic forms of those Um so",
    "start": "208000",
    "end": "215040"
  },
  {
    "text": "you can um the typed form we provide one that provides all of the built-in APIs Um you can generate your own typed",
    "start": "215040",
    "end": "221360"
  },
  {
    "text": "clients or you can use the dynamic client with CRDs And we also provide discovery for clients So clients can",
    "start": "221360",
    "end": "226640"
  },
  {
    "text": "discover what's available in the API Um we also provide the controller infrastructure Um so the coupe",
    "start": "226640",
    "end": "232640"
  },
  {
    "text": "controller manager kind of as a framework is our responsibility Um and more generally controller manager is our",
    "start": "232640",
    "end": "238959"
  },
  {
    "text": "responsibility So all the infrastructure to build those um is things that we work",
    "start": "238959",
    "end": "244319"
  },
  {
    "text": "on Um so that includes the informer infrastructure the watch mechanism all of that to have efficient controllers",
    "start": "244319",
    "end": "251200"
  },
  {
    "text": "running in your control planes Um beyond that we um take responsibility",
    "start": "251200",
    "end": "257120"
  },
  {
    "text": "for the reliability scale and performance of most of the control plane Um SIG um scheduling does take",
    "start": "257120",
    "end": "263199"
  },
  {
    "text": "responsibility for the scheduler specifically Um but when it comes to the controller managers the API server um a",
    "start": "263199",
    "end": "269280"
  },
  {
    "text": "lot of that falls on us Um we also share that with SIGCD which is a awesome new SIG that we have",
    "start": "269280",
    "end": "276120"
  },
  {
    "text": "Um to kind of give a sense of what the bounds of our responsibilities are I figured it'd be helpful to talk about",
    "start": "276120",
    "end": "281600"
  },
  {
    "text": "what API machinery is not So we are not responsible for API review Um there is a",
    "start": "281600",
    "end": "286880"
  },
  {
    "text": "dedicated group of really talented people that do that Um so if you are working on a feature you do need API",
    "start": "286880",
    "end": "292240"
  },
  {
    "text": "review We would be certainly happy to give you advice but we are not official reviewers Um and there's a dedicated",
    "start": "292240",
    "end": "298000"
  },
  {
    "text": "group that you need to go to for that We are also not responsible for all",
    "start": "298000",
    "end": "303040"
  },
  {
    "text": "APIs Um APIs are owned by the respective SIGs Um so while we do own some APIs we",
    "start": "303040",
    "end": "309039"
  },
  {
    "text": "don't actually own that many APIs um as a SIG Um we own a couple around um um",
    "start": "309039",
    "end": "315440"
  },
  {
    "text": "you know our extensibility mechanisms So the CRD resource itself is our responsibility for example Um we are",
    "start": "315440",
    "end": "321680"
  },
  {
    "text": "also not responsible for controllers although we own the controller infrastructure um and the frameworking for controllers Um the controllers",
    "start": "321680",
    "end": "328080"
  },
  {
    "text": "themselves are also owned by their respective SIGs Um we are not responsible for coupube cuddle that's",
    "start": "328080",
    "end": "333919"
  },
  {
    "text": "owned by SIG CLI and I've mentioned CD a couple times already but we are not directly responsible for CD that's owned",
    "start": "333919",
    "end": "339919"
  },
  {
    "text": "by SIGCD Um and there's been a lot of good work um on redefining the interface between machinery and segate city",
    "start": "339919",
    "end": "346080"
  },
  {
    "text": "recently Um and that's I think that's benefited us both and has resulted in some opportunities to improve",
    "start": "346080",
    "end": "352080"
  },
  {
    "text": "performance which is great All right So that's kind of what SIG API machinery is in broad terms Um",
    "start": "352080",
    "end": "359440"
  },
  {
    "text": "hopefully this next section will make that a lot more concrete because what we're going to do is we're going to go talk about individual caps that we've",
    "start": "359440",
    "end": "366240"
  },
  {
    "text": "been working on recently Um so this is the list of cups I'm going to kind of briefly go over Um it's there's I think",
    "start": "366240",
    "end": "373360"
  },
  {
    "text": "nine cups here They're broken up into um things that are progressing or things",
    "start": "373360",
    "end": "378479"
  },
  {
    "text": "that have been actively worked on in the last cycle So there are other cups that are open in our SIG but these are the",
    "start": "378479",
    "end": "384319"
  },
  {
    "text": "ones that have had activity in the last cycle So these are ones I'm going to spend a couple minutes on",
    "start": "384319",
    "end": "389800"
  },
  {
    "text": "each Um so what I'm going to do is I'm just going to go through these in order starting with the alphas Um so order",
    "start": "389800",
    "end": "395360"
  },
  {
    "text": "namespace deletion This is a really great ke um for anybody that's had",
    "start": "395360",
    "end": "401680"
  },
  {
    "text": "trouble with um namespace life cycle Um it's just an alpha So um we want you to",
    "start": "401680",
    "end": "407360"
  },
  {
    "text": "try this out if you're interested in it Before this ke was in place If you deleted a namespace there was no order",
    "start": "407360",
    "end": "414880"
  },
  {
    "text": "of deletion of the resources in that namespace So if you did happen to have",
    "start": "414880",
    "end": "420080"
  },
  {
    "text": "some finalizers or um some owner references those would be respected during deletion But other than that it",
    "start": "420080",
    "end": "426960"
  },
  {
    "text": "was just completely unordered Um so the first ordering we're going to add is that we are going to",
    "start": "426960",
    "end": "432960"
  },
  {
    "text": "delete the pods in the name space and wait for those to stop before deleting the rest of the resources This kind of",
    "start": "432960",
    "end": "439520"
  },
  {
    "text": "eliminates that class of weird edge cases that you can have when the",
    "start": "439520",
    "end": "445840"
  },
  {
    "text": "resources in the namespace impact the way the pods run And if you're starting to delete them before the pods go away",
    "start": "445840",
    "end": "451840"
  },
  {
    "text": "the pods can kind of change at the last second and do weird things Um so this this makes for a lot more predictable",
    "start": "451840",
    "end": "457520"
  },
  {
    "text": "performance of your workload Um the next cap is snapshotable",
    "start": "457520",
    "end": "464160"
  },
  {
    "text": "API server cache Uh you don't have to read this whole thing I'm just going to summarize it really briefly For a long",
    "start": "464160",
    "end": "470800"
  },
  {
    "text": "time the API server has cached information um that you can access from",
    "start": "470800",
    "end": "475840"
  },
  {
    "text": "CD So not all requests to the API server go directly to CD A lot of them are served by a cache that cache um has been",
    "start": "475840",
    "end": "484400"
  },
  {
    "text": "used heavily for watches for a long time but only more recently have we started to serve more and more list requests",
    "start": "484400",
    "end": "490319"
  },
  {
    "text": "from it And this kept finishes the story arc of making it so that all list",
    "start": "490319",
    "end": "495520"
  },
  {
    "text": "requests are now served from that cache by it's restructured the cache and made it possible to do that Um this is really",
    "start": "495520",
    "end": "501599"
  },
  {
    "text": "important in terms of having predictable performance because without this cap you",
    "start": "501599",
    "end": "507039"
  },
  {
    "text": "basically have two code baths with very different performance profiles and it's kind of hard to know without being an",
    "start": "507039",
    "end": "513039"
  },
  {
    "text": "expert of API machinery which of those two code paths you were going to execute when you made a list request Um so what",
    "start": "513039",
    "end": "518800"
  },
  {
    "text": "this kept does is it consolidates that all to a single efficient code path So",
    "start": "518800",
    "end": "523839"
  },
  {
    "text": "no matter what kind of list requests you're making you're going to get predictable performance You don't really have to worry about it",
    "start": "523839",
    "end": "530399"
  },
  {
    "text": "Okay next up is emulation version This is a large change and this ke is",
    "start": "530399",
    "end": "535600"
  },
  {
    "text": "actually filed under SIG architecture but because there are a number of people in SIG API machinery working on it I",
    "start": "535600",
    "end": "541040"
  },
  {
    "text": "figured I'd call it out The way this ke works is that we add a- emulation",
    "start": "541040",
    "end": "546480"
  },
  {
    "text": "version flag to binaries like the coupube API server and you can provide a version number a Kubernetes version",
    "start": "546480",
    "end": "552800"
  },
  {
    "text": "number as an argument Um so for example if you are running Kubernetes 132 binary",
    "start": "552800",
    "end": "558640"
  },
  {
    "text": "and you set this to 131 that binary is going to pretend to be a previous version of that component Um so it's",
    "start": "558640",
    "end": "566399"
  },
  {
    "text": "going to basically you can think of it as like it's automatically turning off APIs and switching feature gates to",
    "start": "566399",
    "end": "572959"
  },
  {
    "text": "match the version that you asked for So why would you want that um well one major use case for this is if you",
    "start": "572959",
    "end": "580000"
  },
  {
    "text": "want to have more reliable upgrades you can break your upgrade into two steps",
    "start": "580000",
    "end": "585680"
  },
  {
    "text": "First you upgrade your binary version but you fix your emulation version so that it's not changed Um and so from a",
    "start": "585680",
    "end": "594000"
  },
  {
    "text": "user perspective the APIs and the features haven't changed at all but you're getting to test out a new binary",
    "start": "594000",
    "end": "600640"
  },
  {
    "text": "So as a cluster administrator upgrading your cluster you're you're testing out that new binary making sure it works and",
    "start": "600640",
    "end": "607440"
  },
  {
    "text": "if it doesn't you can roll it back knowing that you haven't accumulated any usage of new APIs and features because",
    "start": "607440",
    "end": "613440"
  },
  {
    "text": "you haven't turned them on yet Um so that's kind of the core idea And you're going to see a couple other caps um that",
    "start": "613440",
    "end": "619600"
  },
  {
    "text": "we've been working on related to safe upgrades Um this is another one of those I'm not",
    "start": "619600",
    "end": "625680"
  },
  {
    "text": "going to spend a lot of time on it but the idea of mixed version proxy is that when you're upgrading especially when",
    "start": "625680",
    "end": "631839"
  },
  {
    "text": "you're upgrading a high availability cluster and you have multiple API servers when you're upgrading they're",
    "start": "631839",
    "end": "637200"
  },
  {
    "text": "all not going to be the same version at the same time You might have some that are 133 and some that are 132 because you're rolling your upgrades",
    "start": "637200",
    "end": "643720"
  },
  {
    "text": "out During that state a user that is being load balanced into these API",
    "start": "643720",
    "end": "649040"
  },
  {
    "text": "servers might be able to perceive the difference of those those um of whatever their request reaches whatever API",
    "start": "649040",
    "end": "655519"
  },
  {
    "text": "server their request reaches because they're different right some some are adding new APIs some are deleting old",
    "start": "655519",
    "end": "661040"
  },
  {
    "text": "APIs that have been removed Um so what this kept does is it hides that",
    "start": "661040",
    "end": "666480"
  },
  {
    "text": "difference If your request reaches an API server that cannot serve the API you're asking for it proxies it over to",
    "start": "666480",
    "end": "673200"
  },
  {
    "text": "a pure that can if one exists Um next up is the seabboard",
    "start": "673200",
    "end": "679839"
  },
  {
    "text": "serializer So we've had CRDs in Kubernetes for a long time CRDs are",
    "start": "679839",
    "end": "686160"
  },
  {
    "text": "served and stored as JSON today That's not particularly efficient Um so Seabore",
    "start": "686160",
    "end": "692000"
  },
  {
    "text": "is a um binary protocol that is basically",
    "start": "692000",
    "end": "699440"
  },
  {
    "text": "JSON equivalent It is a self-describing protocol but it doesn't have the serialization and deserialization cost",
    "start": "699440",
    "end": "706320"
  },
  {
    "text": "of JSON Um and so we're going to be using this in storage and when clients ask for it over the API to get a far",
    "start": "706320",
    "end": "714240"
  },
  {
    "text": "better um kind of performance profile of serialization deserialization It's",
    "start": "714240",
    "end": "719360"
  },
  {
    "text": "pretty cheap to use Um so you don't get quite the storage compaction you do of Protobuff which is what we use heavily",
    "start": "719360",
    "end": "726079"
  },
  {
    "text": "for native types Um but you get something that is quite a bit closer Um so this will be a big um improvement",
    "start": "726079",
    "end": "732800"
  },
  {
    "text": "performance for CRDs Um next um we're into our betas So",
    "start": "732800",
    "end": "738880"
  },
  {
    "text": "the first beta is declarative validation This is not something you're going to see as a user directly yet Um but it's a",
    "start": "738880",
    "end": "745600"
  },
  {
    "text": "big change to the way that we're developing Kubernetes Um the idea is for as long as the project has existed we",
    "start": "745600",
    "end": "755079"
  },
  {
    "text": "have we have defined our APIs in ghost trucks and then written a bunch of",
    "start": "755079",
    "end": "760480"
  },
  {
    "text": "handwritten validation in another file next to it um that controls what's",
    "start": "760480",
    "end": "765680"
  },
  {
    "text": "allowed to be written to those fields And so if you actually want to",
    "start": "765680",
    "end": "770800"
  },
  {
    "text": "know for sure how a type in Kubernetes is validated the only real way to know",
    "start": "770800",
    "end": "775920"
  },
  {
    "text": "is to go find those Go files and hunt through and look for the validation code Um so what we're going to do is we're",
    "start": "775920",
    "end": "782000"
  },
  {
    "text": "going to replace all that handwritten validation code with markers on the Go tags um that declaratively specify what",
    "start": "782000",
    "end": "789279"
  },
  {
    "text": "the validation is Um this makes it a lot easier as a user to know for sure what",
    "start": "789279",
    "end": "794639"
  },
  {
    "text": "the validation expectations are Um and then it also allows us to build tooling based on this",
    "start": "794639",
    "end": "803279"
  },
  {
    "text": "So today if you go to our open API schemas which define our types you're not going to find a lot of validation",
    "start": "803279",
    "end": "809639"
  },
  {
    "text": "information Um but once this is in place we can then publish this information out through Open API and you'll get a far",
    "start": "809639",
    "end": "815920"
  },
  {
    "text": "more enriched um validation summary from that that endpoint Um we're going to be",
    "start": "815920",
    "end": "821519"
  },
  {
    "text": "generating the internal validation code from these annotations So they are going to be the source of truth they're going",
    "start": "821519",
    "end": "827040"
  },
  {
    "text": "to be if you see one of these you know that that's actually the validation",
    "start": "827040",
    "end": "832880"
  },
  {
    "text": "rule Um next up the next beta feature is coordinated leader election This is a kind of complicated um topic um but the",
    "start": "833480",
    "end": "842320"
  },
  {
    "text": "basic idea is when you're running an HA cluster um you're going to be running multiple control plane nodes and each of",
    "start": "842320",
    "end": "849680"
  },
  {
    "text": "those control plane nodes has a controller manager the coupe controller manager running But the way that we want",
    "start": "849680",
    "end": "855839"
  },
  {
    "text": "to run the coupe controller manager is we only want one of them active at a time We want mutual exclusion Um and so",
    "start": "855839",
    "end": "862160"
  },
  {
    "text": "the way that we've achieved that today is that if you have three of these controller managers running they race",
    "start": "862160",
    "end": "867600"
  },
  {
    "text": "for a lease and the one that wins that lease becomes the leader and the other two become passive backups or passive",
    "start": "867600",
    "end": "872959"
  },
  {
    "text": "replicas um ready to take over at any time So we're going to change this slightly because this works really well",
    "start": "872959",
    "end": "880079"
  },
  {
    "text": "during steady state when those controller managers are exactly the same It doesn't really matter which one wins the lease but during an upgrade you can",
    "start": "880079",
    "end": "886720"
  },
  {
    "text": "perceive the difference depending on if the old version or the new version gets the lease And during an upgrade it's",
    "start": "886720",
    "end": "892560"
  },
  {
    "text": "really easy to have a situation where you start with the old version go to the new version jump back to the old version",
    "start": "892560",
    "end": "898800"
  },
  {
    "text": "again Um and that can result in kind of surprising behavior depending on what's going on And so what we're going to do",
    "start": "898800",
    "end": "905120"
  },
  {
    "text": "is we're going to switch to an a slightly different approach of leader election where all of the controller",
    "start": "905120",
    "end": "910639"
  },
  {
    "text": "managers announce their candidacy for the leadership and then there is a centralized leader election coordinator",
    "start": "910639",
    "end": "917199"
  },
  {
    "text": "that looks at the candidates and picks the best one The default strategy for now is going to be pick the oldest",
    "start": "917199",
    "end": "923519"
  },
  {
    "text": "version because that keeps you from violating skew between components both for upgrades and for rollbacks Um but we",
    "start": "923519",
    "end": "931680"
  },
  {
    "text": "are entertaining other strategies and this can be used more broadly Um you can use this to actually ask the current",
    "start": "931680",
    "end": "939120"
  },
  {
    "text": "leader to give up leadership which is not something that you can do today Um and you could have different strategies",
    "start": "939120",
    "end": "945199"
  },
  {
    "text": "um for different systems Um next up for betas is",
    "start": "945199",
    "end": "951199"
  },
  {
    "text": "streaming encoded for list responses This is probably the most significant performance enhancement um in this",
    "start": "951199",
    "end": "958160"
  },
  {
    "text": "release and in fact in the last couple releases So what this does is it switches the way that we serve list",
    "start": "958160",
    "end": "964959"
  },
  {
    "text": "responses back to clients from accumulating all the information in memory um when serializing and then",
    "start": "964959",
    "end": "971519"
  },
  {
    "text": "sending it after we accumulated it to sending a to to serializing each list",
    "start": "971519",
    "end": "977440"
  },
  {
    "text": "item one at a time streaming it back to the client and not maintaining any more memory than that in the API server So",
    "start": "977440",
    "end": "983600"
  },
  {
    "text": "you can imagine if you are requesting a list response for hundreds of thousands of resources the memory profile of the",
    "start": "983600",
    "end": "991440"
  },
  {
    "text": "API server is dramatically better in this It can concurrently handle many many large list requests without running",
    "start": "991440",
    "end": "998160"
  },
  {
    "text": "out of memory or running into problems So this is a huge stability improvement for the API server I'm really looking",
    "start": "998160",
    "end": "1003519"
  },
  {
    "text": "forward to it Um the last cap is CRD validation",
    "start": "1003519",
    "end": "1010480"
  },
  {
    "text": "ratcheting This is also kind of a subtle feature So today when we validate",
    "start": "1010480",
    "end": "1018560"
  },
  {
    "text": "resources uh either if it's a crate or an update we just validate every single field in the request It seems like kind",
    "start": "1018560",
    "end": "1026160"
  },
  {
    "text": "of an obvious thing to do but for updates if a field hasn't changed you",
    "start": "1026160",
    "end": "1031520"
  },
  {
    "text": "don't actually need to revalidate it You already validated it when it was created",
    "start": "1031520",
    "end": "1036880"
  },
  {
    "text": "And so ratcheting is the idea of not doing that revalid revalidation And the",
    "start": "1036880",
    "end": "1042798"
  },
  {
    "text": "only reason that this actually becomes a perceivable difference is sometimes that",
    "start": "1042799",
    "end": "1048000"
  },
  {
    "text": "we change the validation on fields Um so this happened in 133 Um there was a CVE",
    "start": "1048000",
    "end": "1055600"
  },
  {
    "text": "around IPs and citers and we introduced tightening validation for both of those",
    "start": "1055600",
    "end": "1062280"
  },
  {
    "text": "types And what that means is that previously valid stored field data has",
    "start": "1062280",
    "end": "1068480"
  },
  {
    "text": "become invalid And so now we have two choices We can either reject all updates",
    "start": "1068480",
    "end": "1075919"
  },
  {
    "text": "um now that that tightening has happened if the old data was bad or we could choose to only reject updates that",
    "start": "1075919",
    "end": "1084240"
  },
  {
    "text": "actually touch those fields Um and we've chosen the latter that we believe that it's it's a much",
    "start": "1084240",
    "end": "1092799"
  },
  {
    "text": "better transition experience if you're tightening validation to only fail if",
    "start": "1092799",
    "end": "1098480"
  },
  {
    "text": "you're actually touching the fields you're in um that that have the validation changed for Um so we added",
    "start": "1098480",
    "end": "1104080"
  },
  {
    "text": "this to CRDs a while ago and we're finally bringing that to G So if you have a CRD and for some reason you need",
    "start": "1104080",
    "end": "1110640"
  },
  {
    "text": "to change the validation all your controllers that don't touch that field should continue to work It's only your",
    "start": "1110640",
    "end": "1116640"
  },
  {
    "text": "clients and controllers that actually interact with that field that might start breaking Um which reduces the risk",
    "start": "1116640",
    "end": "1123440"
  },
  {
    "text": "of the change somewhat It's still a breaking change It's still pretty dangerous but sometimes you have to do",
    "start": "1123440",
    "end": "1129160"
  },
  {
    "text": "it All right So that covers I think most of the caps Um let's talk a little bit",
    "start": "1129160",
    "end": "1136400"
  },
  {
    "text": "about future plans for SIG API machinery Um so there's two areas I wanted to point out The first is you probably",
    "start": "1136400",
    "end": "1143600"
  },
  {
    "text": "noticed that we had quite a few cups coming in around making upgrades safer Uh this is a priority for our SIG Um as",
    "start": "1143600",
    "end": "1152240"
  },
  {
    "text": "Kubernetes matures we want to make sure that we make upgrades the best",
    "start": "1152240",
    "end": "1157600"
  },
  {
    "text": "experience we can for users Um and it's going to take us a while right like we need to earn trust with cluster",
    "start": "1157600",
    "end": "1163320"
  },
  {
    "text": "administrators Um but by adding some of the the caps that we've added we're providing the tool set to make those",
    "start": "1163320",
    "end": "1169360"
  },
  {
    "text": "upgrades safer Um and that combines well with other things that are happening at large in the project So for example um",
    "start": "1169360",
    "end": "1178160"
  },
  {
    "text": "other people outside of SIG API machinery like Jordan Liot have been working hard to um improve our backport",
    "start": "1178160",
    "end": "1185120"
  },
  {
    "text": "policy so we don't break patch versions um by backporting things that are risky",
    "start": "1185120",
    "end": "1190160"
  },
  {
    "text": "So we've really done a lot of work to make that safer Um we've also stopped turning on beta APIs by default because",
    "start": "1190160",
    "end": "1196799"
  },
  {
    "text": "eventually those all go away and that's a breaking change So now if you're not actively turning on beta APIs you're not",
    "start": "1196799",
    "end": "1202960"
  },
  {
    "text": "going to be broken by that Um so that's kind of the trend that I hope I hope people can see here Um the next kind of",
    "start": "1202960",
    "end": "1211039"
  },
  {
    "text": "significant trend is um in towards declarative APIs Um so there's kind of",
    "start": "1211039",
    "end": "1216480"
  },
  {
    "text": "two aspects to this Um there's declarative validation like I mentioned is focusing on making built-in types",
    "start": "1216480",
    "end": "1223360"
  },
  {
    "text": "more declarative improving their defaulting improving their ratcheting things like that Um we're also focusing",
    "start": "1223360",
    "end": "1230320"
  },
  {
    "text": "a lot on bringing CRDs more in line with how native types",
    "start": "1230320",
    "end": "1235799"
  },
  {
    "text": "work Um now CRDs are sometimes ahead of native types CRDs have had declarative",
    "start": "1235799",
    "end": "1242240"
  },
  {
    "text": "validation for a long time Um and that's worked out pretty well Um but they're",
    "start": "1242240",
    "end": "1247600"
  },
  {
    "text": "also behind in some areas So in just in the last release we finally added field selectors to CRDs Um and that's a really",
    "start": "1247600",
    "end": "1253440"
  },
  {
    "text": "useful feature You can now filter CRDs by some field in them Um you can use",
    "start": "1253440",
    "end": "1258559"
  },
  {
    "text": "that in you know um along with some of the new um authorization features to do",
    "start": "1258559",
    "end": "1264240"
  },
  {
    "text": "useful things like constraining exactly what what resources in a group of",
    "start": "1264240",
    "end": "1270640"
  },
  {
    "text": "resources a particular user can see um and so there's more caps coming along",
    "start": "1270640",
    "end": "1275840"
  },
  {
    "text": "like that additional printer columns will with cell is going to allow CRD authors to give a very specific view of",
    "start": "1275840",
    "end": "1282960"
  },
  {
    "text": "their CRD um when you ask for like a table format back in cube cuddle",
    "start": "1282960",
    "end": "1288240"
  },
  {
    "text": "um which has been missing for a long time Um we're working to add more validation formats to CRDs So you can do",
    "start": "1288240",
    "end": "1295039"
  },
  {
    "text": "things like say I want the C to make sure the CRD's name um or this field here is a Kubernetes resource name It's",
    "start": "1295039",
    "end": "1302320"
  },
  {
    "text": "a valid Kubernetes resource name Today the only way you could actually do that would be to go find the rag X and plug it in Um so we're going to give you um a",
    "start": "1302320",
    "end": "1309200"
  },
  {
    "text": "named format for things like that and a bunch of other things um where there's also gaps in um the way that you can",
    "start": "1309200",
    "end": "1316960"
  },
  {
    "text": "compose types So if you're trying to embed a type in another type or you're trying to reference another type there's",
    "start": "1316960",
    "end": "1322159"
  },
  {
    "text": "not a lot of API machinery support for that Um so we're looking into ways to do that",
    "start": "1322159",
    "end": "1328480"
  },
  {
    "text": "better All right Um that covers most of what I had to present The last thing I",
    "start": "1329880",
    "end": "1335200"
  },
  {
    "text": "was going to say is we are actively looking for contributors in the SIG Um if you want to reach out to us um here's",
    "start": "1335200",
    "end": "1341280"
  },
  {
    "text": "our Slack Um we re we meet twice a week Sorry I gave uh US times here Um but",
    "start": "1341280",
    "end": "1347440"
  },
  {
    "text": "hopefully these are somewhat uh European friendly times Um and then I've listed out um our chairs and leads So with that",
    "start": "1347440",
    "end": "1355039"
  },
  {
    "text": "I'm going to stop and take any questions you have Thank you",
    "start": "1355039",
    "end": "1363000"
  },
  {
    "text": "[Applause]",
    "start": "1364150",
    "end": "1368049"
  },
  {
    "text": "Um we'll use this one M um I was looking do can you share",
    "start": "1373000",
    "end": "1379440"
  },
  {
    "text": "some more details about the new formats that you're going to provide for uh the",
    "start": "1379440",
    "end": "1384799"
  },
  {
    "text": "API like label selectors is an area where uh I don't want to use a a web",
    "start": "1384799",
    "end": "1391039"
  },
  {
    "text": "hook to validate it So it would be nice to have it included in the API spec",
    "start": "1391039",
    "end": "1396240"
  },
  {
    "text": "somehow Um I will add to these slides and upload",
    "start": "1396240",
    "end": "1401840"
  },
  {
    "text": "it Um we have we have an issue that is tracking um requested formats and",
    "start": "1401840",
    "end": "1407120"
  },
  {
    "text": "improvements Um so I think label selectors was already on there fortunately Um but yes there there's",
    "start": "1407120",
    "end": "1412720"
  },
  {
    "text": "there's a variety of other ones including like I think I think we support like an IPv4 and IPv6 format but",
    "start": "1412720",
    "end": "1419120"
  },
  {
    "text": "we don't support a general IP format that could be either Um so there's a bunch of like really core types that are",
    "start": "1419120",
    "end": "1424960"
  },
  {
    "text": "missing but also things like selectors and you know conditions and status and things like that",
    "start": "1424960",
    "end": "1432840"
  },
  {
    "text": "All right Anyone else uh uh I'm seeing that um there are some",
    "start": "1435120",
    "end": "1443200"
  },
  {
    "text": "issues uh that uh for instance serverside apply defines some uh list",
    "start": "1443200",
    "end": "1448960"
  },
  {
    "text": "types and and um merge keys uh while in customize you have the patch type and",
    "start": "1448960",
    "end": "1455600"
  },
  {
    "text": "patch key I think it's called it's very similar and kind of represent the same thing I I went to another talk around",
    "start": "1455600",
    "end": "1463200"
  },
  {
    "text": "with six CLI uh I was wondering who who could put that forward",
    "start": "1463200",
    "end": "1469520"
  },
  {
    "text": "I work as a platform engineer So we do a lot of CRDs and we provide CRDs to users",
    "start": "1469520",
    "end": "1476480"
  },
  {
    "text": "and they also use tools like customize not the CLI tool but in other context",
    "start": "1476480",
    "end": "1482240"
  },
  {
    "text": "like flux or argo uh and I would really love those things to be coordinated so we don't have to",
    "start": "1482240",
    "end": "1489760"
  },
  {
    "text": "provide extra tools to to to support customize better",
    "start": "1489760",
    "end": "1495120"
  },
  {
    "text": "Yeah I I would love to learn more about the specific problems you run into So if you have an issue please send it out to",
    "start": "1495120",
    "end": "1501520"
  },
  {
    "text": "the SIG but um yes there are two patch mechanisms that have almost identical",
    "start": "1501520",
    "end": "1507120"
  },
  {
    "text": "requirements in the in the metadata that you need to put in the types Um I my",
    "start": "1507120",
    "end": "1513919"
  },
  {
    "text": "intuition is that could probably be made better So we should look into",
    "start": "1513919",
    "end": "1518720"
  },
  {
    "text": "it All right any other questions",
    "start": "1519720",
    "end": "1524600"
  },
  {
    "text": "how's the journey oh that's loud How's the journey from um original um uh",
    "start": "1529760",
    "end": "1536960"
  },
  {
    "text": "streaming support to uh maybe something more modern that's quick and HTTP3 fully",
    "start": "1536960",
    "end": "1542720"
  },
  {
    "text": "standards compliant how's that going um so is this this a question about the",
    "start": "1542720",
    "end": "1548640"
  },
  {
    "text": "JSON streaming support or uh the HTTP layer",
    "start": "1548640",
    "end": "1554480"
  },
  {
    "text": "um yes So the the streaming support we've done in this release I I don't know if this answer your question but",
    "start": "1554480",
    "end": "1559520"
  },
  {
    "text": "I'll try Um is is mostly focused on making sure that the API server doesn't",
    "start": "1559520",
    "end": "1564720"
  },
  {
    "text": "accumulate a huge response in memory before it starts serving it Um so it's mostly it's mostly focused on that",
    "start": "1564720",
    "end": "1570960"
  },
  {
    "text": "aspect of it So I'll clarify I was talking more about like if I'm going to do a streaming",
    "start": "1570960",
    "end": "1577120"
  },
  {
    "text": "request to fetch um I'm going to exec into a pod and that's a streaming thing but the the AP API server gets involved",
    "start": "1577120",
    "end": "1584320"
  },
  {
    "text": "So that sort of evolution from early Kubernetes to where we want to be Um I",
    "start": "1584320",
    "end": "1590559"
  },
  {
    "text": "think I think once you once you have the streaming responses we have on the list today plus the watch mechanism once once",
    "start": "1590559",
    "end": "1598320"
  },
  {
    "text": "you've got that initial list done and you're starting the watch you end up in a pretty efficient mode where you're",
    "start": "1598320",
    "end": "1604720"
  },
  {
    "text": "just kind of constantly getting updates Um if is there a performance",
    "start": "1604720",
    "end": "1612080"
  },
  {
    "text": "problem or is there kind of a standards qu is it more of a Yeah Is it more of a performance question or more of a",
    "start": "1612080",
    "end": "1617520"
  },
  {
    "text": "standards question i was I was asking about this this the journey towards like web standards So web you know for",
    "start": "1617520",
    "end": "1623360"
  },
  {
    "text": "example websockets over HTTP3 as a as something that any client that that",
    "start": "1623360",
    "end": "1629200"
  },
  {
    "text": "understands how to do websockets could could use for an exec I know that's a node API but um as an example Oh yeah Um",
    "start": "1629200",
    "end": "1637360"
  },
  {
    "text": "we did recently and I didn't list it Um we did recently do work to move away um",
    "start": "1637360",
    "end": "1643200"
  },
  {
    "text": "so we have moved over to um a standard a standard websockets um and we're using",
    "start": "1643200",
    "end": "1649039"
  },
  {
    "text": "the I think the gorilla library for that So there is a cap for that Um I believe all the code merged this release Um so",
    "start": "1649039",
    "end": "1654320"
  },
  {
    "text": "go check that out and and see if that handles",
    "start": "1654320",
    "end": "1658720"
  },
  {
    "text": "it All right one more and I think yeah there's one back there",
    "start": "1660279",
    "end": "1665880"
  },
  {
    "text": "Um I had a task recently to introduce a new API field that needs to be sync with",
    "start": "1665880",
    "end": "1672320"
  },
  {
    "text": "already built in the in the API So what is the approach for uh read requests",
    "start": "1672320",
    "end": "1677720"
  },
  {
    "text": "to default this new fields because of the defaulting and validation they are considered only for write requests",
    "start": "1677720",
    "end": "1686080"
  },
  {
    "text": "So are you asking to add a new field to the standard APIs not the standard API but to uh API server extension in our",
    "start": "1686080",
    "end": "1694320"
  },
  {
    "text": "case Um yeah so um you can add declarative defaulting today Um we just",
    "start": "1694320",
    "end": "1700559"
  },
  {
    "text": "merged declarative validation um in 131 and we've only added a couple",
    "start": "1700559",
    "end": "1706640"
  },
  {
    "text": "validators so far So it's a little too early for general purpose use in aggregated API servers Um but it's just",
    "start": "1706640",
    "end": "1714000"
  },
  {
    "text": "another generator It's validation gen right next to defaulter gen and default gen Um so as we build that out and add",
    "start": "1714000",
    "end": "1721039"
  },
  {
    "text": "more support um that'll very quickly become available So over the next couple of releases keep a very close eye on",
    "start": "1721039",
    "end": "1726159"
  },
  {
    "text": "that and if there's specific validators you need please reach out Yeah it was more or less like uh we already had a",
    "start": "1726159",
    "end": "1732720"
  },
  {
    "text": "field Now we introduced like for the service IP and IPS that was introduced a couple of years ago and when you",
    "start": "1732720",
    "end": "1739440"
  },
  {
    "text": "introduced this new field you have to keep it in sync with the already existing field for compatibility reasons",
    "start": "1739440",
    "end": "1748640"
  },
  {
    "text": "I'm sorry I'm not sure I totally followed that um you know in the service API right",
    "start": "1748640",
    "end": "1756240"
  },
  {
    "text": "yeah spec IP was a singular IP and when the IPv6 support was added then this",
    "start": "1756240",
    "end": "1762720"
  },
  {
    "text": "turned into array not a single value right and both this field had to be keep",
    "start": "1762720",
    "end": "1767919"
  },
  {
    "text": "in sync So when you send out a create or",
    "start": "1767919",
    "end": "1772960"
  },
  {
    "text": "update request to the API server it can uh sync them with the defaulting But if",
    "start": "1772960",
    "end": "1778720"
  },
  {
    "text": "you just try to read uh a service then basically there is I think no defaulting",
    "start": "1778720",
    "end": "1785120"
  },
  {
    "text": "and uh you as a client you might not receive uh the new API resource with",
    "start": "1785120",
    "end": "1790880"
  },
  {
    "text": "both fields set Yeah So is is your question um are we",
    "start": "1790880",
    "end": "1795919"
  },
  {
    "text": "working on that or yeah if there is some approach to um we should talk to the",
    "start": "1795919",
    "end": "1801919"
  },
  {
    "text": "experts on that I haven't touched that field in a long time Um yeah so bring bring up an issue or or drop something",
    "start": "1801919",
    "end": "1808080"
  },
  {
    "text": "in Slack Um there's a couple experts that we could talk to about that one in particular Yeah Thank you All right we're at time Thank you so much everyone",
    "start": "1808080",
    "end": "1817000"
  }
]