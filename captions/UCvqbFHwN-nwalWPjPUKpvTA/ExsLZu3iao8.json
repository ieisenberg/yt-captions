[
  {
    "text": "so yeah today I'll be talking about measuring your applications in production my name is Jason Keene",
    "start": "30",
    "end": "8400"
  },
  {
    "text": "I work at pivotal software I work on observability problems for kubernetes",
    "start": "8400",
    "end": "14190"
  },
  {
    "text": "and claw foundry I've worked on confounds you for about a year and a half and it's been about a year and a",
    "start": "14190",
    "end": "20520"
  },
  {
    "text": "half fish for kubernetes so today I wanted to talk about measuring your",
    "start": "20520",
    "end": "25619"
  },
  {
    "text": "applications in the production environments that they're running in and the reason I wanted to talk to you about",
    "start": "25619",
    "end": "31320"
  },
  {
    "text": "this is I feel it's invaluable from a development perspective to be able to do this oftentimes I feel the developers",
    "start": "31320",
    "end": "38850"
  },
  {
    "text": "don't have the tools to be able to ask the questions they want to ask so I feel",
    "start": "38850",
    "end": "45289"
  },
  {
    "text": "this is something that can provide a lot of value to developers so why would we",
    "start": "45289",
    "end": "52829"
  },
  {
    "text": "bother measuring a production there's a bunch of different reasons why you might want to make direct observations of your",
    "start": "52829",
    "end": "58440"
  },
  {
    "text": "production environment what you know one of them is well you get to see your software under actual load so you get to",
    "start": "58440",
    "end": "66360"
  },
  {
    "text": "see its failures when it's under load you could see faults as they occur you",
    "start": "66360",
    "end": "71640"
  },
  {
    "text": "can discover patterns of usage of your users which can inform you know future features but primarily you really want",
    "start": "71640",
    "end": "79500"
  },
  {
    "text": "to be able to make measurements in production to be able to debug this your system when problems occur sometimes",
    "start": "79500",
    "end": "87930"
  },
  {
    "text": "reproducing the problem in your production environments reproducing that in an artificial environment is too",
    "start": "87930",
    "end": "94079"
  },
  {
    "text": "time-consuming or too difficult and and sometimes simply like being able to",
    "start": "94079",
    "end": "99900"
  },
  {
    "text": "reproduce a problem it's not something you know how to do so you have to collect data from your production environment just to seed analysis in a",
    "start": "99900",
    "end": "106560"
  },
  {
    "text": "different environment ultimately production is reality everything else is",
    "start": "106560",
    "end": "112380"
  },
  {
    "text": "at best of proximity so we need to be able to measure in production to be able",
    "start": "112380",
    "end": "117840"
  },
  {
    "text": "to debug problems as they're occurring but more importantly I feel",
    "start": "117840",
    "end": "123259"
  },
  {
    "text": "understanding the character of your workloads is critical to their successful operations so being able to",
    "start": "123259",
    "end": "128489"
  },
  {
    "text": "make measurements in production allows you to have an understanding of your workloads",
    "start": "128489",
    "end": "133910"
  },
  {
    "text": "this was discussed by Brian Cantrell a couple years ago at is 2017 go to talk",
    "start": "133910",
    "end": "139590"
  },
  {
    "text": "he said debugging is not merely the act of making bugs go away it is the act of",
    "start": "139590",
    "end": "144780"
  },
  {
    "text": "understanding and gaining new knowledge about the way the system works I think there's a lot of truth to that so we",
    "start": "144780",
    "end": "151770"
  },
  {
    "text": "want to be able to solve problems and we want to be able to understand our systems so today's talk is put into",
    "start": "151770",
    "end": "158190"
  },
  {
    "text": "three different sections first I'm gonna go over a method that I like to keep in mind when I'm debugging issues I think",
    "start": "158190",
    "end": "165030"
  },
  {
    "text": "it's incredibly viable so I wanted to share that with you today next we're gonna go into some tools there's been",
    "start": "165030",
    "end": "170340"
  },
  {
    "text": "some recent developments in the past few years in the Linux kernel and some user space tools that have recently been",
    "start": "170340",
    "end": "175680"
  },
  {
    "text": "released that kind of want to get the word out about so we're gonna discuss some tools and then I'll show you how to",
    "start": "175680",
    "end": "181940"
  },
  {
    "text": "put these tools in this method into practice and applying it to a kubernetes cluster so let's start off with the",
    "start": "181940",
    "end": "189570"
  },
  {
    "text": "method so the method I like to call ask questions get answers so you start off",
    "start": "189570",
    "end": "196290"
  },
  {
    "text": "say you have a problem in front of you start off with a space and possible cause it just visualized as an area and",
    "start": "196290",
    "end": "201620"
  },
  {
    "text": "the function of a question is to put pressure on the area to divide it into different sections so in this case our",
    "start": "201620",
    "end": "207510"
  },
  {
    "text": "question if it's true the results in the category a will remain if it's false the",
    "start": "207510",
    "end": "214790"
  },
  {
    "text": "categories and category B will remain and then oftentimes asking a question",
    "start": "214790",
    "end": "220880"
  },
  {
    "text": "might not differentiate between certain possibilities so you might have an area in between where there's overlap where",
    "start": "220880",
    "end": "226440"
  },
  {
    "text": "you either result of the question that area will remain so an answer the",
    "start": "226440",
    "end": "234480"
  },
  {
    "text": "function of the answer is to cut off and eliminate sections of the possibility space and that reduces your possibility",
    "start": "234480",
    "end": "241140"
  },
  {
    "text": "space by that amount and so you iterate you ask another question get another answer eliminate",
    "start": "241140",
    "end": "247290"
  },
  {
    "text": "part of the possibility space do that multiple times until your possibility space is extremely small and you've",
    "start": "247290",
    "end": "253320"
  },
  {
    "text": "narrowed in on the cause of your problem so I've used this technique a lot in my career and I find it to be very valuable",
    "start": "253320",
    "end": "261380"
  },
  {
    "text": "when you're using this method it's critical that you are confident in your answers and I'll demonstrate",
    "start": "261380",
    "end": "267050"
  },
  {
    "text": "so say you ask a question and you get your answer back that you're 85%",
    "start": "267050",
    "end": "272490"
  },
  {
    "text": "confident in the result so you might say well eighty-five percent confidence that's that's kind of high but if you",
    "start": "272490",
    "end": "279180"
  },
  {
    "text": "applied this method you're it's an iterative method so as you iterate if you're only 85% confident and your",
    "start": "279180",
    "end": "285540"
  },
  {
    "text": "answers after five iterations you're down to forty four percent confidence and your overall analysis so what makes",
    "start": "285540",
    "end": "293250"
  },
  {
    "text": "this even worse is after that even if you're a hundred percent confident your later questions about the answers that you get to your later questions",
    "start": "293250",
    "end": "300090"
  },
  {
    "text": "you can't regain that uncertainty that uncertainty has crept into your analysis and you'll never get it back so you",
    "start": "300090",
    "end": "305940"
  },
  {
    "text": "really want to be extremely confident in the answers that you get to the questions that you ask so just kind of",
    "start": "305940",
    "end": "313260"
  },
  {
    "text": "visualize that here so you might think the problem is in that narrow space that you narrowed in on but in actuality you",
    "start": "313260",
    "end": "319380"
  },
  {
    "text": "eliminated and a previous step so that's what that looks like in practice and I can speak from experience it's extremely",
    "start": "319380",
    "end": "326190"
  },
  {
    "text": "frustrating when that happens so just asking a question doesn't help if you",
    "start": "326190",
    "end": "332040"
  },
  {
    "text": "can't get an answer to your question not having the right tools constrains the",
    "start": "332040",
    "end": "337050"
  },
  {
    "text": "space of possible questions that we can ask so I like to use the streetlight effect",
    "start": "337050",
    "end": "342380"
  },
  {
    "text": "analogy here so if you're not familiar with a streetlight effect there's a",
    "start": "342380",
    "end": "347460"
  },
  {
    "text": "story a gentleman is looking for his wallet he lost his wallet and a police",
    "start": "347460",
    "end": "352560"
  },
  {
    "text": "officer walks up to him and says well is the wallet under the streetlight where you're looking and he says no I actually",
    "start": "352560",
    "end": "359190"
  },
  {
    "text": "lost it in the park but this is where the light is so that's where I'm looking so you might have experienced this",
    "start": "359190",
    "end": "365400"
  },
  {
    "text": "effect and using tools and trying to debug problems yourself where your tool",
    "start": "365400",
    "end": "370680"
  },
  {
    "text": "kind of just illuminates a small area of possibilities and so that's where you",
    "start": "370680",
    "end": "375720"
  },
  {
    "text": "look but your problem isn't the problem isn't actually where you're looking so what we want is a flashlight where we",
    "start": "375720",
    "end": "381810"
  },
  {
    "text": "can walk around wherever we want and be able to shine the light on whatever we want to be able to find the wallet in",
    "start": "381810",
    "end": "387510"
  },
  {
    "text": "the park not in under the street lamp so we need tools that can give us answers",
    "start": "387510",
    "end": "392940"
  },
  {
    "text": "to any arbitrary question we want to ask so yeah we're going to talk about some of those tools now to start off with",
    "start": "392940",
    "end": "400470"
  },
  {
    "text": "I kind of just want to frame the discussion around the different types of instrumentation so I like to view these",
    "start": "400470",
    "end": "405900"
  },
  {
    "text": "as a hierarchy at the top of the hierarchy is static always on instrumentation these are things like",
    "start": "405900",
    "end": "411600"
  },
  {
    "text": "logs metrics distributed tracing the three pillars so to speak of observability there's an incredible",
    "start": "411600",
    "end": "418710"
  },
  {
    "text": "amount of value that you can get out of these but the problem of these is that you're paying the performance penalty at",
    "start": "418710",
    "end": "424230"
  },
  {
    "text": "all the times so you can't cover every aspect of your system using these techniques the performance penalty will",
    "start": "424230",
    "end": "431700"
  },
  {
    "text": "be too high so incredibly useful there should be the first place that you look to start debugging problem but they",
    "start": "431700",
    "end": "438030"
  },
  {
    "text": "don't give you every you know every bit of coverage that you would need after",
    "start": "438030",
    "end": "443400"
  },
  {
    "text": "that is static instrumentation that requires activation so these are technologies like USD T and trace points",
    "start": "443400",
    "end": "450440"
  },
  {
    "text": "these are things that a developer would instrument their code with in advance and when that codes running in",
    "start": "450440",
    "end": "457080"
  },
  {
    "text": "production you're not paying any performance penalty for that instrumentation so you can kind of add more of this into your program and then",
    "start": "457080",
    "end": "464000"
  },
  {
    "text": "when someone wants to actually instrument your program they can activate that instrumentation so that",
    "start": "464000",
    "end": "470490"
  },
  {
    "text": "gives you a little bit more coverage and then finally the last layer is dynamic instrumentation techniques so these",
    "start": "470490",
    "end": "475800"
  },
  {
    "text": "allow you to cover the broadest amounts of your system so you can use",
    "start": "475800",
    "end": "481410"
  },
  {
    "text": "technologies like P Trace u probes and K probes to achieve a dynamic instrumentation so we want tools that",
    "start": "481410",
    "end": "489600"
  },
  {
    "text": "can answer these arbitrary questions about our software so we want to be able to intercept any point of execution",
    "start": "489600",
    "end": "494720"
  },
  {
    "text": "without restarting the process we want to be able to read from memory and registers collect data across multiple",
    "start": "494720",
    "end": "501240"
  },
  {
    "text": "processes and the kernel ideally with low overhead and to do it all safely so",
    "start": "501240",
    "end": "509820"
  },
  {
    "text": "that's a tall order let's start with you loggers I really like debuggers I think they're awesome",
    "start": "509820",
    "end": "515930"
  },
  {
    "text": "this is actual video of someone starting gdb",
    "start": "515930",
    "end": "521450"
  },
  {
    "text": "so yeah debuggers used a system called called P trace process trace short for cross trace it allows a trace or program",
    "start": "523350",
    "end": "531090"
  },
  {
    "text": "to control the execution of a Tracey so I imagine most folks to promote with you",
    "start": "531090",
    "end": "536370"
  },
  {
    "text": "buggers debuggers can intercept Siskel's signals that the Tracey is receiving can",
    "start": "536370",
    "end": "542760"
  },
  {
    "text": "read and write to the Tracey's register memory including its text section you can single step through the Tracey can",
    "start": "542760",
    "end": "549360"
  },
  {
    "text": "write breakpoints it has a lot of capabilities one of the problems with P trace though is that when the tracer is",
    "start": "549360",
    "end": "555450"
  },
  {
    "text": "running typically the Tracey's execution is suspended and most times that means all threads in that process are",
    "start": "555450",
    "end": "561660"
  },
  {
    "text": "suspended so what does that look like so in this case we have a Tracey on the right and the trace",
    "start": "561660",
    "end": "567510"
  },
  {
    "text": "on the left is a tracer just you just think debugger so the Tracey there's a",
    "start": "567510",
    "end": "573030"
  },
  {
    "text": "breakpoint set in the Tracey so that once that trap is hit the Tracey is suspended the kernel takes over",
    "start": "573030",
    "end": "578280"
  },
  {
    "text": "execution and then sees that the program is being traced well hand control over to the trace air",
    "start": "578280",
    "end": "584070"
  },
  {
    "text": "program then sometime later maybe seconds minutes hours later the tracer",
    "start": "584070",
    "end": "589740"
  },
  {
    "text": "will yield control back to the kernel via Cisco and then the kernel will then resume the Tracey",
    "start": "589740",
    "end": "595640"
  },
  {
    "text": "so naturally the big problem with this is suspended execution when you're",
    "start": "595640",
    "end": "601140"
  },
  {
    "text": "suspended your program is doing no work no useful work if the tracer is slow to yield back",
    "start": "601140",
    "end": "606870"
  },
  {
    "text": "then this old just your performance so that's not suitable for production tracer is usually blocked on",
    "start": "606870",
    "end": "612930"
  },
  {
    "text": "user input to make matters worse so this is kind of putting the user in the loop so users reading from a terminal and",
    "start": "612930",
    "end": "618690"
  },
  {
    "text": "typing into the keyboard and so having the user in the loop adds to just a even",
    "start": "618690",
    "end": "624540"
  },
  {
    "text": "more latency so I actually used a technique that we'll discuss in a moment",
    "start": "624540",
    "end": "630240"
  },
  {
    "text": "here where I replace the user with a controller process so that eliminated",
    "start": "630240",
    "end": "635970"
  },
  {
    "text": "some of the you know slowness from me typing on the keyboard so actually use",
    "start": "635970",
    "end": "641850"
  },
  {
    "text": "that to debug a problem that I had in a logging agent so I mentioned I work in",
    "start": "641850",
    "end": "647070"
  },
  {
    "text": "observability we have an agent that runs in all of our systems collecting logs from the system",
    "start": "647070",
    "end": "653150"
  },
  {
    "text": "and forwarding them out via G RPC so looks something like this so",
    "start": "653150",
    "end": "658160"
  },
  {
    "text": "periodically the agent would just stop sending any data for a matter of minutes and then all of a sudden it would just",
    "start": "658160",
    "end": "664550"
  },
  {
    "text": "start resuming sending data so this is really perplexing to us we had the these",
    "start": "664550",
    "end": "669920"
  },
  {
    "text": "like reports from people running our software and we didn't really have any",
    "start": "669920",
    "end": "674990"
  },
  {
    "text": "visibility into like why this problem is occurring so just a little bit",
    "start": "674990",
    "end": "680180"
  },
  {
    "text": "background on this problem so the agents uses a ring buffer internally to keep",
    "start": "680180",
    "end": "686000"
  },
  {
    "text": "track of messages and just a little bit of background about ring buffers you typically have a read and write in to",
    "start": "686000",
    "end": "693230"
  },
  {
    "text": "see in a ring buffer and the write NC will always be ahead of the read in de see the read and to see you will not",
    "start": "693230",
    "end": "699800"
  },
  {
    "text": "advance past the right end to see it will block until new data is available so just just a little bit of background",
    "start": "699800",
    "end": "706100"
  },
  {
    "text": "they'll be relevant in a moment here so the question that I want to ask is when",
    "start": "706100",
    "end": "711860"
  },
  {
    "text": "the agent is in this state when it's not sending any data what is the state of these read and write indices this is",
    "start": "711860",
    "end": "719060"
  },
  {
    "text": "just kind of a mock program that simulates the bug so the bug that we saw",
    "start": "719060",
    "end": "724550"
  },
  {
    "text": "on the logging agent so I just create a ring buffer and that's spin up a thread of execution to do writes and then",
    "start": "724550",
    "end": "730220"
  },
  {
    "text": "another thread to do reads so in this case I'm going to instruct del which is",
    "start": "730220",
    "end": "735950"
  },
  {
    "text": "the go debugger to attach to that process I then capture the standard in and standard out of the debugger I tell",
    "start": "735950",
    "end": "742370"
  },
  {
    "text": "the debugger to start and then I'm gonna bugger attaches it typically will suspend the program that's tracing so I",
    "start": "742370",
    "end": "749300"
  },
  {
    "text": "just tell the did bugger to immediately resume the tracy's so that there's no performance overhead with it blocking",
    "start": "749300",
    "end": "755450"
  },
  {
    "text": "and then spin up a go routine to read information out of the debugger and then",
    "start": "755450",
    "end": "760460"
  },
  {
    "text": "I go into infinite loop just sampling data periodically so on the left hand",
    "start": "760460",
    "end": "767210"
  },
  {
    "text": "side you can see what that sampling the inner body that loop looks like so we just go to sleep for a second and then",
    "start": "767210",
    "end": "773390"
  },
  {
    "text": "we send a signal to the debugger that wakes the debugger up suspends the process and then we if it's time to exit",
    "start": "773390",
    "end": "780200"
  },
  {
    "text": "we just tell the debugger to clean up and if it's not time to exit then we tell it to sample some data and the commands that",
    "start": "780200",
    "end": "788439"
  },
  {
    "text": "were sending the debugger on the right hand side here so it's a sample data we just set a breakpoint at the function",
    "start": "788439",
    "end": "793749"
  },
  {
    "text": "that were interested in tracing we then continue to hit that break point and then we print out a delta between the",
    "start": "793749",
    "end": "800199"
  },
  {
    "text": "right indicee and the redundancy and then we clear our breakpoints and continue so that's a you know pretty",
    "start": "800199",
    "end": "806290"
  },
  {
    "text": "much all there is to this so I'm gonna run that Tracy program and a left and you can see we get about 4 million",
    "start": "806290",
    "end": "813189"
  },
  {
    "text": "writes and seven ish million reads per second and then I add my instrumentation",
    "start": "813189",
    "end": "818379"
  },
  {
    "text": "and you can see there's no performance overhead and doing this there is but it's a very minor can't really see and",
    "start": "818379",
    "end": "825609"
  },
  {
    "text": "you might have noticed here we actually got a data point out of our instrumentation that was negative so",
    "start": "825609",
    "end": "830889"
  },
  {
    "text": "this demonstrates that the ring buffer is an invalid state so that kind of clued us in on where the problem was in",
    "start": "830889",
    "end": "838089"
  },
  {
    "text": "the ring buffer so this is great we can sample his data without we have very low",
    "start": "838089",
    "end": "844989"
  },
  {
    "text": "performance overhead however this only works for low frequency events so sampling at a low frequency if I use the",
    "start": "844989",
    "end": "852489"
  },
  {
    "text": "same technique to instrument every single read and write operation that the ring buffer is doing you can see the",
    "start": "852489",
    "end": "857919"
  },
  {
    "text": "performance overhead of that so same performance as before we then run the trace program and it turns seven million",
    "start": "857919",
    "end": "866110"
  },
  {
    "text": "operations a second into several hundred so this isn't suitable for doing high",
    "start": "866110",
    "end": "872169"
  },
  {
    "text": "frequency sampling so why is that well the controller process that I have",
    "start": "872169",
    "end": "877929"
  },
  {
    "text": "driving the debugger that has a lot of i/o to share data between the debugger and the controller in addition there's a",
    "start": "877929",
    "end": "885429"
  },
  {
    "text": "lot of overhead and jumping in out of the kernel there's context switches whenever you jump in out of the kernel",
    "start": "885429",
    "end": "890470"
  },
  {
    "text": "so that contributes to the overhead so is there a better way to do this what if",
    "start": "890470",
    "end": "896709"
  },
  {
    "text": "we could move all this user land code doing i/o and doing context switches there's no rule necessity for that to",
    "start": "896709",
    "end": "902949"
  },
  {
    "text": "live in user land what if we could just move all that into the kernel itself then you have a traci just hitting trap",
    "start": "902949",
    "end": "908739"
  },
  {
    "text": "instructions jumping into the kernel the kernel does some work to instrument the code and then jumps back into the tray see that would be ideal",
    "start": "908739",
    "end": "915839"
  },
  {
    "text": "so this is actually something that a technology called BPF gonna accomplish for us so what is BPF",
    "start": "915839",
    "end": "922150"
  },
  {
    "text": "just real briefly BPF is a custom instruction set that you can write in and build programs that compile to it",
    "start": "922150",
    "end": "930360"
  },
  {
    "text": "and it allows you to inject programs into the kernel the kernel takes its BPF",
    "start": "930360",
    "end": "936100"
  },
  {
    "text": "bytecode it validates it make sure it's safe to run and then it will compile it to make sure it runs fast on your native",
    "start": "936100",
    "end": "942070"
  },
  {
    "text": "architecture one of the things you can do with the BPI programs is you can attach various events sources to it so",
    "start": "942070",
    "end": "947740"
  },
  {
    "text": "we'll see that later BPF was originally created for packet filtering in kernel",
    "start": "947740",
    "end": "954400"
  },
  {
    "text": "packet filtering so that's where it gets its name Berkeley packet filter and if you ever use TCP dump the expression",
    "start": "954400",
    "end": "960250"
  },
  {
    "text": "that you give TCP dump actually compiles into BPF bytecode so you're running a BPI program whenever you use TCP Dom so",
    "start": "960250",
    "end": "968650"
  },
  {
    "text": "what can you BPI program do well you do a lot of things that you would expect out of a normal instruction set one of",
    "start": "968650",
    "end": "974560"
  },
  {
    "text": "the things one of limitations is around memory access you don't have full access to the kernel memory one of the",
    "start": "974560",
    "end": "981580"
  },
  {
    "text": "capabilities that BPF that's really important is these helper functions so the kernel exposes of various amount of functions that can do really useful",
    "start": "981580",
    "end": "988750"
  },
  {
    "text": "things that are useful for tracing so reading stacks from kernel or user land aggregating data and in kernel data",
    "start": "988750",
    "end": "996340"
  },
  {
    "text": "structures manipulating packets there's a whole list of capabilities that you can call into to do useful things",
    "start": "996340",
    "end": "1002960"
  },
  {
    "text": "there's hundreds of them so I didn't list them all here but there's a lot of useful functionality there so what can",
    "start": "1002960",
    "end": "1009150"
  },
  {
    "text": "be PF programs not to so your program must have finite execution that's a big big one like you can't go into infinite",
    "start": "1009150",
    "end": "1015750"
  },
  {
    "text": "loops I can't go into loops at all because of the probability that you might go into infinite loop so you can't",
    "start": "1015750",
    "end": "1022350"
  },
  {
    "text": "do anything they can hang the kernel you can't acquire locks that could potentially hang the kernel like I",
    "start": "1022350",
    "end": "1028110"
  },
  {
    "text": "mentioned before access to memory is a little bit restricted so yeah there's some restrictions on what you can do it",
    "start": "1028110",
    "end": "1034079"
  },
  {
    "text": "do BPF program just important to keep in mind so here's the kind of example of",
    "start": "1034080",
    "end": "1039150"
  },
  {
    "text": "what we want to achieve with our new program so we have our traci and that we have a little user space program called",
    "start": "1039150",
    "end": "1045900"
  },
  {
    "text": "the tracer that it's doing a little tiny bit of work and user land but not nearly as much as previously so what happens",
    "start": "1045900",
    "end": "1052740"
  },
  {
    "text": "this situation well the tracer is going to compile our BPF program for us it's",
    "start": "1052740",
    "end": "1058380"
  },
  {
    "text": "then going to hand that off to the colonel the colonel is going to verify and compile it's the BPI program is then",
    "start": "1058380",
    "end": "1064370"
  },
  {
    "text": "going to be attached to event sources so the tracer will tell the colonel hey this program I just gave you attach",
    "start": "1064370",
    "end": "1070050"
  },
  {
    "text": "these event sources to it when those events occur so for instance the Tracie hits a trap instruction then the BPA",
    "start": "1070050",
    "end": "1077850"
  },
  {
    "text": "program will get called and it'll handle the event and then the program can officer optionally write to some",
    "start": "1077850",
    "end": "1085020"
  },
  {
    "text": "internal memory that then gets shared with the tracer so I mentioned the event",
    "start": "1085020",
    "end": "1090780"
  },
  {
    "text": "sources the ones that we're going to be discussing today are you probes primarily there's also something called",
    "start": "1090780",
    "end": "1096330"
  },
  {
    "text": "USCT probes these are statically defined probes on Linux they're actually implemented using new probes so it's",
    "start": "1096330",
    "end": "1101730"
  },
  {
    "text": "kind of using the same technology there but yeah there's other event sources some kernel dynamic and static",
    "start": "1101730",
    "end": "1108710"
  },
  {
    "text": "instrumentation networking stuff so yeah there's various events sources you can touch your program to do so yeah you",
    "start": "1108710",
    "end": "1116640"
  },
  {
    "text": "probes is really awesome it's like one of my favorite technologies it allows you to trace any instruction and use",
    "start": "1116640",
    "end": "1122760"
  },
  {
    "text": "your land with a lot less overhead than Petrie's so here's an example of how you probes works so you have your program",
    "start": "1122760",
    "end": "1129330"
  },
  {
    "text": "down at the bottom here each one of these blue boxes is a instruction so a variable with instructions something",
    "start": "1129330",
    "end": "1135150"
  },
  {
    "text": "like x86 64 so in the middle here we want to instrument the instruction in",
    "start": "1135150",
    "end": "1141059"
  },
  {
    "text": "the middle so what the kernel will do will copy that instruction into a buffer and kernel memory called the single step",
    "start": "1141059",
    "end": "1147540"
  },
  {
    "text": "out of line buffer it will then write a trap instruction over on over on top of that instruction and then when that trap",
    "start": "1147540",
    "end": "1155610"
  },
  {
    "text": "hits the kernel will take over run the handler that we register with it after",
    "start": "1155610",
    "end": "1160740"
  },
  {
    "text": "the handler PPF code is done running then it'll single-step the one instruction out of that buffer and then",
    "start": "1160740",
    "end": "1166980"
  },
  {
    "text": "after that's done you'll then jump into the programs text just immediately after",
    "start": "1166980",
    "end": "1173280"
  },
  {
    "text": "that instruction so we were able to add this instrumentation without our program",
    "start": "1173280",
    "end": "1178470"
  },
  {
    "text": "knowing every instruction that our program wanted to execute was able to execute so that's you probes USCT I",
    "start": "1178470",
    "end": "1186090"
  },
  {
    "text": "mentioned for their static trace points that are defined by the developer at you know the defined in source code I like to think",
    "start": "1186090",
    "end": "1194520"
  },
  {
    "text": "of them as kind of like a tracing API you're exposing these kind of landmarks that folks can then instrument later in",
    "start": "1194520",
    "end": "1202080"
  },
  {
    "text": "case they are interested in debugging problems with your software so they're really useful you can report arbitrary",
    "start": "1202080",
    "end": "1209010"
  },
  {
    "text": "data when the USCT probe fires so they're kind of like structured login you can touch whatever data you want to them but you're not paying the",
    "start": "1209010",
    "end": "1215549"
  },
  {
    "text": "performance costs that you would normally pay with logging that's enabled you only pay the pro ins costs when you",
    "start": "1215549",
    "end": "1221429"
  },
  {
    "text": "enable these probes there's some probes that are built into language runtimes so python knowed Ruby Java they all have",
    "start": "1221429",
    "end": "1228299"
  },
  {
    "text": "USC probes that you can either compile in or enable and those ECT probes will allow you to instrument functions and",
    "start": "1228299",
    "end": "1235380"
  },
  {
    "text": "methods that are being called in those runtimes so you can get access to language native functions so how do we",
    "start": "1235380",
    "end": "1244380"
  },
  {
    "text": "write these BPF programs well there's two technologies that I've used to write these programs the first is BCC BCC has",
    "start": "1244380",
    "end": "1251789"
  },
  {
    "text": "been around for a while and it's really mature has a lot of capability but it has a little bit of a",
    "start": "1251789",
    "end": "1257220"
  },
  {
    "text": "failure around complexity and writing these programs BPF trace on the other hands is very new is released a few",
    "start": "1257220",
    "end": "1264360"
  },
  {
    "text": "months ago it exposes like a really nice language everyone at eclis simplifies writing",
    "start": "1264360",
    "end": "1271380"
  },
  {
    "text": "these programs but it doesn't have all the capabilities that bcc has so I think currently there's a place for both of",
    "start": "1271380",
    "end": "1277140"
  },
  {
    "text": "these tools so bcc is that BPF compiler collection so you write your BPI program",
    "start": "1277140",
    "end": "1283799"
  },
  {
    "text": "in a version of C and BCC will compile that for you and hand it off to the",
    "start": "1283799",
    "end": "1289830"
  },
  {
    "text": "kernel it also assists with you attaching events and interacting with kernel memory it's implemented as a",
    "start": "1289830",
    "end": "1296490"
  },
  {
    "text": "shared library so BCSO there's bindings and Python Lua and third-party go",
    "start": "1296490",
    "end": "1303360"
  },
  {
    "text": "bindings exists so this library has a lot of really good functionality and",
    "start": "1303360",
    "end": "1308730"
  },
  {
    "text": "it's quite mature in addition to the library they ship a bunch of tools along",
    "start": "1308730",
    "end": "1315390"
  },
  {
    "text": "with the library that are incredibly useful I don't have time to go in today but I highly recommend anyone",
    "start": "1315390",
    "end": "1320610"
  },
  {
    "text": "who's interested look at some of these tools they allow you an instrument a good amount of your system and you don't",
    "start": "1320610",
    "end": "1326730"
  },
  {
    "text": "have to write a line of code so some interesting ones are like TCP connect used to be accept all the TCP stuff one",
    "start": "1326730",
    "end": "1334710"
  },
  {
    "text": "that we'll see later is open snoop which just allows you to kind of snoop in on any open file system operations so let's",
    "start": "1334710",
    "end": "1343379"
  },
  {
    "text": "do a u probe demo so we're going to use BCC to instrument some code using u probes so this is the code that we want",
    "start": "1343379",
    "end": "1350309"
  },
  {
    "text": "instrument there's no instrumentation added to this in advance just an infant for loop calling a function f and then",
    "start": "1350309",
    "end": "1356940"
  },
  {
    "text": "that function is just doing a atomic increment on a counter so the BCC code",
    "start": "1356940",
    "end": "1361980"
  },
  {
    "text": "that we had write is is here so up at the top we have a C program that's going to increment a counter in kernel memory",
    "start": "1361980",
    "end": "1367529"
  },
  {
    "text": "and then below we just have some code that kind of wires that up to the main dot F function which is what we're",
    "start": "1367529",
    "end": "1373259"
  },
  {
    "text": "interested in instrumenting we then have accounts which we use to then read",
    "start": "1373259",
    "end": "1378480"
  },
  {
    "text": "kernel memory and display that so this is what that looks like when it runs so",
    "start": "1378480",
    "end": "1384749"
  },
  {
    "text": "we're getting around 125 million operations a second on a single thread and then when we run our instrumentation",
    "start": "1384749",
    "end": "1391289"
  },
  {
    "text": "code you can see that drops to about three hundred and ninety thousand in operations a second so you know it",
    "start": "1391289",
    "end": "1398909"
  },
  {
    "text": "definitely has an overhead you probes are not free well one thing to notice is when you detach from the instrumentation",
    "start": "1398909",
    "end": "1405419"
  },
  {
    "text": "you actually regain all that performance the other thing to keep in mind is this",
    "start": "1405419",
    "end": "1410759"
  },
  {
    "text": "is on a single thread so a lot of workloads I would venture to guess aren't doing more than 10 to 20 thousand",
    "start": "1410759",
    "end": "1417029"
  },
  {
    "text": "operations second on a single thread if you are then that's when you want to consider using something other than you",
    "start": "1417029",
    "end": "1422279"
  },
  {
    "text": "probes maybe some user space instrumentation but if you're doing less",
    "start": "1422279",
    "end": "1428190"
  },
  {
    "text": "than that then you probes as fine to use so that's you probes see a demo with us",
    "start": "1428190",
    "end": "1434159"
  },
  {
    "text": "CT so we have just some go code here that is instrumented using us CT so the",
    "start": "1434159",
    "end": "1441480"
  },
  {
    "text": "main important bits is that the function now is instead of doing a counter it's actually doing some work so reaching out",
    "start": "1441480",
    "end": "1446789"
  },
  {
    "text": "to Google and just doing a random search and then when we enter the function we fire a",
    "start": "1446789",
    "end": "1452200"
  },
  {
    "text": "entry probe and we exits we fire an exit probe so this will allow us to measure",
    "start": "1452200",
    "end": "1457210"
  },
  {
    "text": "the overall latency of communicating with Google so I'm not gonna go in",
    "start": "1457210",
    "end": "1462580"
  },
  {
    "text": "detail of how this works but we basically have just two functions that keep track of the timestamps for when",
    "start": "1462580",
    "end": "1468610"
  },
  {
    "text": "these events occur and correlate them and store them in a histogram that's the BP BCC program the BPF part",
    "start": "1468610",
    "end": "1476590"
  },
  {
    "text": "of it this is the Python part which kind of wires everything together and displays the data that's very similar to",
    "start": "1476590",
    "end": "1482680"
  },
  {
    "text": "what we saw before with you probes when we hit control-c here just displays out the histogram so this is that running so",
    "start": "1482680",
    "end": "1490630"
  },
  {
    "text": "on the left hand side you have all the queries going to Google and then we have our instrumentation running and when I",
    "start": "1490630",
    "end": "1496150"
  },
  {
    "text": "hit control C here you'll be able to see the distribution of latency is for all those requests so yeah that's a kind of",
    "start": "1496150",
    "end": "1503470"
  },
  {
    "text": "an example of using yooper or using USCT to instrument your code in advance so",
    "start": "1503470",
    "end": "1508690"
  },
  {
    "text": "all that was using BCC so what about BPF trace I mentioned that's like the new",
    "start": "1508690",
    "end": "1513820"
  },
  {
    "text": "tool so yeah it dramatically simplifies writing these programs so the counter example with you probes that I shot",
    "start": "1513820",
    "end": "1520360"
  },
  {
    "text": "showed before that is on the right hand side and then on the left hand side you can see the example on BPF trace so a",
    "start": "1520360",
    "end": "1528070"
  },
  {
    "text": "lot simpler here's the example of doing the latency calculation and printing out",
    "start": "1528070",
    "end": "1533590"
  },
  {
    "text": "a histogram just a handful lines of code versus you know 20 30 lines of code so a",
    "start": "1533590",
    "end": "1541360"
  },
  {
    "text": "lot less complexity it's a lot easier to use so to just take a step back when I",
    "start": "1541360",
    "end": "1547330"
  },
  {
    "text": "first started getting into Linux tracing the field was like pretty messy there's",
    "start": "1547330",
    "end": "1553360"
  },
  {
    "text": "a lot of different options a lot of different technologies to look into investigate a lot of different tracers",
    "start": "1553360",
    "end": "1560190"
  },
  {
    "text": "it's kind of intimidating a little bit and I feel what BCC and BPF trace they",
    "start": "1560190",
    "end": "1567940"
  },
  {
    "text": "dramatically simplify the landscape of tools you get all the capabilities you really want with just a few you know a",
    "start": "1567940",
    "end": "1575980"
  },
  {
    "text": "few tools to use so similar to how docker took the kernel technologies of",
    "start": "1575980",
    "end": "1583390"
  },
  {
    "text": "cgroups namespaces in second I feel like BPF Trace has a potential to be the one tool that really exposes and",
    "start": "1583390",
    "end": "1591170"
  },
  {
    "text": "makes generally usable technologies like you probes k probes BPF trace points etc",
    "start": "1591170",
    "end": "1597490"
  },
  {
    "text": "so yeah we kind of got what we wanted we are able to intercept any point of execution without restarting the process",
    "start": "1597490",
    "end": "1604100"
  },
  {
    "text": "with as low overhead as possible we're able to read it from memory and registers collect data across multiple processes and the kernel and we're able",
    "start": "1604100",
    "end": "1611030"
  },
  {
    "text": "to do it all safely so that's great so how do we put this into practice we need",
    "start": "1611030",
    "end": "1617720"
  },
  {
    "text": "to deploy a container to probe our applications so I actually put together a repo that can assist you if you want",
    "start": "1617720",
    "end": "1625700"
  },
  {
    "text": "to play around with it it's called towel just Jason King / towel and github so",
    "start": "1625700",
    "end": "1631669"
  },
  {
    "text": "that composes a composed of a docker image daemon set and a coop CTL plugin",
    "start": "1631669",
    "end": "1637460"
  },
  {
    "text": "so I'll go into what those are used for so first the daemon set some things to",
    "start": "1637460",
    "end": "1644510"
  },
  {
    "text": "note about it is that it runs your this container as root so obviously like you",
    "start": "1644510",
    "end": "1649669"
  },
  {
    "text": "know that comes with a lot of caveats running as root it's price something that you want to make sure you're doing",
    "start": "1649669",
    "end": "1655400"
  },
  {
    "text": "correctly additionally we share the host pit namespace that's just so that we",
    "start": "1655400",
    "end": "1661160"
  },
  {
    "text": "don't have to do pit mapping and enter into other paid namespaces we also",
    "start": "1661160",
    "end": "1666200"
  },
  {
    "text": "volume mount a whole bunch of stuff in order to have easy access to docker and to have access to file system in the",
    "start": "1666200",
    "end": "1671540"
  },
  {
    "text": "containers so this gives you a lot of power but with a great power comes great responsibility and you have to use it",
    "start": "1671540",
    "end": "1677960"
  },
  {
    "text": "wisely this is an example of using the towel so I'm gonna use the first I'm going to get",
    "start": "1677960",
    "end": "1683240"
  },
  {
    "text": "the pods just to show that nginx is running here and then I'm gonna use the cube CTL plugin towel apply just to",
    "start": "1683240",
    "end": "1691370"
  },
  {
    "text": "apply the daemon set so now that's running so each node gets its own own",
    "start": "1691370",
    "end": "1698480"
  },
  {
    "text": "pod and then I use coop CTL Tao exec which we'll check into the towel pod",
    "start": "1698480",
    "end": "1703790"
  },
  {
    "text": "that's co-located with the same pod that I give it so I gave it a label selector there you can then see that it put me in",
    "start": "1703790",
    "end": "1710030"
  },
  {
    "text": "the directory where the container is mounted on the host so that's useful I then use open snoop just a snoop in on",
    "start": "1710030",
    "end": "1717320"
  },
  {
    "text": "what engine is opening and then every time I curl it you can see it's hitting or it's opening",
    "start": "1717320",
    "end": "1722890"
  },
  {
    "text": "up the index.html file see ya and then I",
    "start": "1722890",
    "end": "1728250"
  },
  {
    "text": "used read L feel just to dump out the symbol table for nginx was interested in",
    "start": "1728250",
    "end": "1733530"
  },
  {
    "text": "instrumenting the request response cycle for nginx so yeah I found a symbol here",
    "start": "1733530",
    "end": "1738960"
  },
  {
    "text": "HTTP process requests they look pretty interesting so then I use a VP of trace",
    "start": "1738960",
    "end": "1745270"
  },
  {
    "text": "just to instrument that function just to see if that's being invoked when I curl it so just say you probe and then give",
    "start": "1745270",
    "end": "1752230"
  },
  {
    "text": "it a path to nginx and the symbol that I want instrument then just print out a",
    "start": "1752230",
    "end": "1758289"
  },
  {
    "text": "debug message just to show that I'm instrumenting it so then whenever I curl",
    "start": "1758289",
    "end": "1768909"
  },
  {
    "text": "it you can see the hello come message shows up so that's not terribly useful",
    "start": "1768909",
    "end": "1776280"
  },
  {
    "text": "per se so let's do something a little bit useful so say I want to measure the",
    "start": "1776280",
    "end": "1781780"
  },
  {
    "text": "latency of that one function not the entire request response cycle but I'm interested just in measuring that one",
    "start": "1781780",
    "end": "1786940"
  },
  {
    "text": "function so I have a program here that does that just a few lines of code and then I'm gonna apply some load on to",
    "start": "1786940",
    "end": "1793270"
  },
  {
    "text": "nginx using Siege and then whenever I control C this you can kind of see the distribution of requests that came into",
    "start": "1793270",
    "end": "1799390"
  },
  {
    "text": "that one function not necessarily the entire request response cycle and then",
    "start": "1799390",
    "end": "1805659"
  },
  {
    "text": "afterwards you can just use coop C Hotel des bleed to clean up after yourself you don't want these pods running in a",
    "start": "1805659",
    "end": "1811480"
  },
  {
    "text": "production environment for longer than they need to be cool so like I mentioned",
    "start": "1811480",
    "end": "1817330"
  },
  {
    "text": "this runs this route so make sure to delete the daemon said when it's no longer needed also put the daemon set in",
    "start": "1817330",
    "end": "1823450"
  },
  {
    "text": "a namespace that's restricted so you can use just this role here there's a",
    "start": "1823450",
    "end": "1829030"
  },
  {
    "text": "resource pods exec that allows you to just control who has access to exec on",
    "start": "1829030",
    "end": "1835299"
  },
  {
    "text": "to that pod so that's useful if you want to control that so how'd it get started I have a getting started guide up in the",
    "start": "1835299",
    "end": "1844150"
  },
  {
    "text": "top of the readme of the towel repo so if you're interested in learning more I would recommend looking at that",
    "start": "1844150",
    "end": "1851370"
  },
  {
    "text": "so yeah with these tools we can ask questions that we want to ask get the answers we want and begin to better",
    "start": "1851370",
    "end": "1858240"
  },
  {
    "text": "understand our systems so I got thank you [Applause]",
    "start": "1858240",
    "end": "1868150"
  }
]