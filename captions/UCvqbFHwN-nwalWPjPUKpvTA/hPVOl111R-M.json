[
  {
    "text": "my name is Mark Hahn I'm a Security Solutions architect with qualis if you",
    "start": "0",
    "end": "7020"
  },
  {
    "text": "want to follow along with the slides you can take a look at that URL there in blue at the bottom you can pull that up",
    "start": "7020",
    "end": "12120"
  },
  {
    "text": "on your phone if you want to keep the slides up while we're looking at that it's got speaker notes if you um press",
    "start": "12120",
    "end": "18960"
  },
  {
    "text": "sort of at the bottom of the mrap presentation you'll see speaker notes",
    "start": "18960",
    "end": "24439"
  },
  {
    "text": "and this is hi I'm Ted Hahn I'm his son we are a father-son team and we like to",
    "start": "24439",
    "end": "31439"
  },
  {
    "text": "do these presentations together we're having some fun with it I'm a site reliability engineer a Consulting site",
    "start": "31439",
    "end": "37739"
  },
  {
    "text": "SRE I help a number of small startups do Cloud native write security AWS all of",
    "start": "37739",
    "end": "46500"
  },
  {
    "text": "the you know stuff around kubernetes clusters um whether that be you know the basic",
    "start": "46500",
    "end": "52079"
  },
  {
    "text": "setup to running large distributed apps on them cool",
    "start": "52079",
    "end": "58020"
  },
  {
    "text": "so uh this is our presentation on kubet LS it's a tool that helps you achieve",
    "start": "58020",
    "end": "64378"
  },
  {
    "text": "Mutual TLS by injecting certificates into every pod in 2002 we built a the original version",
    "start": "64379",
    "end": "72240"
  },
  {
    "text": "of this it's a web admissions web hook pod which mutates the Pod",
    "start": "72240",
    "end": "77720"
  },
  {
    "text": "and we've updated it to take advantage of new changes that are coming in uh in",
    "start": "77720",
    "end": "83700"
  },
  {
    "text": "newer versions of kubernetes so in particular there's a feature called",
    "start": "83700",
    "end": "89060"
  },
  {
    "text": "cluster trust bundles that allows you to set the the scope of trust for for uh",
    "start": "89060",
    "end": "95040"
  },
  {
    "text": "cluster so um let's start off with what is a trust bundle um you know I imagine some of you",
    "start": "95040",
    "end": "102119"
  },
  {
    "text": "have been to the various spiffy talks um so you probably have some idea but at",
    "start": "102119",
    "end": "108119"
  },
  {
    "text": "the same time I don't think any of them defined trust bundle particularly well um a trust bundle is",
    "start": "108119",
    "end": "114840"
  },
  {
    "text": "at its most simple a trust bundle is a bunch of CAS um you probably already use a trust",
    "start": "114840",
    "end": "120659"
  },
  {
    "text": "bundle that is you know your browser's web CA store um that's a trust bundle but that is a",
    "start": "120659",
    "end": "127740"
  },
  {
    "text": "very broadly scoped trust bundle um we want much smaller scope trust",
    "start": "127740",
    "end": "133020"
  },
  {
    "text": "bundles um typically we want trust bundles per organization um or even two or three for your",
    "start": "133020",
    "end": "138959"
  },
  {
    "text": "organization um so this is yeah so this is what uh",
    "start": "138959",
    "end": "145680"
  },
  {
    "text": "essentially you know you're familiar with this this is how web certificates work this is how",
    "start": "145680",
    "end": "151800"
  },
  {
    "text": "um https TLS certificates work um so at the bottom there there is a",
    "start": "151800",
    "end": "156840"
  },
  {
    "text": "workload certificate that workload is probably a web server um and that web server is signed by some",
    "start": "156840",
    "end": "163440"
  },
  {
    "text": "intermediate cert that then in in that certificate that you get back from your",
    "start": "163440",
    "end": "169620"
  },
  {
    "text": "your signing Authority typically contains both your workload cert and then the intermediate search the chain",
    "start": "169620",
    "end": "175319"
  },
  {
    "text": "up to uh to a CA and then at the top level there is that root certificate on",
    "start": "175319",
    "end": "181800"
  },
  {
    "text": "most systems that you're running your phones your your laptops your Linux servers that are deployed in your in",
    "start": "181800",
    "end": "188220"
  },
  {
    "text": "your Cloud architecture and on your clusters that root CA contains about 160 different Cas",
    "start": "188220",
    "end": "194700"
  },
  {
    "text": "um some of which you know some of which are just well next slide oh no",
    "start": "194700",
    "end": "199860"
  },
  {
    "text": "um so some of which you know and some of which are you know the Peruvian Central Authority go ahead",
    "start": "199860",
    "end": "206519"
  },
  {
    "text": "um so what what do trust bundles allow you to do",
    "start": "206519",
    "end": "211620"
  },
  {
    "text": "um so trust bundles you know allow you to verify that",
    "start": "211620",
    "end": "216780"
  },
  {
    "text": "somebody is saying something right um web certificates contain contain claims typically Sans",
    "start": "216780",
    "end": "224879"
  },
  {
    "text": "um and web certificates you know verify that the trust bundle has said these",
    "start": "224879",
    "end": "230280"
  },
  {
    "text": "things um so what trust bundles will allow you to do is to make the make well they'll",
    "start": "230280",
    "end": "239159"
  },
  {
    "text": "make your Docker images smaller and they'll allow you to much more rapidly update uh",
    "start": "239159",
    "end": "245340"
  },
  {
    "text": "trust bundles such as the web root of trust currently you build the web root of trust into the very base most layer",
    "start": "245340",
    "end": "252599"
  },
  {
    "text": "of your Docker image um so you've got all of those things and they're actually you know sometimes even",
    "start": "252599",
    "end": "258660"
  },
  {
    "text": "the majority of a Docker image the Google distro list image has just four things in it of which the trust bundle",
    "start": "258660",
    "end": "265919"
  },
  {
    "text": "is the the largest by far that's not true for most Docker images but you know that is that is one of the base most",
    "start": "265919",
    "end": "273060"
  },
  {
    "text": "layers but sometimes that trust bundle changes right um just a few months ago trust core was",
    "start": "273060",
    "end": "279240"
  },
  {
    "text": "removed from every web CA um you know is is in the process of being removed I think they have like two",
    "start": "279240",
    "end": "286259"
  },
  {
    "text": "or three more days before they're disallowed um but that is still embedded right that",
    "start": "286259",
    "end": "292500"
  },
  {
    "text": "certificate is still embedded to all of the docker images you built last week",
    "start": "292500",
    "end": "297720"
  },
  {
    "text": "um cluster trust bundles can be mounted like config maps and you will Mount them like config maps on Etsy SSL to update",
    "start": "297720",
    "end": "306240"
  },
  {
    "text": "the web route of trust dynamically so you can keep up keep that up to date regardless of when your Docker image was",
    "start": "306240",
    "end": "312960"
  },
  {
    "text": "built um but more importantly trust bundles can be mounted like uh",
    "start": "312960",
    "end": "318660"
  },
  {
    "text": "like config maps and you can have a bunch of different trust bundles for all of the different little Scopes that you",
    "start": "318660",
    "end": "324539"
  },
  {
    "text": "need and so that's what we're looking for is to try and limit the scope of trust so as we said you know your that top row of",
    "start": "324539",
    "end": "333060"
  },
  {
    "text": "CAS of of root Cas is essentially the",
    "start": "333060",
    "end": "338280"
  },
  {
    "text": "the web root of trust and the trust that's in most Linux distributions Amazon Linux Google District list Alpine",
    "start": "338280",
    "end": "346139"
  },
  {
    "text": "you name it it's got 160 of those what we recommend and what what our opinion",
    "start": "346139",
    "end": "351240"
  },
  {
    "text": "is you know on your clusters you basically want a very limited set of top level Cas you want essentially your",
    "start": "351240",
    "end": "359820"
  },
  {
    "text": "internal private certificate authority to be your root of trust and no others",
    "start": "359820",
    "end": "365520"
  },
  {
    "text": "maybe maybe a partner or two but not on every server that you've got so what we",
    "start": "365520",
    "end": "371280"
  },
  {
    "text": "what what we're looking to do is try and Implement uh provide a way to implement easily",
    "start": "371280",
    "end": "377120"
  },
  {
    "text": "trust bundles that let your scope to just the part in blue and not the 150",
    "start": "377120",
    "end": "382620"
  },
  {
    "text": "items in red right there's no reason that that any server should have to trust",
    "start": "382620",
    "end": "388819"
  },
  {
    "text": "you know a a Peruvian Cafe website but",
    "start": "388819",
    "end": "393840"
  },
  {
    "text": "your your system would accept that Peruvian Cafe website's TLS certificate because it's got an intermediate chain",
    "start": "393840",
    "end": "399900"
  },
  {
    "text": "that Roots up to um the the Peruvian root Authority which is in your trust bundle and and part of",
    "start": "399900",
    "end": "407280"
  },
  {
    "text": "this point is not that you shouldn't trust those all of those web certs but you should trust them for when you're",
    "start": "407280",
    "end": "412319"
  },
  {
    "text": "going to the web for most applications for most of your internal calls you are not going to the web you should be using",
    "start": "412319",
    "end": "418800"
  },
  {
    "text": "a trust bundle that is scoped to your internal Network um so the the web to root of trust will",
    "start": "418800",
    "end": "424740"
  },
  {
    "text": "still be around it just won't be the default for most of your applications right so in our keynote this morning we",
    "start": "424740",
    "end": "431460"
  },
  {
    "text": "just added this slide um the the presenter Zach um Zach",
    "start": "431460",
    "end": "437360"
  },
  {
    "text": "Zach butcher mentioned you know trying to get to a zero trust architecture these were the five points that he made",
    "start": "437360",
    "end": "443099"
  },
  {
    "text": "Coupe TLS helped to implement those first three points very easily so we'll",
    "start": "443099",
    "end": "448380"
  },
  {
    "text": "show you how this works yeah so Coop TLS automatically injects certificates that provide workload identity onto every pod",
    "start": "448380",
    "end": "455160"
  },
  {
    "text": "and every container in the cluster um they provide uh privacy by TLS",
    "start": "455160",
    "end": "460860"
  },
  {
    "text": "encryption they provide authentication by TLS Mutual encryption and",
    "start": "460860",
    "end": "466199"
  },
  {
    "text": "authorization comes very quickly from that um simply because you're you know once",
    "start": "466199",
    "end": "471720"
  },
  {
    "text": "you have those identities those per pod per service account identities authorization becomes a a very quick",
    "start": "471720",
    "end": "479039"
  },
  {
    "text": "layer um so how do you do how do you do secure networking on kubernetes well you know",
    "start": "479039",
    "end": "485699"
  },
  {
    "text": "in the last talk there was a number of of they they went over a bunch of those ways",
    "start": "485699",
    "end": "490919"
  },
  {
    "text": "um any number of talks here are going to talk about um different ways to do that so uh the",
    "start": "490919",
    "end": "497099"
  },
  {
    "text": "two most common ways are these first two sub bullets is one is you're using sidecars and",
    "start": "497099",
    "end": "504120"
  },
  {
    "text": "um we're not a big fan of side cars they don't they don't cover all the space",
    "start": "504120",
    "end": "509160"
  },
  {
    "text": "um they're complicated they're typically managed in Enterprises by teams that are not your application development teams",
    "start": "509160",
    "end": "515760"
  },
  {
    "text": "so they're orthogonal to your application architecture uh the other",
    "start": "515760",
    "end": "520800"
  },
  {
    "text": "thing is that your your secure your application security architecture should",
    "start": "520800",
    "end": "526260"
  },
  {
    "text": "be designed in your application and one of the one of the 12 factors in the 12 Factor app is that there's a sort of a",
    "start": "526260",
    "end": "533580"
  },
  {
    "text": "single point you're you minimize dependencies and so if your security of",
    "start": "533580",
    "end": "539459"
  },
  {
    "text": "your application Arc textures depending on not only your application but also these sidecars now you've got two points",
    "start": "539459",
    "end": "545640"
  },
  {
    "text": "that are that are doing that not a single single dependency for it um the other choice is some kind of cni",
    "start": "545640",
    "end": "553560"
  },
  {
    "text": "complex cni thing with with Calico or something where you're trying to limit",
    "start": "553560",
    "end": "559200"
  },
  {
    "text": "network access and who can who can send packets to who and again this is at the wrong layer it is in your network",
    "start": "559200",
    "end": "565980"
  },
  {
    "text": "architecture your your application security architecture is now dependent on your network architecture and and the",
    "start": "565980",
    "end": "571560"
  },
  {
    "text": "two have to change in sync and that can be very difficult so neither of these two ways are very",
    "start": "571560",
    "end": "576959"
  },
  {
    "text": "um they they're difficult to manage typically in most organizations you have two separate groups that do it and so",
    "start": "576959",
    "end": "583260"
  },
  {
    "text": "there's a lot of communications got to happen our recommendation is the right way to do this is that every service speaks TLS natively so it doesn't send a",
    "start": "583260",
    "end": "590700"
  },
  {
    "text": "packet anywhere unless it's over a TLS link and to do that you need certificates in every pod so that you",
    "start": "590700",
    "end": "597480"
  },
  {
    "text": "can create that TLS Connection in in our demo in our demo repository which is",
    "start": "597480",
    "end": "603779"
  },
  {
    "text": "linked at the end of this presentation we show different examples of how you configure your service so that it speaks",
    "start": "603779",
    "end": "610920"
  },
  {
    "text": "TLS natively how to get how to get that private key and that certificate bundled into however your particular language",
    "start": "610920",
    "end": "617519"
  },
  {
    "text": "does web servers and it really is usually that simple as you know when",
    "start": "617519",
    "end": "622740"
  },
  {
    "text": "when you are making a grpc connection you have to specify I am doing this the insecure way or you can specify I am",
    "start": "622740",
    "end": "629100"
  },
  {
    "text": "doing this the Kube TLS way we provide just a grpc dial option that makes it",
    "start": "629100",
    "end": "634620"
  },
  {
    "text": "you know just picks up the right place picks up the right certificates for your cluster we provide a Java version of",
    "start": "634620",
    "end": "640800"
  },
  {
    "text": "this as well that yeah and if you've ever gone you know Google how to do mtls with Java like half of it is how to",
    "start": "640800",
    "end": "647459"
  },
  {
    "text": "create this not half it 90 of us how to create the certificate and and ten",
    "start": "647459",
    "end": "652560"
  },
  {
    "text": "percent of it is like here's the Java code that just simply uses that that certificate private key and we've",
    "start": "652560",
    "end": "657720"
  },
  {
    "text": "simplified that 90 down to five percent right um one of these days I'll get around to",
    "start": "657720",
    "end": "663779"
  },
  {
    "text": "writing the python version um yeah but so",
    "start": "663779",
    "end": "668880"
  },
  {
    "text": "um the nice thing about TLS everywhere at the application Level is that there",
    "start": "668880",
    "end": "673920"
  },
  {
    "text": "is no chance of it being sniffed whenever it is leaving your pod and in fact your applications uh you know",
    "start": "673920",
    "end": "681720"
  },
  {
    "text": "memory space it is TLS encrypted it's TLS native it's encrypted and it's",
    "start": "681720",
    "end": "687300"
  },
  {
    "text": "mutually authenticated everywhere you go so yeah what is what is Coupe TLS at at",
    "start": "687300",
    "end": "696300"
  },
  {
    "text": "its most basic it is it is an admission controller it's it's a mutating web hook",
    "start": "696300",
    "end": "701779"
  },
  {
    "text": "configuration object inside of your kubernetes cluster what what that means is the kubernetes cluster is going to",
    "start": "701779",
    "end": "708480"
  },
  {
    "text": "based on the filters that you set up in the in the in the yaml for this object it's going to send every pod request to",
    "start": "708480",
    "end": "717120"
  },
  {
    "text": "our um to our service it makes a web call to our service we return beta data back to",
    "start": "717120",
    "end": "724079"
  },
  {
    "text": "the the kubernetes master we modify that incoming pod request add the certificate",
    "start": "724079",
    "end": "730019"
  },
  {
    "text": "secrets to add certificates to it that contain the secrets so that they're mounted on a file system visible to that",
    "start": "730019",
    "end": "736320"
  },
  {
    "text": "pod and so all that pod has to do is pick those certificates up for book from a well-known location",
    "start": "736320",
    "end": "741959"
  },
  {
    "text": "um and so this is the building blocks of uh um trust architecture so yeah it's got a",
    "start": "741959",
    "end": "748140"
  },
  {
    "text": "private key a matching private key and it's got a sense actually the trust bundle so it's got the root certificates",
    "start": "748140",
    "end": "754920"
  },
  {
    "text": "that you care about for this pod in there which is basically just your internal CA in most cases we'll talk",
    "start": "754920",
    "end": "762000"
  },
  {
    "text": "about the different types of patterns that you'll use that bottom bullet will get replaced by",
    "start": "762000",
    "end": "767220"
  },
  {
    "text": "the cap when it's doing cluster trust bundles when that feature is added to kubernetes and then all you need to do",
    "start": "767220",
    "end": "772320"
  },
  {
    "text": "is provide a secret and a key and this is the building blocks of an architecture that we'll talk about yeah",
    "start": "772320",
    "end": "778320"
  },
  {
    "text": "um yeah I think we've already mostly covered this but your application should speak only TLS",
    "start": "778320",
    "end": "784139"
  },
  {
    "text": "um your your organization itself is a zone of trust",
    "start": "784139",
    "end": "789360"
  },
  {
    "text": "um right there is no such as thing as as zero trust but you can make your",
    "start": "789360",
    "end": "794399"
  },
  {
    "text": "application to application connections the start of a zone of trust and once",
    "start": "794399",
    "end": "799860"
  },
  {
    "text": "you have done so the you adding the the you know identity aware part of allowing",
    "start": "799860",
    "end": "807240"
  },
  {
    "text": "things to connect uh becomes very simple right once you have the the core identity",
    "start": "807240",
    "end": "813019"
  },
  {
    "text": "and encryption provided identity and authentication provided on every request",
    "start": "813019",
    "end": "819779"
  },
  {
    "text": "um the rest of this you know just falls into place so this is an example of how not to do",
    "start": "819779",
    "end": "825660"
  },
  {
    "text": "it which is basically just the side card pattern we think is flawed because there's open text it is as the previous",
    "start": "825660",
    "end": "831620"
  },
  {
    "text": "presenter mentioned like if somebody somebody is a muck on your network which",
    "start": "831620",
    "end": "837060"
  },
  {
    "text": "you know I mean you have to think of that as a valid possibility um you have to assume breach and so if you assume breach that clear text",
    "start": "837060",
    "end": "843420"
  },
  {
    "text": "connection can be sniffed and and used in in various nefarious ways so this is why we don't like this architecture we'd",
    "start": "843420",
    "end": "849839"
  },
  {
    "text": "rather that that application pod speak TLS so that's encrypted well before it",
    "start": "849839",
    "end": "855480"
  },
  {
    "text": "hits any of your network architecture inside the code inside the running application it's encrypted before it",
    "start": "855480",
    "end": "862019"
  },
  {
    "text": "hits Network and just to be clear this is hard to sniff this is not this is not easy to happen on the other hand",
    "start": "862019",
    "end": "868800"
  },
  {
    "text": "istio fills open um if your side cars aren't injected your application will still try to talk",
    "start": "868800",
    "end": "875820"
  },
  {
    "text": "and the proxy won't be there and it'll just talk to the network um that's a problem that's that is",
    "start": "875820",
    "end": "881579"
  },
  {
    "text": "actually pretty much the Crux of our argument and istio fails open you don't want that and there are ways to like",
    "start": "881579",
    "end": "887760"
  },
  {
    "text": "bypass the the network if I have a rogue app that's on that's been deployed to",
    "start": "887760",
    "end": "893339"
  },
  {
    "text": "the cluster I can ignore the fact that there's a sidecar there and talk now you can fix that with complex cnis but those",
    "start": "893339",
    "end": "901079"
  },
  {
    "text": "are complex dnis that you know yeah um yeah so this is our opinion this is much",
    "start": "901079",
    "end": "907980"
  },
  {
    "text": "easier to uh to implement in our opinion although this looks as complicated as anything else this is just a set of",
    "start": "907980",
    "end": "914519"
  },
  {
    "text": "repeated patterns done the same way with slightly different regular pre-planned",
    "start": "914519",
    "end": "919620"
  },
  {
    "text": "variations on what they are so here's yeah so this this is what an app looks",
    "start": "919620",
    "end": "925560"
  },
  {
    "text": "like right it has it is serving something and it is acting as a client",
    "start": "925560",
    "end": "930600"
  },
  {
    "text": "um and it does so with you know certificates provided but as or",
    "start": "930600",
    "end": "937079"
  },
  {
    "text": "certificates chaining up to your trust bundle um it connects to you know it has an",
    "start": "937079",
    "end": "942660"
  },
  {
    "text": "identity on your network um and that identity might tell it might say you know I am the server for x and",
    "start": "942660",
    "end": "949440"
  },
  {
    "text": "that identity might say I am the client that has this service account um and you might just you know put both",
    "start": "949440",
    "end": "955860"
  },
  {
    "text": "of those into the same client certificate um as kubetls does it just creates a",
    "start": "955860",
    "end": "961380"
  },
  {
    "text": "client certificate um a client slash server certificate for each pod when it comes up it figures out",
    "start": "961380",
    "end": "968820"
  },
  {
    "text": "which Services it should be valid for so it adds the DNS names the appropriate DNS names to it as DNS Sans",
    "start": "968820",
    "end": "975959"
  },
  {
    "text": "um and it adds the the service account in uh as both the common name and the",
    "start": "975959",
    "end": "981899"
  },
  {
    "text": "spiffy um sort of style ID um and probably more as we you know",
    "start": "981899",
    "end": "987959"
  },
  {
    "text": "figure out and turn add feature Flags to to make this work in interesting ways",
    "start": "987959",
    "end": "994260"
  },
  {
    "text": "um there's still some you know question about how exactly those identities should be represented though spiffy seems to be a pretty clear you know",
    "start": "994260",
    "end": "1002000"
  },
  {
    "text": "pretty commonly used so there's another way to to apply this same pattern so this would be talking to",
    "start": "1002000",
    "end": "1008420"
  },
  {
    "text": "Partners on the web so um there are two different ways to do this we prefer the way on the top because we think it's it's it's more",
    "start": "1008420",
    "end": "1015519"
  },
  {
    "text": "long-term robust but let's talk about that so what you do is",
    "start": "1015519",
    "end": "1020540"
  },
  {
    "text": "um in your internal service and their internal service you trade trust bundles and that way when their API server uses",
    "start": "1020540",
    "end": "1029178"
  },
  {
    "text": "its internally generated certificate to talk to your server you're going to validate that certificate that you're",
    "start": "1029179",
    "end": "1035839"
  },
  {
    "text": "going to do an mtls Mutual TLS authentication of the incoming clients are with the trust bundle that that's",
    "start": "1035839",
    "end": "1041600"
  },
  {
    "text": "been injected into your pod that trust bundle in this case is your partner's trust bundle and therefore you trust",
    "start": "1041600",
    "end": "1047959"
  },
  {
    "text": "that certificate on on the calling side there your partner's API is going to",
    "start": "1047959",
    "end": "1053059"
  },
  {
    "text": "make a call to a web server and when that web server sends back the hello IM server XYZ essentially hello I am blue",
    "start": "1053059",
    "end": "1060140"
  },
  {
    "text": "server internal API it checks that blue certificate see if it's valid and it",
    "start": "1060140",
    "end": "1066020"
  },
  {
    "text": "does so against your trust bundle which is the blue trust bundle and so it says yes this certificate chain matches",
    "start": "1066020",
    "end": "1071720"
  },
  {
    "text": "cryptographically so we we're good to go we'll accept you know what we believe we're talking to the correct you know",
    "start": "1071720",
    "end": "1078620"
  },
  {
    "text": "blue server and that yellow certificate that we send down the line the blue server is able to validate that yellow",
    "start": "1078620",
    "end": "1085340"
  },
  {
    "text": "server as belonging to the yellow company um the other way to do this is basically",
    "start": "1085340",
    "end": "1090380"
  },
  {
    "text": "not to trade trust bundles but trade certificates that works just as well",
    "start": "1090380",
    "end": "1095480"
  },
  {
    "text": "because the blue server will be validating a blue certificate against the blue trust bundle that works uh the",
    "start": "1095480",
    "end": "1102260"
  },
  {
    "text": "problem with that is that you want to be able to rotate your certificates pretty fast and that means exchanging certificates with your partners on a",
    "start": "1102260",
    "end": "1108320"
  },
  {
    "text": "regular basis say every 60 days every every month every week like whatever",
    "start": "1108320",
    "end": "1113900"
  },
  {
    "text": "your aggressive certificate rotation plan is you're probably not going to get down to",
    "start": "1113900",
    "end": "1119000"
  },
  {
    "text": "seconds with that probably not good seconds but the upward but your certificates your your Cas aren't going",
    "start": "1119000",
    "end": "1124700"
  },
  {
    "text": "to change all that often so that's something you can do yearly and then still rotate your certificates you rotate your blue certificates as fast as",
    "start": "1124700",
    "end": "1131720"
  },
  {
    "text": "you want they take their yellow certificates as fast as they want YouTube pretty much don't care what",
    "start": "1131720",
    "end": "1137480"
  },
  {
    "text": "you're doing operationally so that's why I just care that you trust each other you care that you trust each other",
    "start": "1137480",
    "end": "1142880"
  },
  {
    "text": "um so here is the details on what a TLS certificate um looks like",
    "start": "1142880",
    "end": "1149360"
  },
  {
    "text": "um so we we start by you know being called as a web hook we look up the",
    "start": "1149360",
    "end": "1155539"
  },
  {
    "text": "container services so um one of the the flaws in our model is that whatever Services the pot is",
    "start": "1155539",
    "end": "1162919"
  },
  {
    "text": "associated with when it starts up are the host names that they get uh if you create the service after you create the",
    "start": "1162919",
    "end": "1168500"
  },
  {
    "text": "Pod then you're out of luck if you change the Pod afterwards you change the labels on either the Pod or the service",
    "start": "1168500",
    "end": "1174440"
  },
  {
    "text": "after words and change the services it matches to then you're out of luck",
    "start": "1174440",
    "end": "1179559"
  },
  {
    "text": "which is fine so long as you don't do that very often it's also fine if you",
    "start": "1179559",
    "end": "1185480"
  },
  {
    "text": "move away from doing the DNS Sands and start moving to a model where rather",
    "start": "1185480",
    "end": "1191000"
  },
  {
    "text": "than authenticating the services you authenticate the service accounts that you're trying to connect to",
    "start": "1191000",
    "end": "1197240"
  },
  {
    "text": "um and that's sort of the the step that you want to go to eventually um but for the moment you know DNS Sands",
    "start": "1197240",
    "end": "1204620"
  },
  {
    "text": "is is really easy and compatible with everything um so Coupe TLS then creates a CSR",
    "start": "1204620",
    "end": "1211880"
  },
  {
    "text": "um csrs are an object a top level cluster level object in kubernetes",
    "start": "1211880",
    "end": "1217400"
  },
  {
    "text": "um and you can use them to do certificate signing and approval um it will approve or uh its controller",
    "start": "1217400",
    "end": "1226220"
  },
  {
    "text": "to approve will approve and then it attaches uh it attaches a secret to your",
    "start": "1226220",
    "end": "1231919"
  },
  {
    "text": "pot by way of mutating your pod um and respond back to that with to",
    "start": "1231919",
    "end": "1237080"
  },
  {
    "text": "kubernetes with that um yeah so these are the the key fields",
    "start": "1237080",
    "end": "1243320"
  },
  {
    "text": "that we use in in uh the x509 certificate that we're creating and injecting into into the Pod",
    "start": "1243320",
    "end": "1250100"
  },
  {
    "text": "um so uh the common name is the name of the Pod so common name used to be the",
    "start": "1250100",
    "end": "1255200"
  },
  {
    "text": "website that it served for but now that has moved to the sand the subject alternative name so we've used sand many",
    "start": "1255200",
    "end": "1261919"
  },
  {
    "text": "times without defining it but the sand is the subject alternative name and that's the list by which most of your",
    "start": "1261919",
    "end": "1267500"
  },
  {
    "text": "HTTP mechanism will validate like am I talking to server X if the sir if the",
    "start": "1267500",
    "end": "1273440"
  },
  {
    "text": "certificate that server X presented you contains the sand that says serverax then yes you're talking to them I know",
    "start": "1273440",
    "end": "1280160"
  },
  {
    "text": "by the way that it it cryptographically chains up to the root right that's what we do so uh the name of the Pod and the",
    "start": "1280160",
    "end": "1287179"
  },
  {
    "text": "subject alternative name it's a DNS with the names of the service the name of the Pod and any other DNS name that makes",
    "start": "1287179",
    "end": "1293659"
  },
  {
    "text": "sense uh based on the flags that you give Coupe TLS we also throw in a a the",
    "start": "1293659",
    "end": "1299120"
  },
  {
    "text": "ID is based on the service and so you can use this with with your spiffy IDs we set the key usage so in",
    "start": "1299120",
    "end": "1307840"
  },
  {
    "text": "n8x509 certificate there's a field that says how can you use this key there are a couple of values there one is this is",
    "start": "1307840",
    "end": "1314059"
  },
  {
    "text": "a root CA this is a this is a signing typically an intermediate CA or this is a web server or this is a a client",
    "start": "1314059",
    "end": "1321080"
  },
  {
    "text": "certificate and we set them both you are a web server and a client certificate so that you can use the same certificate on",
    "start": "1321080",
    "end": "1327799"
  },
  {
    "text": "either side on the client side or the website we do the same thing that let's encrypt does yes that's that's what's",
    "start": "1327799",
    "end": "1334520"
  },
  {
    "text": "important um and then it also you know has the identity of the root it's signing up too",
    "start": "1334520",
    "end": "1340880"
  },
  {
    "text": "um so let's do a demo demos are fun yes uh apologies to Semisonic here yeah for",
    "start": "1340880",
    "end": "1348380"
  },
  {
    "text": "the lyrics um let's mirror this and let's make this",
    "start": "1348380",
    "end": "1354020"
  },
  {
    "text": "a little bit bigger that big enough can people read that it",
    "start": "1354020",
    "end": "1359360"
  },
  {
    "text": "probably helps if I move it up so you can actually see what's going on um",
    "start": "1359360",
    "end": "1365659"
  },
  {
    "text": "so I already have some of the pods running but I am going to delete it so",
    "start": "1365659",
    "end": "1370940"
  },
  {
    "text": "that we can see a fresh one so what we've got is a a greeter service",
    "start": "1370940",
    "end": "1377299"
  },
  {
    "text": "and a greeter client that will demo um and they agree it's the hello world",
    "start": "1377299",
    "end": "1382460"
  },
  {
    "text": "example it's the grpc hello world example but modified to use TLS nicely",
    "start": "1382460",
    "end": "1387679"
  },
  {
    "text": "as we want it to um so here is",
    "start": "1387679",
    "end": "1394400"
  },
  {
    "text": "our pod and we can exec into it",
    "start": "1394400",
    "end": "1399940"
  },
  {
    "text": "um and look at its",
    "start": "1403159",
    "end": "1408039"
  },
  {
    "text": "uh look at the certificate that has been generated",
    "start": "1409400",
    "end": "1415539"
  },
  {
    "text": "uh it helps if I get my Flex quite right cool",
    "start": "1426020",
    "end": "1433280"
  },
  {
    "text": "so here is a certificate um you can see its issuer is",
    "start": "1433280",
    "end": "1438799"
  },
  {
    "text": "our issuer and that will match up with the ca certificate that it's also provided in that file system you can see",
    "start": "1438799",
    "end": "1446600"
  },
  {
    "text": "that the DNS names it's got its uh the service name it's got the Pod name and",
    "start": "1446600",
    "end": "1453559"
  },
  {
    "text": "it's got a spiffy uid um and it's just a standard TLS",
    "start": "1453559",
    "end": "1460640"
  },
  {
    "text": "uh client server server RSA at the moment I was putting around",
    "start": "1460640",
    "end": "1467659"
  },
  {
    "text": "with adding uh ecdsa but you know close enough",
    "start": "1467659",
    "end": "1473240"
  },
  {
    "text": "um and this more or less works and you can see",
    "start": "1473240",
    "end": "1479679"
  },
  {
    "text": "the CSR that was generated a few seconds ago when I deleted this pod",
    "start": "1482120",
    "end": "1487940"
  },
  {
    "text": "um you know Kube TLS went through the process of creating this CSR ish",
    "start": "1487940",
    "end": "1493039"
  },
  {
    "text": "approving it um a signer that we've set up for this which you know you can use cert manager",
    "start": "1493039",
    "end": "1501200"
  },
  {
    "text": "you can use an external signer or you can use a very basic one that is here",
    "start": "1501200",
    "end": "1506360"
  },
  {
    "text": "for this demo um all of those work it it's agnostic to the actual signer",
    "start": "1506360",
    "end": "1513440"
  },
  {
    "text": "um which you know allows you to provide your own or or do something better um and then we can just you know",
    "start": "1513440",
    "end": "1521120"
  },
  {
    "text": "create uh call a service uh",
    "start": "1521120",
    "end": "1527440"
  },
  {
    "text": "yeah oh yeah",
    "start": "1527440",
    "end": "1531039"
  },
  {
    "text": "so the greeter service the greeter client that's just a batch job that runs and exits into the Pod runs and and and",
    "start": "1545360",
    "end": "1551299"
  },
  {
    "text": "then shuts down and because the job kubernetes doesn't restart it but saves the logs and so we can examine the logs",
    "start": "1551299",
    "end": "1557779"
  },
  {
    "text": "after it's run yeah and so you know this just connects",
    "start": "1557779",
    "end": "1563179"
  },
  {
    "text": "um it connects to the the appropriate name um it gets the greeting and it also sees",
    "start": "1563179",
    "end": "1569659"
  },
  {
    "text": "uh the service account that we've been running as so if I were to modify my",
    "start": "1569659",
    "end": "1575059"
  },
  {
    "text": "greater client",
    "start": "1575059",
    "end": "1577658"
  },
  {
    "text": "um I can set the service account name",
    "start": "1580580",
    "end": "1584740"
  },
  {
    "text": "that has chosen a very weird indentation here we go",
    "start": "1585740",
    "end": "1591799"
  },
  {
    "text": "can you stop for one second yeah so scroll down a little bit we've got some stuff coming out but when you look at",
    "start": "1591799",
    "end": "1596840"
  },
  {
    "text": "the um um okay yeah I don't know what you're pointing at yeah no I was",
    "start": "1596840",
    "end": "1604640"
  },
  {
    "text": "um so we can create another version of it with a different service account running is a different service account",
    "start": "1604640",
    "end": "1612100"
  },
  {
    "text": "and now it has this other identity visible to it again through the the coupe DLS uh",
    "start": "1612620",
    "end": "1620720"
  },
  {
    "text": "certificate and that this through other identity is not it's not our client saying that that is the server that it",
    "start": "1620720",
    "end": "1627380"
  },
  {
    "text": "is connected to that has said You know here I know who you are I can verify Who You Are",
    "start": "1627380",
    "end": "1633980"
  },
  {
    "text": "um so what else is there that is interesting um the other thing that's sort of",
    "start": "1633980",
    "end": "1639380"
  },
  {
    "text": "interesting is that you know it's mtls right if I override the CA and I use",
    "start": "1639380",
    "end": "1644659"
  },
  {
    "text": "some other random self-signed mtls cert",
    "start": "1644659",
    "end": "1650659"
  },
  {
    "text": "oh geez how did I screw this up",
    "start": "1650659",
    "end": "1655899"
  },
  {
    "text": "there's a mix of tabs and spaces and now I am realizing it to fix this",
    "start": "1656659",
    "end": "1663940"
  },
  {
    "text": "oh yeah cool",
    "start": "1673100",
    "end": "1679840"
  },
  {
    "text": "I don't know why you have a caps lock key you can create yet another copy of this",
    "start": "1681500",
    "end": "1687620"
  },
  {
    "text": "and this one will fail because it is using a self-signed certificate",
    "start": "1687620",
    "end": "1694159"
  },
  {
    "text": "um this one is actually failing on the client side because it's signed by an",
    "start": "1694159",
    "end": "1700279"
  },
  {
    "text": "unknown Authority but we can have it fail on the uh on the other side when we present it an",
    "start": "1700279",
    "end": "1708820"
  },
  {
    "text": "unexpected key",
    "start": "1708820",
    "end": "1712059"
  },
  {
    "text": "um and if we go look at the logs of our",
    "start": "1722240",
    "end": "1726520"
  },
  {
    "text": "oh well okay the debug logs are not working it should have printed out",
    "start": "1731900",
    "end": "1737179"
  },
  {
    "text": "that we got a failed connection from this other server that we denied a connection right actually so the first",
    "start": "1737179",
    "end": "1742940"
  },
  {
    "text": "the first failure was when we saw the other side certificate like when it sent",
    "start": "1742940",
    "end": "1748520"
  },
  {
    "text": "us our certificate when it sent it server hello certificate I am server XYZ",
    "start": "1748520",
    "end": "1753799"
  },
  {
    "text": "along with that certificate we looked at it and said that doesn't chain to our certificate Authority so we're closing",
    "start": "1753799",
    "end": "1760399"
  },
  {
    "text": "the connection from the client side the second error was we accepted that certificate because it did chain up and",
    "start": "1760399",
    "end": "1766940"
  },
  {
    "text": "then we sent it an invalid certificate that didn't chain up to its cluster trust bundle and so the server closed",
    "start": "1766940",
    "end": "1773659"
  },
  {
    "text": "the certificate on that side it says use of closed network connection which means we tried to write because we thought",
    "start": "1773659",
    "end": "1779659"
  },
  {
    "text": "this was going to work but the server closed down on us because it didn't trust our certificate",
    "start": "1779659",
    "end": "1785299"
  },
  {
    "text": "um cool I think that's all we have a couple of wrap-up slides yeah",
    "start": "1785299",
    "end": "1791299"
  },
  {
    "text": "um so yeah let's move back here yeah there we go yeah um",
    "start": "1791299",
    "end": "1797419"
  },
  {
    "text": "this makes it really easy to you know have certificates populated and have certificates populated in your",
    "start": "1797419",
    "end": "1804140"
  },
  {
    "text": "applications namespace so your application can make use of certificates rather than trying to wrap it in some",
    "start": "1804140",
    "end": "1810320"
  },
  {
    "text": "Network layer that does this all magically um you know their their advantages to",
    "start": "1810320",
    "end": "1815720"
  },
  {
    "text": "both kinds of magic we like ours yeah um we think all your developers should learn how to use TLS and mutual TLS like",
    "start": "1815720",
    "end": "1822740"
  },
  {
    "text": "we think that's that should be the price of entry for being a programmer on the on cloud native but also that we should",
    "start": "1822740",
    "end": "1829100"
  },
  {
    "text": "make it simple enough that they can know again you know your your mtls demo is 95",
    "start": "1829100",
    "end": "1835220"
  },
  {
    "text": "playing with certificates we've collapsed that down to certificates are provided for you just do the right code yeah",
    "start": "1835220",
    "end": "1841880"
  },
  {
    "text": "um and you know there there is some agnosticism to Identity policy",
    "start": "1841880",
    "end": "1847760"
  },
  {
    "text": "um we intend to provide a reasonable set of defaults that you can flip on and off",
    "start": "1847760",
    "end": "1852919"
  },
  {
    "text": "um and hopefully one day it will you know be what just one but at the moment",
    "start": "1852919",
    "end": "1858380"
  },
  {
    "text": "there's still some some question um once everybody's establishing authentication through uh mtls then the",
    "start": "1858380",
    "end": "1866360"
  },
  {
    "text": "authorization layer becomes you know relatively easy you can see who you're talking to so then you can pick what",
    "start": "1866360",
    "end": "1873320"
  },
  {
    "text": "their actual authorization level is uh and I think there's so other future",
    "start": "1873320",
    "end": "1880700"
  },
  {
    "text": "directions um private Keys should be generated on the nodes and never leave the nodes currently they're created through",
    "start": "1880700",
    "end": "1886100"
  },
  {
    "text": "Secrets um that's sub-optimal if they were generated on the nodes then this then",
    "start": "1886100",
    "end": "1891440"
  },
  {
    "text": "the private key material would never leave the nodes um that would be great",
    "start": "1891440",
    "end": "1896480"
  },
  {
    "text": "um so we're planning on moving to a CSI model there is not ready for demo but there's some work on that",
    "start": "1896480",
    "end": "1903260"
  },
  {
    "text": "um so that the so that rather than mounting a secret you mount a Kube TLS",
    "start": "1903260",
    "end": "1908899"
  },
  {
    "text": "CSI that just generates the C generates uh for you the private key material when",
    "start": "1908899",
    "end": "1917120"
  },
  {
    "text": "when the node comes up and the rest of it happens uh pretty much the same way",
    "start": "1917120",
    "end": "1922760"
  },
  {
    "text": "but it happens on the Node rather than at a central set of PODS yeah on your cluster so because it happens on the on",
    "start": "1922760",
    "end": "1930080"
  },
  {
    "text": "you know those that logic is on every node and the private Keys stay on every node",
    "start": "1930080",
    "end": "1935659"
  },
  {
    "text": "um never getting transmitted even though it's being transmitted by the by the kubernetes control plane in TLS we'd",
    "start": "1935659",
    "end": "1942559"
  },
  {
    "text": "rather just not transport those those around yeah um and this should be built into kubernetes",
    "start": "1942559",
    "end": "1948620"
  },
  {
    "text": "um but you know that's our opinion we like it yeah the trust plus the cluster trust bundles is one step in that",
    "start": "1948620",
    "end": "1954980"
  },
  {
    "text": "direction we hope it's a huge step well we we hope that will knock down those dominoes and move forward yeah cool plan",
    "start": "1954980",
    "end": "1962240"
  },
  {
    "text": "for world domination um yeah here is our repo here is our presentation slides and here is the",
    "start": "1962240",
    "end": "1968480"
  },
  {
    "text": "session feedback link so sorry to keep you from the vendor Booth crawl so there",
    "start": "1968480",
    "end": "1973820"
  },
  {
    "text": "should be beer available now soon but thank you we're here for questions okay",
    "start": "1973820",
    "end": "1980950"
  },
  {
    "text": "[Applause]",
    "start": "1980950",
    "end": "1985809"
  },
  {
    "text": "uh yes though in a branch yeah I I will be glad to help you run that",
    "start": "1986539",
    "end": "1992960"
  },
  {
    "text": "demo on your cluster if you would like to if you look at the",
    "start": "1992960",
    "end": "1997299"
  },
  {
    "text": "ticket yeah go ahead",
    "start": "1998059",
    "end": "2003659"
  },
  {
    "text": "um yes but we're not confident enough in the code quality yet to do that um",
    "start": "2007840",
    "end": "2013360"
  },
  {
    "text": "mostly because I wanted to make the demo work yeah",
    "start": "2013360",
    "end": "2018240"
  },
  {
    "text": "cool thank you very much question in the back",
    "start": "2020140",
    "end": "2025740"
  },
  {
    "text": "um so we work with any CA that provides a kubernetes signer",
    "start": "2030880",
    "end": "2036279"
  },
  {
    "text": "um so the that is a very short list at the moment that's cert manager",
    "start": "2036279",
    "end": "2042580"
  },
  {
    "text": "um but at the same time there is also a not even in the branch but a a super",
    "start": "2042580",
    "end": "2048780"
  },
  {
    "text": "super janky demo of here is how you use a awsca to provide a kubernetes signer",
    "start": "2048780",
    "end": "2056440"
  },
  {
    "text": "uh that I you know spent 20 minutes on last weekend so let's let's talk about",
    "start": "2056440",
    "end": "2062740"
  },
  {
    "text": "it I'm I'm glad to to do the work to make that work and I do intend to do the work to make that work Microsoft has CA",
    "start": "2062740",
    "end": "2069760"
  },
  {
    "text": "like parts of their Azure CA are exposed in their in their AKs stuff right oh",
    "start": "2069760",
    "end": "2075638"
  },
  {
    "text": "then then that'll then it will just work yeah yeah it should just work but if that's",
    "start": "2075639",
    "end": "2082480"
  },
  {
    "text": "already if that is already exposed then yeah it should just work um",
    "start": "2082480",
    "end": "2088560"
  },
  {
    "text": "right so I've I've tried it with you know our own CA and I've tried it with uh cert manager and I see no reason why",
    "start": "2090280",
    "end": "2097420"
  },
  {
    "text": "it wouldn't work with the other CA that I've used which is the hash record Vault signer",
    "start": "2097420",
    "end": "2102940"
  },
  {
    "text": "um for csrs and that like anything that is a kubernetes CSR signer will work you",
    "start": "2102940",
    "end": "2108640"
  },
  {
    "text": "know unless there's something really weird about it yeah yeah",
    "start": "2108640",
    "end": "2116020"
  },
  {
    "text": "cool excellent question thank you",
    "start": "2118000",
    "end": "2123160"
  },
  {
    "text": "you get an extra beer yeah",
    "start": "2123160",
    "end": "2126720"
  },
  {
    "text": "um yes and no I mean the the simple answer is that a trust bundle is all",
    "start": "2144880",
    "end": "2151240"
  },
  {
    "text": "equivalent um in most SSL implementations and that means that you want to be careful about",
    "start": "2151240",
    "end": "2157180"
  },
  {
    "text": "what you put in us in your ca list there are additional like",
    "start": "2157180",
    "end": "2164140"
  },
  {
    "text": "I I do believe that you are getting at a leading question about how openssl handles CA pems which I well",
    "start": "2164140",
    "end": "2174240"
  },
  {
    "text": "yeah oh yes of course yeah and that that answer is no that",
    "start": "2176140",
    "end": "2182260"
  },
  {
    "text": "answer is very clearly no um and if you start your application and then we and then you want to rotate",
    "start": "2182260",
    "end": "2188140"
  },
  {
    "text": "certificates the answer is still no um your application unlike with some",
    "start": "2188140",
    "end": "2193420"
  },
  {
    "text": "other things like it doesn't pick up new certificates on a regular basis we don't provide a rotation mechanism of these",
    "start": "2193420",
    "end": "2200079"
  },
  {
    "text": "secrets um what should you do about that kill your pot kill your kill your pod",
    "start": "2200079",
    "end": "2206079"
  },
  {
    "text": "kill your pot every 30 days yeah yeah yeah yeah yeah yeah yeah yeah",
    "start": "2206079",
    "end": "2211859"
  },
  {
    "text": "no no no pretty pretty simple",
    "start": "2215200",
    "end": "2220380"
  },
  {
    "text": "um yes but at the same time like we're we're going for the the least common",
    "start": "2221200",
    "end": "2226240"
  },
  {
    "text": "denominator here of we don't expect yeah yeah we we don't we are absolutely limit",
    "start": "2226240",
    "end": "2233320"
  },
  {
    "text": "limited by all of the limitations of your open SSL Library whether that be openssl Libre SSL go Lang's ago SSL",
    "start": "2233320",
    "end": "2241300"
  },
  {
    "text": "implementation whatever you're using whatever yeah please not bouncy castle yeah okay",
    "start": "2241300",
    "end": "2248859"
  },
  {
    "text": "cool well we got the one minute I think we yeah",
    "start": "2248859",
    "end": "2254200"
  },
  {
    "text": "we're good yeah so time to turn off the mics",
    "start": "2254200",
    "end": "2258838"
  }
]