[
  {
    "start": "0",
    "end": "112000"
  },
  {
    "text": "all right I'd like to thank everyone who is joining us today welcome today's CN",
    "start": "1070",
    "end": "6359"
  },
  {
    "text": "CF webinar announcing open source G RPC Kotlin I'm Kristy tan marketing",
    "start": "6359",
    "end": "12660"
  },
  {
    "text": "communications manager at CN CF I'll be moderating today's webinar we would like",
    "start": "12660",
    "end": "17670"
  },
  {
    "text": "to welcome our presenter today James Ward developer advocate at Google cloud platform a few housekeeping items before",
    "start": "17670",
    "end": "25170"
  },
  {
    "text": "we get started during the webinar you are not able to talk as an attendee there is a Q&A box at the bottom of your",
    "start": "25170",
    "end": "32219"
  },
  {
    "text": "screen please feel free to drop your questions in there and we'll get to as many as we can at the end",
    "start": "32219",
    "end": "37790"
  },
  {
    "text": "this is an official webinar of the CNC F and as such is subject to the CN CF Code",
    "start": "37790",
    "end": "43410"
  },
  {
    "text": "of Conduct please do not add anything to the chat or questions that would be in violation of that code of conduct",
    "start": "43410",
    "end": "49410"
  },
  {
    "text": "basically please be respectful of all of your fellow participants and presenter",
    "start": "49410",
    "end": "54770"
  },
  {
    "text": "please also note that the recording and slides will be posted later today to the C and C F webinar page at CNCs IO slash",
    "start": "54770",
    "end": "62670"
  },
  {
    "text": "webinars with that I'll hand it over to James to kick off today's presentation",
    "start": "62670",
    "end": "68150"
  },
  {
    "text": "great Thank You Kristy thank you everyone for joining us today so as Christy said I'm James Ward I work at",
    "start": "68150",
    "end": "74700"
  },
  {
    "text": "Google and we're gonna be talking about an announcement that we just made yesterday about the open sourcing of G",
    "start": "74700",
    "end": "80759"
  },
  {
    "text": "RPC Kotlin so I wanted to start out with just a little bit of an overview of Colin for those of you that might not be",
    "start": "80759",
    "end": "87090"
  },
  {
    "text": "familiar with it and then do a little bit of an overview of G RPC and then",
    "start": "87090",
    "end": "92130"
  },
  {
    "text": "we'll get into the G RPC Kotlin announcement and please ask questions as",
    "start": "92130",
    "end": "98159"
  },
  {
    "text": "we go through we have a number of people that have are behind this open source project also on today and they will help",
    "start": "98159",
    "end": "106350"
  },
  {
    "text": "answer questions during and then also at the end of the presentation so so ask",
    "start": "106350",
    "end": "111570"
  },
  {
    "text": "away alright so let's start with a little bit of an overview of Kotlin and what it",
    "start": "111570",
    "end": "116850"
  },
  {
    "start": "112000",
    "end": "364000"
  },
  {
    "text": "looks like if you haven't seen it before Kotlin is a newish programming language and it has a syntax that's kind of",
    "start": "116850",
    "end": "124740"
  },
  {
    "text": "similar to Java and so this makes it pretty easy too if you're a Java developer done other languages that have",
    "start": "124740",
    "end": "132180"
  },
  {
    "text": "a similar syntax it's easy to get going with Kotlin one big",
    "start": "132180",
    "end": "137610"
  },
  {
    "text": "difference that you'll see right away between Kotlin and java is that the type information is specified on the right",
    "start": "137610",
    "end": "144300"
  },
  {
    "text": "hand side instead of the left hand side and the reason for this is that this enables the language compiler to do",
    "start": "144300",
    "end": "152340"
  },
  {
    "text": "something called type inference so in a lot of places you can actually leave off the type information and it's a lot",
    "start": "152340",
    "end": "158580"
  },
  {
    "text": "easier to do that when it's not in the right-hand side of the declaration versus the left-hand side and and so",
    "start": "158580",
    "end": "164550"
  },
  {
    "text": "type inference does make the code usually look a lot cleaner and and easier to parse and and looks more",
    "start": "164550",
    "end": "171510"
  },
  {
    "text": "expressive in a lot of cases you do have to provide those types usually on function parameters and but they are",
    "start": "171510",
    "end": "179310"
  },
  {
    "text": "optional on like return types because they get inferred okay so there's a",
    "start": "179310",
    "end": "185010"
  },
  {
    "text": "couple of other interesting language features with Kotlin that i wanted to point out one is that no ability is",
    "start": "185010",
    "end": "191430"
  },
  {
    "text": "built into the type system so you'll see that question mark after that configuration type",
    "start": "191430",
    "end": "197100"
  },
  {
    "text": "what's that saying is that that configuration may not be there it it's",
    "start": "197100",
    "end": "202860"
  },
  {
    "text": "not necessarily know it could be know if it's coming from Java and the the Kotlin",
    "start": "202860",
    "end": "208590"
  },
  {
    "text": "type system will will handle that case for you but this is saying we may not actually have a configuration parameter",
    "start": "208590",
    "end": "215070"
  },
  {
    "text": "and so then our code can can account for that as needed so that's one nice",
    "start": "215070",
    "end": "220860"
  },
  {
    "text": "feature is having that no ability built into the type system another feature that's really great is first-class",
    "start": "220860",
    "end": "227280"
  },
  {
    "text": "support for lambdas so these are functions inline functions that you can specify as essentially parameters to a",
    "start": "227280",
    "end": "235459"
  },
  {
    "text": "to another function or method and so it's really nice to have a concise syntax to you to define our functions",
    "start": "235459",
    "end": "243360"
  },
  {
    "text": "this comes in really handy in a lot of places if you're doing Kotlin for UI",
    "start": "243360",
    "end": "248400"
  },
  {
    "text": "programming like an Android there's a lot of callback things that benefit from",
    "start": "248400",
    "end": "253799"
  },
  {
    "text": "this syntax if you're on the the server side then things like being able to to",
    "start": "253799",
    "end": "259890"
  },
  {
    "text": "have operations that perform on a collection or a stream it's really nice to have this lambda syntax for having",
    "start": "259890",
    "end": "265710"
  },
  {
    "text": "those functions for doing formations or filters that kind of thing",
    "start": "265710",
    "end": "271160"
  },
  {
    "text": "one other nice feature that I use a lot in Colin is this template expression syntax where you can inject variables",
    "start": "271160",
    "end": "278850"
  },
  {
    "text": "into string so you don't have to do string plus and then another string and that kind of thing you could just embed",
    "start": "278850",
    "end": "285870"
  },
  {
    "text": "the the values right into the string templates that's a nice feature and then something that the a lot of people have",
    "start": "285870",
    "end": "293040"
  },
  {
    "text": "is that semicolons are optional so in most cases you can leave them out",
    "start": "293040",
    "end": "298110"
  },
  {
    "text": "because the they can just be inferred by the compiler so some other things that",
    "start": "298110",
    "end": "305220"
  },
  {
    "text": "are a little bit harder to point out in a simple code example but we'll get into a little bit later our co-routines soko routines are for",
    "start": "305220",
    "end": "312600"
  },
  {
    "text": "doing asynchronous concurrency background tasks that kind of thing a really really nice programming model",
    "start": "312600",
    "end": "319230"
  },
  {
    "text": "around that they're also in Kotlin is bi-directional interoperability with java so you can call java objects and",
    "start": "319230",
    "end": "326610"
  },
  {
    "text": "java objects can call into Kotlin objects and interesting thing about Kotlin related to this is that colin",
    "start": "326610",
    "end": "332760"
  },
  {
    "text": "didn't build its own collections library instead they use the Java collections library but to enhance them they use",
    "start": "332760",
    "end": "338820"
  },
  {
    "text": "another language feature in Kotlin called extension methods and extension methods provide a really nice way to",
    "start": "338820",
    "end": "344510"
  },
  {
    "text": "interoperate with Java ap is the Kotlin syntax is expressive and concise and",
    "start": "344510",
    "end": "350700"
  },
  {
    "text": "we'll see that as we go through some examples in a little bit and then it also the the way there's some language",
    "start": "350700",
    "end": "356430"
  },
  {
    "text": "features in Kotlin the enable it make it really great for building dsls and doing typesafe builders and we'll see some of",
    "start": "356430",
    "end": "363180"
  },
  {
    "text": "that in a little bit so why Kotlin it's it's fairly new since 1.0 is only about four years ago",
    "start": "363180",
    "end": "370770"
  },
  {
    "start": "364000",
    "end": "459000"
  },
  {
    "text": "but it is grown over time it is now the the standard language for building",
    "start": "370770",
    "end": "376770"
  },
  {
    "text": "Android applications and so it's getting a lot of usage from that but it's now",
    "start": "376770",
    "end": "381960"
  },
  {
    "text": "also growing in other areas as well like on the server side there's great support in java web frameworks like spring boot",
    "start": "381960",
    "end": "389370"
  },
  {
    "text": "for Kotlin and a number of other web frameworks and and restful frameworks that have great support for Kotlin as",
    "start": "389370",
    "end": "396060"
  },
  {
    "text": "well and just at last fall Kotlin became the number two",
    "start": "396060",
    "end": "401190"
  },
  {
    "text": "most used jvm language behind java of course and then scala behind that side",
    "start": "401190",
    "end": "406290"
  },
  {
    "text": "overtook scala on that list so a lot of great energy around around Colin",
    "start": "406290",
    "end": "412830"
  },
  {
    "text": "another example that I find pretty compelling and something that I really love in Colin is that in Java we used to",
    "start": "412830",
    "end": "421140"
  },
  {
    "text": "have to use javabeans syntax to write out our data classes our ability to hold",
    "start": "421140",
    "end": "428760"
  },
  {
    "text": "data in an object and you'd have to generate the getters and setters and",
    "start": "428760",
    "end": "434000"
  },
  {
    "text": "equals and hashcode and yeah your ID you can generate those for you and your to string but it sure is nice to have a",
    "start": "434000",
    "end": "441390"
  },
  {
    "text": "concise syntax for defining these types of data classes that have values on them",
    "start": "441390",
    "end": "446490"
  },
  {
    "text": "and the to string and equals and hashcode methods are all generated by the compiler and that's just a data",
    "start": "446490",
    "end": "452910"
  },
  {
    "text": "class in column so that's something that that I use a lot makes my code a lot a lot cleaner easier to read okay so we'll",
    "start": "452910",
    "end": "460800"
  },
  {
    "start": "459000",
    "end": "631000"
  },
  {
    "text": "see a lot more Kotlin in a couple minutes but let's go on to G RPC so G RPC combines together a couple different",
    "start": "460800",
    "end": "468510"
  },
  {
    "text": "pieces the first piece is protocol buffers and protocol buffers are a nice",
    "start": "468510",
    "end": "473970"
  },
  {
    "text": "declarative way to define messages and services and then what we can do is take",
    "start": "473970",
    "end": "479760"
  },
  {
    "text": "this this declarative definition of our messages and services and we can then",
    "start": "479760",
    "end": "486450"
  },
  {
    "text": "wrap services around those things actual services that we run and interact with so the protocol buffers they are",
    "start": "486450",
    "end": "493590"
  },
  {
    "text": "language agnostic so we define them in one declarative format and then what we",
    "start": "493590",
    "end": "499140"
  },
  {
    "text": "do is we generate from that declarative format the different what are called stubs that we can interact with in Java",
    "start": "499140",
    "end": "506130"
  },
  {
    "text": "or now in Kotlin or in JavaScript or whatever so so the nice thing is we have",
    "start": "506130",
    "end": "512130"
  },
  {
    "text": "that language agnostic definition that allows us to communicate between different things without having to write",
    "start": "512130",
    "end": "519000"
  },
  {
    "text": "our parsers and our data objects and all that in in multiple languages protobufs",
    "start": "519000",
    "end": "525750"
  },
  {
    "text": "also support has great support for evolving protocols so if we want to add fields to a message we can do that and",
    "start": "525750",
    "end": "533130"
  },
  {
    "text": "not things they're also strongly types this gives us a strongly typed representation",
    "start": "533130",
    "end": "539220"
  },
  {
    "text": "of our transport protocols and so it's nice to have that over Jason which",
    "start": "539220",
    "end": "544860"
  },
  {
    "text": "obviously doesn't have any strong typing to it so what we do with with our",
    "start": "544860",
    "end": "551550"
  },
  {
    "text": "protocol buffers is we generate our serializers and deserialize errs for our messages those get generated by the",
    "start": "551550",
    "end": "558300"
  },
  {
    "text": "protobuf proto C compiler which we'll see in a little bit and then we also generate our service stub so you'll see",
    "start": "558300",
    "end": "565230"
  },
  {
    "text": "that in this example I've defined a greeter and it has an RPC service so it's something that takes an input and",
    "start": "565230",
    "end": "571860"
  },
  {
    "text": "returns an output of those those messages and that what this will do is generate the client and the server to be",
    "start": "571860",
    "end": "579180"
  },
  {
    "text": "able to use that service so generally we generate both of those and then we get",
    "start": "579180",
    "end": "584519"
  },
  {
    "text": "superfast Network our PC so the reason why we get superfast network RPC is one",
    "start": "584519",
    "end": "590850"
  },
  {
    "text": "that the protobuf the protocol is very concise and that's nice but also G RPC",
    "start": "590850",
    "end": "597240"
  },
  {
    "text": "is built on top of HTTP 2 and HTTP 2 brings with it a bunch of great features",
    "start": "597240",
    "end": "603779"
  },
  {
    "text": "for doing this very optimized communication between a client server so",
    "start": "603779",
    "end": "609630"
  },
  {
    "text": "it uses by O'Brien Airy protocol which is allows us to be much more concise it has a stream support so we don't need to",
    "start": "609630",
    "end": "616620"
  },
  {
    "text": "use WebSockets we we have native Stream support in HTTP to we can do stream",
    "start": "616620",
    "end": "621839"
  },
  {
    "text": "multiplexing so we can do multiple channels of communication over a single connection and then it has other",
    "start": "621839",
    "end": "627149"
  },
  {
    "text": "features like header compression to save bandwidth and that sort of thing so so",
    "start": "627149",
    "end": "633779"
  },
  {
    "text": "that is our quick rundown on Kotlin and G RPC and the announcement that we made",
    "start": "633779",
    "end": "639540"
  },
  {
    "text": "yesterday was open sourcing G RPC Kotlin and what that is is bringing together these two great great technologies so",
    "start": "639540",
    "end": "648420"
  },
  {
    "text": "let's run through a little bit about what it is and then we'll we'll see it for real so what gr PC Kotlin does is it's going",
    "start": "648420",
    "end": "654870"
  },
  {
    "text": "to generate Kotlin friendly G RPC stubs for us so the code that gets generated from our protobuf definition is going to",
    "start": "654870",
    "end": "662189"
  },
  {
    "text": "work great with Colin this is built on top of G RPC Java so",
    "start": "662189",
    "end": "668100"
  },
  {
    "text": "we're we're building on top of that because there is still a bunch of Java underneath the covers for a lot of this",
    "start": "668100",
    "end": "674160"
  },
  {
    "text": "stuff and so we build on top of that and add the Kotlin friendly pieces on top",
    "start": "674160",
    "end": "680060"
  },
  {
    "text": "but we can then add support for nice things in Kotlin like co-routines for",
    "start": "680060",
    "end": "685350"
  },
  {
    "text": "doing async and then also the flow api which is a stream oriented API so",
    "start": "685350",
    "end": "691370"
  },
  {
    "text": "co-routines is a a metaphor as a way to do an async callback so you're gonna go",
    "start": "691370",
    "end": "698760"
  },
  {
    "text": "do something let's say make a network call and then we're going to get a response back but we don't want it to",
    "start": "698760",
    "end": "705480"
  },
  {
    "text": "have to block everything and the normal blocking Java world the program wouldn't",
    "start": "705480",
    "end": "710790"
  },
  {
    "text": "be able to continue in that thread while we're waiting for that response to come",
    "start": "710790",
    "end": "716010"
  },
  {
    "text": "back but with co-routines we can fire off the request and because we have a non-blocking network channel to to be",
    "start": "716010",
    "end": "724560"
  },
  {
    "text": "able to not block on then then we get that callback essentially when when the response comes back",
    "start": "724560",
    "end": "729870"
  },
  {
    "text": "and so co-routines fit really well with that async call RPC call but the other",
    "start": "729870",
    "end": "737030"
  },
  {
    "text": "paradigm that we can be in is using streams and a stream allows us to you to",
    "start": "737030",
    "end": "744120"
  },
  {
    "text": "broadcast events and then consume those broadcast to the events and the Kotlin",
    "start": "744120",
    "end": "749550"
  },
  {
    "text": "flow api gives us a nice Kotlin way to to interact with streams and it's built",
    "start": "749550",
    "end": "756270"
  },
  {
    "text": "on top of the some foundational work the reactive streams project which supports",
    "start": "756270",
    "end": "762420"
  },
  {
    "text": "the ability to do back pressure on these streams as well so some nice features for stream handling so to use Kotlin g",
    "start": "762420",
    "end": "770490"
  },
  {
    "text": "RPC JBC Kotlin we are going to plug into a maven or Gradle build using the",
    "start": "770490",
    "end": "776820"
  },
  {
    "text": "existing protobuf plugin so we'll use the what if you were doing java with G",
    "start": "776820",
    "end": "782910"
  },
  {
    "text": "RPC them then it's gonna look very similar and we'll see that in a little bit just with the Kotlin pieces built on",
    "start": "782910",
    "end": "789390"
  },
  {
    "text": "top and all this is available today in maven central as version zero point one",
    "start": "789390",
    "end": "795450"
  },
  {
    "text": "point one okay so let's take a look at a demo and I'm gonna be showing demo encodes for",
    "start": "795450",
    "end": "801510"
  },
  {
    "start": "796000",
    "end": "1197000"
  },
  {
    "text": "the rest and and feel free to ask your questions and David or Lewis or Brent if",
    "start": "801510",
    "end": "808080"
  },
  {
    "text": "there's any questions that came in so far the that need answering now feel free to chime in okay so let's start",
    "start": "808080",
    "end": "814560"
  },
  {
    "text": "with our very simple hello world example hair I've got my my Gradle project and I",
    "start": "814560",
    "end": "822420"
  },
  {
    "text": "have defined some versions for things I am including the protobuf Gradle plug-in and the Kotlin Gradle plug-in so that",
    "start": "822420",
    "end": "829740"
  },
  {
    "text": "this project knows how to support Kotlin and and knows how to generate protobufs",
    "start": "829740",
    "end": "835170"
  },
  {
    "text": "so then I'm going to apply those plugins now I do need to include the G RPC",
    "start": "835170",
    "end": "840420"
  },
  {
    "text": "Collins stub and this is part of what we need to be able to once the code is",
    "start": "840420",
    "end": "847080"
  },
  {
    "text": "generated there are some dependencies in that generated code and this is where those come from",
    "start": "847080",
    "end": "852210"
  },
  {
    "text": "then we're gonna include our Kotlin standard stuff we're gonna include our protobuf and your RPC standard stuff so",
    "start": "852210",
    "end": "858930"
  },
  {
    "text": "you'll see the protobuf Java Porter both Java util I'm using Neddie witchy RPC is",
    "start": "858930",
    "end": "865200"
  },
  {
    "text": "the actual server and client HTTP implementation and then we get into our",
    "start": "865200",
    "end": "871290"
  },
  {
    "text": "protobuf configuration where we are going to have a plug-in to the proto C",
    "start": "871290",
    "end": "878160"
  },
  {
    "text": "compiler which is going to do the Java prota C compliation and then we're going",
    "start": "878160",
    "end": "884490"
  },
  {
    "text": "to also do the Kotlin one so we do both of those and then there's a little bit more configuration than this but but",
    "start": "884490",
    "end": "890310"
  },
  {
    "text": "that's kind of it okay so then I've got my protobuf definition my protobuf",
    "start": "890310",
    "end": "896880"
  },
  {
    "text": "definition i have to find my service very similar to what you saw before this is an RPC called say hello",
    "start": "896880",
    "end": "902820"
  },
  {
    "text": "it takes in an input of hello requests and returns an output of hello reply so",
    "start": "902820",
    "end": "908370"
  },
  {
    "text": "then we can see our messages here hello request has a name and hello reply has a message so that's our declarative",
    "start": "908370",
    "end": "915589"
  },
  {
    "text": "protobuf for our g RPC service then let's go over to our server and our",
    "start": "915589",
    "end": "922589"
  },
  {
    "text": "server is written and Colin and there's some work here that is just starting up",
    "start": "922589",
    "end": "928080"
  },
  {
    "text": "the server listening on and doing that sort of thing and handling shut down the interesting piece",
    "start": "928080",
    "end": "934680"
  },
  {
    "text": "of this is that I'm extending the greeter GRP ckt and the greeter co-routine imple base and so that was",
    "start": "934680",
    "end": "942480"
  },
  {
    "text": "generated from my my protobuf and now I create an instance of this class and I",
    "start": "942480",
    "end": "948689"
  },
  {
    "text": "override the say hello method and it's going to be take the same parameters",
    "start": "948689",
    "end": "954029"
  },
  {
    "text": "just that the that the interface had which it came from that protobuf it's",
    "start": "954029",
    "end": "961050"
  },
  {
    "text": "going to take in a hello request and return a hello reply and you'll see that this is a suspend fun which means that",
    "start": "961050",
    "end": "968399"
  },
  {
    "text": "it's using co-routines to to do this okay so what I'm gonna do in this case",
    "start": "968399",
    "end": "973949"
  },
  {
    "text": "I'm going to handle my requests and how I'm gonna handle it is I'm going to create a hello reply I'm gonna use the",
    "start": "973949",
    "end": "981720"
  },
  {
    "text": "Builder for it I'm going to set the message in that hello reply to say hello",
    "start": "981720",
    "end": "987480"
  },
  {
    "text": "and then whatever the name that came in the request was and then I'm gonna build that and you'll see that build returns a",
    "start": "987480",
    "end": "993540"
  },
  {
    "text": "Hello reply and so that there I've implemented my simple server so I'm",
    "start": "993540",
    "end": "999930"
  },
  {
    "text": "gonna start the server up so that we can see this thing actually work so you see it's up and running listening on that",
    "start": "999930",
    "end": "1006470"
  },
  {
    "text": "port and then let's go take a look at our client so for our client let's first",
    "start": "1006470",
    "end": "1012620"
  },
  {
    "text": "go down to our main method and I have to do a little bit of setup here to connect",
    "start": "1012620",
    "end": "1017809"
  },
  {
    "text": "to the server so here's where I'm doing my message channel builder giving it the server that I want to connect to in my",
    "start": "1017809",
    "end": "1023870"
  },
  {
    "text": "case just localhost in that port and then I'm going to tell it create my",
    "start": "1023870",
    "end": "1029688"
  },
  {
    "text": "hello world client and so this was part of the code that we'll see in in a",
    "start": "1029689",
    "end": "1035178"
  },
  {
    "text": "minute and then we're going to figure out what we want to send and if there",
    "start": "1035179",
    "end": "1041209"
  },
  {
    "text": "was an argument to this program then I'll use that otherwise I'll just use world and now we call the hello world",
    "start": "1041209",
    "end": "1047390"
  },
  {
    "text": "client dot greet method and give it this string user so let's go take a look at",
    "start": "1047390",
    "end": "1052730"
  },
  {
    "text": "that and see what's in there so we've got our hello world client it takes in a parameter of channel and which is",
    "start": "1052730",
    "end": "1059570"
  },
  {
    "text": "closeable and then we're using our stub that was generated from the protobuf definition and now",
    "start": "1059570",
    "end": "1067029"
  },
  {
    "text": "we've got this function greet which takes in a name string and then because we are using co-routines where we need",
    "start": "1067029",
    "end": "1074679"
  },
  {
    "text": "to in this case we want to just run this thing send it the the message get the",
    "start": "1074679",
    "end": "1080110"
  },
  {
    "text": "response and then exit and so the way in this case instead of doing a suspend fun is we're just going to say block on on",
    "start": "1080110",
    "end": "1087220"
  },
  {
    "text": "this thing run blocking and we're going to assemble our request so we're going to use that builder that generated",
    "start": "1087220",
    "end": "1093429"
  },
  {
    "text": "builder set the name to the name that we got in and then we're going to use our stub which is our way to communicate",
    "start": "1093429",
    "end": "1100029"
  },
  {
    "text": "with that server we're gonna call the say hello method give it our request and then when we get the response back which",
    "start": "1100029",
    "end": "1107049"
  },
  {
    "text": "is asynchronous but because we're in run blocking it's going to automatically",
    "start": "1107049",
    "end": "1112480"
  },
  {
    "text": "await this result for us and in a non blocking way and then it's going to get",
    "start": "1112480",
    "end": "1120159"
  },
  {
    "text": "the message out of the response and output that so that's our very simple hello world client let's run this thing",
    "start": "1120159",
    "end": "1126669"
  },
  {
    "text": "and see it actually work so there we go we now see that the greeter got a",
    "start": "1126669",
    "end": "1133389"
  },
  {
    "text": "message back which was hello world which came from the server which combined the string world and prepended hello on in",
    "start": "1133389",
    "end": "1140679"
  },
  {
    "text": "front of that so very trivial simple example there but hopefully that gives you a quick quick rundown of how to",
    "start": "1140679",
    "end": "1148929"
  },
  {
    "text": "start building a G RPC Kotlin application with G RPC Colin",
    "start": "1148929",
    "end": "1154120"
  },
  {
    "text": "now if we didn't want to go see some of the code that is generated by the proto",
    "start": "1154120",
    "end": "1159279"
  },
  {
    "text": "C plug-in we can come in here and look at our generated source and go into proto and see the different generated",
    "start": "1159279",
    "end": "1167470"
  },
  {
    "text": "targets from our build there's the greeter GRP see here's the Kotlin piece a piece that was generated and some some",
    "start": "1167470",
    "end": "1175510"
  },
  {
    "text": "Java that was generated here with our our actual value objects our hello apply",
    "start": "1175510",
    "end": "1181840"
  },
  {
    "text": "hello requests and the builders for those okay so you might be wondering about this builder syntax that that part",
    "start": "1181840",
    "end": "1190000"
  },
  {
    "text": "is not super Kotlin e and it's it's very",
    "start": "1190000",
    "end": "1195460"
  },
  {
    "text": "java ee that's how we would do that in Java but Kotlin has data classes and",
    "start": "1195460",
    "end": "1201020"
  },
  {
    "start": "1197000",
    "end": "1260000"
  },
  {
    "text": "so wouldn't it be nice if we could also generate the Kotlin idiomatic version of",
    "start": "1201020",
    "end": "1207200"
  },
  {
    "text": "those data classes as well and this is actually a project that we're working on for Kotlin protobufs which will allow us",
    "start": "1207200",
    "end": "1213800"
  },
  {
    "text": "to have a much more colony syntax for those pieces that we're currently using the Java G RPC pretty buff plug-in for",
    "start": "1213800",
    "end": "1222050"
  },
  {
    "text": "so that's project that we're working on and coming soon on that one hey James we",
    "start": "1222050",
    "end": "1227960"
  },
  {
    "text": "we got one question from the Q&A that it might make sense to answer about the",
    "start": "1227960",
    "end": "1234920"
  },
  {
    "text": "demo so one person anonymous asked does the G RPC Gradle plugin support the",
    "start": "1234920",
    "end": "1241730"
  },
  {
    "text": "Kotlin Gradle DSL I can answer that one",
    "start": "1241730",
    "end": "1247570"
  },
  {
    "text": "does but it's experimental I'll post Delaney awesome Thank You",
    "start": "1247570",
    "end": "1253850"
  },
  {
    "text": "Brent and thanks David for chiming in good to have you you here helping okay",
    "start": "1253850",
    "end": "1261190"
  },
  {
    "start": "1260000",
    "end": "1476000"
  },
  {
    "text": "so we've got our basic hello world example and I'm going to close those",
    "start": "1261190",
    "end": "1266270"
  },
  {
    "text": "down because we're going to continue on with the the next example here which is",
    "start": "1266270",
    "end": "1271820"
  },
  {
    "text": "a maven example and I wanted to show you what the maven build looks like for this same sort of project so if you are using",
    "start": "1271820",
    "end": "1279800"
  },
  {
    "text": "maven instead of Gradle that's great you can use the same the same sort of thing to be able to do this so let's walk",
    "start": "1279800",
    "end": "1286400"
  },
  {
    "text": "through the pieces here we've got the Collins stuff we've got the protobuf stuff we've got the G RPC stuff just",
    "start": "1286400",
    "end": "1292100"
  },
  {
    "text": "like you've already seen but then we also have a dependency on that G RPC Collins dub version 0.1 dot 1 and and so",
    "start": "1292100",
    "end": "1301550"
  },
  {
    "text": "that brings in the dependencies that are generated code need and then we're using the protobuf maven plugin and we're just",
    "start": "1301550",
    "end": "1309710"
  },
  {
    "text": "using the standard plug in 4 for generated in our protobufs",
    "start": "1309710",
    "end": "1314930"
  },
  {
    "text": "and you'll see just like when the griddle one we're using G RPC Java to generate some of the pieces here and",
    "start": "1314930",
    "end": "1320360"
  },
  {
    "text": "then we also have our G RPC Kotlin which generates the Kotlin pieces and so this",
    "start": "1320360",
    "end": "1326060"
  },
  {
    "text": "is from the new open source project that we announced yesterday the Kotlin plugin ok",
    "start": "1326060",
    "end": "1331490"
  },
  {
    "text": "then of course we have the Colin compiler plug-in in here as well so I won't run through the proto and code on",
    "start": "1331490",
    "end": "1337580"
  },
  {
    "text": "this one because it's the exact same as what you've already seen but I will share at the end the link to go get all",
    "start": "1337580",
    "end": "1343880"
  },
  {
    "text": "of these samples okay so that's the the maven palm build now let's go on to the",
    "start": "1343880",
    "end": "1349520"
  },
  {
    "text": "next example and for this one we are doing streaming so in this case we are",
    "start": "1349520",
    "end": "1355970"
  },
  {
    "text": "doing server streaming so what that means is that we have an RPC which is say hello stream and this one takes a",
    "start": "1355970",
    "end": "1362720"
  },
  {
    "text": "request but then returns a stream of hello replies so instead of just a",
    "start": "1362720",
    "end": "1367850"
  },
  {
    "text": "single hello reply it's going to return a stream of them so let's look at how this particular one is implemented we'll",
    "start": "1367850",
    "end": "1374510"
  },
  {
    "text": "start with the server and it is all very similar to the code that you've seen before but instead of returning a",
    "start": "1374510",
    "end": "1381850"
  },
  {
    "text": "suspend fund with the hello reply like we saw before in this case what we're",
    "start": "1381850",
    "end": "1387500"
  },
  {
    "text": "going to return is a flow of Hello replies so this is using the Kotlin API for streaming for verb flows",
    "start": "1387500",
    "end": "1394460"
  },
  {
    "text": "and so we're gonna create a flow and then my very trivial flow here all it",
    "start": "1394460",
    "end": "1400340"
  },
  {
    "text": "does is repeatedly once a second emit a hello reply and the hello reply is very",
    "start": "1400340",
    "end": "1406820"
  },
  {
    "text": "similar to what we saw before it's just the request the name of the request and that turned into a lower five okay so",
    "start": "1406820",
    "end": "1413360"
  },
  {
    "text": "that's our server implementation and then let's go take a look at our client so for our client what we're gonna do is",
    "start": "1413360",
    "end": "1421220"
  },
  {
    "text": "again we're gonna run blocking because this is just going to to do its thing and then exit and so we're going to",
    "start": "1421220",
    "end": "1428030"
  },
  {
    "text": "create our request just like we did before but this time when we call that",
    "start": "1428030",
    "end": "1433040"
  },
  {
    "text": "stub say hello stream and give it the request what we actually get back is a flow and so then we can do all sorts of",
    "start": "1433040",
    "end": "1439850"
  },
  {
    "text": "flow operations on this thing one of the flow operations is called collect what",
    "start": "1439850",
    "end": "1444980"
  },
  {
    "text": "collect does is every time there is a an element emitted from this flow you can",
    "start": "1444980",
    "end": "1451670"
  },
  {
    "text": "have a lambda function that then does something and in our case very trivially",
    "start": "1451670",
    "end": "1457010"
  },
  {
    "text": "we are going to just print out that message so and then the rest of this looks very similar to what you saw",
    "start": "1457010",
    "end": "1463700"
  },
  {
    "text": "before okay so so we've got our server streaming example and I didn't want to",
    "start": "1463700",
    "end": "1469850"
  },
  {
    "text": "show you that I could run this locally but I did want to show you that this all does work on cloud services as well and",
    "start": "1469850",
    "end": "1476860"
  },
  {
    "start": "1476000",
    "end": "1771000"
  },
  {
    "text": "and we have a cloud service that runs is great which is called cloud run and so",
    "start": "1476860",
    "end": "1482539"
  },
  {
    "text": "in our example this is the GRP see hello world streaming example you can deploy",
    "start": "1482539",
    "end": "1487820"
  },
  {
    "text": "this on cloud run and that will deploy create a docker container deploy that",
    "start": "1487820",
    "end": "1492830"
  },
  {
    "text": "docker container on the managed cloud run service you could also deploy that container on kubernetes or other places",
    "start": "1492830",
    "end": "1498890"
  },
  {
    "text": "that run containers and now I've already done that piece and deployed that application so it's all up and running",
    "start": "1498890",
    "end": "1506149"
  },
  {
    "text": "here on cloud run and so that's that's great that the it's up and running on",
    "start": "1506149",
    "end": "1512659"
  },
  {
    "text": "the cloud but now we need a way to run our client to call it and so I'm gonna go over into cloud shell and I've",
    "start": "1512659",
    "end": "1519380"
  },
  {
    "text": "already set this up so that I can just do the docker run and then I need to give it the parameter of the server to",
    "start": "1519380",
    "end": "1526340"
  },
  {
    "text": "connect to and because it doesn't know about what the what the endpoint for",
    "start": "1526340",
    "end": "1531350"
  },
  {
    "text": "that server is so I have to tell it and then I'm going to give it my docker container that I created which has both",
    "start": "1531350",
    "end": "1537860"
  },
  {
    "text": "the server app and the client app in it and of course you could create your docker containers however you want but I",
    "start": "1537860",
    "end": "1543860"
  },
  {
    "text": "put them both into a single docker container and then I give it a parameter to say which process I want to run and",
    "start": "1543860",
    "end": "1549169"
  },
  {
    "text": "in this case I'm gonna run the client and so now that will go get the docker",
    "start": "1549169",
    "end": "1554210"
  },
  {
    "text": "container run it with that parameter and it's gonna run that client that we were just looking at so it's gonna run this",
    "start": "1554210",
    "end": "1560929"
  },
  {
    "text": "client that's going to make that request but get the stream back and then output the result so let's go over back to our",
    "start": "1560929",
    "end": "1567649"
  },
  {
    "text": "cloud shell and you'll see that now sure enough our server is responding with a stream that's that's emitting a value",
    "start": "1567649",
    "end": "1573980"
  },
  {
    "text": "once a second that's taking in our case the name that I gave it was just the server name that we were connecting to",
    "start": "1573980",
    "end": "1579590"
  },
  {
    "text": "but you'll see that now it's outputting that once a second so it just will continually stream that output okay so",
    "start": "1579590",
    "end": "1587240"
  },
  {
    "text": "that's our server streaming example and and runs great on cloud run or other",
    "start": "1587240",
    "end": "1593929"
  },
  {
    "text": "places that can run containers or really anywhere that can run a G RPC server let's take a look at our last",
    "start": "1593929",
    "end": "1601730"
  },
  {
    "text": "example now which is taking this a little bit further so we could also have a service that does client streaming so",
    "start": "1601730",
    "end": "1609139"
  },
  {
    "text": "in a client streaming example we would take in a stream and then just return a single value but in this case we want to",
    "start": "1609139",
    "end": "1615109"
  },
  {
    "text": "do to show bi-directional streaming where our RPC takes in a stream but then",
    "start": "1615109",
    "end": "1621049"
  },
  {
    "text": "also returns a stream and so let's let's look at the server for this one so our",
    "start": "1621049",
    "end": "1627230"
  },
  {
    "text": "server implements that function that takes a flow of flow requests and returns a flow of hello reply and so I",
    "start": "1627230",
    "end": "1634999"
  },
  {
    "text": "need to somehow do something with this stream and turn it into another stream",
    "start": "1634999",
    "end": "1640309"
  },
  {
    "text": "and so a very typical way to do this on a stream is to do what's called a map and a map just says every time an",
    "start": "1640309",
    "end": "1646999"
  },
  {
    "text": "element emits on this requests then do something with it and so what I'm going to do is I'm going",
    "start": "1646999",
    "end": "1653539"
  },
  {
    "text": "to print it and then I'm going to create a hello reply and this will just automatically get returned and so that",
    "start": "1653539",
    "end": "1660649"
  },
  {
    "text": "now has transformed my flow of flow requests into a flow of hello reply and",
    "start": "1660649",
    "end": "1666499"
  },
  {
    "text": "so I've done my my stream transformation all the rest of this code looks the same",
    "start": "1666499",
    "end": "1671690"
  },
  {
    "text": "as what you're familiar with and so this is kind of like a echo echo service and",
    "start": "1671690",
    "end": "1679609"
  },
  {
    "text": "so then on my client side I need to give this thing a flow so I'm going to assemble a flow and very similar to what",
    "start": "1679609",
    "end": "1687109"
  },
  {
    "text": "you saw before my flow is going to once a second emit a value which is going to be my hello request and so now this is a",
    "start": "1687109",
    "end": "1695299"
  },
  {
    "text": "flow of hello requests and let's go start up our server get that run in",
    "start": "1695299",
    "end": "1700909"
  },
  {
    "text": "while we're waiting while we go through the rest of this okay so now I have my client I'm gonna call say hello on my",
    "start": "1700909",
    "end": "1708139"
  },
  {
    "text": "client and give it the flow and that's going to and well let's go see let's go look at that hello say hello to see what",
    "start": "1708139",
    "end": "1715070"
  },
  {
    "text": "happens so this is a suspension it runs in a co-routine scope and you'll see",
    "start": "1715070",
    "end": "1720710"
  },
  {
    "text": "that I'm calling my stub say hello stream I'm giving it my my hope flow of",
    "start": "1720710",
    "end": "1725749"
  },
  {
    "text": "low request and then every time I get an element a response I'm just going to",
    "start": "1725749",
    "end": "1731269"
  },
  {
    "text": "print it so very simple examples here but hopefully it helps give you the the gist",
    "start": "1731269",
    "end": "1736340"
  },
  {
    "text": "of using G RPC with Colin so let's run this one make sure that it works so there we go we see a hello world",
    "start": "1736340",
    "end": "1742430"
  },
  {
    "text": "repeating every second so now now that's a bi-directional string because my client has producing a stream that's",
    "start": "1742430",
    "end": "1748520"
  },
  {
    "text": "going to the server being transformed and then being sent back to the client and so there we go by directional",
    "start": "1748520",
    "end": "1756080"
  },
  {
    "text": "streaming there with with Colin and gr PCM okay so those are the four examples",
    "start": "1756080",
    "end": "1764000"
  },
  {
    "text": "that I want to show you and I'll give you some information on where to find all those so this is all in the slides",
    "start": "1764000",
    "end": "1770960"
  },
  {
    "text": "but we saw the code in IntelliJ so the best place to learn how to get started",
    "start": "1770960",
    "end": "1776510"
  },
  {
    "start": "1771000",
    "end": "2251000"
  },
  {
    "text": "is in the G RPC Docs you can go to the quick start for Kotlin and great documentation there if you do want to",
    "start": "1776510",
    "end": "1783260"
  },
  {
    "text": "check out those those four samples that I showed you those are on the Google",
    "start": "1783260",
    "end": "1788720"
  },
  {
    "text": "cloud platform github and then under common samples and then they're in a directory called run because those are",
    "start": "1788720",
    "end": "1795140"
  },
  {
    "text": "the cloud run examples so that's where all those examples that you saw",
    "start": "1795140",
    "end": "1800200"
  },
  {
    "text": "okay so that was what I wanted to show you with G RPC Kotlin and and we have",
    "start": "1800200",
    "end": "1806000"
  },
  {
    "text": "some time now for questions and we've got Luis and Brandt and David who will be helping us with those and yeah so",
    "start": "1806000",
    "end": "1814280"
  },
  {
    "text": "let's see what questions are awesome thanks James for a great presentation and demo oh this is great okay so I'll",
    "start": "1814280",
    "end": "1821210"
  },
  {
    "text": "go ahead and read that question and we'll go ahead and dig in here and so I'm probably butchering this but",
    "start": "1821210",
    "end": "1827330"
  },
  {
    "text": "shirisha asks I am looking into the github repo of G RPC Kotlin how can we",
    "start": "1827330",
    "end": "1833390"
  },
  {
    "text": "start contributing to it I guess you would just answered that through the docs rate for actually contributing",
    "start": "1833390",
    "end": "1838700"
  },
  {
    "text": "which of course we would love contributions we open-source this so that so that we can get everyone",
    "start": "1838700",
    "end": "1843890"
  },
  {
    "text": "involved in making it better and so that is actually on github calm /g RPC and",
    "start": "1843890",
    "end": "1849110"
  },
  {
    "text": "then gr PC - Kotlin and yes we would certainly love contributions to that that repo and and so that's where the",
    "start": "1849110",
    "end": "1855950"
  },
  {
    "text": "source code for the stub that I pointed out as a dependency and then the proto C",
    "start": "1855950",
    "end": "1861470"
  },
  {
    "text": "plug-in all the code for that stuff is is all in that repo so certainly would love contributions i'm i'd like to china",
    "start": "1861470",
    "end": "1868700"
  },
  {
    "text": "chime in right there also and just say probably the best way that you can help is to use the library and give us",
    "start": "1868700",
    "end": "1875300"
  },
  {
    "text": "feedback and report bugs or issues if you find them and also of course fix those issues if you feel so inclined and",
    "start": "1875300",
    "end": "1881990"
  },
  {
    "text": "we do have a running list of issues on that repo that would be happy if anyone",
    "start": "1881990",
    "end": "1887390"
  },
  {
    "text": "wanted to to give a crack at awesome thanks Brent great okay the next",
    "start": "1887390",
    "end": "1893780"
  },
  {
    "text": "question is from sue Brett is it possible to return a file example a zip",
    "start": "1893780",
    "end": "1899870"
  },
  {
    "text": "file less than 1 MB as a response from G RPC server yeah let's see Luis or Brent",
    "start": "1899870",
    "end": "1908840"
  },
  {
    "text": "do you have any insight on on returning files I mean you certainly could could just turn the file into some bytes and",
    "start": "1908840",
    "end": "1914900"
  },
  {
    "text": "send the bytes is that the best way to do that or is there a better flow or an end way to do to do file transfers over",
    "start": "1914900",
    "end": "1922700"
  },
  {
    "text": "G RPC that's certainly how I'd do it",
    "start": "1922700",
    "end": "1928419"
  },
  {
    "text": "just with the with the bites turn him into a bites or would there be a better flow",
    "start": "1935110",
    "end": "1940990"
  },
  {
    "text": "way to do it listen yeah yeah just turn them into by cool hey I think your PC",
    "start": "1940990",
    "end": "1950010"
  },
  {
    "text": "isn't um single messages might have a",
    "start": "1950010",
    "end": "1956080"
  },
  {
    "text": "cap I think it's above a megabyte now but you risk using ours you turn it into",
    "start": "1956080",
    "end": "1961930"
  },
  {
    "text": "a stream and concatenate them and send those messages and put them back",
    "start": "1961930",
    "end": "1967060"
  },
  {
    "text": "together on the client which should work quite well with the flows that's a good",
    "start": "1967060",
    "end": "1974440"
  },
  {
    "text": "point I I would guess that there is a way to go from a input stream in Java to",
    "start": "1974440",
    "end": "1979750"
  },
  {
    "text": "a flow and Kotlin that's I haven't looked in that in particular but I guess",
    "start": "1979750",
    "end": "1985210"
  },
  {
    "text": "that there is and if there is then yeah you could read your file into an input stream and then turn it into a flow and then stream it but if anyone wants to",
    "start": "1985210",
    "end": "1991510"
  },
  {
    "text": "try it and if you have problems then please file issues on the gr PC Kotlin repo with that Tommy asks what's the",
    "start": "1991510",
    "end": "2002520"
  },
  {
    "text": "biggest difference between Kotlin and going another great gmv option as it relates to G RPC what is your number one",
    "start": "2002520",
    "end": "2010110"
  },
  {
    "text": "favorite aspect about Kotlin if you could change one thing to make Kotlin better what would it be so that's like a",
    "start": "2010110",
    "end": "2015540"
  },
  {
    "text": "three in one question yeah for for me I do most of my programming on the JVM and",
    "start": "2015540",
    "end": "2022770"
  },
  {
    "text": "so so Cotton's ability to to interoperate with Java and be on the JVM is certainly good for me there's also a",
    "start": "2022770",
    "end": "2031350"
  },
  {
    "text": "lot of really nice functional programming oriented features in Kotlin that I really enjoy when I take that",
    "start": "2031350",
    "end": "2038370"
  },
  {
    "text": "really far there's a functional programming library and Kotlin called arrow which is really nice so there's",
    "start": "2038370",
    "end": "2044420"
  },
  {
    "text": "four for me and and my preference is I I really enjoy programming in Kotlin for",
    "start": "2044420",
    "end": "2049860"
  },
  {
    "text": "those reasons but maybe renter or Lewis wants to chime in or David with some other anecdotes on that hmm nothing",
    "start": "2049860",
    "end": "2060450"
  },
  {
    "text": "immediately comes to mind I mean I can think of one or two things I might",
    "start": "2060450",
    "end": "2065730"
  },
  {
    "text": "change about coming to answer the last part of um mostly um Feder said static analysis",
    "start": "2065730",
    "end": "2079260"
  },
  {
    "text": "plugging points but that's all I can think of girl",
    "start": "2079260",
    "end": "2086000"
  },
  {
    "text": "Brett's David I think dad cool nothing",
    "start": "2086000",
    "end": "2092730"
  },
  {
    "text": "over here nothing on land right we move",
    "start": "2092730",
    "end": "2098940"
  },
  {
    "text": "on to the next question garages asking for container container ASAP locations how heavy are these",
    "start": "2098940",
    "end": "2105510"
  },
  {
    "text": "dependencies was that a 256 and B image bolts yeah so the the the biggest",
    "start": "2105510",
    "end": "2114059"
  },
  {
    "text": "dependency is in really any continent application that's on the JVM is going",
    "start": "2114059",
    "end": "2119520"
  },
  {
    "text": "to be the JVM itself and so I was actually just exploring container layer",
    "start": "2119520",
    "end": "2124589"
  },
  {
    "text": "sizes recently and and found that that about as small as I could get a Kotlin",
    "start": "2124589",
    "end": "2132950"
  },
  {
    "text": "JVM based application was about 150 Meg's a very small portion of that is",
    "start": "2132950",
    "end": "2138930"
  },
  {
    "text": "the the generated code and the the stubs and so really a lot of that is actually",
    "start": "2138930",
    "end": "2144089"
  },
  {
    "text": "in the JVM itself there is a technology the Oracle is working on called growl VM",
    "start": "2144089",
    "end": "2149460"
  },
  {
    "text": "and growl viim allows you to take a Kotlin or Java or Scala any JVM",
    "start": "2149460",
    "end": "2154859"
  },
  {
    "text": "application and compile it down into native code doing ahead of time",
    "start": "2154859",
    "end": "2160200"
  },
  {
    "text": "compilation and when I did this on it wasn't a common project but but I think you could find similar effects I did",
    "start": "2160200",
    "end": "2166890"
  },
  {
    "text": "this on a scholar project recently and my output binary my output container that can run without without any",
    "start": "2166890",
    "end": "2174690"
  },
  {
    "text": "dependencies was twelve megabytes and so so you you with growl VM can get these",
    "start": "2174690",
    "end": "2180329"
  },
  {
    "text": "things a lot smaller and if you're doing I haven't looked to see what the growl",
    "start": "2180329",
    "end": "2186780"
  },
  {
    "text": "VM support for G RPC in particular is yet there is ways to get it to work with most stuff it just takes a little bit of",
    "start": "2186780",
    "end": "2193799"
  },
  {
    "text": "configuration where you have to specify any reflection information through a",
    "start": "2193799",
    "end": "2199950"
  },
  {
    "text": "configuration file but you can generate that that reflection mostly generate that reflection config",
    "start": "2199950",
    "end": "2206790"
  },
  {
    "text": "file using dravyam and so so something worth looking into and as we explore",
    "start": "2206790",
    "end": "2212640"
  },
  {
    "text": "that we will be sharing that on my Twitter and and other places as well for doing gr PC in crawl that's fun fun",
    "start": "2212640",
    "end": "2220650"
  },
  {
    "text": "thing that I will be looking into so thanks for that question right we just",
    "start": "2220650",
    "end": "2226410"
  },
  {
    "text": "had a question really does that come in about growl and growl VM would be tough",
    "start": "2226410",
    "end": "2231540"
  },
  {
    "text": "right since gr PC uses reflection which growl does not support so you can do",
    "start": "2231540",
    "end": "2239700"
  },
  {
    "text": "reflection you just withdraw VM you just have to have a configuration file that",
    "start": "2239700",
    "end": "2244829"
  },
  {
    "text": "specifies the reflection information and so I I did this on a project recently",
    "start": "2244829",
    "end": "2250020"
  },
  {
    "text": "and let me actually go see if I can show it to you so this is a project that does",
    "start": "2250020",
    "end": "2256589"
  },
  {
    "start": "2251000",
    "end": "2321000"
  },
  {
    "text": "a lot of reflection I think there is even some protobuf stuff in this",
    "start": "2256589",
    "end": "2265470"
  },
  {
    "text": "particular one and so if we go look I'll show you the I'm gonna get hub the",
    "start": "2265470",
    "end": "2273900"
  },
  {
    "text": "configuration file for the reflection you'll see that this is all the",
    "start": "2273900",
    "end": "2281280"
  },
  {
    "text": "information that specifies all the reflection that happens and so so it",
    "start": "2281280",
    "end": "2286680"
  },
  {
    "text": "certainly was possible and most of this file was generated for me but there were a few places where I had to to do some",
    "start": "2286680",
    "end": "2294240"
  },
  {
    "text": "manual tuning of this file to get it all I'll work in crack so you'll see there's",
    "start": "2294240",
    "end": "2299609"
  },
  {
    "text": "some comm Google Commons some stuff in here that was being used so so it is",
    "start": "2299609",
    "end": "2304800"
  },
  {
    "text": "possible I haven't done it on a gr PC application yet but I will give it a try and report back on my twitter which i'm",
    "start": "2304800",
    "end": "2312390"
  },
  {
    "text": "on twitter i am underscore james ward so follow me there if you are interested in",
    "start": "2312390",
    "end": "2318300"
  },
  {
    "text": "updates on that okay next question we do--",
    "start": "2318300",
    "end": "2324240"
  },
  {
    "start": "2321000",
    "end": "2364000"
  },
  {
    "text": "in server mode do tools like vertex spring Quercus support GRP see there are",
    "start": "2324240",
    "end": "2332130"
  },
  {
    "text": "some of those other server frameworks that do speak the g RPC protocol I I think most people that are doing G",
    "start": "2332130",
    "end": "2339270"
  },
  {
    "text": "RPC are just using the out-of-the-box gr PC Nettie's server but but yeah there",
    "start": "2339270",
    "end": "2344400"
  },
  {
    "text": "there are other frameworks that do speak G RPC so I don't I don't know specifics",
    "start": "2344400",
    "end": "2350339"
  },
  {
    "text": "on that I don't know if I'd be also um knows knows more about that Brent ER",
    "start": "2350339",
    "end": "2357270"
  },
  {
    "text": "this okay next question um from Peter",
    "start": "2357270",
    "end": "2367650"
  },
  {
    "start": "2364000",
    "end": "2402000"
  },
  {
    "text": "does gr PC support back pressure do sorry using this flow API yeah yep yes because",
    "start": "2367650",
    "end": "2377430"
  },
  {
    "text": "it's built on flow it does it does support the back pressure in the flow API I was honestly when designing it was",
    "start": "2377430",
    "end": "2385740"
  },
  {
    "text": "really pleased with how well that just worked together with an out-of-box pretty much which really improved my",
    "start": "2385740",
    "end": "2391740"
  },
  {
    "text": "opinion of the flow API yeah it just",
    "start": "2391740",
    "end": "2397380"
  },
  {
    "text": "worked is it's pretty awesome okay i'm",
    "start": "2397380",
    "end": "2402740"
  },
  {
    "start": "2402000",
    "end": "2492000"
  },
  {
    "text": "sure ash asks us in scotland x serialization supports protobuf can we",
    "start": "2402740",
    "end": "2409950"
  },
  {
    "text": "use serialize able data classes directly assuming my client and server in college",
    "start": "2409950",
    "end": "2417480"
  },
  {
    "text": "apologies if I've butchered that name it's serialize Sybil yeah I think it's",
    "start": "2417480",
    "end": "2424170"
  },
  {
    "text": "realizing that we guys yes I could you pass data classes around today",
    "start": "2424170",
    "end": "2429359"
  },
  {
    "text": "um the answer is no um and I think a",
    "start": "2429359",
    "end": "2435660"
  },
  {
    "text": "part of that is the last time I checked on Kotlin X serialization when it says",
    "start": "2435660",
    "end": "2442260"
  },
  {
    "text": "cut line X serialization supports protobuf what they mean is that they support using protobuf as the like",
    "start": "2442260",
    "end": "2451880"
  },
  {
    "text": "serialization in terms of how the messages is stored and converted into",
    "start": "2451880",
    "end": "2457289"
  },
  {
    "text": "bytes but not necessarily in terms of how messages defined in terms of how the",
    "start": "2457289",
    "end": "2463260"
  },
  {
    "text": "message evolves and certainly not in terms of the proto-language job profiles",
    "start": "2463260",
    "end": "2468720"
  },
  {
    "text": "or thing that's not that's what's currently supported Sakhalin ex serialization",
    "start": "2468720",
    "end": "2475940"
  },
  {
    "text": "doesn't currently work I know G RPC supports other serialization mechanisms",
    "start": "2475940",
    "end": "2482030"
  },
  {
    "text": "and that could be made to work by different we have that working with Kotlin at this time cool thanks Alice",
    "start": "2482030",
    "end": "2492310"
  },
  {
    "start": "2492000",
    "end": "2635000"
  },
  {
    "text": "all right it looks like we have one more question here Malakai asks how well does it work with",
    "start": "2492310",
    "end": "2498830"
  },
  {
    "text": "Android specifically thinking of the conflicts between G RPC Java and for any",
    "start": "2498830",
    "end": "2504740"
  },
  {
    "text": "timestamp and Java light used by firebase which conflict with one with each other that's a good question David",
    "start": "2504740",
    "end": "2514130"
  },
  {
    "text": "you would you happen to know that one I actually don't curious to hear Luis",
    "start": "2514130",
    "end": "2520400"
  },
  {
    "text": "Brent have any thoughts on this I can take a shot which is to say I'm not I'm",
    "start": "2520400",
    "end": "2528620"
  },
  {
    "text": "not specifically aware of the nature of those conflicts but I would be shocked if this situation was singing different",
    "start": "2528620",
    "end": "2537290"
  },
  {
    "text": "from G RPC Java which is to say currently this is everything",
    "start": "2537290",
    "end": "2544150"
  },
  {
    "text": "oh really Sheila's oh I'll take a crack",
    "start": "2545590",
    "end": "2550690"
  },
  {
    "text": "at what I think he was about to say which is that this Lane this Colin library is built on top of G or PC Java",
    "start": "2550690",
    "end": "2556510"
  },
  {
    "text": "so it's gonna have the same conflicts as gr PC Java has for Android cool huffily",
    "start": "2556510",
    "end": "2564670"
  },
  {
    "text": "that's something that the that we can improve over time and and track us on the github for I don't know if there's",
    "start": "2564670",
    "end": "2572020"
  },
  {
    "text": "an issue for this already but if not we should create one and and you can follow subscribe to that issue so yeah I think",
    "start": "2572020",
    "end": "2579040"
  },
  {
    "text": "it's a zero point one point one version we're not sure how this works in an",
    "start": "2579040",
    "end": "2584050"
  },
  {
    "text": "environment you know I personally have a project in flight to try to test it out",
    "start": "2584050",
    "end": "2589810"
  },
  {
    "text": "so awesome you like yeah I'd be great to be able to talk from an android client",
    "start": "2589810",
    "end": "2595240"
  },
  {
    "text": "to g RPC server so hopefully that's something we can get working so okay I",
    "start": "2595240",
    "end": "2600820"
  },
  {
    "text": "think that's it for the questions Kristy what else yeah thanks again for a great",
    "start": "2600820",
    "end": "2606760"
  },
  {
    "text": "webinar thanks James prefer presenting and to David Lewis and Brent for",
    "start": "2606760",
    "end": "2612190"
  },
  {
    "text": "answering questions and thanks again to everybody for joining us today a friendly reminder the slides will be",
    "start": "2612190",
    "end": "2618340"
  },
  {
    "text": "available and the recording of the webinar on the CNC F webinars page later today and thanks again have a great",
    "start": "2618340",
    "end": "2625600"
  },
  {
    "text": "weekend and we look forward to seeing you at a future CNCs webinar thanks everyone",
    "start": "2625600",
    "end": "2632550"
  }
]