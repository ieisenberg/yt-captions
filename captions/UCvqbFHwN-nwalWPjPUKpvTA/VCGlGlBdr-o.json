[
  {
    "text": "hello everyone my name is Alex and I'm",
    "start": "30",
    "end": "6120"
  },
  {
    "text": "going to talk about serverless computer platforms on kubernetes and specifically",
    "start": "6120",
    "end": "11460"
  },
  {
    "text": "on some experiments that we did or building such platforms for different",
    "start": "11460",
    "end": "17730"
  },
  {
    "text": "kinds of workloads and this work has been done collaboration with some",
    "start": "17730",
    "end": "24210"
  },
  {
    "text": "students and the Carnegie Mellon University where I'm currently at and it",
    "start": "24210",
    "end": "29550"
  },
  {
    "text": "started when it was back in IBM Research in Israel and so I'm going to start with",
    "start": "29550",
    "end": "40340"
  },
  {
    "text": "let's say yet another attempt to define what serverless is or at least in the context of this presentation what do I",
    "start": "40340",
    "end": "47460"
  },
  {
    "text": "mean by serverless and then going more specifically to serve this compute because there are",
    "start": "47460",
    "end": "53399"
  },
  {
    "text": "servers nowadays or services applied to different areas not just to compute I'm",
    "start": "53399",
    "end": "61559"
  },
  {
    "text": "going to try to distinguish between like the role of function as a service in this space which would hopefully also",
    "start": "61559",
    "end": "69000"
  },
  {
    "text": "help us understand what other kinds of service platforms could make sense besides functions as a service and then",
    "start": "69000",
    "end": "76680"
  },
  {
    "text": "I'm going to talk about a couple of use cases that we try to implement one",
    "start": "76680",
    "end": "81840"
  },
  {
    "text": "dealing with interactive computing in hope and hopefully we'll have time for",
    "start": "81840",
    "end": "87360"
  },
  {
    "text": "in demo or at least screenshots and the second use case is deep learning and so",
    "start": "87360",
    "end": "95549"
  },
  {
    "text": "I guess the the advantage of being the last is that we probably don't have",
    "start": "95549",
    "end": "101490"
  },
  {
    "text": "anyone after after this so if folks are interested we can go into in more detail",
    "start": "101490",
    "end": "109520"
  },
  {
    "text": "because like presentation contains more details that I will be actually able to",
    "start": "109520",
    "end": "114680"
  },
  {
    "text": "cover and it is available or online and",
    "start": "114680",
    "end": "119960"
  },
  {
    "text": "so let's start with their server lists so there are lots of definitions and",
    "start": "119960",
    "end": "126700"
  },
  {
    "text": "what server this is or isn't it is extremely popular and there are kind of",
    "start": "126700",
    "end": "133489"
  },
  {
    "text": "attempts to give it different definition so for me in a nutshell server this is",
    "start": "133489",
    "end": "141910"
  },
  {
    "text": "so it started with not managing servers but to me it's very kind of an example",
    "start": "141910",
    "end": "147860"
  },
  {
    "text": "so it doesn't have to be about not managing servers it's more often not",
    "start": "147860",
    "end": "153560"
  },
  {
    "text": "doing some tasks which distract the developers from developing their actual",
    "start": "153560",
    "end": "159260"
  },
  {
    "text": "core business capabilities which is typically writing code and those tasks",
    "start": "159260",
    "end": "165140"
  },
  {
    "text": "can be outsourced to someone else which could be a cloud provider could be ITIL",
    "start": "165140",
    "end": "171920"
  },
  {
    "text": "IT department or if a person has multiple personalities may be the same",
    "start": "171920",
    "end": "177350"
  },
  {
    "text": "person doing some other things so it's essentially tightly related to",
    "start": "177350",
    "end": "183709"
  },
  {
    "text": "separation of concerns and being able to outsource as much as possible to someone else and the crucial part here is that",
    "start": "183709",
    "end": "190160"
  },
  {
    "text": "to find this someone else who you can trust and they can actually do this well",
    "start": "190160",
    "end": "195320"
  },
  {
    "text": "and it and hopefully for them this is their core business to manage the",
    "start": "195320",
    "end": "202250"
  },
  {
    "text": "infrastructure or to provide services that you are using in your application",
    "start": "202250",
    "end": "208390"
  },
  {
    "text": "so this is a bit broader I think then for example or lambda but hopefully it",
    "start": "208390",
    "end": "216049"
  },
  {
    "text": "will help us understand what other kind of solutions make sense from this space",
    "start": "216049",
    "end": "222160"
  },
  {
    "text": "so essentially a service is about being distraction-free and separation of concerns and",
    "start": "222160",
    "end": "229410"
  },
  {
    "text": "[Music] so all of those are so this is actually",
    "start": "229410",
    "end": "236620"
  },
  {
    "text": "not you know right so the separation of concerns and focusing on your business",
    "start": "236620",
    "end": "242010"
  },
  {
    "text": "logic is something that is around for many many years so there are many",
    "start": "242010",
    "end": "247120"
  },
  {
    "text": "iterations of the same approach so so why now service is so important or",
    "start": "247120",
    "end": "252700"
  },
  {
    "text": "specifically let's say Amazon um Dan White is so so popular so I think it's",
    "start": "252700",
    "end": "259600"
  },
  {
    "text": "more related to the developer experience than to actual programming model so so",
    "start": "259600",
    "end": "266800"
  },
  {
    "text": "that's right there are some innovations in the programming model space as well but to me this is essentially boils down",
    "start": "266800",
    "end": "274510"
  },
  {
    "text": "to developer experience and efficiency and the maturity of those services that",
    "start": "274510",
    "end": "280390"
  },
  {
    "text": "you could outsource to so that's kind of a side note but essentially serverless",
    "start": "280390",
    "end": "287470"
  },
  {
    "text": "is about writing code and doing someone else doing the other the things that you",
    "start": "287470",
    "end": "293920"
  },
  {
    "text": "are less proficient in so a couple of examples which I'm sure that you're",
    "start": "293920",
    "end": "300190"
  },
  {
    "text": "familiar with so I'll start with non compute examples the object store is",
    "start": "300190",
    "end": "305620"
  },
  {
    "text": "considered or is considered the server this offering because you essentially",
    "start": "305620",
    "end": "311110"
  },
  {
    "text": "you're just focusing on managing your day time and you couldn't care less what exactly the Amazon s3 operators are",
    "start": "311110",
    "end": "319150"
  },
  {
    "text": "doing at the back end on the so there",
    "start": "319150",
    "end": "324490"
  },
  {
    "text": "are lots of destruction that you as a developer that you don't need to worry about if we take micro services and is",
    "start": "324490",
    "end": "331780"
  },
  {
    "text": "another example so here the core is to develop the actual services interfaces",
    "start": "331780",
    "end": "337690"
  },
  {
    "text": "how they interact and so on and there are lots of other things you that you prefer the platform to give you that you",
    "start": "337690",
    "end": "347140"
  },
  {
    "text": "can just use and don't worry about and this of course also includes things like",
    "start": "347140",
    "end": "353080"
  },
  {
    "text": "DevOps how do you deploy things how you manage versions and so on",
    "start": "353080",
    "end": "358650"
  },
  {
    "text": "and the third example here is about two event-driven or asynchronous workloads",
    "start": "358650",
    "end": "365100"
  },
  {
    "text": "with things like Amazon lambda so once",
    "start": "365100",
    "end": "370260"
  },
  {
    "text": "again here the core is to build the actual event processing logic and to",
    "start": "370260",
    "end": "376080"
  },
  {
    "text": "define what kind of triggers should trigger what kind of events and maybe some workflow and everything else",
    "start": "376080",
    "end": "383870"
  },
  {
    "text": "ideally you should get from a platform that someone developed for you that is",
    "start": "383870",
    "end": "388970"
  },
  {
    "text": "scalable efficient and so on so so this",
    "start": "388970",
    "end": "399060"
  },
  {
    "text": "is service in general an hour if we zoom into the compute space what would be the",
    "start": "399060",
    "end": "406590"
  },
  {
    "text": "the core and the distraction elements in the if we are focusing on compute so",
    "start": "406590",
    "end": "415050"
  },
  {
    "text": "essentially it's I think the most fundamental part is that servers compute platform hosts some code that the",
    "start": "415050",
    "end": "421949"
  },
  {
    "text": "developer writes and if brain bring your own codes approach then often which I",
    "start": "421949",
    "end": "431370"
  },
  {
    "text": "think makes sense it is optimized for a particular kind of workloads or",
    "start": "431370",
    "end": "438919"
  },
  {
    "text": "application patterns so historically it",
    "start": "438919",
    "end": "444900"
  },
  {
    "text": "it is often related to event-driven applications and their elasticity is",
    "start": "444900",
    "end": "450360"
  },
  {
    "text": "scaling to zero and so on but I think that's not exactly I mean that's",
    "start": "450360",
    "end": "456270"
  },
  {
    "text": "certainly nice but that's not something which is very fundamental to the definition of services and at least in",
    "start": "456270",
    "end": "461550"
  },
  {
    "text": "my opinion and there are many platforms when for example scaling to zero many",
    "start": "461550",
    "end": "467220"
  },
  {
    "text": "applications where scaling to zero for example is not that important so if if",
    "start": "467220",
    "end": "472919"
  },
  {
    "text": "you're if you're running a web application that has millions of requests pretty much all the time",
    "start": "472919",
    "end": "479470"
  },
  {
    "text": "and you have thousands of thousands of servers then probably scaling to zero is",
    "start": "479470",
    "end": "485530"
  },
  {
    "text": "not that important but elasticity in general is important so I think the the",
    "start": "485530",
    "end": "491530"
  },
  {
    "text": "idea here is to understand what kind of applications you want to run on this",
    "start": "491530",
    "end": "496630"
  },
  {
    "text": "platform and to design the platform in such a way that it will be optimized for the applications that you are targeting",
    "start": "496630",
    "end": "502510"
  },
  {
    "text": "and for the usage part in Detroit targeting and in terms of destruction",
    "start": "502510",
    "end": "509290"
  },
  {
    "text": "that we would prefer to to avoid so there are two areas that are important",
    "start": "509290",
    "end": "516130"
  },
  {
    "text": "one is related to management of that code that the developer writes",
    "start": "516130",
    "end": "522390"
  },
  {
    "text": "deployment scaling monitoring updates and so on and another area is",
    "start": "522390",
    "end": "527830"
  },
  {
    "text": "integration so that so the more we outsource capabilities to someone else",
    "start": "527830",
    "end": "534730"
  },
  {
    "text": "the more integration aspects we have with other pieces of code that may be",
    "start": "534730",
    "end": "539770"
  },
  {
    "text": "hosted on other platforms which could be event sources or some integration around",
    "start": "539770",
    "end": "545290"
  },
  {
    "text": "data communication and so on so and now",
    "start": "545290",
    "end": "552160"
  },
  {
    "text": "I'll try to to see how this definition",
    "start": "552160",
    "end": "557800"
  },
  {
    "text": "feeds that the function is a service and few other examples that I'm going to dig",
    "start": "557800",
    "end": "564220"
  },
  {
    "text": "deeper next so for function of the service or so-called general purpose functional",
    "start": "564220",
    "end": "570430"
  },
  {
    "text": "service like lambda or various kinds of functions was public cloud and open",
    "start": "570430",
    "end": "579430"
  },
  {
    "text": "source so we have arbitrary functions that we want to host somewhere we want",
    "start": "579430",
    "end": "584470"
  },
  {
    "text": "to just develop the function push it somewhere and then the rest will happen automatically then I came up with this",
    "start": "584470",
    "end": "593650"
  },
  {
    "text": "relatively long definition of which what seems to be the deep time optimization",
    "start": "593650",
    "end": "600030"
  },
  {
    "text": "point for for this sort of workloads so those functions are short-lived but",
    "start": "600030",
    "end": "606460"
  },
  {
    "text": "probably not too short because otherwise you will be like the scaling granularity for example in",
    "start": "606460",
    "end": "612970"
  },
  {
    "text": "lambda is 100 milliseconds so if your function takes one millisecond and it's",
    "start": "612970",
    "end": "618040"
  },
  {
    "text": "probably not too good your feet and also charged because per 100 milliseconds",
    "start": "618040",
    "end": "623879"
  },
  {
    "text": "from our own triggers triggered by events requests so scaling to zero is",
    "start": "623879",
    "end": "631120"
  },
  {
    "text": "related to or elasticity and specifically scaling to zero is related",
    "start": "631120",
    "end": "636339"
  },
  {
    "text": "to the ability to accommodate high variability of loads including some",
    "start": "636339",
    "end": "642129"
  },
  {
    "text": "items so if you don't have item s and you probably don't care about scale to zero and so on and also once again based",
    "start": "642129",
    "end": "650620"
  },
  {
    "text": "on the existing implementations may most of them are not very low latency",
    "start": "650620",
    "end": "657959"
  },
  {
    "text": "although there are some efforts to improve it but essentially I think",
    "start": "657959",
    "end": "663149"
  },
  {
    "text": "majority of this functional service workers today are somewhat are not very",
    "start": "663149",
    "end": "669579"
  },
  {
    "text": "sensitive to latency so there is back to",
    "start": "669579",
    "end": "674889"
  },
  {
    "text": "the question about to the point about developer experience so it was not",
    "start": "674889",
    "end": "682509"
  },
  {
    "text": "entirely clear to me whether this particular kind of applications is suddenly so important that people are so",
    "start": "682509",
    "end": "690130"
  },
  {
    "text": "excited about function as a service but still I think it moves the industry in",
    "start": "690130",
    "end": "696519"
  },
  {
    "text": "the right direction of building this sort of platforms so of course we want",
    "start": "696519",
    "end": "701880"
  },
  {
    "text": "everything to be fully managed and what is different about functional services that we have functions and functions",
    "start": "701880",
    "end": "709149"
  },
  {
    "text": "with invocations as first-class citizens which was not the case in most of the",
    "start": "709149",
    "end": "714819"
  },
  {
    "text": "previous platforms so for example for monitoring on tracing this is a quite",
    "start": "714819",
    "end": "721089"
  },
  {
    "text": "different model and integration here the the most important integration points",
    "start": "721089",
    "end": "726430"
  },
  {
    "text": "are around event sources and so so",
    "start": "726430",
    "end": "733329"
  },
  {
    "text": "that's a function of the service and now there are other platforms which also deal with",
    "start": "733329",
    "end": "740410"
  },
  {
    "text": "functions but in a more specialized context suggest as an example there are",
    "start": "740410",
    "end": "746289"
  },
  {
    "text": "various solutions to run functions at the edge of the network like problem",
    "start": "746289",
    "end": "753009"
  },
  {
    "text": "functions or lambda edge so it is called functions but it is targeting very",
    "start": "753009",
    "end": "760689"
  },
  {
    "text": "different kinds of applications and well although those platforms are not open I",
    "start": "760689",
    "end": "767259"
  },
  {
    "text": "would guess that they have very different design decisions under the covers so still you want to run",
    "start": "767259",
    "end": "774729"
  },
  {
    "text": "arbitrary code so maybe you don't need as much of a variety in terms of programming languages but here the the",
    "start": "774729",
    "end": "783879"
  },
  {
    "text": "requirement is very much focused on high throughput and low latency so for",
    "start": "783879",
    "end": "789669"
  },
  {
    "text": "example I'm pretty sure that they are not provisioning docker containers for",
    "start": "789669",
    "end": "794889"
  },
  {
    "text": "for each packet so we still want them to",
    "start": "794889",
    "end": "800529"
  },
  {
    "text": "be fully managed of course and in terms of integration their main integration goal is to integrate well with the",
    "start": "800529",
    "end": "807609"
  },
  {
    "text": "actual platform that those functions are running on so as you can see here",
    "start": "807609",
    "end": "813789"
  },
  {
    "text": "well it's called function is a service I mean it can be considered there's a special case of functional service but",
    "start": "813789",
    "end": "819759"
  },
  {
    "text": "with very different set of requirements and yes so there are some efforts in the",
    "start": "819759",
    "end": "825879"
  },
  {
    "text": "open source that try to address also this kind of use workloads but I think",
    "start": "825879",
    "end": "832049"
  },
  {
    "text": "maybe over time there will be more such efforts and now the next example is also",
    "start": "832049",
    "end": "842350"
  },
  {
    "text": "from a different kind of workload so if we if you look at there the ETL space so",
    "start": "842350",
    "end": "850029"
  },
  {
    "text": "Amazon for example has in a service called or AWS bloom which",
    "start": "850029",
    "end": "857400"
  },
  {
    "text": "essentially provides a server less hosting for for ETL for big data",
    "start": "857400",
    "end": "864330"
  },
  {
    "text": "processing functions if you wish it could be as far something that the SPARC",
    "start": "864330",
    "end": "871860"
  },
  {
    "text": "job that are they host on their cluster or it could be just plain Python jobs",
    "start": "871860",
    "end": "878490"
  },
  {
    "text": "that you can use for example for pre-processing so here again so you can",
    "start": "878490",
    "end": "886710"
  },
  {
    "text": "think of from the developer perspective they write some code they want to host it somewhere and they want to be able to",
    "start": "886710",
    "end": "892650"
  },
  {
    "text": "trigger it similar in their simple way and to integrate it with theirs with the",
    "start": "892650",
    "end": "900750"
  },
  {
    "text": "ecosystem but once again here the the application pattern is very different",
    "start": "900750",
    "end": "906030"
  },
  {
    "text": "and also the the platform underneath is probably somewhat different so even for",
    "start": "906030",
    "end": "911880"
  },
  {
    "text": "the for the plain Python jobs well well",
    "start": "911880",
    "end": "917400"
  },
  {
    "text": "one could think maybe you could run those Python jobs on lambda right but",
    "start": "917400",
    "end": "924300"
  },
  {
    "text": "well that's not exactly the case or because for example those Python jobs can have I think 10 gigabytes of disk",
    "start": "924300",
    "end": "933060"
  },
  {
    "text": "space available which is quite different than 500 20 megabytes on lambda and also",
    "start": "933060",
    "end": "939120"
  },
  {
    "text": "in terms of runtime those jobs are not limited in terms of fun time and I'm pretty sure that the entire architecture",
    "start": "939120",
    "end": "946020"
  },
  {
    "text": "on below those or that offering is very different but well I don't have inside",
    "start": "946020",
    "end": "952410"
  },
  {
    "text": "information so well still we want to all",
    "start": "952410",
    "end": "959100"
  },
  {
    "text": "of that be fully managed of course and also the integration here is more towards the data catalog and there the",
    "start": "959100",
    "end": "967920"
  },
  {
    "text": "access to data so the last example before where you moved to our",
    "start": "967920",
    "end": "975660"
  },
  {
    "text": "experiments is a native essentially which",
    "start": "975660",
    "end": "981580"
  },
  {
    "text": "I'm pretty sure that if you're interested in server list that you're familiar with it maybe I already heard",
    "start": "981580",
    "end": "987730"
  },
  {
    "text": "some sessions this week so cane ad with these are essentially yet another",
    "start": "987730",
    "end": "994390"
  },
  {
    "text": "example of service compute platform which is not exactly functional service",
    "start": "994390",
    "end": "1001470"
  },
  {
    "text": "because here the code is essentially a web application but primarily HTTP based",
    "start": "1001470",
    "end": "1007320"
  },
  {
    "text": "although now there are some extensions to handle other protocols and the",
    "start": "1007320",
    "end": "1013920"
  },
  {
    "text": "application button here is also very different so we're conceptually we're talking about long-running applications",
    "start": "1013920",
    "end": "1020899"
  },
  {
    "text": "and to scale out that you can have different number of containers and what",
    "start": "1020899",
    "end": "1027420"
  },
  {
    "text": "is important here or why or so how can we not deal with the scalability for",
    "start": "1027420",
    "end": "1035160"
  },
  {
    "text": "example is that we are assuming that there is some linear relationship between the research demand and the",
    "start": "1035160",
    "end": "1041188"
  },
  {
    "text": "request so there is request based scaling and with such modular it is",
    "start": "1041189",
    "end": "1047520"
  },
  {
    "text": "typically it is typically a good fit for traditional web applications which are",
    "start": "1047520",
    "end": "1054230"
  },
  {
    "text": "high throughput low latency or so essentially there the K native takes out",
    "start": "1054230",
    "end": "1060660"
  },
  {
    "text": "many of the destructions related to scaling to build and to ingesting data",
    "start": "1060660",
    "end": "1069260"
  },
  {
    "text": "or events into the service and leaves the developer to focus on and also",
    "start": "1069260",
    "end": "1075809"
  },
  {
    "text": "creative takes care of upgrades blue/green deployments and so on and the",
    "start": "1075809",
    "end": "1084630"
  },
  {
    "text": "developer focuses on the actual logic [Music]",
    "start": "1084630",
    "end": "1091950"
  },
  {
    "text": "so the question is what other kinds of platforms or what other kinds of",
    "start": "1091960",
    "end": "1097130"
  },
  {
    "text": "application patterns could require slightly or very different platforms so",
    "start": "1097130",
    "end": "1104270"
  },
  {
    "text": "hopefully we can run all of that on top of kubernetes so hopefully kubernetes is generic enough to host all kinds of",
    "start": "1104270",
    "end": "1110780"
  },
  {
    "text": "workloads or maybe some of them will require some some low-level changes and",
    "start": "1110780",
    "end": "1116980"
  },
  {
    "text": "we've experimented with two kinds of applications in this regard",
    "start": "1116980",
    "end": "1123289"
  },
  {
    "text": "one is the interactive computing so this is sort to main use cases here that are",
    "start": "1123289",
    "end": "1129919"
  },
  {
    "text": "inspired this those experiments one is just developer working with some VM in",
    "start": "1129919",
    "end": "1138679"
  },
  {
    "text": "the cloud and the second experience is the second use case is a data scientist",
    "start": "1138679",
    "end": "1144470"
  },
  {
    "text": "so data scientist using for example Jupiter notebook so most of the time",
    "start": "1144470",
    "end": "1151460"
  },
  {
    "text": "that Jupiter notebook is not doing anything because it's an interactive",
    "start": "1151460",
    "end": "1157460"
  },
  {
    "text": "workloads but yet at the moment there are no good solutions to essentially to",
    "start": "1157460",
    "end": "1164090"
  },
  {
    "text": "reuse or recycle those underlying resources in a kind of service manner",
    "start": "1164090",
    "end": "1171130"
  },
  {
    "text": "yeah so this is an example of Jupiter notebook is there here who who is",
    "start": "1171130",
    "end": "1179030"
  },
  {
    "text": "familiar with Jupiter notebooks raise your hand okay so it's in their",
    "start": "1179030",
    "end": "1185059"
  },
  {
    "text": "interactive video web application with some with a web server the backend so",
    "start": "1185059",
    "end": "1191809"
  },
  {
    "text": "you can essentially work with different programming languages and at the backend the Jupiter server runs something some",
    "start": "1191809",
    "end": "1200419"
  },
  {
    "text": "sort of sandbox called the kernel that actually runs the the text here that the",
    "start": "1200419",
    "end": "1207890"
  },
  {
    "text": "user enters in the UI so the way it works is that the Jupiter server the web",
    "start": "1207890",
    "end": "1214220"
  },
  {
    "text": "server here sends the actual sell here as a payload to the colonel",
    "start": "1214220",
    "end": "1220950"
  },
  {
    "text": "Colonel runs and some sort of interpreter and returns back the result",
    "start": "1220950",
    "end": "1226460"
  },
  {
    "text": "so what we've we tried to do and to see how we can decouple the architecture",
    "start": "1226460",
    "end": "1234510"
  },
  {
    "text": "here so that the actual compute happens on a shared cluster using on-demand",
    "start": "1234510",
    "end": "1240330"
  },
  {
    "text": "resources and not alone groaning colonel so colonel today is a long-running thing",
    "start": "1240330",
    "end": "1246230"
  },
  {
    "text": "and the question is how can we make it more serverless or more elastic in a",
    "start": "1246230",
    "end": "1252720"
  },
  {
    "text": "sense or more or capable to scale to zero in this case because here unlike",
    "start": "1252720",
    "end": "1260100"
  },
  {
    "text": "like web server here we know exactly when the user needs those resources or",
    "start": "1260100",
    "end": "1265440"
  },
  {
    "text": "doesn't need those resources right because we control the the entire experience here and unless the user",
    "start": "1265440",
    "end": "1273090"
  },
  {
    "text": "clicks the run button we can know for sure that those resources are not needed",
    "start": "1273090",
    "end": "1279529"
  },
  {
    "text": "so there are two architectures for in general so one that leverages a spark",
    "start": "1279529",
    "end": "1284820"
  },
  {
    "text": "cluster at the backend and this is not what we're targeting here because maybe not everyone wants to write their",
    "start": "1284820",
    "end": "1290880"
  },
  {
    "text": "programs using spark there are lots of general-purpose libraries so maybe your",
    "start": "1290880",
    "end": "1297510"
  },
  {
    "text": "scale our scale out is less applicable here and maybe a model that could make",
    "start": "1297510",
    "end": "1305370"
  },
  {
    "text": "sense here is actually scale up so maybe it could make sense to allocate",
    "start": "1305370",
    "end": "1311309"
  },
  {
    "text": "different amount of resources for a particular Python process as opposed to",
    "start": "1311309",
    "end": "1318710"
  },
  {
    "text": "scaling to the cluster and if one is",
    "start": "1318710",
    "end": "1325289"
  },
  {
    "text": "just working with for example a linux shell it's somewhat similar and I hope you can see the similarity here so try",
    "start": "1325289",
    "end": "1335700"
  },
  {
    "text": "to use the same definition here for this kind of platforms so the code here are",
    "start": "1335700",
    "end": "1342240"
  },
  {
    "text": "those cells or the actual command that the user enters so the application",
    "start": "1342240",
    "end": "1348899"
  },
  {
    "text": "pattern here so it's a iterative invocation of",
    "start": "1348899",
    "end": "1355620"
  },
  {
    "text": "stateful non parallel computation intensive ad hoc tasks triggered by",
    "start": "1355620",
    "end": "1363070"
  },
  {
    "text": "explicit user instructions so there are a few things here that we can use to derive some design requirements or",
    "start": "1363070",
    "end": "1369610"
  },
  {
    "text": "architectural requirements one is related to iterative invocation of",
    "start": "1369610",
    "end": "1375430"
  },
  {
    "text": "stateful tasks so we probably want to persist the state across invocation",
    "start": "1375430",
    "end": "1380860"
  },
  {
    "text": "sufficiently as opposed to for example everything every time retrieving data from s3 and then writing in back to",
    "start": "1380860",
    "end": "1388600"
  },
  {
    "text": "history the second aspect here is related to non parallel and",
    "start": "1388600",
    "end": "1394450"
  },
  {
    "text": "computational intensive as I mentioned scale-up could make sense here this",
    "start": "1394450",
    "end": "1400570"
  },
  {
    "text": "third is ad hoc tasks so that we probably want to consider say sending",
    "start": "1400570",
    "end": "1406510"
  },
  {
    "text": "the code as a payload as opposed to put it as part like deliver it as part of",
    "start": "1406510",
    "end": "1412960"
  },
  {
    "text": "some sort of C ICD pipeline to image registry and so on and the last one is",
    "start": "1412960",
    "end": "1419800"
  },
  {
    "text": "so because this is a ad hoc and there there is a user interaction here we just",
    "start": "1419800",
    "end": "1425740"
  },
  {
    "text": "probably it probably is important here to scale to zero when when I don't so",
    "start": "1425740",
    "end": "1433660"
  },
  {
    "text": "and so so we'll build a proof-of-concept",
    "start": "1433660",
    "end": "1442480"
  },
  {
    "text": "of this sort of such a platform that we call the run box is actually uploaded it",
    "start": "1442480",
    "end": "1451180"
  },
  {
    "text": "to a publicly reported a so it's a proof of concept so it's essentially this box",
    "start": "1451180",
    "end": "1458730"
  },
  {
    "text": "so looking at the architecture so if this is the developer machine so there",
    "start": "1458730",
    "end": "1465190"
  },
  {
    "text": "is the this run box proxy which in this case in our implementation is just a Python script there is a user that",
    "start": "1465190",
    "end": "1472450"
  },
  {
    "text": "interacts with this proxy either directly or indirectly for examples",
    "start": "1472450",
    "end": "1479230"
  },
  {
    "text": "through Jupiter kernel and there is a file system which is which keeps the state that is",
    "start": "1479230",
    "end": "1486070"
  },
  {
    "text": "probably important to synchronize with the cloud and we're essentially managing",
    "start": "1486070",
    "end": "1491170"
  },
  {
    "text": "which we call the run box on a kubernetes cluster which is currently implemented as just a simple or",
    "start": "1491170",
    "end": "1497890"
  },
  {
    "text": "deployment with of size 0 or 1 so we",
    "start": "1497890",
    "end": "1503680"
  },
  {
    "text": "have a pod we have a container within the pod but actually the more important part is the the data volume which is",
    "start": "1503680",
    "end": "1511210"
  },
  {
    "text": "persistent as opposed to the pod which is ephemeral so another thing which is important here",
    "start": "1511210",
    "end": "1518920"
  },
  {
    "text": "is that we want to be able to resize this pod essentially do a vertical scaling of this pod but as opposed to a",
    "start": "1518920",
    "end": "1527380"
  },
  {
    "text": "vertical scaling like VPA kind of vertical scaling which just keeps",
    "start": "1527380",
    "end": "1533710"
  },
  {
    "text": "statistics of your resource usage and decides what is the right size based on",
    "start": "1533710",
    "end": "1539860"
  },
  {
    "text": "some statistical or history so here the the policy should be different because",
    "start": "1539860",
    "end": "1545470"
  },
  {
    "text": "it is somehow related to the thing that the user is doing at the moment and not the history of the last hour so at the",
    "start": "1545470",
    "end": "1554890"
  },
  {
    "text": "moment we're just doing it explicitly so the user can specify how much resources they need for the particular operation",
    "start": "1554890",
    "end": "1561010"
  },
  {
    "text": "and so we can just sorry",
    "start": "1561010",
    "end": "1568620"
  },
  {
    "text": "so we can just just scale the deployment or there is someone when work on in",
    "start": "1572200",
    "end": "1577669"
  },
  {
    "text": "place pod vertical scaling which",
    "start": "1577669",
    "end": "1583000"
  },
  {
    "text": "actually could be very useful here because it would do the vertical scaling more efficiently and we actually managed",
    "start": "1583000",
    "end": "1591260"
  },
  {
    "text": "to integrate the two and indeed it works faster than the regular scaling",
    "start": "1591260",
    "end": "1596570"
  },
  {
    "text": "naturally and there is also a controller which well we haven't implemented yet",
    "start": "1596570",
    "end": "1603169"
  },
  {
    "text": "which but conceptually the controller could decide when to scale those",
    "start": "1603169",
    "end": "1609169"
  },
  {
    "text": "individual pods and their run boxes based on some policy for example based",
    "start": "1609169",
    "end": "1616130"
  },
  {
    "text": "on available capacity and so on so let's",
    "start": "1616130",
    "end": "1622190"
  },
  {
    "text": "see a couple of screenshots I'm not sure we have time for an actual live demo so",
    "start": "1622190",
    "end": "1629320"
  },
  {
    "text": "so with once we create the run box so we can specify an image that will be",
    "start": "1629320",
    "end": "1636080"
  },
  {
    "text": "running in the actual worker container so what happens under the covers is just",
    "start": "1636080",
    "end": "1643190"
  },
  {
    "text": "essentially used cube CTL create to create a deployment and and the pod",
    "start": "1643190",
    "end": "1650059"
  },
  {
    "text": "within the deployment and of course there is also replica set in between there is the actual worker container and",
    "start": "1650059",
    "end": "1656570"
  },
  {
    "text": "the site card that we are using for our purposes and we can just run commands",
    "start": "1656570",
    "end": "1662299"
  },
  {
    "text": "there as if it was like SSH for example and the difference here is that that pod",
    "start": "1662299",
    "end": "1669289"
  },
  {
    "text": "is ephemeral so it can disappear and come back live based on the policy on",
    "start": "1669289",
    "end": "1676220"
  },
  {
    "text": "based on some specific triggers and this is transparent to the user so the next",
    "start": "1676220",
    "end": "1684470"
  },
  {
    "text": "thing that we implemented was the file system synchronization so we can say okay before I'm running this LS command",
    "start": "1684470",
    "end": "1692150"
  },
  {
    "text": "I would like to synchronize the folder here to the remote volume so at the",
    "start": "1692150",
    "end": "1699500"
  },
  {
    "text": "moment we're we're using the sidecar container with unis on tool to do it but it could be",
    "start": "1699500",
    "end": "1707270"
  },
  {
    "text": "nice if kubernetes could support something like that natively like remote access to your data to volumes and the",
    "start": "1707270",
    "end": "1716960"
  },
  {
    "text": "next thing is what I mentioned before we can actually use the cube CTL to scale",
    "start": "1716960",
    "end": "1723710"
  },
  {
    "text": "that deployment to zero and yet till the next command will work well it will take",
    "start": "1723710",
    "end": "1730100"
  },
  {
    "text": "a little bit longer but it worked it will work because it will scale it back to one and then it will run it and it",
    "start": "1730100",
    "end": "1737720"
  },
  {
    "text": "will connect to the same persistent volume as before and we can also specify",
    "start": "1737720",
    "end": "1744770"
  },
  {
    "text": "how much we can essentially resize the container on the fly per command in this",
    "start": "1744770",
    "end": "1752120"
  },
  {
    "text": "case so you can see here we're just displaying the see group memory limit like with regular",
    "start": "1752120",
    "end": "1762230"
  },
  {
    "text": "invocation and then we're allocating factor of two of resources and we can see here that twice more memory and once",
    "start": "1762230",
    "end": "1769790"
  },
  {
    "text": "again in between the container could the actual pod could be recycled or not",
    "start": "1769790",
    "end": "1775060"
  },
  {
    "text": "depending on the policy so another thing",
    "start": "1775060",
    "end": "1780110"
  },
  {
    "text": "that we did is integrating it with Jupiter so we implemented a couple of kernels that used the same Python script",
    "start": "1780110",
    "end": "1789650"
  },
  {
    "text": "at the back end so the kernels essentially wrapped the code that",
    "start": "1789650",
    "end": "1796040"
  },
  {
    "text": "arrives from the from jupiter server from the cell and send it to the to the",
    "start": "1796040",
    "end": "1803330"
  },
  {
    "text": "run box and by the way at the moment we just use cube CTL exec to run stuff in",
    "start": "1803330",
    "end": "1809960"
  },
  {
    "text": "the in the container so for example you",
    "start": "1809960",
    "end": "1815090"
  },
  {
    "text": "could have a very simple or Python codes and here that to assign some",
    "start": "1815090",
    "end": "1822039"
  },
  {
    "text": "value to variable a and then we can go",
    "start": "1822039",
    "end": "1827080"
  },
  {
    "text": "and we can we can recycle those resources so that we don't have any pods",
    "start": "1827080",
    "end": "1833559"
  },
  {
    "text": "running and then we can come back to the Jupiter notebook and the same variable",
    "start": "1833559",
    "end": "1840159"
  },
  {
    "text": "is still available so in order to get it we had to tweak a little bit the actual",
    "start": "1840159",
    "end": "1847600"
  },
  {
    "text": "Python interpreter session so that it saves the state and then we restore the state but the proof-of-concept layer",
    "start": "1847600",
    "end": "1854590"
  },
  {
    "text": "level it seems to be working fine and of course the underlying infrastructure is entirely ephemeral from the compute",
    "start": "1854590",
    "end": "1862000"
  },
  {
    "text": "perspective and here there is an example",
    "start": "1862000",
    "end": "1869590"
  },
  {
    "text": "related to resource allocation so there is some little bit more complicated computation here of some combinations of",
    "start": "1869590",
    "end": "1876760"
  },
  {
    "text": "letters so here are partly there are not enough resources and to do it and then",
    "start": "1876760",
    "end": "1883230"
  },
  {
    "text": "if we resize it to four times more resources then we can see that it",
    "start": "1883230",
    "end": "1889149"
  },
  {
    "text": "actually works so of course in real life",
    "start": "1889149",
    "end": "1895590"
  },
  {
    "text": "it might be nice if this exact factor",
    "start": "1895590",
    "end": "1901090"
  },
  {
    "text": "could be somehow computed there automatically but at the moment even just letting the developer to specify it",
    "start": "1901090",
    "end": "1908529"
  },
  {
    "text": "per per cell in this case or sounds like current useful and so there are some",
    "start": "1908529",
    "end": "1920740"
  },
  {
    "text": "more details on the architecture here which I think I'll skip and so maybe",
    "start": "1920740",
    "end": "1931149"
  },
  {
    "text": "just very briefly and on the deployment use case so this is very different so",
    "start": "1931149",
    "end": "1939399"
  },
  {
    "text": "there are there is lots of research on how to do deep learning it is useful in",
    "start": "1939399",
    "end": "1946419"
  },
  {
    "text": "lots of different applications model training model inference and all",
    "start": "1946419",
    "end": "1952830"
  },
  {
    "text": "of that is very resource-intensive and lots of new algorithms new",
    "start": "1952830",
    "end": "1960390"
  },
  {
    "text": "frameworks and so the question is you know this is an example application and",
    "start": "1960390",
    "end": "1969390"
  },
  {
    "text": "we want to focus on the classification side so which is kind of well behaving",
    "start": "1969390",
    "end": "1977070"
  },
  {
    "text": "web application in nature but and we",
    "start": "1977070",
    "end": "1982830"
  },
  {
    "text": "were trying to use K native to implement it in a kind of serverless manner and which we encountered some issues so",
    "start": "1982830",
    "end": "1990650"
  },
  {
    "text": "specifically at the two issues that we encountered were around the ability to use GPUs which is not something which is",
    "start": "1990650",
    "end": "1998600"
  },
  {
    "text": "trivial or just not enabled and another",
    "start": "1998600",
    "end": "2003679"
  },
  {
    "text": "issue was around the actual persistence of the deep learning model that is",
    "start": "2003679",
    "end": "2011600"
  },
  {
    "text": "needed for classification which is essentially the cold start so the cold",
    "start": "2011600",
    "end": "2016880"
  },
  {
    "text": "start of the containers in this case is about 20 seconds or even more so with",
    "start": "2016880",
    "end": "2024620"
  },
  {
    "text": "all the efforts to improve the connective side of the house still for certain applications the scaling the",
    "start": "2024620",
    "end": "2033049"
  },
  {
    "text": "actual provisioning is the dominant part so so what we did I'm skipping this just",
    "start": "2033049",
    "end": "2043789"
  },
  {
    "text": "going to the architecture so if this is",
    "start": "2043789",
    "end": "2049550"
  },
  {
    "text": "our like the GPU nodes and the CPU nodes of the deployment just doing and blue it",
    "start": "2049550",
    "end": "2054590"
  },
  {
    "text": "has nothing to do with going to the deployment and we want to run some sort of hybrid service on top of that that",
    "start": "2054590",
    "end": "2061730"
  },
  {
    "text": "leverages pods which GPUs and pods without GPUs so obviously we cannot just",
    "start": "2061730",
    "end": "2069679"
  },
  {
    "text": "have a 1k native service on top of those heterogeneous resources between because",
    "start": "2069679",
    "end": "2075618"
  },
  {
    "text": "scaling will not work the scaling should be done differently so what we did in a",
    "start": "2075619",
    "end": "2081319"
  },
  {
    "text": "in a prototype that we built was to use different native services for each side",
    "start": "2081319",
    "end": "2089450"
  },
  {
    "text": "and to have a load balancing on top of that which is aware of the actual",
    "start": "2089450",
    "end": "2095929"
  },
  {
    "text": "workload and it would send some requests to this side and some requests to this",
    "start": "2095929",
    "end": "2102349"
  },
  {
    "text": "side based on some policy for example typically GPU based classification",
    "start": "2102349",
    "end": "2108710"
  },
  {
    "text": "requests will be faster or it will be more efficient if we have a large batch",
    "start": "2108710",
    "end": "2114289"
  },
  {
    "text": "of requests but if we assume that amount of GPU nodes is limited and we have",
    "start": "2114289",
    "end": "2121519"
  },
  {
    "text": "other applications that also want to use those resources there is a contention",
    "start": "2121519",
    "end": "2128089"
  },
  {
    "text": "here and GPUs so it could be nice if",
    "start": "2128089",
    "end": "2133390"
  },
  {
    "text": "those resources could be somehow associated with priorities in kubernetes so that kubernetes will somehow help",
    "start": "2133390",
    "end": "2142720"
  },
  {
    "text": "sharing those resources among different workloads but this doesn't seem to be",
    "start": "2142720",
    "end": "2149599"
  },
  {
    "text": "the case at the moment so we had to implement our own scheduler which did",
    "start": "2149599",
    "end": "2156349"
  },
  {
    "text": "kind of arbitration between services and provide provided some sort of fair",
    "start": "2156349",
    "end": "2163420"
  },
  {
    "text": "sharing between those limited number of GPU resources between different services",
    "start": "2163420",
    "end": "2169549"
  },
  {
    "text": "and the second part that I mentioned regarding cold start",
    "start": "2169549",
    "end": "2174730"
  },
  {
    "text": "so we addressed it and we also try to address it and the way we did it was",
    "start": "2174730",
    "end": "2180819"
  },
  {
    "text": "inspired by function of the service solutions that sometimes many J I",
    "start": "2180819",
    "end": "2188289"
  },
  {
    "text": "maintain standby containers to run functions so we essentially implemented",
    "start": "2188289",
    "end": "2198170"
  },
  {
    "text": "a similar mechanism for creative or maintaining a pool of running pods and",
    "start": "2198170",
    "end": "2206989"
  },
  {
    "text": "based on some policy and some coordination with the scaling of the individual services instead of",
    "start": "2206989",
    "end": "2213499"
  },
  {
    "text": "provisioning a new pod we just resigned running pod to a particularly native",
    "start": "2213499",
    "end": "2220640"
  },
  {
    "text": "service so partly it was not terribly difficult so we had to do some tweaking",
    "start": "2220640",
    "end": "2225859"
  },
  {
    "text": "of labels and we also we had to tweak a little bit the history of routing and",
    "start": "2225859",
    "end": "2232819"
  },
  {
    "text": "their stats mechanism to make it work but in general so it seems that this",
    "start": "2232819",
    "end": "2240069"
  },
  {
    "text": "could be a reasonable approach although maybe there are other ways so here essentially we had to implement our own",
    "start": "2240069",
    "end": "2247749"
  },
  {
    "text": "logic around sharing of those standby",
    "start": "2247749",
    "end": "2253900"
  },
  {
    "text": "pods between services and it could be nice if for example or kubernetes",
    "start": "2253900",
    "end": "2260480"
  },
  {
    "text": "priorities could be used to let the regular scheduler to decide for example",
    "start": "2260480",
    "end": "2268489"
  },
  {
    "text": "when those pods needs to be added or removed so if for example we could as",
    "start": "2268489",
    "end": "2275420"
  },
  {
    "text": "part of the individual services creative could just run more pods than we asked",
    "start": "2275420",
    "end": "2282619"
  },
  {
    "text": "if there is enough if there is free capacity and kill those pods when there",
    "start": "2282619",
    "end": "2288140"
  },
  {
    "text": "is less capacity so although this this approach worked it it seemed that there",
    "start": "2288140",
    "end": "2295700"
  },
  {
    "text": "might be some need kubernetes native solutions that could work better so",
    "start": "2295700",
    "end": "2303799"
  },
  {
    "text": "there are some design details so this is pretty much it so just to conclude our",
    "start": "2303799",
    "end": "2312160"
  },
  {
    "text": "service is about being destruction free",
    "start": "2312160",
    "end": "2317288"
  },
  {
    "text": "specifically for compute its round remember you're doing your own cold plus distraction-free there are different",
    "start": "2317320",
    "end": "2324880"
  },
  {
    "text": "requirements for different workloads probably there is no one-size-fits-all solution and there are lots of",
    "start": "2324880",
    "end": "2333190"
  },
  {
    "text": "opportunities to build this sort of platforms on kubernetes Boston the",
    "start": "2333190",
    "end": "2338859"
  },
  {
    "text": "examples that are explored here for deep learning or interactive computing but I'm sure that there are others and",
    "start": "2338859",
    "end": "2347369"
  },
  {
    "text": "that's it thank you [Applause]",
    "start": "2347369",
    "end": "2357050"
  }
]