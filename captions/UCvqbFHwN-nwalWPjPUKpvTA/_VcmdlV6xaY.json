[
  {
    "text": "okay friends let's start alone please hello everyone we're really excited to be here and it's exciting to be on this",
    "start": "60",
    "end": "7919"
  },
  {
    "text": "stage here with me is Danny hi and this is alone and we are both from we are the",
    "start": "7919",
    "end": "13620"
  },
  {
    "text": "fastest growing Cloud security company ever and um",
    "start": "13620",
    "end": "19560"
  },
  {
    "text": "we realized when we started our Cloud security Journey almost three years ago",
    "start": "19560",
    "end": "26340"
  },
  {
    "text": "that a cloud security goes and hand in hand with a kubernetes security and",
    "start": "26340",
    "end": "32940"
  },
  {
    "text": "container security and you can't really separate both of them",
    "start": "32940",
    "end": "38100"
  },
  {
    "text": "you can think of kubernetes as a cloud within the cloud because you have for",
    "start": "38100",
    "end": "43260"
  },
  {
    "text": "both of them you have identity model you have networking model you have storage model for each one of them and you have",
    "start": "43260",
    "end": "50460"
  },
  {
    "text": "I mean they are different and you have to control each one of them in order to secure them properly and you also have",
    "start": "50460",
    "end": "57239"
  },
  {
    "text": "the interfaces between both of them and you also have to know these interface as well",
    "start": "57239",
    "end": "63359"
  },
  {
    "text": "a misconfigured container can lead to a lateral movement to your",
    "start": "63359",
    "end": "69420"
  },
  {
    "text": "Cloud environment and a network exposure issue in your Cloud environment",
    "start": "69420",
    "end": "75299"
  },
  {
    "text": "can put your container at risk now today when when organizations build",
    "start": "75299",
    "end": "81240"
  },
  {
    "text": "most of their modern organization build their um their applications on top of",
    "start": "81240",
    "end": "86460"
  },
  {
    "text": "kubernetes you have to really understand well both of them and how to uh both of",
    "start": "86460",
    "end": "92640"
  },
  {
    "text": "these domains and they can't be separated you need to address both of them",
    "start": "92640",
    "end": "98100"
  },
  {
    "text": "so today what what uh Danny is is going to to show he's going to demonstrate few",
    "start": "98100",
    "end": "103560"
  },
  {
    "text": "examples of these this interface between cloud and kubernetes and will also help you",
    "start": "103560",
    "end": "109259"
  },
  {
    "text": "understand how to to secure both of them properly but we really want you to take",
    "start": "109259",
    "end": "114840"
  },
  {
    "text": "away from this to this talk that it's these two domains the cloud security and kubernetes security cannot be separated",
    "start": "114840",
    "end": "122280"
  },
  {
    "text": "and on a personal note it's really dummy is really amazing and is an amazing expert to this the to this topic so I",
    "start": "122280",
    "end": "129720"
  },
  {
    "text": "know we work in the same company but it's really a privilege to be here and hear all these examples today and we're now no pressure Danny let's go okay",
    "start": "129720",
    "end": "139020"
  },
  {
    "text": "um cool so uh hello everyone uh so this is the kubernetes to Cloud attack",
    "start": "139020",
    "end": "144480"
  },
  {
    "text": "vectors presentation now I do want to note that this is a lighter much lighter",
    "start": "144480",
    "end": "149700"
  },
  {
    "text": "version of this presentation uh and we got the full version in the kubecon's website and I invite you all to download",
    "start": "149700",
    "end": "156540"
  },
  {
    "text": "the full uh presentation there so friends we flew 16 hours over here from Tel Aviv",
    "start": "156540",
    "end": "163459"
  },
  {
    "text": "to warn you about that that there are many kubernetes to Cloud integration points",
    "start": "163459",
    "end": "169440"
  },
  {
    "text": "in these seals that there are many attack vectors on both sides of the equation",
    "start": "169440",
    "end": "174959"
  },
  {
    "text": "and when you use a manage kubernetes solution you delegate key responsibilities to your cloud provider",
    "start": "174959",
    "end": "180959"
  },
  {
    "text": "and you follow an implicit assumption here and that is that providers make secure decisions on your behalf",
    "start": "180959",
    "end": "187860"
  },
  {
    "text": "now if you want to be as secure as possible you must understand and you",
    "start": "187860",
    "end": "193560"
  },
  {
    "text": "must supervise all participating layers your expertise cannot be siled you",
    "start": "193560",
    "end": "198780"
  },
  {
    "text": "cannot be a kubernetes expert and neglect Cloud security best practices or",
    "start": "198780",
    "end": "203940"
  },
  {
    "text": "vice versa so no friends let's get down to business",
    "start": "203940",
    "end": "211220"
  },
  {
    "text": "right so the first minute solution we're going to take a look at is eks of Amazon",
    "start": "212959",
    "end": "219540"
  },
  {
    "text": "uh and for for this first point I would like to remind you about the instance metadata server it's a service that you",
    "start": "219540",
    "end": "226860"
  },
  {
    "text": "may be familiar with it's a server that is exposed via a static IP address",
    "start": "226860",
    "end": "232159"
  },
  {
    "text": "to all ec2 instances in Amazon and you can use it to query for instance",
    "start": "232159",
    "end": "239280"
  },
  {
    "text": "metadata properties like the instance ID subscription id v-net id things like that",
    "start": "239280",
    "end": "244560"
  },
  {
    "text": "it also lets you assume the instance Cloud identity right",
    "start": "244560",
    "end": "250260"
  },
  {
    "text": "now this is a cloud agnostic concept you will find it in all major Cloud providers and for our use case it looks",
    "start": "250260",
    "end": "257160"
  },
  {
    "text": "sort of something like this so we have a pod that runs on a VM a kubernetes node and some Cloud resources",
    "start": "257160",
    "end": "264600"
  },
  {
    "text": "there's the VM Cloud identity which is assigned to the specific VM and there's",
    "start": "264600",
    "end": "269820"
  },
  {
    "text": "the instance metadata service now our pod can request a token for this",
    "start": "269820",
    "end": "275759"
  },
  {
    "text": "VM Cloud identity the token is then returned and with it we can access the cloud resources via the cloud API",
    "start": "275759",
    "end": "283500"
  },
  {
    "text": "so back to point Amazon offers two instance metadata service implementations they have their V1 and",
    "start": "283500",
    "end": "290820"
  },
  {
    "text": "V2 versions now the V2 version has session semantics to it which help to",
    "start": "290820",
    "end": "296759"
  },
  {
    "text": "protect it against server-side request forgery attacks The veto version was introduced in",
    "start": "296759",
    "end": "302580"
  },
  {
    "text": "November 2019 and eks uses uh the first version by",
    "start": "302580",
    "end": "307800"
  },
  {
    "text": "default so this means that by default the instance metadata server is not",
    "start": "307800",
    "end": "313139"
  },
  {
    "text": "protected against server-side request forgery attacks in eeks now the thing about it is that you can",
    "start": "313139",
    "end": "319680"
  },
  {
    "text": "control diversion constraint in Amazon but there is no easy flag for disabling",
    "start": "319680",
    "end": "325340"
  },
  {
    "text": "imds V1 in eks that is true uh this is true not only from the console you",
    "start": "325340",
    "end": "332520"
  },
  {
    "text": "cannot do this from the CLI nor the API in order to do so you must first create",
    "start": "332520",
    "end": "337919"
  },
  {
    "text": "an optional resource which is called a launch template you must modify the version constraint of imds flag there",
    "start": "337919",
    "end": "344880"
  },
  {
    "text": "and then you use it when you create an eks node group now this year's launch template is then",
    "start": "344880",
    "end": "350940"
  },
  {
    "text": "immutable now I'd like to go over the experience of a developer that creates a new node",
    "start": "350940",
    "end": "357539"
  },
  {
    "text": "group with the custom launch template so here I am in the AKs website creating my new node group and now I toggle this use",
    "start": "357539",
    "end": "365220"
  },
  {
    "text": "I click on this use launch template toggle then I'm redirected to this lovely page right here and of course I",
    "start": "365220",
    "end": "373020"
  },
  {
    "text": "need to go all the way to the bottom to the advanced details tab I need to click it sorry I need to click it and then",
    "start": "373020",
    "end": "380820"
  },
  {
    "text": "only a handful of options are opened up before me as you can see and the version constraint is available all down here",
    "start": "380820",
    "end": "387660"
  },
  {
    "text": "below now friends this is when your typical developer says",
    "start": "387660",
    "end": "393300"
  },
  {
    "text": "nope yep so eks does offer a tool making it",
    "start": "393300",
    "end": "399360"
  },
  {
    "text": "easier to disable IMD sp1 and configure launch templates which is called the eks",
    "start": "399360",
    "end": "405300"
  },
  {
    "text": "CTL but we need to remember that separate tools create unnecessary fragmentation and developers will still",
    "start": "405300",
    "end": "413100"
  },
  {
    "text": "create clusters right from the UI or the CLI or the API I think for instance infrastructure is code or terraform",
    "start": "413100",
    "end": "420120"
  },
  {
    "text": "uh you cannot use the ksctl conveniently with these tools so there is currently",
    "start": "420120",
    "end": "425580"
  },
  {
    "text": "friction for making secure choices now my next point would be about the",
    "start": "425580",
    "end": "431400"
  },
  {
    "text": "highly privileged default node Cloud role that you grant to eks worker nodes",
    "start": "431400",
    "end": "437759"
  },
  {
    "text": "Now the default node Row in eks includes the following Amazon policies a",
    "start": "437759",
    "end": "442860"
  },
  {
    "text": "container registry read-only policy this is used for pulling container images",
    "start": "442860",
    "end": "447900"
  },
  {
    "text": "a worker node policy which is used for joining nodes to the cluster and a cni",
    "start": "447900",
    "end": "454259"
  },
  {
    "text": "policy which is used by the Amazon's container network interface implementation for assigning IP",
    "start": "454259",
    "end": "460560"
  },
  {
    "text": "addresses to your pods now let's briefly go over the permission",
    "start": "460560",
    "end": "465599"
  },
  {
    "text": "set that you get with these policies so the registry read only policy gives us",
    "start": "465599",
    "end": "472020"
  },
  {
    "text": "various read-only permissions in the elastic container registry for us to download container images it also gives",
    "start": "472020",
    "end": "479220"
  },
  {
    "text": "us the ability to describe image scan vulnerability findings",
    "start": "479220",
    "end": "484560"
  },
  {
    "text": "the worker node policy gives us a few other read-only permissions this time in",
    "start": "484560",
    "end": "489599"
  },
  {
    "text": "the ec2 namespace for instance the ability to describe instances route",
    "start": "489599",
    "end": "494639"
  },
  {
    "text": "tables security groups subnets and vpcs that's interesting now the cni policy is a bit more",
    "start": "494639",
    "end": "501539"
  },
  {
    "text": "proactive here it gives us the ability to attach or detach network interfaces from any instance create or delete",
    "start": "501539",
    "end": "509039"
  },
  {
    "text": "network interfaces describe them and modify their attributes",
    "start": "509039",
    "end": "514320"
  },
  {
    "text": "this is neat now an interesting attribute we can modify is security groups that are assigned to a specific",
    "start": "514320",
    "end": "521520"
  },
  {
    "text": "network interface now as you can see the resource here is wildcard in all of these permissions and",
    "start": "521520",
    "end": "529560"
  },
  {
    "text": "the wildcard resource in Amazon means uh that this is not scoped to a specific",
    "start": "529560",
    "end": "534839"
  },
  {
    "text": "resource but rather these permissions are account wide okay",
    "start": "534839",
    "end": "540480"
  },
  {
    "text": "so this means that by default an attacker that reaches your pod and can assume the cloud identity of the worker",
    "start": "540480",
    "end": "547680"
  },
  {
    "text": "role via the instance metadata server can do the following they can download all of your images from your private",
    "start": "547680",
    "end": "554279"
  },
  {
    "text": "registries and show image vulnerability scan results right they can maybe Zone in on",
    "start": "554279",
    "end": "559920"
  },
  {
    "text": "images that have interesting vulnerabilities they can map your entire Amazon Network",
    "start": "559920",
    "end": "565380"
  },
  {
    "text": "by describing instances and vpcs and subnets and they can create attach detach or",
    "start": "565380",
    "end": "572399"
  },
  {
    "text": "delete your network interfaces and the latter can cause really a massive denial",
    "start": "572399",
    "end": "577500"
  },
  {
    "text": "of service think of an attacker that decides to detach all network interfaces",
    "start": "577500",
    "end": "583620"
  },
  {
    "text": "from all of your instances and then deletes them finally they can change security groups",
    "start": "583620",
    "end": "590220"
  },
  {
    "text": "of network interfaces and this can cause to expose private servers to the public or",
    "start": "590220",
    "end": "599339"
  },
  {
    "text": "uh even deny service for public service now let's go over an attack flow here so",
    "start": "599339",
    "end": "607560"
  },
  {
    "text": "imagine we have a VM a kubernetes node running in eks and it runs a vulnerable",
    "start": "607560",
    "end": "613200"
  },
  {
    "text": "Tomcat container now this container will be vulnerable for the recent log for shell for",
    "start": "613200",
    "end": "620160"
  },
  {
    "text": "instance and our attacker will use log4 shell to get a reverse shell here then",
    "start": "620160",
    "end": "626940"
  },
  {
    "text": "our attacker can extract the node token",
    "start": "626940",
    "end": "632220"
  },
  {
    "text": "and then they will use it to connect to the private container registry and download all of your images",
    "start": "632220",
    "end": "638820"
  },
  {
    "text": "cool so what's next let's say that a developer in your company",
    "start": "638820",
    "end": "645779"
  },
  {
    "text": "um had created a Jenkins integration with slack and they have a Jenkins",
    "start": "645779",
    "end": "651899"
  },
  {
    "text": "trigger slackbot serverless function now this function uses a Docker image on",
    "start": "651899",
    "end": "657959"
  },
  {
    "text": "your private registry and say that in in his integration tests that developer",
    "start": "657959",
    "end": "663959"
  },
  {
    "text": "I had hard-coded the Jenkins server credentials in the image",
    "start": "663959",
    "end": "669120"
  },
  {
    "text": "okay not that bad he thought it's a private container registry now our",
    "start": "669120",
    "end": "674459"
  },
  {
    "text": "attacker can list all instances in the account here above uh he found the actual",
    "start": "674459",
    "end": "680459"
  },
  {
    "text": "Jenkins build server but unfortunately for him he sees that this build server",
    "start": "680459",
    "end": "686100"
  },
  {
    "text": "is behind a VPN only Security Group so he can't actually access it",
    "start": "686100",
    "end": "691140"
  },
  {
    "text": "now with this point what what our attacker can do is uh he can list all security groups in the account",
    "start": "691140",
    "end": "697920"
  },
  {
    "text": "to find a more permissive Security Group in Amazon and then they can use",
    "start": "697920",
    "end": "703200"
  },
  {
    "text": "their permissions to change the Jenkins build server Security Group to the more",
    "start": "703200",
    "end": "709260"
  },
  {
    "text": "permissive one then they can actually access the Jenkins build server and",
    "start": "709260",
    "end": "714660"
  },
  {
    "text": "compromise it now I would like to show you this same workflow in a pre-recorded demo",
    "start": "714660",
    "end": "721760"
  },
  {
    "text": "and I'll narrate it so here above I have an attacker VM an",
    "start": "721760",
    "end": "727560"
  },
  {
    "text": "iPhone a tomcat container with log4 shell in an instant I will get the",
    "start": "727560",
    "end": "732720"
  },
  {
    "text": "instance token for this container and I'm using it here down below",
    "start": "732720",
    "end": "737880"
  },
  {
    "text": "now with the AWS CLI tool what I'll do next is I'll describe all repositories",
    "start": "737880",
    "end": "744540"
  },
  {
    "text": "in the container registry here I'm zoning in on the Jenkins trigger slackbot Repository",
    "start": "744540",
    "end": "751920"
  },
  {
    "text": "I am taking an ECR token here and with it I am taking the first tag of that",
    "start": "751920",
    "end": "758279"
  },
  {
    "text": "image now I will list all image layers of that tag I will take the relevant digest and",
    "start": "758279",
    "end": "766200"
  },
  {
    "text": "will download and extract it locally great now I have the uh slack trigger",
    "start": "766200",
    "end": "773100"
  },
  {
    "text": "here on my machine I am uh here we can see d",
    "start": "773100",
    "end": "778620"
  },
  {
    "text": "um hard-coded credentials with the build server I'm saving them aside and here I'm describing all instances to actually",
    "start": "778620",
    "end": "785279"
  },
  {
    "text": "find the Jenkins server now what I'll do is I'll take the security group and network interface ID",
    "start": "785279",
    "end": "791760"
  },
  {
    "text": "and save them aside for a moment and we'll describe the security group ID to Showcase that the 8080 Port that",
    "start": "791760",
    "end": "800040"
  },
  {
    "text": "Jenkins uses is only accessible to a VPN address range I will also try to curl",
    "start": "800040",
    "end": "805680"
  },
  {
    "text": "this Jenkins server and I will say that I can't access it at the moment that's too bad now I'll describe all",
    "start": "805680",
    "end": "812880"
  },
  {
    "text": "security groups in the account I will search for a more permissive 8080 Port allowing Security Group here I have",
    "start": "812880",
    "end": "820200"
  },
  {
    "text": "found one in the same account that is accidentally used by a GitHub Enterprise",
    "start": "820200",
    "end": "825240"
  },
  {
    "text": "installation totally unrelated to our Jenkins server at this point I will take the new",
    "start": "825240",
    "end": "831300"
  },
  {
    "text": "Security Group ID and I will add it to I will edit the network interface attribute and change",
    "start": "831300",
    "end": "839639"
  },
  {
    "text": "the security group to this new one at this point I can curve the bits of the build server pass in the credentials",
    "start": "839639",
    "end": "846779"
  },
  {
    "text": "and then I can compromise the build server",
    "start": "846779",
    "end": "852120"
  },
  {
    "text": "right so to mitigate this AWS recommends the following",
    "start": "852120",
    "end": "858000"
  },
  {
    "text": "first you can assign pair pod identities uh with a feature they called IM roles",
    "start": "858000",
    "end": "863760"
  },
  {
    "text": "for service accounts with this feature you assign each pod and a unique",
    "start": "863760",
    "end": "869100"
  },
  {
    "text": "identity of its own in the cloud next you can disable the imds version 1",
    "start": "869100",
    "end": "875579"
  },
  {
    "text": "in the launch template as we've seen and decrease the metadata Max hop count to",
    "start": "875579",
    "end": "880740"
  },
  {
    "text": "1. with these two properties you are blocking the ability of regular pods to",
    "start": "880740",
    "end": "886019"
  },
  {
    "text": "access the instance metadata server so they can no longer extract the host credentials",
    "start": "886019",
    "end": "891360"
  },
  {
    "text": "instead you can enforce your own custom Network policy or iptables rule that",
    "start": "891360",
    "end": "896519"
  },
  {
    "text": "does the same effect and there is one more possible and maybe",
    "start": "896519",
    "end": "901920"
  },
  {
    "text": "easier mitigation I would like to offer and it is to use fargate nodes now forget nodes is an eks pay per pod",
    "start": "901920",
    "end": "909300"
  },
  {
    "text": "pricing model and in fargate nodes imds is completely disabled only uh the ears",
    "start": "909300",
    "end": "915959"
  },
  {
    "text": "is used so uh to depict the paper pod model",
    "start": "915959",
    "end": "921120"
  },
  {
    "text": "let's contrast it with the regular pricing model now in the regular pricing model we have a VM that is spawned in",
    "start": "921120",
    "end": "928800"
  },
  {
    "text": "our Cloud subscription and we pay a fixed price for the VM whether it runs zero or a hundred Watts now in the paper",
    "start": "928800",
    "end": "937019"
  },
  {
    "text": "pod model the VM is spawned in the cloud provider subscription so we are not",
    "start": "937019",
    "end": "943019"
  },
  {
    "text": "accessible to the virtual machine itself pods are scheduled there and now we pay",
    "start": "943019",
    "end": "948420"
  },
  {
    "text": "only for the workloads so the Pod uh consumed resources and runtime",
    "start": "948420",
    "end": "954420"
  },
  {
    "text": "cool our next Cloud will be Google cloud with our Google kubernetes engine",
    "start": "954420",
    "end": "960899"
  },
  {
    "text": "now for this uh first point I would like to mention how a VM becomes a kubernetes",
    "start": "960899",
    "end": "966600"
  },
  {
    "text": "node now a VM does a bootstrap process in",
    "start": "966600",
    "end": "971880"
  },
  {
    "text": "order to become a node and it uses bootstrap credentials which are saved somewhere",
    "start": "971880",
    "end": "978060"
  },
  {
    "text": "cubelet uses them to create a separate identity for that bootstrapped node and",
    "start": "978060",
    "end": "983940"
  },
  {
    "text": "then nodes use this identity to manage their pods with this identity they can read config",
    "start": "983940",
    "end": "990420"
  },
  {
    "text": "maps and pod and node specifications and they can also read secrets of PODS that",
    "start": "990420",
    "end": "996360"
  },
  {
    "text": "are scheduled to run on them okay so uh here we'll depict the bootstrap",
    "start": "996360",
    "end": "1003380"
  },
  {
    "text": "process of a node so cubelet runs on a VM it creates a key pair for the node's",
    "start": "1003380",
    "end": "1009380"
  },
  {
    "text": "identity it creates a certificate sign-in request for the given node submit it to the cluster using the",
    "start": "1009380",
    "end": "1015860"
  },
  {
    "text": "cubelets credentials and then there is a controller that verifies this these",
    "start": "1015860",
    "end": "1021019"
  },
  {
    "text": "requests and signs the certificate then we retrieve the sign certificate for the",
    "start": "1021019",
    "end": "1026360"
  },
  {
    "text": "node and the node is now bootstrapped cool now back to point gke spawns worker VMS",
    "start": "1026360",
    "end": "1034280"
  },
  {
    "text": "via what they call a gcp instance template now this template has custom metadata properties and one of which is",
    "start": "1034280",
    "end": "1041959"
  },
  {
    "text": "called Cube EnV N is a list of environment variables which is used by cubelet and other",
    "start": "1041959",
    "end": "1048558"
  },
  {
    "text": "kubernetes system components and we'll focus on two interesting variables there",
    "start": "1048559",
    "end": "1054500"
  },
  {
    "text": "cubelet cert and cubelet key this is from the identity of cubelet in the cluster and kubert uses these to join",
    "start": "1054500",
    "end": "1062299"
  },
  {
    "text": "nodes to the cluster so anyone with basic reader permissions",
    "start": "1062299",
    "end": "1067700"
  },
  {
    "text": "to your project and namely compute instances get or list in Google or",
    "start": "1067700",
    "end": "1073280"
  },
  {
    "text": "compute instance templates get or list can read these environment variables use",
    "start": "1073280",
    "end": "1078980"
  },
  {
    "text": "the cubelet's identity and impersonate a kubernetes node now let's look at it in action I'm using",
    "start": "1078980",
    "end": "1085460"
  },
  {
    "text": "the gcloud CLI here to list instance templates in my account down below what I see is that I can get",
    "start": "1085460",
    "end": "1091760"
  },
  {
    "text": "the kubernetes master name which is the API server endpoint and up above I see the cubelet cert and cubelet key which",
    "start": "1091760",
    "end": "1098840"
  },
  {
    "text": "I'll use for authenticating to the cluster I'll write them to file and I'll use cubectl while referring to",
    "start": "1098840",
    "end": "1106160"
  },
  {
    "text": "the certificate in key and I'll try to get pods for instance now what I get here is that indeed I am using the user",
    "start": "1106160",
    "end": "1113000"
  },
  {
    "text": "cubelet but it is not permitted to list pods currently so I cannot list pause but what I can do",
    "start": "1113000",
    "end": "1120200"
  },
  {
    "text": "is I can bootstrap a new node and elevate my permissions with that so let me do just that",
    "start": "1120200",
    "end": "1126020"
  },
  {
    "text": "first I'm creating a node private key now I'm creating a certificate signing",
    "start": "1126020",
    "end": "1133160"
  },
  {
    "text": "request configuration file and I mentioned there the organization I want which is a system node this is the",
    "start": "1133160",
    "end": "1139220"
  },
  {
    "text": "kubernetes group I will be a part of and a common name which is the kubernetes user I will be the common name is a fake",
    "start": "1139220",
    "end": "1146840"
  },
  {
    "text": "node name I have chosen then from this config I create a certificate sign-in request and from this request I create a",
    "start": "1146840",
    "end": "1154700"
  },
  {
    "text": "request spec to be submitted to the cluster note that the username here will be cubelet",
    "start": "1154700",
    "end": "1161240"
  },
  {
    "text": "this request is submitted to the cluster with cubelet's credentials and here I",
    "start": "1161240",
    "end": "1167419"
  },
  {
    "text": "can finally retrieve my signed certificate here it is let me write it to a file and now I can",
    "start": "1167419",
    "end": "1175280"
  },
  {
    "text": "use cubectl referring to the created certificate and previously created private key two for instance get pods",
    "start": "1175280",
    "end": "1183260"
  },
  {
    "text": "and get config Maps and get nodes now I had mentioned that I can also read",
    "start": "1183260",
    "end": "1190160"
  },
  {
    "text": "Secrets but the secrets I can read are only for the pods that are scheduled on",
    "start": "1190160",
    "end": "1195380"
  },
  {
    "text": "the Node I am impersonating currently I'm impersonating a fake note so no pod",
    "start": "1195380",
    "end": "1200539"
  },
  {
    "text": "is running on me and I cannot read Secrets at all but what I can do is that I can use my get nodes primitive to",
    "start": "1200539",
    "end": "1207500"
  },
  {
    "text": "impersonate each node with the process I did above and then I can read secrets of all pods",
    "start": "1207500",
    "end": "1214760"
  },
  {
    "text": "mounted in each node right so let me do that quickly I'm replacing the fake note",
    "start": "1214760",
    "end": "1219980"
  },
  {
    "text": "name with the real node name in the CSR config I'm recreating my CSR and my CSR spec",
    "start": "1219980",
    "end": "1227480"
  },
  {
    "text": "and I'm submitting it to the cluster now I'm retrieving the new science",
    "start": "1227480",
    "end": "1232760"
  },
  {
    "text": "certificate and write it to a file and here I can use the new certificate to",
    "start": "1232760",
    "end": "1238940"
  },
  {
    "text": "get pods with the field selector of the node name so I can only retrieve so I",
    "start": "1238940",
    "end": "1245059"
  },
  {
    "text": "will only retrieve pods that run on the Node I'm impersonating at this point I will look at all secret",
    "start": "1245059",
    "end": "1251059"
  },
  {
    "text": "volumes of these pods here is one for example a secret name which is called",
    "start": "1251059",
    "end": "1256160"
  },
  {
    "text": "postem yeah and now with these new credentials I can get the secret and here I have it",
    "start": "1256160",
    "end": "1264080"
  },
  {
    "text": "so pound yeah no GK solves this uh with the use of",
    "start": "1264080",
    "end": "1270500"
  },
  {
    "text": "what they call shielded nodes and this is a feature that is enabled by default in gke 118 and onwards since around",
    "start": "1270500",
    "end": "1277760"
  },
  {
    "text": "September 2020. so by now you're probably good",
    "start": "1277760",
    "end": "1282919"
  },
  {
    "text": "now the second point is a more novel attack Vector of impersonating two",
    "start": "1282919",
    "end": "1288020"
  },
  {
    "text": "kubernetes system components Cube proxy and node problem detector now if you",
    "start": "1288020",
    "end": "1293840"
  },
  {
    "text": "recall I mentioned the Cuban's metadata property and it turns out it contains a few more surprises",
    "start": "1293840",
    "end": "1300980"
  },
  {
    "text": "now I'll use gcloud CLI again to list instance templates and down below let us Zone in on these",
    "start": "1300980",
    "end": "1308000"
  },
  {
    "text": "two tokens the node proxy code the Q proxy token and the problem detector token these are static tokens that can",
    "start": "1308000",
    "end": "1314960"
  },
  {
    "text": "be used by anyone to authenticate to the given cluster right so what would what could an",
    "start": "1314960",
    "end": "1321860"
  },
  {
    "text": "attacker do with these two tokens well I get uh the following permissions with them the first is the system node",
    "start": "1321860",
    "end": "1327919"
  },
  {
    "text": "proxier cluster role which gives us the ability to read services and endpoints",
    "start": "1327919",
    "end": "1333200"
  },
  {
    "text": "and the nodes create patch or update kubernetes events",
    "start": "1333200",
    "end": "1338360"
  },
  {
    "text": "and read endpoint slices great the node problem detector role is",
    "start": "1338360",
    "end": "1344179"
  },
  {
    "text": "the second one it gives us pretty much the same permissions but it also adds the ability to patch the status sub",
    "start": "1344179",
    "end": "1351980"
  },
  {
    "text": "resource of nodes this will be interesting now if an attacker gains access to these",
    "start": "1351980",
    "end": "1358940"
  },
  {
    "text": "two tokens they can list nodes and services and endpoints which can be used for reconnaissance right I can build the",
    "start": "1358940",
    "end": "1365840"
  },
  {
    "text": "internal Network map representation of your cluster no patching events this can be used to",
    "start": "1365840",
    "end": "1371960"
  },
  {
    "text": "masquerade malicious actions and omitting them for kubernetes events if any action are triggered one",
    "start": "1371960",
    "end": "1378620"
  },
  {
    "text": "now the status sub resource is interesting the status sub resource is there to store IP addresses Health",
    "start": "1378620",
    "end": "1384440"
  },
  {
    "text": "metrics about the node so patching it is probably harmless right",
    "start": "1384440",
    "end": "1389840"
  },
  {
    "text": "well nope nope now the patching status sub",
    "start": "1389840",
    "end": "1395120"
  },
  {
    "text": "resource discards any node spec changes which indeed hold most of the",
    "start": "1395120",
    "end": "1400940"
  },
  {
    "text": "interesting fields in the node but it turns out that it does not discard metadata changes along with the status",
    "start": "1400940",
    "end": "1408500"
  },
  {
    "text": "changes now this is interesting what can we do with this so now I'll use the cube proxy token the",
    "start": "1408500",
    "end": "1414740"
  },
  {
    "text": "first token to get nodes this is something I can do here I'm zoning in on a specific node",
    "start": "1414740",
    "end": "1421039"
  },
  {
    "text": "and let me highlight this metadata block here now what we'll see here is that we have",
    "start": "1421039",
    "end": "1427880"
  },
  {
    "text": "various labels now the labels I have highlighted as you can see they have the",
    "start": "1427880",
    "end": "1433220"
  },
  {
    "text": "value true here well it turns out the gke uses node labels uh as controllers for some",
    "start": "1433220",
    "end": "1441860"
  },
  {
    "text": "behavior and if I would toggle these labels from True to false or vice versa some behavioral change will take effect",
    "start": "1441860",
    "end": "1449659"
  },
  {
    "text": "and they want you and I want to showcase this to you I'll use the second token now to patch the status sub resource of",
    "start": "1449659",
    "end": "1456679"
  },
  {
    "text": "the node and I will toggle all of these labels now if I toggle these two labels I am",
    "start": "1456679",
    "end": "1464059"
  },
  {
    "text": "disabling a feature which is called image streaming okay toggling these two labels to false will",
    "start": "1464059",
    "end": "1471679"
  },
  {
    "text": "kill the workload identity metadata proxy on the Node interesting",
    "start": "1471679",
    "end": "1476960"
  },
  {
    "text": "now toggling these final two labels here will cause a complete denial of service",
    "start": "1476960",
    "end": "1483200"
  },
  {
    "text": "to the node because it will kill the container network interface implementation of gcp",
    "start": "1483200",
    "end": "1489200"
  },
  {
    "text": "and now I will showcase it I will showcase this in a pre-recorded GIF down",
    "start": "1489200",
    "end": "1494240"
  },
  {
    "text": "below I am patching uh this node above and up above I will uh let's let's see",
    "start": "1494240",
    "end": "1500120"
  },
  {
    "text": "what's happened so here I'm highlighting the ipmask agent which is now terminated and here below you can see that our",
    "start": "1500120",
    "end": "1506720"
  },
  {
    "text": "there are connected containers which are stuck because they are failing to set up the network sandbox because we killed",
    "start": "1506720",
    "end": "1512299"
  },
  {
    "text": "the cni so yeah bone right so",
    "start": "1512299",
    "end": "1519440"
  },
  {
    "text": "um for mitigation first you can limit the network access to the control plane this will at least decrease the attack",
    "start": "1519440",
    "end": "1525799"
  },
  {
    "text": "surface or you can use autopilot clusters which is uh Google's paper pod pricing model",
    "start": "1525799",
    "end": "1532159"
  },
  {
    "text": "clusters just like Target nodes in this pricing model the instance template is",
    "start": "1532159",
    "end": "1537679"
  },
  {
    "text": "creating created in a gcp internal project and hence neither you nor an",
    "start": "1537679",
    "end": "1543980"
  },
  {
    "text": "attacker can extract these tokens great finally to Azure I've waited for this so",
    "start": "1543980",
    "end": "1551480"
  },
  {
    "text": "AKs who uses AKs by the way by hand yeah okay good luck with that so",
    "start": "1551480",
    "end": "1560299"
  },
  {
    "text": "um yeah here I'm creating a kubernetes cluster uh in AKs and I'm in the access",
    "start": "1560299",
    "end": "1566120"
  },
  {
    "text": "pane uh to choose an authentication and authorization mechanism for my cluster and I have three options local accounts",
    "start": "1566120",
    "end": "1572900"
  },
  {
    "text": "with kubernetes are back which is the default and two other we choose Azure ID for authentication perfect now there are",
    "start": "1572900",
    "end": "1580460"
  },
  {
    "text": "four Cloud apis for acquiring cluster credentials in azure the list cluster",
    "start": "1580460",
    "end": "1586520"
  },
  {
    "text": "user credential API the monitoring user credential API the admin credential API",
    "start": "1586520",
    "end": "1591620"
  },
  {
    "text": "and of course Microsoft always has a deprecated API list credential which is",
    "start": "1591620",
    "end": "1597320"
  },
  {
    "text": "generic now each such API has a distinct permission in Azure which is good this",
    "start": "1597320",
    "end": "1604100"
  },
  {
    "text": "means that Azure had forethought that these uh different apis would",
    "start": "1604100",
    "end": "1611059"
  },
  {
    "text": "um would would be used by different kubernetes roles now if you use the",
    "start": "1611059",
    "end": "1616820"
  },
  {
    "text": "local accounts with kubernetes our buck again this is the default right both the user and admin credential",
    "start": "1616820",
    "end": "1622340"
  },
  {
    "text": "listing apis will return to distinct tokens sounds amazing these tokens are",
    "start": "1622340",
    "end": "1627440"
  },
  {
    "text": "static and they are unrelated to the Azure ID user okay but both apis also",
    "start": "1627440",
    "end": "1633860"
  },
  {
    "text": "return a client certificate and a private key which is signed for system Masters",
    "start": "1633860",
    "end": "1639320"
  },
  {
    "text": "essentially giving full admin privileges so let me use the azcli to demonstrate",
    "start": "1639320",
    "end": "1645320"
  },
  {
    "text": "this first I am listing the cluster admin credentials I am looking at the returned cubeconfig here",
    "start": "1645320",
    "end": "1651919"
  },
  {
    "text": "and at the bottom we can see that I have got a token that starts with 7A here and",
    "start": "1651919",
    "end": "1657320"
  },
  {
    "text": "a client key and certificate now let me open up this certificate",
    "start": "1657320",
    "end": "1662360"
  },
  {
    "text": "and here we'll see that the organization is indeed system Masters that is our kubernetes group and the common name or",
    "start": "1662360",
    "end": "1669260"
  },
  {
    "text": "kubernetes user is Master client now let me contract this with the cluster user credential API instead",
    "start": "1669260",
    "end": "1677360"
  },
  {
    "text": "and here at the bottom you can see that I get a different token right 9B perfect",
    "start": "1677360",
    "end": "1682400"
  },
  {
    "text": "but the same client certificate in private key now an attacker that got this response",
    "start": "1682400",
    "end": "1689179"
  },
  {
    "text": "can completely disregard the token use just the client certificate and key and",
    "start": "1689179",
    "end": "1694340"
  },
  {
    "text": "again admin privileges to your cluster right",
    "start": "1694340",
    "end": "1700520"
  },
  {
    "text": "now this Behavior was both implicit and undocumented until recently and the",
    "start": "1700700",
    "end": "1705980"
  },
  {
    "text": "monitoring user credential the third API also returned the admin credentials there was an open GitHub issue about",
    "start": "1705980",
    "end": "1712340"
  },
  {
    "text": "this for two years went unresolved by Microsoft now we have submitted this as a security concern to Microsoft and",
    "start": "1712340",
    "end": "1718940"
  },
  {
    "text": "we've uh they've acted promptly and now the monitoring user no longer returns admin credentials which is great now the",
    "start": "1718940",
    "end": "1725600"
  },
  {
    "text": "cluster user still does to maintain backwards compatibility but at least now it's documented but this behavior is",
    "start": "1725600",
    "end": "1732620"
  },
  {
    "text": "still the default right so we need to be aware of such things now this is the recommendation the",
    "start": "1732620",
    "end": "1739159"
  },
  {
    "text": "classic Microsoft's way presenting you with a big table uh yeah I'm not going",
    "start": "1739159",
    "end": "1744200"
  },
  {
    "text": "to go into that our recommendation is much simpler just use ad authentication if you can",
    "start": "1744200",
    "end": "1750380"
  },
  {
    "text": "right our next point is about accessing private clusters from the internet that's great now AKs had introduced a",
    "start": "1750380",
    "end": "1758779"
  },
  {
    "text": "new API relatively recently it is called run command it's a cloud API that is enabled by",
    "start": "1758779",
    "end": "1764720"
  },
  {
    "text": "default in any AKs cluster now this is true for both new clusters and even",
    "start": "1764720",
    "end": "1770059"
  },
  {
    "text": "existing clusters that were created before the API was introduced but were upgraded to a newer minor version",
    "start": "1770059",
    "end": "1776720"
  },
  {
    "text": "now there is one Cloud permission to run actual commands and another to read the standard output of those commands",
    "start": "1776720",
    "end": "1783799"
  },
  {
    "text": "when you invoke this one API API this run command API it creates a pod in your cluster and it runs a command of your",
    "start": "1783799",
    "end": "1790640"
  },
  {
    "text": "choice right remote code execution this is lovely it works for private clusters and it works for clusters with",
    "start": "1790640",
    "end": "1797000"
  },
  {
    "text": "authorized IP ranges to the control plane so essentially this bypasses all Network restrictions",
    "start": "1797000",
    "end": "1803720"
  },
  {
    "text": "great now let's see in action again using the AC CLI here I'm invoking the",
    "start": "1803720",
    "end": "1809179"
  },
  {
    "text": "Run command API and I pass it the cube CTL get pods command uh in the response I get a location of",
    "start": "1809179",
    "end": "1816679"
  },
  {
    "text": "the API I need to call to get the logs I call now this API and here are the logs",
    "start": "1816679",
    "end": "1822080"
  },
  {
    "text": "the kubecon 2022 pod is running in the private cluster now let's put a cherry on top here",
    "start": "1822080",
    "end": "1828200"
  },
  {
    "text": "with local accounts with kubernetes our buck authentication right this is the default if you recall this pod is always",
    "start": "1828200",
    "end": "1834200"
  },
  {
    "text": "created with cluster admin permissions so let's see it here this is the automatically created cluster role",
    "start": "1834200",
    "end": "1840620"
  },
  {
    "text": "binding as you can see the Run command or notation is set to true the subject is",
    "start": "1840620",
    "end": "1845960"
  },
  {
    "text": "an auto-generated service account for the pod in the AKs command namespace and the role reference is cluster admin so",
    "start": "1845960",
    "end": "1852559"
  },
  {
    "text": "Azure had thought about this not only will they give you an API that would allow bypassing all Network restrictions",
    "start": "1852559",
    "end": "1859220"
  },
  {
    "text": "if an attacker is granted access to this API they can also get admin in your",
    "start": "1859220",
    "end": "1865940"
  },
  {
    "text": "clusters this is great so creating a private Azure kubernetes service cluster yeah good luck with that",
    "start": "1865940",
    "end": "1871640"
  },
  {
    "text": "pound now for mitigation uh if you use ad",
    "start": "1871640",
    "end": "1877340"
  },
  {
    "text": "authentication which you probably should you pass in a cluster token to the API as well so uh at least uh with ad",
    "start": "1877340",
    "end": "1884539"
  },
  {
    "text": "authentication the Pod created will no longer implicitly get the cluster admin role",
    "start": "1884539",
    "end": "1889760"
  },
  {
    "text": "the random API command can also be completely disabled so we would recommend that you double",
    "start": "1889760",
    "end": "1896120"
  },
  {
    "text": "check that this run command API makes sense in your use case and please use the ID Authentication",
    "start": "1896120",
    "end": "1902840"
  },
  {
    "text": "great our third point in azure uh is about their AKs service cluster role now",
    "start": "1902840",
    "end": "1910220"
  },
  {
    "text": "in each AKs cluster they pre-configure a cluster role for their support engineers",
    "start": "1910220",
    "end": "1915919"
  },
  {
    "text": "and this is what they say about it this role enables AKs to troubleshoot diagnose your cluster but it cannot",
    "start": "1915919",
    "end": "1922580"
  },
  {
    "text": "modify permissions it cannot create roles or bindings or do any other high privilege actions I love that now let's",
    "start": "1922580",
    "end": "1930020"
  },
  {
    "text": "see the AKs service cluster role as it is well of course it can read all of your",
    "start": "1930020",
    "end": "1935480"
  },
  {
    "text": "secrets and it can impersonate any other service account and it can create pods and attach to",
    "start": "1935480",
    "end": "1942080"
  },
  {
    "text": "pods and exec to pods so essentially they have um",
    "start": "1942080",
    "end": "1947500"
  },
  {
    "text": "they have the ability to execute code in your cluster so yeah Microsoft",
    "start": "1947500",
    "end": "1953899"
  },
  {
    "text": "you've unlocked an achievement without saying God me",
    "start": "1953899",
    "end": "1960260"
  },
  {
    "text": "perfect now this is our final Point here abusing add-ons with broad permission",
    "start": "1960260",
    "end": "1966020"
  },
  {
    "text": "Scopes and for this I need to remind you about managed identities in azure now manager identities in Azure are",
    "start": "1966020",
    "end": "1972679"
  },
  {
    "text": "principles that are attached to a computer resource like a VM or a serverless function you can have zero or",
    "start": "1972679",
    "end": "1978020"
  },
  {
    "text": "more or more such principles you can take you can be granted and you",
    "start": "1978020",
    "end": "1983840"
  },
  {
    "text": "can assume these principles via the instance metadata server and get a token for them",
    "start": "1983840",
    "end": "1989419"
  },
  {
    "text": "now the Primitive here is that if you can open and read from a network socket on said compute resource you can",
    "start": "1989419",
    "end": "1995779"
  },
  {
    "text": "probably assume the identity and the implicit assumption that follows is that only trusted processes run on",
    "start": "1995779",
    "end": "2002679"
  },
  {
    "text": "your resources now AKs offers various first party and third-party AKs add-ons they call them",
    "start": "2002679",
    "end": "2009039"
  },
  {
    "text": "and some of them interact with your Cloud resources those that do create a managed identity",
    "start": "2009039",
    "end": "2015340"
  },
  {
    "text": "which is attached to your virtual machine now we would expect that add-ons will use a least privileged",
    "start": "2015340",
    "end": "2022480"
  },
  {
    "text": "access model especially first party Microsoft official add-ons now let's take a look at two of such",
    "start": "2022480",
    "end": "2028299"
  },
  {
    "text": "add-ons the first one is the Ingress application Gateway add-on which is Microsoft's official Ingress controller",
    "start": "2028299",
    "end": "2034299"
  },
  {
    "text": "and the second one is the virtual node add-on which is Microsoft's paper pod enabler",
    "start": "2034299",
    "end": "2040659"
  },
  {
    "text": "now if we'll see here the default permissions for them both are getting",
    "start": "2040659",
    "end": "2045820"
  },
  {
    "text": "the contributor role for the node Resource Group now contributor role mind you is basically read write execute uh",
    "start": "2045820",
    "end": "2053618"
  },
  {
    "text": "in Azure so almost like admin but scope to the research node Resource Group and",
    "start": "2053619",
    "end": "2058839"
  },
  {
    "text": "you cannot bring your own identity so by default any container can assume",
    "start": "2058839",
    "end": "2064540"
  },
  {
    "text": "these identities and this means that containers that are vulnerable to remote code execution or server side requests",
    "start": "2064540",
    "end": "2070839"
  },
  {
    "text": "forgery attacks might get exploited to escalate privileges in your Cloud environment",
    "start": "2070839",
    "end": "2076780"
  },
  {
    "text": "now uh let's go over briefly uh in attack flow here we'll have a vulnerable",
    "start": "2076780",
    "end": "2083200"
  },
  {
    "text": "redis container that runs in AKs an attacker will run and exploit on this",
    "start": "2083200",
    "end": "2089320"
  },
  {
    "text": "vulnerable container and get a shell they will use using the instance method of the server they can extract the",
    "start": "2089320",
    "end": "2095858"
  },
  {
    "text": "virtual machine scale set ID now virtual machine scale sets are a compute",
    "start": "2095859",
    "end": "2100900"
  },
  {
    "text": "primitive in Azure they can extract also the access token of the enabled add-on",
    "start": "2100900",
    "end": "2107740"
  },
  {
    "text": "and now what they can do this is interesting they can use the Run command API this is a separate API which is",
    "start": "2107740",
    "end": "2113920"
  },
  {
    "text": "similar to the previously run command API I've shown on AKs but it runs command on any virtual machine in a",
    "start": "2113920",
    "end": "2120460"
  },
  {
    "text": "scale set so they use the Run command API to get a reverse shell now Microsoft did a really good job here the Run",
    "start": "2120460",
    "end": "2127359"
  },
  {
    "text": "command API the agent that executes to your commands always runs them as root",
    "start": "2127359",
    "end": "2132520"
  },
  {
    "text": "so essentially with this API you get root on the Node on any kubernetes node now with root on the Node",
    "start": "2132520",
    "end": "2141040"
  },
  {
    "text": "uh okay you can read all mounted secrets and move laterally okay let me just uh finish up",
    "start": "2141040",
    "end": "2146980"
  },
  {
    "text": "uh now at this point I hope that you're convinced that cloud providers won't always make secure calls the features",
    "start": "2146980",
    "end": "2154180"
  },
  {
    "text": "affecting your security posture get introduced unbeknownst to you the defaults are almost never secure that",
    "start": "2154180",
    "end": "2160720"
  },
  {
    "text": "the restriction for moving away from defaults the documentation can be stale even misleading and that securing layers",
    "start": "2160720",
    "end": "2168040"
  },
  {
    "text": "in Silo overlooks interesting attack vectors thank you very much",
    "start": "2168040",
    "end": "2173740"
  },
  {
    "text": "and uh thank you thank you",
    "start": "2173740",
    "end": "2178500"
  },
  {
    "text": "now our attacker won't hack your clusters if you rate this talk so feel free to do so at sketch.com forward",
    "start": "2180579",
    "end": "2186760"
  },
  {
    "text": "slash 182 capital J lowercase l um that that is all",
    "start": "2186760",
    "end": "2194400"
  },
  {
    "text": "[Applause]",
    "start": "2195100",
    "end": "2198820"
  }
]