[
  {
    "text": "cool so welcome to The Talk The Missing talk about API versioning and the evolution in your developer platform uh",
    "start": "799",
    "end": "7040"
  },
  {
    "text": "my name is sech I'm in the kubernetes ecosystem since 2016 I wrote probably way too many operators and broke way too",
    "start": "7040",
    "end": "15000"
  },
  {
    "text": "many users with crd API versioning and that was the main motivation for this talk yeah my name is Stefan stansky I'm",
    "start": "15000",
    "end": "21600"
  },
  {
    "text": "involved in crd work for years so lots of the things the pain you are seeing",
    "start": "21600",
    "end": "27720"
  },
  {
    "text": "might be uh my fault um we will see but we have this talk to repair everything",
    "start": "27720",
    "end": "33440"
  },
  {
    "text": "and fix everything so there was a talk two No 3 hours ago um I an echo here is",
    "start": "33440",
    "end": "40680"
  },
  {
    "text": "this is it okay I think so can you hear me well okay strange so there was a talk",
    "start": "40680",
    "end": "46840"
  },
  {
    "text": "in the same track um before lunch and the title is super similar as you notice",
    "start": "46840",
    "end": "52760"
  },
  {
    "text": "so Nick gave a very um yeah basically an introduction to the same topic but very",
    "start": "52760",
    "end": "59480"
  },
  {
    "text": "AOG so um if you haven't seen that please watch the recording it's a great um",
    "start": "59480",
    "end": "65760"
  },
  {
    "text": "complimentary addition to our talk all right so that's probably something that everybody of you see",
    "start": "65760",
    "end": "72000"
  },
  {
    "text": "every day right I mean at the end of the day we are crd developers and we provision like well we develop crd apis",
    "start": "72000",
    "end": "78200"
  },
  {
    "text": "and like we have this little silly example here with a crd of kind table uh and we have some spec with a color",
    "start": "78200",
    "end": "84479"
  },
  {
    "text": "thickness he and some status condition with a cost and obviously on the right hand side you see the open API schema",
    "start": "84479",
    "end": "90560"
  },
  {
    "text": "uh maybe that's something you pay a little bit less attention to every day that corresponds to it right and that's",
    "start": "90560",
    "end": "96280"
  },
  {
    "text": "sort of like something that we do every day but something that we pay very little attention to very often is like",
    "start": "96280",
    "end": "101479"
  },
  {
    "text": "this version um you know qualifier up there that is saying version one so",
    "start": "101479",
    "end": "106640"
  },
  {
    "text": "let's say we want to change something in this crd we want to change the structure we want to change the schema like in this case we want to put thickness and",
    "start": "106640",
    "end": "113280"
  },
  {
    "text": "they hate like we want to like restructure it a little bit put it under a size and maybe we want to rename like the status condition cost dollar or cost",
    "start": "113280",
    "end": "119920"
  },
  {
    "text": "into cost dollars so we changed the schema we changed the version and we call it a day right like hands up",
    "start": "119920",
    "end": "126840"
  },
  {
    "text": "whoever did this mistake already okay I'm I'm happy I'm not alone I did this mistake as well you just",
    "start": "126840",
    "end": "132920"
  },
  {
    "text": "broke the user if you just go it like so okay so like what we want to show you in this talk that like it's not as easy as",
    "start": "132920",
    "end": "138800"
  },
  {
    "text": "just slapping like a new version uh up there you have to follow certain rules and certain patterns because kubernetes",
    "start": "138800",
    "end": "144800"
  },
  {
    "text": "has quite some amount of invariance imposed upon you um so you cannot do that unfortunately just like so and to",
    "start": "144800",
    "end": "151599"
  },
  {
    "text": "make things a little bit complicated I won't go into the details what's happening here but this is like probably something that many of you already saw",
    "start": "151599",
    "end": "157360"
  },
  {
    "text": "this is the request Handler chain of the API server uh and we should have made red red Little Boxes there but anytime",
    "start": "157360",
    "end": "162959"
  },
  {
    "text": "you see like this uh keyword conversion that's something where versions are being converted back and forth inside",
    "start": "162959",
    "end": "169519"
  },
  {
    "text": "the API request Handler chain that is if you think you're submitting a version to C API server and that stays like stable",
    "start": "169519",
    "end": "176599"
  },
  {
    "text": "within the whole request Handler chain that's unfortunately not true so when we start with the version one of",
    "start": "176599",
    "end": "183200"
  },
  {
    "text": "the crd of this silly little TBL crd um the world is simple easy and nice right",
    "start": "183200",
    "end": "188959"
  },
  {
    "text": "I mean the U if the client submits a request towards API server um it submits",
    "start": "188959",
    "end": "194560"
  },
  {
    "text": "a like for instance get version one of the crd and it goes through sort of like a simplified version of of the slide",
    "start": "194560",
    "end": "200440"
  },
  {
    "text": "before through defaulting um admission mutating admission schema validation and um",
    "start": "200440",
    "end": "206599"
  },
  {
    "text": "validation admission at the end it is being stored inw one that City and everything is perfect and that's sort of",
    "start": "206599",
    "end": "212400"
  },
  {
    "text": "like a picture that hopefully everybody has in in in their hats um but the world is not that simple",
    "start": "212400",
    "end": "219560"
  },
  {
    "text": "because we have a like special metadata information attached to each um crd and",
    "start": "219560",
    "end": "224640"
  },
  {
    "text": "that is the so-called storage version that tells C API server in what version to store um a resource when it arrives",
    "start": "224640",
    "end": "232640"
  },
  {
    "text": "at the API server and guess what how many storage versions can you specify at the same",
    "start": "232640",
    "end": "238720"
  },
  {
    "text": "time like more than one who think that you can specify more than one storage version at the same time no you can specify only one so that's a bummer",
    "start": "238720",
    "end": "246439"
  },
  {
    "text": "right so that means we can only tell IPI server well store everything in V1 and you can only specify one version so",
    "start": "246439",
    "end": "252439"
  },
  {
    "text": "let's say we have the V2 request for the same kind approaching at API server uh",
    "start": "252439",
    "end": "257880"
  },
  {
    "text": "sort of like the same request Handler chain is being run through defaulting mutating admission schema validation and",
    "start": "257880",
    "end": "264840"
  },
  {
    "text": "validation but at the end conversion happens and the funny thing is and that's super counterintuitive the",
    "start": "264840",
    "end": "271960"
  },
  {
    "text": "conversion happens back into V1 so like despite we increase the version to V2",
    "start": "271960",
    "end": "277000"
  },
  {
    "text": "like things are being converted to V1 and guess what if you didn't implement the conversion nothing is converted like",
    "start": "277000",
    "end": "283120"
  },
  {
    "text": "it's literally a noop operation by default so",
    "start": "283120",
    "end": "288440"
  },
  {
    "text": "um long story short what we must provide as crd API developers is this conversion",
    "start": "288440",
    "end": "294360"
  },
  {
    "text": "between V1 and V2 and to be a little bit academic like if you if you like math like this is",
    "start": "294360",
    "end": "301120"
  },
  {
    "text": "also called in that space isomorphic behavior that is we have to be able to convert between V1 and V2 back and forth",
    "start": "301120",
    "end": "309240"
  },
  {
    "text": "without loss of information otherwise conversion and this whole request handle change um chain will simply will not",
    "start": "309240",
    "end": "317039"
  },
  {
    "text": "work and it's even worse you cannot only like do a one-way conversion from V1 to V2 you also must be able to convert from",
    "start": "317039",
    "end": "324039"
  },
  {
    "text": "V2 to uh V1 back like this round tripping is very important remember this",
    "start": "324039",
    "end": "329680"
  },
  {
    "text": "request hand the chain from before right I mean our request arrives at V2 it is being stored in at CD and V1 and then uh",
    "start": "329680",
    "end": "337080"
  },
  {
    "text": "in the subsequent list or get operation the same thing happens it has to be read as V1 from etsd converted back to V2 so",
    "start": "337080",
    "end": "344319"
  },
  {
    "text": "that that needs to be a full round trip so we have those like two statements up here right I mean when",
    "start": "344319",
    "end": "351039"
  },
  {
    "text": "anybody tells you ah an object exists as V1 and another sv2 in communities that's",
    "start": "351039",
    "end": "356520"
  },
  {
    "text": "not really true yes it it may be stored in different versions in ad City but a client can query any version it wants it",
    "start": "356520",
    "end": "364160"
  },
  {
    "text": "can query V1 and V2 and it has to get back the same data without any loss of",
    "start": "364160",
    "end": "369199"
  },
  {
    "text": "information and whenever anybody tells you V2 is a major version upgrade from V1 and we can anything in the schema",
    "start": "369199",
    "end": "375199"
  },
  {
    "text": "that's also definitely not a true statement you cannot change anything at will because of all the invariance that we just showed",
    "start": "375199",
    "end": "382440"
  },
  {
    "text": "you all right so we have seen the right path um as pictures already um to be bit",
    "start": "382440",
    "end": "388680"
  },
  {
    "text": "more applied here so CU cutle get tables so example is tables um and we ask for",
    "start": "388680",
    "end": "394120"
  },
  {
    "text": "them so CU cutle will choose one version so and it chooses the latest one it doesn't choose the storage version",
    "start": "394120",
    "end": "400960"
  },
  {
    "text": "there's some order between versions V2 is the latest one it will do a V2 request so it will basically go to the",
    "start": "400960",
    "end": "407199"
  },
  {
    "text": "URL here and get all the tables so this reading operation as s said from V1",
    "start": "407199",
    "end": "415080"
  },
  {
    "text": "converted defaulted converted into a V2 and reading can be a get can be a list",
    "start": "415080",
    "end": "421400"
  },
  {
    "text": "so if um you do get tables you will list the object so it's a listing operation and this happens every object is",
    "start": "421400",
    "end": "428080"
  },
  {
    "text": "converted so that's what you get tables in the V2 um version there's one syntax",
    "start": "428080",
    "end": "435440"
  },
  {
    "text": "there a syntax to um ask for V1 it's look looks like that so it's a resource name and then the version and the group",
    "start": "435440",
    "end": "441240"
  },
  {
    "text": "name can do the same thing CU CLE will ask for the other endpoint the upper one",
    "start": "441240",
    "end": "446400"
  },
  {
    "text": "and um you get the same objects same two objects as we want again this basically shows what SE has has said before ver",
    "start": "446400",
    "end": "454680"
  },
  {
    "text": "objects don't exist in a version every object which is part of a resource can",
    "start": "454680",
    "end": "459919"
  },
  {
    "text": "be carried in every version which is served all right um a very special",
    "start": "459919",
    "end": "467199"
  },
  {
    "text": "client cube cutle is easy there are controllers in Cube but they are not very different the developer chooses a",
    "start": "467199",
    "end": "473680"
  },
  {
    "text": "version to reconcile so in the example here the developer chose V2 so the",
    "start": "473680",
    "end": "479000"
  },
  {
    "text": "controller running against this table resource here will see all objects as V2",
    "start": "479000",
    "end": "485479"
  },
  {
    "text": "so the statement that the Informer behaves differently for V1 than for v2 is not true right because a controller",
    "start": "485479",
    "end": "492560"
  },
  {
    "text": "doesn't know it asks for objects gets all of them as V2 and whether the user used V V1 for that the controller will",
    "start": "492560",
    "end": "498919"
  },
  {
    "text": "never see all right storage version so as you",
    "start": "498919",
    "end": "504919"
  },
  {
    "text": "have seen there is one if you want to Pro promote that we want to change to V2",
    "start": "504919",
    "end": "510960"
  },
  {
    "text": "as you see here if you look on ETD again on the right side nothing happens that's surprising actually you have to tell the",
    "start": "510960",
    "end": "518800"
  },
  {
    "text": "API server to touch objects to make them right again into ATD and the API server",
    "start": "518800",
    "end": "524240"
  },
  {
    "text": "is that clever it will read the object from ETD it will apply the patch the patch is empty here in the example will",
    "start": "524240",
    "end": "530200"
  },
  {
    "text": "not change anything but it will write back the new storage version so basically that is what you have to do",
    "start": "530200",
    "end": "535640"
  },
  {
    "text": "for every object we did it for one uh one object here the de in the living room and you have a desk in the office",
    "start": "535640",
    "end": "541680"
  },
  {
    "text": "the second one do the same thing and everything is uniform again in the past",
    "start": "541680",
    "end": "546839"
  },
  {
    "text": "you had to do that there is work in kubernetes at the moment for the storage version migrator so there's an open",
    "start": "546839",
    "end": "553320"
  },
  {
    "text": "source tool um owned by the S Machinery and this is being integrated into Cube",
    "start": "553320",
    "end": "558720"
  },
  {
    "text": "so this this operation will soon be automatic but at the moment especially in Old clusters be aware of that all",
    "start": "558720",
    "end": "565399"
  },
  {
    "text": "right so um changing sto storage versions at some point in time is something I mean on the dimension of",
    "start": "565399",
    "end": "570640"
  },
  {
    "text": "time right this really plays an important role in C development in API Evolution so that's a picture here um we",
    "start": "570640",
    "end": "577959"
  },
  {
    "text": "added V2 in April and we changed the storage version in June and somebody",
    "start": "577959",
    "end": "583560"
  },
  {
    "text": "updated to the newest version via Helm and from July every new object written",
    "start": "583560",
    "end": "589160"
  },
  {
    "text": "is a V2 object so dimension of time but this is actually not the case in",
    "start": "589160",
    "end": "594920"
  },
  {
    "text": "practice it's too easy it's more like that you do upgrades you don't know when your users upgrade but they will do that",
    "start": "594920",
    "end": "601959"
  },
  {
    "text": "and probably they will do it more often than you add new major versions so you",
    "start": "601959",
    "end": "607600"
  },
  {
    "text": "have shades of green here so you you change your V1 API maybe you add a field",
    "start": "607600",
    "end": "613519"
  },
  {
    "text": "um change on validation so you have a darker green here and it's green it's green",
    "start": "613519",
    "end": "619240"
  },
  {
    "text": "eventually soci has changed everything is blue but there are shades of blue so that's basically the mental model um of",
    "start": "619240",
    "end": "624959"
  },
  {
    "text": "evolution of apis in ET CDs in users clusters so that's what you have to think about when you do API",
    "start": "624959",
    "end": "632800"
  },
  {
    "text": "Evolution all right so as my dear colleague Sebastian wascavage is always saying when in doubt zoom out there's a",
    "start": "632800",
    "end": "639560"
  },
  {
    "text": "lot of detailed information that you got so far like a lot of implementation details lowlevel stuff was like what is",
    "start": "639560",
    "end": "644600"
  },
  {
    "text": "important for you we will show you some patterns how to overcome those constraints but you may develop much",
    "start": "644600",
    "end": "650320"
  },
  {
    "text": "more in the future and what's important for you is to get you know home like a mental model that you can reason about",
    "start": "650320",
    "end": "656440"
  },
  {
    "text": "When developing new patterns of API evolution so when you think about it you know",
    "start": "656440",
    "end": "661480"
  },
  {
    "text": "everything in computer science is about State machines right and a state machine is comprised of two things a state and a state transition and when we create",
    "start": "661480",
    "end": "668000"
  },
  {
    "text": "resources and communities we have a create um you know a created State and",
    "start": "668000",
    "end": "673320"
  },
  {
    "text": "from there we can go on and like do various uh update operations update Transitions and we end up in new States",
    "start": "673320",
    "end": "679440"
  },
  {
    "text": "right and so we end up like with a Hu huge like State graph of possible of possible States and state transitions so",
    "start": "679440",
    "end": "684760"
  },
  {
    "text": "for our little silly table example here uh we can for instance up the color to",
    "start": "684760",
    "end": "690000"
  },
  {
    "text": "Red that's a valid State transition and we can update the color to Black that's also cool oh but we made a bug right we",
    "start": "690000",
    "end": "697000"
  },
  {
    "text": "allow negative values for the hate which kind of doesn't make sense right so like in this case we identified during the",
    "start": "697000",
    "end": "702360"
  },
  {
    "text": "development of the crd H the default H shouldn't be allowed to have negative values but there is nothing in the",
    "start": "702360",
    "end": "708720"
  },
  {
    "text": "schema that forbids that right so we identified that this is an invalid transition to a state that is also",
    "start": "708720",
    "end": "713959"
  },
  {
    "text": "invalet and that's something we want to prevent and that's sort of like the actual important thing for you to",
    "start": "713959",
    "end": "719440"
  },
  {
    "text": "remember think of States state Miss State and State Transitions and of those",
    "start": "719440",
    "end": "724800"
  },
  {
    "text": "invalid states do that you may end up uh with when identifying bucks in your in your",
    "start": "724800",
    "end": "730800"
  },
  {
    "text": "schema and when you think of versions it's really just two independent state machines like a like a V1 possible State",
    "start": "730800",
    "end": "737199"
  },
  {
    "text": "machine and a V2 possible State machine right that might look very similar potentially like in the 99 percen of all",
    "start": "737199",
    "end": "742560"
  },
  {
    "text": "the update operations but for some things it may look different for instance the the the invalid uh negative",
    "start": "742560",
    "end": "748399"
  },
  {
    "text": "hate and what you have to do is to be able to convert between those state state machines without loss of",
    "start": "748399",
    "end": "754079"
  },
  {
    "text": "information so um while you know in at CD everything happens inside the like",
    "start": "754079",
    "end": "760399"
  },
  {
    "text": "using the storage version uh State machine the thing on the on the left the V1 you know for the user any any",
    "start": "760399",
    "end": "767279"
  },
  {
    "text": "possible like State machine uh that is represented here may be furied via the",
    "start": "767279",
    "end": "773240"
  },
  {
    "text": "client so when we bring back this time perspective that that Stefan showed you right and we again have this mental",
    "start": "773240",
    "end": "778760"
  },
  {
    "text": "model of State machines right you may have like um identified and fixed via",
    "start": "778760",
    "end": "784680"
  },
  {
    "text": "through versions that in some initial version V1 alpha 1 you have a negative he and that initial State um is invalid",
    "start": "784680",
    "end": "791959"
  },
  {
    "text": "right it's it's an invalid creation um State um and you fix it in in in V1 and",
    "start": "791959",
    "end": "797279"
  },
  {
    "text": "it's not a valid creation state in V1 anymore but what is important that inside at CD still a negative State",
    "start": "797279",
    "end": "804320"
  },
  {
    "text": "might be stored so what you have to do as a crd API developer is to",
    "start": "804320",
    "end": "809680"
  },
  {
    "text": "not um you know have the user to be stuck but sort of like have a one-way progression of your crd API that",
    "start": "809680",
    "end": "816240"
  },
  {
    "text": "eventually you know eventually consistent sort of like this metaphor bringing it up again um you come up to a",
    "start": "816240",
    "end": "822000"
  },
  {
    "text": "valid State machine that that is the desired fix State machine that you want to provision and you also might do it",
    "start": "822000",
    "end": "829480"
  },
  {
    "text": "through simple schema U Evolution right so you might even have found out in your in your V1 Stak machine that you",
    "start": "829480",
    "end": "835440"
  },
  {
    "text": "released you know uh 3 weeks ago in the helm upgrade oh we have this invalid uh state of a",
    "start": "835440",
    "end": "841759"
  },
  {
    "text": "negative hate you know we want to prevent it to be happening and you you can even fix the same the schema or this",
    "start": "841759",
    "end": "847759"
  },
  {
    "text": "invalid State machine inside the same version again you want prevent users to",
    "start": "847759",
    "end": "854240"
  },
  {
    "text": "to create this new State uh and you really want to have like this oneway progression without breaking",
    "start": "854240",
    "end": "862360"
  },
  {
    "text": "users again zooming out think of these things as of like clouds of States uh",
    "start": "862360",
    "end": "867800"
  },
  {
    "text": "and state transitions where you have like possible um valid or invalid States",
    "start": "867800",
    "end": "872880"
  },
  {
    "text": "and you want to um make sure that you don't get anybody stuck and we will show you some patterns how to accomplish that",
    "start": "872880",
    "end": "878959"
  },
  {
    "text": "in the next slides yeah so this looks like mathematics it's not really",
    "start": "878959",
    "end": "884680"
  },
  {
    "text": "mathematics in practice understand your users understand how they use your product",
    "start": "884680",
    "end": "891199"
  },
  {
    "text": "there might be invalid States like the negative hate for the for the for the table but maybe no user ever used that",
    "start": "891199",
    "end": "897000"
  },
  {
    "text": "hopefully because doesn't make sense right or you can use I know you can migrate your um yeah some clusters maybe you",
    "start": "897000",
    "end": "904639"
  },
  {
    "text": "have access to them you can watch them basically use the knowledge of your application how it's used to reduce the",
    "start": "904639",
    "end": "910720"
  },
  {
    "text": "state space so it's not mathematics it's just knowing um how your software is used all right so who is in this face at",
    "start": "910720",
    "end": "919160"
  },
  {
    "text": "the moment everything is super complicated right and yes it is super complicated but um yeah the talk is",
    "start": "919160",
    "end": "926720"
  },
  {
    "text": "about navigating the space so you saw um a mental model already now there's a",
    "start": "926720",
    "end": "932279"
  },
  {
    "text": "section about tools um we have seen some tools already in this request um and chain and um some of them I will",
    "start": "932279",
    "end": "938880"
  },
  {
    "text": "highlight quickly so that's a detailed picture of the API server and this is our simplification so first one I want to",
    "start": "938880",
    "end": "946000"
  },
  {
    "text": "highlight defaulting defaulting happens when you write an object to ETD when you create apply an object if a field is not",
    "start": "946000",
    "end": "952959"
  },
  {
    "text": "set but there's a default the default is applied um that's obvious kind of um that's what default you should do",
    "start": "952959",
    "end": "959360"
  },
  {
    "text": "there's a ni a nice addition to that defaulting happens on read as well so when you read an object which is old",
    "start": "959360",
    "end": "965600"
  },
  {
    "text": "like a half year old object in L CD and you added defaulting three weeks ago CU cutle get will will show the default so",
    "start": "965600",
    "end": "972839"
  },
  {
    "text": "you can add defaults anytime but it's not it's not stored in LD everything which is written gets the",
    "start": "972839",
    "end": "979480"
  },
  {
    "text": "default but old objects which were never um touched for for half year they don't",
    "start": "979480",
    "end": "984839"
  },
  {
    "text": "have this value but in the API it shows up anyway because it's applied in this state",
    "start": "984839",
    "end": "990920"
  },
  {
    "text": "yeah this was one part already of open API um schema validation in general for every field you can give a type you must",
    "start": "991079",
    "end": "996880"
  },
  {
    "text": "give a type and there are a number of of properties in open API V3 you can use",
    "start": "996880",
    "end": "1002759"
  },
  {
    "text": "and most of you will know that um to restrict um the values uh for that",
    "start": "1002759",
    "end": "1008519"
  },
  {
    "text": "field there's one thing um since 130 of kubernetes um we have reting reting we",
    "start": "1008519",
    "end": "1014720"
  },
  {
    "text": "will show in a more detailed slide later basically imagine black tables are out",
    "start": "1014720",
    "end": "1020160"
  },
  {
    "text": "so you cannot produce black tables anymore and you don't want that anybody creates a claim for a black table you",
    "start": "1020160",
    "end": "1026438"
  },
  {
    "text": "could remove that from our enam right and for simple operations um it's",
    "start": "1026439",
    "end": "1032199"
  },
  {
    "text": "automatic that if you have a black table already like there's a custom resource with a black color you can still update",
    "start": "1032199",
    "end": "1039438"
  },
  {
    "text": "that although the black is not part of the enam anymore as long as you don't change",
    "start": "1039439",
    "end": "1045558"
  },
  {
    "text": "the color when you start changing the color it's over then the supplies it's it's a form of or we call",
    "start": "1045559",
    "end": "1051640"
  },
  {
    "text": "it rting it's part of 130 so it makes it a bit easier to",
    "start": "1051640",
    "end": "1056919"
  },
  {
    "text": "strengthen validations if you have found a mistake like a negative hate that's way if open API doesn't work or it's not",
    "start": "1056919",
    "end": "1064600"
  },
  {
    "text": "enough not expressive enough say cell it's a uh expression language small programming language where you can",
    "start": "1064600",
    "end": "1070679"
  },
  {
    "text": "express things and you can can express things cross Fields you can give nice messages more powerful as an open API",
    "start": "1070679",
    "end": "1077440"
  },
  {
    "text": "use that it's available uh for a couple of versions there are a couple of policy",
    "start": "1077440",
    "end": "1083480"
  },
  {
    "text": "languages cavano open open policy agent most of you will know there's a new one validating emission policy for quite",
    "start": "1083480",
    "end": "1090000"
  },
  {
    "text": "some or few versions um they have different expressivity so choose the one",
    "start": "1090000",
    "end": "1096120"
  },
  {
    "text": "you like um do what you can do in those languages if this is not enough they",
    "start": "1096120",
    "end": "1101640"
  },
  {
    "text": "have a books right so you can write and go or JavaScript whatever you like you can even M mutate objects so before are",
    "start": "1101640",
    "end": "1108960"
  },
  {
    "text": "even validated you can um do special defaulting for example defaulting which is more complex or any other thing we",
    "start": "1108960",
    "end": "1115799"
  },
  {
    "text": "can you can query any any other resource and somehow combine them and mutate and",
    "start": "1115799",
    "end": "1120919"
  },
  {
    "text": "finally validation you can do and conversion that's maybe the first thing everybody will touch when adding new",
    "start": "1120919",
    "end": "1126400"
  },
  {
    "text": "versions this must be a web hook nowadays all right that's a table I don't go into details um if you're in a",
    "start": "1126400",
    "end": "1133559"
  },
  {
    "text": "recent version the last three four versions you have most of that already all right patterns",
    "start": "1133559",
    "end": "1139520"
  },
  {
    "text": "okay so Hands-On examples stuff that works that sort of like is somehow proven uh and disclaimer these are not",
    "start": "1139520",
    "end": "1146240"
  },
  {
    "text": "all the non patterns in fact there there will be like I'm I'm very curious to explore more um and I want to explore",
    "start": "1146240",
    "end": "1152080"
  },
  {
    "text": "more but these are sort of like some of the known ones um that you maybe also saw in like the previous uh handson talk",
    "start": "1152080",
    "end": "1157640"
  },
  {
    "text": "right uh first pattern the rename pattern right I mean the easy case we want to rename a field that's pretty",
    "start": "1157640",
    "end": "1163039"
  },
  {
    "text": "easy like when you when you remind like state state machines transitions when you think about those two state machines",
    "start": "1163039",
    "end": "1169039"
  },
  {
    "text": "like V2 and V1 yeah I can think of the whole state machines being convertible between each other so that gives you already like a proof point that Yep this",
    "start": "1169039",
    "end": "1176240"
  },
  {
    "text": "should be doable right and yes indeed it is you have to do uh the renaming you have to do it in the web hook uh but",
    "start": "1176240",
    "end": "1181880"
  },
  {
    "text": "it's definitely possible so that's that's like a solvable case um the move pattern is also a solvable case again",
    "start": "1181880",
    "end": "1188320"
  },
  {
    "text": "going back to the state machine stuff pretty easy it's a little bit like renaming but just moving um it needs to",
    "start": "1188320",
    "end": "1193600"
  },
  {
    "text": "be done in the web hook right so also this can be accomplished you can you can slap A2 but again like you must",
    "start": "1193600",
    "end": "1199280"
  },
  {
    "text": "implement it in the web hook as well um this pattern is probably used by",
    "start": "1199280",
    "end": "1204600"
  },
  {
    "text": "99.9% of all the sort of like crd API Evolutions that I that I saw um adding a",
    "start": "1204600",
    "end": "1210320"
  },
  {
    "text": "new optional field I mean that's that's pretty easy to see how those you know State spaces are convertible between each other and that's sort of like",
    "start": "1210320",
    "end": "1216480"
  },
  {
    "text": "fortunately um the the majority of the cases of your API Evolution right and in fact you don't even have to bump the",
    "start": "1216480",
    "end": "1222720"
  },
  {
    "text": "version number for that so like the the most dominant pattern that I saw here is like we just add additional optional versions and we just leave the version",
    "start": "1222720",
    "end": "1228720"
  },
  {
    "text": "as is right um and um again but if you",
    "start": "1228720",
    "end": "1233760"
  },
  {
    "text": "do um add a new version uh remember you must add the same optional field in all",
    "start": "1233760",
    "end": "1239640"
  },
  {
    "text": "previous versions as well such that they become convertible that's might be something that some some serd API",
    "start": "1239640",
    "end": "1245200"
  },
  {
    "text": "developers may forget so like when you add a new field to V2 that is optional be sure to add it in V1 as",
    "start": "1245200",
    "end": "1252280"
  },
  {
    "text": "well uh one way to hack around this is to sort of like do an annotation in V1",
    "start": "1252280",
    "end": "1257360"
  },
  {
    "text": "uh that represents the new field in V2 but that's actually disc discouraged I mean annotations are not validated um",
    "start": "1257360",
    "end": "1263720"
  },
  {
    "text": "you know this could be maybe fixed via admission but you know uh there could be like pre-existing annotations but there",
    "start": "1263720",
    "end": "1269480"
  },
  {
    "text": "is like there is risks like cve risks and other dragons lying and obviously this stuff cannot be migrated through",
    "start": "1269480",
    "end": "1275600"
  },
  {
    "text": "Fields um in the same version right so like that's that's actually an anti- pattern yeah so we want to show some",
    "start": "1275600",
    "end": "1282240"
  },
  {
    "text": "patterns it's not complete um but it show you the the mental model so everything which comes now just um",
    "start": "1282240",
    "end": "1288600"
  },
  {
    "text": "listen and um try to consume or learn something from it um I don't go into",
    "start": "1288600",
    "end": "1293880"
  },
  {
    "text": "every detail here but it gives you the flavor of of the the thoughts the mental model you have to have so required",
    "start": "1293880",
    "end": "1299400"
  },
  {
    "text": "fields in V2 I want to require a new field in V1 yeah I do the same thing is",
    "start": "1299400",
    "end": "1305480"
  },
  {
    "text": "this a good change both sides require that field obvious obviously it's not right um You Break two things here you",
    "start": "1305480",
    "end": "1312880"
  },
  {
    "text": "create or you break the creation of old manifests somebody might have a V1 op",
    "start": "1312880",
    "end": "1318600"
  },
  {
    "text": "object somewhere in giops uh and applies it to a cluster this is suddenly broken right not a good thing but also on on",
    "start": "1318600",
    "end": "1326000"
  },
  {
    "text": "updates there might be objects in LD which have V1 but they they lack this",
    "start": "1326000",
    "end": "1331880"
  },
  {
    "text": "field and you cannot update them anymore and you heard reting as an example",
    "start": "1331880",
    "end": "1337760"
  },
  {
    "text": "before this doesn't apply to required by default um but you can build reting",
    "start": "1337760",
    "end": "1342919"
  },
  {
    "text": "required validation in a web hook for example in ad Mission um then at least",
    "start": "1342919",
    "end": "1348200"
  },
  {
    "text": "you fix updates right you can have old objects they don't have this field but you can still update and progress",
    "start": "1348200",
    "end": "1353520"
  },
  {
    "text": "basically you your users won't get get stuck but you will not allow creation",
    "start": "1353520",
    "end": "1358600"
  },
  {
    "text": "but still also not good working creation so you can have something like that it's asymmetric right you you have the",
    "start": "1358600",
    "end": "1365000"
  },
  {
    "text": "required in V2 in V1 it's still optional it's defaulted so you have this this",
    "start": "1365000",
    "end": "1370799"
  },
  {
    "text": "world where both sides are not the same so you have different requirements for for v2 and this happened in in Cube",
    "start": "1370799",
    "end": "1376720"
  },
  {
    "text": "itself we have resources where we use such a pattern and reting it's important so",
    "start": "1376720",
    "end": "1383159"
  },
  {
    "text": "very briefly um everything simple like the first case here is automatically",
    "start": "1383159",
    "end": "1388520"
  },
  {
    "text": "reged um there are reged cell rules so you can write something which references old self and you can compare check",
    "start": "1388520",
    "end": "1395480"
  },
  {
    "text": "whether it's for um it's valid before the update but it still applies to create and since 130 you can express",
    "start": "1395480",
    "end": "1401880"
  },
  {
    "text": "that in cell before you couldn't and if this doesn't help admission is always there to the rescue of course so reting",
    "start": "1401880",
    "end": "1409000"
  },
  {
    "text": "keep it in mind very important and the last thing um this was mentioned in the earlier talk as well so you want to",
    "start": "1409000",
    "end": "1415600"
  },
  {
    "text": "upgrade from single to plural so field to Fields 42 it's easy it's just the",
    "start": "1415600",
    "end": "1421480"
  },
  {
    "text": "first element um that's trivial if that's a second element so 42 and 13 you put it into the list in V2 and in V1 you",
    "start": "1421480",
    "end": "1429679"
  },
  {
    "text": "put it I mean the first one as field the second as 13 is this a good um solution",
    "start": "1429679",
    "end": "1435320"
  },
  {
    "text": "for that and if a field is removed so the field is",
    "start": "1435320",
    "end": "1442120"
  },
  {
    "text": "wiped because maybe there's a patch removing the field of 42 and you have different ways to now react right what",
    "start": "1442120",
    "end": "1448960"
  },
  {
    "text": "is the semantics of that you keep the field the 13 or maybe you move up to 13 to the singular field maybe you wipe",
    "start": "1448960",
    "end": "1456559"
  },
  {
    "text": "everything and I don't expect an answer but if you play that through um you will get a lot of edge cases and you have to",
    "start": "1456559",
    "end": "1463480"
  },
  {
    "text": "think about old clients doing that maybe an old client doesn't know about the fields it just drops it but it Chang es",
    "start": "1463480",
    "end": "1468679"
  },
  {
    "text": "the singular field and the proposed solution here is that one it repeats it",
    "start": "1468679",
    "end": "1474360"
  },
  {
    "text": "repeats the 30 the 42 inside of the slice and keeps it in the singular as well because then you can distinguish",
    "start": "1474360",
    "end": "1481240"
  },
  {
    "text": "between old clients and patches so it makes it easier to to solve all the edge cases no details here um there's a",
    "start": "1481240",
    "end": "1488120"
  },
  {
    "text": "document from from s architecture which plays through this example many edge cases um It's Complicated avoid it if",
    "start": "1488120",
    "end": "1494760"
  },
  {
    "text": "you can if you can't avoid that at least this this um example is is is known so",
    "start": "1494760",
    "end": "1500200"
  },
  {
    "text": "we know how to solve that read the documents there many details okay so if nothing helps we have",
    "start": "1500200",
    "end": "1506480"
  },
  {
    "text": "a yellow pattern for you so that's kind of cool um but it's not really cool so anything you can say kubernetes you have",
    "start": "1506480",
    "end": "1514080"
  },
  {
    "text": "this qualifier ex kubernetes preserve unknown fields which you know yes I see I I know I know I know the Insiders",
    "start": "1514080",
    "end": "1519799"
  },
  {
    "text": "don't like that I don't like it either it's actually discouraged it's everything is on your own I mean you have the full freedom of the whole whole",
    "start": "1519799",
    "end": "1525679"
  },
  {
    "text": "uh schema you can store arbitrary Jason blobs in there uh but you are like on your complete own",
    "start": "1525679",
    "end": "1530919"
  },
  {
    "text": "but you are still in this tic world of communities I would never ever use this um but it's definitely some approach and",
    "start": "1530919",
    "end": "1538200"
  },
  {
    "text": "the question is is there something in between right um we have this you know world of kubernetes versioning that is",
    "start": "1538200",
    "end": "1544919"
  },
  {
    "text": "idiomatic uh on one extreme and then we have the YOLO pattern and like can we somehow combine those two and make",
    "start": "1544919",
    "end": "1551200"
  },
  {
    "text": "something in between and that's what we came up like with this major version pattern or patterns right when you think",
    "start": "1551200",
    "end": "1557200"
  },
  {
    "text": "about all those you know uh Transitions and staying tic in kubernetes versioning you you know when you think hard it's a",
    "start": "1557200",
    "end": "1563360"
  },
  {
    "text": "little bit like similar to semantic versioning right I mean in semantic versioning the minor version does not allow you to sort of like do breaking",
    "start": "1563360",
    "end": "1569120"
  },
  {
    "text": "changes so like all the patterns that you saw before like we we we qualify as sort of like minor version patterns",
    "start": "1569120",
    "end": "1575320"
  },
  {
    "text": "major version patterns would allow you to do real breaking changes and still stay in the admatic world of",
    "start": "1575320",
    "end": "1582000"
  },
  {
    "text": "kues so one solution to the problem is invent a new crd I mean the most famous",
    "start": "1582000",
    "end": "1587080"
  },
  {
    "text": "example would be like the agression from the from the Ingress crd to the Gateway crd right I mean so you just Invent A",
    "start": "1587080",
    "end": "1593080"
  },
  {
    "text": "New Kind like in this case bar right you have completely two independent state machines there is no necessity to",
    "start": "1593080",
    "end": "1599760"
  },
  {
    "text": "convert between them at all because they are completely separate crds that's kind",
    "start": "1599760",
    "end": "1604799"
  },
  {
    "text": "of cool well it's not kind of cool because you have no help from kues to convert between those things so you have",
    "start": "1604799",
    "end": "1610399"
  },
  {
    "text": "to provide some sort of scripting or some documentation or whatever but it allows you to freely move and it allows",
    "start": "1610399",
    "end": "1617159"
  },
  {
    "text": "you to have resources inside the cluster which are still as a kind Fu and a kind bar at the same time if you want to have",
    "start": "1617159",
    "end": "1624559"
  },
  {
    "text": "like something that looks like a Fu and smells like a Fu um you know but you",
    "start": "1624559",
    "end": "1630080"
  },
  {
    "text": "still want to have it a separate CD you can apply the hack and just like encode a major version inside the group so you",
    "start": "1630080",
    "end": "1637240"
  },
  {
    "text": "could have like a group V2 V1 of kind Fu which would be like a 2.1 of your crd",
    "start": "1637240",
    "end": "1642720"
  },
  {
    "text": "from the perspective of kubernetes they are like completely different crds but the user has the impression it's still",
    "start": "1642720",
    "end": "1648960"
  },
  {
    "text": "kind Fu right but you you can go crazy with the schema in there right so um again new crd pattern and when you use",
    "start": "1648960",
    "end": "1655440"
  },
  {
    "text": "this new crd pattern and you want to like add like for instance experimental fields and you don't want to pollute",
    "start": "1655440",
    "end": "1660600"
  },
  {
    "text": "your stable API like even not by introducing like a V2 alpha 1 API you could like create this funky V2 Alpha 1",
    "start": "1660600",
    "end": "1668000"
  },
  {
    "text": "crd add you experimental jazz in there like your completely crazy schema changes have a special controller that",
    "start": "1668000",
    "end": "1674200"
  },
  {
    "text": "reconciles that experimental Cod creates a stable um group V1 crd setting an",
    "start": "1674200",
    "end": "1680840"
  },
  {
    "text": "owner reference and then play around with new features without touching sort of like the stable crd API versions kind",
    "start": "1680840",
    "end": "1687440"
  },
  {
    "text": "of works another variant is what we call the embedded versions pattern remember",
    "start": "1687440",
    "end": "1693720"
  },
  {
    "text": "from the Min version patterns adding new optional Fields is kind of innocent so",
    "start": "1693720",
    "end": "1699080"
  },
  {
    "text": "why not have like version specs inside your crd you could have like an optional field that is called V1 and another",
    "start": "1699080",
    "end": "1705679"
  },
  {
    "text": "optional field that is called V2 and underneath that you can go crazy with the schema changes right um again even",
    "start": "1705679",
    "end": "1713120"
  },
  {
    "text": "if you have lots of information right I mean that's that's the trade-off that you have but you still stay sort of like",
    "start": "1713120",
    "end": "1719919"
  },
  {
    "text": "in this in this idiomatic world and you don't force users to create new resources as if you would do with the",
    "start": "1719919",
    "end": "1726080"
  },
  {
    "text": "new crd pattern right again like the trade-off is you have two levels of versioning and by the way we use this",
    "start": "1726080",
    "end": "1731480"
  },
  {
    "text": "pattern in our operator uh at to be with the atlas communes version operator because we have like so many",
    "start": "1731480",
    "end": "1736840"
  },
  {
    "text": "API changes on our back end right and we didn't even call them V1 and V2 but we made them like semantically like",
    "start": "1736840",
    "end": "1743799"
  },
  {
    "text": "haptical to the user so they have like a like a meaning a slight variant of this like",
    "start": "1743799",
    "end": "1751320"
  },
  {
    "text": "embedded pattern where you where it is required to have a web Hook is that let's say you want to have like real",
    "start": "1751320",
    "end": "1757279"
  },
  {
    "text": "schema changes inside your spec but still stay like in this tic world of kubernetes versioning so that might be a",
    "start": "1757279",
    "end": "1762840"
  },
  {
    "text": "possible hack so in the version V1 you have like an old field uh which is Qui",
    "start": "1762840",
    "end": "1768440"
  },
  {
    "text": "if it is not V2 again like you have to solve this in admission uh inside the web hook and add the whole like evolved",
    "start": "1768440",
    "end": "1776000"
  },
  {
    "text": "V2 spec as an optional body in V1 to be convertible back and forth and",
    "start": "1776000",
    "end": "1781480"
  },
  {
    "text": "conversely you can add like a new field in V2 right um that is required if not",
    "start": "1781480",
    "end": "1787000"
  },
  {
    "text": "V1 and have like the whole V1 body um you know specified as the V1 field it's",
    "start": "1787000",
    "end": "1795120"
  },
  {
    "text": "not pretty you like you you again if you have schema changes that have this loss of information that's still a viable",
    "start": "1795120",
    "end": "1800640"
  },
  {
    "text": "path but again um it makes the crd look like literally pretty like you have this whole fancy new schema inside V2 but you",
    "start": "1800640",
    "end": "1807960"
  },
  {
    "text": "do need a web H so trade-offs like we have those minor version patterns that",
    "start": "1807960",
    "end": "1813120"
  },
  {
    "text": "stay in the idiomatic world of kubernetes and you know the tradeoff there is obviously you must maintain",
    "start": "1813120",
    "end": "1819559"
  },
  {
    "text": "conversion between all versions like this loss of loss of information right is is very important and all surfed",
    "start": "1819559",
    "end": "1826399"
  },
  {
    "text": "versions must be supported no matter how how far you progress with the API this these major version patterns are not not",
    "start": "1826399",
    "end": "1832760"
  },
  {
    "text": "Cube like like you know it would probably be never ever accepted for for any Cube core resources like parts or",
    "start": "1832760",
    "end": "1838480"
  },
  {
    "text": "deployments right and as we figured updates must potentially be handled externally via scripting documentation",
    "start": "1838480",
    "end": "1843960"
  },
  {
    "text": "or whatsoever so when it comes to recommendations and we like a little bit careful here with recommendations but",
    "start": "1843960",
    "end": "1849720"
  },
  {
    "text": "it's like by intuition The Miner version patterns are a good fit if you fully maintain the API you have 100% control",
    "start": "1849720",
    "end": "1856279"
  },
  {
    "text": "over it right uh and as you figured and you know Stefan showed you the the many dragons that lie",
    "start": "1856279",
    "end": "1862919"
  },
  {
    "text": "in those Min version patterns with the example of the singular and plur Fields they are very well suited if you",
    "start": "1862919",
    "end": "1868639"
  },
  {
    "text": "have a low frequency of changes if your API is constantly changing you literally go crazy with those you know maintaining",
    "start": "1868639",
    "end": "1874880"
  },
  {
    "text": "those invariant from the Min version pattern world uh but on the other side obviously you have seamless and fully",
    "start": "1874880",
    "end": "1881279"
  },
  {
    "text": "automated updates and if that's required well then you have to stay in that world the major version patterns you know are",
    "start": "1881279",
    "end": "1887919"
  },
  {
    "text": "suitable potentially if you're if the API that you're exposing like represents or Maps a completely foreign API that",
    "start": "1887919",
    "end": "1894919"
  },
  {
    "text": "you don't have control over and at for like you're literally like a proxy and you know software as a service style",
    "start": "1894919",
    "end": "1900080"
  },
  {
    "text": "operators are you know known for that or if you think of you know my operator that is axy to sort of like a a a remote",
    "start": "1900080",
    "end": "1907159"
  },
  {
    "text": "service or like I don't know crossplane providers or something like that all these apis and background are changing constantly right so there is a high",
    "start": "1907159",
    "end": "1913760"
  },
  {
    "text": "frequency of changes then these sorts of like major version patterns may be suitable but again you have not this",
    "start": "1913760",
    "end": "1919480"
  },
  {
    "text": "nice conversion back and forth there is potentially some manual steps involved in between and again yeah as I mentioned",
    "start": "1919480",
    "end": "1925519"
  },
  {
    "text": "manual user involved stripted updates are acceptable in this case yeah so repeating very quickly is",
    "start": "1925519",
    "end": "1933399"
  },
  {
    "text": "the most important slides please don't leave The Talk and just take this with you I hope I mean this is something um",
    "start": "1933399",
    "end": "1941000"
  },
  {
    "text": "which might help people who come to this versioning thing kubernetes this is super important like it is not",
    "start": "1941000",
    "end": "1948519"
  },
  {
    "text": "a property of an object which version it is right it's not stored um in a way that the API can can tell you this is a",
    "start": "1948519",
    "end": "1955360"
  },
  {
    "text": "V1 object and this is a V2 object you can query objects in every version all objects of a of a resource second thing",
    "start": "1955360",
    "end": "1962639"
  },
  {
    "text": "is V2 V1 look like major version updates like like in sare it's not right they",
    "start": "1962639",
    "end": "1968200"
  },
  {
    "text": "are actually minor versions and you have a lot of constraints and that's a mental model so State machines created objects",
    "start": "1968200",
    "end": "1976360"
  },
  {
    "text": "many many transitions many are valid some are invalid um you have to maintain your schemas most importantly that's",
    "start": "1976360",
    "end": "1983120"
  },
  {
    "text": "your job right don't get anybody stuck remember what might be an ETD in some users clusters and keep those resources",
    "start": "1983120",
    "end": "1992039"
  },
  {
    "text": "be up updatable basically don't force them to suddenly be in some immutable State and they can basically just do one",
    "start": "1992039",
    "end": "1998320"
  },
  {
    "text": "thing delete the objects and recreate so make your users happy even if they have old data and maybe um went to pass which",
    "start": "1998320",
    "end": "2006200"
  },
  {
    "text": "was not intended and no users um and basically make use of that when when um",
    "start": "2006200",
    "end": "2012880"
  },
  {
    "text": "yeah when improving your your your schemas it's not mathematics it's it's",
    "start": "2012880",
    "end": "2018080"
  },
  {
    "text": "some tradeoff or some estimate what whether something has been used or not you can use your operators feedback of",
    "start": "2018080",
    "end": "2024600"
  },
  {
    "text": "them metrics whatever um to get this information this is helpful to to go or to navigate the API Evolution all right",
    "start": "2024600",
    "end": "2033000"
  },
  {
    "text": "that's all I wanted to have to talk about thank you",
    "start": "2033000",
    "end": "2038278"
  }
]