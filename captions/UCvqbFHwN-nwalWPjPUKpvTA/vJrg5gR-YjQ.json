[
  {
    "start": "0",
    "end": "89000"
  },
  {
    "text": "hello my name is manuel and i'm here",
    "start": "560",
    "end": "1920"
  },
  {
    "text": "with my colleague packageart",
    "start": "1920",
    "end": "3199"
  },
  {
    "text": "in this presentation we want to take a",
    "start": "3199",
    "end": "4560"
  },
  {
    "text": "look at serverless workflows and how",
    "start": "4560",
    "end": "6160"
  },
  {
    "text": "using service meshes can reduce their",
    "start": "6160",
    "end": "7759"
  },
  {
    "text": "completion times",
    "start": "7759",
    "end": "9599"
  },
  {
    "text": "let me start with the obligatory",
    "start": "9599",
    "end": "10880"
  },
  {
    "text": "introduction to serverless the idea of a",
    "start": "10880",
    "end": "13120"
  },
  {
    "text": "serverless platform is that developers",
    "start": "13120",
    "end": "14639"
  },
  {
    "text": "can solely focus on writing code",
    "start": "14639",
    "end": "16720"
  },
  {
    "text": "when the code is ready for release it",
    "start": "16720",
    "end": "18240"
  },
  {
    "text": "would be stored for the platform to use",
    "start": "18240",
    "end": "19760"
  },
  {
    "text": "it",
    "start": "19760",
    "end": "20480"
  },
  {
    "text": "and we also need to specify what",
    "start": "20480",
    "end": "21840"
  },
  {
    "text": "triggers our code this may be a",
    "start": "21840",
    "end": "23519"
  },
  {
    "text": "scheduled execution",
    "start": "23519",
    "end": "24880"
  },
  {
    "text": "a reaction to arbitrary cloud events a",
    "start": "24880",
    "end": "26960"
  },
  {
    "text": "request from our mobile apps from our",
    "start": "26960",
    "end": "28800"
  },
  {
    "text": "shops",
    "start": "28800",
    "end": "29279"
  },
  {
    "text": "or factory site just anything that could",
    "start": "29279",
    "end": "31359"
  },
  {
    "text": "trigger the code",
    "start": "31359",
    "end": "33040"
  },
  {
    "text": "the serverless platform handles those",
    "start": "33040",
    "end": "34480"
  },
  {
    "text": "triggers and manages deployments",
    "start": "34480",
    "end": "35840"
  },
  {
    "text": "autonomously",
    "start": "35840",
    "end": "37280"
  },
  {
    "text": "function as a service means that the",
    "start": "37280",
    "end": "38879"
  },
  {
    "text": "platform creates container instances",
    "start": "38879",
    "end": "40480"
  },
  {
    "text": "equipped with a runtime and an event",
    "start": "40480",
    "end": "42160"
  },
  {
    "text": "loop",
    "start": "42160",
    "end": "42559"
  },
  {
    "text": "that calls the function for every",
    "start": "42559",
    "end": "43920"
  },
  {
    "text": "trigger it processes so the developers",
    "start": "43920",
    "end": "46239"
  },
  {
    "text": "would never have to think about servers",
    "start": "46239",
    "end": "47920"
  },
  {
    "text": "again",
    "start": "47920",
    "end": "49440"
  },
  {
    "text": "but naturally developers don't just",
    "start": "49440",
    "end": "51280"
  },
  {
    "text": "write one function",
    "start": "51280",
    "end": "53039"
  },
  {
    "text": "there may be plenty of functions",
    "start": "53039",
    "end": "54399"
  },
  {
    "text": "involved in an application large and",
    "start": "54399",
    "end": "56000"
  },
  {
    "text": "small",
    "start": "56000",
    "end": "56480"
  },
  {
    "text": "to produce the desired results of course",
    "start": "56480",
    "end": "58960"
  },
  {
    "text": "over time it gets more complex so we",
    "start": "58960",
    "end": "60559"
  },
  {
    "text": "would organize the work into reusable",
    "start": "60559",
    "end": "62239"
  },
  {
    "text": "function code",
    "start": "62239",
    "end": "63680"
  },
  {
    "text": "when we put the functions in the order",
    "start": "63680",
    "end": "65198"
  },
  {
    "text": "of execution there might be some",
    "start": "65199",
    "end": "66479"
  },
  {
    "text": "branching conditional invocations",
    "start": "66479",
    "end": "68159"
  },
  {
    "text": "mapping or error handling",
    "start": "68159",
    "end": "69760"
  },
  {
    "text": "a single trigger causes a couple of",
    "start": "69760",
    "end": "71360"
  },
  {
    "text": "actions to be invoked all of which we'd",
    "start": "71360",
    "end": "73119"
  },
  {
    "text": "want the platform to manage and run for",
    "start": "73119",
    "end": "74880"
  },
  {
    "text": "us",
    "start": "74880",
    "end": "75600"
  },
  {
    "text": "and this is what we'd like to call a",
    "start": "75600",
    "end": "77200"
  },
  {
    "text": "serverless workflow",
    "start": "77200",
    "end": "79520"
  },
  {
    "text": "like any modeling approach the",
    "start": "79520",
    "end": "81119"
  },
  {
    "text": "serverless workflow captures the process",
    "start": "81119",
    "end": "82799"
  },
  {
    "text": "in a common notation so developers and",
    "start": "82799",
    "end": "84479"
  },
  {
    "text": "domain experts can agree on a formal",
    "start": "84479",
    "end": "86080"
  },
  {
    "text": "definition",
    "start": "86080",
    "end": "87520"
  },
  {
    "text": "a serverless workflow composes multiple",
    "start": "87520",
    "end": "89360"
  },
  {
    "start": "89000",
    "end": "89000"
  },
  {
    "text": "invocations",
    "start": "89360",
    "end": "90560"
  },
  {
    "text": "it specifies the order of executions and",
    "start": "90560",
    "end": "92320"
  },
  {
    "text": "a control flow and it puts all actions",
    "start": "92320",
    "end": "94400"
  },
  {
    "text": "of a workflow invocation in a shared",
    "start": "94400",
    "end": "96079"
  },
  {
    "text": "context",
    "start": "96079",
    "end": "97200"
  },
  {
    "text": "depending on the workflow language",
    "start": "97200",
    "end": "98880"
  },
  {
    "text": "invocations may be called",
    "start": "98880",
    "end": "100320"
  },
  {
    "text": "actions steps or tasks and the flow may",
    "start": "100320",
    "end": "102880"
  },
  {
    "text": "be represented as a task graph a",
    "start": "102880",
    "end": "104640"
  },
  {
    "text": "flowchart or state chart",
    "start": "104640",
    "end": "106799"
  },
  {
    "text": "data maintained in the context of a",
    "start": "106799",
    "end": "108240"
  },
  {
    "text": "workflow are called artifacts or just",
    "start": "108240",
    "end": "110399"
  },
  {
    "text": "workflow data",
    "start": "110399",
    "end": "112079"
  },
  {
    "text": "the cncf has given serverless workflows",
    "start": "112079",
    "end": "114079"
  },
  {
    "text": "a sandbox project",
    "start": "114079",
    "end": "115119"
  },
  {
    "text": "to create a community-driven workflow",
    "start": "115119",
    "end": "116880"
  },
  {
    "text": "language that meets our requirements as",
    "start": "116880",
    "end": "118719"
  },
  {
    "text": "application developers",
    "start": "118719",
    "end": "120000"
  },
  {
    "text": "and i think the foundation is the",
    "start": "120000",
    "end": "121200"
  },
  {
    "text": "perfect environment to create a",
    "start": "121200",
    "end": "122560"
  },
  {
    "text": "vendor-neutral specification",
    "start": "122560",
    "end": "124560"
  },
  {
    "text": "if you'd like to know more about the",
    "start": "124560",
    "end": "126320"
  },
  {
    "text": "work stop by the project spruce or visit",
    "start": "126320",
    "end": "128759"
  },
  {
    "text": "serverlessworkflow.io",
    "start": "128759",
    "end": "131200"
  },
  {
    "text": "the workflow language is independent",
    "start": "131200",
    "end": "132879"
  },
  {
    "text": "from the runtime implementation of the",
    "start": "132879",
    "end": "134480"
  },
  {
    "text": "platform",
    "start": "134480",
    "end": "135280"
  },
  {
    "text": "and we asked ourselves how can our",
    "start": "135280",
    "end": "137360"
  },
  {
    "text": "platform achieve fast workflow",
    "start": "137360",
    "end": "138800"
  },
  {
    "text": "completion",
    "start": "138800",
    "end": "139520"
  },
  {
    "text": "from a workflow perspective the platform",
    "start": "139520",
    "end": "141599"
  },
  {
    "text": "does two things that are on the critical",
    "start": "141599",
    "end": "143200"
  },
  {
    "text": "paths",
    "start": "143200",
    "end": "144160"
  },
  {
    "text": "we need to pass control from one action",
    "start": "144160",
    "end": "145920"
  },
  {
    "text": "to the next and we need to pass along",
    "start": "145920",
    "end": "147840"
  },
  {
    "text": "the workflow context",
    "start": "147840",
    "end": "150560"
  },
  {
    "text": "this talk is organized as follows first",
    "start": "150560",
    "end": "152959"
  },
  {
    "text": "i'm going to talk about our",
    "start": "152959",
    "end": "154000"
  },
  {
    "text": "decentralized design approach",
    "start": "154000",
    "end": "155599"
  },
  {
    "text": "and four ways to deploy on kubernetes in",
    "start": "155599",
    "end": "157760"
  },
  {
    "text": "search for the fastest and most flexible",
    "start": "157760",
    "end": "159519"
  },
  {
    "text": "communication",
    "start": "159519",
    "end": "161040"
  },
  {
    "text": "and second my colleague parachute is",
    "start": "161040",
    "end": "162560"
  },
  {
    "text": "going to discuss how we can group",
    "start": "162560",
    "end": "163920"
  },
  {
    "text": "functions to avoid most of the",
    "start": "163920",
    "end": "165599"
  },
  {
    "text": "communication",
    "start": "165599",
    "end": "166640"
  },
  {
    "text": "and still be able to balance load across",
    "start": "166640",
    "end": "168560"
  },
  {
    "text": "resources we allocate on the cluster",
    "start": "168560",
    "end": "170800"
  },
  {
    "text": "followed by design to dynamically",
    "start": "170800",
    "end": "172319"
  },
  {
    "text": "control the rebalancing",
    "start": "172319",
    "end": "175680"
  },
  {
    "start": "175000",
    "end": "175000"
  },
  {
    "text": "to run workflows we could do a central",
    "start": "176000",
    "end": "177840"
  },
  {
    "text": "workflow engine that dispatches",
    "start": "177840",
    "end": "179519"
  },
  {
    "text": "invocations to function workers",
    "start": "179519",
    "end": "181440"
  },
  {
    "text": "we want our workflows to complete fast",
    "start": "181440",
    "end": "183440"
  },
  {
    "text": "but that way we'll always have a",
    "start": "183440",
    "end": "184800"
  },
  {
    "text": "centralized component that is on the",
    "start": "184800",
    "end": "186480"
  },
  {
    "text": "communication path of all our workflow",
    "start": "186480",
    "end": "188480"
  },
  {
    "text": "executions",
    "start": "188480",
    "end": "189680"
  },
  {
    "text": "and it could easily become a bottleneck",
    "start": "189680",
    "end": "192000"
  },
  {
    "text": "that we would need to scale separately",
    "start": "192000",
    "end": "194239"
  },
  {
    "text": "so instead we're using a decentralized",
    "start": "194239",
    "end": "196000"
  },
  {
    "text": "setup this way we can hand over control",
    "start": "196000",
    "end": "198480"
  },
  {
    "text": "directly between instances",
    "start": "198480",
    "end": "200400"
  },
  {
    "text": "and we can pipeline workflow invocations",
    "start": "200400",
    "end": "202319"
  },
  {
    "text": "workflow control logic is evaluated at",
    "start": "202319",
    "end": "204319"
  },
  {
    "text": "each instance",
    "start": "204319",
    "end": "205519"
  },
  {
    "text": "let's explore four options to deploy",
    "start": "205519",
    "end": "207440"
  },
  {
    "text": "this on kubernetes",
    "start": "207440",
    "end": "210000"
  },
  {
    "start": "209000",
    "end": "209000"
  },
  {
    "text": "our first pattern are just plain",
    "start": "210000",
    "end": "211519"
  },
  {
    "text": "microservices",
    "start": "211519",
    "end": "213040"
  },
  {
    "text": "we could use kubernetes deployments and",
    "start": "213040",
    "end": "214720"
  },
  {
    "text": "expose them as services",
    "start": "214720",
    "end": "216560"
  },
  {
    "text": "to pass control from one step to another",
    "start": "216560",
    "end": "218879"
  },
  {
    "text": "we can simply use service requests",
    "start": "218879",
    "end": "221440"
  },
  {
    "text": "the event loops here have to be",
    "start": "221440",
    "end": "222959"
  },
  {
    "text": "implemented as asynchronous apis",
    "start": "222959",
    "end": "225120"
  },
  {
    "text": "to hand over control and not interlock",
    "start": "225120",
    "end": "227200"
  },
  {
    "text": "the services",
    "start": "227200",
    "end": "229040"
  },
  {
    "text": "to benchmark this we've set up a series",
    "start": "229040",
    "end": "230799"
  },
  {
    "text": "of five steps and we've traced the time",
    "start": "230799",
    "end": "232879"
  },
  {
    "text": "to handover control between every step",
    "start": "232879",
    "end": "234799"
  },
  {
    "text": "of the flow",
    "start": "234799",
    "end": "237200"
  },
  {
    "text": "the implementation sends a cloud event",
    "start": "237200",
    "end": "238879"
  },
  {
    "text": "with one kilobyte of random data",
    "start": "238879",
    "end": "241280"
  },
  {
    "text": "the chart shows a box plot for each of",
    "start": "241280",
    "end": "243120"
  },
  {
    "text": "the steps with the time measured between",
    "start": "243120",
    "end": "244879"
  },
  {
    "text": "making the service request and receiving",
    "start": "244879",
    "end": "246720"
  },
  {
    "text": "it at the next step",
    "start": "246720",
    "end": "248640"
  },
  {
    "text": "the median time for transmission across",
    "start": "248640",
    "end": "250319"
  },
  {
    "text": "all steps is only 620 microseconds",
    "start": "250319",
    "end": "254000"
  },
  {
    "start": "254000",
    "end": "254000"
  },
  {
    "text": "our next option is canadian serving",
    "start": "254000",
    "end": "255599"
  },
  {
    "text": "using sdos increase",
    "start": "255599",
    "end": "257519"
  },
  {
    "text": "every canadian service deploys with a",
    "start": "257519",
    "end": "259120"
  },
  {
    "text": "queue proxy connective serving uses a",
    "start": "259120",
    "end": "261519"
  },
  {
    "text": "gateway to accept connections",
    "start": "261519",
    "end": "263680"
  },
  {
    "text": "for a running service the request goes",
    "start": "263680",
    "end": "265360"
  },
  {
    "text": "through the gateway and q proxy before",
    "start": "265360",
    "end": "267120"
  },
  {
    "text": "it hits hour runtime",
    "start": "267120",
    "end": "268960"
  },
  {
    "text": "the gateway can redirect requests even",
    "start": "268960",
    "end": "271199"
  },
  {
    "text": "when there are no deployments",
    "start": "271199",
    "end": "272720"
  },
  {
    "text": "which means canadian can scale the",
    "start": "272720",
    "end": "274240"
  },
  {
    "text": "deployment to zero instances and spin up",
    "start": "274240",
    "end": "276160"
  },
  {
    "text": "cold ones when there is new demand",
    "start": "276160",
    "end": "278800"
  },
  {
    "text": "this also allows for traffic splitting",
    "start": "278800",
    "end": "280639"
  },
  {
    "text": "for example to migrate load between",
    "start": "280639",
    "end": "282400"
  },
  {
    "text": "revisions of a service",
    "start": "282400",
    "end": "284479"
  },
  {
    "text": "but the in direction comes with a cost",
    "start": "284479",
    "end": "286240"
  },
  {
    "text": "in latency",
    "start": "286240",
    "end": "288160"
  },
  {
    "text": "we've measured again our series of five",
    "start": "288160",
    "end": "289919"
  },
  {
    "text": "steps and the time it takes to hand over",
    "start": "289919",
    "end": "291520"
  },
  {
    "text": "one cloud event with one kilobyte of",
    "start": "291520",
    "end": "293120"
  },
  {
    "text": "data",
    "start": "293120",
    "end": "294080"
  },
  {
    "text": "the implementation is the same only now",
    "start": "294080",
    "end": "295840"
  },
  {
    "text": "we're using k native services",
    "start": "295840",
    "end": "297280"
  },
  {
    "text": "that have already running instances and",
    "start": "297280",
    "end": "298960"
  },
  {
    "text": "no code starts",
    "start": "298960",
    "end": "300479"
  },
  {
    "text": "in this case half of the deliveries take",
    "start": "300479",
    "end": "302479"
  },
  {
    "text": "about 2 milliseconds or less",
    "start": "302479",
    "end": "304960"
  },
  {
    "text": "native serving introduces some latency",
    "start": "304960",
    "end": "307039"
  },
  {
    "text": "but we've also moved to a solution that",
    "start": "307039",
    "end": "308800"
  },
  {
    "text": "can scale to zero and that can split",
    "start": "308800",
    "end": "310800"
  },
  {
    "text": "traffic for revision management",
    "start": "310800",
    "end": "312240"
  },
  {
    "text": "basically using a service mesh to do so",
    "start": "312240",
    "end": "314960"
  },
  {
    "text": "let's take a look at this third option",
    "start": "314960",
    "end": "316880"
  },
  {
    "start": "316000",
    "end": "316000"
  },
  {
    "text": "canadian eventing has been around for",
    "start": "316880",
    "end": "318400"
  },
  {
    "text": "two years and provides composable",
    "start": "318400",
    "end": "319840"
  },
  {
    "text": "primitives to enable late binding event",
    "start": "319840",
    "end": "321680"
  },
  {
    "text": "sources and event consumers one of these",
    "start": "321680",
    "end": "324320"
  },
  {
    "text": "primitives to",
    "start": "324320",
    "end": "325199"
  },
  {
    "text": "define a message passing topology is the",
    "start": "325199",
    "end": "327199"
  },
  {
    "text": "sequence",
    "start": "327199",
    "end": "328400"
  },
  {
    "text": "it's a simple pipeline that automates",
    "start": "328400",
    "end": "329919"
  },
  {
    "text": "the creation of channels and",
    "start": "329919",
    "end": "331039"
  },
  {
    "text": "subscriptions",
    "start": "331039",
    "end": "332160"
  },
  {
    "text": "when we trigger a sequence each stage",
    "start": "332160",
    "end": "334400"
  },
  {
    "text": "makes synchronous calls to the",
    "start": "334400",
    "end": "335680"
  },
  {
    "text": "destinations",
    "start": "335680",
    "end": "336960"
  },
  {
    "text": "and the result is used for the next",
    "start": "336960",
    "end": "338479"
  },
  {
    "text": "invocation this makes it pretty easy for",
    "start": "338479",
    "end": "341120"
  },
  {
    "text": "developers to use",
    "start": "341120",
    "end": "342720"
  },
  {
    "text": "it also provides multiple technology",
    "start": "342720",
    "end": "344400"
  },
  {
    "text": "bindings for example there's an",
    "start": "344400",
    "end": "345919"
  },
  {
    "text": "in-memory implementation",
    "start": "345919",
    "end": "347360"
  },
  {
    "text": "a nuts binding and a kafka binding",
    "start": "347360",
    "end": "348880"
  },
  {
    "text": "available for channels",
    "start": "348880",
    "end": "350639"
  },
  {
    "text": "we've used the in-memory channel",
    "start": "350639",
    "end": "352000"
  },
  {
    "text": "implementation that handles the",
    "start": "352000",
    "end": "353520"
  },
  {
    "text": "communication",
    "start": "353520",
    "end": "354400"
  },
  {
    "text": "in our scenario with a single part but",
    "start": "354400",
    "end": "357520"
  },
  {
    "text": "message passing almost always uses a",
    "start": "357520",
    "end": "359680"
  },
  {
    "text": "store and forward pattern",
    "start": "359680",
    "end": "360960"
  },
  {
    "text": "and we would expect this to add some",
    "start": "360960",
    "end": "362639"
  },
  {
    "text": "latency so let's take a look at the",
    "start": "362639",
    "end": "364160"
  },
  {
    "text": "benchmarks",
    "start": "364160",
    "end": "365280"
  },
  {
    "text": "we've measured a sequence of five stages",
    "start": "365280",
    "end": "367440"
  },
  {
    "text": "with plain kubernetes services",
    "start": "367440",
    "end": "369440"
  },
  {
    "text": "so we're using simple deployments for",
    "start": "369440",
    "end": "371120"
  },
  {
    "text": "our runtimes",
    "start": "371120",
    "end": "373360"
  },
  {
    "text": "again we're measuring only the time it",
    "start": "373360",
    "end": "374960"
  },
  {
    "text": "takes from the event leaving the service",
    "start": "374960",
    "end": "376800"
  },
  {
    "text": "until its arrival at the next service",
    "start": "376800",
    "end": "379600"
  },
  {
    "text": "and again we're using cloud events with",
    "start": "379600",
    "end": "381360"
  },
  {
    "text": "one kilobyte of data",
    "start": "381360",
    "end": "383680"
  },
  {
    "text": "interestingly we found that with the",
    "start": "383680",
    "end": "385520"
  },
  {
    "text": "in-memory channel the time between the",
    "start": "385520",
    "end": "387120"
  },
  {
    "text": "second class and the last stage in a",
    "start": "387120",
    "end": "388720"
  },
  {
    "text": "sequence",
    "start": "388720",
    "end": "389360"
  },
  {
    "text": "always has a much higher latency but",
    "start": "389360",
    "end": "391680"
  },
  {
    "text": "since we're looking at the median of all",
    "start": "391680",
    "end": "393039"
  },
  {
    "text": "deliveries here that doesn't make much",
    "start": "393039",
    "end": "394560"
  },
  {
    "text": "of a difference",
    "start": "394560",
    "end": "395680"
  },
  {
    "text": "fifty percent of all the event",
    "start": "395680",
    "end": "397039"
  },
  {
    "text": "deliveries take 1.45 milliseconds or",
    "start": "397039",
    "end": "399360"
  },
  {
    "text": "less",
    "start": "399360",
    "end": "400479"
  },
  {
    "text": "or 1.4 milliseconds if we left out the",
    "start": "400479",
    "end": "402400"
  },
  {
    "text": "last step",
    "start": "402400",
    "end": "404720"
  },
  {
    "start": "404000",
    "end": "404000"
  },
  {
    "text": "our last option combines both the",
    "start": "404720",
    "end": "406240"
  },
  {
    "text": "canadian eventing sequence and co-native",
    "start": "406240",
    "end": "408240"
  },
  {
    "text": "services",
    "start": "408240",
    "end": "409039"
  },
  {
    "text": "because it gives us the features of both",
    "start": "409039",
    "end": "410960"
  },
  {
    "text": "the decoupling and late binding of the",
    "start": "410960",
    "end": "412560"
  },
  {
    "text": "eventing sequence",
    "start": "412560",
    "end": "414080"
  },
  {
    "text": "and the ability to scale to zero and",
    "start": "414080",
    "end": "415680"
  },
  {
    "text": "migrate between revisions of a",
    "start": "415680",
    "end": "416960"
  },
  {
    "text": "connective service",
    "start": "416960",
    "end": "418240"
  },
  {
    "text": "let's look at the numbers again we're",
    "start": "418240",
    "end": "421120"
  },
  {
    "text": "measuring a sequence",
    "start": "421120",
    "end": "422000"
  },
  {
    "text": "of five stages only here we're deploying",
    "start": "422000",
    "end": "424240"
  },
  {
    "text": "canadian services",
    "start": "424240",
    "end": "426000"
  },
  {
    "text": "and again we're measuring the time it",
    "start": "426000",
    "end": "427360"
  },
  {
    "text": "takes for one kilobyte cloud event to be",
    "start": "427360",
    "end": "429039"
  },
  {
    "text": "passed from one service to the next",
    "start": "429039",
    "end": "432160"
  },
  {
    "text": "fifty percent of all the event",
    "start": "432160",
    "end": "433520"
  },
  {
    "text": "deliveries take four point five nine",
    "start": "433520",
    "end": "435199"
  },
  {
    "text": "milliseconds or less",
    "start": "435199",
    "end": "436800"
  },
  {
    "text": "or 4.7 milliseconds if we left out the",
    "start": "436800",
    "end": "440080"
  },
  {
    "text": "last step",
    "start": "440080",
    "end": "441840"
  },
  {
    "text": "now let's compare the four options and",
    "start": "441840",
    "end": "443680"
  },
  {
    "start": "442000",
    "end": "442000"
  },
  {
    "text": "let's also take a look what happens when",
    "start": "443680",
    "end": "445120"
  },
  {
    "text": "we transfer larger events",
    "start": "445120",
    "end": "447120"
  },
  {
    "text": "the combination of eventing and serving",
    "start": "447120",
    "end": "449120"
  },
  {
    "text": "at a median of four and a half",
    "start": "449120",
    "end": "450479"
  },
  {
    "text": "milliseconds for a kilobyte of data",
    "start": "450479",
    "end": "452479"
  },
  {
    "text": "but for two megabytes 50 of the",
    "start": "452479",
    "end": "454240"
  },
  {
    "text": "deliveries take almost 90 milliseconds",
    "start": "454240",
    "end": "456240"
  },
  {
    "text": "or less",
    "start": "456240",
    "end": "457680"
  },
  {
    "text": "the eventing sequence alone invoking",
    "start": "457680",
    "end": "459520"
  },
  {
    "text": "basic services requires 60 milliseconds",
    "start": "459520",
    "end": "461759"
  },
  {
    "text": "to pass on 2 megabytes of event data",
    "start": "461759",
    "end": "464960"
  },
  {
    "text": "canadian serving without eventing",
    "start": "464960",
    "end": "466560"
  },
  {
    "text": "channels delivers the event from one",
    "start": "466560",
    "end": "468560"
  },
  {
    "text": "instance to the next with a median of 54",
    "start": "468560",
    "end": "470800"
  },
  {
    "text": "milliseconds",
    "start": "470800",
    "end": "472080"
  },
  {
    "text": "and of course basic services achieve the",
    "start": "472080",
    "end": "474160"
  },
  {
    "text": "best figure here",
    "start": "474160",
    "end": "475120"
  },
  {
    "text": "with a median overhead of 40",
    "start": "475120",
    "end": "476479"
  },
  {
    "text": "milliseconds to pass on 2 megabyte to",
    "start": "476479",
    "end": "478560"
  },
  {
    "text": "the next service",
    "start": "478560",
    "end": "480639"
  },
  {
    "text": "when we look at even larger data sizes",
    "start": "480639",
    "end": "482800"
  },
  {
    "text": "we'll find that the linear trends",
    "start": "482800",
    "end": "484080"
  },
  {
    "text": "continue",
    "start": "484080",
    "end": "485120"
  },
  {
    "text": "we can see that the absolute overhead of",
    "start": "485120",
    "end": "486879"
  },
  {
    "text": "sequences increases with larger data",
    "start": "486879",
    "end": "488960"
  },
  {
    "text": "sizes",
    "start": "488960",
    "end": "490240"
  },
  {
    "text": "which would be due to the store and",
    "start": "490240",
    "end": "491520"
  },
  {
    "text": "forward communication pattern when",
    "start": "491520",
    "end": "492879"
  },
  {
    "text": "brokering messages",
    "start": "492879",
    "end": "495919"
  },
  {
    "start": "496000",
    "end": "496000"
  },
  {
    "text": "to summarize this part we can state that",
    "start": "496479",
    "end": "499120"
  },
  {
    "text": "every additional indirection adds",
    "start": "499120",
    "end": "500560"
  },
  {
    "text": "latency whether it's a proxy or message",
    "start": "500560",
    "end": "502560"
  },
  {
    "text": "broker",
    "start": "502560",
    "end": "503840"
  },
  {
    "text": "proxying http transactions is faster",
    "start": "503840",
    "end": "506639"
  },
  {
    "text": "than using a store and forward pattern",
    "start": "506639",
    "end": "508560"
  },
  {
    "text": "which is especially noticeable with",
    "start": "508560",
    "end": "510319"
  },
  {
    "text": "large data",
    "start": "510319",
    "end": "512080"
  },
  {
    "text": "when we want to use communication",
    "start": "512080",
    "end": "513599"
  },
  {
    "text": "features like complex routing",
    "start": "513599",
    "end": "515200"
  },
  {
    "text": "or message queues it's always better to",
    "start": "515200",
    "end": "517279"
  },
  {
    "text": "separate control from data",
    "start": "517279",
    "end": "520000"
  },
  {
    "text": "and we've also got a feeling now how",
    "start": "520000",
    "end": "521680"
  },
  {
    "text": "much latency each of the solution causes",
    "start": "521680",
    "end": "524640"
  },
  {
    "text": "microlig parachute will now present how",
    "start": "524640",
    "end": "526640"
  },
  {
    "text": "we can avoid transferring data",
    "start": "526640",
    "end": "528399"
  },
  {
    "text": "completely by grouping functions",
    "start": "528399",
    "end": "530320"
  },
  {
    "text": "while still being able to balance the",
    "start": "530320",
    "end": "532000"
  },
  {
    "text": "load across allocated resources",
    "start": "532000",
    "end": "535600"
  },
  {
    "start": "535000",
    "end": "535000"
  },
  {
    "text": "thank you manuel so till now we have",
    "start": "535600",
    "end": "537920"
  },
  {
    "text": "looked at communication mechanisms that",
    "start": "537920",
    "end": "539920"
  },
  {
    "text": "can be",
    "start": "539920",
    "end": "540399"
  },
  {
    "text": "used to communicate between functions of",
    "start": "540399",
    "end": "542560"
  },
  {
    "text": "a workflow",
    "start": "542560",
    "end": "543680"
  },
  {
    "text": "we looked at how the overheads of these",
    "start": "543680",
    "end": "545760"
  },
  {
    "text": "mechanisms increase",
    "start": "545760",
    "end": "547440"
  },
  {
    "text": "as we try to transfer more data between",
    "start": "547440",
    "end": "549519"
  },
  {
    "text": "the functions",
    "start": "549519",
    "end": "550560"
  },
  {
    "text": "and we also measured that calling the",
    "start": "550560",
    "end": "552399"
  },
  {
    "text": "function directly with the data",
    "start": "552399",
    "end": "554800"
  },
  {
    "text": "versus a store and forward approach is",
    "start": "554800",
    "end": "556720"
  },
  {
    "text": "actually better from a latency",
    "start": "556720",
    "end": "558399"
  },
  {
    "text": "perspective",
    "start": "558399",
    "end": "559760"
  },
  {
    "text": "eventually we are trying to look for",
    "start": "559760",
    "end": "561519"
  },
  {
    "text": "ways to reduce the overall completion",
    "start": "561519",
    "end": "563680"
  },
  {
    "text": "time of a workflow",
    "start": "563680",
    "end": "565600"
  },
  {
    "text": "and another factor that affects the",
    "start": "565600",
    "end": "567519"
  },
  {
    "text": "completion time of a workflow is",
    "start": "567519",
    "end": "569360"
  },
  {
    "text": "how you package the functions of a",
    "start": "569360",
    "end": "571200"
  },
  {
    "start": "570000",
    "end": "570000"
  },
  {
    "text": "workflow together",
    "start": "571200",
    "end": "573440"
  },
  {
    "text": "essentially how you group the functions",
    "start": "573440",
    "end": "575120"
  },
  {
    "text": "together in all the previous approaches",
    "start": "575120",
    "end": "577680"
  },
  {
    "text": "which manual presented there was an",
    "start": "577680",
    "end": "579440"
  },
  {
    "text": "implicit assumption that all the",
    "start": "579440",
    "end": "582320"
  },
  {
    "text": "functions were running in different",
    "start": "582320",
    "end": "583839"
  },
  {
    "text": "containers or parts and that are not",
    "start": "583839",
    "end": "585760"
  },
  {
    "text": "explicitly sharing resources",
    "start": "585760",
    "end": "588720"
  },
  {
    "text": "now this choice can affect the workflow",
    "start": "588720",
    "end": "590720"
  },
  {
    "text": "completion time",
    "start": "590720",
    "end": "591920"
  },
  {
    "text": "particularly uh when there is",
    "start": "591920",
    "end": "594000"
  },
  {
    "text": "significant data that needs to be",
    "start": "594000",
    "end": "595760"
  },
  {
    "text": "transferred between",
    "start": "595760",
    "end": "597120"
  },
  {
    "text": "f1 and f2 and in this case either",
    "start": "597120",
    "end": "600240"
  },
  {
    "text": "f1 directly calls a remote instances f2",
    "start": "600240",
    "end": "603200"
  },
  {
    "text": "with the data",
    "start": "603200",
    "end": "604560"
  },
  {
    "text": "or it calls it by reference by first",
    "start": "604560",
    "end": "606720"
  },
  {
    "text": "writing the data locally and then",
    "start": "606720",
    "end": "608480"
  },
  {
    "text": "sending a reference and then",
    "start": "608480",
    "end": "609760"
  },
  {
    "text": "f2 pulls it or it could write to a",
    "start": "609760",
    "end": "612000"
  },
  {
    "text": "global data store and then f2 pulls from",
    "start": "612000",
    "end": "614320"
  },
  {
    "text": "there",
    "start": "614320",
    "end": "615839"
  },
  {
    "text": "and we have measured the workflow",
    "start": "615839",
    "end": "617200"
  },
  {
    "text": "completion time of this approach in an",
    "start": "617200",
    "end": "619279"
  },
  {
    "text": "experiment",
    "start": "619279",
    "end": "620560"
  },
  {
    "text": "as we increase the size of data that",
    "start": "620560",
    "end": "622640"
  },
  {
    "text": "needs to be transferred between the",
    "start": "622640",
    "end": "624160"
  },
  {
    "text": "function",
    "start": "624160",
    "end": "625200"
  },
  {
    "text": "and the legend here the file ref means",
    "start": "625200",
    "end": "627600"
  },
  {
    "text": "that we are passing data by reference",
    "start": "627600",
    "end": "629360"
  },
  {
    "text": "and then pulling it",
    "start": "629360",
    "end": "630720"
  },
  {
    "text": "and data call means that we're calling",
    "start": "630720",
    "end": "632560"
  },
  {
    "text": "the functions directly with the actual",
    "start": "632560",
    "end": "634480"
  },
  {
    "text": "payload",
    "start": "634480",
    "end": "635040"
  },
  {
    "text": "of the data now what is interesting here",
    "start": "635040",
    "end": "639279"
  },
  {
    "text": "in in this approach uh in this graph",
    "start": "639279",
    "end": "642000"
  },
  {
    "text": "rather",
    "start": "642000",
    "end": "642720"
  },
  {
    "text": "is that what happens when you compare",
    "start": "642720",
    "end": "644959"
  },
  {
    "text": "this approach with an",
    "start": "644959",
    "end": "646240"
  },
  {
    "text": "alternate one where both f1 and f2",
    "start": "646240",
    "end": "650000"
  },
  {
    "text": "are residing within the same container",
    "start": "650000",
    "end": "652399"
  },
  {
    "text": "or a part that is explicitly sharing",
    "start": "652399",
    "end": "654480"
  },
  {
    "text": "resources",
    "start": "654480",
    "end": "656320"
  },
  {
    "text": "now here f1 either directly sends data",
    "start": "656320",
    "end": "659519"
  },
  {
    "text": "to f2",
    "start": "659519",
    "end": "660399"
  },
  {
    "text": "or via a reference but to a local",
    "start": "660399",
    "end": "663120"
  },
  {
    "text": "instance",
    "start": "663120",
    "end": "663760"
  },
  {
    "text": "of f2 and here you can see you can",
    "start": "663760",
    "end": "666880"
  },
  {
    "text": "clearly see that there is a difference",
    "start": "666880",
    "end": "668959"
  },
  {
    "text": "between both these approaches and",
    "start": "668959",
    "end": "671839"
  },
  {
    "text": "keeping the data local is performing",
    "start": "671839",
    "end": "674320"
  },
  {
    "text": "better",
    "start": "674320",
    "end": "675440"
  },
  {
    "text": "now this is not very surprising because",
    "start": "675440",
    "end": "678480"
  },
  {
    "text": "there's a lot of research that indicates",
    "start": "678480",
    "end": "680480"
  },
  {
    "text": "that we should try to",
    "start": "680480",
    "end": "681760"
  },
  {
    "text": "put compute and data together to speed",
    "start": "681760",
    "end": "684480"
  },
  {
    "text": "up",
    "start": "684480",
    "end": "685680"
  },
  {
    "text": "so what i want to indicate here at a",
    "start": "685680",
    "end": "687680"
  },
  {
    "text": "high level is that",
    "start": "687680",
    "end": "689519"
  },
  {
    "text": "there are certainly benefits to be",
    "start": "689519",
    "end": "691519"
  },
  {
    "text": "gained if we were to simply relax the",
    "start": "691519",
    "end": "694079"
  },
  {
    "text": "assumption",
    "start": "694079",
    "end": "695200"
  },
  {
    "text": "that all functions need to reside in",
    "start": "695200",
    "end": "697440"
  },
  {
    "text": "different containers but instead",
    "start": "697440",
    "end": "699440"
  },
  {
    "text": "package multiple functions of a workflow",
    "start": "699440",
    "end": "701839"
  },
  {
    "text": "together inside a single container",
    "start": "701839",
    "end": "704720"
  },
  {
    "text": "and potentially we can package all the",
    "start": "704720",
    "end": "706640"
  },
  {
    "text": "functions of a workflow",
    "start": "706640",
    "end": "708000"
  },
  {
    "text": "inside a single container to speed up",
    "start": "708000",
    "end": "710079"
  },
  {
    "text": "the overall workflow execution time",
    "start": "710079",
    "end": "714000"
  },
  {
    "text": "and this strategy can work well as long",
    "start": "714000",
    "end": "716240"
  },
  {
    "text": "as the container",
    "start": "716240",
    "end": "718079"
  },
  {
    "text": "has enough resources to handle all the",
    "start": "718079",
    "end": "720639"
  },
  {
    "text": "incoming",
    "start": "720639",
    "end": "721360"
  },
  {
    "text": "workflow requests but now you're also",
    "start": "721360",
    "end": "725279"
  },
  {
    "text": "dealing with",
    "start": "725279",
    "end": "725920"
  },
  {
    "text": "a larger unit of deployment which is a",
    "start": "725920",
    "end": "728079"
  },
  {
    "text": "workflow with multi",
    "start": "728079",
    "end": "729279"
  },
  {
    "text": "multiple functions that need to be",
    "start": "729279",
    "end": "730880"
  },
  {
    "text": "scheduled together",
    "start": "730880",
    "end": "732560"
  },
  {
    "text": "and balancing load in this strategy can",
    "start": "732560",
    "end": "734880"
  },
  {
    "text": "become tricky",
    "start": "734880",
    "end": "736560"
  },
  {
    "text": "consider a situation where you have",
    "start": "736560",
    "end": "738560"
  },
  {
    "start": "737000",
    "end": "737000"
  },
  {
    "text": "multiple replicas of the workflow",
    "start": "738560",
    "end": "740480"
  },
  {
    "text": "available",
    "start": "740480",
    "end": "741600"
  },
  {
    "text": "and now there is a request going through",
    "start": "741600",
    "end": "743200"
  },
  {
    "text": "the top container which causes one of",
    "start": "743200",
    "end": "745200"
  },
  {
    "text": "the downstream functions",
    "start": "745200",
    "end": "746480"
  },
  {
    "text": "f2 to start doing some heavy work",
    "start": "746480",
    "end": "749839"
  },
  {
    "text": "the top container may continue to",
    "start": "749839",
    "end": "751600"
  },
  {
    "text": "request more",
    "start": "751600",
    "end": "753440"
  },
  {
    "text": "sorry continue to accept more requests",
    "start": "753440",
    "end": "756720"
  },
  {
    "text": "as the initial part of the workflow may",
    "start": "756720",
    "end": "759360"
  },
  {
    "text": "not be",
    "start": "759360",
    "end": "760079"
  },
  {
    "text": "aware of congestions happening",
    "start": "760079",
    "end": "761920"
  },
  {
    "text": "downstream in the downstream functions",
    "start": "761920",
    "end": "764000"
  },
  {
    "text": "particularly if the workflow structure",
    "start": "764000",
    "end": "765760"
  },
  {
    "text": "is more complex than that is shown here",
    "start": "765760",
    "end": "769680"
  },
  {
    "text": "but now that we have admitted this",
    "start": "769680",
    "end": "771360"
  },
  {
    "text": "request in this container our choice of",
    "start": "771360",
    "end": "773680"
  },
  {
    "text": "staying local",
    "start": "773680",
    "end": "775200"
  },
  {
    "text": "would continue to push the request down",
    "start": "775200",
    "end": "777360"
  },
  {
    "text": "locally potentially degrading the",
    "start": "777360",
    "end": "779920"
  },
  {
    "text": "completion time of all the requests",
    "start": "779920",
    "end": "782079"
  },
  {
    "text": "going through this container",
    "start": "782079",
    "end": "785040"
  },
  {
    "text": "now even though we have admitted a",
    "start": "785040",
    "end": "786959"
  },
  {
    "text": "request",
    "start": "786959",
    "end": "788240"
  },
  {
    "text": "we can potentially redirect or rebalance",
    "start": "788240",
    "end": "791200"
  },
  {
    "text": "this request internally from the middle",
    "start": "791200",
    "end": "793360"
  },
  {
    "text": "of a workflow",
    "start": "793360",
    "end": "794560"
  },
  {
    "text": "to a remote instance of f2 if that is",
    "start": "794560",
    "end": "797200"
  },
  {
    "text": "not loaded",
    "start": "797200",
    "end": "798639"
  },
  {
    "text": "and that way we can still benefit from",
    "start": "798639",
    "end": "800720"
  },
  {
    "text": "additional resources if they are",
    "start": "800720",
    "end": "802160"
  },
  {
    "text": "available",
    "start": "802160",
    "end": "802800"
  },
  {
    "text": "elsewhere or we can even create",
    "start": "802800",
    "end": "804720"
  },
  {
    "text": "resources on the fly",
    "start": "804720",
    "end": "807440"
  },
  {
    "text": "what i'm trying to indicate here is that",
    "start": "807440",
    "end": "809760"
  },
  {
    "text": "when we group functions together and",
    "start": "809760",
    "end": "811760"
  },
  {
    "text": "then",
    "start": "811760",
    "end": "812160"
  },
  {
    "text": "treat that as a deployment unit one may",
    "start": "812160",
    "end": "815120"
  },
  {
    "text": "have to dynamically decide",
    "start": "815120",
    "end": "816880"
  },
  {
    "text": "between keeping the requests",
    "start": "816880",
    "end": "820320"
  },
  {
    "text": "local versus sending some requests down",
    "start": "820320",
    "end": "823199"
  },
  {
    "text": "remotely",
    "start": "823199",
    "end": "824320"
  },
  {
    "text": "to other instances of downstream",
    "start": "824320",
    "end": "826639"
  },
  {
    "text": "functions in other containers",
    "start": "826639",
    "end": "829040"
  },
  {
    "text": "and this situation can change",
    "start": "829040",
    "end": "830639"
  },
  {
    "text": "dynamically",
    "start": "830639",
    "end": "832240"
  },
  {
    "text": "depending on the load and this makes the",
    "start": "832240",
    "end": "834720"
  },
  {
    "text": "load balancing more tricky",
    "start": "834720",
    "end": "837360"
  },
  {
    "start": "837000",
    "end": "837000"
  },
  {
    "text": "and what happens if you now also have to",
    "start": "837360",
    "end": "840240"
  },
  {
    "text": "transfer data between functions",
    "start": "840240",
    "end": "842560"
  },
  {
    "text": "while rebalancing a request to a remote",
    "start": "842560",
    "end": "844800"
  },
  {
    "text": "container",
    "start": "844800",
    "end": "846079"
  },
  {
    "text": "here this request will now have to take",
    "start": "846079",
    "end": "848079"
  },
  {
    "text": "the hit of pulling the data first in",
    "start": "848079",
    "end": "850480"
  },
  {
    "text": "f2 and then processing it and which may",
    "start": "850480",
    "end": "853199"
  },
  {
    "text": "also affect the completion time",
    "start": "853199",
    "end": "855920"
  },
  {
    "text": "of this rebalanced request so we did an",
    "start": "855920",
    "end": "859120"
  },
  {
    "text": "experiment to try that out",
    "start": "859120",
    "end": "861120"
  },
  {
    "text": "and what we had was that there were",
    "start": "861120",
    "end": "862800"
  },
  {
    "text": "already two requests that are concrete",
    "start": "862800",
    "end": "865040"
  },
  {
    "text": "concurrently being processed by the top",
    "start": "865040",
    "end": "866959"
  },
  {
    "text": "container and now a third request",
    "start": "866959",
    "end": "869120"
  },
  {
    "text": "arrives at the same",
    "start": "869120",
    "end": "870000"
  },
  {
    "text": "container now we make a choice between",
    "start": "870000",
    "end": "872560"
  },
  {
    "text": "pushing this request down locally within",
    "start": "872560",
    "end": "874560"
  },
  {
    "text": "the same container",
    "start": "874560",
    "end": "875600"
  },
  {
    "text": "or calling a remote instance of f2",
    "start": "875600",
    "end": "879040"
  },
  {
    "text": "so that we rebalance this request while",
    "start": "879040",
    "end": "881120"
  },
  {
    "text": "pulling this data",
    "start": "881120",
    "end": "883360"
  },
  {
    "text": "and then we measure the completion time",
    "start": "883360",
    "end": "885279"
  },
  {
    "text": "of this third request",
    "start": "885279",
    "end": "887360"
  },
  {
    "text": "and what we find interestingly here is",
    "start": "887360",
    "end": "890000"
  },
  {
    "text": "that the situation is completely",
    "start": "890000",
    "end": "891680"
  },
  {
    "text": "reversed",
    "start": "891680",
    "end": "893760"
  },
  {
    "text": "even even under load and depending on",
    "start": "893760",
    "end": "896800"
  },
  {
    "text": "your applications",
    "start": "896800",
    "end": "898800"
  },
  {
    "text": "as the size of the data is increasing",
    "start": "898800",
    "end": "901920"
  },
  {
    "text": "to be transferred between the functions",
    "start": "901920",
    "end": "904079"
  },
  {
    "text": "it might still turn out to be better",
    "start": "904079",
    "end": "906320"
  },
  {
    "text": "to send this third request remotely and",
    "start": "906320",
    "end": "909360"
  },
  {
    "text": "take the hit of pulling the data",
    "start": "909360",
    "end": "911600"
  },
  {
    "text": "than to push this request down in the",
    "start": "911600",
    "end": "913920"
  },
  {
    "text": "local instance",
    "start": "913920",
    "end": "915760"
  },
  {
    "text": "of the container so overall what i want",
    "start": "915760",
    "end": "919680"
  },
  {
    "text": "to say is that co-locating multiple",
    "start": "919680",
    "end": "921839"
  },
  {
    "text": "functions of a workflow",
    "start": "921839",
    "end": "923440"
  },
  {
    "text": "inside a single end container can",
    "start": "923440",
    "end": "925279"
  },
  {
    "text": "actually accelerate workflow completion",
    "start": "925279",
    "end": "927760"
  },
  {
    "start": "926000",
    "end": "926000"
  },
  {
    "text": "time",
    "start": "927760",
    "end": "928399"
  },
  {
    "text": "and we should certainly take advantage",
    "start": "928399",
    "end": "930320"
  },
  {
    "text": "of that",
    "start": "930320",
    "end": "931600"
  },
  {
    "text": "but treating workflow as a unit of",
    "start": "931600",
    "end": "933519"
  },
  {
    "text": "deployment particularly under load",
    "start": "933519",
    "end": "935600"
  },
  {
    "text": "will also require internally rebalancing",
    "start": "935600",
    "end": "938720"
  },
  {
    "text": "workflow executions",
    "start": "938720",
    "end": "940320"
  },
  {
    "text": "from somewhere in the middle of a",
    "start": "940320",
    "end": "941680"
  },
  {
    "text": "workflow which you may not know",
    "start": "941680",
    "end": "943360"
  },
  {
    "text": "beforehand",
    "start": "943360",
    "end": "944399"
  },
  {
    "text": "where that needs to happen or this",
    "start": "944399",
    "end": "946399"
  },
  {
    "text": "situation can also change",
    "start": "946399",
    "end": "948000"
  },
  {
    "text": "dynamically now the communication",
    "start": "948000",
    "end": "951040"
  },
  {
    "text": "mechanism",
    "start": "951040",
    "end": "951920"
  },
  {
    "text": "that you as a serverless platform",
    "start": "951920",
    "end": "954160"
  },
  {
    "text": "developer choose",
    "start": "954160",
    "end": "955440"
  },
  {
    "text": "for communicating between functions",
    "start": "955440",
    "end": "957759"
  },
  {
    "text": "should be flexible enough to support",
    "start": "957759",
    "end": "959600"
  },
  {
    "text": "these use cases",
    "start": "959600",
    "end": "961279"
  },
  {
    "text": "the mechanism should ideally provide",
    "start": "961279",
    "end": "963519"
  },
  {
    "text": "dynamically",
    "start": "963519",
    "end": "964720"
  },
  {
    "text": "reconfigurable routing at runtime",
    "start": "964720",
    "end": "967199"
  },
  {
    "text": "without having",
    "start": "967199",
    "end": "968000"
  },
  {
    "text": "to modify the core logic of your",
    "start": "968000",
    "end": "969920"
  },
  {
    "text": "application",
    "start": "969920",
    "end": "971120"
  },
  {
    "text": "it should also provide the possibility",
    "start": "971120",
    "end": "973279"
  },
  {
    "text": "of fine grained observability",
    "start": "973279",
    "end": "975440"
  },
  {
    "text": "to monitor the situation and should also",
    "start": "975440",
    "end": "978079"
  },
  {
    "text": "support configurable load balancing",
    "start": "978079",
    "end": "980079"
  },
  {
    "text": "strategies",
    "start": "980079",
    "end": "981199"
  },
  {
    "text": "without your application logic having to",
    "start": "981199",
    "end": "983440"
  },
  {
    "text": "do all that",
    "start": "983440",
    "end": "985839"
  },
  {
    "text": "now fortunately we don't have to do all",
    "start": "985839",
    "end": "987920"
  },
  {
    "text": "of this from scratch",
    "start": "987920",
    "end": "989360"
  },
  {
    "text": "service meshes such as onward proxy",
    "start": "989360",
    "end": "991600"
  },
  {
    "text": "already provide",
    "start": "991600",
    "end": "992560"
  },
  {
    "text": "most of these functionalities for",
    "start": "992560",
    "end": "994839"
  },
  {
    "text": "microservices",
    "start": "994839",
    "end": "996079"
  },
  {
    "text": "and we could adapt this to our use case",
    "start": "996079",
    "end": "999759"
  },
  {
    "text": "essentially a service mesh takes on the",
    "start": "999759",
    "end": "1002399"
  },
  {
    "text": "communication",
    "start": "1002399",
    "end": "1003440"
  },
  {
    "text": "on behalf of a service and provides a",
    "start": "1003440",
    "end": "1006079"
  },
  {
    "text": "large set of tools to do that",
    "start": "1006079",
    "end": "1007759"
  },
  {
    "text": "effectively such as",
    "start": "1007759",
    "end": "1009199"
  },
  {
    "text": "retrying load balancing active health",
    "start": "1009199",
    "end": "1012000"
  },
  {
    "text": "checks between services",
    "start": "1012000",
    "end": "1013759"
  },
  {
    "text": "and all this can be configured at",
    "start": "1013759",
    "end": "1015519"
  },
  {
    "text": "runtime via a centralized control plane",
    "start": "1015519",
    "end": "1018959"
  },
  {
    "text": "so when say when service 1 is trying to",
    "start": "1018959",
    "end": "1022000"
  },
  {
    "text": "call service 2",
    "start": "1022000",
    "end": "1023440"
  },
  {
    "text": "service 1 simply hands over the request",
    "start": "1023440",
    "end": "1025520"
  },
  {
    "text": "to the local on y proxy",
    "start": "1025520",
    "end": "1027280"
  },
  {
    "text": "that is running as a sidecar the proxy",
    "start": "1027280",
    "end": "1030400"
  },
  {
    "text": "on behalf of service 1",
    "start": "1030400",
    "end": "1032400"
  },
  {
    "text": "load balances this request to one of the",
    "start": "1032400",
    "end": "1034558"
  },
  {
    "text": "replicas of service 2",
    "start": "1034559",
    "end": "1036720"
  },
  {
    "text": "while providing facilities such as",
    "start": "1036720",
    "end": "1038640"
  },
  {
    "text": "retrying and active health checks",
    "start": "1038640",
    "end": "1041678"
  },
  {
    "text": "this load balancing can also be",
    "start": "1041679",
    "end": "1043438"
  },
  {
    "text": "configured dynamically",
    "start": "1043439",
    "end": "1044880"
  },
  {
    "text": "via the control plane to say something",
    "start": "1044880",
    "end": "1046880"
  },
  {
    "text": "like that now 70 percent of the requests",
    "start": "1046880",
    "end": "1049840"
  },
  {
    "text": "to service 2 should go to this specific",
    "start": "1049840",
    "end": "1052080"
  },
  {
    "text": "replica",
    "start": "1052080",
    "end": "1052960"
  },
  {
    "text": "instead of a purely round robin manner",
    "start": "1052960",
    "end": "1055840"
  },
  {
    "text": "or we can even have more complex load",
    "start": "1055840",
    "end": "1057919"
  },
  {
    "text": "balancing policies",
    "start": "1057919",
    "end": "1059360"
  },
  {
    "text": "which all y already provides",
    "start": "1059360",
    "end": "1063120"
  },
  {
    "text": "so we feel that service meshes such as",
    "start": "1063120",
    "end": "1065919"
  },
  {
    "text": "envoy is a nice choice of communication",
    "start": "1065919",
    "end": "1068559"
  },
  {
    "text": "mechanism",
    "start": "1068559",
    "end": "1069520"
  },
  {
    "text": "that can be adapted to our use case",
    "start": "1069520",
    "end": "1072320"
  },
  {
    "text": "where there are multiple functions of a",
    "start": "1072320",
    "end": "1074240"
  },
  {
    "text": "workflow",
    "start": "1074240",
    "end": "1075120"
  },
  {
    "text": "co-located inside a single container or",
    "start": "1075120",
    "end": "1078240"
  },
  {
    "text": "a port",
    "start": "1078240",
    "end": "1079760"
  },
  {
    "text": "it would provide a dynamically",
    "start": "1079760",
    "end": "1081440"
  },
  {
    "text": "configurable and a unified communication",
    "start": "1081440",
    "end": "1083840"
  },
  {
    "text": "mechanism",
    "start": "1083840",
    "end": "1084880"
  },
  {
    "text": "for both intra-container and",
    "start": "1084880",
    "end": "1087120"
  },
  {
    "text": "intercontainer",
    "start": "1087120",
    "end": "1088160"
  },
  {
    "text": "communication so now when",
    "start": "1088160",
    "end": "1091200"
  },
  {
    "text": "f1 wants to call f2 it would simply hand",
    "start": "1091200",
    "end": "1094400"
  },
  {
    "text": "over the request to the local on-voip",
    "start": "1094400",
    "end": "1096320"
  },
  {
    "text": "proxy",
    "start": "1096320",
    "end": "1097360"
  },
  {
    "text": "which would which could be configured to",
    "start": "1097360",
    "end": "1099679"
  },
  {
    "text": "pass down",
    "start": "1099679",
    "end": "1100480"
  },
  {
    "text": "all requests to the local instance of f2",
    "start": "1100480",
    "end": "1103200"
  },
  {
    "text": "to begin with",
    "start": "1103200",
    "end": "1105039"
  },
  {
    "text": "and if now there is back pressure",
    "start": "1105039",
    "end": "1107520"
  },
  {
    "text": "exerted by the local instance of f2 say",
    "start": "1107520",
    "end": "1109919"
  },
  {
    "text": "via 503 status responses",
    "start": "1109919",
    "end": "1112559"
  },
  {
    "text": "to multiple health checks then the",
    "start": "1112559",
    "end": "1114559"
  },
  {
    "text": "control plane could intervene to",
    "start": "1114559",
    "end": "1116160"
  },
  {
    "text": "reconfigure the proxies",
    "start": "1116160",
    "end": "1118080"
  },
  {
    "text": "to now only send say 20 of requests",
    "start": "1118080",
    "end": "1121039"
  },
  {
    "text": "locally and 80 percent of requests",
    "start": "1121039",
    "end": "1123760"
  },
  {
    "text": "should go to remote instances of f2",
    "start": "1123760",
    "end": "1127520"
  },
  {
    "text": "and this situation can change again",
    "start": "1127520",
    "end": "1129440"
  },
  {
    "text": "depending on the load conditions and may",
    "start": "1129440",
    "end": "1131360"
  },
  {
    "text": "require",
    "start": "1131360",
    "end": "1132080"
  },
  {
    "text": "further reconfiguration so this way we",
    "start": "1132080",
    "end": "1135760"
  },
  {
    "text": "can",
    "start": "1135760",
    "end": "1136000"
  },
  {
    "text": "see how we can leverage the service mesh",
    "start": "1136000",
    "end": "1139039"
  },
  {
    "text": "as an enabler for accelerating",
    "start": "1139039",
    "end": "1141120"
  },
  {
    "text": "serverless workflows",
    "start": "1141120",
    "end": "1143440"
  },
  {
    "text": "by providing a unified communication",
    "start": "1143440",
    "end": "1145840"
  },
  {
    "text": "mechanism",
    "start": "1145840",
    "end": "1146960"
  },
  {
    "text": "which lets you benefit from locality",
    "start": "1146960",
    "end": "1150400"
  },
  {
    "text": "while at the same time being dynamically",
    "start": "1150400",
    "end": "1152640"
  },
  {
    "text": "reconfigurable",
    "start": "1152640",
    "end": "1153919"
  },
  {
    "text": "to support rebalancing of requests when",
    "start": "1153919",
    "end": "1156640"
  },
  {
    "text": "needed",
    "start": "1156640",
    "end": "1157919"
  },
  {
    "text": "and the benchmark experiments that i",
    "start": "1157919",
    "end": "1159760"
  },
  {
    "text": "presented that measured the workflow",
    "start": "1159760",
    "end": "1161679"
  },
  {
    "text": "completion time",
    "start": "1161679",
    "end": "1162880"
  },
  {
    "text": "without load and under load with",
    "start": "1162880",
    "end": "1165120"
  },
  {
    "text": "rebalancing",
    "start": "1165120",
    "end": "1166240"
  },
  {
    "text": "were actually conducted in this kind of",
    "start": "1166240",
    "end": "1168320"
  },
  {
    "text": "a setup with the on y proxy redirecting",
    "start": "1168320",
    "end": "1171120"
  },
  {
    "text": "invocations from f1 to f2 either locally",
    "start": "1171120",
    "end": "1174960"
  },
  {
    "text": "or remotely to other replicas of f2",
    "start": "1174960",
    "end": "1177840"
  },
  {
    "text": "running in other containers",
    "start": "1177840",
    "end": "1180960"
  },
  {
    "text": "so overall in this presentation we",
    "start": "1180960",
    "end": "1182720"
  },
  {
    "text": "explored different communication",
    "start": "1182720",
    "end": "1184240"
  },
  {
    "text": "mechanisms for function to function",
    "start": "1184240",
    "end": "1186080"
  },
  {
    "text": "communication in serverless workflows",
    "start": "1186080",
    "end": "1188080"
  },
  {
    "text": "and we measured their overheads",
    "start": "1188080",
    "end": "1190080"
  },
  {
    "text": "we also measured how co-locating",
    "start": "1190080",
    "end": "1191840"
  },
  {
    "text": "functions of a workflow can accelerate",
    "start": "1191840",
    "end": "1193679"
  },
  {
    "text": "work for completion time",
    "start": "1193679",
    "end": "1195360"
  },
  {
    "text": "we looked at the load balancing",
    "start": "1195360",
    "end": "1196799"
  },
  {
    "text": "challenges this approach creates",
    "start": "1196799",
    "end": "1198480"
  },
  {
    "text": "and the need for dynamic workflow",
    "start": "1198480",
    "end": "1200240"
  },
  {
    "text": "execution rebalancing",
    "start": "1200240",
    "end": "1202480"
  },
  {
    "text": "we also presented how a service mesh can",
    "start": "1202480",
    "end": "1204960"
  },
  {
    "text": "act as a unified enabler for this",
    "start": "1204960",
    "end": "1207039"
  },
  {
    "text": "dynamical rebalancing situation",
    "start": "1207039",
    "end": "1209280"
  },
  {
    "text": "while also being leveraged for locality",
    "start": "1209280",
    "end": "1211360"
  },
  {
    "text": "aware communication",
    "start": "1211360",
    "end": "1213280"
  },
  {
    "start": "1213000",
    "end": "1213000"
  },
  {
    "text": "and we have already instantiated some of",
    "start": "1213280",
    "end": "1215120"
  },
  {
    "text": "these ideas and concepts",
    "start": "1215120",
    "end": "1216480"
  },
  {
    "text": "in our open source serverless platform",
    "start": "1216480",
    "end": "1218559"
  },
  {
    "text": "that we are developing at nokia bell",
    "start": "1218559",
    "end": "1220640"
  },
  {
    "text": "labs",
    "start": "1220640",
    "end": "1221120"
  },
  {
    "text": "called knx micro functions which",
    "start": "1221120",
    "end": "1223360"
  },
  {
    "text": "provides workflow support as a first",
    "start": "1223360",
    "end": "1225200"
  },
  {
    "text": "class citizen",
    "start": "1225200",
    "end": "1226960"
  },
  {
    "text": "we already accelerate workflows by",
    "start": "1226960",
    "end": "1229039"
  },
  {
    "text": "co-locating all the functions of a",
    "start": "1229039",
    "end": "1230720"
  },
  {
    "text": "workflow inside a single container",
    "start": "1230720",
    "end": "1233039"
  },
  {
    "text": "and then load balancing externally",
    "start": "1233039",
    "end": "1234960"
  },
  {
    "text": "between replicas of these complete",
    "start": "1234960",
    "end": "1236960"
  },
  {
    "text": "workflow units",
    "start": "1236960",
    "end": "1238880"
  },
  {
    "text": "we also provide a k native and an istio",
    "start": "1238880",
    "end": "1241360"
  },
  {
    "text": "based implementation",
    "start": "1241360",
    "end": "1242960"
  },
  {
    "text": "where our workflows are packaged as k",
    "start": "1242960",
    "end": "1244960"
  },
  {
    "text": "native services",
    "start": "1244960",
    "end": "1246799"
  },
  {
    "text": "and currently within the container",
    "start": "1246799",
    "end": "1248400"
  },
  {
    "text": "hosting the workflow functions we",
    "start": "1248400",
    "end": "1250000"
  },
  {
    "text": "provide a custom local message bus",
    "start": "1250000",
    "end": "1252240"
  },
  {
    "text": "for communicating between functions but",
    "start": "1252240",
    "end": "1254720"
  },
  {
    "text": "we are moving towards utilizing the on",
    "start": "1254720",
    "end": "1256880"
  },
  {
    "text": "voip proxy that comes packaged with",
    "start": "1256880",
    "end": "1258720"
  },
  {
    "text": "istio",
    "start": "1258720",
    "end": "1259520"
  },
  {
    "text": "to be used for intra-container",
    "start": "1259520",
    "end": "1261360"
  },
  {
    "text": "communication as well",
    "start": "1261360",
    "end": "1263039"
  },
  {
    "text": "and then further utilizing the service",
    "start": "1263039",
    "end": "1265280"
  },
  {
    "text": "mesh in conjunction with",
    "start": "1265280",
    "end": "1266720"
  },
  {
    "text": "a control plane to provide dynamic",
    "start": "1266720",
    "end": "1269440"
  },
  {
    "text": "workflow rebalancing",
    "start": "1269440",
    "end": "1270880"
  },
  {
    "text": "with locality-aware communication so do",
    "start": "1270880",
    "end": "1274320"
  },
  {
    "start": "1274000",
    "end": "1274000"
  },
  {
    "text": "check us out at",
    "start": "1274320",
    "end": "1275440"
  },
  {
    "text": "knx dot io and our github repository",
    "start": "1275440",
    "end": "1278559"
  },
  {
    "text": "which is koenix dash",
    "start": "1278559",
    "end": "1280000"
  },
  {
    "text": "micro function slash knx where we are",
    "start": "1280000",
    "end": "1282880"
  },
  {
    "text": "actively developing",
    "start": "1282880",
    "end": "1284000"
  },
  {
    "text": "these ideas and also check out our slack",
    "start": "1284000",
    "end": "1286640"
  },
  {
    "text": "channel",
    "start": "1286640",
    "end": "1287679"
  },
  {
    "text": "and you can also find the code for all",
    "start": "1287679",
    "end": "1289679"
  },
  {
    "text": "our benchmark experiments shown in this",
    "start": "1289679",
    "end": "1291760"
  },
  {
    "text": "talk",
    "start": "1291760",
    "end": "1292480"
  },
  {
    "text": "also at our github repository koenix",
    "start": "1292480",
    "end": "1294720"
  },
  {
    "text": "dash micro functions",
    "start": "1294720",
    "end": "1296000"
  },
  {
    "text": "slash workflow mesh so with that we've",
    "start": "1296000",
    "end": "1300000"
  },
  {
    "text": "finished this presentation and we thank",
    "start": "1300000",
    "end": "1301760"
  },
  {
    "text": "you for your attention",
    "start": "1301760",
    "end": "1303120"
  },
  {
    "text": "and we are happy to take questions now",
    "start": "1303120",
    "end": "1309039"
  }
]