[
  {
    "text": "hello and welcome to inside kubernetes",
    "start": "1800",
    "end": "4319"
  },
  {
    "text": "Ingress a cubec con and Cloud native con",
    "start": "4319",
    "end": "7040"
  },
  {
    "text": "North America 2020",
    "start": "7040",
    "end": "9290"
  },
  {
    "text": "[Music]",
    "start": "9290",
    "end": "10759"
  },
  {
    "text": "presentation I am Dominic Toro principal",
    "start": "10759",
    "end": "13719"
  },
  {
    "text": "engineer at Cisco I focus on systems",
    "start": "13719",
    "end": "16880"
  },
  {
    "text": "modeling specifically conceptual and",
    "start": "16880",
    "end": "19199"
  },
  {
    "text": "formal modeling to support the",
    "start": "19199",
    "end": "21119"
  },
  {
    "text": "development and the documentation of",
    "start": "21119",
    "end": "23240"
  },
  {
    "text": "complex software",
    "start": "23240",
    "end": "24599"
  },
  {
    "text": "systems this presentation focuses on the",
    "start": "24599",
    "end": "27840"
  },
  {
    "text": "concepts behind Ingress for kubernetes",
    "start": "27840",
    "end": "30560"
  },
  {
    "text": "it does not focus on its possible",
    "start": "30560",
    "end": "32879"
  },
  {
    "text": "implementations or on its possible set",
    "start": "32879",
    "end": "35120"
  },
  {
    "text": "of",
    "start": "35120",
    "end": "37280"
  },
  {
    "text": "features kubernetes Ingress is related",
    "start": "37559",
    "end": "40440"
  },
  {
    "text": "to kubernetes services to Deep dive into",
    "start": "40440",
    "end": "43840"
  },
  {
    "text": "kubernetes Services visit inside",
    "start": "43840",
    "end": "46440"
  },
  {
    "text": "kubernetes Services a cubec con and",
    "start": "46440",
    "end": "49039"
  },
  {
    "text": "Cloud native conon North America 2019",
    "start": "49039",
    "end": "54320"
  },
  {
    "text": "presentation what problem does ingis for",
    "start": "54320",
    "end": "57000"
  },
  {
    "text": "kubernetes",
    "start": "57000",
    "end": "58559"
  },
  {
    "text": "address ing for kubernetes enables the",
    "start": "58559",
    "end": "62160"
  },
  {
    "text": "external consumption of a set of",
    "start": "62160",
    "end": "64760"
  },
  {
    "text": "kubernetes HTTP Services hosted on one",
    "start": "64760",
    "end": "68439"
  },
  {
    "text": "cluster via one HTTP",
    "start": "68439",
    "end": "73159"
  },
  {
    "text": "endpoint how does ingress for kubernetes",
    "start": "74479",
    "end": "76960"
  },
  {
    "text": "address this",
    "start": "76960",
    "end": "78320"
  },
  {
    "text": "problem to enable the external",
    "start": "78320",
    "end": "80680"
  },
  {
    "text": "consumption of a set of kubernetes HTTP",
    "start": "80680",
    "end": "83439"
  },
  {
    "text": "Services hosted on one cluster via one",
    "start": "83439",
    "end": "86119"
  },
  {
    "text": "HTTP endpoint Ingress for kubernetes",
    "start": "86119",
    "end": "89240"
  },
  {
    "text": "addresses to two different concerns",
    "start": "89240",
    "end": "91799"
  },
  {
    "text": "Network Ingress as well as kubernetes",
    "start": "91799",
    "end": "94759"
  },
  {
    "text": "Ingress Network Ingress addresses the",
    "start": "94759",
    "end": "97720"
  },
  {
    "text": "question of how to admit traffic into",
    "start": "97720",
    "end": "100640"
  },
  {
    "text": "the cluster kubernetes Ingress addresses",
    "start": "100640",
    "end": "103680"
  },
  {
    "text": "the question of how to route traffic",
    "start": "103680",
    "end": "106560"
  },
  {
    "text": "within the",
    "start": "106560",
    "end": "107960"
  },
  {
    "text": "cluster a kubernetes cluster is",
    "start": "107960",
    "end": "110399"
  },
  {
    "text": "typically defined as a set of kubernetes",
    "start": "110399",
    "end": "112799"
  },
  {
    "text": "nodes a set of physical or virtual",
    "start": "112799",
    "end": "115560"
  },
  {
    "text": "machines however this presentation is",
    "start": "115560",
    "end": "118280"
  },
  {
    "text": "not concerned with nodes so we will",
    "start": "118280",
    "end": "120479"
  },
  {
    "text": "reason about a cluster as a set of parts",
    "start": "120479",
    "end": "123759"
  },
  {
    "text": "that ran run or will run on the",
    "start": "123759",
    "end": "126360"
  },
  {
    "text": "cluster's",
    "start": "126360",
    "end": "127959"
  },
  {
    "text": "nodes the first topic of this",
    "start": "127959",
    "end": "130399"
  },
  {
    "text": "presentation will discuss Network",
    "start": "130399",
    "end": "132319"
  },
  {
    "text": "Ingress the admission of",
    "start": "132319",
    "end": "135160"
  },
  {
    "text": "traffic however as kubernetes does not",
    "start": "135160",
    "end": "138000"
  },
  {
    "text": "specify how to implement Network Ingress",
    "start": "138000",
    "end": "140879"
  },
  {
    "text": "leaving the implementation up to the",
    "start": "140879",
    "end": "143120"
  },
  {
    "text": "operator of a kubernetes cluster we will",
    "start": "143120",
    "end": "145920"
  },
  {
    "text": "discuss only the what not the how the",
    "start": "145920",
    "end": "149280"
  },
  {
    "text": "second topic of this presentation we'll",
    "start": "149280",
    "end": "151519"
  },
  {
    "text": "discuss kubernetes Ingress the routing",
    "start": "151519",
    "end": "154360"
  },
  {
    "text": "of traffic we will discuss both the what",
    "start": "154360",
    "end": "157599"
  },
  {
    "text": "and the",
    "start": "157599",
    "end": "159239"
  },
  {
    "text": "how before we develop a definition of",
    "start": "159239",
    "end": "162360"
  },
  {
    "text": "Ingress for kubernetes we will spend the",
    "start": "162360",
    "end": "164599"
  },
  {
    "text": "next few minutes to develop an intuition",
    "start": "164599",
    "end": "167159"
  },
  {
    "text": "of Ingress for",
    "start": "167159",
    "end": "169920"
  },
  {
    "text": "kubernetes in order to develop an",
    "start": "169920",
    "end": "172159"
  },
  {
    "text": "intuition of Ingress for kubernetes we",
    "start": "172159",
    "end": "174680"
  },
  {
    "text": "will develop an intuition of both",
    "start": "174680",
    "end": "176920"
  },
  {
    "text": "Network Ingress and kubernetes Ingress",
    "start": "176920",
    "end": "179879"
  },
  {
    "text": "first up Network Ingress the admission",
    "start": "179879",
    "end": "183360"
  },
  {
    "text": "of",
    "start": "183360",
    "end": "185519"
  },
  {
    "text": "traffic let there be two communicating",
    "start": "185519",
    "end": "188159"
  },
  {
    "text": "endpoints a service consumer and a",
    "start": "188159",
    "end": "190840"
  },
  {
    "text": "service",
    "start": "190840",
    "end": "191760"
  },
  {
    "text": "provider the service consumer is not",
    "start": "191760",
    "end": "194360"
  },
  {
    "text": "hosted on the kubernetes cluster it is",
    "start": "194360",
    "end": "197159"
  },
  {
    "text": "external the service provider is hosted",
    "start": "197159",
    "end": "200319"
  },
  {
    "text": "on the kubernetes cluster it is",
    "start": "200319",
    "end": "203400"
  },
  {
    "text": "internal Network Ingress denotes a point",
    "start": "203400",
    "end": "206599"
  },
  {
    "text": "or means of admission furthermore",
    "start": "206599",
    "end": "209959"
  },
  {
    "text": "Network Ingress implies directionality",
    "start": "209959",
    "end": "213120"
  },
  {
    "text": "Crossing from external to",
    "start": "213120",
    "end": "216120"
  },
  {
    "text": "internal next up kubernetes Ingress the",
    "start": "216120",
    "end": "219760"
  },
  {
    "text": "routing of",
    "start": "219760",
    "end": "221280"
  },
  {
    "text": "traffic previously there were two",
    "start": "221280",
    "end": "224040"
  },
  {
    "text": "communicating",
    "start": "224040",
    "end": "225200"
  },
  {
    "text": "endpoints a service consumer and a",
    "start": "225200",
    "end": "228040"
  },
  {
    "text": "service provider the service consumer",
    "start": "228040",
    "end": "231000"
  },
  {
    "text": "has to learn the address of the service",
    "start": "231000",
    "end": "233040"
  },
  {
    "text": "provider to actually consume the",
    "start": "233040",
    "end": "235400"
  },
  {
    "text": "provided",
    "start": "235400",
    "end": "236439"
  },
  {
    "text": "service however a persistent trend",
    "start": "236439",
    "end": "239799"
  },
  {
    "text": "complicates this picture one monolithic",
    "start": "239799",
    "end": "243200"
  },
  {
    "text": "service provider is broken up into many",
    "start": "243200",
    "end": "245840"
  },
  {
    "text": "service providers",
    "start": "245840",
    "end": "248239"
  },
  {
    "text": "microservices now the service consumer",
    "start": "248239",
    "end": "251079"
  },
  {
    "text": "has to learn the address of each service",
    "start": "251079",
    "end": "253360"
  },
  {
    "text": "provider to consume the",
    "start": "253360",
    "end": "257000"
  },
  {
    "text": "services kubernetes Ingress is a proxy",
    "start": "257440",
    "end": "260720"
  },
  {
    "text": "an API Gateway that exposes multiple",
    "start": "260720",
    "end": "263759"
  },
  {
    "text": "service providers as a single end point",
    "start": "263759",
    "end": "266600"
  },
  {
    "text": "therefore greatly simplifying consuming",
    "start": "266600",
    "end": "268960"
  },
  {
    "text": "the services",
    "start": "268960",
    "end": "271720"
  },
  {
    "text": "putting both",
    "start": "272199",
    "end": "274080"
  },
  {
    "text": "together Ingress for kubernetes is a",
    "start": "274080",
    "end": "277240"
  },
  {
    "text": "composition of network Ingress and",
    "start": "277240",
    "end": "279120"
  },
  {
    "text": "kubernetes Ingress where Network Ingress",
    "start": "279120",
    "end": "281840"
  },
  {
    "text": "is the admission of traffic into the",
    "start": "281840",
    "end": "283680"
  },
  {
    "text": "kubernetes cluster and kubernetes",
    "start": "283680",
    "end": "285880"
  },
  {
    "text": "Ingress is a routing of traffic within",
    "start": "285880",
    "end": "288160"
  },
  {
    "text": "the kubernetes cluster in effect",
    "start": "288160",
    "end": "291440"
  },
  {
    "text": "kubernetes Ingress is an API",
    "start": "291440",
    "end": "295800"
  },
  {
    "text": "Gateway with an intuition of Ingress for",
    "start": "295800",
    "end": "298680"
  },
  {
    "text": "kubernetes we will spend the rest of the",
    "start": "298680",
    "end": "301039"
  },
  {
    "text": "presentation to develop a set of related",
    "start": "301039",
    "end": "303560"
  },
  {
    "text": "definitions of Ingress for",
    "start": "303560",
    "end": "306280"
  },
  {
    "text": "kubernetes in order to develop",
    "start": "306280",
    "end": "308400"
  },
  {
    "text": "definitions for Ingress for kubernetes",
    "start": "308400",
    "end": "310960"
  },
  {
    "text": "we will once again develop definitions",
    "start": "310960",
    "end": "313120"
  },
  {
    "text": "for both Network Ingress and kubernetes",
    "start": "313120",
    "end": "316039"
  },
  {
    "text": "Ingress so first up Network Ingress the",
    "start": "316039",
    "end": "320360"
  },
  {
    "text": "admission of",
    "start": "320360",
    "end": "322960"
  },
  {
    "text": "traffic in software engineering a",
    "start": "323160",
    "end": "325919"
  },
  {
    "text": "distributed system is an unbounded set",
    "start": "325919",
    "end": "328520"
  },
  {
    "text": "of components from here on out called",
    "start": "328520",
    "end": "331520"
  },
  {
    "text": "endpoints endpoints communicate by",
    "start": "331520",
    "end": "334280"
  },
  {
    "text": "exchanging messages via a network the",
    "start": "334280",
    "end": "337680"
  },
  {
    "text": "behavior of a distributed system is",
    "start": "337680",
    "end": "340360"
  },
  {
    "text": "attributed to the behavior of its end",
    "start": "340360",
    "end": "342520"
  },
  {
    "text": "points and the communication between",
    "start": "342520",
    "end": "345080"
  },
  {
    "text": "them the complexity of a distributed",
    "start": "345080",
    "end": "347880"
  },
  {
    "text": "system is attributed to the autonomy of",
    "start": "347880",
    "end": "350400"
  },
  {
    "text": "its endpoints and the intricacy of the",
    "start": "350400",
    "end": "352639"
  },
  {
    "text": "communication between them without loss",
    "start": "352639",
    "end": "355360"
  },
  {
    "text": "of generality let's focus this",
    "start": "355360",
    "end": "357440"
  },
  {
    "text": "discussion on two end points E1 and",
    "start": "357440",
    "end": "362160"
  },
  {
    "text": "E2 an endpoint is connected to the",
    "start": "362960",
    "end": "365800"
  },
  {
    "text": "network via a",
    "start": "365800",
    "end": "368080"
  },
  {
    "text": "channel the network maintains an",
    "start": "368080",
    "end": "370639"
  },
  {
    "text": "association between endpoints and",
    "start": "370639",
    "end": "374680"
  },
  {
    "text": "addresses from here on out we will",
    "start": "374680",
    "end": "376960"
  },
  {
    "text": "graphically represent this Association",
    "start": "376960",
    "end": "379360"
  },
  {
    "text": "as if the address is a property of the",
    "start": "379360",
    "end": "383000"
  },
  {
    "text": "channel we keep track of the sequence of",
    "start": "383000",
    "end": "385840"
  },
  {
    "text": "send events and receive events in an",
    "start": "385840",
    "end": "388120"
  },
  {
    "text": "endpoint's history if an endpoint wants",
    "start": "388120",
    "end": "391199"
  },
  {
    "text": "to send a message it will place that",
    "start": "391199",
    "end": "394039"
  },
  {
    "text": "message in its",
    "start": "394039",
    "end": "396240"
  },
  {
    "text": "Channel an endpoint placing a message in",
    "start": "396240",
    "end": "399240"
  },
  {
    "text": "its channel is represented by a send",
    "start": "399240",
    "end": "402960"
  },
  {
    "text": "event the network picks up the message",
    "start": "402960",
    "end": "405960"
  },
  {
    "text": "from the sending endpoints Channel and",
    "start": "405960",
    "end": "408360"
  },
  {
    "text": "determines the receiving endpoints",
    "start": "408360",
    "end": "410280"
  },
  {
    "text": "Channel and places the message in that",
    "start": "410280",
    "end": "413639"
  },
  {
    "text": "channel the network placing a message in",
    "start": "413639",
    "end": "417000"
  },
  {
    "text": "an endpoints channel is represented by a",
    "start": "417000",
    "end": "419919"
  },
  {
    "text": "receive",
    "start": "419919",
    "end": "422360"
  },
  {
    "text": "event in this network model send events",
    "start": "422960",
    "end": "426240"
  },
  {
    "text": "are tagged with a Target address the",
    "start": "426240",
    "end": "428759"
  },
  {
    "text": "network places a message in the channel",
    "start": "428759",
    "end": "431440"
  },
  {
    "text": "of the endpoint whose address matches",
    "start": "431440",
    "end": "434240"
  },
  {
    "text": "the message Target",
    "start": "434240",
    "end": "436599"
  },
  {
    "text": "address this can also be represented",
    "start": "436599",
    "end": "439199"
  },
  {
    "text": "graphically as a time space diagram each",
    "start": "439199",
    "end": "442759"
  },
  {
    "text": "timeline represents an endo's history",
    "start": "442759",
    "end": "445840"
  },
  {
    "text": "empty circles represent send events",
    "start": "445840",
    "end": "448479"
  },
  {
    "text": "filled circles represent receive",
    "start": "448479",
    "end": "452280"
  },
  {
    "text": "events a pair or Tuple of corresponding",
    "start": "452280",
    "end": "455800"
  },
  {
    "text": "send and receive events is called a flow",
    "start": "455800",
    "end": "459319"
  },
  {
    "text": "so far we have applied a global point of",
    "start": "459319",
    "end": "462520"
  },
  {
    "text": "view in this model we are able to take",
    "start": "462520",
    "end": "465840"
  },
  {
    "text": "the Viewpoint of the all knowing",
    "start": "465840",
    "end": "467919"
  },
  {
    "text": "Observer we can observe both the",
    "start": "467919",
    "end": "470759"
  },
  {
    "text": "channels of E1 and E2 at the same time",
    "start": "470759",
    "end": "475159"
  },
  {
    "text": "conversely E1 or E2",
    "start": "475159",
    "end": "478440"
  },
  {
    "text": "cannot",
    "start": "478440",
    "end": "481440"
  },
  {
    "text": "E1 can only observe its own",
    "start": "481919",
    "end": "484960"
  },
  {
    "text": "channel and in our model its own address",
    "start": "484960",
    "end": "488840"
  },
  {
    "text": "it simply cannot reach",
    "start": "488840",
    "end": "490680"
  },
  {
    "text": "beyond the same is true for E2 E2 can",
    "start": "490680",
    "end": "495280"
  },
  {
    "text": "only observe its own channel and its own",
    "start": "495280",
    "end": "499800"
  },
  {
    "text": "address so in order for E1 to send a",
    "start": "499800",
    "end": "503159"
  },
  {
    "text": "message to E2 E1 first has to learn the",
    "start": "503159",
    "end": "506840"
  },
  {
    "text": "address of",
    "start": "506840",
    "end": "508280"
  },
  {
    "text": "E2 the the same is true for E2 in order",
    "start": "508280",
    "end": "512039"
  },
  {
    "text": "for E2 to send a message to E1 E2 first",
    "start": "512039",
    "end": "516599"
  },
  {
    "text": "has to learn the address of E1 a process",
    "start": "516599",
    "end": "519640"
  },
  {
    "text": "called endpoint",
    "start": "519640",
    "end": "522719"
  },
  {
    "text": "Discovery moving towards the kubernetes",
    "start": "523039",
    "end": "525800"
  },
  {
    "text": "network model in kubernetes network",
    "start": "525800",
    "end": "529200"
  },
  {
    "text": "addressable endpoints or",
    "start": "529200",
    "end": "531160"
  },
  {
    "text": "parts the kubernetes network model",
    "start": "531160",
    "end": "533959"
  },
  {
    "text": "specifies that any part can communicate",
    "start": "533959",
    "end": "537240"
  },
  {
    "text": "with all parts without network add add",
    "start": "537240",
    "end": "541519"
  },
  {
    "text": "translation the kubernetes network model",
    "start": "541519",
    "end": "544480"
  },
  {
    "text": "does not specify whether external end",
    "start": "544480",
    "end": "547200"
  },
  {
    "text": "points can or cannot communicate with",
    "start": "547200",
    "end": "549920"
  },
  {
    "text": "parts as a consequence depending on your",
    "start": "549920",
    "end": "554160"
  },
  {
    "text": "cluster Network Ingress may be trivial",
    "start": "554160",
    "end": "557200"
  },
  {
    "text": "or complex to",
    "start": "557200",
    "end": "560160"
  },
  {
    "text": "implement as we discussed earlier we",
    "start": "560440",
    "end": "563399"
  },
  {
    "text": "separate the set of endpoints into",
    "start": "563399",
    "end": "565480"
  },
  {
    "text": "external endpoints and internal",
    "start": "565480",
    "end": "567240"
  },
  {
    "text": "endpoints who communicate across Ross",
    "start": "567240",
    "end": "569720"
  },
  {
    "text": "that line of",
    "start": "569720",
    "end": "572360"
  },
  {
    "text": "Separation here we consider end points 1",
    "start": "572360",
    "end": "575560"
  },
  {
    "text": "through 4 as being external endpoints",
    "start": "575560",
    "end": "578160"
  },
  {
    "text": "and 5 through eight is being internal",
    "start": "578160",
    "end": "580959"
  },
  {
    "text": "endpoints in effect",
    "start": "580959",
    "end": "584880"
  },
  {
    "text": "Parts given the separation of end points",
    "start": "585560",
    "end": "588600"
  },
  {
    "text": "into external and internal endpoints we",
    "start": "588600",
    "end": "591360"
  },
  {
    "text": "can classify the communication between",
    "start": "591360",
    "end": "593640"
  },
  {
    "text": "endpoints according to the membership of",
    "start": "593640",
    "end": "595959"
  },
  {
    "text": "the source and target of the",
    "start": "595959",
    "end": "598079"
  },
  {
    "text": "communication there are four possible",
    "start": "598079",
    "end": "602360"
  },
  {
    "text": "combinations in the first combination",
    "start": "602360",
    "end": "605600"
  },
  {
    "text": "source is a member of the set of",
    "start": "605600",
    "end": "607640"
  },
  {
    "text": "external",
    "start": "607640",
    "end": "608880"
  },
  {
    "text": "endpoints and Target is a member of the",
    "start": "608880",
    "end": "611959"
  },
  {
    "text": "set of external",
    "start": "611959",
    "end": "614360"
  },
  {
    "text": "endpoints this particular type of flow",
    "start": "614360",
    "end": "617680"
  },
  {
    "text": "does not have a",
    "start": "617680",
    "end": "619519"
  },
  {
    "text": "name in the second combination source is",
    "start": "619519",
    "end": "623160"
  },
  {
    "text": "a member of the set of external",
    "start": "623160",
    "end": "625120"
  },
  {
    "text": "endpoints and Target is a member of the",
    "start": "625120",
    "end": "627880"
  },
  {
    "text": "set of internal end points",
    "start": "627880",
    "end": "630800"
  },
  {
    "text": "this particular type of flow is called",
    "start": "630800",
    "end": "633320"
  },
  {
    "text": "North South traffic in addition given",
    "start": "633320",
    "end": "636600"
  },
  {
    "text": "the",
    "start": "636600",
    "end": "637480"
  },
  {
    "text": "directionality this combination",
    "start": "637480",
    "end": "639680"
  },
  {
    "text": "constitutes Network",
    "start": "639680",
    "end": "642200"
  },
  {
    "text": "Ingress in the third combination source",
    "start": "642200",
    "end": "646079"
  },
  {
    "text": "is a member of the set of internal",
    "start": "646079",
    "end": "648800"
  },
  {
    "text": "endpoints and Target is a member of the",
    "start": "648800",
    "end": "651800"
  },
  {
    "text": "set of external",
    "start": "651800",
    "end": "653920"
  },
  {
    "text": "endpoints this particular type of flow",
    "start": "653920",
    "end": "657120"
  },
  {
    "text": "is again called north south traffic in",
    "start": "657120",
    "end": "660880"
  },
  {
    "text": "addition given the",
    "start": "660880",
    "end": "663040"
  },
  {
    "text": "directionality this combination",
    "start": "663040",
    "end": "665360"
  },
  {
    "text": "constitutes Network",
    "start": "665360",
    "end": "668680"
  },
  {
    "text": "Eris in the fourth and last combination",
    "start": "668680",
    "end": "671760"
  },
  {
    "text": "source is a member of the set of",
    "start": "671760",
    "end": "673600"
  },
  {
    "text": "internal endpoints and Target is a",
    "start": "673600",
    "end": "676120"
  },
  {
    "text": "member of the set of internal",
    "start": "676120",
    "end": "678560"
  },
  {
    "text": "endpoints this particular type of flow",
    "start": "678560",
    "end": "681680"
  },
  {
    "text": "is called West East",
    "start": "681680",
    "end": "684639"
  },
  {
    "text": "traffic so in conclusion Network Ingress",
    "start": "684639",
    "end": "687920"
  },
  {
    "text": "can be defined as a set of all flows",
    "start": "687920",
    "end": "691000"
  },
  {
    "text": "that originate outside the cluster and",
    "start": "691000",
    "end": "693560"
  },
  {
    "text": "terminate inside the",
    "start": "693560",
    "end": "696720"
  },
  {
    "text": "cluster next up kubernetes Ingress the",
    "start": "696720",
    "end": "700800"
  },
  {
    "text": "routing of",
    "start": "700800",
    "end": "701920"
  },
  {
    "text": "traffic kubernetes defines a kubernetes",
    "start": "701920",
    "end": "704680"
  },
  {
    "text": "Ingress object in effect the kubernetes",
    "start": "704680",
    "end": "708000"
  },
  {
    "text": "Ingress object defines a collection of",
    "start": "708000",
    "end": "711000"
  },
  {
    "text": "HTTP request level routing rules that",
    "start": "711000",
    "end": "714560"
  },
  {
    "text": "determine the target of that",
    "start": "714560",
    "end": "717480"
  },
  {
    "text": "request Ingress matches an HTTP requests",
    "start": "717480",
    "end": "722000"
  },
  {
    "text": "path and host header against its routing",
    "start": "722000",
    "end": "725320"
  },
  {
    "text": "rules to determine the target kubernetes",
    "start": "725320",
    "end": "728800"
  },
  {
    "text": "service to proxy the request",
    "start": "728800",
    "end": "732000"
  },
  {
    "text": "to this example illustrates a kubernetes",
    "start": "732000",
    "end": "735199"
  },
  {
    "text": "Ingress object in effect this Ingress",
    "start": "735199",
    "end": "738320"
  },
  {
    "text": "object defines a collection of four",
    "start": "738320",
    "end": "740760"
  },
  {
    "text": "request level routing",
    "start": "740760",
    "end": "742800"
  },
  {
    "text": "rules in my personal opinion these are",
    "start": "742800",
    "end": "745959"
  },
  {
    "text": "best represented as a decision table",
    "start": "745959",
    "end": "750360"
  },
  {
    "text": "for example the first rule matches an",
    "start": "750360",
    "end": "752839"
  },
  {
    "text": "HTTP request with a host header of",
    "start": "752839",
    "end": "755240"
  },
  {
    "text": "food.org and a path of/ a to proxy to a",
    "start": "755240",
    "end": "759360"
  },
  {
    "text": "part that matches a service named fua on",
    "start": "759360",
    "end": "762839"
  },
  {
    "text": "port",
    "start": "762839",
    "end": "764360"
  },
  {
    "text": "8080 again represented as a row in the",
    "start": "764360",
    "end": "767839"
  },
  {
    "text": "decision",
    "start": "767839",
    "end": "770240"
  },
  {
    "text": "table the third rule matches an HTTP",
    "start": "770279",
    "end": "773680"
  },
  {
    "text": "request with a host header of bar.org",
    "start": "773680",
    "end": "776959"
  },
  {
    "text": "and a path of/ a to proxy to a part that",
    "start": "776959",
    "end": "781480"
  },
  {
    "text": "matches a service named bar a on Port",
    "start": "781480",
    "end": "786600"
  },
  {
    "text": "9090 and again represented as a row in",
    "start": "786680",
    "end": "790240"
  },
  {
    "text": "the decision",
    "start": "790240",
    "end": "792839"
  },
  {
    "text": "table represented as a time space",
    "start": "792959",
    "end": "796560"
  },
  {
    "text": "diagram when the kubernetes Ingress",
    "start": "796560",
    "end": "799000"
  },
  {
    "text": "proxy receives a request it matches the",
    "start": "799000",
    "end": "802360"
  },
  {
    "text": "request against the decision table and",
    "start": "802360",
    "end": "805399"
  },
  {
    "text": "forwards the request so that a part that",
    "start": "805399",
    "end": "808680"
  },
  {
    "text": "matches the target service receiv",
    "start": "808680",
    "end": "810839"
  },
  {
    "text": "receives the",
    "start": "810839",
    "end": "812639"
  },
  {
    "text": "request why do I say forwards the",
    "start": "812639",
    "end": "815399"
  },
  {
    "text": "request so that a part that matches the",
    "start": "815399",
    "end": "818120"
  },
  {
    "text": "target service receives the request and",
    "start": "818120",
    "end": "820839"
  },
  {
    "text": "not simply forwards the request to the",
    "start": "820839",
    "end": "823440"
  },
  {
    "text": "Target",
    "start": "823440",
    "end": "824959"
  },
  {
    "text": "service because there are",
    "start": "824959",
    "end": "826959"
  },
  {
    "text": "implementations that Implement their own",
    "start": "826959",
    "end": "829279"
  },
  {
    "text": "part Discovery in accordance with",
    "start": "829279",
    "end": "831519"
  },
  {
    "text": "kubernetes services but do not rely on",
    "start": "831519",
    "end": "834680"
  },
  {
    "text": "the Discovery implemented by kubernetes",
    "start": "834680",
    "end": "837360"
  },
  {
    "text": "and kubernetes services",
    "start": "837360",
    "end": "841040"
  },
  {
    "text": "next up the kubernetes Ingress",
    "start": "843120",
    "end": "846240"
  },
  {
    "text": "controller the control plane",
    "start": "846240",
    "end": "850079"
  },
  {
    "text": "component kubernetes centers around the",
    "start": "850079",
    "end": "853000"
  },
  {
    "text": "notion of kubernetes controllers and",
    "start": "853000",
    "end": "855360"
  },
  {
    "text": "kubernetes",
    "start": "855360",
    "end": "856639"
  },
  {
    "text": "objects kubernetes controllers",
    "start": "856639",
    "end": "859000"
  },
  {
    "text": "continuously read and write kubernetes",
    "start": "859000",
    "end": "862079"
  },
  {
    "text": "objects core controllers interact",
    "start": "862079",
    "end": "865399"
  },
  {
    "text": "exclusively with the API server to read",
    "start": "865399",
    "end": "868240"
  },
  {
    "text": "and write a set of kubernetes",
    "start": "868240",
    "end": "870600"
  },
  {
    "text": "objects Edge controller interact with",
    "start": "870600",
    "end": "873399"
  },
  {
    "text": "the API server to read and write a set",
    "start": "873399",
    "end": "875920"
  },
  {
    "text": "of kubernetes objects but additionally",
    "start": "875920",
    "end": "878360"
  },
  {
    "text": "communicate with other components in the",
    "start": "878360",
    "end": "880720"
  },
  {
    "text": "data plane let's examine a few familiar",
    "start": "880720",
    "end": "884680"
  },
  {
    "text": "examples the kubernetes replica set",
    "start": "884680",
    "end": "887240"
  },
  {
    "text": "controller is a core controller it",
    "start": "887240",
    "end": "889600"
  },
  {
    "text": "interacts exclusively with the API",
    "start": "889600",
    "end": "892639"
  },
  {
    "text": "server the replica set controller reads",
    "start": "892639",
    "end": "895680"
  },
  {
    "text": "replica set objects and writes Port",
    "start": "895680",
    "end": "898240"
  },
  {
    "text": "objects",
    "start": "898240",
    "end": "900120"
  },
  {
    "text": "the cuet is an edge controller it",
    "start": "900120",
    "end": "903199"
  },
  {
    "text": "interacts with the API server and with",
    "start": "903199",
    "end": "905800"
  },
  {
    "text": "the container run type the cuet reads P",
    "start": "905800",
    "end": "909639"
  },
  {
    "text": "objects and instructs the container",
    "start": "909639",
    "end": "911759"
  },
  {
    "text": "runtime to execute containers",
    "start": "911759",
    "end": "916160"
  },
  {
    "text": "accordingly similarly the kubernetes",
    "start": "916480",
    "end": "919399"
  },
  {
    "text": "endpoints controller is a call",
    "start": "919399",
    "end": "921320"
  },
  {
    "text": "controller it interacts exclusively with",
    "start": "921320",
    "end": "924160"
  },
  {
    "text": "the API server the endpoints controller",
    "start": "924160",
    "end": "927240"
  },
  {
    "text": "reads service objects and Port objects",
    "start": "927240",
    "end": "930120"
  },
  {
    "text": "and writes endpoints",
    "start": "930120",
    "end": "932480"
  },
  {
    "text": "objects the Q proxy is an edge",
    "start": "932480",
    "end": "935279"
  },
  {
    "text": "controller it interacts with the API",
    "start": "935279",
    "end": "937839"
  },
  {
    "text": "server and with the Linux net filter",
    "start": "937839",
    "end": "940759"
  },
  {
    "text": "module the cube proxy reads endpoint",
    "start": "940759",
    "end": "943720"
  },
  {
    "text": "objects and instructs the net filter",
    "start": "943720",
    "end": "946279"
  },
  {
    "text": "module to create network address",
    "start": "946279",
    "end": "948600"
  },
  {
    "text": "translation rules so that a message sent",
    "start": "948600",
    "end": "951959"
  },
  {
    "text": "to a service IP address will be",
    "start": "951959",
    "end": "954360"
  },
  {
    "text": "forwarded to a p IP address with the",
    "start": "954360",
    "end": "957639"
  },
  {
    "text": "port being a member or the end",
    "start": "957639",
    "end": "960720"
  },
  {
    "text": "points now onto the Ingress controller",
    "start": "960720",
    "end": "964120"
  },
  {
    "text": "an Ingress controller is an edge",
    "start": "964120",
    "end": "965680"
  },
  {
    "text": "controller it interacts with the API",
    "start": "965680",
    "end": "968120"
  },
  {
    "text": "server and with an Ingress",
    "start": "968120",
    "end": "970160"
  },
  {
    "text": "proxy the Ingress controller reads",
    "start": "970160",
    "end": "972800"
  },
  {
    "text": "Ingress objects and instructs the",
    "start": "972800",
    "end": "975000"
  },
  {
    "text": "Ingress proxy to create routing rules",
    "start": "975000",
    "end": "977839"
  },
  {
    "text": "according to the decision table",
    "start": "977839",
    "end": "979800"
  },
  {
    "text": "specified in the Ingress",
    "start": "979800",
    "end": "983319"
  },
  {
    "text": "object lastly next",
    "start": "984519",
    "end": "987360"
  },
  {
    "text": "up the kubernetes is ingress proxy the",
    "start": "987360",
    "end": "990720"
  },
  {
    "text": "data plane",
    "start": "990720",
    "end": "992920"
  },
  {
    "text": "component as discussed earlier Network",
    "start": "992920",
    "end": "996160"
  },
  {
    "text": "Ingress may happen before or after",
    "start": "996160",
    "end": "999000"
  },
  {
    "text": "kubernetes Ingress so there are two",
    "start": "999000",
    "end": "1002600"
  },
  {
    "text": "possibilities the Ingress proxy may be",
    "start": "1002600",
    "end": "1005160"
  },
  {
    "text": "an external endpoint or the Ingress",
    "start": "1005160",
    "end": "1008360"
  },
  {
    "text": "proxy may be an internal endpoint",
    "start": "1008360",
    "end": "1011959"
  },
  {
    "text": "apart but either way the task of the",
    "start": "1011959",
    "end": "1014880"
  },
  {
    "text": "Ingress proxy is to accept the request",
    "start": "1014880",
    "end": "1018040"
  },
  {
    "text": "match the request against the decision",
    "start": "1018040",
    "end": "1020120"
  },
  {
    "text": "table specified by the Ingress object",
    "start": "1020120",
    "end": "1023079"
  },
  {
    "text": "and installed by the Ingress controller",
    "start": "1023079",
    "end": "1025839"
  },
  {
    "text": "and forward the request so that a part",
    "start": "1025839",
    "end": "1028918"
  },
  {
    "text": "that matches the target service receives",
    "start": "1028919",
    "end": "1031280"
  },
  {
    "text": "the",
    "start": "1031280",
    "end": "1032520"
  },
  {
    "text": "request so in conclusion kubernetes",
    "start": "1032520",
    "end": "1036000"
  },
  {
    "text": "Ingress can be defined as a set of all",
    "start": "1036000",
    "end": "1039038"
  },
  {
    "text": "flow pairs so that the first flow",
    "start": "1039039",
    "end": "1042520"
  },
  {
    "text": "terminates at the proxy the second flow",
    "start": "1042520",
    "end": "1046160"
  },
  {
    "text": "terminates at a part and there exists a",
    "start": "1046160",
    "end": "1049440"
  },
  {
    "text": "rule in the decision table so that the",
    "start": "1049440",
    "end": "1052480"
  },
  {
    "text": "request of the first flow matches the",
    "start": "1052480",
    "end": "1055400"
  },
  {
    "text": "conditions of the rule and the part",
    "start": "1055400",
    "end": "1058200"
  },
  {
    "text": "matches the target surface of the",
    "start": "1058200",
    "end": "1061280"
  },
  {
    "text": "rule truly not as straightforward as the",
    "start": "1061280",
    "end": "1064480"
  },
  {
    "text": "first",
    "start": "1064480",
    "end": "1066720"
  },
  {
    "text": "Formula let's",
    "start": "1068840",
    "end": "1070960"
  },
  {
    "text": "conclude inas for kubernetes encompasses",
    "start": "1070960",
    "end": "1074559"
  },
  {
    "text": "two",
    "start": "1074559",
    "end": "1075600"
  },
  {
    "text": "aspects Network Ingress the admission of",
    "start": "1075600",
    "end": "1078919"
  },
  {
    "text": "of traffic into the",
    "start": "1078919",
    "end": "1080880"
  },
  {
    "text": "cluster and kubernetes Ingress the",
    "start": "1080880",
    "end": "1083960"
  },
  {
    "text": "routing of traffic within the",
    "start": "1083960",
    "end": "1087679"
  },
  {
    "text": "cluster kubernetes Ingress is composed",
    "start": "1087880",
    "end": "1091000"
  },
  {
    "text": "of three building",
    "start": "1091000",
    "end": "1092400"
  },
  {
    "text": "blocks a kubernetes Ingress",
    "start": "1092400",
    "end": "1095120"
  },
  {
    "text": "resource the kubernetes Ingress",
    "start": "1095120",
    "end": "1097600"
  },
  {
    "text": "controller and the kubernetes Ingress",
    "start": "1097600",
    "end": "1102039"
  },
  {
    "text": "proxy however kubernetes provides only",
    "start": "1102039",
    "end": "1105480"
  },
  {
    "text": "the Ingress object Ingress controller",
    "start": "1105480",
    "end": "1108520"
  },
  {
    "text": "and Ingress proxy are third party",
    "start": "1108520",
    "end": "1112520"
  },
  {
    "text": "components in effect the kubernetes",
    "start": "1113039",
    "end": "1116000"
  },
  {
    "text": "Ingress object defines a collection of",
    "start": "1116000",
    "end": "1118640"
  },
  {
    "text": "HTTP request level routing rules that",
    "start": "1118640",
    "end": "1121880"
  },
  {
    "text": "determine the target of that",
    "start": "1121880",
    "end": "1125080"
  },
  {
    "text": "request the Ingress controller reads",
    "start": "1125080",
    "end": "1128159"
  },
  {
    "text": "Ingress objects and instructs the",
    "start": "1128159",
    "end": "1130400"
  },
  {
    "text": "Ingress proxy to create routing rules",
    "start": "1130400",
    "end": "1133280"
  },
  {
    "text": "according to the decision table",
    "start": "1133280",
    "end": "1135159"
  },
  {
    "text": "specified in the English",
    "start": "1135159",
    "end": "1137720"
  },
  {
    "text": "object the Ingress proxy accepts the",
    "start": "1137720",
    "end": "1141360"
  },
  {
    "text": "request match the request against the",
    "start": "1141360",
    "end": "1143919"
  },
  {
    "text": "decision table specified by the Ingress",
    "start": "1143919",
    "end": "1146280"
  },
  {
    "text": "object and installed by the English",
    "start": "1146280",
    "end": "1148720"
  },
  {
    "text": "controller and forward the request so",
    "start": "1148720",
    "end": "1151760"
  },
  {
    "text": "that a part that matches the target",
    "start": "1151760",
    "end": "1153640"
  },
  {
    "text": "service receives the",
    "start": "1153640",
    "end": "1156159"
  },
  {
    "text": "request and",
    "start": "1156159",
    "end": "1158840"
  },
  {
    "text": "finally what is the difference between",
    "start": "1158840",
    "end": "1161520"
  },
  {
    "text": "kubernetes Ingress and an API Gateway",
    "start": "1161520",
    "end": "1165120"
  },
  {
    "text": "like the Ambassador API",
    "start": "1165120",
    "end": "1167200"
  },
  {
    "text": "Gateway that of of course is a trick",
    "start": "1167200",
    "end": "1170080"
  },
  {
    "text": "question in effect the concept of",
    "start": "1170080",
    "end": "1172960"
  },
  {
    "text": "kubernetes Ingress is the concept of an",
    "start": "1172960",
    "end": "1175360"
  },
  {
    "text": "API Gateway and in effect the kubernetes",
    "start": "1175360",
    "end": "1178960"
  },
  {
    "text": "Ingress object is a standardized",
    "start": "1178960",
    "end": "1181520"
  },
  {
    "text": "configuration for API",
    "start": "1181520",
    "end": "1183799"
  },
  {
    "text": "gateways popular API gateways like the",
    "start": "1183799",
    "end": "1186960"
  },
  {
    "text": "Ambassador API Gateway can be installed",
    "start": "1186960",
    "end": "1190159"
  },
  {
    "text": "to read the Ingress object and act as",
    "start": "1190159",
    "end": "1193400"
  },
  {
    "text": "the Ingress controller and the Ingress",
    "start": "1193400",
    "end": "1197640"
  },
  {
    "text": "proxy",
    "start": "1197640",
    "end": "1200159"
  },
  {
    "text": "if you are watching this presentation",
    "start": "1200159",
    "end": "1202000"
  },
  {
    "text": "during the conference I will be happy to",
    "start": "1202000",
    "end": "1204280"
  },
  {
    "text": "answer your questions online if you are",
    "start": "1204280",
    "end": "1207000"
  },
  {
    "text": "watching this presentation after the",
    "start": "1207000",
    "end": "1208799"
  },
  {
    "text": "conference I will be happy to answer",
    "start": "1208799",
    "end": "1210760"
  },
  {
    "text": "your questions via email but either way",
    "start": "1210760",
    "end": "1213799"
  },
  {
    "text": "thank you for watching inside kubernetes",
    "start": "1213799",
    "end": "1216000"
  },
  {
    "text": "Ingress",
    "start": "1216000",
    "end": "1218760"
  }
]