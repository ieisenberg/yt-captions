[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "hello everyone we're gonna get started",
    "start": "30",
    "end": "1800"
  },
  {
    "text": "in a few minutes my name is Steven",
    "start": "1800",
    "end": "4470"
  },
  {
    "text": "Augustus I'm one of the program",
    "start": "4470",
    "end": "6600"
  },
  {
    "text": "committee members for cube con I'm also",
    "start": "6600",
    "end": "8910"
  },
  {
    "text": "one of the sig chairs I'm just gonna be",
    "start": "8910",
    "end": "12090"
  },
  {
    "text": "introducing Sode Sode is a senior",
    "start": "12090",
    "end": "14250"
  },
  {
    "text": "software engineer at Google he's also",
    "start": "14250",
    "end": "16760"
  },
  {
    "text": "one of the co-chairs for cig storage and",
    "start": "16760",
    "end": "19859"
  },
  {
    "text": "he's gonna be going over a little bit of",
    "start": "19859",
    "end": "21420"
  },
  {
    "text": "the self-healing capabilities of",
    "start": "21420",
    "end": "23369"
  },
  {
    "text": "kubernetes so walking through the",
    "start": "23369",
    "end": "24900"
  },
  {
    "text": "declarative API and and how you can get",
    "start": "24900",
    "end": "27750"
  },
  {
    "text": "to the point where you can run thousands",
    "start": "27750",
    "end": "29400"
  },
  {
    "text": "of clusters on kubernetes and expect the",
    "start": "29400",
    "end": "31859"
  },
  {
    "text": "same consistent behavior out of the",
    "start": "31859",
    "end": "34219"
  },
  {
    "text": "clusters so so during the question and",
    "start": "34219",
    "end": "40170"
  },
  {
    "text": "answer section we want to make sure that",
    "start": "40170",
    "end": "41610"
  },
  {
    "text": "the questions are actually picked up on",
    "start": "41610",
    "end": "43230"
  },
  {
    "text": "video so when you raise your hand I'm",
    "start": "43230",
    "end": "45750"
  },
  {
    "text": "gonna walk over to you and give you the",
    "start": "45750",
    "end": "47250"
  },
  {
    "text": "mic just so the questions are picked up",
    "start": "47250",
    "end": "48950"
  },
  {
    "text": "and yeah take it away perfect thank you",
    "start": "48950",
    "end": "52500"
  },
  {
    "start": "50000",
    "end": "270000"
  },
  {
    "text": "so much",
    "start": "52500",
    "end": "53219"
  },
  {
    "text": "how's everyone doing today thank you so",
    "start": "53219",
    "end": "60660"
  },
  {
    "text": "this talk is going to be fairly basic",
    "start": "60660",
    "end": "63149"
  },
  {
    "text": "for those of you who are already",
    "start": "63149",
    "end": "64378"
  },
  {
    "text": "familiar with kubernetes the goal here",
    "start": "64379",
    "end": "66869"
  },
  {
    "text": "is to talk a little bit about the",
    "start": "66869",
    "end": "69720"
  },
  {
    "text": "underpinnings the design principles",
    "start": "69720",
    "end": "71640"
  },
  {
    "text": "behind kubernetes and why it works the",
    "start": "71640",
    "end": "74790"
  },
  {
    "text": "way that it does and how that enables",
    "start": "74790",
    "end": "76860"
  },
  {
    "text": "you to have kubernetes basically",
    "start": "76860",
    "end": "81259"
  },
  {
    "text": "self-heal detect and self-heal any",
    "start": "81259",
    "end": "84180"
  },
  {
    "text": "issues that that come up within your",
    "start": "84180",
    "end": "86610"
  },
  {
    "text": "cluster so kubernetes is now being used",
    "start": "86610",
    "end": "90000"
  },
  {
    "text": "to manage clusters all the way from a",
    "start": "90000",
    "end": "92700"
  },
  {
    "text": "single node all the way up to thousands",
    "start": "92700",
    "end": "94500"
  },
  {
    "text": "of nodes and as you all know at that",
    "start": "94500",
    "end": "98100"
  },
  {
    "text": "scale failure is inevitable something is",
    "start": "98100",
    "end": "101430"
  },
  {
    "text": "going to die a disk is gonna die a node",
    "start": "101430",
    "end": "104040"
  },
  {
    "text": "is gonna die something bad is going to",
    "start": "104040",
    "end": "106619"
  },
  {
    "text": "happen at some point",
    "start": "106619",
    "end": "108329"
  },
  {
    "text": "and requiring human intervention to",
    "start": "108329",
    "end": "112439"
  },
  {
    "text": "detect and to fix that is infeasible",
    "start": "112439",
    "end": "116159"
  },
  {
    "text": "it's also unsustainable so we have to",
    "start": "116159",
    "end": "120509"
  },
  {
    "text": "have automation the beautiful thing of",
    "start": "120509",
    "end": "123630"
  },
  {
    "text": "course is that this is where kubernetes",
    "start": "123630",
    "end": "126570"
  },
  {
    "text": "shines this is the purpose of kubernetes",
    "start": "126570",
    "end": "129599"
  },
  {
    "text": "it is a system that monitor",
    "start": "129599",
    "end": "133380"
  },
  {
    "text": "detects and rectifies any issues that",
    "start": "133380",
    "end": "136470"
  },
  {
    "text": "come up within your cluster so real",
    "start": "136470",
    "end": "140970"
  },
  {
    "text": "quick the agenda here is going to talk",
    "start": "140970",
    "end": "143100"
  },
  {
    "text": "about we're going to talk about how",
    "start": "143100",
    "end": "146220"
  },
  {
    "text": "kubernetes does self-healing",
    "start": "146220",
    "end": "148310"
  },
  {
    "text": "then we're gonna move on to an example",
    "start": "148310",
    "end": "150720"
  },
  {
    "text": "of that and finally we're going to talk",
    "start": "150720",
    "end": "152940"
  },
  {
    "text": "about some areas for improvement",
    "start": "152940",
    "end": "154200"
  },
  {
    "text": "kubernetes is obviously not perfect and",
    "start": "154200",
    "end": "156540"
  },
  {
    "text": "there are some issues with being able to",
    "start": "156540",
    "end": "161040"
  },
  {
    "text": "detect problems and fix them and I'll",
    "start": "161040",
    "end": "162960"
  },
  {
    "text": "talk about those at the end and then",
    "start": "162960",
    "end": "165030"
  },
  {
    "text": "we'll save cute questions till the very",
    "start": "165030",
    "end": "168510"
  },
  {
    "text": "end",
    "start": "168510",
    "end": "170629"
  },
  {
    "text": "so how does kubernetes self-healing work",
    "start": "172730",
    "end": "176100"
  },
  {
    "text": "it's fairly simple there's two pieces",
    "start": "176100",
    "end": "178260"
  },
  {
    "text": "involved one is the fact that kubernetes",
    "start": "178260",
    "end": "181290"
  },
  {
    "text": "has a declarative API and the second is",
    "start": "181290",
    "end": "185330"
  },
  {
    "text": "that it uses controllers that observe",
    "start": "185330",
    "end": "189090"
  },
  {
    "text": "and rectify so that's that's basically",
    "start": "189090",
    "end": "191190"
  },
  {
    "text": "it let's dive into that before we talk",
    "start": "191190",
    "end": "195660"
  },
  {
    "text": "about declarative API s it's important",
    "start": "195660",
    "end": "197850"
  },
  {
    "text": "to understand what the alternatives are",
    "start": "197850",
    "end": "199260"
  },
  {
    "text": "the alternative is an imperative API",
    "start": "199260",
    "end": "202340"
  },
  {
    "text": "with imperative api's you you basically",
    "start": "202340",
    "end": "207210"
  },
  {
    "text": "specify exactly what you want the server",
    "start": "207210",
    "end": "209310"
  },
  {
    "text": "to do so if you wanted a specific node",
    "start": "209310",
    "end": "213120"
  },
  {
    "text": "to start a container you would call out",
    "start": "213120",
    "end": "215610"
  },
  {
    "text": "to that specific node there's a server",
    "start": "215610",
    "end": "218310"
  },
  {
    "text": "sitting there that's listening an agent",
    "start": "218310",
    "end": "220110"
  },
  {
    "text": "you tell it to start a container and",
    "start": "220110",
    "end": "222270"
  },
  {
    "text": "then it gives you a result back to say",
    "start": "222270",
    "end": "224010"
  },
  {
    "text": "yes I was able to start that container",
    "start": "224010",
    "end": "225720"
  },
  {
    "text": "or no I wasn't able to start that",
    "start": "225720",
    "end": "227190"
  },
  {
    "text": "container this seems like a fairly",
    "start": "227190",
    "end": "229380"
  },
  {
    "text": "reasonable way to build api's and in",
    "start": "229380",
    "end": "232680"
  },
  {
    "text": "fact many many api's are built this way",
    "start": "232680",
    "end": "235100"
  },
  {
    "text": "but there's a problem with building a",
    "start": "235100",
    "end": "237750"
  },
  {
    "text": "distributed system off based off of",
    "start": "237750",
    "end": "239850"
  },
  {
    "text": "purely imperative API s and the",
    "start": "239850",
    "end": "242580"
  },
  {
    "text": "challenge is what happens when things go",
    "start": "242580",
    "end": "246120"
  },
  {
    "text": "wrong what happens when there is a",
    "start": "246120",
    "end": "247440"
  },
  {
    "text": "failure so you told the the node to",
    "start": "247440",
    "end": "250980"
  },
  {
    "text": "start a container but maybe the node may",
    "start": "250980",
    "end": "255450"
  },
  {
    "text": "be the container crashed maybe the node",
    "start": "255450",
    "end": "256950"
  },
  {
    "text": "itself crashed maybe there was a network",
    "start": "256950",
    "end": "258419"
  },
  {
    "text": "partition issue that is preventing",
    "start": "258419",
    "end": "261359"
  },
  {
    "text": "access to that pod how do you detect",
    "start": "261359",
    "end": "265950"
  },
  {
    "text": "that and how do you fix that do you",
    "start": "265950",
    "end": "267660"
  },
  {
    "text": "write your own tooling so that is the",
    "start": "267660",
    "end": "271200"
  },
  {
    "start": "270000",
    "end": "600000"
  },
  {
    "text": "one of the main reasons that we for",
    "start": "271200",
    "end": "274650"
  },
  {
    "text": "kubernetes based the entire API off the",
    "start": "274650",
    "end": "278130"
  },
  {
    "text": "entire API is a declarative API",
    "start": "278130",
    "end": "281630"
  },
  {
    "text": "so let's talk a little bit more about",
    "start": "287190",
    "end": "289470"
  },
  {
    "text": "declarative api's so like I mentioned",
    "start": "289470",
    "end": "293640"
  },
  {
    "text": "with an imperative API the process is",
    "start": "293640",
    "end": "296940"
  },
  {
    "text": "very manual you provide the exact set of",
    "start": "296940",
    "end": "300180"
  },
  {
    "text": "instructions the system executes those",
    "start": "300180",
    "end": "302220"
  },
  {
    "text": "instructions and then you monitor the",
    "start": "302220",
    "end": "304410"
  },
  {
    "text": "system and then provide corrective",
    "start": "304410",
    "end": "306030"
  },
  {
    "text": "instructions if things deviate with a",
    "start": "306030",
    "end": "309630"
  },
  {
    "text": "declarative API everything is automatic",
    "start": "309630",
    "end": "312030"
  },
  {
    "text": "you declare the desired state what you",
    "start": "312030",
    "end": "315360"
  },
  {
    "text": "want the intended state to be and then",
    "start": "315360",
    "end": "317940"
  },
  {
    "text": "the system works to drive towards that",
    "start": "317940",
    "end": "320310"
  },
  {
    "text": "state so let's walk through a example",
    "start": "320310",
    "end": "330290"
  },
  {
    "text": "we're gonna create a pod and we're gonna",
    "start": "330290",
    "end": "332940"
  },
  {
    "text": "demonstrate how declarative API czar the",
    "start": "332940",
    "end": "335460"
  },
  {
    "text": "kubernetes way so instead of calling out",
    "start": "335460",
    "end": "338880"
  },
  {
    "text": "to the master or calling out to a",
    "start": "338880",
    "end": "342000"
  },
  {
    "text": "specific node to create the pod what you",
    "start": "342000",
    "end": "344910"
  },
  {
    "text": "do is you construct a API resource that",
    "start": "344910",
    "end": "350790"
  },
  {
    "text": "declares what you want the system to do",
    "start": "350790",
    "end": "353390"
  },
  {
    "text": "so in this case we have a replica set",
    "start": "353390",
    "end": "356250"
  },
  {
    "text": "object that says I want to create a pod",
    "start": "356250",
    "end": "359490"
  },
  {
    "text": "that starts this specific container in",
    "start": "359490",
    "end": "362460"
  },
  {
    "text": "this case engine X and I want there to",
    "start": "362460",
    "end": "364740"
  },
  {
    "text": "be one instance of this to be running on",
    "start": "364740",
    "end": "367260"
  },
  {
    "text": "my cluster at all times this is your",
    "start": "367260",
    "end": "370950"
  },
  {
    "text": "intention and you're creating this API",
    "start": "370950",
    "end": "372810"
  },
  {
    "text": "object as yamo against the kubernetes",
    "start": "372810",
    "end": "375780"
  },
  {
    "text": "api server when you do that that object",
    "start": "375780",
    "end": "379260"
  },
  {
    "text": "is persisted on the master server and",
    "start": "379260",
    "end": "382340"
  },
  {
    "text": "you're done now everything in kubernetes",
    "start": "382340",
    "end": "387840"
  },
  {
    "text": "is going to be monitoring the kubernetes",
    "start": "387840",
    "end": "389760"
  },
  {
    "text": "api server and figuring out what to do",
    "start": "389760",
    "end": "392520"
  },
  {
    "text": "next they're gonna react and have the",
    "start": "392520",
    "end": "395190"
  },
  {
    "text": "pod scheduled let's take a look at that",
    "start": "395190",
    "end": "397980"
  },
  {
    "text": "a little bit closely so when I say",
    "start": "397980",
    "end": "402120"
  },
  {
    "text": "everything in the kubernetes world is",
    "start": "402120",
    "end": "403980"
  },
  {
    "text": "watching the API server I mean",
    "start": "403980",
    "end": "405390"
  },
  {
    "text": "everything so the master is broken up",
    "start": "405390",
    "end": "408540"
  },
  {
    "text": "into multiple components you have the",
    "start": "408540",
    "end": "410550"
  },
  {
    "text": "API server as a central piece that keeps",
    "start": "410550",
    "end": "413160"
  },
  {
    "text": "track of what the desired state is and",
    "start": "413160",
    "end": "415289"
  },
  {
    "text": "then there are multiple other components",
    "start": "415289",
    "end": "417300"
  },
  {
    "text": "in the master like the scheduler the",
    "start": "417300",
    "end": "419130"
  },
  {
    "text": "node controller and other",
    "start": "419130",
    "end": "420810"
  },
  {
    "text": "controllers that are also watching the",
    "start": "420810",
    "end": "422550"
  },
  {
    "text": "API server in addition to that all the",
    "start": "422550",
    "end": "425550"
  },
  {
    "text": "nodes have an agent called the cubelet",
    "start": "425550",
    "end": "427590"
  },
  {
    "text": "that is also watching the API server and",
    "start": "427590",
    "end": "430440"
  },
  {
    "text": "reacting so when you as a user declare",
    "start": "430440",
    "end": "434639"
  },
  {
    "text": "something on the API server it gets",
    "start": "434639",
    "end": "436860"
  },
  {
    "text": "persisted there anybody that's watching",
    "start": "436860",
    "end": "438990"
  },
  {
    "text": "the API server gets a notification to",
    "start": "438990",
    "end": "441450"
  },
  {
    "text": "say hey by the way there's a new object",
    "start": "441450",
    "end": "443040"
  },
  {
    "text": "are you interested in it so in this",
    "start": "443040",
    "end": "447870"
  },
  {
    "text": "example the scheduler is going to notice",
    "start": "447870",
    "end": "452400"
  },
  {
    "text": "that there's a new pod that hasn't been",
    "start": "452400",
    "end": "453900"
  },
  {
    "text": "scheduled and it's going to immediately",
    "start": "453900",
    "end": "456860"
  },
  {
    "text": "run its algorithm to figure out where",
    "start": "456860",
    "end": "459330"
  },
  {
    "text": "the best place to place that pod on the",
    "start": "459330",
    "end": "461550"
  },
  {
    "text": "cluster is going to be and you would",
    "start": "461550",
    "end": "465270"
  },
  {
    "text": "think that the next step would be for",
    "start": "465270",
    "end": "466770"
  },
  {
    "text": "the scheduler to then call out to the",
    "start": "466770",
    "end": "470550"
  },
  {
    "text": "selected node and tell that node to",
    "start": "470550",
    "end": "473030"
  },
  {
    "text": "start the pod or start the container but",
    "start": "473030",
    "end": "476370"
  },
  {
    "text": "that's not the way that it works with",
    "start": "476370",
    "end": "479340"
  },
  {
    "text": "the declarative API everything goes",
    "start": "479340",
    "end": "481260"
  },
  {
    "text": "through that central API so instead of",
    "start": "481260",
    "end": "484380"
  },
  {
    "text": "calling out to the node the scheduler",
    "start": "484380",
    "end": "486810"
  },
  {
    "text": "once it makes a decision about where",
    "start": "486810",
    "end": "488550"
  },
  {
    "text": "that pod should be scheduled updates the",
    "start": "488550",
    "end": "491700"
  },
  {
    "text": "kubernetes api server the API object for",
    "start": "491700",
    "end": "494669"
  },
  {
    "text": "the pod to say this pod should be",
    "start": "494669",
    "end": "496350"
  },
  {
    "text": "scheduled on node let's say in this case",
    "start": "496350",
    "end": "499130"
  },
  {
    "text": "B and now node B has an agent that's",
    "start": "499130",
    "end": "504390"
  },
  {
    "text": "monitoring the API server and it notices",
    "start": "504390",
    "end": "506880"
  },
  {
    "text": "oh there's a pod that is scheduled to me",
    "start": "506880",
    "end": "509250"
  },
  {
    "text": "but I know that this pod is not running",
    "start": "509250",
    "end": "511470"
  },
  {
    "text": "so let me make sure that that happens",
    "start": "511470",
    "end": "514140"
  },
  {
    "text": "and node B is responsible for starting",
    "start": "514140",
    "end": "516210"
  },
  {
    "text": "that container and it's responsible for",
    "start": "516210",
    "end": "519300"
  },
  {
    "text": "keeping that container running so if pod",
    "start": "519300",
    "end": "521969"
  },
  {
    "text": "a crashes for whatever reason the the",
    "start": "521969",
    "end": "526260"
  },
  {
    "text": "node agent is monitoring the API server",
    "start": "526260",
    "end": "529080"
  },
  {
    "text": "notices that hey I should be running",
    "start": "529080",
    "end": "531030"
  },
  {
    "text": "this pod the pod is terminated let me",
    "start": "531030",
    "end": "533850"
  },
  {
    "text": "restart it to make make things happy",
    "start": "533850",
    "end": "538040"
  },
  {
    "text": "and so this system is going to keep your",
    "start": "540430",
    "end": "543980"
  },
  {
    "text": "pod running until you delete the intent",
    "start": "543980",
    "end": "547810"
  },
  {
    "text": "the system basically is going to try to",
    "start": "547810",
    "end": "550940"
  },
  {
    "text": "achieve eventual consistency until your",
    "start": "550940",
    "end": "553340"
  },
  {
    "text": "intent changes and the way that you",
    "start": "553340",
    "end": "555380"
  },
  {
    "text": "change your intent is you delete the",
    "start": "555380",
    "end": "557750"
  },
  {
    "text": "object that you created you delete your",
    "start": "557750",
    "end": "560150"
  },
  {
    "text": "pod object it disappears off the",
    "start": "560150",
    "end": "562640"
  },
  {
    "text": "kubernetes api server and now all the",
    "start": "562640",
    "end": "565220"
  },
  {
    "text": "components that are watching it are",
    "start": "565220",
    "end": "566600"
  },
  {
    "text": "going to get that deletion event and",
    "start": "566600",
    "end": "568550"
  },
  {
    "text": "they're gonna say oh for example in this",
    "start": "568550",
    "end": "570650"
  },
  {
    "text": "case the cube lid on node b is going to",
    "start": "570650",
    "end": "573350"
  },
  {
    "text": "notice this pod does not no longer",
    "start": "573350",
    "end": "576050"
  },
  {
    "text": "exists on the api server so i need to",
    "start": "576050",
    "end": "578570"
  },
  {
    "text": "terminate it from terminated from my",
    "start": "578570",
    "end": "583010"
  },
  {
    "text": "local instance and it'll go ahead and",
    "start": "583010",
    "end": "585200"
  },
  {
    "text": "terminate that pod so that's the very",
    "start": "585200",
    "end": "587600"
  },
  {
    "text": "basics of how the kubernetes api works",
    "start": "587600",
    "end": "590570"
  },
  {
    "text": "it's a declarative API and this is the",
    "start": "590570",
    "end": "592430"
  },
  {
    "text": "basis of self-healing in kubernetes this",
    "start": "592430",
    "end": "595520"
  },
  {
    "text": "pattern is repeated again and again and",
    "start": "595520",
    "end": "598070"
  },
  {
    "text": "again to achieve a system that together",
    "start": "598070",
    "end": "601820"
  },
  {
    "start": "600000",
    "end": "810000"
  },
  {
    "text": "is self-healing so let's talk about what",
    "start": "601820",
    "end": "606170"
  },
  {
    "text": "some of those benefits are the major",
    "start": "606170",
    "end": "609860"
  },
  {
    "text": "benefits of a declarative API are that",
    "start": "609860",
    "end": "612950"
  },
  {
    "text": "they give you automatic recovery there",
    "start": "612950",
    "end": "617420"
  },
  {
    "text": "is no single point of failure the master",
    "start": "617420",
    "end": "622940"
  },
  {
    "text": "components are going to be simpler so if",
    "start": "622940",
    "end": "625310"
  },
  {
    "text": "you had basically put an imperative API",
    "start": "625310",
    "end": "628850"
  },
  {
    "text": "between the master and the nodes all the",
    "start": "628850",
    "end": "631610"
  },
  {
    "text": "logic to detect for example whether a",
    "start": "631610",
    "end": "634160"
  },
  {
    "text": "container is failing and what to do",
    "start": "634160",
    "end": "637490"
  },
  {
    "text": "about that would now be have to be moved",
    "start": "637490",
    "end": "639530"
  },
  {
    "text": "into the master and your master node",
    "start": "639530",
    "end": "641810"
  },
  {
    "text": "logic becomes much more complicated",
    "start": "641810",
    "end": "644470"
  },
  {
    "text": "it'll simplify your your nodes but it'll",
    "start": "644470",
    "end": "647270"
  },
  {
    "text": "complicate your masters with a",
    "start": "647270",
    "end": "649070"
  },
  {
    "text": "declarative API every component within",
    "start": "649070",
    "end": "651350"
  },
  {
    "text": "kubernetes",
    "start": "651350",
    "end": "652100"
  },
  {
    "text": "is responsible for itself so the logic",
    "start": "652100",
    "end": "656150"
  },
  {
    "text": "the complicated logic is distributed to",
    "start": "656150",
    "end": "658820"
  },
  {
    "text": "each component and it makes it much more",
    "start": "658820",
    "end": "661490"
  },
  {
    "text": "much easier for each component to be",
    "start": "661490",
    "end": "663800"
  },
  {
    "text": "revved independently as well so again",
    "start": "663800",
    "end": "668510"
  },
  {
    "text": "the resulting system is simpler it's",
    "start": "668510",
    "end": "670370"
  },
  {
    "text": "more robust and can easily recover from",
    "start": "670370",
    "end": "672740"
  },
  {
    "text": "failure of any component",
    "start": "672740",
    "end": "675970"
  },
  {
    "text": "so I talked about the declarative API",
    "start": "678079",
    "end": "681990"
  },
  {
    "text": "that was the first piece the second",
    "start": "681990",
    "end": "684839"
  },
  {
    "text": "piece of this is controllers controllers",
    "start": "684839",
    "end": "688589"
  },
  {
    "text": "are just processes that are running",
    "start": "688589",
    "end": "693230"
  },
  {
    "text": "monitoring the API server and reacting",
    "start": "693230",
    "end": "695910"
  },
  {
    "text": "to it",
    "start": "695910",
    "end": "697319"
  },
  {
    "text": "there are a number of controllers that",
    "start": "697319",
    "end": "699360"
  },
  {
    "text": "ship out of the box with kubernetes the",
    "start": "699360",
    "end": "703230"
  },
  {
    "text": "controllers you're probably most",
    "start": "703230",
    "end": "704970"
  },
  {
    "text": "familiar with are for example the",
    "start": "704970",
    "end": "707699"
  },
  {
    "text": "scheduler itself as a controller the",
    "start": "707699",
    "end": "710750"
  },
  {
    "text": "node has a controller there is a replica",
    "start": "710750",
    "end": "715769"
  },
  {
    "text": "set controller there is a volume",
    "start": "715769",
    "end": "718399"
  },
  {
    "text": "controller persistent volume controller",
    "start": "718399",
    "end": "720779"
  },
  {
    "text": "as well as a volume attachment",
    "start": "720779",
    "end": "722279"
  },
  {
    "text": "controller and many many other",
    "start": "722279",
    "end": "723540"
  },
  {
    "text": "controllers that ship out of the box you",
    "start": "723540",
    "end": "726600"
  },
  {
    "text": "can also write controllers of your own",
    "start": "726600",
    "end": "728269"
  },
  {
    "text": "now what these controllers do is they",
    "start": "728269",
    "end": "732209"
  },
  {
    "text": "maintain an in-memory cache of what the",
    "start": "732209",
    "end": "735449"
  },
  {
    "text": "desired state is they will watch the",
    "start": "735449",
    "end": "738029"
  },
  {
    "text": "kubernetes api server and keep a local",
    "start": "738029",
    "end": "740759"
  },
  {
    "text": "cache of what the user intends or what",
    "start": "740759",
    "end": "745139"
  },
  {
    "text": "the the system wants to happen and then",
    "start": "745139",
    "end": "748589"
  },
  {
    "text": "they also keep a in-memory cache of the",
    "start": "748589",
    "end": "751050"
  },
  {
    "text": "actual state which is what they believe",
    "start": "751050",
    "end": "753750"
  },
  {
    "text": "is the real world state that they have",
    "start": "753750",
    "end": "756300"
  },
  {
    "text": "observed and then they have a simple",
    "start": "756300",
    "end": "759420"
  },
  {
    "text": "control loop which is literally just a",
    "start": "759420",
    "end": "762209"
  },
  {
    "text": "for loop that will DIF your the the",
    "start": "762209",
    "end": "765089"
  },
  {
    "text": "in-memory desired state with the actual",
    "start": "765089",
    "end": "767880"
  },
  {
    "text": "state when these two things differ the",
    "start": "767880",
    "end": "771300"
  },
  {
    "text": "controller kicks off an operation to try",
    "start": "771300",
    "end": "773160"
  },
  {
    "text": "to rectify and make sure they match up",
    "start": "773160",
    "end": "775019"
  },
  {
    "text": "so in practice what this means is that",
    "start": "775019",
    "end": "779519"
  },
  {
    "text": "let's take volumes as an example the",
    "start": "779519",
    "end": "784319"
  },
  {
    "text": "volume attachment controller has an",
    "start": "784319",
    "end": "786509"
  },
  {
    "text": "actual and a desired state the desired",
    "start": "786509",
    "end": "789269"
  },
  {
    "text": "state is populated by a component that's",
    "start": "789269",
    "end": "792449"
  },
  {
    "text": "watching the kubernetes api server when",
    "start": "792449",
    "end": "796380"
  },
  {
    "text": "it notices that there is a new pod",
    "start": "796380",
    "end": "797880"
  },
  {
    "text": "that's created with a volume and that",
    "start": "797880",
    "end": "800189"
  },
  {
    "text": "pod has been scheduled to a node and",
    "start": "800189",
    "end": "801930"
  },
  {
    "text": "that node does not has not been is not",
    "start": "801930",
    "end": "805829"
  },
  {
    "text": "already part of the desire",
    "start": "805829",
    "end": "807070"
  },
  {
    "text": "State for that volume it's going to",
    "start": "807070",
    "end": "809560"
  },
  {
    "text": "update the it's gonna update the excuse",
    "start": "809560",
    "end": "816730"
  },
  {
    "start": "810000",
    "end": "1000000"
  },
  {
    "text": "me there we go",
    "start": "816730",
    "end": "823990"
  },
  {
    "text": "okay so the the populate er will update",
    "start": "823990",
    "end": "828820"
  },
  {
    "text": "the desired state and the desired state",
    "start": "828820",
    "end": "831400"
  },
  {
    "text": "will be updated to say hey this volume",
    "start": "831400",
    "end": "832930"
  },
  {
    "text": "should be attached to this particular",
    "start": "832930",
    "end": "834340"
  },
  {
    "text": "node and now the reconciler which is",
    "start": "834340",
    "end": "836620"
  },
  {
    "text": "differing between the desired state in",
    "start": "836620",
    "end": "838210"
  },
  {
    "text": "the actual state notices that there",
    "start": "838210",
    "end": "841240"
  },
  {
    "text": "there is a volume that should be",
    "start": "841240",
    "end": "843250"
  },
  {
    "text": "attached that is not currently attached",
    "start": "843250",
    "end": "845050"
  },
  {
    "text": "as far as it knows so it's going to",
    "start": "845050",
    "end": "847300"
  },
  {
    "text": "trigger an operation against that volume",
    "start": "847300",
    "end": "850300"
  },
  {
    "text": "type to have that volume attached once",
    "start": "850300",
    "end": "853630"
  },
  {
    "text": "that attached operation completes the",
    "start": "853630",
    "end": "856660"
  },
  {
    "text": "attached detached controller will update",
    "start": "856660",
    "end": "858700"
  },
  {
    "text": "its actual state to say I now have a",
    "start": "858700",
    "end": "862270"
  },
  {
    "text": "volume attached to this node now the",
    "start": "862270",
    "end": "864760"
  },
  {
    "text": "reconciler which is a dumb loop is",
    "start": "864760",
    "end": "866890"
  },
  {
    "text": "dipping the desired and actual states",
    "start": "866890",
    "end": "869050"
  },
  {
    "text": "and it says okay they match there's",
    "start": "869050",
    "end": "871180"
  },
  {
    "text": "nothing else that I need to do now if",
    "start": "871180",
    "end": "874950"
  },
  {
    "text": "the volume if the pod is moved to a",
    "start": "874950",
    "end": "878080"
  },
  {
    "text": "different node then that volume needs to",
    "start": "878080",
    "end": "881080"
  },
  {
    "text": "be attached to the to a different node",
    "start": "881080",
    "end": "883060"
  },
  {
    "text": "the desired state again gets updated by",
    "start": "883060",
    "end": "885400"
  },
  {
    "text": "the populate ur and the control loop",
    "start": "885400",
    "end": "888820"
  },
  {
    "text": "notices that there's a difference",
    "start": "888820",
    "end": "890320"
  },
  {
    "text": "between the desired state and the actual",
    "start": "890320",
    "end": "892480"
  },
  {
    "text": "state and so it's going to trigger",
    "start": "892480",
    "end": "894310"
  },
  {
    "text": "another operation to first detach the",
    "start": "894310",
    "end": "897310"
  },
  {
    "text": "disk from the old node because it",
    "start": "897310",
    "end": "898930"
  },
  {
    "text": "notices there's no more need for that",
    "start": "898930",
    "end": "900790"
  },
  {
    "text": "disk on the old node and then it'll",
    "start": "900790",
    "end": "902950"
  },
  {
    "text": "start another operation to attach that",
    "start": "902950",
    "end": "905710"
  },
  {
    "text": "disk to the new node and the reason for",
    "start": "905710",
    "end": "908770"
  },
  {
    "text": "that is because that control loop is",
    "start": "908770",
    "end": "910810"
  },
  {
    "text": "noticing a difference between the",
    "start": "910810",
    "end": "912940"
  },
  {
    "text": "desired and actual state in memory",
    "start": "912940",
    "end": "915550"
  },
  {
    "text": "caches and so these control loops and",
    "start": "915550",
    "end": "918850"
  },
  {
    "text": "these controllers themselves are fairly",
    "start": "918850",
    "end": "921400"
  },
  {
    "text": "simple they're just monitoring the API",
    "start": "921400",
    "end": "923530"
  },
  {
    "text": "server they're keeping track of what the",
    "start": "923530",
    "end": "926410"
  },
  {
    "text": "API server is saying they're observing",
    "start": "926410",
    "end": "928690"
  },
  {
    "text": "the reality on the ground they're",
    "start": "928690",
    "end": "930370"
  },
  {
    "text": "keeping track of that and when that",
    "start": "930370",
    "end": "932410"
  },
  {
    "text": "differs they start operations to make",
    "start": "932410",
    "end": "934750"
  },
  {
    "text": "sure that they are bringing the system",
    "start": "934750",
    "end": "937150"
  },
  {
    "text": "back",
    "start": "937150",
    "end": "937980"
  },
  {
    "text": "into the desired state and so each",
    "start": "937980",
    "end": "940590"
  },
  {
    "text": "component within kubernetes is doing",
    "start": "940590",
    "end": "943500"
  },
  {
    "text": "this the I talked about the volume",
    "start": "943500",
    "end": "945570"
  },
  {
    "text": "attachment controller is doing this to",
    "start": "945570",
    "end": "947250"
  },
  {
    "text": "make sure volumes are attached the",
    "start": "947250",
    "end": "950000"
  },
  {
    "text": "scheduler is making doing this to make",
    "start": "950000",
    "end": "952200"
  },
  {
    "text": "sure all pods are scheduled the replica",
    "start": "952200",
    "end": "955560"
  },
  {
    "text": "set controller is doing this to make",
    "start": "955560",
    "end": "957510"
  },
  {
    "text": "sure that there are always as many",
    "start": "957510",
    "end": "961080"
  },
  {
    "text": "number of pods as requested on a replica",
    "start": "961080",
    "end": "964140"
  },
  {
    "text": "object so when you create a replica set",
    "start": "964140",
    "end": "966930"
  },
  {
    "text": "object you say I want two pods there is",
    "start": "966930",
    "end": "970020"
  },
  {
    "text": "a replica controller which is monitoring",
    "start": "970020",
    "end": "972030"
  },
  {
    "text": "the API server and trying to figure out",
    "start": "972030",
    "end": "974730"
  },
  {
    "text": "how many pods are actually running in",
    "start": "974730",
    "end": "976740"
  },
  {
    "text": "the system all of these controllers more",
    "start": "976740",
    "end": "980250"
  },
  {
    "text": "or less operate in the same way there",
    "start": "980250",
    "end": "982410"
  },
  {
    "text": "are small control loops that are dipping",
    "start": "982410",
    "end": "984300"
  },
  {
    "text": "what the desired state is against what",
    "start": "984300",
    "end": "987060"
  },
  {
    "text": "the actual state is and then triggering",
    "start": "987060",
    "end": "989220"
  },
  {
    "text": "actions to drive towards that state ok",
    "start": "989220",
    "end": "1005440"
  },
  {
    "start": "1000000",
    "end": "1235000"
  },
  {
    "text": "so we talked about controllers and let's",
    "start": "1005440",
    "end": "1010370"
  },
  {
    "text": "walk through another example of",
    "start": "1010370",
    "end": "1011540"
  },
  {
    "text": "automaticall recovery just to drive the",
    "start": "1011540",
    "end": "1013280"
  },
  {
    "text": "point home because this is all about",
    "start": "1013280",
    "end": "1014870"
  },
  {
    "text": "self-healing all the components in",
    "start": "1014870",
    "end": "1018320"
  },
  {
    "text": "kubernetes are using these patterns",
    "start": "1018320",
    "end": "1020240"
  },
  {
    "text": "basically to implement the the",
    "start": "1020240",
    "end": "1023000"
  },
  {
    "text": "self-healing ability so we talked about",
    "start": "1023000",
    "end": "1027020"
  },
  {
    "text": "this example where you had a pod that",
    "start": "1027020",
    "end": "1029300"
  },
  {
    "text": "got scheduled it got started on a node",
    "start": "1029300",
    "end": "1031220"
  },
  {
    "text": "now what if the node dies so I alluded",
    "start": "1031220",
    "end": "1037220"
  },
  {
    "text": "to this earlier but here's a picture of",
    "start": "1037220",
    "end": "1039740"
  },
  {
    "text": "it basically the master also has other",
    "start": "1039740",
    "end": "1042560"
  },
  {
    "text": "components in this case the node",
    "start": "1042560",
    "end": "1044569"
  },
  {
    "text": "controller and the replica controller",
    "start": "1044570",
    "end": "1046630"
  },
  {
    "text": "the node controller monitors for",
    "start": "1046630",
    "end": "1050030"
  },
  {
    "text": "heartbeats from node from from the nodes",
    "start": "1050030",
    "end": "1053000"
  },
  {
    "text": "so periodically about every 10 seconds",
    "start": "1053000",
    "end": "1056450"
  },
  {
    "text": "or so every node every cubelet posts",
    "start": "1056450",
    "end": "1059330"
  },
  {
    "text": "back to the api server on the node api",
    "start": "1059330",
    "end": "1061670"
  },
  {
    "text": "object to say i'm alive i'm alive i'm",
    "start": "1061670",
    "end": "1064460"
  },
  {
    "text": "and the node controller basically",
    "start": "1064460",
    "end": "1067010"
  },
  {
    "text": "monitors the API server for node objects",
    "start": "1067010",
    "end": "1069650"
  },
  {
    "text": "and it looks at when the last keepalive",
    "start": "1069650",
    "end": "1072170"
  },
  {
    "text": "was if it was more than five minutes ago",
    "start": "1072170",
    "end": "1075410"
  },
  {
    "text": "it declares that node dead and evicts",
    "start": "1075410",
    "end": "1077810"
  },
  {
    "text": "the pods on it and so what it does is",
    "start": "1077810",
    "end": "1080720"
  },
  {
    "text": "hey I haven't seen a heartbeat from this",
    "start": "1080720",
    "end": "1084110"
  },
  {
    "text": "particular node for five minutes so let",
    "start": "1084110",
    "end": "1087290"
  },
  {
    "text": "me go ahead and delete all the pod",
    "start": "1087290",
    "end": "1089510"
  },
  {
    "text": "objects on that node because as far as",
    "start": "1089510",
    "end": "1092330"
  },
  {
    "text": "I'm concerned that node must be dead",
    "start": "1092330",
    "end": "1094900"
  },
  {
    "text": "note that this node controller itself is",
    "start": "1094900",
    "end": "1098570"
  },
  {
    "text": "not reaching out to the node to tell it",
    "start": "1098570",
    "end": "1100900"
  },
  {
    "text": "terminate the nodes or reaching out to",
    "start": "1100900",
    "end": "1103580"
  },
  {
    "text": "another node to tell it to start the",
    "start": "1103580",
    "end": "1105950"
  },
  {
    "text": "pods the node controller just talks to",
    "start": "1105950",
    "end": "1109760"
  },
  {
    "text": "the API server it just deletes the pod",
    "start": "1109760",
    "end": "1111800"
  },
  {
    "text": "objects and so once the pod objects are",
    "start": "1111800",
    "end": "1115460"
  },
  {
    "text": "deleted the replicas cook the replicas",
    "start": "1115460",
    "end": "1118850"
  },
  {
    "text": "controller notices that there used to be",
    "start": "1118850",
    "end": "1121390"
  },
  {
    "text": "let's say one instance of the pod",
    "start": "1121390",
    "end": "1124400"
  },
  {
    "text": "running and that's what the user",
    "start": "1124400",
    "end": "1125660"
  },
  {
    "text": "requested but now there's zero the user",
    "start": "1125660",
    "end": "1128330"
  },
  {
    "text": "requested one now there's a zero so",
    "start": "1128330",
    "end": "1130880"
  },
  {
    "text": "it'll create another pod object",
    "start": "1130880",
    "end": "1132920"
  },
  {
    "text": "automatically on behalf of the user to",
    "start": "1132920",
    "end": "1134990"
  },
  {
    "text": "ensure that there's always one running",
    "start": "1134990",
    "end": "1137860"
  },
  {
    "text": "when it creates that pod new pod object",
    "start": "1137860",
    "end": "1140870"
  },
  {
    "text": "the new pod is unscheduled it's just",
    "start": "1140870",
    "end": "1142960"
  },
  {
    "text": "it's a brand new pod and so then the",
    "start": "1142960",
    "end": "1146680"
  },
  {
    "text": "master scheduler which is just another",
    "start": "1146680",
    "end": "1149150"
  },
  {
    "text": "controller which is watching the API",
    "start": "1149150",
    "end": "1153620"
  },
  {
    "text": "server sees a new pod which is currently",
    "start": "1153620",
    "end": "1156170"
  },
  {
    "text": "unscheduled it'll run its algorithm to",
    "start": "1156170",
    "end": "1158660"
  },
  {
    "text": "figure out where that where that where",
    "start": "1158660",
    "end": "1162890"
  },
  {
    "text": "that pod should be placed and it'll",
    "start": "1162890",
    "end": "1164990"
  },
  {
    "text": "update the API server object to schedule",
    "start": "1164990",
    "end": "1167750"
  },
  {
    "text": "that volume or schedule that pod and",
    "start": "1167750",
    "end": "1171460"
  },
  {
    "text": "then finally the new node is going to",
    "start": "1171460",
    "end": "1174650"
  },
  {
    "text": "take over and notice oh I have a pod",
    "start": "1174650",
    "end": "1177470"
  },
  {
    "text": "that should be running on me let me go",
    "start": "1177470",
    "end": "1179120"
  },
  {
    "text": "ahead and get that running now the",
    "start": "1179120",
    "end": "1181280"
  },
  {
    "text": "interesting thing is what happens to the",
    "start": "1181280",
    "end": "1183350"
  },
  {
    "text": "old node it depends on what type of",
    "start": "1183350",
    "end": "1186110"
  },
  {
    "text": "failure happened if it was a network",
    "start": "1186110",
    "end": "1189290"
  },
  {
    "text": "partition then the old node doesn't",
    "start": "1189290",
    "end": "1192590"
  },
  {
    "text": "I can't reach out back to the API server",
    "start": "1192590",
    "end": "1195680"
  },
  {
    "text": "so it",
    "start": "1195680",
    "end": "1196250"
  },
  {
    "text": "doesn't know that the that the old pod",
    "start": "1196250",
    "end": "1200150"
  },
  {
    "text": "was terminated so it'll keep the pod",
    "start": "1200150",
    "end": "1201890"
  },
  {
    "text": "running if the the node can't reach out",
    "start": "1201890",
    "end": "1204770"
  },
  {
    "text": "to the API server it maintains the",
    "start": "1204770",
    "end": "1206870"
  },
  {
    "text": "current status it keeps things running",
    "start": "1206870",
    "end": "1208340"
  },
  {
    "text": "as it lasts odd the observed the desired",
    "start": "1208340",
    "end": "1211550"
  },
  {
    "text": "state to be as soon as that connection",
    "start": "1211550",
    "end": "1214010"
  },
  {
    "text": "is re-established it's going to notice",
    "start": "1214010",
    "end": "1216590"
  },
  {
    "text": "oh the somebody on the master deleted",
    "start": "1216590",
    "end": "1219110"
  },
  {
    "text": "this pod this pod should no longer be",
    "start": "1219110",
    "end": "1221120"
  },
  {
    "text": "running and it'll terminate that pod on",
    "start": "1221120",
    "end": "1224170"
  },
  {
    "text": "the other hand if the failure is just",
    "start": "1224170",
    "end": "1227150"
  },
  {
    "text": "the node is completely unavailable then",
    "start": "1227150",
    "end": "1229790"
  },
  {
    "text": "you don't really have to worry about",
    "start": "1229790",
    "end": "1231170"
  },
  {
    "text": "anything the the node is content and the",
    "start": "1231170",
    "end": "1233840"
  },
  {
    "text": "pod is terminated so let's talk about",
    "start": "1233840",
    "end": "1240650"
  },
  {
    "start": "1235000",
    "end": "1520000"
  },
  {
    "text": "some of the challenges with this kind of",
    "start": "1240650",
    "end": "1243620"
  },
  {
    "text": "model one of the biggest problems is",
    "start": "1243620",
    "end": "1247760"
  },
  {
    "text": "what if the actual state cash drifts",
    "start": "1247760",
    "end": "1251300"
  },
  {
    "text": "from the real world and this is",
    "start": "1251300",
    "end": "1254210"
  },
  {
    "text": "particularly problematic in the storage",
    "start": "1254210",
    "end": "1257150"
  },
  {
    "text": "space so for example the volume",
    "start": "1257150",
    "end": "1262010"
  },
  {
    "text": "attachment controller which is",
    "start": "1262010",
    "end": "1263660"
  },
  {
    "text": "responsible for ensuring that volumes",
    "start": "1263660",
    "end": "1265700"
  },
  {
    "text": "are attached to the correct node could",
    "start": "1265700",
    "end": "1269180"
  },
  {
    "text": "have its actual state skew from what the",
    "start": "1269180",
    "end": "1272360"
  },
  {
    "text": "real world is and what happens in that",
    "start": "1272360",
    "end": "1280820"
  },
  {
    "text": "case basically what that means is for",
    "start": "1280820",
    "end": "1284360"
  },
  {
    "text": "example somebody went behind kubernetes",
    "start": "1284360",
    "end": "1286580"
  },
  {
    "text": "back and detached a volume kubernetes",
    "start": "1286580",
    "end": "1290660"
  },
  {
    "text": "doesn't know about it as far as the",
    "start": "1290660",
    "end": "1292340"
  },
  {
    "text": "attached detached controller is",
    "start": "1292340",
    "end": "1293720"
  },
  {
    "text": "concerned in its in-memory actual state",
    "start": "1293720",
    "end": "1296150"
  },
  {
    "text": "the volume is attached so it's happy so",
    "start": "1296150",
    "end": "1299270"
  },
  {
    "text": "to address issues like this what we do",
    "start": "1299270",
    "end": "1301070"
  },
  {
    "text": "is we add in logic that will",
    "start": "1301070",
    "end": "1306240"
  },
  {
    "text": "rectify the actual state with observed",
    "start": "1306240",
    "end": "1309780"
  },
  {
    "text": "real-world state so for example the",
    "start": "1309780",
    "end": "1312340"
  },
  {
    "text": "actual state this sorry",
    "start": "1312340",
    "end": "1315700"
  },
  {
    "text": "the attached detached controller has",
    "start": "1315700",
    "end": "1317410"
  },
  {
    "text": "logic to periodically poll which volumes",
    "start": "1317410",
    "end": "1320410"
  },
  {
    "text": "are actually attached so it goes through",
    "start": "1320410",
    "end": "1322900"
  },
  {
    "text": "the list of everything in its actual",
    "start": "1322900",
    "end": "1324700"
  },
  {
    "text": "state and says is this attached as this",
    "start": "1324700",
    "end": "1326530"
  },
  {
    "text": "attached is this attached just so that",
    "start": "1326530",
    "end": "1329110"
  },
  {
    "text": "if something becomes unexpectedly",
    "start": "1329110",
    "end": "1331780"
  },
  {
    "text": "detached it can remove it from its",
    "start": "1331780",
    "end": "1334270"
  },
  {
    "text": "actual state and reissue the attached to",
    "start": "1334270",
    "end": "1336220"
  },
  {
    "text": "make sure everything is okay",
    "start": "1336220",
    "end": "1338290"
  },
  {
    "text": "most controllers should be doing this in",
    "start": "1338290",
    "end": "1340780"
  },
  {
    "text": "order to make sure that what they think",
    "start": "1340780",
    "end": "1343419"
  },
  {
    "text": "the reality is doesn't skew from actual",
    "start": "1343419",
    "end": "1345370"
  },
  {
    "text": "reality but not all controllers do and",
    "start": "1345370",
    "end": "1349080"
  },
  {
    "text": "one example of this is the volume mount",
    "start": "1349080",
    "end": "1353230"
  },
  {
    "text": "code so there is a controller a volume",
    "start": "1353230",
    "end": "1355960"
  },
  {
    "text": "manager on the cubelet which is",
    "start": "1355960",
    "end": "1358600"
  },
  {
    "text": "responsible for ensuring that volumes",
    "start": "1358600",
    "end": "1361390"
  },
  {
    "text": "are mounted into the correct places to",
    "start": "1361390",
    "end": "1364210"
  },
  {
    "text": "make them available inside the container",
    "start": "1364210",
    "end": "1366240"
  },
  {
    "text": "now the problem is that the controller",
    "start": "1366240",
    "end": "1371650"
  },
  {
    "text": "can lose its state right if the",
    "start": "1371650",
    "end": "1373660"
  },
  {
    "text": "controller crashes this is all in memory",
    "start": "1373660",
    "end": "1376960"
  },
  {
    "text": "state all of that state is gone now when",
    "start": "1376960",
    "end": "1379809"
  },
  {
    "text": "the controller starts again it needs to",
    "start": "1379809",
    "end": "1382240"
  },
  {
    "text": "rebuild from a source of truth for most",
    "start": "1382240",
    "end": "1385390"
  },
  {
    "text": "controllers the simple ones the source",
    "start": "1385390",
    "end": "1387910"
  },
  {
    "text": "of truth is the kubernetes api server",
    "start": "1387910",
    "end": "1389830"
  },
  {
    "text": "and that's sufficient but for some",
    "start": "1389830",
    "end": "1392350"
  },
  {
    "text": "controllers they need additional",
    "start": "1392350",
    "end": "1393850"
  },
  {
    "text": "information and so for example for the",
    "start": "1393850",
    "end": "1396640"
  },
  {
    "text": "volume manager it needs to determine",
    "start": "1396640",
    "end": "1400080"
  },
  {
    "text": "which mounts actually exist on the",
    "start": "1400080",
    "end": "1403660"
  },
  {
    "text": "machine and then figure out if those",
    "start": "1403660",
    "end": "1406630"
  },
  {
    "text": "mounts are actually desired and now",
    "start": "1406630",
    "end": "1409419"
  },
  {
    "text": "based on the way that it was initially",
    "start": "1409419",
    "end": "1411340"
  },
  {
    "text": "coded the it has the the controller the",
    "start": "1411340",
    "end": "1415570"
  },
  {
    "text": "volume manager controller has",
    "start": "1415570",
    "end": "1416860"
  },
  {
    "text": "insufficient information so if a volume",
    "start": "1416860",
    "end": "1421840"
  },
  {
    "text": "let's say a node becomes unavailable",
    "start": "1421840",
    "end": "1424840"
  },
  {
    "text": "there's a network partition the pod gets",
    "start": "1424840",
    "end": "1427660"
  },
  {
    "text": "deleted and at the same time cubelet",
    "start": "1427660",
    "end": "1430990"
  },
  {
    "text": "crashes the pod gets deleted the cubelet",
    "start": "1430990",
    "end": "1436000"
  },
  {
    "text": "crashes and then everything comes back",
    "start": "1436000",
    "end": "1438010"
  },
  {
    "text": "up the No",
    "start": "1438010",
    "end": "1438860"
  },
  {
    "text": "hasn't restarted so the mount still",
    "start": "1438860",
    "end": "1440780"
  },
  {
    "text": "exists but the pod has been deleted on",
    "start": "1440780",
    "end": "1445520"
  },
  {
    "text": "the API server so you can't use that as",
    "start": "1445520",
    "end": "1447440"
  },
  {
    "text": "your source of truth and the only thing",
    "start": "1447440",
    "end": "1451700"
  },
  {
    "text": "that exists is this orphan mount on on",
    "start": "1451700",
    "end": "1454190"
  },
  {
    "text": "the on the host in the past what used to",
    "start": "1454190",
    "end": "1459470"
  },
  {
    "text": "happen was that those were not cleaned",
    "start": "1459470",
    "end": "1461330"
  },
  {
    "text": "up at all and then starting in about to",
    "start": "1461330",
    "end": "1464240"
  },
  {
    "text": "Burnett he's 1.5 there was logic added",
    "start": "1464240",
    "end": "1466490"
  },
  {
    "text": "to try to clean up those orphan mounts",
    "start": "1466490",
    "end": "1469309"
  },
  {
    "text": "the problem is that the only information",
    "start": "1469309",
    "end": "1472100"
  },
  {
    "text": "we had was the information in the path",
    "start": "1472100",
    "end": "1474650"
  },
  {
    "text": "for the volume mount and that would",
    "start": "1474650",
    "end": "1477140"
  },
  {
    "text": "include for example the volume",
    "start": "1477140",
    "end": "1478700"
  },
  {
    "text": "identifier but sometimes if there",
    "start": "1478700",
    "end": "1481700"
  },
  {
    "text": "wouldn't be enough information to",
    "start": "1481700",
    "end": "1483169"
  },
  {
    "text": "actually do a clean unmount and so this",
    "start": "1483169",
    "end": "1486320"
  },
  {
    "text": "code that does the reconstruction of",
    "start": "1486320",
    "end": "1489380"
  },
  {
    "text": "volume mounts and cleanup if a mount is",
    "start": "1489380",
    "end": "1492530"
  },
  {
    "text": "orphaned is actually a source of a lot",
    "start": "1492530",
    "end": "1494330"
  },
  {
    "text": "of bugs for us it's something that we're",
    "start": "1494330",
    "end": "1497030"
  },
  {
    "text": "looking to fix and so with our new",
    "start": "1497030",
    "end": "1499040"
  },
  {
    "text": "container storage interface",
    "start": "1499040",
    "end": "1500990"
  },
  {
    "text": "implementation what we did is instead of",
    "start": "1500990",
    "end": "1503780"
  },
  {
    "text": "just having a volume mount we also have",
    "start": "1503780",
    "end": "1507080"
  },
  {
    "text": "a file that is persisted in addition to",
    "start": "1507080",
    "end": "1510049"
  },
  {
    "text": "the volume mount and that allows us to",
    "start": "1510049",
    "end": "1515919"
  },
  {
    "text": "do proper reconciliation and clean up",
    "start": "1515919",
    "end": "1520190"
  },
  {
    "start": "1520000",
    "end": "1679000"
  },
  {
    "text": "any orphan mounts as needed now the last",
    "start": "1520190",
    "end": "1525830"
  },
  {
    "text": "challenge I want to talk about is",
    "start": "1525830",
    "end": "1529390"
  },
  {
    "text": "eventual consistency can take a long",
    "start": "1530110",
    "end": "1532700"
  },
  {
    "text": "time and what I mean by this is let's",
    "start": "1532700",
    "end": "1537230"
  },
  {
    "text": "take a the node shutdown example if a",
    "start": "1537230",
    "end": "1541490"
  },
  {
    "text": "node shuts down unexpectedly it will",
    "start": "1541490",
    "end": "1544730"
  },
  {
    "text": "take the node controller five minutes to",
    "start": "1544730",
    "end": "1547340"
  },
  {
    "text": "declare that node dead and after five",
    "start": "1547340",
    "end": "1550790"
  },
  {
    "text": "minutes it's going to delete the pods",
    "start": "1550790",
    "end": "1553240"
  },
  {
    "text": "after that when the pods are deleted the",
    "start": "1553240",
    "end": "1556700"
  },
  {
    "text": "volume attached controller is going to",
    "start": "1556700",
    "end": "1558740"
  },
  {
    "text": "try to detach the volumes that were on",
    "start": "1558740",
    "end": "1561260"
  },
  {
    "text": "that node used by those pods but the",
    "start": "1561260",
    "end": "1565340"
  },
  {
    "text": "volume attachment controller tries to be",
    "start": "1565340",
    "end": "1567440"
  },
  {
    "text": "as safe as possible when it is",
    "start": "1567440",
    "end": "1571320"
  },
  {
    "text": "trying to detach so it waits for a",
    "start": "1571320",
    "end": "1573390"
  },
  {
    "text": "signal from the node to say that it has",
    "start": "1573390",
    "end": "1575760"
  },
  {
    "text": "safely unmounted the volume before it",
    "start": "1575760",
    "end": "1577740"
  },
  {
    "text": "detaches it but it also doesn't want to",
    "start": "1577740",
    "end": "1580740"
  },
  {
    "text": "get stuck if the node is an unhealthy",
    "start": "1580740",
    "end": "1582720"
  },
  {
    "text": "state eventually it will unilaterally",
    "start": "1582720",
    "end": "1586170"
  },
  {
    "text": "detach the disk and that timeout is six",
    "start": "1586170",
    "end": "1589200"
  },
  {
    "text": "minutes so it'll wait six minutes to",
    "start": "1589200",
    "end": "1591210"
  },
  {
    "text": "hear from the node if it doesn't it",
    "start": "1591210",
    "end": "1593220"
  },
  {
    "text": "assumes that the node is dead and then",
    "start": "1593220",
    "end": "1595170"
  },
  {
    "text": "it pulls the disk and then the volume is",
    "start": "1595170",
    "end": "1598380"
  },
  {
    "text": "free to be attached and the new pod can",
    "start": "1598380",
    "end": "1600690"
  },
  {
    "text": "come up and get started so overall",
    "start": "1600690",
    "end": "1602850"
  },
  {
    "text": "you're looking at over ten minutes to",
    "start": "1602850",
    "end": "1604740"
  },
  {
    "text": "get to recover from a failure that's",
    "start": "1604740",
    "end": "1608880"
  },
  {
    "text": "pretty bad but what you need to",
    "start": "1608880",
    "end": "1612960"
  },
  {
    "text": "understand is that kubernetes gives you",
    "start": "1612960",
    "end": "1615240"
  },
  {
    "text": "automatic recovery not high availability",
    "start": "1615240",
    "end": "1617760"
  },
  {
    "text": "this is a very key point that I think a",
    "start": "1617760",
    "end": "1620610"
  },
  {
    "text": "lot of people don't understand the",
    "start": "1620610",
    "end": "1622530"
  },
  {
    "text": "promise of kubernetes is not high",
    "start": "1622530",
    "end": "1624630"
  },
  {
    "text": "availability it's the promise is that",
    "start": "1624630",
    "end": "1627240"
  },
  {
    "text": "the system will eventually recover there",
    "start": "1627240",
    "end": "1631290"
  },
  {
    "text": "are no guarantees on how long it's going",
    "start": "1631290",
    "end": "1633780"
  },
  {
    "text": "to take to recover and if you have",
    "start": "1633780",
    "end": "1638180"
  },
  {
    "text": "requirements for high availability then",
    "start": "1638180",
    "end": "1641070"
  },
  {
    "text": "you need to build those into your",
    "start": "1641070",
    "end": "1643110"
  },
  {
    "text": "application layer you need to make sure",
    "start": "1643110",
    "end": "1645480"
  },
  {
    "text": "that you are not dependent on a single",
    "start": "1645480",
    "end": "1648030"
  },
  {
    "text": "pod as your single point of failure",
    "start": "1648030",
    "end": "1651050"
  },
  {
    "text": "because when that pod goes down there is",
    "start": "1651050",
    "end": "1653610"
  },
  {
    "text": "no guarantee for how long it takes to",
    "start": "1653610",
    "end": "1655350"
  },
  {
    "text": "get that pod up and running if you have",
    "start": "1655350",
    "end": "1658110"
  },
  {
    "text": "an application that desires high",
    "start": "1658110",
    "end": "1660930"
  },
  {
    "text": "availability make sure you're using",
    "start": "1660930",
    "end": "1662790"
  },
  {
    "text": "multiple pods and that is my last point",
    "start": "1662790",
    "end": "1669960"
  },
  {
    "text": "thank you very much any questions",
    "start": "1669960",
    "end": "1673460"
  },
  {
    "text": "you",
    "start": "1678380",
    "end": "1680440"
  }
]