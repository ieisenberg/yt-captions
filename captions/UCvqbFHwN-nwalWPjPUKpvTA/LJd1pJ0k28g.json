[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "all right it's 4:30 thank you all for being here um this is Prometheus and",
    "start": "240",
    "end": "5560"
  },
  {
    "text": "open Telemetry better together and we're really excited so before we start a",
    "start": "5560",
    "end": "12000"
  },
  {
    "text": "couple brief introductions of ourselves yes hello my name is Adriana Vela and I",
    "start": "12000",
    "end": "19840"
  },
  {
    "text": "am a cncf Ambassador I am a uh hashy Corp Ambassador a blogger podcaster my",
    "start": "19840",
    "end": "28000"
  },
  {
    "text": "day job is as a senior staff developer Advocate at service now Cloud observability the artist formerly known",
    "start": "28000",
    "end": "34480"
  },
  {
    "text": "as light step um by night I like to climb walls and fun fact I really love",
    "start": "34480",
    "end": "40320"
  },
  {
    "text": "capy badas as you can see from my t-shirt and I am ree Lee I'm a senior",
    "start": "40320",
    "end": "46600"
  },
  {
    "text": "developer relations engineer at New Relic I work with the inimitable Adriana",
    "start": "46600",
    "end": "52760"
  },
  {
    "text": "on the open tump end user working group where we are focused on connecting end users to each other through events and",
    "start": "52760",
    "end": "58920"
  },
  {
    "text": "enablement content and we are also focused on creating a feedback loop between end users and maintainers to",
    "start": "58920",
    "end": "64960"
  },
  {
    "text": "help improve the project and drive adoption and my fun fact is I love anything spooky and",
    "start": "64960",
    "end": "72200"
  },
  {
    "text": "paranormal so open Telemetry and pereus they both help us monitor the",
    "start": "72520",
    "end": "79360"
  },
  {
    "text": "health and U performance of our distribut systems they're both cncf open",
    "start": "79360",
    "end": "84439"
  },
  {
    "text": "source projects but what role do they each play in observability",
    "start": "84439",
    "end": "90720"
  },
  {
    "text": "so open Telemetry or oel for short is a vendor neutral observably framework and",
    "start": "90720",
    "end": "96079"
  },
  {
    "text": "standard for um generating processing and exporting data Prometheus has been a",
    "start": "96079",
    "end": "101960"
  },
  {
    "text": "fixture of the observability landscape for years it's widely relied upon um by many organizations for monitoring and um",
    "start": "101960",
    "end": "110640"
  },
  {
    "text": "alerting and both Prometheus and open Telemetry whoops um generate metrics but",
    "start": "110640",
    "end": "118920"
  },
  {
    "text": "the topic of similarities and differences between open TM metrics and Prometheus metrics is a vast topic it",
    "start": "118920",
    "end": "125719"
  },
  {
    "text": "deserves its own session what we're going to talk about is how these two projects support each other and we're",
    "start": "125719",
    "end": "131160"
  },
  {
    "text": "going to show you how we're going to show you the interoperability between these two",
    "start": "131160",
    "end": "137640"
  },
  {
    "text": "projects so while you can Mo uh you can use Prometheus to monitor a wide variety",
    "start": "139599",
    "end": "144680"
  },
  {
    "text": "of um application infrastructure metrics the piece that we're going to focus on is cuber dates",
    "start": "144680",
    "end": "152239"
  },
  {
    "text": "monitoring so um oh and that's because it's arguably one of its most wide use",
    "start": "152239",
    "end": "159840"
  },
  {
    "text": "one of the widest use cases um that's why we're going to be focusing on that so first we're going to start by",
    "start": "159840",
    "end": "166159"
  },
  {
    "text": "learning about a few open t collector components you can use to collect Prometheus",
    "start": "166159",
    "end": "172680"
  },
  {
    "text": "metrics um next we'll talk about the target uh Target allocator and how it",
    "start": "172680",
    "end": "178640"
  },
  {
    "text": "can be used for sharting and and Prometheus service Discovery followed by a",
    "start": "178640",
    "end": "184560"
  },
  {
    "text": "demo then we'll talk about some additional openet components you can use to collect um kubernetes data and",
    "start": "184560",
    "end": "194080"
  },
  {
    "text": "finally we will do a wrapup where we'll talk about some of the pros and cons of the setup that we demoed um and also",
    "start": "194080",
    "end": "199599"
  },
  {
    "text": "talk about some of the stuff that Prometheus um is doing on their",
    "start": "199599",
    "end": "204920"
  },
  {
    "text": "end so let's learn about Prometheus metrics with open telemetry",
    "start": "205000",
    "end": "210760"
  },
  {
    "text": "as a brief refresher The openc Collector is a vendor neutral Standalone service",
    "start": "210760",
    "end": "216159"
  },
  {
    "text": "it's used for ingesting data uh so receivers you can transform that data",
    "start": "216159",
    "end": "223000"
  },
  {
    "text": "with a number of processors so you can do stuff like filtering redacting um sampling batching and finally you can",
    "start": "223000",
    "end": "230920"
  },
  {
    "text": "use it to export your data to multiple um backends of your",
    "start": "230920",
    "end": "236439"
  },
  {
    "text": "choice so for example you can use a almost forgot there there's additional",
    "start": "236439",
    "end": "241879"
  },
  {
    "text": "functionality um you can also use connectors as well as um health check",
    "start": "241879",
    "end": "248159"
  },
  {
    "text": "extensions so you can use for example PR Prometheus sdks to generate metrics",
    "start": "248159",
    "end": "253239"
  },
  {
    "text": "ingest them with an openm to collector and then do processing as applicable and",
    "start": "253239",
    "end": "259199"
  },
  {
    "text": "then for them to your back end before we get too far and let's also",
    "start": "259199",
    "end": "264560"
  },
  {
    "text": "do a brief refresher on Prometheus so for those that are less familiar with Prometheus",
    "start": "264560",
    "end": "270240"
  },
  {
    "text": "it is it encompasses U many things including a server and a data format so",
    "start": "270240",
    "end": "277960"
  },
  {
    "text": "the Prometheus server collects metrics from targets defined in a configuration",
    "start": "277960",
    "end": "283199"
  },
  {
    "text": "file with Target being an endpoint that exposes metrics for Prometheus server to",
    "start": "283199",
    "end": "289280"
  },
  {
    "text": "store Prometheus data is stored as a dimensional time series meaning that it has attributes and a",
    "start": "289280",
    "end": "297720"
  },
  {
    "text": "timestamp so let's also talk a little bit about how Prometheus and open Telemetry are",
    "start": "298639",
    "end": "304000"
  },
  {
    "text": "different open Telemetry is primarily focused on the instrumentation piece so it does not come with a backend you",
    "start": "304000",
    "end": "310280"
  },
  {
    "text": "still have to forward that data onto a um observably backend for storage caring",
    "start": "310280",
    "end": "317960"
  },
  {
    "text": "alerting and so on and on the other hand Prometheus provides a Time series data",
    "start": "317960",
    "end": "324560"
  },
  {
    "text": "store you can use for your Prometheus metrics in addition to instrumentation clients",
    "start": "324560",
    "end": "330600"
  },
  {
    "text": "um you can also view graphs and charts query and set up alerts using its web UI and it also compasses a data format",
    "start": "330600",
    "end": "338120"
  },
  {
    "text": "known as Prometheus text based Exposition format um I should also not",
    "start": "338120",
    "end": "343720"
  },
  {
    "text": "that open Telemetry also generates uh traces and logs whereas Prometheus is for",
    "start": "343720",
    "end": "348960"
  },
  {
    "text": "metrics so those are kind of the more High Lev big differences so getting back",
    "start": "348960",
    "end": "355520"
  },
  {
    "text": "to the open Li collector components we're going to start with a Prometheus receiver this component",
    "start": "355520",
    "end": "362319"
  },
  {
    "text": "allows you to collect metrics from any software that exposes Prometheus metrics",
    "start": "362319",
    "end": "367800"
  },
  {
    "text": "it serves as a drop in replacement for Prometheus to scrape your services um it",
    "start": "367800",
    "end": "373880"
  },
  {
    "text": "also supports the full set of configurations in scrape config and if you're interested in",
    "start": "373880",
    "end": "380039"
  },
  {
    "text": "exemplars which is a recorded value that Associates open TM context with a metric",
    "start": "380039",
    "end": "386000"
  },
  {
    "text": "event you can use this um receiver to injust them in the Prometheus format",
    "start": "386000",
    "end": "392639"
  },
  {
    "text": "convert it to OTP format and that allows you to correlate U your traces with",
    "start": "392639",
    "end": "400520"
  },
  {
    "text": "metrics for exporting your metrics from um The Collector to Prometheus you",
    "start": "400919",
    "end": "409560"
  },
  {
    "text": "can use so you have two options one of them is the Prometheus",
    "start": "409560",
    "end": "415520"
  },
  {
    "text": "exporter which allows you to ship data in the Prometheus formats it is used to report metrics via the Prometheus scrape",
    "start": "415520",
    "end": "422160"
  },
  {
    "text": "HTT and point however because all the metrics are sent in a single scrape um it means",
    "start": "422160",
    "end": "428520"
  },
  {
    "text": "the scraping won't really scale and we can take a look at kind of why",
    "start": "428520",
    "end": "435639"
  },
  {
    "text": "so this is the architecture um when you use this",
    "start": "435639",
    "end": "440680"
  },
  {
    "text": "exporter taken from the very helpful gra blog post",
    "start": "440680",
    "end": "445960"
  },
  {
    "text": "and as you can see all the metrics that are exposed by multiple apps are exposed in a single end point so this means it's",
    "start": "445960",
    "end": "453280"
  },
  {
    "text": "exposing a huge amount of data which makes scraping inefficient because the load is not evenly distributed across",
    "start": "453280",
    "end": "459680"
  },
  {
    "text": "time but there's a huge ingest Spike at every scrape interval also if you try to low balance",
    "start": "459680",
    "end": "468039"
  },
  {
    "text": "the OTL requests among a pool of collectors um it's likely that metrics are going to be available in every",
    "start": "468039",
    "end": "473560"
  },
  {
    "text": "single collector so that also makes scraping hard as well you can use perome",
    "start": "473560",
    "end": "479879"
  },
  {
    "text": "this remote ride exporter instead so this will help you get around the scaling issue and we'll look at um what",
    "start": "479879",
    "end": "485759"
  },
  {
    "text": "the in the architecture looks like in a second um but it allows you to push data",
    "start": "485759",
    "end": "491520"
  },
  {
    "text": "to PR me these from multiple collector instances with no issues additionally since Prometheus",
    "start": "491520",
    "end": "498360"
  },
  {
    "text": "accepts remote right um ingestion you can also use this exporter if you're generating open t metrics and you want",
    "start": "498360",
    "end": "504560"
  },
  {
    "text": "to ship them to a backend that is compatible with uh Prometheus remote rate",
    "start": "504560",
    "end": "511120"
  },
  {
    "text": "so here's what the architecture looks like with the promotheus remote right [Music]",
    "start": "511120",
    "end": "517370"
  },
  {
    "text": "exporter and now I'm going to turn it to Adriana who's going to teach us about the target allocator awesome thank you",
    "start": "518719",
    "end": "525880"
  },
  {
    "start": "519000",
    "end": "663000"
  },
  {
    "text": "okay Target allocator well here's the deal Prometheus we love it but it's not",
    "start": "525880",
    "end": "531240"
  },
  {
    "text": "perfect it does have its fair share of challenges so for example um it",
    "start": "531240",
    "end": "536360"
  },
  {
    "text": "experiences some challenges when it comes to things like performance ments and uh resource allocation resource",
    "start": "536360",
    "end": "542720"
  },
  {
    "text": "usage especially when we're starting to increase the number of metrics that are being",
    "start": "542720",
    "end": "547839"
  },
  {
    "text": "consumed now one way to get around this is through sharting where we basically have a number of Prometheus instances uh",
    "start": "547839",
    "end": "555959"
  },
  {
    "text": "that basically each instance has a set of metrics that it's going to ingest based on a set of rules awesome but it",
    "start": "555959",
    "end": "564079"
  },
  {
    "text": "that it has its own Fair uh set of challenges so for example we have um",
    "start": "564079",
    "end": "570240"
  },
  {
    "text": "problem with uh with resource it can be resource intensive so for example um if",
    "start": "570240",
    "end": "575320"
  },
  {
    "text": "you want to do the sharding thing it means that you need say you have um three Prometheus uh workers now in order",
    "start": "575320",
    "end": "582320"
  },
  {
    "text": "to manage this you do need a management instance of Prometheus so now you've got four instances because you've got your",
    "start": "582320",
    "end": "587959"
  },
  {
    "text": "management instance on top of that say um say you have so basically your",
    "start": "587959",
    "end": "593640"
  },
  {
    "text": "management instance requires as much memory as the combination of your worker instances so for example if you have",
    "start": "593640",
    "end": "601120"
  },
  {
    "text": "three workers and they're all combined total using 300 gigs of RAM then your um",
    "start": "601120",
    "end": "608079"
  },
  {
    "text": "your M your uh management instance requires 300 gigs of RAM as well so now all of a sudden you've doubled your",
    "start": "608079",
    "end": "614560"
  },
  {
    "text": "memory requirements which can be a little problematic now if you want to avoid that you just pair down to one single Prometheus instance your memory",
    "start": "614560",
    "end": "621519"
  },
  {
    "text": "requirements have haved but now you don't have the um uh you don't have the",
    "start": "621519",
    "end": "626560"
  },
  {
    "text": "resiliency that you would have from having multiple Prometheus instances so now another area where it",
    "start": "626560",
    "end": "633040"
  },
  {
    "text": "can be challenging is with uh even distribution of targets so by default",
    "start": "633040",
    "end": "640200"
  },
  {
    "text": "Prometheus will scrape targets regardless of whether or not they are dropped so that means that say we have",
    "start": "640200",
    "end": "646160"
  },
  {
    "text": "three Prometheus instances now say each one of them uh scrapes 500 targets but",
    "start": "646160",
    "end": "651680"
  },
  {
    "text": "one might drop all Targets except 10 one might drop half of its targets and one might drop none so now you have this uh",
    "start": "651680",
    "end": "658760"
  },
  {
    "text": "imbalance in terms of what's being ingested by each instance So Sad Panda what do we do",
    "start": "658760",
    "end": "666240"
  },
  {
    "start": "663000",
    "end": "916000"
  },
  {
    "text": "in that case well fortunately we have Prometheus sorry we have the otel target",
    "start": "666240",
    "end": "671399"
  },
  {
    "text": "allocator to the rescue and you might be wondering okay what is the otel target",
    "start": "671399",
    "end": "677880"
  },
  {
    "text": "allocator so the target allocator does a few things for us for well so first of",
    "start": "677880",
    "end": "684279"
  },
  {
    "text": "all it is a part of the otel operator but what is the otel operator",
    "start": "684279",
    "end": "690040"
  },
  {
    "text": "so the otel operator does a few things one is collector management so it manages the deployment of collectors but",
    "start": "690040",
    "end": "696720"
  },
  {
    "text": "it also manages the configuration of a fleet of collectors through the opamp so there is opamp integration and we also",
    "start": "696720",
    "end": "704320"
  },
  {
    "text": "have another component of the otel operator which is auto instrumentation management now for the purposes of this",
    "start": "704320",
    "end": "711200"
  },
  {
    "text": "talk we're going to be focusing on the part that really talks about uh managing the deployment of collectors and this is",
    "start": "711200",
    "end": "717160"
  },
  {
    "text": "supported by a custom resource in the operation called the open Telemetry collector custom resource and the target",
    "start": "717160",
    "end": "723639"
  },
  {
    "text": "allocator is part of this so This basically means that the target allocator is only available via the otel",
    "start": "723639",
    "end": "731200"
  },
  {
    "text": "operator so even though it is a part of the otel collector it's only via the operator so what is the Target allocator",
    "start": "731200",
    "end": "739440"
  },
  {
    "text": "now the target allocator what it does is it decouples the service Discovery and",
    "start": "739440",
    "end": "744959"
  },
  {
    "text": "Metric collection functions of Prometheus where we have the Lector which manages Prometheus metrics without",
    "start": "744959",
    "end": "753000"
  },
  {
    "text": "requiring us to install Prometheus which ree alluded to earlier we have the",
    "start": "753000",
    "end": "758079"
  },
  {
    "text": "target allocator which then manages the configuration of the collector's Prometheus receiver in some",
    "start": "758079",
    "end": "765160"
  },
  {
    "text": "cases so then the target allocator basically serves two functions we have",
    "start": "765160",
    "end": "770639"
  },
  {
    "text": "the even distribution of Prometheus targets and we have the discovery of",
    "start": "770639",
    "end": "775800"
  },
  {
    "text": "Prometheus custom resources Prometheus operator custom resources now let's dig into each of these to see",
    "start": "775800",
    "end": "782680"
  },
  {
    "text": "how they work now I have to admit I was kind of scared of the Target allocator when I first heard of it um but you know",
    "start": "782680",
    "end": "789519"
  },
  {
    "text": "what once you see this you'll be like oh cool okay so how does it work first we have the Target allocator and it goes",
    "start": "789519",
    "end": "796120"
  },
  {
    "text": "out to see okay what metrics are available for scraping and then it goes",
    "start": "796120",
    "end": "801240"
  },
  {
    "text": "hey what collectors are available to scrape metrics then it decides which",
    "start": "801240",
    "end": "807120"
  },
  {
    "text": "collectors scrape what metrics so then the collectors go to the Target allocator and go cool um can you tell me",
    "start": "807120",
    "end": "814880"
  },
  {
    "text": "what metrics I'm supposed to scrape and finally The Collector goes and scrapes those metrics once I figured that out",
    "start": "814880",
    "end": "822600"
  },
  {
    "text": "I'm like oh my God it's not so scary now um I want to do a little bit of level setting because if you're new to",
    "start": "822600",
    "end": "828839"
  },
  {
    "text": "Prometheus like I am targets and scrapes like what so a Target is basically an",
    "start": "828839",
    "end": "835079"
  },
  {
    "text": "endpoint that supplies metrics for the Prometheus tool to store and then a scrape is essentially the",
    "start": "835079",
    "end": "842279"
  },
  {
    "text": "action of collecting metrics through HTTP request from a targeted instance parsing the response and ignoring sorry",
    "start": "842279",
    "end": "849839"
  },
  {
    "text": "ingesting the collected targets to uh collected samples to storage now let's look at the other",
    "start": "849839",
    "end": "856160"
  },
  {
    "text": "functionality of the target allocator which is the discovery of Prometheus operator custom resources now in",
    "start": "856160",
    "end": "862880"
  },
  {
    "text": "particular we care about two custom resources we have the Pod Monitor and the service Monitor and these are part",
    "start": "862880",
    "end": "870160"
  },
  {
    "text": "of the Prometheus operator and essentially what they do is they say okay if a pod or a service matches the",
    "start": "870160",
    "end": "877720"
  },
  {
    "text": "set of criteria we're going to scrap metrics from them so then you have the target allocator which will discover the",
    "start": "877720",
    "end": "884959"
  },
  {
    "text": "uh Prometheus operator custom resource they'll go into your kubernetes cluster and say okay um are there any pod",
    "start": "884959",
    "end": "890839"
  },
  {
    "text": "monitors or service monitors around cool then we'll add the job to the Target",
    "start": "890839",
    "end": "896279"
  },
  {
    "text": "allocator scrape configuration so we convert that information into uh Prometheus scrape configurations for the",
    "start": "896279",
    "end": "903120"
  },
  {
    "text": "Target allocator and then finally the target allocator goes and says okay my",
    "start": "903120",
    "end": "908480"
  },
  {
    "text": "collector buddies these are the scrape configurations that I am going to distribute to you so you can scrape",
    "start": "908480",
    "end": "914440"
  },
  {
    "text": "these metric all right so now that we've got the theory let's talk about this in",
    "start": "914440",
    "end": "922800"
  },
  {
    "start": "916000",
    "end": "1266000"
  },
  {
    "text": "practice so um we're going to do a little demo it is not a live demo",
    "start": "922800",
    "end": "928120"
  },
  {
    "text": "because don't believe that live demos ever work out for me so it's pre-recorded but it's live narrated um",
    "start": "928120",
    "end": "935839"
  },
  {
    "text": "the application is a simple python application it's made of of a couple of services but we're going to focus on one",
    "start": "935839",
    "end": "942440"
  },
  {
    "text": "in particular it is basically a python app that emits Prometheus metrics to be",
    "start": "942440",
    "end": "947519"
  },
  {
    "text": "ingested by an otel collector and with the help of the target allocator it is going to then um emit these metrics as",
    "start": "947519",
    "end": "955720"
  },
  {
    "text": "OTL metrics just to the collector's standard out so we'll be using the logging exporter and because we are",
    "start": "955720",
    "end": "962440"
  },
  {
    "text": "using the otel operator for this we're going to be running this lovely setup in kubernetes so um I'm going to be running",
    "start": "962440",
    "end": "969800"
  },
  {
    "text": "basically the O so the open Telemetry collector custom resource um when when",
    "start": "969800",
    "end": "975440"
  },
  {
    "text": "you deploy that to kubernetes it basically spins up um an otel collector",
    "start": "975440",
    "end": "980600"
  },
  {
    "text": "and a Target allocator and I've just said okay we're going to run this in a name space called open Telemetry you can",
    "start": "980600",
    "end": "986279"
  },
  {
    "text": "call it Bob doesn't really matter and also our little python app is going to be running in that same namespace the um",
    "start": "986279",
    "end": "993240"
  },
  {
    "text": "open Telemetry operator runs in its own namespace which is um open Telemetry operator system so let's dig into some",
    "start": "993240",
    "end": "1001480"
  },
  {
    "text": "of the code that is going to make this happen over here you have what it a",
    "start": "1001480",
    "end": "1006680"
  },
  {
    "text": "sample piece of code for the open Telemetry collector custom resource and if you scan this QR code you can see",
    "start": "1006680",
    "end": "1012399"
  },
  {
    "text": "what all of these different attributes mean I'm going to focus on uh some very specific ones so first we have our name",
    "start": "1012399",
    "end": "1019680"
  },
  {
    "text": "space so as I said this thing is running the open Telemetry name space next we have our mode so the open Telemetry",
    "start": "1019680",
    "end": "1027240"
  },
  {
    "text": "collector can run in four modes we have deployment sidecar demon set and St",
    "start": "1027240",
    "end": "1032880"
  },
  {
    "text": "stateful set now the target if you want to use the target allocator it runs on all the modes except for",
    "start": "1032880",
    "end": "1039480"
  },
  {
    "text": "sidecar um now in addition to that we have our Target allocator configuration section and this bottom part which if it",
    "start": "1039480",
    "end": "1046480"
  },
  {
    "text": "looks familiar it's because it's the otel um collector config Amel now moving on to zoom in a little",
    "start": "1046480",
    "end": "1053799"
  },
  {
    "text": "bit more um so as I said this is the target allocator config section and it's not just a matter of just popping it",
    "start": "1053799",
    "end": "1060760"
  },
  {
    "text": "into your open Telemetry collector CR and Away you go you actually have to enable it and on top of that because the",
    "start": "1060760",
    "end": "1068679"
  },
  {
    "text": "target allocator is responsible for basically creating those Prometheus scrape configurations um for the",
    "start": "1068679",
    "end": "1074360"
  },
  {
    "text": "Prometheus receiver the Prometheus receiver needs to be made aware of the fact that the target allocator exists",
    "start": "1074360",
    "end": "1082000"
  },
  {
    "text": "and so we have to Define uh we have to specify the endpoint for the Target allocator now the way that that endpoint",
    "start": "1082000",
    "end": "1088720"
  },
  {
    "text": "uh is uh expressed is basically the name of our um open Telemetry collector uh in",
    "start": "1088720",
    "end": "1096640"
  },
  {
    "text": "instance plus the dash Target allocator suffix to give us",
    "start": "1096640",
    "end": "1103400"
  },
  {
    "text": "this next um if we want to be able to use the Prometheus custom resource",
    "start": "1103400",
    "end": "1108480"
  },
  {
    "text": "discovery we have to enable that explicitly um with this little bit of",
    "start": "1108480",
    "end": "1114120"
  },
  {
    "text": "code all right so now if we want to enable the Prometheus custom resource uh",
    "start": "1114120",
    "end": "1119640"
  },
  {
    "text": "service Discovery then uh we need you know to Define either a pod monitor a service monitor or a combination of both",
    "start": "1119640",
    "end": "1127200"
  },
  {
    "text": "in this case we are defining a service Monitor and the service monitor works as follows so I'm saying here that I'm",
    "start": "1127200",
    "end": "1135480"
  },
  {
    "text": "looking for services that match this label and if you look at the uh the service definition over here you can see",
    "start": "1135480",
    "end": "1142280"
  },
  {
    "text": "that yes my service has this label on top of that um this is optional but you can say okay the service must also",
    "start": "1142280",
    "end": "1148679"
  },
  {
    "text": "reside in this name space and I'm going to be scraping metrics from any service",
    "start": "1148679",
    "end": "1153720"
  },
  {
    "text": "that matches the label the name space and also has a port definition that is",
    "start": "1153720",
    "end": "1159360"
  },
  {
    "text": "called prom and we're going to be scraping this every 15",
    "start": "1159360",
    "end": "1164679"
  },
  {
    "text": "seconds now on top of that if you want to use the target allocator at all you",
    "start": "1164679",
    "end": "1170799"
  },
  {
    "text": "don't only enable it you also have to set up um some permissions for it so one",
    "start": "1170799",
    "end": "1177159"
  },
  {
    "text": "of the things that you have to do is set up a service account now the service account gets created for you automatically so you don't actually have",
    "start": "1177159",
    "end": "1183600"
  },
  {
    "text": "to specify one if you leave it out basically it's the combination of our hotel collector um CR instance Dash uh",
    "start": "1183600",
    "end": "1192440"
  },
  {
    "text": "collector so if you leave it out it still gets created however you still have to assign the permissions that you",
    "start": "1192440",
    "end": "1198320"
  },
  {
    "text": "want so you still have to do a cluster roll binding and a cluster roll and we'll look at that shortly so this is an",
    "start": "1198320",
    "end": "1206000"
  },
  {
    "text": "example of our service account that we're creating if you scan this QR code you can see an example of this uh the",
    "start": "1206000",
    "end": "1212000"
  },
  {
    "text": "service account and cluster role binding definitions on the um otel Target allocator readme um so this is our",
    "start": "1212000",
    "end": "1218720"
  },
  {
    "text": "service account and then over here we have our cluster roll definition now two",
    "start": "1218720",
    "end": "1225039"
  },
  {
    "text": "notable things um over here first thing these are the permissions that you need in order for the Target allocator to",
    "start": "1225039",
    "end": "1231640"
  },
  {
    "text": "work period you don't have that Target allocator no work key in addition to",
    "start": "1231640",
    "end": "1236799"
  },
  {
    "text": "that um if you want to do the Prometheus CR Discovery you also need these permissions now you can make these as",
    "start": "1236799",
    "end": "1244039"
  },
  {
    "text": "part of the same cluster roll binding uh sorry cluster roll or separate cluster rolls it's all good as long as they're",
    "start": "1244039",
    "end": "1250640"
  },
  {
    "text": "both bound to the same service account in cluster roll binding you're good and speaking of cluster rule binding we",
    "start": "1250640",
    "end": "1256919"
  },
  {
    "text": "bring it all together by associating our service account to our cluster Ro and",
    "start": "1256919",
    "end": "1262840"
  },
  {
    "text": "voila we are good to go so now we're ready to actually see the real demo live",
    "start": "1262840",
    "end": "1270520"
  },
  {
    "start": "1266000",
    "end": "1572000"
  },
  {
    "text": "narrated by me pre-recorded so um before I start um I",
    "start": "1270520",
    "end": "1276279"
  },
  {
    "text": "do want to mention that if you want to play around with this um we have the repo publicly available and we'll provide a QR code for you to scan",
    "start": "1276279",
    "end": "1283520"
  },
  {
    "text": "afterwards um and you can run this in GitHub code spaces so you don't have to pull your hair out trying to get this to",
    "start": "1283520",
    "end": "1289200"
  },
  {
    "text": "run locally because that's always a nightmare um okay so here we go we are",
    "start": "1289200",
    "end": "1294480"
  },
  {
    "text": "starting first with running the uh starting up our GitHub code",
    "start": "1294480",
    "end": "1299520"
  },
  {
    "text": "spaces and it's starting up doing its thing and now we're going to be",
    "start": "1299520",
    "end": "1304720"
  },
  {
    "text": "installing kind or kubernetes in Docker um pretty lightweight kubernetes drro",
    "start": "1304720",
    "end": "1310440"
  },
  {
    "text": "runs in code spaces extra bonus so I'll be installing that I've got basically a little script that's going to run and",
    "start": "1310440",
    "end": "1317720"
  },
  {
    "text": "once it's done in installing little hamster wheel",
    "start": "1317720",
    "end": "1323240"
  },
  {
    "text": "going then we're going to just make sure that our kubernetes node was created successfully always kind of a shock if",
    "start": "1323240",
    "end": "1329640"
  },
  {
    "text": "that stuff doesn't get created properly and to just make sure that the pods uh that we need for kubernetes to work are",
    "start": "1329640",
    "end": "1336760"
  },
  {
    "text": "actually running so we're all good now we're ready to start installing uh",
    "start": "1336760",
    "end": "1342880"
  },
  {
    "text": "things on our cluster so the first thing that we want to do is install the Prometheus custom resources now you",
    "start": "1342880",
    "end": "1348279"
  },
  {
    "text": "don't have to install the entire Prometheus operator in order to get this thing to work you can actually just pull",
    "start": "1348279",
    "end": "1354559"
  },
  {
    "text": "the um surface Monitor and the Pod monitor custom resources directly um",
    "start": "1354559",
    "end": "1359600"
  },
  {
    "text": "from the Prometheus operator uh Helm chart and I believe uh we have a blog post where we talk about this which we",
    "start": "1359600",
    "end": "1365480"
  },
  {
    "text": "link to later so we'll give you all you need to know to do that so once that's",
    "start": "1365480",
    "end": "1370520"
  },
  {
    "text": "been installed now we have to install C manager which we're doing right now and",
    "start": "1370520",
    "end": "1376240"
  },
  {
    "text": "C manager is a prerequisite for installing the otel operator you don't have C manager otel operator will get",
    "start": "1376240",
    "end": "1383480"
  },
  {
    "text": "mad at you won't install and after installing C manager we just want to make sure that the pods related C",
    "start": "1383480",
    "end": "1389360"
  },
  {
    "text": "manager are up and running and shortly they will be all",
    "start": "1389360",
    "end": "1394720"
  },
  {
    "text": "good there we go finally we're ready to install the otel",
    "start": "1394720",
    "end": "1400919"
  },
  {
    "text": "operator and again just checking to make sure that the uh the pods are up and",
    "start": "1400919",
    "end": "1405960"
  },
  {
    "text": "running for the AEL operator here we go we're just okay we are ready",
    "start": "1405960",
    "end": "1412960"
  },
  {
    "text": "to go perfect so now we are going to build our services just do a Docker",
    "start": "1412960",
    "end": "1418679"
  },
  {
    "text": "compos build um and once we do that we are going to load them in kind um I'm",
    "start": "1418679",
    "end": "1424960"
  },
  {
    "text": "not doing anything fancy like running a local kubernetes registry or or anything there's a a command in kind called kind",
    "start": "1424960",
    "end": "1431159"
  },
  {
    "text": "load loads it into kind and your images are available for use which is awesome",
    "start": "1431159",
    "end": "1437039"
  },
  {
    "text": "saves a lot of work once these are installed we're going to deploy in a minute but I do want to show",
    "start": "1437039",
    "end": "1442640"
  },
  {
    "text": "you really quickly um our service monitor definition which should look familiar because it's similar to what we",
    "start": "1442640",
    "end": "1448200"
  },
  {
    "text": "showed earlier um where basically we are matching on this label app my Dash",
    "start": "1448200",
    "end": "1455600"
  },
  {
    "text": "app and we are looking for uh endpoints with basically surface names with with",
    "start": "1455600",
    "end": "1460880"
  },
  {
    "text": "these names and now we should be ready to deploy our",
    "start": "1460880",
    "end": "1467360"
  },
  {
    "text": "application now don't mind those warnings um because",
    "start": "1467360",
    "end": "1473200"
  },
  {
    "text": "that was like a little buggy thing that was happening with the hotel operator before but it's basically checking to make sure that you have um that you've",
    "start": "1473200",
    "end": "1480880"
  },
  {
    "text": "defined your open Telemetry uh collector CR properly um so we've deployed our um",
    "start": "1480880",
    "end": "1486600"
  },
  {
    "text": "all of our uh resources you notice that the collector is showing crash loop back off Don't Panic totally did the first",
    "start": "1486600",
    "end": "1492480"
  },
  {
    "text": "time it does eventually sort itself out um if it doesn't within a couple of minutes totally panic but it does sort",
    "start": "1492480",
    "end": "1499039"
  },
  {
    "text": "itself out now we're tailing The Collector logs to make sure that things are getting processed and as you can see",
    "start": "1499039",
    "end": "1504960"
  },
  {
    "text": "lovely things are happening this version here where we're pulling up the the logs basically we're just pulling up anything",
    "start": "1504960",
    "end": "1511120"
  },
  {
    "text": "that starts with Name colon because there is something in particular that we are looking for which I'll point out in",
    "start": "1511120",
    "end": "1517120"
  },
  {
    "text": "a sec so I'm looking for something called suore counter because that is the Prometheus metric that we created in our",
    "start": "1517120",
    "end": "1524399"
  },
  {
    "text": "python code which I'll show in a sec so I'll open that up in a",
    "start": "1524399",
    "end": "1530880"
  },
  {
    "text": "minute okay so this is our python app and you can see we defined this thing called Su counter it got scraped by The",
    "start": "1533720",
    "end": "1540840"
  },
  {
    "text": "Collector and it showed up in standard out so yay I knew that it was going to end",
    "start": "1540840",
    "end": "1547840"
  },
  {
    "text": "favorably also um I know we're still in the middle of our session but I am so impressed",
    "start": "1547919",
    "end": "1556559"
  },
  {
    "text": "with all the work that Adriana did on the Target allocator and actually some of the stuff that she discovered is now",
    "start": "1556559",
    "end": "1563679"
  },
  {
    "text": "part of the open tum tree docks so be sure to check out the docs for more information and definitely come to",
    "start": "1563679",
    "end": "1569919"
  },
  {
    "text": "Adrian if you have any questions about the target allocator um meanwhile I'm just going to chat a little bit more about some",
    "start": "1569919",
    "end": "1576039"
  },
  {
    "start": "1572000",
    "end": "1678000"
  },
  {
    "text": "additional open ttic collec components you can use um for monitoring kubernetes metric kubernetes metrics not",
    "start": "1576039",
    "end": "1583720"
  },
  {
    "text": "singular um we won't spend too much time um on this section particularly but we",
    "start": "1583720",
    "end": "1591399"
  },
  {
    "text": "have um the kubernetes cluster receiver you have kuet stats receiver um for",
    "start": "1591399",
    "end": "1598320"
  },
  {
    "text": "collecting specific metrics and there's a few examples um of metrics that are collected by these",
    "start": "1598320",
    "end": "1605080"
  },
  {
    "text": "receivers there's also the objects receiver um which collects objects from",
    "start": "1605080",
    "end": "1611480"
  },
  {
    "text": "the KU API server but there's also some other components that are not just kuet specific that you might find useful um",
    "start": "1611480",
    "end": "1618679"
  },
  {
    "text": "so you have the host metrics receiver as well as the file log receiver that you can use as",
    "start": "1618679",
    "end": "1625200"
  },
  {
    "text": "well so for processing data this component the kubernetes attributes processor is considered one",
    "start": "1625240",
    "end": "1631799"
  },
  {
    "text": "of the most important for monitoring kubernetes with open Telemetry because",
    "start": "1631799",
    "end": "1636960"
  },
  {
    "text": "it adds kubernetes context which allows you to correlate your application Telemetry with your kubernetes Telemetry",
    "start": "1636960",
    "end": "1643760"
  },
  {
    "text": "you can also use this processor to set custom resource attributes um for your traces logs and metrics using the",
    "start": "1643760",
    "end": "1650080"
  },
  {
    "text": "kubernetes labels and annotations that you've added to your pods and name spaces there's a few more collect our",
    "start": "1650080",
    "end": "1656480"
  },
  {
    "text": "components that we didn't cover here um specifically but that you might also",
    "start": "1656480",
    "end": "1662919"
  },
  {
    "text": "find useful um that aren't necessarily cated specific so the batch processor",
    "start": "1662919",
    "end": "1668279"
  },
  {
    "text": "memory limiter as well as the resource processor but there's also many more um",
    "start": "1668279",
    "end": "1674799"
  },
  {
    "text": "that you might find useful for your specific use case so to wrap up let's look at some of the",
    "start": "1674799",
    "end": "1681559"
  },
  {
    "start": "1678000",
    "end": "2001000"
  },
  {
    "text": "pros and cons of the setup that we covered for you today specifically um in",
    "start": "1681559",
    "end": "1687320"
  },
  {
    "text": "Adriana's awesome demo also being able to narrate something that is recorded",
    "start": "1687320",
    "end": "1693159"
  },
  {
    "text": "like keeping with a time is also pretty it's not easy so just wanted to point that out um so starting with some of the",
    "start": "1693159",
    "end": "1700320"
  },
  {
    "text": "pros for one not having to maintain Prometheus as your data store means less",
    "start": "1700320",
    "end": "1706600"
  },
  {
    "text": "infrastructure overall to maintain particularly if you go with an all-in-one observability observability backend um",
    "start": "1706600",
    "end": "1713840"
  },
  {
    "text": "to ingest your open data not having to maintain the Prometheus operator is another uh",
    "start": "1713840",
    "end": "1720919"
  },
  {
    "text": "benefit you still have to maintain the service Monitor and the Pod monitor but it's a lot less work than keeping the",
    "start": "1720919",
    "end": "1727320"
  },
  {
    "text": "operator up to date you will also be able to have a",
    "start": "1727320",
    "end": "1732480"
  },
  {
    "text": "full open tet Tre solution while still obtaining a Prometheus metrics additionally",
    "start": "1732480",
    "end": "1738640"
  },
  {
    "text": "since open Telemetry is a um an observability framework you also get",
    "start": "1738640",
    "end": "1745080"
  },
  {
    "text": "traces logs and I think soon profiling very soon as",
    "start": "1745080",
    "end": "1752559"
  },
  {
    "text": "well oh and also supports correlation of um signals so you can correlate your logs to metrics sorry logs to traces",
    "start": "1752559",
    "end": "1759960"
  },
  {
    "text": "metrics to traces um and as we just learned op totic provides multiple tools you can",
    "start": "1759960",
    "end": "1765720"
  },
  {
    "text": "use such as a Target allocator the various collector components as well as the collector itself um to provide more",
    "start": "1765720",
    "end": "1771840"
  },
  {
    "text": "flexibility for your deployment and configuration options so for the cons of course as",
    "start": "1771840",
    "end": "1779760"
  },
  {
    "text": "with any new tool there's going to be a steep learning curve especially if you're newer to observability in general",
    "start": "1779760",
    "end": "1784919"
  },
  {
    "text": "or you're just not familiar with opary Concepts workflows um",
    "start": "1784919",
    "end": "1791080"
  },
  {
    "text": "components additionally if you are used to using promql which is prometheus's uh",
    "start": "1791080",
    "end": "1796880"
  },
  {
    "text": "query language you you may have to learn a new career language if your backend does not support promql",
    "start": "1796880",
    "end": "1804518"
  },
  {
    "text": "specifically Optometry itself contains many moving Parts um it has its own",
    "start": "1805000",
    "end": "1810159"
  },
  {
    "text": "challenges with scalability and um adoption so that's also something to",
    "start": "1810159",
    "end": "1818000"
  },
  {
    "text": "consider and the various parts of a myometry are still in various stages of",
    "start": "1818000",
    "end": "1824640"
  },
  {
    "text": "maturity um from language to language um component to component whereas Prometheus has been around for a long",
    "start": "1824640",
    "end": "1831120"
  },
  {
    "text": "time and has a pretty mature ecosystem of course um there's likely",
    "start": "1831120",
    "end": "1838240"
  },
  {
    "text": "going to be a need for additional computational and human resources to manage these components as there is",
    "start": "1838240",
    "end": "1843480"
  },
  {
    "text": "going to be with just about anything but that is something to consider depending on the complexity of your open Telemetry",
    "start": "1843480",
    "end": "1852240"
  },
  {
    "text": "infrastructure and finally managing and maintaining both Prometheus and open tmy components",
    "start": "1852240",
    "end": "1858679"
  },
  {
    "text": "is going to obviously introduce operational complexity um and everything",
    "start": "1858679",
    "end": "1863880"
  },
  {
    "text": "that goes along with that so we've mainly been focused on how obum supports Prometheus but there's",
    "start": "1863880",
    "end": "1872039"
  },
  {
    "text": "also been a lot of work from the Prometheus folk to support open cemetry as well so that's what we're going to",
    "start": "1872039",
    "end": "1877880"
  },
  {
    "text": "talk about here so Prometheus maintainers have been working to strengthen the interoperability between",
    "start": "1877880",
    "end": "1884039"
  },
  {
    "text": "the two projects um to make it easier for Prometheus to become the backend for OTL metrics and so Prometheus accepts",
    "start": "1884039",
    "end": "1892600"
  },
  {
    "text": "OTL and soon you'll be able to use Prometheus to oh sorry Prometheus",
    "start": "1892600",
    "end": "1898440"
  },
  {
    "text": "exporters to export OTL and finally they are also working on",
    "start": "1898440",
    "end": "1904799"
  },
  {
    "text": "adding Delta temporality support um it's something that is available um in open",
    "start": "1904799",
    "end": "1912159"
  },
  {
    "text": "right now and it has its own use cases so they are working on a component that can do this and you can learn more",
    "start": "1912159",
    "end": "1918960"
  },
  {
    "text": "about what the lovely Prometheus folks are doing by going to by scanning this",
    "start": "1918960",
    "end": "1924240"
  },
  {
    "text": "QR code and that is it not all images are",
    "start": "1924240",
    "end": "1929799"
  },
  {
    "text": "created by humans in addition to being an the target allocator expert Adriana is also a prompt Engineer Expert um she",
    "start": "1929799",
    "end": "1937240"
  },
  {
    "text": "was the one that put together all these lovely sloth images for you so thank you so much I had fun with that it yeah we",
    "start": "1937240",
    "end": "1944679"
  },
  {
    "text": "hope you had enjoy them as much as we did",
    "start": "1944679",
    "end": "1949840"
  },
  {
    "text": "and and just a final slide for yall before we uh before we go um if uh I I",
    "start": "1955039",
    "end": "1962039"
  },
  {
    "text": "encourage you to check out my podcast that I do with my daughter it's called geeking out scan the QR code I've had",
    "start": "1962039",
    "end": "1967480"
  },
  {
    "text": "past guests such as Kelsey high tower charity majors and Reese um also come find us at the otel observatory Booth",
    "start": "1967480",
    "end": "1975039"
  },
  {
    "text": "we're near the GitHub Booth it's not uh um labeled properly in the map so yeah",
    "start": "1975039",
    "end": "1981039"
  },
  {
    "text": "come find us come ask questions come otel with us and if you have signed up for the New",
    "start": "1981039",
    "end": "1986840"
  },
  {
    "text": "Relic party that we're hosting with doer palumi and tail scale please come early um to make sure you can get in I think",
    "start": "1986840",
    "end": "1993559"
  },
  {
    "text": "it's full so please show up early and come hang with us or go to the otel",
    "start": "1993559",
    "end": "1999039"
  },
  {
    "text": "observatory thank you thank you",
    "start": "1999039",
    "end": "2003840"
  }
]