[
  {
    "text": "I'm Shane utt from Kong and I am one of the Gateway API maintainers and I'm Rob Scott from Google and I'm also one of",
    "start": "179",
    "end": "7379"
  },
  {
    "text": "the Gateway API maintainers and today we're going to be covering everything about Gateway API why you might want to",
    "start": "7379",
    "end": "13620"
  },
  {
    "text": "switch from Ingress to Gateway API and exactly how you can do that",
    "start": "13620",
    "end": "19279"
  },
  {
    "text": "so let's do an overview of these apis real quick let's take a look at what we're talking about so the Ingress API which everybody's",
    "start": "20039",
    "end": "26460"
  },
  {
    "text": "familiar with it's pretty simple you can do host and path matching you can forward to a service you can do TLS",
    "start": "26460",
    "end": "32340"
  },
  {
    "text": "configuration it's been around for a long time and there are lots of implementations like 22 plus",
    "start": "32340",
    "end": "37500"
  },
  {
    "text": "implementations there are some limitations of the Ingress API",
    "start": "37500",
    "end": "43020"
  },
  {
    "text": "um there's not enough features and this ended up leading to custom extensions everywhere so extensions that were they",
    "start": "43020",
    "end": "49800"
  },
  {
    "text": "were and the biggest problem was extensions that weren't portable like the traffic splitting header matching and sticky sessions were some notable",
    "start": "49800",
    "end": "56100"
  },
  {
    "text": "ones uh became this annotation Wild West also it had an insufficient permission",
    "start": "56100",
    "end": "61320"
  },
  {
    "text": "model so Gateway API intends to be the next generation of kubernetes routing and",
    "start": "61320",
    "end": "66720"
  },
  {
    "text": "load balancing apis it's designed to be expressive role oriented we have 15 plus",
    "start": "66720",
    "end": "71880"
  },
  {
    "text": "implementations right now and we graduated to Beta in July so if you take a look at this diagram",
    "start": "71880",
    "end": "78119"
  },
  {
    "text": "over on the left you're going to see that in Gateway API we have three main kinds of resources we have the Gateway",
    "start": "78119",
    "end": "84060"
  },
  {
    "text": "class if you're familiar with the Ingress class resource before it Gateway class is nearly identical then we have",
    "start": "84060",
    "end": "90780"
  },
  {
    "text": "HD HP route and a bunch of other route types at the bottom we'll focus on HTTP because it's the most similar to Ingress",
    "start": "90780",
    "end": "97079"
  },
  {
    "text": "but we'll show you very soon that HTTP route and the Ingress resource are also",
    "start": "97079",
    "end": "102119"
  },
  {
    "text": "very similar Gateway is kind of a New Concept in this API and we'll be talking about that just a little bit after",
    "start": "102119",
    "end": "109680"
  },
  {
    "text": "now Gateway API has a ton of features I know that we've got lots of feature requests throughout kubernetes",
    "start": "109680",
    "end": "115140"
  },
  {
    "text": "networking for many of these things whether it's request redirects rewrites header matching method matching there's",
    "start": "115140",
    "end": "121439"
  },
  {
    "text": "a lot of things in here that we've had feature requests for a long time Gateway API finally allows you to do many of",
    "start": "121439",
    "end": "127140"
  },
  {
    "text": "these things but some of you may say hold on you know I can do this with Ingress",
    "start": "127140",
    "end": "132959"
  },
  {
    "text": "there are a few things you can do with the Ingress API today but everything in that blue box is entirely new with",
    "start": "132959",
    "end": "139379"
  },
  {
    "text": "Gateway API so a lot of net new things in kubernetes because of Gateway API",
    "start": "139379",
    "end": "145920"
  },
  {
    "text": "you may be wondering like how on Earth can you provide all these new features when not everyone can Implement",
    "start": "145920",
    "end": "152160"
  },
  {
    "text": "everything uh to accomplish that we introduce the concept of conformance levels it's a",
    "start": "152160",
    "end": "157980"
  },
  {
    "text": "very important concept to understand in Gateway API every feature every field in",
    "start": "157980",
    "end": "163140"
  },
  {
    "text": "Gateway API is assigned one of these conformance levels to start most of our",
    "start": "163140",
    "end": "168180"
  },
  {
    "text": "features and fields are our core conformance level this is similar to Ingress every single implementation has",
    "start": "168180",
    "end": "173879"
  },
  {
    "text": "to implement that field or feature and do it in a conformed way that passes our conformance tests but we recognize that",
    "start": "173879",
    "end": "180660"
  },
  {
    "text": "not every implementation can Implement everything so we have another layer and that's called extended so an example of",
    "start": "180660",
    "end": "187680"
  },
  {
    "text": "this would be header matching so where prefix matching might be core header etching is just not quite everyone can",
    "start": "187680",
    "end": "194459"
  },
  {
    "text": "support it so we have conformance test coverage for this and if your implementation can support it you",
    "start": "194459",
    "end": "200519"
  },
  {
    "text": "document that well but otherwise we recognize not quite every implementation of the API is going to be able to cover that and then",
    "start": "200519",
    "end": "207300"
  },
  {
    "text": "finally we have a custom category there is very little in this but if anyone's familiar with regular Expressions anyone",
    "start": "207300",
    "end": "213959"
  },
  {
    "text": "deal with regular Expressions out here okay yeah so they're a special thing so with regular Expressions uh you may you",
    "start": "213959",
    "end": "221819"
  },
  {
    "text": "may realize there's some variation depending on the underlying implementation so whether you're talking to you know nginx version of regular",
    "start": "221819",
    "end": "229260"
  },
  {
    "text": "expressions or Envoy or AJ proxy or whatever Cloud you're using the",
    "start": "229260",
    "end": "234599"
  },
  {
    "text": "variation of regex that supporters is going to be slightly different so custom means we understand this concept but it",
    "start": "234599",
    "end": "241019"
  },
  {
    "text": "may not be completely portable across your implementation so you have to understand what is actually implementing",
    "start": "241019",
    "end": "246480"
  },
  {
    "text": "that now I promise that I explained Ingress and HP route and and how they kind of",
    "start": "246480",
    "end": "252540"
  },
  {
    "text": "are parallel to each other so maybe to dive a little deeper let's look at them",
    "start": "252540",
    "end": "257639"
  },
  {
    "text": "side by side first off we're going to look at the simplest Ingress and HP route resource I",
    "start": "257639",
    "end": "264060"
  },
  {
    "text": "can think of we're going to walk through step by step step and see the parallels between them",
    "start": "264060",
    "end": "269639"
  },
  {
    "text": "now first off in Ingress we have a concept of Ingress class name so in this example our Ingress is being implemented",
    "start": "269639",
    "end": "277020"
  },
  {
    "text": "by nginx now in HP route what we have is a parent refs concept and this says Hey attach",
    "start": "277020",
    "end": "283919"
  },
  {
    "text": "this HP route to the gateway called nginx you can attach HP routes to more than",
    "start": "283919",
    "end": "290460"
  },
  {
    "text": "just gateways but we're focusing on gateways now and I know many of you don't even know what a Gateway is yet we'll get there I promise but just we",
    "start": "290460",
    "end": "297780"
  },
  {
    "text": "point up to a thing called the nginx gateway next step we want to do a prefix path",
    "start": "297780",
    "end": "304199"
  },
  {
    "text": "match on login and you can see these apis look nearly identical and then finally they're both forwarding",
    "start": "304199",
    "end": "310800"
  },
  {
    "text": "to the auth service on Port 8080. so starting off you can see there's a lot",
    "start": "310800",
    "end": "316199"
  },
  {
    "text": "of similarities here but let's extend this example just a little bit let's say that we want to add another",
    "start": "316199",
    "end": "322500"
  },
  {
    "text": "implementation of our HTTP route so in Gateway API that would mean I want not just the nginx gateway to implement this",
    "start": "322500",
    "end": "329400"
  },
  {
    "text": "HTTP route but I also want the Contour gateway to implement this HTTP route and in this case you just attach another",
    "start": "329400",
    "end": "336000"
  },
  {
    "text": "parent ref so you're saying not only do I want the nginx Gateway I want the Contour gateway to implement this",
    "start": "336000",
    "end": "343139"
  },
  {
    "text": "now with Ingress you may be familiar you need to create an entirely new Ingress resource to do this so instead of two",
    "start": "343139",
    "end": "350580"
  },
  {
    "text": "Ingress resources just a single HP route with just one additional parent ref",
    "start": "350580",
    "end": "356880"
  },
  {
    "text": "now let's say you wanted to add another path match so for example let's say in addition to",
    "start": "356880",
    "end": "362940"
  },
  {
    "text": "matching path paths that start with Slash login maybe we want to do an exact match on slash auth this is pretty",
    "start": "362940",
    "end": "370560"
  },
  {
    "text": "straightforward in HTTP route just a couple lines you can do the same thing in Ingress but again it's just a little",
    "start": "370560",
    "end": "376560"
  },
  {
    "text": "bit more verbose so you may see a pattern here that the same things are possible but maybe just",
    "start": "376560",
    "end": "382319"
  },
  {
    "text": "a little bit simpler with Gateway API now adding a host match let's say I only",
    "start": "382319",
    "end": "387780"
  },
  {
    "text": "want to match requests to example.net again this starts very similar but some",
    "start": "387780",
    "end": "393660"
  },
  {
    "text": "of the people that are paying extra close attention may be able to see where I'm going with this one let's see what happens when we try and",
    "start": "393660",
    "end": "400500"
  },
  {
    "text": "add another host match so we want to match example.net and.com with HP route you just add one item to",
    "start": "400500",
    "end": "407819"
  },
  {
    "text": "the list and you're done with Ingress you add an entirely new rule",
    "start": "407819",
    "end": "413160"
  },
  {
    "text": "so again it's just one step simpler just one item in a fit list versus an",
    "start": "413160",
    "end": "419280"
  },
  {
    "text": "entirely new rule so Rob alluded to gateways via parent",
    "start": "419280",
    "end": "424560"
  },
  {
    "text": "ref so parent refs point to gateways in Gateway API Gateway is an actual resource",
    "start": "424560",
    "end": "430620"
  },
  {
    "text": "so in Gateway API we have Gateway class which is like Ingress class this tells you like your controller what routes am",
    "start": "430620",
    "end": "437400"
  },
  {
    "text": "I responsible for and as we just talked about Ingress and HTTP route have similarities but we now have Gateway",
    "start": "437400",
    "end": "443759"
  },
  {
    "text": "kubernetes resource this lets you represent your load balancer your proxy as a kubernetes resource you can Define",
    "start": "443759",
    "end": "450000"
  },
  {
    "text": "your listeners and addresses on it attach your routes to it like you saw before and then the configuration stays",
    "start": "450000",
    "end": "455639"
  },
  {
    "text": "the same across implementations um so in this example we have like a basic Gateway set up with an https",
    "start": "455639",
    "end": "461460"
  },
  {
    "text": "listener so uh https Port 443 for the hostname example.com your TLS config",
    "start": "461460",
    "end": "467819"
  },
  {
    "text": "routes can attach to this listener there are a couple common types of",
    "start": "467819",
    "end": "473400"
  },
  {
    "text": "implementations today I represent uh working at Kong and in cluster implementation so we deploy a Gateway",
    "start": "473400",
    "end": "480599"
  },
  {
    "text": "resource and then that ultimately results in the the proxy the Gateway being deployed in a pod on the actual",
    "start": "480599",
    "end": "487560"
  },
  {
    "text": "cluster the addresses are usually provisioned with a service type load balancer and this behaves the same way",
    "start": "487560",
    "end": "493680"
  },
  {
    "text": "it's portable it goes on any kubernetes cluster and I work at Google and so I work on",
    "start": "493680",
    "end": "499680"
  },
  {
    "text": "gke's implementation of Gateway API so that's representative of a cloud provider implementation of this API so",
    "start": "499680",
    "end": "507479"
  },
  {
    "text": "when you create a Gateway with a gke Gateway class what's going to happen is we're",
    "start": "507479",
    "end": "513419"
  },
  {
    "text": "going to provision a cloud load balancer behind the scenes to represent that Gateway so in in case of GK we have an",
    "start": "513419",
    "end": "520440"
  },
  {
    "text": "ilb Gateway and an xlb Gateway depending on what you're most interested in I an",
    "start": "520440",
    "end": "526500"
  },
  {
    "text": "advantage of a cloud provider implementation is that you can load balance directly from your Cloud lb to",
    "start": "526500",
    "end": "532500"
  },
  {
    "text": "pods without any kind of intermediate hop of course because it's a cloud provider implementation this is usually limited",
    "start": "532500",
    "end": "539519"
  },
  {
    "text": "to clusters managed by that cloud provider",
    "start": "539519",
    "end": "545060"
  },
  {
    "text": "so talking a little bit more about route attachment routes attached to gateways of parent West fields we did that the",
    "start": "545700",
    "end": "552360"
  },
  {
    "text": "same route route can be attached to multiple gateways so if you needed to migrate between implementations or if",
    "start": "552360",
    "end": "558180"
  },
  {
    "text": "you needed two implementations to serve the same route you can do that so in this case we have nginx and",
    "start": "558180",
    "end": "563820"
  },
  {
    "text": "Contour both serving the same route Gateway owners the ones who make the Gateway resources can specify where",
    "start": "563820",
    "end": "568860"
  },
  {
    "text": "those routes can come from this is our concept of allowed routes so developers can attach their routes to gateways in",
    "start": "568860",
    "end": "575040"
  },
  {
    "text": "different namespaces so in this example we can set trusted name spaces for attaching routes to a",
    "start": "575040",
    "end": "581519"
  },
  {
    "text": "Gateway so there's two listeners here both of them are just doing HTTP store.example.com only allows",
    "start": "581519",
    "end": "587580"
  },
  {
    "text": "attachments of routes from the namespace as a labeled store and then api.example.com only allows those",
    "start": "587580",
    "end": "594480"
  },
  {
    "text": "attachments from namespaces labeled API this is optional extension but uh because same namespace just works but",
    "start": "594480",
    "end": "601380"
  },
  {
    "text": "it's something that you can do to kind of make that distinction so let's walk through a couple Advanced",
    "start": "601380",
    "end": "607680"
  },
  {
    "text": "examples here as I said we get a lot of feature requests and I I live mostly in the world I used to be an end user of",
    "start": "607680",
    "end": "613980"
  },
  {
    "text": "kubernetes but I may have gotten just a little bit detached so back when I was using kubernetes more I thought that",
    "start": "613980",
    "end": "619500"
  },
  {
    "text": "something called Canary routing or traffic splitting was a pretty common thing that I wanted to do a lot anyone",
    "start": "619500",
    "end": "624899"
  },
  {
    "text": "else want to do traffic splitting anyone okay good okay we put a lot of effort into this so I'm glad that it actually",
    "start": "624899",
    "end": "631080"
  },
  {
    "text": "worked it's something that people will appreciate and use now throughout these",
    "start": "631080",
    "end": "636360"
  },
  {
    "text": "two examples I'm going to show you how it was possible with Ingress today thanks to some very creative implementations that built things on top",
    "start": "636360",
    "end": "642660"
  },
  {
    "text": "of Ingress API and then how we've made it easier with Gateway API so first to",
    "start": "642660",
    "end": "648060"
  },
  {
    "text": "understand what in this case Canary routing or traffic splitting is doing the idea is I want to match my request",
    "start": "648060",
    "end": "653700"
  },
  {
    "text": "to example.com and send 90 of traffic to my prod service and then 10 of traffic",
    "start": "653700",
    "end": "660000"
  },
  {
    "text": "to my canary service and you can think of many different examples of traffic splitting I want to highlight Ingress",
    "start": "660000",
    "end": "665880"
  },
  {
    "text": "nginx it has a great implementation about as good as you could possibly do with Ingress API and as we alluded to",
    "start": "665880",
    "end": "672899"
  },
  {
    "text": "annotations were the way you extended the Ingress API so you have one Ingress resource that allows you to send your",
    "start": "672899",
    "end": "680820"
  },
  {
    "text": "traffic to production and then you create a second Ingress resource and that allows you to send 10 of your",
    "start": "680820",
    "end": "686220"
  },
  {
    "text": "traffic to your Canary endpoint and you're doing that with those annotations there so this was possible with some",
    "start": "686220",
    "end": "694140"
  },
  {
    "text": "creative implementations of the Ingress API we tried to make this easier and Native and portable with Gateway API so",
    "start": "694140",
    "end": "701700"
  },
  {
    "text": "instead you have a single HP route and you just have some traffic splitting so you just say my canary service should get 10 of",
    "start": "701700",
    "end": "708779"
  },
  {
    "text": "my traffic and my Production service should get 90 of my traffic so just a",
    "start": "708779",
    "end": "714420"
  },
  {
    "text": "little bit less configuration than you'd need with Ingress all right another Advanced use case here",
    "start": "714420",
    "end": "721940"
  },
  {
    "text": "is the idea that some organizations especially the larger organizations did",
    "start": "721940",
    "end": "727860"
  },
  {
    "text": "not feel comfortable having their TLS certs in the same namespace as the rest of their configuration their application",
    "start": "727860",
    "end": "734339"
  },
  {
    "text": "their Ingress Etc and some implementations had a creative solution to this they said hey you can put your",
    "start": "734339",
    "end": "740940"
  },
  {
    "text": "secrets in a different namespace I'm going to highlight what Contour did Contour has an annotation on Ingress",
    "start": "740940",
    "end": "748200"
  },
  {
    "text": "that allows you to say my certs actually live in a different namespace so that",
    "start": "748200",
    "end": "753839"
  },
  {
    "text": "secret name down there test secret TLS actually references a secret in the prod",
    "start": "753839",
    "end": "759360"
  },
  {
    "text": "search namespace a completely different namespace so this is a powerful concept",
    "start": "759360",
    "end": "766260"
  },
  {
    "text": "but we want to make this easier to do with Gateway API itself so our",
    "start": "766260",
    "end": "771480"
  },
  {
    "text": "certificate references on Gateway just have a namespace field",
    "start": "771480",
    "end": "776600"
  },
  {
    "text": "that sounds dangerous Rob you're right I I think some of you in here may have seen this inside hold on a second this",
    "start": "777360",
    "end": "783180"
  },
  {
    "text": "doesn't look quite right this doesn't seem safe and and if you had those eyes of caution like hold on a second good",
    "start": "783180",
    "end": "790260"
  },
  {
    "text": "for you I I understand this is something that does not seem good on the surface because you know just being able to",
    "start": "790260",
    "end": "796380"
  },
  {
    "text": "reference any Secret in any other namespace without any safety mechanism is probably not the best",
    "start": "796380",
    "end": "802139"
  },
  {
    "text": "so in Gateway API we built something to enable this safely a handshake mechanism",
    "start": "802139",
    "end": "807779"
  },
  {
    "text": "I created a reference a resource called reference Grant and this allows you to",
    "start": "807779",
    "end": "812880"
  },
  {
    "text": "complete the handshake so you have one resource that's saying in this case a Gateway saying I want to reference this",
    "start": "812880",
    "end": "819000"
  },
  {
    "text": "Secret in another namespace and then you have a reference Grant in that namespace that says I own the secret and I trust",
    "start": "819000",
    "end": "826380"
  },
  {
    "text": "references from gateways in that other namespace so it's basically a way to complete that two-way handshake and",
    "start": "826380",
    "end": "832980"
  },
  {
    "text": "ensure that both parties the owner of the secret and the owner of the Gateway agree that this reference should take",
    "start": "832980",
    "end": "838500"
  },
  {
    "text": "place we use this same model a few places in the API but it allows some really powerful use cases",
    "start": "838500",
    "end": "846860"
  },
  {
    "text": "so you're probably wondering should I switch maybe not so if Ingress API and the Eco",
    "start": "846899",
    "end": "855060"
  },
  {
    "text": "if the Ingress API is doing it for you like if you have everything that you need there you may not want to switch",
    "start": "855060",
    "end": "861060"
  },
  {
    "text": "um but if you one thing that's important to realize is that Ingress is really not going to get new features it's kind of",
    "start": "861060",
    "end": "868200"
  },
  {
    "text": "complete so the Gateway API is going to have a lot of new features it's more expressive it's extensible it's portable",
    "start": "868200",
    "end": "873300"
  },
  {
    "text": "but in addition to that we also just are going broader than Ingress we're working on the use cases for mesh L4 load",
    "start": "873300",
    "end": "880079"
  },
  {
    "text": "balancing we've so we've graduated the beta it's ready to use and it can be",
    "start": "880079",
    "end": "885779"
  },
  {
    "text": "used it's a crd based API so you can install it on any cluster with kubernetes 116 or greater if you are",
    "start": "885779",
    "end": "891839"
  },
  {
    "text": "using something less than 116 we'd like to kind of hear from you afterwards we just kind of we're just just genuinely",
    "start": "891839",
    "end": "897779"
  },
  {
    "text": "curious just kind of like what's going on um so to get started",
    "start": "897779",
    "end": "904620"
  },
  {
    "text": "uh like I said it's a crd uh implementation so you just deploy the crds pick an implementation and then",
    "start": "904620",
    "end": "910260"
  },
  {
    "text": "follow our guides they all work pretty much the same um so you'll just deploy a Gateway you'll create HTTP routes attach them",
    "start": "910260",
    "end": "917100"
  },
  {
    "text": "everything we just showed you kind of previously um there are several here are several",
    "start": "917100",
    "end": "924240"
  },
  {
    "text": "great implementations that we have this isn't an exhaustive list that you can get from the um from our website so we",
    "start": "924240",
    "end": "930060"
  },
  {
    "text": "have under gateways website implementations you can just kind of pick the one that's right for you and then our guides should kind of walk you",
    "start": "930060",
    "end": "935880"
  },
  {
    "text": "through the rest so now we're going to do sure now we're going to do a little bit",
    "start": "935880",
    "end": "942060"
  },
  {
    "text": "of a demo of using the two different types the kind of in cluster and the cloud provider Gateway",
    "start": "942060",
    "end": "948240"
  },
  {
    "text": "so yeah if you got this far if you may have read our talk description and one of the things we promised is that we",
    "start": "948240",
    "end": "953880"
  },
  {
    "text": "were going to show you from start to finish from creating a cluster all the way to using it we want to show you",
    "start": "953880",
    "end": "959459"
  },
  {
    "text": "exactly all the steps involved there aren't many to use this API so in this case I'm going to use gke cluster but of",
    "start": "959459",
    "end": "966899"
  },
  {
    "text": "course any kubernetes cluster will work on gke we offer an option to manage these crds for you but again you can",
    "start": "966899",
    "end": "973320"
  },
  {
    "text": "just install them in any kubernetes cluster same thing will work so to have us manage crds for you you just add a",
    "start": "973320",
    "end": "979920"
  },
  {
    "text": "Gateway API flag when you're creating a cluster or updating one and we'll run",
    "start": "979920",
    "end": "984959"
  },
  {
    "text": "through that process now I've sped this up a little bit as you can see it usually takes a few",
    "start": "984959",
    "end": "991800"
  },
  {
    "text": "minutes for a new cluster to come up but I didn't want you to all wait through this so this is being sped up a bit but",
    "start": "991800",
    "end": "997620"
  },
  {
    "text": "at the end we'll have a new cluster I'm using gke 124 a simple cluster nothing",
    "start": "997620",
    "end": "1002720"
  },
  {
    "text": "too fancy going on here um now we actually want to get our",
    "start": "1002720",
    "end": "1008060"
  },
  {
    "text": "Gateway classes because when we choose GK on Gateway API to be enabled on GK we",
    "start": "1008060",
    "end": "1014600"
  },
  {
    "text": "also bundle a couple Gateway classes for you in this case gxlb that's our Global",
    "start": "1014600",
    "end": "1019759"
  },
  {
    "text": "external load balancer and Regional internal load balancer is available just by default on these clusters",
    "start": "1019759",
    "end": "1026600"
  },
  {
    "text": "uh now we can go ahead and actually apply a few base resources we're going to use these throughout the entire rest",
    "start": "1026600",
    "end": "1032600"
  },
  {
    "text": "of the demo and in this case we have a service and a deployment for our V1",
    "start": "1032600",
    "end": "1037819"
  },
  {
    "text": "version of this application and then the same thing for our Canary version of this application our application in",
    "start": "1037819",
    "end": "1043459"
  },
  {
    "text": "question is just Echo server if any of you have worked with Ingress or anything that also it's just a really really easy",
    "start": "1043459",
    "end": "1049100"
  },
  {
    "text": "way to just print out information about the request the Pod received and also the Pod name namespace and some other",
    "start": "1049100",
    "end": "1054559"
  },
  {
    "text": "useful metadata so with all that let's actually create a",
    "start": "1054559",
    "end": "1059600"
  },
  {
    "text": "Gateway that's a really simple Gateway GK Gateway we're using our internal load balancer in this case and just listening",
    "start": "1059600",
    "end": "1066260"
  },
  {
    "text": "on HTTP on Port 80. we'll create that Gateway and in just a",
    "start": "1066260",
    "end": "1071960"
  },
  {
    "text": "little bit we'll be able to get an IP that we can make requests with uh again I've sped this up because it takes three",
    "start": "1071960",
    "end": "1078799"
  },
  {
    "text": "minutes or approximately to get a new Gateway up and running but eventually you'll see we have some",
    "start": "1078799",
    "end": "1085100"
  },
  {
    "text": "IPS that we can make a request to but this on its own is not very useful because we just have a Gateway and a",
    "start": "1085100",
    "end": "1091760"
  },
  {
    "text": "Gateway doesn't know where to Route things it's really just the entry point to the system so let's create an HP",
    "start": "1091760",
    "end": "1097520"
  },
  {
    "text": "route so it has something to route to in this case we've got an HTTP route that's going to point to store V1 on port 8080",
    "start": "1097520",
    "end": "1105020"
  },
  {
    "text": "and you see that parent ref there it's attaching to the GK Gateway we just created and we're going to be reusing",
    "start": "1105020",
    "end": "1111799"
  },
  {
    "text": "this HP route a bunch but this is our starting point so we'll go ahead and apply that HTTP",
    "start": "1111799",
    "end": "1117860"
  },
  {
    "text": "route HTTP route is good to go uh because you may have noticed I said I",
    "start": "1117860",
    "end": "1124039"
  },
  {
    "text": "I'm using an internal load balancer for this demo I actually have to get somewhere into the network the easiest way to do this is I'm just going to exec",
    "start": "1124039",
    "end": "1130460"
  },
  {
    "text": "into a pod and I'm going to run a few curl requests and you can see we're hitting a store V1 pod each deployment",
    "start": "1130460",
    "end": "1137240"
  },
  {
    "text": "has two pods so if we make a few more requests and grip for the Pod you see we're kind of being split between the",
    "start": "1137240",
    "end": "1144020"
  },
  {
    "text": "two different pods so at Colin we're working on the Kong Gateway operator this is in technical",
    "start": "1144020",
    "end": "1150500"
  },
  {
    "text": "preview right now and our calling incubator it's an in-cluster implementation so that means the Gateway",
    "start": "1150500",
    "end": "1155600"
  },
  {
    "text": "the proxy is actually in the cluster however you'll see that the apis all work pretty much the same thing as gkes",
    "start": "1155600",
    "end": "1164299"
  },
  {
    "text": "um so unlike gke we'll have to go ahead and deploy everything into the cluster so our crds our deployments and so forth",
    "start": "1164299",
    "end": "1171020"
  },
  {
    "text": "wait for our deployments to be ready and then this is our operator uh we'll wait for sorry",
    "start": "1171020",
    "end": "1176900"
  },
  {
    "text": "I messed it up go",
    "start": "1176900",
    "end": "1182299"
  },
  {
    "text": "okay we'll wait for our operator pod to come up so the operator is responsible for looking for like the Gateway class",
    "start": "1182299",
    "end": "1187940"
  },
  {
    "text": "that we talked about earlier that um is it's responsible for to build gateways and then attach routes to them",
    "start": "1187940",
    "end": "1195639"
  },
  {
    "text": "so I think all I did here was just yeah the pods are running so a Gateway class like we said pretty",
    "start": "1196220",
    "end": "1202039"
  },
  {
    "text": "simple this is very similar to the ones that are in gke this just tells the operator uh these be responsible for",
    "start": "1202039",
    "end": "1207860"
  },
  {
    "text": "these gateways these routes that are attached to us",
    "start": "1207860",
    "end": "1211780"
  },
  {
    "text": "so we'll apply the Gateway class it doesn't come with the the clusters of course because this is the portable implementation",
    "start": "1213440",
    "end": "1219440"
  },
  {
    "text": "and once the operator sees it it'll pick it up and the market is accepted true I'm ready to serve I'm ready to create",
    "start": "1219440",
    "end": "1225500"
  },
  {
    "text": "gateways so in the Gateway this is almost the exact same thing as what gke had except it's a Kong Gateway class",
    "start": "1225500",
    "end": "1231260"
  },
  {
    "text": "name same thing we just go ahead and apply",
    "start": "1231260",
    "end": "1237740"
  },
  {
    "text": "that and then we wait for the gateway to be ready behind the scenes this is of",
    "start": "1237740",
    "end": "1242840"
  },
  {
    "text": "course like I just said going and actually creating the pot on the cluster via deployment ultimately once it's",
    "start": "1242840",
    "end": "1248360"
  },
  {
    "text": "ready you'll have a load balancer IP address that you can go and make a requests to",
    "start": "1248360",
    "end": "1254360"
  },
  {
    "text": "the Gateway in this case this is a gateway with no configuration yet so that's just kind of the default response",
    "start": "1254360",
    "end": "1261100"
  },
  {
    "text": "so before we set up the store V1 pod and so forth that we were routing our",
    "start": "1261100",
    "end": "1266539"
  },
  {
    "text": "traffic to with HTTP route in this case we're just going to add the con Gateway same routes and everything that we",
    "start": "1266539",
    "end": "1271820"
  },
  {
    "text": "already have we'll just update the HTTP route to say I also want that route to be served by",
    "start": "1271820",
    "end": "1277039"
  },
  {
    "text": "column Gateway",
    "start": "1277039",
    "end": "1279700"
  },
  {
    "text": "did I break it maybe it was there before",
    "start": "1284299",
    "end": "1289600"
  },
  {
    "text": "okay there we go okay so it's still empty we didn't configure it yet we update the HTTP route to add Kong to the",
    "start": "1290120",
    "end": "1296059"
  },
  {
    "text": "HTTP URL so it's also serving that traffic and then you can see we're getting the same back end we're getting store V1",
    "start": "1296059",
    "end": "1302740"
  },
  {
    "text": "so traffic splitting we talked about that a little bit earlier we're going to update the same issue route both implementations are serving it and say",
    "start": "1303980",
    "end": "1309799"
  },
  {
    "text": "that we want a weight of 50 50 between the two pods like just or two between the two back ends the services",
    "start": "1309799",
    "end": "1315980"
  },
  {
    "text": "um so Story one Canary should both be getting 50 of the traffic",
    "start": "1315980",
    "end": "1320740"
  },
  {
    "text": "we'll update the HTTP route to do that and then start making requests and as you can see Kong's implementation is",
    "start": "1321200",
    "end": "1327440"
  },
  {
    "text": "going 50 50 hitting the different back ends and now we'll step back in time a minute and we're going to make the same request",
    "start": "1327440",
    "end": "1334159"
  },
  {
    "text": "but to the GK Gateway IP here and you're going to see we're getting the same responses so again two different",
    "start": "1334159",
    "end": "1340460"
  },
  {
    "text": "implementations of the API connected to the same HTTP route and everything works we just demoed two I think there's 15 or",
    "start": "1340460",
    "end": "1346460"
  },
  {
    "text": "more implementations of this API they'd work the same way again the goal here is to have a portable experience no matter",
    "start": "1346460",
    "end": "1352520"
  },
  {
    "text": "what underlying implementation you're using um if you read our talk description very",
    "start": "1352520",
    "end": "1359059"
  },
  {
    "text": "carefully you may have said hey we PR we promised a demo of cross namespace traffic splitting I'm sorry this was we",
    "start": "1359059",
    "end": "1365659"
  },
  {
    "text": "write these cfps like five months ago it's a long time uh we thought we would have this Auto experimental it's like",
    "start": "1365659",
    "end": "1372559"
  },
  {
    "text": "two weeks away we just we just missed the timeline uh but this is moving from our experimental channel the APA API to",
    "start": "1372559",
    "end": "1378860"
  },
  {
    "text": "standard in a couple weeks and so we know what this does we know how it works but the idea is that reference Grant",
    "start": "1378860",
    "end": "1385280"
  },
  {
    "text": "idea that we we demoed earlier you can use the same concept again but to reference a back end in another",
    "start": "1385280",
    "end": "1392299"
  },
  {
    "text": "namespace so we we've been traffic splitting within the same name space that's the default that's the easiest",
    "start": "1392299",
    "end": "1397580"
  },
  {
    "text": "thing to do but there are some legitimate use cases where you want to traffic split to another namespace and",
    "start": "1397580",
    "end": "1403700"
  },
  {
    "text": "this enables you to do that so again in this case you create a reference Grant and this says I trust references from",
    "start": "1403700",
    "end": "1409940"
  },
  {
    "text": "this HTTP route namespace HTTP route in the stable namespace to talk to me my",
    "start": "1409940",
    "end": "1416360"
  },
  {
    "text": "service in the namespace that I'm in Canary United States so again this is just another powerful use case of",
    "start": "1416360",
    "end": "1423320"
  },
  {
    "text": "reference Grant now I'm sure some of you are saying hold",
    "start": "1423320",
    "end": "1428539"
  },
  {
    "text": "on this looks like a ton of work yet another new kubernetes API to learn I",
    "start": "1428539",
    "end": "1433640"
  },
  {
    "text": "I'm sorry but we are trying to make this transition just a little bit easier so",
    "start": "1433640",
    "end": "1438679"
  },
  {
    "text": "we've created a tool called Ingress to Gateway so if you're interested Ingress",
    "start": "1438679",
    "end": "1443900"
  },
  {
    "text": "will just out of curiosity how many of you have kubernetes clusters right now that have a bunch of ingresses running",
    "start": "1443900",
    "end": "1449179"
  },
  {
    "text": "in them okay great I would love if you would try this out the whole idea is this tool",
    "start": "1449179",
    "end": "1455059"
  },
  {
    "text": "looks at your cluster whatever's currently in your Cube config gets all the ingresses in it and then tries to",
    "start": "1455059",
    "end": "1460460"
  },
  {
    "text": "print out equivalent Gateway and HP routes for you uh this is still early in development you know it works for me on",
    "start": "1460460",
    "end": "1467240"
  },
  {
    "text": "my cluster but I know you know we'll see so if it doesn't work for you please",
    "start": "1467240",
    "end": "1472640"
  },
  {
    "text": "please let us know we are trying to make this better uh but again we're trying to make this as easy as possible and as",
    "start": "1472640",
    "end": "1478400"
  },
  {
    "text": "Shane said earlier you may not need to move to Ingress but if you are moved from Ingress to Gateway API but if",
    "start": "1478400",
    "end": "1484159"
  },
  {
    "text": "you're interested we'd love to get your feedback on this yes please",
    "start": "1484159",
    "end": "1489860"
  },
  {
    "text": "so what's next for Gateway API service mesh like I talked about a little bit earlier is kind of one of the",
    "start": "1489860",
    "end": "1495200"
  },
  {
    "text": "bigger ones we have What's called the gamma initiative and we're looking at taking these apis like HTTP route and stuff like that and see how they can",
    "start": "1495200",
    "end": "1500900"
  },
  {
    "text": "apply to the service mesh use case Gateway class Gateway and HTTP route all just recently went to V1 beta one but we",
    "start": "1500900",
    "end": "1507200"
  },
  {
    "text": "are trying to get to V1 very soon TCP route UDP route TLS route they need",
    "start": "1507200",
    "end": "1512480"
  },
  {
    "text": "more feedback implementations but we are hoping to get those into beta very quickly",
    "start": "1512480",
    "end": "1517760"
  },
  {
    "text": "uh grpc route just released as an alpha so go check that out and then ultimately",
    "start": "1517760",
    "end": "1523100"
  },
  {
    "text": "one of our Big Stretch goals that we've had for a while is we want the Gateway gateways to be an alternative to surface",
    "start": "1523100",
    "end": "1528440"
  },
  {
    "text": "type load balancer if you want to get involved we actually have two weekly meetings um so the one",
    "start": "1528440",
    "end": "1535279"
  },
  {
    "text": "on every Monday is kind of our regular Gateway API meeting for like Ingress and so forth and then our Tuesday meetings",
    "start": "1535279",
    "end": "1541039"
  },
  {
    "text": "are gamma that's the mesh related meeting we would like anybody who wants to come to come all backgrounds even if",
    "start": "1541039",
    "end": "1546740"
  },
  {
    "text": "you just want to come in and listen but we'd certainly like feedback and ideas and stuff like that about how to go forward with these things",
    "start": "1546740",
    "end": "1553940"
  },
  {
    "text": "um so yeah our website's Gateway api6.khs.io we're on Sig Network Gateway",
    "start": "1553940",
    "end": "1559340"
  },
  {
    "text": "API on kubernetes slack and Gateway Dash API uh is our repo under kubernetes sigs",
    "start": "1559340",
    "end": "1566059"
  },
  {
    "text": "I just before before we get into questions I just one last call out I forgot to put this in the slides but",
    "start": "1566059",
    "end": "1572000"
  },
  {
    "text": "Keith is here uh John is maybe here I'm not sure but if you're interested in the mesh side of this there's another talk",
    "start": "1572000",
    "end": "1578679"
  },
  {
    "text": "at 11 A.M tomorrow is that right I think but yeah look for it uh really really",
    "start": "1578679",
    "end": "1586220"
  },
  {
    "text": "interesting things happening with this API we focused on the Ingress side but it's much broader than that",
    "start": "1586220",
    "end": "1591320"
  },
  {
    "text": "without any any questions",
    "start": "1591320",
    "end": "1594580"
  },
  {
    "text": "hi have you given any talk to multi-cluster in Gateway API yes uh I",
    "start": "1601580",
    "end": "1607279"
  },
  {
    "text": "know at least one implementation supports that so in GK we have multi-cloud we combine this with",
    "start": "1607279",
    "end": "1612500"
  },
  {
    "text": "multi-cluster services so one of the things you can forward to we focused on forwarding the services but you could",
    "start": "1612500",
    "end": "1618860"
  },
  {
    "text": "forward to a service import and just build on top of the multi-cluster service API for multi-cluster gateways",
    "start": "1618860",
    "end": "1626919"
  },
  {
    "text": "foreign",
    "start": "1627919",
    "end": "1630158"
  },
  {
    "text": "it's a lot of pressure to make this worth it you showed how in the gke example you",
    "start": "1639559",
    "end": "1646220"
  },
  {
    "text": "took care of setting up the load balancer so Shane I'm wondering for Kong",
    "start": "1646220",
    "end": "1653720"
  },
  {
    "text": "you have a Gateway class to find when you create a gateway does the operator do anything with say",
    "start": "1653720",
    "end": "1661460"
  },
  {
    "text": "creating a surface of type load balancer or is that still left to the cluster operator yeah the operator does that",
    "start": "1661460",
    "end": "1667880"
  },
  {
    "text": "under the hood it's supposed to be kind of opaque to you unless you care so are you able to influence things like you know do I want an nld or you know",
    "start": "1667880",
    "end": "1675559"
  },
  {
    "text": "those those sorts of cloud provider dependent yeah we're at that level okay thank you",
    "start": "1675559",
    "end": "1682840"
  },
  {
    "text": "so one of the big advantages of Ingress of course is that it comes built into kubernetes when you first install it",
    "start": "1687980",
    "end": "1694880"
  },
  {
    "text": "which is helpful for bootstrapping are there any other any future aspirations",
    "start": "1694880",
    "end": "1700039"
  },
  {
    "text": "to have Gateway API also come with kubernetes like included with it",
    "start": "1700039",
    "end": "1706640"
  },
  {
    "text": "rather than as a crd yeah it's a good question I know I know that's been discussed a lot but I think",
    "start": "1706640",
    "end": "1712820"
  },
  {
    "text": "you know from my perspective the goal is to make keep kubernetes the project from growing even wider there's already so",
    "start": "1712820",
    "end": "1719480"
  },
  {
    "text": "much in the core kubernetes repo that we're trying to pull things out like",
    "start": "1719480",
    "end": "1724580"
  },
  {
    "text": "most people but not everyone using kubernetes needs something like Gateway API you know this is not everyone needs",
    "start": "1724580",
    "end": "1731120"
  },
  {
    "text": "load balancing in their cluster so this is something that you can bolt on as basically an extension of your cluster",
    "start": "1731120",
    "end": "1737299"
  },
  {
    "text": "and that's the direction a lot of new apis are going uh admin Network policy coming is kind of following the same",
    "start": "1737299",
    "end": "1744080"
  },
  {
    "text": "idea and there's other apis that are also kind of going to be I think a lot of future kubernetes apis are going to",
    "start": "1744080",
    "end": "1749240"
  },
  {
    "text": "be developed this way do you know if there is a support for",
    "start": "1749240",
    "end": "1755600"
  },
  {
    "text": "HTTP root in external DNS oh I I have lost track of that I know",
    "start": "1755600",
    "end": "1761720"
  },
  {
    "text": "there's been work with external DNS and Gateway API and it has some support I",
    "start": "1761720",
    "end": "1767240"
  },
  {
    "text": "can't remember the status of that right now me neither right yeah do you sorry I'm",
    "start": "1767240",
    "end": "1772640"
  },
  {
    "text": "not like I'm not either yeah in the back",
    "start": "1772640",
    "end": "1777399"
  },
  {
    "text": "uh for traffic shifting it's sort of like a idea for using like the scaling",
    "start": "1778820",
    "end": "1784760"
  },
  {
    "text": "API or something to make that a little more you know easy to drive from Akita or you",
    "start": "1784760",
    "end": "1791840"
  },
  {
    "text": "know some other traffic monitoring tools so you can have traffic shift automatically versus like setting",
    "start": "1791840",
    "end": "1797899"
  },
  {
    "text": "configurations like a sub resource",
    "start": "1797899",
    "end": "1803260"
  },
  {
    "text": "so if I'm understanding correctly are you talking about you know like filling a zone or something like and then",
    "start": "1803299",
    "end": "1808640"
  },
  {
    "text": "spilling over is that oh",
    "start": "1808640",
    "end": "1816500"
  },
  {
    "text": "you're trying to attach that to like the to the traffic splitting",
    "start": "1817580",
    "end": "1822880"
  },
  {
    "text": "let me feel specific to the Kong operator is or no I think he's talking about I could be wrong I think you might",
    "start": "1826640",
    "end": "1833720"
  },
  {
    "text": "be talking about like is there in Gateway API a way to express attaching like weighted traffic splitting to",
    "start": "1833720",
    "end": "1840320"
  },
  {
    "text": "scaling your deployment I don't think we have anything like that today if you're",
    "start": "1840320",
    "end": "1847480"
  },
  {
    "text": "right",
    "start": "1849620",
    "end": "1851860"
  },
  {
    "text": "right I don't yeah I don't think we have anything like that today in the API like a way to express that all right there",
    "start": "1855140",
    "end": "1860960"
  },
  {
    "text": "may be something that have come up in the past but come to the come to the meetings come to like get on GitHub with us and like tell us about that because",
    "start": "1860960",
    "end": "1867320"
  },
  {
    "text": "we'd love to try and see if we can fit in a use case like that it sounds cool foreign",
    "start": "1867320",
    "end": "1874240"
  },
  {
    "text": "basically the traffic shifting part of it but progressively in a different way how are you envisioning doing the",
    "start": "1883159",
    "end": "1890720"
  },
  {
    "text": "not just 10 Canary right you want to go to 100 percent you want your Canary to become",
    "start": "1890720",
    "end": "1896059"
  },
  {
    "text": "production yeah I think I think today we're kind of leaving that up to the operators to kind of figure out as opposed to making that",
    "start": "1896059",
    "end": "1902360"
  },
  {
    "text": "something that we express like in this API but open to it like opens if it's something that can be generally applied",
    "start": "1902360",
    "end": "1908779"
  },
  {
    "text": "across most implementations I mean we also have like extended and other feature sets basically to try to capture",
    "start": "1908779",
    "end": "1915260"
  },
  {
    "text": "things that can't be done everywhere we'd be open to putting something like that in yeah I'd also recommend uh",
    "start": "1915260",
    "end": "1920899"
  },
  {
    "text": "watching that kubecon talk it was yesterday if you missed it there was one uh by sanskar who's over there demoing",
    "start": "1920899",
    "end": "1929299"
  },
  {
    "text": "just uh how to use this API with in that case Flagger but something that helps automate that transition process for you",
    "start": "1929299",
    "end": "1935960"
  },
  {
    "text": "I think really those kind of automated transitions are going to require something on top of this like Flagger I",
    "start": "1935960",
    "end": "1942620"
  },
  {
    "text": "think I can't remember if Argo supports this API yet I thought they were working on",
    "start": "1942620",
    "end": "1947899"
  },
  {
    "text": "it but I I can't remember as you're heading out by the way if you wouldn't mind leaving feedback for us",
    "start": "1947899",
    "end": "1953120"
  },
  {
    "text": "we'd really appreciate it please",
    "start": "1953120",
    "end": "1956440"
  }
]