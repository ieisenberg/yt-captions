[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "hello my name is Brad childs I work at Red Hat I'm the development lead for",
    "start": "30",
    "end": "6589"
  },
  {
    "text": "storage volume enablement on kubernetes if you were next door earlier you would",
    "start": "6589",
    "end": "11820"
  },
  {
    "text": "have seen a yawn saffron active at awk on external storage provisioning and in",
    "start": "11820",
    "end": "18390"
  },
  {
    "text": "you know typical kubernetes fashion it was kind of scheduled out of order and you know we did the deep dive there and",
    "start": "18390",
    "end": "25230"
  },
  {
    "text": "we're gonna do kind of the general overview of storage features here and hopefully like this system becomes consistent",
    "start": "25230",
    "end": "31640"
  },
  {
    "text": "alright so kind of a brief roadmap we I started",
    "start": "31640",
    "end": "37440"
  },
  {
    "text": "with the basic volume plug-in framework at the initial you know launch of cube",
    "start": "37440",
    "end": "43110"
  },
  {
    "text": "and that was that's a very specific specification of the volume that you're",
    "start": "43110",
    "end": "49320"
  },
  {
    "text": "gonna use in a pod and since then we've added features around well we've added",
    "start": "49320",
    "end": "54559"
  },
  {
    "text": "different volume plugins we've added dynamic provisioning and in alpha we've",
    "start": "54559",
    "end": "60359"
  },
  {
    "text": "added dynamic provisioning a beta we've added volume selectors we've added security we",
    "start": "60359",
    "end": "68000"
  },
  {
    "text": "started adding external provisioners and that's pretty much what we're working on",
    "start": "68000",
    "end": "73049"
  },
  {
    "text": "right now is external provisioners but i'm going to go over the the storage class in the dynamic provisioning",
    "start": "73049",
    "end": "79170"
  },
  {
    "text": "aspects of this and also PB selector and I'll go through some like basic usage",
    "start": "79170",
    "end": "85110"
  },
  {
    "text": "scenarios and also kind of show how it works in the framework itself so start off with the volume the volume",
    "start": "85110",
    "end": "92610"
  },
  {
    "start": "90000",
    "end": "90000"
  },
  {
    "text": "plug-in framework I this is the most basic way to use storage and really",
    "start": "92610",
    "end": "99299"
  },
  {
    "text": "there's no abstraction between the developer and the backing storage there's quite a few different volumes",
    "start": "99299",
    "end": "105750"
  },
  {
    "text": "I've supported and these are all types that are also supported in the per system as a persistent volume but you",
    "start": "105750",
    "end": "112170"
  },
  {
    "text": "will you would specify your volume properties directly in your pod and you",
    "start": "112170",
    "end": "117930"
  },
  {
    "text": "just get a direct connection to your volume with persistent volumes we",
    "start": "117930",
    "end": "122969"
  },
  {
    "text": "actually have an abstraction between the storage and the user and it's enabled an",
    "start": "122969",
    "end": "128610"
  },
  {
    "start": "123000",
    "end": "123000"
  },
  {
    "text": "administrative role in a developer role so we actually have like a separation of concern the administrator will create",
    "start": "128610",
    "end": "135010"
  },
  {
    "text": "persistent volumes in the you know register the persistent volumes in a pool the developer will create claims",
    "start": "135010",
    "end": "142180"
  },
  {
    "text": "against the persistent volume and this this level of abstraction allows the developer not to have to know about",
    "start": "142180",
    "end": "148180"
  },
  {
    "text": "storage and also facilitates portability between pods and the actual infrastructure they're",
    "start": "148180",
    "end": "155320"
  },
  {
    "text": "running on so you don't have to with the volume framework if you have your NFS server specified as an IP with an export",
    "start": "155320",
    "end": "161680"
  },
  {
    "text": "if you were to move that from on-prem to cloud you'd end up having to have the exact same connection details in cloud",
    "start": "161680",
    "end": "167260"
  },
  {
    "text": "with persistent volume in a claim you actually have a layer of abstraction and you can the claim can be something else",
    "start": "167260",
    "end": "173890"
  },
  {
    "text": "on a different you know on a different cloud provider so we have the concept of developer owned assets and",
    "start": "173890",
    "end": "180010"
  },
  {
    "text": "administrative owned assets for persistent volumes I with persistent volumes we have a",
    "start": "180010",
    "end": "186880"
  },
  {
    "text": "binding controller this wasn't so much an issue with just regular volumes the cubelet would handle the mounting the",
    "start": "186880",
    "end": "194110"
  },
  {
    "text": "storage but now that we have two different objects that have to be linked together we have a controller that",
    "start": "194110",
    "end": "200680"
  },
  {
    "text": "maintains the life cycle between that the the volume binding controller's responsible for binding provisioning and",
    "start": "200680",
    "end": "207010"
  },
  {
    "text": "recycling persistent volumes and this is you know pretty much the entire",
    "start": "207010",
    "end": "212590"
  },
  {
    "text": "lifecycle of a persistent volume and when it's doing its matching it's done primarily on size and access mode and",
    "start": "212590",
    "end": "220540"
  },
  {
    "text": "then some of the features that we've added recently like label selectors and storage classes has increased you know",
    "start": "220540",
    "end": "227020"
  },
  {
    "text": "what it will actually match on so here's the basic flow for binding a",
    "start": "227020",
    "end": "235320"
  },
  {
    "start": "232000",
    "end": "232000"
  },
  {
    "text": "persistent volume so we have a binding controller this is part of the cube framework it starts as a you know you",
    "start": "235320",
    "end": "243610"
  },
  {
    "text": "know when you start your cube controller the binding controller starts and it sits there listening for persistent",
    "start": "243610",
    "end": "249790"
  },
  {
    "text": "volumes the first step the administrator will create persistent volume objects and the persistent volume object is the",
    "start": "249790",
    "end": "256570"
  },
  {
    "text": "actual specification and details of the backing storage so it's NFS it'll be an",
    "start": "256570",
    "end": "261970"
  },
  {
    "text": "IP and an export if it's cluster it'll be an IP and a volume name",
    "start": "261970",
    "end": "267229"
  },
  {
    "text": "I just depending on the details of what your sword you use like the persistent",
    "start": "267229",
    "end": "273349"
  },
  {
    "text": "volume spec is very specific to that backing storage type so a step one of",
    "start": "273349",
    "end": "278780"
  },
  {
    "text": "the admin creates the persistent volume with the volume details step 2 a developer goes and creates a claim the",
    "start": "278780",
    "end": "286400"
  },
  {
    "text": "claim has the basic request that the user needs for storage and the most",
    "start": "286400",
    "end": "291740"
  },
  {
    "text": "basic scenario they'll ask for storage of a certain size no specifying an access type so you have read write once",
    "start": "291740",
    "end": "298639"
  },
  {
    "text": "read write many read write once means that it can be used once in a pod read write many you means it can be used",
    "start": "298639",
    "end": "305180"
  },
  {
    "text": "multiple times you know by multiple pods but not outside this namespace so it's",
    "start": "305180",
    "end": "312259"
  },
  {
    "text": "kind of an alias first-year in storage or network storage whereas read alight at once tends to be like block storage",
    "start": "312259",
    "end": "317870"
  },
  {
    "text": "and then I after the after step number two when the dev creates the claim the",
    "start": "317870",
    "end": "324469"
  },
  {
    "text": "binding controller will look at the claim and it'll search through the persistent volume pool and find something that matches it and actually",
    "start": "324469",
    "end": "331279"
  },
  {
    "text": "bind the claim to the persistent volume the binding is done is a two transaction",
    "start": "331279",
    "end": "338779"
  },
  {
    "text": "I write so we have a tight linking of the PV and the PVC this is somewhat unique",
    "start": "338779",
    "end": "346400"
  },
  {
    "text": "in cube I you really in a h.a environment you want to keep the",
    "start": "346400",
    "end": "351620"
  },
  {
    "text": "transactions to a minimum two rights is pretty luxurious but it was essential",
    "start": "351620",
    "end": "359210"
  },
  {
    "text": "for actually linking the two objects together and we start off by writing the",
    "start": "359210",
    "end": "365529"
  },
  {
    "text": "PVC or start off by writing the the PVC to",
    "start": "365529",
    "end": "371479"
  },
  {
    "text": "the PV claim raft so the PV gets a stamp of the PVC that claimed it and then the",
    "start": "371479",
    "end": "377029"
  },
  {
    "text": "the PV volume the PVC volume name gets its to the PV name and then during these",
    "start": "377029",
    "end": "384650"
  },
  {
    "text": "two rights if a version error occurs we know that some other object was or some other controller was trying to write the",
    "start": "384650",
    "end": "390139"
  },
  {
    "text": "object the user may have deleted the client they may have believed the persistent volume we have roll forward",
    "start": "390139",
    "end": "395729"
  },
  {
    "text": "scenarios for that we also write annotations during some of this stuff so we know if it's the binder doing the",
    "start": "395729",
    "end": "402960"
  },
  {
    "text": "writing or if a user came in and wrote it or if something else caused the objects to change version unexpectedly",
    "start": "402960",
    "end": "409710"
  },
  {
    "text": "but we have a very much roll forward error recovery if our transaction",
    "start": "409710",
    "end": "414750"
  },
  {
    "text": "writing fails so that goes let's talk about the new features so labels and selectors is a",
    "start": "414750",
    "end": "420840"
  },
  {
    "text": "feature that we added recently it's quite similar to node labels and node",
    "start": "420840",
    "end": "425849"
  },
  {
    "text": "selectors the idea is you tag your labels with or you tag your volumes",
    "start": "425849",
    "end": "431490"
  },
  {
    "text": "you're persistent volumes with certain labels then you use match criteria on your PVC to you know essentially match",
    "start": "431490",
    "end": "438900"
  },
  {
    "text": "the two together I admit I admit is supposed to communicate",
    "start": "438900",
    "end": "444539"
  },
  {
    "text": "the values and the ranges to the user this is kind of a cumbersome user experience we're kind of in the process",
    "start": "444539",
    "end": "452159"
  },
  {
    "text": "of thinking of how to fix this it's a similar issue to node but if you really",
    "start": "452159",
    "end": "459330"
  },
  {
    "text": "have two distinct users the developer isn't supposed to see the persistent volumes so it's a little hard for them",
    "start": "459330",
    "end": "465810"
  },
  {
    "text": "to discover what labels or values you might have it's kind of on the admin to communicate what those labels are",
    "start": "465810",
    "end": "471259"
  },
  {
    "text": "typically a lot of this stuff is automated and scripted so the end user probably does it see what the labels and",
    "start": "471259",
    "end": "477990"
  },
  {
    "text": "selectors actually are so the binding controller this is very",
    "start": "477990",
    "end": "483419"
  },
  {
    "start": "481000",
    "end": "481000"
  },
  {
    "text": "similar to the original binding controller where was just matching on size and access mode step number one",
    "start": "483419",
    "end": "489569"
  },
  {
    "text": "admin will come in and create a persistent volume they'll create it with a label",
    "start": "489569",
    "end": "494810"
  },
  {
    "text": "this would go into a persistent volume pool then step number two the user will",
    "start": "494810",
    "end": "500669"
  },
  {
    "text": "create a claim they'll have a selector with their match label and then label in",
    "start": "500669",
    "end": "506279"
  },
  {
    "text": "the value that they're looking for and then step number three the binder will come and actually",
    "start": "506279",
    "end": "513209"
  },
  {
    "text": "search the persistent volume pool for a matching volume and then it'll go through this same two-step process to",
    "start": "513209",
    "end": "519360"
  },
  {
    "text": "bind the volume with the claim so nothing new here except we add like",
    "start": "519360",
    "end": "525290"
  },
  {
    "text": "new match criteria for for actually binding the volume in the claim",
    "start": "525290",
    "end": "530889"
  },
  {
    "text": "so labels and selectors some of the stuff you can do there's a quality you",
    "start": "532060",
    "end": "537470"
  },
  {
    "text": "can combine with the comma so comma is basically your hand you have set based you can do value in a set you can do",
    "start": "537470",
    "end": "544850"
  },
  {
    "text": "value not in a set you can do value comma meaning like does is the value set",
    "start": "544850",
    "end": "550130"
  },
  {
    "text": "and then you check if the values in this set pretty simple stuff you can make it as complicated as you",
    "start": "550130",
    "end": "557420"
  },
  {
    "text": "want by handing expressions together with a comma some examples you may want to check it back up equals daily check a",
    "start": "557420",
    "end": "564769"
  },
  {
    "text": "check if back up it's okay so if you say set you're persistent volume with a label back up and the value daily",
    "start": "564769",
    "end": "572620"
  },
  {
    "text": "you could in theory I have want your the claim that you bind to your pod to be",
    "start": "572620",
    "end": "580250"
  },
  {
    "text": "backed up at a certain interval and maybe you don't necessarily want it back to monthly or yearly but you do want it",
    "start": "580250",
    "end": "586399"
  },
  {
    "text": "backed up daily hourly or weekly so this is one potential use case now there are",
    "start": "586399",
    "end": "592130"
  },
  {
    "text": "possible one production staging you don't want your this particular pod or applications of land in production or",
    "start": "592130",
    "end": "599120"
  },
  {
    "text": "staging environment so you could use selectors here it could also be used for GID insecurity it's really up to the",
    "start": "599120",
    "end": "607130"
  },
  {
    "text": "administrator to define how they use labels and selectors and then for the",
    "start": "607130",
    "end": "612350"
  },
  {
    "text": "users to kind of comply with this is but it's very flexible it just offers additional match criteria for volumes",
    "start": "612350",
    "end": "617990"
  },
  {
    "text": "and claims so the next feature is storage class this one I they have it has some",
    "start": "617990",
    "end": "626540"
  },
  {
    "text": "overlapping function with labels and selectors a lot of this was added in anticipation of you know enhancing our",
    "start": "626540",
    "end": "633949"
  },
  {
    "text": "dynamic provisioning framework i storage class really represents a set of properties that all pb's in the storage",
    "start": "633949",
    "end": "641089"
  },
  {
    "text": "class belong to i the storage class properties don't have",
    "start": "641089",
    "end": "647170"
  },
  {
    "text": "explicit meaning to the framework but it's something that the admin or the developer kind of agrees upon has value",
    "start": "647170",
    "end": "655000"
  },
  {
    "text": "typically it's like performance characteristics it could be security it could be backup",
    "start": "655000",
    "end": "661070"
  },
  {
    "text": "policy it could be really anything that you want it to be each claim can have a single storage",
    "start": "661070",
    "end": "667580"
  },
  {
    "text": "class each volume can have a single storage class and it really facilitates",
    "start": "667580",
    "end": "672860"
  },
  {
    "text": "dynamic provisioning and storage classes can be used for pre-created or dynamically provisioned and persistent",
    "start": "672860",
    "end": "679580"
  },
  {
    "text": "volumes and I'll show examples of both of those so here's the yamo for it so this is the",
    "start": "679580",
    "end": "686270"
  },
  {
    "text": "actual object you would create when doing a storage class",
    "start": "686270",
    "end": "691360"
  },
  {
    "text": "pretty simple the parameters are a string string so anything could go there",
    "start": "691930",
    "end": "697510"
  },
  {
    "text": "the name is important the name will have to be specified in the claim and also",
    "start": "697510",
    "end": "703220"
  },
  {
    "text": "the persistent volume and you can see here is this annotation that has that's how the the volume matches to the",
    "start": "703220",
    "end": "710300"
  },
  {
    "text": "storage class and then like I said the parameters anything you want they really",
    "start": "710300",
    "end": "715760"
  },
  {
    "text": "have meaning probably to whoever's provisioning the volume should it be dynamically provisioned or statically",
    "start": "715760",
    "end": "720920"
  },
  {
    "text": "provisioned",
    "start": "720920",
    "end": "723040"
  },
  {
    "text": "so similar use cases to labels could be backup policy it could be volume performance characteristics you could",
    "start": "727720",
    "end": "734810"
  },
  {
    "text": "have unique file system properties that you want to select for save",
    "start": "734810",
    "end": "740500"
  },
  {
    "text": "the file naming sighs if a file system supports extended attributes",
    "start": "740500",
    "end": "746710"
  },
  {
    "text": "maybe there's consistency modeling the one project you want to say the one",
    "start": "746710",
    "end": "752750"
  },
  {
    "text": "particular storage class has strict consistency the other one the consistency is relaxed there may be",
    "start": "752750",
    "end": "760460"
  },
  {
    "text": "provision or configuration specified in your storage class and this is parameters that actually go to the",
    "start": "760460",
    "end": "766340"
  },
  {
    "text": "provisioner when it's creating a new volume of that particular storage class",
    "start": "766340",
    "end": "771350"
  },
  {
    "text": "or it could also have some securities security information supplied but again",
    "start": "771350",
    "end": "776450"
  },
  {
    "text": "the framework doesn't care about the properties so much these are brilliant meanings that's communicated between the",
    "start": "776450",
    "end": "782240"
  },
  {
    "text": "developer and the administrator",
    "start": "782240",
    "end": "786370"
  },
  {
    "start": "786000",
    "end": "786000"
  },
  {
    "text": "the flow of persistent volumes with the binder and claims in this example it's just showing",
    "start": "788490",
    "end": "797779"
  },
  {
    "text": "statically provisioned persistent volumes belonging to a storage class there's no dynamic provisioning yet I'll",
    "start": "797779",
    "end": "803370"
  },
  {
    "text": "show that in a minute but it's the it's a very similar flow the admin will create a storage class they'll create",
    "start": "803370",
    "end": "810660"
  },
  {
    "text": "persistent volumes and they'll when they create the persistent volume so associate it with the storage class they",
    "start": "810660",
    "end": "816029"
  },
  {
    "text": "created is step number two step number three the user will create a claim and",
    "start": "816029",
    "end": "821940"
  },
  {
    "text": "in that claim they'll specify the storage class that they want then the binder comes in it'll search the",
    "start": "821940",
    "end": "828180"
  },
  {
    "text": "persistent volume pool for a volume that matches on size access mode and storage",
    "start": "828180",
    "end": "835589"
  },
  {
    "text": "class so those three characteristics and finally the binder will go through the two-step process the two transaction",
    "start": "835589",
    "end": "841680"
  },
  {
    "text": "process to actually bind the volume to the claim real simple stuff for this one",
    "start": "841680",
    "end": "849560"
  },
  {
    "text": "but this gets us to something more interesting which is a dynamic provisioning so",
    "start": "849560",
    "end": "854900"
  },
  {
    "text": "dynamic provisioning is the automatic creation of volumes so we could either be a cloud provider creating the volumes",
    "start": "854900",
    "end": "861750"
  },
  {
    "text": "it could be a standalone application creating the volumes it could be somebody locked in a cage the crates the",
    "start": "861750",
    "end": "867540"
  },
  {
    "text": "volumes it's it's really anything but it's really done at the at the time that the claim is created I in our alpha",
    "start": "867540",
    "end": "875459"
  },
  {
    "text": "version of dynamic provisioning we had a single provision or per cluster and it was really only supported by cloud",
    "start": "875459",
    "end": "881580"
  },
  {
    "text": "providers so AWS GCE cinder we had provisioners there and but it was you",
    "start": "881580",
    "end": "888300"
  },
  {
    "text": "could only have one provision in the in the cluster but with storage classes in",
    "start": "888300",
    "end": "893339"
  },
  {
    "text": "our beta release of dynamic provisioning we really enabled multiple provisioners per cluster and with multiple",
    "start": "893339",
    "end": "900060"
  },
  {
    "text": "provisioners you could have different properties for your provisioner if you're an AWS it allows you to have SSDs",
    "start": "900060",
    "end": "906149"
  },
  {
    "text": "versus spinning discs you can have different you could it's you know special specify the I ops",
    "start": "906149",
    "end": "914000"
  },
  {
    "text": "or different performance characteristics and divide your persistent volumes of by",
    "start": "914000",
    "end": "921059"
  },
  {
    "text": "there was different properties then you also have entry or auditory",
    "start": "921059",
    "end": "928139"
  },
  {
    "text": "provisioners so there's there's a distinction there most of the entry stuff right now is cloud provider",
    "start": "928139",
    "end": "933649"
  },
  {
    "text": "our entry stuff does support multiple provisioners per cluster entry and then",
    "start": "933649",
    "end": "939479"
  },
  {
    "text": "out of tree you can also have multiple provisioners per cluster and you can even have a mix of these so you could",
    "start": "939479",
    "end": "946289"
  },
  {
    "text": "have 5 10 100 storage classes per cluster it really doesn't matter I and",
    "start": "946289",
    "end": "951509"
  },
  {
    "text": "they could be a combination of in and out a tree",
    "start": "951509",
    "end": "956509"
  },
  {
    "text": "so the the flow for for users requesting storage of a",
    "start": "957439",
    "end": "963569"
  },
  {
    "text": "storage class is really through the claim the claims the the user owned object so pretty much any communication",
    "start": "963569",
    "end": "969839"
  },
  {
    "text": "the user does for the framework is through the claim they'll create a claim and then I the the binder will look and",
    "start": "969839",
    "end": "977789"
  },
  {
    "text": "check if they're just something if there's a type that matches the claim entry and if it's so it'll call the",
    "start": "977789",
    "end": "983399"
  },
  {
    "text": "provisioning method that if not LLL call the it'll wait and let an outer tree provisioner which Yun demoed earlier",
    "start": "983399",
    "end": "990119"
  },
  {
    "text": "actually do the provisioning and the provisioner will base of volume is",
    "start": "990119",
    "end": "995189"
  },
  {
    "text": "supposed to be to create the volume based on the storage class so it's it's really up to the administrator make sure",
    "start": "995189",
    "end": "1000529"
  },
  {
    "text": "that what's being provision is what's specified in the storage class",
    "start": "1000529",
    "end": "1005349"
  },
  {
    "text": "so here's a list of our entry provision or types we have a cinder a double yes",
    "start": "1005829",
    "end": "1012049"
  },
  {
    "text": "GCE as your vSphere glossary FS are B D and Q bite oh wait I'm not sure how to",
    "start": "1012049",
    "end": "1019579"
  },
  {
    "text": "say that but all this stuff is baked in tree you don't have to do anything when you start Q if you have storage of this",
    "start": "1019579",
    "end": "1027199"
  },
  {
    "text": "type it's already there you don't have to stand out anything else up we hope to get this out of tree soon I mean I it's",
    "start": "1027199",
    "end": "1033649"
  },
  {
    "text": "on the storage to grow map to move some of this stuff out of tree and that's somewhat of a maintenance thing it's",
    "start": "1033649",
    "end": "1039860"
  },
  {
    "text": "also kind of as a proof of concept because we'd like all provisioning and eventually most of the volume types",
    "start": "1039860",
    "end": "1046428"
  },
  {
    "text": "moved out of tree so I put on here some some of the actual",
    "start": "1046429",
    "end": "1054800"
  },
  {
    "text": "yamo for each one of the entry provisioner types and this is probably",
    "start": "1054800",
    "end": "1060330"
  },
  {
    "text": "more for reference I'm not going to go over right now but it represents the parameters that each one of the entry",
    "start": "1060330",
    "end": "1066300"
  },
  {
    "text": "provisioners will actually accept and you could tweak these depending on what",
    "start": "1066300",
    "end": "1071700"
  },
  {
    "text": "you want actually wanted out of your storage class so kind of as a quick example",
    "start": "1071700",
    "end": "1077840"
  },
  {
    "text": "let's look at the Gluster fs1 so you have your rest URL your user your secret",
    "start": "1080570",
    "end": "1088020"
  },
  {
    "text": "name and secret namespace maybe you have multiple Gluster",
    "start": "1088020",
    "end": "1093230"
  },
  {
    "text": "packing storage providers and one slower and ones faster than the other in create",
    "start": "1093230",
    "end": "1098910"
  },
  {
    "text": "two storage classes and they were they would have different rest URLs and then different users and different different",
    "start": "1098910",
    "end": "1104430"
  },
  {
    "text": "secrets and that's pretty much goes for all the rest of them there's other parameters you can tweak with you know",
    "start": "1104430",
    "end": "1109920"
  },
  {
    "text": "defendant depending on the backing storage type",
    "start": "1109920",
    "end": "1114620"
  },
  {
    "start": "1115000",
    "end": "1115000"
  },
  {
    "text": "so the entry dynamic provisioning flow quite similar to the other stuff we have",
    "start": "1116270",
    "end": "1122270"
  },
  {
    "text": "the administrator creating the storage class we have the the binder in this this",
    "start": "1122270",
    "end": "1131190"
  },
  {
    "text": "scenario just sitting there listening starting up as part of the cube framework the user will come in and",
    "start": "1131190",
    "end": "1136680"
  },
  {
    "text": "create a claim and they will specify a storage class in their claim the binder will see that that storage class and",
    "start": "1136680",
    "end": "1144060"
  },
  {
    "text": "recognize they'll actually go and look at the storage class objects find the one with a matching name look at the",
    "start": "1144060",
    "end": "1150480"
  },
  {
    "text": "provisioner type and then if it recognizes that it's an entry provision",
    "start": "1150480",
    "end": "1155880"
  },
  {
    "text": "or type it'll make a call to the to the volume plugins provisioning method and",
    "start": "1155880",
    "end": "1162390"
  },
  {
    "text": "that provisioning method knows to go out and call out to the cloud provider to read the actual volume and then the",
    "start": "1162390",
    "end": "1171020"
  },
  {
    "text": "provisioning method also creates the persistent volume object as step number",
    "start": "1171020",
    "end": "1176460"
  },
  {
    "text": "five inputs in the volume pool and as while it's doing that it links the the",
    "start": "1176460",
    "end": "1183810"
  },
  {
    "text": "persistent volume the claim at the same time so the the binders currying the persistent volume and finding it to the",
    "start": "1183810",
    "end": "1189990"
  },
  {
    "text": "requesting claim kind of in the same step and that's so something else",
    "start": "1189990",
    "end": "1195480"
  },
  {
    "text": "doesn't come along after the white was created and claimed can't claim the resource",
    "start": "1195480",
    "end": "1201140"
  },
  {
    "text": "so out of tree provisioners if you worried eunsuk you went over this pretty extensively they can run as a",
    "start": "1202670",
    "end": "1209040"
  },
  {
    "text": "stand-alone application there's no there's no specification of what they",
    "start": "1209040",
    "end": "1214620"
  },
  {
    "text": "have to be it could be Java it could be you see it could be going it could be shell script basically whatever you want",
    "start": "1214620",
    "end": "1221400"
  },
  {
    "text": "but it needs to be able to communicate to the API server it'll listen for events from the API",
    "start": "1221400",
    "end": "1226890"
  },
  {
    "text": "server it's meant to listen for new claim events and then of course for",
    "start": "1226890",
    "end": "1232710"
  },
  {
    "text": "provision storage based on the provision or type that recognizes the recent",
    "start": "1232710",
    "end": "1239700"
  },
  {
    "text": "changes we've added I put the provision or type in the claim right so it's so",
    "start": "1239700",
    "end": "1247380"
  },
  {
    "text": "they don't actually have to look at the storage class to know if they support a particular claim before we had to do",
    "start": "1247380",
    "end": "1253500"
  },
  {
    "text": "like a double reference you have to go and monitor the storage classes watch for new storage classes watch for types",
    "start": "1253500",
    "end": "1259200"
  },
  {
    "text": "and then monitor there once you see a provision or type you recognize watch for storage classes coming or claims",
    "start": "1259200",
    "end": "1266190"
  },
  {
    "text": "coming in with this storage class of that name there's out of three provisioners have",
    "start": "1266190",
    "end": "1272070"
  },
  {
    "text": "no explicit call by the volume binder it's up to the external provision or itself to listen for the claims and to",
    "start": "1272070",
    "end": "1279270"
  },
  {
    "text": "create storage based on the events coming in the binder is completely out of the picture in this and we have a",
    "start": "1279270",
    "end": "1286950"
  },
  {
    "text": "pretty solid example with our NFS provisioner it's something that we are trying to walkthrough incubation and",
    "start": "1286950",
    "end": "1293660"
  },
  {
    "text": "it should be kind of the you know the basis for any out of tree provisioners",
    "start": "1293660",
    "end": "1299820"
  },
  {
    "text": "that people may write it is their question",
    "start": "1299820",
    "end": "1303440"
  },
  {
    "text": "yeah that's a good question so we've talked about some certification potential potentially certifying",
    "start": "1320080",
    "end": "1326740"
  },
  {
    "text": "auditory provisioners truth is we can't really control it I mean if it's on a tree and a storage vendor wants to write",
    "start": "1326740",
    "end": "1334010"
  },
  {
    "text": "their provision or they're allowed to I think every likes poorly on the vendor if it's if it breaks wait",
    "start": "1334010",
    "end": "1342790"
  },
  {
    "text": "yeah so that's I think that's probably where we'll go is we'll end up if you",
    "start": "1347350",
    "end": "1352520"
  },
  {
    "text": "want to be listed on our you know external provision or page of supported provisioning types you'd have to go",
    "start": "1352520",
    "end": "1359390"
  },
  {
    "text": "through like a series of checks but we don't have that in place yet this stuff",
    "start": "1359390",
    "end": "1364850"
  },
  {
    "text": "is I mean it was committed like two days ago so cool it's pretty new",
    "start": "1364850",
    "end": "1371350"
  },
  {
    "text": "yeah okay so out of tree provisioners their response to api events on its own with the the NFS provisioner we use the",
    "start": "1371980",
    "end": "1380540"
  },
  {
    "text": "go client library and we watch the api server that way like i said you can even",
    "start": "1380540",
    "end": "1386210"
  },
  {
    "text": "do this in shell script and just use cube cuddle and a loop to look for new persistent volume claims and provision",
    "start": "1386210",
    "end": "1392090"
  },
  {
    "text": "that way so the flow for this",
    "start": "1392090",
    "end": "1397720"
  },
  {
    "start": "1395000",
    "end": "1395000"
  },
  {
    "text": "same step admin creates a storage class they as a second step they will create",
    "start": "1397720",
    "end": "1405980"
  },
  {
    "text": "or run an external provisioner and this may be something that runs on a stand-alone node it may be something",
    "start": "1405980",
    "end": "1412730"
  },
  {
    "text": "that runs as part of the cube framework it may be something that's a completely",
    "start": "1412730",
    "end": "1418070"
  },
  {
    "text": "manual process that sends an email out it's really up to whoever is authoring the external provision or how this works",
    "start": "1418070",
    "end": "1425110"
  },
  {
    "text": "it's important to follow you know to follow the API mechanism that was",
    "start": "1425110",
    "end": "1431480"
  },
  {
    "text": "mentioned in the on stalk that's how you know we make sure that the binder knows that this value that's a volume that's",
    "start": "1431480",
    "end": "1438470"
  },
  {
    "text": "created by the external provisioner is valid but how this is actually done is really up to the administrator so step",
    "start": "1438470",
    "end": "1446240"
  },
  {
    "text": "number one admin creates the storage class step number two they install and launch a provisioner",
    "start": "1446240",
    "end": "1451350"
  },
  {
    "text": "they'll point the provisioner back to the cube API server if step number three",
    "start": "1451350",
    "end": "1456690"
  },
  {
    "text": "a user will come in and create the claim that new claimed event will come to the provisioner who is sitting there monitoring the API server for new claim",
    "start": "1456690",
    "end": "1463710"
  },
  {
    "text": "events and then the provisioner will actually create the physical volume",
    "start": "1463710",
    "end": "1469309"
  },
  {
    "text": "maybe that's a call out to glass or maybe it's a call out to a cloud provider maybe they put a zip disk and a",
    "start": "1469309",
    "end": "1475530"
  },
  {
    "text": "drive they'll do something that creates a physical volume and then they'll create a persistent volume object that",
    "start": "1475530",
    "end": "1482789"
  },
  {
    "text": "maps to that that physical volume and then as step number six during the",
    "start": "1482789",
    "end": "1489600"
  },
  {
    "text": "creation that persistent volume object they'll also bind it to the claim so it's creating the persistent volume and",
    "start": "1489600",
    "end": "1495179"
  },
  {
    "text": "binding the claim is kind of the same kind of same process",
    "start": "1495179",
    "end": "1500809"
  },
  {
    "start": "1503000",
    "end": "1503000"
  },
  {
    "text": "so here's the slightest open I didn't really have to talk about because it's probably too small for you guys to see but this is the the yamo for a fully",
    "start": "1504140",
    "end": "1512640"
  },
  {
    "text": "bound volume and claim we have a couple annotations off to the",
    "start": "1512640",
    "end": "1519059"
  },
  {
    "text": "left these are added by the binders so we know that the binder was actually the one completing the vine between the",
    "start": "1519059",
    "end": "1526559"
  },
  {
    "text": "claim and the volume and the user didn't just specify these values when they created the claim and if they did",
    "start": "1526559",
    "end": "1533460"
  },
  {
    "text": "there's some use cases where that's valid but we want to know about it so if we have to do a recovery step we can",
    "start": "1533460",
    "end": "1539309"
  },
  {
    "text": "tell if it was the user that created the hard link the two together if the binder actually did and we have to do some kind",
    "start": "1539309",
    "end": "1545159"
  },
  {
    "text": "of recover if there's a failure we have a volume name here in the claim",
    "start": "1545159",
    "end": "1550669"
  },
  {
    "text": "point since since the persistent volume is a globally scoped thing the the volume name has to be unique and then",
    "start": "1550669",
    "end": "1557909"
  },
  {
    "text": "you know you see the UID of the persistent volume claim mapped over here to the persistent volume",
    "start": "1557909",
    "end": "1564980"
  },
  {
    "text": "and that is it I'm going to open it up for questions",
    "start": "1566360",
    "end": "1571759"
  },
  {
    "text": "you guys have a thousand questions or none",
    "start": "1572150",
    "end": "1576470"
  },
  {
    "text": "watch our this thing forget it I'll repeat it",
    "start": "1577740",
    "end": "1584280"
  },
  {
    "text": "by the claim so though once it's bound to the claim the user will specify the",
    "start": "1591809",
    "end": "1597520"
  },
  {
    "text": "claim in their body",
    "start": "1597520",
    "end": "1600240"
  },
  {
    "text": "so that's the the core claim concept",
    "start": "1613890",
    "end": "1619210"
  },
  {
    "text": "right is like you specify the claim name in your pod and then you map that to like a directory",
    "start": "1619210",
    "end": "1625559"
  },
  {
    "text": "so it's it's specified in the pod so the claim name is specified in the pod and that's how you'd write Joey",
    "start": "1625559",
    "end": "1633150"
  },
  {
    "text": "yes yes so don't check the pool to see if if one already exists and then if it",
    "start": "1648580",
    "end": "1654380"
  },
  {
    "text": "doesn't it'll sit and wait in for an external provision to come in to create one",
    "start": "1654380",
    "end": "1660549"
  },
  {
    "text": "you know once you release the claim it's up to the provisioner to delete it so each provisioner should implement a",
    "start": "1665860",
    "end": "1672200"
  },
  {
    "text": "delete method as well",
    "start": "1672200",
    "end": "1675279"
  },
  {
    "text": "yeah instead of deleting it you could scrub it and put it back in the pool if you wanted you you shouldn't but you",
    "start": "1688990",
    "end": "1695810"
  },
  {
    "text": "could no resize yet everybody wants resizes on",
    "start": "1695810",
    "end": "1704360"
  },
  {
    "text": "the storage SIG's agenda for sure but resize and a snapshot and stuff we're",
    "start": "1704360",
    "end": "1710180"
  },
  {
    "text": "still looking at yes there's a lot of debate about it",
    "start": "1710180",
    "end": "1717010"
  },
  {
    "text": "local storage isn't something that we've fully realized yet so we are hoping",
    "start": "1719620",
    "end": "1726200"
  },
  {
    "text": "someday soon to have persistent volumes with local storage and that's for like you wonder for like",
    "start": "1726200",
    "end": "1733040"
  },
  {
    "text": "a warm cache or something right you yeah yeah someday soon",
    "start": "1733040",
    "end": "1740320"
  },
  {
    "text": "other questions",
    "start": "1741400",
    "end": "1744820"
  },
  {
    "text": "premiering that's we've lump mirroring probably in with snapshot replication type of stuff some if depending on the",
    "start": "1748200",
    "end": "1756490"
  },
  {
    "text": "file system you use it makes supported natively I know Gloucester does like replication so you may get it for free",
    "start": "1756490",
    "end": "1762580"
  },
  {
    "text": "depending on your file system type",
    "start": "1762580",
    "end": "1766350"
  },
  {
    "text": "to say that he anything",
    "start": "1777360",
    "end": "1781100"
  },
  {
    "text": "no we do have an EFS voluntary oh so yes if the NFS provisioner would be related",
    "start": "1782920",
    "end": "1790040"
  },
  {
    "text": "to Amazon's EFS so there is an EFS provision right in tree we don't we just",
    "start": "1790040",
    "end": "1795920"
  },
  {
    "text": "do ABS okay so no we don't have support for you",
    "start": "1795920",
    "end": "1801760"
  },
  {
    "text": "yeah yeah so you could write it any FS",
    "start": "1802420",
    "end": "1809420"
  },
  {
    "text": "provision or then maybe we will after you know after we catch our breath room cube gun",
    "start": "1809420",
    "end": "1815830"
  },
  {
    "text": "anything else you guys are easy",
    "start": "1815830",
    "end": "1821080"
  },
  {
    "text": "cool thanks [Applause]",
    "start": "1821080",
    "end": "1829419"
  }
]