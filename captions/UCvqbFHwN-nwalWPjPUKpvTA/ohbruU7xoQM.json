[
  {
    "text": "hi everyone my name is kindall rhen and I am so excited to be here today for",
    "start": "120",
    "end": "5359"
  },
  {
    "text": "Dapper Day 2024 to talk all things Dapper integration so I hope you've",
    "start": "5359",
    "end": "11000"
  },
  {
    "text": "enjoyed so far the Dapper Day experience you've heard a lot about how Dapper is being used by end users to power amazing",
    "start": "11000",
    "end": "18439"
  },
  {
    "text": "um experiences within their applications and I'm really really excited I feel like putting this together was an",
    "start": "18439",
    "end": "24080"
  },
  {
    "text": "adventure for me just diving into all of the progress Dappers made and all of the really cool innovations that are",
    "start": "24080",
    "end": "29560"
  },
  {
    "text": "happening within the Dapper space both on the product side and also within the open source ecosystem so for a little",
    "start": "29560",
    "end": "35879"
  },
  {
    "text": "bit of context as I mentioned uh I am a product manager at a company called diagrid diagrid is founded by the",
    "start": "35879",
    "end": "42440"
  },
  {
    "text": "co-founders of the Dapper project so Mark Fussell and yuron Schneider who I believe uh kicked off Dapper Day today",
    "start": "42440",
    "end": "49239"
  },
  {
    "text": "uh before that I was working at Microsoft and worked a little bit on the Azure container apps platform as a",
    "start": "49239",
    "end": "54399"
  },
  {
    "text": "product manager so super excited to shed some light on the great work being done both at Microsoft at diagrid and across",
    "start": "54399",
    "end": "60800"
  },
  {
    "text": "the uh the broader Dapper community so let's go ahead and dive",
    "start": "60800",
    "end": "66080"
  },
  {
    "text": "in I think a really good place for us to start today is just to acknowledge the",
    "start": "66080",
    "end": "71360"
  },
  {
    "text": "insane Dapper growth over the past several years so Dapper created in 2019",
    "start": "71360",
    "end": "76560"
  },
  {
    "text": "contributed to the cncf a couple of years later has now become the 10th largest cncf project with over 3,000",
    "start": "76560",
    "end": "83520"
  },
  {
    "text": "contributors I think this just continues to reiterate that the Dapper value proposition is extremely clear and that",
    "start": "83520",
    "end": "89520"
  },
  {
    "text": "dapper continues to solidify itself as an API standard for building distributed",
    "start": "89520",
    "end": "95759"
  },
  {
    "text": "applications um in addition to the Dapper value proposition continuing to",
    "start": "95759",
    "end": "100920"
  },
  {
    "text": "to strengthen and the user base growing uh existing users are also using Dapper",
    "start": "100920",
    "end": "106079"
  },
  {
    "text": "for more um you know intensive workloads so for example if we take a look at some",
    "start": "106079",
    "end": "111360"
  },
  {
    "text": "of the cncf cas studies we can see that HDFC bank has over 700 M 750 million",
    "start": "111360",
    "end": "118000"
  },
  {
    "text": "transactions that they're executing monthly and that system is dependent on Dapper uh same with deao right 27.5",
    "start": "118000",
    "end": "125119"
  },
  {
    "text": "million events being published every 100 hours um and they're using Dapper to do this so they're obviously running Dapper",
    "start": "125119",
    "end": "131760"
  },
  {
    "text": "at extremely high scale um and so there are new considerations that come into play when operating Dapper at that level",
    "start": "131760",
    "end": "139400"
  },
  {
    "text": "and then also another consideration is that with the growth um there's also new",
    "start": "139400",
    "end": "144440"
  },
  {
    "text": "products new technologies that are coming out to make um it easier for Dapper to be used right enabling",
    "start": "144440",
    "end": "150319"
  },
  {
    "text": "Technologies so there are new deployment models not just on kubernetes but also outside of kubernetes that are helping",
    "start": "150319",
    "end": "156200"
  },
  {
    "text": "bring Dapper to a broader developer audience so that they can get this very clear benefit that uh existing Dapper",
    "start": "156200",
    "end": "162480"
  },
  {
    "text": "users are getting today I also wanted to just highlight if you haven't already checked it out um",
    "start": "162480",
    "end": "168480"
  },
  {
    "text": "check out the state of dapper report from 2023 as a quick summary uh this data just really lends well to the",
    "start": "168480",
    "end": "174920"
  },
  {
    "text": "points that I was just making uh over 150 individuals were surveyed who use Dapper on a daily basis and it was very",
    "start": "174920",
    "end": "181280"
  },
  {
    "text": "clear Dapper users see a lot of value in this API abstraction if you take a",
    "start": "181280",
    "end": "186440"
  },
  {
    "text": "closer look at the survey you'll see things like swapability of components and the vendor neutrality were obviously",
    "start": "186440",
    "end": "192040"
  },
  {
    "text": "highlighted as major benefits and then uh there was also some uh some things",
    "start": "192040",
    "end": "197680"
  },
  {
    "text": "that users disliked and a lot of that was around troubleshooting and then uh running on kubernetes which can be",
    "start": "197680",
    "end": "204360"
  },
  {
    "text": "challenging to manage um but also deploying to non- kubernetes environments so you can see that evidence here in the data really",
    "start": "204360",
    "end": "211200"
  },
  {
    "text": "troubleshooting being 50% of respondents uh finding that to be their their top dislike but then also a few finding it",
    "start": "211200",
    "end": "218799"
  },
  {
    "text": "hard to deploy to both kubernetes and non kubernetes environments and I do love the 13 people who said they don't",
    "start": "218799",
    "end": "225159"
  },
  {
    "text": "dislike anything right uh I've never really seen someone without a uh you know who loves a product that much but",
    "start": "225159",
    "end": "231840"
  },
  {
    "text": "clearly that just goes to reemphasize how great Dapper is and how much progress the pro project has made and",
    "start": "231840",
    "end": "238319"
  },
  {
    "text": "then I think evidenced in the previous point is that Dapper users did also indicate the need for more Operational",
    "start": "238319",
    "end": "244319"
  },
  {
    "text": "Support so things like better observability uh was indicated by 74% of",
    "start": "244319",
    "end": "249720"
  },
  {
    "text": "people they think that'd be valuable uh features around visualization um best practice recommendations and then even",
    "start": "249720",
    "end": "255640"
  },
  {
    "text": "automatic certificate rotation um you know managing and rotating certificates within Dapper can prove challenging the",
    "start": "255640",
    "end": "262160"
  },
  {
    "text": "Dapper certificates um you know are self-signed and essentially expire after a year and so that can be a point of of",
    "start": "262160",
    "end": "269639"
  },
  {
    "text": "outage for users if they don't put into place a system for rotating those certificates at expiration time now I",
    "start": "269639",
    "end": "276639"
  },
  {
    "text": "think it's a good time to start diving into some of the nitty-gritty so traditionally when",
    "start": "276639",
    "end": "282960"
  },
  {
    "text": "Dapper is installed into a kubernetes cluster the Dapper control plane is going to be in charge of injecting the",
    "start": "282960",
    "end": "288280"
  },
  {
    "text": "Dapper D sideart into applications based on you know if the Dapper annotation is available on the deployment which is",
    "start": "288280",
    "end": "294759"
  },
  {
    "text": "what we're mostly familiar with and while this is still the default strategy there are some use cases that do require",
    "start": "294759",
    "end": "300560"
  },
  {
    "text": "a different approach so that can actually be enabled by a Dapper shared",
    "start": "300560",
    "end": "306080"
  },
  {
    "text": "which is something the open source Community um is is currently working on you can find this in the Dapper sandbox",
    "start": "306080",
    "end": "311919"
  },
  {
    "text": "project on GitHub um it was initially called Dapper ambient but essentially the goal here is that you can deploy",
    "start": "311919",
    "end": "318199"
  },
  {
    "text": "Dapper applications with the Dapper d uh running as a Damon set or a deployment on top of kubernetes instead of being",
    "start": "318199",
    "end": "325080"
  },
  {
    "text": "injected into uh the application pod so here's kind of the two deployment models that are supported for Dapper shared a",
    "start": "325080",
    "end": "331560"
  },
  {
    "text": "Damon set meaning you can basically deploy a single uh you know Dapper sidecar instance uh per app ID on each",
    "start": "331560",
    "end": "338120"
  },
  {
    "text": "node or the deployment model where you basically uh just have a single instance of that deployment and keep in mind",
    "start": "338120",
    "end": "344319"
  },
  {
    "text": "obviously if you're running on a large cluster that deployment could potentially be placed on a different node than uh the application workload",
    "start": "344319",
    "end": "350720"
  },
  {
    "text": "itself which can introduce some level of latency so there are some trade-offs to to the Dapper shared model um as well as",
    "start": "350720",
    "end": "357120"
  },
  {
    "text": "a sidecar model uh that you can look at the um the blog post I just referenced in more detail for some of those",
    "start": "357120",
    "end": "363400"
  },
  {
    "text": "trade-offs a good example of when you might want to use Dapper shared is in the case you want to decouple the life",
    "start": "363400",
    "end": "369080"
  },
  {
    "text": "cycle of the application workload from the Dapper apis um and this really lends itself well to kind of function models",
    "start": "369080",
    "end": "377000"
  },
  {
    "text": "like K native and open function where you might want to keep you know the Dapper side car available because it's",
    "start": "377000",
    "end": "384199"
  },
  {
    "text": "waiting to respond Pro to you know for example events that are coming off a pub sub broker where the workload itself is",
    "start": "384199",
    "end": "391039"
  },
  {
    "text": "Idle so you don't necessarily want to scale the two together but instead want to keep the Dapper side car a",
    "start": "391039",
    "end": "396720"
  },
  {
    "text": "synchronous capabilities available um while the application workload itself is idle and scaled to",
    "start": "396720",
    "end": "402280"
  },
  {
    "text": "zero so now I just want to briefly cover these two serverless open source",
    "start": "402280",
    "end": "407680"
  },
  {
    "text": "projects one being open function and one being K native and just highlight a little bit about how Dapper integrates",
    "start": "407680",
    "end": "413880"
  },
  {
    "text": "with and works with these platforms so open function really provides an endtoend solution for building a",
    "start": "413880",
    "end": "420960"
  },
  {
    "text": "functions as a service platform on top of kubernetes everything from like actually building the function",
    "start": "420960",
    "end": "427000"
  },
  {
    "text": "containerizing it uh serving the function and scaling it on top of kubernetes and then also the Eventing",
    "start": "427000",
    "end": "433120"
  },
  {
    "text": "aspect um of the of the functions themselves and if you see here it actually supports um an asynchronous",
    "start": "433120",
    "end": "439800"
  },
  {
    "text": "runtime aspect using Dapper and kada for scaling uh based on events things like",
    "start": "439800",
    "end": "445160"
  },
  {
    "text": "that and then also synchronous run times one of them being um you know the http add-on from kada and another one being K",
    "start": "445160",
    "end": "451639"
  },
  {
    "text": "native and uh what's interesting here is that because open function was basically built on Dapper from day one it",
    "start": "451639",
    "end": "459120"
  },
  {
    "text": "eliminated the need for the open function team to basically reimplement the connectivity to the various",
    "start": "459120",
    "end": "465080"
  },
  {
    "text": "infrastructure services for each and every language that was supported um within their functions so for example if",
    "start": "465080",
    "end": "472159"
  },
  {
    "text": "you think about just Java alone if Java needs to publish or subscribe to messages on a given message broker um",
    "start": "472159",
    "end": "478759"
  },
  {
    "text": "they would have to Implement a ton of sdks in order to ensure that Java can",
    "start": "478759",
    "end": "484360"
  },
  {
    "text": "talk to Kafka Nats service bus so on and so forth so instead um that entire",
    "start": "484360",
    "end": "489879"
  },
  {
    "text": "process was built on top of dapper uh which is pretty awesome and then that",
    "start": "489879",
    "end": "495120"
  },
  {
    "text": "basically abstracts away the backends from the the functions themselves as we can see here uh so Dapper is supported",
    "start": "495120",
    "end": "502520"
  },
  {
    "text": "in open function um and Dapper Powers their bindings pubsub and State",
    "start": "502520",
    "end": "508080"
  },
  {
    "text": "Management now now another really interesting thing here is that um within open function they did identify that the",
    "start": "508080",
    "end": "516120"
  },
  {
    "text": "sidecar injection model for each function wasn't necessarily working super well right it wasn't necessarily",
    "start": "516120",
    "end": "522880"
  },
  {
    "text": "optimized for a kind of scale to zero scenario and so what they basically did",
    "start": "522880",
    "end": "528080"
  },
  {
    "text": "is created this proxy service and this is several versions ago so this has been around for a while but what it would do",
    "start": "528080",
    "end": "533240"
  },
  {
    "text": "is it would create essentially a single Dapper service per function and then each time the fun function scaled and",
    "start": "533240",
    "end": "540040"
  },
  {
    "text": "you know a new instance was created it would use the same side car um so what that allowed them to do is really reduce",
    "start": "540040",
    "end": "546079"
  },
  {
    "text": "the cold start and the function startup Time by um creating this proxy and so a good example of how Dapper shared",
    "start": "546079",
    "end": "552600"
  },
  {
    "text": "basically already has a specific use case because obviously open function had to already solve this",
    "start": "552600",
    "end": "558320"
  },
  {
    "text": "problem and then uh you know when it comes to K native it's a little bit less of an opinionated platform so if you",
    "start": "558320",
    "end": "563839"
  },
  {
    "text": "need more flexibility some people tend to to gravitate towards K native um K native support it's using kind of the",
    "start": "563839",
    "end": "570160"
  },
  {
    "text": "Native Dapper um model where you can annotate a partic particular function um",
    "start": "570160",
    "end": "575720"
  },
  {
    "text": "that function is running on kubernetes and then ultimately if Dapper is enabled um it can make use of the Dapper apis",
    "start": "575720",
    "end": "582680"
  },
  {
    "text": "from the the application code um but a good example would uh of a product that",
    "start": "582680",
    "end": "587760"
  },
  {
    "text": "could benefit from or a project that can benefit from Dapper shared would be K native because now they can focus on uh",
    "start": "587760",
    "end": "594519"
  },
  {
    "text": "kind of the combination of daper shared plus the K native runtime and then K for scaling and you can kind of build your",
    "start": "594519",
    "end": "601000"
  },
  {
    "text": "own platform using uh using these Primitives so now that we've talked",
    "start": "601000",
    "end": "607279"
  },
  {
    "text": "about some of the open-source function related projects and how they integrate",
    "start": "607279",
    "end": "613240"
  },
  {
    "text": "with Dapper I want to talk a little bit about some hosting options uh that also provide Dapper capabilities but also",
    "start": "613240",
    "end": "619920"
  },
  {
    "text": "abstract away even more of the infrastructure and operations overhead so a good example of this is azure",
    "start": "619920",
    "end": "626680"
  },
  {
    "text": "container apps Azure container apps allows you to create uh containers that",
    "start": "626680",
    "end": "632040"
  },
  {
    "text": "scale all the way down to zero um and also completely manages and abstracts Away Dapper but still allows you to use",
    "start": "632040",
    "end": "638600"
  },
  {
    "text": "the Dapper apis so if you've never used container apps before instead of deploying to a kubernetes environment",
    "start": "638600",
    "end": "644880"
  },
  {
    "text": "you instead get this abstracted concept called a container apps environment um there is no access to the kubernetes API",
    "start": "644880",
    "end": "652000"
  },
  {
    "text": "so it's really providing a developer experience on top of kubernetes um you create the concept of",
    "start": "652000",
    "end": "657600"
  },
  {
    "text": "what's called a container app um which is kind of akin to like a pod or deployment in uh kubernetes and then you",
    "start": "657600",
    "end": "664839"
  },
  {
    "text": "essentially provide Dapper configuration on like the armor bicep deployment template to enable Dapper so when you",
    "start": "664839",
    "end": "672320"
  },
  {
    "text": "enable Dapper on a container app the container apps platform completely handles the sidecar injection it handles",
    "start": "672320",
    "end": "678760"
  },
  {
    "text": "the Dapper control plane deployment the upgrades the uh you know you name it the application rollouts everything from an",
    "start": "678760",
    "end": "685800"
  },
  {
    "text": "operations perspective around Dapper is completely managed for you you and a lot of the concepts are very similar to open",
    "start": "685800",
    "end": "691959"
  },
  {
    "text": "source Concepts so for example um there's the concept of components that you can deploy at the uh environment",
    "start": "691959",
    "end": "697920"
  },
  {
    "text": "level that are shared by multiple container apps and all of the apis are accessible via the existing Dapper sdks",
    "start": "697920",
    "end": "705800"
  },
  {
    "text": "and then another really nice thing is that kada is also integrated into the Container apps platform so it allows you",
    "start": "705800",
    "end": "712120"
  },
  {
    "text": "to scale both your application and the Dapper side car based on events and similar to open function the container",
    "start": "712120",
    "end": "719560"
  },
  {
    "text": "apps platform also has a um a proxy that's built in to ensure that the Dapper side car can scale um when new",
    "start": "719560",
    "end": "726680"
  },
  {
    "text": "events arrive even if your workload has scaled down to zero uh another really cool update that",
    "start": "726680",
    "end": "733000"
  },
  {
    "text": "I uh that I happened after I left the team a year ago is that the container apps environment now hosts not only",
    "start": "733000",
    "end": "739839"
  },
  {
    "text": "container apps and job objects but it can also host Azure functions so if you're familiar with Azure the Azure",
    "start": "739839",
    "end": "746079"
  },
  {
    "text": "functions primitive um you can now deploy that into to an existing container apps environment so you can",
    "start": "746079",
    "end": "751440"
  },
  {
    "text": "have you know a container app um which is just a traditional application hosted in a Docker container um talking to a",
    "start": "751440",
    "end": "758480"
  },
  {
    "text": "containerized Azure function that has that opinionated functions programming model and you can use the Dapper",
    "start": "758480",
    "end": "764360"
  },
  {
    "text": "extension for Azure functions to basically allow functions and container apps to integrate with each other using",
    "start": "764360",
    "end": "770600"
  },
  {
    "text": "these managed Dapper side cars so if you haven't tried that out yet highly recommend but pretty cool stuff",
    "start": "770600",
    "end": "775920"
  },
  {
    "text": "happening over on the Azure side another another thing I want to highlight within",
    "start": "775920",
    "end": "781279"
  },
  {
    "text": "the hosted Services space is something that's very near and dear to my heart because it is the product that I'm in PM",
    "start": "781279",
    "end": "786680"
  },
  {
    "text": "for uh but recently we launched the uh diagrid Catalyst product at uh here at",
    "start": "786680",
    "end": "792480"
  },
  {
    "text": "diagrid and it's essentially a set of unified apis for messaging data and workflow that are powered by uh the",
    "start": "792480",
    "end": "798760"
  },
  {
    "text": "Dapper open source project so just to kind of draw a parallel as to how uh",
    "start": "798760",
    "end": "804040"
  },
  {
    "text": "this compares to the traditional Dapper deployment model right traditionally your code is hosted on kubernetes is",
    "start": "804040",
    "end": "809160"
  },
  {
    "text": "you're accessing the sidecar apis um over HTTP and grpc and then you're using components to connect to uh backing",
    "start": "809160",
    "end": "816839"
  },
  {
    "text": "resources so for looking at Catalyst you can now host your code absolutely anywhere um I know that's up for us",
    "start": "816839",
    "end": "823639"
  },
  {
    "text": "being like what do you mean anywhere and I mean anywhere right um Azure container apps has created a hosted Dapper experience specifically within a",
    "start": "823639",
    "end": "830000"
  },
  {
    "text": "container apps environment but this is really um abstracting away Dapper management for users that are calling",
    "start": "830000",
    "end": "835959"
  },
  {
    "text": "from any platform so this could be uh aw Us app Runner gcp Cloud run um container",
    "start": "835959",
    "end": "841480"
  },
  {
    "text": "Ops container instances you name it um your code can be hosted anywhere because the sidecar is now hosted in diagrid",
    "start": "841480",
    "end": "848519"
  },
  {
    "text": "catalyst so within our product we have this concept called an app ID which is very true to the open source daer",
    "start": "848519",
    "end": "855040"
  },
  {
    "text": "project and for each application running externally you create a uh a remote hosted app ID and this app ID you can",
    "start": "855040",
    "end": "862800"
  },
  {
    "text": "connect to the Dapper apis through it still over HTTP and grpc using the existing dapper sdks getting a lot of",
    "start": "862800",
    "end": "869959"
  },
  {
    "text": "the uh the same crosscutting concerns handled for you um today we provide five of the um 10 apis that are available in",
    "start": "869959",
    "end": "877240"
  },
  {
    "text": "Dapper open source and then on top of that in addition to having a connection",
    "start": "877240",
    "end": "882959"
  },
  {
    "text": "experience which is basically our version of of dapper components we also provide the ability for you to connect",
    "start": "882959",
    "end": "889399"
  },
  {
    "text": "and uh and use diagrid infrastructure so for people who are really looking for a serverless experience not just on the",
    "start": "889399",
    "end": "895759"
  },
  {
    "text": "sidecar um side but also on the infrastructure side side we provide these serverless scalable infrastructure",
    "start": "895759",
    "end": "901639"
  },
  {
    "text": "solutions that require very little um overhead and very little operations to deploy and manage so let's take a look",
    "start": "901639",
    "end": "909920"
  },
  {
    "text": "at a diagrid catalyst demo uh to get you all excited about uh what we've been working on I'll show you how to convert",
    "start": "909920",
    "end": "917639"
  },
  {
    "text": "the simple Pub sub example from the quick starts to use Catalyst here we can see the checkout service publishes a",
    "start": "917639",
    "end": "923440"
  },
  {
    "text": "message using the pub sub component then we'll have a declarative subscription which ensures all messages",
    "start": "923440",
    "end": "929800"
  },
  {
    "text": "that are delivered to the topic orders on the pubb broker are then delivered to the order processor on the route orders",
    "start": "929800",
    "end": "937120"
  },
  {
    "text": "when we're using Dapper what we'll traditionally do is use a multi-app run file to launch both the applications and",
    "start": "937120",
    "end": "943720"
  },
  {
    "text": "the Dapper side cars locally we can see here the expected output the orders are being published and also being",
    "start": "943720",
    "end": "951480"
  },
  {
    "text": "received now let's see Catalyst in action first we'll create a catalyst project and deploy a managed catalyst",
    "start": "951480",
    "end": "958800"
  },
  {
    "text": "pubsub broker this will ensure that we can easily use the pubsub API for this application next we'll get the project",
    "start": "958800",
    "end": "966199"
  },
  {
    "text": "where we can actually see the HTTP and grpc endpoints which will be used to connect the Dapper SDK to the remotely",
    "start": "966199",
    "end": "973199"
  },
  {
    "text": "hosted sidecars in Catalyst the sidecars are called app IDs so we'll create one app",
    "start": "973199",
    "end": "980319"
  },
  {
    "text": "ID for the checkout service and one app ID for the order processor Catalyst makes it easy for",
    "start": "980319",
    "end": "986759"
  },
  {
    "text": "Dapper developers to get up and running by allowing them to import existing Dapper manifests like subscriptions and",
    "start": "986759",
    "end": "992759"
  },
  {
    "text": "components into Catalyst subscriptions and connections here we can see we used the existing Dapper subscription and",
    "start": "992759",
    "end": "999720"
  },
  {
    "text": "created a catalyst subscription if we take a look at the project and all of the resources that",
    "start": "999720",
    "end": "1005880"
  },
  {
    "text": "we've deployed we'll see we have two application IDs a pub sub connection",
    "start": "1005880",
    "end": "1011279"
  },
  {
    "text": "representing a component and a pub sub broker which is managed infrastructure last but not least we have a declarative",
    "start": "1011279",
    "end": "1017800"
  },
  {
    "text": "subscription which makes her sure that the order processor will receive messages sent to the broker with the",
    "start": "1017800",
    "end": "1024798"
  },
  {
    "text": "Catalyst resources in place we can scaffold a Dev config file which will ensure that the Dapper SDK has all of",
    "start": "1024799",
    "end": "1031160"
  },
  {
    "text": "the environment variables set to connect to the Catalyst project and the remote side cars we deployed we can also set",
    "start": "1031160",
    "end": "1037798"
  },
  {
    "text": "the application port for the order processor to ensure any messages that are sent to the appid order processor",
    "start": "1037799",
    "end": "1044678"
  },
  {
    "text": "are forwarded to the local machine on Port 706 for from the remote hosted",
    "start": "1044679",
    "end": "1050200"
  },
  {
    "text": "sidecar lastly we can set the application run commands to ensure both of our applications are launched at the",
    "start": "1050200",
    "end": "1056280"
  },
  {
    "text": "same time and the application ID connections are established lastly we can run our diagrid Dev config file",
    "start": "1056280",
    "end": "1063520"
  },
  {
    "text": "using the dev start command launching both of our applications and connecting the order processor app ID to our local",
    "start": "1063520",
    "end": "1069679"
  },
  {
    "text": "machine we can see that without Dapper in play we were still able to use the exact same code to connect to the remote",
    "start": "1069679",
    "end": "1076280"
  },
  {
    "text": "hosted sidecars unlocking a new deployment model as both of these Services could be running virtually",
    "start": "1076280",
    "end": "1083880"
  },
  {
    "text": "anywhere we'll take a quick peek at the catalst portal where we can see all of the resources we deploy to our project",
    "start": "1083960",
    "end": "1090120"
  },
  {
    "text": "both of our application IDs our Pub sub broker our managed",
    "start": "1090120",
    "end": "1095600"
  },
  {
    "text": "connection and our Pub sub subscription if you wanted to make use of an existing",
    "start": "1095600",
    "end": "1100720"
  },
  {
    "text": "service instead of a diagrid managed service you could create a connection the connections are very similar to",
    "start": "1100720",
    "end": "1107039"
  },
  {
    "text": "Dapper components and can make the selection of your choice to connect to the backing broker in this case uh for a",
    "start": "1107039",
    "end": "1112960"
  },
  {
    "text": "pubsub API there's also capabilities like the API Explorer which allows you",
    "start": "1112960",
    "end": "1119039"
  },
  {
    "text": "to see both the uh requests from the checkout service to the side car that's hosted in Catalyst and the outgoing",
    "start": "1119039",
    "end": "1126159"
  },
  {
    "text": "event which is sending that message through to the local orders route we can also use the callgraph the",
    "start": "1126159",
    "end": "1133280"
  },
  {
    "text": "call graph provides insight into all of the applications that we currently have a catalyst app ID for for and the",
    "start": "1133280",
    "end": "1139400"
  },
  {
    "text": "connections that they make use of you can explore these Catalyst features and many others by signing up",
    "start": "1139400",
    "end": "1146400"
  },
  {
    "text": "for our Early Access program I would love for you to check it out and see some of what we've been working on",
    "start": "1146400",
    "end": "1151520"
  },
  {
    "text": "including managed workflows which is pretty exciting so now that we've talked a little bit about hosting options I",
    "start": "1151520",
    "end": "1157480"
  },
  {
    "text": "want to focus in on uh you know developer tooling so one of the really",
    "start": "1157480",
    "end": "1162559"
  },
  {
    "text": "neat tools that has come out of Microsoft recently is net Aspire I personally was really impressed when I",
    "start": "1162559",
    "end": "1167880"
  },
  {
    "text": "tried out uh net Aspire it makes it super super easy for you to get up and running quickly building microservices",
    "start": "1167880",
    "end": "1174080"
  },
  {
    "text": "based inet so essentially what this allows you to do is create multiple projects that you coordinate and",
    "start": "1174080",
    "end": "1180039"
  },
  {
    "text": "orchestrate across um you can inject dependencies that are used and shared across these different Services um you",
    "start": "1180039",
    "end": "1186400"
  },
  {
    "text": "can also create um or consume a variety of Nate packages which are best practice",
    "start": "1186400",
    "end": "1191960"
  },
  {
    "text": "wrappers around a variety of infrastructure services so very similar to kind of what Dapper has provided in",
    "start": "1191960",
    "end": "1197559"
  },
  {
    "text": "terms of like the Dapper um component model and then additional tooling um for",
    "start": "1197559",
    "end": "1202640"
  },
  {
    "text": "vs code in the net CLI that help you get up and running and scaffold sample projects with doet Aspire so there was",
    "start": "1202640",
    "end": "1209640"
  },
  {
    "text": "recently a really great uh Dapper present or excuse me Aspire presentation on the Dapper Community call and they",
    "start": "1209640",
    "end": "1216000"
  },
  {
    "text": "showed how you can integrate Dapper with net Aspire I thought I'd throw together",
    "start": "1216000",
    "end": "1221400"
  },
  {
    "text": "a quick demo so that you can see this for yourself but I want to encourage you to watch the Dapper Community call that was recently hosted on I believe",
    "start": "1221400",
    "end": "1228200"
  },
  {
    "text": "February 6th or 7th 2024 and uh and see what it's all about we're now in inpire with Dapper",
    "start": "1228200",
    "end": "1235559"
  },
  {
    "text": "sample where we can see a web application which is going to make a Dapper service invitation request to a",
    "start": "1235559",
    "end": "1241760"
  },
  {
    "text": "backend API the backend API will return a weather forecast to the front end",
    "start": "1241760",
    "end": "1247919"
  },
  {
    "text": "which we can then check on the uh user interface the service default project is going to be used for those shared",
    "start": "1247919",
    "end": "1254120"
  },
  {
    "text": "dependencies across both of these net projects and then the app host is going to going to be used with any Aspire",
    "start": "1254120",
    "end": "1259520"
  },
  {
    "text": "solution and we'll essentially add both of these projects uh to the launch criteria along with uh two Dapper side",
    "start": "1259520",
    "end": "1266080"
  },
  {
    "text": "Cars one for each application uh and then we're going to do a net run and start that app host",
    "start": "1266080",
    "end": "1273480"
  },
  {
    "text": "project as you can see in the output we're able to navigate to an aspired dashboard this should look somewhat",
    "start": "1273480",
    "end": "1279640"
  },
  {
    "text": "familiar if you ever played around with project Thai but we can see both of the Dapper sidecar executables along with",
    "start": "1279640",
    "end": "1285520"
  },
  {
    "text": "both of the projects that we launched we can also navigate to the endpoint and see that the service invocation request",
    "start": "1285520",
    "end": "1291799"
  },
  {
    "text": "is successful in addition we can also see things like logs for both the Dapper",
    "start": "1291799",
    "end": "1297679"
  },
  {
    "text": "side car alongside of the application workload and then we can see things like",
    "start": "1297679",
    "end": "1303279"
  },
  {
    "text": "metrics for particular resources and even Trace logs which is quite impressive if you ask",
    "start": "1303279",
    "end": "1310679"
  },
  {
    "text": "me so now you got a quick look into net Aspire I believe there was also a Dapper",
    "start": "1311279",
    "end": "1316960"
  },
  {
    "text": "Day 2024 session on net Aspire so I recommend that you check that out for a deeper dive into this awesome",
    "start": "1316960",
    "end": "1325360"
  },
  {
    "text": "Innovation so another project that I think is worth checking out is the uh",
    "start": "1326039",
    "end": "1331400"
  },
  {
    "text": "the radius project this is an OP source project that came out of the Microsoft incubations team which is the team that",
    "start": "1331400",
    "end": "1338520"
  },
  {
    "text": "Dapper was initially created by so it's pretty cool to see additional Innovation happening in the cloud native space uh",
    "start": "1338520",
    "end": "1344520"
  },
  {
    "text": "from this team and I I actually think that they have some pretty good slides that I'm going to show you now and then we're just going to dive into uh into a",
    "start": "1344520",
    "end": "1351799"
  },
  {
    "text": "demo to make it a little bit more real so if we take a look at this radius example we can see that there's two",
    "start": "1351799",
    "end": "1357200"
  },
  {
    "text": "pretty basic Services a front-end container a backend container and both of them are using some sort of you know",
    "start": "1357200",
    "end": "1363000"
  },
  {
    "text": "state store or database if you're using radius you'll have this concept of a radius",
    "start": "1363000",
    "end": "1368640"
  },
  {
    "text": "environment so let's say that environment is local development for example uh the compute that our",
    "start": "1368640",
    "end": "1373679"
  },
  {
    "text": "applications are running on is just a generic kubernetes distribution and the recipes we have for local development",
    "start": "1373679",
    "end": "1379640"
  },
  {
    "text": "will be running redus and SQL as Docker containers but let's say we swap that",
    "start": "1379640",
    "end": "1384840"
  },
  {
    "text": "environment out uh we don't have to change our application code but instead can focus on uh using a managed",
    "start": "1384840",
    "end": "1391679"
  },
  {
    "text": "kubernetes platform on Azure for our compute and then ultimately we can have access to recipes which will provision",
    "start": "1391679",
    "end": "1398200"
  },
  {
    "text": "reddis in Azure or SQL DB managed in Azure and then if we wanted to swap over",
    "start": "1398200",
    "end": "1404200"
  },
  {
    "text": "and use an AWS provider or environment for example our application code will",
    "start": "1404200",
    "end": "1409240"
  },
  {
    "text": "run on kubernetes along with the radius control plane and then we essentially will have access to a new set of recipes",
    "start": "1409240",
    "end": "1415480"
  },
  {
    "text": "uh to provision AWS native resources a final thing I want to add",
    "start": "1415480",
    "end": "1421440"
  },
  {
    "text": "here before the demo is that Dapper is built into radius which is why it's in this presentation today and it makes it",
    "start": "1421440",
    "end": "1428159"
  },
  {
    "text": "easy for developers to easily add State Stores Pub sub Brokers and more to their",
    "start": "1428159",
    "end": "1433559"
  },
  {
    "text": "applications especially if you're already a daper user so let's dive into the demo and see what this looks",
    "start": "1433559",
    "end": "1439840"
  },
  {
    "text": "like so to start I'm going to initialize radius on a kubernetes cluster in this",
    "start": "1439840",
    "end": "1444960"
  },
  {
    "text": "case it's a local kind cluster running on my machine and I'm creating a new radius environment uh which is the",
    "start": "1444960",
    "end": "1451240"
  },
  {
    "text": "default environment and it's going to include that local Dev recipe pack so next up we can confirm that the",
    "start": "1451240",
    "end": "1458760"
  },
  {
    "text": "control plane was deployed to the radius system namespace and now we can look at the resources that will be deploying via",
    "start": "1458760",
    "end": "1465360"
  },
  {
    "text": "infrastructure as code so now we're taking a quick look at the bicep template which will create the uh the",
    "start": "1465360",
    "end": "1471960"
  },
  {
    "text": "resources on the cluster we can see we have an application called Dapper radius it's composed of two resources um this",
    "start": "1471960",
    "end": "1479200"
  },
  {
    "text": "backend resource which has uh extensions which will inject a Dapper side car with",
    "start": "1479200",
    "end": "1485200"
  },
  {
    "text": "an app ID of backend and then there's also this connection section which will specify a connection called orders which",
    "start": "1485200",
    "end": "1492000"
  },
  {
    "text": "references a state store which will be deployed by radius if we take a look look at that",
    "start": "1492000",
    "end": "1498240"
  },
  {
    "text": "State Store resource it's actually going to create a Dapper state store for us and it's going to use that default local",
    "start": "1498240",
    "end": "1505039"
  },
  {
    "text": "Dev uh you know recipe which is redus running in a container we have a second",
    "start": "1505039",
    "end": "1510080"
  },
  {
    "text": "resource which is part of the application it's called front end and it's also going to be using um a an app",
    "start": "1510080",
    "end": "1516320"
  },
  {
    "text": "ID through Dapper to find that backend application and it will also have a Dapper sideart injected with an app ID",
    "start": "1516320",
    "end": "1523320"
  },
  {
    "text": "of front end lastly here we are going to do a Rad",
    "start": "1523320",
    "end": "1528399"
  },
  {
    "text": "run on that bicep file and we'll see that it went out and created both the front end the back end and that state",
    "start": "1528399",
    "end": "1534200"
  },
  {
    "text": "store so if we go to our front end we can put in a few orders which are being",
    "start": "1534200",
    "end": "1539960"
  },
  {
    "text": "submitted and we should see that based on that uh kubernetes port forward we're actually able to see the logs of that",
    "start": "1539960",
    "end": "1546440"
  },
  {
    "text": "backend service and we can see that the order was persisted in that state",
    "start": "1546440",
    "end": "1551679"
  },
  {
    "text": "store another thing we can do is run um some radius commands to actually look at the application daap radius and see all",
    "start": "1551679",
    "end": "1558960"
  },
  {
    "text": "of the connections being used and we actually see that state store connection and the resources that are backing it",
    "start": "1558960",
    "end": "1564480"
  },
  {
    "text": "the Dapper component and the redus deployment so I think now would be a good time for us to segue into Dapper at",
    "start": "1564480",
    "end": "1571520"
  },
  {
    "text": "scale and talking a little bit more about operations for kubernetes-based Dapper",
    "start": "1571520",
    "end": "1577559"
  },
  {
    "text": "applications learnings have been found from users who are running Dapper at high scale and there's been consistent",
    "start": "1577559",
    "end": "1584240"
  },
  {
    "text": "challenges that they've had to overcome like certificate rotation keep keeping up with the latest version of dapper",
    "start": "1584240",
    "end": "1590320"
  },
  {
    "text": "managing this across multiple kubernetes clusters getting to the bottom uh of potential issues from a metrics and logs",
    "start": "1590320",
    "end": "1597440"
  },
  {
    "text": "perspective and so conductor is a product that was created by diagrid uh to essentially operate these Cloud",
    "start": "1597440",
    "end": "1603720"
  },
  {
    "text": "native applications that are Dapper enabled and running across multiple kubernetes",
    "start": "1603720",
    "end": "1609240"
  },
  {
    "text": "clusters so for the sake of time we're going to keep moving I do want to call out that uh there is a free trial of",
    "start": "1609240",
    "end": "1615440"
  },
  {
    "text": "conductor 30 days where you can essentially onboard a cluster for free and get all of the conductor insights",
    "start": "1615440",
    "end": "1620919"
  },
  {
    "text": "that help you understand your Dapper installation so if you want to try that out definitely do but now I'm going to",
    "start": "1620919",
    "end": "1626320"
  },
  {
    "text": "show you a quick conductor demo using the radius application that we deployed on our cluster in the previous",
    "start": "1626320",
    "end": "1633960"
  },
  {
    "text": "demo we're now dropped into the conductor console where we can onboard a new cluster",
    "start": "1634080",
    "end": "1639240"
  },
  {
    "text": "connection we provide a uni unique name for the cluster connection and also the kubernetes distribution of the target",
    "start": "1639240",
    "end": "1645679"
  },
  {
    "text": "cluster which in this case is kind which falls under other in this case I'm using the",
    "start": "1645679",
    "end": "1651640"
  },
  {
    "text": "non-production cluster type I also want to install Dapper now while Dapper already exists in my cluster I can",
    "start": "1651640",
    "end": "1658000"
  },
  {
    "text": "choose the latest version and have conductor take over the management and upgrade to the latest version I'm also",
    "start": "1658000",
    "end": "1664559"
  },
  {
    "text": "choosing to have the conductor agent roll out all of my applications once the upgrade has happened so that the side",
    "start": "1664559",
    "end": "1671039"
  },
  {
    "text": "cars receive the latest version while certificate management is provided because it's a non-production scenario",
    "start": "1671039",
    "end": "1677840"
  },
  {
    "text": "I'm going to skip over it and just have the automatic update upgrade of the agent",
    "start": "1677840",
    "end": "1683039"
  },
  {
    "text": "selected a command will then be generated that we can copy and Deploy on our Target cluster which should deploy",
    "start": "1683039",
    "end": "1689799"
  },
  {
    "text": "the conductor agent and establish connectivity from the cluster to",
    "start": "1689799",
    "end": "1695080"
  },
  {
    "text": "conductor I'm going to hit the radius application that we deployed with a bit of load to generate some metrics some",
    "start": "1695080",
    "end": "1700960"
  },
  {
    "text": "logs and some movement within the cluster that we can then visualize in conductor we are now back in conductor",
    "start": "1700960",
    "end": "1707640"
  },
  {
    "text": "and can see that the cluster was successfully onboarded we can get a quick glance at the Dapper control plane",
    "start": "1707640",
    "end": "1712880"
  },
  {
    "text": "status the agent status for conductor some deeper insights and then we see the Dapper version was successfully",
    "start": "1712880",
    "end": "1719880"
  },
  {
    "text": "upgraded we can also see configuration information about the desired Dapper settings that we want enforced on the",
    "start": "1719880",
    "end": "1727000"
  },
  {
    "text": "connected cluster and we can click in on the cluster to get more insights via the cluster",
    "start": "1727000",
    "end": "1733039"
  },
  {
    "text": "dashboard the cluster dashboard provides not only cluster insights but also application insights and component",
    "start": "1733039",
    "end": "1739360"
  },
  {
    "text": "insights uh this means bubbling up things like high advisories based on best practices that are recommended it",
    "start": "1739360",
    "end": "1746080"
  },
  {
    "text": "also means uh surfacing up any logs or metrics issues that may be arising within the cluster there's also an app",
    "start": "1746080",
    "end": "1753519"
  },
  {
    "text": "visualization included where you can see Dapper enabled apps the way they interact and the Dapper components that",
    "start": "1753519",
    "end": "1758960"
  },
  {
    "text": "they make use of if you're running Dapper in production I highly recommend you check out the 30-day free trial of conductor",
    "start": "1758960",
    "end": "1766480"
  },
  {
    "text": "Enterprise to see additional insights at the application and component levels",
    "start": "1766480",
    "end": "1771679"
  },
  {
    "text": "well that's about it we're almost out of time I hope that you learned a lot I hope you enjoyed this I did want to call",
    "start": "1771679",
    "end": "1777640"
  },
  {
    "text": "out and highlight just a few more projects and technologies that I recommend keeping on your radar one of",
    "start": "1777640",
    "end": "1783039"
  },
  {
    "text": "those is the cncf project crossplane uh it works really well with Dapper it",
    "start": "1783039",
    "end": "1788159"
  },
  {
    "text": "allows you to create provision configure cloud-based resources using the kubernetes API and it's really simple to",
    "start": "1788159",
    "end": "1795720"
  },
  {
    "text": "integrate Dapper into that model so I highly recommend checking it out also",
    "start": "1795720",
    "end": "1801279"
  },
  {
    "text": "wanted to say if you haven't heard of these projects these are other areas um of investment from a Dapper perspective",
    "start": "1801279",
    "end": "1807720"
  },
  {
    "text": "so dagger which is really in the devop space and then test containers which is really for Java developers and salb boy",
    "start": "1807720",
    "end": "1814760"
  },
  {
    "text": "who works within the Dapper community and also is uh one of my colleagues at diagrid has done a lot of really great",
    "start": "1814760",
    "end": "1820559"
  },
  {
    "text": "work around Dapper integration with test containers so last but not least there's a ton more out there new opportun unties",
    "start": "1820559",
    "end": "1827799"
  },
  {
    "text": "new areas for Dapper to continue uh you know innovating integrating and so I",
    "start": "1827799",
    "end": "1833279"
  },
  {
    "text": "hope that you feel more confident and understanding the broader Dabber landscape if you have any questions",
    "start": "1833279",
    "end": "1838799"
  },
  {
    "text": "please don't hesitate to reach out it's Kindle Roden on X or you can email me at",
    "start": "1838799",
    "end": "1844279"
  },
  {
    "text": "Kindle diagrid .io definitely reach out if you have any interest in Catalyst or conductor we would be happy to",
    "start": "1844279",
    "end": "1851279"
  },
  {
    "text": "help",
    "start": "1851279",
    "end": "1854279"
  }
]