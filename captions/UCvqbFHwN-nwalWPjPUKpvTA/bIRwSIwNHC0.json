[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "hi everyone and thanks for the intro and thanks for the for coming to my talk so my name is Martinez and I work at AI",
    "start": "0",
    "end": "7589"
  },
  {
    "text": "surveillant a company behind the cilium project so we work with biggest probably",
    "start": "7589",
    "end": "13920"
  },
  {
    "text": "and most sophisticated kubernetes users and we help them to network and secure",
    "start": "13920",
    "end": "19560"
  },
  {
    "text": "their clusters so all the work which I'm going to present in this talk is going",
    "start": "19560",
    "end": "25170"
  },
  {
    "text": "to be done in the cell in the scope of the cilium project which is an",
    "start": "25170",
    "end": "30689"
  },
  {
    "text": "open-source CNI plugin and also a network security plugin and all this",
    "start": "30689",
    "end": "36780"
  },
  {
    "text": "work which I'm presenting has been done together with Daniel Berkman Thomas Crafton unremarked ins and other members",
    "start": "36780",
    "end": "43260"
  },
  {
    "text": "from the Salima team so okay so this talk is about getting rid of cube proxy",
    "start": "43260",
    "end": "50100"
  },
  {
    "text": "from kubernetes and removing cube in a way that we can still have this cube",
    "start": "50100",
    "end": "57660"
  },
  {
    "text": "Renatus services functionality so the removing cube proxy has one nice",
    "start": "57660",
    "end": "63570"
  },
  {
    "text": "advantage that kubernetes can finally get rid of IP tables and netfilter",
    "start": "63570",
    "end": "68880"
  },
  {
    "text": "and those two are legacy technologies",
    "start": "68880",
    "end": "74310"
  },
  {
    "text": "which were built over 20 years ago so netfilter is a packet processing",
    "start": "74310",
    "end": "81479"
  },
  {
    "text": "framework in the linux kernel and which is used by IP tables and IP vs and IP",
    "start": "81479",
    "end": "88409"
  },
  {
    "text": "tables and IP vs is used by q proxy to implement the service abstraction and IP",
    "start": "88409",
    "end": "96240"
  },
  {
    "text": "tables or IP VSS use depending on their mode in which keep proxies running",
    "start": "96240",
    "end": "102329"
  },
  {
    "text": "so before we start getting into details I would like to show you some demo so",
    "start": "102329",
    "end": "108450"
  },
  {
    "text": "hopefully it's working so I have a little Q&A disclosure and I have some",
    "start": "108450",
    "end": "115049"
  },
  {
    "text": "pods there so it's nginx part 1 and 2 and I also have the quite anxious of",
    "start": "115049",
    "end": "123450"
  },
  {
    "text": "sorry for miss types so I have also one service and janeck service and i'll be",
    "start": "123450",
    "end": "131300"
  },
  {
    "text": "trying to access the service from a host so it works then I will try to access",
    "start": "131300",
    "end": "139910"
  },
  {
    "text": "the service from by using the cluster IP from pod it works and then I will try to",
    "start": "139910",
    "end": "149020"
  },
  {
    "text": "access the service from remote client so",
    "start": "149020",
    "end": "155230"
  },
  {
    "text": "over the note port and again it works and if we take a look into the IP tables",
    "start": "155230",
    "end": "162680"
  },
  {
    "text": "rules which we have you will see that we have no IP tables rules so maybe I'm",
    "start": "162680",
    "end": "169489"
  },
  {
    "text": "hiding those rules let's try to add iptables row let's say for word j drop",
    "start": "169489",
    "end": "177260"
  },
  {
    "text": "and we can see that oops we don't have even the IP tables modules installed in",
    "start": "177260",
    "end": "184640"
  },
  {
    "text": "the system and let's check whether we have the what was the kernel version",
    "start": "184640",
    "end": "192290"
  },
  {
    "text": "whether we have installed netfilter and the kernel whether we have compiled",
    "start": "192290",
    "end": "198110"
  },
  {
    "text": "it in and we see that config netfilter is not set so it basically means that the netfilter was compiled out of the",
    "start": "198110",
    "end": "205910"
  },
  {
    "text": "kernel so this talk is going to be about how we made it possible that you can",
    "start": "205910",
    "end": "210950"
  },
  {
    "text": "have the service abstraction without IP tables and netfilter ok let's move back so before we begin so",
    "start": "210950",
    "end": "218620"
  },
  {
    "start": "217000",
    "end": "288000"
  },
  {
    "text": "why do we want to get rid of IP tables and netfilter so on this slide I have",
    "start": "218620",
    "end": "225860"
  },
  {
    "text": "the kernel profile which I got while doing some network stress testing and long story short me and my colleague",
    "start": "225860",
    "end": "232549"
  },
  {
    "text": "we're trying to connect docker containers by using IP villain instead",
    "start": "232549",
    "end": "238970"
  },
  {
    "text": "of the traditional way with the virtual Ethernet peers and we were expecting to",
    "start": "238970",
    "end": "244100"
  },
  {
    "text": "see much lower latency but in the end we didn't see and we took a look into the",
    "start": "244100",
    "end": "250670"
  },
  {
    "text": "kernel to see what what's going on and we saw that quite a huge amount of time like percentage of total time of packet",
    "start": "250670",
    "end": "258260"
  },
  {
    "text": "processing was in iptables modules and netfilter module to which I put in bolt so basically that",
    "start": "258260",
    "end": "268370"
  },
  {
    "text": "cluster which we used for testing it even didn't have many iptables rules it just had some rules",
    "start": "268370",
    "end": "274639"
  },
  {
    "text": "which talkie installs by default and the situation because even worse when you",
    "start": "274639",
    "end": "281690"
  },
  {
    "text": "have the rules which iptables rules which match your traffic another reason is reliability of",
    "start": "281690",
    "end": "289690"
  },
  {
    "start": "288000",
    "end": "381000"
  },
  {
    "text": "netfilter and iptables so probably many of you got hit by this",
    "start": "289690",
    "end": "295310"
  },
  {
    "text": "issue where a cube dns was taking five seconds to replies to your dns request",
    "start": "295310",
    "end": "301310"
  },
  {
    "text": "and the culprit of the issue was that",
    "start": "301310",
    "end": "306460"
  },
  {
    "text": "netfilter had some race conditions which got fixed but I believe that still many",
    "start": "306460",
    "end": "312290"
  },
  {
    "text": "of you are experiencing this issue because you're probably running not",
    "start": "312290",
    "end": "317450"
  },
  {
    "text": "decent enough kernel version and it's understandable because updating the kernel in the large production fleet",
    "start": "317450",
    "end": "324680"
  },
  {
    "text": "let's say takes time and also it's kind of risky operation but also fixing the",
    "start": "324680",
    "end": "330470"
  },
  {
    "text": "kernel it takes time so to give you the timeline so I got the root cause of this",
    "start": "330470",
    "end": "335840"
  },
  {
    "text": "issue in 2008 DNA and then I submitted some kernel touches to the net filter",
    "start": "335840",
    "end": "341750"
  },
  {
    "text": "project in August 2000 18 and those patches got merged by the net filter",
    "start": "341750",
    "end": "348080"
  },
  {
    "text": "team only in 2000 19 February so it took almost half a year to merge the patches",
    "start": "348080",
    "end": "353900"
  },
  {
    "text": "and undefined amount of time to four distros to back for those patches so the",
    "start": "353900",
    "end": "360680"
  },
  {
    "text": "fix should be available now but it took a while to make it available and fun",
    "start": "360680",
    "end": "368150"
  },
  {
    "text": "fact is that I was doing some archeology of this issue and I found out that first",
    "start": "368150",
    "end": "374030"
  },
  {
    "text": "of currents of this bug was mentioned almost a decade ago so yeah so another",
    "start": "374030",
    "end": "380660"
  },
  {
    "text": "issue is debugger built debug ability so I would say that's kind of easy to debug",
    "start": "380660",
    "end": "385760"
  },
  {
    "start": "381000",
    "end": "400000"
  },
  {
    "text": "IP table rows when you have just a couple of them and you can use the",
    "start": "385760",
    "end": "390800"
  },
  {
    "text": "packet hunters or you can I'd know add the new rule which would log all your packets",
    "start": "390800",
    "end": "396470"
  },
  {
    "text": "and you see which rule got exactly here but situation becomes more interesting",
    "start": "396470",
    "end": "402020"
  },
  {
    "start": "400000",
    "end": "434000"
  },
  {
    "text": "when you have a bit more rules so in this slide I tried to place all the IP",
    "start": "402020",
    "end": "408110"
  },
  {
    "text": "tables rules which were created by cube proxy and I had just 100 services which",
    "start": "408110",
    "end": "413750"
  },
  {
    "text": "used the same endpoint so unfortunately I didn't manage to put all the rules on",
    "start": "413750",
    "end": "419600"
  },
  {
    "text": "it into a single slide and to add more fun cube proxy periodically resets the",
    "start": "419600",
    "end": "428060"
  },
  {
    "text": "IP tables packet counters so good luck with debugging so I think I could talk",
    "start": "428060",
    "end": "435169"
  },
  {
    "start": "434000",
    "end": "536000"
  },
  {
    "text": "more about what's wrong with the IP tables I think I could spend all slot about this but let's move on",
    "start": "435169",
    "end": "442669"
  },
  {
    "text": "so let's better understand where is the overhead coming from net filter and I up",
    "start": "442669",
    "end": "449150"
  },
  {
    "text": "tables first so you don't have to understand anything what is inside those boxes I just wanted to show you that for",
    "start": "449150",
    "end": "456289"
  },
  {
    "text": "each individual packet in the kernel there are quite a few steps which should be taken so the orange boxes denotes the",
    "start": "456289",
    "end": "465500"
  },
  {
    "text": "execution of the IP tables chains and usually as a user you install your IP",
    "start": "465500",
    "end": "471770"
  },
  {
    "text": "table rules into those chains and those orange boxes were that's where the execution is taking place so for",
    "start": "471770",
    "end": "478460"
  },
  {
    "text": "instance if we have the packet being sent from outside somewhere to the pot on the localhost",
    "start": "478460",
    "end": "484840"
  },
  {
    "text": "kernel first has to allocate this skb which is the processed representation of",
    "start": "484840",
    "end": "490130"
  },
  {
    "text": "the packet then the traffic control takes place and then the IP all the IP",
    "start": "490130",
    "end": "495830"
  },
  {
    "text": "table rules in orange are executed and all the rules inside those chains and",
    "start": "495830",
    "end": "501470"
  },
  {
    "text": "then the routing decision has to be made which is denoted in the fehb lookup box",
    "start": "501470",
    "end": "506750"
  },
  {
    "text": "and then again more iptables chains and IP table rules and finally the packet is",
    "start": "506750",
    "end": "513110"
  },
  {
    "text": "being sent to the one end of the virtual Ethernet device and then that packet",
    "start": "513110",
    "end": "519080"
  },
  {
    "text": "enters into the network namespace of the pot and again inside that network name",
    "start": "519080",
    "end": "524820"
  },
  {
    "text": "space because the chains are pretty Network name space again you have to traverse all those chains again so",
    "start": "524820",
    "end": "532290"
  },
  {
    "text": "that's where the latency is coming from and let's take a look how queue proxy",
    "start": "532290",
    "end": "538830"
  },
  {
    "start": "536000",
    "end": "610000"
  },
  {
    "text": "takes advantage of those chains so in this example we have a simple service",
    "start": "538830",
    "end": "543870"
  },
  {
    "text": "nginx of the cluster ap type with the virtual IP allocated by two brunettes",
    "start": "543870",
    "end": "549360"
  },
  {
    "text": "and with two endpoints so first it installs generic rule into the three",
    "start": "549360",
    "end": "557610"
  },
  {
    "text": "routing chain to steer all the traffic regardless whether it's kubernetes",
    "start": "557610",
    "end": "563040"
  },
  {
    "text": "traffic related or not into the cube services chain where the matching for",
    "start": "563040",
    "end": "569310"
  },
  {
    "text": "the kubernetes service takes place so if the destination is three dots three dots",
    "start": "569310",
    "end": "576390"
  },
  {
    "text": "three dots three which is the virtual IP of the service then we entered this service specific chain which was called",
    "start": "576390",
    "end": "583080"
  },
  {
    "text": "cube - SVC nginx and in that chain the endpoint selection is taking place and",
    "start": "583080",
    "end": "590730"
  },
  {
    "text": "based on the probability and either engine x1 or nginx - is chosen and",
    "start": "590730",
    "end": "596580"
  },
  {
    "text": "finally in those chains we do the dinette which means that we changed the",
    "start": "596580",
    "end": "602810"
  },
  {
    "text": "destination IP address from the cluster IP to a real IP of the path which runs",
    "start": "602810",
    "end": "608880"
  },
  {
    "text": "nginx so you might start wondering why",
    "start": "608880",
    "end": "616200"
  },
  {
    "text": "oopsie I think I miss one slide but you might start wondering in the previous",
    "start": "616200",
    "end": "621360"
  },
  {
    "text": "slide worthy worthy whether we can",
    "start": "621360",
    "end": "627360"
  },
  {
    "text": "basically bypass those netfilter",
    "start": "627360",
    "end": "632570"
  },
  {
    "text": "change somehow IP tables change whether we can just jump from the TC ingress",
    "start": "632570",
    "end": "639690"
  },
  {
    "text": "directly to the TC egress and this is possible with the let me move here with",
    "start": "639690",
    "end": "648240"
  },
  {
    "start": "646000",
    "end": "809000"
  },
  {
    "text": "the technology which is called EBP F alternative approach would be just to",
    "start": "648240",
    "end": "653340"
  },
  {
    "text": "modify the kernel and to do some changes to Brunetti specific",
    "start": "653340",
    "end": "660060"
  },
  {
    "text": "ones but I think such approach wouldn't work because the kernel community would",
    "start": "660060",
    "end": "665459"
  },
  {
    "text": "not accept such patches you could also maintain the kernel your",
    "start": "665459",
    "end": "670740"
  },
  {
    "text": "version of the kernel but I wouldn't recommend you to do with that but luckily we have the technology",
    "start": "670740",
    "end": "677160"
  },
  {
    "text": "a BPF which allows us to jump directly from TC ingress to Otzi egress in this",
    "start": "677160",
    "end": "684180"
  },
  {
    "text": "case so IPPF is a virtual machine inside the linux kernel which allows us to",
    "start": "684180",
    "end": "691649"
  },
  {
    "text": "dynamically reprogram the kernel and let's take an example so a user can",
    "start": "691649",
    "end": "698490"
  },
  {
    "text": "write a little program in the language which is a subset of the C programming",
    "start": "698490",
    "end": "703620"
  },
  {
    "text": "language then compile it with the C lank and next it can load the program into",
    "start": "703620",
    "end": "711750"
  },
  {
    "text": "the kernel the kernel verifies the program it basically checks that the",
    "start": "711750",
    "end": "716759"
  },
  {
    "text": "program doesn't crash the kernel that it terminates that doesn't hang the kernel",
    "start": "716759",
    "end": "721800"
  },
  {
    "text": "that doesn't try to access some memory out of bound memory or memory from some",
    "start": "721800",
    "end": "728220"
  },
  {
    "text": "other processes and then if it doesn't reject the program a JIT compiles the",
    "start": "728220",
    "end": "735290"
  },
  {
    "text": "program into a native machine code and that program can access I can store and",
    "start": "735290",
    "end": "742860"
  },
  {
    "text": "access its state from beep so called BPF Maps and this maps are shared among can",
    "start": "742860",
    "end": "750329"
  },
  {
    "text": "be shared among different programs and this maps are also can be accessed by",
    "start": "750329",
    "end": "755449"
  },
  {
    "text": "processes running in user space and also they can be modified and the execution",
    "start": "755449",
    "end": "761459"
  },
  {
    "text": "of EBP F programs event-driven is then driven and in this",
    "start": "761459",
    "end": "769410"
  },
  {
    "text": "example we have loaded the program at the TC ingress of f0 device so it means",
    "start": "769410",
    "end": "775920"
  },
  {
    "text": "that when that network interface gets a packet the following program will be executed",
    "start": "775920",
    "end": "782910"
  },
  {
    "text": "and this little program which I have probably can use it probably can see it so what it does",
    "start": "782910",
    "end": "789540"
  },
  {
    "text": "it if the destination of the TCP packet is destination port is equal to 18 which",
    "start": "789540",
    "end": "797460"
  },
  {
    "text": "is HTTP just redirect the packet to the interface Aleksey zero which is of the",
    "start": "797460",
    "end": "803520"
  },
  {
    "text": "pot and if it's not just them drop the packet so it's kind of simple and EBP F",
    "start": "803520",
    "end": "811500"
  },
  {
    "start": "809000",
    "end": "892000"
  },
  {
    "text": "is currently probably one of the most active subsystems in the kernel and it's",
    "start": "811500",
    "end": "819330"
  },
  {
    "text": "being maintained by Daniel from the cilium project together with Alexei from Facebook and up to this date there were",
    "start": "819330",
    "end": "829010"
  },
  {
    "text": "268 active contributors and the adoption is very huge I would say more and more",
    "start": "829010",
    "end": "838650"
  },
  {
    "text": "tech companies are started to look into this technology and to adapt and that",
    "start": "838650",
    "end": "844320"
  },
  {
    "text": "you adapt it and I listed just some prominent users so for instance Facebook has recently replaced their load balance",
    "start": "844320",
    "end": "853110"
  },
  {
    "text": "edge load balancer with which previously was using IP vs and they replaced with a",
    "start": "853110",
    "end": "860850"
  },
  {
    "text": "new one which is written with EBP F and they saw the next performance improvement so each request sent to",
    "start": "860850",
    "end": "869430"
  },
  {
    "text": "facebook.com is being handled by a BPF program and also an interesting fact",
    "start": "869430",
    "end": "875520"
  },
  {
    "text": "that the original creator of IP tables and that filter rested russell has",
    "start": "875520",
    "end": "881640"
  },
  {
    "text": "acknowledged EBP F as technology which should replace the IP tables in the",
    "start": "881640",
    "end": "887970"
  },
  {
    "text": "future so yeah so having this in mind",
    "start": "887970",
    "end": "893640"
  },
  {
    "start": "892000",
    "end": "1228000"
  },
  {
    "text": "let's see how we have to replace the proxy with EBP F in the cilium project",
    "start": "893640",
    "end": "900080"
  },
  {
    "text": "so to replace Q proxy we have to implement all service types which keep",
    "start": "900080",
    "end": "907020"
  },
  {
    "text": "proxy supports so first one is the cluster IP so the cluster IP allows you",
    "start": "907020",
    "end": "912510"
  },
  {
    "text": "to access bot inside the cluster either from a pod or",
    "start": "912510",
    "end": "919759"
  },
  {
    "text": "from some host local process running in a cluster and the access you can access",
    "start": "919759",
    "end": "928610"
  },
  {
    "text": "it by using this virtual IP or cluster allocated by kubernetes another service",
    "start": "928610",
    "end": "934339"
  },
  {
    "text": "type is a node port so you can this makes your services actually accessible",
    "start": "934339",
    "end": "941389"
  },
  {
    "text": "from outside so kubernetes allocates a special port and we basically use the",
    "start": "941389",
    "end": "947620"
  },
  {
    "text": "notes IP plus that allocated port and this node port also allows you to access",
    "start": "947620",
    "end": "955839"
  },
  {
    "text": "services from inside the cluster and the free service type although it's not",
    "start": "955839",
    "end": "962240"
  },
  {
    "text": "listed the service type is external IP it's very similar to a node port but except that it allows you to access the",
    "start": "962240",
    "end": "970149"
  },
  {
    "text": "services just outside of the cluster to avoid man-in-the-middle attacks and the",
    "start": "970149",
    "end": "976519"
  },
  {
    "text": "access happens through the IP address which was defined by a user and the",
    "start": "976519",
    "end": "981860"
  },
  {
    "text": "first one is load balancer we don't have to do anything here because usually it's",
    "start": "981860",
    "end": "987560"
  },
  {
    "text": "done outside the kubernetes cluster by cloud providers or balancer and they are",
    "start": "987560",
    "end": "994220"
  },
  {
    "text": "using the building blocks of the cluster EP node or external IP so let's start",
    "start": "994220",
    "end": "1000670"
  },
  {
    "text": "with the cluster IP when and with the",
    "start": "1000670",
    "end": "1005980"
  },
  {
    "text": "case when the pod tries to reach another pod via cluster IP so to make this",
    "start": "1005980",
    "end": "1011800"
  },
  {
    "text": "happen we have to consider two things so first one is that when a client bought",
    "start": "1011800",
    "end": "1020259"
  },
  {
    "text": "sends a request we need to check that the destination IP is of some service",
    "start": "1020259",
    "end": "1025959"
  },
  {
    "text": "and if it is then we need to select any endpoint of that service and then we",
    "start": "1025959",
    "end": "1033250"
  },
  {
    "text": "have to do the D net which means that we have to change the destination IP of that packet into the veal pot ID because",
    "start": "1033250",
    "end": "1040990"
  },
  {
    "text": "previously it had the cluster ID which is a virtual IP and another thing is for",
    "start": "1040990",
    "end": "1047530"
  },
  {
    "text": "the reverse path of a reply we have to change the source IP of the reply",
    "start": "1047530",
    "end": "1053230"
  },
  {
    "text": "because it will be a real puppy and the client is expecting to get the reply",
    "start": "1053230",
    "end": "1058690"
  },
  {
    "text": "from the this cluster IP and if we don't change then the kernel will drop the",
    "start": "1058690",
    "end": "1063940"
  },
  {
    "text": "packet for us so let's see how we can do that so again I have a little BPF",
    "start": "1063940",
    "end": "1071650"
  },
  {
    "text": "program written in pseudocode English and basically that program we attached",
    "start": "1071650",
    "end": "1077860"
  },
  {
    "text": "to the TC ingress of the LXE 0 which is the device of the one end of a plot",
    "start": "1077860",
    "end": "1084640"
  },
  {
    "text": "device virtual Ethernet here and that program does the following it checks whether a destination IP address is in",
    "start": "1084640",
    "end": "1092380"
  },
  {
    "text": "the service ebps now remember I mentioned that programs vpf programs can",
    "start": "1092380",
    "end": "1099280"
  },
  {
    "text": "access its state or some data inside the vpf maps and read that data and modify",
    "start": "1099280",
    "end": "1106210"
  },
  {
    "text": "the data so we have a service map for the services and then if it's the",
    "start": "1106210",
    "end": "1112120"
  },
  {
    "text": "service was found then select the endpoint for the service and then",
    "start": "1112120",
    "end": "1117340"
  },
  {
    "text": "replace the destination IP with that endpoint IP which is a pot VIP and then",
    "start": "1117340",
    "end": "1123760"
  },
  {
    "text": "we create two connection tracking entries again in the martin the net filters cone a connection tracking table",
    "start": "1123760",
    "end": "1130270"
  },
  {
    "text": "but we have a separate EBP of connection tracking table which is again EBP as nap",
    "start": "1130270",
    "end": "1136180"
  },
  {
    "text": "so for the service we have for instance for this case we have service map which",
    "start": "1136180",
    "end": "1142150"
  },
  {
    "text": "contains two entries for two endpoints because previously we saw that we have two engine export and the key is",
    "start": "1142150",
    "end": "1150280"
  },
  {
    "text": "basically the cluster IP plus port and the value is like service ID endpoint ID",
    "start": "1150280",
    "end": "1157450"
  },
  {
    "text": "and poit IP address and and endpoint port and for the connection tracking",
    "start": "1157450",
    "end": "1164350"
  },
  {
    "text": "again we have this e BPF map where we have the top of the key is a tuple",
    "start": "1164350",
    "end": "1171610"
  },
  {
    "text": "basically a source part in this nation part and the value is either depending on this sorry on the contract entry type",
    "start": "1171610",
    "end": "1178750"
  },
  {
    "text": "is either d and point in d and this service because the first entry is like of the",
    "start": "1178750",
    "end": "1186130"
  },
  {
    "text": "service type and because we want to make sure that each packet which belongs to",
    "start": "1186130",
    "end": "1191530"
  },
  {
    "text": "the same connection is being routed to the same endpoint so we have to store",
    "start": "1191530",
    "end": "1196630"
  },
  {
    "text": "the endpoint ID so that subsequent packets could know to which end point that the packet requests have to be sent",
    "start": "1196630",
    "end": "1204160"
  },
  {
    "text": "and for the reply because we have to change back the source IP address we",
    "start": "1204160",
    "end": "1210790"
  },
  {
    "text": "need to know to which source IP we have to change so for this we attach another",
    "start": "1210790",
    "end": "1216970"
  },
  {
    "text": "program which does this reverse nap translation and we attach it on the TC",
    "start": "1216970",
    "end": "1223660"
  },
  {
    "text": "ingress of the native device in this example ok so how do we update the",
    "start": "1223660",
    "end": "1231010"
  },
  {
    "start": "1228000",
    "end": "1271000"
  },
  {
    "text": "service Maps so this is relatively simple because we run Salem agent on",
    "start": "1231010",
    "end": "1236830"
  },
  {
    "text": "each node in the cluster and this sodium agent gets those instances of cilium",
    "start": "1236830",
    "end": "1244450"
  },
  {
    "text": "agent get notification from the cube API server about the services so basically",
    "start": "1244450",
    "end": "1250750"
  },
  {
    "text": "we are interested in service object and endpoint object and once we get those",
    "start": "1250750",
    "end": "1256720"
  },
  {
    "text": "objects we parse them and we do the DPF map update which is a sis call to update",
    "start": "1256720",
    "end": "1262450"
  },
  {
    "text": "the map with a particular file descriptor so basically we populate the",
    "start": "1262450",
    "end": "1267880"
  },
  {
    "text": "service entries ok so how do we enable the communication from from host not",
    "start": "1267880",
    "end": "1276310"
  },
  {
    "start": "1271000",
    "end": "1419000"
  },
  {
    "text": "from a part but from the host process which is running not in the part and how",
    "start": "1276310",
    "end": "1282220"
  },
  {
    "text": "do we enable the communication via cluster B so we could imagine that we",
    "start": "1282220",
    "end": "1288190"
  },
  {
    "text": "have this client which is running some go code and and we could have created a",
    "start": "1288190",
    "end": "1298240"
  },
  {
    "text": "dummy device and install the IP route rules that would be similar I think with",
    "start": "1298240",
    "end": "1304900"
  },
  {
    "text": "IP vs does Q per action the IP vs mode does but it's not elegant at all so",
    "start": "1304900",
    "end": "1311410"
  },
  {
    "text": "under the word this what this client roses does when it wants to establish a connection",
    "start": "1311410",
    "end": "1316990"
  },
  {
    "text": "it does the connect Cisco and there's a special set of EB PF hooks so it's",
    "start": "1316990",
    "end": "1324970"
  },
  {
    "text": "called EPP FC groups they are called EB PLC group hooks and they allow us to",
    "start": "1324970",
    "end": "1332200"
  },
  {
    "text": "attach a EB PF program at that point at",
    "start": "1332200",
    "end": "1337690"
  },
  {
    "text": "the particular point and the program is going to be executed just before the TCP",
    "start": "1337690",
    "end": "1344410"
  },
  {
    "text": "or UDP protocol handler in the kernel will handle that particular Cisco so",
    "start": "1344410",
    "end": "1350590"
  },
  {
    "text": "what can we do we can attach again a little vpf program with a similar thing",
    "start": "1350590",
    "end": "1356950"
  },
  {
    "text": "but check the service map and if it finds that entry like the destination IP",
    "start": "1356950",
    "end": "1363730"
  },
  {
    "text": "and port belongs to a service it can change the destination address and port but this type not in the packet but in",
    "start": "1363730",
    "end": "1371380"
  },
  {
    "text": "the socket and it this is super exciting because we this is totally transparent",
    "start": "1371380",
    "end": "1376930"
  },
  {
    "text": "to the application as was in the previous case but the cost for load",
    "start": "1376930",
    "end": "1383650"
  },
  {
    "text": "balancing is being paid only once just doing for the first packet during the",
    "start": "1383650",
    "end": "1389770"
  },
  {
    "text": "connection establishment and the rest the rest of the flow even will not",
    "start": "1389770",
    "end": "1395260"
  },
  {
    "text": "trigger this PPF program and recently we have enabled this feature for previous",
    "start": "1395260",
    "end": "1402910"
  },
  {
    "text": "case where we had the pod communicating with another pot here cluster IP okay",
    "start": "1402910",
    "end": "1408910"
  },
  {
    "text": "and we have the same for the connected UDP and for unconnected UDP we do",
    "start": "1408910",
    "end": "1415240"
  },
  {
    "text": "similar thing but for different system calls so the next one is the node port",
    "start": "1415240",
    "end": "1421780"
  },
  {
    "start": "1419000",
    "end": "1556000"
  },
  {
    "text": "this is a bit more complicated so let's say that we have a node a which is",
    "start": "1421780",
    "end": "1428200"
  },
  {
    "text": "running red spot and we have node B which is friend running engine expert and we have a client somewhere outside",
    "start": "1428200",
    "end": "1435730"
  },
  {
    "text": "outside our cluster E and the client wants to connect to the nginx",
    "start": "1435730",
    "end": "1442890"
  },
  {
    "text": "node port we are not IP of the node and the part of the nginx service so it",
    "start": "1442890",
    "end": "1449799"
  },
  {
    "text": "first sends the request to the node a so again we attach a little program to the",
    "start": "1449799",
    "end": "1458230"
  },
  {
    "text": "TC ingress of is 0 and this time we have this extra step which is 2.1 we have to",
    "start": "1458230",
    "end": "1466629"
  },
  {
    "text": "do because node a doesn't run the part we have to test that request to the node",
    "start": "1466629",
    "end": "1473590"
  },
  {
    "text": "B which runs the destination part and before passing we have to do the ash net",
    "start": "1473590",
    "end": "1480100"
  },
  {
    "text": "we have to change the source IP of the request because otherwise the node B",
    "start": "1480100",
    "end": "1486100"
  },
  {
    "text": "will get a request with this original source IP of the client and it will",
    "start": "1486100",
    "end": "1491799"
  },
  {
    "text": "reply back to the client and it will not know that it has to change also the",
    "start": "1491799",
    "end": "1498509"
  },
  {
    "text": "source IP and remember I previously mentioned that the in such situation the",
    "start": "1498509",
    "end": "1505090"
  },
  {
    "text": "packet is being dropped because it cannot be recognized by the kernel so for this reason we do that as net we",
    "start": "1505090",
    "end": "1512259"
  },
  {
    "text": "change the IP address of the request to a node a IP address and then we forward",
    "start": "1512259",
    "end": "1518110"
  },
  {
    "text": "the packet and on the way back the reply is being sent back to the note a the",
    "start": "1518110",
    "end": "1524740"
  },
  {
    "text": "node a this time has to do the reverse as net reverse denied translation and",
    "start": "1524740",
    "end": "1529809"
  },
  {
    "text": "finally to redirect this with this approach we kind of see two problems is",
    "start": "1529809",
    "end": "1536860"
  },
  {
    "text": "the first one that engine expert doesn't see the real IP address of the client and the second problem is that we have",
    "start": "1536860",
    "end": "1544450"
  },
  {
    "text": "this extra hop so the extra hop from node B to note a instead of node a node",
    "start": "1544450",
    "end": "1550899"
  },
  {
    "text": "B sending directly back to apply to node a so to prevent from this situation",
    "start": "1550899",
    "end": "1560009"
  },
  {
    "start": "1556000",
    "end": "1650000"
  },
  {
    "text": "kubernetes has this special service annotation which is called external traffic policy equal local where does it",
    "start": "1560009",
    "end": "1567549"
  },
  {
    "text": "basically drops a request if the destination node which was to which a",
    "start": "1567549",
    "end": "1573940"
  },
  {
    "text": "request was sent first doesn't run required port",
    "start": "1573940",
    "end": "1579640"
  },
  {
    "text": "but with eb PF i mentioned that we can",
    "start": "1579640",
    "end": "1585880"
  },
  {
    "text": "do whenever we want with the packet so no nothing prevents us from implementing",
    "start": "1585880",
    "end": "1592530"
  },
  {
    "text": "director berry return for the note port so what we can do how we can implement",
    "start": "1592530",
    "end": "1598330"
  },
  {
    "text": "this we can basically before when when we want to forward attack it to a note D",
    "start": "1598330",
    "end": "1605110"
  },
  {
    "text": "we can append into IP either this service address so that note B can use",
    "start": "1605110",
    "end": "1612520"
  },
  {
    "text": "this service address when sending back",
    "start": "1612520",
    "end": "1618030"
  },
  {
    "text": "replied to the client instead of note a so in this example you see that the",
    "start": "1618030",
    "end": "1623560"
  },
  {
    "text": "client real IP is being preserved so the engine acts will see the bill IP and",
    "start": "1623560",
    "end": "1630090"
  },
  {
    "text": "then on the way back the note B will change the source IP to this service IP",
    "start": "1630090",
    "end": "1637510"
  },
  {
    "text": "and it will redirect directly to the client so we have solved two problems so",
    "start": "1637510",
    "end": "1645070"
  },
  {
    "text": "the source IP is being preserved and we avoid this extra hop okay so the talk is cheap so let me show",
    "start": "1645070",
    "end": "1652990"
  },
  {
    "start": "1650000",
    "end": "1793000"
  },
  {
    "text": "you some numbers so we did some benchmarks on bare metal machines on AWS",
    "start": "1652990",
    "end": "1659340"
  },
  {
    "text": "connected with 100 Gigabit link and we were running 5.30",
    "start": "1659340",
    "end": "1665230"
  },
  {
    "text": "and we used networks TCP is your art so what it does it opens a TCP connection",
    "start": "1665230",
    "end": "1674490"
  },
  {
    "text": "sends some payload sends a payload back and closes the connection and it",
    "start": "1674490",
    "end": "1680200"
  },
  {
    "text": "measures how long it takes to do this whole transaction and because I'm",
    "start": "1680200",
    "end": "1685780"
  },
  {
    "text": "showing the latency for you so lower is better so first thing to see is the",
    "start": "1685780",
    "end": "1692110"
  },
  {
    "text": "first thing to mention is that the our EBP EFT implementation has outperformed",
    "start": "1692110",
    "end": "1697180"
  },
  {
    "text": "both cube fraction IP vs mode and in the IP tables mode also another thing is",
    "start": "1697180",
    "end": "1704380"
  },
  {
    "text": "that we can see that with the number of services once we have more services the",
    "start": "1704380",
    "end": "1710590"
  },
  {
    "text": "latencies creasing for the IP tables because of the cube services chain which I showed",
    "start": "1710590",
    "end": "1718450"
  },
  {
    "text": "you in the beginning so this chain gets more and more more rules and for the and",
    "start": "1718450",
    "end": "1724059"
  },
  {
    "text": "the packets have to traverse many rules like instead of doing this hash table",
    "start": "1724059",
    "end": "1730360"
  },
  {
    "text": "based lookup as we do in EB PF and another thing is that IP tables actually",
    "start": "1730360",
    "end": "1738780"
  },
  {
    "text": "outperforms IP vs implementation when there's a relatively small number of",
    "start": "1738780",
    "end": "1745650"
  },
  {
    "text": "services and another benchmark which I would like to show with you is TCP are",
    "start": "1745650",
    "end": "1752980"
  },
  {
    "text": "are of the network this time the benchmarking suit is reusing the same",
    "start": "1752980",
    "end": "1760830"
  },
  {
    "text": "open connection and basically again EB",
    "start": "1760830",
    "end": "1765850"
  },
  {
    "text": "PF outperforms both IP vs and IP tables and this time we don't see this pattern",
    "start": "1765850",
    "end": "1771309"
  },
  {
    "text": "with the IP tables that latency increasing increases with the number of term services increasing because we are",
    "start": "1771309",
    "end": "1779110"
  },
  {
    "text": "reusing the same connection and EB PFDs re has even better performance lower",
    "start": "1779110",
    "end": "1786669"
  },
  {
    "text": "latency because of the of the hop being avoided which I showed in the previous",
    "start": "1786669",
    "end": "1792100"
  },
  {
    "text": "slides so to recap I have presented you the",
    "start": "1792100",
    "end": "1797260"
  },
  {
    "start": "1793000",
    "end": "1969000"
  },
  {
    "text": "replacement of Q proxy in IPPF and this replacement allows you to run the",
    "start": "1797260",
    "end": "1804150"
  },
  {
    "text": "cluster with netfilter compiled out without IP table modules and cetera and",
    "start": "1804150",
    "end": "1810040"
  },
  {
    "text": "it gives you a better performance compared to q parks in both modes and",
    "start": "1810040",
    "end": "1815140"
  },
  {
    "text": "also it doesn't suffer from slow service updates which I didn't mention in the",
    "start": "1815140",
    "end": "1820510"
  },
  {
    "text": "beginning but basically with the IP tables you cannot update a single rule you have to update all the rules so the",
    "start": "1820510",
    "end": "1826450"
  },
  {
    "text": "more services you have them the longer it takes to update the services I also",
    "start": "1826450",
    "end": "1832350"
  },
  {
    "text": "reliability so I would say that our data path has it's very small and it's easier",
    "start": "1832350",
    "end": "1839890"
  },
  {
    "text": "to debug it and it has less lines of code so the surface of bug",
    "start": "1839890",
    "end": "1845320"
  },
  {
    "text": "surface for bug is smaller and also for security issues is much better and also",
    "start": "1845320",
    "end": "1853000"
  },
  {
    "text": "we can write the unit test for the networking code and it's easier to write",
    "start": "1853000",
    "end": "1858490"
  },
  {
    "text": "them than before for instance for the Linux kernel networking and also cool",
    "start": "1858490",
    "end": "1864760"
  },
  {
    "text": "thing is that remember I mentioned that ok we had this net filter a race",
    "start": "1864760",
    "end": "1869890"
  },
  {
    "text": "condition and took a while to fix and also you had to compile the kernel to redeploy the kernels and with EBP F we",
    "start": "1869890",
    "end": "1877180"
  },
  {
    "text": "don't have this when I have to do this because we can automatically replace the",
    "start": "1877180",
    "end": "1882940"
  },
  {
    "text": "programs running programs without interrupting any connections and yeah",
    "start": "1882940",
    "end": "1889300"
  },
  {
    "text": "again the bug ability is much better yesterday there was a talk from Nathan",
    "start": "1889300",
    "end": "1894970"
  },
  {
    "text": "from digitalocean about debugging psyllium troubleshooting silly and we",
    "start": "1894970",
    "end": "1900700"
  },
  {
    "text": "have the psyllium monitor tool which allows us to which says as exactly why",
    "start": "1900700",
    "end": "1906760"
  },
  {
    "text": "the packet was being dropped why it went to this pot instead of that pot and why",
    "start": "1906760",
    "end": "1913060"
  },
  {
    "text": "this decision was taking so we cannot see this information with the TCP dump",
    "start": "1913060",
    "end": "1918630"
  },
  {
    "text": "another thing is compatibility so the way people configure IP tables they use",
    "start": "1918630",
    "end": "1926400"
  },
  {
    "text": "IP tables executable and recently some distros has switched the backend of IP",
    "start": "1926400",
    "end": "1933310"
  },
  {
    "text": "tables so some districts like Debian by three I think they started to use enough tables and it's not compatible with the",
    "start": "1933310",
    "end": "1940300"
  },
  {
    "text": "legacy IP tables so I think in the future we're gonna see quite interesting bug reports and finally customization so",
    "start": "1940300",
    "end": "1949090"
  },
  {
    "text": "with the EBP F we have flexible what we want to do we can as we thought with the",
    "start": "1949090",
    "end": "1955030"
  },
  {
    "text": "node port example so we can modify the packet and we can implement interesting",
    "start": "1955030",
    "end": "1961240"
  },
  {
    "text": "like we can it's up to us how to do the load balancing so we can implement different load balancing strategies okay",
    "start": "1961240",
    "end": "1969130"
  },
  {
    "start": "1969000",
    "end": "2107000"
  },
  {
    "text": "so that was it so I think I got a couple of minutes for questions so thanks for",
    "start": "1969130",
    "end": "1974350"
  },
  {
    "text": "your attention if you have some questions yeah",
    "start": "1974350",
    "end": "1979049"
  },
  {
    "text": "[Applause] hi so I actually asked this at",
    "start": "1984840",
    "end": "1990370"
  },
  {
    "text": "yesterday's digitalocean talk but my main question I should relate some more to BPF than it does to psyllium and you",
    "start": "1990370",
    "end": "1998170"
  },
  {
    "text": "know with the the concept of user space applications we've done a fairly good",
    "start": "1998170",
    "end": "2003270"
  },
  {
    "text": "job of you know removing a lot of the risks and being running untrusted code for example we have sandboxes set comp",
    "start": "2003270",
    "end": "2010620"
  },
  {
    "text": "app armour profiles etc now that we're allowing users to basically take",
    "start": "2010620",
    "end": "2017420"
  },
  {
    "text": "untrusted code and run it directly into the kernel environment what checks are in place to make sure",
    "start": "2017420",
    "end": "2023340"
  },
  {
    "text": "that we don't essentially have a bug end up running in ring zero and essentially",
    "start": "2023340",
    "end": "2029130"
  },
  {
    "text": "taking over the system inside of the kernel thanks that's very good question",
    "start": "2029130",
    "end": "2034410"
  },
  {
    "text": "so as I mentioned we have this EBP F verifier which tests a lot of checks for",
    "start": "2034410",
    "end": "2039840"
  },
  {
    "text": "us and also you have to be a privileged user to allow the program so you can",
    "start": "2039840",
    "end": "2047520"
  },
  {
    "text": "disable EBP after some subsystems for instance and you can do it just for networking so yeah I think I hope that",
    "start": "2047520",
    "end": "2055560"
  },
  {
    "text": "answers your question yeah thank you on your earlier performance slides what was",
    "start": "2055560",
    "end": "2062550"
  },
  {
    "text": "the horizontal axis it says number of services is that number of services per node or never services in the cluster",
    "start": "2062550",
    "end": "2068970"
  },
  {
    "text": "altogether so the question so it's a number of services per cluster but",
    "start": "2068970",
    "end": "2075149"
  },
  {
    "text": "basically what happens is that you have to install all service definitions",
    "start": "2075150",
    "end": "2080669"
  },
  {
    "text": "either for for IP vs IP tables etc on each node well I think that's all the",
    "start": "2080669",
    "end": "2089070"
  },
  {
    "text": "time we really have for questions so if you have more questions we have a booth so feel free to come to the booth and",
    "start": "2089070",
    "end": "2096929"
  },
  {
    "text": "ask people questions and we have some psyllium members which are over there so",
    "start": "2096929",
    "end": "2102540"
  },
  {
    "text": "they can happy to answer your questions yes so thanks",
    "start": "2102540",
    "end": "2107870"
  }
]