[
  {
    "text": "hi everybody thanks for joining this webinar on monoliths and microservices with bite size kubernetes my name is",
    "start": "659",
    "end": "8099"
  },
  {
    "text": "Tama nakahar I'm a VP of the developer experience at a company called weaveworks where we created gitups we",
    "start": "8099",
    "end": "15059"
  },
  {
    "text": "are really excited to bring together two fantastic speakers on this topic we",
    "start": "15059",
    "end": "20640"
  },
  {
    "text": "think it's really important that so many people that we talk to in the kubernetes community and especially with the flux",
    "start": "20640",
    "end": "27539"
  },
  {
    "text": "project that we created and maintained so many of you still struggle to bring",
    "start": "27539",
    "end": "33180"
  },
  {
    "text": "your monolith to microservices and some of that has brought you to the kubernetes space which people like Chris",
    "start": "33180",
    "end": "39719"
  },
  {
    "text": "and Leo agree is really kind of a no-brainer for this challenge however",
    "start": "39719",
    "end": "44879"
  },
  {
    "text": "that doesn't mean that it's easy so we're really excited to bring these two speakers together to first of all talk",
    "start": "44879",
    "end": "51059"
  },
  {
    "text": "about what microservices exactly means for you and that Journey can be",
    "start": "51059",
    "end": "56160"
  },
  {
    "text": "hopefully a little less daunting Chris Richardson is the create of",
    "start": "56160",
    "end": "61520"
  },
  {
    "text": "microservices.io has been working in this space for over 10 years so we'll have the first section by Chris breaking",
    "start": "61520",
    "end": "68520"
  },
  {
    "text": "that down in a really fantastic way and then lead to the part where kubernetes itself you can do in small steps and so",
    "start": "68520",
    "end": "76680"
  },
  {
    "text": "we have Leo morillo our architect from weaveworks we'll be sharing that part so",
    "start": "76680",
    "end": "82020"
  },
  {
    "text": "I hope you enjoy thanks welcome to my talk on the microservice",
    "start": "82020",
    "end": "87540"
  },
  {
    "text": "architecture in this talk I'm going to answer the following questions what is",
    "start": "87540",
    "end": "93420"
  },
  {
    "text": "the microservice architecture why should you use it when should you use it and",
    "start": "93420",
    "end": "99540"
  },
  {
    "text": "how do you adopt it but first let me introduce myself I've",
    "start": "99540",
    "end": "104579"
  },
  {
    "text": "done a number of things over the past 40 years for example I developed lisp systems in the late 80s early 90s I also",
    "start": "104579",
    "end": "113520"
  },
  {
    "text": "created the original cloud Foundry back in 2008 and since 2012 I've been focused",
    "start": "113520",
    "end": "120899"
  },
  {
    "text": "on what eventually became known as the microservice architecture I help",
    "start": "120899",
    "end": "126119"
  },
  {
    "text": "organizations around the world use microservices here's the agenda for my",
    "start": "126119",
    "end": "132000"
  },
  {
    "text": "talk first I'm going to describe why we need to deliver software rapidly frequently and reliably after that I'm",
    "start": "132000",
    "end": "139860"
  },
  {
    "text": "going to describe the monolithic and microservice architectures next I'll describe how to refactor an existing",
    "start": "139860",
    "end": "147480"
  },
  {
    "text": "monolithic application to microservices finally I'll talk about how the",
    "start": "147480",
    "end": "153599"
  },
  {
    "text": "microservices pattern language can be your guide when designing an architecture these days the world is",
    "start": "153599",
    "end": "160680"
  },
  {
    "text": "crazy all more specifically it's volatile it's uncertain it's complex and",
    "start": "160680",
    "end": "166800"
  },
  {
    "text": "ambiguous not only do businesses have to deal with unexpected new competitors",
    "start": "166800",
    "end": "172680"
  },
  {
    "text": "they also need to deal with pandemics Wars and so on",
    "start": "172680",
    "end": "177720"
  },
  {
    "text": "in order to thrive businesses need to be nimble agile and innovate faster modern",
    "start": "177720",
    "end": "185040"
  },
  {
    "text": "businesses are powered by software this means that if you're responsible for a",
    "start": "185040",
    "end": "191280"
  },
  {
    "text": "business critical application then you're under immense pressure to deliver software rapidly frequently and reliably",
    "start": "191280",
    "end": "199080"
  },
  {
    "text": "specifically your organization needs to be high performing as defined by the",
    "start": "199080",
    "end": "205019"
  },
  {
    "text": "Dora metrics there are four Dora metrics the first is deployment frequency which",
    "start": "205019",
    "end": "211260"
  },
  {
    "text": "is the rate at which changes are deployed or released into production this needs to be high the second metric",
    "start": "211260",
    "end": "218819"
  },
  {
    "text": "is lead time which is the time from commit to deploy it must be low the",
    "start": "218819",
    "end": "224640"
  },
  {
    "text": "third metric is time to restore a service you need to be able to quickly",
    "start": "224640",
    "end": "230340"
  },
  {
    "text": "recover from production outages the fourth metric is change failure rate",
    "start": "230340",
    "end": "235620"
  },
  {
    "text": "which is how often a change to production causes an outage this obviously needs to be low",
    "start": "235620",
    "end": "242400"
  },
  {
    "text": "in other words you need to move fast and not break things but unfortunately your reality is",
    "start": "242400",
    "end": "249360"
  },
  {
    "text": "probably very different deployments are in frequent painful and often result in",
    "start": "249360",
    "end": "254580"
  },
  {
    "text": "production outages what's more your monolithic technology stack is out of",
    "start": "254580",
    "end": "259919"
  },
  {
    "text": "date to deliver software rapidly frequently and reliably you need what I",
    "start": "259919",
    "end": "265560"
  },
  {
    "text": "call the success triangle first you need the right development process specifically devops as defined by the",
    "start": "265560",
    "end": "273240"
  },
  {
    "text": "devops handbook for example developers commit changes frequently and an",
    "start": "273240",
    "end": "279060"
  },
  {
    "text": "automated deployment pipeline builds and tests each change and deploys it into",
    "start": "279060",
    "end": "284580"
  },
  {
    "text": "production second you need the right organizational structure that's a",
    "start": "284580",
    "end": "289860"
  },
  {
    "text": "Loosely coupled network of cross-functional autonomous teams by",
    "start": "289860",
    "end": "295259"
  },
  {
    "text": "Loosely coupled I mean that a team can get their work done without constantly",
    "start": "295259",
    "end": "300300"
  },
  {
    "text": "having to coordinate with other teams the book teams apologies is a must read",
    "start": "300300",
    "end": "306360"
  },
  {
    "text": "on this topic and finally you need an architecture that supports devops and Loosely coupled",
    "start": "306360",
    "end": "314340"
  },
  {
    "text": "teams you might consider asking Twitter about whether to use the monolithic",
    "start": "314340",
    "end": "319620"
  },
  {
    "text": "architecture or the microservice architecture as you might expect on Twitter there are lots of opinions some",
    "start": "319620",
    "end": "327360"
  },
  {
    "text": "are more helpful than others in reality the answer to this question is that it",
    "start": "327360",
    "end": "332880"
  },
  {
    "text": "depends but on what what are the criteria that you should consider When",
    "start": "332880",
    "end": "338039"
  },
  {
    "text": "selecting an architectural style to answer that question I now want to talk",
    "start": "338039",
    "end": "343620"
  },
  {
    "text": "about architecture patterns for modern software the software development",
    "start": "343620",
    "end": "348900"
  },
  {
    "text": "Community is divided by what Neil Ford calls the suck Rock dichotomy your",
    "start": "348900",
    "end": "355320"
  },
  {
    "text": "favorite technology sucks mine rocks much of the microservices versus",
    "start": "355320",
    "end": "360840"
  },
  {
    "text": "monolithic architecture debate is driven by this mindset a powerful antidote to",
    "start": "360840",
    "end": "367139"
  },
  {
    "text": "the suck Rock dike economy of patterns they provide a valuable framework for",
    "start": "367139",
    "end": "373500"
  },
  {
    "text": "making architectural decisions a pattern is a reusable solution to a",
    "start": "373500",
    "end": "379680"
  },
  {
    "text": "problem occurring in a context along with its consequences it's a relatively",
    "start": "379680",
    "end": "385020"
  },
  {
    "text": "ancient idea first described in the 70s by the real world architect Christopher",
    "start": "385020",
    "end": "391139"
  },
  {
    "text": "Excel Alexander they were then popularized in the software Community by",
    "start": "391139",
    "end": "396360"
  },
  {
    "text": "the gang of four book in the mid 90s what makes patterns especially valuable",
    "start": "396360",
    "end": "402360"
  },
  {
    "text": "is their structure in particular a pattern has consequences",
    "start": "402360",
    "end": "408139"
  },
  {
    "text": "the pattern forces you to consider both the benefits and the drawbacks of a",
    "start": "408139",
    "end": "414600"
  },
  {
    "text": "particular approach it also requires you to consider the patterns issues which",
    "start": "414600",
    "end": "420479"
  },
  {
    "text": "are the sub problems that are created by applying this pattern a pattern typically references the",
    "start": "420479",
    "end": "428220"
  },
  {
    "text": "success the patterns that solve those sub-problems and then finally a pattern",
    "start": "428220",
    "end": "433620"
  },
  {
    "text": "must also reference alternative patterns which are different ways of solving the",
    "start": "433620",
    "end": "439080"
  },
  {
    "text": "same problem later on I'll describe some specific patterns sometimes the patterns",
    "start": "439080",
    "end": "446039"
  },
  {
    "text": "that are related through the predecessor successor relationship and the",
    "start": "446039",
    "end": "451199"
  },
  {
    "text": "alternative relationship form of pattern language a pattern language is a",
    "start": "451199",
    "end": "456840"
  },
  {
    "text": "collection of patterns that solve problems in a particular domain nine",
    "start": "456840",
    "end": "462300"
  },
  {
    "text": "years ago I created the microservices pattern language with a goal of helping",
    "start": "462300",
    "end": "468000"
  },
  {
    "text": "Architects use microservices more appropriately and effectively",
    "start": "468000",
    "end": "474479"
  },
  {
    "text": "on the left are the monolithic architecture and microservice architecture patterns they are",
    "start": "474479",
    "end": "481740"
  },
  {
    "text": "alternative architectures for your application all of the other patterns",
    "start": "481740",
    "end": "487259"
  },
  {
    "text": "are direct or indirect successive patterns of the microservice architecture pattern they solve the",
    "start": "487259",
    "end": "494699"
  },
  {
    "text": "problems that you create for yourself by using microservices the pattern language",
    "start": "494699",
    "end": "500400"
  },
  {
    "text": "can be your guide when defining an architecture the way you use it to solve",
    "start": "500400",
    "end": "506220"
  },
  {
    "text": "a problem in a given context is as follows first you find the applicable",
    "start": "506220",
    "end": "512039"
  },
  {
    "text": "patterns next you assess the trade-offs of each pattern you then select a",
    "start": "512039",
    "end": "518339"
  },
  {
    "text": "pattern and apply it this pattern updates the context and creates one or",
    "start": "518339",
    "end": "524640"
  },
  {
    "text": "more sub problems you then repeat this process recursively until you have",
    "start": "524640",
    "end": "529860"
  },
  {
    "text": "designed an architecture I now want to describe the first tattoo patterns monolithic architecture and",
    "start": "529860",
    "end": "538260"
  },
  {
    "text": "microservice architecture these two patterns are alternative solutions to",
    "start": "538260",
    "end": "543779"
  },
  {
    "text": "the same problem the monolithic architecture structures the application as a single Deployable or executable",
    "start": "543779",
    "end": "551399"
  },
  {
    "text": "component the microservice architecture consists of multiple components or",
    "start": "551399",
    "end": "557700"
  },
  {
    "text": "Services these two patterns share the same context and forces let's look at",
    "start": "557700",
    "end": "564240"
  },
  {
    "text": "the context the context is the environment within which you are developing modern",
    "start": "564240",
    "end": "570480"
  },
  {
    "text": "applications it's as I described earlier the need for Loosely coupled devops",
    "start": "570480",
    "end": "576839"
  },
  {
    "text": "teams to deliver software rapidly frequently and reliably as measured by",
    "start": "576839",
    "end": "582600"
  },
  {
    "text": "the Dora metrics let's now talk about the problem that these two patterns",
    "start": "582600",
    "end": "587820"
  },
  {
    "text": "solves roughly speaking the problem is to design an application architecture",
    "start": "587820",
    "end": "593279"
  },
  {
    "text": "but more specifically we can frame the problem as how to group the application",
    "start": "593279",
    "end": "599180"
  },
  {
    "text": "subdomains to form executable or Deployable components which are also",
    "start": "599180",
    "end": "605580"
  },
  {
    "text": "known as Services a subdomain models and implements a slice of business",
    "start": "605580",
    "end": "611300"
  },
  {
    "text": "functionality which is sometimes known as a business capability each subdomain",
    "start": "611300",
    "end": "617580"
  },
  {
    "text": "is owned by a small team that's responsible for its development the",
    "start": "617580",
    "end": "623339"
  },
  {
    "text": "subdomains must be grouped to form executable or Deployable components a",
    "start": "623339",
    "end": "629519"
  },
  {
    "text": "monolithic architecture consists of a single component a microservice architecture consists of multiple",
    "start": "629519",
    "end": "636660"
  },
  {
    "text": "components or Services let's now look at the patterns forces",
    "start": "636660",
    "end": "641700"
  },
  {
    "text": "in order for a network of small autonomous devops teams to deliver software rapidly frequently and reliably",
    "start": "641700",
    "end": "649500"
  },
  {
    "text": "and sustainably you need an architecture with several key quality attributes",
    "start": "649500",
    "end": "655740"
  },
  {
    "text": "for example the authors of the accelerate book describe how testability",
    "start": "655740",
    "end": "661459"
  },
  {
    "text": "deployability and loose coupling are essential in addition if you're building",
    "start": "661459",
    "end": "667200"
  },
  {
    "text": "a long-lived application you need an architecture that lets you easily",
    "start": "667200",
    "end": "672899"
  },
  {
    "text": "upgrade its technology stack I've generalized these architectural",
    "start": "672899",
    "end": "678060"
  },
  {
    "text": "requirements into what I call the dark energy and dark matter forces",
    "start": "678060",
    "end": "683700"
  },
  {
    "text": "dark energy and dark matter are concepts for astrophysics but they are good",
    "start": "683700",
    "end": "689040"
  },
  {
    "text": "metaphors for the conflicting forces or concerns that you must resolve when",
    "start": "689040",
    "end": "694680"
  },
  {
    "text": "designing an architecture dark energy is an anti-gravity that's accelerating the",
    "start": "694680",
    "end": "700200"
  },
  {
    "text": "expansion of the universe it's a metaphor for the repulsive forces that",
    "start": "700200",
    "end": "706380"
  },
  {
    "text": "encourage you to put sub-domains in separate services these forces include team autonomy fast",
    "start": "706380",
    "end": "715380"
  },
  {
    "text": "deployment pipeline the need to support multiple technology stacks and so on",
    "start": "715380",
    "end": "721019"
  },
  {
    "text": "another dark energy force is the need to segregate subdomains by their",
    "start": "721019",
    "end": "726440"
  },
  {
    "text": "characteristics such as resource requirements business criticality or",
    "start": "726440",
    "end": "733200"
  },
  {
    "text": "regulatory requirements dark matter is an invisible matter that has a",
    "start": "733200",
    "end": "739200"
  },
  {
    "text": "gravitational effect on stars and galaxies it's a metaphor for the",
    "start": "739200",
    "end": "744480"
  },
  {
    "text": "attractive forces that encourage you to put sub-domains in the same service they",
    "start": "744480",
    "end": "750180"
  },
  {
    "text": "are primarily generated by the operations that span subdomains these",
    "start": "750180",
    "end": "755459"
  },
  {
    "text": "forces include simple efficient interactions between Services",
    "start": "755459",
    "end": "761060"
  },
  {
    "text": "minimizing design time and runtime coupling between services and preferring",
    "start": "761060",
    "end": "767399"
  },
  {
    "text": "asset transactions to eventual consistency let's now look at each pattern solution",
    "start": "767399",
    "end": "774180"
  },
  {
    "text": "in a little more detail the monolithic architecture is an architectural style",
    "start": "774180",
    "end": "779519"
  },
  {
    "text": "that structures the application as a single executable component a monolithic",
    "start": "779519",
    "end": "785639"
  },
  {
    "text": "application typically consists of a single code repository multiple teams",
    "start": "785639",
    "end": "791760"
  },
  {
    "text": "work on different modules of the same application there's a deployment",
    "start": "791760",
    "end": "797040"
  },
  {
    "text": "pipeline that builds and tests the application and deploys it into production this architecture has",
    "start": "797040",
    "end": "804420"
  },
  {
    "text": "numerous benefits and drawbacks because the monolithic architecture consists of",
    "start": "804420",
    "end": "809639"
  },
  {
    "text": "a single component it resolves the Dark Matter attractive forces all",
    "start": "809639",
    "end": "815519"
  },
  {
    "text": "interactions between the applications modules are local and so they're simple",
    "start": "815519",
    "end": "820680"
  },
  {
    "text": "and efficient there's no runtime coupling moreover the application can",
    "start": "820680",
    "end": "826500"
  },
  {
    "text": "Implement operations using acid transactions which are simple and",
    "start": "826500",
    "end": "831959"
  },
  {
    "text": "familiar but whether the architecture resolves the first three dark energy forces depends upon the size of the",
    "start": "831959",
    "end": "839820"
  },
  {
    "text": "application and the number of teams that are developing it as the monolith grows",
    "start": "839820",
    "end": "845940"
  },
  {
    "text": "it becomes more complex it takes longer to build and test so the single",
    "start": "845940",
    "end": "851700"
  },
  {
    "text": "deployment pipeline just gets slower and slower even the application startup time can",
    "start": "851700",
    "end": "859019"
  },
  {
    "text": "impact the deployment pipeline also as the number of teams increases their",
    "start": "859019",
    "end": "864899"
  },
  {
    "text": "autonomy declines since they are all contributing to the same code base in",
    "start": "864899",
    "end": "871079"
  },
  {
    "text": "the single repository for example even something as simple as pushing changes",
    "start": "871079",
    "end": "877019"
  },
  {
    "text": "to the code repository can be challenging due to contention some of",
    "start": "877019",
    "end": "882480"
  },
  {
    "text": "these issues can be mitigated through design techniques such as modularization and using sophisticated build",
    "start": "882480",
    "end": "890100"
  },
  {
    "text": "Technologies such as an automated merge queue and clustered builds however",
    "start": "890100",
    "end": "896279"
  },
  {
    "text": "ultimately it's likely that the monolithic architecture will become an",
    "start": "896279",
    "end": "901320"
  },
  {
    "text": "obstacle to Rapid frequent and reliable deployment furthermore the monolithic",
    "start": "901320",
    "end": "908399"
  },
  {
    "text": "architecture cannot resolve the last two dark energy forces it can only use the",
    "start": "908399",
    "end": "914459"
  },
  {
    "text": "single technology stack back you need to upgrade the code base in one go which",
    "start": "914459",
    "end": "919620"
  },
  {
    "text": "can be a significant undertaking and since there's only a single component",
    "start": "919620",
    "end": "924779"
  },
  {
    "text": "there's no possibility of segregating subdomains by their characteristics the",
    "start": "924779",
    "end": "930660"
  },
  {
    "text": "monolith is inherently a mixture of subdomains with different scalability requirements security requirements and",
    "start": "930660",
    "end": "939180"
  },
  {
    "text": "business criticality the microservice architecture is an architectural style",
    "start": "939180",
    "end": "944339"
  },
  {
    "text": "that structures the application as a set of components or in other words Services",
    "start": "944339",
    "end": "949940"
  },
  {
    "text": "each service is Loosely coupled independently Deployable implements one",
    "start": "949940",
    "end": "956579"
  },
  {
    "text": "or more business capabilities and is often owned by a small team a service",
    "start": "956579",
    "end": "962639"
  },
  {
    "text": "has an API that consists of operations and events an operation is a behavior",
    "start": "962639",
    "end": "969060"
  },
  {
    "text": "that can be invoked by a client either synchronously using a protocol like rest",
    "start": "969060",
    "end": "975000"
  },
  {
    "text": "or Ace synchronously using messaging events are published by a service when",
    "start": "975000",
    "end": "981300"
  },
  {
    "text": "something notable occurs such as the creation or updating of a business",
    "start": "981300",
    "end": "986399"
  },
  {
    "text": "entity a service can collaborate with other services it can invoke their",
    "start": "986399",
    "end": "992040"
  },
  {
    "text": "operations and consume their events a service consists of code in a source",
    "start": "992040",
    "end": "997500"
  },
  {
    "text": "code repository there's two types of code application code and infrastructure",
    "start": "997500",
    "end": "1002899"
  },
  {
    "text": "code application codes such as Java or golang is the services implementation",
    "start": "1002899",
    "end": "1009399"
  },
  {
    "text": "the infrastructure code such as kubernetes yaml or terraform configures",
    "start": "1009399",
    "end": "1015139"
  },
  {
    "text": "the infrastructure needed to run the service a service has a deployment",
    "start": "1015139",
    "end": "1020660"
  },
  {
    "text": "pipeline which builds tests and deploys the service at runtime the service",
    "start": "1020660",
    "end": "1026839"
  },
  {
    "text": "consists of one or more service instances typically containers and it",
    "start": "1026839",
    "end": "1032480"
  },
  {
    "text": "also consists of infrastructure such as databases and message queues an",
    "start": "1032480",
    "end": "1039319"
  },
  {
    "text": "essential characteristic of the microservice architecture is that each service is independently Deployable this",
    "start": "1039319",
    "end": "1047418"
  },
  {
    "text": "doesn't just mean that a service is packaged as a container image it's instead it means that a service can and",
    "start": "1047419",
    "end": "1055160"
  },
  {
    "text": "should be tested in isolation using test doubles for its dependencies it's then",
    "start": "1055160",
    "end": "1062179"
  },
  {
    "text": "deployed into production without any slow and brittle end-to-end tests a",
    "start": "1062179",
    "end": "1068960"
  },
  {
    "text": "service is Loosely coupled there are two types of coupling design time coupling",
    "start": "1068960",
    "end": "1074419"
  },
  {
    "text": "which I'll talk about later and runtime coupling runtime coupling between",
    "start": "1074419",
    "end": "1079940"
  },
  {
    "text": "Service A and B is the degree to which the availability of service a is",
    "start": "1079940",
    "end": "1086780"
  },
  {
    "text": "affected by the availability of service B for example the order service is tightly",
    "start": "1086780",
    "end": "1094460"
  },
  {
    "text": "coupled to the customer service if it cannot respond to a create order request",
    "start": "1094460",
    "end": "1100419"
  },
  {
    "text": "until the customer service responds to it this reduces the availability of the",
    "start": "1100419",
    "end": "1107840"
  },
  {
    "text": "create order operation ideally the order service should be able to respond to an",
    "start": "1107840",
    "end": "1114080"
  },
  {
    "text": "HTTP post without waiting for a response from the customer service",
    "start": "1114080",
    "end": "1119960"
  },
  {
    "text": "this is known as the self-contained service pattern and it typically",
    "start": "1119960",
    "end": "1125120"
  },
  {
    "text": "requires a service to use asynchronous collaboration patterns such as Saga",
    "start": "1125120",
    "end": "1131720"
  },
  {
    "text": "design time coupling is the degree to which service a is forced to change in",
    "start": "1131720",
    "end": "1138260"
  },
  {
    "text": "lockstep with service B two services are tightly designed time coupled when they",
    "start": "1138260",
    "end": "1145280"
  },
  {
    "text": "regularly change in lockstep for the same reason tight design time coupling",
    "start": "1145280",
    "end": "1151160"
  },
  {
    "text": "reduces productivity because it requires time-consuming API changes and",
    "start": "1151160",
    "end": "1158360"
  },
  {
    "text": "coordination between teams one way to minimize design time coupling is to",
    "start": "1158360",
    "end": "1164720"
  },
  {
    "text": "design services so that they look like icebergs an iceberg service has a small",
    "start": "1164720",
    "end": "1170900"
  },
  {
    "text": "stable API that encapsulates its much larger implementation this enables the",
    "start": "1170900",
    "end": "1178220"
  },
  {
    "text": "services team to make changes without regularly impacting the services clients",
    "start": "1178220",
    "end": "1184400"
  },
  {
    "text": "loose design time coupling also means that your services should not share",
    "start": "1184400",
    "end": "1189919"
  },
  {
    "text": "database tables for example the order service should not access the customer table directly instead it should use the",
    "start": "1189919",
    "end": "1198380"
  },
  {
    "text": "customer services API this is the database per service pattern services",
    "start": "1198380",
    "end": "1204860"
  },
  {
    "text": "are typically organized around business functions or capabilities this is",
    "start": "1204860",
    "end": "1210620"
  },
  {
    "text": "especially true since I Define a service as a group of subdomains each of which",
    "start": "1210620",
    "end": "1216500"
  },
  {
    "text": "corresponds to a business function or business capability Services should rarely Implement a",
    "start": "1216500",
    "end": "1224419"
  },
  {
    "text": "technical function for example it's a red flag and for services simply a",
    "start": "1224419",
    "end": "1229880"
  },
  {
    "text": "wrapper around a database the relationship between teams and services",
    "start": "1229880",
    "end": "1235460"
  },
  {
    "text": "is an interesting topic since one of the goals of the microservice architecture is team",
    "start": "1235460",
    "end": "1242360"
  },
  {
    "text": "autonomy it's common for each service to be owned by a single team this is the",
    "start": "1242360",
    "end": "1249080"
  },
  {
    "text": "service per team pattern however sometimes the service might be owned by",
    "start": "1249080",
    "end": "1254299"
  },
  {
    "text": "two or more teams especially when it resolves dark matter forces such as",
    "start": "1254299",
    "end": "1260360"
  },
  {
    "text": "efficient interactions it's important to remember that if a service is owned by a",
    "start": "1260360",
    "end": "1266720"
  },
  {
    "text": "small number of teams it does not necessarily reduce team autonomy",
    "start": "1266720",
    "end": "1271940"
  },
  {
    "text": "moreover it can help you avoid having an excessively fine-grained architecture",
    "start": "1271940",
    "end": "1278120"
  },
  {
    "text": "which is known as the more the merrier anti-pattern in fact a team should only",
    "start": "1278120",
    "end": "1284720"
  },
  {
    "text": "own more than one service if and only if it solves a tangible problem for example",
    "start": "1284720",
    "end": "1292340"
  },
  {
    "text": "the fraud team might need to have an additional python service in order to",
    "start": "1292340",
    "end": "1297919"
  },
  {
    "text": "run a python based machine learning model the microservice architecture has",
    "start": "1297919",
    "end": "1305720"
  },
  {
    "text": "various benefits and drawbacks when compared with the monolithic architecture the benefits and drawbacks",
    "start": "1305720",
    "end": "1313340"
  },
  {
    "text": "are flipped the microservice architecture pattern can resolve the",
    "start": "1313340",
    "end": "1318559"
  },
  {
    "text": "dark energy repulsive forces but potentially not resolve the Dark Matter",
    "start": "1318559",
    "end": "1324559"
  },
  {
    "text": "forces you need to carefully design the microservice architecture in other words",
    "start": "1324559",
    "end": "1330440"
  },
  {
    "text": "the grouping of subdomains to form services and the design of the",
    "start": "1330440",
    "end": "1335480"
  },
  {
    "text": "operations that span multiple services in order to resolve these forces you",
    "start": "1335480",
    "end": "1341480"
  },
  {
    "text": "should consider using the microservice architecture when one or more of the",
    "start": "1341480",
    "end": "1346580"
  },
  {
    "text": "following is true your application is large a large number of developers are",
    "start": "1346580",
    "end": "1352580"
  },
  {
    "text": "working on the application you need to use multiple technology Stacks it's",
    "start": "1352580",
    "end": "1358580"
  },
  {
    "text": "beneficial to segregate subdomains by their characteristics for example",
    "start": "1358580",
    "end": "1364220"
  },
  {
    "text": "segregating subdomains by their resource requirements might improve scalability",
    "start": "1364220",
    "end": "1370340"
  },
  {
    "text": "or segregating them by their business criticality can improve availability so",
    "start": "1370340",
    "end": "1376880"
  },
  {
    "text": "let's imagine that one or more of these are criteria applied to your monolithic application how exactly do you adopt the",
    "start": "1376880",
    "end": "1384799"
  },
  {
    "text": "microservice architecture there are numerous principles for migrating a",
    "start": "1384799",
    "end": "1389900"
  },
  {
    "text": "monolith to microservices I want to talk about these six principles",
    "start": "1389900",
    "end": "1395480"
  },
  {
    "text": "the first principle is make the most of your monolith remember it's not an",
    "start": "1395480",
    "end": "1401000"
  },
  {
    "text": "anti-pattern if if software development is slow then improve your process you",
    "start": "1401000",
    "end": "1407419"
  },
  {
    "text": "will need to do that anyway when adopting microservices adopt devops is",
    "start": "1407419",
    "end": "1412760"
  },
  {
    "text": "defined by the devops handbook automate your deployment Pipeline re-team",
    "start": "1412760",
    "end": "1418940"
  },
  {
    "text": "topologies and improve your organization similarly if your application technology",
    "start": "1418940",
    "end": "1424820"
  },
  {
    "text": "stack is out of date don't automatically assume that you should modernize it to",
    "start": "1424820",
    "end": "1430220"
  },
  {
    "text": "microservices sometimes migrating to a modern monolith is sufficient you should",
    "start": "1430220",
    "end": "1436460"
  },
  {
    "text": "only migrate to the microservice architecture if you have truly outgrown",
    "start": "1436460",
    "end": "1441860"
  },
  {
    "text": "your monolith the second principle is adopt microservices for the right",
    "start": "1441860",
    "end": "1447140"
  },
  {
    "text": "reasons you should only do it in order to resolve one or more dark energy",
    "start": "1447140",
    "end": "1452840"
  },
  {
    "text": "forces for example one one reason to use microservices is to improve team",
    "start": "1452840",
    "end": "1459440"
  },
  {
    "text": "autonomy another is to support multiple technology Stacks you might also adopt",
    "start": "1459440",
    "end": "1465919"
  },
  {
    "text": "microservices to segregate subdomains by their differing characteristics the",
    "start": "1465919",
    "end": "1472460"
  },
  {
    "text": "third principle for refactoring to microservices is that you should Define a draft Target architecture up front",
    "start": "1472460",
    "end": "1481659"
  },
  {
    "text": "assemblage is the name of the architecture design process that I like to use it takes your applications",
    "start": "1481659",
    "end": "1488980"
  },
  {
    "text": "requirements as input and defines a service architecture that consists of",
    "start": "1488980",
    "end": "1495559"
  },
  {
    "text": "one or more components it's important to remember however that this target architecture is not set in stone when",
    "start": "1495559",
    "end": "1504140"
  },
  {
    "text": "you do the migration you'll learn more about both your application and the",
    "start": "1504140",
    "end": "1509600"
  },
  {
    "text": "microservice architecture as a result you should expect to evolve the target",
    "start": "1509600",
    "end": "1515419"
  },
  {
    "text": "texture the fourth principle for refactoring to microservices is that it",
    "start": "1515419",
    "end": "1521419"
  },
  {
    "text": "should be done incrementally using the Strangler application pattern the",
    "start": "1521419",
    "end": "1526880"
  },
  {
    "text": "evolution of your architecture looks something like this at the beginning you",
    "start": "1526880",
    "end": "1532100"
  },
  {
    "text": "just have the monolith over time more and more functionality is migrated out",
    "start": "1532100",
    "end": "1538820"
  },
  {
    "text": "of the monolith into services you can also Implement new features",
    "start": "1538820",
    "end": "1544460"
  },
  {
    "text": "directly as Services the monolith gradually shrinks and my ultimately",
    "start": "1544460",
    "end": "1550400"
  },
  {
    "text": "disappear the fifth principle is that you should focus on migrating",
    "start": "1550400",
    "end": "1555679"
  },
  {
    "text": "functionality that gives you the highest return on investment migrating a module",
    "start": "1555679",
    "end": "1561500"
  },
  {
    "text": "out of the monolith into a service is time consuming for example you need to",
    "start": "1561500",
    "end": "1567760"
  },
  {
    "text": "untangle dependencies as a result you should only want to migrate a module if",
    "start": "1567760",
    "end": "1574460"
  },
  {
    "text": "there's a benefit to doing so in other words if it resolves one or more of the",
    "start": "1574460",
    "end": "1580880"
  },
  {
    "text": "dark energy forces such as improved team autonomy or faster deployment pipeline a",
    "start": "1580880",
    "end": "1588500"
  },
  {
    "text": "good way to visualize priorities is to place the applications modules on a cost",
    "start": "1588500",
    "end": "1594679"
  },
  {
    "text": "benefit Matrix you want to focus on those modules in the top right quadrant",
    "start": "1594679",
    "end": "1600620"
  },
  {
    "text": "the sixth principle for refactoring to microservices is that you should measure",
    "start": "1600620",
    "end": "1606980"
  },
  {
    "text": "success using the right metrics success is not measured by counting the number",
    "start": "1606980",
    "end": "1612919"
  },
  {
    "text": "of services there's not inherent value in having Services what matters are the",
    "start": "1612919",
    "end": "1619279"
  },
  {
    "text": "benefits of of using Services there are two types of metrics that measure",
    "start": "1619279",
    "end": "1624919"
  },
  {
    "text": "success the first are improvements to the Dora metrics you want to see a",
    "start": "1624919",
    "end": "1630799"
  },
  {
    "text": "reduction in lead time which is the time from commit to deploy you want to see an",
    "start": "1630799",
    "end": "1636260"
  },
  {
    "text": "increase in deployment frequency while at the same time you want to see",
    "start": "1636260",
    "end": "1641539"
  },
  {
    "text": "deployments become much more reliable the second way to measure success are",
    "start": "1641539",
    "end": "1647059"
  },
  {
    "text": "improvements to the other illites such as scalability in the final part of my",
    "start": "1647059",
    "end": "1652820"
  },
  {
    "text": "talk I want to explain how the microservices pattern language can be your guide when designing an",
    "start": "1652820",
    "end": "1660380"
  },
  {
    "text": "architecture deciding to use the microservice architecture is just the beginning of",
    "start": "1660380",
    "end": "1666740"
  },
  {
    "text": "the architecture definition process the pattern language consists of solutions",
    "start": "1666740",
    "end": "1672200"
  },
  {
    "text": "to the numerous problems that you create for yourself by deciding to use",
    "start": "1672200",
    "end": "1677380"
  },
  {
    "text": "microservices there are three categories of patterns the first category are",
    "start": "1677380",
    "end": "1683720"
  },
  {
    "text": "application focused patterns these include patterns for Designing",
    "start": "1683720",
    "end": "1688880"
  },
  {
    "text": "operations that span multiple services such as the Saga pattern and the cqrs",
    "start": "1688880",
    "end": "1695299"
  },
  {
    "text": "pattern the third category are patterns that are infrastructure focused these",
    "start": "1695299",
    "end": "1701179"
  },
  {
    "text": "include include the deployment patterns except for serverless actually in",
    "start": "1701179",
    "end": "1707120"
  },
  {
    "text": "between is the second category which are patterns that are a combination of",
    "start": "1707120",
    "end": "1713000"
  },
  {
    "text": "application code and infrastructure for example developers write application",
    "start": "1713000",
    "end": "1719900"
  },
  {
    "text": "code that uses infrastructure Services most observability patterns fall into",
    "start": "1719900",
    "end": "1726320"
  },
  {
    "text": "this category the serverless deployment pattern is also in this category since",
    "start": "1726320",
    "end": "1731539"
  },
  {
    "text": "it's a combination of a programming model and infrastructure let's now look",
    "start": "1731539",
    "end": "1737179"
  },
  {
    "text": "at a few of these patterns there are two database architecture patterns the first",
    "start": "1737179",
    "end": "1743120"
  },
  {
    "text": "is the shared database pattern while this approach seems simple it",
    "start": "1743120",
    "end": "1749360"
  },
  {
    "text": "creates design time and runtime coupling as a result it's almost always an",
    "start": "1749360",
    "end": "1755740"
  },
  {
    "text": "anti-pattern the second pattern is the database per service pattern a Services",
    "start": "1755740",
    "end": "1761960"
  },
  {
    "text": "database schema is part of its implementation and so is hidden behind",
    "start": "1761960",
    "end": "1767360"
  },
  {
    "text": "the services API this pattern reduces design time coupling between Services",
    "start": "1767360",
    "end": "1773860"
  },
  {
    "text": "one drawback however is the transaction management is more complicated an",
    "start": "1773860",
    "end": "1780140"
  },
  {
    "text": "operation that spans multiple Services cannot be implemented as an asset",
    "start": "1780140",
    "end": "1785960"
  },
  {
    "text": "transaction instead you must use eventual consistency there are four",
    "start": "1785960",
    "end": "1791840"
  },
  {
    "text": "patterns for implementing operations that span Services a command which is an",
    "start": "1791840",
    "end": "1797539"
  },
  {
    "text": "operation that updates data can be implemented using either The Saga pattern and or the command side replica",
    "start": "1797539",
    "end": "1805340"
  },
  {
    "text": "pattern a query which is an operation that retrieves data can be implemented",
    "start": "1805340",
    "end": "1811640"
  },
  {
    "text": "using either the API composition pattern or the cqrs pattern one drawback of",
    "start": "1811640",
    "end": "1818419"
  },
  {
    "text": "these four patterns is that they are eventually consistent as a result using",
    "start": "1818419",
    "end": "1823880"
  },
  {
    "text": "them is more complex than using acid transactions the pattern language contains numerous patterns related to",
    "start": "1823880",
    "end": "1831740"
  },
  {
    "text": "inter-service communication the communication style patterns are remote",
    "start": "1831740",
    "end": "1837860"
  },
  {
    "text": "procedure invocation and messaging remote procedure and vacation style",
    "start": "1837860",
    "end": "1843620"
  },
  {
    "text": "communication such as rest is simple familiar and easy to use one drawback",
    "start": "1843620",
    "end": "1850700"
  },
  {
    "text": "however is that it can create excessive runtime coupling which reduces",
    "start": "1850700",
    "end": "1856520"
  },
  {
    "text": "availability as a result it's a pattern that you should use very carefully the",
    "start": "1856520",
    "end": "1862820"
  },
  {
    "text": "other communication style pattern is asynchronous message there are various flavors of",
    "start": "1862820",
    "end": "1869240"
  },
  {
    "text": "asynchronous messaging including events the application typically uses a message",
    "start": "1869240",
    "end": "1874820"
  },
  {
    "text": "broker such as Apache Kafka or rabbitmq alternatively it might use a brokerless",
    "start": "1874820",
    "end": "1881539"
  },
  {
    "text": "messaging mechanism such as web hooks asynchronous messaging is more complex",
    "start": "1881539",
    "end": "1887620"
  },
  {
    "text": "however a key benefit is that it reduces runtime coupling between Services the",
    "start": "1887620",
    "end": "1894500"
  },
  {
    "text": "pattern language includes several deployment patterns including service per VM service per container and",
    "start": "1894500",
    "end": "1902360"
  },
  {
    "text": "serverless deployment each pattern has different trade-offs my",
    "start": "1902360",
    "end": "1907820"
  },
  {
    "text": "recommendation is to use serverless deployment on a public Cloud provided",
    "start": "1907820",
    "end": "1913399"
  },
  {
    "text": "that it's a good fit for your application otherwise I'd recommend using containers or more specifically",
    "start": "1913399",
    "end": "1921500"
  },
  {
    "text": "kubernetes so that's my part of this presentation in summary the best architecture for",
    "start": "1921500",
    "end": "1929899"
  },
  {
    "text": "your application depends upon the details of your application and your",
    "start": "1929899",
    "end": "1935240"
  },
  {
    "text": "organization the microservices pattern language is your guide when designing an",
    "start": "1935240",
    "end": "1941840"
  },
  {
    "text": "application architecture the dark energy and dark matter forces are a very useful",
    "start": "1941840",
    "end": "1947779"
  },
  {
    "text": "set of criteria for helping you decide between the monolithic and microservice",
    "start": "1947779",
    "end": "1954080"
  },
  {
    "text": "architecture if you decide to migrate your monolithic application to microservices it's important to follow",
    "start": "1954080",
    "end": "1961820"
  },
  {
    "text": "the refactoring principles in particular it's essential that you incrementally",
    "start": "1961820",
    "end": "1969020"
  },
  {
    "text": "migrate to a microservice architecture at this point I'm going to hand over to Leo who will talk about deploying",
    "start": "1969020",
    "end": "1976340"
  },
  {
    "text": "services using kubernetes all right thank you so much Chris this",
    "start": "1976340",
    "end": "1982880"
  },
  {
    "text": "was very insightful I hope you all really appreciated all the really really cool knowledge that you that Chris just",
    "start": "1982880",
    "end": "1988640"
  },
  {
    "text": "shared right like microservices monoliths went to pick one over the other and the differences around these",
    "start": "1988640",
    "end": "1994220"
  },
  {
    "text": "architectural patterns that was really awesome thank you Chris so I want to take all that Chris just shared with you",
    "start": "1994220",
    "end": "2000580"
  },
  {
    "text": "and breaking down to the world of kubernetes okay I want us to talk as to how we can actually and likely will have",
    "start": "2000580",
    "end": "2007419"
  },
  {
    "text": "to run and operate and build and maintain workloads that are following both architectural patterns and that we",
    "start": "2007419",
    "end": "2014740"
  },
  {
    "text": "can do that on top of kubernetes uh using all the capabilities that kubernetes can offer okay",
    "start": "2014740",
    "end": "2022120"
  },
  {
    "text": "um before I get to that though I'd like to introduce myself my name is Leonardo morillo I am principal Solutions",
    "start": "2022120",
    "end": "2027940"
  },
  {
    "text": "architect at weaveworks and we are the github's company we've worked as a company that coined the term git Ops and",
    "start": "2027940",
    "end": "2033880"
  },
  {
    "text": "we specialize in application lifecycle and developer experience on top of kubernetes okay we have a very very",
    "start": "2033880",
    "end": "2040419"
  },
  {
    "text": "strong process in the open source Community this webinar is sponsored by the CNC app the cloud native Computing",
    "start": "2040419",
    "end": "2045640"
  },
  {
    "text": "foundation and we have actually donated a few of our projects uh flux which is a get Ops toolkit Flagger for Progressive",
    "start": "2045640",
    "end": "2053020"
  },
  {
    "text": "deployment to the cncf and we build other products such as we've get UPS open source and with github's Enterprise",
    "start": "2053020",
    "end": "2059339"
  },
  {
    "text": "to enhance and extend the capabilities of our open source solutions for github's deployment policies code",
    "start": "2059339",
    "end": "2066158"
  },
  {
    "text": "cluster lifecycle management and many many other things so look us up we're doing a lot of cool things that likely will help your Enterprise as well",
    "start": "2066159",
    "end": "2072700"
  },
  {
    "text": "so now that I mentioned Enterprise let's talk a little bit as to what the reality of the Enterprise is okay",
    "start": "2072700",
    "end": "2080740"
  },
  {
    "text": "it's very likely that for most of you that are listening to me now um Greenfield is far from our reality",
    "start": "2080740",
    "end": "2087700"
  },
  {
    "text": "right uh most of the people that I work with most of our clients are actually",
    "start": "2087700",
    "end": "2092740"
  },
  {
    "text": "Enterprise level organizations that have a lot of Legacy code bases they have huge monoliths that are mission critical",
    "start": "2092740",
    "end": "2099220"
  },
  {
    "text": "they're basically not going anywhere anytime soon so it is very important to realize that as much as there are as",
    "start": "2099220",
    "end": "2106540"
  },
  {
    "text": "there are all these different architectural patterns that we can leverage today monoliths are mission",
    "start": "2106540",
    "end": "2112000"
  },
  {
    "text": "critical and they're gonna stick around for a while okay and it's because it takes effort and time to",
    "start": "2112000",
    "end": "2120700"
  },
  {
    "text": "strangle them or to build new capabilities using a different architecture pattern to replace them",
    "start": "2120700",
    "end": "2126460"
  },
  {
    "text": "over time these are applications that have been long-standing as I mentioned they're Mission critical and the risk",
    "start": "2126460",
    "end": "2133599"
  },
  {
    "text": "and effort Associated to modernizing them is non-trivial so it's important",
    "start": "2133599",
    "end": "2138760"
  },
  {
    "text": "for everybody both those that are building this application developers as well as the people that are managing",
    "start": "2138760",
    "end": "2143800"
  },
  {
    "text": "those operations and devops teams and infrastructure teams and all the people that have to deal with this applications",
    "start": "2143800",
    "end": "2149560"
  },
  {
    "text": "to realize and we probably already have that it will take time for us to go from having monoliths in",
    "start": "2149560",
    "end": "2157420"
  },
  {
    "text": "our infrastructure and in our solutions to just being microservices okay",
    "start": "2157420",
    "end": "2164140"
  },
  {
    "text": "but the idea here is that we want to choose a platform that will simplify the",
    "start": "2164140",
    "end": "2170020"
  },
  {
    "text": "process of us moving from one to the other and into the future right because we're talking about models and",
    "start": "2170020",
    "end": "2176320"
  },
  {
    "text": "microservices today Chris briefly mentioned uh functions and service or serverless as it's all also known there",
    "start": "2176320",
    "end": "2183040"
  },
  {
    "text": "likely will be other patterns that we'll have to adapt for that will have to operate we have to build so the whole",
    "start": "2183040",
    "end": "2190839"
  },
  {
    "text": "idea here is what we can do to abstract complexity from this heterogeneous",
    "start": "2190839",
    "end": "2196119"
  },
  {
    "text": "complex environments it's better for everybody it's better for the developers that are building those services that",
    "start": "2196119",
    "end": "2202480"
  },
  {
    "text": "are that are operating those Solutions um and it's it's indispensable to reduce",
    "start": "2202480",
    "end": "2209200"
  },
  {
    "text": "the friction so that all these different generations of Technology can coexist and that's where I think kubernetes",
    "start": "2209200",
    "end": "2216339"
  },
  {
    "text": "provides us with a unique Advantage okay so let's look at to our agenda this is",
    "start": "2216339",
    "end": "2221380"
  },
  {
    "text": "exactly what we're going to be looking at today one we're going to talk about the different uh Solutions out there and",
    "start": "2221380",
    "end": "2227800"
  },
  {
    "text": "capabilities that allows us to use kubernetes as our holistic workload",
    "start": "2227800",
    "end": "2233500"
  },
  {
    "text": "scheduler okay so this is whether you're running VMS or whether you're running containers or functions serverless you",
    "start": "2233500",
    "end": "2241480"
  },
  {
    "text": "can basically run anything and everything on the same platform and this has a host of benefits that we'll look",
    "start": "2241480",
    "end": "2247420"
  },
  {
    "text": "into okay we're gonna there's a lot already being said about running microservices and",
    "start": "2247420",
    "end": "2253839"
  },
  {
    "text": "kubernetes it's after all kind of like it's most a friendly environment right we're also going to look at specifics as",
    "start": "2253839",
    "end": "2260680"
  },
  {
    "text": "to how you can actually run your monoliths on kubernetes as well and realize that containers are not just for",
    "start": "2260680",
    "end": "2266920"
  },
  {
    "text": "microservices you can actually containerize monoliths and there's a whole SKU of benefits that you'll get if",
    "start": "2266920",
    "end": "2273280"
  },
  {
    "text": "you run your monoliths containerized in a common platform together with the rest of your code basis or your services",
    "start": "2273280",
    "end": "2281560"
  },
  {
    "text": "and what this enables you to do is to reduce the complexity as you start modernizing as you start moving forward",
    "start": "2281560",
    "end": "2288280"
  },
  {
    "text": "okay so we'll see how to reduce the complexity of the pattern that extracts",
    "start": "2288280",
    "end": "2294220"
  },
  {
    "text": "capabilities and puts them in their own little bounded context straggling those applications using kubernetes Primitives",
    "start": "2294220",
    "end": "2300940"
  },
  {
    "text": "uh Services investors and other such objects okay and then",
    "start": "2300940",
    "end": "2307000"
  },
  {
    "text": "once we are living this new world of both modelists and microservices coexisting in a common platform we can",
    "start": "2307000",
    "end": "2314619"
  },
  {
    "text": "see how we can incrementally make changes so that we increase the ex",
    "start": "2314619",
    "end": "2320740"
  },
  {
    "text": "the extent of cloud native nests to your applications as you go through this",
    "start": "2320740",
    "end": "2327040"
  },
  {
    "text": "iterative incremental process of modernizing from monoliths to",
    "start": "2327040",
    "end": "2332320"
  },
  {
    "text": "microservices or eventually just choosing to have both live on in your architecture okay",
    "start": "2332320",
    "end": "2340119"
  },
  {
    "text": "so let's talk about kubernetes as your holistic control plane and what I'm what",
    "start": "2340119",
    "end": "2346119"
  },
  {
    "text": "I mean with that is what I mean by that is kubernetes as the control plane that",
    "start": "2346119",
    "end": "2351400"
  },
  {
    "text": "manages everything in your uh organization",
    "start": "2351400",
    "end": "2357720"
  },
  {
    "text": "there's basically Solutions and capabilities out there so",
    "start": "2359440",
    "end": "2364839"
  },
  {
    "text": "that kubernetes can become the single API to operate any type of resource that",
    "start": "2364839",
    "end": "2373119"
  },
  {
    "text": "you need to operate okay here's just a few of those options that I think are",
    "start": "2373119",
    "end": "2378280"
  },
  {
    "text": "very relevant and valuable we're actually going to go in depth into any one of these but I think it's important for you to be aware if you're not",
    "start": "2378280",
    "end": "2385960"
  },
  {
    "text": "already of the different tools that are out there that allow you to use kubernetes as the API for everything",
    "start": "2385960",
    "end": "2391780"
  },
  {
    "text": "there's other Talks by the CNC if they're very valuable here as well so look them up",
    "start": "2391780",
    "end": "2396880"
  },
  {
    "text": "whoever is allows you to uh manage virtual machines VMS just as you would any other workload in kubernetes Cube",
    "start": "2396880",
    "end": "2404140"
  },
  {
    "text": "vert is a project also donated to the cncf that allows you to declare",
    "start": "2404140",
    "end": "2410980"
  },
  {
    "text": "virtual machines as kubernetes objects okay so this is one path where you can",
    "start": "2410980",
    "end": "2416680"
  },
  {
    "text": "start integrating workloads that are running on VMS with containerized workloads and manage the life cycle and",
    "start": "2416680",
    "end": "2424000"
  },
  {
    "text": "their discoverability and how to reach them using a common pattern which is",
    "start": "2424000",
    "end": "2431500"
  },
  {
    "text": "basically driven by kubernetes declarative configuration services and all these other capabilities all these",
    "start": "2431500",
    "end": "2437260"
  },
  {
    "text": "other Primitives that kubernetes enables cross plane another project by the cncf is for VMS and anything else this is a",
    "start": "2437260",
    "end": "2445300"
  },
  {
    "text": "project that you can use to declare um any Cloud resource any manage Cloud",
    "start": "2445300",
    "end": "2451300"
  },
  {
    "text": "resource across pretty much any public Cloud that is out there using the same patterns open functions as a service if",
    "start": "2451300",
    "end": "2458800"
  },
  {
    "text": "you need to run functions or Services as a service within your cluster of course",
    "start": "2458800",
    "end": "2463900"
  },
  {
    "text": "containers okay which containers are kind of underlying component to all",
    "start": "2463900",
    "end": "2468940"
  },
  {
    "text": "those different types of workloads and uh now we have the open container initiative right oci which is kind of",
    "start": "2468940",
    "end": "2475060"
  },
  {
    "text": "this new standard for container images so point being kubernetes is a growing",
    "start": "2475060",
    "end": "2480940"
  },
  {
    "text": "ecosystem where you can effectively run any type of workload in the platform",
    "start": "2480940",
    "end": "2486640"
  },
  {
    "text": "following a common operating model uh using declarative configuration basically",
    "start": "2486640",
    "end": "2492660"
  },
  {
    "text": "reducing the complexity and friction between all the different teams that are managing different aspects different",
    "start": "2492660",
    "end": "2498760"
  },
  {
    "text": "areas of your architecture now let's talk about models and",
    "start": "2498760",
    "end": "2506320"
  },
  {
    "text": "microservices and how they can coexist and just as I mentioned",
    "start": "2506320",
    "end": "2511480"
  },
  {
    "text": "as well as any other Cloud resource that you have serverless functions or anything else okay",
    "start": "2511480",
    "end": "2517480"
  },
  {
    "text": "now the way for mono is to coexists this is after going from just VM like if",
    "start": "2517480",
    "end": "2523540"
  },
  {
    "text": "you're already running a monolith on a virtual machine you can use cubert Let's Take It Forward okay let's think about",
    "start": "2523540",
    "end": "2530160"
  },
  {
    "text": "containers okay your microservices are already containerized they're already",
    "start": "2530160",
    "end": "2535300"
  },
  {
    "text": "server uh stateless they're already hopefully following uh 12 factors in",
    "start": "2535300",
    "end": "2541240"
  },
  {
    "text": "their Cloud native but it is possible to containerize your monolith as well with caveats kind of",
    "start": "2541240",
    "end": "2549460"
  },
  {
    "text": "knowing where to look and how to approach it okay and this is one key step to having your",
    "start": "2549460",
    "end": "2554920"
  },
  {
    "text": "monolith and your microservices living together as containers in the common platform okay",
    "start": "2554920",
    "end": "2561520"
  },
  {
    "text": "let's start with let's just first look at kind of the four different areas where you're gonna",
    "start": "2561520",
    "end": "2566680"
  },
  {
    "text": "have to look into and we'll we'll double click on them going forward okay stickiness and statefulness is one of",
    "start": "2566680",
    "end": "2572980"
  },
  {
    "text": "the most monoliths were built in a world where uh you're not really looking for",
    "start": "2572980",
    "end": "2579819"
  },
  {
    "text": "statelessness right they actually hold state and because the whole state you need to",
    "start": "2579819",
    "end": "2585700"
  },
  {
    "text": "have session Affinity right if I make a request all my requests need to go to the same",
    "start": "2585700",
    "end": "2591220"
  },
  {
    "text": "instance of that workload because that's where my State's been kept so you need",
    "start": "2591220",
    "end": "2596619"
  },
  {
    "text": "to look at how to do how to handle this stickiness and statefulness when you containerized a modeler in into a",
    "start": "2596619",
    "end": "2603819"
  },
  {
    "text": "container of course because of this because of uh kind of",
    "start": "2603819",
    "end": "2608980"
  },
  {
    "text": "like the way that states managed and sessions are managed you cannot always use the same patterns that you use for",
    "start": "2608980",
    "end": "2616300"
  },
  {
    "text": "scaling microservices uh if you're running containerized monoliths okay so",
    "start": "2616300",
    "end": "2621940"
  },
  {
    "text": "Cloud native patterns don't always apply and when I what I mean by that is",
    "start": "2621940",
    "end": "2628660"
  },
  {
    "text": "um you usually can't always do horizontal Auto scaling okay so horizontal scaling is when you create",
    "start": "2628660",
    "end": "2634900"
  },
  {
    "text": "for anybody that doesn't know create create more instances of the workload to handle more capacity as opposed to just",
    "start": "2634900",
    "end": "2641859"
  },
  {
    "text": "increasing the resources Associated to any one instance right so you're gonna have to look at how to scale your",
    "start": "2641859",
    "end": "2647560"
  },
  {
    "text": "monolith in in this new environment and also how to build the artifact because most monoliths uh depend",
    "start": "2647560",
    "end": "2655960"
  },
  {
    "text": "and expect assume a lot of characteristics are met by the",
    "start": "2655960",
    "end": "2662440"
  },
  {
    "text": "underlying nodes that are running the workload and usually not immutable which",
    "start": "2662440",
    "end": "2667480"
  },
  {
    "text": "means they're not replaced with new versions rather they're reconfigured to",
    "start": "2667480",
    "end": "2672819"
  },
  {
    "text": "run the new version when a new release happens okay so we're gonna have to look as to how how to go from mutable to",
    "start": "2672819",
    "end": "2679599"
  },
  {
    "text": "immutable and how to handle configuration okay and of course build size and time okay uh models are usually",
    "start": "2679599",
    "end": "2687760"
  },
  {
    "text": "larger than microservices well they're larger code bases they'll do a whole bunch of different things so we want to",
    "start": "2687760",
    "end": "2694000"
  },
  {
    "text": "make sure that we are optimizing there's new artifacts that we're",
    "start": "2694000",
    "end": "2699339"
  },
  {
    "text": "building not just for their build size and well that is important and we'll",
    "start": "2699339",
    "end": "2705880"
  },
  {
    "text": "look at soon why but also because of the of the of the time that it takes to",
    "start": "2705880",
    "end": "2710980"
  },
  {
    "text": "build right which has an impact uh Chris talked about Dora metrics right",
    "start": "2710980",
    "end": "2716260"
  },
  {
    "text": "how quickly you can get a new version built and how quickly you can actually enable your developers to iterate and",
    "start": "2716260",
    "end": "2723099"
  },
  {
    "text": "release small changes will be critical to the adoption of this",
    "start": "2723099",
    "end": "2728440"
  },
  {
    "text": "new pattern of this new platform as you start to unify your",
    "start": "2728440",
    "end": "2734260"
  },
  {
    "text": "microservices and your monoliths in a single platform okay let's let's double click on each one of these okay",
    "start": "2734260",
    "end": "2741839"
  },
  {
    "text": "stickiness and statefulness okay so just to make sure that we're all on",
    "start": "2741880",
    "end": "2747880"
  },
  {
    "text": "the same page stickiness means means that whenever I go and make a request to a service",
    "start": "2747880",
    "end": "2753940"
  },
  {
    "text": "all my future requests will hit that same service and that's usually related",
    "start": "2753940",
    "end": "2759400"
  },
  {
    "text": "to statefulness there's something about my request that needs that is kept and",
    "start": "2759400",
    "end": "2764440"
  },
  {
    "text": "known by that instance and my next request is gonna have to hit something that knows that same thing okay there's",
    "start": "2764440",
    "end": "2771700"
  },
  {
    "text": "a couple of areas where you can enable uh session stickiness in your deployment",
    "start": "2771700",
    "end": "2778780"
  },
  {
    "text": "of your monolith in kubernetes and this is dependent on where you need it and usually you might need to know both",
    "start": "2778780",
    "end": "2785260"
  },
  {
    "text": "places it can be done at the service level or at the Ingress level okay we're",
    "start": "2785260",
    "end": "2790960"
  },
  {
    "text": "going to look a little bit later on this talk as to what those different components are just remember you can do",
    "start": "2790960",
    "end": "2797740"
  },
  {
    "text": "it in both places and it's as with most things kubernetes either just a",
    "start": "2797740",
    "end": "2802900"
  },
  {
    "text": "um a change in the configuration of the object that you're deploying or just an",
    "start": "2802900",
    "end": "2808780"
  },
  {
    "text": "annotation uh annotations are of course dependent on the Ingress that you're using so here's just a quick example of",
    "start": "2808780",
    "end": "2815740"
  },
  {
    "text": "um how you use it how you do it with the nginx Ingress controller you can do it with service measures as well you can do",
    "start": "2815740",
    "end": "2822160"
  },
  {
    "text": "it with SEO and you can do it with other increase controllers they all have kind of a different way to do it",
    "start": "2822160",
    "end": "2828099"
  },
  {
    "text": "I guess the bottom line is and it's very important once you're going into this world of",
    "start": "2828099",
    "end": "2833819"
  },
  {
    "text": "containerizing your monolith and you want to run it together with your with your microservices you need to make sure that your underlying infrastructure what",
    "start": "2833819",
    "end": "2840460"
  },
  {
    "text": "you're doing for Ingress will support this type of capability now as I mentioned uh session stickiness",
    "start": "2840460",
    "end": "2848200"
  },
  {
    "text": "is mostly related to statefulness there is a an object a kind that allows you to",
    "start": "2848200",
    "end": "2855819"
  },
  {
    "text": "to manage deployments of stateful workloads in kubernetes and they're called stateful sets okay with stateful",
    "start": "2855819",
    "end": "2863380"
  },
  {
    "text": "sets you get unique Network identifiers storage that is attached to your",
    "start": "2863380",
    "end": "2868480"
  },
  {
    "text": "workload will remain even on on a restart and uh it's always ordered okay",
    "start": "2868480",
    "end": "2875440"
  },
  {
    "text": "so using these two well this kind of three different",
    "start": "2875440",
    "end": "2881440"
  },
  {
    "text": "um configuration areas you can manage",
    "start": "2881440",
    "end": "2887200"
  },
  {
    "text": "statefulness and stickiness of your monolith when containerized Within kubernetes",
    "start": "2887200",
    "end": "2893500"
  },
  {
    "text": "now we talked about scaling your monolith in kubernetes okay",
    "start": "2893500",
    "end": "2900099"
  },
  {
    "text": "meaning enabling it to handle moral load okay",
    "start": "2900099",
    "end": "2905700"
  },
  {
    "text": "with microservices you usually rely on horizontal portal scalars okay",
    "start": "2905700",
    "end": "2911560"
  },
  {
    "text": "horizontal plural scalars will create multiple instances of your will increase the replicas it will increase the number",
    "start": "2911560",
    "end": "2918160"
  },
  {
    "text": "of parts that are serving your workload that's not always possible with monoliths because of what we just talked",
    "start": "2918160",
    "end": "2924579"
  },
  {
    "text": "about right State and stickiness and whatnot and this is where the vertical plot autoscaler comes into play okay the",
    "start": "2924579",
    "end": "2931480"
  },
  {
    "text": "vertical part of the scalar what it does is it increases and it it gives the instance of your workload",
    "start": "2931480",
    "end": "2938319"
  },
  {
    "text": "more resources it doesn't spin more copies of it it just makes them handle have more memory or have more CPU okay",
    "start": "2938319",
    "end": "2945880"
  },
  {
    "text": "so the vertical part of the scalar is what you usually want to use for monolithic deployments for stickiness",
    "start": "2945880",
    "end": "2951280"
  },
  {
    "text": "and um stakeholders are relevant now there's",
    "start": "2951280",
    "end": "2956859"
  },
  {
    "text": "some stuff that you need to watch out for okay because of your vertical parallel scalar Behavior where it's",
    "start": "2956859",
    "end": "2962319"
  },
  {
    "text": "increasing their capacity requested by each one of those workloads",
    "start": "2962319",
    "end": "2968260"
  },
  {
    "text": "you might get to a point where you're requesting more capacity than a given node is able to provide it that anyone",
    "start": "2968260",
    "end": "2974319"
  },
  {
    "text": "know it is able to provide which would make your uh workload unable to be scheduled",
    "start": "2974319",
    "end": "2981099"
  },
  {
    "text": "anywhere so this is something to really be mindful of when you configure the the patterns the the configuration of your",
    "start": "2981099",
    "end": "2988839"
  },
  {
    "text": "vertical part of the scaler and when you define your node capacity okay we'll",
    "start": "2988839",
    "end": "2994359"
  },
  {
    "text": "we'll talk about how to also isolate monoliths from microservices in terms of node going forward another very",
    "start": "2994359",
    "end": "3002880"
  },
  {
    "text": "important thing is you don't want to use horizontal protocol scalar and the vertical part Auto scalar together okay",
    "start": "3002880",
    "end": "3008940"
  },
  {
    "text": "that's just a recipe for disaster now",
    "start": "3008940",
    "end": "3014220"
  },
  {
    "text": "dependencies and configuration okay we mentioned how monoliths are usually",
    "start": "3014220",
    "end": "3020579"
  },
  {
    "text": "built in a way where they actually expect a lot from the underlying",
    "start": "3020579",
    "end": "3027540"
  },
  {
    "text": "Hardware from down the line machine VM or whatever is it's running that workload okay and and what I mean by",
    "start": "3027540",
    "end": "3033480"
  },
  {
    "text": "that is they expect packages to be installed they expect files to be in",
    "start": "3033480",
    "end": "3038700"
  },
  {
    "text": "some path um and they're usually not immutable and what I mean by that is the VM and its",
    "start": "3038700",
    "end": "3046920"
  },
  {
    "text": "configuration is managed through change okay so whenever a new package needs to be installed it's",
    "start": "3046920",
    "end": "3053579"
  },
  {
    "text": "installed on top of the VM all right whenever a new version of the artifact that it represents your monolith is",
    "start": "3053579",
    "end": "3060180"
  },
  {
    "text": "built it's copied over and replaces the previous version on the VM that's",
    "start": "3060180",
    "end": "3065640"
  },
  {
    "text": "running it so this is called mutability right you're actually mutating the VM",
    "start": "3065640",
    "end": "3071480"
  },
  {
    "text": "container image are immutable okay once and there's a whole bunch of value to",
    "start": "3071760",
    "end": "3077520"
  },
  {
    "text": "immutability uh that I encourage you all to dig deeper into We're not gonna talk us the benefits of immutability but",
    "start": "3077520",
    "end": "3084119"
  },
  {
    "text": "container images are immutable and by being immutable that means that you're packaging everything that your",
    "start": "3084119",
    "end": "3091079"
  },
  {
    "text": "application needs to run on a single artifact which is a container image okay",
    "start": "3091079",
    "end": "3098640"
  },
  {
    "text": "now that means that there's gonna be some effort to go over when you're",
    "start": "3098640",
    "end": "3106079"
  },
  {
    "text": "looking to identify how to build the docker files which are basically the configuration files that Define how to",
    "start": "3106079",
    "end": "3113339"
  },
  {
    "text": "build your container image for anybody that's not familiar with that um",
    "start": "3113339",
    "end": "3118920"
  },
  {
    "text": "you build the image of your monolith okay you're gonna have to identify what",
    "start": "3118920",
    "end": "3124260"
  },
  {
    "text": "packages it relies on you're gonna need to identify what operating system it",
    "start": "3124260",
    "end": "3130020"
  },
  {
    "text": "expects to have on the VM that's currently running so that you can use it uh",
    "start": "3130020",
    "end": "3136200"
  },
  {
    "text": "um the similar container base image okay and there's some",
    "start": "3136200",
    "end": "3141359"
  },
  {
    "text": "uh ways for you to accelerate that process if there's already a configuration management well managing",
    "start": "3141359",
    "end": "3147480"
  },
  {
    "text": "these configuration is a ansible puppet or any one of those that Services have as a great Foundation as a great basis",
    "start": "3147480",
    "end": "3153420"
  },
  {
    "text": "for you to identify what to put in the docker file for the container image to be built so that it satisfies the",
    "start": "3153420",
    "end": "3160319"
  },
  {
    "text": "expectations of the monolith artifact binary that you're copying into that container image okay",
    "start": "3160319",
    "end": "3167099"
  },
  {
    "text": "now there's a there's a critical uh aspect here to consider and that is that",
    "start": "3167099",
    "end": "3172260"
  },
  {
    "text": "a lot of model is required to do things at the node level okay and",
    "start": "3172260",
    "end": "3178440"
  },
  {
    "text": "and I know that's ambiguous but this is where security contacts come",
    "start": "3178440",
    "end": "3184740"
  },
  {
    "text": "into place play a a container running within kubernetes is usually or should",
    "start": "3184740",
    "end": "3190619"
  },
  {
    "text": "like should be very much isolated from the underlying node right it should have",
    "start": "3190619",
    "end": "3196619"
  },
  {
    "text": "no rights to see perform or otherwise do anything at the node level that's not",
    "start": "3196619",
    "end": "3202859"
  },
  {
    "text": "always possible with monoliths okay so if you're going to run both monoliths as",
    "start": "3202859",
    "end": "3208020"
  },
  {
    "text": "well as microservices in a common infrastructure in the common kubernetes cluster it is important to have them",
    "start": "3208020",
    "end": "3213720"
  },
  {
    "text": "isolated ideally to individual nodes that are only running this type of workload this is also beneficial for",
    "start": "3213720",
    "end": "3220260"
  },
  {
    "text": "capacity right they you will need a different balance of capacity for your",
    "start": "3220260",
    "end": "3226260"
  },
  {
    "text": "microservices to your monoliths and you'll need different security constraints okay so running your",
    "start": "3226260",
    "end": "3232559"
  },
  {
    "text": "microservices and your model is in separate environment in separate groups of nodes it's super important",
    "start": "3232559",
    "end": "3238260"
  },
  {
    "text": "particularly when your model is or any one of your workloads require privileged",
    "start": "3238260",
    "end": "3243720"
  },
  {
    "text": "um security context okay there's Primitives in kubernetes that allow you to do that you can use stains you need",
    "start": "3243720",
    "end": "3250500"
  },
  {
    "text": "affinity and you can use security policies to both specify specifically in",
    "start": "3250500",
    "end": "3256619"
  },
  {
    "text": "which nodes your workload your monolith your containerized monolith can run as well as to",
    "start": "3256619",
    "end": "3262400"
  },
  {
    "text": "deny any sort of traffic that originates from those nodes or the namespace that's",
    "start": "3262400",
    "end": "3269640"
  },
  {
    "text": "running your monolith to any other node group or",
    "start": "3269640",
    "end": "3275099"
  },
  {
    "text": "um namespace where you're running non-privileged workloads okay",
    "start": "3275099",
    "end": "3280559"
  },
  {
    "text": "and we also talked about build size and build time okay",
    "start": "3280559",
    "end": "3285980"
  },
  {
    "text": "monoliths are usually much larger than microservices because of what they're",
    "start": "3285980",
    "end": "3291420"
  },
  {
    "text": "doing they're doing a whole bunch of more stuff than just one service which means the build time is usually",
    "start": "3291420",
    "end": "3296700"
  },
  {
    "text": "slower and the container images are usually going to be larger okay",
    "start": "3296700",
    "end": "3302760"
  },
  {
    "text": "this is going to have an impact in your storage okay container images are if",
    "start": "3302760",
    "end": "3309960"
  },
  {
    "text": "you're using proper practices when you're building those Docker files they're going to be building a way that is very efficient okay that it basically",
    "start": "3309960",
    "end": "3315839"
  },
  {
    "text": "it can reuse different layers that you've built in the past so that you",
    "start": "3315839",
    "end": "3322140"
  },
  {
    "text": "don't consume all that capacity when you're storing them okay the only store kind of every new version is just the",
    "start": "3322140",
    "end": "3329579"
  },
  {
    "text": "Delta the difference between the like any other previous layer that was used and what hasn't what's new okay",
    "start": "3329579",
    "end": "3337859"
  },
  {
    "text": "but as as uh you probably know it's every time a new container image is",
    "start": "3337859",
    "end": "3344160"
  },
  {
    "text": "downloaded on one of your notes it's stored in that node so since we're doing immutability which we weren't",
    "start": "3344160",
    "end": "3350579"
  },
  {
    "text": "before we have a large binary that changes all the time might not be",
    "start": "3350579",
    "end": "3356160"
  },
  {
    "text": "changing the underlying dependencies and if you're using Docker files right you built that in a way that those are cached and not reused all the time but",
    "start": "3356160",
    "end": "3363059"
  },
  {
    "text": "if you're binary the one that you're building for your model is pretty large",
    "start": "3363059",
    "end": "3368339"
  },
  {
    "text": "and you're doing multiple deployments each with a new version of the container",
    "start": "3368339",
    "end": "3375240"
  },
  {
    "text": "image for your for your release right for your application for your monolith that means that your node is going to",
    "start": "3375240",
    "end": "3383040"
  },
  {
    "text": "have multiple versions of your application at any given time and if they're large they couldn't consume a",
    "start": "3383040",
    "end": "3388680"
  },
  {
    "text": "lot of artists okay so you need to be mindful of understanding the size of your build",
    "start": "3388680",
    "end": "3394800"
  },
  {
    "text": "making sure that you're using proper Docker file practices to reduce it to the kind of smallest possible size and",
    "start": "3394800",
    "end": "3402119"
  },
  {
    "text": "then make sure that you have a printing mechanism in your nodes so you can get rid of old images that you're no longer",
    "start": "3402119",
    "end": "3408839"
  },
  {
    "text": "using okay now it's very important for your",
    "start": "3408839",
    "end": "3416520"
  },
  {
    "text": "initiative to get buy-in from your development",
    "start": "3416520",
    "end": "3422520"
  },
  {
    "text": "teams okay your development teams are motivated by fast delivery they're gonna",
    "start": "3422520",
    "end": "3428700"
  },
  {
    "text": "appreciate being able to run their monoliths locally easily they're gonna",
    "start": "3428700",
    "end": "3433859"
  },
  {
    "text": "appreciate uh how container images will enable this devops benefits right of of",
    "start": "3433859",
    "end": "3441480"
  },
  {
    "text": "you have the same code base and you run it anywhere and it's it operates in the same way right",
    "start": "3441480",
    "end": "3447300"
  },
  {
    "text": "um it's fully automated but you need to make sure that you are quantifying the build and release time",
    "start": "3447300",
    "end": "3453960"
  },
  {
    "text": "okay because if there's one thing that I know developers hate is to have to wait",
    "start": "3453960",
    "end": "3459240"
  },
  {
    "text": "for builds and deployments okay so the faster that you can actually get the cycle the better for you to gain",
    "start": "3459240",
    "end": "3465839"
  },
  {
    "text": "traction within your organization the better for you to actually um and and for any developer that is",
    "start": "3465839",
    "end": "3471000"
  },
  {
    "text": "listening um guarantee you're gonna approve this that I'm saying right the the better it",
    "start": "3471000",
    "end": "3477119"
  },
  {
    "text": "is for the developers that are now using uh this new platform to deploy their workloads to buy in",
    "start": "3477119",
    "end": "3484140"
  },
  {
    "text": "so make sure that you are deploying as quickly as you can that your build",
    "start": "3484140",
    "end": "3489720"
  },
  {
    "text": "pipeline happens as quickly as you can and we'll see how get Ops can help with that",
    "start": "3489720",
    "end": "3495420"
  },
  {
    "text": "and this basically gives us what a heterogeneous architecture will look",
    "start": "3495420",
    "end": "3500520"
  },
  {
    "text": "like right you have a common API you're using ingresses and services to",
    "start": "3500520",
    "end": "3506400"
  },
  {
    "text": "Route requests to different types of workloads those that are horizontally Auto scaling",
    "start": "3506400",
    "end": "3514079"
  },
  {
    "text": "that our microservices that are running in their own namespace and those that are vertically Auto scaling and using",
    "start": "3514079",
    "end": "3519480"
  },
  {
    "text": "staple sets and other capabilities to scale which are your container rights",
    "start": "3519480",
    "end": "3525660"
  },
  {
    "text": "monoliths and all those are running on different nodes and there's policy between them so what does this look",
    "start": "3525660",
    "end": "3532319"
  },
  {
    "text": "there right first of all we have kubernetes which is the single API that",
    "start": "3532319",
    "end": "3537960"
  },
  {
    "text": "you're going to use to operate your heterogeneous architecture no matter what it is that you're running you're going to create individual node",
    "start": "3537960",
    "end": "3544500"
  },
  {
    "text": "groups for your different Services you're going to have a specific set of nodes with specific capacity for your",
    "start": "3544500",
    "end": "3552500"
  },
  {
    "text": "containerized monolith which is gonna scale vertically okay",
    "start": "3552500",
    "end": "3558599"
  },
  {
    "text": "you're gonna isolate your model is from your microservices because they might need different security contacts and",
    "start": "3558599",
    "end": "3564359"
  },
  {
    "text": "they have different requirements from your microservices using namespaces and",
    "start": "3564359",
    "end": "3570720"
  },
  {
    "text": "network policies okay which will disable any direct communication between these different workloads okay",
    "start": "3570720",
    "end": "3577740"
  },
  {
    "text": "and then lastly we're going to talk next as to how you can use ingresses and services",
    "start": "3577740",
    "end": "3582980"
  },
  {
    "text": "to send requests to the proper sort right to the perfect destination right",
    "start": "3582980",
    "end": "3588420"
  },
  {
    "text": "whether it is a microservice or whether it's a containerized monolith and how",
    "start": "3588420",
    "end": "3595140"
  },
  {
    "text": "you can use this pattern to start sending traffic to the right place as you strangle and as you build new",
    "start": "3595140",
    "end": "3601619"
  },
  {
    "text": "capabilities over time all right so Services Ingress is an incremental 12",
    "start": "3601619",
    "end": "3608160"
  },
  {
    "text": "factors the whole idea here is that the service basically abstracts",
    "start": "3608160",
    "end": "3615299"
  },
  {
    "text": "whatever is running behind it okay so it could be a containerized monolith it",
    "start": "3615299",
    "end": "3621000"
  },
  {
    "text": "could be a set of microservices but it doesn't matter because you're using a service in front and the service is",
    "start": "3621000",
    "end": "3627240"
  },
  {
    "text": "what's handling whether you're session Affinity or whatever it is that your monolith needs the service is what's",
    "start": "3627240",
    "end": "3633720"
  },
  {
    "text": "abstracting access to it and what any other service or any outside consumer through an Ingress will need to",
    "start": "3633720",
    "end": "3641220"
  },
  {
    "text": "no no now in this scenario right we have our containerized monolith that is",
    "start": "3641220",
    "end": "3647099"
  },
  {
    "text": "running three different sets of features or functionality it's activity users and configuration very basic idea okay",
    "start": "3647099",
    "end": "3653880"
  },
  {
    "text": "and because this is a monolith that is coming from a world where it was running in a VM",
    "start": "3653880",
    "end": "3659579"
  },
  {
    "text": "and uh it's mutable the configuration for that monolith is",
    "start": "3659579",
    "end": "3666059"
  },
  {
    "text": "actually a file in the file system so we're gonna use more kubernetes capabilities to",
    "start": "3666059",
    "end": "3671819"
  },
  {
    "text": "run this with very little change in this new containerized environment so we're",
    "start": "3671819",
    "end": "3677099"
  },
  {
    "text": "going to mount a config map which a config map is an object in kubernetes that holds basically content in this",
    "start": "3677099",
    "end": "3684480"
  },
  {
    "text": "case let's imagine a Json file and we're going to mount it in the file system okay so that's very",
    "start": "3684480",
    "end": "3692339"
  },
  {
    "text": "little change to the containerized modeler okay the service is using session Affinity uh the Pod is vertical",
    "start": "3692339",
    "end": "3699299"
  },
  {
    "text": "Auto scaling so state is managed the stickiness is managed and we didn't even",
    "start": "3699299",
    "end": "3705240"
  },
  {
    "text": "have to change how the monolith loaded its configuration because we're loading it from the file system using a config",
    "start": "3705240",
    "end": "3711240"
  },
  {
    "text": "map as it's the origin of that configuration now let's imagine we scratched the",
    "start": "3711240",
    "end": "3717480"
  },
  {
    "text": "user's capability because we now have a user's microservice okay so this is that",
    "start": "3717480",
    "end": "3723839"
  },
  {
    "text": "path right of strangling this application we had all these sets of capabilities in a single monolith we're",
    "start": "3723839",
    "end": "3729420"
  },
  {
    "text": "taking bounded context out of it and creating small services from them and",
    "start": "3729420",
    "end": "3734520"
  },
  {
    "text": "this new services are actually Cloud native and they are actually using following the 12 factors so how would",
    "start": "3734520",
    "end": "3741660"
  },
  {
    "text": "that look in the previous slide we saw one Ingress",
    "start": "3741660",
    "end": "3747260"
  },
  {
    "text": "sending all traffic to one service and then the model is just doing its thing okay",
    "start": "3747260",
    "end": "3752460"
  },
  {
    "text": "here we're saying now we're going to split something out users is no longer going to be in this monolith so we use",
    "start": "3752460",
    "end": "3759960"
  },
  {
    "text": "the Ingress for that we add on the rule that says anything that is slash users",
    "start": "3759960",
    "end": "3765180"
  },
  {
    "text": "is now going to hit the user's microservice which has different rules it's not using session affinity and the",
    "start": "3765180",
    "end": "3773099"
  },
  {
    "text": "same config map that we had mounted or that we have mounted as a file in the",
    "start": "3773099",
    "end": "3778680"
  },
  {
    "text": "file system of the containerized monolith is now injected in the environment of this new workload of this",
    "start": "3778680",
    "end": "3785220"
  },
  {
    "text": "new microservice and we can actually do horizontal scaling with it so",
    "start": "3785220",
    "end": "3790619"
  },
  {
    "text": "this is the pattern that we can use to over time start eliminating components",
    "start": "3790619",
    "end": "3796619"
  },
  {
    "text": "out of the containerized monolith and pushing them to other services and we",
    "start": "3796619",
    "end": "3802200"
  },
  {
    "text": "can actually share the same configuration and inject it differently into different types of services as we",
    "start": "3802200",
    "end": "3809640"
  },
  {
    "text": "proceed as we as we go through this process of modernization okay",
    "start": "3809640",
    "end": "3814920"
  },
  {
    "text": "and of course we need to talk about get UPS because really get UPS companies so let's talk about GitHub physical and",
    "start": "3814920",
    "end": "3820260"
  },
  {
    "text": "deployment pattern okay for us to accomplish this we need configuration and that's the beauty of",
    "start": "3820260",
    "end": "3826740"
  },
  {
    "text": "githubs okay the configuration of your monolith whether it's VMS whether it's a",
    "start": "3826740",
    "end": "3832859"
  },
  {
    "text": "containerized uh monolith with vertical part on a scalar and session stickiness",
    "start": "3832859",
    "end": "3838619"
  },
  {
    "text": "such an affinity or a microservice that is fully Cloud native no matter what the",
    "start": "3838619",
    "end": "3844559"
  },
  {
    "text": "type of workload it is the configuration itself is declarative and can be stored",
    "start": "3844559",
    "end": "3850319"
  },
  {
    "text": "as code okay get Ops is all about the site State stored s code and an immutable",
    "start": "3850319",
    "end": "3857540"
  },
  {
    "text": "repository and then the get Ops automation handling the continuous",
    "start": "3857540",
    "end": "3863579"
  },
  {
    "text": "deployment of it through reconciliation right basically by comparing the runtime",
    "start": "3863579",
    "end": "3869880"
  },
  {
    "text": "versus the desired State the actual State versus desired State and making sure that what you've declared in your",
    "start": "3869880",
    "end": "3877200"
  },
  {
    "text": "code is consistent with what is actually running in the cluster okay and this is now the common pattern that you're going",
    "start": "3877200",
    "end": "3884520"
  },
  {
    "text": "to use no matter what type of architecture you're having to support you're having to operate or the various",
    "start": "3884520",
    "end": "3891240"
  },
  {
    "text": "architectures that you have to operate and the objective here is for you to be",
    "start": "3891240",
    "end": "3897119"
  },
  {
    "text": "able to move fast without breaking things and I think that's one of the key risks to uh modernizing Legacy",
    "start": "3897119",
    "end": "3905339"
  },
  {
    "text": "application to straggling monoliths right there's a lot of fear of breaking stuff and it's high risk right looking",
    "start": "3905339",
    "end": "3912720"
  },
  {
    "text": "at Legacy code bases extracting the components of that into its own new uh",
    "start": "3912720",
    "end": "3918000"
  },
  {
    "text": "service it's non-trivial it takes a lot of effort and it takes a lot of planning and strategy right so we want to be able",
    "start": "3918000",
    "end": "3924299"
  },
  {
    "text": "to do that without breaking anything and by using declarative configuration we",
    "start": "3924299",
    "end": "3929460"
  },
  {
    "text": "can do very soon and they're using kubernetes and containers as a common platform for runtime makes it even",
    "start": "3929460",
    "end": "3935339"
  },
  {
    "text": "easier and with tools such as with gitups you can actually automate",
    "start": "3935339",
    "end": "3941700"
  },
  {
    "text": "where you feel comfortable you can have manual Gates by using pull requests and",
    "start": "3941700",
    "end": "3947040"
  },
  {
    "text": "stuff like that to basically provide a means for humans to interface in your",
    "start": "3947040",
    "end": "3952920"
  },
  {
    "text": "delivery process in your employment process and integrate with any number of",
    "start": "3952920",
    "end": "3958220"
  },
  {
    "text": "audits alerts and any other mechanism that you need to make sure that you understand and that your developers",
    "start": "3958220",
    "end": "3964440"
  },
  {
    "text": "understand what's going on okay so what are the takeaways",
    "start": "3964440",
    "end": "3970740"
  },
  {
    "text": "first model is in microservices can and will likely coexist for quite some time",
    "start": "3970740",
    "end": "3978960"
  },
  {
    "text": "but aside from that operating all those different architectures on top of a common platform which is kubernetes",
    "start": "3978960",
    "end": "3984780"
  },
  {
    "text": "really reduces complexity and it streams lines the path right it makes it easier for you to migrate and refactor over",
    "start": "3984780",
    "end": "3991140"
  },
  {
    "text": "time because of all the negative capabilities that it offers kubernetes is ideal for",
    "start": "3991140",
    "end": "3996480"
  },
  {
    "text": "this and the containers are not just for microservices you can actually use them for monoliths as well",
    "start": "3996480",
    "end": "4003859"
  },
  {
    "text": "and if you choose to use models to to run your model as ask containers in",
    "start": "4003859",
    "end": "4008960"
  },
  {
    "text": "kubernetes you need to be mindful of not isolation capacity Planning Network policies so",
    "start": "4008960",
    "end": "4015500"
  },
  {
    "text": "that when the running privileged workloads and less than ideal scaling mechanisms",
    "start": "4015500",
    "end": "4020960"
  },
  {
    "text": "they're basically running in a protected environment where they can't uh negatively impact other workloads that",
    "start": "4020960",
    "end": "4027260"
  },
  {
    "text": "are following different architectural patterns so thank you very much I hope this was insightful",
    "start": "4027260",
    "end": "4033619"
  },
  {
    "text": "um and uh please look us up you can go to weave.works and check out our different tools and look me up if you",
    "start": "4033619",
    "end": "4041299"
  },
  {
    "text": "have any questions or you want to talk about this thank you all I hope that was really useful it was",
    "start": "4041299",
    "end": "4048680"
  },
  {
    "text": "quite information packed and again we're here to help you both on your monolith",
    "start": "4048680",
    "end": "4053720"
  },
  {
    "text": "to microservices Journey as well as how kubernetes fits into that if you have any follow-up questions we have the",
    "start": "4053720",
    "end": "4060079"
  },
  {
    "text": "contact information here for Chris Leo and I'm Tamo nakahara if you have any",
    "start": "4060079",
    "end": "4065180"
  },
  {
    "text": "questions for me I'm happy to help and we'll leave you with one of our recent blogs that hopefully will be useful you",
    "start": "4065180",
    "end": "4070880"
  },
  {
    "text": "for you if you're getting started with kubernetes we've got some Core Concepts and components thanks for joining us and",
    "start": "4070880",
    "end": "4077000"
  },
  {
    "text": "please do reach out to us if you have questions thanks",
    "start": "4077000",
    "end": "4081760"
  }
]