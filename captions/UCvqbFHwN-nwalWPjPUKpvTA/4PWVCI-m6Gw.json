[
  {
    "text": "uh hi i'm richard belleville and i'm a software engineer at google on the grpc team",
    "start": "160",
    "end": "5680"
  },
  {
    "text": "i am awesome on most things github and twitter for example and today i'm going",
    "start": "5680",
    "end": "10719"
  },
  {
    "text": "to talk about a project i've been working on called grpc easy uh first a little bit about myself i",
    "start": "10719",
    "end": "17359"
  },
  {
    "text": "have been working for google for about a year and a half now uh primarily on the python bindings",
    "start": "17359",
    "end": "22880"
  },
  {
    "text": "before that i was working at a smallish networking company called adtran i'm glad that i spent time there first",
    "start": "22880",
    "end": "28240"
  },
  {
    "text": "because it gave me a ton of perspective the thing about small companies is that everyone tends to be less specialized",
    "start": "28240",
    "end": "33680"
  },
  {
    "text": "you have to be generalized in order to cover all of that ground that needs to be covered so in my time there i got to help build and",
    "start": "33680",
    "end": "39280"
  },
  {
    "text": "maintain a custom messaging framework as well as build our own container orchestration framework before kubernetes became the defacto standard",
    "start": "39280",
    "end": "46320"
  },
  {
    "text": "and then migrated to community kubernetes once we saw the writing on the wall since google is such a big company most",
    "start": "46320",
    "end": "52000"
  },
  {
    "text": "people are hyper focused which can sometimes lead to myopia so i'm glad i had my experience my previous",
    "start": "52000",
    "end": "57280"
  },
  {
    "text": "company as a member of the target demographic for grpc because i think that's enabled me to empathize with our users a little bit better than",
    "start": "57280",
    "end": "63199"
  },
  {
    "text": "i otherwise would have okay so enough about me let's talk about grpc although this talk is called grpc easy",
    "start": "63199",
    "end": "70000"
  },
  {
    "text": "this is not an introductory talk on grpc so i'm not going to be over going over all of the basics in detail if",
    "start": "70000",
    "end": "76000"
  },
  {
    "text": "that is what you're looking for there's another talk at kubecon that i believe should have aired yesterday called intro to grpc by abhishek kumar the tech",
    "start": "76000",
    "end": "84000"
  },
  {
    "text": "lead for grpc at google if you're not watching this live you should probably pause me and go watch that talk or one of the",
    "start": "84000",
    "end": "90880"
  },
  {
    "text": "other various intros talks now",
    "start": "90880",
    "end": "94798"
  },
  {
    "text": "uh for the benefit of those of you who are watching live let's do a very brief recap of the structure of an application",
    "start": "95920",
    "end": "102079"
  },
  {
    "text": "using grpc grpc is an rpc framework rpc standing for remote procedure call",
    "start": "102079",
    "end": "108240"
  },
  {
    "text": "when you boil away all the fat this means that we're a library and a set of development tools that enable you to define and call",
    "start": "108240",
    "end": "114640"
  },
  {
    "text": "a function so that it runs on a different machine from the caller though it could run on the same machine if you set things up that way",
    "start": "114640",
    "end": "122159"
  },
  {
    "text": "technically speaking grpc is a protocol not a library there are many implementations of that protocol they are they're the original",
    "start": "122159",
    "end": "129200"
  },
  {
    "text": "go c plus and java implementations donated by google.cncf and there are other community source",
    "start": "129200",
    "end": "134640"
  },
  {
    "text": "implementations like the one built into envoy but when i talk about grpc in this presentation you can safely assume that",
    "start": "134640",
    "end": "140400"
  },
  {
    "text": "i'm talking about the original implementations built by google since they're the oldest most robust and most popular",
    "start": "140400",
    "end": "148239"
  },
  {
    "text": "so a default grpc is a point-to-point client server model where the client and server can be in different languages",
    "start": "148720",
    "end": "153760"
  },
  {
    "text": "very much like http json rest the difference is in the payload and the different",
    "start": "153760",
    "end": "158959"
  },
  {
    "text": "concurrency models you can use so if you're going to call a function",
    "start": "158959",
    "end": "164400"
  },
  {
    "text": "both the caller and the colleague need to know the api and the abi the application binary",
    "start": "164400",
    "end": "169599"
  },
  {
    "text": "interface by default but not as a requirement grpc uses protocol buffers for that so",
    "start": "169599",
    "end": "175120"
  },
  {
    "text": "you can see an example of what a protocol buffer service definition looks like here it looks very similar to how you would define a function in say c",
    "start": "175120",
    "end": "182000"
  },
  {
    "text": "so that's what grpc is what about its users and how they feel about it well grbc has found very wide usage in",
    "start": "182000",
    "end": "188640"
  },
  {
    "text": "the data centers of big high traffic companies you can see some of them listed on our home page grpc.io you got",
    "start": "188640",
    "end": "194400"
  },
  {
    "text": "netflix cisco juniper square and a bunch more so what do we hear from these users",
    "start": "194400",
    "end": "201120"
  },
  {
    "text": "uh well we hear it's well supported you have a preferred language that's all we've got binding and tooling for it you wanna run windows we got you you",
    "start": "201519",
    "end": "208400"
  },
  {
    "text": "need to run an arm no problem uh we hear that it's performant at the transport level we introduce very little",
    "start": "208400",
    "end": "213680"
  },
  {
    "text": "overhead a lot of complex logic has been put in place to ensure maximal performance for multi-threaded applications",
    "start": "213680",
    "end": "219680"
  },
  {
    "text": "and protocol buffers being a binary serialization format cut down substantially on the amount of time you would otherwise be serializing and",
    "start": "219680",
    "end": "225360"
  },
  {
    "text": "deserializing json if you caught the same djson project on hacker news a while back that was a project that applied some lessons from a",
    "start": "225360",
    "end": "231200"
  },
  {
    "text": "protobuf white paper to the task of serializing and deserializing json but because json isn't natively a binary",
    "start": "231200",
    "end": "236959"
  },
  {
    "text": "format it's still not as fast we hear that it's robust when it's got a bug report for a server",
    "start": "236959",
    "end": "242400"
  },
  {
    "text": "that crashed after a year of serving we fixed the bug but learned that we were down to once a year sorts of bugs",
    "start": "242400",
    "end": "247760"
  },
  {
    "text": "in the stack and they say that it's safe the interface definition language provided by protobufs helps save you from shooting yourself in",
    "start": "247760",
    "end": "253680"
  },
  {
    "text": "the foot by sending an accidentally malformed request to the server it's like using a statically typed",
    "start": "253680",
    "end": "259440"
  },
  {
    "text": "language after being forced to use an untyped language forever but is it easy to use",
    "start": "259440",
    "end": "265600"
  },
  {
    "text": "i don't think i've ever gotten that sort of feedback before very often the task of migrating these",
    "start": "265600",
    "end": "270880"
  },
  {
    "text": "organizations to grpc lands on the shoulders of a platform team like an ipc team part of the reason for that",
    "start": "270880",
    "end": "277199"
  },
  {
    "text": "is that migrating from an existing messaging system can be tricky but part of it is likely that using grpc",
    "start": "277199",
    "end": "282320"
  },
  {
    "text": "itself isn't always that easy and we sometimes get positive confirmation on that from smaller",
    "start": "282320",
    "end": "287360"
  },
  {
    "text": "organizations and individuals struggling to roll out grpc",
    "start": "287360",
    "end": "292160"
  },
  {
    "text": "the grpc team regularly scours stack overflow and answers as many questions as we can this here is just a sampling",
    "start": "292400",
    "end": "298560"
  },
  {
    "text": "of python related issues that we've seen now it's unavoidable whatever your project is that",
    "start": "298560",
    "end": "303600"
  },
  {
    "text": "some users are going to have questions about it but if you want to be inclusive and popular your goal should be to",
    "start": "303600",
    "end": "309039"
  },
  {
    "text": "minimize the level of surprise and of cognitive burden for everyone as much as possible",
    "start": "309039",
    "end": "315120"
  },
  {
    "text": "when i first started on the grpc team i was somewhat uncomfortable with the api and workflow it worked with other tools",
    "start": "315120",
    "end": "320240"
  },
  {
    "text": "that were usually to use in the past and my gold standard was the python request library",
    "start": "320240",
    "end": "326639"
  },
  {
    "text": "uh i'm gonna wager the majority of people watching this talk of used requests even if python isn't their daily driver",
    "start": "328880",
    "end": "334000"
  },
  {
    "text": "why well one python is easy writing an integration test do it in python writing a supporting script do it in",
    "start": "334000",
    "end": "339919"
  },
  {
    "text": "python working to start up and need to move fast hey it worked for reddit do it in python",
    "start": "339919",
    "end": "344960"
  },
  {
    "text": "two the request library is easy you can sneeze and accidentally send some json to a different continent",
    "start": "344960",
    "end": "350080"
  },
  {
    "text": "personally i think this is one of the major reasons why http json rest has become so very very popular",
    "start": "350080",
    "end": "355840"
  },
  {
    "text": "ubiquitous user-friendly libraries so what you're looking at now is the gist that introduced the request library to",
    "start": "355840",
    "end": "361759"
  },
  {
    "text": "the world on the left is what making http get requests look like before the request library came out of the scene",
    "start": "361759",
    "end": "366960"
  },
  {
    "text": "and on the right is what making an http cat looks like after the request library was introduced import the library then do the call so",
    "start": "366960",
    "end": "374080"
  },
  {
    "text": "simple i always get a kick out of the first comment to this gist this ultimately was the goal of the grpc",
    "start": "374080",
    "end": "380080"
  },
  {
    "text": "python library lower the barrier to entry so that anyone no matter what size organization they're a part of can say screw it this",
    "start": "380080",
    "end": "386080"
  },
  {
    "text": "one off server is going to be a grpc server we can write it and the client in an hour so",
    "start": "386080",
    "end": "391840"
  },
  {
    "text": "one day i decided to point out my issues with the library to piece of paper this was eventually transport",
    "start": "391840",
    "end": "397280"
  },
  {
    "text": "transformed into a design dock but at the time i just called it a complaint doc there were a lot of little things but",
    "start": "397280",
    "end": "403360"
  },
  {
    "text": "there were really two main friction points that i saw",
    "start": "403360",
    "end": "409520"
  },
  {
    "text": "the first had to do with protocol buffers i like to lurk around github for people pulling in our library so i can see exactly how they use it",
    "start": "409520",
    "end": "416160"
  },
  {
    "text": "my first observation was that the vast majority of people are not advanced users of the api the second thing i noticed is that",
    "start": "416160",
    "end": "422000"
  },
  {
    "text": "people have absolutely no idea what to do with protocol buffer definition files so unlike rest grpc has a build time",
    "start": "422000",
    "end": "429199"
  },
  {
    "text": "step even if you're using an interpretive language like python or node you feed your dot proto file which contains your",
    "start": "429199",
    "end": "434400"
  },
  {
    "text": "service definition you know your function signature into the protocol compiler and",
    "start": "434400",
    "end": "439520"
  },
  {
    "text": "it spits out code in your language of choice that you can pull into your client and server code",
    "start": "439520",
    "end": "444639"
  },
  {
    "text": "now internal to google this is all abstracted away from the user there was a paper published in acm back",
    "start": "444639",
    "end": "450000"
  },
  {
    "text": "in 2016 that describes in detail what google source control build and test systems",
    "start": "450000",
    "end": "455280"
  },
  {
    "text": "look like called i believe why google stores billions of lines of code in a single repository",
    "start": "455280",
    "end": "461120"
  },
  {
    "text": "i encourage you to take a look at that afterwards but in short google doesn't scatter its code base across dozens or",
    "start": "461120",
    "end": "466240"
  },
  {
    "text": "hundreds of tiny git repos connected together by package managers like is fashionable in the open source community",
    "start": "466240",
    "end": "471280"
  },
  {
    "text": "stays instead google's code base is live at head every source file lives in a single code base",
    "start": "471280",
    "end": "477120"
  },
  {
    "text": "called google three and an internal build system called blaze tracks every source file and every intermediate target so that",
    "start": "477120",
    "end": "483199"
  },
  {
    "text": "the build system is completely hermetic you can add a print desk statement as deep in your dependency tree as you",
    "start": "483199",
    "end": "488319"
  },
  {
    "text": "want recompile and just immediately see the results the build system is general enough that they created a rule set that allows you",
    "start": "488319",
    "end": "494319"
  },
  {
    "text": "to say i have a dot proto file and i want a library in c plus plus or java and then you can just add a dependency on",
    "start": "494319",
    "end": "500400"
  },
  {
    "text": "that library as simply as if you were any uh as simple as if you were pulling in a library",
    "start": "500400",
    "end": "506720"
  },
  {
    "text": "in your target language i believe the use case of protocol buffer code gen was actually a driving factor for the crazy",
    "start": "506720",
    "end": "513200"
  },
  {
    "text": "generality of blaze which by the way has relatively recently been open sourced as battle",
    "start": "513200",
    "end": "518719"
  },
  {
    "text": "so developers in google don't have to worry about what they do with your generated code as far as they're concerned",
    "start": "518719",
    "end": "523839"
  },
  {
    "text": "the fact that the code is generated and isn't just a third-party library they're pulling in is an implementation detail but that's not",
    "start": "523839",
    "end": "530320"
  },
  {
    "text": "the case for open source users out in the open language agnostic build systems are exceedingly rare so",
    "start": "530320",
    "end": "536000"
  },
  {
    "text": "while they're integrations with maven and setup tools and various other language-specific build systems you still have to figure out how to",
    "start": "536000",
    "end": "542080"
  },
  {
    "text": "integrate with those specialized rules and then you have to be the one to worry about how you pull down the protocol buffer files from the central source and",
    "start": "542080",
    "end": "548160"
  },
  {
    "text": "what to do with the generated code so what do most people do the simplest thing they copy the dot",
    "start": "548160",
    "end": "553839"
  },
  {
    "text": "proto file so they have one copy of their client repo and then one copy on their server repo okay now these two have to stay in sync",
    "start": "553839",
    "end": "560800"
  },
  {
    "text": "every time you or anyone else makes an update to the service definition or to a message definition",
    "start": "560800",
    "end": "566000"
  },
  {
    "text": "they have to remember to update both fun uh that's called kinesins if you're looking for the exact software coupling",
    "start": "566000",
    "end": "571920"
  },
  {
    "text": "term okay so you've copied your.profile across multiple repos now you struggle with the protocol",
    "start": "571920",
    "end": "577760"
  },
  {
    "text": "compiler command line interface uh there are at least three flags that you're gonna have to deal with one that tells it where to put",
    "start": "577760",
    "end": "583440"
  },
  {
    "text": "the generated code for serializing and deserializing messages one that tells it where to put generated code for clients and servers",
    "start": "583440",
    "end": "590240"
  },
  {
    "text": "and one that tells it what directory your protocol buffers live in if you're doing a hello world service this is all in the tutorial on our",
    "start": "590240",
    "end": "595680"
  },
  {
    "text": "website but once you start pulling in multiple proto files or you have expectations about",
    "start": "595680",
    "end": "601120"
  },
  {
    "text": "what language specific module the code should be importable as in for a fun time so people maybe figure that stuff out if",
    "start": "601120",
    "end": "608000"
  },
  {
    "text": "not they probably hand modify the generated code i've seen that on github affair a few times now when you check and hand modify",
    "start": "608000",
    "end": "614720"
  },
  {
    "text": "generated code the next person that makes an update to the dot product file is in for a nasty surprise",
    "start": "614720",
    "end": "620079"
  },
  {
    "text": "not only do they have to figure out how to use the product protocol compiler they've got to figure out the hack the",
    "start": "620079",
    "end": "625200"
  },
  {
    "text": "previous person added on top of the generated code recipe for disaster so in practice the",
    "start": "625200",
    "end": "631120"
  },
  {
    "text": "people who are successful with protocol buffers tend to store all of their organizat organizations.proto files and a single",
    "start": "631120",
    "end": "636959"
  },
  {
    "text": "repo and then pull that repo into their client and server repos using git sub modules",
    "start": "636959",
    "end": "642399"
  },
  {
    "text": "then they integrate code generation into whatever build tool they're using so that developers don't ever have to deal with generated code directly so",
    "start": "642399",
    "end": "648640"
  },
  {
    "text": "that's the first pain point juggling produce the second big pain point is channel management now channels are sort of a",
    "start": "648640",
    "end": "655600"
  },
  {
    "text": "grpc specific concept generally speaking grpc is built on top of http 2",
    "start": "655600",
    "end": "660720"
  },
  {
    "text": "which is in turn built on top of tcp one of the improvements in the performance of grpc comes from the fact",
    "start": "660720",
    "end": "667040"
  },
  {
    "text": "that you don't spin up and tear down a tcp connection every single time you make a request",
    "start": "667040",
    "end": "672240"
  },
  {
    "text": "a channel represents one or more tcp connections across which our client balances its requests",
    "start": "672240",
    "end": "677279"
  },
  {
    "text": "based on load balancing configuration i actually heard a good joke about this sort of thing once um an http library walks into a bar and",
    "start": "677279",
    "end": "684800"
  },
  {
    "text": "orders a beer it takes the beer and walks out the bar one second later it walks back into the",
    "start": "684800",
    "end": "690720"
  },
  {
    "text": "bar and orders another beer takes it and walks out of the bar and so on and so forth often http libraries unnecessarily spin",
    "start": "690720",
    "end": "698480"
  },
  {
    "text": "up and tear down tcp connections some http one libraries have gotten the message on this and maintain their",
    "start": "698480",
    "end": "704240"
  },
  {
    "text": "connections between requests but it's not universal so grpc's current approach is to get the application",
    "start": "704240",
    "end": "710480"
  },
  {
    "text": "author to tell us when they're done ordering beers at which point they close their channel the tcp connection is shut down and",
    "start": "710480",
    "end": "716240"
  },
  {
    "text": "the memory used to manage the channel is returned to the system but in practice we don't see people",
    "start": "716240",
    "end": "721600"
  },
  {
    "text": "closing their channels ever in fact we often see servers that need to send downstream requests spin up",
    "start": "721600",
    "end": "726959"
  },
  {
    "text": "a new channel for each request they receive and they don't ever close those channels",
    "start": "726959",
    "end": "732720"
  },
  {
    "text": "memory link nasty surprise for them down the road and we've seen this sort of problem not just with open source users but with",
    "start": "732720",
    "end": "738560"
  },
  {
    "text": "users internally google uh we introduced a context manager based api to combat it but that just didn't seem to be enough even if you do",
    "start": "738560",
    "end": "745200"
  },
  {
    "text": "use the contacts manager version it adds an extra level of indent and it isn't very pretty to look at so with those problems in mind i try to",
    "start": "745200",
    "end": "751760"
  },
  {
    "text": "create a before and after picture for grpc python just like requests did",
    "start": "751760",
    "end": "759519"
  },
  {
    "text": "uh so here's that before and after picture uh on the left you see the before we import the grpc",
    "start": "759519",
    "end": "766399"
  },
  {
    "text": "library and then import our two generated files then in the main function we first construct a stub we never wrote the",
    "start": "766399",
    "end": "772959"
  },
  {
    "text": "symbol greater stub into our dot proto file but we have to use it nonetheless uh honestly i usually have to look in",
    "start": "772959",
    "end": "778800"
  },
  {
    "text": "the generated code to remember what that name should be then we construct a protobuf request payload make an rpc against the local",
    "start": "778800",
    "end": "784880"
  },
  {
    "text": "host using the stub and request a message and finally we print out the response",
    "start": "784880",
    "end": "790720"
  },
  {
    "text": "not a great delivery on the idea of a function call but on another machine",
    "start": "790720",
    "end": "796240"
  },
  {
    "text": "so you see we're using a contact manager here to manage the lifetime of our channel i know from my github lurking the usage",
    "start": "796240",
    "end": "801680"
  },
  {
    "text": "of this form isn't very common uh people generally just create their channel and don't close it fire and forget",
    "start": "801680",
    "end": "807519"
  },
  {
    "text": "and of course we have to generate our code using good old product for python we provide the pip installable",
    "start": "807519",
    "end": "812639"
  },
  {
    "text": "grpcio tools package that bundles protoc and the grpc python plug-in on the right you can see our attempt at",
    "start": "812639",
    "end": "818639"
  },
  {
    "text": "getting closer to the ease of use of requests we still import grpc the same way but now instead of generating code as a",
    "start": "818639",
    "end": "825040"
  },
  {
    "text": "build time step you can import serialization deserialization sub and service or code from a dot proto file at run time",
    "start": "825040",
    "end": "832240"
  },
  {
    "text": "instead of remembering that there's an underscore pb2 or underscore pb2 grpc suffix you just",
    "start": "832240",
    "end": "837519"
  },
  {
    "text": "import the dot protofile that you've written and chose the name of and is checked into source control the object you get back",
    "start": "837519",
    "end": "843440"
  },
  {
    "text": "is a python module object but you can name it whatever you like in general i like to call them protos and services",
    "start": "843440",
    "end": "849839"
  },
  {
    "text": "so we create a request message and then in a single line we send our message and receive the response function you",
    "start": "849839",
    "end": "855760"
  },
  {
    "text": "invoke is greeter dot say hello which is exactly what we wrote in our dot proto file no need to remember arbitrary",
    "start": "855760",
    "end": "861360"
  },
  {
    "text": "suffixes or to look them up from the generated code you may have accidentally checked in",
    "start": "861360",
    "end": "867360"
  },
  {
    "text": "okay so let's look at things a little bit more depth first there's the runtime.proto file",
    "start": "868839",
    "end": "874320"
  },
  {
    "text": "parsing uh what these new functions do is integrate with the python import live",
    "start": "874320",
    "end": "879360"
  },
  {
    "text": "import lib module to instantiate modules directly from a dot proto file in your python path",
    "start": "879360",
    "end": "884399"
  },
  {
    "text": "this depends on the presence of the grp cio tools package that you've traditionally used at build time",
    "start": "884399",
    "end": "889519"
  },
  {
    "text": "that bundles the c extension that does the actual parsing and code chat for protobots what's",
    "start": "889519",
    "end": "895440"
  },
  {
    "text": "really nice about this is that it lowers the barrier to entry for prototyping",
    "start": "895440",
    "end": "900480"
  },
  {
    "text": "change some fields around your dot proto file no need to recompile just restart your client or server it was",
    "start": "900480",
    "end": "905760"
  },
  {
    "text": "also really important to us that you'd be able to mix together generated code with code loaded directly from a dot proto file at runtime so",
    "start": "905760",
    "end": "911360"
  },
  {
    "text": "your runtime parse files can import from dot profiles that have already had code generated for them and vice versa that way if you prefer",
    "start": "911360",
    "end": "918079"
  },
  {
    "text": "you can use runtime parsing while developing and pre-generate the code when you're ready to put it into production",
    "start": "918079",
    "end": "924079"
  },
  {
    "text": "alternatively if you're distributing your application as a wheel you can now just include your dot protofile in",
    "start": "924079",
    "end": "929199"
  },
  {
    "text": "the wheel instead of generating python code from it and including that",
    "start": "929199",
    "end": "934639"
  },
  {
    "text": "the other big change that we've made is channel pooling now instead of manually creating a channel then creating a stub",
    "start": "935680",
    "end": "941040"
  },
  {
    "text": "from that channel you can do something that really does just look like calling a function of course this is",
    "start": "941040",
    "end": "946480"
  },
  {
    "text": "backed by the same sort of channel that you would have used before it's just lazily instantiated and kept in a",
    "start": "946480",
    "end": "951920"
  },
  {
    "text": "process global cache um after a configurable period of time without any use channels will be evicted from the cache",
    "start": "951920",
    "end": "957680"
  },
  {
    "text": "without any intervention from the author of the application this will work for all four rarities not just unary as is pictured here",
    "start": "957680",
    "end": "964639"
  },
  {
    "text": "and uh all those areas work exactly as you'd expect the new api will exist alongside the",
    "start": "964639",
    "end": "971120"
  },
  {
    "text": "current apis where you manually manage your channels and you're free to continue to use those whenever you do feel that you need to",
    "start": "971120",
    "end": "977600"
  },
  {
    "text": "manually manage those channels okay so now let's run through a slightly",
    "start": "977600",
    "end": "984639"
  },
  {
    "text": "more complicated example to see what these new apis really look like in action uh pretty much every time i give a talk",
    "start": "984639",
    "end": "990800"
  },
  {
    "text": "on grpc i build out the same example a key value store because it's about the simplest non-trivial thing you can build",
    "start": "990800",
    "end": "996639"
  },
  {
    "text": "using grpc if you want to see a full in-depth build out of this example you can just look my name",
    "start": "996639",
    "end": "1001759"
  },
  {
    "text": "on youtube um there's one in go and another in python i'm going to be building up on the python example and i'm only going to be",
    "start": "1001759",
    "end": "1007920"
  },
  {
    "text": "showing off the client here since the improvements we just talked about over the past couple of slides are really only on the client side uh if you",
    "start": "1007920",
    "end": "1015360"
  },
  {
    "text": "like you can actually pull down the go version of the server from the previous talk and test it out against the client code",
    "start": "1015360",
    "end": "1020399"
  },
  {
    "text": "from today's talk uh likewise the client code will be available on my github",
    "start": "1020399",
    "end": "1025678"
  },
  {
    "text": "so the key value store we're building is really just a network accessible version of this data structure in python uh you can",
    "start": "1025679",
    "end": "1032720"
  },
  {
    "text": "store a value under a particular key you can get a value under a particular key and you can check whether a",
    "start": "1032720",
    "end": "1038240"
  },
  {
    "text": "particular key exists within the store it's nothing very fancy",
    "start": "1038240",
    "end": "1043520"
  },
  {
    "text": "okay so this is what our protocol buffer definition looks like we've got a record consisting of two",
    "start": "1043760",
    "end": "1049200"
  },
  {
    "text": "strings a key and a value we've got three different kinds of requests to follow best practices for protobuf based apis",
    "start": "1049200",
    "end": "1055840"
  },
  {
    "text": "and then we've got our three methods get record create record and update record so what does the",
    "start": "1055840",
    "end": "1062000"
  },
  {
    "text": "client code for this look like well short as um you'd expect the",
    "start": "1062000",
    "end": "1068960"
  },
  {
    "text": "original version of this client uh that used the existing apis was several hundred lines split out over",
    "start": "1068960",
    "end": "1074320"
  },
  {
    "text": "multiple files uh this new client is about 150 lines in total and most of it is actually arg parse",
    "start": "1074320",
    "end": "1080480"
  },
  {
    "text": "most of the implementations are a single line to invoke the rpc and then a single line to print the results you",
    "start": "1080480",
    "end": "1086240"
  },
  {
    "text": "can see one new argument here which is insecure equals true this was actually a point of debate when designing these",
    "start": "1086240",
    "end": "1092000"
  },
  {
    "text": "apis we wanted to make things as easy as possible but in 2020 you really don't want to make anything insecure by default so",
    "start": "1092000",
    "end": "1099360"
  },
  {
    "text": "the default is actually tls encryption and if you want to do a plain text connection for unit testing for example then you have",
    "start": "1099360",
    "end": "1105360"
  },
  {
    "text": "to opt in with this explicit keyword argument so that's basically the set of new apis",
    "start": "1105360",
    "end": "1111600"
  },
  {
    "text": "but while we're on the topic of making grpc easy there's already a lot of great stuff in the grpc ecosystem that i just",
    "start": "1111600",
    "end": "1117520"
  },
  {
    "text": "don't feel is as well known as it should be uh so let's start with grp curl uh to",
    "start": "1117520",
    "end": "1124559"
  },
  {
    "text": "quit its readme from github it is a command line tool for grpc servers it's basically curl for grpc servers",
    "start": "1124559",
    "end": "1131600"
  },
  {
    "text": "i think that says about 80 of it the really cool thing about this is that if you don't necessarily is",
    "start": "1131600",
    "end": "1137760"
  },
  {
    "text": "that you don't necessarily need to write the sort of client that we just spent the last few slides looking at uh for simple use cases you",
    "start": "1137760",
    "end": "1143679"
  },
  {
    "text": "can just write a shell script that uses jrp curl uh gp curl was written by joshua humphreys who's a developer at full",
    "start": "1143679",
    "end": "1149360"
  },
  {
    "text": "story he gave a presentation on the tool at gophercon 2018 so take a look at that if you want more",
    "start": "1149360",
    "end": "1155200"
  },
  {
    "text": "details on it so here's an example usage of grp curl to interact with the key value store we",
    "start": "1155200",
    "end": "1160559"
  },
  {
    "text": "just talked about there's a plain plain text flag here because again insecure by default bad",
    "start": "1160559",
    "end": "1166240"
  },
  {
    "text": "uh there's the payload which is defined in json here there's the server target and there's the fully qualified method",
    "start": "1166240",
    "end": "1172080"
  },
  {
    "text": "that we want to invoke boom out comes a record but there's a catch uh we supplied json",
    "start": "1172080",
    "end": "1178400"
  },
  {
    "text": "how did grp curl know how to serialize that to the binary form it doesn't have access to the protocol",
    "start": "1178400",
    "end": "1183520"
  },
  {
    "text": "buffer definitions we didn't tell it where they were well the secret actually lies on the server server i ran this against",
    "start": "1183520",
    "end": "1189120"
  },
  {
    "text": "exported reflection server what does that mean there's a grpc service definition that allows a server",
    "start": "1189120",
    "end": "1195840"
  },
  {
    "text": "to tell interested clients exactly what methods it has and what the in messages and out",
    "start": "1195840",
    "end": "1201200"
  },
  {
    "text": "messages look like so when we ran grp curl here what happened was the grp curl process first",
    "start": "1201200",
    "end": "1206720"
  },
  {
    "text": "read a query against the reflection server at the target we specified it used the information it learned to serialize our",
    "start": "1206720",
    "end": "1212720"
  },
  {
    "text": "json into a protobuf serialized format the catch is that you have to choose to export a reflection server on your",
    "start": "1212720",
    "end": "1218720"
  },
  {
    "text": "target it's really easy in all languages just a couple of lines of code but it's an opt-in process and there are certain instances in which",
    "start": "1218720",
    "end": "1225120"
  },
  {
    "text": "you may not want to for security reasons for example but reflection is actually even cooler",
    "start": "1225120",
    "end": "1230400"
  },
  {
    "text": "than this what it really gives you more than anything else is discoverability without looking at documentation you can",
    "start": "1230400",
    "end": "1235679"
  },
  {
    "text": "ask grp curl to tell you the exact schema that any given server expects the verbs that you want to use for this",
    "start": "1235679",
    "end": "1241280"
  },
  {
    "text": "are list and describe they allow you to explore an api of course you also could",
    "start": "1241280",
    "end": "1247120"
  },
  {
    "text": "have just supplied grp curl with the path of the produce on your file system and then it wouldn't have needed to query the reflection server",
    "start": "1247120",
    "end": "1254880"
  },
  {
    "text": "so that is as far as tips and tricks for making grpc easy goes but i'd like you to know that we're",
    "start": "1255120",
    "end": "1261200"
  },
  {
    "text": "absolutely receptive to contributions and suggestions to do with usability so if you have an idea or even just a",
    "start": "1261200",
    "end": "1267039"
  },
  {
    "text": "complaint please provide us with more feedback uh one of the hardest things about maintaining an open source project is",
    "start": "1267039",
    "end": "1272080"
  },
  {
    "text": "that more often than not when something is broken or difficult to use we never hear from that user they just drop the",
    "start": "1272080",
    "end": "1277919"
  },
  {
    "text": "library so we definitely do value the feedback when we hear from our existing or potential users",
    "start": "1277919",
    "end": "1282960"
  },
  {
    "text": "the two places that you would want to give that feedback are one of the several github repos that has their implementation",
    "start": "1282960",
    "end": "1288640"
  },
  {
    "text": "or the grpc-io google group which is where we sort of conduct official business like api",
    "start": "1288640",
    "end": "1293840"
  },
  {
    "text": "extension proposals or just answer questions and um the apis that you saw here today should be available",
    "start": "1293840",
    "end": "1300080"
  },
  {
    "text": "in the next release of grpc uh if you want to try them out before then you can just pull from our nightly builds so with that",
    "start": "1300080",
    "end": "1305760"
  },
  {
    "text": "i think we can move on to questions",
    "start": "1305760",
    "end": "1309280"
  },
  {
    "text": "hello everybody uh glad to see you all live now uh i think we're gonna go ahead and get",
    "start": "1313760",
    "end": "1319360"
  },
  {
    "text": "started with questions uh so please forgive uh me if i mispronounce any of",
    "start": "1319360",
    "end": "1325200"
  },
  {
    "text": "your names i'm sorry about that uh first one i see is from deepak any provision to generate",
    "start": "1325200",
    "end": "1330880"
  },
  {
    "text": "uml model from proto it's possible that such a tool exists within the community ecosystem",
    "start": "1330880",
    "end": "1337919"
  },
  {
    "text": "i haven't seen one if you did want to build one i don't think it would actually be very difficult the protocol compiler has",
    "start": "1337919",
    "end": "1345440"
  },
  {
    "text": "a system of plugins that uh can just be binaries on the file system there's an",
    "start": "1345440",
    "end": "1351120"
  },
  {
    "text": "environment variable that allows you to tell the protocol compiler where to look for those uh and it's a very simple format",
    "start": "1351120",
    "end": "1357200"
  },
  {
    "text": "where it takes a serialized protocol buffer message on standard n and it outputs code on standard out",
    "start": "1357200",
    "end": "1364559"
  },
  {
    "text": "um and so you could for example take in uh an arbitrary protocol buffer",
    "start": "1364559",
    "end": "1370640"
  },
  {
    "text": "and output a uml file in any format that you'd like um",
    "start": "1370640",
    "end": "1379279"
  },
  {
    "text": "so chandra asks when would you use grpc rather than when you when would you not",
    "start": "1379520",
    "end": "1384720"
  },
  {
    "text": "use grpc um so let's start with reasons",
    "start": "1384720",
    "end": "1389919"
  },
  {
    "text": "why you might not want to use grpc in any particular circumstance um so let's say that you know you're in",
    "start": "1389919",
    "end": "1396720"
  },
  {
    "text": "a setup where uh you don't necessarily have full support for http http 2",
    "start": "1396720",
    "end": "1402640"
  },
  {
    "text": "on your data path right there might be some l7 proxies that aren't going to support",
    "start": "1402640",
    "end": "1408400"
  },
  {
    "text": "it fully there might be some network elements that aren't going to support everything you",
    "start": "1408400",
    "end": "1415600"
  },
  {
    "text": "might be running in a browser that doesn't support trailers which is most of them at the moment i will say for",
    "start": "1415600",
    "end": "1420799"
  },
  {
    "text": "a caveat there is grpc web which allows you to get most but not all of the functionality of",
    "start": "1420799",
    "end": "1426159"
  },
  {
    "text": "grpc and requires a proxy in the middle so those are circumstances where you might choose not to use grpc",
    "start": "1426159",
    "end": "1432720"
  },
  {
    "text": "i did give you a bunch of pros at the beginning of uh this talk of grpc um like type safety",
    "start": "1432720",
    "end": "1439679"
  },
  {
    "text": "for example um the the other big area where you're going to want to use grpc",
    "start": "1439679",
    "end": "1444720"
  },
  {
    "text": "is where you need streaming or you're you have very um you have a lot of sensitivity to",
    "start": "1444720",
    "end": "1450799"
  },
  {
    "text": "latency right so in an event-driven model you don't want the clients to be polling",
    "start": "1450799",
    "end": "1455840"
  },
  {
    "text": "because polls always have a cooldown between each poll what you want is for the server that",
    "start": "1455840",
    "end": "1462480"
  },
  {
    "text": "sources the events to push them to the client that's when grpc streaming is going to be incredibly valuable to you",
    "start": "1462480",
    "end": "1469440"
  },
  {
    "text": "on the next one deepak asks does protobuf support inheritance and composition",
    "start": "1469440",
    "end": "1474799"
  },
  {
    "text": "that's a really good question so composition very basic feature of protobufs you can",
    "start": "1474799",
    "end": "1481279"
  },
  {
    "text": "arbitrarily nest message types inside of each other um and that's going to allow you to do",
    "start": "1481279",
    "end": "1487520"
  },
  {
    "text": "composition as for inheritance there isn't inheritance as you know it from languages like java c plus but there",
    "start": "1487520",
    "end": "1495679"
  },
  {
    "text": "is a feature called extensions which allow a message to say that they are reserving uh certain field",
    "start": "1495679",
    "end": "1500880"
  },
  {
    "text": "numbers for a third party usage which means that an application that uses any particular message",
    "start": "1500880",
    "end": "1506559"
  },
  {
    "text": "is able to add their own fields defined by their file uh with within those",
    "start": "1506559",
    "end": "1512960"
  },
  {
    "text": "extensions um so that's that's some something akin to inheritance",
    "start": "1512960",
    "end": "1518080"
  },
  {
    "text": "chandra asks when there's a simple client server architecture would you still recommend grpc versus",
    "start": "1518080",
    "end": "1523440"
  },
  {
    "text": "normal rest absolutely um the other thing that i i will say there is people sort of build",
    "start": "1523440",
    "end": "1530080"
  },
  {
    "text": "this false dichotomy between grpc and rest um rest",
    "start": "1530080",
    "end": "1535520"
  },
  {
    "text": "technically is um a set of semantics for how you build your apis and you can",
    "start": "1535520",
    "end": "1541360"
  },
  {
    "text": "build a restful grpc service it just means that you need your",
    "start": "1541360",
    "end": "1546400"
  },
  {
    "text": "rpcs to be resource oriented um i think maybe what you're asking here is",
    "start": "1546400",
    "end": "1552240"
  },
  {
    "text": "about um http json rest which is sort of people will light it to rest these days",
    "start": "1552240",
    "end": "1559279"
  },
  {
    "text": "but in general i would say yeah you can use grpc in any place where you use rasp plus other areas",
    "start": "1559279",
    "end": "1566080"
  },
  {
    "text": "christian asks what about using golang for grpc proto is there also a way to directly make use",
    "start": "1566080",
    "end": "1571440"
  },
  {
    "text": "of the dot protofiles if yes how is code completion handled than an ides if no what do you recommend here",
    "start": "1571440",
    "end": "1577279"
  },
  {
    "text": "check and generated code okay so i think you've keyed into something crucial which is",
    "start": "1577279",
    "end": "1583440"
  },
  {
    "text": "um for comp for compiled languages this scheme where we load from dot",
    "start": "1583440",
    "end": "1589679"
  },
  {
    "text": "protofiles at runtime does not work the same way the reason that it works in",
    "start": "1589679",
    "end": "1595039"
  },
  {
    "text": "python and node and could potentially work in php and ruby is because when you uh",
    "start": "1595039",
    "end": "1602320"
  },
  {
    "text": "say fu.bar you know you access a bar member of a variable foo in those",
    "start": "1602320",
    "end": "1608400"
  },
  {
    "text": "languages you're literally doing a dictionary look up right you're looking up that symbol",
    "start": "1608400",
    "end": "1613840"
  },
  {
    "text": "bar at run time that's not what's happening in the compiled languages in the compiled languages",
    "start": "1613840",
    "end": "1619200"
  },
  {
    "text": "they see a compile time that i'm looking for this member bar and then it translates it to sort of an",
    "start": "1619200",
    "end": "1624799"
  },
  {
    "text": "offset or some other mechanical lookup from the",
    "start": "1624799",
    "end": "1630000"
  },
  {
    "text": "the serialized protocol buffer message so you need those protocol buffer header files or go",
    "start": "1630000",
    "end": "1636559"
  },
  {
    "text": "files at compile time you could in principle do something similar",
    "start": "1636559",
    "end": "1641919"
  },
  {
    "text": "but the way that you would access the protos individual members of a protocol buffer",
    "start": "1641919",
    "end": "1647360"
  },
  {
    "text": "message would be very different and not quite as idiomatic so that's the first part of the question you couldn't principal do it",
    "start": "1647360",
    "end": "1653200"
  },
  {
    "text": "i wouldn't recommend it the other question was if no what do you recommend here check in",
    "start": "1653200",
    "end": "1658240"
  },
  {
    "text": "generated code i would still say try your very best not to check in generated code there are a couple things",
    "start": "1658240",
    "end": "1664000"
  },
  {
    "text": "you can do here the first one is going to be um i mentioned that internally to google",
    "start": "1664000",
    "end": "1670159"
  },
  {
    "text": "uh a build system called blaze is used that's been open sourced as a system called basil",
    "start": "1670159",
    "end": "1675600"
  },
  {
    "text": "um i actually think that uh the go tool chain was inspired by a lot of the the um features",
    "start": "1675600",
    "end": "1682399"
  },
  {
    "text": "in blaze uh you could just use basil i've seen a lot of uh goling projects using basil if you don't",
    "start": "1682399",
    "end": "1689760"
  },
  {
    "text": "want to use that if you want to use the vanilla golang tool chain uh there is a go generate",
    "start": "1689760",
    "end": "1694799"
  },
  {
    "text": "command that might meet your needs uh in general i think best practice is to include your",
    "start": "1694799",
    "end": "1700480"
  },
  {
    "text": "generated files in your git ignore file if you're using git",
    "start": "1700480",
    "end": "1706240"
  },
  {
    "text": "uh bart bart smith asks is using the protofiles from runtime also available",
    "start": "1706559",
    "end": "1711600"
  },
  {
    "text": "in java no not to my knowledge but with the same caveat as in the previous answer",
    "start": "1711600",
    "end": "1717279"
  },
  {
    "text": "that you could in principle use reflection apis to read from a dot proto file at runtime",
    "start": "1717279",
    "end": "1722799"
  },
  {
    "text": "but again since it compile time you don't have access to the the symbols that you would need to",
    "start": "1722799",
    "end": "1728720"
  },
  {
    "text": "access things it wouldn't look like idiomatic java in order to access an individual member",
    "start": "1728720",
    "end": "1734799"
  },
  {
    "text": "bar of a message foo uh namit asks although it is making it a",
    "start": "1734799",
    "end": "1740640"
  },
  {
    "text": "lot easier for the client but still the client needs to understand that it's working with the grpc server is there a way that we can",
    "start": "1740640",
    "end": "1747279"
  },
  {
    "text": "completely abstract this",
    "start": "1747279",
    "end": "1752480"
  },
  {
    "text": "not sure i fully understand the question um okay so yes uh if we're talking about",
    "start": "1752480",
    "end": "1758240"
  },
  {
    "text": "differences between um uh a client and uh between an actual local function call and um",
    "start": "1758240",
    "end": "1767200"
  },
  {
    "text": "one against a grpc server there is an addition to the arguments there's also the target",
    "start": "1767200",
    "end": "1773840"
  },
  {
    "text": "server the location of the target server uh and there are things like transport",
    "start": "1773840",
    "end": "1779279"
  },
  {
    "text": "level security um so one thing that i already called out the transport level security",
    "start": "1779279",
    "end": "1785200"
  },
  {
    "text": "you could make that uh you could include ssl credentials and by default uh it",
    "start": "1785200",
    "end": "1791279"
  },
  {
    "text": "will use ssl credentials if you don't supply anything there the other thing is the server target",
    "start": "1791279",
    "end": "1797760"
  },
  {
    "text": "right so how can you abstract that away there it's not exactly",
    "start": "1797760",
    "end": "1803679"
  },
  {
    "text": "um completely extracted away but there is a lot of work going into the",
    "start": "1803679",
    "end": "1808960"
  },
  {
    "text": "set of xds protocols which mean that you can abstract away the address of a particular server that",
    "start": "1808960",
    "end": "1814799"
  },
  {
    "text": "you're going to and you can use a control plane like istio or traffic director on gcp that allow",
    "start": "1814799",
    "end": "1822320"
  },
  {
    "text": "you to abstract out to an abstract service name that doesn't correspond to a particular",
    "start": "1822320",
    "end": "1828159"
  },
  {
    "text": "server's ip or host name um and those can change dynamically",
    "start": "1828159",
    "end": "1834000"
  },
  {
    "text": "that would help to abstract that away a little bit i don't know if that fully answers your question though uh alex asks any plans to add more",
    "start": "1834000",
    "end": "1841039"
  },
  {
    "text": "officially supported languages in the future um so i'm i'm i'm wondering if this is about grpc in",
    "start": "1841039",
    "end": "1846880"
  },
  {
    "text": "general or if this is about um the features that i discussed here today i'm assuming that this is about general",
    "start": "1846880",
    "end": "1854080"
  },
  {
    "text": "language support um no i do not know of uh plans for",
    "start": "1854080",
    "end": "1859120"
  },
  {
    "text": "additional languages but um they're popping up in the community all the time uh for example",
    "start": "1859120",
    "end": "1866080"
  },
  {
    "text": "kotlin support recently came around i know of multiple uh rust implementations that have been",
    "start": "1866080",
    "end": "1871679"
  },
  {
    "text": "coming around if you keep your eyes peeled you will see lots of other languages coming around um and if you have any",
    "start": "1871679",
    "end": "1877600"
  },
  {
    "text": "language that you care about in particular it's not too difficult to wrap the grpc core",
    "start": "1877600",
    "end": "1885120"
  },
  {
    "text": "which is um which is it used to be a plain c89 set of apis",
    "start": "1885120",
    "end": "1892799"
  },
  {
    "text": "that you can wrap a higher level api around now it's um c plus but there it is a",
    "start": "1892799",
    "end": "1898000"
  },
  {
    "text": "relatively stable set of api so you could in principle build a new language around that relatively easily",
    "start": "1898000",
    "end": "1905120"
  },
  {
    "text": "um and those are all the questions i see right now um so",
    "start": "1905120",
    "end": "1912320"
  },
  {
    "text": "i am going to head over to the slack and i'll be available there for at least the",
    "start": "1912320",
    "end": "1917679"
  },
  {
    "text": "next 15 minutes thank you everybody for attending today and i think that'll be it for the talk",
    "start": "1917679",
    "end": "1924720"
  },
  {
    "text": "thank you",
    "start": "1924720",
    "end": "1928158"
  }
]