[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "hi everyone and welcome to kubernetes secrets and get ops workflows i'm seth and i'll be joined by my",
    "start": "80",
    "end": "6080"
  },
  {
    "text": "colleague alex shortly this isn't the first time that alex and",
    "start": "6080",
    "end": "11840"
  },
  {
    "text": "i have given a talk together but before we dive in i want to take a step back and talk about the problem",
    "start": "11840",
    "end": "18240"
  },
  {
    "start": "15000",
    "end": "149000"
  },
  {
    "text": "we have a problem and that problem is best summarized in three simple words",
    "start": "18240",
    "end": "27279"
  },
  {
    "text": "coupe cuddle create secret that's right alex and i are talking about kubernetes",
    "start": "27279",
    "end": "32398"
  },
  {
    "text": "secrets again but this time we're not talking about their security properties",
    "start": "32399",
    "end": "37440"
  },
  {
    "text": "but rather focusing on the secrets management workflow specifically how do you get your secrets",
    "start": "37440",
    "end": "43040"
  },
  {
    "text": "in and out of kubernetes why is coop cuddle create secret such a",
    "start": "43040",
    "end": "49039"
  },
  {
    "text": "problem well it leaves a lot of questions unanswered without investment in other tooling and",
    "start": "49039",
    "end": "54879"
  },
  {
    "text": "technology like who created that secret when did they create it was the value",
    "start": "54879",
    "end": "60800"
  },
  {
    "text": "updated or is this a brand new secret why did they do it and who approved it",
    "start": "60800",
    "end": "66960"
  },
  {
    "text": "more so was the secret even tested which application version or versions is",
    "start": "66960",
    "end": "73280"
  },
  {
    "text": "it known to work with how do we roll back in the event of failure and ultimately what is the",
    "start": "73280",
    "end": "78479"
  },
  {
    "text": "source of truth for this secret and that's really what we want to zoom in on today",
    "start": "78479",
    "end": "84000"
  },
  {
    "text": "in this talk alex and i are going to attempt to answer all of those questions by focusing on just one what is the",
    "start": "84000",
    "end": "91280"
  },
  {
    "text": "source of truth for your kubernetes secrets now let's switch gears for a second",
    "start": "91280",
    "end": "97920"
  },
  {
    "text": "kubernetes get ops uses git repositories as the source of truth for your kubernetes cluster",
    "start": "97920",
    "end": "103759"
  },
  {
    "text": "configurations many of you may already be using githubs to manage your kubernetes workflows and",
    "start": "103759",
    "end": "109439"
  },
  {
    "text": "manifest but either intentionally or unintentionally and",
    "start": "109439",
    "end": "114560"
  },
  {
    "text": "get ops enables version control history peer reviewing and easy",
    "start": "114560",
    "end": "120560"
  },
  {
    "text": "rollbacks all through versioning in git and best of all we can keep our application code",
    "start": "120560",
    "end": "127600"
  },
  {
    "text": "right alongside our kubernetes manifest so they're all version together and maintain a history so this begs the",
    "start": "127600",
    "end": "135040"
  },
  {
    "text": "question that if our code is already in git and our kubernetes manifests are already in",
    "start": "135040",
    "end": "140840"
  },
  {
    "text": "git well why not put our secrets in git and",
    "start": "140840",
    "end": "145920"
  },
  {
    "text": "now i know what you might be thinking to yourself you're probably thinking uh that's crazy you've given so many talks",
    "start": "145920",
    "end": "151599"
  },
  {
    "text": "before seth why would you ever tell us to put plain text secrets in a git repository this is just a disaster",
    "start": "151599",
    "end": "157360"
  },
  {
    "text": "waiting to happen and you're right but nobody said anything about",
    "start": "157360",
    "end": "162800"
  },
  {
    "text": "plain text secrets and that's really the core of our talk here today we're going to be focusing on workflows",
    "start": "162800",
    "end": "168959"
  },
  {
    "text": "that enable you to use get ops without exposing the plain text secrets inside your repositories",
    "start": "168959",
    "end": "175360"
  },
  {
    "text": "and then before we jump into the meat of it i just want to address one issue you might be thinking we don't use git",
    "start": "175360",
    "end": "181120"
  },
  {
    "text": "this talk is totally useless for me and that's simply not the case while alex and i are using git is the example",
    "start": "181120",
    "end": "187280"
  },
  {
    "text": "here these concepts are not specific to git they would work with svn or mercurial or perforce or any other source control",
    "start": "187280",
    "end": "194560"
  },
  {
    "text": "technology that you have today so when we say get just replace that with whatever you're using if it's not get today",
    "start": "194560",
    "end": "202480"
  },
  {
    "text": "the core of our design is rooted in asymmetric cryptography so let's have a quick overview of how",
    "start": "203360",
    "end": "209120"
  },
  {
    "text": "asymmetric crypto works before diving in even more with asymmetric cryptography we generate",
    "start": "209120",
    "end": "216000"
  },
  {
    "text": "an asymmetric key and that asymmetric key has two parts a public part",
    "start": "216000",
    "end": "221280"
  },
  {
    "text": "and a private part data that is encrypted with the public key",
    "start": "221280",
    "end": "226799"
  },
  {
    "text": "can only be decrypted with the private key so in this example we have joe is",
    "start": "226799",
    "end": "233439"
  },
  {
    "text": "retrieving alice's public key he's using alex alice's public key material to encrypt a",
    "start": "233439",
    "end": "239519"
  },
  {
    "text": "message and then giving that cipher text to alice alice then uses her private key portion",
    "start": "239519",
    "end": "246159"
  },
  {
    "text": "to decrypt that cipher text and receive the plain text which if everything works correctly is the",
    "start": "246159",
    "end": "251840"
  },
  {
    "text": "message that joe originally created unlike symmetric cryptography asymmetric",
    "start": "251840",
    "end": "258400"
  },
  {
    "text": "cryptography requires the private key to decrypt public key encrypted information and the public key",
    "start": "258400",
    "end": "263840"
  },
  {
    "text": "to decrypt private key encrypted information this means that even though alice's key is public",
    "start": "263840",
    "end": "269919"
  },
  {
    "text": "when joe encrypts a message using that public key that same key cannot be used to decrypt that data",
    "start": "269919",
    "end": "276240"
  },
  {
    "text": "decryption is only possible using the private key however secure exchange hinges on a",
    "start": "276240",
    "end": "284639"
  },
  {
    "text": "common format or standard for the serialization of these encrypted or signed messages",
    "start": "284639",
    "end": "291680"
  },
  {
    "text": "we chose the json web encryption format or jwe but other message standards might work",
    "start": "291919",
    "end": "297840"
  },
  {
    "text": "as well we picked jwe because there's an ecosystem of tools including the popular",
    "start": "297840",
    "end": "303520"
  },
  {
    "text": "go jose library for kubernetes that revolve around jwe there's no reason you couldn't use a different",
    "start": "303520",
    "end": "309840"
  },
  {
    "text": "algorithm or standard but that's what we're focusing on here today so just like earlier we said you know if you're using svn replace git",
    "start": "309840",
    "end": "316639"
  },
  {
    "text": "with svn when we say it the same thing is true with jwe if you have a different message standard that you'd prefer",
    "start": "316639",
    "end": "322240"
  },
  {
    "text": "feel free to drop that in again these principles apply largely regardless of the technology choice",
    "start": "322240",
    "end": "328800"
  },
  {
    "text": "you might be asking yourself why even use jwe at all why not just use a key management",
    "start": "329440",
    "end": "334960"
  },
  {
    "text": "service directly to encrypt and decrypt this data well there's two main reasons the first and a little bit more",
    "start": "334960",
    "end": "341039"
  },
  {
    "text": "practical is that kubernetes secrets can be up to one megabyte in size but most key management systems restrict",
    "start": "341039",
    "end": "347759"
  },
  {
    "text": "data to 64 kilobytes in size so by talking directly to the kms we",
    "start": "347759",
    "end": "352960"
  },
  {
    "text": "would be severely limiting the size of kubernetes secrets objects on the security front moreover giving",
    "start": "352960",
    "end": "359520"
  },
  {
    "text": "the secret directly to a key management system may be undesirable or not available in",
    "start": "359520",
    "end": "366080"
  },
  {
    "text": "certain situations depending on your jurisdiction or organizational policies so depending on your trust model it may",
    "start": "366080",
    "end": "372319"
  },
  {
    "text": "not be acceptable to give the secret directly to a key management system by using the envelope the jwe envelope",
    "start": "372319",
    "end": "379039"
  },
  {
    "text": "we are giving an encryption key to the kms not the secret itself so if someone were to compromise that",
    "start": "379039",
    "end": "385759"
  },
  {
    "text": "communication we're never actually sending the secret over the network",
    "start": "385759",
    "end": "390960"
  },
  {
    "start": "390000",
    "end": "621000"
  },
  {
    "text": "in this workflow we're going to be talking about three unique people now in a small organization like a",
    "start": "391199",
    "end": "397199"
  },
  {
    "text": "startup one person might actually perform all of these roles but in a larger organization",
    "start": "397199",
    "end": "402560"
  },
  {
    "text": "like an enterprise these are usually separate teams and separate people",
    "start": "402560",
    "end": "408000"
  },
  {
    "text": "the first persona is the key admin or key administrator this person is responsible for creating",
    "start": "408000",
    "end": "413599"
  },
  {
    "text": "and managing cryptographic keys usually in some central key management system they're",
    "start": "413599",
    "end": "418880"
  },
  {
    "text": "unlikely to be familiar with kubernetes tools and technologies our next persona is the secret admin the",
    "start": "418880",
    "end": "426960"
  },
  {
    "text": "secret admin is responsible for managing sensitive data like passwords and api keys",
    "start": "426960",
    "end": "432000"
  },
  {
    "text": "they're also unlikely to be familiar with kubernetes or the kubernetes api",
    "start": "432000",
    "end": "437680"
  },
  {
    "text": "and our third persona is the cluster admin the cluster admin is responsible for",
    "start": "437680",
    "end": "442800"
  },
  {
    "text": "deploying managing and configuring the kubernetes cluster and any workloads that run on it",
    "start": "442800",
    "end": "448319"
  },
  {
    "text": "hopefully they are familiar with kubernetes tools since that's really what they do every day",
    "start": "448319",
    "end": "454800"
  },
  {
    "text": "just like we have three personas there are actually three steps to this process that we describe here today",
    "start": "455199",
    "end": "461840"
  },
  {
    "text": "in the first step the key admin creates an asymmetric key pair usually in a key",
    "start": "461919",
    "end": "467520"
  },
  {
    "text": "management system they then download and extract the public key",
    "start": "467520",
    "end": "472639"
  },
  {
    "text": "and put it in a git repository or give it to someone else to put in the git repository",
    "start": "472639",
    "end": "477840"
  },
  {
    "text": "this key will be used to encrypt the secrets but remember this is the public key portion the secret is",
    "start": "477840",
    "end": "485039"
  },
  {
    "text": "encrypted with the public key but it can only be decrypted using the private key which is still stored in the",
    "start": "485039",
    "end": "490240"
  },
  {
    "text": "key management system depending on your setup you can add to",
    "start": "490240",
    "end": "496800"
  },
  {
    "text": "this these steps for example you might add identity and access management or approvals throughout this workflow",
    "start": "496800",
    "end": "503599"
  },
  {
    "text": "but we're just showing kind of the bare bones most basic steps that you may need to take",
    "start": "503599",
    "end": "510080"
  },
  {
    "text": "next our secret admin uses that public key in the git repository to create a jwe",
    "start": "510400",
    "end": "517120"
  },
  {
    "text": "envelope with the secret contents this envelope becomes the value of the",
    "start": "517120",
    "end": "522399"
  },
  {
    "text": "kubernetes secret file or the value that goes into the kubernetes manifest",
    "start": "522399",
    "end": "528320"
  },
  {
    "text": "again just like before depending on your setup you can add more customization points like",
    "start": "528320",
    "end": "533600"
  },
  {
    "text": "automation ci cd and approvals and then finally our cluster",
    "start": "533600",
    "end": "540480"
  },
  {
    "text": "administrator pulls the kubernetes secret file or the manifest that contains the kubernetes",
    "start": "540480",
    "end": "545519"
  },
  {
    "text": "secret with the encrypted secret from the repository and pushes it to the kubernetes api server",
    "start": "545519",
    "end": "552399"
  },
  {
    "text": "the api server leverages a mutating web hook which decrypts the secret before storing",
    "start": "552399",
    "end": "557920"
  },
  {
    "text": "it in scd now kubernetes pods and services which have proper permissions to access the",
    "start": "557920",
    "end": "563760"
  },
  {
    "text": "plain text secret are able to do so directly via the kubernetes api",
    "start": "563760",
    "end": "569200"
  },
  {
    "text": "let's take a look at what this looks like in a little bit more of a flow diagram there's a lot of moving parts the key",
    "start": "569200",
    "end": "575360"
  },
  {
    "text": "piece here is actually the mutating web hook the mutating web hook receives the encrypted jwe",
    "start": "575360",
    "end": "581360"
  },
  {
    "text": "and decrypts it before writing it to etcd all of this happens inside of kubernetes",
    "start": "581360",
    "end": "587120"
  },
  {
    "text": "so the cluster admin never needs to see the plain text secret now you might be thinking to yourself",
    "start": "587120",
    "end": "593920"
  },
  {
    "text": "seth didn't you and alex give an entire talk about storing secrets in plain text and ncd",
    "start": "593920",
    "end": "599040"
  },
  {
    "text": "and to that i would say yes and there'll be a link in the show notes at the end we don't advocate for storing secrets in",
    "start": "599040",
    "end": "604560"
  },
  {
    "text": "plain text and ncd you should use application layer encryption with a kms plugin",
    "start": "604560",
    "end": "609680"
  },
  {
    "text": "but that's a totally different topic and a talk all on its own so alex why don't you show us a little",
    "start": "609680",
    "end": "615680"
  },
  {
    "text": "bit of what about what this might look like in real life",
    "start": "615680",
    "end": "620160"
  },
  {
    "start": "621000",
    "end": "924000"
  },
  {
    "text": "thank you seth for covering the core ideas behind the solution in this section of the presentation i",
    "start": "621920",
    "end": "627360"
  },
  {
    "text": "will attempt to make this ideas more concrete by walking you through the important implementation points",
    "start": "627360",
    "end": "634560"
  },
  {
    "text": "we believe that the solution we are proposing could be adapted to a wide range of environments in both cloud and on-prem for this",
    "start": "635040",
    "end": "643200"
  },
  {
    "text": "walkthrough we'll be using google cloud platform for the simple reason that this is the environment we are most familiar with",
    "start": "643200",
    "end": "650720"
  },
  {
    "text": "concretely we'll be using google cloud kms but any kms that supports asymmetric",
    "start": "650720",
    "end": "655760"
  },
  {
    "text": "encryption would suffice furthermore we'll need a place to deploy our mutating webhook",
    "start": "655760",
    "end": "662000"
  },
  {
    "text": "and we'll be using google compute engine vms for this task",
    "start": "662000",
    "end": "666959"
  },
  {
    "text": "remember the three personas that seth introduced earlier let's see how they can collaborate on",
    "start": "668240",
    "end": "673920"
  },
  {
    "text": "the project of integrating kubernetes secrets into their git based ci cd pipeline",
    "start": "673920",
    "end": "679519"
  },
  {
    "text": "as you will recall key admins are responsible for generating and controlling access",
    "start": "679519",
    "end": "684640"
  },
  {
    "text": "to keys stored in kms the task of creating a key will depend",
    "start": "684640",
    "end": "691680"
  },
  {
    "text": "on the vendor but this is how this would look like when using google cloud kms",
    "start": "691680",
    "end": "698160"
  },
  {
    "text": "let's focus on the vendor independent components though first we need to select the right",
    "start": "698160",
    "end": "703680"
  },
  {
    "text": "purpose for the key in our case this should be asymmetric encryption",
    "start": "703680",
    "end": "709040"
  },
  {
    "text": "second we need to ensure that jw rfc supports the cryptographic parameters we",
    "start": "709040",
    "end": "715680"
  },
  {
    "text": "selected for this given key concretely when creating an asymmetric",
    "start": "715680",
    "end": "722160"
  },
  {
    "text": "key in kms key admins must choose from the list of asymmetric encryption protocols",
    "start": "722160",
    "end": "728720"
  },
  {
    "text": "supported by the jwe standard for the purposes of our walkthrough we",
    "start": "728720",
    "end": "734000"
  },
  {
    "text": "picked rsa oap 256 suite since it is supported by both",
    "start": "734000",
    "end": "739760"
  },
  {
    "text": "google cloud kms and gwe standard however protocols from the elliptic curve family would work as well",
    "start": "739760",
    "end": "748000"
  },
  {
    "text": "next secret admin exports the public portion of the key and pushes it into the git repository",
    "start": "748880",
    "end": "755760"
  },
  {
    "text": "recall that by definition this public key is safe to store in clear text",
    "start": "755760",
    "end": "761440"
  },
  {
    "text": "our mutating webhook will need to have access to the decryption api exposed by the kms",
    "start": "761440",
    "end": "768480"
  },
  {
    "text": "therefore key admins need to grant decryption privileges on the key to the entity in whose",
    "start": "768480",
    "end": "774880"
  },
  {
    "text": "security context our webhook will run whether you are running on-prem or in",
    "start": "774880",
    "end": "780959"
  },
  {
    "text": "cloud your environment will most likely support the concept of a service account",
    "start": "780959",
    "end": "786079"
  },
  {
    "text": "an identity that is linked to a service we will assume that such service account",
    "start": "786079",
    "end": "791360"
  },
  {
    "text": "already exists and then its name was supplied to the key admin by the cluster admin",
    "start": "791360",
    "end": "800079"
  },
  {
    "text": "and that is all that the key admin needs to do",
    "start": "800079",
    "end": "804240"
  },
  {
    "text": "our secret admin has one responsibility encrypt the credential which will eventually be distributed to",
    "start": "806160",
    "end": "812000"
  },
  {
    "text": "kubernetes clusters to perform this task our secret admin",
    "start": "812000",
    "end": "817760"
  },
  {
    "text": "will leverage the josie utl tool the critical part of this step is to",
    "start": "817760",
    "end": "823279"
  },
  {
    "text": "supply the cryptographic parameters that match those of the kms key created",
    "start": "823279",
    "end": "829040"
  },
  {
    "text": "by the key admin we do not expect our secret admin to be familiar with this level of detail",
    "start": "829040",
    "end": "836720"
  },
  {
    "text": "therefore the key admin created a script that automates this task essentially all we expect from the",
    "start": "836720",
    "end": "843519"
  },
  {
    "text": "secret admin is to supply the credential to be encrypted as the input",
    "start": "843519",
    "end": "849120"
  },
  {
    "text": "let's unpack the script first we will assume that the secret admin checked out the public key and the",
    "start": "850000",
    "end": "856560"
  },
  {
    "text": "accompanying script from the repository second the key admin supplied the path",
    "start": "856560",
    "end": "862399"
  },
  {
    "text": "to the public key along with the credential to be encrypted as inputs to that script",
    "start": "862399",
    "end": "869199"
  },
  {
    "text": "the script produced a gwe encrypted envelope which was placed into the data field of",
    "start": "869199",
    "end": "874639"
  },
  {
    "text": "kubernetes secret finally this newly created secret kubernetes secret",
    "start": "874639",
    "end": "880959"
  },
  {
    "text": "was published to the git repository at this point the only way to decrypt",
    "start": "880959",
    "end": "886800"
  },
  {
    "text": "this envelope is by calling kms api which we protected by the access control list",
    "start": "886800",
    "end": "893920"
  },
  {
    "text": "so this is how our secret looks like in the repository this is a standard kubernetes secret if",
    "start": "894639",
    "end": "901360"
  },
  {
    "text": "we were to submit the secret to cube api server cube apesor would happily accept it",
    "start": "901360",
    "end": "907120"
  },
  {
    "text": "however in this current form it would not be much use to our applications since they need the credential itself",
    "start": "907120",
    "end": "913440"
  },
  {
    "text": "and not some encrypted envelope our cluster admin will be addressing this issue in the next",
    "start": "913440",
    "end": "919760"
  },
  {
    "text": "section by setting up the mutating webhook this takes us to the final stage of the",
    "start": "919760",
    "end": "926320"
  },
  {
    "text": "project cluster configuration in a nutshell the task of the cluster",
    "start": "926320",
    "end": "931839"
  },
  {
    "text": "admin is to set up a mutating web hook since this is a well-documented task we",
    "start": "931839",
    "end": "937759"
  },
  {
    "text": "won't be going into too many details",
    "start": "937759",
    "end": "941839"
  },
  {
    "text": "you will recall that our key admin granted decree privileges to the service account provided by the cluster admin now in",
    "start": "943600",
    "end": "950800"
  },
  {
    "text": "this step the cluster admin creates a virtual machine that is bound to the just mentioned service account",
    "start": "950800",
    "end": "958079"
  },
  {
    "text": "this binding will allow processes running on the vm to decrypt secrets via the key stored in",
    "start": "958079",
    "end": "964880"
  },
  {
    "text": "cloud kms we use google compute engine vms as an example here",
    "start": "964880",
    "end": "970720"
  },
  {
    "text": "however we believe that similar functionality of binding service accounts to vms",
    "start": "970720",
    "end": "976079"
  },
  {
    "text": "exists on other platforms as well now that the infrastructure prerequisites are out of the way",
    "start": "976079",
    "end": "982959"
  },
  {
    "text": "the cluster admin is ready to create the configuration document for the jwe web hook and check it in",
    "start": "982959",
    "end": "989600"
  },
  {
    "text": "into the git repo the next time when the cicd pipeline",
    "start": "989600",
    "end": "996240"
  },
  {
    "text": "runs two things should happen first gw webhook will be registered with the",
    "start": "996240",
    "end": "1002399"
  },
  {
    "text": "cube api server and secondly the secret that contains the jw",
    "start": "1002399",
    "end": "1007440"
  },
  {
    "text": "envelope will be applied to the configuration of the cluster",
    "start": "1007440",
    "end": "1012560"
  },
  {
    "text": "the second cube card i'll apply will trigger a three-step sequence in the first step cube api server passes",
    "start": "1013360",
    "end": "1020639"
  },
  {
    "text": "the envelope secret to the web hook in the second step the webhook decrypts the envelope by making a call to kms",
    "start": "1020639",
    "end": "1029839"
  },
  {
    "text": "lastly the webhook passes now decrypted secret back to the cube api server",
    "start": "1029839",
    "end": "1036480"
  },
  {
    "start": "1036000",
    "end": "1221000"
  },
  {
    "text": "if we were to get this secret from cube api server we will get the secret in clear text",
    "start": "1037760",
    "end": "1044000"
  },
  {
    "text": "thus our applications are ready to start using it",
    "start": "1044000",
    "end": "1053840"
  },
  {
    "text": "hey everyone i'm seth hi everyone i'm alex looks like we have a few questions in",
    "start": "1088559",
    "end": "1094720"
  },
  {
    "text": "the q a but feel free to jump some questions in the q a and we will try to answer",
    "start": "1094720",
    "end": "1100320"
  },
  {
    "text": "them to the best of our ability so the first question uh says",
    "start": "1100320",
    "end": "1108320"
  },
  {
    "text": "i feel like sometimes there's a chicken and egg scenario where i'm not sure if an encryption key for a kubernetes",
    "start": "1108320",
    "end": "1113600"
  },
  {
    "text": "secret should be kept in a vault like hashicorp vault for this kubernetes cluster and at the",
    "start": "1113600",
    "end": "1118640"
  },
  {
    "text": "same time i want to use the key manager involved for my application level secrets as well",
    "start": "1118640",
    "end": "1125120"
  },
  {
    "text": "should i reuse the same key management system or should i have a whole separate key management system uh dedicated to a",
    "start": "1125120",
    "end": "1132160"
  },
  {
    "text": "particular namespace uh alex what are you what are your thoughts on separation of keys",
    "start": "1132160",
    "end": "1138880"
  },
  {
    "text": "well i think uh it's a very actually it's a very interesting question i think",
    "start": "1139760",
    "end": "1145280"
  },
  {
    "text": "uh ultimately ultimately this is comes down to this uh first secret",
    "start": "1145280",
    "end": "1150880"
  },
  {
    "text": "problem uh the term that uh seth coined uh at the end of the day no matter what you do you",
    "start": "1150880",
    "end": "1156720"
  },
  {
    "text": "will end up with some sort of initial secret initial key that on top of which you bootstrap uh",
    "start": "1156720",
    "end": "1164240"
  },
  {
    "text": "the rest of your keys and encryption decryption um so i think i would be",
    "start": "1164240",
    "end": "1170960"
  },
  {
    "text": "fairly comfortable with any approach where as long as the initial first secret for secret",
    "start": "1170960",
    "end": "1178559"
  },
  {
    "text": "is stored in some sort of hardware device uh for example uh hsm or tpm",
    "start": "1178559",
    "end": "1185600"
  },
  {
    "text": "uh as long as we can trace that initial pass initial key to the hardware device",
    "start": "1185600",
    "end": "1190640"
  },
  {
    "text": "uh and you have good assurances around how",
    "start": "1190640",
    "end": "1197600"
  },
  {
    "text": "the rest of the keys are bootstrapped i think any solution would work",
    "start": "1197600",
    "end": "1203039"
  },
  {
    "text": "you know it really depends on sort of your specific specific requirements but that's what i",
    "start": "1203039",
    "end": "1208880"
  },
  {
    "text": "would watch out for look for that first secret like and where does it come from because every all problems typically",
    "start": "1208880",
    "end": "1215360"
  },
  {
    "text": "start from attackers figuring out how to get that first secret",
    "start": "1215360",
    "end": "1221840"
  },
  {
    "start": "1221000",
    "end": "1329000"
  },
  {
    "text": "thanks alex uh so the next question is what do you think about the the sealed secrets project i'm assuming",
    "start": "1222000",
    "end": "1227039"
  },
  {
    "text": "that's the bitnami um i'll add my take and then alex if you want to add more",
    "start": "1227039",
    "end": "1232640"
  },
  {
    "text": "i think the key difference is in our architecture we really wanted to assume that the person who was generating these",
    "start": "1232640",
    "end": "1240080"
  },
  {
    "text": "passwords or certificates in these third-party systems didn't have experience with kubernetes and the same",
    "start": "1240080",
    "end": "1245840"
  },
  {
    "text": "would be true of the the key administrator right um so when we were going through the personas we",
    "start": "1245840",
    "end": "1250880"
  },
  {
    "text": "talked pretty heavily about you know this person might not use kubernetes they might not be familiar with the kubernetes api",
    "start": "1250880",
    "end": "1256720"
  },
  {
    "text": "whereas the um sealed secrets project basically automates the those first two",
    "start": "1256720",
    "end": "1262640"
  },
  {
    "text": "personas that we discussed into kubernetes itself so it does require that the person creating the",
    "start": "1262640",
    "end": "1267840"
  },
  {
    "text": "secrets um also has familiarity with kubernetes and we just didn't want to push that requirement onto people",
    "start": "1267840",
    "end": "1274720"
  },
  {
    "text": "but largely they use like the same you know asymmetric cryptography um it's really just about how is your",
    "start": "1274720",
    "end": "1280320"
  },
  {
    "text": "organization set up and and where do your expertise lie yeah absolutely i would just only add i",
    "start": "1280320",
    "end": "1287039"
  },
  {
    "text": "think uh i think there is a slight advantage of what seth and i are proposing is because",
    "start": "1287039",
    "end": "1294080"
  },
  {
    "text": "uh bitnami relies on creating a custom object for storing incorporated",
    "start": "1294080",
    "end": "1300640"
  },
  {
    "text": "information which is absolutely nothing wrong with that and there are pros of doing that uh but",
    "start": "1300640",
    "end": "1306880"
  },
  {
    "text": "what we demonstrated is just basically using plain kubernetes secrets so your existing application can be completely",
    "start": "1306880",
    "end": "1312960"
  },
  {
    "text": "unaware of all this additional machinery that was introduced uh so so i think the entry",
    "start": "1312960",
    "end": "1319280"
  },
  {
    "text": "to production would be would be lower with just using jw encryption and",
    "start": "1319280",
    "end": "1326880"
  },
  {
    "text": "external kms but we love that project so so the idea is absolutely ideas",
    "start": "1326880",
    "end": "1334960"
  },
  {
    "start": "1329000",
    "end": "1438000"
  },
  {
    "text": "sort of the idea the process what it will get you are very similar",
    "start": "1334960",
    "end": "1341919"
  },
  {
    "text": "cool um",
    "start": "1342480",
    "end": "1347840"
  },
  {
    "text": "so next question is how do you ensure that the secret admin encrypts with the correct public key",
    "start": "1347919",
    "end": "1354400"
  },
  {
    "text": "for example how do you ensure that this isn't an attacker that has replaced the public key with their own",
    "start": "1354400",
    "end": "1359679"
  },
  {
    "text": "so that they can easily decrypt the secret uh that the secret admin unknowingly encrypted with the attacker's key",
    "start": "1359679",
    "end": "1366080"
  },
  {
    "text": "um alex do you wanna right uh right so so this is the",
    "start": "1366080",
    "end": "1372720"
  },
  {
    "text": "uh so the yeah this is this is a good point i i think uh what needs to happen here is that uh",
    "start": "1372720",
    "end": "1379679"
  },
  {
    "text": "basically the secret secret administrator um the sorry the secret administrator and",
    "start": "1379679",
    "end": "1385360"
  },
  {
    "text": "the key administrator we need to do another sort of handshake and basically the",
    "start": "1385360",
    "end": "1390480"
  },
  {
    "text": "secret the key administrator would need to ensure that the key administrator is aware of the hash of the public key",
    "start": "1390480",
    "end": "1396480"
  },
  {
    "text": "that they need to use uh so so yeah that's a very very good point there are also some",
    "start": "1396480",
    "end": "1403679"
  },
  {
    "text": "you know obviously the facilities available like in in in system like github where you can",
    "start": "1403679",
    "end": "1408720"
  },
  {
    "text": "you can apply access control list so that attackers you know can just simply replace the public key",
    "start": "1408720",
    "end": "1414880"
  },
  {
    "text": "without compromising github security system but absolutely right it's it's basically like with",
    "start": "1414880",
    "end": "1420000"
  },
  {
    "text": "using any public key cryptography everything comes down to basically trust that you can place in",
    "start": "1420000",
    "end": "1425760"
  },
  {
    "text": "the public key so yeah there isn't maybe we should have made it more clear in the presentation",
    "start": "1425760",
    "end": "1431919"
  },
  {
    "text": "that uh there's a little bit more inter interaction between the key admin and secret admin yeah and then",
    "start": "1431919",
    "end": "1439840"
  },
  {
    "start": "1438000",
    "end": "1560000"
  },
  {
    "text": "there's probably some level of like established trust there right like they're communicating over a secure work channel or they know one another um",
    "start": "1439840",
    "end": "1446799"
  },
  {
    "text": "this is this is part of a larger classification of attack called inband key negotiation",
    "start": "1446799",
    "end": "1452960"
  },
  {
    "text": "and it applies to public and you know symmetric cryptography uh asymmetric and symmetric cryptography",
    "start": "1452960",
    "end": "1458000"
  },
  {
    "text": "where if you uh you know we always worry about an attacker decrypting a secret but what if",
    "start": "1458000",
    "end": "1463440"
  },
  {
    "text": "they could just encrypt a secret with their own key and then somehow get it into our system um so yeah definitely having some level",
    "start": "1463440",
    "end": "1469520"
  },
  {
    "text": "of trust particularly using you know the signatures of the keys and having some out of band negotiation",
    "start": "1469520",
    "end": "1475440"
  },
  {
    "text": "um cool alex do you want to read off the",
    "start": "1475440",
    "end": "1481039"
  },
  {
    "text": "next one yep",
    "start": "1481039",
    "end": "1487840"
  },
  {
    "text": "okay i don't understand how customer",
    "start": "1492000",
    "end": "1499360"
  },
  {
    "text": "i'm not sure i understand that second question but i don't understand how to customize by example helm chart to be",
    "start": "1499520",
    "end": "1505440"
  },
  {
    "text": "able to use it uh like do you mean how would any",
    "start": "1505440",
    "end": "1510799"
  },
  {
    "text": "i think question number six and question number seven are the same it says i understand how you encrypt and",
    "start": "1510799",
    "end": "1516400"
  },
  {
    "text": "store passwords inside git and secret but i don't understand how to customize by example",
    "start": "1516400",
    "end": "1522720"
  },
  {
    "text": "uh like using a helm chart to be able to use it so it's i think it's really like how do you get started with this right so is as",
    "start": "1522720",
    "end": "1530799"
  },
  {
    "text": "long as actually i'm not too familiar with helm unfortunately but uh i'm going to assume that somehow helm",
    "start": "1530799",
    "end": "1537679"
  },
  {
    "text": "can consume a kubernetes secret and if and if it if it is true then then",
    "start": "1537679",
    "end": "1542880"
  },
  {
    "text": "you're already done uh our solution does not require you to customize your existing applications if",
    "start": "1542880",
    "end": "1548720"
  },
  {
    "text": "you are using a seeker today you you can continue your applications do not need to change",
    "start": "1548720",
    "end": "1553840"
  },
  {
    "text": "in any way shape or form assuming i understood your question because i'm not familiar with helm unfortunately",
    "start": "1553840",
    "end": "1560880"
  },
  {
    "start": "1560000",
    "end": "1693000"
  },
  {
    "text": "so the next question is um how do you support key rotation in this model",
    "start": "1560960",
    "end": "1570159"
  },
  {
    "text": "right uh so so this is the the key rotation in this model is actually",
    "start": "1570159",
    "end": "1575840"
  },
  {
    "text": "uh so so there are two components to this so",
    "start": "1575840",
    "end": "1581200"
  },
  {
    "text": "so first component is you need to have a process to basically",
    "start": "1581200",
    "end": "1586880"
  },
  {
    "text": "um so i i think",
    "start": "1586880",
    "end": "1593760"
  },
  {
    "text": "the the challenge here is around uh basically the [Music]",
    "start": "1593760",
    "end": "1600720"
  },
  {
    "text": "ensuring that the timing is right between your change your your password or rotate your secret and",
    "start": "1600720",
    "end": "1609279"
  },
  {
    "text": "uh basically the secret being developed delivered at the right time to the applications so that you",
    "start": "1609279",
    "end": "1615279"
  },
  {
    "text": "basically you basically don't have the upper you don't have the situation where you rotated your secret",
    "start": "1615279",
    "end": "1621279"
  },
  {
    "text": "uh on the system but the application is still using the old all secret so the the idea and this",
    "start": "1621279",
    "end": "1628640"
  },
  {
    "text": "requires a little bit more like unfortunately we won't be able to cover this in detail but we believe that the correct approach",
    "start": "1628640",
    "end": "1635120"
  },
  {
    "text": "here is to basically provide sort of a backup secret",
    "start": "1635120",
    "end": "1640720"
  },
  {
    "text": "uh so basically because it's very difficult to time everything uh to the point where uh application",
    "start": "1640720",
    "end": "1647279"
  },
  {
    "text": "just starts using the right secret at the right time we're basically we're looking at the ideas where we",
    "start": "1647279",
    "end": "1653039"
  },
  {
    "text": "would send sort of the old secret and the new secret uh through you know your git workflow",
    "start": "1653039",
    "end": "1658559"
  },
  {
    "text": "and the application will basically retry uh if if you know like if the old secret fails then we just basically",
    "start": "1658559",
    "end": "1664480"
  },
  {
    "text": "try the new one um so so that's sort of our current thinking about this but it",
    "start": "1664480",
    "end": "1670080"
  },
  {
    "text": "is a it is not a simple problem um and there's also issues around like how would the secrets uh secret",
    "start": "1670080",
    "end": "1678399"
  },
  {
    "text": "admin basically initiate the change um so which you know very much depends on the kind of the system they're using",
    "start": "1678399",
    "end": "1684720"
  },
  {
    "text": "etc but but the idea of overlapping secrets i think that's kind of what we would recommend today",
    "start": "1684720",
    "end": "1692399"
  },
  {
    "start": "1693000",
    "end": "1794000"
  },
  {
    "text": "cool alex do you want to read off the next one uh is it number 11 yeah it is",
    "start": "1694480",
    "end": "1702159"
  },
  {
    "text": "how how would gcp secret manager play in this both g key based and docker or gc",
    "start": "1702159",
    "end": "1707679"
  },
  {
    "text": "scenario things uh so yeah uh you can just basically uh replace uh",
    "start": "1707679",
    "end": "1716640"
  },
  {
    "text": "so so yeah i mean gcp secret is gcp secrets is another way to externalize",
    "start": "1716640",
    "end": "1723760"
  },
  {
    "text": "your secrets configuration so i think the decision you would have to make for yourself is",
    "start": "1723760",
    "end": "1729039"
  },
  {
    "text": "if you are comfortable with if you are comfortable with",
    "start": "1729039",
    "end": "1735120"
  },
  {
    "text": "externalizing secrets manager like basically not storing secrets and get like basically you have only a pointer to the",
    "start": "1735120",
    "end": "1742720"
  },
  {
    "text": "uh to the secret and basically essentially if you are interested in using gcp secrets uh",
    "start": "1742720",
    "end": "1749520"
  },
  {
    "text": "i think the right approach is to use the csi csi driver uh which into like there is a maybe we",
    "start": "1749520",
    "end": "1756080"
  },
  {
    "text": "should add a link to the to the slides but basically you can uh easily configure your cluster to pull the",
    "start": "1756080",
    "end": "1762799"
  },
  {
    "text": "secret from gcp secrets and that plays nicely with",
    "start": "1762799",
    "end": "1768640"
  },
  {
    "text": "github's git ops mentality because you still store everything in git repository",
    "start": "1768640",
    "end": "1775760"
  },
  {
    "text": "uh it's just simply that the actual secret is externalized uh so essentially you're still",
    "start": "1775760",
    "end": "1781200"
  },
  {
    "text": "kind of achieving your goals of having your gear as a as a as a as a source of truth uh",
    "start": "1781200",
    "end": "1788720"
  },
  {
    "text": "but the approach would be different you would need to look at csi driver that would be my recommendation",
    "start": "1788720",
    "end": "1795600"
  },
  {
    "start": "1794000",
    "end": "1913000"
  },
  {
    "text": "yeah um i would i would just chime in like there are some architectural differences between google secret manager and kubernetes",
    "start": "1795600",
    "end": "1802640"
  },
  {
    "text": "secrets the biggest of which is the data format and the versioning so by default kubernetes secrets are not",
    "start": "1802640",
    "end": "1808399"
  },
  {
    "text": "versioned whereas secret manager secrets are kubernetes secrets are key value pairs whereas",
    "start": "1808399",
    "end": "1814240"
  },
  {
    "text": "uh google secret manager secrets are just a slice of bytes like arbitrary characters so there",
    "start": "1814240",
    "end": "1820240"
  },
  {
    "text": "are some architectural differences um but to alex's point about like externalization if you choose to use",
    "start": "1820240",
    "end": "1826320"
  },
  {
    "text": "google secret manager you would basically not use kubernetes secrets um and then you would either",
    "start": "1826320",
    "end": "1832399"
  },
  {
    "text": "consume them directly from your application using like a library or an sdk or you would leverage the csi driver",
    "start": "1832399",
    "end": "1838559"
  },
  {
    "text": "which i posted a link to in the answer to the question that basically maps the secrets from secret manager",
    "start": "1838559",
    "end": "1844159"
  },
  {
    "text": "into a file system or an in-memory virtual file system so that your applications can just read their secrets from disk",
    "start": "1844159",
    "end": "1852000"
  },
  {
    "text": "um next question is uh what are the pros and cons of jwe versus mozilla's sops",
    "start": "1852080",
    "end": "1858000"
  },
  {
    "text": "i i don't know alex i i will need to look it up uh it's it's probably yeah i don't know",
    "start": "1858000",
    "end": "1865440"
  },
  {
    "text": "i'm not familiar with mozilla subs we did explore multiple formats uh we look at uh vrs encryption serialization standards",
    "start": "1865440",
    "end": "1873120"
  },
  {
    "text": "uh and essentially the reason we chose gwe is because uh gwe is extensively used",
    "start": "1873120",
    "end": "1880240"
  },
  {
    "text": "in kubernetes uh within kubernetes itself like for example we use it for",
    "start": "1880240",
    "end": "1885760"
  },
  {
    "text": "encrypting tokens and serializing tokens uh so it's already linked",
    "start": "1885760",
    "end": "1891760"
  },
  {
    "text": "a lot of kubernetes developers already familiar with this framework uh and it has nice gold language support",
    "start": "1891760",
    "end": "1897440"
  },
  {
    "text": "so that was the primary reason i think if you prefer uh if you have strong preference for other serialization",
    "start": "1897440",
    "end": "1903200"
  },
  {
    "text": "formats it will be pretty straightforward to sort of just swap them out in the solution um so we are not particularly tied to",
    "start": "1903200",
    "end": "1910880"
  },
  {
    "text": "any particular format um so the next question is why not just",
    "start": "1910880",
    "end": "1916159"
  },
  {
    "start": "1913000",
    "end": "2136000"
  },
  {
    "text": "use vault instead um i can take that i guess um",
    "start": "1916159",
    "end": "1922320"
  },
  {
    "text": "is there's two ways i could read this question the first is um why not just use vault to store the secrets directly and to that i think",
    "start": "1922320",
    "end": "1929039"
  },
  {
    "text": "that the answer is very similar to the google secret manager question that we just answered which is you can totally do that but there are",
    "start": "1929039",
    "end": "1934880"
  },
  {
    "text": "some architectural differences um that csi driver that i linked to in the other question",
    "start": "1934880",
    "end": "1940640"
  },
  {
    "text": "is actually the same interface by which you could consume hashicorp vault secrets from inside kubernetes and you could",
    "start": "1940640",
    "end": "1946320"
  },
  {
    "text": "also call the api directly um another way i could interpret this question is why not use vault's",
    "start": "1946320",
    "end": "1952320"
  },
  {
    "text": "transit back-end which is the key management system built into vault uh like alex said in his person like",
    "start": "1952320",
    "end": "1959200"
  },
  {
    "text": "we're using cloud kms as an example but you can use any key management system that supports asymmetric cryptography so",
    "start": "1959200",
    "end": "1965679"
  },
  {
    "text": "like there's no reason you couldn't use vaults transit back-end to also do this like signing operations",
    "start": "1965679",
    "end": "1971840"
  },
  {
    "text": "we just chose to use cloud kms because it's what we're familiar with",
    "start": "1971840",
    "end": "1977840"
  },
  {
    "text": "um do you see any problems with running the web hook inside the same cluster where",
    "start": "1979840",
    "end": "1986799"
  },
  {
    "text": "decryption is happening",
    "start": "1986799",
    "end": "1991840"
  },
  {
    "text": "it's an interesting question um",
    "start": "1993919",
    "end": "2004559"
  },
  {
    "text": "i'm not sure i i think i think",
    "start": "2004559",
    "end": "2009278"
  },
  {
    "text": "i think it the the question depends on i think the answer depends on uh again this comes down to the first",
    "start": "2009600",
    "end": "2016799"
  },
  {
    "text": "secret problem how would basically how would the uh web hook authenticate",
    "start": "2016799",
    "end": "2022000"
  },
  {
    "text": "to cloud kms so obviously you need some sort of uh token or some other mechanism for",
    "start": "2022000",
    "end": "2028559"
  },
  {
    "text": "for webhook to authenticate to call um or any other kms system for that",
    "start": "2028559",
    "end": "2033840"
  },
  {
    "text": "matter and that may represent a problem like if for example if you uh dropped a secret on the disk an attacker",
    "start": "2033840",
    "end": "2040320"
  },
  {
    "text": "managed to compromise the disk uh on the control plane of kubernetes control plane we were presumably running that web hook",
    "start": "2040320",
    "end": "2047679"
  },
  {
    "text": "then then it is a problem so so i think it is important to look at the",
    "start": "2047679",
    "end": "2053760"
  },
  {
    "text": "the authentication mechanism between the cl uh between the web hook and cloud kms and i alluded in",
    "start": "2053760",
    "end": "2061599"
  },
  {
    "text": "my presentation i alluded to the fact that we are recommending to use",
    "start": "2061599",
    "end": "2066638"
  },
  {
    "text": "underlying security mechanisms provided by your for example cloud provider or your virtualization provider like for example",
    "start": "2066639",
    "end": "2073599"
  },
  {
    "text": "i showed that we could use a service account which is exposed by",
    "start": "2073599",
    "end": "2078800"
  },
  {
    "text": "the hypervisor in gke or sorry rather google google compute engine in other",
    "start": "2078800",
    "end": "2085760"
  },
  {
    "text": "words that token that allows the web hook to authenticate to cloud kms is only available in memory and it is",
    "start": "2085760",
    "end": "2093358"
  },
  {
    "text": "only available when the the vm is running in other words like attacker would actually need to",
    "start": "2093359",
    "end": "2098640"
  },
  {
    "text": "compromise gain root access on the on the control plane which by that time",
    "start": "2098640",
    "end": "2103920"
  },
  {
    "text": "basically the game is over anyway uh so in other words the it's it's important to consider how you",
    "start": "2103920",
    "end": "2110880"
  },
  {
    "text": "set up authentication between the uh webhook and cloud kms and if you manage to ensure that trust",
    "start": "2110880",
    "end": "2117680"
  },
  {
    "text": "is based either in hardware or at least it is externalized to the underlying platform like",
    "start": "2117680",
    "end": "2124320"
  },
  {
    "text": "hypervisor then i think it is safe to do so otherwise uh certainly there are some",
    "start": "2124320",
    "end": "2129839"
  },
  {
    "text": "risks involved in in running them and basically on the same on the same blocks",
    "start": "2129839",
    "end": "2136160"
  },
  {
    "text": "um so i think we're out of time um i'll defer to the moderators if we",
    "start": "2137200",
    "end": "2142880"
  },
  {
    "text": "have time for one more or not they said sure okay um so",
    "start": "2142880",
    "end": "2150079"
  },
  {
    "text": "uh in the scenario described uh this is number 17. the cereal",
    "start": "2150079",
    "end": "2155200"
  },
  {
    "text": "describer the secret is available unencrypted on the cluster which is a weaker position compared to",
    "start": "2155200",
    "end": "2160240"
  },
  {
    "text": "the sidecar in it container approach to decrypting at runtime can you contrast this over runtime decryption which is preferred",
    "start": "2160240",
    "end": "2167839"
  },
  {
    "text": "so the the point we're making is that in this world the secret is stored in plain text",
    "start": "2167839",
    "end": "2173920"
  },
  {
    "text": "in etsy d so what we would recommend is that you go watch the talk that alex and i have linked",
    "start": "2173920",
    "end": "2178960"
  },
  {
    "text": "on the slide on the screen where there's actually a solution by which we can do application layer encryption so the secrets are never in plain text in std",
    "start": "2178960",
    "end": "2186560"
  },
  {
    "text": "and in that case the only difference is where like who owns the secret does the",
    "start": "2186560",
    "end": "2192160"
  },
  {
    "text": "application own the secret in which case you want to do run time decryption or does kubernetes own the",
    "start": "2192160",
    "end": "2197280"
  },
  {
    "text": "secret and do you trust the kubernetes api server at which point the kubernetes api server owns the secret",
    "start": "2197280",
    "end": "2202880"
  },
  {
    "text": "in this presentation because we're doing uh i don't know i'll call it schedule time",
    "start": "2202880",
    "end": "2207920"
  },
  {
    "text": "decryption um the kubernetes api server owns the secret and you're relying on like our",
    "start": "2207920",
    "end": "2214000"
  },
  {
    "text": "back and the hackles to make sure that only the right pods and services have access to it",
    "start": "2214000",
    "end": "2219119"
  },
  {
    "text": "whereas if you do run time decryption you're basically saying that the application or the pod owns the secret and you're relying on",
    "start": "2219119",
    "end": "2225280"
  },
  {
    "text": "something like workload identity or pod identity to authenticate and provide that first secret to access the rest of the secrets alex",
    "start": "2225280",
    "end": "2232720"
  },
  {
    "text": "do you have anything to add or no absolutely yeah no you answered it perfectly well perfectly correctly i",
    "start": "2232720",
    "end": "2239280"
  },
  {
    "text": "think architecturally if you think about the i believe the approach suggested in the question",
    "start": "2239280",
    "end": "2245599"
  },
  {
    "text": "is to to delay decryption up until the the the l the last point possible",
    "start": "2245599",
    "end": "2252320"
  },
  {
    "text": "basically keep the secret encryption until the last basically millisecond before it actually is needed",
    "start": "2252320",
    "end": "2258400"
  },
  {
    "text": "uh so we definitely think that's a that's a good approach the pro the and if you are willing to change",
    "start": "2258400",
    "end": "2264560"
  },
  {
    "text": "your applications and basically introduce a site basically take the web hook uh like the go into the github take the",
    "start": "2264560",
    "end": "2271920"
  },
  {
    "text": "web hook and basically create a sidecar out of this like using the same logic if you're willing to",
    "start": "2271920",
    "end": "2277520"
  },
  {
    "text": "make that change to the application uh then that would have better security property i think because of the delayed because",
    "start": "2277520",
    "end": "2284320"
  },
  {
    "text": "you you're basically delaying the encryption until the last the last possible point yeah i think um",
    "start": "2284320",
    "end": "2290240"
  },
  {
    "text": "i think what we've just kind of seen from customers is that the people writing the code might be different than the",
    "start": "2290240",
    "end": "2296640"
  },
  {
    "text": "people who are writing the pod spec definition which might be different than the ci cd system the ci cd system that's deploying it",
    "start": "2296640",
    "end": "2302800"
  },
  {
    "text": "that's why we focused a lot on personas to try to really iron out exactly what we're talking about and who does",
    "start": "2302800",
    "end": "2308160"
  },
  {
    "text": "what you know in a world where you're the kubernetes admin and the cluster admin and the software developer then by all means like run",
    "start": "2308160",
    "end": "2314640"
  },
  {
    "text": "this as a sidecar but if you imagine that you're at a larger or you know or talk directly to the secret manager",
    "start": "2314640",
    "end": "2320160"
  },
  {
    "text": "if you're at a large organization where you know your job is to just write code and you don't even know that it's being deployed on kubernetes right you're just",
    "start": "2320160",
    "end": "2326640"
  },
  {
    "text": "writing some ruby code or some go code and eventually it gets deployed on kubernetes it's a lot to ask that",
    "start": "2326640",
    "end": "2332160"
  },
  {
    "text": "software developer to understand that complexity and you know write all of the the yaml and configuration whereas um",
    "start": "2332160",
    "end": "2339839"
  },
  {
    "text": "you know this approach that we've outlined here kind of meets in the middle of like security and developer experience",
    "start": "2339839",
    "end": "2347680"
  },
  {
    "text": "cool well i think that's all the time that we have for questions",
    "start": "2349839",
    "end": "2355520"
  },
  {
    "text": "thank you all so much and thank you",
    "start": "2355520",
    "end": "2360720"
  }
]