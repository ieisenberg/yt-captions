[
  {
    "start": "0",
    "end": "109000"
  },
  {
    "text": "all right let's go ahead and get started i'd like to thank everyone who's joining us today welcome to today's cncf webinar dapper",
    "start": "15599",
    "end": "22000"
  },
  {
    "text": "lego for microservices i'm karen chu community manager at microsoft and cncf ambassador",
    "start": "22000",
    "end": "28320"
  },
  {
    "text": "i'll be moderating today's webinar and we'd like to welcome our presenter today mark charming principal uh program",
    "start": "28320",
    "end": "35440"
  },
  {
    "text": "manager at microsoft and before we get started just a few housekeeping items",
    "start": "35440",
    "end": "40559"
  },
  {
    "text": "during the webinar you are not able to talk as an attendee there is a q a box at the bottom of your",
    "start": "40559",
    "end": "46399"
  },
  {
    "text": "screen please feel free to drop in your questions there and we'll get through as many as we can at the end",
    "start": "46399",
    "end": "51840"
  },
  {
    "text": "this is an official webinar of the cncf and as such is subject to the subject to the cncf",
    "start": "51840",
    "end": "57520"
  },
  {
    "text": "code of conduct please do not add anything to the chat or questions that would be in violation of the code of conduct",
    "start": "57520",
    "end": "63359"
  },
  {
    "text": "basically just please be respectful of all your fellow participants and presenters please also note that the recordings and",
    "start": "63359",
    "end": "69760"
  },
  {
    "text": "slides will be posted later today to the cncf webinar page at cncf dot io slash webinars and with",
    "start": "69760",
    "end": "76320"
  },
  {
    "text": "that i will hand it over to mark to kick off today's presentation thank you karen hopefully everybody can",
    "start": "76320",
    "end": "83360"
  },
  {
    "text": "see the screen so in today's session we're going to do a kind of quick overview of the project",
    "start": "83360",
    "end": "88400"
  },
  {
    "text": "drivers what kind of drove us to create dapper reviewed the key capabilities",
    "start": "88400",
    "end": "94240"
  },
  {
    "text": "that dapper has we're going to do a short demo on a service composition using dapper in a kind of event",
    "start": "94240",
    "end": "99680"
  },
  {
    "text": "processing application i'm going to cover the project status and roadmap on the end and hopefully there's going to be about 10",
    "start": "99680",
    "end": "105680"
  },
  {
    "text": "15 minutes on the end to do a q a so let's get going uh so before i want to go into the actual over damper i want",
    "start": "105680",
    "end": "112159"
  },
  {
    "start": "109000",
    "end": "197000"
  },
  {
    "text": "to review some of the kind of things that drove us to create uh dapper and what it's trying to solve um",
    "start": "112159",
    "end": "118320"
  },
  {
    "text": "i think there's many different uh reasons for that but i think they boil down to three things i think",
    "start": "118320",
    "end": "123600"
  },
  {
    "text": "um too often developers nowadays they're step one in writing any new application they have to decide where",
    "start": "123600",
    "end": "130000"
  },
  {
    "text": "this where this application is going to run because moving that application later to a different platform will often require a complete rewrite",
    "start": "130000",
    "end": "137280"
  },
  {
    "text": "the other thing is that these total or complete platforms do help",
    "start": "137280",
    "end": "143200"
  },
  {
    "text": "and they kind of solve holistically a lot of different problems but because you have to kind of buy in 100 into into",
    "start": "143200",
    "end": "150879"
  },
  {
    "text": "using them they tend to kind of evolve slower and over time kind of drift away from what's",
    "start": "150879",
    "end": "156640"
  },
  {
    "text": "considered to be a modern architecture and as a result in the third point um the in the average company today",
    "start": "156640",
    "end": "163120"
  },
  {
    "text": "i've spent over the last year probably talking to i don't know 30 40 different companies out there and developers in",
    "start": "163120",
    "end": "168720"
  },
  {
    "text": "those companies the um the average developer the gap between what the",
    "start": "168720",
    "end": "173760"
  },
  {
    "text": "existing application looks like and what it's considered to be a modern application in the community is",
    "start": "173760",
    "end": "180080"
  },
  {
    "text": "increasingly larger and larger and it's not common to find companies that have i don't know 1500 to 2000 applications",
    "start": "180080",
    "end": "186400"
  },
  {
    "text": "that they want to modernize but they want to do it all in one split move so these are kind of the",
    "start": "186400",
    "end": "191760"
  },
  {
    "text": "things that set up the context for dapper and the type of things that we would like to solve for uh for the developers so let's go into",
    "start": "191760",
    "end": "199040"
  },
  {
    "start": "197000",
    "end": "262000"
  },
  {
    "text": "the upper um first of all uh just a short overview doppler stands for distributed",
    "start": "199040",
    "end": "204159"
  },
  {
    "text": "application runtime yes we've abbreviated three words into four letters um i know it was hard but we've done it in",
    "start": "204159",
    "end": "210400"
  },
  {
    "text": "a plain english dopper is really an event-driven application it's portable runtime that helps developers",
    "start": "210400",
    "end": "215519"
  },
  {
    "text": "build distributed applications regardless when they run them whether it's a bare metal cloud",
    "start": "215519",
    "end": "221440"
  },
  {
    "text": "edge devices and i mean actually edge devices like raspberry pi or something the the runtime is kind of",
    "start": "221440",
    "end": "227200"
  },
  {
    "text": "independent of that it's an open source project it's hosted on github under mit license",
    "start": "227200",
    "end": "232799"
  },
  {
    "text": "and it has a very open governance we just recently tweeted recently wrote about it about a",
    "start": "232799",
    "end": "238159"
  },
  {
    "text": "transition to open governance and the commitment to vendor neutral foundation",
    "start": "238159",
    "end": "243280"
  },
  {
    "text": "for dapper throughout the presentation you're going to see some qr codes they have posted in here that will have",
    "start": "243280",
    "end": "248720"
  },
  {
    "text": "direct links to places where you can actually learn more about the thing that i'm talking at that given time in this",
    "start": "248720",
    "end": "254239"
  },
  {
    "text": "case it's a link to our blog post that we just uh that i just mentioned so that's kind of what those qr scores",
    "start": "254239",
    "end": "260560"
  },
  {
    "text": "stands for there all right a little overview of kind of where we are with dapper today uh less than a year it was october 2019",
    "start": "260560",
    "end": "269120"
  },
  {
    "start": "262000",
    "end": "322000"
  },
  {
    "text": "when we announced the upper so we've had 11 releases as of this am i'm",
    "start": "269120",
    "end": "274160"
  },
  {
    "text": "happy to say and i think we've landed uh the 11th uh release of dapper or 11 major release so",
    "start": "274160",
    "end": "280479"
  },
  {
    "text": "vu 011 there's a decent number of image pools that actually signals a real live usage",
    "start": "280479",
    "end": "286160"
  },
  {
    "text": "so this is not just the kind of things that it's out there and sitting but people using this in real life",
    "start": "286160",
    "end": "291600"
  },
  {
    "text": "we have 70 plus different components that cover pretty much the entire cncf data and messaging",
    "start": "291600",
    "end": "297199"
  },
  {
    "text": "spectrum of of the map that you often see and and more about those components in a minute",
    "start": "297199",
    "end": "302560"
  },
  {
    "text": "and there's a growing number of also contributors which validates the sense of broad community and helps us kind of drive uh",
    "start": "302560",
    "end": "310639"
  },
  {
    "text": "the direction of the project as a consensus of the overall community and of course the all",
    "start": "310639",
    "end": "316080"
  },
  {
    "text": "important stars that we all know are the critical to any open source project i'm being sarcastic here so what are",
    "start": "316080",
    "end": "323280"
  },
  {
    "start": "322000",
    "end": "463000"
  },
  {
    "text": "some of the kind of uh principles that there are behind dapper so first of all uh is no limitations with regards to the",
    "start": "323280",
    "end": "329840"
  },
  {
    "text": "language or framework if if uh if a new language come out comes up tomorrow um",
    "start": "329840",
    "end": "335039"
  },
  {
    "text": "something like you know i don't know i can't even venture to think of what that would be we should be",
    "start": "335039",
    "end": "340240"
  },
  {
    "text": "able to run if you can start it if as a process we should be able to run it inside of dapper the other thing is that there is maximum",
    "start": "340240",
    "end": "346800"
  },
  {
    "text": "emphasis around reuse and of those building blocks as we refer to them and again more about those two but those are",
    "start": "346800",
    "end": "352639"
  },
  {
    "text": "a la carte opt-in mechanisms that you can use to kind of",
    "start": "352639",
    "end": "357680"
  },
  {
    "text": "bring in certain capabilities that are common in modern distributed applications those when those building blocks are",
    "start": "357680",
    "end": "364800"
  },
  {
    "text": "when the available building blocks don't meet your needs or when you want to expand the functionality of that",
    "start": "364800",
    "end": "370400"
  },
  {
    "text": "building block dapper provides a facility for you to kind of add an additional capability or expand",
    "start": "370400",
    "end": "376240"
  },
  {
    "text": "or change the implementation which is very important if you want to be able to kind of allow people to uh",
    "start": "376240",
    "end": "381680"
  },
  {
    "text": "scale and grow their application with their demand um at the core of dapper is also this",
    "start": "381680",
    "end": "388639"
  },
  {
    "text": "well documented eight set of apis that are that provide a parity across multiple protocols and runtimes",
    "start": "388639",
    "end": "394400"
  },
  {
    "text": "so grpc or http protocol doesn't matter the the shape of the api the functionality",
    "start": "394400",
    "end": "400479"
  },
  {
    "text": "is is the same even though the protocols are different and it runs like i said before around greater kubernetes as well as any other",
    "start": "400479",
    "end": "406800"
  },
  {
    "text": "um infrastructure where it can be like a standalone process we've done this on bare metals",
    "start": "406800",
    "end": "412560"
  },
  {
    "text": "we've done it on raspberry pis like i was talking about um data center customers data center wherever you can get kubernetes for",
    "start": "412560",
    "end": "418960"
  },
  {
    "text": "example it will do and it's also supporting multiple architecture so intel arm um macklin linux and windows",
    "start": "418960",
    "end": "426240"
  },
  {
    "text": "um you can uh get either the um readily available version of the opera",
    "start": "426240",
    "end": "431360"
  },
  {
    "text": "or just compiled for those two and and and the last thing is the doctor",
    "start": "431360",
    "end": "436720"
  },
  {
    "text": "really tries to meet the developers where they are the investment that you've done in learning particular language java.net",
    "start": "436720",
    "end": "442560"
  },
  {
    "text": "python whatever that may be we want to make sure that you feel at home in in kind of natural idiomatic is just",
    "start": "442560",
    "end": "448560"
  },
  {
    "text": "a fancy term for natural to you that should make you effective",
    "start": "448560",
    "end": "453759"
  },
  {
    "text": "on day one there is no courses required there is no certification use it incrementally start small and",
    "start": "453759",
    "end": "460960"
  },
  {
    "text": "then build from there so hopefully that will give you a good background where dapper was going kind of logically and we'll go deeper into",
    "start": "460960",
    "end": "467440"
  },
  {
    "text": "each one of those but logically dapper uh at run time kind of exposes those",
    "start": "467440",
    "end": "472720"
  },
  {
    "text": "apis like i was saying http and grpc these apis give you access to the most common",
    "start": "472720",
    "end": "478319"
  },
  {
    "text": "usage patterns that we've seen in distributed applications and we generalize them into something",
    "start": "478319",
    "end": "483520"
  },
  {
    "text": "that can be consistent to you as a developer but yet flexible underneath",
    "start": "483520",
    "end": "488560"
  },
  {
    "text": "so you can plug specific implementation of that and we'll talk about those in a second too and we refer to those as building blocks",
    "start": "488560",
    "end": "494639"
  },
  {
    "text": "and you will hear me saying building block build black throughout the presentation and uh",
    "start": "494639",
    "end": "500560"
  },
  {
    "text": "when combined they will provide like an open programming model that you can start today very small and then move",
    "start": "500560",
    "end": "506879"
  },
  {
    "text": "from environments change your mind and apply these config through configuration without rebuilding",
    "start": "506879",
    "end": "512320"
  },
  {
    "text": "your application so hopefully never again we hear about somebody uh needing to move 1500 application in",
    "start": "512320",
    "end": "517599"
  },
  {
    "text": "once we move to a new platform so more on those building blocks going",
    "start": "517599",
    "end": "522640"
  },
  {
    "start": "520000",
    "end": "750000"
  },
  {
    "text": "deeper into there um these blocks are they're independent so",
    "start": "522640",
    "end": "528560"
  },
  {
    "text": "they're not in there's no dependency between each one of those blocks so we let's go through those one by one service to service invocation or it's",
    "start": "528560",
    "end": "536320"
  },
  {
    "text": "it's a basically a reverse proxy like api for communication between multiple services within your application so if",
    "start": "536320",
    "end": "542160"
  },
  {
    "text": "you're building microservices you're building a number of different services inside of",
    "start": "542160",
    "end": "547519"
  },
  {
    "text": "something that's considered to be an application and for you to be able to dynamically discover those services and",
    "start": "547519",
    "end": "553440"
  },
  {
    "text": "connect to them that's where dapper comes in the other common thing that we see pretty much is",
    "start": "553440",
    "end": "558560"
  },
  {
    "text": "state management think about durable key values object store like s3 or gcs",
    "start": "558560",
    "end": "564480"
  },
  {
    "text": "that gives you this put get verbs capabilities that allows you to",
    "start": "564480",
    "end": "570320"
  },
  {
    "text": "kind of query by by state the shape of those apis is pretty consistent yeah they have",
    "start": "570320",
    "end": "576640"
  },
  {
    "text": "different functional capabilities but to large degree we can give you a very consistent api to that",
    "start": "576640",
    "end": "582800"
  },
  {
    "text": "uh to managing your state in your application with regards to pops up this is all about messaging within",
    "start": "582800",
    "end": "588480"
  },
  {
    "text": "application there is um you know a different perspective on what mark mark microservices should be doing they",
    "start": "588480",
    "end": "595279"
  },
  {
    "text": "should be servicing to service invocation directly or they should be in synchronous through pops up the upper provides you both of",
    "start": "595279",
    "end": "601120"
  },
  {
    "text": "those so if you're looking for a messaging between your application asynchronous messaging between applications you can use pops up that's built in and",
    "start": "601120",
    "end": "608079"
  },
  {
    "text": "you can plot the specific implementation underneath of that so if you want to do like a fanouts",
    "start": "608079",
    "end": "613519"
  },
  {
    "text": "pattern or a fan in uh super easy to do that and there's a exact",
    "start": "613519",
    "end": "618640"
  },
  {
    "text": "at least once uh delivery semantics so you don't have to worry about kind of events being lost uh resource",
    "start": "618640",
    "end": "625600"
  },
  {
    "text": "binding is kind of one of those bindings that one of those building blocks allows us to extend the",
    "start": "625600",
    "end": "630720"
  },
  {
    "text": "functionality of doppler consistently so there think of those as a connector to the uh to the outside world to other",
    "start": "630720",
    "end": "638480"
  },
  {
    "text": "resources that are not inside of your runtime you can trigger your code based on external events when they",
    "start": "638480",
    "end": "644560"
  },
  {
    "text": "when they run when they kind of happen outside of your cluster or outside of your environment and you can send data from your",
    "start": "644560",
    "end": "650880"
  },
  {
    "text": "application to outside resources actors and i'll go through each one of those a little deeper but trying to",
    "start": "650880",
    "end": "656959"
  },
  {
    "text": "provide a little summary here actors very much like an independent unit of distributed state and single threaded",
    "start": "656959",
    "end": "662560"
  },
  {
    "text": "compute capability so if you're thinking of something that is going to require high density that's a great great kind of category",
    "start": "662560",
    "end": "669040"
  },
  {
    "text": "for that there are some concerns you have to be aware of around a single thread thready threading architecture but we'll",
    "start": "669040",
    "end": "675360"
  },
  {
    "text": "talk about in a second and observability it very much all about automatic uh kind of insight into what your",
    "start": "675360",
    "end": "681920"
  },
  {
    "text": "application is doing so capturing the call graph of of all the invocation across graph",
    "start": "681920",
    "end": "687440"
  },
  {
    "text": "across dapper and the telemetry with regards to those metrics that are related to how the applications are",
    "start": "687440",
    "end": "694480"
  },
  {
    "text": "responding how many times how long did it take and in tracing of the invocations across multiple services if",
    "start": "694480",
    "end": "701519"
  },
  {
    "text": "you're talking about microservices you probably have a call stock that involves four or five ten put even more microservices and",
    "start": "701519",
    "end": "708560"
  },
  {
    "text": "being able to look at them as a unit helps you kind of debug those issues and understand the bottlenecks",
    "start": "708560",
    "end": "716000"
  },
  {
    "text": "and we have uh secrets we've all heard about uh you know these leaking all the time what dapper",
    "start": "716000",
    "end": "721680"
  },
  {
    "text": "is trying to do is give you a very much opaque get api to the secret management that could be backed up by very robust set of",
    "start": "721680",
    "end": "728720"
  },
  {
    "text": "secret management solutions hashicorp vold google kms and many other ones and each",
    "start": "728720",
    "end": "734800"
  },
  {
    "text": "one of those building blocks has n number of implementations underneath them which means that you can choose the kind",
    "start": "734800",
    "end": "740880"
  },
  {
    "text": "of optimal use case per service or per application and of what you want to use to be",
    "start": "740880",
    "end": "747360"
  },
  {
    "text": "implementing these build these building blocks so let's kind of talk about the",
    "start": "747360",
    "end": "752800"
  },
  {
    "start": "750000",
    "end": "830000"
  },
  {
    "text": "architecture so uh regardless if you run on kubernetes bar metal vm doppler uses this",
    "start": "752800",
    "end": "758720"
  },
  {
    "text": "notion of a sidecar and yes i know it's okay sidecar is kind of correlated often with",
    "start": "758720",
    "end": "763920"
  },
  {
    "text": "kubernetes but in this case dapper uses this sidecar approach regardless where you're running",
    "start": "763920",
    "end": "771360"
  },
  {
    "text": "the the op call the app calls into dapper sidecar and dapper kind of execute the",
    "start": "771360",
    "end": "778639"
  },
  {
    "text": "functionality on behalf of your application this helps lower the utilization and offload il",
    "start": "778639",
    "end": "784560"
  },
  {
    "text": "often in some cases can actually improve the performance of your application all services invocations are encrypted",
    "start": "784560",
    "end": "790560"
  },
  {
    "text": "over mtls with automatic certificate rotation including situations where you up",
    "start": "790560",
    "end": "796079"
  },
  {
    "text": "upgrading the actual dapper itself and with this release that we announced",
    "start": "796079",
    "end": "802160"
  },
  {
    "text": "earlier today we also added a spf identity for service invocation and granule access controls including all",
    "start": "802160",
    "end": "809040"
  },
  {
    "text": "policies if you if you like regal yes there's overlap with many mesh uh",
    "start": "809040",
    "end": "815440"
  },
  {
    "text": "meshes out there uh as you probably have already realized if you are uh if you really really are",
    "start": "815440",
    "end": "821920"
  },
  {
    "text": "committed to using eco or linker d you you can just disable the mtls and use dapper in kind of conjunction with those",
    "start": "821920",
    "end": "828800"
  },
  {
    "text": "with those meshes so how do i get one of those magical side cards that does everything",
    "start": "828800",
    "end": "834959"
  },
  {
    "start": "830000",
    "end": "900000"
  },
  {
    "text": "regardless where i run well if you're running on kubernetes that's as simple as decorating a deployment with few annotations and i bought",
    "start": "834959",
    "end": "841360"
  },
  {
    "text": "that text over here there's many of those annotations you can add but really only two are required you say enable",
    "start": "841360",
    "end": "847279"
  },
  {
    "text": "adapter and then you also tell me tell doctor what is the id by which you want this application to be",
    "start": "847279",
    "end": "853360"
  },
  {
    "text": "used which comes into servicing location and many other things dapper will automatically inject",
    "start": "853360",
    "end": "859519"
  },
  {
    "text": "a sidecar into the pod so it will look very much like the experience that you",
    "start": "859519",
    "end": "864639"
  },
  {
    "text": "had when you were developing using dapper on a local machine it would in fact your application will know anything different",
    "start": "864639",
    "end": "871040"
  },
  {
    "text": "in a standalone mode if you're running outside of kubernetes or running on any other infrastructure you can run it",
    "start": "871040",
    "end": "876240"
  },
  {
    "text": "using the dapper run command in a self-hosted mode as we refer to it uses dapper run and regardless of what",
    "start": "876240",
    "end": "882880"
  },
  {
    "text": "the process is i've demonstrated three or four in here it could be uh directly into runtimes so",
    "start": "882880",
    "end": "888399"
  },
  {
    "text": "go or node or net or whatever they might be or it could be actually an executable",
    "start": "888399",
    "end": "893760"
  },
  {
    "text": "that's already kind of compiled into a machine code or something like that it's a lot of flexibility there with regards to kind",
    "start": "893760",
    "end": "901120"
  },
  {
    "start": "900000",
    "end": "959000"
  },
  {
    "text": "of dapper and kubernetes i think this is a good one to go a little deeper given cncf and kubernetes we try to keep",
    "start": "901120",
    "end": "907120"
  },
  {
    "text": "dapper as light as possible so there's really only two crds there's four system codes although we",
    "start": "907120",
    "end": "912320"
  },
  {
    "text": "can we can bring it down to about two if if you're some uh not using some of the features so",
    "start": "912320",
    "end": "917839"
  },
  {
    "text": "the first one is the sidecar injector this is what checks for the annotations and inject the sidecar into your pod",
    "start": "917839",
    "end": "924079"
  },
  {
    "text": "century generates certificates uh for the sidecar implements rotation strategy",
    "start": "924079",
    "end": "929600"
  },
  {
    "text": "the operator tracks deployments and deals with things like resource discovery and component",
    "start": "929600",
    "end": "934959"
  },
  {
    "text": "registry and actor placement deals with identifying or finding where the dappers",
    "start": "934959",
    "end": "940720"
  },
  {
    "text": "are located the actors are located and then kind of providing metadata around us more about actors in a minute",
    "start": "940720",
    "end": "946959"
  },
  {
    "text": "because they can be rehydrated or all over the place depending on where the upper so optimal deployments",
    "start": "946959",
    "end": "952320"
  },
  {
    "text": "for those there's also health apis and live probes that you would normally see in any kind",
    "start": "952320",
    "end": "957519"
  },
  {
    "text": "of kubernetes deployment so let's go into those building blocks a little deeper and kind of show them in a",
    "start": "957519",
    "end": "962880"
  },
  {
    "start": "959000",
    "end": "1048000"
  },
  {
    "text": "real world like examples so starting with the key value state management",
    "start": "962880",
    "end": "968079"
  },
  {
    "text": "it is distributed object store for your applications what that means is that it outlives the session of the",
    "start": "968079",
    "end": "975519"
  },
  {
    "text": "application if your application goes out of scope it can be restarted somewhere else and will have access to the same um",
    "start": "975519",
    "end": "982480"
  },
  {
    "text": "content same state it has a concurrency configuration options for",
    "start": "982480",
    "end": "989279"
  },
  {
    "text": "each operation so you can do a first or last wins if you're looking around have concerns around",
    "start": "989279",
    "end": "995120"
  },
  {
    "text": "concurrency has similar configuration for consistency with regards to whether it's a strong or optimistic uh",
    "start": "995120",
    "end": "1001600"
  },
  {
    "text": "consistency and it's configurable retry policy which means it's super granule it's not only on the entire service but it's an",
    "start": "1001600",
    "end": "1008079"
  },
  {
    "text": "operation it can be invoked per retry per operation it's configurable",
    "start": "1008079",
    "end": "1013120"
  },
  {
    "text": "we also support bulk and transaction operations for situations where you want to save a number of records or if you uh",
    "start": "1013120",
    "end": "1021440"
  },
  {
    "text": "trying to retrieve an a number of records the back state for those is totally to you up to you there's",
    "start": "1021440",
    "end": "1028240"
  },
  {
    "text": "dapper supports i think check this morning about 12 of those so etcd redis cassandra gcp",
    "start": "1028240",
    "end": "1034240"
  },
  {
    "text": "cloud firestore aws dynamo there's n number of those configurations and",
    "start": "1034240",
    "end": "1039839"
  },
  {
    "text": "depending on what you prefer in the environment you might use those but the api which will be exposed to you",
    "start": "1039839",
    "end": "1044959"
  },
  {
    "text": "to use the state union application is consistent so how do you configure that for uh you",
    "start": "1044959",
    "end": "1051440"
  },
  {
    "start": "1048000",
    "end": "1122000"
  },
  {
    "text": "will see this throughout some um kind of highlights here we're using this notion of the components",
    "start": "1051440",
    "end": "1057360"
  },
  {
    "text": "components are in representations of n number of components can be kind of implementing a",
    "start": "1057360",
    "end": "1062640"
  },
  {
    "text": "particular building block in this case we see it's a component i call this corporate db but it could be",
    "start": "1062640",
    "end": "1069360"
  },
  {
    "text": "frankly anything it's a component of a type of state and in this case it's a mongodb so dapper provides these configuration",
    "start": "1069360",
    "end": "1076160"
  },
  {
    "text": "options for any number of those components that we've highlighted before 70 or some before",
    "start": "1076160",
    "end": "1081600"
  },
  {
    "text": "what it gives you access to is some metadata that you can use to configure the actual service itself",
    "start": "1081600",
    "end": "1086960"
  },
  {
    "text": "um including like you know the database and other things but once configured one registry in",
    "start": "1086960",
    "end": "1092400"
  },
  {
    "text": "dapper now is becoming available in your in your dapper api so you can",
    "start": "1092400",
    "end": "1097679"
  },
  {
    "text": "post to it by identifying the specific",
    "start": "1097679",
    "end": "1102639"
  },
  {
    "text": "component and save the data to this particular collection in in this case to database the",
    "start": "1102960",
    "end": "1109120"
  },
  {
    "text": "metadata is unique to a specific store so in this case this might have metadata that's",
    "start": "1109120",
    "end": "1114400"
  },
  {
    "text": "specific to if you were using xcd there might be additional parameters there and you will see the other options we",
    "start": "1114400",
    "end": "1120840"
  },
  {
    "text": "provided moving on to uh service discovery and invocation",
    "start": "1120840",
    "end": "1126080"
  },
  {
    "start": "1122000",
    "end": "1265000"
  },
  {
    "text": "so dapper like i said is a reverse proxy for you in vocation but that allows you to kind of locate the",
    "start": "1126080",
    "end": "1132000"
  },
  {
    "text": "services and invoke them using the assign id so in the previous example we used i don't forget what we use but if you",
    "start": "1132000",
    "end": "1138400"
  },
  {
    "text": "say for example my service is the id of your application you can start invoking from all you",
    "start": "1138400",
    "end": "1143520"
  },
  {
    "text": "other services within your application and and dapper will make sure you find the right",
    "start": "1143520",
    "end": "1148559"
  },
  {
    "text": "right instance the uh all of that is dynamic there is no configuration for this one because the",
    "start": "1148559",
    "end": "1154240"
  },
  {
    "text": "as you kind of started the services within dapper they all automatically are registered and the registry is managed",
    "start": "1154240",
    "end": "1159520"
  },
  {
    "text": "for you it works in kubernetes it works even across name spaces so you can cross the boundary of the",
    "start": "1159520",
    "end": "1165280"
  },
  {
    "text": "namespaces and you can invoke them over http or grpc so",
    "start": "1165280",
    "end": "1170320"
  },
  {
    "text": "regardless what your application is running on in this example we have a http application that it's calling into the grpc application",
    "start": "1170320",
    "end": "1176799"
  },
  {
    "text": "the api is consistent for that application dapper does the protocol translation so grpc to http or http or grpc all of",
    "start": "1176799",
    "end": "1184400"
  },
  {
    "text": "that is done behind the scene europe applications don't have to be aware of what the target is using uh like i said before invocations",
    "start": "1184400",
    "end": "1192960"
  },
  {
    "text": "are automatically retried on a call level which is more granule with more which with what you get normally from",
    "start": "1192960",
    "end": "1199280"
  },
  {
    "text": "the meshes uh all traffic between apps is over and tls the automatic it's automatic so there's zero downtime",
    "start": "1199280",
    "end": "1205840"
  },
  {
    "text": "even during the third uh rotation process and um and upgrades",
    "start": "1205840",
    "end": "1211039"
  },
  {
    "text": "and because now dapper also support uh provides the x 509 certificates we can do",
    "start": "1211039",
    "end": "1217600"
  },
  {
    "text": "spiffy identity across clusters for service implications so if you for example have one instance of dapper",
    "start": "1217600",
    "end": "1223840"
  },
  {
    "text": "running on gcp and another one on aws you can reliably and securely try to kind of connect them and invoke each",
    "start": "1223840",
    "end": "1229919"
  },
  {
    "text": "other doctor also have options for policy uh through annotations which kind of",
    "start": "1229919",
    "end": "1235280"
  },
  {
    "text": "obfuscates a lot of the complexity as well as for a proper upper oppa implementation for rego so if you",
    "start": "1235280",
    "end": "1241679"
  },
  {
    "text": "prefer you writing your applications in rego sorry policies in regal you can you can do that",
    "start": "1241679",
    "end": "1247440"
  },
  {
    "text": "all that comes with automatic telemetry you don't have to create spams uh us because dapper has the awareness",
    "start": "1247440",
    "end": "1253600"
  },
  {
    "text": "of how your applications are invoking each other that that parent trace id is",
    "start": "1253600",
    "end": "1259200"
  },
  {
    "text": "automatically injected and you can start kind of seeing the benefits i'm going to show you this during the demo later on another",
    "start": "1259200",
    "end": "1267280"
  },
  {
    "start": "1265000",
    "end": "1326000"
  },
  {
    "text": "building popular building block is pops up it really allows microservices to communicate with each other",
    "start": "1267280",
    "end": "1272880"
  },
  {
    "text": "so publishers the publisher has no knowledge of what the consumer is and consumers no idea",
    "start": "1272880",
    "end": "1278000"
  },
  {
    "text": "who published the data and dapper uses cncf cloud events to as a kind of envelope for those so wraps all those",
    "start": "1278000",
    "end": "1284240"
  },
  {
    "text": "events for you it provides kind of at least once consistency sorry provides at least",
    "start": "1284240",
    "end": "1289760"
  },
  {
    "text": "guarantees for your uh for your publishers so some of the common implementations for uh pops up inside of dapper",
    "start": "1289760",
    "end": "1297039"
  },
  {
    "text": "uh for open source would be like redis nuts kafka rabbitmq hazelcast",
    "start": "1297039",
    "end": "1302559"
  },
  {
    "text": "there's probably a missing bunch of other ones and for cloud search providers for azure it's like a service bus or event hub",
    "start": "1302559",
    "end": "1308480"
  },
  {
    "text": "for gcp is pop sub and for aws sqs and there's a couple other ones for each one of those",
    "start": "1308480",
    "end": "1313840"
  },
  {
    "text": "but whichever you want to use dapper provides you ability to scope those so your",
    "start": "1313840",
    "end": "1318880"
  },
  {
    "text": "applications can be limited to which topics for example which comp applications can use each one of those",
    "start": "1318880",
    "end": "1324559"
  },
  {
    "text": "components again very much like we've seen before with a",
    "start": "1324559",
    "end": "1330080"
  },
  {
    "text": "state exactly same component but this time instead of state we say pops up in this case i'm using redis",
    "start": "1330080",
    "end": "1336159"
  },
  {
    "text": "this is inside of the cluster so we're calling into a redis namespace fully qualified name and we the other",
    "start": "1336159",
    "end": "1342559"
  },
  {
    "text": "thing you're going to see here i'm going to talk a little more about secrets but you actually see that didn't include the password for red is a reference a password we'll talk about",
    "start": "1342559",
    "end": "1348880"
  },
  {
    "text": "how dapper kind of allows you to do it both programmatically and inside of configuration",
    "start": "1348880",
    "end": "1353919"
  },
  {
    "text": "but once once registering inside of dapper you get ability to um share post to these topics and",
    "start": "1353919",
    "end": "1361360"
  },
  {
    "text": "consumers can kind of subscribe to them there's two different ways to um subscribe to uh create subscriptions",
    "start": "1361360",
    "end": "1368799"
  },
  {
    "text": "inside of dapper you can do this programmatically where dapper queries your app for well-known endpoint and of for",
    "start": "1368799",
    "end": "1375200"
  },
  {
    "text": "subscription and this is kind of good for dynamic use cases where you want to kind of respond with a specific",
    "start": "1375200",
    "end": "1380559"
  },
  {
    "text": "configuration and the app responds with a array of number of different subscriptions where you tell us",
    "start": "1380559",
    "end": "1386960"
  },
  {
    "text": "to which component and topic you want to subscribe and what is the url you want us to send",
    "start": "1386960",
    "end": "1392400"
  },
  {
    "text": "you on doppler to send the data to that's great if you have awareness of dapper when you are writing this",
    "start": "1392400",
    "end": "1397919"
  },
  {
    "text": "application for situations where you already have applications that are aware of cloud events or",
    "start": "1397919",
    "end": "1403039"
  },
  {
    "text": "are expecting cloud events you can use declarative manner which dapper provides a crd for that allows you to subscribe to to",
    "start": "1403039",
    "end": "1411120"
  },
  {
    "text": "create subscriptions program through configuration so your application actually has zero",
    "start": "1411120",
    "end": "1416880"
  },
  {
    "text": "awareness of dapper it just says i i know cloud events give me cloud events and apple will send those uh to your",
    "start": "1416880",
    "end": "1422880"
  },
  {
    "text": "application um bindings like i said it's",
    "start": "1422880",
    "end": "1429600"
  },
  {
    "start": "1425000",
    "end": "1514000"
  },
  {
    "text": "kind of a way to extend the functionality of dapper uh and and there's so many of these out there i'm just gonna list a few and i",
    "start": "1429600",
    "end": "1435919"
  },
  {
    "text": "feel like i'm highlighting a couple of these consistently but i'm trying to create some variety we have two different flavors of binding there's",
    "start": "1435919",
    "end": "1442799"
  },
  {
    "text": "input and output bindings and the output binding can do bi-directional and i'll explain what that means for",
    "start": "1442799",
    "end": "1448559"
  },
  {
    "text": "input you can uh you can think of those as triggers so something will come from outside and",
    "start": "1448559",
    "end": "1454640"
  },
  {
    "text": "trigger your code and bring some data or maybe not uh and so kafka and all the data the kind",
    "start": "1454640",
    "end": "1461679"
  },
  {
    "text": "of eventing service systems out there are all are good use of kind of binding but we",
    "start": "1461679",
    "end": "1468080"
  },
  {
    "text": "can also have apis like twilio or twitter and so forth it really removes a lot of the complexity of your application",
    "start": "1468080",
    "end": "1474559"
  },
  {
    "text": "having have to have the drivers or sdks inside of your code and polling for that",
    "start": "1474559",
    "end": "1480000"
  },
  {
    "text": "basically application says i don't i don't know how this was configured but give me your",
    "start": "1480000",
    "end": "1485440"
  },
  {
    "text": "that event and i will do something with that it uh your application can be in grpc or http",
    "start": "1485440",
    "end": "1491200"
  },
  {
    "text": "it doesn't matter that event can be bound to you and switching between these bindings and runtime",
    "start": "1491200",
    "end": "1496799"
  },
  {
    "text": "is really as easy as changing configuration and in some cases relaunching the application so that perhaps handles a lot of the",
    "start": "1496799",
    "end": "1503360"
  },
  {
    "text": "retries and failure recovery for you and again none of that you have to write your application it kind of keeps your",
    "start": "1503360",
    "end": "1509760"
  },
  {
    "text": "code very lean and allows you to change your mind post deployment similarly in the output binding it",
    "start": "1509760",
    "end": "1516480"
  },
  {
    "start": "1514000",
    "end": "1548000"
  },
  {
    "text": "allows you to kind of invoke from your code to the outside world just like with the other ones we",
    "start": "1516480",
    "end": "1521600"
  },
  {
    "text": "have a number of these out there for different systems and services in fact i just saw a couple days ago",
    "start": "1521600",
    "end": "1528240"
  },
  {
    "text": "somebody just pr a ios notification binding so you can send events directly into your into your",
    "start": "1528240",
    "end": "1535039"
  },
  {
    "text": "phone if you're using ios um just like with input binding your your code is free of sdks",
    "start": "1535039",
    "end": "1541840"
  },
  {
    "text": "you can switch easily switch between bindings at runtime through configuration and all the retrieves are handled for you",
    "start": "1541840",
    "end": "1548320"
  },
  {
    "text": "so regardless if you're using input and bounce output binding approach the",
    "start": "1548320",
    "end": "1554880"
  },
  {
    "text": "configuration of that using component is exactly the same and at this point you've seen me show three different yamas that really",
    "start": "1554880",
    "end": "1560720"
  },
  {
    "text": "differ very differently very little they only have some metadata that's specific to in this case",
    "start": "1560720",
    "end": "1565840"
  },
  {
    "text": "for example kafka that differs and provides you ability to configure but the actual notion of configuring",
    "start": "1565840",
    "end": "1573120"
  },
  {
    "text": "your bindings inside of dapper is super consistent and easy regardless if you're running kubernetes or if you're running",
    "start": "1573120",
    "end": "1578720"
  },
  {
    "text": "on-prem that same file will work so in this case we have a kafka binding",
    "start": "1578720",
    "end": "1583760"
  },
  {
    "text": "that um defines a specific topic it could be n number of those for simplicity of demo just have one",
    "start": "1583760",
    "end": "1590480"
  },
  {
    "text": "um to which it's going to be used to on the input and for output we also have limit which",
    "start": "1590480",
    "end": "1596720"
  },
  {
    "text": "topic can be used to send data out of your application we support consumer group there's a number of other variables that kafka",
    "start": "1596720",
    "end": "1602400"
  },
  {
    "text": "provides uh but that kind of is the extent of that and then for input your application",
    "start": "1602400",
    "end": "1608559"
  },
  {
    "text": "would in this case the name of the component is my kafka your application the route in your",
    "start": "1608559",
    "end": "1613840"
  },
  {
    "text": "application would just have to expect to have a there should be a routing application called my kafka and dapper will post to",
    "start": "1613840",
    "end": "1620240"
  },
  {
    "text": "the put to that you also check before for options on that just to make sure",
    "start": "1620240",
    "end": "1626799"
  },
  {
    "text": "that you actually have the route so it doesn't start flooding you with data before you are ready for that and uh for",
    "start": "1626799",
    "end": "1633840"
  },
  {
    "text": "calling outside of your code into the outside world you're just using the consistent binding api with that same component and upper maps",
    "start": "1633840",
    "end": "1641039"
  },
  {
    "text": "all of that for you we talked we touched on secrets a little before but um",
    "start": "1641039",
    "end": "1647919"
  },
  {
    "start": "1643000",
    "end": "1689000"
  },
  {
    "text": "secrets are generally hard problem and we've all heard about leakage credentials out there doppler provides you with this api",
    "start": "1647919",
    "end": "1655279"
  },
  {
    "text": "that that is consistent regardless of which backend you use so i have logos for four or five four of those out",
    "start": "1655279",
    "end": "1661679"
  },
  {
    "text": "there there's other options too but these cert the systems are backing",
    "start": "1661679",
    "end": "1668000"
  },
  {
    "text": "dappers api behind the scene so you can manage the rotation strategy and all that over there and then dapper gives you this",
    "start": "1668000",
    "end": "1674080"
  },
  {
    "text": "consistent api that you can use both from um within your code through the same api so get for example",
    "start": "1674080",
    "end": "1681279"
  },
  {
    "text": "my secret it will return the secret but you can also use this inside of configuration and i'll talk about this",
    "start": "1681279",
    "end": "1686720"
  },
  {
    "text": "in a second so in this case we're using a hashicorp",
    "start": "1686720",
    "end": "1693279"
  },
  {
    "start": "1689000",
    "end": "1730000"
  },
  {
    "text": "vault secret store we've configured those with",
    "start": "1693279",
    "end": "1698559"
  },
  {
    "text": "a few configuration options there's a number of these again i'm just showing a few uh but you can",
    "start": "1698559",
    "end": "1704480"
  },
  {
    "text": "now invoke that api in dapper for secrets for specific password and you will get that value of",
    "start": "1704480",
    "end": "1711200"
  },
  {
    "text": "that but you can also use this inside of the configuration so what docker will do in this case you will substitute these secrets",
    "start": "1711200",
    "end": "1718880"
  },
  {
    "text": "kind of inline those secrets for you so your configuration is free of secrets you can check it into repository",
    "start": "1718880",
    "end": "1724080"
  },
  {
    "text": "and as you deploy to different environments your entire solution is configurable at around time",
    "start": "1724080",
    "end": "1730960"
  },
  {
    "start": "1730000",
    "end": "1832000"
  },
  {
    "text": "and observability is kind of a built-in building block",
    "start": "1730960",
    "end": "1736240"
  },
  {
    "text": "there's there's some configuration for it but what there's a lot of automatic things that happen and so i want to talk about few of those",
    "start": "1736240",
    "end": "1741919"
  },
  {
    "text": "first of all there's a ton of metrics that dapper gives you kind of a visibility into with regards to the",
    "start": "1741919",
    "end": "1747679"
  },
  {
    "text": "the measure values and the counts around time series monitors behavior of itself of that",
    "start": "1747679",
    "end": "1753760"
  },
  {
    "text": "sidecar as well as of your application and by default uses prometheus and grafana there is number of options to",
    "start": "1753760",
    "end": "1759840"
  },
  {
    "text": "switch into csp specific options like for example monitor on azure similarly with distributed tracing",
    "start": "1759840",
    "end": "1766320"
  },
  {
    "text": "it profiles and monitors the upper system services and the application it's important for",
    "start": "1766320",
    "end": "1771919"
  },
  {
    "text": "microservices because really if you don't have distributed tracing you don't know how things kind of work together and so i hope you identify bottlenecks",
    "start": "1771919",
    "end": "1779840"
  },
  {
    "text": "helps you identify some issues and failures and and because this um it's kind of",
    "start": "1779840",
    "end": "1785440"
  },
  {
    "text": "like a mesh like architecture it gives you these distributed traces automatically across the entire stack",
    "start": "1785440",
    "end": "1790960"
  },
  {
    "text": "so servicing location in or or bindings or or state or any whatever that may be you",
    "start": "1790960",
    "end": "1797520"
  },
  {
    "text": "get those traces automatically and i'll show you later but all of that is by default available in zipkin if you're deploying some kind",
    "start": "1797520",
    "end": "1803919"
  },
  {
    "text": "of open source centric solution in a csp environment you can use additional like application insights on azure for",
    "start": "1803919",
    "end": "1809039"
  },
  {
    "text": "example and similarly with logs you get fluency and elastic and kibana",
    "start": "1809039",
    "end": "1814399"
  },
  {
    "text": "you can substitute some of those things and ship you logs uh somewhere else",
    "start": "1814399",
    "end": "1819520"
  },
  {
    "text": "dapper injects bunch of metadata into your logs so you get like the type and the host name and component",
    "start": "1819520",
    "end": "1825440"
  },
  {
    "text": "name and app id addresses and bunch of other things that give you kind of more context for actually what happened there",
    "start": "1825440",
    "end": "1832399"
  },
  {
    "start": "1832000",
    "end": "1901000"
  },
  {
    "text": "right now actors as a building block it's like i said it's an object-oriented programming model like akka and orleans",
    "start": "1832880",
    "end": "1840880"
  },
  {
    "text": "uh provides durable framework for hosting your actors that are basically what what its",
    "start": "1840880",
    "end": "1846480"
  },
  {
    "text": "functionality here is it's a self-contained unit of code that you've delivered to dapper that has both the state and compute and",
    "start": "1846480",
    "end": "1852799"
  },
  {
    "text": "dapper manages the life cycle of that actor it's based for use cases with minimal io",
    "start": "1852799",
    "end": "1858559"
  },
  {
    "text": "because it's single threaded so if you start locking you basically like the entire solution but there is a lot of",
    "start": "1858559",
    "end": "1864720"
  },
  {
    "text": "benefits people can recognize through super high density i think the numbers have seen it's like",
    "start": "1864720",
    "end": "1870000"
  },
  {
    "text": "thousands of actors within a single pod and obviously this can scale horizontally and that permanence the",
    "start": "1870000",
    "end": "1876000"
  },
  {
    "text": "state of your actors offloads them when they're not used all of that is configurable it can rehydrate them somewhere",
    "start": "1876000",
    "end": "1882240"
  },
  {
    "text": "else with the right state and but because the actual model is kind of function of",
    "start": "1882240",
    "end": "1888080"
  },
  {
    "text": "the runtime itself dapper supports actors only in java.net and python",
    "start": "1888080",
    "end": "1893600"
  },
  {
    "text": "everything every other building blocks up to now i told you about it's 100 across all the frameworks of the",
    "start": "1893600",
    "end": "1899120"
  },
  {
    "text": "different languages um so at this point you're saying okay",
    "start": "1899120",
    "end": "1904159"
  },
  {
    "start": "1901000",
    "end": "1986000"
  },
  {
    "text": "this is great but there is a lot of urls and grpc endpoints and we have not moved",
    "start": "1904159",
    "end": "1910559"
  },
  {
    "text": "past that well um yes we done we pro you can always use the raw api",
    "start": "1910559",
    "end": "1915840"
  },
  {
    "text": "if you want to and in some languages there are dynamic it's kind of like a first-class citizen rest apis like in node.js",
    "start": "1915840",
    "end": "1922720"
  },
  {
    "text": "it's something you're already used to but we provide also a five sdks that we manage uh the dapper project management is",
    "start": "1922720",
    "end": "1929840"
  },
  {
    "text": "currently there's a number of those i know there's a ross there's c plus and a bunch of other ones",
    "start": "1929840",
    "end": "1935440"
  },
  {
    "text": "that the community manages too um so if one is missing that you would like to see",
    "start": "1935440",
    "end": "1940559"
  },
  {
    "text": "would love to have you kind of contribute and help working on that and they give you this",
    "start": "1940559",
    "end": "1946399"
  },
  {
    "text": "access to the same api and when we go into demo in a minute i'm going to show you how we can leverage that",
    "start": "1946399",
    "end": "1951519"
  },
  {
    "text": "to kind of simplify the application there's also integration into some of the frameworks",
    "start": "1951519",
    "end": "1956559"
  },
  {
    "text": "so for example functions or azure functions you know regardless of running on azure aks or another cluster",
    "start": "1956559",
    "end": "1964240"
  },
  {
    "text": "you have access to uh to those functions and if you're kind of into the model of just uh programming only at the function",
    "start": "1964240",
    "end": "1972159"
  },
  {
    "text": "unit you can kind of integrate it very easily into dapper and bind these configuration",
    "start": "1972159",
    "end": "1977519"
  },
  {
    "text": "options for different state and pops up very easily similarly with logic apps spring boot",
    "start": "1977519",
    "end": "1982799"
  },
  {
    "text": "asp.net core and others all right i think at this point let's go",
    "start": "1982799",
    "end": "1988399"
  },
  {
    "start": "1986000",
    "end": "2370000"
  },
  {
    "text": "into demo so um what i'm gonna do is",
    "start": "1988399",
    "end": "1993760"
  },
  {
    "text": "uh i'm gonna start with a uh actually no let's do a slight i'm",
    "start": "1993760",
    "end": "1999840"
  },
  {
    "text": "gonna walk you very quickly through the demo so we know where we are we're going to do way over engineer",
    "start": "1999840",
    "end": "2005039"
  },
  {
    "text": "application there's probably way simpler way to doing but to show kind of the capability i will i will show the three or four",
    "start": "2005039",
    "end": "2011279"
  },
  {
    "text": "different components inside of dapper so first of all we're going to use the binding for twitter to",
    "start": "2011279",
    "end": "2016399"
  },
  {
    "text": "create a subscription for a specific stream of tweets and we're gonna combine that",
    "start": "2016399",
    "end": "2023039"
  },
  {
    "text": "within the application and then persist each one of those tweets into a database",
    "start": "2023039",
    "end": "2028960"
  },
  {
    "text": "then we're gonna add a sentiment analysis api as an another doppler service that's",
    "start": "2028960",
    "end": "2034000"
  },
  {
    "text": "going to be using service to service invocation to score each one of those tweets sentiment so we're going to find if",
    "start": "2034000",
    "end": "2039679"
  },
  {
    "text": "they're negative positive or neutral or mixed sometimes and when we",
    "start": "2039679",
    "end": "2045039"
  },
  {
    "text": "score those the the tweet processor will also publish them onto a topic and eventually we'll bring",
    "start": "2045039",
    "end": "2051919"
  },
  {
    "text": "a ui application um that will show those tweets in a ui don't get excited my ui",
    "start": "2051919",
    "end": "2058000"
  },
  {
    "text": "foo is super weak so it's going to be very rudimentary application but it will allow you kind of see how we can subscribe to events and stream them",
    "start": "2058000",
    "end": "2064960"
  },
  {
    "text": "in this case over web sockets to the ui all right so let's now go to the application so couple things i want to",
    "start": "2064960",
    "end": "2070800"
  },
  {
    "text": "show here and obviously there's a lot of moving parts but the first thing is we're going to show the component for twitter",
    "start": "2070800",
    "end": "2076398"
  },
  {
    "text": "you see that even though i'm running on a local machine i'm using secrets and it's because in this case i'm using a one of those",
    "start": "2076399",
    "end": "2083040"
  },
  {
    "text": "developer friendly quick and dirty kind of secret stores which is a file store so in this case my secret store for",
    "start": "2083040",
    "end": "2090638"
  },
  {
    "text": "dapper is defined as a file that i'm hosting in my machine you can use environment variables as well",
    "start": "2090639",
    "end": "2096480"
  },
  {
    "text": "and on a local machine allows you to just kind of use those secrets when later on when we move to uh",
    "start": "2096480",
    "end": "2102000"
  },
  {
    "text": "something like kubernetes and i should show you how to deploy that you will actually use the secret uh the",
    "start": "2102000",
    "end": "2107280"
  },
  {
    "text": "kubernetes secrets because that's the kind of optimal use way of using there the other thing we're gonna do is uh",
    "start": "2107280",
    "end": "2112720"
  },
  {
    "text": "we're gonna define a state in this case i'm gonna use use redis for state as well as for pops up",
    "start": "2112720",
    "end": "2119839"
  },
  {
    "text": "so that nothing changes there super easy for your local development and we're going to run that these other",
    "start": "2119839",
    "end": "2126320"
  },
  {
    "text": "applications the other thing to kind of point out here is i'm actually using the dapper sdk this is for go",
    "start": "2126320",
    "end": "2132400"
  },
  {
    "text": "the very same principle would apply for every single other language out there i just can't write anything pretty much but go and even",
    "start": "2132400",
    "end": "2137920"
  },
  {
    "text": "that is pretty weak but you will see that um i'm creating a service the the part i",
    "start": "2137920",
    "end": "2143440"
  },
  {
    "text": "want to focus on is the odd of creating a subscription to a kind of binding handler is as simple as",
    "start": "2143440",
    "end": "2151200"
  },
  {
    "text": "it's a method on the client so you say i want to subscribe to the tweets remember we define tweets as the component name and",
    "start": "2151200",
    "end": "2159280"
  },
  {
    "text": "and then just handle and the handler is super simple doesn't do anything other than just publishing it to a to a topic",
    "start": "2159280",
    "end": "2166000"
  },
  {
    "text": "that it's configured again through configuration so this is as exciting as yaml gonna get",
    "start": "2166000",
    "end": "2171440"
  },
  {
    "text": "let's go to go so first what i'm gonna do is i'm gonna launch um",
    "start": "2171440",
    "end": "2177280"
  },
  {
    "text": "locally uh the viewer you will see the dapper went through its logging processing here",
    "start": "2177280",
    "end": "2182960"
  },
  {
    "text": "started the application it told me that http api is on this port and the grpc is on this port which are",
    "start": "2182960",
    "end": "2190640"
  },
  {
    "text": "configurable and also kind of give you a nice checkbox here you're good to go locally",
    "start": "2190640",
    "end": "2196160"
  },
  {
    "text": "and pretty much the same thing works for every single application what we're going to do in here we're going to actually start a grpc",
    "start": "2196160",
    "end": "2201599"
  },
  {
    "text": "application on a specific port this is going to be the sentiment scoring application and we're going to point to where the configurations are",
    "start": "2201599",
    "end": "2208000"
  },
  {
    "text": "again i'm just using go itself directly similar i'm on a mac so mac asked me to",
    "start": "2208000",
    "end": "2214480"
  },
  {
    "text": "make sure that i allowed that to happen and and uh exactly same thing for the tweet",
    "start": "2214480",
    "end": "2220000"
  },
  {
    "text": "processor there are some old tweets in here and",
    "start": "2220000",
    "end": "2225599"
  },
  {
    "text": "we're gonna start the tweet provider and what's going to happen in here is this is an http one you see the same",
    "start": "2225599",
    "end": "2231760"
  },
  {
    "text": "thing and i use the term football and uh for reasons that we are recording",
    "start": "2231760",
    "end": "2237520"
  },
  {
    "text": "this tweet i'm actually not going to open the ui because i'm embarrassed uh what could be out there uh but i'm gonna open one for",
    "start": "2237520",
    "end": "2244880"
  },
  {
    "text": "um for dapper uh that for term dapper that i'm actually already running on a server",
    "start": "2244880",
    "end": "2251280"
  },
  {
    "text": "this is uh deployed on kubernetes and i'm gonna come back later show you how i've done that you will see",
    "start": "2251280",
    "end": "2256480"
  },
  {
    "text": "a number of of tweets and if you act if you're going to tweet and please be uh nice don't say something that will",
    "start": "2256480",
    "end": "2262960"
  },
  {
    "text": "embarrass me and uh so if you tweet something will automatically come in here but what for each one of those we can",
    "start": "2262960",
    "end": "2269520"
  },
  {
    "text": "see for example that i was very excited about the spiffy support and oppa so i tweeted about it and the the",
    "start": "2269520",
    "end": "2276240"
  },
  {
    "text": "tweet was identified positive joe beta uh actually sold that too and jumped on it we see some people that",
    "start": "2276240",
    "end": "2282880"
  },
  {
    "text": "maybe are less maybe they were retweeting so it's hard to tell if they were excited about it or",
    "start": "2282880",
    "end": "2288640"
  },
  {
    "text": "not but the sentiment is there it's kind of not the function of the application the one thing i want to show you is that",
    "start": "2288640",
    "end": "2296320"
  },
  {
    "text": "in the entire code there was no uh mention of any tracing right our code",
    "start": "2296320",
    "end": "2301920"
  },
  {
    "text": "was very simplistic but what we were able to do is within your application",
    "start": "2301920",
    "end": "2307599"
  },
  {
    "text": "it actually created the map of these so for each one of the services we can drill down identify what",
    "start": "2307599",
    "end": "2314320"
  },
  {
    "text": "was happening we can switch to logs we can see metrics of the entire system in this case dapper",
    "start": "2314320",
    "end": "2319760"
  },
  {
    "text": "and and the performance characteristics of each one of those asset changes so it's it's uh super um",
    "start": "2319760",
    "end": "2328880"
  },
  {
    "text": "transparent to the developer who just writes the logic of the application they don't have to worry about the actual plan",
    "start": "2328880",
    "end": "2335680"
  },
  {
    "text": "are we almost out of time so i'm going to switch quickly to this actually let's see if somebody posted",
    "start": "2335680",
    "end": "2340960"
  },
  {
    "text": "something okay nobody did all right oh brandon",
    "start": "2340960",
    "end": "2347040"
  },
  {
    "text": "so let's um let's go back uh the entire demo is 100 reproducible and",
    "start": "2347040",
    "end": "2353440"
  },
  {
    "text": "it walks you through each one of those steps you can go to this short link or just scan the uh the barcode um the qr code",
    "start": "2353440",
    "end": "2361280"
  },
  {
    "text": "it will walk you through the creation of the cluster and and if you don't have one as well as configuring of the different components",
    "start": "2361280",
    "end": "2367520"
  },
  {
    "text": "and deploying of the application the uh let's talk about for integration",
    "start": "2367520",
    "end": "2372960"
  },
  {
    "start": "2370000",
    "end": "2496000"
  },
  {
    "text": "uh very quickly or skip that even a couple of things that the project is doing right now with",
    "start": "2372960",
    "end": "2378320"
  },
  {
    "text": "a stable set of apis with this new release which kind of uh",
    "start": "2378320",
    "end": "2383920"
  },
  {
    "text": "made some changes in api so at this point the state the api is stable we've delivered access control and",
    "start": "2383920",
    "end": "2390160"
  },
  {
    "text": "service identity like was already talking about we've actually done a security audit with one of the",
    "start": "2390160",
    "end": "2395760"
  },
  {
    "text": "certified company and published those results as part of this pr2 so you can go to github and find us the",
    "start": "2395760",
    "end": "2401760"
  },
  {
    "text": "reports about the security audit that we have performed we have also announced a",
    "start": "2401760",
    "end": "2408079"
  },
  {
    "text": "project transition to an open source governance to a vendor mutual kind of way of looking at",
    "start": "2408079",
    "end": "2413440"
  },
  {
    "text": "this project making sure that this is sustainable over time so what's next uh",
    "start": "2413440",
    "end": "2419599"
  },
  {
    "text": "kind of by by the end of the year are we looking to release a release candidates of the 1.0 this is based on the feedback",
    "start": "2419599",
    "end": "2425839"
  },
  {
    "text": "we've got from customers and you people or users using this in the real world",
    "start": "2425839",
    "end": "2430960"
  },
  {
    "text": "there's we want to definitely start focusing more on addressing the friction from the real world use cases",
    "start": "2430960",
    "end": "2436400"
  },
  {
    "text": "so as people kind of more and more are taking this to a to production deployment they feed us information and we kind of",
    "start": "2436400",
    "end": "2442160"
  },
  {
    "text": "making sure that this is the highest priority to make sure that this deployments are successful um there is a fair amount of",
    "start": "2442160",
    "end": "2448400"
  },
  {
    "text": "infrastructure work going on behind the project if you're going to be sustainable as an open source project you need to make sure that you have a",
    "start": "2448400",
    "end": "2454240"
  },
  {
    "text": "good performance and performance automation we have a lot of that too but we want to make sure that",
    "start": "2454240",
    "end": "2459760"
  },
  {
    "text": "this is all accessible to the general community they're going to be working on dapper",
    "start": "2459760",
    "end": "2465599"
  },
  {
    "text": "we're going to start also seating the technical steering committee just reaching out to the outside",
    "start": "2465599",
    "end": "2470640"
  },
  {
    "text": "community and bringing evaluating kind of identifying who are the right people who should be on this and then very much kind of focusing on",
    "start": "2470640",
    "end": "2477440"
  },
  {
    "text": "ensuring the readiness for production-grade workloads which means paying a little more attention maybe to the operator and make sure that some of",
    "start": "2477440",
    "end": "2484000"
  },
  {
    "text": "the metrics that the traditional enterprise or large-scale deployment operator would",
    "start": "2484000",
    "end": "2489040"
  },
  {
    "text": "want to see us the focus has been definitely on the on the developer so far",
    "start": "2489040",
    "end": "2495680"
  },
  {
    "text": "all right in closing uh dapper io is a good starting point for",
    "start": "2495680",
    "end": "2501839"
  },
  {
    "start": "2496000",
    "end": "2853000"
  },
  {
    "text": "pretty much anything on dapper the project itself like i said is hosted on on github so github.com forward slash",
    "start": "2501839",
    "end": "2509040"
  },
  {
    "text": "docker there is a chat on getter as well as twitter uh kind of monitoring going on so looking forward",
    "start": "2509040",
    "end": "2515680"
  },
  {
    "text": "to hear you there's a few videos about dapper that i've kind of collected into a playlist that you can access",
    "start": "2515680",
    "end": "2521680"
  },
  {
    "text": "if you can't find anything else so if you need me any other information i provided my email address which might",
    "start": "2521680",
    "end": "2529040"
  },
  {
    "text": "not be the wisest thing in the recording video but looking forward to hear from you karen",
    "start": "2529040",
    "end": "2536560"
  },
  {
    "text": "um cool awesome thank you for that great presentation we now have some time for questions if you have a question that you'd like to",
    "start": "2536560",
    "end": "2543119"
  },
  {
    "text": "ask reminder to please drop it in the q a tab on the bottom of your screen and we will get through as many as we",
    "start": "2543119",
    "end": "2549280"
  },
  {
    "text": "can um so right now there are a few questions uh the first one is is dapper",
    "start": "2549280",
    "end": "2555440"
  },
  {
    "text": "production ready if not any idea when it can reach production ready stages we have a project starting this month",
    "start": "2555440",
    "end": "2561440"
  },
  {
    "text": "and we're thinking of using dapper for it yeah so like with any open source project you're you're",
    "start": "2561440",
    "end": "2568000"
  },
  {
    "text": "you're kind of working on the zero dot dot releases right and uh and it's kind of assumed i think",
    "start": "2568000",
    "end": "2575280"
  },
  {
    "text": "that that's probably not production grade but what happens customers actually deploy this in production so we have",
    "start": "2575280",
    "end": "2581359"
  },
  {
    "text": "a a few customers that went with dapper to production um i i would say depending on the use",
    "start": "2581359",
    "end": "2587920"
  },
  {
    "text": "case if you're going to be running monitoring system for nuclear power station i would probably wait",
    "start": "2587920",
    "end": "2593119"
  },
  {
    "text": "a little longer but if you're looking for some kind of monitoring application with ability to reprocess the data if we",
    "start": "2593119",
    "end": "2599920"
  },
  {
    "text": "find something that definitely ready for that so um",
    "start": "2599920",
    "end": "2605920"
  },
  {
    "text": "yeah i think we're getting very close there i think rc one definitely is intended to be a production group",
    "start": "2605920",
    "end": "2612640"
  },
  {
    "text": "awesome um next question it says are you seeing a demand for streaming grpc",
    "start": "2612640",
    "end": "2617680"
  },
  {
    "text": "connections in addition to um unary grpc sessions",
    "start": "2617680",
    "end": "2623920"
  },
  {
    "text": "yeah now we we do get that question uh we do see uh people asking for uh streaming",
    "start": "2623920",
    "end": "2631280"
  },
  {
    "text": "support um i think we're trying to understand a little more of the use case",
    "start": "2631280",
    "end": "2636720"
  },
  {
    "text": "rather than just technology and what that would look like in a generic api um so if you're interested to kind of",
    "start": "2636720",
    "end": "2642480"
  },
  {
    "text": "provide a kind of context for how this would help you in your use case we would love to know that because",
    "start": "2642480",
    "end": "2648319"
  },
  {
    "text": "that's kind of what dapper drives this functionality by is what is the pattern and how can we kind",
    "start": "2648319",
    "end": "2653680"
  },
  {
    "text": "of help developers in this case great next question what are the main",
    "start": "2653680",
    "end": "2658960"
  },
  {
    "text": "differences between dapper and cloud state of flight bend",
    "start": "2658960",
    "end": "2664480"
  },
  {
    "text": "oh so the um the light band team has actually worked with",
    "start": "2664480",
    "end": "2670160"
  },
  {
    "text": "the upper team on the cloud state and cloud state is one of the supporting",
    "start": "2670160",
    "end": "2676079"
  },
  {
    "text": "components supporting components for state inside of dapper so i would say with regards to state",
    "start": "2676079",
    "end": "2683599"
  },
  {
    "text": "it's one of the options inside of dapper sorry i should have mentioned that cloud",
    "start": "2683599",
    "end": "2689359"
  },
  {
    "text": "state was there cool next question are there any plans to support distributed transactions",
    "start": "2689359",
    "end": "2695599"
  },
  {
    "text": "across multiple microservices",
    "start": "2695599",
    "end": "2699280"
  },
  {
    "text": "oh i would like to know more about this so the service invocation in a cluster",
    "start": "2700800",
    "end": "2709599"
  },
  {
    "text": "can give you some guarantees of transactions depending on what you do but i think i would want to probably",
    "start": "2710000",
    "end": "2717359"
  },
  {
    "text": "understand a little more what that looks like if if we talk talking about like a secondary tertiary service invocation and having",
    "start": "2717359",
    "end": "2724079"
  },
  {
    "text": "some guarantees around that um i think uh right now that's not that's not supported",
    "start": "2724079",
    "end": "2729599"
  },
  {
    "text": "or that's not an option uh i think you can accomplish a similar thing through pops up just by virtue of retries and",
    "start": "2729599",
    "end": "2736880"
  },
  {
    "text": "kind of using this until you reject a particular message but i would love to know more about it",
    "start": "2736880",
    "end": "2743200"
  },
  {
    "text": "if you if you have a way to open an issue inside of dapper love to hear about that",
    "start": "2743200",
    "end": "2749520"
  },
  {
    "text": "context uh he followed up with uh such a saga pattern",
    "start": "2749520",
    "end": "2756160"
  },
  {
    "text": "i have to admit i am not for sagapan we'll look it up though thank me on",
    "start": "2756960",
    "end": "2763680"
  },
  {
    "text": "email or twitter and i i love to talk to you more",
    "start": "2763680",
    "end": "2768880"
  },
  {
    "text": "um okay or uh stewart said maybe it's sage and that they said okay to ping",
    "start": "2770000",
    "end": "2776800"
  },
  {
    "text": "you um cool if anyone has any more questions please drop them in",
    "start": "2776800",
    "end": "2783280"
  },
  {
    "text": "by the way on this transactional thing there's uh probably a few uh members from the dumper",
    "start": "2784640",
    "end": "2790720"
  },
  {
    "text": "community who are a lot more more knowledgeable than i am on this area and they're probably cringing right now saying what is mark saying",
    "start": "2790720",
    "end": "2796800"
  },
  {
    "text": "uh please post it in getter us us the topic and would love to have a",
    "start": "2796800",
    "end": "2802400"
  },
  {
    "text": "conversation on that",
    "start": "2802400",
    "end": "2805200"
  },
  {
    "text": "all right last our last call for",
    "start": "2807920",
    "end": "2811920"
  },
  {
    "text": "questions",
    "start": "2814839",
    "end": "2817839"
  },
  {
    "text": "all right well uh let's go ahead and wrap that up uh thank you mark for a great presentation and q a",
    "start": "2827200",
    "end": "2833920"
  },
  {
    "text": "that is all the time um that is all the time we have for questions today and thank you everyone",
    "start": "2833920",
    "end": "2839760"
  },
  {
    "text": "for joining us the webinar recording and slides will be online later today and we are",
    "start": "2839760",
    "end": "2844800"
  },
  {
    "text": "looking forward to seeing you at a future cncf webinar have a great day thanks thank you",
    "start": "2844800",
    "end": "2855359"
  }
]