[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "hello everyone welcome to this talk on yaml your cloud managing cloud resources from kubernetes",
    "start": "399",
    "end": "6879"
  },
  {
    "text": "to kick off things let us introduce ourselves megan you want to go first yeah hi everyone my name is megan",
    "start": "6879",
    "end": "12880"
  },
  {
    "text": "o'keefe i'm a developer relations engineer at google cloud and yeah i've been working with kubernetes and cloud",
    "start": "12880",
    "end": "18240"
  },
  {
    "text": "stuff for the last five years or so so i'm really excited to be here thank you very much uh yeah i'm shabir",
    "start": "18240",
    "end": "24560"
  },
  {
    "text": "abdul samad i'm a developer relations engineer as well at google cloud i've been working on kubernetes and cloud for",
    "start": "24560",
    "end": "30640"
  },
  {
    "text": "the last three to four years so looking forward to this talk let's get started",
    "start": "30640",
    "end": "36480"
  },
  {
    "start": "36000",
    "end": "36000"
  },
  {
    "text": "uh so to start off let me brief on what's on the deck we are going to discuss about what is the kubernetes",
    "start": "36480",
    "end": "42160"
  },
  {
    "text": "resource model just to give a brief introduction why we would want to manage cloud resources using kubernetes and then",
    "start": "42160",
    "end": "48960"
  },
  {
    "text": "finally go over some of the ways in which we can manage cloud-hosted resources using",
    "start": "48960",
    "end": "55199"
  },
  {
    "text": "kubernetes so to start the discussion we would like to speak uh we would like to speak about",
    "start": "55199",
    "end": "62399"
  },
  {
    "text": "two main areas the api server in kubernetes and the declarative model that kubernetes has",
    "start": "62399",
    "end": "67920"
  },
  {
    "text": "so most of the introduction the next slide can be something that you're already familiar with",
    "start": "67920",
    "end": "73840"
  },
  {
    "text": "so all of kubernetes component centers around the api server it's what the control plane uses as the",
    "start": "74880",
    "end": "81360"
  },
  {
    "start": "75000",
    "end": "75000"
  },
  {
    "text": "source of truth for external tools clients and other internal components so it's how the nodes know what containers",
    "start": "81360",
    "end": "87680"
  },
  {
    "text": "they need to run it's how any outside actor like a ci cd system interacts with the cluster",
    "start": "87680",
    "end": "93280"
  },
  {
    "text": "and the api server exposes an http api that the user external clients and also",
    "start": "93280",
    "end": "98720"
  },
  {
    "text": "the internal components in the control plane can connect to so through this we can query and manipulate any of the resources that is",
    "start": "98720",
    "end": "105280"
  },
  {
    "text": "understood by the cluster and some examples of these kubernetes detect lines are the cube control cli tool",
    "start": "105280",
    "end": "112720"
  },
  {
    "text": "client libraries like client go or in any other languages and also the kubernetes dashboard",
    "start": "112720",
    "end": "118399"
  },
  {
    "text": "it could be on a standalone cooperative deployment or if one of the manage manage kubernetes provider dashboards",
    "start": "118399",
    "end": "126479"
  },
  {
    "text": "so the second thing we want to cover before we get to krm is the declarative model adopted by the api server of",
    "start": "126479",
    "end": "132640"
  },
  {
    "text": "kubernetes so instead of telling how to achieve what you want what the declarative model says is what",
    "start": "132640",
    "end": "140000"
  },
  {
    "text": "you want and how kubernetes knows how to get to that part is using the concept of",
    "start": "140000",
    "end": "146160"
  },
  {
    "text": "controllers so every resource or an object in kubernetes has a controller attached to it and controllers are trying to",
    "start": "146160",
    "end": "153200"
  },
  {
    "text": "continuously drive from the observed state to the desired state like how you",
    "start": "153200",
    "end": "158319"
  },
  {
    "text": "see in this example in the diagram here so now the next question is how do we",
    "start": "158319",
    "end": "164560"
  },
  {
    "text": "tell the api server what you want what is your desired state how do you tell it for this we follow the kubernetes",
    "start": "164560",
    "end": "170800"
  },
  {
    "text": "resource model or krm to define the resource or the object we want so the krm is a data model or the schema",
    "start": "170800",
    "end": "178159"
  },
  {
    "text": "following which the intended state of kubernetes resources are expressed and it has three main parts the first",
    "start": "178159",
    "end": "184720"
  },
  {
    "text": "part is the metadata part which explains the object itself it could have things like the name namespaces labels or even",
    "start": "184720",
    "end": "191760"
  },
  {
    "text": "annotations and then we have the desired state spec explaining what is the state you want",
    "start": "191760",
    "end": "197200"
  },
  {
    "text": "the object to be this has all the information about the resource itself if it's a container the",
    "start": "197200",
    "end": "202959"
  },
  {
    "text": "things about what's the image to use what ports to be exposed and so on",
    "start": "202959",
    "end": "208319"
  },
  {
    "text": "and finally you have the status field which is maintained which maintains the current state of the object as is which",
    "start": "208319",
    "end": "215200"
  },
  {
    "text": "is used by the controllers in the reconciliation process so the status field is only updated and",
    "start": "215200",
    "end": "221360"
  },
  {
    "text": "added to the definition on the server side the clients and the users only specify the metadata and the",
    "start": "221360",
    "end": "227840"
  },
  {
    "text": "desired state in a krm krm based yaml so what's cool about this is that as",
    "start": "227840",
    "end": "234239"
  },
  {
    "text": "long as we can define resources using this model and have controllers to manage them we can extend the api server",
    "start": "234239",
    "end": "240879"
  },
  {
    "text": "to support all different kinds of entities new resources that extend the",
    "start": "240879",
    "end": "246720"
  },
  {
    "text": "capabilities of the vanilla kubernetes that follows the krm are called custom resource definitions",
    "start": "246720",
    "end": "252720"
  },
  {
    "text": "and controllers that introduce capabilities more than just managing the life cycle of a resource",
    "start": "252720",
    "end": "258560"
  },
  {
    "text": "that is that that they manage entire application stacks are called operators",
    "start": "258560",
    "end": "264320"
  },
  {
    "text": "so we have highlighted some of the examples of popular open source operators in this slide here",
    "start": "264320",
    "end": "270240"
  },
  {
    "text": "so while that covers what krm is and gives a general idea",
    "start": "271360",
    "end": "276479"
  },
  {
    "text": "now we would like to see why would we want to manage cloud resources using this model",
    "start": "276479",
    "end": "283720"
  },
  {
    "text": "so with different cloud providers there are many ways to interact with the cloud apis",
    "start": "283840",
    "end": "288880"
  },
  {
    "text": "and these tools and each of these providers have their own tools and all each of these tools also differ from",
    "start": "288880",
    "end": "294960"
  },
  {
    "text": "cloud provider to cloud provider as well and in addition to that if you operate kubernetes as well",
    "start": "294960",
    "end": "301199"
  },
  {
    "text": "it could be cloud-based or self-managed you have an additional api to take care",
    "start": "301199",
    "end": "306240"
  },
  {
    "text": "of and this also comes with a cli and tools and its own client libraries so usually",
    "start": "306240",
    "end": "312400"
  },
  {
    "text": "an organization running kubernetes would not only use kubernetes but also would need to provision cloud resources like",
    "start": "312400",
    "end": "318160"
  },
  {
    "text": "databases serverless functionalities dns networks and so on",
    "start": "318160",
    "end": "323199"
  },
  {
    "text": "so this results in having to deal with different ways of interacting with your resources so and and this has downsides to this",
    "start": "323199",
    "end": "330160"
  },
  {
    "text": "structure setup so different apis with different formats require the expertise to manage it",
    "start": "330160",
    "end": "335440"
  },
  {
    "text": "you also need to deal with the difference in paradigm which between inter imperative and declarative that",
    "start": "335440",
    "end": "341440"
  },
  {
    "text": "means the process pipeline would change and also crowdfunders access management which is commonly known as identity and",
    "start": "341440",
    "end": "348000"
  },
  {
    "text": "access management is different from kubernetes from how kubernetes manages access to its resources which uses its",
    "start": "348000",
    "end": "354639"
  },
  {
    "text": "role-based access control system and on top of all of this you run on multiple clouds if you run on multiple crowds the",
    "start": "354639",
    "end": "361199"
  },
  {
    "text": "variation amongst these increases further so the question we we would like to ask",
    "start": "361199",
    "end": "368240"
  },
  {
    "text": "is whether we can consolidate management of all of these via a powerful declarative style",
    "start": "368240",
    "end": "373759"
  },
  {
    "text": "introduced by the kubernetes resource model the krm this wouldn't have to replace your",
    "start": "373759",
    "end": "378960"
  },
  {
    "text": "current tooling uh setup for the cloud but it could allow for consistency around data format you know life cycle",
    "start": "378960",
    "end": "385199"
  },
  {
    "text": "methods you know have git as your source of truth and also enable how enable a",
    "start": "385199",
    "end": "390639"
  },
  {
    "text": "central way of managing authentication also this could give you the power of krm including the ability to transform",
    "start": "390639",
    "end": "397600"
  },
  {
    "text": "and customize your cloud resources as static files allowing for self-service",
    "start": "397600",
    "end": "402880"
  },
  {
    "text": "for your developers and also a more consistent platform layer",
    "start": "402880",
    "end": "408319"
  },
  {
    "start": "408000",
    "end": "408000"
  },
  {
    "text": "so what would it look like is what you see here in the diagram diagram that's been presented like we see on the right",
    "start": "408319",
    "end": "415360"
  },
  {
    "text": "side here the data model is decoupled and defined as krm with the tools having to only operate",
    "start": "415360",
    "end": "421360"
  },
  {
    "text": "and worry about you know dealing with krm rather than keeping up with how the",
    "start": "421360",
    "end": "427120"
  },
  {
    "text": "api is changing",
    "start": "427120",
    "end": "431440"
  },
  {
    "text": "so in an ideal scenario how would it look like you can treat your cloud resources as a cloud you know as krm based yaml stored",
    "start": "432160",
    "end": "439440"
  },
  {
    "text": "inside the git repositories and you can integrate your cloud resources into a change approval and",
    "start": "439440",
    "end": "444479"
  },
  {
    "text": "validation process this is of course a very simplified group that we are showing here you can you can have multiple repositories and clusters",
    "start": "444479",
    "end": "451599"
  },
  {
    "text": "the important takeaway that we are trying to show here is that you can manage both kubernetes and cloud resources from the same cluster",
    "start": "451599",
    "end": "458319"
  },
  {
    "text": "and that what we are going to and that's what we are going to show today with the demos that are going to follow all right",
    "start": "458319",
    "end": "464400"
  },
  {
    "text": "so now that we've covered what the kubernetes resource model is and why you might want to manage your",
    "start": "464400",
    "end": "470240"
  },
  {
    "text": "hosted resources with it we're going to walk through a couple of demos of how exactly you can make this happen",
    "start": "470240",
    "end": "476960"
  },
  {
    "text": "there's a general uh workflow that would apply to most cloud providers which is one",
    "start": "476960",
    "end": "484080"
  },
  {
    "text": "figure out how you're going to manage your hosted resources we're going to cover both first party tools as well as",
    "start": "484080",
    "end": "490639"
  },
  {
    "text": "third party open source tools second you actually have to write your krm or yaml resources representing those",
    "start": "490639",
    "end": "497840"
  },
  {
    "text": "hosted cloud uh infrastructure and then you have to figure out where to put the yaml files so in git",
    "start": "497840",
    "end": "505599"
  },
  {
    "text": "or figure out the workflow of actually getting those files onto one or more clusters",
    "start": "505599",
    "end": "510879"
  },
  {
    "text": "and then finally we're going to cover how to set up guardrails and some authentication items to make it more",
    "start": "510879",
    "end": "517120"
  },
  {
    "text": "secure to be managing your cloud resources inside of kubernetes there's a few considerations to worry about there",
    "start": "517120",
    "end": "525120"
  },
  {
    "text": "so um to cover step one choosing your tools there are different first party cloud controllers",
    "start": "525600",
    "end": "531440"
  },
  {
    "text": "that you can choose depending on which clouds you are operating in aws google cloud and azure are examples",
    "start": "531440",
    "end": "538800"
  },
  {
    "text": "of cloud providers that do offer controllers for kubernetes all of them have similarities",
    "start": "538800",
    "end": "545040"
  },
  {
    "text": "in that they operate inside the cluster and they interact with the cloud apis but there are a few nuances and",
    "start": "545040",
    "end": "550959"
  },
  {
    "text": "differences so we're going to actually cover two one is going to be the aws controller for kubernetes and then we're",
    "start": "550959",
    "end": "556560"
  },
  {
    "text": "going to cover the google cloud config connector so let's talk about an example workflow",
    "start": "556560",
    "end": "563040"
  },
  {
    "text": "using aws first so the aws controllers for kubernetes",
    "start": "563040",
    "end": "568080"
  },
  {
    "text": "ack for short is an open source project led by aws that is um a set of controllers for",
    "start": "568080",
    "end": "575279"
  },
  {
    "text": "kubernetes designed to manage aws resources it's a it's open source and each controller is separate so there's",
    "start": "575279",
    "end": "582000"
  },
  {
    "text": "an ec2 controller an s3 controller um and we're going to be showing a demo of this",
    "start": "582000",
    "end": "588160"
  },
  {
    "text": "of the s3 controller running inside an aws eks cluster so this is hosted kubernetes running inside of aws",
    "start": "588160",
    "end": "597440"
  },
  {
    "text": "so the way that the aws controller for kubernetes s3 edition works is that you install it onto",
    "start": "597440",
    "end": "605040"
  },
  {
    "text": "the cluster we're going to use helm which is what the documentation recommends us to do you have to give ack permission to",
    "start": "605040",
    "end": "612160"
  },
  {
    "text": "create aws resources from inside the cluster so that includes um connecting",
    "start": "612160",
    "end": "617279"
  },
  {
    "text": "um the aws i am set up to a kubernetes uh deployment",
    "start": "617279",
    "end": "623440"
  },
  {
    "text": "and then we have to create the s3 yaml um and then finally we are going to show an",
    "start": "623440",
    "end": "629600"
  },
  {
    "text": "app that's actually using the s3 bucket so the way that the",
    "start": "629600",
    "end": "636880"
  },
  {
    "text": "ack s3 controller works is we install it using helm there's a helm",
    "start": "636880",
    "end": "643600"
  },
  {
    "text": "chart that's been provided by the project and it's running just as a a pod inside of our cluster",
    "start": "643600",
    "end": "650800"
  },
  {
    "text": "so here i am um with uh access into my eks cluster and you can see we have this name space",
    "start": "650880",
    "end": "657279"
  },
  {
    "text": "called ack system and we can view the pod in it and you",
    "start": "657279",
    "end": "663440"
  },
  {
    "text": "can see that a few days ago we installed this controller and it's running in our cluster and we've given it impermissions",
    "start": "663440",
    "end": "670399"
  },
  {
    "text": "to read or to create and update and destroy s3 buckets specifically so we",
    "start": "670399",
    "end": "675440"
  },
  {
    "text": "gave it pretty specific permissions and what i can show here actually is that",
    "start": "675440",
    "end": "681600"
  },
  {
    "text": "here's our s3 management console in aws we've created a few buckets as we've sort of tested out the demo and what i'm",
    "start": "681600",
    "end": "688079"
  },
  {
    "text": "going to show is creating a krm style yaml that represents the custom resource",
    "start": "688079",
    "end": "693279"
  },
  {
    "text": "for ack s3 and we're going to create um a",
    "start": "693279",
    "end": "698320"
  },
  {
    "text": "new bucket using this controller and we're going to watch it be created from inside of our",
    "start": "698320",
    "end": "703920"
  },
  {
    "text": "cluster and we're going to see it hopefully show up in the s3 dashboard",
    "start": "703920",
    "end": "709279"
  },
  {
    "text": "so what i just did is i created a new bucket name i'm going to kubectl apply f that yaml",
    "start": "710079",
    "end": "716639"
  },
  {
    "text": "file note that in production you wouldn't probably want to ctl apply you'd want to use you know ci cd or",
    "start": "716639",
    "end": "723120"
  },
  {
    "text": "deployment automation for this but we can see you know our s3 bucket was created",
    "start": "723120",
    "end": "729440"
  },
  {
    "text": "and then we can go ahead into the s3 management console refresh the page and hopefully we should see that new",
    "start": "729440",
    "end": "736560"
  },
  {
    "text": "symbol test 4 bucket called this show up in our dashboard like so",
    "start": "736560",
    "end": "742560"
  },
  {
    "text": "so that's just a very simple example of creating an s3 bucket using krm",
    "start": "742560",
    "end": "748079"
  },
  {
    "text": "and what we've also done is deployed that little in-store ads application",
    "start": "748079",
    "end": "754880"
  },
  {
    "text": "and that's already running using a different bucket and so what i can actually show is redeploying this app",
    "start": "754880",
    "end": "761440"
  },
  {
    "text": "pointing to the newly created symbol test for bucket",
    "start": "761440",
    "end": "767200"
  },
  {
    "text": "so i'm going to go ahead and do that and the way i can do that is by setting this environment variable and for my",
    "start": "767200",
    "end": "772639"
  },
  {
    "text": "actual application to symbol test for and then redeploying the app",
    "start": "772639",
    "end": "779759"
  },
  {
    "text": "yaml this is just a deployment",
    "start": "781519",
    "end": "785800"
  },
  {
    "text": "and i can get pods see that seven seconds ago a new ad uh",
    "start": "786800",
    "end": "795680"
  },
  {
    "text": "deployment was sorry a new ad pod was created and then we can go ahead and this is our",
    "start": "795680",
    "end": "800959"
  },
  {
    "text": "application running and we can see that uh yeah the ads are being successfully uh",
    "start": "800959",
    "end": "807680"
  },
  {
    "text": "written to s3 and then gotten out of the s3 bucket and here's that html page that",
    "start": "807680",
    "end": "813440"
  },
  {
    "text": "we just showed on on the uh in the browser so that's kind of an example of of one",
    "start": "813440",
    "end": "818720"
  },
  {
    "text": "cloud provider and like a little miniature workflow obviously this is a very small application but you can imagine that you could use ack to create",
    "start": "818720",
    "end": "826240"
  },
  {
    "text": "lots of different resources and especially ones that are tightly coupled to your applications to have all that",
    "start": "826240",
    "end": "831760"
  },
  {
    "text": "krm together to apply it in the same way provides a nice kind of unification which is nice",
    "start": "831760",
    "end": "838959"
  },
  {
    "start": "838000",
    "end": "838000"
  },
  {
    "text": "okay let's run through another cloud provider so now we're going to switch over to google cloud google cloud offers",
    "start": "838959",
    "end": "844160"
  },
  {
    "text": "a similar service to ack it's called config connector there's a few",
    "start": "844160",
    "end": "849519"
  },
  {
    "text": "differences unlike ack config connector is a product it's not the code for it is not open source",
    "start": "849519",
    "end": "855760"
  },
  {
    "text": "in the way ack is um and it also operates as one controller that can manage",
    "start": "855760",
    "end": "862160"
  },
  {
    "text": "lots of google cloud resources all at once rather than separate controllers for each resource type other than that",
    "start": "862160",
    "end": "868560"
  },
  {
    "text": "these are very very similar tools that both operate inside of your cluster as a controller",
    "start": "868560",
    "end": "875440"
  },
  {
    "text": "um right so the the general workflow is pretty similar i'm going to show a similar setup a hosted kubernetes",
    "start": "875760",
    "end": "882399"
  },
  {
    "text": "cluster in google cloud that has permissions to create resources and i'm going to show",
    "start": "882399",
    "end": "888079"
  },
  {
    "text": "creating a cloud-hosted resource and then deploying an app alongside so this cluster again it's running in",
    "start": "888079",
    "end": "894800"
  },
  {
    "text": "google cloud we can see it here it's called symbol shops this is a google cloud project",
    "start": "894800",
    "end": "901360"
  },
  {
    "text": "and i've pre-installed config connector before this so the controller itself is",
    "start": "902480",
    "end": "908160"
  },
  {
    "text": "actually running in this namespace cnrm system cnrm is an old name of config",
    "start": "908160",
    "end": "913920"
  },
  {
    "text": "connector it stands for cloud native resource management but it just means config connector",
    "start": "913920",
    "end": "919920"
  },
  {
    "text": "you can see the controller's running right here so that should be all ready to",
    "start": "922240",
    "end": "928720"
  },
  {
    "text": "be able to deploy resources on our behalf should be noted that like aws you do have to set up im um and so in this",
    "start": "928720",
    "end": "936880"
  },
  {
    "text": "case we configure config connector with a service account that has the necessary roles it needs to create",
    "start": "936880",
    "end": "942959"
  },
  {
    "text": "resources in our project and then similar to the s3 example we",
    "start": "942959",
    "end": "949519"
  },
  {
    "text": "can we can define a hosted google cloud resource as krm so in this case we have",
    "start": "949519",
    "end": "954959"
  },
  {
    "text": "a instance of memory store called redis cart it has specific spec fields um to memory",
    "start": "954959",
    "end": "961600"
  },
  {
    "text": "store which you can find in the config connector documentation and you can see once we've applied it",
    "start": "961600",
    "end": "968160"
  },
  {
    "text": "which i've done right before this um the instance is created and we can actually see in the google cloud console",
    "start": "968160",
    "end": "974560"
  },
  {
    "text": "over here on the right managed by cnrm true what that basically says is this",
    "start": "974560",
    "end": "980000"
  },
  {
    "text": "resource was created from inside of the gke cluster using config connector",
    "start": "980000",
    "end": "986639"
  },
  {
    "text": "the last thing i'm going to go ahead and walk through is thinking about how to keep all this secure so in the",
    "start": "986639",
    "end": "992720"
  },
  {
    "text": "case of config connector the default instructions actually have you install config connector with massive sweeping",
    "start": "992720",
    "end": "999920"
  },
  {
    "text": "permissions on your google cloud project basically it's a project owner it can",
    "start": "999920",
    "end": "1005279"
  },
  {
    "text": "delete resources it can update resources and if you imagine a large production system that could be risky um once a krm",
    "start": "1005279",
    "end": "1013920"
  },
  {
    "text": "resource lands in the cluster it gets created config connector will",
    "start": "1013920",
    "end": "1019279"
  },
  {
    "text": "uh will create it so you want basically to set up",
    "start": "1019279",
    "end": "1024400"
  },
  {
    "text": "some uh guard rails and some policies that happen before that point so what i mean",
    "start": "1024400",
    "end": "1031360"
  },
  {
    "text": "by that is how is that km getting into a production system are there change approvals in git",
    "start": "1031360",
    "end": "1038640"
  },
  {
    "text": "are there validations there then once a resource is on its way into",
    "start": "1038640",
    "end": "1043678"
  },
  {
    "text": "the cluster how do you make sure that um the the person or actor deploying it",
    "start": "1043679",
    "end": "1049919"
  },
  {
    "text": "is valid and allowed and how do you make sure that the resource is set up in a secure way and",
    "start": "1049919",
    "end": "1056880"
  },
  {
    "text": "kubernetes can actually handle both of these things which is cool the question of who can create what kind",
    "start": "1056880",
    "end": "1062880"
  },
  {
    "text": "of resource is actually something that's pretty much already covered by kubernetes role-based access control are",
    "start": "1062880",
    "end": "1068559"
  },
  {
    "text": "backed for short and you may have used this for things like you know this application team only",
    "start": "1068559",
    "end": "1074000"
  },
  {
    "text": "has admin permissions in like this specific name space and it helps you manage multi-tenant environments",
    "start": "1074000",
    "end": "1081360"
  },
  {
    "text": "so that's already covered but then there's a question of okay what about this resource right here what if we want",
    "start": "1081360",
    "end": "1087039"
  },
  {
    "text": "to actually look inside of the spec for a specific resource type and set guardrails on what",
    "start": "1087039",
    "end": "1093280"
  },
  {
    "text": "is allowed for that resource and this is really powerful because um with regular",
    "start": "1093280",
    "end": "1098640"
  },
  {
    "text": "imperative formats this can be really difficult you know there's i am for like you know this this user can create a",
    "start": "1098640",
    "end": "1105360"
  },
  {
    "text": "redis instance but within that reticence instance what is allowed and i'm going to cover a project in cloud native",
    "start": "1105360",
    "end": "1111280"
  },
  {
    "text": "computing foundation that is going to help us with this and that's called open policy agent",
    "start": "1111280",
    "end": "1117200"
  },
  {
    "start": "1114000",
    "end": "1114000"
  },
  {
    "text": "open policy agent is a open source project with different uh parts to it",
    "start": "1117200",
    "end": "1122799"
  },
  {
    "text": "one of them is called gatekeeper and gatekeeper is a kubernetes admission",
    "start": "1122799",
    "end": "1128480"
  },
  {
    "text": "controller that runs at the base or at the gate of the kubernetes api server so",
    "start": "1128480",
    "end": "1133919"
  },
  {
    "text": "it looks at things as they try to come into the cluster and you can set custom policies",
    "start": "1133919",
    "end": "1140240"
  },
  {
    "text": "that are very specific for certain resource types that allow your cluster to basically accept or reject or audit",
    "start": "1140240",
    "end": "1147760"
  },
  {
    "text": "what is coming in and is it in compliance and as you can imagine this could have a",
    "start": "1147760",
    "end": "1153679"
  },
  {
    "text": "lot of really helpful impacts on your organization especially if you have multiple kubernetes clusters",
    "start": "1153679",
    "end": "1159919"
  },
  {
    "text": "um it can be hard to determine kind of what's going into the cluster um and",
    "start": "1159919",
    "end": "1166480"
  },
  {
    "text": "what resources are are allowed and which are not and it could also help accelerate",
    "start": "1166480",
    "end": "1172320"
  },
  {
    "text": "development as well because again it's adding an automation layer so that um",
    "start": "1172320",
    "end": "1178480"
  },
  {
    "text": "yes at the gate of the cluster the policies are checked but you can also run these checks in",
    "start": "1178480",
    "end": "1184960"
  },
  {
    "text": "your ci cd in kind of a standalone mode that says oh this person's trying to merge in this resource we know it's not",
    "start": "1184960",
    "end": "1192000"
  },
  {
    "text": "allowed and this allows the developer to kind of have a nice fast feedback loop and avoid surprises",
    "start": "1192000",
    "end": "1199759"
  },
  {
    "text": "right so gatekeeper has a little bit of a learning curve but once you get started with it it looks really similar",
    "start": "1200640",
    "end": "1206960"
  },
  {
    "text": "for different resource types so the way it works is you define a sort of an abstract policy this is called a",
    "start": "1206960",
    "end": "1213919"
  },
  {
    "text": "constraint template that um it's a it's some programming uh code uh specifically the rigo language",
    "start": "1213919",
    "end": "1221360"
  },
  {
    "text": "which i'll show in a moment um that basically um is the logic of the policy but the actual parameters of that",
    "start": "1221360",
    "end": "1228720"
  },
  {
    "text": "policy the concrete stuff happens in a separate resource so",
    "start": "1228720",
    "end": "1234880"
  },
  {
    "text": "this allows you to reuse templates and i'll explain what i mean by that in a sec and then you apply them to the cluster",
    "start": "1234880",
    "end": "1241039"
  },
  {
    "text": "these policies are defined as krm just like everything else which is awesome um and then we'll see gatekeeper be able",
    "start": "1241039",
    "end": "1247840"
  },
  {
    "text": "to enforce that policy on inbound cloud resources",
    "start": "1247840",
    "end": "1253360"
  },
  {
    "text": "okay so let's go ahead and do that so what i'm going to show here",
    "start": "1253360",
    "end": "1258880"
  },
  {
    "text": "is a example of a policy that's all about um the required version of our redis",
    "start": "1258880",
    "end": "1265520"
  },
  {
    "text": "instance so you'll see here um in for our instance that we are using",
    "start": "1265520",
    "end": "1271280"
  },
  {
    "text": "redis v5 imagine that our organization has a policy that says you have to be on",
    "start": "1271280",
    "end": "1276480"
  },
  {
    "text": "that version of redis for whatever reason we can use the rigo language which is a",
    "start": "1276480",
    "end": "1282080"
  },
  {
    "text": "policy language it's a bit different than a general purpose language you can see the syntax is a little",
    "start": "1282080",
    "end": "1287280"
  },
  {
    "text": "different but basically we're looking inside of the resource and saying is the redis version what it needs to be",
    "start": "1287280",
    "end": "1294880"
  },
  {
    "text": "and you you can see this is not a hard-coded version it's it's a parameter that we will define",
    "start": "1294880",
    "end": "1301039"
  },
  {
    "text": "and then a message that will tell the developer or the cicd tool what what went wrong why was the",
    "start": "1301039",
    "end": "1307360"
  },
  {
    "text": "resource blocked from entry into the cluster and you can see you know we're going to",
    "start": "1307360",
    "end": "1312880"
  },
  {
    "text": "define the concrete parameter here it is red is v5 let's try it out",
    "start": "1312880",
    "end": "1319840"
  },
  {
    "text": "but first we're going to apply the template",
    "start": "1320480",
    "end": "1326159"
  },
  {
    "text": "and this tells gatekeeper about a new policy type then we're going to create the concrete",
    "start": "1326159",
    "end": "1331760"
  },
  {
    "text": "policies that says okay now we're going to require v5",
    "start": "1331760",
    "end": "1336960"
  },
  {
    "text": "and now what i'm going to do is try to apply or by this instance that's red is v6 and this is perfectly valid uh for a",
    "start": "1336960",
    "end": "1343679"
  },
  {
    "text": "config connector this is a real redis version that would otherwise be be created",
    "start": "1343679",
    "end": "1349840"
  },
  {
    "text": "but if i try to apply it to the cluster you can see here we get the message from",
    "start": "1349840",
    "end": "1356080"
  },
  {
    "text": "gatekeeper that says as we defined in our policy where this version",
    "start": "1356080",
    "end": "1361200"
  },
  {
    "text": "parameter is not allowed must use version parameter um and",
    "start": "1361200",
    "end": "1367520"
  },
  {
    "text": "yeah this this resource was not allowed into the cluster um then again if we were to apply",
    "start": "1367520",
    "end": "1372960"
  },
  {
    "text": "another reddit v5 instance this would be allowed in just a very simple example of how",
    "start": "1372960",
    "end": "1378880"
  },
  {
    "text": "gatekeeper an open policy agent can be used not only for regular kubernetes resources but also for cloud",
    "start": "1378880",
    "end": "1386320"
  },
  {
    "text": "hosted resources as defined as krm so really powerful and again like the possibilities are pretty much endless",
    "start": "1386320",
    "end": "1392320"
  },
  {
    "text": "here so with that um i'm gonna quickly pass it off back to um shabir the one thing i",
    "start": "1392320",
    "end": "1399039"
  },
  {
    "text": "do want to mention you'll see you may have noticed i just covered two cloud providers kind of quick in succession",
    "start": "1399039",
    "end": "1405200"
  },
  {
    "text": "and sure you might just be operating in one cloud provider at a time and using one",
    "start": "1405200",
    "end": "1410880"
  },
  {
    "text": "of the these tools separately could work really well for your organization but imagine that you actually are working",
    "start": "1410880",
    "end": "1416960"
  },
  {
    "text": "with multiple cloud providers at once and this could be the case for many different reasons um what this would mean is that you'd",
    "start": "1416960",
    "end": "1423440"
  },
  {
    "text": "have to be working with two first-party tools at the same time which could be complex so shabir is going to walk",
    "start": "1423440",
    "end": "1429520"
  },
  {
    "text": "through a way that could help us mitigate some of that complexity so what we saw with uh the",
    "start": "1429520",
    "end": "1436080"
  },
  {
    "start": "1434000",
    "end": "1434000"
  },
  {
    "text": "demonstrations that megan showed was that the like how we can use provider specific",
    "start": "1436080",
    "end": "1442080"
  },
  {
    "text": "tools like you know config connector and aws controllers for kubernetes uh",
    "start": "1442080",
    "end": "1447440"
  },
  {
    "text": "and then how that enables us to manage cloud hosted uh cloud versus resources",
    "start": "1447440",
    "end": "1453120"
  },
  {
    "text": "so still there's still a main problem here which is that these are two still two different tools that evolve",
    "start": "1453120",
    "end": "1458480"
  },
  {
    "text": "independently and what we would ideally want is to reduce this to just one thing we have to",
    "start": "1458480",
    "end": "1463840"
  },
  {
    "text": "worry about so that is the problem that cncf's cost plain project is trying to address and",
    "start": "1463840",
    "end": "1469760"
  },
  {
    "text": "we will look at it briefly here so crossplane is an open source",
    "start": "1469760",
    "end": "1475440"
  },
  {
    "text": "kubernetes add-on that can be simply installed into any of your kubernetes clusters and then you have to activate",
    "start": "1475440",
    "end": "1481440"
  },
  {
    "text": "controllers the various different cloud providers that they support and you want to work with so they have wide variety",
    "start": "1481440",
    "end": "1486720"
  },
  {
    "text": "of supports so many of the public clouds out there and with that crossplane installed",
    "start": "1486720",
    "end": "1492400"
  },
  {
    "text": "inside inside your cluster this cluster becomes the only control plane for everything that you that you're managing",
    "start": "1492400",
    "end": "1498400"
  },
  {
    "text": "in your infrastructure it could be your kubernetes resources it could be the cloud resources running in your primary",
    "start": "1498400",
    "end": "1504559"
  },
  {
    "text": "primary cloud provider if you're running on another cloud provider then you know you can use the same control plane to",
    "start": "1504559",
    "end": "1509600"
  },
  {
    "text": "manage resources in that cloud provider and also it can extend to resources in your on-prem environments",
    "start": "1509600",
    "end": "1516240"
  },
  {
    "text": "so a key functionality of cross plane on top of this is also allowing you to assemble multiple cloud",
    "start": "1516240",
    "end": "1521919"
  },
  {
    "text": "resources into a single km definition and to provide that abstraction",
    "start": "1521919",
    "end": "1527039"
  },
  {
    "text": "but for the purpose of this talk we will stick to just the basic deployment example using cross plane and",
    "start": "1527039",
    "end": "1533279"
  },
  {
    "text": "in terms of composition we will you know provide you useful links at the end of the talk and also finally cross pain provides you",
    "start": "1533279",
    "end": "1540240"
  },
  {
    "text": "to provide the support for you to set policies just like open policy agent on your resources",
    "start": "1540240",
    "end": "1546799"
  },
  {
    "text": "and you can do gatekeeping work on top of it",
    "start": "1546799",
    "end": "1551200"
  },
  {
    "text": "so how cross plane works is basically by extending the kubernetes api by introducing new custom resource",
    "start": "1552320",
    "end": "1558559"
  },
  {
    "text": "definitions with its own controller what i have showed here at the bottom is a very small diagram that explains the",
    "start": "1558559",
    "end": "1565760"
  },
  {
    "text": "concepts of creating and managing cloud resources using crossplane",
    "start": "1565760",
    "end": "1571279"
  },
  {
    "text": "the resource claim that you see in blue is the main prm definition that the user would submit to the api server",
    "start": "1571279",
    "end": "1577760"
  },
  {
    "text": "then you have the resource class which is the kubernetes object that defines how to serve the claim which has all the",
    "start": "1577760",
    "end": "1583520"
  },
  {
    "text": "information related to a specific cloud resource type the the resource that you see in orange",
    "start": "1583520",
    "end": "1589600"
  },
  {
    "text": "is the representation of an instance of the cloud resource that actually is going to serve the resource claim",
    "start": "1589600",
    "end": "1595679"
  },
  {
    "text": "and finally cross plane also allows you to pull resources together and serve",
    "start": "1595679",
    "end": "1601279"
  },
  {
    "text": "resource claims from this pool of resources",
    "start": "1601279",
    "end": "1605520"
  },
  {
    "text": "so let's look at a demo for the purpose of demo we will not go through setting up the entire setup we",
    "start": "1606960",
    "end": "1612799"
  },
  {
    "text": "have already set it up in a kubernetes cluster as you see in the diagram here we have a gke cluster running in google",
    "start": "1612799",
    "end": "1620240"
  },
  {
    "text": "cloud and we have an eks cluster running in aws just without megan showed and we have cross plane installed in our gke",
    "start": "1620240",
    "end": "1626960"
  },
  {
    "text": "cluster and this cross plate uh installation is being given given all the information it needs to be able to",
    "start": "1626960",
    "end": "1633440"
  },
  {
    "text": "connect to and create and manage cloud resources in google cloud and aws",
    "start": "1633440",
    "end": "1638960"
  },
  {
    "text": "so let's have a quick look at this so what you're seeing on screen is the kubernetes cluster that i have created",
    "start": "1638960",
    "end": "1646159"
  },
  {
    "text": "it's called cross plane cluster and this is the object browser for the cluster if you see here you can see that",
    "start": "1646159",
    "end": "1653039"
  },
  {
    "text": "it has we have it has a bunch of new object types which are which are then spaced under",
    "start": "1653039",
    "end": "1658720"
  },
  {
    "text": "crossplane dot io so these are all done by the install by installing cosplain into your",
    "start": "1658720",
    "end": "1664640"
  },
  {
    "text": "into your cluster and i'm going to show you uh what what i have installed by look by",
    "start": "1664640",
    "end": "1671200"
  },
  {
    "text": "going through some of the items in the cli",
    "start": "1671200",
    "end": "1676640"
  },
  {
    "text": "so you can see that i have made the crossbar installation using helm so you can see that helm chart installation up",
    "start": "1676640",
    "end": "1682320"
  },
  {
    "text": "here and also we can list all the cross plane specific resources",
    "start": "1682320",
    "end": "1688640"
  },
  {
    "text": "in the name space that have created for this specific purpose let's see what it shows as you can see",
    "start": "1688640",
    "end": "1694000"
  },
  {
    "text": "here there are four deployments and you know two of them are specific to two providers one is for aws one is for gcp",
    "start": "1694000",
    "end": "1701600"
  },
  {
    "text": "crossplane also installs an outback manager to manage access control and you have the main deployment that manages",
    "start": "1701600",
    "end": "1708000"
  },
  {
    "text": "all of crossplanes activity we can also quickly list",
    "start": "1708000",
    "end": "1714159"
  },
  {
    "text": "the list of providers that has been installed you can see already that the deployments the two deployments aw aws",
    "start": "1714159",
    "end": "1720880"
  },
  {
    "text": "and gcp but let's look at the provider definitions",
    "start": "1720880",
    "end": "1726559"
  },
  {
    "text": "so you can see here i have a configuration for aws there's a configuration for gcp as well",
    "start": "1727919",
    "end": "1736080"
  },
  {
    "text": "and i'm going to also have a quick peek into one of these configurations to see",
    "start": "1736640",
    "end": "1742320"
  },
  {
    "text": "uh to highlight the key components inside this configuration",
    "start": "1742320",
    "end": "1747360"
  },
  {
    "text": "so if you see here this configuration is of kind provider config that says it's a",
    "start": "1748320",
    "end": "1753520"
  },
  {
    "text": "cosplay provider config and at the bottom you can see that it has associated to it secret reference to a",
    "start": "1753520",
    "end": "1760799"
  },
  {
    "text": "secret inside our cluster so this secret is mainly the aws seeker that we would",
    "start": "1760799",
    "end": "1766880"
  },
  {
    "text": "usually use with the aws cli similarly the gcp config has the gcloud",
    "start": "1766880",
    "end": "1772960"
  },
  {
    "text": "the service service account json that we reduced using jsp cloud as a secret here",
    "start": "1772960",
    "end": "1778559"
  },
  {
    "text": "i'm going to show you the two cloud resources that we have created which is an s3 bucket and a redis instance",
    "start": "1778559",
    "end": "1784799"
  },
  {
    "text": "through the cloud memory store manage hosted service",
    "start": "1784799",
    "end": "1790520"
  },
  {
    "text": "so you can see that there is a bucket called symbol as bucket that's the s3 bucket and also you can see",
    "start": "1794640",
    "end": "1801600"
  },
  {
    "text": "symbol mems2 which is a reduced instance that is managed by gcp so if you go back to",
    "start": "1801600",
    "end": "1809039"
  },
  {
    "text": "go back to our console you can see the instance uh being you know already",
    "start": "1809039",
    "end": "1814240"
  },
  {
    "text": "created and you know we can see whether the same is created so if you see here symbols x bucket is the bucket that we",
    "start": "1814240",
    "end": "1820799"
  },
  {
    "text": "created we can make sure that you know the system is running as expected by just",
    "start": "1820799",
    "end": "1826559"
  },
  {
    "text": "going to the external ip so it's in the in the cluster that",
    "start": "1826559",
    "end": "1832880"
  },
  {
    "text": "we are looking at at the moment so you can see that it's running as",
    "start": "1832880",
    "end": "1837919"
  },
  {
    "text": "expected and you can see that the the cart is also working as expected",
    "start": "1837919",
    "end": "1845440"
  },
  {
    "start": "1845000",
    "end": "1845000"
  },
  {
    "text": "so as you come to the end you know let us wrap up today's presentation what we saw today is that there are a lot of",
    "start": "1845440",
    "end": "1851200"
  },
  {
    "text": "ways that you can manage your cloud infrastructure in alongside your kubernetes deployment",
    "start": "1851200",
    "end": "1856320"
  },
  {
    "text": "as well however kubernetes resource model can act as a single data model to",
    "start": "1856320",
    "end": "1861440"
  },
  {
    "text": "consolidate all of them and all your infrastructure in a single place using the declarative model at the",
    "start": "1861440",
    "end": "1868000"
  },
  {
    "text": "kubernetes page server demands and different cloud providers has also provided their own solutions to be able",
    "start": "1868000",
    "end": "1874559"
  },
  {
    "text": "to do cloud resource management using a krm based model however crossplane comes as",
    "start": "1874559",
    "end": "1881600"
  },
  {
    "text": "a single uh control plane to support multiple cloud providers for a single cluster",
    "start": "1881600",
    "end": "1887519"
  },
  {
    "text": "and it also comes with uh with an added benefit of being able to abstract",
    "start": "1887519",
    "end": "1892880"
  },
  {
    "text": "uh composite resources together so with that we come to the conclusion of our demo here a list of resources",
    "start": "1892880",
    "end": "1899760"
  },
  {
    "text": "that we used in the slides and some of the things that we could not go into detail because of the time constraints",
    "start": "1899760",
    "end": "1904960"
  },
  {
    "text": "please go through them in addition to that everything that we showed in the demo has been uh has been",
    "start": "1904960",
    "end": "1911120"
  },
  {
    "text": "put up in a git repository that is publicly available for anyone to try it out please try it out and report any",
    "start": "1911120",
    "end": "1916320"
  },
  {
    "text": "issues modification that you all want to see and also these slides are accessible at the link that you see on screen",
    "start": "1916320",
    "end": "1922480"
  },
  {
    "text": "thank you very much",
    "start": "1922480",
    "end": "1926039"
  }
]