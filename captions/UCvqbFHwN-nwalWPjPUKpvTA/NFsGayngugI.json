[
  {
    "text": "so welcome to my talk on protecting",
    "start": "4980",
    "end": "8040"
  },
  {
    "text": "Envoy with the overload manager I'm",
    "start": "8040",
    "end": "10200"
  },
  {
    "text": "Kevin bachu a software engineer at",
    "start": "10200",
    "end": "12240"
  },
  {
    "text": "Google and an Envoy maintainer",
    "start": "12240",
    "end": "16020"
  },
  {
    "text": "so",
    "start": "16020",
    "end": "18060"
  },
  {
    "text": "many users use Envoy at the edge and in",
    "start": "18060",
    "end": "21480"
  },
  {
    "text": "Edge deployments an attacker can either",
    "start": "21480",
    "end": "24180"
  },
  {
    "text": "you know disrupt service to your service",
    "start": "24180",
    "end": "27960"
  },
  {
    "text": "by either taking your service out it's",
    "start": "27960",
    "end": "30240"
  },
  {
    "text": "all or by taking the pipe out that leads",
    "start": "30240",
    "end": "34079"
  },
  {
    "text": "to your service in this case the envoy",
    "start": "34079",
    "end": "36059"
  },
  {
    "text": "proxy",
    "start": "36059",
    "end": "38480"
  },
  {
    "text": "in multi-tenant deployments we need to",
    "start": "41940",
    "end": "45660"
  },
  {
    "text": "consider the fact that the attacker",
    "start": "45660",
    "end": "47460"
  },
  {
    "text": "might control an upstream as well and in",
    "start": "47460",
    "end": "49860"
  },
  {
    "text": "that case the Upstream isn't trusted and",
    "start": "49860",
    "end": "52980"
  },
  {
    "text": "in fact the attacker might use the",
    "start": "52980",
    "end": "55739"
  },
  {
    "text": "Upstream in order to take down the",
    "start": "55739",
    "end": "58620"
  },
  {
    "text": "multi-tenant",
    "start": "58620",
    "end": "60000"
  },
  {
    "text": "on way and take down stop access to",
    "start": "60000",
    "end": "63420"
  },
  {
    "text": "another tenant",
    "start": "63420",
    "end": "66259"
  },
  {
    "text": "so the reason we ran into issues but",
    "start": "66960",
    "end": "69960"
  },
  {
    "text": "those explosions is we weren't",
    "start": "69960",
    "end": "71640"
  },
  {
    "text": "protecting some resources and this is",
    "start": "71640",
    "end": "75180"
  },
  {
    "text": "exactly what the envoy overload manager",
    "start": "75180",
    "end": "78000"
  },
  {
    "text": "tries to do it tries to do this by one",
    "start": "78000",
    "end": "80220"
  },
  {
    "text": "measuring a particular resource and",
    "start": "80220",
    "end": "82680"
  },
  {
    "text": "taking action as needed let's explore",
    "start": "82680",
    "end": "85439"
  },
  {
    "text": "what the envoy overload manager can do",
    "start": "85439",
    "end": "89340"
  },
  {
    "text": "first timeouts are very essential for",
    "start": "89340",
    "end": "92460"
  },
  {
    "text": "distributed systems it's the way we",
    "start": "92460",
    "end": "94920"
  },
  {
    "text": "ensure that resources aren't",
    "start": "94920",
    "end": "96720"
  },
  {
    "text": "indefinitely tied up for example if a",
    "start": "96720",
    "end": "100320"
  },
  {
    "text": "client is sending a request for Foo",
    "start": "100320",
    "end": "103619"
  },
  {
    "text": "we'd want to bound how long that request",
    "start": "103619",
    "end": "106259"
  },
  {
    "text": "will take we don't want them to wait",
    "start": "106259",
    "end": "109200"
  },
  {
    "text": "around hanging and we don't want",
    "start": "109200",
    "end": "111180"
  },
  {
    "text": "resources tied up throughout the system",
    "start": "111180",
    "end": "114920"
  },
  {
    "text": "while we serve the response",
    "start": "114920",
    "end": "120078"
  },
  {
    "text": "many systems have static timeouts so if",
    "start": "122100",
    "end": "125399"
  },
  {
    "text": "the length of this spring is the",
    "start": "125399",
    "end": "127259"
  },
  {
    "text": "duration of the timeout the timeout will",
    "start": "127259",
    "end": "129179"
  },
  {
    "text": "be the same regardless of the context",
    "start": "129179",
    "end": "132480"
  },
  {
    "text": "Envoy has these scale timeouts what that",
    "start": "132480",
    "end": "136860"
  },
  {
    "text": "means is they're effectively timeouts",
    "start": "136860",
    "end": "138959"
  },
  {
    "text": "that can be compressed as there's an",
    "start": "138959",
    "end": "141060"
  },
  {
    "text": "increase in resource pressure so if",
    "start": "141060",
    "end": "143400"
  },
  {
    "text": "there's an increase in resource pressure",
    "start": "143400",
    "end": "144840"
  },
  {
    "text": "the length of the timeout can decrease",
    "start": "144840",
    "end": "148760"
  },
  {
    "text": "Envoy has the ability to reset expensive",
    "start": "149160",
    "end": "152099"
  },
  {
    "text": "HTTP 2 streams so this is atlas he's a",
    "start": "152099",
    "end": "156780"
  },
  {
    "text": "Greek myth he holds up the world for",
    "start": "156780",
    "end": "159480"
  },
  {
    "text": "your traffic this is Envoy",
    "start": "159480",
    "end": "161640"
  },
  {
    "text": "and Envoy has the ability to know for",
    "start": "161640",
    "end": "165660"
  },
  {
    "text": "HTTP to traffic how many bytes it has",
    "start": "165660",
    "end": "169700"
  },
  {
    "text": "buffered for a particular request",
    "start": "169700",
    "end": "172019"
  },
  {
    "text": "response",
    "start": "172019",
    "end": "173220"
  },
  {
    "text": "and it can use that information to drop",
    "start": "173220",
    "end": "175800"
  },
  {
    "text": "the more expensive",
    "start": "175800",
    "end": "177720"
  },
  {
    "text": "uh streams and as there's an increase in",
    "start": "177720",
    "end": "180959"
  },
  {
    "text": "resource pressure we can continue to",
    "start": "180959",
    "end": "184140"
  },
  {
    "text": "more aggressively drop the streams to",
    "start": "184140",
    "end": "186660"
  },
  {
    "text": "keep the proxy alive",
    "start": "186660",
    "end": "189180"
  },
  {
    "text": "Envoy has the ability to stop accepting",
    "start": "189180",
    "end": "191700"
  },
  {
    "text": "connections so Downstream connections",
    "start": "191700",
    "end": "194099"
  },
  {
    "text": "are really where you know often the",
    "start": "194099",
    "end": "196500"
  },
  {
    "text": "workload of envoy is generated from",
    "start": "196500",
    "end": "198959"
  },
  {
    "text": "so so for an overloaded Envoy we can by",
    "start": "198959",
    "end": "203040"
  },
  {
    "text": "disabling the listeners we hopefully",
    "start": "203040",
    "end": "205739"
  },
  {
    "text": "prevent additional work from being added",
    "start": "205739",
    "end": "208800"
  },
  {
    "text": "to the envoy and preventing it from",
    "start": "208800",
    "end": "210959"
  },
  {
    "text": "crashing of course this can harm both",
    "start": "210959",
    "end": "213840"
  },
  {
    "text": "malicious and well-behaving clients",
    "start": "213840",
    "end": "217680"
  },
  {
    "text": "Envoy has the ability to stop accepting",
    "start": "217680",
    "end": "220799"
  },
  {
    "text": "requests it's a way to fail fast and",
    "start": "220799",
    "end": "223500"
  },
  {
    "text": "send a 503 response and avoid tying up",
    "start": "223500",
    "end": "227400"
  },
  {
    "text": "even more resources for an overburdened",
    "start": "227400",
    "end": "230340"
  },
  {
    "text": "Envoy",
    "start": "230340",
    "end": "231959"
  },
  {
    "text": "as there's an increase in resource",
    "start": "231959",
    "end": "234140"
  },
  {
    "text": "resource pressure we can increase the",
    "start": "234140",
    "end": "236879"
  },
  {
    "text": "probability of rejecting a given request",
    "start": "236879",
    "end": "239760"
  },
  {
    "text": "we also have this capability for the",
    "start": "239760",
    "end": "243000"
  },
  {
    "text": "rejecting incoming connections",
    "start": "243000",
    "end": "246540"
  },
  {
    "text": "Envoy has the ability to tell clients to",
    "start": "246540",
    "end": "249239"
  },
  {
    "text": "disconnect",
    "start": "249239",
    "end": "250140"
  },
  {
    "text": "this is particularly important in Fleet",
    "start": "250140",
    "end": "253640"
  },
  {
    "text": "wide uses so for example in this given",
    "start": "253640",
    "end": "257160"
  },
  {
    "text": "case you know there's one Envoy that has",
    "start": "257160",
    "end": "259380"
  },
  {
    "text": "many clients that Envoy is overloaded",
    "start": "259380",
    "end": "261720"
  },
  {
    "text": "and as such we might spin up some new",
    "start": "261720",
    "end": "264479"
  },
  {
    "text": "instances well these instances aren't",
    "start": "264479",
    "end": "267240"
  },
  {
    "text": "doing anything helpful right now because",
    "start": "267240",
    "end": "269280"
  },
  {
    "text": "the clients are still on the you know",
    "start": "269280",
    "end": "272460"
  },
  {
    "text": "overloaded Envoy and they're having a",
    "start": "272460",
    "end": "274139"
  },
  {
    "text": "lousy experience because they're on an",
    "start": "274139",
    "end": "275759"
  },
  {
    "text": "overloaded Envoy",
    "start": "275759",
    "end": "278040"
  },
  {
    "text": "well if the envoy can tell the clients",
    "start": "278040",
    "end": "281100"
  },
  {
    "text": "to disconnect that gives us another",
    "start": "281100",
    "end": "283080"
  },
  {
    "text": "opportunity to better better",
    "start": "283080",
    "end": "285680"
  },
  {
    "text": "redistribute the clients and utilize our",
    "start": "285680",
    "end": "288180"
  },
  {
    "text": "Fleet",
    "start": "288180",
    "end": "290720"
  },
  {
    "text": "Envoy is C plus plus base and uses TC",
    "start": "291060",
    "end": "294780"
  },
  {
    "text": "Malik as its allocator",
    "start": "294780",
    "end": "296699"
  },
  {
    "text": "TC Malik",
    "start": "296699",
    "end": "298320"
  },
  {
    "text": "really enjoys a fast allocation path and",
    "start": "298320",
    "end": "301740"
  },
  {
    "text": "in order to do so it maintains all of",
    "start": "301740",
    "end": "304020"
  },
  {
    "text": "these free lists of allocable objects",
    "start": "304020",
    "end": "307500"
  },
  {
    "text": "envoy can tell TC Malek to return some",
    "start": "307500",
    "end": "311100"
  },
  {
    "text": "of the memory that it has back to the OS",
    "start": "311100",
    "end": "313740"
  },
  {
    "text": "if memory limits are near",
    "start": "313740",
    "end": "318419"
  },
  {
    "text": "so now let's shift into an experiment",
    "start": "318419",
    "end": "321199"
  },
  {
    "text": "we're going to try out static timeouts",
    "start": "321199",
    "end": "325320"
  },
  {
    "text": "versus slow loris so what is slow loris",
    "start": "325320",
    "end": "327780"
  },
  {
    "text": "it's effectively a client being",
    "start": "327780",
    "end": "329759"
  },
  {
    "text": "maliciously slow",
    "start": "329759",
    "end": "332820"
  },
  {
    "text": "and effectively they're trying to tie up",
    "start": "332820",
    "end": "335160"
  },
  {
    "text": "resources",
    "start": "335160",
    "end": "336240"
  },
  {
    "text": "for example by sending a request and not",
    "start": "336240",
    "end": "338820"
  },
  {
    "text": "reading the response so in the following",
    "start": "338820",
    "end": "341400"
  },
  {
    "text": "experiment we have a client using HTTP",
    "start": "341400",
    "end": "344580"
  },
  {
    "text": "one to connect to the envoy it sends 60",
    "start": "344580",
    "end": "348600"
  },
  {
    "text": "KV worth of headers and afterwards it",
    "start": "348600",
    "end": "352380"
  },
  {
    "text": "maintains uh the connection or the",
    "start": "352380",
    "end": "355440"
  },
  {
    "text": "stream by sending one byte every 15",
    "start": "355440",
    "end": "358440"
  },
  {
    "text": "seconds in order to maintain the stream",
    "start": "358440",
    "end": "360840"
  },
  {
    "text": "as active",
    "start": "360840",
    "end": "363060"
  },
  {
    "text": "this attack in these scenarios could",
    "start": "363060",
    "end": "366300"
  },
  {
    "text": "really uh possibly reached about 25k for",
    "start": "366300",
    "end": "370020"
  },
  {
    "text": "this given experiment",
    "start": "370020",
    "end": "372918"
  },
  {
    "text": "so this is a graph of the memory usage",
    "start": "373560",
    "end": "377580"
  },
  {
    "text": "of the task",
    "start": "377580",
    "end": "379800"
  },
  {
    "text": "and you see all of those sharp spikes",
    "start": "379800",
    "end": "382979"
  },
  {
    "text": "well those are all spikes when the envoy",
    "start": "382979",
    "end": "386280"
  },
  {
    "text": "has crashed and the reason we continue",
    "start": "386280",
    "end": "388860"
  },
  {
    "text": "you know getting more data afterwards is",
    "start": "388860",
    "end": "391139"
  },
  {
    "text": "due to automatic restarts",
    "start": "391139",
    "end": "393479"
  },
  {
    "text": "we can similarly see this with the",
    "start": "393479",
    "end": "396660"
  },
  {
    "text": "active client connections so this is a",
    "start": "396660",
    "end": "398699"
  },
  {
    "text": "graph of the active client connections",
    "start": "398699",
    "end": "400380"
  },
  {
    "text": "and you see that you know we can start",
    "start": "400380",
    "end": "402479"
  },
  {
    "text": "crashing around 18K client connections",
    "start": "402479",
    "end": "404699"
  },
  {
    "text": "under this traffic with these given",
    "start": "404699",
    "end": "407039"
  },
  {
    "text": "configurations",
    "start": "407039",
    "end": "409699"
  },
  {
    "text": "now let's kind of conduct the same",
    "start": "409860",
    "end": "411900"
  },
  {
    "text": "experiment this time with skilled",
    "start": "411900",
    "end": "413699"
  },
  {
    "text": "timeouts",
    "start": "413699",
    "end": "416240"
  },
  {
    "text": "the range of the timeout can scale",
    "start": "416340",
    "end": "418139"
  },
  {
    "text": "between 60 seconds and 5 Seconds",
    "start": "418139",
    "end": "421020"
  },
  {
    "text": "and the scaling starts at 60 memory",
    "start": "421020",
    "end": "423720"
  },
  {
    "text": "utilization and saturates at 90 what",
    "start": "423720",
    "end": "426900"
  },
  {
    "text": "that means is at 90 percent uh resource",
    "start": "426900",
    "end": "430139"
  },
  {
    "text": "memory usage we'd effectively turn the",
    "start": "430139",
    "end": "433380"
  },
  {
    "text": "60 second timeout to five seconds",
    "start": "433380",
    "end": "437660"
  },
  {
    "text": "so here's the corresponding Gap graph",
    "start": "437940",
    "end": "440039"
  },
  {
    "text": "with the memory usage with scale",
    "start": "440039",
    "end": "442080"
  },
  {
    "text": "timeouts we see again there's a sharp",
    "start": "442080",
    "end": "444660"
  },
  {
    "text": "rise in memory usage but it levels off",
    "start": "444660",
    "end": "447840"
  },
  {
    "text": "when we've passed the 60 threshold there",
    "start": "447840",
    "end": "451139"
  },
  {
    "text": "that's when we start scaling the",
    "start": "451139",
    "end": "453720"
  },
  {
    "text": "timeouts",
    "start": "453720",
    "end": "454979"
  },
  {
    "text": "and 90 that's when we would have reached",
    "start": "454979",
    "end": "457680"
  },
  {
    "text": "saturation",
    "start": "457680",
    "end": "459060"
  },
  {
    "text": "we see that we're you know we're scaling",
    "start": "459060",
    "end": "461699"
  },
  {
    "text": "the 60 second timeout under the 15",
    "start": "461699",
    "end": "463740"
  },
  {
    "text": "seconds that the attack traffic is using",
    "start": "463740",
    "end": "466380"
  },
  {
    "text": "to maintain the connection",
    "start": "466380",
    "end": "468440"
  },
  {
    "text": "so the timeout is some somewhat under 15",
    "start": "468440",
    "end": "471660"
  },
  {
    "text": "seconds and as such we're able to",
    "start": "471660",
    "end": "474259"
  },
  {
    "text": "maintain the proxy",
    "start": "474259",
    "end": "477300"
  },
  {
    "text": "um up and maintain you know around 16k",
    "start": "477300",
    "end": "482460"
  },
  {
    "text": "client connections so this is the graph",
    "start": "482460",
    "end": "484800"
  },
  {
    "text": "of client connections we can see there",
    "start": "484800",
    "end": "487139"
  },
  {
    "text": "are occasional you know spikes and drops",
    "start": "487139",
    "end": "489479"
  },
  {
    "text": "due to this turn going on",
    "start": "489479",
    "end": "493819"
  },
  {
    "text": "so there are some caveats of course",
    "start": "494400",
    "end": "497759"
  },
  {
    "text": "it's very important when you're using",
    "start": "497759",
    "end": "499680"
  },
  {
    "text": "the overload manager to configure it for",
    "start": "499680",
    "end": "502440"
  },
  {
    "text": "your given workload and your",
    "start": "502440",
    "end": "504180"
  },
  {
    "text": "requirements otherwise it might not help",
    "start": "504180",
    "end": "507000"
  },
  {
    "text": "you it could actually actively hurt you",
    "start": "507000",
    "end": "511520"
  },
  {
    "text": "small deployments can run into trouble",
    "start": "511560",
    "end": "513839"
  },
  {
    "text": "with TC Malik fragmentation overhead",
    "start": "513839",
    "end": "518099"
  },
  {
    "text": "and traffic diversity matters the",
    "start": "518099",
    "end": "520620"
  },
  {
    "text": "overload manager might not be able to",
    "start": "520620",
    "end": "522360"
  },
  {
    "text": "help depending on the traffic and its",
    "start": "522360",
    "end": "524279"
  },
  {
    "text": "configuration",
    "start": "524279",
    "end": "526820"
  },
  {
    "text": "so here are some pointers to get started",
    "start": "527160",
    "end": "529680"
  },
  {
    "text": "with using the overload manager and",
    "start": "529680",
    "end": "531959"
  },
  {
    "text": "thanks to all the folks who've",
    "start": "531959",
    "end": "533700"
  },
  {
    "text": "contributed to this component and here's",
    "start": "533700",
    "end": "537360"
  },
  {
    "text": "some other great talks from past Envoy",
    "start": "537360",
    "end": "539459"
  },
  {
    "text": "Conyers on protecting back ends thank",
    "start": "539459",
    "end": "542279"
  },
  {
    "text": "you",
    "start": "542279",
    "end": "544459"
  },
  {
    "text": "[Applause]",
    "start": "545030",
    "end": "549419"
  }
]