[
  {
    "text": "all right I think it's time to get started so welcome this is going to be a",
    "start": "170",
    "end": "6060"
  },
  {
    "text": "container deed deep dive a little bit of a continuation from the intro session we had yesterday afternoon a slightly",
    "start": "6060",
    "end": "14610"
  },
  {
    "text": "different cast of characters Mike Brown and I did yesterday's intro I'm going to give you kind of a quick start",
    "start": "14610",
    "end": "22529"
  },
  {
    "text": "but then Derrick is one of our maintainer ziz going to do the bulk of the deep Dawg presentation into the",
    "start": "22529",
    "end": "28859"
  },
  {
    "text": "architecture and and finish up with a demo but just to kind of get us get us",
    "start": "28859",
    "end": "34710"
  },
  {
    "text": "going one of the things we didn't cover as much yesterday was you know where is container D kind of on that maturity",
    "start": "34710",
    "end": "41160"
  },
  {
    "text": "path of you know who's using it where is it within the CNC F so I thought we'd",
    "start": "41160",
    "end": "47399"
  },
  {
    "text": "give you a few minutes of that before we dig a little deeper and also down the",
    "start": "47399",
    "end": "52890"
  },
  {
    "text": "left side this list of projects as Derrick goes over the architecture these",
    "start": "52890",
    "end": "58170"
  },
  {
    "text": "are great examples places you can actually go look you can go look at the code on github and see how each of these",
    "start": "58170",
    "end": "64018"
  },
  {
    "text": "projects are using you know the the go API library to actually drive container",
    "start": "64019",
    "end": "71100"
  },
  {
    "text": "D to do the work that they're doing so Mike gave you if you came to the intercession Mike covered the CRI so",
    "start": "71100",
    "end": "78720"
  },
  {
    "text": "that's the container runtime interface from kubernetes so how does kubernetes drive container D when you know for",
    "start": "78720",
    "end": "86700"
  },
  {
    "text": "example the Kubla wants to start a pod so you can look at the CRI project and see how that uses the container D",
    "start": "86700",
    "end": "94170"
  },
  {
    "text": "services so that's one great sort of integration that's that's clear and understandable docker is sort of on the",
    "start": "94170",
    "end": "102479"
  },
  {
    "text": "path to use more of container d and so the runtime aspect of container D has",
    "start": "102479",
    "end": "108420"
  },
  {
    "text": "been in use by the docker engine since 1712 so all through 2018 all those",
    "start": "108420",
    "end": "116040"
  },
  {
    "text": "releases and then there's work underway to start to refactor docker to use the",
    "start": "116040",
    "end": "122909"
  },
  {
    "text": "image side of container D instead of the code that's in the docker engine today so you can expect to see a lot of that",
    "start": "122909",
    "end": "129869"
  },
  {
    "text": "work happen in 2019 if you've heard a build which is the open source project that",
    "start": "129869",
    "end": "135810"
  },
  {
    "text": "that can now be used to drive docker build the back end of that uses container DS client and it can even run",
    "start": "135810",
    "end": "144239"
  },
  {
    "text": "standalone without the rest of docker or it can even drive a run C so again build",
    "start": "144239",
    "end": "149730"
  },
  {
    "text": "kit is a great place to look at a container to use case alibaba's pouch container that's another open source",
    "start": "149730",
    "end": "156239"
  },
  {
    "text": "project from Alibaba cloud in China they're using container D as a runtime",
    "start": "156239",
    "end": "163440"
  },
  {
    "text": "also using both the image at runtime aspects of container D there's also and",
    "start": "163440",
    "end": "168959"
  },
  {
    "text": "this is an exhaustive list but a couple of our our own maintainer Xand reviewers",
    "start": "168959",
    "end": "174900"
  },
  {
    "text": "have interesting projects that again are great places so if you look at Michael Crosby's boss project that uses the",
    "start": "174900",
    "end": "182280"
  },
  {
    "text": "container D Go library and Evan hayslett stellar project also is another great",
    "start": "182280",
    "end": "188790"
  },
  {
    "text": "example of using container D as a runtime so anyway that gives you a flavor of you know as you see the",
    "start": "188790",
    "end": "196140"
  },
  {
    "text": "architecture and see how how it comes together these are projects that are actually using it today we just",
    "start": "196140",
    "end": "202319"
  },
  {
    "text": "completed a security review that the CNC F provides to all member projects we're",
    "start": "202319",
    "end": "207989"
  },
  {
    "text": "going to be publishing that online a PDF report from a security company it's very",
    "start": "207989",
    "end": "214019"
  },
  {
    "text": "very positive and and so we're excited to to share that kind of in that same",
    "start": "214019",
    "end": "220500"
  },
  {
    "text": "vein we've also proposed to graduate within the CNC F so you know kubernetes has graduated as well as fluent D I",
    "start": "220500",
    "end": "228780"
  },
  {
    "text": "believe and so you can look at the PR in the CNC F TOC and again that expresses",
    "start": "228780",
    "end": "238319"
  },
  {
    "text": "where we are as a project how we meet all the criteria for the CNC F graduation criteria we presented that",
    "start": "238319",
    "end": "246359"
  },
  {
    "text": "just last month to the TOC and I think we can expect some kind of graduation vote early in the year so again that",
    "start": "246359",
    "end": "254370"
  },
  {
    "text": "gives you a picture of a little bit about who's integrating container D using it today and some of the maturity",
    "start": "254370",
    "end": "261389"
  },
  {
    "text": "and where we are as a project and with that I'm going to let Derek take over",
    "start": "261389",
    "end": "266400"
  },
  {
    "text": "and do the deep dive alright so we're gonna",
    "start": "266400",
    "end": "273690"
  },
  {
    "text": "kind of take this same architecture diagram that we went over in the intro",
    "start": "273690",
    "end": "280630"
  },
  {
    "text": "yesterday we're going to go into it and the slightly different depths so I'm",
    "start": "280630",
    "end": "286060"
  },
  {
    "text": "going to focus more on the different components that are actually inside the daemon so just so we kind of talked",
    "start": "286060",
    "end": "292120"
  },
  {
    "text": "about how container D is built around having these loosely coupled services made in and these strongly defined",
    "start": "292120",
    "end": "297940"
  },
  {
    "text": "interfaces between those services so I'm going to go through a few of those and highlight how you as an integrator can",
    "start": "297940",
    "end": "306370"
  },
  {
    "text": "both integrate with these services and can build plug-ins that are used within container D so container D has this",
    "start": "306370",
    "end": "313750"
  },
  {
    "text": "smart client model so what this means is the the actual go container D client it",
    "start": "313750",
    "end": "321970"
  },
  {
    "text": "implements many of the higher-level functionality so you think of push-pull",
    "start": "321970",
    "end": "327160"
  },
  {
    "text": "that's done actually inside the container D client we provide a very",
    "start": "327160",
    "end": "333540"
  },
  {
    "text": "usable interface for integrating with our with our client library and this is",
    "start": "333540",
    "end": "340990"
  },
  {
    "text": "what you'll see Mobe integrating with pouch containers our own tool CT are the boss tool that",
    "start": "340990",
    "end": "348090"
  },
  {
    "text": "Phil mentioned they all just directly use the container D client and then the",
    "start": "348090",
    "end": "354130"
  },
  {
    "text": "container D client itself obviously communicates with our container D API so",
    "start": "354130",
    "end": "359980"
  },
  {
    "text": "the container the API is is very low-level it mirrors roughly the services that we have underneath it so",
    "start": "359980",
    "end": "367560"
  },
  {
    "text": "you can think of like the snapshot or the content service that container services we have those are all exposed",
    "start": "367560",
    "end": "374860"
  },
  {
    "text": "directly through our container D API this API we consider very stable it's",
    "start": "374860",
    "end": "380919"
  },
  {
    "text": "intended to be backwards compatible all through one Dex releases and then",
    "start": "380919",
    "end": "387880"
  },
  {
    "text": "actually inside the container D daemon we have this service level so this is",
    "start": "387880",
    "end": "393730"
  },
  {
    "text": "what actually exposes all the services we have to the rest of container D so if you're implementing a plugin you can",
    "start": "393730",
    "end": "400330"
  },
  {
    "text": "acts any of the container D service interfaces so it makes it really easy",
    "start": "400330",
    "end": "405550"
  },
  {
    "text": "for example if you want to build something like the CRI plugin the CRI",
    "start": "405550",
    "end": "411430"
  },
  {
    "text": "plug-in is just able to use these internal services directly without going",
    "start": "411430",
    "end": "417159"
  },
  {
    "text": "through the API and then we have a",
    "start": "417159",
    "end": "423009"
  },
  {
    "text": "metadata store that sits roughly right right underneath the service interfaces so this will actually be able to provide",
    "start": "423009",
    "end": "429550"
  },
  {
    "text": "name spacing and labeling to some of our even lower level components such as",
    "start": "429550",
    "end": "435310"
  },
  {
    "text": "snapshot airs so the things that actually touch files on disk we try to",
    "start": "435310",
    "end": "441039"
  },
  {
    "text": "make those as simple as possible and that we can provide layers on top of it to add additional functionality as well",
    "start": "441039",
    "end": "448569"
  },
  {
    "text": "as provide different guarantees such as a de Missa T at the metadata level so",
    "start": "448569",
    "end": "455110"
  },
  {
    "text": "that every single plug-in doesn't have to worry about that as well as namespace ting so the the metadata service itself",
    "start": "455110",
    "end": "466210"
  },
  {
    "text": "is what actually does the name spacing and this will actually namespace all your images all your containers all your",
    "start": "466210",
    "end": "473349"
  },
  {
    "text": "snapshots all the content even down to the the labels that are put on any of",
    "start": "473349",
    "end": "479080"
  },
  {
    "text": "these objects so basically any object that you're using within container D itself as a namespace and this is",
    "start": "479080",
    "end": "484719"
  },
  {
    "text": "primarily to support multiple clients so container D is designed to be used",
    "start": "484719",
    "end": "489729"
  },
  {
    "text": "within docker within kubernetes within any platform that wants to run",
    "start": "489729",
    "end": "494979"
  },
  {
    "text": "containers but it's designed in such a way that they don't step on each other",
    "start": "494979",
    "end": "500650"
  },
  {
    "text": "if one of them is pulling images managing containers you don't have to worry about some other platform or tool",
    "start": "500650",
    "end": "508180"
  },
  {
    "text": "that you're using interfering with those containers accidentally so let's take a",
    "start": "508180",
    "end": "515078"
  },
  {
    "text": "deeper look at what what the metadata service is actually doing so the metadata service is actually implemented",
    "start": "515079",
    "end": "523060"
  },
  {
    "text": "in bolt DB so it's it's completely atomic it has it has references to the",
    "start": "523060",
    "end": "532480"
  },
  {
    "text": "different objects most of these references are implemented through labels but for example when you pull an image it's",
    "start": "532480",
    "end": "539260"
  },
  {
    "text": "going to pull the content down it's going to put it in the content store and it's also going to reference it and the metadata store as well as the",
    "start": "539260",
    "end": "545560"
  },
  {
    "text": "relationships between all the content that was pulled likewise with images the images itself",
    "start": "545560",
    "end": "552430"
  },
  {
    "text": "is just in the metadata store there's no there's no separate back-end for images",
    "start": "552430",
    "end": "558310"
  },
  {
    "text": "the metadata stores are actual back-end and that will link to the actual content that got pulled",
    "start": "558310",
    "end": "564370"
  },
  {
    "text": "likewise for snapshots snapshots tend to be something that's very heavy on disk but managing those snapshots can be",
    "start": "564370",
    "end": "571990"
  },
  {
    "text": "complicated so the metadata stores actually what takes care of managing kind of what snapshots exist",
    "start": "571990",
    "end": "577860"
  },
  {
    "text": "what namespace they belong to and what the relationships between that snapshots as well as the content that they're",
    "start": "577860",
    "end": "583690"
  },
  {
    "text": "related to and this really helps us when we want to do something like deleting an",
    "start": "583690",
    "end": "589510"
  },
  {
    "text": "image so container D actually has garbage collection that is able to take care of cleaning up this data when",
    "start": "589510",
    "end": "597160"
  },
  {
    "text": "something gets deleted so in this case if we were to delete the Redis image you",
    "start": "597160",
    "end": "603700"
  },
  {
    "text": "could see that the Redis image was based off the Alpine image in the content I I",
    "start": "603700",
    "end": "611530"
  },
  {
    "text": "labeled the green stars actually represent the OCI manifests the yellow",
    "start": "611530",
    "end": "616690"
  },
  {
    "text": "stars represent the OCI images so these are kind of the these are the image configs that actually specify what are",
    "start": "616690",
    "end": "624010"
  },
  {
    "text": "the layers what are the runtime parameters everything for that image and",
    "start": "624010",
    "end": "629110"
  },
  {
    "text": "then the red stars are going to represent the actual compressed r layers so as you can see here the the Redis",
    "start": "629110",
    "end": "639940"
  },
  {
    "text": "image is actually pointing to a manifest which references to layers whereas the Alpine layers the Alpine image only has",
    "start": "639940",
    "end": "647200"
  },
  {
    "text": "a single layer you can see how those translate to the snapshots so when you",
    "start": "647200",
    "end": "652990"
  },
  {
    "text": "actually want to delete the Redis image we can just delete the Redis image from",
    "start": "652990",
    "end": "659050"
  },
  {
    "text": "the API nothing needs to happen right away but when the garbage collector when",
    "start": "659050",
    "end": "664750"
  },
  {
    "text": "the garbage collection runs it's actually going to go through it's gonna see that there's content that's no longer referenced so in this",
    "start": "664750",
    "end": "672820"
  },
  {
    "text": "case since we actually have a Redis container which is running which is pointing out a read/write snapshot that",
    "start": "672820",
    "end": "679390"
  },
  {
    "text": "read/write snapshot is referencing that that Redis layer which was which was",
    "start": "679390",
    "end": "685570"
  },
  {
    "text": "owned by that that image that just got removed however the garbage collector is gonna see that it's owned and it's not",
    "start": "685570",
    "end": "691030"
  },
  {
    "text": "going to clean up that particular snapshot but it will be able to clean up any of the content that was associated",
    "start": "691030",
    "end": "697150"
  },
  {
    "text": "with the poll so this content is going to be the artifacts that I got from the registry and they would also be",
    "start": "697150",
    "end": "702190"
  },
  {
    "text": "artifacts that you could push to another registry for example so after the",
    "start": "702190",
    "end": "707830"
  },
  {
    "text": "garbage collection it's going to look like this inside the metadata store so",
    "start": "707830",
    "end": "713440"
  },
  {
    "text": "now when we go back through we want to actually delete the container normally we delete the readwrite layer of this the readwrite snapshot layer at the same",
    "start": "713440",
    "end": "720100"
  },
  {
    "text": "time we delete the container but you can guess what's going to happen here when",
    "start": "720100",
    "end": "726670"
  },
  {
    "text": "the garbage collection runs it's going to see that now there's a snapshot that is no longer being referenced and it's",
    "start": "726670",
    "end": "732190"
  },
  {
    "text": "going to go ahead and delete that snapshot so our final state in this case is we just have a Alpine image so the",
    "start": "732190",
    "end": "742990"
  },
  {
    "text": "way we've kind of implemented the garbage collection and container D is we have the metadata store which is in both",
    "start": "742990",
    "end": "748960"
  },
  {
    "text": "dB we try to avoid locking this as much as possible so we do this this garbage",
    "start": "748960",
    "end": "756490"
  },
  {
    "text": "collection very quickly but as you all know that content and snapshot actually represent fairly a lot of data on disk",
    "start": "756490",
    "end": "764260"
  },
  {
    "text": "sometimes which the leading data on disk can be very slow so this is representative of what we actually do",
    "start": "764260",
    "end": "770470"
  },
  {
    "text": "inside the metadata store for deletion but we actually have a multi-stage",
    "start": "770470",
    "end": "776470"
  },
  {
    "text": "garbage collector that will actually go through and it will for each of the individual content stores or snapshot",
    "start": "776470",
    "end": "784240"
  },
  {
    "text": "errors it will do a separate garbage collection when there's data that's been removed so as mentioned snapshots um",
    "start": "784240",
    "end": "793470"
  },
  {
    "text": "about how you can implement your own snapshot and",
    "start": "793470",
    "end": "799280"
  },
  {
    "text": "we've tried to make an interface that's both a mix of powerful and simple and",
    "start": "799280",
    "end": "806360"
  },
  {
    "text": "one of the ways we tried to achieve that was by removing operations that really make snapshot or is difficult to",
    "start": "806360",
    "end": "812840"
  },
  {
    "text": "implement so you'll see that there's absolutely no data operations inside our snapshot or interface you're not going",
    "start": "812840",
    "end": "819860"
  },
  {
    "text": "to see any data being streamed into or out of the snapshot or make you're familiar with docker graph drivers and",
    "start": "819860",
    "end": "825740"
  },
  {
    "text": "how they work they actually handle tar streams to and",
    "start": "825740",
    "end": "830930"
  },
  {
    "text": "from which can make them fairly complicated to implement as you're then responsible for understanding tar and",
    "start": "830930",
    "end": "837110"
  },
  {
    "text": "how to compress decompress and unpack those there's no mounting which allows",
    "start": "837110",
    "end": "843680"
  },
  {
    "text": "you to implement a snapshot or that's fairly stateless so as soon as you have to deal with notes you have to deal with",
    "start": "843680",
    "end": "849350"
  },
  {
    "text": "whether or not you can unmount so it brings up a lot of extra reference",
    "start": "849350",
    "end": "855350"
  },
  {
    "text": "counting that's needed a lot of tracking that goes along with with owning those mounts that you create so in container D",
    "start": "855350",
    "end": "862220"
  },
  {
    "text": "we return a array of mounts and you have those array ounces just a description",
    "start": "862220",
    "end": "868130"
  },
  {
    "text": "for how that snapshot er can be mounted snapshots themselves when you create",
    "start": "868130",
    "end": "875390"
  },
  {
    "text": "them so we have a prepare command which will create a mutable snapshot when you're done with it you commit it and",
    "start": "875390",
    "end": "881270"
  },
  {
    "text": "that snapshot can no longer be altered in any way so for example we're doing a",
    "start": "881270",
    "end": "886940"
  },
  {
    "text": "poll where we're preparing each layer we're unpacking into that layer and then",
    "start": "886940",
    "end": "893480"
  },
  {
    "text": "we're gonna we're just going to commit it and it's up to the actual pole operation to determine how it's going to",
    "start": "893480",
    "end": "900500"
  },
  {
    "text": "mount and do that unpacking we there is label support in here so so the stats",
    "start": "900500",
    "end": "907940"
  },
  {
    "text": "and info that you can set on snapshot erskine themselves have labels this is",
    "start": "907940",
    "end": "913310"
  },
  {
    "text": "mostly used at the metadata store level but the the snapshot errors themselves",
    "start": "913310",
    "end": "919370"
  },
  {
    "text": "can support those labels I put an enumeration there because that's something that was kind of",
    "start": "919370",
    "end": "925190"
  },
  {
    "text": "missing from the the docker implementation of graph drivers where this really helps out is",
    "start": "925190",
    "end": "932740"
  },
  {
    "text": "the ability to clean up so when you have the ability to numerate you have the ability to know kind of what's actually",
    "start": "932740",
    "end": "938889"
  },
  {
    "text": "there and and make decisions about what can be deleted it also helps helps you kind of just do",
    "start": "938889",
    "end": "949089"
  },
  {
    "text": "better tracking of what's there as well as giving api's to the client where you can actually see what all your with all",
    "start": "949089",
    "end": "955930"
  },
  {
    "text": "your snap shutters are or all the snapshots in the snapshot are and the",
    "start": "955930",
    "end": "961029"
  },
  {
    "text": "1.2 release we added a feature called proxies snapshot err it's basically it",
    "start": "961029",
    "end": "968949"
  },
  {
    "text": "gives you the ability to run a snapshot or that's external to the container D process so that you don't have to",
    "start": "968949",
    "end": "976449"
  },
  {
    "text": "recompile container D to use your snapshot ur so if you've been following",
    "start": "976449",
    "end": "982089"
  },
  {
    "text": "a firecracker at all they're using this to implement a snapshot ur for",
    "start": "982089",
    "end": "989860"
  },
  {
    "text": "configuring container D we have a proxy plug-in section in there you just specify a name so in this case I think",
    "start": "989860",
    "end": "998439"
  },
  {
    "text": "would be called my snapshot or you specify I type and then the address is always just a UNIX socket and as you can",
    "start": "998439",
    "end": "1005699"
  },
  {
    "text": "see in the example it's just going to listen on that UNIX socket and container T will be able to connect to that and",
    "start": "1005699",
    "end": "1013550"
  },
  {
    "text": "what I mentioned about kind of these these interfaces and how we use them within container T that snapchatter",
    "start": "1013550",
    "end": "1019199"
  },
  {
    "text": "interface is used at every level of container D whether it's the client the",
    "start": "1019199",
    "end": "1024418"
  },
  {
    "text": "API the backend they all use the same snapchatter interface so to actually",
    "start": "1024419",
    "end": "1029610"
  },
  {
    "text": "implement this proxy plugin you just implement the snapshot or interface and",
    "start": "1029610",
    "end": "1034770"
  },
  {
    "text": "that can be used on either side of G RPC",
    "start": "1034770",
    "end": "1040250"
  },
  {
    "text": "1.2 we also we also released a new plug-in feature for runtimes so in the",
    "start": "1040429",
    "end": "1051360"
  },
  {
    "text": "v1 of our runtimes we had the ability to make it pluggable but it it wasn't super",
    "start": "1051360",
    "end": "1057840"
  },
  {
    "text": "easy to to implement we had this G RPC interface that could be implemented but there were",
    "start": "1057840",
    "end": "1066150"
  },
  {
    "text": "some limitations with it for example stats we didn't have a stats endpoint so if you were trying to",
    "start": "1066150",
    "end": "1072900"
  },
  {
    "text": "implement a runtime that was inside of the VM and you needed to get stats it was somewhat difficult so now we",
    "start": "1072900",
    "end": "1080580"
  },
  {
    "text": "actually added a stats a stats function inside of the cast service so that if",
    "start": "1080580",
    "end": "1087030"
  },
  {
    "text": "you want to implement a runtime plug-in you can do everything including creative",
    "start": "1087030",
    "end": "1092730"
  },
  {
    "text": "or including returning your own stats so the the biggest feature with 1.2 wasn't",
    "start": "1092730",
    "end": "1098460"
  },
  {
    "text": "necessarily that we introduced this new runtime we did add a few and points to",
    "start": "1098460",
    "end": "1103470"
  },
  {
    "text": "it but mainly we stabilized it so that people can feel comfortable going out",
    "start": "1103470",
    "end": "1109680"
  },
  {
    "text": "and actually implementing against this API and will continue to support it so",
    "start": "1109680",
    "end": "1115800"
  },
  {
    "text": "it should make it much easier to implement these plugins and we've already seen interest in and actual",
    "start": "1115800",
    "end": "1122880"
  },
  {
    "text": "implementations of this with fire cracker kata containers G visor to name",
    "start": "1122880",
    "end": "1128730"
  },
  {
    "text": "a few and obviously we have a run C implementation another advantage to this",
    "start": "1128730",
    "end": "1136290"
  },
  {
    "text": "approach is I I kind of wrote it in a confusing way it says at most one per",
    "start": "1136290",
    "end": "1141840"
  },
  {
    "text": "container which I had to actually stop and think about for a second but what that means is previously would always be",
    "start": "1141840",
    "end": "1147390"
  },
  {
    "text": "one shim for one container but now it's at most one ship for one container so if",
    "start": "1147390",
    "end": "1153210"
  },
  {
    "text": "you have 10 containers running you can have 10 shims but you could also have all those 10 containers sharing the same",
    "start": "1153210",
    "end": "1158790"
  },
  {
    "text": "two shim so this is useful in the VM scenario where you may have one GM's",
    "start": "1158790",
    "end": "1165570"
  },
  {
    "text": "and multiple containers inside that VM say for example they're all in the same pod you wouldn't have to have a bunch of",
    "start": "1165570",
    "end": "1172920"
  },
  {
    "text": "extra processes being used to to manage all of these all these containers",
    "start": "1172920",
    "end": "1179200"
  },
  {
    "text": "and so that was that was another minor change that we made to the this API is",
    "start": "1179200",
    "end": "1184630"
  },
  {
    "text": "just passing in the ID for each of the tasks so that this API can be used across multiple multiple running tasks",
    "start": "1184630",
    "end": "1195030"
  },
  {
    "text": "so and as somebody who's using container D you're most likely going to be",
    "start": "1195570",
    "end": "1201070"
  },
  {
    "text": "starting with the with our go client the go client has gotten fairly positive",
    "start": "1201070",
    "end": "1207780"
  },
  {
    "text": "feedback it's it's it's fairly simple to use and we provide a lot of with",
    "start": "1207780",
    "end": "1216130"
  },
  {
    "text": "functions as it's probably the best way to describe it so almost any point of",
    "start": "1216130",
    "end": "1222820"
  },
  {
    "text": "the API you can change whatever you want so in the services section we're",
    "start": "1222820",
    "end": "1228850"
  },
  {
    "text": "actually defining which services you can use by default it will just you do",
    "start": "1228850",
    "end": "1234730"
  },
  {
    "text": "everything over G RPC but you can override any any one service so you can",
    "start": "1234730",
    "end": "1241600"
  },
  {
    "text": "make it you could run container D completely embedded you could you can implement all",
    "start": "1241600",
    "end": "1246640"
  },
  {
    "text": "of these interfaces yourself if you want to and still use the client and make use",
    "start": "1246640",
    "end": "1251890"
  },
  {
    "text": "of those higher-level functionalities so an example of this would be like say you wanted to build a tool which pulls",
    "start": "1251890",
    "end": "1257500"
  },
  {
    "text": "something for my registry but you don't want to actually have a running container D all you have to do is",
    "start": "1257500",
    "end": "1264040"
  },
  {
    "text": "implement the the content store interface and then you can make use of that higher level functionality and it",
    "start": "1264040",
    "end": "1270370"
  },
  {
    "text": "will store it to wherever you define it to be stored in the content store I I",
    "start": "1270370",
    "end": "1276700"
  },
  {
    "text": "tried to highlight the resolver here so it's the resolver is defined whenever",
    "start": "1276700",
    "end": "1282970"
  },
  {
    "text": "you do a pole operation and this is another interface that you can completely completely overwrite I didn't",
    "start": "1282970",
    "end": "1290590"
  },
  {
    "text": "specify what I don't have a slide that shows what this interface looks like but it's it's fairly simple it's you",
    "start": "1290590",
    "end": "1298210"
  },
  {
    "text": "resolve a a name to a digest and then you can fetch individual blobs using",
    "start": "1298210",
    "end": "1306730"
  },
  {
    "text": "just the hash so by default we have an implementation that uses the docker",
    "start": "1306730",
    "end": "1313940"
  },
  {
    "text": "registry API which is now the OCI distribution specification but it's",
    "start": "1313940",
    "end": "1320270"
  },
  {
    "text": "fairly unup enya nated and our implementation so i'm going to go through a few of the flows that we have",
    "start": "1320270",
    "end": "1326260"
  },
  {
    "text": "in container d today so this flow is the",
    "start": "1326260",
    "end": "1331580"
  },
  {
    "text": "same based on light doesn't really matter what resolver you have but the",
    "start": "1331580",
    "end": "1338090"
  },
  {
    "text": "default remote will be some some sort of registry so in our CTR tool we actually",
    "start": "1338090",
    "end": "1344780"
  },
  {
    "text": "have top-level commands for pole fetch and unpack normally you're just familiar",
    "start": "1344780",
    "end": "1350750"
  },
  {
    "text": "with pole so the first thing that pole does is just going to fetch the content",
    "start": "1350750",
    "end": "1355900"
  },
  {
    "text": "fetch is just going to the registry that's going to this remote and it's pulling down the content and putting it",
    "start": "1355900",
    "end": "1362210"
  },
  {
    "text": "in the content store it's not really doing anything else besides that the only tricky part is it has to understand",
    "start": "1362210",
    "end": "1369980"
  },
  {
    "text": "OCI manifest so that it knows how to walk the the tree of objects that are associated with an image at the end of",
    "start": "1369980",
    "end": "1377600"
  },
  {
    "text": "the fetch it will just take the image that you tried to pull and it will create a record and the metadata store",
    "start": "1377600",
    "end": "1383630"
  },
  {
    "text": "saying that this image now refers to this OCI manifest so when the pole comes",
    "start": "1383630",
    "end": "1389929"
  },
  {
    "text": "along it's able to it's able to actually see now what that image represents and",
    "start": "1389929",
    "end": "1396140"
  },
  {
    "text": "then to do an unpack on that on that manifest it will just take that content",
    "start": "1396140",
    "end": "1402919"
  },
  {
    "text": "now it knows what the layers are it will read those layers from the content store",
    "start": "1402919",
    "end": "1407960"
  },
  {
    "text": "and it will unpack them into the snapshot and that's all a pole is you",
    "start": "1407960",
    "end": "1413600"
  },
  {
    "text": "could do the unpack yourself if you have your own content there's nothing really here that's not configurable and not",
    "start": "1413600",
    "end": "1422510"
  },
  {
    "text": "exposed in our client so push flow and container DS is very simple container D",
    "start": "1422510",
    "end": "1430460"
  },
  {
    "text": "doesn't build images our CTR tool doesn't build images it pushes them so",
    "start": "1430460",
    "end": "1436610"
  },
  {
    "text": "if you have an image you have the content it takes that image it takes that content and it pushes it to a",
    "start": "1436610",
    "end": "1442880"
  },
  {
    "text": "registry that's it if you want to build images you can use something like build kit or other tooling that's being developed in",
    "start": "1442880",
    "end": "1451770"
  },
  {
    "text": "order to create new content but container D runs runs images it doesn't",
    "start": "1451770",
    "end": "1457530"
  },
  {
    "text": "create them so running a container",
    "start": "1457530",
    "end": "1462810"
  },
  {
    "text": "that's one of the most important things we want to do in container D it's using",
    "start": "1462810",
    "end": "1468320"
  },
  {
    "text": "many of the same underlying services so when you go to run the first thing",
    "start": "1468320",
    "end": "1474270"
  },
  {
    "text": "that's always done is it's going to do an initialization step so this is going to actually read read the image that you",
    "start": "1474270",
    "end": "1480510"
  },
  {
    "text": "want to run it's going to look at the configurations it's going to create the OCI specification it's going to create a",
    "start": "1480510",
    "end": "1486120"
  },
  {
    "text": "new rewrite layer in the snapshot and then with those it's going to set up a",
    "start": "1486120",
    "end": "1491460"
  },
  {
    "text": "new container for you that new container is going to have now defined route FS",
    "start": "1491460",
    "end": "1496950"
  },
  {
    "text": "which is will be represented most likely from a snapshot ER and the OCI",
    "start": "1496950",
    "end": "1502950"
  },
  {
    "text": "configuration that was created once you have a container created you can start",
    "start": "1502950",
    "end": "1508440"
  },
  {
    "text": "that container that the start is actually going to mount your snapshot and it's going to start the task that",
    "start": "1508440",
    "end": "1514650"
  },
  {
    "text": "you specified so I wanted to kind of",
    "start": "1514650",
    "end": "1522330"
  },
  {
    "text": "drill down into what has changed with the runtime v2 so at the lowest level of",
    "start": "1522330",
    "end": "1529680"
  },
  {
    "text": "run we have this this shim runtime manager and this is actually what's",
    "start": "1529680",
    "end": "1534750"
  },
  {
    "text": "managing all the individual shims that that are owning the the running",
    "start": "1534750",
    "end": "1540360"
  },
  {
    "text": "processes so when we actually get to the point where we're starting these",
    "start": "1540360",
    "end": "1546170"
  },
  {
    "text": "containers it's going to take in this OC is with this OC i specification it",
    "start": "1546170",
    "end": "1552210"
  },
  {
    "text": "creates a bungle directory so if you're familiar with run C you know what these these bundle directories look like",
    "start": "1552210",
    "end": "1557220"
  },
  {
    "text": "there's specification there root of s and then this is kind of the the main",
    "start": "1557220",
    "end": "1564960"
  },
  {
    "text": "change that we did with 1.2 for the for the B tube runtime is now we have a shim",
    "start": "1564960",
    "end": "1572100"
  },
  {
    "text": "start so the shim start is going to take that bundle directory and it's it's going to call into the",
    "start": "1572100",
    "end": "1578400"
  },
  {
    "text": "shim binary that's defined for that run time so this plugin is is it's just a",
    "start": "1578400",
    "end": "1583830"
  },
  {
    "text": "binary that implements of a few functions like start it's going to the that binary when it started its going to",
    "start": "1583830",
    "end": "1590790"
  },
  {
    "text": "actually return a path to a UNIX socket and that UNIX socket is going to",
    "start": "1590790",
    "end": "1597690"
  },
  {
    "text": "implement the the interface that I showed earlier for the runtime service",
    "start": "1597690",
    "end": "1603660"
  },
  {
    "text": "tasks interface and this start it can do",
    "start": "1603660",
    "end": "1609210"
  },
  {
    "text": "really one of two things it can it can create a new shim that's going to manage",
    "start": "1609210",
    "end": "1615570"
  },
  {
    "text": "that container or it can use an existing shim and it can return the same path to",
    "start": "1615570",
    "end": "1621180"
  },
  {
    "text": "another another running shim then that that UNIX socket is going to get",
    "start": "1621180",
    "end": "1628140"
  },
  {
    "text": "connected to and the tests create functions that we called and now you actually have a task and you can call",
    "start": "1628140",
    "end": "1634380"
  },
  {
    "text": "although you can exec it you can start it you can do any anything that you need",
    "start": "1634380",
    "end": "1640620"
  },
  {
    "text": "to do with a task clearly getting the stats so I'm gonna go ahead and give a",
    "start": "1640620",
    "end": "1646290"
  },
  {
    "text": "demo I see the time here okay perfect so",
    "start": "1646290",
    "end": "1654480"
  },
  {
    "text": "I'm gonna start off by demoing the snapshot or proxy plugin so I'm gonna",
    "start": "1654480",
    "end": "1660450"
  },
  {
    "text": "show the what an example of one of these proxy plugins actually looks like when",
    "start": "1660450",
    "end": "1665790"
  },
  {
    "text": "it's running as well as some of the commands and CTR for looking at",
    "start": "1665790",
    "end": "1672570"
  },
  {
    "text": "snapshots so this is just a proxy plug-in that I don't know if it's is",
    "start": "1672570",
    "end": "1680240"
  },
  {
    "text": "this one is not in the repo but it uses this this contribs nap shot service so",
    "start": "1680240",
    "end": "1688770"
  },
  {
    "text": "the snapshot service is basically just taking the snapshot or API and it's creating a G RPC service for it so an",
    "start": "1688770",
    "end": "1696060"
  },
  {
    "text": "example or an example plug-in it can be very simple creates a new G RPC server",
    "start": "1696060",
    "end": "1702140"
  },
  {
    "text": "creates a new snapshot er the snapshot er could be your own custom snapshot or",
    "start": "1702140",
    "end": "1707190"
  },
  {
    "text": "in this case I'm just using one built-in snap shutters the native snapshot which is which is the simplest",
    "start": "1707190",
    "end": "1715510"
  },
  {
    "text": "possible implementation of the snapshot or just copies up every layer and then",
    "start": "1715510",
    "end": "1723150"
  },
  {
    "text": "we use the snapshot service from contribute create the G RPC service",
    "start": "1723150",
    "end": "1729690"
  },
  {
    "text": "register it and then listen that's",
    "start": "1729690",
    "end": "1734710"
  },
  {
    "text": "pretty much it so let's show that running let me also show you the what",
    "start": "1734710",
    "end": "1745480"
  },
  {
    "text": "the config is going to look like it showed it earlier but in this case so",
    "start": "1745480",
    "end": "1750610"
  },
  {
    "text": "you can see the proxy plug-in section this test s tests s is test SS is going",
    "start": "1750610",
    "end": "1758500"
  },
  {
    "text": "to be the test snapshot ur so that's actually gonna be the name of the",
    "start": "1758500",
    "end": "1763660"
  },
  {
    "text": "snapshot or that's used and you'll see that in a second and this is the actual path which it will connect to so let me",
    "start": "1763660",
    "end": "1773140"
  },
  {
    "text": "go ahead and run this snap shudder",
    "start": "1773140",
    "end": "1778500"
  },
  {
    "text": "okay so this is just running that binary you can see that same path it's going to",
    "start": "1781390",
    "end": "1787030"
  },
  {
    "text": "use this directory for snapshots should be running let's go ahead and pull an",
    "start": "1787030",
    "end": "1795309"
  },
  {
    "text": "image from local registry I have so you",
    "start": "1795309",
    "end": "1802450"
  },
  {
    "text": "can see in this command on just going to use a demo namespace so this is actually",
    "start": "1802450",
    "end": "1807520"
  },
  {
    "text": "my running container D that I have so I have images and stuff that I just use",
    "start": "1807520",
    "end": "1813190"
  },
  {
    "text": "normally for either development or just running containers so I'm just going to create a demo namespace this is the same",
    "start": "1813190",
    "end": "1819549"
  },
  {
    "text": "snapshot or name that you saw inside the config and then we're just gonna do CTRM ages pull",
    "start": "1819549",
    "end": "1825030"
  },
  {
    "text": "from a local registry it's really fast cuz it didn't have to go over the",
    "start": "1825030",
    "end": "1831100"
  },
  {
    "text": "network let's look inside it was temp test plug-in routes so this",
    "start": "1831100",
    "end": "1842770"
  },
  {
    "text": "is this is what the native snapshot r is going to do so it's going to have a database file as well as the snapshots",
    "start": "1842770",
    "end": "1849130"
  },
  {
    "text": "directory and then these are the actual snapshots so as I said this is this is a",
    "start": "1849130",
    "end": "1855010"
  },
  {
    "text": "the simplest snapshot ur so if I look inside 6 that should be the last one created it's just going to be a normal",
    "start": "1855010",
    "end": "1862090"
  },
  {
    "text": "root FS when when it actually runs it's basically just going to be a bind mount",
    "start": "1862090",
    "end": "1868500"
  },
  {
    "text": "there's there's nothing too tricky there yeah let's take a look at I'll show you",
    "start": "1868500",
    "end": "1875049"
  },
  {
    "text": "some of the snapshot commands we have so we can use the same arguments you can also just set these as environment",
    "start": "1875049",
    "end": "1880809"
  },
  {
    "text": "variables so CTR snapshots LS that's",
    "start": "1880809",
    "end": "1886059"
  },
  {
    "text": "gonna just show you all your all your snapshots now it's just a lot of hashes",
    "start": "1886059",
    "end": "1892500"
  },
  {
    "text": "you can see that there's a key there's a parent there's a kind that kind basically just says whether or not it's",
    "start": "1892500",
    "end": "1898090"
  },
  {
    "text": "active meaning that you can make changes to it or committed meaning that it's immutable so let's call tree trees more",
    "start": "1898090",
    "end": "1905320"
  },
  {
    "text": "interesting output so so actually show you the relationships between them so you can still see that parentage but you",
    "start": "1905320",
    "end": "1912370"
  },
  {
    "text": "can also see here this one at the bottom this is going to the last one that was polled so this is",
    "start": "1912370",
    "end": "1917950"
  },
  {
    "text": "this would be the the uppermost layer for how most of us think about layers",
    "start": "1917950",
    "end": "1924030"
  },
  {
    "text": "even though here it's at the bottom that way so let me create a new snapshot so",
    "start": "1924030",
    "end": "1930040"
  },
  {
    "text": "I'm I'm gonna take this and I'm gonna do basically what what you're gonna do when you're initializing a snapshot or for a",
    "start": "1930040",
    "end": "1935830"
  },
  {
    "text": "container which is you're going to call snapshots prepare so I'm going to call this upper one it's using the same ID as",
    "start": "1935830",
    "end": "1944220"
  },
  {
    "text": "you saw as the upper from the tree that's just going to create a new",
    "start": "1944220",
    "end": "1949300"
  },
  {
    "text": "snapshot so if I run tree again you'll see that now there's this new there's",
    "start": "1949300",
    "end": "1955960"
  },
  {
    "text": "yeah there's there's a new snapshot and that snapshot is now above the other one",
    "start": "1955960",
    "end": "1961480"
  },
  {
    "text": "or where the parent is now that that previous snapshot that we mentioned so",
    "start": "1961480",
    "end": "1967750"
  },
  {
    "text": "let me go ahead and yeah let's let's mount that so I'm gonna make a directory",
    "start": "1967750",
    "end": "1975460"
  },
  {
    "text": "or already mounted it earlier sure it's empty yeah that's empty so in CTR we also have",
    "start": "1975460",
    "end": "1985960"
  },
  {
    "text": "a snapshots mount so snapshots",
    "start": "1985960",
    "end": "1991060"
  },
  {
    "text": "themselves don't know but when you run it you'll give you a mount that you can you can run remember what I said before",
    "start": "1991060",
    "end": "1997360"
  },
  {
    "text": "it's really simple it's just a bind mount so it's just this tool is just a convenience tool for helping you debug",
    "start": "1997360",
    "end": "2003990"
  },
  {
    "text": "it will just give you a mount command that you can run I'm not write as root let me see do that so now when I go back",
    "start": "2003990",
    "end": "2012000"
  },
  {
    "text": "to temp M you can actually see that there's a root filesystem there and you know I could true it into it and pretend",
    "start": "2012000",
    "end": "2018600"
  },
  {
    "text": "like I'm inside the containers it's the same thing that the it's the same thing that the runtimes going to do when it",
    "start": "2018600",
    "end": "2024300"
  },
  {
    "text": "goes to run the container but this is a good way to give you kind of visibility into the snapshots",
    "start": "2024300",
    "end": "2031940"
  },
  {
    "text": "let me demonstrate some cool stuff around garbage collection real quick and then we're",
    "start": "2032760",
    "end": "2038620"
  },
  {
    "text": "we're gonna be out of time so let me unknown that and then we're gonna so I'm",
    "start": "2038620",
    "end": "2048220"
  },
  {
    "text": "gonna go ahead and remove the Redis Alpine image so this is similar to what",
    "start": "2048220",
    "end": "2055960"
  },
  {
    "text": "I showed earlier so one actually delete that you'll see all the content got",
    "start": "2055960",
    "end": "2061750"
  },
  {
    "text": "garbage collected so you can see the garbage collection ran took eleven",
    "start": "2061750",
    "end": "2067290"
  },
  {
    "text": "eleven milliseconds and then a subset of that should be how long the the database was actually locked for during that time",
    "start": "2067290",
    "end": "2075580"
  },
  {
    "text": "it deleted all of these all of the content that's no longer used so if I",
    "start": "2075580",
    "end": "2081070"
  },
  {
    "text": "were to go back and actually try to look at the content I didn't show this",
    "start": "2081070",
    "end": "2087040"
  },
  {
    "text": "earlier but you would have seen all this content now there's actually nothing there but you can see that the the",
    "start": "2087040",
    "end": "2096398"
  },
  {
    "text": "snapshot is still there so let's now go ahead and let's just remove that upper I",
    "start": "2096399",
    "end": "2103510"
  },
  {
    "text": "already had adopted it earlier so now",
    "start": "2103510",
    "end": "2109930"
  },
  {
    "text": "that that uppers removed there was nothing else that was referencing any of those snapshots so if I go back through",
    "start": "2109930",
    "end": "2117910"
  },
  {
    "text": "here you can see actually all now all the snapshots got removed because as soon as I deleted that that",
    "start": "2117910",
    "end": "2126780"
  },
  {
    "text": "yes snapshot that I was referring to nothing else was referencing any of that",
    "start": "2126780",
    "end": "2132760"
  },
  {
    "text": "content so that's that's really how our garbage collector works you can kind of rely on it from the client perspective",
    "start": "2132760",
    "end": "2138670"
  },
  {
    "text": "did it can delete things quickly and it can delete things reliably so you know",
    "start": "2138670",
    "end": "2143710"
  },
  {
    "text": "that after after your command returns that something is deleted that it it is deleted that this the the metadata store",
    "start": "2143710",
    "end": "2151150"
  },
  {
    "text": "no longer has any reference to it the garbage clicked and runs very quickly and it runs fairly shortly after we also",
    "start": "2151150",
    "end": "2158980"
  },
  {
    "text": "have an ability to run it synchronously for some use cases where you actually need that data gone from disk so you can",
    "start": "2158980",
    "end": "2166720"
  },
  {
    "text": "delete images synchronously and with that I'm out of time",
    "start": "2166720",
    "end": "2171730"
  },
  {
    "text": "we rats we're at we're at time now but we're gonna be around for questions we",
    "start": "2171730",
    "end": "2177730"
  },
  {
    "text": "have maintained errs Steven day Mike Brown the less T's here so feel free to",
    "start": "2177730",
    "end": "2185109"
  },
  {
    "text": "come ask those questions I'll also be at the docker booth tomorrow at 10:30 if",
    "start": "2185109",
    "end": "2191559"
  },
  {
    "text": "you want to come and talk more about container D thank you all for attending",
    "start": "2191559",
    "end": "2197260"
  },
  {
    "text": "[Applause]",
    "start": "2197260",
    "end": "2204159"
  }
]