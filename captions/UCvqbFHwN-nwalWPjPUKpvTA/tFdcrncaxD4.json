[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "welcome everyone thank you for coming today my name is dick Lee I'm a co-founder and",
    "start": "60",
    "end": "7620"
  },
  {
    "text": "chief architect at platform 9 and today I want to talk about something we built",
    "start": "7620",
    "end": "13590"
  },
  {
    "text": "and it's a lesson about how to use kubernetes building blocks to create something useful so we built a tool to",
    "start": "13590",
    "end": "21630"
  },
  {
    "text": "make it really simple for us to deploy large numbers of services running on",
    "start": "21630",
    "end": "28590"
  },
  {
    "text": "behalf of many many customers and services that are exposed on the Internet and how to do this in a secure",
    "start": "28590",
    "end": "36540"
  },
  {
    "text": "enough way to isolate each customer and that's what we mean by multi-tenant ok",
    "start": "36540",
    "end": "42829"
  },
  {
    "text": "so to motivate today's talk let me briefly discuss our a use case at",
    "start": "42829",
    "end": "48690"
  },
  {
    "start": "43000",
    "end": "315000"
  },
  {
    "text": "platform 9 so we run open source software as a service for our enterprise",
    "start": "48690",
    "end": "54690"
  },
  {
    "text": "customers and we specialized in infrastructure management software that is why we offer an integrated product",
    "start": "54690",
    "end": "63840"
  },
  {
    "text": "that uses kubernetes for container management OpenStack for virtual",
    "start": "63840",
    "end": "69390"
  },
  {
    "text": "machines and fishing for server list functions now what makes is unique is",
    "start": "69390",
    "end": "76040"
  },
  {
    "text": "for these stacks we split the control plane and the data plane so that the",
    "start": "76040",
    "end": "82290"
  },
  {
    "text": "customers can run the data plane on the hardware of their choice which could include bare metal servers or their",
    "start": "82290",
    "end": "88170"
  },
  {
    "text": "public cloud instances and then we host the control plane and run it as a",
    "start": "88170",
    "end": "94170"
  },
  {
    "text": "service and then the two planes communicate securely over the Internet ok so what does a control plane look",
    "start": "94170",
    "end": "100890"
  },
  {
    "text": "like for kubernetes it would be the",
    "start": "100890",
    "end": "106049"
  },
  {
    "text": "master nodes that most of you are familiar with for OpenStack we would run dozens of services such as Nova API ok",
    "start": "106049",
    "end": "115170"
  },
  {
    "text": "that's one example and then on the other side our customers run the clients right",
    "start": "115170",
    "end": "123110"
  },
  {
    "text": "for example they could run web browsers CLI zazz decays and those would",
    "start": "123110",
    "end": "128940"
  },
  {
    "text": "typically communicate over HTTP over internet2 one of the control plane",
    "start": "128940",
    "end": "134230"
  },
  {
    "text": "services but there are also data plane agents which run close to the hardware",
    "start": "134230",
    "end": "140650"
  },
  {
    "text": "and those need to use binary protocols over TCP and examples include rabbitmq",
    "start": "140650",
    "end": "147760"
  },
  {
    "text": "and even my sequel and those connections tend to be mutually authenticated over",
    "start": "147760",
    "end": "153519"
  },
  {
    "text": "TLS okay so we are currently in a transition period and moving all of our",
    "start": "153519",
    "end": "162069"
  },
  {
    "text": "control plane services from VMs to containers and of course we want to use",
    "start": "162069",
    "end": "168700"
  },
  {
    "text": "kubernetes and take advantage of it we also want to use and run everything on a",
    "start": "168700",
    "end": "173739"
  },
  {
    "text": "shared kubernetes cluster to gain high utilization and of course all the",
    "start": "173739",
    "end": "179049"
  },
  {
    "text": "benefits you get from kubernetes so during this transition we wanted to",
    "start": "179049",
    "end": "185290"
  },
  {
    "text": "build a set of tools that would help our ops team automate as much of this as possible right something that lets them",
    "start": "185290",
    "end": "193150"
  },
  {
    "text": "very easily provision new customers new regions of customers deploy the services",
    "start": "193150",
    "end": "200169"
  },
  {
    "text": "make sure that they're exposed on the internet with dns names and secure",
    "start": "200169",
    "end": "205840"
  },
  {
    "text": "everything so that everything can be well isolated and support multiple",
    "start": "205840",
    "end": "211690"
  },
  {
    "text": "protocols such as HTTP and also some of the TCP binary protocols and since our",
    "start": "211690",
    "end": "217959"
  },
  {
    "text": "ops team is kind of ramping up on kubernetes and kubernetes can be pretty complex we also want our tool to",
    "start": "217959",
    "end": "226859"
  },
  {
    "text": "automate as much as possible you know automate a lot of the repetitive tasks",
    "start": "226859",
    "end": "232180"
  },
  {
    "text": "maybe abstract away some of the complexities of kubernetes without really hiding its true power and finally",
    "start": "232180",
    "end": "239709"
  },
  {
    "text": "we wanted to build something that is useful not to us but also to the community and that is why we started an",
    "start": "239709",
    "end": "247090"
  },
  {
    "text": "open-source project and this I'm going to talk about code the very first",
    "start": "247090",
    "end": "252759"
  },
  {
    "text": "generation because it's a work in progress",
    "start": "252759",
    "end": "256169"
  },
  {
    "text": "is called deployment cluster config and ops also known as deco and this is a",
    "start": "258389",
    "end": "264749"
  },
  {
    "text": "program that follows the typical kubernetes controller or operator pattern what it means is it declares new",
    "start": "264749",
    "end": "272129"
  },
  {
    "text": "custom resources that you as an admin can create in kubernetes and once it",
    "start": "272129",
    "end": "279029"
  },
  {
    "text": "detects those resources it'll just kick in and do a lot of automation for you and we'll talk a lot about this so for",
    "start": "279029",
    "end": "285960"
  },
  {
    "text": "example it'll manage DNS records and inside of the cluster it'll provision and teardown all the",
    "start": "285960",
    "end": "293580"
  },
  {
    "text": "resources that you need to coordinate kubernetes like namespaces deployment services and aggressive resources all",
    "start": "293580",
    "end": "300360"
  },
  {
    "text": "that stuff ok from a network security Decorah is going to use a combination of",
    "start": "300360",
    "end": "307229"
  },
  {
    "text": "two things and 2n TLS and also a network policy so having said that let's kind of",
    "start": "307229",
    "end": "316529"
  },
  {
    "start": "315000",
    "end": "572000"
  },
  {
    "text": "dive into some of the concepts exposed by deco we're gonna be talking about spaces apps and projects so let's start",
    "start": "316529",
    "end": "326279"
  },
  {
    "text": "with space so think of space as a naming and security boundary for a set of",
    "start": "326279",
    "end": "332310"
  },
  {
    "text": "internet facing services ok and in deco",
    "start": "332310",
    "end": "338750"
  },
  {
    "text": "we implement this as just a kubernetes name space with a DNS binding so that it",
    "start": "338750",
    "end": "345360"
  },
  {
    "text": "is visible on the internet at a well-known name to illustrate this let",
    "start": "345360",
    "end": "352349"
  },
  {
    "text": "me show you a little animation here so when you run deco it automatically creates a special namespace called echo",
    "start": "352349",
    "end": "357960"
  },
  {
    "text": "this is where you're going to upload your space resources ok and a space",
    "start": "357960",
    "end": "367259"
  },
  {
    "text": "resource describes several things but the two most important ones are the name",
    "start": "367259",
    "end": "372689"
  },
  {
    "text": "of the space and its domain name so the first thing that deco does is create a",
    "start": "372689",
    "end": "379409"
  },
  {
    "text": "namespace with that name so in this example it's called example space 1 and",
    "start": "379409",
    "end": "386219"
  },
  {
    "text": "then will create the DNS binding the way it does that is it first looks up the public IP or endpoint for the main",
    "start": "386219",
    "end": "394190"
  },
  {
    "text": "ingress service of the cluster okay and",
    "start": "394190",
    "end": "399260"
  },
  {
    "text": "then it's going to just communicate with a DNS provider to create a DNS record",
    "start": "399260",
    "end": "404500"
  },
  {
    "text": "and the record is going to create Maps the fully qualified domain name so in",
    "start": "404500",
    "end": "411590"
  },
  {
    "text": "this case example one sorry example space one platform nine net okay so now",
    "start": "411590",
    "end": "419030"
  },
  {
    "text": "things inside of that new namespace can be accessible from the outside it also populates the new namespace with",
    "start": "419030",
    "end": "427100"
  },
  {
    "text": "the number of resources to configure traffic management and security and",
    "start": "427100",
    "end": "433040"
  },
  {
    "text": "we'll talk about that later so now that you have a new namespace or a new space in deckle terms you are ready to",
    "start": "433040",
    "end": "441140"
  },
  {
    "text": "provision applications into it by creating app resources okay so let's",
    "start": "441140",
    "end": "449030"
  },
  {
    "text": "talk about apps so an app resource",
    "start": "449030",
    "end": "454580"
  },
  {
    "text": "really just represents an internet facing service and it's just a thin",
    "start": "454580",
    "end": "460250"
  },
  {
    "text": "wrapper around a pots back when you create an app resource you tell deco how",
    "start": "460250",
    "end": "466580"
  },
  {
    "text": "you want your service to be visible on the Internet then you have two choices",
    "start": "466580",
    "end": "472090"
  },
  {
    "text": "if it's HTTP service and you want to use a reverse proxy then you specify a",
    "start": "472090",
    "end": "480050"
  },
  {
    "text": "property called HTTP URL path okay what this means is if you set that",
    "start": "480050",
    "end": "486140"
  },
  {
    "text": "property then your service is going to be visible at this endpoint which is",
    "start": "486140",
    "end": "491150"
  },
  {
    "text": "HTTP slash slash the fqdn of your space",
    "start": "491150",
    "end": "496450"
  },
  {
    "text": "slash the URL path that you specify all right if you don't specify this property",
    "start": "496450",
    "end": "503870"
  },
  {
    "text": "deckle will assume that it's a TCP service and it will create a new fqdn",
    "start": "503870",
    "end": "510080"
  },
  {
    "text": "and DNS record for your service and the way it's going to name it is it's simply",
    "start": "510080",
    "end": "515120"
  },
  {
    "text": "going to concatenate the application name with the fqdn of",
    "start": "515120",
    "end": "520400"
  },
  {
    "text": "the space additionally you can specify a flag that determines whether when you do",
    "start": "520400",
    "end": "527840"
  },
  {
    "text": "a TLS handshake whether to verify the client's certificate using a well-known",
    "start": "527840",
    "end": "534520"
  },
  {
    "text": "route CA so that's the verified tcp client cert flag so here's an example of",
    "start": "534520",
    "end": "542390"
  },
  {
    "text": "an HTTP service Keystone which is mapped to the path slash Keystone and we use",
    "start": "542390",
    "end": "549290"
  },
  {
    "text": "this in OpenStack here's an example of a tcp on binary protocol service it does",
    "start": "549290",
    "end": "557570"
  },
  {
    "text": "not have the HTTP URL path and additionally it specifies that yes we do",
    "start": "557570",
    "end": "564080"
  },
  {
    "text": "want to authenticate the client TLS certificate next we have the concept of",
    "start": "564080",
    "end": "573980"
  },
  {
    "start": "572000",
    "end": "705000"
  },
  {
    "text": "a project this is really an optional feature of spaces okay and what it",
    "start": "573980",
    "end": "580430"
  },
  {
    "text": "allows you to do is restrict internal traffic within the cluster so normally",
    "start": "580430",
    "end": "585530"
  },
  {
    "text": "when you create a new space the pods in that space will accept traffic from any",
    "start": "585530",
    "end": "592580"
  },
  {
    "text": "other space within the cluster but you can restrict that by declaring this",
    "start": "592580",
    "end": "599300"
  },
  {
    "text": "field here called Project so here what I'm saying is only accept incoming",
    "start": "599300",
    "end": "604720"
  },
  {
    "text": "traffic from other spaces who also have their project set to death all right",
    "start": "604720",
    "end": "613000"
  },
  {
    "text": "internally deco uses a kubernetes network policy to enforce this and",
    "start": "613000",
    "end": "618610"
  },
  {
    "text": "hopefully I'll have time during the demo to show you what it looks like inside",
    "start": "618610",
    "end": "623980"
  },
  {
    "text": "here's an example of how you could use projects here we have two customers foo",
    "start": "623980",
    "end": "631190"
  },
  {
    "text": "and bar for which we've provisioned multiple spaces representing different",
    "start": "631190",
    "end": "636500"
  },
  {
    "text": "regions so for example we have food East and food West and to make sure that",
    "start": "636500",
    "end": "642760"
  },
  {
    "text": "within the customer the spaces can communicate with themselves but disallow",
    "start": "642760",
    "end": "649700"
  },
  {
    "text": "communication cross customers we set all the spaces",
    "start": "649700",
    "end": "655530"
  },
  {
    "text": "belonging to foo to have a project equal to also food okay and we do the same",
    "start": "655530",
    "end": "661380"
  },
  {
    "text": "thing with lar so they can talk to each other but not across customers we also",
    "start": "661380",
    "end": "669210"
  },
  {
    "text": "have a global space here running a service we its console and we use",
    "start": "669210",
    "end": "675450"
  },
  {
    "text": "it as a global configuration database so each pod when it starts up it needs to",
    "start": "675450",
    "end": "682200"
  },
  {
    "text": "talk to console in order to retrieve its configuration and so all spaces need to",
    "start": "682200",
    "end": "687240"
  },
  {
    "text": "be able to access console so what we did here is for the global space we set the",
    "start": "687240",
    "end": "692400"
  },
  {
    "text": "project to be empty and what that means is it can accept the traffic from any",
    "start": "692400",
    "end": "697950"
  },
  {
    "text": "other space ok last but not least let's",
    "start": "697950",
    "end": "710460"
  },
  {
    "start": "705000",
    "end": "857000"
  },
  {
    "text": "talk a little bit about traffic management so this is probably the most complex topic this is about network",
    "start": "710460",
    "end": "716100"
  },
  {
    "text": "routing and it's also about TLS termination which are related so deco is",
    "start": "716100",
    "end": "721830"
  },
  {
    "text": "built to accept multiple providers of traffic management the requirements",
    "start": "721830",
    "end": "727590"
  },
  {
    "text": "we've already discussed and you know it needs to support HTTP reverse proxy from from the internet and for TCP services",
    "start": "727590",
    "end": "735510"
  },
  {
    "text": "and need to support and 2n TLS authentication you know from the client",
    "start": "735510",
    "end": "742170"
  },
  {
    "text": "all the way to the pod and this has to be authenticated on a per customer or",
    "start": "742170",
    "end": "747510"
  },
  {
    "text": "per space or per app basis it is our",
    "start": "747510",
    "end": "752940"
  },
  {
    "text": "intent to integrate with service service meshes especially sto that's currently",
    "start": "752940",
    "end": "759510"
  },
  {
    "text": "in progress we are currently blocked by an issue in sto it's about sni support for multiple",
    "start": "759510",
    "end": "767940"
  },
  {
    "text": "server certificates it looks like they're working on this so I expect this to be fixed within weeks but luckily",
    "start": "767940",
    "end": "774990"
  },
  {
    "text": "deco also comes with its out-of-the-box very simple Traffic Manager and which",
    "start": "774990",
    "end": "781770"
  },
  {
    "text": "I'm going to describe today so to route traffic the out-of-the-box",
    "start": "781770",
    "end": "788850"
  },
  {
    "text": "manager uses off-the-shelf components and this is pretty interesting I think",
    "start": "788850",
    "end": "795589"
  },
  {
    "text": "it's using two ingress controllers one",
    "start": "795589",
    "end": "801299"
  },
  {
    "text": "of them is called k8 sniff this is a pretty neat controller that was first presented at the coupon Berlin so that",
    "start": "801299",
    "end": "810869"
  },
  {
    "text": "one's going to look at TLS traffic and if it finds a matching destination that",
    "start": "810869",
    "end": "816410"
  },
  {
    "text": "matches the SMI headers it's just going to direct traffic to that service if it",
    "start": "816410",
    "end": "822540"
  },
  {
    "text": "doesn't find a match is just going to punt it over to nginx which is going to handle HTTP and reverse proxying okay in",
    "start": "822540",
    "end": "832439"
  },
  {
    "text": "order to handle TLS termination dekha would inject s tunnel sidecar containers",
    "start": "832439",
    "end": "838170"
  },
  {
    "text": "into pods and those s tunnel sidecars need certificates and root cas to verify",
    "start": "838170",
    "end": "845549"
  },
  {
    "text": "identity so typically what you're going to do is you need to create and sign",
    "start": "845549",
    "end": "850709"
  },
  {
    "text": "your certificates outside of the cluster and then supply them to Dec go through secrets and we're going to look at an",
    "start": "850709",
    "end": "856049"
  },
  {
    "text": "example okay so here we have the Deco",
    "start": "856049",
    "end": "862679"
  },
  {
    "text": "namespace that I referred to earlier and this is the two ingress controllers that",
    "start": "862679",
    "end": "868139"
  },
  {
    "text": "I talked about they're configured to be chained one after the other so I'm first",
    "start": "868139",
    "end": "874799"
  },
  {
    "text": "going to upload two secrets containing certs and Cas for HTTP and TCP style",
    "start": "874799",
    "end": "882119"
  },
  {
    "text": "services and then I'm ready to create my space okay in this example it is a space",
    "start": "882119",
    "end": "889619"
  },
  {
    "text": "called foo West with a domain of platform nine net so the first thing",
    "start": "889619",
    "end": "895049"
  },
  {
    "text": "that deco does is create a namespace called foo west and then copy over the",
    "start": "895049",
    "end": "901230"
  },
  {
    "text": "secrets so that they can be used within the namespace and then it'll create an",
    "start": "901230",
    "end": "908089"
  },
  {
    "text": "HTTP ingress resource okay with a virtual host set to the fqdn of the",
    "start": "908089",
    "end": "914939"
  },
  {
    "text": "space which is foo west platform nine net it also initializes a rules table",
    "start": "914939",
    "end": "920610"
  },
  {
    "text": "for the paths and initially it's empty except for slash which goes to the",
    "start": "920610",
    "end": "926910"
  },
  {
    "text": "default service okay so now we're ready to populate the namespace with new",
    "start": "926910",
    "end": "932310"
  },
  {
    "text": "applications so the first example I'm going to show is my sequel which is a binary service",
    "start": "932310",
    "end": "939500"
  },
  {
    "text": "what deco does is it will create a deployment resource a service resource",
    "start": "939500",
    "end": "946759"
  },
  {
    "text": "for my sequel and notice that in the pods it also will inject an S tunnel ingress",
    "start": "946759",
    "end": "953370"
  },
  {
    "text": "container in order to process incoming TLS traffic and that s turn all will use",
    "start": "953370",
    "end": "958800"
  },
  {
    "text": "the secret that we configured earlier but since this is a TC sorry this is a",
    "start": "958800",
    "end": "964199"
  },
  {
    "text": "TCP service Decco also creates a TCP ingress resource which is just an",
    "start": "964199",
    "end": "970680"
  },
  {
    "text": "ingress resource but with an annotation that says that it is meant for the k8 sniff controller and I'll explain how",
    "start": "970680",
    "end": "977699"
  },
  {
    "text": "that works so now a client on the outside can connect to my sequel foo s",
    "start": "977699",
    "end": "986550"
  },
  {
    "text": "dot plot from nine net that'll get routed through the external load balancer and into K eight Smith which is",
    "start": "986550",
    "end": "996029"
  },
  {
    "text": "them going to look for a matching TCP ingress resource with the same host name in this case it does find it and that",
    "start": "996029",
    "end": "1005649"
  },
  {
    "text": "directs it to the my sequel service which takes us into the pod and there",
    "start": "1005649",
    "end": "1011930"
  },
  {
    "text": "the s tunnel container will terminate TLS and verify the identity of the",
    "start": "1011930",
    "end": "1017660"
  },
  {
    "text": "client and if everything is ok it'll forward to my sequel alright for a HTTP",
    "start": "1017660",
    "end": "1026839"
  },
  {
    "text": "app that's a keystone here we specify a path of slash Keystone for the reverse",
    "start": "1026839",
    "end": "1033230"
  },
  {
    "text": "proxy same thing deco is going to create the deployment it's going to create the service it's going to inject the",
    "start": "1033230",
    "end": "1039798"
  },
  {
    "text": "sidecars but since this is for HTTP it's also going to add a new rule to the path",
    "start": "1039799",
    "end": "1046308"
  },
  {
    "text": "array of the ingress source for HTTP so now if a client",
    "start": "1046309",
    "end": "1055070"
  },
  {
    "text": "accesses this URL HTTP foo West platform",
    "start": "1055070",
    "end": "1060259"
  },
  {
    "text": "9 net slash Keystone again it's going to go to K 8 sniff but this time it's not",
    "start": "1060259",
    "end": "1066200"
  },
  {
    "text": "going to find a matching TCP ingress resource so we've configured KH sniff to",
    "start": "1066200",
    "end": "1072110"
  },
  {
    "text": "just punt over any traffic that it doesn't recognize over to engine X so",
    "start": "1072110",
    "end": "1077179"
  },
  {
    "text": "now nginx will look for a matching HTTP ingress resource it finds one with the",
    "start": "1077179",
    "end": "1083059"
  },
  {
    "text": "the required virtual host name it follows that it also looks at the rules",
    "start": "1083059",
    "end": "1088970"
  },
  {
    "text": "table and finds a matching path and finally it directs the traffic to",
    "start": "1088970",
    "end": "1095659"
  },
  {
    "text": "Keystone all right now in addition to",
    "start": "1095659",
    "end": "1100669"
  },
  {
    "text": "all of this we also support internal traffic between applications when you",
    "start": "1100669",
    "end": "1107809"
  },
  {
    "text": "specify an app resource you can specify a list of egress entries for other apps",
    "start": "1107809",
    "end": "1114289"
  },
  {
    "text": "that you want to talk to and for that case Decco is going to inject additional s Tunnel containers for each of these",
    "start": "1114289",
    "end": "1120950"
  },
  {
    "text": "egress entries and encrypt the traffic and send it to the appropriate service",
    "start": "1120950",
    "end": "1128779"
  },
  {
    "text": "so the conclusion of all of this is deco",
    "start": "1128779",
    "end": "1133970"
  },
  {
    "text": "treats internal traffic just like external traffic right everything is meant or assumed to be insecure and so",
    "start": "1133970",
    "end": "1141529"
  },
  {
    "text": "you always have nth and TLS encryption and customers are isolated between each",
    "start": "1141529",
    "end": "1148159"
  },
  {
    "text": "other because they will have their will typically have different route CAS ok",
    "start": "1148159",
    "end": "1153529"
  },
  {
    "text": "different hierarchies and in addition to this as I spoke earlier we use network",
    "start": "1153529",
    "end": "1158899"
  },
  {
    "text": "policy with that concept of a project to add an additional layer of security all",
    "start": "1158899",
    "end": "1164539"
  },
  {
    "text": "right so I think that now we're ready",
    "start": "1164539",
    "end": "1171200"
  },
  {
    "start": "1168000",
    "end": "1350000"
  },
  {
    "text": "for a demo and I'm doing this over VPN I hope it doesn't crash so let me exit",
    "start": "1171200",
    "end": "1181380"
  },
  {
    "text": "this okay looks good",
    "start": "1181380",
    "end": "1192080"
  },
  {
    "text": "okay the deco control can run inside or outside of the cluster it doesn't matter",
    "start": "1192110",
    "end": "1197970"
  },
  {
    "text": "it's an operator let me start it in here I hate typing side aliased KC to cube",
    "start": "1197970",
    "end": "1206820"
  },
  {
    "text": "control huh I hope you forgive me so let's look at what's going on here so",
    "start": "1206820",
    "end": "1214320"
  },
  {
    "text": "we have the standard namespaces and also",
    "start": "1214320",
    "end": "1219750"
  },
  {
    "text": "the special deco namespace that i told you about and let's look at a bunch of",
    "start": "1219750",
    "end": "1227250"
  },
  {
    "text": "resources running into various namespaces so in deco as I said there",
    "start": "1227250",
    "end": "1232950"
  },
  {
    "text": "are two ingress controller services KH sniff and nginx and only k-8 sniff is",
    "start": "1232950",
    "end": "1238850"
  },
  {
    "text": "exposed to the outside world okay you'll remember this IP here no",
    "start": "1238850",
    "end": "1243900"
  },
  {
    "text": "we're gonna go back to that okay so we're ready to create our first space",
    "start": "1243900",
    "end": "1252470"
  },
  {
    "text": "it's going to be called dev one with a domain of platform 9 course you might",
    "start": "1252470",
    "end": "1258990"
  },
  {
    "text": "wonder why dot horse it's because we use this in dev and test and Dark Horse is",
    "start": "1258990",
    "end": "1264240"
  },
  {
    "text": "actually one of the cheapest domain names you can buy and one thing I forgot",
    "start": "1264240",
    "end": "1273270"
  },
  {
    "text": "to show you was I've also uploaded some secrets for MySpace so this one is we're",
    "start": "1273270",
    "end": "1283830"
  },
  {
    "text": "verifying TCP traffic and it has a CA in it in addition to the cert this one is a",
    "start": "1283830",
    "end": "1289110"
  },
  {
    "text": "wildcard certificate for the HTTP proxy so I have those two secrets specify here",
    "start": "1289110",
    "end": "1297410"
  },
  {
    "text": "so let's go ahead and create this dev",
    "start": "1297410",
    "end": "1302730"
  },
  {
    "text": "one well before I created this let's make sure that the host name that the",
    "start": "1302730",
    "end": "1309450"
  },
  {
    "text": "DNS is not set up yet okay so right now there's a results two nothing okay so create that one okay so",
    "start": "1309450",
    "end": "1321349"
  },
  {
    "text": "we created this face let's look at the resources that were created here's our",
    "start": "1321349",
    "end": "1329629"
  },
  {
    "text": "space and notice and something new here",
    "start": "1329629",
    "end": "1337840"
  },
  {
    "text": "there's something called dev one and that is the new name space corresponding to our deco space so if I say K again",
    "start": "1337840",
    "end": "1346119"
  },
  {
    "text": "you'll see dev 1 ok now let's see if",
    "start": "1346119",
    "end": "1351320"
  },
  {
    "start": "1350000",
    "end": "1448000"
  },
  {
    "text": "deco has created the DNS binding for us it has ok so now our space is accessible",
    "start": "1351320",
    "end": "1359239"
  },
  {
    "text": "to the internet using a well-known name and next we are ready to create our",
    "start": "1359239",
    "end": "1368960"
  },
  {
    "text": "first application and I'm going to use something we demo a lot it's called time",
    "start": "1368960",
    "end": "1375469"
  },
  {
    "text": "server it's kind of stupid but it's it's great for demos it's just a web server that returns the current time and the",
    "start": "1375469",
    "end": "1382190"
  },
  {
    "text": "pretty cute UI and this is just a regular spots back with some added",
    "start": "1382190",
    "end": "1388909"
  },
  {
    "text": "metadata and here we're saying that it will be mapped to the time server slash",
    "start": "1388909",
    "end": "1394099"
  },
  {
    "text": "time server path ok so let's create this guy and we need to create in the dev one",
    "start": "1394099",
    "end": "1401330"
  },
  {
    "text": "namespace oops",
    "start": "1401330",
    "end": "1409690"
  },
  {
    "text": "okay so we just created the app let's see if it appears anywhere oops you don't see let me resize this a",
    "start": "1413930",
    "end": "1427640"
  },
  {
    "text": "little bit okay so where's our app it is",
    "start": "1427640",
    "end": "1434210"
  },
  {
    "text": "here okay and you'll also notice that we've",
    "start": "1434210",
    "end": "1439280"
  },
  {
    "text": "created a deployment and there should be a service as well okay so if everything",
    "start": "1439280",
    "end": "1448640"
  },
  {
    "start": "1448000",
    "end": "1685000"
  },
  {
    "text": "worked well the service should be available through that URL okay there it",
    "start": "1448640",
    "end": "1456470"
  },
  {
    "text": "is but for a better visualization let me",
    "start": "1456470",
    "end": "1463130"
  },
  {
    "text": "copy this and paste it into Chrome okay",
    "start": "1463130",
    "end": "1477920"
  },
  {
    "text": "so it's just displaying the current time and there's one color per pod and",
    "start": "1477920",
    "end": "1483080"
  },
  {
    "text": "currently we only have one pod but since",
    "start": "1483080",
    "end": "1488870"
  },
  {
    "text": "this is just a regular deployment we can scale it to three pods let's see what",
    "start": "1488870",
    "end": "1498110"
  },
  {
    "text": "happens okay now we get three colors",
    "start": "1498110",
    "end": "1503570"
  },
  {
    "text": "okay pretty simple but it's showing that there's three pods backing the service now for our next example we're going to",
    "start": "1503570",
    "end": "1510860"
  },
  {
    "text": "look at a TCP type of app and I'm gonna",
    "start": "1510860",
    "end": "1516380"
  },
  {
    "text": "show you let's see my sequel where is there it is okay so",
    "start": "1516380",
    "end": "1523310"
  },
  {
    "text": "we're going to spawn a my sequel container with a root password set to",
    "start": "1523310",
    "end": "1528410"
  },
  {
    "text": "dummy and we are going to require client",
    "start": "1528410",
    "end": "1533480"
  },
  {
    "text": "verification for TLS and remembered that",
    "start": "1533480",
    "end": "1539660"
  },
  {
    "text": "for TCP type of apps we're going to create a new fqdn which is the app name followed by the fqdn of the space and",
    "start": "1539660",
    "end": "1547760"
  },
  {
    "text": "right now the DNS record does not exist so let's create okay we created my",
    "start": "1547760",
    "end": "1560840"
  },
  {
    "text": "sequel and now we have ooh wrong",
    "start": "1560840",
    "end": "1573830"
  },
  {
    "text": "namespace - and f1",
    "start": "1573830",
    "end": "1581289"
  },
  {
    "text": "okay we have my sequel running and once again there's a deployment there's a",
    "start": "1590539",
    "end": "1596119"
  },
  {
    "text": "service and let's look at ich a close look at the pod that's running notice",
    "start": "1596119",
    "end": "1601519"
  },
  {
    "text": "that there's two containers so if I say Casey that one descried let's see this",
    "start": "1601519",
    "end": "1613940"
  },
  {
    "text": "works okay here's our time server",
    "start": "1613940",
    "end": "1620629"
  },
  {
    "text": "container but also notice that we've injected a nest tunnel ingress to handle traffic coming in on four four three and",
    "start": "1620629",
    "end": "1632139"
  },
  {
    "text": "it's going to forward that to a my sequel container okay actually did I",
    "start": "1632829",
    "end": "1643549"
  },
  {
    "text": "look at the wrong I think this is up showing you time server",
    "start": "1643549",
    "end": "1650349"
  },
  {
    "text": "yeah I showed you the wrong one okay so",
    "start": "1661550",
    "end": "1670490"
  },
  {
    "text": "here we should see my sequel and with its last tunnel a container it's",
    "start": "1670490",
    "end": "1677630"
  },
  {
    "text": "listening on for 43 but then it's redirecting and forwarding to 3 306 which is the database container okay so",
    "start": "1677630",
    "end": "1688340"
  },
  {
    "text": "how about DNS DNS has been created for us and now we can connect to our",
    "start": "1688340",
    "end": "1695480"
  },
  {
    "text": "database over that well known name over the Internet except that it's enforcing",
    "start": "1695480",
    "end": "1700610"
  },
  {
    "text": "strict TLS so we can't just run our standard my sequel client against it so",
    "start": "1700610",
    "end": "1706550"
  },
  {
    "text": "what I've done is I have a local esto no configuration that uses the correct",
    "start": "1706550",
    "end": "1713980"
  },
  {
    "text": "client certificate to authenticate itself it's also using the correct see a",
    "start": "1713980",
    "end": "1719570"
  },
  {
    "text": "file to verify the server so I'm going to run s tunnel and now let's see if we",
    "start": "1719570",
    "end": "1728630"
  },
  {
    "text": "can connect to the database there we go",
    "start": "1728630",
    "end": "1734540"
  },
  {
    "text": "so database is ok so we're connected to",
    "start": "1734540",
    "end": "1739910"
  },
  {
    "text": "my sequel great the last thing I want to show you is you'll notice that our space",
    "start": "1739910",
    "end": "1748160"
  },
  {
    "text": "in set the project name to dev ok and as",
    "start": "1748160",
    "end": "1757550"
  },
  {
    "text": "explained earlier we use Network policies to enforce this inter space traffic and so somewhere in this list we",
    "start": "1757550",
    "end": "1766460"
  },
  {
    "text": "should see a network policy there it is ok so tip let's take a look at what's",
    "start": "1766460",
    "end": "1773270"
  },
  {
    "text": "inside that one again",
    "start": "1773270",
    "end": "1781180"
  },
  {
    "text": "okay so what you'll see here I don't know how much you know about network policies but there's various ways you",
    "start": "1782850",
    "end": "1788370"
  },
  {
    "text": "can specify who can do when who can i connect to what here we're saying only",
    "start": "1788370",
    "end": "1794880"
  },
  {
    "text": "allow incoming connections from the namespaces with a label that has this",
    "start": "1794880",
    "end": "1802049"
  },
  {
    "text": "pattern deco project equals death okay so that's what we expected but also",
    "start": "1802049",
    "end": "1808230"
  },
  {
    "text": "notice that we've inserted another one here for a mysterious namespace with a",
    "start": "1808230",
    "end": "1814620"
  },
  {
    "text": "label deco project ecosystem and the reason we had to do this was to allow traffic from the ingress controllers",
    "start": "1814620",
    "end": "1821340"
  },
  {
    "text": "right because remember @kh sniffing nginx if you didn't have this then the",
    "start": "1821340",
    "end": "1827580"
  },
  {
    "text": "space would not be able to get any traffic from the internet okay so we're",
    "start": "1827580",
    "end": "1834480"
  },
  {
    "text": "almost done in terms of road maps so",
    "start": "1834480",
    "end": "1842279"
  },
  {
    "text": "this is work in progress and from a security perspective I discussed how we",
    "start": "1842279",
    "end": "1847919"
  },
  {
    "text": "handle Network but we want to go one level further and isolate customers",
    "start": "1847919",
    "end": "1853590"
  },
  {
    "text": "between each other even deeper you've probably seen a lot of projects around",
    "start": "1853590",
    "end": "1859740"
  },
  {
    "text": "using virtual machines as a better way to isolate containers so this is kind of",
    "start": "1859740",
    "end": "1867809"
  },
  {
    "text": "our next step is to investigate integration with may or some of these technologies in terms of other things we",
    "start": "1867809",
    "end": "1876029"
  },
  {
    "text": "want to integrate with as I mentioned earlier service meshes we want to be",
    "start": "1876029",
    "end": "1881100"
  },
  {
    "text": "able to also take advantage of automatically setting up pod auto",
    "start": "1881100",
    "end": "1886440"
  },
  {
    "text": "scaling and perhaps note auto scaling and then we've looked at single more",
    "start": "1886440",
    "end": "1892860"
  },
  {
    "text": "kubernetes clusters but we would like to expand echo to support multiple availability zones and also kubernetes",
    "start": "1892860",
    "end": "1900059"
  },
  {
    "text": "Federation so that's some of the things we're going to investigate next and to",
    "start": "1900059",
    "end": "1908549"
  },
  {
    "text": "find out more there's a github repo we need to add some documentation and a lot of tests",
    "start": "1908549",
    "end": "1914050"
  },
  {
    "text": "you can visit our company website we",
    "start": "1914050",
    "end": "1919540"
  },
  {
    "text": "have some pretty interesting talks this week if you like to hear about server",
    "start": "1919540",
    "end": "1924910"
  },
  {
    "text": "lists and functions as a service we have a talk about fishing and a co speaker",
    "start": "1924910",
    "end": "1932170"
  },
  {
    "text": "and myself we're also going to be talking about how to run kubernetes clusters more cheaply and that's Friday",
    "start": "1932170",
    "end": "1938590"
  },
  {
    "text": "and that's it and thank you so much for coming here and thank you for your time",
    "start": "1938590",
    "end": "1946950"
  },
  {
    "text": "and I'll take some questions yeah this",
    "start": "1950530",
    "end": "1959470"
  },
  {
    "text": "is so a question do you have any customers or the answers were were the",
    "start": "1959470",
    "end": "1965620"
  },
  {
    "text": "first customer this is just brand new we're developing this as we go just to first meet our use case yes yes",
    "start": "1965620",
    "end": "1975660"
  },
  {
    "text": "no all the fqdn are mapped to the same endpoint or IP address which is the IP",
    "start": "1980730",
    "end": "1987820"
  },
  {
    "text": "address yes yes yes feel free to grab me",
    "start": "1987820",
    "end": "2002760"
  },
  {
    "text": "on the side or in the hallway or at our booth thank you",
    "start": "2002760",
    "end": "2008120"
  }
]