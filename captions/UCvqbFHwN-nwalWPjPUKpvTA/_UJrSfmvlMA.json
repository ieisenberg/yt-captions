[
  {
    "text": "hi everyone thanks for joining us for hereby services my name is stephen",
    "start": "1520",
    "end": "8080"
  },
  {
    "text": "and my name is laura and we're going to talk to you about the uncharted unexplored world of",
    "start": "8080",
    "end": "14320"
  },
  {
    "text": "multi-cluster services let's start with the map shall we this is the linux globe famous for",
    "start": "14320",
    "end": "21520"
  },
  {
    "text": "anachronistically representing an unknown region with the words here be dragons",
    "start": "21520",
    "end": "27439"
  },
  {
    "text": "they're in the corner here where it says hickson draconis",
    "start": "27439",
    "end": "33519"
  },
  {
    "text": "so this is a good setup for our conversation here about conversation about services across multiple clusters",
    "start": "33680",
    "end": "39920"
  },
  {
    "text": "we can imagine it like our kubernetes clusters our islands on this map separated by dangerous and",
    "start": "39920",
    "end": "46800"
  },
  {
    "text": "uncharted seas you want to open trade routes but that means having open ports and sending",
    "start": "46800",
    "end": "53039"
  },
  {
    "text": "ships which risk being attacked by pirates across those uncharted seas even if port access is controlled which",
    "start": "53039",
    "end": "60239"
  },
  {
    "text": "is good because you can then collect taxes there's a lot of effort in each port and since the seas are uncharted",
    "start": "60239",
    "end": "66720"
  },
  {
    "text": "how do other islands know about your ports",
    "start": "66720",
    "end": "71400"
  },
  {
    "text": "now there are some other ways that people have been trying to do this we are at the service mesh track of this",
    "start": "72320",
    "end": "77920"
  },
  {
    "text": "conference after all so istio is an option this is an open source service mesh that you can deploy",
    "start": "77920",
    "end": "84720"
  },
  {
    "text": "across your kubernetes clusters and vms in any provider it's super powerful but",
    "start": "84720",
    "end": "90159"
  },
  {
    "text": "not everyone chooses to implement a whole service mesh or it might have a smaller kubernetes deployment for which",
    "start": "90159",
    "end": "95439"
  },
  {
    "text": "it feels too heavy other folks choose to roll their own solution so sometimes people will stand",
    "start": "95439",
    "end": "101119"
  },
  {
    "text": "up a reverse proxy for example nginx between multiple clusters and handle the",
    "start": "101119",
    "end": "106240"
  },
  {
    "text": "configuration to request multiple back-ends themselves the downside is that there's no general",
    "start": "106240",
    "end": "112320"
  },
  {
    "text": "configuration pattern for this so you basically have to figure it out yourself",
    "start": "112320",
    "end": "117600"
  },
  {
    "text": "but there is another way so sig multi-cluster which steven and i are both part of have been working on a",
    "start": "123119",
    "end": "130160"
  },
  {
    "text": "standard that describes how to extend the existing kubernetes service concept to multiple clusters leading to the",
    "start": "130160",
    "end": "137120"
  },
  {
    "text": "multi-cluster services or mcs api the whole idea sigmulti cluster is going",
    "start": "137120",
    "end": "142879"
  },
  {
    "text": "for is to provide a multi-cluster solution that feels really natural to have people already use kubernetes",
    "start": "142879",
    "end": "148160"
  },
  {
    "text": "services today everything is modeled around the existing service primitive and mcs",
    "start": "148160",
    "end": "153440"
  },
  {
    "text": "defines the minimal amount of extra stuff needed to make them available across the clusters the goal is that",
    "start": "153440",
    "end": "159680"
  },
  {
    "text": "client applications should have barely any changes in order to use a multi-cluster service instead of a",
    "start": "159680",
    "end": "164800"
  },
  {
    "text": "cluster local service this api is based around the idea of a cluster set capital c capital s which is",
    "start": "164800",
    "end": "172239"
  },
  {
    "text": "some number of clusters that are working together the standard describes certain concepts that must hold true for",
    "start": "172239",
    "end": "177760"
  },
  {
    "text": "clusters participating in a cluster set for them to safely deploy service objects across multiple clusters",
    "start": "177760",
    "end": "184319"
  },
  {
    "text": "so let's talk about what those concepts are shall we first up is namespace sameness this is",
    "start": "184319",
    "end": "191360"
  },
  {
    "text": "the driving principle for mcs that shared namespaces across a cluster set should have the same contents everywhere",
    "start": "191360",
    "end": "197680"
  },
  {
    "text": "especially services this is similar to the idea of extending services to a cluster set or extending",
    "start": "197680",
    "end": "203360"
  },
  {
    "text": "namespaces to cluster sets think of it like when the same type of terrain or climate is shared across a",
    "start": "203360",
    "end": "209200"
  },
  {
    "text": "certain latitude on the map like we can see in our little map here with the colored regions existing across multiple",
    "start": "209200",
    "end": "214799"
  },
  {
    "text": "islands when it comes to climate on islands this means that the same type of plants can all grow in the same colored",
    "start": "214799",
    "end": "220879"
  },
  {
    "text": "regions plants that need the red region's climate could grow on the big island or on the smaller islands to the",
    "start": "220879",
    "end": "226480"
  },
  {
    "text": "south when it comes to clusters this is like the fact that if your name space exists across both of those clusters you would",
    "start": "226480",
    "end": "233439"
  },
  {
    "text": "expect the same services to be able to grow in both of those name spaces too",
    "start": "233439",
    "end": "238480"
  },
  {
    "text": "so in real practical terms this means that services in a given name space must be the same in any cluster in the",
    "start": "238480",
    "end": "244080"
  },
  {
    "text": "cluster set where they are deployed they will be considered functionally identical and the back ends of any",
    "start": "244080",
    "end": "249599"
  },
  {
    "text": "matching namespace name are safe to respond to any request for a service of that name and namespace no matter what",
    "start": "249599",
    "end": "255920"
  },
  {
    "text": "cluster in the clusters that they come from",
    "start": "255920",
    "end": "259680"
  },
  {
    "text": "the second concept is the mcs controller this is the agent that actually implements the behavioral requirements",
    "start": "261919",
    "end": "267680"
  },
  {
    "text": "of the specification sigma to cluster was very careful to define this broadly",
    "start": "267680",
    "end": "273120"
  },
  {
    "text": "the mcs controller could be a human typing cube cutter commands all day as long as they kept to the spec",
    "start": "273120",
    "end": "278720"
  },
  {
    "text": "the important point is that this mcs controller implements the cross-cluster synchronization needed by the mcs api",
    "start": "278720",
    "end": "285520"
  },
  {
    "text": "this includes synchronizing a number of kubernetes api objects across the cluster set",
    "start": "285520",
    "end": "290560"
  },
  {
    "text": "some of which are unique to the mcs api such as service exports and service imports and some of which are in the",
    "start": "290560",
    "end": "296960"
  },
  {
    "text": "core kubernetes api like endpoints and endpoint slices",
    "start": "296960",
    "end": "302080"
  },
  {
    "text": "so let's talk about some of those api objects especially the ones that are new in the mcs api",
    "start": "302080",
    "end": "308479"
  },
  {
    "text": "a service export is a really simple api object pretty much just name and namespace but",
    "start": "308479",
    "end": "314639"
  },
  {
    "text": "the point of it is to mark a service for export basically by creating a service export with the name and namespace of a",
    "start": "314639",
    "end": "321199"
  },
  {
    "text": "service you tell the controller that you want that service to be accessible in that same namespace across the cluster set",
    "start": "321199",
    "end": "329120"
  },
  {
    "text": "this is the main interaction point for a user or administrator with the mcs api you create these service exports the mcs",
    "start": "329120",
    "end": "337039"
  },
  {
    "text": "controller just consumes them so what does the mcs controller do with these service exports",
    "start": "337039",
    "end": "343840"
  },
  {
    "text": "to synchronize the information the mcs controller makes service import objects transporting the metadata",
    "start": "343840",
    "end": "350960"
  },
  {
    "text": "of the exported service and to each namespace same cluster in the cluster set it includes information like the type of",
    "start": "350960",
    "end": "357280"
  },
  {
    "text": "service and the ports and protocols of the originating service this information is used to create",
    "start": "357280",
    "end": "363360"
  },
  {
    "text": "endpoint slices which is part of the kubernetes api so we are back in core api territory which we left behind of",
    "start": "363360",
    "end": "370160"
  },
  {
    "text": "the service stage these are all resources that the mcs controller makes for you as part of its",
    "start": "370160",
    "end": "375600"
  },
  {
    "text": "role synchronizing the information across this cluster set",
    "start": "375600",
    "end": "381360"
  },
  {
    "text": "so together it's like this a service in one cluster can be marked for export by creating a matching",
    "start": "381360",
    "end": "387759"
  },
  {
    "text": "service exports in that cluster the mcs controller will watch those service exports and when it sees one",
    "start": "387759",
    "end": "394800"
  },
  {
    "text": "we'll create the corresponding service import in all clusters in the cluster set that have the same name space",
    "start": "394800",
    "end": "400960"
  },
  {
    "text": "the mts controller will also create the endpoint slices in each consuming cluster as well",
    "start": "400960",
    "end": "406639"
  },
  {
    "text": "as you can see the mcs controller is acting like a cargo ship transporting the information from a",
    "start": "406639",
    "end": "412160"
  },
  {
    "text": "service export into new service imports in all ports of call we hope you'll agree the mcs doesn't add",
    "start": "412160",
    "end": "418639"
  },
  {
    "text": "much to achieve its goal from kubernetes native services on the left",
    "start": "418639",
    "end": "423759"
  },
  {
    "text": "back to kubernetes native endpoint slices on the right",
    "start": "423759",
    "end": "428720"
  },
  {
    "text": "so we mentioned earlier that another goal of sigma type cluster was to minimize the amount of change required",
    "start": "430319",
    "end": "435759"
  },
  {
    "text": "in client applications this leads us to the magic ingredient which as you might have guessed is dns",
    "start": "435759",
    "end": "442720"
  },
  {
    "text": "multi-cluster services come with a multi-cluster dns this resolves a and srb queries for the",
    "start": "442720",
    "end": "449440"
  },
  {
    "text": "dot local domain so that consuming applications can determine what ip addresses to use to connect to",
    "start": "449440",
    "end": "454800"
  },
  {
    "text": "multi-cluster services simply by changing your classic.cluster.local to",
    "start": "454800",
    "end": "460840"
  },
  {
    "text": "clusterset.local there is a detailed spec with all the different dns forms required but for mcs",
    "start": "460840",
    "end": "466240"
  },
  {
    "text": "consumers there's two main kinds we expect people to interact with which we put on the slide here",
    "start": "466240",
    "end": "471360"
  },
  {
    "text": "so for cluster set ip services there's one main name the service name followed by the name space and then",
    "start": "471360",
    "end": "477759"
  },
  {
    "text": "that.sbc.clusterset.local this is a variant on the cluster local",
    "start": "477759",
    "end": "483039"
  },
  {
    "text": "service name continuing the practice of extending the standard core behaviors for headless services each pod hosting",
    "start": "483039",
    "end": "489440"
  },
  {
    "text": "the service in each cluster exposing the service gets a dns entry using its pod name and a cluster identifier which",
    "start": "489440",
    "end": "496319"
  },
  {
    "text": "we'll revisit at the end of this presentation the service name format is also supported and resolves to all active ip",
    "start": "496319",
    "end": "503680"
  },
  {
    "text": "addresses on which the service is available and on top of that srv records on the service name allow consumers to",
    "start": "503680",
    "end": "510240"
  },
  {
    "text": "enumerate the available pods and you'll actually see that in action later in the submariner demo",
    "start": "510240",
    "end": "516640"
  },
  {
    "text": "let's see how that all this works out in practice look at the architecture of submariner an open source project which happens to",
    "start": "519519",
    "end": "525600"
  },
  {
    "text": "implement most of the mcs api i'll also demo it later in the presentation so you'll get to see in",
    "start": "525600",
    "end": "530880"
  },
  {
    "text": "practice the first component in submariner is this data repository where submariner",
    "start": "530880",
    "end": "537600"
  },
  {
    "text": "calls the broker this is just a bunch of crds which are used to store the list of connected",
    "start": "537600",
    "end": "543440"
  },
  {
    "text": "clusters how to connect to them and any other information which needs to be synchronized",
    "start": "543440",
    "end": "549440"
  },
  {
    "text": "the crs using these crds are accessed using a kubernetes api endpoint this is typically typically provided by",
    "start": "549440",
    "end": "556640"
  },
  {
    "text": "a full-blown kubernetes cluster but it doesn't have to be it can also be hosted in one of the connected clusters instead of a",
    "start": "556640",
    "end": "562880"
  },
  {
    "text": "dedicated broker cluster now we know how to store information about clusters how do we go about",
    "start": "562880",
    "end": "569279"
  },
  {
    "text": "connecting them in the simple case each cluster has distinct siders so every product service",
    "start": "569279",
    "end": "575680"
  },
  {
    "text": "has an ip address which is unique across the cluster set to connect clusters",
    "start": "575680",
    "end": "581279"
  },
  {
    "text": "submariner expects the administrator or an infrastructure support tool to provide at least one gateway node in",
    "start": "581279",
    "end": "588080"
  },
  {
    "text": "each cluster submariner then opens tunnels between",
    "start": "588080",
    "end": "593760"
  },
  {
    "text": "each gateway pair and sets up networking rules in each node to route non-local traffic",
    "start": "593760",
    "end": "599440"
  },
  {
    "text": "through the gateway nodes to the other clusters the situation is a bit more complex if",
    "start": "599440",
    "end": "605839"
  },
  {
    "text": "any of the clusters have overlapping siders in this case submariner sets up an overlay network to",
    "start": "605839",
    "end": "611519"
  },
  {
    "text": "end up in a scenario close to the simple case each pod and service ends up with a unique address port combination in the",
    "start": "611519",
    "end": "617600"
  },
  {
    "text": "cluster set we add ports to the mix to reduce the ip address base requirements",
    "start": "617600",
    "end": "623839"
  },
  {
    "text": "now that we have connectivity we can start sharing services following the model we described earlier",
    "start": "623839",
    "end": "630000"
  },
  {
    "text": "in submariner this is handled by a component called lighthouse inside the cluster where the shared",
    "start": "630000",
    "end": "635040"
  },
  {
    "text": "service is hosted the lighthouse agent watches for service exports when a service export is created it",
    "start": "635040",
    "end": "641920"
  },
  {
    "text": "produces the corresponding service import and stores it in the broker",
    "start": "641920",
    "end": "647519"
  },
  {
    "text": "in other clusters the lighthouse agent watches for service imports in the broker and copies them locally",
    "start": "647519",
    "end": "653680"
  },
  {
    "text": "it also creates the corresponding endpoint slices which we'll see in the demo later on [Music]",
    "start": "653680",
    "end": "659279"
  },
  {
    "text": "once a service import is present in a cluster the corresponding service can be resolved using lighthouse's dns server",
    "start": "659279",
    "end": "666720"
  },
  {
    "text": "submariner configures each cluster's dns resolver to forward mcs queries in the",
    "start": "666720",
    "end": "672279"
  },
  {
    "text": "clusterset.local domain to the lighthouse dns resolver this checks for service imports and returns the",
    "start": "672279",
    "end": "678640"
  },
  {
    "text": "appropriate ip addresses those addresses are accessible directly thanks to the connectivity provided by",
    "start": "678640",
    "end": "684480"
  },
  {
    "text": "submariner all right we're going to switch over to some demos now i'm going to let laura",
    "start": "684480",
    "end": "693040"
  },
  {
    "text": "share her screen because she's going to show us how this works on gte first",
    "start": "693040",
    "end": "698720"
  },
  {
    "text": "all right thank you steven uh so what i want to show you here is how this works",
    "start": "700399",
    "end": "705920"
  },
  {
    "text": "on gke so first let me mention some of the setup so i have a terminal running over",
    "start": "705920",
    "end": "711440"
  },
  {
    "text": "here and i'm going to run this command to show you that i have these two clusters gk1 and gk2 they're there gk1",
    "start": "711440",
    "end": "717760"
  },
  {
    "text": "gkd and they're also both registered in the same cluster set so how we do that in gke is by being members of the same gk",
    "start": "717760",
    "end": "725440"
  },
  {
    "text": "hub so that's our version of a cluster registry we can check this out with this g cloud command g cloud container hub",
    "start": "725440",
    "end": "731360"
  },
  {
    "text": "memberships list so there they both are this is the output that it looks like but this is that they're both they both have",
    "start": "731360",
    "end": "737360"
  },
  {
    "text": "membership the same clusters yet and then the last thing i want to point out here for the setup is that they both have the same namespace cubecon so the",
    "start": "737360",
    "end": "743600"
  },
  {
    "text": "setup is two clusters they're in the same cluster set and they have the same namespace coupon",
    "start": "743600",
    "end": "750560"
  },
  {
    "text": "so let's look over here at this yaml that i've got this is the gamble we're working with so",
    "start": "750560",
    "end": "756720"
  },
  {
    "text": "on the left is the service object i already deployed this in my cluster along with the deployment backing it and",
    "start": "756720",
    "end": "762320"
  },
  {
    "text": "the important part here is that we have this namespace kubecon and this name where am i",
    "start": "762320",
    "end": "767360"
  },
  {
    "text": "and later in this demo i'm going to deploy this service export and this is the one with this exact same name space",
    "start": "767360",
    "end": "773040"
  },
  {
    "text": "kubecon and name where am i so that's the whole opt-in process for you as a user which i'm going to demonstrate if",
    "start": "773040",
    "end": "778639"
  },
  {
    "text": "you want to make sure that the service gets exported across your cluster set then you create a service export that matches its name and namespace exactly",
    "start": "778639",
    "end": "786959"
  },
  {
    "text": "so let's start here with my two clusters i've labeled my islands here gk1 gk2 and",
    "start": "786959",
    "end": "792959"
  },
  {
    "text": "gk1 is one where i have the service deployed on it but i haven't made that service export yet so i cannot access",
    "start": "792959",
    "end": "800000"
  },
  {
    "text": "anything from 2k1 the service from gk1 from gk2 nothing has been connected yet and i'm going to prove that over here um",
    "start": "800000",
    "end": "807360"
  },
  {
    "text": "i have another pod running in gk2 which i have a shell open",
    "start": "807360",
    "end": "812399"
  },
  {
    "text": "uh in this terminal window here um and i'm going to try and curl the multi-cluster dns name for the service",
    "start": "812399",
    "end": "819199"
  },
  {
    "text": "over in gk1 but we're going to get that response here in fact it doesn't even know what host we're talking about",
    "start": "819199",
    "end": "825760"
  },
  {
    "text": "uh because there's no uh multicultural genus has been set up right so there's no connectivity set up between the two of them yet",
    "start": "825760",
    "end": "832160"
  },
  {
    "text": "but what we're going to do here uh back over in this view is we are going to create the surface",
    "start": "832160",
    "end": "838959"
  },
  {
    "text": "export now and this is going to kick off the whole process that's going to make the service import and point slices and everything else happen in gk2",
    "start": "838959",
    "end": "845680"
  },
  {
    "text": "so i'll just cut that out real quick so you can you know just double check we're talking about this kubecon where am i",
    "start": "845680",
    "end": "851839"
  },
  {
    "text": "one that's what we're gonna do to mark our service for export and then i'm going to go ahead and apply this in gta",
    "start": "851839",
    "end": "857760"
  },
  {
    "text": "1 so i'm making the service export here in gk1 so once we have that service export the",
    "start": "857760",
    "end": "864399"
  },
  {
    "text": "magic starts to begin so the controller here is going to take all the metadata it needs from gko1 about the service and",
    "start": "864399",
    "end": "870720"
  },
  {
    "text": "any backends behind it and it's going to carry that over and replicate that in gk2",
    "start": "870720",
    "end": "876079"
  },
  {
    "text": "in the form of this service import so let's check out what that service import looks like so over in gk2",
    "start": "876079",
    "end": "882480"
  },
  {
    "text": "um i've got a command here where i'm going to look in gk2 for service imports in this name space so this can take a",
    "start": "882480",
    "end": "889600"
  },
  {
    "text": "second to get set up right our ferry is still chugging along across the ocean here so",
    "start": "889600",
    "end": "896480"
  },
  {
    "text": "we're gonna just check a couple times until it shows up",
    "start": "896480",
    "end": "901199"
  },
  {
    "text": "and if necessary use some movie magic to speed this up",
    "start": "901839",
    "end": "908519"
  },
  {
    "text": "okay great there it is right let me clear this out so we can see it beautifully all right so",
    "start": "912480",
    "end": "918880"
  },
  {
    "text": "uh here is what the service import looks like right so we can see there's some",
    "start": "918880",
    "end": "924000"
  },
  {
    "text": "information here from the originating service so like what ports it's exposing what type it is etc",
    "start": "924000",
    "end": "929680"
  },
  {
    "text": "and then we also have this the spec.ip so this is the vip assigned to this",
    "start": "929680",
    "end": "935920"
  },
  {
    "text": "multi-cluster service from gk2 so this is how gk2 knows how to get to back ends elsewhere in this case to gk1",
    "start": "935920",
    "end": "944639"
  },
  {
    "text": "so we can check to make sure that dns has gotten programmed too and just generally approve the",
    "start": "944639",
    "end": "950560"
  },
  {
    "text": "connectivity between the two of these over in our uh",
    "start": "950560",
    "end": "956880"
  },
  {
    "text": "dns window so actually i'm going to take this vip with me and first we're going to curl this bit",
    "start": "956880",
    "end": "962480"
  },
  {
    "text": "right so we get a response back and the response for this application that i have deployed in gk1 conveniently tells",
    "start": "962480",
    "end": "969920"
  },
  {
    "text": "us the cluster name that it's responding from right so we are successfully getting this response back from gk1 even",
    "start": "969920",
    "end": "975600"
  },
  {
    "text": "though again this pod that i'm curling from is in gk2 and then to see that dns is working as",
    "start": "975600",
    "end": "982240"
  },
  {
    "text": "well we can curl this where am i.q.svc.clusterset.local",
    "start": "982240",
    "end": "987360"
  },
  {
    "text": "see it's the same thing we're getting the backend from gk1 even though i'm making this request from gpa too so this",
    "start": "987360",
    "end": "993440"
  },
  {
    "text": "is the fun part right everything's connected together uh the dns is really easy to switch out we just put this like",
    "start": "993440",
    "end": "999120"
  },
  {
    "text": "set at the end cluster set.local instead of cluster um so that's kind of the basic setup",
    "start": "999120",
    "end": "1005440"
  },
  {
    "text": "but i'm also going to export the service from gk2 as well so that we can",
    "start": "1005440",
    "end": "1011279"
  },
  {
    "text": "see a little bit more going on so i'm going to go ahead and apply",
    "start": "1011279",
    "end": "1016399"
  },
  {
    "text": "some yaml that has my actual application in here",
    "start": "1016399",
    "end": "1021519"
  },
  {
    "text": "into gk2 so i'm creating this service and this deployment right the same one that i had put in gk1",
    "start": "1021519",
    "end": "1028640"
  },
  {
    "text": "and if i just left it as that then it's just a cluster local service but if i",
    "start": "1028640",
    "end": "1033839"
  },
  {
    "text": "also create a service export that matches it right so this thing the same one with",
    "start": "1033839",
    "end": "1040558"
  },
  {
    "text": "the same uh we can even double check it one more time that has this namespace cubecon and this name where am i which",
    "start": "1040559",
    "end": "1047280"
  },
  {
    "text": "is going to match our service that we just made gk2 then this is going to take",
    "start": "1047280",
    "end": "1052559"
  },
  {
    "text": "information the other way right so we're going to be taking getting our ferry to take some metadata from gk2 bring it",
    "start": "1052559",
    "end": "1059120"
  },
  {
    "text": "over to gk1 make service imports over there make endpoints over there",
    "start": "1059120",
    "end": "1064400"
  },
  {
    "text": "technically it will actually make this information available in gk2 as well uh so we'll actually take a look at that in",
    "start": "1064400",
    "end": "1070799"
  },
  {
    "text": "a second um but the point here is that because of namespace sameness we're going to consider every service",
    "start": "1070799",
    "end": "1077280"
  },
  {
    "text": "that has this name and namespace if it's been exported to be safe to respond to requests for that service regardless of",
    "start": "1077280",
    "end": "1083360"
  },
  {
    "text": "where the request originates from in the cluster set so this means that any cluster can",
    "start": "1083360",
    "end": "1089919"
  },
  {
    "text": "access any backend for the service regardless of cluster origin as long as it's exported everywhere",
    "start": "1089919",
    "end": "1095039"
  },
  {
    "text": "so i'm going to run some acute cuddle command over here and we're going to watch it for a while",
    "start": "1095039",
    "end": "1101679"
  },
  {
    "text": "to see when the end points actually get associated fully from gk2 with gk1 all in one the",
    "start": "1101679",
    "end": "1109120"
  },
  {
    "text": "multi-cluster service it takes a little second to come up so i'm going to kind of explain the details and maybe talk a little slower too um but what we're",
    "start": "1109120",
    "end": "1115760"
  },
  {
    "text": "looking at over here in the terminal is the endpoint slices inside gk2 and",
    "start": "1115760",
    "end": "1120799"
  },
  {
    "text": "you'll see for this cube vending space and you'll see that there's two instances here uh this first one here is",
    "start": "1120799",
    "end": "1128080"
  },
  {
    "text": "the cluster local service i just deployed the service in gk2 right so that's this is the endpoint slices for",
    "start": "1128080",
    "end": "1134080"
  },
  {
    "text": "that but then this uh 77 seconds ago right but this one here is our multi-cluster",
    "start": "1134080",
    "end": "1140880"
  },
  {
    "text": "service so this is more of an implementation detail on gke but the way we actually hold multi-cluster service",
    "start": "1140880",
    "end": "1146880"
  },
  {
    "text": "endpoints is by making a new service object and then that also creates new endpoints or endpoint slices uh in the",
    "start": "1146880",
    "end": "1153679"
  },
  {
    "text": "consuming cluster so that's what this sort of prefix here gk-mcs",
    "start": "1153679",
    "end": "1160039"
  },
  {
    "text": "this other name is here because that's how we implemented that in gke but the important part here is that right now",
    "start": "1160400",
    "end": "1167200"
  },
  {
    "text": "this multi-cluster service has the endpoint for uh gk1 and i'm expecting the",
    "start": "1167200",
    "end": "1173520"
  },
  {
    "text": "endpoint for gk2 to also get added in here and that's going to be evidence that all the connections are kind of",
    "start": "1173520",
    "end": "1179280"
  },
  {
    "text": "connected together and that over ngk1 and gke2 which is",
    "start": "1179280",
    "end": "1184480"
  },
  {
    "text": "what i'm watching right now then point slices are representing all the back ends of the multi-cluster service",
    "start": "1184480",
    "end": "1190799"
  },
  {
    "text": "so the reason this takes a second oh it already happened uh here we go sorry i've talked too slow maybe",
    "start": "1190799",
    "end": "1197440"
  },
  {
    "text": "so now we have the back ends for both of them in this endpoint object right i'll",
    "start": "1197440",
    "end": "1202880"
  },
  {
    "text": "make it a little bit more clear uh clear this out and take off my watch just so",
    "start": "1202880",
    "end": "1208080"
  },
  {
    "text": "we can see the full current state right so we have the cluster local service that's always going to exist here as",
    "start": "1208080",
    "end": "1213520"
  },
  {
    "text": "long as they deploy the service in this cluster and then here is the multi-cluster service that now knows both endpoints",
    "start": "1213520",
    "end": "1219200"
  },
  {
    "text": "so practically what this means is if i go back over here to my dns",
    "start": "1219200",
    "end": "1224320"
  },
  {
    "text": "world if i curl this dns name i'm actually going to load balance in",
    "start": "1224320",
    "end": "1230320"
  },
  {
    "text": "front of both gk1 and gk2 so you'll see sometimes i'm getting gta2 back sometimes i'm",
    "start": "1230320",
    "end": "1237280"
  },
  {
    "text": "getting gk one back even though i'm using the same dns name right we can do this a couple more times more gk1 now",
    "start": "1237280",
    "end": "1242720"
  },
  {
    "text": "gk2 now gk1 right so uh because these services are considered the same to us",
    "start": "1242720",
    "end": "1249360"
  },
  {
    "text": "they have the same name and name space deployed across the cluster then uh they can be load balanced across just like",
    "start": "1249360",
    "end": "1255360"
  },
  {
    "text": "your cluster ip services but in this case we call them cluster 7ip so there you have it that's your basic",
    "start": "1255360",
    "end": "1261440"
  },
  {
    "text": "cluster ip type service in a multi-clustered world and i'm going to hand it over to steven to show us how this works in submariner and also with a",
    "start": "1261440",
    "end": "1268320"
  },
  {
    "text": "headless service instead yep thank you laura so as laura said",
    "start": "1268320",
    "end": "1276080"
  },
  {
    "text": "i'll go pretty much over the same grounds but on submariner so i've set up two",
    "start": "1276080",
    "end": "1283679"
  },
  {
    "text": "two clusters cluster one and cluster two i'm using only submariner on kubernetes with no",
    "start": "1284960",
    "end": "1290559"
  },
  {
    "text": "fancy management tool so there's no gui to show but this guarantees that you'll be able to reproduce this in your own environment should you wish to do so and",
    "start": "1290559",
    "end": "1297360"
  },
  {
    "text": "assuming that your environment is supported by submariner i've already set up a broker on cluster",
    "start": "1297360",
    "end": "1302480"
  },
  {
    "text": "one so cluster one effectively represents both islands on the left",
    "start": "1302480",
    "end": "1307600"
  },
  {
    "text": "and both clusters are joined in a cluster set the same where my service that laura",
    "start": "1307600",
    "end": "1312640"
  },
  {
    "text": "used is set up on cluster two but this time as a headless service as you can see",
    "start": "1312640",
    "end": "1318240"
  },
  {
    "text": "here from the cluster ip setting so let's start by taking a look at the",
    "start": "1318240",
    "end": "1323919"
  },
  {
    "text": "services in the kubecon namespace on cluster2 and there we can see where am i and it",
    "start": "1323919",
    "end": "1330000"
  },
  {
    "text": "is a headless service we can look up its ip address from inside the cluster",
    "start": "1330000",
    "end": "1337200"
  },
  {
    "text": "and there we have two addresses for it and we can contact one either one to see its output",
    "start": "1337760",
    "end": "1346720"
  },
  {
    "text": "and so if i repeat that eventually there i've got the two different ip addresses",
    "start": "1346720",
    "end": "1352039"
  },
  {
    "text": "10.2.96 and 10.2.128. so this is on cluster 2 and from cluster",
    "start": "1352039",
    "end": "1358559"
  },
  {
    "text": "1 the service is on loan whether i use the cluster domain",
    "start": "1358559",
    "end": "1364320"
  },
  {
    "text": "or the cluster set domain as you might expect",
    "start": "1365360",
    "end": "1370559"
  },
  {
    "text": "but thanks to the connectivity that's provided by submariner we can access it from cluster one using one of the port",
    "start": "1372080",
    "end": "1378880"
  },
  {
    "text": "ips so i'll get a product uh get one of the pod addresses and contact",
    "start": "1378880",
    "end": "1385919"
  },
  {
    "text": "it from cluster one directly and we can see we get a response from 10.2",
    "start": "1385919",
    "end": "1392240"
  },
  {
    "text": "so let's actually export the service properly with submariner we could do this using a submariner tool called",
    "start": "1392240",
    "end": "1398320"
  },
  {
    "text": "subcutal but i'll show you how it's done using a service export cr",
    "start": "1398320",
    "end": "1403840"
  },
  {
    "text": "so that's it created and now the service can be discovered from cluster one",
    "start": "1405039",
    "end": "1411440"
  },
  {
    "text": "there we have both addresses again and this was indeed from cluster one and we can contact it",
    "start": "1411440",
    "end": "1417840"
  },
  {
    "text": "using the cluster set address and same again eventually i'll get a",
    "start": "1417840",
    "end": "1424320"
  },
  {
    "text": "response from a different ip address",
    "start": "1424320",
    "end": "1431400"
  },
  {
    "text": "but you might just have to trust me on that one now remember this is a headless service",
    "start": "1432000",
    "end": "1438000"
  },
  {
    "text": "and without cheating by looking at the cluster 2 pods in the cluster 2 cluster directly",
    "start": "1438000",
    "end": "1444400"
  },
  {
    "text": "we can find the endpoints by looking up the srv records so this is from cluster one again i'm going to look for the srv",
    "start": "1444400",
    "end": "1450559"
  },
  {
    "text": "records and we get back the two different host names here for the two pods and we also get back to",
    "start": "1450559",
    "end": "1457679"
  },
  {
    "text": "port number so this way we can figure out how to contact the endpoints",
    "start": "1457679",
    "end": "1463200"
  },
  {
    "text": "directly and so i'll do that right now so here we're just querying the srv",
    "start": "1463200",
    "end": "1469840"
  },
  {
    "text": "records again to get one of the host names so that's it here where am i 5c 5d etc",
    "start": "1469840",
    "end": "1476640"
  },
  {
    "text": "and we're contacting it on port 8080 and we get the response back",
    "start": "1476640",
    "end": "1482400"
  },
  {
    "text": "so let's take a look at the underlying data structures first the service imports on both clusters so i'll start",
    "start": "1483520",
    "end": "1488880"
  },
  {
    "text": "by class from cluster two so we have here one service import for where am i",
    "start": "1488880",
    "end": "1495440"
  },
  {
    "text": "and on cluster one we have two",
    "start": "1495440",
    "end": "1501279"
  },
  {
    "text": "this shows how submariner shares the data the entries in the submariner operator namespace are the cluster local copies and the",
    "start": "1501279",
    "end": "1508320"
  },
  {
    "text": "entry in the submariner case broker namespace is the broker copy so that's the shared copy that's copied everywhere",
    "start": "1508320",
    "end": "1517039"
  },
  {
    "text": "and the imports are used to produce endpoint slices so let's take a look at those",
    "start": "1517440",
    "end": "1523039"
  },
  {
    "text": "on cluster one this time so we have just the one endpoint slice",
    "start": "1523039",
    "end": "1528080"
  },
  {
    "text": "corresponding to the remote endpoints for the cluster sets and on cluster two",
    "start": "1528080",
    "end": "1534799"
  },
  {
    "text": "we get both we get two back one that's the cluster set uh endpoint slice and the other one",
    "start": "1534799",
    "end": "1541120"
  },
  {
    "text": "that's the cluster local and to finish off let's take a look at service availability i'll set up where",
    "start": "1541120",
    "end": "1548000"
  },
  {
    "text": "i'm on cluster one",
    "start": "1548000",
    "end": "1551120"
  },
  {
    "text": "here we go and i'll export it so this is the same as previously but on cluster one",
    "start": "1553120",
    "end": "1559200"
  },
  {
    "text": "and now if we take a look at the srv records we'll eventually see four pods so",
    "start": "1559200",
    "end": "1565120"
  },
  {
    "text": "there's just two for now and that's it four and they're on",
    "start": "1565120",
    "end": "1570480"
  },
  {
    "text": "the different clusters any one of those can answer",
    "start": "1570480",
    "end": "1575760"
  },
  {
    "text": "so if i'm a query from cluster one",
    "start": "1575760",
    "end": "1580640"
  },
  {
    "text": "i'm still getting back and a response from cluster two and now i've got one back from cluster one",
    "start": "1580960",
    "end": "1586799"
  },
  {
    "text": "cluster two again and if i drop the cluster two deployment the endpoints are immediately updated",
    "start": "1586799",
    "end": "1593440"
  },
  {
    "text": "and so i'll do a combined command that deletes and queries the srv records again",
    "start": "1593440",
    "end": "1599200"
  },
  {
    "text": "just to show you that it's actually immediate that's it dropped and we're back down to just two",
    "start": "1599200",
    "end": "1605760"
  },
  {
    "text": "entries for the srv records and if i redeploy where am i on cluster two the",
    "start": "1605760",
    "end": "1611440"
  },
  {
    "text": "endpoints will be restored so deploy again and now if i query again from cluster",
    "start": "1611440",
    "end": "1618159"
  },
  {
    "text": "one that's it we've got four",
    "start": "1618159",
    "end": "1626640"
  },
  {
    "text": "responses back and so that concludes the submariner demo and i'll hand back to laura",
    "start": "1626640",
    "end": "1632080"
  },
  {
    "text": "for the rest of the presentation awesome thanks so hopefully everybody got a good taste",
    "start": "1632080",
    "end": "1638159"
  },
  {
    "text": "the pilot's all works in practice today uh let's talk a little bit about what the future is for the ncs api",
    "start": "1638159",
    "end": "1645360"
  },
  {
    "text": "so as we've alluded to in this presentation there's parts of the mcs api that each individual implementation",
    "start": "1645360",
    "end": "1650480"
  },
  {
    "text": "is not fully supporting yet so as the standard becomes closer and closer to its final form ga",
    "start": "1650480",
    "end": "1656640"
  },
  {
    "text": "each implementation is working to converge towards the specification so that it can be considered fully mcs api",
    "start": "1656640",
    "end": "1662159"
  },
  {
    "text": "compliant for gka for example our implementation of multi-cluster headless services doesn't yet create endpoint slices in",
    "start": "1662159",
    "end": "1668320"
  },
  {
    "text": "the consuming clusters and doesn't provide srv records yet either for submariner cluster set ip services",
    "start": "1668320",
    "end": "1674640"
  },
  {
    "text": "aren't allocated as stable virtual ip that clients could actually use everything is handled through dns instead",
    "start": "1674640",
    "end": "1680240"
  },
  {
    "text": "but i point this out because this is one of the interesting things about working on the mcs api right now the spec and",
    "start": "1680240",
    "end": "1685600"
  },
  {
    "text": "the real world implementations are developing together so as sig multi-cluster debates points to include",
    "start": "1685600",
    "end": "1690720"
  },
  {
    "text": "in the spec we can try them out in the real world and come back and provide insights this has been particularly helpful to",
    "start": "1690720",
    "end": "1697039"
  },
  {
    "text": "distinguish between things that must belong in the standards and things that are just implementation",
    "start": "1697039",
    "end": "1702080"
  },
  {
    "text": "details this has been a really successful way to create a standard we feel confident is useful to everyone and is agnostic to",
    "start": "1702080",
    "end": "1708080"
  },
  {
    "text": "different technical stacks",
    "start": "1708080",
    "end": "1711640"
  },
  {
    "text": "great segue because the best feature for mcs would include even more implementations of the mcs api",
    "start": "1713200",
    "end": "1719360"
  },
  {
    "text": "as mentioned this is the best time to try more approaches and get more feedback while the standard is still in",
    "start": "1719360",
    "end": "1724640"
  },
  {
    "text": "development that being said there are a few other pieces still moving as well that cluster id that we need to make dns",
    "start": "1724640",
    "end": "1731600"
  },
  {
    "text": "records for multi-cluster headless services that is represented that is represented in a separate cap and the",
    "start": "1731600",
    "end": "1737440"
  },
  {
    "text": "crd is just recently an offer and is called cluster property getting that cluster property crd",
    "start": "1737440",
    "end": "1743360"
  },
  {
    "text": "implemented in each of the current implementations and moving it to beta and then ga is part of the process of",
    "start": "1743360",
    "end": "1749279"
  },
  {
    "text": "getting the mcs api to ga as well besides just pure mcs api",
    "start": "1749279",
    "end": "1754799"
  },
  {
    "text": "implementations like submariner and gkemcs we are also excited to see other",
    "start": "1754799",
    "end": "1759840"
  },
  {
    "text": "community projects standardize on top of the mcs api to make it easier to build more complex solutions using the same",
    "start": "1759840",
    "end": "1766720"
  },
  {
    "text": "mcs api we all now know and love the gateway api the new ingress solution",
    "start": "1766720",
    "end": "1772640"
  },
  {
    "text": "from sig network supports using service imports as back end references for ingress routes istio",
    "start": "1772640",
    "end": "1779120"
  },
  {
    "text": "itself is also implementing parts of the mcs api to make it easy for you to use mcs api first but when you do want the",
    "start": "1779120",
    "end": "1786399"
  },
  {
    "text": "more powerful servers mesh capabilities upgrade with very little changes to your application configuration",
    "start": "1786399",
    "end": "1793840"
  },
  {
    "text": "are you ready to try it out we invite you to install this yourself either using openshift or gke as demoed",
    "start": "1793840",
    "end": "1800320"
  },
  {
    "text": "today or installing the crds and submariner.io in your own clusters",
    "start": "1800320",
    "end": "1805440"
  },
  {
    "text": "submariner has a series of start guides on how to deploy this mcs controller yourself using clusters running on kind",
    "start": "1805440",
    "end": "1812799"
  },
  {
    "text": "k3s jke or rancher",
    "start": "1812799",
    "end": "1817200"
  },
  {
    "text": "finally sig multicluster would love for you all to get involved in the development of the mcs api and all the",
    "start": "1818000",
    "end": "1824159"
  },
  {
    "text": "other good multi-cluster projects we have going on we meet bi-weekly on tuesdays over zoom",
    "start": "1824159",
    "end": "1829840"
  },
  {
    "text": "and there was also a maintainer track talk published a few days ago with even more details about all the projects",
    "start": "1829840",
    "end": "1834880"
  },
  {
    "text": "we're working on so hopefully we can see you there thank you everyone and we will see you",
    "start": "1834880",
    "end": "1841120"
  },
  {
    "text": "at the q a",
    "start": "1841120",
    "end": "1844679"
  }
]