[
  {
    "start": "0",
    "end": "79000"
  },
  {
    "text": "thank you yeah so as eat I said I'm need",
    "start": "1280",
    "end": "7410"
  },
  {
    "text": "sweet and I'm a software engineer on the managed kubernetes products for",
    "start": "7410",
    "end": "12450"
  },
  {
    "text": "digitalocean and I am also the creator and Co contributor along with Lorenz",
    "start": "12450",
    "end": "17789"
  },
  {
    "text": "Bower a cloud cloud flare of the new tools eb PF library which is now in the",
    "start": "17789",
    "end": "23310"
  },
  {
    "text": "process of being slowly ported over to the cilium organization under the same",
    "start": "23310",
    "end": "28920"
  },
  {
    "text": "moniker it's a go only library with no C bindings and it comes with an assembler",
    "start": "28920",
    "end": "35040"
  },
  {
    "text": "and debugger CloudFlare has been using it in production for the past year and a half or so and yeah if you are embarking",
    "start": "35040",
    "end": "43230"
  },
  {
    "text": "on an e BPF journey yourself I would Lorenz and I and Joe stringer",
    "start": "43230",
    "end": "49680"
  },
  {
    "text": "who is also here at the conference for psyllium would be gratified for any pull",
    "start": "49680",
    "end": "56699"
  },
  {
    "text": "requests you might want to give us and yeah so he and Lorenz actually deserve",
    "start": "56699",
    "end": "66420"
  },
  {
    "text": "most of the credit for that library being great so I wanted to plug that",
    "start": "66420",
    "end": "71700"
  },
  {
    "text": "just because yeah we're trying to get some some hits on that so all right so",
    "start": "71700",
    "end": "80000"
  },
  {
    "start": "79000",
    "end": "237000"
  },
  {
    "text": "understanding in troubleshooting the eb PF data path with psyllium why should we",
    "start": "80000",
    "end": "85619"
  },
  {
    "text": "care the network is the bottleneck and I'm assuming most people in here and",
    "start": "85619",
    "end": "91140"
  },
  {
    "text": "know that the network is the most time I Oh bound thing you can do but I think",
    "start": "91140",
    "end": "97530"
  },
  {
    "text": "something that's new that people haven't talked about so much is that with the",
    "start": "97530",
    "end": "102689"
  },
  {
    "text": "advent of the public clouds writing main writing distributed systems has become",
    "start": "102689",
    "end": "107790"
  },
  {
    "text": "incredibly mainstream and we are largely running those distributed systems on",
    "start": "107790",
    "end": "113159"
  },
  {
    "text": "software that was designed in the 1970s and so getting insights determinism into",
    "start": "113159",
    "end": "120840"
  },
  {
    "text": "your network it's really hard the the tools that we have now are kind of unwieldy so I think that EBP f is an",
    "start": "120840",
    "end": "130590"
  },
  {
    "text": "interesting step forward I don't think it's necessarily the the final solution but it's I think it's a powerful tool",
    "start": "130590",
    "end": "138510"
  },
  {
    "text": "and it's uh I think as we'll see it it offers quite a bit in terms of",
    "start": "138510",
    "end": "144359"
  },
  {
    "text": "flexibility the other reason this is worth learning about is EB PF is kind of",
    "start": "144359",
    "end": "149730"
  },
  {
    "text": "spreading everywhere the Linux net devs seem to enjoy putting it everywhere they",
    "start": "149730",
    "end": "156629"
  },
  {
    "text": "can so whether or not we want to learn",
    "start": "156629",
    "end": "162120"
  },
  {
    "text": "eb PF i think we're gonna see linux kernel's that get built in the coming years that don't even have netfilter in",
    "start": "162120",
    "end": "168060"
  },
  {
    "text": "it anymore and so Li really rely on ebps I know that that's something psyllium",
    "start": "168060",
    "end": "173280"
  },
  {
    "text": "wants to do is offer zero IP tables CNI which is an interesting proposition and",
    "start": "173280",
    "end": "181349"
  },
  {
    "text": "the third reason is that metrics are money there was a great talk at the",
    "start": "181349",
    "end": "186449"
  },
  {
    "text": "Paris kernel recipes summit this year by a guy named Aurelien Rougerie and from",
    "start": "186449",
    "end": "191760"
  },
  {
    "text": "synesthesia and he had some great debugging more stories I linked to the",
    "start": "191760",
    "end": "197870"
  },
  {
    "text": "to the talk in the slides if you're if you want to look at it but he makes this really good point that like people don't",
    "start": "197870",
    "end": "206099"
  },
  {
    "text": "really want to worry about this stuff right like even if you are interested in systems programming you want to solve",
    "start": "206099",
    "end": "211409"
  },
  {
    "text": "interesting problems you don't want to understand why the UDP socket buffer maximum got hit in your kernel",
    "start": "211409",
    "end": "217919"
  },
  {
    "text": "distribution I mean maybe you do but if you do you're kind of weird and so",
    "start": "217919",
    "end": "224819"
  },
  {
    "text": "getting this stuff done quickly and efficiently means more money for you means more money for your organization's",
    "start": "224819",
    "end": "230609"
  },
  {
    "text": "makes your products better allows you to focus on problems that actually matter rather than tuning the Linux kernel so",
    "start": "230609",
    "end": "237500"
  },
  {
    "start": "237000",
    "end": "324000"
  },
  {
    "text": "okay what is EBP F I'm hoping that there's some familiarity with it but",
    "start": "237500",
    "end": "243900"
  },
  {
    "text": "I'll do just kind of a quick primer in case you're not EVP f stands for extended berkeley",
    "start": "243900",
    "end": "249539"
  },
  {
    "text": "packet filter and this is an example program of such here this is an x DP",
    "start": "249539",
    "end": "256229"
  },
  {
    "text": "program which stands for expressed data path and express data path programs can",
    "start": "256229",
    "end": "262199"
  },
  {
    "text": "be attached directly to network devices and specifically XDP programs can do things like drop pass and redirect",
    "start": "262199",
    "end": "269680"
  },
  {
    "text": "packets and it can do these things very efficiently because it's run almost immediately inside the kernel data path",
    "start": "269680",
    "end": "275740"
  },
  {
    "text": "so in this example that this program example is taking any packet that's an",
    "start": "275740",
    "end": "282790"
  },
  {
    "text": "art packet and dropping it if the source IP of the art packet is contained inside",
    "start": "282790",
    "end": "288340"
  },
  {
    "text": "this black list so we get this data structure we cast the void pointer to an",
    "start": "288340",
    "end": "294310"
  },
  {
    "text": "Ethernet packet we check the Ethernet protocol if it's ARP or if it's not our",
    "start": "294310",
    "end": "299770"
  },
  {
    "text": "we pass it so that means continue along the data path otherwise let's cast the",
    "start": "299770",
    "end": "305170"
  },
  {
    "text": "offset of the Ethernet packet into an art packet we look at the source IP of the art packet if it's in our block",
    "start": "305170",
    "end": "311590"
  },
  {
    "text": "blacklist we drop it if it's not we continue on down the data path so I hope",
    "start": "311590",
    "end": "317890"
  },
  {
    "text": "this is kind of a helpful illustration of what EBP F is it's it's programs and",
    "start": "317890",
    "end": "323080"
  },
  {
    "text": "maps and this this visualization hopefully helps a little bit as well we have a program running inside the kernel",
    "start": "323080",
    "end": "330130"
  },
  {
    "text": "it's doing something and it shares a map structure with user space that map structure contains the the maps that you",
    "start": "330130",
    "end": "337420"
  },
  {
    "text": "BPF are offer are quite extensive you can have cpu-bound maps so it's a data",
    "start": "337420",
    "end": "343480"
  },
  {
    "text": "structure per CPU so if you're doing receive channels on multiple CPUs you've",
    "start": "343480",
    "end": "349000"
  },
  {
    "text": "the CPU data structure live or the data structure lives on each CPU which obviously translates into quite a bit of",
    "start": "349000",
    "end": "356290"
  },
  {
    "text": "performance and then it can also just have configuration data right like I don't know what a good example would be",
    "start": "356290",
    "end": "363490"
  },
  {
    "text": "but these protocols get dropped or something like that so ye be PF e b PF",
    "start": "363490",
    "end": "370690"
  },
  {
    "text": "is fast it's a very compact amount of logic in a tight space and that lends",
    "start": "370690",
    "end": "379510"
  },
  {
    "text": "itself to being quite quite fast it's also just in time compiled so I don't know if how many people know this but",
    "start": "379510",
    "end": "386410"
  },
  {
    "text": "there is a compiler in your Linux kernel that compiles bytecode into raw arm",
    "start": "386410",
    "end": "391870"
  },
  {
    "text": "there's actually a risk v compiler now for EBP F I who ever wrote that",
    "start": "391870",
    "end": "398290"
  },
  {
    "text": "a brave person and eb PF is flexible and",
    "start": "398290",
    "end": "404770"
  },
  {
    "text": "what do i mean by this eb p f is just generalized code right",
    "start": "404770",
    "end": "410020"
  },
  {
    "text": "it's it can be c code there's a rust compiler so you can write and rust if you want it wouldn't surprise me if",
    "start": "410020",
    "end": "416140"
  },
  {
    "text": "someone writes a web assembly version of it because web assembly is everywhere",
    "start": "416140",
    "end": "421540"
  },
  {
    "text": "now so so yeah the the flexibility that allow it allows is is quite enormous and",
    "start": "421540",
    "end": "431110"
  },
  {
    "text": "for example the XDP program the linux kernel only cares about the return of past drop and redirects but within your code you",
    "start": "431110",
    "end": "438700"
  },
  {
    "text": "can kind of do whatever you want you it's a it's basically a micro service within the kernel and finally the eb BPF",
    "start": "438700",
    "end": "446050"
  },
  {
    "text": "separates data from functionality i think that's a really big argument in",
    "start": "446050",
    "end": "451510"
  },
  {
    "text": "its favor i think i hope everyone here",
    "start": "451510",
    "end": "457260"
  },
  {
    "text": "appreciates why separating functionality and data is a very powerful constructs",
    "start": "457260",
    "end": "465240"
  },
  {
    "text": "certainly we can achieve some of the things that eb PF can achieve with things like net filter and IP tables and",
    "start": "465240",
    "end": "472210"
  },
  {
    "text": "you can even track some amount of state with those things but i think that it's a lot easier to to create data-driven",
    "start": "472210",
    "end": "480310"
  },
  {
    "text": "stateful applications with DB PF rather than a ginormous iptables chain and i'm",
    "start": "480310",
    "end": "487720"
  },
  {
    "start": "486000",
    "end": "678000"
  },
  {
    "text": "just going to touch a brief history of eb PF because i said i would do that in the abstract so the the paper that kind",
    "start": "487720",
    "end": "495880"
  },
  {
    "text": "of kicked this off was by stephen mccain in 1993 he wrote this paper called the",
    "start": "495880",
    "end": "501340"
  },
  {
    "text": "bsd packet filter it's actually a really good read it's very what's the word I'm",
    "start": "501340",
    "end": "509620"
  },
  {
    "text": "looking for it's a it's an accessible read so you don't have to be a Linux kernel to have",
    "start": "509620",
    "end": "515110"
  },
  {
    "text": "to understand what he's trying to to drive at it in that paper and he based",
    "start": "515110",
    "end": "520659"
  },
  {
    "text": "this idea on the idea of packet filtration which had been around since the 70s but he was like well what if we",
    "start": "520660",
    "end": "527910"
  },
  {
    "text": "what if we put compilers and networks together and that ended up being a pretty bright",
    "start": "527910",
    "end": "534160"
  },
  {
    "text": "idea previously packet filtration was more of",
    "start": "534160",
    "end": "539290"
  },
  {
    "text": "an abstract concept you operated on known packet types in their fields",
    "start": "539290",
    "end": "544389"
  },
  {
    "text": "rather than having access to the like the robbed of the the robbed bytes just",
    "start": "544389",
    "end": "550570"
  },
  {
    "text": "as an aside I was kind of curious people talk a lot about the history of this",
    "start": "550570",
    "end": "557260"
  },
  {
    "text": "idea where did packet filtration come from and it seems like everyone was citing this paper that I just threw up",
    "start": "557260",
    "end": "562630"
  },
  {
    "text": "by Geoffrey mogul in 1987 where in the Xerox Alto is is labeled as being the",
    "start": "562630",
    "end": "571779"
  },
  {
    "text": "first packet filtration computer and I was really curious oh is that true and",
    "start": "571779",
    "end": "578199"
  },
  {
    "text": "indeed he does cite that the Xerox Alto in 76 was the first computer to have",
    "start": "578199",
    "end": "583329"
  },
  {
    "text": "this and I was curious since everyone's citing him what's his source and you",
    "start": "583329",
    "end": "588790"
  },
  {
    "text": "know there that's kind of an academic faux pas so I dick I dug a little",
    "start": "588790",
    "end": "594160"
  },
  {
    "text": "further and this turns out to be right because David Boggs and bends at Ethernet so indeed the Xerox Alto was",
    "start": "594160",
    "end": "600760"
  },
  {
    "text": "the first computer to have packet filtration okay so what is psyllium and",
    "start": "600760",
    "end": "607240"
  },
  {
    "text": "why should we care EB PF is easy to look at and understand",
    "start": "607240",
    "end": "613000"
  },
  {
    "text": "because it's flow control and see or rust or whatever you're writing but it",
    "start": "613000",
    "end": "618040"
  },
  {
    "text": "can be very difficult to configure maintain operate with and so having a",
    "start": "618040",
    "end": "624329"
  },
  {
    "text": "hardened wrapper that has all of this stuff built into it is I think quite useful and the psyllium is a good",
    "start": "624329",
    "end": "631839"
  },
  {
    "text": "general purpose wrapper that gets you motive what you need when you're dealing",
    "start": "631839",
    "end": "638350"
  },
  {
    "text": "with distributed systems and if you're familiar with kubernetes at all it the",
    "start": "638350",
    "end": "645819"
  },
  {
    "text": "the object names are very familiar and in fact they're pretty much identical and then as of one sex psyllium is both",
    "start": "645819",
    "end": "654040"
  },
  {
    "text": "a cni and a drop-in replacement for coop proxy so you can kick coop roxy to the",
    "start": "654040",
    "end": "660279"
  },
  {
    "text": "side if you're running psyllium one six or greater which is nice because coop rocks you can ping the API server quite",
    "start": "660279",
    "end": "667360"
  },
  {
    "text": "heavily iptables rules even if they're not running actually can slow down your data path and so it it can be very nice",
    "start": "667360",
    "end": "675460"
  },
  {
    "text": "to get rid of all that stuff alright so the next six slides I'm going to walk",
    "start": "675460",
    "end": "681760"
  },
  {
    "start": "678000",
    "end": "758000"
  },
  {
    "text": "through the kernel data path and we're gonna start at the hardware and I'll try",
    "start": "681760",
    "end": "689650"
  },
  {
    "text": "to highlight where cilium enters the fray hopefully it kind of makes sense as we go along I'm not gonna focus too much on",
    "start": "689650",
    "end": "697540"
  },
  {
    "text": "the hardware because we don't really need to know too much about it obviously it isn't useless to know this stuff",
    "start": "697540",
    "end": "703300"
  },
  {
    "text": "either so I'm gonna skip some of the steps here and just kind of focus on what happens when the driver is",
    "start": "703300",
    "end": "711130"
  },
  {
    "text": "initialized and packets are flowing so the network card gets assigned direct",
    "start": "711130",
    "end": "716980"
  },
  {
    "text": "memory access region in RAM the Linux kernel gives it that address space and",
    "start": "716980",
    "end": "723580"
  },
  {
    "text": "then when the network card receives the packet it sends it up to the memory",
    "start": "723580",
    "end": "728860"
  },
  {
    "text": "through the PCI bridge into something that effectively is like a ring buffer and then this generalized pull mechanism",
    "start": "728860",
    "end": "738280"
  },
  {
    "text": "in the linux kernel called the napi pull mechanism which is used by e-poll and the drivers and lots of basically",
    "start": "738280",
    "end": "744280"
  },
  {
    "text": "anything that's doing asynchronous work can use this generalized pull mechanism in the Linux kernel it's it's listening",
    "start": "744280",
    "end": "751750"
  },
  {
    "text": "for these packets and then it's processing them as they come in and so then we hit the CPU alright so then we",
    "start": "751750",
    "end": "762460"
  },
  {
    "start": "758000",
    "end": "875000"
  },
  {
    "text": "hit layer two most drivers are all dry all network card drivers implement a",
    "start": "762460",
    "end": "768760"
  },
  {
    "text": "polemic this this interface into this pull mechanism and they do lots of",
    "start": "768760",
    "end": "775240"
  },
  {
    "text": "different things but sort of the biggest thing they they do for our purposes is",
    "start": "775240",
    "end": "780460"
  },
  {
    "text": "they can call in to our first BPF program which is xdp this is where C",
    "start": "780460",
    "end": "785530"
  },
  {
    "text": "liam's network policies lived so this is where we can like drop packets and this",
    "start": "785530",
    "end": "791470"
  },
  {
    "text": "is where we can cut off a lot of work at the pass if",
    "start": "791470",
    "end": "796600"
  },
  {
    "text": "the xdp program passes and says this",
    "start": "796600",
    "end": "801850"
  },
  {
    "text": "this packet is good to go we move on to the next function that the driver pull function will call and that is clean Rx",
    "start": "801850",
    "end": "808150"
  },
  {
    "text": "and this is where the Linux kernel allocates a socket buffer for the packet",
    "start": "808150",
    "end": "814950"
  },
  {
    "text": "socket buffer isn't maybe the best name for what it is that makes you think like",
    "start": "814950",
    "end": "820330"
  },
  {
    "text": "oh there's a socket and it has a buffer it's just a generalized data structure",
    "start": "820330",
    "end": "825430"
  },
  {
    "text": "that wraps packets and then finally we go into the general receipt offload",
    "start": "825430",
    "end": "830910"
  },
  {
    "text": "queue this is a software implementation of a hardware specification called large",
    "start": "830910",
    "end": "837400"
  },
  {
    "text": "receive offload and what this does is if if you want if you haven't enabled you",
    "start": "837400",
    "end": "843220"
  },
  {
    "text": "can trade a little bit of latency for a lot of throughput and the packets will aggregate and grow and go into a",
    "start": "843220",
    "end": "850210"
  },
  {
    "text": "generalized queue that then will get processed so if you ever run TCP dump and you've seen undescribable large",
    "start": "850210",
    "end": "856090"
  },
  {
    "text": "packets coming in it's probably because you have gr o turned on and the kernel is giving you fake huge packets I'm not",
    "start": "856090",
    "end": "864310"
  },
  {
    "text": "going to focus on that too much because the more important part is getting into receiving the socket buffer and kind of",
    "start": "864310",
    "end": "870640"
  },
  {
    "text": "going up the layers so we call in to receive socket buffer and this is where",
    "start": "870640",
    "end": "876880"
  },
  {
    "start": "875000",
    "end": "973000"
  },
  {
    "text": "we can finally start to differentiate between layer 2 and layer 3 so when we call receive socket buffer if",
    "start": "876880",
    "end": "883150"
  },
  {
    "text": "the network card driver hasn't implemented xdp which a lot of them haven't although the list is growing",
    "start": "883150",
    "end": "889780"
  },
  {
    "text": "quite extensively then xdp will get called here again cilium zhn etwork",
    "start": "889780",
    "end": "895540"
  },
  {
    "text": "policies tend to live here among other things the next thing that we do is if there are some kind of tap interfaces",
    "start": "895540",
    "end": "902700"
  },
  {
    "text": "receive socket buffer function will send the packets into some of the tap",
    "start": "902700",
    "end": "907870"
  },
  {
    "text": "interfaces we don't need to worry about taps for cilium because there are none so we move on to the traffic classifier",
    "start": "907870",
    "end": "915570"
  },
  {
    "text": "the traffic classifier if anyone's worked with queue disciplines and the",
    "start": "915570",
    "end": "920770"
  },
  {
    "text": "Linux kernel before the traffic classifier can kind of deal with ease it can do some routing it can mangle",
    "start": "920770",
    "end": "926860"
  },
  {
    "text": "packets it can drop them and it drop them in a way in which it may or may not influence the overall statistics",
    "start": "926860",
    "end": "933630"
  },
  {
    "text": "of a classifier or queueing discipline which is really useful when you're trying to do",
    "start": "933630",
    "end": "939089"
  },
  {
    "text": "generalized traffic shaping finally we",
    "start": "939089",
    "end": "949380"
  },
  {
    "text": "hit the layer two net filter again I don't even think that cool proxy deals with the layer to net filter cilium",
    "start": "949380",
    "end": "956730"
  },
  {
    "text": "doesn't and so the next thing that we do is we move on to whatever the network",
    "start": "956730",
    "end": "963870"
  },
  {
    "text": "device is default protocol is 99% of the time that's IP or ipv6 I don't know",
    "start": "963870",
    "end": "972240"
  },
  {
    "text": "maybe some of you were running Apple talk but I don't so we have IP receive",
    "start": "972240",
    "end": "978389"
  },
  {
    "start": "973000",
    "end": "1089000"
  },
  {
    "text": "and the IP receive is I hope that you can see that what we're doing is we're",
    "start": "978389",
    "end": "983490"
  },
  {
    "text": "decap slating right we're truncating the layers and we're kind of trying to move up the stack so IP receive gets called",
    "start": "983490",
    "end": "990269"
  },
  {
    "text": "and the first thing that happens is we call net filter pre routing so if you've ever written IP tables pre routing",
    "start": "990269",
    "end": "996649"
  },
  {
    "text": "filters before this is where they exist and they can drop a redirect here we",
    "start": "996649",
    "end": "1003199"
  },
  {
    "text": "call IP receive finish we go into the routing package see Liam will use the",
    "start": "1003199",
    "end": "1009980"
  },
  {
    "text": "routing package if you're not tunneling so what that helps to do is that helps",
    "start": "1009980",
    "end": "1015709"
  },
  {
    "text": "to short-circuit the data path and move packets down into the beef pairs a lot",
    "start": "1015709",
    "end": "1021199"
  },
  {
    "text": "more quickly and then we call them that filter post routing these two net",
    "start": "1021199",
    "end": "1027290"
  },
  {
    "text": "filters I think are the things that could potentially go away in the future",
    "start": "1027290",
    "end": "1032500"
  },
  {
    "text": "so if you can imagine this flow diagram that I've created without any of the net",
    "start": "1032500",
    "end": "1037850"
  },
  {
    "text": "filter squares that could be a possibility in the future and finally we",
    "start": "1037850",
    "end": "1042860"
  },
  {
    "text": "get IP local deliver this is actually the protocol aware function so is this",
    "start": "1042860",
    "end": "1050720"
  },
  {
    "text": "TCP or UDP or maybe it's some other defined protocol that we we don't know",
    "start": "1050720",
    "end": "1056780"
  },
  {
    "text": "about there are other protocols that the kernel can call into they're usually",
    "start": "1056780",
    "end": "1061909"
  },
  {
    "text": "kernel modules though so I don't want to we don't need to really worry about them and then we hit",
    "start": "1061909",
    "end": "1067519"
  },
  {
    "text": "the transform policy and this is where things like IPSec live UDP de capsulate things love that nature and then finally",
    "start": "1067519",
    "end": "1076340"
  },
  {
    "text": "we reach a layer for protocol and I'm gonna focus on UDP because I don't want",
    "start": "1076340",
    "end": "1081950"
  },
  {
    "text": "to chase the TCP state machine around the Linux kernel because it's quite unwieldy so imagine that it is TCP and",
    "start": "1081950",
    "end": "1094539"
  },
  {
    "start": "1089000",
    "end": "1157000"
  },
  {
    "text": "it's a useful lie I guess so we receive",
    "start": "1094539",
    "end": "1100340"
  },
  {
    "text": "our UDP packet and now we have a port number we finally have something that can map us into user space and so we're",
    "start": "1100340",
    "end": "1106940"
  },
  {
    "text": "nearing the end of the bottom half of our work here UDP receive finds the socket it goes",
    "start": "1106940",
    "end": "1113840"
  },
  {
    "text": "through one more transform policy the the layer 4 protocols can go through transform policies for the cilium CNI",
    "start": "1113840",
    "end": "1121730"
  },
  {
    "text": "they do not and then the sockets have two data structures they have a receive",
    "start": "1121730",
    "end": "1126980"
  },
  {
    "text": "Q which is just a list of the socket buffers that are waiting to be processed",
    "start": "1126980",
    "end": "1132139"
  },
  {
    "text": "in user space and then it has a weight queue and if you remember that napi pull",
    "start": "1132139",
    "end": "1137570"
  },
  {
    "text": "mechanism those are the that is the data structure that the different poll",
    "start": "1137570",
    "end": "1142850"
  },
  {
    "text": "mechanisms inside the Linux kernel can use in order to route the packet up into user space so we push our socket buffer",
    "start": "1142850",
    "end": "1150559"
  },
  {
    "text": "onto the receive queue and we flip this special bit in the weight queue and now",
    "start": "1150559",
    "end": "1157880"
  },
  {
    "start": "1157000",
    "end": "1415000"
  },
  {
    "text": "we're we're nearing the end of our our packets journey so this is a socket",
    "start": "1157880",
    "end": "1165139"
  },
  {
    "text": "listening program it doesn't have any error tracking or whatever and the e-poll part of it isn't really strictly",
    "start": "1165139",
    "end": "1171169"
  },
  {
    "text": "speaking necessary because receive can do polls for UDP but again pretending that this is like kind of what we need",
    "start": "1171169",
    "end": "1177559"
  },
  {
    "text": "to do we allocate a socket we create an e poll instance we add the socket to to",
    "start": "1177559",
    "end": "1184220"
  },
  {
    "text": "e poll for listening for receive events and then we e poll wait",
    "start": "1184220",
    "end": "1190809"
  },
  {
    "text": "you pull weight and then when that weight cube it gets flipped that we",
    "start": "1193370",
    "end": "1200010"
  },
  {
    "text": "talked about the napi mechanism wakes be pulled up and then it comes back out of",
    "start": "1200010",
    "end": "1208200"
  },
  {
    "text": "user space well first it populates the events you're listening for or errors",
    "start": "1208200",
    "end": "1213330"
  },
  {
    "text": "out because sometimes a pull is wrong and then you come out of user space and",
    "start": "1213330",
    "end": "1220770"
  },
  {
    "text": "you can start processing your packet in this case we're doing UDP receive",
    "start": "1220770",
    "end": "1227100"
  },
  {
    "text": "message and so UDP pops the packet off so this so we're you know calling an",
    "start": "1227100",
    "end": "1233880"
  },
  {
    "text": "assist call now and UDP POC receive message pops the packets that we want to",
    "start": "1233880",
    "end": "1240270"
  },
  {
    "text": "process off of the sockets receive queue and then it runs them through two more BPF programs the first one we are",
    "start": "1240270",
    "end": "1247500"
  },
  {
    "text": "concerning ourselves with is the C group EBP F program this is pretty cool for cilium this allows for clients",
    "start": "1247500",
    "end": "1254580"
  },
  {
    "text": "transparent client-side load-balancing so if you've ever done client-side load balancing you know that your application",
    "start": "1254580",
    "end": "1260340"
  },
  {
    "text": "needs to be aware of it and you're just kind of doing it yourself in the application space helium has a",
    "start": "1260340",
    "end": "1267260"
  },
  {
    "text": "configuration thing that you can turn on that allows you to do client-side load balancing that's completely transparent",
    "start": "1267260",
    "end": "1273150"
  },
  {
    "text": "so you're hitting some load balance service in kubernetes and cilium can load balanced by a policy for you yeah",
    "start": "1273150",
    "end": "1282200"
  },
  {
    "text": "whoo proxy replacement there's a lot of",
    "start": "1282650",
    "end": "1288090"
  },
  {
    "text": "things that finally had to happen for coop proxy to get replaced but I think node ports was the biggest one which I",
    "start": "1288090",
    "end": "1295260"
  },
  {
    "text": "think would be a little bit higher up the stack but there's like there's a lot",
    "start": "1295260",
    "end": "1300720"
  },
  {
    "text": "of stuff that it's doing if you were following along with that saga you would",
    "start": "1300720",
    "end": "1306030"
  },
  {
    "text": "look at your your IP tables rules that queue proxy had generated and you would notice that none of them were being used",
    "start": "1306030",
    "end": "1311510"
  },
  {
    "text": "except for a handful and then as cilium get matured and matured and matured fewer and fewer of them were being used",
    "start": "1311510",
    "end": "1318980"
  },
  {
    "text": "but yeah trying to think",
    "start": "1318980",
    "end": "1324150"
  },
  {
    "text": "what made you say that way oh yeah no",
    "start": "1324150",
    "end": "1334320"
  },
  {
    "text": "that makes sense I sorry his what the reason he said that is because he's that koo proxy does do",
    "start": "1334320",
    "end": "1341220"
  },
  {
    "text": "with iptables it does some of this internal load balancing on the node my",
    "start": "1341220",
    "end": "1346289"
  },
  {
    "text": "impression is that koo proxy does a lot of that when it's receiving though correct okay so this is more when you're",
    "start": "1346289",
    "end": "1351720"
  },
  {
    "text": "egressing right you can do a transparent client-side egressing load balancing",
    "start": "1351720",
    "end": "1357470"
  },
  {
    "text": "which is I think this this is how I think psyllium and envoi work really",
    "start": "1357470",
    "end": "1363419"
  },
  {
    "text": "well together in this instance I I should say the psyllium guys told me to",
    "start": "1363419",
    "end": "1368970"
  },
  {
    "text": "say that I don't actually know why they told me to say that I don't know anything about em boy",
    "start": "1368970",
    "end": "1375090"
  },
  {
    "text": "so okay so our final our final BPF",
    "start": "1375090",
    "end": "1382110"
  },
  {
    "text": "program is socket operations and this is really useful for traffic shaping so if",
    "start": "1382110",
    "end": "1387240"
  },
  {
    "text": "we were dealing with tcp although there is some stuff it can do with UDP we can do really fine grained traffic shaping",
    "start": "1387240",
    "end": "1395640"
  },
  {
    "text": "at the socket level so this client over here for this server gets less bandwidth",
    "start": "1395640",
    "end": "1403080"
  },
  {
    "text": "than this one over here is the kind of thing you can do with sock ops and then",
    "start": "1403080",
    "end": "1408390"
  },
  {
    "text": "finally we reach the end of our journey and we have a buffer in user space",
    "start": "1408390",
    "end": "1415669"
  },
  {
    "start": "1415000",
    "end": "1538000"
  },
  {
    "text": "alright so this is kind of a an interesting map of kubernetes networking",
    "start": "1416510",
    "end": "1424260"
  },
  {
    "text": "objects to cilium networking objects to that terminal primitives so there are",
    "start": "1424260",
    "end": "1432390"
  },
  {
    "text": "more networking objects I realized them in kubernetes than what I've listed here but these are the primitive objects so",
    "start": "1432390",
    "end": "1439260"
  },
  {
    "text": "for example load balancers are node ports and cluster IPS which in turn are just service objects and so those map",
    "start": "1439260",
    "end": "1445740"
  },
  {
    "text": "pretty cleanly on to cilium service objects silly mess I mean you see what I was saying about the names being quite",
    "start": "1445740",
    "end": "1451409"
  },
  {
    "text": "similar so this chart looks good",
    "start": "1451409",
    "end": "1457049"
  },
  {
    "text": "but unfortunately the whole story with this charts is more complicated because",
    "start": "1457049",
    "end": "1462179"
  },
  {
    "text": "psyllium is actually pretty complicated in its implementation and there are two really big reasons for this that are",
    "start": "1462179",
    "end": "1468899"
  },
  {
    "text": "worth darling upon momentarily and the first one is that the data path is",
    "start": "1468899",
    "end": "1475620"
  },
  {
    "text": "complicated and the data path can change based on the version of the Linux kernel that you're running so the BPF programs weren't all there in",
    "start": "1475620",
    "end": "1487080"
  },
  {
    "text": "the beginning so for example the C group EPF program is quite new and so there",
    "start": "1487080",
    "end": "1493289"
  },
  {
    "text": "are lots of different ways of doing traffic shaping maybe in this version of",
    "start": "1493289",
    "end": "1498419"
  },
  {
    "text": "the Linux kernel there are drops happening in the traffic classifier rather than xdp I actually don't know if",
    "start": "1498419",
    "end": "1504510"
  },
  {
    "text": "I don't actually think that's a great example because I don't think that happens but that's Anna kind of example of what might be happening is that the",
    "start": "1504510",
    "end": "1511559"
  },
  {
    "text": "data path chart can kind of shift and then the other reason this is",
    "start": "1511559",
    "end": "1517169"
  },
  {
    "text": "complicated is that well what I was kind of talking about is just the the shape",
    "start": "1517169",
    "end": "1523409"
  },
  {
    "text": "of the data path changes based on your own your application logic as well so",
    "start": "1523409",
    "end": "1529279"
  },
  {
    "text": "depending on the policies that you implement they may or may not be implemented in these various programs so",
    "start": "1529279",
    "end": "1537169"
  },
  {
    "text": "all right so I'm gonna pull a little bit",
    "start": "1537169",
    "end": "1543210"
  },
  {
    "start": "1538000",
    "end": "1642000"
  },
  {
    "text": "of a bait-and-switch I hope the title slide kind of indicated this I titled",
    "start": "1543210",
    "end": "1550080"
  },
  {
    "text": "this talk understanding and troubleshooting and my my goal is to",
    "start": "1550080",
    "end": "1555330"
  },
  {
    "text": "kind of my goal and like this the slides are available to download and you can use them and I think we're gonna try to",
    "start": "1555330",
    "end": "1562350"
  },
  {
    "text": "release them under a Creative Commons license if people want to play with them or add to them or change them although",
    "start": "1562350",
    "end": "1568260"
  },
  {
    "text": "they'll be out of date in like six months probably yeah the goal was was",
    "start": "1568260",
    "end": "1577080"
  },
  {
    "text": "more understanding and the troubleshooting part is is more just understanding what's available so I",
    "start": "1577080",
    "end": "1583649"
  },
  {
    "text": "think the most useful resource really is the psyllium docker image itself so if you're running psyllium is",
    "start": "1583649",
    "end": "1589779"
  },
  {
    "text": "and I in the kubernetes cluster exacting into the cilium one of the cilium data set daemon sets",
    "start": "1589779",
    "end": "1596349"
  },
  {
    "text": "it gives you a lot of power and the two most useful tools in that docker image I",
    "start": "1596349",
    "end": "1603279"
  },
  {
    "text": "think are the cilium CLI itself which has a lot of functionality in it for debugging and then the second one is BPF",
    "start": "1603279",
    "end": "1610210"
  },
  {
    "text": "tool which is the tool that the Linux kernel devs wrote to deal with BPF and",
    "start": "1610210",
    "end": "1617249"
  },
  {
    "text": "one reason it's so cool that the cilium docker image has it is that it's not",
    "start": "1617249",
    "end": "1622299"
  },
  {
    "text": "mainline packaged with any of the normal distributions right now so if you're running a boom - if you're running",
    "start": "1622299",
    "end": "1628529"
  },
  {
    "text": "whatever you can't app get BPF tool right now there is a PR to get it into a",
    "start": "1628529",
    "end": "1635229"
  },
  {
    "text": "boom - soon but it's there and psyllium which is a good thing so I have a little",
    "start": "1635229",
    "end": "1640839"
  },
  {
    "text": "kind of video to show maybe what I can",
    "start": "1640839",
    "end": "1657759"
  },
  {
    "start": "1642000",
    "end": "1964000"
  },
  {
    "text": "do as a mirror",
    "start": "1657759",
    "end": "1660599"
  },
  {
    "text": "okay",
    "start": "1663730",
    "end": "1666330"
  },
  {
    "text": "there we go okay so what we have is we have this",
    "start": "1670650",
    "end": "1678749"
  },
  {
    "text": "service in kubernetes and it's throwing lots of 400s it's a load balancer with",
    "start": "1678749",
    "end": "1683759"
  },
  {
    "text": "the deployment and I'll shoot sorry that I got truncated there see if it and we",
    "start": "1683759",
    "end": "1691769"
  },
  {
    "text": "so we have this service and I'll just tell you what's happening since it's getting truncated I'm about to exec into",
    "start": "1691769",
    "end": "1697679"
  },
  {
    "text": "the cilium pod to see what's going wrong with it because the service is just throwing the 400s",
    "start": "1697679",
    "end": "1703129"
  },
  {
    "text": "so we're going to exec into it this is",
    "start": "1703129",
    "end": "1709769"
  },
  {
    "text": "really unfortunate the person next to who yeah that's a good point",
    "start": "1709769",
    "end": "1716809"
  },
  {
    "text": "good call",
    "start": "1716809",
    "end": "1720049"
  },
  {
    "text": "really okay where am I in this thing",
    "start": "1727800",
    "end": "1735540"
  },
  {
    "text": "okay so basically what happened is I exact into the psyllium pod and I ran a",
    "start": "1738840",
    "end": "1748390"
  },
  {
    "text": "command called psyllium endpoint list and what that did is that listed all the endpoints on that node it showed if they",
    "start": "1748390",
    "end": "1755800"
  },
  {
    "text": "had ingress or egress policies attached to them and then it gave me an endpoint ID and now what I'm about to do is I'm",
    "start": "1755800",
    "end": "1763960"
  },
  {
    "text": "about to run a program called psyllium monitor and psyllium monitor is basically like TCP dump it allows you to",
    "start": "1763960",
    "end": "1772140"
  },
  {
    "text": "monitor specific sockets even and within one endpoint or just specific endpoints",
    "start": "1772140",
    "end": "1779440"
  },
  {
    "text": "themselves so now I'm getting a hex dump of of what's going on in this application and there's lots of great",
    "start": "1779440",
    "end": "1787780"
  },
  {
    "text": "stuff that you can look at like it's it's protocol aware so it knows that the",
    "start": "1787780",
    "end": "1793030"
  },
  {
    "text": "connection has been acknowledged and connected and looking at the hex dump I",
    "start": "1793030",
    "end": "1798760"
  },
  {
    "text": "see that proxy protocol is enabled on the client side which that that was our",
    "start": "1798760",
    "end": "1807940"
  },
  {
    "text": "issue yeah we're using no proxy and we should be using proxy so let's fix that",
    "start": "1807940",
    "end": "1814530"
  },
  {
    "text": "and get rid of get rid of you know make the server proxy protocol aware we",
    "start": "1814530",
    "end": "1822640"
  },
  {
    "text": "redeploy it and I bet this is gonna work now okay it's a pre-recorded demo",
    "start": "1822640",
    "end": "1832260"
  },
  {
    "text": "so yeah and then the other tool I want to really highlight is object BPF tool",
    "start": "1834060",
    "end": "1840520"
  },
  {
    "text": "so it ran a little bit fast but basically I ran the command BPF tool net",
    "start": "1840520",
    "end": "1846520"
  },
  {
    "text": "and it dumped all the BPF network device programs that are attached so the if you",
    "start": "1846520",
    "end": "1854380"
  },
  {
    "text": "look at that list output you'll see that there are network device names and then",
    "start": "1854380",
    "end": "1859750"
  },
  {
    "text": "there are other things which are really useful specifically there is the name of",
    "start": "1859750",
    "end": "1865270"
  },
  {
    "text": "the program that's actually attached to the network device so we can go in to see Liam's repository go into BPF look",
    "start": "1865270",
    "end": "1873040"
  },
  {
    "text": "for the name of the program if the section name of the program is in there we can look for the section name and",
    "start": "1873040",
    "end": "1879480"
  },
  {
    "text": "that's actually the the actual BPF code",
    "start": "1879480",
    "end": "1884650"
  },
  {
    "text": "that's running on that device that's I think that's really useful because that",
    "start": "1884650",
    "end": "1890170"
  },
  {
    "text": "first of all I think that's easier than looking at a giant iptables chain but if",
    "start": "1890170",
    "end": "1895900"
  },
  {
    "text": "you're ever dealing with something with psyllium you can easily take a look at",
    "start": "1895900",
    "end": "1901090"
  },
  {
    "text": "the logic just by running that command so there's a couple of steps ok",
    "start": "1901090",
    "end": "1911400"
  },
  {
    "text": "and I think that's all I have",
    "start": "1913990",
    "end": "1919040"
  },
  {
    "text": "oh no I have one more thing that the cilium guys wanted me to say so they",
    "start": "1919040",
    "end": "1924740"
  },
  {
    "text": "just dropped a new open-source tool maybe a lot of you saw that this week called Hubble and it actually is a web",
    "start": "1924740",
    "end": "1932930"
  },
  {
    "text": "UI that does a lot of this stuff so you can get really fine grain insights into",
    "start": "1932930",
    "end": "1938390"
  },
  {
    "text": "your network down down to a very very granular level and see where why and",
    "start": "1938390",
    "end": "1947930"
  },
  {
    "text": "where drops are happening you can look at where the policies are taking effect",
    "start": "1947930",
    "end": "1954260"
  },
  {
    "text": "and kind of get better insight into the full data path of of your network and",
    "start": "1954260",
    "end": "1963610"
  },
  {
    "text": "that's it thank you very much thank you",
    "start": "1963610",
    "end": "1971690"
  },
  {
    "start": "1964000",
    "end": "2286000"
  },
  {
    "text": "Nathan we do have a couple of minutes for questions yeah if anybody wants to ask",
    "start": "1971690",
    "end": "1977930"
  },
  {
    "text": "questions I'm fine to stick around otherwise otherwise not yeah",
    "start": "1977930",
    "end": "1987280"
  },
  {
    "text": "I have a question that's kind of more general to BPF so we're running a lot of",
    "start": "1987660",
    "end": "1993540"
  },
  {
    "text": "logic inside of the kernel or resident to the kernel and I'm curious on you",
    "start": "1993540",
    "end": "2000530"
  },
  {
    "text": "know if there were a bug and a compromise of that bug you'd effectively be running in ring zero I'm getting full",
    "start": "2000530",
    "end": "2006140"
  },
  {
    "text": "control of the system so I'm just wondering like what does the colonel provide that's doing you know some",
    "start": "2006140",
    "end": "2012590"
  },
  {
    "text": "protection against say a rogue you know code that's that's running in BPM that's",
    "start": "2012590",
    "end": "2019760"
  },
  {
    "text": "a really great question so I think everyone probably heard that so there is",
    "start": "2019760",
    "end": "2025100"
  },
  {
    "text": "a verifier in the in the compiler but I think that's a really good point I mean",
    "start": "2025100",
    "end": "2031840"
  },
  {
    "text": "that's why I said an e BPF is a good step forward I don't think it's the end goal because yeah making your interface",
    "start": "2031840",
    "end": "2039320"
  },
  {
    "text": "Rob by code isn't really secure right so I am really interested to see if we can",
    "start": "2039320",
    "end": "2045650"
  },
  {
    "text": "come up with better solutions the network is really hard to get right and",
    "start": "2045650",
    "end": "2051370"
  },
  {
    "text": "it's very understandable why people want this mechanism because it just provides",
    "start": "2051370",
    "end": "2057050"
  },
  {
    "text": "the level of flexibility like an order of magnitude greater than than what we have but in some ways it is a step back",
    "start": "2057050",
    "end": "2064010"
  },
  {
    "text": "because yeah it's I mean some of the worst security headaches of the last two years have come from BPF so it's a",
    "start": "2064010",
    "end": "2070878"
  },
  {
    "text": "trade-off but the net dev mailing list won't have it any other way so yeah just just thinking so you sure",
    "start": "2070879",
    "end": "2084290"
  },
  {
    "text": "that code segment where the actual code was put into the kernel right see if it had a problem in the code what was",
    "start": "2084290",
    "end": "2091429"
  },
  {
    "text": "written boo to crash the kernel so",
    "start": "2091429",
    "end": "2097060"
  },
  {
    "text": "the verifier will probably I mean I'm not gonna say you couldn't crash the",
    "start": "2098480",
    "end": "2103710"
  },
  {
    "text": "colonel I think it'd be really hard to do because for example it doesn't allow you",
    "start": "2103710",
    "end": "2108869"
  },
  {
    "text": "to execute more like it this is configurable at compile time of the",
    "start": "2108869",
    "end": "2113910"
  },
  {
    "text": "colonel but it believe it will allow you to execute more than forty thousand ninety six instructions per program and",
    "start": "2113910",
    "end": "2121339"
  },
  {
    "text": "then the maps are also severely constrained right you have to tell before you run the program at compile",
    "start": "2121339",
    "end": "2128400"
  },
  {
    "text": "time you have to say how big this map can get so it the the programs are quite deterministic I'm sure that there's a",
    "start": "2128400",
    "end": "2136319"
  },
  {
    "text": "way to mess it up if you really wanted to but I would I would venture to say",
    "start": "2136319",
    "end": "2141690"
  },
  {
    "text": "that that's a pretty that's a I would say it's pretty safe and it's also why I",
    "start": "2141690",
    "end": "2147900"
  },
  {
    "text": "think it it's also why it's good to use something like psyllium and good to use open source code right because it's",
    "start": "2147900",
    "end": "2155579"
  },
  {
    "text": "being used in production by a lot of people so if you already have a what",
    "start": "2155579",
    "end": "2167220"
  },
  {
    "text": "module if you already have a netfilter kernel module would it be better to use",
    "start": "2167220",
    "end": "2173640"
  },
  {
    "text": "that or EBP eff is that the question that I mean I guess it just depends on",
    "start": "2173640",
    "end": "2179430"
  },
  {
    "text": "your use case yeah I would need to know",
    "start": "2179430",
    "end": "2185160"
  },
  {
    "text": "more about what the exact use case is in order to weigh in on that I don't know it's a good question yeah I to be clear",
    "start": "2185160",
    "end": "2193920"
  },
  {
    "text": "I don't want to like stand up here and see that say that EBP F is a panacea right the right tool for the right job",
    "start": "2193920",
    "end": "2200420"
  },
  {
    "text": "definitely don't just throw everything yeah don't throw everything out the window IP",
    "start": "2200420",
    "end": "2205920"
  },
  {
    "text": "tables is still it's still good and it's been around for a while one more and then can for the stage do you think if",
    "start": "2205920",
    "end": "2215430"
  },
  {
    "text": "I'm nowhere near needing the performance I'm nowhere near running up into IP",
    "start": "2215430",
    "end": "2222450"
  },
  {
    "text": "tables performance issues so is the tooling and I couldn't see it - I'll go",
    "start": "2222450",
    "end": "2228000"
  },
  {
    "text": "check it out layout is like the tool are you saying even independent of performances is the tooling there that",
    "start": "2228000",
    "end": "2234240"
  },
  {
    "text": "it would be compelling for me to do it this way independent performance I actually do",
    "start": "2234240",
    "end": "2241440"
  },
  {
    "text": "think that that is one of the unsung benefits of psyllium is that it is quite",
    "start": "2241440",
    "end": "2246599"
  },
  {
    "text": "easy to use it's I think it I personally think it's easier to grok sometimes than",
    "start": "2246599",
    "end": "2252840"
  },
  {
    "text": "looking at a giant iptables list it's easier to to find problems sometimes it",
    "start": "2252840",
    "end": "2260760"
  },
  {
    "text": "is kind of a one-stop shop whereas sometimes you're messing around with lots of different net tools in",
    "start": "2260760",
    "end": "2268310"
  },
  {
    "text": "traditional Linux yeah I will defer to",
    "start": "2268310",
    "end": "2275460"
  },
  {
    "text": "my earlier statement of networking is hard though all right I want to thank",
    "start": "2275460",
    "end": "2280950"
  },
  {
    "text": "again Nathan and don't forget to [Applause]",
    "start": "2280950",
    "end": "2288760"
  }
]