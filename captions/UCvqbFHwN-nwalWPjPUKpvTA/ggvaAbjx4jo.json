[
  {
    "text": "hello everyone uh welcome to our talk uh",
    "start": "1599",
    "end": "4160"
  },
  {
    "text": "today we're going to describe our",
    "start": "4160",
    "end": "5600"
  },
  {
    "text": "efforts to enable service mesh scenarios",
    "start": "5600",
    "end": "8080"
  },
  {
    "text": "on the windows platform uh using the",
    "start": "8080",
    "end": "10320"
  },
  {
    "text": "online proxy",
    "start": "10320",
    "end": "12160"
  },
  {
    "text": "uh hi my name is praveen balasubramanian",
    "start": "12160",
    "end": "14639"
  },
  {
    "text": "i currently work as an engineering",
    "start": "14639",
    "end": "16080"
  },
  {
    "text": "manager at microsoft i lead a",
    "start": "16080",
    "end": "17760"
  },
  {
    "text": "development team that focuses on the",
    "start": "17760",
    "end": "19520"
  },
  {
    "text": "core networking platform and the network",
    "start": "19520",
    "end": "22240"
  },
  {
    "text": "stack for windows",
    "start": "22240",
    "end": "23920"
  },
  {
    "text": "my recent work has focused on high",
    "start": "23920",
    "end": "25599"
  },
  {
    "text": "performance networking internet protocol",
    "start": "25599",
    "end": "28080"
  },
  {
    "text": "evolution and container networking",
    "start": "28080",
    "end": "30800"
  },
  {
    "text": "with me here today is nick",
    "start": "30800",
    "end": "33360"
  },
  {
    "text": "hey how are you doing so i'm nick",
    "start": "33360",
    "end": "34960"
  },
  {
    "text": "jackson i'm a developer advocate at",
    "start": "34960",
    "end": "36800"
  },
  {
    "text": "hashicorp and i'm also an smi maintainer",
    "start": "36800",
    "end": "39520"
  },
  {
    "text": "service mesh interface",
    "start": "39520",
    "end": "41200"
  },
  {
    "text": "i'm also writing a book on service mesh",
    "start": "41200",
    "end": "44079"
  },
  {
    "text": "patents with my good buddies liam paul",
    "start": "44079",
    "end": "47600"
  },
  {
    "text": "and i am incredibly excited about seeing",
    "start": "47600",
    "end": "50879"
  },
  {
    "text": "service mesh",
    "start": "50879",
    "end": "52320"
  },
  {
    "text": "absolutely everywhere including on",
    "start": "52320",
    "end": "54800"
  },
  {
    "text": "windows",
    "start": "54800",
    "end": "57800"
  },
  {
    "text": "hi everyone i'm sothiris and i'm",
    "start": "58079",
    "end": "60000"
  },
  {
    "text": "currently work as a software engineer at",
    "start": "60000",
    "end": "61520"
  },
  {
    "text": "microsoft i am maintainer of envoy proxy",
    "start": "61520",
    "end": "64720"
  },
  {
    "text": "and a core member of the envoy windows",
    "start": "64720",
    "end": "66479"
  },
  {
    "text": "development group",
    "start": "66479",
    "end": "67680"
  },
  {
    "text": "on envoy my work focuses on low-level",
    "start": "67680",
    "end": "70560"
  },
  {
    "text": "networking and supporting the windows",
    "start": "70560",
    "end": "72960"
  },
  {
    "text": "platform abstraction layer i'm also a",
    "start": "72960",
    "end": "75280"
  },
  {
    "text": "contributor at open service mass",
    "start": "75280",
    "end": "79040"
  },
  {
    "text": "hi everyone i'm kalia subramanian i'm a",
    "start": "79200",
    "end": "82240"
  },
  {
    "text": "software engineer at microsoft so",
    "start": "82240",
    "end": "84640"
  },
  {
    "text": "previously at microsoft i worked on",
    "start": "84640",
    "end": "86240"
  },
  {
    "text": "windows container networking and i",
    "start": "86240",
    "end": "87920"
  },
  {
    "text": "contributed to cube proxy flannel and",
    "start": "87920",
    "end": "91040"
  },
  {
    "text": "cube adm for windows",
    "start": "91040",
    "end": "93119"
  },
  {
    "text": "now i'm on the open service mesh team at",
    "start": "93119",
    "end": "95680"
  },
  {
    "text": "microsoft where i have been helping out",
    "start": "95680",
    "end": "98880"
  },
  {
    "text": "getting windows in osm and also working",
    "start": "98880",
    "end": "101600"
  },
  {
    "text": "on secured clusters for osm",
    "start": "101600",
    "end": "105280"
  },
  {
    "text": "so now let's get into our agenda",
    "start": "105280",
    "end": "109280"
  },
  {
    "text": "so what is on the agenda today",
    "start": "110960",
    "end": "113439"
  },
  {
    "text": "we will start out by recapping what is a",
    "start": "113439",
    "end": "115840"
  },
  {
    "text": "service mesh and we will make a case for",
    "start": "115840",
    "end": "118240"
  },
  {
    "text": "windows platform support",
    "start": "118240",
    "end": "120479"
  },
  {
    "text": "we will then describe the four major",
    "start": "120479",
    "end": "122399"
  },
  {
    "text": "components that are required for a",
    "start": "122399",
    "end": "124159"
  },
  {
    "text": "service mesh deployment",
    "start": "124159",
    "end": "126240"
  },
  {
    "text": "including the platform the proxy the",
    "start": "126240",
    "end": "128959"
  },
  {
    "text": "container orchestration system and the",
    "start": "128959",
    "end": "131520"
  },
  {
    "text": "service mesh control plane",
    "start": "131520",
    "end": "134000"
  },
  {
    "text": "we will then demo a service mesh",
    "start": "134000",
    "end": "136000"
  },
  {
    "text": "powering both windows and linux",
    "start": "136000",
    "end": "137680"
  },
  {
    "text": "containers",
    "start": "137680",
    "end": "139200"
  },
  {
    "text": "we will conclude with the summary and",
    "start": "139200",
    "end": "141760"
  },
  {
    "text": "our future roadmap",
    "start": "141760",
    "end": "144799"
  },
  {
    "text": "so what is a service mesh",
    "start": "147840",
    "end": "150319"
  },
  {
    "text": "in a nutshell it's a solution that",
    "start": "150319",
    "end": "152080"
  },
  {
    "text": "provides various enhancements to your",
    "start": "152080",
    "end": "154480"
  },
  {
    "text": "application's service to service",
    "start": "154480",
    "end": "156959"
  },
  {
    "text": "communication",
    "start": "156959",
    "end": "158640"
  },
  {
    "text": "in the context of kubernetes a service",
    "start": "158640",
    "end": "161120"
  },
  {
    "text": "mesh will inject a proxy such as onward",
    "start": "161120",
    "end": "164239"
  },
  {
    "text": "commonly called as a side car into",
    "start": "164239",
    "end": "166640"
  },
  {
    "text": "selected workload pods",
    "start": "166640",
    "end": "169360"
  },
  {
    "text": "site or proxy intercepts incoming and",
    "start": "169360",
    "end": "172480"
  },
  {
    "text": "outgoing traffic based on configured",
    "start": "172480",
    "end": "174640"
  },
  {
    "text": "policies",
    "start": "174640",
    "end": "176160"
  },
  {
    "text": "as you can see in this diagram",
    "start": "176160",
    "end": "178159"
  },
  {
    "text": "onward is intercepting all the inbound",
    "start": "178159",
    "end": "180720"
  },
  {
    "text": "and outbound traffic for two containers",
    "start": "180720",
    "end": "183280"
  },
  {
    "text": "running a node.js application",
    "start": "183280",
    "end": "186480"
  },
  {
    "text": "service mesh enables users to easily",
    "start": "186480",
    "end": "188800"
  },
  {
    "text": "apply features that the proxy offers",
    "start": "188800",
    "end": "191360"
  },
  {
    "text": "consistently and at scale",
    "start": "191360",
    "end": "195040"
  },
  {
    "text": "some of the prominent features of a",
    "start": "195040",
    "end": "196959"
  },
  {
    "text": "service mesh include",
    "start": "196959",
    "end": "198640"
  },
  {
    "text": "control traffic management for example",
    "start": "198640",
    "end": "201360"
  },
  {
    "text": "load balancing traffic splitting",
    "start": "201360",
    "end": "204000"
  },
  {
    "text": "applying policies such as rate limiting",
    "start": "204000",
    "end": "206239"
  },
  {
    "text": "or retries",
    "start": "206239",
    "end": "208000"
  },
  {
    "text": "service mesh also enables observability",
    "start": "208000",
    "end": "210560"
  },
  {
    "text": "of various metrics like service to",
    "start": "210560",
    "end": "212640"
  },
  {
    "text": "service latency request per second and",
    "start": "212640",
    "end": "215599"
  },
  {
    "text": "number of http errors etc",
    "start": "215599",
    "end": "218480"
  },
  {
    "text": "and finally a service mesh also improves",
    "start": "218480",
    "end": "220959"
  },
  {
    "text": "security by bringing encryption and",
    "start": "220959",
    "end": "223599"
  },
  {
    "text": "authentication for example by enforcing",
    "start": "223599",
    "end": "226159"
  },
  {
    "text": "mutual tls",
    "start": "226159",
    "end": "227599"
  },
  {
    "text": "and encrypting all the network traffic",
    "start": "227599",
    "end": "229440"
  },
  {
    "text": "in the cluster without any application",
    "start": "229440",
    "end": "232080"
  },
  {
    "text": "code changes",
    "start": "232080",
    "end": "234799"
  },
  {
    "text": "so you may ask why do we care about",
    "start": "236720",
    "end": "238879"
  },
  {
    "text": "service mesh on the windows platform",
    "start": "238879",
    "end": "242080"
  },
  {
    "text": "as you can see here a lot of users are",
    "start": "242080",
    "end": "244239"
  },
  {
    "text": "asking for a service mesh that supports",
    "start": "244239",
    "end": "246720"
  },
  {
    "text": "windows",
    "start": "246720",
    "end": "248319"
  },
  {
    "text": "in the industry many organizations have",
    "start": "248319",
    "end": "251200"
  },
  {
    "text": "a mixture of os platforms in their",
    "start": "251200",
    "end": "253360"
  },
  {
    "text": "environments",
    "start": "253360",
    "end": "254640"
  },
  {
    "text": "many customers are claiming that lack of",
    "start": "254640",
    "end": "256639"
  },
  {
    "text": "service mess support for windows is one",
    "start": "256639",
    "end": "259120"
  },
  {
    "text": "of the biggest blockers to containerize",
    "start": "259120",
    "end": "261359"
  },
  {
    "text": "their applications or even to bring",
    "start": "261359",
    "end": "263600"
  },
  {
    "text": "their enterprise workloads to the cloud",
    "start": "263600",
    "end": "266560"
  },
  {
    "text": "without a cross-platform service mesh",
    "start": "266560",
    "end": "268800"
  },
  {
    "text": "they face really hard choices",
    "start": "268800",
    "end": "271120"
  },
  {
    "text": "either rewrite the applications to run",
    "start": "271120",
    "end": "273120"
  },
  {
    "text": "on linux which is very expensive",
    "start": "273120",
    "end": "275680"
  },
  {
    "text": "or continue maintaining legacy",
    "start": "275680",
    "end": "277520"
  },
  {
    "text": "applications and infrastructure",
    "start": "277520",
    "end": "281199"
  },
  {
    "text": "there is also strong interest from many",
    "start": "281199",
    "end": "283520"
  },
  {
    "text": "microsoft first party applications which",
    "start": "283520",
    "end": "285919"
  },
  {
    "text": "are containerizing",
    "start": "285919",
    "end": "287919"
  },
  {
    "text": "they are adopting a microservices",
    "start": "287919",
    "end": "289520"
  },
  {
    "text": "architecture and desire a service mesh",
    "start": "289520",
    "end": "291840"
  },
  {
    "text": "that supports the windows platform for",
    "start": "291840",
    "end": "294160"
  },
  {
    "text": "all the benefits we talked about",
    "start": "294160",
    "end": "295840"
  },
  {
    "text": "previously",
    "start": "295840",
    "end": "297520"
  },
  {
    "text": "observability security and traffic",
    "start": "297520",
    "end": "300000"
  },
  {
    "text": "management",
    "start": "300000",
    "end": "302880"
  },
  {
    "text": "now let's look at the four components",
    "start": "304000",
    "end": "306000"
  },
  {
    "text": "that need to come together for a service",
    "start": "306000",
    "end": "308160"
  },
  {
    "text": "mesh solution",
    "start": "308160",
    "end": "310560"
  },
  {
    "text": "first up is the operating system",
    "start": "310560",
    "end": "312560"
  },
  {
    "text": "platform like linux or windows that",
    "start": "312560",
    "end": "315280"
  },
  {
    "text": "supports containers and container",
    "start": "315280",
    "end": "317120"
  },
  {
    "text": "networking",
    "start": "317120",
    "end": "318720"
  },
  {
    "text": "next up is the sidecar proxy that is",
    "start": "318720",
    "end": "321520"
  },
  {
    "text": "used to redirect traffic and has the",
    "start": "321520",
    "end": "323680"
  },
  {
    "text": "rich feature set for observability",
    "start": "323680",
    "end": "326720"
  },
  {
    "text": "security and traffic management",
    "start": "326720",
    "end": "329520"
  },
  {
    "text": "examples here include envoy and linkerd",
    "start": "329520",
    "end": "333280"
  },
  {
    "text": "next is the container orchestration",
    "start": "333280",
    "end": "335199"
  },
  {
    "text": "solution for example kubernetes",
    "start": "335199",
    "end": "338639"
  },
  {
    "text": "and finally",
    "start": "338639",
    "end": "340160"
  },
  {
    "text": "the service mesh control plane which",
    "start": "340160",
    "end": "342240"
  },
  {
    "text": "makes the solution scalable",
    "start": "342240",
    "end": "344320"
  },
  {
    "text": "and examples here are istio and open",
    "start": "344320",
    "end": "346960"
  },
  {
    "text": "service mesh or osm",
    "start": "346960",
    "end": "350400"
  },
  {
    "text": "the focus of our talk today",
    "start": "350400",
    "end": "352479"
  },
  {
    "text": "is the windows server operating system",
    "start": "352479",
    "end": "354960"
  },
  {
    "text": "and kubernetes is used for container",
    "start": "354960",
    "end": "357280"
  },
  {
    "text": "orchestration",
    "start": "357280",
    "end": "358800"
  },
  {
    "text": "our service mesh solution will be",
    "start": "358800",
    "end": "360880"
  },
  {
    "text": "completed by open service mesh which",
    "start": "360880",
    "end": "363520"
  },
  {
    "text": "uses envoy as the sidecar proxy",
    "start": "363520",
    "end": "368319"
  },
  {
    "text": "first let's begin by talking about the",
    "start": "370400",
    "end": "372319"
  },
  {
    "text": "first component which is the operating",
    "start": "372319",
    "end": "374319"
  },
  {
    "text": "system platform",
    "start": "374319",
    "end": "376560"
  },
  {
    "text": "windows server 2022 is the most recent",
    "start": "376560",
    "end": "379440"
  },
  {
    "text": "release of windows which is now",
    "start": "379440",
    "end": "381199"
  },
  {
    "text": "generally available",
    "start": "381199",
    "end": "382960"
  },
  {
    "text": "in this release we have added platform",
    "start": "382960",
    "end": "385039"
  },
  {
    "text": "capabilities to windows to support",
    "start": "385039",
    "end": "387280"
  },
  {
    "text": "traffic redirection for containers",
    "start": "387280",
    "end": "390240"
  },
  {
    "text": "the redirection works for both outbound",
    "start": "390240",
    "end": "392560"
  },
  {
    "text": "and inbound traffic and utilizes the",
    "start": "392560",
    "end": "394880"
  },
  {
    "text": "windows filtering platform capabilities",
    "start": "394880",
    "end": "397759"
  },
  {
    "text": "we have new host networking service or",
    "start": "397759",
    "end": "400080"
  },
  {
    "text": "hns apis",
    "start": "400080",
    "end": "402080"
  },
  {
    "text": "which support new policies for endpoints",
    "start": "402080",
    "end": "405120"
  },
  {
    "text": "these policies are applied on the",
    "start": "405120",
    "end": "406960"
  },
  {
    "text": "container host and they require admin",
    "start": "406960",
    "end": "408880"
  },
  {
    "text": "privileges",
    "start": "408880",
    "end": "410800"
  },
  {
    "text": "currently these apis only support tcp",
    "start": "410800",
    "end": "413440"
  },
  {
    "text": "over ipv4 but we do have future plans to",
    "start": "413440",
    "end": "416560"
  },
  {
    "text": "add support for udp and ipv6",
    "start": "416560",
    "end": "419440"
  },
  {
    "text": "we will take a deeper look at this",
    "start": "419440",
    "end": "421120"
  },
  {
    "text": "policy in a later slide",
    "start": "421120",
    "end": "424720"
  },
  {
    "text": "windows server 2022 also includes new",
    "start": "424880",
    "end": "427759"
  },
  {
    "text": "winsock socket apis that allow a sidecar",
    "start": "427759",
    "end": "430720"
  },
  {
    "text": "proxy to query the original destination",
    "start": "430720",
    "end": "433680"
  },
  {
    "text": "for a redirected connection these apis",
    "start": "433680",
    "end": "436960"
  },
  {
    "text": "are available on the latest sdk",
    "start": "436960",
    "end": "439520"
  },
  {
    "text": "and they've already been integrated with",
    "start": "439520",
    "end": "441919"
  },
  {
    "text": "the onboard proxy",
    "start": "441919",
    "end": "444560"
  },
  {
    "text": "this release also features smaller",
    "start": "444560",
    "end": "446800"
  },
  {
    "text": "container images and extended support",
    "start": "446800",
    "end": "449840"
  },
  {
    "text": "for nano server based images",
    "start": "449840",
    "end": "453440"
  },
  {
    "text": "now let's compare and contrast the",
    "start": "456080",
    "end": "457919"
  },
  {
    "text": "redirection policies between the linux",
    "start": "457919",
    "end": "460319"
  },
  {
    "text": "and windows platforms",
    "start": "460319",
    "end": "462160"
  },
  {
    "text": "if you look at the left hand side on",
    "start": "462160",
    "end": "464319"
  },
  {
    "text": "linux the ip table policy allows",
    "start": "464319",
    "end": "466720"
  },
  {
    "text": "configuration of proxy redirect rule",
    "start": "466720",
    "end": "469360"
  },
  {
    "text": "with specific port numbers for both",
    "start": "469360",
    "end": "471599"
  },
  {
    "text": "outbound and inbound directions",
    "start": "471599",
    "end": "474479"
  },
  {
    "text": "the rules also allow skipping",
    "start": "474479",
    "end": "476080"
  },
  {
    "text": "redirection based on user id ip prefixes",
    "start": "476080",
    "end": "479759"
  },
  {
    "text": "or port numbers",
    "start": "479759",
    "end": "481759"
  },
  {
    "text": "this allows",
    "start": "481759",
    "end": "483280"
  },
  {
    "text": "exemption of envoy's own control traffic",
    "start": "483280",
    "end": "486560"
  },
  {
    "text": "and prevents redirection loops",
    "start": "486560",
    "end": "489520"
  },
  {
    "text": "on the right hand side you can see that",
    "start": "489520",
    "end": "491599"
  },
  {
    "text": "the new hms policies in the form of a",
    "start": "491599",
    "end": "494080"
  },
  {
    "text": "powershell script",
    "start": "494080",
    "end": "496080"
  },
  {
    "text": "if you notice there's a lot of",
    "start": "496080",
    "end": "497360"
  },
  {
    "text": "similarities",
    "start": "497360",
    "end": "498879"
  },
  {
    "text": "the hns endpoint commandlet takes in",
    "start": "498879",
    "end": "501520"
  },
  {
    "text": "redirection policy in the json format",
    "start": "501520",
    "end": "505680"
  },
  {
    "text": "both outbound and inbound redirection",
    "start": "505680",
    "end": "508319"
  },
  {
    "text": "are supported with specific proxy ports",
    "start": "508319",
    "end": "510560"
  },
  {
    "text": "for the sidecar",
    "start": "510560",
    "end": "512159"
  },
  {
    "text": "this policy also supports exceptions",
    "start": "512159",
    "end": "514240"
  },
  {
    "text": "which are again based on ip addresses",
    "start": "514240",
    "end": "516399"
  },
  {
    "text": "and port numbers",
    "start": "516399",
    "end": "518560"
  },
  {
    "text": "in the user set field you can specify",
    "start": "518560",
    "end": "520800"
  },
  {
    "text": "either a user or a user group that is",
    "start": "520800",
    "end": "523760"
  },
  {
    "text": "exempt from this redirection policy",
    "start": "523760",
    "end": "526880"
  },
  {
    "text": "for windows containers one challenge is",
    "start": "526880",
    "end": "529200"
  },
  {
    "text": "that user sets are generated randomly at",
    "start": "529200",
    "end": "531760"
  },
  {
    "text": "runtime so it becomes impossible to know",
    "start": "531760",
    "end": "534320"
  },
  {
    "text": "in advance the user said that envoy is",
    "start": "534320",
    "end": "536720"
  },
  {
    "text": "going to run as in every part",
    "start": "536720",
    "end": "539760"
  },
  {
    "text": "this is where specifying a group set is",
    "start": "539760",
    "end": "542160"
  },
  {
    "text": "extremely useful you can then run the",
    "start": "542160",
    "end": "544560"
  },
  {
    "text": "proxy from a known user group",
    "start": "544560",
    "end": "547839"
  },
  {
    "text": "next up so theorists will describe the",
    "start": "547839",
    "end": "550560"
  },
  {
    "text": "next component of the service mesh",
    "start": "550560",
    "end": "552320"
  },
  {
    "text": "solution which is the on y proxy",
    "start": "552320",
    "end": "556480"
  },
  {
    "text": "thank you profit for the summary of all",
    "start": "557600",
    "end": "559200"
  },
  {
    "text": "the changes in",
    "start": "559200",
    "end": "560480"
  },
  {
    "text": "windows server",
    "start": "560480",
    "end": "562399"
  },
  {
    "text": "over the past one half year the envoy",
    "start": "562399",
    "end": "565279"
  },
  {
    "text": "windows development group has made",
    "start": "565279",
    "end": "566560"
  },
  {
    "text": "substantial progress on porting on void",
    "start": "566560",
    "end": "569040"
  },
  {
    "text": "windows",
    "start": "569040",
    "end": "570240"
  },
  {
    "text": "we announced general availability",
    "start": "570240",
    "end": "571839"
  },
  {
    "text": "support for envoy and windows in may and",
    "start": "571839",
    "end": "574480"
  },
  {
    "text": "for the past 10 months the envoy",
    "start": "574480",
    "end": "576320"
  },
  {
    "text": "pipeline has been compiling and running",
    "start": "576320",
    "end": "578880"
  },
  {
    "text": "tests for almost every feature at every",
    "start": "578880",
    "end": "582000"
  },
  {
    "text": "pull request",
    "start": "582000",
    "end": "583600"
  },
  {
    "text": "we strive to make envoy configurations",
    "start": "583600",
    "end": "585519"
  },
  {
    "text": "cross-platform we believe that this will",
    "start": "585519",
    "end": "587680"
  },
  {
    "text": "help control plane developers want to",
    "start": "587680",
    "end": "589680"
  },
  {
    "text": "apply the same configuration across",
    "start": "589680",
    "end": "591920"
  },
  {
    "text": "their entire cluster",
    "start": "591920",
    "end": "593680"
  },
  {
    "text": "an example of such control plane is",
    "start": "593680",
    "end": "595440"
  },
  {
    "text": "service mass",
    "start": "595440",
    "end": "596720"
  },
  {
    "text": "with that goal in mind we have a",
    "start": "596720",
    "end": "598720"
  },
  {
    "text": "cross-platform implementation of the",
    "start": "598720",
    "end": "600880"
  },
  {
    "text": "original destination listener that",
    "start": "600880",
    "end": "602959"
  },
  {
    "text": "underpins service mesh on voice",
    "start": "602959",
    "end": "605120"
  },
  {
    "text": "configurations",
    "start": "605120",
    "end": "607600"
  },
  {
    "text": "the only notable difference is that on",
    "start": "607600",
    "end": "609440"
  },
  {
    "text": "windows you must also specify the",
    "start": "609440",
    "end": "611360"
  },
  {
    "text": "traffic direction property of the",
    "start": "611360",
    "end": "613040"
  },
  {
    "text": "listener",
    "start": "613040",
    "end": "614800"
  },
  {
    "text": "we use this information to ensure that",
    "start": "614800",
    "end": "617120"
  },
  {
    "text": "proxied connections will have the same",
    "start": "617120",
    "end": "619360"
  },
  {
    "text": "security properties as the original",
    "start": "619360",
    "end": "621519"
  },
  {
    "text": "connection",
    "start": "621519",
    "end": "622880"
  },
  {
    "text": "this is important for security reasons",
    "start": "622880",
    "end": "625040"
  },
  {
    "text": "as the proxy and the application might",
    "start": "625040",
    "end": "627360"
  },
  {
    "text": "have different firewall rules",
    "start": "627360",
    "end": "630000"
  },
  {
    "text": "we also have confirmed that the traffic",
    "start": "630000",
    "end": "633440"
  },
  {
    "text": "direction property is already set",
    "start": "633440",
    "end": "636399"
  },
  {
    "text": "on most service mass implementations",
    "start": "636399",
    "end": "639680"
  },
  {
    "text": "also we have implemented cross-platform",
    "start": "639680",
    "end": "641600"
  },
  {
    "text": "access loaders to standard output so you",
    "start": "641600",
    "end": "643839"
  },
  {
    "text": "can enjoy the observability that envoy",
    "start": "643839",
    "end": "645839"
  },
  {
    "text": "offers on all platforms",
    "start": "645839",
    "end": "648560"
  },
  {
    "text": "finally we have been working on the",
    "start": "648560",
    "end": "650399"
  },
  {
    "text": "envoy network data path we improve the",
    "start": "650399",
    "end": "652720"
  },
  {
    "text": "asynchronous event loop on windows to",
    "start": "652720",
    "end": "654640"
  },
  {
    "text": "scale across multiple threads",
    "start": "654640",
    "end": "656880"
  },
  {
    "text": "also we have introduced synthetic events",
    "start": "656880",
    "end": "659519"
  },
  {
    "text": "that allow us to emulate equal behavior",
    "start": "659519",
    "end": "661920"
  },
  {
    "text": "on windows",
    "start": "661920",
    "end": "664560"
  },
  {
    "text": "the last piece of the puzzle is",
    "start": "666480",
    "end": "667839"
  },
  {
    "text": "configuring kubernetes to apply the hns",
    "start": "667839",
    "end": "670079"
  },
  {
    "text": "traffic redirection policy for you",
    "start": "670079",
    "end": "673040"
  },
  {
    "text": "traditionally on linux redirection",
    "start": "673040",
    "end": "675200"
  },
  {
    "text": "policy is configured by the init",
    "start": "675200",
    "end": "676640"
  },
  {
    "text": "container",
    "start": "676640",
    "end": "677760"
  },
  {
    "text": "the init container is scheduled by the",
    "start": "677760",
    "end": "679600"
  },
  {
    "text": "service mess to run before the",
    "start": "679600",
    "end": "681200"
  },
  {
    "text": "application and it applies the ip table",
    "start": "681200",
    "end": "683440"
  },
  {
    "text": "rules on the board",
    "start": "683440",
    "end": "685120"
  },
  {
    "text": "this is not possible on",
    "start": "685120",
    "end": "686839"
  },
  {
    "text": "windows the reason why it is not",
    "start": "686839",
    "end": "689040"
  },
  {
    "text": "possible stems from a core difference",
    "start": "689040",
    "end": "690880"
  },
  {
    "text": "between hns pulses and ip tables",
    "start": "690880",
    "end": "694000"
  },
  {
    "text": "hns policies are a property of the host",
    "start": "694000",
    "end": "696480"
  },
  {
    "text": "and not of the pod",
    "start": "696480",
    "end": "698079"
  },
  {
    "text": "as a result these hns policies need to",
    "start": "698079",
    "end": "700480"
  },
  {
    "text": "be configured by a cni plugin",
    "start": "700480",
    "end": "703360"
  },
  {
    "text": "cni plugins are already supported by",
    "start": "703360",
    "end": "705600"
  },
  {
    "text": "kubernetes",
    "start": "705600",
    "end": "707200"
  },
  {
    "text": "for experimentation purposes if you can",
    "start": "707200",
    "end": "709120"
  },
  {
    "text": "add the redirection policy manually to",
    "start": "709120",
    "end": "711279"
  },
  {
    "text": "the static configuration of your",
    "start": "711279",
    "end": "712800"
  },
  {
    "text": "existing cnr plugin",
    "start": "712800",
    "end": "714560"
  },
  {
    "text": "however we accept that for production",
    "start": "714560",
    "end": "716720"
  },
  {
    "text": "environments you will need a cni plugin",
    "start": "716720",
    "end": "718959"
  },
  {
    "text": "that will read these pulses from port",
    "start": "718959",
    "end": "720880"
  },
  {
    "text": "annotations and have the options to have",
    "start": "720880",
    "end": "723200"
  },
  {
    "text": "different policies on different ports",
    "start": "723200",
    "end": "726639"
  },
  {
    "text": "finally you need to run envoy as envoy",
    "start": "726639",
    "end": "729040"
  },
  {
    "text": "user envoy user is already set up for",
    "start": "729040",
    "end": "732000"
  },
  {
    "text": "you in the envoy container inwards",
    "start": "732000",
    "end": "734560"
  },
  {
    "text": "the envoy user is already configured to",
    "start": "734560",
    "end": "736720"
  },
  {
    "text": "be part of the network operators group",
    "start": "736720",
    "end": "739519"
  },
  {
    "text": "you can leverage the fact that envoy",
    "start": "739519",
    "end": "741279"
  },
  {
    "text": "user is part of a well-known group to",
    "start": "741279",
    "end": "743839"
  },
  {
    "text": "configure traffic redirection exemptions",
    "start": "743839",
    "end": "745839"
  },
  {
    "text": "for envoy",
    "start": "745839",
    "end": "747440"
  },
  {
    "text": "with this in place envoy traffic will",
    "start": "747440",
    "end": "750079"
  },
  {
    "text": "not be redirected and you will not have",
    "start": "750079",
    "end": "752560"
  },
  {
    "text": "to deal with nasty infinite redirection",
    "start": "752560",
    "end": "754800"
  },
  {
    "text": "bugs",
    "start": "754800",
    "end": "757800"
  },
  {
    "text": "open service mess or osm for short is a",
    "start": "759760",
    "end": "762880"
  },
  {
    "text": "lightweight and extensible cloud native",
    "start": "762880",
    "end": "764720"
  },
  {
    "text": "service mask",
    "start": "764720",
    "end": "766000"
  },
  {
    "text": "osm takes a simple approach for users to",
    "start": "766000",
    "end": "768480"
  },
  {
    "text": "uniformly manage secure and get out of",
    "start": "768480",
    "end": "771360"
  },
  {
    "text": "the box of durability features for",
    "start": "771360",
    "end": "773600"
  },
  {
    "text": "highly dynamic microservices",
    "start": "773600",
    "end": "775279"
  },
  {
    "text": "environments",
    "start": "775279",
    "end": "776639"
  },
  {
    "text": "it leverages an architecture based on",
    "start": "776639",
    "end": "778800"
  },
  {
    "text": "envoy reverse proxy sidecar and works by",
    "start": "778800",
    "end": "781839"
  },
  {
    "text": "injecting an envoy proxy as a sidecar",
    "start": "781839",
    "end": "784320"
  },
  {
    "text": "container next to each instance of your",
    "start": "784320",
    "end": "786560"
  },
  {
    "text": "application",
    "start": "786560",
    "end": "788480"
  },
  {
    "text": "osm is built to be simple to understand",
    "start": "788480",
    "end": "790639"
  },
  {
    "text": "and contribute to users should be able",
    "start": "790639",
    "end": "792639"
  },
  {
    "text": "to install maintain and operate osm in",
    "start": "792639",
    "end": "796000"
  },
  {
    "text": "their cluster with minimal effort",
    "start": "796000",
    "end": "798720"
  },
  {
    "text": "it is easy to troubleshoot",
    "start": "798720",
    "end": "800480"
  },
  {
    "text": "and it even comes with tooling that",
    "start": "800480",
    "end": "802240"
  },
  {
    "text": "makes debugging as easy as running an",
    "start": "802240",
    "end": "804320"
  },
  {
    "text": "app on the terminal",
    "start": "804320",
    "end": "806000"
  },
  {
    "text": "you can easily configure it with a",
    "start": "806000",
    "end": "807519"
  },
  {
    "text": "service mesh interface a standard for",
    "start": "807519",
    "end": "810480"
  },
  {
    "text": "all service messages on kubernetes that",
    "start": "810480",
    "end": "812560"
  },
  {
    "text": "provide a basic feature set",
    "start": "812560",
    "end": "814639"
  },
  {
    "text": "for the most common use cases",
    "start": "814639",
    "end": "818079"
  },
  {
    "text": "now for the exciting part",
    "start": "819120",
    "end": "821199"
  },
  {
    "text": "let's see a demo where windows server",
    "start": "821199",
    "end": "822800"
  },
  {
    "text": "2022",
    "start": "822800",
    "end": "824160"
  },
  {
    "text": "envoy to bernades and open service mess",
    "start": "824160",
    "end": "827120"
  },
  {
    "text": "work together for the first",
    "start": "827120",
    "end": "828639"
  },
  {
    "text": "cross-platform service mess demo",
    "start": "828639",
    "end": "832480"
  },
  {
    "text": "hey i'm here with kalia who is a",
    "start": "832959",
    "end": "834560"
  },
  {
    "text": "contributor at osm to give you a demo of",
    "start": "834560",
    "end": "837440"
  },
  {
    "text": "the first cross-platform service mass",
    "start": "837440",
    "end": "839120"
  },
  {
    "text": "implementation before we start with the",
    "start": "839120",
    "end": "841120"
  },
  {
    "text": "demo do you want to introduce yourself",
    "start": "841120",
    "end": "842959"
  },
  {
    "text": "and tell us more about the osm project",
    "start": "842959",
    "end": "846560"
  },
  {
    "text": "thanks satiris hi my name is kalya and",
    "start": "846560",
    "end": "849199"
  },
  {
    "text": "i'm a developer on open service mesh or",
    "start": "849199",
    "end": "851920"
  },
  {
    "text": "osm which is an open source service mesh",
    "start": "851920",
    "end": "855199"
  },
  {
    "text": "so people can use osm to secure and",
    "start": "855199",
    "end": "857760"
  },
  {
    "text": "manage traffic between the services that",
    "start": "857760",
    "end": "859920"
  },
  {
    "text": "they're running and for those who aren't",
    "start": "859920",
    "end": "861920"
  },
  {
    "text": "familiar with service meshes generally",
    "start": "861920",
    "end": "864320"
  },
  {
    "text": "the way that it works is that there's a",
    "start": "864320",
    "end": "866000"
  },
  {
    "text": "proxy running next to each application",
    "start": "866000",
    "end": "868480"
  },
  {
    "text": "that manages incoming and outgoing",
    "start": "868480",
    "end": "870560"
  },
  {
    "text": "traffic",
    "start": "870560",
    "end": "871600"
  },
  {
    "text": "we call this the data plane and osm uses",
    "start": "871600",
    "end": "874240"
  },
  {
    "text": "onboard proxy to implement the data",
    "start": "874240",
    "end": "876320"
  },
  {
    "text": "plane",
    "start": "876320",
    "end": "877600"
  },
  {
    "text": "the data plane gets controlled by a",
    "start": "877600",
    "end": "879360"
  },
  {
    "text": "control plane running in the mesh the",
    "start": "879360",
    "end": "881600"
  },
  {
    "text": "control plane makes sure that those",
    "start": "881600",
    "end": "883360"
  },
  {
    "text": "proxies get set up properly and reflect",
    "start": "883360",
    "end": "885839"
  },
  {
    "text": "the right traffic related rules for the",
    "start": "885839",
    "end": "888079"
  },
  {
    "text": "application",
    "start": "888079",
    "end": "890560"
  },
  {
    "text": "so as a as a user how do i configure the",
    "start": "890560",
    "end": "893519"
  },
  {
    "text": "control plane",
    "start": "893519",
    "end": "895519"
  },
  {
    "text": "so users can configure the osm control",
    "start": "895519",
    "end": "898399"
  },
  {
    "text": "plane using the service mesh interface",
    "start": "898399",
    "end": "901040"
  },
  {
    "text": "or smi",
    "start": "901040",
    "end": "903040"
  },
  {
    "text": "so smi provides a set of apis for the",
    "start": "903040",
    "end": "906079"
  },
  {
    "text": "most common features that people use",
    "start": "906079",
    "end": "908399"
  },
  {
    "text": "service meshes for",
    "start": "908399",
    "end": "910079"
  },
  {
    "text": "for example there's a traffic split api",
    "start": "910079",
    "end": "912639"
  },
  {
    "text": "which allows users to define how they",
    "start": "912639",
    "end": "914639"
  },
  {
    "text": "want to split traffic between different",
    "start": "914639",
    "end": "916320"
  },
  {
    "text": "versions of an application",
    "start": "916320",
    "end": "918399"
  },
  {
    "text": "there are several meshes that have built",
    "start": "918399",
    "end": "920320"
  },
  {
    "text": "against smi already so you might even be",
    "start": "920320",
    "end": "922800"
  },
  {
    "text": "able to use your existing smi",
    "start": "922800",
    "end": "924560"
  },
  {
    "text": "configurations with osm",
    "start": "924560",
    "end": "928320"
  },
  {
    "text": "awesome i think we're gonna also see",
    "start": "928399",
    "end": "930320"
  },
  {
    "text": "more about the smi on the demo as well",
    "start": "930320",
    "end": "932880"
  },
  {
    "text": "but before we get to that uh do you want",
    "start": "932880",
    "end": "934880"
  },
  {
    "text": "to walk us through about the demo that",
    "start": "934880",
    "end": "936480"
  },
  {
    "text": "you have prepared on the osm",
    "start": "936480",
    "end": "938839"
  },
  {
    "text": "repository yeah so the osm demo is",
    "start": "938839",
    "end": "942639"
  },
  {
    "text": "comprised of the bookstore",
    "start": "942639",
    "end": "946160"
  },
  {
    "text": "service which is a top level service",
    "start": "946160",
    "end": "948560"
  },
  {
    "text": "that load bounces across various",
    "start": "948560",
    "end": "950480"
  },
  {
    "text": "bookstore application pods and we have",
    "start": "950480",
    "end": "953040"
  },
  {
    "text": "two versions of our bookstore bookstore",
    "start": "953040",
    "end": "955040"
  },
  {
    "text": "v1 and bookstore b2 and each of those",
    "start": "955040",
    "end": "958240"
  },
  {
    "text": "versions get their own service as well",
    "start": "958240",
    "end": "961440"
  },
  {
    "text": "so the v1 and v2 services act as back",
    "start": "961440",
    "end": "964959"
  },
  {
    "text": "ends",
    "start": "964959",
    "end": "966000"
  },
  {
    "text": "in our bookstore demo application",
    "start": "966000",
    "end": "968880"
  },
  {
    "text": "we also have two clients book buyer and",
    "start": "968880",
    "end": "971680"
  },
  {
    "text": "book thief and those clients make",
    "start": "971680",
    "end": "973600"
  },
  {
    "text": "requests to the top level bookstore",
    "start": "973600",
    "end": "976079"
  },
  {
    "text": "application and then we use the traffic",
    "start": "976079",
    "end": "978560"
  },
  {
    "text": "split to serve those requests to the",
    "start": "978560",
    "end": "980720"
  },
  {
    "text": "corresponding backend services",
    "start": "980720",
    "end": "983519"
  },
  {
    "text": "we also have book warehouse and the",
    "start": "983519",
    "end": "985920"
  },
  {
    "text": "bookstore makes requests to book",
    "start": "985920",
    "end": "988160"
  },
  {
    "text": "warehouse to restock on books",
    "start": "988160",
    "end": "991759"
  },
  {
    "text": "and i assume this is not the standard",
    "start": "991759",
    "end": "993680"
  },
  {
    "text": "osm demo but there's some services",
    "start": "993680",
    "end": "995680"
  },
  {
    "text": "running on windows and some are running",
    "start": "995680",
    "end": "997600"
  },
  {
    "text": "on linux right",
    "start": "997600",
    "end": "999120"
  },
  {
    "text": "yep exactly so if we take a look at our",
    "start": "999120",
    "end": "1001519"
  },
  {
    "text": "cluster",
    "start": "1001519",
    "end": "1002639"
  },
  {
    "text": "and we do cube ctl get nodes dash o wide",
    "start": "1002639",
    "end": "1007519"
  },
  {
    "text": "we can see",
    "start": "1007519",
    "end": "1008959"
  },
  {
    "text": "that we have",
    "start": "1008959",
    "end": "1010720"
  },
  {
    "text": "two worker nodes that are windows server",
    "start": "1010720",
    "end": "1012959"
  },
  {
    "text": "2022 as well as a linux worker node",
    "start": "1012959",
    "end": "1018240"
  },
  {
    "text": "and if i get all the codes i can see",
    "start": "1018320",
    "end": "1020800"
  },
  {
    "text": "that some of them are scheduled on",
    "start": "1020800",
    "end": "1022320"
  },
  {
    "text": "windows and some of them are scheduled",
    "start": "1022320",
    "end": "1024000"
  },
  {
    "text": "on linux",
    "start": "1024000",
    "end": "1025839"
  },
  {
    "text": "exactly so if you take a look you can",
    "start": "1025839",
    "end": "1028240"
  },
  {
    "text": "see that we have our bookstore v1 pod",
    "start": "1028240",
    "end": "1031120"
  },
  {
    "text": "running on linux and we have our",
    "start": "1031120",
    "end": "1032720"
  },
  {
    "text": "bookstore v2 pod running on windows",
    "start": "1032720",
    "end": "1035760"
  },
  {
    "text": "we also have book buyer which is running",
    "start": "1035760",
    "end": "1037760"
  },
  {
    "text": "on windows as well",
    "start": "1037760",
    "end": "1039918"
  },
  {
    "text": "and i see that the osm control plane is",
    "start": "1039919",
    "end": "1042798"
  },
  {
    "text": "running on a linux node",
    "start": "1042799",
    "end": "1045280"
  },
  {
    "text": "exactly so the osm control plane runs",
    "start": "1045280",
    "end": "1047918"
  },
  {
    "text": "fully on linux but it's still able to",
    "start": "1047919",
    "end": "1050400"
  },
  {
    "text": "program the data plane regardless of",
    "start": "1050400",
    "end": "1052480"
  },
  {
    "text": "whether the envoy proxies are running",
    "start": "1052480",
    "end": "1054960"
  },
  {
    "text": "for windows applications or linux",
    "start": "1054960",
    "end": "1056960"
  },
  {
    "text": "applications",
    "start": "1056960",
    "end": "1058960"
  },
  {
    "text": "and how can we see the interaction",
    "start": "1058960",
    "end": "1061039"
  },
  {
    "text": "between the book buyer and the bookstore",
    "start": "1061039",
    "end": "1062480"
  },
  {
    "text": "now",
    "start": "1062480",
    "end": "1063520"
  },
  {
    "text": "so for this demo we have installed an",
    "start": "1063520",
    "end": "1066640"
  },
  {
    "text": "ingress gateway so if you get the public",
    "start": "1066640",
    "end": "1069200"
  },
  {
    "text": "ip",
    "start": "1069200",
    "end": "1070320"
  },
  {
    "text": "then you'll be able to access our book",
    "start": "1070320",
    "end": "1073360"
  },
  {
    "text": "buyer ui",
    "start": "1073360",
    "end": "1076160"
  },
  {
    "text": "so here you can see our book buyer ui",
    "start": "1079280",
    "end": "1081600"
  },
  {
    "text": "that we're accessing via ingress",
    "start": "1081600",
    "end": "1084559"
  },
  {
    "text": "you can see that the book buyer is",
    "start": "1084559",
    "end": "1086240"
  },
  {
    "text": "buying books from both bookstore v1 and",
    "start": "1086240",
    "end": "1088799"
  },
  {
    "text": "bookstore v2 and it's buying pretty",
    "start": "1088799",
    "end": "1091200"
  },
  {
    "text": "evenly between the two",
    "start": "1091200",
    "end": "1093440"
  },
  {
    "text": "so there is an smi policy that",
    "start": "1093440",
    "end": "1096559"
  },
  {
    "text": "configures this right",
    "start": "1096559",
    "end": "1098400"
  },
  {
    "text": "yes we're using smi traffic split and if",
    "start": "1098400",
    "end": "1101520"
  },
  {
    "text": "you go to our cluster we can actually",
    "start": "1101520",
    "end": "1103440"
  },
  {
    "text": "view the traffic split that we're using",
    "start": "1103440",
    "end": "1107799"
  },
  {
    "text": "so here you can see that we have our",
    "start": "1108480",
    "end": "1111360"
  },
  {
    "text": "traffic split spec and we have two back",
    "start": "1111360",
    "end": "1114000"
  },
  {
    "text": "end services for bookstore v1 and",
    "start": "1114000",
    "end": "1116240"
  },
  {
    "text": "bookstore v2 and they're both assigned",
    "start": "1116240",
    "end": "1118400"
  },
  {
    "text": "equal weights of 50.",
    "start": "1118400",
    "end": "1120240"
  },
  {
    "text": "we also see a service field",
    "start": "1120240",
    "end": "1122480"
  },
  {
    "text": "sometimes referred to as a root service",
    "start": "1122480",
    "end": "1125039"
  },
  {
    "text": "and this root service just refers to",
    "start": "1125039",
    "end": "1127039"
  },
  {
    "text": "bookstore which is the top level service",
    "start": "1127039",
    "end": "1129200"
  },
  {
    "text": "that represents the two backends",
    "start": "1129200",
    "end": "1132080"
  },
  {
    "text": "and i assume this is highly dynamic so",
    "start": "1132080",
    "end": "1134080"
  },
  {
    "text": "if i want to change the weight between",
    "start": "1134080",
    "end": "1136240"
  },
  {
    "text": "the two services i can just update this",
    "start": "1136240",
    "end": "1138320"
  },
  {
    "text": "policy right",
    "start": "1138320",
    "end": "1139760"
  },
  {
    "text": "yep so that's really easy all you have",
    "start": "1139760",
    "end": "1141600"
  },
  {
    "text": "to do is just update your traffic split",
    "start": "1141600",
    "end": "1144320"
  },
  {
    "text": "and apply it and then the osm control",
    "start": "1144320",
    "end": "1146720"
  },
  {
    "text": "plane will take that new traffic split",
    "start": "1146720",
    "end": "1150000"
  },
  {
    "text": "and use that to configure the data plane",
    "start": "1150000",
    "end": "1152480"
  },
  {
    "text": "appropriately",
    "start": "1152480",
    "end": "1154000"
  },
  {
    "text": "okay i think i have this new policy",
    "start": "1154000",
    "end": "1156240"
  },
  {
    "text": "ready here i just got it on the terminal",
    "start": "1156240",
    "end": "1158640"
  },
  {
    "text": "so people can see it",
    "start": "1158640",
    "end": "1160240"
  },
  {
    "text": "and let me apply it right now",
    "start": "1160240",
    "end": "1165240"
  },
  {
    "text": "so here you can see that with this new",
    "start": "1166559",
    "end": "1168480"
  },
  {
    "text": "traffic split we're going to be sending",
    "start": "1168480",
    "end": "1170799"
  },
  {
    "text": "all of the traffic to bookstore v1 since",
    "start": "1170799",
    "end": "1173679"
  },
  {
    "text": "it has a weight of 100 and no traffic",
    "start": "1173679",
    "end": "1176080"
  },
  {
    "text": "will be going to bookstore v2",
    "start": "1176080",
    "end": "1178640"
  },
  {
    "text": "and if you look at our book buyer ui",
    "start": "1178640",
    "end": "1181280"
  },
  {
    "text": "again you can see that we are no longer",
    "start": "1181280",
    "end": "1185440"
  },
  {
    "text": "buying books from bookstore v2 but we",
    "start": "1185440",
    "end": "1188400"
  },
  {
    "text": "should see the bookstore v1 counter",
    "start": "1188400",
    "end": "1190640"
  },
  {
    "text": "increment in this presentation we",
    "start": "1190640",
    "end": "1192559"
  },
  {
    "text": "revisited the fourth verticals that",
    "start": "1192559",
    "end": "1194480"
  },
  {
    "text": "underpin any service mass",
    "start": "1194480",
    "end": "1196480"
  },
  {
    "text": "we saw the hns policies and window",
    "start": "1196480",
    "end": "1198559"
  },
  {
    "text": "socket options that allow you to",
    "start": "1198559",
    "end": "1200400"
  },
  {
    "text": "configure the operating system to",
    "start": "1200400",
    "end": "1202000"
  },
  {
    "text": "redirect traffic to a sidecar proxy",
    "start": "1202000",
    "end": "1205039"
  },
  {
    "text": "we went through the progress that",
    "start": "1205039",
    "end": "1206640"
  },
  {
    "text": "windows development group has made to",
    "start": "1206640",
    "end": "1208480"
  },
  {
    "text": "make envoy proxy run seamlessly on",
    "start": "1208480",
    "end": "1210799"
  },
  {
    "text": "windows",
    "start": "1210799",
    "end": "1212240"
  },
  {
    "text": "then we went through the configurations",
    "start": "1212240",
    "end": "1213919"
  },
  {
    "text": "needed to ensure that kubernetes applies",
    "start": "1213919",
    "end": "1216159"
  },
  {
    "text": "the redirection policy for you",
    "start": "1216159",
    "end": "1218640"
  },
  {
    "text": "finally we showed the first demo of a",
    "start": "1218640",
    "end": "1220960"
  },
  {
    "text": "cross-platform service mess running on",
    "start": "1220960",
    "end": "1222880"
  },
  {
    "text": "osm",
    "start": "1222880",
    "end": "1224080"
  },
  {
    "text": "with that i will hold it back to pravin",
    "start": "1224080",
    "end": "1226640"
  },
  {
    "text": "to tell you what is now roadmap and how",
    "start": "1226640",
    "end": "1228559"
  },
  {
    "text": "you can stay updated",
    "start": "1228559",
    "end": "1231520"
  },
  {
    "text": "thanks so",
    "start": "1232480",
    "end": "1233440"
  },
  {
    "text": "uh that was a great demo",
    "start": "1233440",
    "end": "1236400"
  },
  {
    "text": "on our future roadmap we have work",
    "start": "1236400",
    "end": "1238559"
  },
  {
    "text": "across the os platform osm as well as",
    "start": "1238559",
    "end": "1242720"
  },
  {
    "text": "onward",
    "start": "1242720",
    "end": "1244080"
  },
  {
    "text": "on the windows platform site we would",
    "start": "1244080",
    "end": "1246320"
  },
  {
    "text": "like to enhance hns policies to support",
    "start": "1246320",
    "end": "1249440"
  },
  {
    "text": "ipv6 and udp traffic redirection",
    "start": "1249440",
    "end": "1253600"
  },
  {
    "text": "on the service mesh side we would like",
    "start": "1253600",
    "end": "1255600"
  },
  {
    "text": "to upstream production grid support for",
    "start": "1255600",
    "end": "1258240"
  },
  {
    "text": "the windows platform on osm",
    "start": "1258240",
    "end": "1261120"
  },
  {
    "text": "and finally we'd like to improve onward",
    "start": "1261120",
    "end": "1263679"
  },
  {
    "text": "extensibility by adding web assembly",
    "start": "1263679",
    "end": "1266240"
  },
  {
    "text": "support on windows and also publish",
    "start": "1266240",
    "end": "1268960"
  },
  {
    "text": "windows server 2022",
    "start": "1268960",
    "end": "1271280"
  },
  {
    "text": "container images with onward",
    "start": "1271280",
    "end": "1275720"
  },
  {
    "text": "we encourage you to join us and",
    "start": "1276480",
    "end": "1278400"
  },
  {
    "text": "contribute to this effort and also",
    "start": "1278400",
    "end": "1280720"
  },
  {
    "text": "provide us feedback for future",
    "start": "1280720",
    "end": "1282640"
  },
  {
    "text": "improvements and our roadmap",
    "start": "1282640",
    "end": "1285679"
  },
  {
    "text": "all the work here on onward osm is being",
    "start": "1285679",
    "end": "1288720"
  },
  {
    "text": "done upstream on github",
    "start": "1288720",
    "end": "1291280"
  },
  {
    "text": "you can look at known issues report new",
    "start": "1291280",
    "end": "1293760"
  },
  {
    "text": "issues or feature asks on github",
    "start": "1293760",
    "end": "1297360"
  },
  {
    "text": "prs are also very welcome",
    "start": "1297360",
    "end": "1300640"
  },
  {
    "text": "in addition we have slack channels where",
    "start": "1300640",
    "end": "1302880"
  },
  {
    "text": "you can get support and answer to",
    "start": "1302880",
    "end": "1304799"
  },
  {
    "text": "questions and help coordinate work",
    "start": "1304799",
    "end": "1309120"
  },
  {
    "text": "this work would not have been possible",
    "start": "1310799",
    "end": "1313200"
  },
  {
    "text": "without tireless effort across the",
    "start": "1313200",
    "end": "1315200"
  },
  {
    "text": "industry we would like to thank all",
    "start": "1315200",
    "end": "1318000"
  },
  {
    "text": "contributors across windows networking",
    "start": "1318000",
    "end": "1320799"
  },
  {
    "text": "and the osm and onward communities to",
    "start": "1320799",
    "end": "1323919"
  },
  {
    "text": "help make this a reality",
    "start": "1323919",
    "end": "1327440"
  },
  {
    "text": "and with that",
    "start": "1328400",
    "end": "1329679"
  },
  {
    "text": "thank you everyone for attending our",
    "start": "1329679",
    "end": "1331440"
  },
  {
    "text": "presentation",
    "start": "1331440",
    "end": "1332720"
  },
  {
    "text": "we'd like to open it up for any",
    "start": "1332720",
    "end": "1334400"
  },
  {
    "text": "questions you may have",
    "start": "1334400",
    "end": "1338039"
  }
]