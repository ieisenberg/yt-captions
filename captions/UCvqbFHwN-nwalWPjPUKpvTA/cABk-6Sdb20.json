[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "hi everyone thank you for attending my",
    "start": "1760",
    "end": "3520"
  },
  {
    "text": "presentation",
    "start": "3520",
    "end": "4319"
  },
  {
    "text": "called ebpf on the rise i'm quentin i",
    "start": "4319",
    "end": "7120"
  },
  {
    "text": "work as a software engineer at isovalent",
    "start": "7120",
    "end": "9360"
  },
  {
    "text": "and we are doing cdm which is built on",
    "start": "9360",
    "end": "11360"
  },
  {
    "text": "top of ebpf to bring networking",
    "start": "11360",
    "end": "13200"
  },
  {
    "text": "observability and security to",
    "start": "13200",
    "end": "15280"
  },
  {
    "text": "kubernetes clusters my objective today",
    "start": "15280",
    "end": "18320"
  },
  {
    "text": "is to",
    "start": "18320",
    "end": "18960"
  },
  {
    "text": "help you getting started with ebpf and",
    "start": "18960",
    "end": "21600"
  },
  {
    "text": "we'll do that in",
    "start": "21600",
    "end": "23119"
  },
  {
    "text": "three parts the first section will be",
    "start": "23119",
    "end": "24720"
  },
  {
    "text": "about understanding how ebpf works and",
    "start": "24720",
    "end": "27680"
  },
  {
    "text": "then",
    "start": "27680",
    "end": "28160"
  },
  {
    "text": "in a second time we'll see what tools",
    "start": "28160",
    "end": "29840"
  },
  {
    "text": "are available for working with ebpf",
    "start": "29840",
    "end": "32078"
  },
  {
    "text": "and the last section will be about what",
    "start": "32079",
    "end": "34160"
  },
  {
    "text": "benefits we can have for cloud native",
    "start": "34160",
    "end": "35920"
  },
  {
    "text": "environments",
    "start": "35920",
    "end": "36880"
  },
  {
    "text": "uh from ebpf so before we dive into the",
    "start": "36880",
    "end": "40160"
  },
  {
    "text": "details let's",
    "start": "40160",
    "end": "41120"
  },
  {
    "text": "observe that there is something",
    "start": "41120",
    "end": "42559"
  },
  {
    "text": "happening with ebps tuesdays",
    "start": "42559",
    "end": "44879"
  },
  {
    "text": "it's been marked by liz rice as one of",
    "start": "44879",
    "end": "47920"
  },
  {
    "text": "the",
    "start": "47920",
    "end": "48320"
  },
  {
    "text": "key technologies to watch for this year",
    "start": "48320",
    "end": "51280"
  },
  {
    "text": "but why is that so what what's happening",
    "start": "51280",
    "end": "53360"
  },
  {
    "text": "with ebpf",
    "start": "53360",
    "end": "55520"
  },
  {
    "start": "55000",
    "end": "55000"
  },
  {
    "text": "to really understand that let's observe",
    "start": "55520",
    "end": "57360"
  },
  {
    "text": "that the linux system is",
    "start": "57360",
    "end": "59280"
  },
  {
    "text": "being used at the basis for everything",
    "start": "59280",
    "end": "61920"
  },
  {
    "text": "in",
    "start": "61920",
    "end": "62480"
  },
  {
    "text": "cloud environments nowadays and we have",
    "start": "62480",
    "end": "65518"
  },
  {
    "text": "some kind of paradox with linux",
    "start": "65519",
    "end": "67760"
  },
  {
    "text": "because everything that allows you to",
    "start": "67760",
    "end": "71040"
  },
  {
    "text": "get some observability to understand",
    "start": "71040",
    "end": "72880"
  },
  {
    "text": "what resources are used",
    "start": "72880",
    "end": "74560"
  },
  {
    "text": "by a given process of pod is happening",
    "start": "74560",
    "end": "77040"
  },
  {
    "text": "on the kernel side",
    "start": "77040",
    "end": "78880"
  },
  {
    "text": "but you have very little flexibility at",
    "start": "78880",
    "end": "80640"
  },
  {
    "text": "the center in the kernel",
    "start": "80640",
    "end": "82000"
  },
  {
    "text": "you are free to program whatever you",
    "start": "82000",
    "end": "83759"
  },
  {
    "text": "want in user space but in user space you",
    "start": "83759",
    "end": "85920"
  },
  {
    "text": "won't get a direct access to those",
    "start": "85920",
    "end": "88320"
  },
  {
    "text": "kernel data structures so do we have",
    "start": "88320",
    "end": "91920"
  },
  {
    "text": "a way to introduce more programmability",
    "start": "91920",
    "end": "94159"
  },
  {
    "text": "in the kernel we have kindle modules",
    "start": "94159",
    "end": "96079"
  },
  {
    "text": "but kernel modules can be tricky to",
    "start": "96079",
    "end": "98799"
  },
  {
    "text": "implement or they can",
    "start": "98799",
    "end": "100000"
  },
  {
    "text": "have issues in terms of safety you are",
    "start": "100000",
    "end": "102079"
  },
  {
    "text": "likely to uh",
    "start": "102079",
    "end": "103600"
  },
  {
    "text": "crash your kernel if you made some",
    "start": "103600",
    "end": "105360"
  },
  {
    "text": "insects some mistakes in your modules",
    "start": "105360",
    "end": "108000"
  },
  {
    "text": "you do not have any guarantees in terms",
    "start": "108000",
    "end": "110399"
  },
  {
    "text": "of",
    "start": "110399",
    "end": "111040"
  },
  {
    "text": "api stability from the canal from one",
    "start": "111040",
    "end": "113200"
  },
  {
    "text": "version to the other one",
    "start": "113200",
    "end": "114799"
  },
  {
    "text": "so that can break your modules too uh so",
    "start": "114799",
    "end": "118000"
  },
  {
    "text": "we have those all those kind of",
    "start": "118000",
    "end": "119520"
  },
  {
    "text": "components that are like",
    "start": "119520",
    "end": "121439"
  },
  {
    "text": "bounded box uh in which you can",
    "start": "121439",
    "end": "124960"
  },
  {
    "text": "you can work with from which you can um",
    "start": "124960",
    "end": "127840"
  },
  {
    "text": "interact but",
    "start": "127840",
    "end": "128640"
  },
  {
    "text": "can you somehow get out of the box",
    "start": "128640",
    "end": "131680"
  },
  {
    "text": "and bring back some programmability into",
    "start": "131680",
    "end": "133760"
  },
  {
    "text": "the kernel",
    "start": "133760",
    "end": "135120"
  },
  {
    "text": "not at the expense of safety or",
    "start": "135120",
    "end": "136959"
  },
  {
    "text": "efficiency and if so can you leverage",
    "start": "136959",
    "end": "139920"
  },
  {
    "text": "that to get some benefits in your cloud",
    "start": "139920",
    "end": "141760"
  },
  {
    "text": "native environments",
    "start": "141760",
    "end": "143360"
  },
  {
    "text": "the answer of course is ebpf so ebpf",
    "start": "143360",
    "end": "146879"
  },
  {
    "start": "146000",
    "end": "146000"
  },
  {
    "text": "is some generic purpose execution engine",
    "start": "146879",
    "end": "149680"
  },
  {
    "text": "to",
    "start": "149680",
    "end": "150480"
  },
  {
    "text": "already implement your programs",
    "start": "150480",
    "end": "154879"
  },
  {
    "text": "defined in user space inside of the",
    "start": "154879",
    "end": "156879"
  },
  {
    "text": "kernel so historically it was built on",
    "start": "156879",
    "end": "158480"
  },
  {
    "text": "top of",
    "start": "158480",
    "end": "159360"
  },
  {
    "text": "what is now called the classic bpf which",
    "start": "159360",
    "end": "161120"
  },
  {
    "text": "was used with this pinum",
    "start": "161120",
    "end": "162640"
  },
  {
    "text": "or second uh to filter packets to",
    "start": "162640",
    "end": "164879"
  },
  {
    "text": "computer user space",
    "start": "164879",
    "end": "166560"
  },
  {
    "text": "or cisco arguments uh respectively and",
    "start": "166560",
    "end": "170160"
  },
  {
    "text": "nowadays",
    "start": "170160",
    "end": "171280"
  },
  {
    "text": "ebpf is using the uh bpf system called",
    "start": "171280",
    "end": "174640"
  },
  {
    "text": "to",
    "start": "174640",
    "end": "175360"
  },
  {
    "text": "take some bytecode from user space and",
    "start": "175360",
    "end": "177200"
  },
  {
    "text": "to eject it into the candle where it's",
    "start": "177200",
    "end": "179200"
  },
  {
    "text": "executed",
    "start": "179200",
    "end": "181280"
  },
  {
    "text": "it's attached to some specific hooks",
    "start": "181280",
    "end": "183360"
  },
  {
    "text": "inside of the canal and run on specific",
    "start": "183360",
    "end": "185200"
  },
  {
    "text": "events",
    "start": "185200",
    "end": "186159"
  },
  {
    "text": "and it has several particularities one",
    "start": "186159",
    "end": "189280"
  },
  {
    "text": "of them being that",
    "start": "189280",
    "end": "190159"
  },
  {
    "text": "it's extremely efficient because the",
    "start": "190159",
    "end": "193280"
  },
  {
    "text": "bytecode generated much well to a native",
    "start": "193280",
    "end": "195840"
  },
  {
    "text": "code on modern architectures",
    "start": "195840",
    "end": "197680"
  },
  {
    "text": "and at the same time you have a cheat",
    "start": "197680",
    "end": "199360"
  },
  {
    "text": "compiler just in time compiler",
    "start": "199360",
    "end": "201280"
  },
  {
    "text": "inside of the channel that turns your",
    "start": "201280",
    "end": "202879"
  },
  {
    "text": "bpf by code into native instructions",
    "start": "202879",
    "end": "205760"
  },
  {
    "text": "um making it really efficient at runtime",
    "start": "205760",
    "end": "209680"
  },
  {
    "text": "you also have a benefits in terms of",
    "start": "209680",
    "end": "213760"
  },
  {
    "text": "safety because your ebpf program will be",
    "start": "213760",
    "end": "216560"
  },
  {
    "text": "checked and verified",
    "start": "216560",
    "end": "218080"
  },
  {
    "text": "when you load it into the kernel to make",
    "start": "218080",
    "end": "220159"
  },
  {
    "text": "sure that it terminates and won't be",
    "start": "220159",
    "end": "221920"
  },
  {
    "text": "hanging your kernel",
    "start": "221920",
    "end": "223599"
  },
  {
    "text": "and that it is safe so that means you",
    "start": "223599",
    "end": "225440"
  },
  {
    "text": "won't be able to have infinite loops in",
    "start": "225440",
    "end": "227040"
  },
  {
    "text": "your programs",
    "start": "227040",
    "end": "228080"
  },
  {
    "text": "uh but that makes it uh short to",
    "start": "228080",
    "end": "230239"
  },
  {
    "text": "terminate and",
    "start": "230239",
    "end": "231519"
  },
  {
    "text": "you won't be able to leak some sensitive",
    "start": "231519",
    "end": "234560"
  },
  {
    "text": "memory uh to the user space",
    "start": "234560",
    "end": "238560"
  },
  {
    "text": "or to uh perform out-of-bound accesses",
    "start": "238560",
    "end": "241599"
  },
  {
    "text": "in your ebps program and to risk",
    "start": "241599",
    "end": "243519"
  },
  {
    "text": "crashing your camera that",
    "start": "243519",
    "end": "244879"
  },
  {
    "text": "just won't happen uh which is a really",
    "start": "244879",
    "end": "247599"
  },
  {
    "text": "strong",
    "start": "247599",
    "end": "248720"
  },
  {
    "text": "feature um at the same time you get",
    "start": "248720",
    "end": "251840"
  },
  {
    "text": "something which is very versatile",
    "start": "251840",
    "end": "253280"
  },
  {
    "text": "because you have a number of existing",
    "start": "253280",
    "end": "254799"
  },
  {
    "text": "program types like 31 at the moment",
    "start": "254799",
    "end": "257680"
  },
  {
    "text": "some of them can be attached to",
    "start": "257680",
    "end": "259199"
  },
  {
    "text": "different hooks inside of the kernel",
    "start": "259199",
    "end": "261919"
  },
  {
    "text": "so that means a lot of possible use",
    "start": "261919",
    "end": "263600"
  },
  {
    "text": "cases you have also a number of helper",
    "start": "263600",
    "end": "265680"
  },
  {
    "text": "functions that are",
    "start": "265680",
    "end": "267360"
  },
  {
    "text": "functions defined in the kernel which",
    "start": "267360",
    "end": "269840"
  },
  {
    "text": "act as",
    "start": "269840",
    "end": "270639"
  },
  {
    "text": "some kind of user library functions that",
    "start": "270639",
    "end": "274080"
  },
  {
    "text": "can be called from within bpf programs",
    "start": "274080",
    "end": "275919"
  },
  {
    "text": "to help you",
    "start": "275919",
    "end": "277840"
  },
  {
    "text": "perform some specific tasks you have a",
    "start": "277840",
    "end": "280960"
  },
  {
    "text": "number of maps too",
    "start": "280960",
    "end": "282479"
  },
  {
    "text": "ebpf maps are some uh kernel uh",
    "start": "282479",
    "end": "285600"
  },
  {
    "start": "283000",
    "end": "283000"
  },
  {
    "text": "memory areas available to programs uh",
    "start": "285600",
    "end": "288320"
  },
  {
    "text": "usually",
    "start": "288320",
    "end": "288880"
  },
  {
    "text": "key value storage um areas like uh",
    "start": "288880",
    "end": "292560"
  },
  {
    "text": "arrays or hash maps uh a few other ones",
    "start": "292560",
    "end": "296080"
  },
  {
    "text": "for dedicated uh",
    "start": "296080",
    "end": "297520"
  },
  {
    "text": "use cases too and those maps can",
    "start": "297520",
    "end": "301120"
  },
  {
    "text": "be shared between different instances of",
    "start": "301120",
    "end": "303600"
  },
  {
    "text": "a program",
    "start": "303600",
    "end": "304560"
  },
  {
    "text": "um to store some state for example some",
    "start": "304560",
    "end": "308000"
  },
  {
    "text": "counter some metrics whatever",
    "start": "308000",
    "end": "310000"
  },
  {
    "text": "you can also share them between",
    "start": "310000",
    "end": "311440"
  },
  {
    "text": "different programs to correlate some",
    "start": "311440",
    "end": "313520"
  },
  {
    "text": "data",
    "start": "313520",
    "end": "314160"
  },
  {
    "text": "you can also share them with user space",
    "start": "314160",
    "end": "317280"
  },
  {
    "text": "to share information with user space to",
    "start": "317280",
    "end": "319280"
  },
  {
    "text": "collect metrics or to pass down some",
    "start": "319280",
    "end": "322160"
  },
  {
    "text": "configuration options",
    "start": "322160",
    "end": "324080"
  },
  {
    "start": "324000",
    "end": "324000"
  },
  {
    "text": "um in addition to those features uh we",
    "start": "324080",
    "end": "327360"
  },
  {
    "text": "get a number of things",
    "start": "327360",
    "end": "328560"
  },
  {
    "text": "that the execution engine itself is",
    "start": "328560",
    "end": "330400"
  },
  {
    "text": "supporting uh",
    "start": "330400",
    "end": "331840"
  },
  {
    "text": "as the bpf system uh subsystem is",
    "start": "331840",
    "end": "334880"
  },
  {
    "text": "getting improved so we have",
    "start": "334880",
    "end": "336320"
  },
  {
    "text": "now up to one million instructions in",
    "start": "336320",
    "end": "338240"
  },
  {
    "text": "the program which makes it",
    "start": "338240",
    "end": "340000"
  },
  {
    "text": "um flexible for a number for a wide",
    "start": "340000",
    "end": "342320"
  },
  {
    "text": "number of use case even advanced",
    "start": "342320",
    "end": "344479"
  },
  {
    "text": "uh we have tech codes we have ebpf to",
    "start": "344479",
    "end": "346560"
  },
  {
    "text": "bpa function calls",
    "start": "346560",
    "end": "348320"
  },
  {
    "text": "we have banded loops support now we have",
    "start": "348320",
    "end": "350960"
  },
  {
    "text": "a number of things like this that makes",
    "start": "350960",
    "end": "352800"
  },
  {
    "text": "it really closer and closer to um",
    "start": "352800",
    "end": "355600"
  },
  {
    "text": "just a regular program that you would uh",
    "start": "355600",
    "end": "358880"
  },
  {
    "text": "compile from c or from any other",
    "start": "358880",
    "end": "360720"
  },
  {
    "text": "language already it's getting close to",
    "start": "360720",
    "end": "362960"
  },
  {
    "text": "uh something very",
    "start": "362960",
    "end": "364080"
  },
  {
    "text": "generic and um that you can use for",
    "start": "364080",
    "end": "367680"
  },
  {
    "text": "all type of usage so about the use cases",
    "start": "367680",
    "end": "371120"
  },
  {
    "start": "369000",
    "end": "369000"
  },
  {
    "text": "um they mostly fall down into",
    "start": "371120",
    "end": "374639"
  },
  {
    "text": "two big categories which are network",
    "start": "374639",
    "end": "376400"
  },
  {
    "text": "packet processing on one side and",
    "start": "376400",
    "end": "378479"
  },
  {
    "text": "tracing and monitoring on the other side",
    "start": "378479",
    "end": "381280"
  },
  {
    "text": "as for networking we have a number of",
    "start": "381280",
    "end": "382960"
  },
  {
    "text": "hooks in the kernel so we have for",
    "start": "382960",
    "end": "384800"
  },
  {
    "text": "example a hook on the",
    "start": "384800",
    "end": "386080"
  },
  {
    "text": "tc traffic control both ingress and",
    "start": "386080",
    "end": "388800"
  },
  {
    "text": "egress path",
    "start": "388800",
    "end": "390000"
  },
  {
    "text": "we have the xdp hook which is about",
    "start": "390000",
    "end": "393680"
  },
  {
    "text": "going very low uh in front of the kennel",
    "start": "393680",
    "end": "396960"
  },
  {
    "text": "stack for processing packets",
    "start": "396960",
    "end": "398639"
  },
  {
    "text": "just at the exit of the driver and we",
    "start": "398639",
    "end": "401759"
  },
  {
    "text": "can retrieve our bike packets from there",
    "start": "401759",
    "end": "404160"
  },
  {
    "text": "and process",
    "start": "404160",
    "end": "404880"
  },
  {
    "text": "them uh even before the circuit buffer",
    "start": "404880",
    "end": "407199"
  },
  {
    "text": "is allocated so",
    "start": "407199",
    "end": "408000"
  },
  {
    "text": "even before we spend time and resources",
    "start": "408000",
    "end": "410720"
  },
  {
    "text": "processing the packets in the linux",
    "start": "410720",
    "end": "412319"
  },
  {
    "text": "stack",
    "start": "412319",
    "end": "413440"
  },
  {
    "text": "so that's very efficient in terms of",
    "start": "413440",
    "end": "415840"
  },
  {
    "text": "performance here",
    "start": "415840",
    "end": "418080"
  },
  {
    "text": "those hooks make ebpf very suited very",
    "start": "418080",
    "end": "421039"
  },
  {
    "text": "well suited for",
    "start": "421039",
    "end": "422240"
  },
  {
    "text": "applications like protection against",
    "start": "422240",
    "end": "424000"
  },
  {
    "text": "denial of service attacks",
    "start": "424000",
    "end": "425919"
  },
  {
    "text": "uh or for load balancing to",
    "start": "425919",
    "end": "429919"
  },
  {
    "text": "because it's located uh just in front of",
    "start": "429919",
    "end": "432319"
  },
  {
    "text": "the stack",
    "start": "432319",
    "end": "433199"
  },
  {
    "text": "uh you have some other applications to",
    "start": "433199",
    "end": "434960"
  },
  {
    "text": "like routing overlay",
    "start": "434960",
    "end": "436639"
  },
  {
    "text": "nat many others you can parent",
    "start": "436639",
    "end": "440319"
  },
  {
    "text": "some options for tcp sessions and even",
    "start": "440319",
    "end": "443599"
  },
  {
    "text": "re-implement the congestion algorithms",
    "start": "443599",
    "end": "445840"
  },
  {
    "text": "used by tcp",
    "start": "445840",
    "end": "448479"
  },
  {
    "text": "so a lot of things on the networking",
    "start": "448479",
    "end": "450080"
  },
  {
    "text": "side uh as for the tracing and",
    "start": "450080",
    "end": "452240"
  },
  {
    "text": "monitoring you have",
    "start": "452240",
    "end": "453680"
  },
  {
    "text": "a number of hooks on uh kernel probes",
    "start": "453680",
    "end": "456720"
  },
  {
    "text": "and user probes",
    "start": "456720",
    "end": "458000"
  },
  {
    "text": "that are dynamic probes that don't need",
    "start": "458000",
    "end": "460160"
  },
  {
    "text": "any instrumentation",
    "start": "460160",
    "end": "461680"
  },
  {
    "text": "inside of your programs you have also",
    "start": "461680",
    "end": "464800"
  },
  {
    "text": "static probes with trace points or the",
    "start": "464800",
    "end": "467360"
  },
  {
    "text": "user space equivalent and a few other",
    "start": "467360",
    "end": "469039"
  },
  {
    "text": "probes too",
    "start": "469039",
    "end": "469919"
  },
  {
    "text": "and you can use them to inspect and",
    "start": "469919",
    "end": "471840"
  },
  {
    "text": "trace and profile your kernel",
    "start": "471840",
    "end": "474160"
  },
  {
    "text": "or your user space applications making",
    "start": "474160",
    "end": "477440"
  },
  {
    "text": "it very suitable for",
    "start": "477440",
    "end": "478800"
  },
  {
    "text": "understanding what's going on in terms",
    "start": "478800",
    "end": "480560"
  },
  {
    "text": "of resources usage",
    "start": "480560",
    "end": "481919"
  },
  {
    "text": "and optimizing your programs too",
    "start": "481919",
    "end": "485360"
  },
  {
    "text": "one big advantage of ebpf is that",
    "start": "485360",
    "end": "487520"
  },
  {
    "text": "because it's a program running in your",
    "start": "487520",
    "end": "488879"
  },
  {
    "text": "canon you can",
    "start": "488879",
    "end": "490240"
  },
  {
    "text": "aggregate and correlate matrix and all",
    "start": "490240",
    "end": "492560"
  },
  {
    "text": "the data inside of your program",
    "start": "492560",
    "end": "494160"
  },
  {
    "text": "and just send what you need the",
    "start": "494160",
    "end": "495840"
  },
  {
    "text": "meaningful information to your user",
    "start": "495840",
    "end": "497440"
  },
  {
    "text": "application you don't need to",
    "start": "497440",
    "end": "499120"
  },
  {
    "text": "sample out everything uh to use a space",
    "start": "499120",
    "end": "502560"
  },
  {
    "text": "and that means a lot of gains",
    "start": "502560",
    "end": "505840"
  },
  {
    "text": "in terms of overhead i mean",
    "start": "505840",
    "end": "508879"
  },
  {
    "text": "you're saving a lot of overhead you have",
    "start": "508879",
    "end": "511280"
  },
  {
    "text": "a few other use cases too",
    "start": "511280",
    "end": "513039"
  },
  {
    "text": "um so for example you have a linux",
    "start": "513039",
    "end": "514959"
  },
  {
    "text": "security module that is",
    "start": "514959",
    "end": "516560"
  },
  {
    "text": "built on top of ebpf now in the kernel",
    "start": "516560",
    "end": "519279"
  },
  {
    "text": "you have proposals that were made about",
    "start": "519279",
    "end": "522479"
  },
  {
    "text": "using ebpa for file systems or storage",
    "start": "522479",
    "end": "525839"
  },
  {
    "text": "so the list is growing that more and",
    "start": "525839",
    "end": "527360"
  },
  {
    "text": "more people getting interested in bpf",
    "start": "527360",
    "end": "529279"
  },
  {
    "text": "and proposing",
    "start": "529279",
    "end": "530240"
  },
  {
    "text": "use cases and",
    "start": "530240",
    "end": "533440"
  },
  {
    "text": "that's something that is very",
    "start": "533440",
    "end": "535839"
  },
  {
    "text": "interesting to see",
    "start": "535839",
    "end": "536880"
  },
  {
    "text": "i'm looking forward to seeing new",
    "start": "536880",
    "end": "538480"
  },
  {
    "text": "applications uh using ebpf",
    "start": "538480",
    "end": "540959"
  },
  {
    "text": "but we have all those use cases how can",
    "start": "540959",
    "end": "543680"
  },
  {
    "text": "we",
    "start": "543680",
    "end": "544240"
  },
  {
    "text": "uh use ebpf uh concretely to uh to start",
    "start": "544240",
    "end": "548640"
  },
  {
    "text": "tracing systems for example nowadays uh",
    "start": "548640",
    "end": "552399"
  },
  {
    "start": "551000",
    "end": "551000"
  },
  {
    "text": "the first tool i would like to present",
    "start": "552399",
    "end": "554160"
  },
  {
    "text": "is uh first the llvm backend",
    "start": "554160",
    "end": "556640"
  },
  {
    "text": "to uh generate ebpf bytecode",
    "start": "556640",
    "end": "560560"
  },
  {
    "text": "this bytecode is very close to assembly",
    "start": "560560",
    "end": "563120"
  },
  {
    "text": "but nobody really",
    "start": "563120",
    "end": "564399"
  },
  {
    "text": "likes spending the time writing assembly",
    "start": "564399",
    "end": "566720"
  },
  {
    "text": "i think",
    "start": "566720",
    "end": "567440"
  },
  {
    "text": "so we have um the the",
    "start": "567440",
    "end": "570560"
  },
  {
    "text": "clang and llc tools that have been",
    "start": "570560",
    "end": "573279"
  },
  {
    "text": "adapted to generate",
    "start": "573279",
    "end": "574640"
  },
  {
    "text": "uh ebpa bytecode from c in particular",
    "start": "574640",
    "end": "578000"
  },
  {
    "text": "and so you can just write c programs and",
    "start": "578000",
    "end": "580560"
  },
  {
    "text": "turn them into ebpf bytecode that will",
    "start": "580560",
    "end": "582320"
  },
  {
    "text": "be stored",
    "start": "582320",
    "end": "583519"
  },
  {
    "text": "in l5 object files and load it from",
    "start": "583519",
    "end": "586240"
  },
  {
    "start": "586000",
    "end": "586000"
  },
  {
    "text": "there",
    "start": "586240",
    "end": "586800"
  },
  {
    "text": "so here is a very simple ebpf program",
    "start": "586800",
    "end": "589440"
  },
  {
    "text": "for networking",
    "start": "589440",
    "end": "591440"
  },
  {
    "text": "it would be attached to an interface",
    "start": "591440",
    "end": "594959"
  },
  {
    "text": "and drop everything which is not ipv4",
    "start": "594959",
    "end": "597360"
  },
  {
    "text": "packets",
    "start": "597360",
    "end": "598720"
  },
  {
    "text": "so this is a standalone program i can",
    "start": "598720",
    "end": "600560"
  },
  {
    "text": "just",
    "start": "600560",
    "end": "601760"
  },
  {
    "text": "compile this file with clang and attach",
    "start": "601760",
    "end": "603760"
  },
  {
    "text": "it with the command ip link set xdp",
    "start": "603760",
    "end": "606880"
  },
  {
    "text": "to drop everything which is not ipv4 and",
    "start": "606880",
    "end": "609040"
  },
  {
    "text": "the way it works",
    "start": "609040",
    "end": "610000"
  },
  {
    "text": "is we have two checks in this program",
    "start": "610000",
    "end": "611920"
  },
  {
    "text": "the first one is about",
    "start": "611920",
    "end": "613440"
  },
  {
    "text": "using the data and data end pointers",
    "start": "613440",
    "end": "616320"
  },
  {
    "text": "pointing to",
    "start": "616320",
    "end": "617279"
  },
  {
    "text": "uh the beginning and end of the packet",
    "start": "617279",
    "end": "619680"
  },
  {
    "text": "data respectively",
    "start": "619680",
    "end": "620959"
  },
  {
    "text": "to make sure that the packet is uh big",
    "start": "620959",
    "end": "622880"
  },
  {
    "text": "enough so that i can",
    "start": "622880",
    "end": "624320"
  },
  {
    "text": "uh check in it for the prototype field",
    "start": "624320",
    "end": "628160"
  },
  {
    "text": "of the ethernet header",
    "start": "628160",
    "end": "630079"
  },
  {
    "text": "and um otherwise the verifier wouldn't",
    "start": "630079",
    "end": "632399"
  },
  {
    "text": "let me",
    "start": "632399",
    "end": "633120"
  },
  {
    "text": "do this the referencing of the ethernet",
    "start": "633120",
    "end": "635680"
  },
  {
    "text": "pointer in the second check",
    "start": "635680",
    "end": "637519"
  },
  {
    "text": "um and if this first check passes then i",
    "start": "637519",
    "end": "640800"
  },
  {
    "text": "can",
    "start": "640800",
    "end": "641120"
  },
  {
    "text": "just read the prototype field and",
    "start": "641120",
    "end": "643360"
  },
  {
    "text": "depending on whether it's ipv4 or not i",
    "start": "643360",
    "end": "645680"
  },
  {
    "text": "can",
    "start": "645680",
    "end": "646800"
  },
  {
    "text": "drop my packet or let it pass to the",
    "start": "646800",
    "end": "649600"
  },
  {
    "text": "linux stack",
    "start": "649600",
    "end": "651040"
  },
  {
    "text": "so that's something really simple but",
    "start": "651040",
    "end": "652959"
  },
  {
    "text": "really useful already uh really powerful",
    "start": "652959",
    "end": "655200"
  },
  {
    "text": "already",
    "start": "655200",
    "end": "656640"
  },
  {
    "start": "656000",
    "end": "656000"
  },
  {
    "text": "here is something for tracing what we do",
    "start": "656640",
    "end": "659440"
  },
  {
    "text": "here is we attach the program to",
    "start": "659440",
    "end": "662079"
  },
  {
    "text": "the deuces open function in the kernel",
    "start": "662079",
    "end": "665120"
  },
  {
    "text": "and each time some process calls the",
    "start": "665120",
    "end": "668160"
  },
  {
    "text": "open system called we run our program so",
    "start": "668160",
    "end": "671120"
  },
  {
    "text": "what we do in our program is calling a",
    "start": "671120",
    "end": "672959"
  },
  {
    "text": "first ebpf helper function to retrieve",
    "start": "672959",
    "end": "675600"
  },
  {
    "text": "the pid of the program uh realizing the",
    "start": "675600",
    "end": "678480"
  },
  {
    "text": "code",
    "start": "678480",
    "end": "679200"
  },
  {
    "text": "and then the second one is just um",
    "start": "679200",
    "end": "682480"
  },
  {
    "text": "dumping a line in some log file",
    "start": "682480",
    "end": "685760"
  },
  {
    "text": "containing the name of the program its",
    "start": "685760",
    "end": "688240"
  },
  {
    "text": "pid",
    "start": "688240",
    "end": "688880"
  },
  {
    "text": "and its arguments the file name of the",
    "start": "688880",
    "end": "691120"
  },
  {
    "text": "of the file that's being opened and the",
    "start": "691120",
    "end": "692720"
  },
  {
    "text": "flags for opening the file",
    "start": "692720",
    "end": "694880"
  },
  {
    "text": "this is not standalone this comes with",
    "start": "694880",
    "end": "697760"
  },
  {
    "text": "this has to be used with pcc which is a",
    "start": "697760",
    "end": "700480"
  },
  {
    "text": "framework for building bpf tools so bcc",
    "start": "700480",
    "end": "704000"
  },
  {
    "text": "handlers compiling the programs with",
    "start": "704000",
    "end": "705760"
  },
  {
    "text": "libel lvm",
    "start": "705760",
    "end": "706959"
  },
  {
    "text": "and it provides a set of python wrappers",
    "start": "706959",
    "end": "709200"
  },
  {
    "text": "to uh to help manage",
    "start": "709200",
    "end": "710560"
  },
  {
    "text": "ebpf objects too it also contains the",
    "start": "710560",
    "end": "713279"
  },
  {
    "text": "number of",
    "start": "713279",
    "end": "713839"
  },
  {
    "text": "examples of its own so you have a big",
    "start": "713839",
    "end": "716959"
  },
  {
    "text": "number of",
    "start": "716959",
    "end": "717519"
  },
  {
    "text": "tools and examples coming with bcc one",
    "start": "717519",
    "end": "720079"
  },
  {
    "start": "719000",
    "end": "719000"
  },
  {
    "text": "example if",
    "start": "720079",
    "end": "720880"
  },
  {
    "text": "is open snoop which does just what we",
    "start": "720880",
    "end": "723839"
  },
  {
    "text": "did in the previous example",
    "start": "723839",
    "end": "726000"
  },
  {
    "text": "but in addition to that it also hooks at",
    "start": "726000",
    "end": "728160"
  },
  {
    "text": "the exit of the deuces open",
    "start": "728160",
    "end": "730320"
  },
  {
    "text": "uh function to retrieve the",
    "start": "730320",
    "end": "733839"
  },
  {
    "text": "value returned by the function and it",
    "start": "733839",
    "end": "736320"
  },
  {
    "text": "prints its output to the",
    "start": "736320",
    "end": "737839"
  },
  {
    "text": "to the console so we can see just like",
    "start": "737839",
    "end": "740560"
  },
  {
    "text": "on this slide we have the file names",
    "start": "740560",
    "end": "742639"
  },
  {
    "text": "and also the names of the process",
    "start": "742639",
    "end": "744560"
  },
  {
    "text": "performing the calls",
    "start": "744560",
    "end": "746000"
  },
  {
    "text": "and some additional information",
    "start": "746000",
    "end": "749200"
  },
  {
    "start": "749000",
    "end": "749000"
  },
  {
    "text": "here is another example of bpf2",
    "start": "749200",
    "end": "752560"
  },
  {
    "text": "sorry here is another example of bcc",
    "start": "752560",
    "end": "755120"
  },
  {
    "text": "tool",
    "start": "755120",
    "end": "756320"
  },
  {
    "text": "which is about uh profiling cpus um",
    "start": "756320",
    "end": "760079"
  },
  {
    "text": "so we can understand uh what functions",
    "start": "760079",
    "end": "762800"
  },
  {
    "text": "uh the cpu is spending time on",
    "start": "762800",
    "end": "764800"
  },
  {
    "text": "so the length horizontal length of the",
    "start": "764800",
    "end": "767120"
  },
  {
    "text": "function of the bars on the",
    "start": "767120",
    "end": "768880"
  },
  {
    "text": "flame graph presented here is the time",
    "start": "768880",
    "end": "771200"
  },
  {
    "text": "spent in",
    "start": "771200",
    "end": "772320"
  },
  {
    "text": "every function by the cpu and the",
    "start": "772320",
    "end": "775040"
  },
  {
    "text": "vertical",
    "start": "775040",
    "end": "776000"
  },
  {
    "text": "um boxes represent the",
    "start": "776000",
    "end": "779279"
  },
  {
    "text": "call stack of the different functions we",
    "start": "779279",
    "end": "781760"
  },
  {
    "text": "just need two commands to",
    "start": "781760",
    "end": "783279"
  },
  {
    "text": "generate this graph the first one to run",
    "start": "783279",
    "end": "785200"
  },
  {
    "text": "the bcc tool",
    "start": "785200",
    "end": "786720"
  },
  {
    "text": "to extract the data from the cpu",
    "start": "786720",
    "end": "790720"
  },
  {
    "text": "to to sample the cpu and extract the",
    "start": "790720",
    "end": "793200"
  },
  {
    "text": "data and the second",
    "start": "793200",
    "end": "794639"
  },
  {
    "text": "command is just running a script to",
    "start": "794639",
    "end": "796800"
  },
  {
    "text": "process its data and generate the graph",
    "start": "796800",
    "end": "798880"
  },
  {
    "text": "itself",
    "start": "798880",
    "end": "799680"
  },
  {
    "text": "so you can use that to profile cpu for",
    "start": "799680",
    "end": "802399"
  },
  {
    "text": "your kernel but also for applications",
    "start": "802399",
    "end": "804639"
  },
  {
    "text": "written in a variety of languages",
    "start": "804639",
    "end": "806399"
  },
  {
    "text": "so there is python ruby php uh see like",
    "start": "806399",
    "end": "809440"
  },
  {
    "text": "languages and so on and so forth",
    "start": "809440",
    "end": "811839"
  },
  {
    "text": "so that makes it really handy to",
    "start": "811839",
    "end": "813200"
  },
  {
    "text": "troubleshoot where your cpu is spending",
    "start": "813200",
    "end": "815040"
  },
  {
    "start": "814000",
    "end": "814000"
  },
  {
    "text": "some time to optimize",
    "start": "815040",
    "end": "816399"
  },
  {
    "text": "your applications we have a number of",
    "start": "816399",
    "end": "819360"
  },
  {
    "text": "other tools available with bcc2",
    "start": "819360",
    "end": "821839"
  },
  {
    "text": "and this picture is an overview of",
    "start": "821839",
    "end": "825360"
  },
  {
    "text": "all the components that can be traced uh",
    "start": "825360",
    "end": "828000"
  },
  {
    "text": "with",
    "start": "828000",
    "end": "828560"
  },
  {
    "text": "the existing tools they're all open so",
    "start": "828560",
    "end": "830639"
  },
  {
    "text": "so you can use",
    "start": "830639",
    "end": "831839"
  },
  {
    "text": "any of those already um so just have a",
    "start": "831839",
    "end": "834399"
  },
  {
    "text": "look if you're interested in",
    "start": "834399",
    "end": "835600"
  },
  {
    "text": "understanding what's going on",
    "start": "835600",
    "end": "837040"
  },
  {
    "text": "uh deep down on your system at different",
    "start": "837040",
    "end": "841440"
  },
  {
    "text": "parts of your of your system",
    "start": "841440",
    "end": "845040"
  },
  {
    "start": "844000",
    "end": "844000"
  },
  {
    "text": "another tool uh which is quite similar",
    "start": "845040",
    "end": "847839"
  },
  {
    "text": "to bcc but",
    "start": "847839",
    "end": "848880"
  },
  {
    "text": "even easier to use is bpf trace uh it's",
    "start": "848880",
    "end": "851839"
  },
  {
    "text": "built on top of vcc but the idea is that",
    "start": "851839",
    "end": "853680"
  },
  {
    "text": "you just use a one-liners or short",
    "start": "853680",
    "end": "855760"
  },
  {
    "text": "scripts",
    "start": "855760",
    "end": "857040"
  },
  {
    "text": "to run commands it's like an equivalent",
    "start": "857040",
    "end": "859120"
  },
  {
    "text": "to d trace",
    "start": "859120",
    "end": "860320"
  },
  {
    "text": "so the first example i have here is",
    "start": "860320",
    "end": "862399"
  },
  {
    "text": "about reproducing the",
    "start": "862399",
    "end": "863839"
  },
  {
    "text": "uh tracing of the open system call but",
    "start": "863839",
    "end": "866880"
  },
  {
    "text": "it's just on",
    "start": "866880",
    "end": "868399"
  },
  {
    "text": "a one line comment so that's very short",
    "start": "868399",
    "end": "871279"
  },
  {
    "text": "uh",
    "start": "871279",
    "end": "871680"
  },
  {
    "text": "you have two more examples below about",
    "start": "871680",
    "end": "874240"
  },
  {
    "text": "uh",
    "start": "874240",
    "end": "874880"
  },
  {
    "text": "printing the size distribution by",
    "start": "874880",
    "end": "876720"
  },
  {
    "text": "process of the",
    "start": "876720",
    "end": "878480"
  },
  {
    "text": "length um written read by the",
    "start": "878480",
    "end": "881839"
  },
  {
    "text": "read system code so you you have",
    "start": "881839",
    "end": "884000"
  },
  {
    "text": "programs using read and",
    "start": "884000",
    "end": "885760"
  },
  {
    "text": "read returns length of the memory chunk",
    "start": "885760",
    "end": "888240"
  },
  {
    "text": "that's being read",
    "start": "888240",
    "end": "889519"
  },
  {
    "text": "and you can just print a histogram in",
    "start": "889519",
    "end": "891920"
  },
  {
    "text": "the console with that",
    "start": "891920",
    "end": "893680"
  },
  {
    "text": "the first one is bad counting the llc",
    "start": "893680",
    "end": "895680"
  },
  {
    "text": "cache misses",
    "start": "895680",
    "end": "897279"
  },
  {
    "text": "for your processes so really really",
    "start": "897279",
    "end": "900160"
  },
  {
    "text": "short comments but",
    "start": "900160",
    "end": "901199"
  },
  {
    "text": "uh potentially really helpful",
    "start": "901199",
    "end": "902959"
  },
  {
    "text": "information to help you troubleshoot",
    "start": "902959",
    "end": "904320"
  },
  {
    "start": "903000",
    "end": "903000"
  },
  {
    "text": "your programs",
    "start": "904320",
    "end": "905760"
  },
  {
    "text": "um if you want to go beyond bcc",
    "start": "905760",
    "end": "908880"
  },
  {
    "text": "and bpf trace you can build your own",
    "start": "908880",
    "end": "910959"
  },
  {
    "text": "applications you have libraries to help",
    "start": "910959",
    "end": "912720"
  },
  {
    "text": "you with that",
    "start": "912720",
    "end": "913760"
  },
  {
    "text": "uh you are not starting from scratch you",
    "start": "913760",
    "end": "916959"
  },
  {
    "text": "have uh for example libpf which is",
    "start": "916959",
    "end": "919360"
  },
  {
    "text": "uh the reference library for everything",
    "start": "919360",
    "end": "921519"
  },
  {
    "text": "related to the",
    "start": "921519",
    "end": "922560"
  },
  {
    "text": "through bpf it's the reference because",
    "start": "922560",
    "end": "925519"
  },
  {
    "text": "it's being",
    "start": "925519",
    "end": "926000"
  },
  {
    "text": "updated by the kernel developers each",
    "start": "926000",
    "end": "928079"
  },
  {
    "text": "time some new features is being added to",
    "start": "928079",
    "end": "930240"
  },
  {
    "text": "the bpf uh subsystem on linux",
    "start": "930240",
    "end": "933040"
  },
  {
    "text": "uh you have a number of libraries",
    "start": "933040",
    "end": "934720"
  },
  {
    "text": "available in go also",
    "start": "934720",
    "end": "936480"
  },
  {
    "text": "i'm probably a little bit biased here",
    "start": "936480",
    "end": "938959"
  },
  {
    "text": "but i would definitely",
    "start": "938959",
    "end": "940000"
  },
  {
    "text": "recommend going with the ebpf library",
    "start": "940000",
    "end": "942959"
  },
  {
    "text": "maintained by cloudflare and cdm",
    "start": "942959",
    "end": "944959"
  },
  {
    "text": "which is a pure go library very useful",
    "start": "944959",
    "end": "947519"
  },
  {
    "text": "to uh",
    "start": "947519",
    "end": "948160"
  },
  {
    "text": "to manage ebpf objects there are some",
    "start": "948160",
    "end": "951519"
  },
  {
    "text": "options in rust too",
    "start": "951519",
    "end": "952800"
  },
  {
    "text": "and possibly in other languages i'm not",
    "start": "952800",
    "end": "955199"
  },
  {
    "text": "familiar with everything that's",
    "start": "955199",
    "end": "956880"
  },
  {
    "text": "uh existing on this side",
    "start": "956880",
    "end": "960320"
  },
  {
    "start": "959000",
    "end": "959000"
  },
  {
    "text": "last tool i would like to mention is not",
    "start": "960320",
    "end": "961920"
  },
  {
    "text": "so much about programming with ebpf but",
    "start": "961920",
    "end": "964320"
  },
  {
    "text": "more about managing ebpf objects",
    "start": "964320",
    "end": "968240"
  },
  {
    "text": "i want to be able to understand what's",
    "start": "968240",
    "end": "970160"
  },
  {
    "text": "going on in my system",
    "start": "970160",
    "end": "971680"
  },
  {
    "text": "uh like what programs are loaded uh and",
    "start": "971680",
    "end": "974480"
  },
  {
    "text": "to inspect them so there is bpf tool",
    "start": "974480",
    "end": "976959"
  },
  {
    "text": "uh that you can use to load programs",
    "start": "976959",
    "end": "978959"
  },
  {
    "text": "with ppf prog load",
    "start": "978959",
    "end": "981279"
  },
  {
    "text": "from the command line or epf to proc",
    "start": "981279",
    "end": "983519"
  },
  {
    "text": "show to",
    "start": "983519",
    "end": "984399"
  },
  {
    "text": "just list the programs that are loaded",
    "start": "984399",
    "end": "986399"
  },
  {
    "text": "on your system so here i have",
    "start": "986399",
    "end": "988079"
  },
  {
    "text": "two programs attached to circuits and c",
    "start": "988079",
    "end": "991360"
  },
  {
    "text": "groups and",
    "start": "991360",
    "end": "992240"
  },
  {
    "text": "one xdp program i can just dump the",
    "start": "992240",
    "end": "995839"
  },
  {
    "start": "993000",
    "end": "993000"
  },
  {
    "text": "bytecode of those programs to uh to see",
    "start": "995839",
    "end": "998079"
  },
  {
    "text": "what's",
    "start": "998079",
    "end": "998560"
  },
  {
    "text": "uh in the program that that's loading on",
    "start": "998560",
    "end": "1001199"
  },
  {
    "text": "the kernel",
    "start": "1001199",
    "end": "1002160"
  },
  {
    "text": "uh i can download the cheat compile",
    "start": "1002160",
    "end": "1004800"
  },
  {
    "text": "instructions",
    "start": "1004800",
    "end": "1005519"
  },
  {
    "text": "in case it helps i can manage maps too",
    "start": "1005519",
    "end": "1009040"
  },
  {
    "start": "1007000",
    "end": "1007000"
  },
  {
    "text": "i can list the maps i can look up for",
    "start": "1009040",
    "end": "1012160"
  },
  {
    "text": "given entry i can update the map and i",
    "start": "1012160",
    "end": "1015279"
  },
  {
    "start": "1014000",
    "end": "1014000"
  },
  {
    "text": "have a few more options available as",
    "start": "1015279",
    "end": "1016880"
  },
  {
    "text": "well i can",
    "start": "1016880",
    "end": "1018079"
  },
  {
    "text": "test run programs i can list the",
    "start": "1018079",
    "end": "1021279"
  },
  {
    "text": "ebpf related features supported by my",
    "start": "1021279",
    "end": "1023600"
  },
  {
    "text": "kernel",
    "start": "1023600",
    "end": "1024798"
  },
  {
    "text": "if you're interested in all those you",
    "start": "1024799",
    "end": "1026319"
  },
  {
    "text": "should probably have a look at the",
    "start": "1026319",
    "end": "1027520"
  },
  {
    "text": "manual pages for bpf2",
    "start": "1027520",
    "end": "1030558"
  },
  {
    "text": "and that's it for the tools now can we",
    "start": "1030559",
    "end": "1033600"
  },
  {
    "text": "use some of those tools and some of the",
    "start": "1033600",
    "end": "1036160"
  },
  {
    "text": "advantages we've seen about the bpf",
    "start": "1036160",
    "end": "1038400"
  },
  {
    "text": "into cloud native environments so as a",
    "start": "1038400",
    "end": "1041120"
  },
  {
    "start": "1041000",
    "end": "1041000"
  },
  {
    "text": "reminder we have a number of advantages",
    "start": "1041120",
    "end": "1043199"
  },
  {
    "text": "uh brought forward by ebpa if we have",
    "start": "1043199",
    "end": "1046000"
  },
  {
    "text": "safety",
    "start": "1046000",
    "end": "1046798"
  },
  {
    "text": "we have performance we have a big deal",
    "start": "1046799",
    "end": "1049039"
  },
  {
    "text": "in terms of observability",
    "start": "1049039",
    "end": "1051120"
  },
  {
    "text": "it's something very versatile it's in",
    "start": "1051120",
    "end": "1053440"
  },
  {
    "text": "the kernel but it remains flexible and",
    "start": "1053440",
    "end": "1055280"
  },
  {
    "text": "having it in the corner it's also a huge",
    "start": "1055280",
    "end": "1057600"
  },
  {
    "text": "advantage for the reasons",
    "start": "1057600",
    "end": "1059280"
  },
  {
    "text": "uh in particular because it's available",
    "start": "1059280",
    "end": "1061039"
  },
  {
    "text": "by default you don't need to install",
    "start": "1061039",
    "end": "1062480"
  },
  {
    "text": "everything",
    "start": "1062480",
    "end": "1063120"
  },
  {
    "text": "uh to anything uh to use ebpf it's",
    "start": "1063120",
    "end": "1066640"
  },
  {
    "text": "already here on your",
    "start": "1066640",
    "end": "1067760"
  },
  {
    "text": "uh system uh it has a stable user api so",
    "start": "1067760",
    "end": "1071520"
  },
  {
    "text": "it's",
    "start": "1071520",
    "end": "1072160"
  },
  {
    "text": "not subject to uh breakages uh from one",
    "start": "1072160",
    "end": "1075600"
  },
  {
    "text": "conservation to the next one",
    "start": "1075600",
    "end": "1077440"
  },
  {
    "text": "um it's also really easy to update an",
    "start": "1077440",
    "end": "1081120"
  },
  {
    "text": "ebpf",
    "start": "1081120",
    "end": "1081760"
  },
  {
    "text": "program uh you don't have to uh hack",
    "start": "1081760",
    "end": "1084320"
  },
  {
    "text": "into your kernel and then send the",
    "start": "1084320",
    "end": "1085679"
  },
  {
    "text": "contributions",
    "start": "1085679",
    "end": "1086559"
  },
  {
    "text": "uh upstream and wait for them to be",
    "start": "1086559",
    "end": "1089440"
  },
  {
    "text": "merged and then uh",
    "start": "1089440",
    "end": "1091200"
  },
  {
    "text": "to be available in your version that",
    "start": "1091200",
    "end": "1093120"
  },
  {
    "text": "you're using you just",
    "start": "1093120",
    "end": "1094559"
  },
  {
    "text": "change your program and recompile it and",
    "start": "1094559",
    "end": "1097039"
  },
  {
    "text": "reload it",
    "start": "1097039",
    "end": "1098000"
  },
  {
    "text": "you no need to reboot your system to",
    "start": "1098000",
    "end": "1099840"
  },
  {
    "text": "load it and if you're processing packets",
    "start": "1099840",
    "end": "1102000"
  },
  {
    "text": "for example you don't even have any loss",
    "start": "1102000",
    "end": "1103919"
  },
  {
    "text": "of packets between an update",
    "start": "1103919",
    "end": "1105520"
  },
  {
    "text": "from the previous to the next program",
    "start": "1105520",
    "end": "1108400"
  },
  {
    "text": "ebpf is also a container aware",
    "start": "1108400",
    "end": "1110720"
  },
  {
    "text": "in the sense that it has multiple hooks",
    "start": "1110720",
    "end": "1113120"
  },
  {
    "text": "all over the place in the canon",
    "start": "1113120",
    "end": "1115600"
  },
  {
    "text": "networking stack or for observability",
    "start": "1115600",
    "end": "1118640"
  },
  {
    "text": "and so you have a lot of possibilities",
    "start": "1118640",
    "end": "1121679"
  },
  {
    "text": "to",
    "start": "1121679",
    "end": "1122000"
  },
  {
    "text": "uh to to process your packets at the",
    "start": "1122000",
    "end": "1124400"
  },
  {
    "text": "entrance at the exit of different",
    "start": "1124400",
    "end": "1126000"
  },
  {
    "text": "clusters",
    "start": "1126000",
    "end": "1126960"
  },
  {
    "text": "uh and pods um and that",
    "start": "1126960",
    "end": "1130240"
  },
  {
    "text": "makes it really suitable for um all this",
    "start": "1130240",
    "end": "1135120"
  },
  {
    "text": "clown native environments um",
    "start": "1135120",
    "end": "1138240"
  },
  {
    "text": "and one i think one big thing with ebpf",
    "start": "1138240",
    "end": "1140960"
  },
  {
    "text": "is that you have this possibility",
    "start": "1140960",
    "end": "1142880"
  },
  {
    "text": "to not just program and configure",
    "start": "1142880",
    "end": "1146559"
  },
  {
    "text": "inside of a framework you can really",
    "start": "1146559",
    "end": "1149039"
  },
  {
    "text": "create what you need which means",
    "start": "1149039",
    "end": "1151600"
  },
  {
    "text": "you can also live aside everything",
    "start": "1151600",
    "end": "1155039"
  },
  {
    "text": "in terms of features that you won't be",
    "start": "1155039",
    "end": "1156640"
  },
  {
    "text": "using so for",
    "start": "1156640",
    "end": "1159679"
  },
  {
    "text": "networking if i don't need ipv4 just",
    "start": "1159679",
    "end": "1161840"
  },
  {
    "text": "ipv6",
    "start": "1161840",
    "end": "1162720"
  },
  {
    "text": "i just don't compile any ipv4 related",
    "start": "1162720",
    "end": "1164880"
  },
  {
    "text": "features",
    "start": "1164880",
    "end": "1165840"
  },
  {
    "text": "um and that gives me something",
    "start": "1165840",
    "end": "1168880"
  },
  {
    "text": "really clean and fast and scalable too",
    "start": "1168880",
    "end": "1172559"
  },
  {
    "text": "that i can use to really implement my",
    "start": "1172559",
    "end": "1175200"
  },
  {
    "text": "solution to solve",
    "start": "1175200",
    "end": "1176720"
  },
  {
    "text": "my real world production use cases",
    "start": "1176720",
    "end": "1180480"
  },
  {
    "text": "uh and that's something really important",
    "start": "1180480",
    "end": "1182720"
  },
  {
    "text": "to have this uh",
    "start": "1182720",
    "end": "1183840"
  },
  {
    "text": "kind of flexibility um especially if we",
    "start": "1183840",
    "end": "1186720"
  },
  {
    "text": "consider that the linux systems",
    "start": "1186720",
    "end": "1188480"
  },
  {
    "text": "are really everywhere in the cloud",
    "start": "1188480",
    "end": "1192480"
  },
  {
    "text": "and used for for building everything in",
    "start": "1192480",
    "end": "1194720"
  },
  {
    "text": "data centers",
    "start": "1194720",
    "end": "1195760"
  },
  {
    "text": "uh having ebpf with all this flexibility",
    "start": "1195760",
    "end": "1198640"
  },
  {
    "text": "and all those advantages",
    "start": "1198640",
    "end": "1200240"
  },
  {
    "text": "uh brings us huge benefits so how does",
    "start": "1200240",
    "end": "1202880"
  },
  {
    "start": "1201000",
    "end": "1201000"
  },
  {
    "text": "that translate in practice",
    "start": "1202880",
    "end": "1204880"
  },
  {
    "text": "so for example we have a cube control",
    "start": "1204880",
    "end": "1207039"
  },
  {
    "text": "trace which is already able to run",
    "start": "1207039",
    "end": "1209200"
  },
  {
    "text": "um ppf trace scripts",
    "start": "1209200",
    "end": "1212400"
  },
  {
    "text": "on buzz and clusters uh so what it does",
    "start": "1212400",
    "end": "1215520"
  },
  {
    "text": "is basically",
    "start": "1215520",
    "end": "1216720"
  },
  {
    "text": "launching a worker pod to just run the",
    "start": "1216720",
    "end": "1219440"
  },
  {
    "text": "command on the node that you want to",
    "start": "1219440",
    "end": "1221200"
  },
  {
    "text": "trace or profile and you can have epf",
    "start": "1221200",
    "end": "1223679"
  },
  {
    "text": "trace uh one-liners and scripts",
    "start": "1223679",
    "end": "1225840"
  },
  {
    "text": "uh sending you information about um",
    "start": "1225840",
    "end": "1228880"
  },
  {
    "text": "your your system on the same model we",
    "start": "1228880",
    "end": "1230880"
  },
  {
    "text": "have inspector gadget which is",
    "start": "1230880",
    "end": "1232640"
  },
  {
    "text": "doing like the same thing really but for",
    "start": "1232640",
    "end": "1234799"
  },
  {
    "text": "bcc tools",
    "start": "1234799",
    "end": "1235919"
  },
  {
    "text": "and that's already available upon source",
    "start": "1235919",
    "end": "1237600"
  },
  {
    "start": "1237000",
    "end": "1237000"
  },
  {
    "text": "so you can use it already",
    "start": "1237600",
    "end": "1239039"
  },
  {
    "text": "if you were to focus more on networking",
    "start": "1239039",
    "end": "1241280"
  },
  {
    "text": "uh cdm is probably the reference here",
    "start": "1241280",
    "end": "1244240"
  },
  {
    "text": "so we do networking and observability",
    "start": "1244240",
    "end": "1247039"
  },
  {
    "text": "and security and all of that with ebpf",
    "start": "1247039",
    "end": "1249200"
  },
  {
    "text": "so for example we have a",
    "start": "1249200",
    "end": "1250640"
  },
  {
    "text": "cube proxy replacement we can get rid of",
    "start": "1250640",
    "end": "1253039"
  },
  {
    "text": "cube proxy which is a huge advantage",
    "start": "1253039",
    "end": "1254799"
  },
  {
    "text": "because cube proxy heavily relies on",
    "start": "1254799",
    "end": "1256559"
  },
  {
    "text": "ip tables rules and those rules uh",
    "start": "1256559",
    "end": "1259679"
  },
  {
    "text": "may come by the servants",
    "start": "1259679",
    "end": "1263039"
  },
  {
    "text": "and typically when you get the packet to",
    "start": "1263039",
    "end": "1265200"
  },
  {
    "text": "process you would",
    "start": "1265200",
    "end": "1266880"
  },
  {
    "text": "search for the relevant rules in your",
    "start": "1266880",
    "end": "1269200"
  },
  {
    "text": "tables",
    "start": "1269200",
    "end": "1269919"
  },
  {
    "text": "in a linear way and that takes a lot of",
    "start": "1269919",
    "end": "1272000"
  },
  {
    "text": "time and resources and with cbpf",
    "start": "1272000",
    "end": "1274000"
  },
  {
    "text": "we just have to do one lookup in a",
    "start": "1274000",
    "end": "1275440"
  },
  {
    "text": "hashmap table so you just",
    "start": "1275440",
    "end": "1277280"
  },
  {
    "text": "retrieve a tuple uh to identify what",
    "start": "1277280",
    "end": "1280240"
  },
  {
    "text": "flow",
    "start": "1280240",
    "end": "1281039"
  },
  {
    "text": "your packet belongs to and then you",
    "start": "1281039",
    "end": "1282720"
  },
  {
    "text": "realize one hash map lookup",
    "start": "1282720",
    "end": "1285200"
  },
  {
    "text": "to get the relevant rule and that's it",
    "start": "1285200",
    "end": "1287360"
  },
  {
    "text": "and because of the hooks available for",
    "start": "1287360",
    "end": "1289039"
  },
  {
    "text": "example on tc",
    "start": "1289039",
    "end": "1290960"
  },
  {
    "text": "you can actually do most of the",
    "start": "1290960",
    "end": "1292880"
  },
  {
    "text": "processing in your packet in ebpf",
    "start": "1292880",
    "end": "1294960"
  },
  {
    "text": "and bypass all of those ip tables hooks",
    "start": "1294960",
    "end": "1299520"
  },
  {
    "text": "that are otherwise present in the stack",
    "start": "1299520",
    "end": "1302880"
  },
  {
    "text": "so that leads to huge uh gains in terms",
    "start": "1302880",
    "end": "1305679"
  },
  {
    "text": "of performance",
    "start": "1305679",
    "end": "1307600"
  },
  {
    "text": "and makes things a lot cleaner too",
    "start": "1307600",
    "end": "1310400"
  },
  {
    "start": "1310000",
    "end": "1310000"
  },
  {
    "text": "another example",
    "start": "1310400",
    "end": "1311600"
  },
  {
    "text": "of senior optimized data path is when we",
    "start": "1311600",
    "end": "1314799"
  },
  {
    "text": "use",
    "start": "1314799",
    "end": "1315440"
  },
  {
    "text": "an android proxy to implement a later",
    "start": "1315440",
    "end": "1317600"
  },
  {
    "text": "seven policies so if i want to tell",
    "start": "1317600",
    "end": "1319919"
  },
  {
    "text": "this pod um the system that this spot",
    "start": "1319919",
    "end": "1323280"
  },
  {
    "text": "can use this http rest api command in",
    "start": "1323280",
    "end": "1325679"
  },
  {
    "text": "particular but not this part this one",
    "start": "1325679",
    "end": "1327760"
  },
  {
    "text": "doesn't have the permission so i have",
    "start": "1327760",
    "end": "1330240"
  },
  {
    "text": "this android proxy injected the sidecar",
    "start": "1330240",
    "end": "1332240"
  },
  {
    "text": "into",
    "start": "1332240",
    "end": "1332799"
  },
  {
    "text": "the pod and i have um to",
    "start": "1332799",
    "end": "1336559"
  },
  {
    "text": "go through the linux tag three times to",
    "start": "1336559",
    "end": "1338799"
  },
  {
    "text": "implement that",
    "start": "1338799",
    "end": "1339679"
  },
  {
    "text": "uh once to get to the loopback interface",
    "start": "1339679",
    "end": "1342240"
  },
  {
    "text": "and i go back to the proxy",
    "start": "1342240",
    "end": "1344159"
  },
  {
    "text": "and then i go down again to exceed the",
    "start": "1344159",
    "end": "1345760"
  },
  {
    "text": "pod and same thing on the destination",
    "start": "1345760",
    "end": "1347360"
  },
  {
    "text": "pod",
    "start": "1347360",
    "end": "1348000"
  },
  {
    "text": "and with the bpf we can just avoid",
    "start": "1348000",
    "end": "1351440"
  },
  {
    "text": "most of that we can just establish a",
    "start": "1351440",
    "end": "1354559"
  },
  {
    "text": "connection at the socket level",
    "start": "1354559",
    "end": "1356080"
  },
  {
    "text": "uh directly to the proxy and we also get",
    "start": "1356080",
    "end": "1358080"
  },
  {
    "text": "rid of the iphone's hooks on our way",
    "start": "1358080",
    "end": "1360480"
  },
  {
    "text": "down to the network",
    "start": "1360480",
    "end": "1362480"
  },
  {
    "text": "so that again leads to uh to uh",
    "start": "1362480",
    "end": "1365679"
  },
  {
    "text": "to important gains in terms of",
    "start": "1365679",
    "end": "1367600"
  },
  {
    "text": "performance",
    "start": "1367600",
    "end": "1369120"
  },
  {
    "start": "1369000",
    "end": "1369000"
  },
  {
    "text": "we also have a number of other use cases",
    "start": "1369120",
    "end": "1370880"
  },
  {
    "text": "for ebpf for networking load balancing",
    "start": "1370880",
    "end": "1373039"
  },
  {
    "text": "network security",
    "start": "1373039",
    "end": "1374240"
  },
  {
    "text": "observability and service mesh",
    "start": "1374240",
    "end": "1377360"
  },
  {
    "text": "but i will have time to uh dive into all",
    "start": "1377360",
    "end": "1379760"
  },
  {
    "text": "of them",
    "start": "1379760",
    "end": "1380400"
  },
  {
    "text": "so just have a look at synonyms",
    "start": "1380400",
    "end": "1382000"
  },
  {
    "text": "documentation or join our community",
    "start": "1382000",
    "end": "1384240"
  },
  {
    "text": "slack if you're interested to",
    "start": "1384240",
    "end": "1386000"
  },
  {
    "text": "discussing them further",
    "start": "1386000",
    "end": "1389200"
  },
  {
    "start": "1387000",
    "end": "1387000"
  },
  {
    "text": "let's move on with the big ebpf",
    "start": "1389200",
    "end": "1392799"
  },
  {
    "text": "players that are actually contributing",
    "start": "1392799",
    "end": "1395520"
  },
  {
    "text": "to or using bpf",
    "start": "1395520",
    "end": "1397360"
  },
  {
    "text": "there is facebook using it a lot for",
    "start": "1397360",
    "end": "1399280"
  },
  {
    "text": "tracing and monitoring and for network",
    "start": "1399280",
    "end": "1401039"
  },
  {
    "text": "processing they have",
    "start": "1401039",
    "end": "1403200"
  },
  {
    "text": "an open source load balancer in",
    "start": "1403200",
    "end": "1405039"
  },
  {
    "text": "particular called catran that you can",
    "start": "1405039",
    "end": "1406640"
  },
  {
    "text": "find on github",
    "start": "1406640",
    "end": "1408159"
  },
  {
    "text": "netflix is using ebpf2 for tracing",
    "start": "1408159",
    "end": "1410080"
  },
  {
    "text": "monitoring mostly",
    "start": "1410080",
    "end": "1411440"
  },
  {
    "text": "uh google for number of use cases too",
    "start": "1411440",
    "end": "1414480"
  },
  {
    "text": "cloudflare mostly for protection against",
    "start": "1414480",
    "end": "1416480"
  },
  {
    "text": "the idea of service attacks",
    "start": "1416480",
    "end": "1418480"
  },
  {
    "text": "and of course everywhere cdm is deployed",
    "start": "1418480",
    "end": "1422320"
  },
  {
    "text": "ebpf is used a lot to implement the data",
    "start": "1422320",
    "end": "1424240"
  },
  {
    "text": "path and the network policies",
    "start": "1424240",
    "end": "1426320"
  },
  {
    "text": "there are also a number of other",
    "start": "1426320",
    "end": "1427679"
  },
  {
    "text": "projects using ebpf so for example we",
    "start": "1427679",
    "end": "1429760"
  },
  {
    "text": "have",
    "start": "1429760",
    "end": "1430000"
  },
  {
    "text": "farco or tracy using ebpf for security",
    "start": "1430000",
    "end": "1433039"
  },
  {
    "text": "purposes in the cloud",
    "start": "1433039",
    "end": "1434320"
  },
  {
    "text": "we have hubble which already implements",
    "start": "1434320",
    "end": "1437919"
  },
  {
    "text": "unprecedented visibility for network",
    "start": "1437919",
    "end": "1440320"
  },
  {
    "text": "flows",
    "start": "1440320",
    "end": "1441200"
  },
  {
    "text": "on your clusters we have weave works uh",
    "start": "1441200",
    "end": "1444320"
  },
  {
    "text": "shuriketa 2 has",
    "start": "1444320",
    "end": "1445760"
  },
  {
    "text": "some xdp mode for capturing packets for",
    "start": "1445760",
    "end": "1448720"
  },
  {
    "text": "security purposes",
    "start": "1448720",
    "end": "1450559"
  },
  {
    "start": "1450000",
    "end": "1450000"
  },
  {
    "text": "so ebpf is a thriving ecosystem really",
    "start": "1450559",
    "end": "1453200"
  },
  {
    "text": "there are an",
    "start": "1453200",
    "end": "1454000"
  },
  {
    "text": "increasing number of projects in",
    "start": "1454000",
    "end": "1455679"
  },
  {
    "text": "addition to those represented",
    "start": "1455679",
    "end": "1457360"
  },
  {
    "text": "uh using the technology this leads also",
    "start": "1457360",
    "end": "1460320"
  },
  {
    "text": "to some new startups productizing ebpa",
    "start": "1460320",
    "end": "1463120"
  },
  {
    "text": "for continuous profiling network",
    "start": "1463120",
    "end": "1464960"
  },
  {
    "text": "analytics for security in the cloud too",
    "start": "1464960",
    "end": "1467679"
  },
  {
    "text": "and some of those startups have been",
    "start": "1467679",
    "end": "1469279"
  },
  {
    "text": "acquired already so i think that was",
    "start": "1469279",
    "end": "1471200"
  },
  {
    "text": "late",
    "start": "1471200",
    "end": "1471600"
  },
  {
    "text": "late last year we've had a pixie",
    "start": "1471600",
    "end": "1473679"
  },
  {
    "text": "acquired by uh new relic",
    "start": "1473679",
    "end": "1476000"
  },
  {
    "text": "also flo milo acquired by splunk and",
    "start": "1476000",
    "end": "1478080"
  },
  {
    "text": "that shows that there is some",
    "start": "1478080",
    "end": "1479520"
  },
  {
    "text": "interest into the products into the",
    "start": "1479520",
    "end": "1481600"
  },
  {
    "text": "technology itself",
    "start": "1481600",
    "end": "1482960"
  },
  {
    "text": "um and that there is a lot of momentum",
    "start": "1482960",
    "end": "1485679"
  },
  {
    "text": "here",
    "start": "1485679",
    "end": "1486400"
  },
  {
    "text": "on the kennel side on the community side",
    "start": "1486400",
    "end": "1488159"
  },
  {
    "text": "we've had a dedicated mailing list for",
    "start": "1488159",
    "end": "1490480"
  },
  {
    "text": "ebpf contributions",
    "start": "1490480",
    "end": "1492159"
  },
  {
    "text": "which received about which has been",
    "start": "1492159",
    "end": "1494880"
  },
  {
    "text": "receiving about",
    "start": "1494880",
    "end": "1495919"
  },
  {
    "text": "50 emails per day on average and we also",
    "start": "1495919",
    "end": "1499520"
  },
  {
    "text": "have",
    "start": "1499520",
    "end": "1500240"
  },
  {
    "text": "um free maintenance five senior uh code",
    "start": "1500240",
    "end": "1503600"
  },
  {
    "text": "reviewers to keep up with the load",
    "start": "1503600",
    "end": "1505600"
  },
  {
    "text": "and they come from facebook isoven and",
    "start": "1505600",
    "end": "1507760"
  },
  {
    "text": "google",
    "start": "1507760",
    "end": "1509679"
  },
  {
    "text": "and all that makes ebpf one of the",
    "start": "1509679",
    "end": "1512159"
  },
  {
    "text": "fastest growing subsystem",
    "start": "1512159",
    "end": "1514159"
  },
  {
    "text": "in linux at the moment there's a lot",
    "start": "1514159",
    "end": "1516799"
  },
  {
    "text": "going on",
    "start": "1516799",
    "end": "1517520"
  },
  {
    "text": "we've had our first ebpf summit last",
    "start": "1517520",
    "end": "1520720"
  },
  {
    "text": "year",
    "start": "1520720",
    "end": "1521440"
  },
  {
    "text": "uh organized by the cdm community and it",
    "start": "1521440",
    "end": "1523919"
  },
  {
    "text": "was a huge success",
    "start": "1523919",
    "end": "1525679"
  },
  {
    "text": "if you want to see the videos have a",
    "start": "1525679",
    "end": "1527520"
  },
  {
    "text": "look on youtube they're all available",
    "start": "1527520",
    "end": "1530799"
  },
  {
    "text": "um two tweets that i would like to",
    "start": "1530799",
    "end": "1533679"
  },
  {
    "start": "1531000",
    "end": "1531000"
  },
  {
    "text": "present",
    "start": "1533679",
    "end": "1534159"
  },
  {
    "text": "uh to show so the momentum that uh is",
    "start": "1534159",
    "end": "1536640"
  },
  {
    "text": "going on with",
    "start": "1536640",
    "end": "1537279"
  },
  {
    "text": "bpf the first one from mark rusinovic",
    "start": "1537279",
    "end": "1540640"
  },
  {
    "text": "is about microsoft looking at",
    "start": "1540640",
    "end": "1542960"
  },
  {
    "text": "implementing some",
    "start": "1542960",
    "end": "1544240"
  },
  {
    "text": "system-like utility for uh tracing on",
    "start": "1544240",
    "end": "1547360"
  },
  {
    "text": "linux",
    "start": "1547360",
    "end": "1548720"
  },
  {
    "text": "and that sounds very interesting to you",
    "start": "1548720",
    "end": "1550480"
  },
  {
    "text": "to see microsoft focusing on ebpf",
    "start": "1550480",
    "end": "1553440"
  },
  {
    "text": "to implement things the second one is",
    "start": "1553440",
    "end": "1555440"
  },
  {
    "text": "from steven rusted",
    "start": "1555440",
    "end": "1556640"
  },
  {
    "text": "about bpf that may replace linux in the",
    "start": "1556640",
    "end": "1559840"
  },
  {
    "text": "future",
    "start": "1559840",
    "end": "1560400"
  },
  {
    "text": "so more seriously there are a number of",
    "start": "1560400",
    "end": "1563600"
  },
  {
    "text": "people that envisioned that",
    "start": "1563600",
    "end": "1565840"
  },
  {
    "text": "more and more parts of the kernel might",
    "start": "1565840",
    "end": "1567840"
  },
  {
    "text": "rely on ebpf in the future",
    "start": "1567840",
    "end": "1569760"
  },
  {
    "text": "because of the performance and the",
    "start": "1569760",
    "end": "1571520"
  },
  {
    "text": "safety guarantees",
    "start": "1571520",
    "end": "1572880"
  },
  {
    "text": "that it brings to to avoid all kind",
    "start": "1572880",
    "end": "1575919"
  },
  {
    "text": "of security issues and to gain some",
    "start": "1575919",
    "end": "1578640"
  },
  {
    "text": "flexibility",
    "start": "1578640",
    "end": "1580000"
  },
  {
    "text": "for all kinds of processing",
    "start": "1580000",
    "end": "1583760"
  },
  {
    "start": "1582000",
    "end": "1582000"
  },
  {
    "text": "so to wrap up this presentation ebpf",
    "start": "1583760",
    "end": "1585840"
  },
  {
    "text": "brings a lot of programmability",
    "start": "1585840",
    "end": "1587600"
  },
  {
    "text": "of programmability to the kernel it's",
    "start": "1587600",
    "end": "1589600"
  },
  {
    "text": "safe efficient",
    "start": "1589600",
    "end": "1590640"
  },
  {
    "text": "uh it's versatile it's scalable uh it's",
    "start": "1590640",
    "end": "1593600"
  },
  {
    "text": "ideally located to gather",
    "start": "1593600",
    "end": "1595600"
  },
  {
    "text": "data about what's going on on resources",
    "start": "1595600",
    "end": "1597919"
  },
  {
    "text": "usage on",
    "start": "1597919",
    "end": "1598880"
  },
  {
    "text": "uh the different codes that the pods are",
    "start": "1598880",
    "end": "1601760"
  },
  {
    "text": "executing on the system",
    "start": "1601760",
    "end": "1603360"
  },
  {
    "text": "and also for processing packets uh all",
    "start": "1603360",
    "end": "1605840"
  },
  {
    "text": "of these for individual systems",
    "start": "1605840",
    "end": "1607919"
  },
  {
    "text": "or in cloud native environments",
    "start": "1607919",
    "end": "1611200"
  },
  {
    "text": "and we have a number of tools already",
    "start": "1611200",
    "end": "1613679"
  },
  {
    "text": "that are being improved",
    "start": "1613679",
    "end": "1615039"
  },
  {
    "text": "uh by the day to work with um ebpf so we",
    "start": "1615039",
    "end": "1618640"
  },
  {
    "text": "have",
    "start": "1618640",
    "end": "1619279"
  },
  {
    "text": "bcc bpf trace if you want already to use",
    "start": "1619279",
    "end": "1621840"
  },
  {
    "text": "some tools to",
    "start": "1621840",
    "end": "1622880"
  },
  {
    "text": "trace and monitor some of your",
    "start": "1622880",
    "end": "1624240"
  },
  {
    "text": "applications we have libraries like",
    "start": "1624240",
    "end": "1627200"
  },
  {
    "text": "bpf and google libraries to help you",
    "start": "1627200",
    "end": "1630400"
  },
  {
    "text": "program your own applications using ebpf",
    "start": "1630400",
    "end": "1632640"
  },
  {
    "text": "programs",
    "start": "1632640",
    "end": "1633760"
  },
  {
    "text": "we have tools like bpf2 to help with",
    "start": "1633760",
    "end": "1636960"
  },
  {
    "text": "introspection and management of ebpa",
    "start": "1636960",
    "end": "1639520"
  },
  {
    "text": "objects",
    "start": "1639520",
    "end": "1640960"
  },
  {
    "text": "all of these open source and already",
    "start": "1640960",
    "end": "1642960"
  },
  {
    "text": "available",
    "start": "1642960",
    "end": "1644320"
  },
  {
    "text": "ebpf is on the rise so uh it solves",
    "start": "1644320",
    "end": "1647679"
  },
  {
    "text": "uh real-world production problems and",
    "start": "1647679",
    "end": "1650399"
  },
  {
    "text": "that's something really important a lot",
    "start": "1650399",
    "end": "1652159"
  },
  {
    "text": "of big companies are using it for",
    "start": "1652159",
    "end": "1654000"
  },
  {
    "text": "that because it brings them some",
    "start": "1654000",
    "end": "1655840"
  },
  {
    "text": "flexibility they need to uh",
    "start": "1655840",
    "end": "1657760"
  },
  {
    "text": "to change some behavior in the kernel",
    "start": "1657760",
    "end": "1659760"
  },
  {
    "text": "right now without having to wait for",
    "start": "1659760",
    "end": "1661600"
  },
  {
    "text": "upstream",
    "start": "1661600",
    "end": "1662480"
  },
  {
    "text": "uh changes um so selium's optimized data",
    "start": "1662480",
    "end": "1666320"
  },
  {
    "text": "path and network policies is a very good",
    "start": "1666320",
    "end": "1668080"
  },
  {
    "text": "example on",
    "start": "1668080",
    "end": "1668880"
  },
  {
    "text": "how you can leverage ebpf to uh to",
    "start": "1668880",
    "end": "1671279"
  },
  {
    "text": "implement",
    "start": "1671279",
    "end": "1672000"
  },
  {
    "text": "uh advanced advanced features uh in",
    "start": "1672000",
    "end": "1674880"
  },
  {
    "text": "cloud native",
    "start": "1674880",
    "end": "1676640"
  },
  {
    "text": "environments and there is a buzzing",
    "start": "1676640",
    "end": "1679679"
  },
  {
    "text": "community behind bpf to to a new",
    "start": "1679679",
    "end": "1682480"
  },
  {
    "text": "tools new features uh all the time so um",
    "start": "1682480",
    "end": "1686159"
  },
  {
    "text": "i hope you'll be able to uh to join the",
    "start": "1686159",
    "end": "1688240"
  },
  {
    "text": "community and to ride the bpf wave",
    "start": "1688240",
    "end": "1691840"
  },
  {
    "text": "so that's it for this presentation thank",
    "start": "1691840",
    "end": "1693440"
  },
  {
    "start": "1692000",
    "end": "1692000"
  },
  {
    "text": "you for attending if you need more",
    "start": "1693440",
    "end": "1695200"
  },
  {
    "text": "information",
    "start": "1695200",
    "end": "1696240"
  },
  {
    "text": "there's one link in particular that you",
    "start": "1696240",
    "end": "1698000"
  },
  {
    "text": "should check which is ebpf.io",
    "start": "1698000",
    "end": "1700799"
  },
  {
    "text": "and which contains in particular all the",
    "start": "1700799",
    "end": "1702720"
  },
  {
    "text": "pointers that you would need if you",
    "start": "1702720",
    "end": "1705440"
  },
  {
    "text": "wanted to get more information",
    "start": "1705440",
    "end": "1709200"
  },
  {
    "text": "and documentation about the bpf use",
    "start": "1709200",
    "end": "1711919"
  },
  {
    "text": "cases",
    "start": "1711919",
    "end": "1713440"
  },
  {
    "text": "and internal sentences so have a look at",
    "start": "1713440",
    "end": "1716159"
  },
  {
    "text": "this website",
    "start": "1716159",
    "end": "1717200"
  },
  {
    "text": "and again thank you for watching my",
    "start": "1717200",
    "end": "1719200"
  },
  {
    "text": "presentation today",
    "start": "1719200",
    "end": "1723200"
  }
]