[
  {
    "text": "hello welcome thank you for coming we are here today",
    "start": "80",
    "end": "6960"
  },
  {
    "text": "to talk about one of my favorite subjects service meshes",
    "start": "6960",
    "end": "12080"
  },
  {
    "text": "uh and in particular i'm really excited today because",
    "start": "12080",
    "end": "17119"
  },
  {
    "text": "with me is pratik sahu pratik hey guys",
    "start": "17119",
    "end": "24000"
  },
  {
    "text": "i am prathik i am a grad student at ut austin",
    "start": "24000",
    "end": "29119"
  },
  {
    "text": "and i was actually looking at service not looking at service meshes i",
    "start": "29119",
    "end": "35280"
  },
  {
    "text": "was looking at function as a service and serverless applications about a year and a half back when i met",
    "start": "35280",
    "end": "41760"
  },
  {
    "text": "lee and then we started looking down this",
    "start": "41760",
    "end": "46800"
  },
  {
    "text": "path of service meshes and performance impacts and uh here we are",
    "start": "46800",
    "end": "53519"
  },
  {
    "text": "yeah clearly you were focused on on the well i don't know or not on the right",
    "start": "53760",
    "end": "59280"
  },
  {
    "text": "thing we have to service meshes is where it's at so uh that was",
    "start": "59280",
    "end": "64400"
  },
  {
    "text": "what about a about a year ago now so i'm just ecstatic that we're gonna share",
    "start": "64400",
    "end": "71040"
  },
  {
    "text": "some of what we've been studying some we've kind of i've sort of talked in this space for a",
    "start": "71040",
    "end": "76400"
  },
  {
    "text": "while i've written actually a couple of books on on service meshes and believe it or not i",
    "start": "76400",
    "end": "83680"
  },
  {
    "text": "am authoring too concurrently at the moment and uh",
    "start": "83680",
    "end": "89200"
  },
  {
    "text": "well we'll see if i'm i guess still married by the time that they publish uh but service meshes have been a you",
    "start": "89200",
    "end": "94720"
  },
  {
    "text": "know a real focus of mine there's some questions that we've been",
    "start": "94720",
    "end": "100000"
  },
  {
    "text": "that as i've been focusing there and as you and i have been working together now that we've been trying to answer i'm",
    "start": "100000",
    "end": "106240"
  },
  {
    "text": "excited that we get to answer some of those today some that we haven't gotten to speak to",
    "start": "106240",
    "end": "112840"
  },
  {
    "text": "before uh so just i guess the the by the way the one takeaway from this um",
    "start": "112840",
    "end": "118560"
  },
  {
    "text": "slide here is uh the url there is where you can find a copy of this",
    "start": "118560",
    "end": "124880"
  },
  {
    "text": "deck and other talks that i give but again um",
    "start": "124880",
    "end": "131440"
  },
  {
    "text": "happy that to be joined by pratik if i can get the slide to advance",
    "start": "131599",
    "end": "137760"
  },
  {
    "text": "or advance five slides all at once so sorry about that pretty no worries",
    "start": "139360",
    "end": "147200"
  },
  {
    "text": "so i am kind of looking into the research",
    "start": "147200",
    "end": "153599"
  },
  {
    "text": "aspects of service meshes and looking into interesting findings",
    "start": "153599",
    "end": "159280"
  },
  {
    "text": "to share with you folks uh i have been working on service meshes for a",
    "start": "159280",
    "end": "164800"
  },
  {
    "text": "while and there are a lot of research interesting research topics in this area but we'll only focus on a couple",
    "start": "164800",
    "end": "172879"
  },
  {
    "text": "of for them in this particular talk and yeah feel free to reach out to us and",
    "start": "172879",
    "end": "178400"
  },
  {
    "text": "join the community to know more and contribute and uh",
    "start": "178400",
    "end": "183840"
  },
  {
    "text": "discuss interesting stuff nice speaking of that those interesting",
    "start": "183840",
    "end": "189760"
  },
  {
    "text": "things this is well a top level list of why it is that people consider service meshes",
    "start": "189760",
    "end": "196080"
  },
  {
    "text": "interesting and this is really more in hard terms of why it is that they",
    "start": "196080",
    "end": "201360"
  },
  {
    "text": "consider service meshes interesting different people break this down in different ways but",
    "start": "201360",
    "end": "207599"
  },
  {
    "text": "there's buckets of functionality that service meshes bring to bear they improve the",
    "start": "207599",
    "end": "213760"
  },
  {
    "text": "resiliency of your services whether they're micro or not",
    "start": "213760",
    "end": "219519"
  },
  {
    "text": "they provide a lot of fine-grained traffic control traffic management over all the requests",
    "start": "219519",
    "end": "225599"
  },
  {
    "text": "that are flowing into and through your services or out of your services",
    "start": "225599",
    "end": "231599"
  },
  {
    "text": "that give a lot of built-in observability we like to talk about that in terms of",
    "start": "231599",
    "end": "237120"
  },
  {
    "text": "the observability being uniform so the telemetry that a surface mesh will generate",
    "start": "237120",
    "end": "243599"
  },
  {
    "text": "based on the requests that it sees really helpful really enlightening takes",
    "start": "243599",
    "end": "249120"
  },
  {
    "text": "the blinders off for a lot of a lot of people and there's a whole category around",
    "start": "249120",
    "end": "254400"
  },
  {
    "text": "security um security of uh what requests uh can be made of what services",
    "start": "254400",
    "end": "260560"
  },
  {
    "text": "and when and how often how much and um there's uh you know a lot that can be done",
    "start": "260560",
    "end": "266800"
  },
  {
    "text": "inside of a mesh and i'm convinced or i know for sure most of us out there",
    "start": "266800",
    "end": "274000"
  },
  {
    "text": "have yet to go horribly deep a lot of folks have yet to",
    "start": "274000",
    "end": "281199"
  },
  {
    "text": "go beyond even to have accounted for all of the four things that i'm talking about here",
    "start": "281600",
    "end": "286880"
  },
  {
    "text": "many people yet to go further than that a lot of people are attracted because of those um you know those various features",
    "start": "286880",
    "end": "295440"
  },
  {
    "text": "other people are attracted to a mesh because sort of similar to what they've",
    "start": "295440",
    "end": "301039"
  },
  {
    "text": "experienced with docker in modernizing their applications and modernizing their infrastructure",
    "start": "301039",
    "end": "306560"
  },
  {
    "text": "you're they're able to modernize existing apps with by bringing them onto",
    "start": "306560",
    "end": "311919"
  },
  {
    "text": "the mesh again um we often speak about service meshes in context of microservices",
    "start": "311919",
    "end": "318160"
  },
  {
    "text": "and it's true that sort of the more services you have the more that you will",
    "start": "318160",
    "end": "324400"
  },
  {
    "text": "benefit you that you will find you'll benefit from a service mesh that doesn't mean that service meshes",
    "start": "324400",
    "end": "330960"
  },
  {
    "text": "aren't don't provide for existing applications that are not containerized",
    "start": "330960",
    "end": "338400"
  },
  {
    "text": "they do now having said that not all meshes provide for non-containerized services",
    "start": "338400",
    "end": "345440"
  },
  {
    "text": "but but many of them do the nice thing is you can kind of sort",
    "start": "345440",
    "end": "350800"
  },
  {
    "text": "of within an with an asterisk you can kind of get there for free i'm just noticing a behavior of the",
    "start": "350800",
    "end": "356800"
  },
  {
    "text": "system by the way when i try to advance the slide it takes about 10 seconds to advance so",
    "start": "356800",
    "end": "362000"
  },
  {
    "text": "i'm going to try to click 10 seconds uh ahead and we'll see if it works um other reasons why people come to a",
    "start": "362000",
    "end": "369280"
  },
  {
    "text": "mesh is to avoid baking in um infrastructure concerns into their code",
    "start": "369280",
    "end": "375440"
  },
  {
    "text": "um they they don't want to you know expend a bunch of energy on",
    "start": "375440",
    "end": "381039"
  },
  {
    "text": "duplicative um infrastructure concerns that that the infrastructure can actually take care of",
    "start": "381039",
    "end": "386720"
  },
  {
    "text": "that in the presence of a service mesh um a lot of those those features that we just talked about are there",
    "start": "386720",
    "end": "392160"
  },
  {
    "text": "they can avoid having to bake that right use a client library which we're going to take a look at one",
    "start": "392160",
    "end": "397520"
  },
  {
    "text": "um here later to address those concerns rather they can get retries and enforce deadlines",
    "start": "397520",
    "end": "406400"
  },
  {
    "text": "cancellations and circuit breaking and many other things that they might have otherwise had to put into code um",
    "start": "406400",
    "end": "413280"
  },
  {
    "text": "your infrastructure can handle that for you so one of the interesting things um i think that",
    "start": "413280",
    "end": "418400"
  },
  {
    "text": "is arguably the most powerful phenomenon about a service mesh is",
    "start": "418400",
    "end": "426240"
  },
  {
    "text": "the notion that often the responsibility of who's you know whether it's the developer or",
    "start": "426240",
    "end": "432319"
  },
  {
    "text": "the operator or someone else who's responsible for identifying what",
    "start": "432319",
    "end": "437840"
  },
  {
    "text": "what rate limits should be set for a service how often a service should retry",
    "start": "437840",
    "end": "443759"
  },
  {
    "text": "how or any number of these configurations like whether or not a",
    "start": "443759",
    "end": "449840"
  },
  {
    "text": "service should um be assigned an individual certification a certificate",
    "start": "449840",
    "end": "455680"
  },
  {
    "text": "have its own identity have that identity rolled have that identity managed that all of those things um",
    "start": "455680",
    "end": "463759"
  },
  {
    "text": "i think who's responsible for for that in a given environment is often diffused um",
    "start": "463759",
    "end": "470800"
  },
  {
    "text": "and and uh confused between which which of these two teams that is",
    "start": "470800",
    "end": "477440"
  },
  {
    "text": "the hope here is that when you've got a piece of infrastructure like a service mesh you're able to identify all of how you'd",
    "start": "477440",
    "end": "485039"
  },
  {
    "text": "like for that litany of concerns that i just prattled off how you'd like for those to be configured and behave",
    "start": "485039",
    "end": "491199"
  },
  {
    "text": "when you've got that in a set of configuration when you've got that in yaml it is no longer a finger pointing game",
    "start": "491199",
    "end": "499840"
  },
  {
    "text": "rather it's a it's a singularly addressable concern and it becomes self-evident who's who's",
    "start": "499840",
    "end": "507440"
  },
  {
    "text": "taking care of those things so i think that's really powerful um the way that those two",
    "start": "507440",
    "end": "512800"
  },
  {
    "text": "teams are able to begin to iterate independently of one another they're able to move uh more quickly and",
    "start": "512800",
    "end": "518080"
  },
  {
    "text": "they're able to both of them rapidly identify what a given you know retry count is for a service",
    "start": "518080",
    "end": "524640"
  },
  {
    "text": "for example because it's there in the configuration it's not buried in code or it's not even in the code it's not",
    "start": "524640",
    "end": "531920"
  },
  {
    "text": "even present so really interesting thing about a service mesh as we get into",
    "start": "531920",
    "end": "537760"
  },
  {
    "text": "more of what we're going to kind of speak about about the analysis of",
    "start": "537760",
    "end": "544160"
  },
  {
    "text": "network functions and how service meshes provide various network filters various",
    "start": "544160",
    "end": "551120"
  },
  {
    "text": "traffic filters it's important to consider it's important to understand that there are a variety of different service mesh",
    "start": "551120",
    "end": "557600"
  },
  {
    "text": "architectures and that's in part because there's a variety of different service meshes",
    "start": "557600",
    "end": "562880"
  },
  {
    "text": "out there yes it's a bit meshy out there there's a landscape here",
    "start": "562880",
    "end": "569360"
  },
  {
    "text": "that tracks service meshes about 20 or more and actually as it turns out",
    "start": "569360",
    "end": "576880"
  },
  {
    "text": "there will be an announcement um from a vendor that you all are familiar with um before",
    "start": "576880",
    "end": "583519"
  },
  {
    "text": "the year is out um a really exciting announcement i think um but but it'll make for the 21st",
    "start": "583519",
    "end": "589839"
  },
  {
    "text": "service mesh so more of them keep coming and clearly people are seeing value in",
    "start": "589839",
    "end": "595440"
  },
  {
    "text": "the meshes because there are as many as there are and which is a great thing by the",
    "start": "595440",
    "end": "601040"
  },
  {
    "text": "way i mean it's i think the analogy here is that you",
    "start": "601040",
    "end": "606160"
  },
  {
    "text": "a service mesh is a tool like you know other tools um if you uh there's a reason that that",
    "start": "606160",
    "end": "611680"
  },
  {
    "text": "people purchase toolboxes because you generally you know can't just use one tool for all of the jobs that you",
    "start": "611680",
    "end": "618320"
  },
  {
    "text": "have and it's kind of the same thing for a service mesh they're they're built to have some similar",
    "start": "618320",
    "end": "623440"
  },
  {
    "text": "capabilities but but they're also built for different sized environments different use cases built in different",
    "start": "623440",
    "end": "629040"
  },
  {
    "text": "ways and using different languages different architectures and so i'm for one i'm quite pleased that",
    "start": "629040",
    "end": "635760"
  },
  {
    "text": "there's choice out there it's not a one size fits all",
    "start": "635760",
    "end": "641440"
  },
  {
    "text": "necessarily but because of that there are service mesh abstractions specifications that are coming forth i participate as a maintainer in",
    "start": "641440",
    "end": "648640"
  },
  {
    "text": "the service mesh interface which is essentially a standard um uh well it's almost like a huh if i can",
    "start": "648640",
    "end": "656880"
  },
  {
    "text": "if i can we'll see if we'll see if people get upset with me for this but if uh",
    "start": "656880",
    "end": "662640"
  },
  {
    "text": "it's almost like terraform is as a utility to multiple clouds um",
    "start": "662640",
    "end": "669120"
  },
  {
    "text": "service mesh interface is provides a standard interface behind which you can plug in a given",
    "start": "669120",
    "end": "675279"
  },
  {
    "text": "service mesh probably better analogies here or something like cni the container network interface gives you one api one surface to",
    "start": "675279",
    "end": "684000"
  },
  {
    "text": "for you as an adopter or you as an integrator to get at service mesh functionality",
    "start": "684000",
    "end": "690079"
  },
  {
    "text": "irrespective of what service mesh you're using so that's great there's another one here called hamlet",
    "start": "690079",
    "end": "695600"
  },
  {
    "text": "it is focused on federation of service mesh catalogs if you will so one given service mesh",
    "start": "695600",
    "end": "702560"
  },
  {
    "text": "will have any number of services any number of workloads that it's supporting and whether you've got when you've got a",
    "start": "702560",
    "end": "708560"
  },
  {
    "text": "second service mesh whether it's of the same type or not you often want those things to be able to",
    "start": "708560",
    "end": "714480"
  },
  {
    "text": "speak to one another and and that's kind of the focus of of hamlet there's a third specification the third",
    "start": "714480",
    "end": "721040"
  },
  {
    "text": "abstraction that we're going to talk about today and it's the service mesh performance specification or smps",
    "start": "721040",
    "end": "727760"
  },
  {
    "text": "um it's really a format that standardizes the way in which",
    "start": "727760",
    "end": "732880"
  },
  {
    "text": "you capture and characterize the performance of a service mesh so",
    "start": "732880",
    "end": "740959"
  },
  {
    "text": "smps is is a vendor-neutral standard it's one that um layer five um",
    "start": "740959",
    "end": "747440"
  },
  {
    "text": "which is the community that pratik was talking about the surface mesh community has been working on for a while um we",
    "start": "747440",
    "end": "753760"
  },
  {
    "text": "really had gotten started in conversation with the istio performance and scalability",
    "start": "753760",
    "end": "760240"
  },
  {
    "text": "team so with the googlers there and since we've been speaking about it",
    "start": "760240",
    "end": "767360"
  },
  {
    "text": "talking about it and advancing it and working through it we've begun to discuss it inside of the cncf inside of",
    "start": "767360",
    "end": "774240"
  },
  {
    "text": "sig network and the cncf so there's a service mesh working group that all are welcome to come and",
    "start": "774240",
    "end": "780240"
  },
  {
    "text": "participate in but where we also advance this specification",
    "start": "780240",
    "end": "786480"
  },
  {
    "text": "the spec like i said it directly provides a description how to describe and capture",
    "start": "786480",
    "end": "792720"
  },
  {
    "text": "um how to characterize the performance of not just your service mesh but also the",
    "start": "792720",
    "end": "798480"
  },
  {
    "text": "fact that that's highly dependent upon what type of workloads your mesh is",
    "start": "798480",
    "end": "803760"
  },
  {
    "text": "supporting how your mesh is configured how much you're asking it to do",
    "start": "803760",
    "end": "809040"
  },
  {
    "text": "how big or small of an environment how many nodes and what size nodes you're running so many many",
    "start": "809040",
    "end": "816240"
  },
  {
    "text": "different variables and so it helps standardize how you capture that",
    "start": "816240",
    "end": "821279"
  },
  {
    "text": "from there you can it then facilitates some interesting things and one of those",
    "start": "821279",
    "end": "826480"
  },
  {
    "text": "is an apples to apples comparison either between service mesh deployments",
    "start": "826480",
    "end": "831519"
  },
  {
    "text": "of the same type or different types but maybe more importantly it facilitates you gauging that",
    "start": "831519",
    "end": "839680"
  },
  {
    "text": "for yourself and having a standard way to capture um the performance of of your mesh the",
    "start": "839680",
    "end": "845920"
  },
  {
    "text": "configuration of your mesh there is a an implementation of this specification",
    "start": "845920",
    "end": "852000"
  },
  {
    "text": "today the canonical implementation in a tool called mesheri mashuri's the service mesh management",
    "start": "852000",
    "end": "858160"
  },
  {
    "text": "plane it's a it's a multi-mesh management plane it is um compatible with smi",
    "start": "858160",
    "end": "864399"
  },
  {
    "text": "it was that compatibility was announced sort of launched uh or announced at the launch of smi it's",
    "start": "864399",
    "end": "870480"
  },
  {
    "text": "now compatible with the service mesh performance spec there are well gosh i think uh three",
    "start": "870480",
    "end": "876639"
  },
  {
    "text": "um interns being sort of sort of working around smi and working around envoy",
    "start": "876639",
    "end": "884240"
  },
  {
    "text": "and around measuring through the google summer of code through the cncf",
    "start": "884240",
    "end": "891040"
  },
  {
    "text": "and through community bridge hopefully through google's season of docs here shortly as",
    "start": "891040",
    "end": "896160"
  },
  {
    "text": "well and so the part of the there's a few different goals of this tool and it's important that we",
    "start": "896160",
    "end": "902160"
  },
  {
    "text": "talk about this tool because it's what's been facilitating our uh performance analysis the the analysis",
    "start": "902160",
    "end": "909279"
  },
  {
    "text": "that we're going to speak about here in a moment originally there was a lot of ask in the",
    "start": "909279",
    "end": "915120"
  },
  {
    "text": "community when people are first learning a mesh they often ask themselves well hey what's the overhead",
    "start": "915120",
    "end": "920240"
  },
  {
    "text": "of one versus the next which one should i use um and we've publicly spoken on this um you",
    "start": "920240",
    "end": "926480"
  },
  {
    "text": "know a number of times uh please disregard",
    "start": "926480",
    "end": "931680"
  },
  {
    "text": "these like i don't know year and something ago old um stats",
    "start": "931680",
    "end": "938639"
  },
  {
    "text": "uh rather it was really just trying to show that like hey when um console first came out really it was only",
    "start": "938639",
    "end": "944720"
  },
  {
    "text": "facilitating mtls so it really wasn't doing uh much in comparison to",
    "start": "944720",
    "end": "949920"
  },
  {
    "text": "maybe istio that was you were asking it to do a lot more and so anyway one of the things that it was intended to do is",
    "start": "949920",
    "end": "954959"
  },
  {
    "text": "that it still still does that it also does a bit of best practices analysis so if",
    "start": "954959",
    "end": "961279"
  },
  {
    "text": "you're running a mesh and you're doing it you're using meshri to do some performance management you can",
    "start": "961279",
    "end": "966959"
  },
  {
    "text": "also do some configuration management it will analyze the configuration of your mesh and",
    "start": "966959",
    "end": "972639"
  },
  {
    "text": "tell you if you're you're doing it wrong or maybe it'll tell you you're doing it right so um but uh",
    "start": "972639",
    "end": "981120"
  },
  {
    "text": "well it's i think interesting to look at where a tool like this fits in when you look at service meshes you",
    "start": "981120",
    "end": "988000"
  },
  {
    "text": "talk about the data plane and the control plane this is a generic view of what a data",
    "start": "988000",
    "end": "993759"
  },
  {
    "text": "plane and control plane often look like you can also layer on",
    "start": "993759",
    "end": "999839"
  },
  {
    "text": "a management plane for those of you who are network engineers or have done network",
    "start": "999839",
    "end": "1006000"
  },
  {
    "text": "administration i think that that's a familiar term and in this management planes are capable of",
    "start": "1006000",
    "end": "1012720"
  },
  {
    "text": "any number of different things the the functionality that we're talking about here is really around load generation and",
    "start": "1012720",
    "end": "1018800"
  },
  {
    "text": "statistical analysis of the performance of a mesh um what we're showing here is that",
    "start": "1018800",
    "end": "1025120"
  },
  {
    "text": "measuring it will gives you sort of choice of load balancer i'm sorry i'm not load balancer load",
    "start": "1025120",
    "end": "1030880"
  },
  {
    "text": "generator between um fortio wrk2 nighthawk",
    "start": "1030880",
    "end": "1037038"
  },
  {
    "text": "and it will generate load and do an analysis um today it'll do that against any one",
    "start": "1037039",
    "end": "1043199"
  },
  {
    "text": "of these six service meshes there and it does that through adapters through service mesh adapters",
    "start": "1043199",
    "end": "1050000"
  },
  {
    "text": "um more adapters are being added in the community",
    "start": "1050000",
    "end": "1055120"
  },
  {
    "text": "so good now that you're familiar with part of the tooling that we use that we're going to show you today",
    "start": "1055120",
    "end": "1060880"
  },
  {
    "text": "let's talk about uh our workload um so in the course",
    "start": "1060880",
    "end": "1067919"
  },
  {
    "text": "of this has been a discussion of pratik and mine and and some others for quite some time",
    "start": "1067919",
    "end": "1073200"
  },
  {
    "text": "on well trying to make sure that we're we're using um",
    "start": "1073200",
    "end": "1080400"
  },
  {
    "text": "representative workloads as we're studying and analyzing um traffic service mesh performance",
    "start": "1080400",
    "end": "1087520"
  },
  {
    "text": "and kind of traffic statistics that like we were saying that's highly dependent upon the environment that you're",
    "start": "1087520",
    "end": "1092960"
  },
  {
    "text": "doing performing your study in part of that environment is your workload your app and so it was",
    "start": "1092960",
    "end": "1098960"
  },
  {
    "text": "just a couple a few months ago that we'd worked to create a sample app called image hub it's",
    "start": "1098960",
    "end": "1105360"
  },
  {
    "text": "actually if you're familiar with docker hub it's really similar it's from something of a rip-off of the docker hub",
    "start": "1105360",
    "end": "1111440"
  },
  {
    "text": "it doesn't actually work it's just a sample app but um the interesting thing um and the reason that we had created",
    "start": "1111440",
    "end": "1117520"
  },
  {
    "text": "this sample app as opposed to using the other sample apps that that meshery supports is because",
    "start": "1117520",
    "end": "1125760"
  },
  {
    "text": "we wanted to highlight the fact that it's not just fine-grained traffic control",
    "start": "1125760",
    "end": "1132799"
  },
  {
    "text": "that a service mesh can facilitate but rather not rather but but it is also uh",
    "start": "1132799",
    "end": "1139520"
  },
  {
    "text": "the fact that a service mesh can be told to have quite a bit of",
    "start": "1139520",
    "end": "1144960"
  },
  {
    "text": "intelligence in its data plane uh and the example here that we won't",
    "start": "1144960",
    "end": "1151600"
  },
  {
    "text": "take you through today um uh but we'll take you through some network performance instead",
    "start": "1151600",
    "end": "1157760"
  },
  {
    "text": "but the example here is the notion that the app uh has much like any sas offering that you",
    "start": "1157760",
    "end": "1164400"
  },
  {
    "text": "might use you'd sign up as a user and it and you you have a different subscription plans that you sign up for",
    "start": "1164400",
    "end": "1169840"
  },
  {
    "text": "well this app has subscription plans but it doesn't have any way of enforcing people to stay within the bounds of",
    "start": "1169840",
    "end": "1176480"
  },
  {
    "text": "those plans and so we use a service mesh to intelligently rate limit and kind of",
    "start": "1176480",
    "end": "1182400"
  },
  {
    "text": "filter a user's usage based on their consumption",
    "start": "1182400",
    "end": "1189679"
  },
  {
    "text": "and and that intelligence happens not within the app but rather within the",
    "start": "1189679",
    "end": "1196240"
  },
  {
    "text": "data plane so um hopefully this sample app um enlightens",
    "start": "1196240",
    "end": "1201600"
  },
  {
    "text": "uh expands some of your horizons to well expect more from your infrastructure to leverage your",
    "start": "1201600",
    "end": "1208559"
  },
  {
    "text": "infrastructure a bit more this is um it's a very simple app it's two docker containers there's a view",
    "start": "1208559",
    "end": "1216559"
  },
  {
    "text": "ui or a ui written in view running in one container there's a back",
    "start": "1216559",
    "end": "1222880"
  },
  {
    "text": "end that's your image your docker image storus storage service and it runs a set of apis and runs on",
    "start": "1222880",
    "end": "1230080"
  },
  {
    "text": "the storage service we're able to take this sample app and deploy it on top of a mesh the mesh that",
    "start": "1230080",
    "end": "1237200"
  },
  {
    "text": "we've chosen is uh console for a couple different reasons one of",
    "start": "1237200",
    "end": "1242559"
  },
  {
    "text": "which is because console uses envoy as its data plane proxy and envoy is capable of",
    "start": "1242559",
    "end": "1251240"
  },
  {
    "text": "incorporating web assembly modules wasom modules we'll talk about",
    "start": "1251240",
    "end": "1257360"
  },
  {
    "text": "webassembly more in a moment but there's a lot of power and the",
    "start": "1257360",
    "end": "1263039"
  },
  {
    "text": "ability to load and dynamically reload",
    "start": "1263039",
    "end": "1268720"
  },
  {
    "text": "web assembly filters these filters are are highly capable they're able to see",
    "start": "1268720",
    "end": "1274799"
  },
  {
    "text": "the same network of traffic the same requests that come through that are addressed to your services",
    "start": "1274799",
    "end": "1281039"
  },
  {
    "text": "they're able to interpret um grab those requests facilitated through envoy in this case",
    "start": "1281039",
    "end": "1287679"
  },
  {
    "text": "and apply some logic to them and an example of that logic was what i was",
    "start": "1287679",
    "end": "1293039"
  },
  {
    "text": "just speaking about a moment ago which is to say that the this image hub",
    "start": "1293039",
    "end": "1300559"
  },
  {
    "text": "sample app uses a web assembly filter runs inside of envoy and",
    "start": "1300559",
    "end": "1309200"
  },
  {
    "text": "this particular filter is written in rust just for performance reasons it and i won't re-describe what",
    "start": "1309200",
    "end": "1316720"
  },
  {
    "text": "the sample app does because that's kind of for a different talk but suffice to say on",
    "start": "1316720",
    "end": "1323840"
  },
  {
    "text": "i guess i should note that today console doesn't support this configuration and",
    "start": "1323840",
    "end": "1330320"
  },
  {
    "text": "the use of awesome filters out of the box and i won't speak on behalf of the the product management team there",
    "start": "1330320",
    "end": "1337039"
  },
  {
    "text": "um i would just uh i would say that i think you know your best get",
    "start": "1337039",
    "end": "1344480"
  },
  {
    "text": "i would say to pay attention and maybe um look out for that possibility so with that stage set",
    "start": "1344480",
    "end": "1352640"
  },
  {
    "text": "we're going to talk about performance and uh there's a number of interesting things that",
    "start": "1352640",
    "end": "1358960"
  },
  {
    "text": "pratik and i and the the collection of those who are working in this community have um",
    "start": "1358960",
    "end": "1365039"
  },
  {
    "text": "uncovered and we're here to to share a few of these things with you today to",
    "start": "1365039",
    "end": "1370320"
  },
  {
    "text": "the extent that we can and i think as we do it's probably important to recognize that",
    "start": "1370320",
    "end": "1375360"
  },
  {
    "text": "you know when we're talking about performance uh and measuring performance wow look at the time fly i",
    "start": "1375360",
    "end": "1381520"
  },
  {
    "text": "just realized that i've been talking uh that so i'll move i will pick up the pace",
    "start": "1381520",
    "end": "1386880"
  },
  {
    "text": "when we're talking about performance it's um not easy to",
    "start": "1386880",
    "end": "1393760"
  },
  {
    "text": "hold all these variables in uh in place and so that's also why when you see a",
    "start": "1393760",
    "end": "1400159"
  },
  {
    "text": "like a bunch of benchmark statistics published it's sometimes um i'll cringe i'll just speak",
    "start": "1400159",
    "end": "1407600"
  },
  {
    "text": "for myself there because it's so easy to get a performance study wrong and to do one",
    "start": "1407600",
    "end": "1414559"
  },
  {
    "text": "very well well sometimes takes a phd student so thank goodness for pratik i said that",
    "start": "1414559",
    "end": "1420960"
  },
  {
    "text": "we were going to talk about web assembly very interesting technology that's been around for a little while",
    "start": "1420960",
    "end": "1427120"
  },
  {
    "text": "and is now kind of coming toward the service mesh landscape",
    "start": "1427120",
    "end": "1433120"
  },
  {
    "text": "and we're excited about it i guess i won't describe it further given the time some of the insights that we've been",
    "start": "1433679",
    "end": "1438880"
  },
  {
    "text": "able to garner over the last number of months here have been um a couple of ways of looking at",
    "start": "1438880",
    "end": "1446159"
  },
  {
    "text": "um and sort of assessing the overhead of the the power of a mesh like hey the the",
    "start": "1446159",
    "end": "1452640"
  },
  {
    "text": "and you would expect um probably that the more that you ask a service mesh to do the more filtering of those requests and",
    "start": "1452640",
    "end": "1459120"
  },
  {
    "text": "of those traffic that traffic that um the more overhead that might be incurred",
    "start": "1459120",
    "end": "1464480"
  },
  {
    "text": "that there's different ways of measuring overhead and we're going to talk a lot about latency today latency being one of those",
    "start": "1464480",
    "end": "1471600"
  },
  {
    "text": "critical um pieces of of information that that you know you wanted to provide your users a good",
    "start": "1471600",
    "end": "1476720"
  },
  {
    "text": "experience with or consumers of your services with a good experience and and what we've begun to do here is",
    "start": "1476720",
    "end": "1482400"
  },
  {
    "text": "compare kind of three different ways of providing filtering",
    "start": "1482400",
    "end": "1488960"
  },
  {
    "text": "traffic filtering in your data plane one is to is to",
    "start": "1488960",
    "end": "1494080"
  },
  {
    "text": "well continue to use client libraries language specific client libraries or",
    "start": "1494320",
    "end": "1500080"
  },
  {
    "text": "just the standard libraries of the language itself to um facilitate",
    "start": "1500080",
    "end": "1506559"
  },
  {
    "text": "some of these network functions in this case what we're talking about here is rate limiting specifically this is",
    "start": "1506559",
    "end": "1512640"
  },
  {
    "text": "just what we had studied here and the statistics that we're seeing is in the environment that we were",
    "start": "1512640",
    "end": "1518559"
  },
  {
    "text": "within um we went through a couple of configurations um",
    "start": "1518559",
    "end": "1523900"
  },
  {
    "text": "[Music] set the rate limit to be um [Music]",
    "start": "1523900",
    "end": "1530799"
  },
  {
    "text": "well uh so uh yeah we have uh run",
    "start": "1530799",
    "end": "1537440"
  },
  {
    "text": "yeah let me take up uh though uh results",
    "start": "1537440",
    "end": "1543039"
  },
  {
    "text": "uh in in the way that uh we tested this in two different uh",
    "start": "1543039",
    "end": "1550320"
  },
  {
    "text": "environments uh if i may uh like we implemented a rate limiting",
    "start": "1550320",
    "end": "1556000"
  },
  {
    "text": "feature inside the go application itself and then we also implemented a rate",
    "start": "1556000",
    "end": "1562880"
  },
  {
    "text": "limiting feature as in our rust web assembly and plugged it in inside the envoy",
    "start": "1562880",
    "end": "1570720"
  },
  {
    "text": "sidecar proxy and removed the rate limiting feature from the go application uh what we would have",
    "start": "1570720",
    "end": "1577919"
  },
  {
    "text": "expected is uh that if the rate limiting is inside the application itself then it",
    "start": "1577919",
    "end": "1584240"
  },
  {
    "text": "should perform better but since it's web assembly and uh the network traffic that is coming",
    "start": "1584240",
    "end": "1591440"
  },
  {
    "text": "through the sidecar proxy and being routed through the sidecar proxy to the application",
    "start": "1591440",
    "end": "1596799"
  },
  {
    "text": "can be uh processed in the sidecar itself and it does not need to go have the",
    "start": "1596799",
    "end": "1604400"
  },
  {
    "text": "overhead of being transferred to the application again uh because of that we see a fair amount of",
    "start": "1604400",
    "end": "1612240"
  },
  {
    "text": "benefits uh the experiment the rate limiting is set at 100",
    "start": "1612240",
    "end": "1619840"
  },
  {
    "text": "requests per second so when we send 100 requests there are no errors",
    "start": "1619840",
    "end": "1626240"
  },
  {
    "text": "and when in the native go client we see",
    "start": "1626240",
    "end": "1632159"
  },
  {
    "text": "a latency of about three milliseconds whereas if we do not have the rate",
    "start": "1632159",
    "end": "1638480"
  },
  {
    "text": "limiting feature in the go but we put it inside the wasm",
    "start": "1638480",
    "end": "1643520"
  },
  {
    "text": "we see a lower latency of 2.1 milliseconds again to read it there are no errors in",
    "start": "1643520",
    "end": "1651039"
  },
  {
    "text": "here like none of the requests are being stopped and still we see a benefit in latency as in",
    "start": "1651039",
    "end": "1658720"
  },
  {
    "text": "as we go higher to a higher request like 500 requests per second",
    "start": "1658720",
    "end": "1664880"
  },
  {
    "text": "we expect 100 of them to pass and 400 of them to fail and you can see that there is",
    "start": "1664880",
    "end": "1672080"
  },
  {
    "text": "even more significant uh benefits when we see the",
    "start": "1672080",
    "end": "1678720"
  },
  {
    "text": "request being filtered out from the sidecar proxy itself uh",
    "start": "1678720",
    "end": "1686480"
  },
  {
    "text": "meshri has this amazing feature where you can leave the rps blank and it will",
    "start": "1686880",
    "end": "1693840"
  },
  {
    "text": "automatically figure try to load the service as much as possible",
    "start": "1693840",
    "end": "1699120"
  },
  {
    "text": "like try to measure how many requests it can actually send in a closed loop circuit and",
    "start": "1699120",
    "end": "1706960"
  },
  {
    "text": "with the native go client we saw that it can only service 4400 requests",
    "start": "1706960",
    "end": "1714480"
  },
  {
    "text": "well 100 of them are go through and the rest 4100 are errors error messages but",
    "start": "1714480",
    "end": "1721679"
  },
  {
    "text": "since they go to the client library and then return the error they incur a larger overhead and hence a",
    "start": "1721679",
    "end": "1728399"
  },
  {
    "text": "lower rate request per second on the other hand since we have a vosm filter inside the",
    "start": "1728399",
    "end": "1735200"
  },
  {
    "text": "sidecar container the requests were being filtered",
    "start": "1735200",
    "end": "1741039"
  },
  {
    "text": "way more efficiently uh when we used this feature and we saw",
    "start": "1741039",
    "end": "1749039"
  },
  {
    "text": "almost like a thousand more requests being handled i although that this is a very",
    "start": "1749039",
    "end": "1755919"
  },
  {
    "text": "simplistic example and but when we see that even in a",
    "start": "1755919",
    "end": "1761120"
  },
  {
    "text": "simple example we see such significant difference in latencies so as and when the",
    "start": "1761120",
    "end": "1769120"
  },
  {
    "text": "functionality gets larger and more complex these latencies",
    "start": "1769120",
    "end": "1775760"
  },
  {
    "text": "will grow only more significant one new thing like uh not new but like a",
    "start": "1775760",
    "end": "1784399"
  },
  {
    "text": "good thing about wasm is you can only use wasm filters as and when you need",
    "start": "1784399",
    "end": "1791760"
  },
  {
    "text": "yeah like we do with kernel modules in our old age days we can insert kernel modules and remove them to",
    "start": "1791760",
    "end": "1799520"
  },
  {
    "text": "lower our binary overhead we can do the same with wasm if we need a particular feature we can load it",
    "start": "1799520",
    "end": "1806080"
  },
  {
    "text": "up and if we don't need it we can remove it and that speaks uh",
    "start": "1806080",
    "end": "1813120"
  },
  {
    "text": "to the power that wasm provides us with in service mesh and",
    "start": "1813200",
    "end": "1820080"
  },
  {
    "text": "these micro services infrastructures and so we'll uh try to get the the slide",
    "start": "1820480",
    "end": "1828399"
  },
  {
    "text": "advanced i'll take a moment um we're i just",
    "start": "1828399",
    "end": "1833520"
  },
  {
    "text": "realized we're uh back one and so to critique please",
    "start": "1833520",
    "end": "1839200"
  },
  {
    "text": "interrupt me as i as i go here uh but uh outside of just looking at the overhead",
    "start": "1839200",
    "end": "1845679"
  },
  {
    "text": "differences in how you take a given network function like rate limiting and",
    "start": "1845679",
    "end": "1853679"
  },
  {
    "text": "how you implement that and the differences in the overhead of those implementations you also can take",
    "start": "1853679",
    "end": "1859600"
  },
  {
    "text": "different types of network functions like path-based routing round-robin load balancing or",
    "start": "1859600",
    "end": "1866799"
  },
  {
    "text": "context-based path routing and analyze compare them as",
    "start": "1866799",
    "end": "1872320"
  },
  {
    "text": "individual network functions and compare and contrast their speed",
    "start": "1872320",
    "end": "1877440"
  },
  {
    "text": "and in again in the same environment that we were using",
    "start": "1877440",
    "end": "1882720"
  },
  {
    "text": "for the other tests that we just talked about we were seeing um it really just a single path based",
    "start": "1882720",
    "end": "1890720"
  },
  {
    "text": "routing being having a higher performance while on route ramad round robin load",
    "start": "1890720",
    "end": "1897600"
  },
  {
    "text": "balancing taking a slight more hit in terms of latency and in terms of throughput actually for",
    "start": "1897600",
    "end": "1905600"
  },
  {
    "text": "the given time period and then context-based routing as you might expect is a little more powerful",
    "start": "1905600",
    "end": "1910720"
  },
  {
    "text": "and it also um is comparatively slower than the other two and so we'll",
    "start": "1910720",
    "end": "1917760"
  },
  {
    "text": "see if by the time we take some q a we'll have",
    "start": "1917760",
    "end": "1922799"
  },
  {
    "text": "some data points to share there specifically um lastly",
    "start": "1922799",
    "end": "1931039"
  },
  {
    "text": "we will say that and pratika you know uh again feel free to interrupt on this",
    "start": "1931360",
    "end": "1938480"
  },
  {
    "text": "i'm trying to hurry yeah but uh yeah so this is uh",
    "start": "1938480",
    "end": "1944000"
  },
  {
    "text": "this was a great uh experiment that came by us while we were running other",
    "start": "1944000",
    "end": "1949679"
  },
  {
    "text": "experiments is how do we optimize our average response times so we tried to run one of the tests and as",
    "start": "1949679",
    "end": "1957360"
  },
  {
    "text": "you can see in this graph we saw that the late the response",
    "start": "1957360",
    "end": "1962960"
  },
  {
    "text": "that we got could be bucketed in separate chunks that is in bucket one we",
    "start": "1962960",
    "end": "1969760"
  },
  {
    "text": "did get a few of these responses but major majority of the responses came back in bucket three that means",
    "start": "1969760",
    "end": "1976559"
  },
  {
    "text": "our service is able to process requests as low as i'm sorry for the",
    "start": "1976559",
    "end": "1983919"
  },
  {
    "text": "small figures it's around like 14 to 18 12 to 18 milliseconds but still majority of our",
    "start": "1983919",
    "end": "1992720"
  },
  {
    "text": "requests come back around 60 50 to 60 milliseconds that means that there is potential in",
    "start": "1992720",
    "end": "2000240"
  },
  {
    "text": "our service to uh respond in 12 milliseconds and we tried to figure out",
    "start": "2000240",
    "end": "2007760"
  },
  {
    "text": "how do we optimize this and if we take the uh the smallest segment",
    "start": "2007760",
    "end": "2015279"
  },
  {
    "text": "bucket that is bucket one and we try to see what is the maximum number of",
    "start": "2015279",
    "end": "2020880"
  },
  {
    "text": "requests that were handled uh in the histogram uh that is at 14",
    "start": "2020880",
    "end": "2026159"
  },
  {
    "text": "is was around 45 to 50 requests and we divided by it by the number of",
    "start": "2026159",
    "end": "2032399"
  },
  {
    "text": "threads that we were running that is two threads and when we did that lo and behold we",
    "start": "2032399",
    "end": "2038000"
  },
  {
    "text": "got most of our responses in the bucket one range uh",
    "start": "2038000",
    "end": "2045360"
  },
  {
    "text": "lee could you share that yeah so we we re-ran the test with a lower uh",
    "start": "2045360",
    "end": "2053599"
  },
  {
    "text": "request per second around uh 25 to 30 and we saw that most of the responses",
    "start": "2053599",
    "end": "2060560"
  },
  {
    "text": "were received in bucket one so there is tons of potential that",
    "start": "2060560",
    "end": "2066960"
  },
  {
    "text": "we should gather by uh looking at these performance metrics and",
    "start": "2066960",
    "end": "2073040"
  },
  {
    "text": "there is tons of optimizations that we can do in this scenario as well nice",
    "start": "2073040",
    "end": "2079919"
  },
  {
    "text": "very good and to share just a couple of those best practices um given given that the time that we",
    "start": "2079919",
    "end": "2086878"
  },
  {
    "text": "have left uh it's to probably go take advantage there's actually a long list of",
    "start": "2086879",
    "end": "2094000"
  },
  {
    "text": "service mesh benchmark testing best practices some published by envoy and that project some published by",
    "start": "2094000",
    "end": "2100880"
  },
  {
    "text": "istio in that project and and it's actually be in",
    "start": "2100880",
    "end": "2106000"
  },
  {
    "text": "um it's because of those best practices and the people as many people have",
    "start": "2106000",
    "end": "2111119"
  },
  {
    "text": "questions about performance as they do that measury as an open source tool has been created",
    "start": "2111119",
    "end": "2117440"
  },
  {
    "text": "to empower people to easily reproduce these tests to persist your results to baseline your",
    "start": "2117440",
    "end": "2122720"
  },
  {
    "text": "environments to use different load generators because they do statistical analysis um differently",
    "start": "2122720",
    "end": "2127920"
  },
  {
    "text": "to compare your configuration changes to test your workloads on and off the mesh",
    "start": "2127920",
    "end": "2133280"
  },
  {
    "text": "to do it against different meshes like sort of on and on uh with that",
    "start": "2133280",
    "end": "2140000"
  },
  {
    "text": "uh we recommend you you give give that tool a shot but i'd also recommend that you jump into",
    "start": "2140000",
    "end": "2145839"
  },
  {
    "text": "this community here where critique and i both hang out quite a bit and speaking of hanging out we're going to",
    "start": "2145839",
    "end": "2152560"
  },
  {
    "text": "be hanging out taking q a right now so please please bring your questions",
    "start": "2152560",
    "end": "2158190"
  },
  {
    "text": "[Music] thanks",
    "start": "2158190",
    "end": "2163119"
  },
  {
    "text": "hey guys we're here to answer any questions uh sorry about",
    "start": "2164720",
    "end": "2171280"
  },
  {
    "text": "the uh screen share for some reason it was off hope you all followed the",
    "start": "2171280",
    "end": "2178000"
  },
  {
    "text": "link shared by lee on his",
    "start": "2178000",
    "end": "2182240"
  },
  {
    "text": "boy page to those who've stuck it out throughout this talk yeah the the",
    "start": "2185520",
    "end": "2192560"
  },
  {
    "text": "video being out of sync has been um well it's been impressive to see those",
    "start": "2192560",
    "end": "2198000"
  },
  {
    "text": "um stick around for the end so i know we've seen a couple of good questions coming through",
    "start": "2198000",
    "end": "2203280"
  },
  {
    "text": "and so trying to answer a few of those it'll be a little bit easier actually i think to verbally speak to",
    "start": "2203280",
    "end": "2209359"
  },
  {
    "text": "those so that's nice one of them was just about um rust",
    "start": "2209359",
    "end": "2215599"
  },
  {
    "text": "uh as you know in terms of its performance and and using rust-based um",
    "start": "2215599",
    "end": "2223440"
  },
  {
    "text": "well rust-based filters inside of awesome vms to characterize um part of that answer",
    "start": "2223440",
    "end": "2232480"
  },
  {
    "text": "is that um envoy itself is written in c plus plus um there are certainly performance",
    "start": "2232480",
    "end": "2238400"
  },
  {
    "text": "comparisons that you can do between um kind of popular languages in this space go",
    "start": "2238400",
    "end": "2244880"
  },
  {
    "text": "plus rust you know if uh if there were folks from",
    "start": "2244880",
    "end": "2250400"
  },
  {
    "text": "the linker d project here they would espouse the um",
    "start": "2250400",
    "end": "2255760"
  },
  {
    "text": "the performance and some other characteristics of rust and i think that by and large",
    "start": "2255760",
    "end": "2263520"
  },
  {
    "text": "this probably is the case that rust would be um have some both performance characteristics and",
    "start": "2263520",
    "end": "2269839"
  },
  {
    "text": "mothers that that if you're doing intense um you know intense filtering of network",
    "start": "2269839",
    "end": "2275760"
  },
  {
    "text": "traffic within within an awesome environment you're seeking out rust or",
    "start": "2275760",
    "end": "2281440"
  },
  {
    "text": "even outside of wasp environments linker d um service proxy is written in rust um if",
    "start": "2281440",
    "end": "2288160"
  },
  {
    "text": "you don't use wassum though and if you are using envoy as your service proxy envoy is written in class",
    "start": "2288160",
    "end": "2294800"
  },
  {
    "text": "plus and so writing a native envoy filter in c",
    "start": "2294800",
    "end": "2299920"
  },
  {
    "text": "plus plus um you know well he's going to be a bit quicker",
    "start": "2299920",
    "end": "2307040"
  },
  {
    "text": "and the reason i pause for a moment is to say that pratik as well in the time that we've",
    "start": "2307040",
    "end": "2313760"
  },
  {
    "text": "recorded this talk uh published some additional metrics for some additional",
    "start": "2313760",
    "end": "2321440"
  },
  {
    "text": "analysis maybe i'll try to share the link i think",
    "start": "2321440",
    "end": "2327440"
  },
  {
    "text": "that this is fresh as of",
    "start": "2327440",
    "end": "2330640"
  },
  {
    "text": "yeah like we can expect trust to be quite performant because the language",
    "start": "2334079",
    "end": "2339920"
  },
  {
    "text": "was developed to be performant but definitely it's a great question",
    "start": "2339920",
    "end": "2346320"
  },
  {
    "text": "that we can do some additional research to see which among as a wasm filter itself",
    "start": "2346320",
    "end": "2354960"
  },
  {
    "text": "if rust or c plus plus uh which of them is performant but like i would expect trust or cc plus",
    "start": "2354960",
    "end": "2361920"
  },
  {
    "text": "plus to be one of the best perform in terms of performance",
    "start": "2361920",
    "end": "2369839"
  },
  {
    "text": "uh so there's a question does the measuring help to manage and configure wasm filters if not",
    "start": "2378160",
    "end": "2384000"
  },
  {
    "text": "extension able to do it it's a very interesting question so vosm",
    "start": "2384000",
    "end": "2389680"
  },
  {
    "text": "filters and service meshes are still a very much an active",
    "start": "2389680",
    "end": "2394960"
  },
  {
    "text": "developmental scope for a lot of service mesh meshery provides adapters",
    "start": "2394960",
    "end": "2402640"
  },
  {
    "text": "for you to try out a lot of these service meshes and as and",
    "start": "2402640",
    "end": "2408400"
  },
  {
    "text": "when the service mesh starts supporting wasm filters uh we will",
    "start": "2408400",
    "end": "2413839"
  },
  {
    "text": "uh try to integrate the best we can and if there are apis we'll try to",
    "start": "2413839",
    "end": "2419280"
  },
  {
    "text": "write an adapter so that you can configure wasp filters in the service mesh in a generic fashion",
    "start": "2419280",
    "end": "2427359"
  },
  {
    "text": "for further critiques answer i'll go ahead and publish a uh",
    "start": "2430800",
    "end": "2436318"
  },
  {
    "text": "a link where those that are curious about um use of measuring and measuries",
    "start": "2436480",
    "end": "2444240"
  },
  {
    "text": "injection or management of the loading and sort of dynamically",
    "start": "2444240",
    "end": "2450000"
  },
  {
    "text": "reloading of wassum filters in envoy based service meshes the link that",
    "start": "2450000",
    "end": "2455440"
  },
  {
    "text": "was just shared is to a sample app called image hub",
    "start": "2455440",
    "end": "2460720"
  },
  {
    "text": "and so that sample app is orchestrated by meshary it deploys actually into a console-based",
    "start": "2460720",
    "end": "2467920"
  },
  {
    "text": "um service mesh and um console in its current release um",
    "start": "2467920",
    "end": "2475119"
  },
  {
    "text": "doesn't uh you know i don't think it it doesn't officially support",
    "start": "2475119",
    "end": "2480800"
  },
  {
    "text": "the use of wassum filters but because it is using envoy as its sidecar technology it inherently does and so near as i",
    "start": "2481760",
    "end": "2489440"
  },
  {
    "text": "understand that's a fairly near-term roadmap item for the console team but that",
    "start": "2489440",
    "end": "2497599"
  },
  {
    "text": "image of that sample app is an interesting one to play with",
    "start": "2497599",
    "end": "2502640"
  },
  {
    "text": "in part because one part because i think it begins to help expand people's horizons in parts i",
    "start": "2502640",
    "end": "2509680"
  },
  {
    "text": "think deepak had a question earlier about you know filtering ingress traffic and manipulating it doing some things with",
    "start": "2509680",
    "end": "2515760"
  },
  {
    "text": "it it's the image hub that sample app is an",
    "start": "2515760",
    "end": "2521119"
  },
  {
    "text": "interesting take on that it actually enforces multi-tenancy and a bit of a",
    "start": "2521119",
    "end": "2529720"
  },
  {
    "text": "subscription-based pricing that intelligence is not built into the sample app itself",
    "start": "2529720",
    "end": "2535920"
  },
  {
    "text": "but that intelligence comes from the wasm filter that you can see in that sample app so",
    "start": "2535920",
    "end": "2542720"
  },
  {
    "text": "pretty cool to explore the power of the data plane in that way",
    "start": "2542720",
    "end": "2551520"
  },
  {
    "text": "um which um i'm you know so it just i don't know if",
    "start": "2551520",
    "end": "2556880"
  },
  {
    "text": "there's no i guess there is another question",
    "start": "2556880",
    "end": "2564079"
  },
  {
    "text": "and so the question is um in multi-os clusters do you have a",
    "start": "2564079",
    "end": "2570480"
  },
  {
    "text": "recommendation for windows",
    "start": "2570480",
    "end": "2573920"
  },
  {
    "text": "nodes i don't know how to answer that because",
    "start": "2576839",
    "end": "2582319"
  },
  {
    "text": "like i always use linux",
    "start": "2582319",
    "end": "2586079"
  },
  {
    "text": "yeah i yeah uh there is a particular",
    "start": "2587680",
    "end": "2593359"
  },
  {
    "text": "particular attendee with this um docker captain juno who's in attendance much more of a wsl2",
    "start": "2593359",
    "end": "2601599"
  },
  {
    "text": "windows expert and so i no doubt he'll be in the same",
    "start": "2601599",
    "end": "2606720"
  },
  {
    "text": "slack uh channel with us as we conclude so i'll we'll point you to the experts there",
    "start": "2606720",
    "end": "2621839"
  },
  {
    "text": "we are not able to hear you",
    "start": "2643599",
    "end": "2649839"
  },
  {
    "text": "oh okay yeah it's not a volume thing huh",
    "start": "2649839",
    "end": "2655599"
  },
  {
    "text": "uh no more questions",
    "start": "2656640",
    "end": "2663839"
  },
  {
    "text": "yeah so feel free to connect with us uh on the slack and",
    "start": "2666160",
    "end": "2673520"
  },
  {
    "text": "any additional questions we'll try to get the recording fixed before we",
    "start": "2673520",
    "end": "2680560"
  },
  {
    "text": "make it available for you for the viewing or general viewing",
    "start": "2680560",
    "end": "2691839"
  },
  {
    "text": "cool very good i don't know if you guys can hear me now or not but i'm going to say something anyway which is yeah okay good",
    "start": "2693040",
    "end": "2701280"
  },
  {
    "text": "uh well since this talk couldn't have been any more of a disaster from the out of things and and",
    "start": "2701280",
    "end": "2708240"
  },
  {
    "text": "the microphone going dead and um i'll just uh i'll say that i want to say thanks uh",
    "start": "2708240",
    "end": "2714800"
  },
  {
    "text": "pratik actually for all the work that you've done on this very interesting analysis that you've",
    "start": "2714800",
    "end": "2720000"
  },
  {
    "text": "done pleased that that you were able to use mesherie",
    "start": "2720000",
    "end": "2725040"
  },
  {
    "text": "as much as you did i think you about wore the rubber off the tires on it but",
    "start": "2725040",
    "end": "2730400"
  },
  {
    "text": "i'm really excited about empowering people with the knowledge of how much it each of",
    "start": "2730400",
    "end": "2736640"
  },
  {
    "text": "these functions costs um and it's thanks to your work that",
    "start": "2736640",
    "end": "2741839"
  },
  {
    "text": "that they'll be able to know you're gonna know what it costs to rate limit",
    "start": "2741839",
    "end": "2748960"
  },
  {
    "text": "thank thanks lee for the opportunity yeah that was great good very good well",
    "start": "2748960",
    "end": "2756800"
  },
  {
    "text": "i think we're out of here we'll see you guys in slack yeah see you guys are y'all we'll see y'all",
    "start": "2756800",
    "end": "2765480"
  },
  {
    "text": "sorry",
    "start": "2765480",
    "end": "2768480"
  }
]