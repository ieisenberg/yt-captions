[
  {
    "text": "this is uh beyond the limits scaling Kubernetes controllers",
    "start": "320",
    "end": "6040"
  },
  {
    "text": "horizontally my name is Tim Ebot i work at STEIT and I'm going to walk you",
    "start": "6040",
    "end": "11280"
  },
  {
    "text": "through some crazy Kubernetes controller stuff in the next 30",
    "start": "11280",
    "end": "16358"
  },
  {
    "text": "minutes but before we start with an introduction let's get a quick raise of",
    "start": "16359",
    "end": "21760"
  },
  {
    "text": "hands who has ever used a Kubernetes operator in their classes",
    "start": "21760",
    "end": "27800"
  },
  {
    "text": "before oh wow that's that's many let's say 70% of the audience okay let's get",
    "start": "27800",
    "end": "33040"
  },
  {
    "text": "another raise of hands who has ever implemented an own custom controller or",
    "start": "33040",
    "end": "38640"
  },
  {
    "text": "Kubernetes operator wow I didn't expect that almost 60% of the audience that's",
    "start": "38640",
    "end": "45840"
  },
  {
    "text": "great um so let me tell you why this topic is so interesting to me",
    "start": "45840",
    "end": "52559"
  },
  {
    "text": "i work at the stick kubernetes engine team and we are running thousands of",
    "start": "52559",
    "end": "58000"
  },
  {
    "text": "kubernetes clusters for our customers this is based on open-source project",
    "start": "58000",
    "end": "64000"
  },
  {
    "text": "gardener without it that wouldn't be possible so shout out to the gardener folks in the audience and out",
    "start": "64000",
    "end": "71000"
  },
  {
    "text": "there gardner uses controllers for managing the Kubernetes clusters meaning",
    "start": "71000",
    "end": "77680"
  },
  {
    "text": "the control planes and the worker nodes so you could say my day job is about",
    "start": "77680",
    "end": "83200"
  },
  {
    "text": "running Kubernetes controllers at scale and that's why I decided to put some",
    "start": "83200",
    "end": "88720"
  },
  {
    "text": "effort into this topic in my master's thesis which was called horizontally",
    "start": "88720",
    "end": "93920"
  },
  {
    "text": "scalable Kubernetes controllers and this is what I'm going to talk to you about",
    "start": "93920",
    "end": "100759"
  },
  {
    "text": "today let's review some controller basics so that we are all on the same page kubernetes controllers are what",
    "start": "100759",
    "end": "109119"
  },
  {
    "text": "facilitate the declarative state management in Kubernetes so that you can",
    "start": "109119",
    "end": "114320"
  },
  {
    "text": "just apply some YAML and the controller takes care for you to scale the",
    "start": "114320",
    "end": "119520"
  },
  {
    "text": "deployment to the desired amount of replicas right so for this controllers",
    "start": "119520",
    "end": "125280"
  },
  {
    "text": "perform these typical steps first of all they watch the API",
    "start": "125280",
    "end": "130959"
  },
  {
    "text": "objects at the API server for changes then when receiving change events like",
    "start": "130959",
    "end": "137120"
  },
  {
    "text": "watch events they cache these objects in memory for fast",
    "start": "137120",
    "end": "142280"
  },
  {
    "text": "retrieval if there are any relevant changes they will encue the object for",
    "start": "142280",
    "end": "147920"
  },
  {
    "text": "later reconciliation when they reconciled the objects the first thing is they read the",
    "start": "147920",
    "end": "155360"
  },
  {
    "text": "object from the cache from memory ideally to not put load on the API server and if necessary they perform the",
    "start": "155360",
    "end": "163360"
  },
  {
    "text": "changes like creating new pots and so on and typically the last step is to report",
    "start": "163360",
    "end": "169200"
  },
  {
    "text": "the observed status so that could be recording a Kubernetes event that you",
    "start": "169200",
    "end": "175200"
  },
  {
    "text": "see in cubectl describe but it could also be updating the status section of",
    "start": "175200",
    "end": "180879"
  },
  {
    "text": "your object okay let's illustrate this i've",
    "start": "180879",
    "end": "186000"
  },
  {
    "text": "brought an example operator which I'm going to use throughout this talk so let",
    "start": "186000",
    "end": "191040"
  },
  {
    "text": "me first introduce it to you and then we can see how we can make it scale",
    "start": "191040",
    "end": "198040"
  },
  {
    "text": "okay so my demo operator is called the web hosting operator the idea is pretty",
    "start": "203480",
    "end": "211440"
  },
  {
    "text": "simple we want to run a web hosting platform for our customers so hosting",
    "start": "211440",
    "end": "216640"
  },
  {
    "text": "engine X as a service basically uh and we want to do this declaratively with",
    "start": "216640",
    "end": "221680"
  },
  {
    "text": "Kubernetes because there is simply no better way to host engine X than on Kubernetes right okay so let's first",
    "start": "221680",
    "end": "229519"
  },
  {
    "text": "apply some example manifests and uh we can take a look at",
    "start": "229519",
    "end": "234640"
  },
  {
    "text": "the themes now themes um basically declare how our websites configured by",
    "start": "234640",
    "end": "241280"
  },
  {
    "text": "the customers would look like there is an exciting theme it uses some color and",
    "start": "241280",
    "end": "246560"
  },
  {
    "text": "a specific phone family based on this our projects can get and",
    "start": "246560",
    "end": "254000"
  },
  {
    "text": "create websites in a project name space and I have already created a website for",
    "start": "254000",
    "end": "260479"
  },
  {
    "text": "CubeCon and it uses the exciting theme obviously okay and we see the website is",
    "start": "260479",
    "end": "266960"
  },
  {
    "text": "ready and uh what the operator did in the background was to create some more",
    "start": "266960",
    "end": "273120"
  },
  {
    "text": "objects like an deployment an ingress in the service for exposing our website to",
    "start": "273120",
    "end": "279759"
  },
  {
    "text": "the user so now that this is running uh on my kind cluster I should be able Wow this",
    "start": "279759",
    "end": "287840"
  },
  {
    "text": "is small uh I should be able to visit the website I just created in the",
    "start": "287840",
    "end": "293120"
  },
  {
    "text": "project fu namespace and it says welcome to",
    "start": "293120",
    "end": "298680"
  },
  {
    "text": "CubeCon okay let's jump back to the slides",
    "start": "298680",
    "end": "304199"
  },
  {
    "text": "so now now that we reviewed how Kubernetes controllers work and how you can use them to implement operators",
    "start": "305360",
    "end": "313120"
  },
  {
    "text": "what's the problem with it kubernetes controllers must always",
    "start": "313120",
    "end": "320560"
  },
  {
    "text": "prevent conflicting reconciliations so it cannot reconcile a",
    "start": "320560",
    "end": "326639"
  },
  {
    "text": "single object in multiple instances for this typically Kubernetes",
    "start": "326639",
    "end": "331759"
  },
  {
    "text": "controllers perform a process called leader election to select a single active instance and only this specific",
    "start": "331759",
    "end": "339440"
  },
  {
    "text": "controller instance will ever make changes to the objects this causes controllers to not",
    "start": "339440",
    "end": "347600"
  },
  {
    "text": "be scalable in a horizontal manner so you can't just add new controller",
    "start": "347600",
    "end": "352800"
  },
  {
    "text": "instances to increase the performance of your system this imposes limits on largecale use",
    "start": "352800",
    "end": "359759"
  },
  {
    "text": "cases like the ones I'm doing at stacket but so far there is no standard",
    "start": "359759",
    "end": "366160"
  },
  {
    "text": "solution for it so let's fix this but first of all I will illustrate again the",
    "start": "366160",
    "end": "372319"
  },
  {
    "text": "leader election process so we all know what we are talking",
    "start": "372319",
    "end": "377520"
  },
  {
    "text": "about okay in the name space where my web hosting operator runs it also",
    "start": "379160",
    "end": "385759"
  },
  {
    "text": "creates a lease resource this is typically used for leader election and",
    "start": "385759",
    "end": "390880"
  },
  {
    "text": "you will see the basic property of a lease is the active holder right now it",
    "start": "390880",
    "end": "396080"
  },
  {
    "text": "says uh this pod this host name whatever is the active",
    "start": "396080",
    "end": "403840"
  },
  {
    "text": "leader so what happens if we have multiple replicas let's take a look at",
    "start": "404280",
    "end": "409440"
  },
  {
    "text": "the locks of our operator we see that it reconciles the websites and in parallel",
    "start": "409440",
    "end": "416560"
  },
  {
    "text": "let's put a watch on the um ports and the",
    "start": "416560",
    "end": "422599"
  },
  {
    "text": "lease and if we now add a second instance of our operator we just scale",
    "start": "422599",
    "end": "429120"
  },
  {
    "text": "it up we see that it is gets ready but it does not do anything",
    "start": "429120",
    "end": "435840"
  },
  {
    "text": "if we now create another website we can see that the existing previously",
    "start": "435840",
    "end": "444400"
  },
  {
    "text": "existing instance is responsible and is reconciling the website and making it",
    "start": "444400",
    "end": "451240"
  },
  {
    "text": "ready so you could now call this an active passive HA setup so it's not",
    "start": "451240",
    "end": "457599"
  },
  {
    "text": "scaling out and adding any performance but it's just warming up another controller instance for a quick",
    "start": "457599",
    "end": "466400"
  },
  {
    "text": "failover we can also demonstrate the failover by just deleting one of the",
    "start": "466599",
    "end": "472080"
  },
  {
    "text": "instances let's pick the current leader it's the four",
    "start": "472080",
    "end": "478440"
  },
  {
    "text": "something okay now we see that another instance got created but more importantly the lease object was",
    "start": "478440",
    "end": "485840"
  },
  {
    "text": "released by the active controller and it was taken over by the other one which",
    "start": "485840",
    "end": "491039"
  },
  {
    "text": "was already pre pre-warmed and now another instance reconciles our web",
    "start": "491039",
    "end": "497120"
  },
  {
    "text": "hosting objects okay while we jump back to the",
    "start": "497120",
    "end": "503520"
  },
  {
    "text": "slides let me prepare the next demo",
    "start": "503520",
    "end": "508440"
  },
  {
    "text": "okay so now that we know what the problems is and why Kubernetes controllers can't be scaled horizontally",
    "start": "513120",
    "end": "519760"
  },
  {
    "text": "let's take a look at this design that I've come up with in my master's",
    "start": "519760",
    "end": "525080"
  },
  {
    "text": "thesis the core principles of this design is to apply sharding mechanisms",
    "start": "525080",
    "end": "530880"
  },
  {
    "text": "that we all know and love from distributed databases to the world of",
    "start": "530880",
    "end": "536080"
  },
  {
    "text": "Kubernetes controllers we use some dynamic membership and failure detection that is pretty similar",
    "start": "536080",
    "end": "543360"
  },
  {
    "text": "to a big table for example based on this we can determine which um controller",
    "start": "543360",
    "end": "550399"
  },
  {
    "text": "instances or shards as I call them are available for",
    "start": "550399",
    "end": "555480"
  },
  {
    "text": "scheduling if a shard goes down we can perform automatic failover of the API",
    "start": "555480",
    "end": "561440"
  },
  {
    "text": "objects and if another chart joins the ring we can rebalance the",
    "start": "561440",
    "end": "567720"
  },
  {
    "text": "distribution all of this is achieved via some label based mechanism so it's",
    "start": "567720",
    "end": "573200"
  },
  {
    "text": "nothing fancy uh that you don't know it's just pure Kubernetes API",
    "start": "573200",
    "end": "581519"
  },
  {
    "text": "machinery still we prevent concurrent reconciliations in multiple instances so",
    "start": "581800",
    "end": "588399"
  },
  {
    "text": "one object is always just reconciled by a single controller instance but it",
    "start": "588399",
    "end": "595279"
  },
  {
    "text": "might not be the same as another API object the implementation of this design",
    "start": "595279",
    "end": "601680"
  },
  {
    "text": "that I've came up with is reusable and you can start using it in your Kubernetes controllers",
    "start": "601680",
    "end": "607880"
  },
  {
    "text": "today so let's take a look at the architecture it might look a bit intimidating but don't worry I'm going",
    "start": "607880",
    "end": "614480"
  },
  {
    "text": "to walk you through it at the core of it we have not only one",
    "start": "614480",
    "end": "620480"
  },
  {
    "text": "controller instance but let's say three of the same",
    "start": "620480",
    "end": "625720"
  },
  {
    "text": "controller each of the controller instances or shards creates its own",
    "start": "625720",
    "end": "631200"
  },
  {
    "text": "lease resource for declaring membership to the ring of controllers",
    "start": "631200",
    "end": "639079"
  },
  {
    "text": "and now that we discover which shards are available we can assign a portion of",
    "start": "639440",
    "end": "645839"
  },
  {
    "text": "all the objects that we have in our system to a specific controller",
    "start": "645839",
    "end": "651320"
  },
  {
    "text": "instance for this there is a new component in the cluster which I call the sharder the sharder discovers which",
    "start": "651320",
    "end": "659760"
  },
  {
    "text": "object which shards are available and constructs a consistent hash ring that",
    "start": "659760",
    "end": "665040"
  },
  {
    "text": "you might know from Cassandra for example based on this we can assign the objects",
    "start": "665040",
    "end": "671519"
  },
  {
    "text": "put a label on it um during admission for this we just create a mutating web",
    "start": "671519",
    "end": "677800"
  },
  {
    "text": "configuration so that the API server will always ask the sharder which shard",
    "start": "677800",
    "end": "683839"
  },
  {
    "text": "it should assign an object to to put this all together we need to",
    "start": "683839",
    "end": "689440"
  },
  {
    "text": "create a new resource it's called controller ring the controller ring",
    "start": "689440",
    "end": "694560"
  },
  {
    "text": "configures the sharder and declares what objects belong to the controller and",
    "start": "694560",
    "end": "700560"
  },
  {
    "text": "should be distributed across multiple controller",
    "start": "700560",
    "end": "705839"
  },
  {
    "text": "instances and once we've done this the sharder takes care to inject the shard",
    "start": "705880",
    "end": "711120"
  },
  {
    "text": "label into every single object that belongs to this controller",
    "start": "711120",
    "end": "716720"
  },
  {
    "text": "and the last part of the design is that each individual controller puts a label",
    "start": "716720",
    "end": "722800"
  },
  {
    "text": "selector in the watch cache so that it only requests and sees the relevant",
    "start": "722800",
    "end": "729519"
  },
  {
    "text": "objects that are assigned to this specific instance okay enough of the abstract",
    "start": "729519",
    "end": "735360"
  },
  {
    "text": "talking let's get to the demo and hope it works so back to our web hosting",
    "start": "735360",
    "end": "742560"
  },
  {
    "text": "operator we can now see that in my cluster there's the sharder component",
    "start": "742560",
    "end": "748519"
  },
  {
    "text": "running so great we now configured a controller ring for our web hosting",
    "start": "748519",
    "end": "754639"
  },
  {
    "text": "operator and we can see that the sharder already recognized three available",
    "start": "754639",
    "end": "759959"
  },
  {
    "text": "instances great how did it recognize these this is based on the lease object",
    "start": "759959",
    "end": "769120"
  },
  {
    "text": "in this case we have three instances running as three different pods and each of them created its own lease object and",
    "start": "769120",
    "end": "777519"
  },
  {
    "text": "we can see that the label uh being named controller ring is referencing our",
    "start": "777519",
    "end": "785360"
  },
  {
    "text": "controller ring web hosting operator and the other thing we can already see is",
    "start": "785360",
    "end": "791279"
  },
  {
    "text": "that the sharder put another state label on it and it recognized all of these",
    "start": "791279",
    "end": "796399"
  },
  {
    "text": "shard leases as ready so it considers them for",
    "start": "796399",
    "end": "801519"
  },
  {
    "text": "scheduling okay let's look at the um controller ring",
    "start": "801800",
    "end": "807000"
  },
  {
    "text": "resource as we have seen before the web hosting operator is mainly responsible",
    "start": "807000",
    "end": "813040"
  },
  {
    "text": "for the website object this is the one where we uh specify the theme and for",
    "start": "813040",
    "end": "819040"
  },
  {
    "text": "each website it creates more objects like a deployment a config map service",
    "start": "819040",
    "end": "824959"
  },
  {
    "text": "and so on you could say these are controlled resources because all of them have a owner reference back to the",
    "start": "824959",
    "end": "832399"
  },
  {
    "text": "owning website okay based on this the sharder creates",
    "start": "832399",
    "end": "839360"
  },
  {
    "text": "the mutating web hook that I talked about as we can see this mutating web",
    "start": "839360",
    "end": "845839"
  },
  {
    "text": "hook configuration points to the sharder running in the sharding system and it is specific to this controller",
    "start": "845839",
    "end": "853959"
  },
  {
    "text": "ring and we also have an object selector in it which has the shard label um and",
    "start": "853959",
    "end": "861279"
  },
  {
    "text": "it checks for non-existence of this meaning that when you create a new",
    "start": "861279",
    "end": "866639"
  },
  {
    "text": "object the API server will check for you if it is already assigned to a shard and",
    "start": "866639",
    "end": "872639"
  },
  {
    "text": "only if it is not it will reach out to the sharter to ask for an",
    "start": "872639",
    "end": "877880"
  },
  {
    "text": "assignment and this process is done for all the website objects but also all the",
    "start": "877880",
    "end": "884240"
  },
  {
    "text": "controlled objects like deployments and so on that we've specified in the controller",
    "start": "884240",
    "end": "890800"
  },
  {
    "text": "ring okay let's see this in action and create",
    "start": "891000",
    "end": "896040"
  },
  {
    "text": "some let's recreate the CubeCon website and get the YAML uh representation of",
    "start": "896040",
    "end": "903600"
  },
  {
    "text": "the object we just created as we can see our mutating web hook",
    "start": "903600",
    "end": "909360"
  },
  {
    "text": "injected the shard label and it has a value pointing to an individual",
    "start": "909360",
    "end": "915040"
  },
  {
    "text": "controller instance that should be a uh responsible for this particular",
    "start": "915040",
    "end": "920519"
  },
  {
    "text": "object we should see that the website is",
    "start": "920519",
    "end": "925639"
  },
  {
    "text": "ready no that's the wrong name space wait so the website is also ready and",
    "start": "925639",
    "end": "932720"
  },
  {
    "text": "not only the website but also the owned objects have gotten a label and all of",
    "start": "932720",
    "end": "939360"
  },
  {
    "text": "them are assigned to the same controller instance otherwise the controller wouldn't know if the website is ready or",
    "start": "939360",
    "end": "947959"
  },
  {
    "text": "not based on this we should now be able to see our website again let's refresh",
    "start": "947959",
    "end": "953040"
  },
  {
    "text": "it now we have a new server because we recreated the website",
    "start": "953040",
    "end": "958360"
  },
  {
    "text": "right cool let's create some more websites just a random set of 50",
    "start": "958360",
    "end": "965560"
  },
  {
    "text": "websites and now we should see that the websites are distributed across these um",
    "start": "965560",
    "end": "975160"
  },
  {
    "text": "shards right we have three different shards and the website objects are",
    "start": "975160",
    "end": "980199"
  },
  {
    "text": "distributed roughly equally",
    "start": "980199",
    "end": "984759"
  },
  {
    "text": "so let's check what happens if we remove an existing controller instance from our",
    "start": "986240",
    "end": "992240"
  },
  {
    "text": "controller ring for this we put a watch on the pots and",
    "start": "992240",
    "end": "999040"
  },
  {
    "text": "leases and we will also watch the website",
    "start": "999160",
    "end": "1005199"
  },
  {
    "text": "objects okay now let's scale the web hosting",
    "start": "1006040",
    "end": "1013759"
  },
  {
    "text": "operator deployment down to two and what we can see is that the",
    "start": "1013759",
    "end": "1020639"
  },
  {
    "text": "shard lease belonging to this particular instance was released there is no holder",
    "start": "1020639",
    "end": "1026079"
  },
  {
    "text": "identity anymore and the sharder recognized this shard as unavailable so",
    "start": "1026079",
    "end": "1031520"
  },
  {
    "text": "it will not assign any objects to this shard anymore all the objects that were assigned to",
    "start": "1031520",
    "end": "1038240"
  },
  {
    "text": "this chart previously now just get an update to the chart label pointing to",
    "start": "1038240",
    "end": "1043918"
  },
  {
    "text": "another available instance great there is another case I",
    "start": "1043919",
    "end": "1050480"
  },
  {
    "text": "want to show which is adding a new instance to the ring this is a bit more",
    "start": "1050480",
    "end": "1055600"
  },
  {
    "text": "involved because we need to make sure that even when moving an object between",
    "start": "1055600",
    "end": "1060640"
  },
  {
    "text": "controller instances there is only a single controller feeling responsible for it otherwise there would again be",
    "start": "1060640",
    "end": "1068320"
  },
  {
    "text": "con conflicting reconciliations which we want to prevent right okay so therefore",
    "start": "1068320",
    "end": "1074480"
  },
  {
    "text": "there is a handover mechanism in place that asks for a confirmation of the",
    "start": "1074480",
    "end": "1080960"
  },
  {
    "text": "active um controller to acknowledge the operation",
    "start": "1080960",
    "end": "1086320"
  },
  {
    "text": "that the object is moved to another instance and it needs to acknowledge this because otherwise we wouldn't know",
    "start": "1086320",
    "end": "1092880"
  },
  {
    "text": "if it has seen the reassignment and stops reconciling okay for this there is",
    "start": "1092880",
    "end": "1099360"
  },
  {
    "text": "another label it's called train something something and we we should see",
    "start": "1099360",
    "end": "1105280"
  },
  {
    "text": "that when we add another instance objects first get the train label and",
    "start": "1105280",
    "end": "1111200"
  },
  {
    "text": "then the active instance acknowledges this operation by removing train and chart label and then the sharter can",
    "start": "1111200",
    "end": "1118320"
  },
  {
    "text": "just put a new shard label on it and assign the object to a new",
    "start": "1118320",
    "end": "1123960"
  },
  {
    "text": "instance cool",
    "start": "1123960",
    "end": "1127960"
  },
  {
    "text": "so now that we understand how sharding for Kubernetes controllers works you",
    "start": "1132320",
    "end": "1137440"
  },
  {
    "text": "might ask yourself how can I use it how can I implement this in my own controllers and I will tell you it is",
    "start": "1137440",
    "end": "1144640"
  },
  {
    "text": "pretty simple you can just reuse a few components that I've",
    "start": "1144640",
    "end": "1149960"
  },
  {
    "text": "published the first step is to install the Sharter components this brings the",
    "start": "1149960",
    "end": "1155760"
  },
  {
    "text": "sharder deployment and the controller ring CRD into the",
    "start": "1155760",
    "end": "1162520"
  },
  {
    "text": "cluster once you've done this you can configure the controller ring matching",
    "start": "1162520",
    "end": "1168480"
  },
  {
    "text": "your Kubernetes controller in our case it was the web hosting operator it is",
    "start": "1168480",
    "end": "1174080"
  },
  {
    "text": "responsible for websites and a few controlled resources this is fairly easy so far",
    "start": "1174080",
    "end": "1182160"
  },
  {
    "text": "now we need to change our controller in implementation only a little bit the",
    "start": "1182160",
    "end": "1188400"
  },
  {
    "text": "first thing is to create the short lease that we've talked about and what we can",
    "start": "1188400",
    "end": "1194320"
  },
  {
    "text": "notice is that it has the label pointing to the controller ring that we configured and the second thing we",
    "start": "1194320",
    "end": "1201280"
  },
  {
    "text": "notice is that it has an individual name and holder identity compared to the",
    "start": "1201280",
    "end": "1207440"
  },
  {
    "text": "traditional leader election lease if you use controller runtime to build",
    "start": "1207440",
    "end": "1214400"
  },
  {
    "text": "your controller this is very easy you just import my library configure the",
    "start": "1214400",
    "end": "1220640"
  },
  {
    "text": "name of your controller ring and then when creating the manager that runs your",
    "start": "1220640",
    "end": "1226760"
  },
  {
    "text": "controllers you simply pass on the shard lease implementation to the leader",
    "start": "1226760",
    "end": "1232000"
  },
  {
    "text": "election mechanism and with this your controller runtime manager will no longer create a single lease for leader",
    "start": "1232000",
    "end": "1239440"
  },
  {
    "text": "election but it will create an individual shardly specific to your",
    "start": "1239440",
    "end": "1245720"
  },
  {
    "text": "instance if you don't use controller runtime or use another programming language you can easily implement these",
    "start": "1245720",
    "end": "1253039"
  },
  {
    "text": "steps by yourselves it's very easy the fourth step we need to take is",
    "start": "1253039",
    "end": "1260559"
  },
  {
    "text": "filtering our watch cache we saw that the objects always get this shard label",
    "start": "1260559",
    "end": "1266240"
  },
  {
    "text": "with a value of the shard identity and we only want to watch these objects that",
    "start": "1266240",
    "end": "1271679"
  },
  {
    "text": "are assigned to our specific instance again if you use controller",
    "start": "1271679",
    "end": "1276960"
  },
  {
    "text": "runtime this is very easy to do you just set up the label selector you can also",
    "start": "1276960",
    "end": "1282640"
  },
  {
    "text": "get the um the name from the library pass the shard name and then you give",
    "start": "1282640",
    "end": "1289280"
  },
  {
    "text": "this one to the manager in the cache options and this will make controller",
    "start": "1289280",
    "end": "1295440"
  },
  {
    "text": "runtime only watch the objects that you care",
    "start": "1295440",
    "end": "1301000"
  },
  {
    "text": "about the last step is again a bit more involved and it is about handling the",
    "start": "1301000",
    "end": "1306240"
  },
  {
    "text": "train operation that we've seen when moving objects from a active instance to",
    "start": "1306240",
    "end": "1311760"
  },
  {
    "text": "a new instance when the train operation is triggered we can see this particular",
    "start": "1311760",
    "end": "1318320"
  },
  {
    "text": "label on the objects and once we see this in our controller we need to stop",
    "start": "1318320",
    "end": "1325000"
  },
  {
    "text": "reconciliating objects and remove both the train and the shard label",
    "start": "1325000",
    "end": "1331520"
  },
  {
    "text": "so you might think this is quite complicated but again if you use controller runtime you can just use my",
    "start": "1331520",
    "end": "1338559"
  },
  {
    "text": "library to wrap first of all the predicate to react to events where the",
    "start": "1338559",
    "end": "1344400"
  },
  {
    "text": "train label is added and you can wrap the reconciler to remove the labels so",
    "start": "1344400",
    "end": "1351039"
  },
  {
    "text": "with this you don't actually need to change anything in your business logic of the controller you just need to use",
    "start": "1351039",
    "end": "1357520"
  },
  {
    "text": "the library and wrap both predicate and controllers to summarize this you can",
    "start": "1357520",
    "end": "1365720"
  },
  {
    "text": "easily implement sharding for your controllers in 50 lines or less less I",
    "start": "1365720",
    "end": "1371679"
  },
  {
    "text": "guess if you leave out the comments okay so you might ask yourself have you",
    "start": "1371679",
    "end": "1379760"
  },
  {
    "text": "tested this is it really scaling the Kubernetes controllers horizontally or",
    "start": "1379760",
    "end": "1384799"
  },
  {
    "text": "is there any overhead so this is also what I've done in my master's thesis and for this I conducted some load test",
    "start": "1384799",
    "end": "1392520"
  },
  {
    "text": "experiments before we jump into how the load test experiments work we should define what a load on a controller",
    "start": "1392520",
    "end": "1399600"
  },
  {
    "text": "actually means load on a controller has two dimensions the first one is how many",
    "start": "1399600",
    "end": "1405679"
  },
  {
    "text": "objects are in the system how many object it needs to watch in my load tests I increased this over the time of",
    "start": "1405679",
    "end": "1413520"
  },
  {
    "text": "15 minutes to about 9,000 objects the second dimension of load on",
    "start": "1413520",
    "end": "1419520"
  },
  {
    "text": "a controller is how often objects change or churn that could be object creations",
    "start": "1419520",
    "end": "1427600"
  },
  {
    "text": "updates and deletions in my cases I increase the load up to 300 changes per second",
    "start": "1427600",
    "end": "1436400"
  },
  {
    "text": "the first thing I did was to observe how many resources my controller actually",
    "start": "1436400",
    "end": "1443640"
  },
  {
    "text": "consumes as you can see in this comparison the overhead of a sharded",
    "start": "1443640",
    "end": "1449440"
  },
  {
    "text": "controller is very small in comparison to a singleton controller where you only",
    "start": "1449440",
    "end": "1455360"
  },
  {
    "text": "have uh one one active instance you can see the bene the overhead is in",
    "start": "1455360",
    "end": "1462000"
  },
  {
    "text": "the resource consumption of the charter that is added to your system but it's constant it's not growing with the load",
    "start": "1462000",
    "end": "1468799"
  },
  {
    "text": "of the controller if we now want to judge whether our system is scalable or not we",
    "start": "1468799",
    "end": "1476559"
  },
  {
    "text": "need to measure performance and again performance measurements for controllers",
    "start": "1476559",
    "end": "1482559"
  },
  {
    "text": "need to be defined in my case I put up two SLOs's so the first one would be",
    "start": "1482559",
    "end": "1489120"
  },
  {
    "text": "that objects are worked on very fast so the Q latency should be less than 1",
    "start": "1489120",
    "end": "1495760"
  },
  {
    "text": "second ideally this correlates to responsiveness of your controller so to",
    "start": "1495760",
    "end": "1501320"
  },
  {
    "text": "say we get this metric from controller runtime we can just evaluate the 99th",
    "start": "1501320",
    "end": "1507279"
  },
  {
    "text": "percentile from it the other performance indicator is",
    "start": "1507279",
    "end": "1513360"
  },
  {
    "text": "how long it takes for the object to get ready so I would call this reconciliation latency and ideally it",
    "start": "1513360",
    "end": "1520240"
  },
  {
    "text": "should be very low let's pick a number of 5 seconds as the threshold for our",
    "start": "1520240",
    "end": "1527080"
  },
  {
    "text": "controller now I took performance measurements for a controller set up",
    "start": "1527080",
    "end": "1532159"
  },
  {
    "text": "with one instance up to five instances and as you can see the capacity of the",
    "start": "1532159",
    "end": "1538799"
  },
  {
    "text": "system meaning the point where it doesn't break our SLO is increasing with",
    "start": "1538799",
    "end": "1544960"
  },
  {
    "text": "every single addit instance it's almost increasing linearity so you could call",
    "start": "1544960",
    "end": "1550880"
  },
  {
    "text": "this perfect horizontal scalability so let me wrap this",
    "start": "1550880",
    "end": "1558039"
  },
  {
    "text": "up today we saw how to make Kubernetes controllers horizontally scalable and",
    "start": "1558039",
    "end": "1564880"
  },
  {
    "text": "the capacity of the controller system increases with every single added",
    "start": "1564880",
    "end": "1570200"
  },
  {
    "text": "instance this design and implementation is reusable you can just apply it to",
    "start": "1570200",
    "end": "1576080"
  },
  {
    "text": "your controller or any new controller that you write i would say this project is ready for",
    "start": "1576080",
    "end": "1582960"
  },
  {
    "text": "usage and I would highly recommend to try it out and reach out with feedback",
    "start": "1582960",
    "end": "1589279"
  },
  {
    "text": "so we can build a community around it we should gather some more experience in",
    "start": "1589279",
    "end": "1595679"
  },
  {
    "text": "real world usage i wouldn't recommend running in production so with this I will open up",
    "start": "1595679",
    "end": "1604159"
  },
  {
    "text": "for questions if you like the talk feel free to check out the project where you will also find links to the master's",
    "start": "1604159",
    "end": "1611200"
  },
  {
    "text": "thesis if you are interested in the full details leave a star if you like the talk and now up to your questions",
    "start": "1611200",
    "end": "1618660"
  },
  {
    "text": "[Applause]",
    "start": "1618660",
    "end": "1630529"
  },
  {
    "text": "i think you can walk up to the mic if you want",
    "start": "1633360",
    "end": "1638919"
  },
  {
    "text": "hi thanks for your session it has been super interesting i have a question about you are scaling your controllers",
    "start": "1643440",
    "end": "1650159"
  },
  {
    "text": "does the the sharder uh support autoscaling the controllers itself i",
    "start": "1650159",
    "end": "1656559"
  },
  {
    "text": "mean if I can monitor the queue length or I can monitor the CPU of the of my",
    "start": "1656559",
    "end": "1662200"
  },
  {
    "text": "operator will be the sharder fast enough to re rebalance the shard if I",
    "start": "1662200",
    "end": "1669720"
  },
  {
    "text": "automatically scale out and scale scale in the the operator",
    "start": "1669720",
    "end": "1675360"
  },
  {
    "text": "let me repeat the question for the sake of the recording uh the question was about um whether I can use horizontal",
    "start": "1675360",
    "end": "1682640"
  },
  {
    "text": "autoscaling for my controller uh for example based on the performance metrics",
    "start": "1682640",
    "end": "1687760"
  },
  {
    "text": "that we identified so I I definitely want to try this out i haven't done so",
    "start": "1687760",
    "end": "1693120"
  },
  {
    "text": "before maybe I can present it at the next CubeCon then but in theory it should work and it's uh it's a perfect",
    "start": "1693120",
    "end": "1700480"
  },
  {
    "text": "use case for this project cool hey um great presentation",
    "start": "1700480",
    "end": "1708520"
  },
  {
    "text": "um I wanted to understand if the result of sharder that gets put into",
    "start": "1708520",
    "end": "1717120"
  },
  {
    "text": "the label uh could be simplified a little bit by saying that okay I will",
    "start": "1717120",
    "end": "1724080"
  },
  {
    "text": "not update uh the label on each of the objects but the sharder and the",
    "start": "1724080",
    "end": "1730399"
  },
  {
    "text": "controller predicate could both come up with the uh same hash resolution based",
    "start": "1730399",
    "end": "1737120"
  },
  {
    "text": "on uh an implicitly written algorithm and on the fly u the",
    "start": "1737120",
    "end": "1745440"
  },
  {
    "text": "the correct sharding instance controller will receive um the object and work on",
    "start": "1745440",
    "end": "1751200"
  },
  {
    "text": "it was was there any design consideration made on this particular",
    "start": "1751200",
    "end": "1756240"
  },
  {
    "text": "approach what would be the pros and cons uh of it okay got the question let me repeat it for the recording um so the",
    "start": "1756240",
    "end": "1763360"
  },
  {
    "text": "question is why we need to update the objects basically at the label explicitly instead of computing the the",
    "start": "1763360",
    "end": "1770960"
  },
  {
    "text": "consistent hash ring on the fly in predicates for example the answer is that if you um",
    "start": "1770960",
    "end": "1778000"
  },
  {
    "text": "have an outofbend um yeah coordination mechanism you can't really be sure that",
    "start": "1778000",
    "end": "1784240"
  },
  {
    "text": "an existing instance stops working on an object when you want to move it to another instance for rebalancing let's",
    "start": "1784240",
    "end": "1791679"
  },
  {
    "text": "say um I I tried to make it work without this um but I couldn't figure out it um",
    "start": "1791679",
    "end": "1798399"
  },
  {
    "text": "at least also this is what other distributed databases are doing uh and I",
    "start": "1798399",
    "end": "1803760"
  },
  {
    "text": "tried to to apply proven mechanisms so to say uh this this is what I came up",
    "start": "1803760",
    "end": "1809600"
  },
  {
    "text": "with but maybe there are smarter ideas I would say um yeah so just for our use",
    "start": "1809600",
    "end": "1816480"
  },
  {
    "text": "case um it it might not the training logic uh might be a little uh o overkill",
    "start": "1816480",
    "end": "1826080"
  },
  {
    "text": "like we don't care uh if you train or not uh but we want to uh distribute when",
    "start": "1826080",
    "end": "1832240"
  },
  {
    "text": "the uh capacity is available so that could be a simpler use case and maybe",
    "start": "1832240",
    "end": "1837919"
  },
  {
    "text": "help a little bit with making the design simple so thank you great presentation thank you i I'm afraid we are out of",
    "start": "1837919",
    "end": "1844320"
  },
  {
    "text": "time for more questions but I would be more than happy to chat about them feel free to come up to the stage and also we",
    "start": "1844320",
    "end": "1851840"
  },
  {
    "text": "can continue the chat you can grab me at the STEIT or the gardener booth and happy CubeCon everyone",
    "start": "1851840",
    "end": "1859520"
  }
]