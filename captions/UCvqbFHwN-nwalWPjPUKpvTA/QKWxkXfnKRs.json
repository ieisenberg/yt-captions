[
  {
    "text": "hello everyone good afternoon I'm chak karia and I'm a software engineer at Uber and I have my colleague Ryan Turner",
    "start": "440",
    "end": "7480"
  },
  {
    "text": "with me who's a maintainer on the Spire project and today we'll be presenting how you can leverage Spire for all your",
    "start": "7480",
    "end": "14200"
  },
  {
    "text": "production identity needs so this will be the agenda for",
    "start": "14200",
    "end": "19480"
  },
  {
    "text": "today's session uh we'll start with an overview of spiffy and Spire then talk",
    "start": "19480",
    "end": "24920"
  },
  {
    "text": "about SP architecture plugins and x509 certificates we'll then our use case for",
    "start": "24920",
    "end": "31480"
  },
  {
    "text": "Mutual TLS encrypted MySQL connections using Spire along with the demo so let's",
    "start": "31480",
    "end": "38079"
  },
  {
    "text": "get started so what's spiffy it stands for",
    "start": "38079",
    "end": "43559"
  },
  {
    "text": "secure production identity framework for everyone which is a set of standards for securely issuing identity to",
    "start": "43559",
    "end": "50719"
  },
  {
    "text": "workloads it consists of three main components uh first is the spiffy ID",
    "start": "50719",
    "end": "55960"
  },
  {
    "text": "which is a URI string that uniquely represents the name or ID of a workload",
    "start": "55960",
    "end": "61719"
  },
  {
    "text": "and workload here could be any anything like a web server a database a micros service or any single piece of software",
    "start": "61719",
    "end": "69799"
  },
  {
    "text": "the spiffy ID URI uh format is spiffy colon dou SL followed by the trust",
    "start": "69799",
    "end": "76000"
  },
  {
    "text": "domain and path uh the trust domain here represents the trust root of the system",
    "start": "76000",
    "end": "81520"
  },
  {
    "text": "uh which for example could be the domain name for an organization and the path is unique for a workload the whole spfy ID",
    "start": "81520",
    "end": "89240"
  },
  {
    "text": "string can thereby be used to uniquely identify a workload second is the spiffy verifiable",
    "start": "89240",
    "end": "95840"
  },
  {
    "text": "identity document also known as swid uh it is a document which proves the",
    "start": "95840",
    "end": "101079"
  },
  {
    "text": "identity of a workload uh it carries the spiffy ID and is used by a workload to",
    "start": "101079",
    "end": "106360"
  },
  {
    "text": "identify itself um for example a workload trying to authenticate uh to to",
    "start": "106360",
    "end": "112439"
  },
  {
    "text": "an API on a web server uh the current supported document types are x509 which",
    "start": "112439",
    "end": "118880"
  },
  {
    "text": "is the format for for public key certificates and jot which is Json web",
    "start": "118880",
    "end": "124640"
  },
  {
    "text": "token and lastly we have the workload API uh which is a set of API specifications for workloads to be able",
    "start": "124640",
    "end": "132040"
  },
  {
    "text": "to securely fetch swits next we'll discuss spy uh which is",
    "start": "132040",
    "end": "139200"
  },
  {
    "text": "short for spiffy runtime environment uh and it it provides production ready implementation of the spiffy",
    "start": "139200",
    "end": "146040"
  },
  {
    "text": "apis uh primarily Spire works on two main processes around workloads uh that",
    "start": "146040",
    "end": "151160"
  },
  {
    "text": "is workload registration and workload attestation registration is a way to",
    "start": "151160",
    "end": "156879"
  },
  {
    "text": "tell Spire how to identify a workload uh and Spire uses that when it's trying to attest a workload uh attestation is a",
    "start": "156879",
    "end": "164640"
  },
  {
    "text": "way for Spire to figure out details regarding who the process requesting an swi is and uses those details to find",
    "start": "164640",
    "end": "171920"
  },
  {
    "text": "the corresponding registration information in order to issue an swid usually workloads use Spire issued",
    "start": "171920",
    "end": "179920"
  },
  {
    "text": "swis to authenticate to other workloads for example Mutual TLS encryption using",
    "start": "179920",
    "end": "185959"
  },
  {
    "text": "x509 swis or bar token based authentication using JW",
    "start": "185959",
    "end": "192799"
  },
  {
    "text": "twids next we'll discuss some details about the Spire architecture and no more",
    "start": "193640",
    "end": "199159"
  },
  {
    "text": "about the components and the apis involved a Spire deployment consists of",
    "start": "199159",
    "end": "204680"
  },
  {
    "text": "a Spire server and one or more Spire agents uh Spire server is primarily",
    "start": "204680",
    "end": "210599"
  },
  {
    "text": "responsible for managing workload registrations and it also acts as a signing authority to distribute workload",
    "start": "210599",
    "end": "217200"
  },
  {
    "text": "identities to Spire agent Spire agent runs on every node on which workloads",
    "start": "217200",
    "end": "223239"
  },
  {
    "text": "run and uh it is primarily responsible for attesting workloads and issuing",
    "start": "223239",
    "end": "229000"
  },
  {
    "text": "identity documents to them via the workload API so typical workflow Inspire can be",
    "start": "229000",
    "end": "235480"
  },
  {
    "text": "described in three main steps we'll start from the top uh firstly registrations are made to Spire server",
    "start": "235480",
    "end": "241959"
  },
  {
    "text": "via the entry API each registration entry would specify which selectors a",
    "start": "241959",
    "end": "247400"
  },
  {
    "text": "workload should have to be able to fetch an identity an example for a selector could",
    "start": "247400",
    "end": "253959"
  },
  {
    "text": "be a specific label on a Docker container or on a kubernetes",
    "start": "253959",
    "end": "259919"
  },
  {
    "text": "pod secondly uh each Spire agent communicates with the server uh via the",
    "start": "259919",
    "end": "265800"
  },
  {
    "text": "agent API uh when the first time an agent starts up uh it authenticates to",
    "start": "265800",
    "end": "271080"
  },
  {
    "text": "the server VI a process called node dat station um during which the server uh",
    "start": "271080",
    "end": "277759"
  },
  {
    "text": "verifies the identity of the node on which the agent is running on once authenticated the agent fetches signed",
    "start": "277759",
    "end": "285160"
  },
  {
    "text": "workload identities from the server and caches them in memory and lastly workloads running on a",
    "start": "285160",
    "end": "292440"
  },
  {
    "text": "node would communicate with the SP agent via the workload API uh agents gather",
    "start": "292440",
    "end": "298520"
  },
  {
    "text": "the selector information for the workload using the workload attestation process and Returns the",
    "start": "298520",
    "end": "305280"
  },
  {
    "text": "workload and identity document from its inmemory cache or by requesting it from the",
    "start": "305280",
    "end": "312320"
  },
  {
    "text": "server the behavior for Spire server and agent can be determined by a variety of",
    "start": "314240",
    "end": "320919"
  },
  {
    "text": "plugins there are different type of types of plugin supported by both server and agents which allows Spire to be",
    "start": "320919",
    "end": "327759"
  },
  {
    "text": "highly extensible and Custom able each plug-in type is a jrpc API",
    "start": "327759",
    "end": "334840"
  },
  {
    "text": "interface and Spire has built in implementations for each type uh Spire",
    "start": "334840",
    "end": "340080"
  },
  {
    "text": "also allows custom implementations for these plug-in types uh by providing a plugin",
    "start": "340080",
    "end": "345479"
  },
  {
    "text": "SDK we are not going to go into detail about each of the plug-in types uh but",
    "start": "345479",
    "end": "350759"
  },
  {
    "text": "I'll highlight a couple of important ones the node attester plugin on the",
    "start": "350759",
    "end": "356800"
  },
  {
    "text": "agent uh gathers nodes identity from from the underlying platform for example",
    "start": "356800",
    "end": "362880"
  },
  {
    "text": "if it's an AWS instance uh the AWS node attested plug-in fetches the instance",
    "start": "362880",
    "end": "368479"
  },
  {
    "text": "identity document from AWS the agent then uses that information as a proof of identity when it's trying",
    "start": "368479",
    "end": "375919"
  },
  {
    "text": "to authenticate to the server the node attester plugin on the server is then",
    "start": "375919",
    "end": "381440"
  },
  {
    "text": "used to validate the nodes proof of identity document presented by the agent",
    "start": "381440",
    "end": "386759"
  },
  {
    "text": "um for example the AWS node attester plugin on the server would call an AWS",
    "start": "386759",
    "end": "391840"
  },
  {
    "text": "API to verify the instance identity document sent by the",
    "start": "391840",
    "end": "397000"
  },
  {
    "text": "agent another important plug-in type is the workload attester plugin uh which is",
    "start": "397000",
    "end": "402759"
  },
  {
    "text": "an agent plugin um it allows the agent to find selector information for a",
    "start": "402759",
    "end": "408080"
  },
  {
    "text": "specific workload an example for this would be the kubernetes workload attester plugin",
    "start": "408080",
    "end": "414520"
  },
  {
    "text": "um which queries the cuet to fetch information about the pod such as",
    "start": "414520",
    "end": "420080"
  },
  {
    "text": "namespace pod label service account Etc and uses it to generate selector",
    "start": "420080",
    "end": "427479"
  },
  {
    "text": "information next we'll go into some details about x509 swits uh so what are",
    "start": "429840",
    "end": "435639"
  },
  {
    "text": "x509 SIDS they are primarily x509 certificates which encode Sid",
    "start": "435639",
    "end": "441080"
  },
  {
    "text": "information following the spiffy specification and x59 swi contains a",
    "start": "441080",
    "end": "447479"
  },
  {
    "text": "hierarchy of certificates where a leaf certificate would represent a workload and a signing certificate would",
    "start": "447479",
    "end": "453800"
  },
  {
    "text": "represent CA certificates that are used to sign those Lea certificates these certificates would",
    "start": "453800",
    "end": "460680"
  },
  {
    "text": "then chain to a trusted route CA which for example could be an upstream",
    "start": "460680",
    "end": "465720"
  },
  {
    "text": "Authority inpire or the Spire server CA certificate itself an important specification of",
    "start": "465720",
    "end": "473440"
  },
  {
    "text": "x509 swid is that all certificates in the swid would contain the spify ID",
    "start": "473440",
    "end": "479759"
  },
  {
    "text": "representing an entity in the U San that is the subject alternate name extension",
    "start": "479759",
    "end": "485639"
  },
  {
    "text": "in x509 for example the uh signing certificate for Spire server would have",
    "start": "485639",
    "end": "491759"
  },
  {
    "text": "its spify ID in the URI sand field and likewise the spify ID for a workload",
    "start": "491759",
    "end": "497120"
  },
  {
    "text": "would similarly be encoded in its uh Leaf",
    "start": "497120",
    "end": "501680"
  },
  {
    "text": "certificate here's an example of the default Leaf certificate format for the",
    "start": "502280",
    "end": "508479"
  },
  {
    "text": "Spire issued x509 is s as we talked earlier it contains the spiffy ID of the",
    "start": "508479",
    "end": "514800"
  },
  {
    "text": "workload in the U sand field the country uh the issuer has country us and",
    "start": "514800",
    "end": "521399"
  },
  {
    "text": "organization as spiffy the subject has country us organization Spire uh and a",
    "start": "521399",
    "end": "528000"
  },
  {
    "text": "unique identifier string which is unique for a workload um it also has uh digital",
    "start": "528000",
    "end": "534320"
  },
  {
    "text": "signature key encipherment uh and key agreement specified in the key uses key",
    "start": "534320",
    "end": "539360"
  },
  {
    "text": "usage field and um the TLs web server and web client authentication specified",
    "start": "539360",
    "end": "545839"
  },
  {
    "text": "in the extended key usage field and lastly it has uh the ca set flag set to",
    "start": "545839",
    "end": "552240"
  },
  {
    "text": "false uh which indicates that it is a leaf certificate and not a certificate",
    "start": "552240",
    "end": "558600"
  },
  {
    "text": "Authority so that concludes the topic I wanted to cover over to Ryan for the",
    "start": "558600",
    "end": "563800"
  },
  {
    "text": "remainder of the presentation followed by demo thanks",
    "start": "563800",
    "end": "569839"
  },
  {
    "text": "I'm Ryan I work at Uber and I'm a maintainer on the Spire project um so chog did a nice job of",
    "start": "569839",
    "end": "578600"
  },
  {
    "text": "describing the current documents that Spire issues for uh workloads and now",
    "start": "578600",
    "end": "585680"
  },
  {
    "text": "like to cover um some challenges that you may face with these identity",
    "start": "585680",
    "end": "591440"
  },
  {
    "text": "documents uh a very common use case that a lot of people have is when you want to",
    "start": "591440",
    "end": "597120"
  },
  {
    "text": "authenticate to some off the shelf or open source software that relies on",
    "start": "597120",
    "end": "602480"
  },
  {
    "text": "specific certificate attributes for authentication uh such as the subject",
    "start": "602480",
    "end": "607560"
  },
  {
    "text": "common name or organization Fields uh some examples of this are",
    "start": "607560",
    "end": "612640"
  },
  {
    "text": "database systems like postgress MySQL and etcd that all support authentication",
    "start": "612640",
    "end": "618600"
  },
  {
    "text": "with mutual TLs but they rely on the subject field whereas spiffy",
    "start": "618600",
    "end": "623720"
  },
  {
    "text": "authentication is based around the spiffy ID in the URI subject alternative name",
    "start": "623720",
    "end": "630279"
  },
  {
    "text": "or you may be integrating with software that authenticates workloads using Json web tokens and require specific claims",
    "start": "630279",
    "end": "637519"
  },
  {
    "text": "other than the standard subject audience and issuer claims another example where Spire",
    "start": "637519",
    "end": "644320"
  },
  {
    "text": "issued certificates may fall short today is for revocation use cases although Spire offers a reliable",
    "start": "644320",
    "end": "651800"
  },
  {
    "text": "control plane for issuing short live certificates there may still be some cases where you want to issue longer",
    "start": "651800",
    "end": "658680"
  },
  {
    "text": "live certificates to workloads using Spire uh consider a workload that",
    "start": "658680",
    "end": "664079"
  },
  {
    "text": "receives an identity on Startup but is not always connected to a Spire agent such as in a serverless or Edge",
    "start": "664079",
    "end": "670600"
  },
  {
    "text": "Computing environment in these cases being able to integrate Spire certificates with",
    "start": "670600",
    "end": "676519"
  },
  {
    "text": "existing revocation infrastructure using ocsp or crls provides value because it",
    "start": "676519",
    "end": "682440"
  },
  {
    "text": "mitigates the impact of an identity being compromised Additionally you may also",
    "start": "682440",
    "end": "688519"
  },
  {
    "text": "have some workloads in your build pipeline that perform code signing using certificates issued by",
    "start": "688519",
    "end": "694639"
  },
  {
    "text": "Spire in order to restrict that only certain workloads have code signing privileges in a trust domain you may",
    "start": "694639",
    "end": "702000"
  },
  {
    "text": "want to set the code signing extended key usage bit in the build workload certificate or perhaps you have more",
    "start": "702000",
    "end": "708680"
  },
  {
    "text": "advanced use cases for certificate path validation and want to enforce path validation policies in your Spire pki",
    "start": "708680",
    "end": "716040"
  },
  {
    "text": "using the policy constraints extension from x509 so the overall question is how can we",
    "start": "716040",
    "end": "722639"
  },
  {
    "text": "solve these kinds of problems related to Identity and authentication without having to build separate certificate",
    "start": "722639",
    "end": "731160"
  },
  {
    "text": "infrastructure well to fill this Gap in the project spy now provides a credential composer plug-in interface",
    "start": "732120",
    "end": "738959"
  },
  {
    "text": "where you can write custom code that influences some of the fields included in SIDS signed by Spire",
    "start": "738959",
    "end": "745240"
  },
  {
    "text": "server all the x509 svids and Jason web token svids issued by Spire server can",
    "start": "745240",
    "end": "751959"
  },
  {
    "text": "be customized using this plug-in interface for x509 SIDS the credential",
    "start": "751959",
    "end": "758320"
  },
  {
    "text": "composer plug-in interface specifically allows you to customize the subject DNS",
    "start": "758320",
    "end": "764320"
  },
  {
    "text": "subject alternative names and any other x509 V3 extension except for the URI",
    "start": "764320",
    "end": "770320"
  },
  {
    "text": "subject alternative name which always needs to contain the workload spiffy ID according to the spiffy",
    "start": "770320",
    "end": "776800"
  },
  {
    "text": "specification and for jot s fids you can set any claim value in the jot apart",
    "start": "776800",
    "end": "782480"
  },
  {
    "text": "from the subject which also needs to Bear the spiffy ID of the workload based on the spiffy",
    "start": "782480",
    "end": "788680"
  },
  {
    "text": "specification now let's see how the credential composer plugin fits into the overall Spire architecture by looking at",
    "start": "790760",
    "end": "796839"
  },
  {
    "text": "a flow where Spire agent requests a workload esid to be signed by the Spire",
    "start": "796839",
    "end": "802519"
  },
  {
    "text": "server credential composer plugins are external server plugins meaning they run",
    "start": "802519",
    "end": "808040"
  },
  {
    "text": "as a separate process collocated with the Spire server they implement the credential",
    "start": "808040",
    "end": "813399"
  },
  {
    "text": "composer grpc protuff interface defined inspires plugin SDK and host the plugin",
    "start": "813399",
    "end": "819440"
  },
  {
    "text": "apis over a local Unix domain socket accessed by the Spire",
    "start": "819440",
    "end": "824959"
  },
  {
    "text": "server Spire server can be configured with multiple credential composer plugins allowing you the flexibility to",
    "start": "824959",
    "end": "831440"
  },
  {
    "text": "chain multiple plugins together and decompose your customizations into discrete plug-in",
    "start": "831440",
    "end": "837759"
  },
  {
    "text": "implementations when a Spire agent requests an esid from Spire server before the server signs the",
    "start": "837759",
    "end": "844519"
  },
  {
    "text": "sfid it will send a grpc request to any configured credential composer plugins",
    "start": "844519",
    "end": "850040"
  },
  {
    "text": "with the spiffy ID for the esid and the set of other attributes it plans to include in the",
    "start": "850040",
    "end": "856440"
  },
  {
    "text": "sfid using this information and potentially relying on plug-in configuration or external data sources",
    "start": "856440",
    "end": "863600"
  },
  {
    "text": "the credential composer plugin decides whether to change the set of sfit attributes that the server will sign",
    "start": "863600",
    "end": "870279"
  },
  {
    "text": "it then Returns the final sfid attribute set to the server to be signed and the server completes the signing operation",
    "start": "870279",
    "end": "875920"
  },
  {
    "text": "and Returns the svid to this buyer",
    "start": "875920",
    "end": "879959"
  },
  {
    "text": "agent now I'd like to show a demo of a real use case of how we can use Spire",
    "start": "881240",
    "end": "886279"
  },
  {
    "text": "along with a credential composer plugin to provide certificates to a mySQL database and a stateless service that",
    "start": "886279",
    "end": "892279"
  },
  {
    "text": "accesses this database and use those certificates to set up a mutual TLS connection between the service and the",
    "start": "892279",
    "end": "898440"
  },
  {
    "text": "my SQL database there are two initial problems that we need to",
    "start": "898440",
    "end": "903680"
  },
  {
    "text": "solve one is that MySQL doesn't know how to authenticate the spiffy identities issued by Spire by",
    "start": "903680",
    "end": "910600"
  },
  {
    "text": "default MySQL authenticates Mutual TLS callar based on the subject common name",
    "start": "910600",
    "end": "915720"
  },
  {
    "text": "field of the client certificate but Spire doesn't set this field by",
    "start": "915720",
    "end": "921000"
  },
  {
    "text": "default the second problem is that MySQL doesn't know how to talk to Spire agent to fetch an",
    "start": "921000",
    "end": "927240"
  },
  {
    "text": "identity I'll walk through how we can solve both of these problems with the credential composer plugin and an innit",
    "start": "927240",
    "end": "934519"
  },
  {
    "text": "container first to set up the environment we register the service in the mySQL database in the Spire",
    "start": "934519",
    "end": "941639"
  },
  {
    "text": "server next Spire agent syncs the entries for the service and the mySQL",
    "start": "941639",
    "end": "946959"
  },
  {
    "text": "database from the Spire server and requests x509 svids for them the SP server calls out to a",
    "start": "946959",
    "end": "954759"
  },
  {
    "text": "credential composer plugin implementation we've authored in this demo to determine whether the x509 SIDS",
    "start": "954759",
    "end": "962000"
  },
  {
    "text": "should have any custom attribute set in them the credential composer plugin we've written in this demo has a simple",
    "start": "962000",
    "end": "968839"
  },
  {
    "text": "implementation that looks at the path of the spiffy ID for the esid to be signed",
    "start": "968839",
    "end": "974120"
  },
  {
    "text": "and when the spiffy ID path matches a configured prefix of/ mysqlclient it",
    "start": "974120",
    "end": "980800"
  },
  {
    "text": "interprets the final path segment of the spiffy ID to be the MySQL username and",
    "start": "980800",
    "end": "986279"
  },
  {
    "text": "it sets this username in the subject common name Fe field of the svid the Spire server then signs and",
    "start": "986279",
    "end": "992480"
  },
  {
    "text": "Returns the svids to the Spire agent which keeps them in its inmemory cache the stateless service will fetch",
    "start": "992480",
    "end": "999839"
  },
  {
    "text": "its identity on Startup from the Spire agent using the ghost Biffy Library the MySQL pod will also fetch",
    "start": "999839",
    "end": "1007360"
  },
  {
    "text": "its identity using an init container it will persist the certificate private key",
    "start": "1007360",
    "end": "1012720"
  },
  {
    "text": "and bundle to an empty dur Tempest volume shared with the MySQL server container in the pod",
    "start": "1012720",
    "end": "1019160"
  },
  {
    "text": "the MySQL server container will then start up and fetch its identity from disk and start listening over",
    "start": "1019160",
    "end": "1026319"
  },
  {
    "text": "TLS we've now shown how we will provide identities to a mySQL database and a service calling the database but what",
    "start": "1026919",
    "end": "1034438"
  },
  {
    "text": "happens when the MySQL databases certificate is going to expire MySQL supports Dynamic reloading",
    "start": "1034439",
    "end": "1041319"
  },
  {
    "text": "of TLS configuration by rereading TLS files from disk but it doesn't know how",
    "start": "1041319",
    "end": "1046480"
  },
  {
    "text": "to get an updated identity from spire to solve this problem we have a side",
    "start": "1046480",
    "end": "1051840"
  },
  {
    "text": "card container running alongside the MySQL server in the same pod that keeps",
    "start": "1051840",
    "end": "1057160"
  },
  {
    "text": "a long lift stream open to the Spire agent over the workload API this container receives updates from",
    "start": "1057160",
    "end": "1063600"
  },
  {
    "text": "Spire agent when a new identity is signed for the MySQL server on receiving an updated identity",
    "start": "1063600",
    "end": "1070400"
  },
  {
    "text": "it saves the new TLS files to the temps volume and triggers a Reload of the TLs",
    "start": "1070400",
    "end": "1075600"
  },
  {
    "text": "configuration in MySQL let's now see this in",
    "start": "1075600",
    "end": "1081200"
  },
  {
    "text": "action going to go ahead and switch over to a live",
    "start": "1081200",
    "end": "1086520"
  },
  {
    "text": "demo",
    "start": "1090679",
    "end": "1093679"
  },
  {
    "text": "okay okay so I've gone ahead and pre-built a kubernetes cluster with all",
    "start": "1099280",
    "end": "1105080"
  },
  {
    "text": "of the components shown in the slide so let's take a look at the current state",
    "start": "1105080",
    "end": "1110600"
  },
  {
    "text": "of the environment so first we can see that we",
    "start": "1110600",
    "end": "1116520"
  },
  {
    "text": "have a Spire deployment here with a Spire server and we have a three node cluster that we're using today which",
    "start": "1116520",
    "end": "1124000"
  },
  {
    "text": "each node in that cluster has a Spire agent running next we can take a look at all",
    "start": "1124000",
    "end": "1130600"
  },
  {
    "text": "of the registration entries that we've created into the Spire",
    "start": "1130600",
    "end": "1135320"
  },
  {
    "text": "server so we can see that there are four entries the first entry corresponds to",
    "start": "1135880",
    "end": "1141919"
  },
  {
    "text": "the stateless service you'll see that the spiffy ID has a path prefix of/ mysqlclient which",
    "start": "1141919",
    "end": "1149320"
  },
  {
    "text": "is the path prefix that our credential composer plugin will be looking for in order to determine whether or not the",
    "start": "1149320",
    "end": "1155159"
  },
  {
    "text": "svid should be treated as a MySQL client",
    "start": "1155159",
    "end": "1160080"
  },
  {
    "text": "certificate we also have two identities registered for the MySQL",
    "start": "1160760",
    "end": "1166440"
  },
  {
    "text": "pod one identity corresponds to the MySQL server and we also have an",
    "start": "1166440",
    "end": "1172080"
  },
  {
    "text": "identity for the sidecar TLS reloader container you may notice that the TLs",
    "start": "1172080",
    "end": "1178039"
  },
  {
    "text": "reloader container spiffy ID also has a prefix of MySQL",
    "start": "1178039",
    "end": "1183320"
  },
  {
    "text": "client we need this because we are going to enable TLS to be required for all",
    "start": "1183320",
    "end": "1189880"
  },
  {
    "text": "connections to my SQL so the TLs reloader itself needs to be a user",
    "start": "1189880",
    "end": "1195880"
  },
  {
    "text": "registered in my SQL and use its own client certificate to authenticate to my",
    "start": "1195880",
    "end": "1201440"
  },
  {
    "text": "SQL finally we have a node Alias registration that Associates all of these workload registrations to our",
    "start": "1201440",
    "end": "1207720"
  },
  {
    "text": "Spire agents next I'll",
    "start": "1207720",
    "end": "1212880"
  },
  {
    "text": "show that we have a MySQL container running in this MySQL zero",
    "start": "1212880",
    "end": "1219120"
  },
  {
    "text": "pod if I describe this pod we can see that it is it has three containers",
    "start": "1219120",
    "end": "1228919"
  },
  {
    "text": "set so there was an init container called TLS bootstrap which we talked about which fetched the initial",
    "start": "1228919",
    "end": "1235159"
  },
  {
    "text": "credentials from Spire server and persisted them to the temp FS flame in the Pod we also have two containers running",
    "start": "1235159",
    "end": "1242559"
  },
  {
    "text": "the MySQL server you see is running the myql image and the TLs reload container",
    "start": "1242559",
    "end": "1248200"
  },
  {
    "text": "which is periodically updating the TLs configuration for myql",
    "start": "1248200",
    "end": "1254400"
  },
  {
    "text": "Server next I'll quickly show the MySQL server",
    "start": "1255760",
    "end": "1260799"
  },
  {
    "text": "configuration you can see that we're requiring TLS to be used for all",
    "start": "1260799",
    "end": "1266000"
  },
  {
    "text": "clients and we set the TLs certificate private key and CA files these are the",
    "start": "1266000",
    "end": "1273279"
  },
  {
    "text": "files that are written onto the temps volume by the TLs uh and bootstrap and TLS reload",
    "start": "1273279",
    "end": "1281520"
  },
  {
    "text": "containers next I'll show a couple users that we created in my",
    "start": "1282200",
    "end": "1289559"
  },
  {
    "text": "so I'm going to grab the MySQL log here and we can see that a couple of create user statements were run when we set up",
    "start": "1289559",
    "end": "1296000"
  },
  {
    "text": "the environment one for the TLs reloader container this uh user requires the",
    "start": "1296000",
    "end": "1303080"
  },
  {
    "text": "client to present a certificate with this subject um as chog mentioned earlier the",
    "start": "1303080",
    "end": "1309799"
  },
  {
    "text": "country us and organization Spire are default properties set by Spire when it signs x509 SIDS and in the credential",
    "start": "1309799",
    "end": "1317679"
  },
  {
    "text": "composer we have added this TLS reloader common name field for the MySQL TLS",
    "start": "1317679",
    "end": "1323159"
  },
  {
    "text": "reloader user we also have a user created for the stateless service which similarly",
    "start": "1323159",
    "end": "1329640"
  },
  {
    "text": "requires the client certificate with matching this",
    "start": "1329640",
    "end": "1335120"
  },
  {
    "text": "string next I'll quickly show the implementation for a credential composer",
    "start": "1337039",
    "end": "1344320"
  },
  {
    "text": "plugin um this is the whole implementation here uh essentially all",
    "start": "1344320",
    "end": "1349480"
  },
  {
    "text": "we do is look at the request sent by Spire server fetch the spiffy ID from",
    "start": "1349480",
    "end": "1354960"
  },
  {
    "text": "the request and specifically look at the path of that request if the path matches a set of",
    "start": "1354960",
    "end": "1362840"
  },
  {
    "text": "configured prefixes which we've configured to be/ mysqlclient for this",
    "start": "1362840",
    "end": "1368320"
  },
  {
    "text": "demo then it interprets the final path component of this Biffy ID to be the MySQL username and it sets the MySQL",
    "start": "1368320",
    "end": "1375799"
  },
  {
    "text": "username in the subject common name and returns that back to Spire server for",
    "start": "1375799",
    "end": "1382200"
  },
  {
    "text": "signing so now let's take a look at how my SQL was bootstrapped using the TLs",
    "start": "1384520",
    "end": "1391120"
  },
  {
    "text": "files that were obtained by the init container I'm going to show the logs from the TLs bootstrap init container",
    "start": "1391120",
    "end": "1399240"
  },
  {
    "text": "and in the logs we print out all the certificates that we able to fetch from the Spire agent workload API so you can",
    "start": "1399240",
    "end": "1406080"
  },
  {
    "text": "see that the MySQL server ident was fetched as well as the TLs reloader",
    "start": "1406080",
    "end": "1411400"
  },
  {
    "text": "identity also assigned to the same pod and we also have the trust bundle for",
    "start": "1411400",
    "end": "1416760"
  },
  {
    "text": "this spire trust domain of example.org that we're using in this demo and we don't log the private key",
    "start": "1416760",
    "end": "1423720"
  },
  {
    "text": "obviously for security reasons um but we do log here that all these files were",
    "start": "1423720",
    "end": "1428799"
  },
  {
    "text": "successfully written to disk so that's how my SQL gets its initial",
    "start": "1428799",
    "end": "1435120"
  },
  {
    "text": "identity now I'll show that we have one pod running in the default name",
    "start": "1435120",
    "end": "1440559"
  },
  {
    "text": "space which is our stateless service that is going to exercise this mySQL database using Mutual",
    "start": "1440559",
    "end": "1447120"
  },
  {
    "text": "TS so this service implements two rest apis a get API on an endpoint called API",
    "start": "1447120",
    "end": "1455600"
  },
  {
    "text": "V1 users which just prints out the contents of a table that we've created in MySQL called users which is very",
    "start": "1455600",
    "end": "1462600"
  },
  {
    "text": "simple I'll show what that looks like here so you can see that we've",
    "start": "1462600",
    "end": "1468360"
  },
  {
    "text": "pre-loaded three users into the database we have a user named Alice Bob and",
    "start": "1468360",
    "end": "1474919"
  },
  {
    "text": "another user named Carol we also have a post API on this",
    "start": "1474919",
    "end": "1480679"
  },
  {
    "text": "service which allows us to create a user I'm going to now create a user named",
    "start": "1480679",
    "end": "1486840"
  },
  {
    "text": "David and we see that that operation was successful if we run the same get API",
    "start": "1486840",
    "end": "1495360"
  },
  {
    "text": "again we now see that the D David user is present in the list of users to prove that this is actually",
    "start": "1495360",
    "end": "1502480"
  },
  {
    "text": "using MySQL and not just printing out um previous state that saved in the",
    "start": "1502480",
    "end": "1508799"
  },
  {
    "text": "service we can look at the MySQL",
    "start": "1508799",
    "end": "1513080"
  },
  {
    "text": "logs so earlier I showed the users that we created in MySQL one of which was",
    "start": "1514520",
    "end": "1520159"
  },
  {
    "text": "this spire MySQL client which is corresponding to the spiffy ID uh of the",
    "start": "1520159",
    "end": "1527000"
  },
  {
    "text": "stateless service that we registered in Spire you'll see that it connected to this database using",
    "start": "1527000",
    "end": "1533440"
  },
  {
    "text": "TLS and it issued a few queries uh corresponding to the API calls that we just issued to the service with curl uh",
    "start": "1533440",
    "end": "1539760"
  },
  {
    "text": "select star from users and then insert and then another select star so that",
    "start": "1539760",
    "end": "1544840"
  },
  {
    "text": "shows that the service is actually successfully connecting to the database over Mutual",
    "start": "1544840",
    "end": "1551639"
  },
  {
    "text": "TLS also show the rotation so in my SQL we have have the",
    "start": "1551679",
    "end": "1557960"
  },
  {
    "text": "TLs reload sidecar container if we print the logs we can",
    "start": "1557960",
    "end": "1563080"
  },
  {
    "text": "see that these certificates that were also fetched by the TLs bootstrap container are also uh fetched from the",
    "start": "1563080",
    "end": "1570480"
  },
  {
    "text": "TLs reload container and updated over time as spy agent pushes new",
    "start": "1570480",
    "end": "1576080"
  },
  {
    "text": "certificates so let's print out the values of these certificates so we can actually read them I'm just going to",
    "start": "1576080",
    "end": "1582760"
  },
  {
    "text": "paste in a short function that makes it more convenient to dump these into SSL",
    "start": "1582760",
    "end": "1588720"
  },
  {
    "text": "open SSL um so first let's look at the MySQL",
    "start": "1588720",
    "end": "1593880"
  },
  {
    "text": "server",
    "start": "1593880",
    "end": "1596399"
  },
  {
    "text": "certificate so you see that the URI subject alternative name matches the registration that we showed earlier in",
    "start": "1599000",
    "end": "1605159"
  },
  {
    "text": "the Spire server and this has a DNS subject alternative name set um to the local",
    "start": "1605159",
    "end": "1613200"
  },
  {
    "text": "cluster um DNS next so let's look at the MySQL",
    "start": "1613200",
    "end": "1620559"
  },
  {
    "text": "client certificate which is used by the TLs reloader container to authenticate",
    "start": "1620559",
    "end": "1627039"
  },
  {
    "text": "itself to the MySQL server",
    "start": "1627039",
    "end": "1630720"
  },
  {
    "text": "process you can see that it has a different spiffy ID in the URI subject alternative name with the MySQL client",
    "start": "1632279",
    "end": "1639320"
  },
  {
    "text": "TLS reloader path you can also see that the subject",
    "start": "1639320",
    "end": "1644480"
  },
  {
    "text": "common name was set in the certificate to be this TLS relo loader user which we created in my",
    "start": "1644480",
    "end": "1650520"
  },
  {
    "text": "SQL finally we can do a quick examination of the trust domain",
    "start": "1650520",
    "end": "1658399"
  },
  {
    "text": "bundle which was saved on disk as well you can see that the subject alternative",
    "start": "1658399",
    "end": "1665159"
  },
  {
    "text": "name contains the trust domain we can also uh visually verify",
    "start": "1665159",
    "end": "1671240"
  },
  {
    "text": "that the subject key identifier of this CA matches the authority key identifier",
    "start": "1671240",
    "end": "1677080"
  },
  {
    "text": "of the other certificates um for the MySQL server in TLS reloader so you can see this subject key identifier is",
    "start": "1677080",
    "end": "1683360"
  },
  {
    "text": "prefixed with 5 ff0 and here we also have the authority key identifier with the same",
    "start": "1683360",
    "end": "1690399"
  },
  {
    "text": "prefix and also here so we can see that this is the actual CA um you would still",
    "start": "1690399",
    "end": "1696880"
  },
  {
    "text": "want to verify the signature but at least uh for demo purposes this kind of shows um it's a real",
    "start": "1696880",
    "end": "1702720"
  },
  {
    "text": "CA and it has the ca bit to true",
    "start": "1702720",
    "end": "1708120"
  },
  {
    "text": "and then lastly we can look at the logs for the stateless service to show that it is also getting updated",
    "start": "1708120",
    "end": "1715720"
  },
  {
    "text": "identities so I will go ahead and print out its",
    "start": "1717399",
    "end": "1722600"
  },
  {
    "text": "certificate and you can see that it has the Spire MySQL client identity with the",
    "start": "1722600",
    "end": "1728320"
  },
  {
    "text": "Spy MySQL client username set in the subject common name note that in this demo we've also",
    "start": "1728320",
    "end": "1734799"
  },
  {
    "text": "created these identities with very very short time to live uh they have like 2",
    "start": "1734799",
    "end": "1740159"
  },
  {
    "text": "minute validity period so they've been rotating in the background since we started this demo um so this shows like",
    "start": "1740159",
    "end": "1747640"
  },
  {
    "text": "this is working stably over time and not just uh once so uh that concludes our",
    "start": "1747640",
    "end": "1755000"
  },
  {
    "text": "demo and with that um we have some links to the source code if you're interested",
    "start": "1755000",
    "end": "1760240"
  },
  {
    "text": "in more of the details um feel free to peruse that and open any issues or poll",
    "start": "1760240",
    "end": "1765559"
  },
  {
    "text": "requests um we've also added some links to the credential composer plugin interface if you're interested in",
    "start": "1765559",
    "end": "1772120"
  },
  {
    "text": "creating your own implementation for uh your SP deployment and there's more",
    "start": "1772120",
    "end": "1777200"
  },
  {
    "text": "context about this plugin on the GitHub issue linked here if you're interested in seeing more about the discussion of",
    "start": "1777200",
    "end": "1783679"
  },
  {
    "text": "uh this component and then uh as always we're available on spiy slack um it's a",
    "start": "1783679",
    "end": "1788799"
  },
  {
    "text": "very active community so feel free to participate um a lot of people ask questions and there's a lot of great support there as well if you have",
    "start": "1788799",
    "end": "1794919"
  },
  {
    "text": "questions and and then here's our GitHub link as well so that's all thank you for your",
    "start": "1794919",
    "end": "1802350"
  },
  {
    "text": "[Applause]",
    "start": "1802350",
    "end": "1808679"
  },
  {
    "text": "time thank you that was really cool a quick question um if you use like uh",
    "start": "1808679",
    "end": "1814120"
  },
  {
    "text": "Spire with ISO can those extra Fields get passed through to um like the",
    "start": "1814120",
    "end": "1819279"
  },
  {
    "text": "sidecar certificates get assigned um like um yeah so I haven't personally",
    "start": "1819279",
    "end": "1826039"
  },
  {
    "text": "used the esto integration but I do know that it does support um Spire as a CA",
    "start": "1826039",
    "end": "1831240"
  },
  {
    "text": "provider uh I don't think there's any restriction on using this plugin andd I",
    "start": "1831240",
    "end": "1836559"
  },
  {
    "text": "think you should be able to use it just like any other SP appointment thanks",
    "start": "1836559",
    "end": "1842519"
  },
  {
    "text": "yep thank you for the demo looks really cool couple questions um first of all",
    "start": "1842519",
    "end": "1847720"
  },
  {
    "text": "for the internal CA do you have support for signing certificate rotation signing certificate rotation",
    "start": "1847720",
    "end": "1855000"
  },
  {
    "text": "yeah yes uh so the the signing certificate is automatically rotated by",
    "start": "1855000",
    "end": "1860080"
  },
  {
    "text": "Spire um so there's a plugin that um we didn't really talk about in this",
    "start": "1860080",
    "end": "1866440"
  },
  {
    "text": "presentation but it's called the Upstream Authority plugin um you can allow you can use that plugin to chain",
    "start": "1866440",
    "end": "1872760"
  },
  {
    "text": "your Spire pki to an upstream CA as well um so it's an interface just like uh the",
    "start": "1872760",
    "end": "1879960"
  },
  {
    "text": "interface we showed with credential composer so you can write your own Plugin or use one of the existing plugins um we we support I think hat",
    "start": "1879960",
    "end": "1887480"
  },
  {
    "text": "Vault um you can write the ca file to disk there's a few options that you have there so yeah Spire does that today cool",
    "start": "1887480",
    "end": "1894919"
  },
  {
    "text": "yeah good to know um also like how how does the agent actually bootstrap to get",
    "start": "1894919",
    "end": "1900240"
  },
  {
    "text": "the initial kind of svds for the workflows like white you know um so chog",
    "start": "1900240",
    "end": "1906960"
  },
  {
    "text": "talked a little bit about the node adastation process so that kind of bootstraps the trust between Spire agent",
    "start": "1906960",
    "end": "1913279"
  },
  {
    "text": "and Spire server um once that initial trust is established the agent gets its own svid from the server and it uses",
    "start": "1913279",
    "end": "1920279"
  },
  {
    "text": "that to create a mutual TLS connection to the server um after that it",
    "start": "1920279",
    "end": "1925559"
  },
  {
    "text": "periodically is trying to sync all of the identities that are available to that host or that node um and then it",
    "start": "1925559",
    "end": "1933159"
  },
  {
    "text": "caches the registration entries that are created and for all those entries it",
    "start": "1933159",
    "end": "1938360"
  },
  {
    "text": "preaches some x509 svids um that it signs from the server so that when the workloads are uh spawned on the host um",
    "start": "1938360",
    "end": "1947519"
  },
  {
    "text": "usually the SIDS are already preached and available I see cool last question",
    "start": "1947519",
    "end": "1953639"
  },
  {
    "text": "so you know if you look at architecture server is kind of a single point fature right you know production like",
    "start": "1953639",
    "end": "1959159"
  },
  {
    "text": "environment there are probably you know multiple servers so how do you manage",
    "start": "1959159",
    "end": "1964600"
  },
  {
    "text": "them and how do you keep them in sync yeah so we support a high availability",
    "start": "1964600",
    "end": "1970159"
  },
  {
    "text": "mode where you can run an active active configuration um so in a production deployment you would definitely want to",
    "start": "1970159",
    "end": "1976200"
  },
  {
    "text": "have multiple in instances of the server uh they all act as their own independent signing authorities with their own Keys",
    "start": "1976200",
    "end": "1983080"
  },
  {
    "text": "um but they can all chain up to the same Upstream Authority um which goes back to your earlier question um so you can",
    "start": "1983080",
    "end": "1989240"
  },
  {
    "text": "chain them all to the same pki uh but they can all actively run independently of each other so if one goes down you",
    "start": "1989240",
    "end": "1996039"
  },
  {
    "text": "hopefully still have other instances that are available I see but you know how do you keep all the users in sync",
    "start": "1996039",
    "end": "2002279"
  },
  {
    "text": "you all of them or they manage different users yeah so they all share the same",
    "start": "2002279",
    "end": "2008000"
  },
  {
    "text": "database there's a backing MySQL or postgress database or SQL white database",
    "start": "2008000",
    "end": "2013200"
  },
  {
    "text": "that they all share I see um sorry one more question so in the Uber like as a",
    "start": "2013200",
    "end": "2018559"
  },
  {
    "text": "global infrastructure I guess so do you have a single CA like a single database or do you actually have each multiple",
    "start": "2018559",
    "end": "2025360"
  },
  {
    "text": "region and each region has its own you know server yeah um we have a so sorry we",
    "start": "2025360",
    "end": "2032760"
  },
  {
    "text": "have about one minute left um yeah so Uber has like multiple deployments of spire because we have we run in multiple",
    "start": "2032760",
    "end": "2040159"
  },
  {
    "text": "public clouds um we run in on Prem um so we have deployments per uh our",
    "start": "2040159",
    "end": "2046559"
  },
  {
    "text": "availability Zone concept so uh that if one zone is unavailable then we have other instances available okay cool",
    "start": "2046559",
    "end": "2053240"
  },
  {
    "text": "thank you yep uh if we're using SP to Mint jots",
    "start": "2053240",
    "end": "2059398"
  },
  {
    "text": "how does the trust bundle get delivered to like we have an authentication header",
    "start": "2059399",
    "end": "2064679"
  },
  {
    "text": "we pass it to the client like how did they EV validate the authentication bundle is that yeah um so Spire server",
    "start": "2064679",
    "end": "2072200"
  },
  {
    "text": "has a bundle endpoint that it exposes as an HTTP endpoint for um use cases like",
    "start": "2072200",
    "end": "2078679"
  },
  {
    "text": "this um there's also a component called oadc Discovery provider provided by um",
    "start": "2078679",
    "end": "2084919"
  },
  {
    "text": "the Spire repo and it publishes out these keys in a oidc compliant way as",
    "start": "2084919",
    "end": "2091320"
  },
  {
    "text": "well yeah hello uh I have a more basic",
    "start": "2091320",
    "end": "2096398"
  },
  {
    "text": "background question question so I guess when you chose a spey Inspire I'm wondering what were the other",
    "start": "2096399",
    "end": "2102800"
  },
  {
    "text": "Alternatives you kind considered like maybe someone could just use some Cloud public Cloud providers offerings or",
    "start": "2102800",
    "end": "2109480"
  },
  {
    "text": "maybe there could be some other alternative um so I'm just one want more",
    "start": "2109480",
    "end": "2114760"
  },
  {
    "text": "about like other options you considered and why you CH specifically choose a PP Inspire yeah so for us we run pretty",
    "start": "2114760",
    "end": "2122480"
  },
  {
    "text": "complex heterogeneous infrastructure um so we run like I said before for in on",
    "start": "2122480",
    "end": "2127880"
  },
  {
    "text": "pram zones in public Cloud um and we've recently changed different public Cloud",
    "start": "2127880",
    "end": "2133440"
  },
  {
    "text": "providers so um we really don't want to lock ourselves into a particular public Cloud identity implementation and we",
    "start": "2133440",
    "end": "2139640"
  },
  {
    "text": "also need to be able to authenticate across all those clouds um so spiffy Inspire we felt like was a really um",
    "start": "2139640",
    "end": "2145920"
  },
  {
    "text": "valuable tool for that um there are other Solutions in the space like C managers one example if you run within a",
    "start": "2145920",
    "end": "2152079"
  },
  {
    "text": "kubernetes environment um there's other tools like hash cor VA has a pki engine",
    "start": "2152079",
    "end": "2158280"
  },
  {
    "text": "um so there's many solutions out there but um we felt like this was kind of the most robust at and has like a pretty",
    "start": "2158280",
    "end": "2164200"
  },
  {
    "text": "scalable system we've been running this staing production for over four years now and uh I can say that's really held",
    "start": "2164200",
    "end": "2171000"
  },
  {
    "text": "up pretty well okay thank you y cool and I think with that we're out of time um",
    "start": "2171000",
    "end": "2177640"
  },
  {
    "text": "if you have any other questions feel free to grab us but thank you very",
    "start": "2177640",
    "end": "2182000"
  },
  {
    "text": "much",
    "start": "2184560",
    "end": "2187560"
  }
]