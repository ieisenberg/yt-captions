[
  {
    "text": "welcome to switching the engine getting some insights into what makes Cuban is run or lease from the DNS perspective or",
    "start": "30",
    "end": "7259"
  },
  {
    "text": "else I mean you all want to go to the after party so we won't dive into everything so who are we",
    "start": "7259",
    "end": "15000"
  },
  {
    "text": "I'm Michael I'm a maintainer at Cardenas I'm running an open source research lab",
    "start": "15000",
    "end": "20789"
  },
  {
    "text": "called collapse and also support companies via wrecker solutions focusing on kubernetes who cloud",
    "start": "20789",
    "end": "27840"
  },
  {
    "text": "Cortinas and with things such as speed based DNS and my name is Jake Sanders",
    "start": "27840",
    "end": "34230"
  },
  {
    "text": "I'm a software engineer working on security and gke here in Seattle so",
    "start": "34230",
    "end": "40649"
  },
  {
    "text": "let's dive into our agender we first wanted to give a bit of background I know there a lot of are a few talk sorry",
    "start": "40649",
    "end": "47879"
  },
  {
    "text": "around Cardenas but we want to set the stage on what we are actually talking about then we will dive into a new",
    "start": "47879",
    "end": "54329"
  },
  {
    "text": "cluster add-on which is called node local which will cache a bit more inside the class err then we have a few",
    "start": "54329",
    "end": "61500"
  },
  {
    "text": "benchmarks we go step by step so we will look into some local benchmarks and then",
    "start": "61500",
    "end": "67950"
  },
  {
    "text": "into cluster benchmarks and then we have one example of occasion which is anecdotal on what might happen with a",
    "start": "67950",
    "end": "74880"
  },
  {
    "text": "switch and in general what you can do with an actual application in a real world scenario the next one is basically",
    "start": "74880",
    "end": "82530"
  },
  {
    "text": "the outlook so what will happen with cárdenas and basically Cardenas and",
    "start": "82530",
    "end": "88290"
  },
  {
    "text": "Cuban Eddy as in the future so basically",
    "start": "88290",
    "end": "94409"
  },
  {
    "text": "the background the primary use for DNS with Cuban Eddie's is services careers you all know",
    "start": "94409",
    "end": "99990"
  },
  {
    "text": "it's basically gluing everything together so in there's the internal use",
    "start": "99990",
    "end": "105509"
  },
  {
    "text": "and the external use we will focus a bit on the external use case especially on our end-to-end tests but everybody knows",
    "start": "105509",
    "end": "113310"
  },
  {
    "text": "that DNS is the address book of the internet so it's connected to database requests remote file send email and sell",
    "start": "113310",
    "end": "120570"
  },
  {
    "text": "it bad so let's dive a bit deeper into the history so we had cube DNS before",
    "start": "120570",
    "end": "128489"
  },
  {
    "text": "and just to prevent the confusion the service the DNS service",
    "start": "128489",
    "end": "133860"
  },
  {
    "text": "inside of communities will still be called cube Dinah's but he will be switched out with cárdenas so what is",
    "start": "133860",
    "end": "140970"
  },
  {
    "text": "cube DNS or what was the old way of doing things it was a bundle made up of",
    "start": "140970",
    "end": "146990"
  },
  {
    "text": "DNS mask which is used as a resolver locally on a lot of Linux distributions",
    "start": "146990",
    "end": "152940"
  },
  {
    "text": "and as a cache Tipitina's was using it as a cache and bundle this together was",
    "start": "152940",
    "end": "159060"
  },
  {
    "text": "Skye DNS it is a go written DNS server and was written by meek and a few other",
    "start": "159060",
    "end": "165270"
  },
  {
    "text": "people so let's dive into what's coordinates so basically the new way of",
    "start": "165270",
    "end": "172350"
  },
  {
    "text": "doing things the actual default way since 1.13 so it's a great foundation",
    "start": "172350",
    "end": "179690"
  },
  {
    "text": "from a design perspective it builds on a good ecosystem it's building up on caddy",
    "start": "179690",
    "end": "186510"
  },
  {
    "text": "which is a go written web server it has a lot of extensibility due to being",
    "start": "186510",
    "end": "192930"
  },
  {
    "text": "based on a middleware and based system so the cache for example is one",
    "start": "192930",
    "end": "199380"
  },
  {
    "text": "plug in we have metrics Prometheus metrics built in and also the Cuban",
    "start": "199380",
    "end": "204750"
  },
  {
    "text": "Eddie's API is just one plug-in of many so why was it built and build again by",
    "start": "204750",
    "end": "213600"
  },
  {
    "text": "meek meek even so anecdotally he wanted to run wanted to have more metrics",
    "start": "213600",
    "end": "221430"
  },
  {
    "text": "inside of his DNS server which is which was at that time a bind based one so",
    "start": "221430",
    "end": "228900"
  },
  {
    "text": "adding a new feature to bind seemed to be really really difficult so instead he",
    "start": "228900",
    "end": "234900"
  },
  {
    "text": "started a new dns server from scratch I mean that what do you do when you want",
    "start": "234900",
    "end": "239970"
  },
  {
    "text": "to have nice-looking stats right we've all thought it so let's dive into the",
    "start": "239970",
    "end": "246870"
  },
  {
    "text": "different protocols that are supported so Cardenas doesn't just support the",
    "start": "246870",
    "end": "252150"
  },
  {
    "text": "base DNS protocols one is basically UDP was what the first iteration it's lossy",
    "start": "252150",
    "end": "259019"
  },
  {
    "text": "and that basically gives a bit of problems down the road the next",
    "start": "259019",
    "end": "264840"
  },
  {
    "text": "iteration was TCP it has connection it's a much better protocol for reliability reasons and we",
    "start": "264840",
    "end": "273270"
  },
  {
    "text": "have two modern ones that are actually specific specified already so they have",
    "start": "273270",
    "end": "278550"
  },
  {
    "text": "a specification and they're used in production the first one is DNS of a TLS",
    "start": "278550",
    "end": "285270"
  },
  {
    "text": "so it basically encrypts all your traffic so it's a bit more private to secure and it isn't fiddled with in the",
    "start": "285270",
    "end": "292140"
  },
  {
    "text": "paths in between the second one is DNS over HTTPS which is used for example can",
    "start": "292140",
    "end": "300390"
  },
  {
    "text": "be used by Google Google's Public DNS or CloudFlare Firefox recently switched to",
    "start": "300390",
    "end": "306690"
  },
  {
    "text": "using it by default to provide better privacy and encryption and one reason",
    "start": "306690",
    "end": "311790"
  },
  {
    "text": "why it's providing better privacy is it's using the default four four three port and therefore it makes this DNS",
    "start": "311790",
    "end": "318750"
  },
  {
    "text": "traffic and normal web traffic so you can't see which you can't tell the",
    "start": "318750",
    "end": "324210"
  },
  {
    "text": "difference the next one is G RPC which isn't specified yet it's a proof of",
    "start": "324210",
    "end": "330660"
  },
  {
    "text": "concept you could say and we'll see how that helps in the future so in addition",
    "start": "330660",
    "end": "336330"
  },
  {
    "text": "to becoming the default cluster name server in 113 another feature related to core DNS was also introduced this time",
    "start": "336330",
    "end": "344640"
  },
  {
    "text": "it is actually no local caching which will go on to solve many problems for",
    "start": "344640",
    "end": "349830"
  },
  {
    "text": "you guys hopefully so if you leave here feeling like feeling like your days made please.thank Pahlavi through ramesh she",
    "start": "349830",
    "end": "356670"
  },
  {
    "text": "did the job of going through the whole kept process iterating on the design merging the pull requests getting this",
    "start": "356670",
    "end": "362580"
  },
  {
    "text": "to you guys it's all about community and she is one of them so just some",
    "start": "362580",
    "end": "368310"
  },
  {
    "text": "background info on the problem itself DNS is really a child of the 80s and 70s",
    "start": "368310",
    "end": "373980"
  },
  {
    "text": "and 80s and there are lots of things that date it as such I'd like to take you on a journey through time back back",
    "start": "373980",
    "end": "381240"
  },
  {
    "text": "to the time when the internet was just a bunch of telephones kind of yelling at each other the phones kind of sucked",
    "start": "381240",
    "end": "386700"
  },
  {
    "text": "most of the things that you talk about weird stuff like TPS reports and nuclear codes you know nothing too interesting",
    "start": "386700",
    "end": "392270"
  },
  {
    "text": "and there weren't really any sort of high in high performance you know",
    "start": "392270",
    "end": "397470"
  },
  {
    "text": "latency sensitive applications available yet you know most addresses didn't really change all that often so all of the",
    "start": "397470",
    "end": "405280"
  },
  {
    "text": "decisions made back then actually made a lot of sense at the time but times arrow moves ever forward and so do the",
    "start": "405280",
    "end": "411700"
  },
  {
    "text": "requirements of this critical abstraction in case in point kubernetes adoption kind of took off and some old",
    "start": "411700",
    "end": "419080"
  },
  {
    "text": "decisions have not scaled to modern uses for example in the original DNS RFC's",
    "start": "419080",
    "end": "425350"
  },
  {
    "text": "ten thirty four and ten thirty five they specify the implementation should generally try and prioritize overall",
    "start": "425350",
    "end": "431710"
  },
  {
    "text": "network load over you know performance or availability meaning that UDP should",
    "start": "431710",
    "end": "436780"
  },
  {
    "text": "be fir preferred over connection based schemes like TCP and that retransmission",
    "start": "436780",
    "end": "441940"
  },
  {
    "text": "intervals should be generous and I'm sure that there are several people out there that see that five seconds and you know get just a little triggered because",
    "start": "441940",
    "end": "449050"
  },
  {
    "text": "that is actually a very common thing and that's part of the impetus behind this change speaking of the 70s and 80s UNIX",
    "start": "449050",
    "end": "457150"
  },
  {
    "text": "and Lib C followed the recommendations of the specification very faithfully and the rest is kind of history you know",
    "start": "457150",
    "end": "462400"
  },
  {
    "text": "many clients will still directly or indirectly depend on Lib C or its behavior it'll depend on the",
    "start": "462400",
    "end": "467710"
  },
  {
    "text": "specification or defaults of the resolver configuration so these decisions have really propagated to the",
    "start": "467710",
    "end": "472870"
  },
  {
    "text": "present day but even when DNS clients have the ability to force DNS over TCP that",
    "start": "472870",
    "end": "479020"
  },
  {
    "text": "configuration may not be easily configurable at runtime so practically speaking many applications are just",
    "start": "479020",
    "end": "484750"
  },
  {
    "text": "going to be susceptible to these you know timeouts on failed lookups and especially unlucky victims might have to",
    "start": "484750",
    "end": "490330"
  },
  {
    "text": "retry over and over and over and over and just you know very bad day all agencies these matters are severely",
    "start": "490330",
    "end": "497289"
  },
  {
    "text": "aggravated by the way that kubernetes services are implemented including a cluster DNS itself when cluster IPS are",
    "start": "497289",
    "end": "503440"
  },
  {
    "text": "resolved to a specific pod IP the net filter Suites contract table becomes a critical bottleneck and single point of",
    "start": "503440",
    "end": "510100"
  },
  {
    "text": "failure for lookups directed to the cluster DNS you know those that you know are clustered local addresses this is",
    "start": "510100",
    "end": "517180"
  },
  {
    "text": "partly due to the fact that Linux installations normally limit the maximum number of entries in this contract table",
    "start": "517180",
    "end": "522370"
  },
  {
    "text": "to something that you know might be classically reasonable back when I make a gigabyte was you know unthinkable",
    "start": "522370",
    "end": "528089"
  },
  {
    "text": "usually it you know to the sixteen and then once that",
    "start": "528089",
    "end": "533350"
  },
  {
    "text": "limit is reach extra packets or just simply dropped on the floor so if you ever like if you ever run into",
    "start": "533350",
    "end": "540490"
  },
  {
    "text": "this situation you're definitely gonna want to look in your kernel logs and see if you have one of these net filter",
    "start": "540490",
    "end": "546000"
  },
  {
    "text": "table fools packet loss that kind of thing also unlike TCP UDP is connectionless",
    "start": "546000",
    "end": "551440"
  },
  {
    "text": "and doesn't explicitly close a connection which means that contract entries for you to be connections get",
    "start": "551440",
    "end": "558940"
  },
  {
    "text": "assisted for persisted for way longer than they're normally useful and",
    "start": "558940",
    "end": "564220"
  },
  {
    "text": "furthermore there are races in the kernel itself in the code that actually generates these D net entries to you",
    "start": "564220",
    "end": "570940"
  },
  {
    "text": "know route packets to and from individual pods in the service",
    "start": "570940",
    "end": "577170"
  },
  {
    "text": "this causes contention if there are simultaneous requests from the same IP import resulting in one or more packets",
    "start": "577170",
    "end": "585640"
  },
  {
    "text": "being dropped that way as well even you know independent of the table itself being full unfortunately many clients",
    "start": "585640",
    "end": "592090"
  },
  {
    "text": "will also paralyze the DNS requests for separate record types such as those for ipv4 and ipv6 and then finally if you",
    "start": "592090",
    "end": "599920"
  },
  {
    "text": "have a bunch of entries configured in your search path as is often the case in our pods failed lookups will keep",
    "start": "599920",
    "end": "605710"
  },
  {
    "text": "looking up down every entry in the search path so every time you search for a domain that doesn't exist you end up",
    "start": "605710",
    "end": "611230"
  },
  {
    "text": "with a multiplicity of these entries that are just garbage what this all",
    "start": "611230",
    "end": "616960"
  },
  {
    "text": "means practically is that you as a service owner are left holding the bag for OPIC failures that often completely",
    "start": "616960",
    "end": "621970"
  },
  {
    "text": "defined it bugging drop packets in DNS timeouts usually happen wait at the bottom of the stack you know in the kernel itself and are",
    "start": "621970",
    "end": "628180"
  },
  {
    "text": "often obscured by higher level programming abstractions if you don't really know about these default",
    "start": "628180",
    "end": "634060"
  },
  {
    "text": "behaviors and implementation details you're liable to end up on a bunch of wild-goose chases and you know setting",
    "start": "634060",
    "end": "639160"
  },
  {
    "text": "off pagers and you know just not having a good time but I'd also like to know",
    "start": "639160",
    "end": "644680"
  },
  {
    "text": "that this isn't a problem that's specific to Cooper Nettie's it's actually existed in the wild for quite a",
    "start": "644680",
    "end": "649720"
  },
  {
    "text": "while you know very often for other previous implementations of dns for exactly the same reasons and I guess",
    "start": "649720",
    "end": "657700"
  },
  {
    "text": "there's you know now is the time but I have good news guys and gals and non-binary pals the future is now",
    "start": "657700",
    "end": "666370"
  },
  {
    "text": "a note local cash is the minimal instance of core DNS which gets instantiated on each node that acts is",
    "start": "666370",
    "end": "672670"
  },
  {
    "text": "not just a cache but also a TCP forwarding proxy to both the cluster DNS and public name servers this like I said",
    "start": "672670",
    "end": "680110"
  },
  {
    "text": "this is an optional feature that was introduced in 113 at the same time that Cardenas was made the default name",
    "start": "680110",
    "end": "686020"
  },
  {
    "text": "server cluster name server so particularly adventurous Souls can take the plunge at their earliest convenience",
    "start": "686020",
    "end": "691480"
  },
  {
    "text": "because I know all of you always run at edge all the time by leveraging TCP persisting the connection and avoiding",
    "start": "691480",
    "end": "698290"
  },
  {
    "text": "contract altogether for connections between pods on a node and the node local cache pretty much all of these",
    "start": "698290",
    "end": "705610"
  },
  {
    "text": "issues related to contract entries and packet losses are avoided or completely and I mean it eliminated and as a bonus",
    "start": "705610",
    "end": "712120"
  },
  {
    "text": "all of the other advantages associated with Cordy and s are available including node local DNS metrics so here's just",
    "start": "712120",
    "end": "719529"
  },
  {
    "text": "like a diagram of how the how the request flow works with a node liquid cash request from a client pod will go",
    "start": "719529",
    "end": "726490"
  },
  {
    "text": "into the cache and either cache hit will happen or cache miss and on the event of",
    "start": "726490",
    "end": "732700"
  },
  {
    "text": "a cache miss the request will either be routed to the cluster DNS or to your favorite public name server that is",
    "start": "732700",
    "end": "740430"
  },
  {
    "text": "specified in the resolver configuration you know in whatever way you have done so but just as a sanity check just to",
    "start": "740430",
    "end": "748720"
  },
  {
    "text": "prove that this actually works let's go through a few benchmarks just for this first one I created this low generator",
    "start": "748720",
    "end": "755920"
  },
  {
    "text": "that basically looked up normal a records for like the 10,000 most popular website it's kind of a toy application",
    "start": "755920",
    "end": "762910"
  },
  {
    "text": "but I also used the TC utility in order to drop packets at a certain rate and",
    "start": "762910",
    "end": "768880"
  },
  {
    "text": "just like observe the effect that it had on on low cups just between localhost",
    "start": "768880",
    "end": "774880"
  },
  {
    "text": "and the public name server as you can see UDP is just like slightly more",
    "start": "774880",
    "end": "780279"
  },
  {
    "text": "performant than TCP in ideal conditions but as soon as a network at Network shop",
    "start": "780279",
    "end": "785980"
  },
  {
    "text": "starts happening UDP rapidly falls behind and you rapidly start seeing you know longer average latencies and huge",
    "start": "785980",
    "end": "793540"
  },
  {
    "text": "tail latency and if you're a service owner that cares about p99 you know you",
    "start": "793540",
    "end": "798910"
  },
  {
    "text": "to have those nines this is gonna ruin your day because you know you're just not going to get them you know as you",
    "start": "798910",
    "end": "804940"
  },
  {
    "text": "can see if you're if you only need 99 percent availability then you're okay until you know one percent of packets",
    "start": "804940",
    "end": "812080"
  },
  {
    "text": "just go missing I guess but additionally even if even if you aren't having a ton",
    "start": "812080",
    "end": "817600"
  },
  {
    "text": "of packet loss you can see the TCP connections will generally have more consistently lower latency x' than UDP",
    "start": "817600",
    "end": "825880"
  },
  {
    "text": "which is just sort of a bit more unpredictable on to a cluster DNS",
    "start": "825880",
    "end": "832810"
  },
  {
    "text": "benchmarking and this is another huge thanks christow have her from infobox who actually did this work when core DNS",
    "start": "832810",
    "end": "838870"
  },
  {
    "text": "was made available and 111 in order to verify that it was a good solution for",
    "start": "838870",
    "end": "844420"
  },
  {
    "text": "the cluster DNS itself what they did what he did was he ran the numerous",
    "start": "844420",
    "end": "851770"
  },
  {
    "text": "kubernetes scaling benchmarks that happen when you integrate a PR you know",
    "start": "851770",
    "end": "856990"
  },
  {
    "text": "with flat with several thousand cholesterol esters in air pods and",
    "start": "856990",
    "end": "863080"
  },
  {
    "text": "services and then also added the memory Delta that was observed when hitting",
    "start": "863080",
    "end": "868990"
  },
  {
    "text": "each both core DNS and cube DNS at their highest QPS so in effect you can see",
    "start": "868990",
    "end": "876340"
  },
  {
    "text": "that under under high strain and in large clusters or DNS will always have a",
    "start": "876340",
    "end": "882370"
  },
  {
    "text": "low lower baseline overhead and the amount of memory that it consumes will also grow at a slightly lower rate than",
    "start": "882370",
    "end": "889360"
  },
  {
    "text": "cube DNS so in this regard it's just like a strictly better alternative and",
    "start": "889360",
    "end": "895450"
  },
  {
    "text": "not only is not only does it grow at a lower rate it only requires a single pod rather than the three or more pods that",
    "start": "895450",
    "end": "901780"
  },
  {
    "text": "cube DNS has are requires currently additionally what the amount of requests",
    "start": "901780",
    "end": "909580"
  },
  {
    "text": "that core DNS can actually serve is roughly comparable to cube d n s 4",
    "start": "909580",
    "end": "915220"
  },
  {
    "text": "cluster internal lookups it's just like 10% less QPS you know available for",
    "start": "915220",
    "end": "922390"
  },
  {
    "text": "cluster internal but similar Layton sees however for cluster external lookups you",
    "start": "922390",
    "end": "927940"
  },
  {
    "text": "can see the core DNS has a nearly three times advantage and of GPS and in latency okay",
    "start": "927940",
    "end": "936529"
  },
  {
    "text": "so let's jump into the application so local benchmarks and cluster benchmarks",
    "start": "936529",
    "end": "943819"
  },
  {
    "text": "in terms are really interesting but I mean totally all care about is the application itself so how would that",
    "start": "943819",
    "end": "951079"
  },
  {
    "text": "affect a specific application to basically set the stage for real-world benchmark which needs a lot of traffic",
    "start": "951079",
    "end": "959899"
  },
  {
    "text": "so we needed to find a nice project or application that actually needs a lot of",
    "start": "959899",
    "end": "965569"
  },
  {
    "text": "requests so let's look into what we use so our",
    "start": "965569",
    "end": "970850"
  },
  {
    "text": "application is text direct which is dns-based redirect engine which stores",
    "start": "970850",
    "end": "977109"
  },
  {
    "text": "basically all the data for each redirect in a text record in your name server or",
    "start": "977109",
    "end": "984109"
  },
  {
    "text": "in your domain registrar and basically I mean we'll see you to keep the control",
    "start": "984109",
    "end": "989119"
  },
  {
    "text": "of your entry point and your data what that basically makes it makes happen is",
    "start": "989119",
    "end": "994639"
  },
  {
    "text": "that the instance that does the redirect is completely stateless on the other",
    "start": "994639",
    "end": "999769"
  },
  {
    "text": "hand for each request there will also be a request to DNS to fetch the data this",
    "start": "999769",
    "end": "1006009"
  },
  {
    "text": "can be cached so it's not bad problematic but it gives us the ability to basically get a lot of DNS requests",
    "start": "1006009",
    "end": "1012519"
  },
  {
    "text": "from one single application which also sort of is more in the real-world",
    "start": "1012519",
    "end": "1017610"
  },
  {
    "text": "application space so text direct is open-source based it's based on caddy so",
    "start": "1017610",
    "end": "1023470"
  },
  {
    "text": "it's just a simple simple plugin and we're trying to enable you to run your",
    "start": "1023470",
    "end": "1030399"
  },
  {
    "text": "own redirect or vanity well Shana so let's look into how the",
    "start": "1030399",
    "end": "1037329"
  },
  {
    "text": "request flow for texture it works so we're a Cuban Aires fans humanities",
    "start": "1037329",
    "end": "1043808"
  },
  {
    "text": "we look at Cuban and said open source software drugs because we know that's true so we enter that in the browser as",
    "start": "1043809",
    "end": "1051100"
  },
  {
    "text": "always the browser would look up okay which server do we actually need to contact for that so it will look up an A",
    "start": "1051100",
    "end": "1057909"
  },
  {
    "text": "or cname record for combination or open source software or drugs and then the request comes into the",
    "start": "1057909",
    "end": "1065360"
  },
  {
    "text": "instance the techs erect instance which is by default as we said completely stateless so where does the data come",
    "start": "1065360",
    "end": "1072110"
  },
  {
    "text": "from it actually uses the model of the underscore which is used for services",
    "start": "1072110",
    "end": "1077740"
  },
  {
    "text": "usually so it doesn't collide whether I can redirect sub-domain or something so",
    "start": "1077740",
    "end": "1082850"
  },
  {
    "text": "this day the instance looks up a text record on underscore underscore redirect",
    "start": "1082850",
    "end": "1089810"
  },
  {
    "text": "that opens the cuban aerosol open-source software or drugs and we see an example",
    "start": "1089810",
    "end": "1095750"
  },
  {
    "text": "of how such a record would look so we basically have a version to make it backwards comparable the type which is",
    "start": "1095750",
    "end": "1103520"
  },
  {
    "text": "host so that's just the easiest type that might happen it's usually used to",
    "start": "1103520",
    "end": "1109100"
  },
  {
    "text": "redirect the root of such as examples that come to some septum a which can",
    "start": "1109100",
    "end": "1114980"
  },
  {
    "text": "then be linked to your cname so that some providers solve the differently",
    "start": "1114980",
    "end": "1121460"
  },
  {
    "text": "which isn't conforming with a standard it's sometimes called like an a named record where they do that on the fly but",
    "start": "1121460",
    "end": "1127970"
  },
  {
    "text": "we're conformed with the text basically with a DNS standard so now that",
    "start": "1127970",
    "end": "1133910"
  },
  {
    "text": "everything happened it will be a transparent redirect to Cuba meracydia",
    "start": "1133910",
    "end": "1140320"
  },
  {
    "text": "so let's set that let's see what the different setups are so we want to test",
    "start": "1140770",
    "end": "1146330"
  },
  {
    "text": "different things so we were the first one to compare what's the performance or",
    "start": "1146330",
    "end": "1151760"
  },
  {
    "text": "real-world performance for kube DNS so that we have the old data basically so",
    "start": "1151760",
    "end": "1157370"
  },
  {
    "text": "cooped in s what we do is basically Texas erect is we're just running in the cluster so we used all the different",
    "start": "1157370",
    "end": "1163370"
  },
  {
    "text": "cluster services so we're using a service IP we have the overhead of a part we have all the over hats you would",
    "start": "1163370",
    "end": "1170000"
  },
  {
    "text": "have running an application inside of Cuba Nerys so that might make it much",
    "start": "1170000",
    "end": "1175310"
  },
  {
    "text": "more usable for you as like an anecdotal benchmark so what happens before or what",
    "start": "1175310",
    "end": "1182420"
  },
  {
    "text": "happened before with Cuba DNS the application would send a UDP request",
    "start": "1182420",
    "end": "1187520"
  },
  {
    "text": "over the wire so it might run into packet drops tier cube DNS which then",
    "start": "1187520",
    "end": "1193490"
  },
  {
    "text": "does a request to the upstream DNS server in our case we just use the Google",
    "start": "1193490",
    "end": "1199190"
  },
  {
    "text": "public one but usually it depends on your cloud provider it could be at CD resolve that gets us or your company dns",
    "start": "1199190",
    "end": "1207200"
  },
  {
    "text": "resolver whatever fits so the new way of doing things as we've learned is using",
    "start": "1207200",
    "end": "1214910"
  },
  {
    "text": "cárdenas inside your cluster so we're still sending UDP over the wire so we",
    "start": "1214910",
    "end": "1220070"
  },
  {
    "text": "still have a lossy connection it upgrades and it has a cache so that's",
    "start": "1220070",
    "end": "1225140"
  },
  {
    "text": "similar but we learn it has better performance and we will see that in the bench fronts later well it gets",
    "start": "1225140",
    "end": "1232430"
  },
  {
    "text": "interesting is the cluster read on node local so we want to test a few things",
    "start": "1232430",
    "end": "1240430"
  },
  {
    "text": "here we are basically sending UDP so your application still doesn't need to",
    "start": "1240430",
    "end": "1245990"
  },
  {
    "text": "know about TCP base DNS or any upgrade of protocols it can basically be a",
    "start": "1245990",
    "end": "1251540"
  },
  {
    "text": "legacy application only supporting DNS on UDP but the difference here is it's",
    "start": "1251540",
    "end": "1257450"
  },
  {
    "text": "running as a daemon set on your specific host so you P only goes over local host",
    "start": "1257450",
    "end": "1262970"
  },
  {
    "text": "which is usually not as lossy as your cloud provider so the there are two",
    "start": "1262970",
    "end": "1269960"
  },
  {
    "text": "different modes to that node local can cache or it can't or it doesn't cache so",
    "start": "1269960",
    "end": "1275270"
  },
  {
    "text": "in this case we test both but what it always does is it upgrades the connection to TCP and the good thing",
    "start": "1275270",
    "end": "1282920"
  },
  {
    "text": "about having or controlling both the client and the server which in both cases is cárdenas the node look was just",
    "start": "1282920",
    "end": "1290270"
  },
  {
    "text": "a bit more minimalistic is that we can you reuse connections so instead of opening one connection per request we",
    "start": "1290270",
    "end": "1297380"
  },
  {
    "text": "will just open a few and reuse these so the TCP overhead is almost minimal so",
    "start": "1297380",
    "end": "1305290"
  },
  {
    "text": "what else can we do so what happens in big clusters is you have your usual",
    "start": "1305290",
    "end": "1310960"
  },
  {
    "text": "5,000 server cluster as you are running hopefully so what happens is that you",
    "start": "1310960",
    "end": "1317150"
  },
  {
    "text": "have two or three nodes that actually host the core Dinah's instance and all",
    "start": "1317150",
    "end": "1322730"
  },
  {
    "text": "the external requests go to these these cluster servers and then spam your",
    "start": "1322730",
    "end": "1328370"
  },
  {
    "text": "upstream DNS server from one or two single a piece which could result which actually happened in our",
    "start": "1328370",
    "end": "1335060"
  },
  {
    "text": "case we spammed Google Public DNS as much that they basically blocked us so",
    "start": "1335060",
    "end": "1342110"
  },
  {
    "text": "that results really in a lot of drop packets so we don't want to do that again so note local has the option to",
    "start": "1342110",
    "end": "1350150"
  },
  {
    "text": "split traffic between internal and cluster external and basically is",
    "start": "1350150",
    "end": "1355340"
  },
  {
    "text": "sending all the internal traffic still to the central core DNS instance but every external request is directly",
    "start": "1355340",
    "end": "1362150"
  },
  {
    "text": "routed from the node where it was created to the upstream DNS server",
    "start": "1362150",
    "end": "1367280"
  },
  {
    "text": "basically spreading out your external DNS lookups over the whole cluster which makes it much much more reliable and",
    "start": "1367280",
    "end": "1373310"
  },
  {
    "text": "much much more performant and the last thing because that's all good and well",
    "start": "1373310",
    "end": "1380420"
  },
  {
    "text": "but inducing failure is always great and having a bit of cares in benchmarks is",
    "start": "1380420",
    "end": "1386120"
  },
  {
    "text": "always awesome so we had a really reliable network so we ran on gke just",
    "start": "1386120",
    "end": "1393440"
  },
  {
    "text": "as a side note which we tried to induce a lot like with running through multiple",
    "start": "1393440",
    "end": "1399650"
  },
  {
    "text": "services or something but there were just not enough UDP to pack droplets drop packets so we had a small gremlin",
    "start": "1399650",
    "end": "1407380"
  },
  {
    "text": "that might actually happen that it's in your network already or in your cloud provider and it's dropping packets",
    "start": "1407380",
    "end": "1413180"
  },
  {
    "text": "happily without actually you having to deploy something extra so we deployed it and it did a small rate of pack drop its",
    "start": "1413180",
    "end": "1421600"
  },
  {
    "text": "drop packet sensory and basically we send from the application all over the",
    "start": "1421600",
    "end": "1427850"
  },
  {
    "text": "wire UDP and then dropped around 1% of package or a half percent of packet and",
    "start": "1427850",
    "end": "1434120"
  },
  {
    "text": "then moved into core DNS so now we know",
    "start": "1434120",
    "end": "1440900"
  },
  {
    "text": "what the sample setup was but what's the results like we want to know what were",
    "start": "1440900",
    "end": "1446570"
  },
  {
    "text": "the numbers so as you can see here we have six different test setups the first",
    "start": "1446570",
    "end": "1452690"
  },
  {
    "text": "one in blue is the UDP over the wire with cube DNS so as decent performance",
    "start": "1452690",
    "end": "1459920"
  },
  {
    "text": "and not a lot of Taylor we will have a tell latency graph later",
    "start": "1459920",
    "end": "1465200"
  },
  {
    "text": "which basically gives you a bit better understanding of what talents you might",
    "start": "1465200",
    "end": "1470810"
  },
  {
    "text": "make or might happen to your application the second one in red is basically the",
    "start": "1470810",
    "end": "1477110"
  },
  {
    "text": "new set up for you which is using Cardenas as the central DNS instance and",
    "start": "1477110",
    "end": "1482930"
  },
  {
    "text": "we see a lot better performance so we are already upgrading your DNS by",
    "start": "1482930",
    "end": "1490370"
  },
  {
    "text": "default to be more performant and more reliable and now we enter the node local",
    "start": "1490370",
    "end": "1497480"
  },
  {
    "text": "set ups so what is actually deployed when you use the cluster note note local",
    "start": "1497480",
    "end": "1504110"
  },
  {
    "text": "cluster ad on right now with 1.13 it will cache automatically it will send",
    "start": "1504110",
    "end": "1510500"
  },
  {
    "text": "all internal traffic to coordinates and then will spread up the load of all",
    "start": "1510500",
    "end": "1516470"
  },
  {
    "text": "external class cluster requests right on your notes so it will use the",
    "start": "1516470",
    "end": "1522020"
  },
  {
    "text": "configuration on at cVTC slash hosts results sorry",
    "start": "1522020",
    "end": "1528500"
  },
  {
    "text": "slash resolve to basically figure out which upstream provider to use in the",
    "start": "1528500",
    "end": "1533780"
  },
  {
    "text": "different cloud providers that's usually like an internal cluster DNS so that's pretty fast so we can see we're adding",
    "start": "1533780",
    "end": "1541460"
  },
  {
    "text": "with node local we're adding an different new application we inject something in the path so we have a bit",
    "start": "1541460",
    "end": "1548210"
  },
  {
    "text": "worst performance without a cache we're still upgrading the connection so we make it a bit more reliable but we add",
    "start": "1548210",
    "end": "1555050"
  },
  {
    "text": "latency so we can see in yellow that the performance is not as decent as before",
    "start": "1555050",
    "end": "1560480"
  },
  {
    "text": "we are actually a bit worse than cube DNS so with the cache that improves",
    "start": "1560480",
    "end": "1567950"
  },
  {
    "text": "dramatically and if we now look at the orange one which is adding a cache and",
    "start": "1567950",
    "end": "1575180"
  },
  {
    "text": "spreading out the load we are much much faster overall interesting enough",
    "start": "1575180",
    "end": "1582530"
  },
  {
    "text": "because we're looking at nothing all right so because we're looking at the the",
    "start": "1582530",
    "end": "1590030"
  },
  {
    "text": "performance UDP drop drop packets won't yet show up so",
    "start": "1590030",
    "end": "1595610"
  },
  {
    "text": "our graph for the chaos doesn't really show anything interesting but if we look",
    "start": "1595610",
    "end": "1601700"
  },
  {
    "text": "at the tag latency we can see the difference so the teal color is",
    "start": "1601700",
    "end": "1608270"
  },
  {
    "text": "basically our carriers drop packets so we can see that a lot of tail agencies",
    "start": "1608270",
    "end": "1613910"
  },
  {
    "text": "at it and we can completely remove that tail latency by using a local cash",
    "start": "1613910",
    "end": "1620300"
  },
  {
    "text": "either node local or just upgrading the connection so if you have problems with that that might be the solution for you",
    "start": "1620300",
    "end": "1626870"
  },
  {
    "text": "and we can see and talk bad what happens with that out of the talk and let's dive",
    "start": "1626870",
    "end": "1634160"
  },
  {
    "text": "into what that basically means not just from a numbers perspective but as what",
    "start": "1634160",
    "end": "1640520"
  },
  {
    "text": "we learned from basically this whole exercise so we have to say it always",
    "start": "1640520",
    "end": "1647240"
  },
  {
    "text": "depends on your specific use case so is it only internal traffic is it only",
    "start": "1647240",
    "end": "1654050"
  },
  {
    "text": "external look at what's your latency need do you really need that tail",
    "start": "1654050",
    "end": "1661340"
  },
  {
    "text": "latency gone or is it something that you don't care about so your mileage may vary so a nice thing that also came up",
    "start": "1661340",
    "end": "1670520"
  },
  {
    "text": "in the benchmarks was that the search path as we said amplifies a lot of bad",
    "start": "1670520",
    "end": "1677390"
  },
  {
    "text": "behavior so our application connects to a DNS server and it was speaking out to",
    "start": "1677390",
    "end": "1685070"
  },
  {
    "text": "the DNS server of a local host name so we didn't use the local IP address we",
    "start": "1685070",
    "end": "1690500"
  },
  {
    "text": "used local host what happens was with go and Alpine by default it doesn't look at",
    "start": "1690500",
    "end": "1697010"
  },
  {
    "text": "at CDE hosts and therefore doesn't resolve the local host on within the pot",
    "start": "1697010",
    "end": "1704270"
  },
  {
    "text": "what happens is on each request it wasn't just our request that we wanted",
    "start": "1704270",
    "end": "1710240"
  },
  {
    "text": "to happen and we're sending a million requests in like 10 minutes we were seeing about 6 million more and were",
    "start": "1710240",
    "end": "1717830"
  },
  {
    "text": "like okay something is wrong here let's deep dive and we actually found it",
    "start": "1717830",
    "end": "1724730"
  },
  {
    "text": "out with TCP dump so what happened was that locos wasn't",
    "start": "1724730",
    "end": "1730910"
  },
  {
    "text": "resolved in the pot so require basically tried the whole search path so it wasn't",
    "start": "1730910",
    "end": "1735980"
  },
  {
    "text": "just one request that was failing it was six different ones that were failing and in our case we were still using cube DNS",
    "start": "1735980",
    "end": "1744230"
  },
  {
    "text": "as the central cluster server which doesn't cache negative lookups so",
    "start": "1744230",
    "end": "1751730"
  },
  {
    "text": "basically we were hitting uncashed six million queries on the central one with",
    "start": "1751730",
    "end": "1757880"
  },
  {
    "text": "that resolved we basically learned don't use localhost as a name or if you do and",
    "start": "1757880",
    "end": "1764210"
  },
  {
    "text": "use generally DNS lookups always add a dot at the end if you know it's an",
    "start": "1764210",
    "end": "1769910"
  },
  {
    "text": "absolute one because you will never go into the search path so basically the",
    "start": "1769910",
    "end": "1776870"
  },
  {
    "text": "negative caching is fixed by corniness because we now actually cache negative responses so that won't happen that",
    "start": "1776870",
    "end": "1783410"
  },
  {
    "text": "extremely so what's the outlook so we talked about the history we talked about",
    "start": "1783410",
    "end": "1790060"
  },
  {
    "text": "the really nitty-gritty of results and benchmarks but what might be next so G",
    "start": "1790060",
    "end": "1798890"
  },
  {
    "text": "RPC which is hopefully native so the idea is instead of just wrapping the",
    "start": "1798890",
    "end": "1804920"
  },
  {
    "text": "normal DNS packets inside of like a G RPC piece we might actually have a DNS",
    "start": "1804920",
    "end": "1811460"
  },
  {
    "text": "native Jia PC or DNS / g RPC it adds a",
    "start": "1811460",
    "end": "1817160"
  },
  {
    "text": "lot of things and one thing that might happen because of it is watch based DNS",
    "start": "1817160",
    "end": "1822530"
  },
  {
    "text": "so instead of requesting or prefetching a lot of cache records you will just say",
    "start": "1822530",
    "end": "1829460"
  },
  {
    "text": "okay I'm I care about example of come because that's really important to mind for me and it will just watchin that and",
    "start": "1829460",
    "end": "1837560"
  },
  {
    "text": "get the changes instead of looking it up over and over again so completely removing idle traffic from your cluster",
    "start": "1837560",
    "end": "1844810"
  },
  {
    "text": "also a performance in rather reliability of improvements as we always chart and",
    "start": "1844810",
    "end": "1850280"
  },
  {
    "text": "then we hope for any ideas on plugins that you would like to have on any",
    "start": "1850280",
    "end": "1856520"
  },
  {
    "text": "problems you had running cárdenas or cube DNS and things like that",
    "start": "1856520",
    "end": "1862610"
  },
  {
    "text": "want to try out at you might be happy to try out such as outer path and stuff",
    "start": "1862610",
    "end": "1867890"
  },
  {
    "text": "like that so thank you and the special stands to my team from uh collapse which",
    "start": "1867890",
    "end": "1875000"
  },
  {
    "text": "helped me with a lot of the performance benchmarks and the special shout out to Aaron thank you",
    "start": "1875000",
    "end": "1882250"
  },
  {
    "text": "are there any questions I think there's like microphones in the aisle if you",
    "start": "1886030",
    "end": "1892760"
  },
  {
    "text": "guys want to fight over them so relying",
    "start": "1892760",
    "end": "1916429"
  },
  {
    "text": "on something being in the kernel when you have virtualized stuff on top is",
    "start": "1916429",
    "end": "1924100"
  },
  {
    "text": "problematic especially if you consider not just having containers which share the kernel but having the MS running for",
    "start": "1924100",
    "end": "1931669"
  },
  {
    "text": "example which don't share the kernel then you're for example out of luck the other thing is that and a switch for",
    "start": "1931669",
    "end": "1938390"
  },
  {
    "text": "example doesn't work with Alpine because they don't care about the file so that is another problem that might be",
    "start": "1938390",
    "end": "1944809"
  },
  {
    "text": "happening and we have a lot more control of our iterating on protocols doing",
    "start": "1944809",
    "end": "1950150"
  },
  {
    "text": "cache and adding a lot more features so one opportunity would be that the node",
    "start": "1950150",
    "end": "1955580"
  },
  {
    "text": "local cache actually talks to the API server on a watch based basis so we completely removed the need to go on TCP",
    "start": "1955580",
    "end": "1962990"
  },
  {
    "text": "or UDP on the DNS requests",
    "start": "1962990",
    "end": "1967750"
  },
  {
    "text": "so if we're ignoring sorry to repeat the question so if we ignore and a switch so",
    "start": "1972059",
    "end": "1980410"
  },
  {
    "text": "in it depends on the case and its which is by default ignored on Alpine so if",
    "start": "1980410",
    "end": "1986799"
  },
  {
    "text": "you run Alpine based images that's by default ignored it's a different level",
    "start": "1986799",
    "end": "2000840"
  },
  {
    "text": "of yeah let's yeah a question this is some cool stuff that you done the numbers are really interesting have you",
    "start": "2000840",
    "end": "2006510"
  },
  {
    "text": "considered making your test harness reproducible so that it could be run as as part of the CI I mean we've also",
    "start": "2006510",
    "end": "2015870"
  },
  {
    "text": "we've published the code to one of my github repos so if you guys want to go",
    "start": "2015870",
    "end": "2020909"
  },
  {
    "text": "and try and reproduce you yourselves I mean obviously you're gonna have to want to spend the credits on gke you know by",
    "start": "2020909",
    "end": "2027750"
  },
  {
    "text": "all means but like essentially what we're doing is we're just we're trying",
    "start": "2027750",
    "end": "2032970"
  },
  {
    "text": "to replicate a master we're having the like we're splitting up a fake master that has our DNS of choice in there so",
    "start": "2032970",
    "end": "2038809"
  },
  {
    "text": "hopefully the actual like cluster version wouldn't actually affect the",
    "start": "2038809",
    "end": "2044130"
  },
  {
    "text": "results of the test yeah centrally I think let me see if there's a slide also we have to",
    "start": "2044130",
    "end": "2051960"
  },
  {
    "text": "differentiate so crystal hair for example um he already did use the CI",
    "start": "2051960",
    "end": "2057780"
  },
  {
    "text": "system so the cluster scaling test you get the resource usage and basically be",
    "start": "2057780",
    "end": "2063690"
  },
  {
    "text": "the effect already running we could do that all the time",
    "start": "2063690",
    "end": "2069179"
  },
  {
    "text": "Shh I think that might actually be plan I have no complete idea on that our",
    "start": "2069179",
    "end": "2074280"
  },
  {
    "text": "anecdotal end-to-end test or application benchmark isn't that helpful running on",
    "start": "2074280",
    "end": "2080250"
  },
  {
    "text": "a persistent basis because it's really opinionated on a specific set up so we ran for example ten thousand different",
    "start": "2080250",
    "end": "2087148"
  },
  {
    "text": "domains and therefore didn't have a lot of caching involved even was with a",
    "start": "2087149",
    "end": "2093030"
  },
  {
    "text": "million queries being run so if you're just having like a hot path of like ten",
    "start": "2093030",
    "end": "2098400"
  },
  {
    "text": "domains that need be cached and that's always in your cache you will see completely different performance so that",
    "start": "2098400",
    "end": "2105360"
  },
  {
    "text": "I would feel that wouldn't make sense in that regard any other questions let's do",
    "start": "2105360",
    "end": "2113340"
  },
  {
    "text": "the mic first yeah sorry just once again if if you have any questions about the",
    "start": "2113340",
    "end": "2118560"
  },
  {
    "text": "test setup you can go ahead and email me or tweet at us and stuff like that and we'll answer your questions so I think",
    "start": "2118560",
    "end": "2125670"
  },
  {
    "text": "one of the things you mentioned during the talk was you had a hard time detecting drop packets in the cloud and",
    "start": "2125670",
    "end": "2134300"
  },
  {
    "text": "my feeling is that that's just gonna be the norm I mean UDP packet loss in in a",
    "start": "2134300",
    "end": "2140610"
  },
  {
    "text": "LAN isn't going to be that high so do you think you guys are trying to solve a problem that doesn't exist or is minimal",
    "start": "2140610",
    "end": "2147510"
  },
  {
    "text": "at least in the kubernetes cluster I mean there's I could also just like send out a bunch of links to you know",
    "start": "2147510",
    "end": "2153300"
  },
  {
    "text": "innumerable like stack overflow server overflow github issues and kubernetes and and other DNS things like this is a",
    "start": "2153300",
    "end": "2159240"
  },
  {
    "text": "this is a relatively common issue that you know does get attention and there is",
    "start": "2159240",
    "end": "2164340"
  },
  {
    "text": "there is interested in the community from like for this specific kind of solution for kubernetes yeah it's",
    "start": "2164340",
    "end": "2169920"
  },
  {
    "text": "totally second bad so we have their production classes that run into that problem multiple times and all over so",
    "start": "2169920",
    "end": "2178230"
  },
  {
    "text": "it doesn't matter on cluster size it doesn't matter on cloud there are some cloud providers that drop less packets",
    "start": "2178230",
    "end": "2183810"
  },
  {
    "text": "and basically a completely reliable but there are also on Prem settings or if",
    "start": "2183810",
    "end": "2189390"
  },
  {
    "text": "you don't configure any TCP upgrades and you're actually sending the DNS requests",
    "start": "2189390",
    "end": "2194910"
  },
  {
    "text": "over the Internet the average uep drop rate is up from like 1% to like up to 15% depending",
    "start": "2194910",
    "end": "2202170"
  },
  {
    "text": "where the upstream dns servers so relying on the network that is reliable is not a recommendation from our side I",
    "start": "2202170",
    "end": "2209640"
  },
  {
    "text": "would say it's also worth reminding people that like contract was also a huge issue you know you can configure",
    "start": "2209640",
    "end": "2215730"
  },
  {
    "text": "the size of this table but it's not like an actual solution for like some of the reasons described you know the races are",
    "start": "2215730",
    "end": "2224370"
  },
  {
    "text": "another one I I was made aware that there at least a couple patches have gone into or either gone into the kernel",
    "start": "2224370",
    "end": "2231450"
  },
  {
    "text": "or are pending merging into the kernel that solve at least a couple of these data races that would result and drop",
    "start": "2231450",
    "end": "2238560"
  },
  {
    "text": "back but that has not launched yet and I literally found out about it like two",
    "start": "2238560",
    "end": "2244870"
  },
  {
    "text": "days ago so I don't really I didn't have really enough time to you know research in-depth at all but yeah so it's not",
    "start": "2244870",
    "end": "2250660"
  },
  {
    "text": "just like the actual network itself there are more fundamental issues in the kernel that you know with certain",
    "start": "2250660",
    "end": "2256390"
  },
  {
    "text": "workloads will you know effectively look like a choppy network so we're a bit",
    "start": "2256390",
    "end": "2262360"
  },
  {
    "text": "over time let's do one last question for that's right and then you can come over",
    "start": "2262360",
    "end": "2267460"
  },
  {
    "text": "and ask questions in private and yeah yeah just before I have my question about the nation or the local network",
    "start": "2267460",
    "end": "2274900"
  },
  {
    "text": "there is no heat eep-eep lots of pockets I'm published book oh we",
    "start": "2274900",
    "end": "2280210"
  },
  {
    "text": "run bare metal in around 50,000 systems across many data centers who have like",
    "start": "2280210",
    "end": "2285850"
  },
  {
    "text": "huge number of switches and I can tell you from our experience there is a UDP",
    "start": "2285850",
    "end": "2291370"
  },
  {
    "text": "packet loss on a local network and you the netbook as you said is not very numerous reality and my question I mean",
    "start": "2291370",
    "end": "2301510"
  },
  {
    "text": "listen to know what was the code their major cause you notice a latency up to",
    "start": "2301510",
    "end": "2307540"
  },
  {
    "text": "five seconds you only have one person drop of packets for UDP reverse TCP it",
    "start": "2307540",
    "end": "2313780"
  },
  {
    "text": "was because of the time mountain zone curve or because something else because TCP is faster",
    "start": "2313780",
    "end": "2319150"
  },
  {
    "text": "trust me and I get I gather yeah so basically just in the sort of toy",
    "start": "2319150",
    "end": "2325380"
  },
  {
    "text": "benchmarks that I had from local host to the public resolver this mean latency",
    "start": "2325380",
    "end": "2331000"
  },
  {
    "text": "was entirely tail latency if you I actually I sort of debated whether or not to include the median latency in",
    "start": "2331000",
    "end": "2337240"
  },
  {
    "text": "here and you would see that the median latency is like right around 38 and 37",
    "start": "2337240",
    "end": "2343330"
  },
  {
    "text": "for each one you know with UDP being like a fraction of a millisecond faster so it didn't really change that yeah it",
    "start": "2343330",
    "end": "2350860"
  },
  {
    "text": "all of this mean latency is the size of that five millisecond bucket yeah you",
    "start": "2350860",
    "end": "2361120"
  },
  {
    "text": "don't have later in Chapter five second yeah so I mean one way that people have",
    "start": "2361120",
    "end": "2366310"
  },
  {
    "text": "tried to solve this problem is by reconfiguring the timeout to like a second or something it's it's",
    "start": "2366310",
    "end": "2374010"
  },
  {
    "text": "outside of spec so you may go ahead and do that at your own discretion but hopefully this is a more permanent",
    "start": "2374010",
    "end": "2382250"
  },
  {
    "text": "workable maintainable solution thank you and have fun at the after party and",
    "start": "2382250",
    "end": "2387990"
  },
  {
    "text": "hopefully you there might be drinks [Applause]",
    "start": "2387990",
    "end": "2393189"
  }
]