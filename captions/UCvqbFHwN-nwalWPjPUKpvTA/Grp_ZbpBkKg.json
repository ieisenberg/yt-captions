[
  {
    "text": "the topic of today's presentation is multiple canary releases and stress tests on production",
    "start": "399",
    "end": "7440"
  },
  {
    "text": "let's first start with multiple canary releases after that",
    "start": "8000",
    "end": "13440"
  },
  {
    "text": "let's move to stress test in production",
    "start": "13440",
    "end": "17799"
  },
  {
    "text": "let's start with the simplest case canary is a technique used to reduce the risk associated with releasing new",
    "start": "18960",
    "end": "25439"
  },
  {
    "text": "versions of software the idea is to first release a new version of the software to a small number of users and",
    "start": "25439",
    "end": "31599"
  },
  {
    "text": "then gradually iterate through the upgrade for example in this diagram we",
    "start": "31599",
    "end": "36640"
  },
  {
    "text": "test 10 percent of the traffic first then gradually move more traffic to the new version and finally the old version",
    "start": "36640",
    "end": "43520"
  },
  {
    "text": "is cleared and taken offline throughout the testing process we can label the traffic with various business tags such",
    "start": "43520",
    "end": "51120"
  },
  {
    "text": "as android devices location of beijing etc also note that user tags should not",
    "start": "51120",
    "end": "57360"
  },
  {
    "text": "use it addresses which are inaccurate and inconsistent then we can specify canary traffic rules to schedule route a",
    "start": "57360",
    "end": "64400"
  },
  {
    "text": "certain part of the user's traffic to a certain canary for example the android user from beijing is scheduled to the",
    "start": "64400",
    "end": "71600"
  },
  {
    "text": "2.0 canary version of service a",
    "start": "71600",
    "end": "76080"
  },
  {
    "text": "the scenario of a single service canary is still limited in reality it is more",
    "start": "76960",
    "end": "82080"
  },
  {
    "text": "common to have full stack canary testing for example a user client cannot be",
    "start": "82080",
    "end": "87360"
  },
  {
    "text": "forwarded directly through the router to the canary version of the service this is because the service is very far back",
    "start": "87360",
    "end": "93680"
  },
  {
    "text": "in the whole chain separated by other services as shown in the figure we have published canary for",
    "start": "93680",
    "end": "100079"
  },
  {
    "text": "delivery with user and order services spaced in between in this case we need",
    "start": "100079",
    "end": "105280"
  },
  {
    "text": "to do two things to ensure that the traffic is scheduled correctly the first is to pass through the user tags and the",
    "start": "105280",
    "end": "111840"
  },
  {
    "text": "second is to route traffic to the correct version of the next service at any end point of the chain if you",
    "start": "111840",
    "end": "117280"
  },
  {
    "text": "consider the implementation level a little bit here you will notice that there are two categories of approaches",
    "start": "117280",
    "end": "122799"
  },
  {
    "text": "to do full stack canary release either by changing the code or by a non-intrusive platform level solution",
    "start": "122799",
    "end": "129280"
  },
  {
    "text": "and changing the code can be very cumbersome and verbose and prone to bugs",
    "start": "129280",
    "end": "134959"
  },
  {
    "text": "let's use another practical example to illustrate the difficulty of multiple canary releases for example there are",
    "start": "134959",
    "end": "142000"
  },
  {
    "text": "now two services order v 1.0 and email v 2.0 the service order calls the service",
    "start": "142000",
    "end": "148319"
  },
  {
    "text": "email and the service email uses the third-party email provider tencent provider and we decided to add some",
    "start": "148319",
    "end": "154959"
  },
  {
    "text": "information to the order entity as a test version for android users only since the changes to the order entity",
    "start": "154959",
    "end": "161280"
  },
  {
    "text": "affect both services which need to be changed we added order v 1.1 and email v",
    "start": "161280",
    "end": "166640"
  },
  {
    "text": "2.1 to apply this change then another team decided to replace the tencent",
    "start": "166640",
    "end": "171680"
  },
  {
    "text": "provider with google provider in the email service so we added email v 2.0",
    "start": "171680",
    "end": "177200"
  },
  {
    "text": "one to test users from beijing only at this time there is a dilemma that android users and beijing users are",
    "start": "177200",
    "end": "183360"
  },
  {
    "text": "overlapping which is traffic from android phones in beijing considering the complexity of the traffic and the",
    "start": "183360",
    "end": "189599"
  },
  {
    "text": "inconsistency felt by the users it will led to a heavy operation burden",
    "start": "189599",
    "end": "195840"
  },
  {
    "text": "let's take one step back and analyze different cases of canary release let's first concentrate on the figure on the",
    "start": "197519",
    "end": "204080"
  },
  {
    "text": "left for example and b rely on z while it tests android traffic and this",
    "start": "204080",
    "end": "209519"
  },
  {
    "text": "testing iphone traffic they test two different user groups and if they both rely on stow test stakes on two",
    "start": "209519",
    "end": "216799"
  },
  {
    "text": "different canary traffic and will become a source of confusion then there are two better approaches",
    "start": "216799",
    "end": "222319"
  },
  {
    "text": "seen in the figures in the middle and on the right the first is to schedule traffic from auto z and the second is to",
    "start": "222319",
    "end": "228480"
  },
  {
    "text": "schedule traffic from land toes and z separately thereby the principle to make",
    "start": "228480",
    "end": "233519"
  },
  {
    "text": "many things easier is one canary release one traffic rule",
    "start": "233519",
    "end": "240040"
  },
  {
    "text": "even if the canary conflict problem is solved there is still a problem that the traffic rules may overlap the previous",
    "start": "240080",
    "end": "247200"
  },
  {
    "text": "example is the user traffic of android and iphone but if one canary tests android and the other tests beijing",
    "start": "247200",
    "end": "254159"
  },
  {
    "text": "there will be a common subset of traffic rules for both canary releases so if the traffic is from a common subset such as",
    "start": "254159",
    "end": "261600"
  },
  {
    "text": "traffic from android devices in beijing how should we root that traffic at this time in fact this ends up being a",
    "start": "261600",
    "end": "268800"
  },
  {
    "text": "mathematical abstraction of two set problems one set matching user traffic is a set",
    "start": "268800",
    "end": "275600"
  },
  {
    "text": "canary release of traffic rules is a set two multi-matching problem multiple",
    "start": "275600",
    "end": "280960"
  },
  {
    "text": "canary traffic rules are matched on which one should be selected",
    "start": "280960",
    "end": "286720"
  },
  {
    "text": "so let's use an example to demonstrate all the problems mentioned before for example there is a back-end service",
    "start": "287600",
    "end": "294560"
  },
  {
    "text": "stack of a food delivery application the service consists of three micro services order service restaurant service and",
    "start": "294560",
    "end": "301840"
  },
  {
    "text": "delivery service order service has no canary restaurant service has two canaries",
    "start": "301840",
    "end": "308320"
  },
  {
    "text": "first canary is for android traffic from beijing and second canary is for all android traffic",
    "start": "308320",
    "end": "314720"
  },
  {
    "text": "delivery service also has two canaries first canary is for traffic from beijing",
    "start": "314720",
    "end": "320000"
  },
  {
    "text": "and second is for all android traffic when the system receives traffic with",
    "start": "320000",
    "end": "326800"
  },
  {
    "text": "beijing user tag it matches the routing rules of delivery services beijing canary and the traffic follows the green",
    "start": "326800",
    "end": "333600"
  },
  {
    "text": "path then on the other hand the traffic with android user tag matches the routing",
    "start": "333600",
    "end": "340000"
  },
  {
    "text": "rules of android canary for both restaurant and delivery the traffic follows the blue path",
    "start": "340000",
    "end": "347120"
  },
  {
    "text": "but what happens for traffic that contains both android and beijing tags it matches all three canaries and there",
    "start": "347120",
    "end": "353520"
  },
  {
    "text": "is no unambiguous way route the traffic this is how it looks in terms of sets",
    "start": "353520",
    "end": "360639"
  },
  {
    "text": "since in terms of math the canary rule is matched if canary traffic is a subset",
    "start": "360639",
    "end": "365759"
  },
  {
    "text": "of user traffic so how should we handle the multiple matching problem",
    "start": "365759",
    "end": "371600"
  },
  {
    "text": "a simple and easy way to solve this problem is to specify the priority of canary each traffic rule has a number",
    "start": "371600",
    "end": "378240"
  },
  {
    "text": "indicating the priority from small to large as you can see from the figure",
    "start": "378240",
    "end": "383360"
  },
  {
    "text": "traffic beijing and android matches three canaries but because restaurant beijing and android has the highest",
    "start": "383360",
    "end": "389520"
  },
  {
    "text": "priority priority one the red canary is therefore selected",
    "start": "389520",
    "end": "394880"
  },
  {
    "text": "even though the priority solves the problem of multiple matching there is still a problem of misused configuration",
    "start": "394880",
    "end": "401680"
  },
  {
    "text": "traffic shadow problem in this example the red rule is shadowed by the blue rule as blue has higher priority",
    "start": "401680",
    "end": "408400"
  },
  {
    "text": "it means no traffic is routed to beijing and android canary",
    "start": "408400",
    "end": "413599"
  },
  {
    "text": "finally let's explain the technical details of isemesh and give an overview of how we implement multiple canary",
    "start": "413599",
    "end": "419759"
  },
  {
    "text": "releases first of all all our services are running in kubernetes pods the three",
    "start": "419759",
    "end": "425360"
  },
  {
    "text": "services in here correspond to three services in isemesh and even different versions under the same service are part",
    "start": "425360",
    "end": "431840"
  },
  {
    "text": "of one service so a mesh service will have multiple versions running at the same time in order to route the traffic",
    "start": "431840",
    "end": "438319"
  },
  {
    "text": "to correct canaries two things need to be accomplished first thing to ensure is to pass through",
    "start": "438319",
    "end": "443680"
  },
  {
    "text": "user tags without losing any user information throughout the service chain this involves the sidecar and the",
    "start": "443680",
    "end": "450400"
  },
  {
    "text": "business application the sidecar naturally knows all the canary traffic rules and user tags such as some",
    "start": "450400",
    "end": "457199"
  },
  {
    "text": "specific http headers and it will forward them with the traffic also the",
    "start": "457199",
    "end": "462240"
  },
  {
    "text": "business application itself needs to pass through the user tags which can be done by our officially supported",
    "start": "462240",
    "end": "468400"
  },
  {
    "text": "javagent in cooperation with sidecar and does not require user awareness sidecar",
    "start": "468400",
    "end": "473840"
  },
  {
    "text": "will notify the javagent to pass through all the information as for other languages such as golang since there is",
    "start": "473840",
    "end": "480400"
  },
  {
    "text": "no ticket technology only a simple sdk is enough to forward the user tags so",
    "start": "480400",
    "end": "486080"
  },
  {
    "text": "isamesh also supports multiple languages in this advanced feature as long as the user tags are available second",
    "start": "486080",
    "end": "493120"
  },
  {
    "text": "requirement for isa mesh canary releases is traffic routing all components",
    "start": "493120",
    "end": "498240"
  },
  {
    "text": "including ingress controller of isemesh and the sidecar in each service pod have the ability to route canary traffic to",
    "start": "498240",
    "end": "505120"
  },
  {
    "text": "the next service corresponding canary version you can see that all the service components in this figure whether",
    "start": "505120",
    "end": "511360"
  },
  {
    "text": "receiving requests or sending requests will pass through the sidecar and when sending requests outbound the sidecar",
    "start": "511360",
    "end": "519039"
  },
  {
    "text": "observes the traffic characteristics and decides whether the traffic needs to be dispatched to one of canary versions of",
    "start": "519039",
    "end": "525120"
  },
  {
    "text": "the next service and this is all done by sidecar without the involvement of agent",
    "start": "525120",
    "end": "530160"
  },
  {
    "text": "and sdk",
    "start": "530160",
    "end": "533319"
  },
  {
    "text": "[Music]",
    "start": "570410",
    "end": "573480"
  },
  {
    "text": "[Music]",
    "start": "618400",
    "end": "621500"
  },
  {
    "text": "restaurants",
    "start": "630320",
    "end": "633320"
  },
  {
    "text": "so",
    "start": "639920",
    "end": "642920"
  },
  {
    "text": "foreign",
    "start": "658880",
    "end": "661839"
  },
  {
    "text": "um",
    "start": "756320",
    "end": "759320"
  },
  {
    "text": "foreign",
    "start": "799360",
    "end": "801839"
  },
  {
    "text": "[Music] foreign",
    "start": "822440",
    "end": "829399"
  },
  {
    "text": "okay",
    "start": "868399",
    "end": "871399"
  },
  {
    "text": "um",
    "start": "922560",
    "end": "925560"
  },
  {
    "text": "um",
    "start": "980720",
    "end": "983720"
  },
  {
    "text": "let's now summarize the design principles of the platform and the best practices for its operation design",
    "start": "1027839",
    "end": "1034319"
  },
  {
    "text": "principles are following one one canary service version can belong to at most one canary release",
    "start": "1034319",
    "end": "1042000"
  },
  {
    "text": "two one request only can be scheduled to at most one canary release",
    "start": "1042000",
    "end": "1047199"
  },
  {
    "text": "three the canary release must be explicitly selected by incoming traffic",
    "start": "1047199",
    "end": "1052880"
  },
  {
    "text": "4. normal traffic that does not match canary rules goes through primary deployments",
    "start": "1052880",
    "end": "1059280"
  },
  {
    "text": "here's also few best practices 1. tagging the traffic must use the user",
    "start": "1059280",
    "end": "1065360"
  },
  {
    "text": "side information for example a client tip address is not a good way",
    "start": "1065360",
    "end": "1070799"
  },
  {
    "text": "2. when tagged traffic overlaps use explicit priority to guide the traffic",
    "start": "1070799",
    "end": "1076160"
  },
  {
    "text": "router 3 the smaller scope canary rule has a higher priory",
    "start": "1076160",
    "end": "1083039"
  },
  {
    "text": "this is all i wanted to show you today about multiple canary releases let's now move on to stress test in",
    "start": "1083840",
    "end": "1090240"
  },
  {
    "text": "production now is the full stack stress test part",
    "start": "1090240",
    "end": "1096080"
  },
  {
    "text": "the topic of this part is how to do stress testing in a production environment today's production",
    "start": "1096080",
    "end": "1101120"
  },
  {
    "text": "environment has become very very complex just like the picture on the right there",
    "start": "1101120",
    "end": "1106799"
  },
  {
    "text": "are many components in it ranging from dozens or hundreds to thousands and these components are developed by",
    "start": "1106799",
    "end": "1113360"
  },
  {
    "text": "different development teams and in different languages which makes the communication between them very",
    "start": "1113360",
    "end": "1118480"
  },
  {
    "text": "complicated no one can tell the relationship between all of them the complexity",
    "start": "1118480",
    "end": "1124000"
  },
  {
    "text": "from a technical point of view makes debugging difficult in addition the",
    "start": "1124000",
    "end": "1129280"
  },
  {
    "text": "business has also changed a lot for example during the black friday promotion",
    "start": "1129280",
    "end": "1135039"
  },
  {
    "text": "the traffic pressure on the online shopping systems is dozens or even hundreds of times higher than usual in",
    "start": "1135039",
    "end": "1140960"
  },
  {
    "text": "order to know in advance whether our system can withstand such a high traffic load we need to perform a full stack",
    "start": "1140960",
    "end": "1146880"
  },
  {
    "text": "stress test to get the real performance figures but also due to the complexity mentioned above it is very challenging to perform",
    "start": "1146880",
    "end": "1154080"
  },
  {
    "text": "full stack stress testing in today's systems",
    "start": "1154080",
    "end": "1158320"
  },
  {
    "text": "now let's look at the problem of traditional stress test methods the first is to build a test environment",
    "start": "1159120",
    "end": "1164480"
  },
  {
    "text": "identical to the production environment for stress testing in the era of standalone applications",
    "start": "1164480",
    "end": "1170480"
  },
  {
    "text": "this is a very good solution but in the age of the internet there are at least two problems",
    "start": "1170480",
    "end": "1176720"
  },
  {
    "text": "the first is money we can count how many servers there are in our production environment and then how much we need to",
    "start": "1176720",
    "end": "1182880"
  },
  {
    "text": "spend to buy these servers and that's just the cost for servers the cost will be higher when counting",
    "start": "1182880",
    "end": "1189120"
  },
  {
    "text": "other hardware most companies should not be able to afford such a test environment even if",
    "start": "1189120",
    "end": "1194559"
  },
  {
    "text": "duplicating the cloud resources for the test environment is not an issue is it enough to get reliable results i",
    "start": "1194559",
    "end": "1201120"
  },
  {
    "text": "think the answer is still no because it is difficult for our test environment to be exactly the same as the production",
    "start": "1201120",
    "end": "1206960"
  },
  {
    "text": "environment there are several reasons first because it is a test environment",
    "start": "1206960",
    "end": "1212400"
  },
  {
    "text": "people will continue to deploy test versions to it but forget to restore it after the testing over time the test",
    "start": "1212400",
    "end": "1218960"
  },
  {
    "text": "environment will become more and more different from the production environment the second is that many development teams will share this test",
    "start": "1218960",
    "end": "1225679"
  },
  {
    "text": "environment and if there's not an excellent coordination mechanism the tests conducted by different teams",
    "start": "1225679",
    "end": "1232000"
  },
  {
    "text": "will also affect the test results but the real trouble is the data that is how to ensure that the data used",
    "start": "1232000",
    "end": "1238559"
  },
  {
    "text": "in the test is completely consistent with the production environment for example in a twitter like system",
    "start": "1238559",
    "end": "1245280"
  },
  {
    "text": "users like me generally only have a few dozen or hundreds of followers so it will be fairly easy to notify all my",
    "start": "1245280",
    "end": "1251679"
  },
  {
    "text": "followers in a second when i post a message but for a celebrity with millions of followers",
    "start": "1251679",
    "end": "1257280"
  },
  {
    "text": "the situation will be very different therefore we cannot simply use simulated data for",
    "start": "1257280",
    "end": "1263039"
  },
  {
    "text": "testing the second point is the proportion of different users users like me may account for 90",
    "start": "1263039",
    "end": "1269840"
  },
  {
    "text": "and celebrities may only be one in hundreds of thousands only by simulating the proportion of users with different",
    "start": "1269840",
    "end": "1275919"
  },
  {
    "text": "degrees of followers can we get a reliable test result the easiest way is to take the production data to the test system for",
    "start": "1275919",
    "end": "1282320"
  },
  {
    "text": "testing but it also brings the problem of data security the production data generally contains a lot of sensitive",
    "start": "1282320",
    "end": "1288960"
  },
  {
    "text": "information the risk of data leakage will increase exponentially if they are brought to the test environment",
    "start": "1288960",
    "end": "1296559"
  },
  {
    "text": "because of these issues people turn their eyes to the production environment and try to use the low",
    "start": "1297360",
    "end": "1302480"
  },
  {
    "text": "traffic period of the production environment for testing but it's also a huge challenge because it is an",
    "start": "1302480",
    "end": "1307520"
  },
  {
    "text": "intrusive solution that involves modifying or even redefining business logic let's take an example assuming it is an",
    "start": "1307520",
    "end": "1314480"
  },
  {
    "text": "online shopping system including a user module and order module to test it we need to modify these",
    "start": "1314480",
    "end": "1320960"
  },
  {
    "text": "modules first we need to add test logic and then we need to add the logic to",
    "start": "1320960",
    "end": "1326400"
  },
  {
    "text": "detect whether we are in a test or not this looks very simple just requires",
    "start": "1326400",
    "end": "1331440"
  },
  {
    "text": "adding some if else but is much more complicated in practice",
    "start": "1331440",
    "end": "1337039"
  },
  {
    "text": "first of all what exactly does test mean and for what kind of request we can think of it as a",
    "start": "1337200",
    "end": "1343520"
  },
  {
    "text": "test request for the user module we might be able to do this by adding a special prefix to the id of test users",
    "start": "1343520",
    "end": "1350480"
  },
  {
    "text": "or specifying a range of user it's in advance this should do the trick when the request comes to the order",
    "start": "1350480",
    "end": "1356480"
  },
  {
    "text": "module we may still want to use the user id to determine whether the test logic should be taken but the actual situation",
    "start": "1356480",
    "end": "1363600"
  },
  {
    "text": "may be after a series of complex processing the user id has been discarded so the order module cannot see",
    "start": "1363600",
    "end": "1370400"
  },
  {
    "text": "it at all then how to write the judgment logic",
    "start": "1370400",
    "end": "1375520"
  },
  {
    "text": "the second question is how our test logic differs from production logic it's easier for us to think about accessing",
    "start": "1375520",
    "end": "1381840"
  },
  {
    "text": "different data sets or simulating a third party service such as payments because we don't want",
    "start": "1381840",
    "end": "1387520"
  },
  {
    "text": "to actually spend money on testing but what is really complicated is preparing data for subsequent components",
    "start": "1387520",
    "end": "1394000"
  },
  {
    "text": "this relates to the first problem that is because the order module cannot see the user id",
    "start": "1394000",
    "end": "1399760"
  },
  {
    "text": "the user module needs to mark the request sent to the order module so that the order module knows this is a test",
    "start": "1399760",
    "end": "1404960"
  },
  {
    "text": "request however in a complex system it is not easy for the user module to know all the",
    "start": "1404960",
    "end": "1410559"
  },
  {
    "text": "modules that the subsequent process will go through so we have to spend a lot of effort to ensure the test state is",
    "start": "1410559",
    "end": "1416159"
  },
  {
    "text": "correctly transmitted between modules to avoid disturbing the production logic please notice this is just the work",
    "start": "1416159",
    "end": "1422000"
  },
  {
    "text": "required for one function point and there are thousands of function points in a normal system",
    "start": "1422000",
    "end": "1428799"
  },
  {
    "text": "so the big question here is how much effort it takes to do all of these modifications and a bigger question is",
    "start": "1428799",
    "end": "1435520"
  },
  {
    "text": "who can guarantee that all the changes that should be made have been made and if these are omissions or errors the",
    "start": "1435520",
    "end": "1441760"
  },
  {
    "text": "production data will be corrupted how to solve these problems we believe",
    "start": "1441760",
    "end": "1447919"
  },
  {
    "text": "that the key lies in isolation which is to isolate the production system and the test system from the four dimensions of",
    "start": "1447919",
    "end": "1454159"
  },
  {
    "text": "business data traffic and resources to prevent them from affecting each other",
    "start": "1454159",
    "end": "1460080"
  },
  {
    "text": "business isolation means that we should not use the form of adding conditional judgments to decide whether to use",
    "start": "1460080",
    "end": "1465120"
  },
  {
    "text": "production logic or testing logic but to distinguish them clearly from the beginning data isolation means the same",
    "start": "1465120",
    "end": "1471760"
  },
  {
    "text": "copy of data cannot be accessed both by the production system and the test system traffic isolation means that",
    "start": "1471760",
    "end": "1477919"
  },
  {
    "text": "normal requests and test requests can only enter the corresponding system the resources in resource isolation",
    "start": "1477919",
    "end": "1484240"
  },
  {
    "text": "mainly refer to hardware for example the test system and the production system",
    "start": "1484240",
    "end": "1489440"
  },
  {
    "text": "cannot be deployed on the same server so as not to compete for hardware resources such as cpu and memory this is mainly a",
    "start": "1489440",
    "end": "1496799"
  },
  {
    "text": "hardware issue but kubernetes has given a very good solution at the software level",
    "start": "1496799",
    "end": "1503039"
  },
  {
    "text": "let's take a look at the solutions given by ease mesh first because ease mesh is implemented",
    "start": "1503039",
    "end": "1508320"
  },
  {
    "text": "based on kubernetes it achieves resource isolation with the help of kubernetes",
    "start": "1508320",
    "end": "1513440"
  },
  {
    "text": "for business isolation ease mesh can replicate existing services except for adding a shadow mark the",
    "start": "1513440",
    "end": "1520559"
  },
  {
    "text": "replicated copy is exactly the same as the original one and these mesh can replace the connection information of",
    "start": "1520559",
    "end": "1526559"
  },
  {
    "text": "various middleware including miskal kafka readies etc according to the",
    "start": "1526559",
    "end": "1532320"
  },
  {
    "text": "configuration and thus change the target of data requests thereby realizing data isolation when",
    "start": "1532320",
    "end": "1539360"
  },
  {
    "text": "creating a service copy ease mesh also automatically creates a canary rule to forward the request with the x dash mesh",
    "start": "1539360",
    "end": "1546080"
  },
  {
    "text": "dash shadow header to the replicated service copy as a test request and forward other requests to the original service to achieve traffic isolation",
    "start": "1546080",
    "end": "1555039"
  },
  {
    "text": "the above three isolations are implemented by the shadow service feature of ease mesh it should be noted",
    "start": "1555520",
    "end": "1561039"
  },
  {
    "text": "that canary is also a feature of isa mesh the canary in the figure only means that shadow service will automatically",
    "start": "1561039",
    "end": "1567440"
  },
  {
    "text": "deploy a canary rule in addition to shadow service we also need another feature of ease mesh to make a full",
    "start": "1567440",
    "end": "1573760"
  },
  {
    "text": "stack stress test possible mock because we cannot replicate some third-party services for testing",
    "start": "1573760",
    "end": "1580080"
  },
  {
    "text": "such as the payment service mentioned above we need to mock it",
    "start": "1580080",
    "end": "1585840"
  },
  {
    "text": "now take a look at what will be demonstrated today this is a scenario where a user uses a coupon we can find there are three",
    "start": "1586080",
    "end": "1593120"
  },
  {
    "text": "services in it the first is coupon service the second is user service and",
    "start": "1593120",
    "end": "1599039"
  },
  {
    "text": "the third is verification code service which will send a verification code to the user's mobile phone and coupon",
    "start": "1599039",
    "end": "1605760"
  },
  {
    "text": "service user service has their own database middlewares the entire system is deployed in",
    "start": "1605760",
    "end": "1611520"
  },
  {
    "text": "kubernetes and you should have found that our traffic entry is mesh ingress and there is a java agent and a sidecar",
    "start": "1611520",
    "end": "1618159"
  },
  {
    "text": "with each service in the system which means that these services are also subject to the management of ease mesh",
    "start": "1618159",
    "end": "1624480"
  },
  {
    "text": "the java agent is mainly to hijack various requests sent by the application including both http requests and",
    "start": "1624480",
    "end": "1631600"
  },
  {
    "text": "requests to middlewares sidecart is implemented based on easegress it is mainly for various",
    "start": "1631600",
    "end": "1637840"
  },
  {
    "text": "processing of traffic and also for things like service discovery monitoring and tracing it is this",
    "start": "1637840",
    "end": "1645120"
  },
  {
    "text": "management of ease mesh that makes it possible for us to hijack various requests sent by applications to achieve",
    "start": "1645120",
    "end": "1650559"
  },
  {
    "text": "the aforementioned business isolation data isolation and traffic isolation for stress testing",
    "start": "1650559",
    "end": "1657360"
  },
  {
    "text": "in this system when a user request comes in it will first go to our mesh ingress",
    "start": "1657360",
    "end": "1663120"
  },
  {
    "text": "then to the coupon service and the coupon service will send a request to the user service to verify the user's",
    "start": "1663120",
    "end": "1668880"
  },
  {
    "text": "identity and then if it passes to the verification code service",
    "start": "1668880",
    "end": "1674640"
  },
  {
    "text": "send a request to send a verification code to the user so let's look at the steps we need to take for a stress test",
    "start": "1674640",
    "end": "1683039"
  },
  {
    "text": "as a first step we need to replicate the two database middleware we can simply backup the",
    "start": "1683039",
    "end": "1688559"
  },
  {
    "text": "databases and then restore them and we do not need to do any desensitization processing on the data because all our",
    "start": "1688559",
    "end": "1695200"
  },
  {
    "text": "data is still in the same security domain as the original system simply backing up and restoring does not",
    "start": "1695200",
    "end": "1701039"
  },
  {
    "text": "increase security risks after the middlewares are replicated the",
    "start": "1701039",
    "end": "1706960"
  },
  {
    "text": "second step is to replicate services through the shadow service and automatically deploy a canary rule as we",
    "start": "1706960",
    "end": "1712799"
  },
  {
    "text": "can see the coupon service and user service have now been replicated and during the",
    "start": "1712799",
    "end": "1718000"
  },
  {
    "text": "process we have also rewritten their connection to the middlewares through the sidecar and java agent allowing them",
    "start": "1718000",
    "end": "1724399"
  },
  {
    "text": "to access the replicated middlewares instead of the production middlewares this rewritten can be done through the",
    "start": "1724399",
    "end": "1730159"
  },
  {
    "text": "configuration of the shadow service or through the confine map of kubernetes for the test traffic we will add an x",
    "start": "1730159",
    "end": "1737520"
  },
  {
    "text": "slash mesh slash shadow header to it any request with this header goes to the replicated services according to the",
    "start": "1737520",
    "end": "1743520"
  },
  {
    "text": "canary rules we just deployed following the orange lines and the normal user requests still go to",
    "start": "1743520",
    "end": "1749520"
  },
  {
    "text": "the production services that is follow the blue lines now we have the coupon service and user",
    "start": "1749520",
    "end": "1755679"
  },
  {
    "text": "service replicated but haven't the verification code service because it will eventually call a third party",
    "start": "1755679",
    "end": "1760960"
  },
  {
    "text": "service to send the verification code to the user's mobile phone although the cost of each verification code message",
    "start": "1760960",
    "end": "1766880"
  },
  {
    "text": "is not very high if we send a lot of requests in the test it is also a big cost",
    "start": "1766880",
    "end": "1774159"
  },
  {
    "text": "therefore we hope not to send the verification code this requires the mock feature we",
    "start": "1774159",
    "end": "1779520"
  },
  {
    "text": "mentioned just now to mock the verification code instead of replicating it directly generally speaking we need to mock",
    "start": "1779520",
    "end": "1786320"
  },
  {
    "text": "services like payment because their implementation is complex involving various verifications and",
    "start": "1786320",
    "end": "1792480"
  },
  {
    "text": "encryptions which make them difficult to mock therefore we need to make a service in our system",
    "start": "1792480",
    "end": "1798559"
  },
  {
    "text": "to wrap these third-party services because these wrapper services are inside our system we can make the",
    "start": "1798559",
    "end": "1804720"
  },
  {
    "text": "interface simpler by saving a lot of security verification so what we actually mock during testing",
    "start": "1804720",
    "end": "1810640"
  },
  {
    "text": "is the wrapper services not the real third party services",
    "start": "1810640",
    "end": "1816240"
  },
  {
    "text": "now let's start the demonstration i've prepared two scripts for today's demonstration one on the left and one on",
    "start": "1816559",
    "end": "1822880"
  },
  {
    "text": "the right side of my screen with a shadow suffix after the philenum on the right side now i will run these two",
    "start": "1822880",
    "end": "1829200"
  },
  {
    "text": "scripts",
    "start": "1829200",
    "end": "1831679"
  },
  {
    "text": "we can see that the output on both sides is exactly the same in while i will also",
    "start": "1834559",
    "end": "1840000"
  },
  {
    "text": "show the topography generated by our mega cloud system from the graph we can also see that the processing",
    "start": "1840000",
    "end": "1846399"
  },
  {
    "text": "process of the two requests is exactly the same but because mega cloud requires a little time to sync data let's take a",
    "start": "1846399",
    "end": "1853440"
  },
  {
    "text": "look at the content of these two scripts first",
    "start": "1853440",
    "end": "1857520"
  },
  {
    "text": "we can see these two scripts are exactly the same except that the right side carries the",
    "start": "1859039",
    "end": "1864559"
  },
  {
    "text": "x-mesh dash shadow header when sending each request these two scripts execute the get token",
    "start": "1864559",
    "end": "1870240"
  },
  {
    "text": "at the beginning because the demo system requires a user to log in first after getting the token",
    "start": "1870240",
    "end": "1875760"
  },
  {
    "text": "they start sending the get coupon request",
    "start": "1875760",
    "end": "1879919"
  },
  {
    "text": "we will also take a look at the kubernetes to check the pods we can see four services from the pods",
    "start": "1884559",
    "end": "1890080"
  },
  {
    "text": "information we will focus on three of them the coupon user and verification code",
    "start": "1890080",
    "end": "1896399"
  },
  {
    "text": "services let's execute the e's mesh control",
    "start": "1896399",
    "end": "1902480"
  },
  {
    "text": "command of ease mesh again to take a look at the shadow service in the system we can see that no resource is returned",
    "start": "1902480",
    "end": "1909120"
  },
  {
    "text": "that is we have not deployed any shadow service yet",
    "start": "1909120",
    "end": "1914158"
  },
  {
    "text": "now the data synchronization of mega cloud should have been completed let me refresh the page as you can see from",
    "start": "1914640",
    "end": "1920960"
  },
  {
    "text": "this picture although the requests within without shadow have both been sent just now we can only see one",
    "start": "1920960",
    "end": "1926880"
  },
  {
    "text": "execution path in this picture that is coupon service calls user service and calls verification code",
    "start": "1926880",
    "end": "1933039"
  },
  {
    "text": "service at the same time the coupon service and user service will also access the two middleware miscellaneous",
    "start": "1933039",
    "end": "1942080"
  },
  {
    "text": "now i will deploy the shadow services please note in the slides we say",
    "start": "1944559",
    "end": "1950080"
  },
  {
    "text": "replicating the middleware is the first step but for this demonstration i prepared",
    "start": "1950080",
    "end": "1955120"
  },
  {
    "text": "the middleware replicas in advance and in order to show the difference i revised the replicated data but in",
    "start": "1955120",
    "end": "1961919"
  },
  {
    "text": "practice we can just replicate the production data directly without any modification",
    "start": "1961919",
    "end": "1968720"
  },
  {
    "text": "now let's create the shadow service just run the m control apply command we",
    "start": "1968880",
    "end": "1973919"
  },
  {
    "text": "can see it says that both the coupon shadow service and the user shadow service have been created successfully",
    "start": "1973919",
    "end": "1981679"
  },
  {
    "text": "now run the cube control command again we can see that there are two more pods in the system",
    "start": "1981919",
    "end": "1987519"
  },
  {
    "text": "namely coupon shadow and user shadow and if we run the m control get shadow",
    "start": "1987519",
    "end": "1993760"
  },
  {
    "text": "service command again we can also see that there are two more shadow services in the system",
    "start": "1993760",
    "end": "1999200"
  },
  {
    "text": "however although we see that both pods are already in the running state it still takes a little time for our",
    "start": "1999200",
    "end": "2004720"
  },
  {
    "text": "application to start about a minute to two so let's take this time to see the content of the yaml file we just used to",
    "start": "2004720",
    "end": "2012080"
  },
  {
    "text": "create the shadow services",
    "start": "2012080",
    "end": "2015880"
  },
  {
    "text": "as we can see there are two shadow services the first one is named coupon shadow",
    "start": "2018480",
    "end": "2024159"
  },
  {
    "text": "service and the second one is user shadow service with your shadow copies of coupon",
    "start": "2024159",
    "end": "2029760"
  },
  {
    "text": "service and user service respectively and as mentioned before our service supports rewriting the configuration of",
    "start": "2029760",
    "end": "2036159"
  },
  {
    "text": "the middleware directly we can also see this from this yaml in the spec of each",
    "start": "2036159",
    "end": "2041519"
  },
  {
    "text": "shadow service we have rewritten the connection information for miscall and readies in this way we replace the middleware",
    "start": "2041519",
    "end": "2048878"
  },
  {
    "text": "access by these two shadow services",
    "start": "2048879",
    "end": "2052960"
  },
  {
    "text": "it should be ready now let's execute the command and check the result",
    "start": "2055520",
    "end": "2061838"
  },
  {
    "text": "since it is a java application the first execution takes slightly more seconds",
    "start": "2063040",
    "end": "2068638"
  },
  {
    "text": "okay now the result is out for a better comparison i will clear the",
    "start": "2068639",
    "end": "2073839"
  },
  {
    "text": "screen and then run the commands again [Music]",
    "start": "2073839",
    "end": "2079340"
  },
  {
    "text": "as you can see the difference is that the coupon name field has changed from chinese to english",
    "start": "2080399",
    "end": "2086000"
  },
  {
    "text": "this is the result of modifying the database connection the data in the database is different",
    "start": "2086000",
    "end": "2091520"
  },
  {
    "text": "indicating that they are accessing different databases let's take a look at the topology of the system",
    "start": "2091520",
    "end": "2098720"
  },
  {
    "text": "now let me refresh the page we can see that there are some gray nodes in the system",
    "start": "2099280",
    "end": "2104320"
  },
  {
    "text": "which are the replicas of the original service and middleware including coupon service",
    "start": "2104320",
    "end": "2109520"
  },
  {
    "text": "user service miskal and reddies and the middlewares being accessed by the two replicated",
    "start": "2109520",
    "end": "2115280"
  },
  {
    "text": "services are also the replicated ones the only problem now is that these two coupon services",
    "start": "2115280",
    "end": "2121599"
  },
  {
    "text": "the original coupon and the replica both access the same verification code",
    "start": "2121599",
    "end": "2126880"
  },
  {
    "text": "service because we haven't mocked the verification code service yet let's do it now",
    "start": "2126880",
    "end": "2134000"
  },
  {
    "text": "the m control apply command again this mocks the verification code service",
    "start": "2138160",
    "end": "2143520"
  },
  {
    "text": "now let's execute the command with shadow again you can see that the verification code becomes a b c d and",
    "start": "2143520",
    "end": "2150160"
  },
  {
    "text": "when executing the command without shadow the verification code is still 123",
    "start": "2150160",
    "end": "2156839"
  },
  {
    "text": "456. let's take a look at the content of the yaml file",
    "start": "2156839",
    "end": "2162640"
  },
  {
    "text": "we can see that the request path is first matched and then request with header x dash mesh dash",
    "start": "2163440",
    "end": "2169760"
  },
  {
    "text": "shadow will be matched after a complete match it directly returns the http",
    "start": "2169760",
    "end": "2174880"
  },
  {
    "text": "status code 200 and verification code abcd",
    "start": "2174880",
    "end": "2181200"
  },
  {
    "text": "well now that all our preparations are complete let's actually conduct a stress test",
    "start": "2185040",
    "end": "2190480"
  },
  {
    "text": "because it is a demo environment so don't expect particularly high performance",
    "start": "2190480",
    "end": "2197119"
  },
  {
    "text": "let's change this test script and replace the last get coupon command with an a b command",
    "start": "2198800",
    "end": "2203839"
  },
  {
    "text": "let's use 10 concurrent connections and send 2 000 requests to see what the performance of this demo system looks",
    "start": "2203839",
    "end": "2209280"
  },
  {
    "text": "like a little bit slow maybe i should send",
    "start": "2209280",
    "end": "2216000"
  },
  {
    "text": "fewer requests finally we get the result request per second is 125.",
    "start": "2216000",
    "end": "2223119"
  },
  {
    "text": "this is a system that needs to be optimized for performance",
    "start": "2223119",
    "end": "2228440"
  },
  {
    "text": "now let's check the execution path through the topology graph since our topology graph aggregates data based on",
    "start": "2230800",
    "end": "2237040"
  },
  {
    "text": "time i need to adjust the time range a bit to only use data after we apply the mock",
    "start": "2237040",
    "end": "2243838"
  },
  {
    "text": "as we can see now the line from the replicated coupon service to the verification code service is gone",
    "start": "2246079",
    "end": "2252079"
  },
  {
    "text": "indicating that there is no calling between them now that's all for our demo today",
    "start": "2252079",
    "end": "2258400"
  },
  {
    "text": "back to slides what advantages does our shadow service have over traditional testing methods i think there are five",
    "start": "2259440",
    "end": "2266320"
  },
  {
    "text": "points first zero code changes everything is done through configuration",
    "start": "2266320",
    "end": "2272320"
  },
  {
    "text": "no code modification is required and no new bugs second low cost in the case of using a",
    "start": "2272320",
    "end": "2278720"
  },
  {
    "text": "cloud server the hardware resources used for testing can be applied before the test and released after and we only need",
    "start": "2278720",
    "end": "2285599"
  },
  {
    "text": "to pay for the actual usage period third clean environment except for a few services that are",
    "start": "2285599",
    "end": "2291839"
  },
  {
    "text": "mocked the test system is completely consistent with the production system which avoids errors caused by",
    "start": "2291839",
    "end": "2298240"
  },
  {
    "text": "differences in business logic to the greatest extent fourth true data the data of the test",
    "start": "2298240",
    "end": "2304079"
  },
  {
    "text": "system and the production system are completely consistent which ensures the reliability of the test results",
    "start": "2304079",
    "end": "2310560"
  },
  {
    "text": "fifth secure although the production data is used in the test the test system and the production",
    "start": "2310560",
    "end": "2316320"
  },
  {
    "text": "system are in the same security domain so there is no increased risk of data leakage",
    "start": "2316320",
    "end": "2323119"
  },
  {
    "text": "that's all for today's sharing welcome to follow our open source project on github",
    "start": "2323200",
    "end": "2329920"
  },
  {
    "text": "and also welcome to join our open source community thanks",
    "start": "2332800",
    "end": "2339079"
  },
  {
    "text": "you",
    "start": "2340640",
    "end": "2342720"
  }
]