[
  {
    "text": "welcome to this presentation where we",
    "start": "0",
    "end": "1839"
  },
  {
    "text": "will talk about crossplane which is an",
    "start": "1839",
    "end": "4240"
  },
  {
    "text": "infrastructure as code tool that enables",
    "start": "4240",
    "end": "6879"
  },
  {
    "text": "us to use kubernetes to manage and",
    "start": "6879",
    "end": "8960"
  },
  {
    "text": "provision infrastructure",
    "start": "8960",
    "end": "12240"
  },
  {
    "text": "my name is vijayn palazzi and i am the",
    "start": "13440",
    "end": "15759"
  },
  {
    "text": "head of technology and a trainer at code",
    "start": "15759",
    "end": "17840"
  },
  {
    "text": "cloud which is a learn by doing platform",
    "start": "17840",
    "end": "20320"
  },
  {
    "text": "specializing in devops courses",
    "start": "20320",
    "end": "23199"
  },
  {
    "text": "code cloud is a cncf silver member and a",
    "start": "23199",
    "end": "26160"
  },
  {
    "text": "certified kubernetes training partner",
    "start": "26160",
    "end": "29039"
  },
  {
    "text": "so let's take a look at the agenda of",
    "start": "29039",
    "end": "30800"
  },
  {
    "text": "this talk",
    "start": "30800",
    "end": "32078"
  },
  {
    "text": "we will start with an introduction to",
    "start": "32079",
    "end": "33920"
  },
  {
    "text": "crossplane and see how it differs from",
    "start": "33920",
    "end": "36320"
  },
  {
    "text": "other popular infrastructure",
    "start": "36320",
    "end": "37600"
  },
  {
    "text": "provisioning tools such as terraform and",
    "start": "37600",
    "end": "40000"
  },
  {
    "text": "polumi",
    "start": "40000",
    "end": "41120"
  },
  {
    "text": "we will go over the installation steps",
    "start": "41120",
    "end": "43600"
  },
  {
    "text": "followed by an overview of the",
    "start": "43600",
    "end": "45440"
  },
  {
    "text": "fundamental crossplane concepts such as",
    "start": "45440",
    "end": "48079"
  },
  {
    "text": "provider packages managed resources and",
    "start": "48079",
    "end": "51120"
  },
  {
    "text": "composite resources",
    "start": "51120",
    "end": "53120"
  },
  {
    "text": "this will be followed by a quick",
    "start": "53120",
    "end": "54960"
  },
  {
    "text": "hands-on demo where we'll make use of",
    "start": "54960",
    "end": "57440"
  },
  {
    "text": "crossplane to deploy resources on the",
    "start": "57440",
    "end": "59359"
  },
  {
    "text": "aws cloud",
    "start": "59359",
    "end": "61199"
  },
  {
    "text": "and we'll wrap up this session with a",
    "start": "61199",
    "end": "62719"
  },
  {
    "text": "round of q a",
    "start": "62719",
    "end": "65680"
  },
  {
    "text": "before we begin let's go over some of",
    "start": "66240",
    "end": "68159"
  },
  {
    "text": "the prerequisites and assumptions",
    "start": "68159",
    "end": "70320"
  },
  {
    "text": "now since crossplane installs on top of",
    "start": "70320",
    "end": "72320"
  },
  {
    "text": "kubernetes a basic understanding of",
    "start": "72320",
    "end": "74560"
  },
  {
    "text": "kubernetes is expected",
    "start": "74560",
    "end": "77280"
  },
  {
    "text": "i'll be using some examples of core",
    "start": "77280",
    "end": "79280"
  },
  {
    "text": "services in aws cloud so a basic",
    "start": "79280",
    "end": "81840"
  },
  {
    "text": "understanding of aws or cloud computing",
    "start": "81840",
    "end": "84560"
  },
  {
    "text": "in general would be helpful",
    "start": "84560",
    "end": "87600"
  },
  {
    "text": "in some of the examples i'll also be",
    "start": "87600",
    "end": "89439"
  },
  {
    "text": "making use of simple terraform",
    "start": "89439",
    "end": "91119"
  },
  {
    "text": "configuration which is written in hcl",
    "start": "91119",
    "end": "94320"
  },
  {
    "text": "so let's begin and get introduced to",
    "start": "94320",
    "end": "96479"
  },
  {
    "text": "crossplane",
    "start": "96479",
    "end": "98400"
  },
  {
    "text": "so when we start talking about",
    "start": "98400",
    "end": "99759"
  },
  {
    "text": "infrastructure provisioning one of the",
    "start": "99759",
    "end": "101680"
  },
  {
    "text": "commonly used tools today is terraform",
    "start": "101680",
    "end": "104399"
  },
  {
    "text": "and then there are tools such as pulumi",
    "start": "104399",
    "end": "106560"
  },
  {
    "text": "that have gained popularity in the last",
    "start": "106560",
    "end": "108399"
  },
  {
    "text": "few years",
    "start": "108399",
    "end": "109759"
  },
  {
    "text": "now these are some fantastic tools that",
    "start": "109759",
    "end": "111759"
  },
  {
    "text": "allow us to provision and manage",
    "start": "111759",
    "end": "113360"
  },
  {
    "text": "infrastructure on almost all platforms",
    "start": "113360",
    "end": "115840"
  },
  {
    "text": "such as aws azure gcp or on on-premise",
    "start": "115840",
    "end": "120079"
  },
  {
    "text": "infrastructure such as vmware",
    "start": "120079",
    "end": "122479"
  },
  {
    "text": "and while these are some really great",
    "start": "122479",
    "end": "124320"
  },
  {
    "text": "tools they do have some certain",
    "start": "124320",
    "end": "126000"
  },
  {
    "text": "limitations",
    "start": "126000",
    "end": "128720"
  },
  {
    "text": "let's take terraform as an example it",
    "start": "128720",
    "end": "131039"
  },
  {
    "text": "uses hcl or hashicorp configuration",
    "start": "131039",
    "end": "133680"
  },
  {
    "text": "language",
    "start": "133680",
    "end": "134720"
  },
  {
    "text": "so here we have a sample configuration",
    "start": "134720",
    "end": "136800"
  },
  {
    "text": "file to create an ec2 instance and an s3",
    "start": "136800",
    "end": "139920"
  },
  {
    "text": "bucket in aws and it is written in the",
    "start": "139920",
    "end": "142560"
  },
  {
    "text": "hcl language that terraform understands",
    "start": "142560",
    "end": "145200"
  },
  {
    "text": "and although it is a simple declarative",
    "start": "145200",
    "end": "147599"
  },
  {
    "text": "language that's yet another tool that",
    "start": "147599",
    "end": "149760"
  },
  {
    "text": "the users need to learn",
    "start": "149760",
    "end": "152800"
  },
  {
    "text": "let's see another example",
    "start": "152800",
    "end": "154800"
  },
  {
    "text": "this configuration when applied will",
    "start": "154800",
    "end": "156879"
  },
  {
    "text": "create an ec2 instance in aws with the",
    "start": "156879",
    "end": "159760"
  },
  {
    "text": "tag of app version is equal to v1",
    "start": "159760",
    "end": "162959"
  },
  {
    "text": "now terraform will also create a state",
    "start": "162959",
    "end": "164959"
  },
  {
    "text": "file that will hold all the details of",
    "start": "164959",
    "end": "167200"
  },
  {
    "text": "the aws instance including the tag have",
    "start": "167200",
    "end": "169920"
  },
  {
    "text": "version is equal to v1",
    "start": "169920",
    "end": "172239"
  },
  {
    "text": "now if this tag is manually updated to",
    "start": "172239",
    "end": "175120"
  },
  {
    "text": "say app underscore version is equal to",
    "start": "175120",
    "end": "177200"
  },
  {
    "text": "v2 then terraform will not detect this",
    "start": "177200",
    "end": "179519"
  },
  {
    "text": "change unless the terraform workflow is",
    "start": "179519",
    "end": "181680"
  },
  {
    "text": "invoked manually the next time",
    "start": "181680",
    "end": "184480"
  },
  {
    "text": "what this means is that these tools such",
    "start": "184480",
    "end": "186800"
  },
  {
    "text": "as terraform and pollumi do not",
    "start": "186800",
    "end": "188800"
  },
  {
    "text": "automatically detect drift and as a",
    "start": "188800",
    "end": "191280"
  },
  {
    "text": "result they do not reconcile back to the",
    "start": "191280",
    "end": "193519"
  },
  {
    "text": "desired state of the infrastructure",
    "start": "193519",
    "end": "195120"
  },
  {
    "text": "without manual intervention",
    "start": "195120",
    "end": "197200"
  },
  {
    "text": "and these are the types of issues that",
    "start": "197200",
    "end": "199120"
  },
  {
    "text": "crossplane aims to fix",
    "start": "199120",
    "end": "202319"
  },
  {
    "text": "crossplane is an open source tool that",
    "start": "204560",
    "end": "206879"
  },
  {
    "text": "is installed directly on top of",
    "start": "206879",
    "end": "208400"
  },
  {
    "text": "kubernetes as an add-on and we can quite",
    "start": "208400",
    "end": "210879"
  },
  {
    "text": "literally make use of any kubernetes",
    "start": "210879",
    "end": "212879"
  },
  {
    "text": "distribution even the minimal",
    "start": "212879",
    "end": "214560"
  },
  {
    "text": "distribution such as mini cube micro k8s",
    "start": "214560",
    "end": "217440"
  },
  {
    "text": "or clusters that are created using the",
    "start": "217440",
    "end": "219280"
  },
  {
    "text": "kind utility or the cubadium tool",
    "start": "219280",
    "end": "223200"
  },
  {
    "text": "once installed crossplane enables",
    "start": "223200",
    "end": "225040"
  },
  {
    "text": "orchestrating infrastructure or manage",
    "start": "225040",
    "end": "227360"
  },
  {
    "text": "services on multiple platforms such as",
    "start": "227360",
    "end": "230000"
  },
  {
    "text": "gcp aws azure alibaba cloud by making",
    "start": "230000",
    "end": "234000"
  },
  {
    "text": "use of the kubernetes api",
    "start": "234000",
    "end": "236319"
  },
  {
    "text": "and this is done by the means of",
    "start": "236319",
    "end": "238159"
  },
  {
    "text": "providers i will discuss what providers",
    "start": "238159",
    "end": "240720"
  },
  {
    "text": "are in detail in the upcoming slides",
    "start": "240720",
    "end": "243519"
  },
  {
    "text": "the platforms that are supported are not",
    "start": "243519",
    "end": "245599"
  },
  {
    "text": "just limited to cloud providers alone",
    "start": "245599",
    "end": "247599"
  },
  {
    "text": "crossplanes support several providers",
    "start": "247599",
    "end": "249519"
  },
  {
    "text": "such as helm gitlab argo cd etc",
    "start": "249519",
    "end": "253040"
  },
  {
    "text": "and you can also package your own",
    "start": "253040",
    "end": "254640"
  },
  {
    "text": "provider for a custom platform as long",
    "start": "254640",
    "end": "257199"
  },
  {
    "text": "as it has an api that supports create",
    "start": "257199",
    "end": "259919"
  },
  {
    "text": "read update and delete operations",
    "start": "259919",
    "end": "263759"
  },
  {
    "text": "once crossplane is installed and the",
    "start": "264000",
    "end": "265840"
  },
  {
    "text": "provider configured we can now define",
    "start": "265840",
    "end": "268240"
  },
  {
    "text": "the configuration of an ec2 instance in",
    "start": "268240",
    "end": "270400"
  },
  {
    "text": "aws using a yaml file like this",
    "start": "270400",
    "end": "273759"
  },
  {
    "text": "and more significantly we can make use",
    "start": "273759",
    "end": "275919"
  },
  {
    "text": "of native kubernetes commands such as",
    "start": "275919",
    "end": "277919"
  },
  {
    "text": "cube ctl create or cube ctl apply to",
    "start": "277919",
    "end": "280160"
  },
  {
    "text": "provision the instance to check the",
    "start": "280160",
    "end": "282479"
  },
  {
    "text": "status and check for the events of the",
    "start": "282479",
    "end": "284880"
  },
  {
    "text": "resource that was created we can run",
    "start": "284880",
    "end": "286720"
  },
  {
    "text": "commands such as cube ctl get or cube",
    "start": "286720",
    "end": "288960"
  },
  {
    "text": "ctl described like this that we would",
    "start": "288960",
    "end": "291120"
  },
  {
    "text": "normally do with native kubernetes",
    "start": "291120",
    "end": "292880"
  },
  {
    "text": "objects such as spots deployments",
    "start": "292880",
    "end": "295040"
  },
  {
    "text": "persistent volumes etc",
    "start": "295040",
    "end": "298160"
  },
  {
    "text": "and as you can see here from the output",
    "start": "298160",
    "end": "300160"
  },
  {
    "text": "of the cube ctl get command we can now",
    "start": "300160",
    "end": "302400"
  },
  {
    "text": "see the status of the aws instance",
    "start": "302400",
    "end": "305280"
  },
  {
    "text": "and similar to native kubernetes objects",
    "start": "305280",
    "end": "307759"
  },
  {
    "text": "controllers constantly check to see the",
    "start": "307759",
    "end": "310000"
  },
  {
    "text": "status of these external managed",
    "start": "310000",
    "end": "311840"
  },
  {
    "text": "resources and reconciles them in case of",
    "start": "311840",
    "end": "314240"
  },
  {
    "text": "a drift",
    "start": "314240",
    "end": "316560"
  },
  {
    "text": "we will see more about these in the",
    "start": "316560",
    "end": "318240"
  },
  {
    "text": "upcoming slides and in the demo towards",
    "start": "318240",
    "end": "320320"
  },
  {
    "text": "the end",
    "start": "320320",
    "end": "322639"
  },
  {
    "text": "so let's now see how crossplane works",
    "start": "323280",
    "end": "325600"
  },
  {
    "text": "and talk about some of its fundamental",
    "start": "325600",
    "end": "327520"
  },
  {
    "text": "concepts",
    "start": "327520",
    "end": "328720"
  },
  {
    "text": "so we already talked about how",
    "start": "328720",
    "end": "330320"
  },
  {
    "text": "crossplane can be installed on any",
    "start": "330320",
    "end": "332880"
  },
  {
    "text": "kubernetes cluster",
    "start": "332880",
    "end": "334880"
  },
  {
    "text": "typically it is installed using the",
    "start": "334880",
    "end": "336720"
  },
  {
    "text": "official helm chart in a new name space",
    "start": "336720",
    "end": "338960"
  },
  {
    "text": "called cross plane system and once it is",
    "start": "338960",
    "end": "341600"
  },
  {
    "text": "installed we can see the deployments and",
    "start": "341600",
    "end": "343600"
  },
  {
    "text": "the associated parts running in the",
    "start": "343600",
    "end": "345360"
  },
  {
    "text": "cross plane system namespace",
    "start": "345360",
    "end": "348879"
  },
  {
    "text": "we can also optionally install the",
    "start": "349759",
    "end": "351680"
  },
  {
    "text": "crossplane cli tool that extends the",
    "start": "351680",
    "end": "354160"
  },
  {
    "text": "native cube ctl tool enabling it to do",
    "start": "354160",
    "end": "356479"
  },
  {
    "text": "things such as installing building and",
    "start": "356479",
    "end": "358720"
  },
  {
    "text": "pushing crossplane providers and",
    "start": "358720",
    "end": "360240"
  },
  {
    "text": "packages",
    "start": "360240",
    "end": "361440"
  },
  {
    "text": "in the upcoming slides and demo towards",
    "start": "361440",
    "end": "363280"
  },
  {
    "text": "the end we will make use of this to",
    "start": "363280",
    "end": "365280"
  },
  {
    "text": "install the aws provider configuration",
    "start": "365280",
    "end": "367600"
  },
  {
    "text": "in our kubernetes cluster",
    "start": "367600",
    "end": "370800"
  },
  {
    "text": "earlier we touched upon the concept of",
    "start": "371759",
    "end": "373919"
  },
  {
    "text": "providers a little bit",
    "start": "373919",
    "end": "375520"
  },
  {
    "text": "providers in crossplane are similar in",
    "start": "375520",
    "end": "377680"
  },
  {
    "text": "function to providers in terraform they",
    "start": "377680",
    "end": "380160"
  },
  {
    "text": "facilitate crossplane to provision the",
    "start": "380160",
    "end": "382080"
  },
  {
    "text": "respective infrastructure resource on a",
    "start": "382080",
    "end": "383919"
  },
  {
    "text": "specific platform",
    "start": "383919",
    "end": "385440"
  },
  {
    "text": "however in crossplane provider is a",
    "start": "385440",
    "end": "387919"
  },
  {
    "text": "package that bundles two components",
    "start": "387919",
    "end": "389759"
  },
  {
    "text": "together a controller which runs as a",
    "start": "389759",
    "end": "392560"
  },
  {
    "text": "part in the cross plane system name",
    "start": "392560",
    "end": "394240"
  },
  {
    "text": "space and a set of managed resources",
    "start": "394240",
    "end": "396639"
  },
  {
    "text": "that are installed as custom resource",
    "start": "396639",
    "end": "398800"
  },
  {
    "text": "definitions or crds",
    "start": "398800",
    "end": "401440"
  },
  {
    "text": "the managed resources are the",
    "start": "401440",
    "end": "402960"
  },
  {
    "text": "fundamental building blocks in cross",
    "start": "402960",
    "end": "404800"
  },
  {
    "text": "plane that has one-to-one mapping with a",
    "start": "404800",
    "end": "407280"
  },
  {
    "text": "resource in the external system",
    "start": "407280",
    "end": "409520"
  },
  {
    "text": "for example if we take the case of aws",
    "start": "409520",
    "end": "412800"
  },
  {
    "text": "provider",
    "start": "412800",
    "end": "413919"
  },
  {
    "text": "when it is installed crossplane also",
    "start": "413919",
    "end": "415919"
  },
  {
    "text": "installs crds for instance rds instance",
    "start": "415919",
    "end": "419520"
  },
  {
    "text": "security group subnet vpc bucket to name",
    "start": "419520",
    "end": "422800"
  },
  {
    "text": "a few each of them corresponding to the",
    "start": "422800",
    "end": "425039"
  },
  {
    "text": "actual service within aws",
    "start": "425039",
    "end": "428160"
  },
  {
    "text": "now depending upon the platform the",
    "start": "428160",
    "end": "429919"
  },
  {
    "text": "corresponding provider must be first",
    "start": "429919",
    "end": "431759"
  },
  {
    "text": "installed on the kubernetes cluster",
    "start": "431759",
    "end": "433680"
  },
  {
    "text": "before we can start provisioning and",
    "start": "433680",
    "end": "435440"
  },
  {
    "text": "managing resources on that platform now",
    "start": "435440",
    "end": "438080"
  },
  {
    "text": "this can be easily done by running a one",
    "start": "438080",
    "end": "440720"
  },
  {
    "text": "line cube ctl command provided that the",
    "start": "440720",
    "end": "442960"
  },
  {
    "text": "crossplane cli plugin is already",
    "start": "442960",
    "end": "444800"
  },
  {
    "text": "installed",
    "start": "444800",
    "end": "445840"
  },
  {
    "text": "now in this case we are installing the",
    "start": "445840",
    "end": "447360"
  },
  {
    "text": "aws provider with the version of",
    "start": "447360",
    "end": "450120"
  },
  {
    "text": "0.27.0 in our kubernetes cluster",
    "start": "450120",
    "end": "453520"
  },
  {
    "text": "once it is installed we can see that the",
    "start": "453520",
    "end": "455360"
  },
  {
    "text": "controller is installed as a deployment",
    "start": "455360",
    "end": "457759"
  },
  {
    "text": "in the crossplane system namespace",
    "start": "457759",
    "end": "461039"
  },
  {
    "text": "and we can also now see a bunch of crds",
    "start": "461039",
    "end": "463520"
  },
  {
    "text": "installed on the cluster corresponding",
    "start": "463520",
    "end": "465360"
  },
  {
    "text": "to managed resources in aws",
    "start": "465360",
    "end": "469198"
  },
  {
    "text": "now that the provider is installed we",
    "start": "471520",
    "end": "473440"
  },
  {
    "text": "need a way to authenticate to the",
    "start": "473440",
    "end": "475120"
  },
  {
    "text": "platform so in this example crossplane",
    "start": "475120",
    "end": "477680"
  },
  {
    "text": "should be able to authenticate with the",
    "start": "477680",
    "end": "479360"
  },
  {
    "text": "aws account where we want to deploy the",
    "start": "479360",
    "end": "481599"
  },
  {
    "text": "resources",
    "start": "481599",
    "end": "482960"
  },
  {
    "text": "for aws this is done by creating an",
    "start": "482960",
    "end": "485360"
  },
  {
    "text": "account key file that contains the",
    "start": "485360",
    "end": "487360"
  },
  {
    "text": "access key id and the secret access key",
    "start": "487360",
    "end": "490240"
  },
  {
    "text": "and then creating a kubernetes secret in",
    "start": "490240",
    "end": "492400"
  },
  {
    "text": "the cross plane system name space using",
    "start": "492400",
    "end": "494400"
  },
  {
    "text": "the key file",
    "start": "494400",
    "end": "495680"
  },
  {
    "text": "now this is different for every cloud",
    "start": "495680",
    "end": "497680"
  },
  {
    "text": "provider so the steps should vary for",
    "start": "497680",
    "end": "500160"
  },
  {
    "text": "each provider and make sure that you",
    "start": "500160",
    "end": "501840"
  },
  {
    "text": "refer to the provided documentation",
    "start": "501840",
    "end": "503680"
  },
  {
    "text": "before setting up the provider config",
    "start": "503680",
    "end": "507840"
  },
  {
    "text": "next we can create a provider config",
    "start": "508479",
    "end": "510800"
  },
  {
    "text": "type object to configure credentials for",
    "start": "510800",
    "end": "512959"
  },
  {
    "text": "the aws provider now this object",
    "start": "512959",
    "end": "515440"
  },
  {
    "text": "references the kubernetes secret that we",
    "start": "515440",
    "end": "517279"
  },
  {
    "text": "just created and it facilitates the",
    "start": "517279",
    "end": "519279"
  },
  {
    "text": "authentication with the aws account",
    "start": "519279",
    "end": "523039"
  },
  {
    "text": "we are now all set to provision",
    "start": "524720",
    "end": "526480"
  },
  {
    "text": "infrastructure in aws using crossplane",
    "start": "526480",
    "end": "529440"
  },
  {
    "text": "and to understand this better let's make",
    "start": "529440",
    "end": "531440"
  },
  {
    "text": "use of the same example of the ec2",
    "start": "531440",
    "end": "534000"
  },
  {
    "text": "instance that we saw in the previous",
    "start": "534000",
    "end": "535600"
  },
  {
    "text": "slides",
    "start": "535600",
    "end": "536880"
  },
  {
    "text": "the object configuration for this",
    "start": "536880",
    "end": "538959"
  },
  {
    "text": "managed resource in its simplest form",
    "start": "538959",
    "end": "540880"
  },
  {
    "text": "would look something like this",
    "start": "540880",
    "end": "543120"
  },
  {
    "text": "the api version for this object is",
    "start": "543120",
    "end": "545800"
  },
  {
    "text": "ec2.aws dot cross plane dot io with the",
    "start": "545800",
    "end": "548640"
  },
  {
    "text": "version of v one alpha one and the kind",
    "start": "548640",
    "end": "551440"
  },
  {
    "text": "is instance",
    "start": "551440",
    "end": "552720"
  },
  {
    "text": "now under the metadata we have the name",
    "start": "552720",
    "end": "554640"
  },
  {
    "text": "of the object which is called web server",
    "start": "554640",
    "end": "556880"
  },
  {
    "text": "in this case and just like any other",
    "start": "556880",
    "end": "559040"
  },
  {
    "text": "kubernetes object we can also add",
    "start": "559040",
    "end": "561279"
  },
  {
    "text": "additional fields such as labels and",
    "start": "561279",
    "end": "563120"
  },
  {
    "text": "annotations under the metadata",
    "start": "563120",
    "end": "565680"
  },
  {
    "text": "under the spec section we have fields to",
    "start": "565680",
    "end": "567839"
  },
  {
    "text": "define the desired state of the",
    "start": "567839",
    "end": "569279"
  },
  {
    "text": "resources",
    "start": "569279",
    "end": "571680"
  },
  {
    "text": "the for provider field is a mandatory",
    "start": "571680",
    "end": "574240"
  },
  {
    "text": "field and it is used to define the",
    "start": "574240",
    "end": "575920"
  },
  {
    "text": "desired state of the external resources",
    "start": "575920",
    "end": "578080"
  },
  {
    "text": "which in this case is the easy to",
    "start": "578080",
    "end": "579600"
  },
  {
    "text": "instance",
    "start": "579600",
    "end": "581600"
  },
  {
    "text": "the only required instance parameters",
    "start": "581600",
    "end": "583760"
  },
  {
    "text": "are the region and the image id which",
    "start": "583760",
    "end": "585760"
  },
  {
    "text": "have to be supplied in this definition",
    "start": "585760",
    "end": "587600"
  },
  {
    "text": "file",
    "start": "587600",
    "end": "588480"
  },
  {
    "text": "there are several other parameters that",
    "start": "588480",
    "end": "590080"
  },
  {
    "text": "can be supplied such as the instance",
    "start": "590080",
    "end": "592000"
  },
  {
    "text": "type security group and subnet",
    "start": "592000",
    "end": "594160"
  },
  {
    "text": "information but these are optional and",
    "start": "594160",
    "end": "596160"
  },
  {
    "text": "if it is not supplied a predefined",
    "start": "596160",
    "end": "598399"
  },
  {
    "text": "default value are used while",
    "start": "598399",
    "end": "600320"
  },
  {
    "text": "provisioning the resource",
    "start": "600320",
    "end": "602399"
  },
  {
    "text": "another field that we have used under",
    "start": "602399",
    "end": "604160"
  },
  {
    "text": "the spec section is the provider config",
    "start": "604160",
    "end": "606480"
  },
  {
    "text": "reference field",
    "start": "606480",
    "end": "607839"
  },
  {
    "text": "now this is used to reference the",
    "start": "607839",
    "end": "609760"
  },
  {
    "text": "provider config object that we created",
    "start": "609760",
    "end": "611600"
  },
  {
    "text": "earlier and it is used to authenticate",
    "start": "611600",
    "end": "613680"
  },
  {
    "text": "cross plane to the aws provider and",
    "start": "613680",
    "end": "615920"
  },
  {
    "text": "that's it once this configuration is",
    "start": "615920",
    "end": "617839"
  },
  {
    "text": "applied we can now successfully create",
    "start": "617839",
    "end": "620160"
  },
  {
    "text": "ec2 instances or any managed resource in",
    "start": "620160",
    "end": "622720"
  },
  {
    "text": "aws",
    "start": "622720",
    "end": "624560"
  },
  {
    "text": "so how do we know the different required",
    "start": "624560",
    "end": "626800"
  },
  {
    "text": "or optional fields under the specs",
    "start": "626800",
    "end": "628560"
  },
  {
    "text": "section that can be used for a managed",
    "start": "628560",
    "end": "630800"
  },
  {
    "text": "resource for this we can make use of",
    "start": "630800",
    "end": "633600"
  },
  {
    "text": "provider specific api documentation and",
    "start": "633600",
    "end": "636160"
  },
  {
    "text": "look up the managed resource that we",
    "start": "636160",
    "end": "638000"
  },
  {
    "text": "want to provision",
    "start": "638000",
    "end": "639519"
  },
  {
    "text": "in this example we are searching for the",
    "start": "639519",
    "end": "641600"
  },
  {
    "text": "crd of kind instance within the api",
    "start": "641600",
    "end": "643920"
  },
  {
    "text": "documentation page for the aws provider",
    "start": "643920",
    "end": "648160"
  },
  {
    "text": "here we can look for all the fields that",
    "start": "648160",
    "end": "650079"
  },
  {
    "text": "are supported under the spec section for",
    "start": "650079",
    "end": "651839"
  },
  {
    "text": "that specific crd",
    "start": "651839",
    "end": "653760"
  },
  {
    "text": "and the documentation shows that the for",
    "start": "653760",
    "end": "655760"
  },
  {
    "text": "provider is a required field",
    "start": "655760",
    "end": "658399"
  },
  {
    "text": "and the field called image id is",
    "start": "658399",
    "end": "660399"
  },
  {
    "text": "required for the instance type object",
    "start": "660399",
    "end": "662560"
  },
  {
    "text": "whereas fields such as block device",
    "start": "662560",
    "end": "664240"
  },
  {
    "text": "mappings and cpu options and things like",
    "start": "664240",
    "end": "666880"
  },
  {
    "text": "that are optional",
    "start": "666880",
    "end": "668480"
  },
  {
    "text": "we'll see how to make use of this in the",
    "start": "668480",
    "end": "670160"
  },
  {
    "text": "upcoming demo",
    "start": "670160",
    "end": "673639"
  },
  {
    "text": "before we head over to a demo let's look",
    "start": "674320",
    "end": "676880"
  },
  {
    "text": "at one other fundamental concept in",
    "start": "676880",
    "end": "678800"
  },
  {
    "text": "crossplane and that is composite",
    "start": "678800",
    "end": "680880"
  },
  {
    "text": "resources",
    "start": "680880",
    "end": "682000"
  },
  {
    "text": "in the previous slide we saw how to",
    "start": "682000",
    "end": "683680"
  },
  {
    "text": "provision a single managed resource in",
    "start": "683680",
    "end": "686079"
  },
  {
    "text": "aws which is an ec2 instance",
    "start": "686079",
    "end": "689040"
  },
  {
    "text": "however while provisioning",
    "start": "689040",
    "end": "690399"
  },
  {
    "text": "infrastructure in the real world you",
    "start": "690399",
    "end": "692079"
  },
  {
    "text": "would usually need to deploy several",
    "start": "692079",
    "end": "693920"
  },
  {
    "text": "resources together with some resources",
    "start": "693920",
    "end": "696240"
  },
  {
    "text": "depending on one another",
    "start": "696240",
    "end": "698240"
  },
  {
    "text": "for example we may need to provision a",
    "start": "698240",
    "end": "700480"
  },
  {
    "text": "vpc a subnet a security group that will",
    "start": "700480",
    "end": "703360"
  },
  {
    "text": "then be used by the ec2 instance now",
    "start": "703360",
    "end": "706079"
  },
  {
    "text": "each of these is an individual managed",
    "start": "706079",
    "end": "708240"
  },
  {
    "text": "resource that has one-to-one mapping",
    "start": "708240",
    "end": "710079"
  },
  {
    "text": "with the actual services on the aws",
    "start": "710079",
    "end": "711839"
  },
  {
    "text": "cloud so instead of provisioning them",
    "start": "711839",
    "end": "714240"
  },
  {
    "text": "individually and writing yaml files for",
    "start": "714240",
    "end": "716880"
  },
  {
    "text": "each of these resources separately they",
    "start": "716880",
    "end": "718959"
  },
  {
    "text": "can be grouped together into what is",
    "start": "718959",
    "end": "720639"
  },
  {
    "text": "known as a composite resource with a",
    "start": "720639",
    "end": "722720"
  },
  {
    "text": "shorthand of xr",
    "start": "722720",
    "end": "726000"
  },
  {
    "text": "now in the interest of time i will not",
    "start": "726720",
    "end": "728560"
  },
  {
    "text": "be going over composite resources in",
    "start": "728560",
    "end": "730399"
  },
  {
    "text": "detail but i wanted to mention it all",
    "start": "730399",
    "end": "732480"
  },
  {
    "text": "the same as it is a concept that",
    "start": "732480",
    "end": "734720"
  },
  {
    "text": "promotes effective collaboration between",
    "start": "734720",
    "end": "736880"
  },
  {
    "text": "platform or the sra team that manages",
    "start": "736880",
    "end": "739279"
  },
  {
    "text": "the crossplane environment and the",
    "start": "739279",
    "end": "741200"
  },
  {
    "text": "application team that requests for",
    "start": "741200",
    "end": "743120"
  },
  {
    "text": "infrastructure",
    "start": "743120",
    "end": "744560"
  },
  {
    "text": "at a very high level this is how it",
    "start": "744560",
    "end": "746560"
  },
  {
    "text": "would work",
    "start": "746560",
    "end": "747600"
  },
  {
    "text": "the composite resources are configured",
    "start": "747600",
    "end": "749680"
  },
  {
    "text": "by the platform or the sri team that",
    "start": "749680",
    "end": "751920"
  },
  {
    "text": "manages cross plane and while designing",
    "start": "751920",
    "end": "754639"
  },
  {
    "text": "the composite resources they define",
    "start": "754639",
    "end": "756639"
  },
  {
    "text": "which managed resources should be",
    "start": "756639",
    "end": "758480"
  },
  {
    "text": "created by the composite resource and",
    "start": "758480",
    "end": "760720"
  },
  {
    "text": "this is done by using another cross",
    "start": "760720",
    "end": "762880"
  },
  {
    "text": "plane specific resource called composite",
    "start": "762880",
    "end": "764639"
  },
  {
    "text": "resource definition which is xrd for",
    "start": "764639",
    "end": "767120"
  },
  {
    "text": "short and compositions",
    "start": "767120",
    "end": "769279"
  },
  {
    "text": "now the xrds and compositions are used",
    "start": "769279",
    "end": "771519"
  },
  {
    "text": "to define things like which managed",
    "start": "771519",
    "end": "773279"
  },
  {
    "text": "resources should be created by the",
    "start": "773279",
    "end": "774720"
  },
  {
    "text": "composite resource and which parameter",
    "start": "774720",
    "end": "777200"
  },
  {
    "text": "or parameters for the composite resource",
    "start": "777200",
    "end": "779200"
  },
  {
    "text": "should be fixed and which one should be",
    "start": "779200",
    "end": "781360"
  },
  {
    "text": "user configurable",
    "start": "781360",
    "end": "783680"
  },
  {
    "text": "for example it can be enforced that the",
    "start": "783680",
    "end": "786160"
  },
  {
    "text": "instance type of an ec2 and since",
    "start": "786160",
    "end": "787920"
  },
  {
    "text": "resource be always be set to t2 micro",
    "start": "787920",
    "end": "791120"
  },
  {
    "text": "but the image id can be something that",
    "start": "791120",
    "end": "793200"
  },
  {
    "text": "can that the consumers of the composite",
    "start": "793200",
    "end": "795279"
  },
  {
    "text": "resource can configure themselves to any",
    "start": "795279",
    "end": "797600"
  },
  {
    "text": "ami of their choice",
    "start": "797600",
    "end": "799760"
  },
  {
    "text": "so who are the consumers of this",
    "start": "799760",
    "end": "801760"
  },
  {
    "text": "composite resource",
    "start": "801760",
    "end": "803839"
  },
  {
    "text": "now these can be an application that",
    "start": "803839",
    "end": "806079"
  },
  {
    "text": "typically does not have access to create",
    "start": "806079",
    "end": "808079"
  },
  {
    "text": "the composite resource directly and",
    "start": "808079",
    "end": "810160"
  },
  {
    "text": "instead they would use something known",
    "start": "810160",
    "end": "812560"
  },
  {
    "text": "as a composite resource claim now this",
    "start": "812560",
    "end": "815120"
  },
  {
    "text": "is similar to the native kubernetes",
    "start": "815120",
    "end": "817120"
  },
  {
    "text": "object called persistent volume claim",
    "start": "817120",
    "end": "819199"
  },
  {
    "text": "when application can request a",
    "start": "819199",
    "end": "820959"
  },
  {
    "text": "persistent volume of specific class size",
    "start": "820959",
    "end": "824000"
  },
  {
    "text": "or access mode",
    "start": "824000",
    "end": "826880"
  },
  {
    "text": "similarly when a composite resource",
    "start": "827199",
    "end": "829199"
  },
  {
    "text": "claim is created it would contain the",
    "start": "829199",
    "end": "831440"
  },
  {
    "text": "reference to the composite resource",
    "start": "831440",
    "end": "833120"
  },
  {
    "text": "along with the user configurable",
    "start": "833120",
    "end": "834639"
  },
  {
    "text": "parameters that are configured for the",
    "start": "834639",
    "end": "836240"
  },
  {
    "text": "composite resource",
    "start": "836240",
    "end": "839120"
  },
  {
    "text": "all right now that we have gone over the",
    "start": "840240",
    "end": "842399"
  },
  {
    "text": "basic concepts of crossplane let's jump",
    "start": "842399",
    "end": "844880"
  },
  {
    "text": "into a quick demo where we will use",
    "start": "844880",
    "end": "846560"
  },
  {
    "text": "crossplane to provision a bunch of",
    "start": "846560",
    "end": "848320"
  },
  {
    "text": "services in the aws cloud",
    "start": "848320",
    "end": "850639"
  },
  {
    "text": "now for the ease of use i'll be making",
    "start": "850639",
    "end": "852480"
  },
  {
    "text": "use of code cloud crossplane playground",
    "start": "852480",
    "end": "854800"
  },
  {
    "text": "environment that has a single node",
    "start": "854800",
    "end": "856959"
  },
  {
    "text": "kubernetes cluster and crossplane",
    "start": "856959",
    "end": "858880"
  },
  {
    "text": "installed already",
    "start": "858880",
    "end": "860399"
  },
  {
    "text": "and it also has an integrated aws cloud",
    "start": "860399",
    "end": "862959"
  },
  {
    "text": "playground that we can make use of to",
    "start": "862959",
    "end": "864959"
  },
  {
    "text": "deploy our resources",
    "start": "864959",
    "end": "867760"
  },
  {
    "text": "so here i'm making use of a cross plane",
    "start": "867760",
    "end": "870320"
  },
  {
    "text": "sandbox environment which already has",
    "start": "870320",
    "end": "872720"
  },
  {
    "text": "crossplane installed",
    "start": "872720",
    "end": "874639"
  },
  {
    "text": "within a kubernetes cluster",
    "start": "874639",
    "end": "878160"
  },
  {
    "text": "and it also has a short-lived aws",
    "start": "878160",
    "end": "880800"
  },
  {
    "text": "environment integrated that i'll be",
    "start": "880800",
    "end": "882720"
  },
  {
    "text": "making use of to deploy resources",
    "start": "882720",
    "end": "886079"
  },
  {
    "text": "now i want to point out that you can",
    "start": "886079",
    "end": "888160"
  },
  {
    "text": "pretty much use this on any kubernetes",
    "start": "888160",
    "end": "890320"
  },
  {
    "text": "cluster even a local cluster running",
    "start": "890320",
    "end": "892560"
  },
  {
    "text": "within your laptop",
    "start": "892560",
    "end": "894160"
  },
  {
    "text": "so let's first inspect this environment",
    "start": "894160",
    "end": "898759"
  },
  {
    "text": "so you can see here that this is a",
    "start": "899920",
    "end": "901440"
  },
  {
    "text": "single node kubernetes cluster that is",
    "start": "901440",
    "end": "903600"
  },
  {
    "text": "running the version 1.24",
    "start": "903600",
    "end": "907440"
  },
  {
    "text": "now let's also inspect the namespaces",
    "start": "907440",
    "end": "910000"
  },
  {
    "text": "which are available here",
    "start": "910000",
    "end": "913800"
  },
  {
    "text": "as you can see uh the cross plane system",
    "start": "913839",
    "end": "916000"
  },
  {
    "text": "name space is already available within",
    "start": "916000",
    "end": "917839"
  },
  {
    "text": "this cluster",
    "start": "917839",
    "end": "919199"
  },
  {
    "text": "let's inspect the all the objects which",
    "start": "919199",
    "end": "921199"
  },
  {
    "text": "are created within this namespace",
    "start": "921199",
    "end": "925480"
  },
  {
    "text": "as you can see here there are",
    "start": "931680",
    "end": "932880"
  },
  {
    "text": "deployments for the cross plane as well",
    "start": "932880",
    "end": "935440"
  },
  {
    "text": "as the cross plane provider for aws this",
    "start": "935440",
    "end": "938320"
  },
  {
    "text": "means that the aws provider has already",
    "start": "938320",
    "end": "941199"
  },
  {
    "text": "been installed and to validate that we",
    "start": "941199",
    "end": "943600"
  },
  {
    "text": "can run cube ctl get provider",
    "start": "943600",
    "end": "947519"
  },
  {
    "text": "you can see here that the crossplane",
    "start": "950639",
    "end": "952639"
  },
  {
    "text": "provider aws is installed and it is in a",
    "start": "952639",
    "end": "955440"
  },
  {
    "text": "healthy state",
    "start": "955440",
    "end": "956880"
  },
  {
    "text": "now this environment is integrated with",
    "start": "956880",
    "end": "959920"
  },
  {
    "text": "an aws sandbox which makes use of a",
    "start": "959920",
    "end": "962800"
  },
  {
    "text": "limited user with limited permissions so",
    "start": "962800",
    "end": "964959"
  },
  {
    "text": "that we can deploy certain resources for",
    "start": "964959",
    "end": "967440"
  },
  {
    "text": "this particular demo",
    "start": "967440",
    "end": "968959"
  },
  {
    "text": "now let's open up this console and see",
    "start": "968959",
    "end": "971759"
  },
  {
    "text": "what is currently configured for this",
    "start": "971759",
    "end": "973759"
  },
  {
    "text": "particular account",
    "start": "973759",
    "end": "977480"
  },
  {
    "text": "so we have opened the aws console now",
    "start": "994720",
    "end": "996959"
  },
  {
    "text": "let's go back to the terminal and let's",
    "start": "996959",
    "end": "999440"
  },
  {
    "text": "uh create the key account file",
    "start": "999440",
    "end": "1002240"
  },
  {
    "text": "that we can make use of to create our",
    "start": "1002240",
    "end": "1004079"
  },
  {
    "text": "provider config reference now this has",
    "start": "1004079",
    "end": "1006079"
  },
  {
    "text": "already been created within the system",
    "start": "1006079",
    "end": "1008320"
  },
  {
    "text": "and we can make use of this to create",
    "start": "1008320",
    "end": "1010480"
  },
  {
    "text": "our kubernetes secret that we will use",
    "start": "1010480",
    "end": "1013199"
  },
  {
    "text": "to authenticate from the cross plane to",
    "start": "1013199",
    "end": "1015600"
  },
  {
    "text": "our aws account",
    "start": "1015600",
    "end": "1018320"
  },
  {
    "text": "so to do this we will use the cube ctrl",
    "start": "1018320",
    "end": "1021040"
  },
  {
    "text": "create secret command and pass in the",
    "start": "1021040",
    "end": "1022800"
  },
  {
    "text": "key file",
    "start": "1022800",
    "end": "1025280"
  },
  {
    "text": "so now that the secret has been created",
    "start": "1025280",
    "end": "1027438"
  },
  {
    "text": "we can create the provider config",
    "start": "1027439",
    "end": "1029120"
  },
  {
    "text": "reference",
    "start": "1029120",
    "end": "1032120"
  },
  {
    "text": "and to do that we will make use of the",
    "start": "1039760",
    "end": "1041760"
  },
  {
    "text": "provider config dot yaml file",
    "start": "1041760",
    "end": "1046319"
  },
  {
    "text": "and as you can see here it's referencing",
    "start": "1046559",
    "end": "1048480"
  },
  {
    "text": "the secret that we just created are",
    "start": "1048480",
    "end": "1050400"
  },
  {
    "text": "called aws credits with the key of kretz",
    "start": "1050400",
    "end": "1054160"
  },
  {
    "text": "so let's create this object",
    "start": "1054160",
    "end": "1057840"
  },
  {
    "text": "so now that this particular object has",
    "start": "1062960",
    "end": "1065120"
  },
  {
    "text": "been created crossplane can authenticate",
    "start": "1065120",
    "end": "1067520"
  },
  {
    "text": "to our aws account so we can now go",
    "start": "1067520",
    "end": "1070240"
  },
  {
    "text": "ahead and create resources in aws",
    "start": "1070240",
    "end": "1073280"
  },
  {
    "text": "so i've created some sample uh",
    "start": "1073280",
    "end": "1075039"
  },
  {
    "text": "configuration files in yaml for the",
    "start": "1075039",
    "end": "1077679"
  },
  {
    "text": "managed services that we want to create",
    "start": "1077679",
    "end": "1079520"
  },
  {
    "text": "inside the ec2 directory",
    "start": "1079520",
    "end": "1081760"
  },
  {
    "text": "and here you can see that we've got our",
    "start": "1081760",
    "end": "1083440"
  },
  {
    "text": "different yaml files and these are the",
    "start": "1083440",
    "end": "1085600"
  },
  {
    "text": "resources that we're going to create so",
    "start": "1085600",
    "end": "1087120"
  },
  {
    "text": "we're going to create a vpc a subnet",
    "start": "1087120",
    "end": "1090160"
  },
  {
    "text": "a security group or route table an",
    "start": "1090160",
    "end": "1092880"
  },
  {
    "text": "internet gateway and a route table and",
    "start": "1092880",
    "end": "1095200"
  },
  {
    "text": "finally the ec2 instance so let's go",
    "start": "1095200",
    "end": "1097360"
  },
  {
    "text": "back to our aws console and first take a",
    "start": "1097360",
    "end": "1100080"
  },
  {
    "text": "look at",
    "start": "1100080",
    "end": "1101120"
  },
  {
    "text": "the vpcs which are currently available",
    "start": "1101120",
    "end": "1103280"
  },
  {
    "text": "in the no to virginia region which is us",
    "start": "1103280",
    "end": "1105600"
  },
  {
    "text": "each one and here you can see that there",
    "start": "1105600",
    "end": "1107600"
  },
  {
    "text": "is one single vpc right now in this",
    "start": "1107600",
    "end": "1110240"
  },
  {
    "text": "particular region",
    "start": "1110240",
    "end": "1111840"
  },
  {
    "text": "so let's go ahead and create a new vpc",
    "start": "1111840",
    "end": "1116559"
  },
  {
    "text": "now before we create let's just inspect",
    "start": "1117919",
    "end": "1119840"
  },
  {
    "text": "this yaml file so the api version for",
    "start": "1119840",
    "end": "1122480"
  },
  {
    "text": "this is",
    "start": "1122480",
    "end": "1124440"
  },
  {
    "text": "ec2.aws.crossplay.io which is the api",
    "start": "1124440",
    "end": "1126240"
  },
  {
    "text": "group and the version is v1 beta1 and",
    "start": "1126240",
    "end": "1129840"
  },
  {
    "text": "the kind is vpc the name of the vpc is",
    "start": "1129840",
    "end": "1132720"
  },
  {
    "text": "going to be sample vpc and under the",
    "start": "1132720",
    "end": "1135440"
  },
  {
    "text": "specs section we have four provider",
    "start": "1135440",
    "end": "1137679"
  },
  {
    "text": "field which is mandatory and within that",
    "start": "1137679",
    "end": "1140000"
  },
  {
    "text": "we have parameters which we have defined",
    "start": "1140000",
    "end": "1141679"
  },
  {
    "text": "the region is going to be us east one",
    "start": "1141679",
    "end": "1143919"
  },
  {
    "text": "the cider block is a custom one that we",
    "start": "1143919",
    "end": "1145760"
  },
  {
    "text": "have selected which is 10.0.0.0",
    "start": "1145760",
    "end": "1148720"
  },
  {
    "text": "16 and we have also",
    "start": "1148720",
    "end": "1150720"
  },
  {
    "text": "opted for some additional parameters",
    "start": "1150720",
    "end": "1152400"
  },
  {
    "text": "such as enable dns support is equal to",
    "start": "1152400",
    "end": "1154240"
  },
  {
    "text": "true insistency is default now you'll",
    "start": "1154240",
    "end": "1156880"
  },
  {
    "text": "also notice that we have supplied the",
    "start": "1156880",
    "end": "1158720"
  },
  {
    "text": "provider config reference here which is",
    "start": "1158720",
    "end": "1161280"
  },
  {
    "text": "the name of the object that we just",
    "start": "1161280",
    "end": "1163360"
  },
  {
    "text": "created which is called default now",
    "start": "1163360",
    "end": "1165520"
  },
  {
    "text": "let's go ahead and create this vpc using",
    "start": "1165520",
    "end": "1167679"
  },
  {
    "text": "cubectl create command",
    "start": "1167679",
    "end": "1171559"
  },
  {
    "text": "so now the vpc has been created let's",
    "start": "1179280",
    "end": "1181600"
  },
  {
    "text": "inspect the status by running cube ctl",
    "start": "1181600",
    "end": "1183760"
  },
  {
    "text": "vpc and you can see that the status is",
    "start": "1183760",
    "end": "1186720"
  },
  {
    "text": "ready",
    "start": "1186720",
    "end": "1187840"
  },
  {
    "text": "and it is synced so let's go back and",
    "start": "1187840",
    "end": "1189840"
  },
  {
    "text": "refresh",
    "start": "1189840",
    "end": "1191520"
  },
  {
    "text": "as you can see here the new vpc has",
    "start": "1191520",
    "end": "1193600"
  },
  {
    "text": "already been created",
    "start": "1193600",
    "end": "1195280"
  },
  {
    "text": "so similarly let's go ahead and create",
    "start": "1195280",
    "end": "1197360"
  },
  {
    "text": "uh the rest of the resources so i'm",
    "start": "1197360",
    "end": "1199840"
  },
  {
    "text": "going to first create the subnet",
    "start": "1199840",
    "end": "1204120"
  },
  {
    "text": "so using the same command",
    "start": "1207440",
    "end": "1209360"
  },
  {
    "text": "cube cto create dash f",
    "start": "1209360",
    "end": "1213520"
  },
  {
    "text": "subnet",
    "start": "1213600",
    "end": "1216080"
  },
  {
    "text": "and next let's create",
    "start": "1219039",
    "end": "1220960"
  },
  {
    "text": "the internet gateway",
    "start": "1220960",
    "end": "1224080"
  },
  {
    "text": "followed by the",
    "start": "1229760",
    "end": "1231440"
  },
  {
    "text": "root table",
    "start": "1231440",
    "end": "1234679"
  },
  {
    "text": "and finally let's also create a security",
    "start": "1235760",
    "end": "1237760"
  },
  {
    "text": "group",
    "start": "1237760",
    "end": "1239520"
  },
  {
    "text": "so the security group is going to be",
    "start": "1239520",
    "end": "1241039"
  },
  {
    "text": "called sample sg",
    "start": "1241039",
    "end": "1242960"
  },
  {
    "text": "and it has a reference for the vpc that",
    "start": "1242960",
    "end": "1245200"
  },
  {
    "text": "we created",
    "start": "1245200",
    "end": "1246400"
  },
  {
    "text": "and a firewall rule of type ingress or",
    "start": "1246400",
    "end": "1249600"
  },
  {
    "text": "to the port 22 from anywhere",
    "start": "1249600",
    "end": "1253960"
  },
  {
    "text": "so let's inspect the status of all the",
    "start": "1263440",
    "end": "1265679"
  },
  {
    "text": "managed resources that we have created",
    "start": "1265679",
    "end": "1267280"
  },
  {
    "text": "so far",
    "start": "1267280",
    "end": "1269760"
  },
  {
    "text": "and so here we can see that we have",
    "start": "1270720",
    "end": "1272320"
  },
  {
    "text": "created the vpc the subnet",
    "start": "1272320",
    "end": "1274880"
  },
  {
    "text": "the internet gateway the root table and",
    "start": "1274880",
    "end": "1277039"
  },
  {
    "text": "the security group now all that is left",
    "start": "1277039",
    "end": "1279360"
  },
  {
    "text": "is for us to create the",
    "start": "1279360",
    "end": "1281200"
  },
  {
    "text": "instance which is the ec2 instance",
    "start": "1281200",
    "end": "1284960"
  },
  {
    "text": "and in here we can see that the name of",
    "start": "1284960",
    "end": "1286799"
  },
  {
    "text": "the instance is going to be demo dash",
    "start": "1286799",
    "end": "1288559"
  },
  {
    "text": "ec2 instance and under the fall provider",
    "start": "1288559",
    "end": "1291360"
  },
  {
    "text": "section we have the mandatory parameters",
    "start": "1291360",
    "end": "1293760"
  },
  {
    "text": "which is region set to usb s1 and image",
    "start": "1293760",
    "end": "1296799"
  },
  {
    "text": "id set to",
    "start": "1296799",
    "end": "1298159"
  },
  {
    "text": "amazon linux image ami",
    "start": "1298159",
    "end": "1300400"
  },
  {
    "text": "and we have also optionally selected for",
    "start": "1300400",
    "end": "1302640"
  },
  {
    "text": "creating an ebs volume of size 30 gb and",
    "start": "1302640",
    "end": "1306640"
  },
  {
    "text": "here we are referencing the security",
    "start": "1306640",
    "end": "1308159"
  },
  {
    "text": "group that we just created called sample",
    "start": "1308159",
    "end": "1310159"
  },
  {
    "text": "sg and the subnet that we created",
    "start": "1310159",
    "end": "1312559"
  },
  {
    "text": "earlier",
    "start": "1312559",
    "end": "1313679"
  },
  {
    "text": "so let's go ahead and create this",
    "start": "1313679",
    "end": "1315280"
  },
  {
    "text": "instance but before that let's also go",
    "start": "1315280",
    "end": "1318159"
  },
  {
    "text": "and check the image id that uh the",
    "start": "1318159",
    "end": "1320480"
  },
  {
    "text": "instance type that is going to be",
    "start": "1320480",
    "end": "1321679"
  },
  {
    "text": "created for this instance so here we",
    "start": "1321679",
    "end": "1323600"
  },
  {
    "text": "have not supplied a instance type for",
    "start": "1323600",
    "end": "1326000"
  },
  {
    "text": "this particular uh",
    "start": "1326000",
    "end": "1327760"
  },
  {
    "text": "managed uh resource so it will offer a",
    "start": "1327760",
    "end": "1330880"
  },
  {
    "text": "default uh instance type which has been",
    "start": "1330880",
    "end": "1332960"
  },
  {
    "text": "configured for this",
    "start": "1332960",
    "end": "1334400"
  },
  {
    "text": "managed resource nscrd so to see that we",
    "start": "1334400",
    "end": "1336880"
  },
  {
    "text": "can actually go to the kubernetes for to",
    "start": "1336880",
    "end": "1339360"
  },
  {
    "text": "the crossplane documentation and in here",
    "start": "1339360",
    "end": "1341919"
  },
  {
    "text": "navigate to api documentation and go to",
    "start": "1341919",
    "end": "1344799"
  },
  {
    "text": "provider aws",
    "start": "1344799",
    "end": "1346799"
  },
  {
    "text": "and we are making use of the version",
    "start": "1346799",
    "end": "1348799"
  },
  {
    "text": "0.27.0",
    "start": "1348799",
    "end": "1350720"
  },
  {
    "text": "and in here let's look up the crd that",
    "start": "1350720",
    "end": "1353039"
  },
  {
    "text": "we are looking for here which is",
    "start": "1353039",
    "end": "1354880"
  },
  {
    "text": "instance",
    "start": "1354880",
    "end": "1357360"
  },
  {
    "text": "and if you click on that",
    "start": "1358960",
    "end": "1360480"
  },
  {
    "text": "under the spec section we can see that",
    "start": "1360480",
    "end": "1362480"
  },
  {
    "text": "the four provider field is required and",
    "start": "1362480",
    "end": "1364720"
  },
  {
    "text": "it only has two required parameters",
    "start": "1364720",
    "end": "1366640"
  },
  {
    "text": "which is image id",
    "start": "1366640",
    "end": "1368240"
  },
  {
    "text": "and the region now the instance type is",
    "start": "1368240",
    "end": "1371039"
  },
  {
    "text": "optional and if we do not supply it it",
    "start": "1371039",
    "end": "1373440"
  },
  {
    "text": "will by default create an instance type",
    "start": "1373440",
    "end": "1375760"
  },
  {
    "text": "of m1 small so let's go ahead and create",
    "start": "1375760",
    "end": "1378159"
  },
  {
    "text": "this instance",
    "start": "1378159",
    "end": "1381400"
  },
  {
    "text": "and now let's inspect uh the state uh",
    "start": "1389679",
    "end": "1392880"
  },
  {
    "text": "i've just run a watch command here and",
    "start": "1392880",
    "end": "1394960"
  },
  {
    "text": "run uh cube ctl get instance so let's",
    "start": "1394960",
    "end": "1398000"
  },
  {
    "text": "wait for it to be provisioned",
    "start": "1398000",
    "end": "1400240"
  },
  {
    "text": "so after a while you can see that the",
    "start": "1400240",
    "end": "1402480"
  },
  {
    "text": "instant state is in pending state",
    "start": "1402480",
    "end": "1405360"
  },
  {
    "text": "let's go back to our aws console",
    "start": "1405360",
    "end": "1408320"
  },
  {
    "text": "and navigate to the ec2 dashboard",
    "start": "1408320",
    "end": "1412759"
  },
  {
    "text": "and if i remove the filter here you can",
    "start": "1418880",
    "end": "1420720"
  },
  {
    "text": "see that",
    "start": "1420720",
    "end": "1421840"
  },
  {
    "text": "there is indeed a instance that has been",
    "start": "1421840",
    "end": "1424080"
  },
  {
    "text": "created with the instance type of m1",
    "start": "1424080",
    "end": "1426480"
  },
  {
    "text": "small",
    "start": "1426480",
    "end": "1429480"
  },
  {
    "text": "now once it's ready we can also try and",
    "start": "1432720",
    "end": "1435120"
  },
  {
    "text": "delete it from the aws console",
    "start": "1435120",
    "end": "1439360"
  },
  {
    "text": "and once that is done",
    "start": "1442960",
    "end": "1444799"
  },
  {
    "text": "you should be able to see that",
    "start": "1444799",
    "end": "1446480"
  },
  {
    "text": "crossplane continuously monitors it and",
    "start": "1446480",
    "end": "1449039"
  },
  {
    "text": "sees that it has been deleted and it",
    "start": "1449039",
    "end": "1451440"
  },
  {
    "text": "will try to",
    "start": "1451440",
    "end": "1452799"
  },
  {
    "text": "bring it back up",
    "start": "1452799",
    "end": "1454480"
  },
  {
    "text": "so that it reaches the decide state",
    "start": "1454480",
    "end": "1459080"
  },
  {
    "text": "so you can see here that the instance",
    "start": "1463360",
    "end": "1465600"
  },
  {
    "text": "has been terminated",
    "start": "1465600",
    "end": "1467919"
  },
  {
    "text": "and here the instance data is reflecting",
    "start": "1467919",
    "end": "1470559"
  },
  {
    "text": "as shutting down and soon crossplane",
    "start": "1470559",
    "end": "1473440"
  },
  {
    "text": "will bring up another instance to bring",
    "start": "1473440",
    "end": "1475520"
  },
  {
    "text": "it back to the desired state",
    "start": "1475520",
    "end": "1479120"
  },
  {
    "text": "there you go you can see that the",
    "start": "1479520",
    "end": "1481039"
  },
  {
    "text": "instant state is now pending a new id",
    "start": "1481039",
    "end": "1483200"
  },
  {
    "text": "has been created",
    "start": "1483200",
    "end": "1486600"
  },
  {
    "text": "you can see here that another instance",
    "start": "1488559",
    "end": "1490559"
  },
  {
    "text": "has been spun up in place of the old one",
    "start": "1490559",
    "end": "1494799"
  },
  {
    "text": "well that's it for this session i would",
    "start": "1495279",
    "end": "1497440"
  },
  {
    "text": "like to thank each one of you for",
    "start": "1497440",
    "end": "1499440"
  },
  {
    "text": "attending this talk i hope that you",
    "start": "1499440",
    "end": "1501520"
  },
  {
    "text": "found this session interesting and",
    "start": "1501520",
    "end": "1503200"
  },
  {
    "text": "useful and a special thank you for kcd",
    "start": "1503200",
    "end": "1506000"
  },
  {
    "text": "chennai for hosting me",
    "start": "1506000",
    "end": "1507679"
  },
  {
    "text": "thank you",
    "start": "1507679",
    "end": "1510480"
  }
]