[
  {
    "text": "thanks very much for being here and thanks to the organizers for inviting us",
    "start": "520",
    "end": "5960"
  },
  {
    "text": "so I'm Anastasio Nanos um I'm going to talk about uh our work on uni kernels H",
    "start": "5960",
    "end": "13719"
  },
  {
    "text": "how we integrated them into kubernetes and um how we um uh actually applied uni",
    "start": "13719",
    "end": "21160"
  },
  {
    "text": "Kels in a use case like uh uh K native and uh and",
    "start": "21160",
    "end": "26199"
  },
  {
    "text": "serverless um a bit of information about uh us so we're a young uh company um a",
    "start": "26199",
    "end": "33879"
  },
  {
    "text": "young we're doing research um we're involved in the in research and Commercial projects and uh we focus",
    "start": "33879",
    "end": "41680"
  },
  {
    "text": "mainly on system software on the low level parts of the of the stock uh this",
    "start": "41680",
    "end": "47239"
  },
  {
    "text": "is the team involved in the specific project so it's uh it's babies myself",
    "start": "47239",
    "end": "52320"
  },
  {
    "text": "yorgos and yanis all Greeks um so let's let's first go",
    "start": "52320",
    "end": "59559"
  },
  {
    "text": "through uh the the the broader topic of the of the presentation so we we were we were",
    "start": "59559",
    "end": "66280"
  },
  {
    "text": "interested in um um in in seress platforms where users write a function",
    "start": "66280",
    "end": "72439"
  },
  {
    "text": "in a high level language they pick the event to trigger this function and the",
    "start": "72439",
    "end": "77640"
  },
  {
    "text": "underlying framework handles everything else the um instance selection deployment scaling um monitoring logging",
    "start": "77640",
    "end": "85799"
  },
  {
    "text": "all all all this stuff um now there's a",
    "start": "85799",
    "end": "90880"
  },
  {
    "text": "there's a group in uh at hauri where they they they are doing",
    "start": "90880",
    "end": "96320"
  },
  {
    "text": "work on on systems in general um and they they focused on on serverless",
    "start": "96320",
    "end": "102560"
  },
  {
    "text": "platforms and the requirements of these platforms so they are building their own",
    "start": "102560",
    "end": "108759"
  },
  {
    "text": "uh system so they they they identified that there are issues regarding um",
    "start": "108759",
    "end": "116039"
  },
  {
    "text": "execution latency uh throughput um Energy Efficiency regarding the the execution",
    "start": "116039",
    "end": "122399"
  },
  {
    "text": "of the function on the on the hardware and um uh security and isolation of",
    "start": "122399",
    "end": "128440"
  },
  {
    "text": "these functions um in in this talk we focus on the first and the last one so low",
    "start": "128440",
    "end": "134280"
  },
  {
    "text": "latency uh um really uh low um the",
    "start": "134280",
    "end": "139680"
  },
  {
    "text": "response times of the uh of the of the function and um on isolating the actual",
    "start": "139680",
    "end": "147280"
  },
  {
    "text": "function from the rest of the of the of the platform uh so these these guys have",
    "start": "147280",
    "end": "155040"
  },
  {
    "text": "concerns about the systems software stack so they they mentioned that um it",
    "start": "155040",
    "end": "162640"
  },
  {
    "text": "retrofits Legacy infrastructure and presents High overhead when managing short LIF tasks so",
    "start": "162640",
    "end": "170040"
  },
  {
    "text": "[Music] um however uh kubernetes is still the",
    "start": "170040",
    "end": "175480"
  },
  {
    "text": "dominant orchestration framework and K native is a kubernetes native seress",
    "start": "175480",
    "end": "182640"
  },
  {
    "text": "framework so our our take was it's it's not a random project it's it's actually",
    "start": "182640",
    "end": "189920"
  },
  {
    "text": "something deployed and used by many many people so we we focus on trying to",
    "start": "189920",
    "end": "197200"
  },
  {
    "text": "optimize the parts of the stock that we care about and and see what's going on",
    "start": "197200",
    "end": "202840"
  },
  {
    "text": "there uh let's let's have a look at the at the architecture of K native so K native has a couple of components the",
    "start": "202840",
    "end": "209840"
  },
  {
    "text": "activator the autoscaler and the function pods these components are being triggered by uh external requests and",
    "start": "209840",
    "end": "217159"
  },
  {
    "text": "the the activator um talks to to the autoscaler the activator uh launches um",
    "start": "217159",
    "end": "223599"
  },
  {
    "text": "function pods and these function pods do the actual work um we we examine um uh",
    "start": "223599",
    "end": "232280"
  },
  {
    "text": "isolation issues in uh in this setup and we do that using um",
    "start": "232280",
    "end": "238239"
  },
  {
    "text": "sandboxing mechanism and we examine the response latency um",
    "start": "238239",
    "end": "244879"
  },
  {
    "text": "affect how how the response latency is affected by these isolation uh by the by",
    "start": "244879",
    "end": "251159"
  },
  {
    "text": "the sandboxing uh the functions um we we look into into cata",
    "start": "251159",
    "end": "258120"
  },
  {
    "text": "containers so we are we are involved in um uh in the in the community and uh",
    "start": "258120",
    "end": "264360"
  },
  {
    "text": "it's actually one one of the most mature Frameworks to sound books uh containers",
    "start": "264360",
    "end": "270520"
  },
  {
    "text": "into VMS so uh the cata containers runtime is CRI compatible that means you",
    "start": "270520",
    "end": "276800"
  },
  {
    "text": "can spawn uh kubernetes pods uh essentially the way it works is that it",
    "start": "276800",
    "end": "282039"
  },
  {
    "text": "spawns um a microv VM in um in AWS",
    "start": "282039",
    "end": "287160"
  },
  {
    "text": "firecracker in K Cloud hypervisor their own custom hypervisor Dragon Ball and",
    "start": "287160",
    "end": "293560"
  },
  {
    "text": "they they spawn all the containers in a pod in this micro VM um essentially the other other",
    "start": "293560",
    "end": "300479"
  },
  {
    "text": "sandboxing mechanisms like gvisor use the same principle if we if we apply uh this",
    "start": "300479",
    "end": "308440"
  },
  {
    "text": "sandbox container runtime into K native we we do that using the runtime class",
    "start": "308440",
    "end": "314400"
  },
  {
    "text": "option so we we end up with a figure like this so the K native function pod",
    "start": "314400",
    "end": "321080"
  },
  {
    "text": "is inside a microv VM so the rest of the stack is protected from the User",
    "start": "321080",
    "end": "327360"
  },
  {
    "text": "submitted code how ever there is this side car container the Q proxy container in K",
    "start": "327360",
    "end": "334280"
  },
  {
    "text": "native that is still in the same pod in the same name space in the same security",
    "start": "334280",
    "end": "341360"
  },
  {
    "text": "soundbox let's say um as the User submitted code additionally uh using these kind of",
    "start": "341360",
    "end": "349639"
  },
  {
    "text": "uh run times increases the cold boot time because you have to spawn the",
    "start": "349639",
    "end": "354960"
  },
  {
    "text": "microv VM you have to pass through the container with the Fest and spawn this um container",
    "start": "354960",
    "end": "362479"
  },
  {
    "text": "essentially and and we we ask ourselves what what if we had a way to",
    "start": "362479",
    "end": "369120"
  },
  {
    "text": "isolate the user container from the rest of the stack even from the C proxy container and at the same time reduce",
    "start": "369120",
    "end": "376039"
  },
  {
    "text": "coldwood times and of course our our mind goes to",
    "start": "376039",
    "end": "381960"
  },
  {
    "text": "UNI kernels um a bit of information about uniel a uniel is a specialized",
    "start": "381960",
    "end": "387720"
  },
  {
    "text": "single address based machine image it's built using a Library operating system and essentially it's tailored for",
    "start": "387720",
    "end": "395120"
  },
  {
    "text": "a single application there is no canar user space separation so we don't have",
    "start": "395120",
    "end": "400360"
  },
  {
    "text": "mode switches this is important for iio and for booting and it's um essentially",
    "start": "400360",
    "end": "407479"
  },
  {
    "text": "it contains the absolute minimum software components for the application to run however un canels are are seen as a",
    "start": "407479",
    "end": "415919"
  },
  {
    "text": "researchy approach uh there's this famous quote here that UNS are unfit for",
    "start": "415919",
    "end": "422800"
  },
  {
    "text": "production however lately there's there's there has been considerable work",
    "start": "422800",
    "end": "428680"
  },
  {
    "text": "to make them more mature we've got wider Library support and we've got many many",
    "start": "428680",
    "end": "437520"
  },
  {
    "text": "tools uh to facilitate adoption actually there are many Frameworks out there and",
    "start": "437520",
    "end": "443479"
  },
  {
    "text": "they each each framework is tailored to a specific use",
    "start": "443479",
    "end": "448520"
  },
  {
    "text": "case the issues that we have with uni kernels in in the cloud native ecosystem",
    "start": "448520",
    "end": "454280"
  },
  {
    "text": "is that they're not containers so we cannot use all the all the container tooling that exists and we like and they",
    "start": "454280",
    "end": "463560"
  },
  {
    "text": "are not typical VMS so we cannot reuse all the all the sandbox container anim",
    "start": "463560",
    "end": "469599"
  },
  {
    "text": "that exist and we can um uh use with",
    "start": "469599",
    "end": "475400"
  },
  {
    "text": "kubernetes so we we think and not not only us and",
    "start": "475400",
    "end": "481479"
  },
  {
    "text": "many people uh years ago um we we we saw",
    "start": "481479",
    "end": "486560"
  },
  {
    "text": "that un should look like oci images because oci is um used extensively in",
    "start": "486560",
    "end": "494560"
  },
  {
    "text": "the in the cloud native ecosystem and container an times should know how to",
    "start": "494560",
    "end": "499840"
  },
  {
    "text": "parse these oci images and boot the uni instead of a of um of the",
    "start": "499840",
    "end": "506280"
  },
  {
    "text": "container and we we thought let's build a unal compatible container R time how",
    "start": "506280",
    "end": "512880"
  },
  {
    "text": "how hard could it be um we so so we built uran C it's CRI compatible it's",
    "start": "512880",
    "end": "521039"
  },
  {
    "text": "written in go no surprises there it treats unial as processes so essentially",
    "start": "521039",
    "end": "527200"
  },
  {
    "text": "the container runtime manages the application not the actual system that the application runs on um unique IM is",
    "start": "527200",
    "end": "535560"
  },
  {
    "text": "RCI artifacts and we have this modular approach approach where you can plug in",
    "start": "535560",
    "end": "540959"
  },
  {
    "text": "hypervisors you can plug in unial Frameworks and end up with a uh generic",
    "start": "540959",
    "end": "546480"
  },
  {
    "text": "runtime let's say to to to to build the uniel into an oci image we used um uh",
    "start": "546480",
    "end": "556279"
  },
  {
    "text": "debug tool essentially we call it BMA we use a container file like syntax so",
    "start": "556279",
    "end": "562120"
  },
  {
    "text": "essentially it's like um a Docker file we copy the you can see in the figure",
    "start": "562120",
    "end": "568399"
  },
  {
    "text": "the the format we copy the binary we copy any any other extra files needed",
    "start": "568399",
    "end": "574519"
  },
  {
    "text": "like a configuration or extra libraries whatever and we annotate this container",
    "start": "574519",
    "end": "580560"
  },
  {
    "text": "image using labels um to facilitate the the execution from the container on time we",
    "start": "580560",
    "end": "588200"
  },
  {
    "text": "build it using the same way as as Docker and of course because this is a an oci",
    "start": "588200",
    "end": "593920"
  },
  {
    "text": "image you can use any any tools available uh for um for these images",
    "start": "593920",
    "end": "599120"
  },
  {
    "text": "like scope Yosi dive or you can you can push them to Harbor to dockerhub",
    "start": "599120",
    "end": "606040"
  },
  {
    "text": "um a a tricky part about the integration with kubernetes is that um there are",
    "start": "606600",
    "end": "613079"
  },
  {
    "text": "sidecar containers there there's the the the pose container or any any other side",
    "start": "613079",
    "end": "618680"
  },
  {
    "text": "container like in K native that we will see later what we what we did is that we we",
    "start": "618680",
    "end": "626200"
  },
  {
    "text": "check the annotations on the oci image and we say is this a unique anal image",
    "start": "626200",
    "end": "632200"
  },
  {
    "text": "then we use URC the standard code flow is this if it's not a unal image then we",
    "start": "632200",
    "end": "639040"
  },
  {
    "text": "we call run C with the rest of the of the software flow of the of the code",
    "start": "639040",
    "end": "644480"
  },
  {
    "text": "flow so essentially we've got this separation even on the same",
    "start": "644480",
    "end": "651440"
  },
  {
    "text": "pod if we if we if we apply this logic into the K native function pod then we",
    "start": "651440",
    "end": "658639"
  },
  {
    "text": "get um we we build the user function as a as a unial image we package it using",
    "start": "658639",
    "end": "665920"
  },
  {
    "text": "VMA so we've got an oci image and if we create the K native Service uh with",
    "start": "665920",
    "end": "672040"
  },
  {
    "text": "uran's runtime class we get the user container in a uniel so it's sandboxed",
    "start": "672040",
    "end": "679079"
  },
  {
    "text": "but the Q proxy container which is not a unial image is is a simple container so",
    "start": "679079",
    "end": "684760"
  },
  {
    "text": "it's booted using run C so the there is actual",
    "start": "684760",
    "end": "690000"
  },
  {
    "text": "hardware virtualization separation between the user container and the the",
    "start": "690000",
    "end": "696120"
  },
  {
    "text": "User submitted code and the rest of the platform stack so so we get security from",
    "start": "696120",
    "end": "703839"
  },
  {
    "text": "isolation from the User submitted code and faster Spa times because we don't we don't put the whole thing in a microv VM",
    "start": "703839",
    "end": "711040"
  },
  {
    "text": "we have an agent the agent talks to the r time and blah blah blah whatever happens with the with the soundbox",
    "start": "711040",
    "end": "716440"
  },
  {
    "text": "containers it's just a unque so to to prove our hypothesis that this",
    "start": "716440",
    "end": "723720"
  },
  {
    "text": "is faster from sandbox container R times we we got a server uh we set it up with",
    "start": "723720",
    "end": "730079"
  },
  {
    "text": "K native we tweaked um Caper um to make sure that we we measure",
    "start": "730079",
    "end": "739320"
  },
  {
    "text": "what we what we want to measure and we use a simple um HTTP reply function we",
    "start": "739320",
    "end": "746519"
  },
  {
    "text": "used go for the generic uh um containers the example from K native and we used C",
    "start": "746519",
    "end": "753079"
  },
  {
    "text": "for uni it was a bit easier so the what we expect to see is we we do a curl on",
    "start": "753079",
    "end": "761839"
  },
  {
    "text": "the on the host name and what we expect to see is the headers of uh of the",
    "start": "761839",
    "end": "768920"
  },
  {
    "text": "request plus the headers of the response um to to dig into what we",
    "start": "768920",
    "end": "775199"
  },
  {
    "text": "measure exactly we we built a um sequence diagram so we've got uh kerf",
    "start": "775199",
    "end": "782120"
  },
  {
    "text": "which issues the request goes through the Ingress controller goes through the activator it creates a",
    "start": "782120",
    "end": "789399"
  },
  {
    "text": "deployment um the the deployment essentially creates the K native function pod we've got the user",
    "start": "789399",
    "end": "795959"
  },
  {
    "text": "container and the Q proxy container and essentially the request goes into the uh",
    "start": "795959",
    "end": "801279"
  },
  {
    "text": "Q proxy container the C proy container forwards the request to the user container and we've got the way back the",
    "start": "801279",
    "end": "808680"
  },
  {
    "text": "response so we measure the whole thing we don't measure just the cold boot time uh the",
    "start": "808680",
    "end": "816079"
  },
  {
    "text": "we we call that service response Laten the numbers we took um show that",
    "start": "816079",
    "end": "825680"
  },
  {
    "text": "we get on the on the x-axis we've got all the all the container run times that we that we measured on the y axis we've",
    "start": "825680",
    "end": "832000"
  },
  {
    "text": "got the service respon laty what Caper said um we can see that",
    "start": "832000",
    "end": "839639"
  },
  {
    "text": "um the soundbox container run times are almost two times",
    "start": "839639",
    "end": "845040"
  },
  {
    "text": "slower uh so the the x axis is in um is in second so lower is better so all all",
    "start": "845040",
    "end": "852160"
  },
  {
    "text": "the soundbox container run times are twice as slow um and the generic runtime",
    "start": "852160",
    "end": "859040"
  },
  {
    "text": "run C and uran C are almost identical and this is the median value",
    "start": "859040",
    "end": "866120"
  },
  {
    "text": "if we if we show the 99th uh the the the percentile the slowest response again",
    "start": "866120",
    "end": "874480"
  },
  {
    "text": "all the soundbox container run times are twice as slow um uh the generic urany",
    "start": "874480",
    "end": "881199"
  },
  {
    "text": "are almost identical and we do that um for for many",
    "start": "881199",
    "end": "887519"
  },
  {
    "text": "instances so we we this is where we tweaked Cape Earth so that we can have",
    "start": "887519",
    "end": "893000"
  },
  {
    "text": "uh a one toone response uh from we we issue a request and we expect it to be",
    "start": "893000",
    "end": "899079"
  },
  {
    "text": "served by um a specific function and we need to measure that so we we spawned",
    "start": "899079",
    "end": "907000"
  },
  {
    "text": "300 um instances three 300 functions and we measured the behavior of the of the",
    "start": "907000",
    "end": "913959"
  },
  {
    "text": "various run times and what we saw is that again uh the soundbox container R",
    "start": "913959",
    "end": "920759"
  },
  {
    "text": "times um up to and 25 are almost two",
    "start": "920759",
    "end": "925959"
  },
  {
    "text": "times slower um then it goes goes up because we we saturate the cores",
    "start": "925959",
    "end": "931639"
  },
  {
    "text": "essentially and um the generic and uran see are almost identical they they scale",
    "start": "931639",
    "end": "938399"
  },
  {
    "text": "the same way and what we take from these from these early measurements is that we",
    "start": "938399",
    "end": "945639"
  },
  {
    "text": "we are able to isolate the user code using hardware virtualization",
    "start": "945639",
    "end": "950839"
  },
  {
    "text": "mechanisms and have the same um response latency the same um execution experience",
    "start": "950839",
    "end": "959680"
  },
  {
    "text": "let's see for for the user as a generic runtime where there's minimal isolation",
    "start": "959680",
    "end": "966000"
  },
  {
    "text": "and there are security concerns because the the K native threat model says that",
    "start": "966000",
    "end": "971480"
  },
  {
    "text": "you cannot spawn untrusted code you have you have to have a dedicated cluster to",
    "start": "971480",
    "end": "977959"
  },
  {
    "text": "be able to run user code now",
    "start": "977959",
    "end": "984000"
  },
  {
    "text": "uh perfect we have time so um",
    "start": "984000",
    "end": "989480"
  },
  {
    "text": "uh I'm going to show you a demo where we we have a build workflow how we how we",
    "start": "989480",
    "end": "995600"
  },
  {
    "text": "build the uni kernel how we build the image the oci image for the uniel and we",
    "start": "995600",
    "end": "1002839"
  },
  {
    "text": "how we push it to a to a registry and then we're going to boot these uni",
    "start": "1002839",
    "end": "1008319"
  },
  {
    "text": "kernels and show uh the the memory consumption um on on a on an edge node",
    "start": "1008319",
    "end": "1016240"
  },
  {
    "text": "on a Jetson on an Nvidia jeton oring um where we when we spawn tens of functions",
    "start": "1016240",
    "end": "1024240"
  },
  {
    "text": "on on these um devices how the how the memory consumption changes",
    "start": "1024240",
    "end": "1030010"
  },
  {
    "text": "[Music] um let me see if I can do",
    "start": "1030010",
    "end": "1037678"
  },
  {
    "text": "that presumably I can do that live I also have a video",
    "start": "1037679",
    "end": "1043918"
  },
  {
    "text": "but um",
    "start": "1043919",
    "end": "1050840"
  },
  {
    "text": "perfect let me just clear this stuff so",
    "start": "1052600",
    "end": "1059840"
  },
  {
    "text": "um yeah so there is this tool in in the jeton in the jeton Software System where",
    "start": "1061160",
    "end": "1068720"
  },
  {
    "text": "it's equivalent to H toop or to top but they they call it jtp because it has",
    "start": "1068720",
    "end": "1074440"
  },
  {
    "text": "more information about the GPU and stuff we don't care about that we just use we just care about the memory",
    "start": "1074440",
    "end": "1081760"
  },
  {
    "text": "consumption and let me",
    "start": "1081760",
    "end": "1089600"
  },
  {
    "text": "just go here so we've got",
    "start": "1089600",
    "end": "1097159"
  },
  {
    "text": "jtp and we're here let's let's have a look at the services so we have deployed a simple K native service we've",
    "start": "1097159",
    "end": "1105120"
  },
  {
    "text": "got we call it hello container um this is the the image that",
    "start": "1105120",
    "end": "1113360"
  },
  {
    "text": "I didn't show how it's being made so I triggered this just before my my my talk",
    "start": "1113360",
    "end": "1120440"
  },
  {
    "text": "so this is this is essentially a a GitHub",
    "start": "1120440",
    "end": "1127679"
  },
  {
    "text": "workflow where there are steps we that we build the uni kernel steps another",
    "start": "1127679",
    "end": "1133280"
  },
  {
    "text": "step that creates the image that signs it and pushes it to to a container Edge",
    "start": "1133280",
    "end": "1139120"
  },
  {
    "text": "so there's this HTP reply example this is the step where we build the uni",
    "start": "1139120",
    "end": "1144400"
  },
  {
    "text": "kernel it's a unicraft uni kernel so what we do essentially is we we clone",
    "start": "1144400",
    "end": "1153080"
  },
  {
    "text": "the repos we use the default config this is the C",
    "start": "1153080",
    "end": "1159320"
  },
  {
    "text": "thing same thing is for uh for",
    "start": "1159320",
    "end": "1165080"
  },
  {
    "text": "firecracker and we get we get the artifact the unial image",
    "start": "1165159",
    "end": "1173320"
  },
  {
    "text": "essentially then the next step is to actually prepare the image so we've got",
    "start": "1173320",
    "end": "1182159"
  },
  {
    "text": "the container file just as I I showed earlier in the in the slide so we've",
    "start": "1182159",
    "end": "1189360"
  },
  {
    "text": "got the unal binary we copy we annotate the image we enter information",
    "start": "1189360",
    "end": "1196679"
  },
  {
    "text": "about what kind of unial it is and what kind of hypervisor we we want to use we sign it we create a man we do that for",
    "start": "1196679",
    "end": "1204360"
  },
  {
    "text": "um uh armv8 and for x86 and we create a manifest so that we can glue the two uh",
    "start": "1204360",
    "end": "1211120"
  },
  {
    "text": "images together so the and and and the same and the same thing",
    "start": "1211120",
    "end": "1217400"
  },
  {
    "text": "happens uh for the generic application which is a a Docker file for the go for",
    "start": "1217400",
    "end": "1223400"
  },
  {
    "text": "the HTP reply go application so in a in a generic container uh for the K native",
    "start": "1223400",
    "end": "1229480"
  },
  {
    "text": "service we um create this service we call it hello container this is the",
    "start": "1229480",
    "end": "1234559"
  },
  {
    "text": "container image the one that's being pushed from the GitHub action and we",
    "start": "1234559",
    "end": "1240559"
  },
  {
    "text": "also created a domain mapping so that it's easier to uh to talk to it and we",
    "start": "1240559",
    "end": "1246760"
  },
  {
    "text": "have deployed this service and let's watch the pods everything is empty",
    "start": "1246760",
    "end": "1254159"
  },
  {
    "text": "I I'm not sure if you can see the ah maybe you can see it the memory",
    "start": "1254159",
    "end": "1259640"
  },
  {
    "text": "consumption and we use this tool hay",
    "start": "1259640",
    "end": "1264880"
  },
  {
    "text": "that so he is probably you already know about that uh we we issue 20 concurrent",
    "start": "1264880",
    "end": "1273360"
  },
  {
    "text": "requests and we do that for 15 seconds so if we do that we should be able to",
    "start": "1273360",
    "end": "1280360"
  },
  {
    "text": "see containers being created so these are this is the cold the cold boot time",
    "start": "1280360",
    "end": "1287080"
  },
  {
    "text": "and we should be able to see memory",
    "start": "1287080",
    "end": "1292120"
  },
  {
    "text": "consumption um now one one of the issues here is that uh and this is one of the",
    "start": "1292120",
    "end": "1298440"
  },
  {
    "text": "reasons that we tweaked kerf is that it didn't spawn 20 containers it didn't spawn 20 functions because the first",
    "start": "1298440",
    "end": "1305240"
  },
  {
    "text": "function served the first request and then started to serve the other request",
    "start": "1305240",
    "end": "1310320"
  },
  {
    "text": "so it's not it's not a one to one mapping with the graphs that we that I",
    "start": "1310320",
    "end": "1315400"
  },
  {
    "text": "that I showed earlier but you can get the point I mean the the memory consumption increased a little bit",
    "start": "1315400",
    "end": "1322440"
  },
  {
    "text": "because it's a um it's a generic container uh if we try to do",
    "start": "1322440",
    "end": "1329240"
  },
  {
    "text": "that using just go there so this is the generic container",
    "start": "1329240",
    "end": "1336200"
  },
  {
    "text": "let's go",
    "start": "1336200",
    "end": "1338679"
  },
  {
    "text": "to should be this one let's go to the to the cut fire",
    "start": "1341679",
    "end": "1348000"
  },
  {
    "text": "cracker case so we've got hello FC is the service the runtime class is Kata FC",
    "start": "1348000",
    "end": "1353600"
  },
  {
    "text": "the container image is the same and the and the domain name is hello",
    "start": "1353600",
    "end": "1359919"
  },
  {
    "text": "FC let's just wait for it to terminate to see the",
    "start": "1359919",
    "end": "1366520"
  },
  {
    "text": "the memory consumption as",
    "start": "1366520",
    "end": "1371279"
  },
  {
    "text": "before I think we're good 2.8 so if we if we do",
    "start": "1377440",
    "end": "1385320"
  },
  {
    "text": "that what happens or what should happen bit of",
    "start": "1385320",
    "end": "1391960"
  },
  {
    "text": "latency um what happens is that it spawns microv VMS the sandbox container",
    "start": "1391960",
    "end": "1398480"
  },
  {
    "text": "spawns the hello container the HD reply go and you can see that the memory",
    "start": "1398480",
    "end": "1404159"
  },
  {
    "text": "consumption is increasing and it's it's a lot different than than before so it's",
    "start": "1404159",
    "end": "1412200"
  },
  {
    "text": "5.4 5.5 still increasing and so what what we get from this",
    "start": "1412200",
    "end": "1419880"
  },
  {
    "text": "example is that if we want to be isolated if we want to isolate the user code we'll have to spend more memory we",
    "start": "1419880",
    "end": "1426640"
  },
  {
    "text": "we have to we have to um um let's say uh",
    "start": "1426640",
    "end": "1432919"
  },
  {
    "text": "get the the overhead of the microv VM of the sand boxing of the of the user",
    "start": "1432919",
    "end": "1439679"
  },
  {
    "text": "code and if we wait a bit for it to",
    "start": "1439679",
    "end": "1445840"
  },
  {
    "text": "terminate and we do the same with",
    "start": "1445840",
    "end": "1450919"
  },
  {
    "text": "um",
    "start": "1453520",
    "end": "1456520"
  },
  {
    "text": "onat",
    "start": "1467360",
    "end": "1470360"
  },
  {
    "text": "just okay should be ready in a couple of",
    "start": "1478880",
    "end": "1486880"
  },
  {
    "text": "seconds yeah we got 2.8 so if we if we do that with uh H C and firecracker",
    "start": "1491720",
    "end": "1498039"
  },
  {
    "text": "again",
    "start": "1498039",
    "end": "1500320"
  },
  {
    "text": "we can see it's not as low as the container but",
    "start": "1503600",
    "end": "1509200"
  },
  {
    "text": "it's a lot lower than the sandbox container and we get better latency than",
    "start": "1509200",
    "end": "1515399"
  },
  {
    "text": "before we get the the First Response latency we get isolated um",
    "start": "1515399",
    "end": "1523159"
  },
  {
    "text": "environment um so it's it's it's something that is",
    "start": "1523159",
    "end": "1528360"
  },
  {
    "text": "worth investigating at least um let me go back to the",
    "start": "1528360",
    "end": "1536080"
  },
  {
    "text": "presentation um so all of this wouldn't have been possible without uh the",
    "start": "1536080",
    "end": "1541520"
  },
  {
    "text": "funding that we get uh to do this kind of research is through uh EU projects",
    "start": "1541520",
    "end": "1548120"
  },
  {
    "text": "and to conclude we we can see that containers are really",
    "start": "1548120",
    "end": "1555080"
  },
  {
    "text": "great we we like it um we we we like them the all orchestration",
    "start": "1555080",
    "end": "1561919"
  },
  {
    "text": "platforms depend on on containers however they they present loose um uh",
    "start": "1561919",
    "end": "1569799"
  },
  {
    "text": "security and isolation uh uh they they have loose security and isolation issues",
    "start": "1569799",
    "end": "1576600"
  },
  {
    "text": "so by sandboxing them by by sandboxing these containers we get the isolation that we want but we also get overhead so",
    "start": "1576600",
    "end": "1584080"
  },
  {
    "text": "if if we can use uni Kels for this specific use case for for the serverless",
    "start": "1584080",
    "end": "1589320"
  },
  {
    "text": "use case if we can use unic to reduce the attack surface and to improve spawn times that might as well be be um okay",
    "start": "1589320",
    "end": "1600240"
  },
  {
    "text": "so in order to be able to do that we have to make unical Cloud native so this",
    "start": "1600240",
    "end": "1605279"
  },
  {
    "text": "this we we think that this is a um a first step to uh get Cloud native uni",
    "start": "1605279",
    "end": "1611320"
  },
  {
    "text": "kernels um all of our code is um is open source so you can see here from the",
    "start": "1611320",
    "end": "1617399"
  },
  {
    "text": "links uh you can go and play with uran see with bimma the the tool that we",
    "start": "1617399",
    "end": "1622600"
  },
  {
    "text": "build the oci image uh we also have the the workflow for building um the unicraft image and the um and the",
    "start": "1622600",
    "end": "1630559"
  },
  {
    "text": "generic application and push it to our registry uh so you can play with that and we also have a blog post about these",
    "start": "1630559",
    "end": "1636640"
  },
  {
    "text": "numbers and how details on how we took them what configuration uh we used Fork",
    "start": "1636640",
    "end": "1643200"
  },
  {
    "text": "native and that's it thanks very much for your attention",
    "start": "1643200",
    "end": "1650158"
  },
  {
    "text": "I'll be happy to take any questions online or",
    "start": "1656640",
    "end": "1661480"
  },
  {
    "text": "offline I guess everything was clear or not or everything was",
    "start": "1671960",
    "end": "1677120"
  },
  {
    "text": "unclear",
    "start": "1677120",
    "end": "1680120"
  },
  {
    "text": "hey thank you for uh sharing what you have done here there's certainly some interesting work in fills the gaps and",
    "start": "1698360",
    "end": "1703919"
  },
  {
    "text": "some that I've noticed uh trying to Mush together unic kernels and also so",
    "start": "1703919",
    "end": "1709080"
  },
  {
    "text": "kubernetes and container workflows uh is this generic across any unit kernel is",
    "start": "1709080",
    "end": "1714519"
  },
  {
    "text": "there adaption work that needs to be done to make this work like what does that workflow look like I'm sorry could",
    "start": "1714519",
    "end": "1720600"
  },
  {
    "text": "you repeat if this is it generic I I lost the other part uh what work needs to be done to",
    "start": "1720600",
    "end": "1728720"
  },
  {
    "text": "make a unic kernel able to be used here is it generic enough that you can just throw unic kernel that's x86 compatible",
    "start": "1728720",
    "end": "1736399"
  },
  {
    "text": "or does adaption work need to done to make it run using your run SE no no no",
    "start": "1736399",
    "end": "1741919"
  },
  {
    "text": "no it's you just have to you just have to uh create the the necessary hooks",
    "start": "1741919",
    "end": "1749960"
  },
  {
    "text": "let's say so that you can boot the unial with uran C it's essentially it creates",
    "start": "1749960",
    "end": "1755320"
  },
  {
    "text": "the command line interface that the hypervisor um uses to spawn it",
    "start": "1755320",
    "end": "1762039"
  },
  {
    "text": "so if I if I understand the the question correctly so for instance unicraft you",
    "start": "1762039",
    "end": "1767720"
  },
  {
    "text": "you have a specific command line or specific configuration file for fire cular let's say to to boot it so what we",
    "start": "1767720",
    "end": "1773919"
  },
  {
    "text": "do with WAN c is that we create the the hook to",
    "start": "1773919",
    "end": "1781080"
  },
  {
    "text": "um to to create this config file let's say or create the command line for K uh",
    "start": "1781080",
    "end": "1787159"
  },
  {
    "text": "so that can so that it can boot if is this what you're asking or yes thank you",
    "start": "1787159",
    "end": "1795279"
  },
  {
    "text": "perfect hello I got a question for you um one of the massive benefits of unic",
    "start": "1795279",
    "end": "1800640"
  },
  {
    "text": "kernels is spin up time you showed like how like fast they",
    "start": "1800640",
    "end": "1806080"
  },
  {
    "text": "were responding but not how fast they started up which is one reason I asked",
    "start": "1806080",
    "end": "1813399"
  },
  {
    "text": "that is you can almost get to per request unicel so you fire per request",
    "start": "1813399",
    "end": "1818760"
  },
  {
    "text": "that comes in a unic and I'm just curious if you've done any research in that space unfortunately not yet but we",
    "start": "1818760",
    "end": "1827039"
  },
  {
    "text": "we are in the in the process of doing that okay great so we we we we wanted to do that so in in this this figure in",
    "start": "1827039",
    "end": "1835720"
  },
  {
    "text": "this sequence diagram we want to break the time down but in order to do that we",
    "start": "1835720",
    "end": "1841279"
  },
  {
    "text": "need to annotate the other container ANS we have done that for uran C but we need to to do the same for Kata for gvisor",
    "start": "1841279",
    "end": "1848720"
  },
  {
    "text": "and for RC and we didn't have the time get to do that it's it's work in",
    "start": "1848720",
    "end": "1856679"
  },
  {
    "text": "progress",
    "start": "1856919",
    "end": "1859919"
  },
  {
    "text": "hi uh thanks for the talk um I'm just testing my understanding here am I right in thinking that if the user has a",
    "start": "1869240",
    "end": "1877000"
  },
  {
    "text": "pre-built uh oci image that you can't just run that image using the unic you",
    "start": "1877000",
    "end": "1883519"
  },
  {
    "text": "have to run beber to statically link the user's code first before so yes you have",
    "start": "1883519",
    "end": "1889320"
  },
  {
    "text": "to you have to glue you have to actually you have you have to glue the oci image",
    "start": "1889320",
    "end": "1895639"
  },
  {
    "text": "with a container an type so if the same stands if you you could just exec so you",
    "start": "1895639",
    "end": "1902360"
  },
  {
    "text": "could build an oci iMat with an annotation that says don't do any virtualization don't this is not a",
    "start": "1902360",
    "end": "1908399"
  },
  {
    "text": "unique this an application and that's what we did for for debugging and you",
    "start": "1908399",
    "end": "1913440"
  },
  {
    "text": "can uh you can tell the container on time that this is an application it's uni so you just exact the thing so it's",
    "start": "1913440",
    "end": "1921519"
  },
  {
    "text": "it's it's modular enough it's naive it's like a generic container",
    "start": "1921519",
    "end": "1927880"
  },
  {
    "text": "run time the the complicated part of URC was the the all these pink pongs and",
    "start": "1927880",
    "end": "1934760"
  },
  {
    "text": "back and forth you do to re EXA to fork and communicate with the original",
    "start": "1934760",
    "end": "1941440"
  },
  {
    "text": "original uh process and the the forked process using the the IP mechanisms",
    "start": "1941440",
    "end": "1948679"
  },
  {
    "text": "which is a bit of a of a mess but",
    "start": "1948679",
    "end": "1953480"
  },
  {
    "text": "yeah okay I think we're",
    "start": "1962320",
    "end": "1967360"
  },
  {
    "text": "done thanks very much thank",
    "start": "1967360",
    "end": "1972440"
  },
  {
    "text": "[Applause] you",
    "start": "1974220",
    "end": "1979840"
  }
]