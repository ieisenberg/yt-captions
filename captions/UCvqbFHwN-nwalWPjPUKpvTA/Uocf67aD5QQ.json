[
  {
    "start": "0",
    "end": "25000"
  },
  {
    "text": "right good morning everybody welcome to cue letters network security demystified",
    "start": "30",
    "end": "7099"
  },
  {
    "text": "my name is Andy I'm a co-founder of control plane I've done a little bit of everything",
    "start": "7099",
    "end": "13429"
  },
  {
    "text": "braudys dev sec ops but I think it's just engineering to the rest of us and control plane our continuous delivery",
    "start": "13429",
    "end": "20660"
  },
  {
    "text": "container security consultancy so what",
    "start": "20660",
    "end": "27060"
  },
  {
    "start": "25000",
    "end": "25000"
  },
  {
    "text": "is network security and why do we need it it's a way to ensure privates trusted",
    "start": "27060",
    "end": "33020"
  },
  {
    "text": "communications across potentially untrusted networks with malicious actors",
    "start": "33020",
    "end": "38969"
  },
  {
    "text": "like the internet and why do we need it because we can't trust anything the",
    "start": "38969",
    "end": "45570"
  },
  {
    "start": "42000",
    "end": "42000"
  },
  {
    "text": "internet was built for academics with trust between all the workloads and unlike those wonderful origins we no",
    "start": "45570",
    "end": "53640"
  },
  {
    "text": "longer can trust everything else by default we think about runtimes and we",
    "start": "53640",
    "end": "59399"
  },
  {
    "start": "56000",
    "end": "56000"
  },
  {
    "text": "write software for the happy path for the day boating on the lake when in",
    "start": "59399",
    "end": "64768"
  },
  {
    "text": "reality there are pirates everywhere we should be designing our systems for",
    "start": "64769",
    "end": "70080"
  },
  {
    "text": "hostile conditions resilience is key so",
    "start": "70080",
    "end": "75229"
  },
  {
    "text": "how does Cuban lettuce do this it uses lots of standard components but",
    "start": "75229",
    "end": "80670"
  },
  {
    "text": "sometimes in a slightly different way to the internet for example self-signed certificates on the internet are",
    "start": "80670",
    "end": "86520"
  },
  {
    "text": "considered bad and a normally a sign that we have intercepted network communications or potentially it's a",
    "start": "86520",
    "end": "93090"
  },
  {
    "text": "man-in-the-middle attack so we'll look at how cuban Etta's uses encryption establishes trust and",
    "start": "93090",
    "end": "99540"
  },
  {
    "text": "finally determines identity from the protocols that keeps cuban s is secure",
    "start": "99540",
    "end": "104790"
  },
  {
    "text": "and our workload safe and if there's one takeaway from this it is encrypts",
    "start": "104790",
    "end": "110250"
  },
  {
    "start": "109000",
    "end": "109000"
  },
  {
    "text": "everything everywhere we're at the bleeding edge of a revolution that is already permeating traditional",
    "start": "110250",
    "end": "116820"
  },
  {
    "text": "enterprise systems these systems have high and audits and compliance requirements and breaking away from",
    "start": "116820",
    "end": "123149"
  },
  {
    "text": "traditionally established network security patterns is difficult there are many layers to security onion but the",
    "start": "123149",
    "end": "129899"
  },
  {
    "text": "cloud native landscape now gives us a problem and an opportunity it's difficult to",
    "start": "129899",
    "end": "135600"
  },
  {
    "text": "encrypt everything and it's also difficult to encrypt workloads that constantly churn as we expect containers",
    "start": "135600",
    "end": "141420"
  },
  {
    "text": "to do to die to be rescheduled in other places the spiffing project is looking",
    "start": "141420",
    "end": "146850"
  },
  {
    "text": "to solve these issues for us so this subject is broad and deep we will",
    "start": "146850",
    "end": "152340"
  },
  {
    "text": "scratch the surface of a few things go into a little bit more detail in others and hopefully leave you with enough",
    "start": "152340",
    "end": "157980"
  },
  {
    "text": "hooks to go and explore the things that you find interesting so we'll talk about network security 101 Cuba NASA's API",
    "start": "157980",
    "end": "165330"
  },
  {
    "text": "components and their secure into communication TLS x.509 and mutual",
    "start": "165330",
    "end": "171450"
  },
  {
    "text": "authentication contain a network interface and network policies for applications and finally bootstrapping",
    "start": "171450",
    "end": "177720"
  },
  {
    "text": "identity with spiffy secure production identity framework for everybody",
    "start": "177720",
    "end": "183680"
  },
  {
    "text": "without the framework perhaps so what do we want from network security we want private and trusted communications",
    "start": "183680",
    "end": "191720"
  },
  {
    "text": "privates yeah very interesting I wonder if that is the sign of things to come",
    "start": "191720",
    "end": "197840"
  },
  {
    "text": "private means confidential and trusted means with integrity that is a network",
    "start": "197840",
    "end": "207600"
  },
  {
    "text": "failure I'm afraid so I will just have it to my phone non-repudiation sometimes also",
    "start": "207600",
    "end": "213120"
  },
  {
    "text": "makes an appearance here all that really means is cryptographically we can prove that the person who sent the message",
    "start": "213120",
    "end": "220820"
  },
  {
    "text": "cannot disprove that they sent the message and this is relevant in courts often excuse me for moments network",
    "start": "220820",
    "end": "232320"
  },
  {
    "text": "again",
    "start": "232320",
    "end": "234680"
  },
  {
    "text": "okay and things back later on so normally slide we would expect here voila what a relief",
    "start": "239440",
    "end": "245710"
  },
  {
    "text": "so normally let's just recap briefly yes haha the rise of the hackers of course",
    "start": "245710",
    "end": "252240"
  },
  {
    "text": "private confidential trusted with integrity and authentication nor affiliation we kind of think care about",
    "start": "252240",
    "end": "258070"
  },
  {
    "text": "but it falls under the same banner so how does this look like from a human metaphorical perspective well we can",
    "start": "258070",
    "end": "264820"
  },
  {
    "text": "trust when someone's whispering to us do we know who they are and we have privacy",
    "start": "264820",
    "end": "269950"
  },
  {
    "text": "because the hand is protecting anyone from reading the lips or hearing the sounds this is a bit like a private air",
    "start": "269950",
    "end": "277030"
  },
  {
    "text": "gapped network we believe there's nobody else there so we take few or no additional steps to verify the integrity",
    "start": "277030",
    "end": "283720"
  },
  {
    "text": "and the authenticity of the other party this is okay in that the smallest sliver",
    "start": "283720",
    "end": "289540"
  },
  {
    "text": "of situations it's not okay the rest of the time if someone else sneaks into the",
    "start": "289540",
    "end": "294850"
  },
  {
    "text": "room or is hanging from the eaves then our privacy is broken we need privacy",
    "start": "294850",
    "end": "301060"
  },
  {
    "text": "and Trust so how does this work on bigger networks communicating over a public network is like shouting across a",
    "start": "301060",
    "end": "307540"
  },
  {
    "text": "crowded streets we can see the speaker or the IP and we can hear their voice",
    "start": "307540",
    "end": "313420"
  },
  {
    "text": "synchronize with the movement of their lips but is this enough to trust somebody well it kind of used to be with",
    "start": "313420",
    "end": "320380"
  },
  {
    "text": "the advent of all these deep learning generated faiths perhaps we will need to",
    "start": "320380",
    "end": "325750"
  },
  {
    "text": "apply cryptography to even the most mundane of video communications in the future but again this only works when",
    "start": "325750",
    "end": "331990"
  },
  {
    "text": "both parties are local and have seen each other before to establish some sort of trust what happens in life when we",
    "start": "331990",
    "end": "338350"
  },
  {
    "text": "need to communicate remotely we use the postal service this again is analogous",
    "start": "338350",
    "end": "343690"
  },
  {
    "text": "to the bigger Internet and the postal service question do we trust when we send a message from one place to another",
    "start": "343690",
    "end": "349870"
  },
  {
    "text": "that it arrives unopened and that it's from the original sender well the UK has",
    "start": "349870",
    "end": "356800"
  },
  {
    "text": "a long history of intercepting communications steaming open envelopes",
    "start": "356800",
    "end": "362850"
  },
  {
    "text": "capturing the entirety of Internet traffic the transits out of the country so in order to get our privacy in the",
    "start": "362850",
    "end": "370060"
  },
  {
    "text": "postal service or indeed on the Internet we rely on encryption and on the internet",
    "start": "370060",
    "end": "375949"
  },
  {
    "text": "that encryption is known as HTTP secure or HTTP or TLS and back to yearn time to",
    "start": "375949",
    "end": "383780"
  },
  {
    "text": "1991 there were no certificates and there was no Geocities but I thought it was a good opportunity to spark some",
    "start": "383780",
    "end": "390410"
  },
  {
    "text": "nostalgia we tried for a few years and eventually SSL v1 it was no good it was",
    "start": "390410",
    "end": "396560"
  },
  {
    "text": "too difficult it was broken we had SSL version two more security flaws fundamentally these are very",
    "start": "396560",
    "end": "402289"
  },
  {
    "text": "difficult problems to solve we went to SSL version 3 again we see it's obsolete and then TLS transport layer security",
    "start": "402289",
    "end": "409220"
  },
  {
    "text": "replaced secure socket layer but they're essentially the same thing with some small backwards and compatibilities we",
    "start": "409220",
    "end": "416630"
  },
  {
    "text": "move through TLS 1.1 1.2 is proliferated now and we're just at the verge of",
    "start": "416630",
    "end": "421759"
  },
  {
    "text": "getting 1.3 out of the door despite some standards wranglings still going on the only take away from this is",
    "start": "421759",
    "end": "429070"
  },
  {
    "text": "cryptography is broken all the time with the advent of more computing power we're about to move into post quantum",
    "start": "429070",
    "end": "435470"
  },
  {
    "text": "cryptographic algorithms which have been investigated by parties in the TLS 1.3 spec the only point here is keep your",
    "start": "435470",
    "end": "442340"
  },
  {
    "text": "systems patched and up-to-date easier to do in containers than with hosts immutable infrastructures our friend etc",
    "start": "442340",
    "end": "448639"
  },
  {
    "text": "so is it that simple will smith says no",
    "start": "448639",
    "end": "454099"
  },
  {
    "text": "a single mistake anywhere in configuration implementation or usage",
    "start": "454099",
    "end": "459139"
  },
  {
    "text": "can compromise the integrity of our encryption leading to the oft cited aphorism don't roll your own and there's",
    "start": "459139",
    "end": "466729"
  },
  {
    "text": "no greater challenge for a cryptography nerd than an unhackable cipher see",
    "start": "466729",
    "end": "472099"
  },
  {
    "text": "blu-ray cryptography is just a mathematical puzzle with some strict assumptions and with that warning on to",
    "start": "472099",
    "end": "480500"
  },
  {
    "text": "kubernetes so securing the API server there are lots of security flags on the",
    "start": "480500",
    "end": "487159"
  },
  {
    "start": "484000",
    "end": "484000"
  },
  {
    "text": "API server these are certificates difficult authorities and keys being configured we're using TLS everywhere",
    "start": "487159",
    "end": "494440"
  },
  {
    "text": "how does TLS work glad you asked we start with the certificate signing",
    "start": "494440",
    "end": "499970"
  },
  {
    "text": "request which details the identity that we want to be cryptographically signed and guaranteed",
    "start": "499970",
    "end": "506120"
  },
  {
    "text": "passed it through to a certificate authority who we trust either on the internet through a global trusted root",
    "start": "506120",
    "end": "511280"
  },
  {
    "text": "store that are trusted operating system vendors put onto our machines and keep updated for us and there's a revocation",
    "start": "511280",
    "end": "518779"
  },
  {
    "text": "list which means sometimes those certificate routes have been compromised or become untrusted as Symantec has",
    "start": "518779",
    "end": "526010"
  },
  {
    "text": "recently been from chrome and soon from Mozilla as well and then finally we have",
    "start": "526010",
    "end": "531080"
  },
  {
    "text": "the certificate and when we have that certificate we can guarantee that the",
    "start": "531080",
    "end": "536360"
  },
  {
    "text": "certificate signing request data that is now in that certificate is legitimate via the certificate chain of trust we",
    "start": "536360",
    "end": "544850"
  },
  {
    "text": "start off with a certificate authority again on the Internet these are the globally trusted root stores we can also",
    "start": "544850",
    "end": "550370"
  },
  {
    "text": "run these privately in our own PKI infrastructure and this is what we're doing with Cuban s is and everything we",
    "start": "550370",
    "end": "557360"
  },
  {
    "text": "have here at each layer from sniff Cora T signing an intermediate certificate in case the intermediate is compromised we",
    "start": "557360",
    "end": "563930"
  },
  {
    "text": "can then rotate it easily by keeping the private element of the root certificate authority offline and then finally that",
    "start": "563930",
    "end": "571010"
  },
  {
    "text": "signs the leaf or end-user certs and that leaf is what we get when we go to a website and that leaf is what we",
    "start": "571010",
    "end": "577640"
  },
  {
    "text": "distribute and that leaf contains our certificate signing request information so what are all these they are x.509",
    "start": "577640",
    "end": "585770"
  },
  {
    "text": "certificates which very simply is just a standard to define difficut in this case",
    "start": "585770",
    "end": "592630"
  },
  {
    "text": "okay so we kind of have a broad TLS description x.509 is the transport",
    "start": "592630",
    "end": "599660"
  },
  {
    "text": "mechanism to pass these around by and we've also got mutual authentication so",
    "start": "599660",
    "end": "605150"
  },
  {
    "text": "we have a question now about how we bootstrap this authentication process how we establish new encryption keys",
    "start": "605150",
    "end": "612560"
  },
  {
    "text": "across a network that we don't trust because initially with bootstrapping the",
    "start": "612560",
    "end": "617570"
  },
  {
    "text": "encryption we're not already encrypted so simply asymmetric public key",
    "start": "617570",
    "end": "624500"
  },
  {
    "text": "cryptography is way to encoder secrets using a public piece of information that",
    "start": "624500",
    "end": "631160"
  },
  {
    "text": "the recipient the target has publicly shared and we can use that to establish",
    "start": "631160",
    "end": "636860"
  },
  {
    "text": "a shared secret which we then used to encrypt the message in a way that only the recipients can decrypt it",
    "start": "636860",
    "end": "645210"
  },
  {
    "text": "so very simply the public key is available for everybody these are the things presented by web servers when we",
    "start": "645210",
    "end": "652060"
  },
  {
    "text": "go and visit them and we use that public key to open up the metaphorical box",
    "start": "652060",
    "end": "657100"
  },
  {
    "text": "containing a message we insert the message that is private and only for the intended recipients and then the box can",
    "start": "657100",
    "end": "664360"
  },
  {
    "text": "only be opened by separate key and this is essentially public asymmetric",
    "start": "664360",
    "end": "670960"
  },
  {
    "text": "encryption there are a few bits of glossary logo fee very briefly here",
    "start": "670960",
    "end": "677470"
  },
  {
    "start": "674000",
    "end": "674000"
  },
  {
    "text": "symmetric encryption I mean these are kind of maybe willfully ambiguous but",
    "start": "677470",
    "end": "683380"
  },
  {
    "text": "actually it's really simple symmetric encryption it's just the same key used to do the encryption and the decryption",
    "start": "683380",
    "end": "688740"
  },
  {
    "text": "obviously this doesn't scale when we want to distribute the keys globally so",
    "start": "688740",
    "end": "693880"
  },
  {
    "text": "that all clients can talk to our web server CN CF dot IO etc so asymmetric",
    "start": "693880",
    "end": "699400"
  },
  {
    "text": "encryption is what we've just seen using different keys either side of the encryption lock and unlock process then",
    "start": "699400",
    "end": "707080"
  },
  {
    "text": "we have elliptic curve curve cryptography which is the fundamental",
    "start": "707080",
    "end": "712420"
  },
  {
    "text": "technique upon which these tickets the mathematical technique for these certificates are based and it basically",
    "start": "712420",
    "end": "718720"
  },
  {
    "text": "means that when you plot this curve shape on a graph and when certain guarantees are made for example the",
    "start": "718720",
    "end": "724870"
  },
  {
    "text": "curve doesn't cross and loops around the plane then we end up with something a bit like this and we can essentially use",
    "start": "724870",
    "end": "731200"
  },
  {
    "text": "the properties of this algorithm to generate the values which we use for",
    "start": "731200",
    "end": "737200"
  },
  {
    "text": "encryption and the point is they're very very difficult to brute-force we won't go any further into elliptic",
    "start": "737200",
    "end": "743680"
  },
  {
    "text": "curve cryptography because this is a lifetime study for the cryptographers who keep us safe so and the point here",
    "start": "743680",
    "end": "752080"
  },
  {
    "text": "is that we finally ended up with diffie-hellman which is a way to create these shared encryption keys without",
    "start": "752080",
    "end": "757720"
  },
  {
    "text": "ever communicating the key across a public untrusted Network and these gentlemen mr. Diffie and Hellman are the",
    "start": "757720",
    "end": "764290"
  },
  {
    "text": "heroes of cryptography since 1976 they fought with the US government they were threatened for the the export cipher",
    "start": "764290",
    "end": "773740"
  },
  {
    "text": "the US government put weapons grades controls around these technologies and",
    "start": "773740",
    "end": "779020"
  },
  {
    "text": "these you guys really pioneered all the privacy and cryptography elements that helped to keep it safe today so brief",
    "start": "779020",
    "end": "786880"
  },
  {
    "text": "whizzed through that Lottery and on - oh and it's further this is a really",
    "start": "786880",
    "end": "793360"
  },
  {
    "text": "interesting cat based description of the handshake in slightly more detail I would recommend you check it out",
    "start": "793360",
    "end": "800680"
  },
  {
    "start": "800000",
    "end": "800000"
  },
  {
    "text": "so we are now using the original crypto not this shits and on we go back to cue",
    "start": "800680",
    "end": "809770"
  },
  {
    "text": "Vanessa's land so the API server is presenting a certificate when cube control wants to connect to the API and",
    "start": "809770",
    "end": "816010"
  },
  {
    "text": "goes into the doc cube config and normally what will happen in there although it's there are many different",
    "start": "816010",
    "end": "821649"
  },
  {
    "text": "authentication mechanisms but with a self-signed certificate the public key",
    "start": "821649",
    "end": "827140"
  },
  {
    "text": "of the root CA which in this case is cube neces is embedded into the cube",
    "start": "827140",
    "end": "832480"
  },
  {
    "text": "config and that's used to connect to the cube api server and trust that",
    "start": "832480",
    "end": "837790"
  },
  {
    "text": "certificate so we're back to this chain of trust we have self signed our own certificate authority and when we come",
    "start": "837790",
    "end": "843970"
  },
  {
    "text": "to I will come to communicate with kubernetes api server we trust it because we have its public key this is",
    "start": "843970",
    "end": "851350"
  },
  {
    "text": "what would normally be distributed by operating system vendors in this case we have our own version because Cuba NetID",
    "start": "851350",
    "end": "857260"
  },
  {
    "text": "is signing this for us and and what we actually have is a public key presented",
    "start": "857260",
    "end": "863230"
  },
  {
    "text": "we're back to the components these are the things that make up the certificate",
    "start": "863230",
    "end": "868390"
  },
  {
    "text": "signing request to go into the certificate what does that certificate look like well here is the spec and how",
    "start": "868390",
    "end": "877089"
  },
  {
    "text": "do we know that we can trust it the certificate path validation that we've looked at earlier this is next 509",
    "start": "877089",
    "end": "883180"
  },
  {
    "start": "880000",
    "end": "880000"
  },
  {
    "text": "certificate if you can guess what it is you win a prize and and yeah this lump",
    "start": "883180",
    "end": "890110"
  },
  {
    "text": "of junk can be passed through standard command-line tools like open SSL and it",
    "start": "890110",
    "end": "895209"
  },
  {
    "text": "will decode itself and tell you all the information inside there it's really just containing you could imagine it",
    "start": "895209",
    "end": "900880"
  },
  {
    "text": "like it's just a tarball of information although not literally and and there is",
    "start": "900880",
    "end": "906220"
  },
  {
    "text": "a certificate has been decoded so we're back to these self-signed certificates and we remember",
    "start": "906220",
    "end": "912549"
  },
  {
    "start": "909000",
    "end": "909000"
  },
  {
    "text": "self-signed certificates on the internet are bad we don't trust them that could be the sign of a man-in-the-middle",
    "start": "912549",
    "end": "917679"
  },
  {
    "text": "attack where somebody has intercept is our connection to a server so it may",
    "start": "917679",
    "end": "925239"
  },
  {
    "text": "seem that running our own certificate authorities is a bad idea but when we're",
    "start": "925239",
    "end": "930699"
  },
  {
    "text": "able to distribute the public key of our root CA we can gain some advantages for example we can rotate those certificates",
    "start": "930699",
    "end": "937659"
  },
  {
    "text": "very aggressively and in fact sto has a default one-hour rotation policy on",
    "start": "937659",
    "end": "943239"
  },
  {
    "text": "those certificates there is not enough global computing power to brute force a certificate in an hour in fact it's a",
    "start": "943239",
    "end": "949899"
  },
  {
    "text": "lot longer because these are very difficult problems so yeah so",
    "start": "949899",
    "end": "955019"
  },
  {
    "text": "self-signed certificates can be used in when we owned the entire Trust domain",
    "start": "955019",
    "end": "961629"
  },
  {
    "text": "not on the internet so we've mentioned this a couple times already the TLS",
    "start": "961629",
    "end": "969249"
  },
  {
    "start": "965000",
    "end": "965000"
  },
  {
    "text": "handshake again we won't go into too much detail but this is just the client and the server saying hi clients ask the",
    "start": "969249",
    "end": "976479"
  },
  {
    "text": "server who are you the server replies with its cryptographic identity we have the privacy we have the trust because we",
    "start": "976479",
    "end": "983709"
  },
  {
    "text": "can take the certificate back to our trusted root store whether it's self signed the public and the client knows",
    "start": "983709",
    "end": "990009"
  },
  {
    "text": "that the server is who they claim to be mutual TLS is the same thing but the",
    "start": "990009",
    "end": "996159"
  },
  {
    "start": "995000",
    "end": "995000"
  },
  {
    "text": "client also presents the certificate so this means that we have two-way identity",
    "start": "996159",
    "end": "1001589"
  },
  {
    "text": "guarantees and establishing a two-way trust mechanism is a good thing we know",
    "start": "1001589",
    "end": "1006899"
  },
  {
    "text": "the identity of both parties and that enhances our baseline of security",
    "start": "1006899",
    "end": "1012169"
  },
  {
    "text": "so just to recap we want private confidential encrypted communications we",
    "start": "1012169",
    "end": "1017999"
  },
  {
    "text": "are trusted and we have integrity from the encryption and the cipher guarantees that we get the correct output with the",
    "start": "1017999",
    "end": "1024149"
  },
  {
    "text": "correct key so securing the API server traffic do we trust our networks will",
    "start": "1024149",
    "end": "1032699"
  },
  {
    "text": "frankly no and why should we if a malicious actor gets inside the perimeter they have access to everything",
    "start": "1032699",
    "end": "1039000"
  },
  {
    "text": "behind it phrases such as perimeter and DMZ are old-school network security language",
    "start": "1039000",
    "end": "1045449"
  },
  {
    "text": "that should raise flags in a cloud native environment so Google have a solution for this called beyond core",
    "start": "1045449",
    "end": "1052019"
  },
  {
    "text": "designed as a response to these newly emergent threats this basically says the",
    "start": "1052019",
    "end": "1057630"
  },
  {
    "text": "mantra is trust nothing validates everything because the best way to bring pain forward and ensure that",
    "start": "1057630",
    "end": "1063419"
  },
  {
    "text": "configurations are secure is to run everything publicly and revalidate every connection this is called zero trust and",
    "start": "1063419",
    "end": "1071330"
  },
  {
    "text": "it contrasts deeply with traditional perimeter based security such as Equifax",
    "start": "1071330",
    "end": "1077399"
  },
  {
    "text": "in once and then the entirety of the network is is pivotable and approachable",
    "start": "1077399",
    "end": "1082620"
  },
  {
    "text": "so this is all described in the book zero trust networks by spiffy author",
    "start": "1082620",
    "end": "1088980"
  },
  {
    "start": "1084000",
    "end": "1084000"
  },
  {
    "text": "Evan Gilman if you want to understand the future of the way we're going to lock down workloads and applications",
    "start": "1088980",
    "end": "1094620"
  },
  {
    "text": "over the next few years this is a great starting point but back to the API",
    "start": "1094620",
    "end": "1101909"
  },
  {
    "text": "server so what does zero Trust really mean in this context are we really running a zero trust API",
    "start": "1101909",
    "end": "1108870"
  },
  {
    "start": "1102000",
    "end": "1102000"
  },
  {
    "text": "server well not quite but we're in the right direction zero trusts here means that we mutually authenticates",
    "start": "1108870",
    "end": "1115559"
  },
  {
    "text": "the TLS connection with client certs as the cube control config it means we know",
    "start": "1115559",
    "end": "1121799"
  },
  {
    "text": "the identity of the server and of the client and we have our private and trusted criteria fulfilled so zero is a",
    "start": "1121799",
    "end": "1129600"
  },
  {
    "text": "lot more than this but we're adhering to one of its basic principles which is to restrict the blast radius of any",
    "start": "1129600",
    "end": "1136169"
  },
  {
    "text": "potential compromise ie some container or server has an unauthorized user and",
    "start": "1136169",
    "end": "1141659"
  },
  {
    "text": "their intentions are malicious let's have a look at the API server components and their communication I have Lucas",
    "start": "1141659",
    "end": "1148830"
  },
  {
    "text": "Kallstrom to thank for this diagram who is right now next door and as we can see",
    "start": "1148830",
    "end": "1154260"
  },
  {
    "text": "a lot of things talk back to the API server and all of these require encryption they also all communicate via",
    "start": "1154260",
    "end": "1162990"
  },
  {
    "text": "their own certificate authority and we have different server and client certs",
    "start": "1162990",
    "end": "1169679"
  },
  {
    "text": "for all the different intercommunications here so what would happen if we didn't do",
    "start": "1169679",
    "end": "1175649"
  },
  {
    "text": "this well how about some container has an unauthorized user how likely is that well what happens if somebody gets a",
    "start": "1175649",
    "end": "1182460"
  },
  {
    "text": "remote code execution in a privileged container admit it everybody is running privileged containers somewhere so we",
    "start": "1182460",
    "end": "1189960"
  },
  {
    "text": "get into a previous container game over or our user gets on to a load balancing",
    "start": "1189960",
    "end": "1196259"
  },
  {
    "text": "box or something that's transiting packets to the API server once more game over or there's another container in the",
    "start": "1196259",
    "end": "1203489"
  },
  {
    "text": "same pod as us that's compromised because of course we're all in the same network namespace and if we have the",
    "start": "1203489",
    "end": "1210210"
  },
  {
    "text": "appropriate permissions to sniff the traffic outbound from that other pods where you've guessed it so",
    "start": "1210210",
    "end": "1215970"
  },
  {
    "text": "defense-in-depth is our friend here this is similar to how traditional breaches occur a foot in the door examining what",
    "start": "1215970",
    "end": "1224909"
  },
  {
    "text": "else is available in terms of other network devices and pivoting and escalate and privileged throughout the",
    "start": "1224909",
    "end": "1230070"
  },
  {
    "text": "network until such time as we own the system the attacker can gain a foothold through a seemingly and knock us",
    "start": "1230070",
    "end": "1236940"
  },
  {
    "text": "and then pivot relentlessly so we can fix this for more on sealing up gaps in",
    "start": "1236940",
    "end": "1242639"
  },
  {
    "text": "general with kubernetes I have another talk on continuous security for which",
    "start": "1242639",
    "end": "1247769"
  },
  {
    "text": "this cat is my favorite metaphor and yes the D slides were published and there's",
    "start": "1247769",
    "end": "1253259"
  },
  {
    "text": "a link to those slides which is too long to fit in with a cat and it's a relentless focus on automation allowing",
    "start": "1253259",
    "end": "1258899"
  },
  {
    "text": "engineers to focus on the things that really matter we do it once we validate it and we run it forever in our",
    "start": "1258899",
    "end": "1264690"
  },
  {
    "text": "pipelines so now that we think we are sure that the control plane is able to",
    "start": "1264690",
    "end": "1271049"
  },
  {
    "text": "communicate in hostile waters what about the applications running on it for any",
    "start": "1271049",
    "end": "1277049"
  },
  {
    "text": "application the datastore is the treasure trove it's the value that any business inherently has separate from",
    "start": "1277049",
    "end": "1284519"
  },
  {
    "text": "their technology stack this is why we back things up this is why we can't lose data but if we leak our database keys",
    "start": "1284519",
    "end": "1290669"
  },
  {
    "text": "over the wire when our applications are trying to make connections we may as well not have bothered encrypting the",
    "start": "1290669",
    "end": "1296309"
  },
  {
    "text": "control plane so what's next well static endpoints are easy to encrypt because",
    "start": "1296309",
    "end": "1301979"
  },
  {
    "text": "they have an IP and we can use that IP as an anchor for the identity and in fact you can do the same thing",
    "start": "1301979",
    "end": "1308320"
  },
  {
    "text": "with domain names when we purchase a TLS certificate from a public vendor the fact that we use a credit card is the",
    "start": "1308320",
    "end": "1315070"
  },
  {
    "text": "trust mechanism just the fact that we are somehow in the global financial industry so what about dynamic resources",
    "start": "1315070",
    "end": "1324240"
  },
  {
    "text": "as we said pods churn they change all the time containers break the coupling between IP",
    "start": "1324240",
    "end": "1330340"
  },
  {
    "start": "1326000",
    "end": "1326000"
  },
  {
    "text": "and identity the churn they get rescheduled their dynamic so we need a component with a holistic view of",
    "start": "1330340",
    "end": "1336850"
  },
  {
    "text": "everything in the system at the end of everything in the cluster rather to run our firewalling for us and",
    "start": "1336850",
    "end": "1342820"
  },
  {
    "text": "the cloud native firewalling is network policy as you can see the way packets",
    "start": "1342820",
    "end": "1349360"
  },
  {
    "text": "move around kubernetes is really very complex there are multiple places at this go wrong so we use network policy",
    "start": "1349360",
    "end": "1356530"
  },
  {
    "text": "on the CNI plugin enforcing it at the container bridge to efj level network",
    "start": "1356530",
    "end": "1364150"
  },
  {
    "text": "policies are applied the pods by label I hope everyone seen this already labels of course the most innocuous but",
    "start": "1364150",
    "end": "1370360"
  },
  {
    "text": "fundamental security primitive of cuban asses because we address everything by label with an empty pod selector this",
    "start": "1370360",
    "end": "1377050"
  },
  {
    "text": "network policy actually denies everything it's a failed closed mechanism which is probably the right",
    "start": "1377050",
    "end": "1382150"
  },
  {
    "text": "decision or I prefer that to be more explicit and we can't actually do so because this is illegal syntax",
    "start": "1382150",
    "end": "1388960"
  },
  {
    "text": "here's another network policy that will only permit egress to port 53 maintenance of policies is important as",
    "start": "1388960",
    "end": "1396160"
  },
  {
    "text": "applications change and it should be noted this is not for dns-based",
    "start": "1396160",
    "end": "1402070"
  },
  {
    "text": "it's not for layer 7 traffic this is for layer 3 and 4 where we are using the cuban SS api to resolve the ports and",
    "start": "1402070",
    "end": "1409860"
  },
  {
    "text": "IPS that our pods are communicating on with the labels that they're tagged with to resolve them back and reconcile them",
    "start": "1409860",
    "end": "1417640"
  },
  {
    "text": "with a network policy if we want the reason for this is dns lookups are",
    "start": "1417640",
    "end": "1425050"
  },
  {
    "text": "fundamentally non-deterministic they might be a DNS round-robin they might be a Geo IP based there's no guarantee that",
    "start": "1425050",
    "end": "1431980"
  },
  {
    "text": "what we get one minute is the same as what we get the next and that makes things very difficult for queue",
    "start": "1431980",
    "end": "1437050"
  },
  {
    "text": "Vanessa's so the recommended pattern here is if want to prevent egress to certain",
    "start": "1437050",
    "end": "1443090"
  },
  {
    "text": "domains then we should put a reverse proxy at the perimeter of our network and then use network policy to only",
    "start": "1443090",
    "end": "1449059"
  },
  {
    "text": "allow specific pods to communicate with that proxy so that's all very nice this",
    "start": "1449059",
    "end": "1458960"
  },
  {
    "text": "is illegal of course just to demonstrate and as I said these policies require",
    "start": "1458960",
    "end": "1464510"
  },
  {
    "start": "1461000",
    "end": "1461000"
  },
  {
    "text": "maintenance of course we wrote a tool for this so this is a way of aggressively running nmap in parallel",
    "start": "1464510",
    "end": "1470870"
  },
  {
    "text": "from the same network namespace as a container so what we do here is we define a deployment a test front end and",
    "start": "1470870",
    "end": "1477500"
  },
  {
    "text": "running net assets in this case we'll SSH onto the node that's one of those",
    "start": "1477500",
    "end": "1483140"
  },
  {
    "text": "pods is running on it we'll pull a container that it attaches to the same network namespace as that pod and then",
    "start": "1483140",
    "end": "1489289"
  },
  {
    "text": "aggressively parallel eyes and map to run in there constant time for however many ports and services you want to",
    "start": "1489289",
    "end": "1495350"
  },
  {
    "text": "maintain this is really important because otherwise there's no way of knowing whether an applications required",
    "start": "1495350",
    "end": "1501980"
  },
  {
    "text": "changes have broken some other part of our network security model and it just",
    "start": "1501980",
    "end": "1508850"
  },
  {
    "text": "gives you some nice tap output so there are various other ways to cloud native firewalling some of these vendors are",
    "start": "1508850",
    "end": "1515480"
  },
  {
    "start": "1510000",
    "end": "1510000"
  },
  {
    "text": "here I recommend you going to talk to them so we have got an equivalent",
    "start": "1515480",
    "end": "1522500"
  },
  {
    "start": "1518000",
    "end": "1518000"
  },
  {
    "text": "firewall paradigm in cube Nettie's now what about our network encryption well",
    "start": "1522500",
    "end": "1528620"
  },
  {
    "text": "some container network interface plugins do support encryption but they it's a",
    "start": "1528620",
    "end": "1537260"
  },
  {
    "text": "blanket encryption so instead of using the identity of the caller and the sender like TLS would do on the Internet",
    "start": "1537260",
    "end": "1543350"
  },
  {
    "text": "to encrypt that communication and to use things like perfect forward secrecy to mean that even if that's all hoovered up",
    "start": "1543350",
    "end": "1549140"
  },
  {
    "text": "we're rotating the encryption keys very very quickly so breaking one bit of communication does not break everything",
    "start": "1549140",
    "end": "1555049"
  },
  {
    "text": "else we just blanket encrypt everything so a compromise of anywhere and the",
    "start": "1555049",
    "end": "1561200"
  },
  {
    "text": "network means that we're essentially into the same encryption namespace in a way also not all CLI plugins actually",
    "start": "1561200",
    "end": "1569240"
  },
  {
    "text": "have any encryption and thus if we if you have no ident see then we have no authentication at",
    "start": "1569240",
    "end": "1575310"
  },
  {
    "text": "this layer and the public API is an attack surface so we need something else to fix this problem",
    "start": "1575310",
    "end": "1581070"
  },
  {
    "text": "enter spiffy probably heard a lot about this recently spiffy has recently been",
    "start": "1581070",
    "end": "1587780"
  },
  {
    "text": "accepted into CNCs sandbox and it's a set of open source standards for",
    "start": "1587780",
    "end": "1593700"
  },
  {
    "text": "securely identifying software systems in dynamic and heterogeneous production",
    "start": "1593700",
    "end": "1599010"
  },
  {
    "text": "environments there's a reference implementation called spire and it's also implemented in sto for some of the",
    "start": "1599010",
    "end": "1606570"
  },
  {
    "text": "magical automatic mutual TLS concretely",
    "start": "1606570",
    "end": "1611760"
  },
  {
    "text": "spiffy X sorry spire exposes the spiffy workload API which can attest to",
    "start": "1611760",
    "end": "1617430"
  },
  {
    "text": "software systems and issue spiffy IDs and spiffy verifiable identity documents",
    "start": "1617430",
    "end": "1623610"
  },
  {
    "text": "which again are just the x.509 x' that we know and love this in turn",
    "start": "1623610",
    "end": "1630180"
  },
  {
    "text": "allowed two workloads to establish trust between each other using mutual TLS and",
    "start": "1630180",
    "end": "1636420"
  },
  {
    "text": "that this will also in the coming weeks months be extended for jots and web",
    "start": "1636420",
    "end": "1641520"
  },
  {
    "text": "tokens and oo auth and and all that good stuff delegating third party authentication very exciting times so",
    "start": "1641520",
    "end": "1649230"
  },
  {
    "text": "what do we have we've got attestation policies and this for example is where we get unique information about human at",
    "start": "1649230",
    "end": "1655860"
  },
  {
    "text": "is pod an attestation policy describes the properties that the workload must",
    "start": "1655860",
    "end": "1661080"
  },
  {
    "text": "exhibit in order to be assigned an identity and it typically described as a mix of process attributes such as a line",
    "start": "1661080",
    "end": "1668580"
  },
  {
    "text": "a linux user ID and infrastructure attributes such as running in a VM that has a particular 82 label and yet in the",
    "start": "1668580",
    "end": "1677670"
  },
  {
    "text": "Kuban asses workload plug in the attest of relies on the pods endpoint of the cubelet rest api and the information",
    "start": "1677670",
    "end": "1684630"
  },
  {
    "text": "provided in proc pids c group so spiffy is a standard for how an application can",
    "start": "1684630",
    "end": "1690180"
  },
  {
    "text": "programmatically retrieve an identity for itself and importantly the",
    "start": "1690180",
    "end": "1695400"
  },
  {
    "text": "short-lived credentials that go with that to assert its identity via a certificate signing request and that",
    "start": "1695400",
    "end": "1702270"
  },
  {
    "text": "encrypted certificate document that we've seen from the internet at large and more importantly this also allows a",
    "start": "1702270",
    "end": "1710309"
  },
  {
    "text": "trust bundle which can be used to identify other workloads so that route CA the public key of which we can use to",
    "start": "1710309",
    "end": "1717090"
  },
  {
    "text": "identify other services and by very finely segregating those stovepipes of",
    "start": "1717090",
    "end": "1722820"
  },
  {
    "text": "application concerns this severely limits the impacts of a breach if one of",
    "start": "1722820",
    "end": "1729029"
  },
  {
    "text": "those services suffers a remote code execution and an attacker is able to get into the pod all that he can do is just",
    "start": "1729029",
    "end": "1735870"
  },
  {
    "text": "what that pod is expected to be able to do with its pre-authorized mutual TLS neighbors if he doesn't have a",
    "start": "1735870",
    "end": "1742799"
  },
  {
    "text": "certificate to communicate with any of the other components they will not even start the HTTP connection the the https",
    "start": "1742799",
    "end": "1751710"
  },
  {
    "text": "mutual TLS exchange fails and we don't even get as far as posting or trying to",
    "start": "1751710",
    "end": "1757019"
  },
  {
    "text": "fuzz an api or anything like this so using this API applications libraries",
    "start": "1757019",
    "end": "1762029"
  },
  {
    "text": "and tools can retrieve credentials that identify them automatically without needing any secrets Co deploys a spiffy",
    "start": "1762029",
    "end": "1771000"
  },
  {
    "text": "ID looks like this and it's encoded into an x.509 certificate just like we saw",
    "start": "1771000",
    "end": "1777510"
  },
  {
    "text": "earlier using certificate extensions to encode further information and because I know you love standards documents this",
    "start": "1777510",
    "end": "1784649"
  },
  {
    "start": "1783000",
    "end": "1783000"
  },
  {
    "text": "is where we are the extensions down here in the standard x.509 ref spec so how do",
    "start": "1784649",
    "end": "1791220"
  },
  {
    "text": "we know that we can trust it exactly the same way as before certificate path validation which is this slide and chain",
    "start": "1791220",
    "end": "1798120"
  },
  {
    "start": "1796000",
    "end": "1796000"
  },
  {
    "text": "of trust this is broadly how spiffy requests an ID and the attestation is",
    "start": "1798120",
    "end": "1803399"
  },
  {
    "text": "the process of guaranteeing this metadata about an NC so we can see how",
    "start": "1803399",
    "end": "1810779"
  },
  {
    "text": "further selectors can also be used to identify further workloads spiffy is not",
    "start": "1810779",
    "end": "1816870"
  },
  {
    "text": "a Cuban at its native technology this Cuban s native is not it's not coupled",
    "start": "1816870",
    "end": "1822240"
  },
  {
    "text": "Cuban asses it can be used anywhere that we need the bootstrap identity and used",
    "start": "1822240",
    "end": "1827429"
  },
  {
    "text": "to identify all sorts of workloads and here are the workloads and node tests",
    "start": "1827429",
    "end": "1832950"
  },
  {
    "text": "the plugins that we use to bootstrap the identity process specifically again inspire the reference implementation",
    "start": "1832950",
    "end": "1840919"
  },
  {
    "text": "it should be noted that this doesn't do any auerbach it doesn't do any encryption it is just the process of",
    "start": "1840980",
    "end": "1848220"
  },
  {
    "text": "identifying a workload this is the same as when we use a credit card to buy our ticket from a public TLS vendor but it's",
    "start": "1848220",
    "end": "1857520"
  },
  {
    "text": "just the difficulty of bootstrapping that workload and the elegance of the fix that makes Miffy so revolutionary",
    "start": "1857520",
    "end": "1865670"
  },
  {
    "start": "1865000",
    "end": "1865000"
  },
  {
    "text": "now when we use spiffy in Sto we get free mutual TLS and I won't go into too",
    "start": "1865670",
    "end": "1872280"
  },
  {
    "text": "much detail here but again we have the subject alternate name of the certificate defined by the spiffy ID we",
    "start": "1872280",
    "end": "1879660"
  },
  {
    "text": "use the magic of envoy which is all things to all men the mother of all proxies at the stage and envoy has a",
    "start": "1879660",
    "end": "1887280"
  },
  {
    "text": "persistent HTTP to mesh connection to every other envoy instance and so it's",
    "start": "1887280",
    "end": "1895140"
  },
  {
    "text": "able to proxy the outbound requests from the front end that's a mutual TLS handshake appoint one there where they",
    "start": "1895140",
    "end": "1901860"
  },
  {
    "text": "both identify each other using the TLS certificates encoded with the spiffy IDs that we've bootstraps the network with",
    "start": "1901860",
    "end": "1908900"
  },
  {
    "text": "the discovery service of envoy is beyond the scope of this service Lee slightly and in fact we don't really care about",
    "start": "1908900",
    "end": "1915600"
  },
  {
    "text": "the mixer either but we do get secure data transmission between our components",
    "start": "1915600",
    "end": "1920670"
  },
  {
    "text": "we get this for free we get this securely and we get this at scale so a",
    "start": "1920670",
    "end": "1927680"
  },
  {
    "text": "bit of a recap end-to-end encryption",
    "start": "1927680",
    "end": "1933660"
  },
  {
    "start": "1932000",
    "end": "1932000"
  },
  {
    "text": "private mutually trusted communication between the API server and its callers",
    "start": "1933660",
    "end": "1939030"
  },
  {
    "text": "and encryption for the values in our CD store what do we have here end-to-end encryption for the API server",
    "start": "1939030",
    "end": "1946110"
  },
  {
    "text": "giving us a baseline of trust between all the kubernetes components spiffy to",
    "start": "1946110",
    "end": "1951300"
  },
  {
    "text": "identify the application workload so that we can then bootstrap the certificate signing process to get those mutual TLS certificates in this DA's",
    "start": "1951300",
    "end": "1958650"
  },
  {
    "text": "case is to run this own certificate authority again it's a root CA it's distributing that trust bundle amongst",
    "start": "1958650",
    "end": "1965280"
  },
  {
    "text": "the workloads so that everybody trusts that CA because we're within our own trust domain and then we have these",
    "start": "1965280",
    "end": "1971280"
  },
  {
    "text": "certificates issued and then finally envoy acts as the free distributed",
    "start": "1971280",
    "end": "1976800"
  },
  {
    "text": "systems library slide car sitting outside of our application code and performing all these Advanced Encryption",
    "start": "1976800",
    "end": "1983040"
  },
  {
    "text": "and routing features for us almost for free so what are we going to take away",
    "start": "1983040",
    "end": "1989880"
  },
  {
    "text": "from this do encryption it's great and while you're there you may as well encrypt everything and for every concern",
    "start": "1989880",
    "end": "1995970"
  },
  {
    "text": "that you possibly have please do encrypt it so the conclusions here network",
    "start": "1995970",
    "end": "2002330"
  },
  {
    "start": "2000000",
    "end": "2000000"
  },
  {
    "text": "security is super important there's no point running very well tightened process bound security primitives if we",
    "start": "2002330",
    "end": "2009800"
  },
  {
    "text": "then leak information on our networks these old technologies and constantly",
    "start": "2009800",
    "end": "2015080"
  },
  {
    "text": "being constantly updated cryptographic TLS ciphers and standards keep us secure",
    "start": "2015080",
    "end": "2020780"
  },
  {
    "text": "and they do so in much the same way online as they do in our trust boundaries of Q Vanessa's cloud native",
    "start": "2020780",
    "end": "2027470"
  },
  {
    "text": "applications have more security primitives there is much wider attack surface exposed by the complexity of",
    "start": "2027470",
    "end": "2033710"
  },
  {
    "text": "cube neces so we do need to run automatic test workloads continuous",
    "start": "2033710",
    "end": "2039140"
  },
  {
    "text": "security constant verification that what we put in place yesterday is also in",
    "start": "2039140",
    "end": "2044330"
  },
  {
    "text": "place tomorrow and that any changes as we ship features do not impact the baseline security of our systems it's",
    "start": "2044330",
    "end": "2050990"
  },
  {
    "text": "tearin spiffy give you wings and please encrypt everything everywhere thank you",
    "start": "2050990",
    "end": "2056929"
  },
  {
    "text": "very much [Applause]",
    "start": "2056929",
    "end": "2063649"
  }
]