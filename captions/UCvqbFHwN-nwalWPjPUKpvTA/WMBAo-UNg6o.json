[
  {
    "text": "good morning everyone let's get started",
    "start": "9840",
    "end": "12840"
  },
  {
    "text": "uh thank you u89 for following me on",
    "start": "12840",
    "end": "15240"
  },
  {
    "text": "Twitter already uh hi uh I'm shubham uh",
    "start": "15240",
    "end": "19020"
  },
  {
    "text": "I work at Microsoft and I'm a maintainer",
    "start": "19020",
    "end": "21600"
  },
  {
    "text": "of Dapper's JavaScript SDK so this",
    "start": "21600",
    "end": "23939"
  },
  {
    "text": "morning we'll talk about how you can",
    "start": "23939",
    "end": "25740"
  },
  {
    "text": "write High throughput applications using",
    "start": "25740",
    "end": "27420"
  },
  {
    "text": "Dapper so we'll start with seeing how",
    "start": "27420",
    "end": "29939"
  },
  {
    "text": "some asynchronous messaging patterns",
    "start": "29939",
    "end": "31859"
  },
  {
    "text": "work in general and then how you could",
    "start": "31859",
    "end": "33719"
  },
  {
    "text": "use Dapper with your Pub sub needs and",
    "start": "33719",
    "end": "36600"
  },
  {
    "text": "then we'll look at the newest addition",
    "start": "36600",
    "end": "37980"
  },
  {
    "text": "to Dapper's Pub sub block the bulk apis",
    "start": "37980",
    "end": "40200"
  },
  {
    "text": "so yeah let's get started",
    "start": "40200",
    "end": "44239"
  },
  {
    "text": "okay so this is our normal asynchronous",
    "start": "44340",
    "end": "48360"
  },
  {
    "text": "messaging application looks like you you",
    "start": "48360",
    "end": "50280"
  },
  {
    "text": "have your publisher you have a few",
    "start": "50280",
    "end": "51960"
  },
  {
    "text": "subscribers uh you have a Kafka Pub sub",
    "start": "51960",
    "end": "55140"
  },
  {
    "text": "broker in this case so",
    "start": "55140",
    "end": "57600"
  },
  {
    "text": "your card can your card can publish",
    "start": "57600",
    "end": "59640"
  },
  {
    "text": "events onto Kafka and then",
    "start": "59640",
    "end": "62579"
  },
  {
    "text": "um and then Kafka sends those events to",
    "start": "62579",
    "end": "64619"
  },
  {
    "text": "the subscribers in this case it's",
    "start": "64619",
    "end": "66420"
  },
  {
    "text": "shipping and notification and they can",
    "start": "66420",
    "end": "68580"
  },
  {
    "text": "do something with that event process",
    "start": "68580",
    "end": "70320"
  },
  {
    "text": "that and so and so",
    "start": "70320",
    "end": "72479"
  },
  {
    "text": "uh you could also have an alternate",
    "start": "72479",
    "end": "74460"
  },
  {
    "text": "model where you have multiple Publishers",
    "start": "74460",
    "end": "76260"
  },
  {
    "text": "so you have multiple Publishers who",
    "start": "76260",
    "end": "78720"
  },
  {
    "text": "generate events send it to Kafka and",
    "start": "78720",
    "end": "81000"
  },
  {
    "text": "then you have a single subscriber",
    "start": "81000",
    "end": "83220"
  },
  {
    "text": "listening for those and you could have",
    "start": "83220",
    "end": "84420"
  },
  {
    "text": "MS2 and any combination basically of",
    "start": "84420",
    "end": "86460"
  },
  {
    "text": "Publishers and subscribers",
    "start": "86460",
    "end": "88740"
  },
  {
    "text": "you could also do something like this",
    "start": "88740",
    "end": "90299"
  },
  {
    "text": "where you have the same replica we have",
    "start": "90299",
    "end": "92640"
  },
  {
    "text": "multiple replicas of the same subscriber",
    "start": "92640",
    "end": "94380"
  },
  {
    "text": "and then each replica kind of helps in",
    "start": "94380",
    "end": "96659"
  },
  {
    "text": "load balancing your events so if you",
    "start": "96659",
    "end": "98040"
  },
  {
    "text": "have imagine if you have a lot of events",
    "start": "98040",
    "end": "100079"
  },
  {
    "text": "right and you want to process them so",
    "start": "100079",
    "end": "102960"
  },
  {
    "text": "you could have multiple replicas doing",
    "start": "102960",
    "end": "104460"
  },
  {
    "text": "that on your behalf",
    "start": "104460",
    "end": "106860"
  },
  {
    "text": "so for for those of you who don't know",
    "start": "106860",
    "end": "109799"
  },
  {
    "text": "about Dapper Dapper sits as a sidecar",
    "start": "109799",
    "end": "112020"
  },
  {
    "text": "and let's see how you could do a simple",
    "start": "112020",
    "end": "114060"
  },
  {
    "text": "operation like publish And subscribe",
    "start": "114060",
    "end": "115619"
  },
  {
    "text": "using Dapper so each application has its",
    "start": "115619",
    "end": "118259"
  },
  {
    "text": "own diverside car in the scenario",
    "start": "118259",
    "end": "120659"
  },
  {
    "text": "and what the cart application needs to",
    "start": "120659",
    "end": "123000"
  },
  {
    "text": "do is uh send this request to Dabber so",
    "start": "123000",
    "end": "126299"
  },
  {
    "text": "Dapper is a sidecar on the port 3500",
    "start": "126299",
    "end": "129479"
  },
  {
    "text": "it's a well-defined port and all you",
    "start": "129479",
    "end": "131280"
  },
  {
    "text": "need to do is do a publish slash Kafka",
    "start": "131280",
    "end": "134879"
  },
  {
    "text": "slash order so publishes the operation",
    "start": "134879",
    "end": "137760"
  },
  {
    "text": "Kafka is the name of your broker and",
    "start": "137760",
    "end": "140580"
  },
  {
    "text": "order is the topic name and then you",
    "start": "140580",
    "end": "142560"
  },
  {
    "text": "could send your data and Dapper will",
    "start": "142560",
    "end": "145080"
  },
  {
    "text": "then send this data to the pub sub queue",
    "start": "145080",
    "end": "147120"
  },
  {
    "text": "it will find where Kafka is it will send",
    "start": "147120",
    "end": "149040"
  },
  {
    "text": "the data to that",
    "start": "149040",
    "end": "150599"
  },
  {
    "text": "it will listen for data from the pub sub",
    "start": "150599",
    "end": "153239"
  },
  {
    "text": "queue as well and then forward those",
    "start": "153239",
    "end": "154980"
  },
  {
    "text": "data to the subscribed applications",
    "start": "154980",
    "end": "157980"
  },
  {
    "text": "and in this case Dapper can use any",
    "start": "157980",
    "end": "160440"
  },
  {
    "text": "components it supports so on the top on",
    "start": "160440",
    "end": "163140"
  },
  {
    "text": "the bottom right you have a list of",
    "start": "163140",
    "end": "164519"
  },
  {
    "text": "supported components and Dapper supports",
    "start": "164519",
    "end": "167220"
  },
  {
    "text": "a lot of Pop sub components today so you",
    "start": "167220",
    "end": "169800"
  },
  {
    "text": "can check it out and note that your",
    "start": "169800",
    "end": "171360"
  },
  {
    "text": "application does not need to change so",
    "start": "171360",
    "end": "173819"
  },
  {
    "text": "your application does not know if it's",
    "start": "173819",
    "end": "176099"
  },
  {
    "text": "Kafka if it's rabbit mq if it's radius",
    "start": "176099",
    "end": "178620"
  },
  {
    "text": "cache all you need is this URL right",
    "start": "178620",
    "end": "181080"
  },
  {
    "text": "here you can use a pointer yeah this URL",
    "start": "181080",
    "end": "184319"
  },
  {
    "text": "right here so the pub sub name can be",
    "start": "184319",
    "end": "186360"
  },
  {
    "text": "parameterized so you could you could",
    "start": "186360",
    "end": "187920"
  },
  {
    "text": "just manage it on your own and then",
    "start": "187920",
    "end": "189780"
  },
  {
    "text": "Dapper knows how to talk to SNS or Kafka",
    "start": "189780",
    "end": "193019"
  },
  {
    "text": "or Azure service bus",
    "start": "193019",
    "end": "196099"
  },
  {
    "text": "so uh let's look at some of the",
    "start": "196620",
    "end": "198480"
  },
  {
    "text": "highlights of the Dappers Pub sub",
    "start": "198480",
    "end": "200220"
  },
  {
    "text": "ecosystem right so Dapper ensures that",
    "start": "200220",
    "end": "202860"
  },
  {
    "text": "you have at least once delivery it",
    "start": "202860",
    "end": "204659"
  },
  {
    "text": "ensures that each application that is",
    "start": "204659",
    "end": "206280"
  },
  {
    "text": "published is also delivered to your",
    "start": "206280",
    "end": "208019"
  },
  {
    "text": "subscribers at least once",
    "start": "208019",
    "end": "210900"
  },
  {
    "text": "it has some concepts of consumer groups",
    "start": "210900",
    "end": "213780"
  },
  {
    "text": "so Dapper Dapper automatically creates",
    "start": "213780",
    "end": "215879"
  },
  {
    "text": "consumer groups on your behalf it also",
    "start": "215879",
    "end": "218099"
  },
  {
    "text": "allows you to have a competing consumer",
    "start": "218099",
    "end": "219780"
  },
  {
    "text": "group patterns and we'll look at these",
    "start": "219780",
    "end": "221099"
  },
  {
    "text": "patterns in our demo really quick",
    "start": "221099",
    "end": "225180"
  },
  {
    "text": "ah you also have built-in resiliency so",
    "start": "225180",
    "end": "227940"
  },
  {
    "text": "with Dapper when you go out to do Pub",
    "start": "227940",
    "end": "229379"
  },
  {
    "text": "sub operations you get retries uh",
    "start": "229379",
    "end": "232019"
  },
  {
    "text": "timeouts circuit breakers out of box so",
    "start": "232019",
    "end": "234480"
  },
  {
    "text": "this is how it looks like right so you",
    "start": "234480",
    "end": "236340"
  },
  {
    "text": "get resiliency on both the inbound and",
    "start": "236340",
    "end": "238440"
  },
  {
    "text": "outboard part of things and yeah so",
    "start": "238440",
    "end": "241500"
  },
  {
    "text": "Dapper talking to publishing data onto",
    "start": "241500",
    "end": "243780"
  },
  {
    "text": "the broker and then Dapper sending data",
    "start": "243780",
    "end": "245940"
  },
  {
    "text": "to your subscriber uh it's it's all",
    "start": "245940",
    "end": "247860"
  },
  {
    "text": "resilient",
    "start": "247860",
    "end": "249480"
  },
  {
    "text": "and then even after resiliency you get a",
    "start": "249480",
    "end": "252299"
  },
  {
    "text": "dead letter topic support if your",
    "start": "252299",
    "end": "253980"
  },
  {
    "text": "resiliency policy is still fail to",
    "start": "253980",
    "end": "255900"
  },
  {
    "text": "deliver some message you have built-in",
    "start": "255900",
    "end": "257699"
  },
  {
    "text": "support for that letter uh topics",
    "start": "257699",
    "end": "260820"
  },
  {
    "text": "and finally you have bulk messaging",
    "start": "260820",
    "end": "262740"
  },
  {
    "text": "which is recently introduced and we'll",
    "start": "262740",
    "end": "264540"
  },
  {
    "text": "talk about that in the future slides",
    "start": "264540",
    "end": "267440"
  },
  {
    "text": "also note that on the right side we have",
    "start": "267440",
    "end": "270360"
  },
  {
    "text": "something called a component spec so",
    "start": "270360",
    "end": "272400"
  },
  {
    "text": "this is how you tell Dapper that hey I",
    "start": "272400",
    "end": "275160"
  },
  {
    "text": "have a redis component which is of type",
    "start": "275160",
    "end": "276780"
  },
  {
    "text": "Pub sub.rediff and it's located at this",
    "start": "276780",
    "end": "280259"
  },
  {
    "text": "Host this is the password and that's how",
    "start": "280259",
    "end": "282540"
  },
  {
    "text": "you connect with it so that's all you",
    "start": "282540",
    "end": "283919"
  },
  {
    "text": "need to connect to that is and you could",
    "start": "283919",
    "end": "287100"
  },
  {
    "text": "just swap in and out with a different",
    "start": "287100",
    "end": "289020"
  },
  {
    "text": "component in this case it's an Azure",
    "start": "289020",
    "end": "290820"
  },
  {
    "text": "event Hub component and the metadata",
    "start": "290820",
    "end": "293639"
  },
  {
    "text": "changes and that's it so that's all you",
    "start": "293639",
    "end": "296280"
  },
  {
    "text": "need to do to tell Dapper how to talk to",
    "start": "296280",
    "end": "298380"
  },
  {
    "text": "these components",
    "start": "298380",
    "end": "300720"
  },
  {
    "text": "um so yeah let's look at a really quick",
    "start": "300720",
    "end": "302100"
  },
  {
    "text": "demo uh let me just stop sharing this",
    "start": "302100",
    "end": "304560"
  },
  {
    "text": "presentation",
    "start": "304560",
    "end": "306720"
  },
  {
    "text": "okay I hope you can see it I'll Zoom it",
    "start": "306720",
    "end": "309660"
  },
  {
    "text": "in a bit",
    "start": "309660",
    "end": "311460"
  },
  {
    "text": "yeah okay so",
    "start": "311460",
    "end": "314940"
  },
  {
    "text": "we'll just start looking at really",
    "start": "314940",
    "end": "316740"
  },
  {
    "text": "simple operations how to publish some",
    "start": "316740",
    "end": "318780"
  },
  {
    "text": "data onto a pub sub broker how to",
    "start": "318780",
    "end": "320880"
  },
  {
    "text": "subscribe to that data so uh for",
    "start": "320880",
    "end": "323340"
  },
  {
    "text": "publishing let's look at the HTTP way of",
    "start": "323340",
    "end": "325560"
  },
  {
    "text": "it first so I'm not using any Dapper",
    "start": "325560",
    "end": "327780"
  },
  {
    "text": "sdks we'll look at that in a bit but if",
    "start": "327780",
    "end": "330240"
  },
  {
    "text": "you want to post the data to adapter all",
    "start": "330240",
    "end": "332220"
  },
  {
    "text": "you need to do is have this URL so in in",
    "start": "332220",
    "end": "334979"
  },
  {
    "text": "My Demo in this case Dapper runs as a",
    "start": "334979",
    "end": "337919"
  },
  {
    "text": "process locally in my computer so I",
    "start": "337919",
    "end": "339840"
  },
  {
    "text": "could just go go and tell hey Dapper",
    "start": "339840",
    "end": "341940"
  },
  {
    "text": "just publish this data onto a pub sub",
    "start": "341940",
    "end": "344400"
  },
  {
    "text": "called Pub sub so just FYI if you",
    "start": "344400",
    "end": "347940"
  },
  {
    "text": "install Dapper via the Dapper CLI",
    "start": "347940",
    "end": "350180"
  },
  {
    "text": "you get this Pub sub component inbuilt",
    "start": "350180",
    "end": "352919"
  },
  {
    "text": "and radius is already like spun up for",
    "start": "352919",
    "end": "355139"
  },
  {
    "text": "you so all you need to do is talk to",
    "start": "355139",
    "end": "356940"
  },
  {
    "text": "this Pub sub component and let me show",
    "start": "356940",
    "end": "358380"
  },
  {
    "text": "you how it works",
    "start": "358380",
    "end": "359820"
  },
  {
    "text": "um let me just so what I can do is I can",
    "start": "359820",
    "end": "362460"
  },
  {
    "text": "just start off",
    "start": "362460",
    "end": "363840"
  },
  {
    "text": "I can just start a publisher app like",
    "start": "363840",
    "end": "365520"
  },
  {
    "text": "this so I have an app ID and I have a",
    "start": "365520",
    "end": "368759"
  },
  {
    "text": "Dapper HTTP Port which is 3500 in this",
    "start": "368759",
    "end": "371520"
  },
  {
    "text": "case and I just want to start my Dapper",
    "start": "371520",
    "end": "374039"
  },
  {
    "text": "and I don't have any application in this",
    "start": "374039",
    "end": "375900"
  },
  {
    "text": "case it's just a sleep and we'll just",
    "start": "375900",
    "end": "377639"
  },
  {
    "text": "use the HTTP call directly to talk to",
    "start": "377639",
    "end": "379500"
  },
  {
    "text": "Dapper so yeah",
    "start": "379500",
    "end": "382400"
  },
  {
    "text": "so this has like my Dapper is now up and",
    "start": "385139",
    "end": "387840"
  },
  {
    "text": "running and what I can do is just send",
    "start": "387840",
    "end": "389639"
  },
  {
    "text": "this request",
    "start": "389639",
    "end": "391080"
  },
  {
    "text": "so A8 says204 no content which means it",
    "start": "391080",
    "end": "394020"
  },
  {
    "text": "it was able to publish everything and",
    "start": "394020",
    "end": "396240"
  },
  {
    "text": "what I have is a GUI",
    "start": "396240",
    "end": "399240"
  },
  {
    "text": "um",
    "start": "399240",
    "end": "401240"
  },
  {
    "text": "oh it's this one",
    "start": "401759",
    "end": "404100"
  },
  {
    "text": "yeah so let me open that really quick",
    "start": "404100",
    "end": "407340"
  },
  {
    "text": "and",
    "start": "407340",
    "end": "409800"
  },
  {
    "text": "I can connect to my local redis and now",
    "start": "409800",
    "end": "412259"
  },
  {
    "text": "I can see this data that's being",
    "start": "412259",
    "end": "414300"
  },
  {
    "text": "published already so let me just show",
    "start": "414300",
    "end": "416100"
  },
  {
    "text": "you in a different tab here so if I",
    "start": "416100",
    "end": "418979"
  },
  {
    "text": "format this",
    "start": "418979",
    "end": "421680"
  },
  {
    "text": "hmm",
    "start": "421680",
    "end": "424340"
  },
  {
    "text": "yeah so uh if you see this is the data",
    "start": "425160",
    "end": "427440"
  },
  {
    "text": "that got published and it's a cloud",
    "start": "427440",
    "end": "428580"
  },
  {
    "text": "event so what I published was this",
    "start": "428580",
    "end": "430740"
  },
  {
    "text": "actual data and Dapper talks in Cloud",
    "start": "430740",
    "end": "432840"
  },
  {
    "text": "event by default uh in Pub sub so this",
    "start": "432840",
    "end": "435479"
  },
  {
    "text": "is a cloud event you have things like",
    "start": "435479",
    "end": "436800"
  },
  {
    "text": "Trace ID or Trace parent the cloud event",
    "start": "436800",
    "end": "439020"
  },
  {
    "text": "ID itself and so and so so this is a",
    "start": "439020",
    "end": "442199"
  },
  {
    "text": "simple example of publishing and I could",
    "start": "442199",
    "end": "443759"
  },
  {
    "text": "also like not use a cloud event so in",
    "start": "443759",
    "end": "446039"
  },
  {
    "text": "case you have subscribers that don't",
    "start": "446039",
    "end": "447660"
  },
  {
    "text": "speak in Cloud events you could go ahead",
    "start": "447660",
    "end": "449460"
  },
  {
    "text": "and just publish without it so all you",
    "start": "449460",
    "end": "451500"
  },
  {
    "text": "need is this extra query parameter",
    "start": "451500",
    "end": "454139"
  },
  {
    "text": "called raw payload is true and if I send",
    "start": "454139",
    "end": "456660"
  },
  {
    "text": "a request like this",
    "start": "456660",
    "end": "458759"
  },
  {
    "text": "and just refresh this",
    "start": "458759",
    "end": "461099"
  },
  {
    "text": "so this one is plain Json there's no",
    "start": "461099",
    "end": "463380"
  },
  {
    "text": "Cloud event here so yeah that's how you",
    "start": "463380",
    "end": "465539"
  },
  {
    "text": "could like subscribe and uh if you if I",
    "start": "465539",
    "end": "467639"
  },
  {
    "text": "also want to uh sub if I that's how you",
    "start": "467639",
    "end": "470160"
  },
  {
    "text": "could publish sorry and if you want also",
    "start": "470160",
    "end": "471900"
  },
  {
    "text": "want to subscribe I have a simple",
    "start": "471900",
    "end": "473220"
  },
  {
    "text": "subscriber application written here",
    "start": "473220",
    "end": "475680"
  },
  {
    "text": "this is in Python and there's no extra",
    "start": "475680",
    "end": "478500"
  },
  {
    "text": "dependencies it just uses the default",
    "start": "478500",
    "end": "481020"
  },
  {
    "text": "python web servers and there are two",
    "start": "481020",
    "end": "484380"
  },
  {
    "text": "important parts first one is this which",
    "start": "484380",
    "end": "486960"
  },
  {
    "text": "is Dapper slash subscribe so whenever",
    "start": "486960",
    "end": "489060"
  },
  {
    "text": "Dapper starts right it goes to your",
    "start": "489060",
    "end": "490919"
  },
  {
    "text": "application and it goes to this endpoint",
    "start": "490919",
    "end": "492479"
  },
  {
    "text": "and asks hey application which uh",
    "start": "492479",
    "end": "495060"
  },
  {
    "text": "subscriptions do you want to subscribe",
    "start": "495060",
    "end": "496440"
  },
  {
    "text": "to and what I respond with is this so I",
    "start": "496440",
    "end": "499800"
  },
  {
    "text": "have a pub sub uh and the topic name is",
    "start": "499800",
    "end": "502259"
  },
  {
    "text": "examples and this is the route and",
    "start": "502259",
    "end": "504240"
  },
  {
    "text": "Dapper will then start sending me",
    "start": "504240",
    "end": "505620"
  },
  {
    "text": "messages on this route in this example",
    "start": "505620",
    "end": "508440"
  },
  {
    "text": "I'm just printing that out so that's it",
    "start": "508440",
    "end": "510539"
  },
  {
    "text": "and I'm sending back a success status",
    "start": "510539",
    "end": "512159"
  },
  {
    "text": "you could also send back a uh you know",
    "start": "512159",
    "end": "514320"
  },
  {
    "text": "maybe a retry or a drop to Dapper but",
    "start": "514320",
    "end": "517200"
  },
  {
    "text": "yeah in this example I'm sending a",
    "start": "517200",
    "end": "518580"
  },
  {
    "text": "success so let me just try to run this",
    "start": "518580",
    "end": "520140"
  },
  {
    "text": "one really quick",
    "start": "520140",
    "end": "522860"
  },
  {
    "text": "so app ID yeah so the protocol is HTTP",
    "start": "524820",
    "end": "530160"
  },
  {
    "text": "the port on which my server is running",
    "start": "530160",
    "end": "531959"
  },
  {
    "text": "is 3000 and the command is just python",
    "start": "531959",
    "end": "534660"
  },
  {
    "text": "subscriber dot pi",
    "start": "534660",
    "end": "537060"
  },
  {
    "text": "and yeah there you go so uh a few things",
    "start": "537060",
    "end": "540000"
  },
  {
    "text": "first so if you look at it",
    "start": "540000",
    "end": "542459"
  },
  {
    "text": "uh first this Dapper slash subscribe was",
    "start": "542459",
    "end": "545399"
  },
  {
    "text": "called and then um Dapper says I am",
    "start": "545399",
    "end": "548100"
  },
  {
    "text": "subscribed to these topics so the topic",
    "start": "548100",
    "end": "549839"
  },
  {
    "text": "name is examples and Pub some name is",
    "start": "549839",
    "end": "551760"
  },
  {
    "text": "Pub sub and then I received these",
    "start": "551760",
    "end": "553440"
  },
  {
    "text": "messages so this is the one without",
    "start": "553440",
    "end": "554700"
  },
  {
    "text": "cloud event and this is the one with",
    "start": "554700",
    "end": "556500"
  },
  {
    "text": "Cloud event so yeah this is how a simple",
    "start": "556500",
    "end": "558959"
  },
  {
    "text": "publish And subscribe works let me stop",
    "start": "558959",
    "end": "561120"
  },
  {
    "text": "these",
    "start": "561120",
    "end": "562940"
  },
  {
    "text": "and minimize this so let's also look at",
    "start": "562940",
    "end": "566940"
  },
  {
    "text": "another example where I'm using the",
    "start": "566940",
    "end": "569160"
  },
  {
    "text": "JavaScript SDK so you saw how to do it",
    "start": "569160",
    "end": "572640"
  },
  {
    "text": "using HTTP uh by directly but if you",
    "start": "572640",
    "end": "575519"
  },
  {
    "text": "want to use sdks it makes your life",
    "start": "575519",
    "end": "576779"
  },
  {
    "text": "simpler so let's look at this example we",
    "start": "576779",
    "end": "579060"
  },
  {
    "text": "have two applications one is the",
    "start": "579060",
    "end": "581040"
  },
  {
    "text": "publisher service if you look at",
    "start": "581040",
    "end": "582660"
  },
  {
    "text": "package.json it just has one dependency",
    "start": "582660",
    "end": "584640"
  },
  {
    "text": "coil Dapper there is there's no other",
    "start": "584640",
    "end": "586800"
  },
  {
    "text": "dependency on any Kafka SDK or any redis",
    "start": "586800",
    "end": "590160"
  },
  {
    "text": "SDK but there's only one on Dapper and",
    "start": "590160",
    "end": "592800"
  },
  {
    "text": "this is my index.js file so what I do is",
    "start": "592800",
    "end": "596700"
  },
  {
    "text": "I create a infinite Loop I create a",
    "start": "596700",
    "end": "599459"
  },
  {
    "text": "random order and I publish it so this is",
    "start": "599459",
    "end": "602160"
  },
  {
    "text": "the only thing I need to do Pub sub dot",
    "start": "602160",
    "end": "604560"
  },
  {
    "text": "publish Name Pub sub name topic name and",
    "start": "604560",
    "end": "607200"
  },
  {
    "text": "the actual data so that's it and let's",
    "start": "607200",
    "end": "610380"
  },
  {
    "text": "also look at the subscriber application",
    "start": "610380",
    "end": "612839"
  },
  {
    "text": "um same for this one so there's only one",
    "start": "612839",
    "end": "614880"
  },
  {
    "text": "dependency Dapper and if you look at the",
    "start": "614880",
    "end": "616860"
  },
  {
    "text": "index.js this is a really an upgrade",
    "start": "616860",
    "end": "619140"
  },
  {
    "text": "from the HTTP version so if you look at",
    "start": "619140",
    "end": "621000"
  },
  {
    "text": "this all you need all you need to do is",
    "start": "621000",
    "end": "623519"
  },
  {
    "text": "uh have a subscribe method and this this",
    "start": "623519",
    "end": "625980"
  },
  {
    "text": "is a callback so this actually this is a",
    "start": "625980",
    "end": "629339"
  },
  {
    "text": "place where you get your message so in",
    "start": "629339",
    "end": "631260"
  },
  {
    "text": "this example I'm just logging it out but",
    "start": "631260",
    "end": "633060"
  },
  {
    "text": "you see there's no Dapper slash",
    "start": "633060",
    "end": "634740"
  },
  {
    "text": "subscribe the SDK takes care of that for",
    "start": "634740",
    "end": "636480"
  },
  {
    "text": "you so yeah it's really simple and easy",
    "start": "636480",
    "end": "639240"
  },
  {
    "text": "to write your own SDK version of it and",
    "start": "639240",
    "end": "641820"
  },
  {
    "text": "so in this demo I'll be running these on",
    "start": "641820",
    "end": "644579"
  },
  {
    "text": "kubernetes so I have a local",
    "start": "644579",
    "end": "647180"
  },
  {
    "text": "kind cluster setup and if I show you I",
    "start": "647180",
    "end": "651839"
  },
  {
    "text": "should have",
    "start": "651839",
    "end": "653160"
  },
  {
    "text": "let me zoom out a bit",
    "start": "653160",
    "end": "657019"
  },
  {
    "text": "yeah so I have the Dapper control plane",
    "start": "658680",
    "end": "661680"
  },
  {
    "text": "already up and running I have Kafka and",
    "start": "661680",
    "end": "664620"
  },
  {
    "text": "the redis uh applications here running",
    "start": "664620",
    "end": "667680"
  },
  {
    "text": "and this is the cube system so let me",
    "start": "667680",
    "end": "670079"
  },
  {
    "text": "just try to really quickly deploy my",
    "start": "670079",
    "end": "672660"
  },
  {
    "text": "sample application",
    "start": "672660",
    "end": "675000"
  },
  {
    "text": "um",
    "start": "675000",
    "end": "677000"
  },
  {
    "text": "so first I deployed the redis component",
    "start": "677000",
    "end": "681300"
  },
  {
    "text": "and this is nothing but a configuration",
    "start": "681300",
    "end": "683959"
  },
  {
    "text": "that shows up here and I can also show",
    "start": "683959",
    "end": "686640"
  },
  {
    "text": "you that it it just",
    "start": "686640",
    "end": "690120"
  },
  {
    "text": "so this just points to the redis that",
    "start": "690120",
    "end": "691860"
  },
  {
    "text": "exists in my cluster already so the host",
    "start": "691860",
    "end": "694140"
  },
  {
    "text": "and password and this is coming from",
    "start": "694140",
    "end": "695579"
  },
  {
    "text": "Secret store by the way instead of using",
    "start": "695579",
    "end": "697380"
  },
  {
    "text": "a password directly so",
    "start": "697380",
    "end": "699720"
  },
  {
    "text": "that's it and let me also apply the",
    "start": "699720",
    "end": "701820"
  },
  {
    "text": "publisher and subscriber configurations",
    "start": "701820",
    "end": "703440"
  },
  {
    "text": "now so these are kubernetes deployment",
    "start": "703440",
    "end": "705839"
  },
  {
    "text": "specs and",
    "start": "705839",
    "end": "708300"
  },
  {
    "text": "so there we go",
    "start": "708300",
    "end": "711380"
  },
  {
    "text": "ah sorry",
    "start": "711420",
    "end": "713100"
  },
  {
    "text": "yeah so yeah they're up and running we",
    "start": "713100",
    "end": "715860"
  },
  {
    "text": "should be able to see them here now",
    "start": "715860",
    "end": "719240"
  },
  {
    "text": "um",
    "start": "721200",
    "end": "721920"
  },
  {
    "text": "yeah",
    "start": "721920",
    "end": "723660"
  },
  {
    "text": "okay this is up and running so let's",
    "start": "723660",
    "end": "725880"
  },
  {
    "text": "look at the logs and see what what's",
    "start": "725880",
    "end": "727440"
  },
  {
    "text": "happening inside so if I go and do a",
    "start": "727440",
    "end": "729660"
  },
  {
    "text": "cube tail",
    "start": "729660",
    "end": "731160"
  },
  {
    "text": "let me just split this",
    "start": "731160",
    "end": "734100"
  },
  {
    "text": "so yeah the publisher is up and running",
    "start": "734100",
    "end": "735779"
  },
  {
    "text": "it's already publishing data already and",
    "start": "735779",
    "end": "738240"
  },
  {
    "text": "if I look at the subscriber oh my bad",
    "start": "738240",
    "end": "742380"
  },
  {
    "text": "yeah so you see that the subscriber is",
    "start": "742380",
    "end": "745019"
  },
  {
    "text": "receiving data and publisher is",
    "start": "745019",
    "end": "746700"
  },
  {
    "text": "publishing data this is running on",
    "start": "746700",
    "end": "747720"
  },
  {
    "text": "kubernetes great let's look at a few",
    "start": "747720",
    "end": "750180"
  },
  {
    "text": "more things right so",
    "start": "750180",
    "end": "752279"
  },
  {
    "text": "uh what I can do is",
    "start": "752279",
    "end": "754920"
  },
  {
    "text": "I can scale up my number of replicas so",
    "start": "754920",
    "end": "757620"
  },
  {
    "text": "let me do something like",
    "start": "757620",
    "end": "759360"
  },
  {
    "text": "so what I want to do is have three",
    "start": "759360",
    "end": "761160"
  },
  {
    "text": "replicas for my subscriber application",
    "start": "761160",
    "end": "762839"
  },
  {
    "text": "and let's just do that so it got scaled",
    "start": "762839",
    "end": "766079"
  },
  {
    "text": "up and if I now go to if I now start",
    "start": "766079",
    "end": "769740"
  },
  {
    "text": "this logging again",
    "start": "769740",
    "end": "772139"
  },
  {
    "text": "um I'll be able to see my replica so my",
    "start": "772139",
    "end": "774060"
  },
  {
    "text": "replicas are starting now and you could",
    "start": "774060",
    "end": "775860"
  },
  {
    "text": "see that they they each got a",
    "start": "775860",
    "end": "777779"
  },
  {
    "text": "subscription up and running so now these",
    "start": "777779",
    "end": "781260"
  },
  {
    "text": "replicas should load balance my events",
    "start": "781260",
    "end": "783660"
  },
  {
    "text": "so if you look at this uh different",
    "start": "783660",
    "end": "785220"
  },
  {
    "text": "replicas are receiving events now and",
    "start": "785220",
    "end": "787800"
  },
  {
    "text": "that's is as simple as that so when you",
    "start": "787800",
    "end": "790260"
  },
  {
    "text": "have different replicas Dapper",
    "start": "790260",
    "end": "791880"
  },
  {
    "text": "automatically load balances the load for",
    "start": "791880",
    "end": "794760"
  },
  {
    "text": "you and in parallel I could also start",
    "start": "794760",
    "end": "799320"
  },
  {
    "text": "another subscriber service identical so",
    "start": "799320",
    "end": "802320"
  },
  {
    "text": "if you have let me show you really quick",
    "start": "802320",
    "end": "804740"
  },
  {
    "text": "yeah so when you have a new subscriber",
    "start": "804740",
    "end": "808320"
  },
  {
    "text": "running it behaves as a queue basically",
    "start": "808320",
    "end": "810360"
  },
  {
    "text": "it behaves the topic and it sends the",
    "start": "810360",
    "end": "812519"
  },
  {
    "text": "same event to both the subscribers so I",
    "start": "812519",
    "end": "814139"
  },
  {
    "text": "could just",
    "start": "814139",
    "end": "815639"
  },
  {
    "text": "do this",
    "start": "815639",
    "end": "818720"
  },
  {
    "text": "and and this is getting all the events",
    "start": "819660",
    "end": "821519"
  },
  {
    "text": "now so both the subscribers are getting",
    "start": "821519",
    "end": "823079"
  },
  {
    "text": "their own events basically and the one",
    "start": "823079",
    "end": "824820"
  },
  {
    "text": "with multiple replicas is getting load",
    "start": "824820",
    "end": "826500"
  },
  {
    "text": "balance so yeah this is how like this is",
    "start": "826500",
    "end": "828779"
  },
  {
    "text": "the competing consumers pattern where",
    "start": "828779",
    "end": "830339"
  },
  {
    "text": "you get uh different wherever different",
    "start": "830339",
    "end": "832680"
  },
  {
    "text": "replicas get one message each and then",
    "start": "832680",
    "end": "834660"
  },
  {
    "text": "the consumer group pattern where",
    "start": "834660",
    "end": "835800"
  },
  {
    "text": "different uh application IDs get the",
    "start": "835800",
    "end": "838019"
  },
  {
    "text": "same events so yeah this is how it works",
    "start": "838019",
    "end": "840600"
  },
  {
    "text": "and now what I can do is a really",
    "start": "840600",
    "end": "842579"
  },
  {
    "text": "interesting thing that people often do",
    "start": "842579",
    "end": "844380"
  },
  {
    "text": "uh say I want to use kaf concept of",
    "start": "844380",
    "end": "846959"
  },
  {
    "text": "radius all this while I was using red is",
    "start": "846959",
    "end": "848459"
  },
  {
    "text": "but if I want to use Kafka all I want to",
    "start": "848459",
    "end": "850440"
  },
  {
    "text": "do is",
    "start": "850440",
    "end": "852480"
  },
  {
    "text": "um apply a Kafka spec so now if I see",
    "start": "852480",
    "end": "857160"
  },
  {
    "text": "I have two components Kafka and that is",
    "start": "857160",
    "end": "859079"
  },
  {
    "text": "and I can remove riders for that matter",
    "start": "859079",
    "end": "860579"
  },
  {
    "text": "let me go ahead and do that",
    "start": "860579",
    "end": "864120"
  },
  {
    "text": "um",
    "start": "864120",
    "end": "866120"
  },
  {
    "text": "yeah not everything but just the red is",
    "start": "866279",
    "end": "868620"
  },
  {
    "text": "one",
    "start": "868620",
    "end": "869639"
  },
  {
    "text": "and I have deleted radius now so what I",
    "start": "869639",
    "end": "872100"
  },
  {
    "text": "want to do is",
    "start": "872100",
    "end": "874519"
  },
  {
    "text": "just let my applications know that hey",
    "start": "874519",
    "end": "877560"
  },
  {
    "text": "the",
    "start": "877560",
    "end": "879000"
  },
  {
    "text": "the name of the pub sub has changed and",
    "start": "879000",
    "end": "882000"
  },
  {
    "text": "instead now use Kafka so earlier they",
    "start": "882000",
    "end": "884339"
  },
  {
    "text": "were pointing to Reddit and now I have",
    "start": "884339",
    "end": "885660"
  },
  {
    "text": "it updated the environment variable to",
    "start": "885660",
    "end": "887220"
  },
  {
    "text": "use Kafka so that's all I need to do and",
    "start": "887220",
    "end": "889560"
  },
  {
    "text": "if I look at the logs again right uh by",
    "start": "889560",
    "end": "892199"
  },
  {
    "text": "the way it should have already restarted",
    "start": "892199",
    "end": "893820"
  },
  {
    "text": "my application so if I look at the logs",
    "start": "893820",
    "end": "896459"
  },
  {
    "text": "again",
    "start": "896459",
    "end": "898639"
  },
  {
    "text": "yeah okay so now this is running on",
    "start": "898980",
    "end": "902639"
  },
  {
    "text": "Reddit on Kafka and listening to",
    "start": "902639",
    "end": "904500"
  },
  {
    "text": "everything and same for publisher",
    "start": "904500",
    "end": "907320"
  },
  {
    "text": "I just I can just do this Cube tail and",
    "start": "907320",
    "end": "911160"
  },
  {
    "text": "it's publishing on Kafka and how I can",
    "start": "911160",
    "end": "912779"
  },
  {
    "text": "confirm is by taking this ID",
    "start": "912779",
    "end": "916260"
  },
  {
    "text": "and going in",
    "start": "916260",
    "end": "918120"
  },
  {
    "text": "like this",
    "start": "918120",
    "end": "920839"
  },
  {
    "text": "so uh yeah if you can see this API call",
    "start": "921779",
    "end": "925740"
  },
  {
    "text": "this is going to Kafka so it's as simple",
    "start": "925740",
    "end": "928260"
  },
  {
    "text": "to switch components you don't need to",
    "start": "928260",
    "end": "929880"
  },
  {
    "text": "learn how Kafka works you want to learn",
    "start": "929880",
    "end": "931800"
  },
  {
    "text": "how radius works all you need to do is",
    "start": "931800",
    "end": "933480"
  },
  {
    "text": "just let Dapper know I want to talk to",
    "start": "933480",
    "end": "935639"
  },
  {
    "text": "these components so yeah",
    "start": "935639",
    "end": "938279"
  },
  {
    "text": "uh that was it for the demo for now and",
    "start": "938279",
    "end": "942300"
  },
  {
    "text": "let me jump back to this",
    "start": "942300",
    "end": "945800"
  },
  {
    "text": "so yeah now we can look at some of the",
    "start": "946079",
    "end": "949199"
  },
  {
    "text": "new improvements that we introduced in",
    "start": "949199",
    "end": "951120"
  },
  {
    "text": "the Dapper pop-up sub block and uh two",
    "start": "951120",
    "end": "954540"
  },
  {
    "text": "major parts of it so first is the API",
    "start": "954540",
    "end": "956399"
  },
  {
    "text": "itself so using the bulk API what you",
    "start": "956399",
    "end": "959279"
  },
  {
    "text": "can do instead of publishing events one",
    "start": "959279",
    "end": "961260"
  },
  {
    "text": "by one you could publish like a bulk of",
    "start": "961260",
    "end": "963779"
  },
  {
    "text": "events to Dapper and then what Dapper",
    "start": "963779",
    "end": "966180"
  },
  {
    "text": "does is it forwards the events in",
    "start": "966180",
    "end": "969300"
  },
  {
    "text": "parallel published request to the pub",
    "start": "969300",
    "end": "971100"
  },
  {
    "text": "sub queue",
    "start": "971100",
    "end": "972300"
  },
  {
    "text": "similarly while receiving Dapper will",
    "start": "972300",
    "end": "974459"
  },
  {
    "text": "receive events for you buffer them for",
    "start": "974459",
    "end": "976260"
  },
  {
    "text": "some time and then send it as a bulk to",
    "start": "976260",
    "end": "978420"
  },
  {
    "text": "your subscribing app and this improves",
    "start": "978420",
    "end": "981180"
  },
  {
    "text": "the latency between uh the application",
    "start": "981180",
    "end": "983579"
  },
  {
    "text": "and the Dapper by a lot and also Dapper",
    "start": "983579",
    "end": "985920"
  },
  {
    "text": "can make parallel published requests now",
    "start": "985920",
    "end": "987480"
  },
  {
    "text": "which is even faster than making single",
    "start": "987480",
    "end": "989579"
  },
  {
    "text": "requests",
    "start": "989579",
    "end": "991639"
  },
  {
    "text": "furthermore if the pub sub component",
    "start": "991639",
    "end": "993839"
  },
  {
    "text": "also supports bulk you could also",
    "start": "993839",
    "end": "995699"
  },
  {
    "text": "optimize it further so the Dapper",
    "start": "995699",
    "end": "998279"
  },
  {
    "text": "sidecar can also talk to the broker as",
    "start": "998279",
    "end": "1001160"
  },
  {
    "text": "uh in in bulk request it can be on the",
    "start": "1001160",
    "end": "1004160"
  },
  {
    "text": "publish and it can be on the subscribing",
    "start": "1004160",
    "end": "1005660"
  },
  {
    "text": "end",
    "start": "1005660",
    "end": "1007100"
  },
  {
    "text": "uh just to give you some highlights it's",
    "start": "1007100",
    "end": "1009139"
  },
  {
    "text": "available as an alpha API from 1.10",
    "start": "1009139",
    "end": "1011839"
  },
  {
    "text": "which we release a few weeks back it's",
    "start": "1011839",
    "end": "1014180"
  },
  {
    "text": "highly performant because now you have",
    "start": "1014180",
    "end": "1016279"
  },
  {
    "text": "optimized uh Dapper to application as",
    "start": "1016279",
    "end": "1018980"
  },
  {
    "text": "well as dabble to broker communication",
    "start": "1018980",
    "end": "1020420"
  },
  {
    "text": "with the bulk apis",
    "start": "1020420",
    "end": "1022100"
  },
  {
    "text": "it's non-transactional so if you are",
    "start": "1022100",
    "end": "1024380"
  },
  {
    "text": "sending say thousand messages maybe 990",
    "start": "1024380",
    "end": "1027438"
  },
  {
    "text": "can fail and a 10 can pass or the other",
    "start": "1027439",
    "end": "1029959"
  },
  {
    "text": "way right so you uh what Dapper does it",
    "start": "1029959",
    "end": "1032660"
  },
  {
    "text": "it lets you know which one failed and",
    "start": "1032660",
    "end": "1033918"
  },
  {
    "text": "you can retry them",
    "start": "1033919",
    "end": "1035660"
  },
  {
    "text": "and there's no guarantee for any",
    "start": "1035660",
    "end": "1037760"
  },
  {
    "text": "ordering if you are sending 100 messages",
    "start": "1037760",
    "end": "1039558"
  },
  {
    "text": "in bulk they can be received in any",
    "start": "1039559",
    "end": "1041540"
  },
  {
    "text": "order and sent in any order and what you",
    "start": "1041540",
    "end": "1043938"
  },
  {
    "text": "have is unique IDs by which you can",
    "start": "1043939",
    "end": "1045918"
  },
  {
    "text": "identify your messages so yeah that",
    "start": "1045919",
    "end": "1048140"
  },
  {
    "text": "helps you",
    "start": "1048140",
    "end": "1049640"
  },
  {
    "text": "and let's really quickly look at how the",
    "start": "1049640",
    "end": "1052040"
  },
  {
    "text": "pub sub the bulk apis work so let me",
    "start": "1052040",
    "end": "1056480"
  },
  {
    "text": "I'll just minimize this",
    "start": "1056480",
    "end": "1059679"
  },
  {
    "text": "and",
    "start": "1060320",
    "end": "1061760"
  },
  {
    "text": "yeah so uh like the HTTP example for Pub",
    "start": "1061760",
    "end": "1065179"
  },
  {
    "text": "sub I have this bulk API here so it's a",
    "start": "1065179",
    "end": "1068480"
  },
  {
    "text": "simple HTTP request so this is an alpha",
    "start": "1068480",
    "end": "1071059"
  },
  {
    "text": "API it uses publish slash bulk and this",
    "start": "1071059",
    "end": "1074179"
  },
  {
    "text": "is the name of the pub sub as usual this",
    "start": "1074179",
    "end": "1076220"
  },
  {
    "text": "is the topic name now notice the content",
    "start": "1076220",
    "end": "1078860"
  },
  {
    "text": "and in here I have an entry ID this is",
    "start": "1078860",
    "end": "1081740"
  },
  {
    "text": "the unique message ID I need to tell",
    "start": "1081740",
    "end": "1083600"
  },
  {
    "text": "Dapper for my message and this is the",
    "start": "1083600",
    "end": "1085760"
  },
  {
    "text": "actual message and the type the content",
    "start": "1085760",
    "end": "1087919"
  },
  {
    "text": "type so I could send text as plain or",
    "start": "1087919",
    "end": "1091100"
  },
  {
    "text": "Json or Cloud event whatever I want and",
    "start": "1091100",
    "end": "1093620"
  },
  {
    "text": "let's just spin up",
    "start": "1093620",
    "end": "1096860"
  },
  {
    "text": "a Dapper Sidecar so I'll just copy this",
    "start": "1096860",
    "end": "1100520"
  },
  {
    "text": "command",
    "start": "1100520",
    "end": "1102880"
  },
  {
    "text": "and let me try to run this",
    "start": "1103039",
    "end": "1106039"
  },
  {
    "text": "so it says 204 no content again and it",
    "start": "1106039",
    "end": "1109520"
  },
  {
    "text": "should have published both the messages",
    "start": "1109520",
    "end": "1110660"
  },
  {
    "text": "and I have my midis GUI to check that so",
    "start": "1110660",
    "end": "1113840"
  },
  {
    "text": "I got this new uh",
    "start": "1113840",
    "end": "1117799"
  },
  {
    "text": "topic bulk examples and these are the",
    "start": "1117799",
    "end": "1119660"
  },
  {
    "text": "two messages so this is the first",
    "start": "1119660",
    "end": "1120919"
  },
  {
    "text": "message this is the second message and I",
    "start": "1120919",
    "end": "1122780"
  },
  {
    "text": "got both the both of them in my Pub sub",
    "start": "1122780",
    "end": "1125600"
  },
  {
    "text": "queue and I could also publish like",
    "start": "1125600",
    "end": "1129260"
  },
  {
    "text": "without a cloud event so I could just",
    "start": "1129260",
    "end": "1131419"
  },
  {
    "text": "send this again I got a 204",
    "start": "1131419",
    "end": "1134480"
  },
  {
    "text": "and if I refresh",
    "start": "1134480",
    "end": "1137660"
  },
  {
    "text": "I got two more messages now they are not",
    "start": "1137660",
    "end": "1139520"
  },
  {
    "text": "wrapped in Cloud event so this is how",
    "start": "1139520",
    "end": "1141140"
  },
  {
    "text": "the bulk published API works and",
    "start": "1141140",
    "end": "1143480"
  },
  {
    "text": "similarly I won't be running subscriber",
    "start": "1143480",
    "end": "1145220"
  },
  {
    "text": "but you can just check how easy it is it",
    "start": "1145220",
    "end": "1147380"
  },
  {
    "text": "is exactly the same as uh the other",
    "start": "1147380",
    "end": "1150320"
  },
  {
    "text": "subscriber but you have a bulk subscribe",
    "start": "1150320",
    "end": "1153200"
  },
  {
    "text": "enabled true so this tells the Dapper",
    "start": "1153200",
    "end": "1155000"
  },
  {
    "text": "that receiving bulk and then when you",
    "start": "1155000",
    "end": "1156799"
  },
  {
    "text": "actually get the message you have to",
    "start": "1156799",
    "end": "1158840"
  },
  {
    "text": "kind of parse it and figure out where's",
    "start": "1158840",
    "end": "1160940"
  },
  {
    "text": "the entry ID event and what are the",
    "start": "1160940",
    "end": "1163100"
  },
  {
    "text": "status of them",
    "start": "1163100",
    "end": "1164240"
  },
  {
    "text": "and respond back with some statuses and",
    "start": "1164240",
    "end": "1166760"
  },
  {
    "text": "this is where the SDK comes into picture",
    "start": "1166760",
    "end": "1168440"
  },
  {
    "text": "and makes your life really simpler so if",
    "start": "1168440",
    "end": "1171740"
  },
  {
    "text": "I go back to My Demo so this is the only",
    "start": "1171740",
    "end": "1175220"
  },
  {
    "text": "change required to start using the bulk",
    "start": "1175220",
    "end": "1177140"
  },
  {
    "text": "API via the JavaScript SDK uh earlier we",
    "start": "1177140",
    "end": "1180200"
  },
  {
    "text": "would be publishing it one by one and",
    "start": "1180200",
    "end": "1182179"
  },
  {
    "text": "now we'll do a publish bulk that's it",
    "start": "1182179",
    "end": "1183980"
  },
  {
    "text": "instead of sending one message you send",
    "start": "1183980",
    "end": "1185480"
  },
  {
    "text": "a bulk of messages and JavaScript API",
    "start": "1185480",
    "end": "1188380"
  },
  {
    "text": "it's really simple uh for subscribe it's",
    "start": "1188380",
    "end": "1192740"
  },
  {
    "text": "even simpler so if you notice this the",
    "start": "1192740",
    "end": "1195260"
  },
  {
    "text": "only changes the Subscribe method is now",
    "start": "1195260",
    "end": "1197780"
  },
  {
    "text": "called subscribe bulk the Callback also",
    "start": "1197780",
    "end": "1200000"
  },
  {
    "text": "Remains the Same so in the Callback you",
    "start": "1200000",
    "end": "1201620"
  },
  {
    "text": "get you still get messages one by one",
    "start": "1201620",
    "end": "1203240"
  },
  {
    "text": "but behind the scenes it's optimized for",
    "start": "1203240",
    "end": "1205220"
  },
  {
    "text": "you it's it's being received in received",
    "start": "1205220",
    "end": "1207200"
  },
  {
    "text": "in bulk so yeah that's the best part so",
    "start": "1207200",
    "end": "1209780"
  },
  {
    "text": "your callback your callback remains",
    "start": "1209780",
    "end": "1211520"
  },
  {
    "text": "exactly the same when you migrate to",
    "start": "1211520",
    "end": "1213020"
  },
  {
    "text": "using bulk API",
    "start": "1213020",
    "end": "1216080"
  },
  {
    "text": "and we did we did try it out we did see",
    "start": "1216080",
    "end": "1219980"
  },
  {
    "text": "how fast it is and it was phenomenal uh",
    "start": "1219980",
    "end": "1223220"
  },
  {
    "text": "for publish you could already see the",
    "start": "1223220",
    "end": "1225260"
  },
  {
    "text": "P95 uh became 55 milliseconds from 176",
    "start": "1225260",
    "end": "1229940"
  },
  {
    "text": "in this performance test and these all",
    "start": "1229940",
    "end": "1232039"
  },
  {
    "text": "these tests are on the Dapper repo if",
    "start": "1232039",
    "end": "1233720"
  },
  {
    "text": "you want to go and check and uh for bulk",
    "start": "1233720",
    "end": "1236660"
  },
  {
    "text": "subscribe again we did a similar test",
    "start": "1236660",
    "end": "1238220"
  },
  {
    "text": "and you could see the latency really",
    "start": "1238220",
    "end": "1240440"
  },
  {
    "text": "dropping the P95 and p50",
    "start": "1240440",
    "end": "1243039"
  },
  {
    "text": "and this is a graphical comparison if",
    "start": "1243039",
    "end": "1246080"
  },
  {
    "text": "you want to look at it",
    "start": "1246080",
    "end": "1247640"
  },
  {
    "text": "and yeah that was for my talk and thank",
    "start": "1247640",
    "end": "1250280"
  },
  {
    "text": "you so much and you could go and check",
    "start": "1250280",
    "end": "1252200"
  },
  {
    "text": "out the diaper repo here and join our",
    "start": "1252200",
    "end": "1254120"
  },
  {
    "text": "Discord Community follow us on Twitter",
    "start": "1254120",
    "end": "1256160"
  },
  {
    "text": "and yeah we have Community calls you can",
    "start": "1256160",
    "end": "1258740"
  },
  {
    "text": "come and check out those as well so here",
    "start": "1258740",
    "end": "1261679"
  },
  {
    "text": "are some links and here's the QR code",
    "start": "1261679",
    "end": "1263240"
  },
  {
    "text": "for the presentation I'll be sharing the",
    "start": "1263240",
    "end": "1265340"
  },
  {
    "text": "presentation as well as the code shortly",
    "start": "1265340",
    "end": "1267380"
  },
  {
    "text": "yeah on schedule schedule app yeah thank",
    "start": "1267380",
    "end": "1270380"
  },
  {
    "text": "you",
    "start": "1270380",
    "end": "1271290"
  },
  {
    "text": "[Applause]",
    "start": "1271290",
    "end": "1275619"
  },
  {
    "text": "any questions",
    "start": "1276860",
    "end": "1279460"
  },
  {
    "text": "sure there's a mic you can you can take",
    "start": "1280340",
    "end": "1282320"
  },
  {
    "text": "the mic and ask",
    "start": "1282320",
    "end": "1285039"
  },
  {
    "text": "all these features that you present are",
    "start": "1285919",
    "end": "1288919"
  },
  {
    "text": "also available in Azure container apps",
    "start": "1288919",
    "end": "1293720"
  },
  {
    "text": "yeah okay you mean the Dapper",
    "start": "1293720",
    "end": "1296539"
  },
  {
    "text": "integration yeah yeah it is",
    "start": "1296539",
    "end": "1299299"
  },
  {
    "text": "um second question is uh are you",
    "start": "1299299",
    "end": "1301400"
  },
  {
    "text": "implying that I can use I can replace",
    "start": "1301400",
    "end": "1303500"
  },
  {
    "text": "Kafka completely and use a pops up uh",
    "start": "1303500",
    "end": "1308059"
  },
  {
    "text": "pattern with Tapper altogether yeah in",
    "start": "1308059",
    "end": "1311780"
  },
  {
    "text": "theory you could so uh unless you are",
    "start": "1311780",
    "end": "1313940"
  },
  {
    "text": "extremely invested in Kafka unless",
    "start": "1313940",
    "end": "1315559"
  },
  {
    "text": "you're doing really specific fine",
    "start": "1315559",
    "end": "1316820"
  },
  {
    "text": "tunings you could come and use Dapper",
    "start": "1316820",
    "end": "1318919"
  },
  {
    "text": "and there have been like users who have",
    "start": "1318919",
    "end": "1320720"
  },
  {
    "text": "reported like really great performance",
    "start": "1320720",
    "end": "1322520"
  },
  {
    "text": "with the bulk API comparing it with the",
    "start": "1322520",
    "end": "1324260"
  },
  {
    "text": "confluent SDK directly and it was really",
    "start": "1324260",
    "end": "1326780"
  },
  {
    "text": "great so yeah you could and but if you",
    "start": "1326780",
    "end": "1328880"
  },
  {
    "text": "are like really into Kafka then probably",
    "start": "1328880",
    "end": "1330320"
  },
  {
    "text": "you're better with Kafka thank you yeah",
    "start": "1330320",
    "end": "1334539"
  },
  {
    "text": "thank you for the enlightening talk",
    "start": "1339260",
    "end": "1341780"
  },
  {
    "text": "um you mentioned that there is uh no in",
    "start": "1341780",
    "end": "1344059"
  },
  {
    "text": "order processing is that also through if",
    "start": "1344059",
    "end": "1346460"
  },
  {
    "text": "there you're ascending to the same topic",
    "start": "1346460",
    "end": "1348500"
  },
  {
    "text": "or is it is it a general theme yeah it",
    "start": "1348500",
    "end": "1351799"
  },
  {
    "text": "is in general like uh the order is not",
    "start": "1351799",
    "end": "1353659"
  },
  {
    "text": "preserved in bulk apis",
    "start": "1353659",
    "end": "1355580"
  },
  {
    "text": "yeah thank you",
    "start": "1355580",
    "end": "1359080"
  },
  {
    "text": "I was wondering uh if you can use the",
    "start": "1363320",
    "end": "1366260"
  },
  {
    "text": "bulk functionalities separate so for",
    "start": "1366260",
    "end": "1369620"
  },
  {
    "text": "example if you can use the build publish",
    "start": "1369620",
    "end": "1371780"
  },
  {
    "text": "but still use the single consume part",
    "start": "1371780",
    "end": "1374659"
  },
  {
    "text": "yeah you can do that absolutely those",
    "start": "1374659",
    "end": "1376460"
  },
  {
    "text": "are orthogonal apis so you could use mix",
    "start": "1376460",
    "end": "1378320"
  },
  {
    "text": "and match okay yeah okay thank you sure",
    "start": "1378320",
    "end": "1382340"
  },
  {
    "text": "okay this one",
    "start": "1382340",
    "end": "1385779"
  },
  {
    "text": "thank you uh who is acknowledging the",
    "start": "1392780",
    "end": "1396620"
  },
  {
    "text": "messages or in case of Kafka committing",
    "start": "1396620",
    "end": "1399140"
  },
  {
    "text": "the offsets",
    "start": "1399140",
    "end": "1400580"
  },
  {
    "text": "especially in the case of bulk apis",
    "start": "1400580",
    "end": "1402679"
  },
  {
    "text": "thank you",
    "start": "1402679",
    "end": "1403760"
  },
  {
    "text": "yeah so the application is responsible",
    "start": "1403760",
    "end": "1405980"
  },
  {
    "text": "to respond back with the status and then",
    "start": "1405980",
    "end": "1408320"
  },
  {
    "text": "Dapper responds back to Kafka and does",
    "start": "1408320",
    "end": "1410120"
  },
  {
    "text": "the actual checkpointing",
    "start": "1410120",
    "end": "1411860"
  },
  {
    "text": "so without that Kafka will keep retrying",
    "start": "1411860",
    "end": "1414200"
  },
  {
    "text": "and Dapper will again keep retrying yeah",
    "start": "1414200",
    "end": "1418179"
  },
  {
    "text": "any other questions",
    "start": "1419539",
    "end": "1422379"
  },
  {
    "text": "I have a question about a",
    "start": "1423200",
    "end": "1424900"
  },
  {
    "text": "non-transactional problem with the bulk",
    "start": "1424900",
    "end": "1427580"
  },
  {
    "text": "messaging yeah so that is not",
    "start": "1427580",
    "end": "1429260"
  },
  {
    "text": "transactional between Dapper and Kafka",
    "start": "1429260",
    "end": "1432320"
  },
  {
    "text": "or Dapper between the other Dapper that",
    "start": "1432320",
    "end": "1434900"
  },
  {
    "text": "we're communicating with applications",
    "start": "1434900",
    "end": "1437720"
  },
  {
    "text": "so generally when your application is",
    "start": "1437720",
    "end": "1439940"
  },
  {
    "text": "talking to",
    "start": "1439940",
    "end": "1441280"
  },
  {
    "text": "your Dapper instance right it is",
    "start": "1441280",
    "end": "1443720"
  },
  {
    "text": "non-transactional now the underlying",
    "start": "1443720",
    "end": "1445039"
  },
  {
    "text": "implementation might vary in some case",
    "start": "1445039",
    "end": "1447620"
  },
  {
    "text": "maybe the underlying implementation is",
    "start": "1447620",
    "end": "1449360"
  },
  {
    "text": "transactional but on the uh Dapper to",
    "start": "1449360",
    "end": "1451940"
  },
  {
    "text": "application Level it's always",
    "start": "1451940",
    "end": "1452960"
  },
  {
    "text": "non-transactional so that's for the",
    "start": "1452960",
    "end": "1454640"
  },
  {
    "text": "application like to deal with it yeah",
    "start": "1454640",
    "end": "1456620"
  },
  {
    "text": "okay thank you yeah sure",
    "start": "1456620",
    "end": "1458720"
  },
  {
    "text": "like one example of this is uh maybe",
    "start": "1458720",
    "end": "1461780"
  },
  {
    "text": "um I I don't know if it's gcp batch or",
    "start": "1461780",
    "end": "1463820"
  },
  {
    "text": "something but there's one component that",
    "start": "1463820",
    "end": "1465559"
  },
  {
    "text": "only has transactional support but still",
    "start": "1465559",
    "end": "1468020"
  },
  {
    "text": "Dapper treats it as non-transactional",
    "start": "1468020",
    "end": "1469640"
  },
  {
    "text": "because of the API so the API does not",
    "start": "1469640",
    "end": "1471559"
  },
  {
    "text": "guarantee that yeah",
    "start": "1471559",
    "end": "1474700"
  },
  {
    "text": "hey uh on the ball consumption does it",
    "start": "1483020",
    "end": "1486440"
  },
  {
    "text": "also split it like in chunks and you can",
    "start": "1486440",
    "end": "1488360"
  },
  {
    "text": "have multiple consumers at the same time",
    "start": "1488360",
    "end": "1489860"
  },
  {
    "text": "or the entire bulk is just given to one",
    "start": "1489860",
    "end": "1492140"
  },
  {
    "text": "of the consumers",
    "start": "1492140",
    "end": "1493640"
  },
  {
    "text": "you could have multiple consumers so you",
    "start": "1493640",
    "end": "1495860"
  },
  {
    "text": "could again go back and have",
    "start": "1495860",
    "end": "1498440"
  },
  {
    "text": "[Music]",
    "start": "1498440",
    "end": "1498679"
  },
  {
    "text": "um",
    "start": "1498679",
    "end": "1499700"
  },
  {
    "text": "this pattern somewhere so you have",
    "start": "1499700",
    "end": "1502100"
  },
  {
    "text": "multiple consumers and both of them are",
    "start": "1502100",
    "end": "1503720"
  },
  {
    "text": "getting their own bulks yeah but if I",
    "start": "1503720",
    "end": "1506360"
  },
  {
    "text": "published elements inside of it will be",
    "start": "1506360",
    "end": "1509419"
  },
  {
    "text": "100 elements given to only one of the",
    "start": "1509419",
    "end": "1511220"
  },
  {
    "text": "replicas or does it somehow split the",
    "start": "1511220",
    "end": "1513799"
  },
  {
    "text": "bulk yeah if you have different replicas",
    "start": "1513799",
    "end": "1515659"
  },
  {
    "text": "then yeah you will get different bulk",
    "start": "1515659",
    "end": "1517400"
  },
  {
    "text": "for each replica",
    "start": "1517400",
    "end": "1518840"
  },
  {
    "text": "like a different set of messages for",
    "start": "1518840",
    "end": "1520880"
  },
  {
    "text": "each replica you have to load balance",
    "start": "1520880",
    "end": "1522380"
  },
  {
    "text": "the bulky split in chunks too and given",
    "start": "1522380",
    "end": "1524900"
  },
  {
    "text": "somehow load balance to all the that's",
    "start": "1524900",
    "end": "1527000"
  },
  {
    "text": "correct so when you do a bulk publish",
    "start": "1527000",
    "end": "1528620"
  },
  {
    "text": "that bulk gets published and then that's",
    "start": "1528620",
    "end": "1530539"
  },
  {
    "text": "it on the subscribing it's a fresh set",
    "start": "1530539",
    "end": "1533240"
  },
  {
    "text": "of messages in a bulk okay it's a subset",
    "start": "1533240",
    "end": "1535400"
  },
  {
    "text": "of yeah and on those on the when we",
    "start": "1535400",
    "end": "1537799"
  },
  {
    "text": "publish it and if the set is too high",
    "start": "1537799",
    "end": "1540080"
  },
  {
    "text": "what should we take into considerations",
    "start": "1540080",
    "end": "1541580"
  },
  {
    "text": "exactly so there are some there are some",
    "start": "1541580",
    "end": "1544100"
  },
  {
    "text": "metadata that you could see and each",
    "start": "1544100",
    "end": "1546440"
  },
  {
    "text": "component has its own maximum bulk limit",
    "start": "1546440",
    "end": "1548900"
  },
  {
    "text": "so that way you have to figure out what",
    "start": "1548900",
    "end": "1551299"
  },
  {
    "text": "component you are using and there's also",
    "start": "1551299",
    "end": "1553340"
  },
  {
    "text": "on the subscribing and also there are",
    "start": "1553340",
    "end": "1554720"
  },
  {
    "text": "some parameters you could fine tune so",
    "start": "1554720",
    "end": "1556220"
  },
  {
    "text": "yeah it depends on what component you're",
    "start": "1556220",
    "end": "1557840"
  },
  {
    "text": "using okay thank you now sure",
    "start": "1557840",
    "end": "1561640"
  },
  {
    "text": "any other questions",
    "start": "1563299",
    "end": "1564919"
  },
  {
    "text": "okay",
    "start": "1564919",
    "end": "1566240"
  },
  {
    "text": "thank you folks thank you thank you for",
    "start": "1566240",
    "end": "1568039"
  },
  {
    "text": "listening",
    "start": "1568039",
    "end": "1569460"
  },
  {
    "text": "[Applause]",
    "start": "1569460",
    "end": "1576089"
  }
]