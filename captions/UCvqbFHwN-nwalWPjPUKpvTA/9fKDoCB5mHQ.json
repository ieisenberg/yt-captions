[
  {
    "text": "welcome my name is Casey Davenport I am an engineer at tae Guerra and I'm one of",
    "start": "30",
    "end": "5730"
  },
  {
    "text": "the core developers on Project calico I want to talk today about navigating the",
    "start": "5730",
    "end": "12809"
  },
  {
    "text": "container networking jungle I'm gonna walk through some common pitfalls that",
    "start": "12809",
    "end": "17960"
  },
  {
    "text": "you know we at tag era have seen and tell you how you can avoid those",
    "start": "17960",
    "end": "25490"
  },
  {
    "text": "so I like to start by reminding people that networking is important it used to",
    "start": "25730",
    "end": "32460"
  },
  {
    "text": "be that the network was really just what got users to your application but our applications have grown we've",
    "start": "32460",
    "end": "40410"
  },
  {
    "text": "started using containers micro service based architectures and what that means",
    "start": "40410",
    "end": "45480"
  },
  {
    "text": "is that our code doesn't fit on a single machine anymore so we're Network used to be what got",
    "start": "45480",
    "end": "52170"
  },
  {
    "text": "users to your application it's now actually a critical part of your application itself",
    "start": "52170",
    "end": "57469"
  },
  {
    "text": "so you know when your network is slow your application is slow",
    "start": "57469",
    "end": "62840"
  },
  {
    "text": "when your network is hard to debug it means your application is hard to debug",
    "start": "62840",
    "end": "68299"
  },
  {
    "text": "so networking is important I want to walk you through a brief history",
    "start": "68299",
    "end": "74909"
  },
  {
    "text": "of enterprise networks so so 20 years ago there was the enterprise",
    "start": "74909",
    "end": "79939"
  },
  {
    "text": "and the network had looked like this and a bunch America bare-metal servers",
    "start": "79939",
    "end": "85380"
  },
  {
    "text": "they're running their code directly on these servers each server was connected to their physical network",
    "start": "85380",
    "end": "91579"
  },
  {
    "text": "now this being the enterprise they realized pretty quickly they should probably have some kind of security",
    "start": "91579",
    "end": "99229"
  },
  {
    "text": "nobody implemented that was with the physical firewall device in a physical network so service that needed to talk",
    "start": "99229",
    "end": "105689"
  },
  {
    "text": "to each other were on one side of this device service that didn't need to talk to those or on the other side of this device",
    "start": "105689",
    "end": "112340"
  },
  {
    "text": "now not too long after that we started virtualizing things",
    "start": "112340",
    "end": "117619"
  },
  {
    "text": "and we switched our work our workloads from bare metal machines to virtual",
    "start": "117619",
    "end": "123270"
  },
  {
    "text": "machines the thinking at the time was well let's do the same thing for the network so",
    "start": "123270",
    "end": "128489"
  },
  {
    "text": "we'll take our real physical network and we'll into a virtual network so you end up with overlay networks they're",
    "start": "128489",
    "end": "135250"
  },
  {
    "text": "separated now not by a physical firewall but by a virtual firewall",
    "start": "135250",
    "end": "140790"
  },
  {
    "text": "and not too long after that we got containers and",
    "start": "140790",
    "end": "147120"
  },
  {
    "text": "when we switched from containers from virtual machines we did the same thing that we did when we switched from bare",
    "start": "147120",
    "end": "152920"
  },
  {
    "text": "metal to virtual machines we went another layer deep so we followed the same pattern and we ended up with",
    "start": "152920",
    "end": "159490"
  },
  {
    "text": "something like this so you've now got container overlays virtual machine overlays he had",
    "start": "159490",
    "end": "165220"
  },
  {
    "text": "containerized firewalls you have virtualized firewalls this is all running over some physical or cloud",
    "start": "165220",
    "end": "170890"
  },
  {
    "text": "network and there's some real problems with this",
    "start": "170890",
    "end": "177370"
  },
  {
    "text": "approach the first being complexity right it's really hard to look at this and know",
    "start": "177370",
    "end": "183460"
  },
  {
    "text": "what's going on and when something goes wrong with your application or in the network it's hard",
    "start": "183460",
    "end": "190150"
  },
  {
    "text": "to tell where exactly the problem is you don't know if it's in one of your container overlays or a containerized",
    "start": "190150",
    "end": "195970"
  },
  {
    "text": "firewall you don't know if that's in your virtual firewall somewhere if it's a problem in the underlying physical",
    "start": "195970",
    "end": "200980"
  },
  {
    "text": "network and like you said before when your network is hard to debug your application is hard to debug",
    "start": "200980",
    "end": "207900"
  },
  {
    "text": "the second problem with this is performance so each overlay that you add",
    "start": "207900",
    "end": "213130"
  },
  {
    "text": "to your network has a non-trivial performance hit and this matters to enterprises and in this model we",
    "start": "213130",
    "end": "220450"
  },
  {
    "text": "actually end up with stacked overlays multiple levels of overlays each one contributing their own performance hit",
    "start": "220450",
    "end": "227550"
  },
  {
    "text": "and the third problem with this which might not be quite as obvious is security so",
    "start": "227550",
    "end": "236950"
  },
  {
    "text": "we added all this complexity to the network there's all in the name of increasing",
    "start": "236950",
    "end": "242860"
  },
  {
    "text": "security but when it comes down to it there are still major flaws of this this",
    "start": "242860",
    "end": "248380"
  },
  {
    "text": "approach so now the first being that you know overlays are inherently dumb they",
    "start": "248380",
    "end": "254800"
  },
  {
    "text": "don't know what the needs of your application are they just know that these workloads need to talk to each other so the kind of level of isolation",
    "start": "254800",
    "end": "263070"
  },
  {
    "text": "they give you for your workloads is rather coarse-grained if an attacker gets access to you know",
    "start": "263070",
    "end": "270090"
  },
  {
    "text": "one container on one overlay then they have free reign over all the other containers on it overlay because there's",
    "start": "270090",
    "end": "275580"
  },
  {
    "text": "nothing no managing the connections between those this workloads and the second is",
    "start": "275580",
    "end": "282030"
  },
  {
    "text": "that each firewall is itself a single point of failure so if somebody can get",
    "start": "282030",
    "end": "287040"
  },
  {
    "text": "through one of your firewalls there's nothing on the other side stopping them from getting that entire overlay on the other",
    "start": "287040",
    "end": "293220"
  },
  {
    "text": "side so that was a very quick and and simplified",
    "start": "293220",
    "end": "301170"
  },
  {
    "text": "version of 20 years of networking history but it was meant to display that",
    "start": "301170",
    "end": "306540"
  },
  {
    "text": "it's really easy to get lost out in the networking jungle and and each of those",
    "start": "306540",
    "end": "313050"
  },
  {
    "text": "decisions was made at the time was you know considered the right",
    "start": "313050",
    "end": "318150"
  },
  {
    "text": "decision but the end result is that you end up with something that's overly complex something that doesn't perform",
    "start": "318150",
    "end": "324210"
  },
  {
    "text": "well and something that isn't actually that secure",
    "start": "324210",
    "end": "328400"
  },
  {
    "text": "so the question now is can kubernetes show us the way out",
    "start": "329300",
    "end": "334940"
  },
  {
    "text": "so from the very beginning kubernetes brought with it some new paradigms",
    "start": "334940",
    "end": "341480"
  },
  {
    "text": "you had a simplified service model simplified way of thinking about your workloads and",
    "start": "341480",
    "end": "347450"
  },
  {
    "text": "with that was a simplified networking model so in kubernetes every pod gets",
    "start": "347450",
    "end": "355140"
  },
  {
    "text": "its own IP address each pod can talk to every other pod in the network and",
    "start": "355140",
    "end": "361430"
  },
  {
    "text": "crucially each pod sees the same IP address for itself as the other pod seat",
    "start": "361430",
    "end": "367620"
  },
  {
    "text": "for that plot so this is vastly simplified and",
    "start": "367620",
    "end": "372920"
  },
  {
    "text": "comes with a lot of benefits in terms of reducing that complexity in terms of performance and",
    "start": "372920",
    "end": "380210"
  },
  {
    "text": "debug ability of your network and it doesn't make any claims about how you do this you can do it with a single pot",
    "start": "380210",
    "end": "386730"
  },
  {
    "text": "overlay network or you can do it by attaching each of your pods to physical or a cloud network",
    "start": "386730",
    "end": "393740"
  },
  {
    "text": "so this is great it solves the complexity problems and performance problems we had to the previous",
    "start": "393740",
    "end": "399629"
  },
  {
    "text": "approaches but there's still an issue of security so in",
    "start": "399629",
    "end": "405539"
  },
  {
    "text": "this model every pod can talk to every other pod so given this is your kubernetes cluster you've got a whole",
    "start": "405539",
    "end": "410939"
  },
  {
    "text": "lot of different connections that are possible and most of those actually aren't useful for your application",
    "start": "410939",
    "end": "418699"
  },
  {
    "text": "and what that means is that if a bad guy gets into your network then they have",
    "start": "418699",
    "end": "424500"
  },
  {
    "text": "free rein to access whatever they want so so what we really want to do is",
    "start": "424500",
    "end": "432030"
  },
  {
    "text": "eliminate all those connection paths so that only the bare minimum set of connections that are useful for our",
    "start": "432030",
    "end": "438479"
  },
  {
    "text": "application remain and this makes it really hard for attackers to infiltrate",
    "start": "438479",
    "end": "443849"
  },
  {
    "text": "your network so this is great in theory but it's",
    "start": "443849",
    "end": "449460"
  },
  {
    "text": "really hard to do just using overlay networks as the isolation mechanism",
    "start": "449460",
    "end": "454909"
  },
  {
    "text": "this is you know this diagram simplified but it's it's very fine-grained",
    "start": "454909",
    "end": "461240"
  },
  {
    "text": "so kubernetes has an answer to that and it's called network policy and",
    "start": "462139",
    "end": "468080"
  },
  {
    "text": "for those of you who aren't familiar with it network policy is a kubernetes resource and it's a way of defining at a",
    "start": "468080",
    "end": "475860"
  },
  {
    "text": "very high level and a declarative way what groups of pods should be able to talk to which other groups of pods and",
    "start": "475860",
    "end": "482219"
  },
  {
    "text": "how so what kubernetes network policy lets",
    "start": "482219",
    "end": "487529"
  },
  {
    "text": "you do just take a cluster like this where you've got a whole bunch of different pods much across different",
    "start": "487529",
    "end": "493710"
  },
  {
    "text": "namespaces full mesh connectivity and maybe turn on to something like this where pods can't communicate across",
    "start": "493710",
    "end": "500759"
  },
  {
    "text": "namespace boundaries or even you know whatever funky custom",
    "start": "500759",
    "end": "506729"
  },
  {
    "text": "isolation that your application requires",
    "start": "506729",
    "end": "510199"
  },
  {
    "text": "so um with that background they want to walk you through a few used to use user case",
    "start": "514640",
    "end": "522599"
  },
  {
    "text": "studies so these are real kubernetes users that",
    "start": "522600",
    "end": "528060"
  },
  {
    "text": "are deploying workloads in production and they got lost in the container networking jungle so I want to tell you",
    "start": "528060",
    "end": "535770"
  },
  {
    "text": "about designs that came up with and then the resulting architecture once they started",
    "start": "535770",
    "end": "542160"
  },
  {
    "text": "using kubernetes network policy with calico",
    "start": "542160",
    "end": "547100"
  },
  {
    "text": "so the first example as a well-known SAS provider and",
    "start": "548090",
    "end": "553130"
  },
  {
    "text": "they were in the process of moving all their virtual machine-based workloads to",
    "start": "553130",
    "end": "558830"
  },
  {
    "text": "kubernetes they're running kubernetes on bare metal and they had a pretty simple requirement",
    "start": "558830",
    "end": "566340"
  },
  {
    "text": "really and that's that their development pods test pods and their production pods I couldn't talk to each other",
    "start": "566340",
    "end": "573020"
  },
  {
    "text": "so they designed and implemented something and what they they built was",
    "start": "573020",
    "end": "578390"
  },
  {
    "text": "three separate kubernetes clusters we have physical firewalling between the",
    "start": "578390",
    "end": "584010"
  },
  {
    "text": "three clusters so that they couldn't talk to each other and that looked a bit like this so you've got a green cluster",
    "start": "584010",
    "end": "590400"
  },
  {
    "text": "blue cluster green is your production traffic and blue is for development",
    "start": "590400",
    "end": "596720"
  },
  {
    "text": "and you see they've got a physical firewall they're isel's separating their physical network so that the two",
    "start": "596720",
    "end": "603480"
  },
  {
    "text": "clusters can't talk to each other and they they came up with a couple",
    "start": "603480",
    "end": "609870"
  },
  {
    "text": "problems after running with this for a little while at first was that the pod overlay network was giving them",
    "start": "609870",
    "end": "617040"
  },
  {
    "text": "noticeable performance impacts and this was important to them and because they had control over their",
    "start": "617040",
    "end": "624210"
  },
  {
    "text": "physical infrastructure it was needless right so they could just connect these pods directly their physical network",
    "start": "624210",
    "end": "630570"
  },
  {
    "text": "instead the second problem they were having came from the fact that they were",
    "start": "630570",
    "end": "636690"
  },
  {
    "text": "separating these three different environments into three different kubernetes clusters and that meant they",
    "start": "636690",
    "end": "642000"
  },
  {
    "text": "were statically partitioning their servers into one cluster or another so this led the poor resource",
    "start": "642000",
    "end": "648480"
  },
  {
    "text": "utilization so for example they might have a spike in production traffic that",
    "start": "648480",
    "end": "655519"
  },
  {
    "text": "you know maxed out their production cluster well they still had a whole bunch of free CPU cycles in a dev",
    "start": "655519",
    "end": "661259"
  },
  {
    "text": "cluster and what this meant is they had the over-provision all three of those that they could prepare for the worst",
    "start": "661259",
    "end": "666569"
  },
  {
    "text": "case this was you know inefficient and costing the money",
    "start": "666569",
    "end": "672050"
  },
  {
    "text": "so they looked for something else and what they came up with was to combine",
    "start": "672050",
    "end": "678689"
  },
  {
    "text": "those three clusters into one so they got rid of the overlay networks and they moved dev tests and production into",
    "start": "678689",
    "end": "686399"
  },
  {
    "text": "a single cluster with each one and a separate namespace once they've done that they're now able",
    "start": "686399",
    "end": "693839"
  },
  {
    "text": "to use Network policy to isolate a long namespace boundaries and then even within namespaces to get the isolation",
    "start": "693839",
    "end": "700079"
  },
  {
    "text": "that meets the requirements so so after doing that you get something",
    "start": "700079",
    "end": "705509"
  },
  {
    "text": "that looks like this flat layer 3 Network all of your workloads are connected to the same physical network",
    "start": "705509",
    "end": "711420"
  },
  {
    "text": "and you're actually using network policy to decide who can talk to who",
    "start": "711420",
    "end": "717170"
  },
  {
    "text": "and just to kind of show what this looks like looks like at kubernetes level this",
    "start": "719329",
    "end": "726809"
  },
  {
    "text": "is the network policy required to isolate a single namespace it's about",
    "start": "726809",
    "end": "732889"
  },
  {
    "text": "25 lines of llamó",
    "start": "732889",
    "end": "736699"
  },
  {
    "text": "so the second case I want to talk to you about um a large financial corporation",
    "start": "739780",
    "end": "746220"
  },
  {
    "text": "and they're trying to deploy a traditional three-tier application so",
    "start": "746220",
    "end": "752200"
  },
  {
    "text": "when I say three to your application I mean they've got a set of workloads that",
    "start": "752200",
    "end": "758170"
  },
  {
    "text": "are their front end a middle tier that comprises all their business logic and does the secret sauce they've got a",
    "start": "758170",
    "end": "765430"
  },
  {
    "text": "third tier which is their database this is the way that people have deployed web applications for a long time and I want",
    "start": "765430",
    "end": "771700"
  },
  {
    "text": "to isolate between these tiers so that only adjacent adjacent tiers can talk to each other",
    "start": "771700",
    "end": "777300"
  },
  {
    "text": "so the way they started to implement this was to use overlay networks to",
    "start": "777300",
    "end": "782500"
  },
  {
    "text": "isolate the different tiers and they weren't using kubernetes at this point how they're trying to spend",
    "start": "782500",
    "end": "789280"
  },
  {
    "text": "their own thing so this is what they came up with they have two different overlay networks and based on which tier",
    "start": "789280",
    "end": "795760"
  },
  {
    "text": "container ends up in they attach it to a different overlay network and if it needs to communicate with both then it",
    "start": "795760",
    "end": "804100"
  },
  {
    "text": "gets attached to both overlay networks so they found some problems the first is",
    "start": "804100",
    "end": "813220"
  },
  {
    "text": "that this was really hard to configure so it was pushing the haulage of their",
    "start": "813220",
    "end": "818890"
  },
  {
    "text": "network into their pods they were having to change their application code to be aware of multiple interfaces in their",
    "start": "818890",
    "end": "824890"
  },
  {
    "text": "container depending on which tier the code belongs to",
    "start": "824890",
    "end": "830940"
  },
  {
    "text": "the second is that when they actually dug into this they realized you know we",
    "start": "831390",
    "end": "837670"
  },
  {
    "text": "actually have security requirements beyond what this gives us so as you can see up here if somebody",
    "start": "837670",
    "end": "844420"
  },
  {
    "text": "gets into one of my green pods they can talk to anybody on both network overlays because once again the overlays have no",
    "start": "844420",
    "end": "851280"
  },
  {
    "text": "concept of what your applications requirements are somebody gets into my green pod they can do a full port scan",
    "start": "851280",
    "end": "857350"
  },
  {
    "text": "of every pod in my network because they don't know if my application needs to do port scans or if it's just you know a",
    "start": "857350",
    "end": "863589"
  },
  {
    "text": "database so they had to pick something else",
    "start": "863589",
    "end": "870990"
  },
  {
    "text": "and what they ended up with was moving to kubernetes to manage their containers",
    "start": "870990",
    "end": "876420"
  },
  {
    "text": "and they use labels to differentiate between a three different tiers and once",
    "start": "876420",
    "end": "883050"
  },
  {
    "text": "once you're using labels it's really easy to use network policy to separate those tiers so they allow the traffic",
    "start": "883050",
    "end": "888970"
  },
  {
    "text": "now that they want based on which label as applied to that pod and they can go even further and allow only",
    "start": "888970",
    "end": "896500"
  },
  {
    "text": "the connections that are required for that application by specifying exact port protocols that",
    "start": "896500",
    "end": "902530"
  },
  {
    "text": "they expect that micro service to communicate on so again this this slide looks pretty",
    "start": "902530",
    "end": "910930"
  },
  {
    "text": "similar because it's the same solution they switched to a flat network each of the pods gets connected",
    "start": "910930",
    "end": "918130"
  },
  {
    "text": "to the network and use network policy to determine who can talk to them",
    "start": "918130",
    "end": "923250"
  },
  {
    "text": "and again the the network policy required to do this in kubernetes is",
    "start": "923250",
    "end": "928960"
  },
  {
    "text": "dead simple so they have a front end policy that",
    "start": "928960",
    "end": "934150"
  },
  {
    "text": "applies to their front end pods middle tier policy that uses a label selector to select the middle tier pods and the",
    "start": "934150",
    "end": "940000"
  },
  {
    "text": "database poly that's policy that selects their database",
    "start": "940000",
    "end": "944639"
  },
  {
    "text": "so I've got one more so this this use case was a large",
    "start": "945930",
    "end": "953200"
  },
  {
    "text": "storage provider and they're already running thousands of bare-metal servers without containers",
    "start": "953200",
    "end": "960130"
  },
  {
    "text": "now in production and they have really high security requirements so they were looking to",
    "start": "960130",
    "end": "967690"
  },
  {
    "text": "move to containers because they were starting to push the limits of what the cluster do and they're trying to come up",
    "start": "967690",
    "end": "974590"
  },
  {
    "text": "with a design to move to containers so",
    "start": "974590",
    "end": "979680"
  },
  {
    "text": "what they've got at the moment is a bunch of bare metal servers no",
    "start": "979680",
    "end": "985210"
  },
  {
    "text": "containers each one attached to a physical firewall device they've got some custom automation scripts that are",
    "start": "985210",
    "end": "991330"
  },
  {
    "text": "watching the code that's deployed on these servers and updating the firewalls accordingly this is working fine at the",
    "start": "991330",
    "end": "998260"
  },
  {
    "text": "order of some service but they want to move to containers and they want to start using microservices",
    "start": "998260",
    "end": "1005249"
  },
  {
    "text": "so what they were looking at was something like this but",
    "start": "1005249",
    "end": "1010499"
  },
  {
    "text": "you know they knew even before they got to deploying that there could be",
    "start": "1010499",
    "end": "1015639"
  },
  {
    "text": "problems with this approach the first is that traditional automation is slow when you've got a bunch of bare",
    "start": "1015639",
    "end": "1021669"
  },
  {
    "text": "metal servers and you're pulling your code to bare metal you don't have a whole lot of churn in",
    "start": "1021669",
    "end": "1027548"
  },
  {
    "text": "your network for one of the attributes and one of the benefits of things like kubernetes and containers is its dynamic",
    "start": "1027549",
    "end": "1034659"
  },
  {
    "text": "nature right you can dynamically scale and schedule different workloads all across your cluster and keeping up with",
    "start": "1034659",
    "end": "1042699"
  },
  {
    "text": "this churn is difficult using traditional automation methods so it was really hard for them to keep these",
    "start": "1042699",
    "end": "1048850"
  },
  {
    "text": "firewalls up-to-date the second is that",
    "start": "1048850",
    "end": "1056340"
  },
  {
    "text": "they were moving to a vastly larger number of workloads and trying to enter all of those firewall",
    "start": "1056340",
    "end": "1063909"
  },
  {
    "text": "rules into their physical firewall devices meant they were running out of room in the devices themselves",
    "start": "1063909",
    "end": "1070710"
  },
  {
    "text": "so you know isolating with physical firewalls was not going to work for them",
    "start": "1070710",
    "end": "1076809"
  },
  {
    "text": "so they decided to use kubernetes so",
    "start": "1076809",
    "end": "1082629"
  },
  {
    "text": "they're going to use scrapped their you know custom automation scripts to manage",
    "start": "1082629",
    "end": "1088090"
  },
  {
    "text": "their containers and I once they do that they can use network policy to replace those firewalls so",
    "start": "1088090",
    "end": "1095940"
  },
  {
    "text": "deja vu looks exactly the same",
    "start": "1095940",
    "end": "1101159"
  },
  {
    "text": "flat layer 3 network each containers attached to the network and the user network policy to isolate and they've",
    "start": "1101159",
    "end": "1107830"
  },
  {
    "text": "removed all the firewalls now you probably noticed that each of these three solutions looked exactly the",
    "start": "1107830",
    "end": "1114879"
  },
  {
    "text": "same and I think that's really a testament to the power of this model right you can take",
    "start": "1114879",
    "end": "1122049"
  },
  {
    "text": "three separate problems and reduce it down to the same network topology and a very flexible network",
    "start": "1122049",
    "end": "1128080"
  },
  {
    "text": "policy API to solve those three different problems and",
    "start": "1128080",
    "end": "1132900"
  },
  {
    "text": "again the policy used to do this in kubernetes is really simple",
    "start": "1135120",
    "end": "1141779"
  },
  {
    "text": "so I have a demo of this in action for you guys so you can see a little more",
    "start": "1143580",
    "end": "1150490"
  },
  {
    "text": "detail what this is like so I'm gonna deploy really simple application on kubernetes",
    "start": "1150490",
    "end": "1157890"
  },
  {
    "text": "it's got I read this back end and it has a replicated front-end that I wrote that",
    "start": "1157890",
    "end": "1164980"
  },
  {
    "text": "will talk to Redis um when it receives a request from the client and when I start",
    "start": "1164980",
    "end": "1170440"
  },
  {
    "text": "it up you'll see everything can talk to everybody else this is a security problem so I'm going to put things in",
    "start": "1170440",
    "end": "1176770"
  },
  {
    "text": "the correct order make it so that only the front-end can talk to Redis and that the client can talk to the front-end",
    "start": "1176770",
    "end": "1184170"
  },
  {
    "text": "so I've got a local cluster running here",
    "start": "1184530",
    "end": "1191760"
  },
  {
    "text": "because I didn't want to depend on internet connectivity you want to try this out yourself there's a really great",
    "start": "1191760",
    "end": "1197260"
  },
  {
    "text": "way to do it you can go to a stack point do high and select Calico and you'll get a kubernetes cluster with Calico",
    "start": "1197260",
    "end": "1203800"
  },
  {
    "text": "installed just a couple minutes so I've got this demo script and this is",
    "start": "1203800",
    "end": "1210430"
  },
  {
    "text": "something I stole from the one and only Tim Hawke in let me oops",
    "start": "1210430",
    "end": "1218010"
  },
  {
    "text": "make that a little bigger for you so this is run against the real cluster",
    "start": "1218460",
    "end": "1223810"
  },
  {
    "text": "but allows me to just hit enter and it will run the next command for me so you don't have to watch me type",
    "start": "1223810",
    "end": "1231059"
  },
  {
    "text": "so see I have a cluster here it's running locally now it's got no pods and it's got three nodes so the first thing",
    "start": "1231540",
    "end": "1239350"
  },
  {
    "text": "I do is I'm going to install calico and I'm going to install cube DNS just some",
    "start": "1239350",
    "end": "1244930"
  },
  {
    "text": "basic networking requirements for the cluster next thing I'm going to do is",
    "start": "1244930",
    "end": "1250540"
  },
  {
    "text": "I'm going to create a namespace for the demo called demos and then I'll show you how I'm running",
    "start": "1250540",
    "end": "1256510"
  },
  {
    "text": "Redis so I'm using a replication controller with a single grep oka to just run the basic Redis outline docker",
    "start": "1256510",
    "end": "1264580"
  },
  {
    "text": "image so I'll go ahead and create that and I'll also",
    "start": "1264580",
    "end": "1270720"
  },
  {
    "text": "create this service to to from my datastore",
    "start": "1270720",
    "end": "1276990"
  },
  {
    "text": "cool you can see we've got one part running",
    "start": "1280050",
    "end": "1285510"
  },
  {
    "text": "so my application is pretty simple it's a simple Python flask app it's",
    "start": "1285510",
    "end": "1292690"
  },
  {
    "text": "going to run on port 80 and whenever it receives a request I was just genius",
    "start": "1292690",
    "end": "1298020"
  },
  {
    "text": "it's gonna give me some money so first thing it's going to do is it's",
    "start": "1298020",
    "end": "1303040"
  },
  {
    "text": "connect the Redis using kubernetes dns entry and when it connects it's going to",
    "start": "1303040",
    "end": "1309550"
  },
  {
    "text": "increment the amount of money that I have if it fails to connect the Redis it'll print out I failed to connect to Redis",
    "start": "1309550",
    "end": "1316290"
  },
  {
    "text": "but if it succeeds then it'll let me know exactly how much money I've made through my ingenious plan",
    "start": "1316290",
    "end": "1324660"
  },
  {
    "text": "so I packaged that up and docker image called moneymaker and",
    "start": "1324660",
    "end": "1331290"
  },
  {
    "text": "I'm going to create that with a replication controller",
    "start": "1331290",
    "end": "1336540"
  },
  {
    "text": "setting it to five replicas and I'm labeling them all with this front-end label",
    "start": "1336540",
    "end": "1342390"
  },
  {
    "text": "I'll stick with service in front of that so people can get to it",
    "start": "1342390",
    "end": "1347429"
  },
  {
    "text": "cool and you can see I've got five of those",
    "start": "1347550",
    "end": "1354930"
  },
  {
    "text": "running so on the left here this is gonna do it's gonna SS eight to do one of my",
    "start": "1354930",
    "end": "1361140"
  },
  {
    "text": "machines and it's basically gonna repeatedly hit my service and",
    "start": "1361140",
    "end": "1366740"
  },
  {
    "text": "tell me the results if it fails to hit the front end it'll print out fails to",
    "start": "1367010",
    "end": "1372660"
  },
  {
    "text": "hit the front end so on the left you can see it's printing out the hostname of",
    "start": "1372660",
    "end": "1378420"
  },
  {
    "text": "each one so it's getting load balanced across five different instances and I am",
    "start": "1378420",
    "end": "1383430"
  },
  {
    "text": "making some sweet cash but there's a problem here so I can SSH",
    "start": "1383430",
    "end": "1391830"
  },
  {
    "text": "in from the simple Redis out pine container and I can set my money or and back down to zero just like that",
    "start": "1391830",
    "end": "1400490"
  },
  {
    "text": "so that's not great and think about it a bit on the side I want to fix that with",
    "start": "1400490",
    "end": "1405510"
  },
  {
    "text": "a network policy so you can see I've got no policy to find at the moment",
    "start": "1405510",
    "end": "1411289"
  },
  {
    "text": "but I'm going to create some so the first thing I'm going to do is I'm going to create this Redis policy",
    "start": "1411830",
    "end": "1418550"
  },
  {
    "text": "and what this does is it uses label selectors to apply this policy to my Redis container so it selects based on",
    "start": "1418550",
    "end": "1426840"
  },
  {
    "text": "the eat demo label sorry demo Redis label and it allows incoming traffic",
    "start": "1426840",
    "end": "1432060"
  },
  {
    "text": "only from the front end and only on port six three seven nine TCP port 67 lat",
    "start": "1432060",
    "end": "1440809"
  },
  {
    "text": "so I'll go ahead and create that and I'm gonna do the same thing for my",
    "start": "1441440",
    "end": "1447600"
  },
  {
    "text": "front end this pulse is a little bit different because I do want users to be able to access it but I'm going to",
    "start": "1447600",
    "end": "1455010"
  },
  {
    "text": "restrict them to only be able to access TCP port 80 I just in case I've accidently left any ports open in my in",
    "start": "1455010",
    "end": "1461790"
  },
  {
    "text": "my pod so I'll create that as well",
    "start": "1461790",
    "end": "1468060"
  },
  {
    "text": "the last thing I need to do before this takes effect is enable isolation on my",
    "start": "1468060",
    "end": "1473170"
  },
  {
    "text": "namespace so up to this point I've just created the policies but not limit akin effect by doing this I'll be telling",
    "start": "1473170",
    "end": "1480750"
  },
  {
    "text": "my namespace that I want you to only allow traffic that is allowed by network",
    "start": "1480750",
    "end": "1485860"
  },
  {
    "text": "policies in this namespace cool so traffic keeps flowing nothing",
    "start": "1485860",
    "end": "1494860"
  },
  {
    "text": "looks any different however if I run that same command again",
    "start": "1494860",
    "end": "1500470"
  },
  {
    "text": "just using the Redis open container try to set my money back to zero nothing happens so",
    "start": "1500470",
    "end": "1508679"
  },
  {
    "text": "I am protected and and just to show you",
    "start": "1509100",
    "end": "1514120"
  },
  {
    "text": "a little bit more if I go ahead and delete the rebus policy that's allowing my front-end to talk to Redis then we'll",
    "start": "1514120",
    "end": "1520900"
  },
  {
    "text": "start seeing the front-end report that fails to talk to Redis sitting that default deny policy",
    "start": "1520900",
    "end": "1527370"
  },
  {
    "text": "if I do the same thing for my front-end policy we'll see failed to access front-end",
    "start": "1529470",
    "end": "1537780"
  },
  {
    "text": "and if I go ahead and turn off the namespace isolation we'll see traffic",
    "start": "1539190",
    "end": "1545170"
  },
  {
    "text": "starts flowing again",
    "start": "1545170",
    "end": "1548130"
  },
  {
    "text": "cool um hopefully that was enlightening and interesting if you're interested in",
    "start": "1550740",
    "end": "1557070"
  },
  {
    "text": "trying out project calico like I said stack point cloud is a great way to try it out it's really easy you can also",
    "start": "1557070",
    "end": "1563520"
  },
  {
    "text": "check out the Calico documentation we've got a funky new duck site",
    "start": "1563520",
    "end": "1569720"
  },
  {
    "text": "I'm Casey from tae Guerra if you're interested in building things like what",
    "start": "1569870",
    "end": "1575100"
  },
  {
    "text": "you just saw Tiger is hiring so come talk to me and I check out our github it's all open source",
    "start": "1575100",
    "end": "1581720"
  },
  {
    "text": "there's my twitter and we've got a public slack community as well if you're",
    "start": "1581720",
    "end": "1588179"
  },
  {
    "text": "interested in talking to other users or members of the dev team thanks a lot",
    "start": "1588179",
    "end": "1595460"
  },
  {
    "text": "I think I've got some time for questions [Music] yes",
    "start": "1602090",
    "end": "1609380"
  },
  {
    "text": "so we the question was do you support overlapping IPs and multi-tenancy",
    "start": "1610760",
    "end": "1617150"
  },
  {
    "text": "calico today doesn't do overlapping IP addresses we have a plan a technical",
    "start": "1617150",
    "end": "1624240"
  },
  {
    "text": "plan to do that but we haven't heard really enough user demand for it the way someone would do multi-tenancy and a",
    "start": "1624240",
    "end": "1630330"
  },
  {
    "text": "calico deployment would be through this network isolation and you know in",
    "start": "1630330",
    "end": "1635370"
  },
  {
    "text": "kubernetes you can use services to abstract IP addresses really easily",
    "start": "1635370",
    "end": "1640700"
  },
  {
    "text": "any other questions I think this one in the back because first",
    "start": "1643750",
    "end": "1649360"
  },
  {
    "text": "it I mean it applies to the pod but traffic that gets to the pod through a",
    "start": "1653320",
    "end": "1660169"
  },
  {
    "text": "service or through the pods IP address will both hit the same policy so it doesn't matter if you're using the",
    "start": "1660169",
    "end": "1665600"
  },
  {
    "text": "service or using the pot IP directly more questions yes",
    "start": "1665600",
    "end": "1674350"
  },
  {
    "text": "yeah so it will block ICMP if you don't specify it well yeah yeah well you can",
    "start": "1676510",
    "end": "1684470"
  },
  {
    "text": "also specify the TCP or UDP ports but",
    "start": "1684470",
    "end": "1689440"
  },
  {
    "text": "yeah",
    "start": "1690309",
    "end": "1693309"
  },
  {
    "text": "so the question was does calico do anything north-south respect to the ingress load balancer you can apply",
    "start": "1701010",
    "end": "1708730"
  },
  {
    "text": "policy on traffic that is coming from one of your ingress little balances and if you're running for example a",
    "start": "1708730",
    "end": "1715380"
  },
  {
    "text": "[Applause] ingress controller you can apply policy on traffic from that",
    "start": "1715380",
    "end": "1721080"
  },
  {
    "text": "the kubernetes spec itself doesn't at the moment talk about traffic external",
    "start": "1721080",
    "end": "1727180"
  },
  {
    "text": "to kubernetes in the first iteration but there's discussion discussion in the",
    "start": "1727180",
    "end": "1733600"
  },
  {
    "text": "cig about you know what how do we get to that point or should we get to that point I",
    "start": "1733600",
    "end": "1739770"
  },
  {
    "text": "hand in the back [Music]",
    "start": "1740280",
    "end": "1747490"
  },
  {
    "text": "so you think",
    "start": "1747490",
    "end": "1750900"
  },
  {
    "text": "yeah the question was do you think the network policies and kubernetes are sufficient to express all kinds of",
    "start": "1757290",
    "end": "1764400"
  },
  {
    "text": "network policy that you might do in a firewall and I think I think the answer there is",
    "start": "1764400",
    "end": "1770480"
  },
  {
    "text": "close but not quite there are still things you can't quite",
    "start": "1770480",
    "end": "1775650"
  },
  {
    "text": "Express in network policies just because of where the spec is at the",
    "start": "1775650",
    "end": "1780840"
  },
  {
    "text": "moment because it would be impossible to for example there's no way to specify an",
    "start": "1780840",
    "end": "1787080"
  },
  {
    "text": "exact IP match right it's just based on labels",
    "start": "1787080",
    "end": "1792260"
  },
  {
    "text": "[Music]",
    "start": "1794960",
    "end": "1798248"
  },
  {
    "text": "so in terms of performance gain what can you expect and removing from an overlay to calico it's quite a complicated",
    "start": "1800289",
    "end": "1807919"
  },
  {
    "text": "question and it can be it depends oops",
    "start": "1807919",
    "end": "1813370"
  },
  {
    "text": "all right I mean on that application I wouldn't expect a huge difference right",
    "start": "1813940",
    "end": "1820100"
  },
  {
    "text": "those five pods",
    "start": "1820100",
    "end": "1823330"
  },
  {
    "text": "[Music] yeah I mean unless you are running",
    "start": "1826260",
    "end": "1831650"
  },
  {
    "text": "something a little bit more significant than that it's not a huge deal",
    "start": "1831650",
    "end": "1836980"
  },
  {
    "text": "yes well",
    "start": "1838870",
    "end": "1845690"
  },
  {
    "text": "quite a bit of code so the policies are implemented on each",
    "start": "1845690",
    "end": "1851969"
  },
  {
    "text": "host in IP tables so Calico has a way of you know taking the centralized",
    "start": "1851969",
    "end": "1858149"
  },
  {
    "text": "kubernetes policies and distributing them across the cluster and making sure that each toast each host is programmed",
    "start": "1858149",
    "end": "1863219"
  },
  {
    "text": "with the right rules for the workloads that are on it",
    "start": "1863219",
    "end": "1867919"
  },
  {
    "text": "yeah so can the number of rules explode I mean you can definitely end up with a",
    "start": "1874609",
    "end": "1879779"
  },
  {
    "text": "lot of rules we've done one both significant performance testing to make",
    "start": "1879779",
    "end": "1885570"
  },
  {
    "text": "sure that when you get to you high scale your performance isn't impacted",
    "start": "1885570",
    "end": "1891440"
  },
  {
    "text": "there was actually recently a blog post that the kubernetes guys did on IP",
    "start": "1891440",
    "end": "1896519"
  },
  {
    "text": "tables performance and it showed at high scale you know a couple percent",
    "start": "1896519",
    "end": "1901729"
  },
  {
    "text": "performance impact over bare metal",
    "start": "1901729",
    "end": "1905839"
  },
  {
    "text": "should policy it's a good question",
    "start": "1910370",
    "end": "1916869"
  },
  {
    "text": "so calico two supports that but the kubernetes spec does not yet have a",
    "start": "1916869",
    "end": "1924019"
  },
  {
    "text": "concept of egress policy so that's another thing where we've been discussing in the networking sig kind of",
    "start": "1924019",
    "end": "1931849"
  },
  {
    "text": "what where that belongs does that belong as part of the kubernetes api or is that",
    "start": "1931849",
    "end": "1937059"
  },
  {
    "text": "something that belongs outside of kubernetes but you can expect this spec",
    "start": "1937059",
    "end": "1942590"
  },
  {
    "text": "to evolve and if you're interested in that definitely get involved in the network cig",
    "start": "1942590",
    "end": "1948009"
  },
  {
    "text": "what time of yeah",
    "start": "1952930",
    "end": "1956190"
  },
  {
    "text": "got any more questions great well feel free to come chat with",
    "start": "1957990",
    "end": "1963929"
  },
  {
    "text": "me afterwards and thank you very much",
    "start": "1963929",
    "end": "1968000"
  }
]