[
  {
    "text": "okay hi everyone I'm Kai from alib cloud and I'm so excited today to be here with",
    "start": "520",
    "end": "7040"
  },
  {
    "text": "you uh and alongside me is W Yang from s University and we are here to uh dive",
    "start": "7040",
    "end": "14280"
  },
  {
    "text": "into an exciting topic uhry Amplified for OBS ability with with ebpf enabl",
    "start": "14280",
    "end": "21720"
  },
  {
    "text": "distribut tracing okay um let's start the first",
    "start": "21720",
    "end": "28840"
  },
  {
    "text": "part uh as as Cloud native technology has evolved our applications have",
    "start": "28840",
    "end": "35239"
  },
  {
    "text": "undergone revolutionary changes uh we have shifted from monolithic applications to um",
    "start": "35239",
    "end": "42039"
  },
  {
    "text": "microservices and uh from physical machines to Containers this innovation",
    "start": "42039",
    "end": "47680"
  },
  {
    "text": "in infrastructure has reached the bar for observability so what does observability",
    "start": "47680",
    "end": "54920"
  },
  {
    "text": "in kubernetes really mean we need to think about this question from different",
    "start": "54920",
    "end": "59960"
  },
  {
    "text": "different angles if you are an application developer you may want to know how your",
    "start": "59960",
    "end": "66760"
  },
  {
    "text": "application is performing and whether it's experiencing and",
    "start": "66760",
    "end": "72400"
  },
  {
    "text": "overloads and you will also be interested in understanding which meares",
    "start": "72400",
    "end": "77520"
  },
  {
    "text": "or Services your application depends on and how these Services interact with",
    "start": "77520",
    "end": "84240"
  },
  {
    "text": "each other as for network operations professionals it's crucial to to",
    "start": "84240",
    "end": "90360"
  },
  {
    "text": "determine if network communication is being blocked when performance issues",
    "start": "90360",
    "end": "95880"
  },
  {
    "text": "are raise or if they have any problems with the container",
    "start": "95880",
    "end": "102880"
  },
  {
    "text": "Network and if you are a um network security expert you want to know uh",
    "start": "102880",
    "end": "109399"
  },
  {
    "text": "which uh which resources your services are trying to access and uh um which IP",
    "start": "109399",
    "end": "115360"
  },
  {
    "text": "address your services are requesting well open Telemetry aims to um address",
    "start": "115360",
    "end": "123079"
  },
  {
    "text": "these questions by providing a comprehensive framework and uh it offers a set of",
    "start": "123079",
    "end": "130239"
  },
  {
    "text": "tools for generating and uh collecting and um processing tary data including um",
    "start": "130239",
    "end": "138519"
  },
  {
    "text": "metrix traces and logs however um open Telemetry does come",
    "start": "138519",
    "end": "146120"
  },
  {
    "text": "with its own challenges one main issues is um",
    "start": "146120",
    "end": "152760"
  },
  {
    "text": "instrumentation if you have ever used open Telemetry you might you might have",
    "start": "152760",
    "end": "157920"
  },
  {
    "text": "being overed by the terms like um TR provider a meter provider and span",
    "start": "157920",
    "end": "164680"
  },
  {
    "text": "contacts and instrumenter it's not easy to understand this and if your programming language",
    "start": "164680",
    "end": "172239"
  },
  {
    "text": "doesn't support zero instrumentation then you might have to um change your codes and integrate these components in",
    "start": "172239",
    "end": "179840"
  },
  {
    "text": "into your applications and these components will run alongside your applications and uh",
    "start": "179840",
    "end": "187440"
  },
  {
    "text": "it will impact the performance another challenge is that",
    "start": "187440",
    "end": "192680"
  },
  {
    "text": "opet capabilities for um observing the kernel are relatively weak it focuses",
    "start": "192680",
    "end": "200000"
  },
  {
    "text": "more on the um application Level which means it might not be able to um to",
    "start": "200000",
    "end": "206000"
  },
  {
    "text": "explain the anomalies in the kernel uh to tackle this observability",
    "start": "206000",
    "end": "211480"
  },
  {
    "text": "challenges in kubernetes we have explored a new technology",
    "start": "211480",
    "end": "217120"
  },
  {
    "text": "EF and now when chm we'll continue to um share more insights on this",
    "start": "217120",
    "end": "223840"
  },
  {
    "text": "topic uh thank you Kai for highlighting the challenges in the existing",
    "start": "230319",
    "end": "236400"
  },
  {
    "text": "observability of open Telemetry in kuet Humanes and I'm and I'll share our EF",
    "start": "236400",
    "end": "244360"
  },
  {
    "text": "based solution to address the first challenge the high instrumentation of",
    "start": "244360",
    "end": "249959"
  },
  {
    "text": "open Telemetry before diving into our solution let me briefly introduce",
    "start": "249959",
    "end": "257280"
  },
  {
    "text": "ebpf ebpf allows user to run sand bosses programs within the N kernel without",
    "start": "257280",
    "end": "264960"
  },
  {
    "text": "changing the kernel source code ABF programs are loaded in into the kernel",
    "start": "264960",
    "end": "271440"
  },
  {
    "text": "and attach it to specific hooks such as Network events or file system operations",
    "start": "271440",
    "end": "278600"
  },
  {
    "text": "with different types like kpros and newpros targeting kernel and user",
    "start": "278600",
    "end": "284039"
  },
  {
    "text": "functions respectively when the hook operations are invoked the attach EF programs",
    "start": "284039",
    "end": "291800"
  },
  {
    "text": "execute written in C code and combined into by code EF programs are verified by",
    "start": "291800",
    "end": "298560"
  },
  {
    "text": "the EF we fire to ensure safety preventing issues like attribute memory",
    "start": "298560",
    "end": "305280"
  },
  {
    "text": "assess or infinance Loops EF maps are key value data structures that can store",
    "start": "305280",
    "end": "313080"
  },
  {
    "text": "and share data between the EF program and user space enabling persistent data",
    "start": "313080",
    "end": "321919"
  },
  {
    "text": "storage with ef we can Offroad the request tracing to the kernel decoupling",
    "start": "321919",
    "end": "328759"
  },
  {
    "text": "it from the user applications this approach eliminates the need for",
    "start": "328759",
    "end": "334479"
  },
  {
    "text": "modifying or instrumenting the user program thereby reducing the",
    "start": "334479",
    "end": "340160"
  },
  {
    "text": "instrumentation of of request tracing in the user space while both EF and the N kernel",
    "start": "340160",
    "end": "348400"
  },
  {
    "text": "module lkm EX stand their kernel functionality they differ in design and",
    "start": "348400",
    "end": "354960"
  },
  {
    "text": "usage eppf allows for safe lowlevel execution of custom code within the",
    "start": "354960",
    "end": "361800"
  },
  {
    "text": "kernel without modifying the kernel source F through the EF verifier in",
    "start": "361800",
    "end": "368599"
  },
  {
    "text": "contrast lkm offer greater flexibility but come with higher overhead and higher",
    "start": "368599",
    "end": "375400"
  },
  {
    "text": "risk such as potential system crashes therefore uh because of the",
    "start": "375400",
    "end": "382680"
  },
  {
    "text": "security Guaranty and the light weage of ebpf we choose it to implement our Inc",
    "start": "382680",
    "end": "389840"
  },
  {
    "text": "andm request tracing uh before introducing our",
    "start": "389840",
    "end": "395240"
  },
  {
    "text": "solution uh we first introduce the current approach of open Telemetry using",
    "start": "395240",
    "end": "401199"
  },
  {
    "text": "ebpf to achieve the automatic res uh request tracing at present open",
    "start": "401199",
    "end": "407639"
  },
  {
    "text": "telemetric Community presents an EF based automatic distributed tracing",
    "start": "407639",
    "end": "413840"
  },
  {
    "text": "framework for the gong applications uh here is the link to the corresponding ith web po uh although",
    "start": "413840",
    "end": "422280"
  },
  {
    "text": "this project implements automatic uh distributed tracing it is only for colog",
    "start": "422280",
    "end": "429199"
  },
  {
    "text": "applications and support only a limited number of key value pairs in the HTTP",
    "start": "429199",
    "end": "435919"
  },
  {
    "text": "header when passing the messages resulting in no support on passing and",
    "start": "435919",
    "end": "442919"
  },
  {
    "text": "tracing the messages with more key volum pairs therefore uh we want to provide an",
    "start": "442919",
    "end": "449759"
  },
  {
    "text": "automated request tracing system that can support multiple high level languages framework and is not limited",
    "start": "449759",
    "end": "458199"
  },
  {
    "text": "by the number of the key value pairs uh in the HTTP header this figure",
    "start": "458199",
    "end": "464159"
  },
  {
    "text": "illustrates the workflow of our ebpf based distributed tracing framework uh",
    "start": "464159",
    "end": "471280"
  },
  {
    "text": "with the black line showing the message transmission and the red lines",
    "start": "471280",
    "end": "476360"
  },
  {
    "text": "indicating the data flow of our Collective EV the system operates",
    "start": "476360",
    "end": "481960"
  },
  {
    "text": "through uh two main modules Trace generation and Trace collection the",
    "start": "481960",
    "end": "487080"
  },
  {
    "text": "trace generation Model includes three sub models generating Trace contest",
    "start": "487080",
    "end": "492639"
  },
  {
    "text": "inter service contest publication to transmit Chas contest across the network",
    "start": "492639",
    "end": "499759"
  },
  {
    "text": "and Inter service contest propagation to maintain the request cality the data",
    "start": "499759",
    "end": "505960"
  },
  {
    "text": "collection model gathers our Collective traces and spens it for further",
    "start": "505960",
    "end": "512518"
  },
  {
    "text": "visualization next we mainly expand the fre sub models in the trace",
    "start": "512519",
    "end": "520440"
  },
  {
    "text": "generation uh we generate the trace contacts use the open Telemetry",
    "start": "521159",
    "end": "528399"
  },
  {
    "text": "standard a trace contest consists of a trace ID span ID and parent span ID",
    "start": "528399",
    "end": "536560"
  },
  {
    "text": "which uniquely identify a spam the chase ID is a 18 byte volume that includes the",
    "start": "536560",
    "end": "543959"
  },
  {
    "text": "host IP address uh the entry time step a sequency number a debuging tag and",
    "start": "543959",
    "end": "551880"
  },
  {
    "text": "process ID the span ID is an 8 byte value that includes source and",
    "start": "551880",
    "end": "559120"
  },
  {
    "text": "destination IP addresses and a sequency number after generating a unique Trace",
    "start": "559120",
    "end": "567279"
  },
  {
    "text": "contest for each operation in an entr request our system propagates this Trace",
    "start": "567279",
    "end": "574440"
  },
  {
    "text": "contest between Services by analyzing the HTTP request",
    "start": "574440",
    "end": "580160"
  },
  {
    "text": "format we use HTTP headers to carry the trace contest following the open",
    "start": "580160",
    "end": "586360"
  },
  {
    "text": "Telemetry approach allowing the trace contacts to travel across the",
    "start": "586360",
    "end": "592399"
  },
  {
    "text": "network as shown in the figure or when a request with our Chace contest is re is",
    "start": "592399",
    "end": "599040"
  },
  {
    "text": "received uh our ebf program hook to the uh Capo on S reive me uh s receive",
    "start": "599040",
    "end": "606680"
  },
  {
    "text": "message kernel function intercepts and extracts the trace contact without",
    "start": "606680",
    "end": "612240"
  },
  {
    "text": "removing it or when sending request to Upstream service our SK ms3 ebpf program",
    "start": "612240",
    "end": "620399"
  },
  {
    "text": "in just the trace contest as custom key value pairs into the request header or",
    "start": "620399",
    "end": "626880"
  },
  {
    "text": "which may increase the message length the key to trace an entm request is to",
    "start": "626880",
    "end": "634560"
  },
  {
    "text": "accurately reconize the request City to achieve this our system must effectively",
    "start": "634560",
    "end": "642200"
  },
  {
    "text": "propagate the trace contest through the service from the parent request to the",
    "start": "642200",
    "end": "648120"
  },
  {
    "text": "children request uh since the scheduling of an application on a user program is",
    "start": "648120",
    "end": "655160"
  },
  {
    "text": "consistent we focus on uh capturing the user Fred Creation in the kernel to",
    "start": "655160",
    "end": "662440"
  },
  {
    "text": "understand the Fred execution and their parent child relationships uh in uh as our observed",
    "start": "662440",
    "end": "670639"
  },
  {
    "text": "the application handle requests in mainly two ways single Fred applications",
    "start": "670639",
    "end": "677200"
  },
  {
    "text": "serve requests in single fret sending uh the request to the Upstream service and",
    "start": "677200",
    "end": "684240"
  },
  {
    "text": "waiting for the Upstream responses within the same threet",
    "start": "684240",
    "end": "689440"
  },
  {
    "text": "multif threed application serve or request use multiple collaborating threets or typically in a simple",
    "start": "689440",
    "end": "697560"
  },
  {
    "text": "scenario the application creates new frats and schedules Idol ones to request",
    "start": "697560",
    "end": "703720"
  },
  {
    "text": "the Upstream service multi Fred applications are",
    "start": "703720",
    "end": "709560"
  },
  {
    "text": "often implemented using frat pools or Co routines the application creates a task",
    "start": "709560",
    "end": "716639"
  },
  {
    "text": "or co- routines to request the ab services or perform other operations",
    "start": "716639",
    "end": "723360"
  },
  {
    "text": "like reading files these ts are pressed into a que waiting for an idol threat in",
    "start": "723360",
    "end": "730560"
  },
  {
    "text": "the pool to execute them once a threat complete is t uh it is returned into the",
    "start": "730560",
    "end": "738720"
  },
  {
    "text": "fra pool and remains Idol until it is assigned a new",
    "start": "738720",
    "end": "744360"
  },
  {
    "text": "task based on the application execution models are here discuss how our system",
    "start": "744360",
    "end": "751279"
  },
  {
    "text": "uh propagates the trace contacts inside the service for single Fred applications or",
    "start": "751279",
    "end": "758959"
  },
  {
    "text": "we use the unique frat ID for each frat to poate trace contest when a request",
    "start": "758959",
    "end": "765680"
  },
  {
    "text": "from the downstream is received the trace contact is stored with the serving",
    "start": "765680",
    "end": "771320"
  },
  {
    "text": "fret ID as the key when sending a request to the Upstream service this",
    "start": "771320",
    "end": "777199"
  },
  {
    "text": "contest is then retried as the parents uh parent contest uh with the same F ID",
    "start": "777199",
    "end": "784560"
  },
  {
    "text": "and then the child contest will be generated and injected into the sending",
    "start": "784560",
    "end": "790639"
  },
  {
    "text": "request to the Upstream service in a simple multi Fred application uh when a",
    "start": "790639",
    "end": "798040"
  },
  {
    "text": "Fred fors to uh create a new fret to request the Upstream service our system",
    "start": "798040",
    "end": "805279"
  },
  {
    "text": "monitors the fation to capture the power child relationships of",
    "start": "805279",
    "end": "811560"
  },
  {
    "text": "frats when the child fret sends a message to the Upstream services our",
    "start": "811560",
    "end": "818160"
  },
  {
    "text": "system identifies the parent uh parent threet and then use it to retrive the",
    "start": "818160",
    "end": "824480"
  },
  {
    "text": "parent Trace contest and generate the child contest",
    "start": "824480",
    "end": "829920"
  },
  {
    "text": "accordingly in more compressed scenario a multi threed application often use uh",
    "start": "829920",
    "end": "836440"
  },
  {
    "text": "frad pools or Co routines to enhance the performance by minimizing the O uh the",
    "start": "836440",
    "end": "843079"
  },
  {
    "text": "overhead of frequently fed uh creation and destruction uh the figure on the right",
    "start": "843079",
    "end": "850399"
  },
  {
    "text": "illustrates how our system poates the trace contact in fret pool",
    "start": "850399",
    "end": "856480"
  },
  {
    "text": "application since multiple test can run on the same threet or using the Frat",
    "start": "856480",
    "end": "862839"
  },
  {
    "text": "idid for uh Trace contest propagation is less effective compared to the TX TK ID",
    "start": "862839",
    "end": "870880"
  },
  {
    "text": "by attaching our uh EF program on the task creation our system can obtain the",
    "start": "870880",
    "end": "878680"
  },
  {
    "text": "parent child relationship of task the task scheduling and execution on frats",
    "start": "878680",
    "end": "886079"
  },
  {
    "text": "is also monitored to capture the scheduling information when or when a frat makes uh",
    "start": "886079",
    "end": "895120"
  },
  {
    "text": "Upstream to the Upstream Service uh the system carries the parent contest using",
    "start": "895120",
    "end": "902959"
  },
  {
    "text": "the warning task ID and the parent task ID and then generates and ingest the",
    "start": "902959",
    "end": "910600"
  },
  {
    "text": "child contest into the outgoing message the table below need our",
    "start": "910600",
    "end": "916920"
  },
  {
    "text": "important ebpf programs uh which are used to capture the useful",
    "start": "916920",
    "end": "922920"
  },
  {
    "text": "information and here we shown our hooks on uh goang a net HTTP Library as an",
    "start": "922920",
    "end": "933440"
  },
  {
    "text": "example uh here is an example to show our uh the deployment of our system and",
    "start": "933560",
    "end": "940720"
  },
  {
    "text": "the performance test of our system uh we deployed our system to check and ENT and",
    "start": "940720",
    "end": "947720"
  },
  {
    "text": "request in the booking for application provided by the is and Export our",
    "start": "947720",
    "end": "955040"
  },
  {
    "text": "collected tra and spans to the Alibaba cloud manage service for open Telemetry",
    "start": "955040",
    "end": "961920"
  },
  {
    "text": "to test the performance of our system the bottle figer shows a trace tree with",
    "start": "961920",
    "end": "969639"
  },
  {
    "text": "the span generated by our system for the Binger application when serving a user request",
    "start": "969639",
    "end": "978519"
  },
  {
    "text": "the product page service calls the detail and the review service resulting",
    "start": "978519",
    "end": "984600"
  },
  {
    "text": "in five span this demonstrate that our system can accurately capture the",
    "start": "984600",
    "end": "991639"
  },
  {
    "text": "request cality and generate a span for an entr",
    "start": "991639",
    "end": "998199"
  },
  {
    "text": "request or to assess the overhead of our system in tracing or request for the",
    "start": "998360",
    "end": "1005199"
  },
  {
    "text": "biner application we set up a kubernetes cluster with five physical machines the",
    "start": "1005199",
    "end": "1012600"
  },
  {
    "text": "machines ons on a center a based operating system and have lus internal",
    "start": "1012600",
    "end": "1019240"
  },
  {
    "text": "version at 5.10 only 16 GB memory the",
    "start": "1019240",
    "end": "1024839"
  },
  {
    "text": "worklow are generated with 600 concurrent users the experiments run uh",
    "start": "1024839",
    "end": "1032038"
  },
  {
    "text": "for 3 minutes and are repeated three times on five physical",
    "start": "1032039",
    "end": "1038480"
  },
  {
    "text": "machines the average result are Illustrated in this table for the service performance our",
    "start": "1038480",
    "end": "1046480"
  },
  {
    "text": "system increases the request latency by about 0.5% compared to the normal and reduces",
    "start": "1046480",
    "end": "1054480"
  },
  {
    "text": "the QPS of the service by about 0.4% the additional latency comes from",
    "start": "1054480",
    "end": "1062440"
  },
  {
    "text": "the execution of our customized ebpf programs for intercepting and passing",
    "start": "1062440",
    "end": "1069760"
  },
  {
    "text": "the sending and receiving message in their nness kernel regarding the resource",
    "start": "1069760",
    "end": "1076480"
  },
  {
    "text": "consumption our system increased the CPU usage by about",
    "start": "1076480",
    "end": "1082080"
  },
  {
    "text": "4.5% to execute our ebpf program in the kernel about 2% relative to the",
    "start": "1082080",
    "end": "1090039"
  },
  {
    "text": "normal our system also needs about uh 747 MB addition of the memory to",
    "start": "1090039",
    "end": "1099320"
  },
  {
    "text": "temporarily store part of the message the generated Trace contact and other",
    "start": "1099320",
    "end": "1106880"
  },
  {
    "text": "information this conclude our solution for implementing an inernal EF based",
    "start": "1106880",
    "end": "1114159"
  },
  {
    "text": "distributed tracing system to reduce the instrumentation of open telemetric uh",
    "start": "1114159",
    "end": "1121080"
  },
  {
    "text": "now Kai will share how to obtain the fine grain",
    "start": "1121080",
    "end": "1127120"
  },
  {
    "text": "traces um okay uh thank you thank you and uh for that insightful presentation",
    "start": "1136120",
    "end": "1144440"
  },
  {
    "text": "um building on what we have discussed uh we have used ebpf to implement unified",
    "start": "1144440",
    "end": "1151559"
  },
  {
    "text": "request tracing um with this approach uh we can observe application performance",
    "start": "1151559",
    "end": "1159039"
  },
  {
    "text": "and uh the um request flows through zero instrumentation and because cbpf",
    "start": "1159039",
    "end": "1166919"
  },
  {
    "text": "execution efficiency is very close to um machine code uh this method incurs um",
    "start": "1166919",
    "end": "1173520"
  },
  {
    "text": "minimal additional overhead however we still face um",
    "start": "1173520",
    "end": "1179000"
  },
  {
    "text": "challenges in understanding kernel level anomalies um when service encounters",
    "start": "1179000",
    "end": "1186039"
  },
  {
    "text": "issues and we can find bugs in the um in the code uh it becomes crucial to",
    "start": "1186039",
    "end": "1192240"
  },
  {
    "text": "understand what's happening at the kernal level um maybe I want to know that are there any errors occurring in",
    "start": "1192240",
    "end": "1199880"
  },
  {
    "text": "the kernel and um which threats are involved and uh is there a blockage in",
    "start": "1199880",
    "end": "1206840"
  },
  {
    "text": "the network okay well to uh address this unknown we have explored whether um we",
    "start": "1206840",
    "end": "1214440"
  },
  {
    "text": "could collect critical kernel functions uh and include them as spans in our",
    "start": "1214440",
    "end": "1221960"
  },
  {
    "text": "traces well this idea led us to um three key tasks and first we um we need to uh",
    "start": "1222440",
    "end": "1230559"
  },
  {
    "text": "collect uh Telemetry data about kernel functions and uh um after that we have",
    "start": "1230559",
    "end": "1237840"
  },
  {
    "text": "to um Implement context propagation between kernal functions and then we",
    "start": "1237840",
    "end": "1244880"
  },
  {
    "text": "should um integrate kernel level and request level uh Telemetry data to get",
    "start": "1244880",
    "end": "1250400"
  },
  {
    "text": "to gain further insights for our services okay let's discuss the um data",
    "start": "1250400",
    "end": "1258360"
  },
  {
    "text": "colle action in kernel space we need to um gather roundtime data for kernel",
    "start": "1258360",
    "end": "1264880"
  },
  {
    "text": "functions um it's similar to um data collection in user",
    "start": "1264880",
    "end": "1270559"
  },
  {
    "text": "space uh well we know that ebpf allows us to uh attach custom code to K probe",
    "start": "1270559",
    "end": "1277520"
  },
  {
    "text": "and k r probe which will correspond to the um entry and the exit of Kernel",
    "start": "1277520",
    "end": "1284279"
  },
  {
    "text": "function so as shown in the diagram we record the um temp step and arguments",
    "start": "1284279",
    "end": "1291039"
  },
  {
    "text": "when entering a konal function and we record the return value and the um",
    "start": "1291039",
    "end": "1297799"
  },
  {
    "text": "duration when exceeding okay next we focus on the um",
    "start": "1297799",
    "end": "1305120"
  },
  {
    "text": "context propagation between kernel functions uh as we all know that there are two basic thre models to consider",
    "start": "1305120",
    "end": "1313240"
  },
  {
    "text": "that is um synchronous and asynchronous for synchronous thre models the there",
    "start": "1313240",
    "end": "1318760"
  },
  {
    "text": "are uh sequential call and the um nested call patterns now let's consider that there",
    "start": "1318760",
    "end": "1325400"
  },
  {
    "text": "is a there is a thread with a context that has a has a span named um parent",
    "start": "1325400",
    "end": "1333360"
  },
  {
    "text": "span for sequential calls which means that uh kernel function two is called",
    "start": "1333360",
    "end": "1340080"
  },
  {
    "text": "after kernel function one we handle it like this um when the CPU enters um kernel",
    "start": "1340080",
    "end": "1348039"
  },
  {
    "text": "Function One one we create a we create a new span called span one based on the",
    "start": "1348039",
    "end": "1354360"
  },
  {
    "text": "current stress context and we record it so at um so at this point uh the stress",
    "start": "1354360",
    "end": "1363039"
  },
  {
    "text": "context should span one instead of the um instead of the parent span so when",
    "start": "1363039",
    "end": "1369279"
  },
  {
    "text": "the CPU access kernal Function One span one is removed from the context and then",
    "start": "1369279",
    "end": "1376240"
  },
  {
    "text": "the context returns to the um parent span and the same process applies to uh",
    "start": "1376240",
    "end": "1384080"
  },
  {
    "text": "kernel function 2 therefore kernel function one and kernel function two are",
    "start": "1384080",
    "end": "1389919"
  },
  {
    "text": "at the same level in the trace both under the parent",
    "start": "1389919",
    "end": "1396200"
  },
  {
    "text": "span well in the trace of in the case of nested C which means kernel function 4",
    "start": "1396360",
    "end": "1403320"
  },
  {
    "text": "is called is called during kernel function three",
    "start": "1403320",
    "end": "1408799"
  },
  {
    "text": "so when CP enters curent function 3 we create um span 3 based on the current",
    "start": "1408799",
    "end": "1414760"
  },
  {
    "text": "threat context and then kernel function four is called it's just unlike um sequential",
    "start": "1414760",
    "end": "1423080"
  },
  {
    "text": "cuse the CPU doesn't further return to the uh parent span instead it executes",
    "start": "1423080",
    "end": "1429559"
  },
  {
    "text": "kernel function for and uh and create span four based on span",
    "start": "1429559",
    "end": "1436039"
  },
  {
    "text": "three th in the trace you can see that um kernel function 4 is a child of",
    "start": "1436039",
    "end": "1443200"
  },
  {
    "text": "Kernel function 3 okay for asynchronous threat model uh",
    "start": "1443200",
    "end": "1452320"
  },
  {
    "text": "as we know that in in the Linux kernel there are many kernel threats and these",
    "start": "1452320",
    "end": "1458039"
  },
  {
    "text": "threats may not belong to um any application uh processes so tracking",
    "start": "1458039",
    "end": "1464840"
  },
  {
    "text": "their interactions is not easy however we can use um the specific",
    "start": "1464840",
    "end": "1470760"
  },
  {
    "text": "features of um different Linux subsystems to find",
    "start": "1470760",
    "end": "1475799"
  },
  {
    "text": "solutions for instance in the um in the network subsystem the SKB is a special",
    "start": "1475799",
    "end": "1483240"
  },
  {
    "text": "structure that carries Network package so we can use SKB to carry",
    "start": "1483240",
    "end": "1490240"
  },
  {
    "text": "context information as well so when uh when the kernal function",
    "start": "1490240",
    "end": "1495799"
  },
  {
    "text": "five processes a packet we create span five and bend it to the",
    "start": "1495799",
    "end": "1502799"
  },
  {
    "text": "SKB and when another thread runs uh K six K function six it can refer to the",
    "start": "1502799",
    "end": "1509640"
  },
  {
    "text": "SKB and to find uh that span five is active and we create span six based on",
    "start": "1509640",
    "end": "1518240"
  },
  {
    "text": "span five so the kernel function six is a",
    "start": "1518240",
    "end": "1523279"
  },
  {
    "text": "subspan of span five in the trace",
    "start": "1523279",
    "end": "1528840"
  },
  {
    "text": "well with kernel level tracing in place now we need to um integrate this with uh",
    "start": "1529760",
    "end": "1536279"
  },
  {
    "text": "request level tracing uh we know that interactions",
    "start": "1536279",
    "end": "1541520"
  },
  {
    "text": "between user space and Kel space are managed through uh system calls and S we",
    "start": "1541520",
    "end": "1548520"
  },
  {
    "text": "can use um system calls as a bridge between them as Illustrated in the um diagram we",
    "start": "1548520",
    "end": "1556919"
  },
  {
    "text": "first collect data and propagate context across various Linux",
    "start": "1556919",
    "end": "1563200"
  },
  {
    "text": "subsystems and we will take uh we will take the um the network subsystem as an",
    "start": "1563200",
    "end": "1570480"
  },
  {
    "text": "example uh when performing context propagation uh we need to update both",
    "start": "1570480",
    "end": "1576720"
  },
  {
    "text": "the span contacts in SKB and the thread and we need to um inject it into the",
    "start": "1576720",
    "end": "1585440"
  },
  {
    "text": "SKB so when when I uh when a process retrieves kernal data structures through",
    "start": "1585440",
    "end": "1592880"
  },
  {
    "text": "um this calls it first obtains the the current span from the threat context so",
    "start": "1592880",
    "end": "1600520"
  },
  {
    "text": "if available we use the um current threat context and if there is no",
    "start": "1600520",
    "end": "1606399"
  },
  {
    "text": "context here uh such as when we retrieving Network streams VI the read",
    "start": "1606399",
    "end": "1613080"
  },
  {
    "text": "then we need to um PA the arguments and extract the context from",
    "start": "1613080",
    "end": "1620440"
  },
  {
    "text": "it well the subsequence pro processing is request tracing as we previously",
    "start": "1620440",
    "end": "1628320"
  },
  {
    "text": "described okay finally let's look at the result compared to um request Tracing",
    "start": "1630600",
    "end": "1637039"
  },
  {
    "text": "Our method allows us to see additional kernel level Behavior which including",
    "start": "1637039",
    "end": "1643799"
  },
  {
    "text": "Network package processing and the um file operations via system",
    "start": "1643799",
    "end": "1650399"
  },
  {
    "text": "calls this addresses the um observability challenges in kuber natives we mentioned before um",
    "start": "1650399",
    "end": "1657640"
  },
  {
    "text": "application observability and network observability and um security",
    "start": "1657640",
    "end": "1665039"
  },
  {
    "text": "observability well however there are some um limitations due to the um ebpf",
    "start": "1668399",
    "end": "1675840"
  },
  {
    "text": "constraints first of all we rely on some uh specific BPF helper functions so we",
    "start": "1675840",
    "end": "1683519"
  },
  {
    "text": "require the runtime current version is at least uh",
    "start": "1683519",
    "end": "1689399"
  },
  {
    "text": "420 and currently we only support the um",
    "start": "1689519",
    "end": "1695120"
  },
  {
    "text": "uh Web Consortium standard for context propagation and uh other standards are",
    "start": "1695120",
    "end": "1702200"
  },
  {
    "text": "not supported yet and because they need to um pass",
    "start": "1702200",
    "end": "1707760"
  },
  {
    "text": "Network streams in kernel so we cannot handle encrypt protocols like um TLS um",
    "start": "1707760",
    "end": "1718440"
  },
  {
    "text": "https and for uh streaming protocols such as um grpc uh each frame is",
    "start": "1718440",
    "end": "1726200"
  },
  {
    "text": "stateful so it's difficult to par them in the kernel uh so we currently cannot",
    "start": "1726200",
    "end": "1732799"
  },
  {
    "text": "uh support this either",
    "start": "1732799",
    "end": "1736840"
  },
  {
    "text": "well for future works we have five goals and first we are going to um support",
    "start": "1738159",
    "end": "1744080"
  },
  {
    "text": "more application Level protocols such as um meso and",
    "start": "1744080",
    "end": "1750880"
  },
  {
    "text": "Kfar and we plan to um support network interface tracing for a deeper Network",
    "start": "1750880",
    "end": "1759679"
  },
  {
    "text": "insight and we are going to um enable profiling tools to um resolve",
    "start": "1759679",
    "end": "1765120"
  },
  {
    "text": "performance issues and next next we will integrate this system into um ala Cloud",
    "start": "1765120",
    "end": "1772039"
  },
  {
    "text": "application monitoring ebpf Edition and uh we will provide uh out of the box",
    "start": "1772039",
    "end": "1780120"
  },
  {
    "text": "functionality uh and the last we plan to um open source or code as soon as",
    "start": "1780120",
    "end": "1788279"
  },
  {
    "text": "possible okay and that concludes our presentation for today and thank you",
    "start": "1788320",
    "end": "1793799"
  },
  {
    "text": "thank you all for attention and we are happy to take any questions you might",
    "start": "1793799",
    "end": "1800039"
  },
  {
    "text": "have oh yeah [Music]",
    "start": "1805000",
    "end": "1812599"
  },
  {
    "text": "M uh you are talking about um uh M right and Co routine so uh is your method only",
    "start": "1816960",
    "end": "1824480"
  },
  {
    "text": "works for C++ applications uh",
    "start": "1824480",
    "end": "1830679"
  },
  {
    "text": "actually uh it does work with um Golan as well Golan yeah because we uh",
    "start": "1830679",
    "end": "1838159"
  },
  {
    "text": "implement the um context propagation between uh Strat and we in gol uh in",
    "start": "1838159",
    "end": "1846039"
  },
  {
    "text": "Golam we uh we hooked the goutin create and and it's um recycle so we know the",
    "start": "1846039",
    "end": "1854120"
  },
  {
    "text": "gtin ID with the uh thread ID so we can uh propagates the",
    "start": "1854120",
    "end": "1859960"
  },
  {
    "text": "context yeah okay uh you I you mentioned Co",
    "start": "1859960",
    "end": "1865799"
  },
  {
    "text": "routine instead of go routine so I think I I misunderstand you are using the",
    "start": "1865799",
    "end": "1871799"
  },
  {
    "text": "C++ application so oh okay thank you",
    "start": "1871799",
    "end": "1878320"
  },
  {
    "text": "thank",
    "start": "1878320",
    "end": "1880518"
  },
  {
    "text": "you I have a question is it possible to use this uh BPF base tracing solution",
    "start": "1883720",
    "end": "1890600"
  },
  {
    "text": "with open Telemetry for example I use open Telemetry to tracing the function",
    "start": "1890600",
    "end": "1898000"
  },
  {
    "text": "in locations so if we can integrate with this ebpf",
    "start": "1898000",
    "end": "1905200"
  },
  {
    "text": "TR sorry I can't get you uh for example uh this uh EF tracing solution we can",
    "start": "1905200",
    "end": "1911720"
  },
  {
    "text": "only know kernel tracing or network tracing but I have no idea what's this",
    "start": "1911720",
    "end": "1917559"
  },
  {
    "text": "tracing in coming from for example a function invoke to B function so during",
    "start": "1917559",
    "end": "1923279"
  },
  {
    "text": "this question request I if we can inject this ebpf tracing yeah yeah I can get a",
    "start": "1923279",
    "end": "1931039"
  },
  {
    "text": "more understanding of the tracing right uh what's I mean you you mean that uh in",
    "start": "1931039",
    "end": "1939399"
  },
  {
    "text": "in process or inter process to propagate the",
    "start": "1939399",
    "end": "1945799"
  },
  {
    "text": "context uh uh",
    "start": "1945799",
    "end": "1949840"
  },
  {
    "text": "okay",
    "start": "1951960",
    "end": "1954960"
  },
  {
    "text": "context for",
    "start": "2007279",
    "end": "2010760"
  },
  {
    "text": "thank  uh thank you for thank you presentation I'm interested where can I",
    "start": "2049599",
    "end": "2056720"
  },
  {
    "text": "get uh information about future releases of your project",
    "start": "2056720",
    "end": "2062480"
  },
  {
    "text": "uh uh and I think you mean that open",
    "start": "2062480",
    "end": "2067839"
  },
  {
    "text": "Source yeah not just generally okay",
    "start": "2067839",
    "end": "2075040"
  },
  {
    "text": "um I think that we are not going to open source for uh uh as a new project",
    "start": "2075040",
    "end": "2083599"
  },
  {
    "text": "because ala cloud has many um open source projects and we have",
    "start": "2083599",
    "end": "2089599"
  },
  {
    "text": "collaborations with some of them uh so maybe we plan to um integrate it in into",
    "start": "2089599",
    "end": "2095960"
  },
  {
    "text": "an exciting project such as um kuers scope or aloc",
    "start": "2095960",
    "end": "2103119"
  },
  {
    "text": "tail yeah uh in your software looks like grafana baa uh you can also check this",
    "start": "2103119",
    "end": "2111000"
  },
  {
    "text": "out really cool project it also does ebf with open Telemetry but uh thank you oh",
    "start": "2111000",
    "end": "2120119"
  },
  {
    "text": "okay",
    "start": "2120119",
    "end": "2123119"
  },
  {
    "text": "en",
    "start": "2150480",
    "end": "2153480"
  },
  {
    "text": "propagate",
    "start": "2175440",
    "end": "2178440"
  },
  {
    "text": "performance for",
    "start": "2186560",
    "end": "2190560"
  },
  {
    "text": "distribution like",
    "start": "2229839",
    "end": "2233040"
  },
  {
    "text": "tracing reest",
    "start": "2237040",
    "end": "2241040"
  },
  {
    "text": "single threat threat",
    "start": "2264760",
    "end": "2271160"
  },
  {
    "text": "propagate re",
    "start": "2290160",
    "end": "2293480"
  },
  {
    "text": "message okay",
    "start": "2297680",
    "end": "2301680"
  },
  {
    "text": "byebye [Applause]",
    "start": "2316720",
    "end": "2321429"
  }
]