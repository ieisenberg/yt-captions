[
  {
    "text": "hi everyone um so today we're going to be talking about Cloudy with a Chance of chaos verifying the resiliency of cloud native",
    "start": "4980",
    "end": "11340"
  },
  {
    "text": "applications so first a little about myself I'm Bella Weisman I work at Goldman Sachs I've",
    "start": "11340",
    "end": "18240"
  },
  {
    "text": "been I've taught for 10 years of experience in financial services technology my mother was also a software",
    "start": "18240",
    "end": "23520"
  },
  {
    "text": "engineer so that makes me a second generation woman software engineer",
    "start": "23520",
    "end": "28579"
  },
  {
    "text": "um so I'll just go through our agenda we'll start with what is chaos engineering then we'll go over chaos",
    "start": "30000",
    "end": "35399"
  },
  {
    "text": "Readiness we'll go through a case study of a chaos experiment we actually did on",
    "start": "35399",
    "end": "40500"
  },
  {
    "text": "a real Goldman Sachs system and then we'll go through some takeaways",
    "start": "40500",
    "end": "45739"
  },
  {
    "text": "foreign you'll find official definitions online this is my definition",
    "start": "46379",
    "end": "53280"
  },
  {
    "text": "find your next production incident before it finds you right so that means",
    "start": "53280",
    "end": "59399"
  },
  {
    "text": "kind of deliberately doing things that cause production incidents okay so that you can determine what the impact will",
    "start": "59399",
    "end": "66540"
  },
  {
    "text": "be right it's going to be an environment um but essentially you know doing",
    "start": "66540",
    "end": "71939"
  },
  {
    "text": "something like doing a bad Trigger or something like cause a production incident and then you know hopefully the",
    "start": "71939",
    "end": "78060"
  },
  {
    "text": "impact won't be a prod incident but if it is you know you're able to actually see what that impact is so the classical",
    "start": "78060",
    "end": "83759"
  },
  {
    "text": "example which is how this whole thing started is bringing down a machine by bringing down the machine that one of",
    "start": "83759",
    "end": "89159"
  },
  {
    "text": "the machines that you're that your application is running on",
    "start": "89159",
    "end": "94219"
  },
  {
    "text": "so I look at there as being five parts to running a chaos test right first of all defining your success criteria",
    "start": "94259",
    "end": "99780"
  },
  {
    "text": "understanding what you're trying to achieve right two being defining and measuring the steady state of your system",
    "start": "99780",
    "end": "106979"
  },
  {
    "text": "three injecting the failure so that's the actual chaos test itself for observing the outcome seeing what",
    "start": "106979",
    "end": "113880"
  },
  {
    "text": "happens and then five if required restoring your system back to steady state",
    "start": "113880",
    "end": "120540"
  },
  {
    "text": "yeah so what does defining your success criteria mean in this context right it's",
    "start": "120540",
    "end": "126719"
  },
  {
    "text": "what does success mean for this test are you expecting no impact to availability everything should just continue to run",
    "start": "126719",
    "end": "133379"
  },
  {
    "text": "as expected a minimal of impact to availability in which case the question",
    "start": "133379",
    "end": "138540"
  },
  {
    "text": "is how much impact is acceptable right three a self-healing system right",
    "start": "138540",
    "end": "144000"
  },
  {
    "text": "there will be impact but you expect the system to be able to recover on its own without outside intervention in which",
    "start": "144000",
    "end": "150599"
  },
  {
    "text": "case the question is after how long and then four perhaps you're looking for you know there will be impact maybe even",
    "start": "150599",
    "end": "157020"
  },
  {
    "text": "annual intervention required and you want an alert to be triggered you want your support person or on call to be",
    "start": "157020",
    "end": "162420"
  },
  {
    "text": "paged right and then five you also might want to check that your dashboards are actually reflecting the system State",
    "start": "162420",
    "end": "169200"
  },
  {
    "text": "showing that you have an issue that might be another thing you want to determine from the chaos test",
    "start": "169200",
    "end": "175519"
  },
  {
    "text": "so let's go into defining and measuring your steady state right so when we talk about study State it's like how your",
    "start": "176879",
    "end": "183180"
  },
  {
    "text": "system is supposed to behave if everything is going well and typically when we talk about observability and",
    "start": "183180",
    "end": "189000"
  },
  {
    "text": "resilience we talk about an SLO a service level objective and that's usually measured actually over a longer",
    "start": "189000",
    "end": "194940"
  },
  {
    "text": "period of time so something like a 30 days you might say we want 99.9 percent of requests to return a successful",
    "start": "194940",
    "end": "201420"
  },
  {
    "text": "response over a 30-day or 90 day period and that's extremely important because",
    "start": "201420",
    "end": "206459"
  },
  {
    "text": "you don't want to be impacted by little blips you know for five minutes something happened for three minutes",
    "start": "206459",
    "end": "211739"
  },
  {
    "text": "something happened you want to be able to maintain that SLO consistently over the long term",
    "start": "211739",
    "end": "216900"
  },
  {
    "text": "but for chaos tasks that actually doesn't work very well right because in your chaos test for a 30-day period at",
    "start": "216900",
    "end": "223500"
  },
  {
    "text": "least I you know I hope that you want to get results much quicker than that you might in a one minute interval 30",
    "start": "223500",
    "end": "228599"
  },
  {
    "text": "seconds do you want to get your answers more quickly right so what I find is that more helpful than an SLO when",
    "start": "228599",
    "end": "234780"
  },
  {
    "text": "determining the success or failure of your chaos task is actually something like your alerting threshold right when",
    "start": "234780",
    "end": "241319"
  },
  {
    "text": "you would actually reach out and Page somebody to take a look at something and if you breach your learning threshold",
    "start": "241319",
    "end": "247260"
  },
  {
    "text": "during the chaos test right that would mean that something bad did happen and if you don't reach the learning",
    "start": "247260",
    "end": "252360"
  },
  {
    "text": "threshold that means that everything is kind of working as it's as expected but obviously you might also discover that",
    "start": "252360",
    "end": "258780"
  },
  {
    "text": "your alerting threshold is not what it's meant to be which is also you know another great outcome of actually doing an experiment itself",
    "start": "258780",
    "end": "266340"
  },
  {
    "text": "um then there's measuring availability so always try to do it from your customers Viewpoint that's really important and then you know while this",
    "start": "266340",
    "end": "273180"
  },
  {
    "text": "may be complex and you might not have all the answers especially if it's a new system it's okay to run a chaos",
    "start": "273180",
    "end": "279300"
  },
  {
    "text": "experiment in non-prod before you have all the answers because it will help you learn about your system help you",
    "start": "279300",
    "end": "284940"
  },
  {
    "text": "discover some of these things know what the right questions are to ask and it can actually be a really useful exercise",
    "start": "284940",
    "end": "291800"
  },
  {
    "text": "so next we'll talk about some best practices when injecting failure so first of all you start off by",
    "start": "292080",
    "end": "297240"
  },
  {
    "text": "identifying points of failure you look at your architecture diagram your system figure out what could fail right and",
    "start": "297240",
    "end": "303960"
  },
  {
    "text": "then if you do a good job of that you'll probably end up with quite a long list of things that could fail so then you",
    "start": "303960",
    "end": "309540"
  },
  {
    "text": "need to prioritize because you're not going to start with testing everything so when you're prioritizing you want to prioritize based on impact right what's",
    "start": "309540",
    "end": "316199"
  },
  {
    "text": "the worst thing that could happen if something goes wrong here as well as the probability of it happening and when you",
    "start": "316199",
    "end": "322139"
  },
  {
    "text": "talk about probability you know there's you want to avoid both sides of the extreme so something happens every 30",
    "start": "322139",
    "end": "327660"
  },
  {
    "text": "minutes there's not really much use in doing a chaos test on it because you might not even call that chaos right it's happening already all the time on",
    "start": "327660",
    "end": "334620"
  },
  {
    "text": "the other hand if it's likely to happen maybe once in 2000 years I mean I'm not saying it's not valuable to run that but",
    "start": "334620",
    "end": "340620"
  },
  {
    "text": "you'll probably find something with a higher Roi somewhere in the middle like something that happens every six months something that you know will happen in",
    "start": "340620",
    "end": "347280"
  },
  {
    "text": "you know 30 days from now like that's usually your sweet spot in terms of priority and then just current confidence level like how much do you",
    "start": "347280",
    "end": "354180"
  },
  {
    "text": "know about what will happen if this thing goes wrong um third thing I would say start simple",
    "start": "354180",
    "end": "360060"
  },
  {
    "text": "even manual like there are great tools out there um you know for chaos testing and",
    "start": "360060",
    "end": "365520"
  },
  {
    "text": "definitely feel free to leverage them but when you're just starting out like do something really small and easy and",
    "start": "365520",
    "end": "370860"
  },
  {
    "text": "simple because you'll learn a lot from that as well and we'll get into that soon also and always like start in",
    "start": "370860",
    "end": "376500"
  },
  {
    "text": "non-prot yes running KF test and production is cool and fun and you should and it's actually a best practice but when you're starting the first time",
    "start": "376500",
    "end": "383220"
  },
  {
    "text": "you're running the experiment just like you don't release your features directly to prod at least I hope not whatever",
    "start": "383220",
    "end": "388500"
  },
  {
    "text": "like pre-production clearing and testing you're doing for your futures you want to do the same thing for your chaos",
    "start": "388500",
    "end": "393960"
  },
  {
    "text": "tests as well right because the impact could be potentially catastrophic if you start right away in prod",
    "start": "393960",
    "end": "399840"
  },
  {
    "text": "and then observing outcomes so you don't want to rely exclusively on whatever you know system dashboards you already have",
    "start": "399840",
    "end": "406199"
  },
  {
    "text": "you want to consider those dashboards as part of your system under task part of what you're trying to verify with your",
    "start": "406199",
    "end": "411900"
  },
  {
    "text": "chaos test so you want to have a different way of also verifying what how your system is behaving and then just",
    "start": "411900",
    "end": "418080"
  },
  {
    "text": "like in a real incident you would be double checking everything like are you sure this is up you know make sure the website is up look is this working do",
    "start": "418080",
    "end": "424740"
  },
  {
    "text": "the same thing during a chaos test as well and again measure from your end user's perspective so if you have a web",
    "start": "424740",
    "end": "429840"
  },
  {
    "text": "application actually you know fire up a web browser and see how it's working right take like as much of a step back",
    "start": "429840",
    "end": "436199"
  },
  {
    "text": "as you can finally you need to restore the steady state might not be required at all if",
    "start": "436199",
    "end": "442440"
  },
  {
    "text": "everything went well and your system is self-healing but if your chaos has expected outcome you may need to do that",
    "start": "442440",
    "end": "448139"
  },
  {
    "text": "and since you started a non-prod and you need to panic but you do need to get things back up and running",
    "start": "448139",
    "end": "453419"
  },
  {
    "text": "um or two you know right away the system wasn't self-healing there would be some run book you would need to follow but you've documented that and now is your",
    "start": "453419",
    "end": "460319"
  },
  {
    "text": "chance to follow that run book ensure that's well written and well understood and able to be executed",
    "start": "460319",
    "end": "467819"
  },
  {
    "text": "next we'll talk about chaos Readiness so first of all you need a chaos ready environment again because you're not starting in prod you do need a prob-like",
    "start": "467819",
    "end": "474900"
  },
  {
    "text": "environment in order to start off with your chaos testing you want to be as close to prod as possible Right the further away it is from prod the more",
    "start": "474900",
    "end": "481319"
  },
  {
    "text": "different it is the more risk you're carrying that your chaos test is not actually doing what you think it's doing",
    "start": "481319",
    "end": "487560"
  },
  {
    "text": "um and then Rod safety first because often if your",
    "start": "487560",
    "end": "493380"
  },
  {
    "text": "system is very complex and it's hard to set up a non-prot environment if it's let's say a very data heavy system you",
    "start": "493380",
    "end": "499080"
  },
  {
    "text": "might be actually working on a shared non-prod environment right so even though it's non-prod if you all developers are blocked for three days",
    "start": "499080",
    "end": "505620"
  },
  {
    "text": "because you ran a chaos experiment the chances of you you know being able to do more of this is not that high right so",
    "start": "505620",
    "end": "512339"
  },
  {
    "text": "be careful and non-pride as well after you test a non-profit then you can have the information to decide whether you",
    "start": "512339",
    "end": "517740"
  },
  {
    "text": "want to move to prod and do this in prod or not right you have to consider the risks of doing it in prod and then also",
    "start": "517740",
    "end": "523380"
  },
  {
    "text": "the risks of not doing an improv right so you have to you know consider that carefully",
    "start": "523380",
    "end": "529560"
  },
  {
    "text": "um next we'll talk about chaos ready teams right so first of all you need a commitment to resiliency and operational",
    "start": "529560",
    "end": "535260"
  },
  {
    "text": "excellence if for whatever reason the system that you're talking about actually has known resiliency issues",
    "start": "535260",
    "end": "541860"
  },
  {
    "text": "that no one is fixing there is no point in running a chaos experiment to discover more operational resiliency",
    "start": "541860",
    "end": "548339"
  },
  {
    "text": "issues that will just get added to the backlog and no one's going to fix right the one exception the rmit if like there",
    "start": "548339",
    "end": "555060"
  },
  {
    "text": "are resiliency issues that are coming out in prod but so far they've been small no major incidents sometimes",
    "start": "555060",
    "end": "561360"
  },
  {
    "text": "running a chaos experiment can actually help you bring proof to management that",
    "start": "561360",
    "end": "566459"
  },
  {
    "text": "yeah so far the issues have been small but if one of them would happen during this high volume day or if one of them",
    "start": "566459",
    "end": "572700"
  },
  {
    "text": "would happen and this thing would go wrong you could have this major incident and then that can help you get the",
    "start": "572700",
    "end": "577800"
  },
  {
    "text": "attention to resiliency that you're trying to get um and then as well like when it comes",
    "start": "577800",
    "end": "583980"
  },
  {
    "text": "to culture right um the team needs to be able to acknowledge Embrace and mitigate risk",
    "start": "583980",
    "end": "590700"
  },
  {
    "text": "right because when you're doing Chaos engineering you're actually discovering risk right and if people are risk like",
    "start": "590700",
    "end": "597540"
  },
  {
    "text": "not just risk-averse but like afraid of risk and they don't want to know about risk and they'd rather not know you're not going to have much success with",
    "start": "597540",
    "end": "603480"
  },
  {
    "text": "chaos engineering because you're just bringing more bad news that people would rather not know about right and then",
    "start": "603480",
    "end": "610140"
  },
  {
    "text": "finally psychological safety blameless postmortems right you know when you're doing cast tests if you're running them",
    "start": "610140",
    "end": "615959"
  },
  {
    "text": "in production there is always a possibility that something will go wrong right hopefully you've thought about it",
    "start": "615959",
    "end": "621720"
  },
  {
    "text": "you've decided that the benefits of running the chaos task outweigh the risks because the risk of not running the chaos test is also very high but",
    "start": "621720",
    "end": "628500"
  },
  {
    "text": "knowing that you know the finger won't get pointed at you that people understand that everyone's doing you",
    "start": "628500",
    "end": "633779"
  },
  {
    "text": "know what they think is right for the system and is you know doing things appropriately will help you be able to",
    "start": "633779",
    "end": "639060"
  },
  {
    "text": "do chaos tests repeatedly and you know move things forward okay great so now you have a chance",
    "start": "639060",
    "end": "644339"
  },
  {
    "text": "ready environment chaos ready team now what you need to do is convince your boss",
    "start": "644339",
    "end": "650760"
  },
  {
    "text": "so here are some things you shouldn't say it's fun I just read a really great blog post",
    "start": "650760",
    "end": "656940"
  },
  {
    "text": "about chaos engineering it's trending on my Twitter feed I just saw Bella really great talk at",
    "start": "656940",
    "end": "664079"
  },
  {
    "text": "Cloud nativecon Nevada and I want to try it out right I want to write a really cool blog post or I want to get promoted right",
    "start": "664079",
    "end": "672180"
  },
  {
    "text": "these are probably not the things that are going to convince your boss to let you do chaos engineering but there are",
    "start": "672180",
    "end": "677459"
  },
  {
    "text": "what I find like two categories of times one of those actually commercial value to doing Chaos engineering and this is a",
    "start": "677459",
    "end": "683700"
  },
  {
    "text": "great time to raise your hand and say hey let's try it the first one is before a release right",
    "start": "683700",
    "end": "688800"
  },
  {
    "text": "whether it's the first release of your system you're about you're going to go live soon or it's the release of a major",
    "start": "688800",
    "end": "694500"
  },
  {
    "text": "feature right at that point people are nervous right they're looking for confidence they're looking for a way to",
    "start": "694500",
    "end": "700800"
  },
  {
    "text": "make them comfortable that when they go live something bad won't happen that's a great time to actually figure out what",
    "start": "700800",
    "end": "706620"
  },
  {
    "text": "the points of failure are trigger those points of failure ensure that your system can be resilient to them that's one category",
    "start": "706620",
    "end": "712800"
  },
  {
    "text": "second one is after a major incident right you have all your post-mortem follow-ups but if you're actually",
    "start": "712800",
    "end": "719600"
  },
  {
    "text": "recreate the trigger that happens in production how do you know that those are the right follow-ups right how do",
    "start": "719600",
    "end": "725459"
  },
  {
    "text": "you know that those follow-ups were actually done appropriately so that's another time when actually saying a chaos task like let's actually",
    "start": "725459",
    "end": "731339"
  },
  {
    "text": "re-trigger that make that bad thing happen again and then ensure that we have an incident or at least that that",
    "start": "731339",
    "end": "737279"
  },
  {
    "text": "incident is much smaller than it was previously that's also a recommendation that I",
    "start": "737279",
    "end": "742440"
  },
  {
    "text": "often give you know post incidents so then you think is KS engineering easier is it hard and I kind of came to",
    "start": "742440",
    "end": "749760"
  },
  {
    "text": "the conclusion that it's full um so here's some reasons why chaos engineering is easy right because first",
    "start": "749760",
    "end": "754860"
  },
  {
    "text": "of all even if you do a manual chaos test and I'll discuss what that means soon you can get a lot of value with very very minimal investment also",
    "start": "754860",
    "end": "761399"
  },
  {
    "text": "there's lots of Open Source and vendor software available um basic use cases similarly like tons",
    "start": "761399",
    "end": "767220"
  },
  {
    "text": "of blog posts out there tons of talks it's easy to like you know read up on what you should do and then four if",
    "start": "767220",
    "end": "772560"
  },
  {
    "text": "you're on the cloud you know Cloud providers like because you know infrastructure is much more you know",
    "start": "772560",
    "end": "778200"
  },
  {
    "text": "democratized right like it could be actually really easy to bring something down you know with um apis and just like easy",
    "start": "778200",
    "end": "785820"
  },
  {
    "text": "tools on the other hand chaos engineering is also really hard right some of the",
    "start": "785820",
    "end": "791220"
  },
  {
    "text": "technical challenges first of all chaos tests by definition are system tests",
    "start": "791220",
    "end": "796500"
  },
  {
    "text": "right and system tests are notoriously a flaky right you have all these false positives you know things that are like",
    "start": "796500",
    "end": "803399"
  },
  {
    "text": "all these moving Parts how do you make sure everything's up and running the way it's supposed to be um so that's one challenge",
    "start": "803399",
    "end": "809700"
  },
  {
    "text": "and then you know running in a production parallel environment which could be an ongoing investment if you",
    "start": "809700",
    "end": "814740"
  },
  {
    "text": "have one already then great you'll use it but then you might be you know with other developers like kind of computing",
    "start": "814740",
    "end": "820500"
  },
  {
    "text": "for resources or you might have to invest in creating a dedicated environment for your chaos test and that can require investment",
    "start": "820500",
    "end": "826980"
  },
  {
    "text": "alternatively you can use canaries right even though that is already in prod if you have a mature Canary thing but there",
    "start": "826980",
    "end": "832800"
  },
  {
    "text": "are some like large-scale issues that can be difficult to simulate canary um second manage services on the cloud",
    "start": "832800",
    "end": "839820"
  },
  {
    "text": "so not just Cloud but actually using like the higher level of abstraction of managed Services very often they",
    "start": "839820",
    "end": "846060"
  },
  {
    "text": "abstract away the details right serverless right they're they're obviously are machines but you don't have access to them you can't manipulate",
    "start": "846060",
    "end": "852480"
  },
  {
    "text": "them and that can actually make it really hard to inject a failure and quote something to happen",
    "start": "852480",
    "end": "858959"
  },
  {
    "text": "another reason why KS engineering is hard it's a human one right so there are three virtues or programmers right",
    "start": "858959",
    "end": "864560"
  },
  {
    "text": "laziness and patience hubris right so you think about laziness everyone's",
    "start": "864560",
    "end": "871019"
  },
  {
    "text": "like okay I already have enough chaos without this all right if it ain't broke don't break it like leave me alone I",
    "start": "871019",
    "end": "876240"
  },
  {
    "text": "want to go home um and then there's impatience right I want to just code Netflix feature I this",
    "start": "876240",
    "end": "882060"
  },
  {
    "text": "is going to take some of my time and then hubris right my code won't break",
    "start": "882060",
    "end": "887279"
  },
  {
    "text": "right I already wrote code to handle this this scenario you know two years ago all right it might be true have you",
    "start": "887279",
    "end": "893459"
  },
  {
    "text": "tested it recently right you know as we all know it's always a moving Target and things change and the environment",
    "start": "893459",
    "end": "899040"
  },
  {
    "text": "changes okay so now we'll go actually into a case study so this is a simplified you know",
    "start": "899040",
    "end": "905940"
  },
  {
    "text": "slightly modified architecture of a real system in pre-prod at Goldman Sachs so if we go through you know the",
    "start": "905940",
    "end": "911940"
  },
  {
    "text": "architecture on the right hand side you have an API Gateway which is proxying and validating authenticating",
    "start": "911940",
    "end": "919339"
  },
  {
    "text": "um you have a service running an ETS Fargo right three different tasks running on different availability zones",
    "start": "919980",
    "end": "927000"
  },
  {
    "text": "we're using oppa open policy agent attacks to check entitlements and then we have an elastic surgeon since it was",
    "start": "927000",
    "end": "933060"
  },
  {
    "text": "searches across different documents and then as well there's redis which is a dependency for some types of requests",
    "start": "933060",
    "end": "939420"
  },
  {
    "text": "so when we were looking at doing cath engineering we went through this diagram figured out points of failure across all",
    "start": "939420",
    "end": "945600"
  },
  {
    "text": "the different components and then proceeded from there so some points of failure right the",
    "start": "945600",
    "end": "951420"
  },
  {
    "text": "redist for example was supposed to be a soft dependency for most requests",
    "start": "951420",
    "end": "956760"
  },
  {
    "text": "um so you know well what happens is it really is soft dependency perhaps it accidentally turned into a hard",
    "start": "956760",
    "end": "961980"
  },
  {
    "text": "dependency that would be one thing to look at right elasticsearch what if it goes down what if some of the nodes go",
    "start": "961980",
    "end": "967440"
  },
  {
    "text": "down right um Opa right the entitlement system what",
    "start": "967440",
    "end": "972600"
  },
  {
    "text": "if you know what effect gets disconnected like we know that we can't operate without entitlements but can we",
    "start": "972600",
    "end": "978959"
  },
  {
    "text": "like recover from that how quickly can we recover once it comes back up and then finally you know on the far gate",
    "start": "978959",
    "end": "984959"
  },
  {
    "text": "side our tasks are going down how are we going to be able to handle that now these are all like real points of",
    "start": "984959",
    "end": "990720"
  },
  {
    "text": "failure and things that can go wrong but again right challenges on the modern Cloud how",
    "start": "990720",
    "end": "996420"
  },
  {
    "text": "are you going to simulate these things you don't have any machines to bring down right I mean there are machines but you don't have access to them you don't",
    "start": "996420",
    "end": "1002779"
  },
  {
    "text": "know where they are who they are how how you would be able to manipulate them so how can you inject chaos",
    "start": "1002779",
    "end": "1009800"
  },
  {
    "text": "so there are three ways three things that I call chaos themes that you can use to inject chaos even when you're",
    "start": "1009800",
    "end": "1015560"
  },
  {
    "text": "running managed services in the cloud right first category is you're using cloud apis and functionality so if we",
    "start": "1015560",
    "end": "1022160"
  },
  {
    "text": "take elasticsearch as an example even if you're running on a fully managed cluster with no access to the underlying",
    "start": "1022160",
    "end": "1027199"
  },
  {
    "text": "machines right there are usually apis that let you trigger right a cluster resize right so that can actually be a",
    "start": "1027199",
    "end": "1034100"
  },
  {
    "text": "really useful chaos scene where you can trigger that cluster resize have traffic coming in and see how your",
    "start": "1034100",
    "end": "1040640"
  },
  {
    "text": "um your system reacts to those circumstances right two trigger known weaknesses right so I like to say you",
    "start": "1040640",
    "end": "1047120"
  },
  {
    "text": "look at the documentation all the things it says that are best practices and you do the opposite right so it says don't",
    "start": "1047120",
    "end": "1053120"
  },
  {
    "text": "run this you know resource intensive query make sure never to run of query against your your elastic",
    "start": "1053120",
    "end": "1059419"
  },
  {
    "text": "search instance and you go okay write up that query run it right and we're not right and see what actually happens",
    "start": "1059419",
    "end": "1065600"
  },
  {
    "text": "right you might find the entire cluster goes down how can you how can you recover from that right that can be another really useful real-life way to",
    "start": "1065600",
    "end": "1072500"
  },
  {
    "text": "enter us without access to the machines third of the law disrupting network connectivity so you have multiple",
    "start": "1072500",
    "end": "1078559"
  },
  {
    "text": "managed services that are talking to each other right you can actually is an ISP to actually you know create",
    "start": "1078559",
    "end": "1086179"
  },
  {
    "text": "network black holes so the services can't talk to each other right that can also be a pretty generic and Powerful",
    "start": "1086179",
    "end": "1091760"
  },
  {
    "text": "way to inject chaos into your system so now we'll dig into the ECS fargate",
    "start": "1091760",
    "end": "1098059"
  },
  {
    "text": "use case that was the thing we decided to start with because it's you know relatively simple",
    "start": "1098059",
    "end": "1103340"
  },
  {
    "text": "so what is AWS ECS it's elastic container service fully managed container orchestration on AWS you can",
    "start": "1103340",
    "end": "1109580"
  },
  {
    "text": "either run on ec2 instances in which case it's not fully fully managed and you have access to the underlying",
    "start": "1109580",
    "end": "1115400"
  },
  {
    "text": "machines or you can go server list with ECS fargate",
    "start": "1115400",
    "end": "1120700"
  },
  {
    "text": "so ECS firegrade is serverless container orchestration you're just going to Define your tasks the task a pod and",
    "start": "1121940",
    "end": "1127520"
  },
  {
    "text": "kubernetes and then first million C you obviously want to configure your cluster to be running across multiple",
    "start": "1127520",
    "end": "1132620"
  },
  {
    "text": "availability zones in AWS so then the question becomes what happens if a task goes down",
    "start": "1132620",
    "end": "1140740"
  },
  {
    "text": "well I mean well the good things should happen right automatically bring up a new one to replace the one that stopped",
    "start": "1140840",
    "end": "1145940"
  },
  {
    "text": "but that opens up a bunch of questions how long is that going to take what if multiple tasks stop right how is",
    "start": "1145940",
    "end": "1152960"
  },
  {
    "text": "your application going to behave in the interim and if there is like impact how long will it take for you to recover",
    "start": "1152960",
    "end": "1160640"
  },
  {
    "text": "so you can read the documentation you can or you can try it and that's what we did",
    "start": "1160640",
    "end": "1167000"
  },
  {
    "text": "so when I talk about starting simple this is what I mean right there might be amazing tools out there that you might want to use",
    "start": "1167000",
    "end": "1173120"
  },
  {
    "text": "soon or eventually to do this in an automated fashion but you when you're starting like start simple even a",
    "start": "1173120",
    "end": "1179120"
  },
  {
    "text": "non-prodite just starts simple you can actually go to the console or run a simple um API command or something on the AWS",
    "start": "1179120",
    "end": "1184880"
  },
  {
    "text": "CLI and just stop a task right and what you learn from that is actually huge and",
    "start": "1184880",
    "end": "1190220"
  },
  {
    "text": "you'll see we learned a lot just from doing that once so simple experiment valuable findings",
    "start": "1190220",
    "end": "1196220"
  },
  {
    "text": "and we found was that there was actually a 20 error rate for between 3 and 10 minutes",
    "start": "1196220",
    "end": "1201679"
  },
  {
    "text": "um the failed requests were returning 502 stat Gateway errors but on the good side the system was able to return to",
    "start": "1201679",
    "end": "1207799"
  },
  {
    "text": "steady state without any outside intervention so what happened right well obviously we",
    "start": "1207799",
    "end": "1214580"
  },
  {
    "text": "we know what happened you know we stopped an ECS task right um so one of those three tasks was down",
    "start": "1214580",
    "end": "1219860"
  },
  {
    "text": "the network load balancer though was still sending traffic to the bad task right for a few minutes until the health",
    "start": "1219860",
    "end": "1225919"
  },
  {
    "text": "check for that task finally failed and it was brought out of rotation",
    "start": "1225919",
    "end": "1231100"
  },
  {
    "text": "so how would you solve for something like that right so first of all you can increase the number of tasks right three tasks is not very much you can scale it",
    "start": "1232220",
    "end": "1239059"
  },
  {
    "text": "up to 100 and then the the risk or the impact from a single task going down is negligible right but that's a cost",
    "start": "1239059",
    "end": "1245240"
  },
  {
    "text": "versus resiliency trade-off depending on how much resilience you need you you might choose to pay for more tasks or",
    "start": "1245240",
    "end": "1251240"
  },
  {
    "text": "not two is you can tune the timeout of your load balancer so that you remove tasks that are not responding more",
    "start": "1251240",
    "end": "1256820"
  },
  {
    "text": "quickly that's also a trade-off because you might end up with churn right like you know you remove the task it really would have come up on its own things",
    "start": "1256820",
    "end": "1263539"
  },
  {
    "text": "like that so there's always trade-offs and tuning that goes on here um but the second really interesting",
    "start": "1263539",
    "end": "1269240"
  },
  {
    "text": "thing that we found was the dashboards so on the left hand side you can see a big green smiley face because the system",
    "start": "1269240",
    "end": "1275299"
  },
  {
    "text": "dashboard said everything is good all the requests that are seen by this dashboard are returning",
    "start": "1275299",
    "end": "1281960"
  },
  {
    "text": "successful responses right but that's not what our customers were seeing right on the right you see actually we were",
    "start": "1281960",
    "end": "1287120"
  },
  {
    "text": "using Locus the load testing tool to simulate the production traffic and there again testing from the customer's",
    "start": "1287120",
    "end": "1293059"
  },
  {
    "text": "perspective we were seeing errors so what was happening there was that the dashboards were pulling",
    "start": "1293059",
    "end": "1299360"
  },
  {
    "text": "data from an agent that was running alongside the ECS task when the task went down the agent went down and it",
    "start": "1299360",
    "end": "1305179"
  },
  {
    "text": "start stopped reporting those metrics right and therefore you didn't see those errors at all so Lessons Learned one try",
    "start": "1305179",
    "end": "1312080"
  },
  {
    "text": "to make sure your monitoring is decoupled from your service two and this is exactly what we did test",
    "start": "1312080",
    "end": "1317419"
  },
  {
    "text": "your dashboards and alerting regularly with real you know production like incident-like scenarios and then three",
    "start": "1317419",
    "end": "1323840"
  },
  {
    "text": "monitor from your customers perspective using things like synthetic Pros",
    "start": "1323840",
    "end": "1329980"
  },
  {
    "text": "and then finally a fundamental question is this an incident right and the answer is it really",
    "start": "1330620",
    "end": "1337280"
  },
  {
    "text": "depends right what are your slos what are your service what are your customers expectations is three minutes eighty",
    "start": "1337280",
    "end": "1343460"
  },
  {
    "text": "percent like it really depends and this actually having this graph in front of you having a real thing that happened",
    "start": "1343460",
    "end": "1349340"
  },
  {
    "text": "you know maybe inviting your customers to come test with you in non-prod can actually help you clarify some of these",
    "start": "1349340",
    "end": "1355880"
  },
  {
    "text": "things before you know fingers are being pointed before there's actually a real incident happening live in production",
    "start": "1355880",
    "end": "1363260"
  },
  {
    "text": "um so that concludes the case study and now we'll go to takeaways so first of all getting started with chaos",
    "start": "1363260",
    "end": "1368419"
  },
  {
    "text": "engineering does not need to be difficult it doesn't require fancy tools um if you want to be successful ensure",
    "start": "1368419",
    "end": "1374120"
  },
  {
    "text": "that your chaos tests are aligned with real business needs and requirements and three after major incidents strongly",
    "start": "1374120",
    "end": "1380840"
  },
  {
    "text": "consider including a chaos test as a post-mortem follow-up to prevent a recurrence",
    "start": "1380840",
    "end": "1386659"
  },
  {
    "text": "and this is just about Goldman Sachs engineering we have a bunch of engineering tenants I highlighted a few",
    "start": "1386659",
    "end": "1393140"
  },
  {
    "text": "that I thought were particularly relevant to chaos engineering and this talk and now I'll stop and I'll take any",
    "start": "1393140",
    "end": "1399020"
  },
  {
    "text": "questions thank you everybody foreign",
    "start": "1399020",
    "end": "1405140"
  },
  {
    "text": "presentation I especially like the slide how to convince your boss right so my",
    "start": "1421840",
    "end": "1427400"
  },
  {
    "text": "question is especially in the serverless functions that we write right can you",
    "start": "1427400",
    "end": "1432620"
  },
  {
    "text": "talk a little more on how do you do the chaos engineering especially where you have very low visibility or almost like",
    "start": "1432620",
    "end": "1438980"
  },
  {
    "text": "a zero visibility into the infrastructure right because you don't know where your functions are running",
    "start": "1438980",
    "end": "1445100"
  },
  {
    "text": "so did you guys do any deeper onto that can you talk a little more on it just",
    "start": "1445100",
    "end": "1450140"
  },
  {
    "text": "using just just to make sure I understood the question saying if it's serverless and you don't have access to the underlying infrastructure right can",
    "start": "1450140",
    "end": "1456500"
  },
  {
    "text": "I talk more about how to do chaos engineering right yeah because you have very low visibility onto it um underneath where where things are",
    "start": "1456500",
    "end": "1463580"
  },
  {
    "text": "running sure so I think the first and like the high level answer is that to do chaos",
    "start": "1463580",
    "end": "1469340"
  },
  {
    "text": "engineering you don't necessarily need the visibility into the infrastructure right you need a visibility into how",
    "start": "1469340",
    "end": "1474860"
  },
  {
    "text": "your customers are viewing your system right so what you do need is access to",
    "start": "1474860",
    "end": "1481700"
  },
  {
    "text": "do something bad right so however you actually choose to achieve that typically right previously it was not on",
    "start": "1481700",
    "end": "1487520"
  },
  {
    "text": "the infrastructure level because that's like really generic you can you bring that machine and impacts anything right",
    "start": "1487520",
    "end": "1493760"
  },
  {
    "text": "but now that we're moving to the higher up attractions that becomes harder to do so with ECS tests I think the example",
    "start": "1493760",
    "end": "1499940"
  },
  {
    "text": "there is clear for Lambda there are ways that you can actually inject you know latency into your Lambda you can",
    "start": "1499940",
    "end": "1505340"
  },
  {
    "text": "actually like put things in front of it to like simulate failures but the truth is that it is more challenging right",
    "start": "1505340",
    "end": "1511100"
  },
  {
    "text": "with serverless to actually inject these failures and to make things fail also realistically",
    "start": "1511100",
    "end": "1516140"
  },
  {
    "text": "um and I wish I had like all the answers um and I don't um but but yeah like there are you know there are ways that",
    "start": "1516140",
    "end": "1522740"
  },
  {
    "text": "you can actually go and you know whether it's Network right putting something like disrupting the network so we can't",
    "start": "1522740",
    "end": "1528020"
  },
  {
    "text": "reach the Lambda but your customer can't reach the Lambda even though it's up and running or whether it's you know putting",
    "start": "1528020",
    "end": "1533120"
  },
  {
    "text": "something in the Lambda that like lets you for certain requests fail or for certain requests you know inject latency",
    "start": "1533120",
    "end": "1539059"
  },
  {
    "text": "right those are some of the strategies that we use I hope that helps thank you",
    "start": "1539059",
    "end": "1544400"
  },
  {
    "text": "hello there are different type of failures that you can simulate have you ever simulated a failure that could affect",
    "start": "1544400",
    "end": "1553039"
  },
  {
    "text": "data consistency that's a good question I personally haven't simulated I've definitely seen",
    "start": "1553039",
    "end": "1558980"
  },
  {
    "text": "incidents um where you know like databases did funny things and you know didn't operate",
    "start": "1558980",
    "end": "1565279"
  },
  {
    "text": "according but that's that's definitely a really valuable thing to do for chaotic engineering it's one of the most",
    "start": "1565279",
    "end": "1570380"
  },
  {
    "text": "dangerous things because you can't recover like recovering the data is hard um and definitely you know definitely a",
    "start": "1570380",
    "end": "1577460"
  },
  {
    "text": "scenario worth testing I can't give you personal uh a personal fun attitude here though thank you",
    "start": "1577460",
    "end": "1585340"
  },
  {
    "text": "hey so thank you for this um so in terms of chaos testing pre-prod",
    "start": "1590659",
    "end": "1596179"
  },
  {
    "text": "you need to simulate stuff which means you need to do load testing because not everything happens just because it's in",
    "start": "1596179",
    "end": "1601940"
  },
  {
    "text": "a browser right one person at a time so in terms of uh stimulating load tests",
    "start": "1601940",
    "end": "1608480"
  },
  {
    "text": "uh how have you found that just capturing Network traffic you know",
    "start": "1608480",
    "end": "1613700"
  },
  {
    "text": "especially on new features that doesn't exist yet you know if something's already in production you can kind of capture a",
    "start": "1613700",
    "end": "1619700"
  },
  {
    "text": "sample and then and then sanitize it and stuff but like how how have you found to",
    "start": "1619700",
    "end": "1625100"
  },
  {
    "text": "speed up the process where the the chaos testing that you have to do in non-prod does rely on a",
    "start": "1625100",
    "end": "1631159"
  },
  {
    "text": "load test and sometimes that's not just as easy as like capturing traffic and then replaying it have you found ways to",
    "start": "1631159",
    "end": "1638059"
  },
  {
    "text": "speed up that Loop to get to a stimulate a re-simulatable state that requires",
    "start": "1638059",
    "end": "1643400"
  },
  {
    "text": "load testing which is not easy right it's definitely a challenging issue I think once you're in prod right",
    "start": "1643400",
    "end": "1650120"
  },
  {
    "text": "you can use things like fingerprinting well fingerprinting is more like for the shape of the data but like you can you",
    "start": "1650120",
    "end": "1655340"
  },
  {
    "text": "can replay more easily right you can record what's actually there in prod put that down and then replay it in non-prod",
    "start": "1655340",
    "end": "1661700"
  },
  {
    "text": "right like it's a little bit hard to um to know what your traffic will look like",
    "start": "1661700",
    "end": "1667460"
  },
  {
    "text": "once you're in prod and it's really just about best guesses um which is why like in general you want to",
    "start": "1667460",
    "end": "1672980"
  },
  {
    "text": "move incrementally and release to prod even in small increments right as quickly as you can so you can get real",
    "start": "1672980",
    "end": "1678260"
  },
  {
    "text": "life feedback but yeah I don't have a magic magic answer there",
    "start": "1678260",
    "end": "1683320"
  },
  {
    "text": "okay so how much time do you invest in researching reviewing investigating the",
    "start": "1684919",
    "end": "1692000"
  },
  {
    "text": "results after a chaos test that's a great question so it actually is",
    "start": "1692000",
    "end": "1697640"
  },
  {
    "text": "um a very very large part of the chaos testing and that's why I said before like if there isn't a business use case",
    "start": "1697640",
    "end": "1705740"
  },
  {
    "text": "attached to it like it'll often just like fizzle out right you did the chaos test you found some things but like nobody's like really",
    "start": "1705740",
    "end": "1712039"
  },
  {
    "text": "interested enough to to dig into it if it's not Material right if it's not",
    "start": "1712039",
    "end": "1717080"
  },
  {
    "text": "something that people actually care about but yeah I mean it's just like a post like if you had a real production incident you would spend right the",
    "start": "1717080",
    "end": "1723080"
  },
  {
    "text": "production incident is stressful and then you could spend months afterwards like cleaning up and doing all the follow-ups similar for a chaos test as",
    "start": "1723080",
    "end": "1729500"
  },
  {
    "text": "well there's a lot of time that goes into the into the follow-ups there too all right",
    "start": "1729500",
    "end": "1735200"
  },
  {
    "text": "um just a quiz quick question how do you invoke to the Ops Team where you are",
    "start": "1735200",
    "end": "1741460"
  },
  {
    "text": "just you know making cows in in non-production environments for example",
    "start": "1741460",
    "end": "1747860"
  },
  {
    "text": "when you need to analyze the root cause analysis of the of that theme I don't know if you",
    "start": "1747860",
    "end": "1755299"
  },
  {
    "text": "understand my question hey maybe just repeat it you want to know how we interact with how do you involve the Ops",
    "start": "1755299",
    "end": "1760460"
  },
  {
    "text": "Team what you are in testing in a non-production environment sure so depending on the structure of",
    "start": "1760460",
    "end": "1765919"
  },
  {
    "text": "the team right often the Ops team will be involved in the non-prod environment as well",
    "start": "1765919",
    "end": "1771380"
  },
  {
    "text": "um so if that's the case then that's great but definitely like you need to involve your apps team right because they're the ones who know what's going",
    "start": "1771380",
    "end": "1777620"
  },
  {
    "text": "on from an auth perspective and that's actually what I find is a very good outcome of chaos tests is that you bring",
    "start": "1777620",
    "end": "1784520"
  },
  {
    "text": "everyone together right and like it kind of under a less much less stressful than a product everyone comes together for",
    "start": "1784520",
    "end": "1791179"
  },
  {
    "text": "prod incidents right but it's not the most Pleasant time for everyone to get together you get everybody together for",
    "start": "1791179",
    "end": "1796279"
  },
  {
    "text": "a chaos task you know everyone starts talking to each other and you often uncover like disconnects and understanding right where Ops thinks",
    "start": "1796279",
    "end": "1803179"
  },
  {
    "text": "that like you know you're doing X and Dev thinks you're doing why and then they realize that oh well actually we've",
    "start": "1803179",
    "end": "1810500"
  },
  {
    "text": "been right like completely misunderstanding each other the whole time so definitely you want to involve",
    "start": "1810500",
    "end": "1816260"
  },
  {
    "text": "apps um often they're involved in non-prot anyways and even if they're not get them involved right like make it and",
    "start": "1816260",
    "end": "1822020"
  },
  {
    "text": "hopefully I find that off people are actually often more even more excited about chaos engineering than the devs",
    "start": "1822020",
    "end": "1827419"
  },
  {
    "text": "sometimes because it's like you know more off their alley and they're very often really happy and excited to have somebody proactively looking at Ops type",
    "start": "1827419",
    "end": "1834080"
  },
  {
    "text": "things so yeah so my question just adding to what he has asked one of",
    "start": "1834080",
    "end": "1842120"
  },
  {
    "text": "the often challenge we face is that we require access or admin access for carrying out this thing",
    "start": "1842120",
    "end": "1848659"
  },
  {
    "text": "I understand that pre-products lower environment is easy but Goldman Sach how",
    "start": "1848659",
    "end": "1854899"
  },
  {
    "text": "you are planning to do in abroad because that require probably Beyond VP level",
    "start": "1854899",
    "end": "1860000"
  },
  {
    "text": "approval to touch anything right sure so it's definitely a challenge there's two processes that there's an access side",
    "start": "1860000",
    "end": "1866120"
  },
  {
    "text": "like the the technical part of like does somebody have access and typically somebody will have access right there",
    "start": "1866120",
    "end": "1872360"
  },
  {
    "text": "like there will be somebody who has that access so then getting that person to actually participate and then there's the flip side which is not the technical",
    "start": "1872360",
    "end": "1879200"
  },
  {
    "text": "part of getting access but the like organizational part which is like if you're going to do a chaos test in",
    "start": "1879200",
    "end": "1885320"
  },
  {
    "text": "production you want to have like a go no-go type of meeting with everybody in the room right you don't don't cast",
    "start": "1885320",
    "end": "1891919"
  },
  {
    "text": "alone for sure not in Pride right just like you before you release you have a go no go like should we do this should",
    "start": "1891919",
    "end": "1897919"
  },
  {
    "text": "we not do this same thing write down your plans get everybody in a room have everybody sitting there you know",
    "start": "1897919",
    "end": "1903380"
  },
  {
    "text": "virtually or in reality and then have the person with permissions press the button right and then the other Pro of",
    "start": "1903380",
    "end": "1909740"
  },
  {
    "text": "that is that if something goes wrong anybody who's needed to actually resolve the incident is already in the room eyes",
    "start": "1909740",
    "end": "1916279"
  },
  {
    "text": "on it you're not going to waste the 20 minutes that sometimes happens until you page the right person to actually get on",
    "start": "1916279",
    "end": "1921799"
  },
  {
    "text": "on on the call and starting to fix things answers your question",
    "start": "1921799",
    "end": "1927320"
  },
  {
    "text": "thank you",
    "start": "1927320",
    "end": "1929919"
  },
  {
    "text": "my question is are there any new developments like tools techniques in this space that you find interesting",
    "start": "1938659",
    "end": "1945260"
  },
  {
    "text": "how are there any new tools and techniques that yeah in the chaos engineering space any new developments",
    "start": "1945260",
    "end": "1950419"
  },
  {
    "text": "that you find particularly interesting that we're planning on using or that we oh yeah perhaps that you're looking at",
    "start": "1950419",
    "end": "1955700"
  },
  {
    "text": "like perhaps instruments for implementing right so um you know I know AWS is",
    "start": "1955700",
    "end": "1961880"
  },
  {
    "text": "coming out with a lot of like FIS their fourth injection um service so we were looking into that",
    "start": "1961880",
    "end": "1967700"
  },
  {
    "text": "as well I think they're starting with a lot of network disruptions um there's definitely a lot happening like in the space",
    "start": "1967700",
    "end": "1974720"
  },
  {
    "text": "um what I find is interesting honestly is like a lot of tools start with the",
    "start": "1974720",
    "end": "1980480"
  },
  {
    "text": "simple things right and then like kind of stuff because the other stuff is really hard right so I think like what",
    "start": "1980480",
    "end": "1987020"
  },
  {
    "text": "would be great is you know kind of getting together and and slowly getting a library where we actually also solve",
    "start": "1987020",
    "end": "1992480"
  },
  {
    "text": "the more complex problems right rather than everyone kind of writing their own new chaos tool that starts and does",
    "start": "1992480",
    "end": "1998059"
  },
  {
    "text": "bring down ec2 instance stop the ECS test and then kind of Fizzles out because the other stuff is too hard if",
    "start": "1998059",
    "end": "2003760"
  },
  {
    "text": "you can kind of unite and get to you know the more complex and Meaty problems that would definitely be a great",
    "start": "2003760",
    "end": "2009940"
  },
  {
    "text": "great outcome thank you uh so a lot of the so we were",
    "start": "2009940",
    "end": "2015460"
  },
  {
    "text": "talking about like manual chaos tests and stuff like that what about moving to like automating the chaos test like what",
    "start": "2015460",
    "end": "2021580"
  },
  {
    "text": "are some of the things that you have to keep in mind and I guess like how do you ensure that you're always watching uh",
    "start": "2021580",
    "end": "2027340"
  },
  {
    "text": "the automated chaos tests that are running sure that's a great question um so automating is definitely very",
    "start": "2027340",
    "end": "2033159"
  },
  {
    "text": "valuable um it is a system test right so let's say a lot of what suggested is running",
    "start": "2033159",
    "end": "2038980"
  },
  {
    "text": "as part of your your CI CD pipeline right you have a chaos testing step um some of the challenges there are",
    "start": "2038980",
    "end": "2044740"
  },
  {
    "text": "again the fourth positive right so when you're running it once you can set things up you can make sure everything's running what we found to be a challenge",
    "start": "2044740",
    "end": "2051220"
  },
  {
    "text": "a lot is you're automating chaos tests is like you know things are down not because of your chaos not because of the",
    "start": "2051220",
    "end": "2057760"
  },
  {
    "text": "test not because your system changed just because of the environment right you're usually not running in Pros it has like one challenge",
    "start": "2057760",
    "end": "2064599"
  },
  {
    "text": "um the other challenge is like you know determining and that's why running manually first helps you need to have",
    "start": "2064599",
    "end": "2070599"
  },
  {
    "text": "when you're automating a pass fail threshold right you need to have like that that binary like yes or no we other",
    "start": "2070599",
    "end": "2077560"
  },
  {
    "text": "Pastor failed and when you're running manually you can look at it and kind of tune that and figure out where that",
    "start": "2077560",
    "end": "2083679"
  },
  {
    "text": "should be um but if you set that too aggressive you're going to have a lot of false positives also right you say oh we only",
    "start": "2083679",
    "end": "2089980"
  },
  {
    "text": "want 99.9 percent of the requests every single time that we run our chaos test and our cicd pipeline",
    "start": "2089980",
    "end": "2095138"
  },
  {
    "text": "you're probably going to end up with lots of build failures and everyone's just going to start ignoring that right so you want to set it you want to make",
    "start": "2095139",
    "end": "2102040"
  },
  {
    "text": "sure you have a really stable environment to run it in you want to set your bar low enough that you won't have",
    "start": "2102040",
    "end": "2107140"
  },
  {
    "text": "false positives and then you also might want to consider you know running it if you're not doing really continuous",
    "start": "2107140",
    "end": "2113680"
  },
  {
    "text": "delivery you might want to consider running it just before a release not every day or you know every hour",
    "start": "2113680",
    "end": "2118900"
  },
  {
    "text": "every year for sure not like every build like have mercy on your developers thank you Bella thank you everyone for",
    "start": "2118900",
    "end": "2125680"
  },
  {
    "text": "coming if you have questions you can come after that thank you everyone",
    "start": "2125680",
    "end": "2130760"
  },
  {
    "text": "[Applause]",
    "start": "2130760",
    "end": "2134459"
  }
]