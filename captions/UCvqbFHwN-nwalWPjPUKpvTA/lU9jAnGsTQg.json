[
  {
    "start": "0",
    "end": "105000"
  },
  {
    "text": "hello the topic of our discussion today is scaling ja apps to zero with grow VM",
    "start": "3240",
    "end": "9200"
  },
  {
    "text": "native image first let me introduce myself my name is Katherine edise and I'm a",
    "start": "9200",
    "end": "14719"
  },
  {
    "text": "developer Advocate at bellsoft bellsoft is one of the leading open jdk providers and",
    "start": "14719",
    "end": "21880"
  },
  {
    "text": "contributors the company develops and supports Liber jdk and the number of",
    "start": "21880",
    "end": "26920"
  },
  {
    "text": "products aimed at providing the developers with the most complete Java experience the company has a vast",
    "start": "26920",
    "end": "33800"
  },
  {
    "text": "expertise in optimizing Java for the cloud we provide the smallest containers",
    "start": "33800",
    "end": "39200"
  },
  {
    "text": "for the Java applications on the market and also a number of solutions aimed at reducing the Java startup such as Libera",
    "start": "39200",
    "end": "47079"
  },
  {
    "text": "native image kit and Libera jdk binaries with the support for the coordinated",
    "start": "47079",
    "end": "53600"
  },
  {
    "text": "restora checkpoint project I will explore these Concepts in a little while also wellsoft is member of gral VM",
    "start": "53600",
    "end": "62600"
  },
  {
    "text": "Advisory Board Cloud native Computing Foundation the Linux foundation and a",
    "start": "62600",
    "end": "68159"
  },
  {
    "text": "number of other key committees and Boards it means that we actually know what we're talking about in terms of",
    "start": "68159",
    "end": "74960"
  },
  {
    "text": "optimizing the job performance for the cloud as I already mentioned Bell soft's product range includes Liber jdk",
    "start": "74960",
    "end": "82680"
  },
  {
    "text": "recommended by Spring Library conative image kit based on the gral VM Community",
    "start": "82680",
    "end": "88079"
  },
  {
    "text": "Edition and alak Linux which is 100% compatible with alpine Linux but it is",
    "start": "88079",
    "end": "94520"
  },
  {
    "text": "the only Linux optimized for Java all products are open source and free for",
    "start": "94520",
    "end": "100159"
  },
  {
    "text": "commercial and personal use but commercial support is also available all",
    "start": "100159",
    "end": "105799"
  },
  {
    "start": "105000",
    "end": "340000"
  },
  {
    "text": "right so let's mark out the plan for our webinar today first we are going to",
    "start": "105799",
    "end": "111159"
  },
  {
    "text": "explore the modern ways of deploying and running applications in the cloud namely",
    "start": "111159",
    "end": "116520"
  },
  {
    "text": "the scale to zero approach then we will discuss why the Java application as is",
    "start": "116520",
    "end": "123079"
  },
  {
    "text": "is not quite suitable for this approach and what can we do about that I will",
    "start": "123079",
    "end": "129520"
  },
  {
    "text": "provide a brief overview of the existing solutions to the issue and then we will",
    "start": "129520",
    "end": "135319"
  },
  {
    "text": "focus Solly on gral VM native image we will discuss the key Concepts main",
    "start": "135319",
    "end": "142160"
  },
  {
    "text": "features available distributions we will also discuss the possible limitations",
    "start": "142160",
    "end": "148480"
  },
  {
    "text": "and ways to tackle them after that I will provide a Hands-On tutorial on",
    "start": "148480",
    "end": "154160"
  },
  {
    "text": "converting Java application into native image we will also see how we can deploy",
    "start": "154160",
    "end": "160519"
  },
  {
    "text": "uh the dative image in a Docker container right so let's uh move to uh",
    "start": "160519",
    "end": "165879"
  },
  {
    "text": "the first point of our discussion traditionally we used to deploy the application to the server and",
    "start": "165879",
    "end": "173200"
  },
  {
    "text": "let it run 247 regardless of whether there were any incoming requests but the",
    "start": "173200",
    "end": "179000"
  },
  {
    "text": "cloud changed a lot in a way we deploy and run our applications it offers",
    "start": "179000",
    "end": "184519"
  },
  {
    "text": "tremendous opportunities for scaling the application allowing us to meet any user",
    "start": "184519",
    "end": "191000"
  },
  {
    "text": "demands and traffic spikes but with great opportunities come",
    "start": "191000",
    "end": "196120"
  },
  {
    "text": "great expenses and the cloud costs money and if you let your application run idly",
    "start": "196120",
    "end": "203720"
  },
  {
    "text": "without actually doing anything useful you still have to pay for the cloud resources that were alloca to your",
    "start": "203720",
    "end": "210200"
  },
  {
    "text": "application and for the CPU time one way of dealing with that is to try to",
    "start": "210200",
    "end": "217080"
  },
  {
    "text": "predict the traffic surges and then request the necessary resources and the",
    "start": "217080",
    "end": "222200"
  },
  {
    "text": "cloud provider will allocate the resources based on your preliminary",
    "start": "222200",
    "end": "227599"
  },
  {
    "text": "demand but in this way you will probably want to allocate more resources just in",
    "start": "227599",
    "end": "235519"
  },
  {
    "text": "case and then you will still have to pay more for the resources that were",
    "start": "235519",
    "end": "242720"
  },
  {
    "text": "allocated what we want is to achieve much greater flexibility in scaling our instances in",
    "start": "242720",
    "end": "250599"
  },
  {
    "text": "the cloud and this is where scale to zero comes into play so scale to zero means",
    "start": "250599",
    "end": "257479"
  },
  {
    "text": "the ability to scale the resources to a minimum when there is no traffic so for",
    "start": "257479",
    "end": "263560"
  },
  {
    "text": "instance if a service is Idle all its instances are stopped and then if there",
    "start": "263560",
    "end": "270800"
  },
  {
    "text": "are any incoming requests the service is scaled up to meet the demand and then",
    "start": "270800",
    "end": "276960"
  },
  {
    "text": "scale down again so this flexibility in scaling the resources means that we pay",
    "start": "276960",
    "end": "284160"
  },
  {
    "text": "only for the resources and CPU time when our application is performing some",
    "start": "284160",
    "end": "290639"
  },
  {
    "text": "tasks using scale to zero approach means better cost efficiency and more",
    "start": "290639",
    "end": "296400"
  },
  {
    "text": "sustainable way of utilizing energy the magic Cloud providers uh such as AWS",
    "start": "296400",
    "end": "303960"
  },
  {
    "text": "and Google already offer uh tools and solutions that help us to utilize this",
    "start": "303960",
    "end": "310479"
  },
  {
    "text": "approach such as AWS lambdas or Google functions well all seems to be well in",
    "start": "310479",
    "end": "318520"
  },
  {
    "text": "the Kingdom of Denmark but there is a slight issue with the Java you can't",
    "start": "318520",
    "end": "324919"
  },
  {
    "text": "simply spin up a Java service this is because the Java application needs",
    "start": "324919",
    "end": "330000"
  },
  {
    "text": "seconds to start and several minutes or even hours to warm",
    "start": "330000",
    "end": "335360"
  },
  {
    "text": "up why does it happen well to understand that we first need to understand how the",
    "start": "335360",
    "end": "341759"
  },
  {
    "start": "340000",
    "end": "418000"
  },
  {
    "text": "Java application starts this process comprises of three stages the jvm start",
    "start": "341759",
    "end": "348000"
  },
  {
    "text": "the application start and the jvm warm-up and the warm-up is the actual",
    "start": "348000",
    "end": "353160"
  },
  {
    "text": "culprit of our English so when the jvm starts all necessary core classes are initialized",
    "start": "353160",
    "end": "360440"
  },
  {
    "text": "system classes are initialized and the dependencies of uh the main class get",
    "start": "360440",
    "end": "367720"
  },
  {
    "text": "resolved then the main method is invoked the jvm star takes only about several",
    "start": "367720",
    "end": "374280"
  },
  {
    "text": "milliseconds on more than Hardware which is well not that much right but then the",
    "start": "374280",
    "end": "379479"
  },
  {
    "text": "application starts when the application starts the necessary dependencies get",
    "start": "379479",
    "end": "385440"
  },
  {
    "text": "resolved necessary classes get initialized and the resources get loaded",
    "start": "385440",
    "end": "391520"
  },
  {
    "text": "the jvm start and application start taken together yield the time to the first",
    "start": "391520",
    "end": "397520"
  },
  {
    "text": "operation and usually that is well several seconds which is already not",
    "start": "397520",
    "end": "402880"
  },
  {
    "text": "that optimal right we need our instances to start up",
    "start": "402880",
    "end": "408039"
  },
  {
    "text": "immediately but then the jvm has a lot to do before it can process all incoming",
    "start": "408039",
    "end": "413919"
  },
  {
    "text": "requests to its fullest and that is the jvm warmup as you know the Java",
    "start": "413919",
    "end": "419840"
  },
  {
    "start": "418000",
    "end": "497000"
  },
  {
    "text": "applications are compiled just in time so after the application starts the Java",
    "start": "419840",
    "end": "426560"
  },
  {
    "text": "bite code is translated into machine code and that is not the only benefit of",
    "start": "426560",
    "end": "432639"
  },
  {
    "text": "just in time compilation you see the uh jit compiler optimizes the code after",
    "start": "432639",
    "end": "440039"
  },
  {
    "text": "the application starts and its goal is to provide the highly performant code so",
    "start": "440039",
    "end": "445560"
  },
  {
    "text": "it observes the running application then Gathers some profiling data and then",
    "start": "445560",
    "end": "452400"
  },
  {
    "text": "implements optimizations as it sees fit and as a rule the more",
    "start": "452400",
    "end": "458240"
  },
  {
    "text": "optimizations the more performant the resulting code is code compilation and",
    "start": "458240",
    "end": "464159"
  },
  {
    "text": "optimization take substantially longer than the actual startup and during the warm-up stage the",
    "start": "464159",
    "end": "471840"
  },
  {
    "text": "application processes way fewer requests than it uh could process when it is at a",
    "start": "471840",
    "end": "478840"
  },
  {
    "text": "stable State and at the same time it consumes",
    "start": "478840",
    "end": "484319"
  },
  {
    "text": "more memory because the jvm needs to store somewhere the profiling data and",
    "start": "484319",
    "end": "489879"
  },
  {
    "text": "the bite code cache so as a result you have to allocate more memory to your",
    "start": "489879",
    "end": "496680"
  },
  {
    "text": "instances and then this memory is not utilized but you still have to pay for that this is called resources",
    "start": "496680",
    "end": "504080"
  },
  {
    "start": "497000",
    "end": "638000"
  },
  {
    "text": "underutilization so what can we do about that well there are actually several",
    "start": "504080",
    "end": "509520"
  },
  {
    "text": "solutions to this issue and migrating to another programming languages is not one",
    "start": "509520",
    "end": "515320"
  },
  {
    "text": "of them so don't worry the first solution is application class data sharing or absidia it is a jvm feature",
    "start": "515320",
    "end": "524120"
  },
  {
    "text": "that uh loads and initializes system classes and some application classes",
    "start": "524120",
    "end": "530640"
  },
  {
    "text": "into the archive during the trial run and then during the production run the jvm uh reads this file and loads the",
    "start": "530640",
    "end": "538920"
  },
  {
    "text": "classes from the archive loading the classes from the archive is faster than initializing them so the startup is",
    "start": "538920",
    "end": "546000"
  },
  {
    "text": "reduced and uh in general uh we get a 50% better startup and warm up which is",
    "start": "546000",
    "end": "553120"
  },
  {
    "text": "already good but it's not quite what we are looking for then the second solution is the",
    "start": "553120",
    "end": "559880"
  },
  {
    "text": "coordinate to restore a checkpoint or the crack project it is the open jdk project that allows you to pause a",
    "start": "559880",
    "end": "567200"
  },
  {
    "text": "running and warmed up Java application save it to the file replicate this file",
    "start": "567200",
    "end": "572399"
  },
  {
    "text": "among Cloud instances and then restore the application from the file from the",
    "start": "572399",
    "end": "577480"
  },
  {
    "text": "moment it was paused much like with the video game and in this case the application",
    "start": "577480",
    "end": "583880"
  },
  {
    "text": "starts in several milliseconds but the problem is that uh the crack is not yet",
    "start": "583880",
    "end": "589040"
  },
  {
    "text": "uh well known in the industry and you may have to rewrite the code of your application so that it could restart",
    "start": "589040",
    "end": "596120"
  },
  {
    "text": "from the snapshot safely then the next solution as the project leaden uh it is a very cool open",
    "start": "596120",
    "end": "603600"
  },
  {
    "text": "GDK project but it is still under development it uses the power of",
    "start": "603600",
    "end": "610279"
  },
  {
    "text": "application class data sharing and ahead of time compilation but as I already said it's still uh in the makings Early",
    "start": "610279",
    "end": "617519"
  },
  {
    "text": "Access builds are available but they are not meant for the production use and then the fourth alternative is the gral",
    "start": "617519",
    "end": "625240"
  },
  {
    "text": "VM native image gral VM native image is an establish and well-known",
    "start": "625240",
    "end": "631120"
  },
  {
    "text": "solution and it gives us the results that we actually want and this is exactly what I'm going to discuss right",
    "start": "631120",
    "end": "637600"
  },
  {
    "text": "now so gral VM native image is part of the gral VM project which is the jdk and",
    "start": "637600",
    "end": "644480"
  },
  {
    "start": "638000",
    "end": "738000"
  },
  {
    "text": "the jvm written in Java but I'm not going to discuss the whole project we are just going to concentrate on the",
    "start": "644480",
    "end": "650440"
  },
  {
    "text": "native image part so the grow VM native image uses ahead of time compilation",
    "start": "650440",
    "end": "656440"
  },
  {
    "text": "instead of the Just in Time compilation ahead of time compilation happens before",
    "start": "656440",
    "end": "661959"
  },
  {
    "text": "the program execution so at build time the grvm aot compiler performs static",
    "start": "661959",
    "end": "669000"
  },
  {
    "text": "analysis of the code during this analysis it determines",
    "start": "669000",
    "end": "674160"
  },
  {
    "text": "which classes methods and fields are reachable at run time and only these",
    "start": "674160",
    "end": "679760"
  },
  {
    "text": "methods make it into the final binary the compiler also uh initializes uh some",
    "start": "679760",
    "end": "686560"
  },
  {
    "text": "classes which are safe to initialize and also during the build stage the Java",
    "start": "686560",
    "end": "693000"
  },
  {
    "text": "objects allocated by Static initializers and objects reachable at runtime are",
    "start": "693000",
    "end": "698880"
  },
  {
    "text": "written onto the image H after the analysis the aot compiler translates the",
    "start": "698880",
    "end": "704800"
  },
  {
    "text": "Java B code into machine code specific to the operating system and the",
    "start": "704800",
    "end": "710320"
  },
  {
    "text": "architecture so for instance if you build the image on Linux x86 you can run it on Linux x86 only as",
    "start": "710320",
    "end": "719680"
  },
  {
    "text": "a result of this process all necessary classes are initialized and loaded into",
    "start": "719680",
    "end": "726519"
  },
  {
    "text": "the image and uh also the image contains necessary Library classes and statically",
    "start": "726519",
    "end": "733279"
  },
  {
    "text": "linked code from the jdk the resulting native executable is fully compiled and",
    "start": "733279",
    "end": "739040"
  },
  {
    "start": "738000",
    "end": "790000"
  },
  {
    "text": "starts in several milliseconds there is no warm up it",
    "start": "739040",
    "end": "744440"
  },
  {
    "text": "starts already at Peak Performance and this is exactly how we can implement the scale to zero approach",
    "start": "744440",
    "end": "751760"
  },
  {
    "text": "with the Java applications but almost instant startup is not the only benefit",
    "start": "751760",
    "end": "756839"
  },
  {
    "text": "of the gr VM native image first of all there is again no warm up so you don't",
    "start": "756839",
    "end": "763920"
  },
  {
    "text": "have to allocate uh more memory to your instances and there's no resources under",
    "start": "763920",
    "end": "771079"
  },
  {
    "text": "utilization in addition you can get potentially a smaller image because it",
    "start": "771079",
    "end": "776800"
  },
  {
    "text": "doesn't contain the full library of a jbm classes and only those classes required by your application I say",
    "start": "776800",
    "end": "784279"
  },
  {
    "text": "potentially because it depends on your application and also you get a smaller",
    "start": "784279",
    "end": "789360"
  },
  {
    "text": "attack surface and the native image code is harder to reverse engineer so for",
    "start": "789360",
    "end": "794600"
  },
  {
    "text": "instance let's take a simple uh Echo microservice written in Java if we",
    "start": "794600",
    "end": "800760"
  },
  {
    "text": "containerize it with Jan and the regular jdk we get a container of about 240 m",
    "start": "800760",
    "end": "809120"
  },
  {
    "text": "megabytes which starts in almost 2 seconds but if you turn this application",
    "start": "809120",
    "end": "816560"
  },
  {
    "text": "into native image and containerize it with the taban the size of the image is",
    "start": "816560",
    "end": "822880"
  },
  {
    "text": "already 188 megabytes and then starts in only 3",
    "start": "822880",
    "end": "828920"
  },
  {
    "text": "milliseconds it can go even further you can turn the application inter native image and containerize it with the alpak",
    "start": "828920",
    "end": "837079"
  },
  {
    "text": "Linux then the resulting image is three times smaller than the first image that",
    "start": "837079",
    "end": "843279"
  },
  {
    "text": "we created and it also starts in a fraction of a second there is Oracle",
    "start": "843279",
    "end": "849160"
  },
  {
    "text": "grow VM and grow VM Community Edition and there are also two uh Downstream",
    "start": "849160",
    "end": "856440"
  },
  {
    "text": "distributions of grow VM Community Edition which is Library conative image kit provided by Bell soft and Manel",
    "start": "856440",
    "end": "863800"
  },
  {
    "text": "provided by Red Hat they all provide the native image functionality but some",
    "start": "863800",
    "end": "869560"
  },
  {
    "text": "different features so which of them should you choose for your project well",
    "start": "869560",
    "end": "874839"
  },
  {
    "text": "let's take a quick look they all uh support the same variety of uh platforms so that is uh",
    "start": "874839",
    "end": "883040"
  },
  {
    "text": "Linux Mac OS and windows and the supported architectures are x86 and r64",
    "start": "883040",
    "end": "890279"
  },
  {
    "text": "all right well uh the key difference is",
    "start": "890279",
    "end": "895680"
  },
  {
    "text": "in available garbage collectors updated KDK versions and additional",
    "start": "895680",
    "end": "901120"
  },
  {
    "text": "functionality so for instance Oracle grow VM grvm Community Edition and Library conative image kit",
    "start": "901120",
    "end": "908240"
  },
  {
    "text": "provides uh the uh Native uh image compiler the grow VM jit compiler and",
    "start": "908240",
    "end": "915720"
  },
  {
    "text": "language installa bles if you want to use the native image with other programming languages Liber native image",
    "start": "915720",
    "end": "923320"
  },
  {
    "text": "kit also provides binaries with a Java fix so if you develop a desktop appli",
    "start": "923320",
    "end": "929399"
  },
  {
    "text": "you might want to turn it into a native image for a faster startup I will discuss uh the garbage collectors a",
    "start": "929399",
    "end": "936440"
  },
  {
    "text": "little bit further in my talk but they are different in these",
    "start": "936440",
    "end": "942399"
  },
  {
    "text": "distributions the key factor that you should pay attention to is the updated jdk version so gr VM native image is",
    "start": "942399",
    "end": "950800"
  },
  {
    "text": "based on uh jdk and different providers uh release free updates for different",
    "start": "950800",
    "end": "957440"
  },
  {
    "text": "versions so for instance Oracle grow VM provides free updates for",
    "start": "957440",
    "end": "963800"
  },
  {
    "text": "uh Native image based on jdk 21 and on the latest jdk version and as per Oracle",
    "start": "963800",
    "end": "972560"
  },
  {
    "text": "policy you get free updates to the LTS version for 3 years since its release",
    "start": "972560",
    "end": "979199"
  },
  {
    "text": "and then you have to either migrate to a newer LTS version or acquire subscription to continue receiving the",
    "start": "979199",
    "end": "985880"
  },
  {
    "text": "uh updates gral VM Community Edition provides updates to uh Native image",
    "start": "985880",
    "end": "992440"
  },
  {
    "text": "based on the latest jdk version only and librar Native image kit and mandrel uh",
    "start": "992440",
    "end": "999920"
  },
  {
    "text": "provide free updates for uh Native image based on jdk",
    "start": "999920",
    "end": "1005199"
  },
  {
    "text": "1721 and the latest feature version and the support life cycle of these",
    "start": "1005199",
    "end": "1012199"
  },
  {
    "start": "1012000",
    "end": "1327000"
  },
  {
    "text": "distributions is based on the support road map of the corresponding vendor so",
    "start": "1012199",
    "end": "1018399"
  },
  {
    "text": "imagine you decided to use gral VM native image with your project how can",
    "start": "1018399",
    "end": "1024319"
  },
  {
    "text": "you unleash the full potential of your gr VM native image distribution well",
    "start": "1024319",
    "end": "1030319"
  },
  {
    "text": "first of all choose the grow VM native image for your GDK version be it's 17 or",
    "start": "1030319",
    "end": "1036600"
  },
  {
    "text": "21 secondly just like with the regular Java runtime you should select an",
    "start": "1036600",
    "end": "1041959"
  },
  {
    "text": "appropriate garbage collector uh best suited for your",
    "start": "1041959",
    "end": "1047000"
  },
  {
    "text": "application thirdly you can use use build packs to facilitate the process of building the",
    "start": "1047000",
    "end": "1052919"
  },
  {
    "text": "image and also you can use GitHub actions to integrate them into your cicd",
    "start": "1052919",
    "end": "1060840"
  },
  {
    "text": "pipeline all major Frameworks such as spring Micron not corus helon already",
    "start": "1060840",
    "end": "1067480"
  },
  {
    "text": "provide integrated support for grow VM native image so you don't have uh to",
    "start": "1067480",
    "end": "1074640"
  },
  {
    "text": "deal with any complex configuration in the beginning I mentioned that there are certain",
    "start": "1074640",
    "end": "1081400"
  },
  {
    "text": "considerations when using R VM native image what are they well first of all uh",
    "start": "1081400",
    "end": "1088159"
  },
  {
    "text": "building a native image is a very uh resource demanding process you have to",
    "start": "1088159",
    "end": "1093600"
  },
  {
    "text": "allocate several gigabytes of memory to that 10 or dozen or well it depends",
    "start": "1093600",
    "end": "1100600"
  },
  {
    "text": "actually uh but uh if there are not uh enough resources the image can't be",
    "start": "1100600",
    "end": "1107039"
  },
  {
    "text": "built well I wouldn't consider it a limitation actually because it is necessary only",
    "start": "1107039",
    "end": "1114480"
  },
  {
    "text": "for uh the build time after that the native image consumes the regular amount",
    "start": "1114480",
    "end": "1119520"
  },
  {
    "text": "of memory the second consideration is that it takes several minutes to build a native image so yes it is a lengthy",
    "start": "1119520",
    "end": "1127520"
  },
  {
    "text": "process but again I don't see it as a limitation because you only have to wait",
    "start": "1127520",
    "end": "1133480"
  },
  {
    "text": "once and then you deploy the native image to the cloud to your instances and",
    "start": "1133480",
    "end": "1138799"
  },
  {
    "text": "they all start almost instantly all the time and you enjoy the perks of almost instant startup which is just great I",
    "start": "1138799",
    "end": "1145679"
  },
  {
    "text": "think so once it is possible to wait it's better than waiting every time your",
    "start": "1145679",
    "end": "1152039"
  },
  {
    "text": "services uh warm up in addition there is a limited choice of garbage",
    "start": "1152039",
    "end": "1158280"
  },
  {
    "text": "collectors so uh there is seral GC which is the simplest garbage collector that",
    "start": "1158280",
    "end": "1164400"
  },
  {
    "text": "works in one thread and freezes all application threats during the collection",
    "start": "1164400",
    "end": "1169760"
  },
  {
    "text": "and there's also EPS GC that doesn't collect any garbage and only allocates",
    "start": "1169760",
    "end": "1175080"
  },
  {
    "text": "memory all gr VM uh distributions include these two collectors and there",
    "start": "1175080",
    "end": "1180640"
  },
  {
    "text": "are also additional collectors in uh two grow VM distributions Oracle grow VM",
    "start": "1180640",
    "end": "1188240"
  },
  {
    "text": "includes G1 GC and Liber conative image kit includes parallel GC so if",
    "start": "1188240",
    "end": "1195799"
  },
  {
    "text": "increasing the performance of your application is critical to you then you should op uh for the distribution that",
    "start": "1195799",
    "end": "1202840"
  },
  {
    "text": "provides necessary garbage collector for you and the last consideration the most substantial one is that grvm native",
    "start": "1202840",
    "end": "1210440"
  },
  {
    "text": "image is not the best friend of java Dynamic features such as reflection",
    "start": "1210440",
    "end": "1217559"
  },
  {
    "text": "Dynamic proxy and so on so it means that if it doesn't detect the usage of the",
    "start": "1217559",
    "end": "1223039"
  },
  {
    "text": "dynamic features at build time the application might demonstrate unexpected",
    "start": "1223039",
    "end": "1228400"
  },
  {
    "text": "beh Behavior at run time so the image might be built without errors but uh",
    "start": "1228400",
    "end": "1234600"
  },
  {
    "text": "well unpleasant surprises wait for you during the production run can we do",
    "start": "1234600",
    "end": "1239840"
  },
  {
    "text": "anything about that well actually yes uh all you have to do is provide necessary",
    "start": "1239840",
    "end": "1245440"
  },
  {
    "text": "metadata to the gr VM native image compiler and there are several ways of",
    "start": "1245440",
    "end": "1250960"
  },
  {
    "text": "doing that so you can provide metadata manually but uh considering the fact",
    "start": "1250960",
    "end": "1256799"
  },
  {
    "text": "that uh there might be a lot of usages of dynamic features uh in your application is not very",
    "start": "1256799",
    "end": "1264000"
  },
  {
    "text": "practical you can use gr VM tracing agent during the trial run it observes",
    "start": "1264000",
    "end": "1271000"
  },
  {
    "text": "the application and identifies all the uh usages of the dynamic features and",
    "start": "1271000",
    "end": "1278159"
  },
  {
    "text": "then creates the Json files with the necessary information but if you use the tracing",
    "start": "1278159",
    "end": "1285240"
  },
  {
    "text": "agent you should run the application through uh multiple execution paths as",
    "start": "1285240",
    "end": "1291159"
  },
  {
    "text": "many as possible because the tracing agent detects only those resources uh",
    "start": "1291159",
    "end": "1297360"
  },
  {
    "text": "and features that were used actually by the application you can also use the",
    "start": "1297360",
    "end": "1302640"
  },
  {
    "text": "gradal resources autod detection plugin and provide the uh information about the",
    "start": "1302640",
    "end": "1309440"
  },
  {
    "text": "metadata there and there is the gral VM reachability metadata repository it is a",
    "start": "1309440",
    "end": "1317200"
  },
  {
    "text": "centralized place for storing the Json files for the libraries that don't",
    "start": "1317200",
    "end": "1322320"
  },
  {
    "text": "provide the metadata yet so you can look there for the library that you need all",
    "start": "1322320",
    "end": "1328400"
  },
  {
    "start": "1327000",
    "end": "1384000"
  },
  {
    "text": "right we are done with Theory it's time for some",
    "start": "1328400",
    "end": "1333679"
  },
  {
    "text": "coding all right as I promised we are going to convert a CH application into",
    "start": "1334440",
    "end": "1341159"
  },
  {
    "text": "native image and then we are going to see how we can container Ras an native",
    "start": "1341159",
    "end": "1348000"
  },
  {
    "text": "image in to a container and we're going to see the difference in startup between the regular Java application and the",
    "start": "1348000",
    "end": "1355039"
  },
  {
    "text": "native image okay I have a simplest possible Java application here Dem Java",
    "start": "1355039",
    "end": "1362279"
  },
  {
    "text": "it has only one class let's look at it so only one class",
    "start": "1362279",
    "end": "1369520"
  },
  {
    "text": "demo and only one method Main and this application does nothing more but tell",
    "start": "1369520",
    "end": "1375640"
  },
  {
    "text": "us hello from native image from the console uh we are going to turn this application",
    "start": "1375640",
    "end": "1382240"
  },
  {
    "text": "into ative image that's pretty easy I'm going to show you how to do that but",
    "start": "1382240",
    "end": "1388120"
  },
  {
    "text": "first you need to download a library conative image kit you can download it",
    "start": "1388120",
    "end": "1395240"
  },
  {
    "text": "from uh the boft website uh and choose the necessary uh",
    "start": "1395240",
    "end": "1401240"
  },
  {
    "text": "version of native image kit 4 and they require jdk version so we have here",
    "start": "1401240",
    "end": "1407360"
  },
  {
    "text": "native image kit 20 3 and 24 for jdk 17 21 and",
    "start": "1407360",
    "end": "1414120"
  },
  {
    "text": "22 and there are several packages for Windows Mac OS and Linux and the",
    "start": "1414240",
    "end": "1420840"
  },
  {
    "text": "packages are core standard and full and the difference between them is that the",
    "start": "1420840",
    "end": "1426039"
  },
  {
    "text": "core package uh uh contains uh Liber BM",
    "start": "1426039",
    "end": "1431320"
  },
  {
    "text": "and the native uh image compiler and the standard version contains uh all of that",
    "start": "1431320",
    "end": "1437360"
  },
  {
    "text": "plus uh uh language uh install BS and the full version contains liar fix which",
    "start": "1437360",
    "end": "1444279"
  },
  {
    "text": "is based on open J fix that is if you develop desktop applications I already",
    "start": "1444279",
    "end": "1451080"
  },
  {
    "text": "downloaded Library conative image kit and what we're going to do is uh turn it",
    "start": "1451080",
    "end": "1456880"
  },
  {
    "start": "1455000",
    "end": "1752000"
  },
  {
    "text": "into native image but first we uh need to use chac to generate our bite code uh",
    "start": "1456880",
    "end": "1464520"
  },
  {
    "text": "you can use uh the standard jvm for that",
    "start": "1464520",
    "end": "1470360"
  },
  {
    "text": "okay and the next step is uh to use the",
    "start": "1471679",
    "end": "1476799"
  },
  {
    "text": "native image tool inside the Library con native image",
    "start": "1476799",
    "end": "1482039"
  },
  {
    "text": "kit and we are going to feed it the resulting file uh demo. class but but we",
    "start": "1482039",
    "end": "1490440"
  },
  {
    "text": "don't have to specify the extension here and is going to generate a native image",
    "start": "1490440",
    "end": "1496120"
  },
  {
    "text": "for us",
    "start": "1496120",
    "end": "1499360"
  },
  {
    "text": "okay our fish is ready you can see here it is the",
    "start": "1508279",
    "end": "1515960"
  },
  {
    "text": "executable and we can run it directly from the console by specifying it name",
    "start": "1515960",
    "end": "1523159"
  },
  {
    "text": "and here it is our message hello from native image or you can also double click it and and and launch it as any",
    "start": "1523159",
    "end": "1530320"
  },
  {
    "text": "regular application here you can see this message too well this simple application won't",
    "start": "1530320",
    "end": "1538520"
  },
  {
    "text": "actually show us uh much difference in terms of the startop but we can see uh",
    "start": "1538520",
    "end": "1544919"
  },
  {
    "text": "the difference in terms of the resulting container size this simplest possible",
    "start": "1544919",
    "end": "1552559"
  },
  {
    "text": "application doesn't to use many jvm classes as you may guess so the image",
    "start": "1552559",
    "end": "1559440"
  },
  {
    "text": "should be smaller let's try to containerize it that purpose we need a Docker",
    "start": "1559440",
    "end": "1565840"
  },
  {
    "text": "file this Docker file we are going to um use Library conative image kit",
    "start": "1565840",
    "end": "1571760"
  },
  {
    "text": "container which is based on Library conative image kit 23 for jdk 21 and",
    "start": "1571760",
    "end": "1576919"
  },
  {
    "text": "Alita Linux muscle and we are going to perform the same actions we did in the consoles so we're going to create a",
    "start": "1576919",
    "end": "1584039"
  },
  {
    "text": "demo. class and then we're going to generate a native image based on this",
    "start": "1584039",
    "end": "1589600"
  },
  {
    "text": "file and uh the next step is we are taking alpak Linux space we don't need",
    "start": "1589600",
    "end": "1595919"
  },
  {
    "text": "any jdk here only the Linux distribution",
    "start": "1595919",
    "end": "1601360"
  },
  {
    "text": "and we simply transfer the resulting native executable into this fresh IM image and run",
    "start": "1601360",
    "end": "1608360"
  },
  {
    "text": "it okay let's try doing",
    "start": "1608360",
    "end": "1612240"
  },
  {
    "text": "that e",
    "start": "1617240",
    "end": "1621240"
  },
  {
    "text": "okay our image is ready let's check",
    "start": "1674120",
    "end": "1681039"
  },
  {
    "text": "it so as you can see it takes only uh 19 megabytes which is well pretty",
    "start": "1687240",
    "end": "1695600"
  },
  {
    "text": "impressive for a Java application so that was a simple Java app let's move on",
    "start": "1695600",
    "end": "1701399"
  },
  {
    "text": "to something that is closer to what you actually run in production and we we are",
    "start": "1701399",
    "end": "1708440"
  },
  {
    "text": "going to take the spring patch cleaning application spring patch cleaning is uh",
    "start": "1708440",
    "end": "1714840"
  },
  {
    "text": "the reference spring boot application it is a simple uh web application but uh it",
    "start": "1714840",
    "end": "1721279"
  },
  {
    "text": "uh performs all all the essential functions and helps you to search for things and",
    "start": "1721279",
    "end": "1728799"
  },
  {
    "text": "uh change something in uh the database uh you can get it on gith",
    "start": "1728799",
    "end": "1735000"
  },
  {
    "text": "Hop so here it is",
    "start": "1735000",
    "end": "1739640"
  },
  {
    "text": "and you don't have to change anything here we only need to Docker file so we",
    "start": "1740240",
    "end": "1745960"
  },
  {
    "text": "are going to containerize it and we're going to do that in two",
    "start": "1745960",
    "end": "1751720"
  },
  {
    "text": "ways first we're going to create a standard uh loc container with a",
    "start": "1751720",
    "end": "1757799"
  },
  {
    "start": "1752000",
    "end": "1917000"
  },
  {
    "text": "standard Java application for that purpose we will use Library run time container based on jdk",
    "start": "1757799",
    "end": "1765000"
  },
  {
    "text": "21 and opit musle we will uh build our application the usual way and we're",
    "start": "1765000",
    "end": "1772039"
  },
  {
    "text": "skipping the tests uh just to accelerate the build and then we are going to",
    "start": "1772039",
    "end": "1777240"
  },
  {
    "text": "transfer this uh application into a library runtime container with",
    "start": "1777240",
    "end": "1784039"
  },
  {
    "text": "JRE because we don't need JK to run the application only the JRE and so we are going to run it as",
    "start": "1784039",
    "end": "1793440"
  },
  {
    "text": "simple as that okay let's try doing that e",
    "start": "1793440",
    "end": "1801039"
  },
  {
    "text": "our container image is ready let's check it",
    "start": "1844080",
    "end": "1849440"
  },
  {
    "text": "all right so as you remember we gave it the name paning standard and here it is takes 200",
    "start": "1861120",
    "end": "1868360"
  },
  {
    "text": "megabytes and let's try to run it",
    "start": "1868360",
    "end": "1873360"
  },
  {
    "text": "as you can see our application started in almost 6",
    "start": "1889519",
    "end": "1895158"
  },
  {
    "text": "seconds here it is let's refresh it yes",
    "start": "1895200",
    "end": "1900320"
  },
  {
    "text": "so it's working all",
    "start": "1900320",
    "end": "1905039"
  },
  {
    "text": "right that was a standard app let's see what we can do with the native",
    "start": "1910559",
    "end": "1915799"
  },
  {
    "text": "image we don't have to change anything in the",
    "start": "1915799",
    "end": "1923880"
  },
  {
    "text": "application and we need the docker file spring boot three already support scr VM",
    "start": "1924320",
    "end": "1932760"
  },
  {
    "text": "illage right so here we take library conative image kit container based on",
    "start": "1932760",
    "end": "1938120"
  },
  {
    "text": "Library conative image kit 23 and jdk 21 and I'll back it to muscle and instead",
    "start": "1938120",
    "end": "1944360"
  },
  {
    "text": "of building the application the usual way we are giving our native image this command P",
    "start": "1944360",
    "end": "1953320"
  },
  {
    "text": "native Native compiler so it means that we're telling our build system M that we",
    "start": "1953320",
    "end": "1959559"
  },
  {
    "text": "want to generate native image and then here you can see uh the difference is",
    "start": "1959559",
    "end": "1965360"
  },
  {
    "text": "that we don't use the JRE we only need Linux so we is no backet to Linux bace",
    "start": "1965360",
    "end": "1972919"
  },
  {
    "text": "and so we are copying the resulting native image into the fresh image and",
    "start": "1972919",
    "end": "1978039"
  },
  {
    "text": "simply run it okay try doing that",
    "start": "1978039",
    "end": "1984200"
  },
  {
    "text": "our image is ready let's check",
    "start": "2013240",
    "end": "2020799"
  },
  {
    "text": "it so here it is bed Clinic native image as you can",
    "start": "2027000",
    "end": "2032840"
  },
  {
    "text": "see it takes 204 megabytes so it has a basic Bally the same size as the",
    "start": "2032840",
    "end": "2039679"
  },
  {
    "text": "container with a standard application and that is actually okay because uh spring pet clinic",
    "start": "2039679",
    "end": "2047480"
  },
  {
    "text": "is the reference application that uses a lot of jvm classes and so in this case",
    "start": "2047480",
    "end": "2053638"
  },
  {
    "text": "the image is uh not smaller but let's see how fast it starts",
    "start": "2053639",
    "end": "2062000"
  },
  {
    "text": "right and the difference is striking so our application started in only half a",
    "start": "2081159",
    "end": "2088480"
  },
  {
    "text": "second and yes it is working everything's fine",
    "start": "2091720",
    "end": "2098440"
  },
  {
    "text": "nothing is broken so that's a",
    "start": "2100720",
    "end": "2107400"
  },
  {
    "text": "success so in this case we didn't win much in terms of the image size but the",
    "start": "2110560",
    "end": "2118720"
  },
  {
    "text": "start toop is really fast much faster than with the standard application that",
    "start": "2118720",
    "end": "2124640"
  },
  {
    "text": "was approach using a standard uh toer file technique so we are writing a doc",
    "start": "2124640",
    "end": "2129920"
  },
  {
    "text": "file and then we are fitting it to our project and then uh there is",
    "start": "2129920",
    "end": "2136000"
  },
  {
    "text": "also a way that uses build packs if you use build packs you don't",
    "start": "2136000",
    "end": "2143119"
  },
  {
    "text": "have to write any doer files one simple command you already get your image and",
    "start": "2143119",
    "end": "2149560"
  },
  {
    "text": "the uh official uh build pack for spring uses Library native image kit as a",
    "start": "2149560",
    "end": "2156240"
  },
  {
    "text": "native image compiler and Liber jdk as a standard jdk",
    "start": "2156240",
    "end": "2163640"
  },
  {
    "text": "distribution but it also uses deian as the base Linux image and we want to uh",
    "start": "2163640",
    "end": "2172200"
  },
  {
    "text": "reduce the image size so uh I suggest we try out Al pakita build packs Al pakita",
    "start": "2172200",
    "end": "2179240"
  },
  {
    "text": "build packs use Liber jdk",
    "start": "2179240",
    "end": "2185240"
  },
  {
    "start": "2180000",
    "end": "2412000"
  },
  {
    "text": "and laket Linux and uh you only uh need",
    "start": "2185240",
    "end": "2194280"
  },
  {
    "text": "to change the configuration of the plugin on only",
    "start": "2194280",
    "end": "2200680"
  },
  {
    "text": "slightly so as the spring pad Clinic it can be a grle project and M project but",
    "start": "2200680",
    "end": "2206960"
  },
  {
    "text": "we are going to use it as a m project and we are going to add the",
    "start": "2206960",
    "end": "2212319"
  },
  {
    "text": "configuration to the main plugin",
    "start": "2212319",
    "end": "2217920"
  },
  {
    "text": "and we're going to specify the build pack that we want to",
    "start": "2217920",
    "end": "2222599"
  },
  {
    "text": "use and the most important part is to specify the Builder",
    "start": "2237680",
    "end": "2244280"
  },
  {
    "text": "right so in this case we specify that we want to use a build pack but we want to use a different build",
    "start": "2255880",
    "end": "2262200"
  },
  {
    "text": "pack that is the BS build pack based on muscle um the build pack with the clipsy",
    "start": "2262200",
    "end": "2269560"
  },
  {
    "text": "is also available",
    "start": "2269560",
    "end": "2273000"
  },
  {
    "text": "to use build pack you need Java",
    "start": "2284440",
    "end": "2288960"
  },
  {
    "text": "distribution you can download Li jdk for this",
    "start": "2289480",
    "end": "2295520"
  },
  {
    "text": "purpose and the builds are available for a wide variety of",
    "start": "2295520",
    "end": "2300920"
  },
  {
    "text": "platforms and operating systems okay so we're pointing",
    "start": "2300920",
    "end": "2308319"
  },
  {
    "text": "Java home variable to our JD key that we",
    "start": "2308319",
    "end": "2314280"
  },
  {
    "text": "downloaded and using MAV again we're skipping test and check Style just to accelerate the belt and the most",
    "start": "2314280",
    "end": "2321079"
  },
  {
    "text": "important thing here is that first we are telling M that we want to use a",
    "start": "2321079",
    "end": "2326160"
  },
  {
    "text": "build pack to build the darker image and here we're telling it that we want to use to buil a native image inside our",
    "start": "2326160",
    "end": "2334280"
  },
  {
    "text": "doctor container so let's do that",
    "start": "2334280",
    "end": "2339200"
  },
  {
    "text": "all right Royal ISU is ready and it was published local",
    "start": "2356640",
    "end": "2362000"
  },
  {
    "text": "container registry and we can run it",
    "start": "2362000",
    "end": "2367480"
  },
  {
    "text": "again the application started in half a second which just great and yes it is",
    "start": "2373720",
    "end": "2381000"
  },
  {
    "text": "working right well congratulations we just built three native images and as",
    "start": "2381000",
    "end": "2388200"
  },
  {
    "text": "you can see it's actually pretty straight forward so spring wood if you spring",
    "start": "2388200",
    "end": "2394640"
  },
  {
    "text": "wood it supports Anish out the box so you actually don't have to do",
    "start": "2394640",
    "end": "2401680"
  },
  {
    "text": "anything you don't have to write a Docker file or specify command for",
    "start": "2401680",
    "end": "2407040"
  },
  {
    "text": "generating native image if you're using build packs and that's it to sum up the scale to zero approach",
    "start": "2407040",
    "end": "2414520"
  },
  {
    "start": "2412000",
    "end": "2525000"
  },
  {
    "text": "enables us to scale instances up and down to a minimum depending on the incoming traffic and so it is cost",
    "start": "2414520",
    "end": "2421560"
  },
  {
    "text": "efficient and sustainable Java Services take longer to reach Peak Performance as",
    "start": "2421560",
    "end": "2427040"
  },
  {
    "text": "they need several seconds to start and several minutes to warm up so we can't",
    "start": "2427040",
    "end": "2432280"
  },
  {
    "text": "easily scale them up and down native image compiles and optimizes Java code",
    "start": "2432280",
    "end": "2438119"
  },
  {
    "text": "at build time so applications start almost instantly and at big performance",
    "start": "2438119",
    "end": "2443800"
  },
  {
    "text": "and there is no memory overhead there are several distributions of grow VM native image so choose one",
    "start": "2443800",
    "end": "2450920"
  },
  {
    "text": "based on your needs key factors are the updated jdk version available garbage",
    "start": "2450920",
    "end": "2456880"
  },
  {
    "text": "collector Enterprise support and additional functionality the process of generating",
    "start": "2456880",
    "end": "2463200"
  },
  {
    "text": "a native image is not complicated but the biggest challenge is to befriend",
    "start": "2463200",
    "end": "2468640"
  },
  {
    "text": "native image with all cases of dynamism in your application the goal is to",
    "start": "2468640",
    "end": "2474359"
  },
  {
    "text": "provide a complete set of metadata using tracing agent or other",
    "start": "2474359",
    "end": "2480160"
  },
  {
    "text": "means all right that was it thank you for your attention I hope you liked the webinar if you have any questions you",
    "start": "2480160",
    "end": "2487359"
  },
  {
    "text": "can contact me on Twitter and you can also browse our blog there are lots of",
    "start": "2487359",
    "end": "2493400"
  },
  {
    "text": "Articles guides on using grvm native image on other ways of improving the",
    "start": "2493400",
    "end": "2499240"
  },
  {
    "text": "performance of your Java applications and so on so forth so it's fun you can",
    "start": "2499240",
    "end": "2504920"
  },
  {
    "text": "also subscribe to a newsletter if you want to well thank you very much and hopefully until next",
    "start": "2504920",
    "end": "2512160"
  },
  {
    "text": "time e",
    "start": "2516240",
    "end": "2520240"
  }
]