[
  {
    "text": "alright let's go ahead and kick things off and get started welcome to today CN",
    "start": "30",
    "end": "6450"
  },
  {
    "text": "CF webinar the gain NC a-- insights from sto by leveraging tools like Jaeger",
    "start": "6450",
    "end": "13080"
  },
  {
    "text": "Prometheus and cortex very excited to host this today as sto is in service",
    "start": "13080",
    "end": "22439"
  },
  {
    "text": "matches are very much the rage in the cloud native space at the moment my name",
    "start": "22439",
    "end": "28140"
  },
  {
    "text": "is ariel chatib i'm a founder at a company called stack point cloud and a CF ambassador I'd like to thank you all",
    "start": "28140",
    "end": "34469"
  },
  {
    "text": "for joining us and extend a nice warm welcome to me Raj board are from Aspen",
    "start": "34469",
    "end": "41520"
  },
  {
    "text": "match who is going to be our presenter today we appreciate him sharing his expertise on Aspen mesh with all of you",
    "start": "41520",
    "end": "49550"
  },
  {
    "text": "today a little bit of housecleaning or",
    "start": "49550",
    "end": "55050"
  },
  {
    "text": "housekeeping if you will there is a chat window at the bottom and a QA function",
    "start": "55050",
    "end": "61789"
  },
  {
    "text": "go ahead and use those as we go through the talk and we'll try to find",
    "start": "61789",
    "end": "69330"
  },
  {
    "text": "opportunities to interject with your questions this session is also being recorded and we'll send out the link",
    "start": "69330",
    "end": "74840"
  },
  {
    "text": "later on so without further ado I'll pass it over to me Raj thanks Ariel good",
    "start": "74840",
    "end": "83820"
  },
  {
    "text": "morning everyone I am neeraj and the platform lead at Aspen mesh thank you all for joining in",
    "start": "83820",
    "end": "90540"
  },
  {
    "text": "on the CNC webinar today I'm going to talk about how to gain insights into your micro services applications using",
    "start": "90540",
    "end": "98549"
  },
  {
    "text": "sto and leveraging various tools like Jaeger Prometheus and cortex but before",
    "start": "98549",
    "end": "104490"
  },
  {
    "text": "we go deeper into the insights I will first give an overview of what the service mesh is what problems service",
    "start": "104490",
    "end": "112229"
  },
  {
    "text": "solves what are the various architectural choices and then move on to sto architecture and then to the",
    "start": "112229",
    "end": "118860"
  },
  {
    "text": "insights and using tools to unlock the full functionality of sto so with that",
    "start": "118860",
    "end": "124890"
  },
  {
    "text": "let's get started so this is a typical",
    "start": "124890",
    "end": "130099"
  },
  {
    "text": "microservices installation or a typical microservices lecture you have three services service",
    "start": "130099",
    "end": "136870"
  },
  {
    "text": "a B and C service is talking to service be service be stopping to service C and",
    "start": "136870",
    "end": "141990"
  },
  {
    "text": "then service C is talking over Internet to maybe a man at service all these",
    "start": "141990",
    "end": "148990"
  },
  {
    "text": "services or micro services are written in different languages so when is it rent Python the second is written about",
    "start": "148990",
    "end": "155260"
  },
  {
    "text": "GIS and heard in Java so in this slide what you see in the bottom half the",
    "start": "155260",
    "end": "160480"
  },
  {
    "text": "green boxes they represent the essential business logic and API is that are",
    "start": "160480",
    "end": "166060"
  },
  {
    "text": "unique to each micro service so the microscope is developer have each of",
    "start": "166060",
    "end": "171280"
  },
  {
    "text": "them have to develop this for providing the functionality of the micro services the boxes in the top in black they",
    "start": "171280",
    "end": "179410"
  },
  {
    "text": "represent somewhat a common functionality which is kind of shared",
    "start": "179410",
    "end": "186670"
  },
  {
    "text": "between each micro services between the micro services and they are related to communication between them so they",
    "start": "186670",
    "end": "193960"
  },
  {
    "text": "involve things like service discovery load balancing some sort of tracing",
    "start": "193960",
    "end": "200920"
  },
  {
    "text": "telemetry if you are using mutual TLS or TLS and open SSL library so even though",
    "start": "200920",
    "end": "207370"
  },
  {
    "text": "this these functionalities for communication between micro services are",
    "start": "207370",
    "end": "212830"
  },
  {
    "text": "shared they are currently part of each micro service which means application developer is responsible for that",
    "start": "212830",
    "end": "219630"
  },
  {
    "text": "secondly if you are operating imagine you your job is to ensure uniformity between these micro services",
    "start": "219630",
    "end": "227470"
  },
  {
    "text": "so you can query traces and query metrics across the micro services so",
    "start": "227470",
    "end": "235230"
  },
  {
    "text": "imagine if one micro service is a different format of request count than the other or if you want to maintain a",
    "start": "235230",
    "end": "242380"
  },
  {
    "text": "uniform security posture ensuring open SSL version compatibility across micro",
    "start": "242380",
    "end": "249040"
  },
  {
    "text": "services again a big operational nightmare so this is the problem with service mesh solves so service mesh is",
    "start": "249040",
    "end": "257739"
  },
  {
    "text": "essentially a common infrastructure layer which manages communication",
    "start": "257739",
    "end": "263380"
  },
  {
    "text": "between micro services so with a micro service the operator is happy or it makes his life easier as",
    "start": "263380",
    "end": "272990"
  },
  {
    "text": "they're getting a lair in which they can insert uniformity and their control and",
    "start": "272990",
    "end": "278970"
  },
  {
    "text": "policies at the same time for the developer it's easier as they have to",
    "start": "278970",
    "end": "285420"
  },
  {
    "text": "reason about just the code which is unique to the micro services they don't",
    "start": "285420",
    "end": "290790"
  },
  {
    "text": "have to think about the service mesh layer or they don't have to think about communication between micro services so",
    "start": "290790",
    "end": "298320"
  },
  {
    "text": "typically service mesh provides these advanced communication functionalities by inserting a proxy this proxy is going",
    "start": "298320",
    "end": "307260"
  },
  {
    "text": "to intercept traffic going in and out of your applications for service mesh",
    "start": "307260",
    "end": "312630"
  },
  {
    "text": "depending upon where and how you insert your proxy there are various",
    "start": "312630",
    "end": "317760"
  },
  {
    "text": "architectural choices and trade-offs that come with them so let's look at some of the architectural choices you",
    "start": "317760",
    "end": "323910"
  },
  {
    "text": "have on where you can place your proxy so first up is what we call upward node",
    "start": "323910",
    "end": "330870"
  },
  {
    "text": "proxy model this was pioneered by linker",
    "start": "330870",
    "end": "335880"
  },
  {
    "text": "D which is a service smash from buoyant so in this model there is a proxy inserted on the node on which your",
    "start": "335880",
    "end": "344010"
  },
  {
    "text": "applications are running there's only one proxy but node the proxy intercepts",
    "start": "344010",
    "end": "349470"
  },
  {
    "text": "the traffic going in and out of your applications it will provide all the advanced communication functionalities",
    "start": "349470",
    "end": "356280"
  },
  {
    "text": "like load balancing circuit braking retry this model works great for most of",
    "start": "356280",
    "end": "362550"
  },
  {
    "text": "the cases especially if you have some efficient especially you will have some efficient resource sharing for things",
    "start": "362550",
    "end": "369930"
  },
  {
    "text": "like caching but it breaks down when you want to think about one application and",
    "start": "369930",
    "end": "375630"
  },
  {
    "text": "a proxy as one logical entity for security purposes in this model the",
    "start": "375630",
    "end": "381900"
  },
  {
    "text": "proxy cannot assume the identity of the workload and for security purposes",
    "start": "381900",
    "end": "387390"
  },
  {
    "text": "imagine if one application in your node is compromised it might compromise the proxy which might compromise all the",
    "start": "387390",
    "end": "394350"
  },
  {
    "text": "applications running in your log so this model has lots of benefits but it does",
    "start": "394350",
    "end": "400790"
  },
  {
    "text": "provide various or it presents various pitfalls around security so this is what",
    "start": "400790",
    "end": "408920"
  },
  {
    "text": "the second model solves which is what we call the sidecar",
    "start": "408920",
    "end": "415090"
  },
  {
    "text": "sidecar proxy model so in this model the",
    "start": "416220",
    "end": "421750"
  },
  {
    "text": "idea is the proxy is inserted as close to the applications as possible but",
    "start": "421750",
    "end": "427120"
  },
  {
    "text": "still as two separate containers so what that means in kubernetes lab world is",
    "start": "427120",
    "end": "433770"
  },
  {
    "text": "the sidecar proxy is inserted as a container in the same pod in which your",
    "start": "433770",
    "end": "439210"
  },
  {
    "text": "applications are running as they are in the same pod they shared the same",
    "start": "439210",
    "end": "444760"
  },
  {
    "text": "networking namespace so you can reason about the application container in the",
    "start": "444760",
    "end": "450490"
  },
  {
    "text": "sidecar proxy container as one logical entity from your security and network perspective the proxy can assume the",
    "start": "450490",
    "end": "458890"
  },
  {
    "text": "identity of your workload the proxy and the application container they talk over",
    "start": "458890",
    "end": "464560"
  },
  {
    "text": "loopback which is isolated from the rest of the world from an operational point",
    "start": "464560",
    "end": "469630"
  },
  {
    "text": "of view the proxy lives and dies with your application container so there is some simplicity there so this is the",
    "start": "469630",
    "end": "478480"
  },
  {
    "text": "architecture which this is the",
    "start": "478480",
    "end": "485500"
  },
  {
    "text": "architecture which Istria chose and this is the architecture diagram of Sto so in",
    "start": "485500",
    "end": "493990"
  },
  {
    "text": "Sto the sidecar is on void which is shown here in pink as a separate",
    "start": "493990",
    "end": "499660"
  },
  {
    "text": "container in the pod in which your application is deployed on Y is a hyper",
    "start": "499660",
    "end": "505810"
  },
  {
    "text": "performant open source proxy initially developed at left so all the envoys are",
    "start": "505810",
    "end": "511780"
  },
  {
    "text": "intercepting traffic from your application container and they are communicating with the AI other macro",
    "start": "511780",
    "end": "517060"
  },
  {
    "text": "services so the on words together represent what we called the HT of data plane the box in the top which you see",
    "start": "517060",
    "end": "526210"
  },
  {
    "text": "is the history of control plane still has a nice separation between the",
    "start": "526210",
    "end": "531460"
  },
  {
    "text": "control and data plane which gives you benefits of independent scaling for data",
    "start": "531460",
    "end": "538420"
  },
  {
    "text": "in controlled by an independent upgrading of components going for the the sto control plane",
    "start": "538420",
    "end": "544990"
  },
  {
    "text": "itself is distributed so you can upgrade and scale individual components",
    "start": "544990",
    "end": "550060"
  },
  {
    "text": "independent of each other so let me go over what the control plane elements are",
    "start": "550060",
    "end": "555670"
  },
  {
    "text": "of the components our industry as we'll be using them later as we go through the functionalities of Sto so first step is",
    "start": "555670",
    "end": "562990"
  },
  {
    "text": "sto pilot history pilot is the piece which looks at your platform config and",
    "start": "562990",
    "end": "568860"
  },
  {
    "text": "translates it to the configuration which the side cars or envoys understand so",
    "start": "568860",
    "end": "574629"
  },
  {
    "text": "here using kubernetes pilot will look at your services on you know endpoints it will translate and lower the config down",
    "start": "574629",
    "end": "581199"
  },
  {
    "text": "to envoy similarly pilot will consume all your history or specific configuration and",
    "start": "581199",
    "end": "588399"
  },
  {
    "text": "lower it down to the configuration which envoy understands operationally this has an advantage where you are talking and",
    "start": "588399",
    "end": "595600"
  },
  {
    "text": "configuring history o in your platform native language rather than you have dealing with the low-level configuration",
    "start": "595600",
    "end": "601660"
  },
  {
    "text": "of envoy second controller in component is mixa mixa provides three",
    "start": "601660",
    "end": "609399"
  },
  {
    "text": "functionalities in Sto first it provides policy checks what",
    "start": "609399",
    "end": "614439"
  },
  {
    "text": "that means is whenever a request reaches on were before envoy forwards it on to",
    "start": "614439",
    "end": "620259"
  },
  {
    "text": "the sidecar container it concerns the mixer whether the request should be",
    "start": "620259",
    "end": "626199"
  },
  {
    "text": "allowed or if the request is allowed via policy mixer we'll look at your request",
    "start": "626199",
    "end": "632019"
  },
  {
    "text": "attributes like source and destination IP s request URL user agent and then",
    "start": "632019",
    "end": "638829"
  },
  {
    "text": "decide based on policy to allow or disallow the request and then the Envoy",
    "start": "638829",
    "end": "643959"
  },
  {
    "text": "enforces that based on the response from mixer as you can imagine if every",
    "start": "643959",
    "end": "649809"
  },
  {
    "text": "request from envoy goes out-of-band to mixer you will have a huge performance",
    "start": "649809",
    "end": "655300"
  },
  {
    "text": "penalty which is why I always have a built-in cache which store the result of",
    "start": "655300",
    "end": "660639"
  },
  {
    "text": "the policy checks based on request attributes and when the same requests",
    "start": "660639",
    "end": "666040"
  },
  {
    "text": "arrive at own voice with similar attributes it's a cache hit and they don't have to consult the mixer",
    "start": "666040",
    "end": "674050"
  },
  {
    "text": "second functionality which mixer ads is quota enforcement this is very similar",
    "start": "674050",
    "end": "681040"
  },
  {
    "text": "to policy but it is more around resource enforcement like global rate limiting for requests per second or through pups",
    "start": "681040",
    "end": "687930"
  },
  {
    "text": "third mixer is a telemetry sync so all the stats which are currently gathered",
    "start": "687930",
    "end": "694360"
  },
  {
    "text": "and sent from on voice they are reported to mixer and then mixer integrates with a backhand stab system for storing these",
    "start": "694360",
    "end": "702220"
  },
  {
    "text": "stats this is a in great from operational perspective as as as an",
    "start": "702220",
    "end": "709390"
  },
  {
    "text": "operator you have to just integrate your mixer with the right back-end system for stats and you don't have to worry about",
    "start": "709390",
    "end": "715630"
  },
  {
    "text": "the low-level data plane stats myth stats format moving on the third piece",
    "start": "715630",
    "end": "723370"
  },
  {
    "text": "is sto Citadel it used to be called sto earth or sto CA in previous incarnations",
    "start": "723370",
    "end": "729810"
  },
  {
    "text": "this piece is responsible for creating TLS certainties when you have mutual TLS",
    "start": "729810",
    "end": "736720"
  },
  {
    "text": "enabled for data path or control path so this P this component also does cert",
    "start": "736720",
    "end": "745090"
  },
  {
    "text": "rotational from an operational perspective it is great because this is the only piece",
    "start": "745090",
    "end": "750790"
  },
  {
    "text": "which can which needs to integrate with your authority if you if you want to",
    "start": "750790",
    "end": "755950"
  },
  {
    "text": "have some isolation there the fourth piece is sidecar injector this is a very",
    "start": "755950",
    "end": "762490"
  },
  {
    "text": "specific control plane element only applicable in kubernetes world this",
    "start": "762490",
    "end": "768480"
  },
  {
    "text": "looks at the new pods which are being created and automatically injects on",
    "start": "768480",
    "end": "773770"
  },
  {
    "text": "voice before the pods startup this works by registering the sidecar injector as a",
    "start": "773770",
    "end": "783090"
  },
  {
    "text": "admission if I hook and add that enables it to a change the pod configuration",
    "start": "783090",
    "end": "789370"
  },
  {
    "text": "before it starts this is again very beneficial from operations point of view",
    "start": "789370",
    "end": "795100"
  },
  {
    "text": "as you can avoid mistakes where you",
    "start": "795100",
    "end": "800230"
  },
  {
    "text": "don't have sidecars injected in various spots and your security posture is now we can",
    "start": "800230",
    "end": "806360"
  },
  {
    "text": "so this is a quick overview of sto architecture so moving on",
    "start": "806360",
    "end": "813160"
  },
  {
    "text": "sto in essence is a service mesh which provides a bundling of this advanced",
    "start": "813160",
    "end": "819259"
  },
  {
    "text": "capabilities that I just discussed which includes service discovery load balancing at once traffic management",
    "start": "819259",
    "end": "826209"
  },
  {
    "text": "policy and security for handling communication between micro services today in this talk I am going to focus",
    "start": "826209",
    "end": "833389"
  },
  {
    "text": "more on two of these capabilities tracing and matrix so let's see",
    "start": "833389",
    "end": "840369"
  },
  {
    "text": "so it's move on to tracing do we have any questions that need answered we'll",
    "start": "840369",
    "end": "849649"
  },
  {
    "text": "get through fine all right great so let's move on to tracing so tracing",
    "start": "849649",
    "end": "856939"
  },
  {
    "text": "has often been described as one of the most needed and missed functionality in",
    "start": "856939",
    "end": "863629"
  },
  {
    "text": "the micro services world I think of pressing as analogous to module level",
    "start": "863629",
    "end": "869749"
  },
  {
    "text": "logging in the monolith world so creasing is the feature which gives you nice service dependency analysis for the",
    "start": "869749",
    "end": "877459"
  },
  {
    "text": "different micro services it provides you tracking for requests as those requests",
    "start": "877459",
    "end": "885169"
  },
  {
    "text": "are traced through multiple micro services and it is great for identifying",
    "start": "885169",
    "end": "890329"
  },
  {
    "text": "performance bottlenecks and zooming in into a particular request and defining",
    "start": "890329",
    "end": "895429"
  },
  {
    "text": "things like which micro service contributed to the latency for the overall request or which micro service",
    "start": "895429",
    "end": "903819"
  },
  {
    "text": "resulted in a error status code because of which upstream you had more failures",
    "start": "903819",
    "end": "911589"
  },
  {
    "text": "typically tracing works by adding trace IDs and unique span and parent IDs these",
    "start": "911589",
    "end": "920540"
  },
  {
    "text": "IDs are propagated between each micro services via HTTP headers so let's take",
    "start": "920540",
    "end": "928699"
  },
  {
    "text": "an example where micro service a when receives a request it talks to micro",
    "start": "928699",
    "end": "933709"
  },
  {
    "text": "service B and then B talks to C so microservice a will create a route trace",
    "start": "933709",
    "end": "940009"
  },
  {
    "text": "ID and send them as a header to Metro service B micro-service B when is ready",
    "start": "940009",
    "end": "946819"
  },
  {
    "text": "to send that request over to C will transfer these headers and it will create child spans from those routes",
    "start": "946819",
    "end": "953209"
  },
  {
    "text": "pans and then all these spans are reported into a back-end system where you can later go and correlate the",
    "start": "953209",
    "end": "960079"
  },
  {
    "text": "relationship between different services this is great for analysis like I was saying and it kinds of it kind of gives",
    "start": "960079",
    "end": "967310"
  },
  {
    "text": "you a distributed logging mechanism into the micro services per so with Sto we",
    "start": "967310",
    "end": "979100"
  },
  {
    "text": "often say you get tracing out of the box but it's not well explained off and what you are exactly getting in Sto as the",
    "start": "979100",
    "end": "987680"
  },
  {
    "text": "side cars are sitting in in pods next to your application containers and they are",
    "start": "987680",
    "end": "994130"
  },
  {
    "text": "intercepting all the traffic going in and out they can automatically trace all",
    "start": "994130",
    "end": "999949"
  },
  {
    "text": "network requests for you what that means is when our request reaches the side car",
    "start": "999949",
    "end": "1006069"
  },
  {
    "text": "and if the side car so when the request",
    "start": "1006069",
    "end": "1013000"
  },
  {
    "text": "which is the side car and if the request does not have any tracing headers for example it will create the tracing",
    "start": "1013000",
    "end": "1019720"
  },
  {
    "text": "headers before it sends those requests to the application container and then when the application container is ready",
    "start": "1019720",
    "end": "1026048"
  },
  {
    "text": "to make an outbound requests to another micro service it looks at the headers again and if the tracing headers are",
    "start": "1026049",
    "end": "1032740"
  },
  {
    "text": "present it will automatically create child spans for those places so as you",
    "start": "1032740",
    "end": "1038558"
  },
  {
    "text": "can imagine with Sto you don't really have to you don't really have to have",
    "start": "1038559",
    "end": "1045428"
  },
  {
    "text": "your applications a lot of work for creating of these fans",
    "start": "1045429",
    "end": "1050970"
  },
  {
    "text": "all the context handling for creating child and parent in spans works",
    "start": "1050970",
    "end": "1056460"
  },
  {
    "text": "transparently additionally the spans that the sidecars",
    "start": "1056460",
    "end": "1062879"
  },
  {
    "text": "create they are asynchronously reported to a back-end systems so again the",
    "start": "1062879",
    "end": "1068999"
  },
  {
    "text": "applications don't have to do reporting of the spans themselves so let's look at",
    "start": "1068999",
    "end": "1074279"
  },
  {
    "text": "what are the things that envoy adds in these spans so typically the spans have",
    "start": "1074279",
    "end": "1079830"
  },
  {
    "text": "start and end times so with this you can understand how long each request took it",
    "start": "1079830",
    "end": "1087299"
  },
  {
    "text": "has like things like source and destination service names source and destination IP z-- it has a host of HTTP",
    "start": "1087299",
    "end": "1096480"
  },
  {
    "text": "headers like parts URLs user agent requests and response sizes error",
    "start": "1096480",
    "end": "1104789"
  },
  {
    "text": "response codes so as all this information is reported back into a back-end system you get all the",
    "start": "1104789",
    "end": "1111240"
  },
  {
    "text": "visibility you need for understanding what's happening in your micro services a key thing to understand here is as sto",
    "start": "1111240",
    "end": "1119100"
  },
  {
    "text": "is doing this or specifically the side cars are doing this from a network point",
    "start": "1119100",
    "end": "1124860"
  },
  {
    "text": "of view there is no way you can escape this so if for example if your application was doing tracing itself and",
    "start": "1124860",
    "end": "1132149"
  },
  {
    "text": "not sto there might be cases in which the developer forgets to add creasing in",
    "start": "1132149",
    "end": "1137240"
  },
  {
    "text": "this land you will always get tracing requests for any or you will always get",
    "start": "1137240",
    "end": "1143399"
  },
  {
    "text": "traces and spans for any network requests which happens one thing which is very interesting to note here is",
    "start": "1143399",
    "end": "1151759"
  },
  {
    "text": "applications in this land or in sto have to do one particular thing to get full",
    "start": "1152659",
    "end": "1158100"
  },
  {
    "text": "benefit from sto which is they have to propagate the application headers which",
    "start": "1158100",
    "end": "1163200"
  },
  {
    "text": "are present in the incoming requests and transfer them to the outgoing requests this is really important and often less",
    "start": "1163200",
    "end": "1170940"
  },
  {
    "text": "clear so if the applications don't transfer the tracing headers from",
    "start": "1170940",
    "end": "1177539"
  },
  {
    "text": "incoming to outgoing requests sidecars won't be able to create child",
    "start": "1177539",
    "end": "1184869"
  },
  {
    "text": "spans but all the spans which will be created will be routes pants what that means is you will only have tracing for",
    "start": "1184869",
    "end": "1192190"
  },
  {
    "text": "two level of services and never have a tracing across multi-level services like",
    "start": "1192190",
    "end": "1197950"
  },
  {
    "text": "10 or 20 services so I'm I've put two links here to the blocks I wrote one",
    "start": "1197950",
    "end": "1205419"
  },
  {
    "text": "first one is how do you do connect header propagation in your",
    "start": "1205419",
    "end": "1211299"
  },
  {
    "text": "applications if you are contacting AWS services and if you are using them it",
    "start": "1211299",
    "end": "1216519"
  },
  {
    "text": "gets really interesting so this block might help you alleviate some of the pain which I had to go through second is",
    "start": "1216519",
    "end": "1223749"
  },
  {
    "text": "how do you do heading are tracing correctly with G RPC and sto and",
    "start": "1223749",
    "end": "1229749"
  },
  {
    "text": "specifically points and helps you how to do header propagation when you're making",
    "start": "1229749",
    "end": "1235749"
  },
  {
    "text": "outbound calls from GL PC to non gr PC or gr PC applications so moving on just",
    "start": "1235749",
    "end": "1245289"
  },
  {
    "text": "like any open source project sto integrates with various backends for sending and querying of these fans",
    "start": "1245289",
    "end": "1251139"
  },
  {
    "text": "correct little it supports two open source projects zip Kaelin Hager often",
    "start": "1251139",
    "end": "1256509"
  },
  {
    "text": "it's very confusing to understand and evaluate which integration works well or",
    "start": "1256509",
    "end": "1261609"
  },
  {
    "text": "which back-end system is better we recommend using Hagar Hagar is a",
    "start": "1261609",
    "end": "1271379"
  },
  {
    "text": "distributed tracing system for collecting and querying traces it was",
    "start": "1271379",
    "end": "1277989"
  },
  {
    "text": "developed it's an open source project it was initially developed by uber out of",
    "start": "1277989",
    "end": "1284049"
  },
  {
    "text": "the Google dapper paper it has an open tracing compatible API so for most of",
    "start": "1284049",
    "end": "1289629"
  },
  {
    "text": "the sto users you don't care that it is an open tracing compatible API but it is really useful when you add advanced",
    "start": "1289629",
    "end": "1297399"
  },
  {
    "text": "tracing and advanced span written as spans in your application so what we",
    "start": "1297399",
    "end": "1303820"
  },
  {
    "text": "have done is who would the or the months that we had started using sto we use",
    "start": "1303820",
    "end": "1309999"
  },
  {
    "text": "network tracing from sto directly but then we add extra spans",
    "start": "1309999",
    "end": "1316250"
  },
  {
    "text": "like user information or we create more advanced spans like around our logs how",
    "start": "1316250",
    "end": "1323180"
  },
  {
    "text": "long the logs are kept so things like that when you add it's good to use a",
    "start": "1323180",
    "end": "1328370"
  },
  {
    "text": "library which is open dressin compatible so in future you can replace it with you",
    "start": "1328370",
    "end": "1334220"
  },
  {
    "text": "can replace your back-end without changing your applications because creasing is one field where you will",
    "start": "1334220",
    "end": "1340850"
  },
  {
    "text": "have to update or change your applications I recommend doing it the right way and use some open tracing",
    "start": "1340850",
    "end": "1346460"
  },
  {
    "text": "compatible api's yogurt has a very flexible and scalable architecture it",
    "start": "1346460",
    "end": "1353030"
  },
  {
    "text": "has various components for collection and wearing and all of them can scale out independently it provides support",
    "start": "1353030",
    "end": "1362150"
  },
  {
    "text": "for storing the traces in multiple backends currently provides support for",
    "start": "1362150",
    "end": "1367220"
  },
  {
    "text": "Cassandra and elasticsearch so typically if you have many clusters that you want",
    "start": "1367220",
    "end": "1373930"
  },
  {
    "text": "to be that that are sending traces you can have Yaga collector and Jakob",
    "start": "1373930",
    "end": "1380390"
  },
  {
    "text": "queries which are single tenant but Cassandra and elasticsearch both support multi-tenancy so all of the traces can",
    "start": "1380390",
    "end": "1387560"
  },
  {
    "text": "go to the same back-end system lastik search is a very interesting choice here especially if you are sending your logs",
    "start": "1387560",
    "end": "1396230"
  },
  {
    "text": "to elasticsearch fourth thing which is interesting what Yaeger is there is work going on in the open-source community",
    "start": "1396230",
    "end": "1401900"
  },
  {
    "text": "for adding advanced sampling this means you won't be sending all the spans or",
    "start": "1401900",
    "end": "1409160"
  },
  {
    "text": "storing them but B being intelligent about what samples will be sent this",
    "start": "1409160",
    "end": "1414950"
  },
  {
    "text": "helps reduce the storage costs and speed up your querying as you have less things to look at another thing interesting",
    "start": "1414950",
    "end": "1423050"
  },
  {
    "text": "about Hagar is it can actually accept spans and Zipkin format so currently",
    "start": "1423050",
    "end": "1428780"
  },
  {
    "text": "open tracing API provides sanitization around the programming API is which",
    "start": "1428780",
    "end": "1434030"
  },
  {
    "text": "people should use but the actual headers which go on the wire are not standardized so history uses Zipkin format headers",
    "start": "1434030",
    "end": "1442550"
  },
  {
    "text": "which are xb3 - headers Jager collector can those headers and store them so with",
    "start": "1442550",
    "end": "1449750"
  },
  {
    "text": "Jager you actually don't lose the second compatibility if you care for that and with is tio actually you will have to",
    "start": "1449750",
    "end": "1456409"
  },
  {
    "text": "configure here Jager collector to accept zip conformance last two things it is a",
    "start": "1456409",
    "end": "1463250"
  },
  {
    "text": "stain safe project it has a very active open-source community being a CN CF",
    "start": "1463250",
    "end": "1468590"
  },
  {
    "text": "project gives its structure around maintenance releases and security audits",
    "start": "1468590",
    "end": "1473620"
  },
  {
    "text": "last thing which I want to say about Jager as it has a really great UI which can help you understand your micro",
    "start": "1473620",
    "end": "1480710"
  },
  {
    "text": "services better so let's take a look at what the hey-ey looks like the top part",
    "start": "1480710",
    "end": "1486860"
  },
  {
    "text": "of the slide represents a represents the overview of what you get when you do any",
    "start": "1486860",
    "end": "1494059"
  },
  {
    "text": "queries in your rig or UI so the x-axis here is the time the y-axis represents the latency of chryses and the size of",
    "start": "1494059",
    "end": "1502610"
  },
  {
    "text": "the circles you present how many spans are in each trace so I have personally",
    "start": "1502610",
    "end": "1507890"
  },
  {
    "text": "used this mu to understand distributions of mine microservices when this you can",
    "start": "1507890",
    "end": "1514159"
  },
  {
    "text": "kind of see this is a bimodal distribution some of them requests are taking 400",
    "start": "1514159",
    "end": "1519559"
  },
  {
    "text": "plus microseconds and there are a few which take very less this can typically happen when you have a system where you",
    "start": "1519559",
    "end": "1525679"
  },
  {
    "text": "have caches and if there is a cache miss there is a higher penalty I have also",
    "start": "1525679",
    "end": "1530720"
  },
  {
    "text": "used this to understand things like we had a system where requests were all starting at separate times but they used",
    "start": "1530720",
    "end": "1537679"
  },
  {
    "text": "to end at the same time because they used there was a periodic garbage collection or some periodic trigger",
    "start": "1537679",
    "end": "1545030"
  },
  {
    "text": "which is to do cleanups so very useful to understand a global perspective of",
    "start": "1545030",
    "end": "1550340"
  },
  {
    "text": "your micro services the second half of this slide represents the detailed view",
    "start": "1550340",
    "end": "1555549"
  },
  {
    "text": "so in this you can click on individual traces and find out how long the request",
    "start": "1555549",
    "end": "1562010"
  },
  {
    "text": "state you can understand your service dependency so here is your ingress talks to product page product page talks to",
    "start": "1562010",
    "end": "1568640"
  },
  {
    "text": "details you can zoom in on each of those pans and then get the HTTP attributes",
    "start": "1568640",
    "end": "1574280"
  },
  {
    "text": "and the other span attributes are talked about like source and destination services SCP you",
    "start": "1574280",
    "end": "1580490"
  },
  {
    "text": "stdp parts again great for visualizing and understanding each request we have",
    "start": "1580490",
    "end": "1587300"
  },
  {
    "text": "found some interesting cases here where we were able to figure out that we had loops in our",
    "start": "1587300",
    "end": "1593330"
  },
  {
    "text": "micro-services by looking at this view so this is what I wanted to say about",
    "start": "1593330",
    "end": "1602300"
  },
  {
    "text": "creasing next I'll be moving on to matrix and I think we have some questions if we want to another all",
    "start": "1602300",
    "end": "1609920"
  },
  {
    "text": "right yes we have so let's start here in reverse and say are there some use cases",
    "start": "1609920",
    "end": "1618100"
  },
  {
    "text": "that you can highlight for kind of where zip gain might be a choice over Jaeger",
    "start": "1618100",
    "end": "1625130"
  },
  {
    "text": "or well and vice versa I think all",
    "start": "1625130",
    "end": "1631720"
  },
  {
    "text": "Zipkin and yoga are as you said they're solving the same problem I find that so",
    "start": "1631720",
    "end": "1639290"
  },
  {
    "text": "personally when you are evaluating zip converse as if you're being a CNC of",
    "start": "1639290",
    "end": "1645200"
  },
  {
    "text": "project was a big deal for us v1 sure we're set keen was heading I think I am",
    "start": "1645200",
    "end": "1652150"
  },
  {
    "text": "personally not an expert on Zipkin so I don't know what more you get out of Zipkin currently or last when I",
    "start": "1652150",
    "end": "1658520"
  },
  {
    "text": "evaluated actually Giga was solving most of the problems that you wanted out of Sitka cool and we have actually mates in",
    "start": "1658520",
    "end": "1670280"
  },
  {
    "text": "Jones who chimes in inside as an advantage of Zipkin is being able to send spans the Google stack driver",
    "start": "1670280",
    "end": "1676420"
  },
  {
    "text": "that's not possible with Jaeger is it perfect",
    "start": "1676420",
    "end": "1682310"
  },
  {
    "text": "I don't know I mean with I don't know if he got the Giga format supports stripe",
    "start": "1682310",
    "end": "1689330"
  },
  {
    "text": "driver to be honest it's interesting though I mean what I think he's alluding",
    "start": "1689330",
    "end": "1695330"
  },
  {
    "text": "to is the client-side integration is that correct well we'll leave it out",
    "start": "1695330",
    "end": "1701870"
  },
  {
    "text": "there for Mason to respond we have a couple other questions so knowing that",
    "start": "1701870",
    "end": "1707750"
  },
  {
    "text": "envoy has a local cache for routes how make sure how does the mixer component could be aware",
    "start": "1707750",
    "end": "1714200"
  },
  {
    "text": "calls metrics tracing can you repeat that again sure knowing that envoy has a local",
    "start": "1714200",
    "end": "1723739"
  },
  {
    "text": "cache for routes how I'm gonna add a verb how does it make how does the mixer",
    "start": "1723739",
    "end": "1729409"
  },
  {
    "text": "component be aware of calls you know",
    "start": "1729409",
    "end": "1734539"
  },
  {
    "text": "metrics / tracing I see so I think so",
    "start": "1734539",
    "end": "1741109"
  },
  {
    "text": "routes and policy and matrix in tracing they're all separately handled just to",
    "start": "1741109",
    "end": "1747139"
  },
  {
    "text": "be clear so the routes come from pilot and always have a cache of the routes",
    "start": "1747139",
    "end": "1753499"
  },
  {
    "text": "like you are saying policies are handled by mixer and mixer and then the envoys",
    "start": "1753499",
    "end": "1760249"
  },
  {
    "text": "have a separate cache for the policies and then tracing all the envoys report",
    "start": "1760249",
    "end": "1766940"
  },
  {
    "text": "the traces directly to the tracing collector matrix on the other hand all",
    "start": "1766940",
    "end": "1772909"
  },
  {
    "text": "the envoys report to mixer and then mix integrates to the backend I'm not sure",
    "start": "1772909",
    "end": "1780499"
  },
  {
    "text": "if they'll answer it answer answer this question but maybe it will help them getting more get more knowledge okay",
    "start": "1780499",
    "end": "1787119"
  },
  {
    "text": "okay yeah let's move on through a couple of those a deal asked makes a statement",
    "start": "1787119",
    "end": "1795919"
  },
  {
    "text": "I think Hager is open tracing API compatible whereas Zipkin is probably not know I think it is also open tracing",
    "start": "1795919",
    "end": "1804799"
  },
  {
    "text": "API compatible another one is yeah you're deployed as a daemon side to",
    "start": "1804799",
    "end": "1810980"
  },
  {
    "text": "kubernetes or a sidecar neither",
    "start": "1810980",
    "end": "1817730"
  },
  {
    "text": "actually so Jaeger has bench of different components so he got has a Jaeger collector which collects prices",
    "start": "1817730",
    "end": "1823429"
  },
  {
    "text": "then a Hager query for wearing creases and then Cassandra for storage of those places if you are just using Jaeger",
    "start": "1823429",
    "end": "1832960"
  },
  {
    "text": "without any other component so though so this is a Hager eight agent also which",
    "start": "1832960",
    "end": "1838129"
  },
  {
    "text": "can sit on every node as a daemon set but with sto you actually don't need it",
    "start": "1838129",
    "end": "1844309"
  },
  {
    "text": "because all the traces from the site cast can go directly to Jager",
    "start": "1844309",
    "end": "1849460"
  },
  {
    "text": "collector okay let me ask another one do",
    "start": "1849460",
    "end": "1855460"
  },
  {
    "text": "you have some best advice for a newbie on how to debug when they have a problem",
    "start": "1855460",
    "end": "1860800"
  },
  {
    "text": "with this Co ur go gateway virtual service sidecar injection policy for",
    "start": "1860800",
    "end": "1868420"
  },
  {
    "text": "example where should I look at multiple logs disable some part of a component exam those are some examples I say",
    "start": "1868420",
    "end": "1876310"
  },
  {
    "text": "perfect so what we have done is we actually have added some stats for",
    "start": "1876310",
    "end": "1884490"
  },
  {
    "text": "recording some of the history of control plane failures which we saw initially so you can instrument sto pilot and it's",
    "start": "1884490",
    "end": "1892390"
  },
  {
    "text": "your mixer for that for always I would recommend it's normally good to look at",
    "start": "1892390",
    "end": "1898420"
  },
  {
    "text": "the logs and see if you are getting discovery failures for when you are",
    "start": "1898420",
    "end": "1903580"
  },
  {
    "text": "configuring things like what you'll serve a virtual services or gateways I would recommend always use sto CTL",
    "start": "1903580",
    "end": "1910780"
  },
  {
    "text": "rather than cube CTL because sto CTL does CRD validation which cube CTL does",
    "start": "1910780",
    "end": "1917410"
  },
  {
    "text": "not and then sometimes if the CR DS are",
    "start": "1917410",
    "end": "1922450"
  },
  {
    "text": "accepted and you should also look at sto pilot logs which might give you good",
    "start": "1922450",
    "end": "1927610"
  },
  {
    "text": "view into a fewer route route rules are actually applied last thing I would say",
    "start": "1927610",
    "end": "1933700"
  },
  {
    "text": "is Anwar has a debug endpoint or an admin at endpoint so for every side car",
    "start": "1933700",
    "end": "1938950"
  },
  {
    "text": "or for every pot in which you have the side car you can go to port 15,000 and",
    "start": "1938950",
    "end": "1944140"
  },
  {
    "text": "look at your slash clusters slash routes",
    "start": "1944140",
    "end": "1949450"
  },
  {
    "text": "and understand if the routes are actually taking into effect that the last thing is the key thing to gain",
    "start": "1949450",
    "end": "1955690"
  },
  {
    "text": "insights into how sto works and also debug sto itself let's move through a",
    "start": "1955690",
    "end": "1963550"
  },
  {
    "text": "couple more and then we'll keep moving how is it with tracing on HTTP traffic",
    "start": "1963550",
    "end": "1972000"
  },
  {
    "text": "you're right that does not help you currently you can you are mostly tracing HTTP 1 or G RPC or HTTP 2 traffic",
    "start": "1972000",
    "end": "1981010"
  },
  {
    "text": "gotcha when you say header propagation does it specifically refer to HTTP",
    "start": "1981010",
    "end": "1987770"
  },
  {
    "text": "headers only right to piggyback on that okay adding on to that I'm talking",
    "start": "1987770",
    "end": "1994640"
  },
  {
    "text": "specifically the headers that you're tracing system uses so in sto you need",
    "start": "1994640",
    "end": "2001210"
  },
  {
    "text": "to propagate xb3 trace ID xb3 span ID and there's a list of six headers that",
    "start": "2001210",
    "end": "2007270"
  },
  {
    "text": "you need to propagate to get the full dip our service dependency graph okay",
    "start": "2007270",
    "end": "2012970"
  },
  {
    "text": "and let's circle back to the stack driver Google question means in this",
    "start": "2012970",
    "end": "2020080"
  },
  {
    "text": "chain back in in since being able to use type driver UI to view the spans yes and",
    "start": "2020080",
    "end": "2025299"
  },
  {
    "text": "then storing the data is taken care of for you which is handy he says Google provides a four-door",
    "start": "2025299",
    "end": "2032110"
  },
  {
    "text": "container that receives I'm guessing Zipkin traces imports to stop driver",
    "start": "2032110",
    "end": "2039720"
  },
  {
    "text": "that's great I think that makes sense because if you are an operator or if",
    "start": "2039720",
    "end": "2047350"
  },
  {
    "text": "you're managing a cluster and you don't want to manage Cassandra for which is yet another database for storing places",
    "start": "2047350",
    "end": "2054158"
  },
  {
    "text": "and if you want to use minutes services it makes sense you can send traces to track driver okay",
    "start": "2054159",
    "end": "2060760"
  },
  {
    "text": "let me give you one more and then we'll allow you to go on I think we're doing ok on side with my application traces be",
    "start": "2060760",
    "end": "2067330"
  },
  {
    "text": "handled by the Envoy sidecar as well Daniel yes that those traces are created",
    "start": "2067330",
    "end": "2076540"
  },
  {
    "text": "and the spans are created and reported by the sidecar the rest of the components are not involved in that",
    "start": "2076540",
    "end": "2084270"
  },
  {
    "text": "ok I'll pause for now I'll let you go go ahead please continue to add your",
    "start": "2084270",
    "end": "2090790"
  },
  {
    "text": "questions to the Q&A ideally we're having a nice amount of volume here all",
    "start": "2090790",
    "end": "2098260"
  },
  {
    "text": "right thanks Ariel so let's resume so next thing I'll talk about is matrix now",
    "start": "2098260",
    "end": "2104820"
  },
  {
    "text": "all right so matrix and time series data is a great way of knowing what's",
    "start": "2104820",
    "end": "2112420"
  },
  {
    "text": "happening in your application I thing that hasn't changed from monolith to micro-services the problem remains",
    "start": "2112420",
    "end": "2121910"
  },
  {
    "text": "and the solutions remain it's just we have some optimized x rays databases now",
    "start": "2121910",
    "end": "2127550"
  },
  {
    "text": "which we can use it's a great way to understand historically what's happening in your application over time to compare",
    "start": "2127550",
    "end": "2134240"
  },
  {
    "text": "when your applications were healthy to the time your applications are broken it's great for debugging and doing fault",
    "start": "2134240",
    "end": "2140900"
  },
  {
    "text": "analysis and of course you can do some monitoring and alerting set up some uptime not only just for your individual",
    "start": "2140900",
    "end": "2148010"
  },
  {
    "text": "micro services but across your application which is made up of many micro services and on those events you",
    "start": "2148010",
    "end": "2155390"
  },
  {
    "text": "can do things like scale them out add more resources in the list grows on",
    "start": "2155390",
    "end": "2161770"
  },
  {
    "text": "so with sto again just like tracing you get a lot of matrix and a lot of stats",
    "start": "2161770",
    "end": "2170260"
  },
  {
    "text": "this is again a there's not a documentation which says that HT u",
    "start": "2170260",
    "end": "2177290"
  },
  {
    "text": "provides lot of stats but there's not clear documentation and what stats are provided and how they are provided so",
    "start": "2177290",
    "end": "2183020"
  },
  {
    "text": "again let me break this down for you in this T of because it is sitting in your",
    "start": "2183020",
    "end": "2189650"
  },
  {
    "text": "network path and in the data path it has good view into what's happening in your",
    "start": "2189650",
    "end": "2195980"
  },
  {
    "text": "cluster and what's who is talking to what in your micro services architecture so it can create a lot of stats",
    "start": "2195980",
    "end": "2202580"
  },
  {
    "text": "automatically for you so there are two levels or there two types of stats which",
    "start": "2202580",
    "end": "2207590"
  },
  {
    "text": "are currently exported from Sto first is envoy stats envoy has a unique view into",
    "start": "2207590",
    "end": "2214280"
  },
  {
    "text": "what's happening in your pod it can give you some information specific to the pod",
    "start": "2214280",
    "end": "2219680"
  },
  {
    "text": "which no button no other entity can so there are lot of advanced things which",
    "start": "2219680",
    "end": "2224960"
  },
  {
    "text": "on work include reports like request pending how many bytes are buffered in",
    "start": "2224960",
    "end": "2230480"
  },
  {
    "text": "your connection are you seeing some SSL failures again these are from the view of the pod so I have a link there for",
    "start": "2230480",
    "end": "2237470"
  },
  {
    "text": "onward stats over you take a look it might help you characterize the",
    "start": "2237470",
    "end": "2242720"
  },
  {
    "text": "performance of a pod in the fair using Sto so if you are familiar with the you",
    "start": "2242720",
    "end": "2247850"
  },
  {
    "text": "model for monitoring use stands for utilization saturation and errors these",
    "start": "2247850",
    "end": "2254690"
  },
  {
    "text": "stats map very well to that model so you can see you can have alert saying if you",
    "start": "2254690",
    "end": "2262040"
  },
  {
    "text": "have too many requests pending probably your latencies are going to go high so I",
    "start": "2262040",
    "end": "2267380"
  },
  {
    "text": "have we have used them personally for characterizing our applications and sometimes some of these stats are very",
    "start": "2267380",
    "end": "2273170"
  },
  {
    "text": "difficult to obtain from applications themselves but easier to do it from a network point of view so moving on the",
    "start": "2273170",
    "end": "2281150"
  },
  {
    "text": "second level of stats which are reported our mixer level starts so mixer takes a higher view from pods it reports starts",
    "start": "2281150",
    "end": "2289400"
  },
  {
    "text": "from service perspective so mixer will tell you which service is talking to what and what are the latency is",
    "start": "2289400",
    "end": "2296510"
  },
  {
    "text": "specifically you can draw a histogram of latencies between individual micro-services you can easily evaluate P",
    "start": "2296510",
    "end": "2305840"
  },
  {
    "text": "99 and p95 latencies you can send a",
    "start": "2305840",
    "end": "2310850"
  },
  {
    "text": "mixer sense and reports request counts between micro services at the service level it also sends requests by HTTP",
    "start": "2310850",
    "end": "2323210"
  },
  {
    "text": "status codes paths so you can filter on a lot of things if so this model or",
    "start": "2323210",
    "end": "2330020"
  },
  {
    "text": "these type of record metrics I think map really well to the read",
    "start": "2330020",
    "end": "2335420"
  },
  {
    "text": "model of monitoring so red stands for rates error and durations or",
    "start": "2335420",
    "end": "2343790"
  },
  {
    "text": "distributions and those are supposed to be from a service point of view to see if your up times are being met third",
    "start": "2343790",
    "end": "2352250"
  },
  {
    "text": "thing which is important with this to you that it's very easy to add custom stats and these customizations are",
    "start": "2352250",
    "end": "2359000"
  },
  {
    "text": "currently only available for mixer level steps so you can add your own stats that",
    "start": "2359000",
    "end": "2364130"
  },
  {
    "text": "you want to be that you want to monitor and collect from the service perspective and this is a configuration change and",
    "start": "2364130",
    "end": "2371590"
  },
  {
    "text": "mixer will start reporting them forth just like tracing they are lot of",
    "start": "2371590",
    "end": "2378380"
  },
  {
    "text": "options for sending and collecting stats and their various integrations with lists you the stats D the stag driver",
    "start": "2378380",
    "end": "2386360"
  },
  {
    "text": "which was mentioned which is an attractive solution for both tracing and telemetry and then there is Prometheus",
    "start": "2386360",
    "end": "2393190"
  },
  {
    "text": "so I just like tracing these options are",
    "start": "2393190",
    "end": "2400820"
  },
  {
    "text": "sometimes confusing and it's difficult to evaluate the benefits across them so",
    "start": "2400820",
    "end": "2407120"
  },
  {
    "text": "I recommend using Prometheus Prometheus is a highly optimized time",
    "start": "2407120",
    "end": "2414830"
  },
  {
    "text": "series database for collecting stats and for querying them it has an interesting",
    "start": "2414830",
    "end": "2421070"
  },
  {
    "text": "model which is different from various other architectures so it has a pull based model what this means is the",
    "start": "2421070",
    "end": "2426920"
  },
  {
    "text": "Prometheus server pulls or scrapes stats from applications as specific endpoints",
    "start": "2426920",
    "end": "2433640"
  },
  {
    "text": "like slash metrics compared to some of the other models like stats D which is the push model where you have agents",
    "start": "2433640",
    "end": "2440210"
  },
  {
    "text": "which are going to export these metrics to the start's D back-end server from",
    "start": "2440210",
    "end": "2446960"
  },
  {
    "text": "operational point of view there are various trade offs but a pull based model is still easier as each application is responsible for exposing",
    "start": "2446960",
    "end": "2455210"
  },
  {
    "text": "its own stats it has a very flexible query API",
    "start": "2455210",
    "end": "2460870"
  },
  {
    "text": "Prometheus API is more or less becoming the standard API for now queering stats",
    "start": "2460870",
    "end": "2467810"
  },
  {
    "text": "for applying functions it has a large repository of functions and",
    "start": "2467810",
    "end": "2473840"
  },
  {
    "text": "transformations you can do at the server side before the stats are you put it",
    "start": "2473840",
    "end": "2478880"
  },
  {
    "text": "back to you it has a very efficient storage model for chunking and actually",
    "start": "2478880",
    "end": "2484370"
  },
  {
    "text": "I think they've started supporting compression all that was going on to downsample and reduce the storage",
    "start": "2484370",
    "end": "2491720"
  },
  {
    "text": "further there are various integrations for dashboards for creating charts and",
    "start": "2491720",
    "end": "2499430"
  },
  {
    "text": "visualizing them so I would actually recommend using a phoner which is another open source tool for",
    "start": "2499430",
    "end": "2505370"
  },
  {
    "text": "dashboarding and creating charts so normally people use Prometheus for tell",
    "start": "2505370",
    "end": "2512339"
  },
  {
    "text": "acting all the stats and then they have Gras fauna which integrates very easily",
    "start": "2512339",
    "end": "2517680"
  },
  {
    "text": "if it's Prometheus and use Griffin or for dashboarding charting and setting",
    "start": "2517680",
    "end": "2523319"
  },
  {
    "text": "alerts so the graph on the right is a refinement chart which is currently available from the sto community this",
    "start": "2523319",
    "end": "2531739"
  },
  {
    "text": "gives you service level stats which I was just talking about mixer exports",
    "start": "2531739",
    "end": "2538499"
  },
  {
    "text": "another great benefit of Prometheus it has a lot of exporters so it has various",
    "start": "2538499",
    "end": "2544259"
  },
  {
    "text": "integrations into Kasana databases like Cassandra or console which already export Prometheus",
    "start": "2544259",
    "end": "2551369"
  },
  {
    "text": "level stats it also has a superb aha for monitoring kubernetes itself there's",
    "start": "2551369",
    "end": "2559380"
  },
  {
    "text": "native integration through Prometheus starts so take a look at those links it might help you see if you have some",
    "start": "2559380",
    "end": "2566279"
  },
  {
    "text": "other systems which you have not written that the stats and the correct format of",
    "start": "2566279",
    "end": "2573690"
  },
  {
    "text": "those stats might be available for you here these integrations last again just like Hegel it's en safe project it has a",
    "start": "2573690",
    "end": "2580769"
  },
  {
    "text": "strong open-source community I think prompt con is about to start in the next",
    "start": "2580769",
    "end": "2585989"
  },
  {
    "text": "week or so there's a lot of structure around releases and maintenance and being a cien safe project helps maintain",
    "start": "2585989",
    "end": "2593130"
  },
  {
    "text": "that another thing which I want to mention going forward here or about",
    "start": "2593130",
    "end": "2598859"
  },
  {
    "text": "prometheus is Prometheus is great if you want to monitor one or two or three clusters there few restrictions or",
    "start": "2598859",
    "end": "2606380"
  },
  {
    "text": "downsides to Prometheus or it's an architectural choice that Prometheus made I should say so Prometheus by",
    "start": "2606380",
    "end": "2612900"
  },
  {
    "text": "default is single tenant you cannot use Prometheus from multiple clusters if you want to entice eleisha second Prometheus",
    "start": "2612900",
    "end": "2621719"
  },
  {
    "text": "the open source Prometheus by default will only support on disk local on disk",
    "start": "2621719",
    "end": "2628259"
  },
  {
    "text": "storage of samples that means if you have three clusters and three Prometheus instances you will have to manage three",
    "start": "2628259",
    "end": "2635670"
  },
  {
    "text": "separate stateful systems three separate disks and again handle upgrades and whatnot for all of them individually so",
    "start": "2635670",
    "end": "2641910"
  },
  {
    "text": "this is where the next project jumped on we'll talk about helps which is cortex cortex is a open-source",
    "start": "2641910",
    "end": "2649350"
  },
  {
    "text": "project which provides multi-tenancy and long-term remote storage for Prometheus",
    "start": "2649350",
    "end": "2655110"
  },
  {
    "text": "this was built at V works and is currently open sourced so the first",
    "start": "2655110",
    "end": "2661710"
  },
  {
    "text": "benefit you get from cortex is you can have long-term storage to manage",
    "start": "2661710",
    "end": "2667290"
  },
  {
    "text": "services instead of on disk so with cortex you can use AWS DynamoDB you can",
    "start": "2667290",
    "end": "2672930"
  },
  {
    "text": "use BigTable which is a Google managed highly optimized database or you can",
    "start": "2672930",
    "end": "2678270"
  },
  {
    "text": "have Cassandra if you manage it to yourself for some reason second thing which is great about the cortex is it",
    "start": "2678270",
    "end": "2685530"
  },
  {
    "text": "provides a scalable Prometheus query API another problem which is often seen with",
    "start": "2685530",
    "end": "2690600"
  },
  {
    "text": "Prometheus as your as the number of samples grow or beyond a certain size",
    "start": "2690600",
    "end": "2696000"
  },
  {
    "text": "it's pretty scalable up to a point but after that the queries start to slow down in the kotas cortex architecture",
    "start": "2696000",
    "end": "2702990"
  },
  {
    "text": "the storage and query paths are separate and the database is also is handled",
    "start": "2702990",
    "end": "2711810"
  },
  {
    "text": "separately so you can scale the query path of cortex independently based on",
    "start": "2711810",
    "end": "2718110"
  },
  {
    "text": "your needs it provides multi-tenancy so you can have all the various clusters",
    "start": "2718110",
    "end": "2725850"
  },
  {
    "text": "that can report stats into the same cortex multi-tenant system so typically",
    "start": "2725850",
    "end": "2732390"
  },
  {
    "text": "what you do in this case is you run Prometheus any all of your clusters but the Prometheus is are configured as",
    "start": "2732390",
    "end": "2739020"
  },
  {
    "text": "stateless services Prometheus supports remote storage API so you can figure",
    "start": "2739020",
    "end": "2745950"
  },
  {
    "text": "Prometheus to talk all the Prometheus is to talk to one cortex and then that cortex handles the right banking and",
    "start": "2745950",
    "end": "2753240"
  },
  {
    "text": "storage and multi-tenancy it stores them into the databases I just mentioned similarly although on the query side it",
    "start": "2753240",
    "end": "2760710"
  },
  {
    "text": "provides the right Prometheus API is of Prometheus compatible API is to take the samples out from for the right tenant as",
    "start": "2760710",
    "end": "2768170"
  },
  {
    "text": "you can imagine it's much easier to manage because of the architecture I",
    "start": "2768170",
    "end": "2773700"
  },
  {
    "text": "just mentioned compared to managing 20 stateful services with disks lastly",
    "start": "2773700",
    "end": "2779790"
  },
  {
    "text": "is work going on I think they are proposing very soon that permit that",
    "start": "2779790",
    "end": "2784980"
  },
  {
    "text": "codex should be added as a CN CF project all the benefits that Jaeger and Prometheus and kubernetes got from being",
    "start": "2784980",
    "end": "2792150"
  },
  {
    "text": "a CN safe project codex can also receive with that the last thing I want to say",
    "start": "2792150",
    "end": "2798990"
  },
  {
    "text": "is if you ever get more from Sto these are the following recommendations first",
    "start": "2798990",
    "end": "2805350"
  },
  {
    "text": "he was 0-8 was released like I think two two and a half weeks ago there was lot",
    "start": "2805350",
    "end": "2811020"
  },
  {
    "text": "of work done in the open source community for stability of the core and",
    "start": "2811020",
    "end": "2816060"
  },
  {
    "text": "four control plan scalability which had been an issue for the last few releases on yv2 api's are now used on were V Pugh",
    "start": "2816060",
    "end": "2825180"
  },
  {
    "text": "API is helped a lot for scalability because they use the new G RPC brisk",
    "start": "2825180",
    "end": "2831980"
  },
  {
    "text": "subscription mechanism for receiving route rules and updates rather than the query mechanism they had and it I think",
    "start": "2831980",
    "end": "2839820"
  },
  {
    "text": "they have migrated to the new eight years which is the aggregated query",
    "start": "2839820",
    "end": "2845190"
  },
  {
    "text": "services third thing the new stov one",
    "start": "2845190",
    "end": "2850260"
  },
  {
    "text": "alpha three networking api's are now available in zero eight from the configuration and manageability",
    "start": "2850260",
    "end": "2856110"
  },
  {
    "text": "perspective it's much easier to understand and reason about Sto which will service in the various route routes",
    "start": "2856110",
    "end": "2862830"
  },
  {
    "text": "you have compared to the policy is available in compared to compared to the route rules configuration system and in",
    "start": "2862830",
    "end": "2870600"
  },
  {
    "text": "p1 alpha three last we are active users of sto and raspberry mesh we will be",
    "start": "2870600",
    "end": "2877350"
  },
  {
    "text": "more than happy to talk in greater depth please feel free to reach out to me at needed at a spur measured IO or take a",
    "start": "2877350",
    "end": "2883980"
  },
  {
    "text": "look at our blogs it might help you say if some clicks and save some time if you",
    "start": "2883980",
    "end": "2889860"
  },
  {
    "text": "are experiencing the same thing that we experienced or you are you have similar problems so with that I think I'm done",
    "start": "2889860",
    "end": "2898290"
  },
  {
    "text": "for the slides and we can move back to Q&A are you so much Nina Raj so a couple",
    "start": "2898290",
    "end": "2906240"
  },
  {
    "text": "questions we have from the group really high level somebody asked about",
    "start": "2906240",
    "end": "2913260"
  },
  {
    "text": "probably a question better suited to Matt Klein from lift but somebody's",
    "start": "2913260",
    "end": "2919800"
  },
  {
    "text": "curious about the usage of C++ to write envoy as opposed to Golan",
    "start": "2919800",
    "end": "2929150"
  },
  {
    "text": "just a conduit and if you have any insights as to why that decision was",
    "start": "2929150",
    "end": "2936150"
  },
  {
    "text": "made so I don't know what Matt clients choices were and considerations were but",
    "start": "2936150",
    "end": "2941730"
  },
  {
    "text": "I can tell you if I had to do this why I would use C++ I think the requirements for a sidecar",
    "start": "2941730",
    "end": "2948300"
  },
  {
    "text": "proxy are much stringent and stricter compared to any other proxy so it has to",
    "start": "2948300",
    "end": "2954240"
  },
  {
    "text": "be high performant as you are inserting proxy in every layer in every manager service secondly it has to be lighter",
    "start": "2954240",
    "end": "2961500"
  },
  {
    "text": "weight so I think with modern C++ you can achieve high performance easily",
    "start": "2961500",
    "end": "2966990"
  },
  {
    "text": "which might not be available to you with go especially with the dynamic memory allocation forego I think and second",
    "start": "2966990",
    "end": "2975180"
  },
  {
    "text": "might be the comfort level they had with the languages which again like you said",
    "start": "2975180",
    "end": "2980460"
  },
  {
    "text": "is a more appropriate question for my time and somebody chimed in Mason Jones",
    "start": "2980460",
    "end": "2989670"
  },
  {
    "text": "and highlighted that conduits actually will it last yes conduit is not as that's right yeah",
    "start": "2989670",
    "end": "2998850"
  },
  {
    "text": "he said well some of it is in go mostly in Ross all right what will move off of",
    "start": "2998850",
    "end": "3004460"
  },
  {
    "text": "that topic and Emanuel cracky asked can we instrument the service itself by",
    "start": "3004460",
    "end": "3010970"
  },
  {
    "text": "adding trace points even when using this do yes so what I recommend actually and",
    "start": "3010970",
    "end": "3020210"
  },
  {
    "text": "this is useful is because the sidecar will automatically insert tracing",
    "start": "3020210",
    "end": "3026600"
  },
  {
    "text": "headers for you so use the open tracing API is to dig the span context out add",
    "start": "3026600",
    "end": "3032930"
  },
  {
    "text": "all the spans you want or create child spans from it before you make further",
    "start": "3032930",
    "end": "3039080"
  },
  {
    "text": "downstream or upstream requests so this is very helpful and very useful like our",
    "start": "3039080",
    "end": "3045140"
  },
  {
    "text": "case we were adding and eggs for user information like user",
    "start": "3045140",
    "end": "3050240"
  },
  {
    "text": "IDs which sidecar does not have okay",
    "start": "3050240",
    "end": "3056120"
  },
  {
    "text": "awesome great question from Stephano Becky is it possible or easy to build",
    "start": "3056120",
    "end": "3062210"
  },
  {
    "text": "clusters where sto is present but not used by all services ergo sum' services",
    "start": "3062210",
    "end": "3067970"
  },
  {
    "text": "use k kubernetes native service discovery and some others are using an",
    "start": "3067970",
    "end": "3073280"
  },
  {
    "text": "sto laser discovery a great question I think it still is built around that",
    "start": "3073280",
    "end": "3078590"
  },
  {
    "text": "model that you can slowly opt into the service mesh without all your services being in the mesh so currently if you",
    "start": "3078590",
    "end": "3086780"
  },
  {
    "text": "use sidecar injector you can enable namespaces on which the services will be",
    "start": "3086780",
    "end": "3093380"
  },
  {
    "text": "or in which the site cuts will be injected even if you have enabled them in your namespace for specific",
    "start": "3093380",
    "end": "3100330"
  },
  {
    "text": "deployments you can annotate the pods and given the injection of sidecars",
    "start": "3100330",
    "end": "3105460"
  },
  {
    "text": "secondly if you are actually using the manual process for injecting sidecars you can always opt in and it's perfectly",
    "start": "3105460",
    "end": "3113150"
  },
  {
    "text": "fine to have services which are in the mesh and services not in the mesh and they can happily coexist you just have",
    "start": "3113150",
    "end": "3119270"
  },
  {
    "text": "to realize that the benefits that you get from mesh you won't get from the services a lot l - it's not amiss",
    "start": "3119270",
    "end": "3130340"
  },
  {
    "text": "attendee asks do you mind suggesting any language level compiled binaries or go",
    "start": "3130340",
    "end": "3136730"
  },
  {
    "text": "PHP molding plugins or libraries with Jaykar that do not need to insert a lot",
    "start": "3136730",
    "end": "3144080"
  },
  {
    "text": "of instrumentation code into the application is he asking for PHP",
    "start": "3144080",
    "end": "3150560"
  },
  {
    "text": "libraries did I hear that right that's what they mention here PHP as molten so",
    "start": "3150560",
    "end": "3157870"
  },
  {
    "text": "I am not familiar with that okay I'm sorry anonymous we're going to dig a",
    "start": "3157870",
    "end": "3166610"
  },
  {
    "text": "little bit further back and we have in the previous section on metrics we had",
    "start": "3166610",
    "end": "3172960"
  },
  {
    "text": "tracing a deal had asked tracing collectors or is tracing collectors were",
    "start": "3172960",
    "end": "3179180"
  },
  {
    "text": "deployed with is the urban envoy is he asking our tracing",
    "start": "3179180",
    "end": "3185010"
  },
  {
    "text": "collectors deployed with yes so no that's the thing so you have to",
    "start": "3185010",
    "end": "3191430"
  },
  {
    "text": "have your own tracing back-end system which you want to use so envoys in sight",
    "start": "3191430",
    "end": "3198359"
  },
  {
    "text": "if you have the right configuration they will start reporting the traces you have to have the service like the Jaeger",
    "start": "3198359",
    "end": "3206220"
  },
  {
    "text": "service or Zipkin service which will be the collection point for your traces and then you will have to have a back-end",
    "start": "3206220",
    "end": "3213329"
  },
  {
    "text": "database for storage of your date of your traces like Cassandra elasticsearch",
    "start": "3213329",
    "end": "3218670"
  },
  {
    "text": "or stack driver okay great and one last",
    "start": "3218670",
    "end": "3224040"
  },
  {
    "text": "one which is can you speak a little bit to the overhead of running a service",
    "start": "3224040",
    "end": "3230849"
  },
  {
    "text": "mesh on the infrastructure a great question I mean definitely it's not free",
    "start": "3230849",
    "end": "3237329"
  },
  {
    "text": "you are adding proxies in both ingress and egress paths in your communication I",
    "start": "3237329",
    "end": "3243829"
  },
  {
    "text": "think currently the open source community was saying there is a 30 to 40 percent overhead when you are running",
    "start": "3243829",
    "end": "3251550"
  },
  {
    "text": "sto or onwards there's a lot of work going on to reduce that overhead but I",
    "start": "3251550",
    "end": "3257310"
  },
  {
    "text": "think in reality you will always have to have this trade-off in your mind you are",
    "start": "3257310",
    "end": "3264089"
  },
  {
    "text": "getting a lot of benefits and you have to sacrifice at least a little bit of the performance those benefits in my",
    "start": "3264089",
    "end": "3270810"
  },
  {
    "text": "mind outweigh the performance penalties now the performance cannot be outrageously bad but the benefits are so",
    "start": "3270810",
    "end": "3278880"
  },
  {
    "text": "much and as a developer myself it reduces my load by a lot as the end for",
    "start": "3278880",
    "end": "3284790"
  },
  {
    "text": "an operator it's so much beneficial that you might be able to live with some of the penalties",
    "start": "3284790",
    "end": "3291828"
  },
  {
    "text": "just the clarified peru's asking if what you said was 20 to 30% over yes great",
    "start": "3295350",
    "end": "3304980"
  },
  {
    "text": "so if there are no more questions we're gonna go ahead and wrap this up I want",
    "start": "3304980",
    "end": "3310110"
  },
  {
    "text": "to thank me Rajesh for sharing all this great information with us today and as I",
    "start": "3310110",
    "end": "3315360"
  },
  {
    "text": "mentioned at the beginning look for a an email with a link to this recording and",
    "start": "3315360",
    "end": "3322500"
  },
  {
    "text": "we hope to see you again next week on Tuesday when we handle the next CN CF",
    "start": "3322500",
    "end": "3329010"
  },
  {
    "text": "webinar thank you so much for attending and until next week thank you goodbye",
    "start": "3329010",
    "end": "3338630"
  }
]