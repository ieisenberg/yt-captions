[
  {
    "text": "hey everyone welcome to securing your container native supply chain with salsa at github and techton",
    "start": "80",
    "end": "6880"
  },
  {
    "text": "hi everyone i'm laurent i'm a security engineer at google i work on the open ssf scorecard project and supply chain",
    "start": "7200",
    "end": "14920"
  },
  {
    "text": "security and i'm priya i'm a software engineer at chain guard i work on open source projects like six door and",
    "start": "14920",
    "end": "21119"
  },
  {
    "text": "techton which we'll be talking about today and a bunch of other open source projects as well",
    "start": "21119",
    "end": "28160"
  },
  {
    "text": "so you've probably heard a lot about software supply chain security in the news recently",
    "start": "29199",
    "end": "35280"
  },
  {
    "text": "as the graph shows attacks are on the rise and it's becoming really important to start to understand how you can",
    "start": "35280",
    "end": "41920"
  },
  {
    "text": "secure your supply chain so let's take a recent attack as an example",
    "start": "41920",
    "end": "46960"
  },
  {
    "text": "the npm caller package attack the attack happened just a few months ago and one of the maintainers decided",
    "start": "46960",
    "end": "54000"
  },
  {
    "text": "to add an infinite loop in the package the code was never changed in the repository itself",
    "start": "54000",
    "end": "60399"
  },
  {
    "text": "the maintainer pushed directly to the npm registry around 9 million projects depend on this",
    "start": "60399",
    "end": "66560"
  },
  {
    "text": "package either directly or as a transitive dependency which is really scary",
    "start": "66560",
    "end": "72320"
  },
  {
    "text": "as a developer it might be intimidating to know where to start when it comes to securing your supply chain",
    "start": "72320",
    "end": "79119"
  },
  {
    "text": "so in this presentation we'll discuss practical steps you can take to start improving the security of your",
    "start": "79119",
    "end": "85840"
  },
  {
    "text": "supply chain so the good news is that if you already",
    "start": "85840",
    "end": "91119"
  },
  {
    "text": "use tacton or github workflows today there are a few easy steps that you can take to start securing your pipelines",
    "start": "91119",
    "end": "96960"
  },
  {
    "text": "today so that's what we're going to be talking about in this talk let's jump right into it",
    "start": "96960",
    "end": "102640"
  },
  {
    "text": "so a quick agenda for today when discussing supply chain security it's important to have some metrics or a",
    "start": "102640",
    "end": "108720"
  },
  {
    "text": "framework to actually quantify how secure your supply chain is so that's why we're going to start by talking about salsa which is the framework we're",
    "start": "108720",
    "end": "115439"
  },
  {
    "text": "going to be using to determine how secure our for our supply chains actually are",
    "start": "115439",
    "end": "120719"
  },
  {
    "text": "then we'll jump into talking about six door which is a project we use for signing and verification",
    "start": "120719",
    "end": "125840"
  },
  {
    "text": "and at the end of the talk we'll talk about how we bring salsa and sig stores together to achieve uh higher security",
    "start": "125840",
    "end": "132000"
  },
  {
    "text": "levels in both tecton and github workflows with demos for each of those platforms",
    "start": "132000",
    "end": "138720"
  },
  {
    "text": "so what is salsa salsa is an acronym that stands for supply chain levels for software",
    "start": "140640",
    "end": "146879"
  },
  {
    "text": "artifacts you can think of salsa as a framework or a checklist",
    "start": "146879",
    "end": "151920"
  },
  {
    "text": "basically a list of things that you want in your supply chain depending on how secure you want it to be",
    "start": "151920",
    "end": "158560"
  },
  {
    "text": "salsa is not a tool or a service it's more a set of guiding principles",
    "start": "158560",
    "end": "163920"
  },
  {
    "text": "some key principles about salsa include the following artifacts should be signed an artifact",
    "start": "163920",
    "end": "171200"
  },
  {
    "text": "should also include metadata also called salsa provenance about who and how the artifacts are",
    "start": "171200",
    "end": "177760"
  },
  {
    "text": "created now you might be wondering why we don't just use signatures",
    "start": "177760",
    "end": "185000"
  },
  {
    "text": "and the reason is signatures do not protect against all sorts of attack",
    "start": "185599",
    "end": "190640"
  },
  {
    "text": "that happen on the supply chain let's take again the example of the npm color attack",
    "start": "190640",
    "end": "196080"
  },
  {
    "text": "as we said earlier the npm maintainer pushed directly to the npm registry so the maintainer had access to the",
    "start": "196080",
    "end": "202080"
  },
  {
    "text": "credentials the maintainer would probably have access to the signing key as well if signatures had been used",
    "start": "202080",
    "end": "208720"
  },
  {
    "text": "salsa provenance solved this problem by including who created an artifact",
    "start": "208720",
    "end": "213920"
  },
  {
    "text": "and what source code was used to create it",
    "start": "213920",
    "end": "218319"
  },
  {
    "text": "so in a nutshell salsa provenance provide the following benefits it allows tracing an artifact back to",
    "start": "219920",
    "end": "227360"
  },
  {
    "text": "its origin including the exact source code repository name hash commit and branch",
    "start": "227360",
    "end": "235200"
  },
  {
    "text": "so the salsa framework has four levels ranging from level one to level four it's meant to be incrementally adoptable",
    "start": "236560",
    "end": "244159"
  },
  {
    "text": "and it's a set of security guidelines established by industry consensus level one is supposed to be the most",
    "start": "244159",
    "end": "250080"
  },
  {
    "text": "achievable level while level four represents the ideal end state level four can be difficult to achieve",
    "start": "250080",
    "end": "256160"
  },
  {
    "text": "so levels two and three are meant to be stepping stones um on your path to achieving salsa level four in your so in",
    "start": "256160",
    "end": "262320"
  },
  {
    "text": "your secure supply chain um depending on your build system you can start making progress towards salsa",
    "start": "262320",
    "end": "267759"
  },
  {
    "text": "level 2 and salsa level 3 today which is what we're going to be talking about",
    "start": "267759",
    "end": "273199"
  },
  {
    "text": "so a quick overview of salsa level 1 salsa level 1 is the most achievable level with only two requirements the",
    "start": "273199",
    "end": "279280"
  },
  {
    "text": "first is that your build process is scripted and the second is that you have some kind of provenance available some",
    "start": "279280",
    "end": "285199"
  },
  {
    "text": "sort of metadata about how your artifact was generated and maybe what also went into it",
    "start": "285199",
    "end": "292400"
  },
  {
    "text": "salsa level two builds on top of salsa level 1 and has some additional requirements so this is where we start",
    "start": "292720",
    "end": "298080"
  },
  {
    "text": "getting a little bit more secure salsa level 2 requires that your source code is in a version control system like",
    "start": "298080",
    "end": "304000"
  },
  {
    "text": "github hopefully you're already doing that it also requires that your builds are",
    "start": "304000",
    "end": "309759"
  },
  {
    "text": "built in a service and that providence is service generated provenance should also be authenticated",
    "start": "309759",
    "end": "316080"
  },
  {
    "text": "which means it needs to be signed so that end users can verify that the providence for the artifact they're looking at is coming from where they",
    "start": "316080",
    "end": "322479"
  },
  {
    "text": "expect it to come from so now that we've talked about the framework we're going to be using to",
    "start": "322479",
    "end": "328880"
  },
  {
    "text": "evaluate how secure supply chain pipelines are how are we actually going to start implementing these salsa",
    "start": "328880",
    "end": "334479"
  },
  {
    "text": "requirements so this is where six store comes into play and both of our uh demos involving",
    "start": "334479",
    "end": "341759"
  },
  {
    "text": "github and techton later in this talk are going to be using six door under the hood so six store is an open source project",
    "start": "341759",
    "end": "348560"
  },
  {
    "text": "aimed at making signing and verifying software free easy and accessible and how does six store accomplish this",
    "start": "348560",
    "end": "355520"
  },
  {
    "text": "it provides a few tools and services which are available for public use",
    "start": "355520",
    "end": "360880"
  },
  {
    "text": "and the first tool that it provides is called cosign which is a cli tool and library used for signing and verifying",
    "start": "360880",
    "end": "367199"
  },
  {
    "text": "software artifacts this could be things like oci images s-bombs or provenance",
    "start": "367199",
    "end": "373280"
  },
  {
    "text": "one of the services that cycler provides is called focio which is a certificate authority service that issues",
    "start": "373280",
    "end": "379039"
  },
  {
    "text": "short-lived code signing certificates it also provides a service called record",
    "start": "379039",
    "end": "384080"
  },
  {
    "text": "which is an append only transparency log for storing signatures certificates and providence",
    "start": "384080",
    "end": "390240"
  },
  {
    "text": "but why do we use six store instead of traditional signing methods what kind of problems do the six store actually solve",
    "start": "390240",
    "end": "397600"
  },
  {
    "text": "so the main benefit of six store is that it eliminates the key management problem so we have like a diagram of a",
    "start": "397600",
    "end": "404160"
  },
  {
    "text": "traditional signing situation here where we have a maintainer who holds onto a public private key pair signs their",
    "start": "404160",
    "end": "410960"
  },
  {
    "text": "piece of software and then distribute distributes it to an end user the end user is responsible for verifying that",
    "start": "410960",
    "end": "417520"
  },
  {
    "text": "software before they actually use it but there's a few issues in this scenario first it requires that the",
    "start": "417520",
    "end": "424560"
  },
  {
    "text": "maintainer holds on to the private key and keeps it safe for long periods of time potentially years on end which can",
    "start": "424560",
    "end": "430960"
  },
  {
    "text": "be really difficult what if that private key get lost or ends up in the wrong hands it's really hard to then",
    "start": "430960",
    "end": "438000"
  },
  {
    "text": "revoke old signatures it also means that the maintainer is responsible for distributing the public",
    "start": "438000",
    "end": "443360"
  },
  {
    "text": "key to end users figuring out how end users can get their hands on it a lot of times instead of verifying",
    "start": "443360",
    "end": "449120"
  },
  {
    "text": "signatures and users just choose to use the software without doing the verification because it's not easy to do",
    "start": "449120",
    "end": "454319"
  },
  {
    "text": "the verification so this is where six store comes in it solves this key management problem so",
    "start": "454319",
    "end": "459680"
  },
  {
    "text": "that maintainers no longer have to keep track of private or public keys but how does this work",
    "start": "459680",
    "end": "465680"
  },
  {
    "text": "so you can see we have this updated diagram now which includes the six store tools and services that i had mentioned",
    "start": "465680",
    "end": "471520"
  },
  {
    "text": "earlier so instead of holding on to a private key pair the maintainer actually just",
    "start": "471520",
    "end": "476879"
  },
  {
    "text": "has to request a certificate from the full co certificate authority this certificate is a code signing",
    "start": "476879",
    "end": "482479"
  },
  {
    "text": "certificate and contains and is bound to the identity of the maintainer in this case it's the",
    "start": "482479",
    "end": "488560"
  },
  {
    "text": "maintainer's email address the certificate also embeds the public key that was used to sign this uh that",
    "start": "488560",
    "end": "496000"
  },
  {
    "text": "was used to sign sorry that is associated with the private key that was used to sign the",
    "start": "496000",
    "end": "501440"
  },
  {
    "text": "artifact and the signature is bundled along with a certificate and stored in the record transparency log",
    "start": "501440",
    "end": "507520"
  },
  {
    "text": "this is really convenient because the log is public so when the end user attempts to verify the software artifact",
    "start": "507520",
    "end": "513680"
  },
  {
    "text": "they can use the cosine cli tool which under the hood will retrieve the correct entry from recore and do all the",
    "start": "513680",
    "end": "519279"
  },
  {
    "text": "verification for you all the end user has to do is decide if they trust the identity that is embedded in the",
    "start": "519279",
    "end": "525519"
  },
  {
    "text": "certificate so the nice thing about focio is that",
    "start": "525519",
    "end": "531360"
  },
  {
    "text": "both people and systems can request full co certificates people can prove their identity by signing in with an email",
    "start": "531360",
    "end": "537519"
  },
  {
    "text": "address so this would be like a sign in with github or sign in with google type flow that you might have seen on different websites yourself",
    "start": "537519",
    "end": "544320"
  },
  {
    "text": "systems can also authenticate and request full seo certificates so workloads can use the spf specification",
    "start": "544320",
    "end": "551440"
  },
  {
    "text": "and there's also support for using kubernetes service accounts and github actions invocations so we're going to be",
    "start": "551440",
    "end": "557120"
  },
  {
    "text": "using these last two in our demos later on in this talk",
    "start": "557120",
    "end": "562480"
  },
  {
    "text": "so how do we bring salsa and six store together to actually start securing some build systems so we'll take tecton first",
    "start": "562480",
    "end": "568320"
  },
  {
    "text": "and we'll talk about github after so what is tekton this is a big question and there's a lot to techton so in the",
    "start": "568320",
    "end": "575200"
  },
  {
    "text": "interest of time i'm just going to cover the important bits for today's talk but i would highly encourage you to go learn",
    "start": "575200",
    "end": "581120"
  },
  {
    "text": "more about tecton if you're interested for now all you really need to know is that tecton is a continuous delivery",
    "start": "581120",
    "end": "587120"
  },
  {
    "text": "system built on kubernetes it leverages custom resource definitions to run tasks and pipelines on your cluster",
    "start": "587120",
    "end": "594800"
  },
  {
    "text": "you can kind of think of tekton just as a ci cd system where you would do anything you would normally want to do",
    "start": "594800",
    "end": "599839"
  },
  {
    "text": "in cicd including running unit tests running integration tests building some sort of software artifact and then",
    "start": "599839",
    "end": "606000"
  },
  {
    "text": "storing it somewhere for your end users to be able to use",
    "start": "606000",
    "end": "611040"
  },
  {
    "text": "the basic unit of techton is the tacton task which is you can deploy your tacton task to your",
    "start": "611040",
    "end": "617519"
  },
  {
    "text": "cluster um if you look on the right side we have some sample yaml for a typed on task if it looks like a pod or it reminds you of",
    "start": "617519",
    "end": "625360"
  },
  {
    "text": "a pod specification that's because the tekton controller is responsible for turning this task into a pod so that it",
    "start": "625360",
    "end": "631200"
  },
  {
    "text": "can actually execute in the cluster you can instantiate this task with the tkn cli tool to turn this task into a",
    "start": "631200",
    "end": "638880"
  },
  {
    "text": "task run task run is actually executed in the cluster and we'll be doing this in the demo",
    "start": "638880",
    "end": "644560"
  },
  {
    "text": "later on in this talk so what do we know once a task run has",
    "start": "644560",
    "end": "650480"
  },
  {
    "text": "has completed well there are a few key pieces of information first we know whether the task run was",
    "start": "650480",
    "end": "656320"
  },
  {
    "text": "successful we also know what steps we're on and exactly what arguments were passed in and then finally we know what",
    "start": "656320",
    "end": "662640"
  },
  {
    "text": "artifacts artifacts may have been built in this task run this is really useful when trying to",
    "start": "662640",
    "end": "668160"
  },
  {
    "text": "achieve certain salsa levels uh we know exactly what was run so we can put that into our salsa providence and we also",
    "start": "668160",
    "end": "674320"
  },
  {
    "text": "know what artifacts were built so we can generate providence for those artifacts and also try to sign them",
    "start": "674320",
    "end": "681040"
  },
  {
    "text": "so how do we do this this is where tecton chains comes in you can think of captain chains as a supply chain",
    "start": "681040",
    "end": "686959"
  },
  {
    "text": "security manager for tekton it leverages sigstor under the hood to find artifacts that are generated by tecton and also",
    "start": "686959",
    "end": "693600"
  },
  {
    "text": "generate signed provenance here's a little diagram i drew of how this works",
    "start": "693600",
    "end": "699680"
  },
  {
    "text": "basically you have your cluster running and you have techton pipelines which is the core techton project running in your",
    "start": "699680",
    "end": "705040"
  },
  {
    "text": "cluster when you start a task run the techdown pipelines project is responsible for executing that task run",
    "start": "705040",
    "end": "711920"
  },
  {
    "text": "meanwhile tekton chains is observing all the task runs in your cluster and once it sees that the attachment has successfully completed",
    "start": "711920",
    "end": "718720"
  },
  {
    "text": "it'll try and extract any artifacts that it recognizes from that task run it'll generate signatures for that artifact",
    "start": "718720",
    "end": "725120"
  },
  {
    "text": "generate provenance and then store those two things alongside the artifact in whatever storage back-end you have",
    "start": "725120",
    "end": "730560"
  },
  {
    "text": "configured this could be an oci registry or a gcs bucket you can also configure various types of",
    "start": "730560",
    "end": "737760"
  },
  {
    "text": "signing keys to actually sign these things with tactile chains including kms keys public private key pairs that you might",
    "start": "737760",
    "end": "744000"
  },
  {
    "text": "have set up yourself and fulso which we had talked about earlier",
    "start": "744000",
    "end": "749519"
  },
  {
    "text": "so uh i'll do a quick demo of everything we just discussed with tekton so let me share my terminal",
    "start": "749920",
    "end": "758120"
  },
  {
    "text": "so in the interest of time i've already created the cluster that i will be doing this demo on um it's an amazon eks",
    "start": "767200",
    "end": "773920"
  },
  {
    "text": "cluster and the most interesting thing about how i created this was i passed in this with oidc flag this is basically going to",
    "start": "773920",
    "end": "781440"
  },
  {
    "text": "allow my kubernetes service account to authenticate to vulcio and request a code signing certificate for the piece",
    "start": "781440",
    "end": "788160"
  },
  {
    "text": "of software i'm about to build so i already have tecton pipelines installed in this cluster",
    "start": "788160",
    "end": "794079"
  },
  {
    "text": "installing chains to add in supply chain secure the supply chain security manager is just a simple control apply command",
    "start": "794079",
    "end": "801279"
  },
  {
    "text": "i've already run this so i won't run it again but um the last piece of configuration we need",
    "start": "801279",
    "end": "806639"
  },
  {
    "text": "to do is tell tacton chains exactly how we want to generate our provenance and sign it",
    "start": "806639",
    "end": "812320"
  },
  {
    "text": "so there are four commands here the first one is telling chain that we want our the format of our provenance to be",
    "start": "812320",
    "end": "817839"
  },
  {
    "text": "the in total format which is what's recommended uh by the salsa framework we want to store our signatures in an",
    "start": "817839",
    "end": "824480"
  },
  {
    "text": "oci registry and we've also enabled the transparency log which means we want to store our signature and certificate",
    "start": "824480",
    "end": "830320"
  },
  {
    "text": "bundle in the record transparency log we've enabled signing with full co so we don't actually have to set up our own",
    "start": "830320",
    "end": "837279"
  },
  {
    "text": "public private key pair or point to kms we'll just request a certificate and uh",
    "start": "837279",
    "end": "843040"
  },
  {
    "text": "that's how we're planning on signing our artifact so let's take a look at the uh the artifact we're actually going to build",
    "start": "843040",
    "end": "849440"
  },
  {
    "text": "we're going to be using canaco to build an oci image and push it to a registry so this is the task that we plan on",
    "start": "849440",
    "end": "855440"
  },
  {
    "text": "running there's just a few parameters passed in including the name of the image we want to build um a few results here which is how we're",
    "start": "855440",
    "end": "862079"
  },
  {
    "text": "going to tell pekton chains that an artifact was built the first result is the digest of the image we're going to be building and",
    "start": "862079",
    "end": "868320"
  },
  {
    "text": "then we have the url or the name of the image that we're going to be building there are three steps in this task so",
    "start": "868320",
    "end": "875279"
  },
  {
    "text": "the first one basically just creates a simple little docker file which we want to build the second one actually does",
    "start": "875279",
    "end": "880639"
  },
  {
    "text": "the build and push of the container image and the last one writes the name of the image to our result so that we",
    "start": "880639",
    "end": "886880"
  },
  {
    "text": "know what image was built so we can apply this task to our cluster",
    "start": "886880",
    "end": "893440"
  },
  {
    "text": "taking a second amazing and we can kick it off with the tkn cli",
    "start": "896399",
    "end": "902480"
  },
  {
    "text": "tool",
    "start": "902480",
    "end": "904720"
  },
  {
    "text": "so while this runs um i basically passed in and i've stored already stored this image name as an um",
    "start": "908320",
    "end": "915600"
  },
  {
    "text": "environment variable or i have not um let's try this again",
    "start": "915600",
    "end": "921760"
  },
  {
    "text": "i'm gonna delete this task run that i just created",
    "start": "921760",
    "end": "927399"
  },
  {
    "text": "let's start over this is the image that we want to build",
    "start": "928320",
    "end": "933680"
  },
  {
    "text": "and let's kick off another task run so now we're passing in the image name",
    "start": "933680",
    "end": "939120"
  },
  {
    "text": "that we want to build and we're running it under the service account i created earlier called ecr pusher which has uh",
    "start": "939120",
    "end": "944959"
  },
  {
    "text": "permissions to push to my ecr registry if we take a lot a look at the logs for",
    "start": "944959",
    "end": "951360"
  },
  {
    "text": "this image we can see that we're running through those steps adding the docker file building and pushing the image and",
    "start": "951360",
    "end": "957920"
  },
  {
    "text": "we have written the results so this task screen has completed successfully if we take a look at the task run using that",
    "start": "957920",
    "end": "963920"
  },
  {
    "text": "same cli tool that tech tom provides you can get a little bit more information about the image that was built",
    "start": "963920",
    "end": "970399"
  },
  {
    "text": "so we have the image url which i'll just store into an environment variable and",
    "start": "970399",
    "end": "976720"
  },
  {
    "text": "the digest so we should now be able to run this",
    "start": "976720",
    "end": "982480"
  },
  {
    "text": "image it'll pull it down and we can see that it has printed out",
    "start": "982480",
    "end": "988720"
  },
  {
    "text": "hello world which is exactly what we expected but now we want to make sure that the image that",
    "start": "988720",
    "end": "994639"
  },
  {
    "text": "we built was signed and that provenance was correctly generated how do we do this the nice thing is that under the",
    "start": "994639",
    "end": "1000720"
  },
  {
    "text": "hood tecton chains has already realized that an artifact was built attempted to sign it generated signed provenance and",
    "start": "1000720",
    "end": "1007120"
  },
  {
    "text": "stored it in our oci registry as an end user it's really easy to verify that this happened using the cosine tool",
    "start": "1007120",
    "end": "1014000"
  },
  {
    "text": "so at the moment transparency log and full c of support are experimental in cosine so i have to set this",
    "start": "1014000",
    "end": "1020560"
  },
  {
    "text": "experimental flag but all we have to do is a simple cosine verify and then the name of the image",
    "start": "1020560",
    "end": "1027360"
  },
  {
    "text": "and we should see that verification is successful if we pipe this into jq we can get a little bit more information around the",
    "start": "1027360",
    "end": "1034160"
  },
  {
    "text": "certificate and the signature and you can see that the subject in the certificate is a service account that we",
    "start": "1034160",
    "end": "1040400"
  },
  {
    "text": "were running under and that the issuer is uh points to my eks cluster that we",
    "start": "1040400",
    "end": "1045520"
  },
  {
    "text": "ran in so it's really cool we didn't have to worry about keys we didn't have to do anything everything sort of just",
    "start": "1045520",
    "end": "1050640"
  },
  {
    "text": "happened under the hood because we already installed tecton chains we can also take a look at any",
    "start": "1050640",
    "end": "1056240"
  },
  {
    "text": "providence that was generated with the cosine verify attestation command",
    "start": "1056240",
    "end": "1061679"
  },
  {
    "text": "and looks like it was successful again we see our certificate subject our certificate issuer url and we can take a",
    "start": "1062799",
    "end": "1068799"
  },
  {
    "text": "look at the provenance that was generated by decoding it",
    "start": "1068799",
    "end": "1074640"
  },
  {
    "text": "and typing it into jq and you can see that we have our provenance now in the salsa providence format um the subject",
    "start": "1074640",
    "end": "1081600"
  },
  {
    "text": "is the image that we just built and you can see that all the steps that we ran um exist in this provenance so we know",
    "start": "1081600",
    "end": "1087200"
  },
  {
    "text": "exactly how it was built and also when it was built",
    "start": "1087200",
    "end": "1092520"
  },
  {
    "text": "let's transition back to the slides",
    "start": "1096320",
    "end": "1100759"
  },
  {
    "text": "cool so you can see that by just by adding tecton chains into our existing tecton deployment we were able to",
    "start": "1109200",
    "end": "1114720"
  },
  {
    "text": "achieve salsa 2. um assuming your code is already in version control our builds are scripted and tucked on this build",
    "start": "1114720",
    "end": "1121200"
  },
  {
    "text": "services techton providence is available authenticated and service generated since it's been generated by tecton",
    "start": "1121200",
    "end": "1126880"
  },
  {
    "text": "chains so tekton plus tecton chains equals also level 2.",
    "start": "1126880",
    "end": "1132480"
  },
  {
    "text": "uh yes so now let's talk about github workflows and github actions",
    "start": "1132480",
    "end": "1138000"
  },
  {
    "text": "so many projects are natively developed on github so it would be great if we could also generate salsa provenance on",
    "start": "1138000",
    "end": "1144640"
  },
  {
    "text": "github and this is the motivation behind this presentation",
    "start": "1144640",
    "end": "1150760"
  },
  {
    "text": "so on github the standard technology that you run that you use to run ci are",
    "start": "1152320",
    "end": "1158720"
  },
  {
    "text": "github workflows and github actions whether you want to run simple unit tests or end-to-end integration tests or",
    "start": "1158720",
    "end": "1165039"
  },
  {
    "text": "maybe release pipeline you can do all this using using github workflows and actions",
    "start": "1165039",
    "end": "1170640"
  },
  {
    "text": "typically you define github workflows by creating a file under github",
    "start": "1170640",
    "end": "1175679"
  },
  {
    "text": "workflows on your repository github workflows are very powerful and you can run arbitrary commands",
    "start": "1175679",
    "end": "1182799"
  },
  {
    "text": "you can also define so-called triggers to start your run for example you can start to run on an",
    "start": "1182799",
    "end": "1188559"
  },
  {
    "text": "incoming pull request or when there's a new push to a branch or when a new tag is created on your",
    "start": "1188559",
    "end": "1194000"
  },
  {
    "text": "repository and here's a simple example of a hello",
    "start": "1194000",
    "end": "1200400"
  },
  {
    "text": "world github github workflow all it does is print hello world every time there's a",
    "start": "1200400",
    "end": "1206480"
  },
  {
    "text": "push to the main branch",
    "start": "1206480",
    "end": "1209520"
  },
  {
    "text": "one powerful feature of github workflows is the ability to support isolation between jobs",
    "start": "1212080",
    "end": "1218640"
  },
  {
    "text": "so you can define different jobs in the same workflow here we have two jobs one in red and one in green",
    "start": "1218640",
    "end": "1224720"
  },
  {
    "text": "called pr and secret even though they're defined in the same workflow those jobs run in isolation",
    "start": "1224720",
    "end": "1232159"
  },
  {
    "text": "in red we have a job that runs an incoming pull request the pull request may contain malicious",
    "start": "1232159",
    "end": "1238880"
  },
  {
    "text": "code might not have been reviewed so we want it to be isolated from other jobs in the workflow",
    "start": "1238880",
    "end": "1245679"
  },
  {
    "text": "and in green we have a sensitive job that accesses credentials or other sensitive information like a",
    "start": "1245679",
    "end": "1251760"
  },
  {
    "text": "secret this could be the job that publishes container images to your registry and",
    "start": "1251760",
    "end": "1257280"
  },
  {
    "text": "needs a secret to log in the registry",
    "start": "1257280",
    "end": "1262039"
  },
  {
    "text": "so what i'm presenting today uh using github actions and github workflows meets the salsa level three requirements",
    "start": "1263919",
    "end": "1271679"
  },
  {
    "text": "so let me tell you a little bit more about what those requirements are the first requirement is that the build",
    "start": "1271679",
    "end": "1277679"
  },
  {
    "text": "must use an ephemeral environment the motivation behind this is that it",
    "start": "1277679",
    "end": "1282880"
  },
  {
    "text": "makes it harder for an attacker to gain persistent persistency to your release pipeline",
    "start": "1282880",
    "end": "1288240"
  },
  {
    "text": "if they work again to gain uh if they were to be if they were to to",
    "start": "1288240",
    "end": "1293360"
  },
  {
    "text": "attack it on github each job in a workflow runs in a fresh vm so we get that that",
    "start": "1293360",
    "end": "1298880"
  },
  {
    "text": "requirement for free a second requirement is isolation",
    "start": "1298880",
    "end": "1304080"
  },
  {
    "text": "meaning that the provenance generation must be isolated from the maintainers",
    "start": "1304080",
    "end": "1310720"
  },
  {
    "text": "so what this means is that the maintainers that are building an artifact shouldn't be able to interfere with the provenance generation",
    "start": "1310720",
    "end": "1318320"
  },
  {
    "text": "and this takes us this leads us to the the last requirement which is that the provenance should be",
    "start": "1318320",
    "end": "1324080"
  },
  {
    "text": "non-forgeable meaning that maintainers shouldn't be able to lie or tamper with the",
    "start": "1324080",
    "end": "1329120"
  },
  {
    "text": "provenance information they shouldn't be able to lie about what source code was used for example to",
    "start": "1329120",
    "end": "1335200"
  },
  {
    "text": "build the artifact",
    "start": "1335200",
    "end": "1338080"
  },
  {
    "text": "so let's see how we can generate salsa 3 provenance on github using an example",
    "start": "1341360",
    "end": "1347600"
  },
  {
    "text": "all you have to do as a user is define a workflow and call the trusted builder",
    "start": "1347600",
    "end": "1353840"
  },
  {
    "text": "once your the trigger once the the run is triggered the",
    "start": "1355440",
    "end": "1360640"
  },
  {
    "text": "execution is handed over to the trusted builder here on the right the trusted builder is hosted in a",
    "start": "1360640",
    "end": "1367760"
  },
  {
    "text": "different repository in our example it's called github.com trusted builder",
    "start": "1367760",
    "end": "1374400"
  },
  {
    "text": "and the trusted builder is not under the control of the original workflow on the left",
    "start": "1374400",
    "end": "1379440"
  },
  {
    "text": "and therefore the workflow on the left cannot tamper with the execution of the trusted builder",
    "start": "1379440",
    "end": "1385440"
  },
  {
    "text": "so we can do anything we want in the trusted the trusted builder and the first step we take is",
    "start": "1385440",
    "end": "1390559"
  },
  {
    "text": "building and publishing a container using code",
    "start": "1390559",
    "end": "1395520"
  },
  {
    "text": "and then in a second step we can generate the provenance sign it and upload it to a registry",
    "start": "1397360",
    "end": "1404320"
  },
  {
    "text": "and here uh we can just use cosign api and then the six store tooling to do that",
    "start": "1404320",
    "end": "1410880"
  },
  {
    "text": "so something i want to point out is how signature generation uh happens i think",
    "start": "1412400",
    "end": "1417600"
  },
  {
    "text": "priya already uh talked about this but i want to mention it again uh in the example that you saw we didn't",
    "start": "1417600",
    "end": "1423200"
  },
  {
    "text": "have to provide any sign-in keys and this is a key feature of generating salsa pronouns using six store",
    "start": "1423200",
    "end": "1429520"
  },
  {
    "text": "key generation and management happens transparently through workflow identity",
    "start": "1429520",
    "end": "1434559"
  },
  {
    "text": "so when the trusted builder runs it is provisioned with a unique x509 certificate that unique uniquely",
    "start": "1434559",
    "end": "1440720"
  },
  {
    "text": "identifies it and for this we use oidc as priya mentioned earlier",
    "start": "1440720",
    "end": "1446320"
  },
  {
    "text": "this certificate is then used to sign the provenance so during provenance signature",
    "start": "1446320",
    "end": "1451440"
  },
  {
    "text": "verification we can inspect the certificate and learn who produced the bill",
    "start": "1451440",
    "end": "1458360"
  },
  {
    "text": "just to make things even clearer i want to compare the web pki and the salsa pki",
    "start": "1459679",
    "end": "1464799"
  },
  {
    "text": "that we've built using six store on the web a ca may be verisign and when",
    "start": "1464799",
    "end": "1469840"
  },
  {
    "text": "you visit a google website the x509 certificate that you get during the tls handshake",
    "start": "1469840",
    "end": "1476080"
  },
  {
    "text": "will have the google identity such as 3w.google.com in the salsa pki with six store the ca",
    "start": "1476080",
    "end": "1484080"
  },
  {
    "text": "is six store and when you verify the provenance the certificate contains the identity of the builder",
    "start": "1484080",
    "end": "1490640"
  },
  {
    "text": "so during verification we can inspect the certificate and identify the builder by name and if we trust the builder then",
    "start": "1490640",
    "end": "1496799"
  },
  {
    "text": "we can trust the sun provenance and its content",
    "start": "1496799",
    "end": "1501840"
  },
  {
    "text": "so it's pretty easy to verify uh provenance we've built a tool called salsa verifier that can help you do that",
    "start": "1503120",
    "end": "1510880"
  },
  {
    "text": "and under the hood it's using the cosine api all you have to do is pass it an artifact",
    "start": "1510880",
    "end": "1516720"
  },
  {
    "text": "oci of your container and tag",
    "start": "1516720",
    "end": "1521278"
  },
  {
    "text": "and one one option that is mandatory for you to pass is the source code that you expect this container to",
    "start": "1523840",
    "end": "1530720"
  },
  {
    "text": "have to have been built from in our example here it should come from github.com orig origin repo",
    "start": "1530720",
    "end": "1539200"
  },
  {
    "text": "optionally you can also pass a branch which by default is set to main",
    "start": "1540720",
    "end": "1546320"
  },
  {
    "text": "and then you can also pass a tag uh if you expect the the uh the container to be built from a",
    "start": "1547679",
    "end": "1554159"
  },
  {
    "text": "a particular version or tag of the repository",
    "start": "1554159",
    "end": "1558640"
  },
  {
    "text": "so as you as as priya mentioned before uh thanks to to seek store we don't have to handle public keys",
    "start": "1562000",
    "end": "1568799"
  },
  {
    "text": "and you can just pass the identity of the repository you believe the container should come from",
    "start": "1568799",
    "end": "1574159"
  },
  {
    "text": "and the verification happens automatically for you",
    "start": "1574159",
    "end": "1578880"
  },
  {
    "text": "okay so let's have a quick demo let me share my screen",
    "start": "1581039",
    "end": "1587760"
  },
  {
    "text": "all right so the example we're going to take um is hosted uh",
    "start": "1597039",
    "end": "1603039"
  },
  {
    "text": "on github it's called kubecon minus eu22 it's a simple hello world",
    "start": "1603039",
    "end": "1609360"
  },
  {
    "text": "which will print a random random uid so we're gonna take this gopro this go",
    "start": "1609360",
    "end": "1615919"
  },
  {
    "text": "file and package it up as a container using co",
    "start": "1615919",
    "end": "1621200"
  },
  {
    "text": "doing this is pretty easy as a user what you have to do is",
    "start": "1621679",
    "end": "1627440"
  },
  {
    "text": "define a workflow a github workflow here it's called code minus publish.yaml",
    "start": "1627440",
    "end": "1635120"
  },
  {
    "text": "and then here we define different jobs you can ignore this part um you can look",
    "start": "1635120",
    "end": "1642399"
  },
  {
    "text": "at it if you're interested but but the most interesting part of this workflow is this this spot here the",
    "start": "1642399",
    "end": "1648640"
  },
  {
    "text": "build part all we do here is we basically call a trusted builder which is hosted",
    "start": "1648640",
    "end": "1655440"
  },
  {
    "text": "under this repository and then we pass a bunch of arguments to cool so here we're saying",
    "start": "1655440",
    "end": "1661919"
  },
  {
    "text": "build a multi-architecture image and tag the container with fact 5 and",
    "start": "1661919",
    "end": "1667520"
  },
  {
    "text": "tag 6. we also pass environment variable that we expect such as code docker ripple",
    "start": "1667520",
    "end": "1673760"
  },
  {
    "text": "which is just just the the docker account where we want to publish the resulting container image",
    "start": "1673760",
    "end": "1681039"
  },
  {
    "text": "and we pass the password to be able to publish to the registry",
    "start": "1681039",
    "end": "1686320"
  },
  {
    "text": "then all we have to do is run this workflow so you can go to the action tab here on",
    "start": "1687039",
    "end": "1693360"
  },
  {
    "text": "github and here on the right run workflow and we run the workflow",
    "start": "1693360",
    "end": "1700159"
  },
  {
    "text": "so it's going to take a few minutes for this to complete so uh i've already run",
    "start": "1700159",
    "end": "1705200"
  },
  {
    "text": "uh the uh the release a few times to save up save up sometimes",
    "start": "1705200",
    "end": "1713120"
  },
  {
    "text": "and here on the left you can see all the different steps that were taken by the builder to build this image and publish the to",
    "start": "1716159",
    "end": "1722320"
  },
  {
    "text": "publish it and sign the provenance and this is the resulting container image that we got",
    "start": "1722320",
    "end": "1728799"
  },
  {
    "text": "so let's try to verify the problems",
    "start": "1728799",
    "end": "1732559"
  },
  {
    "text": "okay so let's first verify that we can run our container image",
    "start": "1734080",
    "end": "1739840"
  },
  {
    "text": "okay so this seems to be working we have our yellow hello world we can also run it by",
    "start": "1746080",
    "end": "1753679"
  },
  {
    "text": "using the hash which is the same thing okay so at least our container image is working now let's verify the problems",
    "start": "1753679",
    "end": "1763158"
  },
  {
    "text": "okay so salsa pronouns was verified and docker the docker container",
    "start": "1770320",
    "end": "1776960"
  },
  {
    "text": "is printed that's that's what it resolves to these tactics now let's take this command",
    "start": "1776960",
    "end": "1784799"
  },
  {
    "text": "and change the expected source repository let's say 23",
    "start": "1785360",
    "end": "1792080"
  },
  {
    "text": "and as expected it doesn't pass the verification because the source repository doesn't match",
    "start": "1792080",
    "end": "1799520"
  },
  {
    "text": "as we said earlier we can also pass it a main branch oops",
    "start": "1799520",
    "end": "1805840"
  },
  {
    "text": "which verifies and if we were to pass a different a different branch it would",
    "start": "1807679",
    "end": "1813360"
  },
  {
    "text": "fail we can also print the provenance",
    "start": "1813360",
    "end": "1820880"
  },
  {
    "text": "and as expected here uh it looks very similar to what priya presented with tecton",
    "start": "1821120",
    "end": "1827440"
  },
  {
    "text": "here we get the source origin repository and the commit hash that it was built from",
    "start": "1827440",
    "end": "1834799"
  },
  {
    "text": "we also see a list of environment variables that were passed to co to build",
    "start": "1834799",
    "end": "1841039"
  },
  {
    "text": "and also the command that was used by co to build the container there's additional information about the",
    "start": "1841039",
    "end": "1847520"
  },
  {
    "text": "environment used by the trusted builder uh architecture was amd64 running an",
    "start": "1847520",
    "end": "1853600"
  },
  {
    "text": "ubuntu on an ubuntu machine and we see that the trigger event was a workflow dispatch",
    "start": "1853600",
    "end": "1860159"
  },
  {
    "text": "which is just saying saying that i clicked on the button to run the",
    "start": "1860159",
    "end": "1865279"
  },
  {
    "text": "workflow we also see up here that the reference",
    "start": "1865279",
    "end": "1870480"
  },
  {
    "text": "is the main branch of the original repository so we have all the information that we need",
    "start": "1870480",
    "end": "1878360"
  },
  {
    "text": "so let's quickly go back to the action run it just completed",
    "start": "1879360",
    "end": "1886480"
  },
  {
    "text": "and we can see again that this build is reproducible",
    "start": "1887120",
    "end": "1892559"
  },
  {
    "text": "and we get the same container image that we verified",
    "start": "1892559",
    "end": "1898880"
  },
  {
    "text": "awesome that was super cool um let me present again",
    "start": "1904080",
    "end": "1910679"
  },
  {
    "text": "yeah so to conclude github actions and github workflows gives you salsa level 3",
    "start": "1920880",
    "end": "1926480"
  },
  {
    "text": "if you use a trusted builder thank you everyone for attending um if",
    "start": "1926480",
    "end": "1933919"
  },
  {
    "text": "you have any questions about this talk feel free to reach out to either of us",
    "start": "1933919",
    "end": "1939200"
  },
  {
    "text": "i'll be there in person so look out for me um and yeah thank you so much for attending",
    "start": "1939200",
    "end": "1945679"
  },
  {
    "text": "thanks everyone",
    "start": "1945840",
    "end": "1949158"
  }
]