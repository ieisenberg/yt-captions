[
  {
    "text": "hi my name is Kendall Rhoden I am a technical product manager at diagrid and",
    "start": "3200",
    "end": "9120"
  },
  {
    "text": "today's session is going to be all about Dapper or the distributed application runtime and how it makes authoring",
    "start": "9120",
    "end": "14759"
  },
  {
    "text": "microservices and building applications easier for Developers",
    "start": "14759",
    "end": "19880"
  },
  {
    "text": "so if we take a quick look at the agenda we'll cover the Dapper value proposition once again why should you care about",
    "start": "20520",
    "end": "25800"
  },
  {
    "text": "Dapper how does it help developers will then do adapter overview so talk a",
    "start": "25800",
    "end": "31080"
  },
  {
    "text": "little bit about adapter Core Concepts the architecture how you use it and then we'll actually get up and running with",
    "start": "31080",
    "end": "36780"
  },
  {
    "text": "Dapper on a local machine after that we'll dive a little bit more into the Dapper apis that are available",
    "start": "36780",
    "end": "43200"
  },
  {
    "text": "and we'll actually see a few of them in action in kubernetes and then we'll dive into one of the",
    "start": "43200",
    "end": "48960"
  },
  {
    "text": "newer apis available as of dapper 110 we're currently on the 111 release so",
    "start": "48960",
    "end": "54840"
  },
  {
    "text": "we'll showcase that new feature of dapper workflows and do a demo on the local machine and then we'll talk about",
    "start": "54840",
    "end": "60539"
  },
  {
    "text": "some Dapper recent releases some resources to get involved in Dapper if you're interested and we'll go from",
    "start": "60539",
    "end": "66420"
  },
  {
    "text": "there we first have to kind of Step into the mindset of a developer today and this",
    "start": "66420",
    "end": "73320"
  },
  {
    "text": "Cloud native focused world so developers are basically dealing with a whole new",
    "start": "73320",
    "end": "78960"
  },
  {
    "text": "set of problems that come with taking monolithic architectures and breaking them into microservices as",
    "start": "78960",
    "end": "84840"
  },
  {
    "text": "containerization has increased in popularity the rise of kubernetes platforms that has an impact on how",
    "start": "84840",
    "end": "90420"
  },
  {
    "text": "Solutions are actually architected and how ode is written and so developers today have to deploy and release faster",
    "start": "90420",
    "end": "97619"
  },
  {
    "text": "than ever and on top of that take into account a whole new spectrum of challenges that come with taking an",
    "start": "97619",
    "end": "103259"
  },
  {
    "text": "application and essentially breaking those processes apart across the network how do I make sure that these",
    "start": "103259",
    "end": "108960"
  },
  {
    "text": "distributed applications actually can talk to one another and discover one another how do I get tracing and",
    "start": "108960",
    "end": "114000"
  },
  {
    "text": "end-to-end observability for my entire solution how do I do State Management how do I",
    "start": "114000",
    "end": "119280"
  },
  {
    "text": "persist State as an individual micro service and ensure that that state is is secure and consistent so a lot of these",
    "start": "119280",
    "end": "126479"
  },
  {
    "text": "challenges have been around forever and some of them have really been introduced with the rise of sort of the cloud",
    "start": "126479",
    "end": "132060"
  },
  {
    "text": "native approach I worked at Microsoft for six and a half years and one thing that I heard from a lot of customers how",
    "start": "132060",
    "end": "138840"
  },
  {
    "text": "do I create sort of a blueprint for what it looks like to build a micro service how do I make it super easy for my",
    "start": "138840",
    "end": "145200"
  },
  {
    "text": "developers to be productive without getting bogged down by the complexity of a given platform or instrumenting all of",
    "start": "145200",
    "end": "151440"
  },
  {
    "text": "these concerns into their application code when the goal that they have is to really build unique business logic that",
    "start": "151440",
    "end": "157440"
  },
  {
    "text": "makes their product or service successful as a business and so I love that Dapper exists because",
    "start": "157440",
    "end": "163200"
  },
  {
    "text": "it really came to solve that problem so a Dapper or the distributed application runtime as I've said uh really came to",
    "start": "163200",
    "end": "169560"
  },
  {
    "text": "alleviate a lot of these challenges that came with building Cloud native containerized applications",
    "start": "169560",
    "end": "175620"
  },
  {
    "text": "um and how does it do that it provides a set of consistent apis and consistent sdks that abstract away a lot of these",
    "start": "175620",
    "end": "182940"
  },
  {
    "text": "complexities that we were just mentioning on the previous slide so it allows developers to really focus",
    "start": "182940",
    "end": "188280"
  },
  {
    "text": "in on the Core Business logic that's a differentiator for them by handling concerns around things like service",
    "start": "188280",
    "end": "194220"
  },
  {
    "text": "Discovery service invocation State Management I mentioned this on the agenda side but workflow orchestration",
    "start": "194220",
    "end": "200280"
  },
  {
    "text": "uh even today and then things like observability and resiliency really baked in without all of that having to",
    "start": "200280",
    "end": "207120"
  },
  {
    "text": "affect uh and bloat the application uh code itself that a developer is focused",
    "start": "207120",
    "end": "212159"
  },
  {
    "text": "on writing so in reflecting on what we've talked about so far Dapper's goal is really to",
    "start": "212159",
    "end": "218340"
  },
  {
    "text": "codify the best practices for building microservice applications and how do they do this through an open and",
    "start": "218340",
    "end": "224700"
  },
  {
    "text": "independent API model called building blocks these building blocks essentially allow",
    "start": "224700",
    "end": "230700"
  },
  {
    "text": "developers to build portable applications that are language and framework agnostic and because building",
    "start": "230700",
    "end": "236519"
  },
  {
    "text": "block apis are completely independent developers can use one sum or all of them as they're building out",
    "start": "236519",
    "end": "242400"
  },
  {
    "text": "applications one of the big aspects of dapper is that it is Community Driven and vendor",
    "start": "242400",
    "end": "248459"
  },
  {
    "text": "neutral and we've seen a ton of of momentum in the community around Dapper",
    "start": "248459",
    "end": "253980"
  },
  {
    "text": "over the past several years Dapper is now the 10th largest cncf project out of",
    "start": "253980",
    "end": "259340"
  },
  {
    "text": "157 there are today with over 2 800 contributors on GitHub",
    "start": "259340",
    "end": "265320"
  },
  {
    "text": "and a very active community on on Discord which is always great to see so",
    "start": "265320",
    "end": "270720"
  },
  {
    "text": "it's very much a team effort in terms of the progress Dapper has made in such a short period of time",
    "start": "270720",
    "end": "277800"
  },
  {
    "text": "so how does dapper actually work we're going to do a quick at a glance we",
    "start": "277800",
    "end": "283080"
  },
  {
    "text": "talked about the Dapper best practice building blocks and that's what we're looking at here in the middle of this screen so we see there's several",
    "start": "283080",
    "end": "289680"
  },
  {
    "text": "building blocks there's service invocation there's State Management publish subscribe once again a lot of",
    "start": "289680",
    "end": "295800"
  },
  {
    "text": "these representing a series of challenges that developers typically face when building distributed",
    "start": "295800",
    "end": "301800"
  },
  {
    "text": "applications that are now codified through dapper so you're able to offload this",
    "start": "301800",
    "end": "307500"
  },
  {
    "text": "responsibility and communicate essentially to Dapper over an HTTP or grpc API from your code so what we see",
    "start": "307500",
    "end": "315419"
  },
  {
    "text": "here is the migration of a lot of this plumbing code from the application logic that developers are responsible for and",
    "start": "315419",
    "end": "322740"
  },
  {
    "text": "into adapter Dapper can really run on any infrastructure kubernetes anywhere",
    "start": "322740",
    "end": "328500"
  },
  {
    "text": "we typically see kubernetes as being the target but you can also run it on your local machine or on Virtual or physical",
    "start": "328500",
    "end": "334800"
  },
  {
    "text": "machines as well so now let's talk a little bit about how",
    "start": "334800",
    "end": "340380"
  },
  {
    "text": "our application code can actually access the apis provided by Dapper so adapter",
    "start": "340380",
    "end": "345900"
  },
  {
    "text": "exposes its HTTP in grpc apis through a sidecar architecture so essentially",
    "start": "345900",
    "end": "351780"
  },
  {
    "text": "running as either a container or as a process so this means your application code is completely separate from the",
    "start": "351780",
    "end": "358320"
  },
  {
    "text": "Dapper runtime in addition to interacting with the adapter side car through grpc or HTTP",
    "start": "358320",
    "end": "366120"
  },
  {
    "text": "there are also eight language specific sdks that Dapper provides so all of",
    "start": "366120",
    "end": "371580"
  },
  {
    "text": "these essentially just provide a typed language API for interacting with these Dapper sidecar building block apis",
    "start": "371580",
    "end": "379560"
  },
  {
    "text": "so you'll see here a list of a few of the apis all of which follow a very standard structure and what's nice about",
    "start": "379560",
    "end": "387419"
  },
  {
    "text": "this is that because Dapper's language agnostic you can really use any combination of application Frameworks",
    "start": "387419",
    "end": "394080"
  },
  {
    "text": "and languages in order to use this consistent API set",
    "start": "394080",
    "end": "399180"
  },
  {
    "text": "so now that we've talked about how to consume these apis I thought it would be interesting to just show an example of",
    "start": "399180",
    "end": "405780"
  },
  {
    "text": "what it might look like to have an application solution that essentially makes use of a variety of different",
    "start": "405780",
    "end": "412020"
  },
  {
    "text": "Dapper apis because ultimately it is very Plug and Play you can use one you",
    "start": "412020",
    "end": "417240"
  },
  {
    "text": "can use many it really just is up to you which makes Dapper really incrementally",
    "start": "417240",
    "end": "422699"
  },
  {
    "text": "adoptable so let's just take a quick look at a simple example so in this case we have service a and",
    "start": "422699",
    "end": "430860"
  },
  {
    "text": "let's say service a is triggered by some type of resource binding through Dapper so maybe a file was added to a file",
    "start": "430860",
    "end": "438060"
  },
  {
    "text": "store or an event happened on a database that could trigger application logic",
    "start": "438060",
    "end": "443460"
  },
  {
    "text": "within service a and then in addition service a might make use of other Dapper capabilities like retrieving state from",
    "start": "443460",
    "end": "451080"
  },
  {
    "text": "a key Value Store via the state API or using the Dapper configuration building",
    "start": "451080",
    "end": "456419"
  },
  {
    "text": "block to retrieve application configuration from an application config store",
    "start": "456419",
    "end": "462560"
  },
  {
    "text": "in addition to interacting with other infrastructure resources we can imagine service a might want to communicate and",
    "start": "462560",
    "end": "470580"
  },
  {
    "text": "uh you know with other micro services within the solution so in this case we",
    "start": "470580",
    "end": "475860"
  },
  {
    "text": "could use the Dapper service invocation building block so service a can communicate directly to service B using",
    "start": "475860",
    "end": "483599"
  },
  {
    "text": "the invoke endpoint and at the same time service B might have its own requirements or or features",
    "start": "483599",
    "end": "491039"
  },
  {
    "text": "that it wants to make use of so in this case let's say service B has secure",
    "start": "491039",
    "end": "496259"
  },
  {
    "text": "secrets that it makes use of in its application code it could use Dapper to",
    "start": "496259",
    "end": "501720"
  },
  {
    "text": "call out to a Secret store whether that's running locally or in the public cloud and retrieve those secrets that it",
    "start": "501720",
    "end": "508259"
  },
  {
    "text": "will then use in order to maybe establish connections or that just might be secret values that they don't want",
    "start": "508259",
    "end": "514140"
  },
  {
    "text": "directly in their application code so if service a also wants to make use",
    "start": "514140",
    "end": "519659"
  },
  {
    "text": "of a different communication pattern maybe something more event driven or persistent then it can use the publish",
    "start": "519659",
    "end": "526620"
  },
  {
    "text": "API through the pub sub building block to publish a message to a message broker",
    "start": "526620",
    "end": "532380"
  },
  {
    "text": "now Dapper not only allows you to publish to a broker but also will subscribe on behalf of a series of",
    "start": "532380",
    "end": "539040"
  },
  {
    "text": "services based on either a programmatic or declarative subscription that you can",
    "start": "539040",
    "end": "544200"
  },
  {
    "text": "apply now let's say we have two services that subscribe to this um you know broker in",
    "start": "544200",
    "end": "550440"
  },
  {
    "text": "this case uh service D might for example be running a Dapper workflow so in this",
    "start": "550440",
    "end": "556380"
  },
  {
    "text": "case there's a workflow SDK and the workflow code lives inside of service D and based on a recent feature",
    "start": "556380",
    "end": "564000"
  },
  {
    "text": "it can actually wait for external events so maybe a workflow is waiting for human and event intervention or for a",
    "start": "564000",
    "end": "571260"
  },
  {
    "text": "particular type of message or event to arrive on the pub sub broker so in this case it did so the application code",
    "start": "571260",
    "end": "577920"
  },
  {
    "text": "might notify its top or sidecar hey Dapper sidecar please resume orchestrating this workflow I've",
    "start": "577920",
    "end": "583200"
  },
  {
    "text": "received an event that I was waiting for and then service C another microservice might need that same payload and message",
    "start": "583200",
    "end": "590519"
  },
  {
    "text": "to take another option so in this case service C could use an output binding to",
    "start": "590519",
    "end": "596160"
  },
  {
    "text": "potentially store the message somewhere generate or receive that goes to blob storage trigger another event on a",
    "start": "596160",
    "end": "603360"
  },
  {
    "text": "database once again the opportunities and possibilities are Limitless but I",
    "start": "603360",
    "end": "608700"
  },
  {
    "text": "think this just kind of helps understand what it might look like to use and leverage multiple Dapper apis within a",
    "start": "608700",
    "end": "615060"
  },
  {
    "text": "series of microservices now something that's really nice about Dapper is that all of these apis are",
    "start": "615060",
    "end": "621660"
  },
  {
    "text": "great but it has more value than that it adds other capabilities like like cross-cutting concerns that would be",
    "start": "621660",
    "end": "628440"
  },
  {
    "text": "applicable to this architecture pattern so when I'm building distributed applications and accessing",
    "start": "628440",
    "end": "634320"
  },
  {
    "text": "infrastructure resources I went into indubservability I want to see traces between application implications as well",
    "start": "634320",
    "end": "642180"
  },
  {
    "text": "as invocations or uh you know interactions with external services and Dapper provides that",
    "start": "642180",
    "end": "648600"
  },
  {
    "text": "in addition Dapper also has a ton of configuration that you can apply in order to make your architecture more",
    "start": "648600",
    "end": "656160"
  },
  {
    "text": "secure so think things like Access Control lists middleware so once again lots of good configuration",
    "start": "656160",
    "end": "663540"
  },
  {
    "text": "settings to make sure that you follow security and governance constraints and",
    "start": "663540",
    "end": "668579"
  },
  {
    "text": "then it also has resiliency which ultimately we talked about this we know that failure is inevitable in these type",
    "start": "668579",
    "end": "675720"
  },
  {
    "text": "of systems so if we take a look we can actually see that there's a concept of dapper resiliency and the",
    "start": "675720",
    "end": "683220"
  },
  {
    "text": "reason this was created was because we understand that failure is inevitable you know a pod can go down a node can go",
    "start": "683220",
    "end": "690000"
  },
  {
    "text": "down and you might have to retry these direct service invocation calls or even these calls out to external",
    "start": "690000",
    "end": "696480"
  },
  {
    "text": "infrastructure providers so Dapper provides some built-in resiliency for example in service",
    "start": "696480",
    "end": "702959"
  },
  {
    "text": "invocation it performs uh retries out of the box so you'll have a back off",
    "start": "702959",
    "end": "708600"
  },
  {
    "text": "interval of one second up to a threshold of three retries however if you want to",
    "start": "708600",
    "end": "714720"
  },
  {
    "text": "Define more fault tolerance policies like a circuit breaker for example you can do that and apply a resiliency",
    "start": "714720",
    "end": "720660"
  },
  {
    "text": "manifest and these apply once again to a variety of apis provided so Pub sub you",
    "start": "720660",
    "end": "728640"
  },
  {
    "text": "can apply it to retrieval of Secrets and state you can apply it to those service and vacation calls uh so on and so forth",
    "start": "728640",
    "end": "735600"
  },
  {
    "text": "so once again a lot of these cross-cutting concerns also handled by dapper",
    "start": "735600",
    "end": "741779"
  },
  {
    "text": "so we've talked about the apis and we've talked about how to consume them and we've even talked about some of these",
    "start": "741779",
    "end": "747360"
  },
  {
    "text": "cross-cutting concerns but what we haven't really talked about yet is what is this API abstracting right we",
    "start": "747360",
    "end": "754140"
  },
  {
    "text": "understand that there's a lot of things a developer might need to put in their code to talk to a state store or to talk",
    "start": "754140",
    "end": "760019"
  },
  {
    "text": "to a Secret store but how do they do that now how do they Define the infrastructure resources that they want",
    "start": "760019",
    "end": "766139"
  },
  {
    "text": "to use and that's where Dapper components come in if we take a look here we can see that",
    "start": "766139",
    "end": "772980"
  },
  {
    "text": "there's a variety of dapper components over 115 of them many of which all of",
    "start": "772980",
    "end": "778200"
  },
  {
    "text": "which were contributed by the community which we talked about this in a previous Slide the momentum around the Dapper",
    "start": "778200",
    "end": "784860"
  },
  {
    "text": "project and that the number of components just continues to grow with every release making Dapper more and",
    "start": "784860",
    "end": "790680"
  },
  {
    "text": "more flexible let's imagine in this previous example when we're using things like the State",
    "start": "790680",
    "end": "798000"
  },
  {
    "text": "Management API or configuration API those can all target a different",
    "start": "798000",
    "end": "805980"
  },
  {
    "text": "implementation so we can say hey V1 State go call out to dynamodb or go",
    "start": "805980",
    "end": "811920"
  },
  {
    "text": "retrieve state from redis and there's a consistent format for calling out to that all I do swap out the component you",
    "start": "811920",
    "end": "818579"
  },
  {
    "text": "don't have to change your application code in order to leverage a variety of infrastructure services",
    "start": "818579",
    "end": "824459"
  },
  {
    "text": "so let's take a look at this component swap ability with a little bit more",
    "start": "824459",
    "end": "830300"
  },
  {
    "text": "contextual example so let's say that you're running on",
    "start": "830300",
    "end": "836220"
  },
  {
    "text": "Azure you could have three services one of which retrieves some Secrets publishes to a message broker and then",
    "start": "836220",
    "end": "843779"
  },
  {
    "text": "you have at least one subscriber that is storing State as a result so in the case of azure you most likely",
    "start": "843779",
    "end": "850200"
  },
  {
    "text": "are targeting Azure services so for example you could use a an Azure key",
    "start": "850200",
    "end": "855420"
  },
  {
    "text": "Vault component for secrets you could use an Azure service bus component for the pub sub implementation and you could",
    "start": "855420",
    "end": "861959"
  },
  {
    "text": "use Azure Cosmos DB as a component implementation for the state API",
    "start": "861959",
    "end": "867959"
  },
  {
    "text": "now without changing your application code because we have the abstraction of both components and the API schema we",
    "start": "867959",
    "end": "876240"
  },
  {
    "text": "can easily deploy to AWS without uh you know with very little effort right all",
    "start": "876240",
    "end": "882060"
  },
  {
    "text": "we have to do is swap out the component implementations for AWS specific resources like simple notification",
    "start": "882060",
    "end": "889019"
  },
  {
    "text": "service or dynamodb in addition you could also be running on gcp and potentially using a more generic",
    "start": "889019",
    "end": "896820"
  },
  {
    "text": "component model where you say hey I want to use hash equip fault rabbitmq potentially running inside my kubernetes",
    "start": "896820",
    "end": "902880"
  },
  {
    "text": "cluster and redis so there are cloud-specific components and more generic components that I can",
    "start": "902880",
    "end": "909180"
  },
  {
    "text": "Leverage so once again you could potentially be running on all three and Dapper really",
    "start": "909180",
    "end": "914339"
  },
  {
    "text": "provides that portability layer but also you know you can really choose the",
    "start": "914339",
    "end": "919560"
  },
  {
    "text": "components that make the most sense based on your current architecture or you know the knowledge within a given",
    "start": "919560",
    "end": "925560"
  },
  {
    "text": "team so we've talked a lot I've talked a lot uh it is something I I find that I'm",
    "start": "925560",
    "end": "931920"
  },
  {
    "text": "quite good at so we're going to take a step back here and we're going to dive into a demo and get away from these",
    "start": "931920",
    "end": "937139"
  },
  {
    "text": "slides for a bit so we're really going to focus on three apis uh the service and vacationized API service invocation",
    "start": "937139",
    "end": "944579"
  },
  {
    "text": "API State Management and publish subscribe so we're gonna walk into a local demo",
    "start": "944579",
    "end": "951720"
  },
  {
    "text": "I'll show you some observability as well with that uh here's kind of what we're going to be seeing so we'll have three",
    "start": "951720",
    "end": "957660"
  },
  {
    "text": "services one called the customer service um and it's going to use the service invocation endpoint to uh to invoke the",
    "start": "957660",
    "end": "965459"
  },
  {
    "text": "publisher and then this publisher is going to do just that it's going to publish uh it's going to take a payload",
    "start": "965459",
    "end": "970560"
  },
  {
    "text": "it's going to publish it to a pub sub broker in this case we'll use redis as our implementation running locally",
    "start": "970560",
    "end": "977760"
  },
  {
    "text": "and then we have a subscriber which will use a declarative subscription to subscribe to that broker and we'll",
    "start": "977760",
    "end": "984899"
  },
  {
    "text": "essentially take the message it receives and we'll publish to a state store and in this case once again we'll use redis",
    "start": "984899",
    "end": "990600"
  },
  {
    "text": "for that as well so let's dive in and see how to get up and running with Dapper on our local machines",
    "start": "990600",
    "end": "997459"
  },
  {
    "text": "okay so we're now dropped into a visual studio code terminal and you can see",
    "start": "997500",
    "end": "1003440"
  },
  {
    "text": "that I've run the very first command to make sure that my local development machine is ready to use Dapper and that",
    "start": "1003440",
    "end": "1010339"
  },
  {
    "text": "means I run a Dapper init using the Dapper CLI so just to highlight we're currently on Dapper version one eleven",
    "start": "1010339",
    "end": "1017600"
  },
  {
    "text": "one which is the latest version and I see a few things got installed into my home directory under the dot",
    "start": "1017600",
    "end": "1023779"
  },
  {
    "text": "Dapper folder I can also see that it's setting up some some components what's nice about Dapper is that out of the box",
    "start": "1023779",
    "end": "1030558"
  },
  {
    "text": "you get a default Pub sub and a default state store component both of which use a redis container that's set up locally",
    "start": "1030559",
    "end": "1037760"
  },
  {
    "text": "on your machine running on Docker I have a placement container that Dapper created this is for running actors I",
    "start": "1037760",
    "end": "1044540"
  },
  {
    "text": "have that redis container that will be used as my Pub sub and state component and then I have the Dapper Zipkin",
    "start": "1044540",
    "end": "1051140"
  },
  {
    "text": "container which will be used to give me that distributed tracing out of the box so now that Dapper is initialized we can",
    "start": "1051140",
    "end": "1058220"
  },
  {
    "text": "actually take a look and see those containers running and we can also see the home directory",
    "start": "1058220",
    "end": "1064280"
  },
  {
    "text": "where my wrapper components have been installed",
    "start": "1064280",
    "end": "1069760"
  },
  {
    "text": "we get that default Pub sub component in the default default state store component now typically people move",
    "start": "1072860",
    "end": "1079820"
  },
  {
    "text": "these into a more accessible directory so let's take a look at where I've put",
    "start": "1079820",
    "end": "1085460"
  },
  {
    "text": "mine if we check out the resources folder I've moved all of the default components",
    "start": "1085460",
    "end": "1091400"
  },
  {
    "text": "into this directory this is a component manifest in this case this component is",
    "start": "1091400",
    "end": "1097100"
  },
  {
    "text": "called Pub sub and it's of type Pub sub.redis so this tells Dapper that I'm",
    "start": "1097100",
    "end": "1102440"
  },
  {
    "text": "using a pub sub component and I'm targeting redis as that backend service and then same with the state store we're",
    "start": "1102440",
    "end": "1109400"
  },
  {
    "text": "also going to be using that local redis the only thing that really changed is We Now call the component state store and",
    "start": "1109400",
    "end": "1115280"
  },
  {
    "text": "we have state DOT redis instead of Pub sub.redis now one thing I've added to my default",
    "start": "1115280",
    "end": "1120919"
  },
  {
    "text": "components is Scopes so Scopes are a way and Dapper for you to control what given",
    "start": "1120919",
    "end": "1126559"
  },
  {
    "text": "Dapper applications can access so in this case because the subscriber is the only application storing State it's the",
    "start": "1126559",
    "end": "1133880"
  },
  {
    "text": "only one that needs to load this component the last thing I'll show you is in",
    "start": "1133880",
    "end": "1139280"
  },
  {
    "text": "addition to having component types we also have a subscription so we talked about the fact that Dapper supports both",
    "start": "1139280",
    "end": "1146360"
  },
  {
    "text": "programmatic and declarative subscriptions and this is what a declarative subscription looks like so",
    "start": "1146360",
    "end": "1151640"
  },
  {
    "text": "we can see that the subscription is called the order subscription it's particularly targeting the orders topic",
    "start": "1151640",
    "end": "1159140"
  },
  {
    "text": "all of the messages that receive on this topic will be sent to the orders route on my application and the pub sub that",
    "start": "1159140",
    "end": "1166880"
  },
  {
    "text": "I'm targeting is Pub sub right and remember that component name is called Pub sub my subscription is targeting",
    "start": "1166880",
    "end": "1173480"
  },
  {
    "text": "that particular component and then once again my subscriber is scoped to this as",
    "start": "1173480",
    "end": "1178760"
  },
  {
    "text": "it's the only application that needs to subscribe to this particular topic on this particular broker",
    "start": "1178760",
    "end": "1185539"
  },
  {
    "text": "so now that we've seen the components and the subscription let's go ahead and see how our applications make use of",
    "start": "1185539",
    "end": "1191840"
  },
  {
    "text": "this so if we take a look we're going to focus specifically on the publisher and the subscriber",
    "start": "1191840",
    "end": "1196940"
  },
  {
    "text": "so my publisher app is a simple.net web API and I am using the dapper.net SDK",
    "start": "1196940",
    "end": "1204919"
  },
  {
    "text": "so we can see here there's a singular endpoint called the orders endpoint and essentially what's going to happen is an",
    "start": "1204919",
    "end": "1212419"
  },
  {
    "text": "order the order endpoint will be invoked either from another application or directly",
    "start": "1212419",
    "end": "1217760"
  },
  {
    "text": "via an API call and it will receive an order payload and all it's going to do",
    "start": "1217760",
    "end": "1222860"
  },
  {
    "text": "is turn around and publish that to a broker using the Dapper Pub sub API so",
    "start": "1222860",
    "end": "1229039"
  },
  {
    "text": "we can see here we get that SDK typed API wrapper so we don't necessarily see",
    "start": "1229039",
    "end": "1234559"
  },
  {
    "text": "the V1 publish API endpoint but that's exactly what this method on the adapter",
    "start": "1234559",
    "end": "1239900"
  },
  {
    "text": "client is doing so we still pass in three bits of information to that API call what's the",
    "start": "1239900",
    "end": "1246080"
  },
  {
    "text": "name of the pub sub component we want to Target the name of the topic and the payload that we'd like to publish as a",
    "start": "1246080",
    "end": "1252140"
  },
  {
    "text": "message so once that's published if we look at the subscriber over here which once",
    "start": "1252140",
    "end": "1258260"
  },
  {
    "text": "again written in C sharp but could definitely be python or go and still have that same interoperability so all",
    "start": "1258260",
    "end": "1264919"
  },
  {
    "text": "of these are quick starts in the Dapper repo feel free to get a feel for them so we have another orders endpoint but",
    "start": "1264919",
    "end": "1272600"
  },
  {
    "text": "this one specifically is targeted by a subscription so if you remember we took a look at that subscription yaml and",
    "start": "1272600",
    "end": "1278660"
  },
  {
    "text": "we'll bring that back up just for one second we see that there's a subscription the scope is that subscriber application it means that any",
    "start": "1278660",
    "end": "1286400"
  },
  {
    "text": "messages that arrive on that orders Topic in the pub sub component will be delivered to this order's endpoint",
    "start": "1286400",
    "end": "1293539"
  },
  {
    "text": "so once a subscriber receives the messages it's going to also use adapter",
    "start": "1293539",
    "end": "1298640"
  },
  {
    "text": "client to save state so this is that V1 State API wrapped in the SDK wrapper so",
    "start": "1298640",
    "end": "1305179"
  },
  {
    "text": "three bits of information what's the state store component name a key for the",
    "start": "1305179",
    "end": "1310580"
  },
  {
    "text": "key value pair which in this case will be an order ID and then we'll pass in the order payload as the value so two",
    "start": "1310580",
    "end": "1317720"
  },
  {
    "text": "very easy very simple applications that make use of two of the dapper apis",
    "start": "1317720",
    "end": "1324260"
  },
  {
    "text": "so we've seen the code we've seen the components and the subscription",
    "start": "1324260",
    "end": "1330020"
  },
  {
    "text": "how do we run this thing so what you can do is use the new multi-op run",
    "start": "1330020",
    "end": "1335419"
  },
  {
    "text": "capability this was introduced in Dapper 110 and enhanced adapter 111 but",
    "start": "1335419",
    "end": "1341419"
  },
  {
    "text": "essentially what it allows you to do is run multiple Dapper applications along",
    "start": "1341419",
    "end": "1346640"
  },
  {
    "text": "with their sidecars without running multiple commands so traditionally you would run a Dapper",
    "start": "1346640",
    "end": "1352820"
  },
  {
    "text": "run for each one of these services but with this multi multi-app run you can",
    "start": "1352820",
    "end": "1357919"
  },
  {
    "text": "consolidate all of that into one manifest so a couple of things to highlight pretty much all of the configuration you",
    "start": "1357919",
    "end": "1365120"
  },
  {
    "text": "would use to run an app via the CLI are available as parameters in this manifest",
    "start": "1365120",
    "end": "1371419"
  },
  {
    "text": "so one of the important elements is letting the letting Dapper know",
    "start": "1371419",
    "end": "1377120"
  },
  {
    "text": "essentially where your resources are sitting so think of this as being your resiliency policies your components your",
    "start": "1377120",
    "end": "1382880"
  },
  {
    "text": "subscriptions and we can put it in common which means it's shared by all of the apps on on execution",
    "start": "1382880",
    "end": "1389419"
  },
  {
    "text": "we also have to give each individual application a Dapper app ID That's",
    "start": "1389419",
    "end": "1394520"
  },
  {
    "text": "Unique now this isn't required they will provide defaults but it's nice because it's really you know critical especially",
    "start": "1394520",
    "end": "1400940"
  },
  {
    "text": "in things like service invocation because your app ID is what you use to tell the Dapper sidecar which app to",
    "start": "1400940",
    "end": "1407539"
  },
  {
    "text": "invoke we obviously pass in some information around application protocol uh the",
    "start": "1407539",
    "end": "1413240"
  },
  {
    "text": "directory where the application code is sitting the command to actually run the application code which will differ",
    "start": "1413240",
    "end": "1419299"
  },
  {
    "text": "obviously across language and framework and then also some information around you know which Port is my application",
    "start": "1419299",
    "end": "1425419"
  },
  {
    "text": "running on and where do I want my logs to be sent which in this case can go to",
    "start": "1425419",
    "end": "1430460"
  },
  {
    "text": "file or console I really love that they added console and Dapper 111 because you can essentially see all the logs",
    "start": "1430460",
    "end": "1436220"
  },
  {
    "text": "streaming very easily for the initial demo we'll use the",
    "start": "1436220",
    "end": "1441980"
  },
  {
    "text": "multi-op Run file specifically to run the publisher and subscriber applications so",
    "start": "1441980",
    "end": "1448220"
  },
  {
    "text": "what we can do here is a Dapper run",
    "start": "1448220",
    "end": "1452919"
  },
  {
    "text": "we want to pass in the name of the multi-app Manifest which is gapper yaml",
    "start": "1453799",
    "end": "1459440"
  },
  {
    "text": "which we can see here and then we will execute",
    "start": "1459440",
    "end": "1464620"
  },
  {
    "text": "so what we can see now is that we have a Dapper sidecar with the app ID publisher",
    "start": "1465140",
    "end": "1470419"
  },
  {
    "text": "and the publishing app is up and running so those blue logs are coming from our application the white from the sidecar",
    "start": "1470419",
    "end": "1476720"
  },
  {
    "text": "and then we'll see we have the subscriber sidecar along with the subscriber application",
    "start": "1476720",
    "end": "1483320"
  },
  {
    "text": "in order to actually test the apis we can do a quick",
    "start": "1483320",
    "end": "1488900"
  },
  {
    "text": "check so right here what I'm going to do is I'm going to post directly to that publisher endpoint",
    "start": "1488900",
    "end": "1494780"
  },
  {
    "text": "it's going to publish a message and then ideally the subscriber subscriber will receive it and",
    "start": "1494780",
    "end": "1501080"
  },
  {
    "text": "post it to the state store we were able to execute the post we can",
    "start": "1501080",
    "end": "1508700"
  },
  {
    "text": "see that we successfully published order 200 to the topic orders using the pub sub component",
    "start": "1508700",
    "end": "1514039"
  },
  {
    "text": "and then we can see that the order 200 was successfully persisted what's nice",
    "start": "1514039",
    "end": "1519559"
  },
  {
    "text": "is we can actually go and check our redis instance so here we can see the contents of our",
    "start": "1519559",
    "end": "1527659"
  },
  {
    "text": "redis store you can see here I'm using redis insights and pointing at that address where my local redis is running",
    "start": "1527659",
    "end": "1534620"
  },
  {
    "text": "and I can see that the subscriber app ID stored order ID 200 the data is that",
    "start": "1534620",
    "end": "1541460"
  },
  {
    "text": "order payload so our key value was successfully stored in the backing redis component using the",
    "start": "1541460",
    "end": "1548779"
  },
  {
    "text": "dapper apis so we've seen the pub sub API in the",
    "start": "1548779",
    "end": "1555020"
  },
  {
    "text": "state API in action we have one more to go the service invocation API so if you",
    "start": "1555020",
    "end": "1560120"
  },
  {
    "text": "remember in the previous demo I did a direct post to the publisher application in order to kick off the process so what",
    "start": "1560120",
    "end": "1567740"
  },
  {
    "text": "we're going to do now is use the service invocation API in order to invoke the",
    "start": "1567740",
    "end": "1573140"
  },
  {
    "text": "publisher app from the customer now think of the customer as essentially just being a generator of orders that",
    "start": "1573140",
    "end": "1579679"
  },
  {
    "text": "are coming in from customers so if we take a look at the application code essentially what this will do is",
    "start": "1579679",
    "end": "1586640"
  },
  {
    "text": "directly invo invoke that orders in point on the publisher application so",
    "start": "1586640",
    "end": "1592520"
  },
  {
    "text": "we're posting to the publisher app ID on the orders method and we're sending it",
    "start": "1592520",
    "end": "1598520"
  },
  {
    "text": "in order payload we should see Dapper service invocation in play which should then publish",
    "start": "1598520",
    "end": "1605779"
  },
  {
    "text": "messages from the publisher and lead to orders stored in state by the subscriber",
    "start": "1605779",
    "end": "1611059"
  },
  {
    "text": "I've added this to our Dapper yaml so we now have three applications that will get kicked off whenever we do that",
    "start": "1611059",
    "end": "1617779"
  },
  {
    "text": "multi-app run without further Ado let's finish this up by running all three at one time",
    "start": "1617779",
    "end": "1626320"
  },
  {
    "text": "our subscriber our customer and our publisher are now up and running",
    "start": "1629600",
    "end": "1635620"
  },
  {
    "text": "so now we're starting to see output we can see that multiple orders are coming in and being sent to the publisher and",
    "start": "1641419",
    "end": "1648500"
  },
  {
    "text": "then we can see that the publisher is receiving them and essentially the subscriber is then storing them so this",
    "start": "1648500",
    "end": "1655039"
  },
  {
    "text": "will happen about every five seconds a new order will come in so let's take a look at redis and see what's happening",
    "start": "1655039",
    "end": "1660500"
  },
  {
    "text": "on the back end so in returning to redis insights we're",
    "start": "1660500",
    "end": "1668600"
  },
  {
    "text": "able to see 10 orders were successfully stored in state meaning that our order generator did in fact successfully post",
    "start": "1668600",
    "end": "1675740"
  },
  {
    "text": "using the service invocation API now I'm in Zipkin once again on my local",
    "start": "1675740",
    "end": "1681679"
  },
  {
    "text": "machine did nothing explicit to configure anything with relation to tracing what we can see is that",
    "start": "1681679",
    "end": "1687679"
  },
  {
    "text": "immediately we're able to see a dependency graph between the services that we were running we can click in and see more granular information about the",
    "start": "1687679",
    "end": "1694940"
  },
  {
    "text": "traces and the calls and the number of Errors we can click in we can look over a period of time maybe",
    "start": "1694940",
    "end": "1701600"
  },
  {
    "text": "the last day and we can run a query to kind of see various calls and traces",
    "start": "1701600",
    "end": "1708380"
  },
  {
    "text": "to see an entire call stack all the way from the customer application to the",
    "start": "1708380",
    "end": "1714200"
  },
  {
    "text": "publisher to the subscriber to the state store so once again all of this just out of the box which is pretty awesome in my",
    "start": "1714200",
    "end": "1721700"
  },
  {
    "text": "book we saw the demo running locally now I want to dive a little bit deeper into a",
    "start": "1721700",
    "end": "1728240"
  },
  {
    "text": "few of these Dapper apis to provide a bit of additional context we'll start with service and vacation",
    "start": "1728240",
    "end": "1734840"
  },
  {
    "text": "keep in mind that the Dapper application ID essentially allows individual",
    "start": "1734840",
    "end": "1740059"
  },
  {
    "text": "applications to communicate with each other putting the burden of service discovery on the Dapper runtime",
    "start": "1740059",
    "end": "1745760"
  },
  {
    "text": "so we start with the customer app the customer app made a grpc called targeting the publisher service but",
    "start": "1745760",
    "end": "1752480"
  },
  {
    "text": "initially this call will go to the local Dapper sidecar running next to the customer app Dapper then discovers the Publisher's",
    "start": "1752480",
    "end": "1759200"
  },
  {
    "text": "location using the name resolution component running on the given platform which in the case of my local machine",
    "start": "1759200",
    "end": "1765140"
  },
  {
    "text": "was mdns Dapper will then forward that request to",
    "start": "1765140",
    "end": "1771320"
  },
  {
    "text": "the Publisher's Dapper sidecar now keep in mind this is all captured with Dapper traces and logs and metrics in open",
    "start": "1771320",
    "end": "1777980"
  },
  {
    "text": "Telemetry format that can be sent to you know whatever monitoring back-end might make sense for you",
    "start": "1777980",
    "end": "1783740"
  },
  {
    "text": "so the publisher Services Dapper sidecar forwards that request to the specified endpoint within the application code and",
    "start": "1783740",
    "end": "1790760"
  },
  {
    "text": "the publisher will then send a response back to the customer application so one thing we didn't touch on quite as",
    "start": "1790760",
    "end": "1798260"
  },
  {
    "text": "much is the fact that we can do mtls using Dapper so you can authenticate",
    "start": "1798260",
    "end": "1804320"
  },
  {
    "text": "calls between Dapper applications as well as between Dapper apps and the Dapper control plane",
    "start": "1804320",
    "end": "1809720"
  },
  {
    "text": "in the event of any call failures or transient errors there is that service invocation resiliency feature that",
    "start": "1809720",
    "end": "1817279"
  },
  {
    "text": "performs automatic retries once again you can create your own custom resiliency policies as well and then a",
    "start": "1817279",
    "end": "1823760"
  },
  {
    "text": "couple of other things that are worth calling out the concept of middleware so you can do things like Dapper oauth",
    "start": "1823760",
    "end": "1830179"
  },
  {
    "text": "which enables you to use oauth authorization on Dapper endpoints for your web apis and you can also create",
    "start": "1830179",
    "end": "1837740"
  },
  {
    "text": "things like access policies in order to dictate what a calling app can do on a",
    "start": "1837740",
    "end": "1843140"
  },
  {
    "text": "called app so stepping over to publish And subscribe there's a couple of important",
    "start": "1843140",
    "end": "1850039"
  },
  {
    "text": "things to call out here that we didn't necessarily highlight in the demo so one is that the pub sub API uses Cloud",
    "start": "1850039",
    "end": "1858140"
  },
  {
    "text": "events by default so Cloud events being a packaging standard for messages you do",
    "start": "1858140",
    "end": "1863299"
  },
  {
    "text": "not have to use cloud events specification but it does follow another you know cloud-native best practice but",
    "start": "1863299",
    "end": "1868520"
  },
  {
    "text": "it can be disabled if you're interacting with Legacy systems that can't receive Cloud events for example there are over",
    "start": "1868520",
    "end": "1875299"
  },
  {
    "text": "18 plugable components for the pub sub building block and there's ways that you",
    "start": "1875299",
    "end": "1880399"
  },
  {
    "text": "can add additional configuration and security settings so for example you can limit which applications can publish or",
    "start": "1880399",
    "end": "1887720"
  },
  {
    "text": "subscribe to a given topic through topic scopes you can also set things like dead letter",
    "start": "1887720",
    "end": "1892940"
  },
  {
    "text": "cues and resiliency policies on Pub sub API and you also get that traceability",
    "start": "1892940",
    "end": "1899120"
  },
  {
    "text": "so we saw that the open Telemetry traces and the metrics go Way Beyond just",
    "start": "1899120",
    "end": "1904760"
  },
  {
    "text": "service to service but also extend to Pub sub API and other building blocks",
    "start": "1904760",
    "end": "1911299"
  },
  {
    "text": "one thing that is worth calling out as well is that the subscriber will get at least once message delivery the broker",
    "start": "1911299",
    "end": "1917960"
  },
  {
    "text": "will make sure that each subscriber receives the message at least once that's placed on the pub sub broker",
    "start": "1917960",
    "end": "1924799"
  },
  {
    "text": "last but not least I want to briefly touch on the State Management API and some of its features",
    "start": "1924799",
    "end": "1930799"
  },
  {
    "text": "So within the State Management API you have the ability to choose things like strong consistency or eventual",
    "start": "1930799",
    "end": "1936679"
  },
  {
    "text": "consistency so setting specific requirements on certain operations you can do optimistic concurrency control",
    "start": "1936679",
    "end": "1943100"
  },
  {
    "text": "with e-tags and you can even do transactions there's also the opportunity for you to",
    "start": "1943100",
    "end": "1948740"
  },
  {
    "text": "set date time to live applications can set a time to live per state store and",
    "start": "1948740",
    "end": "1954799"
  },
  {
    "text": "these states essentially won't be retrieved after they've expired and then ultimately you can also Implement things",
    "start": "1954799",
    "end": "1961340"
  },
  {
    "text": "like State encryption which allows for automatic client encryption of application state with support for key",
    "start": "1961340",
    "end": "1968120"
  },
  {
    "text": "rotation so we didn't cover those today but once again it's very powerful that",
    "start": "1968120",
    "end": "1973760"
  },
  {
    "text": "we get this flexibility of the state store interoperability and that component model with that consistent API",
    "start": "1973760",
    "end": "1980120"
  },
  {
    "text": "but there are definitely some additional features that the State Management API provides so once again feel free to",
    "start": "1980120",
    "end": "1987020"
  },
  {
    "text": "explore so I hope you're excited now it's time to jump into the exact same demo",
    "start": "1987020",
    "end": "1994159"
  },
  {
    "text": "application but with a slightly different scenario so instead of running Dapper locally on my machine we will be",
    "start": "1994159",
    "end": "2001299"
  },
  {
    "text": "targeting a kubernetes deployment on Google Cloud platform using Google",
    "start": "2001299",
    "end": "2006700"
  },
  {
    "text": "kubernetes engine and instead of using redis in this case for the component",
    "start": "2006700",
    "end": "2012039"
  },
  {
    "text": "implementation for Pub sub we're going to switch that out with Kafka it won't make any application code changes but",
    "start": "2012039",
    "end": "2017559"
  },
  {
    "text": "we'll see how we can run dab around kubernetes and how we can make use of that swappable component model",
    "start": "2017559",
    "end": "2024960"
  },
  {
    "text": "okay so welcome back we are back in Visual Studio code and we are ready to",
    "start": "2026679",
    "end": "2031720"
  },
  {
    "text": "dive into this kubernetes demo one of the first things that I want to show you is just a few resources that",
    "start": "2031720",
    "end": "2038140"
  },
  {
    "text": "I've already deployed to the cluster so we can see here I have a Kafka namespace",
    "start": "2038140",
    "end": "2043720"
  },
  {
    "text": "I actually deployed Kafka as a home chart to this namespace for use as our",
    "start": "2043720",
    "end": "2048940"
  },
  {
    "text": "Pub sub broker and then we have a redis namespace which is hosting a redis deployment and that will be used as our",
    "start": "2048940",
    "end": "2055599"
  },
  {
    "text": "state store implementation and then finally I'm going to show you the dropper system",
    "start": "2055599",
    "end": "2061960"
  },
  {
    "text": "namespace you have the adapter control plane up and running and really the two",
    "start": "2061960",
    "end": "2067000"
  },
  {
    "text": "major components to call out here are the sidecar injector which is responsible for ensuring any new",
    "start": "2067000",
    "end": "2072520"
  },
  {
    "text": "deployments that have Dapper enabled get a dab or sidecar and the Dapper operator",
    "start": "2072520",
    "end": "2077800"
  },
  {
    "text": "which really handles those component updates and things like that so how did I actually deploy wrapper on",
    "start": "2077800",
    "end": "2085118"
  },
  {
    "text": "this cluster it'll look familiar pretty easy it's a Dapper emit Dash K so",
    "start": "2085119",
    "end": "2090398"
  },
  {
    "text": "essentially all you're saying here is you want to initialize Dapper and Target a kubernetes cluster instead of your",
    "start": "2090399",
    "end": "2096040"
  },
  {
    "text": "local development environment so what are we changing between the previous demo and this demo",
    "start": "2096040",
    "end": "2104140"
  },
  {
    "text": "the main thing to call out is really our component implementations so if we take a look at our resources",
    "start": "2104140",
    "end": "2109780"
  },
  {
    "text": "here we can see the Manifest that we'll be deploying to our kubernetes cluster instead of using a component for Pub sub",
    "start": "2109780",
    "end": "2117400"
  },
  {
    "text": "of type Pub sub.reddis we're going to use Pub sub.kafka we're going to pass in some information about the locally",
    "start": "2117400",
    "end": "2123760"
  },
  {
    "text": "running Kafka instance in our cluster and the same will go for our state store",
    "start": "2123760",
    "end": "2128800"
  },
  {
    "text": "component so we are still targeting a state.redis however we're changing the",
    "start": "2128800",
    "end": "2134619"
  },
  {
    "text": "information around the host and the password in order to connect to the one running in the cluster",
    "start": "2134619",
    "end": "2141400"
  },
  {
    "text": "one thing to highlight that we haven't touched on is that you can actually make use of dapper secret stores within a",
    "start": "2141400",
    "end": "2147700"
  },
  {
    "text": "component so what this is telling Dapper is that the redis password is stored in",
    "start": "2147700",
    "end": "2152920"
  },
  {
    "text": "kubernetes secrets and so instead of putting that plain text value Dapper",
    "start": "2152920",
    "end": "2157960"
  },
  {
    "text": "will actually go and retrieve that redis password from the kubernetes secrets tour and then last but not least we see the",
    "start": "2157960",
    "end": "2164619"
  },
  {
    "text": "same subscription that we had before we're just now deploying it to the cluster",
    "start": "2164619",
    "end": "2170160"
  },
  {
    "text": "okay so now's our opportunity to deploy everything and make sure it runs as",
    "start": "2170619",
    "end": "2175660"
  },
  {
    "text": "expected so we'll go ahead and do a k apply but what we can see is that we have a",
    "start": "2175660",
    "end": "2181900"
  },
  {
    "text": "service and deployment that were created for the publisher same for the subscriber and then our two components in our subscription",
    "start": "2181900",
    "end": "2188079"
  },
  {
    "text": "so in an Ideal World we should see that they're up and running and that they both have adapter",
    "start": "2188079",
    "end": "2193720"
  },
  {
    "text": "side cars so let's give that subscriber one more second now it's ready there's two containers running within",
    "start": "2193720",
    "end": "2199960"
  },
  {
    "text": "the Pod one for application workload the other is adapter sidecar so how did",
    "start": "2199960",
    "end": "2205180"
  },
  {
    "text": "dapper actually know to inject these deployments with Dapper sidecars let's",
    "start": "2205180",
    "end": "2210640"
  },
  {
    "text": "take a quick look we will describe one of our pods",
    "start": "2210640",
    "end": "2217119"
  },
  {
    "text": "and when we do we should see a few important annotations so we can see that here",
    "start": "2217119",
    "end": "2222339"
  },
  {
    "text": "we can see the uh the Dapper app ID the Dapper app for it and most importantly we can see that Dapper enabled is set to",
    "start": "2222339",
    "end": "2229660"
  },
  {
    "text": "true so that's what indicates to the Dapper sidecar injector that this application is interested in becoming",
    "start": "2229660",
    "end": "2235359"
  },
  {
    "text": "Dapper enabled awesome so another thing we can do is get the",
    "start": "2235359",
    "end": "2241480"
  },
  {
    "text": "logs for one of our pods and make sure that everything is up and running as we expect so we can go ahead and check out",
    "start": "2241480",
    "end": "2248440"
  },
  {
    "text": "the application code so we can see here everything is running as expected",
    "start": "2248440",
    "end": "2254140"
  },
  {
    "text": "and then we can do the same this time we're going to get the Dapper",
    "start": "2254140",
    "end": "2259180"
  },
  {
    "text": "D sidecar logs so here we can see a ton of output from the Dapper sidecar and really the most",
    "start": "2259180",
    "end": "2266380"
  },
  {
    "text": "important thing we want to look for is that the components we expect are loaded",
    "start": "2266380",
    "end": "2272460"
  },
  {
    "text": "so it took me just a second but I was able to find that important piece of information where we can see that the",
    "start": "2273940",
    "end": "2279160"
  },
  {
    "text": "pub sub component was loaded and that's exactly what we're looking for so let's go ahead and let's get the logs",
    "start": "2279160",
    "end": "2286240"
  },
  {
    "text": "for the subscriber as well and we're also going to look at the",
    "start": "2286240",
    "end": "2292660"
  },
  {
    "text": "Dapper D logs once again this is the first place that I go anytime I'm trying to make sure that you know my components",
    "start": "2292660",
    "end": "2300040"
  },
  {
    "text": "are appropriately loaded for each of the respective applications so we'll do a quick search here so we",
    "start": "2300040",
    "end": "2307420"
  },
  {
    "text": "see that the Kafka broker is was loaded and then in this case we're also looking for a red estate store so if we look for",
    "start": "2307420",
    "end": "2314380"
  },
  {
    "text": "a redis we can see that the component loaded for the state store as well so everything should be up and running",
    "start": "2314380",
    "end": "2321700"
  },
  {
    "text": "foreign so now we need to test this so before we posted to the publisher service on a local address but now we",
    "start": "2321700",
    "end": "2329380"
  },
  {
    "text": "should post to the one running in kubernetes so if we get new Services we created we have a service of type load",
    "start": "2329380",
    "end": "2336460"
  },
  {
    "text": "balancer here that we can swap out",
    "start": "2336460",
    "end": "2341880"
  },
  {
    "text": "and now what we should see is when we make this post we should see the subscriber receive this",
    "start": "2344440",
    "end": "2350020"
  },
  {
    "text": "so let's go ahead and Trail the subscriber logs",
    "start": "2350020",
    "end": "2354599"
  },
  {
    "text": "okay so let's send this request and we see that the order was",
    "start": "2358180",
    "end": "2363520"
  },
  {
    "text": "successfully persisted which indicates to us that the publisher was successful and it was received on the broker and",
    "start": "2363520",
    "end": "2369579"
  },
  {
    "text": "that the subscriber was able to retrieve that so with our demo application",
    "start": "2369579",
    "end": "2374619"
  },
  {
    "text": "successfully deployed to kubernetes Let's dive a little bit into one of the newer apis that happens to be my",
    "start": "2374619",
    "end": "2380740"
  },
  {
    "text": "personal favorite the Dapper workflows API Dapper workflow makes it easy for",
    "start": "2380740",
    "end": "2385900"
  },
  {
    "text": "developers to write business logic and Integrations in a reliable way since workflows are stateful they support long",
    "start": "2385900",
    "end": "2391780"
  },
  {
    "text": "running and fault tolerant applications which is ideal for orchestrating microservices the workflow building",
    "start": "2391780",
    "end": "2398260"
  },
  {
    "text": "block Works seamlessly with other building blocks like service invocation Pub sub State and findings",
    "start": "2398260",
    "end": "2404260"
  },
  {
    "text": "so now we're going to dive into a little bit more detail on Core Concepts how workflows operate and interact with the",
    "start": "2404260",
    "end": "2411820"
  },
  {
    "text": "Dapper sidecar and then we'll show a quick demo with Dapper workflow you will",
    "start": "2411820",
    "end": "2417280"
  },
  {
    "text": "essentially write a series of what are called activities and compose those activities together to make up that",
    "start": "2417280",
    "end": "2422440"
  },
  {
    "text": "workflow the workflows themselves describe how these actions are executed and the order in which the actions are",
    "start": "2422440",
    "end": "2428740"
  },
  {
    "text": "executed so workflows themselves don't make any external service calls or do like complex computation instead they",
    "start": "2428740",
    "end": "2435760"
  },
  {
    "text": "delegate these to the activities which perform the work Dapper workflows also allow you to",
    "start": "2435760",
    "end": "2441880"
  },
  {
    "text": "schedule essentially these reminder like durable delays that can be for a Time range of minutes days or even years so",
    "start": "2441880",
    "end": "2449380"
  },
  {
    "text": "imagine a scenario in which your application I don't know needs to wait for a certain period of time like five",
    "start": "2449380",
    "end": "2456520"
  },
  {
    "text": "days to receive approval or five days in order for a user to perform some type of",
    "start": "2456520",
    "end": "2462160"
  },
  {
    "text": "verification and if they don't then you essentially want to take a specific action and that's what timers allow you",
    "start": "2462160",
    "end": "2467920"
  },
  {
    "text": "to do workflows are able to do this by maintaining a write-only history log of",
    "start": "2467920",
    "end": "2474700"
  },
  {
    "text": "all of their operations using an event sourcing pattern so because of this you don't necessarily want the history on",
    "start": "2474700",
    "end": "2481599"
  },
  {
    "text": "one particular workflow to grow unbounded which can happen if you're executing thousands of activities within",
    "start": "2481599",
    "end": "2488740"
  },
  {
    "text": "a given workflow so that's where Child workflows come into play you can have a workflow that schedules",
    "start": "2488740",
    "end": "2494380"
  },
  {
    "text": "child workflows that have their own instance IDs have their own history um and really help distribute tasks",
    "start": "2494380",
    "end": "2499960"
  },
  {
    "text": "across workflow instances and then last but not least external events so this is a new ported",
    "start": "2499960",
    "end": "2506260"
  },
  {
    "text": "capability as of dapper 111 but essentially what this allows your workflow to do is wait for an external",
    "start": "2506260",
    "end": "2512200"
  },
  {
    "text": "event so it can schedule a wait for an external event task that will subscribe to a particular event and await those",
    "start": "2512200",
    "end": "2519280"
  },
  {
    "text": "tasks so the workflow will block any execution until the event is received and then",
    "start": "2519280",
    "end": "2525220"
  },
  {
    "text": "essentially you can take mitigating action based on the result of that event so a good example of when you might need",
    "start": "2525220",
    "end": "2530980"
  },
  {
    "text": "this is for human intervention during a workflow execution",
    "start": "2530980",
    "end": "2536880"
  },
  {
    "text": "so how does the Dapper workflow running in your application code actually interact with the Dapper sidecar so the",
    "start": "2537040",
    "end": "2543880"
  },
  {
    "text": "Dapper sidecar is really responsible for the scheduling and management of your workflow activity execution so it's",
    "start": "2543880",
    "end": "2551500"
  },
  {
    "text": "really the execution engine whereas the workflow itself is something that you write in your application code using the",
    "start": "2551500",
    "end": "2558160"
  },
  {
    "text": "Dapper workflow authoring SDK and then the Dapper engine will store a",
    "start": "2558160",
    "end": "2564400"
  },
  {
    "text": "event stream of all of the activity execution results and things of that nature which can then be replayed as",
    "start": "2564400",
    "end": "2570579"
  },
  {
    "text": "needed and help to ensure that stateful reliability when your workflow application starts up",
    "start": "2570579",
    "end": "2577240"
  },
  {
    "text": "it will use the SDK to send a grpc request to the sidecar and it will then",
    "start": "2577240",
    "end": "2582700"
  },
  {
    "text": "get back a stream of workflow work items so this could be anything from like",
    "start": "2582700",
    "end": "2587980"
  },
  {
    "text": "start a new workflow or schedule a particular activity and then in response it will return the results back to the",
    "start": "2587980",
    "end": "2594220"
  },
  {
    "text": "Dapper engine which will store those in state I'm so sad to say that we are on our",
    "start": "2594220",
    "end": "2601060"
  },
  {
    "text": "last demo of the session but super excited to show off a little bit of how Dapper workflows works at a very",
    "start": "2601060",
    "end": "2606700"
  },
  {
    "text": "primitive level so we're going to start with a very basic hello world example if you take a look at this post request you",
    "start": "2606700",
    "end": "2613359"
  },
  {
    "text": "can see that we will actually Target a hello world workflow and we're going to use the start API passing in an instance",
    "start": "2613359",
    "end": "2620800"
  },
  {
    "text": "ID which in this case is 10 but it could be an order ID or another significant piece of data that can represent that",
    "start": "2620800",
    "end": "2627760"
  },
  {
    "text": "particular workflow instance when we do that we'll pass in a single input a name and essentially we want the",
    "start": "2627760",
    "end": "2634119"
  },
  {
    "text": "workflow to create a greeting and then return that and then we'll consider the workflow complete so super basic just a",
    "start": "2634119",
    "end": "2641079"
  },
  {
    "text": "single activity but we can imagine how this would grow and evolve as you add more activities in more complex logic so",
    "start": "2641079",
    "end": "2648160"
  },
  {
    "text": "uh yeah let's dive into it okay so we are back in Visual Studio to",
    "start": "2648160",
    "end": "2654460"
  },
  {
    "text": "check out a simple hello world workflow example so the first thing I want to call out when you're using Dapper",
    "start": "2654460",
    "end": "2660579"
  },
  {
    "text": "workflows is once again there's an authoring SDK that's required right now there's support for C sharp and python",
    "start": "2660579",
    "end": "2668020"
  },
  {
    "text": "so let's check out the program.cs just want to call out one important thing that you need to do so one is that",
    "start": "2668020",
    "end": "2673900"
  },
  {
    "text": "you're going to register your workflow so in this case it's called the hello world workflow and then you're also",
    "start": "2673900",
    "end": "2680140"
  },
  {
    "text": "going to register activities the activity will perform all of the computation business logic and any",
    "start": "2680140",
    "end": "2685900"
  },
  {
    "text": "external calls let's check out that workflow we have a workflow context which will",
    "start": "2685900",
    "end": "2691540"
  },
  {
    "text": "provide information about the given workflow that we're in and then we also have the workflow which expects a",
    "start": "2691540",
    "end": "2698619"
  },
  {
    "text": "particular input and a particular output so in this case the input will be a string and the output will be a string",
    "start": "2698619",
    "end": "2705040"
  },
  {
    "text": "and then we're calling one activity so in this case we use the call activity async method passing our input of type",
    "start": "2705040",
    "end": "2711940"
  },
  {
    "text": "string and then invoking that particular activity and returning the result",
    "start": "2711940",
    "end": "2717099"
  },
  {
    "text": "so if we look at that create greeting activity you'll see that an activity also has a particular input and a",
    "start": "2717099",
    "end": "2723460"
  },
  {
    "text": "particular output so in this case we've taken a string name and return a string greeting so all we're doing here is",
    "start": "2723460",
    "end": "2730240"
  },
  {
    "text": "selecting a random greeting and appending that to the name that was passed in and then we'll return this as",
    "start": "2730240",
    "end": "2736000"
  },
  {
    "text": "a result from the activity back to the workflow hopefully the activity is where all of",
    "start": "2736000",
    "end": "2741520"
  },
  {
    "text": "the error handling will be and everything will then be propagated back up to the workflow itself in order to",
    "start": "2741520",
    "end": "2748060"
  },
  {
    "text": "you know dictate what the next action should be based on the return result so let's see this in action what we're",
    "start": "2748060",
    "end": "2755079"
  },
  {
    "text": "going to do here is we're going to do a Dapper run and we're going to kick off the workflow instance so just passing in some of that",
    "start": "2755079",
    "end": "2762040"
  },
  {
    "text": "basic information like the Dapper app ID the application port and then the path",
    "start": "2762040",
    "end": "2767140"
  },
  {
    "text": "to our our state store that will be used as the work item stream",
    "start": "2767140",
    "end": "2772839"
  },
  {
    "text": "persistence so when I do this we should see some pretty good output",
    "start": "2772839",
    "end": "2779140"
  },
  {
    "text": "the major things to call out here is that you can see we're registering a component for the Dapper workflow engine",
    "start": "2779140",
    "end": "2784540"
  },
  {
    "text": "and that we're initializing the Dapper workflow component and then we can see that we established the work stream",
    "start": "2784540",
    "end": "2790240"
  },
  {
    "text": "which is really critical to help us know that our application and the Dapper side car are up and running and ready to go",
    "start": "2790240",
    "end": "2799000"
  },
  {
    "text": "so let's go ahead and Trigger the workflow using a simple HTTP post so you",
    "start": "2799000",
    "end": "2805060"
  },
  {
    "text": "can see here we're invoking that workflows API using the Dapper engine for workflows we're passing in the name",
    "start": "2805060",
    "end": "2811540"
  },
  {
    "text": "of the workflow that we want to start and then we're passing in a unique instance ID so this could be 10 it could",
    "start": "2811540",
    "end": "2817900"
  },
  {
    "text": "be 100 it could be you know a particular order ID or something with more business context or it could be a good which is",
    "start": "2817900",
    "end": "2824140"
  },
  {
    "text": "what we'll use here and then we pass in a simple name with the goal of returning a greeting",
    "start": "2824140",
    "end": "2830200"
  },
  {
    "text": "response so we kick that off we can see that it was accepted and then we can get the status and see that immediately it was",
    "start": "2830200",
    "end": "2836859"
  },
  {
    "text": "completed we sent in Kindle and got back konichiwa Kindle we could do this again",
    "start": "2836859",
    "end": "2841960"
  },
  {
    "text": "and get a different response so we can see here that there's a runtime status one thing that you can",
    "start": "2841960",
    "end": "2848319"
  },
  {
    "text": "also do with Dapper workflows is return your own custom status that help provide more context in terms of where your",
    "start": "2848319",
    "end": "2854560"
  },
  {
    "text": "workflow is in the processing Pipeline and obviously if you had a longer workflow you could pull this iteratively",
    "start": "2854560",
    "end": "2860740"
  },
  {
    "text": "to make sure that the workflow is still running and still healthy so we can see here too that we're getting log output",
    "start": "2860740",
    "end": "2866800"
  },
  {
    "text": "from the workflow instance it got kicked off and then it was finished with a completed status",
    "start": "2866800",
    "end": "2872079"
  },
  {
    "text": "so with the third and final demo complete it's time for us to wrap up today's session and talk about ways that",
    "start": "2872079",
    "end": "2878319"
  },
  {
    "text": "you can continue to stay engaged and involved if you're interested in learning more so what did we talk about today we",
    "start": "2878319",
    "end": "2885400"
  },
  {
    "text": "talked about a lot of the benefits that Dapper provides when building micro service based applications",
    "start": "2885400",
    "end": "2890619"
  },
  {
    "text": "so one of those benefits is the ability for the developers to focus on writing business logic instead of creating",
    "start": "2890619",
    "end": "2896560"
  },
  {
    "text": "complex applications full of plumbing code to handle a lot of these distributed application concerns",
    "start": "2896560",
    "end": "2901900"
  },
  {
    "text": "developers can instead adopt a consistent Dapper API standard and offload that responsibility to dapper",
    "start": "2901900",
    "end": "2909099"
  },
  {
    "text": "in addition developers are empowered to follow best practices by using a lot of the common patterns that we see in",
    "start": "2909099",
    "end": "2915700"
  },
  {
    "text": "distributed application development in addition you gain a ton of flexibility right Dapper is completely",
    "start": "2915700",
    "end": "2921940"
  },
  {
    "text": "agnostic from a language perspective empowering polyglot development and also provides the swapp ability of components",
    "start": "2921940",
    "end": "2928300"
  },
  {
    "text": "making infrastructure lock-in a thing of the past with Dapper we get out of the box",
    "start": "2928300",
    "end": "2934480"
  },
  {
    "text": "cross-cutting concerns around things like resiliency and observability and we can also adopt Dapper incrementally so",
    "start": "2934480",
    "end": "2940720"
  },
  {
    "text": "if you're interested after today and trying out just the State Management API or just the pub sub API that's totally",
    "start": "2940720",
    "end": "2946480"
  },
  {
    "text": "available to you and totally okay if you want to use all of the apis once again all the better",
    "start": "2946480",
    "end": "2953260"
  },
  {
    "text": "and then last but not least we get to provide consistency for developers making it easier for them to get up and",
    "start": "2953260",
    "end": "2959380"
  },
  {
    "text": "running quickly building out new modern applications in the cloud in addition today we've also covered how quickly the",
    "start": "2959380",
    "end": "2966099"
  },
  {
    "text": "Dapper project is growing there's been significant contributions over the past couple of releases seeing a couple of",
    "start": "2966099",
    "end": "2972640"
  },
  {
    "text": "new apis being introduced and also the stability of the configuration API so",
    "start": "2972640",
    "end": "2978400"
  },
  {
    "text": "the Dapper apis will continue to evolve and grow to make sure developers are empowered to build applications more",
    "start": "2978400",
    "end": "2984280"
  },
  {
    "text": "effectively in addition to the inclusion of new building block apis there's also been",
    "start": "2984280",
    "end": "2990160"
  },
  {
    "text": "other significant highlights from the past couple of releases Dapper 110 from",
    "start": "2990160",
    "end": "2995200"
  },
  {
    "text": "February 2023 and Dapper 111 which launched it launched in July of 2023. so",
    "start": "2995200",
    "end": "3000960"
  },
  {
    "text": "a couple of just major highlights I would say a lot more granular metrics metrics around service invocation that",
    "start": "3000960",
    "end": "3006720"
  },
  {
    "text": "have been enhanced we now have metrics around actors timers and reminders even resiliency policies",
    "start": "3006720",
    "end": "3013079"
  },
  {
    "text": "resiliency also went stable in a recent release which is really exciting and we also see a couple of other major",
    "start": "3013079",
    "end": "3019740"
  },
  {
    "text": "features like the ability to invoke non-dapper endpoints using HTTP so we",
    "start": "3019740",
    "end": "3025140"
  },
  {
    "text": "talked about the adapter service invocation API but now Dapper allows you to communicate with endpoints that don't",
    "start": "3025140",
    "end": "3031859"
  },
  {
    "text": "use Dapper so they still provide you with that consistent API but also the ability to use resiliency policies get",
    "start": "3031859",
    "end": "3038880"
  },
  {
    "text": "that tracing enabled for observability purposes and even use Access Control lists so we'll continue to see",
    "start": "3038880",
    "end": "3045480"
  },
  {
    "text": "additional Advanced capabilities in future releases with dapper 112.",
    "start": "3045480",
    "end": "3051780"
  },
  {
    "text": "the momentum of dapper contributions and the growth of the project has continued to empower more and more organizations",
    "start": "3051780",
    "end": "3058260"
  },
  {
    "text": "to adopt Dapper and to use these apis as a standard so it's great to see the",
    "start": "3058260",
    "end": "3063420"
  },
  {
    "text": "Dapper user base continuing to grow in addition there's also been a recent case study published through the cncf",
    "start": "3063420",
    "end": "3070140"
  },
  {
    "text": "about de facto's use of dapper so definitely check that out if you're interested in seeing a more real world",
    "start": "3070140",
    "end": "3076079"
  },
  {
    "text": "example finally a list of resources if you want to continue diving into Dapper after our",
    "start": "3076079",
    "end": "3082920"
  },
  {
    "text": "session today so definitely check out the Dapper website and go through the Dapper quick starts many of which inspired today's demos there's also code",
    "start": "3082920",
    "end": "3090599"
  },
  {
    "text": "available at diagrams especially if you want to dive deeper into the workflow example",
    "start": "3090599",
    "end": "3095940"
  },
  {
    "text": "join the Discord Community there's a group of over 6 000 on Discord that talk about Dapper so I would love to see all",
    "start": "3095940",
    "end": "3103260"
  },
  {
    "text": "of you there and check out our YouTube channel as well you can also follow Dabber Dev on",
    "start": "3103260",
    "end": "3109020"
  },
  {
    "text": "Twitter to keep up with the latest updates on the project and if you're interested more specifically and running",
    "start": "3109020",
    "end": "3114420"
  },
  {
    "text": "and managing Dapper at scale definitely reach out to us at diagram.io",
    "start": "3114420",
    "end": "3121140"
  }
]