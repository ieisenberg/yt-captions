[
  {
    "text": "hello everyone and thanks for watching today we're going to talk about helm the package manager for kubernetes",
    "start": "880",
    "end": "6879"
  },
  {
    "text": "and the security considerations you need to have when using and incorporating health charts",
    "start": "6879",
    "end": "12080"
  },
  {
    "text": "into your system as we all know as engineers we all strive to use the best",
    "start": "12080",
    "end": "17680"
  },
  {
    "text": "technology to solve the problems we're facing and cloud-native infrastructure and containerized workloads",
    "start": "17680",
    "end": "24000"
  },
  {
    "text": "are fueling that innovation nowadays i was reading a cncf survey that said that 92 percent of the",
    "start": "24000",
    "end": "31119"
  },
  {
    "text": "organizations surveyed are using containers in production and 83 of those are using kubernetes in",
    "start": "31119",
    "end": "37600"
  },
  {
    "text": "production so there is wide adoption of kubernetes and the use of kubernetes is increasing",
    "start": "37600",
    "end": "43760"
  },
  {
    "text": "at the same time we're seeing an increase in cloud adoption through our research we're also seeing",
    "start": "43760",
    "end": "49440"
  },
  {
    "text": "that there's been over 30 billion records exposed to the cloud mix configurations across",
    "start": "49440",
    "end": "55360"
  },
  {
    "text": "200 different breaches in the last two years and these breaches have happened in all types of organizations",
    "start": "55360",
    "end": "61440"
  },
  {
    "text": "from small to large and the problem is that while it's easy to get started with cloud native",
    "start": "61440",
    "end": "66720"
  },
  {
    "text": "technologies it's also easy to make security mistakes that can put systems at risk",
    "start": "66720",
    "end": "74479"
  },
  {
    "text": "so having security in mind while using cloud native technologies is important so let's start discussing",
    "start": "74720",
    "end": "80479"
  },
  {
    "text": "one of these technologies called helm and i think the best way to do that is to take a look at similar technologies",
    "start": "80479",
    "end": "87119"
  },
  {
    "text": "for example if i'm trying to install a package on my mac i usually use homebrew to install that",
    "start": "87119",
    "end": "93840"
  },
  {
    "text": "package whenever i have an option and here you see how i would install my sql",
    "start": "93840",
    "end": "99280"
  },
  {
    "text": "on my laptop and homebrew takes care of figuring out all the dependencies necessary and any",
    "start": "99280",
    "end": "105759"
  },
  {
    "text": "updates i need to perform to properly install my sql which makes it very easy to get",
    "start": "105759",
    "end": "110880"
  },
  {
    "text": "on a local database another way to get my sql is to use docker that my sql docker image",
    "start": "110880",
    "end": "118159"
  },
  {
    "text": "comes pre-packaged with everything you need to get a mysql database running as a docker container",
    "start": "118159",
    "end": "123840"
  },
  {
    "text": "here's an example of how you would run that if you already have docker installed on",
    "start": "123840",
    "end": "129200"
  },
  {
    "text": "your laptop this is an easy way to get mysql without having to bloat your local system",
    "start": "129200",
    "end": "134239"
  },
  {
    "text": "and it's a good option if you need an informal database for local testing where once you're done you can just",
    "start": "134239",
    "end": "141040"
  },
  {
    "text": "destroy your container similarly helm helps us install packages",
    "start": "141040",
    "end": "148720"
  },
  {
    "text": "in our kubernetes cluster by executing helm install helm will download something called a helm chart",
    "start": "148720",
    "end": "155680"
  },
  {
    "text": "which is basically templated to kubernetes configuration files that have been pre-packaged with all of the settings",
    "start": "155680",
    "end": "162560"
  },
  {
    "text": "and dependencies necessary to run this target state system in your kubernetes cluster if you have",
    "start": "162560",
    "end": "170000"
  },
  {
    "text": "the option to customize this with variables for the template if needed and the benefit is that you can get up",
    "start": "170000",
    "end": "175920"
  },
  {
    "text": "and running easily without having to write all the configuration files yourself",
    "start": "175920",
    "end": "182159"
  },
  {
    "text": "so at first glance using helm sounds awesome because now if you want to install any software that",
    "start": "183280",
    "end": "189040"
  },
  {
    "text": "has been packaged into a helm chart you can just do a helm install and install it without breaking",
    "start": "189040",
    "end": "194640"
  },
  {
    "text": "your head to figure out how to get the software up and running and that's really great for experimenting but you do have to be",
    "start": "194640",
    "end": "201200"
  },
  {
    "text": "careful when installing packages that have been written by third parties with the goal of getting the software up",
    "start": "201200",
    "end": "206640"
  },
  {
    "text": "and running as the chart may not have necessarily all the security considerations",
    "start": "206640",
    "end": "212560"
  },
  {
    "text": "for your production environment embedded in by default and that's what we'll discuss today how",
    "start": "212560",
    "end": "218159"
  },
  {
    "text": "to safely use helm in your projects making sure that your security and operational requirements are met",
    "start": "218159",
    "end": "225519"
  },
  {
    "text": "while maintaining the benefits of the easy views of a package manager",
    "start": "225519",
    "end": "231760"
  },
  {
    "text": "before we get started let me talk a little bit about myself my name is cesar rodriguez and i'm a developer advocate",
    "start": "232640",
    "end": "238319"
  },
  {
    "text": "at acurex i've been working as a cloud security architect for most of my career in the",
    "start": "238319",
    "end": "243360"
  },
  {
    "text": "military and financial industry and i enjoy contributing to open source projects",
    "start": "243360",
    "end": "249680"
  },
  {
    "text": "so i like to break down the steps we need to follow to use helm securely into three the",
    "start": "250879",
    "end": "257040"
  },
  {
    "text": "first step is to identify the security requirements and the best practices applicable to the",
    "start": "257040",
    "end": "263040"
  },
  {
    "text": "system you're trying to secure this is going to be specific to your project and the business",
    "start": "263040",
    "end": "268080"
  },
  {
    "text": "objectives of that project the next step is to use something called policy as code and this is where we take",
    "start": "268080",
    "end": "274479"
  },
  {
    "text": "the policies and requirement that we've identified and convert them into a declarative",
    "start": "274479",
    "end": "279520"
  },
  {
    "text": "language that can be used to evaluate our infrastructure configuration code and the helm charts we're using",
    "start": "279520",
    "end": "286639"
  },
  {
    "text": "step number three is taking that policy as code one more step and implementing guard rails to make sure that",
    "start": "286639",
    "end": "294560"
  },
  {
    "text": "the most important policies are always being followed and to give engineers early feedback on",
    "start": "294560",
    "end": "301199"
  },
  {
    "text": "any code or helm charts that may be in violation of our requirements",
    "start": "301199",
    "end": "307440"
  },
  {
    "text": "so let's start with step number one and this is where we're identifying the policies that are applicable to our",
    "start": "308960",
    "end": "314800"
  },
  {
    "text": "system and capturing our requirements and like i said different systems are going to have different requirements so for example a",
    "start": "314800",
    "end": "321919"
  },
  {
    "text": "banking system is going to have a different requirement than a music streaming service or an e-commerce application and the",
    "start": "321919",
    "end": "328000"
  },
  {
    "text": "important thing here is to identify what are those requirements going to be early in the project",
    "start": "328000",
    "end": "333759"
  },
  {
    "text": "so you can start evaluating your infrastructure and configuration against the requirements as early as possible trying to",
    "start": "333759",
    "end": "340800"
  },
  {
    "text": "retroactively apply security controls to your system once it's in production is always very",
    "start": "340800",
    "end": "346320"
  },
  {
    "text": "painful and costly so the first thing i always try to do",
    "start": "346320",
    "end": "352000"
  },
  {
    "text": "when identifying policies is to capture what are our business objectives",
    "start": "352000",
    "end": "357039"
  },
  {
    "text": "and what are we trying to accomplish with the system and this triangle always comes to mind",
    "start": "357039",
    "end": "362479"
  },
  {
    "text": "where we are trying to achieve a balance of security of the system",
    "start": "362479",
    "end": "367520"
  },
  {
    "text": "while making sure that usability and functionality are not affected what we're trying to",
    "start": "367520",
    "end": "373440"
  },
  {
    "text": "visualize with the triangle is that if we make the most secure system",
    "start": "373440",
    "end": "379520"
  },
  {
    "text": "that system is probably not going to be usable or functional for example if we're trying",
    "start": "379520",
    "end": "385039"
  },
  {
    "text": "to secure a network the most secure network will be the one where i kill all the network traffic to it and",
    "start": "385039",
    "end": "391280"
  },
  {
    "text": "no one can access the network at the same time if we made the most user-friendly system",
    "start": "391280",
    "end": "396960"
  },
  {
    "text": "for example by removing the requirement to have passwords in the system it's not going to be the most secure so",
    "start": "396960",
    "end": "403520"
  },
  {
    "text": "we always want to strike a balance where our business objectives are accomplished without compromising on security",
    "start": "403520",
    "end": "411919"
  },
  {
    "text": "the next place to look for in terms of security controls that will be applicable to your systems are frameworks or any compliance",
    "start": "411919",
    "end": "418639"
  },
  {
    "text": "requirements that you may have or industry standards depending on the data you're collecting or the type of system",
    "start": "418639",
    "end": "424639"
  },
  {
    "text": "you may be subject to the payment card industry requirements in pci vs the dss",
    "start": "424639",
    "end": "431199"
  },
  {
    "text": "or hipaa for health systems or if you're collecting personal information in europe you may need to be",
    "start": "431199",
    "end": "437120"
  },
  {
    "text": "gdpr compliant there's also industry benchmarks that you can use like those put out by the center of internet",
    "start": "437120",
    "end": "444000"
  },
  {
    "text": "security and assist benchmarks and cloud providers also give guidance on the best practices for systems",
    "start": "444000",
    "end": "450720"
  },
  {
    "text": "using their technology like the well architected framework from aws",
    "start": "450720",
    "end": "456880"
  },
  {
    "text": "so once you have those requirements it's helpful to think about the security risk categories",
    "start": "457680",
    "end": "463440"
  },
  {
    "text": "and how to categorize the requirements in these data protection deals with how do we",
    "start": "463440",
    "end": "468800"
  },
  {
    "text": "protect any sensitive data that our system could be handling so things like using encryption at rest",
    "start": "468800",
    "end": "474879"
  },
  {
    "text": "or encryption in transit will be examples of security controls in the data protection category",
    "start": "474879",
    "end": "480720"
  },
  {
    "text": "access management is how do we make sure that any system people or process accessing our system",
    "start": "480720",
    "end": "487840"
  },
  {
    "text": "are only authorized to access the functionality they need with network security and platform",
    "start": "487840",
    "end": "493599"
  },
  {
    "text": "security controls we make sure that only the necessary open ports or exports",
    "start": "493599",
    "end": "498800"
  },
  {
    "text": "exposes for the processes that need to be exposed and to other systems or people",
    "start": "498800",
    "end": "506319"
  },
  {
    "text": "and we also need to make sure that we have the visibility and observability necessary",
    "start": "506319",
    "end": "512640"
  },
  {
    "text": "not only to debug and any issues in the system but also to reconstruct any scenarios",
    "start": "512640",
    "end": "519200"
  },
  {
    "text": "where we may have been compromised one category that's not on the slide what we need to keep",
    "start": "519200",
    "end": "525200"
  },
  {
    "text": "in mind outside of security is operational efficiency these are things like making sure that you're only using the resources",
    "start": "525200",
    "end": "532240"
  },
  {
    "text": "that you need your for your system so you don't incur in unnecessary expensive expenses",
    "start": "532240",
    "end": "540320"
  },
  {
    "text": "so now let's look at an example architecture and here i'm looking to install wordpress which is an open source",
    "start": "542560",
    "end": "549440"
  },
  {
    "text": "content management system that you can use to host websites and blogs and",
    "start": "549440",
    "end": "554480"
  },
  {
    "text": "wordpress uses mariadb for a storage database and we'll be using memcached in front of",
    "start": "554480",
    "end": "560399"
  },
  {
    "text": "the db to cache database queries and speed up the site so all of these are third-party open",
    "start": "560399",
    "end": "567200"
  },
  {
    "text": "source technologies and this is a really good use case where we can use the helm chart that's already published",
    "start": "567200",
    "end": "573200"
  },
  {
    "text": "so let's take a look at how we find that",
    "start": "573200",
    "end": "578080"
  },
  {
    "text": "so we open artifact hub.io in our browser which is the site where you can find kubernetes packages",
    "start": "579839",
    "end": "586240"
  },
  {
    "text": "we're going to search for wordpress",
    "start": "586240",
    "end": "591839"
  },
  {
    "text": "the first link here is a helm chart published by a company called bitnami",
    "start": "596640",
    "end": "602320"
  },
  {
    "text": "and looking at the tldr um we can see how straightforward it is to",
    "start": "603040",
    "end": "609120"
  },
  {
    "text": "install this chart with the clink quick glance at the introduction we can see that the chart",
    "start": "609120",
    "end": "614959"
  },
  {
    "text": "includes mariadb chart as a dependency and that the memcache chart",
    "start": "614959",
    "end": "620079"
  },
  {
    "text": "is also one of the dependencies so by using this chart we get all the resources we need in our",
    "start": "620079",
    "end": "625279"
  },
  {
    "text": "architecture so now let's go back to our",
    "start": "625279",
    "end": "630000"
  },
  {
    "text": "slides",
    "start": "630839",
    "end": "633839"
  },
  {
    "text": "so now that we have our architecture defined and have an idea of the helm chart we're using let's take a look at",
    "start": "638880",
    "end": "644720"
  },
  {
    "text": "some of the security requirements that we need to make sure we comply with when we provision the",
    "start": "644720",
    "end": "650399"
  },
  {
    "text": "system and i've identified three requirements that we're going to look at that i found from the cis benchmark for",
    "start": "650399",
    "end": "658320"
  },
  {
    "text": "kubernetes the first one is to ensure that there's no secrets in environment variables",
    "start": "658839",
    "end": "665040"
  },
  {
    "text": "the reason this is important when you're dealing with a third party software is that sometimes there's applications",
    "start": "665040",
    "end": "670880"
  },
  {
    "text": "that dump the state of the environment as part of error logs if the environment contains secrets that",
    "start": "670880",
    "end": "677680"
  },
  {
    "text": "means that anyone with access to the error logs would also get all the secrets in that in the environment variables",
    "start": "677680",
    "end": "684480"
  },
  {
    "text": "so we want to make sure that we avoid these whenever possible",
    "start": "684480",
    "end": "689839"
  },
  {
    "text": "the second security requirement is to avoid containers running as root although there are runtime security",
    "start": "691600",
    "end": "697440"
  },
  {
    "text": "features in kubernetes that protect us we will still have the increased likelihood",
    "start": "697440",
    "end": "702959"
  },
  {
    "text": "of processes within the root containers breaking out and escaping which affects the risk of your host and",
    "start": "702959",
    "end": "709839"
  },
  {
    "text": "other containers running within that host since we're using third-party containers from a public health chart",
    "start": "709839",
    "end": "715360"
  },
  {
    "text": "this is something to be mindful of",
    "start": "715360",
    "end": "718800"
  },
  {
    "text": "so there's an option well within kubernetes to allow parts that have to have privileges that the parent",
    "start": "721839",
    "end": "728399"
  },
  {
    "text": "process did not have such as set user id and set group id file file mode and you can control",
    "start": "728399",
    "end": "735519"
  },
  {
    "text": "that with the allow privilege privilege escalation parameter we want to make sure that this is set to",
    "start": "735519",
    "end": "741200"
  },
  {
    "text": "false on home charts we're using to avoid privileged escalations in those containers",
    "start": "741200",
    "end": "748079"
  },
  {
    "text": "okay so we've identified our architecture and determine what are the security",
    "start": "751040",
    "end": "756079"
  },
  {
    "text": "requirements needed for a system using industry standards and best practices now it's time to codify these",
    "start": "756079",
    "end": "762560"
  },
  {
    "text": "requirements into policy as code",
    "start": "762560",
    "end": "766240"
  },
  {
    "text": "but what is policies code policy skilled means that you're writing the security requirements",
    "start": "768639",
    "end": "774000"
  },
  {
    "text": "that are important for your system to be compliant with as code in a declarative language",
    "start": "774000",
    "end": "779920"
  },
  {
    "text": "that can be used to evaluate your infrastructure as code against so your health charts your kubernetes",
    "start": "779920",
    "end": "785839"
  },
  {
    "text": "configuration yaml files or any other declarative language can be evaluated using policy as code",
    "start": "785839",
    "end": "792800"
  },
  {
    "text": "and this makes sure that you are consistently enforcing your requirements as part of your systems deploy",
    "start": "792800",
    "end": "799440"
  },
  {
    "text": "deployment and development life cycle and allows you to move your security",
    "start": "799440",
    "end": "804800"
  },
  {
    "text": "posture from reactive to proactive as you want to detect and remediate",
    "start": "804800",
    "end": "810320"
  },
  {
    "text": "issues as soon as these are introduced in your code and not on runtime when they're made in the actual environment for policies",
    "start": "810320",
    "end": "817920"
  },
  {
    "text": "code to work you'll need to be using infrastructure as code to control the system so your manuals changes to your",
    "start": "817920",
    "end": "825600"
  },
  {
    "text": "kubernetes cluster and everything should be defined declarative not manually and",
    "start": "825600",
    "end": "832800"
  },
  {
    "text": "this works well for helm as your helm charts are already written for you",
    "start": "832800",
    "end": "839439"
  },
  {
    "text": "the more traditional approach to security is just handing over security requirements to",
    "start": "841440",
    "end": "847040"
  },
  {
    "text": "engineers and then perfectly checking through scripts tools or manually but these have been implemented",
    "start": "847040",
    "end": "853199"
  },
  {
    "text": "at runtime there are multiple benefits of using as policy is killed instead of or in combination to",
    "start": "853199",
    "end": "860000"
  },
  {
    "text": "traditional approaches and i want i want to highlight a few of these benefits",
    "start": "860000",
    "end": "865839"
  },
  {
    "text": "the first benefit is that you can implement your security requirements with low friction",
    "start": "867760",
    "end": "873600"
  },
  {
    "text": "when we're delivering security requirements as code and as a declarative language there's no",
    "start": "873600",
    "end": "879360"
  },
  {
    "text": "ambiguity into what needs to be accomplished in order to meet the requirements",
    "start": "879360",
    "end": "884399"
  },
  {
    "text": "you can reduce the number of gates and interactions between engineers and security and the system can be tested throughout",
    "start": "884399",
    "end": "890639"
  },
  {
    "text": "the sdlc to ensure that the requirements are met",
    "start": "890639",
    "end": "895519"
  },
  {
    "text": "the next benefit is that your system will be secure from the get-go having implemented security upfront",
    "start": "897680",
    "end": "905040"
  },
  {
    "text": "would reduce the number of issues that need to be addressed once you're in a run-time production environment since we've identified",
    "start": "905040",
    "end": "912160"
  },
  {
    "text": "the requirements we need to implement from the beginning and have tested our system against these with automation",
    "start": "912160",
    "end": "920000"
  },
  {
    "text": "the last benefit i wanted to highlight is the increased security visibility since now we can store the",
    "start": "920720",
    "end": "927040"
  },
  {
    "text": "applicable security requirements with our system code and can easily identify",
    "start": "927040",
    "end": "932880"
  },
  {
    "text": "what we are compliant with and any gaps that need to be addressed",
    "start": "932880",
    "end": "941839"
  },
  {
    "text": "so let's look at how we can implement policy as code using an open source tool called open policy agent or opa",
    "start": "942560",
    "end": "950000"
  },
  {
    "text": "opa is a cncf graduated project and the tool allow us to have a unified",
    "start": "950000",
    "end": "956160"
  },
  {
    "text": "language and framework to do policy evaluations in our systems so we're going to take the three",
    "start": "956160",
    "end": "962320"
  },
  {
    "text": "security requirements that we identify in step number one of our example architecture and convert them",
    "start": "962320",
    "end": "968000"
  },
  {
    "text": "into a policies code language using the regal language from opa",
    "start": "968000",
    "end": "974959"
  },
  {
    "text": "so our first rego implements our security requirements where we're trying to avoid secrets in",
    "start": "978320",
    "end": "984320"
  },
  {
    "text": "environment variables so just to refresh this is important because we're trying to protect",
    "start": "984320",
    "end": "989600"
  },
  {
    "text": "our secrets from being exposed in error logs if the containers were running capture",
    "start": "989600",
    "end": "995680"
  },
  {
    "text": "the environment as part of errors and if you're using a third-party health charts this could be an issue",
    "start": "995680",
    "end": "1002160"
  },
  {
    "text": "so let me walk you walk you through this line by line what we're trying to detect in this",
    "start": "1002160",
    "end": "1007600"
  },
  {
    "text": "regal rule so if you look at line number one we're trying to extract the api definition from our deployment",
    "start": "1007600",
    "end": "1014720"
  },
  {
    "text": "um then on line number two three and four we're getting the environment variables in our containers specification",
    "start": "1014720",
    "end": "1021040"
  },
  {
    "text": "all these lines so far contain variables that we're using to walk through the kubernetes yml file",
    "start": "1021040",
    "end": "1026319"
  },
  {
    "text": "that we're evaluating and that will be a little bit more clear on the next slide",
    "start": "1026319",
    "end": "1032240"
  },
  {
    "text": "line number six is the expression where we're testing if there's a value named secret key ref",
    "start": "1032480",
    "end": "1038959"
  },
  {
    "text": "which would mean that there's a secret being used in an environment variable which is the issue we're trying to",
    "start": "1038959",
    "end": "1044798"
  },
  {
    "text": "detect with its regal rule so here's the regal next to the yaml",
    "start": "1044799",
    "end": "1050960"
  },
  {
    "text": "file that violates the rule so looking at line number six at the demo on the right we see where",
    "start": "1050960",
    "end": "1058799"
  },
  {
    "text": "the container are specified and then on line number nine we have our environment variable and if",
    "start": "1058799",
    "end": "1065760"
  },
  {
    "text": "we look at line number 12 and number 17 we see where there are a couple of variables for a username and password being used",
    "start": "1065760",
    "end": "1073760"
  },
  {
    "text": "which would be in violation of our regal rule and would trigger in the statement we wrote in line number",
    "start": "1073760",
    "end": "1079919"
  },
  {
    "text": "six of the rego so this was a simple example where we can see how",
    "start": "1079919",
    "end": "1085760"
  },
  {
    "text": "regal variables can be used to walk through the kubernetes yml file and how statements are used to trigger",
    "start": "1085760",
    "end": "1092640"
  },
  {
    "text": "whenever issues are found let's look at a more complex example",
    "start": "1092640",
    "end": "1098720"
  },
  {
    "text": "so in this in this second regal we're going to identify when the allow privilege escalation",
    "start": "1102480",
    "end": "1109280"
  },
  {
    "text": "parameter is set to true or when it's not defined as we don't want the platform or help",
    "start": "1109280",
    "end": "1115520"
  },
  {
    "text": "chart to be able to escalate privilege a regal rule is specified in lines one",
    "start": "1115520",
    "end": "1121280"
  },
  {
    "text": "through five and we have a couple of helper functions in the bottom so the first couple of lines of the vehicle",
    "start": "1121280",
    "end": "1126880"
  },
  {
    "text": "we're getting the contents of the security context and our deployment specification then on line number four we trigger our",
    "start": "1126880",
    "end": "1134559"
  },
  {
    "text": "functions to do the evaluation",
    "start": "1134559",
    "end": "1138559"
  },
  {
    "text": "on the first function we check if the value of the allow privilege escalation parameter",
    "start": "1142320",
    "end": "1148799"
  },
  {
    "text": "in the security context is set to true which is the violation",
    "start": "1148799",
    "end": "1154799"
  },
  {
    "text": "and then on the second function we check if the allowed privilege escalation parameter has not been defined",
    "start": "1155440",
    "end": "1162160"
  },
  {
    "text": "as our requirement is to have this parameter set to false",
    "start": "1162160",
    "end": "1167440"
  },
  {
    "text": "so to make this more clear we can see a snippet of a jaml deployment file on the right side of the slide and",
    "start": "1170640",
    "end": "1177120"
  },
  {
    "text": "looking at line number five we see where allow privilege escalation has been set to true",
    "start": "1177120",
    "end": "1183120"
  },
  {
    "text": "which would violate our function in line number nine and trigger our regal rule",
    "start": "1183120",
    "end": "1192640"
  },
  {
    "text": "so now let's look at the regal rule for the third security requirement we have",
    "start": "1192640",
    "end": "1197679"
  },
  {
    "text": "and this is one this one is about avoiding our containers running as root we want to protect our environment from",
    "start": "1197679",
    "end": "1204880"
  },
  {
    "text": "the possibility of container escapes and it's the best practice to avoid running containers as roots so i cut the",
    "start": "1204880",
    "end": "1212559"
  },
  {
    "text": "regal rule from this snippet as it was similar to the last one i wanted to focus on the functions that",
    "start": "1212559",
    "end": "1219039"
  },
  {
    "text": "we're using here in the first and the second function highlighted here",
    "start": "1219039",
    "end": "1224640"
  },
  {
    "text": "we're trying to identify if rawness non-root parameter in the security context is set to false",
    "start": "1224640",
    "end": "1231039"
  },
  {
    "text": "meaning that we're going to be running as root or if it's on",
    "start": "1231039",
    "end": "1236400"
  },
  {
    "text": "undefined it's by default kubernetes will run the container as root",
    "start": "1236400",
    "end": "1243039"
  },
  {
    "text": "the next couple of functions we're trying to identify if the run as user parameter in the",
    "start": "1246799",
    "end": "1253360"
  },
  {
    "text": "security context of the pod is set to zero which is root or if it's undefined",
    "start": "1253360",
    "end": "1262720"
  },
  {
    "text": "so i have a couple of yaml snippets here um that are in violation so we can",
    "start": "1262720",
    "end": "1267840"
  },
  {
    "text": "visualize these issues on the first one if we look at line number two run as",
    "start": "1267840",
    "end": "1273039"
  },
  {
    "text": "non-root is set to false so this is in violation of our policy and on the second yama snippet",
    "start": "1273039",
    "end": "1279039"
  },
  {
    "text": "in line number two we see that rona's user is set 0 which is the reducer and that will be in",
    "start": "1279039",
    "end": "1285440"
  },
  {
    "text": "violation of our regal rule as well",
    "start": "1285440",
    "end": "1291840"
  },
  {
    "text": "so now that we have our policies defined as code it's time to implement our guard rails to make sure that any helm charts we use",
    "start": "1293840",
    "end": "1301280"
  },
  {
    "text": "are in compliance with our policies so there's two main types of security",
    "start": "1301280",
    "end": "1308559"
  },
  {
    "text": "guard rails proactive and reactive reactive are more of the traditional security controls",
    "start": "1308559",
    "end": "1314480"
  },
  {
    "text": "where we update the wrong time environment after we notice a violation has occurred",
    "start": "1314480",
    "end": "1319679"
  },
  {
    "text": "so for example when doing a vulnerability scan of a server and we detect that there's a critical",
    "start": "1319679",
    "end": "1324880"
  },
  {
    "text": "vulnerability that needs to be patched we could have a reactive guardrail to automatically patch the system",
    "start": "1324880",
    "end": "1331679"
  },
  {
    "text": "proactive guardrails help us identify issues early in the development process",
    "start": "1331679",
    "end": "1337039"
  },
  {
    "text": "where it's easier to fix and less risky and this is where policy as code fits",
    "start": "1337039",
    "end": "1343520"
  },
  {
    "text": "so there's an open source tool that allows you to implement your policy as code guardrails that we had accurate",
    "start": "1344799",
    "end": "1350000"
  },
  {
    "text": "maintain called tauruscan and what i like about terascan is that it's",
    "start": "1350000",
    "end": "1355039"
  },
  {
    "text": "packaged as an executable so you can easily integrate it into your workflow by by running it locally on your desktop or",
    "start": "1355039",
    "end": "1362000"
  },
  {
    "text": "as part of your ci cd pipeline it can also be executed in server mode",
    "start": "1362000",
    "end": "1367039"
  },
  {
    "text": "which allows you to centrally govern your infrastructure as code scanning by having a central hub with rules to",
    "start": "1367039",
    "end": "1374080"
  },
  {
    "text": "help meet your standards and we recently added the ability to use tire scan as an admission controller where you can",
    "start": "1374080",
    "end": "1380720"
  },
  {
    "text": "use it in server mode to listen to the emission web hook in your kubernetes cluster",
    "start": "1380720",
    "end": "1386159"
  },
  {
    "text": "to prevent any actions that will deviate from the standards and policies that you define in terascan",
    "start": "1386159",
    "end": "1393360"
  },
  {
    "text": "the tool leveraged the regal language from the opa projects as part of its policy engine so you have a standard way to implement",
    "start": "1393520",
    "end": "1400720"
  },
  {
    "text": "policy as code and it includes a lot of policies by default that you can use as a baseline",
    "start": "1400720",
    "end": "1405919"
  },
  {
    "text": "to evaluate your system or enhance your current policy set with the ability to scan terraform",
    "start": "1405919",
    "end": "1411840"
  },
  {
    "text": "kubernetes yaml files helm and customize so i'm going to walk you",
    "start": "1411840",
    "end": "1416960"
  },
  {
    "text": "through the three x three example ways to implement proactive guardrails and and then we'll",
    "start": "1416960",
    "end": "1423360"
  },
  {
    "text": "see a quick demo of how how turret scan works",
    "start": "1423360",
    "end": "1431600"
  },
  {
    "text": "so the first and most straightforward guardrail is to use a policy skilled scanning tool on your",
    "start": "1431600",
    "end": "1437360"
  },
  {
    "text": "engineer's local environment so here's an example where we're using terascan to scan the",
    "start": "1437360",
    "end": "1444000"
  },
  {
    "text": "example wordpress architecture we've been using through the presentation and finding the three issues that we've",
    "start": "1444000",
    "end": "1450640"
  },
  {
    "text": "discussed on the deployment the channel file this is the best way to get early",
    "start": "1450640",
    "end": "1455760"
  },
  {
    "text": "feedback in through the helm charts you're trying to use and in this example",
    "start": "1455760",
    "end": "1461039"
  },
  {
    "text": "i had the helm chart code on my local environment but you can also scan remote",
    "start": "1461039",
    "end": "1467519"
  },
  {
    "text": "repositories here's the terrascan command you would use to do that with the dash r to scan the git",
    "start": "1470840",
    "end": "1478000"
  },
  {
    "text": "repository that has the wordpress helm chart directly",
    "start": "1478000",
    "end": "1487200"
  },
  {
    "text": "you can further enhance your workflow by creating an alias to check if there are any high findings inter",
    "start": "1487200",
    "end": "1493919"
  },
  {
    "text": "scans output and failing your helm chart install if there are any",
    "start": "1493919",
    "end": "1501840"
  },
  {
    "text": "the next place to apply guard rails is on your ci cd pipeline and this is where you can prevent any",
    "start": "1504320",
    "end": "1511600"
  },
  {
    "text": "code that deviates from your standards to be introduced by having a ci job fail",
    "start": "1511600",
    "end": "1516720"
  },
  {
    "text": "if there are any issues that you would like to block on and we have to keep in mind that it's",
    "start": "1516720",
    "end": "1522080"
  },
  {
    "text": "always easier to fix issues on your code rather than at runtime so you want to make sure that",
    "start": "1522080",
    "end": "1528400"
  },
  {
    "text": "changes to your runtime kubernetes clusters are only done through code and this will help you use",
    "start": "1528400",
    "end": "1535039"
  },
  {
    "text": "ci cd as part of your security",
    "start": "1535039",
    "end": "1538960"
  },
  {
    "text": "guardrails the last guardrail i want to discuss is using an",
    "start": "1540840",
    "end": "1546240"
  },
  {
    "text": "admission controller and mission controllers hook into your kubernetes admissions web hook",
    "start": "1546240",
    "end": "1552080"
  },
  {
    "text": "to make a policy evaluation on the api call that's being made and can be used to block any",
    "start": "1552080",
    "end": "1558720"
  },
  {
    "text": "requests that deviate from your standards if you have policies this must be enforced no matter what",
    "start": "1558720",
    "end": "1565039"
  },
  {
    "text": "this will be a good place to make sure that they're being followed also we know that there might be break",
    "start": "1565039",
    "end": "1571600"
  },
  {
    "text": "glass situations where we might not be able to use declarative code to make changes to our clusters",
    "start": "1571600",
    "end": "1577440"
  },
  {
    "text": "and need to make a quick change at runtime because of an emergency so using this approach we would have an",
    "start": "1577440",
    "end": "1584480"
  },
  {
    "text": "additional control to prevent issues from being introduced through those break the glass changes",
    "start": "1584480",
    "end": "1591519"
  },
  {
    "text": "so now let's take a look at how tauroscan works locally by evaluating the wordpress home chart",
    "start": "1593760",
    "end": "1601440"
  },
  {
    "text": "so now for this example i'm using the deprecated and obsolete",
    "start": "1608400",
    "end": "1614559"
  },
  {
    "text": "github.com helm slash charts which is an an old repository which is",
    "start": "1614559",
    "end": "1621679"
  },
  {
    "text": "no longer maintained but it's good for our purposes of illustrating",
    "start": "1621679",
    "end": "1627679"
  },
  {
    "text": "policy is code and the first thing i did was to get",
    "start": "1627679",
    "end": "1634480"
  },
  {
    "text": "it cloned this um so i have this stored locally but one of the things i wanted",
    "start": "1635600",
    "end": "1641039"
  },
  {
    "text": "to show you was if you don't want to if you want to have a repository you want to scan",
    "start": "1641039",
    "end": "1647760"
  },
  {
    "text": "which is not local you can use stereoscan",
    "start": "1647760",
    "end": "1652480"
  },
  {
    "text": "um slash i helm slash our git and put the github repository in there",
    "start": "1652880",
    "end": "1660080"
  },
  {
    "text": "and under the hood terascan will download that repository and run their",
    "start": "1660080",
    "end": "1666000"
  },
  {
    "text": "scan on it without you having to necessarily clone that repository",
    "start": "1666000",
    "end": "1671360"
  },
  {
    "text": "and give you the results which is an easy way if you have remote repositories that you want to",
    "start": "1671360",
    "end": "1677360"
  },
  {
    "text": "scan so i'm just going to scan it real quick to show you what are the things out of the box that",
    "start": "1677360",
    "end": "1682960"
  },
  {
    "text": "we get from tara scan when scanning this repository",
    "start": "1682960",
    "end": "1687840"
  },
  {
    "text": "and this might take a little bit because it's downloading the repository from the",
    "start": "1689120",
    "end": "1694799"
  },
  {
    "text": "internet and then running terascan so if you see here are some of the",
    "start": "1694799",
    "end": "1700320"
  },
  {
    "text": "results that we got from running terrascan on the repository and this is what the default policies",
    "start": "1700320",
    "end": "1707279"
  },
  {
    "text": "that terraskin has so you'll get a lot of results which",
    "start": "1707279",
    "end": "1712480"
  },
  {
    "text": "may or may not be relevant for what you're trying to do so one thing i did with this repository",
    "start": "1712480",
    "end": "1722080"
  },
  {
    "text": "on my local copy of the repository was i added um",
    "start": "1722080",
    "end": "1729360"
  },
  {
    "text": "let me zoom this a little bit",
    "start": "1730960",
    "end": "1739840"
  },
  {
    "text": "so i added a policies directory and this policies directory",
    "start": "1741360",
    "end": "1747279"
  },
  {
    "text": "has the three policies that we're trying to evaluate today for our examples",
    "start": "1747279",
    "end": "1754240"
  },
  {
    "text": "so just to show you the first one that we're going to take a look at",
    "start": "1755679",
    "end": "1760880"
  },
  {
    "text": "is i'm using containers in environment variables and",
    "start": "1760880",
    "end": "1767760"
  },
  {
    "text": "as i said for this one we're just looking for this particular value of secret key ref",
    "start": "1767760",
    "end": "1776159"
  },
  {
    "text": "and you just looking at it locally on our deployment.jml file um",
    "start": "1777039",
    "end": "1783760"
  },
  {
    "text": "and i had this open previously so it's redirected me right there but looking at this file if you search",
    "start": "1783760",
    "end": "1790799"
  },
  {
    "text": "for this value that's all what all of what we're doing if we were going",
    "start": "1790799",
    "end": "1796080"
  },
  {
    "text": "to do this manually that's all what we're doing but but this time we're using a tool um to",
    "start": "1796080",
    "end": "1802000"
  },
  {
    "text": "look for that secret key ref and here you see that they're using a",
    "start": "1802000",
    "end": "1808320"
  },
  {
    "text": "there's they're storing that secret for the wordpress database um password and also the username",
    "start": "1808320",
    "end": "1816320"
  },
  {
    "text": "um so that's what they're doing here and we'll volunteer again shortly",
    "start": "1816320",
    "end": "1823760"
  },
  {
    "text": "so we can see how these three policies evaluate the code",
    "start": "1823760",
    "end": "1830960"
  },
  {
    "text": "so the next policy here",
    "start": "1833919",
    "end": "1838559"
  },
  {
    "text": "so um let's take a look at this one where we're looking at the security",
    "start": "1841360",
    "end": "1847360"
  },
  {
    "text": "context and seeing if allow privilege escalation is set to true or if it's undefined",
    "start": "1847360",
    "end": "1853440"
  },
  {
    "text": "so i'm just going to look real quick to see if they set this on the deployment.yaml",
    "start": "1853440",
    "end": "1861039"
  },
  {
    "text": "i don't see it set at all here",
    "start": "1861039",
    "end": "1865840"
  },
  {
    "text": "so it's gonna be undefined it's probably gonna trigger based on this rule and the last one",
    "start": "1869760",
    "end": "1876840"
  },
  {
    "text": "is running as a non-route which it's expecting for you to set",
    "start": "1876840",
    "end": "1886000"
  },
  {
    "text": "the run as non-route on the security context as false",
    "start": "1886000",
    "end": "1891120"
  },
  {
    "text": "the one thing here is that the way that teraskin works is that it will automatically use the",
    "start": "1891120",
    "end": "1898559"
  },
  {
    "text": "variables um in the helm chart and populate the values for it before",
    "start": "1898559",
    "end": "1903840"
  },
  {
    "text": "doing a policy evaluation so although i'm doing a quick",
    "start": "1903840",
    "end": "1909200"
  },
  {
    "text": "um find in this deployment.gmo file although i'm not",
    "start": "1909200",
    "end": "1914720"
  },
  {
    "text": "seeing the values that would trigger these policies um it doesn't mean that they're not",
    "start": "1914720",
    "end": "1920080"
  },
  {
    "text": "there it might mean that um they're that they're using variables",
    "start": "1920080",
    "end": "1925120"
  },
  {
    "text": "for these so this is an example where it's saying so run as user it's using a",
    "start": "1925120",
    "end": "1932399"
  },
  {
    "text": "variable here",
    "start": "1932399",
    "end": "1935840"
  },
  {
    "text": "so what we're looking for is run as non-root",
    "start": "1938399",
    "end": "1945360"
  },
  {
    "text": "or having it undefined or they're honest user being set to zero so right here we have",
    "start": "1945360",
    "end": "1952159"
  },
  {
    "text": "run at user but it's using the variable to",
    "start": "1952159",
    "end": "1957760"
  },
  {
    "text": "set this up so terascan will look for this value on the variables um so let's look at the values.gmo file",
    "start": "1957760",
    "end": "1966000"
  },
  {
    "text": "and what was the name we're honest user",
    "start": "1966000",
    "end": "1973039"
  },
  {
    "text": "so brandon's user is set as as a non-zero user which means this the rule",
    "start": "1974399",
    "end": "1980559"
  },
  {
    "text": "is not going to trigger for this for this one",
    "start": "1980559",
    "end": "1985039"
  },
  {
    "text": "so now let's run turret scan to see if um what which ones of these policies",
    "start": "1988159",
    "end": "1994399"
  },
  {
    "text": "are going to be triggered by our local helm chart so we can do tariffs scan",
    "start": "1994399",
    "end": "2002840"
  },
  {
    "text": "scan dash p and the dash p flag is where you can specify um",
    "start": "2002840",
    "end": "2009519"
  },
  {
    "text": "a directory containing your regal policies so um this will override",
    "start": "2009519",
    "end": "2015840"
  },
  {
    "text": "so that you don't use the default policies included in terascan so we're only going to be using the",
    "start": "2015840",
    "end": "2021519"
  },
  {
    "text": "three policies that we've created here and then that eye is our iac provider",
    "start": "2021519",
    "end": "2030399"
  },
  {
    "text": "which in this case is helm and once i hit enter this is going to run pretty fast",
    "start": "2030399",
    "end": "2035840"
  },
  {
    "text": "because we're just running terascan against a local repository as opposed",
    "start": "2035840",
    "end": "2041200"
  },
  {
    "text": "to the previous example where we downloaded the remote repository from github",
    "start": "2041200",
    "end": "2049279"
  },
  {
    "text": "so as we see here our scan showed",
    "start": "2051839",
    "end": "2058638"
  },
  {
    "text": "two of the policies being violated so the first one is where the container is using secrecy",
    "start": "2058639",
    "end": "2065839"
  },
  {
    "text": "and environment variables so this is where on our deployment for the gmo file i",
    "start": "2065839",
    "end": "2071280"
  },
  {
    "text": "showed that the database credentials were were there",
    "start": "2071280",
    "end": "2078399"
  },
  {
    "text": "and then the second one being triggered here is that the container should not run with",
    "start": "2079040",
    "end": "2084638"
  },
  {
    "text": "allow privilege escalation and this one is triggering because um",
    "start": "2084639",
    "end": "2089679"
  },
  {
    "text": "if you remember our policy we said that if you're if you don't have the allow privilege",
    "start": "2089679",
    "end": "2095040"
  },
  {
    "text": "escalation set to false we will trigger um this policy and our final policy",
    "start": "2095040",
    "end": "2103599"
  },
  {
    "text": "which is running as non-root is not triggering and that's because we have rona's user",
    "start": "2103599",
    "end": "2110160"
  },
  {
    "text": "um set as a non-zero value",
    "start": "2110160",
    "end": "2117838"
  },
  {
    "text": "so let's recap on what we did today and how we implement helm securely in our system the first",
    "start": "2124079",
    "end": "2130720"
  },
  {
    "text": "step was to identify and define the requirements that were applicable to our system",
    "start": "2130720",
    "end": "2136400"
  },
  {
    "text": "in the example we captured three different requirements that came from the cis benchmark for kubernetes that",
    "start": "2136400",
    "end": "2142640"
  },
  {
    "text": "were important to us and step number two we took those requirements and world declarative",
    "start": "2142640",
    "end": "2148240"
  },
  {
    "text": "regal policies to help evaluate our infrastructures code against them and finally in step number three we",
    "start": "2148240",
    "end": "2154800"
  },
  {
    "text": "discussed the different ways that we can implement guard rails to make sure that our policies are being met",
    "start": "2154800",
    "end": "2160640"
  },
  {
    "text": "and to get feedback on policy violations as early as possible",
    "start": "2160640",
    "end": "2166800"
  },
  {
    "text": "so thanks for watching today if you want to learn more about tara scan or cloud vulnerabilities policies and best",
    "start": "2169440",
    "end": "2175760"
  },
  {
    "text": "practices you can visit our blog where we're constantly publishing the latest findings from our research team at",
    "start": "2175760",
    "end": "2181440"
  },
  {
    "text": "aquarius.com blog thank you",
    "start": "2181440",
    "end": "2187838"
  }
]