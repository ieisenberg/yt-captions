[
  {
    "text": "welcome everyone my name is Chris Milstead I work for a company who ownedat which is a container",
    "start": "0",
    "end": "6080"
  },
  {
    "text": "storage solution that runs inside kubernetes so turn your kubernetes cluster into kind of",
    "start": "6080",
    "end": "12120"
  },
  {
    "text": "a storage array and I'm here presenting with",
    "start": "12120",
    "end": "16340"
  },
  {
    "text": "Rover one two three okay good hi I'm Gabriel bartolini as you have my guest",
    "start": "22080",
    "end": "27960"
  },
  {
    "text": "I'm From Italy I work for EDB which is one of the major contributors to the pause gear SQL open source project I'm",
    "start": "27960",
    "end": "35399"
  },
  {
    "text": "vice president and CTO of cloud native and my primary goal in the organization is to enhance the podcast experience in",
    "start": "35399",
    "end": "42600"
  },
  {
    "text": "the kubernetes space I I'm an active member of the postgres",
    "start": "42600",
    "end": "47879"
  },
  {
    "text": "community and I've been working for PO with possess for over two days two decades",
    "start": "47879",
    "end": "53460"
  },
  {
    "text": "I I'm an early adopter of the devops culture and here today I will briefly",
    "start": "53460",
    "end": "58739"
  },
  {
    "text": "cover the cloud native PG open source operator while Chris will primarily talk",
    "start": "58739",
    "end": "64140"
  },
  {
    "text": "about the storage part between us hopefully you find it interesting so we're going to try and do a bit about kind of the intro set the",
    "start": "64140",
    "end": "71100"
  },
  {
    "text": "scene then we're going to do a lot about the postgres patterns and then we're going to try and do a little demo at the",
    "start": "71100",
    "end": "77520"
  },
  {
    "text": "end which uh I have recorded it because anyone in Valencia know what the Wi-Fi was like trying to do a live demo was",
    "start": "77520",
    "end": "83100"
  },
  {
    "text": "absolutely impossible so we've gone for the backup safe video but it is running on my laptop so if anyone does want to",
    "start": "83100",
    "end": "88500"
  },
  {
    "text": "come and see it in real life come and find me either here afterwards or at the booth and we'll go in through it and do it again and as you can see by the",
    "start": "88500",
    "end": "94740"
  },
  {
    "text": "picture EDB had a party last night and there might have been some alcohol served and uh yeah we we don't look like",
    "start": "94740",
    "end": "101280"
  },
  {
    "text": "that normally in real life so the first part is um",
    "start": "101280",
    "end": "106380"
  },
  {
    "text": "The Click is not clicking there we go we're on there so um the first part is um there was a talk previously to this",
    "start": "106380",
    "end": "112740"
  },
  {
    "text": "one which was you know data on kubernetes um bring it on so we're not going to try and convince you to put data in",
    "start": "112740",
    "end": "118920"
  },
  {
    "text": "kubernetes we're going to assume that you're all given in this room that this is the case",
    "start": "118920",
    "end": "124320"
  },
  {
    "text": "but if you are interested and want to know more both of our companies are very active members and proud supporters of",
    "start": "124320",
    "end": "129899"
  },
  {
    "text": "the data and kubernetes and they've got these great reports so if you or your boss or your teams or anyone is",
    "start": "129899",
    "end": "135360"
  },
  {
    "text": "interested in convincing people to run data in kubernetes please go and download this report there's a QR code",
    "start": "135360",
    "end": "140879"
  },
  {
    "text": "in the bottom right hand side and the slides which you can click on that and you'll get access to the report anything else you want to say about that",
    "start": "140879",
    "end": "146640"
  },
  {
    "text": "one's gabrielli that's fine no I know that you said that you said everything thank you it's all good",
    "start": "146640",
    "end": "152280"
  },
  {
    "text": "um boring words on a slide um the takeaway from this slide is that by",
    "start": "152280",
    "end": "159000"
  },
  {
    "text": "putting your data into kubernetes none of your resiliency problems change",
    "start": "159000",
    "end": "164879"
  },
  {
    "text": "you still have to think about exactly the same problems but it's a lot easier",
    "start": "164879",
    "end": "170400"
  },
  {
    "text": "and there's a lot of nice Automation and things that happen either from the kubernetes side or from the cloud native",
    "start": "170400",
    "end": "176819"
  },
  {
    "text": "postgres operator side to make your job a lot easier so it is much easier to automate and get",
    "start": "176819",
    "end": "183239"
  },
  {
    "text": "this all to work without having to spend you know months and sacrificing whatever animals your country uh would do but the",
    "start": "183239",
    "end": "191879"
  },
  {
    "text": "the main thing which I'm going to just leave you is the bottom two lights bottom three acronyms so the maximum",
    "start": "191879",
    "end": "197220"
  },
  {
    "text": "tolerable downtime the first thing you do when you start looking at your resilience is you say what is the",
    "start": "197220",
    "end": "202680"
  },
  {
    "text": "business willing to put up with and what will the business pay to protect against this is a business and application Level",
    "start": "202680",
    "end": "208379"
  },
  {
    "text": "question and then that leads you on to the two technical things your recovery time objective and your recovery Point",
    "start": "208379",
    "end": "214800"
  },
  {
    "text": "objective how much data can I afford to lose in the event of an outage and how",
    "start": "214800",
    "end": "219959"
  },
  {
    "text": "long have I got to get the systems back up and running so we're going to try and frame kind of the different scenarios",
    "start": "219959",
    "end": "225900"
  },
  {
    "text": "and the different patterns we're going to talk about in these different terminologies but the big the key thing",
    "start": "225900",
    "end": "231420"
  },
  {
    "text": "for me is resiliency nothing changes if you're running in kubernetes you still have to do exactly the same kind of a",
    "start": "231420",
    "end": "236700"
  },
  {
    "text": "thinking about it and with that I think we're going to jump onto some patterns so I'm going to hand",
    "start": "236700",
    "end": "243180"
  },
  {
    "text": "yeah they click it back to you yeah thank you thank you Chris so oh this is tough okay because I'm",
    "start": "243180",
    "end": "250620"
  },
  {
    "text": "trying to put pause SQL in one slide and you know having also a former core member of postgresia you know you know",
    "start": "250620",
    "end": "257880"
  },
  {
    "text": "this is gonna be tough but anyway I want to ask who's in this room already using",
    "start": "257880",
    "end": "262979"
  },
  {
    "text": "postgresql in production wow okay and no no keep your hand up",
    "start": "262979",
    "end": "269639"
  },
  {
    "text": "please and who's do using that in kubernetes yeah see I see many hands going down",
    "start": "269639",
    "end": "277259"
  },
  {
    "text": "okay so hopefully you know you are convinced after this talk that this is not only possible but as I Define it",
    "start": "277259",
    "end": "284160"
  },
  {
    "text": "that's the best overall overall experience of posca SQL okay I think that possible kubernetes work very well",
    "start": "284160",
    "end": "290880"
  },
  {
    "text": "so for those of you who instead are not familiar with pause guess ql or simply",
    "start": "290880",
    "end": "296280"
  },
  {
    "text": "pause guess it's one of the most successful and Innovative open source project server",
    "start": "296280",
    "end": "302340"
  },
  {
    "text": "so it's um one of the most popular database Management Systems as we can",
    "start": "302340",
    "end": "307560"
  },
  {
    "text": "also see from from this room today but especially in visualized environmental environment and according to a recent",
    "start": "307560",
    "end": "314759"
  },
  {
    "text": "survey from stack Overflow it's the most loved database by Developers",
    "start": "314759",
    "end": "320820"
  },
  {
    "text": "however I feel it's important to restate some of the extraordinary capabilities that come out of the box with posgus",
    "start": "320820",
    "end": "327539"
  },
  {
    "text": "many Enterprise level features that have been consistently introduced in the",
    "start": "327539",
    "end": "332699"
  },
  {
    "text": "project year after year one major release after the other postgresql implements the primary",
    "start": "332699",
    "end": "339539"
  },
  {
    "text": "standby architecture with a single primary and an optional number of",
    "start": "339539",
    "end": "345600"
  },
  {
    "text": "read-only replicas suitable for high availability and Rich scalability purposes this is possible through its",
    "start": "345600",
    "end": "353400"
  },
  {
    "text": "native streaming replication protocol which is available in different different flavors physical logical",
    "start": "353400",
    "end": "360020"
  },
  {
    "text": "asynchronous and synchronous by the way even a transaction level you can set these uh these stuff so and also",
    "start": "360020",
    "end": "368100"
  },
  {
    "text": "cascading postgres also support file based replication",
    "start": "368100",
    "end": "373680"
  },
  {
    "text": "which is extremely useful in multi-region setups especially when used in conjunction with object stores in the",
    "start": "373680",
    "end": "380460"
  },
  {
    "text": "cloud then we've got continuous backup and point in time recovery that completes",
    "start": "380460",
    "end": "385500"
  },
  {
    "text": "complete the business continuity requirements enabling it to achieve rpo0",
    "start": "385500",
    "end": "390720"
  },
  {
    "text": "and very low rtos in several disaster scenarios my list of favorite features",
    "start": "390720",
    "end": "396600"
  },
  {
    "text": "includes also declarative partitioning for horizontal horizontal table partitioning parallel queries for",
    "start": "396600",
    "end": "403560"
  },
  {
    "text": "vertical scalability extensibilities think about extensions like post Gis for",
    "start": "403560",
    "end": "408900"
  },
  {
    "text": "example for geographical databases Json support for multi-model hybrid databases",
    "start": "408900",
    "end": "414800"
  },
  {
    "text": "IEC transactions transactional ddl and list but last but not least SQL standard",
    "start": "414800",
    "end": "421259"
  },
  {
    "text": "compliance obviously there are many many more but if you think that the project",
    "start": "421259",
    "end": "426479"
  },
  {
    "text": "has been steadily innovating for at least 25 plus years okay and the",
    "start": "426479",
    "end": "432539"
  },
  {
    "text": "community just released version 15 with and I'm really proud to say that many contributions from ADB",
    "start": "432539",
    "end": "440460"
  },
  {
    "text": "and please raise your hand if you've ever heard of cloud native PG",
    "start": "440460",
    "end": "447120"
  },
  {
    "text": "yeah a few people okay so hopefully by today you'll know more so Cloud native PG is technically a",
    "start": "447120",
    "end": "454199"
  },
  {
    "text": "level five kubernetes operator that can manage manage postgresql clusters and it",
    "start": "454199",
    "end": "460259"
  },
  {
    "text": "is protection ready there are a few operators for posgus out there but Cloud",
    "start": "460259",
    "end": "465300"
  },
  {
    "text": "native PG is fundamentally different from the rest okay it's open source it distributes it",
    "start": "465300",
    "end": "471479"
  },
  {
    "text": "under Apache License 2.0 but in May this year uh it's it's intellectually",
    "start": "471479",
    "end": "477599"
  },
  {
    "text": "intellectual property has been donated by ADB to event on neutral and openly",
    "start": "477599",
    "end": "483300"
  },
  {
    "text": "governed uh Community with the long-term aspiration to pursue the cnci for",
    "start": "483300",
    "end": "488580"
  },
  {
    "text": "graduation process we've applied to the cncf sandbox and we are currently in the",
    "start": "488580",
    "end": "493979"
  },
  {
    "text": "review process on the technical side a differentiator is that cloud native PG directly extends",
    "start": "493979",
    "end": "501240"
  },
  {
    "text": "the kubernetes controller uh by defining a custom resource called the cluster",
    "start": "501240",
    "end": "507300"
  },
  {
    "text": "that manages the status of the cluster and that relies on a component that is",
    "start": "507300",
    "end": "512399"
  },
  {
    "text": "called instance manager to control the underlying postgresql instance",
    "start": "512399",
    "end": "517880"
  },
  {
    "text": "this includes failover management which is what we our you know usual nightmare",
    "start": "517880",
    "end": "524039"
  },
  {
    "text": "when we think about these okay so as a result because of this because we extend",
    "start": "524039",
    "end": "529260"
  },
  {
    "text": "the controller we don't use a tool like patroni or web manager to which for example I contributed in the past in the",
    "start": "529260",
    "end": "536220"
  },
  {
    "text": "first version of rep manager stolen and so on in order to have finite control on the",
    "start": "536220",
    "end": "542339"
  },
  {
    "text": "postgres cluster we we've made the decision to not to rely on stateful sets but to directly manage PVCs it goes",
    "start": "542339",
    "end": "550800"
  },
  {
    "text": "without saying that without our multi-year experience and active contributions to postgres",
    "start": "550800",
    "end": "556519"
  },
  {
    "text": "as well as a deep understanding of kubernetes this couldn't have been possible",
    "start": "556519",
    "end": "562680"
  },
  {
    "text": "Cloud native PG is fully declarative and relies on kubernetes resources to facilitate the integration with",
    "start": "562680",
    "end": "568860"
  },
  {
    "text": "applications such as Services Mutual TLS via Secrets Affinity control and so on",
    "start": "568860",
    "end": "575399"
  },
  {
    "text": "out of the box it provides observability through endpoints for the native Prometheus exporters as well as direct",
    "start": "575399",
    "end": "583399"
  },
  {
    "text": "login Json log for to standard output",
    "start": "583399",
    "end": "589700"
  },
  {
    "text": "then other important features are backup and continuous continuous backup and point in time",
    "start": "589700",
    "end": "596220"
  },
  {
    "text": "recovery rolling updates scale up scale down and and much more",
    "start": "596220",
    "end": "602660"
  },
  {
    "text": "let's go to storage so storage is the most critical component of a database",
    "start": "603480",
    "end": "608580"
  },
  {
    "text": "that's always been like that by myself VM VMS and kubernetes as well and you",
    "start": "608580",
    "end": "615480"
  },
  {
    "text": "must plan for day from Day Zero to run database workloads",
    "start": "615480",
    "end": "620519"
  },
  {
    "text": "as I was mentioning before Cloud native PG doesn't make use of stateful sets and",
    "start": "620519",
    "end": "626100"
  },
  {
    "text": "you can learn more about why by scanning this QR code instead we directly manage PVCs which",
    "start": "626100",
    "end": "634260"
  },
  {
    "text": "are the most important assets asset of a possible database and we call it PG data",
    "start": "634260",
    "end": "641279"
  },
  {
    "text": "our internal motto indeed it include Cloud native PG is the Fiji Dasa is worth a thousand pods okay this is",
    "start": "641279",
    "end": "648300"
  },
  {
    "text": "exactly what we say every time you know we can't lose data you know our primary directive is not to lose data",
    "start": "648300",
    "end": "656040"
  },
  {
    "text": "we storage agnostic and although we recommend sharing nothing architectures you're actually free to choose between",
    "start": "656040",
    "end": "662160"
  },
  {
    "text": "local storage network storage and hybrid hybrid Solutions we support Dynamic",
    "start": "662160",
    "end": "668160"
  },
  {
    "text": "provisioning and we use storage classes and PVC templates",
    "start": "668160",
    "end": "673560"
  },
  {
    "text": "so one of the amazing thing amazing things of kubernetes is that it enables",
    "start": "673560",
    "end": "678779"
  },
  {
    "text": "us to build a virtual data center using declarative configuration so",
    "start": "678779",
    "end": "684899"
  },
  {
    "text": "infrastructure is code so I will go through some examples here of architectures from the most basic one",
    "start": "684899",
    "end": "693540"
  },
  {
    "text": "to a disaster recovery example that spans over multiple regions on",
    "start": "693540",
    "end": "699360"
  },
  {
    "text": "kubernetes clusters the first architecture relies on shared storage over the network with nodes",
    "start": "699360",
    "end": "707040"
  },
  {
    "text": "sharing both the database and application workloads this second example relies on taints but",
    "start": "707040",
    "end": "715800"
  },
  {
    "text": "you can use also not selectors if you want to separate applications and dedicate some nodes to pause this",
    "start": "715800",
    "end": "723360"
  },
  {
    "text": "workload while still using a shared network storage in this case as you can",
    "start": "723360",
    "end": "728519"
  },
  {
    "text": "see the third example we decide to dedicate some storage to posca's workloads while",
    "start": "728519",
    "end": "735420"
  },
  {
    "text": "in this one we directly attach local storage on the nodes being reserved for",
    "start": "735420",
    "end": "741180"
  },
  {
    "text": "posgus here we go even further by dedicating a single node to a single pause guess",
    "start": "741180",
    "end": "748920"
  },
  {
    "text": "instance with local storage again and this example instead describes a",
    "start": "748920",
    "end": "756240"
  },
  {
    "text": "three node cluster posgus cluster with the primary in this in two standbys where each node has local storage and",
    "start": "756240",
    "end": "763920"
  },
  {
    "text": "sits in the different availability Zone thanks to uh topology key okay so we can",
    "start": "763920",
    "end": "770639"
  },
  {
    "text": "do this in a in a declarative way these fine and pull instead uses the concept of a",
    "start": "770639",
    "end": "777540"
  },
  {
    "text": "feature we call replica cluster where we create another postgres cluster in a different in a different",
    "start": "777540",
    "end": "784560"
  },
  {
    "text": "um kubernetes cluster which normally is in any different region and use streaming replication",
    "start": "784560",
    "end": "790940"
  },
  {
    "text": "with a direct connection so of course you need to go through security and so on to make it um happen otherwise if you",
    "start": "790940",
    "end": "799139"
  },
  {
    "text": "want you can simply use asynchronous replication with file shipping using an",
    "start": "799139",
    "end": "804779"
  },
  {
    "text": "object store that enables to transfer data across regions or if you want both",
    "start": "804779",
    "end": "810540"
  },
  {
    "text": "because that's that's done directly by fosgis pause gets fall back falls back in case the network goes down",
    "start": "810540",
    "end": "817200"
  },
  {
    "text": "okay so as you can see just by using kubernetes you can easily open up for",
    "start": "817200",
    "end": "823380"
  },
  {
    "text": "multi-cloud environments or hybrid Cloud environments it's it's your choice okay",
    "start": "823380",
    "end": "831660"
  },
  {
    "text": "so which one to pick so really any you know you can pick any",
    "start": "831660",
    "end": "837240"
  },
  {
    "text": "any the one that suits for your use case so the amazing the amazing thing amazing",
    "start": "837240",
    "end": "842639"
  },
  {
    "text": "thing as I was saying before is that thanks to kubernetes all of these can be done in a declarative way",
    "start": "842639",
    "end": "849959"
  },
  {
    "text": "that's what makes it special in my opinion that that's the most important",
    "start": "849959",
    "end": "855120"
  },
  {
    "text": "differentiator I want to share an example I mean this",
    "start": "855120",
    "end": "860279"
  },
  {
    "text": "is an example to configure a postgres cluster with three nodes uh we use Convention of a configuration",
    "start": "860279",
    "end": "867300"
  },
  {
    "text": "you call this my appdb and we have a primary and two-stand buys we set the",
    "start": "867300",
    "end": "872940"
  },
  {
    "text": "Affinity to prefer you know using clusters in in different nodes and we",
    "start": "872940",
    "end": "879120"
  },
  {
    "text": "set the storage for PG Dasa and the store Storage storage for walls and this is what happens under the hood okay we",
    "start": "879120",
    "end": "886740"
  },
  {
    "text": "we initialize the first PVC and we run in ADB in ADB is the process",
    "start": "886740",
    "end": "893040"
  },
  {
    "text": "that creates uh the PG data of a primary",
    "start": "893040",
    "end": "900180"
  },
  {
    "text": "um and uh once the PVC is is initialized we the cloud native PG starts the pod",
    "start": "900180",
    "end": "907920"
  },
  {
    "text": "and when the party is up we Define the the kubernetes service that will be used",
    "start": "907920",
    "end": "913980"
  },
  {
    "text": "by applications so we have three services one for read write one for read-only and one for read operations",
    "start": "913980",
    "end": "921720"
  },
  {
    "text": "and and then we use Mutual TLS we said already Mutual TLS to communicate with",
    "start": "921720",
    "end": "928440"
  },
  {
    "text": "with the application you can use TLS certificates you can integrate that with search manager if you want",
    "start": "928440",
    "end": "933600"
  },
  {
    "text": "all out of the box um then we use PG",
    "start": "933600",
    "end": "938760"
  },
  {
    "text": "P Gmail cap is the internal tool that allows us to clone the standby we start",
    "start": "938760",
    "end": "943920"
  },
  {
    "text": "the pod on the on the standby we use again Mutual TLS to connect in a safe",
    "start": "943920",
    "end": "949680"
  },
  {
    "text": "and secure way and and stream data and so on with the third node",
    "start": "949680",
    "end": "956579"
  },
  {
    "text": "and let's look now at the automated failover capability what happens when",
    "start": "956639",
    "end": "962639"
  },
  {
    "text": "the Readiness node on the primary starts to fail",
    "start": "962639",
    "end": "968360"
  },
  {
    "text": "so kubernetes detects that immediately and lets a cloud native PG elect the new",
    "start": "970260",
    "end": "975360"
  },
  {
    "text": "primary from the available replicas again this is done directly by the by the operator okay the instance manager",
    "start": "975360",
    "end": "982380"
  },
  {
    "text": "which is I think the real differentiator of our operator that's the process that the process that",
    "start": "982380",
    "end": "989060"
  },
  {
    "text": "controls P1 in the in the in the in the Pod okay",
    "start": "989060",
    "end": "994740"
  },
  {
    "text": "um for it detects it detects uh that it's the new primary sorry because I'm",
    "start": "994740",
    "end": "1001100"
  },
  {
    "text": "I'm not able to see very well but end updates uh drw service accordingly",
    "start": "1001100",
    "end": "1009019"
  },
  {
    "text": "then when the former primary comes back again the instance manager detects that",
    "start": "1009620",
    "end": "1015040"
  },
  {
    "text": "and it prevents the the the split brain situation",
    "start": "1015040",
    "end": "1020060"
  },
  {
    "text": "and once the Pod is ready it reassigns that to the read-only",
    "start": "1020060",
    "end": "1027558"
  },
  {
    "text": "um service so and that's all from me today so now I'm very happy to pass you've got to",
    "start": "1027559",
    "end": "1033380"
  },
  {
    "text": "stay around for questions right you've got to stay around for questions you can't run away no no I'm staying here",
    "start": "1033380",
    "end": "1039980"
  },
  {
    "text": "um so we're going to flip back a bit and then try and get into the the demo that I've built so",
    "start": "1039980",
    "end": "1045798"
  },
  {
    "text": "I think of a point like that uh could you just move me on a slide",
    "start": "1045799",
    "end": "1051140"
  },
  {
    "text": "oh sorry I'll do that uh I don't know what you",
    "start": "1051140",
    "end": "1056480"
  },
  {
    "text": "did I know we're still in there it's fine",
    "start": "1056480",
    "end": "1063320"
  },
  {
    "text": "where's the clicker 's day honestly use this",
    "start": "1063320",
    "end": "1069620"
  },
  {
    "text": "I think I destroyed your company you've destroyed it it's fine okay you",
    "start": "1069620",
    "end": "1075559"
  },
  {
    "text": "shouldn't shipped out the way so do a little dance tell a joke gabrielli just while I fix whatever you've done",
    "start": "1075559",
    "end": "1080960"
  },
  {
    "text": "yeah of course as you can see this is you know how it works the the failover and are there any any questions you you",
    "start": "1080960",
    "end": "1089960"
  },
  {
    "text": "want okay maybe we can ask",
    "start": "1089960",
    "end": "1093940"
  },
  {
    "text": "no okay that's it okay the question is does it roll back to the original primary my question is why",
    "start": "1095960",
    "end": "1102380"
  },
  {
    "text": "why should it does it matter okay so the idea here is to",
    "start": "1102380",
    "end": "1108919"
  },
  {
    "text": "just think in terms of cluster okay so if okay we're back",
    "start": "1108919",
    "end": "1114559"
  },
  {
    "text": "back on track so that's also a differentiator between for example stateful sets and our Direct Control of",
    "start": "1114559",
    "end": "1120799"
  },
  {
    "text": "PVC because to us it doesn't matter the important thing is that there's only one primary",
    "start": "1120799",
    "end": "1125840"
  },
  {
    "text": "at a time you know but yeah the other thing is go do go and read that thing about it doesn't as a kubernetes normal",
    "start": "1125840",
    "end": "1132679"
  },
  {
    "text": "person who's been using kubernetes for about seven eight years now I did not understand what was going on when I",
    "start": "1132679",
    "end": "1138260"
  },
  {
    "text": "first started using it because there were no staple sets there was no replica sets there were no deployments and I went what is going on so do go and read",
    "start": "1138260",
    "end": "1144860"
  },
  {
    "text": "the article it's good it explains why it does this and why it does it's a kind of a manual decide to fail over because you",
    "start": "1144860",
    "end": "1151280"
  },
  {
    "text": "don't want to throw away PG data and then have to re-synchronize it so it makes a lot of sense once you kind of",
    "start": "1151280",
    "end": "1156620"
  },
  {
    "text": "read the documentation from the operator um so I'm going to try and go really quickly about through these bits and",
    "start": "1156620",
    "end": "1163580"
  },
  {
    "text": "then go through the demo which I'm going to try and narrate at the speed of light which is going to be very entertaining",
    "start": "1163580",
    "end": "1168980"
  },
  {
    "text": "um the first thing just to say is that the storage as gabrielly said is the most critical and I think picking the",
    "start": "1168980",
    "end": "1174500"
  },
  {
    "text": "faster storage that you need to actually run your workload is really critical as well so the demo we're going to show is",
    "start": "1174500",
    "end": "1180620"
  },
  {
    "text": "on a cloud provider but it's actually running on i3en instances on an eks cluster so we're going to be running the",
    "start": "1180620",
    "end": "1186919"
  },
  {
    "text": "demo on local nvme drives so everything I'm showing you will work on any cloud provider or on-premise or any execution",
    "start": "1186919",
    "end": "1194960"
  },
  {
    "text": "venue so the demo is deliberately done to show you that this will run anywhere and you can do this the same way as I",
    "start": "1194960",
    "end": "1200419"
  },
  {
    "text": "said on that on the storage layer I'm using I can do the replication encryption fault tolerance so what we're",
    "start": "1200419",
    "end": "1206240"
  },
  {
    "text": "going to do is we're going to try and build a demo where we complement the cloud native postgres",
    "start": "1206240",
    "end": "1211820"
  },
  {
    "text": "components so things like at rest encryption which the cloud native postgres thing does not do we're going",
    "start": "1211820",
    "end": "1218120"
  },
  {
    "text": "to turn that on on the storage layer so that we make sure everything's encrypted yeah we've got a contract that's the",
    "start": "1218120",
    "end": "1224000"
  },
  {
    "text": "storage class and we're only allowed to speak together from now on that's the contract yeah okay um but the other thing to say as well",
    "start": "1224000",
    "end": "1229940"
  },
  {
    "text": "you can very easily turn stuff on and off in the different layers so to go",
    "start": "1229940",
    "end": "1234980"
  },
  {
    "text": "ahead and just say I'll just use the storage class without understanding what that storage class does under the covers",
    "start": "1234980",
    "end": "1240679"
  },
  {
    "text": "if you've got a storage array that's replicating data to a second site you turn on storage replication and you turn",
    "start": "1240679",
    "end": "1247580"
  },
  {
    "text": "on postgres level replication you can end up with 18 copies of the data written to disk and your you know your",
    "start": "1247580",
    "end": "1255980"
  },
  {
    "text": "database is only as fast as the slowest right so please do ask your kubernetes",
    "start": "1255980",
    "end": "1262820"
  },
  {
    "text": "team what the storage class actually does and what it looks like because it really does matter so that's all I want",
    "start": "1262820",
    "end": "1268280"
  },
  {
    "text": "to say there so in this case we're going to use a couple of storage classes it's a kubernetes talks there's some",
    "start": "1268280",
    "end": "1273799"
  },
  {
    "text": "yaml uh we're gonna see that in the video so I'm not going to talk too much in detail other than just say what you can do with the on that layer is you can",
    "start": "1273799",
    "end": "1280039"
  },
  {
    "text": "just add these annotations so you can turn on features and turn off features in different storage classes on kind of",
    "start": "1280039",
    "end": "1287840"
  },
  {
    "text": "dynamically so we will map and the one on the left has got the storage os.com replicas 2 the one on the right does not",
    "start": "1287840",
    "end": "1294020"
  },
  {
    "text": "have that so we're going to do replication on the storage class on the left at the storage layer and",
    "start": "1294020",
    "end": "1299179"
  },
  {
    "text": "replication at the postgres layer on the right hand side and the only other thing to say is that",
    "start": "1299179",
    "end": "1305780"
  },
  {
    "text": "we talked about the RTO RPO we talked about the patterns the really important thing is to match them you know the",
    "start": "1305780",
    "end": "1312080"
  },
  {
    "text": "right component to the right RTO RPO if you replicate at the storage layer and you only have a single database pod you",
    "start": "1312080",
    "end": "1318620"
  },
  {
    "text": "will have an outage when we kill the Pod or kill a node in our kubernetes cluster if you're using postgres replication",
    "start": "1318620",
    "end": "1326179"
  },
  {
    "text": "it will just promote a primary sorry a standby to be a primary and you will not",
    "start": "1326179",
    "end": "1331580"
  },
  {
    "text": "have an impact to your application running on your kubernetes cluster if we kill a node so think about what your",
    "start": "1331580",
    "end": "1337220"
  },
  {
    "text": "application and your business application design needs and turn the right bits on at the right level so um",
    "start": "1337220",
    "end": "1343120"
  },
  {
    "text": "the most important thing there is about the backups and the recovery as well so again there's two different ways to do",
    "start": "1343120",
    "end": "1348380"
  },
  {
    "text": "it the right hand side is this thing called a volume snapshot class this is kind of the kubernetes level way of",
    "start": "1348380",
    "end": "1354380"
  },
  {
    "text": "doing it so if you've got a thousand pods and you need to orchestrate the backup of all of them at the same time",
    "start": "1354380",
    "end": "1360140"
  },
  {
    "text": "to recover an application you would want to use a backup manager and you wanted to do some orchestration",
    "start": "1360140",
    "end": "1365720"
  },
  {
    "text": "so we've got Partnerships with people like castan and Cloud Casa for example so you'd want to use one of these",
    "start": "1365720",
    "end": "1371299"
  },
  {
    "text": "orchestration engines to back everything up at the same time because it's pointless backing up one thing than the",
    "start": "1371299",
    "end": "1376640"
  },
  {
    "text": "next thing and having all your application out of sync having said that that backup and that",
    "start": "1376640",
    "end": "1382340"
  },
  {
    "text": "snapshot will need a pause because you'll need to get consistency so there will be an application impact to using",
    "start": "1382340",
    "end": "1388220"
  },
  {
    "text": "that kind of backup mechanism and as Gabrielle said using the writer head logs and using this kind of continuous",
    "start": "1388220",
    "end": "1394760"
  },
  {
    "text": "um you know could do this archiving yeah so you'll have a different recovery Point objective and recovery time",
    "start": "1394760",
    "end": "1400580"
  },
  {
    "text": "objective on these two different approaches faster and slower so we're going to try and do a demo",
    "start": "1400580",
    "end": "1408520"
  },
  {
    "text": "uh uh is that plain right I'm going to move to this site and try and narrate it um",
    "start": "1409280",
    "end": "1416900"
  },
  {
    "text": "oh that is uh not 1080p in any way shape or form is it hold on a second",
    "start": "1416900",
    "end": "1424419"
  },
  {
    "text": "yeah thank you Google 360p",
    "start": "1425419",
    "end": "1431559"
  },
  {
    "text": "[Music] honestly",
    "start": "1432050",
    "end": "1435880"
  },
  {
    "text": "so yeah but what Chris was saying it's important I mean it the good thing here is that you have choice I mean to choose",
    "start": "1438080",
    "end": "1445039"
  },
  {
    "text": "between file system application or the database you want anyway we're back on track so it's going to be a bit small",
    "start": "1445039",
    "end": "1450919"
  },
  {
    "text": "isn't it I did try this at home and it did work okay on on a flat screen monitor so I did test it but okay the",
    "start": "1450919",
    "end": "1457760"
  },
  {
    "text": "video I'll post on my GitHub I'll put a link in the notes at the end so you can go ahead and we'll be on the recording as well but the main thing is at this",
    "start": "1457760",
    "end": "1464480"
  },
  {
    "text": "bottom side I'm using eks CTL so at the very bottom there there was a set of steps which was to Prime the nvme drive",
    "start": "1464480",
    "end": "1471500"
  },
  {
    "text": "which so we're using a local nvme so this will work as I said in any execution venue",
    "start": "1471500",
    "end": "1477740"
  },
  {
    "text": "um I've got some yaml files up there so I've got two storage classes and I've also got",
    "start": "1477740",
    "end": "1483080"
  },
  {
    "text": "um two database files so what I'm going to do is I think in a second to show you the the storage classes so in this one",
    "start": "1483080",
    "end": "1489620"
  },
  {
    "text": "we've got a storage class which has got the um which doesn't have the replication",
    "start": "1489620",
    "end": "1495380"
  },
  {
    "text": "triggered in it but what we know in there there's one of these annotations is storageos.com forward slash encryption equals true so every",
    "start": "1495380",
    "end": "1502820"
  },
  {
    "text": "persistent volume there will be a per persistent volume encryption key created and then that will be backed off to by",
    "start": "1502820",
    "end": "1509900"
  },
  {
    "text": "default of course it's a kubernetes secret so that will go into the kubernetes xcd but there's also other",
    "start": "1509900",
    "end": "1515960"
  },
  {
    "text": "projects so there's an open source project which we've contributed to called trusso so you can integrate that into something like a hashicor vault so",
    "start": "1515960",
    "end": "1522080"
  },
  {
    "text": "you can have at rest encryption integrated into a Key Management Service",
    "start": "1522080",
    "end": "1527360"
  },
  {
    "text": "the second one has the replicas set to two so in this case we've got a storage class what we turned replication on so",
    "start": "1527360",
    "end": "1535400"
  },
  {
    "text": "to make sure we don't have these 18 copies of data in the wrong place what",
    "start": "1535400",
    "end": "1540559"
  },
  {
    "text": "we're going to do is we're going to match the storage classes with the right database so this is our Standalone database I",
    "start": "1540559",
    "end": "1548059"
  },
  {
    "text": "called it Standalone because there's one of them thought brilliant naming convention there and the instances at",
    "start": "1548059",
    "end": "1553279"
  },
  {
    "text": "the top is set to one so in this case I've only got a single PG data and a single wow volume so at",
    "start": "1553279",
    "end": "1559880"
  },
  {
    "text": "the bottom um there's a storage class for the um well storage and storage is",
    "start": "1559880",
    "end": "1566419"
  },
  {
    "text": "the PG data storage so what we want to do is we want to take the Standalone database and run it on",
    "start": "1566419",
    "end": "1572240"
  },
  {
    "text": "the replicated storage and then we're going to have another database which is going to be the replicated",
    "start": "1572240",
    "end": "1579140"
  },
  {
    "text": "storage and we're going to run that on this on the um sorry replicated database and we're going to run it on the non-replicated storage now there's a",
    "start": "1579140",
    "end": "1585919"
  },
  {
    "text": "really nice tool which I found out how do I know that my databases are healthy and what that what's going on on the",
    "start": "1585919",
    "end": "1591320"
  },
  {
    "text": "kubernetes cluster so Cloud native postgres has a cube CTL plugin so cubes",
    "start": "1591320",
    "end": "1597140"
  },
  {
    "text": "ETL cmpg status and then Standalone DB so you can call that and it'll tell you",
    "start": "1597140",
    "end": "1602659"
  },
  {
    "text": "what's going on and the thing you're looking for is there's some okay labels in there and you can also see",
    "start": "1602659",
    "end": "1608120"
  },
  {
    "text": "things like which one of my right ahead logs how far ahead through my transaction processing am I",
    "start": "1608120",
    "end": "1614600"
  },
  {
    "text": "and so we've set up basically two databases and they're nicely running at",
    "start": "1614600",
    "end": "1620120"
  },
  {
    "text": "the right speed and we've got um we're using local nvmes the great thing about these local nvmes is their",
    "start": "1620120",
    "end": "1626900"
  },
  {
    "text": "sub millisecond disk latency for rights so even with three-way replication",
    "start": "1626900",
    "end": "1633140"
  },
  {
    "text": "across three availability zones so this is run this was demo was recorded in the Dublin so e West",
    "start": "1633140",
    "end": "1639460"
  },
  {
    "text": "1a1b1c even with three-way replica synchronous replication between three different zones",
    "start": "1639460",
    "end": "1645799"
  },
  {
    "text": "um we can get about 30 000 iops just out of the smallest instances you could you can get from that class so we can get",
    "start": "1645799",
    "end": "1651860"
  },
  {
    "text": "more and more workload through these just by beefing up the size of the instances and beefing up the size of the",
    "start": "1651860",
    "end": "1657260"
  },
  {
    "text": "network links for example um there's also a command line interface to",
    "start": "1657260",
    "end": "1663679"
  },
  {
    "text": "um to the on that storage layer so I've got some commands here where I'm just going",
    "start": "1663679",
    "end": "1669140"
  },
  {
    "text": "to you know pick a persistent volume claim so this is the thing that is the you know the most critical thing that",
    "start": "1669140",
    "end": "1675380"
  },
  {
    "text": "the um Cloud native postgres keys off and just to show you look there's this master line and if we pick another",
    "start": "1675380",
    "end": "1682820"
  },
  {
    "text": "if we pick another persistent volume claim from the from the replicated database sorry the Standalone database",
    "start": "1682820",
    "end": "1688340"
  },
  {
    "text": "where we've got storage replication on what you'll see is there'll be a master and there'll be a replica and a replica",
    "start": "1688340",
    "end": "1694460"
  },
  {
    "text": "so I'm just in the video showing you you know we're looking at everything under the covers there's no smoke there's no",
    "start": "1694460",
    "end": "1700700"
  },
  {
    "text": "mirrors this is all done there and the really nice thing about the cloud native postgres and on that both of them just",
    "start": "1700700",
    "end": "1707659"
  },
  {
    "text": "key off the kubernetes topology.io key so if your cluster has got topology Zone",
    "start": "1707659",
    "end": "1713960"
  },
  {
    "text": "sets then this stuff will just work and give you distribution across the availability",
    "start": "1713960",
    "end": "1720320"
  },
  {
    "text": "zones and it will give you fault tolerance across an availability zone out of the box on either the storage way",
    "start": "1720320",
    "end": "1725840"
  },
  {
    "text": "or on on the um Cloud native postgres way now of course everything's happily running everything seems to be fine so",
    "start": "1725840",
    "end": "1732740"
  },
  {
    "text": "like any good demo we're going to go into the AWS console and we're going to terminate the instance so we're going to pull the power out of the back of one of",
    "start": "1732740",
    "end": "1739400"
  },
  {
    "text": "the machines on purpose because that's what we have to survive with at the worst case scenario so we're going to go",
    "start": "1739400",
    "end": "1745640"
  },
  {
    "text": "in terminal instance I'm going to click terminate and boom it's gone",
    "start": "1745640",
    "end": "1750799"
  },
  {
    "text": "uh pod not available pod not available so we've already killed that so the the Standalone database has gone",
    "start": "1750799",
    "end": "1757640"
  },
  {
    "text": "someone's killed the node my pod was running on so I killed the node and it was actually one of the standbys uh",
    "start": "1757640",
    "end": "1762980"
  },
  {
    "text": "sorry one of the yeah one of the standby instances that was running on the same node as the Standalone database",
    "start": "1762980",
    "end": "1769039"
  },
  {
    "text": "um I can set the demo up so we've got the primary and the Standalone database running on the same node I've run",
    "start": "1769039",
    "end": "1774740"
  },
  {
    "text": "through lots of scenarios it doesn't really matter all I'm trying to show is the different recovery mechanisms that go on in under the covers",
    "start": "1774740",
    "end": "1781580"
  },
  {
    "text": "what I found really interesting is there's about I think it's about 300 second timeouts in kubernetes and there",
    "start": "1781580",
    "end": "1787580"
  },
  {
    "text": "was a talk about two before in this room which was about the new graceful shutdown mode and",
    "start": "1787580",
    "end": "1793100"
  },
  {
    "text": "ungraceful shutdown modes and I need to go and watch that talk to see how it's changed in 1.24 because I I think there",
    "start": "1793100",
    "end": "1799220"
  },
  {
    "text": "has been some improvements going on and I'm getting nods from people who've been at the talk so you've got to wait about five minutes for kubernetes",
    "start": "1799220",
    "end": "1806360"
  },
  {
    "text": "to notice and start recovering and doing things depending on which timers you hit but if you look at the AWS console",
    "start": "1806360",
    "end": "1812960"
  },
  {
    "text": "there's already four nodes there so AWS has not waited there's already another node in the 1B availability Zone that's",
    "start": "1812960",
    "end": "1819440"
  },
  {
    "text": "been spun up and then what we do is we go through and we basically see what's going on what's so not ready scheduling disabled",
    "start": "1819440",
    "end": "1826340"
  },
  {
    "text": "kubernetes hasn't even noticed the machine has died yet kubernetes is just like it's not ready it's not ready",
    "start": "1826340",
    "end": "1834140"
  },
  {
    "text": "eks has already actually created a new instance and is trying to join it to the cluster in the background so there's",
    "start": "1834140",
    "end": "1840740"
  },
  {
    "text": "some really interesting timing things and the one thing I took away from this is if you're going to do failure and",
    "start": "1840740",
    "end": "1846380"
  },
  {
    "text": "disaster recovery and you know testing you need to test the timing issues because things can go wrong all over the",
    "start": "1846380",
    "end": "1853279"
  },
  {
    "text": "place I was Finding when I was building the demos and stuff so look it still doesn't know it's it's gone it",
    "start": "1853279",
    "end": "1860000"
  },
  {
    "text": "still thinks there's three nodes there um so what will happen and we can speed up the the demo a little bit and just",
    "start": "1860000",
    "end": "1867080"
  },
  {
    "text": "kind of skip towards the end what you'll see um as we go through this is once kubernetes notices and the timers have",
    "start": "1867080",
    "end": "1874640"
  },
  {
    "text": "expired this for the Standalone database kubernetes go oh I just need to start the Pod again so kubernetes will spin",
    "start": "1874640",
    "end": "1881600"
  },
  {
    "text": "the Pod up and because at the storage layer we were replicating the storage between 1a1b and 1C the three",
    "start": "1881600",
    "end": "1887840"
  },
  {
    "text": "availability zones at the storage layer we'll promote one of the storage replicas to be the master of the storage",
    "start": "1887840",
    "end": "1894860"
  },
  {
    "text": "layer and that will just connect to the Pod and the Pod will start running and I",
    "start": "1894860",
    "end": "1900200"
  },
  {
    "text": "think I do a bit where I scroll up and I look at the Riser head log just to prove that the Well Log is where we left it",
    "start": "1900200",
    "end": "1906500"
  },
  {
    "text": "well it's actually it's actually one more because I think when it does its recovery it starts a new Well Log as well as part of that timeline yeah",
    "start": "1906500",
    "end": "1914000"
  },
  {
    "text": "on the other one um the the um the postgres the cloud native",
    "start": "1914000",
    "end": "1919279"
  },
  {
    "text": "postgres never recovers automatically as part of the process and this is",
    "start": "1919279",
    "end": "1924740"
  },
  {
    "text": "deliberate and this is to say if you go back and read the design of their operator this is deliberate and the way it's meant to work",
    "start": "1924740",
    "end": "1930919"
  },
  {
    "text": "because for it to recover automatically you have to basically say I want to delete PG data and delete the wow log",
    "start": "1930919",
    "end": "1937580"
  },
  {
    "text": "from that node so I'm I'm willing to throw away that node and now at a database level I want",
    "start": "1937580",
    "end": "1943159"
  },
  {
    "text": "to start a re-synchronization of PG data and and the wow log",
    "start": "1943159",
    "end": "1948380"
  },
  {
    "text": "so there's a command which I found out which is nicely automated it's great in the plugin so cubes ETL cmpg destroy",
    "start": "1948380",
    "end": "1956480"
  },
  {
    "text": "it is as disruptive and destructive as it sounds like it is and you say this database and this",
    "start": "1956480",
    "end": "1962600"
  },
  {
    "text": "instance number so if you see um on the top left I don't know I was I almost missed it there and",
    "start": "1962600",
    "end": "1970820"
  },
  {
    "text": "here we go see a cube ctlc and PG destroy replica replicated db2 and what",
    "start": "1970820",
    "end": "1976460"
  },
  {
    "text": "you should have seen in the top left is the pods back up and happy and running and in the bottom left so those were the",
    "start": "1976460",
    "end": "1982159"
  },
  {
    "text": "two cmpg status boxes for the Standalone database and the replicated database",
    "start": "1982159",
    "end": "1987799"
  },
  {
    "text": "what you would have seen is those two pods are now back up and sorry the the Standalone database with the storage",
    "start": "1987799",
    "end": "1993860"
  },
  {
    "text": "replication has just recovered and is back up and running there was an outage to the operations because until",
    "start": "1993860",
    "end": "2000519"
  },
  {
    "text": "kubernetes and the timers had all triggered in and until the Pod had been rescheduled the database was not there",
    "start": "2000519",
    "end": "2007480"
  },
  {
    "text": "and was not alive and was not healthy and not responding to requests whereas the replicated DB the cloud native",
    "start": "2007480",
    "end": "2012700"
  },
  {
    "text": "postgres database was happy and was running all the way through so we've gone through this and um we've",
    "start": "2012700",
    "end": "2019600"
  },
  {
    "text": "got okay okay and we've done a destroy so that pod will be being restarted so we've had a database running on a node",
    "start": "2019600",
    "end": "2027940"
  },
  {
    "text": "we've unplugged that node from the kubernetes cluster in a very very forceful terminated fashion and while",
    "start": "2027940",
    "end": "2034299"
  },
  {
    "text": "you've been watching this and this is real time within I think it's about six minutes totally lapsed both of those",
    "start": "2034299",
    "end": "2040480"
  },
  {
    "text": "databases have recovered and I the one thing I would say as well I took away from it is I'm not a postgres person by",
    "start": "2040480",
    "end": "2048099"
  },
  {
    "text": "core background but the Simplicity and the ease and the automation the operation that this Cloud native",
    "start": "2048099",
    "end": "2054520"
  },
  {
    "text": "postgres stuff I mean it was like 15 lines of yaml to just get a database up and running and it just it made my life",
    "start": "2054520",
    "end": "2061480"
  },
  {
    "text": "so much easier and it's really you know you see you can build very resilient patterns so if you want an RTO RPO of",
    "start": "2061480",
    "end": "2067540"
  },
  {
    "text": "zero you can use this stuff and you can build you know production workloads into",
    "start": "2067540",
    "end": "2072940"
  },
  {
    "text": "kubernetes now um I'm going to skip past the last bit of",
    "start": "2072940",
    "end": "2078280"
  },
  {
    "text": "that bit at the end uh we're pretty much out of time and gabrielli do you want to just do the honors with the conclusions",
    "start": "2078280",
    "end": "2084280"
  },
  {
    "text": "oh thank you yeah yeah and uh I mean ultimately it's all about freedom I like",
    "start": "2084280",
    "end": "2089740"
  },
  {
    "text": "to say this word because it's it's up to us and that's what kubernetes gives us okay open source in general we have the",
    "start": "2089740",
    "end": "2095858"
  },
  {
    "text": "possibility to run for example a full open source stack and another thing that",
    "start": "2095859",
    "end": "2101500"
  },
  {
    "text": "is important especially I'm a European for the gdpr for example is to own our",
    "start": "2101500",
    "end": "2107200"
  },
  {
    "text": "data we have the possibility now to retain control of the data full control of the data and decide if we want the",
    "start": "2107200",
    "end": "2114040"
  },
  {
    "text": "data in on-premise on a multi-cloud hybrid Cloud whatever",
    "start": "2114040",
    "end": "2119500"
  },
  {
    "text": "um using the same the same infrastructure by the same configuration then custom",
    "start": "2119500",
    "end": "2124900"
  },
  {
    "text": "optimization maybe you want to add more about these you know yeah so I mean if",
    "start": "2124900",
    "end": "2131020"
  },
  {
    "text": "you if you want to run the database at the lowest price point and it's a very data intensive workload you will not",
    "start": "2131020",
    "end": "2137920"
  },
  {
    "text": "find a cheaper way than running it on local nvmes no one's ever done that because there's no no one ever thinks to",
    "start": "2137920",
    "end": "2143440"
  },
  {
    "text": "do it maybe but using something like on that there's a CSI plugin that can orchestrate local nvmes and you get that",
    "start": "2143440",
    "end": "2149619"
  },
  {
    "text": "sub millisecond response so you can do massive volumes of transactions through your databases",
    "start": "2149619",
    "end": "2154660"
  },
  {
    "text": "yeah correct and again I mean this is something that I'm really happy because we learned a lot working with with uh",
    "start": "2154660",
    "end": "2161200"
  },
  {
    "text": "with Chris and his team we are database people with storage people we actually understood each other's point of view",
    "start": "2161200",
    "end": "2168160"
  },
  {
    "text": "and I think we we are much better now I think we have a better understanding of everything and then finally devops",
    "start": "2168160",
    "end": "2175000"
  },
  {
    "text": "because if we are here in my opinion it's because we have done a journey",
    "start": "2175000",
    "end": "2181200"
  },
  {
    "text": "that puts closer developers and database administrator infrastructure",
    "start": "2181200",
    "end": "2188160"
  },
  {
    "text": "administrators the good thing about Cloud9 EPG is that it is designed to",
    "start": "2188160",
    "end": "2194140"
  },
  {
    "text": "work with applications so it's a database that by itself doesn't have any any means any goal okay",
    "start": "2194140",
    "end": "2200200"
  },
  {
    "text": "it doesn't solve any goal but it's through applications that we believe it's been a great lot of fun",
    "start": "2200200",
    "end": "2206320"
  },
  {
    "text": "um I think we need to wrap up now we're at the end of a time we'll hang around for questions um we've also got a draw for a massive",
    "start": "2206320",
    "end": "2212680"
  },
  {
    "text": "Lego batwing at the on that Booth so if anyone wants to come and try and win that there's only about 40 50 people",
    "start": "2212680",
    "end": "2217900"
  },
  {
    "text": "entered so there's a really good chance we're at the back right hand corner of the um of the um of the exhibition Hall and",
    "start": "2217900",
    "end": "2224740"
  },
  {
    "text": "we're going to draw at half past five so if anyone's come and try and win that come along business cards here if anyone's getting",
    "start": "2224740",
    "end": "2230740"
  },
  {
    "text": "touched afterwards but do we have do we do questions live we do questions no thanks Gabriel thanks guys",
    "start": "2230740",
    "end": "2237359"
  },
  {
    "text": "but if you have questions you can still come and talk to him we are stopping the",
    "start": "2237359",
    "end": "2242680"
  },
  {
    "text": "recording but thank you very much [Applause]",
    "start": "2242680",
    "end": "2247359"
  }
]