[
  {
    "start": "0",
    "end": "104000"
  },
  {
    "text": "okay let's go ahead and get started i'd like to thank everybody for joining us today welcome to",
    "start": "1839",
    "end": "7600"
  },
  {
    "text": "today's cncf webinar advancing image security and compliance through container image",
    "start": "7600",
    "end": "13920"
  },
  {
    "text": "encryption i'm julius rosenthal i'll be moderating today's webinar",
    "start": "13920",
    "end": "19439"
  },
  {
    "text": "we'd like to welcome our presenter today brandon lum senior software engineer at ibm",
    "start": "19439",
    "end": "26480"
  },
  {
    "text": "a few housekeeping items before we get started during the webinar you are not able to talk as an attendee",
    "start": "26480",
    "end": "32960"
  },
  {
    "text": "there is a q a box at the bottom of your screen please feel free to drop your questions in there and we'll get",
    "start": "32960",
    "end": "39040"
  },
  {
    "text": "to as many as we can by the end this is an official webinar of the cncf",
    "start": "39040",
    "end": "44480"
  },
  {
    "text": "and as such is subject to the cncf code of conduct please do not add anything to the chat",
    "start": "44480",
    "end": "50239"
  },
  {
    "text": "or questions that would be in violation of that code of conduct basically please be respectful of all",
    "start": "50239",
    "end": "56000"
  },
  {
    "text": "your fellow participants and presenters please also note that later today we'll",
    "start": "56000",
    "end": "61120"
  },
  {
    "text": "have the webinar recording up on the cncf webinar page",
    "start": "61120",
    "end": "66479"
  },
  {
    "text": "with that i'll hand it over to brandon thank you judas uh hi again i'm brandon",
    "start": "66479",
    "end": "73360"
  },
  {
    "text": "um and i'm from ibm research and um i'm going to be talking a little bit",
    "start": "73360",
    "end": "78960"
  },
  {
    "text": "about container image encryption um but before then just to give you a quick quick overview",
    "start": "78960",
    "end": "85119"
  },
  {
    "text": "i've been working in container security um more specifically a lot of my work has",
    "start": "85119",
    "end": "91280"
  },
  {
    "text": "been in container image security and so we're going to go through you know how the motivation for this project came",
    "start": "91280",
    "end": "97920"
  },
  {
    "text": "about to be and then we're going to dive right into the details of it",
    "start": "97920",
    "end": "103920"
  },
  {
    "start": "104000",
    "end": "137000"
  },
  {
    "text": "so um just an overview we're going to go through what is containing image security what",
    "start": "105600",
    "end": "111040"
  },
  {
    "text": "exactly is a problem that we're looking at today we're going to define oci container",
    "start": "111040",
    "end": "116560"
  },
  {
    "text": "image encryption that we've been working on and then we're going to do an end-to-end demo",
    "start": "116560",
    "end": "122320"
  },
  {
    "text": "from building and then running it on the kubernetes cluster and finally we're going to talk a little",
    "start": "122320",
    "end": "128479"
  },
  {
    "text": "bit about some advanced uses of container image encryption such as",
    "start": "128479",
    "end": "134160"
  },
  {
    "text": "geofencing execution so let's get started",
    "start": "134160",
    "end": "139280"
  },
  {
    "start": "137000",
    "end": "487000"
  },
  {
    "text": "so naturally because we're talking about container images let's talk about you know what the flow",
    "start": "139280",
    "end": "145360"
  },
  {
    "text": "or the container image ecosystem looks like um so we have to build the distribute in",
    "start": "145360",
    "end": "150640"
  },
  {
    "text": "the run so if we go all the way to the left hand side we have the build this is where we are building our",
    "start": "150640",
    "end": "156879"
  },
  {
    "text": "container images so this can be on the developer's laptop or it could be",
    "start": "156879",
    "end": "162400"
  },
  {
    "text": "in a devops or cicd pipeline such as jenkins travis or techton",
    "start": "162400",
    "end": "169280"
  },
  {
    "text": "but essentially what comes out of this build part of the ecosystem is a container",
    "start": "169280",
    "end": "175599"
  },
  {
    "text": "image and so the natural next step of this is we need to be able to make the container",
    "start": "175599",
    "end": "181840"
  },
  {
    "text": "image available um for use and we do that by distributing it to registry so this could be uploading",
    "start": "181840",
    "end": "190159"
  },
  {
    "text": "the image docker hub for example and um you know because you want an image to be",
    "start": "190159",
    "end": "196480"
  },
  {
    "text": "highly available and have quick download times we may want to distribute it to different regions",
    "start": "196480",
    "end": "202480"
  },
  {
    "text": "and different registries around the world and finally once the image is made",
    "start": "202480",
    "end": "208159"
  },
  {
    "text": "available they all want to be run eventually so this is where the runtime comes in",
    "start": "208159",
    "end": "214400"
  },
  {
    "text": "where you know this could be docker this could be portman or you know it could be kubernetes runtime such as container d and cri",
    "start": "214400",
    "end": "222080"
  },
  {
    "text": "and cryo and the idea is that these are the components and the part of",
    "start": "222080",
    "end": "228959"
  },
  {
    "text": "the ecosystem that downloads and runs the container images",
    "start": "228959",
    "end": "235040"
  },
  {
    "text": "so the question that we're going to look at today is around the distribution part of the",
    "start": "235360",
    "end": "241120"
  },
  {
    "text": "container images how do we ensure the security of our images",
    "start": "241120",
    "end": "246560"
  },
  {
    "text": "while in distribution and more specifically the question that we're going to ask is if a registry is compromised or",
    "start": "246560",
    "end": "254720"
  },
  {
    "text": "untrusted what what can we do to ensure that our workloads are not compromised as well",
    "start": "254720",
    "end": "261600"
  },
  {
    "text": "so an example of this i like to go back to is the docker hub registry breach a while",
    "start": "261840",
    "end": "267280"
  },
  {
    "text": "back and in this case uh information about users and the docker heart registry were exposed",
    "start": "267280",
    "end": "274720"
  },
  {
    "text": "um so this means that you know um the integrity or the confidentiality of images would be compromised",
    "start": "274720",
    "end": "283840"
  },
  {
    "text": "so the idea that we want to achieve in continental image security is to be able",
    "start": "284000",
    "end": "289520"
  },
  {
    "text": "to ensure that even though a registry is compromised we want to be able to get certain",
    "start": "289520",
    "end": "296639"
  },
  {
    "text": "assurances of our container images and second of all another view of this",
    "start": "296639",
    "end": "303520"
  },
  {
    "text": "is the compliance perspective where in the case where we're using a third-party registry",
    "start": "303520",
    "end": "309600"
  },
  {
    "text": "or a registry that we do not necessarily they have great control and governance",
    "start": "309600",
    "end": "315919"
  },
  {
    "text": "over how do we still achieve compliance requirements in those situations",
    "start": "315919",
    "end": "322638"
  },
  {
    "text": "so the specific properties we're going to be looking at today um you know will be integrity",
    "start": "323600",
    "end": "329080"
  },
  {
    "text": "confidentiality and um if you've been following in",
    "start": "329080",
    "end": "334400"
  },
  {
    "text": "what's been happening image security you may be familiar with the technology of container image signing",
    "start": "334400",
    "end": "341039"
  },
  {
    "text": "and so container image signing is something that my group worked on for a while there are two technologies available in",
    "start": "341039",
    "end": "348880"
  },
  {
    "text": "this area mainly is docker content trust and red hand simple signing and",
    "start": "348880",
    "end": "355680"
  },
  {
    "text": "these projects they give the ability for a developer to sign the images when",
    "start": "355680",
    "end": "363039"
  },
  {
    "text": "they're building it and for them to verify it during the run time and so what this",
    "start": "363039",
    "end": "368400"
  },
  {
    "text": "ensures is that even if the registry is compromised if there is tampering of the images is",
    "start": "368400",
    "end": "375680"
  },
  {
    "text": "able to be detected before the container workload is being run on your cluster",
    "start": "375680",
    "end": "382080"
  },
  {
    "text": "so projects related to this are notary and aw v2 uh patera switches ambition web hook for",
    "start": "382080",
    "end": "389280"
  },
  {
    "text": "image verification and red hat simple signing which is part of builder",
    "start": "389280",
    "end": "395039"
  },
  {
    "text": "cryo podman and all the container tools",
    "start": "395039",
    "end": "400720"
  },
  {
    "text": "so the idea here is that image signing protects the integrity of the image we",
    "start": "400800",
    "end": "408000"
  },
  {
    "text": "ensure that tempering cannot be done however the confidentiality of the image",
    "start": "408000",
    "end": "414960"
  },
  {
    "text": "is still at risk and the example of this is for example if i have a container",
    "start": "414960",
    "end": "421199"
  },
  {
    "text": "image that contains a highly classified trading algorithm for example",
    "start": "421199",
    "end": "426319"
  },
  {
    "text": "which is a trade secret i don't want anyone that's compromised the registry to be able to look at",
    "start": "426319",
    "end": "432960"
  },
  {
    "text": "the algorithm that i'm running and this is the problem that we are looking",
    "start": "432960",
    "end": "438720"
  },
  {
    "text": "at how do we protect the contents of container images in the case",
    "start": "438720",
    "end": "444160"
  },
  {
    "text": "of a registry breach",
    "start": "444160",
    "end": "447759"
  },
  {
    "text": "and so this is where container image encryption comes in so um the idea of this is during the",
    "start": "449199",
    "end": "456400"
  },
  {
    "text": "build stage we add an encrypt set before we push the image and during the run after we pull the",
    "start": "456400",
    "end": "464479"
  },
  {
    "text": "image we decrypt it before running and the idea is between the build and",
    "start": "464479",
    "end": "470319"
  },
  {
    "text": "run the contain container image remains encrypted in the registry in transit and therefore no one should",
    "start": "470319",
    "end": "477199"
  },
  {
    "text": "be able to violate the integrity or the confidentiality of",
    "start": "477199",
    "end": "482720"
  },
  {
    "text": "a container image",
    "start": "482720",
    "end": "485680"
  },
  {
    "start": "487000",
    "end": "566000"
  },
  {
    "text": "so what benefits of container image so so we talked a bit about it already so we have image confidentiality",
    "start": "489039",
    "end": "496160"
  },
  {
    "text": "we no one would be able to look at the contents of a container image even if for example we don't trust the",
    "start": "496160",
    "end": "503280"
  },
  {
    "text": "provider of the registry and that's that's what what it allows us to do is to de-privilege the registry",
    "start": "503280",
    "end": "510720"
  },
  {
    "text": "with both image signing and encryption uh the registry becomes untrusted and we",
    "start": "510720",
    "end": "516959"
  },
  {
    "text": "can put our images there without any risks of the integrity of confidentiality being violated",
    "start": "516959",
    "end": "524159"
  },
  {
    "text": "another aspect of this is being able to do execution boundary control or",
    "start": "524159",
    "end": "530000"
  },
  {
    "text": "geo-fencing execution and the idea here is um an administrator",
    "start": "530000",
    "end": "535120"
  },
  {
    "text": "should be able to make the statement that says that uh if my code is running i know it's in a particular cluster",
    "start": "535120",
    "end": "541279"
  },
  {
    "text": "so example in the compliance perspective is that i have a for example a image",
    "start": "541279",
    "end": "548160"
  },
  {
    "text": "and i know that it can only be run in aeu cluster",
    "start": "548160",
    "end": "553839"
  },
  {
    "text": "so we'll talk a bit about that on towards the end and this is really taking encrypted container images",
    "start": "553839",
    "end": "559440"
  },
  {
    "text": "as well as some key management on techniques to achieve this",
    "start": "559440",
    "end": "565519"
  },
  {
    "start": "566000",
    "end": "732000"
  },
  {
    "text": "all right so before we get into um how to encrypt a container and share it",
    "start": "567920",
    "end": "574240"
  },
  {
    "text": "let's go through some crypto concepts that we would require for this so",
    "start": "574240",
    "end": "580959"
  },
  {
    "text": "we're gonna look at asymmetric encryption and the idea around asymmetric encryption",
    "start": "580959",
    "end": "586560"
  },
  {
    "text": "is you have a public private keypad and the public",
    "start": "586560",
    "end": "593279"
  },
  {
    "text": "key is something that's publicly accessible it's not sensitive and the private key is kept secret to",
    "start": "593279",
    "end": "600080"
  },
  {
    "text": "the creator of the key pair and the idea here is that you can generate a",
    "start": "600080",
    "end": "606079"
  },
  {
    "text": "message that you want to encrypt like a secret message you can encrypt it with a public key to",
    "start": "606079",
    "end": "611360"
  },
  {
    "text": "get a ciphertext and the ciphertext can only be decrypted with the private key of this keypad",
    "start": "611360",
    "end": "619839"
  },
  {
    "text": "and um if you use if if you use something like ssh you'll",
    "start": "620160",
    "end": "625360"
  },
  {
    "text": "most probably be familiar with this whenever you generate a key pair and",
    "start": "625360",
    "end": "630399"
  },
  {
    "text": "you're on the ssh to a public machine you're taking the public key and you're putting it",
    "start": "630399",
    "end": "636000"
  },
  {
    "text": "in the ssh directory of the machine you want the association to",
    "start": "636000",
    "end": "641200"
  },
  {
    "text": "so the idea of this is that asymmetric encryption makes key sharing",
    "start": "641200",
    "end": "646800"
  },
  {
    "text": "a bit easier because uh the public key that we are sharing for encryption to be done uh",
    "start": "646800",
    "end": "654000"
  },
  {
    "text": "is not sensitive and we can use public channels to convey this this key",
    "start": "654000",
    "end": "661839"
  },
  {
    "text": "so let's look at the example of encrypting an image to someone so let's",
    "start": "662079",
    "end": "668160"
  },
  {
    "text": "say we want bob wants to send an encrypted image to addis right so it's the flow is going to look",
    "start": "668160",
    "end": "675519"
  },
  {
    "text": "like um how we would send an encrypted email and the idea is first alice creates a rsc a private",
    "start": "675519",
    "end": "683600"
  },
  {
    "text": "public key pair and she using the open ssl commands",
    "start": "683600",
    "end": "688959"
  },
  {
    "text": "and then she takes the public key and transfers it to bomb so this publicly",
    "start": "688959",
    "end": "695040"
  },
  {
    "text": "is not sensitive it can be read by anyone and bob then takes the image that he's",
    "start": "695040",
    "end": "701120"
  },
  {
    "text": "created and encrypts it with addison's public key to say that now i'm going to encrypt an image for",
    "start": "701120",
    "end": "707440"
  },
  {
    "text": "others and bob can then upload this encrypted image to the registry for example docker hub",
    "start": "707440",
    "end": "716160"
  },
  {
    "text": "and finally edis can then pull the encrypted image and only because she has the private key",
    "start": "716160",
    "end": "722720"
  },
  {
    "text": "of this keypad she can then decrypt and run the image",
    "start": "722720",
    "end": "731839"
  },
  {
    "start": "732000",
    "end": "1169000"
  },
  {
    "text": "all right so let's go through a quick demo on what this looks like so i",
    "start": "733839",
    "end": "740720"
  },
  {
    "text": "have a terminal here with a work directory and we're gonna simulate uh what the the flow we just",
    "start": "740720",
    "end": "747200"
  },
  {
    "text": "went through right so box to send an encrypted image to others um so the first thing that others needs",
    "start": "747200",
    "end": "754320"
  },
  {
    "text": "to do is generate several keys so this is addison's directory here",
    "start": "754320",
    "end": "760399"
  },
  {
    "text": "and what we are going to do is we are going to use the openssl command to generate a private key for others so",
    "start": "760399",
    "end": "768240"
  },
  {
    "text": "now we have addresses private key and then we are going to use",
    "start": "768240",
    "end": "773839"
  },
  {
    "text": "a command to generate the public key for this keypad right so in this directory now um",
    "start": "773839",
    "end": "781839"
  },
  {
    "text": "the other test we can see that she has a private public keypad we have a private key and a public key",
    "start": "781839",
    "end": "789279"
  },
  {
    "text": "now because alice wants to let bob encrypt an image for her",
    "start": "789279",
    "end": "795839"
  },
  {
    "text": "she would then want to make this available to bob so in this case because we're going",
    "start": "795839",
    "end": "801200"
  },
  {
    "text": "to be on the same machine we're just going to copy it to a directory that bob has access to",
    "start": "801200",
    "end": "808639"
  },
  {
    "text": "so now that's bob um what we're going to do is we want to",
    "start": "813680",
    "end": "818800"
  },
  {
    "text": "create an image for alice right so um we have an app over here",
    "start": "818800",
    "end": "825600"
  },
  {
    "text": "so this is a very really simple app really what it's doing is the second engine x and it's copying",
    "start": "825600",
    "end": "833440"
  },
  {
    "text": "a secret file into the file system and this is you know something that we",
    "start": "833440",
    "end": "841120"
  },
  {
    "text": "would imagine is confidential code right it could be a sensitive algorithm trade secrets of",
    "start": "841120",
    "end": "848320"
  },
  {
    "text": "the company and so on so for this i'd say super secret",
    "start": "848320",
    "end": "853360"
  },
  {
    "text": "password for cncf webinar",
    "start": "853360",
    "end": "858319"
  },
  {
    "text": "right so what we're going to do now is uh bob is going to build this image um",
    "start": "860079",
    "end": "866079"
  },
  {
    "text": "so the tool that we're using today to build the image is using builder",
    "start": "866079",
    "end": "871839"
  },
  {
    "text": "so builda is kind of a similar tool to chemical or docker cri",
    "start": "871920",
    "end": "879279"
  },
  {
    "text": "and which it can be used to build images so build.but is equivalent to on docker build",
    "start": "879279",
    "end": "887360"
  },
  {
    "text": "cool and we see that the image is now created and the next thing bob is now going to",
    "start": "894000",
    "end": "899600"
  },
  {
    "text": "do is bob wants to encrypt the image and send it to others",
    "start": "899600",
    "end": "906160"
  },
  {
    "text": "so bob is going to encrypt the image and upload it to the registry so we can do this with the command",
    "start": "906160",
    "end": "912320"
  },
  {
    "text": "build.push and we have the name of the image here",
    "start": "912320",
    "end": "919120"
  },
  {
    "text": "and over what we're going to do is we're going to add a flag called encryption key",
    "start": "920000",
    "end": "927519"
  },
  {
    "text": "and then we're going to specify it as alice's private key",
    "start": "927519",
    "end": "935279"
  },
  {
    "text": "so note here when we're specifying the encryption key we have a additional prefix called jwe",
    "start": "937759",
    "end": "946240"
  },
  {
    "text": "this is really looking at the internals of the encryption implementation what it's saying is that we're going to use the json web",
    "start": "946240",
    "end": "953839"
  },
  {
    "text": "encryption protocol to encrypt the key necessary to decrypt the image",
    "start": "953839",
    "end": "961120"
  },
  {
    "text": "and then we're going to say use credentials because i'm now pushing this to docker hub i'm going to use my",
    "start": "961680",
    "end": "967360"
  },
  {
    "text": "credentials for docker hub",
    "start": "967360",
    "end": "970560"
  },
  {
    "text": "oops i that is not the name of the private key oh public key sorry",
    "start": "972560",
    "end": "981120"
  },
  {
    "text": "it's like that because we're encrypting we're using the public key",
    "start": "981120",
    "end": "997839"
  },
  {
    "text": "cool now so we've just um uploaded encrypted image we said please encrypt this use the addresses",
    "start": "1000320",
    "end": "1006720"
  },
  {
    "text": "public key to encrypt it and we are uploading to docker hub so if we go to dockerhub.com",
    "start": "1006720",
    "end": "1016240"
  },
  {
    "text": "we should be able to see this image available there",
    "start": "1016720",
    "end": "1025438"
  },
  {
    "text": "cool so now that we have uh this image that bob has uploaded to the docker hub registry we're gonna",
    "start": "1025439",
    "end": "1033120"
  },
  {
    "text": "show how edits can download the image and use it",
    "start": "1033120",
    "end": "1038160"
  },
  {
    "text": "so what we're going to do now is we're going to remove all the images locally to um to kind of simulate adders doing",
    "start": "1038160",
    "end": "1045038"
  },
  {
    "text": "this on a different machine so now we are going to use um",
    "start": "1045039",
    "end": "1050640"
  },
  {
    "text": "so editing say build.pull um and she can specify the decryption",
    "start": "1050640",
    "end": "1057120"
  },
  {
    "text": "keys so she's going to say build a pool to put the image here's the private key",
    "start": "1057120",
    "end": "1064160"
  },
  {
    "text": "that is required to decrypt the image and this is the name of the image docker hub",
    "start": "1064160",
    "end": "1070000"
  },
  {
    "text": "so she should be able to do this is downloading and getting the image",
    "start": "1070000",
    "end": "1076400"
  },
  {
    "text": "and then she can run that here so we can do apartment run",
    "start": "1078320",
    "end": "1083360"
  },
  {
    "text": "and we can see um the secret file that we created",
    "start": "1083360",
    "end": "1089200"
  },
  {
    "text": "so now we we've kind of seen like the end to end how buff is encrypted and alice has",
    "start": "1090400",
    "end": "1095679"
  },
  {
    "text": "decrypted so let's imagine if now i'm an adversary eve right um somehow i've been able to get",
    "start": "1095679",
    "end": "1103840"
  },
  {
    "text": "my hands on this image i should not be able to see the contents of it",
    "start": "1103840",
    "end": "1109120"
  },
  {
    "text": "right so i'm gonna remove the images again and what i'm gonna do",
    "start": "1109120",
    "end": "1115360"
  },
  {
    "text": "now is i'm gonna do a pool but in this case i'm not gonna specify the decryption key",
    "start": "1115360",
    "end": "1122160"
  },
  {
    "text": "here so if this is someone that tries to pull the image but",
    "start": "1122160",
    "end": "1127919"
  },
  {
    "text": "does not have um the private key to decrypt the image what we'll see is that it's trying to",
    "start": "1127919",
    "end": "1135120"
  },
  {
    "text": "download the image and it returns an error message here",
    "start": "1135120",
    "end": "1141600"
  },
  {
    "text": "that says missing private keys needed for decryption so what this means",
    "start": "1141600",
    "end": "1147360"
  },
  {
    "text": "is that the image stays encrypted and so you know the contents of the the image is secure",
    "start": "1147360",
    "end": "1154320"
  },
  {
    "text": "from adversaries",
    "start": "1154320",
    "end": "1157279"
  },
  {
    "text": "all right so coming back let's kind of take a deeper dive into what exactly is",
    "start": "1160160",
    "end": "1166240"
  },
  {
    "text": "happening here how is anchored the container images implemented and for this we go to the oci spec",
    "start": "1166240",
    "end": "1174000"
  },
  {
    "start": "1169000",
    "end": "1592000"
  },
  {
    "text": "which is the open container initiative and we're looking at the image back more",
    "start": "1174000",
    "end": "1180720"
  },
  {
    "text": "specifically so the idea is we have an image spec and",
    "start": "1180720",
    "end": "1186160"
  },
  {
    "text": "what image that looks like in oci is is a json document and the json document contains",
    "start": "1186160",
    "end": "1194000"
  },
  {
    "text": "a bit of metadata on the configuration of the image as well as a field called layers",
    "start": "1194000",
    "end": "1200720"
  },
  {
    "text": "and in the layer field it lists on the various content pieces of the image you know",
    "start": "1200720",
    "end": "1206320"
  },
  {
    "text": "what are the files that make up the image and so what this are really they're just",
    "start": "1206320",
    "end": "1212559"
  },
  {
    "text": "collection of files that have entire gzipped and what when a runtime downloads the",
    "start": "1212559",
    "end": "1219440"
  },
  {
    "text": "image it takes these top-ups and it untouched them",
    "start": "1219440",
    "end": "1225120"
  },
  {
    "text": "and put them together to form the container image so what we are doing in this case is",
    "start": "1225120",
    "end": "1232720"
  },
  {
    "text": "unlike image signing where we can just sign the manifest of the image ensure that",
    "start": "1232720",
    "end": "1238880"
  },
  {
    "text": "it's not being tampered with um the contents of the image are not actually in the manifest itself",
    "start": "1238880",
    "end": "1245679"
  },
  {
    "text": "but in the files that are created there from the image so what we've done is we've introduced a",
    "start": "1245679",
    "end": "1252960"
  },
  {
    "text": "plus encrypted suffix for mfo layers and what this means is that on top of",
    "start": "1252960",
    "end": "1259280"
  },
  {
    "text": "just target zipping the collection of files we do an additional encryption set",
    "start": "1259280",
    "end": "1264960"
  },
  {
    "text": "to encrypt these blocks and we have this new media type called plus",
    "start": "1264960",
    "end": "1270000"
  },
  {
    "text": "encrypted so within the layers now we have media type instead of layer.tar",
    "start": "1270000",
    "end": "1275360"
  },
  {
    "text": "gzip we have gzip plus encrypted and we have several annotations over",
    "start": "1275360",
    "end": "1282400"
  },
  {
    "text": "here to kind of show details of how the layer can be [Music]",
    "start": "1282400",
    "end": "1288840"
  },
  {
    "text": "decrypted so let's kind of take a quick",
    "start": "1288840",
    "end": "1294880"
  },
  {
    "text": "look at this um and we're going to use the scorpio tool",
    "start": "1294880",
    "end": "1300960"
  },
  {
    "text": "so let's look at the image that we've created",
    "start": "1301360",
    "end": "1305840"
  },
  {
    "text": "so i'm gonna remove this and so scorpio is a tool that um can be used to look at",
    "start": "1306480",
    "end": "1314240"
  },
  {
    "text": "details of images what i'm gonna do is i'm gonna say at least download this image from docker hub and we can",
    "start": "1314240",
    "end": "1321520"
  },
  {
    "text": "see now that if we go in and look at the index it says that um",
    "start": "1321520",
    "end": "1329600"
  },
  {
    "text": "here's the manifest it's located this digest so if we dig into the image",
    "start": "1329600",
    "end": "1337120"
  },
  {
    "text": "we can go into the manifest and if we go down all the way to layers",
    "start": "1338960",
    "end": "1345919"
  },
  {
    "text": "we can see that now the layers are being encrypted right so start using plus encrypted",
    "start": "1345919",
    "end": "1351919"
  },
  {
    "text": "and over here you can see here's the metadata that is required to decrypt the image now metadata can",
    "start": "1351919",
    "end": "1359120"
  },
  {
    "text": "only be used if um access to the private key is available so the private key is still",
    "start": "1359120",
    "end": "1366000"
  },
  {
    "text": "required to decrypt this package so that the layer itself can be decrypted",
    "start": "1366000",
    "end": "1375840"
  },
  {
    "text": "all right so a few interesting things about the",
    "start": "1382640",
    "end": "1388480"
  },
  {
    "text": "design choices that we have for encrypted container images is firstly by",
    "start": "1388480",
    "end": "1393919"
  },
  {
    "text": "doing encryption on the layers instead of the entire image we still benefit from the effects via",
    "start": "1393919",
    "end": "1400720"
  },
  {
    "text": "the or deduplication of non-sensitive layers so if we have an image for example where we have a",
    "start": "1400720",
    "end": "1408960"
  },
  {
    "text": "small bit of code which is a secret algorithm we can still use the ubuntu layers",
    "start": "1408960",
    "end": "1414000"
  },
  {
    "text": "and the middleware layers to um to be able to use the images and basically these will be deduplicated",
    "start": "1414000",
    "end": "1421120"
  },
  {
    "text": "so we have the middleware and the operating system and you know only the small blob on top would be",
    "start": "1421120",
    "end": "1427039"
  },
  {
    "text": "the encrypted code so another thing that we have here is",
    "start": "1427039",
    "end": "1434240"
  },
  {
    "text": "that we are able to be able to encrypt from multiple recipients so um in this case we showed that we",
    "start": "1434240",
    "end": "1441919"
  },
  {
    "text": "have encrypted a um an image for others but in this case i can specify that i",
    "start": "1441919",
    "end": "1448159"
  },
  {
    "text": "want to encrypt a particular image for address for brandon for justin or for example in the case where you're",
    "start": "1448159",
    "end": "1454559"
  },
  {
    "text": "using a third party service for scanning images we can say we're going to encrypt",
    "start": "1454559",
    "end": "1460320"
  },
  {
    "text": "the the image so that it can be decrypted by a body scanning service",
    "start": "1460320",
    "end": "1466480"
  },
  {
    "text": "so we talked about uh you know what it looks like when we say bob wants to send an encrypted to others",
    "start": "1469279",
    "end": "1475679"
  },
  {
    "text": "this kind of shows us the end-to-end flow for developers wanting to share encrypted images",
    "start": "1475679",
    "end": "1482960"
  },
  {
    "text": "however what happens if we want to actually run this on the cluster",
    "start": "1482960",
    "end": "1488799"
  },
  {
    "text": "so the idea is here adam says okay now there are these images uh how to run this on my kubernetes",
    "start": "1488799",
    "end": "1495279"
  },
  {
    "text": "cluster so flow is going to look um almost",
    "start": "1495279",
    "end": "1501440"
  },
  {
    "text": "exactly the same as um what we saw earlier where you know bob wants to send something to others",
    "start": "1501440",
    "end": "1507679"
  },
  {
    "text": "um however the only difference here is that instead of address pulling and decrypting the image with a private key",
    "start": "1507679",
    "end": "1515360"
  },
  {
    "text": "this would be addison's kubernetes cluster that will be doing it",
    "start": "1515360",
    "end": "1520720"
  },
  {
    "text": "so how does this work um so down here is that addis had the decryption keys to decrypt",
    "start": "1523919",
    "end": "1530400"
  },
  {
    "text": "the uh the image earlier when we used to build a command uh now in order for the kubernetes",
    "start": "1530400",
    "end": "1538400"
  },
  {
    "text": "cluster to download and decrypt this images addis has to make the private key available to the nodes on the cluster",
    "start": "1538400",
    "end": "1546080"
  },
  {
    "text": "so the idea here is that others can configure the private keys on the nodes of the cluster",
    "start": "1546080",
    "end": "1551520"
  },
  {
    "text": "and the nodes will be and when the images are pulled and unpacked the decryption will be done",
    "start": "1551520",
    "end": "1559120"
  },
  {
    "text": "so the component that does this today in kubernetes is the runtime so this",
    "start": "1559360",
    "end": "1566320"
  },
  {
    "text": "would be either container d or cryo and the idea is that in kubernetes we",
    "start": "1566320",
    "end": "1573279"
  },
  {
    "text": "are going to be able to define um the location of these keys on the",
    "start": "1573279",
    "end": "1578320"
  },
  {
    "text": "nodes itself so in the case of prio it's going to the default directory it's going to be",
    "start": "1578320",
    "end": "1584720"
  },
  {
    "text": "etsy cryo keys and for container d this can be set in the config.tamil file",
    "start": "1584720",
    "end": "1592320"
  },
  {
    "start": "1592000",
    "end": "1820000"
  },
  {
    "text": "so let's take a look at um how this works",
    "start": "1592799",
    "end": "1599840"
  },
  {
    "text": "so we are going to have a kubernetes cluster here so i've started a minicube",
    "start": "1600799",
    "end": "1606880"
  },
  {
    "text": "cluster and basically um i decided to use the",
    "start": "1606880",
    "end": "1611919"
  },
  {
    "text": "cryo runtime and we can see here is running a kubernetes cluster 118",
    "start": "1611919",
    "end": "1617440"
  },
  {
    "text": "on cryo 117 and the idea here to initialize the cluster with encrypted",
    "start": "1617440",
    "end": "1623360"
  },
  {
    "text": "images is to ensure that the directory that is created so making sure that as the cryo keys is",
    "start": "1623360",
    "end": "1630720"
  },
  {
    "text": "available here and now what we're gonna do is we're gonna try and run the image that we",
    "start": "1630720",
    "end": "1637039"
  },
  {
    "text": "created earlier so to do this we're going to use the mini cube dashboard",
    "start": "1637039",
    "end": "1644480"
  },
  {
    "text": "and we are going to run our image here so now alice is going to try and run",
    "start": "1646960",
    "end": "1653120"
  },
  {
    "text": "this image we're going to use app name we're just going to say this is the anchor the app",
    "start": "1653120",
    "end": "1658159"
  },
  {
    "text": "that we want to use and we are going to say the container image",
    "start": "1658159",
    "end": "1663520"
  },
  {
    "text": "it's the one that we've created which is docker hub.io and i'm jgb my app",
    "start": "1663520",
    "end": "1669840"
  },
  {
    "text": "so like a regular port this can be deployed and we are going to see update in a couple",
    "start": "1670159",
    "end": "1676320"
  },
  {
    "text": "of seconds and oh look but it looks like there was an issue with",
    "start": "1676320",
    "end": "1681600"
  },
  {
    "text": "downloading and using the image so if we go down into",
    "start": "1681600",
    "end": "1688080"
  },
  {
    "text": "the pod status here and we click on the error message here",
    "start": "1688080",
    "end": "1693200"
  },
  {
    "text": "we can now see the error saying that it's unable to pull the image and more specifically",
    "start": "1693200",
    "end": "1699279"
  },
  {
    "text": "that it was not able to decrypt the image because a private key was missing",
    "start": "1699279",
    "end": "1705760"
  },
  {
    "text": "right so it's kind of expected right because to initialize the directory but we didn't really put in the private key",
    "start": "1705760",
    "end": "1712480"
  },
  {
    "text": "required to decrypt the image",
    "start": "1712480",
    "end": "1716000"
  },
  {
    "text": "so that's what we're going to do next so alice is now going to take her private",
    "start": "1717760",
    "end": "1722840"
  },
  {
    "text": "key so this is what we generated earlier and we are going to take this",
    "start": "1722840",
    "end": "1728720"
  },
  {
    "text": "and we are going to put it in the node",
    "start": "1728720",
    "end": "1732799"
  },
  {
    "text": "so we are going to put this in the node by doing mini cube ssh into the node",
    "start": "1735279",
    "end": "1740720"
  },
  {
    "text": "we're gonna go to the directory and then we are going to put the file in",
    "start": "1740720",
    "end": "1749360"
  },
  {
    "text": "as it says private key and we are going to paste in the file",
    "start": "1749360",
    "end": "1756159"
  },
  {
    "text": "over here cool so now we have addison's private key",
    "start": "1756159",
    "end": "1761200"
  },
  {
    "text": "in the node it should be able to decrypt the image",
    "start": "1761200",
    "end": "1767279"
  },
  {
    "text": "so now we're going to go back to the kubernetes dashboard and we are going to retry this image by just deleting the",
    "start": "1767279",
    "end": "1773440"
  },
  {
    "text": "pod and make it make the deployment create a new part",
    "start": "1773440",
    "end": "1778398"
  },
  {
    "text": "here and it's going to wait a couple seconds and we can see that the part was",
    "start": "1778840",
    "end": "1785760"
  },
  {
    "text": "successfully deployed this means that it was able to decrypt the image and run it",
    "start": "1785760",
    "end": "1793279"
  },
  {
    "text": "and what we can do to just ensure that is let's go into the pot to make sure that we have this image",
    "start": "1793520",
    "end": "1799200"
  },
  {
    "text": "over here and we have the secret file that we created earlier",
    "start": "1799200",
    "end": "1805520"
  },
  {
    "text": "and we can see that this was all super secret password that we put in with the cncf webinar",
    "start": "1806399",
    "end": "1822080"
  },
  {
    "start": "1820000",
    "end": "2146000"
  },
  {
    "text": "all right so now we're shown uh how we create uh an image and we are able to run it on",
    "start": "1822080",
    "end": "1827840"
  },
  {
    "text": "the kubernetes cluster um what we saw basically was this right",
    "start": "1827840",
    "end": "1832880"
  },
  {
    "text": "uh we we showed how addis can take a private key and we can put in the kubernetes cluster",
    "start": "1832880",
    "end": "1838000"
  },
  {
    "text": "by going to each individual node and putting the private key in the directory where the runtime retrieves it",
    "start": "1838000",
    "end": "1846000"
  },
  {
    "text": "however you know this is just something that um you may not necessarily want to do in",
    "start": "1846000",
    "end": "1851760"
  },
  {
    "text": "production right because then the administrator has access to the private keys and so on",
    "start": "1851760",
    "end": "1856799"
  },
  {
    "text": "um so the next step up of what you can do is to have the notes be able to retrieve",
    "start": "1856799",
    "end": "1864640"
  },
  {
    "text": "the the keys from some sort of key management system such as fault or the kubernetes secrets right so in",
    "start": "1864640",
    "end": "1872159"
  },
  {
    "text": "this case we can generate keys and make sure they can generate keys within vault or put them in the kubernetes secret and",
    "start": "1872159",
    "end": "1879200"
  },
  {
    "text": "we can ensure that through an operator be able to say that a cluster should only be able to",
    "start": "1879200",
    "end": "1885200"
  },
  {
    "text": "download these keys and put them on the notes only if it is all the right to do so",
    "start": "1885200",
    "end": "1891440"
  },
  {
    "text": "right so this can be by ensuring that there's a proper token that the the cluster has to be available to",
    "start": "1891440",
    "end": "1898960"
  },
  {
    "text": "download these private keys so we're currently in the works of",
    "start": "1898960",
    "end": "1904240"
  },
  {
    "text": "creating operator here to do this for kubernetes secret so the idea is that if you put",
    "start": "1904240",
    "end": "1909919"
  },
  {
    "text": "on the key in kubernetes secrets it would be automatically synced onto every node within the cluster and",
    "start": "1909919",
    "end": "1916559"
  },
  {
    "text": "we are looking to be able to do this as well with key management systems such as phone",
    "start": "1916559",
    "end": "1922799"
  },
  {
    "text": "so this is kind of looking at things as a single cluster environment so how about when we have",
    "start": "1924399",
    "end": "1930880"
  },
  {
    "text": "multiple clusters over different regions and this really brings us into more of a",
    "start": "1930880",
    "end": "1936559"
  },
  {
    "text": "compliance perspective of it so the idea here is that we have",
    "start": "1936559",
    "end": "1941679"
  },
  {
    "text": "multiple clusters we have a us cluster and an eu cluster",
    "start": "1941679",
    "end": "1946840"
  },
  {
    "text": "here and the idea is that we can generate private keys that are specific to each",
    "start": "1946840",
    "end": "1952640"
  },
  {
    "text": "of them so we have the eu cluster with a private key and we have the us cluster that has a u.s private key",
    "start": "1952640",
    "end": "1960320"
  },
  {
    "text": "and these keys can only be delivered successfully if the cluster is authorized",
    "start": "1960320",
    "end": "1968080"
  },
  {
    "text": "and what happens now is that now someone can go say that i want to encrypt an image with",
    "start": "1968080",
    "end": "1974480"
  },
  {
    "text": "the eu public key so now we have this images encrypted and",
    "start": "1974480",
    "end": "1979840"
  },
  {
    "text": "more specifically is encrypted and assigned to eu keys",
    "start": "1979840",
    "end": "1985679"
  },
  {
    "text": "so what happens here is that now this eu key can only eu image can be only decrypted on the eu",
    "start": "1985679",
    "end": "1993039"
  },
  {
    "text": "cluster and not the us cluster so in the case where it's something like export control where",
    "start": "1993039",
    "end": "1999440"
  },
  {
    "text": "certain algorithms cannot be run in particular regions this can be used",
    "start": "1999440",
    "end": "2005039"
  },
  {
    "text": "to basically create that binding of the control between the images and",
    "start": "2005039",
    "end": "2011200"
  },
  {
    "text": "the environment switched around it and so this can be used for geofencing",
    "start": "2011200",
    "end": "2017200"
  },
  {
    "text": "by aba by encrypting the image for various regions and ensuring that",
    "start": "2017200",
    "end": "2022640"
  },
  {
    "text": "we have proper key management to ensure that only the correct regions have access to",
    "start": "2022640",
    "end": "2028000"
  },
  {
    "text": "this private key and this this kind of setup can be as",
    "start": "2028000",
    "end": "2033840"
  },
  {
    "text": "complex as as you'd like it to be um you can have the keys just based on authorization",
    "start": "2033840",
    "end": "2039519"
  },
  {
    "text": "of if a token default um you can go as much as to ensuring that there's a hardware route",
    "start": "2039519",
    "end": "2045919"
  },
  {
    "text": "of trust that is backed by this so every cluster has a tpm that tpm is bootstrap in the data center",
    "start": "2045919",
    "end": "2051599"
  },
  {
    "text": "with the asset tag um but that in itself is kind of talk on its own so",
    "start": "2051599",
    "end": "2056960"
  },
  {
    "text": "i won't be covering too much details but we can talk about it in the q and a if you liked it",
    "start": "2056960",
    "end": "2063760"
  },
  {
    "text": "so just to give a summary um so we talked about container encryption how does it work what is the data for to",
    "start": "2065440",
    "end": "2072800"
  },
  {
    "text": "protect the confidentiality of images uh and to ensure that we can de-privilege the registry",
    "start": "2072800",
    "end": "2078560"
  },
  {
    "text": "even if it's compromised uh we've shown that with key management",
    "start": "2078560",
    "end": "2084000"
  },
  {
    "text": "and proper authorization we can provide dual fencing execution capabilities",
    "start": "2084000",
    "end": "2090800"
  },
  {
    "text": "and we also show kind of an end-to-end demo how to do this um from a developer creating the image",
    "start": "2090800",
    "end": "2097359"
  },
  {
    "text": "to running it on a kubernetes cluster so today uh we have this is being",
    "start": "2097359",
    "end": "2103760"
  },
  {
    "text": "supported by continued the enquiry runtimes you can use builder you can use scorpio to encrypt these images",
    "start": "2103760",
    "end": "2109440"
  },
  {
    "text": "and as you've seen it's supported in docker distribution so um you can upload these images to docker",
    "start": "2109440",
    "end": "2115520"
  },
  {
    "text": "hub or any registry that uses the docker distribution registry",
    "start": "2115520",
    "end": "2121920"
  },
  {
    "text": "and we are looking for contributions here so there are several tools that we still don't have to",
    "start": "2121920",
    "end": "2128480"
  },
  {
    "text": "support them and we are looking for contribution here so build tools such as mechanical or the",
    "start": "2128480",
    "end": "2134720"
  },
  {
    "text": "docker cli and registry such as qui this is an area which we still don't have",
    "start": "2134720",
    "end": "2141520"
  },
  {
    "text": "integration support with today",
    "start": "2141520",
    "end": "2145839"
  },
  {
    "start": "2146000",
    "end": "2652000"
  },
  {
    "text": "uh so with that uh that is all that i have for today for encrypted container images um thank you",
    "start": "2146880",
    "end": "2153760"
  },
  {
    "text": "very much um for having me here i hope you find this interesting",
    "start": "2153760",
    "end": "2159040"
  },
  {
    "text": "if you'd like security topics like these i also recommend dropping by the cncf6",
    "start": "2159040",
    "end": "2165440"
  },
  {
    "text": "security we do have community where we talk about security",
    "start": "2165440",
    "end": "2170560"
  },
  {
    "text": "of on cloud native systems and if you want to get involved please share",
    "start": "2170560",
    "end": "2176880"
  },
  {
    "text": "bye all right thank you thanks brandon",
    "start": "2176880",
    "end": "2182079"
  },
  {
    "text": "for a great presentation uh now we've got some time for q a so drop any questions you have in",
    "start": "2182079",
    "end": "2189040"
  },
  {
    "text": "the q a tab down at the bottom of your screen",
    "start": "2189040",
    "end": "2193920"
  },
  {
    "text": "okay so i i just i see one question by jin um so",
    "start": "2194320",
    "end": "2201440"
  },
  {
    "text": "can private key the the question is in a kubernetes scenario can the private key be used",
    "start": "2201440",
    "end": "2206800"
  },
  {
    "text": "in a kubernetes secret uh the answer is yes um so currently we are writing an",
    "start": "2206800",
    "end": "2214320"
  },
  {
    "text": "operator that will do this the idea is that you would drop p or q in a kubernetes secret",
    "start": "2214320",
    "end": "2220320"
  },
  {
    "text": "and there will be a daemon set that syncs up this secret with those on on the nodes themselves",
    "start": "2220320",
    "end": "2227440"
  },
  {
    "text": "um we also so that's kind of the way that we're doing it today um we also had a kp",
    "start": "2227440",
    "end": "2234640"
  },
  {
    "text": "kep open that talked about being able to link particular encryption keys to user",
    "start": "2234640",
    "end": "2241440"
  },
  {
    "text": "accounts however it seems like there really wasn't a big need for this requirement so for",
    "start": "2241440",
    "end": "2248160"
  },
  {
    "text": "now we are still doing note level note level keys and then we would use the operator to sync up these keys with",
    "start": "2248160",
    "end": "2254560"
  },
  {
    "text": "the 15 note",
    "start": "2254560",
    "end": "2257838"
  },
  {
    "text": "um question do any clock kubernetes aks eks about this",
    "start": "2261440",
    "end": "2268839"
  },
  {
    "text": "um to my knowledge um no so this was a a feature that was",
    "start": "2268839",
    "end": "2274640"
  },
  {
    "text": "fairly recently introduced so um the only offering that i know today that",
    "start": "2274640",
    "end": "2280960"
  },
  {
    "text": "has is kind of inbuilt and it's not even you know published um or documented very well it's it's",
    "start": "2280960",
    "end": "2287280"
  },
  {
    "text": "actually openshift so cryo um 117 and above so any",
    "start": "2287280",
    "end": "2292480"
  },
  {
    "text": "kubernetes cluster that's using cryo wants everything and will for have this that there's continuously support today",
    "start": "2292480",
    "end": "2299520"
  },
  {
    "text": "um so anything that's using the new version of container d which i believe is",
    "start": "2299520",
    "end": "2305200"
  },
  {
    "text": "um 114 the 114 beta will also support this but require",
    "start": "2305200",
    "end": "2310720"
  },
  {
    "text": "configuration in the kubernetes cluster",
    "start": "2310720",
    "end": "2314960"
  },
  {
    "text": "okay um how do i okay so",
    "start": "2319200",
    "end": "2324160"
  },
  {
    "text": "any approaches to encrypting values of kubernetes secrets um so",
    "start": "2324960",
    "end": "2332240"
  },
  {
    "text": "i think that so i answered this question in kind of um two aspects one of it is",
    "start": "2333119",
    "end": "2340480"
  },
  {
    "text": "um specific to encrypted container images where we say",
    "start": "2340480",
    "end": "2345680"
  },
  {
    "text": "okay how do we ensure that we protect the keys well and then another aspect of it",
    "start": "2345680",
    "end": "2352000"
  },
  {
    "text": "is you know um secrets more in general like you're talking about",
    "start": "2352000",
    "end": "2357760"
  },
  {
    "text": "so um in terms of secrets i think the the",
    "start": "2357760",
    "end": "2365040"
  },
  {
    "text": "posture at least that we are looking at um with regards to this especially in",
    "start": "2365040",
    "end": "2371359"
  },
  {
    "text": "highly regulated industries is that um today you can use the kms",
    "start": "2371359",
    "end": "2377359"
  },
  {
    "text": "plugin to kind of encrypt the secrets as they are stored within atd but there's still",
    "start": "2377359",
    "end": "2384800"
  },
  {
    "text": "on the issue where you know the cluster administrator may have access to these secrets",
    "start": "2384800",
    "end": "2390240"
  },
  {
    "text": "so there are other mechanisms that you know we're looking at in which we can ensure the delivery of",
    "start": "2390240",
    "end": "2395520"
  },
  {
    "text": "the secrets where it's not necessarily tied to um you know so to ensure that the",
    "start": "2395520",
    "end": "2400720"
  },
  {
    "text": "operator will not be able to access these secrets um the way we're approaching it with",
    "start": "2400720",
    "end": "2407359"
  },
  {
    "text": "keys is that we kind of almost want to do this out of band of the kubernetes operator",
    "start": "2407359",
    "end": "2413440"
  },
  {
    "text": "the idea is that um we want to go up to the node level",
    "start": "2413440",
    "end": "2419839"
  },
  {
    "text": "and say that okay i want to be able to test the node to say that this is a particular data center",
    "start": "2419839",
    "end": "2425760"
  },
  {
    "text": "and the key management system should be then able to deliver the key to the node and",
    "start": "2425760",
    "end": "2432319"
  },
  {
    "text": "to say that okay you are from a eu cluster you're from a us cluster this is the key that's um",
    "start": "2432319",
    "end": "2438480"
  },
  {
    "text": "that you should have access to um so just in terms of today for kubernetes",
    "start": "2438480",
    "end": "2445040"
  },
  {
    "text": "secrets i think kms plugins are a good way to go um but then if the concern",
    "start": "2445040",
    "end": "2451440"
  },
  {
    "text": "of you know an operator potentially having access to the secret or the breach of the master is something",
    "start": "2451440",
    "end": "2457760"
  },
  {
    "text": "that's in your thread model then there can be other ways in which you can",
    "start": "2457760",
    "end": "2465119"
  },
  {
    "text": "obtain the secrets you know to fall out of ban outside the kubernetes cluster",
    "start": "2465119",
    "end": "2471119"
  },
  {
    "text": "[Music] so can estimate when encrypted",
    "start": "2473700",
    "end": "2479920"
  },
  {
    "text": "containers could be supported with docker runtime so um the quick answer is that it should",
    "start": "2479920",
    "end": "2486800"
  },
  {
    "text": "be soon because um the docker runtime uses container d and container d does have support for it",
    "start": "2486800",
    "end": "2494560"
  },
  {
    "text": "but i have not seen",
    "start": "2494560",
    "end": "2501280"
  },
  {
    "text": "what the latest of this is but i believe it should be soon just because container d is you know",
    "start": "2502560",
    "end": "2508880"
  },
  {
    "text": "what's running under underlying the docker runtime um so the in terms of standardization",
    "start": "2508880",
    "end": "2515599"
  },
  {
    "text": "we've been working on oci so um i maybe i can post a couple links in the chat later",
    "start": "2515599",
    "end": "2523119"
  },
  {
    "text": "but we are working on oci standardization and this interaction today is with the runtimes there's also a kep",
    "start": "2523119",
    "end": "2531440"
  },
  {
    "text": "that we have that i talked about earlier where we're talking about um service account specific um",
    "start": "2531440",
    "end": "2539200"
  },
  {
    "text": "keys but it seems like um i will also link that kep in the chat as",
    "start": "2539200",
    "end": "2545119"
  },
  {
    "text": "well um there is some work that's being discussed here but it seems like",
    "start": "2545119",
    "end": "2550480"
  },
  {
    "text": "as of now you can you still use it without really involving kubernetes at all at all",
    "start": "2550480",
    "end": "2556400"
  },
  {
    "text": "just by ensuring that the runtimes have access to the keys",
    "start": "2556400",
    "end": "2563440"
  },
  {
    "text": "um and from john are you looking to connect this to",
    "start": "2563440",
    "end": "2568560"
  },
  {
    "text": "github's model and our vietnamese seo secret um yes this is something that we definitely",
    "start": "2568560",
    "end": "2575200"
  },
  {
    "text": "want to do we have we've actually shown um doing this in a pipeline so we've done this detect",
    "start": "2575200",
    "end": "2582319"
  },
  {
    "text": "on and stuff like that and we we really um we really like the idea of",
    "start": "2582319",
    "end": "2587599"
  },
  {
    "text": "that and we're trying to push for that um you know we've done this in builder",
    "start": "2587599",
    "end": "2592880"
  },
  {
    "text": "i know a good majority of users also use chemical in those pipelines so that's why we're also looking for you",
    "start": "2592880",
    "end": "2599119"
  },
  {
    "text": "know contributors in this case to help add to more the git ops type 2 chain",
    "start": "2599119",
    "end": "2605359"
  },
  {
    "text": "so that we can get this in um bitnami sealed secrets yeah so so we we",
    "start": "2605359",
    "end": "2613040"
  },
  {
    "text": "do we are looking at something similar to that we have kind of a solution that we call",
    "start": "2613040",
    "end": "2619920"
  },
  {
    "text": "trusted service identity which links are really default um but the the concept is the same",
    "start": "2619920",
    "end": "2625680"
  },
  {
    "text": "and so so yeah i am in full agreement that you know that's a model that we'll go for",
    "start": "2625680",
    "end": "2630800"
  },
  {
    "text": "we want to make basically every container that's being created be encrypted",
    "start": "2630800",
    "end": "2636160"
  },
  {
    "text": "so that you know we don't have to trust the registry as much or you know if the registry is compromised",
    "start": "2636160",
    "end": "2641520"
  },
  {
    "text": "we are fine with that",
    "start": "2641520",
    "end": "2649839"
  },
  {
    "start": "2652000",
    "end": "2697000"
  },
  {
    "text": "okay i think that was that all the questions",
    "start": "2655839",
    "end": "2663839"
  },
  {
    "text": "okay great well thanks brandon for a great presentation um thanks everybody for joining us the",
    "start": "2666400",
    "end": "2673839"
  },
  {
    "text": "webinar recording and slides will be up later today and we look forward to seeing everybody",
    "start": "2673839",
    "end": "2679520"
  },
  {
    "text": "at another cncf webinar thanks have a great day all right thank you",
    "start": "2679520",
    "end": "2685359"
  },
  {
    "text": "i'll try and post the slides as well um somewhere and let me do this opinion on that to make",
    "start": "2685359",
    "end": "2692480"
  },
  {
    "text": "it available okay great all right thank you bye",
    "start": "2692480",
    "end": "2699839"
  }
]