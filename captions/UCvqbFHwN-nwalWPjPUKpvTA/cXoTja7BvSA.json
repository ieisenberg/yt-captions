[
  {
    "start": "0",
    "end": "420000"
  },
  {
    "text": "so welcome to the talk about Jager introduction to Jager",
    "start": "319",
    "end": "5759"
  },
  {
    "text": "so as an agenda we will be will give a",
    "start": "5759",
    "end": "11969"
  },
  {
    "text": "brief introduction to people what what tracing is and why we use it that we",
    "start": "11969",
    "end": "19410"
  },
  {
    "text": "will how many people do really want to see live GMO versus screen shots all",
    "start": "19410",
    "end": "26550"
  },
  {
    "text": "right I mean I'll try to rise on the fly there's the docker compose file so it's",
    "start": "26550",
    "end": "31800"
  },
  {
    "text": "not that hard to run but I'll still probably go to the screen shots because it's it's kind of an outdated and we'll",
    "start": "31800",
    "end": "42000"
  },
  {
    "text": "talk about project status over all the sins you have project the a great graduated project since October and",
    "start": "42000",
    "end": "47489"
  },
  {
    "text": "we'll talk about roadmap so so hi I'm",
    "start": "47489",
    "end": "56309"
  },
  {
    "text": "Paula love I am a social engineer at Red Hat I'm working on the Ziggler open tracing and open telemetry and a little",
    "start": "56309",
    "end": "63780"
  },
  {
    "text": "bit on tracing in service matching clearly project I'm use chrome from uber",
    "start": "63780",
    "end": "69689"
  },
  {
    "text": "I also maintain eager and Emma tree and",
    "start": "69689",
    "end": "75390"
  },
  {
    "text": "you can see I also published a book earlier this year on tracings first",
    "start": "75390",
    "end": "82340"
  },
  {
    "text": "point of right so but other than that",
    "start": "82640",
    "end": "88560"
  },
  {
    "text": "yeah you can you can check it out",
    "start": "88560",
    "end": "91850"
  },
  {
    "text": "I'll take that try that one how's that better yep yeah cool",
    "start": "109649",
    "end": "115729"
  },
  {
    "text": "all right so yeah if you want interested in the book check it out it has a lot of",
    "start": "115729",
    "end": "121130"
  },
  {
    "text": "basically basics about what tracing is how to use it how to deploy it which is actually the hard part usually would do",
    "start": "121130",
    "end": "126840"
  },
  {
    "text": "the tracing so let's start quickly with what tracing is and why basically the",
    "start": "126840",
    "end": "133920"
  },
  {
    "text": "need for tracing appeared in industry when systems became like very complex so",
    "start": "133920",
    "end": "141150"
  },
  {
    "text": "we started building distributed systems which were not only kind of scaled wide by replicating the same service many",
    "start": "141150",
    "end": "147989"
  },
  {
    "text": "times but they also started scaling deep where you have multiple layers of services of micro service in the",
    "start": "147989",
    "end": "153090"
  },
  {
    "text": "architecture and it becomes really really challenging to actually figure out what's going on and all circuit",
    "start": "153090",
    "end": "159060"
  },
  {
    "text": "textures so here we can see a screenshot from uber this is like done by jäger the",
    "start": "159060",
    "end": "164459"
  },
  {
    "text": "data collected and visualized by jäger so it's a service graph nodes represent services lines represents connections",
    "start": "164459",
    "end": "171390"
  },
  {
    "text": "like in RPC calls between services and a transaction which comes from mobile app",
    "start": "171390",
    "end": "177420"
  },
  {
    "text": "to the backend might look like this it can touch like several dozens micro services hundreds of nodes potentially",
    "start": "177420",
    "end": "182850"
  },
  {
    "text": "include hundreds of RPC calls right and so if you if you are on call for",
    "start": "182850",
    "end": "189600"
  },
  {
    "text": "particular service and you have an SLA of let's say your latency or your error rate is supposed to be within certain",
    "start": "189600",
    "end": "195209"
  },
  {
    "text": "limits and suddenly boom you get an alert USL is broken what did you well ok",
    "start": "195209",
    "end": "201030"
  },
  {
    "text": "great you have a service but your service in the deep micro services architecture probably depends on whole bunch of other services right and so any",
    "start": "201030",
    "end": "208470"
  },
  {
    "text": "of them can be responsible for ultimately for the error but but you're the one on the hook food cause your service is still broken that's SLA right",
    "start": "208470",
    "end": "214859"
  },
  {
    "text": "so you need to do something to fix it even though you may not have a control to actually fix it so don't the thing you can do is at least I'll isolate the",
    "start": "214859",
    "end": "221819"
  },
  {
    "text": "problem and say ok well I need to page that guy to wake up and like fix whatever or maybe you can route around",
    "start": "221819",
    "end": "227850"
  },
  {
    "text": "the problem somehow and so distributed tracing helps you with that basically it unlike other monitoring tools",
    "start": "227850",
    "end": "237019"
  },
  {
    "text": "distributed tracing allows you to to figure out what what's going on this complex architecture right and you might ask why",
    "start": "237590",
    "end": "245400"
  },
  {
    "text": "I like what about other monitoring tools like metrics and logs and so the difference between tracing and and the",
    "start": "245400",
    "end": "251909"
  },
  {
    "text": "monitoring tool specifically is that monitoring are the things that you know up front you want to measure like the US LA for example you say I want to measure",
    "start": "251909",
    "end": "258660"
  },
  {
    "text": "all the error requests and say that I it should not have more than one person to request failing right so that's the",
    "start": "258660",
    "end": "264510"
  },
  {
    "text": "thing you know up front you measured you set up an alert and that great metrics are perfect for that but once that alert",
    "start": "264510",
    "end": "270510"
  },
  {
    "text": "fires then what can you use can you continue using metrics to actually troubleshoot that problem and the answer",
    "start": "270510",
    "end": "276090"
  },
  {
    "text": "is usually no because well it might but it's very hard because metrics are focused on an individual node so if in",
    "start": "276090",
    "end": "283650"
  },
  {
    "text": "that picture if you're at the top of the pyramid and then all this downstream services are below you you can't have to go through every service and look at its",
    "start": "283650",
    "end": "290130"
  },
  {
    "text": "metrics you probably don't own that service you probably don't even know where the dashboards are for that service but if you know you may not",
    "start": "290130",
    "end": "295710"
  },
  {
    "text": "understand those servers because again it's you don't own it so doing it by metrics is kind of very hard and plus",
    "start": "295710",
    "end": "301710"
  },
  {
    "text": "it's actually N squared problem because do the pyramid right the height is the surface of that pyramid is proportional",
    "start": "301710",
    "end": "308130"
  },
  {
    "text": "to the square of the depth and so the deeper the architect is the more stuff you have to look through to understand",
    "start": "308130",
    "end": "313380"
  },
  {
    "text": "where the problem is and similar thing with logs logs is what you typically use to troubleshoot problems right you don't",
    "start": "313380",
    "end": "319260"
  },
  {
    "text": "use blocks for monitoring you go you might again but like usually you go you go to look at them when something goes",
    "start": "319260",
    "end": "324870"
  },
  {
    "text": "wrong but you have the similar problem you have this like n square number of potential points where you have to go",
    "start": "324870",
    "end": "330539"
  },
  {
    "text": "and look for for for the error for the explanation and so but traces provides the",
    "start": "330539",
    "end": "336030"
  },
  {
    "text": "correlation across all those services and it actually allows you to narrow down the problem much faster traces you",
    "start": "336030",
    "end": "342389"
  },
  {
    "text": "can think of em as like as a stack trace for a distributed system and so how",
    "start": "342389",
    "end": "349590"
  },
  {
    "text": "tracing works the idea is actually very simple you probably may already be doing",
    "start": "349590",
    "end": "355139"
  },
  {
    "text": "that in your applications anyway so when the request comes to like a front end service we assigned two unique ID and we",
    "start": "355139",
    "end": "361860"
  },
  {
    "text": "make sure that that ID is propagated to all the execution of the request through the call graph right deceptively simple",
    "start": "361860",
    "end": "369080"
  },
  {
    "text": "somewhat hard to implement in some cases but as we do that",
    "start": "369080",
    "end": "374160"
  },
  {
    "text": "allows us to do is if we also in addition to propagate in the IDE will collect some telemetry and sort of send",
    "start": "374160",
    "end": "379800"
  },
  {
    "text": "it out out of the process to the central back end like Jaeger then you can reconstruct the execution of the trace",
    "start": "379800",
    "end": "386370"
  },
  {
    "text": "later on into a graph or a Gantt chart or a time sequence diagram and basically",
    "start": "386370",
    "end": "392010"
  },
  {
    "text": "you can reason about which services were executing the request for any errors in them and so on and so on",
    "start": "392010",
    "end": "398280"
  },
  {
    "text": "so yeah that's sort of again the idea of tracing is kind of very simple it's not new it's been around for like 15 20",
    "start": "398280",
    "end": "405150"
  },
  {
    "text": "years maybe there's a lot of academic papers written about 15 years ago but it's just getting now into the",
    "start": "405150",
    "end": "411990"
  },
  {
    "text": "mainstream because more and more organizations are switching to micro services and Microsoft's are very deep",
    "start": "411990",
    "end": "417180"
  },
  {
    "text": "systems where you experience these problems that you we didn't have before so is so many people raised hands for",
    "start": "417180",
    "end": "424170"
  },
  {
    "start": "420000",
    "end": "700000"
  },
  {
    "text": "live demo I'll try to do that now close",
    "start": "424170",
    "end": "430770"
  },
  {
    "text": "some secret over stuff first so I",
    "start": "430770",
    "end": "436350"
  },
  {
    "text": "already have it running but I already started out this docker compose smart",
    "start": "436350",
    "end": "442470"
  },
  {
    "text": "enough not to fix the typos",
    "start": "442470",
    "end": "447320"
  },
  {
    "text": "so this is a you can go to yoga repository example slash hot rod it has",
    "start": "454440",
    "end": "460250"
  },
  {
    "text": "basically this docker compose file so you can run it very easily yourself it's also this URL",
    "start": "460250",
    "end": "466290"
  },
  {
    "text": "b-joo Yeager - hot rod is a blog post with a walkthrough that sort of demo in",
    "start": "466290",
    "end": "472350"
  },
  {
    "text": "a lot more details if you want to try it out so while this is starting you can see here the there is two services that I'm",
    "start": "472350",
    "end": "478949"
  },
  {
    "text": "starting one is the actual Jaeger back-end we have a component in the egg recalled all in one which kind of in the",
    "start": "478949",
    "end": "484560"
  },
  {
    "text": "single container encompasses all of the Jaeger components all at once right so you I like collector storage in memory",
    "start": "484560",
    "end": "491250"
  },
  {
    "text": "storage so it's very easy to run and then hot rod is the reactor of the application which is instrumented for",
    "start": "491250",
    "end": "497400"
  },
  {
    "text": "tracing that I'll be ominous so it has a URL here somewhere this one so I can",
    "start": "497400",
    "end": "503340"
  },
  {
    "text": "open that so here's the application Oh make it bigger it's it's sort of a mock",
    "start": "503340",
    "end": "510150"
  },
  {
    "text": "right sharing application where you have several customers you press the button and the car comes to that address right",
    "start": "510150",
    "end": "516870"
  },
  {
    "text": "so I can do this let's say request and we can see okay well there is a key",
    "start": "516870",
    "end": "523529"
  },
  {
    "text": "number something see that's a new york-style license number for commercial drivers so that's what usually looks",
    "start": "523529",
    "end": "529500"
  },
  {
    "text": "like in uber so it's arriving in two minutes you get an ETA you get some additional trouble",
    "start": "529500",
    "end": "535529"
  },
  {
    "text": "like information specifically like latency and some request ID which we might get into in a moment and so again",
    "start": "535529",
    "end": "544790"
  },
  {
    "text": "we don't know what the application is behind the scene so let's look at that",
    "start": "544790",
    "end": "551000"
  },
  {
    "text": "so here's the homepage for Jaeger and first thing I want to go to is the",
    "start": "551000",
    "end": "556770"
  },
  {
    "text": "dependency diagram and switch to this view so I executed a single request against the application right Jaeger",
    "start": "556770",
    "end": "563520"
  },
  {
    "text": "automatically built a service graph by observing what happened with an application how the services are",
    "start": "563520",
    "end": "568860"
  },
  {
    "text": "connected and so in it has this picture basically tells us that there are four",
    "start": "568860",
    "end": "574950"
  },
  {
    "text": "micro services and two storage components in that one single micro services application right of course",
    "start": "574950",
    "end": "580470"
  },
  {
    "text": "they're all simulated and there is like single binary in practice but they actually that binary talks to itself",
    "start": "580470",
    "end": "585810"
  },
  {
    "text": "three different sequels and different protocols so yeah we could we can easily see the",
    "start": "585810",
    "end": "591640"
  },
  {
    "text": "architecture one nice thing about tracing in general is that you can say well you could have drawn the circle each action posted it on my own your",
    "start": "591640",
    "end": "598240"
  },
  {
    "text": "like office world right but you know two weeks later someone comes in and they don't know that they may see it on the",
    "start": "598240",
    "end": "604300"
  },
  {
    "text": "wall but then someone else goes and says okay I'm gonna add another service and what happens to your poster on the wall",
    "start": "604300",
    "end": "609520"
  },
  {
    "text": "you you spent like two hundred bucks printing it at Kinkos in the sky still exists but also like the the",
    "start": "609520",
    "end": "617740"
  },
  {
    "text": "documentation for architecture is always out of date right whereas microservice is like you do releases like hundred",
    "start": "617740",
    "end": "624070"
  },
  {
    "text": "times a day in a large organization so everything is changing and even if you not necessarily create a new service new",
    "start": "624070",
    "end": "629710"
  },
  {
    "text": "service every day you potentially creating new connections between services because you started to call on some other endpoint and another series",
    "start": "629710",
    "end": "635770"
  },
  {
    "text": "an extra dependency exit dependency means back to that pyramid idea more",
    "start": "635770",
    "end": "641650"
  },
  {
    "text": "stuff that can go wrong and in your application and your service right and so tracing keeps that up to date so it",
    "start": "641650",
    "end": "648010"
  },
  {
    "text": "because it just observes what actually happens in production that knows of all the dependencies and you can always go back and say yes that's the actual",
    "start": "648010",
    "end": "654310"
  },
  {
    "text": "picture of my architecture all right so that's a very useful thing but now let's",
    "start": "654310",
    "end": "659590"
  },
  {
    "text": "look at the actual trace right so notice how Yaeger automatically recognized all the services and show them here that",
    "start": "659590",
    "end": "668110"
  },
  {
    "text": "we're involved in SOP it also like it traces itself so you have Yaeger query as a service as well showing up here but",
    "start": "668110",
    "end": "674230"
  },
  {
    "text": "whatever we're gonna skip that so front end I'll pick front end because that's the top service where the requests come",
    "start": "674230",
    "end": "680740"
  },
  {
    "text": "in and I search for traces and I get this one trace slash dispatch and we can",
    "start": "680740",
    "end": "686290"
  },
  {
    "text": "see the latency is 730 milliseconds which was what did they say 37 right the",
    "start": "686290",
    "end": "691570"
  },
  {
    "text": "difference is the networking so this is measured from the front and this is measured from the back end only so it's",
    "start": "691570",
    "end": "698140"
  },
  {
    "text": "shorter a bit and then if we go to the trace we see that picture which I'll also show in the slide later just to oh",
    "start": "698140",
    "end": "705760"
  },
  {
    "text": "maybe I'll skip the slide since I'm vanadium anyway so very classic view of",
    "start": "705760",
    "end": "712140"
  },
  {
    "text": "distributed tracing it's a Gantt chart so what do we get here so on the Left we",
    "start": "712140",
    "end": "717220"
  },
  {
    "text": "see the hierarchy of calls that the services that were involved in executing the single request and in",
    "start": "717220",
    "end": "723410"
  },
  {
    "text": "which all the writers like a parent-child relationships between the MOOC hierarchy then horizontally there's",
    "start": "723410",
    "end": "729709"
  },
  {
    "text": "a time line and every service executed a certain operation that may have been waiting for something else but that",
    "start": "729709",
    "end": "735139"
  },
  {
    "text": "operation is called a span and it's represented with a block which is proportionate to the duration of the",
    "start": "735139",
    "end": "741230"
  },
  {
    "text": "operation and then at the top we see here this thing that I'll just hide this",
    "start": "741230",
    "end": "746869"
  },
  {
    "text": "one right shows up at the mini-map it's the same view of the Gantt chart but collapsed so that if you can chart",
    "start": "746869",
    "end": "752329"
  },
  {
    "text": "itself I don't know 100 lines of 100 pages long but answer didn't large trace the mini-map will still show everything",
    "start": "752329",
    "end": "758360"
  },
  {
    "text": "that you can kind of easy to navigate if you want to through that and finally the the Gantt chart itself like why what's",
    "start": "758360",
    "end": "764779"
  },
  {
    "text": "what's useful about it right so certain things are kind of made jump out so you",
    "start": "764779",
    "end": "770239"
  },
  {
    "text": "can see that there are a few operations that are marked with the explanation point so those tell us that there's an",
    "start": "770239",
    "end": "776480"
  },
  {
    "text": "error in that operation right Jagr is actually smart enough that if I collapse",
    "start": "776480",
    "end": "781939"
  },
  {
    "text": "this whole operation so everything that was driver was doing then you noticed that it also got this exclamation point",
    "start": "781939",
    "end": "788149"
  },
  {
    "text": "it's kind of bubbled up because there were errors so if we don't see them we want to see that on the parents bun and",
    "start": "788149",
    "end": "793519"
  },
  {
    "text": "I can like if I collapse everything it will also bubble up to the top thing right maybe if it's too small I can",
    "start": "793519",
    "end": "799069"
  },
  {
    "text": "actually make it bigger it should still work right so great now there is no",
    "start": "799069",
    "end": "804319"
  },
  {
    "text": "exclamation because would you see that so what what else can a trace tell us well so we can we can trace down the",
    "start": "804319",
    "end": "812419"
  },
  {
    "text": "problems like specific like execution errors already another thing we can immediately tell us like if we",
    "start": "812419",
    "end": "818029"
  },
  {
    "text": "investigate in latency maybe our SLA for latency is broken then we wanna see",
    "start": "818029",
    "end": "823429"
  },
  {
    "text": "bottlenecks hotspots in the requests and clearly there is this thing called MySQL select which takes likes time of 40",
    "start": "823429",
    "end": "830089"
  },
  {
    "text": "percent of the time so if we were to optimize that we would probably look at that as the first thing because it's the",
    "start": "830089",
    "end": "835879"
  },
  {
    "text": "largest thing on a critical path clearly here and one of the sort of a hidden",
    "start": "835879",
    "end": "841759"
  },
  {
    "text": "power of traces so when we look at this like a high-level view of what execution",
    "start": "841759",
    "end": "847369"
  },
  {
    "text": "of the request look like we're getting a macro picture right there's not a lot of information here just like which service",
    "start": "847369",
    "end": "852379"
  },
  {
    "text": "code which service and how long it took but what happens if I click on this one and sudden I get this whole other set of",
    "start": "852379",
    "end": "859160"
  },
  {
    "text": "details about this single operation right I can see let's say I can expand the",
    "start": "859160",
    "end": "864769"
  },
  {
    "text": "tags I can see a whole SQL query that was executed within that database call I also see like a process information like",
    "start": "864769",
    "end": "872779"
  },
  {
    "text": "hostname which Costas was running and things like that right you can you can enrich this with your instrumentation in",
    "start": "872779",
    "end": "879290"
  },
  {
    "text": "any way you want like port region zone whatever so like not only you know",
    "start": "879290",
    "end": "884360"
  },
  {
    "text": "logically which service executed this request but like which specific services or instance of that service so and that",
    "start": "884360",
    "end": "892100"
  },
  {
    "text": "in that way trace and provides a mic review as well of your like individual operations and a macro view of the whole",
    "start": "892100",
    "end": "897110"
  },
  {
    "text": "transaction across the architecture there are the things that you can see this tick marks on the span let me see",
    "start": "897110",
    "end": "904850"
  },
  {
    "text": "what they are so there are so called logs so looks interesting actually we",
    "start": "904850",
    "end": "911809"
  },
  {
    "text": "see a lot of them on the top level a request so I can look at that so we see 18 locks here and if we look at this it",
    "start": "911809",
    "end": "920059"
  },
  {
    "text": "actually looks like almost like a regular logging right and it is it is a",
    "start": "920059",
    "end": "925220"
  },
  {
    "text": "regular login if you look at the source code of application what it does is actually just called logger towards",
    "start": "925220",
    "end": "930259"
  },
  {
    "text": "something but it does it in a way that it information is not only written to the standardout and by the way if I",
    "start": "930259",
    "end": "936050"
  },
  {
    "text": "switch to this one these are all this the same logs in the standardout you can see but it also writes them to the span",
    "start": "936050",
    "end": "942379"
  },
  {
    "text": "in in a trace and which one is better well this was kind of like readable as",
    "start": "942379",
    "end": "948620"
  },
  {
    "text": "well in a log but this is a single request I executed what if I was doing like hundreds of them per second right",
    "start": "948620",
    "end": "954050"
  },
  {
    "text": "how would you look at them in a typical log stream you would need to correlate them somehow you use like I select the",
    "start": "954050",
    "end": "959360"
  },
  {
    "text": "subset of the ones that actually belong to my thread of execution thread and go there's no such thing as execution sir",
    "start": "959360",
    "end": "965209"
  },
  {
    "text": "there's no idea that I can put on a on a thing right but in in a trace you are",
    "start": "965209",
    "end": "971509"
  },
  {
    "text": "guaranteed to get the logs which only correspond to the single request to this specific span right and more than that",
    "start": "971509",
    "end": "977360"
  },
  {
    "text": "they're like I mentioned this there's another span here and and so it also has",
    "start": "977360",
    "end": "982730"
  },
  {
    "text": "the logs right so you can get you get the logs which are very contextual as to the place in the your execution",
    "start": "982730",
    "end": "989119"
  },
  {
    "text": "workflow where they actually happened not just randomly in some like a pile of text that you get with logs so it's all",
    "start": "989119",
    "end": "995749"
  },
  {
    "text": "collapsed into one one tool that where you can easily investigate the problems now going back to latency so okay let's",
    "start": "995749",
    "end": "1001839"
  },
  {
    "text": "say we solve this thing we optimized our SQL query or do something maybe put an index on a table and it's become becomes",
    "start": "1001839",
    "end": "1008980"
  },
  {
    "text": "much faster another potential latency we see here is the separation so it's taken what 200",
    "start": "1008980",
    "end": "1014920"
  },
  {
    "text": "milliseconds by itself but what really happens is that it makes this a whole bunch of coffee ages and all those calls",
    "start": "1014920",
    "end": "1022209"
  },
  {
    "text": "as we can see they're happening one after another right so it's a very clear pattern from the just from visual",
    "start": "1022209",
    "end": "1028808"
  },
  {
    "text": "representation of the trace it's like a staircase pattern right and you can immediately tell that that's probably an issue that it most likely you can",
    "start": "1028809",
    "end": "1035558"
  },
  {
    "text": "optimize this and to design some parallel thing oh maybe you're like in this case those actual actual requests",
    "start": "1035559",
    "end": "1041380"
  },
  {
    "text": "going to the radius so you can do the modern parallel but what I've seen in practice people don't often realize is",
    "start": "1041380",
    "end": "1046750"
  },
  {
    "text": "that when you use the aureum like object relational mapping libraries and you write in a loop it looks like it's very",
    "start": "1046750",
    "end": "1052450"
  },
  {
    "text": "tight but turns out the behind the scenes where I'm actually making the database call for every iteration of your loop right and so instead of doing",
    "start": "1052450",
    "end": "1059080"
  },
  {
    "text": "that you just want a single request and loading in bulk and suddenly people get this like I improved my performance",
    "start": "1059080",
    "end": "1064779"
  },
  {
    "text": "region tracing by like ten acts right so Google published blog post with Griffin and a cortex like they did exactly that",
    "start": "1064779",
    "end": "1071649"
  },
  {
    "text": "it looked like some brilliant like seat of engineering they found this very stupid thing that like very easy to fix",
    "start": "1071649",
    "end": "1078370"
  },
  {
    "text": "but very hard to find but that's the challenge right and that's what trace it helps it fit helps you to find this",
    "start": "1078370",
    "end": "1083860"
  },
  {
    "text": "place as an architecture where there are certain things that you potentially can fix very easily and so yeah I'll skip",
    "start": "1083860",
    "end": "1090279"
  },
  {
    "text": "that that one I mean there is like since I'm here let me just finish this one so",
    "start": "1090279",
    "end": "1095580"
  },
  {
    "text": "this is interesting like if I collapse this thing we can see that there are whole bunch of requests going on right",
    "start": "1095580",
    "end": "1101080"
  },
  {
    "text": "and unlike the previous staircase patterns these are not exactly because they're like there are three requests",
    "start": "1101080",
    "end": "1106659"
  },
  {
    "text": "runyan and parallel right so good news bad news situation kind of like three in parallel but why three in fact if I run",
    "start": "1106659",
    "end": "1114190"
  },
  {
    "text": "the same request many times concurrently from the front end start these three iterations we'll see",
    "start": "1114190",
    "end": "1120510"
  },
  {
    "text": "them drifting apart because what happens in application is actually there is a thread pool limited by size three right",
    "start": "1120510",
    "end": "1127650"
  },
  {
    "text": "and so when you have a single request we get we get the three parallelism but then because this one is doing ten",
    "start": "1127650",
    "end": "1133890"
  },
  {
    "text": "requests so obviously that's not enough so you still have a staircase pattern but just all groups of requests when you",
    "start": "1133890",
    "end": "1141270"
  },
  {
    "text": "have a lot of concurrent requests going through this application then they all kind of start competing for that same thread pool and so again fairly",
    "start": "1141270",
    "end": "1148050"
  },
  {
    "text": "straightforward to see that on the trace I may not be straightforward to fix an application like in this case in the gem",
    "start": "1148050",
    "end": "1153390"
  },
  {
    "text": "application if you go through the blog post there is like a command line parameter you can pass to the application to take care of this and and",
    "start": "1153390",
    "end": "1159330"
  },
  {
    "text": "you can see like how the whole trace shape changes like you can for example reduce the simulated time of the MySQL",
    "start": "1159330",
    "end": "1165450"
  },
  {
    "text": "query and then like make it much smaller you can you can't make this paralyze because that would require actually",
    "start": "1165450",
    "end": "1170700"
  },
  {
    "text": "rewriting the code so but this one you can you can change the parallelism of the thread tool easily so I think that's",
    "start": "1170700",
    "end": "1178140"
  },
  {
    "text": "let me switch to the slides and see if I missed anything so we talked about the",
    "start": "1178140",
    "end": "1184650"
  },
  {
    "text": "service graph right the we talked about the timeline the hierarchy that the the",
    "start": "1184650",
    "end": "1190110"
  },
  {
    "text": "timeline the blocking operations the staircase the so like the nesting of the",
    "start": "1190110",
    "end": "1195600"
  },
  {
    "text": "parent and child spends that kind of represent waiting one on another and we",
    "start": "1195600",
    "end": "1201540"
  },
  {
    "text": "talked about span details drilling into that thing database query some logs so",
    "start": "1201540",
    "end": "1207150"
  },
  {
    "text": "that's a new feature since last year in in iaeger so when you do in performance",
    "start": "1207150",
    "end": "1212910"
  },
  {
    "text": "optimizations specifically think about it like have you ever optimized something like or debug the memory leak",
    "start": "1212910",
    "end": "1217920"
  },
  {
    "text": "how do you do that you typically take a snapshot before take snapshot after and you compare them right and so when you",
    "start": "1217920",
    "end": "1224940"
  },
  {
    "text": "look at the single trace as we did before it as we see it's a lot rich information like in there but if you",
    "start": "1224940",
    "end": "1231960"
  },
  {
    "text": "actually try to troubleshoot the regression the performance it might not always be helpful for example let's say",
    "start": "1231960",
    "end": "1237720"
  },
  {
    "text": "you're you you got an alert that you SLA is broken it's like suddenly from I know",
    "start": "1237720",
    "end": "1242940"
  },
  {
    "text": "700 milliseconds at 1 to 900 you go and you look at the trace at the zero my skill 300 milliseconds or 500 whatever",
    "start": "1242940",
    "end": "1249420"
  },
  {
    "text": "but what if it's always 500 right you can tell from that single trace so you kinda",
    "start": "1249420",
    "end": "1255590"
  },
  {
    "text": "what you want to do is look at the difference what the normal trace looks like and this one looks like and that's",
    "start": "1255590",
    "end": "1261110"
  },
  {
    "text": "what what we built in Jaeger is that you can select two traces you can do it like I think we can do it and now let me see",
    "start": "1261110",
    "end": "1267770"
  },
  {
    "text": "quickly in the UI so go back to this one let me do a few more requests so if I",
    "start": "1267770",
    "end": "1276310"
  },
  {
    "text": "search for them so we're getting a lot of this bit smaller also you can you can",
    "start": "1276310",
    "end": "1282620"
  },
  {
    "text": "just select some of them right and compare and you get this thing like this",
    "start": "1282620",
    "end": "1287690"
  },
  {
    "text": "graph is not as interesting as the slide that's why I'll switch the slide but yeah you can you can do that in the area",
    "start": "1287690",
    "end": "1293000"
  },
  {
    "text": "today if you know which trace is to pick but that's a challenge so this one is probably from uber like",
    "start": "1293000",
    "end": "1301190"
  },
  {
    "text": "from production it's a lot more complex as obviously there's like hundred RPC calls in this one but we what it's it's",
    "start": "1301190",
    "end": "1309140"
  },
  {
    "text": "a jiff it's like a code if right you have red and green minion like red is missing something from the right side",
    "start": "1309140",
    "end": "1315200"
  },
  {
    "text": "green means it's added to the right side and what it's helpful to do is like it's",
    "start": "1315200",
    "end": "1320330"
  },
  {
    "text": "helpful and troubleshooting problems basically you can see that if you try to understand how the behavior of the",
    "start": "1320330",
    "end": "1325640"
  },
  {
    "text": "execution of this tree request is different you can immediately tell well this bottom segment in red was like the",
    "start": "1325640",
    "end": "1332990"
  },
  {
    "text": "whole section was missing from the second trace right and so something went wrong above that probably that caused this not to execute but you can you can",
    "start": "1332990",
    "end": "1340310"
  },
  {
    "text": "just immediately see that and if you didn't have that tool of that kind of tool then potentially it's okay so like",
    "start": "1340310",
    "end": "1347270"
  },
  {
    "text": "it's just the trace with hundred requests in it try to figure out where it's actually something went wrong all",
    "start": "1347270",
    "end": "1353090"
  },
  {
    "text": "right there are some more details here like the light colors mean that spans",
    "start": "1353090",
    "end": "1359750"
  },
  {
    "text": "are present in both traces but in different quantities right so you may have like more spans on one versus less",
    "start": "1359750",
    "end": "1365600"
  },
  {
    "text": "than once it's like the graph one of the other feature of this graph is that it's not it doesn't represent every single",
    "start": "1365600",
    "end": "1371720"
  },
  {
    "text": "span from the trace because that would actually make that graph almost as complex as a Gantt chart",
    "start": "1371720",
    "end": "1376910"
  },
  {
    "text": "itself and for large traces Gantt chart becomes a bit unwieldy to to use this",
    "start": "1376910",
    "end": "1381950"
  },
  {
    "text": "one collapses a whole bunch of things so if you make him like this register all in the previous example like ten times",
    "start": "1381950",
    "end": "1388070"
  },
  {
    "text": "this would be probably just two notes because what's the difference repeating them structurally they're the same and",
    "start": "1388070",
    "end": "1393529"
  },
  {
    "text": "and so but but if the number is different you will see the difference in the light colors so this was like it was",
    "start": "1393529",
    "end": "1403940"
  },
  {
    "text": "indeed the production like from uber ears and there are some some issue with what it says you have an outstanding",
    "start": "1403940",
    "end": "1410059"
  },
  {
    "text": "balance you created card problems so we couldn't charge the credit card we couldn't complete the transaction and",
    "start": "1410059",
    "end": "1415789"
  },
  {
    "text": "that's why this whole section of the overall request failed it like it never got executed basically in a second trace",
    "start": "1415789",
    "end": "1421159"
  },
  {
    "text": "because we failed on a transaction earlier than in in a thing another thing",
    "start": "1421159",
    "end": "1426980"
  },
  {
    "text": "which is kind of the same visualization but different color coding which could be also useful is again when that",
    "start": "1426980",
    "end": "1433399"
  },
  {
    "text": "example was I will I gave with if you investigate in a latency regression and your mysql' span takes like 40% of the",
    "start": "1433399",
    "end": "1442039"
  },
  {
    "text": "time always it's not useful to look at it but in a Jif we can suppress it if we use",
    "start": "1442039",
    "end": "1447169"
  },
  {
    "text": "like a heat map color code and of like which which things contribute the most to the differences in duration right and",
    "start": "1447169",
    "end": "1452809"
  },
  {
    "text": "so when you do that you can immediately see here with what pass the differences",
    "start": "1452809",
    "end": "1457820"
  },
  {
    "text": "are right where words the biggest contribution to the latency between the two spans is between two traces coming",
    "start": "1457820",
    "end": "1464419"
  },
  {
    "text": "from so that's again it's a same same kind of principle but just different color code Union and you can probably",
    "start": "1464419",
    "end": "1471409"
  },
  {
    "text": "come up with other things to do that and there's like because fundamentally behind these traces there fool Yaeger",
    "start": "1471409",
    "end": "1478399"
  },
  {
    "text": "traces so you could also obviously do this like pop-ups on individual nodes",
    "start": "1478399",
    "end": "1483529"
  },
  {
    "text": "and you can also deep link from every node to the trace within the specific place with a trace which is helpful like",
    "start": "1483529",
    "end": "1489110"
  },
  {
    "text": "again if you didn't do the trace of I know mm spans the Gantt chart is very unwieldy it's long it's like wide all",
    "start": "1489110",
    "end": "1496610"
  },
  {
    "text": "the spans are probably tiny because you have like a long time line but all operations are small within that but if",
    "start": "1496610",
    "end": "1501980"
  },
  {
    "text": "you deep link to span you know with the exact place in the architecture you can like zoom in into that and drill down",
    "start": "1501980",
    "end": "1508070"
  },
  {
    "text": "and you can get a lot more into details but after you already like use this you just a late where you want to look for",
    "start": "1508070",
    "end": "1514150"
  },
  {
    "text": "[Music] okay so just in summary of the demo so",
    "start": "1514150",
    "end": "1520460"
  },
  {
    "start": "1515000",
    "end": "1635000"
  },
  {
    "text": "we see that tracing can be used for monitoring distributor transactions in architecture monitoring and",
    "start": "1520460",
    "end": "1525890"
  },
  {
    "text": "troubleshooting but like in general you can do root cause analysis what we've done with like latency with the errors",
    "start": "1525890",
    "end": "1532340"
  },
  {
    "text": "etc looking and in details we can obviously use it to optimize for latency",
    "start": "1532340",
    "end": "1538130"
  },
  {
    "text": "and for performance which is kind of just another side of the coin of overall",
    "start": "1538130",
    "end": "1543470"
  },
  {
    "text": "root cause analysis or like because ultimately performance of an application doesn't mean performance in speed or",
    "start": "1543470",
    "end": "1549260"
  },
  {
    "text": "anything performance mean it could be mean correctness it could be mean availability and it could be mean real raw performance right and finally we can",
    "start": "1549260",
    "end": "1557270"
  },
  {
    "text": "automatically produce service service dependency diagrams with tracing and one",
    "start": "1557270",
    "end": "1562610"
  },
  {
    "text": "thing that I haven't talked about that I will skip that because it's kind of condensed or tangential to the to the",
    "start": "1562610",
    "end": "1568850"
  },
  {
    "text": "stock but Jaeger libraries provide distributed context propagation function which is not only clearing trace ID but",
    "start": "1568850",
    "end": "1574880"
  },
  {
    "text": "you can carry other information so you can like tag your request with a specific product line let's say oh this",
    "start": "1574880",
    "end": "1580850"
  },
  {
    "text": "is like a dream male versus I know Google Docs right so two different business lines and Google they probably",
    "start": "1580850",
    "end": "1587660"
  },
  {
    "text": "at some point all come to the big table and so how do you if you are in a big",
    "start": "1587660",
    "end": "1592730"
  },
  {
    "text": "table owner as a service like how do you basically know which customers are using",
    "start": "1592730",
    "end": "1598610"
  },
  {
    "text": "you what's their capacity plan and how do you basically well how do you tell",
    "start": "1598610",
    "end": "1604070"
  },
  {
    "text": "anything about what the usage patterns our view of your service right because well the product Google like Gmail oil",
    "start": "1604070",
    "end": "1611210"
  },
  {
    "text": "dogs it's like Oh way up front too high from from the deck shared platform here",
    "start": "1611210",
    "end": "1616310"
  },
  {
    "text": "and so by using context propagation you can tag the request and basically get that information all the way down and",
    "start": "1616310",
    "end": "1621890"
  },
  {
    "text": "emit metrics basically tagged with this information as well and I think at this",
    "start": "1621890",
    "end": "1626960"
  },
  {
    "text": "point I'll pass to Pavel to talk about more Jagr project",
    "start": "1626960",
    "end": "1633040"
  },
  {
    "start": "1635000",
    "end": "1681000"
  },
  {
    "text": "so Jaeger is not only distributed tracing tool it's it's a whole platform",
    "start": "1640890",
    "end": "1645910"
  },
  {
    "text": "we have different bits of pieces so starting we have instrumentation",
    "start": "1645910",
    "end": "1650980"
  },
  {
    "text": "libraries which implement open tracing API in different languages then we have the whole trace collection back-end",
    "start": "1650980",
    "end": "1658990"
  },
  {
    "text": "which collects these traces from the clients and then there is also visualization part which visualize the",
    "start": "1658990",
    "end": "1665800"
  },
  {
    "text": "trace in the UI last part is kind of optional data planning data mining",
    "start": "1665800",
    "end": "1671680"
  },
  {
    "text": "platform which gets the traces from the storage there's some analysis",
    "start": "1671680",
    "end": "1676750"
  },
  {
    "text": "aggregation and stored them back to the storage for later presentation Swiger it",
    "start": "1676750",
    "end": "1683080"
  },
  {
    "start": "1681000",
    "end": "1712000"
  },
  {
    "text": "was basically the architecture inspired by google's devvra paper and open Zipkin",
    "start": "1683080",
    "end": "1688500"
  },
  {
    "text": "it was created at weber 2015 and open source in 2017 when it's also joined the",
    "start": "1688500",
    "end": "1696970"
  },
  {
    "text": "cnc FS incubating project I think last month where Jaeger graduated as a",
    "start": "1696970",
    "end": "1703720"
  },
  {
    "text": "top-level cnc of project i would like to thank you to all of the contributors who",
    "start": "1703720",
    "end": "1710140"
  },
  {
    "text": "made this possible so what the architecture this is just high level",
    "start": "1710140",
    "end": "1717460"
  },
  {
    "start": "1712000",
    "end": "1772000"
  },
  {
    "text": "view as you know the back end is more complicated but in this case we see the",
    "start": "1717460",
    "end": "1724180"
  },
  {
    "text": "services and the important part here is that service a is instrumented with open",
    "start": "1724180",
    "end": "1729190"
  },
  {
    "text": "tracing API it's using Jaeger client you know which implements the API and",
    "start": "1729190",
    "end": "1734200"
  },
  {
    "text": "service B is instrumented with open Zipkin or open senses or open telemetry",
    "start": "1734200",
    "end": "1740110"
  },
  {
    "text": "SDKs and both these services the report data to the same back end and back end",
    "start": "1740110",
    "end": "1745360"
  },
  {
    "text": "can you know connect these two to spends together and visualize them as a single",
    "start": "1745360",
    "end": "1750370"
  },
  {
    "text": "trace so in Jaeger you can collect data from different libraries the other",
    "start": "1750370",
    "end": "1755950"
  },
  {
    "text": "interesting part on this slide is that service a and service B they can use",
    "start": "1755950",
    "end": "1761970"
  },
  {
    "text": "even though they are instrumented with different SDKs they can still propagate the trace because",
    "start": "1761970",
    "end": "1767640"
  },
  {
    "text": "the context propagation in Jaeger is pluggable when we zoom in into the",
    "start": "1767640",
    "end": "1774630"
  },
  {
    "start": "1772000",
    "end": "1856000"
  },
  {
    "text": "Jaeger this is basically the architecture on the right side we see the host or container your application",
    "start": "1774630",
    "end": "1782400"
  },
  {
    "text": "instrumented with a Jaeger client you can client sends data to eager agent",
    "start": "1782400",
    "end": "1787830"
  },
  {
    "text": "which runs on the on the host so in kubernetes it can be site container or",
    "start": "1787830",
    "end": "1793440"
  },
  {
    "text": "demon set then the agent since data to the collector which then stores the data",
    "start": "1793440",
    "end": "1798450"
  },
  {
    "text": "to the storage and the query gets it from the storage and visualize them then",
    "start": "1798450",
    "end": "1803640"
  },
  {
    "text": "there is a spark job which you know does the aggregation on the data this is used",
    "start": "1803640",
    "end": "1809640"
  },
  {
    "text": "at the moment for dependency links you know what you saw the first slide from",
    "start": "1809640",
    "end": "1814710"
  },
  {
    "text": "the demo so this used to be the traditional architecture the the simplest thing what you can deploy we",
    "start": "1814710",
    "end": "1821400"
  },
  {
    "text": "kind of improved that by using Kafka so the Agra collector is able to write the",
    "start": "1821400",
    "end": "1827130"
  },
  {
    "text": "traces to Kafka and then there is a new component coral the the in gesture which",
    "start": "1827130",
    "end": "1833580"
  },
  {
    "text": "gets the traces from Kafka and store them into the storage this provides more",
    "start": "1833580",
    "end": "1839750"
  },
  {
    "text": "flexibility and elasticity so instead of only you know getting the traces from",
    "start": "1839750",
    "end": "1845580"
  },
  {
    "text": "the cough considering them to the storage we can also have like a streaming pipeline to to do analytics in",
    "start": "1845580",
    "end": "1852330"
  },
  {
    "text": "a real-time fashion so on the technology",
    "start": "1852330",
    "end": "1858630"
  },
  {
    "start": "1856000",
    "end": "1914000"
  },
  {
    "text": "stack the Jager itself is written in golang there is a pluggable back-end layer as a part of the main project we",
    "start": "1858630",
    "end": "1866520"
  },
  {
    "text": "we bundle implementation for Cassandra elasticsearch pager which is in memory",
    "start": "1866520",
    "end": "1871920"
  },
  {
    "text": "storage something like Prometheus and in memory is used for the most front-end",
    "start": "1871920",
    "end": "1878990"
  },
  {
    "text": "track-based and then the instrumentation libraries for many languages starting go",
    "start": "1878990",
    "end": "1885060"
  },
  {
    "text": "Java by the no J's C++ C sharp I think the PHP and Ruby are",
    "start": "1885060",
    "end": "1891690"
  },
  {
    "text": "community based the then integration",
    "start": "1891690",
    "end": "1897150"
  },
  {
    "text": "with Kafka and Apache fling but also Apache spark and filling this kind of new the new way",
    "start": "1897150",
    "end": "1904770"
  },
  {
    "text": "the streaming works and the spark is used for the old job which gets the data",
    "start": "1904770",
    "end": "1910590"
  },
  {
    "text": "on daily basis for the community at the",
    "start": "1910590",
    "end": "1916860"
  },
  {
    "start": "1914000",
    "end": "1936000"
  },
  {
    "text": "moment I think we have around 9000 stars on the main repository a lot of",
    "start": "1916860",
    "end": "1922080"
  },
  {
    "text": "contributors we have 15 maintained errs across all the repositories we are happy",
    "start": "1922080",
    "end": "1928410"
  },
  {
    "text": "to accept more and we did 15 releases since the first since I start basically",
    "start": "1928410",
    "end": "1936919"
  },
  {
    "start": "1936000",
    "end": "2025000"
  },
  {
    "text": "so what is new in EA grow since the last cube con we implemented the operator for",
    "start": "1936919",
    "end": "1944179"
  },
  {
    "text": "communities this operator is able to not only deploy Jaeger manage it but also",
    "start": "1944179",
    "end": "1951470"
  },
  {
    "text": "create see ours which will be picked up by the storage operators and deployed",
    "start": "1951470",
    "end": "1958080"
  },
  {
    "text": "the storage so if you're using open shift you can just create it once er and",
    "start": "1958080",
    "end": "1963210"
  },
  {
    "text": "the open sheet the operator running an opiate shift will get that CR",
    "start": "1963210",
    "end": "1969750"
  },
  {
    "text": "also create the elastic switch for it so it's very simple to create like productions already Jager deployment",
    "start": "1969750",
    "end": "1977240"
  },
  {
    "text": "then there is a better store storage which is no local story something like",
    "start": "1977240",
    "end": "1983010"
  },
  {
    "text": "Prometheus the single node this is by default used in sto and the storage",
    "start": "1983010",
    "end": "1992040"
  },
  {
    "text": "layer is pluggable it's based on G RPC plugin at the moment there are two implementations ones for couch couch",
    "start": "1992040",
    "end": "1999960"
  },
  {
    "text": "bass and other for influx DB you will talk about the trace comparison this is",
    "start": "1999960",
    "end": "2007429"
  },
  {
    "text": "also view and we made some improvements on the security part so there is TLS for",
    "start": "2007429",
    "end": "2015080"
  },
  {
    "text": "the gr PC communication between agent and the collector and also for the Kafka and elasticsearch so documentation I",
    "start": "2015080",
    "end": "2027520"
  },
  {
    "start": "2025000",
    "end": "2065000"
  },
  {
    "text": "don't have time to go through that but we have quite nice website and all the are there we don't have to go to our",
    "start": "2027520",
    "end": "2034450"
  },
  {
    "text": "github repositories to find out about things again some of the integrations",
    "start": "2034450",
    "end": "2041440"
  },
  {
    "text": "with Jaeger and I would like to also mention the zip incompatibility Jaeger",
    "start": "2041440",
    "end": "2048790"
  },
  {
    "text": "can receive the data from zip key from zipping clients and also can can talk to",
    "start": "2048790",
    "end": "2054610"
  },
  {
    "text": "zip key clients so if your service is instrumented with zip in the other service can be instrumented VD ager and",
    "start": "2054610",
    "end": "2060010"
  },
  {
    "text": "they getting basically they can talk to each other I'll probably skip roadmap",
    "start": "2060010",
    "end": "2067120"
  },
  {
    "start": "2065000",
    "end": "2085000"
  },
  {
    "text": "for the deep dive tomorrow because we are out of time yeah okay so deep dive is tomorrow",
    "start": "2067120",
    "end": "2076179"
  },
  {
    "text": "2:25 you are welcome to join thank you very much [Applause]",
    "start": "2076180",
    "end": "2087449"
  }
]