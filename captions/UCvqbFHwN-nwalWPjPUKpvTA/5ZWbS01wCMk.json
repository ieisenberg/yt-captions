[
  {
    "text": "hey everyone my name is Joe I'm Laura",
    "start": "80",
    "end": "6760"
  },
  {
    "text": "I'm Aishiro Hi I'm Maxim",
    "start": "8240",
    "end": "14400"
  },
  {
    "text": "So we have a little bit of um we're just going to do a little bit of slides toward the beginning Uh talk about",
    "start": "14400",
    "end": "20560"
  },
  {
    "text": "really briefly for anyone that doesn't know what containerd is A little a little intro Um we're going to do a",
    "start": "20560",
    "end": "25760"
  },
  {
    "text": "recap over 2.0 that just came out back in November Uh and then we'll talk about",
    "start": "25760",
    "end": "31279"
  },
  {
    "text": "uh 2.1 that's going to come out Uh some changes to the project including a new release cadence uh some changes to our",
    "start": "31279",
    "end": "37680"
  },
  {
    "text": "LTS model Um some things that we've done around the kept process and uh uh runs",
    "start": "37680",
    "end": "44320"
  },
  {
    "text": "which is a sub project of containerd and then we're going to just do kind of like a panel discussion and talk through a couple things al together",
    "start": "44320",
    "end": "52920"
  },
  {
    "text": "Hiro so introduction to conj but uh I'm sure most of you are already using uh",
    "start": "55640",
    "end": "62680"
  },
  {
    "text": "con because uh if you are using a docker you are already using cond and if you're",
    "start": "62680",
    "end": "69920"
  },
  {
    "text": "using kubernetes it's very likely that you are already using cond because it's",
    "start": "69920",
    "end": "75600"
  },
  {
    "text": "adopted by wellknown enterprise distribution of kubernetes and the uh",
    "start": "75600",
    "end": "83040"
  },
  {
    "text": "manager services of Kubernetes and the ecosystem of",
    "start": "83040",
    "end": "90680"
  },
  {
    "text": "considing So in addition to docker and kubernetes we also have uh command line",
    "start": "90680",
    "end": "97280"
  },
  {
    "text": "clients such as nctl and snapshot of plugins for raz",
    "start": "97280",
    "end": "103840"
  },
  {
    "text": "loading which means running uh container before uh print entire image and we also",
    "start": "103840",
    "end": "112320"
  },
  {
    "text": "have runtimes such as uh web",
    "start": "112320",
    "end": "117520"
  },
  {
    "text": "assemblies and here's introduction to ntl Continuity CDL Uh it's a command",
    "start": "117560",
    "end": "124719"
  },
  {
    "text": "line client for continuity uh with the same UI and user experience as docker CI",
    "start": "124719",
    "end": "132879"
  },
  {
    "text": "It was originally made for facilitating new experiments in the contin platform",
    "start": "132879",
    "end": "139840"
  },
  {
    "text": "uh such as the study the image format for lazy print and faster rooress",
    "start": "139840",
    "end": "148000"
  },
  {
    "text": "containers with uh by net ns and ncttl",
    "start": "148000",
    "end": "154080"
  },
  {
    "text": "is also useful for debugging run this nodes because you can just use the same",
    "start": "154080",
    "end": "159760"
  },
  {
    "text": "command line as the docker command",
    "start": "159760",
    "end": "163599"
  },
  {
    "text": "So uh let's quickly recap what 2.0 is U this is our latest and the greatest",
    "start": "166800",
    "end": "173599"
  },
  {
    "text": "release and it took us a while to craft almost 18 months So we decided to",
    "start": "173599",
    "end": "179440"
  },
  {
    "text": "revisit our release schedule a bit to be more aligned with Kubernetes Um Laura will cover this in a bit So with 2.0 we",
    "start": "179440",
    "end": "187519"
  },
  {
    "text": "had two major goals in mind uh first one we wanted to stabilize lots of experimental API that we introduced in",
    "start": "187519",
    "end": "194599"
  },
  {
    "text": "1.7 and the other one we wanted to address technical depth that we accumulated over time this is our first",
    "start": "194599",
    "end": "201760"
  },
  {
    "text": "major release since uh 1 1.0 so we have a lot of we had a lot of deprecated",
    "start": "201760",
    "end": "207680"
  },
  {
    "text": "features that we carried for backward compatibility reasons and 2.0 to was a",
    "start": "207680",
    "end": "212879"
  },
  {
    "text": "great opportunity for us to cleans this up refactor project structure and build better foundation for future",
    "start": "212879",
    "end": "220599"
  },
  {
    "text": "releases This is non-exhaustive list of thing that we had to remove",
    "start": "220599",
    "end": "226360"
  },
  {
    "text": "and some of these introduce breaking changes though we tried to keep uh the blast radius as as minimal as possible",
    "start": "226360",
    "end": "234480"
  },
  {
    "text": "So if you're using docker schema v1 you should migrate your images to image spec",
    "start": "234480",
    "end": "240000"
  },
  {
    "text": "We removed support of legacy v1 runtimes in container 2.0 in favor of uh",
    "start": "240000",
    "end": "247400"
  },
  {
    "text": "shimb2 A UFS shutter was duplicated since 1.5 So we removed in 2.0 as well",
    "start": "247400",
    "end": "253519"
  },
  {
    "text": "And there is a lot of smaller thing that could potentially affect end",
    "start": "253519",
    "end": "258680"
  },
  {
    "text": "users Um here is also non-complete list of features that we've added in 2.0 So",
    "start": "258680",
    "end": "264560"
  },
  {
    "text": "let's try to quickly recap what are these uh transfer service is now stable",
    "start": "264560",
    "end": "270160"
  },
  {
    "text": "It's a new API that we introduced in 1.7 It transfer transfers artifacts from",
    "start": "270160",
    "end": "275520"
  },
  {
    "text": "source to destination Uh but also it relies on birectional streaming and data",
    "start": "275520",
    "end": "280880"
  },
  {
    "text": "channels as a first class citizens So it offers robust and much nicer API We",
    "start": "280880",
    "end": "287280"
  },
  {
    "text": "currently use it for image pools on containerd client side So we don't really use it in CRI but this is",
    "start": "287280",
    "end": "294800"
  },
  {
    "text": "something we want to add in 2.1 Sendbox API is now stable as well and sandbox",
    "start": "294800",
    "end": "301280"
  },
  {
    "text": "CRI is enabled by default It adds an abstraction layer layer for uh C port",
    "start": "301280",
    "end": "308479"
  },
  {
    "text": "sandboxes to allow more granular control how a group of containers are defined",
    "start": "308479",
    "end": "315440"
  },
  {
    "text": "This API offers you know a much nicer way to support VM style containers In",
    "start": "315440",
    "end": "321919"
  },
  {
    "text": "2.0 we ship a default implementation which implements plus containers under the hood which also serves as an example",
    "start": "321919",
    "end": "329280"
  },
  {
    "text": "of how to implement it And array is another API that we introduced in 1.7 as",
    "start": "329280",
    "end": "334720"
  },
  {
    "text": "experimental and if you're not familiar with it you can think of it as a um",
    "start": "334720",
    "end": "339759"
  },
  {
    "text": "mutating web hook for container configuration on contain site um it is",
    "start": "339759",
    "end": "345440"
  },
  {
    "text": "now enabled in 2.0 by default We also introduce a new extension point called image verifier plugins Uh it's an exec",
    "start": "345440",
    "end": "353120"
  },
  {
    "text": "based plugins will call during image pool and it helps to cover uh various",
    "start": "353120",
    "end": "358479"
  },
  {
    "text": "policy enforcement use cases like pull images only from trusted sources Uh in",
    "start": "358479",
    "end": "365120"
  },
  {
    "text": "2.0 Though it currently integrated with transfer service and so it can be used",
    "start": "365120",
    "end": "370479"
  },
  {
    "text": "for continuity client but we plan to add support in CRI for legacy pool as well",
    "start": "370479",
    "end": "376960"
  },
  {
    "text": "Finally we've added IGZ support when pulling images and if found on your system uh it will greatly improve image",
    "start": "376960",
    "end": "384560"
  },
  {
    "text": "decompression performance when pulling images and a lot more but 2.1 is coming",
    "start": "384560",
    "end": "390639"
  },
  {
    "text": "soon Um hero and uh we are heading to release",
    "start": "390639",
    "end": "396960"
  },
  {
    "text": "version 2.1 next month and one of the new features of version 2.1 is a support",
    "start": "396960",
    "end": "404199"
  },
  {
    "text": "for FS enhanced reloading file system Uh so with this file system uh you need uh",
    "start": "404199",
    "end": "412240"
  },
  {
    "text": "very recent uh Linux version 6.12 uh but it's more optimal for images uh",
    "start": "412240",
    "end": "421599"
  },
  {
    "text": "with uh many layers because uh the legacy overlays is",
    "start": "421599",
    "end": "427680"
  },
  {
    "text": "quite slow when you have many layers and in this race we also support",
    "start": "427680",
    "end": "433919"
  },
  {
    "text": "image volumes uh which means uh mounting image as a human body uh for example",
    "start": "433919",
    "end": "441919"
  },
  {
    "text": "this is used for for distributing AI models as a OCI image so as to split uh",
    "start": "441919",
    "end": "451599"
  },
  {
    "text": "code image for the data image so that you can just swap uh data image for",
    "start": "451599",
    "end": "459280"
  },
  {
    "text": "changing the AI model and in version 2.1 we also support",
    "start": "459280",
    "end": "467840"
  },
  {
    "text": "writing thrush s thrush FS/ Cg groupoup so that uh container cam",
    "start": "467840",
    "end": "475919"
  },
  {
    "text": "uh controls the resources such as CPU and memory by",
    "start": "475919",
    "end": "481319"
  },
  {
    "text": "itself and we also enhance the support for user name space so that the UID",
    "start": "481319",
    "end": "488879"
  },
  {
    "text": "mapping range can be now uh non-ontiguous range for more",
    "start": "488879",
    "end": "496639"
  },
  {
    "text": "flexibility and here is our update In ntl version 2.1 in ntl 2.1 we support uh user ns",
    "start": "497560",
    "end": "507840"
  },
  {
    "text": "remote mode Uh this is similar to rootress mode but uh it's uh different",
    "start": "507840",
    "end": "514080"
  },
  {
    "text": "So root mode means executing everything as a nonroot user Uh this has been",
    "start": "514080",
    "end": "519919"
  },
  {
    "text": "available since bas 0.6 six and user NS wrap mode means",
    "start": "519919",
    "end": "527880"
  },
  {
    "text": "executing containers as a nonroot user but uh contrary itself uh still run at",
    "start": "527880",
    "end": "534880"
  },
  {
    "text": "the root so this must not be as secure as root but it's more faster the root",
    "start": "534880",
    "end": "546800"
  },
  {
    "text": "mode and in version 2.1 uh we also So",
    "start": "547800",
    "end": "553120"
  },
  {
    "text": "have experimental support for gel uh which means uh jail for gore sorry jail",
    "start": "553120",
    "end": "561279"
  },
  {
    "text": "for core modules Uh this means imposing uh Cisco",
    "start": "561279",
    "end": "567760"
  },
  {
    "text": "restrictions on a specific set of go modules uh so as to mitigate uh",
    "start": "567760",
    "end": "575440"
  },
  {
    "text": "potential vulnerabilities and supply attacks you know in the last year uh there was a terrible supply chain attack",
    "start": "575440",
    "end": "582800"
  },
  {
    "text": "in XD uh compression library and the same uh instance may",
    "start": "582800",
    "end": "588720"
  },
  {
    "text": "potentially happen for go modules as well Uh so this uh go to jail uh",
    "start": "588720",
    "end": "596000"
  },
  {
    "text": "districts uh executing uh share commands and reading or writing files or creating",
    "start": "596000",
    "end": "604720"
  },
  {
    "text": "network soits Uh this is not fancy uh because uh this is not applicable to uh",
    "start": "604720",
    "end": "611680"
  },
  {
    "text": "modules that use unsafe pointers or reflections But uh I hope that uh this",
    "start": "611680",
    "end": "618640"
  },
  {
    "text": "commod can uh reduce uh the attack surface in the uh supply chain of go",
    "start": "618640",
    "end": "628959"
  },
  {
    "text": "modules Um in terms of project changes uh we're going to be doing a new release",
    "start": "633079",
    "end": "639279"
  },
  {
    "text": "cadence So um new minor releases every 6 months uh starting with 2.1 in May and",
    "start": "639279",
    "end": "646160"
  },
  {
    "text": "2.2 in November and then hopefully every 6 months from then on um with beta build",
    "start": "646160",
    "end": "653120"
  },
  {
    "text": "starting 8 to 10 weeks before a minor release Uh and feature freeze RC's two",
    "start": "653120",
    "end": "658880"
  },
  {
    "text": "and four weeks um before a minor release which will be around like April and October",
    "start": "658880",
    "end": "665399"
  },
  {
    "text": "Um we're also doing some changes to the LTS mo uh model So we're going to be",
    "start": "665399",
    "end": "671440"
  },
  {
    "text": "having named volunteer maintainers for each LTS branches Um LTS releases are",
    "start": "671440",
    "end": "677040"
  },
  {
    "text": "supported for 2 years but that can be longer depending on at the discretion of the branch owners And so the current",
    "start": "677040",
    "end": "684320"
  },
  {
    "text": "status is 1.7 is now is LTS Uh and EOL is scheduled for March 10th of 2026",
    "start": "684320",
    "end": "692399"
  },
  {
    "text": "um or 1.7 LTS and uh 1.6 end of live is",
    "start": "692399",
    "end": "697440"
  },
  {
    "text": "scheduled for July 23 2025 soon",
    "start": "697440",
    "end": "703839"
  },
  {
    "text": "That's me next",
    "start": "703839",
    "end": "707320"
  },
  {
    "text": "So in terms of uh project changes we we've also um adopted some changes to how we handle incoming caps from the",
    "start": "711680",
    "end": "718320"
  },
  {
    "text": "Kubernetes pro uh Kubernetes project The goal here is to have some increased visibility and communication uh so the",
    "start": "718320",
    "end": "724480"
  },
  {
    "text": "contributors have a better experience uh and so that our partners in Sign Node also have a better experience working",
    "start": "724480",
    "end": "729839"
  },
  {
    "text": "with containerd Um we now have new tracking issues in the containerd repo to capture containerd specific state for",
    "start": "729839",
    "end": "737120"
  },
  {
    "text": "uh contributions and kepts that are that are going on in containerd Um we've also introduced two new roles in the",
    "start": "737120",
    "end": "742800"
  },
  {
    "text": "containerd project to help with this So one is a a kept sheepard which is a containerd maintainer that gets assigned",
    "start": "742800",
    "end": "748720"
  },
  {
    "text": "to a particular ke and is responsible for helping it move through the process and make sure that everything stays on track The second is we uh now have a",
    "start": "748720",
    "end": "755920"
  },
  {
    "text": "sign node liaison role um who's going to help work with sig node inside the kubernetes project to make sure that we",
    "start": "755920",
    "end": "762000"
  },
  {
    "text": "have a clear line of communication across everything that's going on Um this change covers both like caps which",
    "start": "762000",
    "end": "768399"
  },
  {
    "text": "is the main part of it as well as anything else that sig node needs out of containerd project um whether or not",
    "start": "768399",
    "end": "774560"
  },
  {
    "text": "that's that's driven through the kept process Um we've got further documentation about that on the",
    "start": "774560",
    "end": "780000"
  },
  {
    "text": "continity website as to what exactly this is going to mean but our goal here is to make everything go faster and more",
    "start": "780000",
    "end": "789040"
  },
  {
    "text": "smoothly All right So now I'd like to talk about some innovations that happening in the shim layer in the",
    "start": "794519",
    "end": "800440"
  },
  {
    "text": "ecosystem runi is the most efficient and cost-effective way of running web",
    "start": "800440",
    "end": "805839"
  },
  {
    "text": "assembly workloads in kubernetes Uh web assembly is gaining",
    "start": "805839",
    "end": "811200"
  },
  {
    "text": "some popularities these days Uh it's a binary format and that promises you to",
    "start": "811200",
    "end": "816320"
  },
  {
    "text": "uh build once and run anywhere And runwazi is a rust implementation of the",
    "start": "816320",
    "end": "822959"
  },
  {
    "text": "continuity shim um that designed to facilitate running web assembly",
    "start": "822959",
    "end": "828079"
  },
  {
    "text": "workloads in kubernetes and includes some readytouse shims for you to uh",
    "start": "828079",
    "end": "834079"
  },
  {
    "text": "deploy to the clusters including wasn't time sham wasn't a shame and more It",
    "start": "834079",
    "end": "840320"
  },
  {
    "text": "empowers spin cube an CNCF project that streamlines the deployment of serverless",
    "start": "840320",
    "end": "846560"
  },
  {
    "text": "web assembly applications and is used in productions in Azure Kubernetes service",
    "start": "846560",
    "end": "851839"
  },
  {
    "text": "and SQL civil etc Today this uh deploy a web assembly",
    "start": "851839",
    "end": "858720"
  },
  {
    "text": "application to Kubernetes is really simple Uh there are some tools to automate this away such as the spin cube",
    "start": "858720",
    "end": "865279"
  },
  {
    "text": "runtime class manager but under the hood all you need is a runtime class where",
    "start": "865279",
    "end": "870720"
  },
  {
    "text": "you apply to Kubernetes and there's a handler in the runtime class that you can configure in the continuity config",
    "start": "870720",
    "end": "878240"
  },
  {
    "text": "where you say the CRI runtime type is that uh wasn't",
    "start": "878240",
    "end": "884199"
  },
  {
    "text": "type So uh as you may see the part specification is exactly the same except",
    "start": "884199",
    "end": "889440"
  },
  {
    "text": "one line change where we add a runtime class name is 1.0 and is ready for production",
    "start": "889440",
    "end": "897680"
  },
  {
    "text": "and just last week we released the first release candidate and of 1.0 and if",
    "start": "897680",
    "end": "903120"
  },
  {
    "text": "everything goes well we'll release 1.0 in probably like a few weeks It provides",
    "start": "903120",
    "end": "908720"
  },
  {
    "text": "a shim and sandbox interface where you can use the library to implement your",
    "start": "908720",
    "end": "914800"
  },
  {
    "text": "own shims for running web assembly workloads It can be implemented for any wic runtimes and we have done extensive",
    "start": "914800",
    "end": "922399"
  },
  {
    "text": "benchmarking and it supports OCI artifacts and some cool optimizations",
    "start": "922399",
    "end": "927839"
  },
  {
    "text": "were into specifically for running web assembly in the kubernet on the server side Um and one cool optimization is",
    "start": "927839",
    "end": "935920"
  },
  {
    "text": "that we cache the pre-ompilation module in containerd So if you run the same",
    "start": "935920",
    "end": "941680"
  },
  {
    "text": "task with the same im image uh you don't have to compile wisen to native code every time because you can just use the",
    "start": "941680",
    "end": "948480"
  },
  {
    "text": "cached module and uh because of yuki another",
    "start": "948480",
    "end": "953639"
  },
  {
    "text": "cncf project written in rust uh to implement a container runtime we can",
    "start": "953639",
    "end": "959360"
  },
  {
    "text": "execute Linux container and wasn't workloads side by side in the same pod",
    "start": "959360",
    "end": "965279"
  },
  {
    "text": "Well that enables you to apply the service mash or any other psychar",
    "start": "965279",
    "end": "970800"
  },
  {
    "text": "psychar container patterns Lastly I want to talk about the",
    "start": "970800",
    "end": "976839"
  },
  {
    "text": "performance We have done some comparisons between the wasant time shame in runwazi versus the",
    "start": "976839",
    "end": "983880"
  },
  {
    "text": "distrolless time container in run C And we run that concurrently on a thousand",
    "start": "983880",
    "end": "989720"
  },
  {
    "text": "tasks where run C as you may see is four times slower than the wasn't time sh and",
    "start": "989720",
    "end": "996480"
  },
  {
    "text": "part of the big reason is because of the pre-ompilation technique that we optimized for runwise and another reason",
    "start": "996480",
    "end": "1003440"
  },
  {
    "text": "is because runisi embeds wisen time shame so you don't have to reload the code for the engine every to the memory",
    "start": "1003440",
    "end": "1011120"
  },
  {
    "text": "every time you run the tasks We have done some stress test and this",
    "start": "1011120",
    "end": "1016480"
  },
  {
    "text": "is another example where the uh pre-ompilation OCI artifact outperformed",
    "start": "1016480",
    "end": "1022480"
  },
  {
    "text": "non-p pre-ompilation containers Uh as you may see the pre-ompilation run 60",
    "start": "1022480",
    "end": "1028480"
  },
  {
    "text": "task per second and non pre-ompile runs about",
    "start": "1028480",
    "end": "1033720"
  },
  {
    "text": "15 So that's it for runwise and you can go to runwise.dev F to learn more learn",
    "start": "1033720",
    "end": "1039600"
  },
  {
    "text": "more about it or you can go to the Ronzi channel in the CNCF Slack",
    "start": "1039600",
    "end": "1046240"
  },
  {
    "text": "group Cool So I think we're going to move on to a little bit of a panel discussion The rest of you want to you",
    "start": "1048360",
    "end": "1053679"
  },
  {
    "text": "can all sit down You don't have to stay standing anymore Um we tried this last CubeCon uh just to have a conversation",
    "start": "1053679",
    "end": "1061039"
  },
  {
    "text": "among maintainers and I think it worked pretty well Uh so I'm gonna I'm gonna help get this started and sort of",
    "start": "1061039",
    "end": "1066240"
  },
  {
    "text": "moderate a bit Um we have a couple pre-prepared questions and then we'll see where we are with time and maybe we",
    "start": "1066240",
    "end": "1072640"
  },
  {
    "text": "can have some audience ones too Um but first one I think it'd be nice for us",
    "start": "1072640",
    "end": "1078160"
  },
  {
    "text": "all to talk about how we got involved with containerd Um maybe we can start",
    "start": "1078160",
    "end": "1083200"
  },
  {
    "text": "with Laura on the end and just go back down and I'll I'll be at the end of that Sure Um I think I've kind of been",
    "start": "1083200",
    "end": "1090960"
  },
  {
    "text": "working my way down the stack So I was at Docker contributing to Compose and",
    "start": "1090960",
    "end": "1097760"
  },
  {
    "text": "other way higher up things and eventually I was like well I kind of",
    "start": "1097760",
    "end": "1103280"
  },
  {
    "text": "want to dig into a little bit more So I started doing engine work and I was",
    "start": "1103280",
    "end": "1109440"
  },
  {
    "text": "debugging something in the um engine I ended up contributing something to",
    "start": "1109440",
    "end": "1114799"
  },
  {
    "text": "containerd and just kind of went from there I think",
    "start": "1114799",
    "end": "1120400"
  },
  {
    "text": "in my case I'm a maintainer of ROI Uh so it was almost inevitable for me to uh",
    "start": "1120400",
    "end": "1127679"
  },
  {
    "text": "get involved with ID because uh movie depends on ID",
    "start": "1127679",
    "end": "1135320"
  },
  {
    "text": "Well for me um when I start first started working in web assembly I knew it has to be integrated into Kubernetes",
    "start": "1137840",
    "end": "1145280"
  },
  {
    "text": "for packaging distribution and scaling up Um but just by bounding web assembly",
    "start": "1145280",
    "end": "1152559"
  },
  {
    "text": "into a container with its runtime and operating system it's not the ideal solution because it obl oblivviates the",
    "start": "1152559",
    "end": "1161360"
  },
  {
    "text": "reason to run WSON on the server because WSM can be portable If you bundle with the runtime operating system it's no",
    "start": "1161360",
    "end": "1168080"
  },
  {
    "text": "longer portable So we have to integrate Wom into Kubernetes and there are",
    "start": "1168080",
    "end": "1173600"
  },
  {
    "text": "previous attempts such as reimplement cublat in rust to run web assembly uh",
    "start": "1173600",
    "end": "1180400"
  },
  {
    "text": "but some of the previous attempts failed because they are incompatible with the broader cloudnative",
    "start": "1180400",
    "end": "1187799"
  },
  {
    "text": "ecosystem and uh so we when we learn the lessons we look at the whole stack we",
    "start": "1187799",
    "end": "1193440"
  },
  {
    "text": "have to go lower level and the continuity is a perfect perfect match",
    "start": "1193440",
    "end": "1198559"
  },
  {
    "text": "there because um it is the standard to run containers in Kubernetes So Brian",
    "start": "1198559",
    "end": "1206160"
  },
  {
    "text": "Goff a software engineer from Microsoft and the reviewer of continued actually started run a continu shame and well",
    "start": "1206160",
    "end": "1214960"
  },
  {
    "text": "that's how I got involved Um for me I think my first contribution",
    "start": "1214960",
    "end": "1221200"
  },
  {
    "text": "was in 2018 Um I worked with them at the same team and I was really excited about",
    "start": "1221200",
    "end": "1228240"
  },
  {
    "text": "containers and looked for a way to you know get involved Uh so I think my first",
    "start": "1228240",
    "end": "1233360"
  },
  {
    "text": "contribution was to implement pixie deco compression for contained to improve image de compression speeds when you",
    "start": "1233360",
    "end": "1239760"
  },
  {
    "text": "pull images Um and you know I think it's was it was like good first issue type of",
    "start": "1239760",
    "end": "1245840"
  },
  {
    "text": "issue So if you're looking for a way to you know get involved that would be a great start",
    "start": "1245840",
    "end": "1251919"
  },
  {
    "text": "I think I'm the last one Um so my my first involvement was actually with Docker before containerity was split out",
    "start": "1251919",
    "end": "1258240"
  },
  {
    "text": "and then uh as containerity got split out into its own project I I got to be uh involved there I think early on I was",
    "start": "1258240",
    "end": "1265280"
  },
  {
    "text": "focused more on like testing and um sort of minor but like code cleanliness",
    "start": "1265280",
    "end": "1270640"
  },
  {
    "text": "changes to containerd as I was trying to get up to speed and learn more about the area Uh and then later on I was able to",
    "start": "1270640",
    "end": "1276080"
  },
  {
    "text": "to do more I think in about 2017 might have been when I formally joined the project as a security adviser um which",
    "start": "1276080",
    "end": "1282559"
  },
  {
    "text": "is a role that we have to help with um security triage and security response and then from that I grew into um doing",
    "start": "1282559",
    "end": "1290240"
  },
  {
    "text": "more of the the maintainer work on the project Uh so maybe we can talk about",
    "start": "1290240",
    "end": "1296159"
  },
  {
    "text": "next thing Um I think everyone might have an answer to this but what's something that you're excited about in",
    "start": "1296159",
    "end": "1301280"
  },
  {
    "text": "the container space whoever wants to start off",
    "start": "1301280",
    "end": "1306720"
  },
  {
    "text": "I can start Um I'm a big fan of Rust and we maintain Rust extensions in contained",
    "start": "1306720",
    "end": "1313440"
  },
  {
    "text": "and I'm really excited to see things like runi get into production running on",
    "start": "1313440",
    "end": "1319280"
  },
  {
    "text": "big on big workloads This is very nice Yeah just to follow on that I'm really",
    "start": "1319280",
    "end": "1326320"
  },
  {
    "text": "excited as you may have guessed the growing popularity and interest in using",
    "start": "1326320",
    "end": "1331600"
  },
  {
    "text": "Wisen as the first class citizen in Kubernetes and container ecosystem and um there are community",
    "start": "1331600",
    "end": "1338799"
  },
  {
    "text": "efforts within CNCF to standardize an OCI artifact layout for WAM and it just",
    "start": "1338799",
    "end": "1346159"
  },
  {
    "text": "brought consistency and the broader visibilities and that can be applied to any WM projects or the consuming",
    "start": "1346159",
    "end": "1353000"
  },
  {
    "text": "projects and it also solved the registry issue where you can now package wise",
    "start": "1353000",
    "end": "1358320"
  },
  {
    "text": "modules as a OCI artifact and store them into OCI registries So that's pretty",
    "start": "1358320",
    "end": "1363640"
  },
  {
    "text": "exciting Um I'm also very excited about some of the virtualization",
    "start": "1363640",
    "end": "1369280"
  },
  {
    "text": "uh innovations in the cloud computing Uh for example Hyperlite is another CNCF",
    "start": "1369280",
    "end": "1375200"
  },
  {
    "text": "project where it can it's a hypervisor that can spawn a micro virtual machine",
    "start": "1375200",
    "end": "1380640"
  },
  {
    "text": "within two milliseconds and because it can start up so fast you can essentially",
    "start": "1380640",
    "end": "1386400"
  },
  {
    "text": "sandbox your HP request every request and so you can imagine uh what's the use",
    "start": "1386400",
    "end": "1393360"
  },
  {
    "text": "cases uh to run that as a container in Kubernetes",
    "start": "1393360",
    "end": "1399440"
  },
  {
    "text": "Yeah Yeah So I'm I'm excited about uh RASM as well So ROSM is a very",
    "start": "1399440",
    "end": "1406720"
  },
  {
    "text": "interesting technologies because uh you can migrate the work world from the",
    "start": "1406720",
    "end": "1412559"
  },
  {
    "text": "crowd to a web browser on desktop or even on smartphones and vice versa So",
    "start": "1412559",
    "end": "1419679"
  },
  {
    "text": "that means potentially the content technologies with res can be also used",
    "start": "1419679",
    "end": "1426240"
  },
  {
    "text": "for desktop computing and even mobile computing",
    "start": "1426240",
    "end": "1432520"
  },
  {
    "text": "Um I think there's I was trying to come up with an answer to this for a while and I think there's a lot of cool",
    "start": "1433919",
    "end": "1439200"
  },
  {
    "text": "interesting things going on but I think they paradoxically I'm kind of excited",
    "start": "1439200",
    "end": "1444880"
  },
  {
    "text": "about the fact that containers are kind of becoming boring in the sense that you know ecosystems a little bit more mature",
    "start": "1444880",
    "end": "1452240"
  },
  {
    "text": "and like APIs are a little bit more stable which means we can have a lot of",
    "start": "1452240",
    "end": "1458320"
  },
  {
    "text": "extension points and like integrations and we can do cool stuff like you know have run like wy shim and have these",
    "start": "1458320",
    "end": "1466320"
  },
  {
    "text": "kinds of stable APIs that let us do cool things and extend containerd and all",
    "start": "1466320",
    "end": "1472640"
  },
  {
    "text": "this stuff in the container world Yeah just wanted to add like containerd",
    "start": "1472640",
    "end": "1478640"
  },
  {
    "text": "is highly extendable and it tries to be as unopinion and unopinionated as possible and basically there is an",
    "start": "1478640",
    "end": "1485279"
  },
  {
    "text": "extension point for everything if if you can find a way to extend",
    "start": "1485279",
    "end": "1491600"
  },
  {
    "text": "We're going to have another question about that We we are but you can finish and then I'll go",
    "start": "1491600",
    "end": "1498080"
  },
  {
    "text": "that sounded very logical continuation but anyway so if you can cannot find how to extend any let us",
    "start": "1498080",
    "end": "1505679"
  },
  {
    "text": "know we will add it so we do have a question coming up about this but uh",
    "start": "1505679",
    "end": "1510720"
  },
  {
    "text": "I'll answer sort of the first question of what are you excited about and the thing that I'm excited about is extensibility um so we've talked about a",
    "start": "1510720",
    "end": "1517840"
  },
  {
    "text": "few of the things already um the shim shim extension point lets us plug in things like WASOM uh with via RunWazi",
    "start": "1517840",
    "end": "1525440"
  },
  {
    "text": "but it also lets us do things like expand to other operating systems So there's a um that's part of how our",
    "start": "1525440",
    "end": "1530640"
  },
  {
    "text": "Windows support works It's also how we have a shim for FreeBSD um and sort of like a a really natural",
    "start": "1530640",
    "end": "1537440"
  },
  {
    "text": "way to expand containerd Beyond that um there's also an extension point that we have called snapshoters um which is how",
    "start": "1537440",
    "end": "1544080"
  },
  {
    "text": "we deal with storing image layers And uh Akiheriro touched on this a little bit earlier um that NerdCTL was one of the",
    "start": "1544080",
    "end": "1550320"
  },
  {
    "text": "the places for experimenting with uh lazy loading and we have a lazy loading snapshot a couple of them We have we",
    "start": "1550320",
    "end": "1556400"
  },
  {
    "text": "have uh stargaz snapshot and then uh overlay bd and nitus that are um do lazy",
    "start": "1556400",
    "end": "1561520"
  },
  {
    "text": "loading and then there's a couple others that are elsewhere in the ecosystem like we have uh I work on GKE We have a a",
    "start": "1561520",
    "end": "1567760"
  },
  {
    "text": "lazy loading snapshot in GKE that powers a feature called image streaming So that kind of extensibility is really exciting",
    "start": "1567760",
    "end": "1573039"
  },
  {
    "text": "to me Um one of the new things that happened in containity 17 and is um more",
    "start": "1573039",
    "end": "1579360"
  },
  {
    "text": "stable in two and then we're going to continue to iterate on it is something called NRI uh which is node node",
    "start": "1579360",
    "end": "1585039"
  },
  {
    "text": "resource interface Uh and that's an extension point that lets you do things very similar to a mutating web hook um",
    "start": "1585039",
    "end": "1591279"
  },
  {
    "text": "but for the container configuration So a a podspec you put in a podspec in",
    "start": "1591279",
    "end": "1597039"
  },
  {
    "text": "Kubernetes it comes through the CRI uh and containerd will generate an initial set of configuration for that container",
    "start": "1597039",
    "end": "1603279"
  },
  {
    "text": "based on your input But an NRI plug-in can then go and uh adjust that and do some interesting things based on that So",
    "start": "1603279",
    "end": "1609279"
  },
  {
    "text": "that's something that's really interesting to me Um and talking about that is is extensibility So NRI and",
    "start": "1609279",
    "end": "1616240"
  },
  {
    "text": "chimps and snapshoters I touched on some of this already but I don't know if anyone else wants to talk a little bit more",
    "start": "1616240",
    "end": "1625400"
  },
  {
    "text": "You covered it Okay Um Laura I think this one the next",
    "start": "1626880",
    "end": "1632640"
  },
  {
    "text": "one was for you Um you wanted to talk about shim correctness and performance and things like that specifically for me",
    "start": "1632640",
    "end": "1640200"
  },
  {
    "text": "Uh yeah I think I so put this here because I just recently opened a um PR",
    "start": "1640200",
    "end": "1647360"
  },
  {
    "text": "adding some weird uh formal verification to the continuity run C shim and the",
    "start": "1647360",
    "end": "1654080"
  },
  {
    "text": "impetus for that was kind of looking back at a couple of regressions we've",
    "start": "1654080",
    "end": "1659200"
  },
  {
    "text": "had um over the past year after we kind of switched out a not very performant",
    "start": "1659200",
    "end": "1666520"
  },
  {
    "text": "but simple uh concurren currency mechanism in the shim with a much more",
    "start": "1666520",
    "end": "1672720"
  },
  {
    "text": "performant but a little bit harder to understand one and then we ran into a couple of things Um and so I think",
    "start": "1672720",
    "end": "1680399"
  },
  {
    "text": "there's a couple of interesting like tradeoffs between performance and also",
    "start": "1680399",
    "end": "1686000"
  },
  {
    "text": "if I look at this can I understand whether it's correct or not um and a few",
    "start": "1686000",
    "end": "1691760"
  },
  {
    "text": "ways to um address that One of which I guess is formal verification but I don't",
    "start": "1691760",
    "end": "1697440"
  },
  {
    "text": "know Does anyone else have thoughts about that",
    "start": "1697440",
    "end": "1703960"
  },
  {
    "text": "no I I think I think formal verification is going to be really helpful to making sure that that continuity is really",
    "start": "1706559",
    "end": "1712720"
  },
  {
    "text": "reliable So I'm excited to have that in there I mean I will say if you know the shim",
    "start": "1712720",
    "end": "1720320"
  },
  {
    "text": "wasn't in Go and I was like in Rust or something we would have better tooling to just formally verify or extract some",
    "start": "1720320",
    "end": "1728640"
  },
  {
    "text": "of that information instead of just writing a spec but not going to do the let's rewrite it in Rust meme So",
    "start": "1728640",
    "end": "1738039"
  },
  {
    "text": "okay Um we had a couple more prepared ones but we're running close on time So I'm going to skip those and maybe open",
    "start": "1738720",
    "end": "1744399"
  },
  {
    "text": "for uh audience uh questions at this point and I'm just going to stick this slide on the screen of like ways to get",
    "start": "1744399",
    "end": "1750559"
  },
  {
    "text": "involved But um if anyone has questions I think we have a mic up here We can pass around",
    "start": "1750559",
    "end": "1758120"
  },
  {
    "text": "Uh thanks very much for the talk Um I was wondering with uh the sandbox API in",
    "start": "1768640",
    "end": "1773919"
  },
  {
    "text": "17 and now stabilized in 20 uh how long it will be until we see uh microVM based",
    "start": "1773919",
    "end": "1780240"
  },
  {
    "text": "uh isolation uh security isolation So not not for WM which you've talked about",
    "start": "1780240",
    "end": "1785279"
  },
  {
    "text": "but just generally for containers uh so you know firec cricketer type things uh so we can have an actual sandbox uh as a",
    "start": "1785279",
    "end": "1793279"
  },
  {
    "text": "container abstraction Yeah So we introduced sandbox API in 1.7",
    "start": "1793279",
    "end": "1801600"
  },
  {
    "text": "as an experimental one because we really wanted to give community some time to you know get familiar with it and",
    "start": "1801600",
    "end": "1808080"
  },
  {
    "text": "receive some feedback Um in 2.0 Oh which was released quite",
    "start": "1808080",
    "end": "1814320"
  },
  {
    "text": "recently It's now stable So we think API is going to be like more or less the",
    "start": "1814320",
    "end": "1819520"
  },
  {
    "text": "same We might add add some features in future but more or less it's well",
    "start": "1819520",
    "end": "1825279"
  },
  {
    "text": "defined by now Does that answer the",
    "start": "1825279",
    "end": "1831080"
  },
  {
    "text": "question that much I knew but I mean in terms of when we'll see uh microVM based",
    "start": "1831080",
    "end": "1836880"
  },
  {
    "text": "uh sandbox isolation actually being usable So something like firecracker or",
    "start": "1836880",
    "end": "1842799"
  },
  {
    "text": "you know some something else that enables us to have microVM based uh isolation",
    "start": "1842799",
    "end": "1850679"
  },
  {
    "text": "sorry already started implementing that so we have a request that was made",
    "start": "1850919",
    "end": "1856760"
  },
  {
    "text": "recently so now but it was only for the time so",
    "start": "1856760",
    "end": "1861840"
  },
  {
    "text": "we are halfway there I didn't hear any of that",
    "start": "1861840",
    "end": "1868360"
  },
  {
    "text": "I'll repeat um he was from the Kata project and said that they're about halfway through integration uh with the",
    "start": "1868960",
    "end": "1875840"
  },
  {
    "text": "with the new sandbox API and I think that's really exciting So Kat's probably going to be the first to have that real",
    "start": "1875840",
    "end": "1881520"
  },
  {
    "text": "kind of microVM integration that you're talking about",
    "start": "1881520",
    "end": "1886200"
  },
  {
    "text": "Yep No no I just",
    "start": "1887919",
    "end": "1893720"
  },
  {
    "text": "something what really bothers me for a while but one of your slides actually remind me about uh the runtime handlers",
    "start": "1899760",
    "end": "1908159"
  },
  {
    "text": "So now for let's say like if I want to use v was uh I need to go to kublet oh",
    "start": "1908159",
    "end": "1915120"
  },
  {
    "text": "sorry to kubernetes I need to create runtime class object I need to not miss not to misspell the handler name when I",
    "start": "1915120",
    "end": "1922640"
  },
  {
    "text": "need to go to container deconfig and write all those parameters and so on Do you see uh or do you want to make an",
    "start": "1922640",
    "end": "1931200"
  },
  {
    "text": "improvement what like with container uh runtimes will be exposing to kubernetes what kind of runtime handlers are",
    "start": "1931200",
    "end": "1937880"
  },
  {
    "text": "configured so just to remove this bunch of manual steps to configure them",
    "start": "1937880",
    "end": "1946039"
  },
  {
    "text": "Um so there are projects like spin cube runtime class manager that manage the",
    "start": "1946240",
    "end": "1954000"
  },
  {
    "text": "life cycles of runtime classes and that can abstract away some of the complexity",
    "start": "1954000",
    "end": "1959919"
  },
  {
    "text": "there Um I also thought about the idea but we haven't done any real implementation or",
    "start": "1959919",
    "end": "1967519"
  },
  {
    "text": "prototyping is that if containerd can dynamically check the image type and run",
    "start": "1967519",
    "end": "1974720"
  },
  {
    "text": "if it's a wen image just run a wen runtime that could also reduce the",
    "start": "1974720",
    "end": "1982158"
  },
  {
    "text": "complexity Did I answer that question",
    "start": "1982360",
    "end": "1987320"
  },
  {
    "text": "i think we're a little bit over time now So um I wanted to thank everyone for coming and uh I think we're all going to",
    "start": "1994559",
    "end": "2000799"
  },
  {
    "text": "be hanging out here for at least a few minutes after if you have more questions you didn't want to ask in front of everyone else But uh thank you everyone",
    "start": "2000799",
    "end": "2008220"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2008220",
    "end": "2012059"
  }
]