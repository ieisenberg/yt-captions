[
  {
    "text": "thank you for coming to our our talk today my name is Jay pipes for the",
    "start": "0",
    "end": "5940"
  },
  {
    "text": "purposes of this particular session I'll be playing the role of Bob the Builder and this is Amin hilali who's going to",
    "start": "5940",
    "end": "13620"
  },
  {
    "text": "be playing the role of Spud the Scarecrow um and we're going to talk a little bit",
    "start": "13620",
    "end": "18840"
  },
  {
    "text": "about Beyond Cube Builder generating kubernetes custom controller",
    "start": "18840",
    "end": "25320"
  },
  {
    "text": "implementations um go ahead so we have because of a variety of needs",
    "start": "25320",
    "end": "34440"
  },
  {
    "text": "of this set of kubernetes controller projects called ack we've had",
    "start": "34440",
    "end": "41399"
  },
  {
    "text": "to build our own Factory for producing kubernetes controllers and we've done it",
    "start": "41399",
    "end": "48780"
  },
  {
    "text": "over the last couple years and we've learned a few lessons over the last couple of years and wanted to share with",
    "start": "48780",
    "end": "55500"
  },
  {
    "text": "you some of the tools that we've we've built to help generate controller",
    "start": "55500",
    "end": "61860"
  },
  {
    "text": "implementations and maybe give you some inspiration for how",
    "start": "61860",
    "end": "68939"
  },
  {
    "text": "you can Implement your own custom kubernetes controllers so come on in there's lots of seats over here",
    "start": "68939",
    "end": "76619"
  },
  {
    "text": "so um yeah go ahead go ahead I mean so uh just like any other Factory you will",
    "start": "76619",
    "end": "82799"
  },
  {
    "text": "need hard hats and I'm not gonna put this on I already look",
    "start": "82799",
    "end": "88979"
  },
  {
    "text": "like too much of a dork but anyway um we'll be giving these away at the end of this particular session with lots of",
    "start": "88979",
    "end": "96060"
  },
  {
    "text": "signatures from kubernetes community members and all the stickers and stuff like that so",
    "start": "96060",
    "end": "101939"
  },
  {
    "text": "um yeah I again will not be wearing my Bob the Builder Hat",
    "start": "101939",
    "end": "107240"
  },
  {
    "text": "uh like I said we had to build a uh a factory that produces",
    "start": "111119",
    "end": "117119"
  },
  {
    "text": "kubernetes controllers so most of you are probably familiar with um with coup Builder right which is the",
    "start": "117119",
    "end": "123780"
  },
  {
    "text": "the Upstream project that sort of wraps a bunch of code generation tools and",
    "start": "123780",
    "end": "130020"
  },
  {
    "text": "um sort of templates and sort of cookie cutter stuff for creating kubernetes",
    "start": "130020",
    "end": "135780"
  },
  {
    "text": "custom controllers so we have had to go beyond two Builder and build a whole",
    "start": "135780",
    "end": "140940"
  },
  {
    "text": "bunch of Automation and uh additional code generation tools to deal with our",
    "start": "140940",
    "end": "146459"
  },
  {
    "text": "specific problem that we had in uh the ack land",
    "start": "146459",
    "end": "151879"
  },
  {
    "text": "but first I mean it's going to give a little bit of background on uh kubernetes controls",
    "start": "152640",
    "end": "159180"
  },
  {
    "text": "yeah so before talking about building a kubernetes controller Factory let's talk",
    "start": "159180",
    "end": "164580"
  },
  {
    "text": "about what is a controller so a as almost all of you know right now uh",
    "start": "164580",
    "end": "171060"
  },
  {
    "text": "controllers are processes or programs that constantly or actively try",
    "start": "171060",
    "end": "176819"
  },
  {
    "text": "to reconcile uh kubernetes objects it's an infinite Loop for example it's going",
    "start": "176819",
    "end": "182819"
  },
  {
    "text": "to go and query what is the desired State what is the current state and it's going to make actions to make the",
    "start": "182819",
    "end": "188040"
  },
  {
    "text": "changes and move our current state towards the desired state",
    "start": "188040",
    "end": "194120"
  },
  {
    "text": "we have a lot of controllers and kubernetes almost everything in kubernetes is just controllers it's a",
    "start": "194220",
    "end": "201120"
  },
  {
    "text": "smelting pot of controllers each one of them is reconciling a different kind of resources a good example is deployments",
    "start": "201120",
    "end": "207959"
  },
  {
    "text": "and eight points for example whenever you create a deployment you have a deployment controller",
    "start": "207959",
    "end": "213000"
  },
  {
    "text": "creating a deployment objects and the weakasset objects and then behind the scenes you",
    "start": "213000",
    "end": "218580"
  },
  {
    "text": "have a lot of other controllers that will go and create your objects including the pods we have",
    "start": "218580",
    "end": "225239"
  },
  {
    "text": "also job nodes and even name spaces are created or managed by kubernetes native",
    "start": "225239",
    "end": "231480"
  },
  {
    "text": "controllers and then you can also build your own",
    "start": "231480",
    "end": "237420"
  },
  {
    "text": "custom controllers for example you can control your Home Smart bulbs you can",
    "start": "237420",
    "end": "242519"
  },
  {
    "text": "have a crd that will have in a spec whether a lamp is turned on or turned",
    "start": "242519",
    "end": "248879"
  },
  {
    "text": "off and you can manage that through your kubernetes cluster you can also order pizza shout out to Michael hasenblast",
    "start": "248879",
    "end": "255060"
  },
  {
    "text": "for creating the pizza controller so right now there is a controller where you can order pizza using crds",
    "start": "255060",
    "end": "262199"
  },
  {
    "text": "um you could actually find that and also you can manage Cloud resources for example the AWS S3 or Google storage",
    "start": "262199",
    "end": "270000"
  },
  {
    "text": "Google Cloud Storage or Azure blob storage you can manage those through kubernetes crds",
    "start": "270000",
    "end": "276000"
  },
  {
    "text": "and even you can manage kubecon cfps because why use uis when you have Cube",
    "start": "276000",
    "end": "281880"
  },
  {
    "text": "cuddle it's always better so if you're interested into learning how to manage cfps through",
    "start": "281880",
    "end": "289280"
  },
  {
    "text": "kubernetes please go see the tutorial how to build controllers at fortree 430",
    "start": "289280",
    "end": "294660"
  },
  {
    "text": "pm and yeah next is your toolbox if you",
    "start": "294660",
    "end": "301139"
  },
  {
    "text": "ever want to build your own controllers you for sure gonna hit or gonna see some",
    "start": "301139",
    "end": "306240"
  },
  {
    "text": "uh one of the known tools in the kubernetes world one of them is Q Builder uh queue Builder is a tool that",
    "start": "306240",
    "end": "312360"
  },
  {
    "text": "helps you in scaffold in your controller project and behind the scenes it uses",
    "start": "312360",
    "end": "318060"
  },
  {
    "text": "tools like controller gen and controller tools and um other examples like operator framework",
    "start": "318060",
    "end": "324419"
  },
  {
    "text": "and controller runtime for example controller runtime is going to contain a set of tools and libraries that will",
    "start": "324419",
    "end": "330360"
  },
  {
    "text": "help you manage resources um in your kubernetes cluster and for the",
    "start": "330360",
    "end": "336900"
  },
  {
    "text": "bravest all the old-fashioned you can handcraft your own controllers using some libraries like clients go informers",
    "start": "336900",
    "end": "344039"
  },
  {
    "text": "shared informers work use good luck with that fun facts",
    "start": "344039",
    "end": "349680"
  },
  {
    "text": "deployment controller andropic asset controller I think also the stateful set one are all written using these basic",
    "start": "349680",
    "end": "357300"
  },
  {
    "text": "components they are not built using controller runtime and let's one of the",
    "start": "357300",
    "end": "362520"
  },
  {
    "text": "latest news I asked one of the people from the Sig app whether they want to move to what controller runtime or not",
    "start": "362520",
    "end": "368699"
  },
  {
    "text": "they will not they will stay in this library but if you want to build your own it's better to go to use controller",
    "start": "368699",
    "end": "374400"
  },
  {
    "text": "runtime because it does a lot of work for you okay so now we know the tools uh let's",
    "start": "374400",
    "end": "381900"
  },
  {
    "text": "define the limits or the boundaries between what developers need to do and what",
    "start": "381900",
    "end": "387259"
  },
  {
    "text": "the libraries and the tools do for you for example um the tools and the libraries will help",
    "start": "387259",
    "end": "393360"
  },
  {
    "text": "you generate the go types the crds which will also help you generate the co clients if you want to interact with",
    "start": "393360",
    "end": "399660"
  },
  {
    "text": "those with API server to query or modify those objects it will give you good",
    "start": "399660",
    "end": "405240"
  },
  {
    "text": "libraries to handle login and leader election rate limiting web Hooks and",
    "start": "405240",
    "end": "412740"
  },
  {
    "text": "stuff like that however on the other hand as a developer you still have to",
    "start": "412740",
    "end": "417840"
  },
  {
    "text": "write your own reconciliation logic you will still have to write the validation",
    "start": "417840",
    "end": "423060"
  },
  {
    "text": "and the mutation webhooks you also have to write units and end-to-end tests and",
    "start": "423060",
    "end": "428100"
  },
  {
    "text": "from time to time you will have to fight with your own robots because robots uh",
    "start": "428100",
    "end": "434039"
  },
  {
    "text": "are not good the best you'll also have to maintain control images and maintain Helm shots",
    "start": "434039",
    "end": "440940"
  },
  {
    "text": "and documentation and so you're going to come back and fight with your own power bots and do a lot of Slash retests and",
    "start": "440940",
    "end": "447060"
  },
  {
    "text": "slash LG GM at the end so as a developer there's a lot of logic to to write and to implement and uh yeah",
    "start": "447060",
    "end": "455460"
  },
  {
    "text": "this is uh just a global overview and what's the difference or what what are the boundaries between what the tools do",
    "start": "455460",
    "end": "462539"
  },
  {
    "text": "and developers have to do",
    "start": "462539",
    "end": "465680"
  },
  {
    "text": "so you just saw the list of things that developers still need to do even though",
    "start": "471240",
    "end": "478139"
  },
  {
    "text": "we've got all this great tooling with Cube Builder and controller runtime and controller gen and all that kind of",
    "start": "478139",
    "end": "483539"
  },
  {
    "text": "stuff in the AWS controllers for kubernetes project we had a big problem",
    "start": "483539",
    "end": "490979"
  },
  {
    "text": "right uh we we had to create a kubernetes custom controller for each of",
    "start": "490979",
    "end": "497099"
  },
  {
    "text": "the AWS services and the",
    "start": "497099",
    "end": "502860"
  },
  {
    "text": "um the thought of having to hand build and manually maintain uh and develop and",
    "start": "502860",
    "end": "509580"
  },
  {
    "text": "and publish artifacts for 200 plus AWS Services was not something that we were",
    "start": "509580",
    "end": "516479"
  },
  {
    "text": "really uh Keen to do and so about two years ago we set a",
    "start": "516479",
    "end": "522120"
  },
  {
    "text": "set about to build this sort of like controller factory with a bunch of code",
    "start": "522120",
    "end": "527640"
  },
  {
    "text": "generation tools and automation uh that um that we put out in in open source",
    "start": "527640",
    "end": "535680"
  },
  {
    "text": "um one of the one of the larger problems that we hit",
    "start": "535680",
    "end": "542160"
  },
  {
    "text": "when we started to generate controllers that interfaced with individual AWS",
    "start": "542160",
    "end": "548220"
  },
  {
    "text": "service apis where that well apis change they evolve over time they're not static",
    "start": "548220",
    "end": "554339"
  },
  {
    "text": "right and so we needed a way to integrate changes to the Upstream",
    "start": "554339",
    "end": "562200"
  },
  {
    "text": "service apis in a smooth and consistent and reliable",
    "start": "562200",
    "end": "567540"
  },
  {
    "text": "fashion right we realize that we could go ahead and generate a controller a",
    "start": "567540",
    "end": "573360"
  },
  {
    "text": "full controller implementation for something like S3 or RDS but next month the RDS team or the F3 team can come out",
    "start": "573360",
    "end": "581100"
  },
  {
    "text": "with a new field in a particular resource in their API or a new resource",
    "start": "581100",
    "end": "586980"
  },
  {
    "text": "entirely right they could also change the behavior of you know how things happen on the service side and that",
    "start": "586980",
    "end": "594000"
  },
  {
    "text": "behavior change would then roll out and and cause conflicting damage to all of",
    "start": "594000",
    "end": "600540"
  },
  {
    "text": "the controllers that were generated with a past schema or model for that API and",
    "start": "600540",
    "end": "607380"
  },
  {
    "text": "so we had to build a bunch of Automation and code generation tools to continually",
    "start": "607380",
    "end": "613860"
  },
  {
    "text": "keep the controller the controllers that are generated up to date with those",
    "start": "613860",
    "end": "619200"
  },
  {
    "text": "evolving API schemas",
    "start": "619200",
    "end": "623120"
  },
  {
    "text": "so uh we're gonna well amine is going to give a tour of our little uh controller",
    "start": "624540",
    "end": "632399"
  },
  {
    "text": "Factory um the inputs to this sort of like controller Factory are the AWS API",
    "start": "632399",
    "end": "639779"
  },
  {
    "text": "models right the the definitions of the apis they contain things like",
    "start": "639779",
    "end": "645360"
  },
  {
    "text": "descriptions of the operations that each of the service apis have you know for S3",
    "start": "645360",
    "end": "650579"
  },
  {
    "text": "like create bucket Etc and then also descriptions of the shapes right you can",
    "start": "650579",
    "end": "656160"
  },
  {
    "text": "kind of think of uh there are these things called the coral API models in AWS but you can kind of think about it",
    "start": "656160",
    "end": "662459"
  },
  {
    "text": "like an earlier version of open API uh schema right",
    "start": "662459",
    "end": "667620"
  },
  {
    "text": "um but it's just sort of like AWS specific anyway these API models and uh",
    "start": "667620",
    "end": "673019"
  },
  {
    "text": "particular generation or generator.yaml configuration file contains some",
    "start": "673019",
    "end": "678240"
  },
  {
    "text": "instructions to our code generation framework and tools to how to generate the controller how to identify what",
    "start": "678240",
    "end": "686459"
  },
  {
    "text": "resources are in the API and that kind of thing but the end output in our Factory is a full controller",
    "start": "686459",
    "end": "692940"
  },
  {
    "text": "implementation right so if what you think about if you're used to cube Builder what you get when you generate a",
    "start": "692940",
    "end": "699660"
  },
  {
    "text": "controller is basically just a stub right the the reconciler logic and everything you still have to go and and",
    "start": "699660",
    "end": "705899"
  },
  {
    "text": "do your do your thing you have to implement it we didn't want to do that for 200",
    "start": "705899",
    "end": "711240"
  },
  {
    "text": "controllers and so we had to build something that could do that for us right",
    "start": "711240",
    "end": "718339"
  },
  {
    "text": "so so uh the first step in this controller Factory after giving the API schema and",
    "start": "719700",
    "end": "727380"
  },
  {
    "text": "the generator that yaml configuration file is finding what are the resources we should be managing for example on the",
    "start": "727380",
    "end": "735060"
  },
  {
    "text": "right here you can see that we have a small snippet from the API schema for dynamodb there is a an operation called",
    "start": "735060",
    "end": "743700"
  },
  {
    "text": "create stable so the first thing to do to we do to find the resources is to",
    "start": "743700",
    "end": "749579"
  },
  {
    "text": "find every operation that starts with creates strip the create and keep the rest that's our resource so whenever we",
    "start": "749579",
    "end": "755700"
  },
  {
    "text": "see create X or Y we know that X and Y will be resources it's as simple as that",
    "start": "755700",
    "end": "762079"
  },
  {
    "text": "for some apis you have I don't know 20 create operations we know that we have",
    "start": "762079",
    "end": "767100"
  },
  {
    "text": "20 resources to manage I'll just interrupt and say uh ameen",
    "start": "767100",
    "end": "774000"
  },
  {
    "text": "said it's just as simple as that I wish it was as simple as that uh any of you",
    "start": "774000",
    "end": "779040"
  },
  {
    "text": "are familiar with AWS apis know that they suffer from uh a glorious",
    "start": "779040",
    "end": "785779"
  },
  {
    "text": "gloriously like idiosyncratic inconsistencies across those service apis right especially like the behavior",
    "start": "785779",
    "end": "792779"
  },
  {
    "text": "of like update code pass and things like that um because you know all AWS Services they're like little startups inside of",
    "start": "792779",
    "end": "798660"
  },
  {
    "text": "AWS and so they all kind of do their own little thing so anyway it may look simple but it's",
    "start": "798660",
    "end": "805079"
  },
  {
    "text": "absolutely not so after inferring that table as a",
    "start": "805079",
    "end": "811740"
  },
  {
    "text": "resource now we need to find what are the fields of this table resource which Fields go to the spec and which Fields",
    "start": "811740",
    "end": "818339"
  },
  {
    "text": "go to the status and for that it is not as easy as go into the create",
    "start": "818339",
    "end": "825480"
  },
  {
    "text": "table inputs and create table outputs and whenever we see a field appearing in",
    "start": "825480",
    "end": "830820"
  },
  {
    "text": "both of the operations we know this is spec whenever we see an uh a field that's only appearing on the response we",
    "start": "830820",
    "end": "838200"
  },
  {
    "text": "know the status for example table sages it's going to be on the stages because",
    "start": "838200",
    "end": "843240"
  },
  {
    "text": "we do not give that field in the input we only receive it in the outputs however table name it's going to be in",
    "start": "843240",
    "end": "849060"
  },
  {
    "text": "the spec because we see it on the inputs and the outputs at the same time this is a",
    "start": "849060",
    "end": "855000"
  },
  {
    "text": "the the default way of interfering what should go in the spec and we should go into the stages",
    "start": "855000",
    "end": "861800"
  },
  {
    "text": "so after knowing what are the resources and what are the fields we write all",
    "start": "864660",
    "end": "869880"
  },
  {
    "text": "this information into uh apis V1 Alpha One and you can see here that we have",
    "start": "869880",
    "end": "875519"
  },
  {
    "text": "inline uh 24 tables back uh 161 table status and of course the object",
    "start": "875519",
    "end": "881760"
  },
  {
    "text": "kubernetes or cube builder needs to know that these are kubernetes objects is",
    "start": "881760",
    "end": "887459"
  },
  {
    "text": "table and table lists you can see that we have a objects metadata aspect and",
    "start": "887459",
    "end": "892860"
  },
  {
    "text": "the status okay so now we have the objects their",
    "start": "892860",
    "end": "899579"
  },
  {
    "text": "definitions uh we're gonna do a quick round of controllers and feet are",
    "start": "899579",
    "end": "905100"
  },
  {
    "text": "queue Builder so uh as you see here before we have a few markers key Builder",
    "start": "905100",
    "end": "911339"
  },
  {
    "text": "objects and sub resource those comments will be used with control in controller",
    "start": "911339",
    "end": "916800"
  },
  {
    "text": "gen to for example know how to how to input the printer",
    "start": "916800",
    "end": "923279"
  },
  {
    "text": "columns and the validation patterns and the roll scoping we're also going to leverage controller gen to generate like",
    "start": "923279",
    "end": "929820"
  },
  {
    "text": "files like ZZ deep copy if you have a written controllers you know that multiple times during runtime we need to",
    "start": "929820",
    "end": "935880"
  },
  {
    "text": "keep to copy objects and pass them to other functions",
    "start": "935880",
    "end": "941779"
  },
  {
    "text": "so at this stage we did all this to only have the controller skeleton there is no",
    "start": "942300",
    "end": "947820"
  },
  {
    "text": "reconciliation Loop there is no logic at all it's just the definition of of the objects and this is almost at the same",
    "start": "947820",
    "end": "954600"
  },
  {
    "text": "level where Cube Builder is going to put you it's going to help you only manage those crds or like the types the spec",
    "start": "954600",
    "end": "961019"
  },
  {
    "text": "and the stages so this is where the real fun starts",
    "start": "961019",
    "end": "967740"
  },
  {
    "text": "so um earlier I I showed you a little bit of some Snippets about those API model",
    "start": "967740",
    "end": "974459"
  },
  {
    "text": "definitions that we have for the the AWS service apis and how we take those model",
    "start": "974459",
    "end": "980100"
  },
  {
    "text": "definitions and determine what are the custom resource definitions that that particular controller is going to expose",
    "start": "980100",
    "end": "986220"
  },
  {
    "text": "and what are those custom resource definitions look like right what fields are in the spec and the status and all",
    "start": "986220",
    "end": "991620"
  },
  {
    "text": "that kind of stuff we then use controller gen and some of the other like deep croppygen and some of those",
    "start": "991620",
    "end": "997019"
  },
  {
    "text": "tools to generate some of the API objects and infrastructure but now like",
    "start": "997019",
    "end": "1003259"
  },
  {
    "text": "Amin said we're at the stage where coup Builder basically has left you you know to implement your own controller so",
    "start": "1003259",
    "end": "1008779"
  },
  {
    "text": "that's where the fun starts for us we need to uh go ahead and",
    "start": "1008779",
    "end": "1014360"
  },
  {
    "text": "develop a translation layer between the kubernetes representation of that",
    "start": "1014360",
    "end": "1019880"
  },
  {
    "text": "resource which is the CR the custom resource and the AWS SDK go",
    "start": "1019880",
    "end": "1025220"
  },
  {
    "text": "representation of that same resource right so much of our controllers are just translating between the kubernetes",
    "start": "1025220",
    "end": "1031280"
  },
  {
    "text": "representation of something and the AWS representation of something as you go ahead and develop your own custom",
    "start": "1031280",
    "end": "1036980"
  },
  {
    "text": "controllers what a lot of times you'll be thinking is there's a back-end integration API and you need to sort of",
    "start": "1036980",
    "end": "1043520"
  },
  {
    "text": "map between representation of in of resources in that back-end API and the",
    "start": "1043520",
    "end": "1049100"
  },
  {
    "text": "kubernetes API so that's a lot of what our controllers are is that translation shim between the kubernetes world and",
    "start": "1049100",
    "end": "1057200"
  },
  {
    "text": "the AWS SDK go world right where we write our controllers and go and so the AWS SDK go is the library that we use",
    "start": "1057200",
    "end": "1064400"
  },
  {
    "text": "for communicating with back-end AWS services",
    "start": "1064400",
    "end": "1069280"
  },
  {
    "text": "um so uh what I want to show here and it's a little difficult to see I understand",
    "start": "1070220",
    "end": "1076820"
  },
  {
    "text": "um you can go download the slides afterwards but all of this code that you see is entirely generated right we have",
    "start": "1076820",
    "end": "1084559"
  },
  {
    "text": "a method in our resource manager interface called SDK find and it",
    "start": "1084559",
    "end": "1091820"
  },
  {
    "text": "essentially Maps between the kubernetes resource and the AWS SDK go resource all",
    "start": "1091820",
    "end": "1098240"
  },
  {
    "text": "the code that you see on the right is incredibly tedious uh code to hand",
    "start": "1098240",
    "end": "1105919"
  },
  {
    "text": "write right it also is extremely error prone if humans are like manually custom",
    "start": "1105919",
    "end": "1112700"
  },
  {
    "text": "like writing this stuff right it's super annoying to read um and that's why we code generate",
    "start": "1112700",
    "end": "1119179"
  },
  {
    "text": "everything that we can um what you see on the right is essentially processing a response an",
    "start": "1119179",
    "end": "1127400"
  },
  {
    "text": "HTTP response from the AWS SDK go finding which field in that response",
    "start": "1127400",
    "end": "1133100"
  },
  {
    "text": "matches the field in the spec or the status of the CR and then setting that value right and it's super annoying to",
    "start": "1133100",
    "end": "1141200"
  },
  {
    "text": "have to handwrite all this kind of stuff trust me we tried first and yeah we said no no way so this is all the kind of",
    "start": "1141200",
    "end": "1148340"
  },
  {
    "text": "code that we generate right which is a large percentage of the controllers",
    "start": "1148340",
    "end": "1153620"
  },
  {
    "text": "right it's just this mapping this this I call it the SDK bind code right you're",
    "start": "1153620",
    "end": "1158840"
  },
  {
    "text": "just binding between SDK resources and custom resources another area that we rely heavily on",
    "start": "1158840",
    "end": "1166940"
  },
  {
    "text": "code generation is determining when a resource has",
    "start": "1166940",
    "end": "1172280"
  },
  {
    "text": "changed right so much of a reconciler much of the reconciliation logic inside",
    "start": "1172280",
    "end": "1177620"
  },
  {
    "text": "any controller is just here's your desired state of resource you have to do",
    "start": "1177620",
    "end": "1183500"
  },
  {
    "text": "a fetch to get the latest observed state of that resource and then determine what's changed right in between",
    "start": "1183500",
    "end": "1190880"
  },
  {
    "text": "you know the the latest observed State and um what you have in your desired state",
    "start": "1190880",
    "end": "1196100"
  },
  {
    "text": "which is coming from the kubernetes API server generating that code that determines",
    "start": "1196100",
    "end": "1202520"
  },
  {
    "text": "which field has changed within a resource um is also very tedious and time",
    "start": "1202520",
    "end": "1208940"
  },
  {
    "text": "consuming which is why we generate all this kind of stuff um so yes you can see all this",
    "start": "1208940",
    "end": "1214299"
  },
  {
    "text": "gobbledygook code that's terrible and hard to read and yes we we generate all",
    "start": "1214299",
    "end": "1220280"
  },
  {
    "text": "this kind of stuff all right do you want to take over this",
    "start": "1220280",
    "end": "1226940"
  },
  {
    "text": "one so one of the functions we also generate",
    "start": "1226940",
    "end": "1231980"
  },
  {
    "text": "is called manager for so what you've seen before the Delta function and the SDK uh client functions are just methods",
    "start": "1231980",
    "end": "1238940"
  },
  {
    "text": "part of an object we call the resource manager and the resource manager is just a ghost track that helps the controller",
    "start": "1238940",
    "end": "1246260"
  },
  {
    "text": "manage resources in the cloud so this object AWS resource manager has all",
    "start": "1246260",
    "end": "1253100"
  },
  {
    "text": "these eight or nine methods it's got instructions on how to read a resource",
    "start": "1253100",
    "end": "1258200"
  },
  {
    "text": "how to create One update one delete one and a bunch of uh other stuff we use to",
    "start": "1258200",
    "end": "1263419"
  },
  {
    "text": "manage the resources at this stage you're wondering about what is the reconciliation",
    "start": "1263419",
    "end": "1271460"
  },
  {
    "text": "um it must be the logic must be somewhere well uh it is in a different",
    "start": "1271460",
    "end": "1276740"
  },
  {
    "text": "package where we write or we wrote a generic uh reconciliation function that",
    "start": "1276740",
    "end": "1283280"
  },
  {
    "text": "takes a resource manager and reconciles that all the time so it doesn't really care what resource are you going to to",
    "start": "1283280",
    "end": "1290000"
  },
  {
    "text": "to handle or to manage in the cloud all it needs is just an interface or like an objects implementing an interface and",
    "start": "1290000",
    "end": "1296120"
  },
  {
    "text": "it's going to use that to reconcile all the resources so every resource that we generate as a controller for has a",
    "start": "1296120",
    "end": "1301760"
  },
  {
    "text": "resource manager and uses the same reconcile function that we use across",
    "start": "1301760",
    "end": "1306799"
  },
  {
    "text": "all the controllers and that that reckon that common run time this ack runtime",
    "start": "1306799",
    "end": "1313640"
  },
  {
    "text": "what it does is makes the reconciliation Logic for all resources and all of the",
    "start": "1313640",
    "end": "1320179"
  },
  {
    "text": "controllers consistent right and that logic is um I mean to simplify it a little bit",
    "start": "1320179",
    "end": "1326720"
  },
  {
    "text": "it's like just you get the resource from the kubernetes API server you determine whether or not",
    "start": "1326720",
    "end": "1332000"
  },
  {
    "text": "it's you know a new resource or whether it's being modified or deleted and all that kind of stuff then you do a call to",
    "start": "1332000",
    "end": "1337700"
  },
  {
    "text": "get that latest observed state for that resource and if you don't find one then you call create if you do find it you",
    "start": "1337700",
    "end": "1344120"
  },
  {
    "text": "call update if there's any changes and that kind of thing so we've just made all of that reconciliation Logic the",
    "start": "1344120",
    "end": "1350480"
  },
  {
    "text": "same for all of the resources um also with that we have a metrics",
    "start": "1350480",
    "end": "1358220"
  },
  {
    "text": "common library that reports metrics to whatever your your tool is used to",
    "start": "1358220",
    "end": "1363559"
  },
  {
    "text": "collect metrics we have also like common error handling Library we have a common utility uh for conditions and we have",
    "start": "1363559",
    "end": "1372380"
  },
  {
    "text": "some common crds that we use across all the controllers for example whenever you want to adopt a resource you use the",
    "start": "1372380",
    "end": "1377960"
  },
  {
    "text": "same crd across all the controllers",
    "start": "1377960",
    "end": "1381940"
  },
  {
    "text": "so yeah I'll let jpipes tell you about some numbers uh sure yeah so we have",
    "start": "1383559",
    "end": "1390919"
  },
  {
    "text": "right now we're we've generated 21 controllers that are actually published",
    "start": "1390919",
    "end": "1397880"
  },
  {
    "text": "um on our our ECR public repository 11 of which are in or maybe it's 12 that",
    "start": "1397880",
    "end": "1403340"
  },
  {
    "text": "are in uh G8 stage we have quite a few more controllers that are up there in our in our GitHub repository that are in",
    "start": "1403340",
    "end": "1410960"
  },
  {
    "text": "the process of being built out by AWS service teams um a huge percentage of the code in those",
    "start": "1410960",
    "end": "1418100"
  },
  {
    "text": "controllers is generated roughly 80 or 98 of the of the code that's in those",
    "start": "1418100",
    "end": "1425360"
  },
  {
    "text": "controllers um well over a million uh lines of",
    "start": "1425360",
    "end": "1430419"
  },
  {
    "text": "generated code in just the controllers that we put together so far",
    "start": "1430419",
    "end": "1435620"
  },
  {
    "text": "um I'd like to add that for for those of you who are familiar",
    "start": "1435620",
    "end": "1441799"
  },
  {
    "text": "with the cross-plane project um the code generator inside ack is",
    "start": "1441799",
    "end": "1447679"
  },
  {
    "text": "actually used to generate the native AWS provider inside crossplane and we we",
    "start": "1447679",
    "end": "1455299"
  },
  {
    "text": "made a decision to try the as best we can to make these",
    "start": "1455299",
    "end": "1461419"
  },
  {
    "text": "code generation tools and utilities that we created for ack to be useful",
    "start": "1461419",
    "end": "1466760"
  },
  {
    "text": "importable and applicable to other projects that are in the sort of controller ecosystem out there our goal",
    "start": "1466760",
    "end": "1474980"
  },
  {
    "text": "is to have these resource managers that we sort of showed you some code for earlier to have those be go packages",
    "start": "1474980",
    "end": "1483080"
  },
  {
    "text": "that can be then imported by cross-plane or terraform right that all they do is",
    "start": "1483080",
    "end": "1489020"
  },
  {
    "text": "just handle appropriately in a very declarative kubernetes-like way",
    "start": "1489020",
    "end": "1494120"
  },
  {
    "text": "the interfacing between the kubernetes universe and the AWS universe and",
    "start": "1494120",
    "end": "1501080"
  },
  {
    "text": "translating between those things so it is our goal not to be like you know only",
    "start": "1501080",
    "end": "1506120"
  },
  {
    "text": "we're only going to do AWS stuff or whatever we want to be a friendly",
    "start": "1506120",
    "end": "1511340"
  },
  {
    "text": "helpful like useful toolkit for all of the other controller based systems out",
    "start": "1511340",
    "end": "1517880"
  },
  {
    "text": "there and yeah we've got lots of image and chart downloads too uh we we have fully",
    "start": "1517880",
    "end": "1525500"
  },
  {
    "text": "automated the process of both building the container images as well as the helm charts so the the ECR public is a",
    "start": "1525500",
    "end": "1533840"
  },
  {
    "text": "registry that can house any oci artifact so we automatically publish we",
    "start": "1533840",
    "end": "1539480"
  },
  {
    "text": "automatically construct the helm chart for a particular controller and all of the yaml manifests that go along with it",
    "start": "1539480",
    "end": "1545419"
  },
  {
    "text": "and publish that to ECR public along with repositories for all of the controller images the container images",
    "start": "1545419",
    "end": "1551600"
  },
  {
    "text": "themselves and also automated all the like olm the",
    "start": "1551600",
    "end": "1557659"
  },
  {
    "text": "operator lifecycle management stuff and Publishing to operator Hub and all that kind of stuff we have a",
    "start": "1557659",
    "end": "1564260"
  },
  {
    "text": "a test infrastructure repository that contains virtually all of our automation",
    "start": "1564260",
    "end": "1570320"
  },
  {
    "text": "um and so if you're interested in I don't know getting some inspiration to automate your own controller building I",
    "start": "1570320",
    "end": "1577159"
  },
  {
    "text": "just want to grab some code that you think will be will be useful uh I have some links at the end of these slides",
    "start": "1577159",
    "end": "1583580"
  },
  {
    "text": "where you can we can go and see and just grab some inspiration or grab the code so",
    "start": "1583580",
    "end": "1589159"
  },
  {
    "text": "and uh for those of you wondering what is the two percent left of the",
    "start": "1589159",
    "end": "1594200"
  },
  {
    "text": "non-generated code the code we wrote uh the reason for that is that the AWS apis",
    "start": "1594200",
    "end": "1599900"
  },
  {
    "text": "are like writing code that generates code that handles a lot of resources across all the AWS Services is almost",
    "start": "1599900",
    "end": "1607460"
  },
  {
    "text": "impossible and sometimes we have to manually write some custom bits of code",
    "start": "1607460",
    "end": "1612740"
  },
  {
    "text": "that will like get injected in some specific places in the SDK or the Delta",
    "start": "1612740",
    "end": "1618200"
  },
  {
    "text": "for example let's say you want to compare a map of a structs of arrays of maps you don't use reflex for that it's",
    "start": "1618200",
    "end": "1624980"
  },
  {
    "text": "very hard to generate code that really will compare to arrays or structs uh or",
    "start": "1624980",
    "end": "1631039"
  },
  {
    "text": "complex structures uh to do that so we sometimes inject some piece of code that's the two percent left our goal is",
    "start": "1631039",
    "end": "1637159"
  },
  {
    "text": "to maybe reach 100 one day yeah that's that's the goal uh generate",
    "start": "1637159",
    "end": "1643279"
  },
  {
    "text": "everything yeah build things that build things that build things",
    "start": "1643279",
    "end": "1648100"
  },
  {
    "text": "all right so we've reached the reached the end of our little presentation here",
    "start": "1651080",
    "end": "1656720"
  },
  {
    "text": "um I want to open the floor up to any questions they might have sir",
    "start": "1656720",
    "end": "1662799"
  },
  {
    "text": "yeah um one thing you notice that it's missing from these slides is any finalizers or child resources for",
    "start": "1662960",
    "end": "1668900"
  },
  {
    "text": "example if I wanted to construct a factory like you did but if you want to what if I wanted to construct a factory",
    "start": "1668900",
    "end": "1674000"
  },
  {
    "text": "like you did right right um but for my own like internal apis but I want to have one resource that owns other",
    "start": "1674000",
    "end": "1680419"
  },
  {
    "text": "resources could you also do that you want to open up the runtime and show where the finalizer is added so in that common ack",
    "start": "1680419",
    "end": "1688279"
  },
  {
    "text": "runtime as part of the reconciliation logic right the reconciliation Loop",
    "start": "1688279",
    "end": "1694760"
  },
  {
    "text": "that's common to all the controllers we the very first thing we do to put the",
    "start": "1694760",
    "end": "1700580"
  },
  {
    "text": "resource under management is add a finalizer to the custom resource right which essentially protects it from being",
    "start": "1700580",
    "end": "1706580"
  },
  {
    "text": "deleted by anything else until we remove that finalizer right",
    "start": "1706580",
    "end": "1711980"
  },
  {
    "text": "um what was the other part of your question child resources right so",
    "start": "1711980",
    "end": "1718880"
  },
  {
    "text": "um we have we have a system called resource references where you can reference a",
    "start": "1718880",
    "end": "1727279"
  },
  {
    "text": "a custom resource from another custom resource and we have this resolve",
    "start": "1727279",
    "end": "1733640"
  },
  {
    "text": "references functionality that will wait to delete or update a parent object",
    "start": "1733640",
    "end": "1740419"
  },
  {
    "text": "until all of its child resources get to one of our conditions is called resource",
    "start": "1740419",
    "end": "1746059"
  },
  {
    "text": "synced and we can we can control how the resource manager sets or determines",
    "start": "1746059",
    "end": "1752900"
  },
  {
    "text": "whether a resource is in resource synced by instructing the code generator okay",
    "start": "1752900",
    "end": "1758480"
  },
  {
    "text": "for dynamodb tables we know that the resource is synced when the status dot",
    "start": "1758480",
    "end": "1766520"
  },
  {
    "text": "status is in active or available like I said they're inconsistent um but yes we can we can control that",
    "start": "1766520",
    "end": "1773419"
  },
  {
    "text": "behavior of how the conditions are handled from One controller to the next with this generator.yaml file",
    "start": "1773419",
    "end": "1781179"
  },
  {
    "text": "and for the finalizer question we have an interface called the AWS resource descriptor where you have is managed uh",
    "start": "1781340",
    "end": "1788600"
  },
  {
    "text": "Mark manage and Mark and manage and behind the scenes those three functions only",
    "start": "1788600",
    "end": "1793760"
  },
  {
    "text": "manipulates final finalizes into your resource",
    "start": "1793760",
    "end": "1798158"
  },
  {
    "text": "so the declarative API usually translate to multiple imperative calls or multiple",
    "start": "1799880",
    "end": "1806179"
  },
  {
    "text": "on the go SDK site yeah so how do we basically enforce that ordering like will",
    "start": "1806179",
    "end": "1812600"
  },
  {
    "text": "controller generator take care of it I wish uh so yeah it's a great question so",
    "start": "1812600",
    "end": "1818299"
  },
  {
    "text": "I mean the question is look the AWS apis are not declarative for the most part right I mean it's a",
    "start": "1818299",
    "end": "1824539"
  },
  {
    "text": "set of imperative API calls right create bucket uh uh put life cycle policy like that that",
    "start": "1824539",
    "end": "1831500"
  },
  {
    "text": "kind of stuff uh it's not the patch and apply type behavior that",
    "start": "1831500",
    "end": "1838039"
  },
  {
    "text": "we've come to expect from kubernetes um for many of the update code paths inside",
    "start": "1838039",
    "end": "1844940"
  },
  {
    "text": "these controllers we can generate most of the code that that goes out and calls",
    "start": "1844940",
    "end": "1851120"
  },
  {
    "text": "these individual imperative API calls but for some of the resources I'm",
    "start": "1851120",
    "end": "1856640"
  },
  {
    "text": "thinking like S3 bucket there's 22 separate API calls for updating bucket attributes",
    "start": "1856640",
    "end": "1863980"
  },
  {
    "text": "say again what is the solution that do we need to order it or",
    "start": "1865520",
    "end": "1870860"
  },
  {
    "text": "um I mean if you're asking like what's the solution specifically for AWS Service",
    "start": "1870860",
    "end": "1876380"
  },
  {
    "text": "apis uh you kind of got to take them one at a time and figure out what the behavior of the back end service is some",
    "start": "1876380",
    "end": "1883399"
  },
  {
    "text": "of the services uh some of the service apis you need to to call various update operations in a",
    "start": "1883399",
    "end": "1892100"
  },
  {
    "text": "specific order and if you don't it gets mad others you can call in parallel you know",
    "start": "1892100",
    "end": "1898820"
  },
  {
    "text": "multiple attribute update apis so it just kind of depends on on the service",
    "start": "1898820",
    "end": "1903860"
  },
  {
    "text": "API we work with individual AWS service teams who know their apis best and you",
    "start": "1903860",
    "end": "1910700"
  },
  {
    "text": "know get advice from their engineering teams of how to uh how to handle",
    "start": "1910700",
    "end": "1916039"
  },
  {
    "text": "behavior of their particular service API oh hi Rob hey Jay",
    "start": "1916039",
    "end": "1923419"
  },
  {
    "text": "um I have a question maybe it'll be dear to your heart with all the code you're generating do you generate tests how do",
    "start": "1923419",
    "end": "1929059"
  },
  {
    "text": "you maintain tests great question and how do you ensure the the generator doesn't change the behavior great",
    "start": "1929059",
    "end": "1935720"
  },
  {
    "text": "question um so right now we have a we have a",
    "start": "1935720",
    "end": "1941419"
  },
  {
    "text": "sort of half and half system we have this thing called controller bootstrap which which will generate all of our our",
    "start": "1941419",
    "end": "1947120"
  },
  {
    "text": "end-to-end tests are written in Python there's a python testing framework and uh our controller bootstrap",
    "start": "1947120",
    "end": "1954080"
  },
  {
    "text": "code generation project generates the basics of that but then it's up to the",
    "start": "1954080",
    "end": "1960020"
  },
  {
    "text": "service team and us to go and write specific end-to-end tests for those resources uh I would I would love to get",
    "start": "1960020",
    "end": "1967700"
  },
  {
    "text": "to a point where we can take a look at the API model definitions like we do for",
    "start": "1967700",
    "end": "1973460"
  },
  {
    "text": "the controller and generate end-to-end tests we're quite a ways away from that",
    "start": "1973460",
    "end": "1980000"
  },
  {
    "text": "Mike um yes do you ever plan to remove your generated code",
    "start": "1980000",
    "end": "1986240"
  },
  {
    "text": "do you ever plan to remove your generated code and have it all in memory",
    "start": "1986240",
    "end": "1992139"
  },
  {
    "text": "our do we do plan to remove the generated code right if you have it all generated",
    "start": "1993200",
    "end": "1999799"
  },
  {
    "text": "can you do it without having to save code files since if 98 of your code is",
    "start": "1999799",
    "end": "2005740"
  },
  {
    "text": "generated can you have to can you do it all dynamically can we do it all by hand dynamically",
    "start": "2005740",
    "end": "2013000"
  },
  {
    "text": "dynamically um maybe it's a non-goal possibly",
    "start": "2013000",
    "end": "2020580"
  },
  {
    "text": "uh I mean if you're if you're asking do do I do I view a future where we're completely co-generated where we can",
    "start": "2021640",
    "end": "2029559"
  },
  {
    "text": "take an API model definition and a generator configuration file",
    "start": "2029559",
    "end": "2036640"
  },
  {
    "text": "and just let it go yeah I can see that future maybe not for",
    "start": "2036640",
    "end": "2044440"
  },
  {
    "text": "the tests right now but certainly for the controller implementation what we do is we look for patterns right of how",
    "start": "2044440",
    "end": "2051220"
  },
  {
    "text": "does the AWS service function in comparison to another one right how does RDS and elastic cache and",
    "start": "2051220",
    "end": "2057878"
  },
  {
    "text": "Amazon mq have they have certain patterns of API usage and we look at that once we identify a pattern then we",
    "start": "2057879",
    "end": "2063760"
  },
  {
    "text": "can write it into the code generator to just generate an implementation for that pattern",
    "start": "2063760",
    "end": "2068858"
  },
  {
    "text": "some of the apis are a little harder to do that for you we have a 100 generated controller is the step functions one",
    "start": "2068859",
    "end": "2075158"
  },
  {
    "text": "yeah uh the literally zero custom coordinate because the API is just very simple and straightforward",
    "start": "2075159",
    "end": "2082540"
  },
  {
    "text": "you probably have time for half a question left and then we can go",
    "start": "2082540",
    "end": "2087540"
  },
  {
    "text": "uh first thank you that's really cool for you guys to share this so we can see like what you're doing uh the question",
    "start": "2088119",
    "end": "2093520"
  },
  {
    "text": "is since you're talking about centralizing a lot of your code and like it looked like you know 20 controllers so far",
    "start": "2093520",
    "end": "2099160"
  },
  {
    "text": "bring it into a library and everything like have you know have you seen a noticeable impact from centralizing that",
    "start": "2099160",
    "end": "2104800"
  },
  {
    "text": "code have you noticed like any sort of reduction in like bugs across all the different controllers or whatnot or yes",
    "start": "2104800",
    "end": "2111640"
  },
  {
    "text": "um yeah we absolutely have um some of our controllers actually started out life as hand built right",
    "start": "2111640",
    "end": "2119920"
  },
  {
    "text": "um like the sagemaker operator I started out life as the kubernetes",
    "start": "2119920",
    "end": "2125260"
  },
  {
    "text": "sagemaker operator something like that um and a whole class of bugs and user pain",
    "start": "2125260",
    "end": "2135780"
  },
  {
    "text": "and inconsistencies just we just wipe that off right because when when you",
    "start": "2135780",
    "end": "2141400"
  },
  {
    "text": "start co-generating everything from a model definition you're not handwriting thing you just kind of remove a whole",
    "start": "2141400",
    "end": "2146940"
  },
  {
    "text": "classification of common failures and bugs so yeah we've definitely seen an",
    "start": "2146940",
    "end": "2152619"
  },
  {
    "text": "improvement in that that's really cool thank you yeah sorry we we do want to give away our Bob",
    "start": "2152619",
    "end": "2161680"
  },
  {
    "text": "the Builder hats and uh well I had a trivia question first",
    "start": "2161680",
    "end": "2168220"
  },
  {
    "text": "one to raise their hand gets it or at least first one raise your hand that I can see okay",
    "start": "2168220",
    "end": "2174760"
  },
  {
    "text": "um so here's the question what is the the name of the code generation tool that generates the runtime object copy",
    "start": "2174760",
    "end": "2183040"
  },
  {
    "text": "and copy into functions for crds",
    "start": "2183040",
    "end": "2187740"
  },
  {
    "text": "no",
    "start": "2190119",
    "end": "2192720"
  },
  {
    "text": "close no the the name of the the the the the",
    "start": "2195160",
    "end": "2202480"
  },
  {
    "text": "the the tool",
    "start": "2202480",
    "end": "2206160"
  },
  {
    "text": "deep copygen is that what you said yes that's it",
    "start": "2210339",
    "end": "2214800"
  },
  {
    "text": "you can gift it then all right and Amin has his questions as well okay next question is from where",
    "start": "2218200",
    "end": "2225579"
  },
  {
    "text": "can you import the shared informal interface",
    "start": "2225579",
    "end": "2230338"
  },
  {
    "text": "yes very good client go [Applause]",
    "start": "2232260",
    "end": "2237339"
  },
  {
    "text": "all right thank you very much appreciate it",
    "start": "2237339",
    "end": "2241619"
  }
]