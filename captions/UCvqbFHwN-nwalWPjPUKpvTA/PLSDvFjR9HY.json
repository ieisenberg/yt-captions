[
  {
    "start": "0",
    "end": "35000"
  },
  {
    "text": "thank you everybody for coming to our session today we're gonna talk about the",
    "start": "0",
    "end": "6420"
  },
  {
    "text": "life of a coronaries watch event so a lot of introduction of ourselves my name",
    "start": "6420",
    "end": "13110"
  },
  {
    "text": "is wenja I work I'm a software engineer working at Google I worked on kubernetes",
    "start": "13110",
    "end": "19740"
  },
  {
    "text": "what API machinery and sed and joining me is highway he is also a software",
    "start": "19740",
    "end": "26250"
  },
  {
    "text": "engineering engineer working on Google he worked on API machinery and client",
    "start": "26250",
    "end": "32219"
  },
  {
    "text": "libraries so this is agenda of our talk",
    "start": "32219",
    "end": "37530"
  },
  {
    "start": "35000",
    "end": "35000"
  },
  {
    "text": "today we will start with talking about what is a community's watch event and",
    "start": "37530",
    "end": "43649"
  },
  {
    "text": "then we'll go over why is it important for kubernetes why do we care and then",
    "start": "43649",
    "end": "49980"
  },
  {
    "text": "after that - we're gonna - going to the most important part of a talk it's gonna",
    "start": "49980",
    "end": "55710"
  },
  {
    "text": "be the longest session about how is the life of communities watch event we're",
    "start": "55710",
    "end": "61800"
  },
  {
    "text": "gonna go down into each component that this watch event is going to go to and",
    "start": "61800",
    "end": "69479"
  },
  {
    "text": "see what's going on with the watch event in the particular components by the end",
    "start": "69479",
    "end": "75420"
  },
  {
    "text": "of the session hopefully everybody could get something useful maybe you could use",
    "start": "75420",
    "end": "81210"
  },
  {
    "text": "watch more efficiently to write your controller or you have a better idea how",
    "start": "81210",
    "end": "86729"
  },
  {
    "text": "to contribute to this part of kubernetes woad all right now the first part what",
    "start": "86729",
    "end": "92820"
  },
  {
    "text": "is the kubernetes watch event let's break it down to smaller parts first",
    "start": "92820",
    "end": "98340"
  },
  {
    "start": "95000",
    "end": "95000"
  },
  {
    "text": "what is a watch we know that kubernetes api is resource based programmable",
    "start": "98340",
    "end": "106380"
  },
  {
    "text": "interface that provided via HTTP so it support all the standard HTTP verbs post",
    "start": "106380",
    "end": "113520"
  },
  {
    "text": "pert patch to lead and get now on top of all that watch is another verb that",
    "start": "113520",
    "end": "119670"
  },
  {
    "text": "makes kubernetes api so special it is this incremental change notification",
    "start": "119670",
    "end": "127740"
  },
  {
    "text": "that is showing the change to the resources and it also consists that",
    "start": "127740",
    "end": "133950"
  },
  {
    "text": "that allow all the other components to cache and synchronize the state of all",
    "start": "133950",
    "end": "139200"
  },
  {
    "text": "the resources so watch establish a",
    "start": "139200",
    "end": "144870"
  },
  {
    "start": "141000",
    "end": "141000"
  },
  {
    "text": "single connection that allow the users to have low in latency feed of the",
    "start": "144870",
    "end": "152880"
  },
  {
    "text": "changes well to explain it more easier I put the poll here you'll always need a",
    "start": "152880",
    "end": "160319"
  },
  {
    "text": "bad guy I mean I talk about superheroes when you say establish polling you have",
    "start": "160319",
    "end": "165690"
  },
  {
    "text": "to establish multiple connections which add on more the actual load actual",
    "start": "165690",
    "end": "171390"
  },
  {
    "text": "agency which could be avoided when you're doing watch I'm not denying that there are a lot of cases where polling",
    "start": "171390",
    "end": "177660"
  },
  {
    "text": "is better than watching but not in the content of today's talk that's a picture I took from yesterday's party the coop",
    "start": "177660",
    "end": "184799"
  },
  {
    "text": "come party is great it's awesome if you're watching the video come to coop car it's great now back to watching poll",
    "start": "184799",
    "end": "192480"
  },
  {
    "text": "we actually have seen this good example showing the difference before API server",
    "start": "192480",
    "end": "199709"
  },
  {
    "text": "periodically poled the secret and config maps with the change in that PR we",
    "start": "199709",
    "end": "206820"
  },
  {
    "text": "changed the polling into watching in the performance increase a hundred times now",
    "start": "206820",
    "end": "213720"
  },
  {
    "start": "213000",
    "end": "213000"
  },
  {
    "text": "we talked about the watch then what is the event we got out of the watch event",
    "start": "213720",
    "end": "220140"
  },
  {
    "text": "a single change to a watch the resource it contain the resource object itself as",
    "start": "220140",
    "end": "226769"
  },
  {
    "text": "well as the change type or event type there are some examples adding a pot",
    "start": "226769",
    "end": "232500"
  },
  {
    "text": "could be event or modifying replica set or deleting a note right now we have the",
    "start": "232500",
    "end": "240510"
  },
  {
    "text": "definition let's talk about why do we worry is it important for communities",
    "start": "240510",
    "end": "247939"
  },
  {
    "start": "247000",
    "end": "247000"
  },
  {
    "text": "let's see one of the most important criminales core design concept level",
    "start": "248030",
    "end": "254010"
  },
  {
    "text": "triggering and soft reconciliation so in kubernetes everything is a",
    "start": "254010",
    "end": "260400"
  },
  {
    "start": "257000",
    "end": "257000"
  },
  {
    "text": "declarative configuration object that represents the desire state of the",
    "start": "260400",
    "end": "266250"
  },
  {
    "text": "resource in this kubernetes job to watch all the changes and make sure the actual state",
    "start": "266250",
    "end": "273300"
  },
  {
    "text": "of the world would eventually get to the desired state right it's very forgiving",
    "start": "273300",
    "end": "278849"
  },
  {
    "text": "of what's happening in between in that's why communities is self-healing and",
    "start": "278849",
    "end": "285210"
  },
  {
    "text": "works so well I actually start to apply this concept to my kids I'm instead of",
    "start": "285210",
    "end": "292139"
  },
  {
    "text": "doing edge triggering I do level triggering a lot of things happening between us forgiving life is a lot",
    "start": "292139",
    "end": "297960"
  },
  {
    "text": "happier now why is watch event important in this",
    "start": "297960",
    "end": "305159"
  },
  {
    "start": "300000",
    "end": "300000"
  },
  {
    "text": "extra state to desire state transition say if we have a person we want this",
    "start": "305159",
    "end": "312180"
  },
  {
    "text": "person to be at state of happy and strong confident how do we get that",
    "start": "312180",
    "end": "318000"
  },
  {
    "text": "person to that state I say status accumulation of events from the first",
    "start": "318000",
    "end": "324030"
  },
  {
    "text": "day that person was born probably one of the most important event that happens to",
    "start": "324030",
    "end": "329069"
  },
  {
    "text": "a person it's not the state yet so something happened to that person maybe",
    "start": "329069",
    "end": "335159"
  },
  {
    "text": "it played volleyball and win a championship the state of person is modified later on I got the automa maybe",
    "start": "335159",
    "end": "343169"
  },
  {
    "text": "some other events happen to that person you eventually get to that state in the same concept apply to a pot if you have",
    "start": "343169",
    "end": "351300"
  },
  {
    "text": "a pot with a desired state you could have a lot of events happen to that pot",
    "start": "351300",
    "end": "357800"
  },
  {
    "text": "when the replica controller created that pod it's like the first day that person",
    "start": "357800",
    "end": "364080"
  },
  {
    "text": "is born and to later on you add some labels like when the person won the",
    "start": "364080",
    "end": "370560"
  },
  {
    "text": "championship and an image change image version change to that pod and a lot of",
    "start": "370560",
    "end": "376440"
  },
  {
    "text": "other events eventually the pot get to the state so if you watch the change",
    "start": "376440",
    "end": "382830"
  },
  {
    "text": "carefully coronaries could have everything under control efficiently now",
    "start": "382830",
    "end": "390599"
  },
  {
    "text": "we know what and why let's talk about how is the life of communities watch",
    "start": "390599",
    "end": "396899"
  },
  {
    "text": "event one of the most important concept yet",
    "start": "396899",
    "end": "403110"
  },
  {
    "start": "398000",
    "end": "398000"
  },
  {
    "text": "that could help you understand the life of corn at ease watch event is resource",
    "start": "403110",
    "end": "408120"
  },
  {
    "text": "version if you don't already know everything every crew Nettie's object",
    "start": "408120",
    "end": "414330"
  },
  {
    "text": "have resource version field that represent the version of the object",
    "start": "414330",
    "end": "420020"
  },
  {
    "text": "let's say them in another way so it's like a fingerprints that differentiate",
    "start": "420020",
    "end": "425550"
  },
  {
    "text": "this object in a specific version so there are two dimensions object and",
    "start": "425550",
    "end": "431100"
  },
  {
    "text": "version this is a diagram showing the relationship of resource version and",
    "start": "431100",
    "end": "437580"
  },
  {
    "start": "432000",
    "end": "432000"
  },
  {
    "text": "object so in the kubernetes system you could have a lot of objects pods replica sets nodes and so on and for each",
    "start": "437580",
    "end": "445710"
  },
  {
    "text": "particular object there could be a lots of events happening to it every time",
    "start": "445710",
    "end": "451380"
  },
  {
    "text": "event happened to the resource every time the resource ridden there is",
    "start": "451380",
    "end": "456680"
  },
  {
    "text": "resource new briefer source version created and the parrot to that pot that",
    "start": "456680",
    "end": "463860"
  },
  {
    "text": "object now let's just focus on this pot and ignore all the other stuff hey",
    "start": "463860",
    "end": "472170"
  },
  {
    "start": "471000",
    "end": "471000"
  },
  {
    "text": "that's the happy and strong confident pub we just talked about so now in this",
    "start": "472170",
    "end": "478710"
  },
  {
    "text": "graph that's putting the resource version at first the reefer source version say it's five one nine and then",
    "start": "478710",
    "end": "486210"
  },
  {
    "text": "later on when the pot is modified change to six zero three and they keep changing",
    "start": "486210",
    "end": "491640"
  },
  {
    "text": "it's like you're not the same you as your last year last month I'm not the",
    "start": "491640",
    "end": "497940"
  },
  {
    "text": "same as yesterday be excited give this talk this event changed me right my talk",
    "start": "497940",
    "end": "503910"
  },
  {
    "text": "is getting deep now among all this events let's look at this specific one",
    "start": "503910",
    "end": "511760"
  },
  {
    "text": "pot added with a resource version of five one nine let's focus on this one and go on an adventure with it and see",
    "start": "511760",
    "end": "518969"
  },
  {
    "text": "what's going on in the coronaries world so I'll first give you a quick overview",
    "start": "518970",
    "end": "526410"
  },
  {
    "start": "522000",
    "end": "522000"
  },
  {
    "text": "of all the components that it will go to if we see the footprints first and then",
    "start": "526410",
    "end": "532410"
  },
  {
    "text": "we'll go into each components for details this is an event that we want to",
    "start": "532410",
    "end": "538379"
  },
  {
    "text": "take a look and then who are the parties who care about this event who want to watch this event a couple of them come",
    "start": "538379",
    "end": "546209"
  },
  {
    "text": "to my mind schedulers job is to schedule the part of note so I bet they want to",
    "start": "546209",
    "end": "553079"
  },
  {
    "text": "watch the event of pot then controller manager is one of those who is",
    "start": "553079",
    "end": "560490"
  },
  {
    "text": "interested watching the event and there other than the system controllers there",
    "start": "560490",
    "end": "565709"
  },
  {
    "text": "are maybe some a lot some other customer controller who have different business",
    "start": "565709",
    "end": "571920"
  },
  {
    "text": "logic but eventually they want to watch this event so this is the destination of",
    "start": "571920",
    "end": "577379"
  },
  {
    "text": "this event and let's go back to the very beginning where it started so when the",
    "start": "577379",
    "end": "584430"
  },
  {
    "text": "pot is created your first store at the sed which is the data store for",
    "start": "584430",
    "end": "590519"
  },
  {
    "text": "kubernetes control plane and then it goes from a CD it goes to API server and",
    "start": "590519",
    "end": "598350"
  },
  {
    "text": "then goes to client go eventually from clang go could go to all the clients who",
    "start": "598350",
    "end": "604680"
  },
  {
    "text": "is interested in this watch event alright with that overview let's go into",
    "start": "604680",
    "end": "611550"
  },
  {
    "text": "each component and see more details watch event in a CD LCD is distributed",
    "start": "611550",
    "end": "619410"
  },
  {
    "start": "617000",
    "end": "617000"
  },
  {
    "text": "key-value store for kubernetes it for coronaries control plan and then it",
    "start": "619410",
    "end": "626790"
  },
  {
    "text": "implements this watch feature that which provided the event based interface for",
    "start": "626790",
    "end": "633449"
  },
  {
    "text": "asynchronously monitoring change to keys so everytime when there is some change happen to a key the Watchers get",
    "start": "633449",
    "end": "640620"
  },
  {
    "text": "notified which is exactly what the communities need and in a CD there is",
    "start": "640620",
    "end": "645839"
  },
  {
    "text": "this concept revision which maps to the resource version we just talked about in API server so this is the diagram",
    "start": "645839",
    "end": "654959"
  },
  {
    "text": "showing the wasp watch stream between a city and its client it's a binder that bi-directional stream",
    "start": "654959",
    "end": "663259"
  },
  {
    "text": "so the client could right to the stream to establish watch",
    "start": "663259",
    "end": "669260"
  },
  {
    "text": "and on the other direction it get the watch event and in the kubernetes",
    "start": "669260",
    "end": "677960"
  },
  {
    "text": "control plan the client of a CBS API server which leads to the next component",
    "start": "677960",
    "end": "684790"
  },
  {
    "text": "API server now this is a tongue twister slide I've already simplified it down to",
    "start": "684790",
    "end": "692960"
  },
  {
    "start": "687000",
    "end": "687000"
  },
  {
    "text": "three components if you read the source code it's like all the possible combination of cache and watch the two",
    "start": "692960",
    "end": "699680"
  },
  {
    "text": "words a lot of fun read it so the first component as any watcher from the name",
    "start": "699680",
    "end": "706250"
  },
  {
    "text": "you can get the idea it get the event from a CD and bang API server and have",
    "start": "706250",
    "end": "712520"
  },
  {
    "text": "some extra process going on including flow control and transformation of it at",
    "start": "712520",
    "end": "718640"
  },
  {
    "text": "CDs three events two API server events after that it goes in to watch cache",
    "start": "718640",
    "end": "726560"
  },
  {
    "text": "which is probably the one of the most important components api server that is",
    "start": "726560",
    "end": "731590"
  },
  {
    "text": "responsible for watch in cash I'm sorry watch in lists so it contains cash and",
    "start": "731590",
    "end": "739310"
  },
  {
    "text": "store cash is basically a circular buffer and store is just an interface",
    "start": "739310",
    "end": "744890"
  },
  {
    "text": "that connect to the underneath bailiffs or so what's going on is when you have",
    "start": "744890",
    "end": "752420"
  },
  {
    "text": "an event coming it's written in the cache and the circular cache of course",
    "start": "752420",
    "end": "758390"
  },
  {
    "text": "have a limited capacity when that capacity is reached it will like the new",
    "start": "758390",
    "end": "764510"
  },
  {
    "text": "events will be written on the top of the oldest one and then when you do the watch you watch on was starting from a",
    "start": "764510",
    "end": "772250"
  },
  {
    "text": "specific resource version if the resource version is doing the cache it start watching everything happened after",
    "start": "772250",
    "end": "779360"
  },
  {
    "text": "that if the resource version is too old not in the cache anymore it do the list",
    "start": "779360",
    "end": "785720"
  },
  {
    "text": "and get the status from the store and then start watching from that point on",
    "start": "785720",
    "end": "792520"
  },
  {
    "text": "after that component is a bunch of Watchers for each different clients",
    "start": "792520",
    "end": "798750"
  },
  {
    "text": "this is simpler than the previous party just serve the events choose the clients",
    "start": "798750",
    "end": "804410"
  },
  {
    "text": "now let's pass this to Holly thank you",
    "start": "804410",
    "end": "809550"
  },
  {
    "text": "ones yeah so let's have which events",
    "start": "809550",
    "end": "815820"
  },
  {
    "text": "continue their journey after dispatched from cube API server the next table also",
    "start": "815820",
    "end": "822660"
  },
  {
    "text": "known as the destination of what event is individual client also more of the",
    "start": "822660",
    "end": "829350"
  },
  {
    "text": "time interview controllers this is where Glencoe counts take place to do the",
    "start": "829350",
    "end": "835110"
  },
  {
    "text": "delivery so what is client go Franco is",
    "start": "835110",
    "end": "840420"
  },
  {
    "start": "837000",
    "end": "837000"
  },
  {
    "text": "a credit package that contains multiple goal and client libraries that's used",
    "start": "840420",
    "end": "846660"
  },
  {
    "text": "for talking to a kubernetes cluster subsequently talking to you Korea's API server to those who are familiar with",
    "start": "846660",
    "end": "854460"
  },
  {
    "text": "Clank oh let's take a quick look at some basic functionality it provides we have",
    "start": "854460",
    "end": "861210"
  },
  {
    "text": "the client set which which contains typed clients for talking to a specific",
    "start": "861210",
    "end": "867570"
  },
  {
    "text": "current list API kind you can do it with",
    "start": "867570",
    "end": "872930"
  },
  {
    "text": "type safety guarantee and portable of sterilization McClinton for efficiency",
    "start": "872930",
    "end": "879380"
  },
  {
    "text": "we have the dynamic client which is a flexible interface for talking to",
    "start": "879380",
    "end": "884640"
  },
  {
    "text": "multiple currency via kind within a single client we also have the rest",
    "start": "884640",
    "end": "890070"
  },
  {
    "text": "client which is the underlying interface for both client-side and dynamic client",
    "start": "890070",
    "end": "896690"
  },
  {
    "text": "clinco was initially developed for kubernetes internal use it's exported as",
    "start": "896690",
    "end": "903839"
  },
  {
    "text": "a single package for developers to extend create api for their own purpose",
    "start": "903839",
    "end": "910880"
  },
  {
    "text": "that's a quick overview of some basic capability of client go but that's not",
    "start": "910880",
    "end": "917339"
  },
  {
    "text": "our focus today when we talk about which events there's one component set hike",
    "start": "917339",
    "end": "924000"
  },
  {
    "start": "921000",
    "end": "921000"
  },
  {
    "text": "just cannot give to mention which is the informer component so what is the",
    "start": "924000",
    "end": "929700"
  },
  {
    "text": "informer infirmaries a useful Kamel developed for building event",
    "start": "929700",
    "end": "935470"
  },
  {
    "text": "oriented controllers it is used by control plane controllers such as",
    "start": "935470",
    "end": "942670"
  },
  {
    "text": "scheduler our node agent cubelet and etc",
    "start": "942670",
    "end": "949320"
  },
  {
    "text": "the main components of a Informer includes a reflector which watched and",
    "start": "949320",
    "end": "957310"
  },
  {
    "text": "lists upstream API multiple callback functions that dispatched notation to",
    "start": "957310",
    "end": "964510"
  },
  {
    "text": "downstream work queue and two layers of cache or sometimes called stores in",
    "start": "964510",
    "end": "971170"
  },
  {
    "text": "between the two layers of cache serves different purpose and has some",
    "start": "971170",
    "end": "976900"
  },
  {
    "text": "interesting attributes we will come back to them later in detail okay so let's",
    "start": "976900",
    "end": "984610"
  },
  {
    "start": "982000",
    "end": "982000"
  },
  {
    "text": "take a look at general crew net controller workflow level triggering and",
    "start": "984610",
    "end": "990760"
  },
  {
    "text": "software constellation is a big concept in kubernetes a controller speaks with",
    "start": "990760",
    "end": "998410"
  },
  {
    "text": "cube API server constantly reads the current state of the cluster and drives",
    "start": "998410",
    "end": "1006210"
  },
  {
    "text": "the current state to its desired state by sending requests if we take a closer",
    "start": "1006210",
    "end": "1013980"
  },
  {
    "text": "look to some of the building controllers in Carreras you will find that we can",
    "start": "1013980",
    "end": "1021980"
  },
  {
    "text": "logically split a controller into two parts clinical component works as a",
    "start": "1021980",
    "end": "1029970"
  },
  {
    "text": "template and controller specific business logic that facing the template",
    "start": "1029970",
    "end": "1036740"
  },
  {
    "text": "inside of a controller in former constantly watched changed for the for a",
    "start": "1036740",
    "end": "1045630"
  },
  {
    "text": "specific API client within a controller a reflector does a",
    "start": "1045630",
    "end": "1053870"
  },
  {
    "text": "initial list of the API kind and constantly watch following change for",
    "start": "1053870",
    "end": "1062480"
  },
  {
    "text": "example we we had the part that which I",
    "start": "1062480",
    "end": "1067640"
  },
  {
    "text": "mentioned before that continuous journey from a PI server to kind the first step",
    "start": "1067640",
    "end": "1073640"
  },
  {
    "text": "is to get through the reflector after that every watch event gets piped to a",
    "start": "1073640",
    "end": "1080570"
  },
  {
    "text": "Delta Pi for queue which then trigger callback function a added event triggers",
    "start": "1080570",
    "end": "1090860"
  },
  {
    "text": "around that function the updates event triggers an update function the callback",
    "start": "1090860",
    "end": "1097279"
  },
  {
    "text": "functions are registered by controller authors with their controller specific",
    "start": "1097279",
    "end": "1103070"
  },
  {
    "text": "business logic so basically the life cycle of a watch event ends here the",
    "start": "1103070",
    "end": "1110360"
  },
  {
    "text": "changing at C D is represented by a watch event and gets delivered across",
    "start": "1110360",
    "end": "1118419"
  },
  {
    "text": "multiple components from API server and client go and get to a controller",
    "start": "1118419",
    "end": "1124340"
  },
  {
    "text": "trigger some controller specific business logic but let me just give you",
    "start": "1124340",
    "end": "1130909"
  },
  {
    "text": "a little bit more background about what code was going on afterwards to tell a more complete story when controller",
    "start": "1130909",
    "end": "1140000"
  },
  {
    "text": "would say event usually it wants to react to it clinical provides a useful package",
    "start": "1140000",
    "end": "1146600"
  },
  {
    "text": "called work use that helps controller to do the reaction more efficient and more",
    "start": "1146600",
    "end": "1152059"
  },
  {
    "text": "safe the walk you basically inside of",
    "start": "1152059",
    "end": "1159950"
  },
  {
    "text": "the callback function the controller can add items to the work queue for it to",
    "start": "1159950",
    "end": "1167090"
  },
  {
    "text": "get process process later the work here has a few interesting attributes first",
    "start": "1167090",
    "end": "1174620"
  },
  {
    "text": "allows the controllers to bring up multiple workers that process at him",
    "start": "1174620",
    "end": "1179899"
  },
  {
    "text": "concurrently so it's more efficient and it guarantees that a single item",
    "start": "1179899",
    "end": "1185290"
  },
  {
    "text": "only get processed once again sometimes",
    "start": "1185290",
    "end": "1191380"
  },
  {
    "text": "say controller may want to have multiple process that writes to a work queue the",
    "start": "1191380",
    "end": "1196390"
  },
  {
    "text": "worker guarantees that the same item only gets added to it once most of time",
    "start": "1196390",
    "end": "1206700"
  },
  {
    "text": "the controller business logic do not just evaluate a single change inside of the cluster it also sometimes needs to",
    "start": "1206700",
    "end": "1213930"
  },
  {
    "text": "read the entire have a big picture of what the current state of the whole",
    "start": "1213930",
    "end": "1219250"
  },
  {
    "text": "cluster my Informer has a local cache",
    "start": "1219250",
    "end": "1225880"
  },
  {
    "text": "for that purpose every watch event inside of their top level queue gets",
    "start": "1225880",
    "end": "1231670"
  },
  {
    "text": "accumulated into a local cache to reflect the current state of the cluster",
    "start": "1231670",
    "end": "1237870"
  },
  {
    "text": "for example say we previously watched the create event for part one and we",
    "start": "1237870",
    "end": "1245020"
  },
  {
    "text": "store it instead of the local cache resource portion cuts through one nine one five one nine we have its back and",
    "start": "1245020",
    "end": "1252570"
  },
  {
    "text": "now we have watched just another updated event for the same part instead of keep",
    "start": "1252570",
    "end": "1259810"
  },
  {
    "text": "to copy off part instead local cache Lokesh reflects the change saves this",
    "start": "1259810",
    "end": "1268420"
  },
  {
    "text": "new resource version and post back in its cache every facts the current state",
    "start": "1268420",
    "end": "1275320"
  },
  {
    "text": "of the cluster this outs this allows controller specific map business logic",
    "start": "1275320",
    "end": "1283240"
  },
  {
    "text": "to not hurry API server but using the cache to get the current state of",
    "start": "1283240",
    "end": "1289540"
  },
  {
    "text": "cluster so it's more efficient after processing the changing subclass",
    "start": "1289540",
    "end": "1298210"
  },
  {
    "text": "or a consumer wants to send request fukube a customer to drive the current",
    "start": "1298210",
    "end": "1303730"
  },
  {
    "text": "state to its desired state the controller can use clients libraries",
    "start": "1303730",
    "end": "1309190"
  },
  {
    "text": "that client go offers that we've just mentioned before to do that okay as a",
    "start": "1309190",
    "end": "1315549"
  },
  {
    "text": "recap the watch event lifecycle basically ends in the black box so why",
    "start": "1315549",
    "end": "1322450"
  },
  {
    "text": "is sim former trustworthy in delivery of watchbands I mean can we miss the",
    "start": "1322450",
    "end": "1328419"
  },
  {
    "text": "watchband somehow how does the individual work event accumulates to reflect the current",
    "start": "1328419",
    "end": "1335080"
  },
  {
    "text": "state in South Korea ladies let's take a closer look in the list and watch",
    "start": "1335080",
    "end": "1340929"
  },
  {
    "text": "function instead of reflect go reflect herself so this is a pseudo code of",
    "start": "1340929",
    "end": "1346659"
  },
  {
    "start": "1343000",
    "end": "1343000"
  },
  {
    "text": "lists and watch function in self-worth reflector when a reflector gets created",
    "start": "1346659",
    "end": "1352059"
  },
  {
    "text": "it takes a list watch her which is an interface that can do lists and watch",
    "start": "1352059",
    "end": "1358299"
  },
  {
    "text": "requests for a specific API climb the",
    "start": "1358299",
    "end": "1364239"
  },
  {
    "text": "roof actors does a list request to a PI server and gets a list of the object objects the list object gets piped to",
    "start": "1364239",
    "end": "1373509"
  },
  {
    "text": "the theatre Q Delta Pi pool cue and triggers long add on updated until it",
    "start": "1373509",
    "end": "1381989"
  },
  {
    "text": "public functions okay of course if you just create a Informer with empty cache",
    "start": "1381989",
    "end": "1390450"
  },
  {
    "text": "the other objects listed are new to the Informer so they were all trigger Uncle",
    "start": "1390450",
    "end": "1398109"
  },
  {
    "text": "add functions but we will see some different case later here we just",
    "start": "1398109",
    "end": "1405399"
  },
  {
    "text": "extract the actual resource version we just listed with the announced terminating full loop the reflector",
    "start": "1405399",
    "end": "1413649"
  },
  {
    "text": "tries to open a watch connection with the latest resource version if we hit",
    "start": "1413649",
    "end": "1419409"
  },
  {
    "text": "her anger and narrow we validate the arrow and see if we need to restore",
    "start": "1419409",
    "end": "1424720"
  },
  {
    "text": "from a list if the API server is not responsive and returns a connection",
    "start": "1424720",
    "end": "1432370"
  },
  {
    "text": "refused the error most likely it doesn't",
    "start": "1432370",
    "end": "1439900"
  },
  {
    "text": "worse restart from list list because most likely will end up restart watch",
    "start": "1439900",
    "end": "1446830"
  },
  {
    "text": "from with what we just watched so here we sleep for one second and rich and",
    "start": "1446830",
    "end": "1453539"
  },
  {
    "text": "continue to try the word open water connection advice either watch closed",
    "start": "1453539",
    "end": "1461110"
  },
  {
    "text": "normally or we hear some unexpected error and we lock the area and return the reflector will restart from list at",
    "start": "1461110",
    "end": "1469929"
  },
  {
    "text": "the beginning the two layers of cache has this interesting attributes that",
    "start": "1469929",
    "end": "1476280"
  },
  {
    "text": "when the reflector triggers are released it compares listed objects with what's",
    "start": "1476280",
    "end": "1484090"
  },
  {
    "text": "inside of its local cache and triggers",
    "start": "1484090",
    "end": "1489720"
  },
  {
    "text": "an ad function for new listed objects that didn't exist in the local cache an",
    "start": "1489720",
    "end": "1497440"
  },
  {
    "text": "update function for those objects already exists but changed until it",
    "start": "1497440",
    "end": "1502480"
  },
  {
    "text": "event until it Quebec functions for those who used to be inside of local",
    "start": "1502480",
    "end": "1508809"
  },
  {
    "text": "cache but didn't exist in the list objects in this way Informer recovers",
    "start": "1508809",
    "end": "1516070"
  },
  {
    "text": "from broken watch and the controller",
    "start": "1516070",
    "end": "1522039"
  },
  {
    "text": "specific business logic doesn't even notice that and can continue without",
    "start": "1522039",
    "end": "1527919"
  },
  {
    "text": "crashing after that we have a watch handler which and those watch events",
    "start": "1527919",
    "end": "1534429"
  },
  {
    "text": "coming from the open to which fashion and again the same principle applies if",
    "start": "1534429",
    "end": "1542080"
  },
  {
    "text": "we have a broken watch inside of a watch handler the refactor will restart a list",
    "start": "1542080",
    "end": "1548559"
  },
  {
    "text": "and recover so it's in it's important to understand",
    "start": "1548559",
    "end": "1555520"
  },
  {
    "start": "1550000",
    "end": "1550000"
  },
  {
    "text": "how kubernetes use the resource version to keep API server and clients",
    "start": "1555520",
    "end": "1561520"
  },
  {
    "text": "up-to-date during communication as which I mentioned before a recent version is like a fingerprint of a query object so",
    "start": "1561520",
    "end": "1569980"
  },
  {
    "text": "let's have a recap of how resource person takes place in which bets",
    "start": "1569980",
    "end": "1575340"
  },
  {
    "start": "1570000",
    "end": "1570000"
  },
  {
    "text": "basically everything has a resource version individual API object as a",
    "start": "1575340",
    "end": "1580780"
  },
  {
    "text": "resource version will get one for example pod will get a poly you get a resource version it's metadata for this",
    "start": "1580780",
    "end": "1588070"
  },
  {
    "text": "topic have objects there's a top-level resource version for the entire list and",
    "start": "1588070",
    "end": "1594270"
  },
  {
    "text": "each API object in its items has a resource version for itself the resource",
    "start": "1594270",
    "end": "1600550"
  },
  {
    "text": "version of the top-level list is what should be used when you start watch to",
    "start": "1600550",
    "end": "1605710"
  },
  {
    "text": "observe events occurring after that list you can specify resolution in less than",
    "start": "1605710",
    "end": "1612370"
  },
  {
    "text": "watch requests both lists and watch are handled by the same endpoint in API",
    "start": "1612370",
    "end": "1618370"
  },
  {
    "text": "servers so you use this option for post case to specify the recent version for a",
    "start": "1618370",
    "end": "1624730"
  },
  {
    "text": "list request if you don't specify the resolution it has server will query at CD to get the object list if you specify",
    "start": "1624730",
    "end": "1633100"
  },
  {
    "text": "resource person greater than zero API server will actually wait for its cash to get synced with EDD to make sure",
    "start": "1633100",
    "end": "1640990"
  },
  {
    "text": "the result is at least as fresh as given resource version if you specify resource",
    "start": "1640990",
    "end": "1646900"
  },
  {
    "text": "person equals to zero if you have super won't curiosity instead return whatever",
    "start": "1646900",
    "end": "1652660"
  },
  {
    "text": "objects instead of its cache note that API server cache the objects",
    "start": "1652660",
    "end": "1659740"
  },
  {
    "text": "it gets its read from a CD which means the castle cache can be actually lacking",
    "start": "1659740",
    "end": "1666430"
  },
  {
    "text": "the kind of what instead of a CD when",
    "start": "1666430",
    "end": "1671890"
  },
  {
    "text": "you pass in a scenario sometimes the cache of some API server",
    "start": "1671890",
    "end": "1680290"
  },
  {
    "text": "may can be more up-to-date than others so when inspired by resourceful equal to",
    "start": "1680290",
    "end": "1686870"
  },
  {
    "text": "zero it indicates that you are willing to get data from a arbitrary style cache",
    "start": "1686870",
    "end": "1696650"
  },
  {
    "text": "so make sure that your component can tolerant to use that and for which",
    "start": "1696650",
    "end": "1702080"
  },
  {
    "text": "request if you don't specify resource version the result will be which events starting from random time point if the",
    "start": "1702080",
    "end": "1709220"
  },
  {
    "text": "resource version zero the result will be an event for every existing objects in the cache and change occur after that",
    "start": "1709220",
    "end": "1717140"
  },
  {
    "text": "which was established the best practice is always specify the latest watched",
    "start": "1717140",
    "end": "1723760"
  },
  {
    "text": "and/or list results version so now we have a basic understanding of how which",
    "start": "1723760",
    "end": "1732470"
  },
  {
    "text": "events lifecycle looks like and how us controller rely on and react to watch",
    "start": "1732470",
    "end": "1739610"
  },
  {
    "text": "events let's have some more real example about how it works remember that a",
    "start": "1739610",
    "end": "1748060"
  },
  {
    "text": "controller can be composed by two parts the client go as a template to deliver",
    "start": "1748060",
    "end": "1756050"
  },
  {
    "text": "the event from Exedy to your controller and the red part is your controllers",
    "start": "1756050",
    "end": "1761720"
  },
  {
    "text": "specific business logic so let's do the name from Korea's culture player and",
    "start": "1761720",
    "end": "1767180"
  },
  {
    "text": "build a mini schedule guess what it does is schedule your pot on three nodes so",
    "start": "1767180",
    "end": "1774950"
  },
  {
    "text": "let's build this controller what do we need we probably want to know what part",
    "start": "1774950",
    "end": "1781760"
  },
  {
    "text": "are there in the cluster we probably want to know what nodes are here in cluster so let's have a node Informer in",
    "start": "1781760",
    "end": "1789020"
  },
  {
    "text": "the poly Informer instead of controller remember that we need to register some",
    "start": "1789020",
    "end": "1798250"
  },
  {
    "text": "callback function to get notified of the rip watch events so let's do this we add",
    "start": "1799510",
    "end": "1806510"
  },
  {
    "start": "1804000",
    "end": "1804000"
  },
  {
    "text": "a event handlers at future resource event and if the pot event which meant",
    "start": "1806510",
    "end": "1815750"
  },
  {
    "text": "returned from poly informer is a how's that schedule it's great we just",
    "start": "1815750",
    "end": "1820820"
  },
  {
    "text": "keep it in cash and for the left bottom",
    "start": "1820820",
    "end": "1827030"
  },
  {
    "text": "part you cannot see the last part but it's okay I'm zoomed in for it's either",
    "start": "1827030",
    "end": "1835130"
  },
  {
    "text": "to render here but nothing surprising going out here for a unscheduled pod we",
    "start": "1835130",
    "end": "1841430"
  },
  {
    "text": "added it to a schedule cue that we want to process later and same thing with the four node we have a node cache basically",
    "start": "1841430",
    "end": "1850490"
  },
  {
    "text": "that's what you need you can evaluate a pod compare with or the nodes you you have and see if there's any candidate",
    "start": "1850490",
    "end": "1858020"
  },
  {
    "text": "that has enough resources for the pod to be scheduled down the node and Romeo",
    "start": "1858020",
    "end": "1863330"
  },
  {
    "text": "workload so we are down great right guess what the real group schedule is",
    "start": "1863330",
    "end": "1872240"
  },
  {
    "start": "1869000",
    "end": "1869000"
  },
  {
    "text": "way more complicated and the mini scheduler that we just build if you take a look at the source code of the",
    "start": "1872240",
    "end": "1878360"
  },
  {
    "text": "scheduler it has ten informer for ten different API kinds in kubernetes that's",
    "start": "1878360",
    "end": "1886100"
  },
  {
    "text": "all it needs to have the information to make sure that a pod can fit on the node",
    "start": "1886100",
    "end": "1893630"
  },
  {
    "text": "and run your workload successfully can",
    "start": "1893630",
    "end": "1898760"
  },
  {
    "text": "you mentally how scheduler can do this kind of the information processing",
    "start": "1898760",
    "end": "1904250"
  },
  {
    "text": "without watch events alternatively we can send list request fukui API server",
    "start": "1904250",
    "end": "1911450"
  },
  {
    "text": "and pulling periodically but like every",
    "start": "1911450",
    "end": "1917600"
  },
  {
    "text": "one second five second and do the serialization deserialization encoding decoding and depending on the size of",
    "start": "1917600",
    "end": "1924470"
  },
  {
    "text": "the API object in the cluster it just won't scale right but with watch",
    "start": "1924470",
    "end": "1932630"
  },
  {
    "text": "events we can't with this efficient okay key takeaways so in summary a koreas",
    "start": "1932630",
    "end": "1940460"
  },
  {
    "text": "watch event is a efficient resource change notification which meant is the key to commence the label triggering and",
    "start": "1940460",
    "end": "1947000"
  },
  {
    "text": "software conciliation which went is trust water and fish and if you are trying to write a",
    "start": "1947000",
    "end": "1952670"
  },
  {
    "text": "controller you can use the informal component it's built for it it's",
    "start": "1952670",
    "end": "1957830"
  },
  {
    "text": "developed for build event oriented controllers and helps you to not make",
    "start": "1957830",
    "end": "1963500"
  },
  {
    "text": "methods watch thanks for joining us today we hope that you've enjoyed cube",
    "start": "1963500",
    "end": "1970580"
  },
  {
    "text": "come and enjoy Seattle any questions [Applause]",
    "start": "1970580",
    "end": "1981390"
  }
]