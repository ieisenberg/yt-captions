[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "alright let me quickly calibrate the",
    "start": "30",
    "end": "3030"
  },
  {
    "text": "room who here can raise their hands",
    "start": "3030",
    "end": "5220"
  },
  {
    "text": "please raise your hand alright thank you",
    "start": "5220",
    "end": "8160"
  },
  {
    "text": "who cannot raise their hand please raise",
    "start": "8160",
    "end": "10290"
  },
  {
    "text": "your hand there's always one there's",
    "start": "10290",
    "end": "12870"
  },
  {
    "text": "always one alright but more more",
    "start": "12870",
    "end": "15360"
  },
  {
    "text": "seriously who is relatively new to",
    "start": "15360",
    "end": "18119"
  },
  {
    "text": "kubernetes alright who is relatively",
    "start": "18119",
    "end": "22260"
  },
  {
    "text": "experienced and who confidently uses",
    "start": "22260",
    "end": "28289"
  },
  {
    "text": "kubernetes services today and who",
    "start": "28289",
    "end": "33120"
  },
  {
    "text": "confidently understands kubernetes",
    "start": "33120",
    "end": "35280"
  },
  {
    "text": "services today oh wow okay I did not",
    "start": "35280",
    "end": "39840"
  },
  {
    "text": "expect that actually I did not expect",
    "start": "39840",
    "end": "41700"
  },
  {
    "text": "that but so when we talk about cloud",
    "start": "41700",
    "end": "44340"
  },
  {
    "text": "native systems we talk a lot about micro",
    "start": "44340",
    "end": "46680"
  },
  {
    "text": "services or services for short right and",
    "start": "46680",
    "end": "50309"
  },
  {
    "text": "in that conversation a service is an",
    "start": "50309",
    "end": "52829"
  },
  {
    "text": "active component of the overall",
    "start": "52829",
    "end": "54690"
  },
  {
    "text": "application an active component that",
    "start": "54690",
    "end": "58079"
  },
  {
    "text": "provides part of the functionality so",
    "start": "58079",
    "end": "61379"
  },
  {
    "text": "simply put a service is something that",
    "start": "61379",
    "end": "63600"
  },
  {
    "text": "runs but then sooner or later we realize",
    "start": "63600",
    "end": "67710"
  },
  {
    "text": "a kubernetes service is not something",
    "start": "67710",
    "end": "70500"
  },
  {
    "text": "that runs well what is it",
    "start": "70500",
    "end": "72799"
  },
  {
    "text": "over time we build an intuition after",
    "start": "72799",
    "end": "75960"
  },
  {
    "text": "all we have other things to worry about",
    "start": "75960",
    "end": "77369"
  },
  {
    "text": "and there is probably a hem chart",
    "start": "77369",
    "end": "79710"
  },
  {
    "text": "somewhere that does citric anyways so",
    "start": "79710",
    "end": "82530"
  },
  {
    "text": "well today let's try it",
    "start": "82530",
    "end": "84150"
  },
  {
    "text": "replace that intuition with a better",
    "start": "84150",
    "end": "86369"
  },
  {
    "text": "with a solid understanding but before we",
    "start": "86369",
    "end": "91140"
  },
  {
    "start": "90000",
    "end": "362000"
  },
  {
    "text": "explore the question what is a",
    "start": "91140",
    "end": "92310"
  },
  {
    "text": "kubernetes service let explore the",
    "start": "92310",
    "end": "94290"
  },
  {
    "text": "question what is a service I gonna use",
    "start": "94290",
    "end": "100049"
  },
  {
    "text": "two different computational models",
    "start": "100049",
    "end": "103049"
  },
  {
    "text": "mental models to reason about services",
    "start": "103049",
    "end": "106340"
  },
  {
    "text": "the first one from an application",
    "start": "106340",
    "end": "109200"
  },
  {
    "text": "developers point of view the world is",
    "start": "109200",
    "end": "111780"
  },
  {
    "text": "simply a distributed system is composed",
    "start": "111780",
    "end": "115710"
  },
  {
    "text": "of a set of concurrent processes",
    "start": "115710",
    "end": "118549"
  },
  {
    "text": "processes communicate by exchanging",
    "start": "118549",
    "end": "121320"
  },
  {
    "text": "messages from this point of view a",
    "start": "121320",
    "end": "124259"
  },
  {
    "text": "service is an active component a process",
    "start": "124259",
    "end": "127170"
  },
  {
    "text": "that offers some desired functionality",
    "start": "127170",
    "end": "129830"
  },
  {
    "text": "that diagram that functionality is",
    "start": "129830",
    "end": "132090"
  },
  {
    "text": "represented by the blue",
    "start": "132090",
    "end": "135469"
  },
  {
    "text": "so that leads to the following",
    "start": "135469",
    "end": "137519"
  },
  {
    "text": "definition from the application",
    "start": "137519",
    "end": "139709"
  },
  {
    "text": "developers perspective a service is any",
    "start": "139709",
    "end": "142319"
  },
  {
    "text": "process that offers a desired",
    "start": "142319",
    "end": "144480"
  },
  {
    "text": "functionality but from an application",
    "start": "144480",
    "end": "149159"
  },
  {
    "text": "operators point of view of the world is",
    "start": "149159",
    "end": "151290"
  },
  {
    "text": "more complex again a distributed system",
    "start": "151290",
    "end": "154859"
  },
  {
    "text": "is composed of a set of concurrent",
    "start": "154859",
    "end": "157319"
  },
  {
    "text": "processes and again processes",
    "start": "157319",
    "end": "160019"
  },
  {
    "text": "communicate by exchanging messages",
    "start": "160019",
    "end": "162500"
  },
  {
    "text": "however here indirectly via a network in",
    "start": "162500",
    "end": "168709"
  },
  {
    "text": "the context of this presentation we are",
    "start": "168709",
    "end": "171750"
  },
  {
    "text": "interested in two different types of",
    "start": "171750",
    "end": "173909"
  },
  {
    "text": "events a process may send a message and",
    "start": "173909",
    "end": "177530"
  },
  {
    "text": "a process may receive a message a",
    "start": "177530",
    "end": "181579"
  },
  {
    "text": "message identifies carries both the",
    "start": "181579",
    "end": "186599"
  },
  {
    "text": "source process and the destination",
    "start": "186599",
    "end": "189959"
  },
  {
    "text": "process so if we observe a send event",
    "start": "189959",
    "end": "194189"
  },
  {
    "text": "that process one and the destination of",
    "start": "194189",
    "end": "197340"
  },
  {
    "text": "the message is processed for we will",
    "start": "197340",
    "end": "199769"
  },
  {
    "text": "subsequently observe a receive event of",
    "start": "199769",
    "end": "202620"
  },
  {
    "text": "that messages process for and similarly",
    "start": "202620",
    "end": "205739"
  },
  {
    "text": "if we observe a send event the process",
    "start": "205739",
    "end": "207690"
  },
  {
    "text": "one and the destination of the messages",
    "start": "207690",
    "end": "209639"
  },
  {
    "text": "process five we will observe a receive",
    "start": "209639",
    "end": "212040"
  },
  {
    "text": "event of that message at process five",
    "start": "212040",
    "end": "215930"
  },
  {
    "text": "this model a model of concurrent",
    "start": "215930",
    "end": "219870"
  },
  {
    "text": "indirectly communicating processes is",
    "start": "219870",
    "end": "222479"
  },
  {
    "text": "not capable to express the idea of",
    "start": "222479",
    "end": "226349"
  },
  {
    "text": "services to do so we have to make a few",
    "start": "226349",
    "end": "230220"
  },
  {
    "text": "alterations first we need to introduce a",
    "start": "230220",
    "end": "234599"
  },
  {
    "text": "new concept unsurprisingly the concept",
    "start": "234599",
    "end": "237269"
  },
  {
    "text": "of services here service one second we",
    "start": "237269",
    "end": "241739"
  },
  {
    "text": "have to introduce a new relationship",
    "start": "241739",
    "end": "244280"
  },
  {
    "text": "membership in this example process four",
    "start": "244280",
    "end": "248099"
  },
  {
    "text": "five and six are all members of service",
    "start": "248099",
    "end": "251609"
  },
  {
    "text": "one and third the destination of a",
    "start": "251609",
    "end": "256019"
  },
  {
    "text": "message may now either be a process or a",
    "start": "256019",
    "end": "259409"
  },
  {
    "text": "service if we observe a send event and",
    "start": "259409",
    "end": "263400"
  },
  {
    "text": "the destination of a message is a",
    "start": "263400",
    "end": "265800"
  },
  {
    "text": "service",
    "start": "265800",
    "end": "266880"
  },
  {
    "text": "the contract now states that we will",
    "start": "266880",
    "end": "269970"
  },
  {
    "text": "observe a receive event at some process",
    "start": "269970",
    "end": "273150"
  },
  {
    "text": "that is a member of this service here if",
    "start": "273150",
    "end": "276960"
  },
  {
    "text": "we observe a send event that process one",
    "start": "276960",
    "end": "279090"
  },
  {
    "text": "and the destination of the message is",
    "start": "279090",
    "end": "280950"
  },
  {
    "text": "service one we may observe a receive",
    "start": "280950",
    "end": "284280"
  },
  {
    "text": "event the process for or if you observe",
    "start": "284280",
    "end": "288300"
  },
  {
    "text": "another event at process one and the",
    "start": "288300",
    "end": "291150"
  },
  {
    "text": "destination of the messages once again",
    "start": "291150",
    "end": "292950"
  },
  {
    "text": "service one we may observe a receive",
    "start": "292950",
    "end": "295890"
  },
  {
    "text": "event a process five so that leads to",
    "start": "295890",
    "end": "300390"
  },
  {
    "text": "the following definition from the",
    "start": "300390",
    "end": "302970"
  },
  {
    "text": "application operators perspective a",
    "start": "302970",
    "end": "305460"
  },
  {
    "text": "service is an any cost domain a one to",
    "start": "305460",
    "end": "309270"
  },
  {
    "text": "one out of many relationship where a",
    "start": "309270",
    "end": "312330"
  },
  {
    "text": "message sent to the service is received",
    "start": "312330",
    "end": "316050"
  },
  {
    "text": "by any member of the service so at this",
    "start": "316050",
    "end": "320550"
  },
  {
    "text": "point we identify it and address a major",
    "start": "320550",
    "end": "323850"
  },
  {
    "text": "source of confusion and contention is a",
    "start": "323850",
    "end": "326760"
  },
  {
    "text": "service something that runs or something",
    "start": "326760",
    "end": "329460"
  },
  {
    "text": "that doesn't run and the answer is well",
    "start": "329460",
    "end": "332070"
  },
  {
    "text": "it depends it depends on how we look at",
    "start": "332070",
    "end": "333810"
  },
  {
    "text": "it from the point of view of the",
    "start": "333810",
    "end": "336000"
  },
  {
    "text": "application developer depicted on the",
    "start": "336000",
    "end": "338460"
  },
  {
    "text": "depicted on the left a service is",
    "start": "338460",
    "end": "341130"
  },
  {
    "text": "something that runs it's a process from",
    "start": "341130",
    "end": "345390"
  },
  {
    "text": "the point of view of the application",
    "start": "345390",
    "end": "346950"
  },
  {
    "text": "operator a service is something that",
    "start": "346950",
    "end": "349800"
  },
  {
    "text": "doesn't run it's an any cost domain the",
    "start": "349800",
    "end": "354480"
  },
  {
    "text": "rest of this presentation deals with how",
    "start": "354480",
    "end": "356490"
  },
  {
    "text": "kubernetes implements services as",
    "start": "356490",
    "end": "359460"
  },
  {
    "text": "depicted on the right a kubernetes",
    "start": "359460",
    "end": "363660"
  },
  {
    "start": "362000",
    "end": "416000"
  },
  {
    "text": "service is not a process a kubernetes",
    "start": "363660",
    "end": "366450"
  },
  {
    "text": "service is an any cost domain so now we",
    "start": "366450",
    "end": "370560"
  },
  {
    "text": "have everything we need to explore",
    "start": "370560",
    "end": "372270"
  },
  {
    "text": "kubernetes services all right here we go",
    "start": "372270",
    "end": "380570"
  },
  {
    "text": "we need a way to state the existence of",
    "start": "380570",
    "end": "383640"
  },
  {
    "text": "a service spoiler alert kubernetes",
    "start": "383640",
    "end": "385980"
  },
  {
    "text": "service objects we need a way to specify",
    "start": "385980",
    "end": "389580"
  },
  {
    "text": "the members of a service",
    "start": "389580",
    "end": "391470"
  },
  {
    "text": "spoiler alert label select us we need a",
    "start": "391470",
    "end": "395490"
  },
  {
    "text": "way to design a message to a service",
    "start": "395490",
    "end": "398640"
  },
  {
    "text": "again spoiler alert",
    "start": "398640",
    "end": "400740"
  },
  {
    "text": "this gets a unique IP address and we",
    "start": "400740",
    "end": "404490"
  },
  {
    "text": "need a way to deliver a message to a",
    "start": "404490",
    "end": "406560"
  },
  {
    "text": "service that is to deliver the message",
    "start": "406560",
    "end": "409039"
  },
  {
    "text": "to a member of that service last spoiler",
    "start": "409039",
    "end": "413190"
  },
  {
    "text": "alert network address translation but",
    "start": "413190",
    "end": "417360"
  },
  {
    "start": "416000",
    "end": "515000"
  },
  {
    "text": "before we dive into the specifics will",
    "start": "417360",
    "end": "420030"
  },
  {
    "text": "briefly review kubernetes architecture",
    "start": "420030",
    "end": "422280"
  },
  {
    "text": "and kubernetes network architecture this",
    "start": "422280",
    "end": "427080"
  },
  {
    "text": "diagram depicts kubernetes architecture",
    "start": "427080",
    "end": "429620"
  },
  {
    "text": "the kubernetes api server processes read",
    "start": "429620",
    "end": "433590"
  },
  {
    "text": "as well as create update and delete",
    "start": "433590",
    "end": "436349"
  },
  {
    "text": "requests and persists kubernetes object",
    "start": "436349",
    "end": "439289"
  },
  {
    "text": "in the kubernetes object store a core",
    "start": "439289",
    "end": "443819"
  },
  {
    "text": "controller depicted on the left is any",
    "start": "443819",
    "end": "446669"
  },
  {
    "text": "controller that interacts only with the",
    "start": "446669",
    "end": "449639"
  },
  {
    "text": "API server reading and writing",
    "start": "449639",
    "end": "451620"
  },
  {
    "text": "kubernetes objects we are the kubernetes",
    "start": "451620",
    "end": "454199"
  },
  {
    "text": "api typical example for a core",
    "start": "454199",
    "end": "457710"
  },
  {
    "text": "controller is a replica set controller",
    "start": "457710",
    "end": "459930"
  },
  {
    "text": "it reads replica set objects and right",
    "start": "459930",
    "end": "462750"
  },
  {
    "text": "spot objects an edge controller depicted",
    "start": "462750",
    "end": "466349"
  },
  {
    "text": "on the right is any controller that",
    "start": "466349",
    "end": "469139"
  },
  {
    "text": "interacts with the API server and with",
    "start": "469139",
    "end": "471719"
  },
  {
    "text": "other components an example is a qubit",
    "start": "471719",
    "end": "474690"
  },
  {
    "text": "it reads part objects and instructs the",
    "start": "474690",
    "end": "478289"
  },
  {
    "text": "container engine via the container",
    "start": "478289",
    "end": "480330"
  },
  {
    "text": "runtime interface to execute any domain",
    "start": "480330",
    "end": "482789"
  },
  {
    "text": "containers to understand kubernetes",
    "start": "482789",
    "end": "488159"
  },
  {
    "text": "services end-to-end we have to consider",
    "start": "488159",
    "end": "491610"
  },
  {
    "text": "the kubernetes api three different",
    "start": "491610",
    "end": "494819"
  },
  {
    "text": "kubernetes objects part objects service",
    "start": "494819",
    "end": "497430"
  },
  {
    "text": "objects and endpoint objects a core",
    "start": "497430",
    "end": "501030"
  },
  {
    "text": "controller the endpoints controller an",
    "start": "501030",
    "end": "503340"
  },
  {
    "text": "edge controller the queue proxy and",
    "start": "503340",
    "end": "505819"
  },
  {
    "text": "finally Linux net filter framework",
    "start": "505819",
    "end": "509639"
  },
  {
    "text": "specifically network address translation",
    "start": "509639",
    "end": "514459"
  },
  {
    "start": "515000",
    "end": "568000"
  },
  {
    "text": "now to my least favorite part networking",
    "start": "515719",
    "end": "518750"
  },
  {
    "text": "no wait advocate Cisco now to my",
    "start": "518750",
    "end": "521010"
  },
  {
    "text": "favorite part networking",
    "start": "521010",
    "end": "523339"
  },
  {
    "text": "this diagram depicts kubernetes network",
    "start": "523339",
    "end": "526009"
  },
  {
    "text": "architecture kubernetes defines three",
    "start": "526009",
    "end": "529129"
  },
  {
    "text": "distinct networks the node network the",
    "start": "529129",
    "end": "532519"
  },
  {
    "text": "pod network and the service network the",
    "start": "532519",
    "end": "536839"
  },
  {
    "text": "node network consists of one address",
    "start": "536839",
    "end": "538759"
  },
  {
    "text": "space each node of the cluster has an IP",
    "start": "538759",
    "end": "542059"
  },
  {
    "text": "address from this address space the port",
    "start": "542059",
    "end": "546110"
  },
  {
    "text": "network consists of multiple address",
    "start": "546110",
    "end": "548329"
  },
  {
    "text": "spaces one per node each part of the",
    "start": "548329",
    "end": "552050"
  },
  {
    "text": "cluster has an IP address from the",
    "start": "552050",
    "end": "554180"
  },
  {
    "text": "address space of the node the part is",
    "start": "554180",
    "end": "557029"
  },
  {
    "text": "running on the service network again",
    "start": "557029",
    "end": "560870"
  },
  {
    "text": "consists of one address space and each",
    "start": "560870",
    "end": "563779"
  },
  {
    "text": "kubernetes service of the cluster has an",
    "start": "563779",
    "end": "565790"
  },
  {
    "text": "IP address from this address space okay",
    "start": "565790",
    "end": "569509"
  },
  {
    "start": "568000",
    "end": "791000"
  },
  {
    "text": "finally we get to deep dive into",
    "start": "569509",
    "end": "571040"
  },
  {
    "text": "kubernetes services themselves we will",
    "start": "571040",
    "end": "574879"
  },
  {
    "text": "not focus here on the actual Yaman or",
    "start": "574879",
    "end": "577699"
  },
  {
    "text": "json representation instead we will",
    "start": "577699",
    "end": "580189"
  },
  {
    "text": "focus on a conceptual graphical",
    "start": "580189",
    "end": "582139"
  },
  {
    "text": "representation and try to get the idea",
    "start": "582139",
    "end": "583999"
  },
  {
    "text": "across when a user creates a service the",
    "start": "583999",
    "end": "590750"
  },
  {
    "text": "user has to specify a service type the",
    "start": "590750",
    "end": "598639"
  },
  {
    "text": "service type is either cluster IP or",
    "start": "598639",
    "end": "600920"
  },
  {
    "text": "node port a service of type cluster IP",
    "start": "600920",
    "end": "604189"
  },
  {
    "text": "is reachable from within the kubernetes",
    "start": "604189",
    "end": "607129"
  },
  {
    "text": "cluster a service of type node port is",
    "start": "607129",
    "end": "611449"
  },
  {
    "text": "reachable from within and from the",
    "start": "611449",
    "end": "614449"
  },
  {
    "text": "outside of kubernetes cluster so",
    "start": "614449",
    "end": "617480"
  },
  {
    "text": "therefore cluster IP services and node",
    "start": "617480",
    "end": "620000"
  },
  {
    "text": "port IP services are not in fact",
    "start": "620000",
    "end": "622639"
  },
  {
    "text": "disjoint sets but every node port",
    "start": "622639",
    "end": "625430"
  },
  {
    "text": "service is also cluster IP service so to",
    "start": "625430",
    "end": "629389"
  },
  {
    "text": "put it simple node port adds a little",
    "start": "629389",
    "end": "631370"
  },
  {
    "text": "bit to cluster IP on creation the API",
    "start": "631370",
    "end": "638389"
  },
  {
    "text": "server actually the API server not an",
    "start": "638389",
    "end": "642170"
  },
  {
    "text": "admission controller the API server",
    "start": "642170",
    "end": "644120"
  },
  {
    "text": "assigns a cluster IP a unique IP from",
    "start": "644120",
    "end": "648470"
  },
  {
    "text": "the kubernetes service network to the",
    "start": "648470",
    "end": "651920"
  },
  {
    "text": "service object",
    "start": "651920",
    "end": "654730"
  },
  {
    "text": "but service objects do not exist in",
    "start": "655600",
    "end": "658420"
  },
  {
    "text": "isolation they are nested between part",
    "start": "658420",
    "end": "661270"
  },
  {
    "text": "objects and endpoint objects part",
    "start": "661270",
    "end": "664330"
  },
  {
    "text": "objects are the members of the service a",
    "start": "664330",
    "end": "669060"
  },
  {
    "text": "part is a member of a service if the",
    "start": "669660",
    "end": "673930"
  },
  {
    "text": "services selector matches the parts",
    "start": "673930",
    "end": "676810"
  },
  {
    "text": "Labour's and the pods readiness probe",
    "start": "676810",
    "end": "679650"
  },
  {
    "text": "indicates that the part is ready to",
    "start": "679650",
    "end": "683230"
  },
  {
    "text": "receive traffic if the part does not",
    "start": "683230",
    "end": "686140"
  },
  {
    "text": "specify a readiness probe the part is",
    "start": "686140",
    "end": "688600"
  },
  {
    "text": "considered ready if it is a life and if",
    "start": "688600",
    "end": "691960"
  },
  {
    "text": "the bot does not specify a lifeless",
    "start": "691960",
    "end": "693580"
  },
  {
    "text": "probe it is considered a life if at",
    "start": "693580",
    "end": "696130"
  },
  {
    "text": "least one of the pods main containers is",
    "start": "696130",
    "end": "698740"
  },
  {
    "text": "up and running the endpoints object is a",
    "start": "698740",
    "end": "703320"
  },
  {
    "text": "materialized view of the members of the",
    "start": "703320",
    "end": "706390"
  },
  {
    "text": "service conceptually the endpoints",
    "start": "706390",
    "end": "711070"
  },
  {
    "text": "object is like a lookup table that map's",
    "start": "711070",
    "end": "713890"
  },
  {
    "text": "the services cluster IP to the members",
    "start": "713890",
    "end": "717160"
  },
  {
    "text": "parts pod IP and the services ports to",
    "start": "717160",
    "end": "721660"
  },
  {
    "text": "the passports if the service is of type",
    "start": "721660",
    "end": "727060"
  },
  {
    "text": "cluster IP or node IP conceptually then",
    "start": "727060",
    "end": "730180"
  },
  {
    "text": "points objects acts as a lookup table",
    "start": "730180",
    "end": "732100"
  },
  {
    "text": "just like this in this example the",
    "start": "732100",
    "end": "735280"
  },
  {
    "text": "service cluster IP and the service port",
    "start": "735280",
    "end": "737800"
  },
  {
    "text": "80 is mapped to any of these pod IPS and",
    "start": "737800",
    "end": "741880"
  },
  {
    "text": "the port port 8080 and similar the",
    "start": "741880",
    "end": "745330"
  },
  {
    "text": "service port 443 is mapped to the port",
    "start": "745330",
    "end": "748900"
  },
  {
    "text": "port 8 443 in addition if the services",
    "start": "748900",
    "end": "754870"
  },
  {
    "text": "of type node port conceptually the",
    "start": "754870",
    "end": "758020"
  },
  {
    "text": "endpoints object acts as an additional",
    "start": "758020",
    "end": "760900"
  },
  {
    "text": "lookup table just like this in this",
    "start": "760900",
    "end": "763780"
  },
  {
    "text": "example on each of on each node of the",
    "start": "763780",
    "end": "767020"
  },
  {
    "text": "cluster the node IP and port 3 - 501 is",
    "start": "767020",
    "end": "772150"
  },
  {
    "text": "mapped to any part I P and the port port",
    "start": "772150",
    "end": "775030"
  },
  {
    "text": "8080 and similar the node port 3 to 502",
    "start": "775030",
    "end": "780070"
  },
  {
    "text": "is mapped to a pod port 8 443 the node",
    "start": "780070",
    "end": "785920"
  },
  {
    "text": "port values are either user specified or",
    "start": "785920",
    "end": "789190"
  },
  {
    "text": "Benares assigned but now who makes all",
    "start": "789190",
    "end": "793660"
  },
  {
    "start": "791000",
    "end": "829000"
  },
  {
    "text": "of this happen please meet the end",
    "start": "793660",
    "end": "797050"
  },
  {
    "text": "points controller and the cube proxy the",
    "start": "797050",
    "end": "800589"
  },
  {
    "text": "end points controller continuously scans",
    "start": "800589",
    "end": "803170"
  },
  {
    "text": "for services and for parts that match",
    "start": "803170",
    "end": "806500"
  },
  {
    "text": "the selector of these services and are",
    "start": "806500",
    "end": "809139"
  },
  {
    "text": "in a ready state then updates the",
    "start": "809139",
    "end": "812980"
  },
  {
    "text": "endpoints objects accordingly on each",
    "start": "812980",
    "end": "816850"
  },
  {
    "text": "node of the cluster the cube proxy reads",
    "start": "816850",
    "end": "820089"
  },
  {
    "text": "two service objects and the endpoints",
    "start": "820089",
    "end": "822009"
  },
  {
    "text": "objects to install the appropriate",
    "start": "822009",
    "end": "824250"
  },
  {
    "text": "network address translation rules",
    "start": "824250",
    "end": "828660"
  },
  {
    "start": "829000",
    "end": "1017000"
  },
  {
    "text": "so finally network address translation",
    "start": "829589",
    "end": "832660"
  },
  {
    "text": "rules are responsible to route messages",
    "start": "832660",
    "end": "835449"
  },
  {
    "text": "that are displayed to a service to any",
    "start": "835449",
    "end": "838329"
  },
  {
    "text": "part that is a member of this service so",
    "start": "838329",
    "end": "843370"
  },
  {
    "text": "to reiterate the queue proxy is an edge",
    "start": "843370",
    "end": "846279"
  },
  {
    "text": "controller that runs on every node of",
    "start": "846279",
    "end": "848649"
  },
  {
    "text": "the cluster read service and endpoints",
    "start": "848649",
    "end": "851110"
  },
  {
    "text": "objects and installs network address",
    "start": "851110",
    "end": "853720"
  },
  {
    "text": "translation rules and network address",
    "start": "853720",
    "end": "856569"
  },
  {
    "text": "translation rules are capable to change",
    "start": "856569",
    "end": "858850"
  },
  {
    "text": "source address and source port or",
    "start": "858850",
    "end": "861639"
  },
  {
    "text": "destination address and destination",
    "start": "861639",
    "end": "863319"
  },
  {
    "text": "ports of an IP packet that kind of",
    "start": "863319",
    "end": "866949"
  },
  {
    "text": "sounds like it has everything we need",
    "start": "866949",
    "end": "870180"
  },
  {
    "text": "this diagram depicts a Linux Network",
    "start": "871110",
    "end": "873910"
  },
  {
    "text": "stick or more specifically Linux",
    "start": "873910",
    "end": "876430"
  },
  {
    "text": "netfilter netfilter is a set of hooks",
    "start": "876430",
    "end": "880630"
  },
  {
    "text": "inside the Linux kernel that allows",
    "start": "880630",
    "end": "883720"
  },
  {
    "text": "kernel modules to register callback",
    "start": "883720",
    "end": "886180"
  },
  {
    "text": "functions with the network stick a",
    "start": "886180",
    "end": "889439"
  },
  {
    "text": "registered callback function is then",
    "start": "889439",
    "end": "891790"
  },
  {
    "text": "called back for every packet that",
    "start": "891790",
    "end": "893819"
  },
  {
    "text": "traverses the respective hook within the",
    "start": "893819",
    "end": "896589"
  },
  {
    "text": "network stack sorry pre routing output",
    "start": "896589",
    "end": "903699"
  },
  {
    "text": "and post routing or hooks that are",
    "start": "903699",
    "end": "906189"
  },
  {
    "text": "relevant for network address translation",
    "start": "906189",
    "end": "910230"
  },
  {
    "text": "but only pre routing and output hooks",
    "start": "910350",
    "end": "913509"
  },
  {
    "text": "are relevant for kubernetes network",
    "start": "913509",
    "end": "915699"
  },
  {
    "text": "service kubernetes service network",
    "start": "915699",
    "end": "918189"
  },
  {
    "text": "address translation when a pod",
    "start": "918189",
    "end": "922640"
  },
  {
    "text": "here the process on the right sends a",
    "start": "922640",
    "end": "925220"
  },
  {
    "text": "message with a destination address of a",
    "start": "925220",
    "end": "928130"
  },
  {
    "text": "services cluster IP the output chain",
    "start": "928130",
    "end": "931940"
  },
  {
    "text": "will rewrite the destination address to",
    "start": "931940",
    "end": "935660"
  },
  {
    "text": "a member part of the service before the",
    "start": "935660",
    "end": "939200"
  },
  {
    "text": "packet even leaves the node and when a",
    "start": "939200",
    "end": "943790"
  },
  {
    "text": "node receives a message via its",
    "start": "943790",
    "end": "947090"
  },
  {
    "text": "interface depicted on the left with its",
    "start": "947090",
    "end": "950420"
  },
  {
    "text": "node IP and the message has a",
    "start": "950420",
    "end": "953630"
  },
  {
    "text": "destination port that matches a node",
    "start": "953630",
    "end": "956360"
  },
  {
    "text": "port the routing chain the pre-rounding",
    "start": "956360",
    "end": "961340"
  },
  {
    "text": "chain I'm sorry the pre routing chain",
    "start": "961340",
    "end": "962810"
  },
  {
    "text": "will rewrite the destination address to",
    "start": "962810",
    "end": "966020"
  },
  {
    "text": "a member part of the service and either",
    "start": "966020",
    "end": "968600"
  },
  {
    "text": "deliver the message locally if the part",
    "start": "968600",
    "end": "971480"
  },
  {
    "text": "happens to be on that node or forward",
    "start": "971480",
    "end": "974300"
  },
  {
    "text": "the message the pre routing chain and",
    "start": "974300",
    "end": "979520"
  },
  {
    "text": "output chain both jump to a kubernetes",
    "start": "979520",
    "end": "982910"
  },
  {
    "text": "service chain for each service in the",
    "start": "982910",
    "end": "987500"
  },
  {
    "text": "kubernetes cluster a service specific",
    "start": "987500",
    "end": "990080"
  },
  {
    "text": "chain rewrites the cluster IP of the",
    "start": "990080",
    "end": "993230"
  },
  {
    "text": "service to one member part IV with equal",
    "start": "993230",
    "end": "997730"
  },
  {
    "text": "probability making sure that a message",
    "start": "997730",
    "end": "1003190"
  },
  {
    "text": "this time to a service will be received",
    "start": "1003190",
    "end": "1006880"
  },
  {
    "text": "by a member part of that service and",
    "start": "1006880",
    "end": "1009910"
  },
  {
    "text": "with that we close the loop and are true",
    "start": "1009910",
    "end": "1012510"
  },
  {
    "text": "to our previous definition but fun part",
    "start": "1012510",
    "end": "1019240"
  },
  {
    "start": "1017000",
    "end": "1189000"
  },
  {
    "text": "when does kubernetes service not work",
    "start": "1019240",
    "end": "1022060"
  },
  {
    "text": "even so kubernetes is working correctly",
    "start": "1022060",
    "end": "1024939"
  },
  {
    "text": "so no single component of kubernetes is",
    "start": "1024940",
    "end": "1028000"
  },
  {
    "text": "in a failure State for this example for",
    "start": "1028000",
    "end": "1035010"
  },
  {
    "text": "this example we assume a kubernetes",
    "start": "1035040",
    "end": "1037449"
  },
  {
    "text": "cluster with two nodes n1 and n2 we",
    "start": "1037449",
    "end": "1041500"
  },
  {
    "text": "assume one service and two parts as its",
    "start": "1041500",
    "end": "1043780"
  },
  {
    "text": "members p1 and p2 initially part 1 part",
    "start": "1043780",
    "end": "1048610"
  },
  {
    "text": "2 are alive healthy and ready both p1",
    "start": "1048610",
    "end": "1052450"
  },
  {
    "text": "and p2 are listed as endpoints in the",
    "start": "1052450",
    "end": "1055030"
  },
  {
    "text": "endpoints object",
    "start": "1055030",
    "end": "1056290"
  },
  {
    "text": "and network address translation will",
    "start": "1056290",
    "end": "1058630"
  },
  {
    "text": "route requests to either p1 or p2 on",
    "start": "1058630",
    "end": "1061840"
  },
  {
    "text": "either node n1 or n2 kubernetes is in a",
    "start": "1061840",
    "end": "1067900"
  },
  {
    "text": "steady state requests reach their",
    "start": "1067900",
    "end": "1071620"
  },
  {
    "text": "destination but next p1 fails its",
    "start": "1071620",
    "end": "1076240"
  },
  {
    "text": "readiness probe it is not ready to serve",
    "start": "1076240",
    "end": "1078850"
  },
  {
    "text": "traffic anymore however both p1 and p2",
    "start": "1078850",
    "end": "1082780"
  },
  {
    "text": "are still listed as endpoints in the",
    "start": "1082780",
    "end": "1085180"
  },
  {
    "text": "endpoint object and network address",
    "start": "1085180",
    "end": "1087580"
  },
  {
    "text": "translation will still route requests to",
    "start": "1087580",
    "end": "1089830"
  },
  {
    "text": "either p1 or p2 on either node n1 or n2",
    "start": "1089830",
    "end": "1094110"
  },
  {
    "text": "now per request there is a 50% chance of",
    "start": "1094110",
    "end": "1098020"
  },
  {
    "text": "failure",
    "start": "1098020",
    "end": "1098410"
  },
  {
    "text": "just because kubernetes hasn't caught up",
    "start": "1098410",
    "end": "1101440"
  },
  {
    "text": "yet next the endpoints controller",
    "start": "1101440",
    "end": "1106330"
  },
  {
    "text": "removes p1 from the endpoints object",
    "start": "1106330",
    "end": "1109200"
  },
  {
    "text": "however network address translation will",
    "start": "1109200",
    "end": "1112270"
  },
  {
    "text": "still are out requests to either p1 or",
    "start": "1112270",
    "end": "1114550"
  },
  {
    "text": "p2 on either node and one or ln2 still",
    "start": "1114550",
    "end": "1118690"
  },
  {
    "text": "per request there is a 50% chance of",
    "start": "1118690",
    "end": "1121720"
  },
  {
    "text": "failure kubernetes simply still didn't",
    "start": "1121720",
    "end": "1125470"
  },
  {
    "text": "caught up yet didn't catch up it didn't",
    "start": "1125470",
    "end": "1127540"
  },
  {
    "text": "catch up it next the pew proxy on either",
    "start": "1127540",
    "end": "1132670"
  },
  {
    "text": "n1 or n2 will remove its network address",
    "start": "1132670",
    "end": "1135790"
  },
  {
    "text": "translation to p1 now per request there",
    "start": "1135790",
    "end": "1138970"
  },
  {
    "text": "is only a 25% chance of failure",
    "start": "1138970",
    "end": "1141220"
  },
  {
    "text": "kubernetes still didn't fully catch up",
    "start": "1141220",
    "end": "1144450"
  },
  {
    "text": "but finally the queue proxy on the other",
    "start": "1144450",
    "end": "1147340"
  },
  {
    "text": "node will remove its network address",
    "start": "1147340",
    "end": "1149110"
  },
  {
    "text": "translation to p1 kubernetes is in a",
    "start": "1149110",
    "end": "1152740"
  },
  {
    "text": "steady state it is caught up there is no",
    "start": "1152740",
    "end": "1155260"
  },
  {
    "text": "failure happening now fun question last",
    "start": "1155260",
    "end": "1159310"
  },
  {
    "text": "but not least how can we possibly",
    "start": "1159310",
    "end": "1160900"
  },
  {
    "text": "mitigate this situation if you take",
    "start": "1160900",
    "end": "1164440"
  },
  {
    "text": "anything away from this presentation",
    "start": "1164440",
    "end": "1165820"
  },
  {
    "text": "well this one sentence in the era of",
    "start": "1165820",
    "end": "1169030"
  },
  {
    "text": "desktop computing there was no problem",
    "start": "1169030",
    "end": "1171850"
  },
  {
    "text": "that could not be fixed by a restart",
    "start": "1171850",
    "end": "1175550"
  },
  {
    "text": "and in the arrow of cloud native there",
    "start": "1175550",
    "end": "1178400"
  },
  {
    "text": "is no problem that cannot be fixed by a",
    "start": "1178400",
    "end": "1180320"
  },
  {
    "text": "retry and this is where service miche's",
    "start": "1180320",
    "end": "1183770"
  },
  {
    "text": "and actually Andrew into the picture",
    "start": "1183770",
    "end": "1187960"
  },
  {
    "start": "1189000",
    "end": "1643000"
  },
  {
    "text": "thanks again everyone for staying til",
    "start": "1190120",
    "end": "1192530"
  },
  {
    "text": "the very end of the conference to come",
    "start": "1192530",
    "end": "1194270"
  },
  {
    "text": "to our talk so Dominic and I have been",
    "start": "1194270",
    "end": "1196670"
  },
  {
    "text": "talking about what our next talk is",
    "start": "1196670",
    "end": "1198890"
  },
  {
    "text": "going to be about so we need your help",
    "start": "1198890",
    "end": "1201860"
  },
  {
    "text": "to kind of make this decision so the two",
    "start": "1201860",
    "end": "1203960"
  },
  {
    "text": "options are one inside service mesh and",
    "start": "1203960",
    "end": "1207370"
  },
  {
    "text": "where we talk about service meshes based",
    "start": "1207370",
    "end": "1209870"
  },
  {
    "text": "on conceptual and formal models similar",
    "start": "1209870",
    "end": "1211580"
  },
  {
    "text": "to this presentation and then option two",
    "start": "1211580",
    "end": "1213860"
  },
  {
    "text": "is the almost unbreakable macro service",
    "start": "1213860",
    "end": "1216620"
  },
  {
    "text": "which is if you want to learn more about",
    "start": "1216620",
    "end": "1218810"
  },
  {
    "text": "how to compose services together with",
    "start": "1218810",
    "end": "1221330"
  },
  {
    "text": "various CN CF projects into an almost",
    "start": "1221330",
    "end": "1224120"
  },
  {
    "text": "unbreakable macro service okay so for",
    "start": "1224120",
    "end": "1226850"
  },
  {
    "text": "those of you who are interested in",
    "start": "1226850",
    "end": "1228530"
  },
  {
    "text": "inside service mesh show show me some",
    "start": "1228530",
    "end": "1231560"
  },
  {
    "text": "hands okay awesome and then for those of",
    "start": "1231560",
    "end": "1235070"
  },
  {
    "text": "you who are interested in in the almost",
    "start": "1235070",
    "end": "1237650"
  },
  {
    "text": "unbreakable micro service show me your",
    "start": "1237650",
    "end": "1239420"
  },
  {
    "text": "hands",
    "start": "1239420",
    "end": "1239840"
  },
  {
    "text": "and I can't tell okay so I think we'll",
    "start": "1239840",
    "end": "1254210"
  },
  {
    "text": "go with that",
    "start": "1254210",
    "end": "1255800"
  },
  {
    "text": "and with that let's see are there any",
    "start": "1255800",
    "end": "1258740"
  },
  {
    "text": "questions",
    "start": "1258740",
    "end": "1261070"
  },
  {
    "text": "so I do realize one just come into my",
    "start": "1265500",
    "end": "1269679"
  },
  {
    "text": "mind when you when I saw swine so when",
    "start": "1269679",
    "end": "1272200"
  },
  {
    "text": "you create a service right you specifies",
    "start": "1272200",
    "end": "1274179"
  },
  {
    "text": "the server's IP address and the port",
    "start": "1274179",
    "end": "1276399"
  },
  {
    "text": "number and you deploy this service with",
    "start": "1276399",
    "end": "1280809"
  },
  {
    "text": "multiple and the point what about the",
    "start": "1280809",
    "end": "1283779"
  },
  {
    "text": "service port is company with a with a",
    "start": "1283779",
    "end": "1287320"
  },
  {
    "text": "particular load do we take care of their",
    "start": "1287320",
    "end": "1289690"
  },
  {
    "text": "one did you get itself so generally one",
    "start": "1289690",
    "end": "1296919"
  },
  {
    "text": "additional point we skipped is that it",
    "start": "1296919",
    "end": "1300549"
  },
  {
    "text": "is recommended that you use named ports",
    "start": "1300549",
    "end": "1303519"
  },
  {
    "text": "so for the parts you would typically not",
    "start": "1303519",
    "end": "1306519"
  },
  {
    "text": "specify the the port you use in imports",
    "start": "1306519",
    "end": "1309759"
  },
  {
    "text": "and with named ports you let kubernetes",
    "start": "1309759",
    "end": "1313799"
  },
  {
    "text": "choose ports and then also the port",
    "start": "1313799",
    "end": "1316960"
  },
  {
    "text": "mappings as much as possible so in order",
    "start": "1316960",
    "end": "1320049"
  },
  {
    "text": "to reduce conflicts but of course you",
    "start": "1320049",
    "end": "1322120"
  },
  {
    "text": "are you are correct",
    "start": "1322120",
    "end": "1323740"
  },
  {
    "text": "conflicts are possible",
    "start": "1323740",
    "end": "1327090"
  },
  {
    "text": "just one ask could have a special use",
    "start": "1336519",
    "end": "1339649"
  },
  {
    "text": "case we want to broadcast our message to",
    "start": "1339649",
    "end": "1342110"
  },
  {
    "text": "the specific service just want to I just",
    "start": "1342110",
    "end": "1344990"
  },
  {
    "text": "wondering if there's any like model like",
    "start": "1344990",
    "end": "1348139"
  },
  {
    "text": "that you start off just iterating",
    "start": "1348139",
    "end": "1350960"
  },
  {
    "text": "through the IPA table thanks so could",
    "start": "1350960",
    "end": "1355580"
  },
  {
    "text": "know the semantics of kubernetes",
    "start": "1355580",
    "end": "1357289"
  },
  {
    "text": "services is fixed any member will will",
    "start": "1357289",
    "end": "1361909"
  },
  {
    "text": "respond to a request with equal",
    "start": "1361909",
    "end": "1364340"
  },
  {
    "text": "probability you can of course slice and",
    "start": "1364340",
    "end": "1367759"
  },
  {
    "text": "dice if you're if you want to target a",
    "start": "1367759",
    "end": "1370669"
  },
  {
    "text": "pod specifically you can slice and dice",
    "start": "1370669",
    "end": "1373429"
  },
  {
    "text": "a pod can be a member of multiple",
    "start": "1373429",
    "end": "1375980"
  },
  {
    "text": "services or if you want to get more more",
    "start": "1375980",
    "end": "1380750"
  },
  {
    "text": "capabilities into the hand of the",
    "start": "1380750",
    "end": "1382519"
  },
  {
    "text": "application operator and application",
    "start": "1382519",
    "end": "1385309"
  },
  {
    "text": "developer you can resort to one of the",
    "start": "1385309",
    "end": "1387289"
  },
  {
    "text": "service measures like for example linker",
    "start": "1387289",
    "end": "1389120"
  },
  {
    "text": "tea where you have more capability of",
    "start": "1389120",
    "end": "1391730"
  },
  {
    "text": "actually influencing the routing but",
    "start": "1391730",
    "end": "1393500"
  },
  {
    "text": "kubernetes routing is fixed so as I was",
    "start": "1393500",
    "end": "1399259"
  },
  {
    "text": "watching the presentation I started to",
    "start": "1399259",
    "end": "1400879"
  },
  {
    "text": "get lost around the endpoint part part",
    "start": "1400879",
    "end": "1402919"
  },
  {
    "text": "of it it seemed like the end point was",
    "start": "1402919",
    "end": "1404870"
  },
  {
    "text": "what was doing the service job like it",
    "start": "1404870",
    "end": "1407779"
  },
  {
    "text": "went and talked to all the pods",
    "start": "1407779",
    "end": "1409009"
  },
  {
    "text": "individually could you just talk a",
    "start": "1409009",
    "end": "1410779"
  },
  {
    "text": "little bit more about that Park I really",
    "start": "1410779",
    "end": "1413029"
  },
  {
    "text": "got lost in that area oh yeah absolutely",
    "start": "1413029",
    "end": "1414740"
  },
  {
    "text": "so the endpoints object is really just",
    "start": "1414740",
    "end": "1418490"
  },
  {
    "text": "the materialization of the list of pods",
    "start": "1418490",
    "end": "1421789"
  },
  {
    "text": "that are the members for for the service",
    "start": "1421789",
    "end": "1425649"
  },
  {
    "text": "so you could think of it as a database",
    "start": "1425649",
    "end": "1428889"
  },
  {
    "text": "materialized view because otherwise it",
    "start": "1428889",
    "end": "1431570"
  },
  {
    "text": "is just too costly for for kubernetes to",
    "start": "1431570",
    "end": "1434809"
  },
  {
    "text": "actually recalculate which parts match",
    "start": "1434809",
    "end": "1437720"
  },
  {
    "text": "the services selector each and every",
    "start": "1437720",
    "end": "1440120"
  },
  {
    "text": "time so there is the endpoints",
    "start": "1440120",
    "end": "1442100"
  },
  {
    "text": "controller that does this specific part",
    "start": "1442100",
    "end": "1444830"
  },
  {
    "text": "centrally and uses the endpoints object",
    "start": "1444830",
    "end": "1448220"
  },
  {
    "text": "to materialize that information it is",
    "start": "1448220",
    "end": "1450799"
  },
  {
    "text": "simply a list of pods that match the",
    "start": "1450799",
    "end": "1454779"
  },
  {
    "text": "services selector",
    "start": "1454779",
    "end": "1458259"
  },
  {
    "text": "thank you for the talk I was wondering",
    "start": "1464549",
    "end": "1466980"
  },
  {
    "text": "for the network address translation if",
    "start": "1466980",
    "end": "1469499"
  },
  {
    "text": "those rules are run for every packet how",
    "start": "1469499",
    "end": "1472289"
  },
  {
    "text": "do you ensure that all the packets on a",
    "start": "1472289",
    "end": "1473730"
  },
  {
    "text": "single connection go to the same end",
    "start": "1473730",
    "end": "1475049"
  },
  {
    "text": "point that make sense yes that is now",
    "start": "1475049",
    "end": "1480749"
  },
  {
    "text": "this is far out of my comfort zone but",
    "start": "1480749",
    "end": "1483259"
  },
  {
    "text": "network address translation actually has",
    "start": "1483259",
    "end": "1485970"
  },
  {
    "text": "something that is contract contract",
    "start": "1485970",
    "end": "1490169"
  },
  {
    "text": "tracking so it does one on a level four",
    "start": "1490169",
    "end": "1493610"
  },
  {
    "text": "it actually does track the the session",
    "start": "1493610",
    "end": "1497279"
  },
  {
    "text": "of the of the TCP connection but that's",
    "start": "1497279",
    "end": "1500490"
  },
  {
    "text": "actually far out of my comfort zone so",
    "start": "1500490",
    "end": "1504080"
  },
  {
    "text": "can you talk a little bit about how a",
    "start": "1505850",
    "end": "1508440"
  },
  {
    "text": "cluster IP nun works cluster IP nun the",
    "start": "1508440",
    "end": "1513950"
  },
  {
    "text": "external the external services we gotta",
    "start": "1513950",
    "end": "1516659"
  },
  {
    "text": "exclude that source out of my comfort",
    "start": "1516659",
    "end": "1518490"
  },
  {
    "text": "zone",
    "start": "1518490",
    "end": "1519250"
  },
  {
    "text": "[Laughter]",
    "start": "1519250",
    "end": "1522840"
  },
  {
    "text": "so my understanding there is no",
    "start": "1528419",
    "end": "1530639"
  },
  {
    "text": "additional network hope from what you",
    "start": "1530639",
    "end": "1533249"
  },
  {
    "text": "explained is there sometimes a",
    "start": "1533249",
    "end": "1536369"
  },
  {
    "text": "circumstance when service represents an",
    "start": "1536369",
    "end": "1538859"
  },
  {
    "text": "additional network hobb sorry",
    "start": "1538859",
    "end": "1541739"
  },
  {
    "text": "just my understanding there is no",
    "start": "1541739",
    "end": "1544559"
  },
  {
    "text": "additional network hop so basically you",
    "start": "1544559",
    "end": "1547379"
  },
  {
    "text": "inept from the client directly to the",
    "start": "1547379",
    "end": "1550799"
  },
  {
    "text": "port in just a lookup table is there I",
    "start": "1550799",
    "end": "1557600"
  },
  {
    "text": "don't know some setup when a service is",
    "start": "1557600",
    "end": "1562159"
  },
  {
    "text": "representing an additional network hop",
    "start": "1562159",
    "end": "1564989"
  },
  {
    "text": "and its associated overhead with with IP",
    "start": "1564989",
    "end": "1571249"
  },
  {
    "text": "tables",
    "start": "1571249",
    "end": "1572849"
  },
  {
    "text": "I do believe know where as the specifics",
    "start": "1572849",
    "end": "1576869"
  },
  {
    "text": "are the Devils are in the detail in that",
    "start": "1576869",
    "end": "1580169"
  },
  {
    "text": "case the detail is container network",
    "start": "1580169",
    "end": "1582450"
  },
  {
    "text": "interface but the cni yes but in in in",
    "start": "1582450",
    "end": "1588389"
  },
  {
    "text": "any case no it should not if the queue",
    "start": "1588389",
    "end": "1591149"
  },
  {
    "text": "proxy mode is actually user space then",
    "start": "1591149",
    "end": "1594149"
  },
  {
    "text": "the queue proxy is indeed a reverse",
    "start": "1594149",
    "end": "1596940"
  },
  {
    "text": "proxy then you have an additional",
    "start": "1596940",
    "end": "1598499"
  },
  {
    "text": "network hop and if the packets come from",
    "start": "1598499",
    "end": "1601830"
  },
  {
    "text": "the outside they may be routed to any so",
    "start": "1601830",
    "end": "1605279"
  },
  {
    "text": "node port they may be routed to any node",
    "start": "1605279",
    "end": "1608659"
  },
  {
    "text": "typically in a round robin fashion so",
    "start": "1608659",
    "end": "1611549"
  },
  {
    "text": "then there is again an additional",
    "start": "1611549",
    "end": "1613619"
  },
  {
    "text": "network hop if the target pod is not on",
    "start": "1613619",
    "end": "1617129"
  },
  {
    "text": "the on the node that packet meant in",
    "start": "1617129",
    "end": "1620519"
  },
  {
    "text": "initially but typically no the idea is",
    "start": "1620519",
    "end": "1625379"
  },
  {
    "text": "no",
    "start": "1625379",
    "end": "1627769"
  },
  {
    "text": "if there are no other questions thank",
    "start": "1633290",
    "end": "1635270"
  },
  {
    "text": "you very much thanks for staying it",
    "start": "1635270",
    "end": "1637130"
  },
  {
    "text": "[Applause]",
    "start": "1637130",
    "end": "1645089"
  }
]