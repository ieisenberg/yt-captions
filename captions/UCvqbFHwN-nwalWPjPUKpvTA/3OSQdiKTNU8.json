[
  {
    "text": "hello everybody and welcome to this talk titled when they go high we go low my",
    "start": "199",
    "end": "5200"
  },
  {
    "text": "name is talsik and I'm a developer at mle bear where we develop mird so this talk is about solving a",
    "start": "5200",
    "end": "12840"
  },
  {
    "text": "seemingly high level problem using quite low-level techniques specifically the",
    "start": "12840",
    "end": "19080"
  },
  {
    "text": "problem of cloud native developer experience and more specifically we will",
    "start": "19080",
    "end": "25439"
  },
  {
    "text": "discuss M which is a Dev tool written in Rust um that is for developing Cloud",
    "start": "25439",
    "end": "32558"
  },
  {
    "text": "native applications mird enables cluster connected but local execution of cloud",
    "start": "32559",
    "end": "39960"
  },
  {
    "text": "native applications and what that means and what it looks like will become clear as we move",
    "start": "39960",
    "end": "47239"
  },
  {
    "text": "on so as I said the high level challenge Mir addresses is cloud native developer",
    "start": "47320",
    "end": "53280"
  },
  {
    "text": "experience and more specifically just being able to run your code while developing it and the solution Mir",
    "start": "53280",
    "end": "61160"
  },
  {
    "text": "deploys is at the operating system process",
    "start": "61160",
    "end": "67759"
  },
  {
    "text": "level um first we're going to talk about what M is for once that is out of the",
    "start": "68200",
    "end": "73720"
  },
  {
    "text": "way we're going to take a look at some of the lowlevel technical details of the implementation of mird and then to wrap",
    "start": "73720",
    "end": "81240"
  },
  {
    "text": "it all up there's going to be a short life demo of Mir and during this talk I",
    "start": "81240",
    "end": "86439"
  },
  {
    "text": "hope you'll um understand why we went in this very lowlevel direction for MD and",
    "start": "86439",
    "end": "93799"
  },
  {
    "text": "also kind of how it works in general terms so first what M is",
    "start": "93799",
    "end": "101399"
  },
  {
    "text": "for running the code you're working on while developing is useful and helpful",
    "start": "101399",
    "end": "107840"
  },
  {
    "text": "and with many types of software that is a simple enough task but often when it",
    "start": "107840",
    "end": "113600"
  },
  {
    "text": "comes to Cloud native applications that can become not so trivial at all um but",
    "start": "113600",
    "end": "119520"
  },
  {
    "text": "I believe that we shouldn't abandon useful development patterns and practices because they're harder to",
    "start": "119520",
    "end": "126479"
  },
  {
    "text": "implement with Cloud native applications which is just develop the tool link to make them",
    "start": "126479",
    "end": "131959"
  },
  {
    "text": "easy but how do you run your Cloud native application while developing the application if it for example accesses",
    "start": "131959",
    "end": "140200"
  },
  {
    "text": "um files that only exist on the cluster or if it uses other services in",
    "start": "140200",
    "end": "147440"
  },
  {
    "text": "the cluster over IP or or if you need another service in order to generate",
    "start": "147440",
    "end": "153000"
  },
  {
    "text": "requests to your application and besides running your",
    "start": "153000",
    "end": "158360"
  },
  {
    "text": "code often is good and you might not want to spend time containerizing and deploying it after every little code",
    "start": "158360",
    "end": "164920"
  },
  {
    "text": "change you want to test out um so there are multiple existing approaches to",
    "start": "164920",
    "end": "170640"
  },
  {
    "text": "solving that problem they don't offer the same capabilities and they don't all result in the same kind of workflow uh",
    "start": "170640",
    "end": "179040"
  },
  {
    "text": "but other tools to for example try to um just enable remote debugging in the cloud or they're uh for running",
    "start": "179040",
    "end": "187480"
  },
  {
    "text": "everything locally on the development machine the approach Mir D takes is to",
    "start": "187480",
    "end": "194040"
  },
  {
    "text": "enable local development with remote access now there are other tools like",
    "start": "194040",
    "end": "199519"
  },
  {
    "text": "telepresence or G that also belong to the remal category um a term I learned",
    "start": "199519",
    "end": "204959"
  },
  {
    "text": "in Daniel Bryan's um Talk yesterday um so so but unlike those other tools M",
    "start": "204959",
    "end": "213080"
  },
  {
    "text": "works on the process level and not on the machine or uh maybe container level",
    "start": "213080",
    "end": "219439"
  },
  {
    "text": "which results in a different workflow for development and it also results in",
    "start": "219439",
    "end": "224760"
  },
  {
    "text": "some nice content for a technical talk um now the idea is to have optimal",
    "start": "224760",
    "end": "230560"
  },
  {
    "text": "development experience for running the code and for us that means really uh",
    "start": "230560",
    "end": "236720"
  },
  {
    "text": "just as simple as running non-cloud code so as simple as just clicking the run or",
    "start": "236720",
    "end": "243720"
  },
  {
    "text": "debug button in your IDE or some very simple shell",
    "start": "243720",
    "end": "250439"
  },
  {
    "text": "invocation in the same time we want developers to be able to run with meaningful data realistic conditions",
    "start": "250439",
    "end": "258959"
  },
  {
    "text": "that are similar to the conditions the code will meet in production um and also just being able",
    "start": "258959",
    "end": "265479"
  },
  {
    "text": "to utilize existing environments",
    "start": "265479",
    "end": "270840"
  },
  {
    "text": "so with Mir developers can execute their code locally either in a sh shell or in",
    "start": "270840",
    "end": "276280"
  },
  {
    "text": "their IDE and when the application accesses resources from the cluster it",
    "start": "276280",
    "end": "282800"
  },
  {
    "text": "gets actual traffic and actual data from the cluster even though it's actually running directly on the developers",
    "start": "282800",
    "end": "290600"
  },
  {
    "text": "computer and developers can run their code very easily and do things like",
    "start": "290600",
    "end": "296360"
  },
  {
    "text": "stepping through break points but still take advantage of realistic Cloud environments like",
    "start": "296360",
    "end": "302440"
  },
  {
    "text": "maybe some shared staging environment that is maintained in the team um all",
    "start": "302440",
    "end": "308240"
  },
  {
    "text": "the while being non-intrusive and not even changing the application that is",
    "start": "308240",
    "end": "313360"
  },
  {
    "text": "currently deployed on that cluster now um mird does that by running",
    "start": "313360",
    "end": "319919"
  },
  {
    "text": "the software just in a simple process on the developer machine and adding a thin layer of",
    "start": "319919",
    "end": "327280"
  },
  {
    "text": "transparent virtualization connecting the application's io points to the",
    "start": "327280",
    "end": "334560"
  },
  {
    "text": "[Applause] cluster and the way mirid achieves that magical effect is by injecting a dynamic",
    "start": "334590",
    "end": "342120"
  },
  {
    "text": "Library into the application's local process and hijacking some key",
    "start": "342120",
    "end": "347360"
  },
  {
    "text": "operations made by the application which leads us to the next part the cool",
    "start": "347360",
    "end": "352759"
  },
  {
    "text": "technical details so here we'll take a look at Key steps Mir takes in order to",
    "start": "352759",
    "end": "357880"
  },
  {
    "text": "hijack an application's calls and make them magically succeed even when trying",
    "start": "357880",
    "end": "363160"
  },
  {
    "text": "to access resources that don't exist on the system it's running on but do exist",
    "start": "363160",
    "end": "368479"
  },
  {
    "text": "on the kubernetes cluster the developer is working",
    "start": "368479",
    "end": "373160"
  },
  {
    "text": "with so the first thing we need to do is to get our code into the processes",
    "start": "373880",
    "end": "379520"
  },
  {
    "text": "memory the way we do it is when a user tells MD to run their application MD",
    "start": "379520",
    "end": "386080"
  },
  {
    "text": "executes that program but first it asks the dynamic Linker to also load our",
    "start": "386080",
    "end": "392080"
  },
  {
    "text": "Dynamic Library into the new processes memory you might know it as the LD",
    "start": "392080",
    "end": "397880"
  },
  {
    "text": "preload St on Linux on Mech OS uh the equivalent environment variable is dyld",
    "start": "397880",
    "end": "403840"
  },
  {
    "text": "insert libraries and Miry just adds a path like the path of its Dynamic library to that",
    "start": "403840",
    "end": "411479"
  },
  {
    "text": "environment variable and the D Dynamic Linker loads our code into the new",
    "start": "411479",
    "end": "417080"
  },
  {
    "text": "process in addition to that process his own code okay so now our code is in there",
    "start": "417080",
    "end": "425240"
  },
  {
    "text": "but we need it to run just by um virtue of being in the process that doesn't",
    "start": "425240",
    "end": "430840"
  },
  {
    "text": "mean our code actually runs as the user's application um doesn't call it as it",
    "start": "430840",
    "end": "437599"
  },
  {
    "text": "isn't and shouldn't be aware of mird so in order to ensure code runs we",
    "start": "437599",
    "end": "444479"
  },
  {
    "text": "use another feature Dynamic linkers offer which is what is sometimes called a Constructor",
    "start": "444479",
    "end": "450280"
  },
  {
    "text": "and that is basically uh the feature that code that is placed in a section a",
    "start": "450280",
    "end": "456000"
  },
  {
    "text": "specific section of a binary will be executed on Startup so Mir D um just",
    "start": "456000",
    "end": "464080"
  },
  {
    "text": "puts some code in that section of the binary and that code gets executed directly on process",
    "start": "464080",
    "end": "470639"
  },
  {
    "text": "start now as mentioned before uh mird is written in Rust so that's the syntax",
    "start": "470639",
    "end": "475919"
  },
  {
    "text": "we're seeing here right now and rust has this um package that basically lets us just mark",
    "start": "475919",
    "end": "484120"
  },
  {
    "text": "this section using this uh little attribute above our function so all we",
    "start": "484120",
    "end": "489280"
  },
  {
    "text": "need to do in our code in Mirror D code um is to Define such a function right",
    "start": "489280",
    "end": "495319"
  },
  {
    "text": "whenever whatever we want to run on Startup in the body of that function and that will run when the process",
    "start": "495319",
    "end": "503120"
  },
  {
    "text": "starts okay so now we have code execution and now there's question",
    "start": "503159",
    "end": "509560"
  },
  {
    "text": "question what do we run uh what do we use that ability",
    "start": "509560",
    "end": "515200"
  },
  {
    "text": "for but before we answer that question just to make uh to make sure we're all",
    "start": "515200",
    "end": "521039"
  },
  {
    "text": "on the same page a quick introduction into lip C so it's the C standard",
    "start": "521039",
    "end": "527279"
  },
  {
    "text": "Library it implements some useful low-level operations that most",
    "start": "527279",
    "end": "532959"
  },
  {
    "text": "applications need um it is used indirectly by almost",
    "start": "532959",
    "end": "538839"
  },
  {
    "text": "every Pro programming language so when write on python code you might not be",
    "start": "538839",
    "end": "544959"
  },
  {
    "text": "aware that that code when running will result in calls to lip C but when",
    "start": "544959",
    "end": "551279"
  },
  {
    "text": "running uh for example file. read in Python when that code is executed at",
    "start": "551279",
    "end": "557440"
  },
  {
    "text": "some point there's going to be a call to LEAP C's read function or some other similar uh lepy",
    "start": "557440",
    "end": "564800"
  },
  {
    "text": "function um and that is the case for most programming languages",
    "start": "564800",
    "end": "570040"
  },
  {
    "text": "with the notable exception of go on Linux which is why we had to do some",
    "start": "570040",
    "end": "575519"
  },
  {
    "text": "extra work in order to also support go on Linux but that is a bit outside of the scope",
    "start": "575519",
    "end": "582639"
  },
  {
    "text": "today so this indirect call to lip c means",
    "start": "584360",
    "end": "589640"
  },
  {
    "text": "that um most languages don't actually include",
    "start": "589640",
    "end": "595279"
  },
  {
    "text": "so programs written in most languages don't actually include Cisco directly in their code um more typically they would",
    "start": "595279",
    "end": "602560"
  },
  {
    "text": "include calls to LEAP C and leap C in turn um makes CIS calls whenever it's",
    "start": "602560",
    "end": "610800"
  },
  {
    "text": "necessary and that makes lip c a very good choke point for us for hijacking",
    "start": "610800",
    "end": "617279"
  },
  {
    "text": "operation does that are done by the application because basically almost or",
    "start": "617279",
    "end": "623480"
  },
  {
    "text": "virtually every application uh will use lipc for those operations",
    "start": "623480",
    "end": "631320"
  },
  {
    "text": "okay so now that we have code execution in the users process what we do around",
    "start": "631320",
    "end": "636440"
  },
  {
    "text": "on Startup is code that utilizes Freda to hook lib C functions um now first of",
    "start": "636440",
    "end": "643240"
  },
  {
    "text": "all Freda that is a dynamic instrumentation toolkit and that means it gives us an SDK for manipulating the",
    "start": "643240",
    "end": "651399"
  },
  {
    "text": "process's code while it's running and what I mean by hooking is",
    "start": "651399",
    "end": "658440"
  },
  {
    "text": "that we use free order to replace the first couple of binary instructions in",
    "start": "658440",
    "end": "664519"
  },
  {
    "text": "the functions code and with a jump to our code so for every such lib C function we",
    "start": "664519",
    "end": "673320"
  },
  {
    "text": "want to hook we just Define our own replacement function we call them",
    "start": "673320",
    "end": "679240"
  },
  {
    "text": "detours um in our rust code and we use Freda in order to make",
    "start": "679240",
    "end": "685399"
  },
  {
    "text": "sure that um whenever the user application calls those lib C functions",
    "start": "685399",
    "end": "691000"
  },
  {
    "text": "our detour functions will be executed instead so what we have to do there is",
    "start": "691000",
    "end": "696839"
  },
  {
    "text": "basically to create um a rust function with an identical signature um and also",
    "start": "696839",
    "end": "703880"
  },
  {
    "text": "notably the C calling convention um and basically yeah",
    "start": "703880",
    "end": "709800"
  },
  {
    "text": "whenever that Leb C function is called by the user application um our code will",
    "start": "709800",
    "end": "716320"
  },
  {
    "text": "be executed instead now the code that we put in those detours",
    "start": "716320",
    "end": "722040"
  },
  {
    "text": "right there isn't run on Startup right on Startup it's just the frea code like our",
    "start": "722040",
    "end": "728079"
  },
  {
    "text": "code that uses Freda that makes those hooks but whatever we put inside of",
    "start": "728079",
    "end": "733120"
  },
  {
    "text": "those functions will only run when the users application actually makes those calls to",
    "start": "733120",
    "end": "740399"
  },
  {
    "text": "lipy so now what do we do inside of those detours is first of all we check",
    "start": "743480",
    "end": "749920"
  },
  {
    "text": "the configuration or flags that the user passed to mird and then we decide if",
    "start": "749920",
    "end": "756240"
  },
  {
    "text": "this operation should be carried out locally on the developers machine or in",
    "start": "756240",
    "end": "761360"
  },
  {
    "text": "the cluster um everything is kind of configurable so for example um you can",
    "start": "761360",
    "end": "766680"
  },
  {
    "text": "tell me you want to read some files locally and other files in the cluster or um user might want to read everything",
    "start": "766680",
    "end": "775199"
  },
  {
    "text": "in the cluster but only write locally Etc um so after we made this decision um",
    "start": "775199",
    "end": "783560"
  },
  {
    "text": "mirr will send the operation to an agent running in the cluster now that agent is",
    "start": "783560",
    "end": "791120"
  },
  {
    "text": "spawned just in time when uh we start the Mir run and it is deleted automatically once",
    "start": "791120",
    "end": "798959"
  },
  {
    "text": "the run is over and basically that agent will get",
    "start": "798959",
    "end": "804720"
  },
  {
    "text": "that operation from the locally uh running um Dynamic library of",
    "start": "804720",
    "end": "810760"
  },
  {
    "text": "MD and it will perform that operation in the cloud return the data or the results",
    "start": "810760",
    "end": "818800"
  },
  {
    "text": "back to mird that will in turn uh make it available to the unsuspecting users",
    "start": "818800",
    "end": "825920"
  },
  {
    "text": "application so for example if a user's application tries to read from a file uh",
    "start": "825920",
    "end": "831680"
  },
  {
    "text": "M will check the configuration if it uh decides that it should be read in the cluster it will send a message to the",
    "start": "831680",
    "end": "839199"
  },
  {
    "text": "agent in the cluster the agent would read those bytes from the um file system",
    "start": "839199",
    "end": "846839"
  },
  {
    "text": "that is available to the deployed application return those bies back to",
    "start": "846839",
    "end": "852320"
  },
  {
    "text": "Mir Mir will populate the um applications buffer with those bites and",
    "start": "852320",
    "end": "858000"
  },
  {
    "text": "the application basically uh just doesn't even know it's not running on the cloud uh because for the application",
    "start": "858000",
    "end": "865000"
  },
  {
    "text": "it's exact the same effect as running in the cloud",
    "start": "865000",
    "end": "871040"
  },
  {
    "text": "now at this point you might be wondering how we even access the deployed applications data its file system",
    "start": "872079",
    "end": "879440"
  },
  {
    "text": "traffic Etc so first we need to know where to get the data from uh for that",
    "start": "879440",
    "end": "885720"
  },
  {
    "text": "users can specify a target for MD so that's either a pod a deployment or an",
    "start": "885720",
    "end": "891240"
  },
  {
    "text": "Argo rollout optionally with a specific container",
    "start": "891240",
    "end": "896959"
  },
  {
    "text": "now the most common use case case for Mir is for working on a new version of",
    "start": "896959",
    "end": "904519"
  },
  {
    "text": "an existing microservice and in that case you're going to have the stable",
    "start": "904519",
    "end": "910160"
  },
  {
    "text": "like the current version of that application already deployed in the cluster so that application is what you",
    "start": "910160",
    "end": "918000"
  },
  {
    "text": "would typically use as a target for MD as that's the resource that's the",
    "start": "918000",
    "end": "923320"
  },
  {
    "text": "application that has the data that your local application needs okay",
    "start": "923320",
    "end": "930959"
  },
  {
    "text": "now next thing that is important to know is that our agent uh runs on a pod on",
    "start": "931519",
    "end": "937519"
  },
  {
    "text": "the same node as the Target or as one of the PODS of the target",
    "start": "937519",
    "end": "944199"
  },
  {
    "text": "um it then joins the target's Linux namespaces now here it's important to",
    "start": "944199",
    "end": "951040"
  },
  {
    "text": "note that those are Linux namespaces that are unrelated to kubernetes name",
    "start": "951040",
    "end": "957399"
  },
  {
    "text": "namespaces and in order order to read files from the targets file system um m",
    "start": "957399",
    "end": "963600"
  },
  {
    "text": "the m agent accesses paths relative to the Target containers root",
    "start": "963600",
    "end": "972240"
  },
  {
    "text": "path so that was like the cool do-it-yourself way to get this data but",
    "start": "975160",
    "end": "980759"
  },
  {
    "text": "ever since epimeral containers were introduced uh we also support just running the M agent in an AAL container",
    "start": "980759",
    "end": "988920"
  },
  {
    "text": "and we'll probably be moving to make that the default um so since AAL containers are",
    "start": "988920",
    "end": "996319"
  },
  {
    "text": "designed are meant to enable debugging a running container uh they already get",
    "start": "996319",
    "end": "1002880"
  },
  {
    "text": "all of the containers data so they access the same resources um so over there we don't even have to do any cool",
    "start": "1002880",
    "end": "1009759"
  },
  {
    "text": "tricks or anything special in order to access that data so I mentioned resources that",
    "start": "1009759",
    "end": "1017279"
  },
  {
    "text": "mirror the access of the Target and for like the main ones that we uh support",
    "start": "1017279",
    "end": "1024160"
  },
  {
    "text": "are networking so that's both incoming connections and also initiating",
    "start": "1024160",
    "end": "1029640"
  },
  {
    "text": "connections um and also DNS resolution in the",
    "start": "1029640",
    "end": "1034798"
  },
  {
    "text": "cluster and then there's uh file system access and also environment",
    "start": "1034799",
    "end": "1041678"
  },
  {
    "text": "variables so zooming out a bit we can see that the main components of mirror D",
    "start": "1042760",
    "end": "1048360"
  },
  {
    "text": "are first the MD binary um installed on the developers machine or maybe uh also",
    "start": "1048360",
    "end": "1055679"
  },
  {
    "text": "um a plug-in for their IDE then there's the dynamic library",
    "start": "1055679",
    "end": "1063000"
  },
  {
    "text": "that is injected into the users process and uh there is the agent",
    "start": "1063000",
    "end": "1069799"
  },
  {
    "text": "running in the users",
    "start": "1069799",
    "end": "1073880"
  },
  {
    "text": "Cloud so the dynamic Library um has Magics the calls by the user's",
    "start": "1075480",
    "end": "1080640"
  },
  {
    "text": "application sends them to the agent the agent sends data back to the dynamic Library the dynamic Library makes that",
    "start": "1080640",
    "end": "1087440"
  },
  {
    "text": "AG that data available to the users",
    "start": "1087440",
    "end": "1092240"
  },
  {
    "text": "application okay now after we've been to this uh short journey through some of",
    "start": "1094039",
    "end": "1100080"
  },
  {
    "text": "the technical details of mird let's see how it looks like when",
    "start": "1100080",
    "end": "1105960"
  },
  {
    "text": "users use it and for that we have this little example",
    "start": "1105960",
    "end": "1111240"
  },
  {
    "text": "setup with some custom microservices written in go together with a reddis and",
    "start": "1111240",
    "end": "1117240"
  },
  {
    "text": "a cfra service um all deployed on our cluster and we'll go through a scenario",
    "start": "1117240",
    "end": "1122840"
  },
  {
    "text": "of a developer that is working on the IP visit counter",
    "start": "1122840",
    "end": "1128679"
  },
  {
    "text": "microservice um so now let's go to goland work over there and see if the",
    "start": "1128679",
    "end": "1135520"
  },
  {
    "text": "Wi-Fi will let us um work with the",
    "start": "1135520",
    "end": "1140720"
  },
  {
    "text": "cluster okay can you also hear me with this one no can I have this one I need",
    "start": "1151960",
    "end": "1158480"
  },
  {
    "text": "both hands for typing does this work now that one okay that one",
    "start": "1158480",
    "end": "1165200"
  },
  {
    "text": "works okay um so right now we're in the go land IDE the jet jet BRS IDE for go",
    "start": "1165200",
    "end": "1172760"
  },
  {
    "text": "and I already have the um mirror D plugin installed on my IDE so I have",
    "start": "1172760",
    "end": "1179200"
  },
  {
    "text": "this little uh mird icon that indicates that mird is",
    "start": "1179200",
    "end": "1184320"
  },
  {
    "text": "enabled and let's also take a look at the resources on my cluster and see that",
    "start": "1184320",
    "end": "1190799"
  },
  {
    "text": "we kind of recognize the same ones from that diagram we saw earlier um so just a",
    "start": "1190799",
    "end": "1198120"
  },
  {
    "text": "quick look at this application we're going to debug U the like couple of functions it has here in this main go",
    "start": "1198120",
    "end": "1204559"
  },
  {
    "text": "file there is a setup Reddit and setup CUA in order to set up connections to those um",
    "start": "1204559",
    "end": "1209720"
  },
  {
    "text": "Services we have a load config um method function that loads a configuration for",
    "start": "1209720",
    "end": "1216320"
  },
  {
    "text": "this application um get count is kind of like the main uh function that's going",
    "start": "1216320",
    "end": "1221679"
  },
  {
    "text": "to handle requests incoming requests HTTP requests and there is the main",
    "start": "1221679",
    "end": "1227360"
  },
  {
    "text": "function that uh starts This Server um okay so we got mird",
    "start": "1227360",
    "end": "1234200"
  },
  {
    "text": "enabled I have my breakpoint here in the main function um I have some very basic",
    "start": "1234200",
    "end": "1241520"
  },
  {
    "text": "mirror de configuration file which is uh almost like the default configuration",
    "start": "1241520",
    "end": "1246840"
  },
  {
    "text": "file and now I'm just going to hit debug and start",
    "start": "1246840",
    "end": "1252240"
  },
  {
    "text": "running um now of course what's happening right now is that m is",
    "start": "1252240",
    "end": "1257960"
  },
  {
    "text": "spawning uh an agent pods in my cluster um so with bed connectivity that might",
    "start": "1257960",
    "end": "1263880"
  },
  {
    "text": "take a bit uh but we're already there so first of all let's step into that load",
    "start": "1263880",
    "end": "1269159"
  },
  {
    "text": "config function and see what that looks like so here we can see that the",
    "start": "1269159",
    "end": "1275320"
  },
  {
    "text": "application um uses Viper so go package in order to populate the fields of a",
    "start": "1275320",
    "end": "1281200"
  },
  {
    "text": "config object with values it gets from environment variables now I actually don't have",
    "start": "1281200",
    "end": "1287880"
  },
  {
    "text": "those environment VAR Ables defined on my machine also not in this uh launch configuration but if we step through and",
    "start": "1287880",
    "end": "1296080"
  },
  {
    "text": "go to kind of like the end of this function we can see that the config was successfully",
    "start": "1296080",
    "end": "1303039"
  },
  {
    "text": "populated with values that um came from those environment variables and the reason for that is that M fetched those",
    "start": "1303039",
    "end": "1311480"
  },
  {
    "text": "environment variables from the cluster and made them available to my application here okay so if we step out",
    "start": "1311480",
    "end": "1319880"
  },
  {
    "text": "we can see that now the application uses those values from the environment variables so like the values in the",
    "start": "1319880",
    "end": "1326000"
  },
  {
    "text": "configuration in order to do the next operations so first of all it's going to read a file from a path that was passed",
    "start": "1326000",
    "end": "1333320"
  },
  {
    "text": "in this configuration um and right here we can kind of",
    "start": "1333320",
    "end": "1339000"
  },
  {
    "text": "like do a little verification and see that this path of course doesn't",
    "start": "1339000",
    "end": "1344720"
  },
  {
    "text": "actually exist on my system but when",
    "start": "1344720",
    "end": "1350320"
  },
  {
    "text": "the when this application reads that path uh it actually succeeds and it gets data um and of course we now know that",
    "start": "1350320",
    "end": "1358200"
  },
  {
    "text": "this data came from the cluster the application doesn't know it right like it doesn't it isn't aware of MD um but",
    "start": "1358200",
    "end": "1365360"
  },
  {
    "text": "it's just like it's running in the cluster and has access to that file system okay next thing the application",
    "start": "1365360",
    "end": "1372000"
  },
  {
    "text": "is going to set up a connection to redis we're going to step in and we can see that it uses another value from conf",
    "start": "1372000",
    "end": "1378640"
  },
  {
    "text": "from the configuration as the Rus host now also",
    "start": "1378640",
    "end": "1384840"
  },
  {
    "text": "there right if I just try to connect to that uh redist",
    "start": "1384840",
    "end": "1390240"
  },
  {
    "text": "host directly from my machine without using mird um Cur is going to tell me",
    "start": "1390240",
    "end": "1395320"
  },
  {
    "text": "that it can't even um resolve that host and that makes sense because that name",
    "start": "1395320",
    "end": "1400799"
  },
  {
    "text": "is like internal to the cluster but the application is able to",
    "start": "1400799",
    "end": "1408080"
  },
  {
    "text": "create the connection so it's able to uh resolve the the host and also like to send the reddish",
    "start": "1408080",
    "end": "1413880"
  },
  {
    "text": "ping and that is of course because both of those operations happened were",
    "start": "1413880",
    "end": "1419520"
  },
  {
    "text": "carried out in the cluster so both DNS resolution and um initiating an outgoing",
    "start": "1419520",
    "end": "1425880"
  },
  {
    "text": "connection to that R service",
    "start": "1425880",
    "end": "1432320"
  },
  {
    "text": "okay moving on I'm going to skip over that uh setup Kafka function because",
    "start": "1432320",
    "end": "1438200"
  },
  {
    "text": "it's uh really probably very similar to that setup rce function and the next thing the",
    "start": "1438200",
    "end": "1444440"
  },
  {
    "text": "application does is to define the two routes is going to handle so one is for the health checks defined on the cluster",
    "start": "1444440",
    "end": "1451600"
  },
  {
    "text": "and the other is the like main one the actual one that is going to handle so let's just let the application",
    "start": "1451600",
    "end": "1458760"
  },
  {
    "text": "start and start receiving requests and if I go over to that console I can see",
    "start": "1458760",
    "end": "1464039"
  },
  {
    "text": "that we can already see incoming health checks from the CL",
    "start": "1464039",
    "end": "1469960"
  },
  {
    "text": "cluster um and if we go over to the",
    "start": "1469960",
    "end": "1475360"
  },
  {
    "text": "terminal sorry we can also generate requests to",
    "start": "1476880",
    "end": "1483440"
  },
  {
    "text": "the cluster right so it's not to Local Host it's to um the actual cluster um",
    "start": "1483440",
    "end": "1490159"
  },
  {
    "text": "exposed in the internet and I'm going to generate that request and we can see that my local",
    "start": "1490159",
    "end": "1497080"
  },
  {
    "text": "breakpoint uh was hit because we forwarded that applic that request to my",
    "start": "1497080",
    "end": "1503880"
  },
  {
    "text": "local application and now I can basically step through this function and see how my application handles a real",
    "start": "1503880",
    "end": "1511480"
  },
  {
    "text": "request that was actually sent to the cluster now if I go back to",
    "start": "1511480",
    "end": "1520080"
  },
  {
    "text": "um the terminal again um so this response that K received here was",
    "start": "1520080",
    "end": "1527200"
  },
  {
    "text": "actually not generated by my local application but by the remote request a",
    "start": "1527200",
    "end": "1534760"
  },
  {
    "text": "remote application and that is because in its default mode of operation um",
    "start": "1534760",
    "end": "1540360"
  },
  {
    "text": "mirror D just mirrors the traffic from the cluster to the local application",
    "start": "1540360",
    "end": "1545640"
  },
  {
    "text": "which means um it duplicates that traffic sends it over to the local lense",
    "start": "1545640",
    "end": "1552360"
  },
  {
    "text": "of mury and um it is actually the remote",
    "start": "1552360",
    "end": "1557760"
  },
  {
    "text": "application that handles that handles um those requests",
    "start": "1557760",
    "end": "1564360"
  },
  {
    "text": "um there is also a steel mode where M like steals that application away from",
    "start": "1564360",
    "end": "1569880"
  },
  {
    "text": "the remote application and for that there's also HTTP filters in order to",
    "start": "1569880",
    "end": "1576640"
  },
  {
    "text": "steal only some of the requests for example you only want to steal requests uh that you generators and not teammate",
    "start": "1576640",
    "end": "1584000"
  },
  {
    "text": "or maybe you don't want to steal all of those um health check um request because they're not interesting for your",
    "start": "1584000",
    "end": "1589880"
  },
  {
    "text": "debugging um okay so that's that um we going to go back to the",
    "start": "1589880",
    "end": "1595320"
  },
  {
    "text": "presentation that will take a",
    "start": "1595320",
    "end": "1598600"
  },
  {
    "text": "second okay",
    "start": "1616679",
    "end": "1620240"
  },
  {
    "text": "nice okay so yeah I think we still have AIT a little bit of time so let's look at",
    "start": "1624000",
    "end": "1629880"
  },
  {
    "text": "another very lowlevel challenge we had to overcome in order to create",
    "start": "1629880",
    "end": "1635240"
  },
  {
    "text": "mird um so at one point I mentioned injecting a damic library on mechos but",
    "start": "1635240",
    "end": "1643000"
  },
  {
    "text": "this is actually not at all as simple as it is on Linux",
    "start": "1643000",
    "end": "1650039"
  },
  {
    "text": "so in order to demonstrate that uh or yeah to short that challenge this is",
    "start": "1650039",
    "end": "1655679"
  },
  {
    "text": "like the um minimal example for injecting code right so we have um on",
    "start": "1655679",
    "end": "1663480"
  },
  {
    "text": "the left side a very simplistic binary uh it's a rust code that I compiled to a",
    "start": "1663480",
    "end": "1670919"
  },
  {
    "text": "binary called hello binary and in the right side uh code that I compiled into",
    "start": "1670919",
    "end": "1678880"
  },
  {
    "text": "a dynamic library that prints a line on",
    "start": "1678880",
    "end": "1684320"
  },
  {
    "text": "Startup now if we just run that binary by its own this is what it looks like this is to be expected right um and once",
    "start": "1687679",
    "end": "1694840"
  },
  {
    "text": "we inject that Dynamic Library we see both of those prints and that is basically like this very simple",
    "start": "1694840",
    "end": "1701480"
  },
  {
    "text": "principle is the same method of injection that MD",
    "start": "1701480",
    "end": "1707120"
  },
  {
    "text": "uses but now uh what happens if I try to run",
    "start": "1707120",
    "end": "1713519"
  },
  {
    "text": "some other program maybe in a non-c compiled language like Python and reminder this is all only on Mech OS um",
    "start": "1713519",
    "end": "1721720"
  },
  {
    "text": "so what happens when I try to inject that same uh Library into that",
    "start": "1721720",
    "end": "1728480"
  },
  {
    "text": "code so now that we can see that it doesn't work right we only see the print um of that original application and we",
    "start": "1728480",
    "end": "1735799"
  },
  {
    "text": "don't see the print uh from our Dynamic Library so it means that injection",
    "start": "1735799",
    "end": "1741320"
  },
  {
    "text": "failed now the reason this happens um is basically because of",
    "start": "1741320",
    "end": "1746600"
  },
  {
    "text": "a security mechanism on mechos put in place by Apple where where when a binary",
    "start": "1746600",
    "end": "1754120"
  },
  {
    "text": "binary meets some uh set of not very documented criteria um this environment variables",
    "start": "1754120",
    "end": "1762640"
  },
  {
    "text": "this environment variable is not respected and is also stripped off of any of the descendant processes of this",
    "start": "1762640",
    "end": "1769960"
  },
  {
    "text": "run um now over here what I ran was like a python script right um and you",
    "start": "1769960",
    "end": "1777840"
  },
  {
    "text": "wouldn't expect it to be protected by those criteria and you would be right um",
    "start": "1777840",
    "end": "1783279"
  },
  {
    "text": "because this python script I used as an executable right here is not the actual",
    "start": "1783279",
    "end": "1788840"
  },
  {
    "text": "binary that is executed right because when we have this script we have to look at the shank that's like the hash",
    "start": "1788840",
    "end": "1795440"
  },
  {
    "text": "exclamation mark in the first line and this is what determines what ex what",
    "start": "1795440",
    "end": "1800559"
  },
  {
    "text": "binary is going to be executed in this case it's just NV and N receives uh",
    "start": "1800559",
    "end": "1806120"
  },
  {
    "text": "Python 3 as an argument so and will decide what binary",
    "start": "1806120",
    "end": "1813120"
  },
  {
    "text": "to execute next um re like U depending on that argument",
    "start": "1813120",
    "end": "1821120"
  },
  {
    "text": "and for many tools for many interpreters that doesn't even end that so uh for",
    "start": "1821120",
    "end": "1827000"
  },
  {
    "text": "many python distributions or node distributions um just running a script results in a very long chain of",
    "start": "1827000",
    "end": "1834360"
  },
  {
    "text": "executions so like first you actually um execute EnV EnV executes some a script",
    "start": "1834360",
    "end": "1842399"
  },
  {
    "text": "that then searches for for the right installation on your system that then",
    "start": "1842399",
    "end": "1848320"
  },
  {
    "text": "executes EnV again and EnV will then like find at the end of this point uh",
    "start": "1848320",
    "end": "1855320"
  },
  {
    "text": "the right binary so like in the this case some python binary will be found",
    "start": "1855320",
    "end": "1860559"
  },
  {
    "text": "and will be executed so what happens in this situation is that NV is that binary",
    "start": "1860559",
    "end": "1867760"
  },
  {
    "text": "that is protected by Apple or by the mechanism on mechos and this is why",
    "start": "1867760",
    "end": "1873600"
  },
  {
    "text": "injection doesn't work in this case but of course we do want to support um all languages also on",
    "start": "1873600",
    "end": "1879840"
  },
  {
    "text": "me um so we we did have to like find a",
    "start": "1879840",
    "end": "1885559"
  },
  {
    "text": "solution for that and while the complete solution is quite involved and complicated um and you can if you're",
    "start": "1885559",
    "end": "1893200"
  },
  {
    "text": "interested you can see it in our code on GitHub or also we wrote a blog post about it but in very general TS in very",
    "start": "1893200",
    "end": "1899960"
  },
  {
    "text": "simple terms um what we do is we first extract um just the binary code out of",
    "start": "1899960",
    "end": "1907240"
  },
  {
    "text": "the executable binary we then write it into a new file",
    "start": "1907240",
    "end": "1913320"
  },
  {
    "text": "we sign it on the go and we basically run that new file instead of the the old",
    "start": "1913320",
    "end": "1918440"
  },
  {
    "text": "one and now you might remember that um yeah we many files are like many runs",
    "start": "1918440",
    "end": "1925600"
  },
  {
    "text": "are actually like chains of executions of multiple binaries so in order to um",
    "start": "1925600",
    "end": "1931120"
  },
  {
    "text": "also support that we hook another libc functions uh called",
    "start": "1931120",
    "end": "1937000"
  },
  {
    "text": "execve so that we can do all of that process on the go every time um a binary",
    "start": "1937000",
    "end": "1943919"
  },
  {
    "text": "executes a new binary",
    "start": "1943919",
    "end": "1949840"
  },
  {
    "text": "okay so that was a quick tour through the internals of mird um mird has a lot more interesting",
    "start": "1950080",
    "end": "1956960"
  },
  {
    "text": "implementation details and also cool features that I didn't have time to go into today uh but if you're",
    "start": "1956960",
    "end": "1964039"
  },
  {
    "text": "interested please just check out our code on GitHub or our website and now",
    "start": "1964039",
    "end": "1971279"
  },
  {
    "text": "you've seen how easy it is to just uh test out I hope you'll try it out and let me know what you think and I also",
    "start": "1971279",
    "end": "1977399"
  },
  {
    "text": "recommend joining our Discord for Live miror support and questions or also just",
    "start": "1977399",
    "end": "1982519"
  },
  {
    "text": "to chat and um if you have any questions or want to talk to me personally uh",
    "start": "1982519",
    "end": "1988279"
  },
  {
    "text": "please just feel free to uh come to me after the talk and say hi or",
    "start": "1988279",
    "end": "1993760"
  },
  {
    "text": "anytime um also I have some limited amount of M and Mur swag with me if",
    "start": "1993760",
    "end": "2000279"
  },
  {
    "text": "anyone's interesting I just come to me after the talk um so thank you very much for your",
    "start": "2000279",
    "end": "2006200"
  },
  {
    "text": "attention um I think we might have time for like a couple of",
    "start": "2006200",
    "end": "2012279"
  },
  {
    "text": "questions yeah so we do have time for a couple of questions so yeah if there are any questions we",
    "start": "2012279",
    "end": "2019919"
  },
  {
    "text": "can do that now yeah thank",
    "start": "2019919",
    "end": "2025200"
  },
  {
    "text": "you [Music]",
    "start": "2025200",
    "end": "2032880"
  },
  {
    "text": "thanks hey thanks for the the talk really nice um I'll does the traffic",
    "start": "2032880",
    "end": "2038720"
  },
  {
    "text": "from the cluster flow into into the application running on your laptop I don't think you went through that part",
    "start": "2038720",
    "end": "2045679"
  },
  {
    "text": "right so the when the start runs MD first uh spawns the agent um in the",
    "start": "2045679",
    "end": "2052358"
  },
  {
    "text": "cluster and then it creates a connection with that agent um now that connection",
    "start": "2052359",
    "end": "2059398"
  },
  {
    "text": "is basically based on uh port foring to into the cluster so merely like um yeah just",
    "start": "2059399",
    "end": "2067358"
  },
  {
    "text": "create creates kind of like a TCP connection directly with the um agent that runs in the cloud and then like uh",
    "start": "2067359",
    "end": "2074440"
  },
  {
    "text": "communicates with the agent in its own protocol",
    "start": "2074440",
    "end": "2079398"
  },
  {
    "text": "yeah yeah thank you for the talk very interesting um the question is that sounds fantastic um is there any reason",
    "start": "2081040",
    "end": "2087960"
  },
  {
    "text": "why this would not work for specific use cases m s oh any us cases that wouldn't",
    "start": "2087960",
    "end": "2095200"
  },
  {
    "text": "work yes um yeah so there there are some cases so first of all um like the most",
    "start": "2095200",
    "end": "2100680"
  },
  {
    "text": "obvious or like basic one um we do it by hooking lip C functions so if you were",
    "start": "2100680",
    "end": "2106880"
  },
  {
    "text": "to write your like own assembly code that directly does c calls and doesn't",
    "start": "2106880",
    "end": "2112920"
  },
  {
    "text": "uh include any leap C codes um any leap C calls and like you couldn't uh use r",
    "start": "2112920",
    "end": "2118040"
  },
  {
    "text": "with that um yeah I guess we don't even try to support that um there are static",
    "start": "2118040",
    "end": "2124800"
  },
  {
    "text": "binaries so because uh the whole thing uh is like or the whole mechanism is",
    "start": "2124800",
    "end": "2130800"
  },
  {
    "text": "about uh is built around injecting Dynamic libraries um static binaries are",
    "start": "2130800",
    "end": "2137520"
  },
  {
    "text": "um yeah not like that it's not going to work for for SE binaries uh but I think",
    "start": "2137520",
    "end": "2142640"
  },
  {
    "text": "there are like uh simple enough work RS for that um like maybe just forcing um a",
    "start": "2142640",
    "end": "2149280"
  },
  {
    "text": "dynamic Library like a dynamic binary build and I think we might have like if",
    "start": "2149280",
    "end": "2155760"
  },
  {
    "text": "there are other cases I think we probably already have them documented on our website and if we don't we uh",
    "start": "2155760",
    "end": "2162319"
  },
  {
    "text": "welcome contributions also to the documentation hey",
    "start": "2162319",
    "end": "2168640"
  },
  {
    "text": "yeah good talk uh hey is the miror this solution for",
    "start": "2168640",
    "end": "2176520"
  },
  {
    "text": "the local machine is bounded by uh Linux or Mac uh only or is it also Windows",
    "start": "2176520",
    "end": "2185760"
  },
  {
    "text": "enabled so for window Windows um you can run it over",
    "start": "2185760",
    "end": "2191480"
  },
  {
    "text": "WSL um WSL so uh windows subsystem for Linux um yeah I think like we we might",
    "start": "2191480",
    "end": "2199800"
  },
  {
    "text": "like one day also have like kind of like more native support in Windows um like",
    "start": "2199800",
    "end": "2205119"
  },
  {
    "text": "um that would be like I don't know maybe yeah we we accept contributions on",
    "start": "2205119",
    "end": "2210880"
  },
  {
    "text": "that on that issue I think it's like a very popular issue on GitHub but like the one the team is most uh afraid of of",
    "start": "2210880",
    "end": "2219000"
  },
  {
    "text": "ever being prioritized so yeah okay another one okay hi yeah I actually",
    "start": "2219000",
    "end": "2224160"
  },
  {
    "text": "wanted to ask some question but on top of that um uh do you have any idea to support bare metal or it's only about",
    "start": "2224160",
    "end": "2231760"
  },
  {
    "text": "kubernetes um are you asking because of the name or uh oh no actually not okay",
    "start": "2231760",
    "end": "2238800"
  },
  {
    "text": "um I think right now we we only support uh like kubernetes also maybe like uh",
    "start": "2238800",
    "end": "2245520"
  },
  {
    "text": "similar Solutions like similar distributions right um but I I'm not",
    "start": "2245520",
    "end": "2251359"
  },
  {
    "text": "aware of any like plans for bare metal but feel free to suggested on GitHub ask",
    "start": "2251359",
    "end": "2256760"
  },
  {
    "text": "it on Discord y uh so gilp C has version symbl",
    "start": "2256760",
    "end": "2264200"
  },
  {
    "text": "so what happens if I call a symbol that is uh not available for its version in the pot",
    "start": "2264200",
    "end": "2271200"
  },
  {
    "text": "that you Spa on kubernetes what happens in the case um so the Lipsy hooks all all like",
    "start": "2271200",
    "end": "2278720"
  },
  {
    "text": "happen on locally they're they're not like they don't happens on in the cloud at all right they're sorry did I",
    "start": "2278720",
    "end": "2287040"
  },
  {
    "text": "misunderstood the question it's not my question um in my gipc locally the symbols are vergin and they can be newer",
    "start": "2287040",
    "end": "2295319"
  },
  {
    "text": "than on a remote host um okay so",
    "start": "2295319",
    "end": "2301119"
  },
  {
    "text": "basically um with like we implement the operations",
    "start": "2301119",
    "end": "2307040"
  },
  {
    "text": "um not like one to one so the uh operation that the agent carries",
    "start": "2307040",
    "end": "2312839"
  },
  {
    "text": "out on the cluster is not just run that exact same leap C there is some level of",
    "start": "2312839",
    "end": "2320200"
  },
  {
    "text": "of abstraction so basically um it would still work like also in the like it",
    "start": "2320200",
    "end": "2326359"
  },
  {
    "text": "doesn't depend on the lipy versions being the same or whatever",
    "start": "2326359",
    "end": "2332160"
  },
  {
    "text": "yeah I have a two questions um is this particular to the the lip SE or also",
    "start": "2334760",
    "end": "2340920"
  },
  {
    "text": "supports muscle or the other lipy implementations",
    "start": "2340920",
    "end": "2346000"
  },
  {
    "text": "um which oh like which version of flip C or yeah just is it just the version or",
    "start": "2346000",
    "end": "2351920"
  },
  {
    "text": "does it also support muscle oh um actually I'm not sure like you know how",
    "start": "2351920",
    "end": "2357319"
  },
  {
    "text": "sorry yeah should also work with older ones um okay but yeah if it doesn't please let us know and but like it",
    "start": "2357319",
    "end": "2364599"
  },
  {
    "text": "should be supported we're not aware of like any problem with older lips okay and the traffic that's forwarded",
    "start": "2364599",
    "end": "2369839"
  },
  {
    "text": "between the kuet cluster and local uh your local application is that encrypted",
    "start": "2369839",
    "end": "2375040"
  },
  {
    "text": "in any kind or um right yeah so like it's wors over",
    "start": "2375040",
    "end": "2382800"
  },
  {
    "text": "Port foring so um like by the same encryption of uh the cuc port foring",
    "start": "2382800",
    "end": "2389640"
  },
  {
    "text": "okay yeah thank you thanks cool okay we're out of time for",
    "start": "2389640",
    "end": "2396000"
  },
  {
    "text": "today uh if you have any more questions or just want to say hi or secure some swag just let me know",
    "start": "2396000",
    "end": "2404760"
  }
]