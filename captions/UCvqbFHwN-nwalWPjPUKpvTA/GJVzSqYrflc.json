[
  {
    "start": "0",
    "end": "26000"
  },
  {
    "text": "hello everyone um my name is hari dutchev and i'm a software engineer at buoyance",
    "start": "80",
    "end": "6640"
  },
  {
    "text": "the creators of linkerty today uh we're going to be doing a deep",
    "start": "6640",
    "end": "12320"
  },
  {
    "text": "dive uh into linker d and we are going to focus on the multi-cluster support that has been",
    "start": "12320",
    "end": "19199"
  },
  {
    "text": "much anticipated and released recently in 2.8",
    "start": "19199",
    "end": "25039"
  },
  {
    "text": "so the agenda for today is the following we're going to do a quick overview of",
    "start": "25039",
    "end": "30880"
  },
  {
    "start": "26000",
    "end": "26000"
  },
  {
    "text": "what service meshes why you might need one and how linkery works internally",
    "start": "30880",
    "end": "36559"
  },
  {
    "text": "we're going to cover the multi-cluster concepts that govern the implementation of this",
    "start": "36559",
    "end": "41840"
  },
  {
    "text": "feature we're going to look at the architecture and how we designed it",
    "start": "41840",
    "end": "47520"
  },
  {
    "text": "and of course we are also going to jump into the terminal and um so i can show you how using this",
    "start": "47520",
    "end": "53920"
  },
  {
    "text": "feature feels like and then we are going to dive even deeper to track the life of a request across",
    "start": "53920",
    "end": "61120"
  },
  {
    "text": "clusters and i think that's going to be particularly interesting because it's going to give you um it's going to",
    "start": "61120",
    "end": "67600"
  },
  {
    "text": "give you a a bit it's going to give a bit more a deep knowledge into how the whole the whole",
    "start": "67600",
    "end": "75439"
  },
  {
    "text": "system has been put together and then if you have any questions we're going to have a q a time for q a so you can ask these",
    "start": "75439",
    "end": "83680"
  },
  {
    "text": "so much has been said about service meshes and what this is and why",
    "start": "83680",
    "end": "90400"
  },
  {
    "text": "you might need one and i will try to summarize it with a quote",
    "start": "90400",
    "end": "99439"
  },
  {
    "text": "uh that i think is quite precise and um concise in the same way",
    "start": "99439",
    "end": "106000"
  },
  {
    "text": "so in a typical distributed system namely you might think that the most the only thing that",
    "start": "106000",
    "end": "112479"
  },
  {
    "text": "matters is that amb can exchange packets but as your system grows and it becomes more complex",
    "start": "112479",
    "end": "119200"
  },
  {
    "text": "it becomes apparent that this is not the only thing that's uh that's that that matters so",
    "start": "119200",
    "end": "126320"
  },
  {
    "text": "what linker d gives you is it gives you the guarantee that amd can",
    "start": "126320",
    "end": "131760"
  },
  {
    "text": "exchange packets in a way that validates the identity on both sides has clear authorization semantics",
    "start": "131760",
    "end": "139840"
  },
  {
    "text": "is confidential to third parties and is measurable and inspectable so",
    "start": "139840",
    "end": "146400"
  },
  {
    "text": "to put that in a more diagrammatic context in your typical distributed",
    "start": "146400",
    "end": "154720"
  },
  {
    "start": "152000",
    "end": "152000"
  },
  {
    "text": "system you might have something like this right you will have a client that",
    "start": "154720",
    "end": "160959"
  },
  {
    "text": "talks to an api gateway which happens to live on the kubernetes cluster",
    "start": "160959",
    "end": "166319"
  },
  {
    "text": "and when the request hits this api gateway it's routed to one",
    "start": "166319",
    "end": "174480"
  },
  {
    "text": "internal service and any of these services might talk to a database or hit a redis cache",
    "start": "174480",
    "end": "182640"
  },
  {
    "text": "or for that matter talk to a third-party api over the internet and this is all fine",
    "start": "182640",
    "end": "190400"
  },
  {
    "text": "as long as it works but things become things start to become a bit more",
    "start": "190400",
    "end": "197360"
  },
  {
    "text": "interesting when when problems arise so for example your database might get",
    "start": "197360",
    "end": "204560"
  },
  {
    "text": "locked up or the data center where it is might be set on fire",
    "start": "204560",
    "end": "211599"
  },
  {
    "text": "or you might deploy a version of your service that is",
    "start": "211599",
    "end": "219599"
  },
  {
    "text": "that exhibits some sort of a performance regression so now your one of your services is slow",
    "start": "219599",
    "end": "226720"
  },
  {
    "text": "and that reflects on the runtime characteristics of your entire system",
    "start": "226720",
    "end": "231920"
  },
  {
    "text": "or for that matter um you might lose the connectivity to the outside world",
    "start": "231920",
    "end": "237280"
  },
  {
    "text": "and not be able to hit your external third party api",
    "start": "237280",
    "end": "243360"
  },
  {
    "text": "and when any of these problems arise you want to be able to",
    "start": "243360",
    "end": "250959"
  },
  {
    "text": "make an informed decision diagnose diagnose things quickly so your teams can react in a",
    "start": "250959",
    "end": "258079"
  },
  {
    "text": "prompt manner and resolve the problem but when you have a complex system that becomes",
    "start": "258079",
    "end": "263680"
  },
  {
    "text": "hard so what's the way linker this solves this problem",
    "start": "263680",
    "end": "270720"
  },
  {
    "text": "is by injecting a proxy so it's a sidecar proxy container and",
    "start": "270720",
    "end": "277040"
  },
  {
    "text": "all of your meshed parts of your meshed workloads so now um this proxy is running alongside your",
    "start": "277040",
    "end": "286080"
  },
  {
    "text": "application containers and all your traffic goes through it so instead of looking",
    "start": "286080",
    "end": "292160"
  },
  {
    "text": "like that your traffic pattern starts starts to look a bit like this so now all the traffic is shifted",
    "start": "292160",
    "end": "299919"
  },
  {
    "text": "through the proxy in addition to that there is the control plane component which it's rather a set of components set of",
    "start": "299919",
    "end": "307600"
  },
  {
    "text": "workloads that linger d runs that um",
    "start": "307600",
    "end": "313600"
  },
  {
    "text": "you can think of it as a management console for the proxy and for for the",
    "start": "313840",
    "end": "320320"
  },
  {
    "text": "service mesh in general for linkerd so this control plane gives",
    "start": "320320",
    "end": "326160"
  },
  {
    "start": "326000",
    "end": "326000"
  },
  {
    "text": "you a few things so it takes care of issuing and providing tls certificates for the proxy because",
    "start": "326160",
    "end": "333360"
  },
  {
    "text": "all proxy to proxy communication is encrypted by default it provides service discovery through",
    "start": "333360",
    "end": "339680"
  },
  {
    "text": "dns as well as kubernetes primitives it provides service profiles",
    "start": "339680",
    "end": "345199"
  },
  {
    "text": "so you can set rules like timeouts and retries per services",
    "start": "345199",
    "end": "350400"
  },
  {
    "text": "it gives you automatic proxy injection so there's a proxy injector component that takes care of that it also the",
    "start": "350400",
    "end": "356880"
  },
  {
    "text": "control plane also ships with a dashboard with a bunch of useful metrics um that you can look at in order to",
    "start": "356880",
    "end": "366639"
  },
  {
    "text": "reason about your traffic it also exposes an api interface that's um a number of",
    "start": "366639",
    "end": "373680"
  },
  {
    "text": "cli commands that we ship with linker d use such as tab stats and others",
    "start": "373680",
    "end": "380000"
  },
  {
    "text": "and these allow you to look at real-time statistics about your traffic um from the terminal and then you have",
    "start": "380000",
    "end": "387919"
  },
  {
    "text": "the proxy which is often referred to as the data plane and that's an ultralight transparent one that's",
    "start": "387919",
    "end": "394560"
  },
  {
    "start": "389000",
    "end": "389000"
  },
  {
    "text": "written in rust so it's very performant and",
    "start": "394560",
    "end": "399600"
  },
  {
    "text": "and secure it has automatic prometheus metrics export",
    "start": "399600",
    "end": "407280"
  },
  {
    "text": "for all http and tcp traffic that goes through it so the proxy itself exposes",
    "start": "407280",
    "end": "412639"
  },
  {
    "text": "endpoints that your prometheus instance can scrape so you get so you get",
    "start": "412639",
    "end": "420400"
  },
  {
    "text": "data about the traffic that's going to the proxima prometheus it provides latency aware layer 7 load",
    "start": "420400",
    "end": "427599"
  },
  {
    "text": "balancing and automatic tls out of the box and what is a particular feature that's",
    "start": "427599",
    "end": "434160"
  },
  {
    "text": "actually that i think is is pretty cool is that it exposes an on-demand diagnostic tap api so",
    "start": "434160",
    "end": "441840"
  },
  {
    "text": "you can um use a cli to to tap into any proxy and see the live",
    "start": "441840",
    "end": "448560"
  },
  {
    "text": "requests that are going through the proxy in real time",
    "start": "448560",
    "end": "454240"
  },
  {
    "text": "so oftentimes the question arises um well how does that proxy uh end up in",
    "start": "454240",
    "end": "460880"
  },
  {
    "text": "my workloads well that's happening through a process that we",
    "start": "460880",
    "end": "466560"
  },
  {
    "start": "465000",
    "end": "465000"
  },
  {
    "text": "call injection so it's usually accomplished by the proxy injector component which is part",
    "start": "466560",
    "end": "472720"
  },
  {
    "text": "of the control plane but can be done manually as well and the essence of it is that um your",
    "start": "472720",
    "end": "480720"
  },
  {
    "text": "pots are modified to include an init container which is responsible for setting up the",
    "start": "480720",
    "end": "486479"
  },
  {
    "text": "ip tables rules for the pot so all the traffic can go through the proxy",
    "start": "486479",
    "end": "492319"
  },
  {
    "text": "and then there is the psychiatric side car container that runs the proxy itself intercepting this all the traffic",
    "start": "492319",
    "end": "500319"
  },
  {
    "text": "so um if you have to draw that um the injection sort of looks like this",
    "start": "500319",
    "end": "506080"
  },
  {
    "text": "you have your pot running with the application container in there and then there is an init container at",
    "start": "506080",
    "end": "512800"
  },
  {
    "text": "it uh setting up the rules and then there is the proxy as a side car or",
    "start": "512800",
    "end": "517919"
  },
  {
    "text": "sidecar container so now your traffic your incoming traffic",
    "start": "517919",
    "end": "523680"
  },
  {
    "text": "gets shifted so it first hits the proxy and then goes to the application container",
    "start": "523680",
    "end": "529440"
  },
  {
    "text": "and similarly your outgoing traffic goes to the proxy first and then to the whatever it's destined",
    "start": "529440",
    "end": "536640"
  },
  {
    "text": "to so when we were um so linker d",
    "start": "536640",
    "end": "542320"
  },
  {
    "text": "um is designed around a few core concepts and that's observability so being able to collect",
    "start": "542320",
    "end": "548480"
  },
  {
    "text": "actionable traffic metrics security which is encrypting all the",
    "start": "548480",
    "end": "554320"
  },
  {
    "text": "traffic between services reliability which is ensuring that",
    "start": "554320",
    "end": "560160"
  },
  {
    "text": "services are available and traffic management so routing",
    "start": "560160",
    "end": "565279"
  },
  {
    "text": "traffic to services and using advanced patterns such as traffic splitting",
    "start": "565279",
    "end": "572240"
  },
  {
    "text": "so when we were we wanted to we kind of thought about",
    "start": "572240",
    "end": "578399"
  },
  {
    "text": "all of this and we wanted to bring these guarantees and these core concepts um to the multi-cluster support as well",
    "start": "578399",
    "end": "584640"
  },
  {
    "text": "so you get all of that not only within your cluster but within your whole",
    "start": "584640",
    "end": "590399"
  },
  {
    "text": "um ensemble of clusters so to speak so um this kind of brings the question as",
    "start": "590399",
    "end": "596640"
  },
  {
    "text": "to why why why multiple clusters well there are um there are many reasons that people have",
    "start": "596640",
    "end": "603440"
  },
  {
    "start": "599000",
    "end": "599000"
  },
  {
    "text": "pointed out but most most notably it's about traffic",
    "start": "603440",
    "end": "609120"
  },
  {
    "text": "management and traffic migration so people want to be able to do canary",
    "start": "609120",
    "end": "614320"
  },
  {
    "text": "deployments across clusters or be able to um [Music]",
    "start": "614320",
    "end": "619839"
  },
  {
    "text": "use a set of services that are in a pre-product environment or prop",
    "start": "619839",
    "end": "625120"
  },
  {
    "text": "environment for development locally and make them",
    "start": "625120",
    "end": "630720"
  },
  {
    "text": "appear as they are as if they were in their local kind cluster for example",
    "start": "630720",
    "end": "637839"
  },
  {
    "text": "as well as um also people um want to do failover so",
    "start": "637839",
    "end": "644880"
  },
  {
    "text": "kind of shifting traffic from one cluster to another um when when a certain cluster fails or",
    "start": "644880",
    "end": "651120"
  },
  {
    "text": "needs some kind of maintenance so um we kind of thought about all of",
    "start": "651120",
    "end": "657120"
  },
  {
    "text": "that and we decided to have some core concepts across uh",
    "start": "657120",
    "end": "663600"
  },
  {
    "start": "659000",
    "end": "659000"
  },
  {
    "text": "um across multi-cluster the multi-cluster feature that kind of build upon the linker d score concepts",
    "start": "663600",
    "end": "672000"
  },
  {
    "text": "and um so our solution is secure and much like",
    "start": "672000",
    "end": "678959"
  },
  {
    "text": "uh with link rd everything happens over mkls so even traffic that goes out",
    "start": "678959",
    "end": "685040"
  },
  {
    "text": "of the cluster to another cluster it's it's tls",
    "start": "685040",
    "end": "690240"
  },
  {
    "text": "then we have the solution big kubernetes first",
    "start": "690800",
    "end": "696560"
  },
  {
    "text": "so remote services um they appear as normal kubernetes services so any",
    "start": "696560",
    "end": "702959"
  },
  {
    "text": "service that's exported and available in your local cluster but it's a remote service it's just a normal",
    "start": "702959",
    "end": "709279"
  },
  {
    "text": "service it's not some kind of special special kind of service",
    "start": "709279",
    "end": "714320"
  },
  {
    "text": "and there is no single point of failure so no single cluster is blessed or magical",
    "start": "714320",
    "end": "720079"
  },
  {
    "text": "each cluster is running um its own linker d installation with the control plane",
    "start": "720079",
    "end": "726079"
  },
  {
    "text": "um so if a cluster fails that doesn't bring the whole system down the solution is also transparent so",
    "start": "726079",
    "end": "732639"
  },
  {
    "text": "applications don't need to know whether service is remote or local",
    "start": "732639",
    "end": "738720"
  },
  {
    "text": "and the solution is also network independent so the only requirement is that there is",
    "start": "738720",
    "end": "744079"
  },
  {
    "text": "gateway connectivity between clusters but the underlying um the underlying",
    "start": "744079",
    "end": "751040"
  },
  {
    "text": "network infrastructure or network hierarchy doesn't matter at all so if we have to draw",
    "start": "751040",
    "end": "757440"
  },
  {
    "text": "kind of a diagrammatic um kind of a diagrammatic representation of",
    "start": "757440",
    "end": "765040"
  },
  {
    "text": "what our multicultural solution looks like it kind of looks like this so imagine",
    "start": "765040",
    "end": "772000"
  },
  {
    "start": "767000",
    "end": "767000"
  },
  {
    "text": "you have cluster east and west that you're going to see in the demo in a bit um so these both are running lingerie",
    "start": "772000",
    "end": "779760"
  },
  {
    "text": "and it's important that linkard for both of these clusters is installed with",
    "start": "779760",
    "end": "785680"
  },
  {
    "text": "with uh truss roots that's that so the certificates share the same trust root",
    "start": "785680",
    "end": "790720"
  },
  {
    "text": "in order to enable the mtls across clusters and then you have the linker d um",
    "start": "790720",
    "end": "798560"
  },
  {
    "text": "the linker rd multi-cluster set of components which consists of the service mirror the gateway and the cluster credentials",
    "start": "798560",
    "end": "806560"
  },
  {
    "text": "and then you have your local services and your remote services that are effectively",
    "start": "806560",
    "end": "811680"
  },
  {
    "text": "a proxy to services located on other clusters so",
    "start": "811680",
    "end": "819360"
  },
  {
    "text": "the um service mirror is responsible for monitoring the exported state of the",
    "start": "819360",
    "end": "825360"
  },
  {
    "text": "target cluster and replicating it so it would use uh kubernetes informers and the go api",
    "start": "825360",
    "end": "831839"
  },
  {
    "text": "clients to um to continuously monitor the set of",
    "start": "831839",
    "end": "836880"
  },
  {
    "text": "services that are exported on a target cluster and create proxy services locally",
    "start": "836880",
    "end": "843040"
  },
  {
    "text": "and then there is the gateway which is responsible for routing incoming traffic um to the services",
    "start": "843040",
    "end": "849920"
  },
  {
    "text": "to the appropriate services on the on the target cluster so that's that component exposes an",
    "start": "849920",
    "end": "856720"
  },
  {
    "text": "external api ip that receives all of that traffic and then this traffic is rotated to",
    "start": "856720",
    "end": "863279"
  },
  {
    "text": "where um where it should go uh to the internal services in the cluster",
    "start": "863279",
    "end": "868560"
  },
  {
    "text": "and in there are the credentials which consist of a service account that's located on the target cluster and",
    "start": "868560",
    "end": "875440"
  },
  {
    "text": "it allows the service mirror controller to um spin up and kubernetes api client and",
    "start": "875440",
    "end": "882320"
  },
  {
    "text": "monitor the state of this cluster and then there is a secret um",
    "start": "882320",
    "end": "887680"
  },
  {
    "text": "that's living in the source cluster and it's containing the kubernetes api config for the service",
    "start": "887680",
    "end": "893920"
  },
  {
    "text": "account so um so this this config can be deserialized and and",
    "start": "893920",
    "end": "900240"
  },
  {
    "text": "and the kubernetes sepia client can be spun up so now with",
    "start": "900240",
    "end": "906399"
  },
  {
    "text": "all of that being set um it's it's actually pretty um informative to do a demo and show you",
    "start": "906399",
    "end": "914000"
  },
  {
    "start": "908000",
    "end": "908000"
  },
  {
    "text": "how this how this feels like and what you can do with it so in our demo we have two clusters",
    "start": "914000",
    "end": "919839"
  },
  {
    "text": "east and west each cluster has back-end service installed",
    "start": "919839",
    "end": "927120"
  },
  {
    "text": "a test client is deployed on cluster east so this test client is just a container",
    "start": "927120",
    "end": "933040"
  },
  {
    "text": "where which we can use in order to curl so what we want to do is we want to split",
    "start": "933040",
    "end": "940160"
  },
  {
    "text": "the traffic to back-end service between cluster east and cluster west",
    "start": "940160",
    "end": "946079"
  },
  {
    "text": "so let's let's actually do that",
    "start": "946079",
    "end": "955839"
  },
  {
    "text": "so",
    "start": "957120",
    "end": "959360"
  },
  {
    "text": "so here you can see that we have",
    "start": "964720",
    "end": "969839"
  },
  {
    "text": "we have our cluster east with link rd installed what we are going",
    "start": "970639",
    "end": "976959"
  },
  {
    "text": "to do is we are going to install the back-end service and the",
    "start": "976959",
    "end": "984320"
  },
  {
    "text": "test client",
    "start": "984320",
    "end": "986959"
  },
  {
    "text": "we are going to install the back-end service onto cluster west as well and these services respond",
    "start": "990000",
    "end": "996959"
  },
  {
    "text": "with a difference with a different response just to be able to differentiate between them",
    "start": "996959",
    "end": "1003839"
  },
  {
    "text": "so now you can see that we have the backend service here on cluster east",
    "start": "1005360",
    "end": "1010720"
  },
  {
    "text": "now the next thing we are going to do is that we are going to install the um multi-cluster components",
    "start": "1010720",
    "end": "1018399"
  },
  {
    "text": "onto cluster east and that command should install the gateway the service",
    "start": "1018399",
    "end": "1024880"
  },
  {
    "text": "accounts as well as the service mirror controller",
    "start": "1024880",
    "end": "1030319"
  },
  {
    "text": "we're going to do the same thing for cluster",
    "start": "1030319",
    "end": "1035360"
  },
  {
    "text": "west",
    "start": "1036839",
    "end": "1039839"
  },
  {
    "text": "so now we can",
    "start": "1044480",
    "end": "1053120"
  },
  {
    "text": "we can see that um",
    "start": "1053120",
    "end": "1056640"
  },
  {
    "text": "we can see that there is the gateway on clusterwii east and the service mirror controller",
    "start": "1061440",
    "end": "1067440"
  },
  {
    "text": "what we want to do now is to be able to provide the credentials that are needed for cluster ease to be",
    "start": "1067440",
    "end": "1075520"
  },
  {
    "text": "able to replicate services from cluster quest so we're going to do that with the link",
    "start": "1075520",
    "end": "1082880"
  },
  {
    "text": "command and what this link command does is that it puts together these credentials",
    "start": "1082880",
    "end": "1088320"
  },
  {
    "text": "um and that's actually the wrong command that the export service command",
    "start": "1088320",
    "end": "1094559"
  },
  {
    "text": "which is for later so we are using the link command which um takes uh",
    "start": "1094559",
    "end": "1102080"
  },
  {
    "text": "puts together grabs these credentials and and puts them together the",
    "start": "1102080",
    "end": "1107919"
  },
  {
    "text": "credentials for the service account from foster west and package the",
    "start": "1107919",
    "end": "1113200"
  },
  {
    "text": "packages them as a secret and deploys them onto cluster east",
    "start": "1113200",
    "end": "1122080"
  },
  {
    "text": "so now",
    "start": "1122080",
    "end": "1124559"
  },
  {
    "text": "um so now we can use the gateways command",
    "start": "1134840",
    "end": "1140799"
  },
  {
    "text": "in order to see that um on cluster east cluster east knows about",
    "start": "1141039",
    "end": "1147600"
  },
  {
    "text": "a gateway um on cluster west that's has um that's exhibiting a bunch",
    "start": "1147600",
    "end": "1155440"
  },
  {
    "text": "of traffic characteristics so this is the latency to this gateway and it's alive so there is a probe",
    "start": "1155440",
    "end": "1162400"
  },
  {
    "text": "internally that that probes this gateway and informs us",
    "start": "1162400",
    "end": "1167600"
  },
  {
    "text": "whether that gateway is alive at the moment or not currently however there is",
    "start": "1167600",
    "end": "1173919"
  },
  {
    "text": "there is no services being mirrored so what we want to do is we want to",
    "start": "1173919",
    "end": "1179200"
  },
  {
    "text": "export the service from cluster west to be available",
    "start": "1179200",
    "end": "1184880"
  },
  {
    "text": "um onto cluster east and this is done by pretty much adding",
    "start": "1184880",
    "end": "1191679"
  },
  {
    "text": "a few annotations on the service itself so this command will do that so now the",
    "start": "1191679",
    "end": "1197600"
  },
  {
    "text": "service is exported if we look at the gateways now we can see that um",
    "start": "1197600",
    "end": "1206400"
  },
  {
    "text": "now there is one exported services and if we look at the services in uh",
    "start": "1206400",
    "end": "1213760"
  },
  {
    "text": "on cluster east we can see that there is a back-end service which we know that we deployed",
    "start": "1213760",
    "end": "1219200"
  },
  {
    "text": "and there is a backend service dash west which is a proxy for the service that's located",
    "start": "1219200",
    "end": "1225760"
  },
  {
    "text": "on cluster west so what can we do with that well",
    "start": "1225760",
    "end": "1234000"
  },
  {
    "text": "we can um we can actually get um we can actually",
    "start": "1234000",
    "end": "1243360"
  },
  {
    "text": "ssh into our pot here",
    "start": "1243440",
    "end": "1249840"
  },
  {
    "text": "and from that pot we can hit",
    "start": "1252400",
    "end": "1256799"
  },
  {
    "text": "we can curl the back-end service that's located uh locally",
    "start": "1257760",
    "end": "1264320"
  },
  {
    "text": "so it says hello east and if we curl the back-end service that's located",
    "start": "1264320",
    "end": "1270640"
  },
  {
    "text": "on west it we're gonna get a different response right",
    "start": "1270640",
    "end": "1275760"
  },
  {
    "text": "so now we can step back a bit and think about what we can do",
    "start": "1275760",
    "end": "1283919"
  },
  {
    "text": "um so we can define a traffic split here that splits all the traffic going",
    "start": "1283919",
    "end": "1290880"
  },
  {
    "text": "to back-end service um in half so half of the request will go to back-end service which is the local",
    "start": "1290880",
    "end": "1297600"
  },
  {
    "text": "service and half of the request will go to the service that's located on cluster west",
    "start": "1297600",
    "end": "1303919"
  },
  {
    "text": "so let's",
    "start": "1303919",
    "end": "1306480"
  },
  {
    "text": "so now that we have that we can ssh",
    "start": "1312960",
    "end": "1319280"
  },
  {
    "text": "into our test container again",
    "start": "1319280",
    "end": "1323440"
  },
  {
    "text": "and run curl in a loop hitting back-end service",
    "start": "1324799",
    "end": "1331440"
  },
  {
    "text": "at port 88888 so you see that we now should be getting",
    "start": "1331440",
    "end": "1347840"
  },
  {
    "text": "actually i think",
    "start": "1350480",
    "end": "1360400"
  },
  {
    "text": "i think i created it in the wrong cluster yeah it's",
    "start": "1360400",
    "end": "1368080"
  },
  {
    "text": "when when doing these things it's it's pretty it's pretty advisable to always be explicit about the context",
    "start": "1368080",
    "end": "1376240"
  },
  {
    "text": "so we are creating that traffic split on cluster east so now",
    "start": "1376240",
    "end": "1381600"
  },
  {
    "text": "if we ssh into the container and we run the same commands",
    "start": "1381600",
    "end": "1388320"
  },
  {
    "text": "we see that what's happening is is that we get responses from both",
    "start": "1388320",
    "end": "1395679"
  },
  {
    "text": "cluster west and cluster east and the reason for that is because half of the requests are routed",
    "start": "1395679",
    "end": "1402240"
  },
  {
    "text": "to our local um service and half of the requests are rooted on",
    "start": "1402240",
    "end": "1408000"
  },
  {
    "text": "to the service that's located on to cluster west",
    "start": "1408000",
    "end": "1414840"
  },
  {
    "text": "so we can actually look at our traffic split",
    "start": "1414840",
    "end": "1421440"
  },
  {
    "text": "and we can see that um you know both of the services are exhibiting 100",
    "start": "1421679",
    "end": "1427760"
  },
  {
    "text": "success rate however what's interesting to observe is that the latency to back-end service west",
    "start": "1427760",
    "end": "1435679"
  },
  {
    "text": "is a bit higher and that's normal because the service is not located on the local cluster what's also",
    "start": "1435679",
    "end": "1443120"
  },
  {
    "text": "interesting to see is that we can do um we can",
    "start": "1443120",
    "end": "1450960"
  },
  {
    "text": "run the dashboard command now",
    "start": "1450960",
    "end": "1459840"
  },
  {
    "text": "so that dashboard command gives us the dashboard here we can look at our",
    "start": "1464400",
    "end": "1470000"
  },
  {
    "text": "traffic splits and gets a visual representation of that and again you're gonna see the",
    "start": "1470000",
    "end": "1476080"
  },
  {
    "text": "characteristics here so half of the traffic goes to the local service half of the traffic goes to the service on cluster",
    "start": "1476080",
    "end": "1482880"
  },
  {
    "text": "west also what's also interesting to observe is that we",
    "start": "1482880",
    "end": "1488480"
  },
  {
    "text": "can go into grafana and there is a multi-cluster dashboard here",
    "start": "1488480",
    "end": "1493840"
  },
  {
    "text": "that shows you a bunch of traffic statistics about your about the traffic that's",
    "start": "1493840",
    "end": "1500880"
  },
  {
    "text": "going to remote services so you can see here that there is a request rate for um the",
    "start": "1500880",
    "end": "1507840"
  },
  {
    "text": "linker b gateway so this is for all the traffic that's going to this gateway no matter",
    "start": "1507840",
    "end": "1514000"
  },
  {
    "text": "the service but then there is you know a breakdown here that's um",
    "start": "1514000",
    "end": "1519600"
  },
  {
    "text": "that's by services and that would be a bit more interesting if we have more services",
    "start": "1519600",
    "end": "1524640"
  },
  {
    "text": "but we can see that all the traffic is going to back in service at the moment at cluster west",
    "start": "1524640",
    "end": "1532400"
  },
  {
    "text": "so this is all um quite interesting and",
    "start": "1532400",
    "end": "1539840"
  },
  {
    "text": "you know you might ask yourself well how does this how does this actually work well um",
    "start": "1540320",
    "end": "1548799"
  },
  {
    "start": "1546000",
    "end": "1546000"
  },
  {
    "text": "the way it's been designed is is the following so imagine you have um your clan pods that's located",
    "start": "1548799",
    "end": "1556799"
  },
  {
    "text": "on cluster east right well the moment you fire um get requests",
    "start": "1556799",
    "end": "1562799"
  },
  {
    "text": "through curl to back-end service this get request is",
    "start": "1562799",
    "end": "1568240"
  },
  {
    "text": "actually rooted by the traffic split to back-end service west which is the proxy",
    "start": "1568240",
    "end": "1573840"
  },
  {
    "text": "for um for the service located on cluster west now what's going to happen is that this",
    "start": "1573840",
    "end": "1580720"
  },
  {
    "text": "service actually there is no pod behind it like the pot is located on service on cluster west but what there is is",
    "start": "1580720",
    "end": "1589039"
  },
  {
    "text": "that the service has an end point that the service mirror has created that has the external ipip of the",
    "start": "1589039",
    "end": "1596960"
  },
  {
    "text": "gateway of cluster west so the traffic will go to that",
    "start": "1596960",
    "end": "1602240"
  },
  {
    "text": "to that ip on that port and in order for all of that to happen",
    "start": "1602240",
    "end": "1608640"
  },
  {
    "text": "however of course there is a proxy on this client part so this proxy intercepts",
    "start": "1608640",
    "end": "1613919"
  },
  {
    "text": "that request and it uses the linker the destination",
    "start": "1613919",
    "end": "1619039"
  },
  {
    "text": "service to kind of learn a few important things first of all it issues a discovery query",
    "start": "1619039",
    "end": "1626960"
  },
  {
    "text": "to the destination service and the destination service knows that this is the the",
    "start": "1626960",
    "end": "1633440"
  },
  {
    "text": "the request is going for to a service that's actually a proxy for a for service located on another cluster",
    "start": "1633440",
    "end": "1640559"
  },
  {
    "text": "so it's going to return the expected identity of the gateway on the other side",
    "start": "1640559",
    "end": "1645679"
  },
  {
    "text": "so it can enable mtls and it's also going to return the fully qualified domain name",
    "start": "1645679",
    "end": "1652320"
  },
  {
    "text": "of the target service on to the other cluster and that's important because this other cluster",
    "start": "1652320",
    "end": "1657919"
  },
  {
    "text": "might very well have a different cluster domain and it also is not suffixed with the",
    "start": "1657919",
    "end": "1663279"
  },
  {
    "text": "west right the the name on the other side is back-end service not back in service",
    "start": "1663279",
    "end": "1668559"
  },
  {
    "text": "west so when all of that happens this request the uri authority is rewritten the proper tls identity is",
    "start": "1668559",
    "end": "1676480"
  },
  {
    "text": "set and this request flies off to cluster west so once it hits this uh ip",
    "start": "1676480",
    "end": "1684799"
  },
  {
    "text": "uh on this port it's intercepted by this this request is intercepted by the",
    "start": "1684799",
    "end": "1691360"
  },
  {
    "text": "proxy and the proxy um will and and this gateway gateway",
    "start": "1691360",
    "end": "1698960"
  },
  {
    "text": "will uh route it to the correct back-end service so",
    "start": "1698960",
    "end": "1705760"
  },
  {
    "text": "and because all of that um um because there is uh the correct",
    "start": "1705760",
    "end": "1712880"
  },
  {
    "text": "destination encoded in the request uh it knows onto where to send it on which port so",
    "start": "1712880",
    "end": "1720640"
  },
  {
    "text": "you know you might be hitting um the proxy service onto different ports",
    "start": "1720640",
    "end": "1726159"
  },
  {
    "text": "and all of that traffic will go to one single port on the gateway but because we carry metadata indicating uh which port",
    "start": "1726159",
    "end": "1733520"
  },
  {
    "text": "was actually the original port we can route it to the correct service so this is pretty neat and one other",
    "start": "1733520",
    "end": "1740159"
  },
  {
    "text": "important thing is that because there is a proxy injected into all of these components",
    "start": "1740159",
    "end": "1745279"
  },
  {
    "text": "like all of your traffic is encrypted end-to-end and not only that but you can also get a",
    "start": "1745279",
    "end": "1750399"
  },
  {
    "text": "bunch of valuable metrics as i already showed you about what's what what's happening with the traffic",
    "start": "1750399",
    "end": "1756640"
  },
  {
    "text": "cross clusters so that being said um this this",
    "start": "1756640",
    "end": "1762399"
  },
  {
    "text": "this was sort of the first iteration of the multi-cluster support that we designed and it works quite well",
    "start": "1762399",
    "end": "1770080"
  },
  {
    "start": "1763000",
    "end": "1763000"
  },
  {
    "text": "however there are a few improvements that we have in mind and we are actively working on at the moment so",
    "start": "1770080",
    "end": "1776000"
  },
  {
    "text": "first of all now there is a service we want to be and now there is a single service",
    "start": "1776000",
    "end": "1782320"
  },
  {
    "text": "mirror controller running and it's responsible for pretty much all the um all the",
    "start": "1782320",
    "end": "1790880"
  },
  {
    "text": "linked clusters we want to split that up and have a service mirror controller per target cluster um and i think",
    "start": "1790880",
    "end": "1799200"
  },
  {
    "text": "that's going to simplify things greatly and make the kind of the cognitive luggage",
    "start": "1799200",
    "end": "1805200"
  },
  {
    "text": "lighter and it's going to be much easier to debug whenever problems occur we also want to introduce a crd to",
    "start": "1805200",
    "end": "1812480"
  },
  {
    "text": "better represent the target cluster information so now a bunch of that information is encoded in",
    "start": "1812480",
    "end": "1817919"
  },
  {
    "text": "a secret um other bits of the of that information is encoded in",
    "start": "1817919",
    "end": "1823600"
  },
  {
    "text": "arbitrary annotations on the um services that are mirrored and",
    "start": "1823600",
    "end": "1828720"
  },
  {
    "text": "whatnot we want to consolidate all that into a crd that represents this information so it's all in one place we want to",
    "start": "1828720",
    "end": "1836159"
  },
  {
    "text": "support traffic policy and much finer green permissions control as to what traffic",
    "start": "1836159",
    "end": "1841679"
  },
  {
    "text": "can go where and of course we want to support plain tcp traffic so",
    "start": "1841679",
    "end": "1849360"
  },
  {
    "text": "this is something we so currently it's all http um we want to support plain tcp across",
    "start": "1849360",
    "end": "1857120"
  },
  {
    "text": "clusters and this is part of a larger refactor and larger piece of work in the",
    "start": "1857120",
    "end": "1864880"
  },
  {
    "text": "proxy but we have an idea how to do that and work is",
    "start": "1864880",
    "end": "1870080"
  },
  {
    "text": "is actively happening at the moment so this is something that's going to be coming out soon so with all that said um",
    "start": "1870080",
    "end": "1878399"
  },
  {
    "text": "i'm happy to answer any questions um if you have one and as always you can go to my github",
    "start": "1878399",
    "end": "1884880"
  },
  {
    "text": "account and take a look at my uh repo that contains the talk",
    "start": "1884880",
    "end": "1890320"
  },
  {
    "text": "um so you can look at the slides again thank you a lot for your time",
    "start": "1890320",
    "end": "1899440"
  }
]