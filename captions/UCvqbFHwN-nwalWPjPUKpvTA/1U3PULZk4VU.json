[
  {
    "text": "my name is Elena kka I'm on the diagrid open source team um uh in like so I've",
    "start": "919",
    "end": "7879"
  },
  {
    "text": "been doing some work on the actor subsystem in Dapper for the past few months I would say",
    "start": "7879",
    "end": "14320"
  },
  {
    "text": "recently and since actors can be a relatively abstract uh concept that",
    "start": "14320",
    "end": "19840"
  },
  {
    "text": "sometimes is maybe not that intuitive to to understand I thought that I would U share my uh understandings and my",
    "start": "19840",
    "end": "27000"
  },
  {
    "text": "journey with you hopefully that uh maybe that helped you to to see the beauty of",
    "start": "27000",
    "end": "32078"
  },
  {
    "text": "thater actors and uh hopefully even uh you start using them in some of your",
    "start": "32079",
    "end": "37800"
  },
  {
    "text": "projects so let's start with a very high level let's even call it a theoretical",
    "start": "37800",
    "end": "45399"
  },
  {
    "text": "definition what is an actor an actor would be a primitive in the domain of concurent",
    "start": "45399",
    "end": "51239"
  },
  {
    "text": "computation defined by a few properties so an actor can have Behavior it can",
    "start": "51239",
    "end": "57480"
  },
  {
    "text": "have state and it can communicate with other actors and I understand this is a very",
    "start": "57480",
    "end": "64080"
  },
  {
    "text": "generic definition it could be describing me or my dog or even my Wi-Fi",
    "start": "64080",
    "end": "69840"
  },
  {
    "text": "router uh on good dates days when it decides to cooperate which by the way",
    "start": "69840",
    "end": "75400"
  },
  {
    "text": "fingers crossed is going to be a good day today because I'm in a hotel um but",
    "start": "75400",
    "end": "81680"
  },
  {
    "text": "also apart from that uh it sounds awfully lot like the objectoriented",
    "start": "81680",
    "end": "87560"
  },
  {
    "text": "programming model doesn't it so if we look at it more closely and I'm going to",
    "start": "87560",
    "end": "92920"
  },
  {
    "text": "be use thater I'm going to be using daer terminology here but we're going to explain in a moment what uh uh that",
    "start": "92920",
    "end": "98759"
  },
  {
    "text": "means exactly we can compare a class to an nectar type uh that's where the",
    "start": "98759",
    "end": "104640"
  },
  {
    "text": "behavior is defined right we could compare an object like so an instantiated class to an actor instance",
    "start": "104640",
    "end": "111759"
  },
  {
    "text": "or an actor ID that's the terminology we use in Dapper and uh this is yeah it",
    "start": "111759",
    "end": "117960"
  },
  {
    "text": "kind of matches pretty nicely here but the difference is the",
    "start": "117960",
    "end": "123039"
  },
  {
    "text": "scope uh while the scope of an object is a single process the scope of an actor",
    "start": "123039",
    "end": "130640"
  },
  {
    "text": "would be the entire Distributing system so here in this image we can see that we",
    "start": "130640",
    "end": "135680"
  },
  {
    "text": "have um four hexagons and they they represent some processes different",
    "start": "135680",
    "end": "140959"
  },
  {
    "text": "processes in this in this system we can imagine them as container spots whatever and the little circles",
    "start": "140959",
    "end": "149000"
  },
  {
    "text": "represent our actors actor types with the different colors represent different actor types and then different",
    "start": "149000",
    "end": "156280"
  },
  {
    "text": "instantiations of those of those actors as we can see actors here the same color",
    "start": "156280",
    "end": "163120"
  },
  {
    "text": "so the same actor type do appear on different uh servers and different",
    "start": "163120",
    "end": "168680"
  },
  {
    "text": "instances so yeah the scope of of an actor is the is the distributed system",
    "start": "168680",
    "end": "175159"
  },
  {
    "text": "the scope of an object is a process that's one big difference between uh the object-oriented programming and the",
    "start": "175159",
    "end": "181680"
  },
  {
    "text": "actor model fun fact uh this is Mr Alan K uh",
    "start": "181680",
    "end": "187799"
  },
  {
    "text": "he is the let's say the the father of objectoriented programming and a bunch of other things that you can find in his",
    "start": "187799",
    "end": "193840"
  },
  {
    "text": "Wikipedia page so by some sources uh he was uh inspired actually largely",
    "start": "193840",
    "end": "200440"
  },
  {
    "text": "influenced by by the actor model but by some other sources Mr Carl",
    "start": "200440",
    "end": "208480"
  },
  {
    "text": "huitt who's the creator of the actors's model was actually influenced by the by the objectoriented programming and the",
    "start": "208480",
    "end": "214720"
  },
  {
    "text": "small talk language um where you have a lot of message fac so I don't I don't know what the",
    "start": "214720",
    "end": "221879"
  },
  {
    "text": "truth is here that's probably somewhere back in the in the 70s but we do know for a share and it",
    "start": "221879",
    "end": "227680"
  },
  {
    "text": "has has been recorded and documented that um they did correspond so they did",
    "start": "227680",
    "end": "232959"
  },
  {
    "text": "follow each other's work and uh both of them seem to have been influenced by the",
    "start": "232959",
    "end": "238120"
  },
  {
    "text": "by the message sending and message passing model so let's do a quick recap where we",
    "start": "238120",
    "end": "244040"
  },
  {
    "text": "are right now I know that it's probably if you have if you haven't worked with actors before and you're not completely",
    "start": "244040",
    "end": "250319"
  },
  {
    "text": "like you're not familiar with them maybe it's not completely here clear just yet but I hope it will be soon quick recap",
    "start": "250319",
    "end": "258199"
  },
  {
    "text": "from now so we know that actors are uh they are stateful objects with Define",
    "start": "258199",
    "end": "264240"
  },
  {
    "text": "behavior so you can specify go ahead and write in the business logic that you're",
    "start": "264240",
    "end": "269919"
  },
  {
    "text": "is going to follow and they can have um State they process only one message at a",
    "start": "269919",
    "end": "276800"
  },
  {
    "text": "time so we have isolation here and when I say isolation I mean like the i in uh",
    "start": "276800",
    "end": "282000"
  },
  {
    "text": "in AET like the transactional database properties so this is the same kind of isolation we're talking about if there's",
    "start": "282000",
    "end": "287680"
  },
  {
    "text": "mult multiple messages waiting in in line to be processed the actor is going to uh start Pro get the lock let's say",
    "start": "287680",
    "end": "295880"
  },
  {
    "text": "start processing that one message um and when it's done it's release the lock and then the next message uh is going to",
    "start": "295880",
    "end": "303320"
  },
  {
    "text": "start to be uh is going to acquire the lock and um then be processed so that's a very important property as well um the",
    "start": "303320",
    "end": "311160"
  },
  {
    "text": "identity of an actor uh is defined by their address they can communicate so they can",
    "start": "311160",
    "end": "318080"
  },
  {
    "text": "send messages exchange messages to other actors and also send messages to themselves and they are instantiated and",
    "start": "318080",
    "end": "325120"
  },
  {
    "text": "destroyed explicitly as needed so when you need an actor you create it it has",
    "start": "325120",
    "end": "330919"
  },
  {
    "text": "uh its femoral State when you don't need it anymore you destroy it so this was",
    "start": "330919",
    "end": "336360"
  },
  {
    "text": "work mostly done started around the 70s very Visionary by the way for that time because it was already predicting how um",
    "start": "336360",
    "end": "344440"
  },
  {
    "text": "the things are going to develop at a large scale fast forward 40 years the",
    "start": "344440",
    "end": "351520"
  },
  {
    "text": "second way of uh of work on the actor model began and it came out of the need",
    "start": "351520",
    "end": "356840"
  },
  {
    "text": "of uh optimization so namely we're talking about the virtual actor",
    "start": "356840",
    "end": "361960"
  },
  {
    "text": "model so what was the thing here uh as we mentioned before so we see like the",
    "start": "361960",
    "end": "368520"
  },
  {
    "text": "programmer needed to instantiate and Destroy actors explicitly right so the",
    "start": "368520",
    "end": "373639"
  },
  {
    "text": "virtual actor model says well why why do we need to give that um responsibility",
    "start": "373639",
    "end": "380360"
  },
  {
    "text": "to the programmer wouldn't it be better and more um air resistance if we just",
    "start": "380360",
    "end": "386199"
  },
  {
    "text": "make the our implementation of the actor model uh take care of of that for us so",
    "start": "386199",
    "end": "391520"
  },
  {
    "text": "that um then they uh uh they suggested the solution where the system that",
    "start": "391520",
    "end": "398599"
  },
  {
    "text": "implements the actor model implementation should actually automatically load and unload the actors",
    "start": "398599",
    "end": "405160"
  },
  {
    "text": "on demand um removing that responsibility from from the",
    "start": "405160",
    "end": "410599"
  },
  {
    "text": "programmer so then if an actor is loaded or unloaded on demand then um this thing",
    "start": "410599",
    "end": "417080"
  },
  {
    "text": "that we have like okay instantiated actor destroy actor then becomes um uh",
    "start": "417080",
    "end": "423479"
  },
  {
    "text": "not not really uh uh relevant anymore because an actor can exist an act ID",
    "start": "423479",
    "end": "429800"
  },
  {
    "text": "right can uh exist at any moment if it's if it doesn't exist it's going to get created automatically so the user",
    "start": "429800",
    "end": "435800"
  },
  {
    "text": "doesn't have to do that now that requirement is great um uh it definitely",
    "start": "435800",
    "end": "442960"
  },
  {
    "text": "is going to save up um a lot of resources as well because why would you want to keep an actor instantiated",
    "start": "442960",
    "end": "450440"
  },
  {
    "text": "uh wasting resources right we should be all contributing to um to the energy",
    "start": "450440",
    "end": "456199"
  },
  {
    "text": "management of our planet uh where you know it can be unloaded and then uh we save some um uh",
    "start": "456199",
    "end": "464720"
  },
  {
    "text": "some memory okay but if we want to load and unload actors on demand uh what are",
    "start": "464720",
    "end": "471639"
  },
  {
    "text": "we going to do with that state how can we reload an actor or load an actor if",
    "start": "471639",
    "end": "477080"
  },
  {
    "text": "um we have lost the state in the meantime so now from that first requirement comes the second property of",
    "start": "477080",
    "end": "482639"
  },
  {
    "text": "a virtual actor which is the state is stored externally in some external um uh",
    "start": "482639",
    "end": "487680"
  },
  {
    "text": "state store um and this also gives uh uh uh",
    "start": "487680",
    "end": "493400"
  },
  {
    "text": "the second benefit which is not only uh this is very um resource efficient I",
    "start": "493400",
    "end": "498919"
  },
  {
    "text": "would say it's very uh scalable because now if you can load and unload actor get",
    "start": "498919",
    "end": "505960"
  },
  {
    "text": "an actor move it like expand your system scale it uh twice three times fivefold",
    "start": "505960",
    "end": "512320"
  },
  {
    "text": "your actors are going to get rebalanced nicely across that system so because you",
    "start": "512320",
    "end": "518360"
  },
  {
    "text": "can unload them from one place load them into another and simply um uh distribute",
    "start": "518360",
    "end": "524680"
  },
  {
    "text": "the balance the load prop um properly across um all of your pods or",
    "start": "524680",
    "end": "530200"
  },
  {
    "text": "services and then another little thing change here so if you remember we said uh the identity of the actor is defined",
    "start": "530200",
    "end": "537680"
  },
  {
    "text": "by their address uh but we didn't mention because this is right the the regional actors model is",
    "start": "537680",
    "end": "544079"
  },
  {
    "text": "just a conceptual thing I didn't offer an implementation by itself obviously",
    "start": "544079",
    "end": "549120"
  },
  {
    "text": "there were some implementations but the model itself doesn't offer that and just say that the identity of the actor is",
    "start": "549120",
    "end": "556279"
  },
  {
    "text": "their uh is their address here now in the virtual actor model we don't work",
    "start": "556279",
    "end": "562600"
  },
  {
    "text": "with addresses because we would have to like there there there has to be in an",
    "start": "562600",
    "end": "568200"
  },
  {
    "text": "implementation of the uh the original actor model if you have an address there has to be done some kind of something",
    "start": "568200",
    "end": "573560"
  },
  {
    "text": "some kind of process that maps that address to like logical id address to",
    "start": "573560",
    "end": "579399"
  },
  {
    "text": "some kind of physical address some IP um process right there would have to be something someone else that does that",
    "start": "579399",
    "end": "585880"
  },
  {
    "text": "work so the virtual actor model comes and says well let's remove also that responsibility from the developer and",
    "start": "585880",
    "end": "593079"
  },
  {
    "text": "let's take that on us uh we're going to decide um how we're going to help users",
    "start": "593079",
    "end": "599519"
  },
  {
    "text": "find their actors they don't need to take uh um uh care and keep track of",
    "start": "599519",
    "end": "604560"
  },
  {
    "text": "addresses they only need to keep track of actor type an actor ID okay so an",
    "start": "604560",
    "end": "610399"
  },
  {
    "text": "actor type would be um like the class right what we compared to a class an actor ID would be the",
    "start": "610399",
    "end": "618120"
  },
  {
    "text": "identity of that actor class so kind of like an instantiated uh class or an",
    "start": "618120",
    "end": "623200"
  },
  {
    "text": "object okay um and one of the first use cases",
    "start": "623200",
    "end": "629040"
  },
  {
    "text": "I'm sharing this because I think it's quite cool uh was actually the Halo 4 game uh they started to see some scaling",
    "start": "629040",
    "end": "636399"
  },
  {
    "text": "problems they started to see millions of uh daily users playing the playing the game so uh they were one of the first",
    "start": "636399",
    "end": "644440"
  },
  {
    "text": "users of the virtual actor model okay now Dapper how does dapper",
    "start": "644440",
    "end": "651279"
  },
  {
    "text": "relate where does it stand in the actor world so deer does implement uh the",
    "start": "651279",
    "end": "656880"
  },
  {
    "text": "virtual actor model okay this is more efficient one um where actors have",
    "start": "656880",
    "end": "662040"
  },
  {
    "text": "identity as we said define actory type and actor uh have methods that can be",
    "start": "662040",
    "end": "667480"
  },
  {
    "text": "called uh and they are just if it wasn't clear so the methods uh implemented on",
    "start": "667480",
    "end": "673000"
  },
  {
    "text": "the actor are actually defined in the user application so you write those you",
    "start": "673000",
    "end": "678279"
  },
  {
    "text": "specify as like business um uh logic that you create in your uh in your actor",
    "start": "678279",
    "end": "684560"
  },
  {
    "text": "class actors are single threaded uh uh the state store",
    "start": "684560",
    "end": "689760"
  },
  {
    "text": "you can use in configurable is external right optimize resource utilizations",
    "start": "689760",
    "end": "695519"
  },
  {
    "text": "they can scale into the millions um and the distribution is done automatically as we mentioned we've seen like millions",
    "start": "695519",
    "end": "702880"
  },
  {
    "text": "of factors only over only know handful",
    "start": "702880",
    "end": "708800"
  },
  {
    "text": "of of pots another interesting thing that actors uh provide is as wh just",
    "start": "708800",
    "end": "714920"
  },
  {
    "text": "mentioned in his talk like you can schedule reminders and timers on an actor uh schedule schedule a reminder",
    "start": "714920",
    "end": "721959"
  },
  {
    "text": "that's going to trigger after like at a certain time or maybe even",
    "start": "721959",
    "end": "728600"
  },
  {
    "text": "periodically and uh Dapper finally does provide asdi support for most of the biggest languages and that would include",
    "start": "728600",
    "end": "735440"
  },
  {
    "text": "C Java JavaScript Python and go okay so let's zoom in a little bit uh and see it",
    "start": "735440",
    "end": "743199"
  },
  {
    "text": "like from a closer view closer to the app again the hexagon is going to uh",
    "start": "743199",
    "end": "749240"
  },
  {
    "text": "represent your application and there's the daper side car so as I said your",
    "start": "749240",
    "end": "754279"
  },
  {
    "text": "actors are defined in your application so be python be Java beat go uh the SD",
    "start": "754279",
    "end": "760600"
  },
  {
    "text": "the SDK gives you the tools you can go ahead and create your own um business logic in your in your actors uh",
    "start": "760600",
    "end": "767639"
  },
  {
    "text": "following whatever interfaces um are defined there so in this example we're going to work with these two actor types",
    "start": "767639",
    "end": "775160"
  },
  {
    "text": "red and yellow red is one actor type yellow is another actor type and then we can see that we have actor one actor one",
    "start": "775160",
    "end": "782040"
  },
  {
    "text": "and actor two so those are the the IDS okay this is just to explain um what's",
    "start": "782040",
    "end": "787320"
  },
  {
    "text": "the visual nomenclature here okay so you",
    "start": "787320",
    "end": "792399"
  },
  {
    "text": "can have multiple instances of your app right so again we are talking about um",
    "start": "792399",
    "end": "798000"
  },
  {
    "text": "being distributed being scalable so this is the same actor type distributed across uh two applications and different",
    "start": "798000",
    "end": "805240"
  },
  {
    "text": "IDs have been split across um different instances",
    "start": "805240",
    "end": "810639"
  },
  {
    "text": "um and then we have uh an application that then makes a call to uh to one of",
    "start": "810639",
    "end": "816880"
  },
  {
    "text": "the actors uh and that that goes um standardly like from depper to depper",
    "start": "816880",
    "end": "823560"
  },
  {
    "text": "between the pods and then inside of the pods thater communicates to the application as",
    "start": "823560",
    "end": "829160"
  },
  {
    "text": "usual now the interesting thing is uh how does this application know where to",
    "start": "829160",
    "end": "834959"
  },
  {
    "text": "search for let's say red actor one or yellow actor one how does it know it's",
    "start": "834959",
    "end": "841600"
  },
  {
    "text": "going to be on the left side and not on the pod on the right side well uh this is where the placement",
    "start": "841600",
    "end": "849440"
  },
  {
    "text": "service come into place comes into place the placement service um is a uh control",
    "start": "849440",
    "end": "856199"
  },
  {
    "text": "plane service that can run as a single service or uh uh um inhalability",
    "start": "856199",
    "end": "864720"
  },
  {
    "text": "mode and all theer instances connect to it so all of them all of the actor",
    "start": "864720",
    "end": "869920"
  },
  {
    "text": "instances that that serve actors are going to report to the placement service",
    "start": "869920",
    "end": "875639"
  },
  {
    "text": "and then the placement service is going to keep this table that explains that keeps track it doesn't",
    "start": "875639",
    "end": "882399"
  },
  {
    "text": "explain it keeps track it uh shows the mapping of an actor type",
    "start": "882399",
    "end": "889279"
  },
  {
    "text": "to the address let's say in this case the address of a of a pod so it can say that maybe the red actor is hosted on",
    "start": "889279",
    "end": "896639"
  },
  {
    "text": "pod one and pod two the two um uh pods on the uh the",
    "start": "896639",
    "end": "901959"
  },
  {
    "text": "upside top ones um okay and then it's going to know",
    "start": "901959",
    "end": "907399"
  },
  {
    "text": "that the yellow actor is hosted only on p po three and so on so this uh uh table",
    "start": "907399",
    "end": "914600"
  },
  {
    "text": "is stor in the placement service and then the placement service disseminates this table to all of the Dapper",
    "start": "914600",
    "end": "921720"
  },
  {
    "text": "instances and we say disseminate use that a specific terminology it means just it just sends",
    "start": "921720",
    "end": "928319"
  },
  {
    "text": "the table uh to every Dapper sidecar so now every Dapper side car has the",
    "start": "928319",
    "end": "934839"
  },
  {
    "text": "information about which actor types are hosted on which pods this sounds s simple but it's not",
    "start": "934839",
    "end": "944279"
  },
  {
    "text": "okay so all of this has to be uh very deterministic and very consistent we",
    "start": "944279",
    "end": "950000"
  },
  {
    "text": "cannot have some kind of inconsistent state where one Dapper side car is going",
    "start": "950000",
    "end": "955920"
  },
  {
    "text": "to have one version of the of the table and another D side car is going going to have another version of the table that",
    "start": "955920",
    "end": "962600"
  },
  {
    "text": "cannot happen it's it's going to really it can really cause problems because if you remember we have to guarantee",
    "start": "962600",
    "end": "969199"
  },
  {
    "text": "isolation right an actor can only execute one message at a time so if our",
    "start": "969199",
    "end": "975240"
  },
  {
    "text": "system by mistake instantiates the same the same actor ID on different pods we",
    "start": "975240",
    "end": "982160"
  },
  {
    "text": "can get into a situation where um uh we are doing parallel operations like",
    "start": "982160",
    "end": "988279"
  },
  {
    "text": "modification on the actor State uh uh of the of the same actor ID and it wasn't",
    "start": "988279",
    "end": "996240"
  },
  {
    "text": "locked properly so we're by default by definition we're breaking the requirement of isolation we processing",
    "start": "996240",
    "end": "1003319"
  },
  {
    "text": "two two messages at the time and then reconciling the state there would be hell so we can never have a",
    "start": "1003319",
    "end": "1011360"
  },
  {
    "text": "situation of inconsistent tables it's a very sensitive uh thing to get right and",
    "start": "1011360",
    "end": "1018480"
  },
  {
    "text": "um uh the placement Service uh uh uh does it very well okay so now when where",
    "start": "1018480",
    "end": "1025959"
  },
  {
    "text": "all the Dapper um uh uh side cars have all the placement tables",
    "start": "1025959",
    "end": "1032120"
  },
  {
    "text": "information they it mean that means that they can contact and talk to to other actors so we can see here these areas",
    "start": "1032120",
    "end": "1039160"
  },
  {
    "text": "represent uh actor invocations um across theer side",
    "start": "1039160",
    "end": "1044438"
  },
  {
    "text": "car so now let's look a little bit deeper into the place service how is it",
    "start": "1044439",
    "end": "1049880"
  },
  {
    "text": "implemented because I just think it's um I mean you don't know as a as a final end user you don't need to know how that",
    "start": "1049880",
    "end": "1056400"
  },
  {
    "text": "works but I think it's totally worth it to dedicate a minute or tun it because it's just u i find it cool okay so the",
    "start": "1056400",
    "end": "1064760"
  },
  {
    "text": "placement Service as I said before can be um a single server and or it can run in high availability default is uh uh",
    "start": "1064760",
    "end": "1073280"
  },
  {
    "text": "treatbot um a replacement service reps a raft server so for raft",
    "start": "1073280",
    "end": "1080640"
  },
  {
    "text": "we use we use the Hashi Corp um implementation um we have so we have",
    "start": "1080640",
    "end": "1086280"
  },
  {
    "text": "three raft servers then communicating to each other this would be these blue lines those are they represent the raft",
    "start": "1086280",
    "end": "1093480"
  },
  {
    "text": "perer communication they're going to elect a leader and then all the Dapper side cars",
    "start": "1093480",
    "end": "1102080"
  },
  {
    "text": "are going to connect to that leader they're going to try well okay they're going to connect maybe to a",
    "start": "1102080",
    "end": "1107559"
  },
  {
    "text": "random one they're going to try here here if this is not the leader I'm going to try here then finally they can find the leader and connect to the leader but",
    "start": "1107559",
    "end": "1114840"
  },
  {
    "text": "uh the point is um because we need to have complete consistency uh we cannot",
    "start": "1114840",
    "end": "1121320"
  },
  {
    "text": "connect to the to the other placement services so all the daer side cars are going to connect to the leader placement",
    "start": "1121320",
    "end": "1128039"
  },
  {
    "text": "Service uh we establish a by directional grpc stream if the diaper side car hosts",
    "start": "1128039",
    "end": "1135760"
  },
  {
    "text": "any actor Types on connection uh is going to send the information about",
    "start": "1135760",
    "end": "1140880"
  },
  {
    "text": "which actor it host actors it hosts if it doesn't host anything just going to",
    "start": "1140880",
    "end": "1146960"
  },
  {
    "text": "uh uh initiate the connection and then when there is a change uh uh in the",
    "start": "1146960",
    "end": "1152400"
  },
  {
    "text": "placement table or even the initial uh table so the leader is going to distribute or disseminate the placement",
    "start": "1152400",
    "end": "1159360"
  },
  {
    "text": "table to all the Dapper um Dapper side card so how does it do that first is if",
    "start": "1159360",
    "end": "1164520"
  },
  {
    "text": "if there is an update first it's going to send a lock message to all the Dapper side car it's going to lock everything",
    "start": "1164520",
    "end": "1170240"
  },
  {
    "text": "it's going to send the table and then it's going to unlock um everything so",
    "start": "1170240",
    "end": "1175280"
  },
  {
    "text": "it's a little bit of a uh uh maybe slow let's call it's not slow it's very fast",
    "start": "1175280",
    "end": "1180960"
  },
  {
    "text": "obviously but uh it's still uh Tri messages so maybe in our world that is um not a very fast thing to do but this",
    "start": "1180960",
    "end": "1188320"
  },
  {
    "text": "is indeed necessary if you want to have those guarantees that we just talked about before okay um so let's go uh",
    "start": "1188320",
    "end": "1197799"
  },
  {
    "text": "maybe let's start uh looking into an example uh I'm going to mention in the end maybe some like",
    "start": "1197799",
    "end": "1204120"
  },
  {
    "text": "very some more common um Dapper actors use cases but one we see a lot and we",
    "start": "1204120",
    "end": "1211120"
  },
  {
    "text": "find very very nice for presentations because it's quite easy to understand is",
    "start": "1211120",
    "end": "1216960"
  },
  {
    "text": "the iot model so it's very common there's many users who use dier actors",
    "start": "1216960",
    "end": "1222039"
  },
  {
    "text": "for uh uh to represent iot devices so in our case here uh the iot device is going",
    "start": "1222039",
    "end": "1229400"
  },
  {
    "text": "to be this smart light bulb here and this device is controlled by",
    "start": "1229400",
    "end": "1235280"
  },
  {
    "text": "the actor server that has its own like deer C side C of course um we have a",
    "start": "1235280",
    "end": "1241120"
  },
  {
    "text": "storage layer and then on the other side uh because I mean it's not that it's",
    "start": "1241120",
    "end": "1247760"
  },
  {
    "text": "actually a human user right it controls the smart light bulb uh light bulb so",
    "start": "1247760",
    "end": "1253360"
  },
  {
    "text": "the human uh uses a phone application the phone application maybe connects the some kind of uh uh backend",
    "start": "1253360",
    "end": "1261559"
  },
  {
    "text": "application for this front end here and then then this application um all has a",
    "start": "1261559",
    "end": "1268320"
  },
  {
    "text": "daer side car uh and then when the user clicks the button hey turn on the",
    "start": "1268320",
    "end": "1274600"
  },
  {
    "text": "light that signal propagates to to the application the application brings the daer side car the Deer Side Car knowing",
    "start": "1274600",
    "end": "1282760"
  },
  {
    "text": "the information about the location of every actor by having the placement table that got from the placement",
    "start": "1282760",
    "end": "1288600"
  },
  {
    "text": "service here is going to Ping directly the Dapper that's responsible for that",
    "start": "1288600",
    "end": "1293960"
  },
  {
    "text": "application Dapper communicates to the application and the application finally sends a signal uh to the light bulb and",
    "start": "1293960",
    "end": "1301600"
  },
  {
    "text": "the light bulb is on let there be light great so this looks pretty simple right",
    "start": "1301600",
    "end": "1308679"
  },
  {
    "text": "um but then what if we have um millions of these bulbs here uh what happens then",
    "start": "1308679",
    "end": "1315360"
  },
  {
    "text": "maybe one s then wouldn't be enough really it could get start to get a little bit",
    "start": "1315360",
    "end": "1321200"
  },
  {
    "text": "tricky what happens if we have millions of users using this application well",
    "start": "1321200",
    "end": "1326720"
  },
  {
    "text": "this application here is not going to be enough then either right so what do we do the obvious um uh answer uh I guess",
    "start": "1326720",
    "end": "1335440"
  },
  {
    "text": "would be to scale out scale horizontally if we have you know all of these done",
    "start": "1335440",
    "end": "1340960"
  },
  {
    "text": "millions of users at the same time trying to switch on and off their lights or maybe then and it's not just on and",
    "start": "1340960",
    "end": "1347480"
  },
  {
    "text": "off uh like changing colors um dim them progam program them um uh it can get",
    "start": "1347480",
    "end": "1354840"
  },
  {
    "text": "busy and this is not lights I mean lights are maybe even easy because you don't switch your light on and off a",
    "start": "1354840",
    "end": "1361400"
  },
  {
    "text": "thousand times a day but if you're working with some temperature sensors uh",
    "start": "1361400",
    "end": "1366880"
  },
  {
    "text": "Smart City cameras speed cameras traffic lights um people flow in a metro station",
    "start": "1366880",
    "end": "1376240"
  },
  {
    "text": "and all kind of sensors like that you get a lot more traffic so all of that like the scale of that becomes really uh",
    "start": "1376240",
    "end": "1383799"
  },
  {
    "text": "impressive and formidable like you have to give it due respect and plan for it",
    "start": "1383799",
    "end": "1388919"
  },
  {
    "text": "plan for that scale so um then how would we do that this is this is where um uh a",
    "start": "1388919",
    "end": "1397799"
  },
  {
    "text": "model that can be easily distributed easily scaled out really helps and",
    "start": "1397799",
    "end": "1403120"
  },
  {
    "text": "really shines uh because it allows us to distribute this load um AC Ross multiple",
    "start": "1403120",
    "end": "1409640"
  },
  {
    "text": "uh multiple servers so how do you interact with actors um it's actually very simple they",
    "start": "1409640",
    "end": "1417520"
  },
  {
    "text": "expose HP end points so if you want to um invoke a method on on uh uh an actor",
    "start": "1417520",
    "end": "1426640"
  },
  {
    "text": "of type my actor with the ID of a this is how the end points is going to look like um and version then actors and this",
    "start": "1426640",
    "end": "1434159"
  },
  {
    "text": "is the actor type this is the actor ID and then we say to call the method update on this actor and this can be",
    "start": "1434159",
    "end": "1440679"
  },
  {
    "text": "whatever you want so you define this this these are the methods that you you defined on the actor you can save State",
    "start": "1440679",
    "end": "1447960"
  },
  {
    "text": "get the state um uh you can create reminders create timers and that's basically it's a it's",
    "start": "1447960",
    "end": "1455360"
  },
  {
    "text": "a really simple API and as I mentioned before you can uh there's also rappers you don't need to uh",
    "start": "1455360",
    "end": "1461919"
  },
  {
    "text": "use like pure HP calls you can use the uh the different",
    "start": "1461919",
    "end": "1467159"
  },
  {
    "text": "sdks um to interact with with actors okay",
    "start": "1467159",
    "end": "1474240"
  },
  {
    "text": "so more actors use cases like we went a little bit deeper maybe maybe not as",
    "start": "1474240",
    "end": "1480640"
  },
  {
    "text": "deep but a little bit in more detail on uh the iot actors um we also mentioned",
    "start": "1480640",
    "end": "1487039"
  },
  {
    "text": "that uh Halo used actors as one of the original or earlier maybe not original",
    "start": "1487039",
    "end": "1493440"
  },
  {
    "text": "but early definitely earlier um actor use cases so how would that look like",
    "start": "1493440",
    "end": "1498679"
  },
  {
    "text": "maybe let's take just a moment um uh uh to talk through that so uh when you have",
    "start": "1498679",
    "end": "1504960"
  },
  {
    "text": "a multiplayer game and you have millions and millions of users you can have um the session of each user be represented",
    "start": "1504960",
    "end": "1511760"
  },
  {
    "text": "by an actor and then uh there's multiple things that are trying to interact with that actors maybe another user is trying",
    "start": "1511760",
    "end": "1519000"
  },
  {
    "text": "to shoot a gun at it another user is going to try to push it and then maybe there is some energy field that is",
    "start": "1519000",
    "end": "1526279"
  },
  {
    "text": "interacting and not in terms of changing its physical location which is by the way a property of the actor so it is a",
    "start": "1526279",
    "end": "1531960"
  },
  {
    "text": "concurent request but maybe it's um lowering its uh strength lives heart",
    "start": "1531960",
    "end": "1537960"
  },
  {
    "text": "stamina I mean I don't know I'm not really a gamer person um but but yeah you can use the terminology that you",
    "start": "1537960",
    "end": "1544440"
  },
  {
    "text": "want here um uh so then there's maybe um",
    "start": "1544440",
    "end": "1549640"
  },
  {
    "text": "some other user trying to give it put something else in its inventory so there",
    "start": "1549640",
    "end": "1555760"
  },
  {
    "text": "can be really a lot of messages a lot of things events trying to interact with that same actor and um uh we have to",
    "start": "1555760",
    "end": "1566080"
  },
  {
    "text": "account for raise conditions into into that right so that's why the actor model that that guarantees this isolation and",
    "start": "1566080",
    "end": "1573159"
  },
  {
    "text": "sequential execution of messages um is a really nice way um nice solution for this and then on",
    "start": "1573159",
    "end": "1580440"
  },
  {
    "text": "top of it all like the scale that again it always comes back the scale it's a really big deal really important with",
    "start": "1580440",
    "end": "1587240"
  },
  {
    "text": "actors it's um it's a good selling point when",
    "start": "1587240",
    "end": "1595279"
  },
  {
    "text": "you're talking about millions and millions of players so uh uh and then if you if you",
    "start": "1595279",
    "end": "1603679"
  },
  {
    "text": "have millions of actors that maybe played the game today and then left you",
    "start": "1603679",
    "end": "1609279"
  },
  {
    "text": "don't want to leave all that uh uh memory just hanging around right so uh",
    "start": "1609279",
    "end": "1614960"
  },
  {
    "text": "with virtual actors all of that is going to clean up as soon as the uh the session times out after maybe half an",
    "start": "1614960",
    "end": "1621520"
  },
  {
    "text": "hour 30 minutes of um of the player",
    "start": "1621520",
    "end": "1626559"
  },
  {
    "text": "leaving the game the system is going to kick in and free up that memory so other",
    "start": "1626559",
    "end": "1631919"
  },
  {
    "text": "users maybe can use it and we don't have to vertically scale our system or even",
    "start": "1631919",
    "end": "1637360"
  },
  {
    "text": "horizontally scale our system uh and provide spend more run right um so I",
    "start": "1637360",
    "end": "1644640"
  },
  {
    "text": "think I mean there's a a bunch of stuff here I'm not going to uh read all of them but it's important that also um uh",
    "start": "1644640",
    "end": "1651200"
  },
  {
    "text": "we persist the state to an external store um actors can communicate to each other maybe there's like even a a a chat",
    "start": "1651200",
    "end": "1659440"
  },
  {
    "text": "between them so all of that becomes really really interesting um then even more actor use",
    "start": "1659440",
    "end": "1666600"
  },
  {
    "text": "cases so we already saw iot and we talked about the light buls I mentioned also um that it can be uh um even more",
    "start": "1666600",
    "end": "1676200"
  },
  {
    "text": "used when you talk about sensor with a lot of data streaming through it um all",
    "start": "1676200",
    "end": "1681240"
  },
  {
    "text": "the time it can be used for to Define business workflows I've seen some use",
    "start": "1681240",
    "end": "1686360"
  },
  {
    "text": "cases where people you use uh actors even for locking so they started using",
    "start": "1686360",
    "end": "1692320"
  },
  {
    "text": "them maybe for simple locking but then they added some behavior on top of it which is perfectly a valid use",
    "start": "1692320",
    "end": "1699679"
  },
  {
    "text": "case um state for long long running services like um yeah we mentioned game",
    "start": "1699679",
    "end": "1704880"
  },
  {
    "text": "sessions but I mean shopping cart sessions um I don't know about you if you complete",
    "start": "1704880",
    "end": "1710320"
  },
  {
    "text": "your shopping in a few minutes but I sometimes leave my Amazon cards just for a few things to pile up during a week or",
    "start": "1710320",
    "end": "1717480"
  },
  {
    "text": "a few weeks uh and then I create one single order so even the shopping cart session is not something uh is something",
    "start": "1717480",
    "end": "1726120"
  },
  {
    "text": "that can benefit from actors like some uh machine learning AI processing",
    "start": "1726120",
    "end": "1731640"
  },
  {
    "text": "pipelines uh scheduling as we mentioned um automation like breing big files",
    "start": "1731640",
    "end": "1738080"
  },
  {
    "text": "moving a lot of data from one place to another then it fails and you need to retry just yesterday I was talking to",
    "start": "1738080",
    "end": "1743880"
  },
  {
    "text": "someone who had a use case like that uh and modernizing existing systems so it's",
    "start": "1743880",
    "end": "1750679"
  },
  {
    "text": "very common that you have a an older system that uses some kind of rdbms transactional",
    "start": "1750679",
    "end": "1757600"
  },
  {
    "text": "database where acid is really a key property so transactionality is really important and",
    "start": "1757600",
    "end": "1764360"
  },
  {
    "text": "sometimes the database cannot really um support the scale that's needed so some",
    "start": "1764360",
    "end": "1771440"
  },
  {
    "text": "in some use cases maybe some of those um uh cases",
    "start": "1771440",
    "end": "1777000"
  },
  {
    "text": "can be offloaded can be solved uh uh with an actor obviously we're talking about different Scopes here uh when we",
    "start": "1777000",
    "end": "1784360"
  },
  {
    "text": "talk about asset that's on the level of a database transaction",
    "start": "1784360",
    "end": "1789399"
  },
  {
    "text": "right single system uh when we're talking about actors it's on the level of the distributed system but so it's",
    "start": "1789399",
    "end": "1795840"
  },
  {
    "text": "not exactly the same guarantees but but if you combine it with maybe some some other things you can get to a similar",
    "start": "1795840",
    "end": "1802799"
  },
  {
    "text": "result and my favorite and coolest uh by far use case out of all is the use case",
    "start": "1802799",
    "end": "1810279"
  },
  {
    "text": "the astronauts in the international space stations uh run uh which is they",
    "start": "1810279",
    "end": "1816840"
  },
  {
    "text": "use thater actors to run a model that uh visually inspects their uh their gloves",
    "start": "1816840",
    "end": "1823720"
  },
  {
    "text": "uh space gloves before them going into into space for some micro tears uh while",
    "start": "1823720",
    "end": "1830799"
  },
  {
    "text": "that process used to take um a long time in the past and it was done manually um",
    "start": "1830799",
    "end": "1837600"
  },
  {
    "text": "it was um it is done uh with daer actors right now uh and yeah it makes us all",
    "start": "1837600",
    "end": "1845640"
  },
  {
    "text": "very proud it's definitely a cool thing to be able to say yeah my C Dron in space so definitely feels really",
    "start": "1845640",
    "end": "1852679"
  },
  {
    "text": "nice okay uh thank you all if we have more time I can show you maybe some some",
    "start": "1852679",
    "end": "1858360"
  },
  {
    "text": "codes that shows how simple actors are to implement if not we can maybe leave a",
    "start": "1858360",
    "end": "1864080"
  },
  {
    "text": "link to the repo later and people can take a look and you can just look at the Dapper quick starts in the different U",
    "start": "1864080",
    "end": "1870279"
  },
  {
    "text": "SDK libraries um and uh uh yeah enjoy the beauty of that rors thank you",
    "start": "1870279",
    "end": "1879120"
  }
]