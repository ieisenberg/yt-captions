[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "all right let's get started thank you everybody for joining us today uh this talk is about six door sig store the",
    "start": "240",
    "end": "5839"
  },
  {
    "text": "past the present and the future my name is dan lawrence and up here is",
    "start": "5839",
    "end": "10960"
  },
  {
    "text": "bob calloway and introduce yourself",
    "start": "10960",
    "end": "15240"
  },
  {
    "text": "i'm bob calloway i'm a software engineer at red hat um working on various supply chain projects um also one of the uh",
    "start": "19359",
    "end": "26800"
  },
  {
    "text": "members of the technical steering committee for sigstor awesome so thanks for joining us right before lunch today and delaying your",
    "start": "26800",
    "end": "32880"
  },
  {
    "text": "lunch a little bit we're gonna be talking about sig storage sig store is a new linux foundation project to help improve software supply",
    "start": "32880",
    "end": "39360"
  },
  {
    "text": "chain security through transparency we're going to talk a little bit about supply chain security but this is one of",
    "start": "39360",
    "end": "45840"
  },
  {
    "start": "42000",
    "end": "90000"
  },
  {
    "text": "like 100 talks about that topic this kubecon so i don't think we need to spend too much time on that uh was anybody here at supply chain security",
    "start": "45840",
    "end": "52000"
  },
  {
    "text": "day a few days ago okay a lot of familiar faces here in the back uh we're gonna be going over the",
    "start": "52000",
    "end": "57760"
  },
  {
    "text": "history of state store where it started uh a few it was earlier 2021 but uh yeah it feels",
    "start": "57760",
    "end": "64000"
  },
  {
    "text": "like a couple months but it's been a long time now um some of the work we've done along the way and we're gonna do",
    "start": "64000",
    "end": "69439"
  },
  {
    "text": "some demos showing how all the different components of stick store fit together and can be used with a couple",
    "start": "69439",
    "end": "74560"
  },
  {
    "text": "real world examples relevant to kubecon we're going to cover some of the architecture there's some complicated uh",
    "start": "74560",
    "end": "80720"
  },
  {
    "text": "hand wavy spaghetti drawings but we'll break them down piece by piece and show how they all fit together",
    "start": "80720",
    "end": "85759"
  },
  {
    "text": "and then we'll talk about some of the work we have planned in cig store going forward",
    "start": "85759",
    "end": "90320"
  },
  {
    "start": "90000",
    "end": "130000"
  },
  {
    "text": "so we have one slide here one obligatory one on supply chain security before we can move on a bunch of scary figures",
    "start": "91759",
    "end": "97680"
  },
  {
    "text": "graphs going up and to the right these are both from the recent sona type report",
    "start": "97680",
    "end": "102720"
  },
  {
    "text": "a 650 percent increase in software supply chain attacks and open source in 2021",
    "start": "102720",
    "end": "108799"
  },
  {
    "text": "these things aren't slowing down i think the eu predicted another 400 percent increase next year",
    "start": "108799",
    "end": "115360"
  },
  {
    "text": "lots of attacks are happening this is very scary but thankfully a whole bunch of projects a whole bunch of people here at uh kubecon a whole bunch of people in",
    "start": "115360",
    "end": "121920"
  },
  {
    "text": "the cloud native ecosystem are working on helping protect open source and protect software supply chains",
    "start": "121920",
    "end": "129840"
  },
  {
    "start": "130000",
    "end": "245000"
  },
  {
    "text": "so like i said cycler's mission statement is to really help improve software supply chain transparency",
    "start": "130720",
    "end": "136800"
  },
  {
    "text": "we're doing this through software signing and provenance when we originally started the sig store project we took a lot of inspiration from let's",
    "start": "136800",
    "end": "143200"
  },
  {
    "text": "encrypt how many people here use let's encrypt every day pretty much everybody here if anybody",
    "start": "143200",
    "end": "149440"
  },
  {
    "text": "remembers what the internet was like before let's encrypt uh most does anybody remember that no a little",
    "start": "149440",
    "end": "154720"
  },
  {
    "text": "bit okay um yeah nothing was encrypted um everything was insecure it was because you had to go buy complicated uh",
    "start": "154720",
    "end": "162160"
  },
  {
    "text": "x 509 certificates from certificate authorities you had to pay with credit cards it was expensive you had to email",
    "start": "162160",
    "end": "168160"
  },
  {
    "text": "things back and forth you had to figure out what folder to drop them in in your server the giant pane um and so let's encrypt came along and",
    "start": "168160",
    "end": "174560"
  },
  {
    "text": "thought um we can solve this with automation we can solve this with transparency and we can solve this with open source and so let's encrypt uh",
    "start": "174560",
    "end": "181840"
  },
  {
    "text": "pushed the new standards they built a whole bunch of tooling infrastructure and made it free easy and automatic to get secure",
    "start": "181840",
    "end": "187920"
  },
  {
    "text": "certificates for your website and so now you can drop you know one config line into your kubernetes ammo pretty much",
    "start": "187920",
    "end": "193519"
  },
  {
    "text": "and get uh encrypted traffic over the internet and as a result pretty much everything is encrypted now i don't",
    "start": "193519",
    "end": "199599"
  },
  {
    "text": "remember the last time i saw one of those red x's in chrome when i hit a website um i've driven uh this to",
    "start": "199599",
    "end": "205440"
  },
  {
    "text": "ubiquity by making things easy and free and transparent um and so we thought we'd try to do the same thing in sigstor",
    "start": "205440",
    "end": "211760"
  },
  {
    "text": "but for code signing when you're talking about supply chains it's a lot of the same problems",
    "start": "211760",
    "end": "216879"
  },
  {
    "text": "there are code signing certificate authorities but they're expensive and they're not automated and it's hard to",
    "start": "216879",
    "end": "222000"
  },
  {
    "text": "get them it's hard to renew them it's hard to fix things when they expire so we copied the let's encrypt playbook",
    "start": "222000",
    "end": "227040"
  },
  {
    "text": "of trying to automate things make them free and make them easy and try to get people signing the code that they release on pi pi and on container",
    "start": "227040",
    "end": "233920"
  },
  {
    "text": "registries and maven central and all the different open source repositories and so far the reception has been",
    "start": "233920",
    "end": "239920"
  },
  {
    "text": "amazing and uh the let's encrypt the playbook does work is what we're finding",
    "start": "239920",
    "end": "245280"
  },
  {
    "start": "245000",
    "end": "478000"
  },
  {
    "text": "uh so i'm gonna go over some of the history of the technology behind sig store here too quickly um because we rely on a lot of things that have been",
    "start": "246400",
    "end": "252159"
  },
  {
    "text": "developed over the past couple of decades in computer science some of the first things that started here were certificate transparency logs",
    "start": "252159",
    "end": "259280"
  },
  {
    "text": "these were really introduced widely across the web back in 2014 so not even a whole decade",
    "start": "259280",
    "end": "264720"
  },
  {
    "text": "ago but what transparency logs allow us to do in the web and internet with",
    "start": "264720",
    "end": "270240"
  },
  {
    "text": "internet and browsers is to put things in a central ledger where everybody can watch them",
    "start": "270240",
    "end": "275759"
  },
  {
    "text": "if you're a company that uses cas to get certificates for your browser you can monitor these transparency logs to make sure that all",
    "start": "275759",
    "end": "282240"
  },
  {
    "text": "of the certificates issued for your company's domain name are in there and are correctly issued so",
    "start": "282240",
    "end": "287280"
  },
  {
    "text": "that nobody can have an incorrect one and be masquerading as your company or spoofing your traffic",
    "start": "287280",
    "end": "292560"
  },
  {
    "text": "so mistakes happen the point of transparency allows is to capture those mistakes on record so you can find them",
    "start": "292560",
    "end": "297680"
  },
  {
    "text": "later recover from them and mitigate from the bad things that do happen we can't prevent mistakes from happening",
    "start": "297680",
    "end": "303520"
  },
  {
    "text": "it's about getting these things on the record so you can detect them and recover from them quickly a couple years later uh google team open",
    "start": "303520",
    "end": "310400"
  },
  {
    "text": "source trillion uh which is a database uh that uses um transparency logs as a core primitive",
    "start": "310400",
    "end": "317520"
  },
  {
    "text": "so there are a bunch of applications of trillion but many of them are powering the exact transparency logs that are used when you request certificates in",
    "start": "317520",
    "end": "323360"
  },
  {
    "text": "your browser today shortly after that uh people started thinking about how to use transparency",
    "start": "323360",
    "end": "329199"
  },
  {
    "text": "logs for things other than internet traffic and x509 certificates mozilla published a paper called binary",
    "start": "329199",
    "end": "336160"
  },
  {
    "text": "transparency for firefox firefox is a very popular web browser it was at the time and mozilla was taking it seriously",
    "start": "336160",
    "end": "342560"
  },
  {
    "text": "five or six years ago way before anybody else was and they were working on some techniques to use transparency logs the same way",
    "start": "342560",
    "end": "348240"
  },
  {
    "text": "they were used for certificates actually protect the firefox browser update process um so there's a white",
    "start": "348240",
    "end": "354080"
  },
  {
    "text": "paper here and it had some pretty cool ideas on how to do this by piggybacking on the existing certificate transparency",
    "start": "354080",
    "end": "359360"
  },
  {
    "text": "logs so it wouldn't need to run any extra operational infrastructure uh brandon phillips another cloud native",
    "start": "359360",
    "end": "366160"
  },
  {
    "text": "friend published a project called our get right after that in 2019",
    "start": "366160",
    "end": "371600"
  },
  {
    "text": "uh kind of more generalizing that idea of putting things in a transparency log and again reusing the existing",
    "start": "371600",
    "end": "377919"
  },
  {
    "text": "certificate transparency logs our get would download things from a url and make sure that the contents hadn't",
    "start": "377919",
    "end": "383919"
  },
  {
    "text": "changed by putting the mapping of the url to the digest of the contents in that url",
    "start": "383919",
    "end": "389440"
  },
  {
    "text": "in one of the existing certificate transparency logs by issuing a certificate through let's encrypt",
    "start": "389440",
    "end": "394960"
  },
  {
    "text": "and then stuffing that metadata inside of the certificate it was a really clever hack unfortunately certificate transparency",
    "start": "394960",
    "end": "401440"
  },
  {
    "text": "logs weren't meant for that so the existing ct log infrastructure people politely asked him to not do that",
    "start": "401440",
    "end": "407039"
  },
  {
    "text": "and stand up his own infrastructure instead of abusing or piggybacking on the ct logs that power web traffic",
    "start": "407039",
    "end": "414240"
  },
  {
    "text": "so brandon started on a couple other ideas here and we worked with him to start a more general transparency log called",
    "start": "414240",
    "end": "420960"
  },
  {
    "text": "recore that was really the start of the six store project uh mid 2020 mid to early 2020. so instead of piggybacking",
    "start": "420960",
    "end": "427599"
  },
  {
    "text": "on the existing infrastructure we ran our own instances of trillion as a public benefit so anybody can put",
    "start": "427599",
    "end": "432639"
  },
  {
    "text": "entries in here and anybody can verify entries in this instance of trillion",
    "start": "432639",
    "end": "438080"
  },
  {
    "text": "put a bunch of other pieces and tools together around march of 2021 so some tooling to interact with that transparency log",
    "start": "438080",
    "end": "444639"
  },
  {
    "text": "and some container specific tooling as well that we'll do some demos of later um a bunch of the components have",
    "start": "444639",
    "end": "450000"
  },
  {
    "text": "started to mature rapidly 2021 is where supply chain kind of took off and hit the mainstream",
    "start": "450000",
    "end": "456000"
  },
  {
    "text": "and we've got a whole bunch of different public uh services that are running that are stabilizing as we go",
    "start": "456000",
    "end": "461840"
  },
  {
    "text": "the cosign tool itself which is for signing and verifying containers hit a 1.0 or ga release back in july",
    "start": "461840",
    "end": "469680"
  },
  {
    "text": "and the transparency logs that it interacts with are going to move to beta any data",
    "start": "469680",
    "end": "477319"
  },
  {
    "start": "478000",
    "end": "516000"
  },
  {
    "text": "um so here's some stats on the community the activity that we've seen it's really been amazing all of the support from",
    "start": "478879",
    "end": "484080"
  },
  {
    "text": "everybody uh in advancing the c store project um across all the different repositories and projects we've had basically since",
    "start": "484080",
    "end": "489840"
  },
  {
    "text": "just march of this year there have been 820 commits over 100 contributors as of yesterday",
    "start": "489840",
    "end": "496319"
  },
  {
    "text": "20 different organizations or companies participating it's really an awesome vendor neutral multi-company all the",
    "start": "496319",
    "end": "502479"
  },
  {
    "text": "goodness of open source that's allowing stake store to get to where it is today the transparency log it just checked",
    "start": "502479",
    "end": "508800"
  },
  {
    "text": "yesterday has almost a million so three quarters of a million entries in it so far which is awesome to see too",
    "start": "508800",
    "end": "515919"
  },
  {
    "start": "516000",
    "end": "553000"
  },
  {
    "text": "so here's the very complicated spaghetti and wavy drawing that i talked about before we're going to break this down",
    "start": "517599",
    "end": "522640"
  },
  {
    "text": "into the three different pieces so you don't need to understand everything right now and with some demos too i'm",
    "start": "522640",
    "end": "527760"
  },
  {
    "text": "going to do some demos showing how to assign a container and then verify that container all the way back to the source",
    "start": "527760",
    "end": "533839"
  },
  {
    "text": "code it came from even through a base image i think we're getting that feedback again [Music]",
    "start": "533839",
    "end": "540480"
  },
  {
    "text": "cool there we go and we're going to show how all these things fit together too and then bob is going to do a demo that breaks it down",
    "start": "540480",
    "end": "547200"
  },
  {
    "text": "even farther showing how to do all this in bash without even using the tooling that we built",
    "start": "547200",
    "end": "552800"
  },
  {
    "start": "553000",
    "end": "1023000"
  },
  {
    "text": "all right so here's the first demo let me get out of here i've got a couple tabs open first this",
    "start": "553839",
    "end": "560959"
  },
  {
    "text": "is a simple go application that's in the github repo here this is a basic hello world go",
    "start": "560959",
    "end": "566320"
  },
  {
    "text": "application just prints hello world it is containerized using a tool called",
    "start": "566320",
    "end": "571760"
  },
  {
    "text": "co so anybody use co to build go application cool",
    "start": "571760",
    "end": "577440"
  },
  {
    "text": "co-fan club in the back so this runs into github action it builds a container in co",
    "start": "577440",
    "end": "583920"
  },
  {
    "text": "and publishes it to ghcr.io this whole process is signed and",
    "start": "583920",
    "end": "589519"
  },
  {
    "text": "verified using ambient credentials that are present in the github action itself using an awesome github sig store",
    "start": "589519",
    "end": "595839"
  },
  {
    "text": "integration that we work together on so you don't need any secrets in here there are no credentials this is all",
    "start": "595839",
    "end": "601519"
  },
  {
    "text": "short-term stuff that's handled automatically by github one of the cool benefits of this is that the credentials are bound to the exact",
    "start": "601519",
    "end": "607680"
  },
  {
    "text": "run of the action itself so this github action can run every time something is committed it can run manually each run will get its own",
    "start": "607680",
    "end": "614560"
  },
  {
    "text": "unique set of credentials that are signed by github and so we can track things down not just to the repo they",
    "start": "614560",
    "end": "619680"
  },
  {
    "text": "came from to the exact invocation of the actions we can figure out when it ran exactly which commit triggered it",
    "start": "619680",
    "end": "626000"
  },
  {
    "text": "who pushed that commitment all that goodness this uses just the normal cofile which bases",
    "start": "626000",
    "end": "632800"
  },
  {
    "text": "your go application on top of distrolus uh distrolus is a set of lightweight",
    "start": "632800",
    "end": "638320"
  },
  {
    "text": "base images um designed for containers does anybody here use distrolus",
    "start": "638320",
    "end": "644880"
  },
  {
    "text": "a bunch of people um even if you don't know that you use it you're probably using it",
    "start": "644880",
    "end": "650399"
  },
  {
    "text": "because our friends here in the kubernetes release group moved the kubernetes images over to distro list by",
    "start": "650399",
    "end": "656000"
  },
  {
    "text": "default so if you're running a kubernetes cluster you probably have distrolus in there whether you know about it or not",
    "start": "656000",
    "end": "662880"
  },
  {
    "text": "and luckily enough these distrolus images are also built and signed and have all the provenance associated with",
    "start": "663120",
    "end": "669440"
  },
  {
    "text": "these builds inside of the recore transparency log so in this demo we're going to start with",
    "start": "669440",
    "end": "674560"
  },
  {
    "text": "the application based image itself follow that back to the commit that signed it and then jump all the way to the base",
    "start": "674560",
    "end": "680720"
  },
  {
    "text": "image from that as well and follow that back to the job that built and signed that base",
    "start": "680720",
    "end": "685760"
  },
  {
    "text": "image so let's open up the terminal here and start typing some commands",
    "start": "685760",
    "end": "693120"
  },
  {
    "text": "bob has them all saved for me we're going to do it live all right so we're going to start by setting the experimental environment",
    "start": "696959",
    "end": "703920"
  },
  {
    "text": "variable because this uses the experimental features of the transparency log and we're going to verify the image",
    "start": "703920",
    "end": "710240"
  },
  {
    "text": "itself it is a ghcr dot io the name of my github repo",
    "start": "710240",
    "end": "715519"
  },
  {
    "text": "and we're going to do some jq magic here so this fetches the signatures and",
    "start": "715519",
    "end": "722399"
  },
  {
    "text": "downloads all the it verifies the signatures and dumps the prominent information here so",
    "start": "722399",
    "end": "728720"
  },
  {
    "text": "we can figure out exactly where it came from the jq command formats it nicely we can scroll up and see a couple different",
    "start": "728720",
    "end": "734880"
  },
  {
    "text": "entries here we can see that it was signed",
    "start": "734880",
    "end": "739920"
  },
  {
    "text": "by this subject so this is the fancy github sig store direct integration that i was talking about",
    "start": "739920",
    "end": "745360"
  },
  {
    "text": "before so we can see that this is a token that was signed by github down to this exact github repository",
    "start": "745360",
    "end": "752800"
  },
  {
    "text": "the exact action inside of it and it ran on main and this is the exact commit that it ran",
    "start": "752800",
    "end": "759120"
  },
  {
    "text": "at so we can take a look at that commit if we want to come back here",
    "start": "759120",
    "end": "765760"
  },
  {
    "text": "which one was it e",
    "start": "765839",
    "end": "771040"
  },
  {
    "text": "i'll run rebo",
    "start": "771519",
    "end": "774480"
  },
  {
    "text": "yeah that is the last commit here the e041",
    "start": "777040",
    "end": "782279"
  },
  {
    "text": "back to the terminal now we're going to take a look at that image itself using the crane tool which",
    "start": "782320",
    "end": "788800"
  },
  {
    "text": "is designed for working with registries we're going to look at the manifest the actual oci manifest of that image itself",
    "start": "788800",
    "end": "796480"
  },
  {
    "text": "pipe that to jq as well and this is how we're going to find the base image so the oci specification recently added",
    "start": "796480",
    "end": "802880"
  },
  {
    "text": "a standard annotation where build tools can place the base image that an image was built from",
    "start": "802880",
    "end": "808079"
  },
  {
    "text": "so we see these two things here so this was built from the distrolus static image at this digest so that's how we're going",
    "start": "808079",
    "end": "814800"
  },
  {
    "text": "to jump back over to the base image and start looking up signatures there",
    "start": "814800",
    "end": "819760"
  },
  {
    "text": "so we're going to take that digest we don't need to know anything about how this was built we just need to know the digest of the container itself we're",
    "start": "821279",
    "end": "828399"
  },
  {
    "text": "going to search in the transparency log for that digest and do some shell magic",
    "start": "828399",
    "end": "836160"
  },
  {
    "text": "we've got a bunch of entries here so the reason there's a bunch of entries here is because the distrolus images are actually reproducible there's about 50",
    "start": "836160",
    "end": "843600"
  },
  {
    "text": "images 50 variants of the images for different architectures that are built from the same repo and they all rebuild every time my commit is pushed since",
    "start": "843600",
    "end": "850320"
  },
  {
    "text": "it's reproducible we get the same exact digest unless something actually changed for that specific image so here we",
    "start": "850320",
    "end": "855519"
  },
  {
    "text": "actually have a bunch of runs reproducing that image itself which is pretty cool so if we take one of these",
    "start": "855519",
    "end": "860560"
  },
  {
    "text": "we can fetch that from the log and start breaking apart the response more",
    "start": "860560",
    "end": "867040"
  },
  {
    "text": "this is hitting the transparency log a couple more jq incantations and we can see",
    "start": "868800",
    "end": "875760"
  },
  {
    "text": "a lot more json here but this is the exact provenance so the providence contains information about how the image",
    "start": "875760",
    "end": "880800"
  },
  {
    "text": "was built and this is captured by the build system so this is an automatic build system",
    "start": "880800",
    "end": "886079"
  },
  {
    "text": "using tekton cd um this captures things like the inputs to the build the exact containers that ran in order so from",
    "start": "886079",
    "end": "892880"
  },
  {
    "text": "those inputs which were the source code the exact containers that ran with their digests the commands that ran inside of",
    "start": "892880",
    "end": "898959"
  },
  {
    "text": "those containers all the way up to the final images that got built so we can see the commit that it was",
    "start": "898959",
    "end": "905120"
  },
  {
    "text": "started at in the distrolus repository see the container that ran we can see",
    "start": "905120",
    "end": "910560"
  },
  {
    "text": "those entry points we can trace this all the way back to that commit itself",
    "start": "910560",
    "end": "916560"
  },
  {
    "text": "but why stop there we can actually start to look up signatures on the commits do people sign their commits how many",
    "start": "918880",
    "end": "924639"
  },
  {
    "text": "people sign commits exactly not too many because it's really hard to do and it's hard to look up the",
    "start": "924639",
    "end": "930639"
  },
  {
    "text": "signatures and actually do anything with them so there's some cool demos and hacks that we've done with sigstor we can actually sign commits and instead of",
    "start": "930639",
    "end": "936240"
  },
  {
    "text": "putting them in the git repository you can put those signatures in the transparency log as well music commit is just a long string",
    "start": "936240",
    "end": "942320"
  },
  {
    "text": "so i signed these commits in the distrolus repository and hello core repository and we can look up signatures",
    "start": "942320",
    "end": "948560"
  },
  {
    "text": "for that commit as well in our transparency log so we've got that here",
    "start": "948560",
    "end": "956880"
  },
  {
    "text": "let's get the information for that entry and we should see my email address in",
    "start": "956959",
    "end": "962079"
  },
  {
    "text": "here",
    "start": "962079",
    "end": "965079"
  },
  {
    "text": "this apart a bit we've got a certificate we're going to pipe that through open ssl and we should see a subject information",
    "start": "968079",
    "end": "975040"
  },
  {
    "text": "awesome and that is my gmail address here this is the rest of the certificate this was",
    "start": "975040",
    "end": "980720"
  },
  {
    "text": "issued by the certificate authority that we operate for free as part of the sig store project",
    "start": "980720",
    "end": "986480"
  },
  {
    "text": "so my personal account signed the commit in the distrolus repository and we verified that backwards all the way from",
    "start": "986480",
    "end": "991759"
  },
  {
    "text": "the code in the base image to exactly the systems that it was built on all the way up to the application image and the",
    "start": "991759",
    "end": "996880"
  },
  {
    "text": "exact system that was built on so these are systems in different github organizations one was using github",
    "start": "996880",
    "end": "1002480"
  },
  {
    "text": "actions one was using techton so we've traced these across build systems across organizations from source code all the",
    "start": "1002480",
    "end": "1008720"
  },
  {
    "text": "way to running container cool and that is the end of this demo",
    "start": "1008720",
    "end": "1015440"
  },
  {
    "text": "i'm going to hand it back over to bob awesome",
    "start": "1015440",
    "end": "1022160"
  },
  {
    "start": "1023000",
    "end": "1233000"
  },
  {
    "text": "oh thanks dan so as dan mentioned there's many moving pieces involved here i'm",
    "start": "1023040",
    "end": "1028558"
  },
  {
    "text": "going to kind of do a deep dive into three of those components and the first one's um called full co and so this is",
    "start": "1028559",
    "end": "1033600"
  },
  {
    "text": "the certificate authority um that is serving as a couple different roles but",
    "start": "1033600",
    "end": "1039280"
  },
  {
    "text": "number one it's it is the um the ca that you're going to go to to get a code signing certificate um and it's",
    "start": "1039280",
    "end": "1045839"
  },
  {
    "text": "going to have that identity information that dan just showed off with his gmail address embedded in that certificate so rather",
    "start": "1045839",
    "end": "1052000"
  },
  {
    "text": "than just having the bare public key to verify the signature you're actually going to have this certificate that will contain extra information about whose",
    "start": "1052000",
    "end": "1058960"
  },
  {
    "text": "identity was who was the signer who've actually vouched for that signer um and in the case of his email address it was",
    "start": "1058960",
    "end": "1064559"
  },
  {
    "text": "actually google but we also do integrations with spiffy spire so we can actually have the workload identity",
    "start": "1064559",
    "end": "1070640"
  },
  {
    "text": "actually um you know be recorded in the certificate as well so there's kind of a there's a obviously",
    "start": "1070640",
    "end": "1077280"
  },
  {
    "text": "with oidc it's built on top of oauth and so there's a multi-legged flow that happens behind the scenes but um",
    "start": "1077280",
    "end": "1083600"
  },
  {
    "text": "in essence fulcio is issuing certificates and it actually has a transparency log that runs as a",
    "start": "1083600",
    "end": "1089840"
  },
  {
    "text": "part of its deployment as well so you can think of that as providing key transparency to say hey at this point in",
    "start": "1089840",
    "end": "1095360"
  },
  {
    "text": "time we have a certificates of being granted we had a valid identity token which was",
    "start": "1095360",
    "end": "1100400"
  },
  {
    "text": "vouched for by a particular provider and all of that is now stored in an immutable ledger so we can walk that",
    "start": "1100400",
    "end": "1105520"
  },
  {
    "text": "back at any point in time to verify the validity of the signature the validity of all the time stamps all of",
    "start": "1105520",
    "end": "1111440"
  },
  {
    "text": "that can be put together and full co acts as that authority that can tie all this together now",
    "start": "1111440",
    "end": "1118000"
  },
  {
    "text": "we've got kind of two different modes one is you know if anybody here has ever tried to manage their own pgp keys it's",
    "start": "1118000",
    "end": "1124799"
  },
  {
    "text": "not the easiest thing to do in the world and i think frankly that's one of the biggest inhibitors to actually people signing software is just key",
    "start": "1124799",
    "end": "1130400"
  },
  {
    "text": "management's too darn hard um so you know one of the things that the the",
    "start": "1130400",
    "end": "1136000"
  },
  {
    "text": "team has been working on is something we like to call keyless mode now obviously there are still keys involved because we're doing crypto but think of these",
    "start": "1136000",
    "end": "1142559"
  },
  {
    "text": "more as ephemeral keys um so if i have a ledger that stores all this information and i can walk that back and prove that",
    "start": "1142559",
    "end": "1148799"
  },
  {
    "text": "these things existed in a point of time i actually don't need to store a key uh the private key forever i can actually",
    "start": "1148799",
    "end": "1154720"
  },
  {
    "text": "just throw it away and treat it as an ephemeral object so we do full co operates in both modes if",
    "start": "1154720",
    "end": "1160240"
  },
  {
    "text": "you've got your own keys and you want to use them great knock yourself out if you want to go to the keyless route we can support that as well",
    "start": "1160240",
    "end": "1167440"
  },
  {
    "text": "the as dan showed the email address and the issuer flag are actually stored as x509 extensions in the",
    "start": "1167440",
    "end": "1173440"
  },
  {
    "text": "certificate so if you've ever gone through the asm1 structure and looked through all that stuff they're actually there",
    "start": "1173440",
    "end": "1179360"
  },
  {
    "text": "inside um and again the this root of trust ultimately comes back to understanding when something was signed",
    "start": "1179360",
    "end": "1185200"
  },
  {
    "text": "who's attesting to the identity um and you know tying that all together so we can actually walk that through and",
    "start": "1185200",
    "end": "1191520"
  },
  {
    "text": "that's part of what i'll show you in my demo is actually how do we walk and look at these individual fields but from an architectural perspective",
    "start": "1191520",
    "end": "1198000"
  },
  {
    "text": "we can rely on public open identity providers if you have the desire to run your own",
    "start": "1198000",
    "end": "1204240"
  },
  {
    "text": "instance of full co when you want to use a corporate oidc provider that's totally capable as",
    "start": "1204240",
    "end": "1209280"
  },
  {
    "text": "well for the public instance we're not going to just federate in any single oidc provider that might be out there in",
    "start": "1209280",
    "end": "1214799"
  },
  {
    "text": "the world we're going to keep that that list fairly narrow but overall this this architecture",
    "start": "1214799",
    "end": "1220400"
  },
  {
    "text": "allows us to bind that identity without having to have a key signing ceremony or you know like a little party and",
    "start": "1220400",
    "end": "1226559"
  },
  {
    "text": "build your web of trust that way we're actually relying on uh on these primitives that exist on the internet uh",
    "start": "1226559",
    "end": "1231919"
  },
  {
    "text": "to make that happen the second component is the transparency logger what we call project recore as",
    "start": "1231919",
    "end": "1238880"
  },
  {
    "start": "1233000",
    "end": "1399000"
  },
  {
    "text": "dan mentioned this is based on the trillion project uh from google and we've developed what the trillion",
    "start": "1238880",
    "end": "1244320"
  },
  {
    "text": "developers would call a personality so this is a rest api that sits on top of that transparency log it's got a very",
    "start": "1244320",
    "end": "1250000"
  },
  {
    "text": "similar uh api structure to what the certificate transparency rfc would use",
    "start": "1250000",
    "end": "1256480"
  },
  {
    "text": "but in essence this is an immutable ledger so i can only append new entries to the log and because it's based on a",
    "start": "1256480",
    "end": "1262320"
  },
  {
    "text": "merkle hash i can actually walk the hash chain all the way back to the root to ensure that if this entry",
    "start": "1262320",
    "end": "1268240"
  },
  {
    "text": "exists in the log i can cryptographically prove that nobody has altered that log given the state of the tree at any point in time",
    "start": "1268240",
    "end": "1275280"
  },
  {
    "text": "one thing to note is that while we are signing artifacts we're signing containers or blobs the transparency log",
    "start": "1275280",
    "end": "1281120"
  },
  {
    "text": "does not actually store the blob or the container itself it is only storing the digest of what it was signed the",
    "start": "1281120",
    "end": "1288400"
  },
  {
    "text": "signature itself and then the public key that was used to verify that signature and recore actually does signature",
    "start": "1288400",
    "end": "1294320"
  },
  {
    "text": "verification before ever making an entry into a log so the things that are in the log um are were proven to be uh have",
    "start": "1294320",
    "end": "1301280"
  },
  {
    "text": "valid signatures at the time that they were written now i said we don't store content there",
    "start": "1301280",
    "end": "1306400"
  },
  {
    "text": "is uh there's two exceptions to that rule number one recore actually also acts as a timestamp authority",
    "start": "1306400",
    "end": "1313600"
  },
  {
    "text": "because again part of unwinding this whole route of trust is just saying i have a signed artifact here is great but",
    "start": "1313600",
    "end": "1318960"
  },
  {
    "text": "if i don't know when it was signed and who signed it then that's not enough information actually make a good decision so we needed to build that",
    "start": "1318960",
    "end": "1325280"
  },
  {
    "text": "capability in there's certainly other time stamp authorities out there that you can use but recore acts as one as",
    "start": "1325280",
    "end": "1330559"
  },
  {
    "text": "well so we store the entire timestamp object in the log and the other one is for providence",
    "start": "1330559",
    "end": "1336080"
  },
  {
    "text": "metadata so when dan showed kind of the the long json document of all the chains output from from tecton chains that",
    "start": "1336080",
    "end": "1342720"
  },
  {
    "text": "actually is persisted in the log as well so we're not trying to serve as a new content store for the internet where anything that's signed is downloaded",
    "start": "1342720",
    "end": "1349039"
  },
  {
    "text": "from the log that's not the intent here at all only the think of it as a metadata store for",
    "start": "1349039",
    "end": "1354559"
  },
  {
    "text": "information about the signing in provenance there another thing to note that happens with certificate transparency all the time is",
    "start": "1354559",
    "end": "1361039"
  },
  {
    "text": "there are actually entities that monitor these logs that will sit there and do the cryptographic proofs and walk that",
    "start": "1361039",
    "end": "1366640"
  },
  {
    "text": "merkle tree to make sure that nothing's actually been changed we expose that full information through our api set we",
    "start": "1366640",
    "end": "1372159"
  },
  {
    "text": "actually encourage people to develop monitors against our public logs um so again the aim of this is to not just",
    "start": "1372159",
    "end": "1377679"
  },
  {
    "text": "have a central source of truth that only um you know the you know a handful of developers will ultimately maintain and",
    "start": "1377679",
    "end": "1383520"
  },
  {
    "text": "control this needs to be open and transparent in order for people to trust it so we need monitors to play that role",
    "start": "1383520",
    "end": "1389840"
  },
  {
    "text": "so we have purdue university a shout out to professor santiago from there he's had his team working on building a",
    "start": "1389840",
    "end": "1395840"
  },
  {
    "text": "monitor and we're encouraging others to uh to build those as well and then finally dan showed off the the",
    "start": "1395840",
    "end": "1402159"
  },
  {
    "start": "1399000",
    "end": "1523000"
  },
  {
    "text": "verify capability of cosign but um this is a think of it as a a",
    "start": "1402159",
    "end": "1408320"
  },
  {
    "text": "swiss army knife that allows you to do many things primarily with containers but it also has some support for blobs",
    "start": "1408320",
    "end": "1413440"
  },
  {
    "text": "as well this is actually interacting behind the scenes with either key management providers so if you've used",
    "start": "1413440",
    "end": "1418799"
  },
  {
    "text": "um you know kms from aws or from google this actually can talk to their apis and",
    "start": "1418799",
    "end": "1424000"
  },
  {
    "text": "use those signing systems in addition to having native rsa or elliptic curve keys on your desktop that'll works as well",
    "start": "1424000",
    "end": "1431120"
  },
  {
    "text": "and that's also going to be the uh the entity that's uh contacting and communicating with the oci registry to actually pull down the container verify",
    "start": "1431120",
    "end": "1437520"
  },
  {
    "text": "the digest compute the signature and go back and store uh you know that information uh in in an artifact in the",
    "start": "1437520",
    "end": "1444080"
  },
  {
    "text": "registry as well so all of these systems are talking to one another but one point i want you to take",
    "start": "1444080",
    "end": "1449279"
  },
  {
    "text": "away is that this is fundamentally modular again like if you're using aws you can use the key management",
    "start": "1449279",
    "end": "1454720"
  },
  {
    "text": "service from there if you're using google these things are very interchangeable very modular so again we're not trying to solve this and you",
    "start": "1454720",
    "end": "1460159"
  },
  {
    "text": "have to only use our tool and nothing else we realize that that's not probably the most effective path forward",
    "start": "1460159",
    "end": "1466240"
  },
  {
    "text": "the last thing it does is once it signs the container in this case it's actually going to call out to record through the",
    "start": "1466240",
    "end": "1471760"
  },
  {
    "text": "rest api and make the entry in the log and return that back as part of the artifact as well",
    "start": "1471760",
    "end": "1478000"
  },
  {
    "text": "for verifying artifacts in a transparency log there's really two ways to do it one is you can query that log in real time that's not always practical",
    "start": "1478000",
    "end": "1485440"
  },
  {
    "text": "so very similar to what's done with ssl certificates is we actually can create what we call a sign entry timestamp this",
    "start": "1485440",
    "end": "1491600"
  },
  {
    "text": "is if you're familiar with certificate stapling that process is essentially what can be tacked on um to have a",
    "start": "1491600",
    "end": "1497760"
  },
  {
    "text": "verification or a cryptographic proof that hey this ca issued this certificate at this",
    "start": "1497760",
    "end": "1503520"
  },
  {
    "text": "particular point in time and i can walk that all the way back without having to make several round trips to a certificate of authority as you open",
    "start": "1503520",
    "end": "1509120"
  },
  {
    "text": "your browser so we do the same exact thing in cosine we have that artifact that you can put alongside an artifact",
    "start": "1509120",
    "end": "1515360"
  },
  {
    "text": "in a repository and you can walk that all offline and still have confidence that the entire chain of trust has not",
    "start": "1515360",
    "end": "1522559"
  },
  {
    "text": "been broken so another quick demo here i know again",
    "start": "1522559",
    "end": "1528400"
  },
  {
    "start": "1523000",
    "end": "1603000"
  },
  {
    "text": "another spaghetti diagram with lots of moving parts but i do want to kind of walk it through the through the steps of",
    "start": "1528400",
    "end": "1533840"
  },
  {
    "text": "what does this really look like if you're not using our nice cli or you know in many ways we're using uh you",
    "start": "1533840",
    "end": "1539440"
  },
  {
    "text": "know we're standing on the shoulders of giants of people that have worked on ssl and many other um technologies in the past but trying to",
    "start": "1539440",
    "end": "1545760"
  },
  {
    "text": "tie this together to make this uh you know this process as simple and as easy as we can so what i'll do is we'll start",
    "start": "1545760",
    "end": "1552480"
  },
  {
    "text": "by just creating an ephemeral key as i mentioned this kind of keyless mode and then we'll walk that through create",
    "start": "1552480",
    "end": "1557840"
  },
  {
    "text": "a random blob we'll sign that blob we'll push that out to the transparency log we'll actually generate a time stamp as",
    "start": "1557840",
    "end": "1564080"
  },
  {
    "text": "well using recore pull all of that together and have that collection of artifacts that then you could store in",
    "start": "1564080",
    "end": "1569440"
  },
  {
    "text": "an oci registry if you if you have a container or you could just put out for folks to download that artifact and",
    "start": "1569440",
    "end": "1575679"
  },
  {
    "text": "be able to verify that signature going forward",
    "start": "1575679",
    "end": "1580000"
  },
  {
    "text": "so we'll switch over here",
    "start": "1580880",
    "end": "1585159"
  },
  {
    "text": "all right so the first thing i'm going to do is generate an ephemeral key pair so i'll just use the",
    "start": "1588080",
    "end": "1593760"
  },
  {
    "text": "elliptic curve dsa algorithm good practice is to not show your private key um to the public internet so",
    "start": "1593760",
    "end": "1600720"
  },
  {
    "text": "i won't actually echo that out here but if you wanted to see it it was there i will show you the public key because obviously without that",
    "start": "1600720",
    "end": "1607200"
  },
  {
    "start": "1603000",
    "end": "1716000"
  },
  {
    "text": "you're not going to be able to verify the certificate or verify the signature rather so now we have this public private key",
    "start": "1607200",
    "end": "1613200"
  },
  {
    "text": "pair that's great it has nothing to do with my identity it's just random you know bits off of prime numbers that have",
    "start": "1613200",
    "end": "1618320"
  },
  {
    "text": "been written to the disk now i gotta have that linkage to who i am as an individual to be able to tie",
    "start": "1618320",
    "end": "1624720"
  },
  {
    "text": "identity to this overall flow so what i'm going to do is i'm now going to initiate an open identity",
    "start": "1624720",
    "end": "1631760"
  },
  {
    "text": "flow to actually get an open identity token from a provider in this case google",
    "start": "1631760",
    "end": "1637600"
  },
  {
    "text": "and just basically pull that down and store it on my local disk our tooling cosine and many of our other tools",
    "start": "1637600",
    "end": "1643360"
  },
  {
    "text": "actually automate this all behind the scenes i'm kind of giving you what actually happens under the covers look here so again it's not this complicated",
    "start": "1643360",
    "end": "1649279"
  },
  {
    "text": "if you use cosine but i want to kind of show you how all this ties together so shout out to the folks at st small step",
    "start": "1649279",
    "end": "1656240"
  },
  {
    "text": "they've written a really great cli for walking these sorts of flows called step and so this command is",
    "start": "1656240",
    "end": "1662559"
  },
  {
    "text": "literally just going to reach out to our oic provider that we're we're running a federated provider also shout out to the",
    "start": "1662559",
    "end": "1668559"
  },
  {
    "text": "dex community so we're actually running an instance of dex to federate in google github and microsoft on our",
    "start": "1668559",
    "end": "1674880"
  },
  {
    "text": "public instance and so what we'll do here is we'll just start that open identity flow",
    "start": "1674880",
    "end": "1681679"
  },
  {
    "text": "and when i hit enter here my browser is going to pop up and it's going to ask me to log in if you ever have seen one of",
    "start": "1681679",
    "end": "1687360"
  },
  {
    "text": "these like log into this website using google facebook whatever same exact thing is happening under the covers here",
    "start": "1687360",
    "end": "1693360"
  },
  {
    "text": "so in this case i'll choose to log in with google i i'm logged in with two different accounts here one from red hat where i",
    "start": "1693360",
    "end": "1699760"
  },
  {
    "text": "work and my own personal gmail in this case i'll sign it with my red hat account i click on that it says cool",
    "start": "1699760",
    "end": "1705360"
  },
  {
    "text": "successful come back to the command line let's actually look at what is inside of an open identity token so this is a a json",
    "start": "1705360",
    "end": "1713360"
  },
  {
    "text": "web token or jot as people will informally refer to it as so the contents of a jot is this json object",
    "start": "1713360",
    "end": "1719200"
  },
  {
    "start": "1716000",
    "end": "1934000"
  },
  {
    "text": "that's signed you've got some information in the header about the algorithm that's used to sign that content you've got a payload uh content",
    "start": "1719200",
    "end": "1726720"
  },
  {
    "text": "here inside this payload you've got an actual url for the issuer that has generated",
    "start": "1726720",
    "end": "1731840"
  },
  {
    "text": "this token in this case since we're using a federated identity provider this is actually the",
    "start": "1731840",
    "end": "1737200"
  },
  {
    "text": "sig store oauth um is the issuer but again this came from google since it was a federated um",
    "start": "1737200",
    "end": "1743440"
  },
  {
    "text": "scenario and again it's got my email address inside of it here as well so now i've got some ad you know an entity",
    "start": "1743440",
    "end": "1750640"
  },
  {
    "text": "that called google via sig store that has attested that bob callaway has presented valid tokens",
    "start": "1750640",
    "end": "1756960"
  },
  {
    "text": "you know valid authentication tokens to me and i'm willing to generate this token that lives for a very short amount of time that says hey this is this",
    "start": "1756960",
    "end": "1764080"
  },
  {
    "text": "should be used for any application that comes back to the client id of sig store now obviously if you're not running sig",
    "start": "1764080",
    "end": "1770080"
  },
  {
    "text": "store then it's worthless to you but since we are running sig store we're able to use this token to",
    "start": "1770080",
    "end": "1776320"
  },
  {
    "text": "call out to folsom and get a code signing certificate so the next thing i'm going to do is actually extract my email address from",
    "start": "1776320",
    "end": "1782480"
  },
  {
    "text": "this programmatically even though i could just probably type it in a more easy fashion extract it using a jq and a",
    "start": "1782480",
    "end": "1789120"
  },
  {
    "text": "couple other bash tricks and we'll put that into a file and then what we'll do now is we'll",
    "start": "1789120",
    "end": "1795760"
  },
  {
    "text": "we'll start the flow of calling out to the full co component one thing i need to do is i need to have prove to folsio",
    "start": "1795760",
    "end": "1800880"
  },
  {
    "text": "that i have possession of this public and private key pair that i've generated earlier so the way that i'm going to",
    "start": "1800880",
    "end": "1806240"
  },
  {
    "text": "prove that to folso is i'm actually going to sign this email address that actual string using that same private",
    "start": "1806240",
    "end": "1812720"
  },
  {
    "text": "key so and to do this i'm just going to use openssl using a sha-256 digest using my private",
    "start": "1812720",
    "end": "1820240"
  },
  {
    "text": "key and i'll generate a signature and put that into email.sig since it's elliptic curve that takes no",
    "start": "1820240",
    "end": "1826480"
  },
  {
    "text": "time at all and i'm ready to actually send an api request to fulcio we have a all of our stuff is written",
    "start": "1826480",
    "end": "1833039"
  },
  {
    "text": "through open api so our our specs are totally open we have swagger interfaces for all of this as well so if you're",
    "start": "1833039",
    "end": "1838240"
  },
  {
    "text": "curious to see what the interface actually looks like at a http level all of that's documented on",
    "start": "1838240",
    "end": "1843919"
  },
  {
    "text": "our on our github site but since again we're doing this through curl and not nice uis we're now going to",
    "start": "1843919",
    "end": "1850080"
  },
  {
    "text": "type a very long curl command with inline json setting content type and accept headers i would highly recommend",
    "start": "1850080",
    "end": "1856159"
  },
  {
    "text": "you don't do this if you don't have to we'll keep going",
    "start": "1856159",
    "end": "1861600"
  },
  {
    "text": "and now i'm finally done and i can type perfectly if you guys haven't noticed no mistakes as i go forward here",
    "start": "1861600",
    "end": "1868159"
  },
  {
    "text": "um so now i've called out to folsio everything's good to go let's look at the uh the certificate that came back",
    "start": "1868159",
    "end": "1874799"
  },
  {
    "text": "you know what i talked too long and the token is wasn't valid long enough so the joys of internet demos and we can",
    "start": "1874799",
    "end": "1881679"
  },
  {
    "text": "recreate this very quickly",
    "start": "1881679",
    "end": "1885600"
  },
  {
    "text": "dude",
    "start": "1887840",
    "end": "1890840"
  },
  {
    "text": "it's amazing how good i've gotten at this all right now let's look at the certificate coming back all right so now",
    "start": "1900080",
    "end": "1907279"
  },
  {
    "text": "i see the actual code signing certificate chain that's coming back from folso very similar to what dan showed actually coming out of the log",
    "start": "1907279",
    "end": "1913840"
  },
  {
    "text": "because again this is going to be the public key that you're going to pass along to people not just the actual",
    "start": "1913840",
    "end": "1919120"
  },
  {
    "text": "ec uh bits but actually the the x 500 certificate that has the identity information in it as well so we have an",
    "start": "1919120",
    "end": "1925760"
  },
  {
    "text": "issuer here of six store um and we have my red hat email address",
    "start": "1925760",
    "end": "1931200"
  },
  {
    "text": "that was attested to by google listed in the certificate so the next thing i'm going to do really quick is i'm just going to make sure",
    "start": "1931200",
    "end": "1937440"
  },
  {
    "text": "that i can actually verify this that signed string that's my email address using this code signing certificate",
    "start": "1937440",
    "end": "1944000"
  },
  {
    "text": "because if i can't then something's wrong because the public key should be able to be used um that comes",
    "start": "1944000",
    "end": "1950000"
  },
  {
    "text": "back and says it's verified okay so we're all good there and just to be triple sure",
    "start": "1950000",
    "end": "1956080"
  },
  {
    "text": "i'll extract the public key bits out of the code signing certificate and just do a quick diff and the echo",
    "start": "1956080",
    "end": "1962399"
  },
  {
    "text": "does not return which means those binary bits are totally equivalent so now i've got a code signing",
    "start": "1962399",
    "end": "1967840"
  },
  {
    "text": "certificate from full co i've still got my key pair sitting on my laptop what do i need to do next well i need something",
    "start": "1967840",
    "end": "1973600"
  },
  {
    "text": "to sign so let's generate something to sign um we'll just throw 128 random bits into",
    "start": "1973600",
    "end": "1979440"
  },
  {
    "text": "a file right for this case we'll just keep it simple and short and sweet so",
    "start": "1979440",
    "end": "1985440"
  },
  {
    "text": "next thing we'll do is we'll actually call out to open ssl ask it to actually sign it using our private key",
    "start": "1985440",
    "end": "1991440"
  },
  {
    "text": "and we'll store that that signature in a detached file so we're not using pkcs bundles we'll just",
    "start": "1991440",
    "end": "1997519"
  },
  {
    "text": "have this totally separate into a into a separate file that's super quick and just to make sure",
    "start": "1997519",
    "end": "2003200"
  },
  {
    "text": "that everything went well we'll ask it to verify using our public key that that was all good and it says yes we're all",
    "start": "2003200",
    "end": "2009440"
  },
  {
    "text": "good next thing we'll do is we'll generate a timestamp and so openssl has a built-in",
    "start": "2009440",
    "end": "2014559"
  },
  {
    "text": "utility to do this so what we'll do is we'll use the actual digi the detached",
    "start": "2014559",
    "end": "2019600"
  },
  {
    "text": "signature and we'll we'll attest to hey at this particular point in time this signature was created so we'll pass that",
    "start": "2019600",
    "end": "2025200"
  },
  {
    "text": "data in um and we will create a binary artifact that needs to get sent",
    "start": "2025200",
    "end": "2031360"
  },
  {
    "text": "to the record timestamp service we'll actually then send that curl over to that",
    "start": "2031360",
    "end": "2037039"
  },
  {
    "text": "rest api just putting that content in the payload hit enter that takes a second to come back and",
    "start": "2037039",
    "end": "2043279"
  },
  {
    "text": "the next thing we'll do is we'll need to pull down the full certificate chain to be able to verify the signature on the timestamp itself so we'll again call",
    "start": "2043279",
    "end": "2050320"
  },
  {
    "text": "that over the rest api that works pretty quick and the next thing we can do is call out over uh",
    "start": "2050320",
    "end": "2056800"
  },
  {
    "text": "using the openssl tool to verify the timestamp signature so again like i'm most of the way through my demo and",
    "start": "2056800",
    "end": "2062720"
  },
  {
    "text": "you guys are probably all like man that's a lot of commands right like this is part of why nobody's signing anything because this is very complicated in the",
    "start": "2062720",
    "end": "2069520"
  },
  {
    "text": "sequence here it's easy to mess it up and if you don't have the type my typing skills it's easy to make mistakes so",
    "start": "2069520",
    "end": "2076480"
  },
  {
    "text": "again part of echoing this as i go through the rest is again what we're trying to do here is really simplify this and make sure that this is very",
    "start": "2076480",
    "end": "2082800"
  },
  {
    "text": "addressable to the developers of any skill set to where ideally if we're doing this the right way all of this is",
    "start": "2082800",
    "end": "2088158"
  },
  {
    "text": "just hidden behind the scenes and i don't have to think about supply chain providence anymore i mean hopefully you know we don't have these attacks anymore",
    "start": "2088159",
    "end": "2094158"
  },
  {
    "text": "we've built this capability into our infrastructure and we can go back to writing code which is all what we like to do anyway",
    "start": "2094159",
    "end": "2100400"
  },
  {
    "text": "so we'll verify this timestamp really fast openssl says that's good um we'll",
    "start": "2100400",
    "end": "2105839"
  },
  {
    "text": "also then just quickly check to make sure that the timestamp that we got back from recore um was actually in the valid",
    "start": "2105839",
    "end": "2112079"
  },
  {
    "text": "um period for the code signing certificate so if i scroll back up here i have a 20 minute window at least",
    "start": "2112079",
    "end": "2118000"
  },
  {
    "text": "that's how we have it coded up right now on today between 1928 and 1948 and at",
    "start": "2118000",
    "end": "2124079"
  },
  {
    "text": "1930 i signed this so for people to go back and walk to make sure did this person have possession of this key",
    "start": "2124079",
    "end": "2130240"
  },
  {
    "text": "during the valid the validity period of the certificate i now have an artifact that can prove that cryptographically as",
    "start": "2130240",
    "end": "2136240"
  },
  {
    "text": "well so now i've got all these pieces i need to put them in the transparency log so i can go back and refer to that in",
    "start": "2136240",
    "end": "2142079"
  },
  {
    "text": "the future so as i mentioned record's got a rest api that's well documented um again writing json on the command line",
    "start": "2142079",
    "end": "2148640"
  },
  {
    "text": "is really painful so we'll just do this real quick and the json content here i'm not trying to just you know move really",
    "start": "2148640",
    "end": "2154880"
  },
  {
    "text": "really fast here for the sake of time but we're putting in the signature we're putting in the public key and",
    "start": "2154880",
    "end": "2160320"
  },
  {
    "text": "again record needs to verify the signature itself so you do have to send the artifact that you are signing to",
    "start": "2160320",
    "end": "2165920"
  },
  {
    "text": "recourse so that it can verify the signature against it but we do not store the artifact in the",
    "start": "2165920",
    "end": "2171520"
  },
  {
    "text": "log at all so once i call out to recore i say cool let's actually look at the output that's",
    "start": "2171520",
    "end": "2177359"
  },
  {
    "text": "come back and with a little bit of jq trickery i can now look at the actual",
    "start": "2177359",
    "end": "2182480"
  },
  {
    "text": "object that comes out it's got a unique identifier this is the merkle tree leaf hash for those of you who are merkle",
    "start": "2182480",
    "end": "2187760"
  },
  {
    "text": "tree fans um and then we have the actual content that's stored here we've got a version we've got a kind if you if",
    "start": "2187760",
    "end": "2194079"
  },
  {
    "text": "you've ever seen the typical uh you know specs for using a crd in coupe this",
    "start": "2194079",
    "end": "2199119"
  },
  {
    "text": "looks and feels much like everything else that is being done these days in cloud native we've got the hash we've",
    "start": "2199119",
    "end": "2205599"
  },
  {
    "text": "got the signature we've got the key and then finally as we mentioned as i mentioned before we've got this artifact that we can kind of staple on for",
    "start": "2205599",
    "end": "2211599"
  },
  {
    "text": "offline verification that's what the signed entry timestamp that's uh this base64 encoded stuff",
    "start": "2211599",
    "end": "2217040"
  },
  {
    "text": "now cool now it's in the transparency log we're all good the last thing i'm going to show is the inclusion proof now",
    "start": "2217040",
    "end": "2223119"
  },
  {
    "text": "i'm not going to sit here and compute how you know concatenation of sha hashes for you over and over and over i'm going",
    "start": "2223119",
    "end": "2228160"
  },
  {
    "text": "to cheat and actually use our cli which renders it in a little bit more of a slightly more readable fashion if you",
    "start": "2228160",
    "end": "2233920"
  },
  {
    "start": "2231000",
    "end": "2397000"
  },
  {
    "text": "walk it all the way back here but we've got a root hash starting in four starting with four c6 and i can walk all",
    "start": "2233920",
    "end": "2240240"
  },
  {
    "text": "the way from the entry hash going all the way back up to the root of the tree and if you believe what is",
    "start": "2240240",
    "end": "2245920"
  },
  {
    "text": "being output here at the command line we get back to the root of 4c6 so now i've",
    "start": "2245920",
    "end": "2250960"
  },
  {
    "text": "got something i've verified that it's actually been in the log and last but not least i can delete my",
    "start": "2250960",
    "end": "2256640"
  },
  {
    "text": "private key because i don't need it anymore so key management can't get much better than that",
    "start": "2256640",
    "end": "2263040"
  },
  {
    "text": "so i know that was a ton and we'll actually post all the gist for this as well on a",
    "start": "2263040",
    "end": "2269280"
  },
  {
    "text": "blog post we'll publish after the event but so if you guys actually want to manually run through those commands you",
    "start": "2269280",
    "end": "2274320"
  },
  {
    "text": "can be more than happy to do that so then one one quick wrap-up chart i know we're about at a time",
    "start": "2274320",
    "end": "2279680"
  },
  {
    "text": "in terms of what's next in the six store community as dan showed you with the the stars and the commit track i mean it we",
    "start": "2279680",
    "end": "2286000"
  },
  {
    "text": "have a an amazing community that are generating prs left and right but if i were to break down kind of our",
    "start": "2286000",
    "end": "2291599"
  },
  {
    "text": "road map in three different areas um signing stuff we got to sign more things in order for the supply chain to be",
    "start": "2291599",
    "end": "2297680"
  },
  {
    "text": "secure so we're going to continue to work in the container ecosystem we're going to continue to work with where do you put containers right",
    "start": "2297680",
    "end": "2304079"
  },
  {
    "text": "you put it in cube you put it in docker you put it in pod man right we've got to make sure that we've got that verification logic built into those",
    "start": "2304079",
    "end": "2310400"
  },
  {
    "text": "systems and we've also got to realize that this may be a little bit of a bad thing to say at kubecon but like containers",
    "start": "2310400",
    "end": "2316400"
  },
  {
    "text": "aren't everything right there's actually stuff inside the container like node packages and jars and other things that",
    "start": "2316400",
    "end": "2321440"
  },
  {
    "text": "we need to sign as well so we're working with those communities to get those artifacts and their distribution systems",
    "start": "2321440",
    "end": "2327839"
  },
  {
    "text": "to actually sign and verify as well as working with policy bundles because again if i've got a ton of science stuff that's great but there's",
    "start": "2327839",
    "end": "2333839"
  },
  {
    "text": "still a big question who do you trust who do you really trust to put workload into production so that's where the role",
    "start": "2333839",
    "end": "2339680"
  },
  {
    "text": "of policy ultimately comes in so we're working with a variety of upstream communities that are you know so you",
    "start": "2339680",
    "end": "2345520"
  },
  {
    "text": "shout out to the opa folks and the caverno folks and many others that i'm forgetting um but we're working with uh",
    "start": "2345520",
    "end": "2350880"
  },
  {
    "text": "with many of those teams to actually prove out that we have that tie back to policy and then finally we are running",
    "start": "2350880",
    "end": "2357200"
  },
  {
    "text": "this as a public good service we dan alluded to we want to be the let's encrypt for code signing and part of that is actually standing up this",
    "start": "2357200",
    "end": "2363520"
  },
  {
    "text": "infrastructure so that people can use it without cost so we're trying to get these services robust and hardened and",
    "start": "2363520",
    "end": "2369040"
  },
  {
    "text": "audited to where we can be confident that what we're putting into production is something that the community can ultimately trust and then stand up these",
    "start": "2369040",
    "end": "2375280"
  },
  {
    "text": "additional monitors to where people can verify that and keep us honest as we go forward so with that i know we're right",
    "start": "2375280",
    "end": "2381040"
  },
  {
    "text": "at time but really appreciate everybody's time and attention today and if to learn more about us six store.dev",
    "start": "2381040",
    "end": "2387119"
  },
  {
    "text": "uh same github github.com store you can find everything that's going on we have slack channels mailing lists the whole",
    "start": "2387119",
    "end": "2393440"
  },
  {
    "text": "nine yards so thanks everybody",
    "start": "2393440",
    "end": "2397800"
  }
]