[
  {
    "text": "hi there thanks for tuning in to this",
    "start": "4000",
    "end": "6160"
  },
  {
    "text": "CNCF webinar my name is Tossen Hunts and",
    "start": "6160",
    "end": "9280"
  },
  {
    "text": "I work as a cloud advocate with Furian",
    "start": "9280",
    "end": "12559"
  },
  {
    "text": "in today's webinar we will explore how",
    "start": "12559",
    "end": "15200"
  },
  {
    "text": "we can compose applications from",
    "start": "15200",
    "end": "18000"
  },
  {
    "text": "multiple web assembly components written",
    "start": "18000",
    "end": "21119"
  },
  {
    "text": "in different languages we'll look at two",
    "start": "21119",
    "end": "24160"
  },
  {
    "text": "demos in which we'll take a component",
    "start": "24160",
    "end": "26480"
  },
  {
    "text": "written in one language and combine it",
    "start": "26480",
    "end": "29439"
  },
  {
    "text": "together with a component written in",
    "start": "29439",
    "end": "31199"
  },
  {
    "text": "another language and then run the entire",
    "start": "31199",
    "end": "35079"
  },
  {
    "text": "application so without further ado let's",
    "start": "35079",
    "end": "38399"
  },
  {
    "text": "have a look at some slides to ensure",
    "start": "38399",
    "end": "40960"
  },
  {
    "text": "everybody's on the same page",
    "start": "40960",
    "end": "44079"
  },
  {
    "text": "the Web Assembly component model is an",
    "start": "44079",
    "end": "46160"
  },
  {
    "text": "extension to core web assembly",
    "start": "46160",
    "end": "48399"
  },
  {
    "text": "streamlining and simplifying the way to",
    "start": "48399",
    "end": "51719"
  },
  {
    "text": "compose multiple components together no",
    "start": "51719",
    "end": "55120"
  },
  {
    "text": "matter which language was used to",
    "start": "55120",
    "end": "57360"
  },
  {
    "text": "implement one or the other if you think",
    "start": "57360",
    "end": "60399"
  },
  {
    "text": "about",
    "start": "60399",
    "end": "61480"
  },
  {
    "text": "composing systems from multiple",
    "start": "61480",
    "end": "64158"
  },
  {
    "text": "components written in different",
    "start": "64159",
    "end": "65960"
  },
  {
    "text": "languages you may immediately stumble",
    "start": "65960",
    "end": "68840"
  },
  {
    "text": "upon like one language is laying complex",
    "start": "68840",
    "end": "72680"
  },
  {
    "text": "structures in memory in a certain way",
    "start": "72680",
    "end": "75760"
  },
  {
    "text": "while a different programming languages",
    "start": "75760",
    "end": "77759"
  },
  {
    "text": "uses another way to structure its memory",
    "start": "77759",
    "end": "81520"
  },
  {
    "text": "it's the Web Assembly component model",
    "start": "81520",
    "end": "83520"
  },
  {
    "text": "that provides a canonical AI as a",
    "start": "83520",
    "end": "87159"
  },
  {
    "text": "unified communication layer between",
    "start": "87159",
    "end": "89920"
  },
  {
    "text": "those language boundaries right so that",
    "start": "89920",
    "end": "92479"
  },
  {
    "text": "we can seamlessly consume a structure",
    "start": "92479",
    "end": "96000"
  },
  {
    "text": "implemented in a Rust component from",
    "start": "96000",
    "end": "98159"
  },
  {
    "text": "within let's say a Python component",
    "start": "98159",
    "end": "100799"
  },
  {
    "text": "without us having to translate the",
    "start": "100799",
    "end": "102720"
  },
  {
    "text": "memory layout from Rust into how",
    "start": "102720",
    "end": "105759"
  },
  {
    "text": "structures are laid out in Python in",
    "start": "105759",
    "end": "108799"
  },
  {
    "text": "that",
    "start": "108799",
    "end": "109960"
  },
  {
    "text": "example to design and describe the API",
    "start": "109960",
    "end": "113600"
  },
  {
    "text": "of a web assembly component we use web",
    "start": "113600",
    "end": "116560"
  },
  {
    "text": "assembly interface types or short with",
    "start": "116560",
    "end": "120840"
  },
  {
    "text": "files okay let's have a look at a",
    "start": "120840",
    "end": "123119"
  },
  {
    "text": "practical example of where the web",
    "start": "123119",
    "end": "125280"
  },
  {
    "text": "assembly component model could",
    "start": "125280",
    "end": "127520"
  },
  {
    "text": "streamline your developer experience",
    "start": "127520",
    "end": "129759"
  },
  {
    "text": "when building realworld applications",
    "start": "129759",
    "end": "133080"
  },
  {
    "text": "imagine you're asked to implement a CRUD",
    "start": "133080",
    "end": "136400"
  },
  {
    "text": "API and you're confident in doing that",
    "start": "136400",
    "end": "138800"
  },
  {
    "text": "with TypeScript right so you start your",
    "start": "138800",
    "end": "141599"
  },
  {
    "text": "TypeScript project you lay out the API",
    "start": "141599",
    "end": "144480"
  },
  {
    "text": "and while working on the TypeScript API",
    "start": "144480",
    "end": "147840"
  },
  {
    "text": "you start thinking hey it would be super",
    "start": "147840",
    "end": "151680"
  },
  {
    "text": "smart if I could compress every response",
    "start": "151680",
    "end": "155599"
  },
  {
    "text": "payload before sending it back to the",
    "start": "155599",
    "end": "157760"
  },
  {
    "text": "colleague however you've never used a",
    "start": "157760",
    "end": "161120"
  },
  {
    "text": "compression algorithm or implemented one",
    "start": "161120",
    "end": "164000"
  },
  {
    "text": "but your colleague did and they created",
    "start": "164000",
    "end": "167120"
  },
  {
    "text": "a super simple API for compressing",
    "start": "167120",
    "end": "170800"
  },
  {
    "text": "different kinds of data structures right",
    "start": "170800",
    "end": "174879"
  },
  {
    "text": "so they can create a web assembly",
    "start": "174879",
    "end": "176840"
  },
  {
    "text": "component distribute it through a",
    "start": "176840",
    "end": "179239"
  },
  {
    "text": "registry and you can integrate it in",
    "start": "179239",
    "end": "182159"
  },
  {
    "text": "your TypeScript API and seamlessly call",
    "start": "182159",
    "end": "187120"
  },
  {
    "text": "the compression",
    "start": "187120",
    "end": "189239"
  },
  {
    "text": "functionality they provide to compress",
    "start": "189239",
    "end": "192959"
  },
  {
    "text": "all your data before sending them back",
    "start": "192959",
    "end": "195680"
  },
  {
    "text": "to the",
    "start": "195680",
    "end": "197800"
  },
  {
    "text": "collie okay let's dive deeper into",
    "start": "197800",
    "end": "200640"
  },
  {
    "text": "component composition first we will have",
    "start": "200640",
    "end": "203840"
  },
  {
    "text": "a look at manual component composition",
    "start": "203840",
    "end": "206959"
  },
  {
    "text": "using latest and greatest tools provided",
    "start": "206959",
    "end": "209760"
  },
  {
    "text": "by the bite code alliance and the web",
    "start": "209760",
    "end": "211599"
  },
  {
    "text": "assembly community so we will use wasm",
    "start": "211599",
    "end": "215040"
  },
  {
    "text": "tools and whack to take components",
    "start": "215040",
    "end": "218080"
  },
  {
    "text": "written in different languages and",
    "start": "218080",
    "end": "220400"
  },
  {
    "text": "combine them together we'll then run",
    "start": "220400",
    "end": "224040"
  },
  {
    "text": "that final component using wasm time on",
    "start": "224040",
    "end": "228799"
  },
  {
    "text": "top of tooling provided by the bite code",
    "start": "228799",
    "end": "231519"
  },
  {
    "text": "alliance and the web assembly community",
    "start": "231519",
    "end": "233519"
  },
  {
    "text": "we will also use language specific",
    "start": "233519",
    "end": "235840"
  },
  {
    "text": "tooling like cargo component in the case",
    "start": "235840",
    "end": "238560"
  },
  {
    "text": "of rust or jco in the case of JavaScript",
    "start": "238560",
    "end": "243680"
  },
  {
    "text": "and or",
    "start": "243680",
    "end": "246319"
  },
  {
    "text": "typescript okay let's jump right into",
    "start": "247159",
    "end": "249439"
  },
  {
    "text": "the terminal so in this folder we have a",
    "start": "249439",
    "end": "251840"
  },
  {
    "text": "component subfolder with two",
    "start": "251840",
    "end": "253760"
  },
  {
    "text": "implementations of a sorting algorithm a",
    "start": "253760",
    "end": "256000"
  },
  {
    "text": "bubble sort implemented in JavaScript",
    "start": "256000",
    "end": "258560"
  },
  {
    "text": "and we have a merge sort implemented in",
    "start": "258560",
    "end": "261919"
  },
  {
    "text": "Rust let's explore the width file of the",
    "start": "261919",
    "end": "266160"
  },
  {
    "text": "merge sorter and by the way the um width",
    "start": "266160",
    "end": "269120"
  },
  {
    "text": "file for the bubble sort is the same so",
    "start": "269120",
    "end": "271280"
  },
  {
    "text": "as you can see we export sorting",
    "start": "271280",
    "end": "273120"
  },
  {
    "text": "capability",
    "start": "273120",
    "end": "275120"
  },
  {
    "text": "next let's create a new socket component",
    "start": "275120",
    "end": "278960"
  },
  {
    "text": "using cargo component new let's go into",
    "start": "278960",
    "end": "281280"
  },
  {
    "text": "that directory create the width folder",
    "start": "281280",
    "end": "284320"
  },
  {
    "text": "and now we use wasn't tools component",
    "start": "284320",
    "end": "287440"
  },
  {
    "text": "wid to take the existing wit world of",
    "start": "287440",
    "end": "291759"
  },
  {
    "text": "the merge sorder invert it and write it",
    "start": "291759",
    "end": "297120"
  },
  {
    "text": "into our local width folder and again",
    "start": "297120",
    "end": "301040"
  },
  {
    "text": "call the file world.wit let's have a",
    "start": "301040",
    "end": "303560"
  },
  {
    "text": "look and we see right now we import the",
    "start": "303560",
    "end": "307039"
  },
  {
    "text": "sorting",
    "start": "307039",
    "end": "309080"
  },
  {
    "text": "capability cool next is doing a cargo",
    "start": "309080",
    "end": "312400"
  },
  {
    "text": "component build to ensure bindings are",
    "start": "312400",
    "end": "315759"
  },
  {
    "text": "generated for us let's open up the app",
    "start": "315759",
    "end": "318880"
  },
  {
    "text": "in the editor let's go into the main s",
    "start": "318880",
    "end": "321600"
  },
  {
    "text": "file let's bring in the generated",
    "start": "321600",
    "end": "324960"
  },
  {
    "text": "bindings",
    "start": "324960",
    "end": "327000"
  },
  {
    "text": "module and let's use the sorting",
    "start": "327000",
    "end": "330320"
  },
  {
    "text": "capability so we create an vector of",
    "start": "330320",
    "end": "333440"
  },
  {
    "text": "numbers in a random order so the solder",
    "start": "333440",
    "end": "336560"
  },
  {
    "text": "is responsible for bringing them into",
    "start": "336560",
    "end": "338720"
  },
  {
    "text": "the right order well let's say we expect",
    "start": "338720",
    "end": "343120"
  },
  {
    "text": "a sorted array and as you can see we can",
    "start": "343120",
    "end": "346000"
  },
  {
    "text": "pick the sort function and get the",
    "start": "346000",
    "end": "348720"
  },
  {
    "text": "import generated provide a reference to",
    "start": "348720",
    "end": "351360"
  },
  {
    "text": "our numbers array and finally print the",
    "start": "351360",
    "end": "354880"
  },
  {
    "text": "sorted area to standard",
    "start": "354880",
    "end": "357880"
  },
  {
    "text": "out okay let's close the editor",
    "start": "357880",
    "end": "362400"
  },
  {
    "text": "and let's invoke a build cargo component",
    "start": "362400",
    "end": "365199"
  },
  {
    "text": "build so now we have built the socket",
    "start": "365199",
    "end": "367199"
  },
  {
    "text": "component however we have to whack them",
    "start": "367199",
    "end": "369360"
  },
  {
    "text": "together so we use the wax CLI and first",
    "start": "369360",
    "end": "373759"
  },
  {
    "text": "we point to the plug component so the",
    "start": "373759",
    "end": "376319"
  },
  {
    "text": "component providing the capability the",
    "start": "376319",
    "end": "378560"
  },
  {
    "text": "merge sorder in our case we choose the",
    "start": "378560",
    "end": "381440"
  },
  {
    "text": "path to the WM",
    "start": "381440",
    "end": "384360"
  },
  {
    "text": "file followed by the path to our socket",
    "start": "384360",
    "end": "389280"
  },
  {
    "text": "component and that's in the local target",
    "start": "389280",
    "end": "391840"
  },
  {
    "text": "folder again wasn't 32 wuzzy p1 debug",
    "start": "391840",
    "end": "396560"
  },
  {
    "text": "and the wasn't file and we tell it how",
    "start": "396560",
    "end": "399120"
  },
  {
    "text": "it should call the composed application",
    "start": "399120",
    "end": "401840"
  },
  {
    "text": "that's",
    "start": "401840",
    "end": "402759"
  },
  {
    "text": "plugged let's use time to run our app",
    "start": "402759",
    "end": "406560"
  },
  {
    "text": "and as we can see we get back an sorted",
    "start": "406560",
    "end": "409759"
  },
  {
    "text": "array of numbers next let's use the",
    "start": "409759",
    "end": "413120"
  },
  {
    "text": "bottle sorter implemented using",
    "start": "413120",
    "end": "415039"
  },
  {
    "text": "JavaScript as a plug again use our live",
    "start": "415039",
    "end": "420280"
  },
  {
    "text": "demo.wmom as the socket component and",
    "start": "420280",
    "end": "423280"
  },
  {
    "text": "let's store that in",
    "start": "423280",
    "end": "426400"
  },
  {
    "text": "plucked2.wisom okay again wasn't time",
    "start": "426440",
    "end": "429919"
  },
  {
    "text": "run but this time invoking plucked",
    "start": "429919",
    "end": "432720"
  },
  {
    "text": "2.wisom and we end up with a sorted",
    "start": "432720",
    "end": "435199"
  },
  {
    "text": "array using the other",
    "start": "435199",
    "end": "437800"
  },
  {
    "text": "component awesome so we just composed",
    "start": "437800",
    "end": "441039"
  },
  {
    "text": "together our first application",
    "start": "441039",
    "end": "442720"
  },
  {
    "text": "consisting of multiple components",
    "start": "442720",
    "end": "445199"
  },
  {
    "text": "written in different languages to do so",
    "start": "445199",
    "end": "448240"
  },
  {
    "text": "we had to execute a couple of commands",
    "start": "448240",
    "end": "450800"
  },
  {
    "text": "in a predefined order to whack together",
    "start": "450800",
    "end": "454960"
  },
  {
    "text": "or to compose together the final",
    "start": "454960",
    "end": "458280"
  },
  {
    "text": "application in that particular workflow",
    "start": "458280",
    "end": "460800"
  },
  {
    "text": "the wit management is some sort of",
    "start": "460800",
    "end": "463880"
  },
  {
    "text": "manual and we have to",
    "start": "463880",
    "end": "466440"
  },
  {
    "text": "explicitly use wasn't tools to invert",
    "start": "466440",
    "end": "471199"
  },
  {
    "text": "the wit interface of that functional",
    "start": "471199",
    "end": "475000"
  },
  {
    "text": "component in order to make it work with",
    "start": "475000",
    "end": "477759"
  },
  {
    "text": "our socket component",
    "start": "477759",
    "end": "481319"
  },
  {
    "text": "obviously we have to use language",
    "start": "481319",
    "end": "484080"
  },
  {
    "text": "specific tooling depending on the",
    "start": "484080",
    "end": "486800"
  },
  {
    "text": "language we choose for implementing our",
    "start": "486800",
    "end": "490240"
  },
  {
    "text": "socket component so these are things",
    "start": "490240",
    "end": "492960"
  },
  {
    "text": "that you have to keep in mind when doing",
    "start": "492960",
    "end": "496879"
  },
  {
    "text": "manual composition using Wisom tools and",
    "start": "496879",
    "end": "503080"
  },
  {
    "text": "whack all right so let's have a look at",
    "start": "503080",
    "end": "505919"
  },
  {
    "text": "an alternative approach on how you can",
    "start": "505919",
    "end": "508639"
  },
  {
    "text": "compose applications that consists of",
    "start": "508639",
    "end": "511479"
  },
  {
    "text": "multiple web assembly components and to",
    "start": "511479",
    "end": "515120"
  },
  {
    "text": "do so we will use spin spin is a CNCF",
    "start": "515120",
    "end": "519440"
  },
  {
    "text": "sandbox project and it's the developer",
    "start": "519440",
    "end": "522479"
  },
  {
    "text": "tool for building and running web",
    "start": "522479",
    "end": "525200"
  },
  {
    "text": "assembly applications no matter which",
    "start": "525200",
    "end": "528160"
  },
  {
    "text": "language you choose right spin gives you",
    "start": "528160",
    "end": "531200"
  },
  {
    "text": "a language agnostic development workflow",
    "start": "531200",
    "end": "533920"
  },
  {
    "text": "that is super efficient yet super easy",
    "start": "533920",
    "end": "537360"
  },
  {
    "text": "to understand and adopt you can learn",
    "start": "537360",
    "end": "540959"
  },
  {
    "text": "more about Spin on Spin's GitHub",
    "start": "540959",
    "end": "543720"
  },
  {
    "text": "organization and on the documentation",
    "start": "543720",
    "end": "546480"
  },
  {
    "text": "that is linked from there on top of Spin",
    "start": "546480",
    "end": "550000"
  },
  {
    "text": "we will use the Spin Deps plugin a",
    "start": "550000",
    "end": "552240"
  },
  {
    "text": "plug-in we created to extend Spin's core",
    "start": "552240",
    "end": "555800"
  },
  {
    "text": "capabilities and streamline the process",
    "start": "555800",
    "end": "559320"
  },
  {
    "text": "of component",
    "start": "559320",
    "end": "561959"
  },
  {
    "text": "composition so the plug-in takes care",
    "start": "561959",
    "end": "564800"
  },
  {
    "text": "about all the language specific commands",
    "start": "564800",
    "end": "567120"
  },
  {
    "text": "the plug-in takes care about automatic",
    "start": "567120",
    "end": "569440"
  },
  {
    "text": "binding generation leaving a simple spin",
    "start": "569440",
    "end": "573680"
  },
  {
    "text": "deps at command to us as developers and",
    "start": "573680",
    "end": "578399"
  },
  {
    "text": "from that point in time when you execute",
    "start": "578399",
    "end": "581279"
  },
  {
    "text": "that command you can simply move on and",
    "start": "581279",
    "end": "584320"
  },
  {
    "text": "consume the APIs provided by your web",
    "start": "584320",
    "end": "588320"
  },
  {
    "text": "assembly component in your spin app with",
    "start": "588320",
    "end": "591920"
  },
  {
    "text": "no additional manual step",
    "start": "591920",
    "end": "595959"
  },
  {
    "text": "required again let's jump into a demo",
    "start": "595959",
    "end": "599120"
  },
  {
    "text": "and let's explore how component",
    "start": "599120",
    "end": "602080"
  },
  {
    "text": "composition looks like when we're using",
    "start": "602080",
    "end": "604800"
  },
  {
    "text": "spin and the spin deps",
    "start": "604800",
    "end": "608839"
  },
  {
    "text": "plugin back in our terminal let's move",
    "start": "608839",
    "end": "611760"
  },
  {
    "text": "one level up so this is again where the",
    "start": "611760",
    "end": "615120"
  },
  {
    "text": "components directory resists and this",
    "start": "615120",
    "end": "618399"
  },
  {
    "text": "time let's use spinu to create a new",
    "start": "618399",
    "end": "621600"
  },
  {
    "text": "spin app using the https the typescript",
    "start": "621600",
    "end": "624800"
  },
  {
    "text": "template",
    "start": "624800",
    "end": "626399"
  },
  {
    "text": "and let's stick with the default values",
    "start": "626399",
    "end": "628480"
  },
  {
    "text": "let's move into the application",
    "start": "628480",
    "end": "631040"
  },
  {
    "text": "directory so this is where spin toml and",
    "start": "631040",
    "end": "633760"
  },
  {
    "text": "all our TypeScript related files resist",
    "start": "633760",
    "end": "636800"
  },
  {
    "text": "and let's do a spin build for now which",
    "start": "636800",
    "end": "639760"
  },
  {
    "text": "will download all the dependencies and",
    "start": "639760",
    "end": "643360"
  },
  {
    "text": "then build the application so within a",
    "start": "643360",
    "end": "646959"
  },
  {
    "text": "matter of seconds we got our app",
    "start": "646959",
    "end": "648640"
  },
  {
    "text": "compiled down to web assembly and we",
    "start": "648640",
    "end": "650959"
  },
  {
    "text": "could move on and add the actual",
    "start": "650959",
    "end": "654160"
  },
  {
    "text": "dependency so this is a spin dabs add",
    "start": "654160",
    "end": "657760"
  },
  {
    "text": "and followed by the path to the",
    "start": "657760",
    "end": "661040"
  },
  {
    "text": "component we are interested in using",
    "start": "661040",
    "end": "664640"
  },
  {
    "text": "this case let's use the merge sorder so",
    "start": "664640",
    "end": "667519"
  },
  {
    "text": "we point to the wson file hit enter and",
    "start": "667519",
    "end": "670640"
  },
  {
    "text": "then we got a wizard guiding us through",
    "start": "670640",
    "end": "674760"
  },
  {
    "text": "configuring how we want to add that",
    "start": "674760",
    "end": "679440"
  },
  {
    "text": "dependency",
    "start": "679440",
    "end": "682440"
  },
  {
    "text": "next we have to add the newly added",
    "start": "683360",
    "end": "687600"
  },
  {
    "text": "dependency to our top level project",
    "start": "687600",
    "end": "691120"
  },
  {
    "text": "using npm install and by the way this is",
    "start": "691120",
    "end": "693519"
  },
  {
    "text": "a step that we will automate for you in",
    "start": "693519",
    "end": "695600"
  },
  {
    "text": "one of the upcoming builds of the",
    "start": "695600",
    "end": "697519"
  },
  {
    "text": "spindeps",
    "start": "697519",
    "end": "698760"
  },
  {
    "text": "plugin and with that let's open up our",
    "start": "698760",
    "end": "702800"
  },
  {
    "text": "editor over here let's find the index.ts",
    "start": "702800",
    "end": "709040"
  },
  {
    "text": "and for sake of demonstration let me",
    "start": "709040",
    "end": "710880"
  },
  {
    "text": "quickly do some housekeeping over there",
    "start": "710880",
    "end": "713760"
  },
  {
    "text": "we want to we want to invoke our sorter",
    "start": "713760",
    "end": "718079"
  },
  {
    "text": "for every invocation of our spin app so",
    "start": "718079",
    "end": "721120"
  },
  {
    "text": "let's say um const sorted equals to sort",
    "start": "721120",
    "end": "726720"
  },
  {
    "text": "and as you can see I can immediately",
    "start": "726720",
    "end": "728480"
  },
  {
    "text": "pick uh and I got the recommendation hey",
    "start": "728480",
    "end": "731440"
  },
  {
    "text": "this comes from the sorting uh package",
    "start": "731440",
    "end": "734240"
  },
  {
    "text": "in version",
    "start": "734240",
    "end": "736120"
  },
  {
    "text": "010 so I can sort and this takes an int",
    "start": "736120",
    "end": "740200"
  },
  {
    "text": "array that I can fill by using the from",
    "start": "740200",
    "end": "743519"
  },
  {
    "text": "method and I can simply provide a couple",
    "start": "743519",
    "end": "745920"
  },
  {
    "text": "of you know numbers over here and I can",
    "start": "745920",
    "end": "749279"
  },
  {
    "text": "use console.log to print sorted again to",
    "start": "749279",
    "end": "753120"
  },
  {
    "text": "standard out uh sort oh did a mistake",
    "start": "753120",
    "end": "756639"
  },
  {
    "text": "over",
    "start": "756639",
    "end": "758760"
  },
  {
    "text": "here all right so let's close the editor",
    "start": "758760",
    "end": "762760"
  },
  {
    "text": "again and let's do a spin up d-build so",
    "start": "762760",
    "end": "766720"
  },
  {
    "text": "this starts the app however it compiles",
    "start": "766720",
    "end": "769360"
  },
  {
    "text": "if there are outstanding",
    "start": "769360",
    "end": "771560"
  },
  {
    "text": "changes okay the app is right now",
    "start": "771560",
    "end": "773760"
  },
  {
    "text": "running on port 3000 let's fire up new",
    "start": "773760",
    "end": "776160"
  },
  {
    "text": "terminal and let's simply call send a",
    "start": "776160",
    "end": "778800"
  },
  {
    "text": "get request to local host 3000 let's",
    "start": "778800",
    "end": "781680"
  },
  {
    "text": "move back to the first terminal instance",
    "start": "781680",
    "end": "783760"
  },
  {
    "text": "and as we can see down here we got the",
    "start": "783760",
    "end": "787040"
  },
  {
    "text": "sorted representation of our in array",
    "start": "787040",
    "end": "791399"
  },
  {
    "text": "back all right this was awesome right we",
    "start": "791399",
    "end": "794399"
  },
  {
    "text": "just executed that spindaps app at",
    "start": "794399",
    "end": "797519"
  },
  {
    "text": "command to bring in the existing",
    "start": "797519",
    "end": "800680"
  },
  {
    "text": "capabilities from our sorting component",
    "start": "800680",
    "end": "803839"
  },
  {
    "text": "into our",
    "start": "803839",
    "end": "805639"
  },
  {
    "text": "application but let's be honest let's do",
    "start": "805639",
    "end": "808000"
  },
  {
    "text": "some real talk what works and what",
    "start": "808000",
    "end": "810360"
  },
  {
    "text": "doesn't so as of today we support Rust",
    "start": "810360",
    "end": "815040"
  },
  {
    "text": "TypeScript and JavaScript as socket",
    "start": "815040",
    "end": "817360"
  },
  {
    "text": "languages right for those components",
    "start": "817360",
    "end": "819680"
  },
  {
    "text": "that consume capabilities from another",
    "start": "819680",
    "end": "823720"
  },
  {
    "text": "component for the plug components so",
    "start": "823720",
    "end": "827519"
  },
  {
    "text": "that components that provide",
    "start": "827519",
    "end": "829880"
  },
  {
    "text": "functionality we support every language",
    "start": "829880",
    "end": "832959"
  },
  {
    "text": "that could produce a web assembly",
    "start": "832959",
    "end": "836680"
  },
  {
    "text": "component however to be fully",
    "start": "836680",
    "end": "839480"
  },
  {
    "text": "transparent this spin plugin is",
    "start": "839480",
    "end": "842399"
  },
  {
    "text": "currently still in experimental stage",
    "start": "842399",
    "end": "847360"
  },
  {
    "text": "okay let's also explore the road map for",
    "start": "847360",
    "end": "849519"
  },
  {
    "text": "the spin deps plug-in obviously we want",
    "start": "849519",
    "end": "852800"
  },
  {
    "text": "to add support for additional",
    "start": "852800",
    "end": "855040"
  },
  {
    "text": "programming languages when building",
    "start": "855040",
    "end": "856880"
  },
  {
    "text": "socket components we want to graduate",
    "start": "856880",
    "end": "860800"
  },
  {
    "text": "out of the experimental state and we",
    "start": "860800",
    "end": "864399"
  },
  {
    "text": "want to take the capabilities from the",
    "start": "864399",
    "end": "866959"
  },
  {
    "text": "spin dabs plug-in and bring them into",
    "start": "866959",
    "end": "870480"
  },
  {
    "text": "mainline spin so that everyone could use",
    "start": "870480",
    "end": "874639"
  },
  {
    "text": "that great experience without having to",
    "start": "874639",
    "end": "877519"
  },
  {
    "text": "install a plugin",
    "start": "877519",
    "end": "881440"
  },
  {
    "text": "explicitly all right let's do a quick",
    "start": "883320",
    "end": "885600"
  },
  {
    "text": "recap on what we just saw first we",
    "start": "885600",
    "end": "888079"
  },
  {
    "text": "started off with manual component",
    "start": "888079",
    "end": "890199"
  },
  {
    "text": "composition we used latest and greatest",
    "start": "890199",
    "end": "892720"
  },
  {
    "text": "tools provided by the bitecood alliance",
    "start": "892720",
    "end": "894720"
  },
  {
    "text": "and the web assembly community such as",
    "start": "894720",
    "end": "897199"
  },
  {
    "text": "WM tools and whack to combine two web",
    "start": "897199",
    "end": "900320"
  },
  {
    "text": "assembly components together but we did",
    "start": "900320",
    "end": "903040"
  },
  {
    "text": "not stop there we also took spin and its",
    "start": "903040",
    "end": "906079"
  },
  {
    "text": "experimental spin depths plugin to show",
    "start": "906079",
    "end": "908720"
  },
  {
    "text": "a way smoother and more elegant way of",
    "start": "908720",
    "end": "912079"
  },
  {
    "text": "achieving exactly the same so with that",
    "start": "912079",
    "end": "915839"
  },
  {
    "text": "I hope you have a sense of how you can",
    "start": "915839",
    "end": "918360"
  },
  {
    "text": "compose applications from multiple web",
    "start": "918360",
    "end": "921279"
  },
  {
    "text": "assembly components using either the",
    "start": "921279",
    "end": "923839"
  },
  {
    "text": "manual approach or the new way of doing",
    "start": "923839",
    "end": "927040"
  },
  {
    "text": "that by leveraging spin and the spin",
    "start": "927040",
    "end": "930160"
  },
  {
    "text": "depths plug-in with that thanks for",
    "start": "930160",
    "end": "933440"
  },
  {
    "text": "tuning in and see you next time",
    "start": "933440",
    "end": "938120"
  }
]