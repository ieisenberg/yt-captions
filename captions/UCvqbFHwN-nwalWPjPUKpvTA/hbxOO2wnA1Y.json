[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "stop breaking the proto designing for",
    "start": "80",
    "end": "2320"
  },
  {
    "text": "change in a microservices world",
    "start": "2320",
    "end": "5040"
  },
  {
    "text": "hello everybody my name is ryan michella",
    "start": "5040",
    "end": "7359"
  },
  {
    "text": "and i work for salesforce building",
    "start": "7359",
    "end": "8880"
  },
  {
    "text": "service meshes",
    "start": "8880",
    "end": "10960"
  },
  {
    "text": "i've been building with grpc for four",
    "start": "10960",
    "end": "13440"
  },
  {
    "text": "years now",
    "start": "13440",
    "end": "14000"
  },
  {
    "text": "and started the reactive grpc project to",
    "start": "14000",
    "end": "16560"
  },
  {
    "text": "bridge grpc and reactive programming",
    "start": "16560",
    "end": "18800"
  },
  {
    "text": "technologies together in java",
    "start": "18800",
    "end": "22240"
  },
  {
    "start": "22000",
    "end": "82000"
  },
  {
    "text": "this talk is about designing services",
    "start": "22640",
    "end": "24800"
  },
  {
    "text": "using grpc to maximize the resiliency to",
    "start": "24800",
    "end": "27439"
  },
  {
    "text": "change",
    "start": "27439",
    "end": "28640"
  },
  {
    "text": "grpc services change all the time we",
    "start": "28640",
    "end": "31359"
  },
  {
    "text": "learn more about our problem space and",
    "start": "31359",
    "end": "33040"
  },
  {
    "text": "need to refactor our contracts",
    "start": "33040",
    "end": "35360"
  },
  {
    "text": "we add new features to our services and",
    "start": "35360",
    "end": "37440"
  },
  {
    "text": "need to expose them from within an api",
    "start": "37440",
    "end": "40160"
  },
  {
    "text": "we discover our services have become too",
    "start": "40160",
    "end": "42079"
  },
  {
    "text": "complicated and need to divide them into",
    "start": "42079",
    "end": "43920"
  },
  {
    "text": "smaller independent parts",
    "start": "43920",
    "end": "46320"
  },
  {
    "text": "changing our services is inevitable how",
    "start": "46320",
    "end": "49200"
  },
  {
    "text": "we anticipate this change and prepare",
    "start": "49200",
    "end": "51120"
  },
  {
    "text": "for it makes the difference between a",
    "start": "51120",
    "end": "52800"
  },
  {
    "text": "small refactoring and a ground-up",
    "start": "52800",
    "end": "54480"
  },
  {
    "text": "rewrite",
    "start": "54480",
    "end": "56878"
  },
  {
    "text": "in this talk we'll look at techniques",
    "start": "57039",
    "end": "59359"
  },
  {
    "text": "for accommodating change in our services",
    "start": "59359",
    "end": "62000"
  },
  {
    "text": "we'll take advantage of the advantage of",
    "start": "62000",
    "end": "63680"
  },
  {
    "text": "the capabilities afforded to us by grpc",
    "start": "63680",
    "end": "66479"
  },
  {
    "text": "we'll look at how proto design",
    "start": "66479",
    "end": "68000"
  },
  {
    "text": "techniques for keeping",
    "start": "68000",
    "end": "69600"
  },
  {
    "text": "our service contracts healthy in the",
    "start": "69600",
    "end": "71200"
  },
  {
    "text": "long term we'll look at project design",
    "start": "71200",
    "end": "73600"
  },
  {
    "text": "techniques that help our code base adapt",
    "start": "73600",
    "end": "75439"
  },
  {
    "text": "to changing requirements",
    "start": "75439",
    "end": "76960"
  },
  {
    "text": "and finally we'll look at contract",
    "start": "76960",
    "end": "78479"
  },
  {
    "text": "versioning techniques to help us stay",
    "start": "78479",
    "end": "80080"
  },
  {
    "text": "sane as we upgrade our system",
    "start": "80080",
    "end": "83360"
  },
  {
    "start": "82000",
    "end": "115000"
  },
  {
    "text": "before we dive in i find it helpful to",
    "start": "83360",
    "end": "85439"
  },
  {
    "text": "review what makes a service",
    "start": "85439",
    "end": "87360"
  },
  {
    "text": "here's my definition a service is a",
    "start": "87360",
    "end": "90079"
  },
  {
    "text": "versionable bounded context of",
    "start": "90079",
    "end": "92000"
  },
  {
    "text": "functionality exposing a well-defined",
    "start": "92000",
    "end": "94079"
  },
  {
    "text": "public contract over standardized",
    "start": "94079",
    "end": "96000"
  },
  {
    "text": "plumbing and encapsulating a single",
    "start": "96000",
    "end": "97680"
  },
  {
    "text": "cohesive concept",
    "start": "97680",
    "end": "100079"
  },
  {
    "text": "that's a lot but note how it doesn't say",
    "start": "100079",
    "end": "102079"
  },
  {
    "text": "anything about deployment",
    "start": "102079",
    "end": "103759"
  },
  {
    "text": "monoliths and microservices are just",
    "start": "103759",
    "end": "105840"
  },
  {
    "text": "different ways to package services",
    "start": "105840",
    "end": "108720"
  },
  {
    "text": "while this talk focuses on microservices",
    "start": "108720",
    "end": "111280"
  },
  {
    "text": "the guidance applies equally well to",
    "start": "111280",
    "end": "112880"
  },
  {
    "text": "monoliths",
    "start": "112880",
    "end": "115840"
  },
  {
    "start": "115000",
    "end": "180000"
  },
  {
    "text": "three aspects of this definition pertain",
    "start": "115920",
    "end": "118079"
  },
  {
    "text": "directly to grpc",
    "start": "118079",
    "end": "120799"
  },
  {
    "text": "a service needs to have a well-defined",
    "start": "120799",
    "end": "122960"
  },
  {
    "text": "explicit contract",
    "start": "122960",
    "end": "124320"
  },
  {
    "text": "that defines all of the operations and",
    "start": "124320",
    "end": "126000"
  },
  {
    "text": "data structures needed to interact with",
    "start": "126000",
    "end": "127680"
  },
  {
    "text": "the service",
    "start": "127680",
    "end": "128959"
  },
  {
    "text": "this car this contract serves as a",
    "start": "128959",
    "end": "131840"
  },
  {
    "text": "separate",
    "start": "131840",
    "end": "133200"
  },
  {
    "text": "the external api from the internal",
    "start": "133200",
    "end": "135200"
  },
  {
    "text": "implementation details",
    "start": "135200",
    "end": "137599"
  },
  {
    "text": "ideally no special knowledge should be",
    "start": "137599",
    "end": "139520"
  },
  {
    "text": "needed to call the service",
    "start": "139520",
    "end": "141120"
  },
  {
    "text": "outside of what's in the contract this",
    "start": "141120",
    "end": "143200"
  },
  {
    "text": "means no mandatory metadata or magic",
    "start": "143200",
    "end": "145280"
  },
  {
    "text": "request headers",
    "start": "145280",
    "end": "146959"
  },
  {
    "text": "it's also important for a service to be",
    "start": "146959",
    "end": "148800"
  },
  {
    "text": "independently versionable so it can",
    "start": "148800",
    "end": "150480"
  },
  {
    "text": "evolve separately from its dependencies",
    "start": "150480",
    "end": "152959"
  },
  {
    "text": "independent versioning means one service",
    "start": "152959",
    "end": "155760"
  },
  {
    "text": "can expose multiple versions of its",
    "start": "155760",
    "end": "157440"
  },
  {
    "text": "contract simultaneously",
    "start": "157440",
    "end": "159120"
  },
  {
    "text": "for example a service might implement",
    "start": "159120",
    "end": "160959"
  },
  {
    "text": "credit card processing v1",
    "start": "160959",
    "end": "162640"
  },
  {
    "text": "and v2 contracts while having 15",
    "start": "162640",
    "end": "164879"
  },
  {
    "text": "independent binary releases over time",
    "start": "164879",
    "end": "167760"
  },
  {
    "text": "finally a service should embody a single",
    "start": "167760",
    "end": "170080"
  },
  {
    "text": "cohesive concept",
    "start": "170080",
    "end": "171440"
  },
  {
    "text": "cohesion is a common ideal in software",
    "start": "171440",
    "end": "174080"
  },
  {
    "text": "and helps us prevent service contracts",
    "start": "174080",
    "end": "175840"
  },
  {
    "text": "from turning into a dumping ground of",
    "start": "175840",
    "end": "177360"
  },
  {
    "text": "unrelated operations",
    "start": "177360",
    "end": "180480"
  },
  {
    "start": "180000",
    "end": "217000"
  },
  {
    "text": "grpc is an ideal fit to the service",
    "start": "180640",
    "end": "183200"
  },
  {
    "text": "definition",
    "start": "183200",
    "end": "184560"
  },
  {
    "text": "with many of its properties aligning",
    "start": "184560",
    "end": "186159"
  },
  {
    "text": "nicely to what we want for example",
    "start": "186159",
    "end": "188159"
  },
  {
    "text": "grpc is contract first protofiles",
    "start": "188159",
    "end": "191280"
  },
  {
    "text": "are independently versionable and",
    "start": "191280",
    "end": "193360"
  },
  {
    "text": "cleanly separate a services contract",
    "start": "193360",
    "end": "195120"
  },
  {
    "text": "from its implementation details",
    "start": "195120",
    "end": "197760"
  },
  {
    "text": "strongly typed with built-in backwards",
    "start": "197760",
    "end": "199680"
  },
  {
    "text": "and forwards compatibility which makes",
    "start": "199680",
    "end": "201280"
  },
  {
    "text": "versioning our contracts easier",
    "start": "201280",
    "end": "203360"
  },
  {
    "text": "finally grpc is natively multiplexed",
    "start": "203360",
    "end": "206080"
  },
  {
    "text": "which allows multiple",
    "start": "206080",
    "end": "207200"
  },
  {
    "text": "allows us to host multiple versions of",
    "start": "207200",
    "end": "209040"
  },
  {
    "text": "the same contract in the same process on",
    "start": "209040",
    "end": "211360"
  },
  {
    "text": "the same port",
    "start": "211360",
    "end": "212480"
  },
  {
    "text": "this lets us cleanly separate service",
    "start": "212480",
    "end": "214319"
  },
  {
    "text": "discovery from version",
    "start": "214319",
    "end": "215680"
  },
  {
    "text": "version selection now that we've",
    "start": "215680",
    "end": "219200"
  },
  {
    "start": "217000",
    "end": "229000"
  },
  {
    "text": "identified",
    "start": "219200",
    "end": "220239"
  },
  {
    "text": "what parts of alpha what we want from an",
    "start": "220239",
    "end": "222400"
  },
  {
    "text": "ideal service",
    "start": "222400",
    "end": "223360"
  },
  {
    "text": "let's look at some techniques to get",
    "start": "223360",
    "end": "224879"
  },
  {
    "text": "ourselves there starting with protobuf",
    "start": "224879",
    "end": "226799"
  },
  {
    "text": "design techniques",
    "start": "226799",
    "end": "229599"
  },
  {
    "start": "229000",
    "end": "269000"
  },
  {
    "text": "the first thing we want to do is",
    "start": "230560",
    "end": "231840"
  },
  {
    "text": "establish rules around proto-contract",
    "start": "231840",
    "end": "233840"
  },
  {
    "text": "versioning",
    "start": "233840",
    "end": "234959"
  },
  {
    "text": "semantic versioning is a great place to",
    "start": "234959",
    "end": "236720"
  },
  {
    "text": "start when we apply",
    "start": "236720",
    "end": "238080"
  },
  {
    "text": "semver to proto-contracts we can map",
    "start": "238080",
    "end": "240080"
  },
  {
    "text": "different kinds of changes to each of",
    "start": "240080",
    "end": "241680"
  },
  {
    "text": "the version components",
    "start": "241680",
    "end": "244080"
  },
  {
    "text": "major versions of a contract are",
    "start": "244080",
    "end": "246319"
  },
  {
    "text": "fundamentally incompatible with each",
    "start": "246319",
    "end": "248159"
  },
  {
    "text": "other",
    "start": "248159",
    "end": "248560"
  },
  {
    "text": "for example http 1 and 2. minor changes",
    "start": "248560",
    "end": "252560"
  },
  {
    "text": "are interoperable within the same major",
    "start": "252560",
    "end": "255200"
  },
  {
    "text": "version series",
    "start": "255200",
    "end": "256479"
  },
  {
    "text": "minor changes are typically additive in",
    "start": "256479",
    "end": "258160"
  },
  {
    "text": "nature such as adding new fields",
    "start": "258160",
    "end": "260400"
  },
  {
    "text": "or operations to a contract finally",
    "start": "260400",
    "end": "263440"
  },
  {
    "text": "patch versions are for non-functional",
    "start": "263440",
    "end": "265360"
  },
  {
    "text": "changes like documentation improvements",
    "start": "265360",
    "end": "269840"
  },
  {
    "start": "269000",
    "end": "329000"
  },
  {
    "text": "once you've established semver as a",
    "start": "270400",
    "end": "272479"
  },
  {
    "text": "versioning system for your proto",
    "start": "272479",
    "end": "274000"
  },
  {
    "text": "contracts",
    "start": "274000",
    "end": "274800"
  },
  {
    "text": "you should put the major version in the",
    "start": "274800",
    "end": "276639"
  },
  {
    "text": "contract and enter the protocol",
    "start": "276639",
    "end": "279040"
  },
  {
    "text": "package doing so gives us three",
    "start": "279040",
    "end": "281199"
  },
  {
    "text": "advantages",
    "start": "281199",
    "end": "282639"
  },
  {
    "text": "first it's clear from looking at the",
    "start": "282639",
    "end": "284960"
  },
  {
    "text": "contract",
    "start": "284960",
    "end": "285680"
  },
  {
    "text": "which compatible series of versions the",
    "start": "285680",
    "end": "287680"
  },
  {
    "text": "contract belongs to",
    "start": "287680",
    "end": "289600"
  },
  {
    "text": "second putting the version of the packet",
    "start": "289600",
    "end": "291600"
  },
  {
    "text": "in the version in the package",
    "start": "291600",
    "end": "293040"
  },
  {
    "text": "makes it easy to multiplex multiple",
    "start": "293040",
    "end": "294880"
  },
  {
    "text": "versions of the same contract",
    "start": "294880",
    "end": "296080"
  },
  {
    "text": "in a service grpc uses the whole package",
    "start": "296080",
    "end": "299360"
  },
  {
    "text": "name",
    "start": "299360",
    "end": "299840"
  },
  {
    "text": "and operation name when routing requests",
    "start": "299840",
    "end": "301680"
  },
  {
    "text": "to an implementation",
    "start": "301680",
    "end": "303039"
  },
  {
    "text": "putting the version in the package name",
    "start": "303039",
    "end": "304560"
  },
  {
    "text": "eliminates any conflict",
    "start": "304560",
    "end": "306080"
  },
  {
    "text": "between different version",
    "start": "306080",
    "end": "307120"
  },
  {
    "text": "implementations of an operation with the",
    "start": "307120",
    "end": "309120"
  },
  {
    "text": "same name",
    "start": "309120",
    "end": "310560"
  },
  {
    "text": "finally putting the major version in the",
    "start": "310560",
    "end": "312639"
  },
  {
    "text": "package name prevents type conflicts and",
    "start": "312639",
    "end": "314560"
  },
  {
    "text": "generated code",
    "start": "314560",
    "end": "316000"
  },
  {
    "text": "protoc translates contact contract",
    "start": "316000",
    "end": "318960"
  },
  {
    "text": "namespace",
    "start": "318960",
    "end": "319680"
  },
  {
    "text": "into code namespace creating a unique",
    "start": "319680",
    "end": "322560"
  },
  {
    "text": "namespace for each version",
    "start": "322560",
    "end": "324080"
  },
  {
    "text": "allows similar types from different",
    "start": "324080",
    "end": "325680"
  },
  {
    "text": "versions to co-exist peacefully",
    "start": "325680",
    "end": "329280"
  },
  {
    "start": "329000",
    "end": "366000"
  },
  {
    "text": "with our contract version package sorted",
    "start": "332800",
    "end": "334880"
  },
  {
    "text": "out the next thing we should look at is",
    "start": "334880",
    "end": "336960"
  },
  {
    "text": "proto style",
    "start": "336960",
    "end": "338240"
  },
  {
    "text": "google has published multiple grpc style",
    "start": "338240",
    "end": "340880"
  },
  {
    "text": "guides",
    "start": "340880",
    "end": "341520"
  },
  {
    "text": "sticking to the official style guides",
    "start": "341520",
    "end": "343120"
  },
  {
    "text": "ensures consistencies between our protos",
    "start": "343120",
    "end": "345280"
  },
  {
    "text": "helps avoid some language specific code",
    "start": "345280",
    "end": "347199"
  },
  {
    "text": "generation quirks",
    "start": "347199",
    "end": "348639"
  },
  {
    "text": "and prevents unintentionally breaking",
    "start": "348639",
    "end": "350479"
  },
  {
    "text": "changes from entering the contract",
    "start": "350479",
    "end": "353440"
  },
  {
    "text": "the open source community has some great",
    "start": "353440",
    "end": "355680"
  },
  {
    "text": "automated tools you can use to enforce",
    "start": "355680",
    "end": "357680"
  },
  {
    "text": "style and compatibility checks",
    "start": "357680",
    "end": "359360"
  },
  {
    "text": "automatically",
    "start": "359360",
    "end": "360319"
  },
  {
    "text": "the google aip linter and protoloc are",
    "start": "360319",
    "end": "363039"
  },
  {
    "text": "two that first come to mind",
    "start": "363039",
    "end": "366720"
  },
  {
    "start": "366000",
    "end": "434000"
  },
  {
    "text": "a common problem with service contracts",
    "start": "366720",
    "end": "368880"
  },
  {
    "text": "is that they tend to grow organically",
    "start": "368880",
    "end": "370560"
  },
  {
    "text": "over time",
    "start": "370560",
    "end": "371520"
  },
  {
    "text": "they start cohesive but lose focus as",
    "start": "371520",
    "end": "373759"
  },
  {
    "text": "new operations are added one at a time",
    "start": "373759",
    "end": "376479"
  },
  {
    "text": "the contract is soon a mess it's",
    "start": "376479",
    "end": "379120"
  },
  {
    "text": "important to recognize",
    "start": "379120",
    "end": "380240"
  },
  {
    "text": "when this is happening and correct it by",
    "start": "380240",
    "end": "381840"
  },
  {
    "text": "breaking an unfocused contract",
    "start": "381840",
    "end": "383919"
  },
  {
    "text": "into separate cohesive contracts with a",
    "start": "383919",
    "end": "385759"
  },
  {
    "text": "new version",
    "start": "385759",
    "end": "387280"
  },
  {
    "text": "this is just like the interface",
    "start": "387280",
    "end": "389199"
  },
  {
    "text": "segmentation principle",
    "start": "389199",
    "end": "391199"
  },
  {
    "text": "of the solid oop principles for example",
    "start": "391199",
    "end": "394479"
  },
  {
    "text": "we can split the complex v1 contracts",
    "start": "394479",
    "end": "397280"
  },
  {
    "text": "seen here into three cohesive v2",
    "start": "397280",
    "end": "399520"
  },
  {
    "text": "contracts",
    "start": "399520",
    "end": "400479"
  },
  {
    "text": "for each for a facet of the service crud",
    "start": "400479",
    "end": "403440"
  },
  {
    "text": "search and signing",
    "start": "403440",
    "end": "405280"
  },
  {
    "text": "clients that need search but not signing",
    "start": "405280",
    "end": "407360"
  },
  {
    "text": "no longer need to import",
    "start": "407360",
    "end": "408800"
  },
  {
    "text": "unneeded apis applying isp to grpc",
    "start": "408800",
    "end": "412800"
  },
  {
    "text": "contracts promotes cohesion",
    "start": "412800",
    "end": "414639"
  },
  {
    "text": "amongst each service's contract",
    "start": "414639",
    "end": "416319"
  },
  {
    "text": "operations furthermore consumers only",
    "start": "416319",
    "end": "418720"
  },
  {
    "text": "reference the subset",
    "start": "418720",
    "end": "420080"
  },
  {
    "text": "behavior that they need from a service",
    "start": "420080",
    "end": "424080"
  },
  {
    "text": "this reduces client churn when contract",
    "start": "424080",
    "end": "426240"
  },
  {
    "text": "changes happen",
    "start": "426240",
    "end": "427120"
  },
  {
    "text": "because each so us because each smaller",
    "start": "427120",
    "end": "430319"
  },
  {
    "text": "contract can be versioned independently",
    "start": "430319",
    "end": "434160"
  },
  {
    "text": "ensuring our message types are cohesive",
    "start": "435120",
    "end": "437199"
  },
  {
    "text": "is just as important as having a",
    "start": "437199",
    "end": "438720"
  },
  {
    "text": "cohesive service",
    "start": "438720",
    "end": "440560"
  },
  {
    "text": "a common mistake when defining services",
    "start": "440560",
    "end": "442880"
  },
  {
    "text": "is to share requests and response types",
    "start": "442880",
    "end": "445199"
  },
  {
    "text": "requests and response types should be",
    "start": "445199",
    "end": "446720"
  },
  {
    "text": "exclusive to a grpc operation",
    "start": "446720",
    "end": "448720"
  },
  {
    "text": "even if the contents look identical",
    "start": "448720",
    "end": "451120"
  },
  {
    "text": "think of them as parameter lists for",
    "start": "451120",
    "end": "452639"
  },
  {
    "text": "their respective functions",
    "start": "452639",
    "end": "454319"
  },
  {
    "text": "even though two functions share a",
    "start": "454319",
    "end": "456080"
  },
  {
    "text": "similar signature it doesn't mean that",
    "start": "456080",
    "end": "457680"
  },
  {
    "text": "their parameter lists are literally the",
    "start": "457680",
    "end": "459440"
  },
  {
    "text": "same construct",
    "start": "459440",
    "end": "461360"
  },
  {
    "text": "keeping separate types gives you the",
    "start": "461360",
    "end": "462800"
  },
  {
    "text": "flexibility to augment one operation in",
    "start": "462800",
    "end": "464639"
  },
  {
    "text": "the future without impacting the api of",
    "start": "464639",
    "end": "466560"
  },
  {
    "text": "other operations",
    "start": "466560",
    "end": "468160"
  },
  {
    "text": "now this force duplication only goes one",
    "start": "468160",
    "end": "470479"
  },
  {
    "text": "layer deep",
    "start": "470479",
    "end": "471360"
  },
  {
    "text": "the type types used by request and",
    "start": "471360",
    "end": "473680"
  },
  {
    "text": "response messages can be shared as",
    "start": "473680",
    "end": "475280"
  },
  {
    "text": "needed",
    "start": "475280",
    "end": "476000"
  },
  {
    "text": "for example a find cocktail response and",
    "start": "476000",
    "end": "478560"
  },
  {
    "text": "a get cocktail response can both return",
    "start": "478560",
    "end": "480720"
  },
  {
    "text": "a recipe object",
    "start": "480720",
    "end": "481840"
  },
  {
    "text": "this sharing is okay because recipe is",
    "start": "481840",
    "end": "483840"
  },
  {
    "text": "part of the domain model",
    "start": "483840",
    "end": "485280"
  },
  {
    "text": "while request and response messages are",
    "start": "485280",
    "end": "486960"
  },
  {
    "text": "tightly coupled to the rpc operations",
    "start": "486960",
    "end": "490840"
  },
  {
    "text": "themselves",
    "start": "490840",
    "end": "492319"
  },
  {
    "text": "so far we've focused on techniques for",
    "start": "492319",
    "end": "494160"
  },
  {
    "text": "keeping individual proto contracts",
    "start": "494160",
    "end": "496080"
  },
  {
    "text": "flexible and accommodating future change",
    "start": "496080",
    "end": "498720"
  },
  {
    "text": "now let's look at ways we can structure",
    "start": "498720",
    "end": "500319"
  },
  {
    "text": "our project to ensure we don't paint our",
    "start": "500319",
    "end": "502160"
  },
  {
    "text": "code into a corner",
    "start": "502160",
    "end": "503440"
  },
  {
    "text": "while our service contracts change",
    "start": "503440",
    "end": "507840"
  },
  {
    "start": "507000",
    "end": "575000"
  },
  {
    "text": "the first and most important rule when",
    "start": "509440",
    "end": "511199"
  },
  {
    "text": "coding against grpc",
    "start": "511199",
    "end": "512640"
  },
  {
    "text": "is to never pass around proto-generated",
    "start": "512640",
    "end": "514800"
  },
  {
    "text": "classes",
    "start": "514800",
    "end": "516399"
  },
  {
    "text": "it seems like a convenient shortcut to",
    "start": "516399",
    "end": "518399"
  },
  {
    "text": "use generated protoclasses as your",
    "start": "518399",
    "end": "520479"
  },
  {
    "text": "domain objects for data transfer objects",
    "start": "520479",
    "end": "522719"
  },
  {
    "text": "but resist this urge generated",
    "start": "522719",
    "end": "526000"
  },
  {
    "text": "protoclasses will come back to haunt you",
    "start": "526000",
    "end": "527920"
  },
  {
    "text": "in many ways",
    "start": "527920",
    "end": "529279"
  },
  {
    "text": "first the generated just make terrible",
    "start": "529279",
    "end": "531760"
  },
  {
    "text": "dtos",
    "start": "531760",
    "end": "532880"
  },
  {
    "text": "in some languages their api is really",
    "start": "532880",
    "end": "534959"
  },
  {
    "text": "unwieldy and the objects themselves are",
    "start": "534959",
    "end": "536720"
  },
  {
    "text": "immutable",
    "start": "536720",
    "end": "537600"
  },
  {
    "text": "this really clutters up the code that",
    "start": "537600",
    "end": "539040"
  },
  {
    "text": "uses these types",
    "start": "539040",
    "end": "540720"
  },
  {
    "text": "second generated protoclasses are not",
    "start": "540720",
    "end": "543040"
  },
  {
    "text": "often open to expand extension",
    "start": "543040",
    "end": "545200"
  },
  {
    "text": "adding behavior to these classes is",
    "start": "545200",
    "end": "547200"
  },
  {
    "text": "either unnatural in your language or",
    "start": "547200",
    "end": "549120"
  },
  {
    "text": "outright impossible",
    "start": "549120",
    "end": "550800"
  },
  {
    "text": "and finally using generated protoclasses",
    "start": "550800",
    "end": "553279"
  },
  {
    "text": "in your logic couples your code to a",
    "start": "553279",
    "end": "555200"
  },
  {
    "text": "particular version of the contract",
    "start": "555200",
    "end": "557760"
  },
  {
    "text": "this is a mistake that will bite you the",
    "start": "557760",
    "end": "559279"
  },
  {
    "text": "hardest when major version changes",
    "start": "559279",
    "end": "560959"
  },
  {
    "text": "needed if your business logic is defined",
    "start": "560959",
    "end": "563440"
  },
  {
    "text": "in terms of v1 generated types",
    "start": "563440",
    "end": "565519"
  },
  {
    "text": "you'll need to do a major rewrite to",
    "start": "565519",
    "end": "567120"
  },
  {
    "text": "redefine in terms of v2 generated types",
    "start": "567120",
    "end": "569760"
  },
  {
    "text": "and good luck supporting v1 and v2 types",
    "start": "569760",
    "end": "572240"
  },
  {
    "text": "at the same time with the same code",
    "start": "572240",
    "end": "576480"
  },
  {
    "start": "575000",
    "end": "678000"
  },
  {
    "text": "so how can we structure our code so that",
    "start": "576480",
    "end": "578399"
  },
  {
    "text": "we never depend on generated protos",
    "start": "578399",
    "end": "581360"
  },
  {
    "text": "i like to use a three module layout when",
    "start": "581360",
    "end": "583360"
  },
  {
    "text": "building a service",
    "start": "583360",
    "end": "584959"
  },
  {
    "text": "let's start with the middle module the",
    "start": "584959",
    "end": "587519"
  },
  {
    "text": "implementation module",
    "start": "587519",
    "end": "589440"
  },
  {
    "text": "the implementation module is pure it has",
    "start": "589440",
    "end": "591760"
  },
  {
    "text": "zero proto or grpc dependencies",
    "start": "591760",
    "end": "594240"
  },
  {
    "text": "it's also where all of our business",
    "start": "594240",
    "end": "595760"
  },
  {
    "text": "logic goes business operations accept",
    "start": "595760",
    "end": "598240"
  },
  {
    "text": "and return only dtos and primitive data",
    "start": "598240",
    "end": "600399"
  },
  {
    "text": "types",
    "start": "600399",
    "end": "601040"
  },
  {
    "text": "which allows it to be completely unit",
    "start": "601040",
    "end": "603040"
  },
  {
    "text": "testable without any references to grpc",
    "start": "603040",
    "end": "606560"
  },
  {
    "text": "upstream dependencies we call like other",
    "start": "606560",
    "end": "608720"
  },
  {
    "text": "services or data stores are represented",
    "start": "608720",
    "end": "610640"
  },
  {
    "text": "in this module",
    "start": "610640",
    "end": "611600"
  },
  {
    "text": "using simple type interfaces unit tests",
    "start": "611600",
    "end": "614800"
  },
  {
    "text": "can mock these interfaces so that the",
    "start": "614800",
    "end": "616560"
  },
  {
    "text": "tests are",
    "start": "616560",
    "end": "617600"
  },
  {
    "text": "completely self-contained above the",
    "start": "617600",
    "end": "620880"
  },
  {
    "text": "implementation module is the api module",
    "start": "620880",
    "end": "623600"
  },
  {
    "text": "this module is where grpc generated",
    "start": "623600",
    "end": "625760"
  },
  {
    "text": "proto classes and the grpc server stub",
    "start": "625760",
    "end": "628000"
  },
  {
    "text": "lives",
    "start": "628000",
    "end": "629519"
  },
  {
    "text": "no business logic is in this layer all",
    "start": "629519",
    "end": "631920"
  },
  {
    "text": "server stubs delegate to the",
    "start": "631920",
    "end": "633279"
  },
  {
    "text": "implementation module below",
    "start": "633279",
    "end": "635200"
  },
  {
    "text": "doing proto-dto object translation as",
    "start": "635200",
    "end": "637680"
  },
  {
    "text": "needed",
    "start": "637680",
    "end": "639120"
  },
  {
    "text": "if a contract has more than one version",
    "start": "639120",
    "end": "641440"
  },
  {
    "text": "each version's generated stubs",
    "start": "641440",
    "end": "643360"
  },
  {
    "text": "call down into the shared implementation",
    "start": "643360",
    "end": "645600"
  },
  {
    "text": "we can implement the adapter pattern",
    "start": "645600",
    "end": "647200"
  },
  {
    "text": "where necessary",
    "start": "647200",
    "end": "648880"
  },
  {
    "text": "this way you don't have to duplicate",
    "start": "648880",
    "end": "650320"
  },
  {
    "text": "your business logic between versions",
    "start": "650320",
    "end": "653279"
  },
  {
    "text": "the bottom layer is our dependencies",
    "start": "653279",
    "end": "654880"
  },
  {
    "text": "module this module provides concrete",
    "start": "654880",
    "end": "657200"
  },
  {
    "text": "implementations for each upstream",
    "start": "657200",
    "end": "658800"
  },
  {
    "text": "dependency used by the logic",
    "start": "658800",
    "end": "661440"
  },
  {
    "text": "once again there's no business logic in",
    "start": "661440",
    "end": "663440"
  },
  {
    "text": "this layer",
    "start": "663440",
    "end": "664880"
  },
  {
    "text": "just implements the interfaces provided",
    "start": "664880",
    "end": "666880"
  },
  {
    "text": "by the implementation module",
    "start": "666880",
    "end": "668560"
  },
  {
    "text": "in terms of their upstream services if",
    "start": "668560",
    "end": "671200"
  },
  {
    "text": "you want you can wrap all three layers",
    "start": "671200",
    "end": "672959"
  },
  {
    "text": "in an ioc container to automatically",
    "start": "672959",
    "end": "674800"
  },
  {
    "text": "wire them together at runtime",
    "start": "674800",
    "end": "678160"
  },
  {
    "start": "678000",
    "end": "699000"
  },
  {
    "text": "let's recap we've looked at techniques",
    "start": "678880",
    "end": "681200"
  },
  {
    "text": "for structuring our proto contracts to",
    "start": "681200",
    "end": "682959"
  },
  {
    "text": "keep them flexible in the face of change",
    "start": "682959",
    "end": "685200"
  },
  {
    "text": "and we've looked at project layout",
    "start": "685200",
    "end": "686560"
  },
  {
    "text": "techniques to ensure our code stays just",
    "start": "686560",
    "end": "688560"
  },
  {
    "text": "as adaptable",
    "start": "688560",
    "end": "689760"
  },
  {
    "text": "but how do we best manage contract",
    "start": "689760",
    "end": "691519"
  },
  {
    "text": "change itself",
    "start": "691519",
    "end": "692880"
  },
  {
    "text": "to answer that question we have to look",
    "start": "692880",
    "end": "694560"
  },
  {
    "text": "at some techniques for managing contract",
    "start": "694560",
    "end": "696240"
  },
  {
    "text": "change over time",
    "start": "696240",
    "end": "702320"
  },
  {
    "start": "699000",
    "end": "836000"
  },
  {
    "text": "the first step to managing contract",
    "start": "702320",
    "end": "704079"
  },
  {
    "text": "change is accepting that breaking",
    "start": "704079",
    "end": "705600"
  },
  {
    "text": "changes will happen",
    "start": "705600",
    "end": "707360"
  },
  {
    "text": "i've worked on projects before that went",
    "start": "707360",
    "end": "708959"
  },
  {
    "text": "on to unnatural lengths to avoid",
    "start": "708959",
    "end": "710880"
  },
  {
    "text": "breaking changes",
    "start": "710880",
    "end": "712880"
  },
  {
    "text": "the results were harder to work with and",
    "start": "712880",
    "end": "714639"
  },
  {
    "text": "the breaking change would have been",
    "start": "714639",
    "end": "717040"
  },
  {
    "text": "for example don't co-mingle versions of",
    "start": "717040",
    "end": "719519"
  },
  {
    "text": "the same contract",
    "start": "719519",
    "end": "721040"
  },
  {
    "text": "this would be like putting grpc",
    "start": "721040",
    "end": "722639"
  },
  {
    "text": "operations called get cocktail v1",
    "start": "722639",
    "end": "724880"
  },
  {
    "text": "and get cocktail v2 and get cocktail v3",
    "start": "724880",
    "end": "727839"
  },
  {
    "text": "in the same proto each with different",
    "start": "727839",
    "end": "729519"
  },
  {
    "text": "signatures",
    "start": "729519",
    "end": "730720"
  },
  {
    "text": "not only does this bloat your contract",
    "start": "730720",
    "end": "732480"
  },
  {
    "text": "and to decrease its cohesiveness",
    "start": "732480",
    "end": "734560"
  },
  {
    "text": "but it also makes it nearly impossible",
    "start": "734560",
    "end": "736480"
  },
  {
    "text": "to cleanly cut over from one new version",
    "start": "736480",
    "end": "738480"
  },
  {
    "text": "to another",
    "start": "738480",
    "end": "740560"
  },
  {
    "text": "another thing to avoid version is to ver",
    "start": "740560",
    "end": "742720"
  },
  {
    "text": "another thing is to avoid versioning",
    "start": "742720",
    "end": "744240"
  },
  {
    "text": "independent",
    "start": "744240",
    "end": "745519"
  },
  {
    "text": "operations instead",
    "start": "745519",
    "end": "748639"
  },
  {
    "text": "of the whole contract this would be like",
    "start": "748639",
    "end": "750720"
  },
  {
    "text": "putting get cocktail v2 in a veto",
    "start": "750720",
    "end": "753200"
  },
  {
    "text": "v2 contract all by itself and relying on",
    "start": "753200",
    "end": "755920"
  },
  {
    "text": "the v1 contract for everything else",
    "start": "755920",
    "end": "758320"
  },
  {
    "text": "new developers need to reference two",
    "start": "758320",
    "end": "760079"
  },
  {
    "text": "different proto contracts",
    "start": "760079",
    "end": "761600"
  },
  {
    "text": "to work with your service while also",
    "start": "761600",
    "end": "763279"
  },
  {
    "text": "knowing which v1 operations have been",
    "start": "763279",
    "end": "765279"
  },
  {
    "text": "deprecated",
    "start": "765279",
    "end": "766480"
  },
  {
    "text": "instead version the entire contract",
    "start": "766480",
    "end": "768480"
  },
  {
    "text": "anytime any operation",
    "start": "768480",
    "end": "770560"
  },
  {
    "text": "experiences a breaking change",
    "start": "770560",
    "end": "773279"
  },
  {
    "text": "unfortunately",
    "start": "773279",
    "end": "774560"
  },
  {
    "text": "versioning a whole contract is painful",
    "start": "774560",
    "end": "777040"
  },
  {
    "text": "there's a new proto to distribute",
    "start": "777040",
    "end": "778560"
  },
  {
    "text": "new stubs to write more marshalling code",
    "start": "778560",
    "end": "780480"
  },
  {
    "text": "is needed you need to integrate with",
    "start": "780480",
    "end": "782079"
  },
  {
    "text": "your implementation layer",
    "start": "782079",
    "end": "784800"
  },
  {
    "text": "this should be avoided whenever possible",
    "start": "784800",
    "end": "787040"
  },
  {
    "text": "but not to the point of contorting your",
    "start": "787040",
    "end": "788800"
  },
  {
    "text": "code base",
    "start": "788800",
    "end": "790240"
  },
  {
    "text": "additive changes optional fields and",
    "start": "790240",
    "end": "792399"
  },
  {
    "text": "flags can go a long way",
    "start": "792399",
    "end": "793839"
  },
  {
    "text": "towards extending the life of your",
    "start": "793839",
    "end": "795120"
  },
  {
    "text": "contract for example",
    "start": "795120",
    "end": "797200"
  },
  {
    "text": "you want to introduce machine",
    "start": "797200",
    "end": "798639"
  },
  {
    "text": "translation to your cocktail service",
    "start": "798639",
    "end": "800959"
  },
  {
    "text": "instead of breaking the whole contract",
    "start": "800959",
    "end": "802720"
  },
  {
    "text": "to introduce this capability you can add",
    "start": "802720",
    "end": "804720"
  },
  {
    "text": "a translate to language field to get",
    "start": "804720",
    "end": "807200"
  },
  {
    "text": "contract",
    "start": "807200",
    "end": "808000"
  },
  {
    "text": "get cocktail operation old clients won't",
    "start": "808000",
    "end": "810959"
  },
  {
    "text": "know about this field and won't send it",
    "start": "810959",
    "end": "813040"
  },
  {
    "text": "new clients can request translation by",
    "start": "813040",
    "end": "814800"
  },
  {
    "text": "setting the field while",
    "start": "814800",
    "end": "816240"
  },
  {
    "text": "old clients continue to work just as is",
    "start": "816240",
    "end": "819199"
  },
  {
    "text": "no breaking changes are necessary",
    "start": "819199",
    "end": "822639"
  },
  {
    "text": "if however you decide to break a",
    "start": "822639",
    "end": "824160"
  },
  {
    "text": "contract use it as an opportunity to do",
    "start": "824160",
    "end": "826720"
  },
  {
    "text": "the right",
    "start": "826720",
    "end": "827199"
  },
  {
    "text": "refactoring you've held off on",
    "start": "827199",
    "end": "829279"
  },
  {
    "text": "frequently breaking a contract with",
    "start": "829279",
    "end": "830959"
  },
  {
    "text": "small changes",
    "start": "830959",
    "end": "831760"
  },
  {
    "text": "isn't really annoying to your downstream",
    "start": "831760",
    "end": "833440"
  },
  {
    "text": "consumers",
    "start": "833440",
    "end": "836000"
  },
  {
    "start": "836000",
    "end": "905000"
  },
  {
    "text": "as we've seen service contracts",
    "start": "836480",
    "end": "838480"
  },
  {
    "text": "sometimes change in incompatible ways",
    "start": "838480",
    "end": "840800"
  },
  {
    "text": "necessitating a breaking change to the",
    "start": "840800",
    "end": "842720"
  },
  {
    "text": "contract",
    "start": "842720",
    "end": "843839"
  },
  {
    "text": "luckily grpc has some built-in smarts to",
    "start": "843839",
    "end": "846320"
  },
  {
    "text": "accommodating running",
    "start": "846320",
    "end": "847600"
  },
  {
    "text": "multiple contract versions side by side",
    "start": "847600",
    "end": "850160"
  },
  {
    "text": "remember",
    "start": "850160",
    "end": "850639"
  },
  {
    "text": "grpc is natively multiplexing this means",
    "start": "850639",
    "end": "853680"
  },
  {
    "text": "that multiple contract implementations",
    "start": "853680",
    "end": "855519"
  },
  {
    "text": "can share the same port",
    "start": "855519",
    "end": "856800"
  },
  {
    "text": "and the same process as long as they",
    "start": "856800",
    "end": "858720"
  },
  {
    "text": "have different name spaces",
    "start": "858720",
    "end": "860880"
  },
  {
    "text": "if you put the major contract version",
    "start": "860880",
    "end": "862480"
  },
  {
    "text": "into the proto namespace this won't be a",
    "start": "862480",
    "end": "864160"
  },
  {
    "text": "problem for you",
    "start": "864160",
    "end": "865199"
  },
  {
    "text": "you just have to implement each server",
    "start": "865199",
    "end": "866959"
  },
  {
    "text": "stub independently and wire them up",
    "start": "866959",
    "end": "868720"
  },
  {
    "text": "against your shared business logic",
    "start": "868720",
    "end": "870000"
  },
  {
    "text": "layer when working with multiple",
    "start": "870000",
    "end": "872079"
  },
  {
    "text": "contract versions i like to keep",
    "start": "872079",
    "end": "873839"
  },
  {
    "text": "three different versions active at the",
    "start": "873839",
    "end": "875519"
  },
  {
    "text": "same time",
    "start": "875519",
    "end": "877040"
  },
  {
    "text": "the v current version is what we want",
    "start": "877040",
    "end": "879360"
  },
  {
    "text": "our current consumers to use today",
    "start": "879360",
    "end": "881760"
  },
  {
    "text": "the previous version is what callers who",
    "start": "881760",
    "end": "884079"
  },
  {
    "text": "haven't upgraded are still using",
    "start": "884079",
    "end": "886000"
  },
  {
    "text": "you may need more than one of these if",
    "start": "886000",
    "end": "887760"
  },
  {
    "text": "you have downstream callers who are",
    "start": "887760",
    "end": "889199"
  },
  {
    "text": "really slow to upgrade",
    "start": "889199",
    "end": "891199"
  },
  {
    "text": "when you start working on a new version",
    "start": "891199",
    "end": "892720"
  },
  {
    "text": "of your contract you can publish it as a",
    "start": "892720",
    "end": "894480"
  },
  {
    "text": "v-next version and only share the",
    "start": "894480",
    "end": "896560"
  },
  {
    "text": "contract with select partners",
    "start": "896560",
    "end": "898560"
  },
  {
    "text": "this way you can rapidly iterate on",
    "start": "898560",
    "end": "900240"
  },
  {
    "text": "vnext without sacrificing the stability",
    "start": "900240",
    "end": "902320"
  },
  {
    "text": "of v current or v",
    "start": "902320",
    "end": "903440"
  },
  {
    "text": "previous i hope you've learned something",
    "start": "903440",
    "end": "907519"
  },
  {
    "start": "905000",
    "end": "926000"
  },
  {
    "text": "today and feel more confident in",
    "start": "907519",
    "end": "908959"
  },
  {
    "text": "managing change in your services",
    "start": "908959",
    "end": "911040"
  },
  {
    "text": "we've covered proto design techniques",
    "start": "911040",
    "end": "912720"
  },
  {
    "text": "for handling change within a contract",
    "start": "912720",
    "end": "914959"
  },
  {
    "text": "we've covered the layout techniques for",
    "start": "914959",
    "end": "916959"
  },
  {
    "text": "handling chain contract change within",
    "start": "916959",
    "end": "918880"
  },
  {
    "text": "our code",
    "start": "918880",
    "end": "919600"
  },
  {
    "text": "and finally we've covered contract",
    "start": "919600",
    "end": "921680"
  },
  {
    "text": "versioning techniques for managing",
    "start": "921680",
    "end": "923360"
  },
  {
    "text": "changes between contract versions over",
    "start": "923360",
    "end": "925199"
  },
  {
    "text": "time",
    "start": "925199",
    "end": "926800"
  },
  {
    "start": "926000",
    "end": "960000"
  },
  {
    "text": "if you take nothing else away remember",
    "start": "926800",
    "end": "928639"
  },
  {
    "text": "this the contract version",
    "start": "928639",
    "end": "930480"
  },
  {
    "text": "is not your implementation version don't",
    "start": "930480",
    "end": "932880"
  },
  {
    "text": "couple the two together",
    "start": "932880",
    "end": "935120"
  },
  {
    "text": "change is inevitable you can either",
    "start": "935120",
    "end": "937120"
  },
  {
    "text": "anticipate it in your design or be run",
    "start": "937120",
    "end": "939120"
  },
  {
    "text": "over by it when it comes",
    "start": "939120",
    "end": "940800"
  },
  {
    "text": "and finally you need to practice",
    "start": "940800",
    "end": "942240"
  },
  {
    "text": "deliberate design your proto contract is",
    "start": "942240",
    "end": "944720"
  },
  {
    "text": "the most important interface to your",
    "start": "944720",
    "end": "946160"
  },
  {
    "text": "service",
    "start": "946160",
    "end": "947040"
  },
  {
    "text": "you can change an implementation all you",
    "start": "947040",
    "end": "948639"
  },
  {
    "text": "want but if you break the contract your",
    "start": "948639",
    "end": "950320"
  },
  {
    "text": "changes will affect everyone around you",
    "start": "950320",
    "end": "953040"
  },
  {
    "text": "we've covered a lot i'm sure you have",
    "start": "953040",
    "end": "954800"
  },
  {
    "text": "questions i'm available on twitter and",
    "start": "954800",
    "end": "957040"
  },
  {
    "text": "on the stream to answer them",
    "start": "957040",
    "end": "958399"
  },
  {
    "text": "with that happy coding",
    "start": "958399",
    "end": "962480"
  }
]