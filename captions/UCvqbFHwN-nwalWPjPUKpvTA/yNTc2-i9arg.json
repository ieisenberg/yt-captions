[
  {
    "start": "0",
    "end": "56000"
  },
  {
    "text": "hey everyone my name is Joe thanks for having me here today we're going to talk about debugging our applications live in",
    "start": "30",
    "end": "7259"
  },
  {
    "text": "kubernetes you can see a github repo noted up here and that is kind of the source material for this presentation",
    "start": "7259",
    "end": "15109"
  },
  {
    "text": "this presentation is kind of information dense there's a lot of slides that have a lot of details on them",
    "start": "15109",
    "end": "20250"
  },
  {
    "text": "I'd recommend instead of maybe trying to take pictures or jot things down they can get the slides both in the coop con schedule as well as from this github",
    "start": "20250",
    "end": "26730"
  },
  {
    "text": "repo and it might help you kind of keep track of sections that you are review it",
    "start": "26730",
    "end": "32130"
  },
  {
    "text": "later to understand maybe how to do some of these techniques also this repo is",
    "start": "32130",
    "end": "38700"
  },
  {
    "text": "built around net core I'm not going to be doing a lot of net core specific things or trying not to I'll mention it",
    "start": "38700",
    "end": "45239"
  },
  {
    "text": "some but these all these techniques are about to look at our kind of framework agnostic there Linux Pacific and they",
    "start": "45239",
    "end": "51480"
  },
  {
    "text": "can be run against all kinds of runtimes and frameworks not just on that core ok",
    "start": "51480",
    "end": "57180"
  },
  {
    "start": "56000",
    "end": "155000"
  },
  {
    "text": "so what are we talking about today this presentation is primarily divided",
    "start": "57180",
    "end": "62879"
  },
  {
    "text": "into two major parts in the first part we're going to talk about kind of building a toolset container a sidecar",
    "start": "62879",
    "end": "68570"
  },
  {
    "text": "that we can pack full of a lot of tools that we're gonna use to debug our applications we're talk about some of",
    "start": "68570",
    "end": "74100"
  },
  {
    "text": "the challenges there some of the things that I have come across and I've been working on my toolset container for net core and then the second half of the",
    "start": "74100",
    "end": "81030"
  },
  {
    "text": "presentation we are going to kind of demo three different techniques we're gonna look at perf for CPU profiling Ltd",
    "start": "81030",
    "end": "89159"
  },
  {
    "text": "ng for user space static trace points and BCC for you probes dynamic tracing",
    "start": "89159",
    "end": "95570"
  },
  {
    "text": "like I said these three techniques can be performed against all kinds of runtimes and frameworks so don't think",
    "start": "95570",
    "end": "100829"
  },
  {
    "text": "this is net core specific yeah also we're going to do this in a way that we",
    "start": "100829",
    "end": "107250"
  },
  {
    "text": "can do in production the idea here is we're going to increase knowledge of our applications in the production environment whether they're going",
    "start": "107250",
    "end": "113549"
  },
  {
    "text": "through some negative moment like they're you know they're not responding to requests correctly we're trying to figure that out or they're performing",
    "start": "113549",
    "end": "120060"
  },
  {
    "text": "well and we just want to understand more about what it means to be performing it load or at scale we can use these techniques to learn more about our",
    "start": "120060",
    "end": "126509"
  },
  {
    "text": "application under those circumstances so all these are very low impact and all of these are designed to be run at scale",
    "start": "126509",
    "end": "132599"
  },
  {
    "text": "under load I'm and then finally kind of a theme of the presentation here I guess is we were",
    "start": "132599",
    "end": "138730"
  },
  {
    "text": "going to be performing this from the sidecar so we want to do this in kind of a kubernetes native way will cheat a",
    "start": "138730",
    "end": "143740"
  },
  {
    "text": "little bit and we'll talk about that but primarily we're going to be doing this through the kubernetes api in kubernetes",
    "start": "143740",
    "end": "150250"
  },
  {
    "text": "in native way and I will talk about why that's that can be a cool idea and why that works well before I get too far I'd",
    "start": "150250",
    "end": "156880"
  },
  {
    "start": "155000",
    "end": "223000"
  },
  {
    "text": "like to give credit where it's due Sacha Goldstein and Brendan Gregg have both done a tremendous amount of work in",
    "start": "156880",
    "end": "162459"
  },
  {
    "text": "tracing and Linux debugging techniques burner growing particulars blog is",
    "start": "162459",
    "end": "167530"
  },
  {
    "text": "chock-full of awesome information about these things if you if you are interested in this field I highly",
    "start": "167530",
    "end": "172810"
  },
  {
    "text": "recommend his blog also Sacha Goldstein did a lot of work on dynamic tracing for",
    "start": "172810",
    "end": "178300"
  },
  {
    "text": "net Corwin oh and my work in net core - - is kind of an extension of that to get",
    "start": "178300",
    "end": "183400"
  },
  {
    "text": "that to work I mean there's two other really good links there if you're kind of new to this world those links are",
    "start": "183400",
    "end": "189220"
  },
  {
    "text": "really good overviews of just Linux debugging systems in general it's kind of a fractured world if there's lots of",
    "start": "189220",
    "end": "195340"
  },
  {
    "text": "tools there's lots of terms and technologies and when you first get involved in it it can be confusing about",
    "start": "195340",
    "end": "200769"
  },
  {
    "text": "what's happening all the different pieces these are two kind of good overviews that touch on a lot of the",
    "start": "200769",
    "end": "206590"
  },
  {
    "text": "major areas and ideas and what's going on and then finally my repo like I said the slides are there so like this slide",
    "start": "206590",
    "end": "212980"
  },
  {
    "text": "for instance you're not going to obviously copy down those URLs or anything crazy I grabbed the slides and then you can look at them later to get",
    "start": "212980",
    "end": "219549"
  },
  {
    "text": "some of these links and get some of the details that we might move fast okay so",
    "start": "219549",
    "end": "225040"
  },
  {
    "start": "223000",
    "end": "441000"
  },
  {
    "text": "from a sidecar why why do it this way I guess is a question right when I first",
    "start": "225040",
    "end": "232600"
  },
  {
    "text": "began performing some of this we had some application issues in production and I would SSH into a node it was kind",
    "start": "232600",
    "end": "237670"
  },
  {
    "text": "of a naive approach here like I I wanted to gain more information about a process that was running on my linux instance",
    "start": "237670",
    "end": "243040"
  },
  {
    "text": "sorry ssh din and iran perf I pulled some tools I was trying some of these techniques and I and I did it helped I learned a",
    "start": "243040",
    "end": "249280"
  },
  {
    "text": "lot about the application of what it was doing but when I was done with this I kind of had a mess like got all these tools installed suddenly I had one node",
    "start": "249280",
    "end": "255940"
  },
  {
    "text": "with different packages installed and you know some garbage stuff I'd left around like little notes or like you",
    "start": "255940",
    "end": "261160"
  },
  {
    "text": "know files that output - and I didn't like that I didn't like that I was kind of taking this world",
    "start": "261160",
    "end": "266620"
  },
  {
    "text": "where I had a bunch of consistent notes everything was the exact same and I had one note that was different so at the",
    "start": "266620",
    "end": "272290"
  },
  {
    "text": "end of these like kind of sessions where I was doing the debugging I had the choice of try to clean up stop caring",
    "start": "272290",
    "end": "277810"
  },
  {
    "text": "and leave it alone just leave it or delete the node and none of those felt good the sidecar is a really neat",
    "start": "277810",
    "end": "283479"
  },
  {
    "text": "technique because you can put all of your tools and those are all of your tools in this container that you run alongside your application container and",
    "start": "283479",
    "end": "289900"
  },
  {
    "text": "when you delete the pod then it all goes away and it cleans up after itself and so you don't have this kind of concern about impacting the node and maybe what",
    "start": "289900",
    "end": "296530"
  },
  {
    "text": "I could do or an impact I could have on other processes on the node and it doesn't require hosts access so every",
    "start": "296530",
    "end": "304030"
  },
  {
    "text": "organization is kind of different you know who's allowed on a node or not maybe everybody is maybe just your infrastructure people maybe your devs",
    "start": "304030",
    "end": "310150"
  },
  {
    "text": "are or maybe they're not but the people who would normally be doing this kind of analysis are probably developers and if",
    "start": "310150",
    "end": "315220"
  },
  {
    "text": "they're not allowed on the node then this kind of sidecar technique will open up some of these tools to your",
    "start": "315220",
    "end": "320650"
  },
  {
    "text": "developers give them some observability give them some opportunity to see their applications better without having to",
    "start": "320650",
    "end": "326620"
  },
  {
    "text": "give them SSH access directly into the node it's also easy easy we'll talk",
    "start": "326620",
    "end": "333639"
  },
  {
    "text": "about why it's not easy in a second but it's easy to build a toolset container that that supports this that that does",
    "start": "333639",
    "end": "341169"
  },
  {
    "text": "the that has your debugging tools in it and what I mean by easy here is it it it obeys a lot of the same rules that our",
    "start": "341169",
    "end": "346930"
  },
  {
    "text": "application containers do you can iterate on it so you can build a container if it just has perf and just",
    "start": "346930",
    "end": "353080"
  },
  {
    "text": "does some CPU profiling and get that working and you have a new way to see your you have a new way to see your application and then a couple months",
    "start": "353080",
    "end": "359620"
  },
  {
    "text": "later you have some other problem going on a person not helping so maybe you learn a new technique or a new tool and you keep iterating and building on this",
    "start": "359620",
    "end": "366010"
  },
  {
    "text": "tool sigh container over time and you can deploy it and to anywhere you want also like your application containers",
    "start": "366010",
    "end": "373030"
  },
  {
    "text": "it's immutable it can be dropped in Undead that can be dropped into QA it could be drop into prod it could be",
    "start": "373030",
    "end": "378520"
  },
  {
    "text": "dropping to our desktops and it has this like portability aspect to it and so it",
    "start": "378520",
    "end": "383710"
  },
  {
    "text": "so it has these kind of neat features that are applications do as well also once you are in the container and you're",
    "start": "383710",
    "end": "389770"
  },
  {
    "text": "kind of messing around with things you'll often find oh I didn't think to bring this tool and I didn't have to think to bring this this this thing in",
    "start": "389770",
    "end": "396520"
  },
  {
    "text": "the script or whatever you can write scripts on-the-fly you can and pull new tools kerlor apt get them",
    "start": "396520",
    "end": "401750"
  },
  {
    "text": "and then again when you delete your pod it's all gone you don't have to worry about the changes you made you don't have to worry about what you may have",
    "start": "401750",
    "end": "407810"
  },
  {
    "text": "done dynamically inside the container finally I feel like this also supports development diversity if you have a lot",
    "start": "407810",
    "end": "414590"
  },
  {
    "text": "of teams and these teams have different technologies like you got your node team and your Python team and your net core",
    "start": "414590",
    "end": "420560"
  },
  {
    "text": "team and then each team can how to build their own containers instead of like",
    "start": "420560",
    "end": "426650"
  },
  {
    "text": "trying to have a node and that node has tools for everybody you can instead have",
    "start": "426650",
    "end": "432380"
  },
  {
    "text": "each team who's building their own containers to debug their own applications and they have developed their own techniques internally and they",
    "start": "432380",
    "end": "438740"
  },
  {
    "text": "can kind of maintain that on their own okay why is this not easy what are some",
    "start": "438740",
    "end": "446270"
  },
  {
    "start": "441000",
    "end": "669000"
  },
  {
    "text": "of the challenge what are some of the problems with trying this I'd say the number one issue the most difficult",
    "start": "446270",
    "end": "451850"
  },
  {
    "text": "thing I ran across while I was working on this was when you install some",
    "start": "451850",
    "end": "457520"
  },
  {
    "text": "applications like perf they want to be installed for the kernel that you are installing them on there are kernel",
    "start": "457520",
    "end": "462890"
  },
  {
    "text": "specific installs if you apt-get perf right now it will be a version of perf that is built for the kernel that you",
    "start": "462890",
    "end": "467900"
  },
  {
    "text": "are running so if you build a docter file and you run it locally and you build a container and you have to get",
    "start": "467900",
    "end": "473330"
  },
  {
    "text": "per if it's gonna actually be for the kernel on the machine that you built it and it might have problems when you try to deploy it to a node in your",
    "start": "473330",
    "end": "479240"
  },
  {
    "text": "production cluster that has a different version so some of the options there we",
    "start": "479240",
    "end": "484370"
  },
  {
    "text": "can bake our tooling in some of us are lucky enough and we were lucky enough that all of our nodes are going to be",
    "start": "484370",
    "end": "489890"
  },
  {
    "text": "the exact same kernel version we have this kind of like very homogeneous architecture to deploy to and if you're in this world that's fantastic baked",
    "start": "489890",
    "end": "496669"
  },
  {
    "text": "everything in and make it exactly what you need for the kernels you're running and you'll be in a good spot other",
    "start": "496669",
    "end": "502160"
  },
  {
    "text": "things we can attempt to do we can mount stuff from host and we're gonna do that a little bit and that's kind of where we're gonna cheat some because it's kind",
    "start": "502160",
    "end": "507890"
  },
  {
    "text": "of by mounting resources from the host we kind of blur the line between using host access or not and finally another",
    "start": "507890",
    "end": "515000"
  },
  {
    "text": "option is pulling this after deployment you deploy this and you try to pull in the tools then once you're on the actual machine and the kernel is known the",
    "start": "515000",
    "end": "522110"
  },
  {
    "text": "kernel version is known at that point it's that that approach is primarily how",
    "start": "522110",
    "end": "527900"
  },
  {
    "text": "I have worked with my dotnet core container my sidecar with my tools is pulling these things after a",
    "start": "527900",
    "end": "534230"
  },
  {
    "text": "deployment and while it is kind of flexible and has given me the ability to deploy to a lot of environments I've",
    "start": "534230",
    "end": "539720"
  },
  {
    "text": "gotten it working in like AWS cops with a cop's cluster on Debian gke abun -",
    "start": "539720",
    "end": "544760"
  },
  {
    "text": "I've got it running locally of course it's been very difficult to keep that",
    "start": "544760",
    "end": "550130"
  },
  {
    "text": "working and it's been a lot of overhead to keep it working my advice would be to remain on the top line hopefully you can",
    "start": "550130",
    "end": "555440"
  },
  {
    "text": "just bake everything in it'll work nicely for you I'm also slide carry images can be very large this kind of",
    "start": "555440",
    "end": "561470"
  },
  {
    "text": "doesn't matter and it kind of does I mean we don't want large container images but you're also not pulling this all the time this isn't a normal",
    "start": "561470",
    "end": "566660"
  },
  {
    "text": "application you're going to pull it at specialized moments right like I did today I want to do some profiling in",
    "start": "566660",
    "end": "573320"
  },
  {
    "text": "production so I'm gonna do it and that you do it that one time and a month later you do it again so if these container images are a little large and",
    "start": "573320",
    "end": "579560"
  },
  {
    "text": "they require a little more time to pull I think it doesn't matter as much but they are they can get very large for sure and they can't be added dynamically",
    "start": "579560",
    "end": "587350"
  },
  {
    "text": "they kind of can but they kind of can't and this is another cheat moment Cooper",
    "start": "587350",
    "end": "593029"
  },
  {
    "text": "may in a kubernetes native way they cannot be added dynamically a pod is immutable and you can't inject a",
    "start": "593029",
    "end": "598370"
  },
  {
    "text": "container at runtime so these techniques are kind of more useful in signature",
    "start": "598370",
    "end": "603860"
  },
  {
    "text": "situations where you have a known kind of like problem and application it's in",
    "start": "603860",
    "end": "608870"
  },
  {
    "text": "a minute you can't reproduce it anywhere else it happens in production like twice a day or three times a day you don't understand that you can't reproduce it",
    "start": "608870",
    "end": "615160"
  },
  {
    "text": "and you know this is happening so you can then deploy a version of that application with your sidecar container",
    "start": "615160",
    "end": "620600"
  },
  {
    "text": "and wait for the issue to come up and then start doing your profiling it doesn't really work for like responding",
    "start": "620600",
    "end": "626060"
  },
  {
    "text": "to an incident if an incidents in progress you have to deploy this container or this pod with the sidecar",
    "start": "626060",
    "end": "631240"
  },
  {
    "text": "now you can't actually using docker inject this container in the same",
    "start": "631240",
    "end": "637040"
  },
  {
    "text": "process namespace as another container so it is possible to pull this off if you break the SSH and node specific",
    "start": "637040",
    "end": "643370"
  },
  {
    "text": "rules there was a group I was working with who wanted to run perf once an hour",
    "start": "643370",
    "end": "648860"
  },
  {
    "text": "and so they set up a cron job every hour they would use a dr. command on the host to inject the sidecar they'd run perfect",
    "start": "648860",
    "end": "655970"
  },
  {
    "text": "gentle flame graph offload that and store that and they kind of had this like regular record of how their",
    "start": "655970",
    "end": "661519"
  },
  {
    "text": "container was doing what the performance was so that was pretty cool but it was only breaking the kubernetes native kind",
    "start": "661519",
    "end": "667670"
  },
  {
    "text": "of rules okay so what features are going",
    "start": "667670",
    "end": "673820"
  },
  {
    "start": "669000",
    "end": "765000"
  },
  {
    "text": "to use of what like elements of the pod spec do we need to pull this off the top guy here share process namespace this is",
    "start": "673820",
    "end": "680600"
  },
  {
    "text": "the most important of all of the of all of the four this is the this is the the field that makes any of us possible by",
    "start": "680600",
    "end": "688250"
  },
  {
    "text": "default when you deploy a pod and the containers are in that pod they are in different processing namespaces so they",
    "start": "688250",
    "end": "694070"
  },
  {
    "text": "can't actually see the processes across container they're still isolated from each other on theirs they're all in the",
    "start": "694070",
    "end": "699710"
  },
  {
    "text": "same network namespace which is one of the kind of defining features of the pod but they do not share the same process",
    "start": "699710",
    "end": "706220"
  },
  {
    "text": "namespace if you set this to true then all processes and all containers can see each other which is a requirement for kind of doing a lot of this analysis",
    "start": "706220",
    "end": "712580"
  },
  {
    "text": "where like your debugging tools are gonna reach over and start looking at your application your actual application",
    "start": "712580",
    "end": "718480"
  },
  {
    "text": "and we're also going to share mounted volumes between our sidecar and our application container a lot of these",
    "start": "718480",
    "end": "725390"
  },
  {
    "text": "tools want to communicate through a folder through a directory on on the machine and so we need to hook mount the",
    "start": "725390",
    "end": "730550"
  },
  {
    "text": "right hosts are the right paths I'm sorry we need to mount the mount the right paths in a empty dirt and we need",
    "start": "730550",
    "end": "736310"
  },
  {
    "text": "to share that between the two containers we'll look at that and then we're gonna mount host pass and that's kind of the the cheat I was talking about so we're",
    "start": "736310",
    "end": "741800"
  },
  {
    "text": "gonna bring in some resources from the host I'm gonna talk about why I've chosen to do that in this case I mean",
    "start": "741800",
    "end": "746900"
  },
  {
    "text": "finally a lot of these techniques are like asking the kernel for information about another process and that certainly",
    "start": "746900",
    "end": "753110"
  },
  {
    "text": "is a security concern right that's a root level kind of access so for some of",
    "start": "753110",
    "end": "758450"
  },
  {
    "text": "these anything involving the kernel normally we're going to have to set security context privileged to true okay",
    "start": "758450",
    "end": "766790"
  },
  {
    "start": "765000",
    "end": "828000"
  },
  {
    "text": "so next is the demo part with it a little bit of luck this will all work and if it doesn't then we'll figure it",
    "start": "766790",
    "end": "773180"
  },
  {
    "text": "out first we look at CPU profiling this is a great technique for understanding",
    "start": "773180",
    "end": "779270"
  },
  {
    "text": "like which functions your application is spending time and this is extremely powerful if you your application is",
    "start": "779270",
    "end": "784940"
  },
  {
    "text": "behaving strangely you don't understand it if you were to if you were to run this technique and find that a specific",
    "start": "784940",
    "end": "791540"
  },
  {
    "text": "function we're eating up like 60% of the CPU time it was on the stack constantly and you didn't expect that and that's a",
    "start": "791540",
    "end": "797930"
  },
  {
    "text": "great place to start looking at maybe why that should be true perhaps you need to just optimize that function",
    "start": "797930",
    "end": "804019"
  },
  {
    "text": "B there's some something you didn't consider when you were writing it the way this works is perf is going to",
    "start": "804019",
    "end": "809480"
  },
  {
    "text": "sample the stack of our other process a thousand times a second and it's just going to write out what happens so this",
    "start": "809480",
    "end": "814999"
  },
  {
    "text": "is a sampling kind of kind of approach when it does that it's going to record",
    "start": "814999",
    "end": "820040"
  },
  {
    "text": "those and then we're gonna use a tool called flame graphs I believe Brendan Gregg wrote this and we're used flame",
    "start": "820040",
    "end": "825439"
  },
  {
    "text": "graphs to generate this pretty picture here I'm so we're using peripheral flame graphs over here on the side I have the",
    "start": "825439",
    "end": "832850"
  },
  {
    "text": "pod spec hopefully that's readable like way back there hopefully that's readable if it's not",
    "start": "832850",
    "end": "838670"
  },
  {
    "text": "like I said grab the slides I knew that this is gonna be a lot of detail share processes namespace true that's the most",
    "start": "838670",
    "end": "844699"
  },
  {
    "text": "important one it's gonna be on all these we're going to also mount temp and we'll look at that in a second so I noticed I",
    "start": "844699",
    "end": "850309"
  },
  {
    "text": "have an empty door named temp and I'm mounting that between my sidecar and my application container and perf is going",
    "start": "850309",
    "end": "855709"
  },
  {
    "text": "to use that to communicate some specific information and then I also have my security context privilege true okay so",
    "start": "855709",
    "end": "864619"
  },
  {
    "start": "863000",
    "end": "1104000"
  },
  {
    "text": "let's get lucky this is a quick script that is going to exercise our application this script is",
    "start": "864619",
    "end": "873829"
  },
  {
    "text": "going to have two endpoints and wait a second so extremely low load just to cross the second one is going to hit endpoint to calculate a Fibonacci value",
    "start": "873829",
    "end": "880429"
  },
  {
    "text": "and the other one is going to hit endpoint that just echos the string back directly and will look kind of a second",
    "start": "880429",
    "end": "886279"
  },
  {
    "text": "why I chose to do two different things like that so we'll keep going on this side over here we'll keep our our our",
    "start": "886279",
    "end": "891490"
  },
  {
    "text": "process our exercise script on this side I have three containers so I'm sorry",
    "start": "891490",
    "end": "898549"
  },
  {
    "text": "three pods each pod has two containers one is my primary application container and one of those is my toolset sidecar",
    "start": "898549",
    "end": "905329"
  },
  {
    "text": "so we're going to exact into our sidecars we're going to run some clever scripts and we're going to get some good information about our process this first",
    "start": "905329",
    "end": "913399"
  },
  {
    "text": "guy here is yeah",
    "start": "913399",
    "end": "922240"
  },
  {
    "text": "so we've exact into our sidecar I'm running Bosch etc I've just kind of",
    "start": "922240",
    "end": "928450"
  },
  {
    "text": "scripted these out don't worry about the details of these you can this is nothing spectacular or interesting if you just art googling this this is like the third",
    "start": "928450",
    "end": "934450"
  },
  {
    "text": "hit you're gonna get so there is no secret sauce in this script right here I'm gonna run the script it's going to",
    "start": "934450",
    "end": "940270"
  },
  {
    "text": "use perf to again sample the stack of my main application it's going to run for a couple seconds there five seconds and",
    "start": "940270",
    "end": "946029"
  },
  {
    "text": "then it's going to generate a flame graph also notice I have to pass a PID somewhere on PSX and I can see that my",
    "start": "946029",
    "end": "952420"
  },
  {
    "text": "main application is number six it's a pin six dotnet sample net core after",
    "start": "952420",
    "end": "958180"
  },
  {
    "text": "yellow if you did not set share name process namespace true and you ran this PSX command you would not be able to see",
    "start": "958180",
    "end": "964570"
  },
  {
    "text": "your primary process and you would not be able to perform these techniques okay so let's run this guy and it work okay",
    "start": "964570",
    "end": "979830"
  },
  {
    "text": "so I should have a little or a little guy called flame graph SVG here there it",
    "start": "979830",
    "end": "985600"
  },
  {
    "text": "is right there so we've generated an SVG file and it is now that flame graph it is a record of",
    "start": "985600",
    "end": "992950"
  },
  {
    "text": "our stack during that five second period two quickly before we look at the actual you know output to look at temp the",
    "start": "992950",
    "end": "1001950"
  },
  {
    "text": "reason we mapped or with the reason we mounted temp is because perf wants to",
    "start": "1001950",
    "end": "1007110"
  },
  {
    "text": "see a perf map and temp and the perf map includes a mapping from a instruction pointer or a place in memory to a actual",
    "start": "1007110",
    "end": "1014550"
  },
  {
    "text": "function named Oh yikes yeah that really fast and it's gonna use this to Reese um",
    "start": "1014550",
    "end": "1020250"
  },
  {
    "text": "but Reese symbolic 8r spec so you don't want to stack with no symbols right that's annoying it's a bunch of stuff you don't understand this is going to",
    "start": "1020250",
    "end": "1026640"
  },
  {
    "text": "give nice pretty names to every position in our stack and it helps us understand like what's going on a lot of different",
    "start": "1026640",
    "end": "1033150"
  },
  {
    "text": "frameworks have support for this I know immediately that node does for instance a lot of different application",
    "start": "1033150",
    "end": "1038640"
  },
  {
    "text": "frameworks and platforms have perf map support and you can perform this analysis with them so I'm going to cheat",
    "start": "1038640",
    "end": "1046829"
  },
  {
    "text": "a little bit and just open this flame grab our flame graph SVG already have instead of pull that one from the",
    "start": "1046829",
    "end": "1052110"
  },
  {
    "text": "container and so this is what looks like if you were to open this in a browser it would actually be",
    "start": "1052110",
    "end": "1057540"
  },
  {
    "text": "interactable you can like control F and search it and you can kind of zoom into different parts but we're not going to get into all that what this kind of",
    "start": "1057540",
    "end": "1064170"
  },
  {
    "text": "means is this is our stack kind of smeared out over time here I can see this kind of column here and this is",
    "start": "1064170",
    "end": "1070410"
  },
  {
    "text": "maybe 30 or so percent so that means like 30 percent of the time the stack was sampled it was ed in this position",
    "start": "1070410",
    "end": "1077100"
  },
  {
    "text": "in the stack and it helps us understand what our application is kind of using its time to do I dunno just because I've",
    "start": "1077100",
    "end": "1083580"
  },
  {
    "text": "spent time doing this that this column way over here on the right that goes real high is my actual HTTP pipeline and that's where my requests are being",
    "start": "1083580",
    "end": "1089940"
  },
  {
    "text": "serviced if I were to see this thing take like 99% of the whole thing and some some call at the very top was a",
    "start": "1089940",
    "end": "1096120"
  },
  {
    "text": "huge amount of time I might want to investigate that call perhaps that call is taking way too long and I need to understand why okay static",
    "start": "1096120",
    "end": "1106770"
  },
  {
    "start": "1104000",
    "end": "1144000"
  },
  {
    "text": "trace points so a static trace point is a pre instrumented point in your application that you want to later",
    "start": "1106770",
    "end": "1114270"
  },
  {
    "text": "record it basically the reason these things exist because you think are let's logging or items gonna I'm gonna add a",
    "start": "1114270",
    "end": "1119310"
  },
  {
    "text": "log line it's a place in my application I want to record but static trace points are frameworks that are designed for",
    "start": "1119310",
    "end": "1125700"
  },
  {
    "text": "very very high volume things that you can write in the critical path and you can record this information and have low",
    "start": "1125700",
    "end": "1132510"
  },
  {
    "text": "to no impact on your application I'm if you're to log like a million times a second you would crush your application",
    "start": "1132510",
    "end": "1137700"
  },
  {
    "text": "and spend all this time logging you want to do that right but static trace points are designed for these very high volume kind of events these high volume logging",
    "start": "1137700",
    "end": "1144240"
  },
  {
    "start": "1144000",
    "end": "1326000"
  },
  {
    "text": "events it does require pre instrumentation though so you have to spend some time you know building these into your application I'm going to use",
    "start": "1144240",
    "end": "1151080"
  },
  {
    "text": "ltte ng and babel trace primarily LT and G is a framework for collecting trace",
    "start": "1151080",
    "end": "1157350"
  },
  {
    "text": "points and specifically or we're going to be doing user space trace points so our application in user space is going",
    "start": "1157350",
    "end": "1164340"
  },
  {
    "text": "to create events and pass it to our LT ng daemon in user space this particular this particular technique doesn't",
    "start": "1164340",
    "end": "1171300"
  },
  {
    "text": "require kernel access at all and you'll notice there's no security context privilege for this one because it's just application data and user space being",
    "start": "1171300",
    "end": "1178080"
  },
  {
    "text": "passed back and forth babel trace is a good tool to kind of dump the results of this the events and trace compass is a",
    "start": "1178080",
    "end": "1184860"
  },
  {
    "text": "cool UI but we won't get into that so you can actually pull all these events and kind of nice UI on your desktop and kind of work",
    "start": "1184860",
    "end": "1190050"
  },
  {
    "text": "with that with trace compass um so share process namespace true it's gonna be on",
    "start": "1190050",
    "end": "1195120"
  },
  {
    "text": "all of them volume mounts VAR run LT TNG because similar for similar reasons as temp are",
    "start": "1195120",
    "end": "1201630"
  },
  {
    "text": "mounting the temp directory for perf vara LT TNG will be used to kind of communicate between the two okay so this",
    "start": "1201630",
    "end": "1220530"
  },
  {
    "text": "is the script gonna run this time so these are a bunch of Ltd and G and",
    "start": "1220530",
    "end": "1225900"
  },
  {
    "text": "command or gonna like start a session we're gonna give it specific information about the application we want it to",
    "start": "1225900",
    "end": "1231120"
  },
  {
    "text": "record events from and then we're gonna collect those events for a few seconds then we're going to shut it all down and we're gonna look at the events that came",
    "start": "1231120",
    "end": "1237420"
  },
  {
    "text": "out of it like the other one I need the PID this will be 6 as well probably yep",
    "start": "1237420",
    "end": "1243990"
  },
  {
    "text": "there's the reason we're mounting VAR",
    "start": "1243990",
    "end": "1250770"
  },
  {
    "text": "run Ltd ng is because Ltd and G wants to communicate through a UNIX socket and by",
    "start": "1250770",
    "end": "1256230"
  },
  {
    "text": "default it puts it in far run l ki ng so for this to work at all both of the",
    "start": "1256230",
    "end": "1261270"
  },
  {
    "text": "applications need access to the same folder essentially and so that's why we mounted this one in an empty day and",
    "start": "1261270",
    "end": "1267150"
  },
  {
    "text": "then I can run Babel trace and kind of just you know throw these events out this is obvious is not super useful",
    "start": "1267150",
    "end": "1272400"
  },
  {
    "text": "right like what can I learn from just blowing those events out to the console not a lot but Babel trace does support",
    "start": "1272400",
    "end": "1279120"
  },
  {
    "text": "Python extensions so you can kind of write Python scripts too and now analyze this and then also like I said you can",
    "start": "1279120",
    "end": "1286380"
  },
  {
    "text": "use trace compass so you could bring all these back to your desktop you can use this trace compass utility to kind of see all kinds of interesting metrics",
    "start": "1286380",
    "end": "1292830"
  },
  {
    "text": "about your events like how many per event type occurred like when did they occur you see a nice timeline and",
    "start": "1292830",
    "end": "1297870"
  },
  {
    "text": "histogram cool Oh also dotnet core specifically has a pre",
    "start": "1297870",
    "end": "1306390"
  },
  {
    "text": "instrumentation for LT dmg which is why I'm using it the framework is the framework itself is generates healthy",
    "start": "1306390",
    "end": "1312660"
  },
  {
    "text": "TMT events in fact if you look at these these are not application events these are like garbage collection thread creation thread destruction for thread",
    "start": "1312660",
    "end": "1319320"
  },
  {
    "text": "weights or deadlocks it'll show up and these",
    "start": "1319320",
    "end": "1323269"
  },
  {
    "start": "1326000",
    "end": "1687000"
  },
  {
    "text": "finally dynamic tracing is a the newest of all these techniques dynamic tracing is a really cool trick to have the",
    "start": "1326520",
    "end": "1335140"
  },
  {
    "text": "kernel call back to you and tell you at any point when a function is called an application it's particularly",
    "start": "1335140",
    "end": "1341470"
  },
  {
    "text": "interesting because it requires no instrumentation so I don't have to do any work I can take a binary that I compiled a month ago and I can attach",
    "start": "1341470",
    "end": "1348880"
  },
  {
    "text": "myself to any function in that application know when it was called I know the parameters that are passed to it and know that the return value from",
    "start": "1348880",
    "end": "1355059"
  },
  {
    "text": "it this is really powerful what we're about to see is just the most basic",
    "start": "1355059",
    "end": "1360670"
  },
  {
    "text": "demonstration that does exactly what I said but if you do get BCC working and become invested in BCC or BPF the bottom",
    "start": "1360670",
    "end": "1368020"
  },
  {
    "text": "link there has all kinds of tools out of the box that are gonna let you like analyze network throughput analyze disk",
    "start": "1368020",
    "end": "1373809"
  },
  {
    "text": "throughput and understand other details about your application than just when a function is called this one is crazy all",
    "start": "1373809",
    "end": "1380710"
  },
  {
    "text": "kinds of stuff you got to do here this is the hardest one to pull off at the",
    "start": "1380710",
    "end": "1385809"
  },
  {
    "text": "top I'm running this script called run native and then I'm sharing all this stuff and that's all related to a",
    "start": "1385809",
    "end": "1390970"
  },
  {
    "text": "specific requirement of you probes which is what BCC is using and that specific",
    "start": "1390970",
    "end": "1396550"
  },
  {
    "text": "requirement and unfortunately this specific parm is not met by all frameworks is you have to have an on",
    "start": "1396550",
    "end": "1402070"
  },
  {
    "text": "disk machine code binary to pull this off so net core is built to an intermediate language like Java like a",
    "start": "1402070",
    "end": "1408280"
  },
  {
    "text": "bytecode language and so I'm running a script to take that bytecode compilation and turn it into machine code and lay it",
    "start": "1408280",
    "end": "1414429"
  },
  {
    "text": "on the disk I'm executing that and only that specific trick allows us to do VP or BCC at all to this application okay",
    "start": "1414429",
    "end": "1424320"
  },
  {
    "text": "also we're mounting this is this is the cheap mode here we're mounting user source and Lib modules and that's to get",
    "start": "1424320",
    "end": "1430630"
  },
  {
    "text": "Linux headers so to compile compile these BPF programs we need Linux headers and it can be difficult to pull the",
    "start": "1430630",
    "end": "1438580"
  },
  {
    "text": "exact Linux headers that your kernel has compiled into a container running on the kernel are running it I'm sorry running",
    "start": "1438580",
    "end": "1444250"
  },
  {
    "text": "in kubernetes so I'm cheating a bit here I'm actually mounting the Linux headers from the host itself and that makes this",
    "start": "1444250",
    "end": "1450070"
  },
  {
    "text": "just work really nicely I'm also mounting slash assists from the host because it's using trés which require a /this and so this",
    "start": "1450070",
    "end": "1457539"
  },
  {
    "text": "is my far the most complex of all of these sure let's get a shot",
    "start": "1457539",
    "end": "1465148"
  },
  {
    "text": "cool so the first thing we have to do here is regenerate these offsets and I'm",
    "start": "1474039",
    "end": "1479690"
  },
  {
    "text": "going to get into that because that's very specific but you have to know is the exact offset that your function call",
    "start": "1479690",
    "end": "1484820"
  },
  {
    "text": "begins in in the binary as it sits on the disk and so that can be very difficult to learn you'll find when you",
    "start": "1484820",
    "end": "1490190"
  },
  {
    "text": "start digging into it some some frameworks nicely give this to you if you run that core then awesome go to my",
    "start": "1490190",
    "end": "1495710"
  },
  {
    "text": "repo and it tells you exactly how to calculate these values and you can start tracing today these in this case",
    "start": "1495710",
    "end": "1501679"
  },
  {
    "text": "specifically we're gonna trace that one a 5o is the offset of the fibonacci the",
    "start": "1501679",
    "end": "1508190"
  },
  {
    "text": "function that calculates the Fibonacci values so we're gonna first we're gonna trace that function every time it's got called we're gonna know the endured",
    "start": "1508190",
    "end": "1513799"
  },
  {
    "text": "integer parameter that was passed in then we're gonna trace the return value so every time it's called we're gonna the integer value that was returned on",
    "start": "1513799",
    "end": "1520460"
  },
  {
    "text": "that second line and in the final tracing the final trace line is actually going to trace the the function that is",
    "start": "1520460",
    "end": "1526970"
  },
  {
    "text": "calculating the echo value so calculating the echo value is literally returning the parameters passed down but",
    "start": "1526970",
    "end": "1532400"
  },
  {
    "text": "we're gonna trace that function we're gonna see the string that comes out of it if we're looking ok so that's cool it",
    "start": "1532400",
    "end": "1546080"
  },
  {
    "text": "worked so you can see it's not responding every time so these three pods are sitting behind a cuvette service and the kubernetes service will",
    "start": "1546080",
    "end": "1552799"
  },
  {
    "text": "you know roughly load balance between the three so you should see about every you know 33% or so of these calls are",
    "start": "1552799",
    "end": "1559309"
  },
  {
    "text": "gonna actually hit this pod so on the right side as you're seeing the exercise script kind of asked for this Fibonacci",
    "start": "1559309",
    "end": "1565669"
  },
  {
    "text": "value when it happens to hit this pot of the three we are getting information about that we are able to see the",
    "start": "1565669",
    "end": "1572150"
  },
  {
    "text": "parameter that was passed the the position that was requested so cancel",
    "start": "1572150",
    "end": "1579140"
  },
  {
    "text": "that one we're gonna start the next one this one traces the return value so in this case you'll actually see it match up exactly because that's the response",
    "start": "1579140",
    "end": "1585470"
  },
  {
    "text": "from the HTTP endpoint so every time you see this one it again it's the same function being hit but this time we're",
    "start": "1585470",
    "end": "1591140"
  },
  {
    "text": "actually tracing the return value from that function dynamically and then to be clear there's no special instrumentation",
    "start": "1591140",
    "end": "1597200"
  },
  {
    "text": "on this application I didn't write any special code I just attached to a random function in the application I can do",
    "start": "1597200",
    "end": "1602360"
  },
  {
    "text": "this for any function in the application finally we're going to do strings and",
    "start": "1602360",
    "end": "1608540"
  },
  {
    "text": "this kind of shows off the power of BP F so what BP F is is a technology to write",
    "start": "1608540",
    "end": "1614030"
  },
  {
    "text": "a subset of C that is compiled to a bytecode that is run in the kernel so it",
    "start": "1614030",
    "end": "1620600"
  },
  {
    "text": "makes it very fast and it also makes it it makes it very fast and very performant but it's only a subset of C",
    "start": "1620600",
    "end": "1626840"
  },
  {
    "text": "can be kind of rough to work with sometimes in this case we're attaching it to a you probe and we are able to",
    "start": "1626840",
    "end": "1632300"
  },
  {
    "text": "take the dotnet core internal string representation which is I think is utf-16 a Mauthausen sure and then",
    "start": "1632300",
    "end": "1638840"
  },
  {
    "text": "extract that string and displayed on the console perf also supports dynamic tracing but it only does it and it",
    "start": "1638840",
    "end": "1645260"
  },
  {
    "text": "supports strings but it only supports a null terminated strings so you can't actually do this with perf which is kind",
    "start": "1645260",
    "end": "1650690"
  },
  {
    "text": "of it shows off the flexibility of BPF basically every time these functions are called I'm running a little program that",
    "start": "1650690",
    "end": "1656150"
  },
  {
    "text": "I wrote I'm telling the kernel please run this program every time as it hits and you can do all kinds of neat things with that you can calculate a histogram",
    "start": "1656150",
    "end": "1662300"
  },
  {
    "text": "you can take some internal data internal in the memory to the application and represent it in a way that makes more",
    "start": "1662300",
    "end": "1668240"
  },
  {
    "text": "sense to you outside of the application and then like I said if you get into this field or if you start doing BCC",
    "start": "1668240",
    "end": "1673790"
  },
  {
    "text": "specifically you immediately have access to just a stack of tools that exist on that repo that a BCC repo how am i doing",
    "start": "1673790",
    "end": "1684770"
  },
  {
    "text": "on time oh pretty good cool okay yeah thank you all for listening to me that",
    "start": "1684770",
    "end": "1690410"
  },
  {
    "start": "1687000",
    "end": "1917000"
  },
  {
    "text": "was cool if you have any questions let's do that part that's Gotham if you know Gotham he's really cool he works for get low",
    "start": "1690410",
    "end": "1696100"
  },
  {
    "text": "and if you don't get to your questions now please visit me at any moment at the booth I'll be over there a lot tomorrow",
    "start": "1696100",
    "end": "1702230"
  },
  {
    "text": "afternoon specifically you can ask me questions in T all right who wants",
    "start": "1702230",
    "end": "1715190"
  },
  {
    "text": "questions we has questions oh there we",
    "start": "1715190",
    "end": "1724160"
  },
  {
    "text": "go",
    "start": "1724160",
    "end": "1726220"
  },
  {
    "text": "is there any way to inject these tools into an already running pod you can but",
    "start": "1730520",
    "end": "1737060"
  },
  {
    "text": "you have to cheat and do it from docker on the on the node so docker has a specific command line parameter of it",
    "start": "1737060",
    "end": "1743600"
  },
  {
    "text": "says inject into a process namespace of an existing container so you can do it if you let yourself break the rules and",
    "start": "1743600",
    "end": "1749930"
  },
  {
    "text": "run from the node but other than that kubernetes pods are immutable and you can't although I heard somebody say that they're kind of working on something I",
    "start": "1749930",
    "end": "1755150"
  },
  {
    "text": "don't swear to that I didn't say that nevermind okay you've heard this too so",
    "start": "1755150",
    "end": "1764060"
  },
  {
    "text": "I'm not crazy awesome to follow on from",
    "start": "1764060",
    "end": "1769130"
  },
  {
    "text": "that is that thing that someone's working is that the cute cuddle debug command okay yes",
    "start": "1769130",
    "end": "1775100"
  },
  {
    "text": "I've heard it was debugging or injecting a debug container so once that exists then I think you could probably do this",
    "start": "1775100",
    "end": "1781160"
  },
  {
    "text": "dynamically inject the sidecar dynamically yes",
    "start": "1781160",
    "end": "1785320"
  },
  {
    "text": "where this model change was kubernetes 1.16 with the thermal containers so we",
    "start": "1792299",
    "end": "1797909"
  },
  {
    "text": "did use the side cast what say sorry the",
    "start": "1797909",
    "end": "1812009"
  },
  {
    "text": "container is the sidecar right okay",
    "start": "1812009",
    "end": "1816409"
  },
  {
    "text": "right I think that's what those guys are talking about I just actually heard about that yesterday so maybe I'm behind",
    "start": "1819200",
    "end": "1825059"
  },
  {
    "text": "the times on this one I'm on one 13 or 14 so yeah yeah I actually over here I",
    "start": "1825059",
    "end": "1836820"
  },
  {
    "text": "actually didn't have a question I was gonna clarify that yeah 116 is gonna be running ephemeral containers so that",
    "start": "1836820",
    "end": "1842909"
  },
  {
    "text": "means that you'll be able to launch additional stuff in is that in is that beta or alpha in 116 uh page open its",
    "start": "1842909",
    "end": "1853739"
  },
  {
    "text": "alpha okay so if you set the gate feature gay flag Thank You Josh Nord if you set the feature gate flag then you",
    "start": "1853739",
    "end": "1860009"
  },
  {
    "text": "can have access to this and then when he elevates debate it'll be general cool",
    "start": "1860009",
    "end": "1865320"
  },
  {
    "text": "thank you",
    "start": "1865320",
    "end": "1867738"
  },
  {
    "text": "you could run delve in a container if you're running go and expose expose the expose the remote port so I can't really",
    "start": "1898299",
    "end": "1905289"
  },
  {
    "text": "comment on that I've only done debt my core and go remote debugging so I'm not sure I would be my answer all right",
    "start": "1905289",
    "end": "1912700"
  },
  {
    "text": "thanks",
    "start": "1912700",
    "end": "1915059"
  }
]