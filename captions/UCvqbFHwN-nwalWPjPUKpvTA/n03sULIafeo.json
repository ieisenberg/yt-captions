[
  {
    "text": "hello everyone thank you for joining this session uh about grpc",
    "start": "0",
    "end": "7919"
  },
  {
    "text": "this is an introductory talk about grpc we do have additional presentations",
    "start": "7919",
    "end": "16160"
  },
  {
    "text": "um on various aspects of grpc through this conference and",
    "start": "16160",
    "end": "22720"
  },
  {
    "text": "i have a i have a slide with",
    "start": "22720",
    "end": "29119"
  },
  {
    "text": "a quick summary of all the other talks that are happening around grpc",
    "start": "29119",
    "end": "35600"
  },
  {
    "text": "in this talk we are going to cover um a grpc",
    "start": "36480",
    "end": "43680"
  },
  {
    "text": "as an overview i will start with a brief description of what grpc is we'll",
    "start": "43680",
    "end": "50079"
  },
  {
    "text": "do a quick um exercise of going through",
    "start": "50079",
    "end": "55920"
  },
  {
    "text": "what it takes to build a grpc service and then we'll jump into a discussion of",
    "start": "55920",
    "end": "63359"
  },
  {
    "text": "the various features that one gets while using jrpc",
    "start": "63359",
    "end": "68720"
  },
  {
    "text": "i'll wrap up the talk with a brief discussion of some new efforts that",
    "start": "68720",
    "end": "75920"
  },
  {
    "text": "the grpc project has picked up and we'll have time for q a during the",
    "start": "75920",
    "end": "83840"
  },
  {
    "text": "live session grpc is a remote procedure call system",
    "start": "83840",
    "end": "91680"
  },
  {
    "text": "remote procedure calls were invented a long time ago for",
    "start": "91680",
    "end": "98479"
  },
  {
    "text": "flight to server communication the idea was to provide a function call or a",
    "start": "98479",
    "end": "105040"
  },
  {
    "text": "procedure called abstraction to the developer while abstracting away",
    "start": "105040",
    "end": "110720"
  },
  {
    "text": "the fact that the implementation of the function or the procedure is remote from where the call side for",
    "start": "110720",
    "end": "119200"
  },
  {
    "text": "that function is this provides a very powerful abstraction because as a programmer",
    "start": "119200",
    "end": "126560"
  },
  {
    "text": "the fact that the function is implemented in a completely different",
    "start": "126560",
    "end": "132560"
  },
  {
    "text": "entity that's remote and accessed over the network is fully hidden away and the programmer does not",
    "start": "132560",
    "end": "139120"
  },
  {
    "text": "have to deal with all of the details of networking to reach that server",
    "start": "139120",
    "end": "144319"
  },
  {
    "text": "when they are thinking about how to compose their system grpc was built",
    "start": "144319",
    "end": "152480"
  },
  {
    "text": "by the team that has been building remote procedure call systems at google",
    "start": "152480",
    "end": "159120"
  },
  {
    "text": "for quite a bit of time now the microservice architecture has been",
    "start": "159120",
    "end": "167200"
  },
  {
    "text": "the preferred way of building services at google for many many years and the rpc system at google called",
    "start": "167200",
    "end": "174560"
  },
  {
    "text": "stubby has been running at a pretty substantial scale",
    "start": "174560",
    "end": "179920"
  },
  {
    "text": "mgrpc has benefited from everything that we have learned while",
    "start": "179920",
    "end": "185200"
  },
  {
    "text": "building and operating stubby over the years",
    "start": "185200",
    "end": "189840"
  },
  {
    "text": "i'll now briefly cover um the process of building an rpc service",
    "start": "191280",
    "end": "199599"
  },
  {
    "text": "when you're building a grpc service you typically start out by defining your service in an interface",
    "start": "199599",
    "end": "207040"
  },
  {
    "text": "definition language um we support protocol buffers as the",
    "start": "207040",
    "end": "213200"
  },
  {
    "text": "um as a standard out of the box solution but other um others",
    "start": "213200",
    "end": "220080"
  },
  {
    "text": "competing technologies are also supported given a definition of your service and",
    "start": "220080",
    "end": "225920"
  },
  {
    "text": "i'll go into this in some more detail um one generates the client and server side stubs",
    "start": "225920",
    "end": "231440"
  },
  {
    "text": "um and then goes and actually implements the server side logic um if they're building a service and",
    "start": "231440",
    "end": "238159"
  },
  {
    "text": "invoke the client-side stubs if they're just brilliant client to that service",
    "start": "238159",
    "end": "243680"
  },
  {
    "text": "so let's go into this in a little more detail protocol buffers were developed at",
    "start": "243680",
    "end": "249120"
  },
  {
    "text": "google and open sourced several years ago and they provide",
    "start": "249120",
    "end": "254159"
  },
  {
    "text": "three important features first they provide a language",
    "start": "254159",
    "end": "262079"
  },
  {
    "text": "for defining and describing the data model and the interfaces second they provide a",
    "start": "262079",
    "end": "269840"
  },
  {
    "text": "way to serialize the data that's sent across the wire",
    "start": "269840",
    "end": "275520"
  },
  {
    "text": "and third they provide the interfaces of bindings across different languages",
    "start": "275520",
    "end": "283680"
  },
  {
    "text": "um there are other computing technologies such as black buffers and bond from microsoft which can also",
    "start": "283680",
    "end": "290160"
  },
  {
    "text": "be used to provide similar functionality",
    "start": "290160",
    "end": "294400"
  },
  {
    "text": "so um defining the data model and the interfaces this",
    "start": "295199",
    "end": "301680"
  },
  {
    "text": "um so the data model definition just looks like um",
    "start": "301680",
    "end": "308080"
  },
  {
    "text": "you know a struct or an equivalent thing in whatever programming language you use",
    "start": "308080",
    "end": "313360"
  },
  {
    "text": "um it allows you to very precisely capture exactly um the",
    "start": "313360",
    "end": "320080"
  },
  {
    "text": "different excuse me um very precisely capture the types of the",
    "start": "320080",
    "end": "326639"
  },
  {
    "text": "information that's going to be sent back and forth um the service definition which is the",
    "start": "326639",
    "end": "333280"
  },
  {
    "text": "operations um or proceed or function calls that are being implemented",
    "start": "333280",
    "end": "338800"
  },
  {
    "text": "can also be defined in the proto language in a in a manner that's agnostic to the",
    "start": "338800",
    "end": "345440"
  },
  {
    "text": "actual target language in which you're going to implement or call these functions from",
    "start": "345440",
    "end": "351759"
  },
  {
    "text": "now grpc does provide different streaming types in addition to unity rpcs and we'll talk about uh streaming in",
    "start": "351759",
    "end": "359199"
  },
  {
    "text": "more detail in a forthcoming slide once the interfaces have been defined in",
    "start": "359199",
    "end": "365680"
  },
  {
    "text": "the proto language code generators are provided to convert the to go from this protofile to the",
    "start": "365680",
    "end": "374160"
  },
  {
    "text": "idiomatic function called",
    "start": "374160",
    "end": "378240"
  },
  {
    "text": "signatures in the language of choice um these signatures tend to be idiomatic",
    "start": "379199",
    "end": "385680"
  },
  {
    "text": "for the target language and allows the programmer to take over from there",
    "start": "385680",
    "end": "391120"
  },
  {
    "text": "and either implement the service or call into the service as they might desire",
    "start": "391120",
    "end": "397680"
  },
  {
    "text": "here's a quick example so given the given the methods that we listed in the",
    "start": "397680",
    "end": "404639"
  },
  {
    "text": "previous slide this slide shows the generated",
    "start": "404639",
    "end": "409680"
  },
  {
    "text": "code on top you have the client side signature for the stub functions that the client calls",
    "start": "409680",
    "end": "416080"
  },
  {
    "text": "and at the bottom you have the server side signature of the um service methods that the programmer",
    "start": "416080",
    "end": "422960"
  },
  {
    "text": "for the server side implements and that's the implementation that gets him invoked by grpc when a request from a",
    "start": "422960",
    "end": "430240"
  },
  {
    "text": "client arrives um so at this point the programmer takes over the server side programmer would",
    "start": "430240",
    "end": "435440"
  },
  {
    "text": "write the code to implement the service on the server side and the client side programmer would",
    "start": "435440",
    "end": "440639"
  },
  {
    "text": "write the stub code the code for invoking the stubs or invoking the rpc methods on the stubs",
    "start": "440639",
    "end": "448319"
  },
  {
    "text": "to get the standard procedure call experience",
    "start": "448319",
    "end": "454800"
  },
  {
    "text": "so in summary um you start with an interface definition language to",
    "start": "455199",
    "end": "460319"
  },
  {
    "text": "describe the api the parameters and the return values you run code generators that generate",
    "start": "460319",
    "end": "467759"
  },
  {
    "text": "client and server side stubs and then you",
    "start": "467759",
    "end": "472960"
  },
  {
    "text": "use depending on whether you're building the client or the server or both you use those tabs to build up your",
    "start": "472960",
    "end": "479840"
  },
  {
    "text": "application under the hood this is all taking and there's a lot of detail in the",
    "start": "479840",
    "end": "486080"
  },
  {
    "text": "implementation that we'll go over in the next few slides but it takes advantage of a bunch of http 2 features",
    "start": "486080",
    "end": "492960"
  },
  {
    "text": "and provides a bunch of additional functionality all of the code is in open source on",
    "start": "492960",
    "end": "498479"
  },
  {
    "text": "github um in fact all of our development happens github first um and the team at google does import it",
    "start": "498479",
    "end": "506479"
  },
  {
    "text": "on a daily basis into google's internal code base where it's used extensively but all of",
    "start": "506479",
    "end": "512399"
  },
  {
    "text": "the development code reviews proposals and testing is visible",
    "start": "512399",
    "end": "519039"
  },
  {
    "text": "to everybody by our github site",
    "start": "519039",
    "end": "524000"
  },
  {
    "text": "i'll now switch into a discussion of the various features that one gets out of",
    "start": "524720",
    "end": "530560"
  },
  {
    "text": "grpc and this ends up being the core sort of set of reasons why",
    "start": "530560",
    "end": "538560"
  },
  {
    "text": "anyone would adopt grpc so let's start with the fact that grpc is available in",
    "start": "538560",
    "end": "545040"
  },
  {
    "text": "many many languages um as you can see there's a long list of languages where grpc",
    "start": "545040",
    "end": "551680"
  },
  {
    "text": "server and client libraries are available this is very powerful because it allows",
    "start": "551680",
    "end": "559200"
  },
  {
    "text": "people to use the right language for the task at hand without worrying about",
    "start": "559200",
    "end": "566080"
  },
  {
    "text": "the language being used by someone else that they need to interface with so you might have a android client",
    "start": "566080",
    "end": "573360"
  },
  {
    "text": "using grpc java for android calling into a grpc service that's",
    "start": "573360",
    "end": "578640"
  },
  {
    "text": "implemented in java or go or python and these two these two groups can",
    "start": "578640",
    "end": "585279"
  },
  {
    "text": "be relatively independent from each other except for the service definition that they both need to agree on um",
    "start": "585279",
    "end": "593839"
  },
  {
    "text": "in addition to languages grpc is also available on many different platforms um",
    "start": "593839",
    "end": "600399"
  },
  {
    "text": "we are of course heavily used on linux grpc is also available and widely used",
    "start": "600399",
    "end": "606959"
  },
  {
    "text": "on windows and mac os in addition to both ios and android as mobile platforms",
    "start": "606959",
    "end": "614320"
  },
  {
    "text": "and bindings for using grpc are also available from",
    "start": "614320",
    "end": "621519"
  },
  {
    "text": "different stacks that are popular across the",
    "start": "621519",
    "end": "628320"
  },
  {
    "text": "across the community we talked about protocol buffers and the",
    "start": "628320",
    "end": "636240"
  },
  {
    "text": "what we really get out of protocol buffers is a very clean um",
    "start": "636240",
    "end": "643040"
  },
  {
    "text": "mechanism for defining the contract or the interface between different components of a",
    "start": "643040",
    "end": "648720"
  },
  {
    "text": "distributed system and this notion of having a strongly",
    "start": "648720",
    "end": "653839"
  },
  {
    "text": "typed contract is quite powerful because it allows",
    "start": "653839",
    "end": "658880"
  },
  {
    "text": "for a lot of the addition a lot of the development work to be decoupled on the",
    "start": "658880",
    "end": "664000"
  },
  {
    "text": "two sides um there are conventions available for both backward and forward compatibility",
    "start": "664000",
    "end": "670399"
  },
  {
    "text": "of these apis so one does not necessarily get fixed into one particular version of the",
    "start": "670399",
    "end": "677440"
  },
  {
    "text": "contract that they specified at a point in time um now i will point out here",
    "start": "677440",
    "end": "683680"
  },
  {
    "text": "that uh conventions for doing things like semantic",
    "start": "683680",
    "end": "689360"
  },
  {
    "text": "versioning or rest or crud can all be implemented on top of",
    "start": "689360",
    "end": "695279"
  },
  {
    "text": "this these interface definition languages like protocol buffers and they are in a way complementary",
    "start": "695279",
    "end": "702240"
  },
  {
    "text": "instead of being mutually exclusive so if if someone wants to use rest they can absolutely go",
    "start": "702240",
    "end": "708160"
  },
  {
    "text": "and and enforce their rest conventions on top of the protocol buffer language",
    "start": "708160",
    "end": "714320"
  },
  {
    "text": "and get a restful api which happens to be specified using protocol buffers",
    "start": "714320",
    "end": "721920"
  },
  {
    "text": "performance and efficiency has been one of the core focuses of grpc um http 2 itself was designed for higher",
    "start": "722880",
    "end": "731120"
  },
  {
    "text": "performance and this starts becoming more and more critical as you go",
    "start": "731120",
    "end": "736160"
  },
  {
    "text": "to service to service communication where you typically want to reuse the",
    "start": "736160",
    "end": "744399"
  },
  {
    "text": "connections and really leverage all redundancy in the communication to try",
    "start": "744399",
    "end": "752000"
  },
  {
    "text": "to be very efficient and fast and this is where grpc really shines and you would",
    "start": "752000",
    "end": "758160"
  },
  {
    "text": "see or you should expect to see a significant amount of improvement over you know just opening",
    "start": "758160",
    "end": "765920"
  },
  {
    "text": "an entire tcp connection to do a small number of requests or just one request",
    "start": "765920",
    "end": "773440"
  },
  {
    "text": "the grpc libraries were designed to be extensible um there's a lot of",
    "start": "773440",
    "end": "780240"
  },
  {
    "text": "functionality that is provided out of the box um if you take the example of authentication mechanisms",
    "start": "780240",
    "end": "786880"
  },
  {
    "text": "or monitoring solutions but there are there are additional extension and",
    "start": "786880",
    "end": "792720"
  },
  {
    "text": "customization points um depending on the language we typically have",
    "start": "792720",
    "end": "798560"
  },
  {
    "text": "a facility for interceptors additional facilities for plugging in custom transports and these allow",
    "start": "798560",
    "end": "808000"
  },
  {
    "text": "various users in the community to to plug in their own solution their own preferred solution",
    "start": "808000",
    "end": "813680"
  },
  {
    "text": "for all kinds of features and you have a bunch of them listed on this slide",
    "start": "813680",
    "end": "820560"
  },
  {
    "text": "finally ease of use is something that has been a priority for the uh",
    "start": "823600",
    "end": "830720"
  },
  {
    "text": "community working around grpc um early in the project there was a lot of",
    "start": "830720",
    "end": "836000"
  },
  {
    "text": "emphasis on improving the installation experience and we",
    "start": "836000",
    "end": "841040"
  },
  {
    "text": "do a lot of work to make sure that there's a single line installation available",
    "start": "841040",
    "end": "846399"
  },
  {
    "text": "in in several languages that um where your pc is used heavily um the apis have again been",
    "start": "846399",
    "end": "854000"
  },
  {
    "text": "designed to be idiomatic for the target language and we continue to explore",
    "start": "854000",
    "end": "859920"
  },
  {
    "text": "api paradigms as languages evolve and come up with new idioms for",
    "start": "859920",
    "end": "868639"
  },
  {
    "text": "expressing asynchronous functionality there are facilities for propagation of",
    "start": "868639",
    "end": "875600"
  },
  {
    "text": "errors for propagation of cancellation and deadline and",
    "start": "875600",
    "end": "880800"
  },
  {
    "text": "connection management like i mentioned the intent here is to try to isolate the",
    "start": "880800",
    "end": "888320"
  },
  {
    "text": "programmer from the details of everything that could possibly go wrong on the network um",
    "start": "888320",
    "end": "894399"
  },
  {
    "text": "so a grpc channel will for example reconnect automatically when the underlying connection breaks",
    "start": "894399",
    "end": "901120"
  },
  {
    "text": "and you know will also provide all kinds of load balancing and other",
    "start": "901120",
    "end": "906720"
  },
  {
    "text": "functionality which is relatively transparent to the user and allows the programmer to focus just",
    "start": "906720",
    "end": "913519"
  },
  {
    "text": "on the higher level logic of their distributed system",
    "start": "913519",
    "end": "918399"
  },
  {
    "text": "i'll now talk briefly about streaming most rpc systems start",
    "start": "918639",
    "end": "926079"
  },
  {
    "text": "out supporting a unary rpc which is a single request sent from the client to the server and a single response message coming",
    "start": "926079",
    "end": "932639"
  },
  {
    "text": "back um however in the evolution of",
    "start": "932639",
    "end": "937839"
  },
  {
    "text": "grpc's predecessors at google we noticed that we found ourselves adding",
    "start": "937839",
    "end": "944240"
  },
  {
    "text": "on support for streaming first in the server to client direction and then eventually in the client to",
    "start": "944240",
    "end": "950320"
  },
  {
    "text": "server direction as well um and streaming ends up being very",
    "start": "950320",
    "end": "955680"
  },
  {
    "text": "useful in a variety of situations if you imagine um anywhere where you're either cutting",
    "start": "955680",
    "end": "960880"
  },
  {
    "text": "up large objects into smaller chunks and sending them over or you have a real time long",
    "start": "960880",
    "end": "968800"
  },
  {
    "text": "drawn out interaction like a chat session where a client where one side might send a message wait",
    "start": "968800",
    "end": "975839"
  },
  {
    "text": "for the other side to respond and continue sending additional messages the ability to express",
    "start": "975839",
    "end": "981199"
  },
  {
    "text": "all of this using a single long-lived rpc call is does end up being quite",
    "start": "981199",
    "end": "987440"
  },
  {
    "text": "powerful jrpc was designed from the ground sub",
    "start": "987440",
    "end": "993360"
  },
  {
    "text": "to support streaming rpcs under the hood we just implement a bi-directional",
    "start": "993360",
    "end": "998720"
  },
  {
    "text": "streaming rpc wire protocol and all the different variations that you see listed on top of this slide",
    "start": "998720",
    "end": "1005360"
  },
  {
    "text": "are actually implemented as special cases of that bi-directional stream and for that reason grpc does really",
    "start": "1005360",
    "end": "1011600"
  },
  {
    "text": "shine when you get various streaming use cases which do end up appearing as you get",
    "start": "1011600",
    "end": "1019680"
  },
  {
    "text": "towards the more sophisticated ends of distributed system design",
    "start": "1019680",
    "end": "1025839"
  },
  {
    "text": "as mentioned before all of the development happens on github grpc has been in cncf for over",
    "start": "1027120",
    "end": "1034240"
  },
  {
    "text": "three years now um and um all design changes go through an rfc-like",
    "start": "1034240",
    "end": "1041438"
  },
  {
    "text": "process being standards-based has been very powerful for grpc it has allowed",
    "start": "1041439",
    "end": "1048558"
  },
  {
    "text": "um for example the ability to interoperate across proxies and firewalls",
    "start": "1048559",
    "end": "1055120"
  },
  {
    "text": "built by different vendors without any explicit action on the part of the",
    "start": "1055120",
    "end": "1062000"
  },
  {
    "text": "development team working on grpc it also allows for deployment in all",
    "start": "1062000",
    "end": "1067679"
  },
  {
    "text": "kinds of diverse environments",
    "start": "1067679",
    "end": "1071200"
  },
  {
    "text": "and a brief note about production readiness grpc is well tested um",
    "start": "1072960",
    "end": "1080240"
  },
  {
    "text": "there's a very large suite of tests that are run um and are visible um through",
    "start": "1080240",
    "end": "1088640"
  },
  {
    "text": "our github site um there is a well-defined suite of interop",
    "start": "1088640",
    "end": "1095200"
  },
  {
    "text": "tests that test for cross language interoperability and also serve as the standard",
    "start": "1095200",
    "end": "1103600"
  },
  {
    "text": "for for feature completeness of any new grpc",
    "start": "1103600",
    "end": "1110080"
  },
  {
    "text": "implementation in a new language um there's a lot of support for",
    "start": "1110080",
    "end": "1115600"
  },
  {
    "text": "operational aspects of getting something into production um such as stats tracing monitoring",
    "start": "1115600",
    "end": "1123360"
  },
  {
    "text": "we have a feature called channel z which for example allows you to request details of",
    "start": "1123360",
    "end": "1130160"
  },
  {
    "text": "live connections and get all kinds of detailed information about how much data has been sent back and forth what kind",
    "start": "1130160",
    "end": "1136799"
  },
  {
    "text": "of compression um benefits are being realized and so on and these",
    "start": "1136799",
    "end": "1144000"
  },
  {
    "text": "things allow very um very powerful monitoring of life",
    "start": "1144000",
    "end": "1149280"
  },
  {
    "text": "systems as well as good details when one needs to debug or optimize their system",
    "start": "1149280",
    "end": "1157520"
  },
  {
    "text": "all of this has resulted in very good adoption and today grpc is used heavily across",
    "start": "1157520",
    "end": "1164720"
  },
  {
    "text": "the industry by a number of organizations large and small and all kinds of teams",
    "start": "1164720",
    "end": "1173679"
  },
  {
    "text": "trying to build distributed systems is just a summary of um what we talked",
    "start": "1173679",
    "end": "1181280"
  },
  {
    "text": "about in terms of features um again you know there's a lot of emphasis on",
    "start": "1181280",
    "end": "1188480"
  },
  {
    "text": "being available everywhere being able to provide the right",
    "start": "1188480",
    "end": "1193919"
  },
  {
    "text": "extensibility while paying attention to ease of use",
    "start": "1193919",
    "end": "1199360"
  },
  {
    "text": "streaming support and standards compliance is there performance and efficiency is something",
    "start": "1199360",
    "end": "1205200"
  },
  {
    "text": "we care about deeply and we do have a lot of detailed performance tests um again available through",
    "start": "1205200",
    "end": "1212720"
  },
  {
    "text": "our github site as well and um it's been ga for a while",
    "start": "1212720",
    "end": "1221360"
  },
  {
    "text": "um and it's used heavily in production by a number of partners",
    "start": "1221360",
    "end": "1228240"
  },
  {
    "text": "before we wrap up i wanted to talk briefly about new features that are coming out",
    "start": "1228720",
    "end": "1235440"
  },
  {
    "text": "in grpc and this might be interesting for those of those in the community that would",
    "start": "1235440",
    "end": "1240559"
  },
  {
    "text": "like to start contributing um to the grpc project as",
    "start": "1240559",
    "end": "1245679"
  },
  {
    "text": "developers um service mesh is the idea of having",
    "start": "1245679",
    "end": "1253520"
  },
  {
    "text": "a control plane that orchestrates service to service communication",
    "start": "1253520",
    "end": "1258799"
  },
  {
    "text": "between microservices or services in",
    "start": "1258799",
    "end": "1263840"
  },
  {
    "text": "deployment environments um maybe public clouds maybe private clouds maybe",
    "start": "1263919",
    "end": "1269039"
  },
  {
    "text": "some sort of an on-prem deployment and in these service mesh scenarios it's",
    "start": "1269039",
    "end": "1275679"
  },
  {
    "text": "quite powerful to have a control plane that that sits on the side",
    "start": "1275679",
    "end": "1282880"
  },
  {
    "text": "and is able to orchestrate the flow of traffic and the flow of policies that are",
    "start": "1282880",
    "end": "1289280"
  },
  {
    "text": "required to get that traffic going between a client service shown as service a here",
    "start": "1289280",
    "end": "1295200"
  },
  {
    "text": "and the service b which is the what the client service is trying to speak with",
    "start": "1295200",
    "end": "1300480"
  },
  {
    "text": "um we have chosen to go",
    "start": "1300480",
    "end": "1305520"
  },
  {
    "text": "with um the envoy um apis these are called",
    "start": "1305520",
    "end": "1312400"
  },
  {
    "text": "xds apis um x is for the different variations",
    "start": "1312400",
    "end": "1319919"
  },
  {
    "text": "of discovery services there's a listener discovery service a lot of discovery service uh cluster discovery service and so on",
    "start": "1319919",
    "end": "1327200"
  },
  {
    "text": "so these xts apis have been defined in the onboard project and are typically used by the onboard",
    "start": "1327200",
    "end": "1335679"
  },
  {
    "text": "proxy when speaking with a control plane such as sto to try to orchestrate the communication",
    "start": "1335679",
    "end": "1342960"
  },
  {
    "text": "across the service mesh grpc has adopted the same xts apis so in principle the same",
    "start": "1342960",
    "end": "1350559"
  },
  {
    "text": "control plane that was orchestrating communication between um applications",
    "start": "1350559",
    "end": "1357840"
  },
  {
    "text": "that were sitting right next to on voice side cars that same control plane can now",
    "start": "1357840",
    "end": "1363600"
  },
  {
    "text": "orchestrate communication between grpc clients and servers or a",
    "start": "1363600",
    "end": "1369120"
  },
  {
    "text": "hybrid scenario where one end point is using an on voice sidecar and the other end point is a straight-up",
    "start": "1369120",
    "end": "1375840"
  },
  {
    "text": "grpc application without an on voice sidecar proxy um",
    "start": "1375840",
    "end": "1381120"
  },
  {
    "text": "the xts support has been released in jrpc 1.1.30 um with the",
    "start": "1381120",
    "end": "1388640"
  },
  {
    "text": "client set support for the listed xts protocols and load reporting via",
    "start": "1388640",
    "end": "1395039"
  },
  {
    "text": "lrs there there is additional work ongoing and the team is",
    "start": "1395039",
    "end": "1401840"
  },
  {
    "text": "continuing to look at more and more of these service mesh features",
    "start": "1401840",
    "end": "1407200"
  },
  {
    "text": "in the xts apis with the intention of providing a more first-class experience for grpc",
    "start": "1407200",
    "end": "1414320"
  },
  {
    "text": "developers when work when building for a service mesh type deployment",
    "start": "1414320",
    "end": "1420400"
  },
  {
    "text": "with that i'll wrap up the prepared version of this talk",
    "start": "1420400",
    "end": "1425440"
  },
  {
    "text": "um and we do have some time for q a and i would welcome any comments or",
    "start": "1425440",
    "end": "1432799"
  },
  {
    "text": "remarks and questions that the audience might have thank you",
    "start": "1432799",
    "end": "1445840"
  },
  {
    "text": "hello everyone this is abhishek kumar i do have um live questions in front of",
    "start": "1448240",
    "end": "1456159"
  },
  {
    "text": "me um i'm going to start going through them one by one",
    "start": "1456159",
    "end": "1461679"
  },
  {
    "text": "and i'll read out the question before answering them i will try to announce the",
    "start": "1461679",
    "end": "1468799"
  },
  {
    "text": "to read out the name of the person who has the question and i apologize in advance for mispronouncing any names um",
    "start": "1468799",
    "end": "1477039"
  },
  {
    "text": "so we have a question from canberra koch when you suggest to you when would you",
    "start": "1477039",
    "end": "1482720"
  },
  {
    "text": "suggest to use rest instead of grpc is there any specific use cases where rest has advantages over grpc",
    "start": "1482720",
    "end": "1490400"
  },
  {
    "text": "so we touched on this briefly in the talk",
    "start": "1490400",
    "end": "1495039"
  },
  {
    "text": "grpc is a generic mechanism for rpcs",
    "start": "1496240",
    "end": "1503440"
  },
  {
    "text": "it doesn't take a stance on exactly what conventions an application",
    "start": "1503440",
    "end": "1508799"
  },
  {
    "text": "developer should use and rest is a set of conventions",
    "start": "1508799",
    "end": "1514080"
  },
  {
    "text": "that have been shown over time to hold some value in terms of being able to develop and build",
    "start": "1514080",
    "end": "1522720"
  },
  {
    "text": "application apis and grpc supports rest just fine so if",
    "start": "1522720",
    "end": "1528880"
  },
  {
    "text": "if someone wants to use the rest conventions they can absolutely express those",
    "start": "1528880",
    "end": "1534880"
  },
  {
    "text": "conventions while using grpc as the underlying mechanism for making the actual calls which you",
    "start": "1534880",
    "end": "1542640"
  },
  {
    "text": "would have in a rest api so the rest conventions the rest philosophy is not something",
    "start": "1542640",
    "end": "1548799"
  },
  {
    "text": "that is somehow in opposition to jrpc jrpc is just a mechanism to go build",
    "start": "1548799",
    "end": "1554159"
  },
  {
    "text": "your apis and if you want to follow rest convention front top you should be able to",
    "start": "1554159",
    "end": "1560400"
  },
  {
    "text": "i'll move on to the next question from bostian heilman is grpc well suited for long",
    "start": "1561840",
    "end": "1568480"
  },
  {
    "text": "running requests like three hours um the answer would be",
    "start": "1568480",
    "end": "1573520"
  },
  {
    "text": "yes but it depends on what kind of network connectivity",
    "start": "1573520",
    "end": "1579039"
  },
  {
    "text": "the client and server have so in a typical",
    "start": "1579039",
    "end": "1585679"
  },
  {
    "text": "cluster environment where the client and server are co-located and you expect tcp connections between",
    "start": "1585679",
    "end": "1592159"
  },
  {
    "text": "them to survive for three hours or three days having long-lived rpc sessions",
    "start": "1592159",
    "end": "1597600"
  },
  {
    "text": "is just fine and we do see many cases where people have very",
    "start": "1597600",
    "end": "1603919"
  },
  {
    "text": "long-lived hanging get type semantics for their rpcs where they'll make a request",
    "start": "1603919",
    "end": "1610000"
  },
  {
    "text": "and either subscribe to notifications or watch for something to change and these rpcs will be very very",
    "start": "1610000",
    "end": "1615520"
  },
  {
    "text": "long-lived um so three hours or 12 hours should be just fine uh ultimately",
    "start": "1615520",
    "end": "1621440"
  },
  {
    "text": "you just have to think if i had a tcp connection between this client and server how long will it survive if you are",
    "start": "1621440",
    "end": "1626960"
  },
  {
    "text": "going across the internet it's unlikely that it will survive for longer than a day if it's within the same data center you",
    "start": "1626960",
    "end": "1633600"
  },
  {
    "text": "might have much better control and they might survive for much longer",
    "start": "1633600",
    "end": "1638559"
  },
  {
    "text": "moving on the next question is from why kaslav kobach",
    "start": "1639360",
    "end": "1646640"
  },
  {
    "text": "is there an out of the box possibility to send push notifications from server to client",
    "start": "1646640",
    "end": "1653520"
  },
  {
    "text": "so grpc does not support push notifications per se",
    "start": "1653520",
    "end": "1660640"
  },
  {
    "text": "what it supports is the ability for a client to make a request",
    "start": "1660640",
    "end": "1666159"
  },
  {
    "text": "and watch for a notif uh make a watch style rpc so the watch style is where the client",
    "start": "1666159",
    "end": "1671760"
  },
  {
    "text": "says hey i'm interested in any changes to this resource please send me a notification message",
    "start": "1671760",
    "end": "1680840"
  },
  {
    "text": "when uh something changes and the server might just might acknowledge that",
    "start": "1680840",
    "end": "1686720"
  },
  {
    "text": "request by saying yes i got your request and many hours later it might send back a",
    "start": "1686720",
    "end": "1692640"
  },
  {
    "text": "message saying hey something changed here is the new change state so in that sense that's the typical",
    "start": "1692640",
    "end": "1699679"
  },
  {
    "text": "convention one would use to implement notifications in a",
    "start": "1699679",
    "end": "1704960"
  },
  {
    "text": "in a grpc application",
    "start": "1704960",
    "end": "1711679"
  },
  {
    "text": "the next question is from namit kumar can we reap the advantages of grpc even",
    "start": "1711679",
    "end": "1718399"
  },
  {
    "text": "on http 1.1 the answer is slightly involved",
    "start": "1718399",
    "end": "1725200"
  },
  {
    "text": "grpc does support something called grpc web where the clients can be http 1.1",
    "start": "1725200",
    "end": "1732960"
  },
  {
    "text": "and as long as we have the capability of translating from http 1.1 to grpc",
    "start": "1732960",
    "end": "1740159"
  },
  {
    "text": "somewhere between the client and the server either in a proxy and there are some open source proxies like the",
    "start": "1740159",
    "end": "1745360"
  },
  {
    "text": "onboard proxy that support this kind of translation or in the server application itself to",
    "start": "1745360",
    "end": "1750799"
  },
  {
    "text": "terminate the http session and up translate the request to grpc",
    "start": "1750799",
    "end": "1756080"
  },
  {
    "text": "then you can we can have interoperability between an http client and a grpc server however",
    "start": "1756080",
    "end": "1764000"
  },
  {
    "text": "um some of the things um that are available to a plain grpc client for example",
    "start": "1764000",
    "end": "1772559"
  },
  {
    "text": "uh streaming bi-directional streaming of messages um http 2 flow control",
    "start": "1772559",
    "end": "1780240"
  },
  {
    "text": "um http 2 multiplexing of multiple requests on top of the same",
    "start": "1780240",
    "end": "1785279"
  },
  {
    "text": "http 2 session um these things would not be available in a world where we were",
    "start": "1785279",
    "end": "1790320"
  },
  {
    "text": "talking about interoperability from an http client so yes we can interoperate",
    "start": "1790320",
    "end": "1797279"
  },
  {
    "text": "but you don't get all the features",
    "start": "1797279",
    "end": "1801360"
  },
  {
    "text": "i'll move to the next question from zoltan lophos kiss can grpc calls embed oauth 2 or",
    "start": "1803200",
    "end": "1810720"
  },
  {
    "text": "jw2 tokens and can the generated servers validate those",
    "start": "1810720",
    "end": "1818000"
  },
  {
    "text": "again the answer here is yes grpc has a facility to",
    "start": "1818640",
    "end": "1826158"
  },
  {
    "text": "to transmit something called metadata from client to server and back in the direction of server deployment and",
    "start": "1826559",
    "end": "1834960"
  },
  {
    "text": "the metadata are transmitted as http 2 headers and effectively the application",
    "start": "1834960",
    "end": "1841279"
  },
  {
    "text": "developer has full control on what that metadata is and in fact the standard grpc",
    "start": "1841279",
    "end": "1848240"
  },
  {
    "text": "library is typically shipped with or2 support where on the client side you can attach",
    "start": "1848240",
    "end": "1853679"
  },
  {
    "text": "you can use an over 2 credential type if you use appropriate credential type it it already knows how to attach the",
    "start": "1853679",
    "end": "1860320"
  },
  {
    "text": "right metadata on the server side there's again the",
    "start": "1860320",
    "end": "1866000"
  },
  {
    "text": "facility is available to pull the metadata out from the incoming rpc",
    "start": "1866000",
    "end": "1871679"
  },
  {
    "text": "um the actual validation logic would have to be provided elsewhere grpc would not provide the validation logic on the",
    "start": "1871679",
    "end": "1878240"
  },
  {
    "text": "server side but the facility to expose the oauth to a job token to the",
    "start": "1878240",
    "end": "1883919"
  },
  {
    "text": "application is there and the application can then turn around and use a use an appropriate",
    "start": "1883919",
    "end": "1890080"
  },
  {
    "text": "validation library too to perform the validation",
    "start": "1890080",
    "end": "1895039"
  },
  {
    "text": "next we have a question from leonard olsen does grpc support client-initiated",
    "start": "1898320",
    "end": "1905440"
  },
  {
    "text": "communication yes it does in fact because",
    "start": "1905440",
    "end": "1910640"
  },
  {
    "text": "it's a client server rpc protocol all communication both in terms of",
    "start": "1910640",
    "end": "1917039"
  },
  {
    "text": "initial connection and individual rpcs have to be initiated",
    "start": "1917039",
    "end": "1922159"
  },
  {
    "text": "by the client the server cannot choose unilaterally to initiate a new rpc or a new connection",
    "start": "1922159",
    "end": "1929840"
  },
  {
    "text": "to a client the client is the one that's in charge the client is the one that makes the initial request the server can",
    "start": "1929840",
    "end": "1936960"
  },
  {
    "text": "then respond and depending on the protocol um you can have um you know rpcs where",
    "start": "1936960",
    "end": "1943440"
  },
  {
    "text": "the client says a little bit in the beginning and the server says a lot over you know a long period of time but it's",
    "start": "1943440",
    "end": "1950559"
  },
  {
    "text": "always client initiated",
    "start": "1950559",
    "end": "1953840"
  },
  {
    "text": "next question is again from leonard olsen do you suggest grpc can fit into an event",
    "start": "1956559",
    "end": "1963039"
  },
  {
    "text": "driven architecture yes event driven works",
    "start": "1963039",
    "end": "1969279"
  },
  {
    "text": "fine with grpc in fact most or i would say many implementations",
    "start": "1969279",
    "end": "1976480"
  },
  {
    "text": "of grpc in languages such as c plus plus java are",
    "start": "1976480",
    "end": "1982159"
  },
  {
    "text": "um are sort of asynchronous by design um",
    "start": "1982159",
    "end": "1989840"
  },
  {
    "text": "as long as um you know the application developer has chosen",
    "start": "1989840",
    "end": "1995760"
  },
  {
    "text": "this particular architectural paradigm there's nothing in the corresponding grpc library that would",
    "start": "1995760",
    "end": "2001840"
  },
  {
    "text": "stop them from doing it all you need to do is for your language of choice you need to look at the grpc apis and see if",
    "start": "2001840",
    "end": "2008640"
  },
  {
    "text": "if they are well suited for the type of event driven",
    "start": "2008640",
    "end": "2014640"
  },
  {
    "text": "architecture you want in your target language but in most languages where people tend to build",
    "start": "2014640",
    "end": "2020399"
  },
  {
    "text": "event driven systems grpc will have asynchronous api that will fit well",
    "start": "2020399",
    "end": "2026240"
  },
  {
    "text": "the next question is from frank herman is jrpc a good choice to send audio or files to",
    "start": "2028320",
    "end": "2036000"
  },
  {
    "text": "the back end yes the answer is grpc",
    "start": "2036000",
    "end": "2041279"
  },
  {
    "text": "works just fine for sending binary audio or other files",
    "start": "2041279",
    "end": "2048079"
  },
  {
    "text": "um the idea would be that you know your rpc request would have a",
    "start": "2048079",
    "end": "2055679"
  },
  {
    "text": "binary type uh in protocol buffers that's you know field named bytes and your",
    "start": "2055679",
    "end": "2061200"
  },
  {
    "text": "bytes can be any type of data whether it's audio or other files",
    "start": "2061200",
    "end": "2067358"
  },
  {
    "text": "uh the rest of the grpc stack is not going to look into those bytes i'm not going to try to interpret them it's just",
    "start": "2067359",
    "end": "2074000"
  },
  {
    "text": "going to copy them and transport them over and deliver to the peer on the other side so this is a pretty common use case and",
    "start": "2074000",
    "end": "2081919"
  },
  {
    "text": "if you look at the type of services that people are building there are many file oriented um",
    "start": "2081919",
    "end": "2090398"
  },
  {
    "text": "services storage services that have been built using grpc um and there's many",
    "start": "2090399",
    "end": "2096878"
  },
  {
    "text": "there are many live audio and video services being implemented over grpc so it's absolutely",
    "start": "2096879",
    "end": "2102960"
  },
  {
    "text": "a valid choice for those use cases",
    "start": "2102960",
    "end": "2108079"
  },
  {
    "text": "next question is from graham bettencourt dos santos",
    "start": "2108720",
    "end": "2115280"
  },
  {
    "text": "how does grpc work with services that need load balancer in front the answer would be",
    "start": "2115280",
    "end": "2122960"
  },
  {
    "text": "that you'd need to pick a load balancer that's",
    "start": "2124960",
    "end": "2130320"
  },
  {
    "text": "that's able to proxy grpc requests many open source reverse proxies like",
    "start": "2130320",
    "end": "2138400"
  },
  {
    "text": "the envoy proxy and nginx already support jrpc",
    "start": "2138400",
    "end": "2144480"
  },
  {
    "text": "so you just need to work with your reverse proxy or your load balancer to configure it",
    "start": "2144480",
    "end": "2150880"
  },
  {
    "text": "for grpc in general any proxy that supports http 2 or any load balancer that supports",
    "start": "2150880",
    "end": "2156079"
  },
  {
    "text": "http 2 by definition supports grpc out of the box",
    "start": "2156079",
    "end": "2162720"
  },
  {
    "text": "we are running out of time so i'll uh try to go through a few more questions",
    "start": "2169040",
    "end": "2174800"
  },
  {
    "text": "um and then we will have the slack channel where i'll continue to answer",
    "start": "2174800",
    "end": "2180160"
  },
  {
    "text": "any questions that come up um so the next question is are there is there any type of performance loss um",
    "start": "2180160",
    "end": "2188079"
  },
  {
    "text": "typically there is a lot of attention paid to performance with in the grpc development in all of the",
    "start": "2188079",
    "end": "2194800"
  },
  {
    "text": "different languages in terms of penalties you can still expect to",
    "start": "2194800",
    "end": "2200000"
  },
  {
    "text": "pay a small performance penalty for framing because your pc does multiplex",
    "start": "2200000",
    "end": "2205040"
  },
  {
    "text": "messages from different rpcs on the same tcp stream so that would be a small performance",
    "start": "2205040",
    "end": "2211760"
  },
  {
    "text": "penalty and depending on the use case you might",
    "start": "2211760",
    "end": "2216800"
  },
  {
    "text": "see some amount of synchronization overheads especially if",
    "start": "2216800",
    "end": "2224079"
  },
  {
    "text": "the use case is such that a single tcp connection in a single rpc stream is",
    "start": "2224079",
    "end": "2230640"
  },
  {
    "text": "all that was needed having the ability to scale up is not",
    "start": "2230640",
    "end": "2236320"
  },
  {
    "text": "necessarily needed so we are being told to take the",
    "start": "2236320",
    "end": "2243440"
  },
  {
    "text": "remaining questions to the slack channel i'll join slack and",
    "start": "2243440",
    "end": "2249520"
  },
  {
    "text": "continue taking questions there thank you",
    "start": "2249520",
    "end": "2254960"
  }
]