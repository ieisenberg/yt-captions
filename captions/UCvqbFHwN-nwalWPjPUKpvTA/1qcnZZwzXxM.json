[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "hello everyone I'm Tanya from Dayton",
    "start": "420",
    "end": "3659"
  },
  {
    "text": "Lord today I'm going to talk about how",
    "start": "3659",
    "end": "6960"
  },
  {
    "text": "can we mathematically prove distributed",
    "start": "6960",
    "end": "9420"
  },
  {
    "text": "algorithms using formal methods",
    "start": "9420",
    "end": "12540"
  },
  {
    "text": "first let me introduce our company we",
    "start": "12540",
    "end": "16260"
  },
  {
    "text": "are a company focusing on storage",
    "start": "16260",
    "end": "18720"
  },
  {
    "text": "solution for Sky Computing we are trying",
    "start": "18720",
    "end": "22020"
  },
  {
    "text": "to integrate software and Hardware to",
    "start": "22020",
    "end": "25260"
  },
  {
    "text": "build a high performance storage",
    "start": "25260",
    "end": "27359"
  },
  {
    "text": "solution across clouds",
    "start": "27359",
    "end": "30240"
  },
  {
    "text": "our open source project X line is in Geo",
    "start": "30240",
    "end": "34140"
  },
  {
    "text": "distributed storage system",
    "start": "34140",
    "end": "36719"
  },
  {
    "text": "okay now let's start our talk",
    "start": "36719",
    "end": "40379"
  },
  {
    "start": "40000",
    "end": "260000"
  },
  {
    "text": "first the background",
    "start": "40379",
    "end": "43020"
  },
  {
    "text": "so what is the geodistributed system",
    "start": "43020",
    "end": "46860"
  },
  {
    "text": "as you can see in the graph",
    "start": "46860",
    "end": "49680"
  },
  {
    "text": "compares to a single data center",
    "start": "49680",
    "end": "51840"
  },
  {
    "text": "distributed system",
    "start": "51840",
    "end": "53940"
  },
  {
    "text": "Geo distributed system has its nodes in",
    "start": "53940",
    "end": "57239"
  },
  {
    "text": "multiple data center",
    "start": "57239",
    "end": "59100"
  },
  {
    "text": "this makes the system have high",
    "start": "59100",
    "end": "61739"
  },
  {
    "text": "availability and thought tolerance since",
    "start": "61739",
    "end": "64559"
  },
  {
    "text": "even if a data center was cut off the",
    "start": "64559",
    "end": "68220"
  },
  {
    "text": "system can still function normally",
    "start": "68220",
    "end": "71060"
  },
  {
    "text": "because the distance between nodes are",
    "start": "71060",
    "end": "74580"
  },
  {
    "text": "quite long",
    "start": "74580",
    "end": "76280"
  },
  {
    "text": "geo-distributed systems have relatively",
    "start": "76280",
    "end": "78840"
  },
  {
    "text": "High latency between replicas",
    "start": "78840",
    "end": "82820"
  },
  {
    "text": "we often abstract a distributed system",
    "start": "83159",
    "end": "86220"
  },
  {
    "text": "into a replicated State machine",
    "start": "86220",
    "end": "89880"
  },
  {
    "text": "since it is replicated all the nodes",
    "start": "89880",
    "end": "93240"
  },
  {
    "text": "have the same content on them",
    "start": "93240",
    "end": "96540"
  },
  {
    "text": "so the consensus algorithm or we can",
    "start": "96540",
    "end": "100140"
  },
  {
    "text": "call it consensus protocol is how we",
    "start": "100140",
    "end": "103979"
  },
  {
    "text": "achieve the agreement on the single",
    "start": "103979",
    "end": "106439"
  },
  {
    "text": "volume for an instance in the cluster",
    "start": "106439",
    "end": "109159"
  },
  {
    "text": "once the volume of the instance reached",
    "start": "109159",
    "end": "112380"
  },
  {
    "text": "consensus it must be stable",
    "start": "112380",
    "end": "115500"
  },
  {
    "text": "so it can survive precious",
    "start": "115500",
    "end": "119180"
  },
  {
    "text": "establishing consensus often requires at",
    "start": "119180",
    "end": "122520"
  },
  {
    "text": "least one round trips between replicas",
    "start": "122520",
    "end": "126240"
  },
  {
    "text": "how can we achieve consensus between",
    "start": "126240",
    "end": "128520"
  },
  {
    "text": "nodes",
    "start": "128520",
    "end": "130080"
  },
  {
    "text": "for example",
    "start": "130080",
    "end": "131879"
  },
  {
    "text": "a node or we can call it leader sends",
    "start": "131879",
    "end": "135959"
  },
  {
    "text": "persist x equals 1 to all replicas",
    "start": "135959",
    "end": "140400"
  },
  {
    "text": "then each replicas process this message",
    "start": "140400",
    "end": "143940"
  },
  {
    "text": "and replying acknowledged",
    "start": "143940",
    "end": "147120"
  },
  {
    "text": "now the leader knows that every replica",
    "start": "147120",
    "end": "150599"
  },
  {
    "text": "in the cluster have persists x equals",
    "start": "150599",
    "end": "154379"
  },
  {
    "text": "one",
    "start": "154379",
    "end": "155459"
  },
  {
    "text": "now the consensus is reached",
    "start": "155459",
    "end": "158640"
  },
  {
    "text": "so we can tell we consumed one round",
    "start": "158640",
    "end": "161819"
  },
  {
    "text": "trip between replicas to reach the",
    "start": "161819",
    "end": "164580"
  },
  {
    "text": "consensus",
    "start": "164580",
    "end": "166080"
  },
  {
    "text": "this is a simplified version of the",
    "start": "166080",
    "end": "168840"
  },
  {
    "text": "consensus protocol actually the real",
    "start": "168840",
    "end": "171959"
  },
  {
    "text": "consensus Protocols are far more complex",
    "start": "171959",
    "end": "175200"
  },
  {
    "text": "than this simple graph",
    "start": "175200",
    "end": "179220"
  },
  {
    "text": "okay let's see what is the consensus",
    "start": "179220",
    "end": "182580"
  },
  {
    "text": "algorithm for distributed system act in",
    "start": "182580",
    "end": "186000"
  },
  {
    "text": "the real world",
    "start": "186000",
    "end": "188220"
  },
  {
    "text": "we got a cluster consists of three",
    "start": "188220",
    "end": "191519"
  },
  {
    "text": "replicas and the client",
    "start": "191519",
    "end": "193920"
  },
  {
    "text": "client sends a request to the cluster",
    "start": "193920",
    "end": "197519"
  },
  {
    "text": "usually it sends the request to a single",
    "start": "197519",
    "end": "201420"
  },
  {
    "text": "replica we can call it leader then the",
    "start": "201420",
    "end": "204720"
  },
  {
    "text": "leader replicates the command in the",
    "start": "204720",
    "end": "207300"
  },
  {
    "text": "request to all replicas",
    "start": "207300",
    "end": "210180"
  },
  {
    "text": "this consumes one rtt",
    "start": "210180",
    "end": "214019"
  },
  {
    "text": "when the consensus is reached the leader",
    "start": "214019",
    "end": "217500"
  },
  {
    "text": "replies the result to the client",
    "start": "217500",
    "end": "220760"
  },
  {
    "text": "in this graph we can see including",
    "start": "220760",
    "end": "223500"
  },
  {
    "text": "client the whole process caused two rtts",
    "start": "223500",
    "end": "227400"
  },
  {
    "text": "to finish",
    "start": "227400",
    "end": "228720"
  },
  {
    "text": "two round-trip times is quite expensive",
    "start": "228720",
    "end": "231799"
  },
  {
    "text": "since the latency between nodes are",
    "start": "231799",
    "end": "235200"
  },
  {
    "text": "quite High",
    "start": "235200",
    "end": "237739"
  },
  {
    "text": "so the disadvantage of traditional",
    "start": "237780",
    "end": "240840"
  },
  {
    "text": "consensus algorithm in geo-distributed",
    "start": "240840",
    "end": "244019"
  },
  {
    "text": "system is",
    "start": "244019",
    "end": "245879"
  },
  {
    "text": "it caused huge additional latency",
    "start": "245879",
    "end": "248819"
  },
  {
    "text": "compared to unreplicated systems or",
    "start": "248819",
    "end": "252299"
  },
  {
    "text": "single data center clusters",
    "start": "252299",
    "end": "255239"
  },
  {
    "text": "so",
    "start": "255239",
    "end": "256859"
  },
  {
    "text": "how can we solve this problem",
    "start": "256859",
    "end": "260840"
  },
  {
    "start": "260000",
    "end": "664000"
  },
  {
    "text": "what is term",
    "start": "262560",
    "end": "264540"
  },
  {
    "text": "curb is a new replication protocol",
    "start": "264540",
    "end": "267120"
  },
  {
    "text": "introduced by a paper in nsdi 2019 this",
    "start": "267120",
    "end": "271560"
  },
  {
    "text": "is the original curb protocol it is a",
    "start": "271560",
    "end": "274199"
  },
  {
    "text": "replication protocol not a consensus",
    "start": "274199",
    "end": "276900"
  },
  {
    "text": "protocol",
    "start": "276900",
    "end": "278040"
  },
  {
    "text": "curb allows clients to replicate",
    "start": "278040",
    "end": "280680"
  },
  {
    "text": "requests that not have been ordered yet",
    "start": "280680",
    "end": "283380"
  },
  {
    "text": "as known as they are commutative",
    "start": "283380",
    "end": "286820"
  },
  {
    "text": "we extended the original curve protocol",
    "start": "286820",
    "end": "289979"
  },
  {
    "text": "to a consensus protocol and used it in",
    "start": "289979",
    "end": "293340"
  },
  {
    "text": "our project X line",
    "start": "293340",
    "end": "295560"
  },
  {
    "text": "in X line curve act as a front-end",
    "start": "295560",
    "end": "299699"
  },
  {
    "text": "pairing with raft to maintain the data",
    "start": "299699",
    "end": "303479"
  },
  {
    "text": "consistency",
    "start": "303479",
    "end": "304800"
  },
  {
    "text": "let's talk about curves procedure",
    "start": "304800",
    "end": "308759"
  },
  {
    "text": "we still got a cluster consists of three",
    "start": "308759",
    "end": "312120"
  },
  {
    "text": "replicas and a client",
    "start": "312120",
    "end": "314820"
  },
  {
    "text": "so now instead of the client send a",
    "start": "314820",
    "end": "318300"
  },
  {
    "text": "request to a single replica it sends the",
    "start": "318300",
    "end": "321900"
  },
  {
    "text": "request to all the replicas in the",
    "start": "321900",
    "end": "324419"
  },
  {
    "text": "cluster",
    "start": "324419",
    "end": "325979"
  },
  {
    "text": "each replica receives the client request",
    "start": "325979",
    "end": "329240"
  },
  {
    "text": "processed it and replies the result to",
    "start": "329240",
    "end": "332940"
  },
  {
    "text": "the client now the client knows if the",
    "start": "332940",
    "end": "336539"
  },
  {
    "text": "result is reached consensus at this time",
    "start": "336539",
    "end": "340080"
  },
  {
    "text": "client is down for the process",
    "start": "340080",
    "end": "344160"
  },
  {
    "text": "the only remain step is the constant to",
    "start": "344160",
    "end": "347639"
  },
  {
    "text": "think the result they got",
    "start": "347639",
    "end": "351180"
  },
  {
    "text": "this looks quite simple",
    "start": "351180",
    "end": "353759"
  },
  {
    "text": "but unfortunately in the real world this",
    "start": "353759",
    "end": "357780"
  },
  {
    "text": "is oversimplified",
    "start": "357780",
    "end": "360500"
  },
  {
    "text": "so we still got a client and some",
    "start": "360500",
    "end": "363780"
  },
  {
    "text": "replicas one of them is the leader of",
    "start": "363780",
    "end": "367440"
  },
  {
    "text": "the cluster",
    "start": "367440",
    "end": "370100"
  },
  {
    "text": "we've got in total nodes in which n",
    "start": "370199",
    "end": "374520"
  },
  {
    "text": "equals 2 f plus 1. f is the maximum of",
    "start": "374520",
    "end": "379259"
  },
  {
    "text": "fourth replicas in the cluster",
    "start": "379259",
    "end": "383660"
  },
  {
    "text": "now the client want to replicate a",
    "start": "385139",
    "end": "389160"
  },
  {
    "text": "command x equals one",
    "start": "389160",
    "end": "393259"
  },
  {
    "text": "it sends the request including the",
    "start": "393600",
    "end": "396419"
  },
  {
    "text": "command to all replicas",
    "start": "396419",
    "end": "399479"
  },
  {
    "text": "and then each replica saves x equals 1",
    "start": "399479",
    "end": "404039"
  },
  {
    "text": "to its spec pool",
    "start": "404039",
    "end": "406759"
  },
  {
    "text": "after this each replica replies the",
    "start": "406759",
    "end": "410580"
  },
  {
    "text": "result to the client",
    "start": "410580",
    "end": "414000"
  },
  {
    "text": "if the client gots more than f plus f",
    "start": "414000",
    "end": "417660"
  },
  {
    "text": "plus 1 divided by two plus one positive",
    "start": "417660",
    "end": "422039"
  },
  {
    "text": "replies the command x equals 1 is",
    "start": "422039",
    "end": "425580"
  },
  {
    "text": "committed",
    "start": "425580",
    "end": "427020"
  },
  {
    "text": "if the client want to replicate a new",
    "start": "427020",
    "end": "429720"
  },
  {
    "text": "command x equals two",
    "start": "429720",
    "end": "432180"
  },
  {
    "text": "it sends a request to all the replicas",
    "start": "432180",
    "end": "436020"
  },
  {
    "text": "but these replicas checked their respect",
    "start": "436020",
    "end": "438660"
  },
  {
    "text": "pool and font x equals one that's",
    "start": "438660",
    "end": "441599"
  },
  {
    "text": "already there",
    "start": "441599",
    "end": "442919"
  },
  {
    "text": "since x equals 1 is complex with x",
    "start": "442919",
    "end": "446940"
  },
  {
    "text": "equals two they have the same k",
    "start": "446940",
    "end": "450060"
  },
  {
    "text": "these replicas will reject the request",
    "start": "450060",
    "end": "455300"
  },
  {
    "text": "but if the clients want to replicate a",
    "start": "455300",
    "end": "459419"
  },
  {
    "text": "command y equals three",
    "start": "459419",
    "end": "462419"
  },
  {
    "text": "since Y is not in any spec Port the",
    "start": "462419",
    "end": "466139"
  },
  {
    "text": "request can be accept and replace the",
    "start": "466139",
    "end": "469080"
  },
  {
    "text": "result",
    "start": "469080",
    "end": "470840"
  },
  {
    "text": "so why couldn't we accept multiple",
    "start": "470840",
    "end": "474479"
  },
  {
    "text": "commands conflict with each other",
    "start": "474479",
    "end": "477539"
  },
  {
    "text": "this is because if there are some",
    "start": "477539",
    "end": "480780"
  },
  {
    "text": "replicas received x equals one first and",
    "start": "480780",
    "end": "484740"
  },
  {
    "text": "the x equals two later but other",
    "start": "484740",
    "end": "488039"
  },
  {
    "text": "replicas received x equals 2 first",
    "start": "488039",
    "end": "491639"
  },
  {
    "text": "so how can we serialize those two",
    "start": "491639",
    "end": "495360"
  },
  {
    "text": "commands",
    "start": "495360",
    "end": "497819"
  },
  {
    "text": "this is a problem",
    "start": "497819",
    "end": "499860"
  },
  {
    "text": "so we cannot have two conflict commands",
    "start": "499860",
    "end": "503280"
  },
  {
    "text": "in this spec pool",
    "start": "503280",
    "end": "506280"
  },
  {
    "text": "replicas are thinking commands in",
    "start": "506280",
    "end": "509039"
  },
  {
    "text": "background",
    "start": "509039",
    "end": "510419"
  },
  {
    "text": "at this time x equals one is synced in",
    "start": "510419",
    "end": "515159"
  },
  {
    "text": "the cluster",
    "start": "515159",
    "end": "516419"
  },
  {
    "text": "now x equals 1 can be removed from the",
    "start": "516419",
    "end": "520740"
  },
  {
    "text": "spec pool",
    "start": "520740",
    "end": "522180"
  },
  {
    "text": "now if a client want to request a new",
    "start": "522180",
    "end": "526200"
  },
  {
    "text": "command x equals three or four it can be",
    "start": "526200",
    "end": "530459"
  },
  {
    "text": "successfully replicated",
    "start": "530459",
    "end": "533959"
  },
  {
    "text": "we got a leader in our cluster so why we",
    "start": "534899",
    "end": "538380"
  },
  {
    "text": "need it",
    "start": "538380",
    "end": "540480"
  },
  {
    "text": "each replica may have different spec",
    "start": "540480",
    "end": "543300"
  },
  {
    "text": "call since they may receive client",
    "start": "543300",
    "end": "546300"
  },
  {
    "text": "requests in different order",
    "start": "546300",
    "end": "548760"
  },
  {
    "text": "so which order should we serialized the",
    "start": "548760",
    "end": "552420"
  },
  {
    "text": "commands",
    "start": "552420",
    "end": "554220"
  },
  {
    "text": "we got the leader to decide so",
    "start": "554220",
    "end": "558379"
  },
  {
    "text": "the leader always knows the reliable",
    "start": "558660",
    "end": "561240"
  },
  {
    "text": "latest information",
    "start": "561240",
    "end": "563640"
  },
  {
    "text": "this is because the client can only",
    "start": "563640",
    "end": "566760"
  },
  {
    "text": "consider the command being committed",
    "start": "566760",
    "end": "569100"
  },
  {
    "text": "after it receives the leader's reply",
    "start": "569100",
    "end": "572940"
  },
  {
    "text": "other replicas can have difference back",
    "start": "572940",
    "end": "575459"
  },
  {
    "text": "wall",
    "start": "575459",
    "end": "576480"
  },
  {
    "text": "this doesn't matter",
    "start": "576480",
    "end": "579060"
  },
  {
    "text": "the leader also speculatively executes",
    "start": "579060",
    "end": "582180"
  },
  {
    "text": "the command and attach the Rooks out to",
    "start": "582180",
    "end": "585240"
  },
  {
    "text": "the reply",
    "start": "585240",
    "end": "587640"
  },
  {
    "text": "so the client can only go the results in",
    "start": "587640",
    "end": "592019"
  },
  {
    "text": "the leader's reply",
    "start": "592019",
    "end": "595399"
  },
  {
    "text": "this is the normal procedure of the curb",
    "start": "596459",
    "end": "599940"
  },
  {
    "text": "consensus protocol",
    "start": "599940",
    "end": "601740"
  },
  {
    "text": "now let's talk about the failure",
    "start": "601740",
    "end": "604200"
  },
  {
    "text": "recovery procedure",
    "start": "604200",
    "end": "606420"
  },
  {
    "text": "the failure recovery or leader change",
    "start": "606420",
    "end": "609480"
  },
  {
    "text": "procedure consists of five steps below",
    "start": "609480",
    "end": "614459"
  },
  {
    "text": "first we elect a new leader this is down",
    "start": "614459",
    "end": "618300"
  },
  {
    "text": "by the backend protocol like raft we are",
    "start": "618300",
    "end": "622019"
  },
  {
    "text": "reducing the raft leader",
    "start": "622019",
    "end": "624779"
  },
  {
    "text": "then the new leader needs to gather at",
    "start": "624779",
    "end": "627660"
  },
  {
    "text": "least f plus one spec pools",
    "start": "627660",
    "end": "631080"
  },
  {
    "text": "after the new leader got enough snack",
    "start": "631080",
    "end": "634140"
  },
  {
    "text": "pools",
    "start": "634140",
    "end": "635339"
  },
  {
    "text": "it picks the commands appeared in those",
    "start": "635339",
    "end": "638880"
  },
  {
    "text": "spec ports more than f plus one divide",
    "start": "638880",
    "end": "642000"
  },
  {
    "text": "two plus one times",
    "start": "642000",
    "end": "645540"
  },
  {
    "text": "the new leader put them into its new",
    "start": "645540",
    "end": "648600"
  },
  {
    "text": "spec pose and syncing them using the",
    "start": "648600",
    "end": "651959"
  },
  {
    "text": "backbend protocol",
    "start": "651959",
    "end": "654600"
  },
  {
    "text": "this is a brief introduced of the curb",
    "start": "654600",
    "end": "657660"
  },
  {
    "text": "consensus protocol so how can we know if",
    "start": "657660",
    "end": "661440"
  },
  {
    "text": "it is correct",
    "start": "661440",
    "end": "664279"
  },
  {
    "text": "we use TLA plus to check the correctness",
    "start": "665640",
    "end": "669300"
  },
  {
    "text": "of our new curb consensus protocol",
    "start": "669300",
    "end": "674240"
  },
  {
    "text": "so what is TLA Plus",
    "start": "674420",
    "end": "677880"
  },
  {
    "text": "QA plus is a language created by Lazio",
    "start": "677880",
    "end": "681779"
  },
  {
    "text": "landport",
    "start": "681779",
    "end": "683100"
  },
  {
    "text": "let the Lampard is also the creator of",
    "start": "683100",
    "end": "686100"
  },
  {
    "text": "the paxos consensus algorithm",
    "start": "686100",
    "end": "689339"
  },
  {
    "text": "while using tle plus we abstract systems",
    "start": "689339",
    "end": "693360"
  },
  {
    "text": "into mathematical models with finite",
    "start": "693360",
    "end": "696360"
  },
  {
    "text": "States",
    "start": "696360",
    "end": "697620"
  },
  {
    "text": "and then we use TLC model Checker to",
    "start": "697620",
    "end": "702000"
  },
  {
    "text": "check all the possible States using",
    "start": "702000",
    "end": "705000"
  },
  {
    "text": "given invariants and properties",
    "start": "705000",
    "end": "709339"
  },
  {
    "text": "how can we abstract a program in TLA",
    "start": "710760",
    "end": "714060"
  },
  {
    "text": "Plus",
    "start": "714060",
    "end": "716220"
  },
  {
    "text": "a normal program is a sequence of",
    "start": "716220",
    "end": "719120"
  },
  {
    "text": "instructions that tells the computer how",
    "start": "719120",
    "end": "722640"
  },
  {
    "text": "to perform a specific task a TLA plus",
    "start": "722640",
    "end": "726240"
  },
  {
    "text": "model is a mathematical description that",
    "start": "726240",
    "end": "729240"
  },
  {
    "text": "tells the human nor the tool what are",
    "start": "729240",
    "end": "731820"
  },
  {
    "text": "the possible behaviors or properties of",
    "start": "731820",
    "end": "734820"
  },
  {
    "text": "a system",
    "start": "734820",
    "end": "736380"
  },
  {
    "text": "in TLA plus we are not writing a series",
    "start": "736380",
    "end": "739500"
  },
  {
    "text": "of procedures we are writing how the",
    "start": "739500",
    "end": "742680"
  },
  {
    "text": "program changes from the state to",
    "start": "742680",
    "end": "744720"
  },
  {
    "text": "another state",
    "start": "744720",
    "end": "746760"
  },
  {
    "text": "a state in TLA plus is a snapshot of all",
    "start": "746760",
    "end": "751260"
  },
  {
    "text": "the variables in the system at a given",
    "start": "751260",
    "end": "753839"
  },
  {
    "text": "point in time",
    "start": "753839",
    "end": "755160"
  },
  {
    "text": "each state is atomic",
    "start": "755160",
    "end": "758100"
  },
  {
    "text": "the key idea of abstracting the model in",
    "start": "758100",
    "end": "761040"
  },
  {
    "text": "TLA plus is to simplify the abstraction",
    "start": "761040",
    "end": "764220"
  },
  {
    "text": "by heading or ignoring some details that",
    "start": "764220",
    "end": "767820"
  },
  {
    "text": "are not relevant for the properties we",
    "start": "767820",
    "end": "770519"
  },
  {
    "text": "want to verify",
    "start": "770519",
    "end": "773220"
  },
  {
    "text": "for example a traffic light system we",
    "start": "773220",
    "end": "776940"
  },
  {
    "text": "got three possible States",
    "start": "776940",
    "end": "779279"
  },
  {
    "text": "red yellow and green",
    "start": "779279",
    "end": "782160"
  },
  {
    "text": "what we need to do is to Define how the",
    "start": "782160",
    "end": "785220"
  },
  {
    "text": "lines is changing we can change it from",
    "start": "785220",
    "end": "788339"
  },
  {
    "text": "red to green from green to yellow and",
    "start": "788339",
    "end": "791700"
  },
  {
    "text": "from yellow to red but we are not going",
    "start": "791700",
    "end": "794579"
  },
  {
    "text": "to allow to change it from red to Yellow",
    "start": "794579",
    "end": "799200"
  },
  {
    "text": "that is what we do in abstracting TLA",
    "start": "799200",
    "end": "802560"
  },
  {
    "text": "plus model",
    "start": "802560",
    "end": "805040"
  },
  {
    "text": "we are not showing the TLA plus code",
    "start": "806279",
    "end": "809100"
  },
  {
    "text": "here because this is not a TLA plus",
    "start": "809100",
    "end": "812579"
  },
  {
    "text": "tutorial we are not focusing on these",
    "start": "812579",
    "end": "816000"
  },
  {
    "text": "thin tags in TLA plus we only focusing",
    "start": "816000",
    "end": "819180"
  },
  {
    "text": "on the core no idea of abstracting a",
    "start": "819180",
    "end": "822600"
  },
  {
    "text": "system in TLA plus mathematically",
    "start": "822600",
    "end": "827360"
  },
  {
    "text": "let's see how can we abstract the curb",
    "start": "827519",
    "end": "830700"
  },
  {
    "text": "consensus protocol into a TLA plus model",
    "start": "830700",
    "end": "835920"
  },
  {
    "text": "we defined several actions to describe",
    "start": "835920",
    "end": "839279"
  },
  {
    "text": "States transformations",
    "start": "839279",
    "end": "841440"
  },
  {
    "text": "first we got the action of decline",
    "start": "841440",
    "end": "844620"
  },
  {
    "text": "sending requests to all replicas",
    "start": "844620",
    "end": "847980"
  },
  {
    "text": "this is the atomic procedure",
    "start": "847980",
    "end": "850800"
  },
  {
    "text": "the process of decline choosing a",
    "start": "850800",
    "end": "854100"
  },
  {
    "text": "command and sending the message to all",
    "start": "854100",
    "end": "857220"
  },
  {
    "text": "replicas is a single state change",
    "start": "857220",
    "end": "861420"
  },
  {
    "text": "the next action is",
    "start": "861420",
    "end": "863880"
  },
  {
    "text": "the replica receives client request",
    "start": "863880",
    "end": "866820"
  },
  {
    "text": "check the confliction in this spec pool",
    "start": "866820",
    "end": "870360"
  },
  {
    "text": "and reply the result",
    "start": "870360",
    "end": "873480"
  },
  {
    "text": "then the clients gather enough replies",
    "start": "873480",
    "end": "876240"
  },
  {
    "text": "from the replicas to decide whether the",
    "start": "876240",
    "end": "879839"
  },
  {
    "text": "command is committed",
    "start": "879839",
    "end": "882779"
  },
  {
    "text": "those three actions above is the normal",
    "start": "882779",
    "end": "885899"
  },
  {
    "text": "procedure of the curb consensus protocol",
    "start": "885899",
    "end": "888720"
  },
  {
    "text": "then we got the cluster syncing commands",
    "start": "888720",
    "end": "892620"
  },
  {
    "text": "action",
    "start": "892620",
    "end": "893699"
  },
  {
    "text": "this is the action done by the backend",
    "start": "893699",
    "end": "896279"
  },
  {
    "text": "protocol",
    "start": "896279",
    "end": "898620"
  },
  {
    "text": "The Last Action we got is the leader",
    "start": "898620",
    "end": "902639"
  },
  {
    "text": "change action this is also the failure",
    "start": "902639",
    "end": "905940"
  },
  {
    "text": "recovery action",
    "start": "905940",
    "end": "909019"
  },
  {
    "start": "910000",
    "end": "1133000"
  },
  {
    "text": "let's talk about these actions one by",
    "start": "911639",
    "end": "914220"
  },
  {
    "text": "one",
    "start": "914220",
    "end": "915180"
  },
  {
    "text": "first is the client sending request",
    "start": "915180",
    "end": "917880"
  },
  {
    "text": "action",
    "start": "917880",
    "end": "919560"
  },
  {
    "text": "this section is quite simple we just",
    "start": "919560",
    "end": "922560"
  },
  {
    "text": "choose a command and send the command in",
    "start": "922560",
    "end": "925500"
  },
  {
    "text": "the request to all replicas",
    "start": "925500",
    "end": "928620"
  },
  {
    "text": "then is the replica receiving client",
    "start": "928620",
    "end": "931740"
  },
  {
    "text": "request action",
    "start": "931740",
    "end": "933180"
  },
  {
    "text": "since every replica got its own network",
    "start": "933180",
    "end": "935940"
  },
  {
    "text": "and internal storage we can't make",
    "start": "935940",
    "end": "938699"
  },
  {
    "text": "multiple replicas acting on their",
    "start": "938699",
    "end": "941160"
  },
  {
    "text": "exactly same scene on the same time so",
    "start": "941160",
    "end": "944760"
  },
  {
    "text": "we are only focusing on processing one",
    "start": "944760",
    "end": "947519"
  },
  {
    "text": "message on a single replica in one state",
    "start": "947519",
    "end": "952079"
  },
  {
    "text": "in this section we first check the stack",
    "start": "952079",
    "end": "956040"
  },
  {
    "text": "pool to see if there is any conflict",
    "start": "956040",
    "end": "959220"
  },
  {
    "text": "commands in there already if there's no",
    "start": "959220",
    "end": "962459"
  },
  {
    "text": "confliction we can put the command into",
    "start": "962459",
    "end": "965279"
  },
  {
    "text": "the spec pool",
    "start": "965279",
    "end": "968339"
  },
  {
    "text": "then if this replica is the leader",
    "start": "968339",
    "end": "973260"
  },
  {
    "text": "it should speculatively execute the",
    "start": "973260",
    "end": "976380"
  },
  {
    "text": "command and start the process of",
    "start": "976380",
    "end": "978899"
  },
  {
    "text": "replicating the command",
    "start": "978899",
    "end": "982639"
  },
  {
    "text": "also the replica needs to reply the",
    "start": "982860",
    "end": "986519"
  },
  {
    "text": "result to the client",
    "start": "986519",
    "end": "989820"
  },
  {
    "text": "now it's the client Gathering replies",
    "start": "989820",
    "end": "992699"
  },
  {
    "text": "action",
    "start": "992699",
    "end": "994019"
  },
  {
    "text": "if declined received more than f plus f",
    "start": "994019",
    "end": "998040"
  },
  {
    "text": "plus 1 divided by 2 and 10 plus 1",
    "start": "998040",
    "end": "1002060"
  },
  {
    "text": "positive replies the command can be",
    "start": "1002060",
    "end": "1005000"
  },
  {
    "text": "considered committed if the client",
    "start": "1005000",
    "end": "1007699"
  },
  {
    "text": "receives more than f plus 1 divided by",
    "start": "1007699",
    "end": "1011000"
  },
  {
    "text": "two then plus one negative replies the",
    "start": "1011000",
    "end": "1014240"
  },
  {
    "text": "negative replies means there is",
    "start": "1014240",
    "end": "1017420"
  },
  {
    "text": "conflicts in this replicas spec pool",
    "start": "1017420",
    "end": "1022720"
  },
  {
    "text": "then the commands can never be committed",
    "start": "1023439",
    "end": "1028220"
  },
  {
    "text": "then is the seeking commands action",
    "start": "1028220",
    "end": "1031640"
  },
  {
    "text": "actually we better descript this syncing",
    "start": "1031640",
    "end": "1036079"
  },
  {
    "text": "finish action",
    "start": "1036079",
    "end": "1038178"
  },
  {
    "text": "since syncing the command in the real",
    "start": "1038179",
    "end": "1040760"
  },
  {
    "text": "world is time",
    "start": "1040760",
    "end": "1043520"
  },
  {
    "text": "this action leads to the state that the",
    "start": "1043520",
    "end": "1047120"
  },
  {
    "text": "command is finished synced",
    "start": "1047120",
    "end": "1050240"
  },
  {
    "text": "so this is not a procedure this is an",
    "start": "1050240",
    "end": "1053660"
  },
  {
    "text": "atomic action",
    "start": "1053660",
    "end": "1056059"
  },
  {
    "text": "the sinking is done by the backhand",
    "start": "1056059",
    "end": "1058340"
  },
  {
    "text": "protocol so we are meeting most of the",
    "start": "1058340",
    "end": "1062120"
  },
  {
    "text": "procedure we just focusing on the action",
    "start": "1062120",
    "end": "1065480"
  },
  {
    "text": "that we removed a command from the spec",
    "start": "1065480",
    "end": "1069080"
  },
  {
    "text": "port",
    "start": "1069080",
    "end": "1071380"
  },
  {
    "text": "the final one is the leader change",
    "start": "1071660",
    "end": "1074240"
  },
  {
    "text": "action",
    "start": "1074240",
    "end": "1075320"
  },
  {
    "text": "at the same reason we don't care about",
    "start": "1075320",
    "end": "1078620"
  },
  {
    "text": "how the leader change we only care about",
    "start": "1078620",
    "end": "1081700"
  },
  {
    "text": "what we should do after the leader",
    "start": "1081700",
    "end": "1085100"
  },
  {
    "text": "change",
    "start": "1085100",
    "end": "1086720"
  },
  {
    "text": "when a new leader been elected",
    "start": "1086720",
    "end": "1089660"
  },
  {
    "text": "the new elected leader should gather at",
    "start": "1089660",
    "end": "1093020"
  },
  {
    "text": "least f plus one spec Force this can",
    "start": "1093020",
    "end": "1096020"
  },
  {
    "text": "include its own spec pool then it should",
    "start": "1096020",
    "end": "1099440"
  },
  {
    "text": "pick commands that existed in at least f",
    "start": "1099440",
    "end": "1103880"
  },
  {
    "text": "plus 1 divided by two plus one spec",
    "start": "1103880",
    "end": "1107539"
  },
  {
    "text": "Force",
    "start": "1107539",
    "end": "1109580"
  },
  {
    "text": "finally the new leader can put them into",
    "start": "1109580",
    "end": "1113020"
  },
  {
    "text": "its spec pool",
    "start": "1113020",
    "end": "1116360"
  },
  {
    "text": "so this is the complete action details",
    "start": "1116360",
    "end": "1119660"
  },
  {
    "text": "of the curb consensus protocol in tra",
    "start": "1119660",
    "end": "1122720"
  },
  {
    "text": "Plus",
    "start": "1122720",
    "end": "1124160"
  },
  {
    "text": "now we have to prove that this module is",
    "start": "1124160",
    "end": "1129080"
  },
  {
    "text": "correct",
    "start": "1129080",
    "end": "1130100"
  },
  {
    "text": "so how can we do this",
    "start": "1130100",
    "end": "1133039"
  },
  {
    "start": "1133000",
    "end": "1229000"
  },
  {
    "text": "we have to ensure a key property of this",
    "start": "1133039",
    "end": "1137000"
  },
  {
    "text": "module",
    "start": "1137000",
    "end": "1138919"
  },
  {
    "text": "if the client considered a command is",
    "start": "1138919",
    "end": "1142340"
  },
  {
    "text": "committed the command will eventually be",
    "start": "1142340",
    "end": "1145280"
  },
  {
    "text": "synced",
    "start": "1145280",
    "end": "1147679"
  },
  {
    "text": "if this command is not synced yet it",
    "start": "1147679",
    "end": "1151520"
  },
  {
    "text": "will be synced in the next second or",
    "start": "1151520",
    "end": "1154400"
  },
  {
    "text": "tomorrow or we don't know the exact time",
    "start": "1154400",
    "end": "1158419"
  },
  {
    "text": "but it will eventually be synced",
    "start": "1158419",
    "end": "1162020"
  },
  {
    "text": "now the TLA plus specification of the",
    "start": "1162020",
    "end": "1165320"
  },
  {
    "text": "curb consensus protocol is complete you",
    "start": "1165320",
    "end": "1168380"
  },
  {
    "text": "can find the whole document in x lines",
    "start": "1168380",
    "end": "1171140"
  },
  {
    "text": "GitHub repository now we can use the TLC",
    "start": "1171140",
    "end": "1175940"
  },
  {
    "text": "model Checker to check every state meets",
    "start": "1175940",
    "end": "1179240"
  },
  {
    "text": "the requirement of this property",
    "start": "1179240",
    "end": "1183760"
  },
  {
    "text": "this is a quite simple algorithm but it",
    "start": "1183980",
    "end": "1187520"
  },
  {
    "text": "can hugely improve the latency in Geo",
    "start": "1187520",
    "end": "1190700"
  },
  {
    "text": "distributed system",
    "start": "1190700",
    "end": "1193600"
  },
  {
    "text": "the last thing let me introduce our open",
    "start": "1194780",
    "end": "1198620"
  },
  {
    "text": "source project X line",
    "start": "1198620",
    "end": "1201799"
  },
  {
    "text": "X line is our new two distributed KV",
    "start": "1201799",
    "end": "1205520"
  },
  {
    "text": "store for managing metadata",
    "start": "1205520",
    "end": "1208100"
  },
  {
    "text": "it is compatible with",
    "start": "1208100",
    "end": "1210020"
  },
  {
    "text": "etcd API",
    "start": "1210020",
    "end": "1211880"
  },
  {
    "text": "and geo-distributed friendly",
    "start": "1211880",
    "end": "1215299"
  },
  {
    "text": "it also compatible with kubernetes",
    "start": "1215299",
    "end": "1219020"
  },
  {
    "text": "you can chat it though that our GitHub",
    "start": "1219020",
    "end": "1221840"
  },
  {
    "text": "repository",
    "start": "1221840",
    "end": "1224419"
  },
  {
    "text": "thank you for watching",
    "start": "1224419",
    "end": "1227679"
  }
]