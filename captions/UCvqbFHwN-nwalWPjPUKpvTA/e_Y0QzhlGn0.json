[
  {
    "text": "welcome everyone uh this is the first time for me giving such a workshop in front of an online audience although i",
    "start": "1920",
    "end": "8559"
  },
  {
    "text": "give like online conference audience so thank you all for being here um and i apologize if some of the",
    "start": "8559",
    "end": "16560"
  },
  {
    "text": "uh management of my setup will take a second for me to get used to",
    "start": "16560",
    "end": "22160"
  },
  {
    "text": "um first of all i would like to share some introductory slides with you",
    "start": "22160",
    "end": "30800"
  },
  {
    "text": "and get started with that",
    "start": "30800",
    "end": "35200"
  },
  {
    "text": "and so i'm going to share this",
    "start": "42840",
    "end": "48160"
  },
  {
    "text": "screen here and i'm going to get started so um",
    "start": "48399",
    "end": "55039"
  },
  {
    "text": "thank you all for being here and listening to this workshop i'm actually quite happy to give this",
    "start": "55039",
    "end": "60800"
  },
  {
    "text": "workshop again because i have started with such a format",
    "start": "60800",
    "end": "66000"
  },
  {
    "text": "to start training uh rust so an introduction in two hours and",
    "start": "66000",
    "end": "74720"
  },
  {
    "text": "before i'm even getting started um introducing myself if you don't have",
    "start": "76000",
    "end": "82479"
  },
  {
    "text": "rust installed i would highly recommend you to install rust through rust stop this means you",
    "start": "82479",
    "end": "88159"
  },
  {
    "text": "can either go to rustling.org learn get started and the reason why i put this slide up front is",
    "start": "88159",
    "end": "94640"
  },
  {
    "text": "if you are using oh for some people audio seems to be muted",
    "start": "94640",
    "end": "102720"
  },
  {
    "text": "okay um so um the reason why i'm putting this slide",
    "start": "102880",
    "end": "109759"
  },
  {
    "text": "up front is if you are on windows this requires visual studio to be installed which is a which is a sizable download",
    "start": "109759",
    "end": "118640"
  },
  {
    "text": "if you can't get rust installed you can always use the playground and the play.rustlang.org to",
    "start": "118640",
    "end": "125759"
  },
  {
    "text": "follow along and at least get things to compile and i'll explain what rust stop is in",
    "start": "125759",
    "end": "131200"
  },
  {
    "text": "detail in a bit but just for the sake of making sure that you can get the get your download started and your",
    "start": "131200",
    "end": "137120"
  },
  {
    "text": "installation started i wanted to put this as a first slide",
    "start": "137120",
    "end": "142800"
  },
  {
    "text": "so who am i i'm from geisha i'm uh one of the founders of ferris systems in",
    "start": "142800",
    "end": "148319"
  },
  {
    "text": "critical section i am part of the rust project um since around 2015 as a member of the",
    "start": "148319",
    "end": "155280"
  },
  {
    "text": "community and the core team i'm also currently sitting at the board of the rust foundation",
    "start": "155280",
    "end": "160640"
  },
  {
    "text": "and have been a part of the foundation setup group and personally i've been in a",
    "start": "160640",
    "end": "165920"
  },
  {
    "text": "restoration since 2013 roughly and i've created a number of",
    "start": "165920",
    "end": "173120"
  },
  {
    "text": "projects in the meantime such as the the berlin user group and",
    "start": "173120",
    "end": "178319"
  },
  {
    "text": "also for example the european conference russ test and i'm been training ross since 2015",
    "start": "178319",
    "end": "186080"
  },
  {
    "text": "now and recently had a look back on how many people i trained and that's like over 600 um like conservative number",
    "start": "186080",
    "end": "194159"
  },
  {
    "text": "people all our teaching material is open source though i am not going to use",
    "start": "194159",
    "end": "200400"
  },
  {
    "text": "most of it in the part of this course um i don't think that copyright on teaching material is a good",
    "start": "200400",
    "end": "207440"
  },
  {
    "text": "forcing function and the other thing that we do as far systems which i would like to highlight",
    "start": "207440",
    "end": "213599"
  },
  {
    "text": "is we try to work as much as possible in open source",
    "start": "213599",
    "end": "218799"
  },
  {
    "text": "also using new funding models so for example we propose tools to the",
    "start": "218799",
    "end": "224080"
  },
  {
    "text": "ecosystem that we think is useful that we think are useful and then for them um",
    "start": "224080",
    "end": "231920"
  },
  {
    "text": "also the idea behind that is that making sure that whenever building a new",
    "start": "231920",
    "end": "237040"
  },
  {
    "text": "tool that sustainability as a checkbox that you fix that you check off first is incredibly",
    "start": "237040",
    "end": "243840"
  },
  {
    "text": "important because who wants to adopt a tool that goes out of maintenance in two years so this",
    "start": "243840",
    "end": "251280"
  },
  {
    "text": "is actually i believe this should be one of the first check boxes to fix um you see this logo up there called um",
    "start": "251280",
    "end": "258479"
  },
  {
    "text": "ferrocene you may have seen the talk by sabri earlier um we are also currently engaged in",
    "start": "258479",
    "end": "263919"
  },
  {
    "text": "bringing rust to particularly safety critical sectors that is the job of a subsidiary",
    "start": "263919",
    "end": "272080"
  },
  {
    "text": "called critical section and that is a",
    "start": "272080",
    "end": "277759"
  },
  {
    "text": "project that we want to succeed in in the next few years 2020 to 2023 is the date when",
    "start": "277759",
    "end": "284400"
  },
  {
    "text": "we want to see rust on course about this workshop and how it's going",
    "start": "284400",
    "end": "290479"
  },
  {
    "text": "to work because i only have two hours the way i'm going to do this is in a",
    "start": "290479",
    "end": "297840"
  },
  {
    "text": "code along style if you want to you can just watch me doing things and talking about it",
    "start": "297840",
    "end": "304080"
  },
  {
    "text": "but also i highly encourage you to have a text buffer open and just code along also like if you've got a",
    "start": "304080",
    "end": "310240"
  },
  {
    "text": "minute and some bandwidth you can try to like take chances and start developing",
    "start": "310240",
    "end": "315680"
  },
  {
    "text": "in a certain direction or not and just try things out and please ask",
    "start": "315680",
    "end": "322400"
  },
  {
    "text": "questions in chat doing that i've made sure that the example is small enough that i have ample time",
    "start": "322400",
    "end": "328639"
  },
  {
    "text": "to actually go and talk about these kind of things i'll also be",
    "start": "328639",
    "end": "334560"
  },
  {
    "text": "relying on a little of the experience of the previous speakers that they have shared particularly",
    "start": "334560",
    "end": "340560"
  },
  {
    "text": "nell's talk about borrowing and working with the borrower checker",
    "start": "340560",
    "end": "345600"
  },
  {
    "text": "which i will show practical applications of and the example is betraying really",
    "start": "345600",
    "end": "352800"
  },
  {
    "text": "simple um what we want to build in the next two hours is just a small server that",
    "start": "352800",
    "end": "358560"
  },
  {
    "text": "accepts tcp connections not even http connections um",
    "start": "358560",
    "end": "364880"
  },
  {
    "text": "then read one line from the incoming stream either until the first new line or until the",
    "start": "364880",
    "end": "370880"
  },
  {
    "text": "input stream closes for the sake of the exercise it's okay to just trim trading spaces",
    "start": "370880",
    "end": "377520"
  },
  {
    "text": "of the incoming messages and then if the input is an empty string",
    "start": "377520",
    "end": "383680"
  },
  {
    "text": "we're going to store the string internally somewhere so that we have some amount of state and if it is an empty string we'll",
    "start": "383680",
    "end": "389759"
  },
  {
    "text": "interpret it as give me one of those messages that someone previously sent and then we want to start improving on",
    "start": "389759",
    "end": "396880"
  },
  {
    "text": "that by adding for example threading or experiencing rest concurrency safety we'll see how far we get",
    "start": "396880",
    "end": "403759"
  },
  {
    "text": "and that is the reason why i use this example is",
    "start": "403759",
    "end": "409280"
  },
  {
    "text": "because it shows every small issue that we're going to deal with at precisely one location",
    "start": "409280",
    "end": "415919"
  },
  {
    "text": "it is simple but it allows us to always come back and you can keep that and rebuild it and rebuild",
    "start": "415919",
    "end": "422000"
  },
  {
    "text": "it and rebuild it trying out new things that you learned because once you once you got used to the",
    "start": "422000",
    "end": "427840"
  },
  {
    "text": "example it's um it's easy to rebuild and",
    "start": "427840",
    "end": "433440"
  },
  {
    "text": "yeah that's uh that's about it and along the way we will actually learn",
    "start": "433440",
    "end": "440000"
  },
  {
    "text": "how rust's ownership model does not only um manage memory",
    "start": "440000",
    "end": "447199"
  },
  {
    "text": "but also for example other resources like network connections we're going to learn mutable and",
    "start": "447199",
    "end": "453680"
  },
  {
    "text": "immutable references and how they work and how i can for example work with them",
    "start": "453680",
    "end": "459919"
  },
  {
    "text": "in a dynamic setting where need to assume multiple connections to be currently being handled",
    "start": "459919",
    "end": "468000"
  },
  {
    "text": "and also some basic concurrency safety few mutexes and smart pointers",
    "start": "468000",
    "end": "476840"
  },
  {
    "text": "so thank you um before i start i want to",
    "start": "476840",
    "end": "482960"
  },
  {
    "text": "give the chance for a first round of quick questions just quick fire questions",
    "start": "482960",
    "end": "488639"
  },
  {
    "text": "not long ones someone feels need for clarity",
    "start": "488639",
    "end": "493840"
  },
  {
    "text": "okay thank you",
    "start": "496639",
    "end": "502560"
  },
  {
    "text": "spontaneous slides i am going to try to",
    "start": "507599",
    "end": "514399"
  },
  {
    "text": "remove myself from the stage if that's possible",
    "start": "514399",
    "end": "522640"
  },
  {
    "text": "doesn't seem like",
    "start": "525120",
    "end": "528080"
  },
  {
    "text": "then it'll have to do here um because i would actually like to work",
    "start": "531200",
    "end": "537120"
  },
  {
    "text": "with my full screen here i hope i'm going to increase for that reason",
    "start": "537120",
    "end": "545040"
  },
  {
    "text": "the font size here a little even if that ends up being painfully large",
    "start": "545040",
    "end": "550240"
  },
  {
    "text": "and give myself a little bit more space to the right",
    "start": "550240",
    "end": "563839"
  },
  {
    "text": "let's do it that way i'll work full screen with the text editor and",
    "start": "566720",
    "end": "573920"
  },
  {
    "text": "then i need to take care with my with the rest of my window management the white window that you're seeing here",
    "start": "574800",
    "end": "580480"
  },
  {
    "text": "is one that i'm going to use for explanatory drawings",
    "start": "580480",
    "end": "587200"
  },
  {
    "text": "so that we can visualize a little bit of around what's happening",
    "start": "587200",
    "end": "594079"
  },
  {
    "text": "and first of all i'm going to close this part here",
    "start": "595360",
    "end": "602399"
  },
  {
    "text": "um there's one question",
    "start": "602959",
    "end": "607839"
  },
  {
    "text": "i can turn off the camera says three but this uh keeps my",
    "start": "608240",
    "end": "615519"
  },
  {
    "text": "window on at least at my side yep okay um",
    "start": "615519",
    "end": "623760"
  },
  {
    "text": "there's a question is there a ripple for this to follow along um yes you can",
    "start": "623760",
    "end": "633040"
  },
  {
    "text": "there might be some slight divergences but you can go for",
    "start": "633040",
    "end": "638160"
  },
  {
    "text": "here this is actually um it's been",
    "start": "640800",
    "end": "647680"
  },
  {
    "text": "i'm using this as an example since a couple of years and um there you can see it even",
    "start": "647680",
    "end": "654399"
  },
  {
    "text": "like collected in steps",
    "start": "654399",
    "end": "661839"
  },
  {
    "text": "um i will also share um share code afterwards there's um",
    "start": "663360",
    "end": "669760"
  },
  {
    "text": "one question here um about what's the best text editor for rust",
    "start": "669760",
    "end": "675839"
  },
  {
    "text": "them or i personally use vs code for a number of reasons um",
    "start": "675839",
    "end": "683519"
  },
  {
    "text": "but you can basically use any that supports a plugin from rust analyzer",
    "start": "683519",
    "end": "692000"
  },
  {
    "text": "i'll share a link in chat",
    "start": "693600",
    "end": "698720"
  },
  {
    "text": "sorry for me clicking",
    "start": "699760",
    "end": "703839"
  },
  {
    "text": "and it has set up instructions for your favorite text editor",
    "start": "705120",
    "end": "710320"
  },
  {
    "text": "and if you feel and if you if you are already using",
    "start": "711360",
    "end": "718800"
  },
  {
    "text": "intellij or intellij c line especially i can recommend you sticking",
    "start": "718800",
    "end": "724560"
  },
  {
    "text": "with that and installing the rust plugin it's also questions in the qa section",
    "start": "724560",
    "end": "730980"
  },
  {
    "text": "[Music] um as beginner you will be able to follow along this workshop",
    "start": "730980",
    "end": "736320"
  },
  {
    "text": "yeah definitely um if will we use the standard clip and we",
    "start": "736320",
    "end": "742320"
  },
  {
    "text": "will look at minifying the result no but i'm happy to take",
    "start": "742320",
    "end": "748560"
  },
  {
    "text": "to take that later feel free to send me a message check and we'll have a look at that as well",
    "start": "748560",
    "end": "756160"
  },
  {
    "text": "okay if you have rust installed and particularly rust up",
    "start": "757120",
    "end": "763440"
  },
  {
    "text": "i promise you to talk a tiny bit about rust up and why it is there um i won't go too much into details but",
    "start": "763440",
    "end": "770000"
  },
  {
    "text": "rust stop is rus toolchain manager and what it does it installs rust compiler",
    "start": "770000",
    "end": "776639"
  },
  {
    "text": "versions for you allows you to switch between them similar to something like rvm or the node version manager",
    "start": "776639",
    "end": "783600"
  },
  {
    "text": "but it also does more and i think that's the important part around this and where it becomes the tool chain manager",
    "start": "783600",
    "end": "789760"
  },
  {
    "text": "so i can first of all i can go and say well stop default and can switch for",
    "start": "789760",
    "end": "796480"
  },
  {
    "text": "example between the nightly rust if i want to or between the stable",
    "start": "796480",
    "end": "803600"
  },
  {
    "text": "which i'm going to use for this course but another thing that it for example allows is",
    "start": "803600",
    "end": "809360"
  },
  {
    "text": "that rust by default all the tooling as cross compilation aware and",
    "start": "809360",
    "end": "816880"
  },
  {
    "text": "rust the rust project ships a number of pre-built targets and for example rostop also",
    "start": "816880",
    "end": "823440"
  },
  {
    "text": "manages these so i do quite a bit of embedded development on these kinds of",
    "start": "823440",
    "end": "830639"
  },
  {
    "text": "ports but that's not the point of this course so i have a number of the targets installed to",
    "start": "830639",
    "end": "837279"
  },
  {
    "text": "insta to compile software for this board and here is my native target i'm on a",
    "start": "837279",
    "end": "845760"
  },
  {
    "text": "windows pc and i use the microsoft visual code back-end there's also one for mean gw",
    "start": "845760",
    "end": "853120"
  },
  {
    "text": "if you want to use that so if you want to use a neutral chain on windows and you prefer that um you see there's",
    "start": "853120",
    "end": "861199"
  },
  {
    "text": "other ones like for example android even like um google's new operating system",
    "start": "861199",
    "end": "869519"
  },
  {
    "text": "fuchsia the experimental one and for example ios so rostop",
    "start": "869519",
    "end": "875839"
  },
  {
    "text": "manages your whole development environment and that's why i recommend using it",
    "start": "875839",
    "end": "881519"
  },
  {
    "text": "there's a some people don't like rust up because you need to install it through a shell",
    "start": "881519",
    "end": "888000"
  },
  {
    "text": "script this is only the case if your operating system or your linux distribution does not yet ship",
    "start": "888000",
    "end": "894079"
  },
  {
    "text": "rust up in its package manager which is if it's available in a package manager the way i recommend that in",
    "start": "894079",
    "end": "903120"
  },
  {
    "text": "difference there we go",
    "start": "903120",
    "end": "908880"
  },
  {
    "text": "in difference to for example the compiler that comes with uh with your linux distribution um",
    "start": "909519",
    "end": "918240"
  },
  {
    "text": "this one is your development this one we consider your development compiler your linux distribution now often",
    "start": "918240",
    "end": "926320"
  },
  {
    "text": "has a rust c version as well this is in general the one that is used to compile",
    "start": "926320",
    "end": "931600"
  },
  {
    "text": "other packages just for the difference on what rustop does and why there's still one",
    "start": "931600",
    "end": "936720"
  },
  {
    "text": "in package managing and this one i would recommend to use if you are actually interested in",
    "start": "936720",
    "end": "942160"
  },
  {
    "text": "testing your software on a specific linux distribution",
    "start": "942160",
    "end": "947920"
  },
  {
    "text": "and one thing that is um",
    "start": "947920",
    "end": "955920"
  },
  {
    "text": "just to quickly address the question by olga what would you recommend as a container base for windows based build",
    "start": "955920",
    "end": "961839"
  },
  {
    "text": "um i usually don't build in containers when i'm working on when i'm",
    "start": "961839",
    "end": "967120"
  },
  {
    "text": "working on windows i use the native target because i'm very interested in cross-platform development that's a",
    "start": "967120",
    "end": "974399"
  },
  {
    "text": "personal habit though i'm a little bit out of the cloud space in the recent years so i can i can actually admit that um",
    "start": "974399",
    "end": "982240"
  },
  {
    "text": "the rust project itself ships docker images though with the compiler in it",
    "start": "982240",
    "end": "988720"
  },
  {
    "text": "and yeah and this is where i would like to get",
    "start": "990959",
    "end": "996079"
  },
  {
    "text": "started so if you have a directory somewhere in which you're",
    "start": "996079",
    "end": "1002240"
  },
  {
    "text": "you're going to take this workshop on i would like you to navigate there and there put in cargo new",
    "start": "1002240",
    "end": "1012399"
  },
  {
    "text": "tcp mailbox and you hit enter there",
    "start": "1015360",
    "end": "1023759"
  },
  {
    "text": "cargo will create us a new binary application so this is something we can run",
    "start": "1023759",
    "end": "1029438"
  },
  {
    "text": "called tcp mailbox i'm going to navigate down and",
    "start": "1029439",
    "end": "1038880"
  },
  {
    "text": "finally open my editor there",
    "start": "1038880",
    "end": "1044079"
  },
  {
    "text": "and give you some seconds to follow",
    "start": "1046240",
    "end": "1053840"
  },
  {
    "text": "so the first thing i would recommend you to do in this directory is",
    "start": "1059280",
    "end": "1067200"
  },
  {
    "text": "put in cargo run",
    "start": "1067200",
    "end": "1070480"
  },
  {
    "text": "and it should build this and print hello world and if that worked your tool chain is working and should",
    "start": "1072880",
    "end": "1078559"
  },
  {
    "text": "continue working through the whole workshop",
    "start": "1078559",
    "end": "1083840"
  },
  {
    "text": "and if anyone has any issues there please let me know in chat and maybe",
    "start": "1083840",
    "end": "1090480"
  },
  {
    "text": "someone has also seen this issue and may help there",
    "start": "1090480",
    "end": "1098159"
  },
  {
    "text": "um also if you do see issues in this process we're interested in the box",
    "start": "1099200",
    "end": "1105840"
  },
  {
    "text": "in the bug report because this should work in all cases",
    "start": "1105840",
    "end": "1111760"
  },
  {
    "text": "and if it doesn't the last project considers this a bug and would like be",
    "start": "1111760",
    "end": "1116960"
  },
  {
    "text": "to know what you ran into",
    "start": "1116960",
    "end": "1123840"
  },
  {
    "text": "let's have a quick look on what's in this directory before we go into the",
    "start": "1124400",
    "end": "1130559"
  },
  {
    "text": "main rs file and we're not going to leave it for most of this course see how far we",
    "start": "1130559",
    "end": "1136559"
  },
  {
    "text": "go so what this creates is um a new cargo project",
    "start": "1136559",
    "end": "1144559"
  },
  {
    "text": "cargo is rust's build tool build management and dependency management tool and",
    "start": "1144559",
    "end": "1150400"
  },
  {
    "text": "it has a manifest file called cargo tunnel tommel tom's obvious minimal",
    "start": "1150400",
    "end": "1157280"
  },
  {
    "text": "language a kind of an any file language i think most people know tamil now nowadays and what it takes",
    "start": "1157280",
    "end": "1164960"
  },
  {
    "text": "is a top level key called package gives the package some metadata the name",
    "start": "1164960",
    "end": "1172960"
  },
  {
    "text": "version this key selects the language profile the ros compiler",
    "start": "1172960",
    "end": "1178640"
  },
  {
    "text": "understands two language profiles the 2018 and the 2015 profile",
    "start": "1178640",
    "end": "1184160"
  },
  {
    "text": "you can completely ignore the 2015 profile nowadays no one uses it anymore except",
    "start": "1184160",
    "end": "1191200"
  },
  {
    "text": "in very niche cases where code hasn't been ported over yet so this",
    "start": "1191200",
    "end": "1197760"
  },
  {
    "text": "is something what i would say learn or need if you're learning rust learning rust 2018 and",
    "start": "1197760",
    "end": "1202880"
  },
  {
    "text": "don't bother unless you probably never run into the case where 2015 becomes relevant for you",
    "start": "1202880",
    "end": "1210640"
  },
  {
    "text": "and below we have a dependency section and in this dependency section we can",
    "start": "1210640",
    "end": "1217520"
  },
  {
    "text": "express dependencies similar to rubygems npm any other",
    "start": "1217520",
    "end": "1225200"
  },
  {
    "text": "package manager but we're not going to express one now we would like to",
    "start": "1225200",
    "end": "1231919"
  },
  {
    "text": "start coding and for that reason we're going to go into the main rs file",
    "start": "1231919",
    "end": "1239280"
  },
  {
    "text": "and we're going to",
    "start": "1239280",
    "end": "1244320"
  },
  {
    "text": "fold the left side here so that it doesn't take up",
    "start": "1246840",
    "end": "1253280"
  },
  {
    "text": "space and yeah so this is where i would like",
    "start": "1253280",
    "end": "1259679"
  },
  {
    "text": "to get started so the first thing",
    "start": "1259679",
    "end": "1264799"
  },
  {
    "text": "that we need to solve is we want to set up a tcp server",
    "start": "1264799",
    "end": "1272240"
  },
  {
    "text": "that starts listening for connections",
    "start": "1272240",
    "end": "1277840"
  },
  {
    "text": "and for every new connection",
    "start": "1284480",
    "end": "1290720"
  },
  {
    "text": "does something",
    "start": "1290720",
    "end": "1293440"
  },
  {
    "text": "so that's our first initial goal first thing we're going to do is write a",
    "start": "1302159",
    "end": "1308880"
  },
  {
    "text": "small accepting loop that just on every new connection prints",
    "start": "1308880",
    "end": "1314240"
  },
  {
    "text": "hi new connection",
    "start": "1314240",
    "end": "1319840"
  },
  {
    "text": "for that um i will i can highly recommend after this course",
    "start": "1322400",
    "end": "1328799"
  },
  {
    "text": "or actually follow down a little the types that i'm going to use here and",
    "start": "1328799",
    "end": "1334000"
  },
  {
    "text": "have a look at their documentation in the standard lab i'm not going to do that for the sake of time but our standard",
    "start": "1334000",
    "end": "1340400"
  },
  {
    "text": "clip is completely documented and again if you read something in the",
    "start": "1340400",
    "end": "1346799"
  },
  {
    "text": "documentation and it doesn't immediately click or you have a hard time understanding it would also be very interested",
    "start": "1346799",
    "end": "1353039"
  },
  {
    "text": "in a bug report um",
    "start": "1353039",
    "end": "1356320"
  },
  {
    "text": "um",
    "start": "1361360",
    "end": "1363679"
  },
  {
    "text": "so the first thing we need to do is in some way get our start listening for network",
    "start": "1367440",
    "end": "1374000"
  },
  {
    "text": "connections and the way we do this",
    "start": "1374000",
    "end": "1380000"
  },
  {
    "text": "is we use a type called tcp listener not pcl listener",
    "start": "1380000",
    "end": "1389760"
  },
  {
    "text": "you can see rust analyzer will immediately tell me standard do you mean standard net tcp",
    "start": "1389760",
    "end": "1395440"
  },
  {
    "text": "listener that's the one",
    "start": "1395440",
    "end": "1398399"
  },
  {
    "text": "and if i click that one it will automatically import it in rus you need to declare every type that you",
    "start": "1400640",
    "end": "1406159"
  },
  {
    "text": "use in an unqualified way so if i just want to use the name tcp listener i have to import",
    "start": "1406159",
    "end": "1412559"
  },
  {
    "text": "use standard net tcp listener",
    "start": "1412559",
    "end": "1417840"
  },
  {
    "text": "and the function that i need to bind to a socket is what",
    "start": "1419520",
    "end": "1426559"
  },
  {
    "text": "the bind or to an address is the bind function",
    "start": "1426559",
    "end": "1431840"
  },
  {
    "text": "for eseg i will use a tcp for e4 address",
    "start": "1433520",
    "end": "1442400"
  },
  {
    "text": "but you can also enter any other kind understands ipv6 whatever um",
    "start": "1442400",
    "end": "1450400"
  },
  {
    "text": "can do so and we need to bind",
    "start": "1450400",
    "end": "1458080"
  },
  {
    "text": "results to a variable",
    "start": "1458080",
    "end": "1461120"
  },
  {
    "text": "now let's have a look at the result type like what we get back",
    "start": "1466159",
    "end": "1473840"
  },
  {
    "text": "if you have a look here listener is now results tcp listener",
    "start": "1478080",
    "end": "1484320"
  },
  {
    "text": "error and that's the first time in russ that we get actually in",
    "start": "1484320",
    "end": "1489360"
  },
  {
    "text": "touch with the result type on the very first line rust has a special or this is actually not special is just",
    "start": "1489360",
    "end": "1496640"
  },
  {
    "text": "a type that is provided by the core library says",
    "start": "1496640",
    "end": "1502480"
  },
  {
    "text": "that extract over things that work or may not so here it says",
    "start": "1502480",
    "end": "1509520"
  },
  {
    "text": "this gives back a result of tcp listener and error the error in this case being the error",
    "start": "1509520",
    "end": "1516559"
  },
  {
    "text": "that for example we were not able to bind to a socket in this case i'm going to use a strategy",
    "start": "1516559",
    "end": "1524320"
  },
  {
    "text": "for result handling is called unwrapping",
    "start": "1524320",
    "end": "1529679"
  },
  {
    "text": "what unwrapping says is either this works or immediately crash for beginners",
    "start": "1529679",
    "end": "1538080"
  },
  {
    "text": "um that sometimes feels like this is a this is a way out like i i ignored the structured error",
    "start": "1538080",
    "end": "1544640"
  },
  {
    "text": "handling that russ does um i do not fully subscribe to that",
    "start": "1544640",
    "end": "1549679"
  },
  {
    "text": "um calling unwrap is basically a statement that if this",
    "start": "1549679",
    "end": "1554720"
  },
  {
    "text": "doesn't work um then the program should immediately quit",
    "start": "1554720",
    "end": "1560240"
  },
  {
    "text": "and shut down in a structured way so it is perfectly fine to do that",
    "start": "1560240",
    "end": "1565600"
  },
  {
    "text": "also for the sake of this session i will actually handle all",
    "start": "1565600",
    "end": "1573039"
  },
  {
    "text": "result types using unwrap why this is actually for even for",
    "start": "1573039",
    "end": "1579840"
  },
  {
    "text": "experienced rust developers an easy first pass i just assume everything works all right",
    "start": "1579840",
    "end": "1586559"
  },
  {
    "text": "and then i can later go look at all of those and wrap calls and turn",
    "start": "1586559",
    "end": "1591840"
  },
  {
    "text": "them into structured error handling because then i know all the errors that could happen in the program that i have",
    "start": "1591840",
    "end": "1597440"
  },
  {
    "text": "and that is a good moment to collect them all and put a more structured error handling",
    "start": "1597440",
    "end": "1603120"
  },
  {
    "text": "on top of that so that is something if we have enough time that i'm actually going to do",
    "start": "1603120",
    "end": "1609679"
  },
  {
    "text": "um so i don't want to omit that part but let's see how far we get",
    "start": "1609679",
    "end": "1616480"
  },
  {
    "text": "so i get a small warning that i'm not using using this uh uh this variable",
    "start": "1620240",
    "end": "1628480"
  },
  {
    "text": "don't let warnings confuse you too much the rust compiler takes care that all varnic warnings are",
    "start": "1628480",
    "end": "1634159"
  },
  {
    "text": "relevant once you're done so currently hey you're not using this i can ignore this warning",
    "start": "1634159",
    "end": "1639520"
  },
  {
    "text": "i will use that variable in a second but once your program is done it is actually good practice to see that",
    "start": "1639520",
    "end": "1646480"
  },
  {
    "text": "it's warning free because again all all warnings should ultimately be",
    "start": "1646480",
    "end": "1652799"
  },
  {
    "text": "relevant um",
    "start": "1652840",
    "end": "1659600"
  },
  {
    "text": "so just on these two quick questions um donald is asking jesse",
    "start": "1661360",
    "end": "1669440"
  },
  {
    "text": "is the ability to have a function called expect",
    "start": "1669440",
    "end": "1675039"
  },
  {
    "text": "and then you can say",
    "start": "1675679",
    "end": "1679440"
  },
  {
    "text": "give a custom error message that is working similar to unwrap that is a choice you can make if you",
    "start": "1680960",
    "end": "1687440"
  },
  {
    "text": "want to um i'm",
    "start": "1687440",
    "end": "1692799"
  },
  {
    "text": "usually because i am not using this like i want to remove this at some point",
    "start": "1692799",
    "end": "1698799"
  },
  {
    "text": "i'm just using unwrap right away and then i'm filling that later um on jack's question why",
    "start": "1698799",
    "end": "1706240"
  },
  {
    "text": "unwrap with this question mark this is possible this is actually",
    "start": "1706240",
    "end": "1711679"
  },
  {
    "text": "something that i will would do once we go to more structured error handling but currently",
    "start": "1711679",
    "end": "1717120"
  },
  {
    "text": "i want everything to just explode at the place where it happens so during doing development i actually",
    "start": "1717120",
    "end": "1723840"
  },
  {
    "text": "like um if um errors have like if errors stop the program at the place where they",
    "start": "1723840",
    "end": "1729039"
  },
  {
    "text": "happen um for uh coding initial coding and debugging i find that more helpful so",
    "start": "1729039",
    "end": "1735600"
  },
  {
    "text": "they have different uh different behavior question mark is is a different way of error handling and",
    "start": "1735600",
    "end": "1744640"
  },
  {
    "text": "the question of victor will russia throw warnings for easier search of on-wrap usage",
    "start": "1744799",
    "end": "1750559"
  },
  {
    "text": "rust has a code linter called clippy that actually has a lint that says",
    "start": "1750559",
    "end": "1756399"
  },
  {
    "text": "i like one on unwrap so you can use that",
    "start": "1756399",
    "end": "1761840"
  },
  {
    "text": "okay thanks for the questions",
    "start": "1764840",
    "end": "1770398"
  },
  {
    "text": "let's continue so we said that we want to uh we want to accept all the incoming",
    "start": "1771760",
    "end": "1778720"
  },
  {
    "text": "connections and the way this works is we actually start looping",
    "start": "1778720",
    "end": "1787760"
  },
  {
    "text": "and listener has a method called incoming and what incoming does takes the",
    "start": "1792640",
    "end": "1798799"
  },
  {
    "text": "listener and turns it into an iterator and this iterator can be used to iterate",
    "start": "1798799",
    "end": "1806000"
  },
  {
    "text": "over all incoming connections so i can use a for loop here",
    "start": "1806000",
    "end": "1811039"
  },
  {
    "text": "and the reason why i'm saying connection attempt is the um",
    "start": "1811039",
    "end": "1819279"
  },
  {
    "text": "this only represents the attempt to connect so later if we were to write a fully",
    "start": "1819279",
    "end": "1826080"
  },
  {
    "text": "fledged service this allows us for example to react to",
    "start": "1826080",
    "end": "1831600"
  },
  {
    "text": "to the condition that the kernel started rejecting connections for whatever reason i will see still see their rejected",
    "start": "1832320",
    "end": "1840640"
  },
  {
    "text": "connections here and this is the one place where i would actually like to look at how that what",
    "start": "1840640",
    "end": "1845840"
  },
  {
    "text": "that looks like if we look here connection attempt is again a result of a tcp stream",
    "start": "1845840",
    "end": "1853679"
  },
  {
    "text": "this is now the connection has worked and an error and i would like to",
    "start": "1853679",
    "end": "1861840"
  },
  {
    "text": "here to handle this case so that you see how rust enables us to handle this case in a",
    "start": "1861840",
    "end": "1868720"
  },
  {
    "text": "structured fashion and the way you do that is you use a",
    "start": "1868720",
    "end": "1874159"
  },
  {
    "text": "match statement rust's match statements allow us to look at these types called um yeah these",
    "start": "1874159",
    "end": "1882240"
  },
  {
    "text": "results types and also all other types that we're going to introduce are very similar form i'll introduce one",
    "start": "1882240",
    "end": "1888000"
  },
  {
    "text": "later and",
    "start": "1888000",
    "end": "1893840"
  },
  {
    "text": "say match connection attempt and if i have a look here this one is an",
    "start": "1894640",
    "end": "1901519"
  },
  {
    "text": "error currently the arrow being missing matcharm",
    "start": "1901519",
    "end": "1907440"
  },
  {
    "text": "so what it tells me is there's multiple options that there's multiple alternatives that you need to cover which that type could",
    "start": "1907440",
    "end": "1914320"
  },
  {
    "text": "represent and i can easily get them inserted by my ide by clicking",
    "start": "1914320",
    "end": "1919679"
  },
  {
    "text": "here left and say fill my charms and now i have those two conditions",
    "start": "1919679",
    "end": "1927039"
  },
  {
    "text": "and results is a type that says either everything went okay",
    "start": "1927039",
    "end": "1934080"
  },
  {
    "text": "then you get the loft value or there was an error then you get the right value",
    "start": "1934080",
    "end": "1940080"
  },
  {
    "text": "let's start with the error first i can bind this error to a variable called e",
    "start": "1940080",
    "end": "1949039"
  },
  {
    "text": "and then use e println so similar to the printer ln that we've",
    "start": "1949039",
    "end": "1954559"
  },
  {
    "text": "seen just at the beginning with the hello world we can use eprintellen to",
    "start": "1954559",
    "end": "1960960"
  },
  {
    "text": "print arrow connecting oh and e-printer line",
    "start": "1960960",
    "end": "1967039"
  },
  {
    "text": "prints to standard error instead of standard out",
    "start": "1967039",
    "end": "1971518"
  },
  {
    "text": "and using the interpolation syntax here",
    "start": "1972240",
    "end": "1977360"
  },
  {
    "text": "i can print e there's a question in the chat was that does the bang mean an e-printer lm",
    "start": "1977360",
    "end": "1985120"
  },
  {
    "text": "iprinterland and printerland are macros in rust and macros always need to be called with a",
    "start": "1985120",
    "end": "1992080"
  },
  {
    "text": "bang on them that's it",
    "start": "1992080",
    "end": "1996720"
  },
  {
    "text": "so you can you can get the rust compiler to actually expand this macro for you",
    "start": "1998000",
    "end": "2003519"
  },
  {
    "text": "and see what it does in the back what it does it gets the standard error handle locks on it then writes to it and",
    "start": "2003519",
    "end": "2009360"
  },
  {
    "text": "releases the lock for synchronization reasons you could start writing",
    "start": "2009360",
    "end": "2015120"
  },
  {
    "text": "raw um and yes you can add custom macros",
    "start": "2015120",
    "end": "2020320"
  },
  {
    "text": "like in c though macros and rust are not um textual replacement there's a",
    "start": "2020320",
    "end": "2028080"
  },
  {
    "text": "there's a structured macro language behind that",
    "start": "2028080",
    "end": "2033840"
  },
  {
    "text": "and in the case of ok now we get our stream so this is our",
    "start": "2036559",
    "end": "2042320"
  },
  {
    "text": "connecting stream and this is where i want to exit this function here",
    "start": "2042320",
    "end": "2049040"
  },
  {
    "text": "the main function and call a function called handle client now we have a connected",
    "start": "2049040",
    "end": "2055839"
  },
  {
    "text": "client and pass that stream in",
    "start": "2055839",
    "end": "2061839"
  },
  {
    "text": "and the function is not here but we can again use our ide",
    "start": "2064800",
    "end": "2072158"
  },
  {
    "text": "or write it by hand to generate the handle client function here",
    "start": "2072159",
    "end": "2077200"
  },
  {
    "text": "there we go now we have this handle client function",
    "start": "2081280",
    "end": "2086480"
  },
  {
    "text": "and can do whatever we want here first of all one",
    "start": "2086480",
    "end": "2091599"
  },
  {
    "text": "thing that i would like to do is remove the standard net here",
    "start": "2091599",
    "end": "2096638"
  },
  {
    "text": "and import the tcp stream directly so that i don't",
    "start": "2096639",
    "end": "2102240"
  },
  {
    "text": "need to fully qualify it because i'm going to use it again",
    "start": "2102240",
    "end": "2107359"
  },
  {
    "text": "for other functions",
    "start": "2107359",
    "end": "2110240"
  },
  {
    "text": "rust has this nice to do macro that allows you to have parts of your code",
    "start": "2114079",
    "end": "2120640"
  },
  {
    "text": "unwritten and if you hit to do your code will just crash and say there's a there's an open to do here",
    "start": "2120640",
    "end": "2127680"
  },
  {
    "text": "so it's a piece of convenience here and there's an important thing here rust",
    "start": "2128320",
    "end": "2135200"
  },
  {
    "text": "has famously this ownership system and if you just pass in a bear type",
    "start": "2135200",
    "end": "2144160"
  },
  {
    "text": "into a function we say it takes ownership so this function now takes ownership of the connection",
    "start": "2144160",
    "end": "2153200"
  },
  {
    "text": "and what we can now do is example we can print here",
    "start": "2153440",
    "end": "2160800"
  },
  {
    "text": "client connected",
    "start": "2161040",
    "end": "2166240"
  },
  {
    "text": "and then go and actually start running the program",
    "start": "2168720",
    "end": "2173838"
  },
  {
    "text": "so let's run it",
    "start": "2177680",
    "end": "2180480"
  },
  {
    "text": "and let's connect i'm just going to use telnet here",
    "start": "2185200",
    "end": "2191680"
  },
  {
    "text": "sorry",
    "start": "2192320",
    "end": "2194640"
  },
  {
    "text": "now i got myself",
    "start": "2198720",
    "end": "2201838"
  },
  {
    "text": "sorry cool for quit um",
    "start": "2207599",
    "end": "2215440"
  },
  {
    "text": "sorry for that",
    "start": "2215440",
    "end": "2218160"
  },
  {
    "text": "and let's connect to 7878",
    "start": "2222640",
    "end": "2226559"
  },
  {
    "text": "and it will",
    "start": "2227680",
    "end": "2230319"
  },
  {
    "text": "sorry",
    "start": "2233200",
    "end": "2235440"
  },
  {
    "text": "and we'll have a connected client here also immediately quit",
    "start": "2239280",
    "end": "2247760"
  },
  {
    "text": "and the reason for this being is precisely rust's ownership model",
    "start": "2250079",
    "end": "2255200"
  },
  {
    "text": "i have not explicitly said goodbye to the client but um this handle client function has",
    "start": "2255200",
    "end": "2261280"
  },
  {
    "text": "taken ownership of this currently currently active tcp stream",
    "start": "2261280",
    "end": "2266800"
  },
  {
    "text": "for that client and one thing that rust does implicitly but i can also annotate",
    "start": "2266800",
    "end": "2272800"
  },
  {
    "text": "that explicitly is once an own value falls out of scope",
    "start": "2272800",
    "end": "2280640"
  },
  {
    "text": "it will deregister its interest in the resource being managed which in this case is the",
    "start": "2280640",
    "end": "2285920"
  },
  {
    "text": "connection so the moment the handle client function ends after printing to standard out",
    "start": "2285920",
    "end": "2292240"
  },
  {
    "text": "it will throw the stream away and in the process of it closing in so",
    "start": "2292240",
    "end": "2300640"
  },
  {
    "text": "yeah that cut also works",
    "start": "2303200",
    "end": "2306800"
  },
  {
    "text": "yeah so um this allows",
    "start": "2309440",
    "end": "2317200"
  },
  {
    "text": "that makes sure that we cannot accidentally forget to close this tcp stream",
    "start": "2317200",
    "end": "2324480"
  },
  {
    "text": "and we'll make sure that we that we disconnect the client properly",
    "start": "2324480",
    "end": "2330240"
  },
  {
    "text": "the moment we let the stream drop",
    "start": "2330240",
    "end": "2334320"
  },
  {
    "text": "i will remove that again this is just a that was just an illustration so this is our first",
    "start": "2335680",
    "end": "2340960"
  },
  {
    "text": "experience with ownership like direct we make this connection",
    "start": "2340960",
    "end": "2346720"
  },
  {
    "text": "attempt we see if it worked if it worked",
    "start": "2346720",
    "end": "2351839"
  },
  {
    "text": "we'll take the connected tcp stream out and we call a function called handle client and at this moment we pass on",
    "start": "2351839",
    "end": "2359040"
  },
  {
    "text": "the ownership of the stream and say okay now you are completely responsible for managing that",
    "start": "2359040",
    "end": "2364960"
  },
  {
    "text": "um and",
    "start": "2364960",
    "end": "2369838"
  },
  {
    "text": "this has an um expression in the um actually in software",
    "start": "2370480",
    "end": "2376960"
  },
  {
    "text": "architecture in that we have our",
    "start": "2376960",
    "end": "2383440"
  },
  {
    "text": "bare network system here on the left sorry so a connection handler or",
    "start": "2383440",
    "end": "2391599"
  },
  {
    "text": "a system that handles our network connections and we have a handler for those connections on the other side and if we pass ownership",
    "start": "2391599",
    "end": "2399440"
  },
  {
    "text": "that means we express a low coupling between those two",
    "start": "2400320",
    "end": "2406800"
  },
  {
    "text": "components the net component is now not responsible for handling the stream anymore at all the handler is now",
    "start": "2406800",
    "end": "2414880"
  },
  {
    "text": "responsible for doing that and that ownership transfer is complete in the sense of the one",
    "start": "2414880",
    "end": "2420960"
  },
  {
    "text": "component is not allowed to use it anymore i can actually try that out if i were to try",
    "start": "2420960",
    "end": "2426960"
  },
  {
    "text": "doing something with stream over here for example",
    "start": "2426960",
    "end": "2433920"
  },
  {
    "text": "try to debug print it just even that",
    "start": "2434880",
    "end": "2439838"
  },
  {
    "text": "i'm not allowed to you will see an error that says value borrowed here after move",
    "start": "2442160",
    "end": "2449520"
  },
  {
    "text": "and it will call me out here you have given up this value and this is the way rust structures",
    "start": "2449520",
    "end": "2456720"
  },
  {
    "text": "programs values flowing through the program and components giving up ownership and",
    "start": "2456720",
    "end": "2463280"
  },
  {
    "text": "giving it to another component",
    "start": "2463280",
    "end": "2467839"
  },
  {
    "text": "i agree fullscreen would help here i did not anticipate i'm very sorry",
    "start": "2472640",
    "end": "2478560"
  },
  {
    "text": "um let me increase font size a little more i hope that that",
    "start": "2478839",
    "end": "2484720"
  },
  {
    "text": "makes things better okay so now that we've got this tcp",
    "start": "2484720",
    "end": "2490880"
  },
  {
    "text": "stream i want to start doing what we actually wanted to do",
    "start": "2490880",
    "end": "2496400"
  },
  {
    "text": "so first of all let's read",
    "start": "2496400",
    "end": "2500960"
  },
  {
    "text": "let's read a line from this tcp stream",
    "start": "2502400",
    "end": "2509838"
  },
  {
    "text": "and i'm going to talk about this in a second",
    "start": "2510240",
    "end": "2517280"
  },
  {
    "text": "and we're going to generate a readline function and what we're going to have back from",
    "start": "2518480",
    "end": "2524960"
  },
  {
    "text": "this function is a string so this is the line that we read",
    "start": "2524960",
    "end": "2531680"
  },
  {
    "text": "and um this is a place where i um",
    "start": "2535200",
    "end": "2543040"
  },
  {
    "text": "need to yeah get a little bit like pull a little bit out of my ap api",
    "start": "2543040",
    "end": "2548079"
  },
  {
    "text": "knowledge reading a line from an input stream is not available on raw input streams",
    "start": "2548079",
    "end": "2555200"
  },
  {
    "text": "directly i actually need to use buffered reading if you're used to java or",
    "start": "2555200",
    "end": "2562880"
  },
  {
    "text": "other languages you may may know the feeling you we need to wrap",
    "start": "2562880",
    "end": "2568800"
  },
  {
    "text": "the stream in an inner reader that allows us to buffer",
    "start": "2568800",
    "end": "2574240"
  },
  {
    "text": "this kind of data so",
    "start": "2574240",
    "end": "2579839"
  },
  {
    "text": "we want a buffered reader and that is available under the name buff reader",
    "start": "2581040",
    "end": "2589200"
  },
  {
    "text": "and i can create this again with a new function passing in this stream",
    "start": "2591040",
    "end": "2596960"
  },
  {
    "text": "now what does this ampersand mean this ampersand means i am borrowing here i'm giving up i'm",
    "start": "2603040",
    "end": "2609920"
  },
  {
    "text": "giving i'm just giving a reference of the tcp stream to the sweet line function why do i want to",
    "start": "2609920",
    "end": "2615440"
  },
  {
    "text": "use this i want to reuse the stream later i maybe want to write to the client again",
    "start": "2615440",
    "end": "2621359"
  },
  {
    "text": "and do other things with the stream so i do not want to throw it away so i do not want to pass on the handling",
    "start": "2621359",
    "end": "2627680"
  },
  {
    "text": "of this resource so i give readline the ability to use that resource",
    "start": "2627680",
    "end": "2632720"
  },
  {
    "text": "through reference but i do not want to give it away so every time you see a type that has",
    "start": "2632720",
    "end": "2639119"
  },
  {
    "text": "a kind of sigil ampersand or something like that and rust that means this is where the referencing system",
    "start": "2639119",
    "end": "2646720"
  },
  {
    "text": "takes place",
    "start": "2646720",
    "end": "2649838"
  },
  {
    "text": "there's a question here does the stream pass the buffer reader reference i am choosing to pass the",
    "start": "2654720",
    "end": "2662000"
  },
  {
    "text": "buffer here a reference it would actually take both um both ways but that's getting a little bit into um",
    "start": "2662000",
    "end": "2669200"
  },
  {
    "text": "the woods here so i am choosing to to pass in a uh a reference here",
    "start": "2669200",
    "end": "2677838"
  },
  {
    "text": "now buffered reader now has a function",
    "start": "2678880",
    "end": "2683920"
  },
  {
    "text": "that is called readline that correctly reads uh",
    "start": "2683920",
    "end": "2692720"
  },
  {
    "text": "sorry that correctly reads a line",
    "start": "2692720",
    "end": "2700800"
  },
  {
    "text": "with all kinds of new line careers return new line whatever doesn't matter",
    "start": "2700800",
    "end": "2707200"
  },
  {
    "text": "now you see this takes a um this takes a buff",
    "start": "2707599",
    "end": "2714480"
  },
  {
    "text": "argument and this is the actual buffer that we need to that we want to write to and as its read",
    "start": "2714480",
    "end": "2721359"
  },
  {
    "text": "line it reads into a string buffer you can see here ampersand mut string",
    "start": "2721359",
    "end": "2727838"
  },
  {
    "text": "and this is where we meet mutability and rust",
    "start": "2728560",
    "end": "2734720"
  },
  {
    "text": "we need to create this buffer we call it buff",
    "start": "2740319",
    "end": "2747839"
  },
  {
    "text": "let me buff is string qualcomm new i get this new buffer and how do i pass",
    "start": "2748160",
    "end": "2753920"
  },
  {
    "text": "it in and this is a second kind of",
    "start": "2753920",
    "end": "2760560"
  },
  {
    "text": "reference that rust has rust has a difference between mutable references and immutable ones",
    "start": "2760560",
    "end": "2767520"
  },
  {
    "text": "and both are not allowed to be active at the same time you need to either mutable reference or immunity reference you can also if you",
    "start": "2767520",
    "end": "2774960"
  },
  {
    "text": "have experience with concurrency safety you can already see where this is going rust does not allow you to have",
    "start": "2774960",
    "end": "2781680"
  },
  {
    "text": "to look at data and to mute it at the same time",
    "start": "2781680",
    "end": "2786640"
  },
  {
    "text": "and now that we have read this line",
    "start": "2786880",
    "end": "2792000"
  },
  {
    "text": "we return it",
    "start": "2794079",
    "end": "2796800"
  },
  {
    "text": "and the other thing that i need to do i also need to mark the buffered reader as mutable",
    "start": "2800160",
    "end": "2805680"
  },
  {
    "text": "because this buffered reader",
    "start": "2805680",
    "end": "2812640"
  },
  {
    "text": "has a state inside the buffer so reading",
    "start": "2815440",
    "end": "2824960"
  },
  {
    "text": "sorry so reading will write to that buffer and we'll mutate it",
    "start": "2828839",
    "end": "2836400"
  },
  {
    "text": "if that one fails currently we unwrap we don't handle this this returns a",
    "start": "2837839",
    "end": "2842960"
  },
  {
    "text": "result um the question whether like the answer",
    "start": "2842960",
    "end": "2850880"
  },
  {
    "text": "that kevin gave i mean to uh to ask whether why we need to call this",
    "start": "2850880",
    "end": "2857839"
  },
  {
    "text": "a second time this is different this is the variable is mutable and we're allowed to mutate it and",
    "start": "2857839",
    "end": "2863920"
  },
  {
    "text": "as kevin says this is correct this is now we take immutable reference to it",
    "start": "2863920",
    "end": "2869119"
  },
  {
    "text": "so for this to be allowed it needs to be immutable but we need to reset we need to state",
    "start": "2869119",
    "end": "2875520"
  },
  {
    "text": "that we're taking this reference this is sometimes seen the question",
    "start": "2875520",
    "end": "2883119"
  },
  {
    "text": "whether this can be inferred is a is a good one it was actually investigated whether we want this to be",
    "start": "2883119",
    "end": "2889599"
  },
  {
    "text": "inferred and the decision was actually not so we want especially at the place where",
    "start": "2889599",
    "end": "2896319"
  },
  {
    "text": "we go from value to reference we want to be visible this is a discussion that has",
    "start": "2896319",
    "end": "2903440"
  },
  {
    "text": "been had maybe in the future this question this is this discussion will be had again rust is a",
    "start": "2903440",
    "end": "2910000"
  },
  {
    "text": "verbose language i can definitely say as much and",
    "start": "2910000",
    "end": "2915280"
  },
  {
    "text": "has no problem with that okay now this is reading exactly",
    "start": "2915280",
    "end": "2922880"
  },
  {
    "text": "one line from the input in a function",
    "start": "2922880",
    "end": "2929838"
  },
  {
    "text": "the next thing that we would like to do is apply our very simple parsing rules so",
    "start": "2933760",
    "end": "2940960"
  },
  {
    "text": "what we get back here we get the line back",
    "start": "2940960",
    "end": "2946559"
  },
  {
    "text": "and what we want next is figure out",
    "start": "2947440",
    "end": "2954079"
  },
  {
    "text": "what the actual request is that we have",
    "start": "2955680",
    "end": "2971680"
  },
  {
    "text": "um ariane has the problem i'm getting there unknown method named redline found for buff reader tcpa um reference",
    "start": "2971680",
    "end": "2978480"
  },
  {
    "text": "tcp stream in current scope yes that means you need to import a trait i'm sorry that i've been jumping",
    "start": "2978480",
    "end": "2986319"
  },
  {
    "text": "over there because the ide did it automatically and",
    "start": "2986319",
    "end": "2993359"
  },
  {
    "text": "i missed stating that you need use standard o above read there as well which is the",
    "start": "2993359",
    "end": "3000000"
  },
  {
    "text": "buffered reading interface so buffered reader is a concrete implementation of buffered reading",
    "start": "3000000",
    "end": "3006480"
  },
  {
    "text": "but buffered reading is a general interface that's available",
    "start": "3006480",
    "end": "3013839"
  },
  {
    "text": "if you compile that one if you would compile it on the command line then the compiler would actually give",
    "start": "3015200",
    "end": "3021520"
  },
  {
    "text": "you a list of traits that it knows that implement this function the reason why you need to import it is",
    "start": "3021520",
    "end": "3028319"
  },
  {
    "text": "for forward for forward compatibility so if we were",
    "start": "3028319",
    "end": "3033440"
  },
  {
    "text": "to add for example a another function of a same name in a different interface importing it explicitly makes it even in",
    "start": "3033440",
    "end": "3040559"
  },
  {
    "text": "the future now knowing which one you mean that is a strategy that rust applies",
    "start": "3040559",
    "end": "3046480"
  },
  {
    "text": "a lot to make sure that the code you write um is actually compiling even in the",
    "start": "3046480",
    "end": "3053119"
  },
  {
    "text": "face of interface changes in years out unless someone deliberately breaks existing interface that obviously",
    "start": "3053119",
    "end": "3059440"
  },
  {
    "text": "it doesn't work so if you read line would change its its type signature its function",
    "start": "3059440",
    "end": "3064559"
  },
  {
    "text": "signature then that would break",
    "start": "3064559",
    "end": "3069839"
  },
  {
    "text": "okay so",
    "start": "3070000",
    "end": "3074240"
  },
  {
    "text": "let's apply our request parsing",
    "start": "3078800",
    "end": "3083839"
  },
  {
    "text": "again this is a very simple example for the sake of the tutorial um calling this",
    "start": "3087119",
    "end": "3094240"
  },
  {
    "text": "request parsing is probably stretching it but the role of it is the same",
    "start": "3094240",
    "end": "3100960"
  },
  {
    "text": "and here i want to return a structure type and",
    "start": "3103599",
    "end": "3110800"
  },
  {
    "text": "you've i talked about these uh types that rust has that express",
    "start": "3110800",
    "end": "3116720"
  },
  {
    "text": "alternatives and would actually like to define one myself so what i would like to",
    "start": "3116720",
    "end": "3125119"
  },
  {
    "text": "um to build is a type that says either you wanted to",
    "start": "3125119",
    "end": "3131119"
  },
  {
    "text": "write something to our storage or you want to get something out",
    "start": "3131119",
    "end": "3137440"
  },
  {
    "text": "and i will define this type as a so-called enum enumeration",
    "start": "3137440",
    "end": "3144880"
  },
  {
    "text": "call it request and now what this gets is so-called variance and",
    "start": "3144880",
    "end": "3150559"
  },
  {
    "text": "we have two variants publish and retrieve",
    "start": "3150559",
    "end": "3155920"
  },
  {
    "text": "so i have publish and retrieve but the nice thing here is",
    "start": "3156559",
    "end": "3164240"
  },
  {
    "text": "that russ allows us some of these variants to actually carry data",
    "start": "3164240",
    "end": "3170880"
  },
  {
    "text": "so i can say there's two kinds of requests publish with a payload and retrieve",
    "start": "3171599",
    "end": "3178079"
  },
  {
    "text": "which doesn't carry one as i'm here i want to show a quick thing here",
    "start": "3178079",
    "end": "3187599"
  },
  {
    "text": "which is so called derives rust has a debug interface",
    "start": "3187599",
    "end": "3195280"
  },
  {
    "text": "and multiple other interesting interfaces which can be automatically inserted by the compiler",
    "start": "3195280",
    "end": "3200720"
  },
  {
    "text": "by you requesting them so i can say derive debug and two others",
    "start": "3200720",
    "end": "3205839"
  },
  {
    "text": "that i would like to have is eq and partial eq this one being",
    "start": "3205839",
    "end": "3212000"
  },
  {
    "text": "you can use the debug interpolation syntax which is hold on question mark with that",
    "start": "3212000",
    "end": "3219200"
  },
  {
    "text": "type so you can have structured output",
    "start": "3219200",
    "end": "3224480"
  },
  {
    "text": "and these two are equality is actually defined so request equals request",
    "start": "3225359",
    "end": "3231920"
  },
  {
    "text": "can be automatically be applied you can build custom",
    "start": "3231920",
    "end": "3237359"
  },
  {
    "text": "implementations of these so if you wanted to you can omit the compiler doing that and just write your own but for convenience here",
    "start": "3237359",
    "end": "3245839"
  },
  {
    "text": "um and because they're so common there's this derived interface that allows you to have the compiler auto-generate that and",
    "start": "3245839",
    "end": "3252559"
  },
  {
    "text": "the rule is very simple if any of these here internally have data",
    "start": "3252559",
    "end": "3258160"
  },
  {
    "text": "here for example string then it expects that that string also implements debug eq",
    "start": "3258160",
    "end": "3263200"
  },
  {
    "text": "and partial eq and then again the compiler can reason about the structure of the request",
    "start": "3263200",
    "end": "3268400"
  },
  {
    "text": "type and say okay there's a trivial equality and debug implementation here",
    "start": "3268400",
    "end": "3274800"
  },
  {
    "text": "the partial eq here is a little bit odd um you need that for floats but eq",
    "start": "3274800",
    "end": "3281760"
  },
  {
    "text": "cannot be derived without a partial eq being present so i need both and i think for the first",
    "start": "3281760",
    "end": "3287520"
  },
  {
    "text": "couple of years of rust development the knowledge that that eq cannot",
    "start": "3287520",
    "end": "3292720"
  },
  {
    "text": "be derived from that partial eq is probably uh the one to follow",
    "start": "3292720",
    "end": "3299760"
  },
  {
    "text": "like i follow this just blindingly",
    "start": "3299760",
    "end": "3304160"
  },
  {
    "text": "okay so now we want to part this request and as i said if it's empty",
    "start": "3304880",
    "end": "3310079"
  },
  {
    "text": "then i uh then i consider this a retrieve request",
    "start": "3310079",
    "end": "3317520"
  },
  {
    "text": "if it's not empty i consider this publish the result of this is",
    "start": "3317520",
    "end": "3323760"
  },
  {
    "text": "this request type so how do i do this",
    "start": "3323760",
    "end": "3330319"
  },
  {
    "text": "first of all i take the line and trim it",
    "start": "3330480",
    "end": "3336640"
  },
  {
    "text": "and i use the trim end function",
    "start": "3339680",
    "end": "3343680"
  },
  {
    "text": "this is simple this is just take all um",
    "start": "3345280",
    "end": "3351440"
  },
  {
    "text": "um take all white space new lines carriage returns and spaces by the end",
    "start": "3351440",
    "end": "3356960"
  },
  {
    "text": "and just remove them similar to a trim function in ruby pyson whatever rust in general has a",
    "start": "3356960",
    "end": "3364799"
  },
  {
    "text": "pretty rich standard library interface that comes with all of these kind of functions",
    "start": "3364799",
    "end": "3370160"
  },
  {
    "text": "and now i can go and say if trimmed",
    "start": "3370160",
    "end": "3379440"
  },
  {
    "text": "equals empty string",
    "start": "3380400",
    "end": "3385200"
  },
  {
    "text": "then yeah i want to do one thing and else it has not been an empty string",
    "start": "3386880",
    "end": "3393119"
  },
  {
    "text": "then it's well publish and the other one is the retrieve command",
    "start": "3393119",
    "end": "3398960"
  },
  {
    "text": "now i need to construct these things and the way you construct these enums is you name the enum",
    "start": "3398960",
    "end": "3408160"
  },
  {
    "text": "and then the variant so this was retrieved and otherwise",
    "start": "3408640",
    "end": "3418319"
  },
  {
    "text": "we use publish",
    "start": "3418319",
    "end": "3421200"
  },
  {
    "text": "and now we want to publish the trim data",
    "start": "3424400",
    "end": "3433839"
  },
  {
    "text": "and run into a problem",
    "start": "3436319",
    "end": "3439520"
  },
  {
    "text": "that this here is not a string",
    "start": "3444839",
    "end": "3450400"
  },
  {
    "text": "and that's due to rust's nature as a systems programming",
    "start": "3451359",
    "end": "3456960"
  },
  {
    "text": "language because to avoid copying if we have a stream",
    "start": "3456960",
    "end": "3463920"
  },
  {
    "text": "in memory in a second",
    "start": "3464240",
    "end": "3475838"
  },
  {
    "text": "it's the classic problem with computers they fail the moment you need them",
    "start": "3480160",
    "end": "3489838"
  },
  {
    "text": "there we go so if we have data in memory",
    "start": "3490880",
    "end": "3499359"
  },
  {
    "text": "string and we have a new line",
    "start": "3500839",
    "end": "3505680"
  },
  {
    "text": "what will be returned is reference to a substring abc",
    "start": "3507760",
    "end": "3517680"
  },
  {
    "text": "and due to the rules that i've laid out",
    "start": "3517680",
    "end": "3523839"
  },
  {
    "text": "around ownership in rust we take ownership of the string buffer here",
    "start": "3523839",
    "end": "3531440"
  },
  {
    "text": "that means and this rule is strict",
    "start": "3531440",
    "end": "3536558"
  },
  {
    "text": "i'm very sorry for those help things popping up everywhere see you",
    "start": "3538880",
    "end": "3546319"
  },
  {
    "text": "so now that we that we took ownership that means parts request will actually deallocate",
    "start": "3546880",
    "end": "3552880"
  },
  {
    "text": "the string at the end of the function and this rule is strict",
    "start": "3552880",
    "end": "3559760"
  },
  {
    "text": "so but i've been uh but i'm handing out",
    "start": "3559760",
    "end": "3564880"
  },
  {
    "text": "a reference here to the substring and i cannot do this because",
    "start": "3565440",
    "end": "3572240"
  },
  {
    "text": "i would hand out a reference to something that isn't in memory anymore our quick fix for this is",
    "start": "3572240",
    "end": "3580318"
  },
  {
    "text": "create a new string from that and remove this",
    "start": "3583119",
    "end": "3590078"
  },
  {
    "text": "one thing to note here rust is an expression based language",
    "start": "3594240",
    "end": "3601599"
  },
  {
    "text": "similar to for example ruby so we can we do don't need to say return",
    "start": "3601599",
    "end": "3608240"
  },
  {
    "text": "request retrieve we can in the one arm here return request retrieve in the other arm",
    "start": "3608240",
    "end": "3614559"
  },
  {
    "text": "of the if statement request publish and that means the if statement always",
    "start": "3614559",
    "end": "3621760"
  },
  {
    "text": "returns a request type and we can just let that flow out into out of the function and we return a",
    "start": "3621760",
    "end": "3628559"
  },
  {
    "text": "request there's a question by boban which",
    "start": "3628559",
    "end": "3636319"
  },
  {
    "text": "whether to use string from trim to own or trimmed to string there's a fourth form that also exists",
    "start": "3636319",
    "end": "3643920"
  },
  {
    "text": "which one to use in which case i generally recommend thank you",
    "start": "3643920",
    "end": "3648960"
  },
  {
    "text": "i generally recommend um to use a string from i like that the most but they're actually all the same",
    "start": "3648960",
    "end": "3655280"
  },
  {
    "text": "they used to be a difference with tostring was actually faster due to um in inadequate compiler",
    "start": "3655280",
    "end": "3663119"
  },
  {
    "text": "optimizations that is gone since rust won six so use whatever",
    "start": "3663119",
    "end": "3670079"
  },
  {
    "text": "feels best in the current situation in this case",
    "start": "3670079",
    "end": "3675599"
  },
  {
    "text": "yeah now we have this request and now what we can do",
    "start": "3677680",
    "end": "3685280"
  },
  {
    "text": "is we can again let those types help us in our program flow",
    "start": "3685280",
    "end": "3692160"
  },
  {
    "text": "and because we now have this enum type and i've seen where this is going enums",
    "start": "3693280",
    "end": "3699760"
  },
  {
    "text": "get matched upon match is like you use match far more often in rust than if and else this is",
    "start": "3699760",
    "end": "3705920"
  },
  {
    "text": "the standard way of of doing any kind of branching or decision making so now we",
    "start": "3705920",
    "end": "3713200"
  },
  {
    "text": "can match the request here and",
    "start": "3713200",
    "end": "3723280"
  },
  {
    "text": "again now i have uh roster as a fill in the the arms here",
    "start": "3724839",
    "end": "3733119"
  },
  {
    "text": "now we can match on this request and now we can figure out okay was it published or was it retrieve and what do we do",
    "start": "3733119",
    "end": "3741838"
  },
  {
    "text": "and this is we published a message and here we retrieve a message and for the sake of debugging the first",
    "start": "3747520",
    "end": "3754640"
  },
  {
    "text": "thing that i would like to do",
    "start": "3754640",
    "end": "3757680"
  },
  {
    "text": "is let's use",
    "start": "3766839",
    "end": "3772319"
  },
  {
    "text": "um wrong way around publishing",
    "start": "3774160",
    "end": "3778720"
  },
  {
    "text": "there we go so we can use this data type that we've used that expressed these two alternatives here to uh",
    "start": "3779359",
    "end": "3787680"
  },
  {
    "text": "to guide ourselves through um our reaction to those requests it's",
    "start": "3787680",
    "end": "3793760"
  },
  {
    "text": "essentially if you look this is a little bit of a router here um i would not use this like i would not",
    "start": "3793760",
    "end": "3800319"
  },
  {
    "text": "use match as a router for any kinds of systems um there's more",
    "start": "3800319",
    "end": "3805359"
  },
  {
    "text": "uh this actually systems for that but this is",
    "start": "3805359",
    "end": "3811280"
  },
  {
    "text": "how you go through all those alternatives and i would like to run this",
    "start": "3811280",
    "end": "3818798"
  },
  {
    "text": "and it works so if i go now and say tell that you'll see another bad",
    "start": "3819760",
    "end": "3826160"
  },
  {
    "text": "thing about windows telnet in a second which is that",
    "start": "3826160",
    "end": "3832799"
  },
  {
    "text": "it doesn't present the input that i'm writing",
    "start": "3832799",
    "end": "3838559"
  },
  {
    "text": "and you can see here publishing message and if i just hit enter once",
    "start": "3838559",
    "end": "3846079"
  },
  {
    "text": "it will say retrieving message so sorry for not being able to present that",
    "start": "3846079",
    "end": "3853280"
  },
  {
    "text": "visually",
    "start": "3853280",
    "end": "3855920"
  },
  {
    "text": "so now we have two of these things",
    "start": "3859760",
    "end": "3866000"
  },
  {
    "text": "now the only and you might have noticed i've not been doing uh i've",
    "start": "3866000",
    "end": "3873359"
  },
  {
    "text": "been using the type system to let me flow through um",
    "start": "3873359",
    "end": "3880319"
  },
  {
    "text": "the things that i wanted to do and i've only added this one data type where i introduced my",
    "start": "3880319",
    "end": "3887680"
  },
  {
    "text": "own alternative my own semantics here there's a probable request and there's a retrieve request",
    "start": "3887680",
    "end": "3892799"
  },
  {
    "text": "the rest i've been flowing through the type system here",
    "start": "3892799",
    "end": "3897759"
  },
  {
    "text": "and now now that i'm faced with this decision now i have a problem",
    "start": "3898240",
    "end": "3904400"
  },
  {
    "text": "i actually want to store store data and i have no storage and",
    "start": "3904400",
    "end": "3912319"
  },
  {
    "text": "um i uh on a new question um it",
    "start": "3912799",
    "end": "3919280"
  },
  {
    "text": "it does actually take my um it does actually take my input it just",
    "start": "3919280",
    "end": "3925119"
  },
  {
    "text": "doesn't echo it so that's the annoying part here",
    "start": "3925119",
    "end": "3930640"
  },
  {
    "text": "so i would actually just go and pop this shell here off",
    "start": "3930640",
    "end": "3938000"
  },
  {
    "text": "so that you see the actual reaction okay so again coming back to this now i need",
    "start": "3938000",
    "end": "3945440"
  },
  {
    "text": "storage and the",
    "start": "3945440",
    "end": "3952240"
  },
  {
    "text": "this is again something that i just pull out of my knowledge there's the rust standard library has a",
    "start": "3952240",
    "end": "3961039"
  },
  {
    "text": "nice type called",
    "start": "3961039",
    "end": "3965839"
  },
  {
    "text": "vector q it's a double ended queue based on backed by a vector the nice thing around",
    "start": "3969599",
    "end": "3975920"
  },
  {
    "text": "that is it allows me to push something in the back and pop it out from the front in",
    "start": "3975920",
    "end": "3982960"
  },
  {
    "text": "difference to a normal vector type that rust has that only allows me to push in the back and pop the last element and i wanted to",
    "start": "3982960",
    "end": "3990000"
  },
  {
    "text": "have this kind of first in first out behavior so pushing back taking from the front is the semantics that i want",
    "start": "3990000",
    "end": "3997680"
  },
  {
    "text": "and how do we do a handlers this piece of storage",
    "start": "4003760",
    "end": "4010400"
  },
  {
    "text": "the problem is i cannot create it in handle client why if we go back",
    "start": "4010400",
    "end": "4017359"
  },
  {
    "text": "to this picture here if i were to create the storage in here",
    "start": "4017359",
    "end": "4024160"
  },
  {
    "text": "so the networking layer calls for my main there your calls into the",
    "start": "4024160",
    "end": "4030480"
  },
  {
    "text": "handler and if i were to create like the queue here i would doing every request actually",
    "start": "4030480",
    "end": "4037119"
  },
  {
    "text": "destroy it again so i need to make sure that it actually outlives handle client",
    "start": "4037119",
    "end": "4042720"
  },
  {
    "text": "and lives longer than the call to handle client so in some way it needs to be passed in here",
    "start": "4042720",
    "end": "4050319"
  },
  {
    "text": "and as we've learned we can take storage",
    "start": "4050319",
    "end": "4057520"
  },
  {
    "text": "in a way that is mutable but reference so it's owned by the by anyone who's outside of handle",
    "start": "4057520",
    "end": "4066079"
  },
  {
    "text": "client and uh um",
    "start": "4066079",
    "end": "4072880"
  },
  {
    "text": "yeah so it's handled by anyone who's uh who is outside of the handle client",
    "start": "4072880",
    "end": "4078319"
  },
  {
    "text": "function but is willing to give me mutable access to it the way we do this is ampersand we take",
    "start": "4078319",
    "end": "4086160"
  },
  {
    "text": "a mutable reference to a back to q string this one being one that stores",
    "start": "4086160",
    "end": "4093200"
  },
  {
    "text": "strings which is our current message type we can just later actually introduce a proper structured message type if we want to",
    "start": "4093200",
    "end": "4100719"
  },
  {
    "text": "the uh way would be the same",
    "start": "4100719",
    "end": "4105839"
  },
  {
    "text": "um there's a question olga is there not a lot of go channels and rust not as a language feature it's actually",
    "start": "4108319",
    "end": "4114960"
  },
  {
    "text": "rust did have in language channels at some point as a research prototype",
    "start": "4114960",
    "end": "4120159"
  },
  {
    "text": "um there are channels um in um that can be found in standard lib",
    "start": "4120159",
    "end": "4126880"
  },
  {
    "text": "yeah and um as supreme mentions there's uh for example the cross beam crate allows",
    "start": "4126880",
    "end": "4132880"
  },
  {
    "text": "that the nice thing about channels is that they also work by this ownership principle you push something into you send",
    "start": "4132880",
    "end": "4139838"
  },
  {
    "text": "something through a channel it takes it away from the sender and it takes and and gives the ownership to the other",
    "start": "4139839",
    "end": "4145679"
  },
  {
    "text": "side so there's um there's no chance to accidentally refer um for example to send away data from the",
    "start": "4145679",
    "end": "4152880"
  },
  {
    "text": "thing that has just sent the data",
    "start": "4152880",
    "end": "4157278"
  },
  {
    "text": "um okay um so i need",
    "start": "4158839",
    "end": "4164798"
  },
  {
    "text": "to create my data structure here so i take lot storage equals back to cue",
    "start": "4164799",
    "end": "4175520"
  },
  {
    "text": "u",
    "start": "4175520",
    "end": "4177600"
  },
  {
    "text": "this will yield an error because it doesn't know which style",
    "start": "4181600",
    "end": "4186798"
  },
  {
    "text": "which type the vector q is but that will immediately go away if i actually pass the search over here",
    "start": "4186799",
    "end": "4194560"
  },
  {
    "text": "to handle client needs to be mutable",
    "start": "4194560",
    "end": "4202800"
  },
  {
    "text": "so i can actually give it away and now on every loop doing every connection i give",
    "start": "4202800",
    "end": "4208960"
  },
  {
    "text": "you the story the storage over uh to handle client can write something or read from it and",
    "start": "4208960",
    "end": "4215199"
  },
  {
    "text": "then on the next loop it will be passed to the next client handler on the next loop iteration and",
    "start": "4215199",
    "end": "4221840"
  },
  {
    "text": "over here that's simple what do i do in publish",
    "start": "4221840",
    "end": "4226800"
  },
  {
    "text": "dot push back",
    "start": "4228960",
    "end": "4231679"
  },
  {
    "text": "it stores that but now what do you do in retrieve and this is again a nice thing",
    "start": "4240800",
    "end": "4248480"
  },
  {
    "text": "um now i try to to get a message out",
    "start": "4252880",
    "end": "4259840"
  },
  {
    "text": "but what if the queue is empty",
    "start": "4260080",
    "end": "4267280"
  },
  {
    "text": "so i may get a message or not",
    "start": "4267280",
    "end": "4272640"
  },
  {
    "text": "so let's try",
    "start": "4272640",
    "end": "4275360"
  },
  {
    "text": "the corresponding method is pop front gives me the it gives me this data and",
    "start": "4279440",
    "end": "4286880"
  },
  {
    "text": "now let's have a look at what this variable is and it is",
    "start": "4286880",
    "end": "4292000"
  },
  {
    "text": "option string and that says well it might be there",
    "start": "4292000",
    "end": "4298400"
  },
  {
    "text": "or not and again this is an enum like the results or the one that i introduced tells me",
    "start": "4298400",
    "end": "4305040"
  },
  {
    "text": "these are the two child the two things that may happen either there was nothing in",
    "start": "4305040",
    "end": "4310960"
  },
  {
    "text": "the storage or um you um well or you can",
    "start": "4310960",
    "end": "4318159"
  },
  {
    "text": "write it to the client if you want to so let's match",
    "start": "4318159",
    "end": "4325520"
  },
  {
    "text": "again",
    "start": "4326840",
    "end": "4329840"
  },
  {
    "text": "so if there was a message we need to write to the client",
    "start": "4336640",
    "end": "4345199"
  },
  {
    "text": "and if there was no message let's write new message",
    "start": "4345199",
    "end": "4353520"
  },
  {
    "text": "and here's where i need to stream again now i can say stream dot write all",
    "start": "4355520",
    "end": "4363199"
  },
  {
    "text": "message the stream takes bytes so a string is not bytes but it can be",
    "start": "4364080",
    "end": "4370880"
  },
  {
    "text": "seen as such and i use the azvice methods to turn it",
    "start": "4370880",
    "end": "4376640"
  },
  {
    "text": "into one there's quite a bit to a wrap here in this line first of all rust takes a very",
    "start": "4376640",
    "end": "4383199"
  },
  {
    "text": "structured way on its linger so if i can interpret something as something else",
    "start": "4383199",
    "end": "4389360"
  },
  {
    "text": "the functions that do that are always called as underscore so this is no copy or whatever",
    "start": "4389360",
    "end": "4397360"
  },
  {
    "text": "involved this is strings can be seen as bytes not the other way around bytes are not always youtube eight strings",
    "start": "4397360",
    "end": "4404320"
  },
  {
    "text": "messages bytes and you can uh you basically just turn it into",
    "start": "4404320",
    "end": "4410800"
  },
  {
    "text": "the different type and then there's the write-all function here",
    "start": "4410800",
    "end": "4417520"
  },
  {
    "text": "which you actually need to import a trade for the right trade",
    "start": "4417679",
    "end": "4427840"
  },
  {
    "text": "which writes all of these out to the client slight warning here",
    "start": "4429520",
    "end": "4437280"
  },
  {
    "text": "rust does not protect you from functional mistakes there's also a write method the write method",
    "start": "4437280",
    "end": "4444080"
  },
  {
    "text": "will write as many bytes as it currently can until it would block",
    "start": "4444080",
    "end": "4450080"
  },
  {
    "text": "the write all will write all the bytes on the right side and wait this to be done this is a",
    "start": "4450080",
    "end": "4457199"
  },
  {
    "text": "frequent mistake here people using write and then later if they write more data actually losing data to the",
    "start": "4457199",
    "end": "4462480"
  },
  {
    "text": "right because they forget writing the data",
    "start": "4462480",
    "end": "4469679"
  },
  {
    "text": "yeah there's a problem here which is the stream needs to be immutable so that i can actually write to it",
    "start": "4469679",
    "end": "4475199"
  },
  {
    "text": "there we go happy to oblige there might be arrows happening here",
    "start": "4475199",
    "end": "4481840"
  },
  {
    "text": "which the compiler will call me out on it says there's a result being returned here but you're not using it",
    "start": "4481840",
    "end": "4487760"
  },
  {
    "text": "you're not checking whether it actually works and that actually being a warning and the compiler being annoying about",
    "start": "4487760",
    "end": "4494080"
  },
  {
    "text": "hey you haven't checked whether that actually succeeded",
    "start": "4494080",
    "end": "4498800"
  },
  {
    "text": "is a good thing even though i'm choosing again here to just say unwrap then then let it crash if that",
    "start": "4499120",
    "end": "4505199"
  },
  {
    "text": "happens then let it crash but at least i'm seeing if the like i will see it very visibly by my program crashing if that condition was",
    "start": "4505199",
    "end": "4512000"
  },
  {
    "text": "met because now i am checking it but my check is basically if the condition actually happens then",
    "start": "4512000",
    "end": "4519040"
  },
  {
    "text": "um then yeah fail hard and what i do with there's nothing",
    "start": "4519040",
    "end": "4527440"
  },
  {
    "text": "i will send a small message to the user",
    "start": "4528480",
    "end": "4539840"
  },
  {
    "text": "um and i'll say no message available",
    "start": "4542800",
    "end": "4549360"
  },
  {
    "text": "there we go same thing may fail",
    "start": "4550480",
    "end": "4557440"
  },
  {
    "text": "there we go",
    "start": "4560800",
    "end": "4567840"
  },
  {
    "text": "[Laughter]",
    "start": "4569540",
    "end": "4574330"
  },
  {
    "text": "and now i build and run this",
    "start": "4576960",
    "end": "4581840"
  },
  {
    "text": "and after i challenge it again yeah i said i",
    "start": "4592960",
    "end": "4599679"
  },
  {
    "text": "i won't show you a window that prints nothing so just tell you",
    "start": "4599679",
    "end": "4605280"
  },
  {
    "text": "verbally what i do so if i send a message",
    "start": "4605280",
    "end": "4612159"
  },
  {
    "text": "it will be stored i actually removed the logging statement so",
    "start": "4614320",
    "end": "4619920"
  },
  {
    "text": "sorry for that and if i connect again but now i type",
    "start": "4619920",
    "end": "4628320"
  },
  {
    "text": "nothing then it will retrieve that message and if i go again and type nothing it",
    "start": "4628400",
    "end": "4635760"
  },
  {
    "text": "will write me no message available and again i've been using the type",
    "start": "4635760",
    "end": "4642719"
  },
  {
    "text": "system here to guide me by saying oh okay so the two things that could happen",
    "start": "4642719",
    "end": "4647840"
  },
  {
    "text": "if i pop from a collection is data could be there for data could not be there and",
    "start": "4647840",
    "end": "4655440"
  },
  {
    "text": "then react on that and let myself be guided by this by this",
    "start": "4655440",
    "end": "4661679"
  },
  {
    "text": "type level flow where the type system can express this kind of branching behavior these are the two things that you need to",
    "start": "4661679",
    "end": "4667920"
  },
  {
    "text": "cover data has been there or not in other languages that would often be",
    "start": "4667920",
    "end": "4673040"
  },
  {
    "text": "um abstracted to an outpoint or a null value rust doesn't have nil or now it uses",
    "start": "4673040",
    "end": "4678960"
  },
  {
    "text": "these kind of option types here and through compiler optimizations that doesn't actually cost me anything so",
    "start": "4678960",
    "end": "4684960"
  },
  {
    "text": "this is as costly as a null pointer check here",
    "start": "4684960",
    "end": "4690480"
  },
  {
    "text": "in the back",
    "start": "4690960",
    "end": "4693840"
  },
  {
    "text": "um for albert um the the stream making the stream mutable",
    "start": "4696320",
    "end": "4701840"
  },
  {
    "text": "is um just annotating is it as immutable here",
    "start": "4701840",
    "end": "4707679"
  },
  {
    "text": "and for writer the trait that needs to be imported is the right trait also from",
    "start": "4707679",
    "end": "4715520"
  },
  {
    "text": "the io module",
    "start": "4715520",
    "end": "4721840"
  },
  {
    "text": "okay",
    "start": "4724320",
    "end": "4726639"
  },
  {
    "text": "so we're done here um",
    "start": "4730320",
    "end": "4737360"
  },
  {
    "text": "on the question on adrian's question why don't we need to specify the stream as immutable when we pass it in",
    "start": "4740560",
    "end": "4747120"
  },
  {
    "text": "precisely because we have not used it in immutable fashion um at all before",
    "start": "4747120",
    "end": "4754800"
  },
  {
    "text": "so this happens because this is the first time we're writing um we're writing to it and yes this is",
    "start": "4754800",
    "end": "4760800"
  },
  {
    "text": "because of ownership in rus there's a the ownership principle",
    "start": "4760800",
    "end": "4766640"
  },
  {
    "text": "basically says there's only one owner in the in the whole world essentially of",
    "start": "4766640",
    "end": "4772960"
  },
  {
    "text": "any piece of data so and this owner can actually decide for example to make immutable data",
    "start": "4772960",
    "end": "4778320"
  },
  {
    "text": "immutable or immutable data immutable so at this place this is really just a choice and an and an annotation which is well",
    "start": "4778320",
    "end": "4786400"
  },
  {
    "text": "the well the compiler diagnostic tells you well it's not mutable but you can add mood",
    "start": "4786400",
    "end": "4792080"
  },
  {
    "text": "here and then it is but this is own this is a privilege that only owners have um i can not make an immutable reference",
    "start": "4792080",
    "end": "4800000"
  },
  {
    "text": "for example mutable or things like that",
    "start": "4800000",
    "end": "4805840"
  },
  {
    "text": "okay so",
    "start": "4807280",
    "end": "4812800"
  },
  {
    "text": "now coming back to this initial image this is basically",
    "start": "4814320",
    "end": "4821199"
  },
  {
    "text": "what we built so we have this connection loop and we have this handle client",
    "start": "4821199",
    "end": "4826960"
  },
  {
    "text": "um question from adrian um is it similar to",
    "start": "4827360",
    "end": "4834239"
  },
  {
    "text": "const correctness um yeah a lot of similarities exist",
    "start": "4834239",
    "end": "4839840"
  },
  {
    "text": "there i generally recommend not to apply too many c-class plus principles to rust",
    "start": "4839840",
    "end": "4845679"
  },
  {
    "text": "directly i give my case for it",
    "start": "4845679",
    "end": "4850800"
  },
  {
    "text": "rust is much more if if c is here and c plus plus is here",
    "start": "4852239",
    "end": "4859920"
  },
  {
    "text": "rust actually lands kind of over here and adds c plus generics in in a way",
    "start": "4859920",
    "end": "4866400"
  },
  {
    "text": "um rust is a data structures and functions language much like c and doesn't have",
    "start": "4866400",
    "end": "4872800"
  },
  {
    "text": "a lot of concepts that c plus ads um adds on top um but yeah if it",
    "start": "4872800",
    "end": "4879520"
  },
  {
    "text": "if it helps you like as a first um as a first approach um yeah these things",
    "start": "4879520",
    "end": "4885440"
  },
  {
    "text": "can be seen um how do you get the documentation",
    "start": "4885440",
    "end": "4891600"
  },
  {
    "text": "interface um",
    "start": "4891600",
    "end": "4896320"
  },
  {
    "text": "that's a good question that maybe a rust analyzer bug chris so",
    "start": "4897760",
    "end": "4904639"
  },
  {
    "text": "i'm not sure if i can quickly help with that sorry",
    "start": "4904960",
    "end": "4911599"
  },
  {
    "text": "and sometimes if you have both the rust plug-in and the rust analyzer plug-in installed de-installing the rush",
    "start": "4913520",
    "end": "4919920"
  },
  {
    "text": "plug-in may help",
    "start": "4919920",
    "end": "4922560"
  },
  {
    "text": "oh there's one thing that may help if you have vs code running for days",
    "start": "4926560",
    "end": "4934480"
  },
  {
    "text": "like i sometimes do if there's a vs code update in between the language server for for a rust",
    "start": "4934480",
    "end": "4940320"
  },
  {
    "text": "analyzer will not install cleanly because that case cannot be properly handled so sometimes like just quitting",
    "start": "4940320",
    "end": "4946080"
  },
  {
    "text": "this code and starting it up again um may help",
    "start": "4946080",
    "end": "4951600"
  },
  {
    "text": "okay um there's something where i would like to spend the the last uh half an",
    "start": "4952880",
    "end": "4958239"
  },
  {
    "text": "hour on and it's probably the most interesting part here is the",
    "start": "4958239",
    "end": "4965600"
  },
  {
    "text": "problem that we now well not a problem but something that we",
    "start": "4965600",
    "end": "4972080"
  },
  {
    "text": "sometimes that we observe here is we have this connection loop",
    "start": "4972080",
    "end": "4978400"
  },
  {
    "text": "but um so as part of the connection loop we're calling into handle client",
    "start": "4978400",
    "end": "4984480"
  },
  {
    "text": "and we're coming back here and this is completely synchronous so",
    "start": "4984480",
    "end": "4990480"
  },
  {
    "text": "we're handling one client at a time the kernel buffers that",
    "start": "4990480",
    "end": "4996480"
  },
  {
    "text": "for us so we're not losing any clients but we're going one by one and for that reason",
    "start": "4996480",
    "end": "5001760"
  },
  {
    "text": "well we basically have no parallels more concurrency problems because",
    "start": "5001760",
    "end": "5007600"
  },
  {
    "text": "there is none so one thing that i would like to do for the last half an hour is actually take this and put it on a",
    "start": "5007600",
    "end": "5015199"
  },
  {
    "text": "thread and the principles that i'm going to show here will be just as applicable to",
    "start": "5015199",
    "end": "5023520"
  },
  {
    "text": "um async systems in in rust as well so for example things like tokyo or",
    "start": "5023520",
    "end": "5029280"
  },
  {
    "text": "async stood or all those um so",
    "start": "5029280",
    "end": "5034639"
  },
  {
    "text": "the the safety mechanisms that rust supplies are exactly the same um especially because",
    "start": "5034639",
    "end": "5040639"
  },
  {
    "text": "all of those run times are always multi-threaded runtime so the problem of multi-threading",
    "start": "5040639",
    "end": "5046159"
  },
  {
    "text": "is always the dominant one here i just find it easier to explain that",
    "start": "5046159",
    "end": "5051679"
  },
  {
    "text": "using threads because they're a little bit of a simpler primitive that does not mean need",
    "start": "5051679",
    "end": "5058639"
  },
  {
    "text": "understanding of the whole user space runtime that also comes with with these kind of things but you can",
    "start": "5058639",
    "end": "5066239"
  },
  {
    "text": "definitely take this example take async still or tokyo and turn it into an async one",
    "start": "5066239",
    "end": "5072880"
  },
  {
    "text": "um using uh the types provided by those two and turn it into an async one in yeah",
    "start": "5072880",
    "end": "5079679"
  },
  {
    "text": "a matter of minutes so um yeah",
    "start": "5079679",
    "end": "5086400"
  },
  {
    "text": "and now i want to be just very naive here",
    "start": "5088239",
    "end": "5096239"
  },
  {
    "text": "and just wrap a thread around handle client",
    "start": "5096719",
    "end": "5101599"
  },
  {
    "text": "and this is where where rust shines so rust has a spawn function",
    "start": "5103280",
    "end": "5113840"
  },
  {
    "text": "bear with me for a second for the syntax",
    "start": "5115280",
    "end": "5127840"
  },
  {
    "text": "that's the spawn function and the syntax here is simply this is an",
    "start": "5128880",
    "end": "5135520"
  },
  {
    "text": "anonymous function that is the that is the actual function that will be executed on the thread",
    "start": "5135520",
    "end": "5141120"
  },
  {
    "text": "and once you're crossing the boundary to this function move ownership so it takes ownership of everything from the",
    "start": "5141120",
    "end": "5147040"
  },
  {
    "text": "outside this is the if you this is copied from",
    "start": "5147040",
    "end": "5152239"
  },
  {
    "text": "the standard thread spawn interface the interesting here is that's a mistake and the compiler will",
    "start": "5152239",
    "end": "5159440"
  },
  {
    "text": "catch that and",
    "start": "5159440",
    "end": "5164560"
  },
  {
    "text": "what it will use um yes tokyo's outside of scope for this workshop",
    "start": "5166960",
    "end": "5173199"
  },
  {
    "text": "but yes you as as written tokyo spawn and and all of these things will just",
    "start": "5173199",
    "end": "5178639"
  },
  {
    "text": "work um and they have similar semantics particularly around the moving",
    "start": "5178639",
    "end": "5184960"
  },
  {
    "text": "so for the sake of this workshop it's completely fine if you replace thread",
    "start": "5184960",
    "end": "5190400"
  },
  {
    "text": "by task and it will work it will behave just the same and the principles especially around moving ownership",
    "start": "5190400",
    "end": "5198159"
  },
  {
    "text": "are are the same",
    "start": "5198159",
    "end": "5203040"
  },
  {
    "text": "okay so um",
    "start": "5208639",
    "end": "5212960"
  },
  {
    "text": "the thing that it catches me doing here is okay i'm trying to move",
    "start": "5215840",
    "end": "5223360"
  },
  {
    "text": "ownership of the data here into the thread because of this move",
    "start": "5223360",
    "end": "5228880"
  },
  {
    "text": "annotation and i'm going to show that on",
    "start": "5228880",
    "end": "5237040"
  },
  {
    "text": "the console rather because it gives me a little bit more space",
    "start": "5237040",
    "end": "5243360"
  },
  {
    "text": "so it says you're moving this log into the closure and",
    "start": "5243360",
    "end": "5249440"
  },
  {
    "text": "it knows that i'm looping here so if i were to give this data away to the first thread",
    "start": "5250480",
    "end": "5257840"
  },
  {
    "text": "it will say okay so now if i iterate again like what a what",
    "start": "5258000",
    "end": "5263840"
  },
  {
    "text": "do i have to give away the second iteration the data is gone",
    "start": "5263840",
    "end": "5269120"
  },
  {
    "text": "so what to do what to do i could try to reference it",
    "start": "5269280",
    "end": "5281840"
  },
  {
    "text": "and move the reference in",
    "start": "5289199",
    "end": "5295840"
  },
  {
    "text": "this will also not work because that will say hey we're trying",
    "start": "5298159",
    "end": "5303679"
  },
  {
    "text": "to reference this immutably more than once at a time",
    "start": "5303679",
    "end": "5310960"
  },
  {
    "text": "because i am not sure how long this threat is going to live",
    "start": "5310960",
    "end": "5316719"
  },
  {
    "text": "the threat that takes ownership i'm i will not allow you to pass",
    "start": "5316719",
    "end": "5321920"
  },
  {
    "text": "immutable reference into a thread which has like because these things might start working",
    "start": "5321920",
    "end": "5328000"
  },
  {
    "text": "in parallel or concurrently independent of your runtime system the whole concurrency and",
    "start": "5328000",
    "end": "5334800"
  },
  {
    "text": "and parallels and checking and rust is completely independent it doesn't know if you're running on a",
    "start": "5335199",
    "end": "5341520"
  },
  {
    "text": "uh on a threading on on a thread runtime which is essentially your kernel is or if you're running on",
    "start": "5341520",
    "end": "5347920"
  },
  {
    "text": "something like tokyo russ doesn't know about this at all just knows oh so thread spawn",
    "start": "5347920",
    "end": "5354239"
  },
  {
    "text": "and we'll run thread spawn i need to be aware that this is a",
    "start": "5354239",
    "end": "5361120"
  },
  {
    "text": "component that has dynamic runtime behavior over each other so you have two threads",
    "start": "5361120",
    "end": "5366639"
  },
  {
    "text": "running in parallel and so you don't know how long this reference will be used and when",
    "start": "5366639",
    "end": "5372400"
  },
  {
    "text": "and rust gives us two tools around this",
    "start": "5372719",
    "end": "5378320"
  },
  {
    "text": "and so we have two problems essentially we have multiple threads or tasks or",
    "start": "5378320",
    "end": "5383600"
  },
  {
    "text": "whatever i'll just call this g1",
    "start": "5383600",
    "end": "5389119"
  },
  {
    "text": "q2 t3 we have these three and all of them want to have a share of",
    "start": "5390239",
    "end": "5398000"
  },
  {
    "text": "the storage",
    "start": "5398000",
    "end": "5400639"
  },
  {
    "text": "they need some access here but who should own it",
    "start": "5403280",
    "end": "5409600"
  },
  {
    "text": "so i have a problem i have the single ownership principle that rust has but i",
    "start": "5410960",
    "end": "5416880"
  },
  {
    "text": "need now need i have now have multiple parties that have interest in this resource",
    "start": "5416880",
    "end": "5423599"
  },
  {
    "text": "and the way we deal with that in rust is a type called the arc come to what that is in a second",
    "start": "5424080",
    "end": "5432400"
  },
  {
    "text": "let me write it out and you need to import it from the standard",
    "start": "5432400",
    "end": "5438400"
  },
  {
    "text": "sync module standard sync arc",
    "start": "5438400",
    "end": "5443520"
  },
  {
    "text": "and what arc allows me to do it allows me",
    "start": "5445120",
    "end": "5452320"
  },
  {
    "text": "to have let me make this just bigger some drink that in front anyways um",
    "start": "5452480",
    "end": "5459120"
  },
  {
    "text": "the arc is the atomic ref counter",
    "start": "5459120",
    "end": "5464239"
  },
  {
    "text": "and the atomic stands for the counting is done in an atomic manner so um",
    "start": "5464320",
    "end": "5470960"
  },
  {
    "text": "that um i have no compare and concurrency problems on count on the down count and it's a",
    "start": "5470960",
    "end": "5477360"
  },
  {
    "text": "reference counter in the sense that if i have",
    "start": "5477360",
    "end": "5482559"
  },
  {
    "text": "three of those what it will do it will produce references to the storage can",
    "start": "5484800",
    "end": "5491520"
  },
  {
    "text": "allows me to reference the storage but if i have three of them out",
    "start": "5491520",
    "end": "5497440"
  },
  {
    "text": "i will have a counter internally that says okay plus three so base three references currently out",
    "start": "5498239",
    "end": "5504560"
  },
  {
    "text": "and once those threads drop usage of this arc",
    "start": "5504560",
    "end": "5510880"
  },
  {
    "text": "we will have references going down and this will make sure that once this",
    "start": "5510880",
    "end": "5516880"
  },
  {
    "text": "counter reaches zero then it will actually de-allocate the storage",
    "start": "5516880",
    "end": "5522239"
  },
  {
    "text": "and the way we use that is before we start threading here",
    "start": "5522320",
    "end": "5533520"
  },
  {
    "text": "i usually call that threat handle i take the original storage arc",
    "start": "5533520",
    "end": "5540960"
  },
  {
    "text": "and call the arc clone function on the original",
    "start": "5541920",
    "end": "5547840"
  },
  {
    "text": "and now i can use the thread handle over",
    "start": "5553840",
    "end": "5559920"
  },
  {
    "text": "here",
    "start": "5559920",
    "end": "5562080"
  },
  {
    "text": "so now i have my second handle here",
    "start": "5573600",
    "end": "5578800"
  },
  {
    "text": "so what i have is i have my main thread",
    "start": "5579360",
    "end": "5589840"
  },
  {
    "text": "so i have my main thread and it will start",
    "start": "5591360",
    "end": "5596400"
  },
  {
    "text": "it will hold one reference here which is the storage reference and every time it",
    "start": "5598400",
    "end": "5603520"
  },
  {
    "text": "spawns another one before it does so it will create a",
    "start": "5603520",
    "end": "5609120"
  },
  {
    "text": "second one and gives the thread access to that",
    "start": "5609120",
    "end": "5614560"
  },
  {
    "text": "so this handlebase management allows me to count",
    "start": "5614880",
    "end": "5622000"
  },
  {
    "text": "how long i actually need to keep the storage around which because this handle will be dropped",
    "start": "5622000",
    "end": "5628000"
  },
  {
    "text": "after the connection loop is basically forever as long as the server runs so i always have one",
    "start": "5628000",
    "end": "5635840"
  },
  {
    "text": "one available here",
    "start": "5635840",
    "end": "5638800"
  },
  {
    "text": "okay",
    "start": "5642840",
    "end": "5645840"
  },
  {
    "text": "yeah we have a little bit of error message alien accidentally but now we have another problem",
    "start": "5651440",
    "end": "5659760"
  },
  {
    "text": "i've always been talking about this problem that there's it just does not allow you to",
    "start": "5659760",
    "end": "5665600"
  },
  {
    "text": "have multiple mutable references out at the same time",
    "start": "5665600",
    "end": "5670639"
  },
  {
    "text": "and for that reason if i have this kind of setup here",
    "start": "5670639",
    "end": "5675678"
  },
  {
    "text": "these ones are not allowed to produce me mutable references because if you're",
    "start": "5678560",
    "end": "5686239"
  },
  {
    "text": "thinking about it we have these multiple parallel threats happening at the same time",
    "start": "5686239",
    "end": "5693520"
  },
  {
    "text": "or tasks assigned to threats",
    "start": "5693679",
    "end": "5697840"
  },
  {
    "text": "and",
    "start": "5699119",
    "end": "5701840"
  },
  {
    "text": "that means that means we don't know if they would not for example take out",
    "start": "5704719",
    "end": "5711600"
  },
  {
    "text": "try to mutate the shared data at similar times so if i draw a line",
    "start": "5711600",
    "end": "5717679"
  },
  {
    "text": "here there could be moments where these actions overlap",
    "start": "5717679",
    "end": "5723199"
  },
  {
    "text": "and this is how rust guarantees concurrency safety actually through the definition that",
    "start": "5723199",
    "end": "5729040"
  },
  {
    "text": "mutable references are required to write to memory and that mutable",
    "start": "5729040",
    "end": "5734159"
  },
  {
    "text": "references need to be unique oh sorry",
    "start": "5734159",
    "end": "5739600"
  },
  {
    "text": "thank you thank you for the pointer and chat that you couldn't see the drawing so if we have these threads",
    "start": "5739600",
    "end": "5747440"
  },
  {
    "text": "um taking out immutable references at the same time there could be a moment where multiple meteor",
    "start": "5747440",
    "end": "5752480"
  },
  {
    "text": "mutable references are yet available at the same time um arcs",
    "start": "5752480",
    "end": "5760080"
  },
  {
    "text": "have no similarity to go context weight groups um steep as my understanding for for go",
    "start": "5760080",
    "end": "5766880"
  },
  {
    "text": "context and weight goes um arcs um parks essentially just use",
    "start": "5766880",
    "end": "5772639"
  },
  {
    "text": "the processor feature of um of atomic additions and um",
    "start": "5772639",
    "end": "5780000"
  },
  {
    "text": "there there's a quick question right on why i use arc clone here",
    "start": "5780000",
    "end": "5788880"
  },
  {
    "text": "purely out of habit there's a debate which one is better you can also use",
    "start": "5789199",
    "end": "5795360"
  },
  {
    "text": "just as an illustration you can also use storage",
    "start": "5795360",
    "end": "5801280"
  },
  {
    "text": "at this moment i think it makes it more visible that i'm cloning this arc handle like that my",
    "start": "5809199",
    "end": "5815119"
  },
  {
    "text": "basically my lease on a ref counted value while the clone interface is the general",
    "start": "5815119",
    "end": "5821760"
  },
  {
    "text": "cloning interface that rust has which also allows you to feed this in for example in things that um that",
    "start": "5821760",
    "end": "5828320"
  },
  {
    "text": "want to express multiple uh ownership that you feed this into things that that",
    "start": "5828320",
    "end": "5833600"
  },
  {
    "text": "might want to clone and and that would cost you um that would cost you um",
    "start": "5833600",
    "end": "5840880"
  },
  {
    "text": "for example a lot of memory if you were actually doing this so this allows you to do cheap cloning",
    "start": "5840880",
    "end": "5848559"
  },
  {
    "text": "okay uh so let's get to this mutable thing here so what i essentially",
    "start": "5848800",
    "end": "5855440"
  },
  {
    "text": "need is something",
    "start": "5855440",
    "end": "5859840"
  },
  {
    "text": "that um",
    "start": "5862480",
    "end": "5869840"
  },
  {
    "text": "that makes sure that if you have multiple threads and they want mutable or",
    "start": "5870400",
    "end": "5877679"
  },
  {
    "text": "even immutable if they want to read um synchronized access to the value",
    "start": "5877679",
    "end": "5883840"
  },
  {
    "text": "here we need some type that moderates that and the classic type to use here",
    "start": "5885520",
    "end": "5893360"
  },
  {
    "text": "is a mutex and i would like to use one here",
    "start": "5893360",
    "end": "5911840"
  },
  {
    "text": "the mutex is in the standard sync module as well",
    "start": "5917520",
    "end": "5923040"
  },
  {
    "text": "and it works just the same here you use it you construct it around this vector q",
    "start": "5923040",
    "end": "5931760"
  },
  {
    "text": "and what we've now done let me",
    "start": "5931760",
    "end": "5936239"
  },
  {
    "text": "put the drawing on the screen first take this down a little",
    "start": "5937440",
    "end": "5944239"
  },
  {
    "text": "and just for those that were asking around tokyo tokyo uses arc from the standard clip but for",
    "start": "5946239",
    "end": "5951920"
  },
  {
    "text": "example provides its own async mutex and that's the",
    "start": "5951920",
    "end": "5957280"
  },
  {
    "text": "there's two things you would need to replace to run this on tokyo which is replacing thread spawn by tokyo spawn and by replacing the",
    "start": "5957280",
    "end": "5964159"
  },
  {
    "text": "mutex implementation or an async mutex implementation that interacts with the runtime",
    "start": "5964159",
    "end": "5970239"
  },
  {
    "text": "and but the ex the exact same principle and the exact",
    "start": "5971760",
    "end": "5977679"
  },
  {
    "text": "same api applies with one minor difference that is seen as an api mistake in the",
    "start": "5977679",
    "end": "5983119"
  },
  {
    "text": "standard clip but you can really go like import tokyo",
    "start": "5983119",
    "end": "5988320"
  },
  {
    "text": "and and run through this whole program and change it to to an async fashion",
    "start": "5988320",
    "end": "5996560"
  },
  {
    "text": "so now we have this mutex wrapping around the storage and the arc now gives me access to the",
    "start": "5996560",
    "end": "6002320"
  },
  {
    "text": "mutex this an interesting thing that now",
    "start": "6002320",
    "end": "6009600"
  },
  {
    "text": "happens in the api we need to take a mutex here because we",
    "start": "6009600",
    "end": "6015040"
  },
  {
    "text": "want to interact with the mutex",
    "start": "6015040",
    "end": "6018480"
  },
  {
    "text": "standard circle also provides you with other kinds of primitives if you have different kinds of read and write behavior like um",
    "start": "6021760",
    "end": "6031040"
  },
  {
    "text": "you can for example an rw lock or things like that are better for you",
    "start": "6031040",
    "end": "6036080"
  },
  {
    "text": "you can also find that there",
    "start": "6036080",
    "end": "6039199"
  },
  {
    "text": "but for the sake of it i'll be using the mutex so now i have mutex vectorq string and i",
    "start": "6041119",
    "end": "6047360"
  },
  {
    "text": "come back to this piece of signature in a second but now first of all i want to use it so i",
    "start": "6047360",
    "end": "6054239"
  },
  {
    "text": "cannot call pushback on the storage here because it's not a vectorq anymore the way we end up",
    "start": "6054239",
    "end": "6061199"
  },
  {
    "text": "doing handling this is",
    "start": "6061199",
    "end": "6065840"
  },
  {
    "text": "we want to lock so we can request one",
    "start": "6066719",
    "end": "6071679"
  },
  {
    "text": "and this is the one location maybe i can go into details later on why that is but this is what",
    "start": "6076159",
    "end": "6081520"
  },
  {
    "text": "i've been hinting at with generally seen as an api mistake in the standard lib locking returns a result",
    "start": "6081520",
    "end": "6088000"
  },
  {
    "text": "and that's result is almost not handleable in the case where it actually fails so this is the point",
    "start": "6088000",
    "end": "6094719"
  },
  {
    "text": "where we i'll call just unwrap and just be okay with that um so",
    "start": "6094719",
    "end": "6102239"
  },
  {
    "text": "um this is really like if if this result fails your program is so broken that you",
    "start": "6102239",
    "end": "6108000"
  },
  {
    "text": "probably cannot recover and then panicking and quitting is the right thing to do",
    "start": "6108000",
    "end": "6113840"
  },
  {
    "text": "and what this returns is a so-called guard i call this guard this is a value",
    "start": "6113840",
    "end": "6120880"
  },
  {
    "text": "that represents i'm currently holding lock and i can use the card to actually write to the data",
    "start": "6120880",
    "end": "6126480"
  },
  {
    "text": "because this represents i'm holding a lock and it knows i'm holding a lock to a",
    "start": "6126480",
    "end": "6131520"
  },
  {
    "text": "vector queue and will expose the function pushback i cannot go into the exact mechanics on how this works",
    "start": "6131520",
    "end": "6137280"
  },
  {
    "text": "um here but because i would like to talk a little bit about how that guard works",
    "start": "6137280",
    "end": "6142719"
  },
  {
    "text": "um in a second but just before we're doing that i would also like to again",
    "start": "6142719",
    "end": "6149920"
  },
  {
    "text": "do that here so if we retrieve",
    "start": "6149920",
    "end": "6153678"
  },
  {
    "text": "um yeah this is exactly what i wanted to talk about before when i talk about the guard uh thanks",
    "start": "6159760",
    "end": "6165920"
  },
  {
    "text": "for the question so when is that lock released we need to mutate it because we want to mute it",
    "start": "6165920",
    "end": "6171760"
  },
  {
    "text": "through it and this card represents okay you're currently holding the lock now you are allowed",
    "start": "6171760",
    "end": "6182158"
  },
  {
    "text": "so here is the guard and because the mutex internally",
    "start": "6182239",
    "end": "6188560"
  },
  {
    "text": "guarantees that this card can only exist once that's the definition of a mutex",
    "start": "6188560",
    "end": "6195840"
  },
  {
    "text": "this one will finally produce you a mutable reference",
    "start": "6195840",
    "end": "6201040"
  },
  {
    "text": "to which you can write that only exists once this is the thing that a mutex provides so this is like the the",
    "start": "6201040",
    "end": "6207600"
  },
  {
    "text": "cleverness that rust has there",
    "start": "6207600",
    "end": "6213118"
  },
  {
    "text": "so there's the question when is the guard released",
    "start": "6213920",
    "end": "6218400"
  },
  {
    "text": "the guard is released by the end of the scope",
    "start": "6220000",
    "end": "6224638"
  },
  {
    "text": "here",
    "start": "6230840",
    "end": "6233840"
  },
  {
    "text": "yep so when it's dropped um that means it's a slight warning here",
    "start": "6236080",
    "end": "6245440"
  },
  {
    "text": "um i've been using i've been binding the guard explicitly here",
    "start": "6245440",
    "end": "6251040"
  },
  {
    "text": "here that means the guard will be released up after actually writing to the client so i'm actually holding it for a little",
    "start": "6251040",
    "end": "6257440"
  },
  {
    "text": "too long which is why general practice is actually to",
    "start": "6257440",
    "end": "6262800"
  },
  {
    "text": "do that all in line",
    "start": "6262800",
    "end": "6265920"
  },
  {
    "text": "that means the guard will only be held for actually this this line of code so if you don't bind",
    "start": "6272400",
    "end": "6279840"
  },
  {
    "text": "things to a variable they will be like they will be temporary and immediately dropped and that makes sure",
    "start": "6279840",
    "end": "6285040"
  },
  {
    "text": "that that this year works so this is actually a good practice when working with mutexes",
    "start": "6285040",
    "end": "6290320"
  },
  {
    "text": "yeah so what we see here is we have the mutex and then we have",
    "start": "6290320",
    "end": "6296560"
  },
  {
    "text": "this way to come back to mutability by working through the lock interface",
    "start": "6296560",
    "end": "6302800"
  },
  {
    "text": "there's often the question whether that's an escape patch in the language it actually isn't because i said i wanted to come back to this",
    "start": "6302800",
    "end": "6308480"
  },
  {
    "text": "type signature and make sure that you understand it",
    "start": "6308480",
    "end": "6315119"
  },
  {
    "text": "this says here you get a reference to mutex you are not owning it",
    "start": "6315280",
    "end": "6322960"
  },
  {
    "text": "the mutex wraps a vector cue inside and the mutex",
    "start": "6322960",
    "end": "6330159"
  },
  {
    "text": "actually owns it so you have this kind of picture here",
    "start": "6330159",
    "end": "6338400"
  },
  {
    "text": "mutex and really the storage on the inside",
    "start": "6339040",
    "end": "6345840"
  },
  {
    "text": "and the immutable reference here says you are not allowed to manipulate the",
    "start": "6346320",
    "end": "6351920"
  },
  {
    "text": "mutex you're also not the owner of the mutex so you're also not allowed to destroy it or",
    "start": "6351920",
    "end": "6357440"
  },
  {
    "text": "anything else you can only work through it through an interface",
    "start": "6357440",
    "end": "6362719"
  },
  {
    "text": "you are also not to access what's on the inside the only way to actually get to the inside is this locking function",
    "start": "6363280",
    "end": "6372480"
  },
  {
    "text": "and this does three things",
    "start": "6372480",
    "end": "6387840"
  },
  {
    "text": "so um here the mutex exists before i'm",
    "start": "6399600",
    "end": "6406239"
  },
  {
    "text": "actually calling here the moment i'm locking",
    "start": "6406239",
    "end": "6412159"
  },
  {
    "text": "here the card starts existing",
    "start": "6412840",
    "end": "6417760"
  },
  {
    "text": "sorry",
    "start": "6418880",
    "end": "6421198"
  },
  {
    "text": "and the card exists until here",
    "start": "6424480",
    "end": "6429840"
  },
  {
    "text": "but in between there's a third thing happening",
    "start": "6431920",
    "end": "6436960"
  },
  {
    "text": "which happens when i call pushback is at some point there will be a mutable reference",
    "start": "6436960",
    "end": "6442480"
  },
  {
    "text": "to this vector qb available",
    "start": "6442480",
    "end": "6450400"
  },
  {
    "text": "and this one is enforced and this is what you generally know as",
    "start": "6450800",
    "end": "6457600"
  },
  {
    "text": "borrow checking if you like hear about it at the hear hear about that at some point",
    "start": "6457600",
    "end": "6462639"
  },
  {
    "text": "is enforced to never live longer than the guard that would be",
    "start": "6462639",
    "end": "6469520"
  },
  {
    "text": "a violation so rust does three levels of safety checking here",
    "start": "6469520",
    "end": "6474719"
  },
  {
    "text": "first of all to make sure that you don't start like manipulating the mutex structure raw",
    "start": "6474719",
    "end": "6480960"
  },
  {
    "text": "and that it's properly initialized and this is a properly initialized mutex that before you are even allowed to have",
    "start": "6480960",
    "end": "6488320"
  },
  {
    "text": "a reference to the inside you have made sure that there's a lock but the third thing is",
    "start": "6488320",
    "end": "6494159"
  },
  {
    "text": "that it will also make sure through this kind of layer checking it",
    "start": "6494159",
    "end": "6500320"
  },
  {
    "text": "will also make sure that even after you release the lock you are asked you before releasing the lock it's better to",
    "start": "6500320",
    "end": "6507040"
  },
  {
    "text": "save that way before releasing the lock you also gave up any attempt to",
    "start": "6507040",
    "end": "6512080"
  },
  {
    "text": "manipulate the data so if i were trying to manipulate the data after",
    "start": "6512080",
    "end": "6517520"
  },
  {
    "text": "dropping the guard we can't use this case if we wanted to we could just force",
    "start": "6517520",
    "end": "6524560"
  },
  {
    "text": "that's this is not uh this is not very",
    "start": "6524560",
    "end": "6530880"
  },
  {
    "text": "meaningful code this is we lock we guard and then we try to write to it",
    "start": "6530880",
    "end": "6536080"
  },
  {
    "text": "we so we lock we get the guard then we throw it away and then we try to write to it this not something one would write",
    "start": "6536080",
    "end": "6545440"
  },
  {
    "text": "but if you were to run this um it would say ah wait a second",
    "start": "6545440",
    "end": "6553119"
  },
  {
    "text": "this is a the wrong error message this is the one i wanted if you were to",
    "start": "6553119",
    "end": "6560000"
  },
  {
    "text": "look at this",
    "start": "6560000",
    "end": "6562560"
  },
  {
    "text": "then it would say hey uh you are trying to write to this card although you have thrown it away",
    "start": "6567199",
    "end": "6573679"
  },
  {
    "text": "and rust is not extremely magical around this in",
    "start": "6574960",
    "end": "6581520"
  },
  {
    "text": "the sense that well what it does is draw these regions",
    "start": "6581520",
    "end": "6588719"
  },
  {
    "text": "i'm sorry they should what it does is draw these regions and",
    "start": "6589440",
    "end": "6595520"
  },
  {
    "text": "make sure they follow a hierarchy and that's a that's what's generally",
    "start": "6595520",
    "end": "6602880"
  },
  {
    "text": "known as borrow checking making sure that what i have that my loan on the vectiq does not outlive",
    "start": "6602880",
    "end": "6611199"
  },
  {
    "text": "the time that is actually valid okay",
    "start": "6611199",
    "end": "6618079"
  },
  {
    "text": "are there any questions around that",
    "start": "6621760",
    "end": "6627198"
  },
  {
    "text": "ah should maybe run it",
    "start": "6634639",
    "end": "6640080"
  },
  {
    "text": "um on your next question are data race conditions possible no",
    "start": "6644800",
    "end": "6650560"
  },
  {
    "text": "that's that's exactly the thing that rust bands data races are not possible log races are just to be clear",
    "start": "6650560",
    "end": "6659119"
  },
  {
    "text": "um so but data races are not",
    "start": "6659119",
    "end": "6667840"
  },
  {
    "text": "um because data races like rust is a mem it basically follows from",
    "start": "6668320",
    "end": "6674400"
  },
  {
    "text": "rust as a memory saved language and data races are a kind of memory unsafety",
    "start": "6674400",
    "end": "6681840"
  },
  {
    "text": "and yeah that lock on wrap pop front will will immediately release",
    "start": "6686080",
    "end": "6693520"
  },
  {
    "text": "the lock in that line because it's temporary um the mathematical proof for this is",
    "start": "6693520",
    "end": "6699760"
  },
  {
    "text": "called rust belt um so if you look at the university of subrican rust bulk project",
    "start": "6699760",
    "end": "6706840"
  },
  {
    "text": "um that is um",
    "start": "6706840",
    "end": "6713119"
  },
  {
    "text": "you'll find it there",
    "start": "6715840",
    "end": "6723040"
  },
  {
    "text": "clear yes you can deadlock in live locking rust you can um",
    "start": "6723040",
    "end": "6729760"
  },
  {
    "text": "there are ways on how you can force a resource acquisition order if you structure your types right",
    "start": "6729920",
    "end": "6737280"
  },
  {
    "text": "but that is something you need to work for that doesn't come naturally out of the language",
    "start": "6737280",
    "end": "6742560"
  },
  {
    "text": "you can use the type system a little bit was that",
    "start": "6742560",
    "end": "6747280"
  },
  {
    "text": "the questions on cc plus plus new and delete in any way um no there's nothing similar to new and",
    "start": "6748080",
    "end": "6755199"
  },
  {
    "text": "delete um in in the way that uh that you would be used to in c plus um",
    "start": "6755199",
    "end": "6762400"
  },
  {
    "text": "we like rust doesn't even have things like special constructors there's some",
    "start": "6762400",
    "end": "6767920"
  },
  {
    "text": "there's ways to create um to create data but the",
    "start": "6767920",
    "end": "6776000"
  },
  {
    "text": "the destruction of data always goes through this drop interface you can write destructors um that's the thing that i haven't shown",
    "start": "6776239",
    "end": "6783199"
  },
  {
    "text": "like all of these things work through destructors um",
    "start": "6783199",
    "end": "6788080"
  },
  {
    "text": "okay um and i will quickly",
    "start": "6791040",
    "end": "6799840"
  },
  {
    "text": "share this code already as a playground here um rust has the rust playground",
    "start": "6800480",
    "end": "6810320"
  },
  {
    "text": "i will show that on screen for a second",
    "start": "6810880",
    "end": "6814480"
  },
  {
    "text": "so that's our online playground which you probably know and it has this nice share button",
    "start": "6816480",
    "end": "6823520"
  },
  {
    "text": "and i will copy the link here to this",
    "start": "6823520",
    "end": "6828560"
  },
  {
    "text": "um that's the code that we've written and you can start playing around with",
    "start": "6831040",
    "end": "6838239"
  },
  {
    "text": "that on thomas question the art no longer",
    "start": "6838239",
    "end": "6844400"
  },
  {
    "text": "leads mood is that because of interior theory mutability and yes",
    "start": "6844400",
    "end": "6850080"
  },
  {
    "text": "we are you've seen this warning here mood storage it does not need to be mutable anymore",
    "start": "6850080",
    "end": "6855280"
  },
  {
    "text": "rust has this idea of interior immutability um just quickly which is precisely this",
    "start": "6855280",
    "end": "6863360"
  },
  {
    "text": "year where i have immutable access to this and",
    "start": "6863360",
    "end": "6869760"
  },
  {
    "text": "but in some way i can produce mutable access here and i said like i cannot like if i have",
    "start": "6869760",
    "end": "6876800"
  },
  {
    "text": "an immutable reference i cannot get immutable reference and this is in general true in practice",
    "start": "6876800",
    "end": "6883280"
  },
  {
    "text": "that would make mutexes not very useful types because that would mean i would",
    "start": "6883280",
    "end": "6888480"
  },
  {
    "text": "have to need mutable access to the mutex already to then produce immutable and mutable access to its inner parts so",
    "start": "6888480",
    "end": "6894960"
  },
  {
    "text": "there's this concept of immutability in that types in and by themselves can",
    "start": "6894960",
    "end": "6901679"
  },
  {
    "text": "say i will manage um immutability by myself but and and particularly at runtime",
    "start": "6901679",
    "end": "6908880"
  },
  {
    "text": "because that's what a mutex does it is a mutex it's a moderator of mutation",
    "start": "6908880",
    "end": "6914480"
  },
  {
    "text": "essentially um but what that means is that it still needs to uphold this guarantee",
    "start": "6914480",
    "end": "6919679"
  },
  {
    "text": "that mutable references in rust if there is one out there's exactly one out there's also",
    "start": "6919679",
    "end": "6925360"
  },
  {
    "text": "no immutable references there's exactly one mutable reference to the vector q available at that moment",
    "start": "6925360",
    "end": "6931599"
  },
  {
    "text": "in the program and nothing else and that's um that's important to uh to make sure that this is uh",
    "start": "6931599",
    "end": "6940320"
  },
  {
    "text": "uh that this is true um at all times and mutex's um",
    "start": "6940320",
    "end": "6946880"
  },
  {
    "text": "especially many concurrency primitives do you use this kind of feature",
    "start": "6946880",
    "end": "6955280"
  },
  {
    "text": "um yeah and the compiler knows about this it knows okay these are types that manage this kind of mutability checking on the",
    "start": "6955280",
    "end": "6961840"
  },
  {
    "text": "inside by themselves but the language will still exist so if",
    "start": "6961840",
    "end": "6967119"
  },
  {
    "text": "i have a function here that says",
    "start": "6967119",
    "end": "6973280"
  },
  {
    "text": "um now they're all gone oh if i have a function here that says i",
    "start": "6973280",
    "end": "6978960"
  },
  {
    "text": "take immutable reference it still needs to make sure that in all cases",
    "start": "6978960",
    "end": "6984320"
  },
  {
    "text": "um while bufferedreader readline works on this specific buffer it knows this is the only execution of",
    "start": "6984320",
    "end": "6991040"
  },
  {
    "text": "this function on this specific piece of data and again coming back to what i said",
    "start": "6991040",
    "end": "6996159"
  },
  {
    "text": "before this is this is the crucial part of the concurrency and safety checking of rust",
    "start": "6996159",
    "end": "7002639"
  },
  {
    "text": "and if you take this piece of code i can highly recommend doing that as an exercise if you take this piece of code",
    "start": "7002639",
    "end": "7008400"
  },
  {
    "text": "and then have a look at the tokyo api you will see tokyo also has tcp stream",
    "start": "7008400",
    "end": "7013840"
  },
  {
    "text": "it has buffered reader it has it has tcp listener under the exact same",
    "start": "7013840",
    "end": "7020719"
  },
  {
    "text": "interface it has mutex under the same interface it has a task",
    "start": "7020719",
    "end": "7026480"
  },
  {
    "text": "spawn module instead of a threat spawn module and this is the most important difference behind this but the",
    "start": "7026480",
    "end": "7032960"
  },
  {
    "text": "the safety checking works very much the same and the construction",
    "start": "7032960",
    "end": "7039199"
  },
  {
    "text": "of this program works very much the same which is an interesting experience to see where",
    "start": "7039199",
    "end": "7044960"
  },
  {
    "text": "um rust takes the the common ground between all of these kind of things and",
    "start": "7044960",
    "end": "7050000"
  },
  {
    "text": "makes it safe and so you can use and this is also why i picked going down that route um for uh for this",
    "start": "7050000",
    "end": "7058080"
  },
  {
    "text": "exercise because it gives you an access on how the mechanics work and then you can apply these mechanics",
    "start": "7058080",
    "end": "7064000"
  },
  {
    "text": "to just tokyo or whatever um right away um so um the",
    "start": "7064000",
    "end": "7072400"
  },
  {
    "text": "tokyo task spawn interface if you look at it is very very similar to the threat spawn interface",
    "start": "7072400",
    "end": "7078560"
  },
  {
    "text": "going back to that point of common ground so yeah",
    "start": "7078560",
    "end": "7087360"
  },
  {
    "text": "are there any other [Music]",
    "start": "7087360",
    "end": "7093440"
  },
  {
    "text": "uh our collections themselves let's say no so um standard lip collections and",
    "start": "7093440",
    "end": "7100320"
  },
  {
    "text": "rust are not by themselves thread safe and you would need to use these kind of",
    "start": "7100320",
    "end": "7105679"
  },
  {
    "text": "things but rust knows that they're not thread safe so they are safe to use um and this is exactly what it",
    "start": "7105679",
    "end": "7112080"
  },
  {
    "text": "what it has figured out when i was trying to pass um if if it were thread safe it would not",
    "start": "7112080",
    "end": "7117599"
  },
  {
    "text": "have complained the moment where i'm passing it over through an arc and would try",
    "start": "7117599",
    "end": "7122639"
  },
  {
    "text": "uh and would try to mutate it in a way",
    "start": "7122639",
    "end": "7129280"
  },
  {
    "text": "there are though implementations of threatsafe collections out there as crates",
    "start": "7129280",
    "end": "7136239"
  },
  {
    "text": "happy too last round of questions um that's always good when",
    "start": "7140880",
    "end": "7148719"
  },
  {
    "text": "someone says eye opening um i have an async implementation um of this sorry",
    "start": "7148719",
    "end": "7156400"
  },
  {
    "text": "online that is a little bit more elaborate",
    "start": "7156400",
    "end": "7161119"
  },
  {
    "text": "[Music] i will",
    "start": "7162780",
    "end": "7167360"
  },
  {
    "text": "i'll have so much time to actually find that link",
    "start": "7168080",
    "end": "7185840"
  },
  {
    "text": "that is takes a little bit of a more complex protocol that",
    "start": "7190560",
    "end": "7196159"
  },
  {
    "text": "looks a lot like the redis protocol so it also has a library as a protocol browser um it's written using async stud but",
    "start": "7196159",
    "end": "7204080"
  },
  {
    "text": "given that the interface of async state and tokyo have moves very closely to each other you can basically just go and",
    "start": "7204080",
    "end": "7209360"
  },
  {
    "text": "remove async stud replace it by tokund um and use it as tokyo",
    "start": "7209360",
    "end": "7216400"
  },
  {
    "text": "and greetings to germany um yeah i i hope i give you",
    "start": "7216560",
    "end": "7222639"
  },
  {
    "text": "um a little bit of uh an of an overview of the basics of what make rust teasing",
    "start": "7222639",
    "end": "7228880"
  },
  {
    "text": "um and the last thing that i would like to give you um on your learning exercise is",
    "start": "7228880",
    "end": "7235520"
  },
  {
    "text": "ownership is the important principle in rust if you if you are struggling with the",
    "start": "7235520",
    "end": "7240560"
  },
  {
    "text": "borrower checker a little reference less use more clones use arcs like use things that they use own types um",
    "start": "7240560",
    "end": "7248000"
  },
  {
    "text": "that makes uh rust a lot easier and there's an easy refactoring for if you figure out i'm",
    "start": "7248000",
    "end": "7253760"
  },
  {
    "text": "copying data too much and all of these kind of things and then actually start referencing more is a good way to",
    "start": "7253760",
    "end": "7260880"
  },
  {
    "text": "learn the language so ownership is a thing that you should focus on",
    "start": "7260880",
    "end": "7265840"
  },
  {
    "text": "first okay um",
    "start": "7266840",
    "end": "7273440"
  },
  {
    "text": "oh and um because it's so quick to answer um frank um",
    "start": "7273440",
    "end": "7280800"
  },
  {
    "text": "yeah that was that was the thing that i had uh hinted at there's a type in rust that is instead",
    "start": "7280880",
    "end": "7286560"
  },
  {
    "text": "of mudex it's called um rw lock which works the same as mutex it",
    "start": "7286560",
    "end": "7294960"
  },
  {
    "text": "wraps the data but it has two functions one read and one right where",
    "start": "7294960",
    "end": "7300400"
  },
  {
    "text": "you request the kind of locking that you that you need",
    "start": "7300400",
    "end": "7305840"
  },
  {
    "text": "okay um thank you all for attending the session seen more than 100",
    "start": "7309520",
    "end": "7316159"
  },
  {
    "text": "listeners and number has dropped so thank you and um see you soon if you",
    "start": "7316159",
    "end": "7322560"
  },
  {
    "text": "have any further questions i'll be in slack please feel free to ping me um i may need some time to answer",
    "start": "7322560",
    "end": "7330400"
  },
  {
    "text": "and uh but i'll i'll be going through all the questions you sent me",
    "start": "7330400",
    "end": "7335840"
  },
  {
    "text": "bye",
    "start": "7336880",
    "end": "7339840"
  }
]