[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "hi and welcome to this talk entitled",
    "start": "1439",
    "end": "3600"
  },
  {
    "text": "calico vpp using calico's plugable data",
    "start": "3600",
    "end": "6560"
  },
  {
    "text": "planes for fun and fast networking",
    "start": "6560",
    "end": "9679"
  },
  {
    "text": "my name is chris tompkins i'm a",
    "start": "9679",
    "end": "11280"
  },
  {
    "text": "developer advocate at tigera",
    "start": "11280",
    "end": "13920"
  },
  {
    "text": "i champion user needs and support the",
    "start": "13920",
    "end": "16400"
  },
  {
    "text": "community and users",
    "start": "16400",
    "end": "18880"
  },
  {
    "text": "i've been working in networking since",
    "start": "18880",
    "end": "20400"
  },
  {
    "text": "about 2000 and after a few years i",
    "start": "20400",
    "end": "22800"
  },
  {
    "text": "realized that a per device cli is not a",
    "start": "22800",
    "end": "25599"
  },
  {
    "text": "great solution for a large environment",
    "start": "25599",
    "end": "27359"
  },
  {
    "text": "so i took an early interest in",
    "start": "27359",
    "end": "28960"
  },
  {
    "text": "infrastructure as code and automation",
    "start": "28960",
    "end": "31359"
  },
  {
    "text": "and",
    "start": "31359",
    "end": "32160"
  },
  {
    "text": "and i still pursue those today",
    "start": "32160",
    "end": "34719"
  },
  {
    "text": "when i'm not working in it i love",
    "start": "34719",
    "end": "36800"
  },
  {
    "text": "reading films music i also fly radio",
    "start": "36800",
    "end": "40000"
  },
  {
    "text": "controlled gliders which is a strange",
    "start": "40000",
    "end": "41600"
  },
  {
    "text": "coincidence",
    "start": "41600",
    "end": "43280"
  },
  {
    "text": "as our other speaker today alois",
    "start": "43280",
    "end": "45039"
  },
  {
    "text": "augustine who's a software engineer at",
    "start": "45039",
    "end": "46719"
  },
  {
    "text": "cisco um also does like flying radio",
    "start": "46719",
    "end": "49760"
  },
  {
    "text": "control planes um",
    "start": "49760",
    "end": "51520"
  },
  {
    "text": "he is one of the calico vpp data plane",
    "start": "51520",
    "end": "54480"
  },
  {
    "text": "author uh team",
    "start": "54480",
    "end": "56239"
  },
  {
    "text": "um so without further ado let's get",
    "start": "56239",
    "end": "58960"
  },
  {
    "text": "started",
    "start": "58960",
    "end": "60719"
  },
  {
    "text": "so i'm going to start and just talk a",
    "start": "60719",
    "end": "62239"
  },
  {
    "start": "61000",
    "end": "61000"
  },
  {
    "text": "little bit about calico first of all",
    "start": "62239",
    "end": "63760"
  },
  {
    "text": "just very briefly",
    "start": "63760",
    "end": "65280"
  },
  {
    "text": "so what is calico",
    "start": "65280",
    "end": "66960"
  },
  {
    "text": "well it's an open source networking and",
    "start": "66960",
    "end": "68799"
  },
  {
    "text": "network security solution for containers",
    "start": "68799",
    "end": "71360"
  },
  {
    "text": "virtual machines and native host based",
    "start": "71360",
    "end": "73600"
  },
  {
    "text": "workloads",
    "start": "73600",
    "end": "74880"
  },
  {
    "text": "it supports a broad range of platforms",
    "start": "74880",
    "end": "77040"
  },
  {
    "text": "including kubernetes openshift marantes",
    "start": "77040",
    "end": "79360"
  },
  {
    "text": "kubernetes engine",
    "start": "79360",
    "end": "81040"
  },
  {
    "text": "openstack and bare metal services",
    "start": "81040",
    "end": "84560"
  },
  {
    "text": "and",
    "start": "84560",
    "end": "85360"
  },
  {
    "text": "whether you opt to use the ebpf data",
    "start": "85360",
    "end": "87840"
  },
  {
    "text": "plane or linux's standard networking",
    "start": "87840",
    "end": "90240"
  },
  {
    "text": "data plane or vpp",
    "start": "90240",
    "end": "91920"
  },
  {
    "text": "um or the windows host networking",
    "start": "91920",
    "end": "93840"
  },
  {
    "text": "service data plane um calico delivers",
    "start": "93840",
    "end": "96479"
  },
  {
    "text": "blazing fast performance and",
    "start": "96479",
    "end": "98799"
  },
  {
    "text": "cloud native scalability",
    "start": "98799",
    "end": "100560"
  },
  {
    "text": "it provides developers and cluster",
    "start": "100560",
    "end": "102399"
  },
  {
    "text": "operators with a consistent experience",
    "start": "102399",
    "end": "104399"
  },
  {
    "text": "and a set of capabilities",
    "start": "104399",
    "end": "106640"
  },
  {
    "text": "whether you're running in cloud or",
    "start": "106640",
    "end": "108560"
  },
  {
    "text": "on-prem",
    "start": "108560",
    "end": "110640"
  },
  {
    "text": "so",
    "start": "110640",
    "end": "111600"
  },
  {
    "text": "we have",
    "start": "111600",
    "end": "113040"
  },
  {
    "text": "more than 6 000 slack channel members",
    "start": "113040",
    "end": "115200"
  },
  {
    "text": "more than 150 contributors and more than",
    "start": "115200",
    "end": "117840"
  },
  {
    "text": "a million compute nodes are powered by",
    "start": "117840",
    "end": "119600"
  },
  {
    "text": "calico every day",
    "start": "119600",
    "end": "122399"
  },
  {
    "start": "122000",
    "end": "122000"
  },
  {
    "text": "so when calico was designed it was",
    "start": "122479",
    "end": "124159"
  },
  {
    "text": "designed with a four-tier architecture",
    "start": "124159",
    "end": "126240"
  },
  {
    "text": "from day one so software modularity and",
    "start": "126240",
    "end": "128879"
  },
  {
    "text": "software loose coupling were included by",
    "start": "128879",
    "end": "131840"
  },
  {
    "text": "design in the in the software",
    "start": "131840",
    "end": "133280"
  },
  {
    "text": "architecture and that has paid great",
    "start": "133280",
    "end": "135200"
  },
  {
    "text": "dividends",
    "start": "135200",
    "end": "136239"
  },
  {
    "text": "so you might be aware that network",
    "start": "136239",
    "end": "138400"
  },
  {
    "text": "hardware is often designed with a",
    "start": "138400",
    "end": "141680"
  },
  {
    "text": "paradigm of having a control plane and a",
    "start": "141680",
    "end": "143760"
  },
  {
    "text": "data plane we'll go into what those are",
    "start": "143760",
    "end": "145760"
  },
  {
    "text": "in a moment",
    "start": "145760",
    "end": "147120"
  },
  {
    "text": "but",
    "start": "147120",
    "end": "148720"
  },
  {
    "text": "calico also follows that model",
    "start": "148720",
    "end": "150879"
  },
  {
    "text": "software modularity is the concept of",
    "start": "150879",
    "end": "153120"
  },
  {
    "text": "the dividing software",
    "start": "153120",
    "end": "154800"
  },
  {
    "text": "code intentionally into blocks that work",
    "start": "154800",
    "end": "156879"
  },
  {
    "text": "together to create a larger hole",
    "start": "156879",
    "end": "159040"
  },
  {
    "text": "and software loose coupling is the",
    "start": "159040",
    "end": "160959"
  },
  {
    "text": "concept of making these blocks opaque to",
    "start": "160959",
    "end": "163120"
  },
  {
    "text": "each other so that they can only talk",
    "start": "163120",
    "end": "164959"
  },
  {
    "text": "via strictly defined interfaces",
    "start": "164959",
    "end": "168720"
  },
  {
    "text": "together these concepts make the",
    "start": "168959",
    "end": "170480"
  },
  {
    "text": "software easier to fix troubleshoot and",
    "start": "170480",
    "end": "173280"
  },
  {
    "text": "replace and in the case of calico these",
    "start": "173280",
    "end": "175440"
  },
  {
    "text": "benefits extend to following the network",
    "start": "175440",
    "end": "178080"
  },
  {
    "text": "paradigm of of",
    "start": "178080",
    "end": "180000"
  },
  {
    "text": "a control plane and a data plane",
    "start": "180000",
    "end": "182000"
  },
  {
    "text": "so you can see that i've highlighted in",
    "start": "182000",
    "end": "183519"
  },
  {
    "text": "blue here the control plane um elements",
    "start": "183519",
    "end": "186560"
  },
  {
    "text": "of the four tiers that calico are made",
    "start": "186560",
    "end": "188239"
  },
  {
    "text": "up of",
    "start": "188239",
    "end": "189280"
  },
  {
    "text": "so the control plane elements are the",
    "start": "189280",
    "end": "190640"
  },
  {
    "text": "data model which defines the custom",
    "start": "190640",
    "end": "192239"
  },
  {
    "text": "resources used to enable calico",
    "start": "192239",
    "end": "195120"
  },
  {
    "text": "and the felix calculation graph which is",
    "start": "195120",
    "end": "197920"
  },
  {
    "text": "the control plane that makes the smart",
    "start": "197920",
    "end": "199440"
  },
  {
    "text": "decisions and then the data plane",
    "start": "199440",
    "end": "202239"
  },
  {
    "text": "components are the data plane driver",
    "start": "202239",
    "end": "204400"
  },
  {
    "text": "which is a simple and minimal driver for",
    "start": "204400",
    "end": "206879"
  },
  {
    "text": "programming the data plane and the data",
    "start": "206879",
    "end": "209040"
  },
  {
    "text": "plane itself which is responsible for",
    "start": "209040",
    "end": "210720"
  },
  {
    "text": "actually forwarding packets so let's",
    "start": "210720",
    "end": "212720"
  },
  {
    "text": "have a look",
    "start": "212720",
    "end": "213760"
  },
  {
    "text": "in more detail of the control plane data",
    "start": "213760",
    "end": "215440"
  },
  {
    "text": "plane",
    "start": "215440",
    "end": "216560"
  },
  {
    "text": "concept",
    "start": "216560",
    "end": "217920"
  },
  {
    "text": "so this diagram shows",
    "start": "217920",
    "end": "220480"
  },
  {
    "start": "218000",
    "end": "218000"
  },
  {
    "text": "three",
    "start": "220480",
    "end": "221360"
  },
  {
    "text": "nodes three network nodes now those each",
    "start": "221360",
    "end": "223680"
  },
  {
    "text": "network node might be",
    "start": "223680",
    "end": "225680"
  },
  {
    "text": "a compute host a",
    "start": "225680",
    "end": "228480"
  },
  {
    "text": "hypervisor for virtual machines it might",
    "start": "228480",
    "end": "231200"
  },
  {
    "text": "be a container host it might be a router",
    "start": "231200",
    "end": "233280"
  },
  {
    "text": "or a switch but you can see conceptually",
    "start": "233280",
    "end": "235439"
  },
  {
    "text": "each node is made up of a control plane",
    "start": "235439",
    "end": "237439"
  },
  {
    "text": "at the top and the data plane at the",
    "start": "237439",
    "end": "238799"
  },
  {
    "text": "bottom the control planes talk to each",
    "start": "238799",
    "end": "241200"
  },
  {
    "text": "other",
    "start": "241200",
    "end": "242080"
  },
  {
    "text": "through the data plane but their job is",
    "start": "242080",
    "end": "245120"
  },
  {
    "text": "um",
    "start": "245120",
    "end": "246080"
  },
  {
    "text": "figuring out what's going on in the",
    "start": "246080",
    "end": "247760"
  },
  {
    "text": "network and establishing consensus",
    "start": "247760",
    "end": "250319"
  },
  {
    "text": "for example routing protocols",
    "start": "250319",
    "end": "252959"
  },
  {
    "text": "so the control plane is typically",
    "start": "252959",
    "end": "254319"
  },
  {
    "text": "implemented on a general purpose cpu",
    "start": "254319",
    "end": "257040"
  },
  {
    "text": "it manages complex device and network",
    "start": "257040",
    "end": "259759"
  },
  {
    "text": "configuration and state and if you're",
    "start": "259759",
    "end": "261759"
  },
  {
    "text": "familiar with routing protocols such as",
    "start": "261759",
    "end": "263440"
  },
  {
    "text": "bgp ospf and isis",
    "start": "263440",
    "end": "266479"
  },
  {
    "text": "they're implemented in the control plane",
    "start": "266479",
    "end": "269440"
  },
  {
    "text": "so it's necessarily sophisticated",
    "start": "269440",
    "end": "271120"
  },
  {
    "text": "software there's a lot going on there",
    "start": "271120",
    "end": "272560"
  },
  {
    "text": "and that's why it runs on a general",
    "start": "272560",
    "end": "273919"
  },
  {
    "text": "purpose cpu which is appropriate for",
    "start": "273919",
    "end": "276400"
  },
  {
    "text": "running uh workloads that can vary in",
    "start": "276400",
    "end": "280320"
  },
  {
    "text": "software complexity",
    "start": "280320",
    "end": "282639"
  },
  {
    "text": "the data plane in contrast is a",
    "start": "282639",
    "end": "284479"
  },
  {
    "text": "different beast the data plane's job is",
    "start": "284479",
    "end": "286720"
  },
  {
    "text": "actually to forward the traffic so",
    "start": "286720",
    "end": "289680"
  },
  {
    "text": "i've put cat videos in the diagram",
    "start": "289680",
    "end": "291680"
  },
  {
    "text": "because let's be honest that's 90 of the",
    "start": "291680",
    "end": "293440"
  },
  {
    "text": "internet and",
    "start": "293440",
    "end": "295120"
  },
  {
    "text": "you can see that the cat videos only",
    "start": "295120",
    "end": "297680"
  },
  {
    "text": "travel through the data plane they don't",
    "start": "297680",
    "end": "299600"
  },
  {
    "text": "travel through the control plane nodes",
    "start": "299600",
    "end": "302000"
  },
  {
    "text": "so the data plane is responsible for",
    "start": "302000",
    "end": "303919"
  },
  {
    "text": "processing the transit traffic through",
    "start": "303919",
    "end": "305680"
  },
  {
    "text": "the devices",
    "start": "305680",
    "end": "307199"
  },
  {
    "text": "um it needs to trans uh to send a lot of",
    "start": "307199",
    "end": "310080"
  },
  {
    "text": "traffic so it should be able to use um",
    "start": "310080",
    "end": "312240"
  },
  {
    "text": "hardware acceleration features if",
    "start": "312240",
    "end": "313680"
  },
  {
    "text": "they're available",
    "start": "313680",
    "end": "315120"
  },
  {
    "text": "it should be designed to be the simplest",
    "start": "315120",
    "end": "317039"
  },
  {
    "text": "possible implementation of the required",
    "start": "317039",
    "end": "319520"
  },
  {
    "text": "packet forwarding features",
    "start": "319520",
    "end": "321520"
  },
  {
    "text": "um because it implements a fast path for",
    "start": "321520",
    "end": "323360"
  },
  {
    "text": "the traffic so the less software",
    "start": "323360",
    "end": "325199"
  },
  {
    "text": "complexity in the data plane the better",
    "start": "325199",
    "end": "327840"
  },
  {
    "text": "um",
    "start": "327840",
    "end": "328639"
  },
  {
    "text": "if there are hardware acceleration",
    "start": "328639",
    "end": "330080"
  },
  {
    "text": "features available like a6 they should",
    "start": "330080",
    "end": "331680"
  },
  {
    "text": "be used",
    "start": "331680",
    "end": "332639"
  },
  {
    "text": "and i like to use this um metaphor or",
    "start": "332639",
    "end": "335280"
  },
  {
    "text": "example really of of mpls which is a",
    "start": "335280",
    "end": "338160"
  },
  {
    "text": "common um",
    "start": "338160",
    "end": "339759"
  },
  {
    "text": "uh tool in service provider networks",
    "start": "339759",
    "end": "343120"
  },
  {
    "text": "um mpls has been enormously successful",
    "start": "343120",
    "end": "345520"
  },
  {
    "text": "in service provider networks and that's",
    "start": "345520",
    "end": "347039"
  },
  {
    "text": "because",
    "start": "347039",
    "end": "348160"
  },
  {
    "text": "uh it purges unnecessary functionality",
    "start": "348160",
    "end": "350720"
  },
  {
    "text": "from the data plane",
    "start": "350720",
    "end": "352479"
  },
  {
    "text": "and performs minimal packet processing",
    "start": "352479",
    "end": "356080"
  },
  {
    "text": "per packet and that leads to fast",
    "start": "356080",
    "end": "358560"
  },
  {
    "text": "affordable devices so mpls the designers",
    "start": "358560",
    "end": "361840"
  },
  {
    "text": "looked at what was strictly necessary",
    "start": "361840",
    "end": "364160"
  },
  {
    "text": "and some of the functionality that's in",
    "start": "364160",
    "end": "365840"
  },
  {
    "text": "ip such as variable length subnet masks",
    "start": "365840",
    "end": "368160"
  },
  {
    "text": "and checksums which adds a great deal of",
    "start": "368160",
    "end": "370319"
  },
  {
    "text": "complexity are not strictly needed in",
    "start": "370319",
    "end": "374319"
  },
  {
    "text": "um",
    "start": "374319",
    "end": "375440"
  },
  {
    "text": "in the mpls network",
    "start": "375440",
    "end": "378400"
  },
  {
    "text": "so calico benefits in the same way by",
    "start": "378400",
    "end": "380319"
  },
  {
    "text": "looking at what is actually strictly",
    "start": "380319",
    "end": "381759"
  },
  {
    "text": "necessary in the data plane and offering",
    "start": "381759",
    "end": "383600"
  },
  {
    "text": "data plane choices",
    "start": "383600",
    "end": "386479"
  },
  {
    "start": "386000",
    "end": "386000"
  },
  {
    "text": "so there are some benefits of control",
    "start": "386479",
    "end": "388000"
  },
  {
    "text": "plane and data plane separation",
    "start": "388000",
    "end": "390000"
  },
  {
    "text": "the first is that you get specialized",
    "start": "390000",
    "end": "391919"
  },
  {
    "text": "minimal data plane code so you're",
    "start": "391919",
    "end": "394160"
  },
  {
    "text": "keeping the data plane code as small as",
    "start": "394160",
    "end": "396319"
  },
  {
    "text": "possible it's lean and that carries many",
    "start": "396319",
    "end": "398880"
  },
  {
    "text": "many benefits for example",
    "start": "398880",
    "end": "401680"
  },
  {
    "text": "if you",
    "start": "401680",
    "end": "402720"
  },
  {
    "text": "have only the minimal set features",
    "start": "402720",
    "end": "405280"
  },
  {
    "text": "then each line of code can be groomed in",
    "start": "405280",
    "end": "407199"
  },
  {
    "text": "more detail from a security and a",
    "start": "407199",
    "end": "408880"
  },
  {
    "text": "performance standpoint to make sure that",
    "start": "408880",
    "end": "411039"
  },
  {
    "text": "it's strictly necessary makes the code",
    "start": "411039",
    "end": "412720"
  },
  {
    "text": "easier to audit and",
    "start": "412720",
    "end": "414479"
  },
  {
    "text": "easier to keep performance high",
    "start": "414479",
    "end": "417440"
  },
  {
    "text": "also by having a targeted data plane",
    "start": "417440",
    "end": "419199"
  },
  {
    "text": "feature set then not every deployment is",
    "start": "419199",
    "end": "421840"
  },
  {
    "text": "the same",
    "start": "421840",
    "end": "423120"
  },
  {
    "text": "you might find that one deployment needs",
    "start": "423120",
    "end": "426000"
  },
  {
    "text": "compatibility with older kernels or",
    "start": "426000",
    "end": "427759"
  },
  {
    "text": "another deployment needs high",
    "start": "427759",
    "end": "429440"
  },
  {
    "text": "cryptographic throughput",
    "start": "429440",
    "end": "431280"
  },
  {
    "text": "and having a targeted data plane feature",
    "start": "431280",
    "end": "433039"
  },
  {
    "text": "set allows you to use a",
    "start": "433039",
    "end": "434800"
  },
  {
    "text": "different data plane to solve",
    "start": "434800",
    "end": "437120"
  },
  {
    "text": "each use case",
    "start": "437120",
    "end": "439840"
  },
  {
    "text": "by reusing the control plane code",
    "start": "441759",
    "end": "443599"
  },
  {
    "text": "control plane code reuse",
    "start": "443599",
    "end": "446240"
  },
  {
    "text": "you avoid rewriting that",
    "start": "446240",
    "end": "448639"
  },
  {
    "text": "necessarily complex software code um and",
    "start": "448639",
    "end": "451360"
  },
  {
    "text": "that code can be",
    "start": "451360",
    "end": "453039"
  },
  {
    "text": "more stable which makes it easier to",
    "start": "453039",
    "end": "455199"
  },
  {
    "text": "harden easier to troubleshoot because it",
    "start": "455199",
    "end": "457680"
  },
  {
    "text": "doesn't change when the data pane",
    "start": "457680",
    "end": "459440"
  },
  {
    "text": "changes",
    "start": "459440",
    "end": "461280"
  },
  {
    "text": "the next advantage is future proofing",
    "start": "461280",
    "end": "463120"
  },
  {
    "text": "we've all seen technologies that are",
    "start": "463120",
    "end": "464479"
  },
  {
    "text": "going to be the next big thing but it",
    "start": "464479",
    "end": "465680"
  },
  {
    "text": "doesn't quite work out my favorite",
    "start": "465680",
    "end": "467039"
  },
  {
    "text": "example is trill which is good for",
    "start": "467039",
    "end": "469520"
  },
  {
    "text": "transparent interconnection of lots of",
    "start": "469520",
    "end": "471199"
  },
  {
    "text": "links and back in about 2014 this was",
    "start": "471199",
    "end": "474080"
  },
  {
    "text": "going to be the next big thing in",
    "start": "474080",
    "end": "475199"
  },
  {
    "text": "networking but it it never came to",
    "start": "475199",
    "end": "477199"
  },
  {
    "text": "fruition",
    "start": "477199",
    "end": "478960"
  },
  {
    "text": "by supporting multiple data plane",
    "start": "478960",
    "end": "480639"
  },
  {
    "text": "technologies calico is able to adapt to",
    "start": "480639",
    "end": "483039"
  },
  {
    "text": "a wide range of environments and use",
    "start": "483039",
    "end": "484639"
  },
  {
    "text": "cases and this will continue in the",
    "start": "484639",
    "end": "486160"
  },
  {
    "text": "future",
    "start": "486160",
    "end": "487840"
  },
  {
    "text": "the next advantage is adaptability",
    "start": "487840",
    "end": "490400"
  },
  {
    "text": "if a new data plane technology appears",
    "start": "490400",
    "end": "492319"
  },
  {
    "text": "on the horizon then the calico community",
    "start": "492319",
    "end": "494240"
  },
  {
    "text": "is able to quickly get a working test",
    "start": "494240",
    "end": "497039"
  },
  {
    "text": "um and to evaluate whether this is",
    "start": "497039",
    "end": "498720"
  },
  {
    "text": "something we want to pursue further and",
    "start": "498720",
    "end": "501199"
  },
  {
    "text": "the final one is agility for the user",
    "start": "501199",
    "end": "503919"
  },
  {
    "text": "uh if",
    "start": "503919",
    "end": "505039"
  },
  {
    "text": "um",
    "start": "505039",
    "end": "506560"
  },
  {
    "text": "you have multiple data plane choices",
    "start": "506560",
    "end": "508720"
  },
  {
    "text": "then you're not locked to a particular",
    "start": "508720",
    "end": "510319"
  },
  {
    "text": "data plane you can make the right choice",
    "start": "510319",
    "end": "512240"
  },
  {
    "text": "today and maybe the right choice in the",
    "start": "512240",
    "end": "514240"
  },
  {
    "text": "future remains the same or maybe it",
    "start": "514240",
    "end": "515760"
  },
  {
    "text": "changes and you can continue to",
    "start": "515760",
    "end": "518560"
  },
  {
    "text": "deploy a data plane that's appropriate",
    "start": "518560",
    "end": "520240"
  },
  {
    "text": "for your needs",
    "start": "520240",
    "end": "522800"
  },
  {
    "text": "so we we're nearly ready to talk about",
    "start": "522800",
    "end": "524399"
  },
  {
    "start": "523000",
    "end": "523000"
  },
  {
    "text": "vpp and what vpp can offer in this",
    "start": "524399",
    "end": "526160"
  },
  {
    "text": "scenario but before we do we should just",
    "start": "526160",
    "end": "528160"
  },
  {
    "text": "talk about the three other um",
    "start": "528160",
    "end": "530640"
  },
  {
    "text": "data pane choices that we have today so",
    "start": "530640",
    "end": "532720"
  },
  {
    "text": "we have the the linux ib tables data",
    "start": "532720",
    "end": "534959"
  },
  {
    "text": "plane which is our original data plane",
    "start": "534959",
    "end": "536560"
  },
  {
    "text": "it's heavily battle tested it offers",
    "start": "536560",
    "end": "538800"
  },
  {
    "text": "good performance great compatibility and",
    "start": "538800",
    "end": "541279"
  },
  {
    "text": "wide support for a huge range of um of",
    "start": "541279",
    "end": "544720"
  },
  {
    "text": "device types",
    "start": "544720",
    "end": "546880"
  },
  {
    "text": "the windows host networking service uh",
    "start": "546880",
    "end": "549040"
  },
  {
    "text": "data plane which offers windows",
    "start": "549040",
    "end": "550560"
  },
  {
    "text": "container deployment um and securing uh",
    "start": "550560",
    "end": "554000"
  },
  {
    "text": "those workloads and it works in any",
    "start": "554000",
    "end": "555760"
  },
  {
    "text": "cloud computing provider or on-prem and",
    "start": "555760",
    "end": "558160"
  },
  {
    "text": "finally we have the linux eppf data",
    "start": "558160",
    "end": "560240"
  },
  {
    "text": "plane which scales to higher throughput",
    "start": "560240",
    "end": "562560"
  },
  {
    "text": "uses less cpu per gigabit reduces first",
    "start": "562560",
    "end": "565760"
  },
  {
    "text": "packet latency to services",
    "start": "565760",
    "end": "567920"
  },
  {
    "text": "it preserves external client source ip",
    "start": "567920",
    "end": "570560"
  },
  {
    "text": "addresses all the way to the pod",
    "start": "570560",
    "end": "572560"
  },
  {
    "text": "and it supports direct server return for",
    "start": "572560",
    "end": "574320"
  },
  {
    "text": "better efficiency if you want to hear",
    "start": "574320",
    "end": "575920"
  },
  {
    "text": "more about any of these data planes",
    "start": "575920",
    "end": "577600"
  },
  {
    "text": "we've had",
    "start": "577600",
    "end": "578880"
  },
  {
    "text": "pre-existing talks that you can search",
    "start": "578880",
    "end": "580480"
  },
  {
    "text": "for",
    "start": "580480",
    "end": "581440"
  },
  {
    "text": "which discuss all of these if you look",
    "start": "581440",
    "end": "582959"
  },
  {
    "text": "for my name chris tompkins and",
    "start": "582959",
    "end": "585600"
  },
  {
    "text": "ebpf you'll see those talks but today",
    "start": "585600",
    "end": "588720"
  },
  {
    "text": "we're not talking about these data",
    "start": "588720",
    "end": "589839"
  },
  {
    "text": "planes we're talking about this fourth",
    "start": "589839",
    "end": "591200"
  },
  {
    "text": "option",
    "start": "591200",
    "end": "592240"
  },
  {
    "text": "uh which we're really excited about",
    "start": "592240",
    "end": "593519"
  },
  {
    "text": "which is vpp and what that can offer uh",
    "start": "593519",
    "end": "595839"
  },
  {
    "text": "with calico so",
    "start": "595839",
    "end": "598080"
  },
  {
    "text": "without further ado i'm going to let uh",
    "start": "598080",
    "end": "599839"
  },
  {
    "text": "alois take over from here and he's going",
    "start": "599839",
    "end": "601760"
  },
  {
    "text": "to talk to you specifically about the",
    "start": "601760",
    "end": "603360"
  },
  {
    "text": "benefits that the vpp data plane offers",
    "start": "603360",
    "end": "608399"
  },
  {
    "start": "609000",
    "end": "609000"
  },
  {
    "text": "hi everyone thank you chris",
    "start": "609120",
    "end": "611360"
  },
  {
    "text": "before we dive into the data plane you",
    "start": "611360",
    "end": "613040"
  },
  {
    "text": "may be wondering what vpp is",
    "start": "613040",
    "end": "615519"
  },
  {
    "text": "and it's been presented quite a few",
    "start": "615519",
    "end": "617440"
  },
  {
    "text": "times already so i won't spend too much",
    "start": "617440",
    "end": "619200"
  },
  {
    "text": "time on it but in short it's a user",
    "start": "619200",
    "end": "621760"
  },
  {
    "text": "space network data plane so it's a",
    "start": "621760",
    "end": "624320"
  },
  {
    "text": "software router and it's highly",
    "start": "624320",
    "end": "626240"
  },
  {
    "text": "optimized both for packet processing and",
    "start": "626240",
    "end": "628320"
  },
  {
    "text": "at the api level as well",
    "start": "628320",
    "end": "630399"
  },
  {
    "text": "it supports all kinds of hardware and",
    "start": "630399",
    "end": "632399"
  },
  {
    "text": "it's easily extensible through plugins",
    "start": "632399",
    "end": "635040"
  },
  {
    "text": "and that's something we used in the in",
    "start": "635040",
    "end": "636720"
  },
  {
    "text": "the calico integration",
    "start": "636720",
    "end": "639200"
  },
  {
    "text": "it leverages vectorization to maximize",
    "start": "639200",
    "end": "641519"
  },
  {
    "text": "the cpu instruction and data cache",
    "start": "641519",
    "end": "643440"
  },
  {
    "text": "efficiency and that's leading to some",
    "start": "643440",
    "end": "645519"
  },
  {
    "text": "pretty impressive performance number as",
    "start": "645519",
    "end": "647680"
  },
  {
    "text": "shown here",
    "start": "647680",
    "end": "649200"
  },
  {
    "text": "so these numbers were obtained on",
    "start": "649200",
    "end": "650800"
  },
  {
    "text": "standard two socket ice lake servers",
    "start": "650800",
    "end": "654160"
  },
  {
    "text": "and doing ipsec we can get one terabit",
    "start": "654160",
    "end": "656240"
  },
  {
    "text": "per second of encryption and when doing",
    "start": "656240",
    "end": "658480"
  },
  {
    "text": "simple forwarding we can reach 1 billion",
    "start": "658480",
    "end": "660560"
  },
  {
    "text": "packets per second",
    "start": "660560",
    "end": "663519"
  },
  {
    "text": "if you'd like to learn more about it",
    "start": "663920",
    "end": "665200"
  },
  {
    "text": "there are plenty of presentations",
    "start": "665200",
    "end": "666560"
  },
  {
    "text": "available out there that you should be",
    "start": "666560",
    "end": "668000"
  },
  {
    "text": "able to find quite easily",
    "start": "668000",
    "end": "671120"
  },
  {
    "start": "671000",
    "end": "671000"
  },
  {
    "text": "now for the calico vpp integration what",
    "start": "671360",
    "end": "673760"
  },
  {
    "text": "we do is that we use vpp as a data plane",
    "start": "673760",
    "end": "676560"
  },
  {
    "text": "for the pod traffic in calico",
    "start": "676560",
    "end": "679200"
  },
  {
    "text": "when you deploy calico vpp on the",
    "start": "679200",
    "end": "680880"
  },
  {
    "text": "kubernetes cluster you'll get one vpp",
    "start": "680880",
    "end": "683279"
  },
  {
    "text": "instance on each node that processes the",
    "start": "683279",
    "end": "685279"
  },
  {
    "text": "container traffic",
    "start": "685279",
    "end": "686640"
  },
  {
    "text": "it will implement the cni meaning it",
    "start": "686640",
    "end": "688560"
  },
  {
    "text": "will create and configure the interfaces",
    "start": "688560",
    "end": "690800"
  },
  {
    "text": "within the pods",
    "start": "690800",
    "end": "692320"
  },
  {
    "text": "it will also route this traffic of",
    "start": "692320",
    "end": "694240"
  },
  {
    "text": "course and implement all the specific",
    "start": "694240",
    "end": "696240"
  },
  {
    "text": "features required by kubernetes",
    "start": "696240",
    "end": "698720"
  },
  {
    "text": "so that includes policies",
    "start": "698720",
    "end": "701600"
  },
  {
    "text": "virtual ap load balancing",
    "start": "701600",
    "end": "703839"
  },
  {
    "text": "potentially source netting the outgoing",
    "start": "703839",
    "end": "705839"
  },
  {
    "text": "traffic and all the other calico",
    "start": "705839",
    "end": "708399"
  },
  {
    "text": "features there's the encapsulation as",
    "start": "708399",
    "end": "710480"
  },
  {
    "text": "well of course",
    "start": "710480",
    "end": "711839"
  },
  {
    "text": "it can do ipip vxlan wire guard",
    "start": "711839",
    "end": "714320"
  },
  {
    "text": "encapsulation",
    "start": "714320",
    "end": "716880"
  },
  {
    "text": "and all this logic is done in dedicated",
    "start": "716880",
    "end": "719279"
  },
  {
    "text": "vpp plugins which are optimized for this",
    "start": "719279",
    "end": "721839"
  },
  {
    "text": "use case",
    "start": "721839",
    "end": "724240"
  },
  {
    "text": "we wanted to make it as easy as possible",
    "start": "724240",
    "end": "726240"
  },
  {
    "text": "for users to deploy",
    "start": "726240",
    "end": "728480"
  },
  {
    "text": "so if you want to deploy calico vpp on a",
    "start": "728480",
    "end": "731519"
  },
  {
    "text": "cluster",
    "start": "731519",
    "end": "732959"
  },
  {
    "text": "in addition to the calico configuration",
    "start": "732959",
    "end": "734720"
  },
  {
    "text": "the only thing you need is to pass an",
    "start": "734720",
    "end": "737360"
  },
  {
    "text": "interface name to vpp um that it will",
    "start": "737360",
    "end": "739839"
  },
  {
    "text": "use as",
    "start": "739839",
    "end": "741040"
  },
  {
    "text": "the onpc interface",
    "start": "741040",
    "end": "742880"
  },
  {
    "text": "and everything else will be taken care",
    "start": "742880",
    "end": "744399"
  },
  {
    "text": "of automatically you should have a",
    "start": "744399",
    "end": "746160"
  },
  {
    "text": "working configuration out of the box",
    "start": "746160",
    "end": "749920"
  },
  {
    "start": "749000",
    "end": "749000"
  },
  {
    "text": "um now you may legitimately wonder why",
    "start": "750000",
    "end": "752959"
  },
  {
    "text": "we're doing all this after all calico is",
    "start": "752959",
    "end": "754800"
  },
  {
    "text": "working perfectly fine and",
    "start": "754800",
    "end": "756880"
  },
  {
    "text": "it's been doing so for quite some time",
    "start": "756880",
    "end": "758800"
  },
  {
    "text": "now",
    "start": "758800",
    "end": "759600"
  },
  {
    "text": "um so here are some example use cases",
    "start": "759600",
    "end": "762079"
  },
  {
    "text": "that vpp will benefit too",
    "start": "762079",
    "end": "764880"
  },
  {
    "text": "the first one will be internal",
    "start": "764880",
    "end": "766639"
  },
  {
    "text": "encryption so as we've seen vpp has an",
    "start": "766639",
    "end": "768800"
  },
  {
    "text": "extremely performant ipsec",
    "start": "768800",
    "end": "770079"
  },
  {
    "text": "implementation so we can use that to",
    "start": "770079",
    "end": "772399"
  },
  {
    "text": "encrypt the traffic between nodes",
    "start": "772399",
    "end": "774079"
  },
  {
    "text": "basically at line rate at 40 gigabits",
    "start": "774079",
    "end": "776560"
  },
  {
    "text": "per second",
    "start": "776560",
    "end": "778240"
  },
  {
    "text": "a second use case would be exposing",
    "start": "778240",
    "end": "780079"
  },
  {
    "text": "highly available services",
    "start": "780079",
    "end": "782959"
  },
  {
    "text": "we are using maglev as the load balancer",
    "start": "782959",
    "end": "785279"
  },
  {
    "text": "implementation for kubernetes services",
    "start": "785279",
    "end": "787680"
  },
  {
    "text": "maglev is a constituent consistent layer",
    "start": "787680",
    "end": "790160"
  },
  {
    "text": "4 load balancer",
    "start": "790160",
    "end": "791680"
  },
  {
    "text": "and basically it allows connections to",
    "start": "791680",
    "end": "793519"
  },
  {
    "text": "survive node failures and it also does",
    "start": "793519",
    "end": "796320"
  },
  {
    "text": "dsr direct server return",
    "start": "796320",
    "end": "798800"
  },
  {
    "text": "which will reduce the global networking",
    "start": "798800",
    "end": "800480"
  },
  {
    "text": "load on the cluster if you enable it",
    "start": "800480",
    "end": "803920"
  },
  {
    "text": "a third area where vpp is very helpful",
    "start": "803920",
    "end": "806320"
  },
  {
    "text": "is if you have custom networking",
    "start": "806320",
    "end": "807680"
  },
  {
    "text": "requirements",
    "start": "807680",
    "end": "809040"
  },
  {
    "text": "this is very broad but some examples",
    "start": "809040",
    "end": "811440"
  },
  {
    "text": "would be if you need custom",
    "start": "811440",
    "end": "812880"
  },
  {
    "text": "encapsulations maybe ipv6 segment",
    "start": "812880",
    "end": "814880"
  },
  {
    "text": "routing or geneve things that are not",
    "start": "814880",
    "end": "816959"
  },
  {
    "text": "supported by the linux kernel",
    "start": "816959",
    "end": "819199"
  },
  {
    "text": "or maybe if you want to integrate with",
    "start": "819199",
    "end": "821519"
  },
  {
    "text": "the network service mesh nsm or some",
    "start": "821519",
    "end": "823920"
  },
  {
    "text": "other specific sfc technology",
    "start": "823920",
    "end": "827440"
  },
  {
    "text": "well then vpp brings a lot to the table",
    "start": "827440",
    "end": "829600"
  },
  {
    "text": "because since it's managed like any",
    "start": "829600",
    "end": "831920"
  },
  {
    "text": "other infrastructure service running on",
    "start": "831920",
    "end": "834000"
  },
  {
    "text": "the cluster you can very easily modify",
    "start": "834000",
    "end": "836000"
  },
  {
    "text": "or upgrade it",
    "start": "836000",
    "end": "838000"
  },
  {
    "text": "and finally we have network intensive",
    "start": "838000",
    "end": "839839"
  },
  {
    "text": "applications and that's gonna be what",
    "start": "839839",
    "end": "841600"
  },
  {
    "text": "we'll focus on today",
    "start": "841600",
    "end": "844320"
  },
  {
    "start": "844000",
    "end": "844000"
  },
  {
    "text": "what i mean by network intensive",
    "start": "844320",
    "end": "845920"
  },
  {
    "text": "applications is applications that spend",
    "start": "845920",
    "end": "848560"
  },
  {
    "text": "most of the time doing network io and",
    "start": "848560",
    "end": "850720"
  },
  {
    "text": "potentially crypto for encrypted",
    "start": "850720",
    "end": "852320"
  },
  {
    "text": "protocols such as tls and quick",
    "start": "852320",
    "end": "854959"
  },
  {
    "text": "there are various applications that fall",
    "start": "854959",
    "end": "856880"
  },
  {
    "text": "into this category",
    "start": "856880",
    "end": "858320"
  },
  {
    "text": "that could be for instance proxies",
    "start": "858320",
    "end": "860160"
  },
  {
    "text": "distributed storage applications content",
    "start": "860160",
    "end": "862240"
  },
  {
    "text": "servers vpn endpoints network functions",
    "start": "862240",
    "end": "864639"
  },
  {
    "text": "and so on",
    "start": "864639",
    "end": "866480"
  },
  {
    "text": "with these applications at some point",
    "start": "866480",
    "end": "868240"
  },
  {
    "text": "the network stacks that you get in the",
    "start": "868240",
    "end": "870399"
  },
  {
    "text": "kubernetes with this interface to the",
    "start": "870399",
    "end": "873120"
  },
  {
    "text": "pod becomes a bottleneck",
    "start": "873120",
    "end": "875120"
  },
  {
    "text": "and the usual solution is to bring a",
    "start": "875120",
    "end": "877839"
  },
  {
    "text": "physical interface directly into the pod",
    "start": "877839",
    "end": "880079"
  },
  {
    "text": "with sr iov",
    "start": "880079",
    "end": "881680"
  },
  {
    "text": "but the drawback if you do that is that",
    "start": "881680",
    "end": "884079"
  },
  {
    "text": "then you will be on your own for all the",
    "start": "884079",
    "end": "885920"
  },
  {
    "text": "addressing routing network policies and",
    "start": "885920",
    "end": "888480"
  },
  {
    "text": "so on",
    "start": "888480",
    "end": "889600"
  },
  {
    "text": "so with kalikovp we are adding some",
    "start": "889600",
    "end": "891839"
  },
  {
    "text": "alternative that can offer very high",
    "start": "891839",
    "end": "894320"
  },
  {
    "text": "performance without going out of the",
    "start": "894320",
    "end": "896240"
  },
  {
    "text": "regular kubernetes network model",
    "start": "896240",
    "end": "899839"
  },
  {
    "start": "899000",
    "end": "899000"
  },
  {
    "text": "so to understand where these",
    "start": "901440",
    "end": "902880"
  },
  {
    "text": "optimization opportunities are coming",
    "start": "902880",
    "end": "904480"
  },
  {
    "text": "from first let's go back to the regular",
    "start": "904480",
    "end": "907040"
  },
  {
    "text": "calico networking analog",
    "start": "907040",
    "end": "909199"
  },
  {
    "text": "so this diagram here is what you would",
    "start": "909199",
    "end": "911920"
  },
  {
    "text": "get with the ip tables or the ebpf data",
    "start": "911920",
    "end": "914800"
  },
  {
    "text": "planes",
    "start": "914800",
    "end": "915760"
  },
  {
    "text": "basically applications are using the",
    "start": "915760",
    "end": "917760"
  },
  {
    "text": "linux kernel syscalls to send and",
    "start": "917760",
    "end": "919760"
  },
  {
    "text": "receive data then this data is processed",
    "start": "919760",
    "end": "922320"
  },
  {
    "text": "and converted into packets by the kernel",
    "start": "922320",
    "end": "924480"
  },
  {
    "text": "transport stack and then it goes out of",
    "start": "924480",
    "end": "927040"
  },
  {
    "text": "the pod through this interface then all",
    "start": "927040",
    "end": "930000"
  },
  {
    "text": "the kubernetes networking features are",
    "start": "930000",
    "end": "932720"
  },
  {
    "text": "implemented in the kernel",
    "start": "932720",
    "end": "935040"
  },
  {
    "text": "with the data plane that's been",
    "start": "935040",
    "end": "936639"
  },
  {
    "text": "configured",
    "start": "936639",
    "end": "938160"
  },
  {
    "text": "and finally the packets go out to the",
    "start": "938160",
    "end": "940480"
  },
  {
    "text": "physical network through the uplink",
    "start": "940480",
    "end": "941920"
  },
  {
    "text": "interface",
    "start": "941920",
    "end": "944399"
  },
  {
    "start": "945000",
    "end": "945000"
  },
  {
    "text": "now with the vbp data plane things are a",
    "start": "945199",
    "end": "947360"
  },
  {
    "text": "little different",
    "start": "947360",
    "end": "948560"
  },
  {
    "text": "the applications running in the pods",
    "start": "948560",
    "end": "950320"
  },
  {
    "text": "still use the regular syscalls to send",
    "start": "950320",
    "end": "952399"
  },
  {
    "text": "and receive data but instead of a vis",
    "start": "952399",
    "end": "954959"
  },
  {
    "text": "this data is sent on a tune interface",
    "start": "954959",
    "end": "957759"
  },
  {
    "text": "when it's exiting the pod",
    "start": "957759",
    "end": "959600"
  },
  {
    "text": "at the other end of this tune there is",
    "start": "959600",
    "end": "961440"
  },
  {
    "text": "vpp which will take care of the",
    "start": "961440",
    "end": "964160"
  },
  {
    "text": "kubernetes networking features",
    "start": "964160",
    "end": "965680"
  },
  {
    "text": "implementation",
    "start": "965680",
    "end": "967040"
  },
  {
    "text": "and eventually it will send the packets",
    "start": "967040",
    "end": "969120"
  },
  {
    "text": "out through the uplink interface",
    "start": "969120",
    "end": "973199"
  },
  {
    "text": "one thing to note is that this forces to",
    "start": "973680",
    "end": "975600"
  },
  {
    "text": "copy of the data a first copy when the",
    "start": "975600",
    "end": "978240"
  },
  {
    "text": "data is sent by the application so this",
    "start": "978240",
    "end": "980399"
  },
  {
    "text": "one you'd also get with regular calico",
    "start": "980399",
    "end": "982399"
  },
  {
    "text": "as it comes from the socket api",
    "start": "982399",
    "end": "984959"
  },
  {
    "text": "and a second copy when the data goes",
    "start": "984959",
    "end": "986880"
  },
  {
    "text": "back to vpp in user space",
    "start": "986880",
    "end": "988959"
  },
  {
    "text": "this extra copy is a source of",
    "start": "988959",
    "end": "990480"
  },
  {
    "text": "inefficiency but vpp is tailored to the",
    "start": "990480",
    "end": "992959"
  },
  {
    "text": "requirements that we have for this use",
    "start": "992959",
    "end": "994480"
  },
  {
    "text": "case and it's faster than the kernel so",
    "start": "994480",
    "end": "996800"
  },
  {
    "text": "it more than makes up for this extra",
    "start": "996800",
    "end": "998399"
  },
  {
    "text": "copy",
    "start": "998399",
    "end": "999279"
  },
  {
    "text": "as we've shown in previous talks linked",
    "start": "999279",
    "end": "1001279"
  },
  {
    "text": "here it is as fast or faster than the",
    "start": "1001279",
    "end": "1003839"
  },
  {
    "text": "other data planes in most situations",
    "start": "1003839",
    "end": "1006639"
  },
  {
    "text": "so this is good as default because the",
    "start": "1006639",
    "end": "1008880"
  },
  {
    "text": "performance is is okay",
    "start": "1008880",
    "end": "1011680"
  },
  {
    "text": "and applications can run unchanged and",
    "start": "1011680",
    "end": "1014079"
  },
  {
    "text": "the vpp data plan is completely",
    "start": "1014079",
    "end": "1015680"
  },
  {
    "text": "transparent for users",
    "start": "1015680",
    "end": "1017920"
  },
  {
    "text": "however if we have very high network",
    "start": "1017920",
    "end": "1021360"
  },
  {
    "text": "requirements and if we are looking for",
    "start": "1021360",
    "end": "1024000"
  },
  {
    "text": "performance optimizations can we do",
    "start": "1024000",
    "end": "1026160"
  },
  {
    "text": "better than this the answer is obviously",
    "start": "1026160",
    "end": "1028319"
  },
  {
    "start": "1028000",
    "end": "1028000"
  },
  {
    "text": "yes",
    "start": "1028319",
    "end": "1029520"
  },
  {
    "text": "and in theory it's simple we should just",
    "start": "1029520",
    "end": "1032000"
  },
  {
    "text": "send the data directly from the app to",
    "start": "1032000",
    "end": "1033760"
  },
  {
    "text": "vpp",
    "start": "1033760",
    "end": "1034798"
  },
  {
    "text": "and bypass the kernel entirely and save",
    "start": "1034799",
    "end": "1037120"
  },
  {
    "text": "at least two data copies in addition to",
    "start": "1037120",
    "end": "1039038"
  },
  {
    "text": "all the processing that the kernel does",
    "start": "1039039",
    "end": "1042160"
  },
  {
    "text": "in practice though it's going to require",
    "start": "1042160",
    "end": "1044400"
  },
  {
    "text": "a bit of effort to do so",
    "start": "1044400",
    "end": "1046558"
  },
  {
    "text": "but we've tried to make it as easy as",
    "start": "1046559",
    "end": "1049039"
  },
  {
    "text": "possible",
    "start": "1049039",
    "end": "1051440"
  },
  {
    "text": "so we have actually two different",
    "start": "1051520",
    "end": "1053440"
  },
  {
    "text": "options targeted at different kind of",
    "start": "1053440",
    "end": "1055360"
  },
  {
    "text": "applications so we'll make a distinction",
    "start": "1055360",
    "end": "1057120"
  },
  {
    "text": "here between two categories of network",
    "start": "1057120",
    "end": "1059120"
  },
  {
    "text": "intensive applications",
    "start": "1059120",
    "end": "1061120"
  },
  {
    "text": "the first one will be packet processing",
    "start": "1061120",
    "end": "1063039"
  },
  {
    "text": "applications which could also be called",
    "start": "1063039",
    "end": "1065520"
  },
  {
    "text": "network functions",
    "start": "1065520",
    "end": "1067600"
  },
  {
    "text": "these applications are primarily",
    "start": "1067600",
    "end": "1070480"
  },
  {
    "text": "primarily caring about",
    "start": "1070480",
    "end": "1073039"
  },
  {
    "text": "layer 2 or layer 3 packets and they",
    "start": "1073039",
    "end": "1075360"
  },
  {
    "text": "process these packets and for these",
    "start": "1075360",
    "end": "1077679"
  },
  {
    "text": "applications we expose mem if interfaces",
    "start": "1077679",
    "end": "1080160"
  },
  {
    "text": "in the pods",
    "start": "1080160",
    "end": "1081760"
  },
  {
    "text": "the second category will be what we call",
    "start": "1081760",
    "end": "1084160"
  },
  {
    "text": "endpoint applications",
    "start": "1084160",
    "end": "1086000"
  },
  {
    "text": "so these are more your traditional",
    "start": "1086000",
    "end": "1087600"
  },
  {
    "text": "applications such as proxies content",
    "start": "1087600",
    "end": "1089440"
  },
  {
    "text": "server storage servers and so on",
    "start": "1089440",
    "end": "1092240"
  },
  {
    "text": "and these applications don't care about",
    "start": "1092240",
    "end": "1093840"
  },
  {
    "text": "packets what they're interested in is",
    "start": "1093840",
    "end": "1095600"
  },
  {
    "text": "tcp connections or maybe even tls are",
    "start": "1095600",
    "end": "1097919"
  },
  {
    "text": "quick if they",
    "start": "1097919",
    "end": "1099440"
  },
  {
    "text": "encrypt their data",
    "start": "1099440",
    "end": "1100960"
  },
  {
    "text": "and for these applications we expose the",
    "start": "1100960",
    "end": "1103120"
  },
  {
    "text": "vpp host stack in the pods",
    "start": "1103120",
    "end": "1106240"
  },
  {
    "text": "before we dive into the specifics of",
    "start": "1106240",
    "end": "1107919"
  },
  {
    "text": "memoif and the host stack one thing i'd",
    "start": "1107919",
    "end": "1109840"
  },
  {
    "text": "like to mention is that if you enable",
    "start": "1109840",
    "end": "1111760"
  },
  {
    "text": "either in a pod",
    "start": "1111760",
    "end": "1113280"
  },
  {
    "text": "then the pod will still have its regular",
    "start": "1113280",
    "end": "1115120"
  },
  {
    "text": "tuned app interface available",
    "start": "1115120",
    "end": "1117200"
  },
  {
    "text": "this is useful because it allows to have",
    "start": "1117200",
    "end": "1118960"
  },
  {
    "text": "some containers or applications in the",
    "start": "1118960",
    "end": "1120559"
  },
  {
    "text": "pod that can still communicate with the",
    "start": "1120559",
    "end": "1122480"
  },
  {
    "text": "outside normally without requiring any",
    "start": "1122480",
    "end": "1124559"
  },
  {
    "text": "changes",
    "start": "1124559",
    "end": "1125520"
  },
  {
    "text": "so this is useful for instance for the",
    "start": "1125520",
    "end": "1127760"
  },
  {
    "text": "supporting processes for log collection",
    "start": "1127760",
    "end": "1129600"
  },
  {
    "text": "maybe configuration things like that",
    "start": "1129600",
    "end": "1133360"
  },
  {
    "start": "1133000",
    "end": "1133000"
  },
  {
    "text": "so let's dive first into the if",
    "start": "1133360",
    "end": "1135360"
  },
  {
    "text": "interfaces",
    "start": "1135360",
    "end": "1136880"
  },
  {
    "text": "what are mifs they are very simple",
    "start": "1136880",
    "end": "1140160"
  },
  {
    "text": "highly optimized software interfaces",
    "start": "1140160",
    "end": "1144160"
  },
  {
    "text": "they relied on a shared memory segment",
    "start": "1144160",
    "end": "1146240"
  },
  {
    "text": "they allow to exchange packets between",
    "start": "1146240",
    "end": "1148880"
  },
  {
    "text": "two processes just a very",
    "start": "1148880",
    "end": "1151120"
  },
  {
    "text": "simple process just sending or receiving",
    "start": "1151120",
    "end": "1153760"
  },
  {
    "text": "packets on the mmif interface can",
    "start": "1153760",
    "end": "1155600"
  },
  {
    "text": "transfer more than 15 million packets",
    "start": "1155600",
    "end": "1158000"
  },
  {
    "text": "per second on a single queue with a",
    "start": "1158000",
    "end": "1159760"
  },
  {
    "text": "single core",
    "start": "1159760",
    "end": "1162320"
  },
  {
    "text": "and that's around one order of magnitude",
    "start": "1162559",
    "end": "1165200"
  },
  {
    "text": "more than what you can normally get in a",
    "start": "1165200",
    "end": "1166799"
  },
  {
    "text": "kubernetes pod",
    "start": "1166799",
    "end": "1168799"
  },
  {
    "text": "calico vpp can make one maf interface",
    "start": "1168799",
    "end": "1171679"
  },
  {
    "text": "available in the pod and then",
    "start": "1171679",
    "end": "1174000"
  },
  {
    "text": "the application running the pod has a",
    "start": "1174000",
    "end": "1175760"
  },
  {
    "text": "few options to use this interface",
    "start": "1175760",
    "end": "1179280"
  },
  {
    "text": "if the application is based on dpdk it",
    "start": "1179280",
    "end": "1181280"
  },
  {
    "text": "can directly use the maf as dpdk has a",
    "start": "1181280",
    "end": "1184240"
  },
  {
    "text": "mmif driver this will only require",
    "start": "1184240",
    "end": "1186559"
  },
  {
    "text": "configuration changes to work",
    "start": "1186559",
    "end": "1188640"
  },
  {
    "text": "if it's a c application you can use",
    "start": "1188640",
    "end": "1191200"
  },
  {
    "text": "leave mem af to",
    "start": "1191200",
    "end": "1192880"
  },
  {
    "text": "um",
    "start": "1192880",
    "end": "1193919"
  },
  {
    "text": "to leverage the memoif interface",
    "start": "1193919",
    "end": "1196799"
  },
  {
    "text": "and for golong applications there are",
    "start": "1196799",
    "end": "1198960"
  },
  {
    "text": "two options as well the first one will",
    "start": "1198960",
    "end": "1201440"
  },
  {
    "text": "be",
    "start": "1201440",
    "end": "1202400"
  },
  {
    "text": "go lib mayf which is the seagull to rob",
    "start": "1202400",
    "end": "1204640"
  },
  {
    "text": "the c library but i would recommend you",
    "start": "1204640",
    "end": "1206799"
  },
  {
    "text": "to use the second one which is called go",
    "start": "1206799",
    "end": "1208720"
  },
  {
    "text": "maf which is a pure go implementation",
    "start": "1208720",
    "end": "1211919"
  },
  {
    "text": "but there's a third option as well",
    "start": "1211919",
    "end": "1214000"
  },
  {
    "text": "which does not require writing any code",
    "start": "1214000",
    "end": "1216080"
  },
  {
    "text": "and that's to run vpp in the pod",
    "start": "1216080",
    "end": "1218480"
  },
  {
    "text": "vpp of course support memif and it can",
    "start": "1218480",
    "end": "1220799"
  },
  {
    "text": "be configured to easily implement",
    "start": "1220799",
    "end": "1222640"
  },
  {
    "text": "various network functions",
    "start": "1222640",
    "end": "1224880"
  },
  {
    "text": "um",
    "start": "1224880",
    "end": "1226000"
  },
  {
    "text": "and the nice thing is that it won't need",
    "start": "1226000",
    "end": "1228159"
  },
  {
    "text": "elevated privileges to connect to mmif",
    "start": "1228159",
    "end": "1230240"
  },
  {
    "text": "interface",
    "start": "1230240",
    "end": "1231360"
  },
  {
    "text": "you can just running as an unprivileged",
    "start": "1231360",
    "end": "1233200"
  },
  {
    "text": "pod",
    "start": "1233200",
    "end": "1235440"
  },
  {
    "start": "1235000",
    "end": "1235000"
  },
  {
    "text": "here is an example of a trivial",
    "start": "1236080",
    "end": "1237520"
  },
  {
    "text": "application using gom-if that you could",
    "start": "1237520",
    "end": "1239280"
  },
  {
    "text": "run in a pod",
    "start": "1239280",
    "end": "1240720"
  },
  {
    "text": "as you can see the api to send and",
    "start": "1240720",
    "end": "1242400"
  },
  {
    "text": "receive packets on an interface is quite",
    "start": "1242400",
    "end": "1244240"
  },
  {
    "text": "simple there's a read packet and right",
    "start": "1244240",
    "end": "1246159"
  },
  {
    "text": "packet method and you get the packets in",
    "start": "1246159",
    "end": "1248880"
  },
  {
    "text": "byte slices this is a trigger example",
    "start": "1248880",
    "end": "1251280"
  },
  {
    "text": "that just swaps the source and",
    "start": "1251280",
    "end": "1252720"
  },
  {
    "text": "destination ip addresses in practice",
    "start": "1252720",
    "end": "1254720"
  },
  {
    "text": "you'll likely want to do more elaborate",
    "start": "1254720",
    "end": "1256159"
  },
  {
    "text": "things on each packet but you get the",
    "start": "1256159",
    "end": "1257600"
  },
  {
    "text": "idea",
    "start": "1257600",
    "end": "1259919"
  },
  {
    "start": "1259000",
    "end": "1259000"
  },
  {
    "text": "and finally if you want to enable memoif",
    "start": "1260400",
    "end": "1263600"
  },
  {
    "text": "interface in a pod then that's very",
    "start": "1263600",
    "end": "1265360"
  },
  {
    "text": "simple you simply need to add an",
    "start": "1265360",
    "end": "1266720"
  },
  {
    "text": "annotation like this in the pod",
    "start": "1266720",
    "end": "1268559"
  },
  {
    "text": "definition",
    "start": "1268559",
    "end": "1270320"
  },
  {
    "text": "one thing to note is that since there is",
    "start": "1270320",
    "end": "1272480"
  },
  {
    "text": "also a tune interface that can send",
    "start": "1272480",
    "end": "1274720"
  },
  {
    "text": "traffic to the pod vpp when it receives",
    "start": "1274720",
    "end": "1277280"
  },
  {
    "text": "a packet",
    "start": "1277280",
    "end": "1278640"
  },
  {
    "text": "it needs to know where to send the",
    "start": "1278640",
    "end": "1280080"
  },
  {
    "text": "incoming packet either to the tuner to",
    "start": "1280080",
    "end": "1281679"
  },
  {
    "text": "the mmf",
    "start": "1281679",
    "end": "1282960"
  },
  {
    "text": "and this is done based on destination",
    "start": "1282960",
    "end": "1284880"
  },
  {
    "text": "ports you can specify in the annotations",
    "start": "1284880",
    "end": "1288559"
  },
  {
    "text": "which interface will be the default",
    "start": "1288559",
    "end": "1290159"
  },
  {
    "text": "interface either the tune type or the",
    "start": "1290159",
    "end": "1291919"
  },
  {
    "text": "mif and then for the other one you can",
    "start": "1291919",
    "end": "1294320"
  },
  {
    "text": "specify a few ports or ranges of parts",
    "start": "1294320",
    "end": "1297600"
  },
  {
    "text": "which should go to that interface",
    "start": "1297600",
    "end": "1301600"
  },
  {
    "text": "that's it for the mif but no if you",
    "start": "1301679",
    "end": "1303919"
  },
  {
    "text": "don't really care about packets if your",
    "start": "1303919",
    "end": "1306799"
  },
  {
    "text": "feud rather handle connections you know",
    "start": "1306799",
    "end": "1308400"
  },
  {
    "text": "like a normal application developer",
    "start": "1308400",
    "end": "1311360"
  },
  {
    "text": "well then there's the host stack",
    "start": "1311360",
    "end": "1313840"
  },
  {
    "text": "and the host stack is the vpp transport",
    "start": "1313840",
    "end": "1316400"
  },
  {
    "text": "protocol stack so like the kernel vpp",
    "start": "1316400",
    "end": "1319120"
  },
  {
    "text": "implements",
    "start": "1319120",
    "end": "1320960"
  },
  {
    "text": "the",
    "start": "1320960",
    "end": "1322000"
  },
  {
    "text": "layer 4 protocols that you're familiar",
    "start": "1322000",
    "end": "1323600"
  },
  {
    "text": "with tcp and udp",
    "start": "1323600",
    "end": "1325679"
  },
  {
    "text": "it also implements higher level",
    "start": "1325679",
    "end": "1327200"
  },
  {
    "text": "protocols that you can use directly",
    "start": "1327200",
    "end": "1330080"
  },
  {
    "text": "such as tls and quick and dtls as well",
    "start": "1330080",
    "end": "1334720"
  },
  {
    "start": "1335000",
    "end": "1335000"
  },
  {
    "text": "the host stack has an api for each of",
    "start": "1336159",
    "end": "1338480"
  },
  {
    "text": "these protocols which is based on a",
    "start": "1338480",
    "end": "1340480"
  },
  {
    "text": "shared memory segment just like memoif",
    "start": "1340480",
    "end": "1342880"
  },
  {
    "text": "and we can make that api available in",
    "start": "1342880",
    "end": "1345280"
  },
  {
    "text": "the pod",
    "start": "1345280",
    "end": "1346799"
  },
  {
    "text": "in order to use it the application",
    "start": "1346799",
    "end": "1348559"
  },
  {
    "text": "running in the pod should use the vpp",
    "start": "1348559",
    "end": "1350720"
  },
  {
    "text": "communications library or vcl in short",
    "start": "1350720",
    "end": "1354159"
  },
  {
    "text": "the vcl is a c library that provides a",
    "start": "1354159",
    "end": "1356799"
  },
  {
    "text": "relatively high level api for the host",
    "start": "1356799",
    "end": "1359120"
  },
  {
    "text": "stack and it's pretty close to the",
    "start": "1359120",
    "end": "1361120"
  },
  {
    "text": "traditional bsd socket api",
    "start": "1361120",
    "end": "1363520"
  },
  {
    "text": "which makes it quite easy to use",
    "start": "1363520",
    "end": "1366640"
  },
  {
    "text": "here is a summary of the vcl api it",
    "start": "1366640",
    "end": "1369120"
  },
  {
    "text": "should look fairly familiar you have the",
    "start": "1369120",
    "end": "1371440"
  },
  {
    "text": "expected listen accept and connect calls",
    "start": "1371440",
    "end": "1373760"
  },
  {
    "text": "that you're probably used to",
    "start": "1373760",
    "end": "1375440"
  },
  {
    "text": "and you have a select and apple",
    "start": "1375440",
    "end": "1377360"
  },
  {
    "text": "implementation as well",
    "start": "1377360",
    "end": "1380320"
  },
  {
    "start": "1380000",
    "end": "1380000"
  },
  {
    "text": "of course it requires a bit of effort to",
    "start": "1381919",
    "end": "1385039"
  },
  {
    "text": "integrate an application with host tag",
    "start": "1385039",
    "end": "1386559"
  },
  {
    "text": "because you need to to swap the",
    "start": "1386559",
    "end": "1388000"
  },
  {
    "text": "networking for the whole stack",
    "start": "1388000",
    "end": "1389200"
  },
  {
    "text": "networking",
    "start": "1389200",
    "end": "1390320"
  },
  {
    "text": "but there are some apps which are",
    "start": "1390320",
    "end": "1392159"
  },
  {
    "text": "already integrated with a host stack so",
    "start": "1392159",
    "end": "1394320"
  },
  {
    "text": "that will make it easier to get the",
    "start": "1394320",
    "end": "1395679"
  },
  {
    "text": "benefits of the whole stack",
    "start": "1395679",
    "end": "1398159"
  },
  {
    "text": "we have an ipaf3 integration for",
    "start": "1398159",
    "end": "1400480"
  },
  {
    "text": "throughput testing we have nginx as well",
    "start": "1400480",
    "end": "1402640"
  },
  {
    "text": "where the host tag can really accelerate",
    "start": "1402640",
    "end": "1404720"
  },
  {
    "text": "content serving",
    "start": "1404720",
    "end": "1406400"
  },
  {
    "text": "but the most interesting here is",
    "start": "1406400",
    "end": "1408000"
  },
  {
    "text": "probably android",
    "start": "1408000",
    "end": "1409840"
  },
  {
    "text": "android is a very famous node layer 7",
    "start": "1409840",
    "end": "1412559"
  },
  {
    "text": "proxy which is used in the steel service",
    "start": "1412559",
    "end": "1415440"
  },
  {
    "text": "mesh",
    "start": "1415440",
    "end": "1417200"
  },
  {
    "text": "and since it's a proxy it's just",
    "start": "1417200",
    "end": "1419360"
  },
  {
    "text": "forwarding http requests so it's a great",
    "start": "1419360",
    "end": "1421840"
  },
  {
    "text": "candidate for optimization with the",
    "start": "1421840",
    "end": "1423279"
  },
  {
    "text": "whole stack",
    "start": "1423279",
    "end": "1425039"
  },
  {
    "text": "we don't have yet a fully tested",
    "start": "1425039",
    "end": "1426799"
  },
  {
    "text": "integration with calico vp and envoy and",
    "start": "1426799",
    "end": "1429520"
  },
  {
    "text": "the host tag but we are hoping to be",
    "start": "1429520",
    "end": "1431600"
  },
  {
    "text": "able to provide that soon",
    "start": "1431600",
    "end": "1434799"
  },
  {
    "start": "1434000",
    "end": "1434000"
  },
  {
    "text": "now here are a few numbers to show you",
    "start": "1437679",
    "end": "1439520"
  },
  {
    "text": "what the whole stack is capable of these",
    "start": "1439520",
    "end": "1441679"
  },
  {
    "text": "are pretty good numbers but one thing to",
    "start": "1441679",
    "end": "1443520"
  },
  {
    "text": "keep in mind is that they are taken from",
    "start": "1443520",
    "end": "1445760"
  },
  {
    "text": "host tag benchmarks outside of calico",
    "start": "1445760",
    "end": "1448000"
  },
  {
    "text": "vpp",
    "start": "1448000",
    "end": "1449840"
  },
  {
    "text": "unfortunately i don't have benchmarks",
    "start": "1449840",
    "end": "1451760"
  },
  {
    "text": "within calikovp available at this time",
    "start": "1451760",
    "end": "1455919"
  },
  {
    "text": "however there should be some in another",
    "start": "1455919",
    "end": "1458720"
  },
  {
    "text": "calico vpp presentation that nathan is",
    "start": "1458720",
    "end": "1461279"
  },
  {
    "text": "doing with chris",
    "start": "1461279",
    "end": "1462799"
  },
  {
    "text": "at the open networking and edge summit",
    "start": "1462799",
    "end": "1464880"
  },
  {
    "text": "which is a collocated event",
    "start": "1464880",
    "end": "1467279"
  },
  {
    "text": "so if you're curious i encourage you to",
    "start": "1467279",
    "end": "1469120"
  },
  {
    "text": "go listen to that talk as well",
    "start": "1469120",
    "end": "1471600"
  },
  {
    "text": "and you will have a lot more performance",
    "start": "1471600",
    "end": "1473440"
  },
  {
    "text": "data points there",
    "start": "1473440",
    "end": "1476320"
  },
  {
    "start": "1476000",
    "end": "1476000"
  },
  {
    "text": "now as you can see in the example here",
    "start": "1476799",
    "end": "1478559"
  },
  {
    "text": "the hosta can be simply enabled for a",
    "start": "1478559",
    "end": "1480559"
  },
  {
    "text": "pod with an annotation just like the mif",
    "start": "1480559",
    "end": "1483840"
  },
  {
    "text": "and like the memi ef there's no need to",
    "start": "1483840",
    "end": "1485520"
  },
  {
    "text": "specify which traffic should go to the",
    "start": "1485520",
    "end": "1487360"
  },
  {
    "text": "host stack as this will be done",
    "start": "1487360",
    "end": "1488720"
  },
  {
    "text": "automatically if there's a host",
    "start": "1488720",
    "end": "1490559"
  },
  {
    "text": "connection or listener that matches an",
    "start": "1490559",
    "end": "1492480"
  },
  {
    "text": "incoming packet then that packet will be",
    "start": "1492480",
    "end": "1494159"
  },
  {
    "text": "sent to the whole stack",
    "start": "1494159",
    "end": "1495600"
  },
  {
    "text": "and otherwise it will be sent to the",
    "start": "1495600",
    "end": "1497120"
  },
  {
    "text": "tone",
    "start": "1497120",
    "end": "1498320"
  },
  {
    "text": "so it should be really straightforward",
    "start": "1498320",
    "end": "1499840"
  },
  {
    "text": "to use",
    "start": "1499840",
    "end": "1502000"
  },
  {
    "start": "1502000",
    "end": "1502000"
  },
  {
    "text": "that's it for the host stack there are a",
    "start": "1502000",
    "end": "1503840"
  },
  {
    "text": "few other things to know that apply to",
    "start": "1503840",
    "end": "1505360"
  },
  {
    "text": "both math and the host stack",
    "start": "1505360",
    "end": "1507360"
  },
  {
    "text": "the first thing is that for all the",
    "start": "1507360",
    "end": "1508799"
  },
  {
    "text": "traffic that goes through either mma for",
    "start": "1508799",
    "end": "1510960"
  },
  {
    "text": "the whole stack then the regular",
    "start": "1510960",
    "end": "1512640"
  },
  {
    "text": "kubernetes networking features will",
    "start": "1512640",
    "end": "1514240"
  },
  {
    "text": "apply",
    "start": "1514240",
    "end": "1515039"
  },
  {
    "text": "this means policies will work as you",
    "start": "1515039",
    "end": "1516720"
  },
  {
    "text": "expect this load balancing will work as",
    "start": "1516720",
    "end": "1518640"
  },
  {
    "text": "well if you connect to a service ip etc",
    "start": "1518640",
    "end": "1522240"
  },
  {
    "text": "secondly if you want to for some reason",
    "start": "1522240",
    "end": "1524159"
  },
  {
    "text": "it's also possible to use both memoif",
    "start": "1524159",
    "end": "1526159"
  },
  {
    "text": "and the whole stack in the board",
    "start": "1526159",
    "end": "1528000"
  },
  {
    "text": "and finally my wife and the whole stack",
    "start": "1528000",
    "end": "1530159"
  },
  {
    "text": "are exposed within the pods using",
    "start": "1530159",
    "end": "1532320"
  },
  {
    "text": "abstract unique sockets",
    "start": "1532320",
    "end": "1534400"
  },
  {
    "text": "with the names shown here",
    "start": "1534400",
    "end": "1537600"
  },
  {
    "text": "so",
    "start": "1537600",
    "end": "1538559"
  },
  {
    "start": "1538000",
    "end": "1538000"
  },
  {
    "text": "to summarize here is a table that",
    "start": "1538559",
    "end": "1540320"
  },
  {
    "text": "compares the different ways to process",
    "start": "1540320",
    "end": "1542559"
  },
  {
    "text": "traffic in a pod in a calico cluster",
    "start": "1542559",
    "end": "1545039"
  },
  {
    "text": "it's split into two sections for the",
    "start": "1545039",
    "end": "1547760"
  },
  {
    "text": "endpoint connection oriented",
    "start": "1547760",
    "end": "1549279"
  },
  {
    "text": "applications and for the packet",
    "start": "1549279",
    "end": "1550799"
  },
  {
    "text": "processing applications",
    "start": "1550799",
    "end": "1552960"
  },
  {
    "text": "for endpoint applications we don't have",
    "start": "1552960",
    "end": "1555200"
  },
  {
    "text": "definitive numbers yet for calico vpp",
    "start": "1555200",
    "end": "1557360"
  },
  {
    "text": "this is still a work in progress",
    "start": "1557360",
    "end": "1559919"
  },
  {
    "text": "but we expect the whole stack to provide",
    "start": "1559919",
    "end": "1562159"
  },
  {
    "text": "a substantial performance boost",
    "start": "1562159",
    "end": "1565039"
  },
  {
    "text": "it's usually a",
    "start": "1565039",
    "end": "1566960"
  },
  {
    "text": "few tens of percent so 30 40 performance",
    "start": "1566960",
    "end": "1570000"
  },
  {
    "text": "boost",
    "start": "1570000",
    "end": "1571520"
  },
  {
    "text": "and when crypto is in the picture the",
    "start": "1571520",
    "end": "1574159"
  },
  {
    "text": "performance boost is likely even higher",
    "start": "1574159",
    "end": "1577840"
  },
  {
    "text": "for packet processing applications the",
    "start": "1577840",
    "end": "1580240"
  },
  {
    "text": "order of magnitude of performance that",
    "start": "1580240",
    "end": "1582320"
  },
  {
    "text": "we expect in calico vp is around 10",
    "start": "1582320",
    "end": "1584720"
  },
  {
    "text": "million packets per second per queue",
    "start": "1584720",
    "end": "1587520"
  },
  {
    "text": "that's according to the very early",
    "start": "1587520",
    "end": "1589039"
  },
  {
    "text": "testing that we did but again this is",
    "start": "1589039",
    "end": "1591039"
  },
  {
    "text": "still a work in progress it will require",
    "start": "1591039",
    "end": "1592720"
  },
  {
    "text": "more testing to get real numbers and",
    "start": "1592720",
    "end": "1594960"
  },
  {
    "text": "scanning characteristics",
    "start": "1594960",
    "end": "1597760"
  },
  {
    "text": "and without calico vpp if you",
    "start": "1597760",
    "end": "1600799"
  },
  {
    "text": "would like to get the same features",
    "start": "1600799",
    "end": "1602480"
  },
  {
    "text": "today",
    "start": "1602480",
    "end": "1604320"
  },
  {
    "text": "well then the application could use an",
    "start": "1604320",
    "end": "1605840"
  },
  {
    "text": "af packet or af xdp socket under this",
    "start": "1605840",
    "end": "1608400"
  },
  {
    "text": "interface in the pod",
    "start": "1608400",
    "end": "1611360"
  },
  {
    "text": "so this has several drawbacks however",
    "start": "1611360",
    "end": "1613440"
  },
  {
    "text": "first the pot will require some",
    "start": "1613440",
    "end": "1614960"
  },
  {
    "text": "additional capabilities to run",
    "start": "1614960",
    "end": "1617600"
  },
  {
    "text": "but also the performance",
    "start": "1617600",
    "end": "1620159"
  },
  {
    "text": "as far as we've seen is way lower than",
    "start": "1620159",
    "end": "1621919"
  },
  {
    "text": "with vpp it's around 1 million packets",
    "start": "1621919",
    "end": "1623840"
  },
  {
    "text": "per second",
    "start": "1623840",
    "end": "1627080"
  },
  {
    "start": "1627000",
    "end": "1627000"
  },
  {
    "text": "that's it for the mif and host stack",
    "start": "1627120",
    "end": "1629120"
  },
  {
    "text": "presentation",
    "start": "1629120",
    "end": "1630720"
  },
  {
    "text": "what we've shown here has some very",
    "start": "1630720",
    "end": "1632720"
  },
  {
    "text": "interesting potential for some",
    "start": "1632720",
    "end": "1633919"
  },
  {
    "text": "applications",
    "start": "1633919",
    "end": "1635120"
  },
  {
    "text": "but the broader point i'd like to make",
    "start": "1635120",
    "end": "1636880"
  },
  {
    "text": "before i hand it back to chris is that",
    "start": "1636880",
    "end": "1639039"
  },
  {
    "text": "the calico vpp data plane makes it very",
    "start": "1639039",
    "end": "1641120"
  },
  {
    "text": "easy to extend and experiment with the",
    "start": "1641120",
    "end": "1643120"
  },
  {
    "text": "kubernetes network",
    "start": "1643120",
    "end": "1644960"
  },
  {
    "text": "this presentation was focused on high",
    "start": "1644960",
    "end": "1646559"
  },
  {
    "text": "performance networking apps",
    "start": "1646559",
    "end": "1648880"
  },
  {
    "text": "we've shown that it's possible to run",
    "start": "1648880",
    "end": "1650880"
  },
  {
    "text": "them in a regular kubernetes cluster",
    "start": "1650880",
    "end": "1653440"
  },
  {
    "text": "but it's not just about performance vvp",
    "start": "1653440",
    "end": "1656399"
  },
  {
    "text": "really unlocks a lot of possibilities in",
    "start": "1656399",
    "end": "1658880"
  },
  {
    "text": "terms of what it's possible to do in",
    "start": "1658880",
    "end": "1660640"
  },
  {
    "text": "kubernetes with a lot of velocity as",
    "start": "1660640",
    "end": "1663200"
  },
  {
    "text": "well",
    "start": "1663200",
    "end": "1664720"
  },
  {
    "text": "and we are really excited for all the",
    "start": "1664720",
    "end": "1666480"
  },
  {
    "text": "things we'll be able to do with it",
    "start": "1666480",
    "end": "1669039"
  },
  {
    "text": "and it's not just us because this is all",
    "start": "1669039",
    "end": "1671679"
  },
  {
    "text": "open source anyone can contribute",
    "start": "1671679",
    "end": "1673760"
  },
  {
    "text": "anything and",
    "start": "1673760",
    "end": "1675440"
  },
  {
    "text": "if you have any sort of idea we'll be",
    "start": "1675440",
    "end": "1677039"
  },
  {
    "text": "very happy to talk with you about them",
    "start": "1677039",
    "end": "1680480"
  },
  {
    "text": "really feel free to reach out to us",
    "start": "1680480",
    "end": "1682159"
  },
  {
    "text": "either on github or on slack",
    "start": "1682159",
    "end": "1685279"
  },
  {
    "text": "thanks a louise it's fantastic tech so",
    "start": "1685279",
    "end": "1687760"
  },
  {
    "text": "in summary this is a new vpp based user",
    "start": "1687760",
    "end": "1690159"
  },
  {
    "text": "space data plane for calico",
    "start": "1690159",
    "end": "1692480"
  },
  {
    "text": "it brings networking features that were",
    "start": "1692480",
    "end": "1694159"
  },
  {
    "text": "previously only used by service",
    "start": "1694159",
    "end": "1695600"
  },
  {
    "text": "providers to kubernetes and allows the",
    "start": "1695600",
    "end": "1697840"
  },
  {
    "text": "managing of high availability and high",
    "start": "1697840",
    "end": "1699679"
  },
  {
    "text": "performance networking apps in",
    "start": "1699679",
    "end": "1701440"
  },
  {
    "text": "kubernetes",
    "start": "1701440",
    "end": "1703840"
  },
  {
    "text": "so that's nearly it for this",
    "start": "1703840",
    "end": "1704880"
  },
  {
    "text": "presentation we have a number of new",
    "start": "1704880",
    "end": "1706720"
  },
  {
    "text": "exciting features on the horizon",
    "start": "1706720",
    "end": "1708320"
  },
  {
    "text": "including maglev load balancing packet",
    "start": "1708320",
    "end": "1710480"
  },
  {
    "text": "oriented interfaces and hopefully soon",
    "start": "1710480",
    "end": "1713039"
  },
  {
    "text": "general availability in calico",
    "start": "1713039",
    "end": "1715279"
  },
  {
    "text": "currently the project is expected to",
    "start": "1715279",
    "end": "1717120"
  },
  {
    "text": "move from tech preview to beta status in",
    "start": "1717120",
    "end": "1720440"
  },
  {
    "text": "v321 or v322 of calico so if you'd like",
    "start": "1720440",
    "end": "1724799"
  },
  {
    "text": "to stay up to date on the project uh",
    "start": "1724799",
    "end": "1726480"
  },
  {
    "text": "don't hesitate to join the vpp channel",
    "start": "1726480",
    "end": "1728480"
  },
  {
    "text": "in the calico users slack we publish our",
    "start": "1728480",
    "end": "1730720"
  },
  {
    "text": "releases there and the calico uses slack",
    "start": "1730720",
    "end": "1732720"
  },
  {
    "text": "is a really active community for calico",
    "start": "1732720",
    "end": "1734720"
  },
  {
    "text": "generally",
    "start": "1734720",
    "end": "1735760"
  },
  {
    "text": "if you'd like to try it out head over to",
    "start": "1735760",
    "end": "1737679"
  },
  {
    "text": "the calico documentation which has set",
    "start": "1737679",
    "end": "1739440"
  },
  {
    "text": "up instructions for vbp and all the",
    "start": "1739440",
    "end": "1742000"
  },
  {
    "text": "other data planes and if you have any",
    "start": "1742000",
    "end": "1743919"
  },
  {
    "text": "questions at any point don't hesitate to",
    "start": "1743919",
    "end": "1745600"
  },
  {
    "text": "ping us on the slack channel as well or",
    "start": "1745600",
    "end": "1747840"
  },
  {
    "text": "you can ask them straight away thanks",
    "start": "1747840",
    "end": "1749840"
  },
  {
    "text": "very much for listening and taking the",
    "start": "1749840",
    "end": "1751120"
  },
  {
    "text": "time",
    "start": "1751120",
    "end": "1753840"
  }
]