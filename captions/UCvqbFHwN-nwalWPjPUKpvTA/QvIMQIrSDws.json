[
  {
    "text": "all right folks we're going to get started um we're going to be talking about testing and release patterns on Cross plane and um this is something",
    "start": "480",
    "end": "7480"
  },
  {
    "text": "that we've been working out a lot with our clients and other crossplane users so we hope we find it really useful uh",
    "start": "7480",
    "end": "13320"
  },
  {
    "text": "quick introduction um I'm Steven Burley I am a principal Solutions architect for upbound I've been with upbound for about",
    "start": "13320",
    "end": "19760"
  },
  {
    "text": "three years now hey guys thanks all for joining I'm",
    "start": "19760",
    "end": "24920"
  },
  {
    "text": "Yuri I'm also Solutions architect we on the same team with Steven and we are helping a bond customers use cross plane",
    "start": "24920",
    "end": "30560"
  },
  {
    "text": "adoption thanks a lot for joining us today yes all right now crossplane is a very",
    "start": "30560",
    "end": "38320"
  },
  {
    "text": "big project and has a lot of moving parts and we're talking about testing today so we can't really go over an",
    "start": "38320",
    "end": "43399"
  },
  {
    "text": "overview of cross plan so I'll just try to do in a couple of slides what crossplane is um and some of the Core",
    "start": "43399",
    "end": "49199"
  },
  {
    "text": "Concepts that we're going to cover today so the first thing is that crossplane has this idea if you remember",
    "start": "49199",
    "end": "55480"
  },
  {
    "text": "kubernetes has crds you know these are custom resource definitions and cetes is",
    "start": "55480",
    "end": "60519"
  },
  {
    "text": "implemented with controllers that continually reconcile things um so the idea of crossplane is what if we could",
    "start": "60519",
    "end": "66880"
  },
  {
    "text": "take this model to manage anything right manage anything in the cloud cloud resources and so crossplane is an",
    "start": "66880",
    "end": "73920"
  },
  {
    "text": "extension of kubernetes and um basically it allows you to manage anything AWS",
    "start": "73920",
    "end": "80079"
  },
  {
    "text": "Google uh GitHub um so we're finding it um an extremely powerful tool for a lot",
    "start": "80079",
    "end": "85960"
  },
  {
    "text": "of teams that are building these internal platforms right that need to manage for hundreds of teams thousands of",
    "start": "85960",
    "end": "91920"
  },
  {
    "text": "resources um we like to think about cross plane as a universal control plane and this is the idea that you have one",
    "start": "91920",
    "end": "98399"
  },
  {
    "text": "tool that can manage everything um and the parts of that the universal control plane are first the interfaces we depend",
    "start": "98399",
    "end": "104479"
  },
  {
    "text": "on the kubernetes API so anything that could talk to the kubernetes API or manage the kubernetes API tools like",
    "start": "104479",
    "end": "110759"
  },
  {
    "text": "caverno or Opa um work seamlessly with crossplane um the next thing is API",
    "start": "110759",
    "end": "117320"
  },
  {
    "text": "abstractions if you're familiar with kubernetes you know we AB things like Ingress controllers pods um what",
    "start": "117320",
    "end": "123200"
  },
  {
    "text": "crossplane does is it abstracts out um other resources for example like an S3",
    "start": "123200",
    "end": "128360"
  },
  {
    "text": "bucket is a kubernetes resource a native resource and then there's also this concept of platform apis so you as a",
    "start": "128360",
    "end": "135200"
  },
  {
    "text": "platform engineer can Define like a cluster my company cluster and apply it to the kubernetes infrastructure and",
    "start": "135200",
    "end": "141280"
  },
  {
    "text": "then your developer could come in and ask for it they're just going to do Coupe CTL apply cluster and they'll get",
    "start": "141280",
    "end": "147640"
  },
  {
    "text": "a cluster that crossplay will provision for you so the way this model works is that crossplane and we'll talk about the",
    "start": "147640",
    "end": "153160"
  },
  {
    "text": "next is that crossplane interacts it has a series of providers that interacts with the backend Cloud providers so your",
    "start": "153160",
    "end": "159040"
  },
  {
    "text": "API is a kubernetes API um and in the back end we have a series of controllers that can manage almost any Cloud",
    "start": "159040",
    "end": "166680"
  },
  {
    "text": "object so what we're going to talk about today is just a few Concepts because this is what's going to be evolved in our testing um crossplane is a very",
    "start": "166680",
    "end": "173879"
  },
  {
    "text": "modular framework like everything else in kubernetes there's a lot of separation of controls so it's a very well architected framework um so the",
    "start": "173879",
    "end": "180680"
  },
  {
    "text": "first one is how do we we have the core crossplane engine and then we have a series of extensions that allow crossplane to have extreme flexibility",
    "start": "180680",
    "end": "187159"
  },
  {
    "text": "the first one is providers so what a provider does is that allows you to manage an external API object so we have",
    "start": "187159",
    "end": "193840"
  },
  {
    "text": "providers there's dozens of providers but we'll talk about things like AWS Azure when you install a provider it",
    "start": "193840",
    "end": "199840"
  },
  {
    "text": "comes with all the crd types uh bucket eks RDS instance right it will come with",
    "start": "199840",
    "end": "205040"
  },
  {
    "text": "those so when you install a provider you'll get dozens or hundreds of Cs one for every kubernetes object and then",
    "start": "205040",
    "end": "211080"
  },
  {
    "text": "you'll get a controller right the controller will come so when the user does Coupe CTL apply the controller will",
    "start": "211080",
    "end": "216760"
  },
  {
    "text": "see that talk to the a AWS API server um and provision it so that's the first",
    "start": "216760",
    "end": "222159"
  },
  {
    "text": "concept the second concept is compositions right so you you provision in a cluster and uh when you provision",
    "start": "222159",
    "end": "229560"
  },
  {
    "text": "that it's complex right like you could think there's dozens of resources there's IM roles there's network settings there's security policies um",
    "start": "229560",
    "end": "237400"
  },
  {
    "text": "and for your users you don't want to expose all that uh it's an implementation detail so that's what composition does uh composition is",
    "start": "237400",
    "end": "244040"
  },
  {
    "text": "basically a recipe where you say um I take this input and I'm going to provision all these resources for you",
    "start": "244040",
    "end": "250680"
  },
  {
    "text": "right um and then finally how do we do that how do we create all these resources so crossplane is actually",
    "start": "250680",
    "end": "255959"
  },
  {
    "text": "really cool about this um you could do it in any programm langage you want we use something called functions um and U",
    "start": "255959",
    "end": "262440"
  },
  {
    "text": "we have a series of functions I showed one here KCl Q python go templating so you could write these templates in any",
    "start": "262440",
    "end": "268720"
  },
  {
    "text": "language and it's like get Hub actions right so what happens is when you define a composition you have a step and it",
    "start": "268720",
    "end": "274120"
  },
  {
    "text": "could be go template and the go template creates all the Amo manifests right eks cluster bucket everything and then",
    "start": "274120",
    "end": "280160"
  },
  {
    "text": "passes it on to the next step so you could have things mutating the state as you go and at the end the cross plane",
    "start": "280160",
    "end": "286000"
  },
  {
    "text": "applies that and all the providers go and provision it um so we're going to talk about KCl a little bit today and go",
    "start": "286000",
    "end": "291199"
  },
  {
    "text": "templating right because Co KCl is actually very exciting for us um we're using it quite a bit and it makes it an",
    "start": "291199",
    "end": "296919"
  },
  {
    "text": "incredibly powerful framework for provisioning infrastructure so let's get to the things we want to",
    "start": "296919",
    "end": "302560"
  },
  {
    "text": "test right because that there's a lot more Concepts in crossplane but these are just the ones we're going to talk about today the first one is we want to",
    "start": "302560",
    "end": "309440"
  },
  {
    "text": "make sure when we create objects like an S3 bucket that it's actually good against the schema right like we don't",
    "start": "309440",
    "end": "314479"
  },
  {
    "text": "like if we want to make sure that if the field is object encryption is a Boolean we don't want to put like a three into",
    "start": "314479",
    "end": "319560"
  },
  {
    "text": "it right we want that to error out the second thing in our composition we want to make sure that when we create",
    "start": "319560",
    "end": "325120"
  },
  {
    "text": "infrastructure it's the infrastructure that we want that it's secure that we're not opening up ports to the internet right so we need to test that the",
    "start": "325120",
    "end": "331600"
  },
  {
    "text": "outputs and then finally in our functions we have to make sure that our functions are correct syntax and correct",
    "start": "331600",
    "end": "337199"
  },
  {
    "text": "logic right so these are the things that we're going to talk about testing today all right and just I put this",
    "start": "337199",
    "end": "343280"
  },
  {
    "text": "slide in here this is um we're going to focus a little bit more on early stage testing here and then Yuri will get to",
    "start": "343280",
    "end": "348560"
  },
  {
    "text": "end to end testing but really our goal is to try to catch errors as soon as possible because there's orders of",
    "start": "348560",
    "end": "353880"
  },
  {
    "text": "magnitude you know this is a study that IBM did in 2010 um it's literally you",
    "start": "353880",
    "end": "359039"
  },
  {
    "text": "know two orders of of magnitude to fix things in production especially with Cloud infrastructure like we deal with",
    "start": "359039",
    "end": "364240"
  },
  {
    "text": "um you have the risk of you know deleting things or making them misconfigured or having a lot of cleanup at the end so um we really want to catch",
    "start": "364240",
    "end": "371680"
  },
  {
    "text": "errors as soon as possible all right so what we're going to talk about today is before so",
    "start": "371680",
    "end": "377280"
  },
  {
    "text": "crossplane runs in the cluster it's continually provisioning hundreds thousands of resources but what we're going to talk about here is before we",
    "start": "377280",
    "end": "383880"
  },
  {
    "text": "ever get to that you're a platform engineer you're developing all this infrastructure and you want to test it locally right you want to say in my",
    "start": "383880",
    "end": "390120"
  },
  {
    "text": "command line before I'm spending thousands of dollars on a cloud for resources I want to try working on it",
    "start": "390120",
    "end": "395800"
  },
  {
    "text": "locally so crossplane has a command where we could render functions so this",
    "start": "395800",
    "end": "400960"
  },
  {
    "text": "is a little bit how crossplane Works um again this is there's a lot of stuff in crossplane but basically what happens is",
    "start": "400960",
    "end": "407639"
  },
  {
    "text": "when a user puts in a request it runs through that function pipeline of the steps right and each step like just",
    "start": "407639",
    "end": "413120"
  },
  {
    "text": "generates or mutates the yaml structure and then it comes out into a composite resource right so this would be like eks",
    "start": "413120",
    "end": "420080"
  },
  {
    "text": "cluster and you'd have eks node group that you would have a cluster off that generates a coup config you have you",
    "start": "420080",
    "end": "425879"
  },
  {
    "text": "know node pools or whatever else that's what's going to come out and then those will get provisioned um so what we could do in crossplane is we have a CLI where",
    "start": "425879",
    "end": "432520"
  },
  {
    "text": "you could just render this and it can just generate all the resources coming out um and I'll do a demo of this a",
    "start": "432520",
    "end": "439160"
  },
  {
    "text": "really quick demo of this afterwards um so um functions in general",
    "start": "439160",
    "end": "446240"
  },
  {
    "text": "uh cross plane 117 is coming out next week um it has a bunch of new features but we're actually just so you know that",
    "start": "446240",
    "end": "451879"
  },
  {
    "text": "so you don't break your scripts um all the function infrastructure is graduating from beta to a V1 right just",
    "start": "451879",
    "end": "457479"
  },
  {
    "text": "to let you know so any examples here we see crossplane beta render if you get crossplane next week in the CLI um you",
    "start": "457479",
    "end": "464039"
  },
  {
    "text": "won't need the beta monitor anymore in the just um and again um what we're going to put to the command line is when",
    "start": "464039",
    "end": "470199"
  },
  {
    "text": "we say render the XR is what the user asks for right so you can imagine uh a developer team wants an RDS instance",
    "start": "470199",
    "end": "476400"
  },
  {
    "text": "right so they're going to have a yaml that says create an RDS instance for me the composition is your logic and then",
    "start": "476400",
    "end": "481520"
  },
  {
    "text": "functions is just all the docker images of the functions you're going to run the way functions run is they're almost like",
    "start": "481520",
    "end": "486639"
  },
  {
    "text": "lambdas on a cluster um they take the input they mutate it and send it back um it's actually a very cool way of running",
    "start": "486639",
    "end": "492800"
  },
  {
    "text": "but each function is basically a crossplane pod um that takes a grpc standardized input and sends out grpc",
    "start": "492800",
    "end": "500080"
  },
  {
    "text": "standardized output which is really good because allows us to have a great function ecosystem because it's very easy to write a new language Bond",
    "start": "500080",
    "end": "506560"
  },
  {
    "text": "binding for a crossplane function all right one other thing when you create clusters",
    "start": "506560",
    "end": "512479"
  },
  {
    "text": "the real world is very complex um this is a lot of data we have the most important things is like in a real",
    "start": "512479",
    "end": "517680"
  },
  {
    "text": "cluster you have hundreds of objects and they all have state um so what we want to do is be able to mock those things",
    "start": "517680",
    "end": "523360"
  },
  {
    "text": "right we want to say like what's the IP address of this VPC um what's the password for the RDS instance and things",
    "start": "523360",
    "end": "529360"
  },
  {
    "text": "like that um there's other ways we could to um when you're doing crossplane you can actually with extra resources you",
    "start": "529360",
    "end": "534880"
  },
  {
    "text": "could look up any other object on the cluster um and then you could use things like environment configs have shared",
    "start": "534880",
    "end": "539959"
  },
  {
    "text": "configs across the cluster you know VPC IDs or RNs right so there's lots of extra data that comes in so we could",
    "start": "539959",
    "end": "547200"
  },
  {
    "text": "just with crossplane render we could actually send these things in so I'll demo this in a second um and that's",
    "start": "547200",
    "end": "552600"
  },
  {
    "text": "basically it so this is part of how we could start rendering to make our local development environment when we're",
    "start": "552600",
    "end": "558399"
  },
  {
    "text": "rendering it look as much as possible as like a real Cloud environment so we can check our",
    "start": "558399",
    "end": "564399"
  },
  {
    "text": "logic all right so this is what it's going to look like in our scripts and then there's one other thing is now that",
    "start": "564399",
    "end": "571120"
  },
  {
    "text": "we're rendering and we have our um rendering that looks very close to the real world we want to validate it um and",
    "start": "571120",
    "end": "578720"
  },
  {
    "text": "we have some tooling for that and then basically again it's a command line that you could pump pipe any AML to it um but",
    "start": "578720",
    "end": "585200"
  },
  {
    "text": "it's a validate Command right so what you do is you provide it a directory of schemas of any kind and if you know",
    "start": "585200",
    "end": "590839"
  },
  {
    "text": "crossplane schemas crds they have open API definitions and they also have C definitions right um so validate will",
    "start": "590839",
    "end": "597399"
  },
  {
    "text": "actually validate your output against that so we us in our CI pipelines we render and then we validate so even",
    "start": "597399",
    "end": "602680"
  },
  {
    "text": "before um anybody tries to provision these our CI systems are checking these to make sure that the Manifest that",
    "start": "602680",
    "end": "608320"
  },
  {
    "text": "we're generating the cloud resources are all valid all right um I have demos we have",
    "start": "608320",
    "end": "614640"
  },
  {
    "text": "code and demos for this so you can go follow it along um I'm just going to go just do a really quick demo here and",
    "start": "614640",
    "end": "619720"
  },
  {
    "text": "then we'll get um",
    "start": "619720",
    "end": "623360"
  },
  {
    "text": "so um just to show you what a composition looks like like this is what a crossplane composition looks like um",
    "start": "625480",
    "end": "633079"
  },
  {
    "text": "and you can see here this is using something called go templating so we're just going to range through an input",
    "start": "633079",
    "end": "638200"
  },
  {
    "text": "parameter the user creates and this is just going to create um three kubernetes namespaces here with a kubernetes object",
    "start": "638200",
    "end": "644600"
  },
  {
    "text": "that's all it does so if we render",
    "start": "644600",
    "end": "649319"
  },
  {
    "text": "this you can see here we've created the three kubernetes objects um and you can",
    "start": "651000",
    "end": "656240"
  },
  {
    "text": "see here the status is all empty right there's no status this is a basic r Ing we don't know we're just but this is",
    "start": "656240",
    "end": "661440"
  },
  {
    "text": "immediately you could tell what this resource is going to",
    "start": "661440",
    "end": "665600"
  },
  {
    "text": "create I'm going to show one more example um let's go",
    "start": "666720",
    "end": "672440"
  },
  {
    "text": "to this actually includes um composition environment external environment so when",
    "start": "673279",
    "end": "678440"
  },
  {
    "text": "we render this um you could see here it's going to come back with um all the resources that it pulled in for the",
    "start": "678440",
    "end": "684600"
  },
  {
    "text": "extra data right like it could pull in resources from across the crossplane cluster and look at them dynamically and",
    "start": "684600",
    "end": "690320"
  },
  {
    "text": "the other thing too is if you look at the status um now it has all the uids of the name spaces right so you can imagine",
    "start": "690320",
    "end": "696519"
  },
  {
    "text": "this if you're mocking a real cluster data you can bring in the real you could bring in the real uh values that like",
    "start": "696519",
    "end": "702320"
  },
  {
    "text": "AWS is bringing back and then finally I'll go to",
    "start": "702320",
    "end": "708200"
  },
  {
    "text": "validate um and what validate does is it's basically going to go and um I basically",
    "start": "708200",
    "end": "716399"
  },
  {
    "text": "in my schema directory I just have a configuration package for crossplane and a crossplane",
    "start": "716399",
    "end": "722279"
  },
  {
    "text": "configuration package contains all the dependencies providers and crds and everything um validate will automatically download that and then",
    "start": "722279",
    "end": "728760"
  },
  {
    "text": "take the output from our composition and um validate it against the crd so any errors here will actually um report so",
    "start": "728760",
    "end": "738760"
  },
  {
    "text": "um that's basically um you know using local",
    "start": "738760",
    "end": "744519"
  },
  {
    "text": "rendering so now we're going to talk about some other test cases so I'll hand it off to Yuri",
    "start": "744519",
    "end": "751160"
  },
  {
    "text": "thank you so much Stephen great job uh so let's talk about more testing",
    "start": "752360",
    "end": "757560"
  },
  {
    "text": "patterns so one thing we are trying to experiment with is U unit testing with",
    "start": "757560",
    "end": "764120"
  },
  {
    "text": "KCl but first before we proceed with that part uh a little bit of intro uh",
    "start": "764120",
    "end": "769839"
  },
  {
    "text": "about KCl and how it got into uh crossplay the main into our uh uh our",
    "start": "769839",
    "end": "777519"
  },
  {
    "text": "crossb W in general so we got an amazing contribution very impressive contribution of function KCl that is",
    "start": "777519",
    "end": "783360"
  },
  {
    "text": "coming from China so huge uh shout out to uh K maintainers and uh basically it",
    "start": "783360",
    "end": "790880"
  },
  {
    "text": "enabled us to implement the crossplaying composition with the power of KCl and KCl provided a very nice balance for us",
    "start": "790880",
    "end": "797399"
  },
  {
    "text": "between a static kind of patch and transform original one representation and the uh ability to inject a powerful",
    "start": "797399",
    "end": "804399"
  },
  {
    "text": "logic where we need so it impressed us immediately so we have a nice blog post",
    "start": "804399",
    "end": "810320"
  },
  {
    "text": "around KCl one is on a blogr play IO it's uh written by P by Creator function",
    "start": "810320",
    "end": "817480"
  },
  {
    "text": "KP recording thank you so much and second one is our experience from abound",
    "start": "817480",
    "end": "823800"
  },
  {
    "text": "in these block post I'm showcasing uh KCl um integration in one of our",
    "start": "823800",
    "end": "829240"
  },
  {
    "text": "reference configuration ofs but this talk is not about KCl building so let's focus on more like",
    "start": "829240",
    "end": "835519"
  },
  {
    "text": "testing stuff one thing that we uh so we already",
    "start": "835519",
    "end": "840639"
  },
  {
    "text": "started to implement some uh KCl based composition in our subset of customers",
    "start": "840639",
    "end": "848560"
  },
  {
    "text": "and they already start to get a uh some experience and K KCl exper",
    "start": "848560",
    "end": "855000"
  },
  {
    "text": "experimentation on their side and what we found out like it's pretty straightforward thing but there is a KL",
    "start": "855000",
    "end": "860839"
  },
  {
    "text": "playground right where you can run the some CASL code and figure out how the yaml stream is going to be uh produced",
    "start": "860839",
    "end": "868440"
  },
  {
    "text": "out of qu logic and and share it so it's kind of happened organically that one of",
    "start": "868440",
    "end": "874000"
  },
  {
    "text": "our customers uh was implementing some composition with a KCl hit some back",
    "start": "874000",
    "end": "880560"
  },
  {
    "text": "shared the KCl playground with me I found an issue and shared it back and what's super productive so it's even",
    "start": "880560",
    "end": "887320"
  },
  {
    "text": "before you implement any crossplaying code and that's you know it's pretty straightforward that I think like it wor",
    "start": "887320",
    "end": "892680"
  },
  {
    "text": "sharing that you can have this possibility to get like a fastest feedback possible Right even before",
    "start": "892680",
    "end": "898519"
  },
  {
    "text": "committing code and now to the specific unit testing this KCl so we tried to",
    "start": "898519",
    "end": "904920"
  },
  {
    "text": "obviously think like how we can use a KCl for uh fast feed back Loop automating a uh unit testing style",
    "start": "904920",
    "end": "912360"
  },
  {
    "text": "creating some form of framework uh first attempt and most straightforward thing to try out was kind of create a unit",
    "start": "912360",
    "end": "919839"
  },
  {
    "text": "test against the k files k files but we quickly figured out that in this case we",
    "start": "919839",
    "end": "925040"
  },
  {
    "text": "are losing all the mocking and capabilities that Steven just showed to",
    "start": "925040",
    "end": "930800"
  },
  {
    "text": "us right all the markeing external resources and observe resources and all that stuff and reimplementing that in KL",
    "start": "930800",
    "end": "937839"
  },
  {
    "text": "seems suboptimal so that's why we decided to actually unit test the render state so we we are going to use a",
    "start": "937839",
    "end": "944319"
  },
  {
    "text": "standard crossplane render mechanism uh uh produce the yaml stream and write some KCl based test out of it and",
    "start": "944319",
    "end": "951920"
  },
  {
    "text": "basically with that you can achieve pretty uh pretty nice lightweight test",
    "start": "951920",
    "end": "956959"
  },
  {
    "text": "driven development like workflow and I have a PO request all open source where",
    "start": "956959",
    "end": "962199"
  },
  {
    "text": "we have like a small uh demonstration of it and uh I can show it right away like",
    "start": "962199",
    "end": "969199"
  },
  {
    "text": "how it looks like in a real a real configuration of ours so here we have a",
    "start": "969199",
    "end": "975160"
  },
  {
    "text": "configuration lightweight configuration Azure Network under test right so it's",
    "start": "975160",
    "end": "980480"
  },
  {
    "text": "pretty um straightforward composition it actually uses uh the original Pion",
    "start": "980480",
    "end": "987079"
  },
  {
    "text": "transfer mechanism because we don't have any kind of advanced logic there uh so we can test uh with CASL unit testing we",
    "start": "987079",
    "end": "995480"
  },
  {
    "text": "can actually test standard composition pipeline so it can be any kind of code not only KCl but patch and transform go",
    "start": "995480",
    "end": "1002000"
  },
  {
    "text": "and plating and anything any additional functions like a helper function sequencer so and we're going to uh test",
    "start": "1002000",
    "end": "1010199"
  },
  {
    "text": "this uh X Network so it's actually our custom API uh and the task is to basically test",
    "start": "1010199",
    "end": "1017279"
  },
  {
    "text": "it locally uh uh with our unit test Su what we're going to do is we will use a",
    "start": "1017279",
    "end": "1023120"
  },
  {
    "text": "standard uh rendering mechanism right and we are going to run some KL based test fit so first thing first is just a",
    "start": "1023120",
    "end": "1029839"
  },
  {
    "text": "render a very similar stuff what Steven just showed to us but VI use this specific composition as an example and",
    "start": "1029839",
    "end": "1037600"
  },
  {
    "text": "uh then we are going to run a render test so it will put the uh render yamos",
    "start": "1037600",
    "end": "1045199"
  },
  {
    "text": "into the cach and we'll execute the some test CASL based test so what is what",
    "start": "1045199",
    "end": "1051440"
  },
  {
    "text": "these test actually are we have this minimalistic test suite and we have like",
    "start": "1051440",
    "end": "1056679"
  },
  {
    "text": "a single helper function there that is basically retrieving the object from a yaml um multi-document uh um yaml stream",
    "start": "1056679",
    "end": "1065960"
  },
  {
    "text": "uh a specific object and it is using composition resource name as an ID and for",
    "start": "1065960",
    "end": "1072120"
  },
  {
    "text": "composition if you familiar with cross plane you know that it is unique per composition and basically it's a good",
    "start": "1072120",
    "end": "1078880"
  },
  {
    "text": "good entry point to retrieve um unique objects so we retrieving them and basically building simple assertions",
    "start": "1078880",
    "end": "1085520"
  },
  {
    "text": "so uh pretty lightweight very straightforward and with that you can build a tdd test driven development like",
    "start": "1085520",
    "end": "1092240"
  },
  {
    "text": "workflow for infrastructure with cross plane so let's actually execute that in uh in this small live demo and what I'm",
    "start": "1092240",
    "end": "1099120"
  },
  {
    "text": "going to do is uh is write a test first so like if you're familiar with tdd",
    "start": "1099120",
    "end": "1104200"
  },
  {
    "text": "you're first writing the test right test fails then you're writing implementation code so actually in our case it's a",
    "start": "1104200",
    "end": "1110520"
  },
  {
    "text": "composition code and then we this implementation uh useful code is making the test green so it's standard uh red",
    "start": "1110520",
    "end": "1118720"
  },
  {
    "text": "green refractor or like a fail pass refractor tdd flow uh and let's try to",
    "start": "1118720",
    "end": "1126320"
  },
  {
    "text": "execute that so I'm going to write a new test right for storage I want to uh add",
    "start": "1126320",
    "end": "1133400"
  },
  {
    "text": "the new uh service send point and basically I'm working around this code",
    "start": "1133400",
    "end": "1142080"
  },
  {
    "text": "uh I open just in a par paint so it's a",
    "start": "1142080",
    "end": "1147880"
  },
  {
    "text": "subnet and here we go currently we have only service SQL and we are writing new",
    "start": "1147880",
    "end": "1153440"
  },
  {
    "text": "tests that we want also a Microsoft storage endpoint you're running the test",
    "start": "1153440",
    "end": "1159840"
  },
  {
    "text": "it should fail right so we have a failed test test first amazing now we can write an",
    "start": "1159840",
    "end": "1167559"
  },
  {
    "text": "implementation code which is now case will be super trivial we just uh adding",
    "start": "1167559",
    "end": "1172760"
  },
  {
    "text": "the end point for a subnet of a new type Microsoft storage and we're running the",
    "start": "1172760",
    "end": "1179799"
  },
  {
    "text": "test again and our test s is green so we achieved this standard tdd like flow uh",
    "start": "1179799",
    "end": "1186880"
  },
  {
    "text": "which is pretty fast with back loop everything automated and you can achieve this naturally growing regression test with uh following the similar approach",
    "start": "1186880",
    "end": "1194919"
  },
  {
    "text": "though this is pretty good local uh automated feedback uh now we can get to",
    "start": "1194919",
    "end": "1202000"
  },
  {
    "text": "more expensive layer of Anin testing so uh overall role of an testing in our",
    "start": "1202000",
    "end": "1208440"
  },
  {
    "text": "cross plane story right so local feedback is great validation rendering unit testing it it's a super valuable",
    "start": "1208440",
    "end": "1215799"
  },
  {
    "text": "but at the end of the day before the release and packaging you need to check that this stuff produces the real",
    "start": "1215799",
    "end": "1221600"
  },
  {
    "text": "resources and a cloud provider site right so effectively you need to uh apply exer composition custom resource",
    "start": "1221600",
    "end": "1228679"
  },
  {
    "text": "definitions ideally package them because eventually you deal with a configuration package uh of cross plane then you apply",
    "start": "1228679",
    "end": "1235840"
  },
  {
    "text": "the claim or composite resource under test and then you need to evaluate the behavior like is it sink is it ready is",
    "start": "1235840",
    "end": "1241320"
  },
  {
    "text": "it eventually uh delets itself cleanly so all that things uh very end to end it",
    "start": "1241320",
    "end": "1247840"
  },
  {
    "text": "is required that we validate them at the end of the pipeline let's say and yeah we want to automate all this manal step",
    "start": "1247840",
    "end": "1254520"
  },
  {
    "text": "we again want to uh organically grow regression test Suite but already on an",
    "start": "1254520",
    "end": "1259960"
  },
  {
    "text": "endtoend test level and while while achieving so we will have a good enough",
    "start": "1259960",
    "end": "1265159"
  },
  {
    "text": "confidence before the crossplay configuration release so that's uh what",
    "start": "1265159",
    "end": "1270880"
  },
  {
    "text": "motivated us to create a up test it's uh I'm trying to reason about it as a low",
    "start": "1270880",
    "end": "1276120"
  },
  {
    "text": "code and to testing framework meaning like you're not writing actual test code you're just collecting the set of",
    "start": "1276120",
    "end": "1281799"
  },
  {
    "text": "examples uh under test and we originally used it uh for to support development of",
    "start": "1281799",
    "end": "1289240"
  },
  {
    "text": "crossplane providers uh eventually we reused it for crossplane configurations development as well uh it enabled us",
    "start": "1289240",
    "end": "1297919"
  },
  {
    "text": "covering thousand of mrss in official providers during our test meanwhile like",
    "start": "1297919",
    "end": "1303200"
  },
  {
    "text": "you know uh enough development velocity so we were not writing much test code we",
    "start": "1303200",
    "end": "1308400"
  },
  {
    "text": "were keeping the examples right and up test was testing it for us uh last but not least it's contributed to cncf so",
    "start": "1308400",
    "end": "1316279"
  },
  {
    "text": "it's vendor neutral you and you you are free to use it so it's open source and",
    "start": "1316279",
    "end": "1322000"
  },
  {
    "text": "also part of U cncf organization so effectively how it works",
    "start": "1322000",
    "end": "1327159"
  },
  {
    "text": "why it's actually low code right it's because it uses well-known cutle uh",
    "start": "1327159",
    "end": "1332360"
  },
  {
    "text": "framework underneath but it generates a test suite for you so it takes the example manifest as an input and the",
    "start": "1332360",
    "end": "1338919"
  },
  {
    "text": "testing code is actually generated somewhere in background you never touch it and you you're just collecting some",
    "start": "1338919",
    "end": "1344640"
  },
  {
    "text": "examples in a in your repository right in in case our in case of our",
    "start": "1344640",
    "end": "1349880"
  },
  {
    "text": "configuration Azure Network we just using like one test example because it's enough for uh to test that specific uh",
    "start": "1349880",
    "end": "1357520"
  },
  {
    "text": "abstractions obstruction end to end so testing steps are pretty straightforward",
    "start": "1357520",
    "end": "1362720"
  },
  {
    "text": "it's like crowlike flow right it supplies the Manifest uh it checks that everything is good everything uh every",
    "start": "1362720",
    "end": "1368760"
  },
  {
    "text": "compos resource is ready all good then it updates uh the Manifest also checks",
    "start": "1368760",
    "end": "1373840"
  },
  {
    "text": "that everything's fine then it mimics the import like you know kind of import",
    "start": "1373840",
    "end": "1379159"
  },
  {
    "text": "of all the resources on a totally clean control plane that all the external names are fine so everything is healthy",
    "start": "1379159",
    "end": "1385520"
  },
  {
    "text": "and then uh it makes a clean deltion right so that's also very important part because whenever you want to delete the",
    "start": "1385520",
    "end": "1391360"
  },
  {
    "text": "claim or composite resource with crossplay it's very important that all the resources are gone and we achieve",
    "start": "1391360",
    "end": "1398360"
  },
  {
    "text": "the clean deltion and nothing is blocked uh if you want to deviate a little bit from uh standard cowlik flow there are",
    "start": "1398360",
    "end": "1405919"
  },
  {
    "text": "set of hooks and helper functions so it's also available uh sometimes it's it's useful to create",
    "start": "1405919",
    "end": "1413120"
  },
  {
    "text": "some workarounds in your up test based test with uh additional think we have a",
    "start": "1413120",
    "end": "1418840"
  },
  {
    "text": "reusable GitHub workflow uh that you can uh put into your GitHub actions if you",
    "start": "1418840",
    "end": "1424520"
  },
  {
    "text": "not using GitHub actions it's pretty straightforward you can reuse it in any kind of CI but basically uh it enables",
    "start": "1424520",
    "end": "1431400"
  },
  {
    "text": "us to run up test based pipelines in a centralized manner so that's our standard flow we never merge stuff",
    "start": "1431400",
    "end": "1438159"
  },
  {
    "text": "before before we get a centralized feedback from a uh updat based Pipeline and have we have a special comment right",
    "start": "1438159",
    "end": "1444559"
  },
  {
    "text": "so it's test examples so on optional one and the litor we can specify which example to test and uh up test provide",
    "start": "1444559",
    "end": "1451520"
  },
  {
    "text": "the feedback and then we merge so let's get to the demo so an1",
    "start": "1451520",
    "end": "1457720"
  },
  {
    "text": "demo uh of the stuff I just described so first thing first uh we have this end to",
    "start": "1457720",
    "end": "1465559"
  },
  {
    "text": "end uh Target r right so it uh uh has the up test invocation uh line and also",
    "start": "1465559",
    "end": "1474399"
  },
  {
    "text": "all the additional uh steps like uh building packaging and installing the",
    "start": "1474399",
    "end": "1480240"
  },
  {
    "text": "local control plane and I also expore export a",
    "start": "1480240",
    "end": "1486080"
  },
  {
    "text": "single uh single environment variable to uh uh to populate with SH credentials C",
    "start": "1486080",
    "end": "1493640"
  },
  {
    "text": "out credentials now I can just execute make enter end and it will do the magic",
    "start": "1493640",
    "end": "1501440"
  },
  {
    "text": "so first it packages the configuration under test so basically you can end to test even before commit so it will pick",
    "start": "1501440",
    "end": "1508320"
  },
  {
    "text": "up the local uh state of repository package into X page uh so it's cross",
    "start": "1508320",
    "end": "1514440"
  },
  {
    "text": "plan say compatible package right uh creat the local C cluster uh installs",
    "start": "1514440",
    "end": "1520080"
  },
  {
    "text": "the cross plan there so currently it's install the uh crossplane and eventually",
    "start": "1520080",
    "end": "1525679"
  },
  {
    "text": "all the dependencies and now it does with a death side car uh trick it's very",
    "start": "1525679",
    "end": "1532399"
  },
  {
    "text": "interesting uh workaround so uh we basically packaging this x package and",
    "start": "1532399",
    "end": "1538720"
  },
  {
    "text": "in a standard kind of production like flow you need to push this package to sa registry and then pull it back here we",
    "start": "1538720",
    "end": "1546200"
  },
  {
    "text": "avoiding it we basically created side car and we injecting into crossplaying cache the X package and basically we",
    "start": "1546200",
    "end": "1553159"
  },
  {
    "text": "creating a nice uh local setup without external dependencies now",
    "start": "1553159",
    "end": "1559159"
  },
  {
    "text": "uh configuration is getting installed and uh our test flow is waiting for the Readiness so in parallel in parallel uh",
    "start": "1559159",
    "end": "1567600"
  },
  {
    "text": "terminal we can walk around and uh look around and",
    "start": "1567600",
    "end": "1573360"
  },
  {
    "text": "see what is happening so configuration is already installed that's great what about providers that are coming as",
    "start": "1573360",
    "end": "1579360"
  },
  {
    "text": "dependency from configuration so they getting they getting pulled in into the testing cluster right and here we have a",
    "start": "1579360",
    "end": "1586279"
  },
  {
    "text": "simple dependency on azur network and family Azure as a config provider so",
    "start": "1586279",
    "end": "1591559"
  },
  {
    "text": "this is up test run currently it waits for provider packages to be healthy exactly those uh guys and uh yeah uh in",
    "start": "1591559",
    "end": "1601559"
  },
  {
    "text": "a in a bit it should be fully ready and it will proceed with the",
    "start": "1601559",
    "end": "1607039"
  },
  {
    "text": "flow uh I think we can just make like something like",
    "start": "1607039",
    "end": "1613799"
  },
  {
    "text": "watch yeah it's already true true and so after provided Readiness it already",
    "start": "1613799",
    "end": "1620039"
  },
  {
    "text": "starts to apply the claim under test and a claim under test is this x Network X",
    "start": "1620039",
    "end": "1628080"
  },
  {
    "text": "network uh package here so just a quick reminder",
    "start": "1628080",
    "end": "1634360"
  },
  {
    "text": "that we are testing this stuff and underlying composition so everything is getting applied right now in a fully",
    "start": "1634360",
    "end": "1640399"
  },
  {
    "text": "automated manner I did nothing right I just uh did the ronly operations and we",
    "start": "1640399",
    "end": "1645880"
  },
  {
    "text": "can uh get a composites and we can uh do something like cross",
    "start": "1645880",
    "end": "1652120"
  },
  {
    "text": "plane beta trace for example H and it will show us uh all the",
    "start": "1652120",
    "end": "1660320"
  },
  {
    "text": "composed resources that are coming from instantiation of the composite resource under test so as you can see Resource",
    "start": "1660320",
    "end": "1666960"
  },
  {
    "text": "Group is already uh available and uh uh the rest of",
    "start": "1666960",
    "end": "1673399"
  },
  {
    "text": "uh of resources are waiting the reconciliation so we can wait a",
    "start": "1673399",
    "end": "1679440"
  },
  {
    "text": "bit uh it will be eventually ready and then",
    "start": "1679440",
    "end": "1684519"
  },
  {
    "text": "it up test will uh we'll proceed and tear the stuff",
    "start": "1684519",
    "end": "1689919"
  },
  {
    "text": "down so that that's basically the flow uh as if you remember it's a uh",
    "start": "1689919",
    "end": "1696640"
  },
  {
    "text": "cross plane runs this uh reconciliation Loop and uh it will be a form of",
    "start": "1696640",
    "end": "1703159"
  },
  {
    "text": "eventual consistency as you can see virtual network is ready ready uh subnet",
    "start": "1703159",
    "end": "1708720"
  },
  {
    "text": "is good so our change that we did actually looks good end to end as well",
    "start": "1708720",
    "end": "1715960"
  },
  {
    "text": "and so uh after some time uh the all the uh",
    "start": "1715960",
    "end": "1722440"
  },
  {
    "text": "resources will be provisioned on the cloud provider side and we should be",
    "start": "1722440",
    "end": "1727640"
  },
  {
    "text": "good I think we don't have much time to wait for the end of the test flow so we",
    "start": "1727640",
    "end": "1732960"
  },
  {
    "text": "can proceed with the uh with the rest of the slides so uh after upcoming",
    "start": "1732960",
    "end": "1738880"
  },
  {
    "text": "enhancements uh so uh if you follow this area uh there is a successor to cutle",
    "start": "1738880",
    "end": "1746200"
  },
  {
    "text": "our underline engine called chainsaw and we have a proposal and P request to update to it and it will enable us to",
    "start": "1746200",
    "end": "1753399"
  },
  {
    "text": "build more powerful assertions better looks and meanwhile keeping the things compatible uh we Victor our colleague",
    "start": "1753399",
    "end": "1761480"
  },
  {
    "text": "and also he's a devop celebrity he has a nice coverage of a chainsaw and uh what",
    "start": "1761480",
    "end": "1768360"
  },
  {
    "text": "it's linked in the slides uh and he's actually on the conference he's presenting in a parallel room so room so",
    "start": "1768360",
    "end": "1775559"
  },
  {
    "text": "catch him up for a chat he called d uh Tri test it's very easy so like uh",
    "start": "1775559",
    "end": "1782279"
  },
  {
    "text": "it's for if you take the binary it's not obvious how to set it up but if you get get our reference configuration it's",
    "start": "1782279",
    "end": "1788240"
  },
  {
    "text": "very easy to test Vis it uh set it up and after you get an understanding how to run it on hour sample repo it's very",
    "start": "1788240",
    "end": "1795440"
  },
  {
    "text": "easy to transfer to your custom coresponding configuration so so uh you will be ready to go with your n testing",
    "start": "1795440",
    "end": "1802200"
  },
  {
    "text": "story pretty soon and if you find any issues definitely open open uh provide a",
    "start": "1802200",
    "end": "1807799"
  },
  {
    "text": "feedback in a GitHub repo so uh before we recap I want to see yeah uh full",
    "start": "1807799",
    "end": "1815600"
  },
  {
    "text": "delation so so if it reach the delay state it means that everything was",
    "start": "1815600",
    "end": "1821240"
  },
  {
    "text": "provisioned right and it made a update import and now it reconciles for the",
    "start": "1821240",
    "end": "1827519"
  },
  {
    "text": "clean so everything everything is good with our code",
    "start": "1827519",
    "end": "1833200"
  },
  {
    "text": "uh so we can probably finalize this talk with a with the following thoughts so uh",
    "start": "1833200",
    "end": "1841360"
  },
  {
    "text": "our recommendation here like you know rely as much as possible in local testing local feedback loop and follow",
    "start": "1841360",
    "end": "1847000"
  },
  {
    "text": "the classic test pyramid uh recommendation basically invest as much as possible into local uh uh level of",
    "start": "1847000",
    "end": "1854840"
  },
  {
    "text": "the testing which is cheap faster and and uh reliable meaning like these tests",
    "start": "1854840",
    "end": "1861760"
  },
  {
    "text": "are usually not flaky and keeps the end to end layer controlled so basically use",
    "start": "1861760",
    "end": "1867279"
  },
  {
    "text": "a local render Val validate apply test driven development flow and when you have a good enough signals proceed with",
    "start": "1867279",
    "end": "1874200"
  },
  {
    "text": "end to level testing and you have up test to automate even end to level testing",
    "start": "1874200",
    "end": "1879240"
  },
  {
    "text": "stuff uh if you like to learn more we have a set of reference platforms available in totally open source manner",
    "start": "1879240",
    "end": "1885919"
  },
  {
    "text": "on GitHub you can uh pick uh this is just you know ass simples from Big Three",
    "start": "1885919",
    "end": "1893039"
  },
  {
    "text": "we have more uh but basically you can clone see the uh both testing patterns",
    "start": "1893039",
    "end": "1899039"
  },
  {
    "text": "and configuration building best practices that we using there and reuse it on your site so it's very easy to adopt we have a set of recent block",
    "start": "1899039",
    "end": "1906440"
  },
  {
    "text": "posts uh one is about overall crossplay configuration building and the setup",
    "start": "1906440",
    "end": "1912279"
  },
  {
    "text": "everything up to the renovate how to maintain in long term and Stephen uh just yesterday released an amazing uh",
    "start": "1912279",
    "end": "1919639"
  },
  {
    "text": "blog post on covering this testing pattern local uh local validation layer",
    "start": "1919639",
    "end": "1925320"
  },
  {
    "text": "so that's pretty much it thank you so much uh the all the slides available on",
    "start": "1925320",
    "end": "1933080"
  },
  {
    "text": "this scheduling and please submit feedback there thank you for joining us [Applause]",
    "start": "1933080",
    "end": "1939720"
  },
  {
    "text": "today and we have like a five minutes for questions I guess",
    "start": "1939720",
    "end": "1946039"
  },
  {
    "text": "yeah please yeah so it's very kind of classic",
    "start": "1949399",
    "end": "1956880"
  },
  {
    "text": "questions that we getting uh very frequently from from community so my usual thinking like a terraform is CLI",
    "start": "1956880",
    "end": "1963000"
  },
  {
    "text": "tool like it's great and I see infrastructure is a Cod layer but it doesn't provide a control plane right it doesn't provide API cross plane extends",
    "start": "1963000",
    "end": "1970799"
  },
  {
    "text": "a kubernetes API and creates like control plane for you so you basically can consume resources you can create",
    "start": "1970799",
    "end": "1976320"
  },
  {
    "text": "your own if you like like you know with the customer Resources with vis a cross plane so it's kind of next level for me",
    "start": "1976320",
    "end": "1983279"
  },
  {
    "text": "yeah but in what kind of scenario I mean I would be preferring cross spin against so well s Self Service scenario right so",
    "start": "1983279",
    "end": "1990480"
  },
  {
    "text": "you you want to for example you want to consume provide to your developers in an organization I don't know very secure",
    "start": "1990480",
    "end": "1996039"
  },
  {
    "text": "database and very like you know secure bucket or any service you encapsulate everything with cross plane and they",
    "start": "1996039",
    "end": "2002159"
  },
  {
    "text": "consume it like as a part part of IDP or part of API whatever you like like where you it's very integrated right because",
    "start": "2002159",
    "end": "2008480"
  },
  {
    "text": "it's just extension of kubernetes CPI it's very powerful yeah it also supports",
    "start": "2008480",
    "end": "2014919"
  },
  {
    "text": "monitoring every resource has profana Probus metrics so across all your clusters you can monitor in real time",
    "start": "2014919",
    "end": "2020639"
  },
  {
    "text": "what the state is it continually reconciles so you don't have to like have a plan disaster you don't know so",
    "start": "2020639",
    "end": "2026240"
  },
  {
    "text": "it's really the use case we see are these internal platforms where you're supporting thousands of users who are requesting things so you're building",
    "start": "2026240",
    "end": "2032279"
  },
  {
    "text": "your own internal cloud and you benefit from all kubernetes ecosystem right so you you",
    "start": "2032279",
    "end": "2038120"
  },
  {
    "text": "can apply all G giops practices with zaro or flux so yeah uh you can build a",
    "start": "2038120",
    "end": "2044039"
  },
  {
    "text": "very reliable platform with it any other questions one",
    "start": "2044039",
    "end": "2051158"
  },
  {
    "text": "minute thank sorry like maybe after yeah thank you um so with crossplane my",
    "start": "2056200",
    "end": "2064560"
  },
  {
    "text": "infrastructure is then managed by something that's that relies on kubernetes as well doesn't that",
    "start": "2064560",
    "end": "2069679"
  },
  {
    "text": "introduce some sort of single point of failure and how do you mitigate having all your infrastructure managed through",
    "start": "2069679",
    "end": "2075118"
  },
  {
    "text": "a system that is also subject to failures yeah basically uh you manage",
    "start": "2075119",
    "end": "2081720"
  },
  {
    "text": "with cross plane right you have only uh control plane on a cross plane enabled",
    "start": "2081720",
    "end": "2086919"
  },
  {
    "text": "cluster right so where like if if cross plane is down your infrastructure is fine still right and if you need to",
    "start": "2086919",
    "end": "2093480"
  },
  {
    "text": "recover it's kind of ATD back up and you can even like you know restore and REM part resources on another cluster so",
    "start": "2093480",
    "end": "2099560"
  },
  {
    "text": "it's actually like lightweight and the state is controllable let's say so you don't have a real uh real failure if",
    "start": "2099560",
    "end": "2106280"
  },
  {
    "text": "crossplane fails and it's easy to recover",
    "start": "2106280",
    "end": "2110920"
  },
  {
    "text": "thanks and I think that's it right yeah thank you so much",
    "start": "2111640",
    "end": "2117230"
  },
  {
    "text": "[Applause]",
    "start": "2117230",
    "end": "2120619"
  }
]