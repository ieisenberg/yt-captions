[
  {
    "text": "thank you hello everyone uh my name is",
    "start": "1599",
    "end": "4839"
  },
  {
    "text": "chandan uh I lead the con team in Azure",
    "start": "4839",
    "end": "8760"
  },
  {
    "text": "responsible for both communities and",
    "start": "8760",
    "end": "10440"
  },
  {
    "text": "servess product in Azure and with me I",
    "start": "10440",
    "end": "12639"
  },
  {
    "text": "have",
    "start": "12639",
    "end": "14160"
  },
  {
    "text": "money hey thanks San so I'm Tamil man",
    "start": "14160",
    "end": "17320"
  },
  {
    "text": "manur and engineering manager in",
    "start": "17320",
    "end": "18840"
  },
  {
    "text": "Microsoft working in Aus data plan",
    "start": "18840",
    "end": "21439"
  },
  {
    "text": "maintainer of aus and also an AR member",
    "start": "21439",
    "end": "23920"
  },
  {
    "text": "of celium I'm really excited to be here",
    "start": "23920",
    "end": "26240"
  },
  {
    "text": "and I let then to start with the",
    "start": "26240",
    "end": "28480"
  },
  {
    "text": "presentation so today we want to talk",
    "start": "28480",
    "end": "30920"
  },
  {
    "text": "about how we extending celium beond",
    "start": "30920",
    "end": "32800"
  },
  {
    "text": "Linux give a little bit of breakdown of",
    "start": "32800",
    "end": "35399"
  },
  {
    "text": "what it means to bring power of celium",
    "start": "35399",
    "end": "37399"
  },
  {
    "text": "in vpf to Windows and hope you get",
    "start": "37399",
    "end": "40160"
  },
  {
    "text": "excited about and contribute with us to",
    "start": "40160",
    "end": "41719"
  },
  {
    "text": "make it forward so before I start there",
    "start": "41719",
    "end": "44480"
  },
  {
    "text": "let's start what celium journey in aure",
    "start": "44480",
    "end": "46960"
  },
  {
    "text": "has been so Microsoft goal is to make",
    "start": "46960",
    "end": "49760"
  },
  {
    "text": "sure the celium runs best in aure the",
    "start": "49760",
    "end": "52120"
  },
  {
    "text": "way we have done celium integrated with",
    "start": "52120",
    "end": "54559"
  },
  {
    "text": "a networking fabric stack is bring the",
    "start": "54559",
    "end": "57920"
  },
  {
    "text": "power of evf and celium the guest with",
    "start": "57920",
    "end": "61199"
  },
  {
    "text": "seamless integration with the Azure",
    "start": "61199",
    "end": "62519"
  },
  {
    "text": "platform thing we have in Azure we",
    "start": "62519",
    "end": "65158"
  },
  {
    "text": "started this journey we announced in",
    "start": "65159",
    "end": "67240"
  },
  {
    "text": "November the celium the next generation",
    "start": "67240",
    "end": "69280"
  },
  {
    "text": "of a cni will be Power by celium we",
    "start": "69280",
    "end": "71200"
  },
  {
    "text": "anoun the public preview in November of",
    "start": "71200",
    "end": "72600"
  },
  {
    "text": "2022 last year we had a availability",
    "start": "72600",
    "end": "75320"
  },
  {
    "text": "we're building tons of feature on this",
    "start": "75320",
    "end": "77560"
  },
  {
    "text": "which actually brings the both scale",
    "start": "77560",
    "end": "79840"
  },
  {
    "text": "reliability performance security obsil",
    "start": "79840",
    "end": "83280"
  },
  {
    "text": "which you need from celium do it which",
    "start": "83280",
    "end": "86040"
  },
  {
    "text": "is best in class across the thing as we",
    "start": "86040",
    "end": "88560"
  },
  {
    "text": "integrate very tightly and natively in",
    "start": "88560",
    "end": "91439"
  },
  {
    "text": "Azure now we're taking one more step",
    "start": "91439",
    "end": "93960"
  },
  {
    "text": "further with this talk give a breakdown",
    "start": "93960",
    "end": "96399"
  },
  {
    "text": "of what we are working to bring this",
    "start": "96399",
    "end": "98920"
  },
  {
    "text": "whole suet of things to Windows so",
    "start": "98920",
    "end": "101840"
  },
  {
    "text": "Windows our love with celium we're",
    "start": "101840",
    "end": "103439"
  },
  {
    "text": "extending it back to Windows so you can",
    "start": "103439",
    "end": "105360"
  },
  {
    "text": "have a much more Rich environments where",
    "start": "105360",
    "end": "108640"
  },
  {
    "text": "you can deploy your application have the",
    "start": "108640",
    "end": "110560"
  },
  {
    "text": "same kind of stuff you're doing with",
    "start": "110560",
    "end": "111799"
  },
  {
    "text": "Linux have with Windows and have a much",
    "start": "111799",
    "end": "114159"
  },
  {
    "text": "more sen",
    "start": "114159",
    "end": "116640"
  },
  {
    "text": "experience so before we dive into it I",
    "start": "117280",
    "end": "119960"
  },
  {
    "text": "want to just give a brief architecture",
    "start": "119960",
    "end": "122320"
  },
  {
    "text": "of how Windows container networking",
    "start": "122320",
    "end": "123759"
  },
  {
    "text": "stack has been built on the left side we",
    "start": "123759",
    "end": "126560"
  },
  {
    "text": "have a traditional Windows container",
    "start": "126560",
    "end": "128200"
  },
  {
    "text": "networking it uses what you call virtual",
    "start": "128200",
    "end": "131319"
  },
  {
    "text": "switch and it has a something extension",
    "start": "131319",
    "end": "134239"
  },
  {
    "text": "of it which you call the vfp or virtual",
    "start": "134239",
    "end": "136760"
  },
  {
    "text": "filtering platform it's a corner level",
    "start": "136760",
    "end": "138400"
  },
  {
    "text": "driver which actually does help you",
    "start": "138400",
    "end": "141680"
  },
  {
    "text": "deploy accles and security policies",
    "start": "141680",
    "end": "144400"
  },
  {
    "text": "observe and transform the",
    "start": "144400",
    "end": "146519"
  },
  {
    "text": "network the windows container networking",
    "start": "146519",
    "end": "148720"
  },
  {
    "text": "stack has been built containers should",
    "start": "148720",
    "end": "150959"
  },
  {
    "text": "be as rich as the virtual machines so",
    "start": "150959",
    "end": "153920"
  },
  {
    "text": "whatever investment we build in our",
    "start": "153920",
    "end": "156120"
  },
  {
    "text": "hyperv stack for VMS we want to have a",
    "start": "156120",
    "end": "158959"
  },
  {
    "text": "same parity with",
    "start": "158959",
    "end": "160800"
  },
  {
    "text": "containers and so it means we have we",
    "start": "160800",
    "end": "163200"
  },
  {
    "text": "use much much Rich functionality but",
    "start": "163200",
    "end": "165319"
  },
  {
    "text": "it's heavyweight because it's both for",
    "start": "165319",
    "end": "167159"
  },
  {
    "text": "VMS with the new stock with helium we",
    "start": "167159",
    "end": "169720"
  },
  {
    "text": "are making it a transformation or",
    "start": "169720",
    "end": "171640"
  },
  {
    "text": "modernization to accept we want a",
    "start": "171640",
    "end": "173879"
  },
  {
    "text": "lightweight way to extend the Kel use",
    "start": "173879",
    "end": "176920"
  },
  {
    "text": "the power of vpf we have in Linux bring",
    "start": "176920",
    "end": "179360"
  },
  {
    "text": "it back to windows and still give the",
    "start": "179360",
    "end": "182280"
  },
  {
    "text": "flexibility agility what we can achieve",
    "start": "182280",
    "end": "185400"
  },
  {
    "text": "without need to develop custom drivers",
    "start": "185400",
    "end": "187280"
  },
  {
    "text": "without need to maintain this whole what",
    "start": "187280",
    "end": "189280"
  },
  {
    "text": "machine stack so we can have a much more",
    "start": "189280",
    "end": "190680"
  },
  {
    "text": "transformation story with that I want to",
    "start": "190680",
    "end": "193159"
  },
  {
    "text": "give to T money to talk about little bit",
    "start": "193159",
    "end": "194680"
  },
  {
    "text": "more",
    "start": "194680",
    "end": "195680"
  },
  {
    "text": "details thank you chandan so EVP for",
    "start": "195680",
    "end": "199360"
  },
  {
    "text": "Windows is a open source project and",
    "start": "199360",
    "end": "201640"
  },
  {
    "text": "it's MIT licensed open source project",
    "start": "201640",
    "end": "203519"
  },
  {
    "text": "and we wanted to embrace open source and",
    "start": "203519",
    "end": "205879"
  },
  {
    "text": "wanted to extend the all open source",
    "start": "205879",
    "end": "207560"
  },
  {
    "text": "project with Windows here so uh the ebf",
    "start": "207560",
    "end": "210280"
  },
  {
    "text": "windows is like further leverages other",
    "start": "210280",
    "end": "212200"
  },
  {
    "text": "open source projects here prev verifier",
    "start": "212200",
    "end": "214599"
  },
  {
    "text": "so it's like an ebpf verifier which",
    "start": "214599",
    "end": "216920"
  },
  {
    "text": "makes sure the ebpf programs are safe",
    "start": "216920",
    "end": "218920"
  },
  {
    "text": "and secure to run in kernel and ubf is a",
    "start": "218920",
    "end": "222159"
  },
  {
    "text": "user spaced BPF is another open source",
    "start": "222159",
    "end": "224200"
  },
  {
    "text": "project and we Windows Windows uses that",
    "start": "224200",
    "end": "227480"
  },
  {
    "text": "for cheat compilation and interpreter",
    "start": "227480",
    "end": "229879"
  },
  {
    "text": "for ebpf by code and xtp for Windows is",
    "start": "229879",
    "end": "233280"
  },
  {
    "text": "other separate uh open source project uh",
    "start": "233280",
    "end": "236400"
  },
  {
    "text": "which for when we wanted to Port CM",
    "start": "236400",
    "end": "239000"
  },
  {
    "text": "programs we leverage this HTP for",
    "start": "239000",
    "end": "241079"
  },
  {
    "text": "windows open source project to support",
    "start": "241079",
    "end": "242599"
  },
  {
    "text": "the HTP hook in Windows so we want to",
    "start": "242599",
    "end": "245680"
  },
  {
    "text": "make sure um the ebpf windows as",
    "start": "245680",
    "end": "248280"
  },
  {
    "text": "compatible with Linux and U with uh so",
    "start": "248280",
    "end": "251760"
  },
  {
    "text": "the user can run the same EF program on",
    "start": "251760",
    "end": "253760"
  },
  {
    "text": "Linux and he can able to run the same EF",
    "start": "253760",
    "end": "255920"
  },
  {
    "text": "program on Windows there are few minor",
    "start": "255920",
    "end": "257639"
  },
  {
    "text": "exceptions which we can um able to solve",
    "start": "257639",
    "end": "260359"
  },
  {
    "text": "with APF Windows",
    "start": "260359",
    "end": "262880"
  },
  {
    "text": "here so um I want to compare how Linux",
    "start": "262880",
    "end": "266400"
  },
  {
    "text": "ebpf is comparison with Windows ebpf",
    "start": "266400",
    "end": "268759"
  },
  {
    "text": "architecture here so so first let's look",
    "start": "268759",
    "end": "270320"
  },
  {
    "text": "at the Linux ebpf architecture so if you",
    "start": "270320",
    "end": "273520"
  },
  {
    "text": "look at if you look at Linux ebf",
    "start": "273520",
    "end": "274720"
  },
  {
    "text": "architecture there is I mean user",
    "start": "274720",
    "end": "276400"
  },
  {
    "text": "develops ebpf program and then he uses",
    "start": "276400",
    "end": "279080"
  },
  {
    "text": "the cang tool chain to convert the ebpf",
    "start": "279080",
    "end": "281560"
  },
  {
    "text": "program to ebpf bite code and then the",
    "start": "281560",
    "end": "284680"
  },
  {
    "text": "user can uses the existing Li BPF",
    "start": "284680",
    "end": "287280"
  },
  {
    "text": "libraries um can be celum BPF library or",
    "start": "287280",
    "end": "290280"
  },
  {
    "text": "iosl BPF library to load the ebpf bite",
    "start": "290280",
    "end": "293120"
  },
  {
    "text": "code into the kernel and in that process",
    "start": "293120",
    "end": "296400"
  },
  {
    "text": "uh if you look at the the evf verifier",
    "start": "296400",
    "end": "298680"
  },
  {
    "text": "runs in the kernel make sure the kernel",
    "start": "298680",
    "end": "300840"
  },
  {
    "text": "program I mean the ebpf program is like",
    "start": "300840",
    "end": "303360"
  },
  {
    "text": "secure and safe to run make sure like it",
    "start": "303360",
    "end": "305479"
  },
  {
    "text": "doesn't access the memory it intended to",
    "start": "305479",
    "end": "307600"
  },
  {
    "text": "or like um it's it's like uh able to",
    "start": "307600",
    "end": "310680"
  },
  {
    "text": "complete within the time and then jit",
    "start": "310680",
    "end": "312680"
  },
  {
    "text": "compilation happens which converts the",
    "start": "312680",
    "end": "314360"
  },
  {
    "text": "bite code to the native machine code",
    "start": "314360",
    "end": "316880"
  },
  {
    "text": "here um and then the ebpf when the ebpf",
    "start": "316880",
    "end": "319759"
  },
  {
    "text": "program gets executed when the when the",
    "start": "319759",
    "end": "321479"
  },
  {
    "text": "packet hits the tcpip layer the ebpf",
    "start": "321479",
    "end": "323240"
  },
  {
    "text": "program executed and then the user may",
    "start": "323240",
    "end": "325919"
  },
  {
    "text": "able to get the events here now let's",
    "start": "325919",
    "end": "328400"
  },
  {
    "text": "look at the windows e EF architecture so",
    "start": "328400",
    "end": "331479"
  },
  {
    "text": "again the user have the ebpf program",
    "start": "331479",
    "end": "333199"
  },
  {
    "text": "code and there is ebpf driver tool chain",
    "start": "333199",
    "end": "335919"
  },
  {
    "text": "so it does more than cang so it converts",
    "start": "335919",
    "end": "338479"
  },
  {
    "text": "the it uses cang to First convert the EB",
    "start": "338479",
    "end": "341240"
  },
  {
    "text": "program to the bite code and also it",
    "start": "341240",
    "end": "344600"
  },
  {
    "text": "converts it has uh it converts it to the",
    "start": "344600",
    "end": "347280"
  },
  {
    "text": "native uh Windows driver code it does",
    "start": "347280",
    "end": "349720"
  },
  {
    "text": "the I mean in in in Windows since the um",
    "start": "349720",
    "end": "354120"
  },
  {
    "text": "uh the the K all the kernel drivers",
    "start": "354120",
    "end": "356720"
  },
  {
    "text": "needs to be signed uh the verification",
    "start": "356720",
    "end": "359240"
  },
  {
    "text": "if you see see the Linux part the",
    "start": "359240",
    "end": "360520"
  },
  {
    "text": "verifier and the jit compilation happens",
    "start": "360520",
    "end": "362160"
  },
  {
    "text": "in kernel part so in Windows it it's",
    "start": "362160",
    "end": "364720"
  },
  {
    "text": "moved to the user space because like the",
    "start": "364720",
    "end": "366680"
  },
  {
    "text": "windows kernel drivers are expected to",
    "start": "366680",
    "end": "368759"
  },
  {
    "text": "be signed so it needs to convert the exe",
    "start": "368759",
    "end": "371800"
  },
  {
    "text": "executable image which created in the",
    "start": "371800",
    "end": "373599"
  },
  {
    "text": "Linux in the kernel it's been created in",
    "start": "373599",
    "end": "375560"
  },
  {
    "text": "the user space in Windows so we can I'm",
    "start": "375560",
    "end": "378639"
  },
  {
    "text": "going to cover more about the evf driver",
    "start": "378639",
    "end": "380440"
  },
  {
    "text": "tool chain the upcoming slide but the",
    "start": "380440",
    "end": "382400"
  },
  {
    "text": "evf driver tool chain converts the evf",
    "start": "382400",
    "end": "384360"
  },
  {
    "text": "program to the native machine code and",
    "start": "384360",
    "end": "386560"
  },
  {
    "text": "then the user can use any existing BPF",
    "start": "386560",
    "end": "388880"
  },
  {
    "text": "tool here you can use either net asset",
    "start": "388880",
    "end": "391039"
  },
  {
    "text": "tool or BPF tool to um uh to use the LI",
    "start": "391039",
    "end": "395639"
  },
  {
    "text": "BPF library to load the uh the native",
    "start": "395639",
    "end": "398520"
  },
  {
    "text": "machine code into the windows kernel and",
    "start": "398520",
    "end": "400639"
  },
  {
    "text": "one other difference here is if you see",
    "start": "400639",
    "end": "402120"
  },
  {
    "text": "there is a evf shim layer uh sitting in",
    "start": "402120",
    "end": "404560"
  },
  {
    "text": "the kernel so in Windows uh Windows",
    "start": "404560",
    "end": "407560"
  },
  {
    "text": "doesn't understand TC hook or xtp hook",
    "start": "407560",
    "end": "410039"
  },
  {
    "text": "which is natively supported in Linux",
    "start": "410039",
    "end": "411720"
  },
  {
    "text": "kernel so we need a abstraction layer",
    "start": "411720",
    "end": "414479"
  },
  {
    "text": "here to convert the TC ebpf program or",
    "start": "414479",
    "end": "417360"
  },
  {
    "text": "xtp EDP program to the Windows kernel",
    "start": "417360",
    "end": "420800"
  },
  {
    "text": "native types for example in TC we have a",
    "start": "420800",
    "end": "423800"
  },
  {
    "text": "Escape of structure so Windows doesn't",
    "start": "423800",
    "end": "425960"
  },
  {
    "text": "know about Escape of structure here so",
    "start": "425960",
    "end": "427720"
  },
  {
    "text": "this shim layer makes sure it converts",
    "start": "427720",
    "end": "430680"
  },
  {
    "text": "the es off to Windows native buffer type",
    "start": "430680",
    "end": "433960"
  },
  {
    "text": "Windows have something like net buffer",
    "start": "433960",
    "end": "435680"
  },
  {
    "text": "list so this SK buff example for example",
    "start": "435680",
    "end": "438639"
  },
  {
    "text": "the SK buff is converted to the uh net",
    "start": "438639",
    "end": "441160"
  },
  {
    "text": "the network buffer list by the shim",
    "start": "441160",
    "end": "442639"
  },
  {
    "text": "layer and if you see when a packet hits",
    "start": "442639",
    "end": "445240"
  },
  {
    "text": "the layer two it's a driver layer so",
    "start": "445240",
    "end": "448360"
  },
  {
    "text": "this will call this",
    "start": "448360",
    "end": "450360"
  },
  {
    "text": "uh this evf shim which is like a",
    "start": "450360",
    "end": "453199"
  },
  {
    "text": "extension for xtp H TCP H it will call",
    "start": "453199",
    "end": "455840"
  },
  {
    "text": "the xtp H and then invoke the actual xtp",
    "start": "455840",
    "end": "458879"
  },
  {
    "text": "program and if a packet hits the TC IP",
    "start": "458879",
    "end": "461000"
  },
  {
    "text": "layer it calls the TC extension hop to",
    "start": "461000",
    "end": "463280"
  },
  {
    "text": "invoke the actual U uh TC ebpf program",
    "start": "463280",
    "end": "469080"
  },
  {
    "text": "here so yeah just I wanted to cover the",
    "start": "469639",
    "end": "472479"
  },
  {
    "text": "how the windows ebf compilation happens",
    "start": "472479",
    "end": "474560"
  },
  {
    "text": "here um so Windows as I said in previous",
    "start": "474560",
    "end": "478360"
  },
  {
    "text": "slide Windows uh",
    "start": "478360",
    "end": "480039"
  },
  {
    "text": "colel drivers needs to be signed so for",
    "start": "480039",
    "end": "482639"
  },
  {
    "text": "hbci like something we call hypervisor",
    "start": "482639",
    "end": "484720"
  },
  {
    "text": "code Integrity Windows is like more",
    "start": "484720",
    "end": "486800"
  },
  {
    "text": "secure and wanted to make sure like all",
    "start": "486800",
    "end": "488879"
  },
  {
    "text": "the colel drivers are secured and uh",
    "start": "488879",
    "end": "491159"
  },
  {
    "text": "signed there which is not a requirement",
    "start": "491159",
    "end": "494080"
  },
  {
    "text": "in Linux in Linux you just directly",
    "start": "494080",
    "end": "496280"
  },
  {
    "text": "Linux just directly J compiles and then",
    "start": "496280",
    "end": "499240"
  },
  {
    "text": "uh the bite code to the native code it's",
    "start": "499240",
    "end": "500560"
  },
  {
    "text": "not Reed to be sent but in Windows it's",
    "start": "500560",
    "end": "502080"
  },
  {
    "text": "like a um um it Windows expects the",
    "start": "502080",
    "end": "505199"
  },
  {
    "text": "drivers to be signed here so this means",
    "start": "505199",
    "end": "508560"
  },
  {
    "text": "like uh uh the windows cannot use the",
    "start": "508560",
    "end": "510720"
  },
  {
    "text": "existing jig compilation uh which",
    "start": "510720",
    "end": "513120"
  },
  {
    "text": "actually does the um um compilation of n",
    "start": "513120",
    "end": "516518"
  },
  {
    "text": "code in the colel instead it uses",
    "start": "516519",
    "end": "517880"
  },
  {
    "text": "something like ahead of time compilation",
    "start": "517880",
    "end": "520159"
  },
  {
    "text": "so it happens everything in the user",
    "start": "520159",
    "end": "522039"
  },
  {
    "text": "space uh so this is the expansion of the",
    "start": "522039",
    "end": "524279"
  },
  {
    "text": "EF tool chain which you saw in the",
    "start": "524279",
    "end": "526080"
  },
  {
    "text": "previous slide so the user has the ebpf",
    "start": "526080",
    "end": "529120"
  },
  {
    "text": "source code and he uses the cang to",
    "start": "529120",
    "end": "531040"
  },
  {
    "text": "convert to the L file so this is where",
    "start": "531040",
    "end": "533680"
  },
  {
    "text": "the Linux stops right in Linux you just",
    "start": "533680",
    "end": "535560"
  },
  {
    "text": "convert the L file and then you use the",
    "start": "535560",
    "end": "537000"
  },
  {
    "text": "lad system call to uh invoke the",
    "start": "537000",
    "end": "539440"
  },
  {
    "text": "verifier and then jit compiler but it",
    "start": "539440",
    "end": "542200"
  },
  {
    "text": "extends in Windows it all happens in the",
    "start": "542200",
    "end": "543760"
  },
  {
    "text": "user space so then use the prev verifier",
    "start": "543760",
    "end": "546240"
  },
  {
    "text": "to make sure that ebpf program is safe",
    "start": "546240",
    "end": "548440"
  },
  {
    "text": "and then there is a tool called BPF Toc",
    "start": "548440",
    "end": "550640"
  },
  {
    "text": "so which converts the uh the L file the",
    "start": "550640",
    "end": "553640"
  },
  {
    "text": "object file to the driver code with the",
    "start": "553640",
    "end": "556279"
  },
  {
    "text": "EF registers and maps and then uses a",
    "start": "556279",
    "end": "559680"
  },
  {
    "text": "micro Studio visual compiler to convert",
    "start": "559680",
    "end": "561640"
  },
  {
    "text": "you to a actual executable image and",
    "start": "561640",
    "end": "564279"
  },
  {
    "text": "then um you can use a Microsoft signing",
    "start": "564279",
    "end": "566360"
  },
  {
    "text": "tool to sign the image",
    "start": "566360",
    "end": "568160"
  },
  {
    "text": "here and and the developer doesn't need",
    "start": "568160",
    "end": "570760"
  },
  {
    "text": "to worry about or like need to do all",
    "start": "570760",
    "end": "572640"
  },
  {
    "text": "the steps individually there is a",
    "start": "572640",
    "end": "573760"
  },
  {
    "text": "Windows tool already existing in open",
    "start": "573760",
    "end": "575399"
  },
  {
    "text": "source they can just use the tool to",
    "start": "575399",
    "end": "576880"
  },
  {
    "text": "convert directly from the bite code to a",
    "start": "576880",
    "end": "579760"
  },
  {
    "text": "native image",
    "start": "579760",
    "end": "582480"
  },
  {
    "text": "here so just we can take an example here",
    "start": "583399",
    "end": "586360"
  },
  {
    "text": "how Windows ebpf compilation process",
    "start": "586360",
    "end": "588040"
  },
  {
    "text": "goes through uh you have a sample Hollow",
    "start": "588040",
    "end": "590720"
  },
  {
    "text": "World ebpf program and then you use the",
    "start": "590720",
    "end": "594240"
  },
  {
    "text": "existing cang tool chain to compare this",
    "start": "594240",
    "end": "596079"
  },
  {
    "text": "ebpf code to a bite code and then um",
    "start": "596079",
    "end": "599640"
  },
  {
    "text": "uses a BPF 2C tool to convert the bite",
    "start": "599640",
    "end": "602360"
  },
  {
    "text": "code to the register code here driver",
    "start": "602360",
    "end": "606399"
  },
  {
    "text": "driver code here um and then use the",
    "start": "606399",
    "end": "609200"
  },
  {
    "text": "Microsoft Studio visual compiler to",
    "start": "609200",
    "end": "610640"
  },
  {
    "text": "convert the driver code to the",
    "start": "610640",
    "end": "611839"
  },
  {
    "text": "executable image and then you get the",
    "start": "611839",
    "end": "613640"
  },
  {
    "text": "image to be signed and then you load the",
    "start": "613640",
    "end": "615839"
  },
  {
    "text": "program into the",
    "start": "615839",
    "end": "618240"
  },
  {
    "text": "kernel so so now let's talk about how we",
    "start": "618240",
    "end": "621600"
  },
  {
    "text": "ported the existing celm EV programs to",
    "start": "621600",
    "end": "623640"
  },
  {
    "text": "Windows there are some differences uh",
    "start": "623640",
    "end": "626079"
  },
  {
    "text": "when compared to Linux and windows and",
    "start": "626079",
    "end": "628160"
  },
  {
    "text": "uh let's let's see like what are the",
    "start": "628160",
    "end": "630160"
  },
  {
    "text": "major differences and how we solved it",
    "start": "630160",
    "end": "631920"
  },
  {
    "text": "and then extend the support to the",
    "start": "631920",
    "end": "633160"
  },
  {
    "text": "windows with the same program",
    "start": "633160",
    "end": "636000"
  },
  {
    "text": "here so this is one one major difference",
    "start": "636000",
    "end": "639320"
  },
  {
    "text": "I wanted to talk about um CM uses as",
    "start": "639320",
    "end": "642079"
  },
  {
    "text": "defines uh to dynamically pause values",
    "start": "642079",
    "end": "644320"
  },
  {
    "text": "from um uh to the BPF programs because",
    "start": "644320",
    "end": "647279"
  },
  {
    "text": "like U for example the node config it",
    "start": "647279",
    "end": "649720"
  },
  {
    "text": "uses as defin node configs for example",
    "start": "649720",
    "end": "652040"
  },
  {
    "text": "the device index for IP address so all",
    "start": "652040",
    "end": "654480"
  },
  {
    "text": "these are",
    "start": "654480",
    "end": "655920"
  },
  {
    "text": "process as defense to the BPF programs",
    "start": "655920",
    "end": "658360"
  },
  {
    "text": "in celium uh because CM dynamically",
    "start": "658360",
    "end": "660839"
  },
  {
    "text": "compiles EF program at the run time and",
    "start": "660839",
    "end": "663399"
  },
  {
    "text": "then um poses this value so as I said",
    "start": "663399",
    "end": "666120"
  },
  {
    "text": "earlier like Windows ebpf programs are",
    "start": "666120",
    "end": "668279"
  },
  {
    "text": "pre-compiled in the user space right so",
    "start": "668279",
    "end": "671160"
  },
  {
    "text": "uh this is something like uh windows",
    "start": "671160",
    "end": "673079"
  },
  {
    "text": "cannot rely on um it just won't work in",
    "start": "673079",
    "end": "675279"
  },
  {
    "text": "Windows to pause this values dynamically",
    "start": "675279",
    "end": "677120"
  },
  {
    "text": "here so we have to find a solution here",
    "start": "677120",
    "end": "680079"
  },
  {
    "text": "to pause the dynamic values from the",
    "start": "680079",
    "end": "681920"
  },
  {
    "text": "user space to the kernel space so",
    "start": "681920",
    "end": "683560"
  },
  {
    "text": "instead of using as defines like Windows",
    "start": "683560",
    "end": "685959"
  },
  {
    "text": "uses BPF Maps here to pass the values",
    "start": "685959",
    "end": "688360"
  },
  {
    "text": "from users space on the to the cor to",
    "start": "688360",
    "end": "691120"
  },
  {
    "text": "the user space to the um curent space",
    "start": "691120",
    "end": "693880"
  },
  {
    "text": "dynamically here",
    "start": "693880",
    "end": "696000"
  },
  {
    "text": "so um so this is something we abstracted",
    "start": "696000",
    "end": "699360"
  },
  {
    "text": "from the user so user doesn't need to",
    "start": "699360",
    "end": "701360"
  },
  {
    "text": "worry about it like if in case of Linux",
    "start": "701360",
    "end": "703760"
  },
  {
    "text": "it uses as Def and in case of Windows it",
    "start": "703760",
    "end": "705480"
  },
  {
    "text": "uses a BPF maps to um uh load those",
    "start": "705480",
    "end": "708240"
  },
  {
    "text": "values so that will be a uh slight",
    "start": "708240",
    "end": "711360"
  },
  {
    "text": "performance it because it needs to look",
    "start": "711360",
    "end": "713079"
  },
  {
    "text": "up now the map to get the values uh but",
    "start": "713079",
    "end": "717200"
  },
  {
    "text": "it may be offset by um uh like the since",
    "start": "717200",
    "end": "720600"
  },
  {
    "text": "we compile the uh since we compile the",
    "start": "720600",
    "end": "723040"
  },
  {
    "text": "bite code to native code in user space",
    "start": "723040",
    "end": "725160"
  },
  {
    "text": "the we use the compiler optimization",
    "start": "725160",
    "end": "726839"
  },
  {
    "text": "here to offset here to bring about the",
    "start": "726839",
    "end": "729839"
  },
  {
    "text": "performance improved performance",
    "start": "729839",
    "end": "733160"
  },
  {
    "text": "here so one other another challeng is",
    "start": "733160",
    "end": "736240"
  },
  {
    "text": "like U so um before this uh like Windows",
    "start": "736240",
    "end": "740120"
  },
  {
    "text": "doesn't have a support for TC hook um so",
    "start": "740120",
    "end": "742839"
  },
  {
    "text": "celium uses TC for uh load balancing and",
    "start": "742839",
    "end": "745600"
  },
  {
    "text": "for data path routing and um uh to",
    "start": "745600",
    "end": "748720"
  },
  {
    "text": "support uh TC hook and windows is",
    "start": "748720",
    "end": "751000"
  },
  {
    "text": "another big challenge uh big U",
    "start": "751000",
    "end": "753279"
  },
  {
    "text": "difference here so it is uh because like",
    "start": "753279",
    "end": "756160"
  },
  {
    "text": "in Linux all this TC who Constructors",
    "start": "756160",
    "end": "758199"
  },
  {
    "text": "are referred in uh Linux con is all GPL",
    "start": "758199",
    "end": "760760"
  },
  {
    "text": "licensed so windows cannot uh windows",
    "start": "760760",
    "end": "765360"
  },
  {
    "text": "cannot um refer or header files or use",
    "start": "765360",
    "end": "768600"
  },
  {
    "text": "the code which is GPL license ebpf",
    "start": "768600",
    "end": "770600"
  },
  {
    "text": "Windows is M license here so what we did",
    "start": "770600",
    "end": "773079"
  },
  {
    "text": "here we have to reverse engineer the",
    "start": "773079",
    "end": "774720"
  },
  {
    "text": "code here so um uh we we take the",
    "start": "774720",
    "end": "778519"
  },
  {
    "text": "compiled um object code here like",
    "start": "778519",
    "end": "781240"
  },
  {
    "text": "the compiled celum L program and which",
    "start": "781240",
    "end": "783920"
  },
  {
    "text": "is like a which which is supported with",
    "start": "783920",
    "end": "785560"
  },
  {
    "text": "the BPF type format and we use the",
    "start": "785560",
    "end": "788000"
  },
  {
    "text": "existing open source BTF tool lip BTF to",
    "start": "788000",
    "end": "790600"
  },
  {
    "text": "convert the compiled cm to generate the",
    "start": "790600",
    "end": "793959"
  },
  {
    "text": "structure types whatever it's used in",
    "start": "793959",
    "end": "795519"
  },
  {
    "text": "the uh compiled so using that structure",
    "start": "795519",
    "end": "798160"
  },
  {
    "text": "types and using that generated header",
    "start": "798160",
    "end": "799760"
  },
  {
    "text": "file um we are able to um support TC",
    "start": "799760",
    "end": "803160"
  },
  {
    "text": "hook extension in Windows like so um um",
    "start": "803160",
    "end": "806920"
  },
  {
    "text": "so that's how EBP of windows realiz on",
    "start": "806920",
    "end": "809800"
  },
  {
    "text": "um those generated head structure types",
    "start": "809800",
    "end": "811839"
  },
  {
    "text": "to create this um to make the TC Hook",
    "start": "811839",
    "end": "814760"
  },
  {
    "text": "support in the",
    "start": "814760",
    "end": "817360"
  },
  {
    "text": "windows so just want to see another",
    "start": "817639",
    "end": "820040"
  },
  {
    "text": "differences in ebpf types and Maps so",
    "start": "820040",
    "end": "822480"
  },
  {
    "text": "STP hook has like different type in",
    "start": "822480",
    "end": "824440"
  },
  {
    "text": "Linux and different type in Windows for",
    "start": "824440",
    "end": "826279"
  },
  {
    "text": "example some of the fields are like um",
    "start": "826279",
    "end": "828800"
  },
  {
    "text": "used in Linux are not used in Windows so",
    "start": "828800",
    "end": "831199"
  },
  {
    "text": "we need to make changes to make it um",
    "start": "831199",
    "end": "833440"
  },
  {
    "text": "crossplatform compared so those fields",
    "start": "833440",
    "end": "835680"
  },
  {
    "text": "may not have those functions in the",
    "start": "835680",
    "end": "837560"
  },
  {
    "text": "windows but it should all",
    "start": "837560",
    "end": "839639"
  },
  {
    "text": "majorly cover the big functions here I",
    "start": "839639",
    "end": "842199"
  },
  {
    "text": "mean majorly should support the xtp here",
    "start": "842199",
    "end": "844120"
  },
  {
    "text": "except for few uh minor functions and",
    "start": "844120",
    "end": "847079"
  },
  {
    "text": "one one other thing like in in Linux uh",
    "start": "847079",
    "end": "850079"
  },
  {
    "text": "the difference between Linux and windows",
    "start": "850079",
    "end": "851320"
  },
  {
    "text": "in Linux we use Network namespace to",
    "start": "851320",
    "end": "853040"
  },
  {
    "text": "isolate the network namespace but in",
    "start": "853040",
    "end": "854360"
  },
  {
    "text": "Windows it's called as Network",
    "start": "854360",
    "end": "855759"
  },
  {
    "text": "compartment and uh uh each Network",
    "start": "855759",
    "end": "858560"
  },
  {
    "text": "compartment is isolated and so we we",
    "start": "858560",
    "end": "861800"
  },
  {
    "text": "call it as like Nam space ID in Linux in",
    "start": "861800",
    "end": "864160"
  },
  {
    "text": "Windows it's referred as compartment ID",
    "start": "864160",
    "end": "866480"
  },
  {
    "text": "and uh this BPF sock address structure",
    "start": "866480",
    "end": "869440"
  },
  {
    "text": "has this compartment IDE as a field but",
    "start": "869440",
    "end": "871639"
  },
  {
    "text": "in Linux you need to use a helper API um",
    "start": "871639",
    "end": "875000"
  },
  {
    "text": "some helper API to get the network name",
    "start": "875000",
    "end": "876839"
  },
  {
    "text": "space uh which is which can be directly",
    "start": "876839",
    "end": "878800"
  },
  {
    "text": "referred in Windows so you don't need a",
    "start": "878800",
    "end": "880360"
  },
  {
    "text": "help and a in the Linux here in the",
    "start": "880360",
    "end": "882160"
  },
  {
    "text": "windows here and uh there's a difference",
    "start": "882160",
    "end": "884759"
  },
  {
    "text": "in map type as well um per fent array is",
    "start": "884759",
    "end": "887639"
  },
  {
    "text": "something like uh used on in Linux it's",
    "start": "887639",
    "end": "890279"
  },
  {
    "text": "not supported windows and for Windows",
    "start": "890279",
    "end": "893120"
  },
  {
    "text": "instead uses something like BPF um map",
    "start": "893120",
    "end": "896720"
  },
  {
    "text": "type ring buff so whever the per is",
    "start": "896720",
    "end": "899519"
  },
  {
    "text": "defined um Windows have this map type",
    "start": "899519",
    "end": "901600"
  },
  {
    "text": "ring buff structure",
    "start": "901600",
    "end": "904399"
  },
  {
    "text": "defined so bringing C agent to Windows",
    "start": "904560",
    "end": "907639"
  },
  {
    "text": "so so um so we are extending the goang",
    "start": "907639",
    "end": "911440"
  },
  {
    "text": "support on Windows today um Windows has",
    "start": "911440",
    "end": "914000"
  },
  {
    "text": "lot of debugging tool support and we",
    "start": "914000",
    "end": "916160"
  },
  {
    "text": "wanted to integrate this debugging tool",
    "start": "916160",
    "end": "917839"
  },
  {
    "text": "support to goang as well we wanted to",
    "start": "917839",
    "end": "920040"
  },
  {
    "text": "extend that to the goang and then",
    "start": "920040",
    "end": "921519"
  },
  {
    "text": "integrate with the goang windows so we",
    "start": "921519",
    "end": "923279"
  },
  {
    "text": "are actively working on extending the",
    "start": "923279",
    "end": "924920"
  },
  {
    "text": "Goan support on windows so that to",
    "start": "924920",
    "end": "926600"
  },
  {
    "text": "support U this debugging apas and also",
    "start": "926600",
    "end": "928800"
  },
  {
    "text": "to support all libraries which support",
    "start": "928800",
    "end": "931040"
  },
  {
    "text": "in Linux today and",
    "start": "931040",
    "end": "933680"
  },
  {
    "text": "uh other major other major differen is C",
    "start": "933680",
    "end": "936440"
  },
  {
    "text": "agent is tily coupled with Linux APS",
    "start": "936440",
    "end": "938759"
  },
  {
    "text": "today and um um there are a lot of um um",
    "start": "938759",
    "end": "942880"
  },
  {
    "text": "Linux libraries imported directly for",
    "start": "942880",
    "end": "945160"
  },
  {
    "text": "example um netlink is used is used only",
    "start": "945160",
    "end": "947920"
  },
  {
    "text": "in Linux and the equivalent for net",
    "start": "947920",
    "end": "950000"
  },
  {
    "text": "links in Windows is IP helper API and uh",
    "start": "950000",
    "end": "953680"
  },
  {
    "text": "so it's tightly coupled so there's a",
    "start": "953680",
    "end": "956120"
  },
  {
    "text": "plan to build an abstraction layer so",
    "start": "956120",
    "end": "958519"
  },
  {
    "text": "that the CM agent can be like platform",
    "start": "958519",
    "end": "961199"
  },
  {
    "text": "independent and can run on both Linux",
    "start": "961199",
    "end": "962920"
  },
  {
    "text": "and windows so as a start for it we have",
    "start": "962920",
    "end": "965480"
  },
  {
    "text": "a cfp um uh to um raise I mean we are in",
    "start": "965480",
    "end": "970199"
  },
  {
    "text": "the early stage here we raise a cfp to",
    "start": "970199",
    "end": "972440"
  },
  {
    "text": "um support cross plat build support for",
    "start": "972440",
    "end": "974519"
  },
  {
    "text": "Linux and",
    "start": "974519",
    "end": "976000"
  },
  {
    "text": "windows yeah with that I will like",
    "start": "976000",
    "end": "978480"
  },
  {
    "text": "chandan to talk about the CM Windows",
    "start": "978480",
    "end": "981519"
  },
  {
    "text": "timelines thanks some money so as a",
    "start": "981519",
    "end": "984240"
  },
  {
    "text": "product leer you can see that I I love",
    "start": "984240",
    "end": "985839"
  },
  {
    "text": "timelines right uh so we started with",
    "start": "985839",
    "end": "988759"
  },
  {
    "text": "those Journey similarly with uh we",
    "start": "988759",
    "end": "990959"
  },
  {
    "text": "started in 2022 we started to port with",
    "start": "990959",
    "end": "993639"
  },
  {
    "text": "seeing that hey how can we transform",
    "start": "993639",
    "end": "995440"
  },
  {
    "text": "Windows Network into this and then we",
    "start": "995440",
    "end": "997319"
  },
  {
    "text": "start to demo with L4 uh p l for lb",
    "start": "997319",
    "end": "1002639"
  },
  {
    "text": "stuff and we have been continuously in",
    "start": "1002639",
    "end": "1005319"
  },
  {
    "text": "this journey how we going to make not",
    "start": "1005319",
    "end": "1008120"
  },
  {
    "text": "just the lb but part to part",
    "start": "1008120",
    "end": "1010440"
  },
  {
    "text": "connectivity in basic scenarios",
    "start": "1010440",
    "end": "1013319"
  },
  {
    "text": "seamlessly working in vendors and we're",
    "start": "1013319",
    "end": "1015240"
  },
  {
    "text": "targeting in July and we wanted to bring",
    "start": "1015240",
    "end": "1017920"
  },
  {
    "text": "the network policy support but also by",
    "start": "1017920",
    "end": "1020000"
  },
  {
    "text": "end of this year so hopefully we have a",
    "start": "1020000",
    "end": "1021639"
  },
  {
    "text": "whole package of the basic functionality",
    "start": "1021639",
    "end": "1023959"
  },
  {
    "text": "working end to end with obility and",
    "start": "1023959",
    "end": "1025678"
  },
  {
    "text": "security and fun uh east west traffic in",
    "start": "1025679",
    "end": "1029319"
  },
  {
    "text": "uh and load balanc of traffic uh coming",
    "start": "1029319",
    "end": "1031918"
  },
  {
    "text": "together and see them",
    "start": "1031919",
    "end": "1033520"
  },
  {
    "text": "windows and as the was saying like the",
    "start": "1033520",
    "end": "1036120"
  },
  {
    "text": "goal for us is to evolve this stack with",
    "start": "1036120",
    "end": "1039760"
  },
  {
    "text": "Community with other open source project",
    "start": "1039760",
    "end": "1042000"
  },
  {
    "text": "even if so we are with that principle",
    "start": "1042000",
    "end": "1045480"
  },
  {
    "text": "embed right we are using all of the",
    "start": "1045480",
    "end": "1047760"
  },
  {
    "text": "tools we have up label",
    "start": "1047760",
    "end": "1049640"
  },
  {
    "text": "be the verifier Prevail be the ubf uh be",
    "start": "1049640",
    "end": "1053720"
  },
  {
    "text": "the xtp of Windows all of these and of",
    "start": "1053720",
    "end": "1056240"
  },
  {
    "text": "course",
    "start": "1056240",
    "end": "1057080"
  },
  {
    "text": " so all of these references are",
    "start": "1057080",
    "end": "1059320"
  },
  {
    "text": "equally important when we are leveraging",
    "start": "1059320",
    "end": "1061799"
  },
  {
    "text": "this I think I want to say big thank you",
    "start": "1061799",
    "end": "1064960"
  },
  {
    "text": "for for all of my friends and colleague",
    "start": "1064960",
    "end": "1067360"
  },
  {
    "text": "in the windows Os or which couldn't join",
    "start": "1067360",
    "end": "1070600"
  },
  {
    "text": "in here today but they have been the",
    "start": "1070600",
    "end": "1073440"
  },
  {
    "text": "main pillar who are driving this forward",
    "start": "1073440",
    "end": "1075520"
  },
  {
    "text": "and of course the wonderful similar",
    "start": "1075520",
    "end": "1076720"
  },
  {
    "text": "Community the wonderful team we have",
    "start": "1076720",
    "end": "1078880"
  },
  {
    "text": "isovalent in making sure that we can",
    "start": "1078880",
    "end": "1081640"
  },
  {
    "text": "take this together to bring the power of",
    "start": "1081640",
    "end": "1084159"
  },
  {
    "text": "celium Beyond Linux to Windows so we can",
    "start": "1084159",
    "end": "1087000"
  },
  {
    "text": "have a seamless experience of people who",
    "start": "1087000",
    "end": "1088559"
  },
  {
    "text": "are",
    "start": "1088559",
    "end": "1089200"
  },
  {
    "text": "running the same thing in Linux also to",
    "start": "1089200",
    "end": "1092039"
  },
  {
    "text": "Windows containers with that I say thank",
    "start": "1092039",
    "end": "1095360"
  },
  {
    "text": "[Applause]",
    "start": "1095360",
    "end": "1101630"
  },
  {
    "text": "you any",
    "start": "1103679",
    "end": "1106960"
  },
  {
    "text": "questions",
    "start": "1107760",
    "end": "1110760"
  },
  {
    "text": "any",
    "start": "1111080",
    "end": "1113360"
  },
  {
    "text": "questions thanks for the talk um did you",
    "start": "1124120",
    "end": "1127000"
  },
  {
    "text": "add any opportunity to compare the",
    "start": "1127000",
    "end": "1128679"
  },
  {
    "text": "performance between the Linux and",
    "start": "1128679",
    "end": "1130760"
  },
  {
    "text": "windows",
    "start": "1130760",
    "end": "1132440"
  },
  {
    "text": "implementation we do actually we",
    "start": "1132440",
    "end": "1135080"
  },
  {
    "text": "are part of the goal if if you look at",
    "start": "1135080",
    "end": "1137600"
  },
  {
    "text": "this slide in the beginning when we",
    "start": "1137600",
    "end": "1139159"
  },
  {
    "text": "saying we have a v switch and vfp which",
    "start": "1139159",
    "end": "1142080"
  },
  {
    "text": "was very heavy for Windows containers or",
    "start": "1142080",
    "end": "1144799"
  },
  {
    "text": "containers in joural right one of the",
    "start": "1144799",
    "end": "1146960"
  },
  {
    "text": "motivation to move to the cppf is that",
    "start": "1146960",
    "end": "1149159"
  },
  {
    "text": "we can beat the path length we have in",
    "start": "1149159",
    "end": "1150960"
  },
  {
    "text": "the control drivers and the agility we",
    "start": "1150960",
    "end": "1152520"
  },
  {
    "text": "can get with the lightweight things so",
    "start": "1152520",
    "end": "1154679"
  },
  {
    "text": "so I think our goal is to have a same",
    "start": "1154679",
    "end": "1156840"
  },
  {
    "text": "parity in and windows performance for",
    "start": "1156840",
    "end": "1159320"
  },
  {
    "text": "data part as we have in",
    "start": "1159320",
    "end": "1161080"
  },
  {
    "text": "lnux so yes we are we we have I could",
    "start": "1161080",
    "end": "1164200"
  },
  {
    "text": "share offline the tools and comparison",
    "start": "1164200",
    "end": "1165640"
  },
  {
    "text": "we are doing and to share that",
    "start": "1165640",
    "end": "1170720"
  },
  {
    "text": "hi I I had a question about what kind of",
    "start": "1176320",
    "end": "1179360"
  },
  {
    "text": "BPF programs can we write in the future",
    "start": "1179360",
    "end": "1182159"
  },
  {
    "text": "with evf on Windows Beyond um for",
    "start": "1182159",
    "end": "1186640"
  },
  {
    "text": "example I'm thinking here can we do a",
    "start": "1186640",
    "end": "1189320"
  },
  {
    "text": "capo and how will we find the symbols",
    "start": "1189320",
    "end": "1192360"
  },
  {
    "text": "for the capoe or where the function is",
    "start": "1192360",
    "end": "1194960"
  },
  {
    "text": "what the arguments are given the windows",
    "start": "1194960",
    "end": "1197080"
  },
  {
    "text": "kernel is not",
    "start": "1197080",
    "end": "1199919"
  },
  {
    "text": "I",
    "start": "1199919",
    "end": "1200640"
  },
  {
    "text": "can so K is currently not supported in",
    "start": "1200640",
    "end": "1203919"
  },
  {
    "text": "Windows um we are actively uh engaging",
    "start": "1203919",
    "end": "1206960"
  },
  {
    "text": "there to bring the kro support to",
    "start": "1206960",
    "end": "1208760"
  },
  {
    "text": "Windows but right now we support all the",
    "start": "1208760",
    "end": "1211880"
  },
  {
    "text": "network packet hooks like TC xtp and",
    "start": "1211880",
    "end": "1214760"
  },
  {
    "text": "stock address and couple of other ebpf",
    "start": "1214760",
    "end": "1217080"
  },
  {
    "text": "programs but kpr we are still discussing",
    "start": "1217080",
    "end": "1219080"
  },
  {
    "text": "and you would see that in future yeah",
    "start": "1219080",
    "end": "1221880"
  },
  {
    "text": "but feel free to open any G up issues in",
    "start": "1221880",
    "end": "1223720"
  },
  {
    "text": "E for Windows it's open source if you",
    "start": "1223720",
    "end": "1225559"
  },
  {
    "text": "have any questions or any future needs",
    "start": "1225559",
    "end": "1227000"
  },
  {
    "text": "to be addressed in Windows we can take",
    "start": "1227000",
    "end": "1228360"
  },
  {
    "text": "it up there and also we'll look for more",
    "start": "1228360",
    "end": "1230360"
  },
  {
    "text": "open source contribution in any for",
    "start": "1230360",
    "end": "1233919"
  },
  {
    "text": "Windows okay great thank you for your",
    "start": "1241080",
    "end": "1243159"
  },
  {
    "text": "talk thank you",
    "start": "1243159",
    "end": "1245840"
  },
  {
    "text": "everyone",
    "start": "1245840",
    "end": "1248840"
  }
]