[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": "so welcome to this deep dive session well first of all we'll present",
    "start": "30",
    "end": "5160"
  },
  {
    "text": "ourselves so yeah Iago I'm the tech lead at kinfolk and",
    "start": "5160",
    "end": "12809"
  },
  {
    "text": "this is album you know I'm Aldo CG what's involved yeah so",
    "start": "12809",
    "end": "17810"
  },
  {
    "text": "we've worked a lot in rocket I mean on rocket with Korres with the chorus team",
    "start": "17810",
    "end": "23330"
  },
  {
    "text": "when it started and yeah so yeah by the",
    "start": "23330",
    "end": "29550"
  },
  {
    "text": "way we are the cofounders of kinfolk along with Chris who's sitting there and",
    "start": "29550",
    "end": "36050"
  },
  {
    "text": "yeah as I said we work a lot on rocket so yeah we were asked to do this deep",
    "start": "36050",
    "end": "42989"
  },
  {
    "text": "dive session explaining some yeah technical details about rocket and",
    "start": "42989",
    "end": "48899"
  },
  {
    "text": "rocket Linda source these these are give hub handles and Twitter and I wasn't",
    "start": "48899",
    "end": "54870"
  },
  {
    "text": "really sure what this session should be because in the description it should be some kind of technical discussion with",
    "start": "54870",
    "end": "60870"
  },
  {
    "text": "the audience and it should involve yeah people experience with the project but",
    "start": "60870",
    "end": "66540"
  },
  {
    "text": "what I came up with on this talk is yeah I just want to discuss some interesting topics on rocket and containers and I",
    "start": "66540",
    "end": "74159"
  },
  {
    "text": "drew some diagrams and yeah we can just talk about those and maybe do some demos",
    "start": "74159",
    "end": "79470"
  },
  {
    "text": "so people can understand how the things work and yeah so that's basically what's gonna happen in this talk so first",
    "start": "79470",
    "end": "88290"
  },
  {
    "text": "you're gonna do some questions any of you where are the intro this morning I",
    "start": "88290",
    "end": "93540"
  },
  {
    "text": "woke at intro okay not very not very",
    "start": "93540",
    "end": "98970"
  },
  {
    "text": "overlapping good yeah so how many of you tried rocket ok how many of you like it",
    "start": "98970",
    "end": "110030"
  },
  {
    "text": "okay yeah so the first topic that I selected is C groups so yeah maybe this",
    "start": "110030",
    "end": "119759"
  },
  {
    "text": "is too small does this work actually No",
    "start": "119759",
    "end": "125390"
  },
  {
    "start": "120000",
    "end": "518000"
  },
  {
    "text": "anyway yeah so this is the C group tree",
    "start": "125510",
    "end": "132440"
  },
  {
    "text": "for a rocket container and you can see some things are in green and something",
    "start": "132440",
    "end": "139280"
  },
  {
    "text": "starting red so for example on the first diagram that's the first two are in green and the other sardine breath if somebody is colorblind or something yeah",
    "start": "139280",
    "end": "148210"
  },
  {
    "text": "so in rocket what we do is we mount the C group tree read-only except the parts",
    "start": "148210",
    "end": "155360"
  },
  {
    "text": "that actually are needed for the container to set up it hit their own",
    "start": "155360",
    "end": "160460"
  },
  {
    "text": "limits so rocket there's this concept of Sage's state zero is rocket I mean it's the one",
    "start": "160460",
    "end": "168800"
  },
  {
    "text": "that fetches the image and renders it to disk and stage one actually executes the big container and that's usually system",
    "start": "168800",
    "end": "175010"
  },
  {
    "text": "D so what we wanted with rocket is to let system D do the C group handling we didn't want to write the see groups",
    "start": "175010",
    "end": "181420"
  },
  {
    "text": "ourselves so that's why we wanted to give the container some read/write part",
    "start": "181420",
    "end": "187010"
  },
  {
    "text": "of the C group tree so before 123 as you",
    "start": "187010",
    "end": "193640"
  },
  {
    "text": "see in the part below there were more things that were read read-only and this",
    "start": "193640",
    "end": "199880"
  },
  {
    "text": "is actually what we implemented so I found out like the other day that this",
    "start": "199880",
    "end": "204980"
  },
  {
    "text": "has been changed and now it's more things that I read right and that was because they were experimenting with",
    "start": "204980",
    "end": "211670"
  },
  {
    "text": "using run see on stage two and run C requires more I mean more access to the",
    "start": "211670",
    "end": "217850"
  },
  {
    "text": "system to set the limits that yeah that are needed anyway so what we do here is",
    "start": "217850",
    "end": "225650"
  },
  {
    "text": "we first have everything retried because by default system VN spawn which is the",
    "start": "225650",
    "end": "233000"
  },
  {
    "text": "engine that starts containers in rocket doesn't do anything special there it sets up everything sorry read-only",
    "start": "233000",
    "end": "241160"
  },
  {
    "text": "that's what that's what I wanted to say it sets up everything read-only so we",
    "start": "241160",
    "end": "247430"
  },
  {
    "text": "this didn't work for us so what we did was we pre mount the C group tree before n spawn and then n",
    "start": "247430",
    "end": "254690"
  },
  {
    "text": "spawn sees that is already mounted and it just continues so in do that we mount some special knobs",
    "start": "254690",
    "end": "263840"
  },
  {
    "text": "read/write and then we mount the parents read-only and this worked fine and we",
    "start": "263840",
    "end": "272900"
  },
  {
    "text": "can actually maybe see it in action so I can start a container yeah that's our",
    "start": "272900",
    "end": "281240"
  },
  {
    "text": "just a simple container for now it's just a CD and yeah there it is",
    "start": "281240",
    "end": "288740"
  },
  {
    "text": "yeah actually let's set some limit maybe",
    "start": "288740",
    "end": "294050"
  },
  {
    "text": "100 megabytes should be enough and CPU I don't know 500 million cores okay so now",
    "start": "294050",
    "end": "301310"
  },
  {
    "text": "the container is running and those limits are applied so let's check if they are actually applied so this is the",
    "start": "301310",
    "end": "312409"
  },
  {
    "text": "tree of processes and this is my container so you can see that system is",
    "start": "312409",
    "end": "319219"
  },
  {
    "text": "running inside and this is just an eternally although it's a bit wrapped",
    "start": "319219",
    "end": "324830"
  },
  {
    "text": "and this is the HDD process so if we go to the HDD process yeah you cannot do",
    "start": "324830",
    "end": "335149"
  },
  {
    "text": "that but let's be rude yes security okay",
    "start": "335149",
    "end": "342020"
  },
  {
    "text": "so this will access the root filesystem as EDD views it and we can see here this",
    "start": "342020",
    "end": "352219"
  },
  {
    "text": "is FSC group and memory and all the",
    "start": "352219",
    "end": "358399"
  },
  {
    "text": "containers in racket are in the machine slides and let's specify otherwise or started by a system the unit and this is",
    "start": "358399",
    "end": "364939"
  },
  {
    "text": "the scope so we go in here and we can go",
    "start": "364939",
    "end": "371360"
  },
  {
    "text": "to the system slides and the HDD service so this is the HDD service but actually inside the container because as I said",
    "start": "371360",
    "end": "377449"
  },
  {
    "text": "system D is running inside the container too so we have some limit which is close",
    "start": "377449",
    "end": "383689"
  },
  {
    "text": "to 100 megabytes so this should work so",
    "start": "383689",
    "end": "389169"
  },
  {
    "text": "one thing that we can check about those mounds is if we go back to",
    "start": "389169",
    "end": "397189"
  },
  {
    "text": "yeah Prague was it this one if we check",
    "start": "397340",
    "end": "405599"
  },
  {
    "text": "the mount info file in the proc file system this shows all the mounts that are visible here and yeah yeah all right",
    "start": "405599",
    "end": "418949"
  },
  {
    "text": "so actually we don't expose directly sisyphus to the containers so we would",
    "start": "418949",
    "end": "424620"
  },
  {
    "text": "have to go to the PID of system D inside the container to see those because we create a new mount namespace for each",
    "start": "424620",
    "end": "430919"
  },
  {
    "text": "app - so we try and we can try to figure out which PID is this we go there and we",
    "start": "430919",
    "end": "440969"
  },
  {
    "text": "check mount info again and here we can",
    "start": "440969",
    "end": "448710"
  },
  {
    "text": "see some C groups ok let's see ok so",
    "start": "448710",
    "end": "456900"
  },
  {
    "text": "this C group for example this is the freezer C group and it's read-only as you can see here but just below that you",
    "start": "456900",
    "end": "466229"
  },
  {
    "text": "can see that this sub path it's actually mount read/write so yeah yet the",
    "start": "466229",
    "end": "475529"
  },
  {
    "text": "interesting thing here is that we pre mount the sea groups in rocket and then since indian spawn respect those mounts",
    "start": "475529",
    "end": "481800"
  },
  {
    "text": "and then things work as expected yeah i guess that's that's okay for c",
    "start": "481800",
    "end": "487110"
  },
  {
    "text": "groups how many of you are familiar with looking in 2 months on c groups in that way not many people maybe 20,000 ok yes",
    "start": "487110",
    "end": "499229"
  },
  {
    "text": "sorry if I'm going too fast or if there's something you don't understand please ask because yeah maybe it's too",
    "start": "499229",
    "end": "504839"
  },
  {
    "text": "too much for for this but yeah the main point is that we try to restrict what we",
    "start": "504839",
    "end": "513750"
  },
  {
    "text": "mount as as much as possible yeah",
    "start": "513750",
    "end": "519510"
  },
  {
    "start": "518000",
    "end": "660000"
  },
  {
    "text": "another maybe simpler topic maybe this should be the first issue up in the first is how",
    "start": "519510",
    "end": "525120"
  },
  {
    "text": "runs OCI images so rocket doesn't have LCI support OCI native support so what",
    "start": "525120",
    "end": "535470"
  },
  {
    "text": "we do is we use this component called dr. to a CI that's used as a library to",
    "start": "535470",
    "end": "541499"
  },
  {
    "text": "actually fetch the docker image convert it to a CI and then pass it to rocket so this is just a diagram that shows how",
    "start": "541499",
    "end": "548370"
  },
  {
    "text": "this works so first a user will just run rocket run docker and then some image rocket",
    "start": "548370",
    "end": "557040"
  },
  {
    "text": "actually will actually call they convert remote repo function in the doctor to a",
    "start": "557040",
    "end": "562319"
  },
  {
    "text": "CI library and that has implemented OCIE client our client that goes to the",
    "start": "562319",
    "end": "571350"
  },
  {
    "text": "registry fetches all the layers then squashes all the layers together in one and then saves that to attempt directory",
    "start": "571350",
    "end": "580160"
  },
  {
    "text": "which will and then passes a path down to rocket so yeah this is how all CI",
    "start": "580160",
    "end": "587970"
  },
  {
    "text": "images work and you can actually run o CI in a standalone mode so we can try",
    "start": "587970",
    "end": "595160"
  },
  {
    "text": "sorry yeah to get the busybox image and",
    "start": "595160",
    "end": "602279"
  },
  {
    "text": "if network is okay it should download this a CI and now you can use I don't",
    "start": "602279",
    "end": "609839"
  },
  {
    "text": "know if I still have this yeah so what we do is we convert all the all the",
    "start": "609839",
    "end": "616980"
  },
  {
    "text": "values in the docker image to the equivalent to a CI in a CIS yeah so you",
    "start": "616980",
    "end": "625019"
  },
  {
    "text": "can see here I mean this is a pretty simple image it has maybe a special path and it executes SH and we also do",
    "start": "625019",
    "end": "633329"
  },
  {
    "text": "annotation so you know what sha of docker was converted so you can retrace",
    "start": "633329",
    "end": "640410"
  },
  {
    "text": "your back your steps to the actual image",
    "start": "640410",
    "end": "645350"
  },
  {
    "text": "yeah yeah",
    "start": "645980",
    "end": "650420"
  },
  {
    "text": "okay so in the beginning there was darker and there was no specification of",
    "start": "656820",
    "end": "665529"
  },
  {
    "start": "660000",
    "end": "1020000"
  },
  {
    "text": "how images should be so when Korres",
    "start": "665529",
    "end": "672010"
  },
  {
    "text": "created rocket they decided to make an",
    "start": "672010",
    "end": "677560"
  },
  {
    "text": "effort of standardizing this format that they will use for rocket so they started writing a spec and then",
    "start": "677560",
    "end": "685600"
  },
  {
    "text": "rocket would be the first implementation of that spec and yeah they tried to learn by from Dockers mistakes so they",
    "start": "685600",
    "end": "694990"
  },
  {
    "text": "well or what they perceive as mistakes so they they for example implemented a",
    "start": "694990",
    "end": "702339"
  },
  {
    "text": "distributed discovery mechanism so instead of having a central registry you just use DNS to actually query web page",
    "start": "702339",
    "end": "712600"
  },
  {
    "text": "on the Internet and then that webpage has some metadata that that leads to the actual image itself so things like that",
    "start": "712600",
    "end": "720250"
  },
  {
    "text": "so it's I would say completely different in I mean in the form it is I mean that",
    "start": "720250",
    "end": "730060"
  },
  {
    "text": "the data itself is basically the same right you need to know what binary you have to execute you need to know you",
    "start": "730060",
    "end": "736959"
  },
  {
    "text": "know what memory limits you have to place and all that stuff but it's totally different from docker we don't",
    "start": "736959",
    "end": "744520"
  },
  {
    "text": "have any concept of layers that are stacked on each other we have a dependency concept so you can",
    "start": "744520",
    "end": "749740"
  },
  {
    "text": "depend from different images so it's basically totally different but after",
    "start": "749740",
    "end": "757360"
  },
  {
    "text": "that docker said okay we should standardize this this format that we are using and and then they the OCI formats",
    "start": "757360",
    "end": "766170"
  },
  {
    "text": "appeared and they donated that to the community so the the thing is the OCI",
    "start": "766170",
    "end": "773380"
  },
  {
    "text": "format was basically Dockers format but just put in a text file so I think",
    "start": "773380",
    "end": "779470"
  },
  {
    "text": "that's a good thing because it's better to have a spec than to have to read the code and see how this works",
    "start": "779470",
    "end": "786160"
  },
  {
    "text": "but yeah I don't know it's still different ACI noci and yeah where was I",
    "start": "786160",
    "end": "794420"
  },
  {
    "text": "I don't know what what else was I was gonna say I don't know if I read to you a question actually yeah it's just a",
    "start": "794420",
    "end": "801619"
  },
  {
    "text": "some different format but in the end the goal is the same to specify how a",
    "start": "801619",
    "end": "807079"
  },
  {
    "text": "container should be run okay yeah so OCI",
    "start": "807079",
    "end": "822230"
  },
  {
    "text": "in a sense is a bit simpler because it just defines a tarball",
    "start": "822230",
    "end": "827529"
  },
  {
    "text": "which has a route of factory and a manifest and just a simple manifest J in",
    "start": "827529",
    "end": "833569"
  },
  {
    "text": "Jason so the idea was to make it content",
    "start": "833569",
    "end": "839389"
  },
  {
    "text": "addressable from the beginning so in darker for example the beginning there",
    "start": "839389",
    "end": "844579"
  },
  {
    "text": "was no content addressability and now they added that on top so you can refer",
    "start": "844579",
    "end": "850160"
  },
  {
    "text": "to an image by the hash but in any case with a CIS you just have that image and",
    "start": "850160",
    "end": "857839"
  },
  {
    "text": "that image can have a parent image and yeah that's how it works so in docker does this concept of",
    "start": "857839",
    "end": "867290"
  },
  {
    "text": "storage layer storage drivers and yeah",
    "start": "867290",
    "end": "873739"
  },
  {
    "text": "basically it will use a copy-on-write system to actually store the layers and",
    "start": "873739",
    "end": "879679"
  },
  {
    "text": "then you only start the difference from the yet that layer to the previous layer",
    "start": "879679",
    "end": "885850"
  },
  {
    "text": "yeah but I don't know if that explains much about why it shouldn't be I think",
    "start": "886149",
    "end": "892459"
  },
  {
    "text": "the sei image format or the hacia image format does not have much link with how",
    "start": "892459",
    "end": "897559"
  },
  {
    "text": "its taught on disk with a possible store",
    "start": "897559",
    "end": "903009"
  },
  {
    "text": "in Ostia well there is OCIO bundle specification or we started the",
    "start": "904239",
    "end": "912430"
  },
  {
    "text": "and there is the OCI image format which are different and it's converted on the fly by the one-time yeah the found part",
    "start": "912430",
    "end": "920950"
  },
  {
    "text": "of the specs yeah yeah Alban is doing",
    "start": "920950",
    "end": "934480"
  },
  {
    "text": "that so that's why he knows more about this yeah yeah",
    "start": "934480",
    "end": "940930"
  },
  {
    "text": "so and yeah oh sorry what was the other speaker yeah tell me any other question",
    "start": "940930",
    "end": "950050"
  },
  {
    "text": "or remark coming yeah so what we do is",
    "start": "950050",
    "end": "962710"
  },
  {
    "text": "we use overlay FS so yeah basically the image is the lower part of the overlay",
    "start": "962710",
    "end": "969640"
  },
  {
    "text": "FS and yeah so we decided to do overlay FS or just playing copying all the data",
    "start": "969640",
    "end": "977790"
  },
  {
    "text": "yeah",
    "start": "977790",
    "end": "980790"
  },
  {
    "text": "right",
    "start": "993060",
    "end": "996060"
  },
  {
    "text": "I will repeat a command to explain the",
    "start": "1002340",
    "end": "1007380"
  },
  {
    "text": "how its drawn this come with us if I summarized correctly yeah and the tree",
    "start": "1007380",
    "end": "1012870"
  },
  {
    "text": "story I guess so yes I said it was its",
    "start": "1012870",
    "end": "1018570"
  },
  {
    "text": "content-addressable so each image has a hash and it and things are stored with a",
    "start": "1018570",
    "end": "1023610"
  },
  {
    "start": "1020000",
    "end": "1160000"
  },
  {
    "text": "hatch so here is the directory where the images are stored and you can see sorry",
    "start": "1023610",
    "end": "1033829"
  },
  {
    "text": "yeah for example here there's an image",
    "start": "1035569",
    "end": "1040760"
  },
  {
    "text": "what is this actually",
    "start": "1043610",
    "end": "1047000"
  },
  {
    "text": "yes that this is one of the images and as I said it has a root of s rectory and",
    "start": "1053950",
    "end": "1060600"
  },
  {
    "text": "then it has a manifest so okay this is",
    "start": "1060600",
    "end": "1067270"
  },
  {
    "text": "an image right but I said that you could have dependencies so how does this work",
    "start": "1067270",
    "end": "1072400"
  },
  {
    "text": "because the dependency can overwrite some files from the parent so the way",
    "start": "1072400",
    "end": "1077500"
  },
  {
    "text": "this works is the image gets rendered on the file on the file system and in in",
    "start": "1077500",
    "end": "1087250"
  },
  {
    "text": "the order of you know the the parent first and then all the children and then",
    "start": "1087250",
    "end": "1093420"
  },
  {
    "text": "it gets rendered to this tree store",
    "start": "1093420",
    "end": "1099090"
  },
  {
    "text": "which I don't have permission to do enter and this actually this directory",
    "start": "1099090",
    "end": "1106090"
  },
  {
    "text": "actually has you know the final file system that the container will run from",
    "start": "1106090",
    "end": "1113400"
  },
  {
    "text": "so all the files that are overwritten in the children will be overridden and",
    "start": "1113400",
    "end": "1119230"
  },
  {
    "text": "there's some yes semi complex rules too on how to do that because you also have",
    "start": "1119230",
    "end": "1125220"
  },
  {
    "text": "you know with dependencies you can have multiple inheritance so there's some",
    "start": "1125220",
    "end": "1130630"
  },
  {
    "text": "order that you have to follow to actually render and that's well specified too but yeah I think Simone",
    "start": "1130630",
    "end": "1138850"
  },
  {
    "text": "did a lot of interesting work with this dependency concept which we didn't",
    "start": "1138850",
    "end": "1144220"
  },
  {
    "text": "expect so if you wanna come and explain something",
    "start": "1144220",
    "end": "1149760"
  },
  {
    "text": "yes that's among what I'm Simon from working at the Recker",
    "start": "1155600",
    "end": "1161710"
  },
  {
    "text": "caring company and we've been using rockheads it's 2015 February 20 I think",
    "start": "1161710",
    "end": "1170050"
  },
  {
    "text": "it's in production since November 2015",
    "start": "1170050",
    "end": "1176770"
  },
  {
    "text": "basically it's the only container when time we use and we run everything in containers and our approach was to use",
    "start": "1176770",
    "end": "1186350"
  },
  {
    "text": "this concept of dependency to to build all the different images so the idea is",
    "start": "1186350",
    "end": "1196220"
  },
  {
    "text": "like when you want to build a new container image which say well we depend",
    "start": "1196220",
    "end": "1202700"
  },
  {
    "text": "on the image given in this version and you can actually make evolve the",
    "start": "1202700",
    "end": "1212240"
  },
  {
    "text": "dependency independently from what's above the dependency like if you have",
    "start": "1212240",
    "end": "1217940"
  },
  {
    "text": "your code in some image and I don't know the the runtime in another image can",
    "start": "1217940",
    "end": "1223550"
  },
  {
    "text": "update the runtime without rebuilding the the part of the image where your",
    "start": "1223550",
    "end": "1229220"
  },
  {
    "text": "code is for instance I think that's",
    "start": "1229220",
    "end": "1236710"
  },
  {
    "text": "that's a different approach the the good things like as as you explained that",
    "start": "1236710",
    "end": "1243130"
  },
  {
    "text": "everything is rendered during the runtime and you don't have multiple",
    "start": "1243130",
    "end": "1248540"
  },
  {
    "text": "overlays that you have to go through when accessing a file in a running",
    "start": "1248540",
    "end": "1255710"
  },
  {
    "text": "container so you everything is rendered or the image at downloading extracted",
    "start": "1255710",
    "end": "1262040"
  },
  {
    "text": "and and squashing the same in the same directory and and then you just add this",
    "start": "1262040",
    "end": "1270350"
  },
  {
    "text": "overlay with the copy-on-write of this specific container and that's it we also",
    "start": "1270350",
    "end": "1278210"
  },
  {
    "text": "it also uses the same rendered container",
    "start": "1278210",
    "end": "1283700"
  },
  {
    "text": "if if you run several times the same container of the same on the same machine so it's also",
    "start": "1283700",
    "end": "1289240"
  },
  {
    "text": "depreciating things thank you yep",
    "start": "1289240",
    "end": "1300910"
  },
  {
    "text": "so yeah maybe I can go to the next one yeah I don't know actually when is this",
    "start": "1300910",
    "end": "1306920"
  },
  {
    "text": "supposed to end okay so we have like 14",
    "start": "1306920",
    "end": "1312800"
  },
  {
    "start": "1310000",
    "end": "1350000"
  },
  {
    "text": "minutes yeah another thing I wanted to talk about is all the flags of rocket or",
    "start": "1312800",
    "end": "1321500"
  },
  {
    "text": "almost all the flags of rocket have a translation to assist in the unit file",
    "start": "1321500",
    "end": "1326540"
  },
  {
    "text": "directives so yeah as a set system is running inside a container so we create",
    "start": "1326540",
    "end": "1333170"
  },
  {
    "text": "a service file per up in the pot and that service file has all kinds of",
    "start": "1333170",
    "end": "1339260"
  },
  {
    "text": "directories usually related to security or the environment that the app is running on so I can show",
    "start": "1339260",
    "end": "1347030"
  },
  {
    "text": "this maybe on this container even but we",
    "start": "1347030",
    "end": "1353900"
  },
  {
    "start": "1350000",
    "end": "1445000"
  },
  {
    "text": "can make another bit more interesting run of the container yep",
    "start": "1353900",
    "end": "1361780"
  },
  {
    "text": "so yep here did I'm just mounting a",
    "start": "1361780",
    "end": "1367610"
  },
  {
    "text": "device inside a container so it shows how yeah how access to the device is",
    "start": "1367610",
    "end": "1375920"
  },
  {
    "text": "restricted so yeah def mem is kind of a dangerous device because it has access",
    "start": "1375920",
    "end": "1383180"
  },
  {
    "text": "to all the memory of the system but if",
    "start": "1383180",
    "end": "1388400"
  },
  {
    "text": "you really want to mount it you can you just do a volume yeah it's a volume of",
    "start": "1388400",
    "end": "1394880"
  },
  {
    "text": "kind host and you mount it in this target slash man and yeah things will",
    "start": "1394880",
    "end": "1401660"
  },
  {
    "text": "run hopefully yeah and now I wanna go to",
    "start": "1401660",
    "end": "1406940"
  },
  {
    "text": "the service file definition to show you all these directories that I was talking",
    "start": "1406940",
    "end": "1412220"
  },
  {
    "text": "about before so yeah that's fine again the PID of the",
    "start": "1412220",
    "end": "1420260"
  },
  {
    "text": "process so this is systemd inside the container",
    "start": "1420260",
    "end": "1425710"
  },
  {
    "text": "again and now we can go to its root filesystem and as any system this system",
    "start": "1425710",
    "end": "1432630"
  },
  {
    "text": "this has unit files in live system the system for example and yeah",
    "start": "1432630",
    "end": "1443890"
  },
  {
    "text": "we can find the HDD service which is here and we can just explore it so yeah",
    "start": "1443890",
    "end": "1452200"
  },
  {
    "start": "1445000",
    "end": "1850000"
  },
  {
    "text": "it has some dependencies because we have some services that run before to prepare the app to actually run and some some",
    "start": "1452200",
    "end": "1460570"
  },
  {
    "text": "services are run after to actually collect the exit status and write it in in the right place but here in the",
    "start": "1460570",
    "end": "1469000"
  },
  {
    "text": "service is the interesting part so yeah of course we need some kind of yeah",
    "start": "1469000",
    "end": "1476560"
  },
  {
    "text": "executable so this is the binary that's like execute execute it sorry and yeah",
    "start": "1476560",
    "end": "1487000"
  },
  {
    "text": "we also said the root directory and this is how we isolate apps inside the pot so",
    "start": "1487000",
    "end": "1493750"
  },
  {
    "text": "we said the root directory so the the root that the abscess is just whatever it's in its image and here we have for",
    "start": "1493750",
    "end": "1502750"
  },
  {
    "text": "example if the first security-related option which is the capabilities that we give to the container so we we just",
    "start": "1502750",
    "end": "1511330"
  },
  {
    "text": "chose the same capabilities that doctor gives by default and of course you can customize this with flags but these are",
    "start": "1511330",
    "end": "1519190"
  },
  {
    "text": "the capabilities that are set by default the next directive is a system called",
    "start": "1519190",
    "end": "1526720"
  },
  {
    "text": "filter so have you heard of sack comp yeah ok so this is the system the way to",
    "start": "1526720",
    "end": "1533860"
  },
  {
    "text": "express second rules so we have this really long list of accepted system",
    "start": "1533860",
    "end": "1542230"
  },
  {
    "text": "calls that you can that the container can call this is also adapted from",
    "start": "1542230",
    "end": "1547420"
  },
  {
    "text": "docker I think just result is this list by testing a lot of images very painfully",
    "start": "1547420",
    "end": "1553690"
  },
  {
    "text": "so yeah we have a lot of Cisco's I mean Linux has plenty of sales calls and",
    "start": "1553690",
    "end": "1558700"
  },
  {
    "text": "normal apps need really a lot yeah can",
    "start": "1558700",
    "end": "1565960"
  },
  {
    "text": "go on yeah there we go",
    "start": "1565960",
    "end": "1571080"
  },
  {
    "text": "yeah another thing we have is no new privileges so this is to avoid",
    "start": "1571080",
    "end": "1577290"
  },
  {
    "text": "applications to gain privileges via for example executing a set UID program and",
    "start": "1577290",
    "end": "1582330"
  },
  {
    "text": "this is set to false by default because it interferes with sacrum sorry",
    "start": "1582330",
    "end": "1588670"
  },
  {
    "text": "anybody has some water okay so all this",
    "start": "1588670",
    "end": "1601680"
  },
  {
    "text": "properties in system definer is converted from docker sorry forget to",
    "start": "1601680",
    "end": "1607510"
  },
  {
    "text": "system D that's because we use the system is stage one but if you use",
    "start": "1607510",
    "end": "1612900"
  },
  {
    "text": "different stage one that will may not be done with system D but with something else right",
    "start": "1612900",
    "end": "1619120"
  },
  {
    "text": "yeah good remark so this the fact that system is running inside the stage one is just some decision we made but the",
    "start": "1619120",
    "end": "1626650"
  },
  {
    "text": "interfaces in rocket allow you to do any kind of stage ones so you could run I don't know our unit maybe to supervise",
    "start": "1626650",
    "end": "1633730"
  },
  {
    "text": "your processes or something completely different or just execute the minor e directly like doctor does for containers",
    "start": "1633730",
    "end": "1642450"
  },
  {
    "text": "yeah so and and the next one we have some options to restrict the access to",
    "start": "1642450",
    "end": "1649270"
  },
  {
    "text": "dangerous files of the container so for example yeah so km is the kernel memory",
    "start": "1649270",
    "end": "1656890"
  },
  {
    "text": "memory so you don't want your containers to read the kernel memory or right that's even worse",
    "start": "1656890",
    "end": "1662890"
  },
  {
    "text": "or yeah there's other stuff that's only",
    "start": "1662890",
    "end": "1669850"
  },
  {
    "text": "read-only like this file",
    "start": "1669850",
    "end": "1673770"
  },
  {
    "text": "to implement that system D will do bind months from empty files or maybe /dev",
    "start": "1676160",
    "end": "1683840"
  },
  {
    "text": "start new into this path so that the container will not be able to access them yeah so we limit access to a lot of",
    "start": "1683840",
    "end": "1694130"
  },
  {
    "text": "a lot of files and yeah and this is this",
    "start": "1694130",
    "end": "1701840"
  },
  {
    "text": "is how we restrict devices so if you don't restrict anything in the container",
    "start": "1701840",
    "end": "1708820"
  },
  {
    "text": "if you run as root in a container you could create a device by running MK node",
    "start": "1708820",
    "end": "1713990"
  },
  {
    "text": "and if you know the major and minor number maybe you can create some dangerous devices so to restrict that",
    "start": "1713990",
    "end": "1720680"
  },
  {
    "text": "there's this device C group where you can you can say which devices are",
    "start": "1720680",
    "end": "1727270"
  },
  {
    "text": "allowed to be created in the C group or to be read from or to be written on so",
    "start": "1727270",
    "end": "1733880"
  },
  {
    "text": "in this case I if you remember when I started the container I mounted that mem",
    "start": "1733880",
    "end": "1741430"
  },
  {
    "text": "inside the container so this is what it gets translates to translated to so",
    "start": "1741430",
    "end": "1747470"
  },
  {
    "text": "device policy closed its assistant Lee directive that only you know makes only",
    "start": "1747470",
    "end": "1755930"
  },
  {
    "text": "allows not dangerous devices like death no or their Falls their false is always",
    "start": "1755930",
    "end": "1762650"
  },
  {
    "text": "going to return false so it's not really dangerous and there's a couple of those",
    "start": "1762650",
    "end": "1769100"
  },
  {
    "text": "more and then closed means that if you",
    "start": "1769100",
    "end": "1774290"
  },
  {
    "text": "allow explicitly some devices those will be yeah available so to do this actually",
    "start": "1774290",
    "end": "1783170"
  },
  {
    "text": "we need to do some trick because you remember the why we need to do this yeah",
    "start": "1783170",
    "end": "1793070"
  },
  {
    "text": "I think system D expects the expects devices to be in /dev and when you mount",
    "start": "1793070",
    "end": "1802280"
  },
  {
    "text": "a device inside the container it's not in under slash Davis under slash bar",
    "start": "1802280",
    "end": "1808250"
  },
  {
    "text": "live rocket they whatever that so we need to do this this",
    "start": "1808250",
    "end": "1813409"
  },
  {
    "text": "hack or something like that I think it was like that but yeah we just created",
    "start": "1813409",
    "end": "1820129"
  },
  {
    "text": "this this temporary device and then we mount it again where the container expects it yeah yeah so there's more",
    "start": "1820129",
    "end": "1829700"
  },
  {
    "text": "options that we will have if we add added more when starting the container",
    "start": "1829700",
    "end": "1836659"
  },
  {
    "text": "but that's basically the idea and yet you can just start your container and do this trick I do of going to the PID",
    "start": "1836659",
    "end": "1844600"
  },
  {
    "text": "slash root and then explore the filesystem and and figure out how we do",
    "start": "1844600",
    "end": "1850070"
  },
  {
    "start": "1850000",
    "end": "2143000"
  },
  {
    "text": "things so I have here a list of flags so",
    "start": "1850070",
    "end": "1855889"
  },
  {
    "text": "we have CPU CPU shares yeah except my",
    "start": "1855889",
    "end": "1860929"
  },
  {
    "text": "Murray limits yeah this weird thing I don't really know what it is",
    "start": "1860929",
    "end": "1867490"
  },
  {
    "text": "seccomp we can make the root FS read-only if you want containers that",
    "start": "1867490",
    "end": "1872720"
  },
  {
    "text": "cannot be changed and this has a translation to system v2 rabid users if",
    "start": "1872720",
    "end": "1878929"
  },
  {
    "text": "you want to use user namespaces this is actually an option to assistant near spawn not to not assist me and yeah",
    "start": "1878929",
    "end": "1887299"
  },
  {
    "text": "that stuff yeah I don't know if I have time to explain as you notify and it's",
    "start": "1887299",
    "end": "1893990"
  },
  {
    "text": "kind of hard to explain but I can show you just a demo so as they notify as you",
    "start": "1893990",
    "end": "1901429"
  },
  {
    "text": "know device use case is to signal the readiness of a container so if you want",
    "start": "1901429",
    "end": "1909019"
  },
  {
    "text": "to have like two service files and that one is dependent on the other and you have to you want to wait until",
    "start": "1909019",
    "end": "1915370"
  },
  {
    "text": "the first one is ready to start the second one you cannot just use run",
    "start": "1915370",
    "end": "1923000"
  },
  {
    "text": "rocket directly in the system service because when rocket will execute correctly the system the service will be",
    "start": "1923000",
    "end": "1929480"
  },
  {
    "text": "marked as active and then your second container will start and but it won't be ready yet the first one so this is a",
    "start": "1929480",
    "end": "1936740"
  },
  {
    "text": "mechanism to mark the container is ready whenever you want instead of whenever",
    "start": "1936740",
    "end": "1943309"
  },
  {
    "text": "start and to do this we have to do several yeah it's kind of a deep tree so",
    "start": "1943309",
    "end": "1951679"
  },
  {
    "text": "we have to pass the the notification message from the application to system inside the container from citizen inside",
    "start": "1951679",
    "end": "1958460"
  },
  {
    "text": "the container to in spawn and from n spawn to distantly on the host so I'll show a small demo to explain how this",
    "start": "1958460",
    "end": "1965299"
  },
  {
    "text": "works I think I have it here okay and",
    "start": "1965299",
    "end": "1970870"
  },
  {
    "text": "the way this works in your final application is as simple as this",
    "start": "1970870",
    "end": "1978550"
  },
  {
    "text": "[Music] yeah so you need to send a message that says ready equals one to two system Li",
    "start": "1978550",
    "end": "1987200"
  },
  {
    "text": "and once that's happened then",
    "start": "1987200",
    "end": "1992659"
  },
  {
    "text": "yeah it means your application is ready so we do this after listening on port",
    "start": "1992659",
    "end": "1999200"
  },
  {
    "text": "5000 and this is just something that replies hello so that that point is yeah",
    "start": "1999200",
    "end": "2007990"
  },
  {
    "text": "so this is the the script that builds the ACI and yeah we need to add an a",
    "start": "2007990",
    "end": "2013749"
  },
  {
    "text": "special annotation that tells rocket hey this support system the notify so just",
    "start": "2013749",
    "end": "2020200"
  },
  {
    "text": "pass the right variables along so I can just build this in one SD notify is a",
    "start": "2020200",
    "end": "2031149"
  },
  {
    "text": "general mechanism in system D that could be used for containers like you are showing here but it will be used for any",
    "start": "2031149",
    "end": "2036249"
  },
  {
    "text": "system D services yeah that's what communication protocol between any application running a system",
    "start": "2036249",
    "end": "2044080"
  },
  {
    "text": "is services with a system D so that system D knows when the application is ready exactly so I have a service here",
    "start": "2044080",
    "end": "2052950"
  },
  {
    "text": "that starts truck it and that has a type notify so if I start this service then",
    "start": "2052950",
    "end": "2062819"
  },
  {
    "text": "well if if you saw here I wait 30 seconds before marking it ready to the",
    "start": "2062819",
    "end": "2070210"
  },
  {
    "text": "most radius effect so I'm gonna start this",
    "start": "2070210",
    "end": "2075868"
  },
  {
    "text": "and you see that it doesn't return right away and that's because systemd",
    "start": "2077929",
    "end": "2083480"
  },
  {
    "text": "knows that it's not ready so if in another term you know I do status you",
    "start": "2083480",
    "end": "2091710"
  },
  {
    "text": "can see that the container is activating so anything dependent on this will not",
    "start": "2091710",
    "end": "2097230"
  },
  {
    "text": "start until it's activated but yeah well let me clean containers but the pot is",
    "start": "2097230",
    "end": "2105510"
  },
  {
    "text": "still running and now that it finished",
    "start": "2105510",
    "end": "2110690"
  },
  {
    "text": "ya know it now it works so now I can do",
    "start": "2110690",
    "end": "2116190"
  },
  {
    "text": "this kuroh 5000 and I can say yeah see the hello message so if some unit was depending on",
    "start": "2116190",
    "end": "2124470"
  },
  {
    "text": "this it will start after there already is signaled yeah and yeah this this the",
    "start": "2124470",
    "end": "2132839"
  },
  {
    "text": "implementation of this I don't have time to explain actually thing it's yeah time so yeah thank you",
    "start": "2132839",
    "end": "2140610"
  },
  {
    "text": "[Applause]",
    "start": "2140610",
    "end": "2145459"
  }
]