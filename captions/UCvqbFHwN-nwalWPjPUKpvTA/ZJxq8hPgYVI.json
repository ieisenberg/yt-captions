[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": "okay all right so i'm andrew harding um like amir mentioned i'm a a spy i've been inspired maintainer for a",
    "start": "80",
    "end": "6399"
  },
  {
    "text": "couple of years now and recently i was made a spiffy maintainer and participated in that um",
    "start": "6399",
    "end": "11759"
  },
  {
    "text": "effort for quite some time um today we're going to have a little bit of a deep dive on on spiffy inspire",
    "start": "11759",
    "end": "19279"
  },
  {
    "text": "and both evan and myself are staff engineers at vmware uh i'll let evan introduce himself",
    "start": "19600",
    "end": "24960"
  },
  {
    "text": "though thank you andrew yeah so i'm evan i spoke a little bit earlier on the spiffy",
    "start": "24960",
    "end": "30400"
  },
  {
    "text": "update thing um you know i i the goal for today the",
    "start": "30400",
    "end": "35680"
  },
  {
    "text": "goal for this talk is really you know that we've got a full day ahead of us uh we're really only just getting started and uh",
    "start": "35680",
    "end": "41920"
  },
  {
    "text": "you know there's there's likely to be kind of a lot of jargon thrown around and a lot of terms",
    "start": "41920",
    "end": "47200"
  },
  {
    "text": "and things like that that might be specific to spiffy inspire and so uh the goal of this talk is really to",
    "start": "47200",
    "end": "52320"
  },
  {
    "text": "kind of familiarize everyone uh with that and and do as deep a dive as necessary",
    "start": "52320",
    "end": "57840"
  },
  {
    "text": "um we hope as is necessary uh to set folks up to to really understand and",
    "start": "57840",
    "end": "63520"
  },
  {
    "text": "grock the the presentations for the rest of the day um you know we also recognize that that",
    "start": "63520",
    "end": "68720"
  },
  {
    "text": "you know this might not be new to some of you we've tried our best to to make the presentation as interesting as possible um",
    "start": "68720",
    "end": "74640"
  },
  {
    "text": "for for those who already may know some of this stuff and we do have a lot uh to share with you um so you know i",
    "start": "74640",
    "end": "80080"
  },
  {
    "text": "hope we don't go to too far over time here but uh i'm gonna i'm gonna in the interest of time i'm gonna i'm",
    "start": "80080",
    "end": "86159"
  },
  {
    "text": "gonna let that be that and um i'll pass it back to andrew to obviously the agenda and kick things off",
    "start": "86159",
    "end": "92640"
  },
  {
    "text": "okay so yeah like evan said we're just gonna do a quick overview to help people maybe understand",
    "start": "92640",
    "end": "98640"
  },
  {
    "text": "uh the rest of the talks are coming today we're going to start with a quick spiffy refresher uh they're going to go over the spiffy inspired project goals",
    "start": "98640",
    "end": "104560"
  },
  {
    "text": "and then dive right into um house wire specifically tries to obtain those goals through the agent uh through nodule",
    "start": "104560",
    "end": "111119"
  },
  {
    "text": "merkle data station house fire server manages its keys and rotation strategies and then we'll talk",
    "start": "111119",
    "end": "116799"
  },
  {
    "text": "a little bit about you know deployment and avoiding failure modes uh so right off the bat um starting with",
    "start": "116799",
    "end": "123119"
  },
  {
    "start": "120000",
    "end": "420000"
  },
  {
    "text": "uh spiffy i did that there we go",
    "start": "123119",
    "end": "129119"
  },
  {
    "text": "uh kelsey talked about some of these topics so hopefully this will be a very light refresher uh we're gonna",
    "start": "129119",
    "end": "134239"
  },
  {
    "text": "start off with the spiffy id um again this is the heart of spiffy and forms the way that we structure identity",
    "start": "134239",
    "end": "140480"
  },
  {
    "text": "for services and it's a uri um and it's it's got a couple components the authority",
    "start": "140480",
    "end": "146080"
  },
  {
    "text": "component represents uh the trust domain um for the identity and the path",
    "start": "146080",
    "end": "151280"
  },
  {
    "text": "component represents you know the particular uh you know entity identity within that trust domain",
    "start": "151280",
    "end": "157920"
  },
  {
    "text": "um and the trust domain uh is is in spiffy nomenclature is is",
    "start": "157920",
    "end": "163360"
  },
  {
    "text": "essentially a name space um and uh provides a boundary so so trust domain boundaries can",
    "start": "163360",
    "end": "169519"
  },
  {
    "text": "can be along security boundaries this could be like you know different environments like production versus",
    "start": "169519",
    "end": "175360"
  },
  {
    "text": "staging um or even other sort of uh workloads or systems that you might",
    "start": "175360",
    "end": "181280"
  },
  {
    "text": "have some sort of you know requirement around uh security isolation for",
    "start": "181280",
    "end": "186400"
  },
  {
    "text": "it could also just be as simple as an administration administrative boundary like you you've got a couple different teams who want to manage their own",
    "start": "186400",
    "end": "192159"
  },
  {
    "text": "independent spiffy um implementations or deployments and so this could be like you know billing versus cells versus human",
    "start": "192159",
    "end": "198640"
  },
  {
    "text": "resources and the idea is that trust domains have signing authorities within them and those signing",
    "start": "198640",
    "end": "204480"
  },
  {
    "text": "authorities are responsible for issuing those secure identities for identity within that trust domain",
    "start": "204480",
    "end": "211280"
  },
  {
    "text": "and the secure identity inside spiffy is codified in what's known as the spiffing verifiable",
    "start": "211280",
    "end": "216720"
  },
  {
    "text": "identity document and this uh document contains a spiffy",
    "start": "216720",
    "end": "221840"
  },
  {
    "text": "id and it's again signed by an authority within the trust domain and we've got specifications out that",
    "start": "221840",
    "end": "228400"
  },
  {
    "text": "define this type of document for both x 509 certificates and jot tokens",
    "start": "228400",
    "end": "235360"
  },
  {
    "text": "so we've got our game we've got it embedded into a you know assigned document now let's talk about how we verify those",
    "start": "236080",
    "end": "242560"
  },
  {
    "text": "documents and we do that with materials that are found in what's called the spiffy bundle so again this is a collection of public",
    "start": "242560",
    "end": "249040"
  },
  {
    "text": "key material from the authorities for trust domain and um it's used to to",
    "start": "249040",
    "end": "254560"
  },
  {
    "text": "validate aspects that belong to that trust domain um if you're reading through like the the documentation uh or the",
    "start": "254560",
    "end": "261040"
  },
  {
    "text": "specifications you'll also see this called the trust domain bundle or just trust bundle these three terms are used",
    "start": "261040",
    "end": "266880"
  },
  {
    "text": "interchangeably so building up now we've got our id",
    "start": "266880",
    "end": "272560"
  },
  {
    "text": "we've got assigned document over that id we can verify it with bundles let's talk about how workloads receive",
    "start": "272560",
    "end": "278880"
  },
  {
    "text": "this cryptographic material and that is done through the spiffy workload api",
    "start": "278880",
    "end": "284080"
  },
  {
    "text": "so the spiffy workload api is something that unauthenticated workloads talk to and again provides svids and",
    "start": "284080",
    "end": "290800"
  },
  {
    "text": "bundle materials and streams new materials to the workload as those",
    "start": "290800",
    "end": "296479"
  },
  {
    "text": "as those materials change um and because it's an authenticated uh api uh in other words you know",
    "start": "296479",
    "end": "303280"
  },
  {
    "text": "workloads um don't have to bring some sort of uh identity with them or secret with them",
    "start": "303280",
    "end": "308960"
  },
  {
    "text": "in order to authenticate against this api it solves the secret zero problem for the workloads",
    "start": "308960",
    "end": "316160"
  },
  {
    "text": "uh the last thing we'll talk about um in relation to spiffy is is uh another",
    "start": "316320",
    "end": "324240"
  },
  {
    "text": "mechanism uh to retrieve the bundles for a trust domain and that is the federation api",
    "start": "324240",
    "end": "329440"
  },
  {
    "text": "and we've talked about this a few times already today and again this is just a very quick way",
    "start": "329440",
    "end": "334479"
  },
  {
    "text": "for trust domains to exchange public key materials so they can uh authenticate each other's s-vids it's a it's a one-way",
    "start": "334479",
    "end": "340800"
  },
  {
    "text": "relationship you know when you contact this api you're asserting trust in the bundle material that you pull off",
    "start": "340800",
    "end": "346320"
  },
  {
    "text": "that api but but it doesn't go the other around so you can authenticate their identities but the person you're federating with",
    "start": "346320",
    "end": "352720"
  },
  {
    "text": "can't authenticate yours unless they also perform this sort of one-way federation step to obtain your public",
    "start": "352720",
    "end": "359280"
  },
  {
    "text": "key materials so in a nutshell spiffy gives us cryptographic verifiable",
    "start": "359280",
    "end": "364800"
  },
  {
    "text": "secret zero solving frequently rotated federatable namespaced uniform identity",
    "start": "364800",
    "end": "371520"
  },
  {
    "text": "and and that's quite a list that's huge and you might be asking yourself well",
    "start": "371520",
    "end": "377759"
  },
  {
    "text": "you know you know maybe maybe all my infrastructure runs inside a very homogeneous environment where i",
    "start": "377759",
    "end": "382880"
  },
  {
    "text": "have you know maybe some of these check boxes checked off all the ones that are important to me so like what's",
    "start": "382880",
    "end": "388000"
  },
  {
    "text": "what's really spriffy bringing to the table and so for spiffy and it's project goals it's not about",
    "start": "388000",
    "end": "393520"
  },
  {
    "text": "you know services that are running in a single cloud environment or maybe this other cloud environment or that",
    "start": "393520",
    "end": "399520"
  },
  {
    "text": "other cloud environment right or this organization that organization or yet another organization",
    "start": "399520",
    "end": "404720"
  },
  {
    "text": "or maybe your services that are running bare metal or inside virtual machines or running inside these",
    "start": "404720",
    "end": "410800"
  },
  {
    "text": "containerized environments it's really about an identity substrate that provides all",
    "start": "410800",
    "end": "415840"
  },
  {
    "text": "of those benefits that can span all these different environments",
    "start": "415840",
    "end": "422560"
  },
  {
    "start": "420000",
    "end": "550000"
  },
  {
    "text": "so that's it for for a spiffy recap let's talk about spire now um spire's whole goal in life uh",
    "start": "422560",
    "end": "429520"
  },
  {
    "text": "as as a as a spiffy implementation party for spiffy implementation is really to light up that workload api",
    "start": "429520",
    "end": "435919"
  },
  {
    "text": "that we talked about that gives you those uh you know bundle and nesfid materials",
    "start": "435919",
    "end": "440960"
  },
  {
    "text": "in as many different uh environments as possible and to provide a sense of uniformity around",
    "start": "440960",
    "end": "446240"
  },
  {
    "text": "management of those identities and it does this um starting with the spire agent this is kind of the the",
    "start": "446240",
    "end": "452720"
  },
  {
    "text": "natural place to start for spire support of spiffy because the agent uh is what lives alongside workloads uh and",
    "start": "452720",
    "end": "460880"
  },
  {
    "text": "implements that workload api and provides those cryptographic materials to workloads in that api now aspire",
    "start": "460880",
    "end": "469120"
  },
  {
    "text": "agent itself doesn't doesn't start out with any of those materials um those materials are centrally managed",
    "start": "469120",
    "end": "474479"
  },
  {
    "text": "and signed by the spire server the sparser acts as as the centralized signing authority inside of your trust domain",
    "start": "474479",
    "end": "480479"
  },
  {
    "text": "and so um there's this this mechanism through which spire agent is able to",
    "start": "480479",
    "end": "485919"
  },
  {
    "text": "reach out to spire server and obtain the materials that it will later on feed down to workloads to the workload api and it caches those",
    "start": "485919",
    "end": "492160"
  },
  {
    "text": "materials in an internal cache and so as uh as bundles um are are prepared and updated by you",
    "start": "492160",
    "end": "500000"
  },
  {
    "text": "know inside of your trust domain by spire server and as svids are minted those are sent down to the spire agent",
    "start": "500000",
    "end": "506479"
  },
  {
    "text": "and cached and of course as you know those materials change and rotate spire agents able to reach out and and",
    "start": "506479",
    "end": "513360"
  },
  {
    "text": "continue updating those materials inside of its cache um again like making those available to workloads downstream via the workload",
    "start": "513360",
    "end": "520479"
  },
  {
    "text": "api um you know now these are these are cryptographically signed identities",
    "start": "520479",
    "end": "526560"
  },
  {
    "text": "these are you know and they're associated private keys and so there's uh you know these are security sensitive",
    "start": "526560",
    "end": "532959"
  },
  {
    "text": "materials and spire server isn't just going to hand them out to anybody and so there's a process through which",
    "start": "532959",
    "end": "538880"
  },
  {
    "text": "spire agent is able to bootstrap and authenticate against spire server and i'll kick it over to evan to talk",
    "start": "538880",
    "end": "545920"
  },
  {
    "text": "about that next thank you andrew um yeah so andrew",
    "start": "545920",
    "end": "551680"
  },
  {
    "start": "550000",
    "end": "1015000"
  },
  {
    "text": "mentioned that you know aspire helps to solve secret zero problem um which is you know how do you get the first secret how do",
    "start": "551680",
    "end": "557680"
  },
  {
    "text": "you get the first credential you probably don't want to bake it into your workflows or bake it into your nodes and deploy them um so so how do you solve",
    "start": "557680",
    "end": "565200"
  },
  {
    "text": "this ideally at runtime and so you know spire and spiffy both look to solve that",
    "start": "565200",
    "end": "570560"
  },
  {
    "text": "problem for workloads spire in particular which which uh uses this agent this agent also has",
    "start": "570560",
    "end": "576240"
  },
  {
    "text": "to have a solution to the secret zero problem so when a new agent comes up or a new node comes up online how do you know",
    "start": "576240",
    "end": "581839"
  },
  {
    "text": "uh the identity of that node or agent and how do you in order to like in turn authorize the",
    "start": "581839",
    "end": "587600"
  },
  {
    "text": "issuance of acids to it um so we have this process that is called",
    "start": "587600",
    "end": "593279"
  },
  {
    "text": "node attestation and this is a way that spire server can can find out the identity of a new agent",
    "start": "593279",
    "end": "598800"
  },
  {
    "text": "or a new node without that agent or node having to have had any kind of",
    "start": "598800",
    "end": "604320"
  },
  {
    "text": "thing baked into it or any kind of pre-existing secret you can see on the right there's",
    "start": "604320",
    "end": "610079"
  },
  {
    "text": "one uh no tester plug-in for the agent it is platform specific generally on the left you have spire",
    "start": "610079",
    "end": "616079"
  },
  {
    "text": "server where it has multiple node tester plugins so aspire server can manage agents across different types of",
    "start": "616079",
    "end": "622399"
  },
  {
    "text": "infrastructure you know in this example we have aws and google cloud as well as a bare metal",
    "start": "622399",
    "end": "628480"
  },
  {
    "text": "tpm based tester so i'll walk you through a couple of examples of how how this actually works um in the aws",
    "start": "628480",
    "end": "636800"
  },
  {
    "text": "case uh the agent tickles this noted tester and it and this noted tester knows how to reach out and talk to aws so in this",
    "start": "636800",
    "end": "643279"
  },
  {
    "text": "case we reach out to the aws metadata service and we grab a document that is signed by aws that",
    "start": "643279",
    "end": "649279"
  },
  {
    "text": "aws makes available only to this node and that document has the",
    "start": "649279",
    "end": "654640"
  },
  {
    "text": "instance id and other identity related information for this",
    "start": "654640",
    "end": "659760"
  },
  {
    "text": "particular node so the agent plug-in reaches out and grabs this thing and then shoots it over to spire server",
    "start": "659760",
    "end": "665920"
  },
  {
    "text": "under a tls protected connection aspire server receives this document and",
    "start": "665920",
    "end": "671200"
  },
  {
    "text": "then passes it down to its noted tester that pairs with the agent one and this noted tester knows",
    "start": "671200",
    "end": "677920"
  },
  {
    "text": "uh not only how to validate that document that it got from aws um but also to call aws apis and perform",
    "start": "677920",
    "end": "685440"
  },
  {
    "text": "you know an extra set of validations is this a new node um there are some anti-tampering checks",
    "start": "685440",
    "end": "690880"
  },
  {
    "text": "that occur there you can write whatever logic you you want in there really that's the beauty of this",
    "start": "690880",
    "end": "696160"
  },
  {
    "text": "of this plugable system but once the spire server has effectively been",
    "start": "696160",
    "end": "702000"
  },
  {
    "text": "convinced that the agent is running on you know instance id1234 for example um spire server will issue",
    "start": "702000",
    "end": "709120"
  },
  {
    "text": "the agent its own svid and this s bit identifies the agent uniquely within the trust domain",
    "start": "709120",
    "end": "715040"
  },
  {
    "text": "and this this identity that we issue the agent is derived from the at the station so in this case we issued",
    "start": "715040",
    "end": "721519"
  },
  {
    "text": "an identity that's a function of its aws account number and its aws instance id and in order to just demonstrate the",
    "start": "721519",
    "end": "729279"
  },
  {
    "text": "flexibility of of this node attestation mechanism i have one more example which uses a tpm tpm stands for",
    "start": "729279",
    "end": "737200"
  },
  {
    "text": "trusted platform module it's a small little chip that is soldered on to most motherboards these days and it provides an",
    "start": "737200",
    "end": "743920"
  },
  {
    "text": "enclave if you've heard that term before secure enclave for holding private keys and making other kinds of security",
    "start": "743920",
    "end": "749440"
  },
  {
    "text": "assertions about the state of the hardware so there's this node tester tpm",
    "start": "749440",
    "end": "756000"
  },
  {
    "text": "this tpm based motor tester rather that knows how to reach out to this tpm and what it can do is it can grab",
    "start": "756000",
    "end": "761839"
  },
  {
    "text": "a certificate that is burned into the tpm from its manufacturer and it sends this certificate over to",
    "start": "761839",
    "end": "768079"
  },
  {
    "text": "the spire server which is then of course passed to the tpm based uh noted tester aspire server",
    "start": "768079",
    "end": "774800"
  },
  {
    "text": "that noted tester is configured with this manufacturer ca certificate so it knows how to validate",
    "start": "774800",
    "end": "780480"
  },
  {
    "text": "the certificate that yes this is a valid certificate from the tpm manufacturer we expect inside",
    "start": "780480",
    "end": "787279"
  },
  {
    "text": "that certificate and a lot and a message sent along with it there are some public keys and those and the private keys that are paired at",
    "start": "787279",
    "end": "793839"
  },
  {
    "text": "those public keys are actually burned into this tpm hardware so what the server does is it is then in",
    "start": "793839",
    "end": "799360"
  },
  {
    "text": "a position to issue a challenge so it can take a little notch or a small little randomly generated secret",
    "start": "799360",
    "end": "805120"
  },
  {
    "text": "it encrypts it with this public key that it received which it now knows to be burned into this tpm by way of the",
    "start": "805120",
    "end": "810240"
  },
  {
    "text": "certificate it received and sends it back to the agent so the agent receives this challenge and",
    "start": "810240",
    "end": "817120"
  },
  {
    "text": "passes it down into its uh noted tester plug-in which then passes it back into the tpm to be solved",
    "start": "817120",
    "end": "823120"
  },
  {
    "text": "right so the private key that the tpm is holding on to is able to solve this challenge and send back in clear text uh the bit",
    "start": "823120",
    "end": "830079"
  },
  {
    "text": "of information that's fire server generator you can see here um at this point fire server has got a",
    "start": "830079",
    "end": "835519"
  },
  {
    "text": "pretty good idea of of the identity of the hardware that this agent is running on and",
    "start": "835519",
    "end": "840880"
  },
  {
    "text": "and it knows that you know particular key that is that is burned into this tpm and same as before uh it uses that",
    "start": "840880",
    "end": "848079"
  },
  {
    "text": "information to issue an identity to the agent and in this case the agent's identity is bound to the identity of this tpm and",
    "start": "848079",
    "end": "855600"
  },
  {
    "text": "the hardware that it is running on so that's that's as fast as i can tell",
    "start": "855600",
    "end": "860720"
  },
  {
    "text": "the story of node attestation the end result here is is that you know we've gone from an agent or a node",
    "start": "860720",
    "end": "866880"
  },
  {
    "text": "that just comes up on the network with no prior knowledge to okay now we know exactly uh the identity of this hardware of this",
    "start": "866880",
    "end": "872959"
  },
  {
    "text": "agent uh that we're communicating with so that solves the secret zero problem for the agent but what about",
    "start": "872959",
    "end": "879040"
  },
  {
    "text": "the workload you know andrew described that we saw this problem for the workload too by the workload api so there has to be some some magic there",
    "start": "879040",
    "end": "886320"
  },
  {
    "text": "and so to solve that we do a very similar uh kind of approach and inspire agent that we call workload",
    "start": "886320",
    "end": "892000"
  },
  {
    "text": "attestation so this is able to take a workload that we have no prior knowledge of",
    "start": "892000",
    "end": "897600"
  },
  {
    "text": "that that it has no credentials and we're able to identify it okay so how do we do that um inside",
    "start": "897600",
    "end": "903760"
  },
  {
    "text": "spire agent we have this library called peer tracker peer tracker is a platform",
    "start": "903760",
    "end": "909120"
  },
  {
    "text": "specific implementation of of some logic that is able to introspect",
    "start": "909120",
    "end": "914399"
  },
  {
    "text": "the kernel that the agent is running on to find out the id to find out like which process is calling it so when the workload calls",
    "start": "914399",
    "end": "920000"
  },
  {
    "text": "this workload api they do all these special lookups and we're able to figure out um the process id and some other attributes",
    "start": "920000",
    "end": "926399"
  },
  {
    "text": "associated with the process once we have this information we pass",
    "start": "926399",
    "end": "931440"
  },
  {
    "text": "the process uh info back into these workloaded testers which are similar to noda testers",
    "start": "931440",
    "end": "936880"
  },
  {
    "text": "one big difference here is that the agent can load multiple workloaded testers and we fan out across all of",
    "start": "936880",
    "end": "941920"
  },
  {
    "text": "these so in this example we have you know one for unix that knows how to talk to the linux uh kernel we have one for docker that knows",
    "start": "941920",
    "end": "948160"
  },
  {
    "text": "how to talk to the docker demon we have one for kubernetes that knows how to talk to the cubelet so we dispatch each of these plugins and and",
    "start": "948160",
    "end": "954720"
  },
  {
    "text": "they go and they collect information about this process that's calling us and they return what's called",
    "start": "954720",
    "end": "959839"
  },
  {
    "text": "selectors these selectors describe uh that calling process in this case we have you know a",
    "start": "959839",
    "end": "965440"
  },
  {
    "text": "username we have the shaw sum of the of the workload binary we have the docker image ideas and kubernetes",
    "start": "965440",
    "end": "972240"
  },
  {
    "text": "related information this is pretty much all all we need in order to positively identify",
    "start": "972240",
    "end": "977680"
  },
  {
    "text": "uh this workload what is the shape of this workload exactly what is the identity now we are in a position where we can",
    "start": "977680",
    "end": "984160"
  },
  {
    "text": "issue it an s-vid a key uh and the associated the associated bundle",
    "start": "984160",
    "end": "991680"
  },
  {
    "text": "so he's done a lot of time so far talking kind of about the agent how the agent gets identity how agent issues",
    "start": "991759",
    "end": "996800"
  },
  {
    "text": "identity to workloads um but of course there's the server component that andrew mentioned earlier um you know it's got to manage these",
    "start": "996800",
    "end": "1003279"
  },
  {
    "text": "keys it's got to actually meant these s phases got a bunch of responsibilities on that shoulder so i'll pass it back to andrew to take a",
    "start": "1003279",
    "end": "1009199"
  },
  {
    "text": "look at some of those internals",
    "start": "1009199",
    "end": "1012560"
  },
  {
    "start": "1015000",
    "end": "1135000"
  },
  {
    "text": "thanks evan all right so uh again spire server is the centralized",
    "start": "1015120",
    "end": "1021279"
  },
  {
    "text": "signing authority for svids inside the trust domain and it accomplishes by having a signing authority for each",
    "start": "1021279",
    "end": "1028959"
  },
  {
    "text": "uh s-vid type so the inside spire server there's a distinct authority for x-509 and jot svids",
    "start": "1028959",
    "end": "1037120"
  },
  {
    "text": "now these uh pairs here uh the x509 authority is represented as an x509ca",
    "start": "1037120",
    "end": "1042640"
  },
  {
    "text": "certificate and it's accompanying private key um this the ca certificate uh",
    "start": "1042640",
    "end": "1048880"
  },
  {
    "text": "can be self-signed uh it can also uh belong to a larger uh existing pki scheme and",
    "start": "1048880",
    "end": "1055039"
  },
  {
    "text": "be signed by by an authority inside that existing pki",
    "start": "1055039",
    "end": "1060080"
  },
  {
    "text": "uh the jot authority uh is just a simple asymmetric key pair um you know and it's in charge of",
    "start": "1060480",
    "end": "1066000"
  },
  {
    "text": "signing the job estimates and uh one thing to note here is that",
    "start": "1066000",
    "end": "1071440"
  },
  {
    "text": "across these two uh you know authorities um the private key material is not directly managed by spire server",
    "start": "1071440",
    "end": "1077760"
  },
  {
    "text": "itself and this is a security consideration to kind of separate out the private key management from spire",
    "start": "1077760",
    "end": "1083520"
  },
  {
    "text": "server itself and offload that to what is known as the key manager plug-in the key manager plug-in is a",
    "start": "1083520",
    "end": "1090000"
  },
  {
    "text": "simple interface that is more or less loosely based off of",
    "start": "1090000",
    "end": "1095200"
  },
  {
    "text": "a subset of pkcs11 and through this interface uh spire server manages uh multiple key",
    "start": "1095200",
    "end": "1102000"
  },
  {
    "text": "slots for private keys and can create these keys and use",
    "start": "1102000",
    "end": "1107360"
  },
  {
    "text": "you know use these key slots to assign arbitrary data",
    "start": "1107360",
    "end": "1112640"
  },
  {
    "text": "there are a couple of key manager plugins that are built into spire",
    "start": "1113120",
    "end": "1118160"
  },
  {
    "text": "the top two you see their memory and disk we've touched on this earlier with augustine gave his update",
    "start": "1118160",
    "end": "1123520"
  },
  {
    "text": "um that there are community efforts in place to develop a tpm-based key manager as well as",
    "start": "1123520",
    "end": "1130559"
  },
  {
    "text": "something that hits aws's key management servers",
    "start": "1130559",
    "end": "1136720"
  },
  {
    "start": "1135000",
    "end": "1295000"
  },
  {
    "text": "uh getting back um we we talked just a second ago about how the x-519 authority",
    "start": "1136720",
    "end": "1142480"
  },
  {
    "text": "um can be part of a larger existing pki and the way that that's accomplished",
    "start": "1142480",
    "end": "1148400"
  },
  {
    "text": "inside spires through the use of it oh evan i think we just let's see yep",
    "start": "1148400",
    "end": "1153600"
  },
  {
    "text": "sorry hold on i got kicked out of my",
    "start": "1153600",
    "end": "1159840"
  },
  {
    "text": "ssl session right in the middle of our presentation one second",
    "start": "1159840",
    "end": "1167039"
  },
  {
    "text": "is that better uh i need to share hold on hold on okay",
    "start": "1167360",
    "end": "1174160"
  },
  {
    "text": "yeah oh let's see it's just",
    "start": "1174160",
    "end": "1180400"
  },
  {
    "text": "virtual conferencing at its finest yes yes sorry everyone",
    "start": "1180400",
    "end": "1186720"
  },
  {
    "text": "hey it's real time and it's interactive beats pre-recorded yeah absolutely okay where's my mouse",
    "start": "1188960",
    "end": "1196640"
  },
  {
    "text": "let's see okay is that better all right i'm back",
    "start": "1196640",
    "end": "1204000"
  },
  {
    "text": "perfect thank you all right so uh the way that spire accomplishes",
    "start": "1204000",
    "end": "1210640"
  },
  {
    "text": "interacting with this you know sort of existing upstream pki um is through the upstream authority plug-in",
    "start": "1210640",
    "end": "1216799"
  },
  {
    "text": "and again this is a very simple interface that just provides enough functionality for aspire to interact with that",
    "start": "1216799",
    "end": "1222240"
  },
  {
    "text": "upstream pki for the two different authority types that it manages specifically",
    "start": "1222240",
    "end": "1228159"
  },
  {
    "text": "as the next 509 authority is prepared the csr for that intermediate ca certificate",
    "start": "1228159",
    "end": "1234000"
  },
  {
    "text": "that spire wants to be signed uh is sent upstream through the mint x 509 ca rpc",
    "start": "1234000",
    "end": "1239440"
  },
  {
    "text": "uh where it is signed by the upstream authority and and then shipped back and if we want to talk about jot as the",
    "start": "1239440",
    "end": "1246000"
  },
  {
    "text": "job authority is prepared the public key material is published upstream again through the",
    "start": "1246000",
    "end": "1251200"
  },
  {
    "text": "upstream authority published jockey rpc and the idea here is that mechanisms inside that upstream pki can",
    "start": "1251200",
    "end": "1258159"
  },
  {
    "text": "then disseminate that key to interested parties who want to validate jaw despites minted by",
    "start": "1258159",
    "end": "1263440"
  },
  {
    "text": "this particular spire server instance uh there's a whole bunch of upstream ca",
    "start": "1263440",
    "end": "1271120"
  },
  {
    "text": "implementations here um i won't go over most of these um but i will mention this last one the",
    "start": "1271120",
    "end": "1277760"
  },
  {
    "text": "spire upstream authority plug-in um evan's gonna dive into the details of this later uh but this is essentially",
    "start": "1277760",
    "end": "1284159"
  },
  {
    "text": "where spire is acting as the upstream authority for a downstream spire server it enables some",
    "start": "1284159",
    "end": "1289520"
  },
  {
    "text": "some interesting um resiliency uh and um isolation benefits",
    "start": "1289520",
    "end": "1295760"
  },
  {
    "start": "1295000",
    "end": "1393000"
  },
  {
    "text": "um so again we've talked about how these authorities you know are prepared and maybe participating inside of",
    "start": "1296240",
    "end": "1303840"
  },
  {
    "text": "an upstream pki but we haven't really talked about how the public key material from these authorities makes its way",
    "start": "1303840",
    "end": "1309280"
  },
  {
    "text": "back to agents and down through the workloads um via the workload api and so",
    "start": "1309280",
    "end": "1314640"
  },
  {
    "text": "essentially what happens is spire manages a storage back end and this is known as the datastore and",
    "start": "1314640",
    "end": "1320480"
  },
  {
    "text": "it's involved in in storing all sorts of different things which we won't get into now we're mostly concerned at this point",
    "start": "1320480",
    "end": "1326000"
  },
  {
    "text": "with the trust bundle for the for the trust domain as",
    "start": "1326000",
    "end": "1331280"
  },
  {
    "text": "these authorities are prepared the public key material is appended to the bundle inside the",
    "start": "1331280",
    "end": "1336320"
  },
  {
    "text": "data store and uh like we talked about way back uh when we first introduced the spire agent",
    "start": "1336320",
    "end": "1343200"
  },
  {
    "text": "um you know the spy agent is uh you know at some frequency connecting to the server and synchronizing down uh bundled",
    "start": "1343200",
    "end": "1350559"
  },
  {
    "text": "material and getting you know estimated signed and rotated and so as part of that synchronization process",
    "start": "1350559",
    "end": "1356000"
  },
  {
    "text": "we can see that you know it pulls the bundle from the data store and directly through the expire server",
    "start": "1356000",
    "end": "1362799"
  },
  {
    "text": "and as the x519 and jot authorities are rotated again those the new public key material",
    "start": "1362799",
    "end": "1369039"
  },
  {
    "text": "is appended to that bundle inside the data store you know over and over uh as as you know",
    "start": "1369039",
    "end": "1376559"
  },
  {
    "text": "spire lives and and and breathes and and does its its rotation um strategy and you know again those",
    "start": "1376559",
    "end": "1384320"
  },
  {
    "text": "those materials are periodically pulled from uh the data store through this fire server down to the to the spire agent",
    "start": "1384320",
    "end": "1390480"
  },
  {
    "text": "and out to the workloads now there's uh you know this this rotation",
    "start": "1390480",
    "end": "1397360"
  },
  {
    "start": "1393000",
    "end": "1620000"
  },
  {
    "text": "of x 509 and jot authors this happens at a configurable cadence and we've you know we've seen",
    "start": "1397360",
    "end": "1403360"
  },
  {
    "text": "how how the public key material from those uh you know newly prepared authorities is is you know stuffed until outside the",
    "start": "1403360",
    "end": "1410400"
  },
  {
    "text": "data store and eventually makes its way down to to agents um but there's a because the",
    "start": "1410400",
    "end": "1416240"
  },
  {
    "text": "the agent is not getting a continuous stream of updates and is is kind of pulling at some frequency there's an",
    "start": "1416240",
    "end": "1422320"
  },
  {
    "text": "interval in which uh you know an x509 authority has has been prepared and it's",
    "start": "1422320",
    "end": "1427520"
  },
  {
    "text": "public key material has been published to the data store but where an agent has yet to pull that data store for that key",
    "start": "1427520",
    "end": "1433120"
  },
  {
    "text": "material and so at that point you can imagine that if that newly prepared authority",
    "start": "1433120",
    "end": "1438480"
  },
  {
    "text": "was immediately start to uh immediately assigned to to start minting asvids that",
    "start": "1438480",
    "end": "1444640"
  },
  {
    "text": "if those s vids made their way to an agent who has yet to pull uh for that bundle update uh the agent",
    "start": "1444640",
    "end": "1450480"
  },
  {
    "text": "would be unable to verify those asvids and so um spy implements an interesting",
    "start": "1450480",
    "end": "1456559"
  },
  {
    "text": "rotation strategy to kind of prevent this and mitigate this situation and it accomplishes this",
    "start": "1456559",
    "end": "1464960"
  },
  {
    "text": "by actually having two authorities breastfed type so i lied a little bit",
    "start": "1464960",
    "end": "1470240"
  },
  {
    "text": "earlier in the presentation the first set of authorities is considered the active set",
    "start": "1470240",
    "end": "1477600"
  },
  {
    "text": "and the active set um sits alongside the prepared set",
    "start": "1477600",
    "end": "1482799"
  },
  {
    "text": "and the active set is the one who that is involved in signing the sveds so so any authority that's in that active",
    "start": "1482799",
    "end": "1488559"
  },
  {
    "text": "slot is the authority that's chosen to sign incoming asvid requests and of course",
    "start": "1488559",
    "end": "1493919"
  },
  {
    "text": "it's public key material exists in the data store and is propagated out to agents as they sink",
    "start": "1493919",
    "end": "1500240"
  },
  {
    "text": "and uh you know at some point um you know maybe these authorities are are going to retire uh somewhat soon um",
    "start": "1500240",
    "end": "1508080"
  },
  {
    "text": "you know spire's going to decide it needs to rotate in a new authority key pair",
    "start": "1508080",
    "end": "1513120"
  },
  {
    "text": "for both the x519 and jot authorities but when it does so it doesn't just replace",
    "start": "1513120",
    "end": "1518320"
  },
  {
    "text": "the active authorities instead it prepares a new set of authorities in advance and",
    "start": "1518320",
    "end": "1524880"
  },
  {
    "text": "sticks those in the prepared slot and during this time you know of course",
    "start": "1524880",
    "end": "1530080"
  },
  {
    "text": "uh the the public key material is added to the bundle and uh you know the active slot is still",
    "start": "1530080",
    "end": "1537200"
  },
  {
    "text": "uh the one in charge of minting these different identities and so there's an interval of time here",
    "start": "1537200",
    "end": "1542559"
  },
  {
    "text": "where uh our active slot is minting identities and our prepared slot um has been prepared and it's public key",
    "start": "1542559",
    "end": "1549279"
  },
  {
    "text": "material placed in the bundle where it's now propagating down to agents in advance of it",
    "start": "1549279",
    "end": "1554400"
  },
  {
    "text": "ever being used to sign nesvids",
    "start": "1554400",
    "end": "1558960"
  },
  {
    "text": "so after you know ample time has elapsed that'll has allowed that the public key material for the newly",
    "start": "1560559",
    "end": "1565840"
  },
  {
    "text": "prepared authorities to to propagate throughout the system and make its way all the way down through agents and into workloads",
    "start": "1565840",
    "end": "1571840"
  },
  {
    "text": "that active key pair can then be retired now the bundle material stays the same",
    "start": "1571840",
    "end": "1577760"
  },
  {
    "text": "we don't prune out the old authority key material quite yet we want to leave it in there for a bit",
    "start": "1577760",
    "end": "1584400"
  },
  {
    "text": "of time because there could still be uh first of all the rotation event happens or the activation step happens",
    "start": "1584400",
    "end": "1590480"
  },
  {
    "text": "before that old authority has has actually expired um and so there could still be s vids",
    "start": "1590480",
    "end": "1595840"
  },
  {
    "text": "floating around inside your system that have been signed with that old now retired authority that you'd still need to validate so we",
    "start": "1595840",
    "end": "1602400"
  },
  {
    "text": "give some time before we end up pruning that key material out of the bundle",
    "start": "1602400",
    "end": "1607919"
  },
  {
    "text": "and again this this process is repeated as spire continuously monitors and rotates these",
    "start": "1609520",
    "end": "1614559"
  },
  {
    "text": "authorities to to maintain you know freshly rotated um authority material",
    "start": "1614559",
    "end": "1620000"
  },
  {
    "start": "1620000",
    "end": "1710000"
  },
  {
    "text": "uh the cadence that we do this at um is it's a pretty simple strategy and it's",
    "start": "1620000",
    "end": "1625279"
  },
  {
    "text": "based on how much time is left on the active authority so when the active authority has half of its lifetime left that's when we go",
    "start": "1625279",
    "end": "1632000"
  },
  {
    "text": "ahead and prepare a new authority and then when the active authority has one-sixth of its lifetime left that's",
    "start": "1632000",
    "end": "1637840"
  },
  {
    "text": "when we go ahead and activate the new authority and you can imagine uh you know a space of time between that",
    "start": "1637840",
    "end": "1643679"
  },
  {
    "text": "halfway mark and that one-sixth mark that is the time that we give uh that uh prepared bundle material to propagate",
    "start": "1643679",
    "end": "1650320"
  },
  {
    "text": "out to the to the uh you know trust me before we start minting esvids with the the newly",
    "start": "1650320",
    "end": "1655360"
  },
  {
    "text": "prepared authority and there's some some caps in there to like prevent prevent um some weird times with with really",
    "start": "1655360",
    "end": "1661919"
  },
  {
    "text": "long-lived authorities um but i'm gonna have to talk about that i won't take the time to",
    "start": "1661919",
    "end": "1667039"
  },
  {
    "text": "talk about that right now um",
    "start": "1667039",
    "end": "1671840"
  },
  {
    "text": "let's see so we've talked a lot about you know inspire spires uh responsibilities fire servers",
    "start": "1674559",
    "end": "1680640"
  },
  {
    "text": "responsibilities in particular it's it's doing a lot of different things it's signing sveds it's rotating authorities it's publishing stuff",
    "start": "1680640",
    "end": "1686320"
  },
  {
    "text": "upstream and it's obviously a big a big point of failure if something goes wrong with fire server that has large",
    "start": "1686320",
    "end": "1691520"
  },
  {
    "text": "implications on on the you know on our ability to put to push identity out to our workloads",
    "start": "1691520",
    "end": "1697520"
  },
  {
    "text": "and so evan next is going to talk about um sorry i'm messing around with slides",
    "start": "1697520",
    "end": "1702640"
  },
  {
    "text": "here evan's going to take a minute to talk about um you know some deployment strategies to aspire to try and mitigate those",
    "start": "1702640",
    "end": "1708480"
  },
  {
    "text": "failure modes thanks andrew i'm going to um speed",
    "start": "1708480",
    "end": "1713679"
  },
  {
    "start": "1710000",
    "end": "1895000"
  },
  {
    "text": "through this as fast as possible because we're already well over our a lot of time here um so you know this is kind of the",
    "start": "1713679",
    "end": "1720799"
  },
  {
    "text": "the simplest deployment you can imagine right and as andrew mentioned spire server becoming unavailable is particularly problematic if all the",
    "start": "1720799",
    "end": "1726880"
  },
  {
    "text": "workloads are depending on having valid essays to communicate with each other um the good news is that there this is not",
    "start": "1726880",
    "end": "1733440"
  },
  {
    "text": "the most terrible thing in the world if the spire server were to fail i mean it's not ideal but you know andrew mentioned previously",
    "start": "1733440",
    "end": "1739120"
  },
  {
    "text": "that this fire agent does have a cache and the agent knows what what identities it can issue and it fetches those in",
    "start": "1739120",
    "end": "1744559"
  },
  {
    "text": "advance and it caches them so this fire server goes away um you know we can't get new svids we can't rotate expiring",
    "start": "1744559",
    "end": "1752399"
  },
  {
    "text": "estimates but the agent can still perform workload attestation and can still serve as fits to workloads um from its cache without contacting the",
    "start": "1752399",
    "end": "1759039"
  },
  {
    "text": "server so you know it's survivable in a steady state but again it's not ideal",
    "start": "1759039",
    "end": "1764559"
  },
  {
    "text": "um the the very simple kind of of approach to addressing this is to scale the spire servers horizontally",
    "start": "1764559",
    "end": "1770960"
  },
  {
    "text": "um you can have as many of them as you like that this obviously addresses performance issues as well um we don't have any any notion of",
    "start": "1770960",
    "end": "1777600"
  },
  {
    "text": "active or passive each server you know has the full authority and uh",
    "start": "1777600",
    "end": "1782799"
  },
  {
    "text": "they do have kind of a shared shared data store though um if you were to say hey i want to put one of these in each",
    "start": "1782799",
    "end": "1787919"
  },
  {
    "text": "in like different failure domains like one in each region or one in each availability zone or something um you know having this to strike a data",
    "start": "1787919",
    "end": "1795600"
  },
  {
    "text": "store across those things is not ideal and so another tool we have in our tool chest is what we call nested spire i've had a",
    "start": "1795600",
    "end": "1802480"
  },
  {
    "text": "couple mentions of it today this is where spire uses another spire server as its upstream authority um",
    "start": "1802480",
    "end": "1808720"
  },
  {
    "text": "downstream's fire service do node attestation and workload attestation the same as a regular uh workload does so you could have for",
    "start": "1808720",
    "end": "1815360"
  },
  {
    "text": "instance one spire server in aws and another spire server and azure and both of them kind of roll up to this",
    "start": "1815360",
    "end": "1821120"
  },
  {
    "text": "global root level so this allows you to scale across these different failure",
    "start": "1821120",
    "end": "1827600"
  },
  {
    "text": "domains and to manage the failure of of you know different tiers of spire",
    "start": "1827600",
    "end": "1832640"
  },
  {
    "text": "servers so if this global kind of tier or to go away for some reason you know the local spire",
    "start": "1832640",
    "end": "1838000"
  },
  {
    "text": "servers can still perform signing operations can still rotate workload estimates uh they cannot rotate their own signing",
    "start": "1838000",
    "end": "1844480"
  },
  {
    "text": "uh keys like their jot keys or ca certificates so um you know that's that's what we look to",
    "start": "1844480",
    "end": "1849919"
  },
  {
    "text": "the upstream servers for but uh you know you can imagine if you have a one week lifetime on those or a two week lifetime",
    "start": "1849919",
    "end": "1855520"
  },
  {
    "text": "on those you've got a significant amount of time uh to get that central kind of cluster back up and",
    "start": "1855520",
    "end": "1860640"
  },
  {
    "text": "running the final tool we have in our tool trust is federation you know this is where we have a",
    "start": "1860640",
    "end": "1866000"
  },
  {
    "text": "different set of spire servers that isn't a completely different trust and they have a completely different set of authorities and then the spire",
    "start": "1866000",
    "end": "1873200"
  },
  {
    "text": "servers between each other they exchange public keys this is good for managing failure domains it's also",
    "start": "1873200",
    "end": "1878799"
  },
  {
    "text": "good for managing uh security domains if the spire server and trusted name bar on the right-hand",
    "start": "1878799",
    "end": "1883919"
  },
  {
    "text": "side here were to go down it does not affect identity issues and trust domain foo",
    "start": "1883919",
    "end": "1889440"
  },
  {
    "text": "if it were to be compromised it also doesn't affect uh security of identity issuance and trust domain through",
    "start": "1889440",
    "end": "1896480"
  },
  {
    "start": "1895000",
    "end": "1977000"
  },
  {
    "text": "um so in summary very quickly we learned about all these major kind of spire code paths this is",
    "start": "1896480",
    "end": "1901840"
  },
  {
    "text": "all that the major works that are really important to understand like how spire works under the covers and we",
    "start": "1901840",
    "end": "1906880"
  },
  {
    "text": "learned particularly about node and workload attestation aspire how we go from not knowing who anything is to knowing",
    "start": "1906880",
    "end": "1912080"
  },
  {
    "text": "who think what things are we learned about key management and rotation um how all of that is managed",
    "start": "1912080",
    "end": "1917679"
  },
  {
    "text": "by fire server and how inspire agent receives those and then figures out which workloads to give them to",
    "start": "1917679",
    "end": "1922799"
  },
  {
    "text": "we also learned about some of this bio failure modes and different deployment patterns and techniques that you can use to mitigate",
    "start": "1922799",
    "end": "1928480"
  },
  {
    "text": "some of the concerns that come up with this with this kind of technology if you want to learn more you can check",
    "start": "1928480",
    "end": "1934240"
  },
  {
    "text": "out the spiffy website at fifi.io um we also these are the two main github repos",
    "start": "1934240",
    "end": "1939760"
  },
  {
    "text": "uh spiffy inspire github repos we also have our slack channel it's a very welcoming community so we we",
    "start": "1939760",
    "end": "1946000"
  },
  {
    "text": "hope to see you there i know are already very much over time so uh we'll take questions in the chat",
    "start": "1946000",
    "end": "1953120"
  },
  {
    "text": "i'll be there and andrew will be there to answer them async and we also have a session later today a networking session",
    "start": "1953120",
    "end": "1958240"
  },
  {
    "text": "on which we can um you know kind of talk about any anything that that might have come to mind during this presentation",
    "start": "1958240",
    "end": "1964240"
  },
  {
    "text": "uh so thank you for bearing with us in this in this much longer than planned uh talk and we really really hope that",
    "start": "1964240",
    "end": "1970480"
  },
  {
    "text": "um it's helped to kind of set the stage for the rest of the day thank you everyone",
    "start": "1970480",
    "end": "1976399"
  },
  {
    "text": "yeah thank you",
    "start": "1976399",
    "end": "1979679"
  }
]