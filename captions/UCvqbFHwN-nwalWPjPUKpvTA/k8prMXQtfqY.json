[
  {
    "text": "good technically morning for five more minutes everybody uh I uh let's get this",
    "start": "560",
    "end": "6359"
  },
  {
    "text": "uh let's get this done and you can all uh go off and enjoy lunch welcome to the last day of the conference uh I am",
    "start": "6359",
    "end": "12440"
  },
  {
    "text": "certainly have had an amazing time but I'm looking forward to being done as well um so welcome to still don't do",
    "start": "12440",
    "end": "19320"
  },
  {
    "text": "what Charlie don't does making C changes safer this is actually the sequel to another talk that I did previously which",
    "start": "19320",
    "end": "25519"
  },
  {
    "text": "was just called don't do what Charlie don't does which was about API Design This one is about making API changes so",
    "start": "25519",
    "end": "32040"
  },
  {
    "text": "uh my name is Nick Young uh I am a senior software engineer at is of valan at Cisco uh",
    "start": "32040",
    "end": "39039"
  },
  {
    "text": "and pretty relevant I guess to be like who's this guy and why is he yelling at",
    "start": "39039",
    "end": "44160"
  },
  {
    "text": "me about C design um so yeah I started looking into uh cids very early on in uh",
    "start": "44160",
    "end": "50559"
  },
  {
    "text": "2017 when they were still called third party resources um I uh we were looking",
    "start": "50559",
    "end": "56399"
  },
  {
    "text": "at using that uh at the company I was working at at the time then when I was working on Contour uh I did a bunch of",
    "start": "56399",
    "end": "63399"
  },
  {
    "text": "design work on the HTTP proxy resource which was a replacement for another CID the Engish rout resource uh and then",
    "start": "63399",
    "end": "69799"
  },
  {
    "text": "I've been also been involved in gway API instance Inception at uh 2019 typo my",
    "start": "69799",
    "end": "75840"
  },
  {
    "text": "bad it is 5 years this year it's 5 years next week since we started Gateway API",
    "start": "75840",
    "end": "81400"
  },
  {
    "text": "um okay but so today's agenda so um uh I",
    "start": "81400",
    "end": "86759"
  },
  {
    "text": "need to explain a little bit about how kubernetes stores objects and versioning for you to be able to get why a lot of",
    "start": "86759",
    "end": "91960"
  },
  {
    "text": "these things are necessary uh and then walk through some C change mistakes using uh my uh poor uh sap Charlie don't",
    "start": "91960",
    "end": "101840"
  },
  {
    "text": "uh as the storman and then give you some tips on what to do to avoid them and yes I did choose Charlie don't uh",
    "start": "101840",
    "end": "107759"
  },
  {
    "text": "specifically because it has the letter c ID in it um but why did why did I come up with this stupidly complicated name",
    "start": "107759",
    "end": "114000"
  },
  {
    "text": "for my talk well you can play The Simpsons uh so in uh The Simpsons",
    "start": "114000",
    "end": "119600"
  },
  {
    "text": "there's episode where b gets a knife and has a the 10 dos and 500 don'ts of Night Safety and that book has a section",
    "start": "119600",
    "end": "126119"
  },
  {
    "text": "that's called don't do what Donny don't does uh and so yes I have lifted that wholesale thanks to The",
    "start": "126119",
    "end": "133360"
  },
  {
    "text": "Simpsons okay so this with that in mind this is Charlie don't uh Charlie uh is",
    "start": "133360",
    "end": "140319"
  },
  {
    "text": "unlucky enough to work on a custom controller for kubernetes at uh bigco um yeah and he also has really bad luck and",
    "start": "140319",
    "end": "146760"
  },
  {
    "text": "always makes the worst possible design decision uh so we all want to be not",
    "start": "146760",
    "end": "152080"
  },
  {
    "text": "like Charlie so yeah poor Charlie so previously on Charlie don't",
    "start": "152080",
    "end": "158720"
  },
  {
    "text": "in my previous talk uh I covered a bunch of things about API design principles I don't have time to go into them now but",
    "start": "158720",
    "end": "164879"
  },
  {
    "text": "maybe some of these might be a bit clearer after this because one of the reasons you do design things in the ways",
    "start": "164879",
    "end": "170400"
  },
  {
    "text": "that I said earlier is that uh yeah to make changes easier so read the API",
    "start": "170400",
    "end": "175760"
  },
  {
    "text": "Bibles the API conventions and API Changers doc think about how you users will use use the CID use status and",
    "start": "175760",
    "end": "181480"
  },
  {
    "text": "Status conditions make as many fields as possible optional with defaults if you can avoid Maps except for labels and",
    "start": "181480",
    "end": "187959"
  },
  {
    "text": "annotations use list type map instead avoid bll types and bounded eoms uh",
    "start": "187959",
    "end": "193440"
  },
  {
    "text": "avoid cross namespace references make them need a handshake if you do use them and don't make breaking ey changes without a API version",
    "start": "193440",
    "end": "200080"
  },
  {
    "text": "bump okay so why are API changes so important well you software is a living",
    "start": "200080",
    "end": "207959"
  },
  {
    "text": "thing uh if you don't keep building it it bid RS and D um you need to add nor",
    "start": "207959",
    "end": "213439"
  },
  {
    "text": "more features to handle things that you don't uh you that you never thought of",
    "start": "213439",
    "end": "219000"
  },
  {
    "text": "um I always like to say uh you there's no such thing as temporary except for saying no um so saying especially in",
    "start": "219000",
    "end": "227519"
  },
  {
    "text": "open source saying no is temporary but saying yes is forever because once you say yes that API is in your API and you",
    "start": "227519",
    "end": "234079"
  },
  {
    "text": "it is there for forever effectively okay so but before we hear",
    "start": "234079",
    "end": "240480"
  },
  {
    "text": "more about Charlie let's hit some backgrounds now so the main reference for this is the uh API changes uh Doc",
    "start": "240480",
    "end": "248159"
  },
  {
    "text": "it's a little hard to find so I have put that uh QR code up there um the API changes Doc is like the Bible for all of",
    "start": "248159",
    "end": "254799"
  },
  {
    "text": "this information it is all of everything I've have in here is based on that um it is a very helpful doc if you are",
    "start": "254799",
    "end": "260320"
  },
  {
    "text": "designing apis I yeah you really need to read and internalize it however the reason I'm giving this talk is it is",
    "start": "260320",
    "end": "266680"
  },
  {
    "text": "over 10,000 words long right so it's very long it's very very wordy it can be hard to understand you'll need to read",
    "start": "266680",
    "end": "272000"
  },
  {
    "text": "it a few times so I'm trying to give you a bit of a a leg up here right so some of this you probably",
    "start": "272000",
    "end": "279080"
  },
  {
    "text": "know every kubernetes object has a group which is like a domain string essentially that identifies a group of",
    "start": "279080",
    "end": "285840"
  },
  {
    "text": "API objects a kind and a resource the kind is basically the name of the",
    "start": "285840",
    "end": "290880"
  },
  {
    "text": "resource but the the name of the object a resource is the path that you use to",
    "start": "290880",
    "end": "296639"
  },
  {
    "text": "get to the object uh when you're doing a HTTP call and a version defines identifies a specific schema of that",
    "start": "296639",
    "end": "303240"
  },
  {
    "text": "resource and versions look like V1 V1 beta 1 V1 alpha 1 V1 Alpha 2 and so on",
    "start": "303240",
    "end": "309479"
  },
  {
    "text": "now the group and the version are often combined into the API version field which is group SL verion so gateway.",
    "start": "309479",
    "end": "315639"
  },
  {
    "text": "networking. cat. V1 or you know celium I.O V1 Alpha",
    "start": "315639",
    "end": "320960"
  },
  {
    "text": "2 which I work on a day job so versioning is really important",
    "start": "320960",
    "end": "327199"
  },
  {
    "text": "right like if you don't get this right like you will break things you will break your users and you will break",
    "start": "327199",
    "end": "332240"
  },
  {
    "text": "yourself as the API author and presumably the author of a controller that also reconciles this",
    "start": "332240",
    "end": "337880"
  },
  {
    "text": "API so kubernetes has three classes of object stability Alpha Beta stable they",
    "start": "337880",
    "end": "344720"
  },
  {
    "text": "mean basically what you would expect expect I don't want to read out all this stuff because I put a lot of detail on",
    "start": "344720",
    "end": "349919"
  },
  {
    "text": "here for you to take away in the takeaway slides but like the key part is Alpha is no no guarantees beta is we're",
    "start": "349919",
    "end": "358120"
  },
  {
    "text": "kind of pretty confident we got this right but we can't quite guarantee it yet and you stable is yeah we we we are",
    "start": "358120",
    "end": "365520"
  },
  {
    "text": "confident in this API it is it will never have changes once something goes to stable it can't go back um yeah and",
    "start": "365520",
    "end": "373560"
  },
  {
    "text": "making making a breaking API change means incrementing the API version so if you are if you have a V1 alpha 1 and you",
    "start": "373560",
    "end": "380800"
  },
  {
    "text": "make a change that's a breaking change you have to go to V1 Alpha 2 same for V1 beta 1 to V1 beta 2 but notably if you",
    "start": "380800",
    "end": "387800"
  },
  {
    "text": "have a V1 object and you want to make a breaking change guess what you're now working on a V2 object so now you go",
    "start": "387800",
    "end": "393840"
  },
  {
    "text": "back to V2 alpha 1 um so it's really important that you get that versioning",
    "start": "393840",
    "end": "399120"
  },
  {
    "text": "scheme right when you're designing your things because that's what people are going to expect so every object also has a",
    "start": "399120",
    "end": "406199"
  },
  {
    "text": "storage version now some of you may have come from uh Rob's talk uh just before where he uh walks through a lot of the",
    "start": "406199",
    "end": "412440"
  },
  {
    "text": "detail about storage versions I'm only going to talk about how it applies to C designers but you should definitely uh",
    "start": "412440",
    "end": "418440"
  },
  {
    "text": "go and watch the recording of Rob talk later um about how the ways that doing",
    "start": "418440",
    "end": "424160"
  },
  {
    "text": "storage that storage versions can mess with you on upgrading kubernetes and controllers now so the storage version",
    "start": "424160",
    "end": "430520"
  },
  {
    "text": "sets the version of the object schema that's persisted into the storage now an",
    "start": "430520",
    "end": "435639"
  },
  {
    "text": "object may have multiple repres representations available um and the API server converts between those versions",
    "start": "435639",
    "end": "443319"
  },
  {
    "text": "now so the conversions are required sometimes uh when you when there's inter",
    "start": "443319",
    "end": "449520"
  },
  {
    "text": "compatible changes between versions and when you and when you read a version from Storage that is a different version",
    "start": "449520",
    "end": "456479"
  },
  {
    "text": "than the one you ask for um or when you're writing to something and the and",
    "start": "456479",
    "end": "462360"
  },
  {
    "text": "the storage version has changed and the the new version needs to overwrite the old one so inry resources handle this",
    "start": "462360",
    "end": "469879"
  },
  {
    "text": "all this stuff for you it's part of the the contract that you get for inry but if you're um if you're running this in a",
    "start": "469879",
    "end": "475280"
  },
  {
    "text": "CID and you have breaking changes or like big changes you'll need to supply a web B to do this conversion",
    "start": "475280",
    "end": "480360"
  },
  {
    "text": "automatically if you can if you want it to be done automatically uh spoiler alert I don't like I'm not going to talk",
    "start": "480360",
    "end": "487039"
  },
  {
    "text": "too much about this but running web hooks is super hard and like you should only do that if you really really really",
    "start": "487039",
    "end": "492319"
  },
  {
    "text": "really need it for some very big reason running a webbook is a lot of Maintenance it's very hard to get working I do recommend against",
    "start": "492319",
    "end": "498800"
  },
  {
    "text": "it okay so this is a widget vers a widget object it's a CID um you can see",
    "start": "498800",
    "end": "506639"
  },
  {
    "text": "the group and the API version the kind uh up the top there uh and it's a very simple thing it just",
    "start": "506639",
    "end": "512159"
  },
  {
    "text": "lets you set how many bar you you're storing I didn't I didn't feel like coming up with something super clever",
    "start": "512159",
    "end": "518039"
  },
  {
    "text": "here cuz so in this case um this V1",
    "start": "518039",
    "end": "523200"
  },
  {
    "text": "Alpha 2 uh object we want to change it so that you can store multiple bars uh",
    "start": "523200",
    "end": "530160"
  },
  {
    "text": "and so when you do that you know because that is a breaking change you have to increment the API version you can see at",
    "start": "530160",
    "end": "536600"
  },
  {
    "text": "the top in the API version field uh this is now a V1 Alpha 3",
    "start": "536600",
    "end": "542120"
  },
  {
    "text": "object okay so this is not a compatible change because you would need to convert",
    "start": "543000",
    "end": "548320"
  },
  {
    "text": "this uh to be able to you there need to be a conversion between the things now because this is a pluralization change",
    "start": "548320",
    "end": "553920"
  },
  {
    "text": "you're moving from a singular field to pluralized field this has actually been done a bunch of times in core kubernetes",
    "start": "553920",
    "end": "560279"
  },
  {
    "text": "and so there is a well- defined process on how to do this safely um but it's",
    "start": "560279",
    "end": "566200"
  },
  {
    "text": "it's not compatible because you can't take this V1 Alpha 3 version and transform it back into the V1 Alpha",
    "start": "566200",
    "end": "572120"
  },
  {
    "text": "2 version even with an automatic transform without losing information you know the the old one only let you store",
    "start": "572120",
    "end": "577800"
  },
  {
    "text": "one bar the 10 value uh and you if you try to turn this this object back into",
    "start": "577800",
    "end": "583279"
  },
  {
    "text": "the old one you would lose one of these two values yeah so that's why it's an incompatible",
    "start": "583279",
    "end": "588880"
  },
  {
    "text": "change so you can write conversion code to safely convert from V1 Alpha 2 to V1",
    "start": "588880",
    "end": "595320"
  },
  {
    "text": "Alpha 3 in this case because basically V1 Alpha 2 has one bar V1 Alpha 3 has an",
    "start": "595320",
    "end": "600680"
  },
  {
    "text": "arbitrary number of bars you know if you're converting from two to three you take that one bar and put it into the first element in the list and you're",
    "start": "600680",
    "end": "607120"
  },
  {
    "text": "good right like it there no information is lost the schema makes sense okay you can skip conversions by",
    "start": "607120",
    "end": "615760"
  },
  {
    "text": "making compatible by making backwards compatible changes now so what makes a backwards compatible change well it's",
    "start": "615760",
    "end": "621880"
  },
  {
    "text": "time for Charlie to uh stick his face back in So Charlie doesn't understand",
    "start": "621880",
    "end": "626920"
  },
  {
    "text": "the rules for API changes uh he makes changes that that are not backwards compatible and doesn't increment the API version and yeah and then users of his",
    "start": "626920",
    "end": "634160"
  },
  {
    "text": "cids get screwed um because you in many ways Rob talked about some of the ways",
    "start": "634160",
    "end": "640160"
  },
  {
    "text": "the API server can end up you can end up not being able to apply the cids when you read the C when you read the objects",
    "start": "640160",
    "end": "646160"
  },
  {
    "text": "back they won't read properly um or you can get even more subtle bugs where Fields will just disappear or change",
    "start": "646160",
    "end": "652800"
  },
  {
    "text": "meaning or things like that so it's really bad and you really as if you are a CID author you need to work really",
    "start": "652800",
    "end": "659560"
  },
  {
    "text": "hard on not doing this so what can we do well it's",
    "start": "659560",
    "end": "665560"
  },
  {
    "text": "complicated um so but there are some some sort of rules you can stick by and I'm going to try for the rest of this",
    "start": "665560",
    "end": "671399"
  },
  {
    "text": "talk to sort of give you some uh examples and rules that that will make some of this",
    "start": "671399",
    "end": "677480"
  },
  {
    "text": "easier so my sort of backwards backwards compatibility rule is this if you can",
    "start": "677480",
    "end": "683079"
  },
  {
    "text": "take an a new version of an object with only the required field set change the",
    "start": "683079",
    "end": "688560"
  },
  {
    "text": "version back to the the version at the top back to the old version and apply it and nothing behaves differently then any",
    "start": "688560",
    "end": "694519"
  },
  {
    "text": "changes between those two objects are backwards compatible right like basically if there's you another a more",
    "start": "694519",
    "end": "700040"
  },
  {
    "text": "formal way to say this is is if there's serialization compatibility you can round trip the object to the new version",
    "start": "700040",
    "end": "705440"
  },
  {
    "text": "and then back to the old version without any loss of data or change in Behavior then the the changes are backwards",
    "start": "705440",
    "end": "711240"
  },
  {
    "text": "compatible right however like that means it's",
    "start": "711240",
    "end": "716600"
  },
  {
    "text": "really really really hard to make changes that are not that are that are backwards compatible and that is correct",
    "start": "716600",
    "end": "722000"
  },
  {
    "text": "it is very hard to make changes that are that are backwards compatible and you need to be very careful so you can make",
    "start": "722000",
    "end": "728519"
  },
  {
    "text": "safe changes if they are additive and you have some feature flag mechanism for uh controllers to be able to make sure",
    "start": "728519",
    "end": "735560"
  },
  {
    "text": "that they they know that they should be doing something",
    "start": "735560",
    "end": "740839"
  },
  {
    "text": "different okay so additive changes are special glass of changes that will break in limited ways and understandable ways",
    "start": "740839",
    "end": "748639"
  },
  {
    "text": "uh you what which means things like you know you add a CH you add a field and",
    "start": "748639",
    "end": "755160"
  },
  {
    "text": "then you go back the field is lost and the you know that behavior just stops working right like you know if you add a",
    "start": "755160",
    "end": "761399"
  },
  {
    "text": "new thing and then you roll back the versions and that behavior stops working that's kind of expected right like you",
    "start": "761399",
    "end": "767240"
  },
  {
    "text": "lost access to the feature the feature stops working so let's try and make that a bit",
    "start": "767240",
    "end": "774320"
  },
  {
    "text": "I don't think that's very clear but let's try and make it clearer with some examples so poor old Charlie when he",
    "start": "774320",
    "end": "780399"
  },
  {
    "text": "adds a new field he makes it required right like this is a breaking change because when you add a required field",
    "start": "780399",
    "end": "786680"
  },
  {
    "text": "now it's required every record has to have that and then when you try and put the old one in it's missing a field it",
    "start": "786680",
    "end": "792240"
  },
  {
    "text": "won't apply anymore because there's a required field missing right so what can we do about this well the best way to do",
    "start": "792240",
    "end": "798519"
  },
  {
    "text": "this is just make the field optional right like you know when you you and the other thing is that the default value",
    "start": "798519",
    "end": "805320"
  },
  {
    "text": "for the field needs to mean the same behavior as the old version right so if",
    "start": "805320",
    "end": "810440"
  },
  {
    "text": "you add a thing that you know I think I've got an example in a minute you um it's really important that that the",
    "start": "810440",
    "end": "817079"
  },
  {
    "text": "behavior of the object doesn't change when the new Fields unset or defaulted",
    "start": "817079",
    "end": "822279"
  },
  {
    "text": "so you can either use a zero value or you can add you can set a default that is Meaningful that means like do the old",
    "start": "822279",
    "end": "829600"
  },
  {
    "text": "Behavior right and so if that is the case if you don't Supply uh default values the way default values work is if",
    "start": "829600",
    "end": "836320"
  },
  {
    "text": "you don't fill out the field in your yaml then API server will fill that in for you on get importantly it is on get",
    "start": "836320",
    "end": "843199"
  },
  {
    "text": "it's not stored defaults are not materialized into ATD which can lead to",
    "start": "843199",
    "end": "848440"
  },
  {
    "text": "all sorts of craziness that I'm not going to have time to get into today so so for scaler Fields fields",
    "start": "848440",
    "end": "855440"
  },
  {
    "text": "that are strings or ins or other simple types um if you need to tell the so okay",
    "start": "855440",
    "end": "861360"
  },
  {
    "text": "so we're making them optional right but if you need to tell the difference between uh this field is set to some",
    "start": "861360",
    "end": "868000"
  },
  {
    "text": "value including the m or zero value uh then you need to use a pointer right so",
    "start": "868000",
    "end": "874160"
  },
  {
    "text": "a pointer lets you tell in in the ghost struct it lets you tell the difference between null zero and a number in the",
    "start": "874160",
    "end": "881000"
  },
  {
    "text": "number case or null empty string and set a set to a string so some examples you",
    "start": "881000",
    "end": "887959"
  },
  {
    "text": "know adding a new new Behavior string that defaults to the empty string which means don't do the new Behavior right or",
    "start": "887959",
    "end": "894639"
  },
  {
    "text": "you can add a new awesomeness level string that defaults to none which is so",
    "start": "894639",
    "end": "899759"
  },
  {
    "text": "there's no awesomeness right um and if you want to set awesomeness then you set the awesomeness to like you know uh sum",
    "start": "899759",
    "end": "907680"
  },
  {
    "text": "or extreme right but uh and then if you're adding a timeout field that's an INT you know in this case if you want",
    "start": "907680",
    "end": "915000"
  },
  {
    "text": "zero to mean unlimited which is pretty common in a lot of proxy implementations and stuff unset means I don't care what",
    "start": "915000",
    "end": "921320"
  },
  {
    "text": "it is use whatever the default proxy value is and the value means that specific value right so this is how many",
    "start": "921320",
    "end": "927240"
  },
  {
    "text": "seconds a request should time out until request times out there is a very important difference between unlimited",
    "start": "927240",
    "end": "933920"
  },
  {
    "text": "and you know set to some very large value and so that's a that's a case where you need to use that tripartite",
    "start": "933920",
    "end": "939240"
  },
  {
    "text": "value system and have it be a pointer to a string pointer to a an",
    "start": "939240",
    "end": "944240"
  },
  {
    "text": "INT so um another one that Charlie does is he uses enumerated string Fields without",
    "start": "944279",
    "end": "951759"
  },
  {
    "text": "declaring them open for changes right an enumerated string field is a string field that excuse me",
    "start": "951759",
    "end": "959839"
  },
  {
    "text": "should open",
    "start": "962360",
    "end": "965000"
  },
  {
    "text": "for okay so sorry um so an enumerated string is a string field that has a set",
    "start": "969600",
    "end": "975920"
  },
  {
    "text": "of permitted values usually you do that by supplying in go you supply constants for the for the permitted",
    "start": "975920",
    "end": "982160"
  },
  {
    "text": "values but you know if you don't make it clear in the documentation for that",
    "start": "982160",
    "end": "987319"
  },
  {
    "text": "value that you might add more later is entirely reasonable for a implementation",
    "start": "987319",
    "end": "993000"
  },
  {
    "text": "to assume that that's it that's all the fields that are going to be there and not handle the I don't know what this I",
    "start": "993000",
    "end": "999440"
  },
  {
    "text": "don't know what's in this field case right so it's really really important when you're add an numerated string",
    "start": "999440",
    "end": "1004759"
  },
  {
    "text": "field to say hey I'm we might add more fields to this later you need to handle the unknowned field Case by doing this",
    "start": "1004759",
    "end": "1011959"
  },
  {
    "text": "usually that's reject processing of the object um set a static condition saying hey you put something in this field that",
    "start": "1011959",
    "end": "1018199"
  },
  {
    "text": "I don't understand uh and you know so that people know that their object isn't is invalid in some way but like that you need to Define",
    "start": "1018199",
    "end": "1025000"
  },
  {
    "text": "what that behavior is and not just Panic or you know do some other bad behavior",
    "start": "1025000",
    "end": "1030678"
  },
  {
    "text": "so but once you do you if you always documented and",
    "start": "1030679",
    "end": "1036600"
  },
  {
    "text": "document what happens then then then it becomes a safe change to add more values it's still it's still like Rel it's a",
    "start": "1036600",
    "end": "1044760"
  },
  {
    "text": "little bit backwards incompatible in that the new values like not going to work if you roll back to",
    "start": "1044760",
    "end": "1050120"
  },
  {
    "text": "the old one and then but you've defined what the behavior is uh when when there are undefined values and so it's kind of",
    "start": "1050120",
    "end": "1056280"
  },
  {
    "text": "it's still within the original API contract Charlie don't uses bull fields",
    "start": "1056280",
    "end": "1063039"
  },
  {
    "text": "and says oh my God I need I need not just true false I need some other third value I'm just going to silently change",
    "start": "1063039",
    "end": "1069200"
  },
  {
    "text": "that to a string field uh and uh you that is very much a breaking change because you're changing the type you",
    "start": "1069200",
    "end": "1075520"
  },
  {
    "text": "know things that are deserializing go code from Jason will Break um you know",
    "start": "1075520",
    "end": "1081559"
  },
  {
    "text": "the the simple answer here is just don't use bll Fields you never want a bull never ever in because you're always",
    "start": "1081559",
    "end": "1088520"
  },
  {
    "text": "going to want to add something basically or you the amount of times where you will end up using a bull and you will",
    "start": "1088520",
    "end": "1093960"
  },
  {
    "text": "never end up being like Oh damn it and you now I need to add another bull field for to to describe some other setting",
    "start": "1093960",
    "end": "1100840"
  },
  {
    "text": "you're better off you're better off almost always having using an enumerated string field that you have declared to",
    "start": "1100840",
    "end": "1107799"
  },
  {
    "text": "be open for open for changes so yeah don't use bull Fields so like I said use the use those",
    "start": "1107799",
    "end": "1116039"
  },
  {
    "text": "enumerated string Fields so don't do enable awesomeness true or false and do awesomeness level extreme some or none",
    "start": "1116039",
    "end": "1123159"
  },
  {
    "text": "right like you know that way that way later on if you want to have like awesomeness level you know medium then",
    "start": "1123159",
    "end": "1130320"
  },
  {
    "text": "you can just add that in right like okay so Charlie don't adds struct",
    "start": "1130320",
    "end": "1138120"
  },
  {
    "text": "fields that aren't pointers so for struct fields to be optional they need",
    "start": "1138120",
    "end": "1143320"
  },
  {
    "text": "to be pointers that's just how the API works right like you can't have a struct field you sorry pointers or um you can",
    "start": "1143320",
    "end": "1151480"
  },
  {
    "text": "have a list of structs um that is optional because the list can be empty right but so but it's generally if it's",
    "start": "1151480",
    "end": "1158559"
  },
  {
    "text": "only a single struct it needs to be it needs to be a pointer so it can be so it can be empty and you don't have to supply like uh an empty object um a good",
    "start": "1158559",
    "end": "1168039"
  },
  {
    "text": "way to have an easily expandable struct is to use a union and this is a documented API pattern but it's not very",
    "start": "1168039",
    "end": "1174640"
  },
  {
    "text": "well known so like I like to always tell people about it so what does a union look like so this is uh this is a a",
    "start": "1174640",
    "end": "1182240"
  },
  {
    "text": "slightly different version of the uh widget object this one has a you can see",
    "start": "1182240",
    "end": "1187360"
  },
  {
    "text": "there there's Union setup so there's a type field which is a string field that chooses which uh config field you use",
    "start": "1187360",
    "end": "1194280"
  },
  {
    "text": "and then you have at thisa in this case only one you you have a config field for the round type right so you can set the",
    "start": "1194280",
    "end": "1201520"
  },
  {
    "text": "radius of the of the widget to 10 um and you you're saying this is a this is a",
    "start": "1201520",
    "end": "1206679"
  },
  {
    "text": "round widget so you we're only using one at the moment but we're about to add another one but because we've because",
    "start": "1206679",
    "end": "1213400"
  },
  {
    "text": "the type is an enumerated field that we've marked is can be expanded then again we're all good so if",
    "start": "1213400",
    "end": "1220440"
  },
  {
    "text": "we uh make a change here where we're adding another type we add a we make a",
    "start": "1220440",
    "end": "1226919"
  },
  {
    "text": "compatible change where we add squares as an option and then we add a square config uh struct that again is a pointer",
    "start": "1226919",
    "end": "1235120"
  },
  {
    "text": "um that you can set like the side length right so now you can say how big the square widget is or how big the the",
    "start": "1235120",
    "end": "1240960"
  },
  {
    "text": "round widget is in this case you the round config although it's set will",
    "start": "1240960",
    "end": "1247159"
  },
  {
    "text": "always be unused because the type is square right like you've chosen to use that one you the the any other config",
    "start": "1247159",
    "end": "1252960"
  },
  {
    "text": "things that are set will just be ignored right like so you can set them as much as you like and they're useless they don't mean anything but but it's",
    "start": "1252960",
    "end": "1259120"
  },
  {
    "text": "compatible because you can still take you you can switch it back to round and pick up that config right so this is a",
    "start": "1259120",
    "end": "1265200"
  },
  {
    "text": "really really really handy pattern for I have something where I have to you basically I have a effectively a radio",
    "start": "1265200",
    "end": "1271480"
  },
  {
    "text": "button in my API I need to choose between one type of thing and then set a bunch of parameters for the for the",
    "start": "1271480",
    "end": "1276720"
  },
  {
    "text": "thing based on the type of thing that we' picked and adding new things then becomes a safe",
    "start": "1276720",
    "end": "1282799"
  },
  {
    "text": "operation so I've gone a bit faster than the throt would um so Charlie don't makes",
    "start": "1282799",
    "end": "1289679"
  },
  {
    "text": "validation rules more strict between versions now I uh so basically when you",
    "start": "1289679",
    "end": "1297400"
  },
  {
    "text": "it's very easy now especially with cell to have validation rules that validate",
    "start": "1297400",
    "end": "1302440"
  },
  {
    "text": "uh your values on input these are great and you should totally use them because when your um when your user does",
    "start": "1302440",
    "end": "1309080"
  },
  {
    "text": "something that they're not allowed to do then the value will then the the object will be rejected at apply time they'll",
    "start": "1309080",
    "end": "1314840"
  },
  {
    "text": "actually get a try and Cube Kettle apply and it'll be like sorry I can't apply that because you violated these rules",
    "start": "1314840",
    "end": "1320960"
  },
  {
    "text": "right and part of cell is the definition of giving you an error message of what happens you that tells you oh you can't",
    "start": "1320960",
    "end": "1327480"
  },
  {
    "text": "do that because you can only have one of these things or you can you know that",
    "start": "1327480",
    "end": "1332559"
  },
  {
    "text": "needs to match this Rex you it needs to be a domain name you've got some capital letters in there sorry it's not going to",
    "start": "1332559",
    "end": "1337720"
  },
  {
    "text": "work um so if you have validation and you make that validation more strict now",
    "start": "1337720",
    "end": "1346039"
  },
  {
    "text": "Val values that used to be okay are no longer okay so you can't do that roundtrip operation and have everything",
    "start": "1346039",
    "end": "1352159"
  },
  {
    "text": "still work right so um because you take a value that used to be okay in V1 Alpha",
    "start": "1352159",
    "end": "1357200"
  },
  {
    "text": "2 and you apply it to V1 Alpha 3 and it's no longer fits the validation and so it doesn't apply right so that is so",
    "start": "1357200",
    "end": "1364480"
  },
  {
    "text": "tightening validation is a breaking change however the opposite operation",
    "start": "1364480",
    "end": "1369640"
  },
  {
    "text": "loosening validation is not a breaking change okay so because the value in V1",
    "start": "1369640",
    "end": "1375440"
  },
  {
    "text": "Alpha 2 will definitely apply in V1 Alpha 3 right it'll go back to V1 al2 no",
    "start": "1375440",
    "end": "1380679"
  },
  {
    "text": "problems so yeah but but importantly and thanks Rob for reminding me this the other day once you loosen it you can't",
    "start": "1380679",
    "end": "1387200"
  },
  {
    "text": "go back right like you know if you loosen your validation you can't then turn around and tighten it back up again",
    "start": "1387200",
    "end": "1392919"
  },
  {
    "text": "because that is a breaking change right so yeah so let's uh start the summing up",
    "start": "1392919",
    "end": "1401279"
  },
  {
    "text": "process so what have we learned from Charlie this time versioning is very very very important like it's really",
    "start": "1401279",
    "end": "1406840"
  },
  {
    "text": "easy to mess this up and the reason why I know and the reason why I'm doing this",
    "start": "1406840",
    "end": "1412760"
  },
  {
    "text": "is I have screwed this up so many times I have made very lots and lots and lots of breaking changes that have screwed",
    "start": "1412760",
    "end": "1419159"
  },
  {
    "text": "people uh you know screwed users screwed implementers you know don't like I am",
    "start": "1419159",
    "end": "1424360"
  },
  {
    "text": "Charlie don't right like just to be clear right like I'm the guy who's made all these mistakes right so the reason",
    "start": "1424360",
    "end": "1429520"
  },
  {
    "text": "I'm trying to give you this talk is to give you all a chance to not do the stupid mistakes I did right so if you if",
    "start": "1429520",
    "end": "1437480"
  },
  {
    "text": "you can the API server will convert between versions for you so importantly one thing that I want to make really",
    "start": "1437480",
    "end": "1443400"
  },
  {
    "text": "really clear is if you do these compatible changes then the API server will be able to just seamlessly present",
    "start": "1443400",
    "end": "1450440"
  },
  {
    "text": "the new version without you needing to write a any conversion code at all right like if you're adding new uh pointer",
    "start": "1450440",
    "end": "1456880"
  },
  {
    "text": "structs then when you do when you apply the object and the API server reads the",
    "start": "1456880",
    "end": "1462559"
  },
  {
    "text": "old stored version from disk and and needs to turn it into the new one it just it just says oh I've got a pointer",
    "start": "1462559",
    "end": "1469320"
  },
  {
    "text": "here there's no value for it stored it's nil it's empty you know it's optional so I'm not printing that that value which",
    "start": "1469320",
    "end": "1476440"
  },
  {
    "text": "is optional because it's emit on empty that's what that emit on empty in the Json tags means when if you're writing",
    "start": "1476440",
    "end": "1482440"
  },
  {
    "text": "this out don't present it if there's nothing stored in there yeah yeah changes don't need conversion",
    "start": "1482440",
    "end": "1489960"
  },
  {
    "text": "if they're compatible right now some here let's go over the ways I said to make changes compatible add new Fields",
    "start": "1489960",
    "end": "1495760"
  },
  {
    "text": "as optional you know don't do required fields ideally you know the sort of my",
    "start": "1495760",
    "end": "1501279"
  },
  {
    "text": "ideal use case for a CID is one where you can apply with spec open braet Open",
    "start": "1501279",
    "end": "1507360"
  },
  {
    "text": "Bracket close bracket and everything is good right like that is one of the best cases for a CID where every single",
    "start": "1507360",
    "end": "1514039"
  },
  {
    "text": "setting is optional a lot of the time that's not really possible because there is some required field you required",
    "start": "1514039",
    "end": "1519279"
  },
  {
    "text": "information you need to give but the closer you can get to that you know uh everything is optional goal the easier",
    "start": "1519279",
    "end": "1525799"
  },
  {
    "text": "it will be to make changes okay when you're adding in a numerated string field you really got to make sure",
    "start": "1525799",
    "end": "1531320"
  },
  {
    "text": "that you say I'm going to add more stuff to this later like this is this is a un this is an open",
    "start": "1531320",
    "end": "1537240"
  },
  {
    "text": "enumeration don't use bull Fields just don't right like use enumerator strings instead um it's way better and it's",
    "start": "1537240",
    "end": "1543960"
  },
  {
    "text": "actually more descriptive it's actually easier to write your field names such that you know rather than saying enable",
    "start": "1543960",
    "end": "1550919"
  },
  {
    "text": "awesomeness awesomeness level right like you know it's it's a more descriptive and it's easier to understand for an end",
    "start": "1550919",
    "end": "1556440"
  },
  {
    "text": "user because you you awesomeness level is slightly easier to understand than like how awesome is enable awesomeness",
    "start": "1556440",
    "end": "1562760"
  },
  {
    "text": "right like is it some extreme like super extreme radical I don't",
    "start": "1562760",
    "end": "1568000"
  },
  {
    "text": "know um so and when you are making struct Fields optional make sure you do",
    "start": "1568000",
    "end": "1574039"
  },
  {
    "text": "them with a pointer and don't forget about the union type um it is a lifesaver it's really really really",
    "start": "1574039",
    "end": "1579760"
  },
  {
    "text": "useful um and you know remember about it and use it um whenever you can and",
    "start": "1579760",
    "end": "1585720"
  },
  {
    "text": "lastly only loosen the field validation between versions like don't tighten field validation between versions and",
    "start": "1585720",
    "end": "1592559"
  },
  {
    "text": "there's probably one more sort of meta one here which is use the new stuff as much as you can if you are writing a new",
    "start": "1592559",
    "end": "1598279"
  },
  {
    "text": "CID at this point in time you should absolutely be uh looking up cell",
    "start": "1598279",
    "end": "1603840"
  },
  {
    "text": "understanding so cell is the common expression language and you in your CID definition you can use cell Expressions",
    "start": "1603840",
    "end": "1609919"
  },
  {
    "text": "to perform validation for you which you used to have to supply a web hook for and you can do quite complex validation",
    "start": "1609919",
    "end": "1616120"
  },
  {
    "text": "where you look at the value of multiple fields you can say like oh if this field is set then this field needs to be unset",
    "start": "1616120",
    "end": "1622360"
  },
  {
    "text": "or really other other way more complicated stuff and it's getting better and better with every kubernetes version so if you are a CID author you",
    "start": "1622360",
    "end": "1629360"
  },
  {
    "text": "really really need to make sure that you're using cell okay but Charlie D and I both say",
    "start": "1629360",
    "end": "1636480"
  },
  {
    "text": "thanks for listening uh and yeah very happy to take any questions if you have I know I went over a lot of info pretty",
    "start": "1636480",
    "end": "1641679"
  },
  {
    "text": "quickly there thanks very much",
    "start": "1641679",
    "end": "1646200"
  },
  {
    "text": "so what are your thoughts uh on breaking changes as they pertain to bug fixes so",
    "start": "1658279",
    "end": "1664000"
  },
  {
    "text": "you mentioned don't make uh validations more strict what if you say discover that a validation is accepting things",
    "start": "1664000",
    "end": "1670519"
  },
  {
    "text": "that according to say the written documentation it shouldn't have been accepting in the first place so that do",
    "start": "1670519",
    "end": "1675840"
  },
  {
    "text": "you still consider that a breaking change with that still require version bump I mean that that's one of those that's one of those cases that's tough",
    "start": "1675840",
    "end": "1682039"
  },
  {
    "text": "right like technically absolutely it is a breaking change right like but this is one of that's one of those cases where I",
    "start": "1682039",
    "end": "1688039"
  },
  {
    "text": "would say look if you documented that it should be this way and you made a mistake in your Rex then you're updating",
    "start": "1688039",
    "end": "1694200"
  },
  {
    "text": "the thing to to work correctly like you said it would uh and so like I would be like that's kind of on the border and I",
    "start": "1694200",
    "end": "1700159"
  },
  {
    "text": "would not call that a breaking change probably some users will break but they're the people who doing the stuff that they shouldn't have been doing",
    "start": "1700159",
    "end": "1705679"
  },
  {
    "text": "anyway so you know sucks to be them right like you read the documentation and do what this says like yeah makes",
    "start": "1705679",
    "end": "1712279"
  },
  {
    "text": "sense thank you yeah noris so I agree that the unions are quite useful but in",
    "start": "1712279",
    "end": "1718559"
  },
  {
    "text": "a way they screw the validation right because uh in the example you had for example you know cannot easily set the",
    "start": "1718559",
    "end": "1724679"
  },
  {
    "text": "round config or the square config as required based on the type you can use the cell validation rules for that but",
    "start": "1724679",
    "end": "1731919"
  },
  {
    "text": "that used for kind of explosion of the cell validation rules or yeah so so yes",
    "start": "1731919",
    "end": "1736960"
  },
  {
    "text": "you can use cell to validate that if you set the type to round you only set the round config uh you absolutely can and",
    "start": "1736960",
    "end": "1742679"
  },
  {
    "text": "it does mean that you end up with complicated cell Val validations but like that's one of the cases where you",
    "start": "1742679",
    "end": "1747919"
  },
  {
    "text": "as the maintainer need to accept the complexity so to make the user's life easier right like so the user doesn't",
    "start": "1747919",
    "end": "1753080"
  },
  {
    "text": "have to remember the rules you write down the rules you and then the user does them right like but you can have",
    "start": "1753080",
    "end": "1759399"
  },
  {
    "text": "multiple lines multiple instances of self validation for each object and so I really encourage people to do that so in",
    "start": "1759399",
    "end": "1765159"
  },
  {
    "text": "that case there really should be a cell validation that says if the type is square then make sure this is then make",
    "start": "1765159",
    "end": "1771000"
  },
  {
    "text": "sure square is set and round is unset and if the type is round you I understand what you're saying that it does get complicated very quickly um but",
    "start": "1771000",
    "end": "1777360"
  },
  {
    "text": "the the folks who work on cell are working really hard and making it so that cell has more um complex function",
    "start": "1777360",
    "end": "1783519"
  },
  {
    "text": "functionality and can deal with that sort of case thanks it's a great Point okay thanks",
    "start": "1783519",
    "end": "1789600"
  },
  {
    "text": "thanks so let's say that you perhaps wrote some cruds before attending this talk and you made some bad mistakes what",
    "start": "1789600",
    "end": "1795600"
  },
  {
    "text": "are strategies possibly you know to recover from those in a more like particularly user friendly way um I mean",
    "start": "1795600",
    "end": "1802440"
  },
  {
    "text": "the if you have if you have made mistakes and you need to do breaking changes like you the the really the best",
    "start": "1802440",
    "end": "1808799"
  },
  {
    "text": "thing to do is to is to you know take your medicine say like yeah look we made mistakes we're doing an API revision you",
    "start": "1808799",
    "end": "1814919"
  },
  {
    "text": "know the old API will continue to work um you know but we think that this API design is better here is the new API",
    "start": "1814919",
    "end": "1821559"
  },
  {
    "text": "here is what's better about it and here's how you migrate right like you know and it could be that you know you",
    "start": "1821559",
    "end": "1827039"
  },
  {
    "text": "can't write it's you that migrating is not like you can't write a conversion",
    "start": "1827039",
    "end": "1833559"
  },
  {
    "text": "where P easily to do it but maybe you can write a tool or something like that to help people but like you know at the",
    "start": "1833559",
    "end": "1838919"
  },
  {
    "text": "end of the day in the long run users are better served having C CS that you can",
    "start": "1838919",
    "end": "1845440"
  },
  {
    "text": "make compatible changes them to them for and so like sometimes it's better to to",
    "start": "1845440",
    "end": "1850480"
  },
  {
    "text": "say look I'm really sorry we made mistakes but the best thing we can do for you is to break you this one time so",
    "start": "1850480",
    "end": "1856360"
  },
  {
    "text": "that then we don't have we don't end up const L breaking you in small and weird ways in the future right like sometimes",
    "start": "1856360",
    "end": "1861440"
  },
  {
    "text": "you got to frontload that pain and get it out of the way so that so that you're not like chipping away at people with lots of paper cuts for years and years",
    "start": "1861440",
    "end": "1867639"
  },
  {
    "text": "and years does that make sense mhm yeah thanks very much thanks for the questions that's awesome",
    "start": "1867639",
    "end": "1875130"
  },
  {
    "text": "[Applause]",
    "start": "1875130",
    "end": "1877659"
  }
]