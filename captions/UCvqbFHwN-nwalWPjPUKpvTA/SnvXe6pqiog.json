[
  {
    "text": "all right hello everyone and welcome to this session how to build serverless",
    "start": "179",
    "end": "6120"
  },
  {
    "text": "event driven microservices systems with calyx so in this session really what I'm going",
    "start": "6120",
    "end": "13500"
  },
  {
    "text": "to be showing you is the how to build like the title says the event driven",
    "start": "13500",
    "end": "19440"
  },
  {
    "text": "Parts I'm really going to be focused a lot on event driven design and I think what's going to be interesting is some",
    "start": "19440",
    "end": "27119"
  },
  {
    "text": "of the kind of guided design uh driven approach",
    "start": "27119",
    "end": "32578"
  },
  {
    "text": "to this this process where because of some of the ways things work in an",
    "start": "32579",
    "end": "39239"
  },
  {
    "text": "event-driven system and also with calyx and just the realities of doing",
    "start": "39239",
    "end": "44640"
  },
  {
    "text": "distributed systems things like that there's I think there'll be some surprising uh outcomes of what it",
    "start": "44640",
    "end": "50520"
  },
  {
    "text": "actually takes to do in an event driven design like this I know it's for me it's",
    "start": "50520",
    "end": "55739"
  },
  {
    "text": "been an amazing uh about a year now doing this with calyx and",
    "start": "55739",
    "end": "62879"
  },
  {
    "text": "finally getting into something where I can stick my teeth into building event driven systems I've been talking about",
    "start": "62879",
    "end": "68760"
  },
  {
    "text": "it and doing it to some degree for for some years now I've been talking about event driven at conferences and blogs",
    "start": "68760",
    "end": "75659"
  },
  {
    "text": "and webinars and things like that but now because of of Calyx it's gotten so",
    "start": "75659",
    "end": "81600"
  },
  {
    "text": "much easier to do it it's it's a it's quite amazing so let's get going so like I said",
    "start": "81600",
    "end": "88560"
  },
  {
    "text": "we're going to dive pretty deeply into event-driven design in this session so",
    "start": "88560",
    "end": "96240"
  },
  {
    "text": "um it would help if you have some familiarity with calyx I'm not going to go into a lot of the details that I",
    "start": "96240",
    "end": "103320"
  },
  {
    "text": "often do in many of the other videos and content that I produce around produce around calyx in this video so if there's",
    "start": "103320",
    "end": "111060"
  },
  {
    "text": "something that I'm not covering here there's plenty of other resources to find I've done a bunch of videos other",
    "start": "111060",
    "end": "117840"
  },
  {
    "text": "people have done videos on calyx and you should be able to find and of course there's a documentation so you should be",
    "start": "117840",
    "end": "123899"
  },
  {
    "text": "able to find the some of the basics but here this is a bit more advanced and we're going to",
    "start": "123899",
    "end": "129000"
  },
  {
    "text": "go into the design now I've never fear if you're not that familiar with calyx",
    "start": "129000",
    "end": "134220"
  },
  {
    "text": "yet this is really about kind of the fundamentals of Designing a vent driven",
    "start": "134220",
    "end": "139800"
  },
  {
    "text": "systems and um and that process so I'm not going to get into code or or things like that",
    "start": "139800",
    "end": "146160"
  },
  {
    "text": "this is really about the conceptual process so",
    "start": "146160",
    "end": "151440"
  },
  {
    "text": "I'm going to be walking you through the design of this demo application that I've been using for a while now",
    "start": "151440",
    "end": "158280"
  },
  {
    "text": "and I think it's a really good representation I wanted to dive deep into the design of this for a long time",
    "start": "158280",
    "end": "165180"
  },
  {
    "text": "and I've kind of covered it to some degree in other videos that I've done",
    "start": "165180",
    "end": "171120"
  },
  {
    "text": "but this time I'm going to go pretty deep into the flow here",
    "start": "171120",
    "end": "177360"
  },
  {
    "text": "and uh it was really interesting for me to to walk through the process and also",
    "start": "177360",
    "end": "183840"
  },
  {
    "text": "kind of share with you my experience as I was working through the design of this",
    "start": "183840",
    "end": "189599"
  },
  {
    "text": "and I was and actually what was happening I was unlearning things that I've known for years about building say",
    "start": "189599",
    "end": "196800"
  },
  {
    "text": "stateless crud like you know crud types of systems that building that those",
    "start": "196800",
    "end": "201959"
  },
  {
    "text": "types of systems for decades and agree to get into an event-driven type of a",
    "start": "201959",
    "end": "207120"
  },
  {
    "text": "process and design um it really kind of I had to kind of let go of some things that I just took",
    "start": "207120",
    "end": "213900"
  },
  {
    "text": "as just almost kind of intuitive ways of doing things and kind of you know rewire",
    "start": "213900",
    "end": "220799"
  },
  {
    "text": "my brain to to do things in in a more event driven way I can I hopefully",
    "start": "220799",
    "end": "226739"
  },
  {
    "text": "you'll see that it's great fun your head will hurt I think the first time you do it but there's some patterns that you'll",
    "start": "226739",
    "end": "232440"
  },
  {
    "text": "see here that not only apply to this application but you'll see the same recurring patterns in other event-driven",
    "start": "232440",
    "end": "240299"
  },
  {
    "text": "applications this is certainly what I'm seeing in the other things that I've been doing along these lines in",
    "start": "240299",
    "end": "245580"
  },
  {
    "text": "completely different applications but the processes there's this kind of nice pattern that's emerging that like I",
    "start": "245580",
    "end": "251700"
  },
  {
    "text": "reuse over and over and all the the designs that I've been doing",
    "start": "251700",
    "end": "257340"
  },
  {
    "text": "so to start out um when I first started working with calyx and I was learning it myself which",
    "start": "257340",
    "end": "264120"
  },
  {
    "text": "wasn't that long ago because calyx is new I was really doing demos on a",
    "start": "264120",
    "end": "269880"
  },
  {
    "text": "shopping cart you know the classic shopping cart demo it's interesting and you know so that I was building a",
    "start": "269880",
    "end": "276120"
  },
  {
    "text": "service so there's the circle here in this diagram represents a you can think of it they're called entities in calyx",
    "start": "276120",
    "end": "282180"
  },
  {
    "text": "but you can also think of it as like a small microservice it's a self-contain service that has an API you you interact",
    "start": "282180",
    "end": "289860"
  },
  {
    "text": "with it and it uh it persists data to a database it can retrieve data from the",
    "start": "289860",
    "end": "295139"
  },
  {
    "text": "database those types of things so it is you know you think of it as a as a a tight focused Loosely coupled",
    "start": "295139",
    "end": "301919"
  },
  {
    "text": "microservice that's this pretty what what this is so I was building up the shopping cart",
    "start": "301919",
    "end": "307139"
  },
  {
    "text": "you know adding the uh the ability to add items to a cart to remove items from a card to change items in a cart and to",
    "start": "307139",
    "end": "315300"
  },
  {
    "text": "check out the cart and I was kind of playing with the uh the programming you",
    "start": "315300",
    "end": "320759"
  },
  {
    "text": "know at the code level you know what I was doing uh how I would write the code and things like that and I was you know",
    "start": "320759",
    "end": "326400"
  },
  {
    "text": "so I was learning but then I was getting kind of bored with it because like okay you know shopping cart not a big deal but yeah I",
    "start": "326400",
    "end": "333360"
  },
  {
    "text": "started thinking well it would really be cool to do something more interesting like what about okay we've got a",
    "start": "333360",
    "end": "338880"
  },
  {
    "text": "shopping cart the shopping cart's been checked out so what about implementing the process of allocating stock to the",
    "start": "338880",
    "end": "346380"
  },
  {
    "text": "shopping cart so that's where I started to build up so the first thing I did I started to",
    "start": "346380",
    "end": "352440"
  },
  {
    "text": "add some of that logic to the shopping cart um service that I had built",
    "start": "352440",
    "end": "358139"
  },
  {
    "text": "but it started to feel like it was getting heavy weight you know the design was starting to smell you know you know",
    "start": "358139",
    "end": "364919"
  },
  {
    "text": "that feeling when you you you're doing something and it's like I'm doing too much here I really should be kind of",
    "start": "364919",
    "end": "371220"
  },
  {
    "text": "breaking this thing up so what I did was I introduced a second",
    "start": "371220",
    "end": "376979"
  },
  {
    "text": "service that I called order so the idea was that shopping cart was focused on",
    "start": "376979",
    "end": "382139"
  },
  {
    "text": "building shopping carts and once a shopping cart was checked out then it would emit an event",
    "start": "382139",
    "end": "388860"
  },
  {
    "text": "which would be picked up by the order service and the order service would create an order and so the big",
    "start": "388860",
    "end": "394860"
  },
  {
    "text": "difference here is that you know with a typical online you know shopping system",
    "start": "394860",
    "end": "400380"
  },
  {
    "text": "shopping carts could get built and then abandoned and no orders are getting created so you know that data is interesting to analyze but they're not",
    "start": "400380",
    "end": "408000"
  },
  {
    "text": "real orders so I want to kind of have a a kind of a clear delineation between",
    "start": "408000",
    "end": "414060"
  },
  {
    "text": "just the code in the services responsible for handing shopping cart and the code that was",
    "start": "414060",
    "end": "420080"
  },
  {
    "text": "responsible for handling orders so that checkout event is a significant event when a checkout event occurs the",
    "start": "420080",
    "end": "426960"
  },
  {
    "text": "shopping cart basically freezes itself it it's no longer possible the shopping",
    "start": "426960",
    "end": "432960"
  },
  {
    "text": "cart service won't allow any more changes to the to the cart contents because it's been submitted as an order",
    "start": "432960",
    "end": "439620"
  },
  {
    "text": "so when an order gets the shopping cart now the order goes okay now we've got an order that we need to fulfill",
    "start": "439620",
    "end": "446639"
  },
  {
    "text": "so in the order service I started to add a little bit of like the life cycle into an order service and what I mean by that",
    "start": "446639",
    "end": "453960"
  },
  {
    "text": "here's the the data structures the data structure is simple here but here's a data structure of a shopping cart and",
    "start": "453960",
    "end": "460860"
  },
  {
    "text": "you can see the main thing in the shopping cart on the left this is just some Jason is just it's got a card ID a",
    "start": "460860",
    "end": "467039"
  },
  {
    "text": "customer ID when a timestamp 4 is checked out and there's a deleted flag but sorry",
    "start": "467039",
    "end": "476520"
  },
  {
    "text": "about that and then there's a list of items in the shopping cart so you can see there's",
    "start": "476520",
    "end": "481620"
  },
  {
    "text": "um a SKU one with a quantity of two and a skew two with a quantity of three now",
    "start": "481620",
    "end": "487020"
  },
  {
    "text": "the order the um data you know the this is the say",
    "start": "487020",
    "end": "492539"
  },
  {
    "text": "the object that the order is or the state that the order is is building it",
    "start": "492539",
    "end": "498000"
  },
  {
    "text": "has a uh it looks very much like the shopping cart but it's got some more feels mostly a bunch of time stamps that",
    "start": "498000",
    "end": "504599"
  },
  {
    "text": "kind of show life cycle like when was it ordered when was it shipped when was it delivered was it returned was it",
    "start": "504599",
    "end": "511800"
  },
  {
    "text": "canceled those types of things and then you can see in the order items which is just a list",
    "start": "511800",
    "end": "520140"
  },
  {
    "text": "or an array here in Json there's also a new field called shipped as well it's a",
    "start": "520140",
    "end": "525480"
  },
  {
    "text": "shift timestamp so I so I had the order and then I started thinking all right well what do",
    "start": "525480",
    "end": "531360"
  },
  {
    "text": "we do how do I write the code uh in this way doing an event driven",
    "start": "531360",
    "end": "537120"
  },
  {
    "text": "type of approach to to allocate stock to an order so I started thinking about it I didn't start really implementing",
    "start": "537120",
    "end": "542880"
  },
  {
    "text": "because I was started I was kind of at the early stages of the design okay what's the stock order what does it",
    "start": "542880",
    "end": "549060"
  },
  {
    "text": "do and how does the uh what's the kind of the Eventing interaction between order and stock order",
    "start": "549060",
    "end": "556019"
  },
  {
    "text": "so to right away I started running into some interesting things so here I'm taking",
    "start": "556019",
    "end": "563160"
  },
  {
    "text": "things down to a little bit more level of detail so the circles again represent",
    "start": "563160",
    "end": "569459"
  },
  {
    "text": "the microservices which are called entities in calyx so this is a order is",
    "start": "569459",
    "end": "575700"
  },
  {
    "text": "an Event Source entity stock order is an Event Source entity",
    "start": "575700",
    "end": "580800"
  },
  {
    "text": "and what happens is there's a there's a this these A's there's one in the center",
    "start": "580800",
    "end": "586440"
  },
  {
    "text": "here and there's one right on the edge on the left those are called actions and actions are stateless functions",
    "start": "586440",
    "end": "592800"
  },
  {
    "text": "and these V's are views these are just queryable views so this is event sourcing and cqs command query",
    "start": "592800",
    "end": "599220"
  },
  {
    "text": "responsibility segregation where the commands are handled by the service",
    "start": "599220",
    "end": "604380"
  },
  {
    "text": "entity and the queries are handled by the views and in between those is that each entity",
    "start": "604380",
    "end": "612660"
  },
  {
    "text": "has an event room so what happens is that the action is a function that",
    "start": "612660",
    "end": "617940"
  },
  {
    "text": "received that checkout message that of that a checkout event from the shopping cart off to the left side here",
    "start": "617940",
    "end": "625500"
  },
  {
    "text": "the action then sends a command to create a new order entity",
    "start": "625500",
    "end": "631500"
  },
  {
    "text": "so the order entity is created and when it's created it just simply emits an event like order",
    "start": "631500",
    "end": "637740"
  },
  {
    "text": "created event which gets written into the orders adventure and then that",
    "start": "637740",
    "end": "643200"
  },
  {
    "text": "triggers that event is picked up by another action which the arrow in the center",
    "start": "643200",
    "end": "648480"
  },
  {
    "text": "here is this action then is responsible for taking that order and getting stuck",
    "start": "648480",
    "end": "655860"
  },
  {
    "text": "and this is where things started to get interesting because here an order could have multiple stock",
    "start": "655860",
    "end": "662760"
  },
  {
    "text": "items you know skus to that we need stock for and",
    "start": "662760",
    "end": "669120"
  },
  {
    "text": "um we need to and we need to do this you know um transactionally you know we we want to",
    "start": "669120",
    "end": "675300"
  },
  {
    "text": "allocate stock to the order but we don't want you know we we want to make sure that this happens precisely and doesn't",
    "start": "675300",
    "end": "681120"
  },
  {
    "text": "corrupt the data or anything like that so you know they say that this action uh",
    "start": "681120",
    "end": "687060"
  },
  {
    "text": "function sends a command to the stock order and the stock order does something you know to allocate stock which emits",
    "start": "687060",
    "end": "694920"
  },
  {
    "text": "maybe one or more events to the event room but the the challenge is that",
    "start": "694920",
    "end": "701640"
  },
  {
    "text": "the problem is it's like we have quantities like the order has a quantity you know that skew one wants a quantity",
    "start": "701640",
    "end": "707880"
  },
  {
    "text": "of two skew two wants a quantity of three and the challenge here is that",
    "start": "707880",
    "end": "714420"
  },
  {
    "text": "when we're doing this we're trying to um you know say uh consume some stock",
    "start": "714420",
    "end": "721200"
  },
  {
    "text": "like I need two of this you know so like say the excuse one has a you know maybe a hundred in inventory and we want to",
    "start": "721200",
    "end": "728160"
  },
  {
    "text": "reduce that inventory from 100 to 98 because we need two items so we're doing some kind of a decrement",
    "start": "728160",
    "end": "733380"
  },
  {
    "text": "on the inventory quantity but this is not a a durable",
    "start": "733380",
    "end": "742579"
  },
  {
    "text": "totally reliable operation and the reason being that what can happen is that the event of say decrementing the",
    "start": "742579",
    "end": "751680"
  },
  {
    "text": "stock that will trigger the decrementing the stock and getting written to the order the stock order event Journal that",
    "start": "751680",
    "end": "758880"
  },
  {
    "text": "could happen but before it acknowledges that back to the action the action is waiting for all this to happen so that",
    "start": "758880",
    "end": "764820"
  },
  {
    "text": "it knows that the message was consumed say something fails I turned everything",
    "start": "764820",
    "end": "769860"
  },
  {
    "text": "red here something fails so the action goes out that last operation failed what",
    "start": "769860",
    "end": "775620"
  },
  {
    "text": "the actions will do is it's just going to do a return whatever the failure was",
    "start": "775620",
    "end": "780660"
  },
  {
    "text": "when the failure is the problem is resolved and everything's back online the action is going to retry that",
    "start": "780660",
    "end": "788700"
  },
  {
    "text": "operation and this is where the problem starts because when we retry the operation we need to make sure that we",
    "start": "788700",
    "end": "795480"
  },
  {
    "text": "don't decrement some more stock you know because we we did decrement some stock",
    "start": "795480",
    "end": "801180"
  },
  {
    "text": "but the action didn't know about it and now we're gonna with because it's got an automatic retry we're going to decrement",
    "start": "801180",
    "end": "807540"
  },
  {
    "text": "some more stuff so we're riding into here are the first two of four things that I want to cover",
    "start": "807540",
    "end": "813600"
  },
  {
    "text": "here that that really kind of guide you and are the realities of doing you know",
    "start": "813600",
    "end": "819720"
  },
  {
    "text": "event-driven types of systems the first one being at least once delivery so what I was talking about here is that",
    "start": "819720",
    "end": "827160"
  },
  {
    "text": "this action is it is fed by calyx events and the action then performs some",
    "start": "827160",
    "end": "835500"
  },
  {
    "text": "operation and what and only when that action is successful in performing that operation that tells tells calyx all",
    "start": "835500",
    "end": "843060"
  },
  {
    "text": "right it's time to get more events if when there's a failure of this process here and the action doesn't",
    "start": "843060",
    "end": "850200"
  },
  {
    "text": "acknowledge or if it or it says there was a failure that tells calyx okay we still haven't processed this message so",
    "start": "850200",
    "end": "857100"
  },
  {
    "text": "it's going to retry it so that's what it um at least once delivery is that what",
    "start": "857100",
    "end": "863880"
  },
  {
    "text": "it means is that every single message will get delivered but in some cases",
    "start": "863880",
    "end": "869700"
  },
  {
    "text": "some messages will get delivered more than once which gets into the next point that I've",
    "start": "869700",
    "end": "875519"
  },
  {
    "text": "highlighted here that that the consumer of these messages need to consider item",
    "start": "875519",
    "end": "881279"
  },
  {
    "text": "potency they need to be item potent so that like in our case when we do get that same hey we need to",
    "start": "881279",
    "end": "888959"
  },
  {
    "text": "allocate some stock message twice that we don't um keep allocating stock over and over",
    "start": "888959",
    "end": "895860"
  },
  {
    "text": "and over again until you know the the whole operation is successfully completed this really drives things because now",
    "start": "895860",
    "end": "903720"
  },
  {
    "text": "it's like okay I can't do it this way I need to come up with some other a way of",
    "start": "903720",
    "end": "909660"
  },
  {
    "text": "of Designing the system to to handle this stock allocation to an order so I thought right",
    "start": "909660",
    "end": "916199"
  },
  {
    "text": "this is getting complicated so I introduced us a third service a third",
    "start": "916199",
    "end": "921300"
  },
  {
    "text": "entity a college shipping order and in shipping order the idea was that order is just kind of interested in the full",
    "start": "921300",
    "end": "927480"
  },
  {
    "text": "life cycle of handling orders but the actual process of allocating stock to an",
    "start": "927480",
    "end": "933480"
  },
  {
    "text": "order I was starting to delegate out I wanted to have something that was just focused on allocating stock",
    "start": "933480",
    "end": "939720"
  },
  {
    "text": "but the same problem exists with shipping order that I had with order between shipping order to stock order or",
    "start": "939720",
    "end": "945240"
  },
  {
    "text": "ordered a stock order so I needed to do something else the solution that I finally came up with",
    "start": "945240",
    "end": "951959"
  },
  {
    "text": "and this took some thinking but um but now that I've seen the pattern like this",
    "start": "951959",
    "end": "957240"
  },
  {
    "text": "is one of these patterns that I see a lot is I needed to take things down to another level of granularity and what I",
    "start": "957240",
    "end": "963959"
  },
  {
    "text": "mean by that is that what happens here these arrows represent flows of events",
    "start": "963959",
    "end": "970079"
  },
  {
    "text": "between these services and these backwards and forwards flows between some of these and I'll walk through this",
    "start": "970079",
    "end": "975660"
  },
  {
    "text": "in more detail in a moment but what's happening is the shipping order gets created",
    "start": "975660",
    "end": "981260"
  },
  {
    "text": "and here's an order and here's a shipping order the shipping order takes the order but you can see that there's",
    "start": "981260",
    "end": "988079"
  },
  {
    "text": "an order items list in the shipping order hopefully you can see it's big enough and then within each",
    "start": "988079",
    "end": "995279"
  },
  {
    "text": "order item there's a sub list of what I called order SKU items which is the this",
    "start": "995279",
    "end": "1001699"
  },
  {
    "text": "entity this new entity that I created so you can see that for an a given order",
    "start": "1001699",
    "end": "1008180"
  },
  {
    "text": "item for whatever the quantity is there's a an Associated number of",
    "start": "1008180",
    "end": "1014259"
  },
  {
    "text": "individual uniquely identified they each have their own ID order SKU items so the",
    "start": "1014259",
    "end": "1020600"
  },
  {
    "text": "quantity is two so this has a two the quantity for the second cue item skew item skew id2 the quantity is three",
    "start": "1020600",
    "end": "1029480"
  },
  {
    "text": "so there's three order skew items so what's happening is that the shipping",
    "start": "1029480",
    "end": "1035900"
  },
  {
    "text": "order gets created intermits an event says hey I got a new shipping order the action gets that there's another action",
    "start": "1035900",
    "end": "1043220"
  },
  {
    "text": "that receives that event from Shipping order and this action is written to take that event",
    "start": "1043220",
    "end": "1049340"
  },
  {
    "text": "and decompose that one big monolithic shipping order down into five individual",
    "start": "1049340",
    "end": "1056600"
  },
  {
    "text": "in this example order SKU items so five individual order SKU items get",
    "start": "1056600",
    "end": "1062720"
  },
  {
    "text": "created so what What's Happening Here is that the",
    "start": "1062720",
    "end": "1069080"
  },
  {
    "text": "the processes the design process is it was being kind of driven by the",
    "start": "1069080",
    "end": "1074419"
  },
  {
    "text": "realities of at least once delivery and item potency I you know I don't want to",
    "start": "1074419",
    "end": "1080980"
  },
  {
    "text": "consume stock incorrectly and and not and you know it shows that it has been",
    "start": "1080980",
    "end": "1086539"
  },
  {
    "text": "consumed but this some stocks not actually needed for a given order because we we double booked it basically",
    "start": "1086539",
    "end": "1094400"
  },
  {
    "text": "so I want to walk through some of these these four things and a little just a little bit of detail so it",
    "start": "1094400",
    "end": "1101840"
  },
  {
    "text": "um it at least once delivery is what I was talking about but this is an example",
    "start": "1101840",
    "end": "1106940"
  },
  {
    "text": "that's very common in uh other approaches that's called",
    "start": "1106940",
    "end": "1113240"
  },
  {
    "text": "um at most once delivery and it most ones delivery is kind of like this you have a function say some kind of",
    "start": "1113240",
    "end": "1119840"
  },
  {
    "text": "operation that it does two steps one step is that it creates an event say in an event",
    "start": "1119840",
    "end": "1125960"
  },
  {
    "text": "Journal it could be updating a database or you know doing some some operation but then it has another operation where",
    "start": "1125960",
    "end": "1133059"
  },
  {
    "text": "its second operation where say it's putting something into a topic maybe in",
    "start": "1133059",
    "end": "1138080"
  },
  {
    "text": "this example into a conflict topic the problem with this is this is a two-step operation and I actually ran",
    "start": "1138080",
    "end": "1145340"
  },
  {
    "text": "across somebody this isn't uh calyx code this is from some other uh some somebody",
    "start": "1145340",
    "end": "1152000"
  },
  {
    "text": "else and I got a I did a screen capture of this snippet of code where they have",
    "start": "1152000",
    "end": "1158600"
  },
  {
    "text": "these two examples and I've got red arrows and underlines to kind of show what I'm talking about but you can see",
    "start": "1158600",
    "end": "1163820"
  },
  {
    "text": "in this code there's a Save State operation and then there's a publish event operation and there there are two",
    "start": "1163820",
    "end": "1170720"
  },
  {
    "text": "separate steps so what's going on here is that there's",
    "start": "1170720",
    "end": "1176120"
  },
  {
    "text": "this goalie this this gap between the",
    "start": "1176120",
    "end": "1181400"
  },
  {
    "text": "first operation which persists data to a database and the second operation which persists something to a message bus",
    "start": "1181400",
    "end": "1189200"
  },
  {
    "text": "and there's a non-transactional gap between the two and I grabbed this picture of this guy jumping across this",
    "start": "1189200",
    "end": "1195380"
  },
  {
    "text": "little Gap it's got if it's kind of hard to see but it looks like he's got two very expensive cameras in each hand",
    "start": "1195380",
    "end": "1202059"
  },
  {
    "text": "and um I don't know if he's made it or not to me it doesn't look like he's gonna",
    "start": "1202059",
    "end": "1207740"
  },
  {
    "text": "make it but in any case the the idea is maybe he makes it because he looks pretty tall and he's got long legs but I",
    "start": "1207740",
    "end": "1214280"
  },
  {
    "text": "don't know if I'd make it I don't know and I think other people would make but the point is that this Gap here is kind",
    "start": "1214280",
    "end": "1221240"
  },
  {
    "text": "of like this Valley of Doom or this period of vulnerability in this code and",
    "start": "1221240",
    "end": "1227299"
  },
  {
    "text": "really what's happening is what's being put into production then I think this happens a lot is leaky code that most of",
    "start": "1227299",
    "end": "1235640"
  },
  {
    "text": "the time like well into the high 90s you know 90 99 range everything works fine",
    "start": "1235640",
    "end": "1241760"
  },
  {
    "text": "but every once in a while there's a fair that happens at the very very worst time somewhere in between this operation and",
    "start": "1241760",
    "end": "1249380"
  },
  {
    "text": "the second operation and now you have data corruption that the the code obviously wants both of",
    "start": "1249380",
    "end": "1255380"
  },
  {
    "text": "these operations to happen but it's not an atomic operation so you're kind of going into production",
    "start": "1255380",
    "end": "1261620"
  },
  {
    "text": "with these teeny little leaks that will drive you crazy I've been in this kind",
    "start": "1261620",
    "end": "1266660"
  },
  {
    "text": "of situation and it's not a fun place to be at all so the solution to this to get at least",
    "start": "1266660",
    "end": "1273620"
  },
  {
    "text": "one's delivery is that the functions the the producer simply produces whatever",
    "start": "1273620",
    "end": "1279679"
  },
  {
    "text": "they're they're producing and then there's some other process running on the side or in the background that is",
    "start": "1279679",
    "end": "1286760"
  },
  {
    "text": "consuming the new data as quickly as possible and passing it on to the",
    "start": "1286760",
    "end": "1293480"
  },
  {
    "text": "consumer so the the the and this read side",
    "start": "1293480",
    "end": "1298520"
  },
  {
    "text": "processes I'm calling it is usually if this is a very coffee-like type of operation you know Kafka is famous for",
    "start": "1298520",
    "end": "1304880"
  },
  {
    "text": "he's just reading by offset and if it fails when it restarts it's just going",
    "start": "1304880",
    "end": "1310460"
  },
  {
    "text": "to pick up where it left off which means it could be that some messages that were sent will get sent again which is okay",
    "start": "1310460",
    "end": "1316640"
  },
  {
    "text": "but as long as you've designed you know that's going to happen and you design the system for it then you can deal with",
    "start": "1316640",
    "end": "1322280"
  },
  {
    "text": "it item potency also comes in here because if there's a state changing operation on",
    "start": "1322280",
    "end": "1328520"
  },
  {
    "text": "the consumer side that state changing operation has to be written where if it when it",
    "start": "1328520",
    "end": "1335299"
  },
  {
    "text": "gets the same message twice the result is the same as the first time the second time the third time at the end time it's",
    "start": "1335299",
    "end": "1342380"
  },
  {
    "text": "an item quoting operation and what I've been doing in the test code that I write",
    "start": "1342380",
    "end": "1347900"
  },
  {
    "text": "for these calyx services this I I'm getting in the habit of always writing",
    "start": "1347900",
    "end": "1353240"
  },
  {
    "text": "item potency tests I'll set up the service I'll get an entity into a certain State and then I'll send it a",
    "start": "1353240",
    "end": "1359659"
  },
  {
    "text": "command to make a change of state so and I'll make sure that the state changed the way I want it and then I'll send",
    "start": "1359659",
    "end": "1365120"
  },
  {
    "text": "that same command again I'll make sure that the state still looks like what it's supposed to be so I'm I'm designing",
    "start": "1365120",
    "end": "1371360"
  },
  {
    "text": "specifically and implementing for item potency this is multi-transactional as well this",
    "start": "1371360",
    "end": "1377360"
  },
  {
    "text": "is really important because for for a long time we've lived in a world where",
    "start": "1377360",
    "end": "1383000"
  },
  {
    "text": "we've had you know this wonderful comfortable database world where we have",
    "start": "1383000",
    "end": "1388039"
  },
  {
    "text": "these lovely Atomic transactions but when you start to build distributed systems in which a lot of us are now",
    "start": "1388039",
    "end": "1394159"
  },
  {
    "text": "with microservice systems and things like that you've left the multi-transaction world if you have",
    "start": "1394159",
    "end": "1399620"
  },
  {
    "text": "multiple services that are triggering each other to perform State changes outside the bounds of a transaction you",
    "start": "1399620",
    "end": "1406520"
  },
  {
    "text": "you need to consider these things if you don't you're going to have those leaks those little buckets picking up those",
    "start": "1406520",
    "end": "1412280"
  },
  {
    "text": "little drops of water every drop is a unhappy customer is unhappy business is",
    "start": "1412280",
    "end": "1418880"
  },
  {
    "text": "unhappy manager is an unhappy developer the other final thing the fourth thing",
    "start": "1418880",
    "end": "1425299"
  },
  {
    "text": "is that the system is eventually consistent in that the function writes",
    "start": "1425299",
    "end": "1430340"
  },
  {
    "text": "an operation the data is in the journal it's there to be used sometime later this readside process is going to pick",
    "start": "1430340",
    "end": "1437659"
  },
  {
    "text": "up that data and and you know send it to the consumer but it doesn't happen as a single Atomic operation it happens is",
    "start": "1437659",
    "end": "1444679"
  },
  {
    "text": "multiple independent operations which is um which is the eventual consistency",
    "start": "1444679",
    "end": "1451280"
  },
  {
    "text": "so going back to this design this is where things get interesting and I'm going to walk through some of the",
    "start": "1451280",
    "end": "1457039"
  },
  {
    "text": "higher level parts of it and then we're going to focus on the the uh the Eventing between the order SKU item and",
    "start": "1457039",
    "end": "1462679"
  },
  {
    "text": "the stock screen so like I said you know there's a client clients are loading up their own shopping carts you know I have",
    "start": "1462679",
    "end": "1468500"
  },
  {
    "text": "a shopping cart you have a shopping cart somebody else has a shopping cart each one of us has their own our own instance of a shopping cart the state of each of",
    "start": "1468500",
    "end": "1475880"
  },
  {
    "text": "our shopping carts is you know what our shopping carts look like and when somebody presses the uh the buy",
    "start": "1475880",
    "end": "1482840"
  },
  {
    "text": "button that triggers an event you know like a checkout event and that checkout event admit is emitted",
    "start": "1482840",
    "end": "1489080"
  },
  {
    "text": "by the shopping cart and there's an action that picks it up and sends a command to a downstream service in this",
    "start": "1489080",
    "end": "1495860"
  },
  {
    "text": "case order to say hey order we need to create a new order when an order is created",
    "start": "1495860",
    "end": "1501200"
  },
  {
    "text": "intermits an event and here I just want to show where the same event could be picked up by multiple consumers so in",
    "start": "1501200",
    "end": "1508100"
  },
  {
    "text": "this case there's an order item I'm not really going to go any detail on this because this is just used for like an",
    "start": "1508100",
    "end": "1513679"
  },
  {
    "text": "example of doing queries and um uh manipulating data but the shipping",
    "start": "1513679",
    "end": "1520400"
  },
  {
    "text": "order picks up the the event when the shipping order picks up the event like I said before it emits an",
    "start": "1520400",
    "end": "1527059"
  },
  {
    "text": "event and says hey I got this new shipping order it's blown up internally the order items into the order SKU item",
    "start": "1527059",
    "end": "1534020"
  },
  {
    "text": "sub list that whole object is passed to uh the action there's an and that action",
    "start": "1534020",
    "end": "1539960"
  },
  {
    "text": "take kind of a decomposes this the single shipping order into the multiple order SKU items",
    "start": "1539960",
    "end": "1547100"
  },
  {
    "text": "again the example two are two order items um one quantity of two one quantity of",
    "start": "1547100",
    "end": "1553039"
  },
  {
    "text": "three that means that that action is going to send fi send out five commands to five different order SKU items to be",
    "start": "1553039",
    "end": "1560600"
  },
  {
    "text": "created and this starts a kind of a whole Cascade of a lot of concurrent operations that are happening all at the",
    "start": "1560600",
    "end": "1567799"
  },
  {
    "text": "same time when he wrote a skew item or discrete items are created they emit events which",
    "start": "1567799",
    "end": "1574580"
  },
  {
    "text": "then start a process of trying to hunt down available stock for that you know",
    "start": "1574580",
    "end": "1580520"
  },
  {
    "text": "order SKU item and this is where I want to dive into more detail",
    "start": "1580520",
    "end": "1586820"
  },
  {
    "text": "um of how the interaction occurs in an event-driven flow between the order SKU",
    "start": "1586820",
    "end": "1592760"
  },
  {
    "text": "item and the stock screen if you graph this then I think this is one of the most",
    "start": "1592760",
    "end": "1600080"
  },
  {
    "text": "important things is just kind of how how this whole flow works so I'm just going to walk through it step by step",
    "start": "1600080",
    "end": "1606020"
  },
  {
    "text": "so we've got the order we've got the shipping order remember again the",
    "start": "1606020",
    "end": "1611059"
  },
  {
    "text": "shipping order there was there's multiple order SKU items we've taken each one of these order SKU items that were built into the into the shipping",
    "start": "1611059",
    "end": "1618140"
  },
  {
    "text": "order but now we've created individual entities for each of these order SKU items so what happens is the action that pick",
    "start": "1618140",
    "end": "1627080"
  },
  {
    "text": "that sends those commands to or to SKU item create a new order screw item that",
    "start": "1627080",
    "end": "1632840"
  },
  {
    "text": "produces an event that event gets picked up there's some views that pick up the events but um",
    "start": "1632840",
    "end": "1638480"
  },
  {
    "text": "that's not the main thing here the the event also gets picked up by another",
    "start": "1638480",
    "end": "1643520"
  },
  {
    "text": "action remember actions or stateless functions they're kind of the glue that ties everything together because",
    "start": "1643520",
    "end": "1650779"
  },
  {
    "text": "actions are the things that can do things like perform a query so in this case that's exactly what this action",
    "start": "1650779",
    "end": "1656600"
  },
  {
    "text": "does it got a message from the Avenger okay Alex passed a message and invoked",
    "start": "1656600",
    "end": "1662720"
  },
  {
    "text": "the function to say hey I've got this new message for you the function gets that message",
    "start": "1662720",
    "end": "1668779"
  },
  {
    "text": "and the first thing it does is it performs a query against this View and this view is set up for",
    "start": "1668779",
    "end": "1675500"
  },
  {
    "text": "doing a query against available stock skew items for a given stock ID",
    "start": "1675500",
    "end": "1682400"
  },
  {
    "text": "so the query result comes back and there's two possible outcomes either there is available stock for this SKU",
    "start": "1682400",
    "end": "1689480"
  },
  {
    "text": "item right or there's no available stock if there's no available stock the action",
    "start": "1689480",
    "end": "1695480"
  },
  {
    "text": "is just going to in turn send a command back to the order SKU item and say hey put",
    "start": "1695480",
    "end": "1701000"
  },
  {
    "text": "yourself into a backorder state right now there's no stock available and I'll get back to this one in a minute however",
    "start": "1701000",
    "end": "1706279"
  },
  {
    "text": "if there is stock available what the action will do it will it will grab one of those available stock SKU items and",
    "start": "1706279",
    "end": "1713179"
  },
  {
    "text": "it will build a command to send to that stocks view item service and the the service request is I",
    "start": "1713179",
    "end": "1721100"
  },
  {
    "text": "need the order screw item effectively wants to join with a stock experiment we",
    "start": "1721100",
    "end": "1726860"
  },
  {
    "text": "want to identify here's a specific order skew item we want a physical unit of stock excuse me for that order screw",
    "start": "1726860",
    "end": "1734059"
  },
  {
    "text": "item so the command comes into the stock skew item and there's two possible outcomes",
    "start": "1734059",
    "end": "1739340"
  },
  {
    "text": "here either the stock Square item is still available or it's not so it's the request is",
    "start": "1739340",
    "end": "1745760"
  },
  {
    "text": "either accepted or is rejected now the reason this can happen again this it's the eventual consistency that between",
    "start": "1745760",
    "end": "1752900"
  },
  {
    "text": "the time we do the query and the time we actually get the command into the stocks again there's no locking",
    "start": "1752900",
    "end": "1758720"
  },
  {
    "text": "going on here and somebody else could have grabbed that stock skew item that um this command is going for and it's no",
    "start": "1758720",
    "end": "1766700"
  },
  {
    "text": "longer available so the the idea is that the stock screw item is the single point",
    "start": "1766700",
    "end": "1772640"
  },
  {
    "text": "of processing of of handling this no locks are required because it's a single Rider uh type of a principal here so the",
    "start": "1772640",
    "end": "1781039"
  },
  {
    "text": "stock screw item uh takes that command and if it's still available it will accept the join request if it's not",
    "start": "1781039",
    "end": "1787460"
  },
  {
    "text": "available so in either case it produces an event",
    "start": "1787460",
    "end": "1793640"
  },
  {
    "text": "that gets picked up by a third action which is taking the event from the stocks you item and sending a command to",
    "start": "1793640",
    "end": "1800779"
  },
  {
    "text": "the order securing if the join was accepted then the order screw item is",
    "start": "1800779",
    "end": "1806659"
  },
  {
    "text": "updated you know what state has changed to reflect yep we've we've got an A",
    "start": "1806659",
    "end": "1812480"
  },
  {
    "text": "stock screw item for this order Square if it was rejected what that's going to trigger is that",
    "start": "1812480",
    "end": "1818960"
  },
  {
    "text": "specific order skew item is going to just simply omit an event that's going to trigger the whole process all over",
    "start": "1818960",
    "end": "1825679"
  },
  {
    "text": "again to try and find an available stocks to item",
    "start": "1825679",
    "end": "1831080"
  },
  {
    "text": "so this is the way the system works the the really interesting thing here is that we've got two independent very",
    "start": "1831080",
    "end": "1838460"
  },
  {
    "text": "Loosely coupled micro Services here order SKU item in stock skew item they're both making independent",
    "start": "1838460",
    "end": "1845740"
  },
  {
    "text": "non-transactional state changes but because of the design of the sequence of",
    "start": "1845740",
    "end": "1851059"
  },
  {
    "text": "events that you know I designed as a design you know the the designer of this system",
    "start": "1851059",
    "end": "1856460"
  },
  {
    "text": "they come to a mutually agreeable set of State changes your first the stock screw",
    "start": "1856460",
    "end": "1861559"
  },
  {
    "text": "item if it accepts a join request it changes its state to say yep I know exactly what order SKU item I belong to",
    "start": "1861559",
    "end": "1869059"
  },
  {
    "text": "it updates itself with that information then that stocks item admits an event which goes back to the order SKU item",
    "start": "1869059",
    "end": "1876080"
  },
  {
    "text": "and the order screw item gets that that command is desire I've got a an available stock SKU item I'm going to",
    "start": "1876080",
    "end": "1882500"
  },
  {
    "text": "change my state to reflect the stack the state the status that um I've I've been",
    "start": "1882500",
    "end": "1888260"
  },
  {
    "text": "allocated stock so it the nice thing about this is that each one of these services are really",
    "start": "1888260",
    "end": "1895700"
  },
  {
    "text": "simple there's barely any business logic in it the the kind of the the the fun of",
    "start": "1895700",
    "end": "1901460"
  },
  {
    "text": "this is the actual design of the sequence of events that goes on between these two things which honestly to be",
    "start": "1901460",
    "end": "1907279"
  },
  {
    "text": "honest with you it took me some time to work out just because it was this this was one of my first exercises to go in",
    "start": "1907279",
    "end": "1913460"
  },
  {
    "text": "this much detail of doing it but like I said now that I've I've gone through this",
    "start": "1913460",
    "end": "1918860"
  },
  {
    "text": "I've I've seen the same pattern in other things that I'm doing and this kind of",
    "start": "1918860",
    "end": "1924340"
  },
  {
    "text": "uh sequence of events where you come with up with mutually agreeable State changes is getting to be second nature",
    "start": "1924340",
    "end": "1930799"
  },
  {
    "text": "to me now it's it's quite easy also the Brilliance of this is that this is a dead solid type of implementation",
    "start": "1930799",
    "end": "1938360"
  },
  {
    "text": "anything can break here and when it recovers itself feels it just picks up",
    "start": "1938360",
    "end": "1943399"
  },
  {
    "text": "where I left off so anything to break and it just keeps going and of course it scales and and all those other things",
    "start": "1943399",
    "end": "1950000"
  },
  {
    "text": "and because of the way because I'm doing it at a kind of a lower level of granularity I'm not doing it at an order",
    "start": "1950000",
    "end": "1956179"
  },
  {
    "text": "level of granularity this is all happening like at the items the individual stock items that need to be",
    "start": "1956179",
    "end": "1961880"
  },
  {
    "text": "allocated it's a high degree of concurrency that's happening here so in",
    "start": "1961880",
    "end": "1967340"
  },
  {
    "text": "a real system processing lots of orders this would be a simple database operations we're just inserting events",
    "start": "1967340",
    "end": "1973940"
  },
  {
    "text": "into journals those events are being picked up sent to actions actions make decisions do queries that that type of",
    "start": "1973940",
    "end": "1980360"
  },
  {
    "text": "thing and then The Individual Services basically perform very simple non-locking non-blocking types of",
    "start": "1980360",
    "end": "1987200"
  },
  {
    "text": "operations and the system just kind of Screams you know screens along as it's doing this",
    "start": "1987200",
    "end": "1993380"
  },
  {
    "text": "no leaks as well it's all taking into consideration um at least once delivery means every",
    "start": "1993380",
    "end": "2001120"
  },
  {
    "text": "single message will get delivered it's built to be solid in that each of these operations are designed and I was kind",
    "start": "2001120",
    "end": "2007899"
  },
  {
    "text": "of driven through the design to make them item potent so it can handle when multiple the same messages delivered",
    "start": "2007899",
    "end": "2014679"
  },
  {
    "text": "more than once no problem and it and it's fast and durable now one other",
    "start": "2014679",
    "end": "2020440"
  },
  {
    "text": "thing I want to cover here is that when New Stock is added new",
    "start": "2020440",
    "end": "2026080"
  },
  {
    "text": "stocks you item entities are created and when that happens those that they just trigger events and",
    "start": "2026080",
    "end": "2033279"
  },
  {
    "text": "say hey I've got a new stock SKU item that event gets written to the journal which gets picked up by this um action",
    "start": "2033279",
    "end": "2040000"
  },
  {
    "text": "on the left what it does is it does a query Against The View",
    "start": "2040000",
    "end": "2045399"
  },
  {
    "text": "that is a view is there to to look up back ordered order SKU items by SKU ID",
    "start": "2045399",
    "end": "2054040"
  },
  {
    "text": "so if the query finds some some back ordered SKU items or to skew items it's going to",
    "start": "2054040",
    "end": "2061240"
  },
  {
    "text": "then send a command to that order SKU item and say hey I've got some stock to join with you so now the pro the flow is",
    "start": "2061240",
    "end": "2067179"
  },
  {
    "text": "reversed I've been talking about for more to skew item to stock scrim and that flow but",
    "start": "2067179",
    "end": "2073000"
  },
  {
    "text": "the the kind of the the same flow but now in the reverse Direction stocks",
    "start": "2073000",
    "end": "2078040"
  },
  {
    "text": "hunting down or disk events instead of orderscore atoms hunting down stock but you know there's a lot of symmetry",
    "start": "2078040",
    "end": "2084820"
  },
  {
    "text": "here in the way this this works so that's the the behavior here",
    "start": "2084820",
    "end": "2090820"
  },
  {
    "text": "so the stock SKU item you know does all this work it emits it those events you know we've",
    "start": "2090820",
    "end": "2097839"
  },
  {
    "text": "seen this at a lower level of detail here uh in the past few minutes the order skew item when it changes its",
    "start": "2097839",
    "end": "2104920"
  },
  {
    "text": "state it emits an event that goes back to the shipping order and the shipping order is updating its state to reflect",
    "start": "2104920",
    "end": "2111780"
  },
  {
    "text": "individual order screw items that have been allocated stock",
    "start": "2111780",
    "end": "2116859"
  },
  {
    "text": "and what's happening here you can see like this is on the left these are a couple of the order SKU items and you",
    "start": "2116859",
    "end": "2124000"
  },
  {
    "text": "can see now there's an artist qid underlying the first underline and then there's a stock",
    "start": "2124000",
    "end": "2130060"
  },
  {
    "text": "SKU ID the second underline so you can see that these both of these order screw items",
    "start": "2130060",
    "end": "2135540"
  },
  {
    "text": "have been allocated stock so the these order SKU items emitted an event with",
    "start": "2135540",
    "end": "2140920"
  },
  {
    "text": "this information which goes back to the shipping order to the shipping order hunts down it just digs into the order",
    "start": "2140920",
    "end": "2147400"
  },
  {
    "text": "items list and then the order SKU items sub list and hunts down that order skew",
    "start": "2147400",
    "end": "2153040"
  },
  {
    "text": "item and it changes its state in there as well so now that the shipping order sees every change as different units of",
    "start": "2153040",
    "end": "2161500"
  },
  {
    "text": "stock are allocated to the shipping order and then it can monitor the",
    "start": "2161500",
    "end": "2166599"
  },
  {
    "text": "progress and you know so for example when all of the items within a given",
    "start": "2166599",
    "end": "2171940"
  },
  {
    "text": "order skew items within a with a given order item have been allocated stock it",
    "start": "2171940",
    "end": "2177280"
  },
  {
    "text": "will emit an event that says all right um skew one is we have all the stock we",
    "start": "2177280",
    "end": "2182500"
  },
  {
    "text": "need for skew one and the same thing would happen in force Q2 which means that",
    "start": "2182500",
    "end": "2188680"
  },
  {
    "text": "um the shipping order is emitting events which are updating or changing the state of the order item",
    "start": "2188680",
    "end": "2194619"
  },
  {
    "text": "you know the order item has ship dates in it as well so the whole shipping process flows back Upstream from stock",
    "start": "2194619",
    "end": "2202960"
  },
  {
    "text": "skew item to order SKU item to shipping order back to order to show that the",
    "start": "2202960",
    "end": "2208540"
  },
  {
    "text": "state of the order you know have we found all the stock that we that we need for an order is something still not",
    "start": "2208540",
    "end": "2214119"
  },
  {
    "text": "something back ordered that type of thing and you can see here",
    "start": "2214119",
    "end": "2221320"
  },
  {
    "text": "um you know all the uh the the ship dates our time stamps are are updated and the",
    "start": "2221320",
    "end": "2229420"
  },
  {
    "text": "the the associated order has um that shift to UTC it was kind of at",
    "start": "2229420",
    "end": "2235720"
  },
  {
    "text": "the default 1970 time stamp and now it's at a um you know occurred time step to",
    "start": "2235720",
    "end": "2241300"
  },
  {
    "text": "indicate that we found stock for for all this order so that's the flow in the in this system",
    "start": "2241300",
    "end": "2250140"
  },
  {
    "text": "um another thing I want to point out though is that um the shipping order this this concept of lists",
    "start": "2250420",
    "end": "2257320"
  },
  {
    "text": "of like a parent you know you can think of the shipping order as kind of apparent",
    "start": "2257320",
    "end": "2263020"
  },
  {
    "text": "um to the the order SKU item children and there's kind of a one-to-many",
    "start": "2263020",
    "end": "2269619"
  },
  {
    "text": "relationship and this this pattern of having the parent have a detailed list of its",
    "start": "2269619",
    "end": "2275800"
  },
  {
    "text": "children is also kind of a recurring theme because this provides item potency as well when a say stock allocated event is",
    "start": "2275800",
    "end": "2285700"
  },
  {
    "text": "sent to a shipping order for the same order SKU item id more than once those",
    "start": "2285700",
    "end": "2294760"
  },
  {
    "text": "are item potent operations if I was just like changing a counter that would be",
    "start": "2294760",
    "end": "2300780"
  },
  {
    "text": "impossible to make it as a or not impossible but it would be more difficult to make it as an item",
    "start": "2300780",
    "end": "2306280"
  },
  {
    "text": "important operation so part of the reasons for this civil list is also to handle item potency as",
    "start": "2306280",
    "end": "2311859"
  },
  {
    "text": "data flows back Upstream from the order SKU items to the",
    "start": "2311859",
    "end": "2317020"
  },
  {
    "text": "um to the shipping order and to the to the order itself",
    "start": "2317020",
    "end": "2322500"
  },
  {
    "text": "so um in this event driven design these things are really important you have to",
    "start": "2324220",
    "end": "2330339"
  },
  {
    "text": "think as you're going through the design you have to think about it at least one's delivery you're you your services",
    "start": "2330339",
    "end": "2336660"
  },
  {
    "text": "are going to get the same message more than once how do you build an item potency that will drive your design I",
    "start": "2336660",
    "end": "2345220"
  },
  {
    "text": "this every time I've gone through design it's more it's kind of an intellectual exercise how do I design this how do I",
    "start": "2345220",
    "end": "2352060"
  },
  {
    "text": "unlearn what I've known before and learn something new and redesign my flow into",
    "start": "2352060",
    "end": "2359859"
  },
  {
    "text": "something that takes the realities of at least once delivery which is great because every single message will get",
    "start": "2359859",
    "end": "2365200"
  },
  {
    "text": "delivered versus the alternative which many people use which scares the heck out of me is that they're using at most",
    "start": "2365200",
    "end": "2371980"
  },
  {
    "text": "once delivery or some kind of sloppy retry without item potency just I think",
    "start": "2371980",
    "end": "2378099"
  },
  {
    "text": "it's a nightmare uh here you just kind of go it's kind of like go with the flow",
    "start": "2378099",
    "end": "2384339"
  },
  {
    "text": "you're gonna work through the design process you're going to run into something and you're going to say oh man",
    "start": "2384339",
    "end": "2390040"
  },
  {
    "text": "this is not an item put in operation and my I think the the voice in your head",
    "start": "2390040",
    "end": "2396520"
  },
  {
    "text": "should be you need to make it item potent it's like Luke you know go with the force yeah you know",
    "start": "2396520",
    "end": "2403240"
  },
  {
    "text": "that it's the same thing Luke go for item potency figure it out you know redesign the flow so that you're you're",
    "start": "2403240",
    "end": "2409900"
  },
  {
    "text": "dealing with the reality of at least one slavery and your operations are item potent because that will make it so that",
    "start": "2409900",
    "end": "2416440"
  },
  {
    "text": "you know things are multi-transactional and also you have to consider things like eventual consistency I showed you a",
    "start": "2416440",
    "end": "2423099"
  },
  {
    "text": "little bit of that as well that the you have to to consider that so a lot of",
    "start": "2423099",
    "end": "2428560"
  },
  {
    "text": "the event flows are kind of um uh Saga type flows because of of of this",
    "start": "2428560",
    "end": "2436780"
  },
  {
    "text": "these realities of building a vent driven types of systems",
    "start": "2436780",
    "end": "2442660"
  },
  {
    "text": "and that's it um a little bit hopefully a little bit quicker session here the QR code is for",
    "start": "2442660",
    "end": "2450099"
  },
  {
    "text": "the excuse me for the GitHub repo of this demo project it's a Java version of the demo project",
    "start": "2450099",
    "end": "2456240"
  },
  {
    "text": "and um it you know it's the one I use to test and play with and the logging's fun",
    "start": "2456240",
    "end": "2463240"
  },
  {
    "text": "to watch when you enter orders and um you know things like that so feel",
    "start": "2463240",
    "end": "2468339"
  },
  {
    "text": "free to grab that and and play with it and you know look look at the code the code's you know for the most part the",
    "start": "2468339",
    "end": "2475180"
  },
  {
    "text": "actual business Logic the code is pretty straightforward the fun part is the design piece of it",
    "start": "2475180",
    "end": "2482940"
  },
  {
    "text": "so I know if we have any questions but um thank you very much for your time and",
    "start": "2483040",
    "end": "2488079"
  },
  {
    "text": "uh I'll hang around for some questions but otherwise we're",
    "start": "2488079",
    "end": "2493020"
  }
]