[
  {
    "text": "um my name is mate I am a Linker maintainer I work for a company called buyant uh where I'm a software engineer",
    "start": "599",
    "end": "7640"
  },
  {
    "text": "you can reach out to me on social media um I'm on Twitter probably should have changed the logo uh you can find me on",
    "start": "7640",
    "end": "13960"
  },
  {
    "text": "GitHub and a couple of slack channels um so yeah welcome to another talk on why",
    "start": "13960",
    "end": "20720"
  },
  {
    "text": "you should rewrite your software and rust um the hype train is very very real",
    "start": "20720",
    "end": "25840"
  },
  {
    "text": "and it's not stopping it's gone strong um and I've got a lot of things that I actually want to cover in this session",
    "start": "25840",
    "end": "32119"
  },
  {
    "text": "so you know kind of a housekeeping thing who here has written a controller before",
    "start": "32119",
    "end": "37960"
  },
  {
    "text": "doesn't matter what language it was in all right all right that helps me out uh what about rust any experience with",
    "start": "37960",
    "end": "44000"
  },
  {
    "text": "rust all right and service meshes okay well that makes my job much",
    "start": "44000",
    "end": "50920"
  },
  {
    "text": "much easier um so we have a couple of rations in a room uh but I still need to",
    "start": "50920",
    "end": "56680"
  },
  {
    "text": "go through the slide you know like why rust um uh you know kind of the the topic of the",
    "start": "56680",
    "end": "62879"
  },
  {
    "text": "stock one because it's fast right you can do your own memory allocations that's very important when you're",
    "start": "62879",
    "end": "68439"
  },
  {
    "text": "working with software where latency is important where it's important that you manage data in a very uh efficient way",
    "start": "68439",
    "end": "75280"
  },
  {
    "text": "um and rust lets you do that in a very nice way it has a very nice uh concurrent API you can do concurrency",
    "start": "75280",
    "end": "81439"
  },
  {
    "text": "with a bunch of tools that were written uh with performance in mind uh back pressure is applied in a nice and",
    "start": "81439",
    "end": "87920"
  },
  {
    "text": "elegant way and overall it's just a a very nice language to work with if you want to get stuff done fast but more so",
    "start": "87920",
    "end": "94439"
  },
  {
    "text": "than that it's safe um right like uh you you don't basically have the same issues",
    "start": "94439",
    "end": "100960"
  },
  {
    "text": "that you have with a with a language like C++ because the compiler really helps you out you have a bunch of",
    "start": "100960",
    "end": "106280"
  },
  {
    "text": "invariants that it basically upholds to ensure that your code is safe uh whether that's in concurrent execution",
    "start": "106280",
    "end": "112280"
  },
  {
    "text": "environments uh or whether that's in a single threed application you know that all holds you have ownership",
    "start": "112280",
    "end": "117680"
  },
  {
    "text": "semantics uh you have marker Tri to ensure that uh you don't share data across threads when it's not meant to be",
    "start": "117680",
    "end": "123840"
  },
  {
    "text": "shared uh and that makes the language really really safe to program in even if you don't have experience with managing",
    "start": "123840",
    "end": "130479"
  },
  {
    "text": "your own memory and last but not least it's sane all right so you might have noticed this",
    "start": "130479",
    "end": "136640"
  },
  {
    "text": "is exactly the the title of my talk but it's saying because the compiler really helps you out if you have to work with",
    "start": "136640",
    "end": "142160"
  },
  {
    "text": "rust and you have an issue where your code doesn't compile uh the compiler is going to give you some very helpful",
    "start": "142160",
    "end": "148120"
  },
  {
    "text": "output that's going to help you resolve your issue uh so all of that makes it just an overall nice language to to",
    "start": "148120",
    "end": "154560"
  },
  {
    "text": "program in uh but for us with linkerd so Linker is a service mesh if you didn't raise",
    "start": "154560",
    "end": "160040"
  },
  {
    "text": "your hand when we uh when I asked about service meshes um I got really good at explaining this over the years by the",
    "start": "160040",
    "end": "165480"
  },
  {
    "text": "way because I've been doing it for a while um but service meshes are basically platform level tools you just use them in your kubernetes environment",
    "start": "165480",
    "end": "172680"
  },
  {
    "text": "to give you features out of the box without really making any changes to your application stack um so the way we",
    "start": "172680",
    "end": "179080"
  },
  {
    "text": "kind of do this is that if you have two services that talk to each other let's say two pods like in this very uh nice",
    "start": "179080",
    "end": "184799"
  },
  {
    "text": "and elaborate diagram uh we're going to introduce a sidecar proxy that's going to take over your traffic um and it's",
    "start": "184799",
    "end": "191680"
  },
  {
    "text": "going to do a bunch of cool stuff with it it's going to provide mtls out of the box it's going to basically provide a",
    "start": "191680",
    "end": "197640"
  },
  {
    "text": "bunch of uh reliability mechanisms like retries and timeouts and and metrics um",
    "start": "197640",
    "end": "204400"
  },
  {
    "text": "it's going to make everything a little bit more performant because we do some very elaborate load balancing techniques",
    "start": "204400",
    "end": "209959"
  },
  {
    "text": "and all of that without actually requiring you to make any changes to your code so it's a pretty pretty sweet",
    "start": "209959",
    "end": "215560"
  },
  {
    "text": "deal if you ask me but if you ask me I'm pretty biased so you know there's that um but for linkerd we need to ensure",
    "start": "215560",
    "end": "222920"
  },
  {
    "text": "that safety and performance are there right like we're in the application's data path with our sidecar proxies we're",
    "start": "222920",
    "end": "228519"
  },
  {
    "text": "going to take over your btes and we're going to send them to their destination uh and if you work with stuff that you",
    "start": "228519",
    "end": "234480"
  },
  {
    "text": "don't want to leak out like credit card information then ideally you uh you want it to be very safe right and in practice",
    "start": "234480",
    "end": "242760"
  },
  {
    "text": "this means no cves right uh we want to ensure that you don't have any buffer",
    "start": "242760",
    "end": "248640"
  },
  {
    "text": "overflow attacks we want to make sure that we don't have any double freeze in our code uh we want to make sure that",
    "start": "248640",
    "end": "254959"
  },
  {
    "text": "everything is performant and up to par but it also means that we want to be performant right because we add at least",
    "start": "254959",
    "end": "261680"
  },
  {
    "text": "two additional hops in your network traffic uh so we don't want to have any GC pauses so go for example is the",
    "start": "261680",
    "end": "267919"
  },
  {
    "text": "language of choice for Network Services in Cloud native because it's very simple to work with it also gives you some nice",
    "start": "267919",
    "end": "273520"
  },
  {
    "text": "mechanisms like you can put stuff on the stack you can put stuff on the Heap you can work with pointers but you have a garbage collector and that kind of gets",
    "start": "273520",
    "end": "279560"
  },
  {
    "text": "in the way of things especially when you need to to deal with a lot of traffic uh",
    "start": "279560",
    "end": "284600"
  },
  {
    "text": "ideally for our proxy we're not going to have any point in time where we just stop the world to collect all of these",
    "start": "284600",
    "end": "290440"
  },
  {
    "text": "uh all of these values that are no longer used um within the application so with rust because everything gets",
    "start": "290440",
    "end": "295840"
  },
  {
    "text": "dropped when when it goes out of scope we we avoid that right like use some memory for a request as soon as you're",
    "start": "295840",
    "end": "301919"
  },
  {
    "text": "done with the request you just discard everything you invalidate it and you know everyone's happy uh and the code is",
    "start": "301919",
    "end": "307360"
  },
  {
    "text": "performant and finally we want to have the ability to scale uh so with Linker D1 it kind of predates me but you know",
    "start": "307360",
    "end": "313759"
  },
  {
    "text": "I've heard the stories um with Linker D1 we used uh jvm proxy we uh we programmed",
    "start": "313759",
    "end": "319639"
  },
  {
    "text": "it in Scala uh and we had a bit of an issue with scaling down so the jvm was good for scaling up but when you had an",
    "start": "319639",
    "end": "326400"
  },
  {
    "text": "application that didn't really send a bunch of traffic then we were using a lot of memory just by virtue of running",
    "start": "326400",
    "end": "331960"
  },
  {
    "text": "a sidecar container and as soon as we switched to to rust and as soon as you know the proxy became uh machine code so",
    "start": "331960",
    "end": "337560"
  },
  {
    "text": "to speak um everything just became much much better in terms of scaling up and scaling",
    "start": "337560",
    "end": "343280"
  },
  {
    "text": "down uh but we're here to talk about controllers uh not about the proxy um or",
    "start": "343280",
    "end": "349000"
  },
  {
    "text": "sidecars for that matter um and Linker also has a control plane so for us the",
    "start": "349000",
    "end": "354280"
  },
  {
    "text": "control plane is just a set of controllers that we run in kubernetes that basically tell the proxies what they uh what they need to do and",
    "start": "354280",
    "end": "361800"
  },
  {
    "text": "originally they were written in go uh because at the time the rust ecosystem didn't really pick up too much actually",
    "start": "361800",
    "end": "368080"
  },
  {
    "text": "just kind of in general not even in in the cloud native sense uh we had to build a bunch of the rust libraries that",
    "start": "368080",
    "end": "373160"
  },
  {
    "text": "we're currently using from the groundup uh we had a bunch of contributions in Tokyo and Hyper and uh and a bunch of",
    "start": "373160",
    "end": "378880"
  },
  {
    "text": "other libraries that people use in production now uh but with the control plane we kind of resorted to go because",
    "start": "378880",
    "end": "384080"
  },
  {
    "text": "we didn't have the same requirements that we had with the proxy we weren't in the application data path we weren't",
    "start": "384080",
    "end": "389199"
  },
  {
    "text": "dealing with all of these very stringent requirements and we just opted to use something that was easy and that had a very mature ecosystem uh and a quick",
    "start": "389199",
    "end": "396639"
  },
  {
    "text": "thing to to note about our controllers is that they're not very traditional in a sense that we don't really leverage",
    "start": "396639",
    "end": "402800"
  },
  {
    "text": "any big Frameworks um our controllers are very read heavy we basically do no",
    "start": "402800",
    "end": "408000"
  },
  {
    "text": "wres um and their purpose is just to replicate a bunch of data um in 20111 though we uh we made a",
    "start": "408000",
    "end": "416160"
  },
  {
    "text": "choice so linkerd just reached 25 um 21 when was about 2 years ago uh we made a",
    "start": "416160",
    "end": "422160"
  },
  {
    "text": "choice of introducing rust to our control plane um and it was mostly an experiment because we just like",
    "start": "422160",
    "end": "427199"
  },
  {
    "text": "rewriting stuff in Rust um but we also kind of had enough of nil pointer",
    "start": "427199",
    "end": "432280"
  },
  {
    "text": "exceptions and we had enough of bugs that were very very hard to to actually track because they were happening at",
    "start": "432280",
    "end": "439120"
  },
  {
    "text": "runtime um and to be honest we also had enough of putting mutexes over all over",
    "start": "439120",
    "end": "444680"
  },
  {
    "text": "our Maps because it was very hard to to reason with uh with concurrent and shared data",
    "start": "444680",
    "end": "450440"
  },
  {
    "text": "um so with that being said I kind of mentioned controllers a couple of times and for people in the room that are not really familiar um controllers are how",
    "start": "450440",
    "end": "457879"
  },
  {
    "text": "you implement the operator pattern uh and when when I was researching material for the talk I came across this white",
    "start": "457879",
    "end": "463280"
  },
  {
    "text": "paper from uh the cncf about the operator design pattern and I I pulled out this code so the operator design",
    "start": "463280",
    "end": "470240"
  },
  {
    "text": "pattern defines how to manage application and infrastructure resources using domain specific knowledge and declarative State that's a bunch of",
    "start": "470240",
    "end": "476960"
  },
  {
    "text": "buzzwords all put together in there but I really like the quote um because it kind of highlights",
    "start": "476960",
    "end": "482120"
  },
  {
    "text": "my own understanding of of operators and controllers um with our applications we're used to configure them in in two",
    "start": "482120",
    "end": "488479"
  },
  {
    "text": "ways right you configure them statically through a configuration file or through environment variables or you configure",
    "start": "488479",
    "end": "494159"
  },
  {
    "text": "them dynamically which is probably what we kind of do in a cloud native environment right you have a bunch of",
    "start": "494159",
    "end": "499240"
  },
  {
    "text": "dependencies you have a bunch of microservices and they all need to talk to each other and you need to discover configuration dynamically at runtime you",
    "start": "499240",
    "end": "506560"
  },
  {
    "text": "need to make a bunch of API calls and operators in kuber at least my own understanding of them is that they allow",
    "start": "506560",
    "end": "512320"
  },
  {
    "text": "you to automate a bunch of this Dynamic configuration they allow you to extend the kubernetes API service because the",
    "start": "512320",
    "end": "518000"
  },
  {
    "text": "kubernetes API server is very generic it only supports you know core resources that make it tick uh and it just",
    "start": "518000",
    "end": "524039"
  },
  {
    "text": "basically offers you an interface to to deal with configuration management and to uh just automate all of your all of",
    "start": "524039",
    "end": "530040"
  },
  {
    "text": "your stack to support your applications all right and if you want to read more about it um I put the link in here and",
    "start": "530040",
    "end": "535320"
  },
  {
    "text": "I'm going to I'm going to put the slides up too and of course that if you want to write a controller and and that's what this talk is about writing a controller",
    "start": "535320",
    "end": "541160"
  },
  {
    "text": "and rust you need to talk to the kubernetes API server right what is the kubernetes API server it's just an ATP",
    "start": "541160",
    "end": "547040"
  },
  {
    "text": "server um just has a bunch of paths that it manages you can get resources all of the resources are versioned uh but at",
    "start": "547040",
    "end": "554200"
  },
  {
    "text": "the end of the day it's just an HTP server right so in order to talk to an HTTP server you need an HTTP client the",
    "start": "554200",
    "end": "561000"
  },
  {
    "text": "only problem is you need to decorate that client with a bunch of config right you need TLS config you need to somehow",
    "start": "561000",
    "end": "567000"
  },
  {
    "text": "discover the actual API address you need to deal with service account tokens because he probably use arbac there's a",
    "start": "567000",
    "end": "573079"
  },
  {
    "text": "bunch of complicated stuff that you need to do to talk to the API server in order to build a controller uh and most",
    "start": "573079",
    "end": "578600"
  },
  {
    "text": "operators or at least the operators that I've kind of seen out in the wild are written in go primarily because the",
    "start": "578600",
    "end": "584560"
  },
  {
    "text": "library that you get to interact with the API server comes directly from Upstream it's really well optimized and",
    "start": "584560",
    "end": "589959"
  },
  {
    "text": "it just makes writing everything a breeze right you don't need to to complicate yourself at writing everything from scratch you have a bunch",
    "start": "589959",
    "end": "595959"
  },
  {
    "text": "of nice abstractions in other words the ecosystem is very mature um and I think",
    "start": "595959",
    "end": "601320"
  },
  {
    "text": "one of the things that people have at rust is that the ecosystem is not and is not as mature and I'm kind of here to to",
    "start": "601320",
    "end": "608120"
  },
  {
    "text": "convince you that that's not the case but first let's see how you actually use uh client go the Upstream library to to",
    "start": "608120",
    "end": "614040"
  },
  {
    "text": "build a controller uh you can basically create a client you just have some environment config you uh yeah you read",
    "start": "614040",
    "end": "620680"
  },
  {
    "text": "that in you create a generic client and now you can use this generic client to access a bunch of resources you listed resources all well uh but even though",
    "start": "620680",
    "end": "628160"
  },
  {
    "text": "the API server is is just an HTTP server in a trench code uh it takes a lot more",
    "start": "628160",
    "end": "633279"
  },
  {
    "text": "to actually run a production grade controller right you need back off policy so you don't overload the API",
    "start": "633279",
    "end": "639040"
  },
  {
    "text": "server uh you need to have some queuing strategy in there you need to subscribe to Resource changes there's a bunch of",
    "start": "639040",
    "end": "645480"
  },
  {
    "text": "stuff that's involved and actually writing something that's production grade uh so that's why the go ecosystem",
    "start": "645480",
    "end": "651120"
  },
  {
    "text": "actually has some runtimes that it offers you have controller runtime you have Cube Builder all of them do kind of",
    "start": "651120",
    "end": "656920"
  },
  {
    "text": "the same thing uh they let you just basically use these Frameworks that take ownership of your data and you know they",
    "start": "656920",
    "end": "662880"
  },
  {
    "text": "take a function that reconciles stuff um and you know it abstracts all of that complexity away from you so you don't",
    "start": "662880",
    "end": "669320"
  },
  {
    "text": "have to deal with it which is nice but that doesn't mean that we have to use go right uh again going back to",
    "start": "669320",
    "end": "676160"
  },
  {
    "text": "my rust evangelism Strikeforce meme um we can just rewrite the entire ecosystem in Rust and this is what people have",
    "start": "676160",
    "end": "682440"
  },
  {
    "text": "been doing for the past two years three years I don't know uh timeline's a little bit hazy uh but the point is that",
    "start": "682440",
    "end": "688920"
  },
  {
    "text": "the CF landscape for rust is thriving I only have a couple of logos so you know",
    "start": "688920",
    "end": "694079"
  },
  {
    "text": "like don't the slide's not really a mirror of what's actually happening in the landscape uh but there's a bunch of",
    "start": "694079",
    "end": "699399"
  },
  {
    "text": "stuff out there already uh that's using rust in production um and here's where I guess",
    "start": "699399",
    "end": "705880"
  },
  {
    "text": "the talk gets interesting um rust's answer to client go is the cube crate uh",
    "start": "705880",
    "end": "711040"
  },
  {
    "text": "has anyone here used a cube crate before all right not a lot of hands that's good because I'm going to talk a",
    "start": "711040",
    "end": "716959"
  },
  {
    "text": "lot about it um it's like half of the presentation I guess so the cube crate is basically rust answer to client go",
    "start": "716959",
    "end": "724480"
  },
  {
    "text": "right uh it's a library uh basically a crate that contains for other libraries",
    "start": "724480",
    "end": "729720"
  },
  {
    "text": "that give you all of the abstractions you need to actually interact with the API server because again fundamentally",
    "start": "729720",
    "end": "735279"
  },
  {
    "text": "everything that you need to do in a controller when you write a controller is to interact with the API server so",
    "start": "735279",
    "end": "740360"
  },
  {
    "text": "you have a client crate that basically abstracts away all of this client creation stuff you can read it from the environment you can create HTTP clients",
    "start": "740360",
    "end": "746920"
  },
  {
    "text": "you have a cord trade that provides a bunch of of interfaces that you can use to to build better abstractions or to",
    "start": "746920",
    "end": "752680"
  },
  {
    "text": "work with all of the types it has a derive crate that allows you to create crds um and it has a runtime in case you",
    "start": "752680",
    "end": "759040"
  },
  {
    "text": "don't want to worry about all of the gluc code that you actually have to write so this is how it works if we kind",
    "start": "759040",
    "end": "764720"
  },
  {
    "text": "of compare this to the to the initial go example that we had it's essentially the same thing it's just a different library",
    "start": "764720",
    "end": "771079"
  },
  {
    "text": "and a different language so instead of having Go's usual main entry point we have an asynchronous function because",
    "start": "771079",
    "end": "777360"
  },
  {
    "text": "most of the stuff that we were're going to build and rust especially in a cloud native ecosystem probably needs to be concurrent so we need uh an asynchronous",
    "start": "777360",
    "end": "784440"
  },
  {
    "text": "runtime going to use Tokyo because it's what people generally tend to use uh and it's battle tested um and then the flow",
    "start": "784440",
    "end": "790480"
  },
  {
    "text": "is basically the same as the go counter part you create a client um you create an API type and I'm going to talk about",
    "start": "790480",
    "end": "796639"
  },
  {
    "text": "this in a in a second um and then you use this API type to to list all of the pods so what's all of this code that I",
    "start": "796639",
    "end": "802720"
  },
  {
    "text": "just put on the screen um well obviously the client is pretty self-explanatory you know you just have a function that",
    "start": "802720",
    "end": "808720"
  },
  {
    "text": "creates a client but the API type is looking a little bit weird especially if you're not used to rust syntax um it's",
    "start": "808720",
    "end": "814839"
  },
  {
    "text": "basically a wrapper type that's generic over a type parameter this type parameter is just a resource that you",
    "start": "814839",
    "end": "820000"
  },
  {
    "text": "have in your kubernetes cluster it can be a pod it can be a crd it can be a namespace whatever uh and it allows you",
    "start": "820000",
    "end": "826040"
  },
  {
    "text": "to actually interact with the API server the reason why it's generic over a type parameter is because different resources",
    "start": "826040",
    "end": "832040"
  },
  {
    "text": "require different interfaces right if you're dealing with cluster scope resources like cluster roles or name",
    "start": "832040",
    "end": "838240"
  },
  {
    "text": "spaces then you're going to want to have a different interface than if you're dealing with a pod like for one the Pod",
    "start": "838240",
    "end": "843720"
  },
  {
    "text": "takes in the namespace uh so the generics look a little bit scary but they're actually pretty intuitive once",
    "start": "843720",
    "end": "849639"
  },
  {
    "text": "you uh get to work with them a little bit but aside from all of the simple stuff um because we're not just building",
    "start": "849639",
    "end": "855480"
  },
  {
    "text": "CLI applications right we're building controllers QBs has a runtime uh that",
    "start": "855480",
    "end": "860519"
  },
  {
    "text": "has all of the batteries included um so you can create the same style of controllers that you can usually create",
    "start": "860519",
    "end": "866079"
  },
  {
    "text": "with the Upstream client go library or the controller runtime time uh and this is this is an example that I took from",
    "start": "866079",
    "end": "872440"
  },
  {
    "text": "the Cubs um codebase you don't really need to understand it too much because I'm going to go into into more examples",
    "start": "872440",
    "end": "878920"
  },
  {
    "text": "soon uh but it basically lets you create this controller structure that takes ownership of everything that you pass",
    "start": "878920",
    "end": "884399"
  },
  {
    "text": "inside you pass it a reconciler function and it just does its thing so like really easy you can get a controller up",
    "start": "884399",
    "end": "889600"
  },
  {
    "text": "and running in in no time um and this is just kind of explaining the same thing",
    "start": "889600",
    "end": "895120"
  },
  {
    "text": "um but QBs is really more than just a runtime right like it contains a bunch of glue code it's the controller runtime",
    "start": "895120",
    "end": "901279"
  },
  {
    "text": "put together it's Cube Builder it's uh it's Cent go it's it's everything packaged in a nice neat uh box um and to",
    "start": "901279",
    "end": "909800"
  },
  {
    "text": "kind of illustrate how easy it is to create a controller using QBs um I actually set out to create a",
    "start": "909800",
    "end": "916079"
  },
  {
    "text": "controller for a resource that we recently introduced in linkerd so let's say you have a controller right it needs",
    "start": "916079",
    "end": "922560"
  },
  {
    "text": "to do some sort of dynamic configuration it needs to reconcile some resources that's exactly the kind of example that",
    "start": "922560",
    "end": "928360"
  },
  {
    "text": "I wanted to highlight here we have this external workload resource that you don't really need to worry about right it's a crd we want to register some",
    "start": "928360",
    "end": "934800"
  },
  {
    "text": "bindings for the crd and then we want to do something with this crd every single time we we see an instance uh we just",
    "start": "934800",
    "end": "941199"
  },
  {
    "text": "want to we just want to reconcile that instance uh so on the left um is it the",
    "start": "941199",
    "end": "947240"
  },
  {
    "text": "left yeah I guess uh on the left we we have the actual yaml definition so this is what the resource actually looks like",
    "start": "947240",
    "end": "953560"
  },
  {
    "text": "in your cluster once you define it you have a bunch of metadata in there that again you don't really need to be to be worried about uh have some IP some ports",
    "start": "953560",
    "end": "960920"
  },
  {
    "text": "whatever um but what this controller does that I kind of built just for this presentation uh it puts a status on it",
    "start": "960920",
    "end": "967240"
  },
  {
    "text": "uh so statuses are generally things that controllers modify right because you're not really supposed to modify the spec",
    "start": "967240",
    "end": "972839"
  },
  {
    "text": "of an object once you persist it into into ETD uh so this controller will always slap on a ready status whenever",
    "start": "972839",
    "end": "979120"
  },
  {
    "text": "it sees an external workload resource uh and just to show how easy it is to just create the bindings with QBs we have the",
    "start": "979120",
    "end": "984800"
  },
  {
    "text": "bindings on the right so you use a procedural macro uh you have you have a struct that represents your spec you",
    "start": "984800",
    "end": "991240"
  },
  {
    "text": "fill this struct out with all of the data that you actually have in your yaml you slap on some macros uh and at",
    "start": "991240",
    "end": "997120"
  },
  {
    "text": "compile time all of this gets generated for you and you can use it uh and this is what a controller actually looks like",
    "start": "997120",
    "end": "1003440"
  },
  {
    "text": "so we have a reconcile function that's the bread and butter so to speak of our controller um it takes in our actual",
    "start": "1003440",
    "end": "1010600"
  },
  {
    "text": "object and our actual object is behind the uh an atomic reference counted pointer because we want to share it",
    "start": "1010600",
    "end": "1016720"
  },
  {
    "text": "between Freds and because we want to probably store it uh we have a context it's just a shared context of stuff that you might want all",
    "start": "1016720",
    "end": "1023360"
  },
  {
    "text": "of your reconciliation Loops to to keep track of uh in this case the Shar data is just a client we want to reuse the",
    "start": "1023360",
    "end": "1029240"
  },
  {
    "text": "same client instead of building it every single time and then inside the body of this reconcile function you just",
    "start": "1029240",
    "end": "1034880"
  },
  {
    "text": "Implement your reconciliation logic uh so in this case we just want to work with a status uh on line 14 you can see",
    "start": "1034880",
    "end": "1040600"
  },
  {
    "text": "that we get all of the conditions uh if we don't have any conditions we default to an empty to an empty Vector to an",
    "start": "1040600",
    "end": "1046120"
  },
  {
    "text": "empty list and then for every condition we just want to check do we actually have this condition already put in our",
    "start": "1046120",
    "end": "1051559"
  },
  {
    "text": "status if we do then there's nothing for us to do just wait for the resource to change um otherwise we just create this",
    "start": "1051559",
    "end": "1057799"
  },
  {
    "text": "boiler plate condition uh we change the status we write it to the API server we patch it and then again we say call me",
    "start": "1057799",
    "end": "1064320"
  },
  {
    "text": "when something changes with our resource uh and to run it to be honest this is probably a little bit Overkill but I",
    "start": "1064320",
    "end": "1070400"
  },
  {
    "text": "just wanted to prove a point to run it we just have a wrapper function around it uh where we take all of this outof band configuration that our controller",
    "start": "1070400",
    "end": "1076760"
  },
  {
    "text": "might need we pipe it into controller that new um we have some knobs that we can twist but other than that we don't",
    "start": "1076760",
    "end": "1082799"
  },
  {
    "text": "really need to worry about what happens inside right we just pass it a reconcile function we pass it an error policy to",
    "start": "1082799",
    "end": "1088520"
  },
  {
    "text": "share data and then we just say Okay do your thing I'm going to go on focus on my next",
    "start": "1088520",
    "end": "1093600"
  },
  {
    "text": "ticket but the problem is or at least the problem that we noticed in lardy is",
    "start": "1093600",
    "end": "1098760"
  },
  {
    "text": "that sometimes controllers need to hold a lot of State sometimes controllers aren't simply just reconciliation Loops",
    "start": "1098760",
    "end": "1105200"
  },
  {
    "text": "right so Linker control plane it indexes a bunch of state and then it exposes this state to proxies over grpc apis so",
    "start": "1105200",
    "end": "1112320"
  },
  {
    "text": "proxies can always dial in they can get data but we don't actually want to write any data we just want to do a bunch of",
    "start": "1112320",
    "end": "1117840"
  },
  {
    "text": "reads and there are a couple of reasons for this um the first and foremost is",
    "start": "1117840",
    "end": "1123039"
  },
  {
    "text": "that we kind of took this from first principles and we thought about Linker as a distributed system so what do we need in a distributed system well we",
    "start": "1123039",
    "end": "1129039"
  },
  {
    "text": "need to replicate the state because we do not want to have a single failure point right we want to have a separate",
    "start": "1129039",
    "end": "1134440"
  },
  {
    "text": "failure domain so if the API server goes down your traffic's not going to go down because we index all of the state and we",
    "start": "1134440",
    "end": "1140559"
  },
  {
    "text": "keep driving Discovery for all of the proxies we also wanted to ensure that there's a separation of concern right we",
    "start": "1140559",
    "end": "1146640"
  },
  {
    "text": "wanted to ensure that we have clean interfaces around all of the controllers that we build and all of the proxy code",
    "start": "1146640",
    "end": "1152039"
  },
  {
    "text": "that we build uh so we wanted kubernetes to be completely opaque to the proxies and this turned out to be a good thing",
    "start": "1152039",
    "end": "1157320"
  },
  {
    "text": "because we just introduced mesh expansion uh and we really didn't want the proxies to be aware of kubernetes in that specific scenario um and you know",
    "start": "1157320",
    "end": "1165280"
  },
  {
    "text": "the last point is that we can always optimize better in the face of overload because we own the code so there's a bunch of cool stuffff that we can do um",
    "start": "1165280",
    "end": "1172799"
  },
  {
    "text": "inside of our controllers because essentially every single thing that we do is to translate them to domain",
    "start": "1172799",
    "end": "1178240"
  },
  {
    "text": "types so Frameworks generally work well uh in most cases but not for us right we",
    "start": "1178240",
    "end": "1183760"
  },
  {
    "text": "can't use a framework because we don't have a Reconciliation Loop and we just want to read stuff and this applies to",
    "start": "1183760",
    "end": "1189120"
  },
  {
    "text": "using QBs as much as the go controller runtime so we we don't use any of this stuff in our own code this is exactly",
    "start": "1189120",
    "end": "1196880"
  },
  {
    "text": "why we built cubert it's a toolbox with common patterns that we use all throughout our controllers so in go we",
    "start": "1196880",
    "end": "1203720"
  },
  {
    "text": "didn't really go down this round in go we um we just leverage everything that client go gives us have a bunch of glue",
    "start": "1203720",
    "end": "1210280"
  },
  {
    "text": "code and then we just you know kind of duplicate all of that code all throughout our controllers but in Rust we thought that we can do better uh so",
    "start": "1210280",
    "end": "1217159"
  },
  {
    "text": "yeah we built cubert uh which is kind of a general purpose library that offers a bunch of gluc code that helps you write",
    "start": "1217159",
    "end": "1223559"
  },
  {
    "text": "controllers that are very heavy on reads in a much nicer way without you actually having to into all of the abstractions",
    "start": "1223559",
    "end": "1229960"
  },
  {
    "text": "that CS buils so cubert is built on Qs it uses the same kind of runtime",
    "start": "1229960",
    "end": "1235240"
  },
  {
    "text": "Concepts to talk to the API server But it includes a bunch of things like CLI helpers an admin server it has some",
    "start": "1235240",
    "end": "1241000"
  },
  {
    "text": "drain and life cycle helpers to to help you manage uh manage your controller better uh some promethus Metric adapters",
    "start": "1241000",
    "end": "1247880"
  },
  {
    "text": "and stuff that's you know a little bit more opinionated and wouldn't work in a generic fashion so it it's not upstreamed into qars uh but the most",
    "start": "1247880",
    "end": "1255360"
  },
  {
    "text": "important thing is that in cubert the application controls the storeage not the framework and I think this is a very",
    "start": "1255360",
    "end": "1260880"
  },
  {
    "text": "important thing to note when building controllers in general you don't want the framework to own all of your data",
    "start": "1260880",
    "end": "1266400"
  },
  {
    "text": "you want your application to own all of your data and there are some really good advantages to that for one you don't",
    "start": "1266400",
    "end": "1271640"
  },
  {
    "text": "have to hold all of the kubernetes state inside uh your actual controller right",
    "start": "1271640",
    "end": "1277320"
  },
  {
    "text": "you can just prune it as much as you want you just hold all of the data that you actually need to implement your business",
    "start": "1277320",
    "end": "1283440"
  },
  {
    "text": "logic so this is how cuber looks like um might look a little bit confusing but on the right this is kind of our entry",
    "start": "1283440",
    "end": "1289880"
  },
  {
    "text": "point we have this namespaced function we also have a cluster um analogous function that",
    "start": "1289880",
    "end": "1295600"
  },
  {
    "text": "basically does this for cluster uh scope resources uh but it basically takes a store right this is an index it's a",
    "start": "1295600",
    "end": "1301600"
  },
  {
    "text": "store that's protected by a read write LW because we want to share it between Freds um and then it takes a a stream of",
    "start": "1301600",
    "end": "1307520"
  },
  {
    "text": "events so these are all of the events that come from the kubernetes API server and what this does is it calls this",
    "start": "1307520",
    "end": "1313480"
  },
  {
    "text": "index namespaced resource um trait it calls the functions in there after it flattens the stream of events so if you",
    "start": "1313480",
    "end": "1320600"
  },
  {
    "text": "have an event where a pod was created it will call it will call the apply function if a pod was deleted it will",
    "start": "1320600",
    "end": "1327000"
  },
  {
    "text": "call the delete function so basically this namespace thing just makes sure uh your state machine is running correctly",
    "start": "1327000",
    "end": "1333320"
  },
  {
    "text": "and then the index namespace resource trait um simply just applies all of these to your index so it's a it's a",
    "start": "1333320",
    "end": "1339279"
  },
  {
    "text": "very simple kind of way of of structuring your controller um and just to show you how",
    "start": "1339279",
    "end": "1346000"
  },
  {
    "text": "easy it is to implement this is exactly what an index can look like right so in our external workload example um we key",
    "start": "1346000",
    "end": "1352799"
  },
  {
    "text": "everything off by the name of the external workload and then we don't need to hold a status we don't need to hold a",
    "start": "1352799",
    "end": "1358039"
  },
  {
    "text": "spec we don't need to hold any other information about this resource because it's very esoteric it's very kubernetes",
    "start": "1358039",
    "end": "1363600"
  },
  {
    "text": "principled right and we don't need that we just want to know if this workload is ready that's it so we just kind of hold",
    "start": "1363600",
    "end": "1368880"
  },
  {
    "text": "the Boolean in and that actually saves a lot of bites you wouldn't believe it um",
    "start": "1368880",
    "end": "1375640"
  },
  {
    "text": "and this is how you just implement the the trade you know you have an appli function the trade is generic again over",
    "start": "1375640",
    "end": "1380720"
  },
  {
    "text": "the actual resource that you uh that you want to use uh and we say that okay whenever you see this resource whenever",
    "start": "1380720",
    "end": "1386480"
  },
  {
    "text": "you see this external workload and you want to apply it uh just look at its status uh find a condition if you found",
    "start": "1386480",
    "end": "1392120"
  },
  {
    "text": "a condition then just insert it uh if you didn't then just remove it from the store easy peasy you don't have to to",
    "start": "1392120",
    "end": "1398640"
  },
  {
    "text": "actually deal with any reconciliation Loop or any backup strategy or or anything like that and then in the main",
    "start": "1398640",
    "end": "1404960"
  },
  {
    "text": "function you just start the runtime uh you uh create an index you create a future to watch all of",
    "start": "1404960",
    "end": "1411520"
  },
  {
    "text": "these uh resources from the API server and then you just tell the asynchronous runtime like hey I've got a task for you",
    "start": "1411520",
    "end": "1417320"
  },
  {
    "text": "to run just keep running this until we're done with all of our work um and",
    "start": "1417320",
    "end": "1422559"
  },
  {
    "text": "that's it now when you have to choose between cubert or qars um I kind of wanted to",
    "start": "1422559",
    "end": "1430080"
  },
  {
    "text": "highlight that there isn't really a strong preference for one over the other it really depends on what",
    "start": "1430080",
    "end": "1436360"
  },
  {
    "text": "you're trying to build are you trying to build something that's right heavy are you trying to build like more of a traditional controller uh then probably",
    "start": "1436360",
    "end": "1443080"
  },
  {
    "text": "you know QBs is going to be a better choice because it allows you to uh you know just leverage all of these",
    "start": "1443080",
    "end": "1448279"
  },
  {
    "text": "controller like Frameworks uh that abstract all of the kubernetes internals from you uh but if you want to build",
    "start": "1448279",
    "end": "1454039"
  },
  {
    "text": "something that's purposely built for your application domain where you need to work with your own domain types then using something like cubd is probably a",
    "start": "1454039",
    "end": "1460600"
  },
  {
    "text": "better idea because it allows you to um it allows you to structure your application differently and allows you to have control over your storage which",
    "start": "1460600",
    "end": "1467360"
  },
  {
    "text": "is really important when you operate at a high scale um so in the end I guess it's just a matter of which flavor you",
    "start": "1467360",
    "end": "1473360"
  },
  {
    "text": "like most um and it really depends on what your controllers are doing um and",
    "start": "1473360",
    "end": "1479159"
  },
  {
    "text": "then if you want to learn more about mesh expansion my colleague zahari is going to is going to have a talk about it just because I mentioned this",
    "start": "1479159",
    "end": "1484799"
  },
  {
    "text": "external workload resource uh but that about sums it up and in my trial runs this actually went 10 minutes over but I",
    "start": "1484799",
    "end": "1491080"
  },
  {
    "text": "guess you're all experienced with rust so uh didn't have to to explain a bunch of things uh do we have any",
    "start": "1491080",
    "end": "1497320"
  },
  {
    "text": "questions",
    "start": "1497320",
    "end": "1500320"
  },
  {
    "text": "[Applause]",
    "start": "1504650",
    "end": "1509159"
  },
  {
    "text": "oh there's someone over there I don't know who's got the mic",
    "start": "1509720",
    "end": "1514559"
  },
  {
    "text": "so hello thank you for your talk I would like to ask if there are any uh",
    "start": "1519480",
    "end": "1526200"
  },
  {
    "text": "disadvantages that you have noticed uh with uh rust because most of the people",
    "start": "1526200",
    "end": "1532399"
  },
  {
    "text": "they mention the advantages but you usually hear about the disadvantages yeah if there that's a",
    "start": "1532399",
    "end": "1539080"
  },
  {
    "text": "really good question I think the disadvantages that rust has a bit of a steeper learning curve when it comes to",
    "start": "1539080",
    "end": "1544679"
  },
  {
    "text": "using languages like go um so I think go is a very elegant language for example for writing Network Services it gives",
    "start": "1544679",
    "end": "1551320"
  },
  {
    "text": "you a very nice uh and streamlined concurrency model you don't really need to think about what your data is doing",
    "start": "1551320",
    "end": "1556960"
  },
  {
    "text": "you don't really need to you know hold a bunch of uh context in your mind you can just be like very productive in a matter",
    "start": "1556960",
    "end": "1563240"
  },
  {
    "text": "of uh in a matter of hours or days uh but with rust the concurrency model is a bit trickier to reason with right uh",
    "start": "1563240",
    "end": "1570960"
  },
  {
    "text": "first and foremost you have this asyn A8 kind of uh kind of syntax but Futures are lazy and it's a bit of a leaky",
    "start": "1570960",
    "end": "1577880"
  },
  {
    "text": "abstraction right you need to know how Futures work and you need to know how the asynchronous runtime work in order",
    "start": "1577880",
    "end": "1583320"
  },
  {
    "text": "for you to use it so it's a really nice abstraction once you learn how it works uh but with abstractions you shouldn't",
    "start": "1583320",
    "end": "1589480"
  },
  {
    "text": "know how it works and I think that's Russ's biggest disadvantage that I've noticed personally perfect thank you",
    "start": "1589480",
    "end": "1595080"
  },
  {
    "text": "very much yeah any other questions yeah yes hello",
    "start": "1595080",
    "end": "1602039"
  },
  {
    "text": "thanks for the talk um you you talked a lot about performance and memory in the",
    "start": "1602039",
    "end": "1608279"
  },
  {
    "text": "talk um U did you did you have the occasion to compare memory wise if there",
    "start": "1608279",
    "end": "1615720"
  },
  {
    "text": "is a an advantage to to use rust instead of go uh yes we did um I don't have any",
    "start": "1615720",
    "end": "1623960"
  },
  {
    "text": "numbers maybe I should have uh put some on uh had some slides with some benchmarks so maybe that can go in the",
    "start": "1623960",
    "end": "1629360"
  },
  {
    "text": "feedback uh but we did notice it because we run two controllers that index very similar resources uh one is in go um and",
    "start": "1629360",
    "end": "1637120"
  },
  {
    "text": "we basically just pull a bunch of kubernetes objects and we cash them and one is in Rust uh the one in Rust always",
    "start": "1637120",
    "end": "1644080"
  },
  {
    "text": "has less of a memory overhead so it's something that we always notice even in the in the resource requirements that we",
    "start": "1644080",
    "end": "1649679"
  },
  {
    "text": "give it we always just go a little bit lower in both limits and um and requirements just because it doesn't",
    "start": "1649679",
    "end": "1656799"
  },
  {
    "text": "consume as much and we manag to prune all of these resources thank you I've got another question and then I'll let",
    "start": "1656799",
    "end": "1663600"
  },
  {
    "text": "it go um um is there any issue um uh on",
    "start": "1663600",
    "end": "1669600"
  },
  {
    "text": "the update updating side of uh the rust library",
    "start": "1669600",
    "end": "1674840"
  },
  {
    "text": "because um go Go cube client kind of goes fast",
    "start": "1674840",
    "end": "1683000"
  },
  {
    "text": "you know there is a lot of work being done very very very often and I wanted",
    "start": "1683000",
    "end": "1688960"
  },
  {
    "text": "to know if you ever had any issue to catch up that's a very good question um",
    "start": "1688960",
    "end": "1696480"
  },
  {
    "text": "so just kind of as a disclaimer I'm a contributor to to QBs um it's true that",
    "start": "1696480",
    "end": "1701919"
  },
  {
    "text": "in terms of features it still hasn't reached the same feature parody so for example if you want to use leader",
    "start": "1701919",
    "end": "1707000"
  },
  {
    "text": "election that's something that's not natively offered by the Upstream Qs that's something that we implemented in",
    "start": "1707000",
    "end": "1713320"
  },
  {
    "text": "cubert in our own opinionated way so from that perspective there is a little bit of an issue here because we're still",
    "start": "1713320",
    "end": "1719679"
  },
  {
    "text": "catching up and of course you know you don't you don't have the same amount of people that contribute you know cubars",
    "start": "1719679",
    "end": "1724919"
  },
  {
    "text": "is a set of two maintainers and a bunch of ad hoc contributors client go is like an entire special interest group that",
    "start": "1724919",
    "end": "1731519"
  },
  {
    "text": "continuously drives uh Innovation and updates so that's one side of it uh the",
    "start": "1731519",
    "end": "1736919"
  },
  {
    "text": "second side of it is that as being relatively newer still sometimes ships",
    "start": "1736919",
    "end": "1742440"
  },
  {
    "text": "you know changes that might completely re rearchitecturing",
    "start": "1742440",
    "end": "1747960"
  },
  {
    "text": "on something that's relatively new so that's a very good question though hope it hope I answered",
    "start": "1756240",
    "end": "1763799"
  },
  {
    "text": "it okay yeah um I just wanted to ask um",
    "start": "1763799",
    "end": "1768960"
  },
  {
    "text": "do you have any experience with uh like caching layers or or how how would you",
    "start": "1768960",
    "end": "1774399"
  },
  {
    "text": "approach that in in a rust world is it built already in the library or because",
    "start": "1774399",
    "end": "1779640"
  },
  {
    "text": "sometimes we need to cross reference multiple objects which is a bit tedious because we don't want to hammer the API",
    "start": "1779640",
    "end": "1786120"
  },
  {
    "text": "server for every request yes that's a very very good question uh and that's kind I want to what I wanted to",
    "start": "1786120",
    "end": "1792360"
  },
  {
    "text": "illustrate with cubert the library so that's how we manage our caching layer in linkerd we BAS basically just have a",
    "start": "1792360",
    "end": "1798919"
  },
  {
    "text": "bunch of these Global indices that we run for various parts of our work so we collect a bunch of resources most of the",
    "start": "1798919",
    "end": "1805760"
  },
  {
    "text": "indices that you see in in our code are not as trivial as the one that I showed in the slides right it's not just a",
    "start": "1805760",
    "end": "1811240"
  },
  {
    "text": "hashmap we have lots of maps trees vectors things that we use to hold all of the state that we transform after",
    "start": "1811240",
    "end": "1817640"
  },
  {
    "text": "reading from the kubernetes API server uh but I I guess that's an opinion way an opinionated way of doing it in uh QBs",
    "start": "1817640",
    "end": "1826039"
  },
  {
    "text": "you can also do this through an object store so every controller can uh also",
    "start": "1826039",
    "end": "1831240"
  },
  {
    "text": "support taking an arbitrary Object Store that you basically provide out of band",
    "start": "1831240",
    "end": "1836279"
  },
  {
    "text": "so you can use the same store to to share the same object across uh multiple",
    "start": "1836279",
    "end": "1841360"
  },
  {
    "text": "parts of your codebase and something that I'm working on is bringing that to the controller framework so you can",
    "start": "1841360",
    "end": "1846720"
  },
  {
    "text": "actually share multiple watch streams so if you have free controllers for example that work with pods we want to be able",
    "start": "1846720",
    "end": "1852600"
  },
  {
    "text": "to to let you pass in a single stream that lets all of the controllers run reconciliation loops on the same object",
    "start": "1852600",
    "end": "1859320"
  },
  {
    "text": "so you don't have to you know continuously pull the API server for the same resource three different times yeah",
    "start": "1859320",
    "end": "1865440"
  },
  {
    "text": "great exciting yeah hi so uh if I'm not mistaken um",
    "start": "1865440",
    "end": "1872200"
  },
  {
    "text": "Cubs supports defining final finalizers for controlled resources does cubert",
    "start": "1872200",
    "end": "1878039"
  },
  {
    "text": "support that too no uh but cubert basically uses qars as a dependency so",
    "start": "1878039",
    "end": "1883960"
  },
  {
    "text": "you can use cubert and then you can probably figure out how to rip some of that out from from cuas uh CU was built",
    "start": "1883960",
    "end": "1890559"
  },
  {
    "text": "more as an opinionated way for us to to run controllers and to just aggregate",
    "start": "1890559",
    "end": "1895600"
  },
  {
    "text": "all of our glue code in a place that you know makes sense um but if you do have a",
    "start": "1895600",
    "end": "1901120"
  },
  {
    "text": "feature request you know I guess always happy to hear it cool",
    "start": "1901120",
    "end": "1906559"
  },
  {
    "text": "thanks hi uh just a question on tooling so you mentioned CU Builder uh one of",
    "start": "1906559",
    "end": "1912360"
  },
  {
    "text": "the great tooling there is you write up your code and it generates a bunch of stuff on your behalf such as arbac and",
    "start": "1912360",
    "end": "1918840"
  },
  {
    "text": "whatnot uh can you get that with cuers today I don't think with arbac so I'm",
    "start": "1918840",
    "end": "1923960"
  },
  {
    "text": "not super knowledgeable in Cube Builder unfortunately we Wrangle all of our yaml by hand uh I know uh uh but yeah I don't",
    "start": "1923960",
    "end": "1932240"
  },
  {
    "text": "think you can generate arback or any of that kind of stuff um you can generate",
    "start": "1932240",
    "end": "1937320"
  },
  {
    "text": "schemas for your crds but that's basically it it's just crd generation at this point okay",
    "start": "1937320",
    "end": "1944320"
  },
  {
    "text": "thanks any other questions go once twice three times all right well thank you all",
    "start": "1945440",
    "end": "1951720"
  },
  {
    "text": "for coming",
    "start": "1951720",
    "end": "1955278"
  }
]