[
  {
    "text": "yeah hello everyone uh today we are going to talk about wites I am hasid gangal I work with Planet skill and I've",
    "start": "919",
    "end": "8960"
  },
  {
    "text": "been with this project for 9 years now and today we are going to talk about",
    "start": "8960",
    "end": "15240"
  },
  {
    "text": "the overview we'll take you through the architecture of VES then talk about some uh new and upcoming features and then uh",
    "start": "15240",
    "end": "22560"
  },
  {
    "text": "my colleague will present uh query serving demo and then we'll open up the floor for Q&A",
    "start": "22560",
    "end": "30000"
  },
  {
    "text": "so what is vtus whenever you think of sharding you should think of vtes that's how we relate and uh it's Cloud native",
    "start": "31000",
    "end": "39239"
  },
  {
    "text": "you can deploy on kubernetes uh we have a operator that can easily help you Deploy on kubernetes and it's was built",
    "start": "39239",
    "end": "46559"
  },
  {
    "text": "in 2010 in YouTube and and from there it was always been stateless uh and uh it's",
    "start": "46559",
    "end": "53760"
  },
  {
    "text": "really easy how it does uh failovers and uh it detects failure detections and how",
    "start": "53760",
    "end": "59000"
  },
  {
    "text": "it recover from its so it's built from the ground up and being Cloud native from day one it is massively scalable uh",
    "start": "59000",
    "end": "68080"
  },
  {
    "text": "you can basically there's no theoretical limit to how much you can scale your database with vtest and it has been uh",
    "start": "68080",
    "end": "74439"
  },
  {
    "text": "highly available with the the VT or we have which does the failure recovery and",
    "start": "74439",
    "end": "79640"
  },
  {
    "text": "the detection and this is a wire compatible with mySQL uh with all the different",
    "start": "79640",
    "end": "86840"
  },
  {
    "text": "versions why you want to use with I already talked about Shing but uh when you use a single node MySQL what happens",
    "start": "86880",
    "end": "94600"
  },
  {
    "text": "you get a right contention you if you're using cloud provider then you hit iops limits you see Deadlocks uh so there's",
    "start": "94600",
    "end": "102799"
  },
  {
    "text": "no way of getting around it uh then also you see like back backups taking a lot",
    "start": "102799",
    "end": "108200"
  },
  {
    "text": "of time so if you have like uh failures your notes going down then it take a lot of time to even do the disaster recovery",
    "start": "108200",
    "end": "115320"
  },
  {
    "text": "over there uh you at you you there's a limit to you a single not that you can",
    "start": "115320",
    "end": "120399"
  },
  {
    "text": "scale your primaries so then you say okay let's move our reads and then you scale out your reads by doing adding",
    "start": "120399",
    "end": "126039"
  },
  {
    "text": "more and more replicas and that leads to more and more replication lag so that creates another problem for you and then",
    "start": "126039",
    "end": "132920"
  },
  {
    "text": "there's a physical limit to where you can exceed your instance size so at that point you have to see okay now we we",
    "start": "132920",
    "end": "139800"
  },
  {
    "text": "have to do sharding and there's no way going around so by doing sharding you basically get rid of all of these",
    "start": "139800",
    "end": "145760"
  },
  {
    "text": "problem uh you you get a faster backup restore time so your disaster is much much faster because you just keep Shing",
    "start": "145760",
    "end": "152360"
  },
  {
    "text": "you have small small instances and uh you can basically then have a faster",
    "start": "152360",
    "end": "157400"
  },
  {
    "text": "recovery over there and then your right condition also goes away because each uh",
    "start": "157400",
    "end": "162560"
  },
  {
    "text": "each primary that have in different different shards will basically have less and less QPS to handle and because",
    "start": "162560",
    "end": "168760"
  },
  {
    "text": "it has less and less QPS the replica is also being faster and it will keep up to date with the primary and then you just",
    "start": "168760",
    "end": "175519"
  },
  {
    "text": "keep on scaling uh and you keep resharding going further",
    "start": "175519",
    "end": "181519"
  },
  {
    "text": "it works with all the known ORS and Frameworks you can use uh any uh VI",
    "start": "181519",
    "end": "188480"
  },
  {
    "text": "database viewer UI as well and all which works with my SQL just works with",
    "start": "188480",
    "end": "194560"
  },
  {
    "text": "vs and we have a very active Community uh we have 15 active maintainers this is",
    "start": "194560",
    "end": "199799"
  },
  {
    "text": "some of the numbers I pulled for a year from def stats. cncf doio you can also go and check it out like uh we in in a",
    "start": "199799",
    "end": "207080"
  },
  {
    "text": "year we got like some 1,700 PR so open we did like 101 different PR authors 36",
    "start": "207080",
    "end": "213959"
  },
  {
    "text": "companies contributed to it and there were like 27 New contribute",
    "start": "213959",
    "end": "219959"
  },
  {
    "text": "contributors let's see some of the companies that are using wit in production uh flip cart was one of the",
    "start": "220280",
    "end": "227080"
  },
  {
    "text": "early adopters when I was there at flip cart uh in back in 201617 and then GitHub is running uh in",
    "start": "227080",
    "end": "233920"
  },
  {
    "text": "production the PRS and the issues database that you see and use every day in your life uh then this who is running",
    "start": "233920",
    "end": "240560"
  },
  {
    "text": "like 100% uh of their database in by using VTS and uh yeah and there there's",
    "start": "240560",
    "end": "247239"
  },
  {
    "text": "Planet scale uh a cloud company which provides the database as a solution uh",
    "start": "247239",
    "end": "253040"
  },
  {
    "text": "that's all powered by wits so these are some of the terms uh",
    "start": "253040",
    "end": "258600"
  },
  {
    "text": "I'll use and also my colleague will use when uh he goes through the demo and I'll go through the architecture so",
    "start": "258600",
    "end": "264639"
  },
  {
    "text": "keyspace is a logical database uh it's something similar that we have in my SQL but here is like a collection of",
    "start": "264639",
    "end": "271759"
  },
  {
    "text": "physical databases underneath and we have shards which are the subset of",
    "start": "271759",
    "end": "277080"
  },
  {
    "text": "keyspace and each chart contains of one primary and multiple replicas uh at wit you have to define",
    "start": "277080",
    "end": "283759"
  },
  {
    "text": "something called V schema which is a configuration to give you give to vtest to understand how your uh how your",
    "start": "283759",
    "end": "290840"
  },
  {
    "text": "sharding is working and how where which table recide in which key space and how what to use when you go when when when",
    "start": "290840",
    "end": "299280"
  },
  {
    "text": "you send query then it understands how to basically send your data to which Shard and Windex is the internal to V",
    "start": "299280",
    "end": "305759"
  },
  {
    "text": "schema which is the sharding function it the VT will use to know where your data resides and where the data has to be",
    "start": "305759",
    "end": "312080"
  },
  {
    "text": "sent to retrieve the data so this is the architecture of",
    "start": "312080",
    "end": "318240"
  },
  {
    "text": "witness um the entry point for your application will be the vgate and that",
    "start": "318240",
    "end": "323280"
  },
  {
    "text": "talks MySQL protocol also grpc is there but uh you can talk MySQL protocol so",
    "start": "323280",
    "end": "329720"
  },
  {
    "text": "all your uh all the open source MySQL drivers that are there can just connect to VT Gates so once you are connected to",
    "start": "329720",
    "end": "337039"
  },
  {
    "text": "the vgate you can also use in between a load balancer uh which so that it can do vgate Discovery and then you can route",
    "start": "337039",
    "end": "344400"
  },
  {
    "text": "to one of the VT Gates uh once you connected to a vgate then you send a query and the vgate will do the passsing",
    "start": "344400",
    "end": "351080"
  },
  {
    "text": "of your query it will understand uh your query and then use the V schema to plan",
    "start": "351080",
    "end": "356240"
  },
  {
    "text": "your queries and once your query is planned then it will send to the appropriate shard in The Shard we have",
    "start": "356240",
    "end": "361720"
  },
  {
    "text": "some sidecar VD Tablet running along with my SQL where your data will reside",
    "start": "361720",
    "end": "367759"
  },
  {
    "text": "so when when your data goes to VD tablet VD tablet is Will basically see uh will",
    "start": "367759",
    "end": "373400"
  },
  {
    "text": "will uh do the persistent connection pooling for you at the at at the site car level and uh it will then send the",
    "start": "373400",
    "end": "379520"
  },
  {
    "text": "query to my SQL and it will retrieve the data back and send it to VT gate so vgate also will do the aggregation if",
    "start": "379520",
    "end": "385840"
  },
  {
    "text": "needed based on the what kind of plan happened and what kind of query you have uh executed so that's the query serving",
    "start": "385840",
    "end": "392039"
  },
  {
    "text": "path and then we have the control plane so in the control plane we have a VT admin which is the UI part of the",
    "start": "392039",
    "end": "398400"
  },
  {
    "text": "control plane where you can visualize everything and then you have the VT cldd",
    "start": "398400",
    "end": "403639"
  },
  {
    "text": "uh CLI that will be used to basically make modifications to your uh cluster",
    "start": "403639",
    "end": "410199"
  },
  {
    "text": "and uh that information will be stored in the Topo the Topo Ser is the metadata store we have you can use hcd or",
    "start": "410199",
    "end": "416560"
  },
  {
    "text": "zookeeper and uh we have some VT which is the failure detection and Recovery",
    "start": "416560",
    "end": "421680"
  },
  {
    "text": "module of the BTUs which keeps uh monitoring using the Topo server that what are what are the different shards",
    "start": "421680",
    "end": "428240"
  },
  {
    "text": "and what are the primaries replicas and it will fix uh any any issues that it",
    "start": "428240",
    "end": "435360"
  },
  {
    "text": "detect so some of the features uh there are lot many but I've just listed some",
    "start": "437599",
    "end": "442720"
  },
  {
    "text": "of them uh so myql compatibility is the first thing and it's a moving Target as myql keep evolving we also evolve with",
    "start": "442720",
    "end": "449319"
  },
  {
    "text": "it so we keep adding so most of the things that myql support should be just supported in V we keep adding more and",
    "start": "449319",
    "end": "456039"
  },
  {
    "text": "more as we go forward uh resharding so I talked about that you have to Shard but then you also need a way when you hit",
    "start": "456039",
    "end": "462560"
  },
  {
    "text": "those limit then you have to again rehard so it's it's very seamless to how we do rearing in with t uh there's",
    "start": "462560",
    "end": "470080"
  },
  {
    "text": "something called materialization so it's a it's a basically a you can use that to do change data capture uh you can use to",
    "start": "470080",
    "end": "477000"
  },
  {
    "text": "do materialized views uh which you can keep real time updated not not the mycle",
    "start": "477000",
    "end": "482639"
  },
  {
    "text": "views but the views that will be updated on the Fly and you'll have the near real time views available to you we have like",
    "start": "482639",
    "end": "490520"
  },
  {
    "text": "seamless online schema changes so you can do migrations with uh no",
    "start": "490520",
    "end": "495599"
  },
  {
    "text": "downtime and uh yeah we have the backup and Recovery where uh if if you bring up",
    "start": "495599",
    "end": "502560"
  },
  {
    "text": "any new replicas it will basically uh it will take it from the backup and then it will plug it into your cluster and and",
    "start": "502560",
    "end": "509039"
  },
  {
    "text": "it will Al start the replication from the last point it knows where the backup was taken from uh the query",
    "start": "509039",
    "end": "515240"
  },
  {
    "text": "consolidation is a interesting feature uh it will uh it it what it does is it",
    "start": "515240",
    "end": "522839"
  },
  {
    "text": "uh it whenever you have a high SP when there the is a spike in your traffic and",
    "start": "522839",
    "end": "528440"
  },
  {
    "text": "uh and you see some some rows are getting hit uh very frequently what it does is at I showed you that there's a",
    "start": "528440",
    "end": "535040"
  },
  {
    "text": "VD tablet what it it does intelligently is it keeps checking what are the queries that are executing and if it",
    "start": "535040",
    "end": "541279"
  },
  {
    "text": "sees the similar query been executed lot many times only one of the queries gets sent down to the mycle to retrieve the",
    "start": "541279",
    "end": "547440"
  },
  {
    "text": "result and it does the buffering at it at VT tablet level and once you get the results that goes back to VT gate to",
    "start": "547440",
    "end": "554560"
  },
  {
    "text": "send it to the client so it avoids sending all the her down to mySQL and",
    "start": "554560",
    "end": "559640"
  },
  {
    "text": "avoiding any downtime or SS happening at the MySQL level and I already talked",
    "start": "559640",
    "end": "565680"
  },
  {
    "text": "about we have like vtor which does the failure detection and recovery so you won't even see uh it basically try to",
    "start": "565680",
    "end": "572480"
  },
  {
    "text": "helps you keep High availability",
    "start": "572480",
    "end": "576199"
  },
  {
    "text": "around some of the new features I want to highlight um so this is recently added Atomic distribute transactions so",
    "start": "577920",
    "end": "585000"
  },
  {
    "text": "earlier we used to support uh distributed transactions but that was the best effort and now we want to make",
    "start": "585000",
    "end": "591120"
  },
  {
    "text": "it Atomic which means everything gets committed on none get committed so now the application does not have to uh",
    "start": "591120",
    "end": "596760"
  },
  {
    "text": "worry about whether is there a partial commit happened or not so we are able to",
    "start": "596760",
    "end": "602079"
  },
  {
    "text": "take care of being making it Atomic across the shards uh recursive CTS is also been one",
    "start": "602079",
    "end": "609079"
  },
  {
    "text": "of the HS that has been there from the community and we have added the feature uh there is something called VT toolkit",
    "start": "609079",
    "end": "615480"
  },
  {
    "text": "uh which is a new thing we are working on and adding more to it uh it's it will",
    "start": "615480",
    "end": "620560"
  },
  {
    "text": "help you drive uh your adoption to vtest uh it uh basically here you you can give",
    "start": "620560",
    "end": "626600"
  },
  {
    "text": "your query logs and you will understand what kind of uh different tables are grouped together",
    "start": "626600",
    "end": "631720"
  },
  {
    "text": "and what are the query columns that you're using to join those keys and that will help you define your V schema and",
    "start": "631720",
    "end": "637959"
  },
  {
    "text": "then you'll keep itating to have a better V schema because V schema will Define you how your queries will be",
    "start": "637959",
    "end": "643600"
  },
  {
    "text": "routed and you want the you want less and less work to be done at vgate",
    "start": "643600",
    "end": "648800"
  },
  {
    "text": "because it's an aggregation layer and you want more to go down to the MySQL which eventually means that you have uh",
    "start": "648800",
    "end": "655360"
  },
  {
    "text": "less round trips happening at vgate level so so this toolkit is what we are seeing as people getting uh better in",
    "start": "655360",
    "end": "662279"
  },
  {
    "text": "designing their V schemas and and they can uh have a better uh uh query latency",
    "start": "662279",
    "end": "669399"
  },
  {
    "text": "uh at it is uh we also added uh foreign key support So INB is very tricky in doing",
    "start": "669399",
    "end": "676160"
  },
  {
    "text": "these foreign keys so we build all that logic at the VT gate level so we can do seamless online migrations and",
    "start": "676160",
    "end": "683000"
  },
  {
    "text": "everything because otherwise lot of things were hidden uh that how foreign Keys was handled by um you know but we",
    "start": "683000",
    "end": "689959"
  },
  {
    "text": "brought all that logic to vate so that everything is visible now and our internal tools which use the V",
    "start": "689959",
    "end": "696760"
  },
  {
    "text": "replication flows like online schema and uh uh resharding and stuff can continuous continue to work",
    "start": "696760",
    "end": "705079"
  },
  {
    "text": "well we have uh something called uh multimetric throttler so I talked about",
    "start": "705079",
    "end": "710839"
  },
  {
    "text": "like we have we do resharding we do online schema change and stuff which can bring down your primaries if you're not",
    "start": "710839",
    "end": "717600"
  },
  {
    "text": "tling properly so all these inter internal uh tools which keeps running for a longer duration like because your",
    "start": "717600",
    "end": "723959"
  },
  {
    "text": "schema changes can happen like for days or weeks based on how much data you have so we need a mechanism that doesn't",
    "start": "723959",
    "end": "730639"
  },
  {
    "text": "bring down your replicas uh so we we we have a throttler in place which which slows down if you we see your",
    "start": "730639",
    "end": "736839"
  },
  {
    "text": "application traffic is increasing so we just slow it down so that's basically handle it and why it is multimetric",
    "start": "736839",
    "end": "743519"
  },
  {
    "text": "because you can you can also plug in your metric that you want this totle to watch for so that it can slow down",
    "start": "743519",
    "end": "748800"
  },
  {
    "text": "according and uh we recently in the operator we added like uh autoscaler uh which also",
    "start": "748800",
    "end": "757000"
  },
  {
    "text": "helps you uh up Auto scale VT Gates uh as as your traffic is",
    "start": "757000",
    "end": "763079"
  },
  {
    "text": "increasing and now with that I'll just pass on to my colleague who will take you through their",
    "start": "763079",
    "end": "768720"
  },
  {
    "text": "demo hello folks um I the mic I am Anan I'm also a maintainer of West I work at",
    "start": "768720",
    "end": "775120"
  },
  {
    "text": "Planet scale as well with herit so today I'm going to be taking you through a vtest demo it's going to be a demo that's going to showcase the",
    "start": "775120",
    "end": "780880"
  },
  {
    "text": "capabilities of vest with regards to query serving how queries are routed through the VT gate how do we collect",
    "start": "780880",
    "end": "786079"
  },
  {
    "text": "the data from v Tablet and we're also going to look at how sharding works so this is the VT admin page I already have",
    "start": "786079",
    "end": "792360"
  },
  {
    "text": "a cluster set up initially for us uh for the purposes of this demo we are only going to look at the Commerce keyspace",
    "start": "792360",
    "end": "798040"
  },
  {
    "text": "the Uncharted keyspace we can talk about it in the end if you've got some time left it's basically used for sequence tables which is like a way to get Auto",
    "start": "798040",
    "end": "805440"
  },
  {
    "text": "increment to work in a distributed system so we can talk about sequence tables in the end if you've got time left but for the initial demo we're",
    "start": "805440",
    "end": "811199"
  },
  {
    "text": "going to look at the Commerce keyspace my colleague already talked about how a sharded keyspace is going to have multiple different shards in this case",
    "start": "811199",
    "end": "817880"
  },
  {
    "text": "I've sharded the Commerce key space into two different shards hyphen 80 and 0 hyphen the nomenclature of these shards",
    "start": "817880",
    "end": "823959"
  },
  {
    "text": "is going to get a little bit clearer in in a a little bit of a minute for now in the Commerce key space",
    "start": "823959",
    "end": "830120"
  },
  {
    "text": "I've got two tables I've got a customer table and I've got a c order table um so if you look at the customer table there",
    "start": "830120",
    "end": "837040"
  },
  {
    "text": "we go the schema for the customer table is very straight forward we've got a customer ID and we've got an email those",
    "start": "837040",
    "end": "842079"
  },
  {
    "text": "are the only two fields that we're storing the primary key is the customer ID and right down below is where you see",
    "start": "842079",
    "end": "847279"
  },
  {
    "text": "the Windex information so what happens is because you've got a sharded table when you try to insert a data for",
    "start": "847279",
    "end": "852480"
  },
  {
    "text": "example let's say let's take an example let's say I'm trying to insert a row into the customer table where customer ID value is one now west needs to figure",
    "start": "852480",
    "end": "858839"
  },
  {
    "text": "out which of the two shards we saw there are two shards hyph 80 80 hyphen West needs to figure out which of the two shards is it supposed to insert the data",
    "start": "858839",
    "end": "865040"
  },
  {
    "text": "in so for that we have a Windex which is what we spe specify in the v schema what this Windex is saying is that we're",
    "start": "865040",
    "end": "871399"
  },
  {
    "text": "going to use the customer ID column we're going to run it through the reverse bits Windex and the value that it gives us in the end is is what we",
    "start": "871399",
    "end": "877880"
  },
  {
    "text": "will use to know which of the two shards it's supposed to go in so what happens in this case",
    "start": "877880",
    "end": "883040"
  },
  {
    "text": "specifically no sorry so when you do customer ID insertion of Row one um your input is",
    "start": "883040",
    "end": "890360"
  },
  {
    "text": "going to be value one what reverse bits does is just it just reverses all the bits that you gave in as the input so",
    "start": "890360",
    "end": "895519"
  },
  {
    "text": "customer ID value is being one reversed it becomes one followed by multiples zeros which is the value of 80 so what",
    "start": "895519",
    "end": "902000"
  },
  {
    "text": "that is that is what the meaning of The Shard is so hyphen 80 means all the values for the value that the Windex",
    "start": "902000",
    "end": "907600"
  },
  {
    "text": "provided from 0er up to 80 is is is in the first chart everything which is equal to 80 and higher than that is in",
    "start": "907600",
    "end": "912920"
  },
  {
    "text": "the second chart so that's the name of the wind the chart 0 hyphen so everything 80 onwards is in the second chart so if you take the value of one it",
    "start": "912920",
    "end": "921199"
  },
  {
    "text": "after running it through the reverse bits Windex we end up at a value of 80 which is greater than equal to 80 so it",
    "start": "921199",
    "end": "926279"
  },
  {
    "text": "ends up in the second chart similarly I've got few more examples all going through the same process 1 2 3 4 and 5",
    "start": "926279",
    "end": "932440"
  },
  {
    "text": "if you look at the value of two revers it we get 0 1 followed by 6 zos which is 40 and because 40 is smaller than 80 it",
    "start": "932440",
    "end": "938880"
  },
  {
    "text": "ends up in the first Shard similarly and so on so this is how sharding Works um Wiest has a bunch of inbuilt indexes",
    "start": "938880",
    "end": "945199"
  },
  {
    "text": "reverse bits XD uh XX Hash a bunch of others uh but it's also pluggable so you can choose to have your own sharding",
    "start": "945199",
    "end": "951319"
  },
  {
    "text": "scheme as how your data is um according to your application for this specific example",
    "start": "951319",
    "end": "957440"
  },
  {
    "text": "for this demo I've chosen reverse bits because it's got a very neat property where all the even values end up in the second chart uh and in the first chart",
    "start": "957440",
    "end": "964519"
  },
  {
    "text": "and all the odd values end up in the uh second chart and the reason is that um 80 hyen and 801 0 one followed by all",
    "start": "964519",
    "end": "972600"
  },
  {
    "text": "zeros the value is greater than that only if your first bit is set and that is governed by the last bit because",
    "start": "972600",
    "end": "978079"
  },
  {
    "text": "we're reversing through them so it becomes like an even OD property it's very good for a demo because you can really show the distribution of",
    "start": "978079",
    "end": "984519"
  },
  {
    "text": "keys so I've got the cluster set up over here I'm going to connect to the vgate we're going to insert some rows into",
    "start": "984519",
    "end": "992839"
  },
  {
    "text": "this and if you go ahead and look at the data so this specific syntax that I used over here use Commerce at hyen is a spe",
    "start": "1002399",
    "end": "1008639"
  },
  {
    "text": "specific syntax applicable only for vest where we are basically asking it asking the Wate that for the next queries that",
    "start": "1008639",
    "end": "1014519"
  },
  {
    "text": "I'm going to execute specifically go to the 0 hyen Shard and only get me data from there do not go through the entire key space specifically get me data for",
    "start": "1014519",
    "end": "1020959"
  },
  {
    "text": "the 0en chard so when we do select start for customer we actually end up seeing that the first three values 1 3 and five",
    "start": "1020959",
    "end": "1026360"
  },
  {
    "text": "the odd values end up in the second Shard and if you look at the first Shard we've got the even values there two and",
    "start": "1026360",
    "end": "1031760"
  },
  {
    "text": "four so this is how uh sharding Works in m",
    "start": "1031760",
    "end": "1036678"
  },
  {
    "text": "test we can go ahead and now look at the order table so this is uh the second table that we have in our schema we've",
    "start": "1037959",
    "end": "1044360"
  },
  {
    "text": "got order ID we've got a customer ID and we storing the product as a string for now I didn't want to complicate the demo",
    "start": "1044360",
    "end": "1050400"
  },
  {
    "text": "a lot so I didn't introduce a third table for product as well but the getting started guide that we have on the website for vest actually has the",
    "start": "1050400",
    "end": "1056320"
  },
  {
    "text": "three tables it's C the order product and the customer table there for the purpose of the demo I'm just storing the",
    "start": "1056320",
    "end": "1062080"
  },
  {
    "text": "product as a string right now uh and we see it's it's again using the same reverse bits index and the column and",
    "start": "1062080",
    "end": "1067840"
  },
  {
    "text": "The Shining key over here is also customer ID this is going to be important when we going to look at the query serving for test we're not",
    "start": "1067840",
    "end": "1073640"
  },
  {
    "text": "sharding by the order ID but by the customer ID uh and we're going to see right now why that is",
    "start": "1073640",
    "end": "1081120"
  },
  {
    "text": "useful so I'm going to go ahead insert some more rows into this we going to I'm going to have six orders and a few of",
    "start": "1083280",
    "end": "1089799"
  },
  {
    "text": "them for uh different customers for the first customer they're going to be three orders uh and one one each for 3 four",
    "start": "1089799",
    "end": "1095480"
  },
  {
    "text": "and five if you go ahead and we now look at the data we already saw that for the second Shard 1 3 and five customers were",
    "start": "1095480",
    "end": "1101760"
  },
  {
    "text": "residing there the extra property that now we get because we've chosen to Shard by customer ID and not by order ID all",
    "start": "1101760",
    "end": "1107960"
  },
  {
    "text": "the orders for a customer customer one we see that all of their orders are in the same Shard where their customer T",
    "start": "1107960",
    "end": "1114919"
  },
  {
    "text": "customer row was also living same goes for three and five um and here we see that the order for uh customer four is",
    "start": "1114919",
    "end": "1122120"
  },
  {
    "text": "here in the second chart uh had we chosen to Shard by the order ID we would not have had this property instead we",
    "start": "1122120",
    "end": "1127520"
  },
  {
    "text": "would have seen a more even distribution of data right now you see that the customer in the order table we've got five rows going to the first Shard and",
    "start": "1127520",
    "end": "1133960"
  },
  {
    "text": "only one row in the second one but had we chosen to Shard by order ID we would have seen a more even distribution of three and three but we would have lost",
    "start": "1133960",
    "end": "1140320"
  },
  {
    "text": "this property where uh the data for a given customer would have been collocated in a single chart which is",
    "start": "1140320",
    "end": "1145440"
  },
  {
    "text": "the case right now we can go ahead and now look at how West serves some of these queries uh so MySQL offers a",
    "start": "1145440",
    "end": "1152760"
  },
  {
    "text": "command which is like an explain command which shows how the internals of my SQL work and how the plans are created how",
    "start": "1152760",
    "end": "1157799"
  },
  {
    "text": "my SQL is going to execute them V explain is like a it's a similar command but it's with test explain so that's why",
    "start": "1157799",
    "end": "1163480"
  },
  {
    "text": "we call it V explain and this shows how vest is going to Route the query for you how vgate is going to run this query so",
    "start": "1163480",
    "end": "1169480"
  },
  {
    "text": "if you take a look at a very straightforward query select start from customer if you want to collect data from the entire key space uh all btg",
    "start": "1169480",
    "end": "1176080"
  },
  {
    "text": "needs to do is gather the information from both the two shards combine them together and send them back to the uh uh",
    "start": "1176080",
    "end": "1181559"
  },
  {
    "text": "to the client so here we see that it's a scatter route what this basically means is that VT is going to go to the",
    "start": "1181559",
    "end": "1187039"
  },
  {
    "text": "Commerce key space and it's going to send this query select customer ID email from customer to both the shards collect",
    "start": "1187039",
    "end": "1192679"
  },
  {
    "text": "the data and send them back if we were to exe execute a query which had a",
    "start": "1192679",
    "end": "1198120"
  },
  {
    "text": "predicate on the customer ID in this case wit is smart enough to figure out that because your table is shed by the",
    "start": "1198120",
    "end": "1203720"
  },
  {
    "text": "customer ID it knows that this row can only live in the second chard because the customer ID value is one and that",
    "start": "1203720",
    "end": "1209240"
  },
  {
    "text": "cannot be in the in the first Shard so what vest does in this case it uses an equal unique type of a routing it uses",
    "start": "1209240",
    "end": "1215320"
  },
  {
    "text": "the reverse bit bits Windex uses the value one figures out which sh it can route the query to and only sends that",
    "start": "1215320",
    "end": "1221200"
  },
  {
    "text": "query to that one Shard so this is how you um this is why sharding by the correct uh correct key becomes important",
    "start": "1221200",
    "end": "1227640"
  },
  {
    "text": "for your query latencies because you want to reduce as many uh of cross shot queries as you have",
    "start": "1227640",
    "end": "1233799"
  },
  {
    "text": "um we can go ahead and look at the same um the same for the order table as well",
    "start": "1233799",
    "end": "1239000"
  },
  {
    "text": "similarly if you were to query the order table for a given customer want to get all the rows back for a given customer ID we see that it is also an equal",
    "start": "1239000",
    "end": "1246000"
  },
  {
    "text": "unique thing slightly difference slightly different from the previous example is that customer ID for the",
    "start": "1246000",
    "end": "1251039"
  },
  {
    "text": "customer table was also a primary key so we knew we were going to get get back only one row in this case it's not",
    "start": "1251039",
    "end": "1256640"
  },
  {
    "text": "really the primary key so we're going to get back multiple rows but because we chose to Shard by customer ID with still has the property that all of those rows",
    "start": "1256640",
    "end": "1262760"
  },
  {
    "text": "even if there are multiple rows will still live only on a single chart because we've chosen to Shard by that customer ID so this this uh gives us",
    "start": "1262760",
    "end": "1269840"
  },
  {
    "text": "that property one additional thing that we're going to look at now is if we ask with test to gather the orders for a",
    "start": "1269840",
    "end": "1276080"
  },
  {
    "text": "given specific order ID in this case order ID is the primary key so we are aware that we'll only get back one row",
    "start": "1276080",
    "end": "1281840"
  },
  {
    "text": "uh but because we've not chosen to Shard by that but doesn't really know which of the two shards this row lives in so even though we know that we're going to get",
    "start": "1281840",
    "end": "1287520"
  },
  {
    "text": "back one row but has to query both of those shards to even figure out whether the whether the data lives in that or",
    "start": "1287520",
    "end": "1292559"
  },
  {
    "text": "not uh so this ends up becoming a scatter query even though we know we know that we only get going to get back",
    "start": "1292559",
    "end": "1297760"
  },
  {
    "text": "uh a single U row back we're going to get back to this",
    "start": "1297760",
    "end": "1304000"
  },
  {
    "text": "query we're going to look at a way of optimizing this as well uh using a secondary index but before that I'm",
    "start": "1304000",
    "end": "1309039"
  },
  {
    "text": "going to quickly cover how joins work a slightly more advanced plan if",
    "start": "1309039",
    "end": "1315400"
  },
  {
    "text": "you look at the query that we tried to execute it was a very straightforward cross joint that we did between the two tables the order table and the customer",
    "start": "1315400",
    "end": "1320720"
  },
  {
    "text": "table in this case what bet test needs to do is it needs to gather all the information for the order table gather",
    "start": "1320720",
    "end": "1326200"
  },
  {
    "text": "all the information of the customer table but because the uh information resides on two different shards it has",
    "start": "1326200",
    "end": "1331240"
  },
  {
    "text": "to do the join on the BT gate level on the proxy level that we saw in the architecture diagram because it has to",
    "start": "1331240",
    "end": "1336440"
  },
  {
    "text": "pull in the data from the two shards separately so that's what it does it does a scatter query to gather all the",
    "start": "1336440",
    "end": "1341720"
  },
  {
    "text": "information for the customer table and gather all the information of the order table and then it does a cross join on the VT gate level these kind of",
    "start": "1341720",
    "end": "1348240"
  },
  {
    "text": "operations are generally expensive because you're doing the join on the vgate level you're storing it's in it's in memory so all the rows that you're",
    "start": "1348240",
    "end": "1354200"
  },
  {
    "text": "going to get back all the 25 rows that you going get back is going to be stored in memory for the duration of this",
    "start": "1354200",
    "end": "1359679"
  },
  {
    "text": "query in contrast if you look at a different query like this uh where you are joining but you're also giving a",
    "start": "1359679",
    "end": "1365799"
  },
  {
    "text": "specific predicate where the customer ID values are equivalent because we've chosen to shart both the tables by the same column and you using the same index",
    "start": "1365799",
    "end": "1372919"
  },
  {
    "text": "we know that all the qualifying rows will come from each of the two shards but the join can be pushed down to my SQL all the rows for a given customer",
    "start": "1372919",
    "end": "1380039"
  },
  {
    "text": "for those orders were also on the same chard so in this case it is a scatter query but it is no longer a join that",
    "start": "1380039",
    "end": "1385400"
  },
  {
    "text": "ptg needs to process on the VT gate level we can push that uh work down to my SQL so this is the query that we end",
    "start": "1385400",
    "end": "1391039"
  },
  {
    "text": "up issuing to both the two shards which is a join in itself so we talked about how uh when we",
    "start": "1391039",
    "end": "1399000"
  },
  {
    "text": "were querying the order table we had to do a scatter query when order ID was one",
    "start": "1399000",
    "end": "1404520"
  },
  {
    "text": "so the add one additional feature that Brest has is for secondary indes we already saw that the primary Windex was",
    "start": "1404520",
    "end": "1410799"
  },
  {
    "text": "used to define how sharding works for a specific uh key space specific um table",
    "start": "1410799",
    "end": "1416840"
  },
  {
    "text": "uh we can introduce secondary indexes as well I'm real quick going to create a secondary index and it runs a workflow",
    "start": "1416840",
    "end": "1424279"
  },
  {
    "text": "uh which can be seen over here so if in case you've got like a huge table and you see that okay you're going to do one more additional query point and you want",
    "start": "1424279",
    "end": "1430600"
  },
  {
    "text": "to add a additional index so in my SQL you can add an additional index index on each of those tables on uh vest this is",
    "start": "1430600",
    "end": "1438000"
  },
  {
    "text": "the equivalent of a index that you would add it's called a v index and what this does is that it stores the mapping for",
    "start": "1438000",
    "end": "1444000"
  },
  {
    "text": "the for that column against the keyspace ID um I'm going to externalize it and then I'm going to show you what I mean",
    "start": "1444000",
    "end": "1450080"
  },
  {
    "text": "by",
    "start": "1450080",
    "end": "1452240"
  },
  {
    "text": "that so if you see we originally had only two tables customer and c order but after we we created a index the",
    "start": "1462360",
    "end": "1468919"
  },
  {
    "text": "secondary index we have an additional table and if you look at the data that's stored in that",
    "start": "1468919",
    "end": "1476000"
  },
  {
    "text": "table it has a mapping from each of those order IDs to the keyspace ID and this tells us which of that Shard the",
    "start": "1476880",
    "end": "1482919"
  },
  {
    "text": "order ID is living in so if you look at order id1 this has the keyspace ID that we saw using the reverse index that it",
    "start": "1482919",
    "end": "1488159"
  },
  {
    "text": "maps to 80 80 and that lives in the second chart so it stores all of those information for each order ID so now",
    "start": "1488159",
    "end": "1494080"
  },
  {
    "text": "when we query with test and we ask it to explicitly route a query uh for a given order ID bites can do uh what bites now",
    "start": "1494080",
    "end": "1502760"
  },
  {
    "text": "does is that it first asks the secondary Windex that we created for this order ID",
    "start": "1502760",
    "end": "1508159"
  },
  {
    "text": "what is the keyspace ID once it has that keyspace ID it can use that to Route the query to that single chart for the",
    "start": "1508159",
    "end": "1513919"
  },
  {
    "text": "specific example that we have over here it doesn't look like a lot of improvement because we're still doing two queries we're doing a Windex query",
    "start": "1513919",
    "end": "1519960"
  },
  {
    "text": "and then we're doing a normal query and the original example we're just going to do two queries to the scatter but this immediately becomes beneficial when you",
    "start": "1519960",
    "end": "1526640"
  },
  {
    "text": "when your number of shards increase um so this is a very scalable approach because even if you have 256 shards this",
    "start": "1526640",
    "end": "1532520"
  },
  {
    "text": "approach will still only do two queries because the first query would be to a index which is uh which is going to be a single query and it's going to ask for",
    "start": "1532520",
    "end": "1538399"
  },
  {
    "text": "the keyspace ID and using that we're again going to do a point query uh to the specific Shard so this is how",
    "start": "1538399",
    "end": "1543480"
  },
  {
    "text": "secondary indexes help out uh in query uh performance improvements that's all for the demo uh",
    "start": "1543480",
    "end": "1549320"
  },
  {
    "text": "I hope that was uh that was beneficial for you and we're going to open it up for questions now thank you so much",
    "start": "1549320",
    "end": "1557720"
  },
  {
    "text": "[Applause] where is the secondary index stored so",
    "start": "1558290",
    "end": "1563840"
  },
  {
    "text": "secondary index is also stored in the same key space where your table is because that secondary index is going to be as large as your original table right",
    "start": "1563840",
    "end": "1570360"
  },
  {
    "text": "because for each of the rows that are there in your original table you're going to have one mapping in the secondary index so that also gets shed",
    "start": "1570360",
    "end": "1576039"
  },
  {
    "text": "so if you um I didn't go into the details of it but if you look at the command that I wrote over here we're actually telling it which Windex to use",
    "start": "1576039",
    "end": "1583760"
  },
  {
    "text": "for the secondary Windex because the secondary Windex itself is a massive table it also needs to be sharded so",
    "start": "1583760",
    "end": "1588880"
  },
  {
    "text": "we're going to tell it how to Shard that table too so it's stored in the same keyspace and as a sharded table",
    "start": "1588880",
    "end": "1595520"
  },
  {
    "text": "itself yes um you want to take this yeah it's fine uh so so early what do you",
    "start": "1600679",
    "end": "1607080"
  },
  {
    "text": "exactly want to know about the automic distribut transaction like is it it earlier what we used to do was we use",
    "start": "1607080",
    "end": "1613600"
  },
  {
    "text": "best effort I think E from the design point of view uh what",
    "start": "1613600",
    "end": "1620320"
  },
  {
    "text": "we do is at at the commit time we basically check like how many shards your query your transaction has went to",
    "start": "1620320",
    "end": "1627200"
  },
  {
    "text": "and from there we store the metadata like we store all the queries that you have executed in that transaction and uh",
    "start": "1627200",
    "end": "1634399"
  },
  {
    "text": "that is what we use to do recovery if your commit flow fails in any point in time and uh what we do is whenever",
    "start": "1634399",
    "end": "1641679"
  },
  {
    "text": "there's a commit flow fail it could be because your VD tablets went down my SQL went down and and that time whenever",
    "start": "1641679",
    "end": "1647799"
  },
  {
    "text": "they come back up first we do the pr we do the prepare of the or all the open to",
    "start": "1647799",
    "end": "1653679"
  },
  {
    "text": "Atomic commit transactions and then we allow any other query to come through so it basically whatever the locks that the",
    "start": "1653679",
    "end": "1659480"
  },
  {
    "text": "original transaction was holding will hold the lock first before proceeding forwards and then we have a recovery way",
    "start": "1659480",
    "end": "1665480"
  },
  {
    "text": "of making sure that if the commit decision was made then it ensures that the commit happens uh automatically on",
    "start": "1665480",
    "end": "1672000"
  },
  {
    "text": "it I'll just add a little bit to it so the two-phase commit basically works by guaranteeing that once you've decided to",
    "start": "1672000",
    "end": "1678320"
  },
  {
    "text": "prepare a transaction and Shard has said that okay I will prepare the transaction it can no longer uh refuse to commit",
    "start": "1678320",
    "end": "1684000"
  },
  {
    "text": "that transaction that's the guarantee that you're expecting from a two-phase commit protocol that's how it works so um because we're using MySQL as an",
    "start": "1684000",
    "end": "1690360"
  },
  {
    "text": "underlying storage MySQL doesn't give us that guarantee that even if we've issued some queries uh it doesn't give us the",
    "start": "1690360",
    "end": "1695399"
  },
  {
    "text": "guarantee that when we try to commit it it's going to Groll forward or not so we've had to implement all of those features on the witht test level where",
    "start": "1695399",
    "end": "1700880"
  },
  {
    "text": "we keep track of what all dmls have been issued so far in that transaction uh we hold the the lcks for those so even if",
    "start": "1700880",
    "end": "1707919"
  },
  {
    "text": "my SQL crashes and um it fails with this and we not able to commit the data when my SQL recovers and we start a fresh a",
    "start": "1707919",
    "end": "1714640"
  },
  {
    "text": "new my SQL instance we do the recovery first we open all those transactions that were prepared previously so that",
    "start": "1714640",
    "end": "1720360"
  },
  {
    "text": "all the transactions in a distributed sense end up being Atomic anything committed on one chart also ends up with the same guarantees on the other one",
    "start": "1720360",
    "end": "1726640"
  },
  {
    "text": "it's it's similar to how xay works but XA is too chatty and made it like unusable and the thing is XA you have to",
    "start": "1726640",
    "end": "1733360"
  },
  {
    "text": "decide whether you going to do a like cross Shard transactions or not but with this it's more flexible and we decided",
    "start": "1733360",
    "end": "1740279"
  },
  {
    "text": "at the commit time and not at when the transaction gets opened so that way it's uh it know it can take the benefit when",
    "start": "1740279",
    "end": "1746519"
  },
  {
    "text": "you're only doing single shart transactions then it it knows that okay you're you don't need the atom atomicity",
    "start": "1746519",
    "end": "1753360"
  },
  {
    "text": "guarantees because that is delivered by MySQL itself so only when at the commit time we basically do a lot of stuff",
    "start": "1753360",
    "end": "1760960"
  },
  {
    "text": "which how the like the 2pc works but it's only the decision that is made late",
    "start": "1760960",
    "end": "1766000"
  },
  {
    "text": "in the commit rather than at the starting of the transaction so that basically gives you",
    "start": "1766000",
    "end": "1771279"
  },
  {
    "text": "more benefit in the time uh like the commit time basically reduces rather than having the if you start using XA",
    "start": "1771279",
    "end": "1778559"
  },
  {
    "text": "and XA is also like some of the things that we don't want to use because it's not we we are not",
    "start": "1778559",
    "end": "1783760"
  },
  {
    "text": "fully uh like uh we don't have the that that X is more robust at that point so",
    "start": "1783760",
    "end": "1789399"
  },
  {
    "text": "we don't we want to use uh existing myql level uh guarantees that are already",
    "start": "1789399",
    "end": "1795720"
  },
  {
    "text": "there and build on top of it",
    "start": "1795720",
    "end": "1799799"
  },
  {
    "text": "um so you can in that case you would create a unique Windex which makes sure",
    "start": "1805519",
    "end": "1810679"
  },
  {
    "text": "that um yeah so we have indexes of different types there's a consistent look of indexes are look up unique indexes which basically if you try to",
    "start": "1810679",
    "end": "1816960"
  },
  {
    "text": "insert duplicate Keys then it complains",
    "start": "1816960",
    "end": "1821440"
  },
  {
    "text": "um um I'm sorry from vgate you can basically do the vream uh API and that",
    "start": "1823559",
    "end": "1829120"
  },
  {
    "text": "will be collecting from all the shards so you you will have a single uh end point to get CDC",
    "start": "1829120",
    "end": "1837278"
  },
  {
    "text": "yeah um consistency guarantees across cross Shard queries it's the same guarantees that my SQL provides",
    "start": "1839240",
    "end": "1844360"
  },
  {
    "text": "everything uh yeah um I'm sorry I don't quite get so uh for for the cross shut uh you'll basically see uh read",
    "start": "1844360",
    "end": "1851240"
  },
  {
    "text": "committed uh isolation if that's what you're looking at otherwise what is get uh persisted by the myle you'll just see",
    "start": "1851240",
    "end": "1858120"
  },
  {
    "text": "the same guarantees that follows yeah that's one of the advantages we get because we're using MySQL as our storage layer the guarantees that MySQL has uh",
    "start": "1858120",
    "end": "1865120"
  },
  {
    "text": "kind of flow through into wi as",
    "start": "1865120",
    "end": "1868639"
  },
  {
    "text": "well so uh too servers specifically we use etcd because they have features like",
    "start": "1876440",
    "end": "1882519"
  },
  {
    "text": "they run back and raft there and we use them for locking The Shard so that VTR multiple Ines of VTR or don't clash with",
    "start": "1882519",
    "end": "1888559"
  },
  {
    "text": "each other when they're trying to recover the topology because that would be very problematic if two different vork instances decided to um promote two",
    "start": "1888559",
    "end": "1894720"
  },
  {
    "text": "different primaries So to avoid all of that we use at CD because it's running a a consensus protocol",
    "start": "1894720",
    "end": "1902120"
  },
  {
    "text": "there um we are not aware of it this this supports we know something for pros gu",
    "start": "1905240",
    "end": "1912720"
  },
  {
    "text": "but I not sure about my SQL uh server",
    "start": "1912720",
    "end": "1917679"
  },
  {
    "text": "right so stored procedures we don't support because it just gets too complicated we support for Uncharted uh",
    "start": "1922880",
    "end": "1930360"
  },
  {
    "text": "but views is supported uh you can do views sharded we have a a good enough",
    "start": "1930360",
    "end": "1935559"
  },
  {
    "text": "support and uh yeah your views should just work cross shot it's",
    "start": "1935559",
    "end": "1942120"
  },
  {
    "text": "there so that you have to configure at the my SQL level uh I we we as a as a",
    "start": "1945279",
    "end": "1951679"
  },
  {
    "text": "layer on vtest like I don't think we have that support from the vtest level but you can configure at directly at the",
    "start": "1951679",
    "end": "1957399"
  },
  {
    "text": "myql level and that should work",
    "start": "1957399",
    "end": "1961240"
  },
  {
    "text": "yeah yes so the high ability is guaranteed by the vtor instance that we had in the architecture slide so vtor is",
    "start": "1964559",
    "end": "1970919"
  },
  {
    "text": "a fork of orchestrator uh I'm not aware if the orchestrator is a MySQL uh it it",
    "start": "1970919",
    "end": "1976600"
  },
  {
    "text": "was a high tool that was used used for MySQL clusters and we for that into a test and what BTR does is that when you",
    "start": "1976600",
    "end": "1982760"
  },
  {
    "text": "run a single chart you've got a primary instance and multiple replicas when a primary crashes VOR because it's pulling",
    "start": "1982760",
    "end": "1988760"
  },
  {
    "text": "all of those instances my SQL replication also breaks it immediately figures out that okay this system has crashed and then it promotes a different",
    "start": "1988760",
    "end": "1994799"
  },
  {
    "text": "replica um into that by so it's configurable by default in the examples that we have we generally",
    "start": "1994799",
    "end": "2001200"
  },
  {
    "text": "keep three replicas so you've got a primary you've got one replica and one read only tablet uh for backups and",
    "start": "2001200",
    "end": "2006240"
  },
  {
    "text": "stuff um but it's configurable you can choose to have as many replicas as you want it's something that it's dependent on your application if your application",
    "start": "2006240",
    "end": "2013320"
  },
  {
    "text": "has a lot of read traffic and you want to have like five replicas that is totally possible you can also choose to",
    "start": "2013320",
    "end": "2018600"
  },
  {
    "text": "configure how many semi acts you want to run with um so we're using the same my SQL replication thing uh for our",
    "start": "2018600",
    "end": "2024000"
  },
  {
    "text": "clusters every repli comes own stage yes every repli repli exactly so it's it's a",
    "start": "2024000",
    "end": "2031799"
  },
  {
    "text": "it's a each shart exactly so it's each chart is in",
    "start": "2031799",
    "end": "2037840"
  },
  {
    "text": "itself a MySQL cluster where there's a primary and multiple replicas uh they have their V tablets attached to them but in a sense it's still a MySQL",
    "start": "2037840",
    "end": "2043919"
  },
  {
    "text": "replicated environment so there are multiple myql instances running per",
    "start": "2043919",
    "end": "2048760"
  },
  {
    "text": "Shard yes so so how we workor yeah so how we",
    "start": "2055839",
    "end": "2063200"
  },
  {
    "text": "work is basically we when we send a query we pass the query and we normalize the query and and then we do the",
    "start": "2063200",
    "end": "2068398"
  },
  {
    "text": "planning so when next time when you send the query we have the plan plan cach ready so we don't take time the next",
    "start": "2068399",
    "end": "2074040"
  },
  {
    "text": "time so it's only the first time you'll see the Len se but forward you won't even know what the planning time is yeah",
    "start": "2074040",
    "end": "2079118"
  },
  {
    "text": "so I'm just going to real quick show this over here um over here if you see that order ID one we don't actually have",
    "start": "2079119",
    "end": "2084280"
  },
  {
    "text": "the one value in the plan the plan just so shows a normalized value for order ID with this uh so even if you ran the same",
    "start": "2084280",
    "end": "2090800"
  },
  {
    "text": "query where you said order ID equal to 5 it would still use the same plan because we just build it once and then we cash those plans",
    "start": "2090800",
    "end": "2098560"
  },
  {
    "text": "right",
    "start": "2105320",
    "end": "2107520"
  },
  {
    "text": "so so how how the planning works is like if we can send the order by down if you",
    "start": "2110880",
    "end": "2116520"
  },
  {
    "text": "use the sharding key then we can easily do is what we do is we send the order by down to all the myql so local ordering",
    "start": "2116520",
    "end": "2123280"
  },
  {
    "text": "happens at myql and we do the mer sort at vgate but if you're using some other column which which is not part of your",
    "start": "2123280",
    "end": "2130119"
  },
  {
    "text": "Windex or anything then it's then we have to do all the ordering at the vgate level it's that's how it like it",
    "start": "2130119",
    "end": "2138800"
  },
  {
    "text": "works all right thank you so much for joining us today see you all later thank",
    "start": "2142960",
    "end": "2148160"
  },
  {
    "text": "you",
    "start": "2148160",
    "end": "2150838"
  }
]