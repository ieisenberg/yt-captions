[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "hello everyone my name is ryan turner and i'm a software engineer at uber and today i'm going to talk to you about",
    "start": "2560",
    "end": "7759"
  },
  {
    "text": "something called production workload identity and explain what that means and how we can use it to improve security",
    "start": "7759",
    "end": "13679"
  },
  {
    "text": "posture and how we can achieve that with something called spire",
    "start": "13679",
    "end": "20080"
  },
  {
    "start": "22000",
    "end": "22000"
  },
  {
    "text": "so to start i want to talk about a fictional services organization which i've invented for the purposes of this",
    "start": "23600",
    "end": "29279"
  },
  {
    "text": "talk it's called starboard games and they want to get into the business of selling board games as an online",
    "start": "29279",
    "end": "35520"
  },
  {
    "text": "retailer so let's take a look at how they might initially build this system",
    "start": "35520",
    "end": "43559"
  },
  {
    "start": "43000",
    "end": "43000"
  },
  {
    "text": "so first they come up with a three-tier architecture to represent different layers of the",
    "start": "44079",
    "end": "50320"
  },
  {
    "text": "application so this is composed of three different layers one is the storage layer which is",
    "start": "50320",
    "end": "57280"
  },
  {
    "text": "a persistent stateful layer and that contains data",
    "start": "57280",
    "end": "62320"
  },
  {
    "text": "that is represented in the system then there is an application layer which interacts with that stateful storage",
    "start": "62320",
    "end": "69520"
  },
  {
    "text": "and creates reads updates deletes that data and then there's a web presentation layer which is accessible to users and",
    "start": "69520",
    "end": "77119"
  },
  {
    "text": "that's how they interact with the platform and that web layer talks to the app layer to",
    "start": "77119",
    "end": "83360"
  },
  {
    "text": "do different operations in the system so this is all in this example running",
    "start": "83360",
    "end": "88479"
  },
  {
    "text": "in an aws vpc and as an online retailer this company",
    "start": "88479",
    "end": "94000"
  },
  {
    "text": "wants to provide some level of security so that not everything in their production deployment is accessible over",
    "start": "94000",
    "end": "100240"
  },
  {
    "text": "the internet so they do this naturally through vpc at goals and they basically set up three",
    "start": "100240",
    "end": "107520"
  },
  {
    "text": "different echo policies one says that only things from the internet can access the web subnet only things from the web",
    "start": "107520",
    "end": "114960"
  },
  {
    "text": "subnet can talk to the app subnet and only things from the app subnet can talk to the storage subnet",
    "start": "114960",
    "end": "120640"
  },
  {
    "text": "so pretty simple and but over time they grow and they decide they want to try to decompose",
    "start": "120640",
    "end": "127600"
  },
  {
    "text": "some of the functionality in this app subnet into several different microservices",
    "start": "127600",
    "end": "134319"
  },
  {
    "text": "so they move more towards a microservice architecture and suddenly their deployment has gotten",
    "start": "134319",
    "end": "140800"
  },
  {
    "start": "135000",
    "end": "135000"
  },
  {
    "text": "much more complicated so you'll see in the middle and bottom layers where there was only one subnet",
    "start": "140800",
    "end": "147599"
  },
  {
    "text": "there now that's tripled where the service in the app",
    "start": "147599",
    "end": "153040"
  },
  {
    "text": "subnet has now been decomposed into three different services the account service and order service which",
    "start": "153040",
    "end": "159760"
  },
  {
    "text": "talks to the account service to get information about an account and then a recommendation service which",
    "start": "159760",
    "end": "166959"
  },
  {
    "text": "talks to both the account service and the order service to provide customized recommendations to users",
    "start": "166959",
    "end": "173599"
  },
  {
    "text": "and each of these services has its own database so all of a sudden this middle and bottom",
    "start": "173599",
    "end": "180000"
  },
  {
    "text": "layer has gotten much more complex additionally the operations team has come up with a requirement to be able to",
    "start": "180000",
    "end": "186319"
  },
  {
    "text": "access the instances running in production through a jump box and so there's a new admin jump box subnet",
    "start": "186319",
    "end": "192879"
  },
  {
    "text": "which is a much more privileged subnet and can talk to things in the web subnet as well as things in the app subnets",
    "start": "192879",
    "end": "201200"
  },
  {
    "text": "so quickly the organization realizes this is something that's difficult to manage",
    "start": "201200",
    "end": "208879"
  },
  {
    "text": "now i want to talk about what this organization's long-term goals might be",
    "start": "208959",
    "end": "214319"
  },
  {
    "text": "so in this hypothetical example let's say that they have some growth plans here to expand their retail business",
    "start": "214319",
    "end": "220159"
  },
  {
    "text": "from north america to europe and asia so to have more of a global footprint",
    "start": "220159",
    "end": "225519"
  },
  {
    "text": "they also want to provide an online board game experience where users can subscribe to their platform and play",
    "start": "225519",
    "end": "232560"
  },
  {
    "text": "multiplayer games online together additionally they also want to host",
    "start": "232560",
    "end": "238000"
  },
  {
    "text": "board game tournaments in physical locations uh where users can register for these board games and meet up in person",
    "start": "238000",
    "end": "245200"
  },
  {
    "text": "and those board games are sponsored by a board game company or some other companies",
    "start": "245200",
    "end": "250319"
  },
  {
    "text": "which provide this starboard games company some revenue",
    "start": "250319",
    "end": "255519"
  },
  {
    "text": "and what are the technical objectives here that this organization might face",
    "start": "255519",
    "end": "261280"
  },
  {
    "text": "well in the previous architectures we've seen that each instance of a service runs in its own",
    "start": "261280",
    "end": "267680"
  },
  {
    "text": "virtual machine in aws and we know that this is not the most efficient way to run services today",
    "start": "267680",
    "end": "274639"
  },
  {
    "text": "there are many operating system and services that are being duplicated for every instance of a service",
    "start": "274639",
    "end": "281280"
  },
  {
    "text": "so this organization wants to adopt containers and run their services as containers so that they can have",
    "start": "281280",
    "end": "288479"
  },
  {
    "text": "a more general compute pool of resources and run uh instances of their service across",
    "start": "288479",
    "end": "294560"
  },
  {
    "text": "that pool they also want to streamline their deployment and",
    "start": "294560",
    "end": "300400"
  },
  {
    "text": "most effectively use those compute resources in their compute pool using kubernetes",
    "start": "300400",
    "end": "306080"
  },
  {
    "text": "additionally they have a requirement to use a native gcp service for the online",
    "start": "306080",
    "end": "312240"
  },
  {
    "text": "board game experience that they're trying to build today they only have a deployment in aws so this is a new set of challenges that",
    "start": "312240",
    "end": "318880"
  },
  {
    "text": "they need to overcome so with all of these growth plans and",
    "start": "318880",
    "end": "325120"
  },
  {
    "text": "technical objectives there are some new security challenges that we need to consider",
    "start": "325120",
    "end": "330960"
  },
  {
    "text": "so the business now has a couple of new priorities based on these growth plans",
    "start": "330960",
    "end": "336479"
  },
  {
    "text": "one is that they need to be more active in preventing order and subscription",
    "start": "336479",
    "end": "341600"
  },
  {
    "text": "fraud now that they're a global company they're much bigger target for online",
    "start": "341600",
    "end": "347680"
  },
  {
    "text": "fraud and that has a big impact on their overall bottom line",
    "start": "347680",
    "end": "353840"
  },
  {
    "text": "they also want to protect users privacy and confidentiality and this is important because they are",
    "start": "353840",
    "end": "361280"
  },
  {
    "text": "now introducing physical meetups for the board game tournaments",
    "start": "361280",
    "end": "366880"
  },
  {
    "text": "so something about users location at a certain time could be exposed if an unauthorized",
    "start": "366880",
    "end": "373280"
  },
  {
    "text": "actor or malicious actor was able to obtain that data um so this is kind of sensitive data",
    "start": "373280",
    "end": "378479"
  },
  {
    "text": "that we want to protect so what are some current challenges we might have with this existing",
    "start": "378479",
    "end": "385199"
  },
  {
    "text": "architecture to satisfy these security challenges well the current service of service",
    "start": "385199",
    "end": "390479"
  },
  {
    "text": "authorization policies are all basically just network level apples",
    "start": "390479",
    "end": "395520"
  },
  {
    "text": "so since everything is running an instance in per vm",
    "start": "395520",
    "end": "400960"
  },
  {
    "text": "we can kind of design things around an ip address or dns name as a way of",
    "start": "400960",
    "end": "406160"
  },
  {
    "text": "identifying a service but when services are running in containers on the same host",
    "start": "406160",
    "end": "411199"
  },
  {
    "text": "those constructs suddenly lose meaning and as a microservices deployment gets more",
    "start": "411199",
    "end": "418160"
  },
  {
    "text": "and more complex this does not really scale additionally this perimeter-based",
    "start": "418160",
    "end": "423919"
  },
  {
    "text": "security model is really not sufficient on its own to protect unauthorized access to services in the network",
    "start": "423919",
    "end": "431680"
  },
  {
    "text": "take for example this admin jump box if anyone were able to compromise an",
    "start": "431680",
    "end": "437120"
  },
  {
    "text": "operations team's credentials and get ssh access to",
    "start": "437120",
    "end": "442160"
  },
  {
    "text": "that vm in the subnet for the admin jump box they basically have unfettered access to",
    "start": "442160",
    "end": "448479"
  },
  {
    "text": "any of the microservices running in the vpc so this is quite dangerous",
    "start": "448479",
    "end": "454880"
  },
  {
    "start": "456000",
    "end": "456000"
  },
  {
    "text": "so now the question is where do we go from here how do we actually achieve these security objectives",
    "start": "456880",
    "end": "463120"
  },
  {
    "text": "well i think it's pretty clear we need a new model uh the existing network based model is not really working for us the",
    "start": "463120",
    "end": "469440"
  },
  {
    "text": "way we want it to so what we really need is a secure precise",
    "start": "469440",
    "end": "477039"
  },
  {
    "text": "way of identifying workloads to enable strong authentication in",
    "start": "477039",
    "end": "483039"
  },
  {
    "text": "service to service communication in order to limit access to only",
    "start": "483039",
    "end": "488319"
  },
  {
    "text": "authorized actors in the system so this is kind of the mission statement here this is what we're trying to",
    "start": "488319",
    "end": "493919"
  },
  {
    "text": "achieve to satisfy the business challenge security challenges that we've",
    "start": "493919",
    "end": "498960"
  },
  {
    "text": "identified so how will we actually go about this",
    "start": "498960",
    "end": "504879"
  },
  {
    "start": "504000",
    "end": "504000"
  },
  {
    "text": "well this is where spiffy comes in so spiffy uh stands for secure production identity framework for",
    "start": "504879",
    "end": "511520"
  },
  {
    "text": "everyone and it's an open source set of specifications that define what is a workload identity how do you",
    "start": "511520",
    "end": "518640"
  },
  {
    "text": "represent it and how do you as a workload obtain its identity",
    "start": "518640",
    "end": "523839"
  },
  {
    "text": "and this concept of a workload identity in spiffy is not tied to any network level constructs like ip address or dns",
    "start": "523839",
    "end": "531040"
  },
  {
    "text": "name so it allows us to in this more microservices container-based world",
    "start": "531040",
    "end": "538800"
  },
  {
    "text": "identify workloads",
    "start": "538800",
    "end": "542080"
  },
  {
    "start": "543000",
    "end": "543000"
  },
  {
    "text": "so how does spiffy describe a workload identity well it describes it through something",
    "start": "544320",
    "end": "549519"
  },
  {
    "text": "called a spiffy id and this is an identifier string which is actually",
    "start": "549519",
    "end": "554720"
  },
  {
    "text": "represented as a uri and this there's an example of such a",
    "start": "554720",
    "end": "560640"
  },
  {
    "text": "spiffy id so this is one example um",
    "start": "560640",
    "end": "566640"
  },
  {
    "start": "564000",
    "end": "564000"
  },
  {
    "text": "we have three components to spiffy id one is a static scheme which indicates that this is a spiffy id so it just is a",
    "start": "566640",
    "end": "574240"
  },
  {
    "text": "static component and then the host portion of the uri is",
    "start": "574240",
    "end": "579760"
  },
  {
    "text": "something called a trust domain and a trust domain is really like a logical security and or administrative",
    "start": "579760",
    "end": "586480"
  },
  {
    "text": "boundary for trust and then finally the path component",
    "start": "586480",
    "end": "593839"
  },
  {
    "text": "this is really a user defined value it can be anything the specification does not really dictate what the value is",
    "start": "593839",
    "end": "600880"
  },
  {
    "text": "other than what characters can be in the path but basically this path is what is",
    "start": "600880",
    "end": "606399"
  },
  {
    "text": "representing the name of the workload that other workloads can use to identify it",
    "start": "606399",
    "end": "612640"
  },
  {
    "text": "so in this case we're saying this is the entity workload running in the mydomain.org trust domain",
    "start": "612640",
    "end": "621200"
  },
  {
    "text": "okay great so we have a way to refer to a workload but that in itself is not really enough to tell us",
    "start": "622399",
    "end": "630079"
  },
  {
    "text": "for a given rpc how do we know that this service is who it claims to be",
    "start": "630079",
    "end": "637200"
  },
  {
    "text": "so how do we enable this kind of authentication this strong authentication",
    "start": "637200",
    "end": "642399"
  },
  {
    "text": "using the spiffy id building block that we just talked about",
    "start": "642399",
    "end": "647839"
  },
  {
    "text": "well this is done through something called a spiffy verifiable identity document so spiffy defines this specification of",
    "start": "648160",
    "end": "655279"
  },
  {
    "text": "an svid and an svid is a digitally signed document which allows workloads",
    "start": "655279",
    "end": "661360"
  },
  {
    "text": "to basically enable strong authentication using cryptographically verifiable",
    "start": "661360",
    "end": "667760"
  },
  {
    "text": "chains of trust so there are two different kinds of",
    "start": "667760",
    "end": "673680"
  },
  {
    "text": "uh defined in spiffy today one is an x509 and svid so this is an x 509",
    "start": "673680",
    "end": "678720"
  },
  {
    "text": "certificate with certain constraints defined in spiffy and then there is also a jaw tested type",
    "start": "678720",
    "end": "686800"
  },
  {
    "text": "json web token and additionally this s-vid type also uses",
    "start": "686800",
    "end": "693200"
  },
  {
    "text": "the standard jwte format but with some additional constraints introduced",
    "start": "693200",
    "end": "699200"
  },
  {
    "start": "700000",
    "end": "700000"
  },
  {
    "text": "so here's an example of an x509 svid and i've just highlighted the portions that",
    "start": "700839",
    "end": "707040"
  },
  {
    "text": "are relevant to highlight today um so we have an issuer in this case",
    "start": "707040",
    "end": "713839"
  },
  {
    "text": "this is issued by an organization called spiffy and we also have a subject",
    "start": "713839",
    "end": "720160"
  },
  {
    "text": "and here this is uh the subject is basically an organization",
    "start": "720160",
    "end": "725519"
  },
  {
    "text": "called spire and then you'll see in the validity portion here there's a not before and",
    "start": "725519",
    "end": "731519"
  },
  {
    "text": "not after and these are actually only an hour apart from one another",
    "start": "731519",
    "end": "737200"
  },
  {
    "text": "so this is actually a really powerful thing to have a short-lived identity and this is something we'll talk about a",
    "start": "737200",
    "end": "743040"
  },
  {
    "text": "little bit later with spire but the core thing we want to highlight",
    "start": "743040",
    "end": "748240"
  },
  {
    "text": "here is this uri subject alternative name in the certificate and this contains the",
    "start": "748240",
    "end": "754000"
  },
  {
    "text": "spiffy id of the workload so this is really what identifies what this certificate is",
    "start": "754000",
    "end": "760240"
  },
  {
    "text": "issued for in this example it's issued for the service orders in the example.org",
    "start": "760240",
    "end": "766959"
  },
  {
    "text": "trust domain and then here's an example of a jawasvid",
    "start": "766959",
    "end": "772639"
  },
  {
    "start": "770000",
    "end": "770000"
  },
  {
    "text": "so very similar we have a subject claim here the suv claim",
    "start": "772639",
    "end": "778720"
  },
  {
    "text": "which has the spiffy id of the service that this token is issued for",
    "start": "778720",
    "end": "784399"
  },
  {
    "text": "we also have an aud claim which represents the list of audiences that this token is valid for and in this case",
    "start": "784399",
    "end": "791680"
  },
  {
    "text": "we're saying that this token is valid for the account service uh there's also these other two claims",
    "start": "791680",
    "end": "798000"
  },
  {
    "text": "exp which stands for expiration time and iat which stands for issued at and",
    "start": "798000",
    "end": "804079"
  },
  {
    "text": "you'll see here that these values only differ by 300 unix",
    "start": "804079",
    "end": "809360"
  },
  {
    "text": "seconds here and 300 seconds is 5 minutes so again this is highlighting that this is a",
    "start": "809360",
    "end": "814720"
  },
  {
    "text": "short-lived identity which is really powerful because if the identity was compromised in any form",
    "start": "814720",
    "end": "820320"
  },
  {
    "text": "it would only be valid for up to five minutes in this example",
    "start": "820320",
    "end": "825199"
  },
  {
    "text": "okay so we've talked about how do you refer to a workload by its 50 id and how that id is represented in a",
    "start": "826320",
    "end": "834480"
  },
  {
    "text": "cryptographically verifiable document called an svid now how do workloads obtain their",
    "start": "834480",
    "end": "841040"
  },
  {
    "text": "identity or in other words their svid well this is defined in spiffy as the",
    "start": "841040",
    "end": "847600"
  },
  {
    "text": "workload api and this is a grpc based api which is",
    "start": "847600",
    "end": "852639"
  },
  {
    "text": "available over a local unix socket endpoint in the recommended deployment form",
    "start": "852639",
    "end": "858160"
  },
  {
    "text": "it can also be deployed with as a tcp socket but in general that is",
    "start": "858160",
    "end": "863839"
  },
  {
    "text": "not recommended for some security reasons that i won't really go too much into today but you can read about in the spec if you're",
    "start": "863839",
    "end": "870240"
  },
  {
    "text": "interested and this api exposes a few apis but these",
    "start": "870240",
    "end": "876720"
  },
  {
    "text": "are the two that i'll kind of hone in on today which are probably the most important to talk about",
    "start": "876720",
    "end": "882079"
  },
  {
    "text": "um so one is an x 509 svid api called fetch fx509s vid and this is how a",
    "start": "882079",
    "end": "889279"
  },
  {
    "text": "client would actually get its identity in the form of an x500 svid it's a server streaming rpc meaning that",
    "start": "889279",
    "end": "896160"
  },
  {
    "text": "when the client connects it opens this long live stream over which the server can actually push",
    "start": "896160",
    "end": "902560"
  },
  {
    "text": "things later so we'll see how that works later and then there's a jawdsfit api which",
    "start": "902560",
    "end": "910000"
  },
  {
    "text": "in this case is a unary rpc so that means the client will request its identity um and then it'll just receive the",
    "start": "910000",
    "end": "916880"
  },
  {
    "text": "response and anytime it needs another identity it just re-requests it from this rpc",
    "start": "916880",
    "end": "923680"
  },
  {
    "text": "okay so that's spiffy so now we've basically defined these primitives of workload identity how it's represented",
    "start": "923920",
    "end": "931279"
  },
  {
    "text": "and how we can obtain one now how do we use these things to actually enable secure authentication",
    "start": "931279",
    "end": "940160"
  },
  {
    "start": "940000",
    "end": "940000"
  },
  {
    "text": "this is where spire comes in so spire is actually an open source implementation of the spiffy",
    "start": "940160",
    "end": "945920"
  },
  {
    "text": "specifications and i just want to highlight a few key features about spire",
    "start": "945920",
    "end": "951440"
  },
  {
    "text": "that are really interesting that go above and beyond what spiffy defines so one is that",
    "start": "951440",
    "end": "958000"
  },
  {
    "text": "it automatically refreshes the identity documents that it issues and this is really powerful when you",
    "start": "958000",
    "end": "963920"
  },
  {
    "text": "combine it with the concept of a short-lived identity because you can actually define these",
    "start": "963920",
    "end": "969600"
  },
  {
    "text": "short-lived identities in the platform and spire will automatically rotate them and push the new identity documents",
    "start": "969600",
    "end": "976240"
  },
  {
    "text": "directly to the workload that needs them and additionally spire can run in many",
    "start": "976240",
    "end": "982160"
  },
  {
    "text": "environments including in kubernetes or in native vms in aws gcp and azure as",
    "start": "982160",
    "end": "989199"
  },
  {
    "text": "well as in your own private cloud infrastructure it supports identification of workloads",
    "start": "989199",
    "end": "994800"
  },
  {
    "text": "via several means one is unix socket another is a docker container",
    "start": "994800",
    "end": "1001519"
  },
  {
    "text": "sorry a unix process or a docker container or a kubernetes pod",
    "start": "1001519",
    "end": "1007680"
  },
  {
    "text": "it also has flexibility to be extended into several different ways based on some of",
    "start": "1007680",
    "end": "1014880"
  },
  {
    "text": "the key features that it delivers you can actually write your own plugins and",
    "start": "1014880",
    "end": "1020560"
  },
  {
    "text": "plug those into spire to adapt it for your own environment or use cases",
    "start": "1020560",
    "end": "1026959"
  },
  {
    "text": "so i want to kind of quickly go over what the architecture of spire looks like and how the control plane is",
    "start": "1027679",
    "end": "1033360"
  },
  {
    "start": "1028000",
    "end": "1028000"
  },
  {
    "text": "designed so there are three components here on the right we have the spire database and",
    "start": "1033360",
    "end": "1039760"
  },
  {
    "text": "this contains information about the different types of workloads that can receive identity in this environment",
    "start": "1039760",
    "end": "1047760"
  },
  {
    "text": "and in this case we're talking about a trust domain which is the logical boundary for aspire deployment",
    "start": "1047760",
    "end": "1054240"
  },
  {
    "text": "and aspire server deployment here talks to the spire database and manages",
    "start": "1054240",
    "end": "1060480"
  },
  {
    "text": "those workload registrations and this can be deployed as a highly available active active deployment",
    "start": "1060480",
    "end": "1067200"
  },
  {
    "text": "and then on the left here we have two different hosts in this example host a and host b",
    "start": "1067200",
    "end": "1072960"
  },
  {
    "text": "and each of these hosts runs a host local agent called aspire agent and the responsibility of aspire agent",
    "start": "1072960",
    "end": "1079520"
  },
  {
    "text": "is to reach out to the spider server to get workload identities for all the different types of workloads",
    "start": "1079520",
    "end": "1085760"
  },
  {
    "text": "which can run on the same host as that agent and to cache those identities for",
    "start": "1085760",
    "end": "1091679"
  },
  {
    "text": "the lifetime of those identities and deliver them to the workloads that need",
    "start": "1091679",
    "end": "1096720"
  },
  {
    "text": "them as well as refresh them over time so this is at a high level",
    "start": "1096720",
    "end": "1102400"
  },
  {
    "text": "the architecture now i just kind of want to walk through",
    "start": "1102400",
    "end": "1107760"
  },
  {
    "start": "1104000",
    "end": "1104000"
  },
  {
    "text": "the whole flow of how a workload is registered in spire and then how a workload obtains the",
    "start": "1107760",
    "end": "1114960"
  },
  {
    "text": "identity for that registration as well as how that identity is rotated",
    "start": "1114960",
    "end": "1120240"
  },
  {
    "text": "and pushed back to the workload so at the top here we have a component",
    "start": "1120240",
    "end": "1126480"
  },
  {
    "text": "called workload orchestrator and this could be something that is like a deployment engine which",
    "start": "1126480",
    "end": "1132960"
  },
  {
    "text": "launches containers or launches processes that need identity it also could be a separate service",
    "start": "1132960",
    "end": "1140480"
  },
  {
    "text": "which uses a source of truth that shares with a workload orchestrator so we can look up information about deployments",
    "start": "1140480",
    "end": "1147200"
  },
  {
    "text": "and see where workloads are running and then it can what its",
    "start": "1147200",
    "end": "1152400"
  },
  {
    "text": "purpose in this diagram is is to actually make those registrations in the spire server to designate that these are",
    "start": "1152400",
    "end": "1160160"
  },
  {
    "text": "identities which should be available in this environment and so in this example where",
    "start": "1160160",
    "end": "1166000"
  },
  {
    "text": "our workload orchestrator is going to deploy an instance of the order service and the account service",
    "start": "1166000",
    "end": "1171280"
  },
  {
    "text": "and so when it goes to do that deployment it's going to reach out to this fire server and it's going to",
    "start": "1171280",
    "end": "1176640"
  },
  {
    "text": "register identities for the orders and accounts services and then spire server is going to",
    "start": "1176640",
    "end": "1183200"
  },
  {
    "text": "persist those workload registrations in its database",
    "start": "1183200",
    "end": "1188480"
  },
  {
    "text": "okay so this is kind of the registration onboarding flow now",
    "start": "1188480",
    "end": "1193679"
  },
  {
    "text": "on the left here we have two different hosts a host a and host b again and each of those is running an instance",
    "start": "1193679",
    "end": "1199039"
  },
  {
    "text": "of aspire agent so spider agent is has a secure channel set up with aspire",
    "start": "1199039",
    "end": "1204960"
  },
  {
    "text": "server and it requests all of the workload identities that it can serve on",
    "start": "1204960",
    "end": "1210799"
  },
  {
    "text": "the host that it's running on so it's going to send certificate signing requests for all the x 509",
    "start": "1210799",
    "end": "1215919"
  },
  {
    "text": "identities that i can serve and the spire server will sign those certificate signing requests",
    "start": "1215919",
    "end": "1223600"
  },
  {
    "text": "uh for all those work related entities and send them back to the agents that were requested those signings",
    "start": "1223600",
    "end": "1230880"
  },
  {
    "text": "okay so now the agent has the identities for the workloads cached locally",
    "start": "1230880",
    "end": "1238400"
  },
  {
    "text": "so now the orchestrator launches instances of the order service in the",
    "start": "1239039",
    "end": "1244559"
  },
  {
    "text": "account service so the order service is running on host a and the account service is running on host b",
    "start": "1244559",
    "end": "1250080"
  },
  {
    "text": "the order service requests an x509 svid from the supplier agent and the account service does the same",
    "start": "1250080",
    "end": "1256080"
  },
  {
    "text": "on its local host now both of those services get their",
    "start": "1256080",
    "end": "1261679"
  },
  {
    "text": "identities from spire and they set up the secure channel over mutually authenticated tls",
    "start": "1261679",
    "end": "1267919"
  },
  {
    "text": "and now the order service can issue an rpc over the secure channel",
    "start": "1267919",
    "end": "1273200"
  },
  {
    "text": "and using the spiffy id present in the x510 and s vid the account service can",
    "start": "1273200",
    "end": "1278880"
  },
  {
    "text": "actually verify whether or not the service that is making the request is is authorized to",
    "start": "1278880",
    "end": "1286320"
  },
  {
    "text": "issue that request so it can basically define an authorization policy which says",
    "start": "1286320",
    "end": "1292480"
  },
  {
    "text": "the only the order service is allowed to access the get user account api for",
    "start": "1292480",
    "end": "1299039"
  },
  {
    "text": "example okay so great we have a secure authentication now between services",
    "start": "1299039",
    "end": "1305600"
  },
  {
    "text": "and this is something that's cryptographically verifiable with tls",
    "start": "1305600",
    "end": "1310399"
  },
  {
    "text": "and then the next part of the life cycle of the x510 svid",
    "start": "1311120",
    "end": "1316480"
  },
  {
    "text": "is that at some point it's going to expire so the agent has to request new",
    "start": "1316480",
    "end": "1321679"
  },
  {
    "text": "updated rotated s-vids for these workloads so it reaches out to the spire server and asks for",
    "start": "1321679",
    "end": "1328159"
  },
  {
    "text": "newly signed certificates and the spyer server refreshes those x509 edit identities in the same way",
    "start": "1328159",
    "end": "1334960"
  },
  {
    "text": "that it originally issued them by signing the certificate signing request sent by the agent",
    "start": "1334960",
    "end": "1341440"
  },
  {
    "text": "and then once the agents get those updated identities they actually pushed them to the",
    "start": "1341440",
    "end": "1347520"
  },
  {
    "text": "services which contacted them over the workload api so earlier we talked about how the fetch",
    "start": "1347520",
    "end": "1353280"
  },
  {
    "text": "x 509 s vid or pc in the spf workload api is a server streaming rpc",
    "start": "1353280",
    "end": "1358640"
  },
  {
    "text": "so this is where why it's designed that way is so that later on the",
    "start": "1358640",
    "end": "1363840"
  },
  {
    "text": "spire agent can transparently push the rotated identities to the workloads",
    "start": "1363840",
    "end": "1371039"
  },
  {
    "start": "1372000",
    "end": "1372000"
  },
  {
    "text": "okay so just to kind of focus on the first part of this overall flow that we",
    "start": "1372799",
    "end": "1378000"
  },
  {
    "text": "talked about we had this workload orchestrator which was creating these workload registrations for workloads",
    "start": "1378000",
    "end": "1385039"
  },
  {
    "text": "um so that's really how spire identifies different workloads which run on the",
    "start": "1385039",
    "end": "1390799"
  },
  {
    "text": "different hosts in the environment and um this is how we represent uh",
    "start": "1390799",
    "end": "1396799"
  },
  {
    "text": "registration inspire and there are three key properties i want to focus on one is this 50 id",
    "start": "1396799",
    "end": "1403520"
  },
  {
    "text": "and this is at the top here this represents the workload itself",
    "start": "1403520",
    "end": "1408720"
  },
  {
    "text": "so this is what the identity is is issued for as we issued for the",
    "start": "1408720",
    "end": "1414080"
  },
  {
    "text": "service orders here then there's a concept called a parent id and this parent id is really powerful it",
    "start": "1414080",
    "end": "1420159"
  },
  {
    "text": "allows us to group workload registrations to a particular agent or set of agents",
    "start": "1420159",
    "end": "1426080"
  },
  {
    "text": "so it allows us to effectively control which workloads can run on which hosts",
    "start": "1426080",
    "end": "1432960"
  },
  {
    "text": "and then the third thing here is something called a selector and this selector is a runtime attribute",
    "start": "1433120",
    "end": "1440159"
  },
  {
    "text": "that we use to identify the workload that is trying to obtain an identity and so in this",
    "start": "1440159",
    "end": "1446159"
  },
  {
    "text": "case we have like a docker environment variable selector called service underscore name which is equal to orders",
    "start": "1446159",
    "end": "1452559"
  },
  {
    "text": "and a selector called pod name for kubernetes which is set to the value of order",
    "start": "1452559",
    "end": "1459200"
  },
  {
    "text": "service and then kubernetes namespace which is set to production and so what this means is any service",
    "start": "1459200",
    "end": "1466400"
  },
  {
    "text": "which has is running as a docker container and has this service name environment",
    "start": "1466400",
    "end": "1471760"
  },
  {
    "text": "variable sets to the value of orders and has a pod name of orders service and has a kubernetes namespace so production",
    "start": "1471760",
    "end": "1479120"
  },
  {
    "text": "is entitled to this identity of service orders and then selectors",
    "start": "1479120",
    "end": "1485200"
  },
  {
    "text": "are powerful and there are several that you can choose from so other examples here would be like pod attributes um in",
    "start": "1485200",
    "end": "1490960"
  },
  {
    "text": "kubernetes and labels of docker containers",
    "start": "1490960",
    "end": "1495679"
  },
  {
    "text": "okay um so let's talk a little bit about",
    "start": "1497440",
    "end": "1502640"
  },
  {
    "start": "1500000",
    "end": "1500000"
  },
  {
    "text": "workload attestation so this is the process of identifying a workload and issuing an identity",
    "start": "1502640",
    "end": "1509279"
  },
  {
    "text": "so at the top here we have a workload which reaches the spire agent over the workload api to request its identity",
    "start": "1509279",
    "end": "1516400"
  },
  {
    "text": "and this is not on authenticated requests uh the workload doesn't provide any sort of like certificate or token or",
    "start": "1516400",
    "end": "1523840"
  },
  {
    "text": "key or anything it just says hey give me an identity and the spire agent uses these different",
    "start": "1523840",
    "end": "1529840"
  },
  {
    "text": "configured workload tester plugins to determine what that workload is so it's",
    "start": "1529840",
    "end": "1535919"
  },
  {
    "text": "going to discover dynamically runtime attributes about the process",
    "start": "1535919",
    "end": "1541679"
  },
  {
    "text": "in order to match those um selectors against selectors in the registrations that it",
    "start": "1541679",
    "end": "1547760"
  },
  {
    "text": "knows about so in this case there are three plugins configured there's a unix plugin",
    "start": "1547760",
    "end": "1553520"
  },
  {
    "text": "and a docker plug-in and a kubernetes plugin and each of these plugins is going to reach out to a trusted authority",
    "start": "1553520",
    "end": "1559840"
  },
  {
    "text": "in our infrastructure so in the case of a unix it's going to reach out to the linux kernel in the case of docker it's",
    "start": "1559840",
    "end": "1565440"
  },
  {
    "text": "going to reach out to the docker demon on the host and in the case of kubernetes is going to reach out to the local kubelet agent",
    "start": "1565440",
    "end": "1571039"
  },
  {
    "text": "running on the host okay so the workload contacts the workload api",
    "start": "1571039",
    "end": "1576880"
  },
  {
    "text": "asks for its svid the agent asks for all the selectors about that process from these different plugins",
    "start": "1576880",
    "end": "1583279"
  },
  {
    "text": "and then it gets a set of all of these selectors available about that process",
    "start": "1583279",
    "end": "1588480"
  },
  {
    "text": "so we know that this process is running with this uid of one two three four five with which is a user called bob",
    "start": "1588480",
    "end": "1595840"
  },
  {
    "text": "and then it has the service name environment variable set in docker called orders and it has a pod name in",
    "start": "1595840",
    "end": "1602559"
  },
  {
    "text": "kubernetes called orders hyphen service and it has a kubernetes namespace of production well if you're",
    "start": "1602559",
    "end": "1608880"
  },
  {
    "text": "observant you may have seen that these last three selectors actually match the registration we talked about in the",
    "start": "1608880",
    "end": "1614559"
  },
  {
    "text": "previous slide and because it matches those three selectors",
    "start": "1614559",
    "end": "1619840"
  },
  {
    "text": "we can actually give this workload the identity for that registration of service orders that we talked about",
    "start": "1619840",
    "end": "1627200"
  },
  {
    "text": "so the workload api in this example would return the x509 svid for the example.org server slash orders",
    "start": "1627200",
    "end": "1634960"
  },
  {
    "text": "identity so that's how workload attestation works",
    "start": "1634960",
    "end": "1641120"
  },
  {
    "text": "now what have we seen so far okay this is there's been a lot of concepts we talked about",
    "start": "1641120",
    "end": "1646159"
  },
  {
    "start": "1642000",
    "end": "1642000"
  },
  {
    "text": "and how what does it all mean so we've seen that the orders and the",
    "start": "1646159",
    "end": "1652000"
  },
  {
    "text": "account services are now bootstrapped with cryptographically verifiable identities and in this case it's an",
    "start": "1652000",
    "end": "1657679"
  },
  {
    "text": "x509s vid so this really enables the orders and account services to be",
    "start": "1657679",
    "end": "1664000"
  },
  {
    "text": "able to trust one another because they can verify the chains of trust associated with those s vids",
    "start": "1664000",
    "end": "1670559"
  },
  {
    "text": "using that verification they can use secure communication",
    "start": "1670559",
    "end": "1675600"
  },
  {
    "text": "using mutually authenticated tls to encrypt traffic between the orders",
    "start": "1675600",
    "end": "1680720"
  },
  {
    "text": "and account services and using this svid",
    "start": "1680720",
    "end": "1686559"
  },
  {
    "text": "concept the accounts service can now actually identify in a very precise and secure way what",
    "start": "1686559",
    "end": "1693919"
  },
  {
    "text": "the workload is on the other side of the channel using the spiffy id",
    "start": "1693919",
    "end": "1699440"
  },
  {
    "text": "present in the svid and based on that authentication method it can actually start to write some",
    "start": "1699440",
    "end": "1705760"
  },
  {
    "text": "authorization policies to say only service orders can contact this account",
    "start": "1705760",
    "end": "1712240"
  },
  {
    "text": "service for this particular api",
    "start": "1712240",
    "end": "1716559"
  },
  {
    "text": "and we've seen that these cryptograph keys which are represented as s-vids svids",
    "start": "1717919",
    "end": "1723919"
  },
  {
    "text": "are actually rotated automatically by spire and they're pushed transparently to the services on update so they don't",
    "start": "1723919",
    "end": "1730559"
  },
  {
    "text": "need to manage any logic to refresh their identities on a certain cadence",
    "start": "1730559",
    "end": "1737760"
  },
  {
    "text": "so what's coming next i just want to quickly talk about upcoming things inspire which might be interesting to",
    "start": "1737760",
    "end": "1743440"
  },
  {
    "start": "1738000",
    "end": "1738000"
  },
  {
    "text": "you so a major thing that we're focusing on is trying to improve user experience in",
    "start": "1743440",
    "end": "1748720"
  },
  {
    "text": "kubernetes to be much more turnkey right now it's a little bit complicated there are a lot of configurations um you",
    "start": "1748720",
    "end": "1754640"
  },
  {
    "text": "need to think about so we're trying to make that a little bit easier to get going on um we are also",
    "start": "1754640",
    "end": "1760640"
  },
  {
    "text": "trying to support workloads in environments where that you cannot run a spire agent and environments",
    "start": "1760640",
    "end": "1767360"
  },
  {
    "text": "that you might think of in this category are like serverless computing like aws lambda for example",
    "start": "1767360",
    "end": "1773440"
  },
  {
    "text": "where we don't really control the infrastructure that the workload runs on but the workload may still need an",
    "start": "1773440",
    "end": "1779440"
  },
  {
    "text": "identity to talk to services so we're trying to export those use cases",
    "start": "1779440",
    "end": "1785120"
  },
  {
    "text": "we're also working on providing a privileged api which delegates the responsibility of",
    "start": "1785120",
    "end": "1790880"
  },
  {
    "text": "issuing s-vids to workloads to a trusted actor so an example might be like a",
    "start": "1790880",
    "end": "1796000"
  },
  {
    "text": "proxy on a host where services all route their traffic through a local proxy and then the proxy",
    "start": "1796000",
    "end": "1801679"
  },
  {
    "text": "determines what is the identity of the caller and how do i propagate that identity in like a tls connection for",
    "start": "1801679",
    "end": "1807440"
  },
  {
    "text": "example then we are also working on improving",
    "start": "1807440",
    "end": "1812880"
  },
  {
    "text": "the support for federation and federation is really a concept in spiffy where",
    "start": "1812880",
    "end": "1818880"
  },
  {
    "text": "based on different trust domains we may have workloads running in a workload running in one trust domain",
    "start": "1818880",
    "end": "1824720"
  },
  {
    "text": "and a workload running in another trust domain and they need to be able to talk to each other and trust each other and that concept is",
    "start": "1824720",
    "end": "1830799"
  },
  {
    "text": "called federation inspithy so we're working on providing configurable",
    "start": "1830799",
    "end": "1836720"
  },
  {
    "text": "api to designate what are the federation relationships",
    "start": "1836720",
    "end": "1841919"
  },
  {
    "text": "for different workloads in the system we're also working on improving our",
    "start": "1841919",
    "end": "1848240"
  },
  {
    "text": "attestation of supply chain provenance using binary signing verification",
    "start": "1848240",
    "end": "1854960"
  },
  {
    "text": "we are also trying to enable secret less authentication to gcp using",
    "start": "1854960",
    "end": "1860559"
  },
  {
    "text": "openid connect federation then in the long term we are",
    "start": "1860559",
    "end": "1865600"
  },
  {
    "text": "working on how do we improve the key revocation and forced rotation within spire",
    "start": "1865600",
    "end": "1872559"
  },
  {
    "text": "and then similarly for azure we're also trying to enable secret list authentication using oidc federation",
    "start": "1872559",
    "end": "1879120"
  },
  {
    "text": "and we're working on some production readiness kind of work like improving the health check subsystem to be more",
    "start": "1879120",
    "end": "1884799"
  },
  {
    "text": "robust and improving error messages so that they're more actionable to users",
    "start": "1884799",
    "end": "1890000"
  },
  {
    "start": "1891000",
    "end": "1891000"
  },
  {
    "text": "so if you're interested in about spiffy inspire i'd encourage you to attend uh the talk that's coming",
    "start": "1891200",
    "end": "1897039"
  },
  {
    "text": "up next which is called bridging the great divide spiffy spire for cross-cluster authentication which is being given by a spiffy inspire",
    "start": "1897039",
    "end": "1903360"
  },
  {
    "text": "maintainer andrew hurting and it's going to talk a lot more about federation and how you can leverage",
    "start": "1903360",
    "end": "1909200"
  },
  {
    "text": "those concepts um if you're are interested in the project model and more i'd encourage you",
    "start": "1909200",
    "end": "1914799"
  },
  {
    "text": "to go to spiffy.io which is the website for spiffy inspire we also have github",
    "start": "1914799",
    "end": "1920000"
  },
  {
    "text": "repos for each uh spiffy inspire uh and then we also have a slack workspace where we engage with users on a regular",
    "start": "1920000",
    "end": "1926640"
  },
  {
    "text": "basis so that's all i have um so thank you for attending",
    "start": "1926640",
    "end": "1933640"
  }
]