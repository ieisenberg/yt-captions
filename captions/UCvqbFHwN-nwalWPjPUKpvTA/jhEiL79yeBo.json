[
  {
    "text": "tonight [Music]",
    "start": "2100",
    "end": "25660"
  },
  {
    "text": "hey everyone welcome to a conveyor Meetup we're super excited to share this",
    "start": "28519",
    "end": "33719"
  },
  {
    "text": "new tool with you guys just some housekeeping rules if you have questions please put it in the chat we're gonna",
    "start": "33719",
    "end": "41100"
  },
  {
    "text": "get to it at the end of the session that way the presenters have enough time to get through all the material and if we",
    "start": "41100",
    "end": "48960"
  },
  {
    "text": "and if you have a question that we don't get to feel free to go to the conveyor swag Channel and just ask there I'll put",
    "start": "48960",
    "end": "54539"
  },
  {
    "text": "a link to that slack channel in the chat as well so that way you have access to it and with that I'm going to pass it on",
    "start": "54539",
    "end": "61620"
  },
  {
    "text": "to John thanks Jonathan and thanks everyone for listening today so I'm John refrando I'm",
    "start": "61620",
    "end": "68760"
  },
  {
    "text": "a senior technical staff member at IBM research I'm joined by my colleague rural Krishna who is a research staff",
    "start": "68760",
    "end": "74159"
  },
  {
    "text": "member and we're going to talk about a project that we've been working on in the conveyor Community called Data",
    "start": "74159",
    "end": "80040"
  },
  {
    "text": "gravity insights so what we're going to discuss I'm just going to talk briefly about kind of the problem we're solving uh we're going to",
    "start": "80040",
    "end": "86640"
  },
  {
    "text": "look into just a broad overview of DGI of data gravity insights and then Rahul",
    "start": "86640",
    "end": "92220"
  },
  {
    "text": "is going to take you through a deep dive um hopefully not too deep but he's going to go deep uh we're gonna you know open",
    "start": "92220",
    "end": "99659"
  },
  {
    "text": "the hood and show you what's inside because we want you guys to help us to build this right this is not all built",
    "start": "99659",
    "end": "105180"
  },
  {
    "text": "uh he's gonna do a demonstration of DJI and then we'll come back and talk about some future work that the community can",
    "start": "105180",
    "end": "111180"
  },
  {
    "text": "help us with so application modernization right making little ones out of big ones or",
    "start": "111180",
    "end": "117180"
  },
  {
    "text": "you know taking this monolith which largely is organized by Technologies",
    "start": "117180",
    "end": "123320"
  },
  {
    "text": "front-end application back-end you know not around business domains right so you",
    "start": "123320",
    "end": "129420"
  },
  {
    "text": "want to break them up into microservices that are kind of business driven so why",
    "start": "129420",
    "end": "134640"
  },
  {
    "text": "would I want to do this I'm going to take this monolith it's I got this one thing that works great I'm going to break into a lot of little things make a",
    "start": "134640",
    "end": "140940"
  },
  {
    "text": "headache for myself well what you want to do what your primary goal should be I got 50 programmers working on this",
    "start": "140940",
    "end": "147780"
  },
  {
    "text": "monolith and I want to have 10 teams of five programmers working much faster around business domains so how can I",
    "start": "147780",
    "end": "155879"
  },
  {
    "text": "figure out what are the business domains in the monolith that I can wrap a small team around and they could be autonomous",
    "start": "155879",
    "end": "162540"
  },
  {
    "text": "and they could move quickly right that's really the thing is moving faster Right Moving in Market faster",
    "start": "162540",
    "end": "168360"
  },
  {
    "text": "so if you look at the state of the art today uh in any of the tools that will",
    "start": "168360",
    "end": "173519"
  },
  {
    "text": "help you turn your monolith into microservices and they look they scan the code they scan the code they find",
    "start": "173519",
    "end": "180599"
  },
  {
    "text": "all these connections you get some graph like this you got a whole bunch of little things they're all connected lots of lines trying to figure out you know",
    "start": "180599",
    "end": "187560"
  },
  {
    "text": "what is the best way to slice between them usually they're looking at you know how often do they call each other you",
    "start": "187560",
    "end": "193500"
  },
  {
    "text": "know things like that to understand where is the place to Partition but you know just the dependency between",
    "start": "193500",
    "end": "200340"
  },
  {
    "text": "the Clusters isn't enough we need to understand where are the big gas giants",
    "start": "200340",
    "end": "205379"
  },
  {
    "text": "that are lurking right in your application what are those objects that everything gravitates to because those",
    "start": "205379",
    "end": "211860"
  },
  {
    "text": "are probably the center of a microservice right so we want to understand these heavy objects we call",
    "start": "211860",
    "end": "217560"
  },
  {
    "text": "the data gravity insights uh we want to understand how do we find these heavy objects that maybe the the center point",
    "start": "217560",
    "end": "224340"
  },
  {
    "text": "of of a microservice and then all these other things are kind of orbiting around those things so we take a little different approach",
    "start": "224340",
    "end": "232019"
  },
  {
    "text": "like what's the most important thing to the customer the data that they persist it was important enough that they",
    "start": "232019",
    "end": "238019"
  },
  {
    "text": "persisted in a database hello the data is kind of important you can't just look at the code",
    "start": "238019",
    "end": "243780"
  },
  {
    "text": "so we took the approach of Yeah the code code graph application call graph important stuff what about the schema",
    "start": "243780",
    "end": "250620"
  },
  {
    "text": "what about the relationships between the schema and then you take the Third Leg of that and say what about the",
    "start": "250620",
    "end": "257400"
  },
  {
    "text": "transactions between the code and the data all of that has to be taken into",
    "start": "257400",
    "end": "262620"
  },
  {
    "text": "account so data gravity insights is looking at a holistic approach right",
    "start": "262620",
    "end": "268740"
  },
  {
    "text": "look at the code look at the data how is the code accessing the data when is it accessing it right so you want to",
    "start": "268740",
    "end": "275639"
  },
  {
    "text": "understand and get a holistic view of your application and how it's put together",
    "start": "275639",
    "end": "281820"
  },
  {
    "text": "so if I look at the call graph right this is uh this is from the famous day trader right but I've got you know",
    "start": "281820",
    "end": "288000"
  },
  {
    "text": "account data beans and quote data beans and Market summary beans and stock beans all sorts of beans right lots of beans",
    "start": "288000",
    "end": "293820"
  },
  {
    "text": "in here um so and there's a call graph between them then I look at the schema nobody's",
    "start": "293820",
    "end": "300060"
  },
  {
    "text": "looking at the schema I look at this schema and I've got an account table and a quilt Table and there are some foreign",
    "start": "300060",
    "end": "305460"
  },
  {
    "text": "Keys between maybe the holding table and the quote table so now I've got a different view of the application where",
    "start": "305460",
    "end": "312840"
  },
  {
    "text": "I can see foreign key relationships I can see what tables have other foreign occasions into other tables that's a",
    "start": "312840",
    "end": "319080"
  },
  {
    "text": "whole bunch of relationships in the domain right if you want to understand the business domain look at the schema",
    "start": "319080",
    "end": "325020"
  },
  {
    "text": "because usually dba's do a pretty good job of ignoring technology which is you know the front-end back-end stuff and",
    "start": "325020",
    "end": "331139"
  },
  {
    "text": "they're just dealing in the business domain so you look at the schema then you overlay these views on top of each",
    "start": "331139",
    "end": "338639"
  },
  {
    "text": "other and now you can see hey I've got some calls being made at the code level",
    "start": "338639",
    "end": "343740"
  },
  {
    "text": "that aren't represented in the schema I've got some things done in the schema that maybe aren't represented in the",
    "start": "343740",
    "end": "348840"
  },
  {
    "text": "code uh and so I can see those paths but I also want to find those gas giants I",
    "start": "348840",
    "end": "355080"
  },
  {
    "text": "want to find those heavy objects and then say these look like the center of a microservice and as I look at this",
    "start": "355080",
    "end": "361740"
  },
  {
    "text": "partitioning I can see here are my apis all those red lines those these are the guys that are",
    "start": "361740",
    "end": "369120"
  },
  {
    "text": "going to call each other across partitions and so this is how I have to build my API",
    "start": "369120",
    "end": "375780"
  },
  {
    "text": "the problem is that's just a 2d view of the world like an x-ray right x-ray is",
    "start": "375780",
    "end": "381600"
  },
  {
    "text": "fine I can see broken bones and stuff but I I don't know what's going on behind all that white stuff",
    "start": "381600",
    "end": "387360"
  },
  {
    "text": "and that's that myopic view I think of this that 2D flat plane what we need is an MRI",
    "start": "387360",
    "end": "393240"
  },
  {
    "text": "I need to be able to take the code and turn it around and look under it and see you know pull these things apart see",
    "start": "393240",
    "end": "399060"
  },
  {
    "text": "who's really talking to who right different filters different ways of looking at the code extremely extremely",
    "start": "399060",
    "end": "405539"
  },
  {
    "text": "important to understanding all the different relationships in the code so what I want to do is kind of tilt that",
    "start": "405539",
    "end": "411060"
  },
  {
    "text": "view and look under it and be able to see how those relationships are coming",
    "start": "411060",
    "end": "416880"
  },
  {
    "text": "together uh and we don't have this view yet don't get too excited we want you to help us build this view but we think we",
    "start": "416880",
    "end": "422940"
  },
  {
    "text": "have all the underpinnings right we've got all the stuff inside that we need to",
    "start": "422940",
    "end": "428100"
  },
  {
    "text": "go build views like this and we started to build them using some tools like Bloom and Raul is going to show you that",
    "start": "428100",
    "end": "434520"
  },
  {
    "text": "so what we're trying to do is get this holistic view of the application the",
    "start": "434520",
    "end": "440039"
  },
  {
    "text": "data the source code the transactions between them to understand who's talking",
    "start": "440039",
    "end": "446819"
  },
  {
    "text": "who you know when do I have to to uh to partition when do I have to partition these things and how should I partition",
    "start": "446819",
    "end": "453000"
  },
  {
    "text": "so just to go through some of the possibilities and then we'll go into the technical stuff",
    "start": "453000",
    "end": "458400"
  },
  {
    "text": "so clearly queries to run and understand the dependencies those are things that we've already built",
    "start": "458400",
    "end": "464340"
  },
  {
    "text": "um triangling the database the code dynamic calls and all that very important right now we're just taking a",
    "start": "464340",
    "end": "470099"
  },
  {
    "text": "static view of the world it'd be nice to add a dynamic view of a call you know when where app watch the application run",
    "start": "470099",
    "end": "475800"
  },
  {
    "text": "because it's important to understand if this code calls this other code well does it call it once it's startup does",
    "start": "475800",
    "end": "482699"
  },
  {
    "text": "it call it a thousand times a second that's a really different relationship so it's important to understand Dynamic",
    "start": "482699",
    "end": "487860"
  },
  {
    "text": "and then find the data centrality and the code centrality right so these are the important things in the code these",
    "start": "487860",
    "end": "494460"
  },
  {
    "text": "are the important objects in the data how do they relate to each other so can I find classes that are accessing the",
    "start": "494460",
    "end": "500819"
  },
  {
    "text": "data outside of that sensuality now I got distributed transactions and what do",
    "start": "500819",
    "end": "506280"
  },
  {
    "text": "I do about those do I refactor my data do I refactor my code or do I create a distributed transaction or do something",
    "start": "506280",
    "end": "512700"
  },
  {
    "text": "like a saga pattern right so very important to understand then can I find these anchor classes",
    "start": "512700",
    "end": "519719"
  },
  {
    "text": "these entry points you know if you if you view this graph with all these bubbles around it you say hey this is",
    "start": "519719",
    "end": "525120"
  },
  {
    "text": "really important object look everybody's pointing to it then you find out it's a servlet it's the entry point to the",
    "start": "525120",
    "end": "530459"
  },
  {
    "text": "system or of course everybody everybody has to come through it but it's not an important business object it's just a router it's just a traffic cop",
    "start": "530459",
    "end": "536820"
  },
  {
    "text": "but then can we annotate the class to say okay this one is an entry point right so we do some annotation on the",
    "start": "536820",
    "end": "542339"
  },
  {
    "text": "classes which we don't have yet which we hope to add right hopefully with the community um and then what about the framework",
    "start": "542339",
    "end": "548580"
  },
  {
    "text": "being used so if I know a little bit about the framework I'm using spring Boot and what am I using I'm using some model view controller now I can say okay",
    "start": "548580",
    "end": "555360"
  },
  {
    "text": "can I label the classes these are model classes these are view classes these are controller classes that's got to be",
    "start": "555360",
    "end": "562140"
  },
  {
    "text": "important information when you're trying to figure out how to refactor this application and then identify things",
    "start": "562140",
    "end": "567899"
  },
  {
    "text": "like utility classes again I've got this one class everybody points to it it's like yeah it's the log class you know no",
    "start": "567899",
    "end": "575279"
  },
  {
    "text": "no it's not the most important thing in the system it's the least important thing this is a utility class you just copy it into all the microservices but",
    "start": "575279",
    "end": "581459"
  },
  {
    "text": "it's important to understand that we've done some work to identify utility classes and say okay take all those",
    "start": "581459",
    "end": "587100"
  },
  {
    "text": "little UCLA classes get them out of my view they're just clouding up the view I want to see the business objects so",
    "start": "587100",
    "end": "594060"
  },
  {
    "text": "what can you come up with I mean this is what we really want to do here today with a Meetup is say we want to show you",
    "start": "594060",
    "end": "599580"
  },
  {
    "text": "what we've done and say come help us build more of this we've got some foundational work done",
    "start": "599580",
    "end": "606060"
  },
  {
    "text": "um but there's lots of possibilities and we're hoping that you guys can help us create those possibilities",
    "start": "606060",
    "end": "612420"
  },
  {
    "text": "so with that I'm going to turn it over to Raul he's going to do a technical Deep dive he's going to give you the theory behind",
    "start": "612420",
    "end": "619320"
  },
  {
    "text": "it and he's going to do some Hands-On demonstrations of what we have today in",
    "start": "619320",
    "end": "624660"
  },
  {
    "text": "our conveyor repo for DJI so Raul I'm gonna take it over",
    "start": "624660",
    "end": "631100"
  },
  {
    "text": "all right thanks thanks Jr um so we'll do a quick deep dive uh I've",
    "start": "631860",
    "end": "639000"
  },
  {
    "text": "broken this down into two parts we we look at data gravity insights a little closer into what it's comprised of how",
    "start": "639000",
    "end": "646200"
  },
  {
    "text": "we build the graph uh and how we can visualize some of the use cases that Jr",
    "start": "646200",
    "end": "651480"
  },
  {
    "text": "mentioned and then we look at cargo an approach that we built on top of DJI to",
    "start": "651480",
    "end": "658440"
  },
  {
    "text": "partition monolithic applications into potential microservice recommendations",
    "start": "658440",
    "end": "665339"
  },
  {
    "text": "so DJI comprises this is the overview of DJI right so we start with the source code and we package it uh into a one of",
    "start": "665339",
    "end": "674339"
  },
  {
    "text": "many formats and then we extract three uh key relationships from the",
    "start": "674339",
    "end": "679980"
  },
  {
    "text": "application uh these are code to graph relationships schema and transaction",
    "start": "679980",
    "end": "685560"
  },
  {
    "text": "relationships once we have these uh we persist them in a graph database and",
    "start": "685560",
    "end": "690779"
  },
  {
    "text": "this permits us to use uh query languages like Cipher to look for interesting insights that we can get",
    "start": "690779",
    "end": "698579"
  },
  {
    "text": "so photograph understands the static dependencies between the various methods the",
    "start": "698579",
    "end": "705540"
  },
  {
    "text": "instructions the classes that we have in the application these dependencies we've categorized",
    "start": "705540",
    "end": "711779"
  },
  {
    "text": "into call return dependencies are data flow dependencies and Heap allocation and their corresponding dependencies",
    "start": "711779",
    "end": "719040"
  },
  {
    "text": "in addition to that we have schema to graph which looks at specifically the relationship between the database tables",
    "start": "719040",
    "end": "726240"
  },
  {
    "text": "and the columns in the database and these are a few examples could include",
    "start": "726240",
    "end": "732060"
  },
  {
    "text": "foreign key relationships and and others and finally we have transaction to graph",
    "start": "732060",
    "end": "737820"
  },
  {
    "text": "which looks at transactional crowd operations between the source code and",
    "start": "737820",
    "end": "743339"
  },
  {
    "text": "the database tables these could be via transactional reads and writes and so on and we we wanted to populate the graph",
    "start": "743339",
    "end": "749640"
  },
  {
    "text": "with this information to complete the view so what does this give us right so this",
    "start": "749640",
    "end": "755820"
  },
  {
    "text": "enables us to analyze the source code dependencies so we know which classes talk to which other classes where the",
    "start": "755820",
    "end": "761339"
  },
  {
    "text": "utility classes are and which class which which classes have a lot of",
    "start": "761339",
    "end": "766440"
  },
  {
    "text": "traffic and so on in addition it gives us code to database dependencies and",
    "start": "766440",
    "end": "771540"
  },
  {
    "text": "this tells us how the source code interacts with external resources or",
    "start": "771540",
    "end": "777420"
  },
  {
    "text": "persistent databases in addition to this we have database to database dependencies which allows us to",
    "start": "777420",
    "end": "784260"
  },
  {
    "text": "look at how the various tables in different databases communicate with one another and what relationship they have",
    "start": "784260",
    "end": "791579"
  },
  {
    "text": "and finally we would like to think of this as a continuous modernization approach where we look at runtime",
    "start": "791579",
    "end": "799200"
  },
  {
    "text": "statistics and operational traces and Telemetry from tools like Jager and instana",
    "start": "799200",
    "end": "805200"
  },
  {
    "text": "so the question here is what can we do with this data so here are some examples",
    "start": "805200",
    "end": "810360"
  },
  {
    "text": "that we can we can build these include transaction Scopes looking at various",
    "start": "810360",
    "end": "817380"
  },
  {
    "text": "data synchronization issues and inspecting call and control dependencies in addition this allows us to look for",
    "start": "817380",
    "end": "825600"
  },
  {
    "text": "potential restful service transformation we can identify opportunities for code",
    "start": "825600",
    "end": "831420"
  },
  {
    "text": "and data refactor and maintenance identified distributed transactions and",
    "start": "831420",
    "end": "837180"
  },
  {
    "text": "come up with remediation strategies to handle these distributed transactions as well as other synchronization issues",
    "start": "837180",
    "end": "843600"
  },
  {
    "text": "across services so how does DJI work right so I want to do a quick demo of how we could interact",
    "start": "843600",
    "end": "849839"
  },
  {
    "text": "or how we would interact with DJI and how we can inspect the graph that we've built",
    "start": "849839",
    "end": "856220"
  },
  {
    "text": "we have our getting started guide on the conveyor repository page that gives you",
    "start": "856860",
    "end": "861959"
  },
  {
    "text": "detailed instructions on how to start using DJI for your application it's",
    "start": "861959",
    "end": "867000"
  },
  {
    "text": "available as a pip package so all you'll need to do is install DJI using pip and",
    "start": "867000",
    "end": "873480"
  },
  {
    "text": "then the rest of the instructions are here they're pretty detailed so I'll just go",
    "start": "873480",
    "end": "878820"
  },
  {
    "text": "over the commands themselves and what they do so once you install the PIP package the",
    "start": "878820",
    "end": "886199"
  },
  {
    "text": "command line uh tool is DJI and I start with DJI help",
    "start": "886199",
    "end": "891660"
  },
  {
    "text": "and this should give us an overview of what our tool contains so there are a",
    "start": "891660",
    "end": "896940"
  },
  {
    "text": "few options that allows us to interact with the graph database as well as some",
    "start": "896940",
    "end": "902579"
  },
  {
    "text": "command line options like verbosity and and other information but the key the",
    "start": "902579",
    "end": "909420"
  },
  {
    "text": "key component of DJI are a set of commands that helps us build this graph here are a few that is c2g which stands",
    "start": "909420",
    "end": "917339"
  },
  {
    "text": "for Photograph and this allows us to add the call return dependencies Heap dependencies and other things to the",
    "start": "917339",
    "end": "923399"
  },
  {
    "text": "graph we have a skipper partition for now we have schema to graph or s2g which passes",
    "start": "923399",
    "end": "930180"
  },
  {
    "text": "the SQL schema potentially through a ddl file into the graph and transaction to",
    "start": "930180",
    "end": "935519"
  },
  {
    "text": "graph for TX to G which adds edges that denote the cloud operations in the graph",
    "start": "935519",
    "end": "940740"
  },
  {
    "text": "and finally we have partitions uh and I'll do another deep dive in the next part of this talk about what this is but",
    "start": "940740",
    "end": "947880"
  },
  {
    "text": "on a very high level uh partition is a command that runs this algorithm that I'll discussed called cargo which",
    "start": "947880",
    "end": "954300"
  },
  {
    "text": "enables us to identify potential partitioning strategies in the DJI graph",
    "start": "954300",
    "end": "960740"
  },
  {
    "text": "Spruce DJI once we've followed the getting started page and we have an application we can call one of the sub",
    "start": "960740",
    "end": "968339"
  },
  {
    "text": "commands uh I'm just gonna show one example",
    "start": "968339",
    "end": "973760"
  },
  {
    "text": "and this is code to graph and the help here should provide more in details on what it does but essentially photograph",
    "start": "976199",
    "end": "982860"
  },
  {
    "text": "takes a directory that contains a lot of data that we've mined from the",
    "start": "982860",
    "end": "988019"
  },
  {
    "text": "application you can provide an abstraction level depending on what structure we want to look at this could",
    "start": "988019",
    "end": "993600"
  },
  {
    "text": "be class method or full which includes class method and instruction and once we",
    "start": "993600",
    "end": "999360"
  },
  {
    "text": "do that let me this will take a while but it's going to",
    "start": "999360",
    "end": "1005839"
  },
  {
    "text": "go through the data the program and start populating the neo4j graph with a",
    "start": "1005839",
    "end": "1011899"
  },
  {
    "text": "lot of dependencies so right now it's doing Heap carry dependencies and this is going to take a while because there",
    "start": "1011899",
    "end": "1017060"
  },
  {
    "text": "are thousands of relationships to populate so what I've done for the sake of this demo is I have a running example",
    "start": "1017060",
    "end": "1023360"
  },
  {
    "text": "after running code to craft and DJI and I'll show you how we can interact with",
    "start": "1023360",
    "end": "1029120"
  },
  {
    "text": "it so this is neo4j desktop there is a graph databases that's running",
    "start": "1029120",
    "end": "1034880"
  },
  {
    "text": "underneath which has all the relationships that we're populating and there are a couple of ways to interact",
    "start": "1034880",
    "end": "1040220"
  },
  {
    "text": "with it and today I'll talk you I'll walk you through Bloom there is also the",
    "start": "1040220",
    "end": "1045558"
  },
  {
    "text": "browser which we can use to interact and run some queries so Bloom is a graphical user interface",
    "start": "1045559",
    "end": "1053419"
  },
  {
    "text": "that comes with the neo4j desktop and this is what it looks like this is a very high level overview",
    "start": "1053419",
    "end": "1059200"
  },
  {
    "text": "we can think of the the data that we have in DJI in terms of perspectives",
    "start": "1059200",
    "end": "1064940"
  },
  {
    "text": "there is a class perspective which looks at all the code dependencies and there is a database perspective which looks at",
    "start": "1064940",
    "end": "1071780"
  },
  {
    "text": "the class dependencies as well as the SQL table and the dependencies between the databases so we can look into the uh",
    "start": "1071780",
    "end": "1079520"
  },
  {
    "text": "into this one so we have two types of nodes the class node and the table node",
    "start": "1079520",
    "end": "1084799"
  },
  {
    "text": "and the number of relationships between all these nodes like call return dependencies and foreign key relationships and so on",
    "start": "1084799",
    "end": "1091700"
  },
  {
    "text": "in addition to this we have a set of queries that we've created and these are",
    "start": "1091700",
    "end": "1097280"
  },
  {
    "text": "just starter queries as the use cases evolve we can write more complex queries",
    "start": "1097280",
    "end": "1103039"
  },
  {
    "text": "as an example uh here is a query that we can use to identify data centrality now",
    "start": "1103039",
    "end": "1110539"
  },
  {
    "text": "and the search bar allows you to run the queries and we can look for data centrality and this should populate the",
    "start": "1110539",
    "end": "1119000"
  },
  {
    "text": "graph that we see here with a number of relationships between the SQL table",
    "start": "1119000",
    "end": "1124039"
  },
  {
    "text": "nodes that are shown in blue and the class nodes which are in Gray",
    "start": "1124039",
    "end": "1130000"
  },
  {
    "text": "Bloom also allows us to um add conditional rules to visualize these",
    "start": "1130000",
    "end": "1137240"
  },
  {
    "text": "so if you look at any of these databases for example code ejp there should be a",
    "start": "1137240",
    "end": "1143059"
  },
  {
    "text": "centrality score that indicates how Central that entity is to the program so",
    "start": "1143059",
    "end": "1148760"
  },
  {
    "text": "higher value indicates it's more important and the lower values indicate that it's slightly less important and",
    "start": "1148760",
    "end": "1154580"
  },
  {
    "text": "there are rules that we can use to differentiate between the most important",
    "start": "1154580",
    "end": "1160280"
  },
  {
    "text": "and the least important class and in this view we have an example where there",
    "start": "1160280",
    "end": "1166100"
  },
  {
    "text": "is the the database the larger ones are more Central uh the gas giants analogy if you will and the smaller nodes are",
    "start": "1166100",
    "end": "1173600"
  },
  {
    "text": "less Central to to the application and the edges between each of these indicate the transaction relationships",
    "start": "1173600",
    "end": "1180620"
  },
  {
    "text": "in this view Bloom allows us to dismiss other nodes and inspect only uh a few nodes if we",
    "start": "1180620",
    "end": "1187520"
  },
  {
    "text": "choose to do so and each database has a set of",
    "start": "1187520",
    "end": "1193880"
  },
  {
    "text": "properties associated with it and so does every class so for example there is a centrality measure this tells us the",
    "start": "1193880",
    "end": "1201559"
  },
  {
    "text": "the signature of the class as well as if the class is a bean if it's an entry point if it's a servlet and other things",
    "start": "1201559",
    "end": "1209900"
  },
  {
    "text": "and each relationship uh indicates the the nature of the transaction so this is",
    "start": "1209900",
    "end": "1215840"
  },
  {
    "text": "a transactional read so the the class reads from The Code ejb table it tells",
    "start": "1215840",
    "end": "1221720"
  },
  {
    "text": "us the method that initiates this transaction read as well as the uh",
    "start": "1221720",
    "end": "1227000"
  },
  {
    "text": "action that initiated this so this is just a quick overview of uh",
    "start": "1227000",
    "end": "1233900"
  },
  {
    "text": "of some of the options of DJI in addition to looking at these we can also",
    "start": "1233900",
    "end": "1240440"
  },
  {
    "text": "um inspect individual classes and",
    "start": "1240440",
    "end": "1246799"
  },
  {
    "text": "to do that we um I can look I can take one example over here",
    "start": "1246799",
    "end": "1253100"
  },
  {
    "text": "this shows how to call return dependencies exist between classes",
    "start": "1253100",
    "end": "1260740"
  },
  {
    "text": "so while this runs let me go back to the slides",
    "start": "1263600",
    "end": "1268640"
  },
  {
    "text": "and discuss how we can use DJI for for some use cases",
    "start": "1268640",
    "end": "1274400"
  },
  {
    "text": "so to use DJI in addition to looking at data centrality and other factors we can",
    "start": "1274400",
    "end": "1281059"
  },
  {
    "text": "also use it to identify potential refactoring strategies one such example",
    "start": "1281059",
    "end": "1286940"
  },
  {
    "text": "is to identify strategies to decompose a monolithic application into a set of",
    "start": "1286940",
    "end": "1293299"
  },
  {
    "text": "microservices and to do that we use DJI and built an algorithm called cargo",
    "start": "1293299",
    "end": "1299539"
  },
  {
    "text": "which was presented in a conference quite recently and cargo attempts to",
    "start": "1299539",
    "end": "1306200"
  },
  {
    "text": "take the DJI graph and identify a micro service boundaries like we see here and",
    "start": "1306200",
    "end": "1312200"
  },
  {
    "text": "this is the overview of the approach I'll go into uh details on what each of these steps are but in essence we start",
    "start": "1312200",
    "end": "1319159"
  },
  {
    "text": "with the DJI graph which is the first step and next we identify snapshots and",
    "start": "1319159",
    "end": "1326000"
  },
  {
    "text": "I'll talk about what these are and we apply the algorithm called context sensitive label propagation which comes",
    "start": "1326000",
    "end": "1332120"
  },
  {
    "text": "along with DCI to identify these microservice boundaries",
    "start": "1332120",
    "end": "1337600"
  },
  {
    "text": "so the first step is to build a program dependency graph and this is the graph that we have in DJI and this is just a",
    "start": "1338240",
    "end": "1344659"
  },
  {
    "text": "technical terminology for that we build what is known as a context sensitive program dependency graph so if",
    "start": "1344659",
    "end": "1352100"
  },
  {
    "text": "you look at DJI and every node it has a context associated with it now what a",
    "start": "1352100",
    "end": "1357860"
  },
  {
    "text": "context is is it emulates Dynamic interactions in the program because we",
    "start": "1357860",
    "end": "1363020"
  },
  {
    "text": "do a static analysis we really don't have runtime information and context",
    "start": "1363020",
    "end": "1368059"
  },
  {
    "text": "sensitivity is a way to impart that runtime information into the program and without context sensitivity we might",
    "start": "1368059",
    "end": "1375799"
  },
  {
    "text": "miss some key interactions that might only appear at runtime uh and not at a",
    "start": "1375799",
    "end": "1380900"
  },
  {
    "text": "static time static compile time to give you a quick example of what this means we have a quick example here with",
    "start": "1380900",
    "end": "1388460"
  },
  {
    "text": "uh it's it's more of a pseudo code with a few classes and interactions we have",
    "start": "1388460",
    "end": "1393740"
  },
  {
    "text": "two objects of type A as shown here and both of these objects called a DOT Foo",
    "start": "1393740",
    "end": "1399919"
  },
  {
    "text": "and B dot bar in the other classes so what I'm going to do is I'm going to run through this program and on the left",
    "start": "1399919",
    "end": "1406940"
  },
  {
    "text": "you'll see a context insensitive graph that's being built and on the right we'll build a context sensitive graph",
    "start": "1406940",
    "end": "1413419"
  },
  {
    "text": "and by the end of this quick run through we'll see the difference between context",
    "start": "1413419",
    "end": "1418520"
  },
  {
    "text": "insensitive analysis and a context sensitive analysis so the first step is we allocate an",
    "start": "1418520",
    "end": "1425059"
  },
  {
    "text": "object A1 and it calls a DOT true now in a context insensitive uh graph there is",
    "start": "1425059",
    "end": "1432440"
  },
  {
    "text": "a call graph Edge between Main and a DOT Foo but on the right we in a context sensitive analysis it not only indicates",
    "start": "1432440",
    "end": "1439820"
  },
  {
    "text": "that there is a call Edge but it also indicates which receiver object is",
    "start": "1439820",
    "end": "1444860"
  },
  {
    "text": "instantiating that College as we walk through the program we'll see that erot Foods initiate is called twice",
    "start": "1444860",
    "end": "1452179"
  },
  {
    "text": "from two receiver objects A1 and A2 in a context in sensor analysis this",
    "start": "1452179",
    "end": "1457760"
  },
  {
    "text": "relationship is missed and as we walk through the program this becomes more of a problem in context insensitive",
    "start": "1457760",
    "end": "1463880"
  },
  {
    "text": "analysis where we miss many many more relationships than there actually are",
    "start": "1463880",
    "end": "1469340"
  },
  {
    "text": "but on the right we'll see that context sensitive analysis includes all the relationships between uh our two methods",
    "start": "1469340",
    "end": "1477200"
  },
  {
    "text": "and it also highlights which receiver object instantiated the call",
    "start": "1477200",
    "end": "1483260"
  },
  {
    "text": "yeah by isolating these context snapshots we can look closely into different Dynamic",
    "start": "1483260",
    "end": "1489559"
  },
  {
    "text": "states of the program here is the the graph again for example it's important",
    "start": "1489559",
    "end": "1495260"
  },
  {
    "text": "to note that this graph although complete is all possible Dynamic states of the",
    "start": "1495260",
    "end": "1500539"
  },
  {
    "text": "program but any given time in a single threaded application we can only be in",
    "start": "1500539",
    "end": "1506059"
  },
  {
    "text": "one state so a DOT Foo can either be called by A1 or A2 but not by both simultaneously now to to distinguish",
    "start": "1506059",
    "end": "1513799"
  },
  {
    "text": "this fact we extract snapshots a snapshot is a small example of a dynamic",
    "start": "1513799",
    "end": "1519620"
  },
  {
    "text": "state of a program which we can derive from the context and sensitive graph so in this example this is a call Trace",
    "start": "1519620",
    "end": "1526520"
  },
  {
    "text": "when the receiver object is A1 and the second snapshot is the call Trace when",
    "start": "1526520",
    "end": "1532220"
  },
  {
    "text": "the receiver object is A2 and so on so for every receiver object in our core",
    "start": "1532220",
    "end": "1537679"
  },
  {
    "text": "graph we get a small subgraph that indicates the dynamic state of that program",
    "start": "1537679",
    "end": "1543559"
  },
  {
    "text": "along the same lines we can also extract snapshots that have to do with database",
    "start": "1543559",
    "end": "1548960"
  },
  {
    "text": "transactions since the DJI graph has a transaction relationships we can extract",
    "start": "1548960",
    "end": "1555080"
  },
  {
    "text": "subgraphs from the DJI graph which indicate interactions between the database tables and the classes in the",
    "start": "1555080",
    "end": "1561919"
  },
  {
    "text": "program now once we do this we have a set of discrete snapshots which we can then use",
    "start": "1561919",
    "end": "1568100"
  },
  {
    "text": "to apply this algorithm called label propagation which tries to identify communities in in the graph",
    "start": "1568100",
    "end": "1576640"
  },
  {
    "text": "um so label propagation works with a set of initial assignments and then it tries to propagate those assignments through",
    "start": "1577340",
    "end": "1583760"
  },
  {
    "text": "the entire graph to identify partitions in in the graph so these initial",
    "start": "1583760",
    "end": "1589520"
  },
  {
    "text": "assignments uh can be random um in in which case it would be completely unsupervised but they can",
    "start": "1589520",
    "end": "1596840"
  },
  {
    "text": "also have they can also be user preferred assignments if there are any specific preferences on grouping all the",
    "start": "1596840",
    "end": "1603200"
  },
  {
    "text": "all the classes that handle the web interface together as well as database interactions those can be used as",
    "start": "1603200",
    "end": "1609320"
  },
  {
    "text": "initial assignments or we could also use other partitioning algorithms and use them as an initial",
    "start": "1609320",
    "end": "1616159"
  },
  {
    "text": "assignment to run label propagation essentially what label propagation does is once we have an initial label each",
    "start": "1616159",
    "end": "1624140"
  },
  {
    "text": "node gets the label of its neighbors in a greedy Manner and this this process is",
    "start": "1624140",
    "end": "1629779"
  },
  {
    "text": "repeated until convergence that is there are no more changes to the the coloring of the nodes and that indicates the",
    "start": "1629779",
    "end": "1636679"
  },
  {
    "text": "termination of label propagation so in our approach cargo which comes",
    "start": "1636679",
    "end": "1642500"
  },
  {
    "text": "with DJI we apply label propagation to each of the snapshots that I just discussed so as an example we would",
    "start": "1642500",
    "end": "1649460"
  },
  {
    "text": "initialize labels and let's assume that this is our DJI graph we would start by",
    "start": "1649460",
    "end": "1654919"
  },
  {
    "text": "looking at the transaction snapshot and perform label propagation on the transactions and what happens now in",
    "start": "1654919",
    "end": "1661940"
  },
  {
    "text": "this in this view is all the classes that either read from or write to a",
    "start": "1661940",
    "end": "1667700"
  },
  {
    "text": "database table get grouped together with that database table and in essence this enforces a sort of a database per",
    "start": "1667700",
    "end": "1675679"
  },
  {
    "text": "service pattern and once we have the labels for the database interactions we",
    "start": "1675679",
    "end": "1681080"
  },
  {
    "text": "then run context label propagation on each contact snapshot so in this example",
    "start": "1681080",
    "end": "1687440"
  },
  {
    "text": "we would propagate the labels for this snapshot and likewise we can do this for the other snapshot until we've",
    "start": "1687440",
    "end": "1694580"
  },
  {
    "text": "propagated the labels through the entire program and once cargo dominates we would have a partition",
    "start": "1694580",
    "end": "1702320"
  },
  {
    "text": "assignments for every class and database table in the program so that's the overview uh We've packaged",
    "start": "1702320",
    "end": "1709880"
  },
  {
    "text": "cargo as part of DJI uh it's also available as a standalone tool and it",
    "start": "1709880",
    "end": "1715460"
  },
  {
    "text": "has a lot of options for enhancing how the label propagation behaves uh soliciting user feedback to initialize",
    "start": "1715460",
    "end": "1722120"
  },
  {
    "text": "the label propagation and so on so I'm going to go over the evaluation",
    "start": "1722120",
    "end": "1727880"
  },
  {
    "text": "right just to kind of uh complete the the thought process on how",
    "start": "1727880",
    "end": "1733340"
  },
  {
    "text": "cargo works and how it performs compared to some other algorithms so we looked at a few applications as shown here uh the",
    "start": "1733340",
    "end": "1742220"
  },
  {
    "text": "blanco several Java Frameworks they have a number of classes these are toy examples so there are just a few hundred",
    "start": "1742220",
    "end": "1747679"
  },
  {
    "text": "classes in in many cases uh and uh a few a few secret tables",
    "start": "1747679",
    "end": "1754340"
  },
  {
    "text": "we also looked at some additional approaches that are available in scientific Literature Like monitor micro",
    "start": "1754340",
    "end": "1759440"
  },
  {
    "text": "and a few others and we used these uh these algorithms",
    "start": "1759440",
    "end": "1765799"
  },
  {
    "text": "along with cargo to see if running DJI and cargo can enhance the partitioning",
    "start": "1765799",
    "end": "1771320"
  },
  {
    "text": "recommendations of these and when we do that in our experiments we use the notation uh plus plus for gravity",
    "start": "1771320",
    "end": "1778720"
  },
  {
    "text": "we look at a few research questions here to see if this technique works we",
    "start": "1778720",
    "end": "1784039"
  },
  {
    "text": "evaluated how effective it is in remediating distributed transactions we looked at the latency and throughput",
    "start": "1784039",
    "end": "1790340"
  },
  {
    "text": "improvements that we might get when we deployed these as running microservices and we also looked at the partitioning",
    "start": "1790340",
    "end": "1798260"
  },
  {
    "text": "quality and Architectural metrics that we might obtain if we were to partition the monolith using cargo",
    "start": "1798260",
    "end": "1805000"
  },
  {
    "text": "the first question was looking at distributed transactions so we wanted to",
    "start": "1805000",
    "end": "1810080"
  },
  {
    "text": "minimize distributed transactions and to do this to the extent possible we want each database table to be accessed by",
    "start": "1810080",
    "end": "1817460"
  },
  {
    "text": "just one microservice partition and to measure that there is a measure",
    "start": "1817460",
    "end": "1824059"
  },
  {
    "text": "called transaction Purity which measures how pure transactions are if the transaction Purity is low that means",
    "start": "1824059",
    "end": "1830539"
  },
  {
    "text": "that a table is accessed by multiple microservices potentially leading to needing a distributed transaction",
    "start": "1830539",
    "end": "1836659"
  },
  {
    "text": "management if the transaction Purity is high it means that a table is accessed",
    "start": "1836659",
    "end": "1841940"
  },
  {
    "text": "by only one microservice and all the data access remains local to that microservice",
    "start": "1841940",
    "end": "1847760"
  },
  {
    "text": "and this is just a quick comparison of all the techniques I'd like to note here that plus plus indicates that we used",
    "start": "1847760",
    "end": "1855500"
  },
  {
    "text": "cargo on the partitioning assignments that were given to us by the other algorithms and we observe that in most",
    "start": "1855500",
    "end": "1862580"
  },
  {
    "text": "cases without using cargo the transactional Purity was quite low which",
    "start": "1862580",
    "end": "1868520"
  },
  {
    "text": "meant that if we were to implement the transa the partitioning as per these algorithms we would have to reconcile",
    "start": "1868520",
    "end": "1875000"
  },
  {
    "text": "with a lot of distributed transactions but using cargo to to refine these",
    "start": "1875000",
    "end": "1880760"
  },
  {
    "text": "partitions is considerably reduced incidence of distributed transactions while it didn't",
    "start": "1880760",
    "end": "1886220"
  },
  {
    "text": "fully eliminate them it made them much fewer in numbers so that it's easy to to",
    "start": "1886220",
    "end": "1892100"
  },
  {
    "text": "handle and finally uh just running cargo without any seed examples in a random",
    "start": "1892100",
    "end": "1898760"
  },
  {
    "text": "manner also achieved a transactional purity of one meaning it could partition the application in a manner such that",
    "start": "1898760",
    "end": "1905480"
  },
  {
    "text": "all the tables were local to the partitions in addition to just looking at",
    "start": "1905480",
    "end": "1910760"
  },
  {
    "text": "transactions we we deployed two versions of the applications as microservices the",
    "start": "1910760",
    "end": "1917360"
  },
  {
    "text": "first one was the original partitioning algorithm with a technique called monitor micro and the second one we used",
    "start": "1917360",
    "end": "1923299"
  },
  {
    "text": "cargo to refine these partitions and to kind of look at if we can get uh",
    "start": "1923299",
    "end": "1928700"
  },
  {
    "text": "improved latency and higher throughput and we ran these on various loads with",
    "start": "1928700",
    "end": "1936679"
  },
  {
    "text": "uh ranging from 2000 to a million users on a number of use cases and the key",
    "start": "1936679",
    "end": "1942559"
  },
  {
    "text": "takeaway here is that in all cases using cargo and and DJI to do this refactoring",
    "start": "1942559",
    "end": "1949419"
  },
  {
    "text": "improved the latency or reduced it by 11 and increase it throughput by about 120",
    "start": "1949419",
    "end": "1955399"
  },
  {
    "text": "which was quite considerable in our use case and finally um we have to talk about cohesion and",
    "start": "1955399",
    "end": "1961820"
  },
  {
    "text": "coupling which we use to evaluate uh the architectural quality of these partitions we measured some of these",
    "start": "1961820",
    "end": "1969380"
  },
  {
    "text": "metrics and we observed that again using cargo reduced the coupling and increased",
    "start": "1969380",
    "end": "1974960"
  },
  {
    "text": "cohesion of the applications compared to the state-of-the-art techniques",
    "start": "1974960",
    "end": "1980720"
  },
  {
    "text": "there are some examples where we think cargo could uh could do better one",
    "start": "1980720",
    "end": "1987679"
  },
  {
    "text": "example is business context Purity which uh which measures how",
    "start": "1987679",
    "end": "1994399"
  },
  {
    "text": "closely tied each partition is to a business use case now since cargo does",
    "start": "1994399",
    "end": "1999799"
  },
  {
    "text": "not at its current state use any business context it didn't really do well at uh creating partitions that",
    "start": "1999799",
    "end": "2007120"
  },
  {
    "text": "stuck to a specific domain and and we think with with some additional work and",
    "start": "2007120",
    "end": "2012760"
  },
  {
    "text": "by engaging the community we can we can make the partitions from cargo more aligned with the domains that they they",
    "start": "2012760",
    "end": "2019360"
  },
  {
    "text": "tackle all right so this is a quick summary of cargo and all I spoke about I want to do",
    "start": "2019360",
    "end": "2027340"
  },
  {
    "text": "a quick demo and just show you how we can use cargo from DJI",
    "start": "2027340",
    "end": "2034140"
  },
  {
    "text": "so cargo is available as a standalone Pi Pi package and it's it's used as one of the",
    "start": "2035260",
    "end": "2042700"
  },
  {
    "text": "dependencies in DJI so when you install DJI using pipei it should come in",
    "start": "2042700",
    "end": "2048520"
  },
  {
    "text": "pre-built with cargo but there is a standalone tool in case there are options to enhance some of the",
    "start": "2048520",
    "end": "2054760"
  },
  {
    "text": "partitioning functionalities in cargo okay so let's clear the screen here and",
    "start": "2054760",
    "end": "2062200"
  },
  {
    "text": "to use cargo it and as a sub command of DJI and that is",
    "start": "2062200",
    "end": "2068858"
  },
  {
    "text": "DJI partition and I'm just gonna ask for help here so we can see how we",
    "start": "2068859",
    "end": "2076300"
  },
  {
    "text": "would invoke it from the command line so DJI partition has a few options the",
    "start": "2076300",
    "end": "2082300"
  },
  {
    "text": "seed input uh it's optional but if we do provide it it consumes the user-design",
    "start": "2082300",
    "end": "2088358"
  },
  {
    "text": "seat partitions so if you have some preferences on classes belonging to a specific microservice this is the place",
    "start": "2088359",
    "end": "2095138"
  },
  {
    "text": "to provide it it doesn't have to be exhaustive and it does not have to cover all the classes any recommendations or",
    "start": "2095139",
    "end": "2102099"
  },
  {
    "text": "preferences can be provided and the partitioning algorithm will try to respect those uh those initial",
    "start": "2102099",
    "end": "2109420"
  },
  {
    "text": "partitions and along with that we have other options like maximum partition size if",
    "start": "2109420",
    "end": "2116320"
  },
  {
    "text": "uh if there is a preference on having just three or four micro services for example that could be provided as an",
    "start": "2116320",
    "end": "2122440"
  },
  {
    "text": "option but this is also optional so if you don't provide any number cargo will",
    "start": "2122440",
    "end": "2128500"
  },
  {
    "text": "interpret a scene partition size and it will use that internally",
    "start": "2128500",
    "end": "2134500"
  },
  {
    "text": "to use cargo which is called uh cargo with one of these options so I'm just going to call it with a partition size",
    "start": "2134500",
    "end": "2141400"
  },
  {
    "text": "of five and once you do that it uh so it's this",
    "start": "2141400",
    "end": "2147700"
  },
  {
    "text": "is going to take a few minutes but I'll just walk you through what is happening underneath cargo is looking at the DJI graph that",
    "start": "2147700",
    "end": "2154300"
  },
  {
    "text": "we showed uh and it's going to make a local copy of it because we didn't want to make it uh tie to any specific graph",
    "start": "2154300",
    "end": "2161500"
  },
  {
    "text": "database or technology so it's going to make a local copy run the partitioning algorithm as I described find that the",
    "start": "2161500",
    "end": "2169300"
  },
  {
    "text": "partitions for every class and then update the DJI graph with a new property for every node indicating the the",
    "start": "2169300",
    "end": "2176020"
  },
  {
    "text": "partition so I'm gonna go back to this view",
    "start": "2176020",
    "end": "2181300"
  },
  {
    "text": "um and we ran cargo once and I'm just gonna show you what uh it might look",
    "start": "2181300",
    "end": "2187420"
  },
  {
    "text": "like so these are all the classes in the application um or a set of classes that we can",
    "start": "2187420",
    "end": "2194020"
  },
  {
    "text": "visualize and right now they're all gray but if you look at any one of these",
    "start": "2194020",
    "end": "2199119"
  },
  {
    "text": "classes Market summary Bean for example uh it should have a partition ID likewise",
    "start": "2199119",
    "end": "2205480"
  },
  {
    "text": "another class could have would have another partition ID and these partitions were obtained by running",
    "start": "2205480",
    "end": "2211480"
  },
  {
    "text": "cargo uh to visualize it better we have some rules here that we can use I'm just",
    "start": "2211480",
    "end": "2217359"
  },
  {
    "text": "going to apply a unique color to every partition and this view gives us an example of all the classes in the",
    "start": "2217359",
    "end": "2223660"
  },
  {
    "text": "application and each color represents classes that belong to that specific partition",
    "start": "2223660",
    "end": "2230859"
  },
  {
    "text": "an obvious question here is how could this be useful apart from visualizing classes and different partitions right",
    "start": "2230859",
    "end": "2236640"
  },
  {
    "text": "one thing DJI can help with is to visualize distributed transactions so",
    "start": "2236640",
    "end": "2242980"
  },
  {
    "text": "even after we do um cargo there are cases where we'll have distributed transactions and it is",
    "start": "2242980",
    "end": "2249220"
  },
  {
    "text": "important to remediate them so by running the distributed transactions command",
    "start": "2249220",
    "end": "2255599"
  },
  {
    "text": "we have some Cipher queries we use to compute distributed transactions it",
    "start": "2255599",
    "end": "2261160"
  },
  {
    "text": "should populate a graph that contains tables classes and the distributed",
    "start": "2261160",
    "end": "2266619"
  },
  {
    "text": "transactions as we see here um the larger blocks here indicate uh",
    "start": "2266619",
    "end": "2273400"
  },
  {
    "text": "components that are more Central and you'll observe here that there are classes that are colored differently",
    "start": "2273400",
    "end": "2279820"
  },
  {
    "text": "indicating that they belong to different microservices so we see at least three four microservices here with yellow",
    "start": "2279820",
    "end": "2287460"
  },
  {
    "text": "lavender and orange and they all talk to uh certain databases as an example we",
    "start": "2287460",
    "end": "2293680"
  },
  {
    "text": "can uh pick a set of classes to see what interactions they have and",
    "start": "2293680",
    "end": "2300880"
  },
  {
    "text": "this is a quick example of the Code ejb table having transaction rights from two",
    "start": "2300880",
    "end": "2305920"
  },
  {
    "text": "different classes one from a ping ejb class and another from a servlet class and they're both reading uh",
    "start": "2305920",
    "end": "2314140"
  },
  {
    "text": "from The Code ejb table and if you look at the property of every transaction",
    "start": "2314140",
    "end": "2319900"
  },
  {
    "text": "read we have a unique transaction ID and in cases where the transaction ID is the",
    "start": "2319900",
    "end": "2325359"
  },
  {
    "text": "same for this in this example the transactions would be potentially",
    "start": "2325359",
    "end": "2331000"
  },
  {
    "text": "distributed because they're both part of the same Global transaction that are right reading from the from the database",
    "start": "2331000",
    "end": "2338079"
  },
  {
    "text": "so that's a quick example of uh of what we can do with cargo and DJI and",
    "start": "2338079",
    "end": "2343960"
  },
  {
    "text": "visualize the various interactions and distributed transactions",
    "start": "2343960",
    "end": "2349420"
  },
  {
    "text": "um that brings me to the end of my talk I want to hand it back to John who will",
    "start": "2349420",
    "end": "2354880"
  },
  {
    "text": "talk you through some additional use cases that we have in mind what you've done yeah thank thanks Rahul",
    "start": "2354880",
    "end": "2362320"
  },
  {
    "text": "so um if we could just bring up my slide thank you so future work so this is this is where",
    "start": "2362320",
    "end": "2369880"
  },
  {
    "text": "you come in right but one of the things that we could do well",
    "start": "2369880",
    "end": "2374920"
  },
  {
    "text": "if you look at the output of DJI which we didn't show you it's like just a Json file or or forget if it's a plain text",
    "start": "2374920",
    "end": "2381040"
  },
  {
    "text": "file but it's nothing to look at so the idea is you know could we create some reports that an architect could go back",
    "start": "2381040",
    "end": "2387579"
  },
  {
    "text": "right or an a software engineer to go back and say you know this is the output and these are the recommendations for",
    "start": "2387579",
    "end": "2393099"
  },
  {
    "text": "additions and whatnot so there's some reporting that we want to add to it um as I mentioned we want to have",
    "start": "2393099",
    "end": "2399640"
  },
  {
    "text": "Dynamic operational data so doing some Dynamic scanning traces through the program as it's running right and add",
    "start": "2399640",
    "end": "2406720"
  },
  {
    "text": "that to the graph again once again understand yeah okay this is calling that but is it calling it once the",
    "start": "2406720",
    "end": "2412000"
  },
  {
    "text": "beginning or you know a thousand times a second new languages right now DJI only works",
    "start": "2412000",
    "end": "2417880"
  },
  {
    "text": "with Java but you know Java is not the center of the universe so there's lots of job out there but you know Python and go are becoming very very popular for",
    "start": "2417880",
    "end": "2424480"
  },
  {
    "text": "microservices you know could we use other languages and and especially in C sharp there's lots of Windows stuff out",
    "start": "2424480",
    "end": "2430660"
  },
  {
    "text": "there um enhancing the support for the Java framics that we have right spring Boot",
    "start": "2430660",
    "end": "2436180"
  },
  {
    "text": "and other Frameworks right adding more Frameworks that we understand remember I talked about the model view controller and can we by understanding the",
    "start": "2436180",
    "end": "2442540"
  },
  {
    "text": "framework can we you know inference what these classes are being used for",
    "start": "2442540",
    "end": "2448060"
  },
  {
    "text": "um then support for distributed transactions and being able to generate code being able to generate code that uses Saga patterns right so so in other",
    "start": "2448060",
    "end": "2454900"
  },
  {
    "text": "words you know you break you give the architect this report now what do you go do right now it's the exercise for the",
    "start": "2454900",
    "end": "2460300"
  },
  {
    "text": "student so we would like to be able to generate code generate stubs uh and and take care of distributed transactions",
    "start": "2460300",
    "end": "2467260"
  },
  {
    "text": "we need a UI for visualization it's great using Bloom it got us pretty far but we would love to have you know",
    "start": "2467260",
    "end": "2473859"
  },
  {
    "text": "someone who understands you know human computer interaction really build that 3D view where we can turn things around",
    "start": "2473859",
    "end": "2480579"
  },
  {
    "text": "and look behind them and look under them and see what's going on so it's kind of screaming for a really cool uh",
    "start": "2480579",
    "end": "2486760"
  },
  {
    "text": "visualization that we need to build and then we're using Diva which is another conveyor project and uh and it",
    "start": "2486760",
    "end": "2493960"
  },
  {
    "text": "has a set of persistence Frameworks it supports and there's always more persistence framework so we're looking at enhancing the persistence Frameworks",
    "start": "2493960",
    "end": "2499780"
  },
  {
    "text": "in Diva whether we do them as part of Diva or we do them as a set of adapters in either here and or there love to have",
    "start": "2499780",
    "end": "2505119"
  },
  {
    "text": "the community's input on on what you think is the best way to do that but enhancing the Frameworks the persistence",
    "start": "2505119",
    "end": "2510160"
  },
  {
    "text": "Frameworks that we support so that we can understand the distributed transactions going on we are currently",
    "start": "2510160",
    "end": "2515980"
  },
  {
    "text": "uh enhancing schema to graph looking at triggers right so it's great to",
    "start": "2515980",
    "end": "2521500"
  },
  {
    "text": "understand here's the schema here's a relationship and then what about all those triggers that when this gets updated that automatically gets updated",
    "start": "2521500",
    "end": "2527800"
  },
  {
    "text": "and the application doesn't know what's going on uh what about stored procedures right there's lots of stuff with stored",
    "start": "2527800",
    "end": "2533140"
  },
  {
    "text": "procedures out there and so could we use the information from the stored procedures to understand again when when",
    "start": "2533140",
    "end": "2538780"
  },
  {
    "text": "this is being updated is something else being updated what's happening um and then what can you think of for",
    "start": "2538780",
    "end": "2545079"
  },
  {
    "text": "future work um you know open an issue let us know what you think if there's other ideas",
    "start": "2545079",
    "end": "2550540"
  },
  {
    "text": "that you have we would love for you to join us and help us build this uh and so",
    "start": "2550540",
    "end": "2556359"
  },
  {
    "text": "the the um the pointer to the GitHub repository is down there at the bottom we're using",
    "start": "2556359",
    "end": "2561520"
  },
  {
    "text": "actually using uh get up projects so we got a kanban board we got stories on the kanban board uh but we would love for",
    "start": "2561520",
    "end": "2567400"
  },
  {
    "text": "the community to come help us you know we think we got it to a point where you can kind of visualize the potential",
    "start": "2567400",
    "end": "2573460"
  },
  {
    "text": "that's here but we need your help we need more Hands-On to understand people who have you know talent in other you",
    "start": "2573460",
    "end": "2580119"
  },
  {
    "text": "know areas not just Java but c-sharp and whatnot um and visualization and and uh but we",
    "start": "2580119",
    "end": "2585760"
  },
  {
    "text": "need your help to make this thing as as cool as we possibly can right to be really useful and there is there's never",
    "start": "2585760",
    "end": "2591940"
  },
  {
    "text": "going to be a tool where you push the button and it makes microservices you're always going to need an architect who's",
    "start": "2591940",
    "end": "2597700"
  },
  {
    "text": "guiding it along the way so I I totally believe that the tool needs to assist the architect in making architectural",
    "start": "2597700",
    "end": "2604660"
  },
  {
    "text": "decisions give them all the information they need to make those decisions show them different ways of viewing their",
    "start": "2604660",
    "end": "2610180"
  },
  {
    "text": "application but at the end of the day I would not hire an insurance architect to",
    "start": "2610180",
    "end": "2615400"
  },
  {
    "text": "uh re-architect my banking application right I want someone who understands the banking industry so you need to have",
    "start": "2615400",
    "end": "2620800"
  },
  {
    "text": "that context uh and so we envision this as a tool that is going to assist the software engineer the architect who's",
    "start": "2620800",
    "end": "2626619"
  },
  {
    "text": "going to re-architect or redesign this application uh and help them understand you know where those big heavy objects",
    "start": "2626619",
    "end": "2632140"
  },
  {
    "text": "are and where the micro services are and where are the business domains should be so please come help us I'm pleading with",
    "start": "2632140",
    "end": "2640060"
  },
  {
    "text": "you but we'd love to have you you know join join the team join the community and uh",
    "start": "2640060",
    "end": "2646180"
  },
  {
    "text": "and help us make this into something great so Jonathan back to you um well that was my plea awesome thank you John thank you",
    "start": "2646180",
    "end": "2654099"
  },
  {
    "text": "Rahul such an awesome um demo and and show so for anyone if",
    "start": "2654099",
    "end": "2660520"
  },
  {
    "text": "you have any questions feel free to put in the chat right now while we have John and Rahul here we can get them to answer",
    "start": "2660520",
    "end": "2666099"
  },
  {
    "text": "a few and in case you don't have any questions now but you may so later",
    "start": "2666099",
    "end": "2671440"
  },
  {
    "text": "whenever you have whenever you start getting trying to use the tool I put the link to the Khmer slack channel in the",
    "start": "2671440",
    "end": "2678940"
  },
  {
    "text": "comments and you can see on the screen now it's just a conveyor channel on the kubernetes slack so feel free to jog any",
    "start": "2678940",
    "end": "2686980"
  },
  {
    "text": "questions you have there and and we'll get someone to help you with that yeah we love it",
    "start": "2686980",
    "end": "2692859"
  },
  {
    "text": "let's see at the moment I don't see any questions",
    "start": "2692859",
    "end": "2699099"
  },
  {
    "text": "um but that may just be people more typing so I'll give a few minutes",
    "start": "2699099",
    "end": "2705819"
  },
  {
    "text": "it's a lot to absorb yeah it is",
    "start": "2705819",
    "end": "2710220"
  },
  {
    "text": "all right so for Marcus noggle have you planned any DJI specific",
    "start": "2713079",
    "end": "2719680"
  },
  {
    "text": "meetings to hammer out task and sync so that's a great yeah that's a great",
    "start": "2719680",
    "end": "2725079"
  },
  {
    "text": "question so yeah I think it's time to do that so I so we've been we've been having internal meetings but now that",
    "start": "2725079",
    "end": "2732040"
  },
  {
    "text": "we've announced it to the community I agree it's time to have a weekly you know community meeting or maybe a a",
    "start": "2732040",
    "end": "2738480"
  },
  {
    "text": "semi-weekly community meeting where we're discussing these and having our scrum calls so to speak",
    "start": "2738480",
    "end": "2745420"
  },
  {
    "text": "um so so yes we will we will post that on the uh uh in the readme in our DJI",
    "start": "2745420",
    "end": "2751540"
  },
  {
    "text": "repo but yes it's time to have Community meetings now so we will start those up absolutely and hopefully you'll join us",
    "start": "2751540",
    "end": "2758740"
  },
  {
    "text": "we won't just be the same people and I want a community meeting foreign",
    "start": "2758740",
    "end": "2764380"
  },
  {
    "text": "thank you John anyone else have any questions",
    "start": "2764380",
    "end": "2770880"
  },
  {
    "text": "all right um well with that we're going to call it a show and John Raul thank",
    "start": "2774400",
    "end": "2779500"
  },
  {
    "text": "you again so much and people will be picking you in slack if once they get to to using it yeah thanks for having us",
    "start": "2779500",
    "end": "2786280"
  },
  {
    "text": "and thanks for listening me one and yeah hit us up on slack and interact with us because we do want to start building",
    "start": "2786280",
    "end": "2791619"
  },
  {
    "text": "that Community with you so thanks",
    "start": "2791619",
    "end": "2795299"
  },
  {
    "text": "all right everyone we'll see you next time thanks again for attending bye bye-bye",
    "start": "2796720",
    "end": "2803520"
  }
]