[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "sure so I'm Frederick I am one of the committers of network service mesh",
    "start": "30",
    "end": "6500"
  },
  {
    "text": "Nikolay is a committer we also have in the room at least I saw him earlier ahead he's in the back so come feel free",
    "start": "6500",
    "end": "14670"
  },
  {
    "text": "to talk to any of us after the presentation and so we're gonna go over",
    "start": "14670",
    "end": "19710"
  },
  {
    "text": "a deep dive of network service special we're gonna go over the architecture and we're also going to go over the SDK that we worked on so that if you want to",
    "start": "19710",
    "end": "26760"
  },
  {
    "text": "build a what's calling a CNF so if you actually want to build something with",
    "start": "26760",
    "end": "32300"
  },
  {
    "text": "with it we're trying to make it as easy as possible so we're going to show a",
    "start": "32300",
    "end": "38129"
  },
  {
    "text": "little bit of llam√≥ files on the screen I hope that they're going to be seen good and slight reduction of our goal",
    "start": "38129",
    "end": "47280"
  },
  {
    "text": "code that that you can use to enable network service match for your applications we try to make it not look",
    "start": "47280",
    "end": "52800"
  },
  {
    "text": "that scary so we're going to go through and fetch your own right so so so what",
    "start": "52800",
    "end": "65070"
  },
  {
    "start": "60000",
    "end": "243000"
  },
  {
    "text": "is so network service smash so we start off with like what is the network service so in network service mesh we",
    "start": "65070",
    "end": "71100"
  },
  {
    "text": "have three core concepts we have something that wants to connect to a network service we have something that",
    "start": "71100",
    "end": "77310"
  },
  {
    "text": "provides the network service and we have something that the we have the connection between between the two so a",
    "start": "77310",
    "end": "84090"
  },
  {
    "text": "network service is anything that you want to connect to that provides that",
    "start": "84090",
    "end": "89520"
  },
  {
    "text": "provides a service for you we specifically look at layer 2 and layer 3 services so if you're looking for an l4",
    "start": "89520",
    "end": "97020"
  },
  {
    "text": "or l 7 then kindly ask you to take a look at sirs that the application",
    "start": "97020",
    "end": "102240"
  },
  {
    "text": "service message message such as sto link or D and so on what we're focusing on",
    "start": "102240",
    "end": "107369"
  },
  {
    "text": "specifically is is l2 and l3 so if you have a internet or an IP payload you",
    "start": "107369",
    "end": "112619"
  },
  {
    "text": "want to pass then this is the this is place to do it although in the end we're going to show an example that actually",
    "start": "112619",
    "end": "117950"
  },
  {
    "text": "contradicts a little bit assignment and shows how you can use higher-level protocols with NSM also yeah we can",
    "start": "117950",
    "end": "125700"
  },
  {
    "text": "connect you to things that provide those higher protocols so so we we start off with so the we start",
    "start": "125700",
    "end": "132549"
  },
  {
    "text": "off with a G RPC API as well so we don't show off the GRP C API in this presentation but all the connections are",
    "start": "132549",
    "end": "138760"
  },
  {
    "text": "everything that is the that is part of the dynamic live system itself you can",
    "start": "138760",
    "end": "144010"
  },
  {
    "text": "do through G RPC and so this means that if you want to hook in something like we're starting with kubernetes but if",
    "start": "144010",
    "end": "149650"
  },
  {
    "text": "you want to hook an openstack you want to hook in a physical system then you use the G RPC api's and you can then",
    "start": "149650",
    "end": "155290"
  },
  {
    "text": "connect things that are not part of kubernetes the system is also distributed so there is no centralized",
    "start": "155290",
    "end": "160989"
  },
  {
    "text": "control plane in this scenario it's it's purely it's purely distributed we do have some patterns that we kit that we",
    "start": "160989",
    "end": "167859"
  },
  {
    "text": "recommend if you have to do something with some centralized information you can centralize that to a to a specific",
    "start": "167859",
    "end": "173560"
  },
  {
    "text": "system perform the work you need to do but inherently it is a conservative system at heart and we also provide a",
    "start": "173560",
    "end": "179859"
  },
  {
    "text": "concrete kubernetes based implementation so this implementation is a we're",
    "start": "179859",
    "end": "186400"
  },
  {
    "text": "calling it a moment our reference implementation it is it does not touch your kubernetes networking it is",
    "start": "186400",
    "end": "191620"
  },
  {
    "text": "orthogonal to CNI so we also leverage at CD as the central stare shared storage",
    "start": "191620",
    "end": "197379"
  },
  {
    "text": "so we actually create CRTs and we store information about where the network services live with that we deploy using",
    "start": "197379",
    "end": "205989"
  },
  {
    "text": "daemon sets you do like helm install and we also used in our in our reference",
    "start": "205989",
    "end": "211780"
  },
  {
    "text": "implementation we use VPP which was kindly provided by the Fido elephant community just to note though VPP is not",
    "start": "211780",
    "end": "220810"
  },
  {
    "text": "avery is not a strongly required element so for the reference architecture we we added in but if you want to put up",
    "start": "220810",
    "end": "227440"
  },
  {
    "text": "different data plane underneath of it as long as someone implements the GRC if you I to do so then it should be trivial",
    "start": "227440",
    "end": "233290"
  },
  {
    "text": "and the API is very simple and we actually have been doing one of our contributors that is working Kona",
    "start": "233290",
    "end": "238629"
  },
  {
    "text": "including those pages for this so let's",
    "start": "238629",
    "end": "244720"
  },
  {
    "start": "243000",
    "end": "345000"
  },
  {
    "text": "start with what network service mesh shows so we start off with in in the in the system we have a network service",
    "start": "244720",
    "end": "250959"
  },
  {
    "text": "manager so and this is where this is a demon that stores that that is actually",
    "start": "250959",
    "end": "257650"
  },
  {
    "text": "doing the actual facilitation of the connections themselves and we store the pointers to each of those with",
    "start": "257650",
    "end": "262850"
  },
  {
    "text": "the within the kubernetes registry itself so we know where each manager lives we have a registry of network",
    "start": "262850",
    "end": "269750"
  },
  {
    "text": "services so this is where so you create your network service in a pod they then get stored in the location of",
    "start": "269750",
    "end": "276260"
  },
  {
    "text": "those gifts or rather not the location with the definition of those gifts are in the registry so this includes information like what payload is it is",
    "start": "276260",
    "end": "282290"
  },
  {
    "text": "it is like an IP or as Ethernet or MPLS or so on and we and we also have the endpoints which are the things that",
    "start": "282290",
    "end": "288020"
  },
  {
    "text": "actually provide those services so it's very it's very similar to kubernetes where you might have a service that provides a NAT web application and then",
    "start": "288020",
    "end": "294650"
  },
  {
    "text": "you have a set of n points that actually provide you the real thing so we have the same thing we have another service that provides you with a description of",
    "start": "294650",
    "end": "301550"
  },
  {
    "text": "what the service is and we have endpoints that provide you with the actual connectivity and so once we have",
    "start": "301550",
    "end": "311690"
  },
  {
    "text": "connections where you see I can know where service client itself through with some context so we show off with a label",
    "start": "311690",
    "end": "317240"
  },
  {
    "text": "on the bottom left so with this label with these labels we can also provide additional context that gets set at",
    "start": "317240",
    "end": "322820"
  },
  {
    "text": "runtime and we it allows us to connect pods if you notice these are going for directly from client to endpoint so",
    "start": "322820",
    "end": "329210"
  },
  {
    "text": "everything here is point-to-point so if you want to submit or you want the bridge domain virtual means like think",
    "start": "329210",
    "end": "335000"
  },
  {
    "text": "of it like a switch then those are network services so you are connecting to a network service to to a subnet so",
    "start": "335000",
    "end": "343220"
  },
  {
    "text": "in so what this ends up looking like if",
    "start": "343220",
    "end": "348500"
  },
  {
    "start": "345000",
    "end": "423000"
  },
  {
    "text": "you're trying to define if you're trying to define a service so let's sort of one of the examples that we've shown in the",
    "start": "348500",
    "end": "354170"
  },
  {
    "text": "past was the concept of like how do you connect to a VPN so if you think it would it takes to connect to a VPN you",
    "start": "354170",
    "end": "359390"
  },
  {
    "text": "want to have a pod to connect to a to let's say corporate to secure corporate internet so that pod the the operator",
    "start": "359390",
    "end": "367280"
  },
  {
    "text": "may decide ok we're going this pod must go through a firewall let's go through an intrusion detection system goes",
    "start": "367280",
    "end": "373250"
  },
  {
    "text": "through a VPN client and Gateway and so on so this entire list of things this entire chain is specified by by the",
    "start": "373250",
    "end": "381050"
  },
  {
    "text": "operator so as the consumer of this VPN you shouldn't have to care about any of that you should not care about is this",
    "start": "381050",
    "end": "386690"
  },
  {
    "text": "this thing have a firewall because your operator is taking care of that for you all you care about is I can connect to",
    "start": "386690",
    "end": "392150"
  },
  {
    "text": "this thing in just so it works and so so this is so this is one of the",
    "start": "392150",
    "end": "397319"
  },
  {
    "text": "areas that we have where if you see we have on the we have a source selector so so this actually specifies two two end",
    "start": "397319",
    "end": "405810"
  },
  {
    "text": "points that we're looking at so one of them is if a default match so you're when you connect in with it there's the",
    "start": "405810",
    "end": "412139"
  },
  {
    "text": "default match is as empty we have a route to the destination the destination says app firewall so that's actually the",
    "start": "412139",
    "end": "417900"
  },
  {
    "text": "the bottom one they actually come around so I can point it out so yeah so you can",
    "start": "417900",
    "end": "424800"
  },
  {
    "text": "see the destination right here match route firewall and then the firewall",
    "start": "424800",
    "end": "429960"
  },
  {
    "text": "when firewall connects to the network service so did scum these are all composable so when the firewall connects",
    "start": "429960",
    "end": "435689"
  },
  {
    "text": "in and says I want to connect to secure Internet connectivity then this is at the sources firewall the destination is",
    "start": "435689",
    "end": "442349"
  },
  {
    "text": "then VPN gateway so you can create arbitrary chains of your network services and in this way so so as an",
    "start": "442349",
    "end": "449819"
  },
  {
    "text": "operator your your defining declarative because in a declarative way what your system is things to note about this as",
    "start": "449819",
    "end": "457110"
  },
  {
    "text": "well there's no 'wipeys listed here there's there's a payload payload is set",
    "start": "457110",
    "end": "462449"
  },
  {
    "text": "to IP but we're not we're not putting any MAC addresses or not who are not storing anything about the runtime on the scenario that I'll get freezing",
    "start": "462449",
    "end": "468509"
  },
  {
    "text": "they're still little IP addresses there so IP addresses they're still MAC addresses etcetera but there are they're",
    "start": "468509",
    "end": "473610"
  },
  {
    "text": "part of the negotiation when you establish the connection and so so what",
    "start": "473610",
    "end": "483839"
  },
  {
    "text": "this ends up looking like in for our particular system if you're the if you're the user who wants to connect so",
    "start": "483839",
    "end": "491879"
  },
  {
    "text": "notice this one is a deployment and has a it has a pod spec inside of it so this was just running alpine and in the",
    "start": "491879",
    "end": "498930"
  },
  {
    "text": "metadata we added in the an annotation in that annotation is ns then we're",
    "start": "498930",
    "end": "504779"
  },
  {
    "text": "service submission of i/o and the name of the service that you want that",
    "start": "504779",
    "end": "510449"
  },
  {
    "text": "service you could be secure internet connectivity like this as we had before the label allows you to provide additional context additional",
    "start": "510449",
    "end": "516630"
  },
  {
    "text": "information our recommendation is if you want to add in a label the label should",
    "start": "516630",
    "end": "524099"
  },
  {
    "text": "be something that is at a high level that's declarative level shoe you should not be yeah peel an ID",
    "start": "524099",
    "end": "532740"
  },
  {
    "text": "or you should not be adding in specific the excellent data or that kind of stuff",
    "start": "532740",
    "end": "538350"
  },
  {
    "text": "so let that be done at a at a lower level at the operational side and so if",
    "start": "538350",
    "end": "545670"
  },
  {
    "text": "you include the sanitation then we have an admission controller and what this admission controller does is it inject",
    "start": "545670",
    "end": "552899"
  },
  {
    "text": "San in ink container into your into your pod and that any container will then use the SDK that Nikolay is going to show in",
    "start": "552899",
    "end": "559769"
  },
  {
    "text": "order to make the connection something that something that we're able to do as well is that this is for like a standard",
    "start": "559769",
    "end": "565949"
  },
  {
    "text": "legacy say like say it's a standard application if you want to hook in something that has more intelligence",
    "start": "565949",
    "end": "573360"
  },
  {
    "text": "more complexity at the network layer you could also use the SDK directly you don't have to bring in the in in",
    "start": "573360",
    "end": "578610"
  },
  {
    "text": "container while the application is running you can ask for things so if you want to say I want to open up a firewall open up a connection to my secure",
    "start": "578610",
    "end": "585269"
  },
  {
    "text": "banking information or and start or find my financial network and start to make",
    "start": "585269",
    "end": "590339"
  },
  {
    "text": "some operations and you want to close that to minimize your your your risk",
    "start": "590339",
    "end": "595439"
  },
  {
    "text": "then you can do that if you if you're building out if you're one of the service providers and you want to build",
    "start": "595439",
    "end": "601379"
  },
  {
    "text": "out more intelligent networks that that",
    "start": "601379",
    "end": "606420"
  },
  {
    "text": "are based upon the actual like conditions of your of your system then it gives you the capability to to do so",
    "start": "606420",
    "end": "614179"
  },
  {
    "start": "614000",
    "end": "727000"
  },
  {
    "text": "so the way that so the way that this works I've compressed I compress this a little bit",
    "start": "614179",
    "end": "619740"
  },
  {
    "text": "I'll from the operational side is in the client when you make a connection so",
    "start": "619740",
    "end": "626519"
  },
  {
    "text": "these black lines are all G RPC so we make the connection request down and in",
    "start": "626519",
    "end": "631589"
  },
  {
    "text": "this connection requests we say we would like secure Internet connectivity or that's and I've gets resolved to VPN gateway pod and so we say request",
    "start": "631589",
    "end": "639509"
  },
  {
    "text": "connection so we're never in that request connection we also include information like how how do I want to",
    "start": "639509",
    "end": "646470"
  },
  {
    "text": "connect to this thing so it turns out that there's more than one way there's you can use more than just kernel interfaces to connect to",
    "start": "646470",
    "end": "651870"
  },
  {
    "text": "so there's you also have things like mm IFV host user and these so these are",
    "start": "651870",
    "end": "657709"
  },
  {
    "text": "Colonel bypass mechanisms ways to get to your data plane very very quickly without occurring the cost of the",
    "start": "657709",
    "end": "664769"
  },
  {
    "text": "colonel and so so if your pods is more intelligent you could say I support my",
    "start": "664769",
    "end": "672209"
  },
  {
    "text": "FB host user currently interface in that preference and that all gets wrapped into the request and gets in up to the",
    "start": "672209",
    "end": "679170"
  },
  {
    "text": "to the NSA manager the innocent manager will take that particular request for",
    "start": "679170",
    "end": "685170"
  },
  {
    "text": "the network service and forward it on to the pod that's providing the service and that pod can make a decision do I want",
    "start": "685170",
    "end": "691529"
  },
  {
    "text": "to accept this request or do I want to reject it maybe there's something about it it doesn't it doesn't like or maybe it can't handle the request anymore so",
    "start": "691529",
    "end": "698760"
  },
  {
    "text": "it so will respond back with where accepts or rejects it so let's say let's assume that it accepted then it'll",
    "start": "698760",
    "end": "704070"
  },
  {
    "text": "create the interface on the right side create the interface on the left side it'll and configure your data plan based",
    "start": "704070",
    "end": "711120"
  },
  {
    "text": "upon what it knows about what it negotiated here and and wouldn't negotiate it on the other side for their",
    "start": "711120",
    "end": "716370"
  },
  {
    "text": "where their local what we call local mechanisms and it performs to cross connect so this is for the single node",
    "start": "716370",
    "end": "722850"
  },
  {
    "text": "example of the multi node example is similar so multimode is an example we",
    "start": "722850",
    "end": "729870"
  },
  {
    "start": "727000",
    "end": "844000"
  },
  {
    "text": "have a request connection with that local mechanism as we have before it'll it'll connect to the to the CRD or to",
    "start": "729870",
    "end": "738420"
  },
  {
    "text": "the kubernetes api server to work out where like which network service manager do i need to connect to in in order to",
    "start": "738420",
    "end": "744810"
  },
  {
    "text": "gain access to that system so once it once it knows of its an assent manager",
    "start": "744810",
    "end": "749940"
  },
  {
    "text": "to it'll then send that request over to the msn manager to now this additional",
    "start": "749940",
    "end": "755579"
  },
  {
    "text": "request number step number three has some additional information it added it so this information is about the remote",
    "start": "755579",
    "end": "762269"
  },
  {
    "text": "what remote mechanisms that this data plane down here supports so you might even have two different data planes from two different groups so this data plan",
    "start": "762269",
    "end": "769230"
  },
  {
    "text": "might say I support VX LAN and GRE and we'll send that in the request connection step four that's that",
    "start": "769230",
    "end": "776399"
  },
  {
    "text": "information gets stripped out but it's still stored off to the side and the requests like before get sent to the VPN",
    "start": "776399",
    "end": "783779"
  },
  {
    "text": "gateway so that back half is the same when it accepts we create an",
    "start": "783779",
    "end": "789000"
  },
  {
    "text": "injecting interface on the right side we then create the tunnel with the data plane we create that we create the",
    "start": "789000",
    "end": "795750"
  },
  {
    "text": "tunnel on the on the right side and the data planes will then so now that we now",
    "start": "795750",
    "end": "801270"
  },
  {
    "text": "we have the the tunnel created at least we now have some more information that we can then pass back so maybe the data",
    "start": "801270",
    "end": "806790"
  },
  {
    "text": "plane selected we we decided to go with VX lab with these parameters so now we can have your your tunnel",
    "start": "806790",
    "end": "813210"
  },
  {
    "text": "so that gets encoded into reply so when they reply returns an assent manager now",
    "start": "813210",
    "end": "818670"
  },
  {
    "text": "has all the information it needs in order to make that connection so the interface gets injected in with",
    "start": "818670",
    "end": "825330"
  },
  {
    "text": "the mechanism requested then the side of the tunnel gets created using the information that came from the reply and",
    "start": "825330",
    "end": "833220"
  },
  {
    "text": "once the tunnel is established we respond that the connection is ready and then now you have a full working connection so we use this pattern over",
    "start": "833220",
    "end": "839430"
  },
  {
    "text": "and over and over again just to in order to create and connect the network services before we move on are there any",
    "start": "839430",
    "end": "845670"
  },
  {
    "start": "844000",
    "end": "1269000"
  },
  {
    "text": "questions on this sure",
    "start": "845670",
    "end": "850670"
  },
  {
    "text": "now so we don't use CNI in this scenario so CNI is tightly bound to the lifecycle",
    "start": "852529",
    "end": "859560"
  },
  {
    "text": "of the of the system and and CNI also is missing is I was I'm missing it see and",
    "start": "859560",
    "end": "866190"
  },
  {
    "text": "I was designed for a very specific reason which is I want to get IP connectivity to a to a to a network and",
    "start": "866190",
    "end": "873300"
  },
  {
    "text": "so when you start to look at other at other systems like what does it mean if you want to be an entire l2 payload or",
    "start": "873300",
    "end": "880529"
  },
  {
    "text": "so on it doesn't really make sense in that area the other thing that the other advantage that we have is that when we",
    "start": "880529",
    "end": "886529"
  },
  {
    "text": "when we establish connection we're not part of the lifecycle of kubernetes other than the pod can make requests",
    "start": "886529",
    "end": "892620"
  },
  {
    "text": "it's part of a pod for this example so when you start CNI CNI starts before the",
    "start": "892620",
    "end": "898199"
  },
  {
    "text": "filesystem is established and I notice times we are talking about file systems here in a networking duct but what",
    "start": "898199",
    "end": "903389"
  },
  {
    "text": "happens with the is is if you wanted to add in shared memory so you want to do kernel bypass you have to be able to",
    "start": "903389",
    "end": "909120"
  },
  {
    "text": "mount an inode somewhere in your file system so you can then access it since you have no file system when C&I is",
    "start": "909120",
    "end": "914190"
  },
  {
    "text": "running you don't have anywhere to put it you do have access to a network name space so you can inject kernel",
    "start": "914190",
    "end": "919649"
  },
  {
    "text": "interfaces but you cannot and you cannot easily inject a shared memory interface",
    "start": "919649",
    "end": "924750"
  },
  {
    "text": "into into the system so because of that limitation that required us to to",
    "start": "924750",
    "end": "932639"
  },
  {
    "text": "provide a alternative path in order to establish those and so that's a good question sure so so kubernetes never policy is",
    "start": "932639",
    "end": "944910"
  },
  {
    "text": "not something that we're providing in us so we're orthogonal to kubernetes networking you can have policy but your",
    "start": "944910",
    "end": "950910"
  },
  {
    "text": "policy would get encoded into the network service or you provide a policy through an every service so like you can",
    "start": "950910",
    "end": "956910"
  },
  {
    "text": "have a firewall and a firewall could implement your policy for you but we're not reading directly off of kubernetes",
    "start": "956910",
    "end": "961949"
  },
  {
    "text": "policy because it's it's an it's an orthogonal network to it I saw one in the back though here what kind of",
    "start": "961949",
    "end": "970740"
  },
  {
    "text": "permissions I'm privileged so the the injection occurs with in coordination",
    "start": "970740",
    "end": "977220"
  },
  {
    "text": "with the network service manager in the in the data plane which have a little bit more the data plane doesn't have permissions",
    "start": "977220",
    "end": "982840"
  },
  {
    "text": "if ever I call anymore so we actually managed to get rid of that so so we delegate we the when we make a request",
    "start": "982840",
    "end": "989920"
  },
  {
    "text": "from this and it container there's no permissions it gets injected in through something that the user does not have control over other than the ability to",
    "start": "989920",
    "end": "996280"
  },
  {
    "text": "make a request for a connection sure yes",
    "start": "996280",
    "end": "1002100"
  },
  {
    "text": "you can have multiple interfaces so so",
    "start": "1002100",
    "end": "1027420"
  },
  {
    "text": "in terms of see the CNI part so we we go to great lengths to not interfere with the CNI so we've Kerber Nettie's",
    "start": "1027420",
    "end": "1032430"
  },
  {
    "text": "networking is very well done we don't want to mess with that simultaneously anything that it's it's up there there",
    "start": "1032430",
    "end": "1040380"
  },
  {
    "text": "is some part of the application in terms of how you set up the routes and so on and those routes like independent if you're a VPN gateway you provide those",
    "start": "1040380",
    "end": "1047188"
  },
  {
    "text": "routes and those would get injected in and then those would then head off so as an operator you do need to be you do",
    "start": "1047189",
    "end": "1052200"
  },
  {
    "text": "need to be slightly concerned with some of this stuff but it's not it's a lot easier than than the current state",
    "start": "1052200",
    "end": "1058890"
  },
  {
    "text": "because the current state is you said is you may end up setting route school bully at a high level and in this scenario we can negotiate that and if",
    "start": "1058890",
    "end": "1065250"
  },
  {
    "text": "and we could set up a policy that says if the routes conflict or there's some conviction here's how you resolve it or here's our failed connection or our so",
    "start": "1065250",
    "end": "1071910"
  },
  {
    "text": "on so as an operator it it should make your life so easier in that respect sure",
    "start": "1071910",
    "end": "1080750"
  },
  {
    "text": "okay so so this is a little bit of an interesting area when you so in terms of",
    "start": "1089000",
    "end": "1094830"
  },
  {
    "text": "scaling out so first the actual innocent managers themselves are point-to-point system so",
    "start": "1094830",
    "end": "1101370"
  },
  {
    "text": "each of these connections is is point-to-point so are you thinking like VX land where you might run out of like",
    "start": "1101370",
    "end": "1106950"
  },
  {
    "text": "us like parameters or so on are you just thinking about management zone so well",
    "start": "1106950",
    "end": "1116550"
  },
  {
    "text": "the gateway pod is a service and in this scenario and so in this in terms of in terms of scale out we can scale out the",
    "start": "1116550",
    "end": "1123810"
  },
  {
    "text": "number of pots that you have so like the instead of having a single gateway you can have multiple gateways or so have a single firewall you can have multiple",
    "start": "1123810",
    "end": "1129420"
  },
  {
    "text": "firewalls and when you do the connect and then we can based upon some mechanism we commend and select one on",
    "start": "1129420",
    "end": "1135900"
  },
  {
    "text": "your behalf and connect you to it",
    "start": "1135900",
    "end": "1139340"
  },
  {
    "text": "well the good news is the tunnels are cheap so what's what's more expenses if",
    "start": "1148410",
    "end": "1154300"
  },
  {
    "text": "you try to set up like if you if you try to set up it's a V switch or something",
    "start": "1154300",
    "end": "1159670"
  },
  {
    "text": "like running at altar of each switch these switches are very expensive they're very computationally expensive in this scenario we're just doing very",
    "start": "1159670",
    "end": "1166510"
  },
  {
    "text": "simple point-to-point connections and point point connections scale out very well like the entire Internet's beds built on point point connections so from",
    "start": "1166510",
    "end": "1173590"
  },
  {
    "text": "a scalability perspective this entire system is distributed we're able if you get too old to a hyper scale scenario",
    "start": "1173590",
    "end": "1180520"
  },
  {
    "text": "where you don't want to list out where is every Edison where's every gateway pod when you get to a high will to a",
    "start": "1180520",
    "end": "1186100"
  },
  {
    "text": "hyper scale we haven't implemented this yet but you could go and do something like summarization or something similar",
    "start": "1186100",
    "end": "1191980"
  },
  {
    "text": "so that way you say here's one particular system then you let the backend system resolve which is very similar to how DNS works today so what'd",
    "start": "1191980",
    "end": "1197680"
  },
  {
    "text": "you hit DNS will give you back an end point it won't give you like all the end points so with that been an area of may it may exist with sure",
    "start": "1197680",
    "end": "1206970"
  },
  {
    "text": "[Music]",
    "start": "1209740",
    "end": "1212970"
  },
  {
    "text": "do you remember how long we benchmarked it how long the connection took it was",
    "start": "1217770",
    "end": "1223240"
  },
  {
    "text": "it was no leave it was milliseconds at the most for establishing yes no there's",
    "start": "1223240",
    "end": "1230799"
  },
  {
    "text": "no yeah it's it's it's this is this is more on the persistent side so it's not like you're making a connection making a",
    "start": "1230799",
    "end": "1236380"
  },
  {
    "text": "packet closing connection so you establish connection then you now have this is an l2 like an l2 l3 connection",
    "start": "1236380",
    "end": "1242169"
  },
  {
    "text": "now I'm not not like an l4 or L 7 l7 connection so once you've established it like it might be a connection to your",
    "start": "1242169",
    "end": "1248020"
  },
  {
    "text": "gateway pod and then you just spend everything over it so I want to make sure that Nicola has time as well to go",
    "start": "1248020",
    "end": "1253270"
  },
  {
    "text": "over his stuff as well but we're little bit total time we're little bit of time",
    "start": "1253270",
    "end": "1259179"
  },
  {
    "text": "I continue yeah okay so all these",
    "start": "1259179",
    "end": "1269799"
  },
  {
    "start": "1269000",
    "end": "1554000"
  },
  {
    "text": "details are interesting and I'm sure that people that don't want to bore that",
    "start": "1269799",
    "end": "1274929"
  },
  {
    "text": "to a service manager to in the hall and some architecture to other platforms",
    "start": "1274929",
    "end": "1280659"
  },
  {
    "text": "like integrate with OpenStack hands and legs they would be this is but if you",
    "start": "1280659",
    "end": "1286179"
  },
  {
    "text": "are if you're you don't really care",
    "start": "1286179",
    "end": "1291909"
  },
  {
    "text": "about these things so at what Keep Calm we sat down together as a community and we started thinking how we can expand",
    "start": "1291909",
    "end": "1299470"
  },
  {
    "text": "our our examples and that's when we came up with the idea of the SDK so one way",
    "start": "1299470",
    "end": "1310299"
  },
  {
    "text": "to actually do to consume network services with",
    "start": "1310299",
    "end": "1315389"
  },
  {
    "text": "within NSF is implementing the so-called smart client so whatever Fred showed a",
    "start": "1315389",
    "end": "1320999"
  },
  {
    "text": "couple of slides ago with the admission control is like injecting the in container this gives you some",
    "start": "1320999",
    "end": "1327899"
  },
  {
    "text": "flexibility to use your to actually enable anything for your existing",
    "start": "1327899",
    "end": "1333149"
  },
  {
    "text": "applications but if you want to do something because smarter you want to be able to control your connections to the",
    "start": "1333149",
    "end": "1342059"
  },
  {
    "text": "to the N to the N network services you should use the SDK and this is how it",
    "start": "1342059",
    "end": "1348809"
  },
  {
    "text": "looks like so essentially there are three three four actually cost so the",
    "start": "1348809",
    "end": "1356940"
  },
  {
    "text": "first thing is you create a new client then you call the connect method with a",
    "start": "1356940",
    "end": "1365909"
  },
  {
    "text": "couple of arguments the interface name that is actually going to to be injected",
    "start": "1365909",
    "end": "1371519"
  },
  {
    "text": "in your in your pot where the application is running the next argument",
    "start": "1371519",
    "end": "1377969"
  },
  {
    "text": "is the type of the mechanism so currently we here shown Curnow but you",
    "start": "1377969",
    "end": "1384749"
  },
  {
    "text": "can use the other mechanism that we do support it's a retro TV host user mif",
    "start": "1384749",
    "end": "1390089"
  },
  {
    "text": "and whatever appears in the future and then we have some small description just for logging purposes saying things like",
    "start": "1390089",
    "end": "1396179"
  },
  {
    "text": "ok your primary interface got connected then as a result of disco you",
    "start": "1396179",
    "end": "1403859"
  },
  {
    "text": "essentially get a connection structure so this is a dumper in our jogger where",
    "start": "1403859",
    "end": "1409499"
  },
  {
    "text": "actually you can see because remember all these calls within the SDK actually",
    "start": "1409499",
    "end": "1416909"
  },
  {
    "text": "are hiding our G OPC communication so we have yeri enabled all over the NSM",
    "start": "1416909",
    "end": "1422399"
  },
  {
    "text": "infrastructure so when you look at the messages this is essentially what you get as a result of this call so you have",
    "start": "1422399",
    "end": "1429210"
  },
  {
    "text": "all the information in this specific case we have requested the services IP",
    "start": "1429210",
    "end": "1434700"
  },
  {
    "text": "enabled so that's why the endpoint the network service essentially apply it with other IP addresses around psyche",
    "start": "1434700",
    "end": "1444059"
  },
  {
    "text": "neighbors fifteen all the data is filled in the context so getting this so what you see",
    "start": "1444059",
    "end": "1451590"
  },
  {
    "text": "here is we have a source IP and the destination IP so the source ID the sole",
    "start": "1451590",
    "end": "1458850"
  },
  {
    "text": "we didn't ever sell this mesh we we call the source the the requester of the",
    "start": "1458850",
    "end": "1464280"
  },
  {
    "text": "other so in this in this case it would be the client so this means that your local address that you get is 1061 one",
    "start": "1464280",
    "end": "1472470"
  },
  {
    "text": "and the remote address of the point-to-point connection is 1061 - this",
    "start": "1472470",
    "end": "1479400"
  },
  {
    "text": "is just for information reason for information reasons I mean you don't",
    "start": "1479400",
    "end": "1485820"
  },
  {
    "text": "have to do anything you just can use this information to implement your functionality the interface is injected",
    "start": "1485820",
    "end": "1494340"
  },
  {
    "text": "in your pot and all right this'll set all the routes and set everything is in place our tables are updated and cetera",
    "start": "1494340",
    "end": "1500510"
  },
  {
    "text": "so this is all done to the sdk so when",
    "start": "1500510",
    "end": "1506760"
  },
  {
    "text": "you get this this information you can actually run your actual code you can do",
    "start": "1506760",
    "end": "1512549"
  },
  {
    "text": "your you can consume your service you know where the other entities and then",
    "start": "1512549",
    "end": "1518309"
  },
  {
    "text": "in the end you can close the connection you can open it again if you if you need and when you're done you just call",
    "start": "1518309",
    "end": "1524010"
  },
  {
    "text": "client destroy which is in the bottom I didn't highlight it so this way you you have a dynamic control in the Tran time",
    "start": "1524010",
    "end": "1531480"
  },
  {
    "text": "of injecting interface is actually within your pot so you request an",
    "start": "1531480",
    "end": "1536669"
  },
  {
    "text": "interface you request a network service as a result you get this interface in injected for you the service is there",
    "start": "1536669",
    "end": "1543659"
  },
  {
    "text": "when you are done you can close the interface gets removed you can request it again you don't have to restart pods",
    "start": "1543659",
    "end": "1550169"
  },
  {
    "text": "and do things clients are fun but I guess that a lot",
    "start": "1550169",
    "end": "1557790"
  },
  {
    "start": "1554000",
    "end": "1651000"
  },
  {
    "text": "of people will be interested to know how how how you implement in a network service endpoint so here is an example",
    "start": "1557790",
    "end": "1563940"
  },
  {
    "text": "with where we have a network service which is composed of two endpoints and one client that the two endpoints are",
    "start": "1563940",
    "end": "1570510"
  },
  {
    "text": "party to and poetry and the client ransom port one so let's quickly look at",
    "start": "1570510",
    "end": "1576179"
  },
  {
    "text": "how this works so essentially client requests a connection to the network service it gets the connection to the first pot",
    "start": "1576179",
    "end": "1583470"
  },
  {
    "text": "within the network service the PERT endpoint which would be running to and",
    "start": "1583470",
    "end": "1589530"
  },
  {
    "text": "then on its own the network service points in pot to request the connection",
    "start": "1589530",
    "end": "1595260"
  },
  {
    "text": "to the network service endpoint in poetry this is this is how one option",
    "start": "1595260",
    "end": "1600929"
  },
  {
    "text": "that you can implement network service you can do this with static connections",
    "start": "1600929",
    "end": "1607950"
  },
  {
    "text": "like at the moment that the two endpoints are deployed they connect to each other and just wait for connections",
    "start": "1607950",
    "end": "1614429"
  },
  {
    "text": "whatever we are showing here is just a dynamic mesh establishment upon request so imagine that your endpoints are just",
    "start": "1614429",
    "end": "1621600"
  },
  {
    "text": "sitting there being deployed sitting there waiting for connections when the client once the client comes and",
    "start": "1621600",
    "end": "1627059"
  },
  {
    "text": "depending on their request they can dynamically establish the mesh so you don't have a static static connections",
    "start": "1627059",
    "end": "1634650"
  },
  {
    "text": "over established all the time but this is one option I mean you can do whatever whatever works for you so essentially if",
    "start": "1634650",
    "end": "1641280"
  },
  {
    "text": "you zoom in a little bit in the network service endpoint in pot to what what it",
    "start": "1641280",
    "end": "1646890"
  },
  {
    "text": "has to implement is it has to handle the request from port one and then generate request to poetry now let's see how this",
    "start": "1646890",
    "end": "1652919"
  },
  {
    "start": "1651000",
    "end": "1801000"
  },
  {
    "text": "works in the code oh this thing looks probably slightly more complicated but",
    "start": "1652919",
    "end": "1658950"
  },
  {
    "text": "it's really not so the orange highlights are showing the cost to the SDK which",
    "start": "1658950",
    "end": "1666720"
  },
  {
    "text": "are related to the implementation of the endpoint so you first have to create we",
    "start": "1666720",
    "end": "1672390"
  },
  {
    "text": "have this notion of composites so the composite is a essentially a chain of",
    "start": "1672390",
    "end": "1677580"
  },
  {
    "text": "structures which implement callback like interface these structures we call",
    "start": "1677580",
    "end": "1685010"
  },
  {
    "text": "composable so these are the highlighted calls so the first thing",
    "start": "1685010",
    "end": "1691750"
  },
  {
    "text": "that you do is you create your composite then yuo create a new network service main point where you pass your composite",
    "start": "1691750",
    "end": "1700170"
  },
  {
    "text": "as a as a point out there and then you start the end point as you can imagine",
    "start": "1700170",
    "end": "1705430"
  },
  {
    "text": "the start function is just blocking it sitting there waiting for connections click happen and passing the other",
    "start": "1705430",
    "end": "1711490"
  },
  {
    "text": "incoming requests to the to the composite now what what actually the composite looks here so we have stack of",
    "start": "1711490",
    "end": "1721530"
  },
  {
    "text": "functions so on the top we have the monitoring function which essentially just wait for other incoming connections",
    "start": "1721530",
    "end": "1728590"
  },
  {
    "text": "and then updates our monitoring mechanisms with the creation and remove of new connections this is this issue so",
    "start": "1728590",
    "end": "1737140"
  },
  {
    "text": "for observability for monitoring you can imagine things then we change this to an",
    "start": "1737140",
    "end": "1744070"
  },
  {
    "text": "ACL which is for those that you don't know it's access control list it's a",
    "start": "1744070",
    "end": "1749260"
  },
  {
    "text": "simple form of packet filtering we change this to a function called cross",
    "start": "1749260",
    "end": "1755830"
  },
  {
    "text": "connect as you as we saw on the previous side what to essentially sits in the",
    "start": "1755830",
    "end": "1761140"
  },
  {
    "text": "middle between the client in the end poetry so what it has to do is it just",
    "start": "1761140",
    "end": "1766360"
  },
  {
    "text": "has to connect the two interfaces that it has so that's what we do with a cross connect then we have an network service",
    "start": "1766360",
    "end": "1774190"
  },
  {
    "text": "client which is essentially the layer that generates the request to port 3",
    "start": "1774190",
    "end": "1779290"
  },
  {
    "text": "those also did this kind of generates the request for the next endpoint and at",
    "start": "1779290",
    "end": "1786940"
  },
  {
    "text": "the bottom we have a simple this is layer that just creates a fuse structure",
    "start": "1786940",
    "end": "1794350"
  },
  {
    "text": "that we need actually this is the structure that we shot in the client that has all the IPS and the whole deck",
    "start": "1794350",
    "end": "1799840"
  },
  {
    "text": "the context in stock now if we zoom in a little bit in the requests in the notice",
    "start": "1799840",
    "end": "1806980"
  },
  {
    "start": "1801000",
    "end": "1842000"
  },
  {
    "text": "request but in the composable this is what we this is what we have so the request callback essentially",
    "start": "1806980",
    "end": "1815660"
  },
  {
    "text": "you when get the request you can use it or manipulate it and then you call them",
    "start": "1815660",
    "end": "1820790"
  },
  {
    "text": "the next guy in the chain then you can use it when manipulated as a result",
    "start": "1820790",
    "end": "1825940"
  },
  {
    "text": "every every one of these requests just returns incoming connection which is basically a structure that has the",
    "start": "1825940",
    "end": "1833000"
  },
  {
    "text": "structure that we already shot with all the IP addresses from context information depending of course on your",
    "start": "1833000",
    "end": "1838930"
  },
  {
    "text": "use case so if much time with the SDK we",
    "start": "1838930",
    "end": "1848510"
  },
  {
    "text": "currently have a couple of ratified composable so as we said the one of them",
    "start": "1848510",
    "end": "1854090"
  },
  {
    "text": "is the client then we have the connection we have IP address management and monitoring a little bit about IP",
    "start": "1854090",
    "end": "1862010"
  },
  {
    "text": "address management it essentially is a layer that is pre-configured with a subnet and then it splits it into",
    "start": "1862010",
    "end": "1869090"
  },
  {
    "text": "smaller slash 30 chains for ipv4 it all support ipv6 and kind of distributes IPs",
    "start": "1869090",
    "end": "1879470"
  },
  {
    "text": "for all the incoming connections for all the point-to-point connections this of course is optional it's not bind to the",
    "start": "1879470",
    "end": "1887480"
  },
  {
    "text": "two network service mesh if you want to use IP connectivity this is the composable that you should put in your",
    "start": "1887480",
    "end": "1893890"
  },
  {
    "text": "endpoints we this I mean explained like",
    "start": "1893890",
    "end": "1900530"
  },
  {
    "start": "1895000",
    "end": "1954000"
  },
  {
    "text": "this thing's probably look a bit scale and probably not really clear but we have in our network service mesh",
    "start": "1900530",
    "end": "1908240"
  },
  {
    "text": "examples repo on github we have a couple of examples we have simple I simply",
    "start": "1908240",
    "end": "1913970"
  },
  {
    "text": "responder which is just a couple of containers sending pings to each other because the same thing implemented with",
    "start": "1913970",
    "end": "1920180"
  },
  {
    "text": "my elf interfaces based on VPP running as a CNF we have the my interceptor",
    "start": "1920180",
    "end": "1927080"
  },
  {
    "text": "which it is going to show in two minutes we have a proxy which is essentially a",
    "start": "1927080",
    "end": "1933560"
  },
  {
    "text": "gateway a kind of HTTP reverse gateway 50 reverse proxy which serves as a",
    "start": "1933560",
    "end": "1939050"
  },
  {
    "text": "gateway to two network service mesh from the HTTP world and we have the security",
    "start": "1939050",
    "end": "1944780"
  },
  {
    "text": "thread which is essentially if you have seen already our story about Salah and the",
    "start": "1944780",
    "end": "1952210"
  },
  {
    "text": "DPN problems and here is the invoice",
    "start": "1952210",
    "end": "1958990"
  },
  {
    "start": "1954000",
    "end": "2034000"
  },
  {
    "text": "yeah so so to finish this up yeah so - so to finish this up one of the things",
    "start": "1958990",
    "end": "1965630"
  },
  {
    "text": "that we did recently is we added in all the way support and so one of the reasons we did this is envoy is layer 4",
    "start": "1965630",
    "end": "1971870"
  },
  {
    "text": "or 7 so it's probably more about how do you connect to an envoy system and so historically when you run envoy like a",
    "start": "1971870",
    "end": "1977990"
  },
  {
    "text": "misty or so on you get a bunch of sidecars and then that that exists and you run them alongside with that so what",
    "start": "1977990",
    "end": "1984980"
  },
  {
    "text": "we're looking at is well what if that envoy was something that was part of your was part of your infrastructure",
    "start": "1984980",
    "end": "1990650"
  },
  {
    "text": "itself and you connect it to envoy and rather than setting up an envoy with with each instance and so with this we",
    "start": "1990650",
    "end": "1998890"
  },
  {
    "text": "we created a simple envoy configuration so this one in our example so this this is actually not repository so you",
    "start": "1998890",
    "end": "2004900"
  },
  {
    "text": "actually get it into run it and and see it connect to envoy with the Envoy echo so when you open up a tcp/ip connection",
    "start": "2004900",
    "end": "2011410"
  },
  {
    "text": "with it it'll then respond back with anything that you that your right to it and the way that this ends up looking in",
    "start": "2011410",
    "end": "2018730"
  },
  {
    "text": "the destination is that the default matches matches is empty so it's a wild",
    "start": "2018730",
    "end": "2024250"
  },
  {
    "text": "card and then the destination in this scenario is the is the is the we see we",
    "start": "2024250",
    "end": "2030640"
  },
  {
    "text": "there's a slight tie but we put into the next maybe saccade way in there and so",
    "start": "2030640",
    "end": "2036730"
  },
  {
    "start": "2034000",
    "end": "2069000"
  },
  {
    "text": "it works in the same way and it establishes the in the container gets you access to the on Vuli envoy doesn't",
    "start": "2036730",
    "end": "2042790"
  },
  {
    "text": "odd way does not support the shared",
    "start": "2042790",
    "end": "2048310"
  },
  {
    "text": "memory interface at this time so one things that we do is we've used the IP tables out of out of envoy in order to",
    "start": "2048310",
    "end": "2054280"
  },
  {
    "text": "reconfigure the the in order to redirect everything to the to the port and so I",
    "start": "2054280",
    "end": "2061840"
  },
  {
    "text": "don't think we have time to show it at the at the MoMA yeah so yeah so so we're gonna be",
    "start": "2061840",
    "end": "2070690"
  },
  {
    "text": "meeting today at 2:30 as well so if you have any questions on this I come come over and ask us the three of us should",
    "start": "2070690",
    "end": "2075940"
  },
  {
    "text": "all be there Nikolai's Ben also talked about it at his at his booth on Thursday from 10:30",
    "start": "2075940",
    "end": "2082450"
  },
  {
    "text": "to 12:30 so yet could come feel free to talk with any of us afterwards so if you",
    "start": "2082450",
    "end": "2088118"
  },
  {
    "text": "have any questions on it or wanting clarifications or so on we'll be happy to to talk to you about it thank you",
    "start": "2088119",
    "end": "2097200"
  },
  {
    "text": "[Applause]",
    "start": "2098920",
    "end": "2102849"
  }
]