[
  {
    "text": "thank you okay I can hear my mic is should work so welcome everyone um",
    "start": "599",
    "end": "6359"
  },
  {
    "text": "Welcome to our tanos introduction slash some Trends some SL SL some updates and",
    "start": "6359",
    "end": "13440"
  },
  {
    "text": "live demo presentation we are super excited to be here and and really yeah",
    "start": "13440",
    "end": "18480"
  },
  {
    "text": "meet all the people like sometimes in person like I I met Ben in person for the first time as well even though we",
    "start": "18480",
    "end": "24279"
  },
  {
    "text": "were working for like two years almost in the community so it's amazing to be to be in person here so",
    "start": "24279",
    "end": "30519"
  },
  {
    "text": "welcome um so I have Ben with me today and so thank you BK so this is Ben",
    "start": "30519",
    "end": "37840"
  },
  {
    "text": "year and uh I'm a software development engineer at AWS and I'm one of the",
    "start": "37840",
    "end": "43280"
  },
  {
    "text": "maintainer of the Sonos project and I'm also contributors to some cncf projects",
    "start": "43280",
    "end": "48640"
  },
  {
    "text": "like cortex premisus ago CD Etc and I have a papy called",
    "start": "48640",
    "end": "55640"
  },
  {
    "text": "GUI thank you yeah my name is uh B PKA you can call me BK I principal software",
    "start": "55640",
    "end": "60879"
  },
  {
    "text": "engineer at Red Hat I maintainer of various projects including promus and tanos lots of go line projects as well",
    "start": "60879",
    "end": "68439"
  },
  {
    "text": "and uh I'm active in the cncf I also recently have my puppy is purple Heron",
    "start": "68439",
    "end": "73880"
  },
  {
    "text": "because I wrote a book uh it's finished is being published in November so pretty soon you can pre-order it now it's",
    "start": "73880",
    "end": "80479"
  },
  {
    "text": "efficient go uh about you know how to write efficient goang but really it's also language agnostic how to have a",
    "start": "80479",
    "end": "87479"
  },
  {
    "text": "good observability driven practices over towards better efficiency of your",
    "start": "87479",
    "end": "92600"
  },
  {
    "text": "Solutions um but yeah let's really start with just introducing tanos um maybe you",
    "start": "92600",
    "end": "98479"
  },
  {
    "text": "know what tanos is maybe not um maybe yeah let's ask like how please raise a hand if you know what what tannos",
    "start": "98479",
    "end": "104439"
  },
  {
    "text": "project is well actually amazing yeah so maybe it will be just um reiteration or",
    "start": "104439",
    "end": "110439"
  },
  {
    "text": "maybe you will learn something new so I will let Ben to to introduce tanos right now thanks",
    "start": "110439",
    "end": "117159"
  },
  {
    "text": "spk so to introduce tanos uh let's start with the story of uh premisus first",
    "start": "117159",
    "end": "124200"
  },
  {
    "text": "premisus is a monitoring system that is mainly inspired by Google bormon so with",
    "start": "124200",
    "end": "129599"
  },
  {
    "text": "premisus we are providing a highly reliable easy to operate monitoring solution and it's just a single binary",
    "start": "129599",
    "end": "136360"
  },
  {
    "text": "but it provides very uh many powerful features like data scraping querying",
    "start": "136360",
    "end": "141760"
  },
  {
    "text": "using very flexible promql and alerting and uh but premisus comes with its own",
    "start": "141760",
    "end": "149519"
  },
  {
    "text": "problem because uh it somewhat lacks scalability and high availability and",
    "start": "149519",
    "end": "156200"
  },
  {
    "text": "here this brings us to Thanos which is a distributed premisus and Thanos is more",
    "start": "156200",
    "end": "162800"
  },
  {
    "text": "High scalable and horizontally um premisus it provides a global view for",
    "start": "162800",
    "end": "168760"
  },
  {
    "text": "querying multiple premisus at the same time instead of using a local disk as",
    "start": "168760",
    "end": "174560"
  },
  {
    "text": "premisus it uses object storage like S3 to store long-term data and it also",
    "start": "174560",
    "end": "180720"
  },
  {
    "text": "offers some other features like down sampling and multi-",
    "start": "180720",
    "end": "186200"
  },
  {
    "text": "tenacy then let's speak about uh the Thanos community and Thanos now is an",
    "start": "186440",
    "end": "192360"
  },
  {
    "text": "cncf uh incubating project it was open sourced by improbable since um",
    "start": "192360",
    "end": "197959"
  },
  {
    "text": "2017 and SOS has a Vibrant Community and now we have over um 490 contributors and",
    "start": "197959",
    "end": "205840"
  },
  {
    "text": "over um 3,700 users on our slack Channel and we also have over uh 11k GitHub",
    "start": "205840",
    "end": "214840"
  },
  {
    "text": "stars and we have also many adopters and a lot of users are quite happy about SOS",
    "start": "214840",
    "end": "220920"
  },
  {
    "text": "project so if your company is also using SOS right now and not in our adoptor",
    "start": "220920",
    "end": "226200"
  },
  {
    "text": "list feel free to open PR upstream and we are really happy to have",
    "start": "226200",
    "end": "231959"
  },
  {
    "text": "you so after talking about the SOS Community let's do some deep dive on",
    "start": "231959",
    "end": "238400"
  },
  {
    "text": "some uh SOS internet so let's get back to prus first as I",
    "start": "238400",
    "end": "244079"
  },
  {
    "text": "just mentioned premisus is just a single binary but it has multiple components",
    "start": "244079",
    "end": "249319"
  },
  {
    "text": "providing some essential functionalities right for example we have query engine script engine and an engine for Rule and",
    "start": "249319",
    "end": "257079"
  },
  {
    "text": "alert evaluation and some tsdb component like",
    "start": "257079",
    "end": "262919"
  },
  {
    "text": "compactor so um to on Tunnel we want to",
    "start": "262919",
    "end": "268320"
  },
  {
    "text": "scare more on the qu path first so we extract the quar engine to a separate",
    "start": "268320",
    "end": "273880"
  },
  {
    "text": "component called tunnel querer so that we can make it horizontally scalable and next for the script engine",
    "start": "273880",
    "end": "281919"
  },
  {
    "text": "we keeps using uh the original premesis one but in this case we deploy a tun of",
    "start": "281919",
    "end": "287560"
  },
  {
    "text": "side car components closely to the premises so that we can get a globally quy View and uh in order to scare more",
    "start": "287560",
    "end": "296000"
  },
  {
    "text": "on the rule and alert engine we have tunel ruler with us so as you can see with these",
    "start": "296000",
    "end": "304000"
  },
  {
    "text": "components I just mentioned we got the uh simplest tunnel deployment model",
    "start": "304000",
    "end": "309680"
  },
  {
    "text": "which is called uh sard deployment so with this model we can have um a highly",
    "start": "309680",
    "end": "315560"
  },
  {
    "text": "available premisus and also a global view for quiring and",
    "start": "315560",
    "end": "320639"
  },
  {
    "text": "alerting and actually we can extend more uh on this model um like one issue with",
    "start": "320639",
    "end": "327520"
  },
  {
    "text": "premisus is that premisus uses local disk to store time series data although",
    "start": "327520",
    "end": "334280"
  },
  {
    "text": "um local disk works for most user cases it um have some issue when we want to",
    "start": "334280",
    "end": "340400"
  },
  {
    "text": "store data in a very long retention uh time period and um in this case object",
    "start": "340400",
    "end": "346840"
  },
  {
    "text": "storage is usually a better solution because it's uh easily scalable so we",
    "start": "346840",
    "end": "352440"
  },
  {
    "text": "can uh control the size and also it's it's much much cheaper so we have the",
    "start": "352440",
    "end": "357919"
  },
  {
    "text": "Thanos T car component with us and it can upload the TSB blocks to the object",
    "start": "357919",
    "end": "364280"
  },
  {
    "text": "storage every two hours and uh in order to quir the data from the object storage",
    "start": "364280",
    "end": "370479"
  },
  {
    "text": "we have a new component called store Gateway and uh uh in order to make our",
    "start": "370479",
    "end": "376919"
  },
  {
    "text": "long-term quiry more efficient we have a component called stos compactor which um",
    "start": "376919",
    "end": "383479"
  },
  {
    "text": "improves the quired performance by merging blocks together so we have another mode which",
    "start": "383479",
    "end": "390560"
  },
  {
    "text": "is uh side cardless or we usually call it receiver mode so in this mode you can",
    "start": "390560",
    "end": "396639"
  },
  {
    "text": "have your metrix collector to push metrics to SOS receivers using remote",
    "start": "396639",
    "end": "401960"
  },
  {
    "text": "ride protocol so this could be useful if your network topology has some",
    "start": "401960",
    "end": "407599"
  },
  {
    "text": "limitations to the P model or if you just want to have a central place to",
    "start": "407599",
    "end": "412759"
  },
  {
    "text": "store or Quire your metrics so that's the introduction about",
    "start": "412759",
    "end": "418440"
  },
  {
    "text": "Thanos and next I will hand it over to BK to talk about the recent trend of",
    "start": "418440",
    "end": "424400"
  },
  {
    "text": "running observability as a service thank you Ben um yeah so you know with those",
    "start": "424400",
    "end": "431319"
  },
  {
    "text": "components you seen where what Ben explained we have like very flexible model Inns of how you can kind of use it",
    "start": "431319",
    "end": "438120"
  },
  {
    "text": "for what use cases you have it kind of you know kind of fits your needs um however with all the users using it in",
    "start": "438120",
    "end": "444800"
  },
  {
    "text": "different scenarios we saw a certain pattern which which kind of like maybe",
    "start": "444800",
    "end": "450360"
  },
  {
    "text": "you know um motivated us to prioritize C certain feature and I would like to uh talk about that and really what what it",
    "start": "450360",
    "end": "457080"
  },
  {
    "text": "can be called is observability as a service so what I mean is that you know in the past when maybe there was no",
    "start": "457080",
    "end": "463280"
  },
  {
    "text": "Thanos you used to solve your monitoring needs with just prome and it was probably you know solving majority of",
    "start": "463280",
    "end": "469680"
  },
  {
    "text": "your cases and you generally put prome next to your processes next to your workloads and you have like buil-in",
    "start": "469680",
    "end": "476440"
  },
  {
    "text": "alerting and and quering and dashboarding dashboard boing and like um this reach record system um you know can",
    "start": "476440",
    "end": "483319"
  },
  {
    "text": "can can solve uh many many of your monitoring needs however with cloud and if community and bringing more",
    "start": "483319",
    "end": "489479"
  },
  {
    "text": "communities you an easier way to install and distribute those communities clusters we kind of tend to um really uh",
    "start": "489479",
    "end": "497199"
  },
  {
    "text": "use communities or clusters as a cattle not as a pad so we have more of them so in this case you might want to scale",
    "start": "497199",
    "end": "504000"
  },
  {
    "text": "this solution into something that supports you know multiple clusters in this case you know Thanos was created to",
    "start": "504000",
    "end": "510159"
  },
  {
    "text": "allow you you know perform queries distributed you know against distributed kind of storage um so for example you",
    "start": "510159",
    "end": "516880"
  },
  {
    "text": "could keep your data in prit uses and still use tanos sarer in maybe remote location to have something we call",
    "start": "516880",
    "end": "523240"
  },
  {
    "text": "global view so essentially you you are able to aggregate data uh with multiple",
    "start": "523240",
    "end": "529279"
  },
  {
    "text": "sources from multiple sources um however you know if you are maybe power user if",
    "start": "529279",
    "end": "534880"
  },
  {
    "text": "you have a certain use cases you might want to opt in into something called like receiver mode where we are kind of",
    "start": "534880",
    "end": "541600"
  },
  {
    "text": "trying to offload as much of data from uh prome uses and as soon as possible as",
    "start": "541600",
    "end": "547360"
  },
  {
    "text": "prome scrapes them try to send them to remote location so the the the kind of like client side like cluster side is",
    "start": "547360",
    "end": "554360"
  },
  {
    "text": "kind of cheap and like as as you know simplest as possible and and you kind of",
    "start": "554360",
    "end": "559839"
  },
  {
    "text": "we have like standards and protocols to to do to do so and then you kind of have a bit more complex um kind of",
    "start": "559839",
    "end": "566839"
  },
  {
    "text": "architecture on the cluster side but it's kind of like only one cluster that has this complexity and you could put",
    "start": "566839",
    "end": "572360"
  },
  {
    "text": "all the data there and and and do your allergy and monitoring from from this place and this is where you know Thanos",
    "start": "572360",
    "end": "578560"
  },
  {
    "text": "allows that as well if you want and with this approach we saw that it kind of got",
    "start": "578560",
    "end": "583880"
  },
  {
    "text": "popular in a sense that many users switch or like run hybrid solutions that",
    "start": "583880",
    "end": "589040"
  },
  {
    "text": "have both you know um this pool model with sidecar as well as receiver model",
    "start": "589040",
    "end": "594800"
  },
  {
    "text": "however we we seen kind of like some pattern where you know companies and large corporations tries to compose this",
    "start": "594800",
    "end": "601360"
  },
  {
    "text": "kind of cluster side observability into like abstraction into some Cloud right",
    "start": "601360",
    "end": "606839"
  },
  {
    "text": "um Cloud that you know as from user perspective they only you know the the your teams that maybe developers or SES",
    "start": "606839",
    "end": "613760"
  },
  {
    "text": "who are managing your applications they don't need to know exactly if you are using tanos or cortex or some vendor you",
    "start": "613760",
    "end": "620200"
  },
  {
    "text": "can kind of like e the switch as well as long as you use maybe prome or open Telemetry or some kind of standard you",
    "start": "620200",
    "end": "626640"
  },
  {
    "text": "know you can uh totally you know switch and kind of like stream the data into",
    "start": "626640",
    "end": "631680"
  },
  {
    "text": "some cloud and just you know you expect this to have alerting and you you expect this to have some promql queries and",
    "start": "631680",
    "end": "638959"
  },
  {
    "text": "your com you know your company is much then easier or your organization might might be kind of like much more um",
    "start": "638959",
    "end": "645120"
  },
  {
    "text": "convenient to you know run the applications because those those te doesn't have to understand you know necessarily how observability has to",
    "start": "645120",
    "end": "651800"
  },
  {
    "text": "work so this is kind of very popular nowadays and we kind of acknowledge that as a Thanos team and we want to",
    "start": "651800",
    "end": "657920"
  },
  {
    "text": "prioritize certain as aspects of the system that makes it easier and we kind of can categorize three things",
    "start": "657920",
    "end": "664480"
  },
  {
    "text": "multi-tenancy H with isolation and quality of service because at the end you want to you know kind of have maybe",
    "start": "664480",
    "end": "671680"
  },
  {
    "text": "dedicated observ obser uh observability team that is focused just on maintaining",
    "start": "671680",
    "end": "677000"
  },
  {
    "text": "operating the system and then um that means you probably have different users from different teams that doesn't",
    "start": "677000",
    "end": "683040"
  },
  {
    "text": "necessarily need to see each other metric or perhaps maybe you have a secret team that doesn't that sh that",
    "start": "683040",
    "end": "689160"
  },
  {
    "text": "kind of have metrics that are somehow colocated to the user so you don't want to kind of you know leak those and and",
    "start": "689160",
    "end": "696240"
  },
  {
    "text": "let other maybe not admin users to see that data so multi is very strong uh",
    "start": "696240",
    "end": "701760"
  },
  {
    "text": "important reason why we kind of yeah um I mean important important characteristic of such system",
    "start": "701760",
    "end": "707440"
  },
  {
    "text": "reliability is another part like if you want to have a dedicated service usually in organization we end up building a lot",
    "start": "707440",
    "end": "714000"
  },
  {
    "text": "of services that depend on this observability so if you want to alert from that place it has to have have a",
    "start": "714000",
    "end": "719399"
  },
  {
    "text": "lot of nines into your SLO so it means it have to be reliable so that's kind of another part where we're trying to",
    "start": "719399",
    "end": "724920"
  },
  {
    "text": "prioritize uh as a as a team as a community finally scalability and",
    "start": "724920",
    "end": "730120"
  },
  {
    "text": "efficiency right like of course I we can we can you know told you from our prac from our experience once you start this",
    "start": "730120",
    "end": "737279"
  },
  {
    "text": "idea hey you have this service and you can just use it at a tenant and just send our some metrics and then query",
    "start": "737279",
    "end": "743399"
  },
  {
    "text": "them like there are so many internal teams that starts to want to use it right and we have that in redhead as well it's like immediately they would",
    "start": "743399",
    "end": "749600"
  },
  {
    "text": "like to push to you like billions of series because it's internal so they can of pay for that which kind of the same",
    "start": "749600",
    "end": "755160"
  },
  {
    "text": "company and so you end up having like very very high scale very quickly so we want to make sure this solution is is is",
    "start": "755160",
    "end": "761320"
  },
  {
    "text": "is kind of efficient and cheap to use right uh and we want to make sure tanos is um yeah is is kind of like fulfilling",
    "start": "761320",
    "end": "768480"
  },
  {
    "text": "those those use cases so let's spend a little bit time on on going through various latest kind of improvements in",
    "start": "768480",
    "end": "774800"
  },
  {
    "text": "this area um so I will let Ben to mention some of those yeah thank sptech",
    "start": "774800",
    "end": "780240"
  },
  {
    "text": "so let me give uh some updates about the recent uh Improvement we made for",
    "start": "780240",
    "end": "786920"
  },
  {
    "text": "tunnels so the first thing uh I want to talk about is uh called bucket prefix so",
    "start": "786920",
    "end": "792560"
  },
  {
    "text": "this is one of the oldest feature request in the SOS Community since I think",
    "start": "792560",
    "end": "798760"
  },
  {
    "text": "2018 yeah and um so with custom uh bucket prefix we can have a Bucket Level",
    "start": "798760",
    "end": "805440"
  },
  {
    "text": "multi-tenancy by default and each tenant can have their uh own data under its",
    "start": "805440",
    "end": "810959"
  },
  {
    "text": "bucket prefix so we only need uh one bucket to hold all the data and uh yeah thanks for the uh",
    "start": "810959",
    "end": "818760"
  },
  {
    "text": "awesome tunnel community's contribution we finally have this feature landed in the uh v0 2018.0 release so to enable it",
    "start": "818760",
    "end": "828399"
  },
  {
    "text": "it's very simple we just need to add one more line to the object storage configuration file uh as it shows in",
    "start": "828399",
    "end": "835839"
  },
  {
    "text": "this picture so yeah it's just one line of configuration",
    "start": "835839",
    "end": "840759"
  },
  {
    "text": "and uh yeah next feature um I want to talk about is about uh re limiting so uh",
    "start": "841000",
    "end": "847440"
  },
  {
    "text": "as BK just mentioned we are uh running uh like tunnels in observability as a",
    "start": "847440",
    "end": "852880"
  },
  {
    "text": "service mode so yeah usually it comes with multi- tendency right and if we are",
    "start": "852880",
    "end": "858279"
  },
  {
    "text": "talking about multi- tendency we usually means uh soft tendency because we want to uh reduce cost we want to save money",
    "start": "858279",
    "end": "865560"
  },
  {
    "text": "so we use soft tendency but also means it uh our all our tenants they are going",
    "start": "865560",
    "end": "872480"
  },
  {
    "text": "to share the same uh physical clusters together right so if we have some uh",
    "start": "872480",
    "end": "877759"
  },
  {
    "text": "over overlay abused tenants or they are sending uh a huge amount of traffic to",
    "start": "877759",
    "end": "884120"
  },
  {
    "text": "protect our service and to protect our other tenants uh we want to maintain our",
    "start": "884120",
    "end": "890320"
  },
  {
    "text": "quality of service so real limiting is really really important and again it's",
    "start": "890320",
    "end": "895360"
  },
  {
    "text": "not just uh real limiting so actually it applies to all limits all General",
    "start": "895360",
    "end": "901360"
  },
  {
    "text": "limits so for the um limits Improvement we added two tunnels um we have recently",
    "start": "901360",
    "end": "908120"
  },
  {
    "text": "added those features here and the first one I want to mention is about remote ride limits so we added four limits here",
    "start": "908120",
    "end": "915880"
  },
  {
    "text": "um one is the request size and also uh the number of uh series and samples per",
    "start": "915880",
    "end": "922000"
  },
  {
    "text": "remote right request and also the maximum number of U concurrent requests here and uh another interesting limit I",
    "start": "922000",
    "end": "929720"
  },
  {
    "text": "want to talk about is uh about the active series limit so why active series is an important limit so in premisus",
    "start": "929720",
    "end": "937519"
  },
  {
    "text": "tsdb active series means the number of uh Series in the tsb's uh head block and",
    "start": "937519",
    "end": "944720"
  },
  {
    "text": "they are all in memory so the more active series we have the more memory we",
    "start": "944720",
    "end": "950000"
  },
  {
    "text": "are going to use so we want to um avoid or we want to limit this metric to avoid",
    "start": "950000",
    "end": "956560"
  },
  {
    "text": "high cality and to avoid our service being o om killed but anyway we can like",
    "start": "956560",
    "end": "963079"
  },
  {
    "text": "scale up more like to uh to a better machine right to use more memory but",
    "start": "963079",
    "end": "968120"
  },
  {
    "text": "it's not uh cost efficient right so we this kind of uh limit is super important",
    "start": "968120",
    "end": "974160"
  },
  {
    "text": "for us and to get the number of series uh usage per tenant it's not that easy",
    "start": "974160",
    "end": "981000"
  },
  {
    "text": "because uh we cannot EAS get it locally for each tunnel receiver because each",
    "start": "981000",
    "end": "986199"
  },
  {
    "text": "Tenn data are spread across um the whole receiver clusters and also we have uh",
    "start": "986199",
    "end": "992519"
  },
  {
    "text": "date replication feature enabled so usually we write uh three 3x more um",
    "start": "992519",
    "end": "998600"
  },
  {
    "text": "serious so it's not easy to do the calculation from the a single receiver",
    "start": "998600",
    "end": "1003839"
  },
  {
    "text": "but to solve this we simply uh we have a a solution which simply asks uh a meta",
    "start": "1003839",
    "end": "1010000"
  },
  {
    "text": "monitoring solution for example the premisus running in the same clusters that monitors your tunnels by querying",
    "start": "1010000",
    "end": "1017759"
  },
  {
    "text": "that premisus we can get um the current tent series usage by some",
    "start": "1017759",
    "end": "1024079"
  },
  {
    "text": "metrix so yeah that's how we solve it and um yeah next uh let's talk about",
    "start": "1024079",
    "end": "1031720"
  },
  {
    "text": "one scalability Improvement we made for hashing so um like the SOS receiver",
    "start": "1031720",
    "end": "1038959"
  },
  {
    "text": "component it uses hashing but previously the SOS receiver was simply using hash mode to distribute series for example uh",
    "start": "1038959",
    "end": "1047480"
  },
  {
    "text": "let's say we have this example series here and we have uh three receiver replicas and based on the hash mode",
    "start": "1047480",
    "end": "1054679"
  },
  {
    "text": "calculations the destination would be on receiver two but if we scale out more we increase",
    "start": "1054679",
    "end": "1062400"
  },
  {
    "text": "one more receiver in this case the hash mod value it would become zero and uh",
    "start": "1062400",
    "end": "1068600"
  },
  {
    "text": "this is super bad because with this naive hash mod hash mode calculation",
    "start": "1068600",
    "end": "1074160"
  },
  {
    "text": "each time when we change the number of servers almost every series will be mapped to different instances so this is",
    "start": "1074160",
    "end": "1082400"
  },
  {
    "text": "yeah to me I totally wrong and it will keep some issue like high cardinality as",
    "start": "1082400",
    "end": "1087640"
  },
  {
    "text": "well because we will have more series more active Series in the head",
    "start": "1087640",
    "end": "1092760"
  },
  {
    "text": "block so to solve this what we really need is consistent hashing so thanks for",
    "start": "1092760",
    "end": "1098320"
  },
  {
    "text": "the awesome blog post written by damiel griny so we implement the katama hashing",
    "start": "1098320",
    "end": "1104320"
  },
  {
    "text": "here uh in the yeah recent tunnels release so if you are interested in the",
    "start": "1104320",
    "end": "1109559"
  },
  {
    "text": "details please do check out this uh blog post and um yeah that's uh pretty much",
    "start": "1109559",
    "end": "1117280"
  },
  {
    "text": "about the Improvement I want to introduce but next I will hand it over to BK to talk about the really exciting",
    "start": "1117280",
    "end": "1124960"
  },
  {
    "text": "quir efficiency improvements thanks a lot I hope it's exciting yeah so I mean Ben already",
    "start": "1124960",
    "end": "1131679"
  },
  {
    "text": "mentioned you know reliability improvements and multitenancy improvements so last thing that we should improve is of course scalability",
    "start": "1131679",
    "end": "1137360"
  },
  {
    "text": "and efficiency and there's always something to improve there's always a better way to to to do things and and",
    "start": "1137360",
    "end": "1143159"
  },
  {
    "text": "have it cheaper so let's dive into what we are kind of enabling here um so you",
    "start": "1143159",
    "end": "1148360"
  },
  {
    "text": "know generally we have from the past like very simplistic solution for querying you we discuss like different",
    "start": "1148360",
    "end": "1155919"
  },
  {
    "text": "kind of uh storages which we kind of hide behind grpc API we call it story",
    "start": "1155919",
    "end": "1161200"
  },
  {
    "text": "API so those store API leaves uh could be your prome and side car could be your",
    "start": "1161200",
    "end": "1166919"
  },
  {
    "text": "store Gateway could be your reer could be a ruler and all of them allows us to fetch some data from multiple um places",
    "start": "1166919",
    "end": "1175080"
  },
  {
    "text": "like different storages and so on so what we want to do in term to achieve this Global query is to put the prom",
    "start": "1175080",
    "end": "1181159"
  },
  {
    "text": "quel engine so actual the key part that computes and and gets the storage data",
    "start": "1181159",
    "end": "1186480"
  },
  {
    "text": "and puts that into your uh prom result as is the is the prom that we actually",
    "start": "1186480",
    "end": "1192000"
  },
  {
    "text": "prom engine that we put into querer microservice and we Lally import prom to use code right so so it's one to1 the",
    "start": "1192000",
    "end": "1198520"
  },
  {
    "text": "same and it kind of works you put for example I have an example query here",
    "start": "1198520",
    "end": "1203559"
  },
  {
    "text": "it's just a count aggregation of count aggregation of some Metric for two days and you can see it simply takes all the",
    "start": "1203559",
    "end": "1210280"
  },
  {
    "text": "data from the storage it needs two days for this metric right so what's a problem of this is that this is a single",
    "start": "1210280",
    "end": "1216480"
  },
  {
    "text": "point of failure and that to to answer any question any arbitrary promql we",
    "start": "1216480",
    "end": "1221600"
  },
  {
    "text": "have to pull all of this data into memory and um it's just not very cost",
    "start": "1221600",
    "end": "1227159"
  },
  {
    "text": "effective and of course is hard to scale so in order to scale it we had to kind of do some improvements so first of all",
    "start": "1227159",
    "end": "1234200"
  },
  {
    "text": "comes from the community and thanks to the cor cortex and cortex kind of team and project we kind of borrowed their",
    "start": "1234200",
    "end": "1240679"
  },
  {
    "text": "their idea of the square front end microservice and other microservice that sits on top and talk to the queriers and",
    "start": "1240679",
    "end": "1247039"
  },
  {
    "text": "essentially it has lots of different transformations of the promql that you pass that one of them is is to kind of",
    "start": "1247039",
    "end": "1253679"
  },
  {
    "text": "split split by day or split by any time so which means that for example our query for two days could be split into",
    "start": "1253679",
    "end": "1260360"
  },
  {
    "text": "two queries for one day and we can distribute that into one querier and just run with multiple course H or",
    "start": "1260360",
    "end": "1267880"
  },
  {
    "text": "distribute into uh into like totally different machines so we achieve some kind of horizontal scalability with this",
    "start": "1267880",
    "end": "1274640"
  },
  {
    "text": "and then you know storage calls are also distributed because we we ask more and smaller qu smaller queries um the",
    "start": "1274640",
    "end": "1281200"
  },
  {
    "text": "problem with this approach is still um we can get uh you know kind of slow and",
    "start": "1281200",
    "end": "1286400"
  },
  {
    "text": "expensive uh you know boxes of the querer because imagine if this metric",
    "start": "1286400",
    "end": "1292200"
  },
  {
    "text": "even for one day gives me like 1 Million results 1 million T Series so I have to pull into memory one million time series",
    "start": "1292200",
    "end": "1298520"
  },
  {
    "text": "for this one day and and and still have to do it and still I cannot really scale that so for for those reasons we started",
    "start": "1298520",
    "end": "1306000"
  },
  {
    "text": "a lot of initiatives and um you know we had a talk earlier this year in Valencia",
    "start": "1306000",
    "end": "1311200"
  },
  {
    "text": "from um moad and Philip um how to distribute those queries even more efficiently so the two solutions we",
    "start": "1311200",
    "end": "1317360"
  },
  {
    "text": "added uh for portion of the queries is first is push down so what push down is",
    "start": "1317360",
    "end": "1322919"
  },
  {
    "text": "doing is essentially trying to um you know for certain queries be able to not",
    "start": "1322919",
    "end": "1328600"
  },
  {
    "text": "um really fetch all the series from Storage but really calculate certain aggregation which which is possible for",
    "start": "1328600",
    "end": "1334679"
  },
  {
    "text": "some aggregations calculate the results directly near the storage for example a store Gateway could be you know when you",
    "start": "1334679",
    "end": "1341159"
  },
  {
    "text": "count when you when you ask for count for a certain metric the the storage itself store Gateway can calculate me",
    "start": "1341159",
    "end": "1347120"
  },
  {
    "text": "the count so instead of giving me one million series it gives me one Series right so so it's much more cheaper on",
    "start": "1347120",
    "end": "1353400"
  },
  {
    "text": "the network side um and and it can what additional part is that we can kind of",
    "start": "1353400",
    "end": "1358679"
  },
  {
    "text": "Shard this work easier and and make it more concurent right um so so this is",
    "start": "1358679",
    "end": "1363880"
  },
  {
    "text": "what what what pushdown is doing and it's enabled for some uh for some uh computations especially against promit",
    "start": "1363880",
    "end": "1370760"
  },
  {
    "text": "side car um and by the way because promus has a prom cool engine so we can kind of",
    "start": "1370760",
    "end": "1376440"
  },
  {
    "text": "offload that execution there there now another point that actually solve this kind of uh sharding or only horizontal",
    "start": "1376440",
    "end": "1384000"
  },
  {
    "text": "sharding uh horizontal sharding means by time we had that but we wanted to introduce something better on the",
    "start": "1384000",
    "end": "1389480"
  },
  {
    "text": "vertical side so maybe we should split a quaring a computation into multiple pieces within one day for example and",
    "start": "1389480",
    "end": "1396520"
  },
  {
    "text": "this is what query sharding is doing it's already enabled um maybe by by flag",
    "start": "1396520",
    "end": "1401559"
  },
  {
    "text": "or or but like yeah it's kind of like um also it's not possible every query so we",
    "start": "1401559",
    "end": "1407000"
  },
  {
    "text": "have to be careful here um but generally if you enable it you can have you know we essentially Split",
    "start": "1407000",
    "end": "1412400"
  },
  {
    "text": "For example one query into four queries because it splits by day into two and then those one day queries can be split",
    "start": "1412400",
    "end": "1418720"
  },
  {
    "text": "for example by two by simply kind ofer hash mode on on a series and how we",
    "start": "1418720",
    "end": "1424360"
  },
  {
    "text": "aggregate them uh together this is not very easy if you do average for example because you cannot average of averages",
    "start": "1424360",
    "end": "1431120"
  },
  {
    "text": "is not the same as uh and average of that is not the same as average of the all the all the sour all the sources so",
    "start": "1431120",
    "end": "1437480"
  },
  {
    "text": "we have to to be very careful but there are some optimizations you can make with that and I've already improved the",
    "start": "1437480",
    "end": "1442600"
  },
  {
    "text": "scalability of the storage queries as well because there are more of them and just smaller however hopefully you see",
    "start": "1442600",
    "end": "1449039"
  },
  {
    "text": "certain patterns so we have some magic some push down on the stores store apis",
    "start": "1449039",
    "end": "1454520"
  },
  {
    "text": "and you know there's some magic there some complexity we add then there is a big Magic on query front end we have",
    "start": "1454520",
    "end": "1460120"
  },
  {
    "text": "some complexity to Shard to to transform queries I don't know if you see the pattern but there is a pattern why we",
    "start": "1460120",
    "end": "1465799"
  },
  {
    "text": "are not improving the promql engine self and uh we the truth is we were a little",
    "start": "1465799",
    "end": "1471520"
  },
  {
    "text": "bit scared of it right it was a kind of like um you know multiple years um a I",
    "start": "1471520",
    "end": "1477679"
  },
  {
    "text": "mean old code and and and and kind of like very intrigued very optimized for a promit use it was designed to run only",
    "start": "1477679",
    "end": "1485200"
  },
  {
    "text": "one one CPU core maximum so it was not concurrent um I mean at least not not",
    "start": "1485200",
    "end": "1490600"
  },
  {
    "text": "the way we we would want it so it was it was simple it was amazing uh but perhaps there's a way to attack this and and",
    "start": "1490600",
    "end": "1496960"
  },
  {
    "text": "open open open this Panora box so this is what we'll be talking in two weeks in",
    "start": "1496960",
    "end": "1502000"
  },
  {
    "text": "PR on promcon in Munich so if you want to I think there should be still tickets for that so join us there we'll be",
    "start": "1502000",
    "end": "1507640"
  },
  {
    "text": "talking about that with Philip uh but I shortly would like to show you and and get you excited about this stuff because",
    "start": "1507640",
    "end": "1513120"
  },
  {
    "text": "I am so first of all like we have this is like a dropin replacement from promql engine so you can totally use it in",
    "start": "1513120",
    "end": "1519440"
  },
  {
    "text": "Thanos even it's in Thanos Community organization uh promql engine project",
    "start": "1519440",
    "end": "1524600"
  },
  {
    "text": "it's you know open source contributions are welcome we already have bunch of projects not only Thanos contributing to",
    "start": "1524600",
    "end": "1530559"
  },
  {
    "text": "that um why it's amazing so first of all it is based on volcano design which is",
    "start": "1530559",
    "end": "1535919"
  },
  {
    "text": "behind you know multiple proper mat SQL engines and uh it allows essentially",
    "start": "1535919",
    "end": "1542159"
  },
  {
    "text": "nice framework of operators for for different execution uh Parts uh for for",
    "start": "1542159",
    "end": "1548120"
  },
  {
    "text": "example for aggregation we have another operator and for storage selection we have for scan of storage we have another",
    "start": "1548120",
    "end": "1554000"
  },
  {
    "text": "operator and then it allows us to move those part parts around for optimizations or really understanding",
    "start": "1554000",
    "end": "1560159"
  },
  {
    "text": "what's happening inside it also allows for nice concurrency so you know if you",
    "start": "1560159",
    "end": "1565640"
  },
  {
    "text": "can see that existing SQL engine is very popular to have those query planners and",
    "start": "1565640",
    "end": "1570760"
  },
  {
    "text": "optimization optimizers so usually you you pass your query for example prom",
    "start": "1570760",
    "end": "1575840"
  },
  {
    "text": "query into logical plan you optimize that and then you you you you prepare physical plan and optimize that and only",
    "start": "1575840",
    "end": "1582600"
  },
  {
    "text": "then you execute the query we never had this before right and and this is good opportunity to add those things where we",
    "start": "1582600",
    "end": "1588720"
  },
  {
    "text": "can do informed optimizations so this is like production production well this is",
    "start": "1588720",
    "end": "1593960"
  },
  {
    "text": "a promol engine code we literally already do that we create a logical plan we optimize logical plan we then add",
    "start": "1593960",
    "end": "1601240"
  },
  {
    "text": "physical plan and and optimize that as well and then actually we it's not everything implemented we just started",
    "start": "1601240",
    "end": "1607039"
  },
  {
    "text": "this project month ago so um so we fall back to Old engine uh if there is",
    "start": "1607039",
    "end": "1612240"
  },
  {
    "text": "anything we don't support so you could run this on production and we run this in Production Red Hat in and shoing ify",
    "start": "1612240",
    "end": "1618600"
  },
  {
    "text": "um a lot so so so I recommend you to try it out another cool stuff is that you",
    "start": "1618600",
    "end": "1624520"
  },
  {
    "text": "know there are cool explain views in you know SQL Lang language and I was missing",
    "start": "1624520",
    "end": "1629760"
  },
  {
    "text": "that in in uh in promql especially when we introduce those you know uh operators",
    "start": "1629760",
    "end": "1635159"
  },
  {
    "text": "so we uh we want to add that so let's me let me now start",
    "start": "1635159",
    "end": "1640279"
  },
  {
    "text": "some uh demo so I have something to show you and let's see if that will work so",
    "start": "1640279",
    "end": "1646039"
  },
  {
    "text": "first I have to mirror my screen",
    "start": "1646039",
    "end": "1649519"
  },
  {
    "text": "yeah I want that and it's kind of super big but so what I will do I will start our setup",
    "start": "1652600",
    "end": "1660080"
  },
  {
    "text": "the setup is very simple it has two store gateways and tunos quarrier and kind of two replicas of that so so we",
    "start": "1660080",
    "end": "1666799"
  },
  {
    "text": "have one replica which is both promql enabled new promql enabled and one replica which is not enabled and uh we",
    "start": "1666799",
    "end": "1674799"
  },
  {
    "text": "use as you can see",
    "start": "1674799",
    "end": "1679519"
  },
  {
    "text": "um things are popping up that's good how do I make it big or smaller actually so",
    "start": "1681240",
    "end": "1687080"
  },
  {
    "text": "now you can see I'm I'm using essentially some goang end to end uh framework we have that you can kind of",
    "start": "1687080",
    "end": "1692559"
  },
  {
    "text": "like orchestrate containers in a in a like unit test in golink fashion and since we run it um you can see that",
    "start": "1692559",
    "end": "1699440"
  },
  {
    "text": "couple of things opened we run essentially multiple containers we have promu just to monitor this setup and",
    "start": "1699440",
    "end": "1705360"
  },
  {
    "text": "let's me try to kind of make it smaller uh we have you know we have Parker because we want to we are actually",
    "start": "1705360",
    "end": "1710799"
  },
  {
    "text": "working on optimizations right so we have to have profiling and uh we have uh tracing and finally we have two tanos",
    "start": "1710799",
    "end": "1718320"
  },
  {
    "text": "well prome well tanos uis which are really similar to prome that are two essentially we're calling queriers to to",
    "start": "1718320",
    "end": "1725080"
  },
  {
    "text": "give us the UI and perform certain queries there are errors but they are on purpose uh because I don't want to kind",
    "start": "1725080",
    "end": "1730880"
  },
  {
    "text": "of execute the query yet so let's we have a new promql here or like set up with new PR promql and old alt one so",
    "start": "1730880",
    "end": "1738240"
  },
  {
    "text": "let's kind of query alt one so what I'm querying I have like two week huge block",
    "start": "1738240",
    "end": "1743279"
  },
  {
    "text": "of data with 10 million Series so it's it's and I only query one day and it's",
    "start": "1743279",
    "end": "1749159"
  },
  {
    "text": "scarely fast honestly let's see let's see the uh the",
    "start": "1749159",
    "end": "1755200"
  },
  {
    "text": "new new one so um so essentially I'm doing like",
    "start": "1755200",
    "end": "1761559"
  },
  {
    "text": "simple aggregation I don't know what's going on with this room maybe it's a screen sharing but it's so fast anyway",
    "start": "1761559",
    "end": "1766919"
  },
  {
    "text": "uh ited be like 10 seconds on my test runs I think we should just bump it up",
    "start": "1766919",
    "end": "1772000"
  },
  {
    "text": "yeah let's let's do bigger one two days but essentially you already see that six seconds was on Old query and then a new",
    "start": "1772000",
    "end": "1777919"
  },
  {
    "text": "query was already twice faster uh oh no we no no no I want two days two days let's see if",
    "start": "1777919",
    "end": "1785720"
  },
  {
    "text": "that will work uh and also I'm doing really a lot of mistakes because I'm trying to run this at the same time so",
    "start": "1785720",
    "end": "1792880"
  },
  {
    "text": "you know not good optimization of like Benchmark practices however we already see some improvements like 11 seconds",
    "start": "1792880",
    "end": "1799000"
  },
  {
    "text": "for old one a new one um for eight seconds so so why why is that faster",
    "start": "1799000",
    "end": "1804640"
  },
  {
    "text": "right it's just a new prq engine implementation so the reason why it's fast um and and kind of to explain this",
    "start": "1804640",
    "end": "1811600"
  },
  {
    "text": "uh we added this explain mode so to promql I just have explain uh comand and",
    "start": "1811600",
    "end": "1817360"
  },
  {
    "text": "it kind of like prints me you know we are working on user experience I just added this like yesterday but but this",
    "start": "1817360",
    "end": "1823159"
  },
  {
    "text": "view is is what we were try to maintain and add um just to show you you know what's what's the execution plan uh will",
    "start": "1823159",
    "end": "1829480"
  },
  {
    "text": "be so you can already see that we have a certain parallelism and concurrency within the the the prom engine so it",
    "start": "1829480",
    "end": "1836720"
  },
  {
    "text": "noticed that I have 12 CPUs so it kind of like sharded into six and it already it doesn't sh the storage yet we'll do",
    "start": "1836720",
    "end": "1843279"
  },
  {
    "text": "that later on in later versions but right now already Shing within the the promil engine like just on my um one",
    "start": "1843279",
    "end": "1850120"
  },
  {
    "text": "machine is is already improving the situation because we are essentially counting those series um like you know",
    "start": "1850120",
    "end": "1857279"
  },
  {
    "text": "six uh six times in the parallel um okay but that's that's boring right let's let's go and have like one more U more",
    "start": "1857279",
    "end": "1864559"
  },
  {
    "text": "intrig um query so this is a typical query we do in promql so for example you",
    "start": "1864559",
    "end": "1871120"
  },
  {
    "text": "can see I have some cluster version and I want to kind of have a percentage of this cluster version without certain",
    "start": "1871120",
    "end": "1877080"
  },
  {
    "text": "version for example right and um this can be expensive because like the the",
    "start": "1877080",
    "end": "1883000"
  },
  {
    "text": "the naive prom qu implement or like the old prom implementation were um essentially scanning the storage twice",
    "start": "1883000",
    "end": "1889480"
  },
  {
    "text": "right just first to have this cluster version and just to have this you know",
    "start": "1889480",
    "end": "1894600"
  },
  {
    "text": "actually I'm might pulling right now like 200,000 series um so so kind of a lot and then I do another scan of",
    "start": "1894600",
    "end": "1901159"
  },
  {
    "text": "storage and the reason why it was implemented like that it was implemented for promu where you have in memory all of this data versus here in tanos we",
    "start": "1901159",
    "end": "1908399"
  },
  {
    "text": "have unfortunately some kind of network lookup and even object storage lookup so",
    "start": "1908399",
    "end": "1913519"
  },
  {
    "text": "it can be a little bit slow we can see 11 seconds actually not so bad it's actually pretty fast uh with so much",
    "start": "1913519",
    "end": "1919120"
  },
  {
    "text": "data so let's see how our new query will perform here so what's amazing is that",
    "start": "1919120",
    "end": "1924440"
  },
  {
    "text": "this logical plan and physical plan separation it allows us to optimize and really uh open space for other people to",
    "start": "1924440",
    "end": "1930760"
  },
  {
    "text": "contribute you know more optimizations so we can see it's super it's like 3 seconds versus 11 seconds it's I'm",
    "start": "1930760",
    "end": "1936880"
  },
  {
    "text": "impressed even and um what's amazing is that let's see what's what's going on so",
    "start": "1936880",
    "end": "1942080"
  },
  {
    "text": "if I explain this it's kind of like more complex query as you can see because it just has more more things and generally",
    "start": "1942080",
    "end": "1949720"
  },
  {
    "text": "it it it has a two separate kind of parts that only divides after all and",
    "start": "1949720",
    "end": "1954760"
  },
  {
    "text": "you can see all of them fetch some serious and this is before optimization so you can see in my logical exp",
    "start": "1954760",
    "end": "1961080"
  },
  {
    "text": "explanation is that there was some optimization for some sorting of matchers because it's just whatever just",
    "start": "1961080",
    "end": "1967639"
  },
  {
    "text": "faster and then you have mer SE select Optimizer so this is the key thing I want to show you so what is happening is",
    "start": "1967639",
    "end": "1974159"
  },
  {
    "text": "that this is after optimizations you can see that that new thing was injected it's called filtered selector but really",
    "start": "1974159",
    "end": "1981039"
  },
  {
    "text": "uh what's Happening Here is is is on um those Series selectors so series selectors essentially fetches the data",
    "start": "1981039",
    "end": "1987559"
  },
  {
    "text": "and we can see their memory address of this actual series selector in memory uh in in my in my query so you can see the",
    "start": "1987559",
    "end": "1994559"
  },
  {
    "text": "address is exactly the same for all shards but also exactly the same across different part of the query versus",
    "start": "1994559",
    "end": "2000639"
  },
  {
    "text": "before it was a different memory address um you know uh for first part and second",
    "start": "2000639",
    "end": "2006519"
  },
  {
    "text": "part this this indicates that the same data is used so we cach the same series and we literally make a query only once",
    "start": "2006519",
    "end": "2013080"
  },
  {
    "text": "to get the cluster versions and then virtually filter for a second part and we use the same memory so that's a huge",
    "start": "2013080",
    "end": "2020279"
  },
  {
    "text": "optimizations and you can see everything in our tracing solution so let's go to Jagger grab the quer",
    "start": "2020279",
    "end": "2028000"
  },
  {
    "text": "range and oh let's find them so one was 3 seconds and second was 11 so let's go",
    "start": "2028000",
    "end": "2034799"
  },
  {
    "text": "to the old the old old promql many things happens but what's really I want",
    "start": "2034799",
    "end": "2040039"
  },
  {
    "text": "you to focus on is the quer select so you can see that selection of this data",
    "start": "2040039",
    "end": "2045639"
  },
  {
    "text": "there were two of those and it took some time it was parallel but it still overloaded my machine in some way and",
    "start": "2045639",
    "end": "2051040"
  },
  {
    "text": "there was some congestion so at the end it was slower plus we have to kind of like proxy all of this so at the end um",
    "start": "2051040",
    "end": "2057960"
  },
  {
    "text": "you know we made a two calls and um one for you know this filtered data and",
    "start": "2057960",
    "end": "2064398"
  },
  {
    "text": "second it without the without the filter and what's what's what's cool with this simple optimization which is kind of",
    "start": "2064399",
    "end": "2070638"
  },
  {
    "text": "like maybe five lines of code uh we already can achieve something like that where we have only uh one selection and",
    "start": "2070639",
    "end": "2077878"
  },
  {
    "text": "again this is my local networks it's Ultra fast but if you go and fetch series from Prim side car this really",
    "start": "2077879",
    "end": "2084320"
  },
  {
    "text": "matters right so um it's already faster a lot so so this is what I wanted to show today and um hopefully this excites",
    "start": "2084320",
    "end": "2093200"
  },
  {
    "text": "you it excites me definitely H and if you want to learn more and really like try to maybe write those",
    "start": "2093200",
    "end": "2099599"
  },
  {
    "text": "optimizations uh I would like to invite you to do so and the last before thing before before we finish uh I would like",
    "start": "2099599",
    "end": "2106520"
  },
  {
    "text": "to mention that we are do mentoring mentoring uh so if you if you know any students but actually we also Mentor not",
    "start": "2106520",
    "end": "2113160"
  },
  {
    "text": "student like full-time employees if they want to join you know open source space and really start contributing check the",
    "start": "2113160",
    "end": "2118599"
  },
  {
    "text": "websites website and sign up for the program and we'll try I mean we Mentor a lot as a community so so you're welcome",
    "start": "2118599",
    "end": "2124960"
  },
  {
    "text": "to to join us here and and uh that's it that's it for for us thank you yeah",
    "start": "2124960",
    "end": "2130079"
  },
  {
    "text": "thank you",
    "start": "2130079",
    "end": "2133320"
  }
]