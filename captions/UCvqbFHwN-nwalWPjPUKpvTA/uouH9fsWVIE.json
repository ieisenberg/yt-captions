[
  {
    "start": "0",
    "end": "108000"
  },
  {
    "text": "hey everyone I'm Greg this has been ayak and uh we're talking to you today about least privileged containers and some",
    "start": "0",
    "end": "6480"
  },
  {
    "text": "work we did on gke so this is going to be a little bit weird because uh this is being",
    "start": "6480",
    "end": "12900"
  },
  {
    "text": "pre-recorded but we're going to go with it anyway so hands up if you've heard this security advice don't run",
    "start": "12900",
    "end": "19619"
  },
  {
    "text": "containers as root and then keep your hand up if you've actually done it if you've actually",
    "start": "19619",
    "end": "24779"
  },
  {
    "text": "implemented that advice and your container is on running as root I'm going to guess that most people put their hands down for the second part",
    "start": "24779",
    "end": "32640"
  },
  {
    "text": "and we've been saying this sort of stuff for a long time and I mean we as in the collective sort of kubernetes security",
    "start": "32640",
    "end": "38239"
  },
  {
    "text": "container community you can actually watch Liz rice give a keynote in 2018 uh at this exact",
    "start": "38239",
    "end": "44879"
  },
  {
    "text": "conference about how you shouldn't run containers as a key root as root",
    "start": "44879",
    "end": "50160"
  },
  {
    "text": "um is it working that advice and I think the short answer really is no unfortunately so cystic uh wrote a",
    "start": "50160",
    "end": "58860"
  },
  {
    "text": "report that said uh 76 of containers that they see run as root and I think they've got pretty good visibility of",
    "start": "58860",
    "end": "64559"
  },
  {
    "text": "what's actually happening on a lot of machines and that pretty much matches my uh my",
    "start": "64559",
    "end": "70020"
  },
  {
    "text": "experience too so we're going to talk about what we did with gke and kubernetes itself we migrated a majority",
    "start": "70020",
    "end": "76200"
  },
  {
    "text": "of our containers of of the the gke platform system containers so the containers that actually run gke",
    "start": "76200",
    "end": "82680"
  },
  {
    "text": "and uh we migrated most of us non-route what today we're going to talk about why",
    "start": "82680",
    "end": "88380"
  },
  {
    "text": "we would even bother doing that what's the point of running as non-root basically how you do it what our",
    "start": "88380",
    "end": "94020"
  },
  {
    "text": "strategy was how we sort of went about uh moving all these containers some design choices we had to make",
    "start": "94020",
    "end": "99540"
  },
  {
    "text": "all of the little bumps in the road that we hit and uh and then we're also going to talk about a future feature that's",
    "start": "99540",
    "end": "105360"
  },
  {
    "text": "coming that should help make this a little bit easier so why do we even care about this what",
    "start": "105360",
    "end": "111659"
  },
  {
    "start": "108000",
    "end": "273000"
  },
  {
    "text": "does it matter if containers run as non-root or not if you look think about how a container",
    "start": "111659",
    "end": "117119"
  },
  {
    "text": "sort of looks at a high level there's a there's a container with a container runtime and a host kernel and optionally",
    "start": "117119",
    "end": "124079"
  },
  {
    "text": "there might be some stuff mapped into that container like hostpath and host Network that kind of thing so if you're",
    "start": "124079",
    "end": "129780"
  },
  {
    "text": "a bad guy who's compromised that container and you're looking for a way to get at that host and get it other",
    "start": "129780",
    "end": "135060"
  },
  {
    "text": "containers that are running on that host then you've got a few different ways that you can attack there you can use vulnerabilities in the runtime or the",
    "start": "135060",
    "end": "141900"
  },
  {
    "text": "kernel or you could uh escalate through some of these uh sort of additional host",
    "start": "141900",
    "end": "147239"
  },
  {
    "text": "bits and pieces that are mapped into the container and really the not running his root just",
    "start": "147239",
    "end": "153840"
  },
  {
    "text": "makes that a whole lot harder so some of those vulnerabilities just flat out don't work if you uh you might have",
    "start": "153840",
    "end": "159959"
  },
  {
    "text": "heard of the Azure Escape vulnerability that one uh wouldn't work if you weren't running as root",
    "start": "159959",
    "end": "165060"
  },
  {
    "text": "um and even if they do work uh for the most part the the attack is going to end up in this this kind of contained in",
    "start": "165060",
    "end": "172560"
  },
  {
    "text": "this box that is a a a user account on a Linux system they still have to escalate",
    "start": "172560",
    "end": "178019"
  },
  {
    "text": "the route to get at all of these sort of other containers and cubelet and various other things so it really does provide",
    "start": "178019",
    "end": "185040"
  },
  {
    "text": "you quite a lot of protection uh but sadly no one's using it and just a little bit more on uh kernel",
    "start": "185040",
    "end": "192780"
  },
  {
    "text": "container breakouts I'm making this sort of Fairly bold statement here that pretty much every Linux kernel has a has a breakout right",
    "start": "192780",
    "end": "199620"
  },
  {
    "text": "at this moment and the reason we know that is that we have a well-maintained",
    "start": "199620",
    "end": "205140"
  },
  {
    "text": "uh Linux kernel that we pay a lot of attention to Security on for our container optimize LS and we actually",
    "start": "205140",
    "end": "210720"
  },
  {
    "text": "pay a bug Bounty uh this thing called the kubernetes capture the flag and so we put these flags around",
    "start": "210720",
    "end": "217920"
  },
  {
    "text": "um on a well-maintained gke system if you can break out of a container and get to one of those flags and we'll pay you",
    "start": "217920",
    "end": "224459"
  },
  {
    "text": "a bunch of money and so we've the whole sort of scope of gke and kubernetes and",
    "start": "224459",
    "end": "230519"
  },
  {
    "text": "container runtime and all of that is is in scope uh but and we've been running",
    "start": "230519",
    "end": "235799"
  },
  {
    "text": "this competitive program for a couple of years now and we've paid out 1.3 million dollars but literally every one of those",
    "start": "235799",
    "end": "241620"
  },
  {
    "text": "dollars has gone to a Linux kernel container Escape that's how many of these things there are just last year we",
    "start": "241620",
    "end": "247560"
  },
  {
    "text": "found in fix 17 uh exploitable breakouts and this is all generating some cool",
    "start": "247560",
    "end": "253319"
  },
  {
    "text": "research where the sort of collecting all these uh breakout exploits is is really helping us drive some Upstream",
    "start": "253319",
    "end": "260100"
  },
  {
    "text": "kernel research that hopefully will make uh this a little bit harder for attackers in the future",
    "start": "260100",
    "end": "266160"
  },
  {
    "text": "um but the point here is that this attack path is definitely very viable um and we really need that non-root",
    "start": "266160",
    "end": "271680"
  },
  {
    "text": "protection how do you run as non-root",
    "start": "271680",
    "end": "277639"
  },
  {
    "start": "273000",
    "end": "350000"
  },
  {
    "text": "well first let's start with what does non-root even mean so looking at the top line here you can run privileged",
    "start": "277740",
    "end": "284520"
  },
  {
    "text": "containers and we're not really going to cover those much in this in these in this talk so they run as root but they",
    "start": "284520",
    "end": "290400"
  },
  {
    "text": "also run with every single possible uh root capability more than is normal and",
    "start": "290400",
    "end": "295560"
  },
  {
    "text": "they also do things like disable some uh security controls on the host so uh Eric",
    "start": "295560",
    "end": "300600"
  },
  {
    "text": "wrote a blog post that I've linked to here about how it's not even really containing much anymore if you're",
    "start": "300600",
    "end": "306060"
  },
  {
    "text": "running as privileged um so we're mostly going to ignore this use case but uh you know best practices",
    "start": "306060",
    "end": "311639"
  },
  {
    "text": "don't run his privilege you you really don't need that much privilege uh in the vast majority of cases but what most",
    "start": "311639",
    "end": "318120"
  },
  {
    "text": "people doing is the middle one here which is just running containers with their defaults and uh just rolling with",
    "start": "318120",
    "end": "324720"
  },
  {
    "text": "it and we're going to talk about how you can move from that a situation where",
    "start": "324720",
    "end": "329820"
  },
  {
    "text": "where it's root and you probably didn't even really know to a situation where it's much less privileged",
    "start": "329820",
    "end": "336060"
  },
  {
    "text": "and one more thing we're not actually coming in in this talk is is running the container runtime itself as an unroot",
    "start": "336060",
    "end": "341759"
  },
  {
    "text": "that's actually a pretty cool idea and there's some uh there's some good uh research and implementations you can",
    "start": "341759",
    "end": "347340"
  },
  {
    "text": "read more about that at the at the website here so two real Parts you have to sort of",
    "start": "347340",
    "end": "354180"
  },
  {
    "start": "350000",
    "end": "504000"
  },
  {
    "text": "make the container work as non-root and then once you've done that then you can tell kubernetes or Docker or or whatever",
    "start": "354180",
    "end": "361320"
  },
  {
    "text": "to run it as non-root and we're going to illustrate that through a quick demo",
    "start": "361320",
    "end": "367680"
  },
  {
    "text": "I'm going to start out just by running regular regular nginx container and on",
    "start": "367680",
    "end": "374100"
  },
  {
    "text": "the bottom part of the screen here I've got a process listing running and it's showing us what user those processes are",
    "start": "374100",
    "end": "380820"
  },
  {
    "text": "running as on the host so nginx is running a root user here they're actually running some unprivileged users",
    "start": "380820",
    "end": "386940"
  },
  {
    "text": "as well and what's going on is that they're split out all of the privileged stuff they need to do like the load Port",
    "start": "386940",
    "end": "392220"
  },
  {
    "text": "binding and that kind of thing configuration and then all of the uh sort of more dangerous stuff that's",
    "start": "392220",
    "end": "398580"
  },
  {
    "text": "internet facing that's going to get compromised that's running as an unprivileged user so that's actually a",
    "start": "398580",
    "end": "403740"
  },
  {
    "text": "pretty good setup um but I think we can do better we should be able to run this thing as non-root completely",
    "start": "403740",
    "end": "409860"
  },
  {
    "text": "let's just try telling Docker to run it as this unprivileged user nginx and we can see it doesn't work",
    "start": "409860",
    "end": "415979"
  },
  {
    "text": "the user inside the container is trying to write to this directory which is owned by root and so we get failures",
    "start": "415979",
    "end": "422940"
  },
  {
    "text": "so we're gonna have to fix it and that involves making a new Docker",
    "start": "422940",
    "end": "430319"
  },
  {
    "text": "file and effectively making a new image starting from the nginx and then fixing",
    "start": "430319",
    "end": "435479"
  },
  {
    "text": "all of those permissions that it's trying to trying to do in the course of its normal business so we're making sure",
    "start": "435479",
    "end": "441539"
  },
  {
    "text": "the ownership of those files is owned by this unprivileged user and then we're telling Docker to run the container is",
    "start": "441539",
    "end": "446940"
  },
  {
    "text": "that unprivileged user so we don't even have to pass in that um that username anymore so let's build it",
    "start": "446940",
    "end": "454740"
  },
  {
    "text": "and run it and as you can see no username passed in here and you can see on the the bottom here we've uh",
    "start": "454740",
    "end": "461580"
  },
  {
    "text": "we're now running completely as non-root so all the content all the processes are not privileged anymore and so that's",
    "start": "461580",
    "end": "467520"
  },
  {
    "text": "good but it was a whole ton of work to get there we had to understand how nginx works we had to understand what files it",
    "start": "467520",
    "end": "472680"
  },
  {
    "text": "needs to modify as root go fix all those with the right user and that's just too much work really the container owners",
    "start": "472680",
    "end": "479099"
  },
  {
    "text": "should be doing uh most of that for us and um to their credit nginx has done",
    "start": "479099",
    "end": "484860"
  },
  {
    "text": "exactly that so here's a completely unprivileged container an official one that they provide that does all of that",
    "start": "484860",
    "end": "490500"
  },
  {
    "text": "work that I just did without any of the maintenance burden um that sort of the user of the container has to has to take on so",
    "start": "490500",
    "end": "497580"
  },
  {
    "text": "that's great all right let's move on",
    "start": "497580",
    "end": "504960"
  },
  {
    "start": "504000",
    "end": "635000"
  },
  {
    "text": "that's good for one container what if you want to migrate a whole bunch of containers or a whole change of whole",
    "start": "504960",
    "end": "512880"
  },
  {
    "text": "company's worth of containers um to be running as non-root that's what we're going to talk about",
    "start": "512880",
    "end": "518580"
  },
  {
    "text": "next so here's the strategy that we took to at least move all the gke containers",
    "start": "518580",
    "end": "523620"
  },
  {
    "text": "that we could and it's pretty much the same strategy for every security thing we do I think and that's you you stop",
    "start": "523620",
    "end": "529560"
  },
  {
    "text": "the the bad thing from happening uh for all of the new stuff that's coming in so for new containers that are running on",
    "start": "529560",
    "end": "535860"
  },
  {
    "text": "gke we want to sort of shut the gate and make sure that we haven't we aren't adding to the problem so we block the",
    "start": "535860",
    "end": "541500"
  },
  {
    "text": "new root containers coming in and then we work with all the ones that we've already got and we pay down that that's a sort of a burn down list that we work",
    "start": "541500",
    "end": "548339"
  },
  {
    "text": "through uh and wherever we can we'll fix Upstream as well too and so we did this in a bunch of places with kubernetes",
    "start": "548339",
    "end": "554040"
  },
  {
    "text": "itself uh some links here to some of the changes we've made to run the core containers as an Unwritten",
    "start": "554040",
    "end": "560760"
  },
  {
    "text": "so in terms of doing that stopping the new root containers uh from uh from coming in we use this thing called a",
    "start": "560760",
    "end": "567480"
  },
  {
    "text": "pre-submit inside of Google so pretty much everything in Google goes into source code at some point and if you're",
    "start": "567480",
    "end": "573540"
  },
  {
    "text": "the same is true for gke if you're going to if you're a developer on gke and you're going to make a new gke system",
    "start": "573540",
    "end": "578940"
  },
  {
    "text": "container then uh you need to commit that piece of yaml into source code and we actually check it just to make sure",
    "start": "578940",
    "end": "585180"
  },
  {
    "text": "that um it's not running as root the other part of the strategy and we're",
    "start": "585180",
    "end": "592740"
  },
  {
    "text": "going to talk more about that in in just a moment actually more in more detail the other part of the strategy is",
    "start": "592740",
    "end": "597779"
  },
  {
    "text": "migrating the existing containers and so we had a security driven process here so",
    "start": "597779",
    "end": "603060"
  },
  {
    "text": "the security team and actually it was pretty much just finite um looking at all the containers looking",
    "start": "603060",
    "end": "608459"
  },
  {
    "text": "at their pod specs changing them to run as non-root and then checking that test pass it's a test pass then great we're",
    "start": "608459",
    "end": "614279"
  },
  {
    "text": "pretty much done and we can send it off into production production after the container owners taking a look at it if",
    "start": "614279",
    "end": "620940"
  },
  {
    "text": "they don't pass then we figure it out with a container owner there's some things we need to change and inside of",
    "start": "620940",
    "end": "626040"
  },
  {
    "text": "that container or or sort of in the configuration of that container and then we get it to run as non-root eventually",
    "start": "626040",
    "end": "634820"
  },
  {
    "start": "635000",
    "end": "862000"
  },
  {
    "text": "to make this work we had to make a bunch of design choices sort of out front about how we're going to manage these",
    "start": "636120",
    "end": "642180"
  },
  {
    "text": "non-root containers uh these are sort of the three main ones and just a reminder here that these are",
    "start": "642180",
    "end": "648839"
  },
  {
    "text": "gke system containers and so they're really sort of infrastructure heavy these aren't your typical sort of like run a web app uh fairly uh not really",
    "start": "648839",
    "end": "657420"
  },
  {
    "text": "much interaction with the host kind of containers these ones have a bunch of indirection they do things like stand up proxies and and look at the host log",
    "start": "657420",
    "end": "664320"
  },
  {
    "text": "files and and various other interactions with the host so in terms of complexity of doing this it's actually probably a",
    "start": "664320",
    "end": "671399"
  },
  {
    "text": "lot harder than uh if you're just migrating a bunch of application containers but the very first thing they",
    "start": "671399",
    "end": "676860"
  },
  {
    "text": "had to figure out here was are we going to do this in the in the container or at runtime in terms of making it run as",
    "start": "676860",
    "end": "683279"
  },
  {
    "text": "non-root so if you own the container then doing it in the container is great because then anyone who's running that",
    "start": "683279",
    "end": "688620"
  },
  {
    "text": "container just gets uh better security and they didn't even have to do anything we saw that with that nginx example",
    "start": "688620",
    "end": "696420"
  },
  {
    "text": "but for the most part our approach was using configuration to change the contention itself and that meant we",
    "start": "696420",
    "end": "702899"
  },
  {
    "text": "didn't have to rebuild the container uh we didn't it was really easy to audit so we could just look at the configuration",
    "start": "702899",
    "end": "709680"
  },
  {
    "text": "of the container and just be able to tell yes this container is running as non-root you can template it if you need",
    "start": "709680",
    "end": "715800"
  },
  {
    "text": "to and it really enabled us to do all this in a central Team without having to contact every single uh kind of",
    "start": "715800",
    "end": "721980"
  },
  {
    "text": "container owner and and modify the build of their containers and that kind of thing uh so you need all of these bits and",
    "start": "721980",
    "end": "727800"
  },
  {
    "text": "pieces uh in this yaml here to to make a container run unprivileged we're going to go through them in some more detail",
    "start": "727800",
    "end": "733920"
  },
  {
    "text": "later enforcement and audibility",
    "start": "733920",
    "end": "739160"
  },
  {
    "text": "that pre-submit check I mentioned which is coming back to that now and so basically that piece of yaml I showed",
    "start": "739160",
    "end": "745019"
  },
  {
    "text": "before it's just checking all of that so all of those things need to be in the right uh settings and it's checking that",
    "start": "745019",
    "end": "750660"
  },
  {
    "text": "that user and group are unique and that they are not zero so not root",
    "start": "750660",
    "end": "757560"
  },
  {
    "text": "you don't have to do it that way though like it's not like everyone has this pre-submit system or like a repository",
    "start": "757560",
    "end": "764279"
  },
  {
    "text": "that looks like the way Google manages code and so you can definitely do this at runtime um you can do it with the pawn security",
    "start": "764279",
    "end": "770579"
  },
  {
    "text": "admission uh restricted mode um it it does all of that checking for",
    "start": "770579",
    "end": "776040"
  },
  {
    "text": "you all of these things are already in there the restricted uh profile or you could do it with pretty much any of the",
    "start": "776040",
    "end": "782160"
  },
  {
    "text": "admission controls around I uh I put I put links on the side here to the gatekeeper version of all the policies",
    "start": "782160",
    "end": "788820"
  },
  {
    "text": "that you would use to do this at runtime that's another way to do it too",
    "start": "788820",
    "end": "794120"
  },
  {
    "text": "uh what do you do about these user IDs and group IDs and really the goal here is that we",
    "start": "794700",
    "end": "800519"
  },
  {
    "text": "don't have any collisions so we we just want to make sure that this container that needs these",
    "start": "800519",
    "end": "806160"
  },
  {
    "text": "privileges isn't ever going to share a user ID with other containers that don't need those privileges because if a bad",
    "start": "806160",
    "end": "811560"
  },
  {
    "text": "guy compromises one you shouldn't get access to sort of like a a union of all of those permissions so it's better off",
    "start": "811560",
    "end": "818160"
  },
  {
    "text": "if they all are very separate and there's no sort of collisions or overlap in those user IDs so basically we",
    "start": "818160",
    "end": "823860"
  },
  {
    "text": "decided on a range and then we use the the pre-submit to make sure that those user IDs and group IDs were unique",
    "start": "823860",
    "end": "830519"
  },
  {
    "text": "there's some other ways you can do this you could I think conceivably right in mutating",
    "start": "830519",
    "end": "836220"
  },
  {
    "text": "emission controller that keeps track of the user IDs it's allocated and sets them in the container for you that's a",
    "start": "836220",
    "end": "843000"
  },
  {
    "text": "bit of work you could coordinate off cluster so you could have a list or a database somewhere that you maintain but",
    "start": "843000",
    "end": "849120"
  },
  {
    "text": "I think really the right at the end of the talk we're going to talk about a new kubernetes feature that fixes this in a",
    "start": "849120",
    "end": "856620"
  },
  {
    "text": "way that basically means you don't have to worry about it too much so don't worry about this problem too much",
    "start": "856620",
    "end": "863459"
  },
  {
    "start": "862000",
    "end": "1211000"
  },
  {
    "text": "so I'm gonna uh switch over here to vinayak and have him talk about the",
    "start": "863459",
    "end": "868740"
  },
  {
    "text": "challenges we had and how we solved them thanks Greg um I'm going to talk about",
    "start": "868740",
    "end": "874800"
  },
  {
    "text": "some of the challenges you might encounter when you migrate your containers to non-root and",
    "start": "874800",
    "end": "881339"
  },
  {
    "text": "there's two major challenges one is access to things on the host and the other one is managing",
    "start": "881339",
    "end": "887820"
  },
  {
    "text": "capabilities so let's first look at accessing things of the host so as Greg",
    "start": "887820",
    "end": "893040"
  },
  {
    "text": "mentioned our containers are infrastructure heavy so sometimes they need to set up the host in a certain way",
    "start": "893040",
    "end": "899279"
  },
  {
    "text": "or they need to interact with the host so that GK can function and one such interaction could be access",
    "start": "899279",
    "end": "906480"
  },
  {
    "text": "to directories and files on the host so here I have an example of connectivity server container which is running as",
    "start": "906480",
    "end": "912240"
  },
  {
    "text": "non-root and it mounts this host path volume which is this directory connectivity server",
    "start": "912240",
    "end": "919920"
  },
  {
    "text": "at boot it tries to create a Unix domain socket to interact with your API server in that directory and so you might run",
    "start": "919920",
    "end": "926279"
  },
  {
    "text": "into some cases when you want to give a non-root container access to a host file",
    "start": "926279",
    "end": "931560"
  },
  {
    "text": "uh so let's see let's see one possible solution of this so if you've thought of uh if you've if",
    "start": "931560",
    "end": "939360"
  },
  {
    "text": "you've interacted with kubernetes uh part security context before you would have seen this field called",
    "start": "939360",
    "end": "944940"
  },
  {
    "text": "if it's group it basically sets the group ownership of mounted volumes to the group that you",
    "start": "944940",
    "end": "950699"
  },
  {
    "text": "specify an FS group it works for a for other volume tabs but won't work for host path volume so you can't",
    "start": "950699",
    "end": "956699"
  },
  {
    "text": "effectively use the solution and our way around it was to use uh init contains",
    "start": "956699",
    "end": "964519"
  },
  {
    "text": "so here um we have an init container which will run as root and we'll set the",
    "start": "966000",
    "end": "974459"
  },
  {
    "text": "ownership of that directory and one property of any container is init containers is that they run before any",
    "start": "974459",
    "end": "981540"
  },
  {
    "text": "of your long running containers and they always run to completion one thing you might be thinking about is",
    "start": "981540",
    "end": "987660"
  },
  {
    "text": "that hey these people have been telling me to run containers as non-root and they're running this as root and",
    "start": "987660",
    "end": "994139"
  },
  {
    "text": "that's okay because the risk here is minuscule because this container runs to completion and will only probably last",
    "start": "994139",
    "end": "1001100"
  },
  {
    "text": "for less than a second in this case so let's look at a demo of this in action",
    "start": "1001100",
    "end": "1007540"
  },
  {
    "text": "so here I have a pod which is running this connectivity server container",
    "start": "1011420",
    "end": "1018800"
  },
  {
    "text": "it's running as user2046 and it's mounting this connectivity",
    "start": "1018800",
    "end": "1025100"
  },
  {
    "text": "server directory from The Host here I'd also like to point out that it's incorrectly relying on FS group to",
    "start": "1025100",
    "end": "1031459"
  },
  {
    "text": "set up the directory permissions for it so let's see what happens if we apply this to our cluster",
    "start": "1031459",
    "end": "1038798"
  },
  {
    "text": "now let's take the status of that part we can see that it's failing so let's",
    "start": "1043100",
    "end": "1049700"
  },
  {
    "text": "look at the logs here I've modified the container a little bit to LSD directly permissions but the first thing we",
    "start": "1049700",
    "end": "1055220"
  },
  {
    "text": "should notice is that the socket is actually failing to create with permission denied",
    "start": "1055220",
    "end": "1062000"
  },
  {
    "text": "and if we look at the permissions for this directory it's still owned by root",
    "start": "1062000",
    "end": "1068600"
  },
  {
    "text": "so let's try and fix that within a net container here we'll just look at the init",
    "start": "1068600",
    "end": "1074660"
  },
  {
    "text": "container for now and as you can see this init container is",
    "start": "1074660",
    "end": "1079760"
  },
  {
    "text": "running as root and it's going to change the ownership",
    "start": "1079760",
    "end": "1085340"
  },
  {
    "text": "of the connectivity server directory to user2046 which is the user connectivity",
    "start": "1085340",
    "end": "1091880"
  },
  {
    "text": "server written as and this will run before the connectivity server container so here I've modified the yaml already",
    "start": "1091880",
    "end": "1097580"
  },
  {
    "text": "to include this initi container in it and so let's apply that modifier yam foreign",
    "start": "1097580",
    "end": "1103640"
  },
  {
    "text": "now let's look at the status of the part so it's good that it's running now now",
    "start": "1103640",
    "end": "1109520"
  },
  {
    "text": "let's look at the logs and if you look at the logs we notice that the init container ran before the",
    "start": "1109520",
    "end": "1116480"
  },
  {
    "text": "long running container and it set the directory permissions to 2046 and we can see now the socket is successfully",
    "start": "1116480",
    "end": "1122360"
  },
  {
    "text": "created",
    "start": "1122360",
    "end": "1124660"
  },
  {
    "text": "great so this init container approach will work if you have",
    "start": "1131840",
    "end": "1137419"
  },
  {
    "text": "if your container is accessing one file but there were cases where we had",
    "start": "1137419",
    "end": "1142760"
  },
  {
    "text": "a directory or a file that multiple containers needed to access and this init container approach will not work",
    "start": "1142760",
    "end": "1149240"
  },
  {
    "text": "because you will effectively have both those any containers trying to fight to set the permissions correctly and you don't want",
    "start": "1149240",
    "end": "1155480"
  },
  {
    "text": "that so our solution for this kind of case is uh was to use supplemental",
    "start": "1155480",
    "end": "1161120"
  },
  {
    "text": "groups and supplemented groups is a is a list",
    "start": "1161120",
    "end": "1166820"
  },
  {
    "text": "of groups that you can provide in the board security context and basically your user is treated as part of that",
    "start": "1166820",
    "end": "1173660"
  },
  {
    "text": "those groups and so what we did was for high volume",
    "start": "1173660",
    "end": "1179259"
  },
  {
    "text": "uh directories or files by high volume I mean which were accessed by multiple containers we gave them unique IDs uh",
    "start": "1179360",
    "end": "1189080"
  },
  {
    "text": "unique unique IDs uh to them and then the containers would just add those",
    "start": "1189080",
    "end": "1194840"
  },
  {
    "text": "unique IDs in their supplemental group the advantage of using this approach was that we never had to manage",
    "start": "1194840",
    "end": "1202039"
  },
  {
    "text": "adding the uids of all our containers to the groups so that they can have access to these files now you can just set the",
    "start": "1202039",
    "end": "1208120"
  },
  {
    "text": "supplemental group and you get access to it",
    "start": "1208120",
    "end": "1212260"
  },
  {
    "start": "1211000",
    "end": "1526000"
  },
  {
    "text": "hopefully those tips and ticks will help you in your journey to migrate your containers to non-root",
    "start": "1213260",
    "end": "1219200"
  },
  {
    "text": "while you need to access things to host but the other thing that you might might face uh other challenge you might",
    "start": "1219200",
    "end": "1226460"
  },
  {
    "text": "face is that interactions with capabilities so let's look at that now",
    "start": "1226460",
    "end": "1231640"
  },
  {
    "text": "so capabilities are a way of assigning some part of roots capability to a unprivileged process",
    "start": "1233000",
    "end": "1241580"
  },
  {
    "text": "and we recommend that you drop all the capabilities and only add the ones that you need and we also recommend",
    "start": "1241580",
    "end": "1248900"
  },
  {
    "text": "that you do this for your root containers as well the other field here which is of",
    "start": "1248900",
    "end": "1254179"
  },
  {
    "text": "importance is allow privilege escalation which you should always set to false and",
    "start": "1254179",
    "end": "1259340"
  },
  {
    "text": "what that will do is it will prevent your it will prevent a child process from having more privileges than the",
    "start": "1259340",
    "end": "1265039"
  },
  {
    "text": "parent process there can be some weird interactions between allow privilege escalation and capabilities and I've documented some of",
    "start": "1265039",
    "end": "1271460"
  },
  {
    "text": "those at the not often needed uh Link in this slide because they're not really needed very often",
    "start": "1271460",
    "end": "1279399"
  },
  {
    "text": "so here I have a surprise for you that if you drop and add capabilities to a root process that works but if you do",
    "start": "1279620",
    "end": "1286039"
  },
  {
    "text": "that uh do that for a non-root container it won't work without requiring to modify",
    "start": "1286039",
    "end": "1292280"
  },
  {
    "text": "the build of that container that's because when you transition from",
    "start": "1292280",
    "end": "1298340"
  },
  {
    "text": "root to non-root basically all your effective and permitted capabilities are dropped",
    "start": "1298340",
    "end": "1304340"
  },
  {
    "text": "and so that prevents from this from working for this particular capability that I",
    "start": "1304340",
    "end": "1310460"
  },
  {
    "text": "called out here netbind service which is required to bind to low ports there's Solutions where you can just find to a",
    "start": "1310460",
    "end": "1316340"
  },
  {
    "text": "higher port and then you don't have to deal with this but a more General solution for",
    "start": "1316340",
    "end": "1321919"
  },
  {
    "text": "allowing non-root containers to have capabilities initially we thought that that would be ambient capabilities but",
    "start": "1321919",
    "end": "1329299"
  },
  {
    "text": "this is also very elegantly solved by the Linux username spaces feature and so",
    "start": "1329299",
    "end": "1334640"
  },
  {
    "text": "uh we've changed our mind to just rely on that feature now so let's look at",
    "start": "1334640",
    "end": "1340039"
  },
  {
    "text": "how we fixed uh how we overcame this Challenge and we",
    "start": "1340039",
    "end": "1345140"
  },
  {
    "text": "relied on using file capabilities and how those work is that if you have a non-root process that is running a",
    "start": "1345140",
    "end": "1352700"
  },
  {
    "text": "binary which has file capabilities file capabilities applied to it then those capabilities will show up as in your",
    "start": "1352700",
    "end": "1359299"
  },
  {
    "text": "effective and permitted set and so let's look at a demo of how we modify the container uh with file",
    "start": "1359299",
    "end": "1366260"
  },
  {
    "text": "capabilities",
    "start": "1366260",
    "end": "1368679"
  },
  {
    "text": "so here I have a Chlor DNS",
    "start": "1372500",
    "end": "1378520"
  },
  {
    "text": "container that's running as user two zero zero four",
    "start": "1378559",
    "end": "1385179"
  },
  {
    "text": "it's correctly dropping all its capabilities and it's only adding the netbind servers",
    "start": "1385299",
    "end": "1391780"
  },
  {
    "text": "capability but this container is not the build of this container is not modified in any way so let's have let's see what",
    "start": "1391780",
    "end": "1397280"
  },
  {
    "text": "happens when we apply this to our cluster",
    "start": "1397280",
    "end": "1400840"
  },
  {
    "text": "you see that it's editing let's look at the logs to see what's going on",
    "start": "1407480",
    "end": "1413740"
  },
  {
    "text": "so we can see that it's failing to bind to Port 53 which is the default Port that core DNS will bind to and that is a",
    "start": "1415880",
    "end": "1421760"
  },
  {
    "text": "privileged Port because its number is less than one zero two four so now let's see how we modify the build",
    "start": "1421760",
    "end": "1429440"
  },
  {
    "text": "here we've added a few more stages in the first stage here we install the libcap2 package which",
    "start": "1429440",
    "end": "1435980"
  },
  {
    "text": "will give us some utilities to manipulate file capabilities and then we use this set cap utility to add the",
    "start": "1435980",
    "end": "1443059"
  },
  {
    "text": "cabinet bind service capability to the effective and permitted set of the score DNS binary",
    "start": "1443059",
    "end": "1449260"
  },
  {
    "text": "now let's build this image",
    "start": "1451159",
    "end": "1455020"
  },
  {
    "text": "and push it with this file cap stack",
    "start": "1460280",
    "end": "1464559"
  },
  {
    "text": "cool now let's update our pod with this new tag leaving everything",
    "start": "1468140",
    "end": "1474140"
  },
  {
    "text": "else the same",
    "start": "1474140",
    "end": "1476799"
  },
  {
    "text": "now let's look at the log or the status of the part and we can see that it's running",
    "start": "1482780",
    "end": "1488900"
  },
  {
    "text": "so using file capabilities we were able to fix that part and run it as non-root",
    "start": "1488900",
    "end": "1494120"
  },
  {
    "text": "while binding to our report so if through all these demos you",
    "start": "1494120",
    "end": "1501140"
  },
  {
    "text": "had the thought that hey this seems harder than it should be you're not wrong but hopefully some of the tips and",
    "start": "1501140",
    "end": "1507200"
  },
  {
    "text": "tricks that we showed you make your journey to migrate all your containers to non-root easier",
    "start": "1507200",
    "end": "1514280"
  },
  {
    "text": "the future here might seem kind of dark with those demos but it's actually pretty bright and the thing that we've",
    "start": "1514280",
    "end": "1520880"
  },
  {
    "text": "referenced many times in this presentation here is the next user of",
    "start": "1520880",
    "end": "1525980"
  },
  {
    "text": "namespaces the next username spaces support in kubernetes would basically",
    "start": "1525980",
    "end": "1532760"
  },
  {
    "text": "mean that running is root inside the container does not mean running as root on the host which is the exact property",
    "start": "1532760",
    "end": "1540740"
  },
  {
    "text": "that we want and so let's look at a demo of this",
    "start": "1540740",
    "end": "1545799"
  },
  {
    "text": "so here I've set up Docker to run in a username space and I'm going to run a container with the name user NS",
    "start": "1549500",
    "end": "1558100"
  },
  {
    "text": "and as you can see here and this is going to run the core DNS image that we looked at",
    "start": "1558400",
    "end": "1566360"
  },
  {
    "text": "earlier and this is the version of the image that does not have file capabilities",
    "start": "1566360",
    "end": "1572440"
  },
  {
    "text": "and on Startup this is going to run the code DNS binary",
    "start": "1573020",
    "end": "1579679"
  },
  {
    "text": "so let's run this container",
    "start": "1579679",
    "end": "1583720"
  },
  {
    "text": "now let's look at the state from within the container so let's uh do a process listing within the container to see",
    "start": "1587360",
    "end": "1593600"
  },
  {
    "text": "what's going on",
    "start": "1593600",
    "end": "1596080"
  },
  {
    "text": "so as you can see uh this coordinates binary is running as root so this process",
    "start": "1602900",
    "end": "1609620"
  },
  {
    "text": "that's running the the first process that started in the container is running its root so it thinks it's running its route within the container though which",
    "start": "1609620",
    "end": "1616279"
  },
  {
    "text": "is the critical point here now let's do a process listing on the host to see what the state of the",
    "start": "1616279",
    "end": "1623419"
  },
  {
    "text": "process on the host is that's running this code DNS command so here I'm listening for a process that there's",
    "start": "1623419",
    "end": "1629120"
  },
  {
    "text": "running the coordinates command and listing their user ID and uids and as you can see this is running as a",
    "start": "1629120",
    "end": "1635059"
  },
  {
    "text": "non-root uid on the host and so this is exactly the property that we want we're running on the running as",
    "start": "1635059",
    "end": "1642080"
  },
  {
    "text": "root in the container should not mean that you're running a solute on the host and this uh this Linux username Source",
    "start": "1642080",
    "end": "1648620"
  },
  {
    "start": "1645000",
    "end": "1721000"
  },
  {
    "text": "feature has been added support for this has been added in kubernetes uh and this was first discussed in gap 127",
    "start": "1648620",
    "end": "1655820"
  },
  {
    "text": "and has since become Alpha in kubernetes 1.25 so it's available in all versions",
    "start": "1655820",
    "end": "1661580"
  },
  {
    "text": "past 1.25 to enable this since because this is an alpha you need to add the feature gate",
    "start": "1661580",
    "end": "1667100"
  },
  {
    "text": "username space support you also need continuity version 1.7.0",
    "start": "1667100",
    "end": "1673520"
  },
  {
    "text": "know that this support is experimental as of uh as a 1.7.0 and so you will also need run",
    "start": "1673520",
    "end": "1682820"
  },
  {
    "text": "c1.1.4 this feature today only supports stateless pods which are parts that only",
    "start": "1682820",
    "end": "1689960"
  },
  {
    "text": "Mount empty does secrets and config Maps so any other if your part mounts any other volume type",
    "start": "1689960",
    "end": "1695960"
  },
  {
    "text": "you will not be able to use this feature we tried really hard to come up with a demo for this feature but since",
    "start": "1695960",
    "end": "1702620"
  },
  {
    "text": "continuity support was experimental and some of these things are alpha and brand new we couldn't get it to work",
    "start": "1702620",
    "end": "1709220"
  },
  {
    "text": "but in general to get this feature to work if uh you would also have to add host users to your spec and hopefully by",
    "start": "1709220",
    "end": "1716960"
  },
  {
    "text": "the time you watch this we've gotten it to work so now let's compare this feature to",
    "start": "1716960",
    "end": "1723919"
  },
  {
    "start": "1721000",
    "end": "1811000"
  },
  {
    "text": "some of the design decisions and challenges we had to make so first is that you don't need to modify your",
    "start": "1723919",
    "end": "1729620"
  },
  {
    "text": "container you can just leave it as running as root because spelling is root Now does not mean running as root on the host the second decision that we had to",
    "start": "1729620",
    "end": "1736279"
  },
  {
    "text": "make was should we do this in container or runtime you just do runtime you just set the host users uh field to pulse",
    "start": "1736279",
    "end": "1743659"
  },
  {
    "text": "in terms of enforcement and auditability for us this won't change much because we",
    "start": "1743659",
    "end": "1749419"
  },
  {
    "text": "will just check and please submit for host users being false and you can use similar auditability",
    "start": "1749419",
    "end": "1756860"
  },
  {
    "text": "the uid GID management is really great with this feature because cubelet will handle allocation and uniqueness of",
    "start": "1756860",
    "end": "1763399"
  },
  {
    "text": "these uids as seen on the host and so you don't basically have to do this this problem completely goes away",
    "start": "1763399",
    "end": "1770179"
  },
  {
    "text": "support for host file systems and other host things is a big maybe with this feature and so",
    "start": "1770179",
    "end": "1777559"
  },
  {
    "text": "hopefully some of the solutions that we showed around running thing is non-root",
    "start": "1777559",
    "end": "1783380"
  },
  {
    "text": "um while still accessing things on the host help you with that uh root capability management is again",
    "start": "1783380",
    "end": "1789679"
  },
  {
    "text": "great because having capabilities inside the username space are only valid in that namespace and not",
    "start": "1789679",
    "end": "1796580"
  },
  {
    "text": "valid anywhere else so they'll go out everywhere else so this feature also fixes that challenge",
    "start": "1796580",
    "end": "1802880"
  },
  {
    "text": "with that I'm going to hand it over to Greg cool uh thanks so much",
    "start": "1802880",
    "end": "1811279"
  },
  {
    "text": "all right where do we get to here hopefully we convinced you that there's quite a lot of security value in running",
    "start": "1811279",
    "end": "1816919"
  },
  {
    "text": "is non-root and you're motivated and excited about doing that so if you're a container owner and you're watching this",
    "start": "1816919",
    "end": "1823220"
  },
  {
    "text": "talk it would be great if you migrated your own containers uh to running as an enroute just make the whole internet",
    "start": "1823220",
    "end": "1829039"
  },
  {
    "text": "safer and no one will even really notice probably in most cases but things will just be much safer if you're watching",
    "start": "1829039",
    "end": "1835760"
  },
  {
    "text": "this talk and you're thinking about well I have a whole ton of containers or a whole company of containers that I want to try and do this with then hopefully",
    "start": "1835760",
    "end": "1843440"
  },
  {
    "text": "you can use those strategies that we showed about how you can sort of set up a program to migrate these and the",
    "start": "1843440",
    "end": "1849679"
  },
  {
    "text": "stateless ones are fairly easy so if that's most of your containers then uh hopefully it's not too much work and as",
    "start": "1849679",
    "end": "1855919"
  },
  {
    "text": "we as we sort of like explained the volume Mount ones are a sort of where the difficulty is and really this host",
    "start": "1855919",
    "end": "1861380"
  },
  {
    "text": "users feature should make this a bit easier easier in the future so thanks for coming and and watching",
    "start": "1861380",
    "end": "1869419"
  },
  {
    "text": "The Talk uh please there's a QR code here to send you to the schedule where you can leave feedback the slides are",
    "start": "1869419",
    "end": "1875840"
  },
  {
    "text": "also there the demo code is is linked here and we've also got a big pile of links of all the things that we linked",
    "start": "1875840",
    "end": "1881000"
  },
  {
    "text": "on the slides thanks a lot",
    "start": "1881000",
    "end": "1885100"
  }
]