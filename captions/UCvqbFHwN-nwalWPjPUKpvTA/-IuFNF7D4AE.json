[
  {
    "text": "hi welcome to easy secure and fast using nats.i o for streams and services",
    "start": "80",
    "end": "7520"
  },
  {
    "text": "let me introduce myself my name is colin sullivan i run product at cynadia.com or that's nadia",
    "start": "8240",
    "end": "14240"
  },
  {
    "text": "uh i'm a nat i've been a nascor maintainer for about five years now and i've been building distributed",
    "start": "14240",
    "end": "20240"
  },
  {
    "text": "systems for over 20 years today we'll talk about uh gnats in general we'll talk about streams and",
    "start": "20240",
    "end": "26960"
  },
  {
    "text": "services topology um security and then some additional features",
    "start": "26960",
    "end": "32160"
  },
  {
    "text": "and the roadmap and throughout this presentation you'll see how streams and services or application",
    "start": "32160",
    "end": "38000"
  },
  {
    "text": "patterns topology and security can be put together to make some very powerful solutions",
    "start": "38000",
    "end": "44160"
  },
  {
    "text": "first off what is nantz nance is a 10 year old production proven cloud native distributed communication system nats",
    "start": "44160",
    "end": "51360"
  },
  {
    "text": "was made for developers and operators who just want to do their jobs you don't want to think about managing a messaging system so",
    "start": "51360",
    "end": "59520"
  },
  {
    "text": "what's important to us is performance simplicity security and availability nash was built",
    "start": "59520",
    "end": "64960"
  },
  {
    "text": "from the ground up to be cloud native cloud foundry was actually its first use case",
    "start": "64960",
    "end": "70000"
  },
  {
    "text": "uh nat supports multiple qualities of service we support multiple communication patterns",
    "start": "70000",
    "end": "75119"
  },
  {
    "text": "and over 40 types of clients so we should have you covered",
    "start": "75119",
    "end": "80560"
  },
  {
    "text": "nancy's used for cloud messaging with microservices services event and data streaming uh command and",
    "start": "80560",
    "end": "87759"
  },
  {
    "text": "control and more and more we're finding that people are using nets and extending out to the edge",
    "start": "87759",
    "end": "93520"
  },
  {
    "text": "where there's iot and edge components with telemetry sensor data and again more command and control and",
    "start": "93520",
    "end": "100560"
  },
  {
    "text": "also a number of our users are using nets to augment or replace legacy messaging",
    "start": "100560",
    "end": "105600"
  },
  {
    "text": "technologies where they might currently have an investment in some legacy technology but want to extend out into the cloud",
    "start": "105600",
    "end": "112000"
  },
  {
    "text": "and bridge into gnats for that we uh joined cncf as an incubation",
    "start": "112000",
    "end": "118000"
  },
  {
    "text": "project in 2018 and we're part of the messaging and streaming projects",
    "start": "118000",
    "end": "124159"
  },
  {
    "text": "and we have over a thousand contributors over the last 10 years with a hundred or more with more than 10 commits we've got",
    "start": "124159",
    "end": "131120"
  },
  {
    "text": "quite a few public repositories we're hoping to break 20 000 github stars across all the",
    "start": "131120",
    "end": "136239"
  },
  {
    "text": "repositories this year we've got about 130 million doctor pulse",
    "start": "136239",
    "end": "141920"
  },
  {
    "text": "between nat server and that streaming server a very healthy slack community and a good cadence of net server",
    "start": "141920",
    "end": "149120"
  },
  {
    "text": "releases since uh 2014 with about five a year nance was created by derek hollis and",
    "start": "149120",
    "end": "155200"
  },
  {
    "text": "derek's been solving the really hard problems in distributed computing over the last 30 years",
    "start": "155200",
    "end": "161280"
  },
  {
    "text": "around gnats derek built a highly experienced messaging team and uh and and from that we have a very",
    "start": "161280",
    "end": "167840"
  },
  {
    "text": "very engaged user community i'm i'm very happy with our nats community it is great to see",
    "start": "167840",
    "end": "173920"
  },
  {
    "text": "people jump in and help on slack and watch community members help each other",
    "start": "173920",
    "end": "180239"
  },
  {
    "text": "in terms of end users we really nats is a very utilitarian type of technology so it's",
    "start": "180239",
    "end": "186400"
  },
  {
    "text": "very horizontal so we've got end users of all sizes in all different verticals",
    "start": "186400",
    "end": "193440"
  },
  {
    "text": "that's a simple the server which is our basic network element is a single binary it's deployable anywhere",
    "start": "193840",
    "end": "201760"
  },
  {
    "text": "it's very small with about a 10 megabyte docker image this lets it spin up very quickly in the",
    "start": "201760",
    "end": "206879"
  },
  {
    "text": "cloud the protocol itself that nats uses to speak to the clients is",
    "start": "206879",
    "end": "211920"
  },
  {
    "text": "text-based now don't get that confused that we can send any type of payload but the very simple protocol makes it",
    "start": "211920",
    "end": "218239"
  },
  {
    "text": "easy to write clients and that's why we have so many of them nance is low configuration when a client",
    "start": "218239",
    "end": "224080"
  },
  {
    "text": "connects to the server it doesn't need to know anything about the topology it just needs a url and credentials",
    "start": "224080",
    "end": "229599"
  },
  {
    "text": "servers can auto discover you can share configuration files among servers and nas is very easy to code to it's a",
    "start": "229599",
    "end": "236640"
  },
  {
    "text": "very simple and straightforward api we've got a number of nats clients that",
    "start": "236640",
    "end": "241920"
  },
  {
    "text": "are supported by the nat support and that's maintainers as well as the community with many different languages many",
    "start": "241920",
    "end": "248480"
  },
  {
    "text": "different bindings now let's talk a bit about message patterns and this is",
    "start": "248480",
    "end": "254080"
  },
  {
    "text": "these are are how your applications communicate with each other and we tend to like to think of these in",
    "start": "254080",
    "end": "260400"
  },
  {
    "text": "two buckets streams and services a stream is a flow of data it's just a number of messages going out",
    "start": "260400",
    "end": "268560"
  },
  {
    "text": "and streams can fan out you might have a stream of data you fan out to a thousand or ten thousand or a million",
    "start": "268560",
    "end": "275360"
  },
  {
    "text": "subscribers then we have the concept of services services are where i want to",
    "start": "275360",
    "end": "280960"
  },
  {
    "text": "ask an application to do some work and then return the result services are by far the most common that",
    "start": "280960",
    "end": "287280"
  },
  {
    "text": "we see and services can be load balanced streams and services at the application",
    "start": "287280",
    "end": "295280"
  },
  {
    "text": "level when you go to code really fall into a couple patterns which is request reply these are your services",
    "start": "295280",
    "end": "301440"
  },
  {
    "text": "this is your rpc publish subscribe which is uh the basis for request reply",
    "start": "301440",
    "end": "307120"
  },
  {
    "text": "but pure pub sub is just a stream of data and then you have load balance q subscribers",
    "start": "307120",
    "end": "312800"
  },
  {
    "text": "where nats can load balance and we do have a new higher level api coming",
    "start": "312800",
    "end": "317919"
  },
  {
    "text": "that more closely reflects this concept of applications being a stream and or a service",
    "start": "317919",
    "end": "325840"
  },
  {
    "text": "before we talk about patterns let's let's talk about subjects and how data gets from one application",
    "start": "327039",
    "end": "334720"
  },
  {
    "text": "to another nat routes data based on interest so an application will register a",
    "start": "334720",
    "end": "342160"
  },
  {
    "text": "subscriber with a subject indicating interest in something so there's a very simple",
    "start": "342160",
    "end": "347520"
  },
  {
    "text": "subject your everlasting foo example or let's take something more concrete i'm interested in weather so i",
    "start": "347520",
    "end": "353039"
  },
  {
    "text": "create a subscriber for weather these can be hierarchically tokenized so food.r or",
    "start": "353039",
    "end": "359639"
  },
  {
    "text": "weather.us.colorado.denver this allows you to use wildcard subscriptions to create some very complex filtering",
    "start": "359639",
    "end": "366960"
  },
  {
    "text": "and then also you can use unique subjects to create a logical one-to-one",
    "start": "366960",
    "end": "373120"
  },
  {
    "text": "relationship between two applications",
    "start": "373120",
    "end": "377360"
  },
  {
    "text": "streams are pretty simple nats will fan out published messages to all interested subscribers it might be one subscriber",
    "start": "378720",
    "end": "385199"
  },
  {
    "text": "it might be a million but uh nats takes care of that and you can add or remove subscribers",
    "start": "385199",
    "end": "390479"
  },
  {
    "text": "anytime at runtime with no configuration nats will just do the right thing and start routing information to them",
    "start": "390479",
    "end": "397439"
  },
  {
    "text": "the code to set up a stream today is is very very simple you connect to a net",
    "start": "397680",
    "end": "403280"
  },
  {
    "text": "server you subscribe to a stream in this case i'm interested in data arriving on foo",
    "start": "403280",
    "end": "409840"
  },
  {
    "text": "when that data arrives i'm just going to print it out that's that log print line and then the corresponding publish to",
    "start": "409840",
    "end": "416080"
  },
  {
    "text": "get that data out onto foo is just the publish api there extremely simple this is actually could",
    "start": "416080",
    "end": "423280"
  },
  {
    "text": "be a working application right here services are your one-to-one you can use",
    "start": "423280",
    "end": "428639"
  },
  {
    "text": "unique reply subjects where you make a request the service does some work and returns a response",
    "start": "428639",
    "end": "435360"
  },
  {
    "text": "here's the service api code so you connect in this case to a local net server you subscribe i'm going to be offering a",
    "start": "435360",
    "end": "442479"
  },
  {
    "text": "service on the subject of help and then when someone says can you help",
    "start": "442479",
    "end": "447759"
  },
  {
    "text": "i'm going to say yes i'm going to respond with a message that says i can help on the requester side i uh",
    "start": "447759",
    "end": "454800"
  },
  {
    "text": "below i issue a request for help say that i need some help wait a second up to a second for a",
    "start": "454800",
    "end": "460560"
  },
  {
    "text": "response and then just print the response when i get it that's it it's it's very straightforward very easy to code the nets",
    "start": "460560",
    "end": "468319"
  },
  {
    "text": "nance can also act as a layer 7 load balancer so when subscribers uh subscribe they",
    "start": "468319",
    "end": "474560"
  },
  {
    "text": "can choose to be grouped together in a um in a queue group when we call it a cue",
    "start": "474560",
    "end": "480639"
  },
  {
    "text": "group it's actually more like a work cue it essentially creates a pre competing consumer pattern",
    "start": "480639",
    "end": "487120"
  },
  {
    "text": "but what happens is the nat server will then um randomly distribute messages",
    "start": "487120",
    "end": "494319"
  },
  {
    "text": "to these subscribers and this allows you to set up a service",
    "start": "494319",
    "end": "499840"
  },
  {
    "text": "and set up a number of services that will automatically scale as if it were a",
    "start": "499840",
    "end": "505280"
  },
  {
    "text": "layer 7 load balancer again you can add these services anytime remove them anytime and that",
    "start": "505280",
    "end": "511440"
  },
  {
    "text": "just does the right thing no additional configuration this allows you to very very easily scale",
    "start": "511440",
    "end": "518159"
  },
  {
    "text": "so now that we've covered our patterns in the at the application level let's talk about topology topology is",
    "start": "518959",
    "end": "525040"
  },
  {
    "text": "the plumbing uh or you know think of it like the electrical grid for your messages this is where messages may arise",
    "start": "525040",
    "end": "533120"
  },
  {
    "text": "and nats has a number of building blocks for topology the lowest common denominator the simplest thing is",
    "start": "533279",
    "end": "539519"
  },
  {
    "text": "your server that's like a network element servers can be grouped together to form one cohesive unit called a cluster",
    "start": "539519",
    "end": "545680"
  },
  {
    "text": "that provides higher availability and lets you scale clusters can be clustered",
    "start": "545680",
    "end": "552080"
  },
  {
    "text": "together to create what we call a super cluster and outside of these clusters are leaf nodes which are net servers",
    "start": "552080",
    "end": "559120"
  },
  {
    "text": "that kind of act as a client they aren't part of a cluster but they're connected to it and can",
    "start": "559120",
    "end": "564160"
  },
  {
    "text": "and can relay messages to and from it the very very simple setup which is what",
    "start": "564160",
    "end": "570160"
  },
  {
    "text": "most developers will do on their on their machines is a single server with a couple of net's clients",
    "start": "570160",
    "end": "575279"
  },
  {
    "text": "connected to it clusters when you cluster net servers are full hop",
    "start": "575279",
    "end": "580480"
  },
  {
    "text": "or a full mesh one hop that means uh nat servers will always route messages",
    "start": "580480",
    "end": "586160"
  },
  {
    "text": "in the shortest number of hops that that are available",
    "start": "586160",
    "end": "591200"
  },
  {
    "text": "clusters clustered together our super clusters again we use what are called gateway connections between the clusters",
    "start": "591200",
    "end": "597040"
  },
  {
    "text": "uh gateway connections are optimized for a wan optimized for low late or optimized for higher latency",
    "start": "597040",
    "end": "604000"
  },
  {
    "text": "lower bandwidth connections and any number of clusters can be grouped together uh in a super cluster",
    "start": "604000",
    "end": "610880"
  },
  {
    "text": "at synadia we have a massive super cluster spread out across uh various cloud vendors over the",
    "start": "610880",
    "end": "617680"
  },
  {
    "text": "whole over the globe so um so you can make these as large or small as you need to",
    "start": "617680",
    "end": "624320"
  },
  {
    "text": "and leaf nodes leaf nodes a single nat server extended out from a cluster they extend via hub and spoke technology",
    "start": "624320",
    "end": "631839"
  },
  {
    "text": "they do a couple different things they let you bridge different security domains so you might use nat security within",
    "start": "631839",
    "end": "637680"
  },
  {
    "text": "your main deployment and a leaf node might use a different security scheme",
    "start": "637680",
    "end": "642800"
  },
  {
    "text": "out on an edge device or remote node these are ideal for edge",
    "start": "642800",
    "end": "649519"
  },
  {
    "text": "computing iot hubs data centers anything that's remote that needs to be connected into a central",
    "start": "649519",
    "end": "655920"
  },
  {
    "text": "central deployment and then they can also transparently bridge on premise and cloud deployments remember",
    "start": "655920",
    "end": "662000"
  },
  {
    "text": "that nat's clients don't care about the topology at all they just know that they're connected to nets",
    "start": "662000",
    "end": "668959"
  },
  {
    "text": "here's a global deployment an example of a global deployment where you might have",
    "start": "669360",
    "end": "674399"
  },
  {
    "text": "a nas cluster running in kubernetes in san diego a nas cluster running on vms in berlin",
    "start": "674399",
    "end": "679760"
  },
  {
    "text": "and another one in london on kubernetes you have a remote data center uh that's",
    "start": "679760",
    "end": "684880"
  },
  {
    "text": "clustered together with some services streams connected into san diego and then a leaf node that might be like a",
    "start": "684880",
    "end": "691600"
  },
  {
    "text": "set-top box with devices connected to it",
    "start": "691600",
    "end": "696880"
  },
  {
    "text": "now the third part is security and nat's uh security has some basics so",
    "start": "697839",
    "end": "704640"
  },
  {
    "text": "we have full tls support mtls we support dns or subject alternative names",
    "start": "704640",
    "end": "709839"
  },
  {
    "text": "uh to be used as identities we have a standard user password authorization",
    "start": "709839",
    "end": "715600"
  },
  {
    "text": "you can set permissions on what applications or what users can send and receive and what subjects you",
    "start": "715600",
    "end": "722240"
  },
  {
    "text": "can change these at any time with zero downtime you can adjust the config have the next",
    "start": "722240",
    "end": "727920"
  },
  {
    "text": "server re-read it at runtime and it'll do the right thing and then with operator mode in that's",
    "start": "727920",
    "end": "734480"
  },
  {
    "text": "2.0 which which is about been out for about a year and a half nat supports multi-tenancy with",
    "start": "734480",
    "end": "741680"
  },
  {
    "text": "operator mode so in operator mode you define an operator which is really the owner of the net's",
    "start": "741680",
    "end": "747360"
  },
  {
    "text": "deployment you have accounts and underneath accounts you have users",
    "start": "747360",
    "end": "754560"
  },
  {
    "text": "and nats allows you to set up this chain of trust between operators accounts and",
    "start": "756000",
    "end": "761279"
  },
  {
    "text": "users within a deployment and operators the root of trust for the system so that's like an enterprise",
    "start": "761279",
    "end": "768560"
  },
  {
    "text": "underneath the operator you create accounts for account administrators an account represents an organization um",
    "start": "768560",
    "end": "775200"
  },
  {
    "text": "it might be a team it might be a group of microservices it might be an it group that's uh monitoring the",
    "start": "775200",
    "end": "780720"
  },
  {
    "text": "entire nas deployment an account creation would likely be managed by a central group",
    "start": "780720",
    "end": "786800"
  },
  {
    "text": "and then underneath accounts our accounts can expose streams and services and underneath accounts you have users",
    "start": "786800",
    "end": "794079"
  },
  {
    "text": "that have specific credentials and permissions",
    "start": "794079",
    "end": "800000"
  },
  {
    "text": "so accounts are isolated communication context what um what accounts do are when you've",
    "start": "800000",
    "end": "806000"
  },
  {
    "text": "got multiple accounts on a server applications connect into those accounts those messages will never cross those",
    "start": "806000",
    "end": "811519"
  },
  {
    "text": "account boundaries that allows you to bifurcate technology from business driven use cases",
    "start": "811519",
    "end": "818560"
  },
  {
    "text": "that allows you to create data silos um based on these accounts it's secure and",
    "start": "818560",
    "end": "824800"
  },
  {
    "text": "cost effective so onenet's deployment is managed by an operator",
    "start": "824800",
    "end": "830000"
  },
  {
    "text": "yet teams can be decentralized and self-managed but when data does need to be shared",
    "start": "830000",
    "end": "836000"
  },
  {
    "text": "between these accounts you can share them with secure streams and services so one account might offer a service on",
    "start": "836000",
    "end": "842959"
  },
  {
    "text": "subject foo another account might say hey i want that service it will import",
    "start": "842959",
    "end": "848000"
  },
  {
    "text": "um that service on foo and suddenly that's available and only with mutual agreement will data",
    "start": "848000",
    "end": "854079"
  },
  {
    "text": "flow between accounts",
    "start": "854079",
    "end": "857839"
  },
  {
    "text": "in gnats identities are represented by n keys which are housed in jwts",
    "start": "859839",
    "end": "867680"
  },
  {
    "text": "n keys are ed255 keys made easy and associated with these m",
    "start": "867680",
    "end": "873440"
  },
  {
    "text": "keys would be a user an account a cluster or server we used ed25519 because it's fast and",
    "start": "873440",
    "end": "881680"
  },
  {
    "text": "resistant side channel attacks we use those to sign and verify and we use them in such a way that nat's",
    "start": "881680",
    "end": "888959"
  },
  {
    "text": "system will never see private keys without getting into details that server",
    "start": "888959",
    "end": "896160"
  },
  {
    "text": "sends a non-stern connect the client signs the notes with its private key and then the server verifies",
    "start": "896160",
    "end": "901600"
  },
  {
    "text": "that the client belongs to an account known by the server long story short this is letting ads approach a zero",
    "start": "901600",
    "end": "909040"
  },
  {
    "text": "trust system and all this stuff is managed by by the nsc command line interface",
    "start": "909040",
    "end": "915360"
  },
  {
    "text": "so it's pretty easy to use to be able to set up these users uh you don't have to worry about these details at all",
    "start": "915360",
    "end": "923199"
  },
  {
    "text": "when you combine topology and security with your application patterns we create the adaptive edge",
    "start": "923199",
    "end": "930320"
  },
  {
    "text": "architecture so over time we found as many companies have come to us and",
    "start": "930320",
    "end": "936639"
  },
  {
    "text": "users have come to us we found a pattern emerge and if you squint they all look the same",
    "start": "936639",
    "end": "942639"
  },
  {
    "text": "where you have this central central deployment with some streams and services attached to it that's available",
    "start": "942639",
    "end": "948399"
  },
  {
    "text": "for everything and then remotes they might have their own services their own streams some of which might be shared",
    "start": "948399",
    "end": "954800"
  },
  {
    "text": "some which might be might not and depends on policy",
    "start": "954800",
    "end": "960720"
  },
  {
    "text": "but then you have these remote deployments that are all linked together to create a massive global deployment",
    "start": "960720",
    "end": "968160"
  },
  {
    "text": "this is essentially the iot or the edge use case and we found that through a combination",
    "start": "968160",
    "end": "974639"
  },
  {
    "text": "of leaf nodes clusters and super clusters nats can handle this very well and",
    "start": "974639",
    "end": "980880"
  },
  {
    "text": "if you look at how this can be applied to different verticals um this pattern is very powerful so very",
    "start": "980880",
    "end": "987519"
  },
  {
    "text": "very powerful so example in retail you might have a regional headquarters uh it will have some ad reward programs",
    "start": "987519",
    "end": "994880"
  },
  {
    "text": "coupons logistics uh centralized inventory where the remotes are the stores and",
    "start": "994880",
    "end": "1000800"
  },
  {
    "text": "then you have pos devices connected into the remote that then utilizes these",
    "start": "1000800",
    "end": "1006079"
  },
  {
    "text": "streams and services or maybe even provides their own streams coming of stores",
    "start": "1006079",
    "end": "1011440"
  },
  {
    "text": "coming back to the central this is repeated over and over again for different use cases and we found",
    "start": "1011440",
    "end": "1017680"
  },
  {
    "text": "that you know again it's the it's a similar pattern in terms of topology what changes",
    "start": "1017680",
    "end": "1022959"
  },
  {
    "text": "are your streams and services and your security",
    "start": "1022959",
    "end": "1028000"
  },
  {
    "text": "here's an example where multiple airlines or airports multiple airports are super",
    "start": "1028959",
    "end": "1036240"
  },
  {
    "text": "clustered together in the eu and extending out of the super cluster",
    "start": "1036240",
    "end": "1041280"
  },
  {
    "text": "are leaf nodes inside terminals and concourses even planes this is your plumbing this is your",
    "start": "1041280",
    "end": "1047520"
  },
  {
    "text": "wiring but then in terms of data flow you've got a weather service",
    "start": "1047520",
    "end": "1053200"
  },
  {
    "text": "where different airlines and airports can use this weather service but the airlines themselves will never",
    "start": "1053200",
    "end": "1059440"
  },
  {
    "text": "talk to each other these are all set up by accounts and streams streams and service sharing",
    "start": "1059440",
    "end": "1067840"
  },
  {
    "text": "now let's segue into performance and scalability nats performs extremely well with about",
    "start": "1069200",
    "end": "1075360"
  },
  {
    "text": "18 million messages a second and one server one data stream 80 million messages a",
    "start": "1075360",
    "end": "1080400"
  },
  {
    "text": "second with multiple services some of this is is a vanity metric",
    "start": "1080400",
    "end": "1085760"
  },
  {
    "text": "but it translates into scalability and resource utilization so if a single",
    "start": "1085760",
    "end": "1091200"
  },
  {
    "text": "net server can handle 18 million messages a second that means if you only need a few",
    "start": "1091200",
    "end": "1096400"
  },
  {
    "text": "thousand messages a second or twenty thousand messages a second a single net server is going to do you well for a long time you aren't gonna",
    "start": "1096400",
    "end": "1102799"
  },
  {
    "text": "have to scale for a while and also you can use less compute resources to do the same thing you might be able",
    "start": "1102799",
    "end": "1109840"
  },
  {
    "text": "to with a different system the health and availability of the",
    "start": "1109840",
    "end": "1117440"
  },
  {
    "text": "system in the whole is prioritized in nas traditional messaging systems would",
    "start": "1117440",
    "end": "1124720"
  },
  {
    "text": "would spend resources on trying to make sure that a poorly behaving application always got the message that doesn't work",
    "start": "1124720",
    "end": "1131280"
  },
  {
    "text": "in cloud so to that end the nat server performs selfish optimization if there is a poorly behaving client or",
    "start": "1131280",
    "end": "1138640"
  },
  {
    "text": "poorly behaving server then that server will cut it off and then at that point",
    "start": "1138640",
    "end": "1144160"
  },
  {
    "text": "an operator will look at it we've got full mesh clustering in the net servers and the server and client connection",
    "start": "1144160",
    "end": "1149360"
  },
  {
    "text": "cell field this creates a low maintenance",
    "start": "1149360",
    "end": "1154799"
  },
  {
    "text": "always on always available deployment for that",
    "start": "1154799",
    "end": "1159279"
  },
  {
    "text": "nets also has auto discovery what this means is as you scale up or scale down net",
    "start": "1160799",
    "end": "1167280"
  },
  {
    "text": "servers in a cluster this information is shared with the other nat server so you don't have to do additional configuration",
    "start": "1167280",
    "end": "1173200"
  },
  {
    "text": "you don't have to bring anything down or bring it back up again to change your topology and this information is also shared with",
    "start": "1173200",
    "end": "1179120"
  },
  {
    "text": "clients that means clients can fail over to servers they were never originally configured with",
    "start": "1179120",
    "end": "1184480"
  },
  {
    "text": "uh and these are great for rolling upgrades or you know even swapping out your back end",
    "start": "1184480",
    "end": "1189520"
  },
  {
    "text": "with different machines if you need to upgrade machines do whatever you need to do your clients can remain running we have",
    "start": "1189520",
    "end": "1197440"
  },
  {
    "text": "a couple different message guarantees uh at its core we support at most once where there's no",
    "start": "1197440",
    "end": "1203919"
  },
  {
    "text": "guarantee of delivery or messages can be lost this sounds harsh but it's how the internet",
    "start": "1203919",
    "end": "1210240"
  },
  {
    "text": "works today and then we have at least once which are where a message will always be delivered",
    "start": "1210240",
    "end": "1215919"
  },
  {
    "text": "in certain cases certain air conditions it can be delivered more than once i've always said in the past",
    "start": "1215919",
    "end": "1221360"
  },
  {
    "text": "exactly once it's unnecessarily complex it's always slow",
    "start": "1221360",
    "end": "1226559"
  },
  {
    "text": "but due to popular demand we're going to support it in jet stream",
    "start": "1226559",
    "end": "1232799"
  },
  {
    "text": "jet stream is uh the next generation of net streaming it uh supports there's a lot of overlap",
    "start": "1233360",
    "end": "1239760"
  },
  {
    "text": "with that streaming but it also supports wild card support and that's 2.0 security so it's screen",
    "start": "1239760",
    "end": "1244799"
  },
  {
    "text": "it's account aware uh it's got data at rest encryption you can clean specific messages",
    "start": "1244799",
    "end": "1251520"
  },
  {
    "text": "so this was a request that really helps out with gdpr and horizontal scalability so as you",
    "start": "1251520",
    "end": "1257600"
  },
  {
    "text": "need to scale you just launch more jet stream servers and uh like nat streaming you can replay",
    "start": "1257600",
    "end": "1264559"
  },
  {
    "text": "messages by timer sequence so there is an overlap uh nat streaming",
    "start": "1264559",
    "end": "1271440"
  },
  {
    "text": "continued to be supported we've got millions and millions of docker downloads we know it's deployed globally",
    "start": "1271440",
    "end": "1277200"
  },
  {
    "text": "uh in production so to that end we'll provide bug fixes and security fixes until june",
    "start": "1277200",
    "end": "1283200"
  },
  {
    "text": "of 2022. that being said moving forward new nats enabled applications that need streaming",
    "start": "1283200",
    "end": "1289360"
  },
  {
    "text": "should prefer jet stream uh we'll provide a migration path and new gnats development",
    "start": "1289360",
    "end": "1295919"
  },
  {
    "text": "as it relates to streaming will occur in jet stream here are some additional features of",
    "start": "1295919",
    "end": "1302240"
  },
  {
    "text": "gnats we have distributed tracing and we use open tracing we've got reference",
    "start": "1302240",
    "end": "1307520"
  },
  {
    "text": "architectures in java and go and this allows you to use gnats to trace",
    "start": "1307520",
    "end": "1314400"
  },
  {
    "text": "messages in your application across you know microservices or what have you",
    "start": "1314400",
    "end": "1321039"
  },
  {
    "text": "we've got a number of integrations into spring kafka uh we're working on a jms bridge right",
    "start": "1321120",
    "end": "1326559"
  },
  {
    "text": "now and we do have an mq series uh adapter or bridge",
    "start": "1326559",
    "end": "1332799"
  },
  {
    "text": "we have nat surveyor so surveyor can monitor your entire entire deployment from one",
    "start": "1332799",
    "end": "1339200"
  },
  {
    "text": "entry point into nas um it provides a comprehensive view of the entire announced deployment so",
    "start": "1339200",
    "end": "1345520"
  },
  {
    "text": "if i've got surveyor running on my laptop i just connect to my nat's deployment and i can see everything so long as i have the right",
    "start": "1345520",
    "end": "1352400"
  },
  {
    "text": "credentials this makes this prevents you from having to install a lot of side cars",
    "start": "1352400",
    "end": "1357440"
  },
  {
    "text": "to monitor nas and we use grafana as a dashboard we",
    "start": "1357440",
    "end": "1364559"
  },
  {
    "text": "provide centralized visualization but you can also drill down into and look at individual servers and then",
    "start": "1364559",
    "end": "1373120"
  },
  {
    "text": "we work well in kubernetes uh we've got a single command line to install a",
    "start": "1373120",
    "end": "1378799"
  },
  {
    "text": "full nats cluster in a kubernetes deployment it defaults and installs gnats as a stateful set and uh",
    "start": "1378799",
    "end": "1385440"
  },
  {
    "text": "along with that we give you a surveyor installation so you can see what's going on and our roadmap moving forward in the",
    "start": "1385440",
    "end": "1392880"
  },
  {
    "text": "latest release we've got websocket support in the nat server we've got a websocket client",
    "start": "1392880",
    "end": "1398400"
  },
  {
    "text": "number of leaf nodes improvements coming up in q3 uh will be the ga release of jet stream",
    "start": "1398400",
    "end": "1405120"
  },
  {
    "text": "it has been uh in tech preview for a while we've gotten some excellent feedback and the the ga release will be um will",
    "start": "1405120",
    "end": "1412480"
  },
  {
    "text": "support clustering with high availability fault tolerance and then scalability as well",
    "start": "1412480",
    "end": "1418080"
  },
  {
    "text": "we are we have added message headers or we're in the process of adding message headers uh we're doing this in such a way that",
    "start": "1418080",
    "end": "1424720"
  },
  {
    "text": "it will not affect the fast path so you'll get the same performance you've always gotten out of",
    "start": "1424720",
    "end": "1429760"
  },
  {
    "text": "nats we've just added to the protocol uh we have a nats jms bridge and then",
    "start": "1429760",
    "end": "1435679"
  },
  {
    "text": "we've got those service and streams apis i talked about earlier in q4 we're going to support native mqtt",
    "start": "1435679",
    "end": "1443159"
  },
  {
    "text": "mqtt311 there's a lot of mqtt deployments we found that in bridging",
    "start": "1443159",
    "end": "1448880"
  },
  {
    "text": "iot and devices and edge compute with the cloud nats is a just a really",
    "start": "1448880",
    "end": "1454799"
  },
  {
    "text": "cool solution to do that so we're going to uh you know adopt mqtt",
    "start": "1454799",
    "end": "1460480"
  },
  {
    "text": "as native natively supported in the net server we'll have monitor enhancements uh nats kafka bridge enhancements and",
    "start": "1460480",
    "end": "1467200"
  },
  {
    "text": "we're going to do some additional things to get from edge to edge zero trust security and then the first half of next year",
    "start": "1467200",
    "end": "1474880"
  },
  {
    "text": "further um investment into mqtt uh web assembly support in the nas",
    "start": "1474880",
    "end": "1480799"
  },
  {
    "text": "ecosystem where the annax deployment might be able to run small sections of code that can",
    "start": "1480799",
    "end": "1486000"
  },
  {
    "text": "act as a small application or filter messages and then as always we're providing",
    "start": "1486000",
    "end": "1492960"
  },
  {
    "text": "additional apps and dev tooling with additional distributed tracing and then",
    "start": "1492960",
    "end": "1498159"
  },
  {
    "text": "system-wide debug tooling so i thank you so much for your time and",
    "start": "1498159",
    "end": "1504480"
  },
  {
    "text": "um you know i'd just like to open it up for any questions uh that you might have",
    "start": "1504480",
    "end": "1515840"
  },
  {
    "text": "okay so um some questions that i've been asked is uh does nasa",
    "start": "1516480",
    "end": "1523360"
  },
  {
    "text": "count for a client dropping away in this in the load balance setup we'll retry another client",
    "start": "1523360",
    "end": "1528960"
  },
  {
    "text": "it really depends on whether you're using cornets or streaming with cornets",
    "start": "1528960",
    "end": "1536640"
  },
  {
    "text": "that that happens at the application layer so you make a request into a service and that request might time out and then",
    "start": "1536640",
    "end": "1544000"
  },
  {
    "text": "you would try retry the request on the back side if let's say you're responding to the",
    "start": "1544000",
    "end": "1550000"
  },
  {
    "text": "request your application drops crashes what have you that request will",
    "start": "1550000",
    "end": "1555279"
  },
  {
    "text": "simply remain unfulfilled it's up to the requester to retry with um if you do use persistence",
    "start": "1555279",
    "end": "1563039"
  },
  {
    "text": "and it's it's kind of an anti-pattern with request reply but persistence will retry q subscribers so",
    "start": "1563039",
    "end": "1570000"
  },
  {
    "text": "if you use jet stream or not streaming it'll retract you subscribers",
    "start": "1570000",
    "end": "1575120"
  },
  {
    "text": "one more note about low balance q subscribers is we do have an api to gracefully exit",
    "start": "1575360",
    "end": "1583360"
  },
  {
    "text": "where you drain a connection you let the net server know hey i'm going away and then you continue to",
    "start": "1583360",
    "end": "1589120"
  },
  {
    "text": "process the rest of those messages you still have connectivity you just won't receive anymore and that's a great way to gracefully",
    "start": "1589120",
    "end": "1596400"
  },
  {
    "text": "leave a group another question uh what's the",
    "start": "1596400",
    "end": "1601919"
  },
  {
    "text": "difference between nets jetstream and kafka this is a we could spend a lot",
    "start": "1601919",
    "end": "1607440"
  },
  {
    "text": "of time on this at a high level i'll say that they're both log-based persistence",
    "start": "1607440",
    "end": "1613520"
  },
  {
    "text": "um jetstream has pull models and push models",
    "start": "1613520",
    "end": "1618960"
  },
  {
    "text": "but what i what i would encourage you to do is join our slack group and uh you know and",
    "start": "1618960",
    "end": "1625520"
  },
  {
    "text": "ask and we can go in depth and learn more about your use case to to further just differentiate",
    "start": "1625520",
    "end": "1632400"
  },
  {
    "text": "is jet stream already available it is as a tech preview uh sometime in q4 we're gonna be ga but",
    "start": "1632400",
    "end": "1638880"
  },
  {
    "text": "right now it's available as a tech preview you can download nightly builds",
    "start": "1638880",
    "end": "1644080"
  },
  {
    "text": "play around with it and like i said it'll be ready for production uh fairly soon",
    "start": "1644080",
    "end": "1651679"
  },
  {
    "text": "next question when a new subscriber's created can it retrieve historical messages from",
    "start": "1652000",
    "end": "1657200"
  },
  {
    "text": "a stream or only messages from that point and time going forward it can do either so you can",
    "start": "1657200",
    "end": "1664159"
  },
  {
    "text": "create a new subscriber and say hey replay me everything you have and whether it's from the beginning of history",
    "start": "1664159",
    "end": "1669600"
  },
  {
    "text": "or the last hour or you can create what's called a durable subscriber and a",
    "start": "1669600",
    "end": "1674720"
  },
  {
    "text": "durable subscriber just picks up where it left off so that's that's really your choice and with jetstream one",
    "start": "1674720",
    "end": "1681440"
  },
  {
    "text": "really cool feature is that you can replay messages um with a temporal context",
    "start": "1681440",
    "end": "1689120"
  },
  {
    "text": "in that it will replay messages in the same burstiness if you will at the same rate",
    "start": "1689120",
    "end": "1695919"
  },
  {
    "text": "it was originally uh the messages originally arrived which is really good for for stress testing for um qa",
    "start": "1695919",
    "end": "1704399"
  },
  {
    "text": "and just uh in case that you do need to know the uh the rate that messages are coming",
    "start": "1704399",
    "end": "1710480"
  },
  {
    "text": "in let's see about scalability on",
    "start": "1710480",
    "end": "1716799"
  },
  {
    "text": "kubernetes if you scale up in kubernetes from two to three pods is it needed to update the convince map",
    "start": "1716799",
    "end": "1724000"
  },
  {
    "text": "where the dns of the pods are defined no it's not so when you scale up",
    "start": "1724000",
    "end": "1731600"
  },
  {
    "text": "let's talk about two cases first you're scaling up servers when you scale up servers uh the servers",
    "start": "1731600",
    "end": "1738880"
  },
  {
    "text": "talk to each other and they they gossip and they they share their topology with each other",
    "start": "1738880",
    "end": "1745039"
  },
  {
    "text": "this topology is also shared with the clients so a client can um",
    "start": "1745039",
    "end": "1751039"
  },
  {
    "text": "receive this information about the new server and it knows how to connect to it then so the client can originally could",
    "start": "1751039",
    "end": "1756399"
  },
  {
    "text": "fail over to a server it was never originally configured with in terms of clients um all the client",
    "start": "1756399",
    "end": "1763440"
  },
  {
    "text": "needs to do is connect to to net so let's say i'm scaling up a service i wrote",
    "start": "1763440",
    "end": "1769120"
  },
  {
    "text": "when the service connects there's location transparency in nets so you only really care about the",
    "start": "1769120",
    "end": "1776799"
  },
  {
    "text": "subject not necessarily where that service is located in fact that service might not even be",
    "start": "1776799",
    "end": "1781840"
  },
  {
    "text": "in kubernetes if you have a leaf node deployment outside of kubernetes leafed in it can be there all that is entirely",
    "start": "1781840",
    "end": "1788640"
  },
  {
    "text": "transparent to your applications um let's see is there a way that nats",
    "start": "1788640",
    "end": "1797200"
  },
  {
    "text": "could guarantee the order of events um yes by default mats guarantees",
    "start": "1797200",
    "end": "1803600"
  },
  {
    "text": "producer order uh by producer so if you have a single producer multiple consumers they're all going to",
    "start": "1803600",
    "end": "1809840"
  },
  {
    "text": "see those messages in the same order if you have multiple producers",
    "start": "1809840",
    "end": "1815440"
  },
  {
    "text": "those messages might be mixed up depending on how they flow through the system but in terms of which producer it came",
    "start": "1815440",
    "end": "1822880"
  },
  {
    "text": "from they will always be in that same order by producer",
    "start": "1822880",
    "end": "1828799"
  },
  {
    "text": "could you shed more light on what applications need to do to ensure no event is lost so in jet stream it's",
    "start": "1830000",
    "end": "1836880"
  },
  {
    "text": "as simple as enabling jet stream turning it on and what will happen is jet stream will",
    "start": "1836880",
    "end": "1842399"
  },
  {
    "text": "re-deliver messages that are not acknowledged by the application so",
    "start": "1842399",
    "end": "1848080"
  },
  {
    "text": "that's really your decision whether to use cornets which is fire and forget or to use jetstream which provides",
    "start": "1848080",
    "end": "1853600"
  },
  {
    "text": "persistence um how does gnats compare to kafka in",
    "start": "1853600",
    "end": "1860000"
  },
  {
    "text": "your opinion uh this is a this is a very this could be a very long conversation",
    "start": "1860000",
    "end": "1867039"
  },
  {
    "text": "in in at a high level um kafka is really just a public subscribe",
    "start": "1867039",
    "end": "1872320"
  },
  {
    "text": "system nats has the request reply on top of that so nance is a little different there um",
    "start": "1872320",
    "end": "1879279"
  },
  {
    "text": "in terms of persistence kafka's log based gnats is log based uh when you enable",
    "start": "1879279",
    "end": "1886000"
  },
  {
    "text": "persistence so they're they're very similar there um there's some feature differences",
    "start": "1886000",
    "end": "1891279"
  },
  {
    "text": "um here and there generally kafka has uh more features right now as we add web",
    "start": "1891279",
    "end": "1897519"
  },
  {
    "text": "assembly we're going to be able to match those features just in a very in a different way",
    "start": "1897519",
    "end": "1903120"
  },
  {
    "text": "and be able to provide the same business uh be able to solve the same business problems just in",
    "start": "1903120",
    "end": "1908480"
  },
  {
    "text": "a slightly different way but generally in terms of kafka and gnats",
    "start": "1908480",
    "end": "1913519"
  },
  {
    "text": "we tend to like to think of things as it's an and conversation so users can choose to use gnats um",
    "start": "1913519",
    "end": "1922000"
  },
  {
    "text": "on their own they can choose to use only nats or if they already have a very heavy kafka investment",
    "start": "1922000",
    "end": "1927360"
  },
  {
    "text": "but want to move and enhance that with very lightweight messaging we do have a kafka bridge to allow that",
    "start": "1927360",
    "end": "1934159"
  },
  {
    "text": "so we work very well with kafka as well",
    "start": "1934159",
    "end": "1938398"
  },
  {
    "text": "okay um let's see here can you elaborate on what the nats cloud",
    "start": "1944000",
    "end": "1950159"
  },
  {
    "text": "event at binding adds to a solution",
    "start": "1950159",
    "end": "1955440"
  },
  {
    "text": "um well basically that's if you already have a solution that's using cloud events",
    "start": "1956000",
    "end": "1962559"
  },
  {
    "text": "then you can you know you have that schema by default nance is payload agnostic it",
    "start": "1962559",
    "end": "1969440"
  },
  {
    "text": "will just send a series of bytes it's up to your applications to agree upon what format those come",
    "start": "1969440",
    "end": "1976000"
  },
  {
    "text": "in cloud events provides a really really nice way to define hey",
    "start": "1976000",
    "end": "1982480"
  },
  {
    "text": "here's what an event looks like here's what it means here's what these fields mean and",
    "start": "1982480",
    "end": "1987760"
  },
  {
    "text": "when you add cloud events into nets you enrich gnats to provide that that schema that meaning behind messages",
    "start": "1987760",
    "end": "1997600"
  },
  {
    "text": "it looks like that's about it for questions right now",
    "start": "2002640",
    "end": "2007919"
  },
  {
    "text": "um you know i i just want to say thank you so much uh thank you so much for your time and i",
    "start": "2008159",
    "end": "2015360"
  },
  {
    "text": "know it's valuable and and we really appreciate you uh you listening to this uh please uh hop on our slack community",
    "start": "2015360",
    "end": "2023039"
  },
  {
    "text": "and uh you know if you're interested learn more about nats always happy to talk",
    "start": "2023039",
    "end": "2030398"
  }
]