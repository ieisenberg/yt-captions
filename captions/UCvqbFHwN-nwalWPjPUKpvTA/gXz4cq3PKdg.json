[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "so thanks everyone for coming super excited to be here my name is Alex",
    "start": "30",
    "end": "5910"
  },
  {
    "text": "brand I am going to be talking about certificates and how we use certificates",
    "start": "5910",
    "end": "12240"
  },
  {
    "text": "in kubernetes and all you need to know about certificates in kubernetes the only caveat is that I thought I would",
    "start": "12240",
    "end": "19619"
  },
  {
    "text": "have enough time to talk about everything certificates but half an hour is really not enough so that all there",
    "start": "19619",
    "end": "26340"
  },
  {
    "text": "should really have a star and what we're gonna be talking about just a smaller scope we're specifically going to be",
    "start": "26340",
    "end": "32668"
  },
  {
    "text": "talking about how to use certificates to produce a secure kubernetes cluster so",
    "start": "32669",
    "end": "40950"
  },
  {
    "text": "just to give you a bit of background about myself and about aprender we've been working with kubernetes since early",
    "start": "40950",
    "end": "46500"
  },
  {
    "text": "2016 when we got involved with the community we actually created the sig",
    "start": "46500",
    "end": "53280"
  },
  {
    "text": "windows so the special interest group that's leading the windows implementation of kubernetes so you can",
    "start": "53280",
    "end": "59760"
  },
  {
    "text": "run Windows containers on Windows and then I personally have been involved",
    "start": "59760",
    "end": "65549"
  },
  {
    "text": "with maintaining our open source project called the cosmetic enterprise toolkit which is a set of tools that allow you",
    "start": "65549",
    "end": "73409"
  },
  {
    "text": "to manage Orchestra operate and bootstrap kubernetes clusters on Prem or",
    "start": "73409",
    "end": "79860"
  },
  {
    "text": "on the cloud so our initial implementation of cos Matic was released",
    "start": "79860",
    "end": "85710"
  },
  {
    "text": "in November 2016 when our back wasn't quite there yet so our security model we were secure from the from the get-go but",
    "start": "85710",
    "end": "93360"
  },
  {
    "text": "our security model was very very simplistic so every single component had the same identity all the users were",
    "start": "93360",
    "end": "100170"
  },
  {
    "text": "using the same the same users so after our back came out in April 2017 we",
    "start": "100170",
    "end": "105750"
  },
  {
    "text": "actually decided to adopt it because we thought obviously it's a it's just a better model so we adopted that model",
    "start": "105750",
    "end": "112530"
  },
  {
    "text": "and that meant we had to just revamp how we generated certificates in cosmetic so",
    "start": "112530",
    "end": "119430"
  },
  {
    "text": "this talk today is going to be informed on those experiences and what we had to",
    "start": "119430",
    "end": "124649"
  },
  {
    "text": "do to revamp the generation process and how to produce a secure cluster",
    "start": "124649",
    "end": "132550"
  },
  {
    "text": "so this is the agenda as you can see there's a bunch of stuff in there hopefully we have enough time to go",
    "start": "132550",
    "end": "138340"
  },
  {
    "text": "through it but basically you know we'll talk about a couple things in that you",
    "start": "138340",
    "end": "144280"
  },
  {
    "text": "need in kubernetes and that are related to certificates to have and to run a secure cluster so I know we're in a",
    "start": "144280",
    "end": "153220"
  },
  {
    "start": "151000",
    "end": "245000"
  },
  {
    "text": "security track but I just thought I would do just a quick certificates refresher just in case yeah so the",
    "start": "153220",
    "end": "162550"
  },
  {
    "text": "certificates basically allow parties in a conversation to authenticate each",
    "start": "162550",
    "end": "168130"
  },
  {
    "text": "other so if you think about a client and a server relationship the client can",
    "start": "168130",
    "end": "173530"
  },
  {
    "text": "authenticate the server and just make sure that it's talking to who it thinks it's talking to and the server can also",
    "start": "173530",
    "end": "179320"
  },
  {
    "text": "authenticate the client using certificates so this is all this all",
    "start": "179320",
    "end": "185020"
  },
  {
    "text": "depends on the on so one way of doing this is using a third party that both",
    "start": "185020",
    "end": "192970"
  },
  {
    "text": "the server and the client both trusts so if they don't know each other they don't have a previous relationship they can",
    "start": "192970",
    "end": "200110"
  },
  {
    "text": "actually trust a third party that issue certificates to be able to trust each other so that is where the certificate",
    "start": "200110",
    "end": "206230"
  },
  {
    "text": "authority comes into play so the certificate authority is actually going to issue certificates to all these",
    "start": "206230",
    "end": "211360"
  },
  {
    "text": "parties and given that they trust the certificate authority they can then trust each other so if you think about",
    "start": "211360",
    "end": "219700"
  },
  {
    "text": "when you access your bank's website for example you want to make sure that you're talking to you're actually",
    "start": "219700",
    "end": "225790"
  },
  {
    "text": "talking to your bank servers and not some random server on the internet so what you do is you ask your bank for a",
    "start": "225790",
    "end": "231700"
  },
  {
    "text": "certificate and then you validate that certificate and given that that certificate has been signed by an",
    "start": "231700",
    "end": "237190"
  },
  {
    "text": "authority by a certificate authority that you trust you basically trust that you're talking to the the banks server",
    "start": "237190",
    "end": "244860"
  },
  {
    "text": "so that takes us to kubernetes why do I need certificates in kubernetes why do I",
    "start": "244860",
    "end": "251560"
  },
  {
    "start": "245000",
    "end": "313000"
  },
  {
    "text": "even care about certificates in kubernetes so how many of you are running a kubernetes cluster or in an",
    "start": "251560",
    "end": "257290"
  },
  {
    "text": "Operations team very nice that's awesome to see how many of you are familiar with",
    "start": "257290",
    "end": "262780"
  },
  {
    "text": "how certificates are used in kubernetes and exactly awesome very cool so as we all",
    "start": "262780",
    "end": "271330"
  },
  {
    "text": "know kubernetes is a distributed system this is a very simplistic diagram of",
    "start": "271330",
    "end": "276670"
  },
  {
    "text": "some of the interactions between all the core components in a cluster so we have",
    "start": "276670",
    "end": "282130"
  },
  {
    "text": "the API server in the middle the API server is the only component that talks to XE D and then the API server has a",
    "start": "282130",
    "end": "289420"
  },
  {
    "text": "bunch of clients including the scheduler the queue proxy the control the manager and the cubelet these are basically the",
    "start": "289420",
    "end": "295150"
  },
  {
    "text": "main the core components of your cluster and given that all these components are",
    "start": "295150",
    "end": "300370"
  },
  {
    "text": "running on different machines that are connected through a network you just want to make sure that all these interactions are secure and that all",
    "start": "300370",
    "end": "308200"
  },
  {
    "text": "these interactions are basically all the components can authenticate each other so I'm gonna walk you through how we can",
    "start": "308200",
    "end": "316480"
  },
  {
    "start": "313000",
    "end": "353000"
  },
  {
    "text": "build a secure cluster using certificate so the first thing we actually need is a",
    "start": "316480",
    "end": "322360"
  },
  {
    "text": "cluster certificate authority so the cluster certificate authority is going to be the trusted root throughout the",
    "start": "322360",
    "end": "330850"
  },
  {
    "text": "entire cluster so all the certificates that are used in the cluster are going to be signed by the cluster CA and this",
    "start": "330850",
    "end": "338050"
  },
  {
    "text": "is what's going to enable all the components to be able to authenticate each other so all the components are",
    "start": "338050",
    "end": "343450"
  },
  {
    "text": "going to trust that CA and then whenever they they're presented with a certificate they actually can trust it",
    "start": "343450",
    "end": "349000"
  },
  {
    "text": "because they've been signed by by the CA ok so now that we have the cluster CA we",
    "start": "349000",
    "end": "357280"
  },
  {
    "start": "353000",
    "end": "455000"
  },
  {
    "text": "can actually start securing some of our interactions so the first the most important interaction is the API server",
    "start": "357280",
    "end": "363190"
  },
  {
    "text": "as we all know the API server is the main entry point to the entire cluster",
    "start": "363190",
    "end": "369400"
  },
  {
    "text": "so we want to make sure that we're exposing this endpoint or the server over HTTPS and to do that we need a",
    "start": "369400",
    "end": "377800"
  },
  {
    "text": "servant certificate and the corresponding key and as you as I mentioned before the certificate is",
    "start": "377800",
    "end": "383110"
  },
  {
    "text": "going to be signed by the cluster CA which is going to allow all the components that are using or that are",
    "start": "383110",
    "end": "388840"
  },
  {
    "text": "communicating with the API server to be able to authenticate it so there is an",
    "start": "388840",
    "end": "395080"
  },
  {
    "text": "important gotcha here with with certificates for the master and that is that when",
    "start": "395080",
    "end": "400610"
  },
  {
    "text": "you're setting up multiple API servers when you want to have an H a cluster you",
    "start": "400610",
    "end": "407150"
  },
  {
    "text": "actually want to make sure that the load balancers IP address and DNS name is",
    "start": "407150",
    "end": "412970"
  },
  {
    "text": "part of that certificate because otherwise whenever a client tries to",
    "start": "412970",
    "end": "419450"
  },
  {
    "text": "talk to an API server through your load balancer the client is actually gonna try to validate that certificate and",
    "start": "419450",
    "end": "425720"
  },
  {
    "text": "it's going to complain it's gonna say you know what the common name that's on the certificate is actually not what I'm trying to talk to so it's going to",
    "start": "425720",
    "end": "432380"
  },
  {
    "text": "complain so just whenever you're setting up multiple masters just make sure that the certificates have the load balancers",
    "start": "432380",
    "end": "440600"
  },
  {
    "text": "DNS name and IP address this is usually taken care of by your favorite installation tool they usually have a",
    "start": "440600",
    "end": "446440"
  },
  {
    "text": "configuration parameter to just set extra extra extra names in the master",
    "start": "446440",
    "end": "453020"
  },
  {
    "text": "search so there's actually another API which is",
    "start": "453020",
    "end": "458410"
  },
  {
    "text": "really an internal API is just an internal private API as of now and that",
    "start": "458410",
    "end": "465530"
  },
  {
    "text": "is the qubits API which you also want to expose over HTTP and then again to do",
    "start": "465530",
    "end": "472400"
  },
  {
    "text": "this we need a servant certificate and the corresponding key and this API is",
    "start": "472400",
    "end": "477710"
  },
  {
    "text": "mainly consumed by the API server when it needs to get logs or when it needs to",
    "start": "477710",
    "end": "483110"
  },
  {
    "text": "get metrics from a specific container and also when it when it needs to exact",
    "start": "483110",
    "end": "489770"
  },
  {
    "text": "into a pod so again this cert is signed by the cluster CA and that's how the API",
    "start": "489770",
    "end": "494990"
  },
  {
    "text": "server can actually authenticate the cubelet and and make sure that it's talking to the the qubit similar to the",
    "start": "494990",
    "end": "504110"
  },
  {
    "text": "API server the cubits API is also protected by authentication and",
    "start": "504110",
    "end": "509780"
  },
  {
    "text": "authorization so this means that clients of this API also have to present client",
    "start": "509780",
    "end": "516110"
  },
  {
    "text": "certificates so whenever the API server has to talk to a cubelet it actually needs a client",
    "start": "516110",
    "end": "522200"
  },
  {
    "text": "certificate and that's why the API server actually has a client cert 4 we're talking to the cubelet so as you",
    "start": "522200",
    "end": "528890"
  },
  {
    "text": "know as you'll notice I have little links at the bottom so if you want to look into it more there's some",
    "start": "528890",
    "end": "534709"
  },
  {
    "text": "more ducks on it most of the slides having coolant so we talked about how to",
    "start": "534709",
    "end": "541339"
  },
  {
    "start": "539000",
    "end": "606000"
  },
  {
    "text": "how a client can authenticate a server so the next piece is how can a server",
    "start": "541339",
    "end": "547310"
  },
  {
    "text": "actually authenticate a client so that's where the client cert authentication",
    "start": "547310",
    "end": "552980"
  },
  {
    "text": "strategy comes into play so the API server and the cubelet actually can authenticate clients using",
    "start": "552980",
    "end": "560660"
  },
  {
    "text": "this strategy so this is mainly used by kubernetes components although you could",
    "start": "560660",
    "end": "566630"
  },
  {
    "text": "use it for user off although there's some important caveats but the way this works is that any request that presents",
    "start": "566630",
    "end": "574160"
  },
  {
    "text": "the client certificate that has been signed by the cluster CA is going to be",
    "start": "574160",
    "end": "579350"
  },
  {
    "text": "considered authenticated part of that authentication process is to obtain the",
    "start": "579350",
    "end": "586069"
  },
  {
    "text": "user information and the group membership of that user and that information is actually obtained from",
    "start": "586069",
    "end": "591880"
  },
  {
    "text": "the certificate itself so the user is obtained from the common name field of",
    "start": "591880",
    "end": "598009"
  },
  {
    "text": "the certificate and the groups are obtained from the the organization field of the certificate so as I mentioned",
    "start": "598009",
    "end": "607310"
  },
  {
    "start": "606000",
    "end": "732000"
  },
  {
    "text": "before this authentication strategy is mainly used for authenticating",
    "start": "607310",
    "end": "613009"
  },
  {
    "text": "kubernetes core components so each one of them is going to have its own client certificate because each one of them is",
    "start": "613009",
    "end": "619819"
  },
  {
    "text": "going to have different access levels to the cluster so you want to have each one of these components to have their own",
    "start": "619819",
    "end": "625310"
  },
  {
    "text": "identity and the way to do that is to have certificates with different common names so for example the scheduler has",
    "start": "625310",
    "end": "631819"
  },
  {
    "text": "its own certificate with the common name set to system cube scheduler you'll",
    "start": "631819",
    "end": "639079"
  },
  {
    "text": "notice that the cubed cert is actually special and the main difference there",
    "start": "639079",
    "end": "644209"
  },
  {
    "text": "other than it belongs to an organization is that the host name where the cubit is",
    "start": "644209",
    "end": "649639"
  },
  {
    "text": "running is actually part of the certificate so that is very important because you want to make sure that each",
    "start": "649639",
    "end": "656300"
  },
  {
    "text": "cubelet on your cluster has its own identity why is that important so beef",
    "start": "656300",
    "end": "662569"
  },
  {
    "text": "so that so the reason for this is that it allows you to enable a couple",
    "start": "662569",
    "end": "668660"
  },
  {
    "text": "features in kubernetes which are called the node authorizer and the node restriction admission",
    "start": "668660",
    "end": "674090"
  },
  {
    "text": "plugin so what these do is that they actually limit access to the API server",
    "start": "674090",
    "end": "681350"
  },
  {
    "text": "from the cubelets perspective so without these features enabled the cubelet is actually capable of seeing and writing",
    "start": "681350",
    "end": "687740"
  },
  {
    "text": "and modifying every single resource on the API so you ideally you don't want",
    "start": "687740",
    "end": "693770"
  },
  {
    "text": "this you want to follow the principle of least privilege so instead what you want to do is by having each cubelet have its",
    "start": "693770",
    "end": "701330"
  },
  {
    "text": "own identity you can enable this feature that will actually limit the access to the API to resources that are actually",
    "start": "701330",
    "end": "708170"
  },
  {
    "text": "related to that node or to that cubelet so for example instead of the cubit being able to modify every single node",
    "start": "708170",
    "end": "715340"
  },
  {
    "text": "resource in the cluster it can only modify its own resource in the cluster similar with secrets instead of being",
    "start": "715340",
    "end": "722480"
  },
  {
    "text": "able to access every single secret in the cluster it can only access secrets that belong to pods that are bound to",
    "start": "722480",
    "end": "729380"
  },
  {
    "text": "that node so we just went through all",
    "start": "729380",
    "end": "736430"
  },
  {
    "start": "732000",
    "end": "818000"
  },
  {
    "text": "the certificates that we need and how do we actually produce these certificates so we can either manually create them so",
    "start": "736430",
    "end": "743300"
  },
  {
    "text": "an admin can go ahead and produce all the certificates issue all the certificates that we need or there's",
    "start": "743300",
    "end": "750170"
  },
  {
    "text": "actually an API in kubernetes that allows us to generate certificates so as",
    "start": "750170",
    "end": "757490"
  },
  {
    "text": "of recently kubernetes offers an API that allows you to request certificates",
    "start": "757490",
    "end": "762860"
  },
  {
    "text": "through just you know using the regular serger Brunetti api's so the way this",
    "start": "762860",
    "end": "770390"
  },
  {
    "text": "works is that a client creates csr or a certificate signing request and shoots",
    "start": "770390",
    "end": "776090"
  },
  {
    "text": "is all shoots it off to the API server once that csr is created it actually is",
    "start": "776090",
    "end": "781130"
  },
  {
    "text": "going to remain in a pending state until someone manually approves it so the idea here is that you don't want to actually",
    "start": "781130",
    "end": "788890"
  },
  {
    "text": "randomly approve and generate certificates because these certificates are going to be signed by the cluster CA",
    "start": "788890",
    "end": "795200"
  },
  {
    "text": "so as we talked about before every single component in the Buster trusts that CA which means that",
    "start": "795200",
    "end": "801769"
  },
  {
    "text": "is going to trust any certificate generated through this API so the CSR",
    "start": "801769",
    "end": "808069"
  },
  {
    "text": "actually has to be approved for the certificate to be issued so once that CSR is approved the certificate is",
    "start": "808069",
    "end": "815149"
  },
  {
    "text": "issued and the user can actually download it so I actually want to show you how this works",
    "start": "815149",
    "end": "820999"
  },
  {
    "start": "818000",
    "end": "1026000"
  },
  {
    "text": "so yeah let's dive into a quick demo and I have a kubernetes cluster running here",
    "start": "820999",
    "end": "831649"
  },
  {
    "text": "on my machine it's a 1 8 4 cluster I think yeah 1 8 4 and the first thing I",
    "start": "831649",
    "end": "837319"
  },
  {
    "text": "need to do is to generate a CSR so I've actually generated that previously just",
    "start": "837319",
    "end": "842869"
  },
  {
    "text": "in in the interest of time and you can see here that I have my certificate",
    "start": "842869",
    "end": "848569"
  },
  {
    "text": "request and what I have to do is to actually send this over to the API",
    "start": "848569",
    "end": "853610"
  },
  {
    "text": "server so I actually have to wrap this in a CSR resource in the kubernetes api",
    "start": "853610",
    "end": "861199"
  },
  {
    "text": "so the kubernetes api has a csr resource and you know similar to a pod or any",
    "start": "861199",
    "end": "868160"
  },
  {
    "text": "other resource in kubernetes you add some metadata so I can call this CSR and",
    "start": "868160",
    "end": "873290"
  },
  {
    "text": "set the name to cube Khan and then I have my spec and the most important piece here is the request field there",
    "start": "873290",
    "end": "880819"
  },
  {
    "text": "and that's where the CSR is going to be included in this resource so that the",
    "start": "880819",
    "end": "887600"
  },
  {
    "text": "API server can actually store it so I'm gonna go ahead and copy this yeah yeah",
    "start": "887600",
    "end": "900860"
  },
  {
    "text": "I'll take questions in here and I can just post this to the API",
    "start": "900860",
    "end": "906410"
  },
  {
    "text": "server and you'll notice here I'm using cat but it'll just read the CSR and",
    "start": "906410",
    "end": "913189"
  },
  {
    "text": "base64 encoded and then just include it in the resource and then there we go",
    "start": "913189",
    "end": "918739"
  },
  {
    "text": "so I've just created my CSR and I can actually get these this resource similar",
    "start": "918739",
    "end": "924949"
  },
  {
    "text": "to how I can get any other resource and the API so I can go and do cube CT I'll get CSR and you'll notice that it's in a",
    "start": "924949",
    "end": "932570"
  },
  {
    "text": "pending state the other thing to key to keep in mind and to and to learn from this is that there requester of the CSR",
    "start": "932570",
    "end": "939680"
  },
  {
    "text": "is actually stored as part of the resource and this is important for what we'll talk about next which is how the Cuba can use this API through request",
    "start": "939680",
    "end": "946880"
  },
  {
    "text": "certificates so I've created my CSR and again I have to approve the CSR so I'm",
    "start": "946880",
    "end": "953330"
  },
  {
    "text": "wearing an admin hat right now and I can go and approve the CSR so the CSR has",
    "start": "953330",
    "end": "963200"
  },
  {
    "text": "been approved and if I get the CSR again the condition has changed to approve and the certificate has been issued so as a",
    "start": "963200",
    "end": "970400"
  },
  {
    "text": "user I can go ahead and download the CSR so if I actually describe or get this",
    "start": "970400",
    "end": "976700"
  },
  {
    "text": "resource in yamo you'll notice that the certificate is now part of the resource so I can actually extract this the",
    "start": "976700",
    "end": "983930"
  },
  {
    "text": "certificate using adjacent path so that's in the status field a certificate",
    "start": "983930",
    "end": "990770"
  },
  {
    "text": "field yep I gotta get my coupon cert CSR",
    "start": "990770",
    "end": "996560"
  },
  {
    "text": "and that is basics before encoded so I can actually base64 the code and there's",
    "start": "996560",
    "end": "1003700"
  },
  {
    "text": "my certificate so I can actually start using this certificate so you can imagine building workloads or building",
    "start": "1003700",
    "end": "1009190"
  },
  {
    "text": "controllers that live on top of this API and that's one of the interesting things of kubernetes that you can actually use",
    "start": "1009190",
    "end": "1015430"
  },
  {
    "text": "all these API is to build stuff on top so that's the quick demo of how this",
    "start": "1015430",
    "end": "1021520"
  },
  {
    "text": "process works and now we can talk about a specific use of this API and that's",
    "start": "1021520",
    "end": "1028150"
  },
  {
    "text": "how the cubelet can actually use this API to bootstrap itself and to rotate",
    "start": "1028150",
    "end": "1034209"
  },
  {
    "text": "certificates when when they're it certs are nearing expiration so as we as we",
    "start": "1034209",
    "end": "1041740"
  },
  {
    "text": "talked about before the cubelet needs a client cert to talk to the API server and it also needs a serving certificate",
    "start": "1041740",
    "end": "1048339"
  },
  {
    "text": "for its own API so instead of having the admin having to generate all of each of these certificates one for each cubelet",
    "start": "1048339",
    "end": "1054460"
  },
  {
    "text": "and all the other serving certs the qulet is actually capable of requesting",
    "start": "1054460",
    "end": "1059710"
  },
  {
    "text": "certificates when it starts up so this is again this is built on top of the certificates API and",
    "start": "1059710",
    "end": "1066270"
  },
  {
    "text": "also the bootstrap token Authenticator which I won't go too much into but it's basically a different Authenticator that",
    "start": "1066270",
    "end": "1072840"
  },
  {
    "text": "that authenticates clients based on a short token and these tokens are basically used during the cluster",
    "start": "1072840",
    "end": "1079440"
  },
  {
    "text": "bootstrapping process so this is how this process works so let's assume that",
    "start": "1079440",
    "end": "1086100"
  },
  {
    "text": "we're bootstrapping a cluster and there's an API server and the controller manager it's all there all the way",
    "start": "1086100",
    "end": "1091470"
  },
  {
    "text": "running so the first worker node is starting up and the qubit is registering with the API server and it's going to",
    "start": "1091470",
    "end": "1097860"
  },
  {
    "text": "realize that it doesn't have a client cert so the first thing it's going to do is it's going to create that CSR",
    "start": "1097860",
    "end": "1104610"
  },
  {
    "text": "resource that we just learned about and it's going to use the bootstrap token that is used for bootstrapping clusters",
    "start": "1104610",
    "end": "1110990"
  },
  {
    "text": "the importance about the bootstrap token is that's is that it's going to tie the",
    "start": "1110990",
    "end": "1117390"
  },
  {
    "text": "request back to a cubelet so as we saw before in the demo part of the csr",
    "start": "1117390",
    "end": "1123180"
  },
  {
    "text": "resource is who requested the csr so in this scenario the the requester of the",
    "start": "1123180",
    "end": "1129060"
  },
  {
    "text": "csr is going to be a cubelet which is going to be important in this flow so once that csr is created the API server",
    "start": "1129060",
    "end": "1138420"
  },
  {
    "text": "is actually going to issue a watch event to one of the controllers that what that's watching the CSR's and there's a",
    "start": "1138420",
    "end": "1145710"
  },
  {
    "text": "controller that's going to check whether the csr was requested by a cubelet given",
    "start": "1145710",
    "end": "1151050"
  },
  {
    "text": "that in this case it was the it's going to automatically approve the csr so as we saw before CSRs have to be approved",
    "start": "1151050",
    "end": "1157400"
  },
  {
    "text": "so there's a controller that automatically approve CSRs that come from cubelets and then there's another",
    "start": "1157400",
    "end": "1164100"
  },
  {
    "text": "controller that is watching CSRs that once there's a csr that's been approved it's actually going to go and sign the",
    "start": "1164100",
    "end": "1171210"
  },
  {
    "text": "csr to issue the certificate and it's going to go ahead and upload it to the api server once the certificate is up in",
    "start": "1171210",
    "end": "1180000"
  },
  {
    "text": "the API the cubelet can actually go ahead and download that certificate so it can go and as we saw in the demo we",
    "start": "1180000",
    "end": "1186750"
  },
  {
    "text": "can go and download the the certificate using the API and it's going to after after that it's going to be able to use",
    "start": "1186750",
    "end": "1193410"
  },
  {
    "text": "it for further API access so just to",
    "start": "1193410",
    "end": "1199560"
  },
  {
    "start": "1198000",
    "end": "1284000"
  },
  {
    "text": "summarize the most important steps the first thing is that the Keele it creates the csr using that bootstrap token then",
    "start": "1199560",
    "end": "1206220"
  },
  {
    "text": "there's a special controller called the csr approving controller that is going to approve the csr automatically because",
    "start": "1206220",
    "end": "1212370"
  },
  {
    "text": "the request came from a cubelet and then the csr signer controller is going to go",
    "start": "1212370",
    "end": "1219510"
  },
  {
    "text": "ahead and sign the csr which will then allow the cubelet to download the certificate and start using it to talk",
    "start": "1219510",
    "end": "1225060"
  },
  {
    "text": "to the api server so that's how the",
    "start": "1225060",
    "end": "1230490"
  },
  {
    "text": "qubit gets the first certificate or that's how the cubelet bootstrap",
    "start": "1230490",
    "end": "1235620"
  },
  {
    "text": "bootstraps its own certificate but what about rotation so you don't want to get",
    "start": "1235620",
    "end": "1240660"
  },
  {
    "text": "paged at two o'clock in the morning if when your cluster dies because all your",
    "start": "1240660",
    "end": "1246210"
  },
  {
    "text": "cubelets fail to talk to the API server because the certificate expired so instead of you know getting paged the as",
    "start": "1246210",
    "end": "1253650"
  },
  {
    "text": "of kubernetes api as of kubernetes 1:8 the cubelets can actually request a new",
    "start": "1253650",
    "end": "1260310"
  },
  {
    "text": "client certificate when the one they're using is nearing their expiration date so similarly the cubelet can also rotate",
    "start": "1260310",
    "end": "1268560"
  },
  {
    "text": "the serving certificate and that's actually an alpha right now there's a couple of kinks to work out but yeah if",
    "start": "1268560",
    "end": "1275250"
  },
  {
    "text": "you want to share if you want to follow the progress on that issue I like the issues down there so that's",
    "start": "1275250",
    "end": "1285480"
  },
  {
    "start": "1284000",
    "end": "1408000"
  },
  {
    "text": "basically how we can create a secure kubernetes cluster deployment that's how certificates are used at the",
    "start": "1285480",
    "end": "1293250"
  },
  {
    "text": "kubernetes component layer but as you might imagine certificates are also used for different things on the cluster once",
    "start": "1293250",
    "end": "1299340"
  },
  {
    "text": "you have your your running cluster so one of those those things which is actually which is actually a missing as",
    "start": "1299340",
    "end": "1306270"
  },
  {
    "text": "something that's missing is the ability to revoke certificates using certificate",
    "start": "1306270",
    "end": "1312780"
  },
  {
    "text": "revocation lists so just something to keep in mind if you're using certs for user off you currently cannot revoke",
    "start": "1312780",
    "end": "1321300"
  },
  {
    "text": "certificates so they're always going to be they're always going to be considered valid until they actually expire so if",
    "start": "1321300",
    "end": "1329520"
  },
  {
    "text": "you want to learn more about this or if you want to join the discussion or if you need if you think you need this",
    "start": "1329520",
    "end": "1335010"
  },
  {
    "text": "feature for whatever reason definitely check out this issue on on github so",
    "start": "1335010",
    "end": "1342049"
  },
  {
    "text": "today we talked about certificates at the kubernetes component level so how",
    "start": "1343700",
    "end": "1349679"
  },
  {
    "text": "the components themselves use certificates to authenticate each other but what about workloads so if you want",
    "start": "1349679",
    "end": "1357030"
  },
  {
    "text": "to expose workloads over TLS you can actually do so using ingress so ingress",
    "start": "1357030",
    "end": "1363710"
  },
  {
    "text": "has the ability to expose services that use TLS and the way to do this is you",
    "start": "1363710",
    "end": "1371070"
  },
  {
    "text": "first have to define a secret that includes a certificate and a private key and then",
    "start": "1371070",
    "end": "1376380"
  },
  {
    "text": "you have to reference that secret in your ingress resource so what's going to",
    "start": "1376380",
    "end": "1381390"
  },
  {
    "text": "happen there is that once your ingress controller realizes that there's a new ingress resource defined it's going to",
    "start": "1381390",
    "end": "1387720"
  },
  {
    "text": "go and use that secret to configure that TLS listener so if you if you don't want",
    "start": "1387720",
    "end": "1394380"
  },
  {
    "text": "to do this manually there's actually an interesting project called cube Lego which can actually automatically",
    "start": "1394380",
    "end": "1401340"
  },
  {
    "text": "generate all these certificates using the let's encrypt API so if you want to check that out that's pretty cool and",
    "start": "1401340",
    "end": "1408679"
  },
  {
    "start": "1408000",
    "end": "1474000"
  },
  {
    "text": "then similarly at the workload layer",
    "start": "1408679",
    "end": "1413809"
  },
  {
    "text": "there is actually a working group that is working towards allowing containers",
    "start": "1413809",
    "end": "1419640"
  },
  {
    "text": "to prove their identity outside of the kubernetes clusters so inside the cluster each workload has a service",
    "start": "1419640",
    "end": "1426750"
  },
  {
    "text": "account which they can use to talk to stuff that's running on the cluster but what about accessing external services",
    "start": "1426750",
    "end": "1432630"
  },
  {
    "text": "so there's actually a working group called the kubernetes container identity working group which is working towards",
    "start": "1432630",
    "end": "1438840"
  },
  {
    "text": "this idea of being able to use some mechanism that is going to allow",
    "start": "1438840",
    "end": "1444090"
  },
  {
    "text": "containers running on the cluster to be able to access external systems that are",
    "start": "1444090",
    "end": "1449160"
  },
  {
    "text": "running off the cluster the other potential use case although there's a",
    "start": "1449160",
    "end": "1454679"
  },
  {
    "text": "bit of overlap with it something like Sto is potentially kubernetes could do service to service you know mutual TLS",
    "start": "1454679",
    "end": "1461309"
  },
  {
    "text": "everything out of the box so if you want to learn more about this these are the notes of the working group",
    "start": "1461309",
    "end": "1468180"
  },
  {
    "text": "and they have weekly meetings so I definitely encourage you to check those out so just to quickly summarize what we",
    "start": "1468180",
    "end": "1476520"
  },
  {
    "start": "1474000",
    "end": "1541000"
  },
  {
    "text": "talked about today we went through how we can produce a secure kubernetes cluster and how certificates are used to",
    "start": "1476520",
    "end": "1484170"
  },
  {
    "text": "create a secure cluster so certificates are key to the function of the",
    "start": "1484170",
    "end": "1490650"
  },
  {
    "text": "functioning of a secure cluster and the main reason for this is that kubernetes again is a distributed system and you",
    "start": "1490650",
    "end": "1497640"
  },
  {
    "text": "want to make sure that all the components are talking to each other in a secure manner and that's exactly where",
    "start": "1497640",
    "end": "1503520"
  },
  {
    "text": "certificates come into play so certificates allow all of the components to authenticate each other and to",
    "start": "1503520",
    "end": "1509220"
  },
  {
    "text": "establish mutual TLS and that is what's going to produce the the secure cluster",
    "start": "1509220",
    "end": "1514670"
  },
  {
    "text": "we also talked about the API that kubernetes offers for generating and",
    "start": "1514670",
    "end": "1521430"
  },
  {
    "text": "requesting certificates so we we saw a specific use case of this which is the",
    "start": "1521430",
    "end": "1526530"
  },
  {
    "text": "cubelet and how the cubit is capable of requesting and generating and we and",
    "start": "1526530",
    "end": "1531540"
  },
  {
    "text": "rotating those certificates and again this is an API that can be consumed by",
    "start": "1531540",
    "end": "1536730"
  },
  {
    "text": "anything other other than just just a cute look so this is just a quick table",
    "start": "1536730",
    "end": "1543810"
  },
  {
    "text": "that gives you an idea of all the certificates that are in use in a",
    "start": "1543810",
    "end": "1548820"
  },
  {
    "text": "kubernetes cluster obviously at the component layer so I mean we talked",
    "start": "1548820",
    "end": "1555000"
  },
  {
    "text": "about all the the API server the controller manager scheduler cubelet queue proxy and I hope this gives you an",
    "start": "1555000",
    "end": "1561150"
  },
  {
    "text": "idea of how important certificates are and how careful you have to be with",
    "start": "1561150",
    "end": "1567300"
  },
  {
    "text": "certificates so again you don't want to get paged at 2:00 a.m. in the morning when one of these certificates just",
    "start": "1567300",
    "end": "1573150"
  },
  {
    "text": "expires and your entire cluster is down so I hope that gave you an idea again of",
    "start": "1573150",
    "end": "1579930"
  },
  {
    "start": "1577000",
    "end": "1600000"
  },
  {
    "text": "how certificates work how they're used in kubernetes and if there's any questions I'm happy I'll be around and",
    "start": "1579930",
    "end": "1585900"
  },
  {
    "text": "how did it take them Thanks no so that's a great question so",
    "start": "1585900",
    "end": "1602730"
  },
  {
    "start": "1600000",
    "end": "1656000"
  },
  {
    "text": "the actual component that signs the certificates is the controller manager",
    "start": "1602730",
    "end": "1608600"
  },
  {
    "text": "so the controller manager does need access to to the private key of the CA",
    "start": "1608600",
    "end": "1614840"
  },
  {
    "text": "yes it's fairly sensitive so it really depends on how you're setting up your",
    "start": "1619310",
    "end": "1625230"
  },
  {
    "text": "cluster so some installation tools run the controller manager as a workload on",
    "start": "1625230",
    "end": "1631050"
  },
  {
    "text": "the cluster so you could use a secret for that or something like that yeah yeah yes yeah",
    "start": "1631050",
    "end": "1647059"
  },
  {
    "text": "so the the cubed API yeah so the Cuba",
    "start": "1649220",
    "end": "1657080"
  },
  {
    "text": "needs a client search to talk to the API server but then if you want to talk to the cubelets API you also need a client",
    "start": "1657080",
    "end": "1663740"
  },
  {
    "text": "cert yeah so that's a great question so all the issues that I've seen around the",
    "start": "1663740",
    "end": "1670880"
  },
  {
    "text": "cubelet API the cubed API is really an internal API right now it's undocumented",
    "start": "1670880",
    "end": "1676460"
  },
  {
    "text": "so it's not really maintained or yeah an API that's going to remain stable so the",
    "start": "1676460",
    "end": "1683690"
  },
  {
    "text": "recommendation is to not really depend on it but I think there are people that are that are using it yeah yeah yeah correct",
    "start": "1683690",
    "end": "1706270"
  },
  {
    "text": "right so when you you're on your bootstrapping your see it when you're",
    "start": "1709870",
    "end": "1715730"
  },
  {
    "text": "sending your first csr I think yeah so",
    "start": "1715730",
    "end": "1720950"
  },
  {
    "text": "you're using a bootstrap talking at that point but I don't think it'd be encrypted",
    "start": "1720950",
    "end": "1728110"
  },
  {
    "text": "that's a great question I'm not sure I can definitely look it up and come back to that yeah yep",
    "start": "1729650",
    "end": "1741910"
  },
  {
    "start": "1746000",
    "end": "1809000"
  },
  {
    "text": "so the the majority of clusters that at least that I've worked with have a single CA so there is one CA so the CA",
    "start": "1746270",
    "end": "1761160"
  },
  {
    "text": "is a single CA in the entire cluster the the yeah I guess so you're talking about",
    "start": "1761160",
    "end": "1767550"
  },
  {
    "text": "signing the certificates when they're requested yeah in technically the",
    "start": "1767550",
    "end": "1775590"
  },
  {
    "text": "controller manager but yes the the kubernetes api and the yeah exactly yeah",
    "start": "1775590",
    "end": "1781920"
  },
  {
    "text": "make sense yeah yep",
    "start": "1781920",
    "end": "1794880"
  },
  {
    "text": "the CA continues to be the same CA so there is one CA for the whole cluster",
    "start": "1794880",
    "end": "1800490"
  },
  {
    "text": "yeah yeah yeah",
    "start": "1800490",
    "end": "1805550"
  },
  {
    "start": "1809000",
    "end": "1846000"
  },
  {
    "text": "a way to automate the generation of keys the private keys so that really so for",
    "start": "1809379",
    "end": "1818299"
  },
  {
    "text": "example in the community there's cube ATM that takes care of all of this so if you're thinking of creating a cluster",
    "start": "1818299",
    "end": "1825080"
  },
  {
    "text": "cube ATM is a good way kiss Matic our tool also gives you that capability and",
    "start": "1825080",
    "end": "1830989"
  },
  {
    "text": "it gives you a couple other things so we take care of that we take care of all of",
    "start": "1830989",
    "end": "1836809"
  },
  {
    "text": "that for you so you're gonna have to do that so yeah yeah I think so I'm not",
    "start": "1836809",
    "end": "1849320"
  },
  {
    "start": "1846000",
    "end": "1899000"
  },
  {
    "text": "super familiar with that right now but I believe there is an effort to integrate",
    "start": "1849320",
    "end": "1854960"
  },
  {
    "text": "with external key management software I believe there is some integration with",
    "start": "1854960",
    "end": "1861649"
  },
  {
    "text": "vault there's I there actually is you can actually use vault to store secrets today I'm not super familiar with that",
    "start": "1861649",
    "end": "1867889"
  },
  {
    "text": "so I yeah oh there's the next talk there",
    "start": "1867889",
    "end": "1872989"
  },
  {
    "text": "we go yeah yes",
    "start": "1872989",
    "end": "1879700"
  },
  {
    "text": "Yeah right for the Masters so the master",
    "start": "1889140",
    "end": "1901870"
  },
  {
    "start": "1899000",
    "end": "2156000"
  },
  {
    "text": "certs are actually not generated using the certificate API so you actually have to create them beforehand right yeah so",
    "start": "1901870",
    "end": "1908770"
  },
  {
    "text": "either manually or the installation tool actually takes care of that for you so for example kiss Matic will take care of",
    "start": "1908770",
    "end": "1914559"
  },
  {
    "text": "that or cube a the M will take care of that and then you also write yeah you",
    "start": "1914559",
    "end": "1920110"
  },
  {
    "text": "set the Sun for the LV exactly yes sir",
    "start": "1920110",
    "end": "1924570"
  },
  {
    "text": "that is a good question I don't know yeah I'm not sure yeah yeah",
    "start": "1927179",
    "end": "1936070"
  },
  {
    "text": "yeah I would expect them to be after after they're created yeah I would expect them to be clean and clean up yep",
    "start": "1936070",
    "end": "1941850"
  },
  {
    "text": "yes sir so it really depends so we we",
    "start": "1941850",
    "end": "1951370"
  },
  {
    "text": "actually issue in cos Matic our CA is I believe two or three years and the",
    "start": "1951370",
    "end": "1959770"
  },
  {
    "text": "certificates that are produced by that CA are one year",
    "start": "1959770",
    "end": "1964529"
  },
  {
    "text": "no so as of right now the only one that gets rotated automatically is the the",
    "start": "1974360",
    "end": "1979670"
  },
  {
    "text": "cubelet one yeah yeah yeah every",
    "start": "1979670",
    "end": "1985730"
  },
  {
    "text": "whenever they they're close to their expiration they they the cubit is gonna rotate them yes sir",
    "start": "1985730",
    "end": "1991509"
  },
  {
    "text": "yeah yep not necessarily so you can",
    "start": "1997810",
    "end": "2012490"
  },
  {
    "text": "actually use your own CA you can provide your own CA to kubernetes and your installation tool so for example in",
    "start": "2012490",
    "end": "2018250"
  },
  {
    "text": "cosmetic you can actually bring your own CA and we will use that CA to produce all the certificates that are that are",
    "start": "2018250",
    "end": "2025390"
  },
  {
    "text": "needed for the cluster yes yeah so yeah",
    "start": "2025390",
    "end": "2032890"
  },
  {
    "text": "there's some implications there definitely yeah",
    "start": "2032890",
    "end": "2039270"
  },
  {
    "text": "- to upgrade the CA that is a great",
    "start": "2050490",
    "end": "2060398"
  },
  {
    "text": "question I believe from what I've seen you can only use one CA so you would",
    "start": "2060399",
    "end": "2066040"
  },
  {
    "text": "incur downtime there I think yeah I",
    "start": "2066040",
    "end": "2077320"
  },
  {
    "text": "believe that should work yeah that sounds like a potential workaround there",
    "start": "2077320",
    "end": "2083669"
  },
  {
    "text": "yep sorry so he was suggesting adding the CA",
    "start": "2083669",
    "end": "2092408"
  },
  {
    "text": "to the machines trusted route list so that the the the binary just trusted",
    "start": "2092409",
    "end": "2098710"
  },
  {
    "text": "because the Machine trusted so in the",
    "start": "2098710",
    "end": "2106270"
  },
  {
    "text": "multiple master scenario each master is going to have its own certificate and then the the consideration there is to",
    "start": "2106270",
    "end": "2112690"
  },
  {
    "text": "just make sure that the load balancers IP and DNS name are part of that search so that your clients you know can",
    "start": "2112690",
    "end": "2118990"
  },
  {
    "text": "validate that certificate yeah",
    "start": "2118990",
    "end": "2125760"
  },
  {
    "text": "yeah so you can bring your own CA I'm",
    "start": "2125890",
    "end": "2138829"
  },
  {
    "text": "not sure if you're talking about like integrating with another system yeah I'm not sure I don't think so I think you",
    "start": "2138829",
    "end": "2144290"
  },
  {
    "text": "actually have to provide like a file-based CA so yeah at this point you have to do that yeah cool thank you so",
    "start": "2144290",
    "end": "2153770"
  },
  {
    "text": "much and enjoy",
    "start": "2153770",
    "end": "2157240"
  }
]