[
  {
    "text": "um let's go ahead and get started um this is a a fairly jam-packed presentation so I want to make sure to",
    "start": "1199",
    "end": "8280"
  },
  {
    "text": "jump into the content quickly I do promise to do some live demos um at the end so uh hopefully you all",
    "start": "8280",
    "end": "14099"
  },
  {
    "text": "can finish out your kubecon with watching me break some stuff um but I appreciate you all sticking",
    "start": "14099",
    "end": "19440"
  },
  {
    "text": "around uh to the very end I hope you all have had a great week today we're going to be talking about uh content addressable crds and that's really the",
    "start": "19440",
    "end": "26519"
  },
  {
    "text": "solution uh to a problem and that problem generically is that we aren't able to",
    "start": "26519",
    "end": "32940"
  },
  {
    "text": "establish uniqueness of types across kubernetes clusters and this has become more of an issue as we've moved to what",
    "start": "32940",
    "end": "40200"
  },
  {
    "text": "you might call a cluster as cattle model right where we have lots and lots of kubernetes clusters and also when we",
    "start": "40200",
    "end": "46559"
  },
  {
    "text": "have kind of new models of kubernetes I don't know if you all have seen any of the talks or demos around kcp this week",
    "start": "46559",
    "end": "53879"
  },
  {
    "text": "but that's an example of kind of a newer model of kubernetes that forces us to",
    "start": "53879",
    "end": "59640"
  },
  {
    "text": "think uh about a larger scope than just a single physical cluster so I generally like to start off by",
    "start": "59640",
    "end": "66060"
  },
  {
    "text": "giving you a bit of an idea of where we're going to be going in this talk so you can stand up and go catch your",
    "start": "66060",
    "end": "71400"
  },
  {
    "text": "flight if this doesn't look good to you but what we're going to start with is just generally talking about how you can",
    "start": "71400",
    "end": "76680"
  },
  {
    "text": "extend the kubernetes API surface this is likely an area that lots of you folks are already familiar with but we want to",
    "start": "76680",
    "end": "83100"
  },
  {
    "text": "set that that ground level for us to be able to build on top of then we're going to talk about two aspects of programming",
    "start": "83100",
    "end": "90299"
  },
  {
    "text": "generically that are important that we don't really have in kubernetes today and that's",
    "start": "90299",
    "end": "95820"
  },
  {
    "text": "internal versus user-facing types and programming in an abstract cluster sense",
    "start": "95820",
    "end": "100860"
  },
  {
    "text": "and I know those may not mean anything quite yet so we'll make sure to define those terms as we go along and then",
    "start": "100860",
    "end": "107820"
  },
  {
    "text": "we'll come up with a solution for these types spread across many clusters and round out with a demo",
    "start": "107820",
    "end": "113340"
  },
  {
    "text": "so starting off with extending the kubernetes API surface there are a",
    "start": "113340",
    "end": "119220"
  },
  {
    "text": "couple different ways to extend the kubernetes API but the kubernetes API comes with a set of built-in types you",
    "start": "119220",
    "end": "126119"
  },
  {
    "text": "can really just think about these as endpoints if you want to think about a rest API server which is actually what the kubernetes API server is and these",
    "start": "126119",
    "end": "133080"
  },
  {
    "text": "are the ones you know and love like pods deployments Services Etc et cetera things that are there to",
    "start": "133080",
    "end": "139620"
  },
  {
    "text": "allow you to do the core job that kubernetes was created for which is container orchestration",
    "start": "139620",
    "end": "145440"
  },
  {
    "text": "uh and this is usually the case I did mention kcp earlier and some other projects that are similar usually all of",
    "start": "145440",
    "end": "151319"
  },
  {
    "text": "these built-in types are built in but that doesn't necessarily have to be the case and thinking in that mindset I",
    "start": "151319",
    "end": "156599"
  },
  {
    "text": "think actually allows us to think about the kubernetes API uh in a different mindset",
    "start": "156599",
    "end": "163680"
  },
  {
    "text": "so you can add additional types to the kubernetes API at runtime so we're not",
    "start": "163680",
    "end": "168720"
  },
  {
    "text": "actually modifying the code base of the API server right we're adding these new types as we go along and there's two",
    "start": "168720",
    "end": "174660"
  },
  {
    "text": "main ways that this can be done first is API server aggregation we're basically saying hey kubernetes API server I have",
    "start": "174660",
    "end": "182160"
  },
  {
    "text": "another API server over here that can serve some additional endpoints and just send them my way when you get a request",
    "start": "182160",
    "end": "188940"
  },
  {
    "text": "the next is custom resource definitions which are a built-in type a custom",
    "start": "188940",
    "end": "194340"
  },
  {
    "text": "resource definition type that allows you to add a new type or you can think of it as a new endpoint if you like",
    "start": "194340",
    "end": "201540"
  },
  {
    "text": "these are both valid ways to extend kubernetes clusters today we're going to be focusing in on custom resource",
    "start": "201540",
    "end": "207480"
  },
  {
    "text": "definitions or crds is the abbreviation if you're not familiar with it custom",
    "start": "207480",
    "end": "212760"
  },
  {
    "text": "resource definitions are generally viewed as a little bit simpler to use and they can also be integrated in more",
    "start": "212760",
    "end": "219360"
  },
  {
    "text": "environments some hosted kubernetes offerings don't allow you to do things like API server aggregation so it's a",
    "start": "219360",
    "end": "225659"
  },
  {
    "text": "non-starter for generic portability so when we think about kubernetes uh in",
    "start": "225659",
    "end": "233099"
  },
  {
    "text": "the sense of types we have to kind of go back a few steps and think about what is a type in general right outside of",
    "start": "233099",
    "end": "238200"
  },
  {
    "text": "kubernetes what does it mean to define a type well at their base level types just",
    "start": "238200",
    "end": "244140"
  },
  {
    "text": "specify a structure for data right it's an ordering it's a it's a validation mechanism to say hey this data is",
    "start": "244140",
    "end": "250980"
  },
  {
    "text": "organized into a certain structure and we're going to call it by this name or this identifier",
    "start": "250980",
    "end": "257459"
  },
  {
    "text": "in the case of kubernetes when we have types that are either built in or we Define at runtime we do that via an open",
    "start": "257459",
    "end": "263940"
  },
  {
    "text": "API V3 schema any given type uh to to be a type itself",
    "start": "263940",
    "end": "271199"
  },
  {
    "text": "has to be uniquely identifiable if we're going to be able to say hey this type has this structure and can be validated",
    "start": "271199",
    "end": "278040"
  },
  {
    "text": "in this way and also has this Behavior attached to it we have to be able to identify it relative to other types that",
    "start": "278040",
    "end": "283560"
  },
  {
    "text": "exist in the case of kubernetes we identify types by group version and kind",
    "start": "283560",
    "end": "288960"
  },
  {
    "text": "or you'll frequently refer here at referred to as GVK",
    "start": "288960",
    "end": "295440"
  },
  {
    "text": "all types exist in the context of a scope so they have to be defined in some",
    "start": "295440",
    "end": "301139"
  },
  {
    "text": "sort of namespace which impacts what their identifier is this key this there's a key Insight here though that",
    "start": "301139",
    "end": "306780"
  },
  {
    "text": "it doesn't necessarily mean that they can only be instantiated in that namespace depending on whether they're",
    "start": "306780",
    "end": "312479"
  },
  {
    "text": "user or internal facing that determines whether they can be instantiated outside of the namespace in which they're",
    "start": "312479",
    "end": "318060"
  },
  {
    "text": "defined in the context of a single kubernetes cluster every type is defined at the",
    "start": "318060",
    "end": "324660"
  },
  {
    "text": "cluster scope right it might be able to be instantiated at the namespace scope or at the cluster scope but the type is",
    "start": "324660",
    "end": "331199"
  },
  {
    "text": "actually defined at the cluster scope there's no namespace crds",
    "start": "331199",
    "end": "336380"
  },
  {
    "text": "in many cases in many system types are composable so they don't just exist as Primitives you can use existing types or",
    "start": "336380",
    "end": "343919"
  },
  {
    "text": "types you've defined to build up higher level types and then potentially even take those higher level types and and build them up further",
    "start": "343919",
    "end": "350759"
  },
  {
    "text": "kubernetes doesn't inherently offer type composition but as we're going to see in",
    "start": "350759",
    "end": "356880"
  },
  {
    "text": "this presentation projects like cross plane allow you to bring composition",
    "start": "356880",
    "end": "361979"
  },
  {
    "text": "into your cluster and the last thing here is that",
    "start": "361979",
    "end": "367199"
  },
  {
    "text": "generally and specifically for the purposes of this presentation we are",
    "start": "367199",
    "end": "372300"
  },
  {
    "text": "going to say that any types that are not composed of other types are referred to as Primitives that's whether they're",
    "start": "372300",
    "end": "378539"
  },
  {
    "text": "built in or user defined if we're moving towards you know a kcp model or something like that you could view all",
    "start": "378539",
    "end": "383940"
  },
  {
    "text": "types as user-defined perhaps at the end of each section I'm going to do a quick check-in just to make sure",
    "start": "383940",
    "end": "390180"
  },
  {
    "text": "that we've covered the high level points so kubernetes includes some built-in types which can vary depending on",
    "start": "390180",
    "end": "395819"
  },
  {
    "text": "implementation kubernetes allows you to introduce additional types at runtime via few mechanisms for the purposes of",
    "start": "395819",
    "end": "402539"
  },
  {
    "text": "this talk we're just focusing in on custom resource definitions both built-in types and types defined via",
    "start": "402539",
    "end": "409860"
  },
  {
    "text": "crds we're defining as primitive types so they're not composing other ones they're just defining a structure",
    "start": "409860",
    "end": "417060"
  },
  {
    "text": "uh and kubernetes does not uh offer type composition out of the box but we're",
    "start": "417060",
    "end": "422220"
  },
  {
    "text": "going to bring it in and see how that impacts uh how we program the kubernetes API",
    "start": "422220",
    "end": "428639"
  },
  {
    "text": "before we continue on if we're going to add a programming language type construct to the kubernetes API and be",
    "start": "428639",
    "end": "435240"
  },
  {
    "text": "able to use that to do more powerful things we have to start thinking about the features that kubernetes offers to",
    "start": "435240",
    "end": "440880"
  },
  {
    "text": "us to uh to implement this kind of functionality in other words if we're going to add programming like features",
    "start": "440880",
    "end": "447840"
  },
  {
    "text": "to the kubernetes API we need to start treating it like a programming language or put in other words with great power",
    "start": "447840",
    "end": "455400"
  },
  {
    "text": "comes great responsibility now I'm not saying that we want to take the kubernetes API and make it into a",
    "start": "455400",
    "end": "462599"
  },
  {
    "text": "turing complete programming language that would be very complex very hard to observe very hard to debug so we don't",
    "start": "462599",
    "end": "468479"
  },
  {
    "text": "want to do that but we are bringing in some new functionality that adds a lot of capabilities to the kubernetes API",
    "start": "468479",
    "end": "475380"
  },
  {
    "text": "um and so we need to consider how we're going to be able to manage that additional complexity or additional power here",
    "start": "475380",
    "end": "482340"
  },
  {
    "text": "so one of the things we're going to do if we're going to need internal or and user-facing apis or potentially one to",
    "start": "482340",
    "end": "488099"
  },
  {
    "text": "be able to Define things that are used to compose higher level types but that we don't actually want to expose as part",
    "start": "488099",
    "end": "493860"
  },
  {
    "text": "of the interface to users necessarily is be able to separate what types are internal and which are user facing",
    "start": "493860",
    "end": "501240"
  },
  {
    "text": "so we're going to make an analogy this isn't a Perfect Analogy but I think it's useful because a lot of folks in the",
    "start": "501240",
    "end": "506759"
  },
  {
    "text": "cloud native ecosystem are also Engineers or engineering adjacent so we're going to talk about another place",
    "start": "506759",
    "end": "513360"
  },
  {
    "text": "where we can Define types and I've kind of already spoiled the surprise here but",
    "start": "513360",
    "end": "518459"
  },
  {
    "text": "that would be programming languages right we Define types all the time in programming languages they may be",
    "start": "518459",
    "end": "523680"
  },
  {
    "text": "strongly typed or dynamically typed but there's all sorts of different type systems that exist",
    "start": "523680",
    "end": "529019"
  },
  {
    "text": "so how do we Define the types in the programming language well usually via some sort of built-in type that offers",
    "start": "529019",
    "end": "535380"
  },
  {
    "text": "the ability to Define new types and this sounds pretty familiar right we just talked about how custom resource",
    "start": "535380",
    "end": "541080"
  },
  {
    "text": "definitions allow us as a built-in type to Define additional types",
    "start": "541080",
    "end": "546720"
  },
  {
    "text": "so what does a very simple type declaration look like in go for example here we're defining a my type type and",
    "start": "546720",
    "end": "554940"
  },
  {
    "text": "we're just using it as an alias for an integer but this is a brand new type right int is specifying how the data is",
    "start": "554940",
    "end": "560820"
  },
  {
    "text": "structured and organized but we might Define additional Behavior that's attached this type and we may put it in",
    "start": "560820",
    "end": "566820"
  },
  {
    "text": "this scope for instance in the in the stuff package so we're defining a new a new user-defined primitive here",
    "start": "566820",
    "end": "574680"
  },
  {
    "text": "so the stuff here the package is the scope in which we're defining this type",
    "start": "574680",
    "end": "580440"
  },
  {
    "text": "and we're using a built-in type to be able to do that and we're providing an identifier to be able to say hey when",
    "start": "580440",
    "end": "587339"
  },
  {
    "text": "this type gets instantiated it needs to adhere to these sorts of restrictions or it's not valid",
    "start": "587339",
    "end": "592680"
  },
  {
    "text": "um you'll see I have an asterisk on the identifier there we're going to talk about why that's not the full identifier",
    "start": "592680",
    "end": "598980"
  },
  {
    "text": "here in just a moment so if we wanted to Define A user-defined",
    "start": "598980",
    "end": "604260"
  },
  {
    "text": "Primitive type in kubernetes like I said earlier we will use a custom resource definition which looks something like",
    "start": "604260",
    "end": "611760"
  },
  {
    "text": "this where we give some metadata about how the type can be identified and what you don't see here is the schema the",
    "start": "611760",
    "end": "618000"
  },
  {
    "text": "organization of data the validation that has to take place if someone wants to instantiate or create one of these types",
    "start": "618000",
    "end": "624300"
  },
  {
    "text": "in our cluster once again as we said earlier custom resource definitions are always defined",
    "start": "624300",
    "end": "630720"
  },
  {
    "text": "at the global or cluster scope within a single kubernetes cluster",
    "start": "630720",
    "end": "637040"
  },
  {
    "text": "we can also Define higher level types or composite types in programming languages once again we have a scope we have an",
    "start": "637200",
    "end": "643860"
  },
  {
    "text": "identifier we're using a user defined primitive the one we defined earlier the the my type as well as a built-in",
    "start": "643860",
    "end": "650880"
  },
  {
    "text": "primitive and composing that into a higher level thing called higher level type here",
    "start": "650880",
    "end": "656100"
  },
  {
    "text": "so together those make up a composite type like I said earlier kubernetes does not",
    "start": "656100",
    "end": "662880"
  },
  {
    "text": "offer the ability to compose types natively but when we add cross plane we can get functionality of something",
    "start": "662880",
    "end": "669360"
  },
  {
    "text": "called compositions in compositions kind of like a higher level type in a",
    "start": "669360",
    "end": "674519"
  },
  {
    "text": "programming language allow you to say hey here's a new type that exists and it",
    "start": "674519",
    "end": "680279"
  },
  {
    "text": "composes these primitive types or potentially other composed types in this case we're looking at an example of a",
    "start": "680279",
    "end": "687240"
  },
  {
    "text": "composition that composes an RDS instance which would be a primitive that was introduced as well as potentially",
    "start": "687240",
    "end": "694740"
  },
  {
    "text": "some other ones that we're not showing here but we're defining some metadata of how this is identified and then we're",
    "start": "694740",
    "end": "700320"
  },
  {
    "text": "saying that the types that it is composing into a higher level data structure",
    "start": "700320",
    "end": "707040"
  },
  {
    "text": "lastly programming languages also give us the ability to Define abstractions in go we use interfaces to",
    "start": "707040",
    "end": "715560"
  },
  {
    "text": "be able to do this so here we're saying there's an abstract type that is being defined by an interface and here we're",
    "start": "715560",
    "end": "721440"
  },
  {
    "text": "just specifying the behavior that can be present for this abstract type",
    "start": "721440",
    "end": "727320"
  },
  {
    "text": "and with the behavior you have these different methods that say Hey this is the the signature for how you can invoke",
    "start": "727320",
    "end": "734279"
  },
  {
    "text": "this in imperative fashion and here's some data that can be passed into it",
    "start": "734279",
    "end": "740279"
  },
  {
    "text": "so once again we have the scope the identifier we're defining some data that comes through the interface and",
    "start": "740279",
    "end": "746579"
  },
  {
    "text": "eventually passes to a concrete implementation which is some other type that we've defined potentially that one",
    "start": "746579",
    "end": "752279"
  },
  {
    "text": "that was on the last slide for a composed type mapping this to kubernetes once again",
    "start": "752279",
    "end": "759360"
  },
  {
    "text": "cross plain introduces a concept of a composite resource definition or xrd",
    "start": "759360",
    "end": "764880"
  },
  {
    "text": "it's very similar to a crd a custom resource definition and the structure actually looks quite similar but you'll",
    "start": "764880",
    "end": "771899"
  },
  {
    "text": "see here that we actually Define a cluster scope variant which is under the names and a namespace scope variant",
    "start": "771899",
    "end": "778440"
  },
  {
    "text": "which is under the claims here and these are two separate types and individually",
    "start": "778440",
    "end": "783540"
  },
  {
    "text": "they're not actually they don't actually have any Behavior implementation attached to them they have to be matched",
    "start": "783540",
    "end": "789480"
  },
  {
    "text": "to a composition just like an interface and a programming language is uses something like Dynamic dispatch to be",
    "start": "789480",
    "end": "795899"
  },
  {
    "text": "able to use an actual implementation a struct that implements the behavior",
    "start": "795899",
    "end": "801779"
  },
  {
    "text": "so we have all these these nice features now how do we actually Implement uh types that are internal or user facing",
    "start": "801779",
    "end": "809639"
  },
  {
    "text": "well let's lay out some ground rules to start off both are primitive and composite types can be internal or user",
    "start": "809639",
    "end": "817200"
  },
  {
    "text": "facing in a program we might want to say yeah we have some some higher level types that are not just Primitives that",
    "start": "817200",
    "end": "824519"
  },
  {
    "text": "are introduced but we don't actually want to expose them as part of a library API or something like that they're just",
    "start": "824519",
    "end": "830040"
  },
  {
    "text": "internal they're helping us do the job that needs to be abstracted away from the consumer of the package",
    "start": "830040",
    "end": "836700"
  },
  {
    "text": "program languages allow us to do that by choosing what types are exported or made",
    "start": "836700",
    "end": "841920"
  },
  {
    "text": "public or made part of our API service and this allows us to divorce the",
    "start": "841920",
    "end": "848100"
  },
  {
    "text": "implementation of behavior from the interface right you you all the time interact with packages or libraries or",
    "start": "848100",
    "end": "855600"
  },
  {
    "text": "things like that they give you really robust functionality but they don't actually expose all the",
    "start": "855600",
    "end": "861120"
  },
  {
    "text": "details to you right that's actually the beauty of having libraries and having portable code that you can move around",
    "start": "861120",
    "end": "866820"
  },
  {
    "text": "and we want that same sort of functionality in kubernetes so kubernetes does not offer the ability",
    "start": "866820",
    "end": "873600"
  },
  {
    "text": "to say hey this is internal and this is exposed which might look something like hey this is just used for composing",
    "start": "873600",
    "end": "880019"
  },
  {
    "text": "another higher level type but we can bring that functionality into",
    "start": "880019",
    "end": "885240"
  },
  {
    "text": "a kubernetes cluster via convention and you could actually enforce this convention with web hooks or something",
    "start": "885240",
    "end": "890639"
  },
  {
    "text": "like that if you wanted to in that convention somewhat controversially to some folks is that all user facing types",
    "start": "890639",
    "end": "897920"
  },
  {
    "text": "are namespace scoped so not the type definition the type definition still exists at the cluster scope right but",
    "start": "897920",
    "end": "904920"
  },
  {
    "text": "they can only be instantiated at the namespace scope and types that are not offered at the namespace scope are not",
    "start": "904920",
    "end": "912240"
  },
  {
    "text": "user facing right we're not expecting users to to create those they're more like intermediate types to be able to",
    "start": "912240",
    "end": "919019"
  },
  {
    "text": "surface that higher level one to the user in a namespace so in our interface earlier we showed",
    "start": "919019",
    "end": "926399"
  },
  {
    "text": "that we used capitalization which is uh goes Syntax for saying hey this type is",
    "start": "926399",
    "end": "931680"
  },
  {
    "text": "exported it's available to folks outside of the stuff package and in a composite resource definition",
    "start": "931680",
    "end": "937740"
  },
  {
    "text": "we Define claims and claims are saying yes please expose this at the the",
    "start": "937740",
    "end": "943500"
  },
  {
    "text": "namespace scope thus making it user-facing so you'll see later on in this presentation some examples of kind",
    "start": "943500",
    "end": "950820"
  },
  {
    "text": "of like internal types that are used to build up a higher level thing that we actually want to expose to users and",
    "start": "950820",
    "end": "957120"
  },
  {
    "text": "only that last level right is going to be exposed at the namespace scope",
    "start": "957120",
    "end": "963019"
  },
  {
    "text": "so checking in again uh program languages um or kubernetes rather we're adding",
    "start": "963300",
    "end": "969360"
  },
  {
    "text": "some additional functionality something that's somewhat similar to how programming languages work uh and if we're going to do that we need to",
    "start": "969360",
    "end": "975420"
  },
  {
    "text": "reevaluate the features that it offers um we have enumerated how programming",
    "start": "975420",
    "end": "982800"
  },
  {
    "text": "languages can allow you to Define types that are accessible within the scope that they're defined as well as outside",
    "start": "982800",
    "end": "988199"
  },
  {
    "text": "of it and we've also noticed that kubernetes gives us the ability to expose the",
    "start": "988199",
    "end": "995040"
  },
  {
    "text": "cluster namespace scope which is a differentiation and all types are defined at the cluster scope and so we",
    "start": "995040",
    "end": "1002779"
  },
  {
    "text": "can pick where they are instantiated and using the convention of only allowing user-facing types to be instantiated at",
    "start": "1002779",
    "end": "1009259"
  },
  {
    "text": "the namespace scope gives us that separation to be able to to Define what's user-facing and internal",
    "start": "1009259",
    "end": "1016940"
  },
  {
    "text": "so with that convention we've kind of accomplished one of the goals of what we want of programming the kubernetes API",
    "start": "1016940",
    "end": "1025040"
  },
  {
    "text": "but there's a bigger issue that's really more important and even more relevant for this talk right just being able to",
    "start": "1025040",
    "end": "1031459"
  },
  {
    "text": "define the internal user facing um internal versus user-facing types gives us the ability to do more things",
    "start": "1031459",
    "end": "1037040"
  },
  {
    "text": "but really the problem we're trying to solve is that outside of a single physical cluster our identifiers of",
    "start": "1037040",
    "end": "1043699"
  },
  {
    "text": "types in a kubernetes cluster are mostly meaningless so what I mean by that is if you put a",
    "start": "1043699",
    "end": "1049940"
  },
  {
    "text": "manifest in a git repo and you say hey everyone on Twitter come apply this to",
    "start": "1049940",
    "end": "1054980"
  },
  {
    "text": "your cluster now hopefully no one would go do that but someone might um and if a manifest exists in a git",
    "start": "1054980",
    "end": "1061280"
  },
  {
    "text": "repo it doesn't exist in any cluster right so how can you guarantee that a a",
    "start": "1061280",
    "end": "1066919"
  },
  {
    "text": "type identifier that is unique to the the existence of type definitions within",
    "start": "1066919",
    "end": "1072679"
  },
  {
    "text": "a single cluster means the same thing when you apply it to two different ones another way of looking at this is that a",
    "start": "1072679",
    "end": "1080000"
  },
  {
    "text": "manifest in a git repo only exists in the abstract cluster and if we think about it in that sense we think about it",
    "start": "1080000",
    "end": "1086360"
  },
  {
    "text": "as this Global abstract cluster we realize that we have to be able to uniquely identify that type in the",
    "start": "1086360",
    "end": "1092299"
  },
  {
    "text": "context of all clusters so let's figure out how we're going to do that",
    "start": "1092299",
    "end": "1097340"
  },
  {
    "text": "I showed this earlier this was one of the types we defined in go and it had",
    "start": "1097340",
    "end": "1102740"
  },
  {
    "text": "the asterisks on the identifier and that's because higher level type is not",
    "start": "1102740",
    "end": "1109520"
  },
  {
    "text": "actually the identifier of this type right the identifier of this type if you were using you know go modules or",
    "start": "1109520",
    "end": "1116660"
  },
  {
    "text": "something like that would be a DNS name and a hash of the content of the module that it came from and then it would also",
    "start": "1116660",
    "end": "1123020"
  },
  {
    "text": "be identified if you literally looked at the the symbol table in the binary by the package that it came from right so",
    "start": "1123020",
    "end": "1129080"
  },
  {
    "text": "that means that if you go to my repository and you clone it and you build the project it's either going to",
    "start": "1129080",
    "end": "1135080"
  },
  {
    "text": "fail because it can't find that package or it's going to build with the exact same content that I Define it should",
    "start": "1135080",
    "end": "1141140"
  },
  {
    "text": "right so we can reproduce that behavior in in different places on different machines where we're compiling",
    "start": "1141140",
    "end": "1147320"
  },
  {
    "text": "we don't have that same ability uh with types in a kubernetes cluster",
    "start": "1147320",
    "end": "1153400"
  },
  {
    "text": "so uh we already went through this a little bit but the GVK is unique within a single cluster right you can't have",
    "start": "1153500",
    "end": "1159799"
  },
  {
    "text": "conflicts at that level but they are not unique in the context of the abstract",
    "start": "1159799",
    "end": "1165260"
  },
  {
    "text": "cluster another way to say what I've been saying over the past couple slides is that types are not portable right",
    "start": "1165260",
    "end": "1171080"
  },
  {
    "text": "they can't be moved across clusters with guarantee that the syntax has the same",
    "start": "1171080",
    "end": "1176299"
  },
  {
    "text": "semantics um and so this causes some issues and if",
    "start": "1176299",
    "end": "1182960"
  },
  {
    "text": "you're Qui-Gon gen you might say gvks will do fine and I would say no they won't",
    "start": "1182960",
    "end": "1190840"
  },
  {
    "text": "before we actually address this problem though we need to address a key fact of",
    "start": "1191179",
    "end": "1197059"
  },
  {
    "text": "types and that's the just the data structure is not enough to separate",
    "start": "1197059",
    "end": "1203179"
  },
  {
    "text": "types from each other right you could have two types of the exact same data structure but they are not the same and",
    "start": "1203179",
    "end": "1208220"
  },
  {
    "text": "why are they not the same it's because we're able to attach Behavior to types we saw this on some methods earlier that",
    "start": "1208220",
    "end": "1215059"
  },
  {
    "text": "were defined on an interface and when we're using an imperative programming language we attach Behavior to types and",
    "start": "1215059",
    "end": "1221780"
  },
  {
    "text": "we call it explicitly right we instantiate the type and we say create or we instantiate instantiate the type",
    "start": "1221780",
    "end": "1227120"
  },
  {
    "text": "and say do something right in a declarative programming model which",
    "start": "1227120",
    "end": "1232760"
  },
  {
    "text": "is what we're doing with the kubernetes API we provide the system with enough data to actually call the methods for us",
    "start": "1232760",
    "end": "1240140"
  },
  {
    "text": "so in the crosswind project we frequently think about a Reconciliation Loop not in terms of uh just constant",
    "start": "1240140",
    "end": "1247940"
  },
  {
    "text": "Loop that goes and does a bunch of things we think of it in terms of crud operations create update delete right",
    "start": "1247940",
    "end": "1253640"
  },
  {
    "text": "and really when you're authoring a reconciler using some of our shared libraries you actually just Define those",
    "start": "1253640",
    "end": "1259039"
  },
  {
    "text": "create update delete operations because the rest of the logic that invokes that behavior is generic",
    "start": "1259039",
    "end": "1266559"
  },
  {
    "text": "um but in both of these environments you are attaching behavior of the type with its definition and the key thing about",
    "start": "1267740",
    "end": "1275059"
  },
  {
    "text": "not even being able to take a type and saying hey this literally has the same structure the same open API V3 schema is",
    "start": "1275059",
    "end": "1281539"
  },
  {
    "text": "that its semantics are dictated by the controllers that are reconciling it so",
    "start": "1281539",
    "end": "1287360"
  },
  {
    "text": "we need to actually tie the behavior of creating a type in a kubernetes cluster with the definition of its structure",
    "start": "1287360",
    "end": "1295100"
  },
  {
    "text": "so this is just an example of how we might attach some data to a type in a",
    "start": "1295100",
    "end": "1300260"
  },
  {
    "text": "programming language we Define an operation with a signature here we might provide data via arguments and there",
    "start": "1300260",
    "end": "1306740"
  },
  {
    "text": "might also be data that's inherent to the type like I said in the context of a declarative system we're actually just",
    "start": "1306740",
    "end": "1313220"
  },
  {
    "text": "providing all that data up front we say here's the thing that I want to happen you perform the operations system and",
    "start": "1313220",
    "end": "1320240"
  },
  {
    "text": "and make sure that you know it looks as I've specified here so we said this causes some issues the",
    "start": "1320240",
    "end": "1327320"
  },
  {
    "text": "fact that we can't do this the first one is potentially pretty straightforward and that's opaque type instantiation",
    "start": "1327320",
    "end": "1333280"
  },
  {
    "text": "when I create an instance of a type in any cluster I don't know whether a type",
    "start": "1333280",
    "end": "1339260"
  },
  {
    "text": "by that identifier exists right and that's actually a great case because that's going to get rejected by the API server if I try to create that RDS",
    "start": "1339260",
    "end": "1346460"
  },
  {
    "text": "instance type that we saw earlier and and there's no type by that GVK in the cluster it's just going to fail and",
    "start": "1346460",
    "end": "1352880"
  },
  {
    "text": "that's that's actually a pretty good outcome for us maybe not the best but it is a good outcome um more critically though is it could",
    "start": "1352880",
    "end": "1360200"
  },
  {
    "text": "succeed but it could do something I don't expect at all when we create an RDS instance when we're using the AWS",
    "start": "1360200",
    "end": "1366200"
  },
  {
    "text": "provider and cross plane we expect that it will provision an aw or an RDS",
    "start": "1366200",
    "end": "1371659"
  },
  {
    "text": "instance on AWS you could also say that it does literally anything else it could delete",
    "start": "1371659",
    "end": "1377659"
  },
  {
    "text": "all your infrastructure or you know delete all the pods in your cluster or something like that so we need to be",
    "start": "1377659",
    "end": "1382880"
  },
  {
    "text": "able to actually identify that the behavior that's attached to the type that we're instantiating is the one that we want",
    "start": "1382880",
    "end": "1390100"
  },
  {
    "text": "so uh here in this case this is the example of opaque type instantiation uh the GVK called out here in the API",
    "start": "1390260",
    "end": "1396980"
  },
  {
    "text": "version in kind Fields essentially what we're saying is in the abstract cluster this doesn't tell us anything",
    "start": "1396980",
    "end": "1403640"
  },
  {
    "text": "the second issue that we run into is an opaque type composition so if we're composing things into a higher level",
    "start": "1403640",
    "end": "1409700"
  },
  {
    "text": "type like the composition of the RDS instance we saw earlier we don't know whether the types",
    "start": "1409700",
    "end": "1415640"
  },
  {
    "text": "associated with the gvks in the composition will match the types associated in the users cluster so we",
    "start": "1415640",
    "end": "1422120"
  },
  {
    "text": "want to be able to say hey if we're providing a package of abstractions to you we want to know the Primitives that",
    "start": "1422120",
    "end": "1427280"
  },
  {
    "text": "we are composing are what we tested with right what we said they will do because",
    "start": "1427280",
    "end": "1432919"
  },
  {
    "text": "the GVK could have gotten there any other way right",
    "start": "1432919",
    "end": "1437799"
  },
  {
    "text": "um so here once again we have an example of a composition we're composing the RDS instance here but we don't really",
    "start": "1438080",
    "end": "1443120"
  },
  {
    "text": "actually know what that RDS instance is so checking in again right we haven't",
    "start": "1443120",
    "end": "1448700"
  },
  {
    "text": "solved the problem we've just created all of these issues in order for the kubernetes Manifest to be portable there",
    "start": "1448700",
    "end": "1454760"
  },
  {
    "text": "are type definitions cannot be tied to a single physical cluster we said the definition of a type",
    "start": "1454760",
    "end": "1461840"
  },
  {
    "text": "includes both the structure of its data which we traditionally think of but also the definition of Its Behavior",
    "start": "1461840",
    "end": "1469039"
  },
  {
    "text": "um we've said there are multiple levels of composition uh within a type and that",
    "start": "1469039",
    "end": "1474380"
  },
  {
    "text": "their dependencies must be composable that's what we're talking about we need to make sure that that RDS instance that we're assuming is present in the cluster",
    "start": "1474380",
    "end": "1480679"
  },
  {
    "text": "is the one that we expected when we authored the composition",
    "start": "1480679",
    "end": "1485720"
  },
  {
    "text": "um and that was all we did in that section um so now we're going to solve the problem right and we're going to do that",
    "start": "1485720",
    "end": "1491360"
  },
  {
    "text": "by creating globally unique types or types that are unique within the abstract cluster and we don't want to do",
    "start": "1491360",
    "end": "1498140"
  },
  {
    "text": "a lot of work that's already been done before so let's look and see where we can find",
    "start": "1498140",
    "end": "1503840"
  },
  {
    "text": "some examples of global uniqueness so one of the first places we've talked about it Ad nauseam at this point is in",
    "start": "1503840",
    "end": "1510380"
  },
  {
    "text": "programming languages because we need to know we need to be able to compile that program and have it be reproducible by",
    "start": "1510380",
    "end": "1517280"
  },
  {
    "text": "just the contents of a git repo or some sort of source control",
    "start": "1517280",
    "end": "1523400"
  },
  {
    "text": "another place where we see it frequently in the cloud native ecosystem especially is with oci images",
    "start": "1523400",
    "end": "1530659"
  },
  {
    "text": "and oci images we need to be able to identify uniquely because they're doing a pretty sensitive",
    "start": "1530659",
    "end": "1538100"
  },
  {
    "text": "thing right they're they're running arbitrary compute on or they're running arbitrary behavior on our compute so we",
    "start": "1538100",
    "end": "1543799"
  },
  {
    "text": "need to make sure that when we actually run a container image right that it's going to be the one that we expect and",
    "start": "1543799",
    "end": "1549380"
  },
  {
    "text": "it's not going to mine Bitcoin or do whatever your favorite um malicious thing is",
    "start": "1549380",
    "end": "1555260"
  },
  {
    "text": "and so oci images solve this problem by what we call content addressability and",
    "start": "1555260",
    "end": "1561020"
  },
  {
    "text": "the simplest definition of content addressability is that we ask for something by what it is uh not not by",
    "start": "1561020",
    "end": "1567320"
  },
  {
    "text": "what it's named so an example of asking for something by what it's named would be a DNS name right with no verification",
    "start": "1567320",
    "end": "1573740"
  },
  {
    "text": "of the content or a tag on oci images right when we ask by what it is we're",
    "start": "1573740",
    "end": "1578779"
  },
  {
    "text": "taking a a cryptographically computed a digest of the contents of something and",
    "start": "1578779",
    "end": "1585200"
  },
  {
    "text": "saying that's how we're going to request it and actually that also frees us up from saying we don't actually care where",
    "start": "1585200",
    "end": "1590360"
  },
  {
    "text": "we get it from as long as it comes from somewhere and we can calculate and verify the digest matches",
    "start": "1590360",
    "end": "1597440"
  },
  {
    "text": "so right we we know what we uh that what we get is what we ask for so if we wanted to apply this to",
    "start": "1597440",
    "end": "1603799"
  },
  {
    "text": "kubernetes types or if we're thinking about how to apply it to kubernetes types um which one of these systems will we",
    "start": "1603799",
    "end": "1609679"
  },
  {
    "text": "leverage well oci Registries are already ubiquitous you can probably get one from",
    "start": "1609679",
    "end": "1615440"
  },
  {
    "text": "your favorite cloud provider you probably already have one internally in your organization if you're of any",
    "start": "1615440",
    "end": "1620779"
  },
  {
    "text": "sufficient size and if you don't have any of those things you can actually run one on a Raspberry Pi in your basement",
    "start": "1620779",
    "end": "1628039"
  },
  {
    "text": "oci also has a thriving ecosystem so there's lots of tooling at present it's actually growing all the time there's a",
    "start": "1628039",
    "end": "1634159"
  },
  {
    "text": "few new projects that really uh hit like 1.0 or gain maturity I think around this",
    "start": "1634159",
    "end": "1639559"
  },
  {
    "text": "kubecon around the oci ecosystem so we can leverage all that tooling and all",
    "start": "1639559",
    "end": "1644720"
  },
  {
    "text": "the work that folks are doing it's also constantly improving I know",
    "start": "1644720",
    "end": "1650360"
  },
  {
    "text": "the gke team released something about image streaming at some point this year which is a pretty cool concept image",
    "start": "1650360",
    "end": "1657860"
  },
  {
    "text": "signing has been a Hot Topic in the Stage store community and broadly in the kubernetes ecosystem something we've",
    "start": "1657860",
    "end": "1664159"
  },
  {
    "text": "actually been working on for our packages in the cross plan ecosystem as well",
    "start": "1664159",
    "end": "1669860"
  },
  {
    "text": "so this seems like a pretty good solution right folks already know how to use it so a few years ago in the cross",
    "start": "1669860",
    "end": "1674960"
  },
  {
    "text": "plain Community we said uh what if we take our kubernetes types and just put",
    "start": "1674960",
    "end": "1680900"
  },
  {
    "text": "them in oci images and we can push them around we have a good distribution story and they're content addressable",
    "start": "1680900",
    "end": "1686600"
  },
  {
    "text": "um and that that could work uh fairly well so let's look at packages as a reference",
    "start": "1686600",
    "end": "1691640"
  },
  {
    "text": "for how we can achieve this Global uniqueness for types",
    "start": "1691640",
    "end": "1696919"
  },
  {
    "text": "uh Crossing packages are are referred to as X packages and there's a",
    "start": "1696919",
    "end": "1701960"
  },
  {
    "text": "specification in the cross-plane documentation for uh what this means is basically a superset of the specification for oci images so",
    "start": "1701960",
    "end": "1708740"
  },
  {
    "text": "additional constraints on oci images they come in two different flavors providers are going to bundle a bunch of",
    "start": "1708740",
    "end": "1714679"
  },
  {
    "text": "crds as yaml into an image and then they're also going to have the controller so you can literally Docker",
    "start": "1714679",
    "end": "1720919"
  },
  {
    "text": "run a provider if you want to or install it and run it as a pod cross plane knows",
    "start": "1720919",
    "end": "1726260"
  },
  {
    "text": "what layers to look at to get the crds out of and when it pulls down a provider it cracks it open applies those crds and",
    "start": "1726260",
    "end": "1732740"
  },
  {
    "text": "then runs the controller for you all the same image though we also have configurations and",
    "start": "1732740",
    "end": "1739400"
  },
  {
    "text": "configurations are how you introduce compositions and xrds to your cluster so",
    "start": "1739400",
    "end": "1745640"
  },
  {
    "text": "they just basically have a bunch of yaml and oci image they're not runnable in any form or fashion",
    "start": "1745640",
    "end": "1751240"
  },
  {
    "text": "but bundling the Primitive types those types Define V via crds and included in",
    "start": "1751240",
    "end": "1757460"
  },
  {
    "text": "providers with their controllers meaning that we have one digest right the digest",
    "start": "1757460",
    "end": "1762679"
  },
  {
    "text": "for their manifest that uniquely identifies a type and the behavior associated with it and another key point",
    "start": "1762679",
    "end": "1768919"
  },
  {
    "text": "of that is when you install these types in a a kubernized cluster where crossline is installed cross plane will",
    "start": "1768919",
    "end": "1775399"
  },
  {
    "text": "verify that only one controller or one implementation of controllers can be",
    "start": "1775399",
    "end": "1780500"
  },
  {
    "text": "reconciling a type at a time so you can't just bring it along another controller and install it via a cross",
    "start": "1780500",
    "end": "1786140"
  },
  {
    "text": "plane and have it also Define behavior right the Manifest is defining the only behavior that is applied to the type",
    "start": "1786140",
    "end": "1792200"
  },
  {
    "text": "that's in the same package as it um so we have the content addressable",
    "start": "1792200",
    "end": "1797480"
  },
  {
    "text": "image manifest in that GVK another restriction here is that there's only one definition of that GVK within a",
    "start": "1797480",
    "end": "1804260"
  },
  {
    "text": "package which might be expected since they're going into the same cluster so let's look at the two problems that",
    "start": "1804260",
    "end": "1811580"
  },
  {
    "text": "we defined and look at our Solutions so solution number one is verified type instantiation this is not something we",
    "start": "1811580",
    "end": "1819260"
  },
  {
    "text": "force upon users but something you can do with something like an admission web hook you can supply additional",
    "start": "1819260",
    "end": "1824960"
  },
  {
    "text": "information about the digest of the package from which a type came",
    "start": "1824960",
    "end": "1830559"
  },
  {
    "text": "and validate that digest when you actually create the Manifest so here's",
    "start": "1830559",
    "end": "1836600"
  },
  {
    "text": "an example of putting a digest and a package reference on a manifest that",
    "start": "1836600",
    "end": "1841760"
  },
  {
    "text": "gets applied into a cluster an admission web hook could very easily check and see hey is this package already installed if",
    "start": "1841760",
    "end": "1848120"
  },
  {
    "text": "so I can verify that if it came from Cross plain that that that type came from that package and therefore this",
    "start": "1848120",
    "end": "1854360"
  },
  {
    "text": "type should behave as the person who specify this annotation would expect which means that you could put a",
    "start": "1854360",
    "end": "1861679"
  },
  {
    "text": "manifest in a git repo and actually have guarantees around when someone applies it to their cluster what that means it's",
    "start": "1861679",
    "end": "1867500"
  },
  {
    "text": "either going to fail or it's going to do what you affected second one is verified type composition",
    "start": "1867500",
    "end": "1873020"
  },
  {
    "text": "this is something that's built natively into cross-plane packages by its support",
    "start": "1873020",
    "end": "1878059"
  },
  {
    "text": "for dependencies crosswind will not install types into a",
    "start": "1878059",
    "end": "1883279"
  },
  {
    "text": "cluster until the dependencies of the package they came in are satisfied so here we have an example of a package",
    "start": "1883279",
    "end": "1890240"
  },
  {
    "text": "we're actually going to show installing in just a moment and it has some some",
    "start": "1890240",
    "end": "1895340"
  },
  {
    "text": "references to dependencies as well as some constraints on them now in this",
    "start": "1895340",
    "end": "1900860"
  },
  {
    "text": "specific case we're using tags right so we don't have full content addressability we could have someone",
    "start": "1900860",
    "end": "1907760"
  },
  {
    "text": "intersect intercepting our DNS resolution right and giving us the wrong thing back so this is not actually",
    "start": "1907760",
    "end": "1914260"
  },
  {
    "text": "achieving it fully but the reason why we do this is because a lot of times humans are authoring these right and it's kind",
    "start": "1914260",
    "end": "1921679"
  },
  {
    "text": "of hard for humans to work with digests but we still want we don't want to sacrifice that functionality just",
    "start": "1921679",
    "end": "1928100"
  },
  {
    "text": "because humans have some some difficulty with stuff so our problem is that humans are lazy",
    "start": "1928100",
    "end": "1933559"
  },
  {
    "text": "or perhaps we're incapable sometimes but the solution is that we can ask for",
    "start": "1933559",
    "end": "1938720"
  },
  {
    "text": "things by name and then verify by their content right so before we actually do the thing uh that could bring malicious",
    "start": "1938720",
    "end": "1945380"
  },
  {
    "text": "behavior into a cluster we'll verify that the content is what we expected so in crossfiting we do this with",
    "start": "1945380",
    "end": "1952279"
  },
  {
    "text": "package revisions where you can set a manual activation policy that means that when you install a package CrossFit will",
    "start": "1952279",
    "end": "1958880"
  },
  {
    "text": "pull it down it'll crack it open it will look at it say okay these are all the types that are going to get installed and I'm going to run the controller",
    "start": "1958880",
    "end": "1965720"
  },
  {
    "text": "image that is associated with them and here's the digest but it won't actually do it right it'll wait and say hey",
    "start": "1965720",
    "end": "1971000"
  },
  {
    "text": "here's a revision it has this digest it has a list of all the types that will be installed but it doesn't actually",
    "start": "1971000",
    "end": "1976279"
  },
  {
    "text": "proceed with that until you say yes activate you flip a field and you say this revision is now active so you see",
    "start": "1976279",
    "end": "1983480"
  },
  {
    "text": "the digest you say this looks good this is now active and running and ostensibly it's doing what you asked for",
    "start": "1983480",
    "end": "1990919"
  },
  {
    "text": "then you want to upgrade to a new version of a package so you say I now want provider AWS V",
    "start": "1990919",
    "end": "1996740"
  },
  {
    "text": "0.19 you still have the old Revision in play but you've got a new revision that's been created but not activated",
    "start": "1996740",
    "end": "2002620"
  },
  {
    "text": "yet so you can once again say okay what's the digest here what types have changed what controller is going to be",
    "start": "2002620",
    "end": "2009039"
  },
  {
    "text": "run and if that all looks good then you can say I'm going to activate that one cross plan will automatically deactivate",
    "start": "2009039",
    "end": "2015100"
  },
  {
    "text": "the other one migrate types to the new one shut down the old controllers start up the new ones",
    "start": "2015100",
    "end": "2021700"
  },
  {
    "text": "all right so we've solved our problem let's actually see how it's in action but before we go to that let's check in",
    "start": "2021700",
    "end": "2028679"
  },
  {
    "text": "we can take advantage of the content addressability of an oci ecosystem by packaging our content in oci images the",
    "start": "2028679",
    "end": "2037179"
  },
  {
    "text": "packages allow us to expand the definition of types defined via crds to",
    "start": "2037179",
    "end": "2042640"
  },
  {
    "text": "include Its Behavior that's associated a package revisions allow us to present",
    "start": "2042640",
    "end": "2048760"
  },
  {
    "text": "a human friendly interface where we can use something like semantic versions without sacrificing uh verifying using",
    "start": "2048760",
    "end": "2056500"
  },
  {
    "text": "content addressability and with that let's get into the demo I",
    "start": "2056500",
    "end": "2062740"
  },
  {
    "text": "have one minute left so this is going to be a very fast demo if you would like to follow along I will post on Twitter",
    "start": "2062740",
    "end": "2070419"
  },
  {
    "text": "right now the manifests for or the description uh of what we're going",
    "start": "2070419",
    "end": "2076060"
  },
  {
    "text": "through so let me do that and then I'll do it quickly I don't know if anyone else has",
    "start": "2076060",
    "end": "2081760"
  },
  {
    "text": "seen this around yet but a bunch of demos have been failing uh recently",
    "start": "2081760",
    "end": "2087099"
  },
  {
    "text": "because Docker Hub is limit rate limiting the kubecon network",
    "start": "2087099",
    "end": "2092700"
  },
  {
    "text": "so that's been a lot of fun but we're actually not using Docker Hub here so",
    "start": "2092700",
    "end": "2098140"
  },
  {
    "text": "um ideally that's not going to happen",
    "start": "2098140",
    "end": "2102180"
  },
  {
    "text": "all right let's see if this uh this seems to be correct here",
    "start": "2106540",
    "end": "2113099"
  },
  {
    "text": "yeah can y'all can you all see my term I can't actually see the screen does that look okay",
    "start": "2113560",
    "end": "2118720"
  },
  {
    "text": "bigger smaller good all right so I have a kind cluster",
    "start": "2118720",
    "end": "2124780"
  },
  {
    "text": "running locally um so you can see we have cross plane and the cross plane our back manager going so what we want to do is uh",
    "start": "2124780",
    "end": "2131380"
  },
  {
    "text": "install uh that type and let me see if I can get my browser up here okay it looks",
    "start": "2131380",
    "end": "2137079"
  },
  {
    "text": "like that's working let's actually look at the type that we're installing here if we go over to configurations we can",
    "start": "2137079",
    "end": "2145359"
  },
  {
    "text": "see we're going to install this platform ref AWS so it has two dependencies",
    "start": "2145359",
    "end": "2150700"
  },
  {
    "text": "that's actually the Manifest we are seeing in the slides there has one on provider AWS and one in provider Helm it",
    "start": "2150700",
    "end": "2156460"
  },
  {
    "text": "brings some xrds and some compositions so for instance the eks composition here",
    "start": "2156460",
    "end": "2161980"
  },
  {
    "text": "is going to take a bunch of the Primitive types supplied by provider AWS and it's going to compose them into a",
    "start": "2161980",
    "end": "2168280"
  },
  {
    "text": "higher level thing that represents an eks cluster if you've ever created an eks cluster you know this is very",
    "start": "2168280",
    "end": "2174460"
  },
  {
    "text": "painful so now you can just have a very simple interface and we'll create all these things on the back side for you",
    "start": "2174460",
    "end": "2181300"
  },
  {
    "text": "so let me grab the image reference here and I'll go ahead and install this",
    "start": "2181300",
    "end": "2187980"
  },
  {
    "text": "there we go configuration",
    "start": "2193180",
    "end": "2199060"
  },
  {
    "text": "install all right that looks good and we're going to see a package get created or",
    "start": "2199060",
    "end": "2206020"
  },
  {
    "text": "actually we're a little slow so two packages are already present so we have our platform ref AWS it is not quite",
    "start": "2206020",
    "end": "2213220"
  },
  {
    "text": "healthy yet it's unknown because we're waiting for our dependencies here but you see we've already resolved one of",
    "start": "2213220",
    "end": "2218859"
  },
  {
    "text": "our dependencies to provide our AWS and let's see if our other one has come along not quite yet",
    "start": "2218859",
    "end": "2226119"
  },
  {
    "text": "I was having some issues with the network earlier so we'll see if we experience any it looks like they are",
    "start": "2226119",
    "end": "2231940"
  },
  {
    "text": "coming along we also have our package revisions we have one for each so um",
    "start": "2231940",
    "end": "2237520"
  },
  {
    "text": "here's the digest or the short digest of um the configuration package we",
    "start": "2237520",
    "end": "2242740"
  },
  {
    "text": "installed and here's the short digest of the provider AWS version we have installed and you'll see our revisions",
    "start": "2242740",
    "end": "2248740"
  },
  {
    "text": "are numbered as well and we have a count of the dependencies that we have but none of our dependencies are quite ready",
    "start": "2248740",
    "end": "2255220"
  },
  {
    "text": "yet all right so it looks like those are taking a bit of time here",
    "start": "2255220",
    "end": "2262140"
  },
  {
    "text": "check out and see looks like cross plane is still fine here we go now we have uh provider Helm",
    "start": "2262359",
    "end": "2269140"
  },
  {
    "text": "coming along as well and once those are both ready we'll actually see platform ref AWS say okay all of the types that I",
    "start": "2269140",
    "end": "2276460"
  },
  {
    "text": "expected in their Associated Behavior are now present in the cluster and so I can add my types and now when someone",
    "start": "2276460",
    "end": "2282339"
  },
  {
    "text": "creates an instance of my eks abstraction or my cluster abstraction it's going to result in creation of",
    "start": "2282339",
    "end": "2288400"
  },
  {
    "text": "types with their Associated behavior that are what I specified when I built this package having no idea what cluster",
    "start": "2288400",
    "end": "2295240"
  },
  {
    "text": "it would actually get installed into so it looks like they're just about",
    "start": "2295240",
    "end": "2300579"
  },
  {
    "text": "there provider AWS is is pretty big so uh it's just finishing up and we can see",
    "start": "2300579",
    "end": "2305980"
  },
  {
    "text": "that the controller image there is already running for provider home",
    "start": "2305980",
    "end": "2312040"
  },
  {
    "text": "so uh We snuck in a quick demo there um I know this was kind of a conceptual",
    "start": "2312040",
    "end": "2317859"
  },
  {
    "text": "talk but hopefully this end uh tied it together a little bit um and yeah I'd love to answer any",
    "start": "2317859",
    "end": "2324579"
  },
  {
    "text": "questions folks have if that's permitted given how far overtime we already are but thanks for being here",
    "start": "2324579",
    "end": "2332280"
  },
  {
    "text": "foreign",
    "start": "2332320",
    "end": "2335320"
  },
  {
    "text": "I don't know if these are good questions but nobody's here so I don't care",
    "start": "2347859",
    "end": "2352900"
  },
  {
    "text": "um two questions um if you're defining with a crd the name",
    "start": "2352900",
    "end": "2359560"
  },
  {
    "text": "of the crd kind of tells you what it does you know there's a general convention so if you're including the",
    "start": "2359560",
    "end": "2365260"
  },
  {
    "text": "behavior as part of the definition of the type is there going to be a convention for how you will",
    "start": "2365260",
    "end": "2371200"
  },
  {
    "text": "with brevity describe the behavior in a way that will be unique and informative to people who say I want this type",
    "start": "2371200",
    "end": "2377560"
  },
  {
    "text": "versus that type and then my second question which is found in my ignorance of cross-plane can",
    "start": "2377560",
    "end": "2383380"
  },
  {
    "text": "your goals be achieved without cross-plane yeah so um speaking to the first",
    "start": "2383380",
    "end": "2388599"
  },
  {
    "text": "question um I think the the brevity would go for there is like the the org repo tag",
    "start": "2388599",
    "end": "2395560"
  },
  {
    "text": "structure of oci images um so you know an image itself is a",
    "start": "2395560",
    "end": "2401020"
  },
  {
    "text": "bundling of types and then they're they're representative Behavior as well so I guess that would be kind of the the",
    "start": "2401020",
    "end": "2408099"
  },
  {
    "text": "brief way to describe them you are defining a bundle of them actually something that's come up quite a bit in",
    "start": "2408099",
    "end": "2413980"
  },
  {
    "text": "the crosswind community is hey can I just say I want one type right and just get that one and it's Associated",
    "start": "2413980",
    "end": "2419859"
  },
  {
    "text": "Behavior even if we did something like that let's just say just the RDS instance came and not all of our AWS",
    "start": "2419859",
    "end": "2425800"
  },
  {
    "text": "types which they'd actually show that here but we can see that we now have lots and lots of types present in our",
    "start": "2425800",
    "end": "2431800"
  },
  {
    "text": "cluster if we just wanted one of those we'd likely still say that the binary",
    "start": "2431800",
    "end": "2437140"
  },
  {
    "text": "that's able to reconcile all of them is the associated Behavior so it'd still be the same digest of the package image",
    "start": "2437140",
    "end": "2444099"
  },
  {
    "text": "uniquely identifying that single type um and then speaking to whether you need cross-plane to be able to do this",
    "start": "2444099",
    "end": "2450760"
  },
  {
    "text": "um in theory no right if we just had uh ocim if we put our types in oci images or any content addressable storage",
    "start": "2450760",
    "end": "2457900"
  },
  {
    "text": "um that could also work some of the guarantees that the cross plane package manager gives you namely that one where",
    "start": "2457900",
    "end": "2463240"
  },
  {
    "text": "we only let uh One controller or one set of controllers be reconciling a group of",
    "start": "2463240",
    "end": "2468520"
  },
  {
    "text": "types is important to make this work right if you can just add arbitrary other controllers via other means which",
    "start": "2468520",
    "end": "2474280"
  },
  {
    "text": "by the way you can do if you're not adhering to Convention um then you could in theory do this",
    "start": "2474280",
    "end": "2479619"
  },
  {
    "text": "without crossband but you need to replicate that sort of behavior crossbane is a fairly generic project",
    "start": "2479619",
    "end": "2485260"
  },
  {
    "text": "though right there's kind of anything you can do with it we view it as a framework so it can be applied for a lot of",
    "start": "2485260",
    "end": "2491380"
  },
  {
    "text": "different use cases mm-hmm so one of the things that has become a",
    "start": "2491380",
    "end": "2497200"
  },
  {
    "text": "little bit difficult about managing custom resource definitions is often version updates and migration and so",
    "start": "2497200",
    "end": "2503740"
  },
  {
    "text": "when you showed the example of like oh cross plane will go from I don't know AWS 18 to AWS 19. how does it handle crd",
    "start": "2503740",
    "end": "2512320"
  },
  {
    "text": "version conversions and just you know anything that's a composite so let's say the deployment spec change like how",
    "start": "2512320",
    "end": "2518859"
  },
  {
    "text": "would you handle that um that we can start with that I have a few more but yeah cool cool yeah no that",
    "start": "2518859",
    "end": "2525099"
  },
  {
    "text": "is a that's a good call right it's not as simple as the the diagram um said there so the first way we handle",
    "start": "2525099",
    "end": "2531640"
  },
  {
    "text": "it today is we allow you to specify a web hook configurations and your provider package as well so you can put",
    "start": "2531640",
    "end": "2537520"
  },
  {
    "text": "conversion web hooks in there we've also been starting to experiment early on uh",
    "start": "2537520",
    "end": "2544599"
  },
  {
    "text": "with common expression language so CEO um and using that as well and being able to bundle that in um so that's how it's",
    "start": "2544599",
    "end": "2550839"
  },
  {
    "text": "handled today um and so if we install the new types sometimes we have run into cases where",
    "start": "2550839",
    "end": "2556660"
  },
  {
    "text": "someone will have a provider where they don't have a good migration story in which case you know the the install may",
    "start": "2556660",
    "end": "2562780"
  },
  {
    "text": "break and you have to say hey delete the old crd and have it replaced we've also had folks develop tools where they say",
    "start": "2562780",
    "end": "2569079"
  },
  {
    "text": "hey if I'm not actually since we have a big bundle of crds in a single package they're saying hey if I don't have an",
    "start": "2569079",
    "end": "2574119"
  },
  {
    "text": "instance of the crd just go ahead and delete it and let it get replaced with the new version so not a silver bullet but it does does the",
    "start": "2574119",
    "end": "2581319"
  },
  {
    "text": "job did you have uh I think she had a couple more yeah",
    "start": "2581319",
    "end": "2588940"
  },
  {
    "text": "um you briefly mentioned that you check to make sure that only one controller",
    "start": "2590200",
    "end": "2595540"
  },
  {
    "text": "modifies a given kind in a cluster does that include like the composite like",
    "start": "2595540",
    "end": "2601000"
  },
  {
    "text": "types inside let's say you have a deployment that's wrapped by a crd like how would you differentiate like the",
    "start": "2601000",
    "end": "2607480"
  },
  {
    "text": "scope of responsibilities between controllers or how do you identify that yeah so only cross plane uh will touch",
    "start": "2607480",
    "end": "2614200"
  },
  {
    "text": "the the composition uh process right now so um if you defined an xrd well for",
    "start": "2614200",
    "end": "2621700"
  },
  {
    "text": "instance you can't put an xrd into a provider package we say you can only have crds and those web hook configurations as well and then in the",
    "start": "2621700",
    "end": "2628960"
  },
  {
    "text": "composition package there's no actual Behavior coming in so if you do everything through the crosswind package",
    "start": "2628960",
    "end": "2634300"
  },
  {
    "text": "manager there's no way to install uh additional controllers that can manage like the the xrds for instance the",
    "start": "2634300",
    "end": "2641260"
  },
  {
    "text": "higher level types it would strictly be let's say you have you define an xrd and then you put that in another composition",
    "start": "2641260",
    "end": "2647440"
  },
  {
    "text": "right so you have nesting of abstraction here it's still cross-plane that would say hey okay we'll take the highest",
    "start": "2647440",
    "end": "2653980"
  },
  {
    "text": "level of abstraction we'll render out all of the things it composes if another one of those is an xrd we're just",
    "start": "2653980",
    "end": "2659800"
  },
  {
    "text": "rendering out again until we actually bottom out to a primitive type those installed by a provider and then the",
    "start": "2659800",
    "end": "2664839"
  },
  {
    "text": "controllers for that will start reconciling it sweet cool thank you",
    "start": "2664839",
    "end": "2669839"
  },
  {
    "text": "okay oh we got one over here I think",
    "start": "2676240",
    "end": "2681480"
  },
  {
    "text": "um sorry if I wasn't following along but is any of the suggestion for this to put this in upstream or just this be a",
    "start": "2687819",
    "end": "2693339"
  },
  {
    "text": "feature of cross plane yeah so um I would like to see this",
    "start": "2693339",
    "end": "2698500"
  },
  {
    "text": "become a more standardized thing whether that you know involves lots of people installing cross-plane to be able to do",
    "start": "2698500",
    "end": "2704920"
  },
  {
    "text": "this with arbitrary things or it becomes some sort of more generic standard I",
    "start": "2704920",
    "end": "2710020"
  },
  {
    "text": "think I'd be fairly indifferent to it um I don't necessarily think it's something that for instance belongs in",
    "start": "2710020",
    "end": "2716440"
  },
  {
    "text": "the kubernetes API server um however if if someone did want to have that discussion I'd definitely be",
    "start": "2716440",
    "end": "2722200"
  },
  {
    "text": "open to it um but we're kind of generically talking about the concept of using content",
    "start": "2722200",
    "end": "2727540"
  },
  {
    "text": "addressable types here rather than saying you know this implementation specifically is the best example it's",
    "start": "2727540",
    "end": "2733660"
  },
  {
    "text": "just the one that we use that's been you know useful for us so yes if there is an opportunity to make this a generic",
    "start": "2733660",
    "end": "2739960"
  },
  {
    "text": "standard I think that would be great so someone could use cross plane today",
    "start": "2739960",
    "end": "2745420"
  },
  {
    "text": "to install their crds with the dependencies yep exactly and and the",
    "start": "2745420",
    "end": "2751359"
  },
  {
    "text": "providers who are generally thought of as um you know managing external infrastructure that's typically how",
    "start": "2751359",
    "end": "2758079"
  },
  {
    "text": "people think of cross plane they're not actually restricted to that in any shape or fashion so you could actually have a",
    "start": "2758079",
    "end": "2763839"
  },
  {
    "text": "provider that did almost anything so it's kind of just actually Patrick packaging types with controllers so if",
    "start": "2763839",
    "end": "2771280"
  },
  {
    "text": "you wanted to use cross plain in that mode that would be somewhat unconventional but not restricted",
    "start": "2771280",
    "end": "2778619"
  },
  {
    "text": "all right cool I hope everyone has uh safe flights back to wherever you call home and",
    "start": "2780880",
    "end": "2787119"
  },
  {
    "text": "thanks for sticking around [Applause]",
    "start": "2787119",
    "end": "2792659"
  }
]