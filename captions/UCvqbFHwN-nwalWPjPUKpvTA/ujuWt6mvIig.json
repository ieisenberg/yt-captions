[
  {
    "start": "0",
    "end": "82000"
  },
  {
    "text": "okay so I'll start I'll first introduce",
    "start": "650",
    "end": "6120"
  },
  {
    "text": "myself my name is Iran I'm a CTO and",
    "start": "6120",
    "end": "11340"
  },
  {
    "text": "founder of the company called the guardia I want to focus too much on what we do I'll focus on how we do things",
    "start": "11340",
    "end": "17970"
  },
  {
    "text": "which are a bit different in this cloud native community we're more of a real-time system and we had to do a lot",
    "start": "17970",
    "end": "25289"
  },
  {
    "text": "of the hacking to make sure that we serve live on one end with the cloud native architecture on the other and we",
    "start": "25289",
    "end": "31769"
  },
  {
    "text": "maintain real-time performance and we have to hack through the different layers of networking storage and IPC",
    "start": "31769",
    "end": "37940"
  },
  {
    "text": "farthest prior to my role in in Mellon's in Iguazu I was VP data center in a",
    "start": "37940",
    "end": "45660"
  },
  {
    "text": "company called Mellanox Mellanox is one of the leading vendors in the networking",
    "start": "45660",
    "end": "51090"
  },
  {
    "text": "space many of the cloud service providers database under storage vendors",
    "start": "51090",
    "end": "56219"
  },
  {
    "text": "use Mellanox for networking equipment like NICs and switches and sir my role",
    "start": "56219",
    "end": "61800"
  },
  {
    "text": "was working with all the open source communities OpenStack and cloud vendors",
    "start": "61800",
    "end": "67650"
  },
  {
    "text": "and all that so this is a lot of my background comes from there and this is you'll see a lot of it comes in the",
    "start": "67650",
    "end": "73560"
  },
  {
    "text": "slide so I won't just reflect on what we're doing in the company but also serve it around my background with prior",
    "start": "73560",
    "end": "80159"
  },
  {
    "text": "art pictures so first how does our architecture look like what are we doing",
    "start": "80159",
    "end": "86610"
  },
  {
    "start": "82000",
    "end": "212000"
  },
  {
    "text": "we're building a data platform I'll I'll spend just few words on it later which",
    "start": "86610",
    "end": "91979"
  },
  {
    "text": "is an extremely high performance data platform this is something that delivers millions of transactions per second",
    "start": "91979",
    "end": "97500"
  },
  {
    "text": "hundred gigs of throughput and you know two-three years ago our chief architect",
    "start": "97500",
    "end": "103409"
  },
  {
    "text": "when we started said you know what there is this crazy idea of cloud native let's put everything in docker containers so",
    "start": "103409",
    "end": "109229"
  },
  {
    "text": "now it can be a last weekend and all those cool ideas and let's break everything to just small tiny micro",
    "start": "109229",
    "end": "115470"
  },
  {
    "text": "services that it's probably too many micro services a lot of energy and RPC said no no it will be fine so we really",
    "start": "115470",
    "end": "122549"
  },
  {
    "text": "design everything from day one as micro services so if you look at our architecture there are things around the",
    "start": "122549",
    "end": "129090"
  },
  {
    "text": "platform services which probably many of you guys have with standard tools like elasticsearch for",
    "start": "129090",
    "end": "135060"
  },
  {
    "text": "logs briefing DB for serve our configuration PCB RabbitMQ we use a",
    "start": "135060",
    "end": "142950"
  },
  {
    "text": "graphite but we're going to move to Prometheus later on those are inserted traditional things everyone has the API",
    "start": "142950",
    "end": "150359"
  },
  {
    "text": "servers which basically serve the traditional configuration and and also",
    "start": "150359",
    "end": "156510"
  },
  {
    "text": "what's more unique about our architecture we have serve the high performance data path where we have like",
    "start": "156510",
    "end": "162719"
  },
  {
    "text": "nginx that deals with the data transactions which support many traditional data transactions like to",
    "start": "162719",
    "end": "169139"
  },
  {
    "text": "support communities that would be many of the traditional Amazon API is just much much faster and we have the data",
    "start": "169139",
    "end": "176609"
  },
  {
    "text": "nodes which are there the things that actually process data and what's very important for us is the performance of",
    "start": "176609",
    "end": "182459"
  },
  {
    "text": "this data path across application API and actual processing of the data and",
    "start": "182459",
    "end": "188250"
  },
  {
    "text": "also we have this notion of the event-driven processing for a doc processing we now call it service",
    "start": "188250",
    "end": "194730"
  },
  {
    "text": "because everyone now calls it service and this is exactly the same thing and I'll describe how we design the system",
    "start": "194730",
    "end": "201060"
  },
  {
    "text": "and why you have to take into account infrastructure and actual hardware if you're not developing on an Amazon Cloud",
    "start": "201060",
    "end": "206970"
  },
  {
    "text": "and how you you basically leverage the hardware in those scenarios just one",
    "start": "206970",
    "end": "213120"
  },
  {
    "start": "212000",
    "end": "322000"
  },
  {
    "text": "thing which is pretty different in our architecture and I'll focus on the data path so just so you'll have some context",
    "start": "213120",
    "end": "219030"
  },
  {
    "text": "a traditional when you design a database you build it foom through layers you take block storage and then you put like",
    "start": "219030",
    "end": "226049"
  },
  {
    "text": "a file system on top of it which adds a lot of chatter every time you open close the file you have different journaling",
    "start": "226049",
    "end": "232769"
  },
  {
    "text": "to do and lookups and then you place the database which does a lot of overhead as well has redo logs and undo logs and",
    "start": "232769",
    "end": "239370"
  },
  {
    "text": "index tables and should lock management you could take the fastest storage on earth that is like millions of iOS you",
    "start": "239370",
    "end": "246120"
  },
  {
    "text": "still have two minutes about 20,000 TPS or 50,000 TPS on your database or",
    "start": "246120",
    "end": "251970"
  },
  {
    "text": "Cassandra and that's because of all the sterilization so basically what we wanted to do something which is more",
    "start": "251970",
    "end": "257639"
  },
  {
    "text": "similar to like an in-memory database like credits just implemented on top of flash and we",
    "start": "257639",
    "end": "264150"
  },
  {
    "text": "had to use a lot of real time to knowledge is to make flash look like memory and I'll describe some things",
    "start": "264150",
    "end": "269660"
  },
  {
    "text": "that we did over there we didn't want to reinvent our API so what we did is for the messaging bus where we can put a",
    "start": "269660",
    "end": "276620"
  },
  {
    "text": "proxy layer that emulates any API we want so this is how we can basically support traditional api's or a cloud",
    "start": "276620",
    "end": "283370"
  },
  {
    "text": "provider eight guys on top of our platform without sacrificing performance and all those api's are entirely",
    "start": "283370",
    "end": "289790"
  },
  {
    "text": "stateless so basically can write through one API in which through a different API without violating any state so that's",
    "start": "289790",
    "end": "297230"
  },
  {
    "text": "the general idea of the platform there is also a lot of security but I won't dive into that too much just when I say",
    "start": "297230",
    "end": "304310"
  },
  {
    "text": "real-time this platform to million transactions per second on a given an",
    "start": "304310",
    "end": "309770"
  },
  {
    "text": "individual server which is about hundred times faster than most data platforms and it serves them in about hundred",
    "start": "309770",
    "end": "315530"
  },
  {
    "text": "microsecond across 99% of which is again real-time quite different by definition",
    "start": "315530",
    "end": "322480"
  },
  {
    "start": "322000",
    "end": "755000"
  },
  {
    "text": "and when when we look into this data path so starting from a high level how did we design the data path so we have",
    "start": "322480",
    "end": "330050"
  },
  {
    "text": "web servers which serve the transaction and then the data path is basically",
    "start": "330050",
    "end": "335570"
  },
  {
    "text": "managed by two layers which have different optimizations so the first",
    "start": "335570",
    "end": "340580"
  },
  {
    "text": "layer is the one that needs to respond to database transaction has to do it really really fast and the second layer",
    "start": "340580",
    "end": "347930"
  },
  {
    "text": "when you're talking to storage you typically want a working batch anyone just works with storage know that for example you're trying to do maximum",
    "start": "347930",
    "end": "354800"
  },
  {
    "text": "i/o depth at the storage layer you want to do striping so you have to aggregate",
    "start": "354800",
    "end": "360050"
  },
  {
    "text": "more and more data and only then write it so basically we have two conflicting requirements on the data layer one which",
    "start": "360050",
    "end": "367430"
  },
  {
    "text": "has to serve stuff really really fast and one which let's get to do things really really slow this is why we broke",
    "start": "367430",
    "end": "373040"
  },
  {
    "text": "it two to two layers and between the Rijn orders not to have too much over it we basically have a shared memory so",
    "start": "373040",
    "end": "380660"
  },
  {
    "text": "basically we write and we have non-volatile memory so every transaction and journal is committed into",
    "start": "380660",
    "end": "386150"
  },
  {
    "text": "non-volatile memory and then we pass it through zero copy through pointers to",
    "start": "386150",
    "end": "391490"
  },
  {
    "text": "back-end key value engine which we develop and is extremely fast it's also going to be open sourced",
    "start": "391490",
    "end": "397889"
  },
  {
    "text": "and and this allows us to preserve basically two million transactions per second this architecture because we",
    "start": "397889",
    "end": "404249"
  },
  {
    "text": "basically work at the speed of flash we don't go through file systems or any of that stuff we even have a very cool",
    "start": "404249",
    "end": "411060"
  },
  {
    "text": "concept where the the process of the docker containers that work on top of",
    "start": "411060",
    "end": "416610"
  },
  {
    "text": "the journals if they fail they can actually be restarted and go back to exactly the same state because the",
    "start": "416610",
    "end": "423120"
  },
  {
    "text": "shared memory is presented this shirts files but people more one more big",
    "start": "423120",
    "end": "429439"
  },
  {
    "text": "information about what we do there I can share later on here basically we have the nginx hand genex has a model which",
    "start": "429439",
    "end": "437490"
  },
  {
    "text": "does all the sort of transaction processing the served API processing and we emulate as I mentioned things like s3",
    "start": "437490",
    "end": "444300"
  },
  {
    "text": "and Canisius and dynamo and they're basically models within nginx now in",
    "start": "444300",
    "end": "449339"
  },
  {
    "text": "order to do it really fast there are a bunch of requirements to do those things",
    "start": "449339",
    "end": "454860"
  },
  {
    "text": "so if you you know how cloud providers work you usually don't just use your flavor of Nick and you just work with it",
    "start": "454860",
    "end": "461460"
  },
  {
    "text": "Amazon this keyboard a company called Anna corner she's really won the DES key has those network controllers so a lot",
    "start": "461460",
    "end": "468659"
  },
  {
    "text": "of the networking happens there during the age of papers the use the GPS or",
    "start": "468659",
    "end": "474000"
  },
  {
    "text": "FPGAs and not sure what Google DES is is there but also there's a lot of",
    "start": "474000",
    "end": "479039"
  },
  {
    "text": "intelligence so people are using hardware accelerators to do a bunch of things so think let's look at each one",
    "start": "479039",
    "end": "484649"
  },
  {
    "text": "of those layers how people leverage hardware accelerators so first you're doing all overlay offload so things like",
    "start": "484649",
    "end": "491699"
  },
  {
    "text": "VX LAN or other more sophisticated overlays basically being pushed to the adapter and that's all things I've done",
    "start": "491699",
    "end": "498029"
  },
  {
    "text": "in my previous job also more and more encryption is going into the network adapters like SSL and IPSec is going",
    "start": "498029",
    "end": "505409"
  },
  {
    "text": "either so you actually want to create sort of virtual interfaces for every tenant because this first year is a",
    "start": "505409",
    "end": "513419"
  },
  {
    "text": "serving different tenant so for every tenant you basically want to have a micro service that has one leg on serve",
    "start": "513419",
    "end": "519089"
  },
  {
    "text": "the overlay network and the second leg on sort of the internal fabric ok so the",
    "start": "519089",
    "end": "524370"
  },
  {
    "text": "first thing first requirement is that if you go to the neck and say please give me multiple virtual interfaces and it's",
    "start": "524370",
    "end": "531420"
  },
  {
    "text": "one of those words face may have other acceleration features another thing that you want to",
    "start": "531420",
    "end": "537240"
  },
  {
    "text": "do you want you don't have too much overhead on the transport between this front end thing and the back end data so",
    "start": "537240",
    "end": "544949"
  },
  {
    "text": "you want to use very high speed RPC one of the things that we developed also in",
    "start": "544949",
    "end": "551100"
  },
  {
    "text": "my my previous job and it's open source and we keep on maintaining it is an extremely high performance RPC layer",
    "start": "551100",
    "end": "557220"
  },
  {
    "text": "that knows how to leverage NIC semantics like our DNA or DPD case any of you is",
    "start": "557220",
    "end": "562589"
  },
  {
    "text": "familiar with that and this transport for example to do about 15 million message per second so those different",
    "start": "562589",
    "end": "569759"
  },
  {
    "text": "magnitudes and what you guys are familiar with at all it's about three microsecond latency for message between",
    "start": "569759",
    "end": "577079"
  },
  {
    "text": "here and here so it's let's get faster than actual messaging within the same system okay and that's running over a",
    "start": "577079",
    "end": "583980"
  },
  {
    "text": "dual fabric of 100 the game now one of the things that we had to do is serialize data so basically we don't",
    "start": "583980",
    "end": "590370"
  },
  {
    "text": "just pass a buffer has to pass a message so everyone is using protobuf which is",
    "start": "590370",
    "end": "595589"
  },
  {
    "text": "pretty nice but the guided developed Prada bus after leaving the Google said",
    "start": "595589",
    "end": "600810"
  },
  {
    "text": "you know there may be a better idea and that's the protocol called captain Porter which was developed by",
    "start": "600810",
    "end": "606329"
  },
  {
    "text": "the same guy and one of the unique features of that serialization mechanism is that there is vodi serialization and",
    "start": "606329",
    "end": "613949"
  },
  {
    "text": "that's pretty cool in some applications I'll show you for example it's assumed that we ship a message all the way to",
    "start": "613949",
    "end": "619500"
  },
  {
    "text": "our platform and this guy has to replicate to another guy but you need to check what's happening in the packet or",
    "start": "619500",
    "end": "625680"
  },
  {
    "text": "like what type of data might am I writing so you can actually do that without the serialization you can do all",
    "start": "625680",
    "end": "632730"
  },
  {
    "text": "other pretty nice things without doing the serialization and captain protein is actually high-performance serialization",
    "start": "632730",
    "end": "639779"
  },
  {
    "text": "deserialization protocol now on on this side when we process the data as any of",
    "start": "639779",
    "end": "646889"
  },
  {
    "text": "you did high-performance before then one of the things that you have to deal with",
    "start": "646889",
    "end": "652199"
  },
  {
    "text": "is doing core affinity you don't want to have your course running around different CPUs or basically doing",
    "start": "652199",
    "end": "658920"
  },
  {
    "text": "threads the heavy multiple threads that sort of run around different CPUs what you want to do is",
    "start": "658920",
    "end": "665360"
  },
  {
    "text": "basically have a single thread running on a single process and pin to the single s if you this way you guarantee",
    "start": "665360",
    "end": "671720"
  },
  {
    "text": "that the process keeps on working sort of real-time performance maximize the",
    "start": "671720",
    "end": "676730"
  },
  {
    "text": "CPU utilization etc so even people that will see look at how do i optimize my",
    "start": "676730",
    "end": "683090"
  },
  {
    "text": "GeneXpert formance you'll see that people tell you to do like task set and things like that to make sure CPU cores",
    "start": "683090",
    "end": "689330"
  },
  {
    "text": "in asynchronous architectures are served pinned down to the same infrastructure",
    "start": "689330",
    "end": "694460"
  },
  {
    "text": "so in our architecture we basically break every node to virtual nodes of",
    "start": "694460",
    "end": "700190"
  },
  {
    "text": "those vient and every virtual node is on a single core so this means that basically there is no locking there's no",
    "start": "700190",
    "end": "706880"
  },
  {
    "text": "context switches and no semaphores within given the end that really provides this capability now there is",
    "start": "706880",
    "end": "714950"
  },
  {
    "text": "some challenges here for example kubernetes natively does not support CPU",
    "start": "714950",
    "end": "720340"
  },
  {
    "text": "locking maybe recent versions we don't worry you can do that we dr. you can do",
    "start": "720340",
    "end": "725840"
  },
  {
    "text": "CPU set and you could basically set a container to given CPU okay so that's",
    "start": "725840",
    "end": "731990"
  },
  {
    "text": "another channel then there are also other challenge doing shared memory between containers is not that trivial",
    "start": "731990",
    "end": "737360"
  },
  {
    "text": "you know and talk about it and you also want to have direct access to those less",
    "start": "737360",
    "end": "742850"
  },
  {
    "text": "so just I showed you that in order to maintain best performance I basically have to deviate from the standard",
    "start": "742850",
    "end": "749360"
  },
  {
    "text": "guidelines of how to do micro services and incur Benares so what are the",
    "start": "749360",
    "end": "756380"
  },
  {
    "start": "755000",
    "end": "870000"
  },
  {
    "text": "challenges that we sort of faced for example we just showed you that I may",
    "start": "756380",
    "end": "762230"
  },
  {
    "text": "have scenarios where I I need multiple interfaces to individual thoughts because I have a front-end overlay",
    "start": "762230",
    "end": "768200"
  },
  {
    "text": "network and I have high speed back-end Network and maybe some control networks so and kubernetes only supports single",
    "start": "768200",
    "end": "774920"
  },
  {
    "text": "interface per port okay I need to access Hardware primitives like SLV and next",
    "start": "774920",
    "end": "780980"
  },
  {
    "text": "and nvme devices and ensures memory and that's not that trivial and we see some",
    "start": "780980",
    "end": "786740"
  },
  {
    "text": "of the things we we did there also one of the challenges we make something work in darker and then we go to kubernetes",
    "start": "786740",
    "end": "793430"
  },
  {
    "text": "it's done completely different security priorities things that work in one",
    "start": "793430",
    "end": "799490"
  },
  {
    "text": "platform don't work the same in a different platform so we had to do different things to overcome those and",
    "start": "799490",
    "end": "806149"
  },
  {
    "text": "and mainly pull a lot of hair if you were joking that the guy that does most",
    "start": "806149",
    "end": "811220"
  },
  {
    "text": "of that work really looks like that but so some things that we did in order to",
    "start": "811220",
    "end": "817040"
  },
  {
    "text": "address and overcome those challenges first we developed our own tool networking and volume drivers so we can",
    "start": "817040",
    "end": "823220"
  },
  {
    "text": "basically all the shared memory tricks we can service work eventually it's like /dev left something so we can serve",
    "start": "823220",
    "end": "829970"
  },
  {
    "text": "those cruel volume driver while maintaining some security and also the networking side we can also automate and",
    "start": "829970",
    "end": "837950"
  },
  {
    "text": "present multiple interface to a given container as well as hardware oriented",
    "start": "837950",
    "end": "844360"
  },
  {
    "text": "interfaces you also have to play a lot with privileges because for example someone is using shared memory or other",
    "start": "844360",
    "end": "851270"
  },
  {
    "text": "things requires different privileges than the traditional ones and a lot of",
    "start": "851270",
    "end": "856310"
  },
  {
    "text": "trial and error and some of the other challenges you change the kubernetes version and suddenly something that",
    "start": "856310",
    "end": "861529"
  },
  {
    "text": "worked in previous versions doesn't work in the new version so I hope it's going to be stabilized in the in the next",
    "start": "861529",
    "end": "868459"
  },
  {
    "text": "version so just uh maybe a little 101 of",
    "start": "868459",
    "end": "873770"
  },
  {
    "start": "870000",
    "end": "1054000"
  },
  {
    "text": "how networking works in containers and I had a nice blog post on more details on",
    "start": "873770",
    "end": "880550"
  },
  {
    "text": "how to sort of bypass those and how to diagnose those so you can go to go to",
    "start": "880550",
    "end": "886490"
  },
  {
    "text": "that link and you can see that basically there are three approaches to do networking in containers basically every",
    "start": "886490",
    "end": "893120"
  },
  {
    "text": "container has its own network namespace so and Linux has an eight and in states where container can live on in one",
    "start": "893120",
    "end": "899750"
  },
  {
    "text": "namespace so there are two options one is you have your host interfaces and then you put all the containers in the",
    "start": "899750",
    "end": "905870"
  },
  {
    "text": "host interface namespace so the containers will see everything the host sees another approach is let's create",
    "start": "905870",
    "end": "912920"
  },
  {
    "text": "let's generate interfaces and then just give them a way to containers and how do",
    "start": "912920",
    "end": "919010"
  },
  {
    "text": "we generate interfaces there are free ways to generate those virtual interfaces one is using a switch and",
    "start": "919010",
    "end": "925070"
  },
  {
    "text": "there are two switches in Linux one is called OBS open we switch which is a lot more",
    "start": "925070",
    "end": "930250"
  },
  {
    "text": "comprehensive have things like routing and ackles and terror and there is also the Linux spiritual which is a bit more",
    "start": "930250",
    "end": "936560"
  },
  {
    "text": "primitive most of our late solutions usually use the bridge and then you need",
    "start": "936560",
    "end": "942079"
  },
  {
    "text": "some sort of a twisted pair because it's switch so it switches pair Vth there is",
    "start": "942079",
    "end": "948199"
  },
  {
    "text": "a biscuit twisted pair it's like a wire that has two interfaces one plugs within the container that one plugs within the",
    "start": "948199",
    "end": "954759"
  },
  {
    "text": "hypervisor and then the switch basically switches between all those different interfaces okay so that's one way of",
    "start": "954759",
    "end": "961850"
  },
  {
    "text": "generating those virtual interfaces and another way is using a multiplexing approach where you create a driver that",
    "start": "961850",
    "end": "969050"
  },
  {
    "text": "just shows itself with multiple interfaces and you give those interfaces all the way to the container and that",
    "start": "969050",
    "end": "975920"
  },
  {
    "text": "usually things like Mac villain which does a multiplexing based on MAC addresses or IP villain which does the",
    "start": "975920",
    "end": "982370"
  },
  {
    "text": "same using a IP addresses and this is typically slightly faster than this",
    "start": "982370",
    "end": "988220"
  },
  {
    "text": "because there this one is basically an extra hop but there is another third",
    "start": "988220",
    "end": "994130"
  },
  {
    "text": "option which was used a lot in virtualization for high performance I mean and a thief some of you are from",
    "start": "994130",
    "end": "1001300"
  },
  {
    "text": "the telco environment it's called SRA these let's get to tell the NIC go create multiple virtual necks",
    "start": "1001300",
    "end": "1006579"
  },
  {
    "text": "and in hardware and then expose those all the way up to the container some",
    "start": "1006579",
    "end": "1013240"
  },
  {
    "text": "other nice things is those virtual mixing Hardware can also do things like us and security and other features for",
    "start": "1013240",
    "end": "1019779"
  },
  {
    "text": "those virtual mix ok so basically we use is that when we need high-performance",
    "start": "1019779",
    "end": "1025720"
  },
  {
    "text": "and where when we don't need I pecans either day one of those two okay and",
    "start": "1025720",
    "end": "1031058"
  },
  {
    "text": "there are more details one of the things that allows us to expose multiple interface interfaces to the same port is",
    "start": "1031059",
    "end": "1038020"
  },
  {
    "text": "this project for mental called maltose that allows the state to create multiple",
    "start": "1038020",
    "end": "1043270"
  },
  {
    "text": "to basically by fascism dissertation of kubernetes and present two interfaces so",
    "start": "1043270",
    "end": "1050620"
  },
  {
    "text": "this is a big background on them on the networking side and then we plug into",
    "start": "1050620",
    "end": "1056460"
  },
  {
    "start": "1054000",
    "end": "1434000"
  },
  {
    "text": "applications think about things like spark or for any other application tensorflow",
    "start": "1056460",
    "end": "1062490"
  },
  {
    "text": "to the analytics and we still want to maintain very high performance between",
    "start": "1062490",
    "end": "1067620"
  },
  {
    "text": "those applications and the data and everyone here is talking about block",
    "start": "1067620",
    "end": "1072660"
  },
  {
    "text": "storage and you know we've seen that in the presentation today but usually if",
    "start": "1072660",
    "end": "1077730"
  },
  {
    "text": "you really want to write cloud native applications you don't want the applications to have stake you want to",
    "start": "1077730",
    "end": "1083070"
  },
  {
    "text": "have things that sort of commit on the fly so if your micro service fails you can restart it just like object storage",
    "start": "1083070",
    "end": "1090000"
  },
  {
    "text": "or no sequel or things like that and and today there's only support for file",
    "start": "1090000",
    "end": "1096210"
  },
  {
    "text": "system access in through shared volumes in kubernetes but we we actually wanted",
    "start": "1096210",
    "end": "1102030"
  },
  {
    "text": "more expression like no sequel or object or streaming semantics to go still",
    "start": "1102030",
    "end": "1108660"
  },
  {
    "text": "higher performance and not just by passing packets there's on the challenge if I have 20 workloads on the same",
    "start": "1108660",
    "end": "1115170"
  },
  {
    "text": "machine I don't want to have 20 TCP connections to the same database just on the other side because that's going to",
    "start": "1115170",
    "end": "1121410"
  },
  {
    "text": "be a lot of connections and that's gonna require a lot of memory and going to just abuse my resources it's also going",
    "start": "1121410",
    "end": "1128670"
  },
  {
    "text": "to require a lot of startup time every time a process goes up until it goes and launch and does all the logins and all",
    "start": "1128670",
    "end": "1135300"
  },
  {
    "text": "the transaction against the data services that takes a lot of time so basically what we did we took two",
    "start": "1135300",
    "end": "1142050"
  },
  {
    "text": "services one that exposes our system is the volume and the other one that exposes our system is all the rest of",
    "start": "1142050",
    "end": "1148440"
  },
  {
    "text": "the things and usually the way to expose volumes is something called fuse live in",
    "start": "1148440",
    "end": "1153900"
  },
  {
    "text": "in Linux if you're familiar with that and one of the key challenges with it is that it's extremely slow it's",
    "start": "1153900",
    "end": "1159630"
  },
  {
    "text": "synchronous with blocking we did some batches do it to make it work asynchronous so it's about 10-15 times",
    "start": "1159630",
    "end": "1167220"
  },
  {
    "text": "faster than the traditional fuse driver this key can do a lot of i/o in parallel",
    "start": "1167220",
    "end": "1172260"
  },
  {
    "text": "and we also contribute that back but the",
    "start": "1172260",
    "end": "1177390"
  },
  {
    "text": "really cool thing is is not the fuse extensions is what we call the trial demon which is this thing that does all",
    "start": "1177390",
    "end": "1184980"
  },
  {
    "text": "those notes equal and object and trimming semantics the way it works is",
    "start": "1184980",
    "end": "1190410"
  },
  {
    "text": "basically the SDK that we have that expose although the api's talks to the demon",
    "start": "1190410",
    "end": "1196530"
  },
  {
    "text": "through shared memories so basically there is no coffee the minute you you put a message on the wire with this",
    "start": "1196530",
    "end": "1202530"
  },
  {
    "text": "captain power history ization protocol it goes here this guy doesn't have to deserialize we mentioned captain",
    "start": "1202530",
    "end": "1209370"
  },
  {
    "text": "parolees doesn't require the serialization just looks at what needs to be routed and pushes it down to the",
    "start": "1209370",
    "end": "1215640"
  },
  {
    "text": "wire so then basically we could within few microseconds send a message all the way from the application all the way to",
    "start": "1215640",
    "end": "1223380"
  },
  {
    "text": "the backend data and back so that can run about hundred times faster than what you're used to use to see those message",
    "start": "1223380",
    "end": "1230760"
  },
  {
    "text": "queue protocols that we built using captain proto in church memory can do about million messages per thread okay",
    "start": "1230760",
    "end": "1238080"
  },
  {
    "text": "so this is pretty high performance so and and those networking protocols can",
    "start": "1238080",
    "end": "1243330"
  },
  {
    "text": "do about two million RPC calls per second on one node so basically this",
    "start": "1243330",
    "end": "1250020"
  },
  {
    "text": "notion is very similar if you are written in go it's just like having go channels we just post a message a",
    "start": "1250020",
    "end": "1256559"
  },
  {
    "text": "request an asynchronous request give me something from the database and then you get a return channel that gives",
    "start": "1256559",
    "end": "1262860"
  },
  {
    "text": "you the response and you can put as many requests as you want in parallel so this is a pretty cool thing it's locked free",
    "start": "1262860",
    "end": "1269190"
  },
  {
    "text": "you don't have to block you could just push as many requests as you want and in part yet the responses in different",
    "start": "1269190",
    "end": "1275309"
  },
  {
    "text": "orders and also we have a port for data frames in SPARC so you can actually",
    "start": "1275309",
    "end": "1280440"
  },
  {
    "text": "write SPARC data frames that will be persisted in our system and you can query them and back ok what is also",
    "start": "1280440",
    "end": "1288030"
  },
  {
    "text": "allowed is fast initialization of the containers because you don't have to open any connections the only connection",
    "start": "1288030",
    "end": "1293400"
  },
  {
    "text": "that you do is just open a shared memory file locally and then your RPC or IPC to",
    "start": "1293400",
    "end": "1299610"
  },
  {
    "text": "that you don't have to allocate memory everything is zero copy and to end we share the same TCP or are they make",
    "start": "1299610",
    "end": "1306630"
  },
  {
    "text": "connections here for all the different docker containers ok and we don't have",
    "start": "1306630",
    "end": "1312720"
  },
  {
    "text": "to do any kernel modification or patches because all the code is user space ok",
    "start": "1312720",
    "end": "1318080"
  },
  {
    "text": "any questions on that or so again just an example for taking the",
    "start": "1318080",
    "end": "1325200"
  },
  {
    "text": "the extreme I know most of you guys probably will not take those extreme",
    "start": "1325200",
    "end": "1330330"
  },
  {
    "text": "steps to performance but because we're a service service provider because this is the shared platform in a multi-tenant",
    "start": "1330330",
    "end": "1335970"
  },
  {
    "text": "platform we care about the aggregate performance and honestly just by our application if I can push two million",
    "start": "1335970",
    "end": "1342299"
  },
  {
    "text": "transaction on the same platform it can serve 100 customers instead of one for the same cost so this is for the reason",
    "start": "1342299",
    "end": "1349169"
  },
  {
    "text": "we're doing all that will be the other reason is we're seeing this booming IOT and real-time analytics is that you",
    "start": "1349169",
    "end": "1355919"
  },
  {
    "text": "require some of those performance for certain workloads a lot of it is generic",
    "start": "1355919",
    "end": "1366870"
  },
  {
    "text": "here some of the issues are different like exposing shared memory in docker and kubernetes is slightly different",
    "start": "1366870",
    "end": "1373529"
  },
  {
    "text": "the yama files are different parties are different things like whoa yes it's doable we actually we started with",
    "start": "1373529",
    "end": "1380850"
  },
  {
    "text": "docker we have important even everything to kubernetes we're still struggling with some of the with some of the",
    "start": "1380850",
    "end": "1386549"
  },
  {
    "text": "container so we some in some cases we still have docker containers side-by-side with kubernetes containers",
    "start": "1386549",
    "end": "1391950"
  },
  {
    "text": "until we finalize the debugging process",
    "start": "1391950",
    "end": "1397039"
  },
  {
    "text": "we don't need too much because those are typically heavyweight processes okay so",
    "start": "1398659",
    "end": "1404870"
  },
  {
    "text": "like on the data nodes we have a process for a perk or usually so it's about 20",
    "start": "1404870",
    "end": "1412230"
  },
  {
    "text": "30 you might actually carry CPU back Brazilians yep yeah because we maximize",
    "start": "1412230",
    "end": "1422440"
  },
  {
    "text": "that we usually use service with lots of PCI a lot of nvme so the that's the",
    "start": "1422440",
    "end": "1427570"
  },
  {
    "text": "bottleneck moves to the CPU okay so that's that's on that time and now what",
    "start": "1427570",
    "end": "1434110"
  },
  {
    "start": "1434000",
    "end": "1638000"
  },
  {
    "text": "what we really want to give developers is the experience of service and",
    "start": "1434110",
    "end": "1439120"
  },
  {
    "text": "event-driven functions and we actually started doing it before we we called it service and and if you're looking at",
    "start": "1439120",
    "end": "1446950"
  },
  {
    "text": "service today it has a bunch of challenges if you look at the Amazon lambda a design because a lot of things",
    "start": "1446950",
    "end": "1453520"
  },
  {
    "text": "that amazon done does is sort of the first version is all about usability not certainly about the efficiency and",
    "start": "1453520",
    "end": "1460090"
  },
  {
    "text": "that's what we've seen we've seen over there there is also some public mentions of some of those things first the",
    "start": "1460090",
    "end": "1466650"
  },
  {
    "text": "initialization time of along the function based on that article is about half a second average worst case could",
    "start": "1466650",
    "end": "1473530"
  },
  {
    "text": "be few seconds okay this is pretty pretty high and also it's pretty much of",
    "start": "1473530",
    "end": "1478720"
  },
  {
    "text": "a resource rain' one of the challenges with with those along the functions is when you for example they charge you for",
    "start": "1478720",
    "end": "1485200"
  },
  {
    "text": "memory times the amount of time you run the function every typical function that",
    "start": "1485200",
    "end": "1490330"
  },
  {
    "text": "you you launch the first thing it will do it will go and set some data some context you got a web request with the",
    "start": "1490330",
    "end": "1496900"
  },
  {
    "text": "user a cookie you go and you bring the user context into the system and I'm going to take you ten milliseconds so",
    "start": "1496900",
    "end": "1502840"
  },
  {
    "text": "you're actually paying ten milliseconds for every invocation of your function and if you need to do five different",
    "start": "1502840",
    "end": "1508180"
  },
  {
    "text": "calls in a synchronous fashion you're basically paying 50 milliseconds so if your overall task is the five seconds no",
    "start": "1508180",
    "end": "1516580"
  },
  {
    "text": "problem but if your overall task is like 50 millisecond or less if it's just a",
    "start": "1516580",
    "end": "1522400"
  },
  {
    "text": "simple serving of the webpage which takes few milliseconds at the most then 80% of your time is spent on on",
    "start": "1522400",
    "end": "1529480"
  },
  {
    "text": "Iowa and any anyone here that codes in modern like languages whether it's a",
    "start": "1529480",
    "end": "1534790"
  },
  {
    "text": "Java with daca or go with go routines always thinks about concurrency and here we have a system",
    "start": "1534790",
    "end": "1541420"
  },
  {
    "text": "that by design is not concur it just gets one thing at a time so this article",
    "start": "1541420",
    "end": "1546460"
  },
  {
    "text": "actually talks about why why lambda functions are not good query a workload and it's around those and",
    "start": "1546460",
    "end": "1553320"
  },
  {
    "text": "those things the other darrel challenge with the lambda is rescue you have to create your data bindings because it's a stateless",
    "start": "1553320",
    "end": "1560260"
  },
  {
    "text": "function so where do you preserve the state where do you create this connection to your my sequel so you put",
    "start": "1560260",
    "end": "1566170"
  },
  {
    "text": "it somewhere in the header and you don't really know when is it going to happen when it doesn't where do you put the security credentials part of the",
    "start": "1566170",
    "end": "1572860"
  },
  {
    "text": "function you don't want it to be sort of hidden and so there needs to be other",
    "start": "1572860",
    "end": "1578500"
  },
  {
    "text": "things like data bindings built into the cloud into the service architecture and",
    "start": "1578500",
    "end": "1584170"
  },
  {
    "text": "that's something that they sure did which is slightly better than Amazon we",
    "start": "1584170",
    "end": "1589240"
  },
  {
    "text": "also want to have everything that relates to connections let's assume I run five different instances on the same",
    "start": "1589240",
    "end": "1594990"
  },
  {
    "text": "node I don't necessarily want to create a database TCP connection every time I",
    "start": "1594990",
    "end": "1600250"
  },
  {
    "text": "invoke my function I want this connection to serve be live and just pass transaction every time this is",
    "start": "1600250",
    "end": "1607060"
  },
  {
    "text": "being invoked and there also other challenges like they don't have any unified scheme I have two for every type",
    "start": "1607060",
    "end": "1614080"
  },
  {
    "text": "of event I have a totally different schema even for thing that like event type could have been called a ten type",
    "start": "1614080",
    "end": "1620260"
  },
  {
    "text": "in all the different types of events but it's not it's not there so there's also",
    "start": "1620260",
    "end": "1626770"
  },
  {
    "text": "some blog post I wrote about it so so we we went and design something which is",
    "start": "1626770",
    "end": "1633390"
  },
  {
    "text": "going to make better implementation we're also going to contribute that after we're getting into J and I",
    "start": "1633390",
    "end": "1641650"
  },
  {
    "start": "1638000",
    "end": "1805000"
  },
  {
    "text": "basically have a basically there are two different data sources into lambda function into service one is a API you",
    "start": "1641650",
    "end": "1649750"
  },
  {
    "text": "know HTTP web calls and the desk you invoke a restful api you want it to be passed into the function and instance",
    "start": "1649750",
    "end": "1656800"
  },
  {
    "text": "usually synchronous so I know IBM o open wisk is sort of doing it asynchronously but",
    "start": "1656800",
    "end": "1662320"
  },
  {
    "text": "you typically want to do it synchronous you don't want to pass it through a cask Hana and a gateway etc",
    "start": "1662320",
    "end": "1669040"
  },
  {
    "text": "like open waste or some other technology you just want to pass it all the way to the function and throw the response",
    "start": "1669040",
    "end": "1675400"
  },
  {
    "text": "really quickly another source of the event is everything that relates to the data like some one of the",
    "start": "1675400",
    "end": "1681580"
  },
  {
    "text": "an object bucket with a picture you want to get notified you want to create a thumbnail some of the most common use",
    "start": "1681580",
    "end": "1687309"
  },
  {
    "text": "cases or maybe a streaming like a Kinesis in in Amazon you want to throw extremely into the system and something",
    "start": "1687309",
    "end": "1694389"
  },
  {
    "text": "listens on that stream or that message queue it just stretches messages and process them okay so this is more a",
    "start": "1694389",
    "end": "1700720"
  },
  {
    "text": "synchronous path and you have the synchronous path and I have some controller that needs to feel with the",
    "start": "1700720",
    "end": "1706629"
  },
  {
    "text": "elasticity of that so what the district",
    "start": "1706629",
    "end": "1713289"
  },
  {
    "text": "wired the sensor secretary quar is also a set of metadata structures that are used so in order to really made answer",
    "start": "1713289",
    "end": "1719799"
  },
  {
    "text": "the cloud native approach all the logs are not stored in the function the listing stored in a shared message queue",
    "start": "1719799",
    "end": "1726519"
  },
  {
    "text": "and all the state of tracking the state of those functions have to be stored in",
    "start": "1726519",
    "end": "1731830"
  },
  {
    "text": "short tables there are other and I think that we can do and I say call so Redis",
    "start": "1731830",
    "end": "1736960"
  },
  {
    "text": "and other databases can do is do atomic transactions on the data so in order to",
    "start": "1736960",
    "end": "1742299"
  },
  {
    "text": "do rate limiting calculation we can just have one reducing the number of credits",
    "start": "1742299",
    "end": "1748090"
  },
  {
    "text": "and one adding credits and doing testing set so this way you can lock when when",
    "start": "1748090",
    "end": "1753789"
  },
  {
    "text": "there's no credits you don't have to give a separate process of practice you could just use the database as your",
    "start": "1753789",
    "end": "1759639"
  },
  {
    "text": "synchronization point so this is basically how we designed this and and",
    "start": "1759639",
    "end": "1766419"
  },
  {
    "text": "also about the efficiency is first you want to have minimal amount of hops from the API gate go to the function and back",
    "start": "1766419",
    "end": "1772210"
  },
  {
    "text": "you want to have more parallelism so think about having micro batches and having multiple go routines for every",
    "start": "1772210",
    "end": "1779109"
  },
  {
    "text": "function in order to add more concurrency and also those updates to the data could be on micro batch levels",
    "start": "1779109",
    "end": "1787419"
  },
  {
    "text": "so very five invocation I can update the record on the database I don't have to do it for every invocation so this way I",
    "start": "1787419",
    "end": "1793779"
  },
  {
    "text": "reduce over it on my database again and some of you guys make it and we design",
    "start": "1793779",
    "end": "1799539"
  },
  {
    "text": "things that are very similar to this and not call it service and so how would you",
    "start": "1799539",
    "end": "1806769"
  },
  {
    "start": "1805000",
    "end": "1855000"
  },
  {
    "text": "go to that so this is a very simple example of an HTTP request let's keep rowing and event with the",
    "start": "1806769",
    "end": "1814419"
  },
  {
    "text": "context basically the log stream is built into the context you don't have to write code",
    "start": "1814419",
    "end": "1819590"
  },
  {
    "text": "that goes and initialize the Lockean and all that that's just an object that you push data into another nice thing about",
    "start": "1819590",
    "end": "1826970"
  },
  {
    "text": "this data binding as I mentioned you want to bind the data directly in the context you don't want to deal with the",
    "start": "1826970",
    "end": "1833390"
  },
  {
    "text": "initialization of the database or the object storage that you're dealing with every time you run the function",
    "start": "1833390",
    "end": "1839410"
  },
  {
    "text": "basically you can specify that in the context and just use that in this in",
    "start": "1839410",
    "end": "1844850"
  },
  {
    "text": "this case and now we also abstract those data class as a sort of generic class",
    "start": "1844850",
    "end": "1851420"
  },
  {
    "text": "that could work with different types of data sources okay the other thing that's",
    "start": "1851420",
    "end": "1857570"
  },
  {
    "start": "1855000",
    "end": "2012000"
  },
  {
    "text": "a little more sophisticated is on the data integration and we spoke about this asynchronous problem with the with",
    "start": "1857570",
    "end": "1863450"
  },
  {
    "text": "lambda and parallelism so one of the things that we did in our platform is this notion that everything could be a",
    "start": "1863450",
    "end": "1869750"
  },
  {
    "text": "stream it doesn't matter if it's files or tables actually file in our platform is the record in a database where one",
    "start": "1869750",
    "end": "1876470"
  },
  {
    "text": "column is the file so basically we treat any data as as the database and we also",
    "start": "1876470",
    "end": "1882440"
  },
  {
    "text": "create any data as a stream so basically we can run continuous query say this is what we're looking for all the results",
    "start": "1882440",
    "end": "1888890"
  },
  {
    "text": "whether those are adds or changes or whether those are just queries on a batch will stream into workers okay and",
    "start": "1888890",
    "end": "1896330"
  },
  {
    "text": "workers may you may have four workers so basically we have to shard the results that into four different workers there",
    "start": "1896330",
    "end": "1903680"
  },
  {
    "text": "are a bunch of databases that support that notion and every worker that works on the data may return some updates so",
    "start": "1903680",
    "end": "1910760"
  },
  {
    "text": "for example I have a table I have an object they want to tag that object or at the metadata I can return that",
    "start": "1910760",
    "end": "1917650"
  },
  {
    "text": "Becca's init is a transaction one of the key challenges in those areas is what's",
    "start": "1917650",
    "end": "1922790"
  },
  {
    "text": "called exactly one semantics what happens when a function fails how do I",
    "start": "1922790",
    "end": "1928220"
  },
  {
    "text": "know is the function actually executed or not so those are usually being done through our Tomic commit into the data",
    "start": "1928220",
    "end": "1936410"
  },
  {
    "text": "itself okay so that's internally one of the key challenges in in kubernetes that",
    "start": "1936410",
    "end": "1943370"
  },
  {
    "text": "we see is that let's assume that you have four workers that need to work on a stream you have a casket",
    "start": "1943370",
    "end": "1949250"
  },
  {
    "text": "for workers and you've charted your casket to four different charts how do",
    "start": "1949250",
    "end": "1955040"
  },
  {
    "text": "you create a deployment set in kubernetes where each one knows which art it's going to take and it's not just",
    "start": "1955040",
    "end": "1961580"
  },
  {
    "text": "bulk after lets you have a bunch of pictures that need to be processed and you have a elastic you know service with",
    "start": "1961580",
    "end": "1969050"
  },
  {
    "text": "a bunch of pods how does each pod know which which art or which objects to go",
    "start": "1969050",
    "end": "1974510"
  },
  {
    "text": "to one of the tax that we did here for this key use stateful set in kubernetes",
    "start": "1974510",
    "end": "1980050"
  },
  {
    "text": "because I don't know if you know how it works basically it gives each one of the pods a different name within index so",
    "start": "1980050",
    "end": "1986810"
  },
  {
    "text": "you can just extract the index from the from the name and then you know for each",
    "start": "1986810",
    "end": "1992540"
  },
  {
    "text": "one of the pod what what's the index we hope that in the standpoint kubernetes",
    "start": "1992540",
    "end": "1998120"
  },
  {
    "text": "will add index to pods or some other way to tag a pod and give it some some sort",
    "start": "1998120",
    "end": "2003670"
  },
  {
    "text": "of value different than the other pods and so that's another thing that we did",
    "start": "2003670",
    "end": "2009880"
  },
  {
    "text": "on that front so I'll give you another example of how to use this framework and",
    "start": "2009880",
    "end": "2016590"
  },
  {
    "start": "2012000",
    "end": "2164000"
  },
  {
    "text": "this is a simple way of taking a file that was generated scanning it for for",
    "start": "2016590",
    "end": "2024070"
  },
  {
    "text": "example social security numbers and credit card numbers to just identifies this file that has the server sensitive",
    "start": "2024070",
    "end": "2030970"
  },
  {
    "text": "data you could see that using those primitives I mentioned makes it extremely simple so basically we can",
    "start": "2030970",
    "end": "2037510"
  },
  {
    "text": "cast it to the relevant type that we we need we can push the data so instead of",
    "start": "2037510",
    "end": "2043090"
  },
  {
    "text": "having the function go and read the data and wasting a time this case the function can already get the data into",
    "start": "2043090",
    "end": "2049510"
  },
  {
    "text": "the object context and then we can take the same data and tag it with attributes",
    "start": "2049510",
    "end": "2055990"
  },
  {
    "text": "so basically we take the same data treat the same data on one of their server file and on the same time the metadata",
    "start": "2055990",
    "end": "2062290"
  },
  {
    "text": "on that object could be treated as a record in a database so this is what we do on that another very useful semantics",
    "start": "2062290",
    "end": "2070570"
  },
  {
    "text": "is to have counters which are distributed across functions because sometimes those functions analyze some",
    "start": "2070570",
    "end": "2076419"
  },
  {
    "text": "content and you want to know I can this case how many files actually have social",
    "start": "2076419",
    "end": "2082030"
  },
  {
    "text": "securities in the so we can add the distributed counter to the context of the function and it makes",
    "start": "2082030",
    "end": "2087158"
  },
  {
    "text": "the life of the developer extremely easy now all of those commits don't actually",
    "start": "2087159",
    "end": "2092319"
  },
  {
    "text": "happen during the function execution which is pretty cool so only when you finish the function is like an atomic",
    "start": "2092319",
    "end": "2098739"
  },
  {
    "text": "commit process so if this atomic comic fails your data is intact another",
    "start": "2098739",
    "end": "2106839"
  },
  {
    "text": "example which is a may be slightly more cool is extracting data from pictures",
    "start": "2106839",
    "end": "2114640"
  },
  {
    "text": "and and this is the using now the same data the challenges that some libraries",
    "start": "2114640",
    "end": "2120369"
  },
  {
    "text": "only have file access like those exist the libraries for JPEG the only work",
    "start": "2120369",
    "end": "2125859"
  },
  {
    "text": "when they actually see a file so if you work with like Amazon you have to read the data from object convert it to a",
    "start": "2125859",
    "end": "2133209"
  },
  {
    "text": "temporary file and then run some processing on top of it and only then generate the metadata in storage",
    "start": "2133209",
    "end": "2138969"
  },
  {
    "text": "somewhere so by being able to see the same object on one can away as a sort of",
    "start": "2138969",
    "end": "2144940"
  },
  {
    "text": "mounted file on the same time as an object or at the table you can actually do those things in place like I'm doing",
    "start": "2144940",
    "end": "2152319"
  },
  {
    "text": "it here ok and we mentioned also we can take the thumbnail and just throw it in",
    "start": "2152319",
    "end": "2158440"
  },
  {
    "text": "as yet another blob record for the same object so this is this and this is just",
    "start": "2158440",
    "end": "2165489"
  },
  {
    "text": "an example of one application that use all those things that I talked about so you can ingest the data as a picture",
    "start": "2165489",
    "end": "2172119"
  },
  {
    "text": "into the platform you can run this extraction functionality that I mentioned that just looks at the EXIF",
    "start": "2172119",
    "end": "2177729"
  },
  {
    "text": "data and generates tags on the data based on like geolocation you can run",
    "start": "2177729",
    "end": "2183339"
  },
  {
    "text": "things like tensor flow to actually go and do deep learning on the same pictures while this is running they can",
    "start": "2183339",
    "end": "2190209"
  },
  {
    "text": "actually run concurrently and what we demonstrate is actually two tensor flow processes one doing facial recognition",
    "start": "2190209",
    "end": "2196269"
  },
  {
    "text": "one doing sensor sort of scenery recognition and geolocation extraction",
    "start": "2196269",
    "end": "2201339"
  },
  {
    "text": "all the same time having something like spark looking at the same data and running analytic queries on that and",
    "start": "2201339",
    "end": "2208089"
  },
  {
    "text": "serving all the data projects for all that in parlance and this is enabled by",
    "start": "2208089",
    "end": "2213819"
  },
  {
    "text": "having this is a loop and having everything looking at the data in different ways but the",
    "start": "2213819",
    "end": "2220690"
  },
  {
    "text": "same data so so our platform uses",
    "start": "2220690",
    "end": "2226540"
  },
  {
    "text": "kubernetes in order to deliver this and some some things are still not",
    "start": "2226540",
    "end": "2231850"
  },
  {
    "text": "kubernetes because of those challenges that we haven't figured out some of the things are still in docker containers so",
    "start": "2231850",
    "end": "2241900"
  },
  {
    "text": "basically if you look if you ask about how its deployed basically we have our platform that has a lot of doctors",
    "start": "2241900",
    "end": "2247360"
  },
  {
    "text": "inside and then you have kubernetes that can serve two different workflows on top and the workers could be there stateless",
    "start": "2247360",
    "end": "2254050"
  },
  {
    "text": "event-driven processes or just traditional workloads that can look at the system whether through file or",
    "start": "2254050",
    "end": "2260230"
  },
  {
    "text": "object or other api so so this is it I",
    "start": "2260230",
    "end": "2266770"
  },
  {
    "text": "also have a backup slide if anyone interested how we're designing for abstracting the different data layers",
    "start": "2266770",
    "end": "2273040"
  },
  {
    "text": "and that's pretty generic so one of the things that we want to do when this will be contributed to the open source is try",
    "start": "2273040",
    "end": "2278800"
  },
  {
    "text": "and map those to traditional data stores so people can use the same abstraction same you guys with like Costco or",
    "start": "2278800",
    "end": "2284560"
  },
  {
    "text": "Cassandra or any of the other data sources ok any question sorry those",
    "start": "2284560",
    "end": "2303700"
  },
  {
    "text": "things are are nice but they're more designed for HTTP web developer nodejs they're not even close to the",
    "start": "2303700",
    "end": "2310750"
  },
  {
    "text": "performance and of transitions of those things are designer so we wanted to really optimize the data pipe and all",
    "start": "2310750",
    "end": "2317260"
  },
  {
    "text": "the way and make sure we maximize the CPU utilization reduce latency those",
    "start": "2317260",
    "end": "2323290"
  },
  {
    "text": "other things are basically using a lot of blocking you know instance and they're not really optimized for data",
    "start": "2323290",
    "end": "2330400"
  },
  {
    "text": "streaming so mostly HTTP requests and things like that any more questions yep",
    "start": "2330400",
    "end": "2342410"
  },
  {
    "text": "[Applause]",
    "start": "2342410",
    "end": "2347159"
  }
]