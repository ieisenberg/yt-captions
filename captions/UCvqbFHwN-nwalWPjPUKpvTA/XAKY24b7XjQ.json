[
  {
    "start": "0",
    "end": "136000"
  },
  {
    "text": "okay let's get started i'd like to thank everyone who's joining us welcome to today's",
    "start": "4240",
    "end": "9840"
  },
  {
    "text": "cncf webinar debugging your debugging tools what to do when your service mesh goes",
    "start": "9840",
    "end": "15200"
  },
  {
    "text": "down to production i'm jerry fallon and i'll be moderating today's webinar we'd like to welcome our presenters",
    "start": "15200",
    "end": "21039"
  },
  {
    "text": "today niraj podar co-founder and chief architect at aspen mesh and john howard software engineer",
    "start": "21039",
    "end": "27439"
  },
  {
    "text": "at google just a few housekeeping items before we get started during the webinar you are not allowed",
    "start": "27439",
    "end": "32719"
  },
  {
    "text": "to talk as an attendee there is a q a box at the bottom of your screen please feel free to drop your",
    "start": "32719",
    "end": "37840"
  },
  {
    "text": "questions in there and we'll get to as many as we can at the end this is an official webinar of the cncf",
    "start": "37840",
    "end": "43680"
  },
  {
    "text": "and as such is subject to the cncf code of conduct please do not add anything to the chat or questions that would be in violation",
    "start": "43680",
    "end": "50399"
  },
  {
    "text": "of that code of conduct please be respectful of your fellow participants and",
    "start": "50399",
    "end": "55760"
  },
  {
    "text": "presenters please also note that today's recording and slides will be posted later today at the cncf webinar page at cncf",
    "start": "55760",
    "end": "63520"
  },
  {
    "text": "dot io slash webinars with that i'll hand it to niraj and john to kick off today's presentation",
    "start": "63520",
    "end": "70159"
  },
  {
    "text": "thanks jerry uh hello everyone i am niraj i'm the co-founder and chief architect at aspen mesh",
    "start": "70159",
    "end": "76159"
  },
  {
    "text": "i'm also the member of the technical oversight committee with me i have john uh john you'll introduce yourself hey uh",
    "start": "76159",
    "end": "83040"
  },
  {
    "text": "yeah i'm john howard i work on estro at google um i work in the networking and environments",
    "start": "83040",
    "end": "89680"
  },
  {
    "text": "and testing release areas mostly yep so thanks everyone for joining us in",
    "start": "89680",
    "end": "95200"
  },
  {
    "text": "this webinar on debugging your debugging tools what to do when your service mesh goes down in production",
    "start": "95200",
    "end": "100479"
  },
  {
    "text": "it's great to see organizations adopting service measures like istio to gain business agility and scalability",
    "start": "100479",
    "end": "106960"
  },
  {
    "text": "but at the same time it's important to ensure that the service mesh itself is available and resilient",
    "start": "106960",
    "end": "112720"
  },
  {
    "text": "and if and when issues happen you can quickly debug and diagnose it and that's the topic of discussion today",
    "start": "112720",
    "end": "118880"
  },
  {
    "text": "especially specifically we're going to focus on istio and how you can debug and diagnose it i'm going to start with",
    "start": "118880",
    "end": "123920"
  },
  {
    "text": "giving a brief overview of what the service mesh is and go over istio's architecture as it's important to understand the architecture",
    "start": "123920",
    "end": "130959"
  },
  {
    "text": "to be able to easily debug and diagnose it so let's get started",
    "start": "130959",
    "end": "136319"
  },
  {
    "start": "136000",
    "end": "136000"
  },
  {
    "text": "a service mesh is a transparent infrastructure layer it manages and handles the communication between microservices",
    "start": "136319",
    "end": "143120"
  },
  {
    "text": "and as such it allows developers to focus on the business logic and not worry about the application",
    "start": "143120",
    "end": "148319"
  },
  {
    "text": "worry about the infrastructure pieces at the same time it allows operators to work independent of the",
    "start": "148319",
    "end": "153599"
  },
  {
    "text": "developer cycles and provide a more resilient and secure environment this decoupling",
    "start": "153599",
    "end": "158959"
  },
  {
    "text": "is one of the main benefits of a service mesh like sto most of the service measures work by",
    "start": "158959",
    "end": "164560"
  },
  {
    "text": "adding a proxy which transparently intercepts traffic going in and out of your application and as the proxy intercepts",
    "start": "164560",
    "end": "171920"
  },
  {
    "text": "traffic it provides a lot of crucial functionality these functionalities can be bucketed",
    "start": "171920",
    "end": "177519"
  },
  {
    "start": "175000",
    "end": "175000"
  },
  {
    "text": "into three categories traffic management includes things like path-based routing connection management request retries",
    "start": "177519",
    "end": "184080"
  },
  {
    "text": "and timeout which now the application can offload into the service mesh security can include",
    "start": "184080",
    "end": "190400"
  },
  {
    "text": "end user authorization authentication or workload to workload security like odd z and auth and and and transparently",
    "start": "190400",
    "end": "198000"
  },
  {
    "text": "encrypting traffic so you can delegate that functionality from your application to the service mesh",
    "start": "198000",
    "end": "203760"
  },
  {
    "text": "along with that as the proxy intercepts traffic it emits lot of rich contextual data",
    "start": "203760",
    "end": "210720"
  },
  {
    "text": "which can be used telemetry data which can be used to understand what is happening in your clusters this includes tracing",
    "start": "210720",
    "end": "217680"
  },
  {
    "text": "metrics and logs as you can see a service mesh will provide a lot of crucial benefits",
    "start": "217680",
    "end": "223120"
  },
  {
    "text": "and as such if you are relying on it you want to make sure you can debug and diagnose it",
    "start": "223120",
    "end": "228799"
  },
  {
    "text": "so this is a high level overview of istio's architecture so in this i'm showing how istio's",
    "start": "228799",
    "end": "236000"
  },
  {
    "text": "components interact with microservices running in your cluster so in the bottom half of the slide you will see three micro",
    "start": "236000",
    "end": "241840"
  },
  {
    "text": "services service a b and c the green boxes represent the application container istio adds a",
    "start": "241840",
    "end": "248720"
  },
  {
    "text": "sidebar sidecar proxy container in the same pod as your application container and that's",
    "start": "248720",
    "end": "254080"
  },
  {
    "text": "what is shown in the ping boxes the sidecar proxy container has two key components",
    "start": "254080",
    "end": "259759"
  },
  {
    "text": "onward which is the cncf or the cloud native proxy which allows you to enables you to have",
    "start": "259759",
    "end": "266880"
  },
  {
    "text": "this functionality offloaded from your application around traffic management security and observability",
    "start": "266880",
    "end": "273040"
  },
  {
    "text": "and istio agent is the process which is responsible for bootstrapping and a lot of other functionality that",
    "start": "273040",
    "end": "278639"
  },
  {
    "text": "john is going to talk about later so these sidecar proxies together is what we call the data plane of",
    "start": "278639",
    "end": "284960"
  },
  {
    "text": "of istio in the top half you will see the control plane the control plane is responsible for configuring and managing",
    "start": "284960",
    "end": "291199"
  },
  {
    "text": "these sidecar proxies or the data plane so they take in information from your kubernetes",
    "start": "291199",
    "end": "297280"
  },
  {
    "text": "environment for example it can take in your kubernetes services and points along with all the istio-specific",
    "start": "297280",
    "end": "303280"
  },
  {
    "text": "crd resources that you create and lower it to the configuration that your sidecar proxies can understand in the same way",
    "start": "303280",
    "end": "310720"
  },
  {
    "text": "and if you're using tls it can be used for managing the life cycle of certificates sto 1.5 and before",
    "start": "310720",
    "end": "318240"
  },
  {
    "text": "the control pin itself used to be a distributed microservices architecture as you can see from 1.6 onwards it has been",
    "start": "318240",
    "end": "325280"
  },
  {
    "text": "consolidated into a monolithic control plane called this tod this was done for purely operational",
    "start": "325280",
    "end": "330639"
  },
  {
    "text": "reasons for simplifying operations simplifying the operations and life cycle management of sto itself",
    "start": "330639",
    "end": "336479"
  },
  {
    "text": "the functionality remains the same along with it you get an istio ingress gateway and egress gateway",
    "start": "336479",
    "end": "342000"
  },
  {
    "text": "ingress gateway is used for getting traffic into your cluster and egress if you want to use for getting traffic",
    "start": "342000",
    "end": "347039"
  },
  {
    "text": "out ingress and egress gateway for this webinar is also part of the data plane",
    "start": "347039",
    "end": "352800"
  },
  {
    "text": "so as you can imagine since istio is logically separated into these components",
    "start": "352800",
    "end": "357919"
  },
  {
    "text": "if you want to effectively debug istio you have to first triage and understand whether the issue is with control plane",
    "start": "357919",
    "end": "364240"
  },
  {
    "start": "358000",
    "end": "358000"
  },
  {
    "text": "or data plane and that and in the same way if you have figured out where the issue lies",
    "start": "364240",
    "end": "370080"
  },
  {
    "text": "then you have to understand what's the issue in the istio agent if you're diagnosing data plane or the sidecar or",
    "start": "370080",
    "end": "376319"
  },
  {
    "text": "is the issue with the stod itself so i'm going to cover the various tools that are available for",
    "start": "376319",
    "end": "382400"
  },
  {
    "text": "diagnosing envoy john is going to cover uh tools for debugging",
    "start": "382400",
    "end": "387520"
  },
  {
    "text": "steel agent and stod then we are going to talk about some common problems that users often see and then give you like a debugging",
    "start": "387520",
    "end": "394560"
  },
  {
    "text": "guide so that you can easily understand where the problem might be and i'm going to try to end the presentation if you have",
    "start": "394560",
    "end": "400080"
  },
  {
    "text": "some time making some recommendations of what how what and how to run uh stone production so with that",
    "start": "400080",
    "end": "407600"
  },
  {
    "text": "let me get into debugging onward so we are going to talk about four key areas or four key things that",
    "start": "407600",
    "end": "414240"
  },
  {
    "start": "410000",
    "end": "410000"
  },
  {
    "text": "you can use for debugging onward first is you can verify whether onward can connect to stod",
    "start": "414240",
    "end": "420160"
  },
  {
    "text": "the second is understanding and enabling access logs which have lots of rich information about the request flowing",
    "start": "420160",
    "end": "426560"
  },
  {
    "text": "through the proxies third is enabling debug logging from onward itself and fourth is understanding the",
    "start": "426560",
    "end": "433120"
  },
  {
    "text": "configuration architecture and the design of envoy so you can look under the hood and understand if there are there are",
    "start": "433120",
    "end": "440080"
  },
  {
    "text": "issues in the data plane if onward itself has been configured correctly by the control pane",
    "start": "440080",
    "end": "446720"
  },
  {
    "start": "446000",
    "end": "446000"
  },
  {
    "text": "for the first step this is a simple command that you can run from your",
    "start": "446720",
    "end": "451759"
  },
  {
    "text": "application container this requires that the application container has curl and you can reach out to the stod",
    "start": "451759",
    "end": "458720"
  },
  {
    "text": "process or the http service and you can look at the debug z endpoint the end point here does not",
    "start": "458720",
    "end": "465360"
  },
  {
    "text": "really matter this is just a debug endpoint but the main point here is to ensure",
    "start": "465360",
    "end": "470479"
  },
  {
    "text": "that you have connectivity between the sidecar proxy and the control plane as long as the as long as the command",
    "start": "470479",
    "end": "477840"
  },
  {
    "text": "gives you a 200 okay and some response it ensures there is no problems with connectivity on the other",
    "start": "477840",
    "end": "483759"
  },
  {
    "text": "hand if you are not able to connect to control plane the problems you will see will be around you are applying",
    "start": "483759",
    "end": "489120"
  },
  {
    "text": "configuration but the configuration is not taking into effect into the sidecar proxies or gateways so",
    "start": "489120",
    "end": "494319"
  },
  {
    "text": "this is just a quick check if you have curl in your container you can do it",
    "start": "494319",
    "end": "499599"
  },
  {
    "text": "the next piece is understanding application access locks so access logs",
    "start": "499599",
    "end": "504840"
  },
  {
    "start": "500000",
    "end": "500000"
  },
  {
    "text": "are records of requests or transactions which are flowing through the proxies be",
    "start": "504840",
    "end": "511360"
  },
  {
    "text": "it sidecar proxy or its ingress or egress gateways",
    "start": "511360",
    "end": "518399"
  },
  {
    "text": "envoy can record rich information about the client and the server that is connected",
    "start": "518399",
    "end": "523680"
  },
  {
    "text": "to the proxy and info and it can give you information about the request itself all",
    "start": "523680",
    "end": "529360"
  },
  {
    "text": "of this information is super useful for diagnosing traffic flows and if there are failures to",
    "start": "529360",
    "end": "535200"
  },
  {
    "text": "understand and spot check what the failure is related to additionally i like to think of access",
    "start": "535200",
    "end": "540959"
  },
  {
    "text": "logs as if you're looking through your micro services chain and if you look at access logs throughout these micro services you can",
    "start": "540959",
    "end": "547200"
  },
  {
    "text": "actually trace end to end what is happening to that request and if and when problems happen",
    "start": "547200",
    "end": "553120"
  },
  {
    "text": "where that problem is by default the",
    "start": "553120",
    "end": "559839"
  },
  {
    "text": "access logs is turned off in sdo it is only enabled in the demo profile so if you're running it in production this",
    "start": "559839",
    "end": "565279"
  },
  {
    "text": "should be one of the things which you can turn on and for me this is one of the first tools in your tool kit to understand",
    "start": "565279",
    "end": "570800"
  },
  {
    "text": "what is happening in service mesh in your applications",
    "start": "570800",
    "end": "577839"
  },
  {
    "start": "579000",
    "end": "579000"
  },
  {
    "text": "so this is how you globally enable access logs so you can use your s2ctl tool if you're using istio ctl install",
    "start": "579200",
    "end": "585680"
  },
  {
    "text": "command to install it you can set access log file option in mesh config to dev standard out and this",
    "start": "585680",
    "end": "592560"
  },
  {
    "text": "enables access logs throughout your cluster for all the proxies including sidecar and gateways the default encoding",
    "start": "592560",
    "end": "600240"
  },
  {
    "text": "for logs is text which means that the logs that are spit out are the fields",
    "start": "600240",
    "end": "606560"
  },
  {
    "text": "are separated by spaces this is sometimes difficult to grog in production as what these fields mean",
    "start": "606560",
    "end": "611600"
  },
  {
    "text": "what the order means you can change the access log encoding to json which will give you a prettier",
    "start": "611600",
    "end": "616720"
  },
  {
    "text": "version with key and the values together the third command just tells you how to revert back to no access log",
    "start": "616720",
    "end": "622480"
  },
  {
    "text": "the key here is you have to have the access log file option as empty and then you can go back to the encoding",
    "start": "622480",
    "end": "627760"
  },
  {
    "text": "as text i've often been asked by users and customers how do i see what my",
    "start": "627760",
    "end": "632959"
  },
  {
    "text": "current configuration is in the running cluster so this option is stored in the config map in istio",
    "start": "632959",
    "end": "639440"
  },
  {
    "text": "system name space and the config map is called sto you can grip for access log you can see",
    "start": "639440",
    "end": "644480"
  },
  {
    "text": "what your current option is this next bit is about enabling access",
    "start": "644480",
    "end": "649920"
  },
  {
    "start": "648000",
    "end": "648000"
  },
  {
    "text": "locks for a name space if you don't want to turn it on for the entire cluster you can use the onward filter",
    "start": "649920",
    "end": "655200"
  },
  {
    "text": "resource that i have showed here i have a link to a github repository where you can download this sample",
    "start": "655200",
    "end": "660720"
  },
  {
    "text": "there are two key things to note here onward filter api and s2 is a break glass api so if",
    "start": "660720",
    "end": "666640"
  },
  {
    "text": "you use it and if you incorrectly configure it you can affect traffic throughout your cluster so i always recommend using it in a demo",
    "start": "666640",
    "end": "673120"
  },
  {
    "text": "name space or use it in a demo cluster if you have access to a spare cluster",
    "start": "673120",
    "end": "678959"
  },
  {
    "text": "and the second important point is you should not use the onward filter option if you have turned it on globally the way onward filter merge",
    "start": "678959",
    "end": "685120"
  },
  {
    "text": "semantics work you will end up with two logs instead of one you can also use onward filter to",
    "start": "685120",
    "end": "690800"
  },
  {
    "text": "turn on the logging at the workspace level by adding the appropriate workload selectors",
    "start": "690800",
    "end": "695839"
  },
  {
    "text": "so this is a quick sample of access log i'm showing you the access log in json format so you have the keys in the value",
    "start": "695839",
    "end": "701920"
  },
  {
    "start": "696000",
    "end": "696000"
  },
  {
    "text": "pair you can see a lot of request attributes like authority path protocol",
    "start": "701920",
    "end": "707120"
  },
  {
    "text": "along with that you have information about the client in the server that onward proxy connects to in onward lingo",
    "start": "707120",
    "end": "713279"
  },
  {
    "text": "the client that connects to envoy is downstream and the server to which the onward connects to",
    "start": "713279",
    "end": "719519"
  },
  {
    "text": "its upstream one key thing here to note is the response flags",
    "start": "719519",
    "end": "724959"
  },
  {
    "text": "response flag attribute response flags contains a lot of information when errors happen for",
    "start": "724959",
    "end": "731600"
  },
  {
    "text": "example when you get a 542 or a 543 response in http you might not be sure whether it came",
    "start": "731600",
    "end": "737200"
  },
  {
    "text": "from your application or the proxy itself so this flag is the one that you look",
    "start": "737200",
    "end": "742399"
  },
  {
    "text": "for additional information if there are connection level errors specifically you can use this to sometimes determine if their tls rated",
    "start": "742399",
    "end": "749120"
  },
  {
    "text": "issues if you are getting further ahead in your stack",
    "start": "749120",
    "end": "753920"
  },
  {
    "start": "754000",
    "end": "754000"
  },
  {
    "text": "so this is the information what is contained in the response flags i have a link here to onward",
    "start": "754240",
    "end": "759839"
  },
  {
    "text": "documentation which explains various fields some of them are common to both http and",
    "start": "759839",
    "end": "764959"
  },
  {
    "text": "tcp one thing i want to note here is upstream connect which comes for http you will see this often if there",
    "start": "764959",
    "end": "772720"
  },
  {
    "text": "are any connection level errors happening uh and the upstream has disconnected",
    "start": "772720",
    "end": "779120"
  },
  {
    "text": "i've seen this used effectively for debugging similarly if you have errors around",
    "start": "779120",
    "end": "786560"
  },
  {
    "text": "if you have errors around outlier detection you will see upstream overflow which which can be",
    "start": "786560",
    "end": "792480"
  },
  {
    "text": "useful to understand that you have a circuit breaking that is triggering these failures",
    "start": "792480",
    "end": "799279"
  },
  {
    "text": "the next tool that you have is using debug logging so debug logging is looking at internal",
    "start": "799600",
    "end": "806160"
  },
  {
    "start": "800000",
    "end": "800000"
  },
  {
    "text": "logs of onward to understand what's going on it's very verbose and expensive we don't recommend it to use it for production",
    "start": "806160",
    "end": "812320"
  },
  {
    "text": "usage and that's why the default is warning you can turn on the debug log for a specific workload without restarting it",
    "start": "812320",
    "end": "819440"
  },
  {
    "text": "using the sqctl command that is the preferred way i would say how you turn on debug logging otherwise you will end up",
    "start": "819440",
    "end": "826079"
  },
  {
    "text": "restarting the pod if you use the next two options by adding annotations or globally turning it on",
    "start": "826079",
    "end": "832399"
  },
  {
    "text": "this is specifically useful in various mtls related issues where you might not even get to the stage where you get",
    "start": "832399",
    "end": "838240"
  },
  {
    "text": "access log but debug logs might give you some more information",
    "start": "838240",
    "end": "843600"
  },
  {
    "start": "843000",
    "end": "843000"
  },
  {
    "text": "the next tool is looking at onward configuration itself so onward configuration is split into",
    "start": "843600",
    "end": "850240"
  },
  {
    "text": "various logical components so and they are all composed the configuration itself is composed of this chain",
    "start": "850240",
    "end": "857839"
  },
  {
    "text": "where each of these components refer to each other by forward references this gives a lot of flexibility by",
    "start": "857839",
    "end": "864399"
  },
  {
    "text": "design where each of these components can be dynamically loaded without affecting the other for example the rate of change of",
    "start": "864399",
    "end": "870800"
  },
  {
    "text": "endpoints can be faster than the rate of change of listeners so i'm going to quickly go over what these fields are listeners are",
    "start": "870800",
    "end": "878000"
  },
  {
    "text": "the ip port tuple which are similar to a server address or a socket address that",
    "start": "878000",
    "end": "883680"
  },
  {
    "text": "you listen to any traffic that is received at onward will only be processed",
    "start": "883680",
    "end": "888720"
  },
  {
    "text": "if there is a corresponding listener on it when listeners are matched if there are multiple that match the criteria",
    "start": "888720",
    "end": "894800"
  },
  {
    "text": "the most specific one is always picked in onward there are two kinds of listeners or actually there are various kinds of",
    "start": "894800",
    "end": "901040"
  },
  {
    "text": "listeners but the two ones i want to talk about is one that actually bind to the socket so they are actually",
    "start": "901040",
    "end": "908000"
  },
  {
    "text": "calling listen and the other ones don't call bind but they are used for matching criterias listeners point to",
    "start": "908000",
    "end": "915760"
  },
  {
    "text": "filter chains filter chains have a bunch of selection criteria for selecting the set of",
    "start": "915760",
    "end": "921040"
  },
  {
    "text": "filters the selection criteria can be based on destination ips ports or",
    "start": "921040",
    "end": "926480"
  },
  {
    "text": "for tls we use it for application protocols or sni headers then filter chains branch",
    "start": "926480",
    "end": "933120"
  },
  {
    "text": "out and point to filters filters are run always in order and any filter in the chain can terminate the",
    "start": "933120",
    "end": "939440"
  },
  {
    "text": "processing for example an odd z filter might reject processing",
    "start": "939440",
    "end": "944720"
  },
  {
    "text": "if the user is not authorized filters can be http or tcp this is where the core decoding of the",
    "start": "944720",
    "end": "951680"
  },
  {
    "text": "packet happens and understanding the and this is core to understanding the protocol that is being",
    "start": "951680",
    "end": "957199"
  },
  {
    "text": "that is being processed http filters point to routes routes are rules based",
    "start": "957199",
    "end": "964160"
  },
  {
    "text": "on attributes of the request which tell you which cluster to send the traffic to in this case the most specific route is",
    "start": "964160",
    "end": "971839"
  },
  {
    "text": "matched both routes and tcp filters in the way istio configures it eventually point to",
    "start": "971839",
    "end": "977839"
  },
  {
    "text": "clusters clusters a symbolic name for destination servers",
    "start": "977839",
    "end": "983120"
  },
  {
    "text": "and then clusters are itself made of endpoints and endpoints are the ip address and ports which represent those services",
    "start": "983120",
    "end": "991360"
  },
  {
    "text": "upstream services that you are talking to so it's important to understand this hierarchy of configuration",
    "start": "991360",
    "end": "996480"
  },
  {
    "text": "to effectively debug onward so this is a quick example of how you can get access",
    "start": "996480",
    "end": "1001759"
  },
  {
    "start": "999000",
    "end": "999000"
  },
  {
    "text": "to listeners using istio ctl proxy config command you can look at virtual inbound virtual",
    "start": "1001759",
    "end": "1007199"
  },
  {
    "text": "outbound or outbound listeners these are the three kind of listeners that istio currently configures",
    "start": "1007199",
    "end": "1012320"
  },
  {
    "text": "a virtual out virtual inbound listener is the listener at port 15006 that accepts all traffic coming from",
    "start": "1012320",
    "end": "1019040"
  },
  {
    "text": "outside of your pod into the pod this listener has bunch of filter chains which further selects",
    "start": "1019040",
    "end": "1024640"
  },
  {
    "text": "based on destination ip and port and forwards traffic to the application on the local host",
    "start": "1024640",
    "end": "1030480"
  },
  {
    "text": "virtual outbound listener is the opposite end it's the listener on port 15000 which is the default fallback listener",
    "start": "1030480",
    "end": "1037280"
  },
  {
    "text": "for traffic going from the application pod to the outside from from the application part",
    "start": "1037280",
    "end": "1042480"
  },
  {
    "text": "to application container in the pod to outside of your pod this is only used if there is no",
    "start": "1042480",
    "end": "1048558"
  },
  {
    "text": "specific outbound listener which gets matched which is the third type of listener so you can use the proxy config command",
    "start": "1048559",
    "end": "1054960"
  },
  {
    "text": "to pick the listener you want and look at the details of how it has been configured you can also look at all",
    "start": "1054960",
    "end": "1060160"
  },
  {
    "text": "the listeners by looking at by issuing the command which is the fourth command so if you are having traffic issues the",
    "start": "1060160",
    "end": "1066640"
  },
  {
    "text": "first thing i always recommend is look at all the listeners without the dash o json look at the ip",
    "start": "1066640",
    "end": "1073200"
  },
  {
    "text": "and the port and then based on what listener will be hit you can",
    "start": "1073200",
    "end": "1078240"
  },
  {
    "text": "look at the details of the specific listener by providing the address of the port option so here is a quick example of an http",
    "start": "1078240",
    "end": "1085120"
  },
  {
    "start": "1083000",
    "end": "1083000"
  },
  {
    "text": "listener configuration in this you can see there is the socket address the filter chains and then the onboard.http connection",
    "start": "1085120",
    "end": "1092320"
  },
  {
    "text": "manager is the one that makes it an http listener http listeners like i was saying always point to routes so you should be able to",
    "start": "1092320",
    "end": "1098880"
  },
  {
    "text": "see a route config name and then you can use the sql ctl proxy config route command to look at the route",
    "start": "1098880",
    "end": "1104400"
  },
  {
    "text": "and similarly you can follow the entire chain by following the diagram that i have showed few slides ago and look at the configuration and",
    "start": "1104400",
    "end": "1110960"
  },
  {
    "text": "how it flows this is a simple tcp listener it's tcp",
    "start": "1110960",
    "end": "1116400"
  },
  {
    "text": "because the tcp proxy listener is invoked and and the tcp listeners point to clusters directly so here is the name of the",
    "start": "1116400",
    "end": "1122640"
  },
  {
    "text": "cluster so people often ask me how does various",
    "start": "1122640",
    "end": "1128799"
  },
  {
    "text": "resources in the kubernetes and stu environment map to onward configuration which is as i'm creating",
    "start": "1128799",
    "end": "1134960"
  },
  {
    "text": "these resources because onward has so many things what do i look at so this is a quick summary of",
    "start": "1134960",
    "end": "1141120"
  },
  {
    "text": "how in sto16 these resources map to onward configuration this changes for every release",
    "start": "1141120",
    "end": "1147120"
  },
  {
    "text": "but this is more or less kept consistent in the sense of these things will always be changed they",
    "start": "1147120",
    "end": "1153440"
  },
  {
    "text": "can be new things that are updated so as new kubernetes services are added listeners routes or clusters all of them",
    "start": "1153440",
    "end": "1159679"
  },
  {
    "text": "can be can be updated we create listeners based on the service port and the port and the",
    "start": "1159679",
    "end": "1166000"
  },
  {
    "text": "protocol prefix and on the basis of port and the protocol prefix uniqueness",
    "start": "1166000",
    "end": "1171600"
  },
  {
    "text": "so for http service we will create a wildcard listener for",
    "start": "1171600",
    "end": "1177120"
  },
  {
    "text": "that port and then have routes based on the host name for the virtual host",
    "start": "1177120",
    "end": "1182320"
  },
  {
    "text": "but for a tcp protocol the listener will be created based on a tester ip and the port",
    "start": "1182320",
    "end": "1188799"
  },
  {
    "text": "similarly the cluster configuration envoy is based on the service port and the subset combination",
    "start": "1188799",
    "end": "1194080"
  },
  {
    "text": "the kubernetes endpoints affect the endpoints of envoy istio gateway affects listeners and this",
    "start": "1194080",
    "end": "1200559"
  },
  {
    "text": "only applies to the ingress and the egress gateways virtual service and destination rule and service entry are the three config",
    "start": "1200559",
    "end": "1207440"
  },
  {
    "text": "are the three crds which affect the client side proxies virtual service affects listeners for",
    "start": "1207440",
    "end": "1213440"
  },
  {
    "text": "tcp and tls but for http it mostly affects uh onward routes destination rule and service entry",
    "start": "1213440",
    "end": "1220480"
  },
  {
    "text": "affects the cluster the client-side configuration for clusters and endpoints the next three crds peer authentication request",
    "start": "1220480",
    "end": "1227360"
  },
  {
    "text": "authentication and authorization policies affect the server side proxies uh they",
    "start": "1227360",
    "end": "1233120"
  },
  {
    "text": "are mostly used for enforcing server side policies so they",
    "start": "1233120",
    "end": "1238400"
  },
  {
    "text": "are they are invoked or they affect the listener configuration onward filter like i was saying is a",
    "start": "1238400",
    "end": "1244240"
  },
  {
    "text": "break glass api so you can change almost all onward configuration and sidecar is depending on how you're using the",
    "start": "1244240",
    "end": "1251360"
  },
  {
    "text": "side card if you're using the sdo sidecar for scoping down the configuration it can affect everything",
    "start": "1251360",
    "end": "1256880"
  },
  {
    "text": "so with that i'm going to hand it off to john who is going to talk about steel agent",
    "start": "1256880",
    "end": "1263760"
  },
  {
    "start": "1263000",
    "end": "1263000"
  },
  {
    "text": "yeah so i think the the key to understanding uh debugging the the agent and envoy is is you really",
    "start": "1263760",
    "end": "1270000"
  },
  {
    "text": "need to understand what it's doing um so i wanted to first talk about what's happening when it starts up",
    "start": "1270000",
    "end": "1275360"
  },
  {
    "text": "it's fairly common to see issues where people have misconfigurations or other things going on where",
    "start": "1275360",
    "end": "1281280"
  },
  {
    "text": "things don't start up and they can't figure out why so as niraj mentioned easter agent is",
    "start": "1281280",
    "end": "1288720"
  },
  {
    "text": "this component that's running alongside envoy they actually run it in the same container and so it's basically",
    "start": "1288720",
    "end": "1294400"
  },
  {
    "text": "like the life cycle management and provides some utilities on top of envoy",
    "start": "1294400",
    "end": "1300320"
  },
  {
    "text": "so the first thing that happens when the pod starts up is we we kick off envoy and we get it running",
    "start": "1300320",
    "end": "1306080"
  },
  {
    "text": "now envoy in order to communicate with other services it needs certificates um this is used both to connect with",
    "start": "1306080",
    "end": "1314000"
  },
  {
    "text": "other uh microservices in your mesh and with easter eg itself and so the first thing it will do is it",
    "start": "1314000",
    "end": "1320159"
  },
  {
    "text": "will request a certificate from the ego agent now the easter agent will generate a",
    "start": "1320159",
    "end": "1326559"
  },
  {
    "text": "certificate and ask easter od to sign it and it will authenticate itself using",
    "start": "1326559",
    "end": "1332000"
  },
  {
    "text": "jot token so these are present on kubernetes pods with the service account token",
    "start": "1332000",
    "end": "1337039"
  },
  {
    "text": "so the identity is bootstrapped for us by kubernetes out of the box um so once we've done that we'll give",
    "start": "1337039",
    "end": "1343440"
  },
  {
    "text": "the certificate back to envoy and next we'll ask easter d for configuration and it will use that",
    "start": "1343440",
    "end": "1349679"
  },
  {
    "text": "certificate that it returned to authenticate itself so if you see for",
    "start": "1349679",
    "end": "1355200"
  },
  {
    "text": "example there's no config on my proxy it's possible it's having issues communicating with east 2d",
    "start": "1355200",
    "end": "1361919"
  },
  {
    "text": "and that could be because maybe it didn't get a certificate so it's useful to make sure you understand the full flow so you can see where the problems",
    "start": "1361919",
    "end": "1368080"
  },
  {
    "text": "start if you go ahead to the next slide we'll talk about the actual life cycle so once",
    "start": "1368080",
    "end": "1374320"
  },
  {
    "start": "1371000",
    "end": "1371000"
  },
  {
    "text": "we've bootstrapped basically we're going to continue to do those two functions",
    "start": "1374320",
    "end": "1379600"
  },
  {
    "text": "throughout the life cycle so easter agent will monitor the certificates and when they're near expiration it will",
    "start": "1379600",
    "end": "1386240"
  },
  {
    "text": "ask od to sign a new one and push those to envoy at the same time easter d is watching",
    "start": "1386240",
    "end": "1392960"
  },
  {
    "text": "configuration and endpoints and as they're changing it's pushing new config to envoy",
    "start": "1392960",
    "end": "1398400"
  },
  {
    "text": "so that's up to date one thing that may also happen is we have uh connection level parameters that have",
    "start": "1398400",
    "end": "1404799"
  },
  {
    "text": "the max connection age and keep alives etc on this connection between east ud and envoy and so it's not uncommon to",
    "start": "1404799",
    "end": "1412400"
  },
  {
    "text": "see like disconnects between these which may appear to be an issue um",
    "start": "1412400",
    "end": "1417760"
  },
  {
    "text": "and it may be if it's happening you know every two seconds or something but if you see it happening every 30",
    "start": "1417760",
    "end": "1422799"
  },
  {
    "text": "minutes or every five minutes if there's no traffic which are the default max connection agent keep lives it's very likely to be",
    "start": "1422799",
    "end": "1430159"
  },
  {
    "text": "standard procedure so don't be too alarmed at that happening",
    "start": "1430159",
    "end": "1435279"
  },
  {
    "text": "so that's pretty much the role of the agent if you go to the next slide we'll talk about how we can",
    "start": "1435279",
    "end": "1440640"
  },
  {
    "start": "1440000",
    "end": "1440000"
  },
  {
    "text": "debug these so the actual secrets that are loaded into envoy um can be viewed",
    "start": "1440640",
    "end": "1447360"
  },
  {
    "text": "through easter cuddle so we have this issue cuddle proxy convict secret and this will show a list of all the secrets loaded into envoy",
    "start": "1447360",
    "end": "1454320"
  },
  {
    "text": "on a normal sidecar you'll probably have two secrets one is the default secret which is the workload certificate",
    "start": "1454320",
    "end": "1460400"
  },
  {
    "text": "for that pod this is how it's doing mtls to other pods and then there's also the root ca secret",
    "start": "1460400",
    "end": "1467200"
  },
  {
    "text": "which is the the root certificate for the mesh so there can also be other secrets that",
    "start": "1467200",
    "end": "1473679"
  },
  {
    "text": "are this is most common on the gateways where you have uh certificates for terminating tls and so",
    "start": "1473679",
    "end": "1480080"
  },
  {
    "text": "you could have a very long list there and they can also be for destination rules for outbound traffic but that's",
    "start": "1480080",
    "end": "1485679"
  },
  {
    "text": "that's generally less common um so if you want to view the full certificate info there's this",
    "start": "1485679",
    "end": "1491360"
  },
  {
    "text": "fairly long command that basically just grabs the uh the certificate from that command and",
    "start": "1491360",
    "end": "1496880"
  },
  {
    "text": "then passes it to openssl which will decode the certificate and so then you can see all the parameters of the",
    "start": "1496880",
    "end": "1503200"
  },
  {
    "text": "certificate like the expiration date uh the sign or the sans et cetera",
    "start": "1503200",
    "end": "1508640"
  },
  {
    "text": "um so that can be really useful if you're having issues where the certificates aren't uh working as expected",
    "start": "1508640",
    "end": "1515120"
  },
  {
    "text": "one other thing you may see is what they call a warming secret and this actually applies to all envoy",
    "start": "1515120",
    "end": "1520720"
  },
  {
    "text": "config so when something is warming that basically means that envoy is expecting",
    "start": "1520720",
    "end": "1526000"
  },
  {
    "text": "to receive this configuration but it hasn't yet so for example if it asks uh esto agent",
    "start": "1526000",
    "end": "1531919"
  },
  {
    "text": "for a certificate because the listener says we need the certificate to connect",
    "start": "1531919",
    "end": "1536960"
  },
  {
    "text": "it will go into a warming state until it's returned and so if it's stuck warming then traffic is going to fail",
    "start": "1536960",
    "end": "1542559"
  },
  {
    "text": "until that that certificate arrives so for example if you have a gateway",
    "start": "1542559",
    "end": "1548000"
  },
  {
    "text": "where you can figure a say i want to use this secret as a certificate and it doesn't exist",
    "start": "1548000",
    "end": "1554320"
  },
  {
    "text": "then it's very common for the secret to go into warming and envoy and requests will fail um so this is if you're having issues",
    "start": "1554320",
    "end": "1560320"
  },
  {
    "text": "here it's good to look at the secret info and it will show if it's warming",
    "start": "1560320",
    "end": "1565440"
  },
  {
    "text": "and then you can start diagnosing from there uh can you go ahead to the next slide",
    "start": "1565440",
    "end": "1572000"
  },
  {
    "start": "1571000",
    "end": "1571000"
  },
  {
    "text": "yeah so the easter agent has its own readiness probe um so this is polling for this is just a",
    "start": "1572000",
    "end": "1577760"
  },
  {
    "text": "normal kubernetes readiness probe so this is pulling for the lifetime of the pod and it's checking the",
    "start": "1577760",
    "end": "1583520"
  },
  {
    "text": "status here at uh health c ready and so if it succeeds it will mark the",
    "start": "1583520",
    "end": "1590159"
  },
  {
    "text": "container as ready and your pod will start receiving traffic if it fails multiple times in a row it will become not ready",
    "start": "1590159",
    "end": "1596880"
  },
  {
    "text": "and one common misconception with the readiness probes in kubernetes is that it's not just a startup",
    "start": "1596880",
    "end": "1602880"
  },
  {
    "text": "a pod can go from ready to not ready which could be from you know some issue with",
    "start": "1602880",
    "end": "1608159"
  },
  {
    "text": "the pod coming in later in life so one of the the common things you'll see is when",
    "start": "1608159",
    "end": "1614240"
  },
  {
    "text": "we're not ready we'll print out this log message envoy proxy is not ready and if you see",
    "start": "1614240",
    "end": "1619840"
  },
  {
    "text": "that you know for one second at startup that's not a big issue it just means that the start is taking a little longer",
    "start": "1619840",
    "end": "1625520"
  },
  {
    "text": "but often we see you know it's happening forever and the pod never gets ready so at that point we need to start",
    "start": "1625520",
    "end": "1631200"
  },
  {
    "text": "digging it into a bit more the pod will not become ready until all the envoy configuration is received so",
    "start": "1631200",
    "end": "1637919"
  },
  {
    "text": "if we can't connect a pilot or sorry easter od then this will never",
    "start": "1637919",
    "end": "1643120"
  },
  {
    "text": "come up so one common case for this is rejected config",
    "start": "1643120",
    "end": "1648640"
  },
  {
    "text": "this is basically when east 2d sends configuration that is not considered valid by envoy um",
    "start": "1648640",
    "end": "1656080"
  },
  {
    "text": "and so you'll see these logs both on the envoy side and on the east 2d side so you'll see on easterd like this",
    "start": "1656080",
    "end": "1661520"
  },
  {
    "text": "ack error and on envoy will say something something something is rejected and it will give a nice error message usually",
    "start": "1661520",
    "end": "1668480"
  },
  {
    "text": "about what is the invalid config there's also metrics for these which are the pilot xcs",
    "start": "1668480",
    "end": "1674080"
  },
  {
    "text": "and then one of the resource types rejects so it's really good to monitor on these because usually these are",
    "start": "1674080",
    "end": "1679440"
  },
  {
    "text": "indications of either non-standard or odd config",
    "start": "1679440",
    "end": "1685760"
  },
  {
    "text": "or and or a bug very likely it is an issue in the actual echo code itself",
    "start": "1685760",
    "end": "1692799"
  },
  {
    "text": "but it's triggered by doing something that's very strange that we have not considered before so this is much less common now because",
    "start": "1692799",
    "end": "1700000"
  },
  {
    "text": "we've run into a bunch of strange cases but it's still something to look out for because i can totally",
    "start": "1700000",
    "end": "1705919"
  },
  {
    "text": "stop your pod from coming up so another issue can be connectivity issues to uh east ud so you'll see maybe",
    "start": "1705919",
    "end": "1713520"
  },
  {
    "text": "like uh stream aggregate resources is the uh connection the grpc uh name and so if you can't",
    "start": "1713520",
    "end": "1721039"
  },
  {
    "text": "connect then we're having issues there you may need to check that eastwood is running properly that we have the certificates and check",
    "start": "1721039",
    "end": "1727919"
  },
  {
    "text": "network level things like network policies and firewall rules are not preventing anything yep go ahead to the next slide",
    "start": "1727919",
    "end": "1735760"
  },
  {
    "text": "yeah so next we'll talk about debugging easterd itself we'll talk about how to enable debug logging",
    "start": "1735760",
    "end": "1741039"
  },
  {
    "text": "view a dashboard for it and some important metrics to to look at",
    "start": "1741039",
    "end": "1746720"
  },
  {
    "text": "so easterd has a lot of useful logs i would say it is probably the if you're",
    "start": "1747679",
    "end": "1752720"
  },
  {
    "text": "running into issues it's very easy to just quickly take a look at the logs and scan for any error warning",
    "start": "1752720",
    "end": "1758240"
  },
  {
    "text": "messages that can be a very quick way to find issues if there are any um you can",
    "start": "1758240",
    "end": "1763360"
  },
  {
    "text": "also enable debug um if you need to go very in-depth into an issue",
    "start": "1763360",
    "end": "1769120"
  },
  {
    "text": "this is uh very very noisy so it's recommended only for uh like point-of-time debugging",
    "start": "1769120",
    "end": "1775440"
  },
  {
    "text": "not running all the time so this can be done at runtime by using this control z dashboard so if you run the c",
    "start": "1775440",
    "end": "1782480"
  },
  {
    "text": "show cuddle command you'll get this ui where you can tweak some things and i think in the next version we see we're",
    "start": "1782480",
    "end": "1787840"
  },
  {
    "text": "also adding an easter cuddle command like the previous one that niraj showed for envoy and you can also do it at install",
    "start": "1787840",
    "end": "1794240"
  },
  {
    "text": "time so that new pods coming up will be debug logging",
    "start": "1794240",
    "end": "1799440"
  },
  {
    "text": "um so this is the dashboard i briefly mentioned previously which has a bunch of information about easter d you can",
    "start": "1800799",
    "end": "1806000"
  },
  {
    "text": "see it's like things like memory info environment variables metrics that sort of thing and so if you",
    "start": "1806000",
    "end": "1812080"
  },
  {
    "text": "want to get a quick look at what's going on this can be a good place to get a bunch of info",
    "start": "1812080",
    "end": "1818640"
  },
  {
    "text": "and if you want to actually monitor like the metrics you probably want if you go to the next slide uh something",
    "start": "1818880",
    "end": "1824640"
  },
  {
    "text": "like prometheus or stackdriver or some other tool that is actually aggregating these metrics over time because uh the",
    "start": "1824640",
    "end": "1830640"
  },
  {
    "start": "1825000",
    "end": "1825000"
  },
  {
    "text": "previous one is just a snapshot which may not give you enough context so estio comes with a set of grafana",
    "start": "1830640",
    "end": "1836559"
  },
  {
    "text": "dashboards uh that are pre-populated with a bunch of useful metrics uh there is specifically an east god or",
    "start": "1836559",
    "end": "1844320"
  },
  {
    "text": "i think it's called the east geocontrol plane dashboard which has basically all the info that we think is important for",
    "start": "1844320",
    "end": "1850559"
  },
  {
    "text": "diagnosing the control plane uh that's really one of the first places you can look there's metrics for like the error rate",
    "start": "1850559",
    "end": "1857519"
  },
  {
    "text": "the number of pushes we're sending to envoy you know the cpu number of connections all that sort of stuff",
    "start": "1857519",
    "end": "1863600"
  },
  {
    "text": "so it's really useful to take a look at that and really understand what's going on there so you are familiar with that there's a bunch",
    "start": "1863600",
    "end": "1870559"
  },
  {
    "text": "of other metrics we expose as well that it would be way too long to discuss here so i've linked to this deep dive by",
    "start": "1870559",
    "end": "1876399"
  },
  {
    "text": "datadog which is extremely uh thorough guide of all the metrics that esto exposes",
    "start": "1876399",
    "end": "1882320"
  },
  {
    "text": "i highly recommend taking a look at that but i'll go over a couple uh important ones here so i mentioned",
    "start": "1882320",
    "end": "1888799"
  },
  {
    "text": "this earlier but the xds rejects is important to understand this configurations",
    "start": "1888799",
    "end": "1894480"
  },
  {
    "text": "if you have alerting i highly recommend putting an alert on this so that you understand when something is going wrong and you can immediately go fix it",
    "start": "1894480",
    "end": "1901919"
  },
  {
    "text": "another one is this metric proxy convergence time this is the time between when estudi",
    "start": "1901919",
    "end": "1907600"
  },
  {
    "text": "gets an update from kubernetes and that update is pushed to the proxies",
    "start": "1907600",
    "end": "1913120"
  },
  {
    "text": "so if this is very high then you may see strange issues like my proxy is sending connections to like",
    "start": "1913120",
    "end": "1920720"
  },
  {
    "text": "old ip addresses that are no longer around or it's not sending to new ones or it's not doing this new routing rule",
    "start": "1920720",
    "end": "1926880"
  },
  {
    "text": "i applied things like that so typically this would be very very quick like 100 milliseconds maybe a second in a larger mesh",
    "start": "1926880",
    "end": "1933360"
  },
  {
    "text": "if you start seeing things like five seconds ten seconds even a minute uh it may indicate something's wrong or",
    "start": "1933360",
    "end": "1938880"
  },
  {
    "text": "you have a very underscaled control plane and then we also have one that spots the number of clients so this can be useful",
    "start": "1938880",
    "end": "1945120"
  },
  {
    "text": "if you have uh to detect like an imbalanced load and we'll talk about that more in i think the next slide or",
    "start": "1945120",
    "end": "1952000"
  },
  {
    "text": "soon i know soon so one other thing this is probably like the last line",
    "start": "1952000",
    "end": "1957440"
  },
  {
    "start": "1953000",
    "end": "1953000"
  },
  {
    "text": "of defense but if you're having performance issues both the control plane and data plane support profiling",
    "start": "1957440",
    "end": "1963200"
  },
  {
    "text": "and if you're not familiar with this basically it captures where memory and cpu is spent and it",
    "start": "1963200",
    "end": "1969840"
  },
  {
    "text": "can produce these nice graphs here so this is highly recommended if you're having issues and you can even use this on your own",
    "start": "1969840",
    "end": "1976080"
  },
  {
    "text": "applications if you're using go or something else that supports this at the very least i mean this is very",
    "start": "1976080",
    "end": "1981919"
  },
  {
    "text": "internal stuff really but at the very least if you're having issues with performance and you post an issue on github with a profile it is much much easier",
    "start": "1981919",
    "end": "1989600"
  },
  {
    "text": "for people to diagnose and makes gets a movement there so uh yeah can you go next slide yeah yeah",
    "start": "1989600",
    "end": "1997760"
  },
  {
    "start": "1996000",
    "end": "1996000"
  },
  {
    "text": "so easter cuddle provides also cluster-wide uh debugging so",
    "start": "1997760",
    "end": "2003039"
  },
  {
    "text": "we can see like proxy status uh we'll show a list of all the connected uh proxies and their status of each of",
    "start": "2003039",
    "end": "2009519"
  },
  {
    "text": "the resources um so i don't think we mentioned like cvs lbs eds and rds those are the types in envoy so like the",
    "start": "2009519",
    "end": "2016640"
  },
  {
    "text": "c stands for cluster l's listener e's endpoints r's routes that mirage discussed previously",
    "start": "2016640",
    "end": "2022720"
  },
  {
    "text": "and so synced basically means that we've sent the config envoy and it's acknowledged that it received it you may also see something like not sent",
    "start": "2022720",
    "end": "2029919"
  },
  {
    "text": "um not sent generally doesn't indicate an error so it's very feasible for an egress gateway to not",
    "start": "2029919",
    "end": "2035919"
  },
  {
    "text": "have any routes if we haven't defined any virtual services uh that will create those routes uh but",
    "start": "2035919",
    "end": "2042240"
  },
  {
    "text": "if you may see something like not synced if you see not synced that means that we've sent andrew the config but it hasn't acknowledged it",
    "start": "2042240",
    "end": "2048320"
  },
  {
    "text": "so onbae may be overloaded it may have issues something like that so it's kind",
    "start": "2048320",
    "end": "2053440"
  },
  {
    "text": "of an indicator that you should be looking into something we also have a way to check for a",
    "start": "2053440",
    "end": "2059599"
  },
  {
    "text": "specific config has been distributed uh with this experimental command easter cuddle wait",
    "start": "2059599",
    "end": "2065118"
  },
  {
    "text": "and so you can say apply virtual service and then run the wait command and then not send traffic until it's actually",
    "start": "2065119",
    "end": "2070158"
  },
  {
    "text": "been distributed um we also have an analyzer and so this",
    "start": "2070159",
    "end": "2077040"
  },
  {
    "start": "2073000",
    "end": "2073000"
  },
  {
    "text": "is really i think the first line of defense because it's so easy and can give uh you know very obvious fixes for",
    "start": "2077040",
    "end": "2082480"
  },
  {
    "text": "problems you're seeing uh you basically run easter colorado analyze uh dash a means all name spaces",
    "start": "2082480",
    "end": "2087839"
  },
  {
    "text": "so you'll analyze all the namespaces and you can see common issues like i'm creating a virtual service but it's",
    "start": "2087839",
    "end": "2093440"
  },
  {
    "text": "referencing a gateway that doesn't exist or other you know cross-resource issues",
    "start": "2093440",
    "end": "2099520"
  },
  {
    "text": "so when you apply a config it is validated but it's just uh validated against the schema in in",
    "start": "2099520",
    "end": "2105119"
  },
  {
    "text": "isolation so analyze can actually take your running kubernetes cluster and analyze",
    "start": "2105119",
    "end": "2110640"
  },
  {
    "text": "all the resources and compare them so it's more of a global analysis whereas the config validation is",
    "start": "2110640",
    "end": "2116000"
  },
  {
    "text": "is very isolated and so we're trying to add basically anytime we see people running into issues we try and add",
    "start": "2116000",
    "end": "2121200"
  },
  {
    "text": "analyzers here so it's kind of like the shared knowledge base we also have an experimental feature to",
    "start": "2121200",
    "end": "2127520"
  },
  {
    "text": "start writing this into the status of objects which can be useful for other tooling or just uh ease of ease of use",
    "start": "2127520",
    "end": "2134880"
  },
  {
    "text": "so we encourage you to try that out and give us feedback yeah john just a quick check we are at",
    "start": "2134880",
    "end": "2142079"
  },
  {
    "text": "40 minute mark so all right i will go extra fast no i think you're going at the right",
    "start": "2142079",
    "end": "2147599"
  },
  {
    "text": "place just want to be aware of the timing right uh yeah so easter d",
    "start": "2147599",
    "end": "2155040"
  },
  {
    "text": "can require a fair amount of scale depending on your cluster size unfortunately it's actually it's fairly",
    "start": "2155040",
    "end": "2161520"
  },
  {
    "text": "easy to scale you can scale it horizontally or vertically and it will you know it will",
    "start": "2161520",
    "end": "2166560"
  },
  {
    "text": "work just as well it's it's pretty important to make sure that you don't have the cpu",
    "start": "2166560",
    "end": "2172000"
  },
  {
    "text": "limit being hit i've seen before like the it's pegged at the high cpu limit and",
    "start": "2172000",
    "end": "2177040"
  },
  {
    "text": "then that leads to slow updates which leads to weird failures downstream uh so make sure that it has enough cpu",
    "start": "2177040",
    "end": "2182880"
  },
  {
    "text": "if it doesn't then raise the limit or scale out and i also highly recommend if possible",
    "start": "2182880",
    "end": "2188160"
  },
  {
    "text": "using the latest version because we've had substantial performance improvements so a lot of issues i've",
    "start": "2188160",
    "end": "2193599"
  },
  {
    "text": "seen could have been fixed just by upgrading",
    "start": "2193599",
    "end": "2197599"
  },
  {
    "start": "2198000",
    "end": "2198000"
  },
  {
    "text": "and basically there's three factors that impact east 2d scaling uh the first one is the size of the",
    "start": "2198720",
    "end": "2204160"
  },
  {
    "text": "config we generate so for every envoy proxy we generally can say about you know the endpoints routes listeners",
    "start": "2204160",
    "end": "2209839"
  },
  {
    "text": "and so as it grows larger and larger it's more and more expensive to generate and this is impacted by the number of",
    "start": "2209839",
    "end": "2215520"
  },
  {
    "text": "resources and services because you know for each virtual service we generate these routes for each service we generate all these",
    "start": "2215520",
    "end": "2220640"
  },
  {
    "text": "different clusters etc and so if you do have a large scale you",
    "start": "2220640",
    "end": "2225760"
  },
  {
    "text": "should really consider using the sidecar which can scope down the resources so you can say things like this pod only",
    "start": "2225760",
    "end": "2232400"
  },
  {
    "text": "needs to access other services in this the same name space and so don't bother sending config",
    "start": "2232400",
    "end": "2237760"
  },
  {
    "text": "for the entire mesh which may be huge if you have a large cluster it's it's almost uh required",
    "start": "2237760",
    "end": "2244320"
  },
  {
    "text": "uh the other one is the rate of change if you have new services every second then we're pushing updates every second which is uh extremely expensive",
    "start": "2244320",
    "end": "2252160"
  },
  {
    "text": "uh but adding new endpoints is much cheaper because we have an optimized code path there so",
    "start": "2252160",
    "end": "2257440"
  },
  {
    "text": "in a normal steady state production cluster you may just have end points coming up and down from auto scaling but no actual configuration pushes and",
    "start": "2257440",
    "end": "2264880"
  },
  {
    "text": "so one thing that this actually impacts is that oftentimes people's development clusters require far higher scale on easter d but",
    "start": "2264880",
    "end": "2272640"
  },
  {
    "text": "the production cluster is actually very small so that's one thing to watch out for and the other thing is just the number of",
    "start": "2272640",
    "end": "2278079"
  },
  {
    "text": "proxies as there's more proxies there's more config to generate more things to connect to so that obviously impacts the scale as",
    "start": "2278079",
    "end": "2284240"
  },
  {
    "start": "2284000",
    "end": "2284000"
  },
  {
    "text": "well um so i briefly mentioned this one issue we see people having is an unbalanced",
    "start": "2284240",
    "end": "2289599"
  },
  {
    "text": "load to use to od this is because the connection is this long live grpc stream which makes load balancing",
    "start": "2289599",
    "end": "2294960"
  },
  {
    "text": "fairly challenging because if you have all the connections to a single pod and then a new instance comes up",
    "start": "2294960",
    "end": "2300400"
  },
  {
    "text": "nothing's connecting to the new one uh so we do have some slow rebalancing because of the max connection age",
    "start": "2300400",
    "end": "2306320"
  },
  {
    "text": "uh but generally like this may cause issues where we scale up a new pod and then the horizontal pedal scaler",
    "start": "2306320",
    "end": "2312400"
  },
  {
    "text": "realizes it's not getting much load so it removes it and then it adds it again and it just kind of this endless",
    "start": "2312400",
    "end": "2317680"
  },
  {
    "text": "cycle so we recommend having at least two replicas to alleviate this and that's just a good practice in general for high",
    "start": "2317680",
    "end": "2324839"
  },
  {
    "text": "availability yeah that's great john uh i think i can",
    "start": "2324839",
    "end": "2330480"
  },
  {
    "start": "2330000",
    "end": "2330000"
  },
  {
    "text": "do this in the remaining ones is that okay yeah all right that was great so one of",
    "start": "2330480",
    "end": "2336320"
  },
  {
    "text": "the common problems that we see is uh users struggle with understanding mutual tls and",
    "start": "2336320",
    "end": "2341599"
  },
  {
    "text": "how does the client and the server relate to each other specifically to these configuration objects so here is a summary of what it is so",
    "start": "2341599",
    "end": "2348480"
  },
  {
    "text": "destination rule is always affecting the client side it tells you what type of traffic is sent",
    "start": "2348480",
    "end": "2353760"
  },
  {
    "text": "and peer authentication tells what the server will accept so there are three modes here a",
    "start": "2353760",
    "end": "2358960"
  },
  {
    "text": "destination rule disable means the client will send plain text this is normal only for services outside",
    "start": "2358960",
    "end": "2365359"
  },
  {
    "text": "the mesh in the services within the mesh or workloads in your cluster you want to make sure you have",
    "start": "2365359",
    "end": "2370640"
  },
  {
    "text": "encrypted traffic because of service because of adding the sitecar proxy right uh the second mode is istio mutual in",
    "start": "2370640",
    "end": "2376720"
  },
  {
    "text": "which the sidecar proxy will send mutual tls traffic and upgrade the connection to a tls connection",
    "start": "2376720",
    "end": "2382960"
  },
  {
    "text": "automatically and the other modes are simple and mutual which can be used to originate tls the difference between the istio mutual and",
    "start": "2382960",
    "end": "2389520"
  },
  {
    "text": "simple mutual is in history mutual the certificates the keys are managed automatically by the h2 control plane",
    "start": "2389520",
    "end": "2395520"
  },
  {
    "text": "in the pure authentication similar modes are if it is disabled the server will only accept plain text",
    "start": "2395520",
    "end": "2401359"
  },
  {
    "text": "if it is strict the server will accept only mutual tls and per way server it can accept mtls or plain text so it's critical to",
    "start": "2401359",
    "end": "2409280"
  },
  {
    "text": "understand what you're trying to achieve here so if you're trying to do a migration then you might be able to do permissive",
    "start": "2409280",
    "end": "2415200"
  },
  {
    "text": "but you really want to lock down your production environment you might want strict so the next thing is how all of this",
    "start": "2415200",
    "end": "2421839"
  },
  {
    "start": "2421000",
    "end": "2421000"
  },
  {
    "text": "interacts and works with auto mtls so auto mtls was a feature that was added in",
    "start": "2421839",
    "end": "2427440"
  },
  {
    "text": "uh in the last two releases to enable users to migrate easily because you were seeing problems",
    "start": "2427440",
    "end": "2432800"
  },
  {
    "text": "when users turned on mutual dls sometimes the traffic worked because the client or the server had missed",
    "start": "2432800",
    "end": "2438160"
  },
  {
    "text": "configurations so with auto dls this is how we decide what traffic to send",
    "start": "2438160",
    "end": "2444079"
  },
  {
    "text": "if there's a destination rule then the destination rule configures that the destination configuration is",
    "start": "2444079",
    "end": "2449760"
  },
  {
    "text": "always used the second thing is if the server has a sidecar and the peer authentication allows mutual tls",
    "start": "2449760",
    "end": "2456000"
  },
  {
    "text": "then we send mutual dns peer authentication is hierarchical so if it",
    "start": "2456000",
    "end": "2461599"
  },
  {
    "text": "can adopt it can if it doesn't have a specific peer authentication to the workload it might be that the global one is used",
    "start": "2461599",
    "end": "2468640"
  },
  {
    "text": "and the last is if there is if none of those rules match we'll send plain text traffic so this helps you in migration but at",
    "start": "2468640",
    "end": "2476000"
  },
  {
    "text": "the same time it can mean that sometimes the traffic is plain text if the first two rules",
    "start": "2476000",
    "end": "2482000"
  },
  {
    "text": "don't match so if you're using auto mtls you have to be careful on what you're trying to enforce as an organizational policy",
    "start": "2482000",
    "end": "2489040"
  },
  {
    "start": "2489000",
    "end": "2489000"
  },
  {
    "text": "so this is the troubleshooting guide that uh john and i were talking about in my opinion this is how you should",
    "start": "2489040",
    "end": "2494800"
  },
  {
    "text": "start when you see issues in production first like john said use sqc to analyze it's a great tool to understand",
    "start": "2494800",
    "end": "2500880"
  },
  {
    "text": "holistically if there are configuration issues which don't where the resources don't work",
    "start": "2500880",
    "end": "2506240"
  },
  {
    "text": "well with each other they are conflicting then look at istio ctl proxy status this gives you a quick",
    "start": "2506240",
    "end": "2511599"
  },
  {
    "text": "view of if any of the sidecar proxies have not received configuration or have not acknowledged that",
    "start": "2511599",
    "end": "2516720"
  },
  {
    "text": "the recent configuration has been received the third is study logs this gives you if there are common errors",
    "start": "2516720",
    "end": "2522000"
  },
  {
    "text": "or if study in the control plane is not behaving correctly so at this point these three things tell",
    "start": "2522000",
    "end": "2528400"
  },
  {
    "text": "you about common configurations or issues with your control plane the fourth one is looking at access logs",
    "start": "2528400",
    "end": "2535280"
  },
  {
    "text": "so you're looking now at the site car access logs to understand if the traffic is failing",
    "start": "2535280",
    "end": "2540400"
  },
  {
    "text": "why the traffic is failing looking at the response flags like i was saying before gives you an idea about the",
    "start": "2540400",
    "end": "2545760"
  },
  {
    "text": "errors the fifth step for me is always looking at onward configuration and that's why we went into details about",
    "start": "2545760",
    "end": "2552400"
  },
  {
    "text": "how to understand the onboard configuration architecture this is the source of truth for",
    "start": "2552400",
    "end": "2559520"
  },
  {
    "text": "actually understanding what is going to happen to your traffic because eventually istio is responsible for",
    "start": "2559520",
    "end": "2564560"
  },
  {
    "text": "configuring onward and if you look at the onward configuration and the standard you can be sure of what will happen to",
    "start": "2564560",
    "end": "2570560"
  },
  {
    "text": "your traffic the next is looking at stod metrics some of the metrics that john talked about giving you a lot of information about errors",
    "start": "2570560",
    "end": "2577359"
  },
  {
    "text": "and why you're seeing slowness in your control pin responsiveness the seventh is for me turning on debug",
    "start": "2577359",
    "end": "2583200"
  },
  {
    "text": "logging you can turn on debug logging at the control plane or the envoy if you're not able to understand what's going on and the last tool in your",
    "start": "2583200",
    "end": "2589760"
  },
  {
    "text": "toolkit is profiling if you don't need to do this yourself if you have the profile and like john said",
    "start": "2589760",
    "end": "2596000"
  },
  {
    "text": "if you create a github issue we will help you diagnose it but this is the last thing that normally",
    "start": "2596000",
    "end": "2601119"
  },
  {
    "text": "when we can't make sense of it we ask because this can give you some important things around",
    "start": "2601119",
    "end": "2606800"
  },
  {
    "text": "if so for example your study is logged in production and you are having some races around new",
    "start": "2606800",
    "end": "2612240"
  },
  {
    "text": "texas that we hold so this is the summary of all the debugging capabilities that we have",
    "start": "2612240",
    "end": "2618560"
  },
  {
    "text": "the last slide here is about having a production steel installation so normally users are trying sto by",
    "start": "2618560",
    "end": "2626079"
  },
  {
    "text": "installing a demo profile some of these settings are already in the production profile but john and i we just wanted to",
    "start": "2626079",
    "end": "2632880"
  },
  {
    "text": "highlight these things so that when you use student production you are aware",
    "start": "2632880",
    "end": "2638079"
  },
  {
    "text": "that these are the changes that you should have or these are the things that you should enable so you can run and diagnose",
    "start": "2638079",
    "end": "2643200"
  },
  {
    "text": "istio successful in production first is to making sure you're gathering metrics and logs john pointed to",
    "start": "2643200",
    "end": "2650720"
  },
  {
    "text": "the grafana dashboard and the datadog blog so always make sure you are collecting",
    "start": "2650720",
    "end": "2656640"
  },
  {
    "text": "those metrics looking at those time series data and have alerts on the important metrics i highly recommend enabling access logs",
    "start": "2656640",
    "end": "2663680"
  },
  {
    "text": "understanding your outboard traffic control is super critical whether you want to control access",
    "start": "2663680",
    "end": "2670640"
  },
  {
    "text": "and limit what external services can you talk to do you want to use the registry only",
    "start": "2670640",
    "end": "2676000"
  },
  {
    "text": "option or do you want to use an egress proxy in production my recommendation is to always use an egress gateway or a proxy",
    "start": "2676000",
    "end": "2682480"
  },
  {
    "text": "for correct authorization enforcement a strict mtls instead of auto is another",
    "start": "2682480",
    "end": "2688880"
  },
  {
    "text": "one of those things you can use auto for migration but if you your prime objective is to ensure all traffic",
    "start": "2688880",
    "end": "2694960"
  },
  {
    "text": "is encrypted you should enable strict mtls you have at least two sqd parts running you can",
    "start": "2694960",
    "end": "2701359"
  },
  {
    "text": "configure hpa if you start with two study control plot",
    "start": "2701359",
    "end": "2706800"
  },
  {
    "text": "pods you always have some resiliency at the same time you might get away with the problem of pods coming up and down and having a",
    "start": "2706800",
    "end": "2713359"
  },
  {
    "text": "massively misbalanced uh load for this duties i also recommend configuring pod",
    "start": "2713359",
    "end": "2719440"
  },
  {
    "text": "anti-affinity so that if one of the nodes goes down your sqd pod is still available",
    "start": "2719440",
    "end": "2725119"
  },
  {
    "text": "sd out of the box will create a self-signed root certificate to bootstrap the system",
    "start": "2725119",
    "end": "2730640"
  },
  {
    "text": "in production you want to make sure you have a certificate which is signed by a trusted ca whatever ca you are using the ingress",
    "start": "2730640",
    "end": "2739040"
  },
  {
    "text": "sports that are by default configured are very generous and there are a lot of english sports that are open",
    "start": "2739040",
    "end": "2744160"
  },
  {
    "text": "depending on your organization policies you should make sure you have only the ports that you need for external traffic",
    "start": "2744160",
    "end": "2749920"
  },
  {
    "text": "access i recommend using site car injection the automatic sidecar injection instead of",
    "start": "2749920",
    "end": "2755040"
  },
  {
    "text": "manual this is again governed by your organizational policies where you can say i want all of the",
    "start": "2755040",
    "end": "2760160"
  },
  {
    "text": "pods or all of these name spaces to have pods with sidecar so they cannot be any",
    "start": "2760160",
    "end": "2766000"
  },
  {
    "text": "policy escapes and the last is if you are relying on prometheus and jaeger for tracing and telemetry",
    "start": "2766000",
    "end": "2771599"
  },
  {
    "text": "you need to have a production grade installation what comes with istio is a demo version and not from",
    "start": "2771599",
    "end": "2777359"
  },
  {
    "text": "production grade so we all we have issues sometimes users coming to us and saying how to manage and control prometheus now",
    "start": "2777359",
    "end": "2784079"
  },
  {
    "text": "we give you a demo version but the production ready version has to be maintained by you look at the best practices for how to do",
    "start": "2784079",
    "end": "2790640"
  },
  {
    "text": "that so with that i think we are at the end of our presentation so we are going to",
    "start": "2790640",
    "end": "2796160"
  },
  {
    "text": "move on to uh questions do we have any jerry",
    "start": "2796160",
    "end": "2802240"
  },
  {
    "text": "yes we do um sadness would like to know what are the common idso and envoy issues observed in",
    "start": "2802240",
    "end": "2809200"
  },
  {
    "text": "running clusters sorry can you repeat that again um",
    "start": "2809200",
    "end": "2814880"
  },
  {
    "text": "it's sad malik wants to know what are the common isto and envoy issues observed in",
    "start": "2814880",
    "end": "2820319"
  },
  {
    "text": "running clusters john you want to go for it yeah i i'd",
    "start": "2820319",
    "end": "2826000"
  },
  {
    "text": "say the one of the most common i see is uh misconfigurations where",
    "start": "2826000",
    "end": "2831920"
  },
  {
    "text": "you are configuring you know a set of gateways virtual services destination rules and you expect it to do one thing",
    "start": "2831920",
    "end": "2837839"
  },
  {
    "text": "but it's actually doing something slightly different so this is hopefully getting better over",
    "start": "2837839",
    "end": "2843200"
  },
  {
    "text": "time as we improve the documentation and apis but it's still fairly common and so this",
    "start": "2843200",
    "end": "2848480"
  },
  {
    "text": "is where debugging the envoy configuration can be invaluable uh if you're able to actually see like",
    "start": "2848480",
    "end": "2855920"
  },
  {
    "text": "the envoy configuration is the lowest level so oftentimes you can quickly see like oh this is routing just the completely",
    "start": "2855920",
    "end": "2861760"
  },
  {
    "text": "wrong place and then figure out where uh the disconnect happened uh you could also use ethereum cuddle",
    "start": "2861760",
    "end": "2867680"
  },
  {
    "text": "analyze if it's a semantic issue like referencing something that doesn't exist uh so to me that's that's really the",
    "start": "2867680",
    "end": "2873520"
  },
  {
    "text": "most common is it's misconfigurations um i don't know any other ones mirage",
    "start": "2873520",
    "end": "2880079"
  },
  {
    "text": "uh no i was going to say the same to istiocital analyze and misconfigurations and looking at the onward configuration uh the other",
    "start": "2880079",
    "end": "2887520"
  },
  {
    "text": "thing which i've seen is the load that onward that jar talked about so depending on your production load if your stud is not able",
    "start": "2887520",
    "end": "2894640"
  },
  {
    "text": "to handle it you will see some slowness or you might see failures so it's good to keep a track on",
    "start": "2894640",
    "end": "2900079"
  },
  {
    "text": "those metrics and accordingly scale your control plane out",
    "start": "2900079",
    "end": "2905279"
  },
  {
    "text": "is there any other question jerry uh yes uh super uh super corn says",
    "start": "2908960",
    "end": "2915200"
  },
  {
    "text": "do i need to enable some configuration in istio before i can access control z i had tried",
    "start": "2915200",
    "end": "2922240"
  },
  {
    "text": "to access controls but it seems to have an error on startup uh that's a",
    "start": "2922240",
    "end": "2928880"
  },
  {
    "text": "good question as far as i know you don't need a special option to enable it it is enabled by",
    "start": "2928880",
    "end": "2933920"
  },
  {
    "text": "default but because it is relying on your cube config you might not have",
    "start": "2933920",
    "end": "2939200"
  },
  {
    "text": "the correct permissions given to you by your cluster admin to actually exec into a part and issue",
    "start": "2939200",
    "end": "2945040"
  },
  {
    "text": "those commands or port forward john is that correct yeah it should be there by default if you're having issues",
    "start": "2945040",
    "end": "2951040"
  },
  {
    "text": "uh feel free to open the issue on github and take a take a closer look",
    "start": "2951040",
    "end": "2957040"
  },
  {
    "text": "and another question we have here um are there any performance concerns on",
    "start": "2957040",
    "end": "2963280"
  },
  {
    "text": "enabling access logs in envoy really good question",
    "start": "2963280",
    "end": "2969040"
  },
  {
    "text": "i don't so personally i like access logs i think uh they have a lot of rich",
    "start": "2969040",
    "end": "2975040"
  },
  {
    "text": "information and compared to debug logging they are only based on the transactions",
    "start": "2975040",
    "end": "2981040"
  },
  {
    "text": "secondly envoy handles writing to files as in this case we will be doing to",
    "start": "2981040",
    "end": "2986480"
  },
  {
    "text": "standard out in a performant way it does not block the worker threads it is handled on the master",
    "start": "2986480",
    "end": "2992400"
  },
  {
    "text": "on the primary thread itself so i don't see a lot of issues but if",
    "start": "2992400",
    "end": "2999200"
  },
  {
    "text": "you are seeing some specific performance issues we'll be interested in diagnosing uh",
    "start": "2999200",
    "end": "3004640"
  },
  {
    "text": "john do you have you seen them uh yeah i mean there's definitely some overhead as with any sort of telemetry",
    "start": "3004640",
    "end": "3010800"
  },
  {
    "text": "feature um for most people it's worth it if you have an extremely high performance",
    "start": "3010800",
    "end": "3015839"
  },
  {
    "text": "application in that case it may not be but for for most cases it's usually worth it but you know",
    "start": "3015839",
    "end": "3021119"
  },
  {
    "text": "telemetry is always a trade-off with performance yeah and you can always scope it down to a namespace if that",
    "start": "3021119",
    "end": "3026880"
  },
  {
    "text": "if it comes to it but i would recommend turning it on globally and diagnosing and seeing if you actually have problems",
    "start": "3026880",
    "end": "3034318"
  },
  {
    "text": "okay and jindong lee wants to know is istio agent running in its own container",
    "start": "3034559",
    "end": "3041599"
  },
  {
    "text": "yeah so there's the estroproxy sidecar which is a an image and container that",
    "start": "3041599",
    "end": "3047040"
  },
  {
    "text": "runs alongside every pod this contains both the estro agent and envoy in the same container",
    "start": "3047040",
    "end": "3052720"
  },
  {
    "text": "and so the two different processes and the easter agent starts up first and then it uh spins off the envoy process",
    "start": "3052720",
    "end": "3060400"
  },
  {
    "text": "is there a simple way to configure access for logging error only for for log all",
    "start": "3060400",
    "end": "3066880"
  },
  {
    "text": "four five but not two hundred uh that's a good question there's no simple way uh it is possible i think",
    "start": "3066880",
    "end": "3073920"
  },
  {
    "text": "through envoy filters um i believe that we're working on adding like a more native",
    "start": "3073920",
    "end": "3078960"
  },
  {
    "text": "telemetry and access logging api that hopefully we'll be able to do this um we can probably point to i think we",
    "start": "3078960",
    "end": "3085839"
  },
  {
    "text": "have an example somewhere of doing this i can see if we can add this to uh niraj's github where he posted the",
    "start": "3085839",
    "end": "3092400"
  },
  {
    "text": "samples for the access logs we showed here yeah exactly i mean we will make it better in the",
    "start": "3092400",
    "end": "3097520"
  },
  {
    "text": "upcoming releases currently you are stuck with onward filter",
    "start": "3097520",
    "end": "3102240"
  },
  {
    "text": "and how can you go about debugging cni issues ah that's a really good question",
    "start": "3103200",
    "end": "3110319"
  },
  {
    "text": "uh let's see they are for me really really tricky to do and depending",
    "start": "3110319",
    "end": "3116559"
  },
  {
    "text": "on your cni provider what you're using in your platform it can be even more tricky uh the",
    "start": "3116559",
    "end": "3122559"
  },
  {
    "text": "the thing that i have used is logging looking at the cnr daemon set logging to see what's happening",
    "start": "3122559",
    "end": "3128400"
  },
  {
    "text": "that's the first level of defense most of the time when there are cni issues you will see that",
    "start": "3128400",
    "end": "3134400"
  },
  {
    "text": "the pod will not even come up because you will have uh healthy failures as far as i know",
    "start": "3134400",
    "end": "3139760"
  },
  {
    "text": "so if you have cni enabled and if you see healthy issues that's a good indication that there's",
    "start": "3139760",
    "end": "3146160"
  },
  {
    "text": "something uh there's a mismatch in the setup itself which is not enabling cni to do its job",
    "start": "3146160",
    "end": "3152000"
  },
  {
    "text": "is there anything else john that we can do in cni i don't remember if there are metrics that we expose",
    "start": "3152000",
    "end": "3157599"
  },
  {
    "text": "uh no right now it's it's not the most uh the greatest experience but we're working on promoting cni to beta",
    "start": "3157599",
    "end": "3163440"
  },
  {
    "text": "and most of that work is around supportability and debugging absolutely this will improve surely and",
    "start": "3163440",
    "end": "3169920"
  },
  {
    "text": "if you if whoever asked this question if you are seeing issues and you're not able to diagnose them please treat a",
    "start": "3169920",
    "end": "3175280"
  },
  {
    "text": "github issue so we can add it in our list of things to make cni beta and make it more difficult debuggable",
    "start": "3175280",
    "end": "3183280"
  },
  {
    "text": "and john this one's for you specifically what justifies getting headless services into",
    "start": "3183359",
    "end": "3189040"
  },
  {
    "text": "service mesh um i'm not sure i 100 understand the",
    "start": "3189040",
    "end": "3196880"
  },
  {
    "text": "question uh had the services should be supported uh by istio we had did have some issues",
    "start": "3196880",
    "end": "3202640"
  },
  {
    "text": "in older versions but on newer versions that should mostly be resolved um i'm not sure if that was the question",
    "start": "3202640",
    "end": "3208880"
  },
  {
    "text": "or something else i think john they're asking what's the benefit of adding a stateless service to them",
    "start": "3208880",
    "end": "3214160"
  },
  {
    "text": "oh i see yeah i'd say it's um you know the benefits for headless services are the same as other ones we get telemetry",
    "start": "3214160",
    "end": "3221040"
  },
  {
    "text": "routing policies out of the box and you know that's useful for stateless and stateful",
    "start": "3221040",
    "end": "3226480"
  },
  {
    "text": "services so the benefits really apply applied to both exactly and",
    "start": "3226480",
    "end": "3231680"
  },
  {
    "text": "the difference is primarily in most of the stateless services the application is taking care of picking the",
    "start": "3231680",
    "end": "3236800"
  },
  {
    "text": "destination and load balancing but you still want the network enforcement encryption and",
    "start": "3236800",
    "end": "3242160"
  },
  {
    "text": "policies that john talked about and the telemetry now here's another question we are",
    "start": "3242160",
    "end": "3249359"
  },
  {
    "text": "working in environments where we are stuck with older istio versions and legacy services we need to make work",
    "start": "3249359",
    "end": "3256079"
  },
  {
    "text": "compatible's redirect rules often cause a lot of headaches sidecar ending up stealing traffic it cannot",
    "start": "3256079",
    "end": "3262839"
  },
  {
    "text": "handle when you also put in mtls into equation into equations they become very hectic",
    "start": "3262839",
    "end": "3270319"
  },
  {
    "text": "do you have any any check recipes or checklists on how to make containers or apps play",
    "start": "3270319",
    "end": "3276240"
  },
  {
    "text": "well with sidecar i think there is a bit of",
    "start": "3276240",
    "end": "3282799"
  },
  {
    "text": "fine tuning and learning here so we have annotations that you can add on part",
    "start": "3283200",
    "end": "3288480"
  },
  {
    "text": "level where you can specifically specify which ports to include or exclude including ip ranges",
    "start": "3288480",
    "end": "3295200"
  },
  {
    "text": "so you can use that if you a priority know that this protocol is legacy or this port",
    "start": "3295200",
    "end": "3301760"
  },
  {
    "text": "should not be handled by by the sidecar second thing is uh if you are not sure",
    "start": "3301760",
    "end": "3309280"
  },
  {
    "text": "about your environment which has a mix of legacy and non-legacy you can start without",
    "start": "3309280",
    "end": "3314720"
  },
  {
    "text": "mtls use auto mtls figure out if your traffic is actually working with",
    "start": "3314720",
    "end": "3321200"
  },
  {
    "text": "mtls enabled and then make it strict those are the two things which i have uh",
    "start": "3321200",
    "end": "3327200"
  },
  {
    "text": "helped with customers the third one can be protocol detection i normally recommend",
    "start": "3327200",
    "end": "3332960"
  },
  {
    "text": "labeling the services port prefixes with explicit protocols",
    "start": "3332960",
    "end": "3339200"
  },
  {
    "text": "and if you don't know your protocol or if you're unaware of you haven't done it it will",
    "start": "3339200",
    "end": "3344640"
  },
  {
    "text": "by default use tcp so in that case the traffic should work but you might",
    "start": "3344640",
    "end": "3350160"
  },
  {
    "text": "not get a lot of rich telemetry these are the three things that i've seen people have trouble with john you",
    "start": "3350160",
    "end": "3355680"
  },
  {
    "text": "have more or you can use as a migration tool i know that that pretty much covers it but i would say",
    "start": "3355680",
    "end": "3361520"
  },
  {
    "text": "definitely if you have a complicated environment where you can't just plop the studio in and things work which is the goal and we're hoping that",
    "start": "3361520",
    "end": "3368480"
  },
  {
    "text": "that does work uh i highly recommend incrementally adopting so you know add an ingress gateway add a",
    "start": "3368480",
    "end": "3374240"
  },
  {
    "text": "sidecar to some pods add sidecars other pods at npls et cetera don't just try and go in all",
    "start": "3374240",
    "end": "3380559"
  },
  {
    "text": "in with istio because there's a lot of stuff going on so you want to make sure that you're doing it slowly and making sure you're",
    "start": "3380559",
    "end": "3385760"
  },
  {
    "text": "understanding good question all right well",
    "start": "3385760",
    "end": "3391599"
  },
  {
    "text": "unfortunately we're at the top of the hour and we cannot take any more questions at this time",
    "start": "3391599",
    "end": "3396640"
  },
  {
    "text": "um i want to thank john niraj for a wonderful presentation and as i said before today's webinar and",
    "start": "3396640",
    "end": "3402559"
  },
  {
    "text": "slides will be available later today on the cncf website thank you all again for a great presentation and see you",
    "start": "3402559",
    "end": "3410000"
  },
  {
    "text": "next time thank you so much thank you thank you all",
    "start": "3410000",
    "end": "3419839"
  }
]