[
  {
    "text": "hello everyone uh welcome to our kubecon eu talk on unraveling the magic behind",
    "start": "0",
    "end": "5200"
  },
  {
    "text": "buildbacks um i'm samba kothari i'm an ml platform engineer at bloomberg",
    "start": "5200",
    "end": "10400"
  },
  {
    "text": "i'm also a toc member in the buildbacks project uh joining me today is natalie ariano",
    "start": "10400",
    "end": "16320"
  },
  {
    "text": "she is the team lead for the implementation team which maintains the life cycle which is the heart",
    "start": "16320",
    "end": "22800"
  },
  {
    "text": "of the buildbacks project that's what makes the magic possible",
    "start": "22800",
    "end": "28480"
  },
  {
    "text": "so what's on uh what's on our agenda for today uh we're starting with the basics we'll",
    "start": "28640",
    "end": "35120"
  },
  {
    "text": "start with what container images actually are uh giving a brief overview of the oci spec",
    "start": "35120",
    "end": "42399"
  },
  {
    "text": "we'll then talk about how container builds typically work we'll",
    "start": "42399",
    "end": "47680"
  },
  {
    "text": "take a look into two case studies one with docker build and one using basic shell scripts without any",
    "start": "47680",
    "end": "54640"
  },
  {
    "text": "root to demonstrate that container images can be really created from first principles",
    "start": "54640",
    "end": "61280"
  },
  {
    "text": "with basic utilities and then natalie will take over and talk about how build packs and lifecycle actually apply this",
    "start": "61280",
    "end": "67360"
  },
  {
    "text": "in practice and make complex applications possible through a really simple api",
    "start": "67360",
    "end": "75200"
  },
  {
    "text": "so let's get started what exactly are container images well like everything else in the unix",
    "start": "75520",
    "end": "82240"
  },
  {
    "text": "world they're just files more specifically structured files along with",
    "start": "82240",
    "end": "87680"
  },
  {
    "text": "just some configs described as json bobs",
    "start": "87680",
    "end": "92960"
  },
  {
    "text": "so to put that into perspective throughout the talk we'll be using this example application",
    "start": "94560",
    "end": "100560"
  },
  {
    "text": "uh it's a fairly simple python web application with some requirements for text that",
    "start": "100560",
    "end": "105680"
  },
  {
    "text": "describe the dependencies for the application and i also have here with me a simple",
    "start": "105680",
    "end": "110960"
  },
  {
    "text": "dockerfile uh which we'll be using for a first case study uh we're using dockerfile because i",
    "start": "110960",
    "end": "117920"
  },
  {
    "text": "assume that's what most people would be familiar with and it also helps us understand various concepts so",
    "start": "117920",
    "end": "125600"
  },
  {
    "text": "let's take a deeper look into this dockerfile it's fairly typical starts off with a base image that contains the",
    "start": "125600",
    "end": "131520"
  },
  {
    "text": "python interpreter sets the working directory for the rest of the commands to execute to slash up",
    "start": "131520",
    "end": "138319"
  },
  {
    "text": "explicitly copies out just the requirements requirements.txt file and then installs it using pip before",
    "start": "138319",
    "end": "146000"
  },
  {
    "text": "copying the rest of the source code if you're familiar with dockerfile and how caching works you know exactly why we're",
    "start": "146000",
    "end": "151760"
  },
  {
    "text": "doing this and then finally we're setting the launch entry point",
    "start": "151760",
    "end": "157120"
  },
  {
    "text": "uh so that python actually spins up a flash server and opens our web page",
    "start": "157120",
    "end": "164159"
  },
  {
    "text": "cool so if we try and build all of this uh we'll end up with something that looks like this",
    "start": "164640",
    "end": "171120"
  },
  {
    "text": "uh you might be wondering what so this is actually the output or cleaned up output from docker inspect",
    "start": "171120",
    "end": "177280"
  },
  {
    "text": "it's a large json block but what we'll be focusing on are these two things right",
    "start": "177280",
    "end": "182560"
  },
  {
    "text": "here first up the config blob and next the layers object",
    "start": "182560",
    "end": "189920"
  },
  {
    "text": "so what exactly is the config blob it's a set of key value prepares that describe",
    "start": "189920",
    "end": "197840"
  },
  {
    "text": "the runtime container environment so you'll think you'll see things here such as the user that's going to be",
    "start": "197840",
    "end": "204879"
  },
  {
    "text": "used for the runtime the base environment that needs to be set the entry point for your container and",
    "start": "204879",
    "end": "211920"
  },
  {
    "text": "the working directory now if you look closely you can map the actual docker file instructions to each",
    "start": "211920",
    "end": "218720"
  },
  {
    "text": "to some of these keys in the config map so typically when you're using these",
    "start": "218720",
    "end": "225120"
  },
  {
    "text": "instructions in docker files that's exactly what's happening they're just getting mapped to various",
    "start": "225120",
    "end": "230159"
  },
  {
    "text": "keys in the config block similarly if you take a look at the layers",
    "start": "230159",
    "end": "236159"
  },
  {
    "text": "blob you'll see a bunch of checksums so what exactly are",
    "start": "236159",
    "end": "241200"
  },
  {
    "text": "these layers they're just compressed tarpauls containing the file system bundle that will form",
    "start": "241200",
    "end": "246959"
  },
  {
    "text": "your container root fs so all of these blobs you see here are content addressable what that means is",
    "start": "246959",
    "end": "254159"
  },
  {
    "text": "that they can be located and they're named according to their content so",
    "start": "254159",
    "end": "259440"
  },
  {
    "text": "they're named based on the checksum of their entire tar if we were to pretty print",
    "start": "259440",
    "end": "265759"
  },
  {
    "text": "this whole set of layers we'll see that again we can map these",
    "start": "265759",
    "end": "272160"
  },
  {
    "text": "certain instructions that create layers from dockerfile back",
    "start": "272160",
    "end": "277680"
  },
  {
    "text": "to the layers that we ended up seeing in the layers blob so the first five layers that you see on",
    "start": "277680",
    "end": "283120"
  },
  {
    "text": "the top come from the from instruction then we have the work directory instruction copy run and so on",
    "start": "283120",
    "end": "290639"
  },
  {
    "text": "so put that to in order to put that into perspective here's what's actually happening in the container image",
    "start": "290639",
    "end": "296560"
  },
  {
    "text": "layerable layer if you use a tool like dive to inspect it so a work directory instructor",
    "start": "296560",
    "end": "302560"
  },
  {
    "text": "instruction actually created an empty folder called app or copy requirements for text file",
    "start": "302560",
    "end": "309440"
  },
  {
    "text": "actually created a new layer with just the requirements.txt file with something like a run instruction",
    "start": "309440",
    "end": "315759"
  },
  {
    "text": "something special happens docker will take a snapshot before and after",
    "start": "315759",
    "end": "321600"
  },
  {
    "text": "compare the changes in the file system and any changes are then put on that specific layer so this is also why",
    "start": "321600",
    "end": "328720"
  },
  {
    "text": "you'll often see run instructions with lots of lines of shell commands combined",
    "start": "328720",
    "end": "333919"
  },
  {
    "text": "together because they all end up in one layer although not that flexible the simple",
    "start": "333919",
    "end": "341120"
  },
  {
    "text": "assumption has like really worked out well for dockerfiles",
    "start": "341120",
    "end": "347919"
  },
  {
    "text": "so now that we know what layer and config objects are let's take a deeper dive into how docker actually uses them and",
    "start": "347919",
    "end": "355120"
  },
  {
    "text": "how docker build works before that i want to talk about a more primitive docker",
    "start": "355120",
    "end": "361919"
  },
  {
    "text": "command that we might not use as often to build the container images which is docker commit",
    "start": "361919",
    "end": "367759"
  },
  {
    "text": "so what docker commit allows us to do is to take a running container and create a container image out of the",
    "start": "367759",
    "end": "374960"
  },
  {
    "text": "state of that container and this is fairly powerful for example",
    "start": "374960",
    "end": "380639"
  },
  {
    "text": "let's start with the simple busy box image i'm going to make some file system changes to that container keep in mind",
    "start": "380639",
    "end": "386960"
  },
  {
    "text": "this is a running container this is not an image and then i'm going to use docker commit to actually convert the state of the",
    "start": "386960",
    "end": "393919"
  },
  {
    "text": "container into an image and just to make sure that this was actually working and the image persisted",
    "start": "393919",
    "end": "401120"
  },
  {
    "text": "my changes i'm going to use docker run again to cut the demo file",
    "start": "401120",
    "end": "408240"
  },
  {
    "text": "and this is uh this is the core principle behind docker build",
    "start": "408240",
    "end": "413360"
  },
  {
    "text": "so when you're seeing a dockerfile like this what and you're running it with docker build what docker is actually",
    "start": "413360",
    "end": "419280"
  },
  {
    "text": "doing behind the scenes in a very oversimplified manner is it's",
    "start": "419280",
    "end": "424319"
  },
  {
    "text": "actually creating various container images running the equivalent instruction inside that container",
    "start": "424319",
    "end": "430880"
  },
  {
    "text": "using docker commit to capture the changes and then then create intermediate",
    "start": "430880",
    "end": "436400"
  },
  {
    "text": "containers until uh container images until you get to the final output image that you want so if you've run",
    "start": "436400",
    "end": "443599"
  },
  {
    "text": "docker build you've you might have often seen these things like creating intermediate container for fd",
    "start": "443599",
    "end": "451039"
  },
  {
    "text": "or creating this image one three three so on so when you're running this what's",
    "start": "451039",
    "end": "456560"
  },
  {
    "text": "actually happening is docker is spinning up multiple containers running these instructions calling",
    "start": "456560",
    "end": "461840"
  },
  {
    "text": "comment on it and creating intermediate images that it then uses to run the next step",
    "start": "461840",
    "end": "466960"
  },
  {
    "text": "so that's how dockable essentially works but",
    "start": "466960",
    "end": "472639"
  },
  {
    "text": "just to recap container images are just a few file system layers and as tarballs",
    "start": "472639",
    "end": "478560"
  },
  {
    "text": "and a few set of json files config files and docker build isn't necessarily the",
    "start": "478560",
    "end": "483840"
  },
  {
    "text": "only way to construct these things so in order to really drive the point home",
    "start": "483840",
    "end": "490240"
  },
  {
    "text": "we're going to create a simple busy box image using nothing but basic shell",
    "start": "490240",
    "end": "495280"
  },
  {
    "text": "utilities with no docker daemon uh no road nothing",
    "start": "495280",
    "end": "501199"
  },
  {
    "text": "ah let's get started whoops",
    "start": "501199",
    "end": "507840"
  },
  {
    "text": "okay so i just have a handy assistant to help me type so that i don't make mistakes",
    "start": "509120",
    "end": "515680"
  },
  {
    "text": "but it's all running live so we have a simple function that downloads busybox from the internet and",
    "start": "515680",
    "end": "521919"
  },
  {
    "text": "creates a few sim links um so that we can actually use these commands in the output container image",
    "start": "521919",
    "end": "528320"
  },
  {
    "text": "we'll be creating it's nothing special just busy books from the internet and",
    "start": "528320",
    "end": "533600"
  },
  {
    "text": "symlinks to these commands then the first thing we need to do to",
    "start": "533600",
    "end": "538880"
  },
  {
    "text": "create the container image is follow the ocl layout specification",
    "start": "538880",
    "end": "544480"
  },
  {
    "text": "and that requires us when using it in folder mode to create certain directories with certain files",
    "start": "544480",
    "end": "550880"
  },
  {
    "text": "uh that are laid out in a content addressable fashion so the first thing we need to do is",
    "start": "550880",
    "end": "556880"
  },
  {
    "text": "create the directory that will contain our entire oc image in the ocean image layout",
    "start": "556880",
    "end": "562640"
  },
  {
    "text": "format then we'll actually create the layer so in this case i'll be starting up",
    "start": "562640",
    "end": "569279"
  },
  {
    "text": "this entire bin folder which will be the only layer in my output image",
    "start": "569279",
    "end": "575040"
  },
  {
    "text": "then uh just to make sure that everything's working correctly i'm just checking what the tower file actually contains and",
    "start": "575440",
    "end": "581279"
  },
  {
    "text": "we've got this is going to be our final uh file system that we see on the container image",
    "start": "581279",
    "end": "586959"
  },
  {
    "text": "we don't have a lot of layers we just have one layer with this entire set of files",
    "start": "586959",
    "end": "592560"
  },
  {
    "text": "and then as i mentioned earlier all these layers and everything in oci wall needs to be content addressable so what",
    "start": "592560",
    "end": "599040"
  },
  {
    "text": "i'm doing is calculating the checksums and the sizes for these layers so that we can actually name them",
    "start": "599040",
    "end": "606079"
  },
  {
    "text": "accordingly so just to make sure here's our original checksum",
    "start": "606079",
    "end": "612000"
  },
  {
    "text": "and then what we'll be doing is making a blobs directory where we'll be storing this output layer and renaming it so",
    "start": "612000",
    "end": "619760"
  },
  {
    "text": "that it fits the appropriate content addressable structure that oci expects",
    "start": "619760",
    "end": "625519"
  },
  {
    "text": "so now it's ready and it's named properly so let's next",
    "start": "625600",
    "end": "630800"
  },
  {
    "text": "check that the name actually matches the digest that we calculated and",
    "start": "630800",
    "end": "636640"
  },
  {
    "text": "everything looks fine then we'll be creating the config blob which will describe the runtime",
    "start": "636640",
    "end": "642320"
  },
  {
    "text": "properties of the container so let's do that so again the things that we need here",
    "start": "642320",
    "end": "648720"
  },
  {
    "text": "are the operating system and the architecture which we expect the final container image and the binaries within",
    "start": "648720",
    "end": "655360"
  },
  {
    "text": "to work on the base runtime environment in this case we're just setting the path",
    "start": "655360",
    "end": "660720"
  },
  {
    "text": "variable to include the slash bin directory so that all the executables that we've just put",
    "start": "660720",
    "end": "666480"
  },
  {
    "text": "in the image are available to us when we're trying out shell commands and i've also set the",
    "start": "666480",
    "end": "672480"
  },
  {
    "text": "working directory to the root directory finally i've also included the",
    "start": "672480",
    "end": "678720"
  },
  {
    "text": "root file system the the layers blob that i referred to earlier and i have",
    "start": "678720",
    "end": "685279"
  },
  {
    "text": "addressed the layer checksum here to make sure that we are capturing this layer correctly in the config block",
    "start": "685279",
    "end": "691839"
  },
  {
    "text": "so right now these are just uncompressed layer checksums that we've put here",
    "start": "691839",
    "end": "698560"
  },
  {
    "text": "next up again the config blob itself needs to be content addressable so we're just",
    "start": "698800",
    "end": "703920"
  },
  {
    "text": "running the same commands again to calculate the checksum and size and moving the config block to its",
    "start": "703920",
    "end": "709760"
  },
  {
    "text": "appropriate location in the blobs directory next there are a couple of other",
    "start": "709760",
    "end": "715680"
  },
  {
    "text": "concepts in the oci spec that are not directly exposed in docker uh the first one is the manifest",
    "start": "715680",
    "end": "723200"
  },
  {
    "text": "which makes which actually captures the content addressable location of the config",
    "start": "723200",
    "end": "729440"
  },
  {
    "text": "and compressed or uncompressed digests of the layers in this case i want to make things",
    "start": "729440",
    "end": "735839"
  },
  {
    "text": "easier for myself and i'm using uncompressed layers but typically when you're pushing out to the registry these would be compressed and the digest that",
    "start": "735839",
    "end": "742480"
  },
  {
    "text": "you see here will be different than the ones you have in your config and then i'm going to do the same thing",
    "start": "742480",
    "end": "748720"
  },
  {
    "text": "with the manifest make it content addressable and one last",
    "start": "748720",
    "end": "754480"
  },
  {
    "text": "important file that we have is the index so typically when you're pulling ubuntu",
    "start": "754480",
    "end": "761120"
  },
  {
    "text": "bionic or focal on different architectures or different operating systems docker pulls the right version",
    "start": "761120",
    "end": "767279"
  },
  {
    "text": "of that image the way it knows to pull the right version is something known as the oci index which contains pointers to",
    "start": "767279",
    "end": "774000"
  },
  {
    "text": "various different uh manifests for targeting different platforms and architectures",
    "start": "774000",
    "end": "779839"
  },
  {
    "text": "in this case i'm just building an image for my laptop and i'm not doing",
    "start": "779839",
    "end": "785040"
  },
  {
    "text": "a cross architecture build so that's all i need to specify and then finally we need one extra piece",
    "start": "785040",
    "end": "791920"
  },
  {
    "text": "of information to make it an appropriate oci directory and that's pretty much it we have a we",
    "start": "791920",
    "end": "798800"
  },
  {
    "text": "should have a working image i'm going to push it to a local registry uh using a nifty little tool called",
    "start": "798800",
    "end": "804560"
  },
  {
    "text": "crane so it just allows you to take an image in the ocl layout format and push it to a",
    "start": "804560",
    "end": "810480"
  },
  {
    "text": "registry i have a registry running locally and looks like everything worked fine",
    "start": "810480",
    "end": "817360"
  },
  {
    "text": "and just to make sure that this is actually working let's try and run it so i'm gonna docker on and pull the latest",
    "start": "817360",
    "end": "823440"
  },
  {
    "text": "version of the image that i just pushed up and try to exec into a shell",
    "start": "823440",
    "end": "828560"
  },
  {
    "text": "and it pulled the right thing looks like everything is working ls shows we have a bin directory with the",
    "start": "828560",
    "end": "835279"
  },
  {
    "text": "appropriate things if we check the environment it's set properly if i check the user it's set to",
    "start": "835279",
    "end": "842160"
  },
  {
    "text": "uid 0 because we didn't specify something and everything seems to be working fine",
    "start": "842160",
    "end": "848800"
  },
  {
    "text": "so this really goes to show that container images are nothing but just tarballs and",
    "start": "848800",
    "end": "855040"
  },
  {
    "text": "json files and you can construct them without root or any other magical tool like a docker",
    "start": "855040",
    "end": "860880"
  },
  {
    "text": "daemon and this is really powerful",
    "start": "860880",
    "end": "866160"
  },
  {
    "text": "and this is exactly what buildbacks uses to create container images without root",
    "start": "867040",
    "end": "873199"
  },
  {
    "text": "or without the need for a docker daemon so finally we have natalie who will be",
    "start": "873199",
    "end": "879279"
  },
  {
    "text": "explaining the most important bits of this talk which is how cloud native build packs",
    "start": "879279",
    "end": "884720"
  },
  {
    "text": "utilize these first principles to build container images over to you",
    "start": "884720",
    "end": "890480"
  },
  {
    "text": "thank you [Applause]",
    "start": "890480",
    "end": "900399"
  },
  {
    "text": "so we are now going to take a closer look at cloud native build packs",
    "start": "900399",
    "end": "906639"
  },
  {
    "text": "um before we can talk about a cloud-native build packs build from beginning to end we should",
    "start": "906639",
    "end": "913199"
  },
  {
    "text": "probably cover what a build pack actually is so very simply put",
    "start": "913199",
    "end": "919279"
  },
  {
    "text": "build packs are software that know how to analyze source code and determine the best way to build it they're actually a",
    "start": "919279",
    "end": "927040"
  },
  {
    "text": "collection of two binaries one called detect and one called build",
    "start": "927040",
    "end": "933600"
  },
  {
    "text": "they detect binary it serves to look at application source code and",
    "start": "933600",
    "end": "938880"
  },
  {
    "text": "determine if that build pack is actually relevant for the application so you might look for a particular file that",
    "start": "938880",
    "end": "945040"
  },
  {
    "text": "indicates that the application is written in a particular language that could be",
    "start": "945040",
    "end": "950959"
  },
  {
    "text": "what relates to the build pack the second binary is called build and",
    "start": "950959",
    "end": "956000"
  },
  {
    "text": "that is what actually does the work to turn source code into a",
    "start": "956000",
    "end": "961519"
  },
  {
    "text": "runnable application multiple build packs can work together",
    "start": "961519",
    "end": "967120"
  },
  {
    "text": "so you could have a collection of build packs that each provide one piece of the total steps that would",
    "start": "967120",
    "end": "974079"
  },
  {
    "text": "be necessary to create something that's runnable and this",
    "start": "974079",
    "end": "979680"
  },
  {
    "text": "allows great flexibility and interoperability between build packs",
    "start": "979680",
    "end": "985600"
  },
  {
    "text": "which we'll see so looking a little more carefully on",
    "start": "985600",
    "end": "991680"
  },
  {
    "text": "what build packs actually do this is you know tying back to what we saw with a dockerfile example buildpacks can",
    "start": "991680",
    "end": "999120"
  },
  {
    "text": "pull in dependencies they can run compilation if needed they can define processes to run when",
    "start": "999120",
    "end": "1006800"
  },
  {
    "text": "the application is started they can configure the environment among other things",
    "start": "1006800",
    "end": "1012399"
  },
  {
    "text": "and they can also generate a software bill of materials or s-bomb to describe",
    "start": "1012399",
    "end": "1017519"
  },
  {
    "text": "any dependencies that they've added",
    "start": "1017519",
    "end": "1021279"
  },
  {
    "text": "so build packs when they're doing all of these things they must follow the cnb specification",
    "start": "1022560",
    "end": "1028079"
  },
  {
    "text": "um which is not",
    "start": "1028079",
    "end": "1034159"
  },
  {
    "text": "loading there's actually a nice graphic okay there it is",
    "start": "1034240",
    "end": "1039839"
  },
  {
    "text": "so the cmv specification uh it it indicates what build packs are allowed",
    "start": "1040240",
    "end": "1046000"
  },
  {
    "text": "to do we've actually placed some pretty strict limitations um on the parts of the file system that",
    "start": "1046000",
    "end": "1054640"
  },
  {
    "text": "build packs are able to write to as sam alluded to build packs are",
    "start": "1054640",
    "end": "1059679"
  },
  {
    "text": "running entirely unprivileged so that's a limitation and this specification while limiting",
    "start": "1059679",
    "end": "1067039"
  },
  {
    "text": "allows for very powerful capabilities which we'll see",
    "start": "1067039",
    "end": "1072240"
  },
  {
    "text": "so we're just going to give um a brief tour of a buildpack's view of the world this is what a build pack might see in",
    "start": "1073280",
    "end": "1081039"
  },
  {
    "text": "the file system when the build is running we're assuming that the detect phase has already happened so the build",
    "start": "1081039",
    "end": "1087200"
  },
  {
    "text": "pack has opted into the build and now is performing its",
    "start": "1087200",
    "end": "1092240"
  },
  {
    "text": "its piece of the of the puzzle so we have three directories of interest",
    "start": "1092240",
    "end": "1097679"
  },
  {
    "text": "the first most importantly is the workspace which contains the application source code",
    "start": "1097679",
    "end": "1103600"
  },
  {
    "text": "there's als so a layers directory",
    "start": "1103600",
    "end": "1108720"
  },
  {
    "text": "that is designated for that build pack so this is some build pack id that's running right now and it has its own",
    "start": "1108720",
    "end": "1115280"
  },
  {
    "text": "child of the layers directory where it can make changes finally we have a platform directory",
    "start": "1115280",
    "end": "1120720"
  },
  {
    "text": "where platforms can provide their own specific configuration and build packs might know to look for things there",
    "start": "1120720",
    "end": "1128799"
  },
  {
    "text": "so build packs let's say they're providing an application dependency they would",
    "start": "1129120",
    "end": "1135440"
  },
  {
    "text": "provide that in a subdirectory of their layers directory so this is some layer which",
    "start": "1135440",
    "end": "1141919"
  },
  {
    "text": "contains some dependency and they've also provided a configuration file which is in tamil",
    "start": "1141919",
    "end": "1148240"
  },
  {
    "text": "format our project uses tomml across the board to provide",
    "start": "1148240",
    "end": "1153600"
  },
  {
    "text": "configuration at different points in the process so this some layer.tamul is an instruction for",
    "start": "1153600",
    "end": "1159840"
  },
  {
    "text": "the lifecycle about how the layer directory should be handled and we'll get into more examples of",
    "start": "1159840",
    "end": "1167120"
  },
  {
    "text": "different ways that the life cycle can handle these layers so what",
    "start": "1167120",
    "end": "1172880"
  },
  {
    "text": "goes into a layer directory we it's sort of open-ended build packs can",
    "start": "1172880",
    "end": "1178000"
  },
  {
    "text": "do whatever we they want but there are some conventions that build packs can follow that will make things easier if",
    "start": "1178000",
    "end": "1184559"
  },
  {
    "text": "they for example want to provide dependencies that will be available on the path or in the environment for",
    "start": "1184559",
    "end": "1190400"
  },
  {
    "text": "subsequent build packs so we'll give an example later of how these directories are special",
    "start": "1190400",
    "end": "1195600"
  },
  {
    "text": "and there are other things that build packs can do like set environment variables they can also",
    "start": "1195600",
    "end": "1202640"
  },
  {
    "text": "provide they can provide multiple layers they're not limited to just one",
    "start": "1202640",
    "end": "1208720"
  },
  {
    "text": "they can provide build time configuration and runtime configuration so we mentioned",
    "start": "1208720",
    "end": "1214960"
  },
  {
    "text": "the process to start at runtime a sort of unique feature of build packs",
    "start": "1214960",
    "end": "1221200"
  },
  {
    "text": "is that we allow multiple process types to be defined on an image so it could be convenient to have a single",
    "start": "1221200",
    "end": "1227679"
  },
  {
    "text": "image with you know two or more different processes to be started for example a web or a worker process in",
    "start": "1227679",
    "end": "1234799"
  },
  {
    "text": "the same image build packs allow you to do that and we've really just shown you know in",
    "start": "1234799",
    "end": "1240640"
  },
  {
    "text": "the interest of time and making this a comprehensible talk uh just sort of a subset of all of the things that build",
    "start": "1240640",
    "end": "1246880"
  },
  {
    "text": "packs are capable of doing in particular there's a lot of flexibility to customize",
    "start": "1246880",
    "end": "1254159"
  },
  {
    "text": "the environment for the process at runtime some more advanced capabilities that",
    "start": "1254159",
    "end": "1260159"
  },
  {
    "text": "you don't actually have to know about if you don't want to but just suffice to say that there's more things available",
    "start": "1260159",
    "end": "1267840"
  },
  {
    "text": "and last but not least uh you know every build pack follows this pattern so they are all able to make changes in their",
    "start": "1267840",
    "end": "1274559"
  },
  {
    "text": "own layers directory and you know adding layers as children of that directory",
    "start": "1274559",
    "end": "1282320"
  },
  {
    "text": "or make changes in the workspace directory which contains the source code and that's really it that's kind of",
    "start": "1282320",
    "end": "1289360"
  },
  {
    "text": "all bill packs are allowed to do which which again is limiting but for a very important reason",
    "start": "1289360",
    "end": "1297279"
  },
  {
    "text": "so now that we've kind of given a build packs view of the world we want to step back a little bit and give a view of the",
    "start": "1297440",
    "end": "1304799"
  },
  {
    "text": "world from a platform perspective so as we mentioned build packs are executables right so they need an",
    "start": "1304799",
    "end": "1310640"
  },
  {
    "text": "environment to run in and the best way to provide that environment is via an",
    "start": "1310640",
    "end": "1317120"
  },
  {
    "text": "oci image that we call a builder so it contains a base image",
    "start": "1317120",
    "end": "1322240"
  },
  {
    "text": "the build image which has all of the os level dependencies that are required",
    "start": "1322240",
    "end": "1328320"
  },
  {
    "text": "by the build packs in that builder it has one or more build packs",
    "start": "1328320",
    "end": "1335520"
  },
  {
    "text": "and a binary called the lifecycle which as sam mentioned is sort of the heart of",
    "start": "1335520",
    "end": "1340559"
  },
  {
    "text": "the cnb project so as a platform operator you can decide which build packs are supported by your",
    "start": "1340559",
    "end": "1347120"
  },
  {
    "text": "platform by choosing which build packs go into your builder",
    "start": "1347120",
    "end": "1352799"
  },
  {
    "text": "to perform a build you would provide source code then execute the life cycle",
    "start": "1354159",
    "end": "1361280"
  },
  {
    "text": "and the output would be your application image so just to sort of",
    "start": "1361280",
    "end": "1366799"
  },
  {
    "text": "describe what's in the image we have a base image which",
    "start": "1366799",
    "end": "1372400"
  },
  {
    "text": "you'll notice is the run image not the same as the build image necessarily",
    "start": "1372400",
    "end": "1378960"
  },
  {
    "text": "in order to for security reasons right we want to minimize the attack surface and provide",
    "start": "1378960",
    "end": "1385039"
  },
  {
    "text": "a more minimal image containing only the dependencies needed at runtime",
    "start": "1385039",
    "end": "1391360"
  },
  {
    "text": "in our final image then we have application dependencies which you know",
    "start": "1391360",
    "end": "1397760"
  },
  {
    "text": "dependency a b and c these are layers within the image that directly correspond to those",
    "start": "1397760",
    "end": "1404799"
  },
  {
    "text": "subdirectories of the build pack layers directory and then finally the app",
    "start": "1404799",
    "end": "1410400"
  },
  {
    "text": "as a as another layer on the top",
    "start": "1410400",
    "end": "1414799"
  },
  {
    "text": "so just to look um a little bit closely on what the life cycle actually does",
    "start": "1415600",
    "end": "1421919"
  },
  {
    "text": "um at a high level it is preparing the environment for build packs and then running bill packs",
    "start": "1421919",
    "end": "1428080"
  },
  {
    "text": "themselves so the first phase i didn't say the life cycle actually",
    "start": "1428080",
    "end": "1433200"
  },
  {
    "text": "executes in a series of distinct phases that each have its own responsibility",
    "start": "1433200",
    "end": "1438799"
  },
  {
    "text": "so the first phase is analyze where we look in let's say we're exporting to an oci",
    "start": "1438799",
    "end": "1444720"
  },
  {
    "text": "registry we look in the registry and see if there's any image already there that we built already and",
    "start": "1444720",
    "end": "1451679"
  },
  {
    "text": "we do that so that we can by knowing what's in the registry avoid re-uploading things that didn't change",
    "start": "1451679",
    "end": "1460320"
  },
  {
    "text": "then is the detect phase where we run a series of build pack groups to",
    "start": "1460320",
    "end": "1466880"
  },
  {
    "text": "determine which group is actually needed to build the application and this can be useful",
    "start": "1466880",
    "end": "1474880"
  },
  {
    "text": "you know if you're a platform that supports a wide variety of language families you might not want to have a separate",
    "start": "1474880",
    "end": "1481279"
  },
  {
    "text": "builder for each one you can just put all of the build packs that you support into one builder and the build packs by",
    "start": "1481279",
    "end": "1487200"
  },
  {
    "text": "analyzing the source code will know which group is actually needed for the build",
    "start": "1487200",
    "end": "1494559"
  },
  {
    "text": "then we have restore that's just copying dependencies that were cached in a previous build back into the build",
    "start": "1496559",
    "end": "1502400"
  },
  {
    "text": "container so that they're available finally is the build phase where each",
    "start": "1502400",
    "end": "1507919"
  },
  {
    "text": "build packs build executable is invoked to actually do the work that's necessary",
    "start": "1507919",
    "end": "1514559"
  },
  {
    "text": "to make a runnable application and finally the export phase where",
    "start": "1514559",
    "end": "1520559"
  },
  {
    "text": "we are creating oci layers by making tarballs from those directories that we",
    "start": "1520559",
    "end": "1526080"
  },
  {
    "text": "talked about calculating their checksums and creating configs just like sam showed so we're taking",
    "start": "1526080",
    "end": "1532320"
  },
  {
    "text": "advantage of these first principles to actually make an image without needing to use docker",
    "start": "1532320",
    "end": "1540158"
  },
  {
    "text": "so we just showed five phases it's um you know it's a lot for an introduction",
    "start": "1541279",
    "end": "1547440"
  },
  {
    "text": "but uh just to just to show that as an end user you don't have to think about all of that",
    "start": "1547440",
    "end": "1553440"
  },
  {
    "text": "right you don't have to think about the life cycle you don't have to think about the different phases",
    "start": "1553440",
    "end": "1559039"
  },
  {
    "text": "there are many ways to perform a build packs build",
    "start": "1559039",
    "end": "1564559"
  },
  {
    "text": "but one way that we provide as a project is a cli tool really intended for local development that you can use to",
    "start": "1564559",
    "end": "1571919"
  },
  {
    "text": "build applications and have them be exported either into a docker daemon or into an oci registry",
    "start": "1571919",
    "end": "1578480"
  },
  {
    "text": "so here you can see that we provide my app image which is the desired tag of the image",
    "start": "1578480",
    "end": "1586159"
  },
  {
    "text": "we give a path to application source code and we provide the builder that we want to",
    "start": "1586159",
    "end": "1592840"
  },
  {
    "text": "use um",
    "start": "1592840",
    "end": "1596919"
  },
  {
    "text": "but this can be made even simpler because we can infer that the application directory is the current",
    "start": "1598640",
    "end": "1603840"
  },
  {
    "text": "working directory you can set your default builder as a project we provide the",
    "start": "1603840",
    "end": "1609880"
  },
  {
    "text": "specification and tooling to run build packs builds but we don't actually provide build packs so there's an",
    "start": "1609880",
    "end": "1615279"
  },
  {
    "text": "ecosystem of build pack providers",
    "start": "1615279",
    "end": "1620480"
  },
  {
    "text": "google heroku salesforce and the paquetto project being you know among",
    "start": "1620480",
    "end": "1625679"
  },
  {
    "text": "others in providing you know production ready build packs uh that you can choose from",
    "start": "1625679",
    "end": "1631840"
  },
  {
    "text": "you can also write your own build packs right that's the whole point of having a specification is that you can know",
    "start": "1631840",
    "end": "1637840"
  },
  {
    "text": "exactly how to create your own build pack executables to follow this",
    "start": "1637840",
    "end": "1643279"
  },
  {
    "text": "logic that we're showing so let's",
    "start": "1643279",
    "end": "1649200"
  },
  {
    "text": "show a demo",
    "start": "1649200",
    "end": "1652679"
  },
  {
    "text": "i'm gonna",
    "start": "1654240",
    "end": "1657200"
  },
  {
    "text": "this because we have a bad internet is a a can demo but it's just to show",
    "start": "1661919",
    "end": "1669919"
  },
  {
    "text": "you know that simple invocation of the pack command here uh we're using the paquetto builder",
    "start": "1669919",
    "end": "1676080"
  },
  {
    "text": "but you can again you can use any um you can see from the output",
    "start": "1676080",
    "end": "1682919"
  },
  {
    "text": "oops i scrolled up too far so you can see from the output those",
    "start": "1684000",
    "end": "1690320"
  },
  {
    "text": "life cycle phases that i mentioned here we have analysis we have detection in this case five build packs opted into",
    "start": "1690320",
    "end": "1697200"
  },
  {
    "text": "the build nothing to restore now we have the build step where each build pack is doing its thing",
    "start": "1697200",
    "end": "1705200"
  },
  {
    "text": "here's export where we're creating layers from those directories and adding them to the image and finally we have",
    "start": "1705200",
    "end": "1712960"
  },
  {
    "text": "the image being saved so let me go back",
    "start": "1712960",
    "end": "1720320"
  },
  {
    "text": "okay so this is just going to show in a little more detail what actually",
    "start": "1721360",
    "end": "1726480"
  },
  {
    "text": "happened with that build we're focusing on the build packs that actually provided the python",
    "start": "1726480",
    "end": "1731760"
  },
  {
    "text": "dependencies so here we have three build packs",
    "start": "1731760",
    "end": "1736799"
  },
  {
    "text": "they're each doing a separate thing the cp the c python build pack installs see",
    "start": "1736799",
    "end": "1742159"
  },
  {
    "text": "python the pip build pack installs pip then the pip install build pack actually runs pip",
    "start": "1742159",
    "end": "1747919"
  },
  {
    "text": "to populate the pip cache and install packages and the reason it's helpful to kind of",
    "start": "1747919",
    "end": "1753440"
  },
  {
    "text": "break it up into these steps is that you know again thinking about having a",
    "start": "1753440",
    "end": "1759039"
  },
  {
    "text": "minimal runtime image we only want to include the things that are necessary",
    "start": "1759039",
    "end": "1764720"
  },
  {
    "text": "for the application to run so in this case we need see python we need the installed packages uh in the final image",
    "start": "1764720",
    "end": "1771840"
  },
  {
    "text": "but we don't want our package manager there so the build packs have designated these",
    "start": "1771840",
    "end": "1778880"
  },
  {
    "text": "layers as being exportable however see python and pip are necessary",
    "start": "1778880",
    "end": "1785360"
  },
  {
    "text": "for pip install to run so we can designate these layers as being",
    "start": "1785360",
    "end": "1791840"
  },
  {
    "text": "accessible to subsequent build packs through the environment and we'll show how that works in just a second",
    "start": "1791840",
    "end": "1798159"
  },
  {
    "text": "finally all of the layers could be useful on a subsequent build right to make",
    "start": "1798159",
    "end": "1803200"
  },
  {
    "text": "the next build faster so the build packs designate them as cachable",
    "start": "1803200",
    "end": "1810080"
  },
  {
    "text": "then to show it in a little bit more detail just this is the view of the file system uh before any bill",
    "start": "1810960",
    "end": "1817200"
  },
  {
    "text": "packs have executed right so we have the workspace directory containing our app.pi and requirements.txt we have the",
    "start": "1817200",
    "end": "1824320"
  },
  {
    "text": "layers directory which is empty because no build packs have run and then we have the environment",
    "start": "1824320",
    "end": "1830399"
  },
  {
    "text": "with the path variable that's inherited from the build time base image",
    "start": "1830399",
    "end": "1836399"
  },
  {
    "text": "so after the c python build pack has run we have a c python layer",
    "start": "1836399",
    "end": "1841760"
  },
  {
    "text": "see python.tamul this tamil file inside will be instructing the lifecycle this",
    "start": "1841760",
    "end": "1847039"
  },
  {
    "text": "is a cacheable layer this is an exportable layer and this layer should be exposed to subsequent build packs",
    "start": "1847039",
    "end": "1854480"
  },
  {
    "text": "this is getting back to those special subdirectories that i mentioned so anything in the lib directory is going",
    "start": "1854480",
    "end": "1860000"
  },
  {
    "text": "to be added to the ld library path and library path variables similarly with include",
    "start": "1860000",
    "end": "1866080"
  },
  {
    "text": "and bin this is all dot automatically by the life cycle so the build pack doesn't have to do anything special just put",
    "start": "1866080",
    "end": "1872320"
  },
  {
    "text": "stuff in there the build pack can also configure the environment in this case the contents of",
    "start": "1872320",
    "end": "1878480"
  },
  {
    "text": "the python path.override file would be the path to the see python layer directory",
    "start": "1878480",
    "end": "1885518"
  },
  {
    "text": "similarly with pip we have a pip layer we update the environment because this",
    "start": "1886240",
    "end": "1891279"
  },
  {
    "text": "again is exposed to subsequent build packs with those special directories",
    "start": "1891279",
    "end": "1896799"
  },
  {
    "text": "then we have the pip install build pack after it runs it created a layer for the pip cache",
    "start": "1896799",
    "end": "1902399"
  },
  {
    "text": "another layer for the install packages",
    "start": "1902399",
    "end": "1907440"
  },
  {
    "text": "so just to recap we have three build packs that created four layers",
    "start": "1907440",
    "end": "1912640"
  },
  {
    "text": "two layers are exported in the final image two layers are made available to",
    "start": "1912640",
    "end": "1918240"
  },
  {
    "text": "subsequent build packs through the environment and all four layers are cached at this point",
    "start": "1918240",
    "end": "1925840"
  },
  {
    "text": "we didn't have to do any snapshotting if we go back to the dockerfile example",
    "start": "1925840",
    "end": "1932480"
  },
  {
    "text": "you know creating four layers with docker file might involve creating four separate run instructions which would be",
    "start": "1932480",
    "end": "1938720"
  },
  {
    "text": "four separate containers and you know four separate uh instances of running a snapshot to",
    "start": "1938720",
    "end": "1945200"
  },
  {
    "text": "determine the file system diff which we didn't have to do in this case because",
    "start": "1945200",
    "end": "1951600"
  },
  {
    "text": "of the build pack specification the life cycle knowing exactly where the build packs are writing their changes",
    "start": "1951600",
    "end": "1959120"
  },
  {
    "text": "we alluded to the software bill of materials so this is just showing how build packs because they",
    "start": "1959360",
    "end": "1964799"
  },
  {
    "text": "know exactly what they installed can provide standardized",
    "start": "1964799",
    "end": "1970080"
  },
  {
    "text": "structured s-bom files to describe what was added so here we have um",
    "start": "1970080",
    "end": "1976399"
  },
  {
    "text": "describing the three layers uh cyclone dx spdx and sift",
    "start": "1976399",
    "end": "1982159"
  },
  {
    "text": "json files uh describing the dependencies that were added",
    "start": "1982159",
    "end": "1987759"
  },
  {
    "text": "and this is a typical of an image config that you would see in a buildpack's",
    "start": "1988159",
    "end": "1993360"
  },
  {
    "text": "produced image you'll notice that it's very very similar to what sam showed earlier",
    "start": "1993360",
    "end": "1999360"
  },
  {
    "text": "um so you know just to reiterate images that are built with build packs are really",
    "start": "1999360",
    "end": "2005279"
  },
  {
    "text": "you know they're oci images they can be run with any tool that you could use to run an image that you built with docker",
    "start": "2005279",
    "end": "2011600"
  },
  {
    "text": "so they can be run with docker they can be run with kate's",
    "start": "2011600",
    "end": "2016000"
  },
  {
    "text": "um so this is just to recap what did we see build packs they're just software they analyze source code and determine",
    "start": "2017279",
    "end": "2023840"
  },
  {
    "text": "the best way to build it they follow a specification that really limits what they're able to do",
    "start": "2023840",
    "end": "2030240"
  },
  {
    "text": "because of that there is a logical mapping of the dependencies that they install to the layers in the application image",
    "start": "2030240",
    "end": "2037600"
  },
  {
    "text": "that is produced that can be really useful the life cycle is a binary that",
    "start": "2037600",
    "end": "2044240"
  },
  {
    "text": "orchestrates the build it sets everything up for build packs it invokes their executables at the right time and",
    "start": "2044240",
    "end": "2050560"
  },
  {
    "text": "creates the final application image using the oci concepts that sam illustrated",
    "start": "2050560",
    "end": "2057839"
  },
  {
    "text": "and finally just to linger on the limitations of the build pack api",
    "start": "2057839",
    "end": "2063760"
  },
  {
    "text": "because we know that build packs only make changes in very specific locations there is a strict separation of the base",
    "start": "2063760",
    "end": "2070720"
  },
  {
    "text": "image and build pack provided layers",
    "start": "2070720",
    "end": "2075838"
  },
  {
    "text": "this allows us to do something very powerful which",
    "start": "2076159",
    "end": "2081040"
  },
  {
    "text": "we've demonstrated in other talks but not this one so just",
    "start": "2082399",
    "end": "2088480"
  },
  {
    "text": "to show you uh what we mean um we can imagine if we have an application image there's",
    "start": "2088480",
    "end": "2094878"
  },
  {
    "text": "a security vulnerability but that vulnerability is just in the uh runtime base image because there we know",
    "start": "2094879",
    "end": "2102320"
  },
  {
    "text": "there's no intermingling of the run image and the build pack provided layers",
    "start": "2102320",
    "end": "2107920"
  },
  {
    "text": "we can simply swap out the vulnerable base image with a newly",
    "start": "2107920",
    "end": "2114079"
  },
  {
    "text": "patched run image and this is something that can be done just by manipulating a pointer in the",
    "start": "2114079",
    "end": "2121119"
  },
  {
    "text": "registry it doesn't require a rebuild it doesn't require new running containers",
    "start": "2121119",
    "end": "2127200"
  },
  {
    "text": "and it it's just that uh metadata manipulation and because of that that can allow you",
    "start": "2127200",
    "end": "2134320"
  },
  {
    "text": "to update many applications very quickly and",
    "start": "2134320",
    "end": "2139839"
  },
  {
    "text": "easily um you know on the order of thousands of applications in just a few minutes",
    "start": "2139839",
    "end": "2146559"
  },
  {
    "text": "so there are advantages we think there are many advantages to doing things this way first and foremost it concentrates",
    "start": "2148560",
    "end": "2155359"
  },
  {
    "text": "the understanding that is required to build a secure you know efficient optimized container",
    "start": "2155359",
    "end": "2161280"
  },
  {
    "text": "image just to build pack authors and not to application developers right",
    "start": "2161280",
    "end": "2167200"
  },
  {
    "text": "as application developers you just run pack build my image or you know the equivalent",
    "start": "2167200",
    "end": "2173440"
  },
  {
    "text": "and you don't have to think about all of these things like you know minimizing the number of layers or you know",
    "start": "2173440",
    "end": "2179680"
  },
  {
    "text": "logically grouping dependencies this means that dependency updates are",
    "start": "2179680",
    "end": "2185599"
  },
  {
    "text": "also very easy and straightforward so if you have a vulnerable vulnerable dependency you can just bump the version",
    "start": "2185599",
    "end": "2191760"
  },
  {
    "text": "of the build pack that you're using in your pipeline and you know rerun things you will get",
    "start": "2191760",
    "end": "2197440"
  },
  {
    "text": "an image that you know is fully up to date um as we mentioned the layers within the",
    "start": "2197440",
    "end": "2203280"
  },
  {
    "text": "image are logically mapped to the dependencies that they provide which is useful just to understand what's in the",
    "start": "2203280",
    "end": "2209200"
  },
  {
    "text": "image as well as to when doing a rebuild only replace the",
    "start": "2209200",
    "end": "2214960"
  },
  {
    "text": "bits that actually need to change uh making things faster you can get more accurate s-bombs",
    "start": "2214960",
    "end": "2221200"
  },
  {
    "text": "because build packs again they know exactly what they put in the image so you can get an s-bomb that tells you",
    "start": "2221200",
    "end": "2227920"
  },
  {
    "text": "more than something that just came from a scanner",
    "start": "2227920",
    "end": "2233359"
  },
  {
    "text": "and finally rebase allows for fast patching of os level vulnerabilities at scale",
    "start": "2233359",
    "end": "2242839"
  },
  {
    "text": "there are limitations to this model you know by design",
    "start": "2243040",
    "end": "2248079"
  },
  {
    "text": "so we mentioned that build packs can't write changes just anywhere they have to write in that workspace and the layers",
    "start": "2248079",
    "end": "2254839"
  },
  {
    "text": "directory and this is you know of course limiting on some of the things that you can do",
    "start": "2254839",
    "end": "2262880"
  },
  {
    "text": "again by design they run completely unprivileged but again you can't do something like",
    "start": "2262880",
    "end": "2269359"
  },
  {
    "text": "install a system package with a build pack",
    "start": "2269359",
    "end": "2274640"
  },
  {
    "text": "however our project is currently looking at ways that we can allow for",
    "start": "2274640",
    "end": "2280400"
  },
  {
    "text": "these kinds of extensions in a safe way so where you would use a build pack like",
    "start": "2280400",
    "end": "2286079"
  },
  {
    "text": "mechanism to extend your build time or your runtime based image before build packs do their thing",
    "start": "2286079",
    "end": "2293359"
  },
  {
    "text": "giving sort of a more complete",
    "start": "2293359",
    "end": "2298480"
  },
  {
    "text": "way of doing certain things without having to completely remake your base images from scratch",
    "start": "2298480",
    "end": "2305200"
  },
  {
    "text": "so that is our talk we love to hear from bill pack's users or",
    "start": "2305839",
    "end": "2311119"
  },
  {
    "text": "if you're just thinking about build packs or if you have questions about build packs please reach out",
    "start": "2311119",
    "end": "2316480"
  },
  {
    "text": "we're available everywhere there were icons that will show up in a",
    "start": "2316480",
    "end": "2322079"
  },
  {
    "text": "second that's all thank you [Applause]",
    "start": "2322079",
    "end": "2331349"
  }
]