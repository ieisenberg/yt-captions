[
  {
    "text": "hello",
    "start": "799",
    "end": "1760"
  },
  {
    "text": "i'm saul and i work at shopify in the",
    "start": "1760",
    "end": "3840"
  },
  {
    "text": "scripps team making commerce extensible",
    "start": "3840",
    "end": "5839"
  },
  {
    "text": "with webassembly",
    "start": "5839",
    "end": "7520"
  },
  {
    "text": "um in this talk i'll walk you through",
    "start": "7520",
    "end": "9120"
  },
  {
    "text": "our adoption of javascript as the",
    "start": "9120",
    "end": "10639"
  },
  {
    "text": "primary language for the scripts",
    "start": "10639",
    "end": "12080"
  },
  {
    "text": "platform",
    "start": "12080",
    "end": "14559"
  },
  {
    "text": "before getting into any other technical",
    "start": "14639",
    "end": "16560"
  },
  {
    "text": "details or i'll briefly explain um",
    "start": "16560",
    "end": "19600"
  },
  {
    "text": "shopify's use case and the role that web",
    "start": "19600",
    "end": "21920"
  },
  {
    "text": "assembly plays in it webassembly power",
    "start": "21920",
    "end": "24400"
  },
  {
    "text": "shopify scripts platform this platform",
    "start": "24400",
    "end": "26960"
  },
  {
    "text": "is responsible for enabling",
    "start": "26960",
    "end": "29279"
  },
  {
    "text": "third synchronous third-party business",
    "start": "29279",
    "end": "31199"
  },
  {
    "text": "customizations to shopify",
    "start": "31199",
    "end": "33280"
  },
  {
    "text": "you can think of scripts um as a",
    "start": "33280",
    "end": "35440"
  },
  {
    "text": "functions as a service platform in which",
    "start": "35440",
    "end": "37760"
  },
  {
    "text": "functions are executed in performance",
    "start": "37760",
    "end": "40480"
  },
  {
    "text": "sensitive context like inside a checkout",
    "start": "40480",
    "end": "42800"
  },
  {
    "text": "for example",
    "start": "42800",
    "end": "45200"
  },
  {
    "text": "um from this definition we can highlight",
    "start": "45200",
    "end": "47520"
  },
  {
    "text": "three main concepts",
    "start": "47520",
    "end": "49200"
  },
  {
    "text": "that come into play synchronous",
    "start": "49200",
    "end": "52160"
  },
  {
    "text": "third-party",
    "start": "52160",
    "end": "53840"
  },
  {
    "text": "and portability and developer experience",
    "start": "53840",
    "end": "56239"
  },
  {
    "text": "synchronous because um",
    "start": "56239",
    "end": "60079"
  },
  {
    "text": "script customizations are synchronous",
    "start": "60079",
    "end": "62000"
  },
  {
    "text": "this means that they are normally",
    "start": "62000",
    "end": "63199"
  },
  {
    "text": "executed",
    "start": "63199",
    "end": "64400"
  },
  {
    "text": "uh in the context of an already existing",
    "start": "64400",
    "end": "66640"
  },
  {
    "text": "request this means that they need to be",
    "start": "66640",
    "end": "68720"
  },
  {
    "text": "extremely fast in order to avoid",
    "start": "68720",
    "end": "70640"
  },
  {
    "text": "delaying the request that they are",
    "start": "70640",
    "end": "72640"
  },
  {
    "text": "executed in in fact one of our slos is",
    "start": "72640",
    "end": "75759"
  },
  {
    "text": "to execute scripts",
    "start": "75759",
    "end": "77920"
  },
  {
    "text": "execute the most complex scripts in five",
    "start": "77920",
    "end": "80479"
  },
  {
    "text": "milliseconds or less",
    "start": "80479",
    "end": "82320"
  },
  {
    "text": "then we have third party by definition",
    "start": "82320",
    "end": "84560"
  },
  {
    "text": "customizations are written by",
    "start": "84560",
    "end": "85920"
  },
  {
    "text": "third-party developers this means that",
    "start": "85920",
    "end": "87920"
  },
  {
    "text": "their code isn't safe and untrusted so",
    "start": "87920",
    "end": "90400"
  },
  {
    "text": "this code needs a sandbox",
    "start": "90400",
    "end": "92400"
  },
  {
    "text": "and then we have the concept of",
    "start": "92400",
    "end": "93840"
  },
  {
    "text": "portability and developer experience we",
    "start": "93840",
    "end": "95920"
  },
  {
    "text": "want to ensure that developers writing",
    "start": "95920",
    "end": "97600"
  },
  {
    "text": "scripts can use the tools that they are",
    "start": "97600",
    "end": "99280"
  },
  {
    "text": "most familiar with all these concepts",
    "start": "99280",
    "end": "101680"
  },
  {
    "text": "make webassembly a perfect fit for",
    "start": "101680",
    "end": "103520"
  },
  {
    "text": "shopify's use case",
    "start": "103520",
    "end": "106000"
  },
  {
    "text": "now most of our research to support",
    "start": "106000",
    "end": "108159"
  },
  {
    "text": "javascript was fueled by the desire to",
    "start": "108159",
    "end": "110560"
  },
  {
    "text": "improve developer experience to maximize",
    "start": "110560",
    "end": "112479"
  },
  {
    "text": "developer experience",
    "start": "112479",
    "end": "115840"
  },
  {
    "text": "that's mostly because web assembly by",
    "start": "115840",
    "end": "117840"
  },
  {
    "text": "default will provide security and",
    "start": "117840",
    "end": "119840"
  },
  {
    "text": "performance out of the box but the",
    "start": "119840",
    "end": "121840"
  },
  {
    "text": "developer experience is mostly dependent",
    "start": "121840",
    "end": "124320"
  },
  {
    "text": "at least today",
    "start": "124320",
    "end": "125680"
  },
  {
    "text": "on the tools that the platform is going",
    "start": "125680",
    "end": "127759"
  },
  {
    "text": "to give its developers",
    "start": "127759",
    "end": "130959"
  },
  {
    "text": "now with this ideas in mind we could",
    "start": "131520",
    "end": "134239"
  },
  {
    "text": "classify the existing",
    "start": "134239",
    "end": "136879"
  },
  {
    "text": "languages that target webassembly in one",
    "start": "136879",
    "end": "139440"
  },
  {
    "text": "of these three buckets the first one is",
    "start": "139440",
    "end": "142560"
  },
  {
    "text": "languages that offer native support for",
    "start": "142560",
    "end": "144480"
  },
  {
    "text": "web assembly",
    "start": "144480",
    "end": "146400"
  },
  {
    "text": "the second one are languages that are",
    "start": "146400",
    "end": "148239"
  },
  {
    "text": "designed exclusively for webassembly and",
    "start": "148239",
    "end": "150480"
  },
  {
    "text": "then the third one are languages that",
    "start": "150480",
    "end": "152160"
  },
  {
    "text": "require the language runtime to be",
    "start": "152160",
    "end": "154560"
  },
  {
    "text": "compiled to webassembly so let's look at",
    "start": "154560",
    "end": "156879"
  },
  {
    "text": "each of them",
    "start": "156879",
    "end": "158480"
  },
  {
    "text": "um languages that offer native support",
    "start": "158480",
    "end": "160640"
  },
  {
    "text": "these normally",
    "start": "160640",
    "end": "162080"
  },
  {
    "text": "are languages that are considered",
    "start": "162080",
    "end": "163990"
  },
  {
    "text": "[Music]",
    "start": "163990",
    "end": "165519"
  },
  {
    "text": "system programming languages and you can",
    "start": "165519",
    "end": "167040"
  },
  {
    "text": "think here of languages like go c plus",
    "start": "167040",
    "end": "169680"
  },
  {
    "text": "plus c rust sig etc um",
    "start": "169680",
    "end": "173519"
  },
  {
    "text": "these languages have pros and cons in",
    "start": "173519",
    "end": "175280"
  },
  {
    "text": "terms of developer experience",
    "start": "175280",
    "end": "177280"
  },
  {
    "text": "and and performance so the process in",
    "start": "177280",
    "end": "179440"
  },
  {
    "text": "terms of of performance is that they",
    "start": "179440",
    "end": "181120"
  },
  {
    "text": "offer good performance they offer native",
    "start": "181120",
    "end": "182720"
  },
  {
    "text": "support for web assembly and they are",
    "start": "182720",
    "end": "184159"
  },
  {
    "text": "mature then the con is that",
    "start": "184159",
    "end": "186959"
  },
  {
    "text": "they have",
    "start": "186959",
    "end": "188080"
  },
  {
    "text": "sometimes a high learning curve this",
    "start": "188080",
    "end": "190080"
  },
  {
    "text": "means that they are not as approachable",
    "start": "190080",
    "end": "191519"
  },
  {
    "text": "for developers that just want to write",
    "start": "191519",
    "end": "193440"
  },
  {
    "text": "general purpose apps for example",
    "start": "193440",
    "end": "195760"
  },
  {
    "text": "then we have languages that are designed",
    "start": "195760",
    "end": "197599"
  },
  {
    "text": "exclusively for web assembly they",
    "start": "197599",
    "end": "199599"
  },
  {
    "text": "normally offer some sort of decent",
    "start": "199599",
    "end": "201360"
  },
  {
    "text": "performance",
    "start": "201360",
    "end": "202480"
  },
  {
    "text": "but they have some cons in terms of",
    "start": "202480",
    "end": "204319"
  },
  {
    "text": "developer experience like they lack",
    "start": "204319",
    "end": "206000"
  },
  {
    "text": "editor support libraries debugging etc",
    "start": "206000",
    "end": "209440"
  },
  {
    "text": "and the other con that can affect",
    "start": "209440",
    "end": "211280"
  },
  {
    "text": "developer experience is maturity",
    "start": "211280",
    "end": "213760"
  },
  {
    "text": "they probably don't offer all the",
    "start": "213760",
    "end": "215680"
  },
  {
    "text": "language features that",
    "start": "215680",
    "end": "217519"
  },
  {
    "text": "general purpose",
    "start": "217519",
    "end": "219840"
  },
  {
    "text": "developers app developers might be used",
    "start": "219840",
    "end": "222159"
  },
  {
    "text": "to",
    "start": "222159",
    "end": "223440"
  },
  {
    "text": "now",
    "start": "223440",
    "end": "224239"
  },
  {
    "text": "let's talk about the third bucket",
    "start": "224239",
    "end": "225840"
  },
  {
    "text": "languages that require a runtime",
    "start": "225840",
    "end": "227760"
  },
  {
    "text": "dependency to be able to execute",
    "start": "227760",
    "end": "230400"
  },
  {
    "text": "um",
    "start": "230400",
    "end": "231840"
  },
  {
    "text": "the pros in this bucket are",
    "start": "231840",
    "end": "235280"
  },
  {
    "text": "uh",
    "start": "235280",
    "end": "236080"
  },
  {
    "text": "that they are these languages are often",
    "start": "236080",
    "end": "238000"
  },
  {
    "text": "mature and that they offer a lot of",
    "start": "238000",
    "end": "239280"
  },
  {
    "text": "developer experience",
    "start": "239280",
    "end": "241280"
  },
  {
    "text": "many they are widely known by most the",
    "start": "241280",
    "end": "243599"
  },
  {
    "text": "developers",
    "start": "243599",
    "end": "245120"
  },
  {
    "text": "out there",
    "start": "245120",
    "end": "246239"
  },
  {
    "text": "but the disadvantage is that they are",
    "start": "246239",
    "end": "247680"
  },
  {
    "text": "probably not as performant especially",
    "start": "247680",
    "end": "250080"
  },
  {
    "text": "when embedded in a context like web",
    "start": "250080",
    "end": "251840"
  },
  {
    "text": "assembly so this means that choosing",
    "start": "251840",
    "end": "254480"
  },
  {
    "text": "these kind of languages",
    "start": "254480",
    "end": "256000"
  },
  {
    "text": "generally involves assuming some sort of",
    "start": "256000",
    "end": "258479"
  },
  {
    "text": "performance trade-off",
    "start": "258479",
    "end": "261120"
  },
  {
    "text": "now",
    "start": "261120",
    "end": "262479"
  },
  {
    "text": "let's talk about the road to javascript",
    "start": "262479",
    "end": "264400"
  },
  {
    "text": "and how",
    "start": "264400",
    "end": "265360"
  },
  {
    "text": "these buckets come into play",
    "start": "265360",
    "end": "268240"
  },
  {
    "text": "as a team we started seeing that the",
    "start": "268240",
    "end": "270720"
  },
  {
    "text": "languages in the third bucket in which",
    "start": "270720",
    "end": "272560"
  },
  {
    "text": "you near runtime",
    "start": "272560",
    "end": "274080"
  },
  {
    "text": "might be the best bet if we were to",
    "start": "274080",
    "end": "276479"
  },
  {
    "text": "maximize for developer experience",
    "start": "276479",
    "end": "278960"
  },
  {
    "text": "and if we were to have a calculated risk",
    "start": "278960",
    "end": "282000"
  },
  {
    "text": "on the amount of performance trade-offs",
    "start": "282000",
    "end": "283759"
  },
  {
    "text": "that we could make so in",
    "start": "283759",
    "end": "286000"
  },
  {
    "text": "in theory when we started exploring this",
    "start": "286000",
    "end": "288800"
  },
  {
    "text": "a bit less of performance might mean",
    "start": "288800",
    "end": "291199"
  },
  {
    "text": "more gains in other areas like developer",
    "start": "291199",
    "end": "293199"
  },
  {
    "text": "experience",
    "start": "293199",
    "end": "294240"
  },
  {
    "text": "and then it comes the question like why",
    "start": "294240",
    "end": "295759"
  },
  {
    "text": "javascript well javascript is extremely",
    "start": "295759",
    "end": "298160"
  },
  {
    "text": "popular language and the majority of our",
    "start": "298160",
    "end": "300160"
  },
  {
    "text": "target audience is mostly familiar with",
    "start": "300160",
    "end": "302080"
  },
  {
    "text": "javascript or typescript um and that's",
    "start": "302080",
    "end": "304880"
  },
  {
    "text": "why why we initially had chosen assembly",
    "start": "304880",
    "end": "307600"
  },
  {
    "text": "script so up until now our platform has",
    "start": "307600",
    "end": "310479"
  },
  {
    "text": "been supporting assembly script because",
    "start": "310479",
    "end": "312479"
  },
  {
    "text": "we think that the intentions of the",
    "start": "312479",
    "end": "314160"
  },
  {
    "text": "language are are good br bringing uh",
    "start": "314160",
    "end": "317600"
  },
  {
    "text": "javascript or typescript developers",
    "start": "317600",
    "end": "319360"
  },
  {
    "text": "closer to webassembly without",
    "start": "319360",
    "end": "320800"
  },
  {
    "text": "necessarily",
    "start": "320800",
    "end": "322639"
  },
  {
    "text": "having to learn systems programming",
    "start": "322639",
    "end": "324479"
  },
  {
    "text": "languages",
    "start": "324479",
    "end": "326000"
  },
  {
    "text": "and then aside from that javascript has",
    "start": "326000",
    "end": "328639"
  },
  {
    "text": "a good tooling and a good ecosystem",
    "start": "328639",
    "end": "332720"
  },
  {
    "text": "in order to make",
    "start": "333280",
    "end": "336080"
  },
  {
    "text": "javascript possible in our platform we",
    "start": "336080",
    "end": "338320"
  },
  {
    "text": "had to rely on two essential tools the",
    "start": "338320",
    "end": "340479"
  },
  {
    "text": "first one is quick js which is a small",
    "start": "340479",
    "end": "342880"
  },
  {
    "text": "and embeddable javascript engine",
    "start": "342880",
    "end": "344960"
  },
  {
    "text": "um",
    "start": "344960",
    "end": "347039"
  },
  {
    "text": "this means that it's performant uh in",
    "start": "347039",
    "end": "350000"
  },
  {
    "text": "environments that don't support just in",
    "start": "350000",
    "end": "352479"
  },
  {
    "text": "time optimizations like wasm so",
    "start": "352479",
    "end": "355600"
  },
  {
    "text": "that was one of the main reasons why we",
    "start": "355600",
    "end": "357520"
  },
  {
    "text": "chose it then there are other",
    "start": "357520",
    "end": "360400"
  },
  {
    "text": "minor reasons like it's written in c and",
    "start": "360400",
    "end": "362639"
  },
  {
    "text": "its code base is easily compiled web",
    "start": "362639",
    "end": "364800"
  },
  {
    "text": "assembly but in the future it's likely",
    "start": "364800",
    "end": "366960"
  },
  {
    "text": "that we want to experiment with other",
    "start": "366960",
    "end": "368479"
  },
  {
    "text": "engines like spider monkey or v8",
    "start": "368479",
    "end": "371120"
  },
  {
    "text": "um",
    "start": "371120",
    "end": "371919"
  },
  {
    "text": "other alternatives to engines that could",
    "start": "371919",
    "end": "373680"
  },
  {
    "text": "be compiled web assembly which are",
    "start": "373680",
    "end": "375759"
  },
  {
    "text": "targeted for you know embedded",
    "start": "375759",
    "end": "378840"
  },
  {
    "text": "um",
    "start": "378840",
    "end": "380479"
  },
  {
    "text": "systems or",
    "start": "380479",
    "end": "382319"
  },
  {
    "text": "smaller places are",
    "start": "382319",
    "end": "385440"
  },
  {
    "text": "the hermes engine is the one responsible",
    "start": "385440",
    "end": "388240"
  },
  {
    "text": "for",
    "start": "388240",
    "end": "389039"
  },
  {
    "text": "uh making react native possible but",
    "start": "389039",
    "end": "391120"
  },
  {
    "text": "that's gonna see that's gonna be",
    "start": "391120",
    "end": "392479"
  },
  {
    "text": "something that we're going to see in the",
    "start": "392479",
    "end": "393919"
  },
  {
    "text": "future the second tool that is essential",
    "start": "393919",
    "end": "396560"
  },
  {
    "text": "um to make javascript work is wiser",
    "start": "396560",
    "end": "398720"
  },
  {
    "text": "which is",
    "start": "398720",
    "end": "399919"
  },
  {
    "text": "defined as the web assembly",
    "start": "399919",
    "end": "401280"
  },
  {
    "text": "pre-initializer",
    "start": "401280",
    "end": "403199"
  },
  {
    "text": "wiser is a tool that improves",
    "start": "403199",
    "end": "405440"
  },
  {
    "text": "startup latency of webassembly modules",
    "start": "405440",
    "end": "408319"
  },
  {
    "text": "the overall idea behind why is to record",
    "start": "408319",
    "end": "410800"
  },
  {
    "text": "the state of a module instance and",
    "start": "410800",
    "end": "412880"
  },
  {
    "text": "rewrite that state into a new module",
    "start": "412880",
    "end": "415680"
  },
  {
    "text": "so let's take this example we have",
    "start": "415680",
    "end": "417520"
  },
  {
    "text": "module 8.wasm then we instantiate that",
    "start": "417520",
    "end": "420560"
  },
  {
    "text": "module",
    "start": "420560",
    "end": "422639"
  },
  {
    "text": "in a any runtime that could be a browser",
    "start": "422639",
    "end": "425280"
  },
  {
    "text": "or that could be a runtime like was",
    "start": "425280",
    "end": "426800"
  },
  {
    "text": "sometime then after instantiating that",
    "start": "426800",
    "end": "429520"
  },
  {
    "text": "module",
    "start": "429520",
    "end": "430639"
  },
  {
    "text": "we execute an init function that the",
    "start": "430639",
    "end": "432960"
  },
  {
    "text": "module is going to export that module",
    "start": "432960",
    "end": "435120"
  },
  {
    "text": "normally is going to do some uh heavy",
    "start": "435120",
    "end": "437599"
  },
  {
    "text": "work some expensive work that we don't",
    "start": "437599",
    "end": "439520"
  },
  {
    "text": "want to run every time that we have to",
    "start": "439520",
    "end": "441280"
  },
  {
    "text": "execute the module",
    "start": "441280",
    "end": "442800"
  },
  {
    "text": "when that function executes the state of",
    "start": "442800",
    "end": "445680"
  },
  {
    "text": "the",
    "start": "445680",
    "end": "446479"
  },
  {
    "text": "current module 8.1 in this example",
    "start": "446479",
    "end": "448840"
  },
  {
    "text": "changes when that state changes",
    "start": "448840",
    "end": "452000"
  },
  {
    "text": "that state gets recorded and gets",
    "start": "452000",
    "end": "454000"
  },
  {
    "text": "rewritten into a new module in this case",
    "start": "454000",
    "end": "456720"
  },
  {
    "text": "b dot wasn't so there are important",
    "start": "456720",
    "end": "459520"
  },
  {
    "text": "things that we need to consider here",
    "start": "459520",
    "end": "463039"
  },
  {
    "text": "um the exported function is crucial to",
    "start": "463039",
    "end": "467360"
  },
  {
    "text": "make",
    "start": "467360",
    "end": "468240"
  },
  {
    "text": "uh wiser work so that function it's",
    "start": "468240",
    "end": "471919"
  },
  {
    "text": "it's a function that exports work that",
    "start": "471919",
    "end": "473840"
  },
  {
    "text": "you know that can be done ahead of time",
    "start": "473840",
    "end": "475919"
  },
  {
    "text": "and then the second point that it's",
    "start": "475919",
    "end": "477919"
  },
  {
    "text": "important to note is what's the state of",
    "start": "477919",
    "end": "480479"
  },
  {
    "text": "a module normally wiser looks for",
    "start": "480479",
    "end": "482800"
  },
  {
    "text": "globals memories and instances as the",
    "start": "482800",
    "end": "485440"
  },
  {
    "text": "state of the module",
    "start": "485440",
    "end": "487440"
  },
  {
    "text": "now let's look at more",
    "start": "487440",
    "end": "489120"
  },
  {
    "text": "let's look to a more concrete example",
    "start": "489120",
    "end": "491199"
  },
  {
    "text": "let's assume that we have this",
    "start": "491199",
    "end": "494400"
  },
  {
    "text": "piece of rose code that is doing some",
    "start": "494400",
    "end": "497199"
  },
  {
    "text": "expensive operation in this case we",
    "start": "497199",
    "end": "499680"
  },
  {
    "text": "are calculating fibonacci of 12. and",
    "start": "499680",
    "end": "502479"
  },
  {
    "text": "let's assume that we already know",
    "start": "502479",
    "end": "504319"
  },
  {
    "text": "beforehand that we want to calculate",
    "start": "504319",
    "end": "506000"
  },
  {
    "text": "fibonacci of 12 every time so by using",
    "start": "506000",
    "end": "508879"
  },
  {
    "text": "wiser we could",
    "start": "508879",
    "end": "510879"
  },
  {
    "text": "export a function called init",
    "start": "510879",
    "end": "513518"
  },
  {
    "text": "that's going to be renamed to wise or",
    "start": "513519",
    "end": "515039"
  },
  {
    "text": "initialized when it compiles to",
    "start": "515039",
    "end": "516320"
  },
  {
    "text": "webassembly that is going to calculate",
    "start": "516320",
    "end": "518320"
  },
  {
    "text": "fibonacci of 12.",
    "start": "518320",
    "end": "520560"
  },
  {
    "text": "um",
    "start": "520560",
    "end": "521440"
  },
  {
    "text": "so when we execute wise from this",
    "start": "521440",
    "end": "523440"
  },
  {
    "text": "weisser is going to execute this block",
    "start": "523440",
    "end": "525519"
  },
  {
    "text": "of code when this block",
    "start": "525519",
    "end": "527760"
  },
  {
    "text": "when this block of code gets executed",
    "start": "527760",
    "end": "530880"
  },
  {
    "text": "expensive value is going to get assigned",
    "start": "530880",
    "end": "532959"
  },
  {
    "text": "to a fibonacci of 12 to the result of",
    "start": "532959",
    "end": "535519"
  },
  {
    "text": "fibonacci of 12.",
    "start": "535519",
    "end": "537360"
  },
  {
    "text": "um and then the state is going to change",
    "start": "537360",
    "end": "539600"
  },
  {
    "text": "and",
    "start": "539600",
    "end": "540480"
  },
  {
    "text": "that state is going to get rewritten to",
    "start": "540480",
    "end": "542080"
  },
  {
    "text": "a new module now when you execute a new",
    "start": "542080",
    "end": "544880"
  },
  {
    "text": "module expensive value won't need to be",
    "start": "544880",
    "end": "547600"
  },
  {
    "text": "recalculated again it will be already",
    "start": "547600",
    "end": "550320"
  },
  {
    "text": "accessible in the module's memory",
    "start": "550320",
    "end": "552720"
  },
  {
    "text": "and",
    "start": "552720",
    "end": "553519"
  },
  {
    "text": "this will be a constant operation of",
    "start": "553519",
    "end": "555200"
  },
  {
    "text": "just returning an i-32",
    "start": "555200",
    "end": "558240"
  },
  {
    "text": "now",
    "start": "558240",
    "end": "559200"
  },
  {
    "text": "let's go a bit more into detail so by",
    "start": "559200",
    "end": "561200"
  },
  {
    "text": "inspect let's inspect the two modules",
    "start": "561200",
    "end": "563680"
  },
  {
    "text": "eight or wasm and v dot wasn't i",
    "start": "563680",
    "end": "565920"
  },
  {
    "text": "mentioned before that state is composed",
    "start": "565920",
    "end": "567680"
  },
  {
    "text": "of globals um memories and instances",
    "start": "567680",
    "end": "571120"
  },
  {
    "text": "we're going to look into instances",
    "start": "571120",
    "end": "572640"
  },
  {
    "text": "because that's mostly related to module",
    "start": "572640",
    "end": "574800"
  },
  {
    "text": "linking and it's something that we are",
    "start": "574800",
    "end": "576160"
  },
  {
    "text": "not um dealing with at shopify at the",
    "start": "576160",
    "end": "578800"
  },
  {
    "text": "moment so",
    "start": "578800",
    "end": "580240"
  },
  {
    "text": "the global software doesn't look like",
    "start": "580240",
    "end": "582000"
  },
  {
    "text": "this they are three and now we have the",
    "start": "582000",
    "end": "585279"
  },
  {
    "text": "globals of b wasn't they are the same",
    "start": "585279",
    "end": "587279"
  },
  {
    "text": "they are basically the stack pointer the",
    "start": "587279",
    "end": "589120"
  },
  {
    "text": "data end and the hit base so nothing",
    "start": "589120",
    "end": "591040"
  },
  {
    "text": "changed here",
    "start": "591040",
    "end": "592320"
  },
  {
    "text": "now let's look at the data segments for",
    "start": "592320",
    "end": "594160"
  },
  {
    "text": "those of you not familiar with data",
    "start": "594160",
    "end": "595760"
  },
  {
    "text": "segments",
    "start": "595760",
    "end": "597200"
  },
  {
    "text": "segments in web assembly",
    "start": "597200",
    "end": "599200"
  },
  {
    "text": "are",
    "start": "599200",
    "end": "601440"
  },
  {
    "text": "elements that are used to initialize the",
    "start": "601920",
    "end": "604640"
  },
  {
    "text": "memory either manually through an",
    "start": "604640",
    "end": "607120"
  },
  {
    "text": "instruction or at instantiation",
    "start": "607120",
    "end": "610800"
  },
  {
    "text": "when we do one or the other it depends",
    "start": "610800",
    "end": "612959"
  },
  {
    "text": "on the type of segment if it's active or",
    "start": "612959",
    "end": "615200"
  },
  {
    "text": "passive in this case they are active so",
    "start": "615200",
    "end": "616959"
  },
  {
    "text": "they are used to initialize the memory",
    "start": "616959",
    "end": "618640"
  },
  {
    "text": "on instantiation so before applying",
    "start": "618640",
    "end": "620560"
  },
  {
    "text": "wiser to a webassembly module",
    "start": "620560",
    "end": "623360"
  },
  {
    "text": "um we can see that we have one segment",
    "start": "623360",
    "end": "625360"
  },
  {
    "text": "that is pointing to a specific location",
    "start": "625360",
    "end": "627360"
  },
  {
    "text": "in memory",
    "start": "627360",
    "end": "628480"
  },
  {
    "text": "once we do apply wiser we can see that",
    "start": "628480",
    "end": "631040"
  },
  {
    "text": "wiser created a new segment this segment",
    "start": "631040",
    "end": "634480"
  },
  {
    "text": "is recording the work that was done when",
    "start": "634480",
    "end": "637200"
  },
  {
    "text": "the initialized function",
    "start": "637200",
    "end": "639600"
  },
  {
    "text": "was executed so this means that when the",
    "start": "639600",
    "end": "641440"
  },
  {
    "text": "webassembly module is initialized this",
    "start": "641440",
    "end": "643600"
  },
  {
    "text": "segment is copied into the module memory",
    "start": "643600",
    "end": "646079"
  },
  {
    "text": "and is already accessible for the",
    "start": "646079",
    "end": "647839"
  },
  {
    "text": "program to use it without having to",
    "start": "647839",
    "end": "650240"
  },
  {
    "text": "rerun that expensive operation again",
    "start": "650240",
    "end": "653760"
  },
  {
    "text": "now",
    "start": "653760",
    "end": "654720"
  },
  {
    "text": "you might ask yourself how does this",
    "start": "654720",
    "end": "656399"
  },
  {
    "text": "apply to javascript",
    "start": "656399",
    "end": "658079"
  },
  {
    "text": "well javascript engines normally take",
    "start": "658079",
    "end": "660240"
  },
  {
    "text": "some time to do",
    "start": "660240",
    "end": "662000"
  },
  {
    "text": "two main things before executing your",
    "start": "662000",
    "end": "664079"
  },
  {
    "text": "code",
    "start": "664079",
    "end": "664959"
  },
  {
    "text": "um",
    "start": "664959",
    "end": "665920"
  },
  {
    "text": "that's the engine",
    "start": "665920",
    "end": "667440"
  },
  {
    "text": "initialization and then the application",
    "start": "667440",
    "end": "669360"
  },
  {
    "text": "initialization so the engine",
    "start": "669360",
    "end": "671519"
  },
  {
    "text": "initialization is mostly starting up the",
    "start": "671519",
    "end": "673839"
  },
  {
    "text": "engine and everything that is going to",
    "start": "673839",
    "end": "675760"
  },
  {
    "text": "be",
    "start": "675760",
    "end": "676800"
  },
  {
    "text": "used to execute your code and then",
    "start": "676800",
    "end": "678640"
  },
  {
    "text": "application initialization is dealing",
    "start": "678640",
    "end": "680240"
  },
  {
    "text": "with",
    "start": "680240",
    "end": "681120"
  },
  {
    "text": "your code basically um",
    "start": "681120",
    "end": "683839"
  },
  {
    "text": "uh",
    "start": "683839",
    "end": "684800"
  },
  {
    "text": "parsing your code and everything that",
    "start": "684800",
    "end": "686160"
  },
  {
    "text": "has to do with preparing the code to be",
    "start": "686160",
    "end": "688079"
  },
  {
    "text": "executed",
    "start": "688079",
    "end": "689760"
  },
  {
    "text": "so these are two things that we know",
    "start": "689760",
    "end": "691600"
  },
  {
    "text": "ahead of time that need to happen every",
    "start": "691600",
    "end": "693600"
  },
  {
    "text": "time that you execute a javascript",
    "start": "693600",
    "end": "696160"
  },
  {
    "text": "program for example so these are the two",
    "start": "696160",
    "end": "697920"
  },
  {
    "text": "things that we could use wiser",
    "start": "697920",
    "end": "700959"
  },
  {
    "text": "to optimize",
    "start": "700959",
    "end": "703839"
  },
  {
    "text": "and how it looks",
    "start": "703839",
    "end": "705920"
  },
  {
    "text": "let's say in a pseudo code manner it's",
    "start": "705920",
    "end": "708240"
  },
  {
    "text": "like this so we have",
    "start": "708240",
    "end": "710240"
  },
  {
    "text": "a js engine variable global variable",
    "start": "710240",
    "end": "712399"
  },
  {
    "text": "that is going to be set",
    "start": "712399",
    "end": "714399"
  },
  {
    "text": "to",
    "start": "714399",
    "end": "715360"
  },
  {
    "text": "uh",
    "start": "715360",
    "end": "716480"
  },
  {
    "text": "initializing um a default engine that",
    "start": "716480",
    "end": "718720"
  },
  {
    "text": "could be anything in our case it's quick",
    "start": "718720",
    "end": "720240"
  },
  {
    "text": "js",
    "start": "720240",
    "end": "721680"
  },
  {
    "text": "and then we run this wiser initialize",
    "start": "721680",
    "end": "723600"
  },
  {
    "text": "function that would make sure that this",
    "start": "723600",
    "end": "725360"
  },
  {
    "text": "engine is initialized correctly when we",
    "start": "725360",
    "end": "727519"
  },
  {
    "text": "want to execute code this means that",
    "start": "727519",
    "end": "729760"
  },
  {
    "text": "when we want to run code that the user",
    "start": "729760",
    "end": "732079"
  },
  {
    "text": "has given us we",
    "start": "732079",
    "end": "733920"
  },
  {
    "text": "go to the run function",
    "start": "733920",
    "end": "736480"
  },
  {
    "text": "and we just get the engine that has",
    "start": "736480",
    "end": "738320"
  },
  {
    "text": "already been initialized and then",
    "start": "738320",
    "end": "740079"
  },
  {
    "text": "evaluate whatever code we want to",
    "start": "740079",
    "end": "742399"
  },
  {
    "text": "evaluate so",
    "start": "742399",
    "end": "745120"
  },
  {
    "text": "with this approach we've seen a 50",
    "start": "745120",
    "end": "748320"
  },
  {
    "text": "performance improvement in start time by",
    "start": "748320",
    "end": "751040"
  },
  {
    "text": "using wiser and quick js so this is you",
    "start": "751040",
    "end": "754000"
  },
  {
    "text": "know pretty impressive given that all",
    "start": "754000",
    "end": "755920"
  },
  {
    "text": "rslos are very very aggressive",
    "start": "755920",
    "end": "759600"
  },
  {
    "text": "so",
    "start": "759600",
    "end": "760720"
  },
  {
    "text": "by",
    "start": "760720",
    "end": "761600"
  },
  {
    "text": "benchmarking a simple fibonacci program",
    "start": "761600",
    "end": "763760"
  },
  {
    "text": "we saw",
    "start": "763760",
    "end": "766000"
  },
  {
    "text": "these numbers more or less",
    "start": "766000",
    "end": "768320"
  },
  {
    "text": "so as i said in the slide before this is",
    "start": "768320",
    "end": "770959"
  },
  {
    "text": "very important for us because in a 5",
    "start": "770959",
    "end": "772959"
  },
  {
    "text": "millisecond slo",
    "start": "772959",
    "end": "775120"
  },
  {
    "text": "even if you only have",
    "start": "775120",
    "end": "777760"
  },
  {
    "text": "an improvement of 250",
    "start": "777760",
    "end": "780160"
  },
  {
    "text": "or 300 microseconds that's definitely",
    "start": "780160",
    "end": "783600"
  },
  {
    "text": "considerable",
    "start": "783600",
    "end": "786000"
  },
  {
    "text": "now",
    "start": "786000",
    "end": "786880"
  },
  {
    "text": "let's see a demo of how this thing works",
    "start": "786880",
    "end": "789519"
  },
  {
    "text": "together",
    "start": "789519",
    "end": "791920"
  },
  {
    "text": "now we are going to see how everything",
    "start": "792480",
    "end": "794240"
  },
  {
    "text": "is glued together so let's assume that",
    "start": "794240",
    "end": "796560"
  },
  {
    "text": "we have a very basic structure of a",
    "start": "796560",
    "end": "798880"
  },
  {
    "text": "typescript project in this typescript",
    "start": "798880",
    "end": "801600"
  },
  {
    "text": "project we have",
    "start": "801600",
    "end": "804399"
  },
  {
    "text": "a couple of important files a webpack",
    "start": "804959",
    "end": "806880"
  },
  {
    "text": "file",
    "start": "806880",
    "end": "808560"
  },
  {
    "text": "and then a package.json file let's start",
    "start": "808560",
    "end": "811600"
  },
  {
    "text": "inspecting the package.json file",
    "start": "811600",
    "end": "815839"
  },
  {
    "text": "here we can see that we have some",
    "start": "816000",
    "end": "818320"
  },
  {
    "text": "development development dependencies",
    "start": "818320",
    "end": "820320"
  },
  {
    "text": "which are pretty normal and then we have",
    "start": "820320",
    "end": "821920"
  },
  {
    "text": "a couple of scripts the first one is",
    "start": "821920",
    "end": "823920"
  },
  {
    "text": "compile which would only",
    "start": "823920",
    "end": "826560"
  },
  {
    "text": "um",
    "start": "826560",
    "end": "828639"
  },
  {
    "text": "trigger typescripts compiler and then we",
    "start": "828639",
    "end": "830560"
  },
  {
    "text": "have build this build compiler invokes",
    "start": "830560",
    "end": "833040"
  },
  {
    "text": "webpack webpack will do all its magic to",
    "start": "833040",
    "end": "835680"
  },
  {
    "text": "transform our project into a single",
    "start": "835680",
    "end": "837839"
  },
  {
    "text": "javascript file",
    "start": "837839",
    "end": "839440"
  },
  {
    "text": "let's take a look at the webfact file",
    "start": "839440",
    "end": "843720"
  },
  {
    "text": "now we can see that in the web file we",
    "start": "844639",
    "end": "846399"
  },
  {
    "text": "have a couple of important parts",
    "start": "846399",
    "end": "848480"
  },
  {
    "text": "we see that we have a target that is",
    "start": "848480",
    "end": "849920"
  },
  {
    "text": "going to be es2019",
    "start": "849920",
    "end": "852079"
  },
  {
    "text": "um that is because createjs supports",
    "start": "852079",
    "end": "854160"
  },
  {
    "text": "cs219 out of the box",
    "start": "854160",
    "end": "856480"
  },
  {
    "text": "and then we have",
    "start": "856480",
    "end": "858000"
  },
  {
    "text": "some other configuration and then",
    "start": "858000",
    "end": "860160"
  },
  {
    "text": "around line 27 we have uh",
    "start": "860160",
    "end": "862959"
  },
  {
    "text": "an instruction assist library this means",
    "start": "862959",
    "end": "864800"
  },
  {
    "text": "that this package is going to be",
    "start": "864800",
    "end": "866320"
  },
  {
    "text": "compiled to a library",
    "start": "866320",
    "end": "868000"
  },
  {
    "text": "that will have shopify as a top level uh",
    "start": "868000",
    "end": "872800"
  },
  {
    "text": "variable",
    "start": "872800",
    "end": "873980"
  },
  {
    "text": "[Music]",
    "start": "873980",
    "end": "877070"
  },
  {
    "text": "now if we go back to our package",
    "start": "878880",
    "end": "880399"
  },
  {
    "text": "solution file we can see that after",
    "start": "880399",
    "end": "882079"
  },
  {
    "text": "invoking webpack we invoke something",
    "start": "882079",
    "end": "884399"
  },
  {
    "text": "called javi and then we pass in the",
    "start": "884399",
    "end": "887040"
  },
  {
    "text": "final",
    "start": "887040",
    "end": "888070"
  },
  {
    "text": "[Music]",
    "start": "888070",
    "end": "889440"
  },
  {
    "text": "index file and we pass it a location",
    "start": "889440",
    "end": "892720"
  },
  {
    "text": "where to output the final wasm file so",
    "start": "892720",
    "end": "896240"
  },
  {
    "text": "javi is the tool chain that will build",
    "start": "896240",
    "end": "898320"
  },
  {
    "text": "that wraps quick js",
    "start": "898320",
    "end": "900480"
  },
  {
    "text": "um",
    "start": "900480",
    "end": "902079"
  },
  {
    "text": "and then that is in charge of taking the",
    "start": "902079",
    "end": "904800"
  },
  {
    "text": "user's code and bundling that into a",
    "start": "904800",
    "end": "907360"
  },
  {
    "text": "webassembly file so let's see",
    "start": "907360",
    "end": "909760"
  },
  {
    "text": "what the code looks like",
    "start": "909760",
    "end": "913720"
  },
  {
    "text": "we can see that the code is very",
    "start": "915120",
    "end": "916320"
  },
  {
    "text": "straightforward we have some type",
    "start": "916320",
    "end": "918480"
  },
  {
    "text": "request that it's any and type response",
    "start": "918480",
    "end": "920399"
  },
  {
    "text": "that is any and then we define a main",
    "start": "920399",
    "end": "922639"
  },
  {
    "text": "function that is going to take an input",
    "start": "922639",
    "end": "924399"
  },
  {
    "text": "and just echo that input and return the",
    "start": "924399",
    "end": "926800"
  },
  {
    "text": "input back to the color",
    "start": "926800",
    "end": "929040"
  },
  {
    "text": "so let's go to the process of building",
    "start": "929040",
    "end": "930959"
  },
  {
    "text": "this into webassembly",
    "start": "930959",
    "end": "934160"
  },
  {
    "text": "so as i mentioned before this is going",
    "start": "937759",
    "end": "939440"
  },
  {
    "text": "to um",
    "start": "939440",
    "end": "942240"
  },
  {
    "text": "invoke webpack and then invoke javi i",
    "start": "942240",
    "end": "944079"
  },
  {
    "text": "have a global installation of javi so",
    "start": "944079",
    "end": "946480"
  },
  {
    "text": "this is going to work",
    "start": "946480",
    "end": "948399"
  },
  {
    "text": "webpack has succeeded and then we're",
    "start": "948399",
    "end": "949920"
  },
  {
    "text": "just waiting on",
    "start": "949920",
    "end": "951680"
  },
  {
    "text": "javi to succeed once that is done let's",
    "start": "951680",
    "end": "954079"
  },
  {
    "text": "inspect the build file",
    "start": "954079",
    "end": "957519"
  },
  {
    "text": "as we can see we have the index uh dot",
    "start": "960320",
    "end": "962560"
  },
  {
    "text": "wasn't this index.wasm has",
    "start": "962560",
    "end": "965600"
  },
  {
    "text": "all the optimizations already in place",
    "start": "965600",
    "end": "967920"
  },
  {
    "text": "so let's verify that our code is working",
    "start": "967920",
    "end": "970560"
  },
  {
    "text": "as intended we're going to do so by",
    "start": "970560",
    "end": "972639"
  },
  {
    "text": "invoking this index.wasm",
    "start": "972639",
    "end": "975279"
  },
  {
    "text": "with",
    "start": "975279",
    "end": "976480"
  },
  {
    "text": "um",
    "start": "976480",
    "end": "978079"
  },
  {
    "text": "wasn't time",
    "start": "978079",
    "end": "981560"
  },
  {
    "text": "as we can see",
    "start": "992880",
    "end": "994240"
  },
  {
    "text": "we get the expected result we get the",
    "start": "994240",
    "end": "996000"
  },
  {
    "text": "log and then we get that input back so",
    "start": "996000",
    "end": "999279"
  },
  {
    "text": "that's it",
    "start": "999279",
    "end": "1001759"
  },
  {
    "text": "after having take a look at the demo",
    "start": "1005759",
    "end": "1007279"
  },
  {
    "text": "let's now talk about trade-offs talking",
    "start": "1007279",
    "end": "1009440"
  },
  {
    "text": "about trade-offs is important uh because",
    "start": "1009440",
    "end": "1011920"
  },
  {
    "text": "not everything is roses i mean there are",
    "start": "1011920",
    "end": "1014160"
  },
  {
    "text": "several things that",
    "start": "1014160",
    "end": "1016320"
  },
  {
    "text": "uh",
    "start": "1016320",
    "end": "1017279"
  },
  {
    "text": "we are",
    "start": "1017279",
    "end": "1018560"
  },
  {
    "text": "giving up in order to gain other things",
    "start": "1018560",
    "end": "1021600"
  },
  {
    "text": "um",
    "start": "1021600",
    "end": "1022560"
  },
  {
    "text": "and here is many performance like if",
    "start": "1022560",
    "end": "1024720"
  },
  {
    "text": "your use case requires to be the most",
    "start": "1024720",
    "end": "1027120"
  },
  {
    "text": "performant use case and you don't care",
    "start": "1027120",
    "end": "1028959"
  },
  {
    "text": "about developer experience then",
    "start": "1028959",
    "end": "1031038"
  },
  {
    "text": "javascript is probably not the fastest",
    "start": "1031039",
    "end": "1033120"
  },
  {
    "text": "option available it's probably not the",
    "start": "1033120",
    "end": "1034880"
  },
  {
    "text": "best option for you",
    "start": "1034880",
    "end": "1037199"
  },
  {
    "text": "in fact most instances of of our",
    "start": "1037199",
    "end": "1039438"
  },
  {
    "text": "benchmarks",
    "start": "1039439",
    "end": "1042079"
  },
  {
    "text": "we saw",
    "start": "1042319",
    "end": "1043678"
  },
  {
    "text": "a performance uh",
    "start": "1043679",
    "end": "1045678"
  },
  {
    "text": "impact of 400 to 600 microseconds so",
    "start": "1045679",
    "end": "1049600"
  },
  {
    "text": "this means that our javascript programs",
    "start": "1049600",
    "end": "1051679"
  },
  {
    "text": "where",
    "start": "1051679",
    "end": "1053120"
  },
  {
    "text": "around 400 or 600 microseconds is lower",
    "start": "1053120",
    "end": "1056080"
  },
  {
    "text": "than those uh written in assembly script",
    "start": "1056080",
    "end": "1059360"
  },
  {
    "text": "this is still fine for us because",
    "start": "1059360",
    "end": "1062720"
  },
  {
    "text": "everything is running under our slos",
    "start": "1062720",
    "end": "1067360"
  },
  {
    "text": "to be a bit more concrete there are",
    "start": "1067360",
    "end": "1069200"
  },
  {
    "text": "several aspects that we",
    "start": "1069200",
    "end": "1071919"
  },
  {
    "text": "know that developers are going to use",
    "start": "1071919",
    "end": "1074480"
  },
  {
    "text": "um",
    "start": "1074480",
    "end": "1075360"
  },
  {
    "text": "in in the programs that they write for",
    "start": "1075360",
    "end": "1078160"
  },
  {
    "text": "the shopify platform that we",
    "start": "1078160",
    "end": "1080400"
  },
  {
    "text": "wanted to inspect and assembly script",
    "start": "1080400",
    "end": "1082400"
  },
  {
    "text": "was faster",
    "start": "1082400",
    "end": "1083840"
  },
  {
    "text": "um",
    "start": "1083840",
    "end": "1084880"
  },
  {
    "text": "in things like floating point arithmetic",
    "start": "1084880",
    "end": "1087120"
  },
  {
    "text": "and string operations",
    "start": "1087120",
    "end": "1088799"
  },
  {
    "text": "now",
    "start": "1088799",
    "end": "1089679"
  },
  {
    "text": "not everything is bad we also had games",
    "start": "1089679",
    "end": "1091600"
  },
  {
    "text": "us",
    "start": "1091600",
    "end": "1092840"
  },
  {
    "text": "and mainly those gains where around",
    "start": "1092840",
    "end": "1096160"
  },
  {
    "text": "tooling language features now we can",
    "start": "1096160",
    "end": "1098320"
  },
  {
    "text": "access all the",
    "start": "1098320",
    "end": "1100160"
  },
  {
    "text": "most recent features of typescript or",
    "start": "1100160",
    "end": "1102080"
  },
  {
    "text": "javascript and then we have a huge",
    "start": "1102080",
    "end": "1104080"
  },
  {
    "text": "community in ecosystem from the",
    "start": "1104080",
    "end": "1105440"
  },
  {
    "text": "javascript and typescript world so this",
    "start": "1105440",
    "end": "1107840"
  },
  {
    "text": "is important and also",
    "start": "1107840",
    "end": "1109919"
  },
  {
    "text": "not surprising we had some gains in",
    "start": "1109919",
    "end": "1111840"
  },
  {
    "text": "terms of performance too uh it's",
    "start": "1111840",
    "end": "1114000"
  },
  {
    "text": "important to note that",
    "start": "1114000",
    "end": "1116160"
  },
  {
    "text": "javascript's regex",
    "start": "1116160",
    "end": "1117840"
  },
  {
    "text": "implementation was",
    "start": "1117840",
    "end": "1119360"
  },
  {
    "text": "almost twice as fast than the one that",
    "start": "1119360",
    "end": "1122160"
  },
  {
    "text": "is currently written in the same script",
    "start": "1122160",
    "end": "1124000"
  },
  {
    "text": "i'm not bringing this slide to bring the",
    "start": "1124000",
    "end": "1126240"
  },
  {
    "text": "you know a pure",
    "start": "1126240",
    "end": "1128240"
  },
  {
    "text": "um",
    "start": "1128240",
    "end": "1129520"
  },
  {
    "text": "language language performance but this",
    "start": "1129520",
    "end": "1131840"
  },
  {
    "text": "this is like relates to the three",
    "start": "1131840",
    "end": "1134000"
  },
  {
    "text": "buckets that we saw earlier",
    "start": "1134000",
    "end": "1136480"
  },
  {
    "text": "in which we could classify languages",
    "start": "1136480",
    "end": "1138720"
  },
  {
    "text": "and",
    "start": "1138720",
    "end": "1139840"
  },
  {
    "text": "this just hints that languages that are",
    "start": "1139840",
    "end": "1142880"
  },
  {
    "text": "designed exclusively for webassembly",
    "start": "1142880",
    "end": "1144400"
  },
  {
    "text": "given their maturity",
    "start": "1144400",
    "end": "1146080"
  },
  {
    "text": "might not have all the features that you",
    "start": "1146080",
    "end": "1148559"
  },
  {
    "text": "expect in a language or they might not",
    "start": "1148559",
    "end": "1150480"
  },
  {
    "text": "be as performant as languages that have",
    "start": "1150480",
    "end": "1153440"
  },
  {
    "text": "have been there",
    "start": "1153440",
    "end": "1155520"
  },
  {
    "text": "for quite some time now",
    "start": "1155520",
    "end": "1158720"
  },
  {
    "text": "to conclude the talk i would like to end",
    "start": "1158799",
    "end": "1160720"
  },
  {
    "text": "up with this general idea we've been",
    "start": "1160720",
    "end": "1163440"
  },
  {
    "text": "after exploring with javascript and",
    "start": "1163440",
    "end": "1165039"
  },
  {
    "text": "webassembly we've been uh seeing that",
    "start": "1165039",
    "end": "1168160"
  },
  {
    "text": "by doing this",
    "start": "1168160",
    "end": "1169840"
  },
  {
    "text": "by having this approach",
    "start": "1169840",
    "end": "1172320"
  },
  {
    "text": "in use cases that can afford it",
    "start": "1172320",
    "end": "1176559"
  },
  {
    "text": "the mix of high-level languages plus web",
    "start": "1176559",
    "end": "1178640"
  },
  {
    "text": "assembly gives a result of more secure",
    "start": "1178640",
    "end": "1182160"
  },
  {
    "text": "more performant and better developer",
    "start": "1182160",
    "end": "1184559"
  },
  {
    "text": "experience in apps again i'm making um",
    "start": "1184559",
    "end": "1188240"
  },
  {
    "text": "i have here this",
    "start": "1188240",
    "end": "1191120"
  },
  {
    "text": "start just to remind myself that this",
    "start": "1191120",
    "end": "1194240"
  },
  {
    "text": "statement is relative to our use case",
    "start": "1194240",
    "end": "1196000"
  },
  {
    "text": "but could be evaluated uh for other use",
    "start": "1196000",
    "end": "1198799"
  },
  {
    "text": "cases too",
    "start": "1198799",
    "end": "1200720"
  },
  {
    "text": "so thanks this is everything i have um i",
    "start": "1200720",
    "end": "1203600"
  },
  {
    "text": "have this handle here where you could",
    "start": "1203600",
    "end": "1205120"
  },
  {
    "text": "reach out in twitter or github my dms",
    "start": "1205120",
    "end": "1207919"
  },
  {
    "text": "are open if you have questions if you",
    "start": "1207919",
    "end": "1209679"
  },
  {
    "text": "have questions or",
    "start": "1209679",
    "end": "1211120"
  },
  {
    "text": "you just want to chat so thank you very",
    "start": "1211120",
    "end": "1212960"
  },
  {
    "text": "much",
    "start": "1212960",
    "end": "1215120"
  }
]