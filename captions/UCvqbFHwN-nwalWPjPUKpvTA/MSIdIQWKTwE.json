[
  {
    "text": "right hey thank you guys thank you everyone for joining this session uh",
    "start": "0",
    "end": "5160"
  },
  {
    "text": "hope the digestion didn't kick in right are we good huh all right",
    "start": "5160",
    "end": "10800"
  },
  {
    "text": "nice you should bring coffee for everyone man all right",
    "start": "10800",
    "end": "16139"
  },
  {
    "text": "all right so uh yeah again thank you for joining this session uh mainly today we're going to be talking about uh",
    "start": "16139",
    "end": "21960"
  },
  {
    "text": "observability using um in terms of service mesh capabilities",
    "start": "21960",
    "end": "27060"
  },
  {
    "text": "and what we can't do better okay there's many things going on today with ubpf",
    "start": "27060",
    "end": "33079"
  },
  {
    "text": "there's a bit of Market confusion about things Technologies we should use for",
    "start": "33079",
    "end": "38100"
  },
  {
    "text": "our uh service meshes there's multiple ones out there so uh things like this",
    "start": "38100",
    "end": "43920"
  },
  {
    "text": "talk uh I'm taking this example here istio because this is what I know but I",
    "start": "43920",
    "end": "50399"
  },
  {
    "text": "think this can fit any other service mesh technology right because monitoring",
    "start": "50399",
    "end": "56760"
  },
  {
    "text": "is something common for every single service mesh we all need to know what's going on our our cluster in between our",
    "start": "56760",
    "end": "63600"
  },
  {
    "text": "services okay so a little bit about me my name is Adam Saya I'm a field engineer at solo",
    "start": "63600",
    "end": "70080"
  },
  {
    "text": "so basically I just help uh prospects and customers with all their API",
    "start": "70080",
    "end": "76260"
  },
  {
    "text": "gateways questions and service mesh and recently I'm getting really interested into the eppf uh realm that's it's for",
    "start": "76260",
    "end": "83820"
  },
  {
    "text": "me a real good domain that we we should investigate into you know when we deal",
    "start": "83820",
    "end": "89400"
  },
  {
    "text": "with with application networking in general okay so today we gonna go",
    "start": "89400",
    "end": "95820"
  },
  {
    "text": "through a quick uh reminder about what actually why we should care about the service mesh at the first place right",
    "start": "95820",
    "end": "101880"
  },
  {
    "text": "and then we're going to take a look at I mean the pros and the cons of kind of",
    "start": "101880",
    "end": "107880"
  },
  {
    "text": "the actual things we do with the service mesh in terms of monitoring we're going",
    "start": "107880",
    "end": "112920"
  },
  {
    "text": "to talk about how can we improve this a bit how can we go to this extra mile",
    "start": "112920",
    "end": "118619"
  },
  {
    "text": "configuration optimization in that matter and I'm gonna do a quick demo",
    "start": "118619",
    "end": "124799"
  },
  {
    "text": "though the quick demo here is not part of any product it's just something I put together to kind of get the idea across",
    "start": "124799",
    "end": "131459"
  },
  {
    "text": "this may be implemented in other service meshes or should be an extension of SEO",
    "start": "131459",
    "end": "136680"
  },
  {
    "text": "as as a kind of this Main Service mesh I know and uh yeah I'm gonna have a quick",
    "start": "136680",
    "end": "142260"
  },
  {
    "text": "conclusion there and you know some questions I hope all right so let's start from",
    "start": "142260",
    "end": "148400"
  },
  {
    "text": "like scratch why actually we move to microservices we moved to microservices",
    "start": "148400",
    "end": "153480"
  },
  {
    "text": "because it's easy from operational complexity we have different teams different needs they need different",
    "start": "153480",
    "end": "159420"
  },
  {
    "text": "things right so if you have different microservices it's easy to manage we can always upgrade easily we can",
    "start": "159420",
    "end": "167640"
  },
  {
    "text": "scale them differently we can have all these fun things that comes with microservices I remember couple well",
    "start": "167640",
    "end": "174120"
  },
  {
    "text": "even just a couple years ago we used to deal with projects that has like months and months in terms of life cycle right",
    "start": "174120",
    "end": "181440"
  },
  {
    "text": "really so you we you wait for six months to just have one security patch and then you have to do a massive upgrade and",
    "start": "181440",
    "end": "188819"
  },
  {
    "text": "that was just a nightmare week for I used to take my ptos around that time so just to get out of that so",
    "start": "188819",
    "end": "196019"
  },
  {
    "text": "now with microservices things are way better okay uh way better in that matter and now every single team can just",
    "start": "196019",
    "end": "202440"
  },
  {
    "text": "schedule their own up upgrade at their own pace they can have the scaling their",
    "start": "202440",
    "end": "208019"
  },
  {
    "text": "microservices on their own terms I was really good in that specific thing now the thing that we",
    "start": "208019",
    "end": "214560"
  },
  {
    "text": "didn't really care about when we used to have moderate applications if you guys remember we used to have",
    "start": "214560",
    "end": "220500"
  },
  {
    "text": "um everything within the same components a meaning in terms of observability and knowing what's going on it is not to be",
    "start": "220500",
    "end": "227159"
  },
  {
    "text": "it used to be an easy thing okay I'll plug in a debugger there inside see what's going on anything from function",
    "start": "227159",
    "end": "233459"
  },
  {
    "text": "calls and seeing different from API calls everything was within contained within the same thing so no problems at",
    "start": "233459",
    "end": "240420"
  },
  {
    "text": "all in terms of monitoring now with microservices it's a different",
    "start": "240420",
    "end": "245459"
  },
  {
    "text": "story um we are moving to I don't know I have a thousands of services how am I going",
    "start": "245459",
    "end": "251519"
  },
  {
    "text": "to know where which one failed right there's no way out of the box to know which service failed my request unless",
    "start": "251519",
    "end": "258540"
  },
  {
    "text": "I'm adding some sort of metadata if I'm lucky that my microservice is returning",
    "start": "258540",
    "end": "264240"
  },
  {
    "text": "a result right and or I just have to go through every single I mean my lock",
    "start": "264240",
    "end": "269759"
  },
  {
    "text": "collection or it's a mess so how to improve this and",
    "start": "269759",
    "end": "275280"
  },
  {
    "text": "actually that was kind of the main premises of what a kind of a service mesh is service mesh is a tool that will",
    "start": "275280",
    "end": "281759"
  },
  {
    "text": "help us in different terms terms in in a in a microservice architecture",
    "start": "281759",
    "end": "288479"
  },
  {
    "text": "for mainly these three things floating Traffic Control in general so",
    "start": "288479",
    "end": "293940"
  },
  {
    "text": "obviously resiliency uh rerouting blue green Canary deployment of services and",
    "start": "293940",
    "end": "300419"
  },
  {
    "text": "all that stuff that's fine then security security and Transit",
    "start": "300419",
    "end": "305940"
  },
  {
    "text": "mainly on mtls between every single component every single mic Service uh",
    "start": "305940",
    "end": "311040"
  },
  {
    "text": "just to be safe since now that the services are scattered I have a larger attack surface I want to be saved there",
    "start": "311040",
    "end": "317100"
  },
  {
    "text": "but again one of the main things in the service mesh is observability so I need",
    "start": "317100",
    "end": "323820"
  },
  {
    "text": "to observe what's happening if something goes wrong I always need to know to go back to see exactly what happened",
    "start": "323820",
    "end": "331039"
  },
  {
    "text": "in you know going back to the right service that failed try to debug it and",
    "start": "331039",
    "end": "336120"
  },
  {
    "text": "you know just having a good monitoring stack on top of all my microservices so that's what services mesh service meshes",
    "start": "336120",
    "end": "343500"
  },
  {
    "text": "try to answer now things are that we have multiple",
    "start": "343500",
    "end": "350220"
  },
  {
    "text": "Technologies out there and most of them kind of face kind of the same problem is",
    "start": "350220",
    "end": "356400"
  },
  {
    "text": "that well first of all first of all just monitoring itself is hard from different",
    "start": "356400",
    "end": "363060"
  },
  {
    "text": "things you need to capture the right data you need to write to capture them the right spot you need you know that",
    "start": "363060",
    "end": "369300"
  },
  {
    "text": "just that specific concept is kind of complicated plus a lot of service meshes out there uh will still we still use",
    "start": "369300",
    "end": "376800"
  },
  {
    "text": "proxies proxies are a main component of a lot of service meshes and are important important for all the things I",
    "start": "376800",
    "end": "382979"
  },
  {
    "text": "talked about previously like security like traffic control I mean even if that",
    "start": "382979",
    "end": "389160"
  },
  {
    "text": "we can have other tools doing it but also in terms of monitoring today we use",
    "start": "389160",
    "end": "394560"
  },
  {
    "text": "proxies a lot in terms of monitoring now the problem with that is that if my",
    "start": "394560",
    "end": "402120"
  },
  {
    "text": "if my like talking about sidecars or even sidecar lists if my traffic is not",
    "start": "402120",
    "end": "409020"
  },
  {
    "text": "going through that proxy nothing is getting created right so nothing gonna get generated if there is no",
    "start": "409020",
    "end": "417120"
  },
  {
    "text": "um if there's no proxy in there and that's not near real I realized the reality of the world right we are not in",
    "start": "417120",
    "end": "424440"
  },
  {
    "text": "an environment where we can just go and put sidecars and proxies everywhere I",
    "start": "424440",
    "end": "430139"
  },
  {
    "text": "don't think it's a good idea either who is going to let's say I'm a big company and tomorrow I want to adopt service",
    "start": "430139",
    "end": "435600"
  },
  {
    "text": "mesh am I just gonna go and just like day and night and replace all my",
    "start": "435600",
    "end": "440940"
  },
  {
    "text": "microservices with like a sidecar or injected traffic a proxy there I don't",
    "start": "440940",
    "end": "446460"
  },
  {
    "text": "think it's a good approach I think we should do it gradually always start with like a safe application test if everything is well",
    "start": "446460",
    "end": "453240"
  },
  {
    "text": "then start migrating new applications add them to the mesh maybe not into mtls",
    "start": "453240",
    "end": "459000"
  },
  {
    "text": "security now maybe just permissive for now then add security gradually but this",
    "start": "459000",
    "end": "464520"
  },
  {
    "text": "also affects monitoring meaning if you do things gradually you're also observing gradually and doesn't make",
    "start": "464520",
    "end": "471120"
  },
  {
    "text": "sense because your application if you have a calling B calling C calling D or",
    "start": "471120",
    "end": "477300"
  },
  {
    "text": "if a and b are in the service mesh well B and C are not and meaning like to more if you're observing your stack you're",
    "start": "477300",
    "end": "483780"
  },
  {
    "text": "going to see a and b you're going to have metrics around A and B but nothing for CNB and at the end so you are half",
    "start": "483780",
    "end": "491160"
  },
  {
    "text": "monitoring your stack and this is something we should look into now",
    "start": "491160",
    "end": "497520"
  },
  {
    "text": "um that's basically what I was just talking about now uh we need to go gradually and also in",
    "start": "497580",
    "end": "504960"
  },
  {
    "text": "terms of like proxies proxies uh are expensive right we we can debate about",
    "start": "504960",
    "end": "510479"
  },
  {
    "text": "that all day they are expensive because they are actually a component to add to your infrastructure so if you add them",
    "start": "510479",
    "end": "516779"
  },
  {
    "text": "you need to add them for the right things you need to add them for example L7 traffic are really well done using",
    "start": "516779",
    "end": "522899"
  },
  {
    "text": "proxies but maybe for monitoring maybe there's something else and maybe we should look into something different now",
    "start": "522899",
    "end": "530220"
  },
  {
    "text": "here is an example of kind of a traffic flow flying through you know from",
    "start": "530220",
    "end": "536700"
  },
  {
    "text": "application to a proxy that proxy can be a sidecar like in a traditional sidecar approach",
    "start": "536700",
    "end": "542040"
  },
  {
    "text": "or it can be um even you know in the side card less world where we have still a proxy here",
    "start": "542040",
    "end": "549180"
  },
  {
    "text": "somewhere either on the Node side or actually on the on the cluster itself it",
    "start": "549180",
    "end": "554459"
  },
  {
    "text": "still goes in the same way you're still gonna go from the application through the kernel socket TCP stack going to",
    "start": "554459",
    "end": "561480"
  },
  {
    "text": "network going all the way up to their proxy again going through the network again and then going to the physical layer to",
    "start": "561480",
    "end": "568500"
  },
  {
    "text": "send the traffic somewhere else so all this is important I mean we still need it but",
    "start": "568500",
    "end": "574500"
  },
  {
    "text": "what if we can optimize this in term of metrics I don't want the",
    "start": "574500",
    "end": "580620"
  },
  {
    "text": "proxy to generate my metrics until it goes all the way down through all this stuff and actually here we're getting a",
    "start": "580620",
    "end": "587040"
  },
  {
    "text": "big premise saying that I'm actually successfully calling the proxies imagine",
    "start": "587040",
    "end": "592800"
  },
  {
    "text": "if something felt even within the kernel like I don't know like things happen right like different versions of",
    "start": "592800",
    "end": "599519"
  },
  {
    "text": "different things just a problem with with the infra itself how can I know",
    "start": "599519",
    "end": "605160"
  },
  {
    "text": "what's going on wrong with my environment so how can we enhance this how can you",
    "start": "605160",
    "end": "611940"
  },
  {
    "text": "improve on monitoring using uh service mesh in general",
    "start": "611940",
    "end": "618120"
  },
  {
    "text": "so I think the thing we should look into is ebpf okay that was the kind of core of",
    "start": "618120",
    "end": "625860"
  },
  {
    "text": "this talk how can we use eppf to improve monitoring in the service mesh",
    "start": "625860",
    "end": "633240"
  },
  {
    "text": "who he heard of evpf I'm pretty sure it's everyone's so hard topic so okay awesome who is using eppf in some manner",
    "start": "633240",
    "end": "640740"
  },
  {
    "text": "okay so we have a good crowd here so um ebpf",
    "start": "640740",
    "end": "646620"
  },
  {
    "text": "Laser Technology that is has been implemented um that deals directly with the kernel",
    "start": "646620",
    "end": "653459"
  },
  {
    "text": "I'm not gonna go too much deep into this topic uh but I just want to stress the",
    "start": "653459",
    "end": "659339"
  },
  {
    "text": "fact that we are not dealing uh we're not dealing with the same problems we used to have with like a proxy right now",
    "start": "659339",
    "end": "666240"
  },
  {
    "text": "we have something lower that deals directly with the kernel to interact",
    "start": "666240",
    "end": "671700"
  },
  {
    "text": "with to watch to report to modify uh data so there is a way to interact even",
    "start": "671700",
    "end": "678060"
  },
  {
    "text": "at the layer really close to really close to the kernel and now even close",
    "start": "678060",
    "end": "683880"
  },
  {
    "text": "to obviously the physical layer we're going really deep there so how it works",
    "start": "683880",
    "end": "690000"
  },
  {
    "text": "this is basically the idea behind it the idea",
    "start": "690000",
    "end": "695279"
  },
  {
    "text": "behind it even in Linux you have well kernel space so you have in term of",
    "start": "695279",
    "end": "700740"
  },
  {
    "text": "memory separation you have a kernel space where you're actually kernel is running it's doing its stuff and",
    "start": "700740",
    "end": "707160"
  },
  {
    "text": "actually Linux or any you know we are they are really strict on what things can run there right we don't want to run",
    "start": "707160",
    "end": "714240"
  },
  {
    "text": "anything that is can impact my machine on the Kernel because obviously we want",
    "start": "714240",
    "end": "720300"
  },
  {
    "text": "the machine to run but if the application fails well the application fails it's the user's problem not really",
    "start": "720300",
    "end": "726420"
  },
  {
    "text": "the kernel problem this is why there's a separation between a kernel space and a user space and what we see usually for a",
    "start": "726420",
    "end": "733920"
  },
  {
    "text": "product from a proxy perspective the proxy runs on the user space right it's doing you know obviously it's doing like",
    "start": "733920",
    "end": "741120"
  },
  {
    "text": "traffic shifting monitoring all that stuff that's fine now the users pay the the kernel space we don't interact with",
    "start": "741120",
    "end": "748019"
  },
  {
    "text": "it traditionally okay in a service mesh context and how it works in ebpf we can",
    "start": "748019",
    "end": "755880"
  },
  {
    "text": "create a program we can create some code this code gonna be verified making sure",
    "start": "755880",
    "end": "762240"
  },
  {
    "text": "that's not impacting anything and then can be running on the Kernel side it's going to listen for events doing some",
    "start": "762240",
    "end": "769320"
  },
  {
    "text": "reporting doing like listening to things and you know we can even like modify stuff but mostly in this monitoring",
    "start": "769320",
    "end": "775940"
  },
  {
    "text": "discussion we can monitor things in the kernel then there is a way to send data",
    "start": "775940",
    "end": "783660"
  },
  {
    "text": "to the user space where we can report and generate metrics and create primitive stack thing uh Prometheus",
    "start": "783660",
    "end": "790620"
  },
  {
    "text": "metrics and so on okay so from efficiency here in terms of monitoring we're not talking",
    "start": "790620",
    "end": "796500"
  },
  {
    "text": "about user space if my proxy is not there and stuff like that that's a different discussion now we are going",
    "start": "796500",
    "end": "803040"
  },
  {
    "text": "all the way down to the kernel to uh observe what's happening so this is",
    "start": "803040",
    "end": "809279"
  },
  {
    "text": "really powerful meaning that first it can be way more effective than a traditional approach okay meaning",
    "start": "809279",
    "end": "817019"
  },
  {
    "text": "well we don't need a proxy we don't need to go all the way through all this stuff we just we have the data there so let's",
    "start": "817019",
    "end": "822300"
  },
  {
    "text": "just consume it to expose it um it is lightweight it is effective it",
    "start": "822300",
    "end": "828360"
  },
  {
    "text": "is fast it is not on the request path like I mean from from a proxy perspective so there's a lot of things",
    "start": "828360",
    "end": "834600"
  },
  {
    "text": "that we can use from abpf now that's how it should look like okay we",
    "start": "834600",
    "end": "841139"
  },
  {
    "text": "still have our application we still have our user uh user space to run our proxy",
    "start": "841139",
    "end": "847200"
  },
  {
    "text": "to deal with L7 type things I don't know like retries and oh even retries can be networking but let's say you know",
    "start": "847200",
    "end": "853440"
  },
  {
    "text": "security UI DC all this stuff that we want to do sometimes at the proxy layer but the ebpf part can run within the",
    "start": "853440",
    "end": "860639"
  },
  {
    "text": "kernel and there we are collecting data and we are sending it we are creating metrics and from that uh perspective now",
    "start": "860639",
    "end": "869459"
  },
  {
    "text": "we can observe everything going in the cluster so with what that means I don't know what's the difference now that we",
    "start": "869459",
    "end": "876600"
  },
  {
    "text": "have eppf running the kernel we don't need any proxy to report any",
    "start": "876600",
    "end": "883019"
  },
  {
    "text": "metric again meaning if I'm introducing a service mesh",
    "start": "883019",
    "end": "889860"
  },
  {
    "text": "I don't have to do it gradual like my monitoring will not be gradual at the first time when I installed my service",
    "start": "889860",
    "end": "897300"
  },
  {
    "text": "mesh even if the traffic is not captured and redirected and part of the service mesh it's still monitored end to end",
    "start": "897300",
    "end": "904320"
  },
  {
    "text": "this is really powerful right now I think if I have to stress only one",
    "start": "904320",
    "end": "910079"
  },
  {
    "text": "thing during this call doing this this talk is this thing we should not we should really look into",
    "start": "910079",
    "end": "915779"
  },
  {
    "text": "EPF to monitor all our stack and we still gradually add our services to",
    "start": "915779",
    "end": "921899"
  },
  {
    "text": "service mesh to our service mesh okay so um if I want to take an example going",
    "start": "921899",
    "end": "927180"
  },
  {
    "text": "back to my ABCD services so I have four Services running there",
    "start": "927180",
    "end": "932639"
  },
  {
    "text": "even if I'm adding my only the service A and B to my service mesh see and these",
    "start": "932639",
    "end": "939000"
  },
  {
    "text": "are also monitored meaning if I'm making a call to a I'm going to see a b c d so",
    "start": "939000",
    "end": "945300"
  },
  {
    "text": "full monitoring over my cluster but service mesh is partially on two services so that's really powerful",
    "start": "945300",
    "end": "952980"
  },
  {
    "text": "now uh again how it works with EPF you have",
    "start": "952980",
    "end": "958199"
  },
  {
    "text": "you're gonna you're gonna run like a code on the Kernel this code will listen to different things like network if if",
    "start": "958199",
    "end": "965820"
  },
  {
    "text": "some if a is calling b or this is happening reports it put it into uh a",
    "start": "965820",
    "end": "972660"
  },
  {
    "text": "map we call it right so we put it in the map on on the user space on the other side we get this data and we do whatever",
    "start": "972660",
    "end": "979800"
  },
  {
    "text": "we want with it we can basically create Prometheus metric from it and actually",
    "start": "979800",
    "end": "987180"
  },
  {
    "text": "this is what I'm gonna show um here I'm gonna use a pro like a tool",
    "start": "987180",
    "end": "994800"
  },
  {
    "text": "that we created internally at solo called uh Bumblebee bumblebee is",
    "start": "994800",
    "end": "1000560"
  },
  {
    "text": "basically a tool that help us package ebpf programs",
    "start": "1000560",
    "end": "1006320"
  },
  {
    "text": "and automatically you can have the same Docker experience with a kind of an ebpf",
    "start": "1006320",
    "end": "1012560"
  },
  {
    "text": "program where you can package it push it in the registry and then run it into your cluster but the good thing there",
    "start": "1012560",
    "end": "1019459"
  },
  {
    "text": "EBP bumblebee also automatically create Prometheus metrics from ebf programs so",
    "start": "1019459",
    "end": "1025819"
  },
  {
    "text": "you just have to deal with the ebpf side of it this is just an example I'm not saying that bumblebee has to be used",
    "start": "1025819",
    "end": "1032240"
  },
  {
    "text": "service mesh or I'm just stressing that this technology whatever I'm showing",
    "start": "1032240",
    "end": "1037819"
  },
  {
    "text": "right now can be tomorrow captured and be part of let's say example istio okay",
    "start": "1037819",
    "end": "1043280"
  },
  {
    "text": "so you're going to install istio you're going to have everything like either the service you know the the sidecar or",
    "start": "1043280",
    "end": "1050900"
  },
  {
    "text": "the sidecar desk version but you're gonna have the full monitoring over your stack and actually gradually adding your",
    "start": "1050900",
    "end": "1056720"
  },
  {
    "text": "services to the service mesh so let's see how we can do that using uh using",
    "start": "1056720",
    "end": "1062780"
  },
  {
    "text": "bumblebee in this case so ah yeah good thing bumblebee is an open",
    "start": "1062780",
    "end": "1071059"
  },
  {
    "text": "source solution actually I can show you the repo here we're happy to have any contribution going on too uh to the tool",
    "start": "1071059",
    "end": "1079700"
  },
  {
    "text": "um you know check it out it's going to be a good entry point for actually that's a good thing for me for example",
    "start": "1079700",
    "end": "1085700"
  },
  {
    "text": "where I'm not coming from kind of the the L Ford Network I'm more into you",
    "start": "1085700",
    "end": "1092840"
  },
  {
    "text": "know I know proxies I know service mesh but I'm learning ebpf for me this is a",
    "start": "1092840",
    "end": "1098840"
  },
  {
    "text": "great tool because it actually helped me care about my kernel program without",
    "start": "1098840",
    "end": "1105760"
  },
  {
    "text": "dealing like you know thinking about my user space program right so I'll show",
    "start": "1105760",
    "end": "1111919"
  },
  {
    "text": "you this in a second so let's go back to this",
    "start": "1111919",
    "end": "1117340"
  },
  {
    "text": "um this first step is basically just installing Bumblebee and I'm gonna create it here",
    "start": "1117860",
    "end": "1125240"
  },
  {
    "text": "now this is being downloaded then I'm gonna be doing a b in it which",
    "start": "1125240",
    "end": "1131840"
  },
  {
    "text": "is creating my abpf program I want it in C",
    "start": "1131840",
    "end": "1137780"
  },
  {
    "text": "I wanna listen to the network capabilities okay so actually the",
    "start": "1137780",
    "end": "1143120"
  },
  {
    "text": "service mesh probably going to be using this file system is not really important in that context let's say we want a",
    "start": "1143120",
    "end": "1149360"
  },
  {
    "text": "network that's just type of like uh I was talking about the map you know we use a map that sends data from the",
    "start": "1149360",
    "end": "1156500"
  },
  {
    "text": "kernel space to user space in this case we're going to use uh well we're going to use a hashmap",
    "start": "1156500",
    "end": "1163880"
  },
  {
    "text": "and then or you know what I'm probably gonna just go back to",
    "start": "1163880",
    "end": "1169660"
  },
  {
    "text": "re-init and create it with ring buffer",
    "start": "1169660",
    "end": "1175400"
  },
  {
    "text": "then I'm going to be using let's say I just want to print this and then I'm going to call it like prop",
    "start": "1175400",
    "end": "1181760"
  },
  {
    "text": "C all right here is created now let's uh",
    "start": "1181760",
    "end": "1187460"
  },
  {
    "text": "let's just compile it go back here I'm gonna go back to this ebpf program in a",
    "start": "1187460",
    "end": "1193820"
  },
  {
    "text": "second all right I want to show you first how an ebpf",
    "start": "1193820",
    "end": "1200480"
  },
  {
    "text": "program uh look like so here is you don't have to get you we don't have to",
    "start": "1200480",
    "end": "1206720"
  },
  {
    "text": "get into too much detail we're not here to understand like abbf code I'm just saying like this code imagine that being",
    "start": "1206720",
    "end": "1214400"
  },
  {
    "text": "packaged with your service mesh so this is what gets created behind the scenes for you when you install a service mesh",
    "start": "1214400",
    "end": "1220700"
  },
  {
    "text": "and if we go back to it here if I take a look at what's happening I can uh so we",
    "start": "1220700",
    "end": "1228320"
  },
  {
    "text": "use something we can we call K probes that can I just listen on events and here if what I'm doing is that I'm",
    "start": "1228320",
    "end": "1237080"
  },
  {
    "text": "listening to two events when we get uh you know the the socket and exit on it",
    "start": "1237080",
    "end": "1243620"
  },
  {
    "text": "and from there I'm triggering a function so that's super kind of easy explanation",
    "start": "1243620",
    "end": "1249380"
  },
  {
    "text": "of what we're doing here we're listening to the network stack if something happening we are getting this data Putin",
    "start": "1249380",
    "end": "1255860"
  },
  {
    "text": "is in a map and that's going to be pushed back to my user space all right that's it so this one will",
    "start": "1255860",
    "end": "1263720"
  },
  {
    "text": "monitor communication between A and B okay every time something happened between two IPS they get captured and",
    "start": "1263720",
    "end": "1271460"
  },
  {
    "text": "put into this uh address where it's like service destination and and",
    "start": "1271460",
    "end": "1278799"
  },
  {
    "text": "Source doesn't address and destination address this data can gonna be captured all right",
    "start": "1278799",
    "end": "1285620"
  },
  {
    "text": "let's build this thing so here there we go we build it",
    "start": "1285620",
    "end": "1293200"
  },
  {
    "text": "is going to be running for a second here and",
    "start": "1293419",
    "end": "1301059"
  },
  {
    "text": "should be fine one two",
    "start": "1302480",
    "end": "1307658"
  },
  {
    "text": "all right so while this is compiling one's going to be ready we're going to be able to use yeah there you go now",
    "start": "1308780",
    "end": "1315260"
  },
  {
    "text": "that we have this program compiled now we should we should be able to use it so now let's see this is uh ready we should",
    "start": "1315260",
    "end": "1322640"
  },
  {
    "text": "push it to a registry as I mentioned earlier bumblebee allows to create",
    "start": "1322640",
    "end": "1329000"
  },
  {
    "text": "programs and push them to like a registry to be reused like a kind of same Docker experience we can have and",
    "start": "1329000",
    "end": "1335240"
  },
  {
    "text": "then now that is running um now that's uh bills we can actually run it and if we run it",
    "start": "1335240",
    "end": "1343460"
  },
  {
    "text": "we're going to see that here okay we see data captured between two pods and every",
    "start": "1343460",
    "end": "1351320"
  },
  {
    "text": "time we're going to have an IP here it's going to be monitored and going to be incremented this is the number of calls",
    "start": "1351320",
    "end": "1356360"
  },
  {
    "text": "between this IP and the other IP okay so we have this this is awesome now",
    "start": "1356360",
    "end": "1362720"
  },
  {
    "text": "let's think about Primitives metrics in this case if I go back to my terminal",
    "start": "1362720",
    "end": "1369380"
  },
  {
    "text": "and and make a call here to this to the Bumblebee program I'm gonna see this",
    "start": "1369380",
    "end": "1375159"
  },
  {
    "text": "automatically created metrics for you know for the events happening between",
    "start": "1375159",
    "end": "1381320"
  },
  {
    "text": "this address and the other address and you see the accounts incremented here so",
    "start": "1381320",
    "end": "1386360"
  },
  {
    "text": "this was an example only for",
    "start": "1386360",
    "end": "1391580"
  },
  {
    "text": "um that's an example here only for Destination Source uh Source address to destination address but a lot of things",
    "start": "1391580",
    "end": "1398600"
  },
  {
    "text": "can be monitored using ebpf way more than a traditional proxy okay because",
    "start": "1398600",
    "end": "1404539"
  },
  {
    "text": "now we have access to the kernel we can listen to when a lot of many different",
    "start": "1404539",
    "end": "1409580"
  },
  {
    "text": "things that we should never have access when we get uh you know when monitor using a proxy",
    "start": "1409580",
    "end": "1415340"
  },
  {
    "text": "all right so this is done now let's actually build a grafana",
    "start": "1415340",
    "end": "1422179"
  },
  {
    "text": "dashboard that would use this metrics this ebpf metrics to build something",
    "start": "1422179",
    "end": "1429559"
  },
  {
    "text": "all right it's going to take a second here there you go we are starting",
    "start": "1429559",
    "end": "1435500"
  },
  {
    "text": "I'm going to create a set of applications so take think about this set of application as your app that you",
    "start": "1435500",
    "end": "1442100"
  },
  {
    "text": "want to introduce to your service mesh and maybe you don't want to introduce everything maybe you just want to",
    "start": "1442100",
    "end": "1447320"
  },
  {
    "text": "introduce the product based service and all the other set of services gonna be not in the mesh for now so",
    "start": "1447320",
    "end": "1456080"
  },
  {
    "text": "first of all I'm going to create my services",
    "start": "1456080",
    "end": "1462559"
  },
  {
    "text": "now that they are created I can uh well I can deploy Prometheus because I want",
    "start": "1462559",
    "end": "1467900"
  },
  {
    "text": "to save these metrics right somewhere this is created here the namespace first",
    "start": "1467900",
    "end": "1473539"
  },
  {
    "text": "and then we are installing Prometheus I'm going to take a second to be ready",
    "start": "1473539",
    "end": "1480159"
  },
  {
    "text": "after that we're going to deploy the ebpf program we just created into our",
    "start": "1480159",
    "end": "1486140"
  },
  {
    "text": "cluster think about that as we are installing our service mesh so behind the scene this is happening okay",
    "start": "1486140",
    "end": "1492980"
  },
  {
    "text": "foreign I think the network is a bit slow here",
    "start": "1492980",
    "end": "1501880"
  },
  {
    "text": "and at the end we are going just to create uh install grafana and have this",
    "start": "1503900",
    "end": "1510860"
  },
  {
    "text": "graph exporter which transformed basically we'll listen also to the cube services and transform that into a graph",
    "start": "1510860",
    "end": "1517520"
  },
  {
    "text": "data so here let's deploy Bumblebee",
    "start": "1517520",
    "end": "1523340"
  },
  {
    "text": "again this is just an example of what you can do with evpf and then we're going to use a pod monitor a pod monitor",
    "start": "1523340",
    "end": "1530240"
  },
  {
    "text": "in current in Primitives just help us go reach out to certain parts get on some",
    "start": "1530240",
    "end": "1536120"
  },
  {
    "text": "address some some uh some metrics from them and put them in in Prometheus right",
    "start": "1536120",
    "end": "1541340"
  },
  {
    "text": "so the Pod monitor got created now we can generate some traffic",
    "start": "1541340",
    "end": "1548779"
  },
  {
    "text": "right this is going through my Gateway I'm feeding I'm feeding data to",
    "start": "1548779",
    "end": "1554900"
  },
  {
    "text": "Prometheus through this so what's happening right now I'm making calls to my application I just deployed but",
    "start": "1554900",
    "end": "1561380"
  },
  {
    "text": "behind the scene I have the ebpf program running so it's listening to this data it's automatically pushing that into uh",
    "start": "1561380",
    "end": "1569779"
  },
  {
    "text": "like creating a Prometheus format for it and then they have the Pod monitor that gathered grab this data and put it into",
    "start": "1569779",
    "end": "1576620"
  },
  {
    "text": "uh Prometheus and the last step obviously is just using uh uh grafana to",
    "start": "1576620",
    "end": "1582860"
  },
  {
    "text": "show this data so this is created and this is fine now",
    "start": "1582860",
    "end": "1588020"
  },
  {
    "text": "let's create this and that's all we need to do",
    "start": "1588020",
    "end": "1594020"
  },
  {
    "text": "now we're going to create grafana",
    "start": "1594020",
    "end": "1599179"
  },
  {
    "text": "this is created it's going to take a second here for grafana to get to get ready",
    "start": "1599179",
    "end": "1605299"
  },
  {
    "text": "uh let's see but Dash",
    "start": "1605299",
    "end": "1610820"
  },
  {
    "text": "capital a all right it should be all right everything's",
    "start": "1610820",
    "end": "1617059"
  },
  {
    "text": "running now let's take a look at grafana I'm clicking here",
    "start": "1617059",
    "end": "1622220"
  },
  {
    "text": "just loading first time starting admin admins super secure password",
    "start": "1622220",
    "end": "1630020"
  },
  {
    "text": "skip and then I can do something like now so now we have data we have the ebpf data",
    "start": "1630020",
    "end": "1637460"
  },
  {
    "text": "directly in grafana in in Primitives and now we can show like you can use it in grafina so again just let's say create a",
    "start": "1637460",
    "end": "1643580"
  },
  {
    "text": "new dashboard and create new one here doesn't matter oops",
    "start": "1643580",
    "end": "1649100"
  },
  {
    "text": "a uh uh a new dashboard I'm gonna add a new",
    "start": "1649100",
    "end": "1655880"
  },
  {
    "text": "panel here this is fake data but I can actually add",
    "start": "1655880",
    "end": "1661100"
  },
  {
    "text": "here I can go back to uh go back to the main I'm gonna add",
    "start": "1661100",
    "end": "1668360"
  },
  {
    "text": "actually a data source for my graph by my My Graph data so ebpf data the fppf",
    "start": "1668360",
    "end": "1675740"
  },
  {
    "text": "data are in Primitives and I can use like I can I can monitor I can create graph with it but if you want to use a",
    "start": "1675740",
    "end": "1682520"
  },
  {
    "text": "kind of a graph representation I needed a kind of an exporter there that creates a structure for for like a graph a graph",
    "start": "1682520",
    "end": "1689960"
  },
  {
    "text": "service and for that I'm going to be using this node graph API",
    "start": "1689960",
    "end": "1697039"
  },
  {
    "text": "and then I'm going to add this address for my source",
    "start": "1697039",
    "end": "1702740"
  },
  {
    "text": "save and test now we are good oh actually we don't have to have all this",
    "start": "1702740",
    "end": "1708500"
  },
  {
    "text": "space save and test there you go now let's go back to create",
    "start": "1708500",
    "end": "1714320"
  },
  {
    "text": "a dashboard new one new dashboard new panel and this",
    "start": "1714320",
    "end": "1721400"
  },
  {
    "text": "time I want to have let's say everything it doesn't doesn't really",
    "start": "1721400",
    "end": "1726740"
  },
  {
    "text": "matter um and then if I want to go to my here I'm going to just do a node graph",
    "start": "1726740",
    "end": "1734179"
  },
  {
    "text": "and there you go there it is you see now we have I don't",
    "start": "1734179",
    "end": "1741020"
  },
  {
    "text": "know if I can like put it smaller here but here is a representation I don't know if you can see but this is going",
    "start": "1741020",
    "end": "1747500"
  },
  {
    "text": "this is kind of my microservice representation traffic going from my",
    "start": "1747500",
    "end": "1753559"
  },
  {
    "text": "service product pages with UI all the way down to my other microservices and",
    "start": "1753559",
    "end": "1760340"
  },
  {
    "text": "if you can see I have this full monitoring without even a service mesh at this point right I'm not installing I",
    "start": "1760340",
    "end": "1768380"
  },
  {
    "text": "didn't install istio or install anything else this is just part of what evpf can",
    "start": "1768380",
    "end": "1773419"
  },
  {
    "text": "do for us in that matter in the monitoring uh you know realm now let's",
    "start": "1773419",
    "end": "1779720"
  },
  {
    "text": "go back quickly to have a conclusion here on what we should you know what",
    "start": "1779720",
    "end": "1785360"
  },
  {
    "text": "should care about ebpf for monitoring it's great it has no impact on the request path so we're not adding any",
    "start": "1785360",
    "end": "1790760"
  },
  {
    "text": "proxies this is awesome it's lightweight it's actually on the Kernel it runs proxies runs in the user",
    "start": "1790760",
    "end": "1797779"
  },
  {
    "text": "space eppf they run on the Kernel side and they have actually we can report data to your space but it's kind of have",
    "start": "1797779",
    "end": "1803840"
  },
  {
    "text": "a lower footprint on what's happening in the proxies we need the proxy to have",
    "start": "1803840",
    "end": "1810380"
  },
  {
    "text": "metrics though in ebpf we don't have we don't need anything we can just observe directly from the kernel the thing is",
    "start": "1810380",
    "end": "1816740"
  },
  {
    "text": "with proxy we have a good understanding of L7 out of the box with eppf we have that we still needs kind of a lot of",
    "start": "1816740",
    "end": "1823700"
  },
  {
    "text": "lots of work I have my colleague Aiden that did a great talk yesterday regarding what we can do with L7",
    "start": "1823700",
    "end": "1829840"
  },
  {
    "text": "I invite you guys to to check his stock now",
    "start": "1829840",
    "end": "1835520"
  },
  {
    "text": "um things are that will ebpf replace proxies in general and uh personally I",
    "start": "1835520",
    "end": "1841820"
  },
  {
    "text": "don't believe that I think we're still in kind of the near future this is going to be really complicated why uh we",
    "start": "1841820",
    "end": "1848299"
  },
  {
    "text": "should not think about a service mesh as a whole like we need basically all",
    "start": "1848299",
    "end": "1854659"
  },
  {
    "text": "everything all together uh like using the same technology like like I need Envoy that does all the things or I need",
    "start": "1854659",
    "end": "1862100"
  },
  {
    "text": "this program to do everything we need to use the right tools for the right things if monitoring means if for the",
    "start": "1862100",
    "end": "1869419"
  },
  {
    "text": "monitoring it means it's more effective and faster and better well let's use ebpf but if it's L7 where I need a",
    "start": "1869419",
    "end": "1877159"
  },
  {
    "text": "better understanding of my stack it's more Dynamic it's more complex I need that on the user space well I still use",
    "start": "1877159",
    "end": "1883279"
  },
  {
    "text": "them for other technology right so I'm just stressing the fact that tomorrow we should really think about stop like you",
    "start": "1883279",
    "end": "1890960"
  },
  {
    "text": "know being kind of in this which technology we should use for everything let's think",
    "start": "1890960",
    "end": "1896960"
  },
  {
    "text": "about Technologies and just use the best out of every one uh I have one minute",
    "start": "1896960",
    "end": "1902600"
  },
  {
    "text": "left just for the conclusion here eppf is super powerful and I invite you",
    "start": "1902600",
    "end": "1909080"
  },
  {
    "text": "guys to take a look at all the features we can provide with it okay try to to see if you guys want help uh I mean eat",
    "start": "1909080",
    "end": "1916760"
  },
  {
    "text": "bumblebees and open source products you can take a look there as first start for ebbf programs uh ABP if not replace",
    "start": "1916760",
    "end": "1924020"
  },
  {
    "text": "traditional capabilities of uh sidecars and proxies in these in near term it's",
    "start": "1924020",
    "end": "1929419"
  },
  {
    "text": "evolving we'll see where it goes but for now it's not it's not there yet proxies and EPF programs can completely run",
    "start": "1929419",
    "end": "1935720"
  },
  {
    "text": "together uh we showed that today we can have monitoring done by ebpf L7 all",
    "start": "1935720",
    "end": "1942200"
  },
  {
    "text": "still done by our traditional proxies with that being said this is the end of",
    "start": "1942200",
    "end": "1948740"
  },
  {
    "text": "my talk and thank you guys for listening to me",
    "start": "1948740",
    "end": "1953380"
  },
  {
    "text": "[Applause] all right uh thanks Adam for this presentation we have a few minutes for",
    "start": "1954180",
    "end": "1960860"
  },
  {
    "text": "uh quick uh questions and uh over there I will bring the",
    "start": "1960860",
    "end": "1966500"
  },
  {
    "text": "microphone foreign my question is so",
    "start": "1966500",
    "end": "1974600"
  },
  {
    "text": "for this to be used comprehensively uh developers would have to",
    "start": "1974600",
    "end": "1979700"
  },
  {
    "text": "um uh create the applications on a specialized um container right",
    "start": "1979700",
    "end": "1985940"
  },
  {
    "text": "uh so do you mean like from implementation of the eppf program itself yeah yeah",
    "start": "1985940",
    "end": "1991700"
  },
  {
    "text": "because it seemed like the uh you had like a special code container yeah yeah so no",
    "start": "1991700",
    "end": "1997519"
  },
  {
    "text": "um well that was because of bumblebees the tool that we use for for that matter uh things can be different plus actually",
    "start": "1997519",
    "end": "2005380"
  },
  {
    "text": "from a service mesh user honestly you should not care about this they should be embedded within the service mesh",
    "start": "2005380",
    "end": "2012100"
  },
  {
    "text": "technology you're using this code I showed you all this mechanism that get deployed to monitor everything that",
    "start": "2012100",
    "end": "2017860"
  },
  {
    "text": "should be just part of like your install you install that it's running in your cluster it has all the metrics",
    "start": "2017860",
    "end": "2023260"
  },
  {
    "text": "everything collected so you should not really care about dbpf program that should be like the service mesh",
    "start": "2023260",
    "end": "2028419"
  },
  {
    "text": "Community working on providing this value for you one more question",
    "start": "2028419",
    "end": "2036299"
  },
  {
    "text": "so when you attach the evil program to one of the functions what happens if I",
    "start": "2036940",
    "end": "2044559"
  },
  {
    "text": "have multiple EP for program used by different Technologies how do you co-ordinate that is that even possible",
    "start": "2044559",
    "end": "2052960"
  },
  {
    "text": "uh so well when you create like an EPF program you're attaching it to an event",
    "start": "2052960",
    "end": "2058118"
  },
  {
    "text": "happening on on the Kernel now in terms of Technologies yeah it doesn't really matter since like there are actually all",
    "start": "2058119",
    "end": "2064118"
  },
  {
    "text": "sent to the user space using like a map you are doing your your kernel your ebpf",
    "start": "2064119",
    "end": "2069878"
  },
  {
    "text": "program going to be standards there's no Technologies there it's limited it's super guard rail once defined you are",
    "start": "2069879",
    "end": "2076780"
  },
  {
    "text": "going to add it to your kernel then the data can be sent to the user space and then you can use any technology to parse",
    "start": "2076780",
    "end": "2084040"
  },
  {
    "text": "that data and transform into something different",
    "start": "2084040",
    "end": "2088020"
  },
  {
    "text": "oh yeah",
    "start": "2092859",
    "end": "2096539"
  },
  {
    "text": "okay got it yeah",
    "start": "2098080",
    "end": "2103380"
  },
  {
    "text": "yeah I see your points I see your point okay so what if there's different technology I think you can follow up uh",
    "start": "2103960",
    "end": "2109900"
  },
  {
    "text": "oh yeah okay all right we need to move on to next next speaker once again one uh Round of Applause for Adam",
    "start": "2109900",
    "end": "2118380"
  },
  {
    "text": "[Applause]",
    "start": "2118530",
    "end": "2120899"
  }
]