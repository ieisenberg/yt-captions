[
  {
    "text": "my arm yeah more all right let's get started um so first of all thanks everybody",
    "start": "299",
    "end": "6000"
  },
  {
    "text": "thanks for showing up it's the end of the day it's the end of the conference you could have been having a beer or",
    "start": "6000",
    "end": "11340"
  },
  {
    "text": "food or something but you're here so I'll try to make it worth it um we're going to talk about keyless signing uh without fulsio so keyless",
    "start": "11340",
    "end": "19980"
  },
  {
    "text": "signing is this the signing pattern that was popularized by Sig store where you don't have to think the end user doesn't",
    "start": "19980",
    "end": "25680"
  },
  {
    "text": "have to think about managing their their or their keys and I want to sort of",
    "start": "25680",
    "end": "30720"
  },
  {
    "text": "demystify what keyless dining is and show that you can also create the same flow without having",
    "start": "30720",
    "end": "37440"
  },
  {
    "text": "um to U6 store you can use off-the-shelf components and get the same kind of experience",
    "start": "37440",
    "end": "44180"
  },
  {
    "text": "okay so if you love this talk or if you hate this talk here's how to get a hold of me afterwards I have the kind of",
    "start": "45180",
    "end": "51180"
  },
  {
    "text": "pleasure of working with chain guard so I get to think about this kind of thing throughout the day for work which is",
    "start": "51180",
    "end": "56280"
  },
  {
    "text": "wonderful and then you can find my GitHub or Mastodon handles there to to say hello or whatever you'd like",
    "start": "56280",
    "end": "62940"
  },
  {
    "text": "and so here's how this is going to go down uh first we're going to take a look at what the experience of keyless",
    "start": "62940",
    "end": "68040"
  },
  {
    "text": "signing is just what does signing look like for an end user and and just show uh just that user experience and what",
    "start": "68040",
    "end": "74520"
  },
  {
    "text": "the value is first of all and if you haven't managed Keys before we're going to take a look at what that feels like a",
    "start": "74520",
    "end": "81780"
  },
  {
    "text": "little bit um we're going to sign something with a key a key pair and then see some of the",
    "start": "81780",
    "end": "87659"
  },
  {
    "text": "pain points and and feel that what can go wrong essentially and then if we're",
    "start": "87659",
    "end": "93180"
  },
  {
    "text": "in the position to want to build something similar but we don't want to use six store for whatever reason we're going to take a look at keyless signing",
    "start": "93180",
    "end": "99900"
  },
  {
    "text": "step by step and understand the components that we need to run ourselves",
    "start": "99900",
    "end": "104939"
  },
  {
    "text": "to get the same experience for for our users if we don't want to use the the public good instance or for whatever",
    "start": "104939",
    "end": "110159"
  },
  {
    "text": "reason we don't want to use all the components of Sig stores open source services",
    "start": "110159",
    "end": "116299"
  },
  {
    "text": "okay so the first bit about keyless signing being fun it is it's it's fantastically easy especially if you've",
    "start": "116520",
    "end": "122880"
  },
  {
    "text": "gone through the Alternatives of signing any other way in the past um we're going to see some examples with",
    "start": "122880",
    "end": "128880"
  },
  {
    "text": "cosine this is six stores uh CLI client that just makes it a lot easier to use these um these services to sign things",
    "start": "128880",
    "end": "135660"
  },
  {
    "text": "and really all you need to do to sign a container with cosine is to just type cosine sine and the digest of the",
    "start": "135660",
    "end": "143520"
  },
  {
    "text": "container that you want to sign like that's it the user experience that happens right after this if you haven't",
    "start": "143520",
    "end": "149160"
  },
  {
    "text": "done this before is if you're a person you're going to get you know a browser",
    "start": "149160",
    "end": "154319"
  },
  {
    "text": "is going to pop open and prompt you to log in with an identity provider Google GitHub Microsoft that list might grow in",
    "start": "154319",
    "end": "160379"
  },
  {
    "text": "the future but basically how do you want to sign this image which identity you want to use and just prompt",
    "start": "160379",
    "end": "165840"
  },
  {
    "text": "you to log in and that's the identity that's going to be attached to the signature on this this container",
    "start": "165840",
    "end": "172260"
  },
  {
    "text": "um there are some variations on this if you're running the same command inside of some kind of workload cosine is going",
    "start": "172260",
    "end": "178739"
  },
  {
    "text": "to kind of look around and try to figure out who you are maybe if it looks an environment variable and sees GitHub ID",
    "start": "178739",
    "end": "185040"
  },
  {
    "text": "token environment variable okay we're in GitHub actions and it's going to use that identity to sign if it's in",
    "start": "185040",
    "end": "191900"
  },
  {
    "text": "kubernetes it might find the service account token and use that identity so if you're a workload it's not going to",
    "start": "191900",
    "end": "197220"
  },
  {
    "text": "prompt you to log in it's just going to try to figure out who are we essentially um and there's some other yeah okay so",
    "start": "197220",
    "end": "203280"
  },
  {
    "text": "so this is it and then a smaller side uh soon you'll have to use a digest because signing a tag doesn't really mean",
    "start": "203280",
    "end": "210000"
  },
  {
    "text": "anything um the content can change and then what are we even talking about on the signature so that's going to be a",
    "start": "210000",
    "end": "215459"
  },
  {
    "text": "required thing soon and I think the magic of this keyless signing is is really this part when you",
    "start": "215459",
    "end": "223080"
  },
  {
    "text": "verify a signature um the aspect that you want to sort of look at here is we can just say cosine",
    "start": "223080",
    "end": "228959"
  },
  {
    "text": "verify we point to the same image digest and then we talk about the signer we don't talk about keys in this case if I",
    "start": "228959",
    "end": "236040"
  },
  {
    "text": "was signing with my Google login we talk about my email address that's the Alias for for me oh sorry and we talk about",
    "start": "236040",
    "end": "243420"
  },
  {
    "text": "according to who according to accounts.google.com there's variations on this obviously you could say I want",
    "start": "243420",
    "end": "250379"
  },
  {
    "text": "it to be according to the GitHub actions identity provider and I care about the",
    "start": "250379",
    "end": "255720"
  },
  {
    "text": "specific workflow to have signed the image soon there'll be support for a",
    "start": "255720",
    "end": "261660"
  },
  {
    "text": "couple other providers like gitlab and build guide in the works so hopefully this will be ubiquitous across CI",
    "start": "261660",
    "end": "267479"
  },
  {
    "text": "providers and other workload identities soon um there's some variations on this",
    "start": "267479",
    "end": "272880"
  },
  {
    "text": "verification process you can run this as a kubernetes admission web hook so there's Governor support I believe",
    "start": "272880",
    "end": "279720"
  },
  {
    "text": "gatekeeper might have support now I'm not sure but there's also a a controller",
    "start": "279720",
    "end": "284759"
  },
  {
    "text": "called the policy controller from six door itself that can help you check you know signatures and reject images that",
    "start": "284759",
    "end": "291540"
  },
  {
    "text": "don't match a policy essentially right [Music] um this is really awesome as an end user if",
    "start": "291540",
    "end": "300360"
  },
  {
    "text": "you don't know anything about public key cryptography you still didn't need to do anything and know anything about public",
    "start": "300360",
    "end": "306120"
  },
  {
    "text": "heat cryptography and you can hold it right and not mess up not switch the private key in the public key or store",
    "start": "306120",
    "end": "312900"
  },
  {
    "text": "something incorrectly you don't need to know that the keys even exist in this",
    "start": "312900",
    "end": "318900"
  },
  {
    "text": "case so there's nothing to mismanage which is really wonderful but if you've never had to manage Keys you might not",
    "start": "318900",
    "end": "324720"
  },
  {
    "text": "know how bad that can be so let's take a look at uh managing keys and see what that",
    "start": "324720",
    "end": "332580"
  },
  {
    "text": "experience is like so cosine can can also sign things with a with a key pair",
    "start": "332580",
    "end": "338220"
  },
  {
    "text": "and the first thing you need to do whether you use cosign or not is to generate a key pair private in public if",
    "start": "338220",
    "end": "344759"
  },
  {
    "text": "you use cosine to do it it'll look kind of like this ask you for a little password to encrypt the private key and",
    "start": "344759",
    "end": "350460"
  },
  {
    "text": "then it'll write out two files the public key it's cosign.pub here and the private key cosine.key is the name of",
    "start": "350460",
    "end": "357840"
  },
  {
    "text": "the file here um the private key is the kind of sensitive bit there's some variations on this too",
    "start": "357840",
    "end": "364680"
  },
  {
    "text": "the private key can be managed in like a cloud KMS system where you can only access to sign over an API instead of",
    "start": "364680",
    "end": "371580"
  },
  {
    "text": "having an actual key content on disk but um some of the pain points end up being",
    "start": "371580",
    "end": "377039"
  },
  {
    "text": "kind of similar even in that use case when you're not managing that and there's different tools you can use like openssl or add a step CLI to generate",
    "start": "377039",
    "end": "384840"
  },
  {
    "text": "these kind of key Pairs and use them for signing and the experience of signing always kind of looks a little bit like this so",
    "start": "384840",
    "end": "391080"
  },
  {
    "text": "here using cosine we point to the same kind of image and then we pass in the private key to sign with so you need to",
    "start": "391080",
    "end": "398100"
  },
  {
    "text": "know to use the private key for signing and then when you're verifying you pass in the public key again you could use",
    "start": "398100",
    "end": "404460"
  },
  {
    "text": "the kubernetes and Mission Control and stick the public key inside of your little crd to say you know it needs to have be signed by this thing",
    "start": "404460",
    "end": "411240"
  },
  {
    "text": "and this is going to check in in the case of keyless and in the case of keyed signing it's going to check that the",
    "start": "411240",
    "end": "417060"
  },
  {
    "text": "contents of the container haven't been shifted kind of like a hash but in the case of this check with the",
    "start": "417060",
    "end": "422639"
  },
  {
    "text": "public key it's going to check that it was signed by the private key that's the verification that's happening",
    "start": "422639",
    "end": "428759"
  },
  {
    "text": "and like it doesn't look like that bad really like it's just make sure that you handle",
    "start": "428759",
    "end": "434160"
  },
  {
    "text": "the private key and stick it where you want to sign and then take the public key wherever you want to verify right it's it's not bad when it's one key one",
    "start": "434160",
    "end": "440039"
  },
  {
    "text": "key is actually this is like the Temptation that leads you down the path of like despair",
    "start": "440039",
    "end": "445620"
  },
  {
    "text": "um you only really need to know a little bit about the keys you know always verify with public always sign with",
    "start": "445620",
    "end": "451860"
  },
  {
    "text": "private and don't leak the private one out there otherwise people could sign with it right um",
    "start": "451860",
    "end": "457440"
  },
  {
    "text": "so let's ask a couple questions to kind of move Beyond just like one key pair right this is maybe a situation that you",
    "start": "457440",
    "end": "464580"
  },
  {
    "text": "have like I want to verify that the things I run in my production systems",
    "start": "464580",
    "end": "470160"
  },
  {
    "text": "were built in my build system right like we should all be able to answer that",
    "start": "470160",
    "end": "475259"
  },
  {
    "text": "question that's that's like entry points to software security software supply chain security right and the way that",
    "start": "475259",
    "end": "481740"
  },
  {
    "text": "you would solve this uh to kind of fix this this with key management is okay well we'll generate a key pair let's",
    "start": "481740",
    "end": "488160"
  },
  {
    "text": "take the private key over in your build system sign stuff in your build system by accessing it maybe from some Secret",
    "start": "488160",
    "end": "493800"
  },
  {
    "text": "store or something and then you tick your public key and wherever you're about to run your containers or your",
    "start": "493800",
    "end": "499500"
  },
  {
    "text": "software verified before running and then reject stuff that that isn't signed so in this case you start to see the",
    "start": "499500",
    "end": "504840"
  },
  {
    "text": "pattern that emerges with with these key pairs is that the public key becomes this kind of",
    "start": "504840",
    "end": "510360"
  },
  {
    "text": "Alias for the build system and we know that it's the build system because we only gave the private key to the build",
    "start": "510360",
    "end": "517080"
  },
  {
    "text": "system but if you want to act like slightly more nuanced language around verification like in",
    "start": "517080",
    "end": "524399"
  },
  {
    "text": "this kubernetes namespace I would like to make sure that um that it was built and signed by a",
    "start": "524399",
    "end": "531300"
  },
  {
    "text": "particular CI workflow the only way that you can discriminate between the different signers in this",
    "start": "531300",
    "end": "536700"
  },
  {
    "text": "case the different CI workflows is to give them all different private keys to sign otherwise your statement can't be",
    "start": "536700",
    "end": "543839"
  },
  {
    "text": "verified because you can't distinguish between the different signers right so again the keys have become sort of an",
    "start": "543839",
    "end": "550740"
  },
  {
    "text": "alias for I.E this particular signer and they hold on onto it for a long time",
    "start": "550740",
    "end": "556740"
  },
  {
    "text": "at this point you better start to kind of like track them somehow because just by looking at the key material you",
    "start": "556740",
    "end": "563220"
  },
  {
    "text": "don't know where you stuck it and which Pipeline and it gets to be a little bit chaotic tracking where you put each one",
    "start": "563220",
    "end": "570060"
  },
  {
    "text": "right you might have a lot of pipelines too uh okay like your CI provider also probably is going",
    "start": "570060",
    "end": "577380"
  },
  {
    "text": "to get jacked at some point and people will take your private keys right like no one is immune if you if you create a",
    "start": "577380",
    "end": "583140"
  },
  {
    "text": "Secret store people will attack it right um the tough bit here is you need to make sure you create a new key pair put",
    "start": "583140",
    "end": "591360"
  },
  {
    "text": "the new public key in place to verify against both public Keys sign with the the new private key distribute you know",
    "start": "591360",
    "end": "598740"
  },
  {
    "text": "a build for everything and then get the new builds everywhere and then remove the the old public key from the",
    "start": "598740",
    "end": "604680"
  },
  {
    "text": "verification policy it's it's work but you know it happens right",
    "start": "604680",
    "end": "611240"
  },
  {
    "text": "but you were maybe signing things for customers and they were verifying with those keys it starts to get rough now",
    "start": "612300",
    "end": "618060"
  },
  {
    "text": "like talk to PR right you have to do the same thing but you also have to deal with the fact that you just kind of",
    "start": "618060",
    "end": "623459"
  },
  {
    "text": "busted your customers trust a little bit and they're just kind of thinking like how long until it happens again I mean",
    "start": "623459",
    "end": "628620"
  },
  {
    "text": "the news cycle is rough right um it just kind of keeps on going on like this you",
    "start": "628620",
    "end": "634620"
  },
  {
    "text": "know if you have if you're a big company it's it's too much if you have a public key where's the",
    "start": "634620",
    "end": "639959"
  },
  {
    "text": "private key like no it believe me it's painful and like",
    "start": "639959",
    "end": "645360"
  },
  {
    "text": "the literature is riddled with like public key management or just key management just being a brutally hard",
    "start": "645360",
    "end": "651540"
  },
  {
    "text": "problem so if we can get rid of it it's a good idea",
    "start": "651540",
    "end": "657060"
  },
  {
    "text": "um so exactly what is it that about the keyless pattern that is actually better",
    "start": "657060",
    "end": "662640"
  },
  {
    "text": "the thing that is actually better is is the verification process um really you only talk about who the",
    "start": "662640",
    "end": "669779"
  },
  {
    "text": "signer's identity is and that's it and that's what verification should look like you're trying to assert who signed",
    "start": "669779",
    "end": "676860"
  },
  {
    "text": "this thing um so let's look at a different example like uh verifying in kubernetes and",
    "start": "676860",
    "end": "682200"
  },
  {
    "text": "Mission web hooks um so if you were using a sixstores policy controller this is a little bit",
    "start": "682200",
    "end": "688079"
  },
  {
    "text": "what the crd would look like and the thing that I really want to draw attention to is you know there's a",
    "start": "688079",
    "end": "694200"
  },
  {
    "text": "pattern for what the images look like gcr.io Foo something there's some details there about CT log and keyless",
    "start": "694200",
    "end": "700800"
  },
  {
    "text": "but the the thing that's very important is what's highlighted in color and again like all keyless verification",
    "start": "700800",
    "end": "707339"
  },
  {
    "text": "should have this property where you just say I demand that the designer was this",
    "start": "707339",
    "end": "712800"
  },
  {
    "text": "you know this identity provider this this particular subject and maybe even a",
    "start": "712800",
    "end": "717839"
  },
  {
    "text": "bit of a pattern matching thing where you say like I trusted this subject you know most of the time but November was a",
    "start": "717839",
    "end": "723360"
  },
  {
    "text": "bad month they were compromised and then you know I care about the subjects looking like this pattern or something",
    "start": "723360",
    "end": "728640"
  },
  {
    "text": "like that but so it can be flexible doesn't have to be one exact workflow so this is what it might look like for uh",
    "start": "728640",
    "end": "734579"
  },
  {
    "text": "for someone to say trust a particular GitHub GitHub workflow that makes sense",
    "start": "734579",
    "end": "741480"
  },
  {
    "text": "okay so can we build our own um there's a lot of people right now",
    "start": "741480",
    "end": "746519"
  },
  {
    "text": "building signing systems inside their companies they have a lot of different constraints",
    "start": "746519",
    "end": "752279"
  },
  {
    "text": "um and I guess what I'm trying to say with this whole kind of presentation is that",
    "start": "752279",
    "end": "758640"
  },
  {
    "text": "it should be keyless um you should really really question yourself if when",
    "start": "758640",
    "end": "765060"
  },
  {
    "text": "people are verifying the signatures on your assigning system if they need to reference a key ever it's just not a",
    "start": "765060",
    "end": "773700"
  },
  {
    "text": "position you want to put your developers in because then they have to manage them and understand what that key means and",
    "start": "773700",
    "end": "779519"
  },
  {
    "text": "what is this like referring to right it it's going to get bad eventually and so how can we get the same kind of helis",
    "start": "779519",
    "end": "786959"
  },
  {
    "text": "design even if we decide that like six stores actual open source systems don't",
    "start": "786959",
    "end": "792120"
  },
  {
    "text": "fit whatever your requirements are okay so there's there's kind of some",
    "start": "792120",
    "end": "797880"
  },
  {
    "text": "analogies here about why you might want to build your own right um if you're building like webpki right",
    "start": "797880",
    "end": "803579"
  },
  {
    "text": "there's a big one that is open source let's encrypt and it's a design in a particular way to deal with a large",
    "start": "803579",
    "end": "810540"
  },
  {
    "text": "publicly trusted being a large publicly trusted CA it has a very large Target on",
    "start": "810540",
    "end": "815639"
  },
  {
    "text": "its back so it's designed a particular way right but you can use like Boulders let's encrypts Boulder CA if you wanted",
    "start": "815639",
    "end": "823079"
  },
  {
    "text": "to but when people have private instances of a web pki they often don't they often",
    "start": "823079",
    "end": "829260"
  },
  {
    "text": "choose different technology that's built for smaller private certificate authorities if you're running a",
    "start": "829260",
    "end": "835800"
  },
  {
    "text": "kubernetes cluster you have a CA you know it's baked into the API server if you're running a service mesh you",
    "start": "835800",
    "end": "843480"
  },
  {
    "text": "also have a CA right that becomes that root of trust for for all the communication inside of your service mesh and people also will kind of build",
    "start": "843480",
    "end": "850260"
  },
  {
    "text": "them out of you know small step or vault open SSL maybe is the wrong example to use here but you could use that too if",
    "start": "850260",
    "end": "856380"
  },
  {
    "text": "you wanted to to build these sort of smaller systems with a different set of constraints maybe certificate",
    "start": "856380",
    "end": "862019"
  },
  {
    "text": "transparency which you know let's encrypt has to have isn't something you need for your service mesh",
    "start": "862019",
    "end": "868920"
  },
  {
    "text": "um so I guess the question is if Sig store is kind of the the big public",
    "start": "868920",
    "end": "874880"
  },
  {
    "text": "code signing let's encrypt if you will um what are the options if we are trying",
    "start": "874880",
    "end": "882180"
  },
  {
    "text": "to make something with different requirements that's private does it need to be the same and I don't mean to say by any means here that",
    "start": "882180",
    "end": "888540"
  },
  {
    "text": "um Sig store itself shouldn't be your first option it should it's fantastic and it's built to be extremely secure so",
    "start": "888540",
    "end": "895440"
  },
  {
    "text": "it's a great option but if you discover you have already an existing x509 like certificate Authority that you",
    "start": "895440",
    "end": "903180"
  },
  {
    "text": "need to use for whatever reason from other some other team has put this constraint on you let's see like can we",
    "start": "903180",
    "end": "909120"
  },
  {
    "text": "still get the same behavior basically Okay so",
    "start": "909120",
    "end": "914760"
  },
  {
    "text": "to figure out how you can do this yourself we're going to look at the keyless signing process in detail when",
    "start": "914760",
    "end": "920820"
  },
  {
    "text": "you use sigstore and then we're going to keep like a little grocery list along the way for the stuff that we need to",
    "start": "920820",
    "end": "926639"
  },
  {
    "text": "run ourselves if we're trying to get the same properties okay so that's the way it's going to go",
    "start": "926639",
    "end": "932820"
  },
  {
    "text": "so when you're using cosine like that the first example there to sign a container the the first step for cosine",
    "start": "932820",
    "end": "939180"
  },
  {
    "text": "is to figure out who is using cosine so who are you who's who's calling me",
    "start": "939180",
    "end": "946320"
  },
  {
    "text": "and that you know we talked a little bit around like looking around in the environment if it's if it's a workload",
    "start": "946320",
    "end": "951420"
  },
  {
    "text": "um if it's a person and it can't find anything it's just going to pop open a browser and say log in tell me tell me",
    "start": "951420",
    "end": "956760"
  },
  {
    "text": "who you are and the response from that is going to be specifically for Sig",
    "start": "956760",
    "end": "962040"
  },
  {
    "text": "store it's going to be an oidc ID token that describes who the user is along",
    "start": "962040",
    "end": "967380"
  },
  {
    "text": "with according to who like according to Google according to Microsoft that kind of thing",
    "start": "967380",
    "end": "972899"
  },
  {
    "text": "and that brings us to basically grocery list item number one",
    "start": "972899",
    "end": "978420"
  },
  {
    "text": "is to think about the identity provider you will use for your signers if these are these are like",
    "start": "978420",
    "end": "985320"
  },
  {
    "text": "Ci workloads they need to have a strong sense of identity and the identity is going to be tied through the whole",
    "start": "985320",
    "end": "990839"
  },
  {
    "text": "system all the way to the end so that the verifiers can use that language the",
    "start": "990839",
    "end": "996720"
  },
  {
    "text": "same language as the identity provider to describe who they wanted to sign their systems but in your system it",
    "start": "996720",
    "end": "1002660"
  },
  {
    "text": "doesn't have to be an oidc identity provider thankfully that's actually being baked into a lot of CI providers",
    "start": "1002660",
    "end": "1008240"
  },
  {
    "text": "these days Circle CI has one GitHub actions gitlab it's becoming more ubiquitous but",
    "start": "1008240",
    "end": "1014000"
  },
  {
    "text": "if your system for workload identity is spiffy and they're you know x509s fit",
    "start": "1014000",
    "end": "1019160"
  },
  {
    "text": "docs that could work too if you're building things in AWS and your identity provider in that case is",
    "start": "1019160",
    "end": "1024918"
  },
  {
    "text": "AWS aim that's a perfectly fine identity provider so long as it works with the",
    "start": "1024919",
    "end": "1031160"
  },
  {
    "text": "rest of the system and we're going to talk about that but that's one thing to think up up front is who's signing is it",
    "start": "1031160",
    "end": "1036260"
  },
  {
    "text": "people is it workloads and how am I going to identify them right",
    "start": "1036260",
    "end": "1041558"
  },
  {
    "text": "all right Next Step cosine knows who we are now all right so the next step is that",
    "start": "1042260",
    "end": "1048199"
  },
  {
    "text": "cosine is going to create a private key and this is a keyless flow but don't don't worry we're going to throw it in the garbage really soon I swear",
    "start": "1048199",
    "end": "1054860"
  },
  {
    "text": "um okay so it's going to create a private key in memory and then it's going to take the public key",
    "start": "1054860",
    "end": "1060380"
  },
  {
    "text": "conjugate to that and that ID token about who the signer is and it's going to pass that up to falsio which is Sig",
    "start": "1060380",
    "end": "1067160"
  },
  {
    "text": "store's certificate Authority and what it's asking for is a short-lived code signing cert",
    "start": "1067160",
    "end": "1073760"
  },
  {
    "text": "so fulsio is going to take a look at that identity and remember we have to wire the identity all the way through to",
    "start": "1073760",
    "end": "1079039"
  },
  {
    "text": "the end so that someone can verify just with that identity like me at example.com it needs to make it all the way to the end process",
    "start": "1079039",
    "end": "1085520"
  },
  {
    "text": "so fossil is gonna stick that metadata inside of the certificate along with the public key",
    "start": "1085520",
    "end": "1091580"
  },
  {
    "text": "because that's certificates are always have the public key inside them as well and pass that back to cosine and now the",
    "start": "1091580",
    "end": "1098660"
  },
  {
    "text": "key property here is that this certificate is going to expire very soon I think the default on cosine for falcio",
    "start": "1098660",
    "end": "1105260"
  },
  {
    "text": "for the the public instances 10 minutes you could and should maybe make yours short the idea is to get a certificate",
    "start": "1105260",
    "end": "1111440"
  },
  {
    "text": "for every signature um yeah so the shorter the time window the",
    "start": "1111440",
    "end": "1117080"
  },
  {
    "text": "better and what's really great about this is when you're when you have uh certificates or you're issuing for a",
    "start": "1117080",
    "end": "1122240"
  },
  {
    "text": "minute or two um certificate revocation is just out of the question like there's no reason to have a certificate revocation list",
    "start": "1122240",
    "end": "1129200"
  },
  {
    "text": "um with windows that short they're about you know they're about to expire anyways",
    "start": "1129200",
    "end": "1134500"
  },
  {
    "text": "um okay so that's item number two is that certificate Authority",
    "start": "1135200",
    "end": "1141320"
  },
  {
    "text": "is going to be happy it's going to have to be in your system somewhere because if you're just using public keys by themselves there's no additional",
    "start": "1141320",
    "end": "1147140"
  },
  {
    "text": "metadata about the validity period and the certificate Authority is giving us two things it's pushing the identity",
    "start": "1147140",
    "end": "1153140"
  },
  {
    "text": "information into the cert to pair it up with the public key and it's also giving us that window of it's only valid for",
    "start": "1153140",
    "end": "1160280"
  },
  {
    "text": "you know five minutes or something like that which which is the magic of certificate authorities metadata on top",
    "start": "1160280",
    "end": "1165860"
  },
  {
    "text": "of public keys right um so there's lots of different open source you know certificate authorities",
    "start": "1165860",
    "end": "1171620"
  },
  {
    "text": "I think you know in spirit you could probably do this with like an SSH certificate Authority",
    "start": "1171620",
    "end": "1176780"
  },
  {
    "text": "because you can do signatures with those two but we'll keep our discussions to x509 so the same kind of certificate authorities you see for uh TLS just with",
    "start": "1176780",
    "end": "1184160"
  },
  {
    "text": "different data inside them inside the metadata and",
    "start": "1184160",
    "end": "1189559"
  },
  {
    "text": "the key bit here when you're choosing your certificate Authority is that it needs to understand your identity",
    "start": "1189559",
    "end": "1195380"
  },
  {
    "text": "provider so when you're choosing that and you know that your identity provider was for instance it was going to be AWS",
    "start": "1195380",
    "end": "1202820"
  },
  {
    "text": "I am the certificate Authority needs to understand that and be able to exchange those credentials for certs that's what",
    "start": "1202820",
    "end": "1210020"
  },
  {
    "text": "we have to keep in our head or you need to glue it together somehow to make that possible",
    "start": "1210020",
    "end": "1215179"
  },
  {
    "text": "okay next bit we have a private key and we sign our artifact with it",
    "start": "1215179",
    "end": "1222380"
  },
  {
    "text": "and that gives us back a little bit of data the signature and then we Chuck the private key in the",
    "start": "1222380",
    "end": "1228320"
  },
  {
    "text": "garbage nothing more for our list now that that's just something we'll be able to do so no no more things no more",
    "start": "1228320",
    "end": "1234860"
  },
  {
    "text": "requirements I think the only thing to remember here is we're kind of on the clock at this point the certificate is going to expire students so we better",
    "start": "1234860",
    "end": "1240799"
  },
  {
    "text": "sign quickly that's that's kind of the only design requirement okay next",
    "start": "1240799",
    "end": "1247100"
  },
  {
    "text": "so what happens next in cosine is that it tells it needs to go tell recore",
    "start": "1247100",
    "end": "1253400"
  },
  {
    "text": "which is the signature transparency log that it it made a signature so this is one of these really interesting and",
    "start": "1253400",
    "end": "1259340"
  },
  {
    "text": "excellent security features of of Sig store is that there's signature transparency so each signature that",
    "start": "1259340",
    "end": "1265100"
  },
  {
    "text": "happens ends up in a signature transparency log and cosine is going to tell cosine is going to tell recore this",
    "start": "1265100",
    "end": "1270620"
  },
  {
    "text": "signature transparency log I've signed something next so it's going to pass the signature it",
    "start": "1270620",
    "end": "1277760"
  },
  {
    "text": "just created and the certificate that it's signed with up to recore",
    "start": "1277760",
    "end": "1283100"
  },
  {
    "text": "and recourse is going to give basically all that stuff back but it's going to add a timestamp and",
    "start": "1283100",
    "end": "1290000"
  },
  {
    "text": "sign the whole bundle so the certificate the time stamp and the artifact",
    "start": "1290000",
    "end": "1295280"
  },
  {
    "text": "signature are all going to be signed by recore now it's not signature transparency",
    "start": "1295280",
    "end": "1302020"
  },
  {
    "text": "that's that's what gives um Sig store this keyless feature",
    "start": "1302020",
    "end": "1307100"
  },
  {
    "text": "signature signature transparency is great but it's not the keyless bit What's Happening Here",
    "start": "1307100",
    "end": "1313640"
  },
  {
    "text": "to make keyless possible is that this is a verifiable timestamp of when the",
    "start": "1313640",
    "end": "1320000"
  },
  {
    "text": "signature happened and recore doesn't need to necessarily be the thing that does this but you must have something to",
    "start": "1320000",
    "end": "1326840"
  },
  {
    "text": "it so the key element here the last thing that we're going to put on our grocery list is a Time stamping",
    "start": "1326840",
    "end": "1332720"
  },
  {
    "text": "Authority now if you decide that you want signature transparency because it has a lot of great properties in its own right you could run record if you want",
    "start": "1332720",
    "end": "1339740"
  },
  {
    "text": "as the signature is the time stamping Authority but you can also run time stamping authorities that only do these",
    "start": "1339740",
    "end": "1346159"
  },
  {
    "text": "time stamps and don't actually have this big signature append Only log if that's what you don't want to have",
    "start": "1346159",
    "end": "1351799"
  },
  {
    "text": "they're a little bit simpler to operate as well um okay so that's it we have the three things on",
    "start": "1351799",
    "end": "1359179"
  },
  {
    "text": "our list we have an identity provider a certificate Authority and a Time stamping Authority and then the final",
    "start": "1359179",
    "end": "1365659"
  },
  {
    "text": "question a little bit here is that was a lot of stuff like a lot of bundle came out of this like how did that turn into",
    "start": "1365659",
    "end": "1371059"
  },
  {
    "text": "someone just saying you know cosine verify this email address and this identity provider right",
    "start": "1371059",
    "end": "1377600"
  },
  {
    "text": "there's this is what's in the hands of a verifier okay and here's how verification works and what you need to",
    "start": "1377600",
    "end": "1383900"
  },
  {
    "text": "implement if you want to make this keyless magic kind of work right you have the the signature of the bundle of",
    "start": "1383900",
    "end": "1389539"
  },
  {
    "text": "the big time stamped bundle and you have we have our certificate we have our signature we have the artifact in hand",
    "start": "1389539",
    "end": "1394760"
  },
  {
    "text": "you have to ship all of this stuff to the end user what's happening in cosine if you signed a container is that this",
    "start": "1394760",
    "end": "1400700"
  },
  {
    "text": "is all attached onto an oci image right beside your the image",
    "start": "1400700",
    "end": "1406400"
  },
  {
    "text": "you care about so it's all stuck there inside your oci registry usually um so here's the process we kind of have",
    "start": "1406400",
    "end": "1413720"
  },
  {
    "text": "to peel this thing like an onion so outside layers first and we're going to make our way inside",
    "start": "1413720",
    "end": "1419780"
  },
  {
    "text": "the first bit is to just verify the signature of the bundle so recore in this case has a public key we verify",
    "start": "1419780",
    "end": "1427000"
  },
  {
    "text": "that this signature was signed with recourse public key",
    "start": "1427000",
    "end": "1432320"
  },
  {
    "text": "which kind of removes the bundle which means that we trust that the signature happened at a particular time and we",
    "start": "1432320",
    "end": "1438320"
  },
  {
    "text": "know that what the time stamp is essentially the next part is to check that the",
    "start": "1438320",
    "end": "1443900"
  },
  {
    "text": "certificate is valid now it's really important right here that we don't use the normal certificate validation flow",
    "start": "1443900",
    "end": "1450320"
  },
  {
    "text": "that you would see like in TLS because this certificate is very likely already expired in that sense what we need to do",
    "start": "1450320",
    "end": "1458120"
  },
  {
    "text": "is do most of that aspect make sure that it chains up to our certificate Authority",
    "start": "1458120",
    "end": "1463400"
  },
  {
    "text": "but then when it comes to the time of validity we just need to check that the",
    "start": "1463400",
    "end": "1468799"
  },
  {
    "text": "time stamp is inside of the validity window for the certificate so that's a modification you need to make from the",
    "start": "1468799",
    "end": "1474679"
  },
  {
    "text": "normal you know TLS kind of verification so that kind of Pops off the certificate from the onion and then",
    "start": "1474679",
    "end": "1482600"
  },
  {
    "text": "second last thing yeah go ahead",
    "start": "1482600",
    "end": "1487419"
  },
  {
    "text": "the time yeah the timestamp was signed in the original bundle so if I go back here the signature is over the entire",
    "start": "1487880",
    "end": "1495140"
  },
  {
    "text": "bundle which includes the time the signature and the certificate",
    "start": "1495140",
    "end": "1501380"
  },
  {
    "text": "so we we kind of verify that the time was accurate insofar as we trust recore in",
    "start": "1501380",
    "end": "1506900"
  },
  {
    "text": "the first step there yeah um so then we CH we checked that we",
    "start": "1506900",
    "end": "1512179"
  },
  {
    "text": "trust the certificate Authority um and then second last is we Chuck the signature actually is valid so we take",
    "start": "1512179",
    "end": "1519080"
  },
  {
    "text": "the artifact the public key and check the signature and after that's done we're remaining with the thing the user actually asks",
    "start": "1519080",
    "end": "1526400"
  },
  {
    "text": "and they put that input in and say do I trust me at example.com it's just the",
    "start": "1526400",
    "end": "1532159"
  },
  {
    "text": "identity metadata left here do I trust these details and those could be very arbitrary for your situation it could be",
    "start": "1532159",
    "end": "1538539"
  },
  {
    "text": "AWS you know role Arn it could be all kinds of you know you can stick",
    "start": "1538539",
    "end": "1544159"
  },
  {
    "text": "whatever you want in an oidc token so if it matters to you if this is business logic right it could be your own thing",
    "start": "1544159",
    "end": "1550880"
  },
  {
    "text": "okay so let's do a couple examples I talked a little bit about AWS so here's maybe you're building things in AWS",
    "start": "1550880",
    "end": "1556400"
  },
  {
    "text": "Cloud code build so we just need to choose three these three things we get an",
    "start": "1556400",
    "end": "1563299"
  },
  {
    "text": "identity provider for free right we use AWS as one if we wanted to we don't have to but we can",
    "start": "1563299",
    "end": "1569179"
  },
  {
    "text": "we could choose for instance as the certificate Authority um if you all have ever used hashicorp",
    "start": "1569179",
    "end": "1575419"
  },
  {
    "text": "Vault you know Swiss army knife of many security things um you can use AWS as an auth method you",
    "start": "1575419",
    "end": "1582140"
  },
  {
    "text": "know so you can authenticate using AWS identities and then you can exchange that for a certificate secret they will",
    "start": "1582140",
    "end": "1588380"
  },
  {
    "text": "call them so you can issue short-lived certificates that would totally fit this need and then the last bit is you do need to choose",
    "start": "1588380",
    "end": "1594380"
  },
  {
    "text": "timestamping Authority so six store uh has an open source one that you could just grab off the shelf and use for this",
    "start": "1594380",
    "end": "1600679"
  },
  {
    "text": "purpose basically or you could choose recore here or you could try to find another one that is sort of I think the",
    "start": "1600679",
    "end": "1606260"
  },
  {
    "text": "RFC is 3161 that's time stamping spec that you could use um but there's there's options",
    "start": "1606260",
    "end": "1613778"
  },
  {
    "text": "let's think about maybe signing with a corporate identity provider maybe you want to sign git commits this way and",
    "start": "1614779",
    "end": "1620600"
  },
  {
    "text": "you want to use like your OCTA or something okay so if you have octave you can create most of these corporate",
    "start": "1620600",
    "end": "1627320"
  },
  {
    "text": "identity providers have you know the capacity to make an oidc compatible app you know that'll speak oidc After People",
    "start": "1627320",
    "end": "1633799"
  },
  {
    "text": "log in and a great option here too another open source one is to use step CA so step CA",
    "start": "1633799",
    "end": "1639260"
  },
  {
    "text": "has these uh the notion of a provisioner which credentials can I exchange for which certificates",
    "start": "1639260",
    "end": "1645260"
  },
  {
    "text": "and certificate templating so you can give step CA an oidc token from your",
    "start": "1645260",
    "end": "1650299"
  },
  {
    "text": "OCTA app or from any other place and templating the values from the from the token into extensions inside of your",
    "start": "1650299",
    "end": "1657980"
  },
  {
    "text": "certificate so that'll give you that mapping into your certificate details so they're called provisioners with step CA",
    "start": "1657980",
    "end": "1663500"
  },
  {
    "text": "and then the templating is attached to a provisioner and then again you just kind",
    "start": "1663500",
    "end": "1668720"
  },
  {
    "text": "of choose a Time stamping Authority maybe you care about signature transparency in this case so we'll choose recore so this is the kind of",
    "start": "1668720",
    "end": "1675620"
  },
  {
    "text": "feeling to get the magical three things together and get this keyless kind of flow",
    "start": "1675620",
    "end": "1681559"
  },
  {
    "text": "okay I'm gonna give good news first which means you know that the bad news is coming",
    "start": "1681559",
    "end": "1686600"
  },
  {
    "text": "um you can keep signing with cosine um it's already got flags for a situation just like this um if you're using step ca for instance",
    "start": "1686600",
    "end": "1693200"
  },
  {
    "text": "you can get a certificate with step CA certificate here's you know grabbing one for me at example.com",
    "start": "1693200",
    "end": "1699140"
  },
  {
    "text": "um cosine needs to have a particular format for the private keys so you use this import uh private key command to",
    "start": "1699140",
    "end": "1705799"
  },
  {
    "text": "structure it correctly and then in signing you just do cosine sine you know you point to the private key which you",
    "start": "1705799",
    "end": "1712640"
  },
  {
    "text": "can throw out right after signing so that's the keyless aspect you point the certificate you have and then you have",
    "start": "1712640",
    "end": "1718279"
  },
  {
    "text": "to have a root bundle that chains up to your to your root and then point to your image",
    "start": "1718279",
    "end": "1723679"
  },
  {
    "text": "um yeah the bad news is that we can't verify very easily in cosine right now cosine's",
    "start": "1723679",
    "end": "1731659"
  },
  {
    "text": "verification really understands specifically falsio at this moment so you can imagine if you stopped all kinds",
    "start": "1731659",
    "end": "1737659"
  },
  {
    "text": "of arbitrary like extensions inside of those certificates the very last unpeeling of the onion it would be like",
    "start": "1737659",
    "end": "1744440"
  },
  {
    "text": "I'm not really sure what to do here um so you'd kind of you need to write your",
    "start": "1744440",
    "end": "1749659"
  },
  {
    "text": "own verification logic and that's the pain point right now unless you make your certificates very similarly",
    "start": "1749659",
    "end": "1756080"
  },
  {
    "text": "structured to what folsio is doing and you can almost pull that off but if you have arbitrary metadata you can't really",
    "start": "1756080",
    "end": "1762740"
  },
  {
    "text": "get there right and that's probably why you're doing this in the first place um but the future is brighter there's a",
    "start": "1762740",
    "end": "1768559"
  },
  {
    "text": "couple rough plans to make this just extensible so the I think the dream would be for everyone to have the first",
    "start": "1768559",
    "end": "1774380"
  },
  {
    "text": "parts of the keyless bit you know the time stamping bundle being verified um the certificate being verified and",
    "start": "1774380",
    "end": "1780380"
  },
  {
    "text": "then all of that just be shared inside of coastline's verification logic and then I think what some of the the hope",
    "start": "1780380",
    "end": "1786380"
  },
  {
    "text": "is here is just to have an arbitrary Rigo policy or cue or whatever you love for your verification language at the",
    "start": "1786380",
    "end": "1793520"
  },
  {
    "text": "end to verify the really particular details of your certificate structure so that people can bring their own pki and",
    "start": "1793520",
    "end": "1799820"
  },
  {
    "text": "get the same you know really unique flow right so come join the effort",
    "start": "1799820",
    "end": "1805159"
  },
  {
    "text": "um we're you know obviously looking for contributors at all times and we can if we write the logic to verify once then",
    "start": "1805159",
    "end": "1810919"
  },
  {
    "text": "then we all share it and we can all audit it together right um and then just finally a couple of key",
    "start": "1810919",
    "end": "1817100"
  },
  {
    "text": "takeaway thoughts please stop managing Keys especially if you're writing a new code signing",
    "start": "1817100",
    "end": "1823820"
  },
  {
    "text": "infrastructure right now or if you're if you're Consulting with people it's going to cause you pain in the",
    "start": "1823820",
    "end": "1829279"
  },
  {
    "text": "future and you can take off the shelf components and and do better already um and not given this pattern of trying",
    "start": "1829279",
    "end": "1835880"
  },
  {
    "text": "to worry about where you've put all your private keys and then if you're in this pattern or you're even going to use Sig",
    "start": "1835880",
    "end": "1841100"
  },
  {
    "text": "store start thinking now about the identity provider that you're going to use and and to to sign with and and",
    "start": "1841100",
    "end": "1848600"
  },
  {
    "text": "hence to verify with so is there actually a strong sense of identity inside your CI system",
    "start": "1848600",
    "end": "1854480"
  },
  {
    "text": "um that's the biggest one because it's not true everywhere right and then I guess the last one is come get involved uh with making verification",
    "start": "1854480",
    "end": "1862159"
  },
  {
    "text": "for just bring your own pki uh shared Upstream essentially so that it's easier we don't have to write the same",
    "start": "1862159",
    "end": "1868159"
  },
  {
    "text": "verification logic thank you that's it",
    "start": "1868159",
    "end": "1873399"
  },
  {
    "text": "a couple minutes if anyone has questions",
    "start": "1878020",
    "end": "1882399"
  },
  {
    "text": "cool",
    "start": "1884360",
    "end": "1887360"
  },
  {
    "text": "yep",
    "start": "1894140",
    "end": "1896740"
  },
  {
    "text": "yep",
    "start": "1901820",
    "end": "1904419"
  },
  {
    "text": "and then the other direction the fixer signature",
    "start": "1909320",
    "end": "1915740"
  },
  {
    "text": "as an attacker for fire so that when that comes upwards uh",
    "start": "1915740",
    "end": "1921799"
  },
  {
    "text": "yeah so we're working in both directions and I just wondered if you have any advice if that is all functional right",
    "start": "1928580",
    "end": "1935059"
  },
  {
    "text": "now yeah I hear you",
    "start": "1935059",
    "end": "1942679"
  },
  {
    "text": "I hear you I think that's part of the reason some people look for something else is that folsio in particular can be",
    "start": "1942679",
    "end": "1947899"
  },
  {
    "text": "a little rigid you know it's not meant to be this extensible system that can take an arbitrary identity and exchange",
    "start": "1947899",
    "end": "1953360"
  },
  {
    "text": "it step C was one that I found kind of would take whatever and it worked worked",
    "start": "1953360",
    "end": "1959059"
  },
  {
    "text": "really well and I could test that way but I think that there's something that we can all do better here to take",
    "start": "1959059",
    "end": "1964760"
  },
  {
    "text": "hopefully with more of these implementations I think we need frankly some standards on that structure so that",
    "start": "1964760",
    "end": "1971059"
  },
  {
    "text": "when any kind of verifier sees a keyless looking bundle you know the verification is is clear",
    "start": "1971059",
    "end": "1977539"
  },
  {
    "text": "and then I think the other one is I don't know if we have and I think that we should kind of have a bit more of a",
    "start": "1977539",
    "end": "1983720"
  },
  {
    "text": "what is the shape of exchanging something that is not oidc for a certificate",
    "start": "1983720",
    "end": "1989320"
  },
  {
    "text": "and what's that look like essentially yeah yeah I I don't know if I have great advice for you other than to try",
    "start": "1989320",
    "end": "1995600"
  },
  {
    "text": "different certificate authorities to make it at least easier to prototype I think because it is tricky it is awesome",
    "start": "1995600",
    "end": "2001899"
  },
  {
    "text": "yeah yeah is that using the JWT as Fizz or x509 that you're trying to do um",
    "start": "2001899",
    "end": "2010299"
  },
  {
    "text": "yeah exactly so and that's one that's like even further away from Easy right now I think in fulsio",
    "start": "2010299",
    "end": "2017460"
  },
  {
    "text": "right right cool cool any other questions yeah thank you",
    "start": "2017799",
    "end": "2025500"
  },
  {
    "text": "all right well I'll be around and uh you know where to find me you'll see these slides up so thank you so much for",
    "start": "2026860",
    "end": "2032200"
  },
  {
    "text": "coming cheers",
    "start": "2032200",
    "end": "2034919"
  }
]