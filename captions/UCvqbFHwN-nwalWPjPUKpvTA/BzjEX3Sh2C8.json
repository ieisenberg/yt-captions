[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "hi i'm david adams a senior principal",
    "start": "719",
    "end": "2720"
  },
  {
    "text": "tech marketing engineer",
    "start": "2720",
    "end": "4000"
  },
  {
    "text": "with dell technologies cloud and with me",
    "start": "4000",
    "end": "6080"
  },
  {
    "text": "are ashish batwara",
    "start": "6080",
    "end": "7600"
  },
  {
    "text": "engineering head streaming data platform",
    "start": "7600",
    "end": "9920"
  },
  {
    "text": "and andre keaty",
    "start": "9920",
    "end": "11200"
  },
  {
    "text": "senior principal software engineer today",
    "start": "11200",
    "end": "13840"
  },
  {
    "text": "we'll be demoing a real-time object",
    "start": "13840",
    "end": "15519"
  },
  {
    "text": "detection",
    "start": "15519",
    "end": "16080"
  },
  {
    "text": "application which utilizes data streams",
    "start": "16080",
    "end": "18400"
  },
  {
    "text": "from dell emc streaming data platform",
    "start": "18400",
    "end": "20880"
  },
  {
    "text": "and tiers long-term storage to s3",
    "start": "20880",
    "end": "22960"
  },
  {
    "text": "compatible object storage",
    "start": "22960",
    "end": "24480"
  },
  {
    "text": "with the recently announced dell emc",
    "start": "24480",
    "end": "26320"
  },
  {
    "text": "object scale",
    "start": "26320",
    "end": "27599"
  },
  {
    "text": "currently in early access all deployed",
    "start": "27599",
    "end": "29840"
  },
  {
    "text": "on dell technologies cloud platform",
    "start": "29840",
    "end": "31599"
  },
  {
    "text": "with vsphere with tonzu enabled",
    "start": "31599",
    "end": "35120"
  },
  {
    "start": "34000",
    "end": "141000"
  },
  {
    "text": "this demo solution is made up of four",
    "start": "35120",
    "end": "37360"
  },
  {
    "text": "key technologies",
    "start": "37360",
    "end": "39120"
  },
  {
    "text": "dell technologies cloud platform dtcp",
    "start": "39120",
    "end": "42079"
  },
  {
    "text": "delivers a turnkey experience that's",
    "start": "42079",
    "end": "44079"
  },
  {
    "text": "easy to deploy and manage",
    "start": "44079",
    "end": "45760"
  },
  {
    "text": "due to the tight integration between",
    "start": "45760",
    "end": "47360"
  },
  {
    "text": "vmware cloud foundation and vxrail",
    "start": "47360",
    "end": "49840"
  },
  {
    "text": "with dtcp organizations can now develop",
    "start": "49840",
    "end": "52800"
  },
  {
    "text": "test and run",
    "start": "52800",
    "end": "54000"
  },
  {
    "text": "cloud native applications alongside",
    "start": "54000",
    "end": "56320"
  },
  {
    "text": "virtualized applications in a single",
    "start": "56320",
    "end": "58320"
  },
  {
    "text": "platform",
    "start": "58320",
    "end": "60079"
  },
  {
    "text": "vsphere with tanzu is the",
    "start": "60079",
    "end": "61680"
  },
  {
    "text": "re-architecting of vsphere to embed",
    "start": "61680",
    "end": "63680"
  },
  {
    "text": "kubernetes into the control plane of",
    "start": "63680",
    "end": "65439"
  },
  {
    "text": "vsphere",
    "start": "65439",
    "end": "66400"
  },
  {
    "text": "to unify access to compute storage and",
    "start": "66400",
    "end": "68880"
  },
  {
    "text": "networking",
    "start": "68880",
    "end": "69760"
  },
  {
    "text": "it allows a user to deploy pods directly",
    "start": "69760",
    "end": "72320"
  },
  {
    "text": "into vsphere",
    "start": "72320",
    "end": "73360"
  },
  {
    "text": "known as a vsphere pod or create",
    "start": "73360",
    "end": "75680"
  },
  {
    "text": "developer managed",
    "start": "75680",
    "end": "77439"
  },
  {
    "text": "tonzo kubernetes grid clusters which run",
    "start": "77439",
    "end": "79680"
  },
  {
    "text": "in virtual machines",
    "start": "79680",
    "end": "81200"
  },
  {
    "text": "we will be deploying both of these in",
    "start": "81200",
    "end": "83040"
  },
  {
    "text": "this demo",
    "start": "83040",
    "end": "85119"
  },
  {
    "text": "dell emc object scale is a re-engineered",
    "start": "85119",
    "end": "88240"
  },
  {
    "text": "object storage platform",
    "start": "88240",
    "end": "89759"
  },
  {
    "text": "which takes advantage of kubernetes",
    "start": "89759",
    "end": "91920"
  },
  {
    "text": "native automation",
    "start": "91920",
    "end": "93360"
  },
  {
    "text": "for deployment scaling and management",
    "start": "93360",
    "end": "95360"
  },
  {
    "text": "capabilities",
    "start": "95360",
    "end": "96960"
  },
  {
    "text": "with rich s3 compatibility and",
    "start": "96960",
    "end": "98799"
  },
  {
    "text": "self-service apis",
    "start": "98799",
    "end": "100560"
  },
  {
    "text": "developer can quickly spin up object",
    "start": "100560",
    "end": "102640"
  },
  {
    "text": "storage containers",
    "start": "102640",
    "end": "103680"
  },
  {
    "text": "to fuel everything from big data and",
    "start": "103680",
    "end": "105520"
  },
  {
    "text": "analytics applications",
    "start": "105520",
    "end": "107119"
  },
  {
    "text": "to ephemeral dev tests sandboxes in this",
    "start": "107119",
    "end": "109920"
  },
  {
    "text": "case we'll be using it as the long-term",
    "start": "109920",
    "end": "111840"
  },
  {
    "text": "storage",
    "start": "111840",
    "end": "112640"
  },
  {
    "text": "for our streaming application",
    "start": "112640",
    "end": "116079"
  },
  {
    "text": "the dell emc streaming data platform",
    "start": "116079",
    "end": "118320"
  },
  {
    "text": "takes the best of open source",
    "start": "118320",
    "end": "120000"
  },
  {
    "text": "streaming data software in prevega and",
    "start": "120000",
    "end": "122079"
  },
  {
    "text": "apache flink",
    "start": "122079",
    "end": "123119"
  },
  {
    "text": "and pulls it together in a production",
    "start": "123119",
    "end": "124799"
  },
  {
    "text": "grade supported",
    "start": "124799",
    "end": "126240"
  },
  {
    "text": "platform sdp provides the reliable",
    "start": "126240",
    "end": "129280"
  },
  {
    "text": "repeatable platform for edge and core",
    "start": "129280",
    "end": "131520"
  },
  {
    "text": "solutions",
    "start": "131520",
    "end": "133440"
  },
  {
    "text": "next let's take a look at the basic",
    "start": "133440",
    "end": "135760"
  },
  {
    "text": "architectural view for what we've",
    "start": "135760",
    "end": "137440"
  },
  {
    "text": "deployed",
    "start": "137440",
    "end": "138080"
  },
  {
    "text": "for this demo solution",
    "start": "138080",
    "end": "142800"
  },
  {
    "start": "141000",
    "end": "274000"
  },
  {
    "text": "first we've deployed dtcp",
    "start": "142800",
    "end": "146239"
  },
  {
    "text": "then enabled vsphere with tonzu",
    "start": "146239",
    "end": "150000"
  },
  {
    "text": "next we deploy object scale as vsphere",
    "start": "150000",
    "end": "152400"
  },
  {
    "text": "pods in its own namespace",
    "start": "152400",
    "end": "154160"
  },
  {
    "text": "in the supervisor cluster",
    "start": "154160",
    "end": "157280"
  },
  {
    "text": "and create an object store for streaming",
    "start": "157280",
    "end": "159280"
  },
  {
    "text": "data platform",
    "start": "159280",
    "end": "160800"
  },
  {
    "text": "then we created a namespace and tkg",
    "start": "160800",
    "end": "163440"
  },
  {
    "text": "clusters for streaming data platform and",
    "start": "163440",
    "end": "165519"
  },
  {
    "text": "jupyterhub",
    "start": "165519",
    "end": "167519"
  },
  {
    "text": "then we deployed sdp",
    "start": "167519",
    "end": "170959"
  },
  {
    "text": "jupiter hub and then our streaming",
    "start": "170959",
    "end": "174560"
  },
  {
    "text": "application for object detection",
    "start": "174560",
    "end": "178560"
  },
  {
    "text": "let's quickly review the infrastructure",
    "start": "178560",
    "end": "180239"
  },
  {
    "text": "deployment in vsphere before we move on",
    "start": "180239",
    "end": "185599"
  },
  {
    "text": "here we can see that our dell emc object",
    "start": "185599",
    "end": "187840"
  },
  {
    "text": "scale",
    "start": "187840",
    "end": "189040"
  },
  {
    "text": "service has been enabled under",
    "start": "189040",
    "end": "190640"
  },
  {
    "text": "supervisor services",
    "start": "190640",
    "end": "192239"
  },
  {
    "text": "and so our vsphere plugin has been",
    "start": "192239",
    "end": "195120"
  },
  {
    "text": "enabled",
    "start": "195120",
    "end": "196080"
  },
  {
    "text": "we can look here under object stores to",
    "start": "196080",
    "end": "198480"
  },
  {
    "text": "see that we've already created an object",
    "start": "198480",
    "end": "200239"
  },
  {
    "text": "store",
    "start": "200239",
    "end": "201040"
  },
  {
    "text": "we can either create new stores here or",
    "start": "201040",
    "end": "203360"
  },
  {
    "text": "view our existing ones",
    "start": "203360",
    "end": "205680"
  },
  {
    "text": "this is this object store that we're",
    "start": "205680",
    "end": "207280"
  },
  {
    "text": "using for our streaming data platform",
    "start": "207280",
    "end": "210480"
  },
  {
    "text": "long term storage you can see here that",
    "start": "210480",
    "end": "212239"
  },
  {
    "text": "we have several buckets",
    "start": "212239",
    "end": "213599"
  },
  {
    "text": "and we can also manage users kubernetes",
    "start": "213599",
    "end": "216080"
  },
  {
    "text": "resources",
    "start": "216080",
    "end": "216799"
  },
  {
    "text": "for this deployment certificates events",
    "start": "216799",
    "end": "219599"
  },
  {
    "text": "and health checks",
    "start": "219599",
    "end": "220799"
  },
  {
    "text": "on the left hand side you can see that",
    "start": "220799",
    "end": "222400"
  },
  {
    "text": "it's all deployed in a dell emc object",
    "start": "222400",
    "end": "224840"
  },
  {
    "text": "scale",
    "start": "224840",
    "end": "226239"
  },
  {
    "text": "system namespace as vsphere pods",
    "start": "226239",
    "end": "230799"
  },
  {
    "text": "taking a look at our streaming data",
    "start": "231280",
    "end": "233599"
  },
  {
    "text": "platform namespace where we've",
    "start": "233599",
    "end": "235360"
  },
  {
    "text": "deployed provega apache flink and all",
    "start": "235360",
    "end": "238319"
  },
  {
    "text": "the other resources you'll see that we",
    "start": "238319",
    "end": "240640"
  },
  {
    "text": "have",
    "start": "240640",
    "end": "241120"
  },
  {
    "text": "multiple tkg clusters that we've",
    "start": "241120",
    "end": "243120"
  },
  {
    "text": "deployed here",
    "start": "243120",
    "end": "244480"
  },
  {
    "text": "we have a cluster for our jupiter hub",
    "start": "244480",
    "end": "247280"
  },
  {
    "text": "deployment",
    "start": "247280",
    "end": "247920"
  },
  {
    "text": "as well as a streaming data platform",
    "start": "247920",
    "end": "250879"
  },
  {
    "text": "cluster",
    "start": "250879",
    "end": "251680"
  },
  {
    "text": "which has highly available masternodes",
    "start": "251680",
    "end": "254959"
  },
  {
    "text": "and multiple worker nodes where we've",
    "start": "254959",
    "end": "257359"
  },
  {
    "text": "deployed the streaming data platform",
    "start": "257359",
    "end": "259120"
  },
  {
    "text": "application which will be reviewed later",
    "start": "259120",
    "end": "261120"
  },
  {
    "text": "on in the demo",
    "start": "261120",
    "end": "263840"
  },
  {
    "text": "now i'm going to hand it over to ashish",
    "start": "267280",
    "end": "269120"
  },
  {
    "text": "to give some more detail",
    "start": "269120",
    "end": "270479"
  },
  {
    "text": "on the streaming data platform",
    "start": "270479",
    "end": "271840"
  },
  {
    "text": "architecture",
    "start": "271840",
    "end": "274479"
  },
  {
    "start": "274000",
    "end": "514000"
  },
  {
    "text": "thank you david uh so let me start with",
    "start": "274720",
    "end": "277520"
  },
  {
    "text": "the dell emc streaming data platform so",
    "start": "277520",
    "end": "279600"
  },
  {
    "text": "that emc streaming data platform is a",
    "start": "279600",
    "end": "281759"
  },
  {
    "text": "modern",
    "start": "281759",
    "end": "282720"
  },
  {
    "text": "analytic platform that solves the",
    "start": "282720",
    "end": "284960"
  },
  {
    "text": "problem of ingesting",
    "start": "284960",
    "end": "286479"
  },
  {
    "text": "storing and analyzing real-time and",
    "start": "286479",
    "end": "289040"
  },
  {
    "text": "historical streaming data",
    "start": "289040",
    "end": "290960"
  },
  {
    "text": "all with enterprise skill and production",
    "start": "290960",
    "end": "292720"
  },
  {
    "text": "support streaming data platform is built",
    "start": "292720",
    "end": "295919"
  },
  {
    "text": "using community developed",
    "start": "295919",
    "end": "297440"
  },
  {
    "text": "open source software components for",
    "start": "297440",
    "end": "299520"
  },
  {
    "text": "example",
    "start": "299520",
    "end": "300479"
  },
  {
    "text": "it uses kubernetes as the orchestration",
    "start": "300479",
    "end": "302880"
  },
  {
    "text": "layer",
    "start": "302880",
    "end": "303840"
  },
  {
    "text": "pravega which is a core key component",
    "start": "303840",
    "end": "305759"
  },
  {
    "text": "for streaming data platform",
    "start": "305759",
    "end": "307919"
  },
  {
    "text": "is a streaming storage that simplifies",
    "start": "307919",
    "end": "310160"
  },
  {
    "text": "the development of streaming",
    "start": "310160",
    "end": "311440"
  },
  {
    "text": "applications",
    "start": "311440",
    "end": "312639"
  },
  {
    "text": "by unifying the concept of historical",
    "start": "312639",
    "end": "314960"
  },
  {
    "text": "and real-time data",
    "start": "314960",
    "end": "316479"
  },
  {
    "text": "while providing powerful production",
    "start": "316479",
    "end": "318320"
  },
  {
    "text": "abilities such as exactly once",
    "start": "318320",
    "end": "320080"
  },
  {
    "text": "consistency",
    "start": "320080",
    "end": "321520"
  },
  {
    "text": "and injection auto scaling etc",
    "start": "321520",
    "end": "324880"
  },
  {
    "text": "the main the main other component is a",
    "start": "324880",
    "end": "327039"
  },
  {
    "text": "plug-in architecture",
    "start": "327039",
    "end": "328639"
  },
  {
    "text": "to support modern real-time analytics",
    "start": "328639",
    "end": "331120"
  },
  {
    "text": "engines such as apache flink",
    "start": "331120",
    "end": "333199"
  },
  {
    "text": "also available in the upcoming release",
    "start": "333199",
    "end": "335039"
  },
  {
    "text": "apache spark and previous search",
    "start": "335039",
    "end": "337199"
  },
  {
    "text": "which is kind of an elastic search like",
    "start": "337199",
    "end": "339120"
  },
  {
    "text": "engine that also allows for real-time",
    "start": "339120",
    "end": "341680"
  },
  {
    "text": "streaming queries",
    "start": "341680",
    "end": "343360"
  },
  {
    "text": "of your unstructured log data all on the",
    "start": "343360",
    "end": "345759"
  },
  {
    "text": "same stp platform",
    "start": "345759",
    "end": "347759"
  },
  {
    "text": "hence reducing the need for separate",
    "start": "347759",
    "end": "349680"
  },
  {
    "text": "pipeline and hardware",
    "start": "349680",
    "end": "351520"
  },
  {
    "text": "by taking the best of open source and",
    "start": "351520",
    "end": "353280"
  },
  {
    "text": "pulling it together",
    "start": "353280",
    "end": "354639"
  },
  {
    "text": "in a production grid supported platform",
    "start": "354639",
    "end": "357520"
  },
  {
    "text": "sdp",
    "start": "357520",
    "end": "358080"
  },
  {
    "text": "provides the reliable secure manageable",
    "start": "358080",
    "end": "360639"
  },
  {
    "text": "and repeatable platform",
    "start": "360639",
    "end": "362400"
  },
  {
    "text": "for edge and core solutions streaming",
    "start": "362400",
    "end": "365199"
  },
  {
    "text": "data platform",
    "start": "365199",
    "end": "366000"
  },
  {
    "text": "has a few key features number one",
    "start": "366000",
    "end": "369520"
  },
  {
    "text": "unified data analytics for both",
    "start": "369520",
    "end": "372319"
  },
  {
    "text": "real-time and historical data",
    "start": "372319",
    "end": "374160"
  },
  {
    "text": "so that data scientists and developers",
    "start": "374160",
    "end": "377199"
  },
  {
    "text": "write code once that deals with all",
    "start": "377199",
    "end": "379199"
  },
  {
    "text": "types of data without worrying about",
    "start": "379199",
    "end": "381520"
  },
  {
    "text": "independent batch and stream processing",
    "start": "381520",
    "end": "384000"
  },
  {
    "text": "in other words",
    "start": "384000",
    "end": "385120"
  },
  {
    "text": "developers don't have to code",
    "start": "385120",
    "end": "386639"
  },
  {
    "text": "differently against the live",
    "start": "386639",
    "end": "388560"
  },
  {
    "text": "of the wired data versus historical",
    "start": "388560",
    "end": "390400"
  },
  {
    "text": "files of data",
    "start": "390400",
    "end": "392080"
  },
  {
    "text": "now batch iot events and pure byte",
    "start": "392080",
    "end": "395360"
  },
  {
    "text": "stream use cases",
    "start": "395360",
    "end": "396720"
  },
  {
    "text": "all can co-exist on the same platform",
    "start": "396720",
    "end": "399520"
  },
  {
    "text": "the second key feature is a",
    "start": "399520",
    "end": "401520"
  },
  {
    "text": "dvr like injection and playback",
    "start": "401520",
    "end": "403360"
  },
  {
    "text": "capabilities that stp has",
    "start": "403360",
    "end": "405440"
  },
  {
    "text": "that allows ingestion of historical and",
    "start": "405440",
    "end": "408240"
  },
  {
    "text": "real-time data using the single",
    "start": "408240",
    "end": "410080"
  },
  {
    "text": "injection pipeline",
    "start": "410080",
    "end": "411440"
  },
  {
    "text": "unlike to existing solutions that",
    "start": "411440",
    "end": "413280"
  },
  {
    "text": "require one solution for real-time data",
    "start": "413280",
    "end": "416160"
  },
  {
    "text": "and another one",
    "start": "416160",
    "end": "417280"
  },
  {
    "text": "for different batch processing for the",
    "start": "417280",
    "end": "419919"
  },
  {
    "text": "historical data",
    "start": "419919",
    "end": "420880"
  },
  {
    "text": "for sdp users can go back in time and",
    "start": "420880",
    "end": "423680"
  },
  {
    "text": "play the historical stream",
    "start": "423680",
    "end": "425280"
  },
  {
    "text": "alongside the real time stream the third",
    "start": "425280",
    "end": "428080"
  },
  {
    "text": "key feature is that",
    "start": "428080",
    "end": "429520"
  },
  {
    "text": "the support for two tier long term",
    "start": "429520",
    "end": "431759"
  },
  {
    "text": "stories",
    "start": "431759",
    "end": "433039"
  },
  {
    "text": "an architecture that allows industry",
    "start": "433039",
    "end": "435759"
  },
  {
    "text": "standard storage systems such as",
    "start": "435759",
    "end": "437360"
  },
  {
    "text": "ice salon and ecs to be used for the",
    "start": "437360",
    "end": "439599"
  },
  {
    "text": "long term storage",
    "start": "439599",
    "end": "440880"
  },
  {
    "text": "the configuration allows users to",
    "start": "440880",
    "end": "442880"
  },
  {
    "text": "configure data retention period",
    "start": "442880",
    "end": "444880"
  },
  {
    "text": "or until the size grows to a specific",
    "start": "444880",
    "end": "447039"
  },
  {
    "text": "limit",
    "start": "447039",
    "end": "448080"
  },
  {
    "text": "the fourth key feature is the enterprise",
    "start": "448080",
    "end": "450000"
  },
  {
    "text": "grade security",
    "start": "450000",
    "end": "451120"
  },
  {
    "text": "which is of prime importance when",
    "start": "451120",
    "end": "452720"
  },
  {
    "text": "multiple business units leverages on the",
    "start": "452720",
    "end": "454639"
  },
  {
    "text": "same platform",
    "start": "454639",
    "end": "455759"
  },
  {
    "text": "instead of every business unit building",
    "start": "455759",
    "end": "457599"
  },
  {
    "text": "their own independent solutions",
    "start": "457599",
    "end": "459919"
  },
  {
    "text": "and last but not least to the secure and",
    "start": "459919",
    "end": "461840"
  },
  {
    "text": "scalable multi-tenant",
    "start": "461840",
    "end": "463520"
  },
  {
    "text": "development platform a platform that can",
    "start": "463520",
    "end": "465919"
  },
  {
    "text": "be used",
    "start": "465919",
    "end": "466879"
  },
  {
    "text": "by multiple independent business units",
    "start": "466879",
    "end": "468720"
  },
  {
    "text": "in comparison to existing solutions",
    "start": "468720",
    "end": "470960"
  },
  {
    "text": "that require each business unit to stay",
    "start": "470960",
    "end": "473599"
  },
  {
    "text": "stand their own",
    "start": "473599",
    "end": "474639"
  },
  {
    "text": "system for the analytics so that means",
    "start": "474639",
    "end": "477840"
  },
  {
    "text": "sdp has",
    "start": "477840",
    "end": "479199"
  },
  {
    "text": "necessary access control to ensure that",
    "start": "479199",
    "end": "481280"
  },
  {
    "text": "data is secure",
    "start": "481280",
    "end": "482879"
  },
  {
    "text": "with streaming data platform in place",
    "start": "482879",
    "end": "485360"
  },
  {
    "text": "organizations can now",
    "start": "485360",
    "end": "486800"
  },
  {
    "text": "ingest real-time streaming data and work",
    "start": "486800",
    "end": "489280"
  },
  {
    "text": "with it",
    "start": "489280",
    "end": "490080"
  },
  {
    "text": "in ways that they have never even",
    "start": "490080",
    "end": "492000"
  },
  {
    "text": "imagined we are seeing customers solve",
    "start": "492000",
    "end": "495199"
  },
  {
    "text": "some amazing problems just by having",
    "start": "495199",
    "end": "497280"
  },
  {
    "text": "this access to the depth and breadth of",
    "start": "497280",
    "end": "499199"
  },
  {
    "text": "their",
    "start": "499199",
    "end": "499840"
  },
  {
    "text": "sea of data and being able to analyze it",
    "start": "499840",
    "end": "502319"
  },
  {
    "text": "however they need to",
    "start": "502319",
    "end": "503840"
  },
  {
    "text": "with ease let's take a look at our next",
    "start": "503840",
    "end": "506400"
  },
  {
    "text": "section",
    "start": "506400",
    "end": "506960"
  },
  {
    "text": "where andre is demonstrating real-time",
    "start": "506960",
    "end": "509199"
  },
  {
    "text": "object detection",
    "start": "509199",
    "end": "510560"
  },
  {
    "text": "using streaming data platform",
    "start": "510560",
    "end": "514000"
  },
  {
    "start": "514000",
    "end": "897000"
  },
  {
    "text": "hi everyone today i'm going to show you",
    "start": "514399",
    "end": "516479"
  },
  {
    "text": "the object detection demo",
    "start": "516479",
    "end": "518000"
  },
  {
    "text": "using streaming data platform running on",
    "start": "518000",
    "end": "520159"
  },
  {
    "text": "vmware tenzu",
    "start": "520159",
    "end": "522800"
  },
  {
    "text": "my persona in this demo is data",
    "start": "522800",
    "end": "524959"
  },
  {
    "text": "scientist i'm a part of a team",
    "start": "524959",
    "end": "526800"
  },
  {
    "text": "development advanced driver assistant",
    "start": "526800",
    "end": "528640"
  },
  {
    "text": "system",
    "start": "528640",
    "end": "529519"
  },
  {
    "text": "we continuously collect video and other",
    "start": "529519",
    "end": "532240"
  },
  {
    "text": "sensor data from",
    "start": "532240",
    "end": "533680"
  },
  {
    "text": "the fleet of test vehicles",
    "start": "533680",
    "end": "536720"
  },
  {
    "text": "there is a three stage of this",
    "start": "536720",
    "end": "538000"
  },
  {
    "text": "experiment first",
    "start": "538000",
    "end": "540080"
  },
  {
    "text": "we use the proviga grpc connector and",
    "start": "540080",
    "end": "542560"
  },
  {
    "text": "jupyter notebook to push the video",
    "start": "542560",
    "end": "544480"
  },
  {
    "text": "frames",
    "start": "544480",
    "end": "545040"
  },
  {
    "text": "into a provega stream provega provides",
    "start": "545040",
    "end": "548800"
  },
  {
    "text": "a python and java client for the grpc",
    "start": "548800",
    "end": "551839"
  },
  {
    "text": "connector here in jupiter hub we are",
    "start": "551839",
    "end": "554399"
  },
  {
    "text": "using the python client",
    "start": "554399",
    "end": "557600"
  },
  {
    "text": "the data will be stored in the proviga",
    "start": "557600",
    "end": "559279"
  },
  {
    "text": "stream that i call the",
    "start": "559279",
    "end": "560800"
  },
  {
    "text": "raw video for object detection",
    "start": "560800",
    "end": "564000"
  },
  {
    "text": "i created a flink application",
    "start": "564000",
    "end": "567040"
  },
  {
    "text": "the object detection model runs as a",
    "start": "567040",
    "end": "568800"
  },
  {
    "text": "fling job in stp",
    "start": "568800",
    "end": "571200"
  },
  {
    "text": "it uses the yolo object detection model",
    "start": "571200",
    "end": "573600"
  },
  {
    "text": "which stands for you only look ones",
    "start": "573600",
    "end": "576080"
  },
  {
    "text": "the fling job uses java binding for",
    "start": "576080",
    "end": "577920"
  },
  {
    "text": "tensorflow",
    "start": "577920",
    "end": "579279"
  },
  {
    "text": "as each video frame is ingested the",
    "start": "579279",
    "end": "582240"
  },
  {
    "text": "object detection model",
    "start": "582240",
    "end": "583600"
  },
  {
    "text": "is used to detect objects such as cars",
    "start": "583600",
    "end": "586399"
  },
  {
    "text": "bosses and people",
    "start": "586399",
    "end": "588080"
  },
  {
    "text": "and it will add labeled boxes to the",
    "start": "588080",
    "end": "590880"
  },
  {
    "text": "video frames around detected objects",
    "start": "590880",
    "end": "593760"
  },
  {
    "text": "it will also enrich the metadata with",
    "start": "593760",
    "end": "595839"
  },
  {
    "text": "the detected object list",
    "start": "595839",
    "end": "597680"
  },
  {
    "text": "and the detection accuracy and finally",
    "start": "597680",
    "end": "601519"
  },
  {
    "text": "using the same connector the grpc",
    "start": "601519",
    "end": "604560"
  },
  {
    "text": "i can pull the events from the object",
    "start": "604560",
    "end": "606399"
  },
  {
    "text": "detector output video stream in prevega",
    "start": "606399",
    "end": "608800"
  },
  {
    "text": "and play the video in",
    "start": "608800",
    "end": "610079"
  },
  {
    "text": "jupiter notebook",
    "start": "610079",
    "end": "613120"
  },
  {
    "text": "and now let's move to the actual demo",
    "start": "613360",
    "end": "616320"
  },
  {
    "text": "we're starting at the sdp ui",
    "start": "616320",
    "end": "620320"
  },
  {
    "text": "first going to log in",
    "start": "620800",
    "end": "623920"
  },
  {
    "text": "and here under the analytics tab",
    "start": "628399",
    "end": "632720"
  },
  {
    "text": "i can create a project",
    "start": "632720",
    "end": "635760"
  },
  {
    "text": "this will create a namespace for my vega",
    "start": "635760",
    "end": "638399"
  },
  {
    "text": "streams",
    "start": "638399",
    "end": "638959"
  },
  {
    "text": "in my flink cluster",
    "start": "638959",
    "end": "642000"
  },
  {
    "text": "note that for this example we are using",
    "start": "643519",
    "end": "645600"
  },
  {
    "text": "the object",
    "start": "645600",
    "end": "646880"
  },
  {
    "text": "object store available on gtcp which was",
    "start": "646880",
    "end": "649920"
  },
  {
    "text": "reviewed earlier in this demo",
    "start": "649920",
    "end": "653200"
  },
  {
    "text": "to the left side i can create a flink",
    "start": "654880",
    "end": "658160"
  },
  {
    "text": "cluster",
    "start": "658160",
    "end": "658720"
  },
  {
    "text": "for my application this can be created",
    "start": "658720",
    "end": "662320"
  },
  {
    "text": "using this ui",
    "start": "662320",
    "end": "665120"
  },
  {
    "text": "or the helm to deploy the flink cluster",
    "start": "665120",
    "end": "668320"
  },
  {
    "text": "size that we need",
    "start": "668320",
    "end": "671200"
  },
  {
    "text": "for the flink application stp provides",
    "start": "671360",
    "end": "674640"
  },
  {
    "text": "a local maven repo where we can upload",
    "start": "674640",
    "end": "677519"
  },
  {
    "text": "the application",
    "start": "677519",
    "end": "678720"
  },
  {
    "text": "needed for this project",
    "start": "678720",
    "end": "681920"
  },
  {
    "text": "now i can run the flink application for",
    "start": "683920",
    "end": "687920"
  },
  {
    "text": "object detection",
    "start": "687920",
    "end": "688880"
  },
  {
    "text": "that reads from the raw video stream",
    "start": "688880",
    "end": "691279"
  },
  {
    "text": "process the data",
    "start": "691279",
    "end": "692640"
  },
  {
    "text": "and push the processed video to a new",
    "start": "692640",
    "end": "695440"
  },
  {
    "text": "stream",
    "start": "695440",
    "end": "695920"
  },
  {
    "text": "called object detector output video on",
    "start": "695920",
    "end": "699040"
  },
  {
    "text": "our",
    "start": "699040",
    "end": "699519"
  },
  {
    "text": "vega tab here we can see",
    "start": "699519",
    "end": "702800"
  },
  {
    "text": "all the work all the streams",
    "start": "702800",
    "end": "706399"
  },
  {
    "text": "to build this demo first we can start",
    "start": "706640",
    "end": "709040"
  },
  {
    "text": "with the raw video",
    "start": "709040",
    "end": "712079"
  },
  {
    "text": "and the output of the processing goes",
    "start": "712240",
    "end": "714720"
  },
  {
    "text": "into the stream",
    "start": "714720",
    "end": "717839"
  },
  {
    "text": "from the jupiter notebook from the",
    "start": "719200",
    "end": "721440"
  },
  {
    "text": "jupiter hub i created two notebooks",
    "start": "721440",
    "end": "724560"
  },
  {
    "text": "one called the adas ingest",
    "start": "724560",
    "end": "727760"
  },
  {
    "text": "and that will push the data into",
    "start": "727760",
    "end": "731279"
  },
  {
    "text": "prevega stream",
    "start": "731279",
    "end": "734160"
  },
  {
    "text": "i'm going to go ahead and start it",
    "start": "737279",
    "end": "740720"
  },
  {
    "text": "the second notebook we'll use the grpc",
    "start": "741360",
    "end": "745040"
  },
  {
    "text": "to read the video and display it here",
    "start": "745040",
    "end": "749200"
  },
  {
    "text": "with the object detection",
    "start": "749200",
    "end": "752320"
  },
  {
    "text": "both those notebooks are needed for this",
    "start": "753760",
    "end": "755680"
  },
  {
    "text": "demo one for the ingestion",
    "start": "755680",
    "end": "757440"
  },
  {
    "text": "and one to read the data processed by",
    "start": "757440",
    "end": "760320"
  },
  {
    "text": "our flink application",
    "start": "760320",
    "end": "762880"
  },
  {
    "text": "and now let's go back to our stp ui",
    "start": "762880",
    "end": "766880"
  },
  {
    "text": "from here we're gonna look at the",
    "start": "766880",
    "end": "768560"
  },
  {
    "text": "prevega streams",
    "start": "768560",
    "end": "772000"
  },
  {
    "text": "should be able to see the data start to",
    "start": "772000",
    "end": "776880"
  },
  {
    "text": "get in the stream here and as the data",
    "start": "777600",
    "end": "781040"
  },
  {
    "text": "is coming into the provega stream",
    "start": "781040",
    "end": "783040"
  },
  {
    "text": "we're seeing the flink application",
    "start": "783040",
    "end": "784959"
  },
  {
    "text": "reading the data and processing it",
    "start": "784959",
    "end": "789040"
  },
  {
    "text": "so below that here is the flink job",
    "start": "795680",
    "end": "798800"
  },
  {
    "text": "reading from the stream processing and",
    "start": "798800",
    "end": "800399"
  },
  {
    "text": "writing this data",
    "start": "800399",
    "end": "801519"
  },
  {
    "text": "to the object detector output video",
    "start": "801519",
    "end": "803360"
  },
  {
    "text": "stream",
    "start": "803360",
    "end": "804959"
  },
  {
    "text": "if you go back to the scope",
    "start": "804959",
    "end": "808959"
  },
  {
    "text": "we should see the data again written to",
    "start": "808959",
    "end": "810800"
  },
  {
    "text": "this stream here",
    "start": "810800",
    "end": "814800"
  },
  {
    "text": "as you can see",
    "start": "814800",
    "end": "817519"
  },
  {
    "text": "on the screen here",
    "start": "818959",
    "end": "821760"
  },
  {
    "text": "here is the enrich raw video after",
    "start": "823760",
    "end": "825760"
  },
  {
    "text": "running the object detection job",
    "start": "825760",
    "end": "828480"
  },
  {
    "text": "back to the jupiter hub now",
    "start": "828480",
    "end": "831519"
  },
  {
    "text": "let's test the new object detection",
    "start": "831519",
    "end": "833120"
  },
  {
    "text": "model on the video collected",
    "start": "833120",
    "end": "836480"
  },
  {
    "text": "that video that raw video has been",
    "start": "836480",
    "end": "838560"
  },
  {
    "text": "continuously ingested into the scp and",
    "start": "838560",
    "end": "842000"
  },
  {
    "text": "now i'm going to play the demo",
    "start": "842000",
    "end": "856399"
  },
  {
    "text": "as you can see in this picture there's",
    "start": "856399",
    "end": "858320"
  },
  {
    "text": "frames around the detected objects",
    "start": "858320",
    "end": "861120"
  },
  {
    "text": "people buses cars",
    "start": "861120",
    "end": "865440"
  },
  {
    "text": "bicycles",
    "start": "868839",
    "end": "870639"
  },
  {
    "text": "and it's running live as we are",
    "start": "870639",
    "end": "872720"
  },
  {
    "text": "ingesting the data",
    "start": "872720",
    "end": "874800"
  },
  {
    "text": "the object detection runs the",
    "start": "874800",
    "end": "878320"
  },
  {
    "text": "model detect the objects and we can",
    "start": "878320",
    "end": "880800"
  },
  {
    "text": "process it and",
    "start": "880800",
    "end": "882399"
  },
  {
    "text": "display it as you can see here",
    "start": "882399",
    "end": "886639"
  },
  {
    "text": "with this this concludes our demo for",
    "start": "886639",
    "end": "888639"
  },
  {
    "text": "the object detection",
    "start": "888639",
    "end": "890320"
  },
  {
    "text": "using the streaming data platform",
    "start": "890320",
    "end": "891680"
  },
  {
    "text": "running on vmware 10zoom",
    "start": "891680",
    "end": "893839"
  },
  {
    "text": "thank you",
    "start": "893839",
    "end": "899199"
  }
]