[
  {
    "text": "hi folks good afternoon uh thank you so much for being here uh I hope you're all having a great time awesome so in the",
    "start": "480",
    "end": "9000"
  },
  {
    "text": "recent history we've seen a lot of security attacks we've seen solar winds lock 4J even Sunburst this has very",
    "start": "9000",
    "end": "17480"
  },
  {
    "text": "rightly switched or you know transitioned our Focus to securing",
    "start": "17480",
    "end": "22600"
  },
  {
    "text": "supply chain in this session Vishal and I we will uh you know we'll talk about",
    "start": "22600",
    "end": "30039"
  },
  {
    "text": "or we'll walk you through starting from what container images are what it's made up of to going into the importance of",
    "start": "30039",
    "end": "38160"
  },
  {
    "text": "signing and verifying images and finally talking about where and how kerno fits",
    "start": "38160",
    "end": "43879"
  },
  {
    "text": "in right by the end of this session we hope that you'll be equipped with the right tools insights some understanding",
    "start": "43879",
    "end": "51680"
  },
  {
    "text": "that will help you achieve a secure supply",
    "start": "51680",
    "end": "55760"
  },
  {
    "text": "chain yeah so let's start with the software part of the software supply chain right so a container image is",
    "start": "57239",
    "end": "64400"
  },
  {
    "text": "basically a standard way of packaging the executable code along with all of its dependency in a way that can easily",
    "start": "64400",
    "end": "71040"
  },
  {
    "text": "be shared across users right and in terms of kubernetes a container image is",
    "start": "71040",
    "end": "76680"
  },
  {
    "text": "a basic unit that can be used to run your own code inside of a cluster um by that what I mean is that let's say you",
    "start": "76680",
    "end": "83200"
  },
  {
    "text": "want to run your binary inside of a cluster what you can do is you can create an image from it and then you can",
    "start": "83200",
    "end": "88240"
  },
  {
    "text": "run a pod and then expose it for it to be accessed right and let's say you want to create an API endpoint then you will",
    "start": "88240",
    "end": "95079"
  },
  {
    "text": "create a kubernetes service and expose it to all of its users using https uh one more thing to note is that",
    "start": "95079",
    "end": "102759"
  },
  {
    "text": "a a container image is stored in a Content addressable storage which is basically a way of saying that the URL",
    "start": "102759",
    "end": "109399"
  },
  {
    "text": "of a container image um is the proof of the content that lives there so the URL",
    "start": "109399",
    "end": "114479"
  },
  {
    "text": "of a container image has a digest and when you go to the URL and you pass it through a sh 256 checkm generator you",
    "start": "114479",
    "end": "121520"
  },
  {
    "text": "will get the digest back um this is a guarantee of immutability which means that if the content changes the digest",
    "start": "121520",
    "end": "128440"
  },
  {
    "text": "will change too and this will change the url as well and this immutability comes in really handy when we want to ensure",
    "start": "128440",
    "end": "135440"
  },
  {
    "text": "supply chain security so let's the the basic is out of the way now let's um dive into what are the contents of a",
    "start": "135440",
    "end": "142360"
  },
  {
    "text": "container image so a container image has configs and aay and layers as well right",
    "start": "142360",
    "end": "148680"
  },
  {
    "text": "so let's start with the config so config as the name suggest is the configuration of the container image which can be used",
    "start": "148680",
    "end": "156200"
  },
  {
    "text": "um to create the container properly and make sure that everything is in place so it is a Json object that contains the",
    "start": "156200",
    "end": "162519"
  },
  {
    "text": "history um which contains the list of the authors um it contains the OS information as well as the inment",
    "start": "162519",
    "end": "168000"
  },
  {
    "text": "envirment variables that should be used while we start the container right um another thing is layers so a layer is",
    "start": "168000",
    "end": "176280"
  },
  {
    "text": "basically a chunk of the executable code of the container image and when we go to a container image layer and fetch its",
    "start": "176280",
    "end": "183360"
  },
  {
    "text": "content and pass it through the right parser based on its media type we get the binary of the um container image",
    "start": "183360",
    "end": "190840"
  },
  {
    "text": "that was placed in that layer so here we have a layer of Type R and when we pass it through the tar CLI we get the binary",
    "start": "190840",
    "end": "198159"
  },
  {
    "text": "that was stored in that layer so I actually like to think of this as like layers of a cake so for example a cake",
    "start": "198159",
    "end": "205239"
  },
  {
    "text": "needs multiple layers and icing on top to make it you know perfect similarly we need um a container image to have all of its",
    "start": "205239",
    "end": "212239"
  },
  {
    "text": "layer in the right order along with the config to wrap it all up to make the container image work okay so moving on",
    "start": "212239",
    "end": "220239"
  },
  {
    "text": "um so the question is now we have the config and the layers how do we distribute this to the users right so to",
    "start": "220239",
    "end": "226080"
  },
  {
    "text": "do that we have another data type called an oci manifest so what a manifest has",
    "start": "226080",
    "end": "231680"
  },
  {
    "text": "it is uh so it is basically a Json object that has all the layers the information of all the layers as well as",
    "start": "231680",
    "end": "237159"
  },
  {
    "text": "the configuration that needs to be used and when you fetch the image you basically fetch this um",
    "start": "237159",
    "end": "242640"
  },
  {
    "text": "Json object and the client that you're using will use the config and the layers to start the container with all of all",
    "start": "242640",
    "end": "249720"
  },
  {
    "text": "everything put in place right but what if you have a container image that's supposed to multiple platform right so",
    "start": "249720",
    "end": "256600"
  },
  {
    "text": "for that there is another data type called a manifest list this will be stored at the root of root of the",
    "start": "256600",
    "end": "263880"
  },
  {
    "text": "container image so when you pull a multiplatform container image it will give you a list of all the Manifest with",
    "start": "263880",
    "end": "269800"
  },
  {
    "text": "the information of the OS that they support and you can use the right manifest to um in your environment to do",
    "start": "269800",
    "end": "276199"
  },
  {
    "text": "what you want okay after that these were the basic um until last year and recently there has been another addition",
    "start": "276199",
    "end": "282680"
  },
  {
    "text": "to the O spec which is referer so basically referer is another oci",
    "start": "282680",
    "end": "288600"
  },
  {
    "text": "artifact that can be tied to an image without sacrificing the immutability so",
    "start": "288600",
    "end": "293759"
  },
  {
    "text": "let's say you have a use case where the image has been published but you want to add additional data additional information besides of the executable",
    "start": "293759",
    "end": "299720"
  },
  {
    "text": "code and you want to attach it to the image so to do that what you will do is you will create another oi artifact in a",
    "start": "299720",
    "end": "305639"
  },
  {
    "text": "registry and make that um artifact point to the image so what will happen is that",
    "start": "305639",
    "end": "311320"
  },
  {
    "text": "when you want to access everything that is attached to the image the reference API will look for all of those pointers",
    "start": "311320",
    "end": "317639"
  },
  {
    "text": "and will list uh give you a list of all of them so here we have an image and when we use the AAS CLI to fetch all the",
    "start": "317639",
    "end": "324400"
  },
  {
    "text": "refs it finds that it has a vulnerability scan report a s bomb and everything attached to",
    "start": "324400",
    "end": "330600"
  },
  {
    "text": "right so before we summarize everything I would like to give the shout out um to",
    "start": "330600",
    "end": "335759"
  },
  {
    "text": "Brandon Mitchell for this amazing image and a amazing um explainer video on what oci images are it is highly recommended",
    "start": "335759",
    "end": "342199"
  },
  {
    "text": "to watch that if you want to learn more so let's explain uh what we just discussed so here we on the left side we",
    "start": "342199",
    "end": "349360"
  },
  {
    "text": "have the tag which is pointing to the Manifest and the Manifest has a config and multiple layers and on the right we",
    "start": "349360",
    "end": "355080"
  },
  {
    "text": "have all the referers that are pointing to that image right so this EXP explains how container images work and the",
    "start": "355080",
    "end": "361520"
  },
  {
    "text": "contents of a container image so moving on great so now there are scary things",
    "start": "361520",
    "end": "366919"
  },
  {
    "text": "that that can creep into your images right what I'm talking about is vulnerabilities what is a vulnerability",
    "start": "366919",
    "end": "373639"
  },
  {
    "text": "now that's a security risk that can be embedded into your container image why do we care about it we care about it",
    "start": "373639",
    "end": "380199"
  },
  {
    "text": "because if you have a vulnerability in your workload this could could leave space for a security attack now that's",
    "start": "380199",
    "end": "387520"
  },
  {
    "text": "definitely a big no no right so we came up we this is a norm now where we scan",
    "start": "387520",
    "end": "392960"
  },
  {
    "text": "our images we scan our repositories for vulnerabilities we produce reports we",
    "start": "392960",
    "end": "398720"
  },
  {
    "text": "deal with these vulnerabilities we resolve them according to the threat they pose but vulnerability reports are",
    "start": "398720",
    "end": "406560"
  },
  {
    "text": "sort of like a snapshot of what vulnerabilities existed at a certain",
    "start": "406560",
    "end": "411800"
  },
  {
    "text": "point in time they're not stable it's actually a moving Target because there are new vulnerabilities that come up",
    "start": "411800",
    "end": "417680"
  },
  {
    "text": "every day and um when this happens this is not a stable way to communicate about",
    "start": "417680",
    "end": "423240"
  },
  {
    "text": "vulnerability information enter sbom so s bomb um s bomb refers to well software",
    "start": "423240",
    "end": "432160"
  },
  {
    "text": "bill of materials this contains a list of everything in your software right a list of everything that makes up your",
    "start": "432160",
    "end": "439080"
  },
  {
    "text": "software once you have this this provides a static way of keeping a track",
    "start": "439080",
    "end": "444599"
  },
  {
    "text": "of all the updates of all the known vulnerabilities in your software making",
    "start": "444599",
    "end": "450080"
  },
  {
    "text": "vulnerability you know dealing with vulnerabilities much easier I've even we've even got a certain image showing",
    "start": "450080",
    "end": "457039"
  },
  {
    "text": "how a developer builds the image pushes it along with s bomb and vulnerability",
    "start": "457039",
    "end": "462199"
  },
  {
    "text": "reports this is together pushed to container Registries and well put when pulled from it we verify the S bombs we",
    "start": "462199",
    "end": "469199"
  },
  {
    "text": "verify all vulnerabilities make sure we are okay with what exists and then push it to a workload awesome but now there",
    "start": "469199",
    "end": "476400"
  },
  {
    "text": "are some problems that need to be addressed when you know you've in roduce metadata like s bomb and you know",
    "start": "476400",
    "end": "482759"
  },
  {
    "text": "reports so the problems that we're talking about the first one is how do you store this metadata your image is",
    "start": "482759",
    "end": "488919"
  },
  {
    "text": "immutable but now with every artifact you have a s bomb a report and whatnot",
    "start": "488919",
    "end": "494960"
  },
  {
    "text": "so this was actually covered by Vishal a few slides ago where he talked about the referrer's API where you can essentially",
    "start": "494960",
    "end": "501120"
  },
  {
    "text": "have a s bomb and pointed to the image that it's you know supposed to be as",
    "start": "501120",
    "end": "506759"
  },
  {
    "text": "bomb for and the next problem that we want to look at is how do I trust the",
    "start": "506759",
    "end": "512360"
  },
  {
    "text": "metadata now any Tom Dick and Harry could have you know something some artifact pointing to my image how do I",
    "start": "512360",
    "end": "519200"
  },
  {
    "text": "know that this is a trustable metadata or how do I trust this information yeah so as Anushka just",
    "start": "519200",
    "end": "526080"
  },
  {
    "text": "mentioned that since anyone can attach anything to your container image how can you be so sure that the Manifest or the",
    "start": "526080",
    "end": "532560"
  },
  {
    "text": "s bomb that you're looking at is the one that is created by a developer right it can be created by someone who wants to",
    "start": "532560",
    "end": "538320"
  },
  {
    "text": "take advantage of you right right a more general question would be how can you be so sure that the container image that",
    "start": "538320",
    "end": "544120"
  },
  {
    "text": "you're using is a trustable image out of all the bad images that can be used to um do container breakout attacks on a",
    "start": "544120",
    "end": "550720"
  },
  {
    "text": "cluster right so we need a way to Comm communicate this information of trust from the consumer to the develop to that",
    "start": "550720",
    "end": "556920"
  },
  {
    "text": "from developer to the consumer of the image right we can achieve this by using signing so an image signing method can",
    "start": "556920",
    "end": "564839"
  },
  {
    "text": "be used to sign the digest of the image which is immutable in nature so when you sign the digest of an image what will",
    "start": "564839",
    "end": "570920"
  },
  {
    "text": "happen is that it will provide your identity and it will attach it to the um",
    "start": "570920",
    "end": "576079"
  },
  {
    "text": "current digest so anything that is added on top of the current image will lead to",
    "start": "576079",
    "end": "581519"
  },
  {
    "text": "a new digest right and since the image uh signature was attached to the previous digest um the consumer of the",
    "start": "581519",
    "end": "587480"
  },
  {
    "text": "image will know that the this up till this point was the code that you came up with and anything that has been added on",
    "start": "587480",
    "end": "593200"
  },
  {
    "text": "top of it has been created by someone who um is not trustworthy so they will know who to trust and and whom to not",
    "start": "593200",
    "end": "600160"
  },
  {
    "text": "right this image signing and verification flow can then be used by any kubernetes Dynamic admission",
    "start": "600160",
    "end": "606440"
  },
  {
    "text": "controller to enforce rules inside of a cluster to build integrity and create a",
    "start": "606440",
    "end": "611600"
  },
  {
    "text": "trusted environment right um this will ensure that no Bad actors can get access to your cluster so now that we uh have",
    "start": "611600",
    "end": "618839"
  },
  {
    "text": "discussed how why we sign and verify image let's discuss the options that we have for signing and",
    "start": "618839",
    "end": "625040"
  },
  {
    "text": "verification right so a signature uh can be cre ated using multiple ways you have",
    "start": "625040",
    "end": "631200"
  },
  {
    "text": "multiple tools available there are even many mechanisms involved you know there could be a CA Authority verifying your",
    "start": "631200",
    "end": "637160"
  },
  {
    "text": "signature you could uh you know have a oidc provider verifying that you are who you say you are uh there are mechanisms",
    "start": "637160",
    "end": "644760"
  },
  {
    "text": "like storing the timestamp of when a signature was made having transparency log of signatures and so on the two",
    "start": "644760",
    "end": "651639"
  },
  {
    "text": "tools that we'll be discussing today are six stores cosign and notary these tools",
    "start": "651639",
    "end": "657639"
  },
  {
    "text": "are used for image signing and verification right so no talking about",
    "start": "657639",
    "end": "663920"
  },
  {
    "text": "notary notary is like this simple easy to understand straightforward way to",
    "start": "663920",
    "end": "670079"
  },
  {
    "text": "achieve image signing and verification it achieves so by using x509 keyer pairs",
    "start": "670079",
    "end": "676800"
  },
  {
    "text": "right it supports oci 1.1 attest stations it is a cncf open source project and yeah it's a pretty cool tool",
    "start": "676800",
    "end": "683760"
  },
  {
    "text": "to check out about cosign it adds certain features and complex",
    "start": "683760",
    "end": "689480"
  },
  {
    "text": "to emit signing and verification it supports both keyed and keyless based",
    "start": "689480",
    "end": "694560"
  },
  {
    "text": "signing and verification it even supports in total attestations now cosign helps you store you can store the",
    "start": "694560",
    "end": "702880"
  },
  {
    "text": "signature timestamps and verify that the signature was created at some point in",
    "start": "702880",
    "end": "708720"
  },
  {
    "text": "time that you expected it to be created not before or after it also helps storing a transparency log of signatures",
    "start": "708720",
    "end": "716680"
  },
  {
    "text": "now this can be then used to Monitor and and detect malicious activity so if you don't want this transparency log to be",
    "start": "716680",
    "end": "723680"
  },
  {
    "text": "public you can even have a private infrastructure which cosign supports using TF now both these tools cosign as",
    "start": "723680",
    "end": "731240"
  },
  {
    "text": "well as notary have new releases with some really cool features to check",
    "start": "731240",
    "end": "736519"
  },
  {
    "text": "out right so now that we have talked about how we can sign and verify images",
    "start": "736519",
    "end": "741680"
  },
  {
    "text": "now let's talk about how we can incorporate all of that inside of your kubernetes cluster to ensure security",
    "start": "741680",
    "end": "747399"
  },
  {
    "text": "and enforce policies to make sure that no one um bad can get access to it right",
    "start": "747399",
    "end": "752480"
  },
  {
    "text": "so for that we can use um kerno which is a cncf incubating project and kerno at a",
    "start": "752480",
    "end": "758320"
  },
  {
    "text": "very high level is a policy engine that is built to be work to work with Cloud native Cloud native ecosystem and",
    "start": "758320",
    "end": "764920"
  },
  {
    "text": "kubernetes right so kerno is native to kubernetes which means that um it only",
    "start": "764920",
    "end": "770519"
  },
  {
    "text": "requires you to know yaml and you don't need to know anything else to get started so basically to get started what",
    "start": "770519",
    "end": "776360"
  },
  {
    "text": "you can do is just install kerno in your cluster and and start writing policies using yaml and you can start on a",
    "start": "776360",
    "end": "782720"
  },
  {
    "text": "journey on improving Security in your cluster right a kerno policy can be used to um do validation mutation mutate",
    "start": "782720",
    "end": "790560"
  },
  {
    "text": "existing um generation of new uh new resources as well as screening up old resources but for this demo we will be",
    "start": "790560",
    "end": "797040"
  },
  {
    "text": "focusing on image verification rule so what a kerno image verification rule",
    "start": "797040",
    "end": "802240"
  },
  {
    "text": "allows you to do is that it allows you to verify signatures on an image as well",
    "start": "802240",
    "end": "807440"
  },
  {
    "text": "as signature on image Attis ations as well as the payload of the attestation to make sure that that also um complies",
    "start": "807440",
    "end": "814279"
  },
  {
    "text": "with your requirements right so Ino uh image verification rule you can do image",
    "start": "814279",
    "end": "819399"
  },
  {
    "text": "signature verification using both cosign and notary you can verify in too station",
    "start": "819399",
    "end": "824480"
  },
  {
    "text": "as well as refer API adest station and you can use um any ooc regustry so we",
    "start": "824480",
    "end": "829639"
  },
  {
    "text": "have support for all of the possible um o regustry be it public or private um we",
    "start": "829639",
    "end": "834759"
  },
  {
    "text": "also have support for the newly added reference API and we support key and keyless verification using cosine as",
    "start": "834759",
    "end": "841440"
  },
  {
    "text": "well as uh C pair verification using notary right and to speed this up we",
    "start": "841440",
    "end": "847199"
  },
  {
    "text": "also have caching so once you have verified an image once um when then when uh when you try to verify the image for",
    "start": "847199",
    "end": "853399"
  },
  {
    "text": "the next time it will hit the cache and it will try to um do it more efficiently so you um save some time on subsequent",
    "start": "853399",
    "end": "861279"
  },
  {
    "text": "verification right and you can be very flexible with um your checks in an image verification policy you can verify all",
    "start": "861279",
    "end": "868120"
  },
  {
    "text": "the conditions as well as any as well as make a um required count so that if that count is hit once like you don't have to",
    "start": "868120",
    "end": "874560"
  },
  {
    "text": "do anything else after that so this actually allows you to basically um uh",
    "start": "874560",
    "end": "880360"
  },
  {
    "text": "Implement any type of requirement that you can have with a rule right so let's say you want to verify that your image",
    "start": "880360",
    "end": "886440"
  },
  {
    "text": "has a vulnerability scan report attached to it which is signed and it has no",
    "start": "886440",
    "end": "891639"
  },
  {
    "text": "critical vulnerability you can easily you can easily do that using uh image verifier rule so to see examples of the",
    "start": "891639",
    "end": "898320"
  },
  {
    "text": "image rule we will be sh showing some demo but we also have a very vast library of policies on our website which",
    "start": "898320",
    "end": "905160"
  },
  {
    "text": "is open source and anyone can get access to it great so now let's move to the demo awesome so now we have a good",
    "start": "905160",
    "end": "913000"
  },
  {
    "text": "understanding of decent understanding of what kerno is what cosign is what notary",
    "start": "913000",
    "end": "918759"
  },
  {
    "text": "is let's see how this all fits in in a couple of demos we have prepared um yeah let's start with uh",
    "start": "918759",
    "end": "926360"
  },
  {
    "text": "cosign so the first demo I have for you here is uh you know using kerno and",
    "start": "926360",
    "end": "931880"
  },
  {
    "text": "cosign together great of course I had to record",
    "start": "931880",
    "end": "937759"
  },
  {
    "text": "this cuz I wasn't short of the Internet situation here so let's see how this goes so uh we have a policy yaml that uh",
    "start": "937759",
    "end": "946480"
  },
  {
    "text": "you know looks something like this we are creating a namespace to test this uh",
    "start": "946480",
    "end": "952319"
  },
  {
    "text": "situation we have a cluster policy now let's examine the cluster policy in detail it's called key basic policy in",
    "start": "952319",
    "end": "959600"
  },
  {
    "text": "the specs we have set it to enforce that means we want to block a resource if it doesn't comply great so you'll see that",
    "start": "959600",
    "end": "967720"
  },
  {
    "text": "there is a single rule it's called key basic rule it is trying to match a resource of kind p in the verify images",
    "start": "967720",
    "end": "976319"
  },
  {
    "text": "block we have a image reference given so here essentially you have a pattern uh",
    "start": "976319",
    "end": "982199"
  },
  {
    "text": "to match with the image in your resource right um next block that we",
    "start": "982199",
    "end": "987560"
  },
  {
    "text": "have right after image reference is a testers here we are giving the public key that will be used while we run",
    "start": "987560",
    "end": "994240"
  },
  {
    "text": "cosign verify to you know ensure that the signature on the resource is correct",
    "start": "994240",
    "end": "999480"
  },
  {
    "text": "awesome so now that we've looked at the policy let's also look at the resource that we'll be trying to apply so it's a",
    "start": "999480",
    "end": "1006440"
  },
  {
    "text": "simple pod it's running in a namespace test verify images it uh has a image",
    "start": "1006440",
    "end": "1012240"
  },
  {
    "text": "which will match the image reference in the policy so in the policy essentially we want to match the resource being",
    "start": "1012240",
    "end": "1018440"
  },
  {
    "text": "being a pod as well as the image reference being the pattern that we saw earlier now that we know this let's go",
    "start": "1018440",
    "end": "1024839"
  },
  {
    "text": "and try applying the policy and then the resource so you do a cube CTL apply for",
    "start": "1024839",
    "end": "1030280"
  },
  {
    "text": "the policy create the policy and now I'll try to apply the",
    "start": "1030280",
    "end": "1035798"
  },
  {
    "text": "resource so what will happen in the background is that KERO will look that",
    "start": "1035799",
    "end": "1041000"
  },
  {
    "text": "oh a resource is being created it's of kind board and it matches the image reference that is stored in the cluster",
    "start": "1041000",
    "end": "1047240"
  },
  {
    "text": "policy now I'll use the public key stod and check if the image running is signed",
    "start": "1047240",
    "end": "1053160"
  },
  {
    "text": "correctly using cosign or not takes a second or two and you see",
    "start": "1053160",
    "end": "1059480"
  },
  {
    "text": "the Pod was created that means the signature was verified and the Pod is good to go that was you know using keyed",
    "start": "1059480",
    "end": "1067000"
  },
  {
    "text": "signature use and coign along with keru now let's look as at keyless signatures",
    "start": "1067000",
    "end": "1072799"
  },
  {
    "text": "using cosine",
    "start": "1072799",
    "end": "1080400"
  },
  {
    "text": "great so again let's examine the policy uh it's a cluster policy called check slsa attestations in the spec we've",
    "start": "1080919",
    "end": "1088480"
  },
  {
    "text": "again set it to enforce we have a single rule in this rule again we are checking for resource of kind p in the verify",
    "start": "1088480",
    "end": "1096480"
  },
  {
    "text": "images block here we've again given a pattern for image reference in the attestations we have provided the type",
    "start": "1096480",
    "end": "1103400"
  },
  {
    "text": "of attestation in this case in my policy it is of type Providence it's Provence",
    "start": "1103400",
    "end": "1108520"
  },
  {
    "text": "information in atst St we've given we've specified keyless and we've given some",
    "start": "1108520",
    "end": "1114240"
  },
  {
    "text": "details so what it'll essentially do is check that the image is signed in a",
    "start": "1114240",
    "end": "1119360"
  },
  {
    "text": "GitHub workflow and this signature will be verified using the GitHub uh oidc",
    "start": "1119360",
    "end": "1126080"
  },
  {
    "text": "provider in this case GitHub also you'll see there's a condition conditions block",
    "start": "1126080",
    "end": "1131200"
  },
  {
    "text": "at the end so this place is um yeah so",
    "start": "1131200",
    "end": "1136320"
  },
  {
    "text": "we are trying to add conditions to the payload the attestation payload so after seeing that the attestation is signed",
    "start": "1136320",
    "end": "1142679"
  },
  {
    "text": "correctly we also want to ensure that the attestation itself is compliant for our requirements right we want to be",
    "start": "1142679",
    "end": "1149880"
  },
  {
    "text": "able to check the attestations themselves so we are looking for some condition and making sure it's equal to",
    "start": "1149880",
    "end": "1156320"
  },
  {
    "text": "true that's your policy let's go back to an uh to the resource and look at what",
    "start": "1156320",
    "end": "1162520"
  },
  {
    "text": "we're trying to apply now now again it's a pod it will match uh the image",
    "start": "1162520",
    "end": "1168320"
  },
  {
    "text": "reference will match the image given here and kerno will s try to apply the",
    "start": "1168320",
    "end": "1173559"
  },
  {
    "text": "policy against the resource I've created the policy and now",
    "start": "1173559",
    "end": "1178679"
  },
  {
    "text": "I'm trying to apply the resource so again a similar thing will",
    "start": "1178679",
    "end": "1183720"
  },
  {
    "text": "happen here Kono will see oh again there's a pod trying to come up which",
    "start": "1183720",
    "end": "1188880"
  },
  {
    "text": "matches my you know requirements of being a pod and the image reference that I had earlier given and um it'll see if",
    "start": "1188880",
    "end": "1196720"
  },
  {
    "text": "the image is correctly signed at attestation sorry is correctly signed and the attestation uh is in compliance with the",
    "start": "1196720",
    "end": "1203960"
  },
  {
    "text": "condition that was mentioned in the policy report I mean policy not",
    "start": "1203960",
    "end": "1209559"
  },
  {
    "text": "report oh I think I took it back sorry sorry",
    "start": "1210960",
    "end": "1217600"
  },
  {
    "text": "about",
    "start": "1217600",
    "end": "1219840"
  },
  {
    "text": "that just a second yeah we were looking at the policy being",
    "start": "1225840",
    "end": "1233200"
  },
  {
    "text": "applied and once that's applied we want to see the resource being applied and we see the Pod is created awesome now that",
    "start": "1233200",
    "end": "1240240"
  },
  {
    "text": "we've looked at some cosign examples let's look let's look at notary uh signature and verification examples the",
    "start": "1240240",
    "end": "1246720"
  },
  {
    "text": "first one I have for you is right here so let's examine the policy here again we are trying to",
    "start": "1246720",
    "end": "1252880"
  },
  {
    "text": "create a name space uh in which we'll test and we are storing the certificate like we had early earlier mentioned uh",
    "start": "1252880",
    "end": "1260039"
  },
  {
    "text": "notary used keyer pair for image signing and verification right in the policy",
    "start": "1260039",
    "end": "1265520"
  },
  {
    "text": "that you see it's a cluster policy which is again set to enforce and you have a single rule in it the rule will look for",
    "start": "1265520",
    "end": "1272679"
  },
  {
    "text": "a resource of type pod in a namespace notary verify images and the verify",
    "start": "1272679",
    "end": "1277840"
  },
  {
    "text": "images part of the policy that you see has Type mentioned notary because we're checking for notary signatures and uh",
    "start": "1277840",
    "end": "1285200"
  },
  {
    "text": "we'll pass the certificate that was stored earlier in the policy that will be used to verify the signature so the",
    "start": "1285200",
    "end": "1292200"
  },
  {
    "text": "certificate is corresponding to the private key which was used to sign the uh which we want to make sure the was",
    "start": "1292200",
    "end": "1300039"
  },
  {
    "text": "used to sign the image oh",
    "start": "1300039",
    "end": "1305440"
  },
  {
    "text": "sorry yeah so now that we've looked at the policy we'll quickly look at the resource as well the resource again",
    "start": "1305760",
    "end": "1312880"
  },
  {
    "text": "would be a pod yeah you'll see a pod that matches",
    "start": "1312880",
    "end": "1319080"
  },
  {
    "text": "the image reference that was given in the cluster policy let's apply",
    "start": "1319080",
    "end": "1324480"
  },
  {
    "text": "it we creating the policy we are creating trying to create the",
    "start": "1324840",
    "end": "1331360"
  },
  {
    "text": "report just like before kerno will try to ensure that the resource is compliant",
    "start": "1331360",
    "end": "1336840"
  },
  {
    "text": "the signature is valid verify that signature using the sir that was provided and once all the verification",
    "start": "1336840",
    "end": "1342960"
  },
  {
    "text": "is done great I have my port test ready with that I come to the last demo",
    "start": "1342960",
    "end": "1349799"
  },
  {
    "text": "bit that I have here for you today it's a little lengthy but should be",
    "start": "1349799",
    "end": "1356880"
  },
  {
    "text": "fun great so in this case what I'm going to do is I will take a image which has",
    "start": "1356880",
    "end": "1363000"
  },
  {
    "text": "some attached attest stations I'll first pull these ATT a",
    "start": "1363000",
    "end": "1368400"
  },
  {
    "text": "stations Great so I see I have some for attestations I want you to specifically",
    "start": "1372559",
    "end": "1378039"
  },
  {
    "text": "pay attention to the second one because I'll try to play around with the vulnerability scan at a station here so",
    "start": "1378039",
    "end": "1384600"
  },
  {
    "text": "first I'll pull it wait for it to be successfully downloaded now that it is",
    "start": "1384600",
    "end": "1389919"
  },
  {
    "text": "let's let's you know walk through the station and a very particular part that is the time stamp that you see now in",
    "start": "1389919",
    "end": "1396919"
  },
  {
    "text": "this time stamp let's focus on it and you'll see that it was created um on",
    "start": "1396919",
    "end": "1403919"
  },
  {
    "text": "25th May 2023 that's a couple of months back right cool dearly noted let's go",
    "start": "1403919",
    "end": "1410400"
  },
  {
    "text": "back and look at what we can do with the policy and the time stem so that's my policy again I'm creating a namespace to",
    "start": "1410400",
    "end": "1417039"
  },
  {
    "text": "test I'm storing the certificate let's go down to the cluster policy in place",
    "start": "1417039",
    "end": "1422320"
  },
  {
    "text": "great the cluster policy is of name check image attestation it's set to enforce we have a rule it's looking for",
    "start": "1422320",
    "end": "1429559"
  },
  {
    "text": "a pod a resource of kind pod and in the verify images part we are specifying",
    "start": "1429559",
    "end": "1434720"
  },
  {
    "text": "that it's of type notary in image references you've given a pattern PN to match and in attestations first you're",
    "start": "1434720",
    "end": "1441240"
  },
  {
    "text": "you know specifying what type of attestation is being looked for in our case it's vulnerability scan in at's",
    "start": "1441240",
    "end": "1448520"
  },
  {
    "text": "part we are giving or we providing the certificate uh you know corresponding to",
    "start": "1448520",
    "end": "1453559"
  },
  {
    "text": "the private key which was used which should have been used to sign the image and now here we have the condition now",
    "start": "1453559",
    "end": "1460000"
  },
  {
    "text": "this is what I want to like spend maybe a minute on so the condition says uh the",
    "start": "1460000",
    "end": "1466559"
  },
  {
    "text": "key is the time stamp that we looked at before and we want that value to be less",
    "start": "1466559",
    "end": "1472080"
  },
  {
    "text": "than 730 hours so essentially 730 hours is one month and we want whatever scan",
    "start": "1472080",
    "end": "1478000"
  },
  {
    "text": "reports we have in our attestations to be not older than one month if it's older than one month we don't want it",
    "start": "1478000",
    "end": "1485399"
  },
  {
    "text": "great and we just saw the attestation and we know it will it's not compliant so what I'll try to do is I'll",
    "start": "1485399",
    "end": "1492520"
  },
  {
    "text": "apply the policy and I'll apply a resource which is using that image I pulled",
    "start": "1492520",
    "end": "1499760"
  },
  {
    "text": "takes a minute does a check checks the attestation pulls the attestation verifies the verifies the image",
    "start": "1506919",
    "end": "1513159"
  },
  {
    "text": "signature and finally fails giving you the reason why it failed it says scan reports generated more than 1 month ago",
    "start": "1513159",
    "end": "1519520"
  },
  {
    "text": "are prohibited great now let's play around with the policy a little more and change that 730 hours to 7,300 hours",
    "start": "1519520",
    "end": "1527440"
  },
  {
    "text": "that's 10 months and that should be allowed let's do that that's 10 months",
    "start": "1527440",
    "end": "1532600"
  },
  {
    "text": "go back configure our",
    "start": "1532600",
    "end": "1536799"
  },
  {
    "text": "policy and now try to apply the resource hoping that it won't be",
    "start": "1539080",
    "end": "1545158"
  },
  {
    "text": "blocked and as expected the Pol uh the resource Port test was created because",
    "start": "1551320",
    "end": "1556720"
  },
  {
    "text": "it the at a station vulnerability scan was like five months it was created five",
    "start": "1556720",
    "end": "1561799"
  },
  {
    "text": "months ago awesome so I think with that we are",
    "start": "1561799",
    "end": "1567120"
  },
  {
    "text": "done with the demo bit that went fast so here in the slides I have linked",
    "start": "1567120",
    "end": "1573399"
  },
  {
    "text": "uh couple of links to you know understand KERO better join some channels to ask questions to discuss",
    "start": "1573399",
    "end": "1580279"
  },
  {
    "text": "more you know understand where cerno can fit in your use cases and how it can help you of course there's also links to",
    "start": "1580279",
    "end": "1587120"
  },
  {
    "text": "the monthly community meeting and the weekly contributors meeting we are always looking forward to having more",
    "start": "1587120",
    "end": "1592640"
  },
  {
    "text": "contributors and more discussions and uh before we you know",
    "start": "1592640",
    "end": "1599799"
  },
  {
    "text": "wrap the session up don't be a stranger reach out to us let's talk about kubernetes kerno and whatnot we've uh",
    "start": "1599799",
    "end": "1607240"
  },
  {
    "text": "added some of our handles looking forward to you know more conversations and that would be all",
    "start": "1607240",
    "end": "1613720"
  },
  {
    "text": "thank you very much and yeah I think we do have like a minute or",
    "start": "1613720",
    "end": "1621080"
  },
  {
    "text": "two to address some questions some quick questions and if we're not able to you know deal with them right now we'll be",
    "start": "1621080",
    "end": "1627200"
  },
  {
    "text": "walking around let's meet and",
    "start": "1627200",
    "end": "1630480"
  },
  {
    "text": "chitchat yeah okay hi is there way I think there's a",
    "start": "1633480",
    "end": "1640200"
  },
  {
    "text": "mic this is Manus uh actually uh when this policies applied and typically in a",
    "start": "1642279",
    "end": "1649520"
  },
  {
    "text": "loaded environment when the PS are coming up if it takes that much time",
    "start": "1649520",
    "end": "1654799"
  },
  {
    "text": "what we saw in the demo uh it may slow that because especially if you are running in something which is uh more on",
    "start": "1654799",
    "end": "1661799"
  },
  {
    "text": "the serverless side of it where not of WS are coming in so is there any caching",
    "start": "1661799",
    "end": "1666960"
  },
  {
    "text": "enabled where already verified images are cached and not checked again yeah I",
    "start": "1666960",
    "end": "1672760"
  },
  {
    "text": "think we all yes so when you verify an image it has to fetch the data of the image as well right so that is making a",
    "start": "1672760",
    "end": "1678240"
  },
  {
    "text": "network call that is taking so much time so if you are in a private environment where where the both of them are in the",
    "start": "1678240",
    "end": "1683600"
  },
  {
    "text": "same network it won't take this long and to uh fix this we also have a caching so when once you have verified the image",
    "start": "1683600",
    "end": "1690080"
  },
  {
    "text": "using a policy it will be cached and for the next time when you try to do it um",
    "start": "1690080",
    "end": "1695480"
  },
  {
    "text": "yeah here when the next time you try to do it it will hit the cache and it won't make Network all it will be instantaneous okay yeah so we sorry go",
    "start": "1695480",
    "end": "1702640"
  },
  {
    "text": "ahead yes it's fine yeah so we have decision caching to sort of fasten the process and make sure we can you know",
    "start": "1702640",
    "end": "1708559"
  },
  {
    "text": "handle performance better wherever we can so this cache is maintained centrally uh at the API server level or",
    "start": "1708559",
    "end": "1716360"
  },
  {
    "text": "it's maintained uh at the node level or at the repository level yeah so it is",
    "start": "1716360",
    "end": "1723080"
  },
  {
    "text": "maintained at the kerno admission controller level right so um it is maintained in the P of the admission",
    "start": "1723080",
    "end": "1728919"
  },
  {
    "text": "controller that you have that we have we store a TTL based cach and yeah that's right okay and is it persisted or it's",
    "start": "1728919",
    "end": "1734840"
  },
  {
    "text": "an inmemory cache I'm sorry it's pers assistent cash or in memory cach oh it's persistent persistent cash yeah okay and",
    "start": "1734840",
    "end": "1743159"
  },
  {
    "text": "later this referers 1.1 reference API support is it a new support that has",
    "start": "1743159",
    "end": "1748519"
  },
  {
    "text": "come up or so this reference API was added in ocii 1.1 spec so it was added earlier",
    "start": "1748519",
    "end": "1755360"
  },
  {
    "text": "this year and we have added this added support for it in kerno 1.11 which was released a few weeks ago yeah so",
    "start": "1755360",
    "end": "1762760"
  },
  {
    "text": "referral API is recent and support for written kerno has recently come up like about a month back yeah about and is",
    "start": "1762760",
    "end": "1769600"
  },
  {
    "text": "there a limitation in size of it sorry uh the reference artifacts that are we",
    "start": "1769600",
    "end": "1775080"
  },
  {
    "text": "are putting in is there any limitation on size because at run time when it is downloading it may cause delays due to",
    "start": "1775080",
    "end": "1782600"
  },
  {
    "text": "that I I don't think uh are you yeah o spec does not define any limitations on",
    "start": "1782600",
    "end": "1787960"
  },
  {
    "text": "side on size of any artifact right so there's no limitation of size okay okay okay thank you awesome I think we've um",
    "start": "1787960",
    "end": "1795159"
  },
  {
    "text": "you know that was our 30 minutes folks thank you so much for attending and we'll be around to have a conversation",
    "start": "1795159",
    "end": "1801840"
  },
  {
    "text": "we'll be answering your question separately hi he had a question can you hear me yeah yeah so what level of salsa",
    "start": "1801840",
    "end": "1809240"
  },
  {
    "text": "does this comply to what level of salsa the slsa that you are talking about you",
    "start": "1809240",
    "end": "1815080"
  },
  {
    "text": "know so so what level does it I mean salsa has like level zero level one level two so this process of signing",
    "start": "1815080",
    "end": "1822399"
  },
  {
    "text": "attestation and verification so what level does that comply to um I think you",
    "start": "1822399",
    "end": "1827440"
  },
  {
    "text": "can like verify any Json object right so it does not have anything to do with this slsa level so you have attached any Json",
    "start": "1827440",
    "end": "1834840"
  },
  {
    "text": "object you can run conditions like using James path on that Json object so I don't think like that will be a",
    "start": "1834840",
    "end": "1840120"
  },
  {
    "text": "limitation here okay awesome thank you guys thank you so",
    "start": "1840120",
    "end": "1847519"
  },
  {
    "text": "much",
    "start": "1847519",
    "end": "1850399"
  }
]