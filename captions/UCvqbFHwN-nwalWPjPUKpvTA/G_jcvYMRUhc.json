[
  {
    "start": "0",
    "end": "77000"
  },
  {
    "text": "so uh thanks for coming to the talk today um just start with a little bit of background about about",
    "start": "919",
    "end": "7760"
  },
  {
    "text": "myself um and and then take you through what we're going to talk about today um",
    "start": "7760",
    "end": "13960"
  },
  {
    "text": "so I work for tigera so tigera is the company behind project Calico um which is the most deployed cni",
    "start": "13960",
    "end": "20800"
  },
  {
    "text": "for kubernetes um Powers about 2 million Nords daily in about 166",
    "start": "20800",
    "end": "26880"
  },
  {
    "text": "countries um igera is based in in the US but we have an office in Cork in Ireland as well which is where I'm from um so",
    "start": "26880",
    "end": "34920"
  },
  {
    "text": "it's been a nice treat to come to the sunshine in Valencia from Ireland um probably had too many AGA Dev valencias",
    "start": "34920",
    "end": "41320"
  },
  {
    "text": "this week but it's been a great trip uh it's my first time speaking at cucon um it's actually my first time",
    "start": "41320",
    "end": "48520"
  },
  {
    "text": "speaking in front of a group this big so please just just bear with me as we go through the the talk um my own",
    "start": "48520",
    "end": "54280"
  },
  {
    "text": "background is in engineering software development um still technically involved in all of the the projects that",
    "start": "54280",
    "end": "59760"
  },
  {
    "text": "we doing a tigera and contributing uh but not I'm not a security researcher so I'm not going to go deep into um ciphers",
    "start": "59760",
    "end": "67119"
  },
  {
    "text": "and the type of uh cryptography that's being used by wire guard um but we will talk about some of some of that as we go",
    "start": "67119",
    "end": "74000"
  },
  {
    "text": "through it okay so the goals today so we're",
    "start": "74000",
    "end": "82200"
  },
  {
    "start": "77000",
    "end": "147000"
  },
  {
    "text": "going to talk a little bit about encryption as it stands in kubernetes um what are some of the popular options",
    "start": "82200",
    "end": "87320"
  },
  {
    "text": "that people use currently um and why Calico decided to use wire",
    "start": "87320",
    "end": "93000"
  },
  {
    "text": "guard so we'll recap a little bit about what Calico does we'll talk about uh wire guard and how it works and then how",
    "start": "93000",
    "end": "99960"
  },
  {
    "text": "these mesh together to create a a fully encrypted uh cluster um we'll we'll we'll finish off",
    "start": "99960",
    "end": "106840"
  },
  {
    "text": "talking about some gotches so we didn't get everything right when we when we implemented this feature um there's",
    "start": "106840",
    "end": "113479"
  },
  {
    "text": "still things that we want to do in the future and and and look for uh contributors to help us to do that um",
    "start": "113479",
    "end": "120320"
  },
  {
    "text": "and there's some some gaps as well that we can talk about so really the the the",
    "start": "120320",
    "end": "125640"
  },
  {
    "text": "thing with the talk today is to to see this as a it's an alternative option to mtls with service mesh or IPC um one is",
    "start": "125640",
    "end": "135160"
  },
  {
    "text": "not better or worse than the other there's pros and cons for for different encryption options in kubernetes but",
    "start": "135160",
    "end": "140239"
  },
  {
    "text": "this is to present a different option especially if you're already using Calico as your",
    "start": "140239",
    "end": "145879"
  },
  {
    "start": "147000",
    "end": "274000"
  },
  {
    "text": "cni so to kind of story with encryption in in kubernetes today what what we see",
    "start": "148400",
    "end": "153680"
  },
  {
    "text": "when we talk to our our community our users uh the the kind of number one use case for for using encryption is is",
    "start": "153680",
    "end": "160560"
  },
  {
    "text": "compliance actually uh whether it's PCI compliance or Hippa uh that's always the",
    "start": "160560",
    "end": "165879"
  },
  {
    "text": "the top of the the topics when we talk to our community uh we also see a lot of our",
    "start": "165879",
    "end": "170920"
  },
  {
    "text": "users talking about zero trust in general so when you have um PL text uh",
    "start": "170920",
    "end": "177440"
  },
  {
    "text": "requests flying around your kubernetes clusters no to node potentially in a shared environment like the public Cloud",
    "start": "177440",
    "end": "184319"
  },
  {
    "text": "uh it can make you nervous if you have a zero trust approach to security um so that is a topic that",
    "start": "184319",
    "end": "190159"
  },
  {
    "text": "comes up a lot with our users when they're talking to us about encryption uh and there's a recent NSA",
    "start": "190159",
    "end": "196680"
  },
  {
    "text": "report uh from last year uh about hardening kubernetes and that recommends",
    "start": "196680",
    "end": "202239"
  },
  {
    "text": "encrypting your your data in transit so that's that's what we're talking about today it's you know data in transit it's",
    "start": "202239",
    "end": "208159"
  },
  {
    "text": "not data at rest which is a whole other topic in in kubernetes uh so by default when you",
    "start": "208159",
    "end": "214640"
  },
  {
    "text": "deploy kubernetes and you deploy your workloads when those services are communicating to each other uh there's",
    "start": "214640",
    "end": "220400"
  },
  {
    "text": "no encryption by default so everything is plain text um some common options that people",
    "start": "220400",
    "end": "226080"
  },
  {
    "text": "reach for uh they they can reach for Mutual TLS uh which is very popular uh",
    "start": "226080",
    "end": "232000"
  },
  {
    "text": "encryption TCP and above uh normally this comes with a deploying a service",
    "start": "232000",
    "end": "237480"
  },
  {
    "text": "mesh either linkerd or s ET and there's so many different options now with with service smesh and they all offer an mtls",
    "start": "237480",
    "end": "246120"
  },
  {
    "text": "solution um another option is IPC which is a obviously an older",
    "start": "246120",
    "end": "251400"
  },
  {
    "text": "technology um kernel based so so there's a couple of different solutions there are other options and a lot of our users",
    "start": "251400",
    "end": "258079"
  },
  {
    "text": "as well kind of roll their own certificate or uh TLS",
    "start": "258079",
    "end": "263240"
  },
  {
    "text": "implementations often uh embedded with the applications themselves so lots of different approaches",
    "start": "263240",
    "end": "271479"
  },
  {
    "start": "274000",
    "end": "329000"
  },
  {
    "text": "so just to talk about Mt a little bit more in terms of service mesh this gives you client server uh authentication",
    "start": "276039",
    "end": "282560"
  },
  {
    "text": "Mutual authentication so both the client and the server are authenticated together um with mtls with service mesh",
    "start": "282560",
    "end": "291039"
  },
  {
    "text": "they provide certificate management certificate rotation and they manage the life cycle of of their certificates for",
    "start": "291039",
    "end": "296919"
  },
  {
    "text": "you um different service meshes then will Prov provide slightly different options when you're uh deploying",
    "start": "296919",
    "end": "303360"
  },
  {
    "text": "encryption on top of them so for example ISO allows you to encrypt a corner of",
    "start": "303360",
    "end": "309120"
  },
  {
    "text": "your cluster just a specific part of your cluster via namespaces uh which is a very useful technique uh linkerd",
    "start": "309120",
    "end": "315479"
  },
  {
    "text": "automatically enables encryption when you deploy linkerd so it's it's not an",
    "start": "315479",
    "end": "320800"
  },
  {
    "text": "option you get uh encrypted traffic by default service to service when you deploy linkerd",
    "start": "320800",
    "end": "328800"
  },
  {
    "start": "329000",
    "end": "355000"
  },
  {
    "text": "okay so what if you don't use a service mes um that's where we were thinking about",
    "start": "330000",
    "end": "336440"
  },
  {
    "text": "this feature and and how we can Leverage What Calico already does for you as a",
    "start": "336440",
    "end": "341639"
  },
  {
    "text": "cni uh especially at the data plane level um and how we can provide a",
    "start": "341639",
    "end": "346880"
  },
  {
    "text": "different encryption option an alternative to IPS at that lower level in the TCP",
    "start": "346880",
    "end": "353440"
  },
  {
    "start": "355000",
    "end": "447000"
  },
  {
    "text": "stack so what we'll do is we'll just recap a little bit here about what Calico does um just a hands up who uses",
    "start": "356440",
    "end": "363600"
  },
  {
    "text": "Calico as her cni that's about half the people that's",
    "start": "363600",
    "end": "369000"
  },
  {
    "text": "pretty good uh so it's it's very battle hardened it's been around for a very",
    "start": "369000",
    "end": "374199"
  },
  {
    "text": "long time uh it originally started as a python project for openstack uh many",
    "start": "374199",
    "end": "379240"
  },
  {
    "text": "many years ago before pivoting to golang and being a cni plugin for kubernetes um",
    "start": "379240",
    "end": "386919"
  },
  {
    "text": "as I said it's power it Powers about 2 million no daily that that we know of uh",
    "start": "386919",
    "end": "392319"
  },
  {
    "text": "across uh 166 countries so the kind of purpose of talking about that is to show",
    "start": "392319",
    "end": "398199"
  },
  {
    "text": "how battle hardened it is so we can leverage some of what Calico already does to give us some some goodness when",
    "start": "398199",
    "end": "403360"
  },
  {
    "text": "we're integrating with with wi guard uh one of the the strongest points",
    "start": "403360",
    "end": "408599"
  },
  {
    "text": "of integration is how it manages the data plane uh so this is where we're going to interact with with wi",
    "start": "408599",
    "end": "415639"
  },
  {
    "text": "guard uh it supports Linux and ebpf data planes and both of these we want both of these options so you can you can",
    "start": "415639",
    "end": "421639"
  },
  {
    "text": "literally swap out your uh data plan option you can go from Linux traditional",
    "start": "421639",
    "end": "426680"
  },
  {
    "text": "IP tables based uh data plane to ebpf and back again in a deployed running",
    "start": "426680",
    "end": "431919"
  },
  {
    "text": "cluster using Calico and we want wiard to work with both of these",
    "start": "431919",
    "end": "437680"
  },
  {
    "text": "Technologies um we we want it to be easy to configure um wi guard itself is",
    "start": "437680",
    "end": "443800"
  },
  {
    "text": "extremely easy to configure and Calico is easy to configure uh so this this is just uh",
    "start": "443800",
    "end": "450759"
  },
  {
    "start": "447000",
    "end": "542000"
  },
  {
    "text": "I'll just let you take in this diagram for a",
    "start": "450759",
    "end": "454360"
  },
  {
    "text": "second this is this is a kind of a a cut down um architecture diagram of a part",
    "start": "456280",
    "end": "463280"
  },
  {
    "text": "of Calico uh as you can see at the top uh interesting things are changing in",
    "start": "463280",
    "end": "469120"
  },
  {
    "text": "kubernetes and they're getting stored in Calo data store things that we care",
    "start": "469120",
    "end": "474280"
  },
  {
    "text": "about um and then down in the data plane you have a couple of Calico components here I just highlighted a couple of them",
    "start": "474280",
    "end": "481039"
  },
  {
    "text": "Felix which runs in Calico node and cni plugin which interacts with the container",
    "start": "481039",
    "end": "487280"
  },
  {
    "text": "runtime uh these data plane components are responsible for for programming uh",
    "start": "487280",
    "end": "492319"
  },
  {
    "text": "the kernel programming the networking rules so you can see here on the on the",
    "start": "492319",
    "end": "498080"
  },
  {
    "text": "bottom right the two important takeaways Calico maintains the rules of configuration on each note so what it",
    "start": "498080",
    "end": "504599"
  },
  {
    "text": "does is it it gets a a bunch of updates it has a calculation graph which kind of",
    "start": "504599",
    "end": "510000"
  },
  {
    "text": "very smartly uh determines the right order to apply the updates on the data",
    "start": "510000",
    "end": "516320"
  },
  {
    "text": "plane um and then it keeps that in sync so that's the main purpose and the main goal for the data plane components in",
    "start": "516320",
    "end": "523159"
  },
  {
    "text": "Calico and this is Battle hardened the important thing is to imply these updates in right order without",
    "start": "523159",
    "end": "530000"
  },
  {
    "text": "interrupting traffic so again a take away from this Calico is good at",
    "start": "530000",
    "end": "535560"
  },
  {
    "text": "programming Primitives in the kernel related to networking",
    "start": "535560",
    "end": "541440"
  },
  {
    "start": "542000",
    "end": "685000"
  },
  {
    "text": "okay so how does that relate to wiu guard why is that important when we started looking at wiu guard uh so wi",
    "start": "545560",
    "end": "551320"
  },
  {
    "text": "guard's a relatively new technology I think most people have uh at least heard of wiu guard I know some people are",
    "start": "551320",
    "end": "557440"
  },
  {
    "text": "using wiru guard here that I've spoken to already uh some of its uh key",
    "start": "557440",
    "end": "564000"
  },
  {
    "text": "characteristics uh the leanness comes from how small it is so it's only 3,000 lines of code it's very very opinionated",
    "start": "564000",
    "end": "570240"
  },
  {
    "text": "technology it makes it very easy to audit that code makes it easy to read that code uh and audit it for security",
    "start": "570240",
    "end": "578440"
  },
  {
    "text": "purposes um it is positioned as an alternative typy SEC at layer three uh",
    "start": "578440",
    "end": "584000"
  },
  {
    "text": "one of the key characteristics is that it's simple so it's mostly transparent so operationally simple so when you",
    "start": "584000",
    "end": "591200"
  },
  {
    "text": "deploy and configure wi guard it transparently handles symmetric key exchange and everything else for you um",
    "start": "591200",
    "end": "598079"
  },
  {
    "text": "heartbeats and everything else there's no key management involved uh it kind of mirrors the way SSH works with keys so",
    "start": "598079",
    "end": "604560"
  },
  {
    "text": "you get a private key and a public key and it's quite opinionated that way so it makes no um it takes no",
    "start": "604560",
    "end": "611560"
  },
  {
    "text": "responsibility for how you get a public key from one Pier or one node to another Pier or another node that's that's your",
    "start": "611560",
    "end": "617800"
  },
  {
    "text": "responsibility just like it is with SSH Keys uh another reason why it's very",
    "start": "617800",
    "end": "623440"
  },
  {
    "text": "opinionated is around the cry cryptography technologies that is chosen for example cha 20 and it's TIY Helman",
    "start": "623440",
    "end": "632079"
  },
  {
    "text": "um so these are important um and the reason why they're important is well they're stateof thee art so they're",
    "start": "632079",
    "end": "637720"
  },
  {
    "text": "future proof for now but it's not trying to be everything for everyone like IPC",
    "start": "637720",
    "end": "643519"
  },
  {
    "text": "um which is why it's so lean uh when you're using War guard you",
    "start": "643519",
    "end": "649720"
  },
  {
    "text": "are using um for the most part your existing Linux utilities so you're using",
    "start": "649720",
    "end": "654920"
  },
  {
    "text": "IP route you're using routing tables uh you're using network",
    "start": "654920",
    "end": "659959"
  },
  {
    "text": "interfaces and you're using your standard Linux utilities to set that up which is quite important for what we",
    "start": "659959",
    "end": "665639"
  },
  {
    "text": "want and there's also a fantastic tool called WG which is for configuring the",
    "start": "665639",
    "end": "670839"
  },
  {
    "text": "wire guard portion of that and we'll talk about that in a",
    "start": "670839",
    "end": "675079"
  },
  {
    "text": "second uh it's been part of the Linux kernel for a while uh 5.6",
    "start": "678920",
    "end": "685800"
  },
  {
    "text": "upwards okay so a little bit more detail here about wi guard so as I mentioned before it it it",
    "start": "686360",
    "end": "693160"
  },
  {
    "text": "works by adding a network interface just your standard networking interface and you can configure that in a normal way",
    "start": "693160",
    "end": "699639"
  },
  {
    "text": "uh to create that interface and then you can add and remove routes to send traffic to dive interface using route or",
    "start": "699639",
    "end": "705399"
  },
  {
    "text": "IP route um so very standard um",
    "start": "705399",
    "end": "711200"
  },
  {
    "text": "Primitives as I mentioned before we have the WG tool and I'll show how that uh",
    "start": "711720",
    "end": "717360"
  },
  {
    "text": "what that wi guard configuration looks like in a second and how it applies to pods and nodes in the",
    "start": "717360",
    "end": "723200"
  },
  {
    "text": "cluster uh essentially what you get after you configure War guard is you got",
    "start": "723200",
    "end": "728480"
  },
  {
    "text": "a an overlay which is an encrypted and encapsulated tunnel between two paers on",
    "start": "728480",
    "end": "734760"
  },
  {
    "text": "either side of these network interfaces wg0 wg0 uh these guys need to swap public",
    "start": "734760",
    "end": "741040"
  },
  {
    "text": "Keys initially and then they need to be configured with a list of uh IP addresses that are allowed down the",
    "start": "741040",
    "end": "747399"
  },
  {
    "text": "tunnel so what's interesting here is wire guard Associates the tunnel addresses the",
    "start": "747399",
    "end": "753360"
  },
  {
    "text": "tunnel IP addresses these allowed IP lists with the public key which is a oneon-one with a pier so you might kind",
    "start": "753360",
    "end": "760320"
  },
  {
    "text": "of start to see some similarities here around peers and nodes and the alloud",
    "start": "760320",
    "end": "765639"
  },
  {
    "text": "IPS and workload IPS pod IPS which is a really uh really neat mapping for what we",
    "start": "765639",
    "end": "772759"
  },
  {
    "text": "want so another takeaway here which is similar to Calico wire guard is really",
    "start": "773040",
    "end": "778279"
  },
  {
    "text": "good and and designed um up front to work well with networking Primitives and Linux utilities the same way that Calico",
    "start": "778279",
    "end": "787399"
  },
  {
    "text": "is so as I mentioned you might have spotted that there's there's a a natural",
    "start": "787399",
    "end": "793120"
  },
  {
    "text": "um mapping uh between PE and nodes and kubernetes and these uh allowed IPS",
    "start": "793120",
    "end": "802279"
  },
  {
    "text": "which would be a list of workload pods for example",
    "start": "802279",
    "end": "807519"
  },
  {
    "start": "806000",
    "end": "1018000"
  },
  {
    "text": "okay so we'll dive in a little bit deeper to Calico plus wire guard and",
    "start": "807519",
    "end": "813560"
  },
  {
    "text": "what wire guard configuration looks like and how it applies to nodes and",
    "start": "813560",
    "end": "819839"
  },
  {
    "text": "pods so what you're looking at here on the top you've got three nodes in the cluster and no a wants to send a pod on",
    "start": "824160",
    "end": "831040"
  },
  {
    "text": "node a wants to send traffic to a pod on node B and he wants to do that over to wgard",
    "start": "831040",
    "end": "837120"
  },
  {
    "text": "Tunnel he wants it to be encrypted and down the bottom left there you have",
    "start": "837120",
    "end": "842560"
  },
  {
    "text": "uh some representation of a couple of pods on this nodeb in the middle and node B has IP address on the network and",
    "start": "842560",
    "end": "849519"
  },
  {
    "text": "each pod has an IP address as well so in this case what you're looking",
    "start": "849519",
    "end": "854720"
  },
  {
    "text": "at um this uh wall of text on the right hand side is configuration this is a",
    "start": "854720",
    "end": "859880"
  },
  {
    "text": "wire guard configuration this is what you configure using the WG utility um the first part of that is the",
    "start": "859880",
    "end": "868320"
  },
  {
    "text": "configuration for no a so it has an interface a wi guard. Cali interface a",
    "start": "868320",
    "end": "873360"
  },
  {
    "text": "network interface on no a uh has a public key and a private key the private key is hidden and it never leaves the",
    "start": "873360",
    "end": "879440"
  },
  {
    "text": "node you never share it at all it's UDP so it's listening on Port 51820 and it",
    "start": "879440",
    "end": "886519"
  },
  {
    "text": "has a firewall Mark which is used for routing to make sure we don't get stuck in a loop when we try to shove packets",
    "start": "886519",
    "end": "892600"
  },
  {
    "text": "down the the wiard tunnel and then have it exit the the cluster on exit the note",
    "start": "892600",
    "end": "898800"
  },
  {
    "text": "on on at each Z the other two parts of the configuration are peers so the middle",
    "start": "898800",
    "end": "905639"
  },
  {
    "text": "one is uh node B and the bottom one is node C so you can see here uh the middle",
    "start": "905639",
    "end": "912079"
  },
  {
    "text": "Pier is reachable on N 1024 z64 which is the IP address of node B um and then it",
    "start": "912079",
    "end": "919440"
  },
  {
    "text": "has a list of allowed IPS which represent um host Network pods which is the first IP and then the workload pods",
    "start": "919440",
    "end": "926519"
  },
  {
    "text": "which are the other two IPS so you imagine is as you scale this out and you add more and more pods more and more",
    "start": "926519",
    "end": "933800"
  },
  {
    "text": "nodes uh this list is going to grow and grow so this is this configuration needs to be present on every node in your",
    "start": "933800",
    "end": "940519"
  },
  {
    "text": "cluster to form that encrypted mesh and that's what that's where Calico does so",
    "start": "940519",
    "end": "946120"
  },
  {
    "text": "Calico is programming and reprogramming this wiard configuration uh the routing rules the",
    "start": "946120",
    "end": "953160"
  },
  {
    "text": "IP rules over and over again every time it uh listens and gets an update from uh",
    "start": "953160",
    "end": "958240"
  },
  {
    "text": "the relevant things that are changing kubernetes it reprograms the data plane um so that's all automatic and Calico is",
    "start": "958240",
    "end": "964600"
  },
  {
    "text": "really really good at that so if you kind of walk through the the steps there's a packet that's meant for node B",
    "start": "964600",
    "end": "972759"
  },
  {
    "text": "uh what happens is wi guard asks okay what paer is that it looks up its",
    "start": "972759",
    "end": "978160"
  },
  {
    "text": "configuration and it sees that that IP address that pod is represented by uh by",
    "start": "978160",
    "end": "983880"
  },
  {
    "text": "that middle Pier ID which I'm not going to try to call out the the IDM",
    "start": "983880",
    "end": "989240"
  },
  {
    "text": "uh so it encrypts the entire packet the IP packet using the public key for that",
    "start": "989240",
    "end": "994720"
  },
  {
    "text": "pure and then it looks up to remote endpoint so what is the remote endpoint for that uh for that Pier so that's",
    "start": "994720",
    "end": "1003000"
  },
  {
    "text": "1024 uh 64 it encapsulates it in UDP and sends it out over the tunnel and then the",
    "start": "1003000",
    "end": "1009759"
  },
  {
    "text": "opset happens uh on the other side where the packet is De encapsulated and non encrypted and then passed to the pod",
    "start": "1009759",
    "end": "1019199"
  },
  {
    "start": "1018000",
    "end": "1043000"
  },
  {
    "text": "okay so in summary it's a perfect marriage uh",
    "start": "1019639",
    "end": "1024959"
  },
  {
    "text": "Calico maintains an eventually consistent data plane Calico and wi guard boat like",
    "start": "1024959",
    "end": "1031600"
  },
  {
    "text": "programming with Linux Primitives and wire guards pure and allowed IP Concepts map very nicely to",
    "start": "1031600",
    "end": "1038160"
  },
  {
    "text": "nodes and pods in in kubernetes",
    "start": "1038160",
    "end": "1042319"
  },
  {
    "text": "so as I mentioned before as we're scaling this out and one of the challenges is as as more nodes come",
    "start": "1051760",
    "end": "1056960"
  },
  {
    "text": "online and more pods are spun up and deployed uh they need to be added as as",
    "start": "1056960",
    "end": "1062960"
  },
  {
    "text": "peers first of all so each new node is added as a pure through wire guard",
    "start": "1062960",
    "end": "1069039"
  },
  {
    "text": "configuration and then the public keys for that Pier become part of the node manifest itself so if you want to verify",
    "start": "1069039",
    "end": "1076400"
  },
  {
    "text": "that a node is uh configured with work guard you can simply get that node using",
    "start": "1076400",
    "end": "1081440"
  },
  {
    "text": "Cube cutle and it'll have a field which I'll show in a second um which is the wi",
    "start": "1081440",
    "end": "1086720"
  },
  {
    "text": "guard public key and you can freely share that that doesn't need to be kept secret or private in any way similar to",
    "start": "1086720",
    "end": "1092360"
  },
  {
    "text": "an SSH public key uh the PO IPS that are um deployed",
    "start": "1092360",
    "end": "1099480"
  },
  {
    "text": "on top of that node they need to become part of the allowed IP list in every other peer in the in the in the mesh in",
    "start": "1099480",
    "end": "1104960"
  },
  {
    "text": "the cluster so the end goal or the end point of of doing that and this all happens in",
    "start": "1104960",
    "end": "1111760"
  },
  {
    "text": "in a few seconds it is eventually consistent but it it only takes a couple of seconds across a a mediumsized",
    "start": "1111760",
    "end": "1117799"
  },
  {
    "text": "cluster uh it results in an encrypted mesh so all podt pod traffic uh are now",
    "start": "1117799",
    "end": "1123679"
  },
  {
    "text": "flowing through wire guard tunnels between all the nodes in your",
    "start": "1123679",
    "end": "1129158"
  },
  {
    "start": "1130000",
    "end": "1281000"
  },
  {
    "text": "cluster so this is a a slightly different view uh this is taken from a blog post I wrote recently about um um",
    "start": "1131440",
    "end": "1139159"
  },
  {
    "text": "wire guard and AKs so it's it gets quite tricky to support this type of model as",
    "start": "1139159",
    "end": "1144960"
  },
  {
    "text": "you as you look at AKs and eks and and those type of manage platforms where the the networking is",
    "start": "1144960",
    "end": "1151480"
  },
  {
    "text": "quite different um so we do have support for eks and AKs um but this is kind of a",
    "start": "1151480",
    "end": "1158240"
  },
  {
    "text": "a different way to look at it uh hopefully an interesting way to look at it uh green is unencrypted and red is",
    "start": "1158240",
    "end": "1165480"
  },
  {
    "text": "encrypted so um in this example Le um",
    "start": "1165480",
    "end": "1170559"
  },
  {
    "text": "this is actually a gif originally but it's not moving uh the network packet will leave pod a it'll appear at the",
    "start": "1170559",
    "end": "1178200"
  },
  {
    "text": "other side of the virtual ethernet pair which is Cali 1234 so it leaves the Pod",
    "start": "1178200",
    "end": "1184080"
  },
  {
    "text": "name Network namespace down to the host Network namespace it gets redirected via routing rules in the kernel to the wire",
    "start": "1184080",
    "end": "1191559"
  },
  {
    "text": "guard device where it gets encrypted and encapsulated and sent out over e zero",
    "start": "1191559",
    "end": "1196640"
  },
  {
    "text": "across the network where it again gets routed to the wiar device de",
    "start": "1196640",
    "end": "1201799"
  },
  {
    "text": "encapsulated un encrypted and then passed up through the uh through the vet pair to the right pod in the Pod network",
    "start": "1201799",
    "end": "1208200"
  },
  {
    "text": "uh Nam space so that's the way it normally flows but you might see a couple of uh couple of interesting uh",
    "start": "1208200",
    "end": "1214320"
  },
  {
    "text": "couple of interesting things on this diagram uh so first of all um well",
    "start": "1214320",
    "end": "1221080"
  },
  {
    "text": "there's one really interesting thing uh it's unencrypted as it leaves the Pod and it's unencrypted until it reaches",
    "start": "1221080",
    "end": "1226520"
  },
  {
    "text": "the network device uh and if you wanted to reach another PO on the same node",
    "start": "1226520",
    "end": "1233600"
  },
  {
    "text": "it's not going to go through the wi guard device so in that case uh when it hits the routing rules there will be a",
    "start": "1233600",
    "end": "1239360"
  },
  {
    "text": "trow rule it will not hit that wiard device and instead it'll be redirected to the other vet pair for that uh pod on",
    "start": "1239360",
    "end": "1246720"
  },
  {
    "text": "the same node so imagine a u-shape of green non encrypted traffic so pod tood",
    "start": "1246720",
    "end": "1252360"
  },
  {
    "text": "traffic on the same node is on encrypted in this in this uh approach um it's come",
    "start": "1252360",
    "end": "1258480"
  },
  {
    "text": "up a few times uh it's not easy to to to fix it's not easy to um support this uh",
    "start": "1258480",
    "end": "1265120"
  },
  {
    "text": "but we are looking at it uh you could move uh the wiard device into each pod for example um but you'd",
    "start": "1265120",
    "end": "1272760"
  },
  {
    "text": "be fundamentally changing the way some of our Network policies are handled in Calico at that point so it's not a not",
    "start": "1272760",
    "end": "1278480"
  },
  {
    "text": "an easy problem to fix um ultimately where we ended up in",
    "start": "1278480",
    "end": "1285720"
  },
  {
    "start": "1281000",
    "end": "1335000"
  },
  {
    "text": "terms of ease of configurability and and setting this up uh we ended up in a place where you",
    "start": "1285720",
    "end": "1292520"
  },
  {
    "text": "can enable War guard with a a single command so you patch the Felix",
    "start": "1292520",
    "end": "1297840"
  },
  {
    "text": "configuration uh crd and you enable wi guard this deploys and enables it throughout your entire cluster and",
    "start": "1297840",
    "end": "1304440"
  },
  {
    "text": "similarly you can disable it um with a single command as well uh as I mentioned before you fetch",
    "start": "1304440",
    "end": "1311080"
  },
  {
    "text": "the node so um when you get the node description you'll have a wiar public key uh which indicates that uh it's been",
    "start": "1311080",
    "end": "1319240"
  },
  {
    "text": "successfully set up on that node uh this is very very useful uh but we could do a lot more here as well of",
    "start": "1319240",
    "end": "1325440"
  },
  {
    "text": "course in terms of how we uh do pre-flight checks and things like that I think we hit the goal of uh ease",
    "start": "1325440",
    "end": "1333159"
  },
  {
    "text": "of configuration okay so in terms of uh",
    "start": "1333159",
    "end": "1339120"
  },
  {
    "start": "1335000",
    "end": "1455000"
  },
  {
    "text": "performance so there there is a tradeoff um to consider and this these",
    "start": "1339120",
    "end": "1346000"
  },
  {
    "text": "diagrams are um uh a little bit out of date but I think they're still relevant",
    "start": "1346000",
    "end": "1351320"
  },
  {
    "text": "um we we're using this open benchmarking tool and we're going to publish some new results soon and we're going to include",
    "start": "1351320",
    "end": "1356559"
  },
  {
    "text": "comparisons to mtls and service match solu Solutions um these are in comparison to",
    "start": "1356559",
    "end": "1362919"
  },
  {
    "text": "three other cnis that are all using ipac uh so Calico using wiard and these",
    "start": "1362919",
    "end": "1369679"
  },
  {
    "text": "three other Anonymous cnis that are using IPC and they're anonymous because",
    "start": "1369679",
    "end": "1375360"
  },
  {
    "text": "uh some of these guides have changed their implementation to also support wi guard so I don't want to um badm them in",
    "start": "1375360",
    "end": "1381320"
  },
  {
    "text": "any way by showing out ofd uh performance metrics uh the first one",
    "start": "1381320",
    "end": "1386880"
  },
  {
    "text": "here is node CPU so this is average node CPU usage um as we're running the HTTP",
    "start": "1386880",
    "end": "1394480"
  },
  {
    "text": "um benchmarks and as you can see there's about a 30% increase in CPU usage uh",
    "start": "1394480",
    "end": "1400600"
  },
  {
    "text": "when you're using wi guard and that's all of the uh encryption that's",
    "start": "1400600",
    "end": "1405720"
  },
  {
    "text": "happening um so that's that's quite significant ific uh so it's definitely something to be very very cognizant of",
    "start": "1405720",
    "end": "1413000"
  },
  {
    "text": "if you're interested in using War guard um with Calico or other",
    "start": "1413000",
    "end": "1418919"
  },
  {
    "text": "cnis uh but on the flip side uh the true put is six times more using wire guard",
    "start": "1418919",
    "end": "1425200"
  },
  {
    "text": "than using uh ipac uh so that's the diagram on the right hand side uh this",
    "start": "1425200",
    "end": "1431279"
  },
  {
    "text": "is the um uh the bandwidth in terms of megabits per second so higher is better on this",
    "start": "1431279",
    "end": "1438120"
  },
  {
    "text": "case so it's a trade-off like everything else in software engineering you have to",
    "start": "1438120",
    "end": "1443200"
  },
  {
    "text": "weigh up the cost of true put versus CPU usage resource usage and uh determine",
    "start": "1443200",
    "end": "1448799"
  },
  {
    "text": "which one is more useful for",
    "start": "1448799",
    "end": "1451880"
  },
  {
    "start": "1455000",
    "end": "1673000"
  },
  {
    "text": "you okay so in terms of um some gotas and",
    "start": "1463320",
    "end": "1469640"
  },
  {
    "text": "um some future work that we're looking for uh and and definitely looking for help with uh we'd love some ideas and",
    "start": "1469640",
    "end": "1477640"
  },
  {
    "text": "contributions um we we've had a lot of issues raised on on GitHub around wiard which is fantastic it means people are",
    "start": "1477640",
    "end": "1484039"
  },
  {
    "text": "are trying this and exploring the future um as I mentioned pod to pod on the same",
    "start": "1484039",
    "end": "1489640"
  },
  {
    "text": "host being unencrypted does come up from time to time and it's something that um",
    "start": "1489640",
    "end": "1495120"
  },
  {
    "text": "we have some ideas around but again it's not a not an easy problem to fix um some more pre-flight checks um is",
    "start": "1495120",
    "end": "1504200"
  },
  {
    "text": "another uh another topic that comes up so when you enable wi guard using that",
    "start": "1504200",
    "end": "1510679"
  },
  {
    "text": "single command you don't really know if it's worked across all of your nodes or not so there's an assumption here that wire guard is actually installed in the",
    "start": "1510679",
    "end": "1517799"
  },
  {
    "text": "operating system that you're running across all your nodes in your cluster so if wire guard is not running in a node",
    "start": "1517799",
    "end": "1523720"
  },
  {
    "text": "across your cluster let's say it's installed on 50% of the nodes in your cluster um you'll be able to enable War",
    "start": "1523720",
    "end": "1530000"
  },
  {
    "text": "guard um traffic will flow across all of your nodes but it won't go down a war",
    "start": "1530000",
    "end": "1535880"
  },
  {
    "text": "guard tunnel between a node that has War guard and a node that doesn't have War guard so what that means is portions of",
    "start": "1535880",
    "end": "1542120"
  },
  {
    "text": "your cluster uh the traffic could be flowing un encrypted um and it might be",
    "start": "1542120",
    "end": "1547440"
  },
  {
    "text": "you might be unaware of that fact if you expect um the result of that enabled",
    "start": "1547440",
    "end": "1553320"
  },
  {
    "text": "command to turn on wi guard um to tell you that it's not working so we have a little bit little bit more work there to",
    "start": "1553320",
    "end": "1558840"
  },
  {
    "text": "do around pre-flight checks is wiard installed on all of and support in all of the kernels that are running in the",
    "start": "1558840",
    "end": "1564760"
  },
  {
    "text": "node and has it been successfully successfully installed across the node and we want to show that to people in",
    "start": "1564760",
    "end": "1570200"
  },
  {
    "text": "the command through an API so that they can determine and be safe and be sure that encryption is turned on and truly",
    "start": "1570200",
    "end": "1577799"
  },
  {
    "text": "being uh used across the entire cluster uh just to skip race conditions",
    "start": "1577799",
    "end": "1584279"
  },
  {
    "text": "for a second so the the flip side of that is uh sorry simp similarly we'd",
    "start": "1584279",
    "end": "1589760"
  },
  {
    "text": "like to give more fine grin control so right now it's all or noing so you turn on uh uh encryption for your entire",
    "start": "1589760",
    "end": "1595760"
  },
  {
    "text": "cluster now you can go through node by node and disable it on specific nodes",
    "start": "1595760",
    "end": "1600919"
  },
  {
    "text": "with a with a command again uh if you want to um but we'd like to do something like",
    "start": "1600919",
    "end": "1606480"
  },
  {
    "text": "this you're doing with uh name name space based encryption and offer like this policy based encryption where you",
    "start": "1606480",
    "end": "1613000"
  },
  {
    "text": "could say uh this corner of my cluster I want to be encrypted and we'll we'll keep the on encrypted um so that's",
    "start": "1613000",
    "end": "1620279"
  },
  {
    "text": "something that we're definitely going to work on uh IPv6 supports so wi guard supports I IPv6 some of our code is IP",
    "start": "1620279",
    "end": "1627960"
  },
  {
    "text": "V4 specific unfortunately um so we have a little bit of work there to do um and it's it's not",
    "start": "1627960",
    "end": "1635240"
  },
  {
    "text": "quite a a simple case of just U enabling IPv6 supporter some some quirks there as",
    "start": "1635240",
    "end": "1640440"
  },
  {
    "text": "well that we need to figure out uh we've had we've had some race conditions around cleaning up uh wi guard routing",
    "start": "1640440",
    "end": "1646640"
  },
  {
    "text": "rules um uh in terms of uh uh the speed of enabling disabling wi guard so if",
    "start": "1646640",
    "end": "1652440"
  },
  {
    "text": "you're if you're quite trigger happy with enabling wi guard and disabling it there can be some uh there has been one",
    "start": "1652440",
    "end": "1659880"
  },
  {
    "text": "or two race conditions that we've been solving as they come up and trying to test and find more so we've been pretty aggressive at trying to hunt down those",
    "start": "1659880",
    "end": "1666000"
  },
  {
    "text": "those race conditions and and fix",
    "start": "1666000",
    "end": "1669519"
  },
  {
    "start": "1673000",
    "end": "2126000"
  },
  {
    "text": "them so that's it that's the end of my talk um there's a few links here for um",
    "start": "1674519",
    "end": "1680360"
  },
  {
    "text": "related material and uh tigera and all the uh open uh open source project Calo guys",
    "start": "1680360",
    "end": "1687880"
  },
  {
    "text": "are at Tiger boot s24 so come over and say hello to us if you if you want to ask us any more questions afterwards",
    "start": "1687880",
    "end": "1694600"
  },
  {
    "text": "thank [Applause]",
    "start": "1694600",
    "end": "1702609"
  },
  {
    "text": "you all right we have some minutes for Q&A for the folks who decide to run for",
    "start": "1702640",
    "end": "1708679"
  },
  {
    "text": "for lunch please be quiet thank you uh when I active uh activate wire",
    "start": "1708679",
    "end": "1717080"
  },
  {
    "text": "guard does the MTU configuration of the V8 interface Calico interfaces will",
    "start": "1717080",
    "end": "1723720"
  },
  {
    "text": "change to have in mind that new overhead MTU overhead no like the MTU",
    "start": "1723720",
    "end": "1730279"
  },
  {
    "text": "will change to adapt to the new overhead for I I can't hear you sorry can you it's just some background noise it's not",
    "start": "1730279",
    "end": "1736120"
  },
  {
    "text": "so basically when I activate uh uh wire guard over an existing uh configuration",
    "start": "1736120",
    "end": "1742799"
  },
  {
    "text": "this activation will change my MTU configuration for the C interface automatically it will yeah it will thank",
    "start": "1742799",
    "end": "1751799"
  },
  {
    "text": "you anyone else someone there um you said that pre-checks are U",
    "start": "1752559",
    "end": "1760760"
  },
  {
    "text": "missing I'm wondering what will happen if somebody will uh kill the process on one of the nodes is it still working or",
    "start": "1760760",
    "end": "1768679"
  },
  {
    "text": "it will drop the encryption so there are certain there are certain parts of um uh",
    "start": "1768679",
    "end": "1777480"
  },
  {
    "text": "the data plane configuration the wiard data plane configuration that if you went in and changed that manually Felix",
    "start": "1777480",
    "end": "1783200"
  },
  {
    "text": "the data plane component will overwrite that and set the world back to the the right way that it should be um in terms",
    "start": "1783200",
    "end": "1789720"
  },
  {
    "text": "of killing off wire guard itself so wi guard runs in the in the kernel um but I think if you did try to kill it I think",
    "start": "1789720",
    "end": "1795799"
  },
  {
    "text": "you possibly could um result in having un encryption un encrypted on that node here Felix doesn't monitor the that it's",
    "start": "1795799",
    "end": "1803720"
  },
  {
    "text": "running uh it's just responsible for the routing rules and configuration so it's not going to monitor the process itself",
    "start": "1803720",
    "end": "1811399"
  },
  {
    "text": "that's a good point yeah thank you for the for the wonderful",
    "start": "1811399",
    "end": "1817399"
  },
  {
    "text": "talk I have this questions uh you you said the biggest motivation for endend",
    "start": "1817399",
    "end": "1823360"
  },
  {
    "text": "encrytion is a compliance uh but with AKs and EK implementation we see just the traffic",
    "start": "1823360",
    "end": "1830679"
  },
  {
    "text": "between uh two ports uh the the service port and the uh the NW work Port is",
    "start": "1830679",
    "end": "1838039"
  },
  {
    "text": "encryp would just invalidate the whole systems so it that's the way it used to",
    "start": "1838039",
    "end": "1843559"
  },
  {
    "text": "be so the question there is so for AKs and these manag environments uh a",
    "start": "1843559",
    "end": "1848960"
  },
  {
    "text": "portion of that uh of the um host Network pod tood could be unencrypted uh",
    "start": "1848960",
    "end": "1856279"
  },
  {
    "text": "so that's the way it used to work um we have a feature called host to host encryption that we rolled out for AKs",
    "start": "1856279",
    "end": "1863200"
  },
  {
    "text": "and eks only and that encrypts everything so every including uh traffic",
    "start": "1863200",
    "end": "1869120"
  },
  {
    "text": "to the uh management apis okay to the master node so everything is encrypted host to host uh",
    "start": "1869120",
    "end": "1876559"
  },
  {
    "text": "kind of like IPC you don't really have a choice it's not just pod top and and we rolled that out on AKs recently and he",
    "start": "1876559",
    "end": "1882880"
  },
  {
    "text": "can specifically for that reason so that that is covered in that blog post I referenced yeah thank",
    "start": "1882880",
    "end": "1890159"
  },
  {
    "text": "you anyone else",
    "start": "1890159",
    "end": "1893960"
  },
  {
    "text": "questions first of all thanks for the talk um you said that you automatically",
    "start": "1907399",
    "end": "1913200"
  },
  {
    "text": "generate the public keys and private keys for every note and that you can get these public keys",
    "start": "1913200",
    "end": "1918679"
  },
  {
    "text": "uh if you do a get to the note um do I the administrator have to um uh spread",
    "start": "1918679",
    "end": "1926679"
  },
  {
    "text": "these keys to all nodes or does is that automatic and if it's automatic how do you prevent um some some keys to be",
    "start": "1926679",
    "end": "1935720"
  },
  {
    "text": "injected so another public key getting injected that you don't actually want in there sure so they again this is a very",
    "start": "1935720",
    "end": "1944679"
  },
  {
    "text": "very similar to how you would manage your SSH keys so in terms the first part of your question uh Calico looks after",
    "start": "1944679",
    "end": "1950559"
  },
  {
    "text": "all of that for you so you don't have to manually distribute those public keys and keep them up to date in your cluster",
    "start": "1950559",
    "end": "1956880"
  },
  {
    "text": "uh so Calico does that part for you uh using the Calico data store as the main kind of backing data store for public",
    "start": "1956880",
    "end": "1962639"
  },
  {
    "text": "Keys um if you injected a a public key it's not going to work with the private key so I think that that might help with",
    "start": "1962639",
    "end": "1969399"
  },
  {
    "text": "some of the second part of your question if I understand it correctly the idea was that I inject the",
    "start": "1969399",
    "end": "1976679"
  },
  {
    "text": "public key of uh an additional note that not actually something that I'm that",
    "start": "1976679",
    "end": "1983159"
  },
  {
    "text": "actually belongs there where of course I as the attacker have the private key for I okay I see what you mean so that's",
    "start": "1983159",
    "end": "1990840"
  },
  {
    "text": "fine that's you you can do that you'll also need then to program the allowed IP",
    "start": "1990840",
    "end": "1996000"
  },
  {
    "text": "list and and add a new pier to the wire guard configuration in every node in the cluster if you want those nodes to talk",
    "start": "1996000",
    "end": "2003480"
  },
  {
    "text": "to your bad node okay so we don't maintain a list of like good nodes versus bad nodes so potentially if you",
    "start": "2003480",
    "end": "2010440"
  },
  {
    "text": "did that you could then you'd have to get onto every node you'd have to program the wi guard configuration to",
    "start": "2010440",
    "end": "2017279"
  },
  {
    "text": "know about your bad node you'd have to add the Pod IPS from your bad node to the allowed IP list in all of the wir",
    "start": "2017279",
    "end": "2024720"
  },
  {
    "text": "configuration what would happen is Felix would just overwrite that itself because it's not stored in the data store so",
    "start": "2024720",
    "end": "2030360"
  },
  {
    "text": "even if you went and did that manually it would be overwritten fairly quickly by by Felix okay thanks",
    "start": "2030360",
    "end": "2038279"
  },
  {
    "text": "uh no we Felix doesn't do any key",
    "start": "2039399",
    "end": "2044639"
  },
  {
    "text": "rotation all right last",
    "start": "2045919",
    "end": "2050679"
  },
  {
    "text": "question hi uh thanks for the talk um I wanted to know if Calico supports like",
    "start": "2053560",
    "end": "2059200"
  },
  {
    "text": "mesh but uh outside the cluster for example you got some uh another cluster",
    "start": "2059200",
    "end": "2064720"
  },
  {
    "text": "in another region and you want to peer them uh some service meas support it but",
    "start": "2064720",
    "end": "2070240"
  },
  {
    "text": "does kigo support it uh we don't support it right now that is a I should have",
    "start": "2070240",
    "end": "2075280"
  },
  {
    "text": "added that to my future list that has come up before actually so can you uh",
    "start": "2075280",
    "end": "2081280"
  },
  {
    "text": "extend the encryption outside of the cluster to some external service another",
    "start": "2081280",
    "end": "2086800"
  },
  {
    "text": "cluster or or your client maybe your developer laptop so that's something that people are definit definitely",
    "start": "2086800",
    "end": "2093200"
  },
  {
    "text": "interested in um there's there's companies working specifically on that",
    "start": "2093200",
    "end": "2098440"
  },
  {
    "text": "endend encryption using wire guard uh open source companies working on it uh it has come up from one of our users one",
    "start": "2098440",
    "end": "2105119"
  },
  {
    "text": "of our our big users so it's something we will have to look at um you could do it manually for now but again the risk",
    "start": "2105119",
    "end": "2111760"
  },
  {
    "text": "is that what you change in the configuration will be overridden by by Felix okay thank you not supported right",
    "start": "2111760",
    "end": "2118000"
  },
  {
    "text": "now yeah okay thank you everyone thank you Peter and have a nice lunch thanks guys",
    "start": "2118000",
    "end": "2125640"
  },
  {
    "text": "[Applause]",
    "start": "2126240",
    "end": "2128750"
  }
]