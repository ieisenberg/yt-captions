[
  {
    "text": "hey good morning welcome to ccon and Cloud native comom and to the Dapper",
    "start": "680",
    "end": "5920"
  },
  {
    "text": "maintainance talk um we'll introduce ourselves my name is Mark fussel I'm a Dappa maintainer and I'm also the CEO of",
    "start": "5920",
    "end": "13559"
  },
  {
    "text": "diagrid and I'm Chris Gillum uh software uh architect at Microsoft so focusing on",
    "start": "13559",
    "end": "19600"
  },
  {
    "text": "serous uh Cloud platforms and so today we kind of want to dive into a little bit about what",
    "start": "19600",
    "end": "25640"
  },
  {
    "text": "Dapper is just give a little bit of the background um we're going to spend quite a lot of time and Chris's particularly on workflows which is probably one of",
    "start": "25640",
    "end": "32238"
  },
  {
    "text": "the most exciting things that we've been building into Dapper in the last few releases um and then I'll kind of follow",
    "start": "32239",
    "end": "37360"
  },
  {
    "text": "up with a little bit about talking about some of the things in the latest release particularly around the outbox pattern and then we're going to finish up with",
    "start": "37360",
    "end": "43280"
  },
  {
    "text": "sort of the road ahead and where the actual project is going and sort of dive into sort of looking beyond the",
    "start": "43280",
    "end": "50199"
  },
  {
    "text": "future you know what is Dapper um Dapper is effectively a set of apis that allow developers to build distributed",
    "start": "50199",
    "end": "56600"
  },
  {
    "text": "applications build Cloud native applications you know it brings product activity for you to build across",
    "start": "56600",
    "end": "62320"
  },
  {
    "text": "distributed platforms like kubernetes in essence Dapper is a set of apis that codify best practice patterns that save",
    "start": "62320",
    "end": "69759"
  },
  {
    "text": "you time building things like request reply or Pub sub event messaging or long",
    "start": "69759",
    "end": "75000"
  },
  {
    "text": "running stateful or workflow applications and by combining these together and coming it it from any",
    "start": "75000",
    "end": "80119"
  },
  {
    "text": "language or any run runtime of your favorite you can build applications that run on a set of VMS cross kubernetes is",
    "start": "80119",
    "end": "87439"
  },
  {
    "text": "not bound to community platform but you know about productivity for developers so when you're building applications de",
    "start": "87439",
    "end": "94840"
  },
  {
    "text": "daa apis allow you to you know distinctly build them more productively fast and then half the time you'd expect",
    "start": "94840",
    "end": "100759"
  },
  {
    "text": "in fact we did a great um state of Dappa survey a few months back and it showed that you know Dapper itself saves",
    "start": "100759",
    "end": "106840"
  },
  {
    "text": "developers 30% of the time getting their applications into um production now um you know another way",
    "start": "106840",
    "end": "114680"
  },
  {
    "text": "to think about this is that you know Dapper is a set of patterns um that you can use from each one of of your",
    "start": "114680",
    "end": "120119"
  },
  {
    "text": "runtimes so you can take a one of your favorite languages you can take your favorite framework inside the all and",
    "start": "120119",
    "end": "126320"
  },
  {
    "text": "you can think of them as patterns that you see typically codified like Saga workflows or request reply or long",
    "start": "126320",
    "end": "132720"
  },
  {
    "text": "running event driven applications and you know da alone you know is very powerful but you can be used alongside",
    "start": "132720",
    "end": "139400"
  },
  {
    "text": "other you a um apis and Frameworks that you use it doesn't have be you know solely used and embraced it's kind of",
    "start": "139400",
    "end": "145680"
  },
  {
    "text": "It's a combination of effect that you can bring together with other Frameworks when you look at this as well",
    "start": "145680",
    "end": "151200"
  },
  {
    "text": "you know you can look at it through the eyes well of you know using microservices doio as a place to show",
    "start": "151200",
    "end": "156400"
  },
  {
    "text": "microservices patterns you know we kind of layer the common use patterns on top of that and so you can see that you know",
    "start": "156400",
    "end": "162680"
  },
  {
    "text": "even from a microservices sense you can bring these consistent patterns to your development now you know that is it from",
    "start": "162680",
    "end": "169879"
  },
  {
    "text": "a developer perspective but what does it look like from a platform perspective one of the key questions as well that we",
    "start": "169879",
    "end": "175120"
  },
  {
    "text": "kind of need to answer ourselves is you know how is it that Dapper fits in with uh hosting platforms that you use so",
    "start": "175120",
    "end": "181760"
  },
  {
    "text": "when you look at three very common hosting platforms you get the less opinionated kubernetes platforms very",
    "start": "181760",
    "end": "187840"
  },
  {
    "text": "powerful but you know you have to think about a lot how to deploy and run to them and you get the very impen functions platforms and to some degree",
    "start": "187840",
    "end": "194799"
  },
  {
    "text": "you know Dappa sort of Embraces all those different levels but one of the common questions is you know what's",
    "start": "194799",
    "end": "199879"
  },
  {
    "text": "missing from the conversation about how is it that you know developers using those platforms talk to the underlying",
    "start": "199879",
    "end": "205120"
  },
  {
    "text": "infrastructure and what we see commonly is that you know developers bring in a particular SDK and they bind tightly to",
    "start": "205120",
    "end": "211080"
  },
  {
    "text": "particular infrastructure libraries and sort of tightly couple those too so one of the key attributes adapa does is it",
    "start": "211080",
    "end": "217799"
  },
  {
    "text": "allows you to have a separation of those concerns it allows you to have your underlying infrastructure through the",
    "start": "217799",
    "end": "222920"
  },
  {
    "text": "API contracts and also through the idea of a component model so you can swap out the underlying infrastructure yet make",
    "start": "222920",
    "end": "228799"
  },
  {
    "text": "your code consistent since is very relevant to an audience here where you're thinking about platforms and how",
    "start": "228799",
    "end": "234079"
  },
  {
    "text": "they have contracts that fit with the application World in terms of the application developers building on on",
    "start": "234079",
    "end": "239720"
  },
  {
    "text": "top of them so in the particular case very powerful adaper you can build applications locally and you can also",
    "start": "239720",
    "end": "245920"
  },
  {
    "text": "then move them to the cloud and all you have to do is swap out this underlying component model or you may have built an",
    "start": "245920",
    "end": "251079"
  },
  {
    "text": "application that's even outside the cloud but be able to say there I'm using you know particular underlying",
    "start": "251079",
    "end": "257239"
  },
  {
    "text": "technologies that I went to from message broker or state store and without changing my code I can move them into a",
    "start": "257239",
    "end": "263199"
  },
  {
    "text": "cloud and swap out the Stage store I was using for a Cloud store or a cloud message broker so this all gets surfaced",
    "start": "263199",
    "end": "269280"
  },
  {
    "text": "effectively in what in Dapper is called the component model you know for each one of the behind each one of the apis",
    "start": "269280",
    "end": "274960"
  },
  {
    "text": "is a component model so for example behind a state API there's a component model for State Stores about how you can",
    "start": "274960",
    "end": "281280"
  },
  {
    "text": "store state in a key value store or behind the message broker the publishing API there's a an API to plug in",
    "start": "281280",
    "end": "287440"
  },
  {
    "text": "different message Brokers and this portability of code prevents you having lockin it provides flexibility and you",
    "start": "287440",
    "end": "293520"
  },
  {
    "text": "know time and time again we have conversations with organizations that go I wish I hadn't tightly coupled my code",
    "start": "293520",
    "end": "299199"
  },
  {
    "text": "together now Dappa does layer a lot of functionalities on top of this it's not just purely an integration play so for",
    "start": "299199",
    "end": "305080"
  },
  {
    "text": "example in the State Management place where you have non-transactional State Stores Dappa provides transactional",
    "start": "305080",
    "end": "311320"
  },
  {
    "text": "semantics for multi rghts across it all or daa provides security at the topic level for security messaging that's LED",
    "start": "311320",
    "end": "317919"
  },
  {
    "text": "on top of all those message Brokers so it's very powerful runtime in its own right providing a lot of features around",
    "start": "317919",
    "end": "323080"
  },
  {
    "text": "patterns that layer on top of this component model but this combination of component models and patterns giving you",
    "start": "323080",
    "end": "328600"
  },
  {
    "text": "portability and flex ability you translates effectively into you know how is it you build a distributed",
    "start": "328600",
    "end": "334120"
  },
  {
    "text": "application well here I might have an application that uses Pub sub to coordinate through a redate store that",
    "start": "334120",
    "end": "340919"
  },
  {
    "text": "sends messages to another service that's sending messages out to twilio and then it may do a direct invoke message um to",
    "start": "340919",
    "end": "347600"
  },
  {
    "text": "another service here that save some state or talks to another cloud service and when you look at the design of this",
    "start": "347600",
    "end": "353680"
  },
  {
    "text": "application binding them all together effectively as a set of dapper apis and those apis make it consistent it allows",
    "start": "353680",
    "end": "361039"
  },
  {
    "text": "you to have a contract that you talk about how you build your applications and the flexibility and portability of",
    "start": "361039",
    "end": "366360"
  },
  {
    "text": "that is incredibly important in fact the more we spend time with customers the more we see that this contract of having",
    "start": "366360",
    "end": "372400"
  },
  {
    "text": "an API that keeps the portability of your code um and all the rich features that daa has so that you can build",
    "start": "372400",
    "end": "378479"
  },
  {
    "text": "applications quickly becomes very important to them but what's also critical is across all of these apis is",
    "start": "378479",
    "end": "384440"
  },
  {
    "text": "you get consistent observability security and reliability so if my calls",
    "start": "384440",
    "end": "390080"
  },
  {
    "text": "fail to service inv vacation they can retry or my Pub sub does retry I do endtoend security across all of this so",
    "start": "390080",
    "end": "396520"
  },
  {
    "text": "you get security out of the box you get observability out of the box you get reliability out of the box and by the",
    "start": "396520",
    "end": "401800"
  },
  {
    "text": "time you put all of this together and you think about this what really Dapper is it's an integrated set of apis that",
    "start": "401800",
    "end": "407840"
  },
  {
    "text": "all work very well together and provide this seamless connectivity to pretty much give you 80% of your whole app you",
    "start": "407840",
    "end": "414199"
  },
  {
    "text": "want and with the introduction of workflow which is in so many applications today where we you have a business logic that has to run that",
    "start": "414199",
    "end": "420840"
  },
  {
    "text": "communicates with other systems that sends pubs some messages that does service invocation calls that talks to",
    "start": "420840",
    "end": "427000"
  },
  {
    "text": "external systems you can find that you know you have a very powerful Suite of apis that runs on many different",
    "start": "427000",
    "end": "432720"
  },
  {
    "text": "platforms that communicates with um that runs on many different Cloud um Services",
    "start": "432720",
    "end": "438080"
  },
  {
    "text": "you can hook up to and you know you can see your productivity about building these applications so with that I am going to",
    "start": "438080",
    "end": "445560"
  },
  {
    "text": "switch over and let Chris dive into workflow and all the amazing things that have been happening there all right thanks a lot markk so I thought we'd",
    "start": "445560",
    "end": "452000"
  },
  {
    "text": "start out by talking about what is a workflow and I think this is an important question because uh depending",
    "start": "452000",
    "end": "457160"
  },
  {
    "text": "on who you ask you might get a very different answer so we'll start out with a definition that we used in the Dapper",
    "start": "457160",
    "end": "463160"
  },
  {
    "text": "workflow project which is a sequence of software defined tasks or activities that are performed to accomplish a",
    "start": "463160",
    "end": "469199"
  },
  {
    "text": "specific goal or objective so obviously that's a little generic but but sort of",
    "start": "469199",
    "end": "474240"
  },
  {
    "text": "gives you an idea of how we see what workflows are diving in a little bit deeper uh let's talk about some of the",
    "start": "474240",
    "end": "479919"
  },
  {
    "text": "ideal characteristics that we think workflows should have uh one is that they're stateful and durable right uh we",
    "start": "479919",
    "end": "486919"
  },
  {
    "text": "want them to be able to execute to completion regardless of infrastructure failures another is that they can be",
    "start": "486919",
    "end": "492840"
  },
  {
    "text": "either short-lived or they could be long running right uh workflow might run in",
    "start": "492840",
    "end": "498159"
  },
  {
    "text": "just a few seconds or it might take weeks to complete maybe never ends at all uh we believe that workflows should",
    "start": "498159",
    "end": "504879"
  },
  {
    "text": "be virtual meaning that if you were running a workflow on 1 VM uh and we",
    "start": "504879",
    "end": "510400"
  },
  {
    "text": "need to load balance that thing we should be able to do that to unload it from memory reload it to another node",
    "start": "510400",
    "end": "516000"
  },
  {
    "text": "transparently without sort of impacting uh the availability of that workflow",
    "start": "516000",
    "end": "521279"
  },
  {
    "text": "also addressable workflows should have some sort of an ID uh such that we can",
    "start": "521279",
    "end": "526560"
  },
  {
    "text": "send messages to that workflow to help it move along if it needs to as well as",
    "start": "526560",
    "end": "531800"
  },
  {
    "text": "clear life cycle semantics right so these aren't just State machines these actually have life cycle semantics such",
    "start": "531800",
    "end": "537760"
  },
  {
    "text": "as uh pending running suspended uh completed failed terminated you get the",
    "start": "537760",
    "end": "543360"
  },
  {
    "text": "idea so given that we came up with a set of features that we wanted to uh surface",
    "start": "543360",
    "end": "548839"
  },
  {
    "text": "in Dapper workflow here's some of the main ones one being activities right these are the basic units of work that",
    "start": "548839",
    "end": "555880"
  },
  {
    "text": "workflows are responsible for scheduling they have at least once execution guarantees and they do sort of the core",
    "start": "555880",
    "end": "563120"
  },
  {
    "text": "processing or uh you know making out about Network calls those sorts of things that workflows often do uh",
    "start": "563120",
    "end": "568720"
  },
  {
    "text": "durable timers the ability to schedule arbitrarily long delays in workflow execution again this could be a few",
    "start": "568720",
    "end": "574880"
  },
  {
    "text": "seconds this could be uh you know month-long delay uh the workflow shouldn't care uh child workflows so the",
    "start": "574880",
    "end": "581680"
  },
  {
    "text": "ability to sort of break down a larger workflow into smaller uh easy to",
    "start": "581680",
    "end": "586880"
  },
  {
    "text": "understand subflows uh this idea of external events right workflows should be able to interact with the external",
    "start": "586880",
    "end": "592560"
  },
  {
    "text": "world around it not just be completely isolated to its own uh set of activities",
    "start": "592560",
    "end": "598320"
  },
  {
    "text": "uh so for example being able to take in an input uh if there's like a human in the loop uh process that needs to be",
    "start": "598320",
    "end": "604519"
  },
  {
    "text": "automated um and then lastly retry policies so you know if you have an",
    "start": "604519",
    "end": "609839"
  },
  {
    "text": "activity that does some work and then it fails uh just the ability to be able to retry that using either a static sort of",
    "start": "609839",
    "end": "616760"
  },
  {
    "text": "declarative retry policy or even a code-based retry policy and we'll jump into the code piece in a little bit",
    "start": "616760",
    "end": "623000"
  },
  {
    "text": "here um so with Dapper workflow you are actually writing workflows in code and",
    "start": "623000",
    "end": "628560"
  },
  {
    "text": "this is an important distinction that we have in Dapper workflow versus many other traditional workflow engines uh",
    "start": "628560",
    "end": "633959"
  },
  {
    "text": "today we support uh net Python and Java uh with go and nodejs support coming",
    "start": "633959",
    "end": "641200"
  },
  {
    "text": "very soon um but the important thing to to note here is that the code that you",
    "start": "641200",
    "end": "646680"
  },
  {
    "text": "see and I apologize if it's a little bit small but this is ordinary code just implemented as a simple function right",
    "start": "646680",
    "end": "653560"
  },
  {
    "text": "this is not something like uh airflow where you might be using code to construct a dag uh uh rather we're just",
    "start": "653560",
    "end": "660320"
  },
  {
    "text": "using idiomatic code in the language of your choice to actually Define the workflow execution in fact you can even",
    "start": "660320",
    "end": "667360"
  },
  {
    "text": "attach debuggers to this while the workflow is running uh to actually step through and see what's happening and",
    "start": "667360",
    "end": "674279"
  },
  {
    "text": "this allows you to use conditionals Loops local variables uh try catch sort",
    "start": "674279",
    "end": "680440"
  },
  {
    "text": "of exception handling all with the guarantees that I sort of mentioned earlier about uh being able to run sort",
    "start": "680440",
    "end": "687240"
  },
  {
    "text": "of reliably and durably being able to move it from one VM to the other uh so on and so forth so if you've ever heard",
    "start": "687240",
    "end": "694639"
  },
  {
    "text": "of say temporal workflow or Cadence workflow or even Azure durable functions",
    "start": "694639",
    "end": "699760"
  },
  {
    "text": "it's effectively the same idea that we've sort of Taken and put into the Dapper project uh to make available in a",
    "start": "699760",
    "end": "706000"
  },
  {
    "text": "cloud agnostic way uh so the way that this basically",
    "start": "706000",
    "end": "711760"
  },
  {
    "text": "Works behind the scenes is there are two pieces there is the Dapper workflow engine which runs in the Dapper side car",
    "start": "711760",
    "end": "718200"
  },
  {
    "text": "and then there is your workflow code which runs within your application container now the workflow engine what",
    "start": "718200",
    "end": "724040"
  },
  {
    "text": "it does is it takes care of all of the State Management it takes care of the",
    "start": "724040",
    "end": "729200"
  },
  {
    "text": "sort of failure handling retry and basically all the scheduling of actions",
    "start": "729200",
    "end": "734440"
  },
  {
    "text": "uh for you whereas the code that you write is purely focused on you know what",
    "start": "734440",
    "end": "739680"
  },
  {
    "text": "is the business logic that I'm trying to implement right what are my tasks what order do they need to run in um those",
    "start": "739680",
    "end": "745480"
  },
  {
    "text": "sorts of things in fact if you dive in a little bit more Clos closely to sort of see this protocol there's actually this",
    "start": "745480",
    "end": "752079"
  },
  {
    "text": "uh two-way sort of grpc streaming protocol that we use between the Dapper side car and your workflow application",
    "start": "752079",
    "end": "759680"
  },
  {
    "text": "where the sidecar basically tells you all right please start running workflow X or please start running uh activity Y",
    "start": "759680",
    "end": "767880"
  },
  {
    "text": "and then uh your code goes ahead and it runs that particular function uh or at",
    "start": "767880",
    "end": "773279"
  },
  {
    "text": "least that step of the function and then uh it'll send back a result to the side car and then the side card ending goes",
    "start": "773279",
    "end": "779880"
  },
  {
    "text": "and saves it into the state store basically creating sort of an execution log so that if there is a failure we",
    "start": "779880",
    "end": "786639"
  },
  {
    "text": "know exactly how to rebuild that workflow and get it back into the state that it was in before uh so with that I would love to",
    "start": "786639",
    "end": "793639"
  },
  {
    "text": "jump into an actual demo um this is an order processing demo but I do want to highlight that uh Dapper workflow uh in",
    "start": "793639",
    "end": "801399"
  },
  {
    "text": "addition to being able to do things like business workflows is also very good for other scenarios such as infrastructure",
    "start": "801399",
    "end": "807040"
  },
  {
    "text": "provisioning a massively uh scalable uh sort of batch processing type jobs um",
    "start": "807040",
    "end": "814199"
  },
  {
    "text": "and and just a variety of other workflow scenarios but we'll focus on sort of this more business order processing one for now uh we have five microservices in",
    "start": "814199",
    "end": "822720"
  },
  {
    "text": "this process we're using the Dapper state store we're using pubsub as well as the Dapper service invocation",
    "start": "822720",
    "end": "827920"
  },
  {
    "text": "building block which allows the workflow basically to communicate to all these different Services either directly using",
    "start": "827920",
    "end": "833959"
  },
  {
    "text": "service invocation or indirectly sort of using pubsub uh via redus so I'm going",
    "start": "833959",
    "end": "839040"
  },
  {
    "text": "to go ahead and switch over now to visual studio code where I have an app hopefully this is visible enough um I",
    "start": "839040",
    "end": "845519"
  },
  {
    "text": "can zoom in just a little bit here but over on the left hand side you can see I've got four Services inventory",
    "start": "845519",
    "end": "851959"
  },
  {
    "text": "notifications order processing payments and shipping I also have a Dapper doyl file which you could sort of think of as",
    "start": "851959",
    "end": "858680"
  },
  {
    "text": "a you know a definition of our app for running it locally now normally in",
    "start": "858680",
    "end": "864120"
  },
  {
    "text": "production you'd run this in kubernetes uh but Dapper has a lot of great tooling allows you to also run your apps locally",
    "start": "864120",
    "end": "871040"
  },
  {
    "text": "on the machine uh the main app that we're going to focus on is the order processing app now this is all written",
    "start": "871040",
    "end": "876920"
  },
  {
    "text": "in Python and if we dive into this this is the app that's going to Define our",
    "start": "876920",
    "end": "882120"
  },
  {
    "text": "actual workflow logic and I want to spend a little bit of time on this so we have a bunch of business classes uh",
    "start": "882120",
    "end": "888079"
  },
  {
    "text": "which we have here which are totally custom and then we have a set of functions we have a process order",
    "start": "888079",
    "end": "893320"
  },
  {
    "text": "workflow which is our workflow function and we have a bunch of activities which",
    "start": "893320",
    "end": "898959"
  },
  {
    "text": "are the pieces of code that the workflow is basically going to orchestrate in a reliable way now the workflow takes in",
    "start": "898959",
    "end": "907000"
  },
  {
    "text": "two arguments there is a workflow context and then there is some input which is some business entity that you",
    "start": "907000",
    "end": "913160"
  },
  {
    "text": "define within your app in this case an order and if we look into this function",
    "start": "913160",
    "end": "919160"
  },
  {
    "text": "a little bit one interesting thing that you will notice is that uh especially if you're a python developer you'll realize",
    "start": "919160",
    "end": "926040"
  },
  {
    "text": "that this is um a generator function and so what we're doing is we're taking",
    "start": "926040",
    "end": "932040"
  },
  {
    "text": "this context object which is given to you when you scheduled this workflow uh we're able to use it to do",
    "start": "932040",
    "end": "938360"
  },
  {
    "text": "various actions like calling an activity which is going to do some work um in this case you pass in what is a a",
    "start": "938360",
    "end": "944959"
  },
  {
    "text": "pointer to the function that executes that activity and the result of this call is going to be a",
    "start": "944959",
    "end": "952040"
  },
  {
    "text": "task and if you yield this task like we do here in this generator function",
    "start": "952040",
    "end": "958279"
  },
  {
    "text": "what's going going to happen is we're going to basically tell the Dapper runtime which is running in that side",
    "start": "958279",
    "end": "963399"
  },
  {
    "text": "car hey please execute this task that I wanted to execute in this case the",
    "start": "963399",
    "end": "969000"
  },
  {
    "text": "notify one now if we take a look at the notify task it's it's rather simple it just takes the Dapper client and invokes",
    "start": "969000",
    "end": "976639"
  },
  {
    "text": "the uh publish event API to uh publish the message to a pub sub broker in this",
    "start": "976639",
    "end": "982680"
  },
  {
    "text": "case it's just a reddis pub sub broker um but that's effectively what it's",
    "start": "982680",
    "end": "987759"
  },
  {
    "text": "going to do now this notify activity it might run on the local machine it might run on a completely different machine",
    "start": "987759",
    "end": "994040"
  },
  {
    "text": "basically depending on the load balancing characteristics uh that we need at the time uh but the idea is that",
    "start": "994040",
    "end": "1000279"
  },
  {
    "text": "this workflow can schedule these activities as it makes progress another",
    "start": "1000279",
    "end": "1005399"
  },
  {
    "text": "thing that I'll mention too when we do this yield it's going to pause the workflow wait for this activity that it",
    "start": "1005399",
    "end": "1011440"
  },
  {
    "text": "calls to complete and once it completes the generator moves to the next step uh",
    "start": "1011440",
    "end": "1017000"
  },
  {
    "text": "which is you know in this case calling another activity uh you know like reserve inventory right that's sort of The Next Step that we do in this",
    "start": "1017000",
    "end": "1023160"
  },
  {
    "text": "workflow um when you call these activities and you yield them you can also get the output of the activity so",
    "start": "1023160",
    "end": "1030120"
  },
  {
    "text": "for example when we reserve inventory we get some output back uh saying was it successful uh we can write some if",
    "start": "1030120",
    "end": "1037480"
  },
  {
    "text": "conditionals to say hey was you know was it successful uh if not you know send a",
    "start": "1037480",
    "end": "1042558"
  },
  {
    "text": "notification that it failed uh we can exit the workflow at any time to complete it using a return statement",
    "start": "1042559",
    "end": "1048640"
  },
  {
    "text": "again just using idiomatic code that that you're used to to author all the steps within the workflow and again each",
    "start": "1048640",
    "end": "1055440"
  },
  {
    "text": "time we do a step we do this yield which tells the sidecar hey please go uh execute that work that I asked you to um",
    "start": "1055440",
    "end": "1062679"
  },
  {
    "text": "and which point we also Save Our State uh so that if there were to be some sort of an infrastructure failure we're able",
    "start": "1062679",
    "end": "1068880"
  },
  {
    "text": "to still resume this workflow load it back into memory and resume from the last yield point that we had uh so just",
    "start": "1068880",
    "end": "1076360"
  },
  {
    "text": "quickly to um walk through the last steps we'll get to this part in a minute uh but we sort of submit the payment uh",
    "start": "1076360",
    "end": "1084240"
  },
  {
    "text": "after we've reserved the inventory and then uh we submit the order to shipping as one of the last",
    "start": "1084240",
    "end": "1090080"
  },
  {
    "text": "steps here uh but you'll notice too that we have we wrap this in a tri accept because if that uh shipping uh operation",
    "start": "1090080",
    "end": "1097919"
  },
  {
    "text": "if it fails for some reason well we've already submitted the payment right so we need to compensate for that which is",
    "start": "1097919",
    "end": "1103960"
  },
  {
    "text": "why inside of this accept block we have another activity where we can call refund payment to make sure that if for",
    "start": "1103960",
    "end": "1110159"
  },
  {
    "text": "some reason that we're not able to complete the shipping uh we're going to refund whatever that payment was and so",
    "start": "1110159",
    "end": "1116600"
  },
  {
    "text": "this is an important sort of guarantee that we offer that we're going to run through your workflow code um the",
    "start": "1116600",
    "end": "1123159"
  },
  {
    "text": "presence of failures and so if there is some sort of application Level issue that prevents shipping you know we can",
    "start": "1123159",
    "end": "1128960"
  },
  {
    "text": "have compensation for that which is often a very important feature um and then once that's all done we do a final",
    "start": "1128960",
    "end": "1134480"
  },
  {
    "text": "notification to say that we're done and then uh just to quick l oh and one other thing that I think is",
    "start": "1134480",
    "end": "1142240"
  },
  {
    "text": "is pretty interesting too so I've showed you so far just uh orchestrating a bunch",
    "start": "1142240",
    "end": "1147400"
  },
  {
    "text": "of steps let's say we want to add a a human approval in the loop as well let's say that if an order is over $1,000 uh",
    "start": "1147400",
    "end": "1154880"
  },
  {
    "text": "that somebody needs to manually approve this thing uh well workflow has tools for that too so one of the operations",
    "start": "1154880",
    "end": "1162159"
  },
  {
    "text": "that one of the tasks that you can schedule in a workflow is waiting for an external event uh you define what that",
    "start": "1162159",
    "end": "1168360"
  },
  {
    "text": "external event is in this case uh we're calling it approval um and let's so we're going to",
    "start": "1168360",
    "end": "1174440"
  },
  {
    "text": "pause the workflow and say we're not going to continue until somebody approves this we receive the approval",
    "start": "1174440",
    "end": "1179600"
  },
  {
    "text": "event but at the same time we also don't want to wait forever for somebody to approve this let's say we want to bound",
    "start": "1179600",
    "end": "1185960"
  },
  {
    "text": "it to like 24 hours so we have another task which is a create timer task you",
    "start": "1185960",
    "end": "1191360"
  },
  {
    "text": "can set any duration to this in this case 24 hours and uh we're not and basically",
    "start": "1191360",
    "end": "1197840"
  },
  {
    "text": "we're going to wrap those two tasks within the using this when any API to say um when either the approval task or",
    "start": "1197840",
    "end": "1206520"
  },
  {
    "text": "the timeout expiration task complete uh go ahead and resume the",
    "start": "1206520",
    "end": "1212400"
  },
  {
    "text": "workflow and return back whichever of those tasks was the winner so uh below",
    "start": "1212400",
    "end": "1218760"
  },
  {
    "text": "that we can say if the winner was the timeout expiration then you know we can notify that hey we we failed to receive",
    "start": "1218760",
    "end": "1226080"
  },
  {
    "text": "an approval for this and we go ahead and complete uh the workflow as a canel order",
    "start": "1226080",
    "end": "1231840"
  },
  {
    "text": "effectively otherwise you know check to make sure that we got the approval that we expect and then continue running uh",
    "start": "1231840",
    "end": "1237320"
  },
  {
    "text": "the workflow so anyways that's that's sort of an interesting uh uh feature that we also have as part of workflows",
    "start": "1237320",
    "end": "1243880"
  },
  {
    "text": "there's a few more but we'll focus just on that for now and then lastly I just want to show really quick uh we have a",
    "start": "1243880",
    "end": "1249640"
  },
  {
    "text": "few apis this is just a flask a flask app as well uh where we allow you to",
    "start": "1249640",
    "end": "1255159"
  },
  {
    "text": "take adapt workflow client you can schedule new workflow clows say which one you want to schedule give it an",
    "start": "1255159",
    "end": "1260799"
  },
  {
    "text": "input you can give it an instance ID so that you can reference it later which we're going to do so enough talking uh",
    "start": "1260799",
    "end": "1268120"
  },
  {
    "text": "let's actually run this so I'm going to do uh Dapper run and what that's going",
    "start": "1268120",
    "end": "1273720"
  },
  {
    "text": "to do is it's going to take all these five microservice processes that I've",
    "start": "1273720",
    "end": "1278840"
  },
  {
    "text": "defined within my app and it's going to start them up on my local machine and uh what I'm also going to do",
    "start": "1278840",
    "end": "1286039"
  },
  {
    "text": "while that's starting up is I'm going to open up on the bottom half here we have our notification service which is the",
    "start": "1286039",
    "end": "1292960"
  },
  {
    "text": "subscriber to all of those Pub sub notifications that the workflow is going to be publishing um so anyways we see down",
    "start": "1292960",
    "end": "1299840"
  },
  {
    "text": "here that it says connection open and uh we're going to go ahead and start a",
    "start": "1299840",
    "end": "1305240"
  },
  {
    "text": "workflow so hopefully I can do this in a way that's somewhat",
    "start": "1305240",
    "end": "1310360"
  },
  {
    "text": "readable I'm going to go to the top here and let's go ahead and uh submit an order this is going to be a slightly",
    "start": "1310360",
    "end": "1317080"
  },
  {
    "text": "expensive order gosh sometimes this is a little funny okay there we go so we're going to",
    "start": "1317080",
    "end": "1322520"
  },
  {
    "text": "submit this order and the order was received and immediately you can start seeing that the the other service which",
    "start": "1322520",
    "end": "1328320"
  },
  {
    "text": "is subscribing to the notifications is now uh getting those notifications that we received the order we reserve the",
    "start": "1328320",
    "end": "1334320"
  },
  {
    "text": "inventory H we're waiting for the approval because it exceeded our threshold so that means we need to do the manual approval now one thing that I",
    "start": "1334320",
    "end": "1341679"
  },
  {
    "text": "also want to show you here which I'll go ahead and maximize this uh for that let's see how do I get back my",
    "start": "1341679",
    "end": "1349960"
  },
  {
    "text": "uh here sorry okay another thing I want to show you is uh recover from infrastructure failures so I'm going to",
    "start": "1350240",
    "end": "1356919"
  },
  {
    "text": "actually control C this and now I have just shut down all of my processes and my microservice sort of simulating like",
    "start": "1356919",
    "end": "1363120"
  },
  {
    "text": "a data your data center outage or something like that so we can see in our UI that the connection is closed we've",
    "start": "1363120",
    "end": "1369360"
  },
  {
    "text": "lost connectivity everything is down um at some point though uh you know our Ops",
    "start": "1369360",
    "end": "1374440"
  },
  {
    "text": "team will come in they're going to get it all back and running again uh but you know what happened to our workflow right",
    "start": "1374440",
    "end": "1379679"
  },
  {
    "text": "it was in the middle of running waiting for approval you know will it be okay",
    "start": "1379679",
    "end": "1385000"
  },
  {
    "text": "and so connection is open uh so we know that uh you know our systems are up and",
    "start": "1385000",
    "end": "1390200"
  },
  {
    "text": "running again what I'm going to go ahead and do now is try to send a request that",
    "start": "1390200",
    "end": "1395919"
  },
  {
    "text": "is going to complete that approval process so I'm going to go ahead and send that uh we received it and what we",
    "start": "1395919",
    "end": "1404000"
  },
  {
    "text": "should see which we do is that the order wasn't approved uh the payment was",
    "start": "1404000",
    "end": "1409840"
  },
  {
    "text": "processed successfully um and it looks like there was an error submitting to the shipping",
    "start": "1409840",
    "end": "1415159"
  },
  {
    "text": "I think that's because maybe I I did it a little bit too fast um but anyways the the important takeaway here is that the",
    "start": "1415159",
    "end": "1422679"
  },
  {
    "text": "workflow was able to continue where it left off uh without sort of needing to",
    "start": "1422679",
    "end": "1427799"
  },
  {
    "text": "redo any of the previous steps which we can sort of see by checking on this notification service here so that's an a",
    "start": "1427799",
    "end": "1433600"
  },
  {
    "text": "very important capability of of the service last thing that I want to show you uh really quickly if I can find my",
    "start": "1433600",
    "end": "1441320"
  },
  {
    "text": "mouse pointer is uh we have distributed tracing uh that we support with workflows as well so if you need to go",
    "start": "1441320",
    "end": "1447840"
  },
  {
    "text": "and sort of debug and see what happened uh you can do that uh we have um a nice",
    "start": "1447840",
    "end": "1454159"
  },
  {
    "text": "display here in Zipkin which shows you first of all the full span of the workflow itself how long that it took uh",
    "start": "1454159",
    "end": "1460760"
  },
  {
    "text": "in this case 79 seconds and you can actually see of all those activities that it scheduled when did they run how",
    "start": "1460760",
    "end": "1467159"
  },
  {
    "text": "long did they run for sort of what was their status uh so on and so forth and even you can sort of dig in and see uh",
    "start": "1467159",
    "end": "1473960"
  },
  {
    "text": "you know some other details like okay it it failed uh doing the shipping step uh",
    "start": "1473960",
    "end": "1479120"
  },
  {
    "text": "but anyways uh you know so sort of that end to end distributed tracing transparency that you would hope to get",
    "start": "1479120",
    "end": "1485080"
  },
  {
    "text": "with a workflow system that's calling services uh you know the whole set of different microservices uh so anyways",
    "start": "1485080",
    "end": "1491720"
  },
  {
    "text": "that's what I wanted to show Mark I think I'll hand it back to you it's pretty incredible stuff workflow is",
    "start": "1491720",
    "end": "1499759"
  },
  {
    "text": "we are going to switch laptops here just a moment so we're just going to jump over here",
    "start": "1501799",
    "end": "1508440"
  },
  {
    "text": "okay I'll let you take your",
    "start": "1508440",
    "end": "1512278"
  },
  {
    "text": "phone is it the other side oh to",
    "start": "1519399",
    "end": "1523919"
  },
  {
    "text": "side and hopefully it should spring to",
    "start": "1526679",
    "end": "1532039"
  },
  {
    "text": "life there we go so yeah that's workflow workflow I mean you see how powerful is",
    "start": "1533159",
    "end": "1539279"
  },
  {
    "text": "especially combined with the other Dapper apis um let's dive in a little bit more here because I think another",
    "start": "1539279",
    "end": "1545520"
  },
  {
    "text": "incredible capability we added into Dappa runtime is another pattern if you",
    "start": "1545520",
    "end": "1551039"
  },
  {
    "text": "think of workflows around Saga we put also the outbox pattern and what is the outbox pattern the outbox pattern is a",
    "start": "1551039",
    "end": "1557399"
  },
  {
    "text": "comb combination of doing a transaction around a state save and also a message send so for example say you are saving",
    "start": "1557399",
    "end": "1564640"
  },
  {
    "text": "an orders uh or account information and then you want to tell another service to send an email you don't want to send an",
    "start": "1564640",
    "end": "1570480"
  },
  {
    "text": "email saying your account is being created and they not save it and you don't want to save it and not tell a person that their email wasn't sent so",
    "start": "1570480",
    "end": "1576039"
  },
  {
    "text": "you'd like those to be bound together under a single transaction that's exactly what the outo box pattern does",
    "start": "1576039",
    "end": "1581200"
  },
  {
    "text": "so for example in this case I can save my order into the database or my account information and then send a pub sub",
    "start": "1581200",
    "end": "1586799"
  },
  {
    "text": "message that sent to another emailing service and that tells you know my customer whoever it is that I have now",
    "start": "1586799",
    "end": "1593240"
  },
  {
    "text": "created your account and it's ready to go and you want them to be consistent it turns out it's pretty hard to do in an",
    "start": "1593240",
    "end": "1599159"
  },
  {
    "text": "easy way so we're going to show how on any one of the 15 or 20 State stores",
    "start": "1599159",
    "end": "1605039"
  },
  {
    "text": "that we have inside Dapper runtime you can simply combine any one of the pubs of Brokers with any one of the state",
    "start": "1605039",
    "end": "1611399"
  },
  {
    "text": "stores to us to do the outbox pattern between them all and I'm going to do it between um red is pubsub for my message",
    "start": "1611399",
    "end": "1617880"
  },
  {
    "text": "broker and I'm going to do it from my SQL both running in my local machine to show you how you can put these two together so let me just switch over here",
    "start": "1617880",
    "end": "1625000"
  },
  {
    "text": "into vs studio so vs code so let me maximize",
    "start": "1625000",
    "end": "1630879"
  },
  {
    "text": "this okay so I've got two um uh Services here one one's an order processor",
    "start": "1633440",
    "end": "1639520"
  },
  {
    "text": "service which simply creates new orders inside um and it's going to save them",
    "start": "1639520",
    "end": "1644720"
  },
  {
    "text": "into a SQL store locally and all it does is it does uses a daap a client inside",
    "start": "1644720",
    "end": "1649880"
  },
  {
    "text": "here to execute a state transaction into my local SQL store and it just saves a",
    "start": "1649880",
    "end": "1655000"
  },
  {
    "text": "number of orders in fact I just do two orders inside this and then I have a um a order notification service all it's",
    "start": "1655000",
    "end": "1662279"
  },
  {
    "text": "doing is it's listening on the pubsub broker to orders um and it just publishes and I receive a notification",
    "start": "1662279",
    "end": "1668840"
  },
  {
    "text": "from my pubsub broker in this particular case my Stage store I'm saving into if I",
    "start": "1668840",
    "end": "1674679"
  },
  {
    "text": "return here you'll see I'm saving into my Dapper store now name here which is my SQL store and you know these",
    "start": "1674679",
    "end": "1681960"
  },
  {
    "text": "component model as we talked about at the beginning of this talk is defined here as a SQL state store and I kind of",
    "start": "1681960",
    "end": "1688519"
  },
  {
    "text": "have my connection string how to talk to it all but in order to take advantage of the outbox pattern I simply have to add",
    "start": "1688519",
    "end": "1694399"
  },
  {
    "text": "two metadata properties into my component manifest I simply have to say the order topic that I want to send on",
    "start": "1694399",
    "end": "1701080"
  },
  {
    "text": "through my pubs of broker and I want to say the name of my pubs of broker that I'm going to send it to so that means",
    "start": "1701080",
    "end": "1706799"
  },
  {
    "text": "anytime i s a state into the estate store and at the same time I want to send out a message through my broker",
    "start": "1706799",
    "end": "1712200"
  },
  {
    "text": "that combination will happen through the outbox pattern that's all you have to do and you just simply have to add these two here to any one of the 20 different",
    "start": "1712200",
    "end": "1720240"
  },
  {
    "text": "types of State stores that we have um and be able to take advantage inside you your Dapper run your your Dappa project",
    "start": "1720240",
    "end": "1727880"
  },
  {
    "text": "so let me uh put this together I too also have taken advantage of using Dappa",
    "start": "1727880",
    "end": "1732960"
  },
  {
    "text": "run command I'm going to show you first though if I look into my state store I don't have anything saved inside this so",
    "start": "1732960",
    "end": "1738559"
  },
  {
    "text": "this is looking at my local my SQL Stage store um so now what I'm going to do is I'm going to Simply run um and I've got",
    "start": "1738559",
    "end": "1745960"
  },
  {
    "text": "the Dapper run command inside here again combined into um two um microservices",
    "start": "1745960",
    "end": "1753240"
  },
  {
    "text": "are run together so if I run this you'll see that it'll run the order processor it'll create an order here it'll save it",
    "start": "1753240",
    "end": "1759519"
  },
  {
    "text": "into my local state state store and then you'll see that um notifications get",
    "start": "1759519",
    "end": "1765480"
  },
  {
    "text": "sent um and actually let me just check here that I put this into the right SQL state store and then the notifications",
    "start": "1765480",
    "end": "1771960"
  },
  {
    "text": "will get received inside my Pub sub broker which I don't think I've got run in this particular case so let me try it",
    "start": "1771960",
    "end": "1778519"
  },
  {
    "text": "one more time inside here so these are notes we've received okay and then you see the when I run this you'll see the",
    "start": "1778519",
    "end": "1784399"
  },
  {
    "text": "order notification received through my popsa broker combin them the two with my save so it's an incredible incredible",
    "start": "1784399",
    "end": "1791080"
  },
  {
    "text": "feature that you can simply do this on any one of the Brokers um and if you go back to my state store inside here",
    "start": "1791080",
    "end": "1797039"
  },
  {
    "text": "you'll you'll see now if I run the query inside here here's my two orders that were created and saved um and if I go",
    "start": "1797039",
    "end": "1803080"
  },
  {
    "text": "and look in my reddish um actually look into my reddish one which I don't have a viewer inside here you'll see that the",
    "start": "1803080",
    "end": "1809039"
  },
  {
    "text": "message that get sent through my reddish broker so incredibly powerful and these are sorts of things that we're doing",
    "start": "1809039",
    "end": "1814720"
  },
  {
    "text": "inside the Dapper project you know we're continually innovating to make sure that we bring very consumable easy to use",
    "start": "1814720",
    "end": "1823039"
  },
  {
    "text": "patterns to developers so that you can spend your time you know building great business code and not having to",
    "start": "1823039",
    "end": "1829039"
  },
  {
    "text": "implement common patterns like this that you should find and make them available for wherever you come from today you",
    "start": "1829039",
    "end": "1835440"
  },
  {
    "text": "know whatever language whatever framework that you're deciding to choose so where's Dappa going and",
    "start": "1835440",
    "end": "1841240"
  },
  {
    "text": "where's the road map of where we're looking for well we release Dapper every four months every three months we",
    "start": "1841240",
    "end": "1846720"
  },
  {
    "text": "release it four times a year every quarter we just did the 112 release um about a month ago that contained things",
    "start": "1846720",
    "end": "1853000"
  },
  {
    "text": "like the outbox pattern and then we have the 13 and the 14 release that will be coming you know middle early next year",
    "start": "1853000",
    "end": "1858840"
  },
  {
    "text": "and sometime you know in Spring of the year after that and there we're focusing a lot on getting things stable around",
    "start": "1858840",
    "end": "1864760"
  },
  {
    "text": "workflow and Pub sub bulk Pub sub which is in our Pub sub broker apis we're",
    "start": "1864760",
    "end": "1870480"
  },
  {
    "text": "looking at how we're going to introduce a distributed schedule API think of how how do I run KRON jobs on a regular",
    "start": "1870480",
    "end": "1875799"
  },
  {
    "text": "basis I want this thing to happen every day or every hour um turns out to be incredibly useful to be able to have an",
    "start": "1875799",
    "end": "1882039"
  },
  {
    "text": "API that schedules things on a regular basis an amazing features coming is the",
    "start": "1882039",
    "end": "1887240"
  },
  {
    "text": "hot reloading of components today when you change a component you have to restart your Dapper side car to pick up",
    "start": "1887240",
    "end": "1893519"
  },
  {
    "text": "any of those definitions we're having it so that if you change that component manifest and it'll automatically get",
    "start": "1893519",
    "end": "1898799"
  },
  {
    "text": "reloaded for you without your Dappa SE side car starting up which is in itself is a a huge feature which has been long",
    "start": "1898799",
    "end": "1906159"
  },
  {
    "text": "asked for uh so now you know you can keep your systems running and without and deploy new um components inside more",
    "start": "1906159",
    "end": "1913480"
  },
  {
    "text": "um another deployment model is you can run Dapper as a side car today that runs on the kuet as well per pod but there",
    "start": "1913480",
    "end": "1919399"
  },
  {
    "text": "are also circumstances where you want to run it on a per deployment side that means any number of instances of a",
    "start": "1919399",
    "end": "1924799"
  },
  {
    "text": "particular application can have a single deployment for adapa runtime for them so",
    "start": "1924799",
    "end": "1930200"
  },
  {
    "text": "that just allows different deployment models which is often asked for especially when there are some restrictions in your testing environment",
    "start": "1930200",
    "end": "1936480"
  },
  {
    "text": "or maybe some of your deployment environments and then finally you know we do a lot to make sure that sdks of",
    "start": "1936480",
    "end": "1941960"
  },
  {
    "text": "consistency between them and also having the idea that you can have Dappa running remotely that you can attach to over those",
    "start": "1941960",
    "end": "1947600"
  },
  {
    "text": "um over from your local SD from your SDK so those are some of the immediate things there's many many more other",
    "start": "1947600",
    "end": "1954080"
  },
  {
    "text": "features coming in s of those releases but as we look beyond that you know there's a lot of apis that we still take",
    "start": "1954080",
    "end": "1960200"
  },
  {
    "text": "to through to stabilization that we introduced over the last year around distributed lock and crypto apis we're",
    "start": "1960200",
    "end": "1967000"
  },
  {
    "text": "heavily into security um we've done amazing work today to give application identity through spiffy to each one of",
    "start": "1967000",
    "end": "1973480"
  },
  {
    "text": "the applications but we want to take and do more there in terms of deeper spiy integration and also integration with",
    "start": "1973480",
    "end": "1979279"
  },
  {
    "text": "search manager so you can bring in external search from external search search authorities um we are always",
    "start": "1979279",
    "end": "1986799"
  },
  {
    "text": "looking at improving the local developer experience you saw us saw multia run today that allows you to run multiple",
    "start": "1986799",
    "end": "1992080"
  },
  {
    "text": "services on your same machine how do we do things like local component validation more types of local",
    "start": "1992080",
    "end": "1998799"
  },
  {
    "text": "components and then generally inside the project we're very fanatical about because we do multi- deployment across",
    "start": "1998799",
    "end": "2004760"
  },
  {
    "text": "multic clouds and testing on multiple environments uh we focus a lot on testing not only of",
    "start": "2004760",
    "end": "2011519"
  },
  {
    "text": "the deployment models but also perf end to-end testing and making sure that you know we really have a stable resilient",
    "start": "2011519",
    "end": "2017880"
  },
  {
    "text": "system around them more and then I think one of the most exciting areas we've had a lot of asks for is State storage and",
    "start": "2017880",
    "end": "2025480"
  },
  {
    "text": "how you improve the types of patterns that it has you see today that we have key Value Store as a type of State",
    "start": "2025480",
    "end": "2032000"
  },
  {
    "text": "Storage but as we look towards other things that we can bring inside there document store type blob storage and",
    "start": "2032000",
    "end": "2038880"
  },
  {
    "text": "even SQL storage as general purpose apis so that you can you know have that abstraction layer over all types of",
    "start": "2038880",
    "end": "2045480"
  },
  {
    "text": "types of storage not just sort of key value storage so now you can have that component model over blob storage of",
    "start": "2045480",
    "end": "2050839"
  },
  {
    "text": "different clouds for example that I think is something that will really open up the different types of distributed or",
    "start": "2050839",
    "end": "2056040"
  },
  {
    "text": "stateful applications you're going to build and then beyond that um you know we are fanatical about getting Dappa",
    "start": "2056040",
    "end": "2062599"
  },
  {
    "text": "integrated with other things inside the ecosystem so we've worked really really really hard with other projects and if",
    "start": "2062599",
    "end": "2068839"
  },
  {
    "text": "you are a contributor or a maintainer of another project that you think has a Synergy with Dapper would love to hear",
    "start": "2068839",
    "end": "2075358"
  },
  {
    "text": "from you for example we've done a lot with test containers and V cluster and open function and crxs um and in",
    "start": "2075359",
    "end": "2081520"
  },
  {
    "text": "progress as I mentioned more integration with spiffy and certain manager but bringing K native functions together",
    "start": "2081520",
    "end": "2087079"
  },
  {
    "text": "with Dapper is an initiative we're working on and generally a lot of people have come to us and said you know Dapper",
    "start": "2087079",
    "end": "2093960"
  },
  {
    "text": "apis are becoming so um unique so specific and so well adopted",
    "start": "2093960",
    "end": "2101280"
  },
  {
    "text": "you would love to see sort of the General open API specification around all so that you may even have other",
    "start": "2101280",
    "end": "2106359"
  },
  {
    "text": "implementations of them so please come and talk to us about you know how we can engage with you inside the other",
    "start": "2106359",
    "end": "2111480"
  },
  {
    "text": "ecosystems how we can get Dapper integrated as part of all of this you know I leave you with the fact that Dapper is about making developers happy",
    "start": "2111480",
    "end": "2118599"
  },
  {
    "text": "you know making you enjoy what you do not focus on the plumbing don't reinvent the pattern the pattern's been done for",
    "start": "2118599",
    "end": "2124640"
  },
  {
    "text": "you build your applications use the patterns that dapp gives for you and you know we' love for you to come and join",
    "start": "2124640",
    "end": "2130960"
  },
  {
    "text": "our 3,000 contributors our 7,000 Discord Community you can find a ton of other information side here in terms of how to",
    "start": "2130960",
    "end": "2137680"
  },
  {
    "text": "get started how to contribute we have Community calls twice a month that we",
    "start": "2137680",
    "end": "2143160"
  },
  {
    "text": "often look for having demos and deep engagement with the community and I'll just leave you with go off to our repo",
    "start": "2143160",
    "end": "2150040"
  },
  {
    "text": "where if you want to get a community supporter digital badge to show your excitement about the project scan this",
    "start": "2150040",
    "end": "2156000"
  },
  {
    "text": "put it inside your G have repo it kind of shows how you support the project so with that thank you very much",
    "start": "2156000",
    "end": "2163078"
  },
  {
    "text": "today",
    "start": "2164960",
    "end": "2167960"
  }
]