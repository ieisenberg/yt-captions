[
  {
    "text": "hey thanks everybody for uh joining us at uh 5:25 on uh on uh Thursday I guess",
    "start": "40",
    "end": "5839"
  },
  {
    "text": "it's good to see you're still awake um we've got a pretty exciting session for you today you can read the title here um",
    "start": "5839",
    "end": "11440"
  },
  {
    "text": "we'll introduce ourselves in a second but we just wanted to start out with a few questions hopefully we can click it",
    "start": "11440",
    "end": "17480"
  },
  {
    "text": "to it that way maybe we have there I have a",
    "start": "17480",
    "end": "23840"
  },
  {
    "text": "I have my new manual clicker um how many people here hopefully you're here for this are running databases on kubernetes",
    "start": "23840",
    "end": "31399"
  },
  {
    "text": "today awesome and then on the next one of course if you'll be interested how",
    "start": "31399",
    "end": "37520"
  },
  {
    "text": "many of you are actually running postgress on kubernetes today I guess that's why you're here because that's",
    "start": "37520",
    "end": "43000"
  },
  {
    "text": "what this talk is about um all right so what are we going to sort of cover today uh there's a couple of interesting ways",
    "start": "43000",
    "end": "48320"
  },
  {
    "text": "of deploying postgress um so we're want to talk about how do we actually scale postgress and some of the cool things we",
    "start": "48320",
    "end": "54000"
  },
  {
    "text": "do kubernetes so how can I deal with like a single primary deployment how do I scale that right many people may think",
    "start": "54000",
    "end": "60480"
  },
  {
    "text": "just add more replicas um so that's going to be the key thing and then the second part we're going to talk about is just in general",
    "start": "60480",
    "end": "67200"
  },
  {
    "text": "how do we scale these sort of databases now who are we uh my name's uh",
    "start": "67200",
    "end": "73680"
  },
  {
    "text": "Gary Singh I uh I don't describe myself very much because I'm very secretive so I'm just a product manager at Google and",
    "start": "73680",
    "end": "80240"
  },
  {
    "text": "I'm going to pass it over to Gabriella who is much cooler than me thank you Gary let's see if this",
    "start": "80240",
    "end": "87600"
  },
  {
    "text": "works I don't see yeah it doesn't work so need to stay here yeah it's okay I'll",
    "start": "87600",
    "end": "93159"
  },
  {
    "text": "stay here that's okay so I'm Gabriel bini I'm vice president of cloud and",
    "start": "93159",
    "end": "100640"
  },
  {
    "text": "kubernetes ATB and uh I I don't know I mean this is kind of a dream for me you",
    "start": "100640",
    "end": "106799"
  },
  {
    "text": "know I've been using pgus for many many years uh since uh early 2000 I'm a pus",
    "start": "106799",
    "end": "113719"
  },
  {
    "text": "contributor I'm also data on kubernetes Ambassador and devops is actually what",
    "start": "113719",
    "end": "120280"
  },
  {
    "text": "led me to kubernetes and my first Cube con was in 2019 and I was with Marco was here with",
    "start": "120280",
    "end": "127600"
  },
  {
    "text": "me one of the maintainers and we started to think about these operator for Posas",
    "start": "127600",
    "end": "132920"
  },
  {
    "text": "using local storage you know like we had it been done for many years outside",
    "start": "132920",
    "end": "138519"
  },
  {
    "text": "kubernetes and people thought we were crazy so I'm really happy to be here today you know after this journey that's",
    "start": "138519",
    "end": "146080"
  },
  {
    "text": "when Cloud native PG basically was born there was August 20 2019 so and I'm a",
    "start": "146080",
    "end": "152760"
  },
  {
    "text": "proud co-founder and maintainer of cloud npg and previously I don't know if you're familiar with uh pogus how many",
    "start": "152760",
    "end": "159040"
  },
  {
    "text": "of you need know Barman okay I'm the one that came with",
    "start": "159040",
    "end": "164840"
  },
  {
    "text": "the came up with the name and you know and uh again with Marco I'm one of the",
    "start": "164840",
    "end": "172519"
  },
  {
    "text": "creators of this project and we put basically all the experience we did with Barman we've put it in Cloud PG as well",
    "start": "172519",
    "end": "179560"
  },
  {
    "text": "as the the experience we we gained with rep manager of which I was one of the",
    "start": "179560",
    "end": "184680"
  },
  {
    "text": "early developers that's what we've put inside so the agenda for today is uh",
    "start": "184680",
    "end": "190400"
  },
  {
    "text": "we'll introduce vertical scalability with Posas first and then how to manage",
    "start": "190400",
    "end": "195599"
  },
  {
    "text": "pogress in kubernetes with cloud npg and then show some techniques to vertically",
    "start": "195599",
    "end": "200959"
  },
  {
    "text": "scale pogress through storage uh then with with Gary we'll",
    "start": "200959",
    "end": "206720"
  },
  {
    "text": "show some Benchmark results and uh we we'll will'll uh finish with the",
    "start": "206720",
    "end": "213040"
  },
  {
    "text": "takeaways so pgus has recently uh received significant recognition and",
    "start": "213040",
    "end": "218720"
  },
  {
    "text": "it's been named database of the Year by DB engines and it's also holding the top",
    "start": "218720",
    "end": "224400"
  },
  {
    "text": "spot as the most popular database management system according to stack",
    "start": "224400",
    "end": "229560"
  },
  {
    "text": "overflows uh lasest survey in my opinion a key factor for this you know pogus",
    "start": "229560",
    "end": "236920"
  },
  {
    "text": "success is a foundational feature that pgus has had from day one",
    "start": "236920",
    "end": "243159"
  },
  {
    "text": "extensibility so uh with extensibility we can basically tailor our database",
    "start": "243159",
    "end": "248840"
  },
  {
    "text": "using uh data types that we create or or functions that use these data types so",
    "start": "248840",
    "end": "255920"
  },
  {
    "text": "basically what I've seen in you know real life over the years is that pogus",
    "start": "255920",
    "end": "261680"
  },
  {
    "text": "has continu continuously evolved and it's learned from all the Technologies",
    "start": "261680",
    "end": "267199"
  },
  {
    "text": "from different domains that were were r ing throughout you know these two three",
    "start": "267199",
    "end": "273400"
  },
  {
    "text": "decades um and the constant has been SQL",
    "start": "273400",
    "end": "278440"
  },
  {
    "text": "so I've seen for example xtml coming up Json you can actually mix structured",
    "start": "278440",
    "end": "283800"
  },
  {
    "text": "data and structured data in pogress and extensions like postgis time scale and",
    "start": "283800",
    "end": "290039"
  },
  {
    "text": "the latest addition PG Vector that H keeps Posas at the Forefront of",
    "start": "290039",
    "end": "297639"
  },
  {
    "text": "innovation so given the increase ing demand for AI and analytics workloads",
    "start": "297639",
    "end": "303960"
  },
  {
    "text": "our Focus today I had to put AI sorry okay our Focus today is to offer",
    "start": "303960",
    "end": "309600"
  },
  {
    "text": "insights on uh how to enhance pogus databases um to cover these critical use",
    "start": "309600",
    "end": "317039"
  },
  {
    "text": "cases okay so the idea for us today is to bring as much data as we can to to",
    "start": "317039",
    "end": "325560"
  },
  {
    "text": "um uh Ai workloads and Analytics so let's start with the",
    "start": "325560",
    "end": "331319"
  },
  {
    "text": "vertical scalability in the context of Fus so imagine this scenario you you are managing a kubernetes",
    "start": "331319",
    "end": "338000"
  },
  {
    "text": "node could be virtual uh virtual machine or physical doesn't matter this nod",
    "start": "338000",
    "end": "344120"
  },
  {
    "text": "comes equipped with uh uh its own set of resources CPU RAM and most",
    "start": "344120",
    "end": "351680"
  },
  {
    "text": "importantly uh Storage storage is the most critical uh component for a",
    "start": "351680",
    "end": "357520"
  },
  {
    "text": "database and I'm also talking about directly attach storage don't think that",
    "start": "357520",
    "end": "362639"
  },
  {
    "text": "in kubernetes you know storage is needs to be shared you can run bare metal uh",
    "start": "362639",
    "end": "368919"
  },
  {
    "text": "with locally attached dis you can do everything it's Pure Freedom so our",
    "start": "368919",
    "end": "374479"
  },
  {
    "text": "objective here is to fully maximize the potential of this single node within a",
    "start": "374479",
    "end": "380919"
  },
  {
    "text": "database uh framework and if necessarily upscale the",
    "start": "380919",
    "end": "387440"
  },
  {
    "text": "resources so uh this concept in database technology and also I mean",
    "start": "387440",
    "end": "393840"
  },
  {
    "text": "computer Computer Sciences is known as vertical scalability however when we",
    "start": "393840",
    "end": "399080"
  },
  {
    "text": "think about kubernetes the prevailing notion suggests that scaling a database",
    "start": "399080",
    "end": "404840"
  },
  {
    "text": "uh across um multiple nodes is actually simpler but that means coming to",
    "start": "404840",
    "end": "410720"
  },
  {
    "text": "compromises compromises in terms of consistency availability of performance",
    "start": "410720",
    "end": "415800"
  },
  {
    "text": "for example but do we really need that so this is this is kind of the question",
    "start": "415800",
    "end": "421120"
  },
  {
    "text": "and this approach is referred to as horizontal scalability um so in in any case today",
    "start": "421120",
    "end": "430360"
  },
  {
    "text": "we focus on vertical scalability and you can scale vertically",
    "start": "430360",
    "end": "436000"
  },
  {
    "text": "uh using all the resources of of a single node CPU Ram but today we'll",
    "start": "436000",
    "end": "442080"
  },
  {
    "text": "focus on storage so before we delve into uh the",
    "start": "442080",
    "end": "449759"
  },
  {
    "text": "the specific I want to quickly recap what cloud native PG uh does and some",
    "start": "449759",
    "end": "455280"
  },
  {
    "text": "you know a a reference architecture for running pogus in kubernetes if you want",
    "start": "455280",
    "end": "460680"
  },
  {
    "text": "to know more there's a QR code there you can scan it and you can get redirected",
    "start": "460680",
    "end": "466080"
  },
  {
    "text": "to a Blog article that I wrote uh in the cncf blog about the recommended architectures for pgus in in kubernetes",
    "start": "466080",
    "end": "474800"
  },
  {
    "text": "so today we'll mention this um architecture for a single cluster so I",
    "start": "474800",
    "end": "480000"
  },
  {
    "text": "mean we're talking about the free availability zone or plus uh kubernetes",
    "start": "480000",
    "end": "485120"
  },
  {
    "text": "cluster so it means that your single point of failure with just this setup is a region which is huge for a database",
    "start": "485120",
    "end": "492319"
  },
  {
    "text": "and kubernetes simplifies all the business continuity uh plans for you",
    "start": "492319",
    "end": "498400"
  },
  {
    "text": "okay thanks to this self feeling and high availability approach and the what I'm going to show",
    "start": "498400",
    "end": "504479"
  },
  {
    "text": "you is um is is provide very uh High",
    "start": "504479",
    "end": "510919"
  },
  {
    "text": "results in terms of recovery time objective and Recovery uh Point",
    "start": "510919",
    "end": "516039"
  },
  {
    "text": "objective RTO and RTO so we have three availability zones with one worker node",
    "start": "516039",
    "end": "522080"
  },
  {
    "text": "dedicated for Posas in each availability zone so we position the primary for",
    "start": "522080",
    "end": "528360"
  },
  {
    "text": "Posas in one worker node and it comes with its PG Dasa persistent volume PG",
    "start": "528360",
    "end": "534040"
  },
  {
    "text": "data is where by default all posg files are located and if we want to we can add",
    "start": "534040",
    "end": "539600"
  },
  {
    "text": "another volume to separate transactional logs uh in another volume and then also",
    "start": "539600",
    "end": "545079"
  },
  {
    "text": "use table spaces which are a way to and we'll see it to to to uh um add more",
    "start": "545079",
    "end": "552480"
  },
  {
    "text": "more space for POS we can use uh Native streaming replication for Posas with",
    "start": "552480",
    "end": "558000"
  },
  {
    "text": "synchronous standby synchronous replication so you have a synchronous standby and a potentially synchronous",
    "start": "558000",
    "end": "563600"
  },
  {
    "text": "one then we provide a read bright service and the read only service to access the standby",
    "start": "563600",
    "end": "569880"
  },
  {
    "text": "so this is by default the architecture you get out of a very basic U cluster in",
    "start": "569880",
    "end": "577279"
  },
  {
    "text": "in clpg in any case today we will focus on on",
    "start": "577279",
    "end": "583800"
  },
  {
    "text": "this so what we'll try to do is that",
    "start": "583800",
    "end": "589040"
  },
  {
    "text": "uh we we're trying to adopt a scientific approach here today and uh you have to",
    "start": "589040",
    "end": "594839"
  },
  {
    "text": "understand that your organization is unique so you have your unique people your unique uh um systems your unique",
    "start": "594839",
    "end": "602440"
  },
  {
    "text": "data and the idea is that you can only choose through a scien scientific",
    "start": "602440",
    "end": "608839"
  },
  {
    "text": "approach and let your basically let data dri drive your decisions so the idea",
    "start": "608839",
    "end": "614959"
  },
  {
    "text": "here is to Benchmark Benchmark and Benchmark not only the database but the",
    "start": "614959",
    "end": "620920"
  },
  {
    "text": "storage so at the end we will provide um some results so now",
    "start": "620920",
    "end": "626160"
  },
  {
    "text": "it's your turn Gary back back to me um yeah so now let's talk a little bit",
    "start": "626160",
    "end": "631320"
  },
  {
    "text": "about how many people here are familiar with Cloud native PG man this's a good there's a good",
    "start": "631320",
    "end": "636480"
  },
  {
    "text": "audience all right well cool you got the next one oh yeah so just for those who may not be um Cloud native PG it's a",
    "start": "636480",
    "end": "642959"
  },
  {
    "text": "level five production ready kubernetes operator uh which is fantastic um it's already in use in a number of places",
    "start": "642959",
    "end": "649160"
  },
  {
    "text": "obviously from edb's big animal uh at IBM's Cloud pack we have uh in a Google marketplace Tempo uh you can read you",
    "start": "649160",
    "end": "656600"
  },
  {
    "text": "can read all the chart but you know fully open source V neutral uh created by EDB it's great um uh for working on",
    "start": "656600",
    "end": "663959"
  },
  {
    "text": "that multiple deployment options straight from a manifest for those who love to use whatever your G Ops tool might be is this working again we'll see",
    "start": "663959",
    "end": "670560"
  },
  {
    "text": "we try yeah we'll try again and uh you know as well as uh oh from from operator Hub and you already saw the kind of the",
    "start": "670560",
    "end": "677600"
  },
  {
    "text": "results on this um super popularity in 2023 how many stars we have 3,000 stars",
    "start": "677600",
    "end": "683600"
  },
  {
    "text": "on this already so um this is great you can check out the uh the link there down at the bottom if you want to capture",
    "start": "683600",
    "end": "688880"
  },
  {
    "text": "that it's not working not working we tried",
    "start": "688880",
    "end": "694920"
  },
  {
    "text": "the uh the really nice thing um being the fact that I am a love kubernetes",
    "start": "694920",
    "end": "700120"
  },
  {
    "text": "right this is like the simplest version of the cluster resource um I'm sure you've all seen kubernetes manifest but",
    "start": "700120",
    "end": "705920"
  },
  {
    "text": "um this is super simple to get you know up and running right I mean how many people have seen you know tried to do stateful set stuff themselves and",
    "start": "705920",
    "end": "712760"
  },
  {
    "text": "configure everything themselves um and then obviously we can move to the sort of an operator model um this is pretty",
    "start": "712760",
    "end": "718480"
  },
  {
    "text": "nice right right we basically just say I want a cluster want to name it how many replicas do I want and storage obviously",
    "start": "718480",
    "end": "724639"
  },
  {
    "text": "we'll talk about some more configuration parameters um but that's you know about as easy as it gets right to get up and",
    "start": "724639",
    "end": "730079"
  },
  {
    "text": "running uh on the next chart guess we'll have to move that over",
    "start": "730079",
    "end": "735440"
  },
  {
    "text": "um I guess let me ask this question how many people are if I had a beard I would be a Gray beard that's why I shave it um",
    "start": "735440",
    "end": "742279"
  },
  {
    "text": "how many folks actually used to work with database in the days before we had kubernetes and",
    "start": "742279",
    "end": "747880"
  },
  {
    "text": "VMS yeah do you guys remember creating you know raid disc arrays mounting raw",
    "start": "747880",
    "end": "753720"
  },
  {
    "text": "volumes trying to figure out how to map everything for optimal rights and everything like that and that's a lot",
    "start": "753720",
    "end": "759560"
  },
  {
    "text": "what you might see from your dbas so how do we make that easier you know Gabriel said we can do we can mount whatever we",
    "start": "759560",
    "end": "765639"
  },
  {
    "text": "want on kubernetes nodes right um but can we make it much easier for you right",
    "start": "765639",
    "end": "771040"
  },
  {
    "text": "so obviously I'm sure everybody's familiar with Dynamic provisioning um you know this is great um with storage",
    "start": "771040",
    "end": "776480"
  },
  {
    "text": "classes we can have separate volumes right um and with this operator we're actually doing direct management of the",
    "start": "776480",
    "end": "781959"
  },
  {
    "text": "storage itself not having to deal in the instances themselves not having to deal necessarily with the stateful sets",
    "start": "781959",
    "end": "788240"
  },
  {
    "text": "obviously there's going to be some mandatory volume that must be created um and you'll see when we get to some of the performance testing just like you",
    "start": "788240",
    "end": "795079"
  },
  {
    "text": "used to you know have to optimize for where where you want your logs written where you want you know different uh",
    "start": "795079",
    "end": "800279"
  },
  {
    "text": "storage spaces um you can do this for the right ahead logs as Gabriel mentioned um and you can of course",
    "start": "800279",
    "end": "806240"
  },
  {
    "text": "divide things up into numbers of table spaces uh the beauty of this is too obviously under the covers we're leveraging all the I guess you call I",
    "start": "806240",
    "end": "813160"
  },
  {
    "text": "call kubernetes Magic um but again you can more easily configure this without having to do it yourself through just a",
    "start": "813160",
    "end": "819279"
  },
  {
    "text": "manifest definition from the from through the operator manifest here um as we cover there I think the other main",
    "start": "819279",
    "end": "826240"
  },
  {
    "text": "thing to to look at is you know learn a little bit the only thing you have to know is a little bit about what your CSI",
    "start": "826240",
    "end": "832199"
  },
  {
    "text": "provider does and what your actual storage you know your backing storage is right is it an SSD is it fast whatever",
    "start": "832199",
    "end": "838480"
  },
  {
    "text": "whatever may be going to have to use those characteristics and you'll see that that's why why testing becomes important on those because you may need",
    "start": "838480",
    "end": "844639"
  },
  {
    "text": "to look you know trade-offs between performance cost and efficiency um and of course we have the uh some of the",
    "start": "844639",
    "end": "851399"
  },
  {
    "text": "great work that's been done I think in kuber indes lately volume snapshots you get a lot of stuff for I'll call it for free um that's sort of in there which",
    "start": "851399",
    "end": "858240"
  },
  {
    "text": "makes it easy right because now we're just using native kubernetes volumes and we can just use snapshotting capabilities and and then there's",
    "start": "858240",
    "end": "864199"
  },
  {
    "text": "obviously there's other backup and Recovery Technologies as well that work in there uh it makes it super simple",
    "start": "864199",
    "end": "869320"
  },
  {
    "text": "yeah that's actually a very good point Gary it's about leveraging what kubernetes already provides this is kind",
    "start": "869320",
    "end": "875680"
  },
  {
    "text": "of one of the pillars of of clpg so thanks for yeah I think the um I mean we",
    "start": "875680",
    "end": "881160"
  },
  {
    "text": "we've seen you know I think just we won't go too much into it but there's many times where people try to figure out how to how do you map I guess you",
    "start": "881160",
    "end": "888519"
  },
  {
    "text": "know normal constructs to kubernetes constructs right I think kubernetes is evolved enough to actually support these",
    "start": "888519",
    "end": "894560"
  },
  {
    "text": "workloads and we have that sort of great mapping um and before Gabriella goes into uh some details on these things we",
    "start": "894560",
    "end": "900399"
  },
  {
    "text": "thought we just introduced some Concepts in case some of you weren't familiar with them uh the concept of table spaces",
    "start": "900399",
    "end": "905680"
  },
  {
    "text": "right these are sort of these Global objects that you can have in postgress um they're typically going to be used to how you might want to divide up volumes",
    "start": "905680",
    "end": "912519"
  },
  {
    "text": "typically like on on the simplest version they'll map to either you know a directory or it could be an actual you know raw disc or whatever you know on",
    "start": "912519",
    "end": "919560"
  },
  {
    "text": "there um the typical use cases for these obviously store temporary files divide up uh logs do things for separate discs",
    "start": "919560",
    "end": "926880"
  },
  {
    "text": "and as we said because basically dynamically provision class storage provider classes right are",
    "start": "926880",
    "end": "933279"
  },
  {
    "text": "typically going to create another dedicated disc in kubernetes hopefully that's the way you set things up you",
    "start": "933279",
    "end": "938600"
  },
  {
    "text": "know on Prem in the cloud that's typically how it works you create a new storage volume um it's typically going",
    "start": "938600",
    "end": "944440"
  },
  {
    "text": "to map to whatever a new solid state disc or persistent disc or whatever it may be but those are going to be dedicated to you with multiple things",
    "start": "944440",
    "end": "950639"
  },
  {
    "text": "mounted to your actual underlying nodes um and this is beautiful um and we'll talk about how to configure this uh",
    "start": "950639",
    "end": "957040"
  },
  {
    "text": "pretty simply with just a table space to stands right just add as many of those as you want and I think you're",
    "start": "957040",
    "end": "962519"
  },
  {
    "text": "next yeah so thanks Gary so now we'll start exploring some techniques so if",
    "start": "962519",
    "end": "968000"
  },
  {
    "text": "you've been using pus outside kubernetes this is all stuff you know this is stuff",
    "start": "968000",
    "end": "973600"
  },
  {
    "text": "we've been doing for many many years and I love the fact that now we kind there's",
    "start": "973600",
    "end": "978920"
  },
  {
    "text": "a new wave of of us explaining this stuff you know so uh this section bywise",
    "start": "978920",
    "end": "985639"
  },
  {
    "text": "the Cornerstone of of of this pre presentation so the previous slide uh",
    "start": "985639",
    "end": "991480"
  },
  {
    "text": "Gary told you about how Cloud native PG um offers a simp simless approach to",
    "start": "991480",
    "end": "998279"
  },
  {
    "text": "scaling at the storage level so we can create additional volumes for walls and also table spaces so you've got",
    "start": "998279",
    "end": "1005560"
  },
  {
    "text": "flexibility here you can customize storage classes and also optimize cost efficiency and iio bandwidth uh for",
    "start": "1005560",
    "end": "1014240"
  },
  {
    "text": "specific volume purposes so also the fact that kubernetes is working through annotation",
    "start": "1014240",
    "end": "1019480"
  },
  {
    "text": "to control bandwidth and and optim optimize the specific volumes is great",
    "start": "1019480",
    "end": "1027480"
  },
  {
    "text": "because for us it's just adding one one annotation in the configuration so",
    "start": "1027480",
    "end": "1033160"
  },
  {
    "text": "volumes can be added to uh live clusters and they can also be resized if the",
    "start": "1033160",
    "end": "1038558"
  },
  {
    "text": "storage class supports it and uh this this basically gives us U tremendous",
    "start": "1038559",
    "end": "1044959"
  },
  {
    "text": "adaptability and and scalability in in case you know we need we need to grow so",
    "start": "1044959",
    "end": "1051120"
  },
  {
    "text": "um just to recap the primary advantages of scaling with volumes it's not just",
    "start": "1051120",
    "end": "1057160"
  },
  {
    "text": "performance isolation but also predictability of performance this is very important to know what's what you",
    "start": "1057160",
    "end": "1064360"
  },
  {
    "text": "can expect from from from your uh storage and also distribute uh uh",
    "start": "1064360",
    "end": "1069440"
  },
  {
    "text": "queries across multiple volumes and also simplify and make more more efficient",
    "start": "1069440",
    "end": "1076200"
  },
  {
    "text": "database operations like vacuum or index indexing or reindexing",
    "start": "1076200",
    "end": "1082960"
  },
  {
    "text": "so the the lovely way of doing this in clpg is that you just need to add two",
    "start": "1082960",
    "end": "1088919"
  },
  {
    "text": "lines and basically here we say to to to clown PG create a new volume for walls",
    "start": "1088919",
    "end": "1095679"
  },
  {
    "text": "and using the default storage class and here is how you add basically",
    "start": "1095679",
    "end": "1101799"
  },
  {
    "text": "a temporary table space so a temporary table space called TM",
    "start": "1101799",
    "end": "1107480"
  },
  {
    "text": "ptbs and basically we are telling posg to add",
    "start": "1107480",
    "end": "1112679"
  },
  {
    "text": "this volume this this table space in the temp table spaces uh uh configuration",
    "start": "1112679",
    "end": "1119919"
  },
  {
    "text": "option of POS so the the operator does that transparently for for you you can add more so it's really",
    "start": "1119919",
    "end": "1128320"
  },
  {
    "text": "interesting and uh a widely used technique uh which is particularly",
    "start": "1128320",
    "end": "1134840"
  },
  {
    "text": "effective if your database is simple is uh to involve separating I/O for uh",
    "start": "1134840",
    "end": "1141360"
  },
  {
    "text": "operations for tables and indexes so in this uh very simple example we create two table spaces one called data and one",
    "start": "1141360",
    "end": "1149240"
  },
  {
    "text": "called idx and uh with the with the um SQL statements",
    "start": "1149240",
    "end": "1156919"
  },
  {
    "text": "on the right side we can create for example a table and say this table needs to be in the table space uh data and we",
    "start": "1156919",
    "end": "1164520"
  },
  {
    "text": "can also create indexes or constraints in general through the use using index table space uh um statement so all of",
    "start": "1164520",
    "end": "1173080"
  },
  {
    "text": "these really if you have large databases can can can",
    "start": "1173080",
    "end": "1178320"
  },
  {
    "text": "sorry the same Technique we we'll see it in larger databases but for simple databases this is already um performance",
    "start": "1178320",
    "end": "1188159"
  },
  {
    "text": "Improvement so let's try uh with a very simple example I probably you have uh",
    "start": "1188159",
    "end": "1193720"
  },
  {
    "text": "all dealt with uh uh web access logs and",
    "start": "1193720",
    "end": "1199080"
  },
  {
    "text": "this is an example of access log I will use the time stamp as uh you know our our um most important uh uh um Dimension",
    "start": "1199080",
    "end": "1209799"
  },
  {
    "text": "here and this is this isn't just Theory this is actually something that we my colleague Jonathan Gonzalez we've done",
    "start": "1209799",
    "end": "1217760"
  },
  {
    "text": "in the past and uh is a fluent bit maintainer as well and we we actually uh",
    "start": "1217760",
    "end": "1224120"
  },
  {
    "text": "use fluent bit to parts and store the this this table in pgus",
    "start": "1224120",
    "end": "1230440"
  },
  {
    "text": "so uh as time passes the fact table that I showed before expands it accumulates",
    "start": "1230440",
    "end": "1238240"
  },
  {
    "text": "every uh every month new data and so think about think about how frequently",
    "start": "1238240",
    "end": "1243600"
  },
  {
    "text": "you access um old or versus new data uh",
    "start": "1243600",
    "end": "1250320"
  },
  {
    "text": "so think about this access pattern is new a data typically accessed more often",
    "start": "1250320",
    "end": "1256320"
  },
  {
    "text": "so these are kind of questions we we need to ask yourselves also consider the scenario where the poest planner decides",
    "start": "1256320",
    "end": "1263880"
  },
  {
    "text": "that uh to retrieve a specific month it's actually faster to do a sequential",
    "start": "1263880",
    "end": "1269400"
  },
  {
    "text": "scan sequential Full Table scan and uh also what happens every time",
    "start": "1269400",
    "end": "1276200"
  },
  {
    "text": "you update or delete uh a record what happens to the to the index you are",
    "start": "1276200",
    "end": "1281440"
  },
  {
    "text": "sharing the same index with all the records of the table or when you need to remove an entire month so this is pretty",
    "start": "1281440",
    "end": "1289039"
  },
  {
    "text": "M pretty much the main cause of bloat uh of your pogus database when you",
    "start": "1289039",
    "end": "1295520"
  },
  {
    "text": "remove uh a lot of data like that so the database over time becomes less and less",
    "start": "1295520",
    "end": "1301360"
  },
  {
    "text": "effic efficient so this cannot scale so the solution uh to this common",
    "start": "1301360",
    "end": "1307720"
  },
  {
    "text": "problem is uh known in the database um industry as horizontal table",
    "start": "1307720",
    "end": "1314520"
  },
  {
    "text": "partitioning so this is very common in data warehousing come from the data warehousing world and in general very",
    "start": "1314520",
    "end": "1321919"
  },
  {
    "text": "large database environments essentially this technique um involves slicing uh",
    "start": "1321919",
    "end": "1329200"
  },
  {
    "text": "table records horizontally and spreading them across different",
    "start": "1329200",
    "end": "1334919"
  },
  {
    "text": "tables these tables are known as partitions so basically what we do is we",
    "start": "1334919",
    "end": "1340760"
  },
  {
    "text": "create this kind of abstract table called uh partition table from which we",
    "start": "1340760",
    "end": "1347720"
  },
  {
    "text": "derive the the the concrete tables that are the the partitions so basically each",
    "start": "1347720",
    "end": "1353520"
  },
  {
    "text": "month resides in its own table and uh with with its own indexes so over time",
    "start": "1353520",
    "end": "1360039"
  },
  {
    "text": "these tables become pretty much uh uh read only and maybe they're less",
    "start": "1360039",
    "end": "1366720"
  },
  {
    "text": "frequently accessed so the the indexes don't need any more",
    "start": "1366720",
    "end": "1373120"
  },
  {
    "text": "updates so the cool thing is that uh partitioning can also be comp combined",
    "start": "1373120",
    "end": "1379200"
  },
  {
    "text": "with table spaces allowing all the data to be moved to to to cheaper storage so",
    "start": "1379200",
    "end": "1385200"
  },
  {
    "text": "essentially the partition uh partitions are kind of a first level index so that",
    "start": "1385200",
    "end": "1393200"
  },
  {
    "text": "routing of of of inserts and queries is more more efficient and uh um retrieving",
    "start": "1393200",
    "end": "1399720"
  },
  {
    "text": "for example the data of a whole month is much faster than than before uh if you want to remove a whole",
    "start": "1399720",
    "end": "1406760"
  },
  {
    "text": "d a whole month of data you see simply drop drop the table so you don't have to update any more",
    "start": "1406760",
    "end": "1413120"
  },
  {
    "text": "indexes uh the cool thing is that out of the box POS Open Source comes with all",
    "start": "1413120",
    "end": "1418600"
  },
  {
    "text": "this stuff and that um you can actually achieve partitioning by range list hash",
    "start": "1418600",
    "end": "1425600"
  },
  {
    "text": "and also have sub partitioning anyway declarative uh partitioning is a complex topic you can",
    "start": "1425600",
    "end": "1432760"
  },
  {
    "text": "study more by yourself I'll give you an example here on how to Partition by rank",
    "start": "1432760",
    "end": "1438440"
  },
  {
    "text": "range using the time stamp this is the partition table and this is how you create partitions this all through",
    "start": "1438440",
    "end": "1447320"
  },
  {
    "text": "SQL and this is how you can for example put the current data in uh fast uh table",
    "start": "1447559",
    "end": "1455679"
  },
  {
    "text": "space fast volume and progressively move all data in cheaper storage and and uh",
    "start": "1455679",
    "end": "1462720"
  },
  {
    "text": "and basically achieve uh optimization of cost and and performance this is how you",
    "start": "1462720",
    "end": "1468600"
  },
  {
    "text": "can set the table space by the ways I shown before don't worry you can alter",
    "start": "1468600",
    "end": "1474240"
  },
  {
    "text": "uh the table at the later time and move the the data in in another uh uh table",
    "start": "1474240",
    "end": "1480200"
  },
  {
    "text": "space now the cool stuff yeah this is pretty cool the uh maybe you won't uh so",
    "start": "1480200",
    "end": "1487320"
  },
  {
    "text": "you know we mentioned that well Gabriel mentioned that uh we really have to you know think about benchmarking things for",
    "start": "1487320",
    "end": "1492440"
  },
  {
    "text": "you know your specific workloads and things like that um before we start talking about obviously doing these",
    "start": "1492440",
    "end": "1497520"
  },
  {
    "text": "repeatable benchmarks text tests I'll just go back and highlight and again I said I mean I love kubernetes so I",
    "start": "1497520",
    "end": "1502799"
  },
  {
    "text": "always will throw throw the value back in there um I think it's super simple is my my technical term to iterate on this",
    "start": "1502799",
    "end": "1509520"
  },
  {
    "text": "stuff right because as we showed to change how you configure things it's simply simple stands those are Fields",
    "start": "1509520",
    "end": "1515279"
  },
  {
    "text": "right within the within your um within your crd right so if you want to try if",
    "start": "1515279",
    "end": "1520559"
  },
  {
    "text": "I want to do a right am I going to have put the wall separately right am I going to do table spaces right you can continue to iterate on this stuff and",
    "start": "1520559",
    "end": "1526799"
  },
  {
    "text": "especially in cloud cloud envir irirs uh it's much easier right you don't have to worry about where that storage is mounted so it makes it very easy to",
    "start": "1526799",
    "end": "1533240"
  },
  {
    "text": "itely test and try out these different scenarios so obviously you know the key things here start small right uh start",
    "start": "1533240",
    "end": "1540880"
  },
  {
    "text": "with kind of a single instance of a cluster uh which makes sense right um this is pretty cool there's a tool PG",
    "start": "1540880",
    "end": "1547120"
  },
  {
    "text": "bench uh I think the link down there talks more about running this yourself and how to use this Tool uh but this",
    "start": "1547120",
    "end": "1552279"
  },
  {
    "text": "makes this easy to reproduce even the results that we'll show in the next one um the other key thing in your test",
    "start": "1552279",
    "end": "1558760"
  },
  {
    "text": "so you don't skew your results uh recommendation was 4X the size of memory so that you're actually forcing checking",
    "start": "1558760",
    "end": "1564919"
  },
  {
    "text": "your actual disc performance and not checking your memory and caching performance um and the beauty of this is with this link down below again to rerun",
    "start": "1564919",
    "end": "1571559"
  },
  {
    "text": "this anybody can run set up and run your test on a kubernetes environment your own anywhere in the cloud uh so on the",
    "start": "1571559",
    "end": "1577679"
  },
  {
    "text": "next slide I think we'll talk about the uh simple base specifications here we're going small um note you know these",
    "start": "1577679",
    "end": "1585200"
  },
  {
    "text": "aren't the this is nothing small I just one of call that out I know Gabrielle will get mad at me",
    "start": "1585200",
    "end": "1592039"
  },
  {
    "text": "1.5 is n yeah I mean postgress can do whatever needs to do um we're going to",
    "start": "1592039",
    "end": "1598159"
  },
  {
    "text": "do a p this bench oltp processing here um again here was the sort of size right I won't read it all out but you know",
    "start": "1598159",
    "end": "1604279"
  },
  {
    "text": "4500 66 gigs I'll do 16 clients uh and a simple sort of sort of round tripping uh",
    "start": "1604279",
    "end": "1611200"
  },
  {
    "text": "and then on the next one I think we talk about what were the scenarios that we tested so we wanted to try out a few of",
    "start": "1611200",
    "end": "1617679"
  },
  {
    "text": "the various like techniques that are in there do we just do a single volume what's our sort of performance look like",
    "start": "1617679",
    "end": "1623240"
  },
  {
    "text": "that probably call that your Baseline do we dedicated volume for the right ahead logs do we look at table spaces for data",
    "start": "1623240",
    "end": "1631240"
  },
  {
    "text": "and then do we do even do uh for the for the indexes sorry and then do we actually do the the last one that was",
    "start": "1631240",
    "end": "1636279"
  },
  {
    "text": "shown which was sort of uh partition the data and have table spaces there the results are um pretty interesting in",
    "start": "1636279",
    "end": "1642880"
  },
  {
    "text": "this particular case um maybe they're not as you know surprising obviously uh",
    "start": "1642880",
    "end": "1648679"
  },
  {
    "text": "scenario 2 which you can see sort of highlighted um worked well in three you",
    "start": "1648679",
    "end": "1654960"
  },
  {
    "text": "know I guess three scenarios really um sort of a bare metal scenario uh there were two on uh on Google um and that's",
    "start": "1654960",
    "end": "1661120"
  },
  {
    "text": "just because we have you know between us and Amazon and other ones everybody has different storage and different storage",
    "start": "1661120",
    "end": "1666320"
  },
  {
    "text": "classes and different backing scenario two as you remember was separa in the right ahead log out which typically",
    "start": "1666320",
    "end": "1672000"
  },
  {
    "text": "would make sense right but the performance is pretty significant right and then as a small thing we even ran",
    "start": "1672000",
    "end": "1677320"
  },
  {
    "text": "two tests in Google um which was using just standard PD or SSD uh maybe the difference here on SSD",
    "start": "1677320",
    "end": "1683960"
  },
  {
    "text": "and PD at this scale wasn't like significant enough that maybe you'll decide hey it's good enough for me and I'm not going to pay the extra cost um",
    "start": "1683960",
    "end": "1690200"
  },
  {
    "text": "but still a pretty good things yeah and we also have to remember that we just using 1.5 cores okay so this is really",
    "start": "1690200",
    "end": "1698519"
  },
  {
    "text": "so if you if you scale with the CPU results could be could better you know but yeah yeah",
    "start": "1698519",
    "end": "1705480"
  },
  {
    "text": "we're not going to have parallel rights to dis and things like like that right if you're you're still use you're still Contex sharing the same CPU but then the",
    "start": "1705480",
    "end": "1712279"
  },
  {
    "text": "other interesting result was that it turns out that in the eks case for example uh scenario 3 was actually",
    "start": "1712279",
    "end": "1718080"
  },
  {
    "text": "better right in terms of it's improving it oh that was the biggest Improvement for it so I guess the the tldr is you",
    "start": "1718080",
    "end": "1724840"
  },
  {
    "text": "know kind of test in your environment and where you are right but again it's fairly simple we just use the same test",
    "start": "1724840",
    "end": "1730640"
  },
  {
    "text": "here to run this you know on these same cluster spin them up in this environments take your configs deploy it",
    "start": "1730640",
    "end": "1736080"
  },
  {
    "text": "uh and you're ready to go then people that have done also tests on Raspberry pies and you know 250 transaction per",
    "start": "1736080",
    "end": "1745519"
  },
  {
    "text": "se I like that um the key outcome here I kind of I always get ahead of myself um",
    "start": "1745519",
    "end": "1751279"
  },
  {
    "text": "but that's that's fine um in this particular case uh PG data and the right ahead logs you can see the improvements",
    "start": "1751279",
    "end": "1756760"
  },
  {
    "text": "that we saw uh also depending on which sort of disc type we used um again we uh",
    "start": "1756760",
    "end": "1762799"
  },
  {
    "text": "Gabriella highlighted that this is only 1.5 core so it's kind of uh maybe won't test as much if if we were separating",
    "start": "1762799",
    "end": "1769399"
  },
  {
    "text": "out in partitioning by table spaces but there was still improvement over the Baseline it's just that it wasn't as",
    "start": "1769399",
    "end": "1775480"
  },
  {
    "text": "insignificant as the Improvement as wall was in this particular case um and again storage capabilities are important right",
    "start": "1775480",
    "end": "1783799"
  },
  {
    "text": "um but I'll just leave it with it's really nice to be able to just run these tests kind of quickly right it doesn't",
    "start": "1783799",
    "end": "1789120"
  },
  {
    "text": "take much to set this up kubernetes cluster is up and running you can pick your default storage classes you can",
    "start": "1789120",
    "end": "1794360"
  },
  {
    "text": "specify your storage classes and then you can specify how you want to divide things up pass it over yeah and I want thank",
    "start": "1794360",
    "end": "1801679"
  },
  {
    "text": "people so the good story about this is that from now we can actually uh everyone can test this stuff and I want",
    "start": "1801679",
    "end": "1807640"
  },
  {
    "text": "to test uh the people here for having helped me uh produce this this Benchmark",
    "start": "1807640",
    "end": "1814120"
  },
  {
    "text": "and as I was saying we're just uh scrapping the surface now so this is an",
    "start": "1814120",
    "end": "1819519"
  },
  {
    "text": "unexported territory for everyone this is just for example a slide that Sagi uh",
    "start": "1819519",
    "end": "1824799"
  },
  {
    "text": "from light bits did using uh TCP nvme over TCP and this is just basic",
    "start": "1824799",
    "end": "1832640"
  },
  {
    "text": "performance okay this this is just the starting point we're talking about 15,000 transaction per second okay to",
    "start": "1832640",
    "end": "1840159"
  },
  {
    "text": "start with okay um so conclusions um we cover this four um",
    "start": "1840159",
    "end": "1848360"
  },
  {
    "text": "four primary uh sections and uh so lesson learned today is that storage I",
    "start": "1848360",
    "end": "1856240"
  },
  {
    "text": "hope you understand it's the is the most critical part for a database in vertical",
    "start": "1856240",
    "end": "1861960"
  },
  {
    "text": "scalability but do your benchmarks know your goals so know your goals in terms",
    "start": "1861960",
    "end": "1868240"
  },
  {
    "text": "of RTO RPO don't forget that you have to back up and restore and you have to",
    "start": "1868240",
    "end": "1873960"
  },
  {
    "text": "ensure ey availability so all of this is included in this okay so pgus I hope you",
    "start": "1873960",
    "end": "1881000"
  },
  {
    "text": "saw today can scale up uh through volumes my recommendation is to use shared nothing architectures so maybe",
    "start": "1881000",
    "end": "1889120"
  },
  {
    "text": "consider uh placing Posas in nodes separated from applications but running",
    "start": "1889120",
    "end": "1895320"
  },
  {
    "text": "in the same kubernetes clusters and uh there's no one size fits",
    "start": "1895320",
    "end": "1900480"
  },
  {
    "text": "all but that's also the good part that it's on you the work is on you because again your organization is unique so all",
    "start": "1900480",
    "end": "1908559"
  },
  {
    "text": "all you have you you have an amazing set of Technologies in my opinion you've got kubernetes you've got",
    "start": "1908559",
    "end": "1914320"
  },
  {
    "text": "pogress and I I like to say you've got also Cloud native p now and you can",
    "start": "1914320",
    "end": "1920279"
  },
  {
    "text": "you're free to run it everywhere uh private public hybrid multicloud bare M",
    "start": "1920279",
    "end": "1927120"
  },
  {
    "text": "VMS and uh using local or network discs so uh last thing join uh our data on",
    "start": "1927120",
    "end": "1936200"
  },
  {
    "text": "kubernetes community if you want to know more about stateful workloads and also",
    "start": "1936200",
    "end": "1941240"
  },
  {
    "text": "the the cloud native PG uh community so thank",
    "start": "1941240",
    "end": "1948880"
  },
  {
    "text": "you and",
    "start": "1948880",
    "end": "1953960"
  },
  {
    "text": "questions are there any",
    "start": "1956600",
    "end": "1960278"
  },
  {
    "text": "questions think they I think they learned everything they needed to know today so and it's 6",
    "start": "1962480",
    "end": "1968639"
  },
  {
    "text": "o'clock hello I have a question about uh the backup and the fact that you split",
    "start": "1968639",
    "end": "1975760"
  },
  {
    "text": "the data into several volumes yeah if you do snapshot of dis you don't have a c cerence snapshot thank you for the",
    "start": "1975760",
    "end": "1984279"
  },
  {
    "text": "question okay so we we are pretty much one of the first operators in the",
    "start": "1984279",
    "end": "1989799"
  },
  {
    "text": "database space to support volume snapshot uh backups and Recovery I if",
    "start": "1989799",
    "end": "1995840"
  },
  {
    "text": "you can go to uh Cube Con in Chicago uh",
    "start": "1995840",
    "end": "2001240"
  },
  {
    "text": "you can watch the video that of the talk that I gave with Michelle from Google uh",
    "start": "2001240",
    "end": "2007200"
  },
  {
    "text": "it's called just a recovery about very very large databases in pgus I showed",
    "start": "2007200",
    "end": "2012320"
  },
  {
    "text": "how to uh restore uh a 4.5 terabyte database in two minutes two minutes okay",
    "start": "2012320",
    "end": "2021679"
  },
  {
    "text": "so the consistent is G is granted by the wall file so essentially when you take",
    "start": "2021679",
    "end": "2028240"
  },
  {
    "text": "uh when you start the backup procedure uh you take a snapshot of all the",
    "start": "2028240",
    "end": "2033760"
  },
  {
    "text": "volumes and we ensure that we copy also the the the the wall file at the start",
    "start": "2033760",
    "end": "2039399"
  },
  {
    "text": "of the backup and at the end of the backup okay the other way is that we also have a a way we call them cold",
    "start": "2039399",
    "end": "2047040"
  },
  {
    "text": "backups where you can actually uh take a backup from a standby we shut it down",
    "start": "2047040",
    "end": "2053839"
  },
  {
    "text": "temporarily and then you take basically cold snapshot so that's consistent by",
    "start": "2053839",
    "end": "2059638"
  },
  {
    "text": "default and we we spin it up so it's done automatically by the operator okay",
    "start": "2059639",
    "end": "2064800"
  },
  {
    "text": "what we're working on and I would like Leonardo to say stand up please Leonardo is actually working with TX storage to",
    "start": "2064800",
    "end": "2072960"
  },
  {
    "text": "implement the first uh operator supporting volume group snapshots in",
    "start": "2072960",
    "end": "2078800"
  },
  {
    "text": "kubernetes so kubernetes is working on on ensuring consistency of of multiple",
    "start": "2078800",
    "end": "2085398"
  },
  {
    "text": "volumes at the same time and we are the first kind of pioneers of of these",
    "start": "2085399",
    "end": "2091000"
  },
  {
    "text": "technology so we're really happy it's actually there's already a patch for that so but this is it's achieved so",
    "start": "2091000",
    "end": "2098640"
  },
  {
    "text": "it's it's pogress allows you to to to to to um basically exploit all of that you",
    "start": "2098640",
    "end": "2106440"
  },
  {
    "text": "know this is a technology that's been in pus for over almost 20 years so it's",
    "start": "2106440",
    "end": "2111560"
  },
  {
    "text": "very stable thank you for the",
    "start": "2111560",
    "end": "2117160"
  },
  {
    "text": "question no more questions okay thank you thanks",
    "start": "2117320",
    "end": "2125839"
  },
  {
    "text": "everybody",
    "start": "2125839",
    "end": "2128839"
  }
]