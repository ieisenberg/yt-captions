[
  {
    "start": "0",
    "end": "92000"
  },
  {
    "text": "alright are you prepared for the worst introduction to a talk ever you deserve",
    "start": "30",
    "end": "9750"
  },
  {
    "text": "this let's get ready to rootless there you go I was literally dead to start the talk",
    "start": "9750",
    "end": "16410"
  },
  {
    "text": "that way I always like I'm like I love this conference because this many people",
    "start": "16410",
    "end": "21539"
  },
  {
    "text": "have turned out to talk about rootless containers and the fact that this many people are interested in such a",
    "start": "21539",
    "end": "27390"
  },
  {
    "text": "low-level topic is absolutely amazing so thank you so much for coming let's get started so",
    "start": "27390",
    "end": "37370"
  },
  {
    "text": "alright that's not going to work so I am",
    "start": "37670",
    "end": "42840"
  },
  {
    "text": "dr. Jules I'm an IBM a-- i am the PM for garden which is cloud foundries",
    "start": "42840",
    "end": "49039"
  },
  {
    "text": "container engine there we go don't you",
    "start": "49039",
    "end": "55800"
  },
  {
    "text": "know technology my name is ed king I'm a software engineer working for pivotal all right so this tools is the roots of",
    "start": "55800",
    "end": "64140"
  },
  {
    "text": "rootless containers I need to be very clear for the jokes work that it is the route to rootless containers it is not",
    "start": "64140",
    "end": "70710"
  },
  {
    "text": "the route to route this containers as some of you may have been told I checked with the Queen earlier she's definitely",
    "start": "70710",
    "end": "76830"
  },
  {
    "text": "truth right and and of course we did have a few other talk title suggestions every talk has to have a good title so",
    "start": "76830",
    "end": "84840"
  },
  {
    "text": "this is Jules my name is Edie but I quite often go by the name of Ted and so one other idea we had was this one here",
    "start": "84840",
    "end": "91790"
  },
  {
    "text": "chosen Ted's ruthless adventurer but we thought that maybe that wouldn't be sending out quite the right message so",
    "start": "91790",
    "end": "98939"
  },
  {
    "text": "so we went with the the rudeness all right so this talk is in three parts",
    "start": "98939",
    "end": "104640"
  },
  {
    "text": "first we're going to talk about why we care why we got interested in rootless containers and why we did this then",
    "start": "104640",
    "end": "111899"
  },
  {
    "text": "we're going to talk about container security what we already do to secure containers and why that wasn't quite",
    "start": "111899",
    "end": "117119"
  },
  {
    "text": "enough for us and then we'll talk about actually how far we are down the journey of rootless containers so all right so",
    "start": "117119",
    "end": "125939"
  },
  {
    "start": "124000",
    "end": "211000"
  },
  {
    "text": "why do we care about this and more importantly why should you care about this and in order to answer that we",
    "start": "125939",
    "end": "131790"
  },
  {
    "text": "first need to talk a little bit about Cloud Foundry so both duels a night work on Cloud Foundry for those of you who",
    "start": "131790",
    "end": "138349"
  },
  {
    "text": "don't know Cloud Foundry is an open-source platform as a service and so it's kind of like Heroku if you're",
    "start": "138349",
    "end": "143780"
  },
  {
    "text": "familiar without a tool and the thing about Cloud Foundry is kind of it's very popular with a lot of big enterprising",
    "start": "143780",
    "end": "149239"
  },
  {
    "text": "customers and in particular like quite a few banks use Cloud Foundry to run their apps and so with that in mind we have to",
    "start": "149239",
    "end": "155780"
  },
  {
    "text": "make sure that we have a very strong focus on security for the platform and so what does the security landscape look",
    "start": "155780",
    "end": "161989"
  },
  {
    "text": "like for Cloud Foundry right now well there's really three concerns I think the first one is the Cloud Foundry is a",
    "start": "161989",
    "end": "167870"
  },
  {
    "text": "public cloud which means we have no idea who is running applications on the platform the second one is that it's",
    "start": "167870",
    "end": "174079"
  },
  {
    "text": "multi-tenant which means that we absolutely cannot trust any of the code that's pushed to the platform at all and",
    "start": "174079",
    "end": "179599"
  },
  {
    "text": "then thirdly it allows us to run docker images so these days it's very easy to bundle up anything into a docker image",
    "start": "179599",
    "end": "185540"
  },
  {
    "text": "and push it off to the platform and so you might look at that list there and you might think like oh god there's a",
    "start": "185540",
    "end": "192739"
  },
  {
    "text": "lot of things I need to be worried about right like like ah this is pretty scary in fact this is pretty much a worst-case",
    "start": "192739",
    "end": "199579"
  },
  {
    "text": "scenario completely public completely multi-tenant and docker paste work it's and so what this means is that we have",
    "start": "199579",
    "end": "206060"
  },
  {
    "text": "to make sure where we are absolutely on the bleeding edge of container security right so container security so far well",
    "start": "206060",
    "end": "214250"
  },
  {
    "start": "211000",
    "end": "342000"
  },
  {
    "text": "we already do for container security and in order to do that we need to talk about what a container actually is or",
    "start": "214250",
    "end": "221629"
  },
  {
    "text": "famously isn't so the thing about containers is they don't exist they're",
    "start": "221629",
    "end": "227989"
  },
  {
    "text": "actually just processes made up of some low-level primitives so what is a container I always like to start by just",
    "start": "227989",
    "end": "235459"
  },
  {
    "text": "referencing the fact that we've invented this idea about seven times before starting with jar files several members",
    "start": "235459",
    "end": "242449"
  },
  {
    "text": "right once and run anywhere and it's going to be great didn't quite work out that way so we",
    "start": "242449",
    "end": "250129"
  },
  {
    "text": "wanted to do this lower level with processes more generically but we couldn't just use processes in the",
    "start": "250129",
    "end": "256370"
  },
  {
    "text": "operating system we need to think about isolation so he said some I guess",
    "start": "256370",
    "end": "261409"
  },
  {
    "text": "metaphorical Lilith Lilith can you give us a primitive the less has run lots of processes rather",
    "start": "261409",
    "end": "267260"
  },
  {
    "text": "feeling with each other so we have namespaces to talk about later which give us isolation between different",
    "start": "267260",
    "end": "272930"
  },
  {
    "text": "processes on a machine and then we wanted to share resources between those",
    "start": "272930",
    "end": "279110"
  },
  {
    "text": "processes fairly so we also have C groups which let us share those resources or talk about those a bit more",
    "start": "279110",
    "end": "285110"
  },
  {
    "text": "later as well that gives us fair sharing between the process on the machine and so we've got namespaces and C groups we've got this",
    "start": "285110",
    "end": "291740"
  },
  {
    "text": "container image yeh and that was containers and that's everything about containers right well not quite",
    "start": "291740",
    "end": "297910"
  },
  {
    "text": "something happened next some people may know about those a disturbance in the force and now it's",
    "start": "297910",
    "end": "305390"
  },
  {
    "text": "docker so what did dr. do above this namespaces and C groups think I would say what they did was encapsulation and",
    "start": "305390",
    "end": "312140"
  },
  {
    "text": "they added this idea of ship aboard units these container images that you could move around between machines",
    "start": "312140",
    "end": "318430"
  },
  {
    "text": "efficiently so that you could run the same image in lots of different places using these low level primitives and by",
    "start": "318430",
    "end": "324800"
  },
  {
    "text": "adding this big thing on top so if you think about it like that there's really three parts to what a container is",
    "start": "324800",
    "end": "330380"
  },
  {
    "text": "there's isolation and resource sharing or what we call limit containers and there's this really exciting new idea of",
    "start": "330380",
    "end": "337280"
  },
  {
    "text": "encapsulation or what we call container containers so let's talk about isolation",
    "start": "337280",
    "end": "342400"
  },
  {
    "start": "342000",
    "end": "485000"
  },
  {
    "text": "right so when we're talking about isolation with regards to containers I think what we're really talking about is",
    "start": "342400",
    "end": "348050"
  },
  {
    "text": "Linux namespaces so Linux namespaces at a high level they provide isolation of global system",
    "start": "348050",
    "end": "354200"
  },
  {
    "text": "resources between processes running on a host and the way this works is there every single process that's running on a",
    "start": "354200",
    "end": "360230"
  },
  {
    "text": "Linux machine it's running in a corresponding set of namespaces these",
    "start": "360230",
    "end": "365240"
  },
  {
    "text": "ones here so some of these are kind of more interesting than others I think I think particularly the user name space",
    "start": "365240",
    "end": "370880"
  },
  {
    "text": "is relevant with regards to rootless containers so we're going to talk a lot more about that a little bit later just",
    "start": "370880",
    "end": "376120"
  },
  {
    "text": "to give you like a solid example of what we're talking about now let's take the PIP namespace so the pit namespace",
    "start": "376120",
    "end": "383510"
  },
  {
    "text": "isolates the process ID number space we just had a notification that the battery is about 100 black talks about run out a",
    "start": "383510",
    "end": "390230"
  },
  {
    "text": "battery but surely find a pin namespace right so essentially what this means is",
    "start": "390230",
    "end": "396140"
  },
  {
    "text": "that two processes running on the same host can share the same pit as long as they are in two",
    "start": "396140",
    "end": "401669"
  },
  {
    "text": "different namespaces and so in the example here we can see that the containers pit one actually maps back to",
    "start": "401669",
    "end": "408060"
  },
  {
    "text": "a much higher pit in the initial namespace but the important thing to know is that from the view of the",
    "start": "408060",
    "end": "413220"
  },
  {
    "text": "container it thinks that the PIDs start at one right and it has no knowledge of pit 1-2-3 in the host let's take another",
    "start": "413220",
    "end": "420870"
  },
  {
    "text": "example the mountain aim space so the mountain aim space is responsible for isolating these set amount points that",
    "start": "420870",
    "end": "427110"
  },
  {
    "text": "are that a set of processes can see and so this basically allows us to change",
    "start": "427110",
    "end": "434099"
  },
  {
    "text": "what the containers sees mounted at root so it's kind of interesting in combination with the pivot root syscall there that's what",
    "start": "434099",
    "end": "442500"
  },
  {
    "text": "allows the process to change what it sees it slash and so in the example we can see that in the initial namespace",
    "start": "442500",
    "end": "447870"
  },
  {
    "text": "the containers root filesystem is actually at path to my container root of s but inside the container it sees that",
    "start": "447870",
    "end": "454470"
  },
  {
    "text": "mount at that slash and so how this all works is we kind of take all of those namespaces and we combine them together",
    "start": "454470",
    "end": "459840"
  },
  {
    "text": "and you end up with something that has a pretty isolated view of the system right and this is pretty great like that works",
    "start": "459840",
    "end": "466530"
  },
  {
    "text": "really well but security is hard and we always need to be thinking about well",
    "start": "466530",
    "end": "471930"
  },
  {
    "text": "what happens if someone breaks out of that isolation right it's a case of like hey nice isolation you got there be a",
    "start": "471930",
    "end": "477690"
  },
  {
    "text": "shame if someone break out of it right like what other things do we have available to help us then and to that I",
    "start": "477690",
    "end": "483900"
  },
  {
    "text": "say security onion what the hell is a security onion well this is really all",
    "start": "483900",
    "end": "489360"
  },
  {
    "start": "485000",
    "end": "655000"
  },
  {
    "text": "about adding layers of security and when we're talking about containers there are a few other layers that we have",
    "start": "489360",
    "end": "495120"
  },
  {
    "text": "available to us namely capability dropping asset comp and app armour so",
    "start": "495120",
    "end": "501000"
  },
  {
    "text": "let's just quickly talk a little bit about those now capabilities so",
    "start": "501000",
    "end": "506060"
  },
  {
    "text": "privileges in Linux historically were divided between two users we had the all-powerful root user who had the",
    "start": "506060",
    "end": "512159"
  },
  {
    "text": "privilege to do absolutely everything and then every other user who was running on the host who didn't have privilege to do anything at all and",
    "start": "512159",
    "end": "519690"
  },
  {
    "text": "these days that those privileges have actually been split up and divided into little chunks known as neat sorry",
    "start": "519690",
    "end": "525480"
  },
  {
    "text": "capabilities and just to give you some examples of what those capabilities look",
    "start": "525480",
    "end": "531449"
  },
  {
    "text": "like what means service example we've got cap set you it previously if you wanted to",
    "start": "531449",
    "end": "537210"
  },
  {
    "text": "change or you it you basically had to be the root user but now if you want to do that all you need to have is this one",
    "start": "537210",
    "end": "543570"
  },
  {
    "text": "particular cap set new ID caps aside - probably one worth mentioning this is a",
    "start": "543570",
    "end": "549660"
  },
  {
    "text": "it's like super overpowered right now basically if you have caps this admin",
    "start": "549660",
    "end": "555270"
  },
  {
    "text": "you're like more or less root user and the reason I mention this is because when it comes to containers we can drop",
    "start": "555270",
    "end": "562260"
  },
  {
    "text": "capabilities right and that means that even if you break out of that isolation if you don't have the capability to do",
    "start": "562260",
    "end": "568350"
  },
  {
    "text": "anything like this there's a limit to the amount of damage that you can actually do next up is set comp sitcom",
    "start": "568350",
    "end": "576210"
  },
  {
    "text": "allows us to limit the system calls that a process can make so this is pretty cool like if we think about it really we",
    "start": "576210",
    "end": "582360"
  },
  {
    "text": "are relying on the security of the kernel the connect the kernel has a pretty big surface area and so by",
    "start": "582360",
    "end": "588300"
  },
  {
    "text": "limiting the actual number of Siskel's that our container processors can make that leads us in a much much safer",
    "start": "588300",
    "end": "594750"
  },
  {
    "text": "position as well and then finally we have apana so app armor is a form of",
    "start": "594750",
    "end": "601080"
  },
  {
    "text": "mandatory access control sort of simple it's a selinux and this allows us to confine our container processes even",
    "start": "601080",
    "end": "606750"
  },
  {
    "text": "further to the way this this generally works is you have an apartment profile with a bunch of rules and then you apply",
    "start": "606750",
    "end": "613200"
  },
  {
    "text": "that profile to your container process so we've got an example we'll there deny app proc slash star W basically means",
    "start": "613200",
    "end": "620820"
  },
  {
    "text": "that you are not allowed to write directly to any file inside /proc and",
    "start": "620820",
    "end": "626790"
  },
  {
    "text": "thus we have security onion and just to sort of show that we're not just doing",
    "start": "626790",
    "end": "632220"
  },
  {
    "text": "this for the sake of things we've got a bunch of CVEs from the past year year and a half there and listed next to",
    "start": "632220",
    "end": "638880"
  },
  {
    "text": "those we've kind of put the layers of the onion that have prevented that from becoming exploitable like personal favorite one",
    "start": "638880",
    "end": "647070"
  },
  {
    "text": "there is scuzzy mic drop it's like the best name for a CVE ever and whoever invented that well done and with that I",
    "start": "647070",
    "end": "656670"
  },
  {
    "start": "655000",
    "end": "709000"
  },
  {
    "text": "think we have isolation awesome so that's isolation we'll talk quickly",
    "start": "656670",
    "end": "661860"
  },
  {
    "text": "about resource sharing so this is mainly done with secret in the kernel quite like main spaces",
    "start": "661860",
    "end": "667960"
  },
  {
    "text": "you've got a set of C groups one for sharing CPU fairly between applications one for sharing memory fairly between",
    "start": "667960",
    "end": "675040"
  },
  {
    "text": "applications various others this holster fair sharing quite well the other thing",
    "start": "675040",
    "end": "681460"
  },
  {
    "text": "we have to do because we're a multi-tenant platform as a service is disk quotas you can't just let you to",
    "start": "681460",
    "end": "688630"
  },
  {
    "text": "contain a write as much as it likes to the disk so we have to somehow limit the amount rights they can do and this turns",
    "start": "688630",
    "end": "694960"
  },
  {
    "text": "out to be a train wreck this is where a lot of the rootless stuff ends up exploding and so we're going to talk",
    "start": "694960",
    "end": "701650"
  },
  {
    "text": "quite a lot more about that later but for now that's resource sharing and so",
    "start": "701650",
    "end": "707110"
  },
  {
    "text": "we'll talk about encapsulation yeah and I and I think when it comes to encapsulation I think that's really",
    "start": "707110",
    "end": "712300"
  },
  {
    "start": "709000",
    "end": "890000"
  },
  {
    "text": "there's really two parts to this I think the first part is encapsulation of an applications dependencies inside the",
    "start": "712300",
    "end": "718750"
  },
  {
    "text": "container so in the example there we've got run washer that has slash bin slash dependency 1 etc etc and then I think",
    "start": "718750",
    "end": "726670"
  },
  {
    "text": "there's also encapsulation of all of this together like they like the container itself how do we package all",
    "start": "726670",
    "end": "732670"
  },
  {
    "text": "of that up together into some thing that is quick safe and efficient to ship",
    "start": "732670",
    "end": "738040"
  },
  {
    "text": "around and so to answer the first part applications dependencies inside the",
    "start": "738040",
    "end": "743560"
  },
  {
    "text": "container I think what we're really talking about here is the file system so",
    "start": "743560",
    "end": "749740"
  },
  {
    "text": "at the end of the day every every dependency is probably going to be on the file system somewhere but we know",
    "start": "749740",
    "end": "755260"
  },
  {
    "text": "that different applications have a different set of dependencies so what do we do about that and I think the",
    "start": "755260",
    "end": "761320"
  },
  {
    "text": "solution is this pivot route Cisco so I briefly mentioned this there's a little bit earlier pivot route is the Cisco",
    "start": "761320",
    "end": "767590"
  },
  {
    "text": "that allows us to change or a container sees a slash so just to sort of give you",
    "start": "767590",
    "end": "772930"
  },
  {
    "text": "a very contrived example we've got this process Rundle sure and it asks what's it slash and under normal circumstances",
    "start": "772930",
    "end": "779860"
  },
  {
    "text": "it just sees the boring host file system right but what if our application has",
    "start": "779860",
    "end": "786250"
  },
  {
    "text": "dependencies that aren't on the host file system and instead we don't want to use this a bun to distribution we want",
    "start": "786250",
    "end": "792070"
  },
  {
    "text": "to use like this is cool container Alpina image instead so this is what pivot root allows us to do is just to",
    "start": "792070",
    "end": "797830"
  },
  {
    "text": "switch what is so that when it asks what's in / it now sees the cool container Alpine root",
    "start": "797830",
    "end": "804490"
  },
  {
    "text": "file system rather than boring Costa bintang that's for the second part how",
    "start": "804490",
    "end": "811060"
  },
  {
    "text": "do we how do we sort of encapsulate all of this together it's maybe let's like take another example let's say we've got",
    "start": "811060",
    "end": "817149"
  },
  {
    "text": "run da and run two Daksha and both of these applications actually do depend on",
    "start": "817149",
    "end": "822250"
  },
  {
    "text": "like a full massive Ubuntu OS in order to work properly and so you might look",
    "start": "822250",
    "end": "828579"
  },
  {
    "text": "at that and think ok well how do I have my package that out how do I ship that around and maybe historically like you",
    "start": "828579",
    "end": "834519"
  },
  {
    "text": "might have put that into maybe a VM it'd be an image like VMDK or ami or something and that kind of works but",
    "start": "834519",
    "end": "841839"
  },
  {
    "text": "it's not great these images tend to end up being very big they're not very easy to manage etc etc and I think we can do",
    "start": "841839",
    "end": "849790"
  },
  {
    "text": "better and this is where layered file systems come into play and what's so",
    "start": "849790",
    "end": "855160"
  },
  {
    "text": "great about the layered file systems is it allows us to share the the commonality between our containers or",
    "start": "855160",
    "end": "860740"
  },
  {
    "text": "our applications and particularly what what makes this so great and why this is",
    "start": "860740",
    "end": "866470"
  },
  {
    "text": "so efficient is that we can cache these layers and then just apply the dips that",
    "start": "866470",
    "end": "872230"
  },
  {
    "text": "we need to on top of that so I mean if we think about all of the images that are on docker hub right now it's",
    "start": "872230",
    "end": "877510"
  },
  {
    "text": "probably quite likely that most of them have a there's probably like only a small set of actual base layers that",
    "start": "877510",
    "end": "883540"
  },
  {
    "text": "people are using and so that leads us to efficient shipping and with that we have",
    "start": "883540",
    "end": "890860"
  },
  {
    "start": "890000",
    "end": "941000"
  },
  {
    "text": "most of resource sharing we don't quite have all the sauce sharing oh sorry",
    "start": "890860",
    "end": "897130"
  },
  {
    "text": "thank you this encapsulation but we just need a side notes so this is all based",
    "start": "897130",
    "end": "903160"
  },
  {
    "text": "on standards and one of the big things that's happened in recent years is all of this container stuff has begun to get",
    "start": "903160",
    "end": "908709"
  },
  {
    "text": "really great standards around it we have the OCI image and runtime standards there's R and C which is a small simple",
    "start": "908709",
    "end": "915430"
  },
  {
    "text": "runtime pulled out of docker which we're using so although this is in cloud",
    "start": "915430",
    "end": "920980"
  },
  {
    "text": "foundry which uses a different Orchestrator most of the concepts here will work for all of these other",
    "start": "920980",
    "end": "926490"
  },
  {
    "text": "orchestrators because most of this is in run C garden which is what this is based",
    "start": "926490",
    "end": "931930"
  },
  {
    "text": "on you just a bit of glues kind of like CRI for Cloud Foundry the glues run seed to the",
    "start": "931930",
    "end": "937119"
  },
  {
    "text": "rest of the platform but under the covers is just OCI and run see so we've",
    "start": "937119",
    "end": "942879"
  },
  {
    "start": "941000",
    "end": "1020000"
  },
  {
    "text": "got isolation resource sharing this security onion encapsulation so we're",
    "start": "942879",
    "end": "948459"
  },
  {
    "text": "secure right you've probably guessed not quite so why are we secure why isn't",
    "start": "948459",
    "end": "955329"
  },
  {
    "text": "this everything we need well if you've secured the door enough if you're a bad",
    "start": "955329",
    "end": "963309"
  },
  {
    "text": "person like me you start looking at the wall right the wall starts to become the",
    "start": "963309",
    "end": "970839"
  },
  {
    "text": "weak point once you've secured the door enough so we've secured the heck now out of",
    "start": "970839",
    "end": "976149"
  },
  {
    "text": "these containers with all the things turn on that we can but the rest of the",
    "start": "976149",
    "end": "983079"
  },
  {
    "text": "system the thing actually creating those containers at the moment it's using elevated privileges to do it and so that",
    "start": "983079",
    "end": "989949"
  },
  {
    "text": "starts to look like the weak point in the system and that's why we need to start thinking of how do we secure the",
    "start": "989949",
    "end": "996399"
  },
  {
    "text": "thing that creates those secure containers and that takes us to the roots of rootless which will be the rest",
    "start": "996399",
    "end": "1003179"
  },
  {
    "text": "of the talk yeah and so there's quite a nice straight",
    "start": "1003179",
    "end": "1008249"
  },
  {
    "text": "well not a straight line but nice simple roadmap there I think in reality it actually looked a bit more like this and",
    "start": "1008249",
    "end": "1014220"
  },
  {
    "text": "there were a lot of ups and downs and so yeah I think for the rest of the talk we're just going to be discussing what",
    "start": "1014220",
    "end": "1019679"
  },
  {
    "text": "we've learnt yeah so before we do that we just need to give like a huge shout out these are just some of the people",
    "start": "1019679",
    "end": "1026159"
  },
  {
    "start": "1020000",
    "end": "1053000"
  },
  {
    "text": "who've contributed massively to the route list containers work upstream in run seed and the rest of the container",
    "start": "1026159",
    "end": "1031649"
  },
  {
    "text": "community and we're very very much standing on the shoulders of giants with this work and it's just a huge",
    "start": "1031649",
    "end": "1039449"
  },
  {
    "text": "amount in that community that we just get to integrate into our system so",
    "start": "1039449",
    "end": "1045538"
  },
  {
    "text": "Jessie for sale I like sorry they think I'm pronouncing it right but I'm probably not a key hero sudha Phyllis",
    "start": "1045539",
    "end": "1051210"
  },
  {
    "text": "T's as well among others so how does this work the big trick turns out to be",
    "start": "1051210",
    "end": "1056549"
  },
  {
    "start": "1053000",
    "end": "1288000"
  },
  {
    "text": "user name spaces that we talked about a bit earlier I'm so in the same way as the kid names basis that we talked about",
    "start": "1056549",
    "end": "1063000"
  },
  {
    "text": "earlier maps have hidden the host to a pit in the container so you have a different pit in the container from the host the usernames",
    "start": "1063000",
    "end": "1070000"
  },
  {
    "text": "basemaps a different user in the host and the container so inside the host",
    "start": "1070000",
    "end": "1076720"
  },
  {
    "text": "you're a random user with no particular privileges but inside the container",
    "start": "1076720",
    "end": "1084240"
  },
  {
    "text": "you are Ruth you have all permissions you are UID 0 so how does that work",
    "start": "1087210",
    "end": "1094080"
  },
  {
    "text": "there's a UID map similar to that pit map which Maps the user IDs in the",
    "start": "1094080",
    "end": "1099610"
  },
  {
    "text": "container in the host and we're mapping in this case we've just picked the highest possible user ID on the system",
    "start": "1099610",
    "end": "1105460"
  },
  {
    "text": "it's the least likely to have any privileges at all in the host I say host",
    "start": "1105460",
    "end": "1110770"
  },
  {
    "text": "I mean the init namespace to UID 0 in the container and the last column is the",
    "start": "1110770",
    "end": "1116650"
  },
  {
    "text": "number to map starting from that so we've mapped one of 0 to the highest and",
    "start": "1116650",
    "end": "1122350"
  },
  {
    "text": "then all the others in this configuration we've map starting from 65536 up for all the other users so that",
    "start": "1122350",
    "end": "1131920"
  },
  {
    "text": "means that although in the container you have this UID 0 you don't have any particular user ID in the house in the",
    "start": "1131920",
    "end": "1139330"
  },
  {
    "text": "container then you have all these permissions but only in the container in its namespaces the really great thing",
    "start": "1139330",
    "end": "1145600"
  },
  {
    "text": "for us for rulers is that since linux 3.8 had to look to remember which linux",
    "start": "1145600",
    "end": "1151180"
  },
  {
    "text": "since since we put 8 any user can create user name space so you don't need to be",
    "start": "1151180",
    "end": "1156490"
  },
  {
    "text": "roots to create a user name space and become UID 0 in it and that's safe",
    "start": "1156490",
    "end": "1163150"
  },
  {
    "text": "because you only have root in your bubble namespace you don't have roots in the host so you can do it as a regular",
    "start": "1163150",
    "end": "1170020"
  },
  {
    "text": "user and once you have done it you have collapses admin which is that",
    "start": "1170020",
    "end": "1175810"
  },
  {
    "text": "capabilities then talked about earlier the very expansive capability in that namespace and the namespaces that you",
    "start": "1175810",
    "end": "1182590"
  },
  {
    "text": "created at the same time and that lets you do seccomp and a Parmer and everything else that we want to do so",
    "start": "1182590",
    "end": "1188620"
  },
  {
    "text": "that's pretty great the big trick then as a user any user can create user name space you become roots in that user name",
    "start": "1188620",
    "end": "1194320"
  },
  {
    "text": "space but only in that namespace so it's a secure thing to do so problem",
    "start": "1194320",
    "end": "1199870"
  },
  {
    "text": "what problems do you hit well first when you do that you only actually get one UID so by default when you create this",
    "start": "1199870",
    "end": "1205779"
  },
  {
    "text": "namespace your UID can be mapped to one UID in the container so you can map",
    "start": "1205779",
    "end": "1211029"
  },
  {
    "text": "yourself to roots but there's no other you IDs in the container that exist because they're not maps we only use it",
    "start": "1211029",
    "end": "1216640"
  },
  {
    "text": "in the host because if you map them to a user in the host you would suddenly have a way of having permissions on a UID",
    "start": "1216640",
    "end": "1222909"
  },
  {
    "text": "that you didn't have permissions on in the host so if I map UID 500 in the container to UID 2 in the container I'll",
    "start": "1222909",
    "end": "1230830"
  },
  {
    "text": "be container ooh I can become UID two I will then in the house be UID 500 and",
    "start": "1230830",
    "end": "1236200"
  },
  {
    "text": "now I've got permissions that I wasn't supposed to have so you can't do that and we really want to do that because we",
    "start": "1236200",
    "end": "1241659"
  },
  {
    "text": "actually have multiple users in the containers that we run so the solution there's a binary called",
    "start": "1241659",
    "end": "1247240"
  },
  {
    "text": "new UID map it's something that the OS supports and ships and what that does is",
    "start": "1247240",
    "end": "1254440"
  },
  {
    "text": "it looks in a special file called Etsy sub UID which tells it which you IDs a particular user is allowed to map and",
    "start": "1254440",
    "end": "1261640"
  },
  {
    "text": "then as root it writes the mapping for you so because it has permissions it can map some users that you can't and it",
    "start": "1261640",
    "end": "1267789"
  },
  {
    "text": "will do that if they're in the file so this is kind of cheating because we're using a set UID binary with the elevated",
    "start": "1267789",
    "end": "1273309"
  },
  {
    "text": "permissions but it's something that ships with the host OS and secured by the host OS so it's kind of okay and we",
    "start": "1273309",
    "end": "1280570"
  },
  {
    "text": "PR Drancy Runcie has support for this now so Runcie can use new idea new UID",
    "start": "1280570",
    "end": "1285820"
  },
  {
    "text": "map if you're in su sub u ID so that's great and that pretty much gives us",
    "start": "1285820",
    "end": "1290909"
  },
  {
    "start": "1288000",
    "end": "1374000"
  },
  {
    "text": "isolation Anna Parma and all those other things without needing to be roots so",
    "start": "1290909",
    "end": "1296590"
  },
  {
    "text": "resource sharing cool and so resource so",
    "start": "1296590",
    "end": "1302770"
  },
  {
    "text": "resource sharing what we're really talking about is the C groups here and the problem is that there's no way to",
    "start": "1302770",
    "end": "1307899"
  },
  {
    "text": "set these up I'm privileged just yet so with C groups and they exist as like a",
    "start": "1307899",
    "end": "1313270"
  },
  {
    "text": "virtual file system typically mounted at sis MST group and whenever you want to apply some limit you usually do that by",
    "start": "1313270",
    "end": "1320350"
  },
  {
    "text": "writing to a file inside the C group somewhere and the problem is that all of",
    "start": "1320350",
    "end": "1326260"
  },
  {
    "text": "these files are owned by hosts root which means that our container root user doesn't have permission to make the",
    "start": "1326260",
    "end": "1332320"
  },
  {
    "text": "changes it needs to so what do we do about this well the way that we kind of got around this is by",
    "start": "1332320",
    "end": "1339250"
  },
  {
    "text": "joining a subdirectory inside the C groups as part of like a privileged set",
    "start": "1339250",
    "end": "1344590"
  },
  {
    "text": "up phase so this phase runs before any of the containers are like even created",
    "start": "1344590",
    "end": "1349780"
  },
  {
    "text": "on the system but it just means that when it comes to creating the containers",
    "start": "1349780",
    "end": "1354880"
  },
  {
    "text": "we tell run C to point to our chand C group inside the file system and then it",
    "start": "1354880",
    "end": "1362950"
  },
  {
    "text": "will kind of works it has the permissions it needs to write the limits and so again like like this would be",
    "start": "1362950",
    "end": "1369039"
  },
  {
    "text": "impede our P Arden to run C and it's seems to be working pretty well and with",
    "start": "1369039",
    "end": "1374830"
  },
  {
    "start": "1374000",
    "end": "1582000"
  },
  {
    "text": "that we have isolation and resource sharing awesome so we have results written but not quite because you'll",
    "start": "1374830",
    "end": "1380169"
  },
  {
    "text": "remember disk quotas which I promise you we're going to explode and sure enough they are about to explode and this",
    "start": "1380169",
    "end": "1386590"
  },
  {
    "text": "actually tastes into file systems as well so we'll do sort of disk quotas and file systems to for the price of one so",
    "start": "1386590",
    "end": "1394299"
  },
  {
    "text": "file systems if you remember the way this works we've got this mount namespace and the pivot root to change",
    "start": "1394299",
    "end": "1401140"
  },
  {
    "text": "what the root points to the pivot root bit is fine because we can do that in a user name space because we own caps this",
    "start": "1401140",
    "end": "1408669"
  },
  {
    "text": "admin in the mountain in space because we created it inside the user name space so that B is fine the problem is downloading those file",
    "start": "1408669",
    "end": "1415450"
  },
  {
    "text": "systems in order to pivot root into and there we have these layered file systems",
    "start": "1415450",
    "end": "1420850"
  },
  {
    "text": "and in order to download these low layer file system sufficiently you need to use",
    "start": "1420850",
    "end": "1425890"
  },
  {
    "text": "a copy-on-write file system if you have to copy a bun to every time you want to create a bun to container that's going",
    "start": "1425890",
    "end": "1431950"
  },
  {
    "text": "to be far too slow so you need a file system that can make that copy go fast and you basically need a copy and write",
    "start": "1431950",
    "end": "1438309"
  },
  {
    "text": "file system so there's a few of these the ones we're going to talk about our AFS better FS an overlay FS the trick",
    "start": "1438309",
    "end": "1446650"
  },
  {
    "text": "that all of these really do is as soon as I say copy they pretend that they've",
    "start": "1446650",
    "end": "1452110"
  },
  {
    "text": "done the copy make Reed's go to the layer and then store up writes in a dis",
    "start": "1452110",
    "end": "1458620"
  },
  {
    "text": "layer so a OFS a FS is what we ran in production for ages it works out really",
    "start": "1458620",
    "end": "1464679"
  },
  {
    "text": "well for us unfortunately one in the mainline kernel so we were already getting a bit worried about",
    "start": "1464679",
    "end": "1470020"
  },
  {
    "text": "supporting that long term but much worse you just can't do this for that route you just need roots in order to mount a",
    "start": "1470020",
    "end": "1476740"
  },
  {
    "text": "ufs and there just isn't a good way around that so we moved to better FS and",
    "start": "1476740",
    "end": "1481840"
  },
  {
    "text": "Barre FS has this great feature where as a non privileged user you can snapshot a directory and you don't need any special",
    "start": "1481840",
    "end": "1488350"
  },
  {
    "text": "permissions to do it it can just do a copyright snapshot so you need a bit of roots at startup to do some setup of",
    "start": "1488350",
    "end": "1494350"
  },
  {
    "text": "that but then you don't need roots at all so we were we were thinking great this is fantastic this is all solved",
    "start": "1494350",
    "end": "1501000"
  },
  {
    "text": "unfortunately it then exploded at scale really badly and we had to revert it",
    "start": "1501000",
    "end": "1506410"
  },
  {
    "text": "very quickly so back to the drawing board and we had no way of actually doing the filesystem layering until we",
    "start": "1506410",
    "end": "1513580"
  },
  {
    "text": "found overlay FS so overlay FS is very similar to a u FS it's a similar way of",
    "start": "1513580",
    "end": "1519010"
  },
  {
    "text": "doing things it is in the mainline kernel but the really great thing is that it's allowed to be mounted inside a",
    "start": "1519010",
    "end": "1525640"
  },
  {
    "text": "user name space on a Bunty so not in every OS unfortunately it doesn't work generically but talking",
    "start": "1525640",
    "end": "1533440"
  },
  {
    "text": "with the developer of overlay FS canonical and the developer decided that it was safe to allow mounts of overlay",
    "start": "1533440",
    "end": "1539500"
  },
  {
    "text": "FS inside a user name space so it's added to the white list of file systems that container roots can mount without",
    "start": "1539500",
    "end": "1546760"
  },
  {
    "text": "needing to be roots in the init namespace so what that means is we had to change things so they instead of",
    "start": "1546760",
    "end": "1553030"
  },
  {
    "text": "doing the mount outside the container where we don't have any permissions we now do the mount inside the container so",
    "start": "1553030",
    "end": "1558880"
  },
  {
    "text": "in the container configuration that we passed the run C we say to run C as soon",
    "start": "1558880",
    "end": "1564669"
  },
  {
    "text": "as you start up this container when you have permissions please mount this overlay filesystem",
    "start": "1564669",
    "end": "1570940"
  },
  {
    "text": "which it can do because it has elevated permissions in the container and then it",
    "start": "1570940",
    "end": "1576040"
  },
  {
    "text": "runs the user process now in the right filesystem and says how this seems to work it's pretty great so we then have",
    "start": "1576040",
    "end": "1583030"
  },
  {
    "start": "1582000",
    "end": "1727000"
  },
  {
    "text": "isolation resource sharing and encapsulation pretty much without",
    "start": "1583030",
    "end": "1588160"
  },
  {
    "text": "needing roots but there are a few remaining roadblocks which we will talk about",
    "start": "1588160",
    "end": "1594480"
  },
  {
    "text": "so first roadblock is dis quitters so",
    "start": "1596390",
    "end": "1601700"
  },
  {
    "text": "right now as Jules mentioned earlier we have to apply disk quotas club boundaries a multi-tenant thing means we",
    "start": "1601700",
    "end": "1608030"
  },
  {
    "text": "have to limit that and so we are currently using X of s in order to provide that and the problem is this",
    "start": "1608030",
    "end": "1614900"
  },
  {
    "text": "requires privileges fundamentally so how do we how do we get around that well right now we extract that bit",
    "start": "1614900",
    "end": "1623930"
  },
  {
    "text": "interest into just a very small focus to set you at binary that literally is just responsible for applying the quota and",
    "start": "1623930",
    "end": "1631630"
  },
  {
    "text": "then we run that at the appropriate time during the container create a life cycle",
    "start": "1631630",
    "end": "1637000"
  },
  {
    "text": "so there is a bit of route there it's not entirely rootless but you know it's",
    "start": "1637000",
    "end": "1642170"
  },
  {
    "text": "it's what it is the big one is probably networking so we've kind of conveniently",
    "start": "1642170",
    "end": "1647630"
  },
  {
    "text": "stepped over networking in this talk and that's because there's no way to do it rootless right now so yeah the problem",
    "start": "1647630",
    "end": "1655910"
  },
  {
    "text": "is like when you create the new network namespace doesn't have any external network connectivity and in order to set",
    "start": "1655910",
    "end": "1661460"
  },
  {
    "text": "any of that up again you just have to have root privileges I think there has been some progress or",
    "start": "1661460",
    "end": "1668180"
  },
  {
    "text": "there is some progress being made in this area but I think as of right now",
    "start": "1668180",
    "end": "1673780"
  },
  {
    "text": "you do need that privilege and so again at least in Cloud Foundry we kind of",
    "start": "1673780",
    "end": "1679190"
  },
  {
    "text": "extracted the bit of the system that does the networking into its own external plugin and then we just had to",
    "start": "1679190",
    "end": "1686450"
  },
  {
    "text": "apply the second you had binary to that you may be noticing a theme of applying the set you had binary to stuff final",
    "start": "1686450",
    "end": "1694760"
  },
  {
    "text": "thing is this I kind of talked about this setup phase like the churning of the sea groups so again I think there",
    "start": "1694760",
    "end": "1700940"
  },
  {
    "text": "has been a little bit of work done to try and address this and to sort of solve this properly as for us we just",
    "start": "1700940",
    "end": "1707060"
  },
  {
    "text": "have to do the setup in like a pre start script so it's not great but it's also",
    "start": "1707060",
    "end": "1714140"
  },
  {
    "text": "not so bad as I said it runs before any of the containers or it can even be created on the system so there's no",
    "start": "1714140",
    "end": "1719810"
  },
  {
    "text": "there's no chance of like user input and user input interacting badly with that",
    "start": "1719810",
    "end": "1726220"
  },
  {
    "text": "and that's about it I think yeah so that is that it's pretty much the",
    "start": "1726220",
    "end": "1731420"
  },
  {
    "start": "1727000",
    "end": "1895000"
  },
  {
    "text": "journey to rootless we talked about why we cared a lot about containing security",
    "start": "1731420",
    "end": "1737180"
  },
  {
    "text": "and how far we are down this journey I want to summarize a little bit basically",
    "start": "1737180",
    "end": "1742220"
  },
  {
    "text": "don't worry be happy it's not all there yet there are some missing pieces that",
    "start": "1742220",
    "end": "1748220"
  },
  {
    "text": "we don't quite have but actually we've been able to reduce privilege a lot where we can we're breaking apart the",
    "start": "1748220",
    "end": "1755300"
  },
  {
    "text": "bits where we can't and there's just this fantastic amount that we've been able to achieve because of the",
    "start": "1755300",
    "end": "1760550"
  },
  {
    "text": "technologies that already in the community and the huge amount of work that's already there so we're pretty",
    "start": "1760550",
    "end": "1765680"
  },
  {
    "text": "confident that we're going to get the rest of the way so things are getting better I think the question that's",
    "start": "1765680",
    "end": "1771890"
  },
  {
    "text": "probably never one's mind is does it work yes it actually hopefully probably",
    "start": "1771890",
    "end": "1779380"
  },
  {
    "text": "it passes all our tests and we have pretty good tests for Cloud Foundry and",
    "start": "1779380",
    "end": "1784460"
  },
  {
    "text": "it should be going out into production environments in the next couple of weeks we're hoping I'd be able to say it's",
    "start": "1784460",
    "end": "1790580"
  },
  {
    "text": "live but it's not you can try out right",
    "start": "1790580",
    "end": "1795770"
  },
  {
    "text": "now there's if you're using Cloud Foundry there's just a flag experimental route this mode you can turn it on and it should just work we're going to test",
    "start": "1795770",
    "end": "1802970"
  },
  {
    "text": "it a little bit more before we do that so with that thank you very much and I",
    "start": "1802970",
    "end": "1808430"
  },
  {
    "text": "think we have a little bit of time is there any questions [Applause]",
    "start": "1808430",
    "end": "1821419"
  },
  {
    "text": "yeah I said overlay FS but I just mean overlay I know they renamed it seven",
    "start": "1824880",
    "end": "1829990"
  },
  {
    "text": "times but yeah as long as it's white listed which again only in canonical",
    "start": "1829990",
    "end": "1836020"
  },
  {
    "text": "only in Ubuntu at the moment",
    "start": "1836020",
    "end": "1840060"
  },
  {
    "text": "I'm sorry second",
    "start": "1850460",
    "end": "1853840"
  },
  {
    "text": "so the question is what are the challenge is for using ruthless mode for Network namespaces and basically we can",
    "start": "1858850",
    "end": "1864669"
  },
  {
    "text": "create the network namespace without needing routes and we can create devices in the network namespace but in order to",
    "start": "1864669",
    "end": "1871690"
  },
  {
    "text": "actually route out anywhere interesting you need to be able to configure the networks on the host because those are",
    "start": "1871690",
    "end": "1878590"
  },
  {
    "text": "the ones that actually have a real cable plugged in and you need routes to configure those and then move a V F pair",
    "start": "1878590",
    "end": "1885190"
  },
  {
    "text": "into the container at the moment awesome",
    "start": "1885190",
    "end": "1892539"
  },
  {
    "text": "thank you very much [Applause]",
    "start": "1892539",
    "end": "1897460"
  }
]