[
  {
    "start": "0",
    "end": "54000"
  },
  {
    "text": "Falls all right so we're talking like we just introduced we're talking about how carbonates components in your cluster",
    "start": "0",
    "end": "5609"
  },
  {
    "text": "communicate and how they do that securely so welcome my name is Monica Trotsky I'm a product manager working on container security at Google recently",
    "start": "5609",
    "end": "13440"
  },
  {
    "text": "I've been thinking a lot about the certificates that you have in Kerber Nettie's and the roots of trust that you depend on in your cluster I initially",
    "start": "13440",
    "end": "19830"
  },
  {
    "text": "didn't know a lot about this so I wanted to do some research and learn a couple of things and that's what we're talking about today what I what I've learned so",
    "start": "19830",
    "end": "27090"
  },
  {
    "text": "in this talk we'll talk through how carbonize components communicate within your cluster and the security of these communications first we'll cover what",
    "start": "27090",
    "end": "33989"
  },
  {
    "text": "the main components are and what communications go between those components then we'll talk about what communications security should be and",
    "start": "33989",
    "end": "40670"
  },
  {
    "text": "like the properties that you might want and how this is typically implemented will talk about the certificate authorities that exist in kubernetes and",
    "start": "40670",
    "end": "47399"
  },
  {
    "text": "how these are used to protect cluster communications and then we'll wrap up so that you understand how all these pieces",
    "start": "47399",
    "end": "52440"
  },
  {
    "text": "work together in concert all right so first off to start what components of kubernetes even communicate with each",
    "start": "52440",
    "end": "58859"
  },
  {
    "start": "54000",
    "end": "241000"
  },
  {
    "text": "other so here's here's your cluster at a high level with the main incriminated components on the left in the control",
    "start": "58859",
    "end": "65220"
  },
  {
    "text": "plane you run several pieces on master nodes to actually control your clusters the koreas controllers which tell your",
    "start": "65220",
    "end": "70860"
  },
  {
    "text": "clusters what to do and at CD which is a database that stores your cluster state on the right in your worker notes you",
    "start": "70860",
    "end": "77520"
  },
  {
    "text": "run your workloads these are their our kubernetes components they're deployed on your nodes that are needed to",
    "start": "77520",
    "end": "82830"
  },
  {
    "text": "actually manage the workloads these listen to the canaries controllers that are in the master and do what they're told to do and your workloads themselves",
    "start": "82830",
    "end": "89850"
  },
  {
    "text": "the worker nodes run your pods which are just collections of one or more containers so if we break down these",
    "start": "89850",
    "end": "95340"
  },
  {
    "text": "components a little bit more you can break down on the left the criminate",
    "start": "95340",
    "end": "100500"
  },
  {
    "text": "controllers into the api server scheduler controller manager and other controllers these perform the typical",
    "start": "100500",
    "end": "106649"
  },
  {
    "text": "functions that you'd expect of your of your kubernetes cluster to scale scheduled workloads and respond to user",
    "start": "106649",
    "end": "112140"
  },
  {
    "text": "requests you'll also see that we broken out at CD into more than one instance of at CD at CD is a distributed datastore",
    "start": "112140",
    "end": "119250"
  },
  {
    "text": "and run in a high of L Valley mode so there are multiple instances that interact with each other to actually maintain state for your cluster and on",
    "start": "119250",
    "end": "126659"
  },
  {
    "text": "the right in the worker nodes you'll see we have the cubelet which is the main component each node increment unnies its",
    "start": "126659",
    "end": "132379"
  },
  {
    "text": "responsible for for what's running on that particular node and receiving instructions from the control plane it",
    "start": "132379",
    "end": "137660"
  },
  {
    "text": "watches the containers and makes sure they're running as they're supposed to be running and other company's components like q proxy or cube dns are",
    "start": "137660",
    "end": "144709"
  },
  {
    "text": "actually run as daemon sets which are pods that must be run on every node in your cluster this could also include other system containers or add-ons for",
    "start": "144709",
    "end": "151670"
  },
  {
    "text": "your particular configuration or your from your cloud provider for example so for things like logging and monitoring q",
    "start": "151670",
    "end": "157880"
  },
  {
    "text": "proxy is a little bit special and that it's also how admins can access the worker nodes directly and it also talks to the API server to keep the network",
    "start": "157880",
    "end": "163880"
  },
  {
    "text": "configuration up today so if we add the flows that actually go between these",
    "start": "163880",
    "end": "169099"
  },
  {
    "text": "components you'll notice and don't worry we're gonna keep this relatively simple that some of these components actually",
    "start": "169099",
    "end": "174140"
  },
  {
    "text": "seem to get a lot more attention and act as the flow-through points for a lot of communications that exist in your cluster including between other",
    "start": "174140",
    "end": "179720"
  },
  {
    "text": "components and specifically you'll see that almost all communications touch the cube api server the cubelet and @cd for",
    "start": "179720",
    "end": "187880"
  },
  {
    "text": "example say your pod needed a secret it would tell this to the cubelet the cubelet would communicate this to the",
    "start": "187880",
    "end": "193730"
  },
  {
    "text": "cube api server and the cube api server would communicate with that CD to actually retrieve that secret so the",
    "start": "193730",
    "end": "199519"
  },
  {
    "text": "cube api server is critical for everything in the cluster it amends talk to it other criminals controllers talk",
    "start": "199519",
    "end": "205370"
  },
  {
    "text": "to it at CDs talks to it and it's the point of communication with the nodes cubelet all communication paths from the",
    "start": "205370",
    "end": "211609"
  },
  {
    "text": "cluster of the master terminated the API server similarly everything that goes from the node goes through the cubelet it's the",
    "start": "211609",
    "end": "218180"
  },
  {
    "text": "brain setter for the node and EDD is critical in that it's store state so it holds all the important info with your",
    "start": "218180",
    "end": "224480"
  },
  {
    "text": "cluster it acts like sort of like a like a hard drive for your cluster so even if it doesn't talk to many other pieces",
    "start": "224480",
    "end": "229609"
  },
  {
    "text": "we're gonna want to make sure any communications with that CD are really well protected so with that in mind we're going to focus more heavily on",
    "start": "229609",
    "end": "235430"
  },
  {
    "text": "these three pieces in interest cluster communications the cube api server the cubelet and xcd okay but first let's",
    "start": "235430",
    "end": "243769"
  },
  {
    "start": "241000",
    "end": "634000"
  },
  {
    "text": "talk about properties of good communication security and we'll come back and then apply that knowledge to kubernetes so when protecting data in",
    "start": "243769",
    "end": "250760"
  },
  {
    "text": "transit there are three common security properties are gonna want to look for the first is authentication which",
    "start": "250760",
    "end": "256280"
  },
  {
    "text": "ensures that you know and verify the source and destination of the communications whether it be a human or a process you're verifying that the",
    "start": "256280",
    "end": "262849"
  },
  {
    "text": "correspond sorry true they actually claim to be integrity which makes sure that the data",
    "start": "262849",
    "end": "267930"
  },
  {
    "text": "that you send arrives at at its destination unaltered you're verifying that the data hasn't been tampered with and also hasn't been falsified and",
    "start": "267930",
    "end": "274790"
  },
  {
    "text": "encryption which protects your data by making it unintelligible while in transit in order to keep it private",
    "start": "274790",
    "end": "280350"
  },
  {
    "text": "encryption is a process through which through which legible data known as plaintext is made illegible known as",
    "start": "280350",
    "end": "286229"
  },
  {
    "text": "ciphertext with the goal of ensuring that the plaintext is only accessible by parties authorized by the owner of that",
    "start": "286229",
    "end": "291990"
  },
  {
    "text": "data and the algorithm is used in the encryption process are well known but the key required for decrypting the ciphertext is kept secret so encryption",
    "start": "291990",
    "end": "299310"
  },
  {
    "text": "in transit often uses asymmetric encryption for key exchange to establish a shared symmetric key which is then",
    "start": "299310",
    "end": "304919"
  },
  {
    "text": "used for the actual data encryption note that some forms of encryption actually already have integrity and",
    "start": "304919",
    "end": "311010"
  },
  {
    "text": "authentication as part of the encryption so there aren't necessarily separate systems that you're putting in place you might be able to get many of these",
    "start": "311010",
    "end": "316699"
  },
  {
    "text": "characteristics for the price of one and we can expect different kinds of",
    "start": "316699",
    "end": "322020"
  },
  {
    "text": "communications between components in our infrastructure there are client to server communications where a client like Alice is the user requesting",
    "start": "322020",
    "end": "328050"
  },
  {
    "text": "webpage for example and connects to a server like Bob which receives a request you can also have peer-to-peer communications for example when running",
    "start": "328050",
    "end": "334620"
  },
  {
    "text": "a system in hive available I think high availability mode when there are several nodes of the same service up and running the peer nodes are going to want to",
    "start": "334620",
    "end": "341460"
  },
  {
    "text": "mutually authenticate to ensure that they're in fact equally trusted this just means that each node needs to act as both a client and a server in that",
    "start": "341460",
    "end": "348840"
  },
  {
    "text": "peer State so suppose Alice and Bob are communicating and they're encrypting",
    "start": "348840",
    "end": "354419"
  },
  {
    "text": "their messages to each other if they communicate using a transport layer security or TLS Alice and Bob perform a",
    "start": "354419",
    "end": "359849"
  },
  {
    "text": "handshake and Alice knows that she's talking to Bob because she can verify Bob certificate mutual TLS means that",
    "start": "359849",
    "end": "365910"
  },
  {
    "text": "both the server verifies that the clients identity and the client verifies the server's identity but if Alice",
    "start": "365910",
    "end": "372479"
  },
  {
    "text": "hadn't authenticated Bob their communications are subject to what's known as a man-in-the-middle attack a",
    "start": "372479",
    "end": "378270"
  },
  {
    "text": "man-in-the-middle attack or a person in the middle attack or a monkey in the middle attack whatever you want to call it occurs when another party can",
    "start": "378270",
    "end": "385110"
  },
  {
    "text": "intercept and relay all messages between the two parties who are trying to communicate so Eve the eavesdropper in",
    "start": "385110",
    "end": "390599"
  },
  {
    "text": "this case pretends to be Bob but when talking to Alice and pretends to be Alice when talking about",
    "start": "390599",
    "end": "395960"
  },
  {
    "text": "and every time Alice sends a message to Bob Eve intercepts it and can read it before sending it on to Bob we also have",
    "start": "395960",
    "end": "402139"
  },
  {
    "text": "malicious Malory might even change the content of that message if they wanted to the worst part is Alice and Bob",
    "start": "402139",
    "end": "407720"
  },
  {
    "text": "actually think that they're talking to each other they have no idea that's why authentication here is so critical however even with on authentication we",
    "start": "407720",
    "end": "414860"
  },
  {
    "text": "face a slightly different issue right how does Alice know that Bob certificate is really Bob's suppose for example that",
    "start": "414860",
    "end": "422150"
  },
  {
    "text": "Eve has a certificate and she just signed it with Bob's name how would Alice know any different and this is",
    "start": "422150",
    "end": "429050"
  },
  {
    "text": "where a certificate authority or a CA comes into play a CA is an entity that issues these digital certificates and",
    "start": "429050",
    "end": "435740"
  },
  {
    "text": "it's responsible for verifying the identity of the I 10 of the entities to which an issue those certificates so CA",
    "start": "435740",
    "end": "441919"
  },
  {
    "text": "acts as a trusted third party in in that system and that it's trusted by both the owner who owns a certificate like our",
    "start": "441919",
    "end": "449090"
  },
  {
    "text": "server Bob and it's also the trusted by the entity which is relying on the certificate to be true like our client",
    "start": "449090",
    "end": "454370"
  },
  {
    "text": "Alice CAS are chained so that more easily managed CAS are actually used for day-to-day operations so a root CA",
    "start": "454370",
    "end": "461449"
  },
  {
    "text": "assigns a root certificate like you see here which can then be used to sign intermediate certificates which can in",
    "start": "461449",
    "end": "466460"
  },
  {
    "text": "turn be used to sign leaf certificates in practice a root CA is one that's",
    "start": "466460",
    "end": "471560"
  },
  {
    "text": "widely trusted this allows users to ultimately only trust a handful of you know very small number of parties the",
    "start": "471560",
    "end": "477830"
  },
  {
    "text": "roots in order to be able to protect their communications and rely on things that are below those roots to get a",
    "start": "477830",
    "end": "484130"
  },
  {
    "text": "certificate an entity generates a key pair then the entity submits a certificate signing request or CSR to a",
    "start": "484130",
    "end": "490190"
  },
  {
    "text": "CA which contains the public key and the entity's identity and that's signed by",
    "start": "490190",
    "end": "495740"
  },
  {
    "text": "the CA a self signed certificate is a certificate which is signed by the same entity to which it's issued so note that",
    "start": "495740",
    "end": "502520"
  },
  {
    "text": "specifically a root certificate is actually a self signed certificate but we place more trust in it due to who",
    "start": "502520",
    "end": "507740"
  },
  {
    "text": "manages it and some of the processes they might have in place to actually manage those keys a really important",
    "start": "507740",
    "end": "512870"
  },
  {
    "text": "item to call out here what we're talking about kubernetes is is the difference between public web CAS and private CIA's",
    "start": "512870",
    "end": "518510"
  },
  {
    "text": "write a public CA is used to authenticate websites that you connect to on a public internet and has root",
    "start": "518510",
    "end": "523640"
  },
  {
    "text": "starts from a handful of trusted CAS those are usually shipped with like your browser or your device these web certs",
    "start": "523640",
    "end": "529370"
  },
  {
    "text": "me need to come from a public CA whereas a private CA might be used within an organization for example between",
    "start": "529370",
    "end": "535629"
  },
  {
    "text": "components and infrastructure kubernetes uses a private CA for components and you'll need to use a public CA for any",
    "start": "535629",
    "end": "541240"
  },
  {
    "text": "web apps that you host on Curb identities for example that you want what end users to connect you and when we talk about public key infrastructure",
    "start": "541240",
    "end": "547959"
  },
  {
    "text": "or PKI we're actually talking about all of this stuff we're talking about all these systems in your organization the CAS if you have any what C is you trust",
    "start": "547959",
    "end": "555250"
  },
  {
    "text": "your private keys your certificates how you manage the keys all of that stuff it's how you organize that entire an",
    "start": "555250",
    "end": "560410"
  },
  {
    "text": "entire infrastructure each organization's needs here going to be very specific so that how you set that",
    "start": "560410",
    "end": "566050"
  },
  {
    "text": "up should actually be dictated on your needs rather than me telling you what's what's the best practice in that regard one last item I want to cover to avoid",
    "start": "566050",
    "end": "572980"
  },
  {
    "text": "confusion is between keys and certificates when you generate a certificate you first need to generate",
    "start": "572980",
    "end": "579069"
  },
  {
    "text": "that asymmetric keeper like I just mentioned with a private and a public key your public key verifies who you say",
    "start": "579069",
    "end": "584649"
  },
  {
    "text": "you are and you can use that to have people send you messages whereas your",
    "start": "584649",
    "end": "590170"
  },
  {
    "text": "private key is how you prove who you are using signatures and you can read your",
    "start": "590170",
    "end": "595509"
  },
  {
    "text": "messages using decryption you make your public key well public right but to",
    "start": "595509",
    "end": "601059"
  },
  {
    "text": "verify that it's in fact your key like we were talking earlier about Alice and Bob it's signed by a certificate authority the certificate authority uses",
    "start": "601059",
    "end": "607959"
  },
  {
    "text": "their private key to sign the certificate effectively saying yes I attest the business Bob's key then the",
    "start": "607959",
    "end": "614259"
  },
  {
    "text": "entity examining your certificate like Alice only needs to verify and trust that signature in order to believe that",
    "start": "614259",
    "end": "619959"
  },
  {
    "text": "is in fact your public key so going back to earlier though with with a self-signed cert the entity it's just an",
    "start": "619959",
    "end": "626740"
  },
  {
    "text": "entity that signs their own public key with their own private key right that's what a self-signed cert is it's same entity that's doing both okay so now",
    "start": "626740",
    "end": "634899"
  },
  {
    "start": "634000",
    "end": "1059000"
  },
  {
    "text": "that we have some PKI basics covered let's dig into specifically what happens in kubernetes lots of people have",
    "start": "634899",
    "end": "642370"
  },
  {
    "text": "complained to me that setting up your equipment as CA is really hard and it's one of the hardest things to do if",
    "start": "642370",
    "end": "647410"
  },
  {
    "text": "you're writing commands yourself it's one of the first steps that you take and it's critical to your cluster security so you really want to get it right but",
    "start": "647410",
    "end": "653949"
  },
  {
    "text": "do you really understand what you should be doing so if you're using something like a hosted solution that's often",
    "start": "653949",
    "end": "659290"
  },
  {
    "text": "managed for you or here's incubating m so automatically generate certificates that you need so rather than digging",
    "start": "659290",
    "end": "665450"
  },
  {
    "text": "into how to generate certs I'm gonna talk about what the certs do and what they protect when you're setting up your",
    "start": "665450",
    "end": "672530"
  },
  {
    "text": "cluster if you do it yourself for example following Kelsey's communities the hard way you're gonna need to generate the CA config file certificate",
    "start": "672530",
    "end": "680000"
  },
  {
    "text": "and private key generate client and server certs for all the components the appropriate components and distribute",
    "start": "680000",
    "end": "686360"
  },
  {
    "text": "the private keys inserts to all those components by copying them into the master and worker nodes respectively that's actually a lot of work if you use",
    "start": "686360",
    "end": "693620"
  },
  {
    "text": "cube cube ATM then the certificates that your cluster requires are automatically generated similarly if you use a hosted",
    "start": "693620",
    "end": "699620"
  },
  {
    "text": "solution like gke this is done for you an alternative is actually not to have your cluster or a setup tool create",
    "start": "699620",
    "end": "705770"
  },
  {
    "text": "manage and install any of the keys for you that might make sense for a situation where you have a CA that you",
    "start": "705770",
    "end": "711410"
  },
  {
    "text": "were on outside of kubernetes and you just want to import the necessary certificates to your cluster that lets you rely on an external root of trust",
    "start": "711410",
    "end": "717500"
  },
  {
    "text": "you can also use Q ATM in this case it's something that it's a functionality called an external CA incubating and if",
    "start": "717500",
    "end": "724580"
  },
  {
    "text": "you are doing this the root CA can be outside kubernetes but you still lend me at minimum needs some intermediate CAS that kubernetes manage right the roots",
    "start": "724580",
    "end": "731060"
  },
  {
    "text": "there and it signs things that the intermediates use career days actually needs at least two CAS to operate the",
    "start": "731060",
    "end": "738080"
  },
  {
    "text": "equipment ease cluster CA sometimes called a cluster root CA and the xcd CA and optionally or slightly differently",
    "start": "738080",
    "end": "744800"
  },
  {
    "text": "the cube front proxy CA since this allows routing from the public internet you'll actually need that to serve public certs",
    "start": "744800",
    "end": "750440"
  },
  {
    "text": "so it's an it's an au category and we're not gonna we're not gonna cover it now you can route the cluster route see in",
    "start": "750440",
    "end": "758000"
  },
  {
    "text": "the Etsy DCA in a single CA like an external CA that we're just mentioning but you don't need to that's actually",
    "start": "758000",
    "end": "763160"
  },
  {
    "text": "what's assumed in the community's documentation as I mentioned earlier though you should set up your cluster certificates in a way that meets your",
    "start": "763160",
    "end": "768530"
  },
  {
    "text": "organization's needs these CA s issue certificates for various criminals",
    "start": "768530",
    "end": "774200"
  },
  {
    "text": "components the ones that we discussed at the very beginning in fact for client and server shirts for the cubelet api",
    "start": "774200",
    "end": "779300"
  },
  {
    "text": "server and at CD so what does that actually look like here's a quick summary of which bits have the certs",
    "start": "779300",
    "end": "785180"
  },
  {
    "text": "that we just talked about the cube API server has a server search and a client search so that I can talk to the cubelet",
    "start": "785180",
    "end": "791680"
  },
  {
    "text": "xcd has a peer certs and a server search Klein starts to talk to you the API",
    "start": "791680",
    "end": "796940"
  },
  {
    "text": "server and the xcd health check client and the front proxy client has a server",
    "start": "796940",
    "end": "802130"
  },
  {
    "text": "search your cubelets are also going to need certs but those aren't actually part of that initial setup I'd also",
    "start": "802130",
    "end": "808430"
  },
  {
    "text": "really recommend checking of the Cabernets documentation here there's a really nice table on all of these certs including what they're signed by if",
    "start": "808430",
    "end": "814370"
  },
  {
    "text": "their client or server starts and where the shorts actually live in your cluster the sed starts and keys like no surprise",
    "start": "814370",
    "end": "819829"
  },
  {
    "text": "live in ED CD so this was still a little bit confusing to me when I was learning this I was like I think of a CA as being",
    "start": "819829",
    "end": "826100"
  },
  {
    "text": "online and something I can just like send requests to and make things happen right like and just sign stuff so now",
    "start": "826100",
    "end": "831680"
  },
  {
    "text": "that I know where all the certs and keys are stored how do I actually sign things and that's a certificate signing request",
    "start": "831680",
    "end": "838329"
  },
  {
    "text": "so that's when a component goes to us goes to a CA and requests a site a cert signed for itself if you think to our",
    "start": "838329",
    "end": "845360"
  },
  {
    "text": "Kerberos components when and why would that actually happen well very commonly it would happen when a new node joins a",
    "start": "845360",
    "end": "852829"
  },
  {
    "text": "cluster and the cubelet needs a cubelet cert to talk to the API server so",
    "start": "852829",
    "end": "858050"
  },
  {
    "text": "luckily crew Briones provides a certificates API which lets you provision TLS certs signed by a certificate authority that you control",
    "start": "858050",
    "end": "864079"
  },
  {
    "text": "this allows for certificate signing request s' or CSRs and so the CAA certificates can be used by your",
    "start": "864079",
    "end": "869839"
  },
  {
    "text": "workloads to establish trust this features in beta and kubernetes note however that the Korean certificate",
    "start": "869839",
    "end": "875750"
  },
  {
    "text": "authority doesn't work out of the box you can configure an external signer to be used with this or you can use a built-in signer and tied to an existing",
    "start": "875750",
    "end": "882260"
  },
  {
    "text": "CA such as the cluster root CA that's a fairly common set up to activate the built-in signer you may have to pass the",
    "start": "882260",
    "end": "888260"
  },
  {
    "text": "cluster signing cert file flag and the cluster signing key file flag to cube",
    "start": "888260",
    "end": "893839"
  },
  {
    "text": "controller manager in the design to take the certificate signing request to stable there's also a proposal to allow multiple CA so that's something you're",
    "start": "893839",
    "end": "899870"
  },
  {
    "text": "interested in please go comment on github so to use this API Creed first you have to create a",
    "start": "899870",
    "end": "905810"
  },
  {
    "text": "certificate signing request it's a file with a particular format that is used to meet pkcs 10 and you can generate you",
    "start": "905810",
    "end": "912019"
  },
  {
    "text": "generated using a tool like CloudFlare SSL or CF SSL then send the request as",
    "start": "912019",
    "end": "917089"
  },
  {
    "text": "an object to the API server to trigger the kubernetes certificate signing request you can then also check its",
    "start": "917089",
    "end": "922459"
  },
  {
    "text": "status in the API server and then and this is the critical bit you need to get",
    "start": "922459",
    "end": "927889"
  },
  {
    "text": "their certificate signing request approved this is either done manually like bian and min or it can be",
    "start": "927889",
    "end": "933420"
  },
  {
    "text": "automated if you've configured an approver to meet certain criteria automatically that works well I really say that this is",
    "start": "933420",
    "end": "939630"
  },
  {
    "text": "critical because this is a back to lead delegating a trust for your entire cluster or anyone or any any system that",
    "start": "939630",
    "end": "945570"
  },
  {
    "text": "can approve these requests is able to decide who can be in your cluster and how they can talk to each other the",
    "start": "945570",
    "end": "951000"
  },
  {
    "text": "approver needs to authenticate the client asking for the cert and be really stringent in validating that request and you should only grant those permissions",
    "start": "951000",
    "end": "957090"
  },
  {
    "text": "carefully and finally once that csr is approved you can download the certificate distribute it to the",
    "start": "957090",
    "end": "962490"
  },
  {
    "text": "different components that need it and then use it you can also configure certificate rotation for these certs",
    "start": "962490",
    "end": "968210"
  },
  {
    "text": "your cubelet certs are valid for one year by default that means that they have a one year expiration so that they",
    "start": "968210",
    "end": "973860"
  },
  {
    "text": "don't have to be renewed too frequently and also because your nodes are probably going to change anyways right like cattle not pets right to check the",
    "start": "973860",
    "end": "981390"
  },
  {
    "text": "validity of a certificate in cube ADM you can check expiration with an appropriately named flag to renew your",
    "start": "981390",
    "end": "987390"
  },
  {
    "text": "starts well Q medium also takes care of this for you there will be new starts as part of a control plane upgrade it's not",
    "start": "987390",
    "end": "993360"
  },
  {
    "text": "recommended to only rely on this however if you have more complex needs but if you're regularly updating upgrading",
    "start": "993360",
    "end": "999060"
  },
  {
    "text": "anyways and you should be then this is an OK solution you can also manually renew certs by explicitly triggering a",
    "start": "999060",
    "end": "1006380"
  },
  {
    "text": "renewal with Q ADM certs renew to renew starts using the Search API just specify use API as part of the request and if",
    "start": "1006380",
    "end": "1013670"
  },
  {
    "text": "you want you can also just generate this the CSR is yourself like if you're using external CA or you can also just renew",
    "start": "1013670",
    "end": "1019400"
  },
  {
    "text": "single starts it doesn't have to be all the certs that you have and introduced in criminales 1.8 in beta cubelets or",
    "start": "1019400",
    "end": "1025910"
  },
  {
    "text": "rotation allows you to set an automatic rotation period which is even better at which point a new key will be generated and a new certificate requested before",
    "start": "1025910",
    "end": "1032630"
  },
  {
    "text": "the current certain expires once the new sort is available it can then be used to authenticate connections from the culet",
    "start": "1032630",
    "end": "1038240"
  },
  {
    "text": "to the api server just as it was doing before so to set this past the Quba process a rotate certificates flag which",
    "start": "1038240",
    "end": "1044750"
  },
  {
    "text": "will cause it to request a certificate one Coast expiry and past the cube controller manager and experimental cluster of signing duration flag which",
    "start": "1044750",
    "end": "1051980"
  },
  {
    "text": "controls how long the certificates are used for again something like a year it's reasonable but it really depends on your environment in this case",
    "start": "1051980",
    "end": "1059559"
  },
  {
    "start": "1059000",
    "end": "1346000"
  },
  {
    "text": "so now that we get how the certificates and the certificate authorities and communities work let's figure out how the communications that you have are",
    "start": "1059920",
    "end": "1066220"
  },
  {
    "text": "protected going back to our diagram I want to highlight a couple of flows",
    "start": "1066220",
    "end": "1071470"
  },
  {
    "text": "through the API server cube Linette CD that we're going to focus on one from the API server to the cubelet two from",
    "start": "1071470",
    "end": "1078880"
  },
  {
    "text": "the cubelet back to the api server three between the api server net CD four",
    "start": "1078880",
    "end": "1084640"
  },
  {
    "text": "between two instances of that CD and then five from an administrative these",
    "start": "1084640",
    "end": "1091450"
  },
  {
    "text": "one by one so first from the API server to the cubelet the API server might",
    "start": "1091450",
    "end": "1096970"
  },
  {
    "text": "communicate with the cubelet to fetch logs attached turning pods and provide port forwarding by default in criminales",
    "start": "1096970",
    "end": "1103330"
  },
  {
    "text": "your connection from the api server to the cubelet is protected with unauthenticated TLS these connections",
    "start": "1103330",
    "end": "1108760"
  },
  {
    "text": "terminate on your cubelets HTTP endpoint the API server does not verify the",
    "start": "1108760",
    "end": "1113830"
  },
  {
    "text": "qubits serving certificate which makes the connection subject to a person in the middle attacks and therefore unsafe to run over untrusted networks it might",
    "start": "1113830",
    "end": "1120970"
  },
  {
    "text": "be fine right like for example if you're running all of this on your own private network that's not necessarily a concern you can",
    "start": "1120970",
    "end": "1126550"
  },
  {
    "text": "force authentication here if you wanted if you want to using the cubelet certificate authority flag with the api server so that you specify a root cert",
    "start": "1126550",
    "end": "1133990"
  },
  {
    "text": "bundle which is then used to verify the cubelet server certificate you can also use SSH tunneling to avoid connecting",
    "start": "1133990",
    "end": "1140140"
  },
  {
    "text": "over an untrusted Network however SSH tunneling is actually deprecated in criminales so it doesn't address the actual authentication issue",
    "start": "1140140",
    "end": "1146230"
  },
  {
    "text": "so maybe not the best the best way of solving that issue no matter what you still verify authorization for request",
    "start": "1146230",
    "end": "1154270"
  },
  {
    "text": "to the cubelet api for other node components from the api server two nodes",
    "start": "1154270",
    "end": "1159670"
  },
  {
    "text": "pods and services running on that node the connection uses plain HTTP connections by default they're not",
    "start": "1159670",
    "end": "1164860"
  },
  {
    "text": "authenticated or encrypted but actually those kind of communications shouldn't really be happening anyways so but if",
    "start": "1164860",
    "end": "1171340"
  },
  {
    "text": "you if you are for some reason doing that you can specify an HTTP endpoint to encrypt the connection but that still",
    "start": "1171340",
    "end": "1176830"
  },
  {
    "text": "doesn't validate their certificates so there's no authentication or integrity for those flows okay let's go in the",
    "start": "1176830",
    "end": "1182350"
  },
  {
    "text": "reverse direction from the cubelet to the API server a cubelet will communicate with the API server to watch",
    "start": "1182350",
    "end": "1188110"
  },
  {
    "text": "for pods that it's supposed to run and report its own health the API server listens for connections on",
    "start": "1188110",
    "end": "1193480"
  },
  {
    "text": "secure HTTP port 443 for connections from other master components from the cubelet and from admittance so from",
    "start": "1193480",
    "end": "1200649"
  },
  {
    "text": "cluster components to the API server requests are over TLS there are many kinds of authentication to the API",
    "start": "1200649",
    "end": "1206049"
  },
  {
    "text": "server available and you can enable many of them but including specifically a mode called node authorizer which is",
    "start": "1206049",
    "end": "1212380"
  },
  {
    "text": "meant for these requests that are coming from cubelets the cubelet will use whatever it's specified in its own cube config which can be no two authorizer or",
    "start": "1212380",
    "end": "1219220"
  },
  {
    "text": "other authentication methods like if you wanted to use bearer tokens or something instead in order to be to be authorized",
    "start": "1219220",
    "end": "1225549"
  },
  {
    "text": "by the node authorizer cubelets have to use a credential that identifies as them as being in the system nodes group this",
    "start": "1225549",
    "end": "1231490"
  },
  {
    "text": "is provisioned in the cubed cert which specifies the identity of the cubelet when you use new authorizer",
    "start": "1231490",
    "end": "1236740"
  },
  {
    "text": "this connection is protected with m TLS since this connection has authentication integrity and encryption by default the",
    "start": "1236740",
    "end": "1243250"
  },
  {
    "text": "master can run on on trusted network so that's kind of exciting from the pot to the API server the pod can use a",
    "start": "1243250",
    "end": "1249340"
  },
  {
    "text": "kubernetes service account to talk to the API server once when the service account is created kubernetes",
    "start": "1249340",
    "end": "1254500"
  },
  {
    "text": "automatically injects the public certs and a bearer token into the pod and the pod is then able to communicate and",
    "start": "1254500",
    "end": "1259659"
  },
  {
    "text": "authenticate to the API server using server only authenticated TLS also to the same HTTP port 443 the client",
    "start": "1259659",
    "end": "1268210"
  },
  {
    "text": "certificates use the bearer tokens this protection also has authentication integrity and encryption which is great",
    "start": "1268210",
    "end": "1274919"
  },
  {
    "text": "ok now from the API server and at CD the API server net CD might communicate for",
    "start": "1274919",
    "end": "1280450"
  },
  {
    "text": "example to to ask for and return a secret for a particular workload from the API server to at CD the",
    "start": "1280450",
    "end": "1286690"
  },
  {
    "text": "communication is entirely over local host HTTP port 80 and it's not authenticated or encrypted now that",
    "start": "1286690",
    "end": "1292779"
  },
  {
    "text": "sounds scary but it's actually probably fine these components are in practice running on the same node so protecting",
    "start": "1292779",
    "end": "1298720"
  },
  {
    "text": "the local connection more significantly probably isn't needed but if you want to you can optionally set up TLS and client sort off to have",
    "start": "1298720",
    "end": "1306309"
  },
  {
    "text": "the API server verify its identity with the with the sed server and to do that in the API server pods back just set at",
    "start": "1306309",
    "end": "1313570"
  },
  {
    "text": "CD cert file and at CD key file flags and then in the reverse direction from at CD to the APS or as I noted earlier",
    "start": "1313570",
    "end": "1320320"
  },
  {
    "text": "the API server listens for connections on an HTTP port 4 4 3 and that includes those master components so this can",
    "start": "1320320",
    "end": "1325950"
  },
  {
    "text": "is authenticated using and this connection is authenticated using one of the SED certs so again despite being a",
    "start": "1325950",
    "end": "1331650"
  },
  {
    "text": "local connection and this is not unusual you just by being a local connection you have authentication integrity encryption",
    "start": "1331650",
    "end": "1338730"
  },
  {
    "text": "but that's not unusual as all the requests to the API server are authenticated in such a way or in some",
    "start": "1338730",
    "end": "1345300"
  },
  {
    "text": "in some way now from - between two different instances of sed an instance",
    "start": "1345300",
    "end": "1351840"
  },
  {
    "text": "of a TD might communicate with another instance of sed to keep state updated since XE D is a distributed datastore so",
    "start": "1351840",
    "end": "1358800"
  },
  {
    "text": "when an instance of sed sends a request to another instance that request has authenticated and encrypted using mutual TLS Exedy uses those peer certs that we",
    "start": "1358800",
    "end": "1365910"
  },
  {
    "text": "talked about earlier which are both client and server certs specifying the host identity and then lastly from the",
    "start": "1365910",
    "end": "1372600"
  },
  {
    "text": "administer now the admit is another main components I was talking about before but it's one of the most commonly asked",
    "start": "1372600",
    "end": "1378780"
  },
  {
    "text": "about questions so I'll just quickly summarize some options that you have here the admin might connect to the API server to say manage the cluster the",
    "start": "1378780",
    "end": "1386100"
  },
  {
    "text": "omim can also connect to the cubelet which requires cubelet authentication but we're not going to go into that the",
    "start": "1386100",
    "end": "1391280"
  },
  {
    "text": "amenities in TLS right there are many different kinds of authentication",
    "start": "1391280",
    "end": "1396390"
  },
  {
    "text": "methods available here including both tokens for example using Open ID Connect x5 and on Clyde certs basic auth using",
    "start": "1396390",
    "end": "1403200"
  },
  {
    "text": "static passwords enough indicating proxy and and more so if you're using the client cert method you can actually set",
    "start": "1403200",
    "end": "1409050"
  },
  {
    "text": "this up using the certificates API and from the certificate signing request API that we talked about earlier",
    "start": "1409050",
    "end": "1414320"
  },
  {
    "text": "you should ideally pick only one option or rather as few options as possible in",
    "start": "1414320",
    "end": "1419760"
  },
  {
    "text": "order to make this as easy for yourself to manage write and control the potential authentication surface unless",
    "start": "1419760",
    "end": "1424890"
  },
  {
    "text": "your specific application needs a particular authentication method you should disable it or rather not enable",
    "start": "1424890",
    "end": "1430470"
  },
  {
    "text": "it authentication isn't the only control here anyways you after authentication there's nonetheless authorization for",
    "start": "1430470",
    "end": "1436230"
  },
  {
    "text": "the event using our back note specifically that when anonymous authentication is enabled requests that",
    "start": "1436230",
    "end": "1441720"
  },
  {
    "text": "are not rejected by other off methods are considered anonymous requests and they can still perform actions that you",
    "start": "1441720",
    "end": "1446940"
  },
  {
    "text": "give permissions for so be very careful about about that in your authentication plan and there are other communications",
    "start": "1446940",
    "end": "1453570"
  },
  {
    "text": "that occur in your system that we didn't talk about like the queue scheduler and the cube controller manager talking to the cube API server",
    "start": "1453570",
    "end": "1459860"
  },
  {
    "text": "there's also communications that maybe might be part of your workload or your infrastructure so when no one might communicate with another node as part of",
    "start": "1459860",
    "end": "1465680"
  },
  {
    "text": "a specific workload there's no kubernetes components that require node to node communication but",
    "start": "1465680",
    "end": "1471230"
  },
  {
    "text": "when the node sends out requests to another node that request is protected as however you've limited near environment you can also again use a",
    "start": "1471230",
    "end": "1477050"
  },
  {
    "text": "certificate signing request API to give these node certificates for authentication if that's what you want to do and a pod might communicate with",
    "start": "1477050",
    "end": "1483950"
  },
  {
    "text": "another pod as part of a specific workload again no kubernetes components require this particular pod - pod",
    "start": "1483950",
    "end": "1489020"
  },
  {
    "text": "communication when the pod sends a request to another pod that request is neither authenticated gnorm cryptid",
    "start": "1489020",
    "end": "1494810"
  },
  {
    "text": "however you can restrict pod to pod traffic with like a network policy and you can encrypt that traffic using like",
    "start": "1494810",
    "end": "1500960"
  },
  {
    "text": "a service mesh like SDO or otherwise I'm amending application layer encryption all right",
    "start": "1500960",
    "end": "1507560"
  },
  {
    "start": "1507000",
    "end": "1684000"
  },
  {
    "text": "so pulling it all together how is traffic within your cluster then protected and how do credenza components",
    "start": "1507560",
    "end": "1513710"
  },
  {
    "text": "communicate securely in summary for the five flows that we've looked at one from",
    "start": "1513710",
    "end": "1519170"
  },
  {
    "text": "the API server to the cubelet this uses an authenticated TLS by default so your communications are encrypted but not",
    "start": "1519170",
    "end": "1525560"
  },
  {
    "text": "necessarily authenticated you'll need to specify at cubelet certificate authority and specify the HTTP endpoints for your",
    "start": "1525560",
    "end": "1531260"
  },
  {
    "text": "notes - from the cubelet to the api server this uses mutual TLS by default",
    "start": "1531260",
    "end": "1536540"
  },
  {
    "text": "so you get encryption integrity and authentication checkmark we're good 3",
    "start": "1536540",
    "end": "1541640"
  },
  {
    "text": "between the API server and @cd the api server talks to at CD / localhost which is not protected but like we said that's",
    "start": "1541640",
    "end": "1547820"
  },
  {
    "text": "probably ok and you can set up m TLS if you prefer and at CD talks to the API server / / HTTP and is authenticated",
    "start": "1547820",
    "end": "1555710"
  },
  {
    "text": "encrypted and has integrity between two instances of at CD these peer instances",
    "start": "1555710",
    "end": "1560750"
  },
  {
    "text": "communicate using mutual TLS and from the admin to the API server you have lots of options depending on your",
    "start": "1560750",
    "end": "1566720"
  },
  {
    "text": "authentication method just be careful with anonymous odd so I reckon",
    "start": "1566720",
    "end": "1572540"
  },
  {
    "text": "I'm going to call it a couple of additional optional controls you have there what might be different from we'll just described by default gke sets up",
    "start": "1572540",
    "end": "1579800"
  },
  {
    "text": "the cluster root CA in the NCD CA for you these are single cluster CAS so that if any one clusters private key were to",
    "start": "1579800",
    "end": "1585860"
  },
  {
    "text": "be compromised no other cluster is affected certs are issued by the cluster roots asserts that are issued by the",
    "start": "1585860",
    "end": "1591200"
  },
  {
    "text": "cluster roots you have a validity of five years right now it's your job to rotate those certs given that you might have other",
    "start": "1591200",
    "end": "1596820"
  },
  {
    "text": "dependencies on that CI and those sorts in your cluster you can do that by completing what's called a credential",
    "start": "1596820",
    "end": "1602850"
  },
  {
    "text": "rotation which it creates a new sort waits for you to update anything that needs that cert and then completes the",
    "start": "1602850",
    "end": "1608070"
  },
  {
    "text": "rotation by invalidating the old sir note that today that also requires a migration to new IP addresses starting",
    "start": "1608070",
    "end": "1615059"
  },
  {
    "text": "in gke 113 and higher the traffic from the API server to the Keyblade is authenticated by default in G KETV at",
    "start": "1615059",
    "end": "1622049"
  },
  {
    "text": "CDC a is fully managed for you and Google manages rotation of those shirts there's nothing there for you to do and the certificate signing request API is",
    "start": "1622049",
    "end": "1629039"
  },
  {
    "text": "also already set up for you and a set up to use the cluster route CA so there's an automatic approver that you can use",
    "start": "1629039",
    "end": "1634169"
  },
  {
    "text": "for those certs if you use a an option that we have called shielded gke nodes",
    "start": "1634169",
    "end": "1639330"
  },
  {
    "text": "the biggest difference is how the cubelets bootstrap credentials are protected that's what's actually used when submitting that certificate signing",
    "start": "1639330",
    "end": "1644940"
  },
  {
    "text": "request the certificate signing request is bound to the machine identity which is protected by a V TPM element so you",
    "start": "1644940",
    "end": "1651510"
  },
  {
    "text": "can't use that shared secret from anywhere but that note so basically what I'm trying to say is that no one else can pretend to be that node and go get a",
    "start": "1651510",
    "end": "1658049"
  },
  {
    "text": "certificate for that node that's actually really powerful if you're running on gke please please please enable shielded GK nodes it's a great",
    "start": "1658049",
    "end": "1664770"
  },
  {
    "text": "security feature and also ensures secure boot for your notes and lastly for user authentication basic auth and client",
    "start": "1664770",
    "end": "1670590"
  },
  {
    "text": "certs are not on by default in GK since 112 but if you have an older cluster that you've been updating please disable",
    "start": "1670590",
    "end": "1676140"
  },
  {
    "text": "those for cases where you don't need them and if you want to read more check out the documentation on cluster trusts that",
    "start": "1676140",
    "end": "1681720"
  },
  {
    "text": "explains how some of these things were conjugate some of you might also be familiar with the Center for Internet",
    "start": "1681720",
    "end": "1687210"
  },
  {
    "start": "1684000",
    "end": "1852000"
  },
  {
    "text": "Security or CIS benchmarks for kubernetes these were recently updated about a month ago to version 151.50 of",
    "start": "1687210",
    "end": "1694020"
  },
  {
    "text": "the benchmarks which apply to kubernetes version 1.15 I know that's confusing the numbers are not the same you might be",
    "start": "1694020",
    "end": "1700080"
  },
  {
    "text": "using these in your environment to verify that your environment is meeting the recommended best practices for security so I want to call out some of",
    "start": "1700080",
    "end": "1705690"
  },
  {
    "text": "the benchmark elements that specifically relate to cluster trust and the element that we've been discussing for the API",
    "start": "1705690",
    "end": "1711330"
  },
  {
    "text": "server 12.6 you should set up a cubelet certificate authority to verify the cubelet for communications from the api",
    "start": "1711330",
    "end": "1717840"
  },
  {
    "text": "server to the cubelet 1.2 29 you should set up a TLS connection between the api server net CD 1 dot 2.30 ensure that the",
    "start": "1717840",
    "end": "1725070"
  },
  {
    "text": "api server only sir traffic to encrypted HTTP endpoints for the controller manager 1 not 3.6 make",
    "start": "1725070",
    "end": "1732049"
  },
  {
    "text": "sure to rotate the cube load certs and for SPD basically all the recommendations in the sea-ice benchmarks are about getting this trust",
    "start": "1732049",
    "end": "1738289"
  },
  {
    "text": "model right so setup TLS setup client off ensure it C is only serving HTTP endpoints make sure the peer certs are",
    "start": "1738289",
    "end": "1745340"
  },
  {
    "text": "set up appropriately instead of a separate CA for at CD 3 dot 1.1 calls",
    "start": "1745340",
    "end": "1750379"
  },
  {
    "text": "out the pack line start off should not be used for users instead use OAuth or another such method and finally on the",
    "start": "1750379",
    "end": "1755929"
  },
  {
    "text": "cubelet 4 to 10 is to ensure that the cubelet only serves traffic on to HTTPS and for 2012 are about setting up",
    "start": "1755929",
    "end": "1763999"
  },
  {
    "text": "automated cert rotation for cuba client certs all in all nothing unexpected here",
    "start": "1763999",
    "end": "1769700"
  },
  {
    "text": "if you follow the recommendations that we've been talking about the whole time you'll be in a good spot on the CI smudge marks and to give you kind of a",
    "start": "1769700",
    "end": "1776600"
  },
  {
    "text": "one slide take away the best practices from today if you have to remember something from this talk first set up",
    "start": "1776600",
    "end": "1783109"
  },
  {
    "text": "your cluster using cube ATM if you're not using a managed service that does it for you this will be significantly simpler for you than doing it yourself",
    "start": "1783109",
    "end": "1789080"
  },
  {
    "text": "and you can still use an external CA please rotate your certs this doesn't have to be super frequent but either set",
    "start": "1789080",
    "end": "1795619"
  },
  {
    "text": "this up to do it automatically or do it manually on a regular enough basis so that minimally you know that you can do",
    "start": "1795619",
    "end": "1801289"
  },
  {
    "text": "it and you can do it if you want to have to do it if you have to do in the future in terms of some of the specific paths",
    "start": "1801289",
    "end": "1806509"
  },
  {
    "text": "that your that your cluster that are covered there are a couple of different options but again I'll call out the most high impact ones from the API server to",
    "start": "1806509",
    "end": "1814009"
  },
  {
    "text": "the cubelet use a cube with CA to authenticate the API server and from the cubelet to the aps or use the node",
    "start": "1814009",
    "end": "1819379"
  },
  {
    "text": "authorizer as your authentication as your authentication option and if you want it use a CA to establish trust for",
    "start": "1819379",
    "end": "1825350"
  },
  {
    "text": "other components you can use the cubelets of the korean certs api and finally if you running on GK",
    "start": "1825350",
    "end": "1830779"
  },
  {
    "text": "specifically please use shielded GK a nodes to protect qulet bootstrap potentials and perform a credential",
    "start": "1830779",
    "end": "1835789"
  },
  {
    "text": "rotation again on a regular enough basis so you can rotate the certs in your cluster routes yet so that's it I have a",
    "start": "1835789",
    "end": "1842450"
  },
  {
    "text": "couple of links here if you want to learn more about some of the stuff that we talked about and thank you very much",
    "start": "1842450",
    "end": "1848220"
  },
  {
    "text": "[Applause]",
    "start": "1848220",
    "end": "1854150"
  }
]