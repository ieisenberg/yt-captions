[
  {
    "text": "hello my name is Matt Ray I'm the",
    "start": "1959",
    "end": "3879"
  },
  {
    "text": "community manager for open cost and I'll",
    "start": "3879",
    "end": "5600"
  },
  {
    "text": "be your host for today's session a deep",
    "start": "5600",
    "end": "7560"
  },
  {
    "text": "dive on kubernetes cost monitoring with",
    "start": "7560",
    "end": "9400"
  },
  {
    "text": "open cost we're going to be digging into",
    "start": "9400",
    "end": "11799"
  },
  {
    "text": "the details for how open cost calculates",
    "start": "11799",
    "end": "14120"
  },
  {
    "text": "the cost of workloads running on your",
    "start": "14120",
    "end": "16039"
  },
  {
    "text": "kubernetes",
    "start": "16039",
    "end": "18400"
  },
  {
    "text": "clusters let's start with a quick",
    "start": "18400",
    "end": "20480"
  },
  {
    "text": "introduction to the open cost project if",
    "start": "20480",
    "end": "22480"
  },
  {
    "text": "you're not already familiar open cost is",
    "start": "22480",
    "end": "25199"
  },
  {
    "text": "the open source cncf project for",
    "start": "25199",
    "end": "26960"
  },
  {
    "text": "monitoring infrastructure and container",
    "start": "26960",
    "end": "28640"
  },
  {
    "text": "cost in real time initially it was",
    "start": "28640",
    "end": "30960"
  },
  {
    "text": "focused strictly on kubernetes cost but",
    "start": "30960",
    "end": "33079"
  },
  {
    "text": "we've recently expanded our",
    "start": "33079",
    "end": "34360"
  },
  {
    "text": "functionality into General Cloud cost as",
    "start": "34360",
    "end": "36399"
  },
  {
    "text": "well we won't be covering it in this",
    "start": "36399",
    "end": "38399"
  },
  {
    "text": "talk but check out the website for more",
    "start": "38399",
    "end": "40160"
  },
  {
    "text": "details on cloud costs open cost is both",
    "start": "40160",
    "end": "43320"
  },
  {
    "text": "a project and a specification for",
    "start": "43320",
    "end": "45160"
  },
  {
    "text": "modeling current and historical",
    "start": "45160",
    "end": "46719"
  },
  {
    "text": "kubernetes spend and resource allocation",
    "start": "46719",
    "end": "49239"
  },
  {
    "text": "let's take a look at the open cost",
    "start": "49239",
    "end": "52718"
  },
  {
    "text": "specification this is the document that",
    "start": "52760",
    "end": "54840"
  },
  {
    "text": "was written as a vendor neutral",
    "start": "54840",
    "end": "56199"
  },
  {
    "text": "specification for measuring and",
    "start": "56199",
    "end": "57760"
  },
  {
    "text": "allocating infrastructure and container",
    "start": "57760",
    "end": "59480"
  },
  {
    "text": "cost kubernets environments it was",
    "start": "59480",
    "end": "61920"
  },
  {
    "text": "written by a variety of experts across",
    "start": "61920",
    "end": "63760"
  },
  {
    "text": "many companies including Cube cost AWS",
    "start": "63760",
    "end": "66720"
  },
  {
    "text": "Red Hat Adobe Susa and many others the",
    "start": "66720",
    "end": "70159"
  },
  {
    "text": "point of the specification is to",
    "start": "70159",
    "end": "71720"
  },
  {
    "text": "identify how we split cost across",
    "start": "71720",
    "end": "73600"
  },
  {
    "text": "kubernetes",
    "start": "73600",
    "end": "74680"
  },
  {
    "text": "workloads and there are a lot of factors",
    "start": "74680",
    "end": "77479"
  },
  {
    "text": "to consider management fees expenses",
    "start": "77479",
    "end": "79920"
  },
  {
    "text": "from nodes persistent volumes attached",
    "start": "79920",
    "end": "82320"
  },
  {
    "text": "dis load balancers Network Ingress and",
    "start": "82320",
    "end": "86079"
  },
  {
    "text": "egress workload costs are committed",
    "start": "86079",
    "end": "88520"
  },
  {
    "text": "allocated costs they've been requested",
    "start": "88520",
    "end": "90840"
  },
  {
    "text": "from the kubernetes cluster so you're",
    "start": "90840",
    "end": "92720"
  },
  {
    "text": "paying for them from the cloud provider",
    "start": "92720",
    "end": "94840"
  },
  {
    "text": "billing API we get the numbers on the",
    "start": "94840",
    "end": "96759"
  },
  {
    "text": "left these are the raw metrics you're",
    "start": "96759",
    "end": "98680"
  },
  {
    "text": "paying for open cost allows you to view",
    "start": "98680",
    "end": "101159"
  },
  {
    "text": "these costs by the workload aggregations",
    "start": "101159",
    "end": "103000"
  },
  {
    "text": "on the right you can see CPU usage by",
    "start": "103000",
    "end": "105560"
  },
  {
    "text": "labels or GPU by deployments cost by",
    "start": "105560",
    "end": "108399"
  },
  {
    "text": "namespaces however it is you want to",
    "start": "108399",
    "end": "110200"
  },
  {
    "text": "query your cost All The kubernetes",
    "start": "110200",
    "end": "112399"
  },
  {
    "text": "Primitives for aggregating containers",
    "start": "112399",
    "end": "114240"
  },
  {
    "text": "are there and exposed in the API for",
    "start": "114240",
    "end": "117280"
  },
  {
    "text": "querying when a kubernetes note is",
    "start": "117280",
    "end": "119399"
  },
  {
    "text": "deployed on your Cloud it now has a",
    "start": "119399",
    "end": "121520"
  },
  {
    "text": "total cost total cluster costs are",
    "start": "121520",
    "end": "123799"
  },
  {
    "text": "everything associated with your",
    "start": "123799",
    "end": "125000"
  },
  {
    "text": "kubernetes deployment an open cost this",
    "start": "125000",
    "end": "127680"
  },
  {
    "text": "is your kubernets cluster the compute",
    "start": "127680",
    "end": "129599"
  },
  {
    "text": "nodes it's in the storage it consumes",
    "start": "129599",
    "end": "131840"
  },
  {
    "text": "and the overhead of the cluster",
    "start": "131840",
    "end": "133080"
  },
  {
    "text": "management any unallocated cost on the",
    "start": "133080",
    "end": "135519"
  },
  {
    "text": "kubernets cluster are cluster idle cost",
    "start": "135519",
    "end": "138120"
  },
  {
    "text": "you're paying for them but not directly",
    "start": "138120",
    "end": "139879"
  },
  {
    "text": "using them to run your applications",
    "start": "139879",
    "end": "142000"
  },
  {
    "text": "workloads are the actual applications",
    "start": "142000",
    "end": "144080"
  },
  {
    "text": "and containers allocated and running on",
    "start": "144080",
    "end": "146040"
  },
  {
    "text": "your kubernetes",
    "start": "146040",
    "end": "147959"
  },
  {
    "text": "nodes workload cost may be resource",
    "start": "147959",
    "end": "150640"
  },
  {
    "text": "usage costs or resource allocation costs",
    "start": "150640",
    "end": "153879"
  },
  {
    "text": "resource allocation costs are generally",
    "start": "153879",
    "end": "156040"
  },
  {
    "text": "things that have an hourly rate and",
    "start": "156040",
    "end": "158000"
  },
  {
    "text": "resource usage cost are by the amount",
    "start": "158000",
    "end": "160040"
  },
  {
    "text": "consumed like storage or bandwidth",
    "start": "160040",
    "end": "162800"
  },
  {
    "text": "workloads have allocated or usage",
    "start": "162800",
    "end": "167080"
  },
  {
    "text": "costs they may be usage costs or",
    "start": "167159",
    "end": "169440"
  },
  {
    "text": "allocation costs but they're directly",
    "start": "169440",
    "end": "171120"
  },
  {
    "text": "managed by the coupe scheduler we want",
    "start": "171120",
    "end": "173400"
  },
  {
    "text": "to measure these at the lowest level",
    "start": "173400",
    "end": "175040"
  },
  {
    "text": "possible so we can track this data along",
    "start": "175040",
    "end": "177120"
  },
  {
    "text": "any",
    "start": "177120",
    "end": "178280"
  },
  {
    "text": "Dimension the asset cost are the",
    "start": "178280",
    "end": "180400"
  },
  {
    "text": "individual nodes and overhead that make",
    "start": "180400",
    "end": "182080"
  },
  {
    "text": "up your kubernets cluster these are the",
    "start": "182080",
    "end": "184280"
  },
  {
    "text": "containers pods deployments persistent",
    "start": "184280",
    "end": "186480"
  },
  {
    "text": "volumes whatever it is in your",
    "start": "186480",
    "end": "188000"
  },
  {
    "text": "kubernetes cluster resource allocation",
    "start": "188000",
    "end": "190799"
  },
  {
    "text": "and usage cost generally contain the",
    "start": "190799",
    "end": "192519"
  },
  {
    "text": "node CPU Ram operating system and",
    "start": "192519",
    "end": "195000"
  },
  {
    "text": "potentially gpus these are calculated by",
    "start": "195000",
    "end": "197760"
  },
  {
    "text": "querying the kubernetes API C advisor",
    "start": "197760",
    "end": "200640"
  },
  {
    "text": "Cube State metrics and billing data this",
    "start": "200640",
    "end": "202879"
  },
  {
    "text": "is a simplification each of these breaks",
    "start": "202879",
    "end": "204840"
  },
  {
    "text": "down much further in the open cost",
    "start": "204840",
    "end": "207920"
  },
  {
    "text": "specification so let's calculate our",
    "start": "207920",
    "end": "209959"
  },
  {
    "text": "workload cost by answering the following",
    "start": "209959",
    "end": "211879"
  },
  {
    "text": "questions how long did the container run",
    "start": "211879",
    "end": "214599"
  },
  {
    "text": "how much CPU was allocated how much RAM",
    "start": "214599",
    "end": "217159"
  },
  {
    "text": "was allocated on which node did the",
    "start": "217159",
    "end": "219799"
  },
  {
    "text": "container run what is the price of CPU",
    "start": "219799",
    "end": "222720"
  },
  {
    "text": "on that node what is the price of RAM on",
    "start": "222720",
    "end": "225239"
  },
  {
    "text": "that",
    "start": "225239",
    "end": "227400"
  },
  {
    "text": "node a few quick notes on my setup I'm",
    "start": "228040",
    "end": "230879"
  },
  {
    "text": "running open cost",
    "start": "230879",
    "end": "232439"
  },
  {
    "text": "1.17.1 running on a two node eks cluster",
    "start": "232439",
    "end": "235680"
  },
  {
    "text": "on AWS with t3a medium instances I'm",
    "start": "235680",
    "end": "239720"
  },
  {
    "text": "using the default Prometheus",
    "start": "239720",
    "end": "241480"
  },
  {
    "text": "installation before the presentation I",
    "start": "241480",
    "end": "243879"
  },
  {
    "text": "created the stress namespace and ran the",
    "start": "243879",
    "end": "245879"
  },
  {
    "text": "stress NG application on it after that",
    "start": "245879",
    "end": "248640"
  },
  {
    "text": "ran for a while I deleted the",
    "start": "248640",
    "end": "250799"
  },
  {
    "text": "application I forwarded ports for",
    "start": "250799",
    "end": "252760"
  },
  {
    "text": "Prometheus the open cost UI and the open",
    "start": "252760",
    "end": "255040"
  },
  {
    "text": "cost API and I have a Google sheet that",
    "start": "255040",
    "end": "258479"
  },
  {
    "text": "you can use if you want to run the",
    "start": "258479",
    "end": "259639"
  },
  {
    "text": "calculations",
    "start": "259639",
    "end": "261840"
  },
  {
    "text": "yourself this is the Manifest for the",
    "start": "261840",
    "end": "264000"
  },
  {
    "text": "stress test we're running it's a stress",
    "start": "264000",
    "end": "265960"
  },
  {
    "text": "NG image we've configured it to give us",
    "start": "265960",
    "end": "267960"
  },
  {
    "text": "a good sample of data over time time",
    "start": "267960",
    "end": "270520"
  },
  {
    "text": "note that we've provided requests but",
    "start": "270520",
    "end": "272479"
  },
  {
    "text": "not limits limits would make our math a",
    "start": "272479",
    "end": "274639"
  },
  {
    "text": "lot less interesting as we'll",
    "start": "274639",
    "end": "277320"
  },
  {
    "text": "see first we want to answer the question",
    "start": "277320",
    "end": "280160"
  },
  {
    "text": "how long did the container run let's hop",
    "start": "280160",
    "end": "282680"
  },
  {
    "text": "over to Prometheus and run some",
    "start": "282680",
    "end": "284840"
  },
  {
    "text": "queries this container metric CU pod",
    "start": "284840",
    "end": "287680"
  },
  {
    "text": "container status running is from Cube",
    "start": "287680",
    "end": "289720"
  },
  {
    "text": "State",
    "start": "289720",
    "end": "291960"
  },
  {
    "text": "metrics first let's get the time range",
    "start": "297600",
    "end": "300039"
  },
  {
    "text": "for our container it was turned off so",
    "start": "300039",
    "end": "302360"
  },
  {
    "text": "we'll want to get the start and end in a",
    "start": "302360",
    "end": "304160"
  },
  {
    "text": "2-hour window we'll reuse this end time",
    "start": "304160",
    "end": "306639"
  },
  {
    "text": "with all our queries for consistency",
    "start": "306639",
    "end": "309160"
  },
  {
    "text": "we're not worried about the value on the",
    "start": "309160",
    "end": "310840"
  },
  {
    "text": "y- AIS it's always one we start",
    "start": "310840",
    "end": "313960"
  },
  {
    "text": "collecting values when the Pod starts",
    "start": "313960",
    "end": "315960"
  },
  {
    "text": "and stop when it ends it's collecting",
    "start": "315960",
    "end": "318120"
  },
  {
    "text": "every",
    "start": "318120",
    "end": "319039"
  },
  {
    "text": "minute our first time is at 1803 our end",
    "start": "319039",
    "end": "322639"
  },
  {
    "text": "time is 1936 so 1 hour and 33 minutes or",
    "start": "322639",
    "end": "327240"
  },
  {
    "text": "93 minutes we'll enter it into our",
    "start": "327240",
    "end": "329600"
  },
  {
    "text": "spreadsheet as 93 minutes ided by 60",
    "start": "329600",
    "end": "332919"
  },
  {
    "text": "giving us the number of hours the",
    "start": "332919",
    "end": "334800"
  },
  {
    "text": "container",
    "start": "334800",
    "end": "337159"
  },
  {
    "text": "ran next we want to find how much CPU",
    "start": "341840",
    "end": "344840"
  },
  {
    "text": "was",
    "start": "344840",
    "end": "345600"
  },
  {
    "text": "allocated container CPU allocation is a",
    "start": "345600",
    "end": "348639"
  },
  {
    "text": "metric provided by open cost will",
    "start": "348639",
    "end": "350639"
  },
  {
    "text": "provide the stress name space and the",
    "start": "350639",
    "end": "352720"
  },
  {
    "text": "stress pod to narrow it",
    "start": "352720",
    "end": "356360"
  },
  {
    "text": "down",
    "start": "358479",
    "end": "360919"
  },
  {
    "text": "we'll grab the evaluation time again and",
    "start": "360919",
    "end": "363199"
  },
  {
    "text": "set it to 2",
    "start": "363199",
    "end": "365479"
  },
  {
    "text": "hours looking at this output we see the",
    "start": "365479",
    "end": "368280"
  },
  {
    "text": "values range from our request floor of",
    "start": "368280",
    "end": "370639"
  },
  {
    "text": "50 m CPUs to nearly two full cores this",
    "start": "370639",
    "end": "374720"
  },
  {
    "text": "Behavior exemplifies the definition of",
    "start": "374720",
    "end": "377080"
  },
  {
    "text": "resource allocation which is the max of",
    "start": "377080",
    "end": "379560"
  },
  {
    "text": "request and usage we requested 50 m CPUs",
    "start": "379560",
    "end": "383840"
  },
  {
    "text": "but the actual usage is much higher",
    "start": "383840",
    "end": "386400"
  },
  {
    "text": "kubernetes has allocated the request",
    "start": "386400",
    "end": "388280"
  },
  {
    "text": "size for the container but we did not",
    "start": "388280",
    "end": "390400"
  },
  {
    "text": "provide a limit equal to our request",
    "start": "390400",
    "end": "392960"
  },
  {
    "text": "meaning that the cost of this container",
    "start": "392960",
    "end": "395160"
  },
  {
    "text": "varies over time depending on the amount",
    "start": "395160",
    "end": "396919"
  },
  {
    "text": "of CPU usage to make a calculation of",
    "start": "396919",
    "end": "399919"
  },
  {
    "text": "CPU usage for a period of time we're",
    "start": "399919",
    "end": "402360"
  },
  {
    "text": "going to take the average of the CPU",
    "start": "402360",
    "end": "404440"
  },
  {
    "text": "allocation we'll plug in the equation",
    "start": "404440",
    "end": "406479"
  },
  {
    "text": "into Prometheus for our time period and",
    "start": "406479",
    "end": "408759"
  },
  {
    "text": "take the average over time for our 2hour",
    "start": "408759",
    "end": "411440"
  },
  {
    "text": "window that is the average number of",
    "start": "411440",
    "end": "413440"
  },
  {
    "text": "CPUs allocated to this container for",
    "start": "413440",
    "end": "415759"
  },
  {
    "text": "this period of time that provides a",
    "start": "415759",
    "end": "418120"
  },
  {
    "text": "number that we can plug into our",
    "start": "418120",
    "end": "419560"
  },
  {
    "text": "spreadsheet now we have how much CPU was",
    "start": "419560",
    "end": "424560"
  },
  {
    "text": "allocated now let's get the amount of",
    "start": "426960",
    "end": "428879"
  },
  {
    "text": "memory allocated to our container this",
    "start": "428879",
    "end": "431319"
  },
  {
    "text": "query is similar to our CPU query we're",
    "start": "431319",
    "end": "433639"
  },
  {
    "text": "running the container memory allocation",
    "start": "433639",
    "end": "435440"
  },
  {
    "text": "bytes query for our",
    "start": "435440",
    "end": "438560"
  },
  {
    "text": "container we provided a request size of",
    "start": "441639",
    "end": "444240"
  },
  {
    "text": "50 megabytes and our stress application",
    "start": "444240",
    "end": "446599"
  },
  {
    "text": "is going over that floor our container",
    "start": "446599",
    "end": "449520"
  },
  {
    "text": "RAM usage varies over time as",
    "start": "449520",
    "end": "453198"
  },
  {
    "text": "well we'll divide the results by 1024 to",
    "start": "454960",
    "end": "458520"
  },
  {
    "text": "get kilobytes then by 1024 again to get",
    "start": "458520",
    "end": "461280"
  },
  {
    "text": "megabytes and then by 1024 again to get",
    "start": "461280",
    "end": "464159"
  },
  {
    "text": "gigabytes because that's the unit used",
    "start": "464159",
    "end": "466680"
  },
  {
    "text": "in our cost",
    "start": "466680",
    "end": "469400"
  },
  {
    "text": "calculations just like we did with the",
    "start": "470240",
    "end": "472159"
  },
  {
    "text": "CPU we'll want the average over",
    "start": "472159",
    "end": "476319"
  },
  {
    "text": "time",
    "start": "478319",
    "end": "481319"
  },
  {
    "text": "that provides another number that we can",
    "start": "481319",
    "end": "482919"
  },
  {
    "text": "plug into our",
    "start": "482919",
    "end": "484360"
  },
  {
    "text": "spreadsheet we now have our average CPU",
    "start": "484360",
    "end": "487360"
  },
  {
    "text": "and average RAM usage for the lifespan",
    "start": "487360",
    "end": "489520"
  },
  {
    "text": "of the",
    "start": "489520",
    "end": "491840"
  },
  {
    "text": "container on which node did the",
    "start": "492759",
    "end": "494680"
  },
  {
    "text": "container run is actually quite",
    "start": "494680",
    "end": "496479"
  },
  {
    "text": "straightforward the output from the CPU",
    "start": "496479",
    "end": "498599"
  },
  {
    "text": "and RAM queries already contained the",
    "start": "498599",
    "end": "500720"
  },
  {
    "text": "node the container was running on so we",
    "start": "500720",
    "end": "502879"
  },
  {
    "text": "don't need to make any new",
    "start": "502879",
    "end": "506000"
  },
  {
    "text": "queries using the node ID from our",
    "start": "506000",
    "end": "508360"
  },
  {
    "text": "previous output we'll plug that into the",
    "start": "508360",
    "end": "510639"
  },
  {
    "text": "node CPU hourly cost query to find the",
    "start": "510639",
    "end": "513760"
  },
  {
    "text": "price of CPU on that",
    "start": "513760",
    "end": "516959"
  },
  {
    "text": "node the node CPU hourly cost query",
    "start": "518320",
    "end": "521360"
  },
  {
    "text": "gives us a nice flat result in the graph",
    "start": "521360",
    "end": "523599"
  },
  {
    "text": "but we'll take the average for",
    "start": "523599",
    "end": "525200"
  },
  {
    "text": "consistency it doesn't really change",
    "start": "525200",
    "end": "527080"
  },
  {
    "text": "over time but this will protect us if",
    "start": "527080",
    "end": "528959"
  },
  {
    "text": "there were any pricing fluctuations from",
    "start": "528959",
    "end": "530720"
  },
  {
    "text": "our provider let's put the node name",
    "start": "530720",
    "end": "533560"
  },
  {
    "text": "into our",
    "start": "533560",
    "end": "536000"
  },
  {
    "text": "spreadsheet",
    "start": "538200",
    "end": "541200"
  },
  {
    "text": "and we'll put the CPU price for the node",
    "start": "544040",
    "end": "546040"
  },
  {
    "text": "as",
    "start": "546040",
    "end": "548199"
  },
  {
    "text": "well the only remaining question is what",
    "start": "548399",
    "end": "551079"
  },
  {
    "text": "was the price of RAM on the",
    "start": "551079",
    "end": "554240"
  },
  {
    "text": "Node we can paste the node from the",
    "start": "554279",
    "end": "556519"
  },
  {
    "text": "previous queries into the node Ram",
    "start": "556519",
    "end": "558720"
  },
  {
    "text": "hourly cost",
    "start": "558720",
    "end": "561680"
  },
  {
    "text": "query",
    "start": "568120",
    "end": "571120"
  },
  {
    "text": "again we'll take the average for",
    "start": "572640",
    "end": "574440"
  },
  {
    "text": "consistency and that gives us a nice",
    "start": "574440",
    "end": "576440"
  },
  {
    "text": "flat result in the graph as well we plug",
    "start": "576440",
    "end": "579640"
  },
  {
    "text": "this number into the spreadsheet and",
    "start": "579640",
    "end": "581360"
  },
  {
    "text": "that's the last",
    "start": "581360",
    "end": "583920"
  },
  {
    "text": "one once we have the numbers into our",
    "start": "583920",
    "end": "586320"
  },
  {
    "text": "spreadsheet we have a price for our",
    "start": "586320",
    "end": "587880"
  },
  {
    "text": "container running over time we have what",
    "start": "587880",
    "end": "590640"
  },
  {
    "text": "the CPU cost and the ram cost should be",
    "start": "590640",
    "end": "593040"
  },
  {
    "text": "and those add up to our total cost it's",
    "start": "593040",
    "end": "595440"
  },
  {
    "text": "only 5 cents but you're probably running",
    "start": "595440",
    "end": "597800"
  },
  {
    "text": "a lot more than just one container",
    "start": "597800",
    "end": "599440"
  },
  {
    "text": "container if we go to open cost we can",
    "start": "599440",
    "end": "602120"
  },
  {
    "text": "use a date range to narrow down our",
    "start": "602120",
    "end": "603800"
  },
  {
    "text": "window to see our running",
    "start": "603800",
    "end": "605480"
  },
  {
    "text": "container first set the breakdown to",
    "start": "605480",
    "end": "608560"
  },
  {
    "text": "container the date range of today is",
    "start": "608560",
    "end": "610959"
  },
  {
    "text": "probably fine but the URL for open cost",
    "start": "610959",
    "end": "613399"
  },
  {
    "text": "takes the parameters for the API so we",
    "start": "613399",
    "end": "615680"
  },
  {
    "text": "can get finer Grain on what we're seeing",
    "start": "615680",
    "end": "617920"
  },
  {
    "text": "we can change the window to 5 hours to",
    "start": "617920",
    "end": "620279"
  },
  {
    "text": "capture what we saw in",
    "start": "620279",
    "end": "622360"
  },
  {
    "text": "Prometheus there's our 5",
    "start": "622360",
    "end": "626040"
  },
  {
    "text": "cents if we quer the API we can see the",
    "start": "626399",
    "end": "629320"
  },
  {
    "text": "rod numbers used by the UI and compare",
    "start": "629320",
    "end": "631360"
  },
  {
    "text": "the",
    "start": "631360",
    "end": "633480"
  },
  {
    "text": "output notice we have our minutes of",
    "start": "646480",
    "end": "648760"
  },
  {
    "text": "time which reported 92 minutes instead",
    "start": "648760",
    "end": "651000"
  },
  {
    "text": "of the 93 we saw this can be a function",
    "start": "651000",
    "end": "653680"
  },
  {
    "text": "of the window of the query missing",
    "start": "653680",
    "end": "655399"
  },
  {
    "text": "either the first or last minute of data",
    "start": "655399",
    "end": "658320"
  },
  {
    "text": "CPU cord has the same average we",
    "start": "658320",
    "end": "660399"
  },
  {
    "text": "recorded and there's the CPU cost with",
    "start": "660399",
    "end": "662920"
  },
  {
    "text": "more significant digits than the UI",
    "start": "662920",
    "end": "666600"
  },
  {
    "text": "displayed and a ram by usage average as",
    "start": "669440",
    "end": "672760"
  },
  {
    "text": "well as the ram",
    "start": "672760",
    "end": "676200"
  },
  {
    "text": "costs let's record these numbers into",
    "start": "682000",
    "end": "684079"
  },
  {
    "text": "our spreadsheet for",
    "start": "684079",
    "end": "686880"
  },
  {
    "text": "comparison only 92 minutes we'll clear",
    "start": "687200",
    "end": "690800"
  },
  {
    "text": "out the previous values and paste in",
    "start": "690800",
    "end": "692920"
  },
  {
    "text": "from the API",
    "start": "692920",
    "end": "695720"
  },
  {
    "text": "output dividing by 1024 three",
    "start": "703000",
    "end": "707760"
  },
  {
    "text": "times with smaller numbers it's hard to",
    "start": "708639",
    "end": "710920"
  },
  {
    "text": "see the significant digits with larger",
    "start": "710920",
    "end": "713079"
  },
  {
    "text": "numbers it's going to be much closer if",
    "start": "713079",
    "end": "715560"
  },
  {
    "text": "we're comparing results and wondering",
    "start": "715560",
    "end": "717240"
  },
  {
    "text": "about slight differences it may be a",
    "start": "717240",
    "end": "719279"
  },
  {
    "text": "function of the resolution versus the",
    "start": "719279",
    "end": "721160"
  },
  {
    "text": "data available there may be slight",
    "start": "721160",
    "end": "723200"
  },
  {
    "text": "differences by the window we're",
    "start": "723200",
    "end": "724519"
  },
  {
    "text": "capturing this could be a function of",
    "start": "724519",
    "end": "726279"
  },
  {
    "text": "the resolution of our queries the the",
    "start": "726279",
    "end": "729320"
  },
  {
    "text": "resolution defaults to 60 seconds or 1",
    "start": "729320",
    "end": "731880"
  },
  {
    "text": "minute which is the default in the API",
    "start": "731880",
    "end": "734079"
  },
  {
    "text": "calls as well we can drop that number in",
    "start": "734079",
    "end": "736399"
  },
  {
    "text": "our Prometheus queries to ensure that we",
    "start": "736399",
    "end": "738199"
  },
  {
    "text": "get each data point the numbers will get",
    "start": "738199",
    "end": "740440"
  },
  {
    "text": "closer as we don't accidentally miss a",
    "start": "740440",
    "end": "742639"
  },
  {
    "text": "result on an overlapping boundary higher",
    "start": "742639",
    "end": "745760"
  },
  {
    "text": "resolution queries are much slower so we",
    "start": "745760",
    "end": "747959"
  },
  {
    "text": "tend to keep the resolution of quer is",
    "start": "747959",
    "end": "749560"
  },
  {
    "text": "higher especially when we're looking at",
    "start": "749560",
    "end": "751240"
  },
  {
    "text": "Daily values but we are pretty close in",
    "start": "751240",
    "end": "754079"
  },
  {
    "text": "our results and this makes sense because",
    "start": "754079",
    "end": "756560"
  },
  {
    "text": "the cost of our workloads are always",
    "start": "756560",
    "end": "758000"
  },
  {
    "text": "going to be a function of the time we're",
    "start": "758000",
    "end": "759519"
  },
  {
    "text": "looking at since workloads and nodes",
    "start": "759519",
    "end": "761639"
  },
  {
    "text": "come and go and the resolution of the",
    "start": "761639",
    "end": "763480"
  },
  {
    "text": "queries we",
    "start": "763480",
    "end": "766120"
  },
  {
    "text": "make so to sum up we answer these",
    "start": "768920",
    "end": "771720"
  },
  {
    "text": "questions with queries from Prometheus",
    "start": "771720",
    "end": "774440"
  },
  {
    "text": "we saw how open cost calculates the",
    "start": "774440",
    "end": "776279"
  },
  {
    "text": "duration of the container and the CPU",
    "start": "776279",
    "end": "778279"
  },
  {
    "text": "and RAM average usages if we' had gpus",
    "start": "778279",
    "end": "781639"
  },
  {
    "text": "we could have calculated them",
    "start": "781639",
    "end": "783399"
  },
  {
    "text": "similarly the price of the CPU and RAM",
    "start": "783399",
    "end": "785920"
  },
  {
    "text": "on the Node is derived from the billing",
    "start": "785920",
    "end": "787480"
  },
  {
    "text": "API and we multiply our average usage",
    "start": "787480",
    "end": "790279"
  },
  {
    "text": "against the price by the time these",
    "start": "790279",
    "end": "792760"
  },
  {
    "text": "calculations are relatively",
    "start": "792760",
    "end": "794120"
  },
  {
    "text": "straightforward hopefully this expands",
    "start": "794120",
    "end": "796199"
  },
  {
    "text": "your understanding of open cost",
    "start": "796199",
    "end": "799759"
  },
  {
    "text": "internals if you're not already involved",
    "start": "801519",
    "end": "803720"
  },
  {
    "text": "with open cost there are a lot of",
    "start": "803720",
    "end": "805000"
  },
  {
    "text": "resources available to you check out",
    "start": "805000",
    "end": "807120"
  },
  {
    "text": "open cost. to get started and joined the",
    "start": "807120",
    "end": "809680"
  },
  {
    "text": "open cost Community we're always eager",
    "start": "809680",
    "end": "811480"
  },
  {
    "text": "to see new folks we're mostly on slack",
    "start": "811480",
    "end": "814240"
  },
  {
    "text": "and GitHub with the fortn nightly open",
    "start": "814240",
    "end": "816199"
  },
  {
    "text": "cost Community meetings on the calendar",
    "start": "816199",
    "end": "817920"
  },
  {
    "text": "every other Thursday at 1: p.m.",
    "start": "817920",
    "end": "821600"
  },
  {
    "text": "Pacific I hope you found this",
    "start": "825800",
    "end": "827600"
  },
  {
    "text": "informative and useful to your",
    "start": "827600",
    "end": "829120"
  },
  {
    "text": "understanding of open cost calculations",
    "start": "829120",
    "end": "831519"
  },
  {
    "text": "thanks for taking the time to watch",
    "start": "831519",
    "end": "832839"
  },
  {
    "text": "today see you in the opcost",
    "start": "832839",
    "end": "836480"
  },
  {
    "text": "community",
    "start": "836519",
    "end": "839519"
  }
]