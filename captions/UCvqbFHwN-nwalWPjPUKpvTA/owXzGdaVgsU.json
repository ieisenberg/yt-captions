[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "hi everyone welcome to the rusty boat my name is taylor thomas and i'll let matt uh butcher introduce himself",
    "start": "80",
    "end": "6720"
  },
  {
    "text": "yeah i'm matt butcher um i lead an open source team at microsoft i've been working on all kinds of cloud",
    "start": "6720",
    "end": "13360"
  },
  {
    "text": "technologies over the last long time uh including helm uh kubernetes",
    "start": "13360",
    "end": "18480"
  },
  {
    "text": "uh brigade uh various paths platforms and even going back into openstack uh you can find me all",
    "start": "18480",
    "end": "25599"
  },
  {
    "text": "over the social media as always at technosofas so there you go and this is taylor",
    "start": "25599",
    "end": "31119"
  },
  {
    "text": "yeah and like he said i'm kind of a little bit less consistent with the social media so there's all my social media handles and that's just because",
    "start": "31119",
    "end": "37200"
  },
  {
    "text": "you know common name and common last name so it's kind of hard sometimes",
    "start": "37200",
    "end": "42480"
  },
  {
    "text": "um so first off i'm one of the crescent core maintainers we'll talk about that project a lot today",
    "start": "42480",
    "end": "47680"
  },
  {
    "text": "um and one a an emeritus uh helm core maintainer um i've also been doing uh containers in",
    "start": "47680",
    "end": "54000"
  },
  {
    "text": "kubernetes for a long time it makes me quite old in container years as we like to joke i've been just doing it for for a while",
    "start": "54000",
    "end": "60160"
  },
  {
    "text": "not as long as matt has but for a while and then um i am a uh restation what we call rust developers",
    "start": "60160",
    "end": "66799"
  },
  {
    "text": "right by way of go which makes sense given my background and so um we're going to go ahead and and kind",
    "start": "66799",
    "end": "72960"
  },
  {
    "text": "of kick off and talk about different things we've learned from rust and in cloud computing so this all kind of",
    "start": "72960",
    "end": "79520"
  },
  {
    "start": "73000",
    "end": "236000"
  },
  {
    "text": "started with an aha moment uh or maybe a couple of aha moments i was doing a one-on-one with uh with",
    "start": "79520",
    "end": "86400"
  },
  {
    "text": "one of the people on our team uh brian and we were kind of wandering around boulder this was summertime 2019. we had",
    "start": "86400",
    "end": "95040"
  },
  {
    "text": "a couple cups of iced coffee and we were just kind of walking around talking it was a couple of days before we all",
    "start": "95040",
    "end": "100720"
  },
  {
    "text": "got together for an on-site and uh as happens you know the",
    "start": "100720",
    "end": "105920"
  },
  {
    "text": "topic a led to topic b and all of a sudden we were talking about hey remember when assembly.js was going to",
    "start": "105920",
    "end": "111280"
  },
  {
    "text": "be the next big thing and we both sort of vowed to go off and look at this well unbeknownst to us other people on the team had",
    "start": "111280",
    "end": "117759"
  },
  {
    "text": "accidentally stumbled on the webassembly world at the same time uh and when we got together about a week",
    "start": "117759",
    "end": "124240"
  },
  {
    "text": "later we had this kind of brainstorming session and we all sort of blurted out at the same time wouldn't it be fun to",
    "start": "124240",
    "end": "130479"
  },
  {
    "text": "work on webassembly and who's doing what with webassembly and here's some ideas and if you take a look at the",
    "start": "130479",
    "end": "135920"
  },
  {
    "text": "webassembly ecosystem these days they're really kind of two prongs of the cutting edge there's the m",
    "start": "135920",
    "end": "141200"
  },
  {
    "text": "script in javascript implementation and then there's a whole bunch of work uh much of which started out of mozilla",
    "start": "141200",
    "end": "147360"
  },
  {
    "text": "that's really oriented more around rust and so we kind of came to rust we'd all",
    "start": "147360",
    "end": "152480"
  },
  {
    "text": "dabbled with it here and there but really our first production endeavors with rust all had to do with",
    "start": "152480",
    "end": "158160"
  },
  {
    "text": "web assembly and kubernetes uh and and that's kind of what got us originally started on it but we feel",
    "start": "158160",
    "end": "164400"
  },
  {
    "text": "really good about that selection and uh and here's why yeah so the really these are kind of the over",
    "start": "164400",
    "end": "171440"
  },
  {
    "text": "overarching reasons why we picked rust and and then we'll go a little bit deeper into each into all the things we",
    "start": "171440",
    "end": "177440"
  },
  {
    "text": "discussed here so first off we have safety if you're here at a rest conference you probably know that but",
    "start": "177440",
    "end": "183440"
  },
  {
    "text": "just to mention it like safety is a huge thing with rest and that was an excellent benefit that we picked up",
    "start": "183440",
    "end": "188959"
  },
  {
    "text": "basically for free for using the language um the developer experience in rest is quite amazing which we'll",
    "start": "188959",
    "end": "194640"
  },
  {
    "text": "also dive into and like matt mentioned we have wasm support in it wasm support in rust",
    "start": "194640",
    "end": "201200"
  },
  {
    "text": "is probably one of the best of all the languages at least for the um side wasm that's meant for the server side",
    "start": "201200",
    "end": "207360"
  },
  {
    "text": "and then there's an extensibility thing with with rest apis that's just really elegant and beautiful",
    "start": "207360",
    "end": "213040"
  },
  {
    "text": "that has been very helpful as we've extended external apis and also consumed other internal apis which we'll talk",
    "start": "213040",
    "end": "218879"
  },
  {
    "text": "about here yeah so oh yeah something that really kind of transformed the way we",
    "start": "218879",
    "end": "224879"
  },
  {
    "text": "did a lot of development especially having come from go where the extensibility isn't quite at the same",
    "start": "224879",
    "end": "231200"
  },
  {
    "text": "language level as it is in rust and that has been sort of a big and compelling reason why we've switched a lot of our",
    "start": "231200",
    "end": "237040"
  },
  {
    "start": "236000",
    "end": "741000"
  },
  {
    "text": "development there rust is usually considered a systems development language but",
    "start": "237040",
    "end": "243280"
  },
  {
    "text": "we've been using it almost exclusively on our team for cloud development and have found it to",
    "start": "243280",
    "end": "248480"
  },
  {
    "text": "be very much a good fit cloud development of course is a type of system development but often with a lot",
    "start": "248480",
    "end": "253920"
  },
  {
    "text": "more emphasis on http and networking and things like that that uh our colleagues originally were saying",
    "start": "253920",
    "end": "260160"
  },
  {
    "text": "but why did you choose rust for that wouldn't you just use language x or language y how come you didn't just stay",
    "start": "260160",
    "end": "265680"
  },
  {
    "text": "with go yeah and so we really just wanted to talk about that's what the first part of this",
    "start": "265680",
    "end": "271280"
  },
  {
    "text": "this talk is going to be about we're going to kind of go over well how does rust look in cloud native development and then we're going to go into a very specific",
    "start": "271280",
    "end": "278479"
  },
  {
    "text": "example of how we reverse engineered kubelet and a bunch of kubernetes things and show the different components",
    "start": "278479",
    "end": "283919"
  },
  {
    "text": "of rust that we used so we're going to talk about this in good bad and ugly and so let's go ahead",
    "start": "283919",
    "end": "289040"
  },
  {
    "text": "and break into the good stuff so one of the good things we love is traits traits are pretty much amazing",
    "start": "289040",
    "end": "295520"
  },
  {
    "text": "there's not really a better way to say that they are flexible they're expressive we've loved",
    "start": "295520",
    "end": "301120"
  },
  {
    "text": "the conversion reference uh traits like the ones displayed here so this is like from try from",
    "start": "301120",
    "end": "306240"
  },
  {
    "text": "from string d ref all those different traits because it allows just such flexible things",
    "start": "306240",
    "end": "313199"
  },
  {
    "text": "compared to other interface types we consider traits to be better than pretty much most other interface style types",
    "start": "313199",
    "end": "318320"
  },
  {
    "text": "because the type itself doesn't even have to implement the an interface to be used as another",
    "start": "318320",
    "end": "323919"
  },
  {
    "text": "type dref is really nice for picking up methods from underneath it's it's just pretty awesome",
    "start": "323919",
    "end": "329199"
  },
  {
    "text": "this is an example from our bundle project which we won't talk about here but it just allows us to pass in pretty",
    "start": "329199",
    "end": "334400"
  },
  {
    "text": "much any type that can be parsed as a string and then a few others and convert it into our internal id type",
    "start": "334400",
    "end": "340000"
  },
  {
    "text": "which is really really powerful compared to other languages we've used yeah and we really found that we were misusing traits",
    "start": "340000",
    "end": "346400"
  },
  {
    "text": "originally that we were thinking of traits more like go interfaces or java interfaces and",
    "start": "346400",
    "end": "352479"
  },
  {
    "text": "taylor put this one up here because i think this was representative of sort of his aha moment that traits were far more powerful if",
    "start": "352479",
    "end": "359280"
  },
  {
    "text": "you thought about them from the rust perspective instead of some of these others and another feature that we've really",
    "start": "359280",
    "end": "365199"
  },
  {
    "text": "liked that that took us you know more than a few moments to realize how powerful it was was uh enums",
    "start": "365199",
    "end": "371520"
  },
  {
    "text": "and here we've got an example from error handling and enums yeah now this error handling i always have people ask",
    "start": "371520",
    "end": "377199"
  },
  {
    "text": "well why don't you use just this error crate this is actually using this error crate i just it's already fat and big so i didn't",
    "start": "377199",
    "end": "383840"
  },
  {
    "text": "want to include any more but using some of the other crates and just leveraging these enums",
    "start": "383840",
    "end": "389199"
  },
  {
    "text": "allow for really really expressive errors and so they're not just like single values but they can carry associated data so",
    "start": "389199",
    "end": "396000"
  },
  {
    "text": "each variant can have different data structures like a discriminated union and then you can work with these using",
    "start": "396000",
    "end": "401520"
  },
  {
    "text": "pattern matching so this pattern matching is converting some types over for us in our real code and so we're able",
    "start": "401520",
    "end": "408000"
  },
  {
    "text": "to make sure that we handle every single kind and get the data out all in one beautiful statement i mean",
    "start": "408000",
    "end": "413919"
  },
  {
    "text": "you can read this coming from any language um that you and you'll go like oh i see what this is doing like",
    "start": "413919",
    "end": "420080"
  },
  {
    "text": "you might go what's this unwrapper default or what's this like some of it might be weird but like the basic structure of what it's doing",
    "start": "420080",
    "end": "426560"
  },
  {
    "text": "is really really um elegant and powerful and we see this um all over the place we've just kind of",
    "start": "426560",
    "end": "432319"
  },
  {
    "text": "like matt said had this aha moment like wow like you can use these for some amazing uh cases in particular",
    "start": "432319",
    "end": "439199"
  },
  {
    "text": "errors now macros uh let's just say we we absolutely love macros now they",
    "start": "439199",
    "end": "446639"
  },
  {
    "text": "writing them can be a little finicky but we're not going to worry about that right now just be aware that that happens we've learned that",
    "start": "446639",
    "end": "452560"
  },
  {
    "text": "quite a bit but macros are great for cloud development",
    "start": "452560",
    "end": "458479"
  },
  {
    "text": "because there's so many times we're consuming external apis so seeing that this is a kubernetes adjacent event right now you probably",
    "start": "458479",
    "end": "464800"
  },
  {
    "text": "know what a crd is if not it's a custom resource definition a hook into the kubernetes api in go",
    "start": "464800",
    "end": "471120"
  },
  {
    "text": "even with all these other libraries that people have generated you still have to auto generate code and",
    "start": "471120",
    "end": "476879"
  },
  {
    "text": "commit code and have all these different things to make it work here literally i have the data i care",
    "start": "476879",
    "end": "483919"
  },
  {
    "text": "about specified and then i can derive custom resource and pass it basically some configuration",
    "start": "483919",
    "end": "489919"
  },
  {
    "text": "and i automatically when the thing's built that code expands out to all the code needed implement i",
    "start": "489919",
    "end": "496000"
  },
  {
    "text": "don't have to commit anything it builds it correctly every time you can also see this inheriting no i'm not inheriting that's",
    "start": "496000",
    "end": "502479"
  },
  {
    "text": "the wrong word in rest but taking and deriving a json schema so we're attaching a whole json schema to this",
    "start": "502479",
    "end": "508720"
  },
  {
    "text": "object basically for free so this we as a matt and i were talking over this code sample",
    "start": "508720",
    "end": "515360"
  },
  {
    "text": "we realized that this block of code in go where you would generally write something like this is probably at least 200 lines if not",
    "start": "515360",
    "end": "523200"
  },
  {
    "text": "more and a lot of it is just committed or auto updated code and this is 10. that is so powerful we're deriving",
    "start": "523200",
    "end": "531440"
  },
  {
    "text": "serialization deserialization and macros all do that for you for free yeah and all the things that are being",
    "start": "531440",
    "end": "537680"
  },
  {
    "text": "hidden from you here are things that we don't really as developers care all that much about it's what would normally be boilerplate code",
    "start": "537680",
    "end": "544320"
  },
  {
    "text": "another thing we really have enjoyed when it comes to reducing the number of lines of code that you have to write",
    "start": "544320",
    "end": "549680"
  },
  {
    "text": "is the way you can do error handling in the way you do iterators in rust uh again this this particular",
    "start": "549680",
    "end": "555680"
  },
  {
    "text": "example probably would be uh two three four hundred lines of go code with lots of",
    "start": "555680",
    "end": "560800"
  },
  {
    "text": "with the the uh cyclomatic complexity of it would have been fairly deep because you'd have a lot of nested ifs",
    "start": "560800",
    "end": "566800"
  },
  {
    "text": "and a lot of nested loops and it's just so elegant to look at code like this and see everything sort of laid out laid out",
    "start": "566800",
    "end": "573839"
  },
  {
    "text": "linearly and again we find the readability of this to be very high i remember taylor i don't",
    "start": "573839",
    "end": "579600"
  },
  {
    "text": "think you liked this style at first uh has that changed i i still it's",
    "start": "579600",
    "end": "585279"
  },
  {
    "text": "sometimes can be a little bit hard to read especially with these kinds of examples but i have come around to really liking how",
    "start": "585279",
    "end": "591519"
  },
  {
    "text": "some like just some of the magic that happens here because this example in particular is doing a",
    "start": "591519",
    "end": "597120"
  },
  {
    "text": "whole fanout fan in asynchronous compute task in 20 lines of code",
    "start": "597120",
    "end": "604560"
  },
  {
    "text": "uh so that is that is really cool to see that happen um and so i know that it can be a little",
    "start": "604560",
    "end": "611760"
  },
  {
    "text": "hard to read coming in but like once you see how it's working it starts becoming a lot clearer",
    "start": "611760",
    "end": "618399"
  },
  {
    "text": "now dependency management okay this is where we are this is a very high on our impre",
    "start": "618399",
    "end": "623839"
  },
  {
    "text": "on our very uh impressive uh list of rust features and we're gonna have to make a confession",
    "start": "623839",
    "end": "629360"
  },
  {
    "text": "we pretty much love cargo like love it uh it is flexible it tells you",
    "start": "629360",
    "end": "635519"
  },
  {
    "text": "exactly what's wrong when a version can't resolve and it really it's another thing that",
    "start": "635519",
    "end": "640800"
  },
  {
    "text": "where we feel like it's completely changed how we look at dependency management and this just shows some examples here",
    "start": "640800",
    "end": "646320"
  },
  {
    "text": "but you can patch in dependencies from other places and these four show four different ways",
    "start": "646320",
    "end": "651519"
  },
  {
    "text": "you can do stuff so in the top example we're pulling in only a very small portion of basically",
    "start": "651519",
    "end": "656800"
  },
  {
    "text": "what's a big auto-generated open api spec and we're just pulling in exactly what we need we're not pulling in",
    "start": "656800",
    "end": "662399"
  },
  {
    "text": "this massive code base and compiling it all in with uh the struct with struct opt we expose and cresla an",
    "start": "662399",
    "end": "669279"
  },
  {
    "text": "optional command line flag which is what's shown below if a user specifies it it downloads all",
    "start": "669279",
    "end": "674560"
  },
  {
    "text": "the command line management stuff and all these other structs arranging the ops but if you're not and you don't want to",
    "start": "674560",
    "end": "679760"
  },
  {
    "text": "use a command line tool for it you don't have to include it the dependency doesn't get pulled down",
    "start": "679760",
    "end": "685360"
  },
  {
    "text": "the structs don't get compiled in which is amazing and then you can also do stuff like the bottom where you're",
    "start": "685360",
    "end": "690560"
  },
  {
    "text": "pointing to a local path so when you're local it's going to use a local path but when you push it up into",
    "start": "690560",
    "end": "695680"
  },
  {
    "text": "crates it uses the proper version so i mean these are just two examples but we",
    "start": "695680",
    "end": "701200"
  },
  {
    "text": "love cargo and this is coming from people we have both worked on multiple dependency management",
    "start": "701200",
    "end": "707120"
  },
  {
    "text": "and and package management systems like helm and cnab and and glide and things like that and we",
    "start": "707120",
    "end": "712880"
  },
  {
    "text": "just we look at cargo and we're like ah well this is just better than all of those things that we wrote",
    "start": "712880",
    "end": "718240"
  },
  {
    "text": "but i think the last thing we really wanted to highlight in the good one is the community we found the rest community to be very open very",
    "start": "718240",
    "end": "725440"
  },
  {
    "text": "easy to work with uh kind of exuberant about collaboration and improving the ecosystem in sort of a",
    "start": "725440",
    "end": "732320"
  },
  {
    "text": "deliberate rational and also good-hearted way uh and while we don't anything else you",
    "start": "732320",
    "end": "738240"
  },
  {
    "text": "want to add to that before we go no not not really that that covers it uh we do want to be honest and talk about",
    "start": "738240",
    "end": "744639"
  },
  {
    "start": "741000",
    "end": "909000"
  },
  {
    "text": "the bad and the ugly so we'll dive into this section which admittedly is shorter and some of these things might surprise you others of them",
    "start": "744639",
    "end": "751279"
  },
  {
    "text": "i doubt they will yeah so let's start off with dachshund clarity this is an interesting one that",
    "start": "751279",
    "end": "756959"
  },
  {
    "text": "people go like oh i didn't really think about that so a pattern that we've seen in lots of great documentation",
    "start": "756959",
    "end": "762800"
  },
  {
    "text": "um that's something to really be aware of as you consume things especially if you're new to rust and especially rust with cloud nano development",
    "start": "762800",
    "end": "768639"
  },
  {
    "text": "is that the docks are sometimes very unclear about what is happening in the actual code they describe the",
    "start": "768639",
    "end": "774000"
  },
  {
    "text": "functionality well but then you have to go digging through the code to find out whether it is a zero cost abstraction or if there's side effects so like is",
    "start": "774000",
    "end": "780800"
  },
  {
    "text": "something flushing a file oftentimes it doesn't tell you and i have to go down on the code and figure out what's going on but you also get",
    "start": "780800",
    "end": "786560"
  },
  {
    "text": "what's displayed here so this is something from the tonic crate which i'll talk a little about a little bit later",
    "start": "786560",
    "end": "792320"
  },
  {
    "text": "and as a new developer when you come in and you see this code you just go what is going on here and you like click through well",
    "start": "792320",
    "end": "799519"
  },
  {
    "text": "what's this make connection and it's like linking to another trait in another crate which links to two more",
    "start": "799519",
    "end": "804880"
  },
  {
    "text": "traits and another crate and you're like whoa like what am i supposed to implement here turns out all we needed was the little code snippet",
    "start": "804880",
    "end": "811440"
  },
  {
    "text": "below which is quite simple but um what had happened is there was an example in the examples",
    "start": "811440",
    "end": "817760"
  },
  {
    "text": "directory of the of the actual repo but the first thought wasn't to go look there now granted this is before they",
    "start": "817760",
    "end": "823920"
  },
  {
    "text": "change they've updated these docs and it points to that new example and it's great but this is something we saw quite a bit of",
    "start": "823920",
    "end": "831040"
  },
  {
    "text": "as we started things so just remember to keep your docs clear as you write stuff and be aware that you might have to dig",
    "start": "831040",
    "end": "836240"
  },
  {
    "text": "a little bit to understand what this is asking um you to implement yeah and we'll go a",
    "start": "836240",
    "end": "841760"
  },
  {
    "text": "little bit faster through the remainder of the bad and ugly section so we can get to some of the more exciting stuff",
    "start": "841760",
    "end": "847199"
  },
  {
    "text": "um but one of the things we did run into is that a lot of times uh when you're in a new ecosystem you",
    "start": "847199",
    "end": "853279"
  },
  {
    "text": "have to write more code yourself there are many crates out there already but sometimes we just don't find the",
    "start": "853279",
    "end": "858800"
  },
  {
    "text": "things we need and we have to re-implement them either to glue different crates together or to to",
    "start": "858800",
    "end": "864320"
  },
  {
    "text": "provide an implementation that simply doesn't exist yeah for example here grpc on windows uh",
    "start": "864320",
    "end": "871120"
  },
  {
    "text": "not jrpci sockets on windows so we're just gonna skip over that unholy code and talk about the learning curve uh the",
    "start": "871120",
    "end": "878240"
  },
  {
    "text": "learning curve is something that people often mention but what we want to point out is actually the learning curve it is logarithmic it just has a very",
    "start": "878240",
    "end": "884639"
  },
  {
    "text": "steep initial curve and it flattens out but there's one other little bump we ran into and that is how to design proper apis so that first",
    "start": "884639",
    "end": "891600"
  },
  {
    "text": "example with traits was you with using try into that was when i finally got it but it took a lot of looking at other crates",
    "start": "891600",
    "end": "898160"
  },
  {
    "text": "and understanding what was going on about what makes a good and flexible rest api when you design them users love them but",
    "start": "898160",
    "end": "905279"
  },
  {
    "text": "sometimes getting there is a bit of a hiccup so with that let's go into the ugly",
    "start": "905279",
    "end": "910560"
  },
  {
    "start": "909000",
    "end": "995000"
  },
  {
    "text": "which is just one thing it's async now to be clear i don't want this is not bashing on",
    "start": "910560",
    "end": "916000"
  },
  {
    "text": "anything i have worked with these people i've talked to these people um they've started a working group this is not that i'm just pointing out",
    "start": "916000",
    "end": "922399"
  },
  {
    "text": "what you're going to run into in the cloud native space and the first off is this competing and incompatible runtime so",
    "start": "922399",
    "end": "928480"
  },
  {
    "text": "you have multiple runtimes tokyo async standard small and it's possible to",
    "start": "928480",
    "end": "934079"
  },
  {
    "text": "um use interchangeable ones but a lot of times once you buy into a stack you're kind of stuck there and you have",
    "start": "934079",
    "end": "940880"
  },
  {
    "text": "a little bit of lock-in it's not perfect and it depends on what you're doing um sometimes there's shim layers that you can add in but just keep that aware",
    "start": "940880",
    "end": "948240"
  },
  {
    "text": "um here we have our ugly code uh i hope these code examples show exactly what we're talking about but there's so many",
    "start": "948240",
    "end": "953839"
  },
  {
    "text": "chained calls and that one on the left was one that we called move clone move clone move clone with clone",
    "start": "953839",
    "end": "960000"
  },
  {
    "text": "because i mean we know exactly where the date is going but to make rest happy we had to move something then clone it",
    "start": "960000",
    "end": "965199"
  },
  {
    "text": "then move it again then clone it then move it again to make it so that it was all in the right place and again all this in context of async",
    "start": "965199",
    "end": "973199"
  },
  {
    "text": "right yes all this is async related to async this is not outside of async this doesn't happen but",
    "start": "973199",
    "end": "979680"
  },
  {
    "text": "something to be aware of and then that also adds some craft and bloat where you're re-implementing async",
    "start": "979680",
    "end": "985120"
  },
  {
    "text": "methods for a type that's already async i would be rich if i had money for every single time i had to re-implement async",
    "start": "985120",
    "end": "990800"
  },
  {
    "text": "read or write for a type that's async underneath the hood but it's constantly getting better so",
    "start": "990800",
    "end": "996320"
  },
  {
    "text": "for this last part of our presentation we wanted to switch and focus on uh sort of what happened when we decided",
    "start": "996320",
    "end": "1002320"
  },
  {
    "text": "we wanted to build this project crestlet it was going to be a kubernetes kubelet written in rust",
    "start": "1002320",
    "end": "1007920"
  },
  {
    "text": "uh and kind of walk you through uh the initial stages and then some of the things that caused us to have to really",
    "start": "1007920",
    "end": "1014079"
  },
  {
    "text": "dive deeply into the the under the underbelly of kubernetes and how rust",
    "start": "1014079",
    "end": "1019920"
  },
  {
    "text": "really has ended up making this a sort of i don't know if i'd call it a pleasurable experience but definitely",
    "start": "1019920",
    "end": "1025360"
  },
  {
    "start": "1024000",
    "end": "1132000"
  },
  {
    "text": "one that was manageable by a little small team like ours that didn't require",
    "start": "1025360",
    "end": "1030640"
  },
  {
    "text": "hundreds of engineers to be able to sort it out when we first wrote crestlet we wrote a proof of concept",
    "start": "1030640",
    "end": "1036000"
  },
  {
    "text": "and the proof of concept was maybe a few hundred lines of code that was all it took us to be able to take a very basic",
    "start": "1036000",
    "end": "1042720"
  },
  {
    "text": "pod definition from kubernetes start up a web assembly runtime and report back to kubernetes yeah we're",
    "start": "1042720",
    "end": "1049039"
  },
  {
    "text": "running this thing here's the output of it uh and and so the proof of concept went well and was deceptively simple because",
    "start": "1049039",
    "end": "1055600"
  },
  {
    "text": "we went oh yeah from here we got it we're going to move on to a minimum viable product we're going to get this thing to a 1.0 that",
    "start": "1055600",
    "end": "1061760"
  },
  {
    "text": "people can actually use in production and then it wasn't easy yeah it really",
    "start": "1061760",
    "end": "1067280"
  },
  {
    "text": "wasn't um so this is just kind of a list i don't think it's even a complete list but it's close of all like the worst things we ran into",
    "start": "1067280",
    "end": "1074080"
  },
  {
    "text": "to try to figure out um we had to figure out the grpc plug-in system we had to figure out how to make state",
    "start": "1074080",
    "end": "1079919"
  },
  {
    "text": "machines and controllers work in rust um there's also the idea of how how does bootstrapping work underneath the hood",
    "start": "1079919",
    "end": "1085679"
  },
  {
    "text": "like what's the proper way to do it and exchange it and do it properly there's things about how do we handle oci image pulling",
    "start": "1085679",
    "end": "1092080"
  },
  {
    "text": "um what's the what's the api that is expected of kubelet um for kubernetes and then like the",
    "start": "1092080",
    "end": "1097760"
  },
  {
    "text": "various kubernetes subsystems volume mounting networking what are we supposed to do like all this became very very hard so let's dive into",
    "start": "1097760",
    "end": "1105039"
  },
  {
    "text": "that a bit uh first off oci image poles this is just something where um like we mentioned there's some gaps",
    "start": "1105039",
    "end": "1111600"
  },
  {
    "text": "in the system sometimes and so you just out here on the frontier have to do it yourself so",
    "start": "1111600",
    "end": "1116640"
  },
  {
    "text": "we re-impartially re-implemented the oci spec to be able to pull modules because we",
    "start": "1116640",
    "end": "1122960"
  },
  {
    "text": "assume that even for our wasm modules that we're using here we assume they'd be stored in an oci",
    "start": "1122960",
    "end": "1128240"
  },
  {
    "text": "registry just like a container would yep now the api contract",
    "start": "1128240",
    "end": "1134559"
  },
  {
    "start": "1132000",
    "end": "1347000"
  },
  {
    "text": "this was interesting because there's no documentation here which makes sense it's not really like a public api many",
    "start": "1134559",
    "end": "1139600"
  },
  {
    "text": "people consume but it turns out there's two parts here so if you're interested in the underlying internals this is a great slide to go",
    "start": "1139600",
    "end": "1146400"
  },
  {
    "text": "reference later but there's these three end points that we see um and then",
    "start": "1146400",
    "end": "1151760"
  },
  {
    "text": "uh there's also the duties of the kublet itself which is watching for new pods handle the entire pod life cycle",
    "start": "1151760",
    "end": "1158480"
  },
  {
    "text": "and resource management and then updating the node status and heartbeat so let's go into some code things that are right here that matt already",
    "start": "1158480",
    "end": "1165919"
  },
  {
    "text": "clear here it's not necessarily documented what the duties are given the api endpoints so a lot of this",
    "start": "1165919",
    "end": "1171679"
  },
  {
    "text": "is going okay given this information what are we gonna do and that's really where a lot of this code sort of came",
    "start": "1171679",
    "end": "1177280"
  },
  {
    "text": "from yeah and we can see actually some of the power of rest here so right in this example we see first off",
    "start": "1177280",
    "end": "1184720"
  },
  {
    "text": "why generics especially rust generic trade system are so useful we are allowing this to do a client",
    "start": "1184720",
    "end": "1191200"
  },
  {
    "text": "that's a using the wonderful tube crate which is the basically the official rest client for go for for go wow",
    "start": "1191200",
    "end": "1197120"
  },
  {
    "text": "the official rest client for kubernetes just like you have the client go um and in here you can see it",
    "start": "1197120",
    "end": "1204559"
  },
  {
    "text": "it doesn't matter what type this is this actually underlying type doesn't matter if it's a pod or a custom resource or",
    "start": "1204559",
    "end": "1210240"
  },
  {
    "text": "whatever as long as it implements a kubernetes definition this this code will work but it also",
    "start": "1210240",
    "end": "1216400"
  },
  {
    "text": "um has the matching and unwrapping that we love that we talked about as well and you'll see if inside we're going to now dive into the handle event",
    "start": "1216400",
    "end": "1223760"
  },
  {
    "text": "thing where it actually is is easy there as well um what we did have to do here and",
    "start": "1223760",
    "end": "1229679"
  },
  {
    "text": "something to be aware of especially with kubernetes and probably a lot of other systems is we had to plumb the events through",
    "start": "1229679",
    "end": "1234880"
  },
  {
    "text": "into our own system so getting the events and starting essentially a reflector if you're familiar with kubernetes",
    "start": "1234880",
    "end": "1240720"
  },
  {
    "text": "was really easy like it was just that little snippet of code but then we had to do the plumbing to kind of handle those events properly but russ",
    "start": "1240720",
    "end": "1247440"
  },
  {
    "text": "still makes that easy because an event is expressed as an enum which we mentioned before and so this shows how we handle",
    "start": "1247440",
    "end": "1252880"
  },
  {
    "text": "resyncs shutdowns and event dispatching all in a fairly concise function",
    "start": "1252880",
    "end": "1260080"
  },
  {
    "text": "lastly we have our patch status stuff so patching so this is how we patch um i guess there's we also have to talk",
    "start": "1260080",
    "end": "1266960"
  },
  {
    "text": "about node but for the for the actual managing the life cycle of things you have to patch the status of the pod now we're",
    "start": "1266960",
    "end": "1273840"
  },
  {
    "text": "leveraging the awesome cube crate again that allows us to do this patch status operation",
    "start": "1273840",
    "end": "1279760"
  },
  {
    "text": "with pretty much an easy thing we're just able to get out an api um client and then we're able to talk to",
    "start": "1279760",
    "end": "1285600"
  },
  {
    "text": "it and then unwrap that error but one thing to know is that patching utilities for pods are non-existent and",
    "start": "1285600",
    "end": "1291600"
  },
  {
    "text": "we had to write our own which that json patch method is what's in our next slide is that we have we had to manually",
    "start": "1291600",
    "end": "1299760"
  },
  {
    "text": "assemble the patch now this is easier for custom types but we had to put the whole thing",
    "start": "1299760",
    "end": "1305919"
  },
  {
    "text": "together so something to be aware of is that uh you don't have those json patching methods that come kind of built in with",
    "start": "1305919",
    "end": "1312400"
  },
  {
    "text": "some of the extended kubernetes libraries and go so just be aware of that when you're doing anything kubernetes or really anything in the",
    "start": "1312400",
    "end": "1318320"
  },
  {
    "text": "cloud is that you might have to do some plumbing work just like here and to finish up we're going to leave what each of the",
    "start": "1318320",
    "end": "1324000"
  },
  {
    "text": "functions do inside of here but in case you're curious what happens with a node is that you update the lease and you have to update",
    "start": "1324000",
    "end": "1330240"
  },
  {
    "text": "the status there's two things that you do to keep it uh keep it registered with the kubernetes cluster and all this we",
    "start": "1330240",
    "end": "1336720"
  },
  {
    "text": "kind of had to go figure out okay well how long does it expect like when is it expected to be updated what's the documentation for",
    "start": "1336720",
    "end": "1342559"
  },
  {
    "text": "this object all those things another cool use of macros there too uh yes where we",
    "start": "1342559",
    "end": "1348000"
  },
  {
    "start": "1347000",
    "end": "1645000"
  },
  {
    "text": "wrote our own so we have the grpc plugin system uh this here there be monsters i cannot",
    "start": "1348000",
    "end": "1356240"
  },
  {
    "text": "stress this enough so turns out to be able to um enable um oc sorry not ocd that meant to be csi",
    "start": "1356240",
    "end": "1363360"
  },
  {
    "text": "support they're uh we needed to have some sort of plug-in system",
    "start": "1363360",
    "end": "1368799"
  },
  {
    "text": "available which matches the one that kubernetes expects so the plug-in manager there's actually",
    "start": "1368799",
    "end": "1373840"
  },
  {
    "text": "two of them if you go look at the code underneath the hood but one is only for device plugins and",
    "start": "1373840",
    "end": "1379440"
  },
  {
    "text": "one handles other ones so we implemented one of them that handles uh the csi interface",
    "start": "1379440",
    "end": "1384960"
  },
  {
    "text": "um there's no way to figure out how this works except by reading code but what the cool part of all this was",
    "start": "1384960",
    "end": "1390640"
  },
  {
    "text": "and you'll see some of it is rust shrunk the amount of code needed from several thousand i mean this is a gnarly",
    "start": "1390640",
    "end": "1396080"
  },
  {
    "text": "thing with interfaces and indirection everywhere in the original kubernetes thing it's about 800",
    "start": "1396080",
    "end": "1401520"
  },
  {
    "text": "with tests 300 without them so uh yeah and just so you know",
    "start": "1401520",
    "end": "1406640"
  },
  {
    "text": "cross-platform support for sockets is a nightmare which will only cover briefly but just one dimension",
    "start": "1406640",
    "end": "1411840"
  },
  {
    "text": "so this is big i know but if you if you see here this is the run this is how we start things inside of the plug-in",
    "start": "1411840",
    "end": "1418240"
  },
  {
    "text": "manager and it watches a configured plug-in directory for new sockets to appear and when it discovers them",
    "start": "1418240",
    "end": "1424159"
  },
  {
    "text": "it tries to register them but we can see here some good examples of using iterators to run multiple futures at the",
    "start": "1424159",
    "end": "1430159"
  },
  {
    "text": "same time again and how to consume a stream so we're able to just take these turn them into an async object that just",
    "start": "1430159",
    "end": "1436320"
  },
  {
    "text": "returns something every time it detects it so there's nothing super crazy here with",
    "start": "1436320",
    "end": "1441600"
  },
  {
    "text": "rust but instead of having to do all this other channel management stuff that you saw on the go one it's",
    "start": "1441600",
    "end": "1446960"
  },
  {
    "text": "really concise we shrunk it down to a single thing that runs it all and then we have this handle create um",
    "start": "1446960",
    "end": "1453200"
  },
  {
    "text": "thing that actually does the creation when it sees under the creation of a new plugin and these are the actual steps that are",
    "start": "1453200",
    "end": "1460320"
  },
  {
    "text": "performed in case you're curious i tried to include some stuff in here that people could go back and look at when i say as we looked and we created",
    "start": "1460320",
    "end": "1466400"
  },
  {
    "text": "these these samples and this is the exact process that goes on underneath the hood in case you're curious but more interestingly in the next slide",
    "start": "1466400",
    "end": "1472799"
  },
  {
    "text": "is we have what actually goes on um underneath with watching the file",
    "start": "1472799",
    "end": "1478000"
  },
  {
    "text": "system so this is where things get really exciting so this is a demonstration of the awesomeness of",
    "start": "1478000",
    "end": "1483760"
  },
  {
    "text": "conditional compilation which i mean isn't we've we've run into several times",
    "start": "1483760",
    "end": "1489120"
  },
  {
    "text": "i think at this point right matt yep you know all over the place and",
    "start": "1489120",
    "end": "1494559"
  },
  {
    "text": "uh this shows off another useful crate called notify and we've also wanted to kind of show the crates that we're",
    "start": "1494559",
    "end": "1499600"
  },
  {
    "text": "consuming here and notify is the thing that tells you when something changes on the file system it uses the proper underlying",
    "start": "1499600",
    "end": "1504799"
  },
  {
    "text": "utilities to do it but it's not async by default so we had to do some wrapping and",
    "start": "1504799",
    "end": "1510480"
  },
  {
    "text": "adaptation into a stream interface that receives a result out which is what we're doing here but you can see that we actually had to do",
    "start": "1510480",
    "end": "1517840"
  },
  {
    "text": "a hacky work around for mac os uh it turns out that the underlying libraries in mac do not",
    "start": "1517840",
    "end": "1524720"
  },
  {
    "text": "detect when a socket is created only when it's modified which i opened a bug for in case you're ever curious about that but",
    "start": "1524720",
    "end": "1531760"
  },
  {
    "text": "we had to basically write our own hacky version for mac but now instead of having to include that everywhere we have",
    "start": "1531760",
    "end": "1538159"
  },
  {
    "text": "specific versions that are called depending on the um operating system so if it's a mac",
    "start": "1538159",
    "end": "1544240"
  },
  {
    "text": "os target it uses the hack otherwise it uses the great notify crate that gives us all this with",
    "start": "1544240",
    "end": "1549840"
  },
  {
    "text": "the proper way and not hacky all right now we're up to my very favorite slide",
    "start": "1549840",
    "end": "1554960"
  },
  {
    "text": "because this replaces tens of thousands of lines of code that's auto generated yes we love the build rs",
    "start": "1554960",
    "end": "1563279"
  },
  {
    "text": "so one of the things this is first i mentioned this earlier about the tonic crate so tonic is a grpc library",
    "start": "1563279",
    "end": "1568960"
  },
  {
    "text": "for rust if you haven't used it like we use grpc libraries and interfaces all the time in",
    "start": "1568960",
    "end": "1575360"
  },
  {
    "text": "the cloud native space not just in kubernetes but everywhere and so this is something you'll likely run into no matter what you're writing",
    "start": "1575360",
    "end": "1581600"
  },
  {
    "text": "for the cloud and it's awesome this is 10 lines and it takes the protobuf definition and",
    "start": "1581600",
    "end": "1588559"
  },
  {
    "text": "builds you can you can tweak how you want to build it builds everything and you don't even have to commit the",
    "start": "1588559",
    "end": "1594480"
  },
  {
    "text": "code there's no auto generated client it is generating code underneath the hood but because of the use of macros",
    "start": "1594480",
    "end": "1601440"
  },
  {
    "text": "um plus the build file you're able to just have it be built at runtime and have it included which is",
    "start": "1601440",
    "end": "1607919"
  },
  {
    "text": "awesome i mean we just get soup this is where we nerd out about it in in contrast the typical go repository",
    "start": "1607919",
    "end": "1614080"
  },
  {
    "text": "that does the same thing includes dozens if not hundreds of files that you have to remember to manually",
    "start": "1614080",
    "end": "1619760"
  },
  {
    "text": "auto generate and keep in sync with your protobuf definitions and it's all incumbent on the developer",
    "start": "1619760",
    "end": "1625200"
  },
  {
    "text": "to do the auto generation and then all that code gets checked in and then every time somebody goes",
    "start": "1625200",
    "end": "1630320"
  },
  {
    "text": "through their your source code repo they have to read through all of that uh we just love the fact that this hides",
    "start": "1630320",
    "end": "1636159"
  },
  {
    "text": "all of this stuff from the from the developer and we don't have to see those ugly auto-generated files",
    "start": "1636159",
    "end": "1641440"
  },
  {
    "text": "and can just use the raw protobuf definitions",
    "start": "1641440",
    "end": "1645919"
  },
  {
    "start": "1645000",
    "end": "1859000"
  },
  {
    "text": "now last off this will be pretty quick because there's actually going to be a talk on all of this by one of our fellow",
    "start": "1646559",
    "end": "1651840"
  },
  {
    "text": "co-maintainers of crestlet at the same conference he's going to talk more about it but we had to",
    "start": "1651840",
    "end": "1656880"
  },
  {
    "text": "discover how to do controllers and state machines inside of rust now kubernetes is best represented by a state machine",
    "start": "1656880",
    "end": "1662000"
  },
  {
    "text": "but actually under the hood it doesn't really do a very traditional state machine if we're being honest based on all the",
    "start": "1662000",
    "end": "1668159"
  },
  {
    "text": "all the code i was i was reading for it is still a state machine but kind of a little bit different and we were taking something that had a",
    "start": "1668159",
    "end": "1674480"
  },
  {
    "text": "very established pattern and go and doing an entirely different language and was difficult because we",
    "start": "1674480",
    "end": "1679520"
  },
  {
    "text": "had to combine this kubernetes way with the rust way and um he'll talk our our",
    "start": "1679520",
    "end": "1686240"
  },
  {
    "text": "fellow maintainer kevin will talk about that more but when we combine all this we created something called crater which is an operator crate for",
    "start": "1686240",
    "end": "1693600"
  },
  {
    "text": "kubernetes and this took a whole bunch this took several false starts in different versions and it took about three months",
    "start": "1693600",
    "end": "1698720"
  },
  {
    "text": "of us just like building on other people's work and trying things again and again and it the the ending api is actually",
    "start": "1698720",
    "end": "1706080"
  },
  {
    "text": "quite flexible which i'll show right now we have this one is the most simple thing where it basically does nothing",
    "start": "1706080",
    "end": "1711760"
  },
  {
    "text": "but you have to implement two methods if you wanted to use the same kind of state machine pattern in something not kubernetes you can just take away the",
    "start": "1711760",
    "end": "1718000"
  },
  {
    "text": "status one and you just have this next method that does work and so that's the simplest example now",
    "start": "1718000",
    "end": "1725200"
  },
  {
    "text": "the next one is actually a more complex example as you can see a lot longer but it",
    "start": "1725200",
    "end": "1732080"
  },
  {
    "text": "shows how to um how it's what happens when a pod is running inside a presslet and there are",
    "start": "1732080",
    "end": "1739520"
  },
  {
    "text": "multiple things that happen but you're able to pass state around and just go next and you'll see at the very top there's a um there's this derived",
    "start": "1739520",
    "end": "1747520"
  },
  {
    "text": "transition to so we wrote a derived macro that allows you to put on a transition automatically to a",
    "start": "1747520",
    "end": "1753919"
  },
  {
    "text": "struct and make sure that it is compile time checked if you don't have the proper things in place it'll tell you that your state",
    "start": "1753919",
    "end": "1759760"
  },
  {
    "text": "machine is invalid which is incredibly powerful because then you're not accidentally checking",
    "start": "1759760",
    "end": "1764799"
  },
  {
    "text": "like checking in something that you think works but there's a missing edge in your graph essentially so that's pretty much the",
    "start": "1764799",
    "end": "1771279"
  },
  {
    "text": "stuff we learned from from kubernetes yeah and this has been a very",
    "start": "1771279",
    "end": "1776880"
  },
  {
    "text": "pleasurable journey for us as we've done this and we've learned a lot about rust uh a lot about kubernetes uh",
    "start": "1776880",
    "end": "1783200"
  },
  {
    "text": "of course we're really invested in the web assembly space so if you're around for web assembly day",
    "start": "1783200",
    "end": "1788480"
  },
  {
    "text": "uh take a look at some of the stuff uh there as well but we wanted to end up with a couple",
    "start": "1788480",
    "end": "1793520"
  },
  {
    "text": "with a slide with a couple of resources of course uh kevin's talk on crater is",
    "start": "1793520",
    "end": "1798799"
  },
  {
    "text": "also in rust today today so uh we encourage you to watch that one",
    "start": "1798799",
    "end": "1804159"
  },
  {
    "text": "and then here are several links that will give you some um reading material if you'd like to catch up on how we did the state machine",
    "start": "1804159",
    "end": "1810880"
  },
  {
    "text": "uh that the good the bad the ugly section we went through there uh a written version of that or",
    "start": "1810880",
    "end": "1816320"
  },
  {
    "text": "is that the slides i don't remember if that's written version that's okay and then um then of course uh the async",
    "start": "1816320",
    "end": "1822880"
  },
  {
    "text": "code that was our only entry in the ugly there's a lot of work going on there and we're really excited about the work",
    "start": "1822880",
    "end": "1828799"
  },
  {
    "text": "and looking forward to the future of rust because we know that it's just a matter of time before everything sort of falls",
    "start": "1828799",
    "end": "1835440"
  },
  {
    "text": "into place and gets it right but there's a place you can go and take a look at uh at what everyone is working",
    "start": "1835440",
    "end": "1840960"
  },
  {
    "text": "on uh on the cutting edge of that anything else to add no i think that's it thank you everyone",
    "start": "1840960",
    "end": "1846320"
  },
  {
    "text": "for listening to this hopefully it was helpful gave you some good starting points feel free to reach out to me or matt anytime we love talking about",
    "start": "1846320",
    "end": "1852960"
  },
  {
    "text": "this and we can pass on any knowledge thank you very much bye",
    "start": "1852960",
    "end": "1861440"
  }
]