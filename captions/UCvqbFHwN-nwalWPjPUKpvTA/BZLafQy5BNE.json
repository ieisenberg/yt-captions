[
  {
    "text": "hello everyone I'm Anna I work at ISO Valley as a",
    "start": "0",
    "end": "6299"
  },
  {
    "text": "software engineer I work there on well on observability speaking",
    "start": "6299",
    "end": "12480"
  },
  {
    "text": "um and uh we work on tools",
    "start": "12480",
    "end": "18500"
  },
  {
    "text": "observabilities using EPF directly and indirectly",
    "start": "18500",
    "end": "24420"
  },
  {
    "text": "um evpf it's well EPF is not new it's a",
    "start": "24420",
    "end": "33300"
  },
  {
    "text": "technology that is been here for here for a while it's using production for a while and it has it got a lot of",
    "start": "33300",
    "end": "39660"
  },
  {
    "text": "traction already in observability space and in wider Cloud native space",
    "start": "39660",
    "end": "46879"
  },
  {
    "text": "but it is a technology that most of us use indirectly only through user",
    "start": "46879",
    "end": "53399"
  },
  {
    "text": "interfaces of Battery Source so it still causes a lot of confusion misunderstanding well I talk to people",
    "start": "53399",
    "end": "60480"
  },
  {
    "text": "about EPF I see a lot of that but this question what is cvpf pretty basic question is is",
    "start": "60480",
    "end": "67619"
  },
  {
    "text": "still asked pretty often so let's start with quick interaction",
    "start": "67619",
    "end": "73200"
  },
  {
    "text": "what is evpf and what I will talk about today",
    "start": "73200",
    "end": "79260"
  },
  {
    "text": "vpf is a technology technology that in",
    "start": "79260",
    "end": "84659"
  },
  {
    "text": "short uh makes the Linux kernel programmable",
    "start": "84659",
    "end": "90259"
  },
  {
    "text": "it is the commonly used comparison is that evpf is to Linux kernel what",
    "start": "91020",
    "end": "96479"
  },
  {
    "text": "JavaScript is to the browser so it allows you to kind of inject programs",
    "start": "96479",
    "end": "101939"
  },
  {
    "text": "into Linux kernel uh run them without modifying the Linux kernel",
    "start": "101939",
    "end": "110579"
  },
  {
    "text": "itself without recompiling it Etc now",
    "start": "110579",
    "end": "117240"
  },
  {
    "text": "how it looks like Theory have a simple diagram um",
    "start": "117240",
    "end": "123720"
  },
  {
    "text": "normally with software Engineers write code running in user space",
    "start": "123720",
    "end": "130500"
  },
  {
    "text": "and get most applications will just run in user space but practically all",
    "start": "130500",
    "end": "137760"
  },
  {
    "text": "code that anybody writes anything any tool that does something",
    "start": "137760",
    "end": "143599"
  },
  {
    "text": "relies on kernel on operating system to do a ton of stuff and buy a ton of stuff",
    "start": "143599",
    "end": "149220"
  },
  {
    "text": "I mean really a lot this is usually done via ciscals so the",
    "start": "149220",
    "end": "155220"
  },
  {
    "text": "application calls system calls to ask Colonel to do things on his",
    "start": "155220",
    "end": "161760"
  },
  {
    "text": "behalf like um tile operations open read write a file",
    "start": "161760",
    "end": "168239"
  },
  {
    "text": "Network calls various other management things like",
    "start": "168239",
    "end": "174560"
  },
  {
    "text": "running processes and Resource Management you can say that this happens",
    "start": "174560",
    "end": "180120"
  },
  {
    "text": "a lot I think most Engineers from what I see kind of realize but not not fully",
    "start": "180120",
    "end": "189120"
  },
  {
    "text": "how how much this has to happen like even simple operations like opening a",
    "start": "189120",
    "end": "194340"
  },
  {
    "text": "file usually means like 100 system calls or something like that",
    "start": "194340",
    "end": "200659"
  },
  {
    "text": "and with evpf we can",
    "start": "200659",
    "end": "206640"
  },
  {
    "text": "inject something into the kernel space inject some code that will be",
    "start": "206640",
    "end": "213239"
  },
  {
    "text": "automatically run on certain events so when something happens",
    "start": "213239",
    "end": "220140"
  },
  {
    "text": "in kernel our EVPs program will run",
    "start": "220140",
    "end": "225420"
  },
  {
    "text": "evpf programs are written usually in C recently also in Rust but because",
    "start": "225420",
    "end": "230700"
  },
  {
    "text": "Phoenix Canada is written in C this traditionally um",
    "start": "230700",
    "end": "236180"
  },
  {
    "text": "evbf programs will be written in C and they get attached to these events what",
    "start": "236299",
    "end": "244260"
  },
  {
    "text": "are these events uh let's talk about that so",
    "start": "244260",
    "end": "249959"
  },
  {
    "text": "evpf programs can be attached to many different events",
    "start": "249959",
    "end": "255420"
  },
  {
    "text": "in observability context there are a few that are most important",
    "start": "255420",
    "end": "260579"
  },
  {
    "text": "I would say first K probes and K red probes from kernel probes these are",
    "start": "260579",
    "end": "268979"
  },
  {
    "text": "basically function calls inside Linux kernel so",
    "start": "268979",
    "end": "274259"
  },
  {
    "text": "Linux kernel device functions and stake at calls right similarly for your probes and turret probes these are functions in",
    "start": "274259",
    "end": "281820"
  },
  {
    "text": "user space so these are events that mean that some user space function got called",
    "start": "281820",
    "end": "289400"
  },
  {
    "text": "uret probe will be similarly similar events but when the function returns",
    "start": "289400",
    "end": "298080"
  },
  {
    "text": "uh perfidence uh these are interesting ones so Linux kernel has this built-in",
    "start": "298080",
    "end": "305240"
  },
  {
    "text": "profiler turf it's been there for uh forever for a",
    "start": "305240",
    "end": "311580"
  },
  {
    "text": "really long time uh to use very commonly to gather system level data",
    "start": "311580",
    "end": "317880"
  },
  {
    "text": "um and it is used pretty commonly these days",
    "start": "317880",
    "end": "325320"
  },
  {
    "text": "by various user space tools to do something with this performance data",
    "start": "325320",
    "end": "332580"
  },
  {
    "text": "that we have from from Turf tool",
    "start": "332580",
    "end": "338360"
  },
  {
    "text": "another uh events the common use in observability are Trace points and user",
    "start": "338360",
    "end": "347280"
  },
  {
    "text": "space Trace points so-called us that is these are very similar to k-props and your probes the difference is that Trace",
    "start": "347280",
    "end": "355680"
  },
  {
    "text": "points are statically defined same like user space response what means to things basically means",
    "start": "355680",
    "end": "362940"
  },
  {
    "text": "that they are moist more stable than K probes and your probes because function",
    "start": "362940",
    "end": "369000"
  },
  {
    "text": "names can change between different versions right tracements are considered more stable",
    "start": "369000",
    "end": "375120"
  },
  {
    "text": "but also there's they have to be statically defined so there's like",
    "start": "375120",
    "end": "380340"
  },
  {
    "text": "limited number of them there are many many more attachment",
    "start": "380340",
    "end": "385560"
  },
  {
    "text": "points for EVPs programs like for example socket events used commonly in networking or in security space but from",
    "start": "385560",
    "end": "393060"
  },
  {
    "text": "the observability perspective these are I think that the most important ones and",
    "start": "393060",
    "end": "400520"
  },
  {
    "text": "um this is when the evpf programs are run",
    "start": "400620",
    "end": "406500"
  },
  {
    "text": "now to be actually useful any program computer program doing",
    "start": "406500",
    "end": "412740"
  },
  {
    "text": "anything needs something to store its state like user space",
    "start": "412740",
    "end": "420720"
  },
  {
    "text": "applications typically will connect to a database where the whole state of the",
    "start": "420720",
    "end": "426120"
  },
  {
    "text": "words is stored in the database in EVP efforts the role of the database is",
    "start": "426120",
    "end": "433819"
  },
  {
    "text": "served by BPF Maps BPF Maps is are basically key value stores stored",
    "start": "433819",
    "end": "444599"
  },
  {
    "text": "in kernel memory they there are many different kinds like",
    "start": "444599",
    "end": "450240"
  },
  {
    "text": "really many different kinds of BTS maps for example hash table perfume buffers but many others that's all are basically",
    "start": "450240",
    "end": "457620"
  },
  {
    "text": "key value stores and they can store some",
    "start": "457620",
    "end": "462840"
  },
  {
    "text": "state of of the world uh they are used",
    "start": "462840",
    "end": "470160"
  },
  {
    "text": "um for communication between different components and uh this this",
    "start": "470160",
    "end": "478860"
  },
  {
    "text": "sounds obvious uh when uh when you realize that but but I think that",
    "start": "478860",
    "end": "484919"
  },
  {
    "text": "um it's important to uh to to use evpf for observability",
    "start": "484919",
    "end": "492720"
  },
  {
    "text": "um you can't really uh just run something in uh in the kernel and that's it you",
    "start": "492720",
    "end": "501419"
  },
  {
    "text": "need to communicate that to user somehow right this is what vpf maps are used for",
    "start": "501419",
    "end": "506639"
  },
  {
    "text": "for communication between kernel space and user space so both kernel",
    "start": "506639",
    "end": "513180"
  },
  {
    "text": "codes if we have code running inside the kernel and user space application can use same maps and communicate with each",
    "start": "513180",
    "end": "520080"
  },
  {
    "text": "other that way and also BPF maps are used to coming for",
    "start": "520080",
    "end": "525420"
  },
  {
    "text": "communication between different evpf programs for example attached to completely different events",
    "start": "525420",
    "end": "531260"
  },
  {
    "text": "so that we can observe not only that well something happened in the kernel",
    "start": "531260",
    "end": "537660"
  },
  {
    "text": "but we can analyze in evpf program what",
    "start": "537660",
    "end": "542760"
  },
  {
    "text": "happened and gather this data from different events",
    "start": "542760",
    "end": "548279"
  },
  {
    "text": "all right so that was a short introduction to evpf last last thing I wanted to show about",
    "start": "548279",
    "end": "556620"
  },
  {
    "text": "it um it would be a verifier so this this",
    "start": "556620",
    "end": "562500"
  },
  {
    "text": "whole concept of running things in Linux kernel is not new at all there are kernel modules uh which allow that for",
    "start": "562500",
    "end": "571260"
  },
  {
    "text": "quite a while um we what makes evpf different is the",
    "start": "571260",
    "end": "577320"
  },
  {
    "text": "verifier that verifies that the program is safe to run by safe to run we usually mean that it's",
    "start": "577320",
    "end": "585540"
  },
  {
    "text": "guaranteed to complete and it wants Access Memory that it shouldn't access",
    "start": "585540",
    "end": "591140"
  },
  {
    "text": "and a few other things like that but basically that it won't crush the car",
    "start": "591140",
    "end": "598320"
  },
  {
    "text": "the kernel what is a risk with with current models people are generally",
    "start": "598320",
    "end": "605120"
  },
  {
    "text": "often pretty scared about uh just installing kernel modules to today",
    "start": "605120",
    "end": "612660"
  },
  {
    "text": "Linux kernel because well if Canada contains the back then not just the",
    "start": "612660",
    "end": "618779"
  },
  {
    "text": "program crashes the whole machine crashes the crashes so that would be very bad with vpf this is not",
    "start": "618779",
    "end": "626459"
  },
  {
    "text": "not really a problem because not really a worry because um all the code is",
    "start": "626459",
    "end": "632580"
  },
  {
    "text": "um verified by a verifier and then only then run",
    "start": "632580",
    "end": "640580"
  },
  {
    "text": "all right so why EPF is useful for observability",
    "start": "640680",
    "end": "648980"
  },
  {
    "text": "and especially in Cloud native space well here",
    "start": "648980",
    "end": "654959"
  },
  {
    "text": "at kipcon we we run things in kubernetes right and I",
    "start": "654959",
    "end": "660959"
  },
  {
    "text": "I run a lot of stuff in kubernetes for quite a while and well in kubernetes we",
    "start": "660959",
    "end": "666540"
  },
  {
    "text": "have many applications running on same note they are scheduled by kubernetes as",
    "start": "666540",
    "end": "675000"
  },
  {
    "text": "the developer we don't really need to care which machine",
    "start": "675000",
    "end": "681420"
  },
  {
    "text": "the application is running we it's just scheduled and then rescheduled by",
    "start": "681420",
    "end": "686700"
  },
  {
    "text": "kubernetes and this is great from",
    "start": "686700",
    "end": "691740"
  },
  {
    "text": "resources perspective from management perspective but one thing that uh that Still Remains the",
    "start": "691740",
    "end": "701700"
  },
  {
    "text": "Same is that although there are many applications running on any host and we don't need to care which",
    "start": "701700",
    "end": "709740"
  },
  {
    "text": "applications are running where still one note one host has always one Linux",
    "start": "709740",
    "end": "717180"
  },
  {
    "text": "kernel and this Linux kernel oh by the way I'm",
    "start": "717180",
    "end": "722700"
  },
  {
    "text": "always saying Linux kernel this can be could be a Windows though the evpf can",
    "start": "722700",
    "end": "729380"
  },
  {
    "text": "is supported in Windows to these days but let's stick to to this assumption",
    "start": "729380",
    "end": "736019"
  },
  {
    "text": "that um uh that's everything is running on Linux",
    "start": "736019",
    "end": "741360"
  },
  {
    "text": "kernels so all these applications running on one",
    "start": "741360",
    "end": "748019"
  },
  {
    "text": "note uh reach out to Linux kernel to do things to make networkers to open fires",
    "start": "748019",
    "end": "755640"
  },
  {
    "text": "to run processes everything and that means that",
    "start": "755640",
    "end": "763200"
  },
  {
    "text": "um if um if we put evpa programs in this Linux",
    "start": "763200",
    "end": "770519"
  },
  {
    "text": "kernel they see everything that happens to all these",
    "start": "770519",
    "end": "776639"
  },
  {
    "text": "applications while we don't need to do any code",
    "start": "776639",
    "end": "783240"
  },
  {
    "text": "changes in applications themselves we need to have some code in user space",
    "start": "783240",
    "end": "788760"
  },
  {
    "text": "that will load these ebps programs but no code changes to Applications themselves by evpf programs can see",
    "start": "788760",
    "end": "796860"
  },
  {
    "text": "practically everything um one thing that makes it so promising",
    "start": "796860",
    "end": "803339"
  },
  {
    "text": "in observability space is that there is well one thing is that there are no code",
    "start": "803339",
    "end": "810000"
  },
  {
    "text": "changes but second thing is that there is very low performance overhead",
    "start": "810000",
    "end": "815279"
  },
  {
    "text": "in all of that evpf programs run in kernel space and of course there is this",
    "start": "815279",
    "end": "821760"
  },
  {
    "text": "kernel user communication happening all the time but",
    "start": "821760",
    "end": "827180"
  },
  {
    "text": "we don't need to run everything in current in user space",
    "start": "827180",
    "end": "833940"
  },
  {
    "text": "we don't need to do that many calls to to Kernel if we do some of our",
    "start": "833940",
    "end": "842459"
  },
  {
    "text": "observability logic in the kernel space so this is uh why people in",
    "start": "842459",
    "end": "848760"
  },
  {
    "text": "observability space often get so excited about pbpf and why it's so so promising",
    "start": "848760",
    "end": "855120"
  },
  {
    "text": "because well observability instrumental obserability always adds",
    "start": "855120",
    "end": "861839"
  },
  {
    "text": "this overhead that nobody likes okay um",
    "start": "861839",
    "end": "868260"
  },
  {
    "text": "let's move on to look at some of evpf observability tools",
    "start": "868260",
    "end": "875519"
  },
  {
    "text": "so as I mentioned at the beginning most people",
    "start": "875519",
    "end": "880680"
  },
  {
    "text": "want write evpf codes themselves it's C code it's not a language that",
    "start": "880680",
    "end": "889699"
  },
  {
    "text": "many people are really it feels super comfortable with it's called",
    "start": "889699",
    "end": "895800"
  },
  {
    "text": "running in the kernel to load that you need High privileges these days there are many many tools",
    "start": "895800",
    "end": "903500"
  },
  {
    "text": "that use evpf for security for networking and also for",
    "start": "903500",
    "end": "909899"
  },
  {
    "text": "observability so let's take a look at some of the stores available today first thing I",
    "start": "909899",
    "end": "916860"
  },
  {
    "text": "wanted to show is this and this is a diagram that I think appears in probably",
    "start": "916860",
    "end": "923399"
  },
  {
    "text": "like 80 percent of talks about EPF may be exaggerated okay maybe half but a",
    "start": "923399",
    "end": "930000"
  },
  {
    "text": "diagram that um those of you who who are tracking the",
    "start": "930000",
    "end": "936120"
  },
  {
    "text": "space but we saw a lot it's the outer of the diagram is Brendan Gregg and it",
    "start": "936120",
    "end": "942720"
  },
  {
    "text": "shows various tools um from so-called BCC BPF compiler",
    "start": "942720",
    "end": "950279"
  },
  {
    "text": "collection a set of tools that for monitoring many many different things in",
    "start": "950279",
    "end": "958139"
  },
  {
    "text": "in Lux kernel so we have uh networking tools we have monitoring of user space",
    "start": "958139",
    "end": "964139"
  },
  {
    "text": "applications resources like memory and storage a lot",
    "start": "964139",
    "end": "969420"
  },
  {
    "text": "of them now this is uh all of all of these stores",
    "start": "969420",
    "end": "975600"
  },
  {
    "text": "are available in the BCC repository and this screenshot is a",
    "start": "975600",
    "end": "982920"
  },
  {
    "text": "screenshot from like the GitHub page of of this report it's just very small",
    "start": "982920",
    "end": "990620"
  },
  {
    "text": "subset of the tools because the list is very very long by the way if somebody wants to learn",
    "start": "990620",
    "end": "999420"
  },
  {
    "text": "evpf or try out I would I can highly recommend to take a look at the scout at",
    "start": "999420",
    "end": "1006079"
  },
  {
    "text": "the Stalls because each of these tools is just two or three files they are pretty",
    "start": "1006079",
    "end": "1012199"
  },
  {
    "text": "small pretty self-contained and they cover a lot of many various things like networking resources everything so yeah",
    "start": "1012199",
    "end": "1019820"
  },
  {
    "text": "great great examples for somebody who wants to learn EVPs",
    "start": "1019820",
    "end": "1025339"
  },
  {
    "text": "um now there is this evpf exporter tool apart from cloudflare which",
    "start": "1025339",
    "end": "1032918"
  },
  {
    "text": "how they describe it is bitsy tools as Prometheus metrics and that summarizes it pretty well this is tool that can",
    "start": "1032919",
    "end": "1041360"
  },
  {
    "text": "expose everything monitored by businessitos as Prometheus metrics",
    "start": "1041360",
    "end": "1047058"
  },
  {
    "text": "um how it looks like you have to provide a configuration file in configuration file",
    "start": "1047059",
    "end": "1054080"
  },
  {
    "text": "you define what metrics you want and what labels you want on this Matrix this",
    "start": "1054080",
    "end": "1061700"
  },
  {
    "text": "is pretty much necessary with an observability tools using evpf because",
    "start": "1061700",
    "end": "1068960"
  },
  {
    "text": "the thing about the vpf is that it produces completely ridiculous amount of data and",
    "start": "1068960",
    "end": "1075820"
  },
  {
    "text": "we need to Define this pretty generally what what you actually want from it",
    "start": "1075820",
    "end": "1082820"
  },
  {
    "text": "and um here on the side you can see the ebpf",
    "start": "1082820",
    "end": "1088280"
  },
  {
    "text": "code that is generated from [Music] um from this config file so it's basically",
    "start": "1088280",
    "end": "1096760"
  },
  {
    "text": "creates a trace points attaches to a tracement that's well",
    "start": "1096760",
    "end": "1103480"
  },
  {
    "text": "counts timers fired all right our next thing I want to talk about is",
    "start": "1103480",
    "end": "1109940"
  },
  {
    "text": "something that we work the main project of of iso Valley the company I work at",
    "start": "1109940",
    "end": "1115760"
  },
  {
    "text": "celium is evpf for networking it's a kubernetes plugin a very",
    "start": "1115760",
    "end": "1121179"
  },
  {
    "text": "rich CNA plugin it also has service mesh and",
    "start": "1121179",
    "end": "1127280"
  },
  {
    "text": "other meshes features a lot of security enforcement but this is not a talk about",
    "start": "1127280",
    "end": "1132799"
  },
  {
    "text": "security um and about networking sodium also has",
    "start": "1132799",
    "end": "1138679"
  },
  {
    "text": "observability layer and this is a use this is using evpf for observability",
    "start": "1138679",
    "end": "1147020"
  },
  {
    "text": "sort of indirectly because well ethereum is using ebpf for networking so instead",
    "start": "1147020",
    "end": "1153140"
  },
  {
    "text": "of doing networking traditionally uh with IP tables",
    "start": "1153140",
    "end": "1158360"
  },
  {
    "text": "we inject evpf programs that handle Network flows and an external but if you",
    "start": "1158360",
    "end": "1165440"
  },
  {
    "text": "have these EVPs programs that do that then you can as well just",
    "start": "1165440",
    "end": "1172400"
  },
  {
    "text": "ask this avpf programs to to provide you information about what network flows are",
    "start": "1172400",
    "end": "1179120"
  },
  {
    "text": "flowing in the system and observe that so this is what Hubble does Hubble Is",
    "start": "1179120",
    "end": "1184460"
  },
  {
    "text": "observability layer for psyllium Hubble provides a CLI that allows you to query all network",
    "start": "1184460",
    "end": "1192140"
  },
  {
    "text": "files with many many different filters and also if you prefer an aggregated",
    "start": "1192140",
    "end": "1200419"
  },
  {
    "text": "view you don't want you don't need that much granularity then Hubble exposes",
    "start": "1200419",
    "end": "1206480"
  },
  {
    "text": "Prometheus metrics that can be in ingested in",
    "start": "1206480",
    "end": "1212200"
  },
  {
    "text": "can be queried from grafana for example his grafana screenshots where",
    "start": "1212200",
    "end": "1218799"
  },
  {
    "text": "Network traffic from various different network layers",
    "start": "1220700",
    "end": "1226880"
  },
  {
    "text": "like in with Lego Prometheus metrics um another thing uh like kind of a project",
    "start": "1226880",
    "end": "1234679"
  },
  {
    "text": "under the psyllium umbrella is tetragon",
    "start": "1234679",
    "end": "1240919"
  },
  {
    "text": "tetragon is security tool",
    "start": "1240919",
    "end": "1245320"
  },
  {
    "text": "tool that's mostly security people would be interested in people who need to do",
    "start": "1248059",
    "end": "1254059"
  },
  {
    "text": "audits for example or want to detect attacks um tetragon",
    "start": "1254059",
    "end": "1260480"
  },
  {
    "text": "uh uses K probes and Trace points to",
    "start": "1260480",
    "end": "1266299"
  },
  {
    "text": "monitor events that happen in the kernel to use it you define tracing policy here",
    "start": "1266299",
    "end": "1273740"
  },
  {
    "text": "you have so you can see example of a tracing policy and what what you can see here we see that the tracing policy",
    "start": "1273740",
    "end": "1280340"
  },
  {
    "text": "defines k-probe that the program will attach to the K-pop is f that install",
    "start": "1280340",
    "end": "1286520"
  },
  {
    "text": "this is a Linux kernel function that's um basically what will be called on file",
    "start": "1286520",
    "end": "1293960"
  },
  {
    "text": "operations roughly speaking and tracing policy also defines",
    "start": "1293960",
    "end": "1300080"
  },
  {
    "text": "um what we what output you want to get in that case we want to get file operations that happen",
    "start": "1300080",
    "end": "1308620"
  },
  {
    "text": "inside the ETC folder then",
    "start": "1308620",
    "end": "1313900"
  },
  {
    "text": "if we inject that to the Linux kernel to the program",
    "start": "1313900",
    "end": "1320419"
  },
  {
    "text": "generated um with this config then we can get this output from from",
    "start": "1320419",
    "end": "1326900"
  },
  {
    "text": "tetragon so we get very granular like very granular events that are happening",
    "start": "1326900",
    "end": "1334280"
  },
  {
    "text": "inside the Linux kernel in this case we see that I think it basically somebody",
    "start": "1334280",
    "end": "1339679"
  },
  {
    "text": "writes a password changes a password we can say it's not just one event but",
    "start": "1339679",
    "end": "1345679"
  },
  {
    "text": "in from Linux kind of perspective this is like there is some process starter",
    "start": "1345679",
    "end": "1351020"
  },
  {
    "text": "then fire is opened and right then closed and exit so so there are a few operations out there happening around it",
    "start": "1351020",
    "end": "1358400"
  },
  {
    "text": "all right um moving on from security space one thing",
    "start": "1358400",
    "end": "1364520"
  },
  {
    "text": "that is pretty hot in observability space these days is uh continuous profiling",
    "start": "1364520",
    "end": "1372320"
  },
  {
    "text": "um earlier today um Frederick had to talk about",
    "start": "1372320",
    "end": "1377620"
  },
  {
    "text": "profile formats and um here uh we can see a screenshot of the",
    "start": "1377620",
    "end": "1386539"
  },
  {
    "text": "icicle graph from from parka there are a few of these continuous providers using",
    "start": "1386539",
    "end": "1391820"
  },
  {
    "text": "evpf these days spark up Pixie pyroscope they work in pretty different ways but",
    "start": "1391820",
    "end": "1399740"
  },
  {
    "text": "um what's a I want I looked at the code of uh of the",
    "start": "1399740",
    "end": "1408140"
  },
  {
    "text": "Stalls and um well this is the code this is the evpf code from uh from parka it is heavy",
    "start": "1408140",
    "end": "1416600"
  },
  {
    "text": "truncated to fit it on slide but at the bottom you can see it inside there are",
    "start": "1416600",
    "end": "1423020"
  },
  {
    "text": "links to uh to the full file and well this is some code it's I guess barely",
    "start": "1423020",
    "end": "1429620"
  },
  {
    "text": "readable for you so let's put some arrows on it um what we can say in this code is",
    "start": "1429620",
    "end": "1435679"
  },
  {
    "text": "um it defines the profile CPU function",
    "start": "1435679",
    "end": "1441100"
  },
  {
    "text": "this profile CPU function takes as an argument uh",
    "start": "1441100",
    "end": "1448340"
  },
  {
    "text": "some some struct this struct is defined in Linux kernel headers and",
    "start": "1448340",
    "end": "1456380"
  },
  {
    "text": "this will be struct that is passed to to our event",
    "start": "1456380",
    "end": "1462559"
  },
  {
    "text": "then there is some reading from BPF map and writing to a BPF map and helper",
    "start": "1462559",
    "end": "1470600"
  },
  {
    "text": "function that [Music] basically is is called to",
    "start": "1470600",
    "end": "1476840"
  },
  {
    "text": "um together all this data uh to to form a profile now",
    "start": "1476840",
    "end": "1483559"
  },
  {
    "text": "this this is some BPF codes to actually use it it needs to be loaded into the",
    "start": "1483559",
    "end": "1492440"
  },
  {
    "text": "Linux kernel from user space and this is called that",
    "start": "1492440",
    "end": "1498700"
  },
  {
    "text": "that does it the Parker user space girl code again probably very truncated and",
    "start": "1498740",
    "end": "1505700"
  },
  {
    "text": "probably very readable but what is important here is that um Tarka uses this BPF girl library from",
    "start": "1505700",
    "end": "1514520"
  },
  {
    "text": "Aqua security go library for um operations on with programs",
    "start": "1514520",
    "end": "1520640"
  },
  {
    "text": "and we can see that this code basically",
    "start": "1520640",
    "end": "1526299"
  },
  {
    "text": "defines um the same profile",
    "start": "1527440",
    "end": "1533059"
  },
  {
    "text": "CPU function and then it attaches it to a",
    "start": "1533059",
    "end": "1540260"
  },
  {
    "text": "Turf event so uh previously",
    "start": "1540260",
    "end": "1545679"
  },
  {
    "text": "I when I was going through um through various attachment points",
    "start": "1545679",
    "end": "1551419"
  },
  {
    "text": "mentioned this pair of profiler in in Lux kernel",
    "start": "1551419",
    "end": "1557320"
  },
  {
    "text": "this is what is happening here basically this is we are attaching to a perf",
    "start": "1557320",
    "end": "1564140"
  },
  {
    "text": "Orman events from from the the perf profiler and uh",
    "start": "1564140",
    "end": "1570440"
  },
  {
    "text": "and this function the cbpi function from reperocyte",
    "start": "1570440",
    "end": "1575480"
  },
  {
    "text": "is run continuously to gather the default",
    "start": "1575480",
    "end": "1581059"
  },
  {
    "text": "um the profile another thing that is",
    "start": "1581059",
    "end": "1587960"
  },
  {
    "text": "a pretty pretty hot in in the",
    "start": "1587960",
    "end": "1593840"
  },
  {
    "text": "um observability space this size is distributed tracing here's a distributed trace a Jager screenshot so we can see",
    "start": "1593840",
    "end": "1601840"
  },
  {
    "text": "well this is something that everybody wants but it's not easy to get because",
    "start": "1601840",
    "end": "1607700"
  },
  {
    "text": "this for distributed tracing you basically need two things right like two export traces",
    "start": "1607700",
    "end": "1613880"
  },
  {
    "text": "this can be done some automatically but also you need to propagate context this",
    "start": "1613880",
    "end": "1620240"
  },
  {
    "text": "is not easy to propagate context this is always like language specific for some",
    "start": "1620240",
    "end": "1625700"
  },
  {
    "text": "languages there are um tools that do that automatically but",
    "start": "1625700",
    "end": "1631340"
  },
  {
    "text": "for other languages this is really not easy but there is a project there is a product that uh is very early",
    "start": "1631340",
    "end": "1639460"
  },
  {
    "text": "uh a very early stage and under open open Telemetry umbrella there is Go Auto",
    "start": "1639460",
    "end": "1647720"
  },
  {
    "text": "instrumentation project that uses evpf to do exactly that to propagate Trace context so what we can see here is evpf",
    "start": "1647720",
    "end": "1654740"
  },
  {
    "text": "code again let's put some arrows we can see that it defines your probes for go",
    "start": "1654740",
    "end": "1660080"
  },
  {
    "text": "grpc functions and then it uh writes Trace headers to a",
    "start": "1660080",
    "end": "1668480"
  },
  {
    "text": "BPF map and again this is called that",
    "start": "1668480",
    "end": "1675039"
  },
  {
    "text": "that this is called that thus uh automatic Trace context propagation with",
    "start": "1675080",
    "end": "1681559"
  },
  {
    "text": "EPF but it needs to be loaded into Linux scanner somehow so here is the go is the",
    "start": "1681559",
    "end": "1687260"
  },
  {
    "text": "space goal code doing that um it is a different user space Library",
    "start": "1687260",
    "end": "1692620"
  },
  {
    "text": "psyllium evpf library to Define this EVPs program in user space Here's you",
    "start": "1692620",
    "end": "1699860"
  },
  {
    "text": "can see that it uses um vpf annotations and we are attaching the u-propes the",
    "start": "1699860",
    "end": "1708260"
  },
  {
    "text": "avpfu props to the ebpr programs to you probes which are go grpc functions okay so can",
    "start": "1708260",
    "end": "1718039"
  },
  {
    "text": "we evpf everything yeah one problem they remember this",
    "start": "1718039",
    "end": "1724340"
  },
  {
    "text": "picture one problem with evpf is that well when user does an action then",
    "start": "1724340",
    "end": "1732039"
  },
  {
    "text": "kernel sees it but kernel Lee ceases in very very different way currencies like",
    "start": "1732039",
    "end": "1737480"
  },
  {
    "text": "file operations network connections a lot of that kind of stuff so yeah observability with eppf is challenging",
    "start": "1737480",
    "end": "1744260"
  },
  {
    "text": "mostly because vpf doesn't have business context at all it's not exactly technically impossible",
    "start": "1744260",
    "end": "1750559"
  },
  {
    "text": "to give it its business called this business context but it's not practical like we can't copying your whole",
    "start": "1750559",
    "end": "1757820"
  },
  {
    "text": "database to a BPF map is not really practical at all um EVP of observability is still young like",
    "start": "1757820",
    "end": "1765919"
  },
  {
    "text": "this is distributed tracing of the instrumentation is very promising but it's very very young to be honest but",
    "start": "1765919",
    "end": "1772220"
  },
  {
    "text": "very promising and the data volume can be well we had a few talks about scale",
    "start": "1772220",
    "end": "1777500"
  },
  {
    "text": "of observabilities day it's always large but with EPF it can be not only large",
    "start": "1777500",
    "end": "1782960"
  },
  {
    "text": "it's it can be really absurd so EDF tools to obserability tools using vpf",
    "start": "1782960",
    "end": "1789919"
  },
  {
    "text": "generally have to be heavily configured to to gather only data that you need",
    "start": "1789919",
    "end": "1795080"
  },
  {
    "text": "okay so here's a summary what's possible today with EVPs",
    "start": "1795080",
    "end": "1800320"
  },
  {
    "text": "systematics is now called changes Network and security visibility for shawl with cerium and tetragon and",
    "start": "1800320",
    "end": "1806840"
  },
  {
    "text": "travel continuous profiling two there are a few of these providers these days and I",
    "start": "1806840",
    "end": "1813260"
  },
  {
    "text": "really hope that distributed tracing Auto instrumentation will will mature in the next years because this is a really",
    "start": "1813260",
    "end": "1818840"
  },
  {
    "text": "promising space but and there is something already for that and thank you very much to",
    "start": "1818840",
    "end": "1827059"
  },
  {
    "text": "learn more feel free to visit evpf IO",
    "start": "1827059",
    "end": "1832159"
  },
  {
    "text": "um there is also a book written by my colleague Liz rice learning qpf you can",
    "start": "1832159",
    "end": "1839600"
  },
  {
    "text": "download it from a Zealand website but there is also there will be book signing tomorrow if you want to grab a paper",
    "start": "1839600",
    "end": "1846679"
  },
  {
    "text": "coffee with an autograph and that's it from me thank you very much [Applause]",
    "start": "1846679",
    "end": "1855940"
  }
]