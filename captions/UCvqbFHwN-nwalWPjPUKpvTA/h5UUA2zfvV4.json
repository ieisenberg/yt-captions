[
  {
    "start": "0",
    "end": "35000"
  },
  {
    "text": "hello everyone and welcome to the session about running cloud foundry on kubernetes my name is Vlad Ivanova",
    "start": "50",
    "end": "7710"
  },
  {
    "text": "I'm the technical lead for cloud foundry at hewlett-packard enterprise and I'm",
    "start": "7710",
    "end": "15360"
  },
  {
    "text": "Nikhil manchanda principal engineer for Hewlett Packard enterprise as well and",
    "start": "15360",
    "end": "21080"
  },
  {
    "text": "today we'll be talking to you guys about running cloud foundry on kubernetes so",
    "start": "21080",
    "end": "26910"
  },
  {
    "text": "let me get started with this so as part of running cloud foundry on kubernetes",
    "start": "26910",
    "end": "32450"
  },
  {
    "text": "we recently announced the general availability of HPE product called",
    "start": "32450",
    "end": "39930"
  },
  {
    "start": "35000",
    "end": "166000"
  },
  {
    "text": "Hylian staccato for dough and basically what this is is this is an open scalable",
    "start": "39930",
    "end": "46079"
  },
  {
    "text": "flexible cloud application platform that's based on kubernetes where you can",
    "start": "46079",
    "end": "51210"
  },
  {
    "text": "run your 12 factor apps your cloud native apps but the cool thing about this is it's sort of up as soon as you",
    "start": "51210",
    "end": "59070"
  },
  {
    "text": "get it up and running as soon as you bootstrap the environment everything is sort of batteries included so you you",
    "start": "59070",
    "end": "64650"
  },
  {
    "text": "get a helium control plan that's completely based on kubernetes that you can run applications on you get a helium",
    "start": "64650",
    "end": "71939"
  },
  {
    "text": "service manager which is sort of the entry point for service discovery service binding and comes with a catalog",
    "start": "71939",
    "end": "78420"
  },
  {
    "text": "of applications that you can already sort of get ready and deploy and as part of this catalog of applications you have",
    "start": "78420",
    "end": "85320"
  },
  {
    "text": "helium cloud foundry which is a fully Cod foundry foundation certified",
    "start": "85320",
    "end": "90570"
  },
  {
    "text": "distribution of cloud foundry that you can just install as soon as you have the",
    "start": "90570",
    "end": "95880"
  },
  {
    "text": "control plane up and running and you you also have healing code engine which is a",
    "start": "95880",
    "end": "101600"
  },
  {
    "text": "CI CD engine for the entire lifecycle the build tests deploy of your",
    "start": "101600",
    "end": "108240"
  },
  {
    "text": "applications on on this cloud platform we also have sort of a plethora of",
    "start": "108240",
    "end": "114509"
  },
  {
    "text": "regular services like my sequel Redis all of that in the catalog that that you",
    "start": "114509",
    "end": "120090"
  },
  {
    "text": "can deploy and so it's it's very easy to get started with it I should mention",
    "start": "120090",
    "end": "127799"
  },
  {
    "text": "that this particular cloud platform here in staccato for ATO",
    "start": "127799",
    "end": "133100"
  },
  {
    "text": "it's multiple ayahs providers so you can install it on the AWS public cloud you",
    "start": "133100",
    "end": "139580"
  },
  {
    "text": "can install it on OpenStack including Helion OpenStack which is an HPE offering and you can also install it on",
    "start": "139580",
    "end": "146330"
  },
  {
    "text": "vanilla vSphere so if you have a vSphere installed somewhere you can bring it up",
    "start": "146330",
    "end": "151670"
  },
  {
    "text": "there and then install the control plane and like I said install the service manager and all of these applications",
    "start": "151670",
    "end": "157130"
  },
  {
    "text": "that we talked about so enough about healing staccato we 4.0 let's get dive",
    "start": "157130",
    "end": "164810"
  },
  {
    "text": "into a demo and I'll show you some of what you can do with the control plane",
    "start": "164810",
    "end": "172190"
  },
  {
    "start": "166000",
    "end": "654000"
  },
  {
    "text": "once you have it up and deployed give me a second here while I switch",
    "start": "172190",
    "end": "178480"
  },
  {
    "text": "the masses travel",
    "start": "188610",
    "end": "193250"
  },
  {
    "text": "so here I have the staccato for todo deployed on the AWS public cloud and",
    "start": "194959",
    "end": "203079"
  },
  {
    "text": "yeah but apparently we can't clone this",
    "start": "210560",
    "end": "216530"
  },
  {
    "text": "thing",
    "start": "216530",
    "end": "218770"
  },
  {
    "text": "sorry about that like I was saying so we have staccato Furtado deployed here on",
    "start": "247730",
    "end": "254790"
  },
  {
    "text": "the AWS public cloud and as part of the bootstrap of it you can specify how big",
    "start": "254790",
    "end": "259829"
  },
  {
    "text": "you want your cluster size to be here we'll just do a list nodes and as you",
    "start": "259830",
    "end": "272370"
  },
  {
    "text": "can see this particular cluster has one kubernetes master 3 kubernetes nodes and",
    "start": "272370",
    "end": "279570"
  },
  {
    "text": "two Gluster nodes we use Gluster here to provide share filesystem services for",
    "start": "279570",
    "end": "286200"
  },
  {
    "text": "applications that we we bring up and when your bootstrap it you do definitely",
    "start": "286200",
    "end": "291210"
  },
  {
    "text": "say what your cluster size is but you're not limited to that size so you can grow your cluster you can use the same HCP",
    "start": "291210",
    "end": "296760"
  },
  {
    "text": "command line too if you want to add another couple of kubernetes masters for h.a you can do that or if you want to",
    "start": "296760",
    "end": "303360"
  },
  {
    "text": "add nodes to grow out your cluster if you're running a lot more applications on it you're you're able to do that as well but today what we're going to see",
    "start": "303360",
    "end": "310440"
  },
  {
    "text": "is actually deploying Cloud Foundry on that and as I mentioned the service manager is sort of the interface for",
    "start": "310440",
    "end": "318080"
  },
  {
    "text": "folks to enter the Service Catalog so we'll take a look at service manager and",
    "start": "318080",
    "end": "323340"
  },
  {
    "text": "get a list of all the services that are available for us to deploy as you can",
    "start": "323340",
    "end": "329100"
  },
  {
    "text": "see here we out-of-the-box we have quite a few services that we can we can deploy and the way we are going to deploy any",
    "start": "329100",
    "end": "336390"
  },
  {
    "text": "of these services is basically we're going to use HSM which is the client for Hylian service manager to create an",
    "start": "336390",
    "end": "342630"
  },
  {
    "text": "instance of that particular service before I show you that let's just you",
    "start": "342630",
    "end": "348360"
  },
  {
    "text": "can list all of the instances that have already been created so if I do that",
    "start": "348360",
    "end": "354470"
  },
  {
    "text": "you'll see that I have the control plane as an instance that is running and also",
    "start": "354470",
    "end": "360240"
  },
  {
    "text": "my sequel is an instance that is running that I've pre created one thing that I wanted to mention here is the control",
    "start": "360240",
    "end": "366480"
  },
  {
    "text": "plane itself when we bootstrap is an application that's running on top of off of kubernetes itself so it is a cloud",
    "start": "366480",
    "end": "373770"
  },
  {
    "text": "native application and I'll talk a bit more about the architecture of the control plane as we progress",
    "start": "373770",
    "end": "379300"
  },
  {
    "text": "but let's get started with kicking off the install for Cloud Foundry so one",
    "start": "379300",
    "end": "388449"
  },
  {
    "text": "thing before we get to that is you could so you can inspect any of these services",
    "start": "388449",
    "end": "396849"
  },
  {
    "text": "to see what the actual service entails if this is just a very simple my sequel service and you'll see that it has a",
    "start": "396849",
    "end": "402879"
  },
  {
    "text": "bunch of parameters that are required as input to the service when you bring it",
    "start": "402879",
    "end": "408490"
  },
  {
    "text": "up you notice that some of these parameters are required some are optional some of them are marked as",
    "start": "408490",
    "end": "415210"
  },
  {
    "text": "secrets and then so when you're when they're marked as secrets when you do a query on the instance you don't get them",
    "start": "415210",
    "end": "421509"
  },
  {
    "text": "back and some of them are also marked as generate able HSM is something that is",
    "start": "421509",
    "end": "429219"
  },
  {
    "text": "very interesting because for all these parameters that are marked generate able which tend to be secrets or certificates",
    "start": "429219",
    "end": "435789"
  },
  {
    "text": "or things like that you don't actually even though they're required you don't actually have to specify a parameter",
    "start": "435789",
    "end": "441819"
  },
  {
    "text": "when you're creating the instance and HSM will heal and service manager will take care of actually generating these",
    "start": "441819",
    "end": "448120"
  },
  {
    "text": "for you and populating these parameters into the book what we call the SDL which",
    "start": "448120",
    "end": "455740"
  },
  {
    "text": "is basically a domain-specific language for deploying applications in this",
    "start": "455740",
    "end": "461009"
  },
  {
    "text": "platform so as I said my sequel here has",
    "start": "461009",
    "end": "466240"
  },
  {
    "text": "just very few of these parameters but when we talk about something like Cloud Foundry it's it has quite of quite a lot",
    "start": "466240",
    "end": "474250"
  },
  {
    "text": "of them pretty much a couple of orders of magnitude more than what you're seeing here so it makes it hard to",
    "start": "474250",
    "end": "481419"
  },
  {
    "text": "deploy if you try it if you have to figure out hey what does this parameter need to be does it have a do I do I need",
    "start": "481419",
    "end": "489129"
  },
  {
    "text": "to like more than 30 or so certificates do I need to generate them how do I put this in but since we have heal and",
    "start": "489129",
    "end": "496330"
  },
  {
    "text": "service manager to make that easy for us we don't have to specify that and literally in order to get a workable",
    "start": "496330",
    "end": "502000"
  },
  {
    "text": "Cloud Foundry installation on staccato v4 I have to specify three parameters so",
    "start": "502000",
    "end": "507219"
  },
  {
    "text": "let me go ahead and kick that off so all I'm doing here is HSM create",
    "start": "507219",
    "end": "514680"
  },
  {
    "text": "instance that the name of the instance the instance ID and and the version",
    "start": "514680",
    "end": "520849"
  },
  {
    "text": "another thing that you would notice here is that when you do a list of services you can have multiple product versions",
    "start": "520849",
    "end": "527310"
  },
  {
    "text": "and so this makes upgradability really easy so if you're on product version like over here if you look at service",
    "start": "527310",
    "end": "533700"
  },
  {
    "text": "console you'll see there's two versions available for it for dodo and 4.1 if you're on one version you're very easily",
    "start": "533700",
    "end": "541020"
  },
  {
    "text": "able to upgrade between two to the next version service manager has logic that",
    "start": "541020",
    "end": "549180"
  },
  {
    "text": "basically takes care of using this DSL called STL figures out whether a version",
    "start": "549180",
    "end": "557130"
  },
  {
    "text": "is upgradable to another version and will let you upgrade from only versions that are upgradeable to versions that",
    "start": "557130",
    "end": "563820"
  },
  {
    "text": "make sense okay that's it let's go ahead and kick off this create instance okay",
    "start": "563820",
    "end": "573029"
  },
  {
    "text": "so like I said for required values that are needed it will prompt us to enter",
    "start": "573029",
    "end": "578850"
  },
  {
    "text": "values for it the service name is not required it will generate one but it's nice to have something that's human",
    "start": "578850",
    "end": "584310"
  },
  {
    "text": "readable so it gives you the option of that I'm just going to call it ACF the",
    "start": "584310",
    "end": "590250"
  },
  {
    "text": "cluster password for the cluster administrator and the the base domain",
    "start": "590250",
    "end": "599700"
  },
  {
    "text": "name that the Cloud Foundry cluster is going to use so we've provisioned DNS already for",
    "start": "599700",
    "end": "604980"
  },
  {
    "text": "this so I'm just going to type that in here",
    "start": "604980",
    "end": "609230"
  },
  {
    "text": "and as you can see it's off creating the instance so since Cloud Foundry is pretty big it",
    "start": "623830",
    "end": "631540"
  },
  {
    "text": "involves around 30 or so pods and things like that it takes a little while to",
    "start": "631540",
    "end": "637420"
  },
  {
    "text": "create so I'm just going to go back to the slides and tell you a little bit more about the architecture of the",
    "start": "637420",
    "end": "642730"
  },
  {
    "text": "control plane that is makes this happen",
    "start": "642730",
    "end": "646560"
  },
  {
    "start": "654000",
    "end": "951000"
  },
  {
    "text": "okay so as you can see here the control plane you can think of the human control",
    "start": "654350",
    "end": "661430"
  },
  {
    "text": "plane is sort of distinctly divided into three types of services micro services",
    "start": "661430",
    "end": "667300"
  },
  {
    "text": "they're what I call the backbone which sort of forms the brain of the control plane we have added services which",
    "start": "667300",
    "end": "674480"
  },
  {
    "text": "basically are services that the control plane brings up and uses but are also available to other applications that get",
    "start": "674480",
    "end": "682340"
  },
  {
    "text": "installed in this same platform and in addition to that we have dependencies",
    "start": "682340",
    "end": "688310"
  },
  {
    "text": "which are basically dependencies that are required for some of the functionality of the control plane to",
    "start": "688310",
    "end": "694190"
  },
  {
    "text": "work so talking about just the the backbone or the brains of the control",
    "start": "694190",
    "end": "699800"
  },
  {
    "text": "plane we've got three different micro services we have instance policy manager",
    "start": "699800",
    "end": "705470"
  },
  {
    "text": "resource policy manager and Hylian service manager and I'll go a little bit into all these three in detail so",
    "start": "705470",
    "end": "712370"
  },
  {
    "text": "instance policy manager is basically the micro service that's responsible for taking in the sort of API calls that are",
    "start": "712370",
    "end": "720830"
  },
  {
    "text": "made to create an instance or it basically handles the lifecycle of that instance so things like creates updates",
    "start": "720830",
    "end": "728500"
  },
  {
    "text": "and all that so as as part of that what it also does is it is the interface into",
    "start": "728500",
    "end": "734470"
  },
  {
    "text": "two kubernetes so all of the translation between the service definition language",
    "start": "734470",
    "end": "740870"
  },
  {
    "text": "the the DSL that I mentioned earlier and the actual kubernetes definitions is",
    "start": "740870",
    "end": "747350"
  },
  {
    "text": "done by that instance policy manager so really the the brains that sort of",
    "start": "747350",
    "end": "754130"
  },
  {
    "text": "controls kubernetes that sits in this platform resource policy manager the",
    "start": "754130",
    "end": "762170"
  },
  {
    "text": "second one over here on the other hand is sort of the brains that controls the underlying infrastructure service so if",
    "start": "762170",
    "end": "770210"
  },
  {
    "text": "you think about so this is deployed on the AWS public cloud so when we extend",
    "start": "770210",
    "end": "776720"
  },
  {
    "text": "the size of the cluster we have to do a bunch of vayas operations we have to do things like bring up new nodes we have",
    "start": "776720",
    "end": "782450"
  },
  {
    "text": "to do things like create volumes delete volumes if an application goes away things like that",
    "start": "782450",
    "end": "788030"
  },
  {
    "text": "so the resource policy manager is really the micro service that knows about what I as it's running on top of and makes",
    "start": "788030",
    "end": "795110"
  },
  {
    "text": "the actual AI as specific calls to perform whatever operations are required",
    "start": "795110",
    "end": "801950"
  },
  {
    "text": "I mentioned the Hylian service manager briefly before this is the brains that is responsible for the application",
    "start": "801950",
    "end": "809510"
  },
  {
    "text": "catalog so it takes care of for example listing out the services that are",
    "start": "809510",
    "end": "815480"
  },
  {
    "text": "available to you doing service discovery and also things like doing the parameter",
    "start": "815480",
    "end": "824600"
  },
  {
    "text": "generation that we talked about earlier in the added services piece we have sort",
    "start": "824600",
    "end": "832340"
  },
  {
    "text": "of three different added services that applications on the platform can leverage we have user account and",
    "start": "832340",
    "end": "838700"
  },
  {
    "text": "authentication which is basically the Cloud Foundry you a a service which is a",
    "start": "838700",
    "end": "846320"
  },
  {
    "text": "fully fledged Roth - provider that the control plane makes you yourself in the",
    "start": "846320",
    "end": "852230"
  },
  {
    "text": "default zone and through the SDL that I was talking about earlier other instances of applications can also make",
    "start": "852230",
    "end": "859880"
  },
  {
    "text": "use of this in their own zone so if you need to do or for your particular",
    "start": "859880",
    "end": "866240"
  },
  {
    "text": "application that you're deploying on on top of this your you can specifically create a zone for yourself create watch",
    "start": "866240",
    "end": "872450"
  },
  {
    "text": "scopes groups users and use that flight",
    "start": "872450",
    "end": "877670"
  },
  {
    "text": "recorder is a logging service which is basically a log drain a syslog drain",
    "start": "877670",
    "end": "883430"
  },
  {
    "text": "that applications can send their logs to and you can connect flight recorder to an L cluster and basically that helps",
    "start": "883430",
    "end": "892190"
  },
  {
    "text": "with sending logs from your applications out that making make it easily searchable for troubleshooting and sort",
    "start": "892190",
    "end": "899900"
  },
  {
    "text": "of manageability keatster is an added service for resource analysis it's to keep stir from upstream sort of",
    "start": "899900",
    "end": "906410"
  },
  {
    "text": "kubernetes and so you can it can tell you how much memory applications are taking and you can do a bunch of",
    "start": "906410",
    "end": "913190"
  },
  {
    "text": "resource analysis using it dependencies are fairly straightforward we use Postgres as a datastore for a lot of the",
    "start": "913190",
    "end": "920600"
  },
  {
    "text": "instance that we keep track of in in the in the backbone and we use Nats as a message",
    "start": "920600",
    "end": "927499"
  },
  {
    "text": "queue to basically just for the task system so we create async asynchronous",
    "start": "927499",
    "end": "934160"
  },
  {
    "text": "tasks to do things and we use Nats for that so with that I will hand it over to",
    "start": "934160",
    "end": "941600"
  },
  {
    "text": "Vlad who's going to tell you so I spoke a little bit about the control plane he'll tell you a bit more on the Cloud Foundry side of things so glad to take",
    "start": "941600",
    "end": "948709"
  },
  {
    "text": "it away thank you okay so we learned about the control plane which is this",
    "start": "948709",
    "end": "955519"
  },
  {
    "start": "951000",
    "end": "1256000"
  },
  {
    "text": "platform that sits on top of kubernetes that helps us deploy containerized applications on top of kubernetes i'm",
    "start": "955519",
    "end": "963559"
  },
  {
    "text": "going to talk a bit about how we made it so that you could deploy Cloud Foundry on top of on top of kubernetes using the",
    "start": "963559",
    "end": "971480"
  },
  {
    "text": "control plane so if you're not familiar with the cloud foundry it's usually",
    "start": "971480",
    "end": "977389"
  },
  {
    "text": "deployed using a tool chain called Bosch and in a very simplistic way the Bosch",
    "start": "977389",
    "end": "983689"
  },
  {
    "text": "tool chain tells you how to organize the code in your software so that it can",
    "start": "983689",
    "end": "989059"
  },
  {
    "text": "easily be deployed on VMs and then after you've written your software Bosch can",
    "start": "989059",
    "end": "995899"
  },
  {
    "text": "also help you deploy and manage your software on top of VMs but it's an",
    "start": "995899",
    "end": "1002529"
  },
  {
    "text": "important thing that Bosch is a solution and a good solution for for VM infrastructures but we wanted to deploy",
    "start": "1002529",
    "end": "1009129"
  },
  {
    "text": "stuff on on kubernetes so we wrote this tool called Fissel that helps us convert",
    "start": "1009129",
    "end": "1015879"
  },
  {
    "text": "bashed like things to darker containers and it it has this ability because we're",
    "start": "1015879",
    "end": "1023230"
  },
  {
    "text": "live leveraging the structure of the code that is prescribed by Bosch so",
    "start": "1023230",
    "end": "1029159"
  },
  {
    "text": "because this structure exists and all of the cloud foundry project we know how to",
    "start": "1029159",
    "end": "1035319"
  },
  {
    "text": "automatically compile configure and run all of Cloud Foundry automatically",
    "start": "1035319",
    "end": "1040329"
  },
  {
    "text": "during a build process supported by fizzle and a really nice side effect of",
    "start": "1040329",
    "end": "1048569"
  },
  {
    "text": "using a tool like this is that it gives you mechanisms to make deployments",
    "start": "1048570",
    "end": "1054380"
  },
  {
    "text": "year for the user if you just noticed when you kill deployed Cloud Foundry you only had to specify three parameters",
    "start": "1054380",
    "end": "1061070"
  },
  {
    "text": "which is really cool usually when you have to the political autonomy with Bosch you have many many",
    "start": "1061070",
    "end": "1067130"
  },
  {
    "text": "things to configure and it's really complicated and it also allows you to",
    "start": "1067130",
    "end": "1073760"
  },
  {
    "text": "deliver compiled bits to the user so usually with with Bosch the the operator",
    "start": "1073760",
    "end": "1081830"
  },
  {
    "text": "would compile things locally on-premise using Bosch this way we actually deliver",
    "start": "1081830",
    "end": "1089660"
  },
  {
    "text": "images that contain precompiled bits to the customer and the configuration",
    "start": "1089660",
    "end": "1095330"
  },
  {
    "text": "mechanism is also different using fizzle every container that runs inside",
    "start": "1095330",
    "end": "1100550"
  },
  {
    "text": "kubernetes is actually configured using environment variables just like you know twelve factor app would so to sum up",
    "start": "1100550",
    "end": "1109700"
  },
  {
    "text": "Fissel uses bosch the bar structure that's available inside the Cloud",
    "start": "1109700",
    "end": "1115880"
  },
  {
    "text": "Foundry source code to create containers for the entire Cloud Foundry Cloud",
    "start": "1115880",
    "end": "1122960"
  },
  {
    "text": "Foundry release and Fissel creates these",
    "start": "1122960",
    "end": "1128600"
  },
  {
    "text": "containers from Bosch releases because we want it to be cloth under certified",
    "start": "1128600",
    "end": "1134240"
  },
  {
    "text": "and this this containerized cloud foundry that you just saw deployed has",
    "start": "1134240",
    "end": "1140600"
  },
  {
    "text": "been certified by the cloud foundry foundation and as you'll see it runs on",
    "start": "1140600",
    "end": "1146120"
  },
  {
    "text": "on kubernetes so I'm gonna switch back to a console hopefully you'll be able to",
    "start": "1146120",
    "end": "1154220"
  },
  {
    "text": "see this",
    "start": "1154220",
    "end": "1156640"
  },
  {
    "text": "okay so first let's see if the instance",
    "start": "1161390",
    "end": "1169539"
  },
  {
    "text": "what's deployed sorry last instances so",
    "start": "1169539",
    "end": "1180729"
  },
  {
    "text": "it's still creating right now so we're gonna have to wait a bit longer for for",
    "start": "1180729",
    "end": "1185859"
  },
  {
    "text": "all the containers to come up so while",
    "start": "1185859",
    "end": "1191259"
  },
  {
    "text": "that is happening I can show you the leak and see this kubernetes dashboard",
    "start": "1191259",
    "end": "1198789"
  },
  {
    "text": "showing the namespace for HCF the thing",
    "start": "1198789",
    "end": "1204159"
  },
  {
    "text": "that we've just deployed",
    "start": "1204159",
    "end": "1208349"
  },
  {
    "text": "okay so we might have a problem here I'll just let this run in the background",
    "start": "1215970",
    "end": "1221220"
  },
  {
    "text": "and come back to it later we're doing this live so it might have an issue as",
    "start": "1221220",
    "end": "1229070"
  },
  {
    "text": "it happens so we don't actually use a",
    "start": "1229070",
    "end": "1237240"
  },
  {
    "text": "Bosch manifest let me switch back to the presentation so physical doesn't",
    "start": "1237240",
    "end": "1248549"
  },
  {
    "text": "actually use a Bosch manifested it uses something similar actually let me go to",
    "start": "1248549",
    "end": "1254269"
  },
  {
    "text": "the next slide so we open sourced Fissel",
    "start": "1254269",
    "end": "1260399"
  },
  {
    "start": "1256000",
    "end": "1656000"
  },
  {
    "text": "a few months ago during the cloud foundry summit in the u.s. at that point",
    "start": "1260399",
    "end": "1268019"
  },
  {
    "text": "not a lot of people were able to use it because there weren't examples for it so",
    "start": "1268019",
    "end": "1273690"
  },
  {
    "text": "today we've we've released CF solo which will serve as a as a component as an",
    "start": "1273690",
    "end": "1281129"
  },
  {
    "text": "example on how to containerized cloud foundry using Fissel and I can actually show you the code for this perhaps show",
    "start": "1281129",
    "end": "1293610"
  },
  {
    "text": "you what I mean by not a Bosch manifest so if we go to the CF solo repo",
    "start": "1293610",
    "end": "1302179"
  },
  {
    "text": "falou you can read this so Fissel will expect you to have a bunch of Barcia",
    "start": "1310980",
    "end": "1317669"
  },
  {
    "text": "releases and the roll manifest the roll manifest will tell fissile how you want",
    "start": "1317669",
    "end": "1324000"
  },
  {
    "text": "your botched jobs and packages split up into multiple darker images in this",
    "start": "1324000",
    "end": "1331470"
  },
  {
    "text": "example we're actually building one one one container so it's actually a pretty",
    "start": "1331470",
    "end": "1337200"
  },
  {
    "text": "interesting project you can run all of Cloud Foundry inside one docker container so you do docker run a few",
    "start": "1337200",
    "end": "1343080"
  },
  {
    "text": "things and then all of cloud foundry will start up in in one container with",
    "start": "1343080",
    "end": "1348360"
  },
  {
    "text": "all the bits that come from from upstream so to give you an idea you have",
    "start": "1348360",
    "end": "1355080"
  },
  {
    "text": "all the jobs listed here with a release similar to to how a barge deployment",
    "start": "1355080",
    "end": "1361350"
  },
  {
    "text": "manifest specifies things and then at the bottom you write some mustache",
    "start": "1361350",
    "end": "1369360"
  },
  {
    "text": "templates that basically translate environment variables into Bosh Bosh",
    "start": "1369360",
    "end": "1375660"
  },
  {
    "text": "property values and let me also show you the releases that come into play for",
    "start": "1375660",
    "end": "1383669"
  },
  {
    "text": "building this so you have CF release the root FS for CF Linux FS to Diego garden",
    "start": "1383669",
    "end": "1391980"
  },
  {
    "text": "Linux and the routing release so essentially you build dev barse dev",
    "start": "1391980",
    "end": "1398280"
  },
  {
    "text": "releases out of all of these you feed in the role manifest and fizzles but will",
    "start": "1398280",
    "end": "1403919"
  },
  {
    "text": "spit out containers with all the binaries in them please",
    "start": "1403919",
    "end": "1410630"
  },
  {
    "text": "right right so the question was normally when",
    "start": "1420820",
    "end": "1428800"
  },
  {
    "text": "you deploy cloud founder you have a lot of parameters when we deployed there were just three how how do we handle the",
    "start": "1428800",
    "end": "1436000"
  },
  {
    "text": "rest of the things that get configured so as Nikhil mentioned earlier the HSM",
    "start": "1436000",
    "end": "1442960"
  },
  {
    "text": "part of the cloud of the control plane that we have has the ability to generate",
    "start": "1442960",
    "end": "1448030"
  },
  {
    "text": "parameters so most of the parameters inside Cloud Foundry it's like that you",
    "start": "1448030",
    "end": "1455230"
  },
  {
    "text": "need to specify as a user that you you must specify as a user our secrets things like passwords certificates and",
    "start": "1455230",
    "end": "1463770"
  },
  {
    "text": "so on HSM has the ability to generate all of these for you of course we could",
    "start": "1463770",
    "end": "1471010"
  },
  {
    "text": "have specified each one each certificate each password each secret but we don't",
    "start": "1471010",
    "end": "1478060"
  },
  {
    "text": "we just automatically generate those and and move on so it's a it's a bit of a",
    "start": "1478060",
    "end": "1484450"
  },
  {
    "text": "value add on top of silver Nettie's if if you weren't using HSM you would have",
    "start": "1484450",
    "end": "1490150"
  },
  {
    "text": "to just specify all of these all of these secrets manually still it would be",
    "start": "1490150",
    "end": "1498190"
  },
  {
    "text": "a lot less than all the properties you find in a barcia deployment manifest and",
    "start": "1498190",
    "end": "1506940"
  },
  {
    "text": "they're kind of easier to deal with because their environment variables so",
    "start": "1508050",
    "end": "1513120"
  },
  {
    "text": "you could take each image and docker run it manually if you think about it",
    "start": "1513120",
    "end": "1518650"
  },
  {
    "text": "there's no other way for you to actually run each component of Cloud Foundry manually without resorting to Bosh so",
    "start": "1518650",
    "end": "1526030"
  },
  {
    "text": "this gives you an alternative there's also another helper file here",
    "start": "1526030",
    "end": "1531760"
  },
  {
    "text": "which we call opinions this looks like a Bosch manifest as well this is basically",
    "start": "1531760",
    "end": "1538000"
  },
  {
    "text": "a collection of values that you as a as",
    "start": "1538000",
    "end": "1543540"
  },
  {
    "text": "a let's say vendor of a Cloud Foundry distro you feel that the defaults that",
    "start": "1543540",
    "end": "1549880"
  },
  {
    "text": "Cloud Foundry comes with are not proper and you want to change them so these values will actually give be baked into",
    "start": "1549880",
    "end": "1557320"
  },
  {
    "text": "the image that you deploy to the to the to the end-user and you can override them here in this opinion siamo and",
    "start": "1557320",
    "end": "1563830"
  },
  {
    "text": "Fissel will embed them in the image for you okay let me quickly check to see if",
    "start": "1563830",
    "end": "1575559"
  },
  {
    "text": "there was any progress on our hcf deployment it looks like not yet so I",
    "start": "1575559",
    "end": "1582880"
  },
  {
    "text": "will move on to the next part of of the presentation so that apparently the",
    "start": "1582880",
    "end": "1592779"
  },
  {
    "text": "deployment is taking longer to deploy apologies for that I was basically going to show you me targeting to to the",
    "start": "1592779",
    "end": "1600700"
  },
  {
    "text": "deployment creating an app creating an organ space and so on and hooking up to a service that that's deployed on the",
    "start": "1600700",
    "end": "1607419"
  },
  {
    "text": "same on the same control plane so I'm",
    "start": "1607419",
    "end": "1613480"
  },
  {
    "text": "going to so I talked about CF solo and please if you get a chance go to these",
    "start": "1613480",
    "end": "1619059"
  },
  {
    "text": "projects you can run CF solo very easily on a Linux machine it's literally one",
    "start": "1619059",
    "end": "1624549"
  },
  {
    "text": "command-line and it runs all of Cloud Foundry in in one container and you",
    "start": "1624549",
    "end": "1630190"
  },
  {
    "text": "should be able to target a deploy apps immediately after that it's based on",
    "start": "1630190",
    "end": "1635409"
  },
  {
    "text": "Cloud Foundry version 241 and if you like this idea of being able to run all",
    "start": "1635409",
    "end": "1641769"
  },
  {
    "text": "of Cloud Foundry in one darker container please let us know and help us make this",
    "start": "1641769",
    "end": "1647409"
  },
  {
    "text": "thing better there's also a channel on Cloud Foundry slack for for Fissel ok so",
    "start": "1647409",
    "end": "1657490"
  },
  {
    "start": "1656000",
    "end": "1996000"
  },
  {
    "text": "the final piece a thing that we call furnace so we've just established that",
    "start": "1657490",
    "end": "1663759"
  },
  {
    "text": "we're running Cloud Foundry on top of kubernetes and if you think about it we",
    "start": "1663759",
    "end": "1668889"
  },
  {
    "text": "still have Diego release so question is are we running containers in containers",
    "start": "1668889",
    "end": "1675730"
  },
  {
    "text": "yes we are basically garden containers",
    "start": "1675730",
    "end": "1680950"
  },
  {
    "text": "which are which are the way that Cloud Foundry deploys applications for you they run inside the docker containers",
    "start": "1680950",
    "end": "1688690"
  },
  {
    "text": "that get deployed by kubernetes and this works fine we haven't seen any performance issue issues but why do I do",
    "start": "1688690",
    "end": "1697610"
  },
  {
    "text": "this why run containers in containers the obvious the next question would be why",
    "start": "1697610",
    "end": "1703760"
  },
  {
    "text": "not deploy Cloud Foundry apps directly on kubernetes since you already have a kubernetes and it's a good question so",
    "start": "1703760",
    "end": "1710750"
  },
  {
    "text": "we started an experiment together with IBM to try and make the scheduler in",
    "start": "1710750",
    "end": "1715940"
  },
  {
    "text": "Cloud Foundry pluggable so this would mean if you're familiar with Cloud",
    "start": "1715940",
    "end": "1722510"
  },
  {
    "text": "Foundry the the current scheduler is called Diego and we just wanted to to",
    "start": "1722510",
    "end": "1729470"
  },
  {
    "text": "put out an obstruction layer in the middle so we can swap it up for something different and of course what",
    "start": "1729470",
    "end": "1735770"
  },
  {
    "text": "would be a good first alternative implementation other than kubernetes so",
    "start": "1735770",
    "end": "1741740"
  },
  {
    "text": "we did this and it's experimental work only it's not part of the HTF distro",
    "start": "1741740",
    "end": "1749600"
  },
  {
    "text": "that we we've we've tried to deploy but it is dimmable so i'm gonna give you a",
    "start": "1749600",
    "end": "1755690"
  },
  {
    "text": "demo of a furnace right now",
    "start": "1755690",
    "end": "1760029"
  },
  {
    "text": "before you can see this",
    "start": "1764330",
    "end": "1768070"
  },
  {
    "text": "okay so what I'm going to do now is",
    "start": "1769800",
    "end": "1775220"
  },
  {
    "text": "deploy the Dora app which it's a reference application that the Cloud",
    "start": "1775220",
    "end": "1780570"
  },
  {
    "text": "Foundry community uses to test to test alternative deployments and this is going to get deployed on a local bar",
    "start": "1780570",
    "end": "1787830"
  },
  {
    "text": "slight deployment of Cloud Foundry that has this furnace project embedded into",
    "start": "1787830",
    "end": "1794640"
  },
  {
    "text": "it so I'm just going to do CF push Dora",
    "start": "1794640",
    "end": "1800480"
  },
  {
    "text": "okay and we should see in about a few seconds",
    "start": "1800570",
    "end": "1807480"
  },
  {
    "text": "some logs coming up these already don't look like the normal logs you would see in a cloud foundry deployment and it's",
    "start": "1807480",
    "end": "1814530"
  },
  {
    "text": "because the staging is actually happening inside a docker container on kubernetes so if we quickly switch to",
    "start": "1814530",
    "end": "1823700"
  },
  {
    "text": "our furnace dashboard we'll see that we have a job here this job is 26 seconds",
    "start": "1823700",
    "end": "1834600"
  },
  {
    "text": "old and it's running staging for us for the application that I've just deployed",
    "start": "1834600",
    "end": "1840890"
  },
  {
    "text": "so moving back we're downloading stuff here",
    "start": "1840890",
    "end": "1846330"
  },
  {
    "text": "we don't have caching yet so every time we deploy an application it actually downloads all the bill packs tries to",
    "start": "1846330",
    "end": "1852480"
  },
  {
    "text": "figure out which bill back to to use the deploy and then actually deploys the thing",
    "start": "1852480",
    "end": "1857820"
  },
  {
    "text": "so if you notice logs will also work so",
    "start": "1857820",
    "end": "1863610"
  },
  {
    "text": "the whole logger Gator system works as well and we got an application running",
    "start": "1863610",
    "end": "1870000"
  },
  {
    "text": "so how does that look like so if we refresh we should see a new replication",
    "start": "1870000",
    "end": "1876330"
  },
  {
    "text": "controller here which is 29 seconds old if you if you look the image that's used",
    "start": "1876330",
    "end": "1882510"
  },
  {
    "text": "for this running application is CF Linux FS - so it's the docker equivalent of",
    "start": "1882510",
    "end": "1889440"
  },
  {
    "text": "the rule FS image that comes with Cloud Foundry so let's just see if this",
    "start": "1889440",
    "end": "1896060"
  },
  {
    "text": "application works",
    "start": "1896060",
    "end": "1899330"
  },
  {
    "text": "and it is so this is running bill pack",
    "start": "1901860",
    "end": "1912820"
  },
  {
    "text": "based applications using cloud foundry on kubernetes but as you're probably",
    "start": "1912820",
    "end": "1920440"
  },
  {
    "text": "aware cloud foundry can also deploy darker based applications so this is actually interesting if you do something",
    "start": "1920440",
    "end": "1926290"
  },
  {
    "text": "like push a darker test application this",
    "start": "1926290",
    "end": "1933700"
  },
  {
    "text": "is a very small node based docker image",
    "start": "1933700",
    "end": "1939240"
  },
  {
    "text": "this is really cool the staging part because it's it's kubernetes is a no op so it's really",
    "start": "1939270",
    "end": "1945760"
  },
  {
    "text": "fast so we for the staging part normally Cloud Foundry has to download the docker",
    "start": "1945760",
    "end": "1950950"
  },
  {
    "text": "image it has to upload to the image to a blob store then it has to come back and",
    "start": "1950950",
    "end": "1956320"
  },
  {
    "text": "so on for us for kubernetes we actually do nothing it's an op and then we just pass",
    "start": "1956320",
    "end": "1963160"
  },
  {
    "text": "on through and tell kubernetes to run the docker image that we want so as you can see it's it's pretty fast let's see",
    "start": "1963160",
    "end": "1970750"
  },
  {
    "text": "if this one works and it does ok so let",
    "start": "1970750",
    "end": "1979030"
  },
  {
    "text": "me give this another look okay so we",
    "start": "1979030",
    "end": "1984340"
  },
  {
    "text": "we're not gonna see that HTF come up sorry about that but these are basically all the all the",
    "start": "1984340",
    "end": "1995710"
  },
  {
    "text": "pieces that we wanted to show you you can see here that we've we've completed",
    "start": "1995710",
    "end": "2002940"
  },
  {
    "start": "1996000",
    "end": "2270000"
  },
  {
    "text": "the work to run Cloud Foundry on top of kubernetes it runs well it's a fully Cloud Foundry foundation certified",
    "start": "2002940",
    "end": "2009740"
  },
  {
    "text": "distribution and we're also thinking about ways to make the whole thing simpler by trying to trying to deploy",
    "start": "2009740",
    "end": "2018600"
  },
  {
    "text": "applications on top of kubernetes not doing containers and containers of",
    "start": "2018600",
    "end": "2024720"
  },
  {
    "text": "course there's still a lot of work to be done there kubernetes doesn't have all",
    "start": "2024720",
    "end": "2029910"
  },
  {
    "text": "the features necessary to have 100% parity with what with the",
    "start": "2029910",
    "end": "2036350"
  },
  {
    "text": "capabilities the claw foundry has today but it's definitely something interesting so thank you and if there",
    "start": "2036350",
    "end": "2044360"
  },
  {
    "text": "are any questions would be happy to answer them",
    "start": "2044360",
    "end": "2048669"
  },
  {
    "text": "the storage so the question was how do we manage the storage of the application",
    "start": "2079220",
    "end": "2084620"
  },
  {
    "text": "when things get deployed on kubernetes for the furnace project Oh",
    "start": "2084620",
    "end": "2089830"
  },
  {
    "text": "okay so first the the Gluster FS system is for the control plane it's only",
    "start": "2100830",
    "end": "2108240"
  },
  {
    "text": "available to two distributed systems that get deployed exclusively through",
    "start": "2108240",
    "end": "2113550"
  },
  {
    "text": "the the control plane that we've built and second the furnace project is just",
    "start": "2113550",
    "end": "2118710"
  },
  {
    "text": "an experiment it's it it's not tied to staccato in any way it's just an",
    "start": "2118710",
    "end": "2124530"
  },
  {
    "text": "experiment that runs off of upstream barf releases in bars light so we don't",
    "start": "2124530",
    "end": "2132240"
  },
  {
    "text": "have file system support for applications running in Cloud Foundry if that's what you're asking",
    "start": "2132240",
    "end": "2137400"
  },
  {
    "text": "those cluster FS volumes are only used",
    "start": "2137400",
    "end": "2143430"
  },
  {
    "text": "for for things like Cloud Foundry itself not applications in class",
    "start": "2143430",
    "end": "2149960"
  },
  {
    "text": "oh yeah yeah so the Percy project we're working on that now and we're looking at",
    "start": "2154560",
    "end": "2162150"
  },
  {
    "text": "ways where we can use the glossary FS support available in in the control",
    "start": "2162150",
    "end": "2167610"
  },
  {
    "text": "plane and leverage it in in Percy yes",
    "start": "2167610",
    "end": "2178980"
  },
  {
    "text": "yes right so just talk to answer that",
    "start": "2178980",
    "end": "2187440"
  },
  {
    "text": "question the question is whether if I'm getting it right the Gluster pieces that we deploy whether that's",
    "start": "2187440",
    "end": "2192869"
  },
  {
    "text": "usable by the control plane at all so for stuff that's deployed using the DSL",
    "start": "2192869",
    "end": "2197880"
  },
  {
    "text": "that I was talking about the service the service language you can specify whether",
    "start": "2197880",
    "end": "2204600"
  },
  {
    "text": "you want a volume support or shared volume support if you specify you want",
    "start": "2204600",
    "end": "2209790"
  },
  {
    "text": "volume support then we use volumes in the eye as providers so for example you would get AWS provisioned volumes if you",
    "start": "2209790",
    "end": "2216480"
  },
  {
    "text": "say you want shared volume support for your application then you'd get a volume on cluster that you can attach to",
    "start": "2216480",
    "end": "2223050"
  },
  {
    "text": "multiple containers in kubernetes itself so we we make use of kubernetes notion of volume and shared volume to leverage",
    "start": "2223050",
    "end": "2230880"
  },
  {
    "text": "either the underlying I as provider volumes or Gloster offense volumes in",
    "start": "2230880",
    "end": "2236250"
  },
  {
    "text": "this case",
    "start": "2236250",
    "end": "2238550"
  },
  {
    "text": "so the question was whether the glaziers version of staccato is VMs or",
    "start": "2248150",
    "end": "2253880"
  },
  {
    "text": "containerized cloud foundry the answer is containerized so staccato 4.0 has containerized cloud foundry okay",
    "start": "2253880",
    "end": "2265910"
  },
  {
    "text": "thank you",
    "start": "2265910",
    "end": "2268180"
  }
]