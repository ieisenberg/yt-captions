[
  {
    "text": "all right hello everyone thanks for coming to listen to our lovely talk on how we're doing stateful uh LinkedIn on",
    "start": "280",
    "end": "7400"
  },
  {
    "text": "kubernetes so before we get started a little bit about us I'm a Staff engineer at LinkedIn I've been at LinkedIn for",
    "start": "7400",
    "end": "13320"
  },
  {
    "text": "about five years now for the first three and a half years I worked on all things Commerce at LinkedIn so if you ever",
    "start": "13320",
    "end": "18640"
  },
  {
    "text": "bought something on LinkedIn premium uh I touched that and then for the next for the last one and a half years I've been",
    "start": "18640",
    "end": "24760"
  },
  {
    "text": "working on all the goodies that you're going to see in this talk um hi everyone uh my name is",
    "start": "24760",
    "end": "30840"
  },
  {
    "text": "dantong I am a software engineer from one of uh linkedin's data infrastructure",
    "start": "30840",
    "end": "36079"
  },
  {
    "text": "teams uh the team manages linkedin's um document store and we are the pilot",
    "start": "36079",
    "end": "42280"
  },
  {
    "text": "application the Pilot State for application on kubernetes at LinkedIn um I'm really excited to be here to share",
    "start": "42280",
    "end": "48640"
  },
  {
    "text": "our experience about running State applications on top of kubernetes yeah",
    "start": "48640",
    "end": "54399"
  },
  {
    "text": "wrong way so uh what are we going to talk about today just a small overview",
    "start": "54399",
    "end": "59519"
  },
  {
    "text": "of sort of of where we started and how we arrived to the solution that we're going to present today uh we're going to",
    "start": "59519",
    "end": "65320"
  },
  {
    "text": "talk a bit about cooperation with the application cluster managers uh we'll talk a bit about what our operator",
    "start": "65320",
    "end": "70960"
  },
  {
    "text": "actually looks like what it does uh we'll talk about host life cycle maintenance some of the lessons learned",
    "start": "70960",
    "end": "76560"
  },
  {
    "text": "acknowledgements and some Q&A at the end oh um all right uh let's start with uh",
    "start": "76560",
    "end": "84400"
  },
  {
    "text": "the problem we are trying to solve so uh at LinkedIn we run quite a few staple",
    "start": "84400",
    "end": "89439"
  },
  {
    "text": "applications for example we have CFA for stream processing we have our graph",
    "start": "89439",
    "end": "95520"
  },
  {
    "text": "database and of course we have the document store which is one of the state applications at LinkedIn so um on the",
    "start": "95520",
    "end": "103320"
  },
  {
    "text": "Lexi computer infrastructure uh each of these St applications operates in their",
    "start": "103320",
    "end": "108880"
  },
  {
    "text": "own private pool of notes the applications run on Bal machines uh each",
    "start": "108880",
    "end": "115119"
  },
  {
    "text": "team have developed like numerous um automations and toolings to manage their",
    "start": "115119",
    "end": "121079"
  },
  {
    "text": "workloads uh to handle things like scaling maintenance and so on so uh if",
    "start": "121079",
    "end": "127119"
  },
  {
    "text": "you compare the automation tooling developed by each team it's easy to see",
    "start": "127119",
    "end": "132120"
  },
  {
    "text": "that uh they have great similarities for example they um use the same set of APs",
    "start": "132120",
    "end": "138680"
  },
  {
    "text": "from the computer infrastructure they perform similar tasks so basically like every team is",
    "start": "138680",
    "end": "146040"
  },
  {
    "text": "Reinventing uh re inventing will um on the other hand uh despite all the",
    "start": "146040",
    "end": "151720"
  },
  {
    "text": "automation tooling developed by by teams we still hit limits uh especially with",
    "start": "151720",
    "end": "158360"
  },
  {
    "text": "big operations like Tech refresh this kind of operations uh usually requires",
    "start": "158360",
    "end": "163800"
  },
  {
    "text": "collaboration between the hardware team and the application team which makes it so hard to fully automate uh so given",
    "start": "163800",
    "end": "171959"
  },
  {
    "text": "all these pinpoints uh it's clear that like we want a more modern and unified",
    "start": "171959",
    "end": "177680"
  },
  {
    "text": "computer infrastructure so given that you know we had this toil",
    "start": "177680",
    "end": "183440"
  },
  {
    "text": "we decided we wanted to sort of reinvent our stack so we sort of started to build our next Generation compute",
    "start": "183440",
    "end": "188959"
  },
  {
    "text": "infrastructure at LinkedIn so we have on one side the infrastructure as a service platform so on this side it is",
    "start": "188959",
    "end": "195519"
  },
  {
    "text": "completely decoupled from kubernetes it is not kubernetes aware and it basically sits on top of the data center and you",
    "start": "195519",
    "end": "202159"
  },
  {
    "text": "can see all the highle components maintenance management host Health Management quota management all of these",
    "start": "202159",
    "end": "207599"
  },
  {
    "text": "goodies that you'd expect from a compute layer and then on top of that we actually layer kubernetes so we have a",
    "start": "207599",
    "end": "213400"
  },
  {
    "text": "hub and smoke model where we have a hub cluster that sort of manages all of the work clusters and so the way we scale",
    "start": "213400",
    "end": "220720"
  },
  {
    "text": "kubernetes at LinkedIn is actually we just scale out our work clusters and the Hub cluster just helps us manage that so",
    "start": "220720",
    "end": "226439"
  },
  {
    "text": "given that we're using kubernetes we still had the problem of how on Earth are we going to actually run the stateful workloads on kubernetes right",
    "start": "226439",
    "end": "234000"
  },
  {
    "text": "and so you know there's a lot of problems with running stateful workloads on kubernetes so the first big problem",
    "start": "234000",
    "end": "240360"
  },
  {
    "text": "we have at LinkedIn is that we don't actually use network attached storage for a lot of our workloads so",
    "start": "240360",
    "end": "245799"
  },
  {
    "text": "historically at LinkedIn network attached storage could not meet the latency requirements of um serving",
    "start": "245799",
    "end": "251000"
  },
  {
    "text": "stateful applications so most of you guys today if you're running a stateful application you have some network",
    "start": "251000",
    "end": "256440"
  },
  {
    "text": "attached storage if you're going to lose a node unmount that thing you mount it on a new node congrats like life is",
    "start": "256440",
    "end": "262639"
  },
  {
    "text": "great um for our use case we're running mostly on local ssds and so I cannot",
    "start": "262639",
    "end": "268800"
  },
  {
    "text": "call a data center technician and ask them please unplug the SSD and put it into another host uh it's not scalable",
    "start": "268800",
    "end": "274680"
  },
  {
    "text": "for us and so given if we're going to lose a node we now have to contend with this problem of hey if the pod's going",
    "start": "274680",
    "end": "280840"
  },
  {
    "text": "away and we're bringing it up on a new node either we have to accept that we lost the data or we need to wait for the",
    "start": "280840",
    "end": "286360"
  },
  {
    "text": "data to somehow come up on that Noe the second problem that we have is",
    "start": "286360",
    "end": "291400"
  },
  {
    "text": "that kubernetes is kind of dumb in the sense that it is not Shard aware workload aware so look at this if you",
    "start": "291400",
    "end": "298199"
  },
  {
    "text": "look at this uh example here on the left we have a stateful set running three pods you don't really know",
    "start": "298199",
    "end": "304600"
  },
  {
    "text": "what they are and kubernetes doesn't know what they are and if you ask kubernetes hey please take down one of these pods for all you know you just",
    "start": "304600",
    "end": "311520"
  },
  {
    "text": "took down a pod from some key Value Store you lost the last Shard of your data and congrats we just took down",
    "start": "311520",
    "end": "317639"
  },
  {
    "text": "LinkedIn and so there's this key element of safety and like Shard awareness workload awareness that is not missing",
    "start": "317639",
    "end": "324639"
  },
  {
    "text": "um with stateful set or native kubernetes so just a quick overview",
    "start": "324639",
    "end": "329720"
  },
  {
    "text": "State full set just doesn't cut it for us at LinkedIn so the first big point is that it is not Shard towar so in that",
    "start": "329720",
    "end": "336199"
  },
  {
    "text": "previous example if I take down any random node any random pod may be evicted we'll lose the data we may have",
    "start": "336199",
    "end": "343440"
  },
  {
    "text": "a huge incident um the other point is that given that we were going to do a",
    "start": "343440",
    "end": "348520"
  },
  {
    "text": "lot of host life cycle uh maintenance we have a whole host life cycle stack um it",
    "start": "348520",
    "end": "354720"
  },
  {
    "text": "just doesn't flow well with stateful set I cannot go to a stateful set and say hey please temporarily forget about",
    "start": "354720",
    "end": "361440"
  },
  {
    "text": "these pods it's just not something that's supported by stateful C and there's other things that people ask for",
    "start": "361440",
    "end": "366599"
  },
  {
    "text": "at LinkedIn like hey I want to run multiple canaries on a single stateful set um stateful set cannot support this",
    "start": "366599",
    "end": "372080"
  },
  {
    "text": "kind of stuff so we needed something to bridge the Scout so typically the way this gets",
    "start": "372080",
    "end": "378680"
  },
  {
    "text": "solved in Industry today is that everyone gets an operator so we'll have kofka Operator tidb Operator basically",
    "start": "378680",
    "end": "385440"
  },
  {
    "text": "every staple system gets an operator and the operator essentially you'll have your customer resource definitions you",
    "start": "385440",
    "end": "391400"
  },
  {
    "text": "will have your custom business logic that will handle your scaling your deployments all of the goodies and you",
    "start": "391400",
    "end": "397319"
  },
  {
    "text": "know it's a fairly bespoke way to manage your system um but it does come with a",
    "start": "397319",
    "end": "402880"
  },
  {
    "text": "lot of drawbacks and you know we had a lot of goals when we were doing this sort of revamp and moving on to",
    "start": "402880",
    "end": "407960"
  },
  {
    "text": "kubernetes like we had a lot of trauma coming from that first slide where you saw all those different workflows and if",
    "start": "407960",
    "end": "413240"
  },
  {
    "text": "we gave everyone an operator it we end up basically in the same point in the same boat where instead of a workflow",
    "start": "413240",
    "end": "418759"
  },
  {
    "text": "you have an operator and if you give people instead of all these operators one operator with a",
    "start": "418759",
    "end": "424639"
  },
  {
    "text": "single crd it's very easy now to build tooling against the one crd it's very",
    "start": "424639",
    "end": "429759"
  },
  {
    "text": "easy to build a UI against the one crd there isn't a lot of you know repeat",
    "start": "429759",
    "end": "435319"
  },
  {
    "text": "work happening across LinkedIn it's it's much more efficient the other thing is that we wanted to make it very very easy",
    "start": "435319",
    "end": "441199"
  },
  {
    "text": "to do host life cycle maintenance you know we have a lot of nodes a lot of things go wrong in the data center so we",
    "start": "441199",
    "end": "446400"
  },
  {
    "text": "wanted to make it seamless to actually integrate in the host post life cycle maintenance stack that we have and the",
    "start": "446400",
    "end": "452199"
  },
  {
    "text": "last thing is that we really wanted to abstract kubernetes away uh kubernetes away from our our workloads um",
    "start": "452199",
    "end": "458639"
  },
  {
    "text": "kubernetes is pretty hard operators are pretty hard every time someone writes an operator they'll add a web hook every",
    "start": "458639",
    "end": "465360"
  },
  {
    "text": "time a web hook gets added to the cluster one of my hairs goes white um so we really did not want to have people",
    "start": "465360",
    "end": "472280"
  },
  {
    "text": "getting into the business of writing operators potentially introducing stuff into the into the cluster that we did not know what they were doing uh we",
    "start": "472280",
    "end": "478879"
  },
  {
    "text": "wanted to give people more abstract building blocks so they could focus more on building out application logic and",
    "start": "478879",
    "end": "484560"
  },
  {
    "text": "not just focusing on deploying on kubernetes so given that we kind of",
    "start": "484560",
    "end": "490879"
  },
  {
    "text": "wanted to go with this one operator approach how did we sort of arrive here so if you look at any sort of operator",
    "start": "490879",
    "end": "496440"
  },
  {
    "text": "out in the world today we have this notion this like shape where we have declared intent there are some safety",
    "start": "496440",
    "end": "502800"
  },
  {
    "text": "checks or business logic that's happening and then after that it's going to scale in scale out do some version",
    "start": "502800",
    "end": "508000"
  },
  {
    "text": "roll out and you'll end up with some pods some persistent volume claims and this is sort of the general shape and so",
    "start": "508000",
    "end": "513839"
  },
  {
    "text": "if I ask you guys hey how do you make this thing generic just take that little piece that",
    "start": "513839",
    "end": "520360"
  },
  {
    "text": "is different between the operators so the safety checks is different or the business logic is different and move it",
    "start": "520360",
    "end": "526440"
  },
  {
    "text": "out into its own separate microservice right and so now we have essentially one operator with one form of declared",
    "start": "526440",
    "end": "533480"
  },
  {
    "text": "intent which handles your scale in scale out version roll out all the node loss and disruption maintenance or the host",
    "start": "533480",
    "end": "539800"
  },
  {
    "text": "life cycle maintenance that we have to do and all you need to do is worry about the safety check portion here and then",
    "start": "539800",
    "end": "545399"
  },
  {
    "text": "we will handle the pods and persistent volume claims so if we compare it with the first picture instead of having",
    "start": "545399",
    "end": "552680"
  },
  {
    "text": "everyone getting their own operator instead we have teams just defining an entity called an LA stateful set it",
    "start": "552680",
    "end": "558480"
  },
  {
    "text": "comes to the stateful operator and then teams are only responsible for for writing something that we call an",
    "start": "558480",
    "end": "564040"
  },
  {
    "text": "application cluster manager and so that is sort of the business Logic the safety checks that would have gone in an",
    "start": "564040",
    "end": "570320"
  },
  {
    "text": "operator um but instead we're having them right just a microservice instead of the",
    "start": "570320",
    "end": "576040"
  },
  {
    "text": "operator um so what exactly is an application cluster manager or ACM um on",
    "start": "576040",
    "end": "583760"
  },
  {
    "text": "a very high level an ACM is an independent service that Al trates operations for a stateful application uh",
    "start": "583760",
    "end": "592200"
  },
  {
    "text": "it accepts operations from the stateful operator and make sure those operations",
    "start": "592200",
    "end": "597880"
  },
  {
    "text": "are carried out smoothly and safely so uh the state operator uh from diagram",
    "start": "597880",
    "end": "604800"
  },
  {
    "text": "you can see it can send four types of requests uh deployment disruption",
    "start": "604800",
    "end": "610720"
  },
  {
    "text": "scaling and uh swap deployment is just like rolling out a new version",
    "start": "610720",
    "end": "616440"
  },
  {
    "text": "disruption temporarily remov part uh while preserving their data um like",
    "start": "616440",
    "end": "623480"
  },
  {
    "text": "scaling just like add or remove Parts while swap moves a part from one note to",
    "start": "623480",
    "end": "628920"
  },
  {
    "text": "another so um basically after receiving some",
    "start": "628920",
    "end": "634040"
  },
  {
    "text": "operations from the stle operator the ACM uh perform something like a safety",
    "start": "634040",
    "end": "639440"
  },
  {
    "text": "check perform something like traffic shifting basically It prepares the target parts to make it ready for the",
    "start": "639440",
    "end": "646920"
  },
  {
    "text": "operation and then provide acknowledgements to the state for operator and following that the stateful",
    "start": "646920",
    "end": "653480"
  },
  {
    "text": "operator can do whatever needed um okay now uh let's look into uh",
    "start": "653480",
    "end": "661360"
  },
  {
    "text": "the the ACM to see uh what is actually there so uh generally speaking and ACM",
    "start": "661360",
    "end": "669000"
  },
  {
    "text": "has three main stages to implement uh the operation selection stage operation preparation stage and",
    "start": "669000",
    "end": "676639"
  },
  {
    "text": "the operation completion stage uh first like we have the operation selection",
    "start": "676639",
    "end": "682800"
  },
  {
    "text": "stage uh in this stage the ACM basically um decides which operation to run on",
    "start": "682800",
    "end": "690320"
  },
  {
    "text": "which parts uh based on multiple factors like operation priority operation type",
    "start": "690320",
    "end": "697279"
  },
  {
    "text": "start time duration and so on um and uh next is the operation preparation stage",
    "start": "697279",
    "end": "705839"
  },
  {
    "text": "uh this stage is pretty critical uh in ACM it performs important steps like",
    "start": "705839",
    "end": "712320"
  },
  {
    "text": "safety check traffic shifting and data movement and finally we have the",
    "start": "712320",
    "end": "718279"
  },
  {
    "text": "operation uh uh completion stage this is the stage where ACM wraps up operations",
    "start": "718279",
    "end": "724920"
  },
  {
    "text": "for example if we had shifted traffic away from apart in the preparation stage",
    "start": "724920",
    "end": "730519"
  },
  {
    "text": "this is when the ACM uh would uh bring traffic back so uh with all these",
    "start": "730519",
    "end": "738800"
  },
  {
    "text": "abstractions uh the the the purpose is to allow applications to focus on their",
    "start": "738800",
    "end": "745440"
  },
  {
    "text": "application specific Logics instead of worrying about like I need to interact",
    "start": "745440",
    "end": "750839"
  },
  {
    "text": "with the infrastructure as a service platform or interact with",
    "start": "750839",
    "end": "756040"
  },
  {
    "text": "corones okay um uh here I do want to share a a real world example of ACM uh",
    "start": "756040",
    "end": "764360"
  },
  {
    "text": "we call it Helix ACM at LinkedIn uh basically Helix it is a open source",
    "start": "764360",
    "end": "769720"
  },
  {
    "text": "project uh used by many of linkedin's State applications to manage their uh",
    "start": "769720",
    "end": "775880"
  },
  {
    "text": "clusters manage their instances and manage their resource a typical Helix based system uh contains",
    "start": "775880",
    "end": "783320"
  },
  {
    "text": "three main parts uh Helix has the coordinator zooke keeper as the metadata",
    "start": "783320",
    "end": "788920"
  },
  {
    "text": "store and the application cluster itself which can have multiple Parts which can",
    "start": "788920",
    "end": "795920"
  },
  {
    "text": "have multiple resources and also each resource is replicated so if you look at",
    "start": "795920",
    "end": "801680"
  },
  {
    "text": "the example the cluster has four parts four resources like in diff uh in",
    "start": "801680",
    "end": "808240"
  },
  {
    "text": "different colored rectangles and each resource has three replicas so uh we",
    "start": "808240",
    "end": "814360"
  },
  {
    "text": "will use the Helix ACM as an example uh to see how ACM Works in practice later",
    "start": "814360",
    "end": "820760"
  },
  {
    "text": "in this talk so from this is the operator that",
    "start": "820760",
    "end": "825839"
  },
  {
    "text": "we have at a bird's eye view so most applications at LinkedIn will only ever touch the LI State full set entity so",
    "start": "825839",
    "end": "833720"
  },
  {
    "text": "the high level flow is you touch An Li State full set and then we have a bunch of crds internally to help you manage to",
    "start": "833720",
    "end": "839759"
  },
  {
    "text": "help us manage the state so we'll essentially this is the highle architecture you can see we have Li",
    "start": "839759",
    "end": "845000"
  },
  {
    "text": "State full set and we have operations sitting in the middle that are going to the application cluster manager so in",
    "start": "845000",
    "end": "852120"
  },
  {
    "text": "practice the way this actually flows is that the user will declare their intent",
    "start": "852120",
    "end": "857480"
  },
  {
    "text": "so the intent actually looks a lot like a stateful set so An Li stateful set essentially is a mix of some native",
    "start": "857480",
    "end": "864360"
  },
  {
    "text": "kubernetes schemas and some LinkedIn specific Concepts so for instance we have probes Affinity um but we do have",
    "start": "864360",
    "end": "871000"
  },
  {
    "text": "some flavors on top of these things um and then we do have for instance you do see we do accept an ACM endpoint we do",
    "start": "871000",
    "end": "877360"
  },
  {
    "text": "have to know how to talk to your ACM and then we say we ask for your instance counts uh your your version uh container",
    "start": "877360",
    "end": "883880"
  },
  {
    "text": "version your config version and then from there we will then generate a revision so this is the step where we",
    "start": "883880",
    "end": "890880"
  },
  {
    "text": "actually take what the user has declared we'll take the mix of LinkedIn specific Concepts the some of the kubernetes",
    "start": "890880",
    "end": "897759"
  },
  {
    "text": "netive schemas that have been declared and we will transform it into a pod template essentially and so this is an",
    "start": "897759",
    "end": "903519"
  },
  {
    "text": "immutable payload that will eventually land in the in the cluster from this revision we then stage the revision and",
    "start": "903519",
    "end": "910320"
  },
  {
    "text": "so this is where we say Hey you have declared we want two instances of this pod running and so we're going to Stage",
    "start": "910320",
    "end": "916680"
  },
  {
    "text": "that and this is where we we stage it and then we use this to actually do diff generation so most of the the meat of",
    "start": "916680",
    "end": "925000"
  },
  {
    "text": "the operator is in this step where essentially we take what has been stated and we diff it against the stateful Pod",
    "start": "925000",
    "end": "933120"
  },
  {
    "text": "and the diff of that is essentially the the operation that we generate so in this case we have two pods declared we",
    "start": "933120",
    "end": "941079"
  },
  {
    "text": "check the world and we don't see any stateful pods being found and so we haven't found any pods so let's generate",
    "start": "941079",
    "end": "947000"
  },
  {
    "text": "an operation this is a scaleout and so this will be sent to the ACM for an acknowledgement ACM will acknowledge and",
    "start": "947000",
    "end": "953680"
  },
  {
    "text": "then once ACM acknowledges does its safety checks um we will then actually create what we call a stateful pod this",
    "start": "953680",
    "end": "960319"
  },
  {
    "text": "pod is sort of The Last Mile the stateful Pod essentially is last mile delivery where it's actually going to go create the persistent volume claims it",
    "start": "960319",
    "end": "967199"
  },
  {
    "text": "may massage the Pod template a little bit um and then it will essentially create the Pod at this point everything",
    "start": "967199",
    "end": "974160"
  },
  {
    "text": "is done so this is sort of the view from an operator the operator developer um",
    "start": "974160",
    "end": "979920"
  },
  {
    "text": "but from the perspective of an ACM they don't really see any of this so ACM sort of just deals with the operations right",
    "start": "979920",
    "end": "987000"
  },
  {
    "text": "operations have a very simple life cycle where they sit in pending and we will not do anything until we receive an",
    "start": "987000",
    "end": "993880"
  },
  {
    "text": "acknowledgement from the ACM so we can say hey I want to scale out and then ACM",
    "start": "993880",
    "end": "999920"
  },
  {
    "text": "goes down we will not do anything you can say I want to do do a deployment we will not actually do a deployment",
    "start": "999920",
    "end": "1005680"
  },
  {
    "text": "because if we do not receive an acknowledgement we don't know if it's safe to do it or not so at any given",
    "start": "1005680",
    "end": "1011040"
  },
  {
    "text": "point a single pod could be under the effect of multiple different um",
    "start": "1011040",
    "end": "1016240"
  },
  {
    "text": "operations at once so for example I could say I want to scale out an instance and then right after I'm going",
    "start": "1016240",
    "end": "1022519"
  },
  {
    "text": "to try and do a deployment and then right after that I'm going to try and take the note away for host life cycle maintenance so the operator doesn't",
    "start": "1022519",
    "end": "1030520"
  },
  {
    "text": "actually prescribe any order to these so to the perspective of the operator and ACM is actually a man- in the-middle",
    "start": "1030520",
    "end": "1036120"
  },
  {
    "text": "attacker so we can have In-N-Out hamburger ACM acknowledging things in",
    "start": "1036120",
    "end": "1041199"
  },
  {
    "text": "any order it wants they can say I want to deploy to a pod that doesn't exist we will gladly take it we can say hey I",
    "start": "1041199",
    "end": "1047438"
  },
  {
    "text": "want to scale down something doesn't doesn't exist we will gladly take it and so to us we we are always in the",
    "start": "1047439",
    "end": "1055000"
  },
  {
    "text": "business of reconciling and making sure that the LI stateful set does converge even if the ACM does crazy stuff we're",
    "start": "1055000",
    "end": "1061919"
  },
  {
    "text": "at LinkedIn so most of the acms are very well behaved but you know sometimes maybe there's a moment of inspiration on",
    "start": "1061919",
    "end": "1067080"
  },
  {
    "text": "the ACM side and we'll see some crazy stuff um so essentially from the perspective of an ACM you just declare",
    "start": "1067080",
    "end": "1073679"
  },
  {
    "text": "your intent and then you will receive one of these five operations with the metadata associated with the operation so what pods are being affected and then",
    "start": "1073679",
    "end": "1081000"
  },
  {
    "text": "you know we are always heartbeating the state of the operation so you will see where you sit in this life cycle so you",
    "start": "1081000",
    "end": "1086840"
  },
  {
    "text": "will know every 5 seconds is it acknowledged is the operation running is the Pod is the Pod actually running um",
    "start": "1086840",
    "end": "1093240"
  },
  {
    "text": "has the operation finished so this is a high level overview of the state machine that we're doing here for the",
    "start": "1093240",
    "end": "1100600"
  },
  {
    "text": "operations so one of the really big goals here was actually coordinating host life cycle maintenance because we",
    "start": "1100600",
    "end": "1106400"
  },
  {
    "text": "have such a large Fleet and a lot of nodes will go down we want to do OS upgrades and so we really wanted to make",
    "start": "1106400",
    "end": "1112559"
  },
  {
    "text": "it seamless to actually do um host life cycle maintenance on top of kubernetes",
    "start": "1112559",
    "end": "1117919"
  },
  {
    "text": "today so today at LinkedIn we do different types of Maintenance so we contend typically with most of the time",
    "start": "1117919",
    "end": "1125159"
  },
  {
    "text": "temporary node loss so if you're doing an OS upgrade firmware upgrade CUA upgrade or a top Ira switch upgrade this",
    "start": "1125159",
    "end": "1132159"
  },
  {
    "text": "is typically temporary node loss so node will go away for 30 minutes it should come back data will still be preserved",
    "start": "1132159",
    "end": "1139039"
  },
  {
    "text": "mount mount points will still be preserved and then we can just bring the Pod right back up onto that node in more",
    "start": "1139039",
    "end": "1146039"
  },
  {
    "text": "drastic cases either we're going to decommission a node or the node is we detect it's chronically unhealthy we",
    "start": "1146039",
    "end": "1151960"
  },
  {
    "text": "will actually uh attempt to swap your note out so we don't actually tell them",
    "start": "1151960",
    "end": "1157520"
  },
  {
    "text": "tell our applications we're taking this note away from you we always give them another note so that they can continue",
    "start": "1157520",
    "end": "1162760"
  },
  {
    "text": "um serving data uh serving their data very safely so we have we have a whole",
    "start": "1162760",
    "end": "1169080"
  },
  {
    "text": "maintenance stack at LinkedIn I'm not going to go too much into the specifics here but essentially deep in our",
    "start": "1169080",
    "end": "1174200"
  },
  {
    "text": "maintenance stack we have a maintenance orchestrator and a host Health um host Health remediation service so if there",
    "start": "1174200",
    "end": "1180919"
  },
  {
    "text": "is a plan maintenance o or a um host issue that we believe is very light and",
    "start": "1180919",
    "end": "1187039"
  },
  {
    "text": "can be remediated with a remage we essentially will initiate a what we call A disruption so A disruption essentially",
    "start": "1187039",
    "end": "1193280"
  },
  {
    "text": "is a request to actually evict a workload temporarily from kubernetes so",
    "start": "1193280",
    "end": "1199080"
  },
  {
    "text": "deep in the infrastructure layer we will initiate the disruption that is the source of Truth it is then proxied",
    "start": "1199080",
    "end": "1204520"
  },
  {
    "text": "essentially all the way up from our compute management later to the hub cluster and then all the way to the work cluster once we receive it in the",
    "start": "1204520",
    "end": "1211440"
  },
  {
    "text": "stateful operator at this point we will actually ask ACM for permission once we get permission we proxy it all the way",
    "start": "1211440",
    "end": "1217720"
  },
  {
    "text": "back up oh sorry we'll proxy it all the way back and then the reimage will",
    "start": "1217720",
    "end": "1223240"
  },
  {
    "text": "actually happen if it is a temporary node law situation we will actually get the node back um and bring the workl",
    "start": "1223240",
    "end": "1229960"
  },
  {
    "text": "back if it is a permanent node loss if it's a chronic health issue the node will just leave kubernetes it's going to",
    "start": "1229960",
    "end": "1236919"
  },
  {
    "text": "surgery um we will never see it again and we don't care um okay now let's look at some like",
    "start": "1236919",
    "end": "1245039"
  },
  {
    "text": "um examples to see how the maintenance works for both temporary no loss and",
    "start": "1245039",
    "end": "1250799"
  },
  {
    "text": "permanent no loss uh so for temporary no loss uh let's say we want to reimage a",
    "start": "1250799",
    "end": "1257280"
  },
  {
    "text": "note uh so so basically the first step is uh the infrastructure as a service platform since the reimage request to",
    "start": "1257280",
    "end": "1264400"
  },
  {
    "text": "the stateful operator the stateful operator then creates A disruption request with the target part and send",
    "start": "1264400",
    "end": "1271880"
  },
  {
    "text": "the operation to the ACM uh so those are the steps one and two in diagram so uh",
    "start": "1271880",
    "end": "1279480"
  },
  {
    "text": "just want to uh explain a little bit about like why A disruption is created it's because the node will be returned",
    "start": "1279480",
    "end": "1286880"
  },
  {
    "text": "back once the re image is done and the data is preserved across the r image",
    "start": "1286880",
    "end": "1292559"
  },
  {
    "text": "okay uh in the ACM after receiving the disruption operation oh can I go back",
    "start": "1292559",
    "end": "1298159"
  },
  {
    "text": "yeah I'm sorry uh uh from the ACM site uh after it receives the disruption",
    "start": "1298159",
    "end": "1304679"
  },
  {
    "text": "operation it will take some actions and eventually provide the acknowledgement",
    "start": "1304679",
    "end": "1310640"
  },
  {
    "text": "uh to the state for operator the St operator then can terminate the part the",
    "start": "1310640",
    "end": "1316000"
  },
  {
    "text": "target part and then approve the r image request to the infrastructure as a service platform so these are the step",
    "start": "1316000",
    "end": "1323039"
  },
  {
    "text": "three four and five in the diagram next yeah so uh let's look into ACM to see",
    "start": "1323039",
    "end": "1330320"
  },
  {
    "text": "what actually happens there so after receiving the disruption the first thing",
    "start": "1330320",
    "end": "1335720"
  },
  {
    "text": "that ACM does is safety check so basically the operation is safe only if",
    "start": "1335720",
    "end": "1341799"
  },
  {
    "text": "taking down the target po does not cause underreplicated partition uh under replicated resources so in the example",
    "start": "1341799",
    "end": "1349919"
  },
  {
    "text": "uh uh in the slide um part two cannot be taken down why because at this moment",
    "start": "1349919",
    "end": "1356480"
  },
  {
    "text": "resource two in the green rectangle it only has two replicas if we take part",
    "start": "1356480",
    "end": "1361679"
  },
  {
    "text": "two down that means we leave only one single replica of resource two which is not safe so uh so in this case the ACM",
    "start": "1361679",
    "end": "1370520"
  },
  {
    "text": "uh the safety check does not pass and DCM does not give acknowledgement to the",
    "start": "1370520",
    "end": "1375840"
  },
  {
    "text": "St for operator uh therefore the St operator keeps resending the disruption",
    "start": "1375840",
    "end": "1381640"
  },
  {
    "text": "operation to ACM next please let's see uh after some time uh the application cluster recovers",
    "start": "1381640",
    "end": "1390200"
  },
  {
    "text": "so now all resources have uh three replicas it is safe to bring down part",
    "start": "1390200",
    "end": "1395799"
  },
  {
    "text": "two so the safety check passes ACM will uh actually shifts traffic away from the",
    "start": "1395799",
    "end": "1403240"
  },
  {
    "text": "target part in this case part two uh if you see the diagram like all the",
    "start": "1403240",
    "end": "1409039"
  },
  {
    "text": "resources on the power two is grade Out means the traffic is shifted away but",
    "start": "1409039",
    "end": "1414559"
  },
  {
    "text": "data is still kept so this is the time that ACM gives uh gives acknowledgement",
    "start": "1414559",
    "end": "1421520"
  },
  {
    "text": "to the state operator so uh let's see after some time",
    "start": "1421520",
    "end": "1426679"
  },
  {
    "text": "uh the re image is done the infrastructure as a service platform",
    "start": "1426679",
    "end": "1431840"
  },
  {
    "text": "notifies the state for operator okay the re image is then the state for operator",
    "start": "1431840",
    "end": "1437159"
  },
  {
    "text": "then recreate pod on the exact same note and then notifies ACM finally ACM",
    "start": "1437159",
    "end": "1444559"
  },
  {
    "text": "re-enables uh the traffic back on not and the whole flow of the temporary no",
    "start": "1444559",
    "end": "1449679"
  },
  {
    "text": "loss is done uh yeah that is for the uh case of",
    "start": "1449679",
    "end": "1455480"
  },
  {
    "text": "temporary no loss uh so what about permanent no loss so uh let's say we",
    "start": "1455480",
    "end": "1462080"
  },
  {
    "text": "want to declamation of notes at this time first step is the pretty much the same the infrastructure uh as the",
    "start": "1462080",
    "end": "1469080"
  },
  {
    "text": "service platform send the declamation request to the stateful operator the",
    "start": "1469080",
    "end": "1474279"
  },
  {
    "text": "stateful operator creates a swap operation in this case it basically it wants to uh replace part one with part",
    "start": "1474279",
    "end": "1483080"
  },
  {
    "text": "five and send the swap operation to ACM so those are the step one and two in the",
    "start": "1483080",
    "end": "1489240"
  },
  {
    "text": "diagram so after receiving the swap operation ACM again it does something",
    "start": "1489240",
    "end": "1495480"
  },
  {
    "text": "magically uh but like unlike the temporary no loss case um ACM does not",
    "start": "1495480",
    "end": "1502880"
  },
  {
    "text": "acknowledge the whole swap operation in one goal instead it first acknowledge",
    "start": "1502880",
    "end": "1508240"
  },
  {
    "text": "the the addition of the new part uh after that the state for operator will start a part on a on the",
    "start": "1508240",
    "end": "1515840"
  },
  {
    "text": "replacement note on the replacement notes that is the step uh three and four",
    "start": "1515840",
    "end": "1521240"
  },
  {
    "text": "in the diagram once the new part is up and running ACM will again do something",
    "start": "1521240",
    "end": "1528720"
  },
  {
    "text": "itself and then provide acknowledgement of the removal of the",
    "start": "1528720",
    "end": "1533760"
  },
  {
    "text": "outpout following that the state operator can terminate the outp part and",
    "start": "1533760",
    "end": "1539480"
  },
  {
    "text": "provide approval to the infrastructure as a service platform okay now the",
    "start": "1539480",
    "end": "1544960"
  },
  {
    "text": "target node can be dication those are the step uh five six and seven I believe",
    "start": "1544960",
    "end": "1551240"
  },
  {
    "text": "in diagram um so let's take a look at like what uh",
    "start": "1551240",
    "end": "1558480"
  },
  {
    "text": "happens in ASM so as we just covered like basically the ASM first acknowledge",
    "start": "1558480",
    "end": "1565559"
  },
  {
    "text": "the addition of the new part so the new part is up and running at this moment uh",
    "start": "1565559",
    "end": "1571799"
  },
  {
    "text": "the new part has no data the the data is still on the old pod so then ACM",
    "start": "1571799",
    "end": "1577039"
  },
  {
    "text": "triggers data movement from the old pod to the new pod like in our example it is",
    "start": "1577039",
    "end": "1582440"
  },
  {
    "text": "from part one to part five okay um let's say after some time",
    "start": "1582440",
    "end": "1589399"
  },
  {
    "text": "the data movement is done the old part part one has no data it is the time that",
    "start": "1589399",
    "end": "1595640"
  },
  {
    "text": "the old part can be removed from the application cluster and ACM does that uh",
    "start": "1595640",
    "end": "1603120"
  },
  {
    "text": "it R unregisters the outpout from application class manager and this is",
    "start": "1603120",
    "end": "1608320"
  },
  {
    "text": "the time uh when the ACM can provide acknowledgement of the removal of the",
    "start": "1608320",
    "end": "1615760"
  },
  {
    "text": "outpout okay next yeah basically ACM removes the outp Pod from the",
    "start": "1615760",
    "end": "1621000"
  },
  {
    "text": "application cluster manager and acknowledges okay yeah I think that is",
    "start": "1621000",
    "end": "1627159"
  },
  {
    "text": "the whole point of uh both uh that is uh two examples of both temporary and",
    "start": "1627159",
    "end": "1633960"
  },
  {
    "text": "Perman no loss so uh as you can see from those examples it's clear that like with",
    "start": "1633960",
    "end": "1639480"
  },
  {
    "text": "the state for operator and ACM framework application teams they don't",
    "start": "1639480",
    "end": "1645159"
  },
  {
    "text": "they only need to focus on application speciic specific Logics like selecting",
    "start": "1645159",
    "end": "1651159"
  },
  {
    "text": "preparing and finalizing operations they don't need to worry about like how uh",
    "start": "1651159",
    "end": "1657559"
  },
  {
    "text": "the infrastructure as a service platform Works they don't need to be expert in kubernetes so I think that's one of the",
    "start": "1657559",
    "end": "1664640"
  },
  {
    "text": "whole points of the initiative so some of the lessons we",
    "start": "1664640",
    "end": "1670880"
  },
  {
    "text": "learned uh during this journey in the last year was that we were able to get pretty far on kubernetes I mean just",
    "start": "1670880",
    "end": "1677120"
  },
  {
    "text": "using Cube schedule CU alone was pretty incredible value having CSI driver and",
    "start": "1677120",
    "end": "1683120"
  },
  {
    "text": "being able to like provide new storage options for the operator in just a very",
    "start": "1683120",
    "end": "1688200"
  },
  {
    "text": "seamless interface which is persistent volume claim was incredibly powerful for us um in terms of operators um operators",
    "start": "1688200",
    "end": "1697039"
  },
  {
    "text": "are a ongoing challenge for us especially for our very very workflow",
    "start": "1697039",
    "end": "1703039"
  },
  {
    "text": "heavy operator modeling status as a workflow and the obser observability of",
    "start": "1703039",
    "end": "1708760"
  },
  {
    "text": "an operator is pretty challenging if I could go back in time I probably would have done this on a workflow engine like",
    "start": "1708760",
    "end": "1715279"
  },
  {
    "text": "temporal or airf flow um but I think you know we still have made it work on",
    "start": "1715279",
    "end": "1721200"
  },
  {
    "text": "operator in terms of actually creating a solution for everyone it's pretty hard",
    "start": "1721200",
    "end": "1726360"
  },
  {
    "text": "to give everyone a single entity that does everything they want today espresso says they want to do this one thing",
    "start": "1726360",
    "end": "1732760"
  },
  {
    "text": "tomorrow another team comes and says hey I want to be able to add this environment variable to this specific thing and as time goes on the scope of",
    "start": "1732760",
    "end": "1740919"
  },
  {
    "text": "An Li stateful set slowly starts to look more like a native pod template and so we want to avoid the scope creep and",
    "start": "1740919",
    "end": "1747720"
  },
  {
    "text": "make things fairly succinct um but we also want to be fairly flexible and the last point is that if you do decide to",
    "start": "1747720",
    "end": "1754200"
  },
  {
    "text": "undertake a journey like this um in general it's a good practice to minimize the number of acms in the wild the",
    "start": "1754200",
    "end": "1760640"
  },
  {
    "text": "protocol that we have is much more complex than what the talk alluded to um",
    "start": "1760640",
    "end": "1765840"
  },
  {
    "text": "there's a lot of stages and so just as a general principle the less moving Parts in your system the better",
    "start": "1765840",
    "end": "1772320"
  },
  {
    "text": "overall and of course this talk covered 1% of a lot of very very hard work that",
    "start": "1772320",
    "end": "1779360"
  },
  {
    "text": "has gone on um at LinkedIn um so for all the LinkedIn folks in the room thank you to all of you for everyone at home",
    "start": "1779360",
    "end": "1785399"
  },
  {
    "text": "wherever you are thank you um and at that point it is now just uh if there's",
    "start": "1785399",
    "end": "1790600"
  },
  {
    "text": "any questions um feel free to ask away [Applause]",
    "start": "1790600",
    "end": "1801519"
  },
  {
    "text": "hey thanks I'm Sean from Mar BNB that was awesome are do you have any plans to open source the operator if there is",
    "start": "1801519",
    "end": "1807320"
  },
  {
    "text": "interest in open sourcing this and if you guys feel like there's value we will definitely consider right now it's fairly fairly linked and heavy um so it",
    "start": "1807320",
    "end": "1815919"
  },
  {
    "text": "would need some love to make it",
    "start": "1815919",
    "end": "1820639"
  },
  {
    "text": "usable on the same uh same topic any maybe Improvement that you could",
    "start": "1825200",
    "end": "1830640"
  },
  {
    "text": "push back to the to Native stateful sets so one thing that we have discussed",
    "start": "1830640",
    "end": "1839120"
  },
  {
    "text": "and then it came up in the Nvidia talk yesterday is sort of making maintenance a first class citizen so if you look at",
    "start": "1839120",
    "end": "1845200"
  },
  {
    "text": "a lot of the talks today or even yesterday everyone's anyone running on Prem is doing some sort of disruption",
    "start": "1845200",
    "end": "1851240"
  },
  {
    "text": "some sort of Maintenance where they want to evict having this be a first class citizen in kubernetes May hold a lot of",
    "start": "1851240",
    "end": "1856799"
  },
  {
    "text": "value for workloads I don't know if building this into something like stateful set is maybe appropriate I",
    "start": "1856799",
    "end": "1863200"
  },
  {
    "text": "think operator is better for this kind of business logic heavy stuff I think stateful set is good for very simple",
    "start": "1863200",
    "end": "1870080"
  },
  {
    "text": "things um I mean it's uh it's questionable if this should be in",
    "start": "1870080",
    "end": "1875760"
  },
  {
    "text": "stateful set or not stateful set maybe could support something like maintenance um but if if it was going to be application aware it probably should be",
    "start": "1875760",
    "end": "1882279"
  },
  {
    "text": "something else um so it seems like kubernetes is",
    "start": "1882279",
    "end": "1887639"
  },
  {
    "text": "not giving a lot of um hooks where you can plug your uh controls into right",
    "start": "1887639",
    "end": "1892960"
  },
  {
    "text": "like you want to do certain things like talk to the acms before you create a pod",
    "start": "1892960",
    "end": "1898519"
  },
  {
    "text": "or before you delete a pod um would it be useful for kubernetes core to provide",
    "start": "1898519",
    "end": "1903720"
  },
  {
    "text": "I don't know like hooks for um external handlers to control the eviction process",
    "start": "1903720",
    "end": "1910960"
  },
  {
    "text": "yeah I think it could be useful if something lived in the schedular life",
    "start": "1910960",
    "end": "1916240"
  },
  {
    "text": "cycle as aular plug-in that is probably an appropriate hook so if we were to",
    "start": "1916240",
    "end": "1921320"
  },
  {
    "text": "make this native it could be something the scheduler essentially where you cooperate with the scheduler um it's a",
    "start": "1921320",
    "end": "1927600"
  },
  {
    "text": "little bit more seamless of an integration in one of the pre-filter stages um and uh or maybe not prefilter",
    "start": "1927600",
    "end": "1934480"
  },
  {
    "text": "deeper down the deeper down the line um but it could be probably well placed in the scheduler okay I think um that is if",
    "start": "1934480",
    "end": "1942320"
  },
  {
    "text": "there's any other questions you know please feel free come up and ask otherwise you know Shameless plug we are",
    "start": "1942320",
    "end": "1947880"
  },
  {
    "text": "iring of course um but yeah otherwise thank you all for attending [Applause]",
    "start": "1947880",
    "end": "1954330"
  }
]