[
  {
    "text": "greetings",
    "start": "1520",
    "end": "2560"
  },
  {
    "text": "i'm sean mccord an engineer at talos",
    "start": "2560",
    "end": "5279"
  },
  {
    "text": "systems and today we will be talking",
    "start": "5279",
    "end": "7919"
  },
  {
    "text": "about crossing the boundary",
    "start": "7919",
    "end": "10160"
  },
  {
    "text": "running hybrid kubernetes clusters with",
    "start": "10160",
    "end": "12719"
  },
  {
    "text": "wireguard",
    "start": "12719",
    "end": "14799"
  },
  {
    "text": "the whole idea behind kubernetes is to",
    "start": "14799",
    "end": "17359"
  },
  {
    "text": "abstract away the infrastructure and",
    "start": "17359",
    "end": "19600"
  },
  {
    "text": "focus on your applications",
    "start": "19600",
    "end": "21840"
  },
  {
    "text": "this works brilliantly for deployments",
    "start": "21840",
    "end": "23840"
  },
  {
    "text": "which comprise only a single physical",
    "start": "23840",
    "end": "26160"
  },
  {
    "text": "location",
    "start": "26160",
    "end": "27359"
  },
  {
    "text": "but when you want to span out to",
    "start": "27359",
    "end": "29199"
  },
  {
    "text": "multiple sites or multiple networks",
    "start": "29199",
    "end": "31439"
  },
  {
    "text": "suddenly everything falls apart",
    "start": "31439",
    "end": "34719"
  },
  {
    "text": "why should you have to care where your",
    "start": "34719",
    "end": "37120"
  },
  {
    "text": "infrastructure is when the",
    "start": "37120",
    "end": "39040"
  },
  {
    "text": "infrastructure itself is being",
    "start": "39040",
    "end": "41200"
  },
  {
    "text": "abstracted away",
    "start": "41200",
    "end": "43520"
  },
  {
    "text": "even cloud providers don't solve this",
    "start": "43520",
    "end": "46160"
  },
  {
    "text": "problem",
    "start": "46160",
    "end": "47600"
  },
  {
    "text": "why can't you span a kubernetes cluster",
    "start": "47600",
    "end": "50480"
  },
  {
    "text": "across regions",
    "start": "50480",
    "end": "52239"
  },
  {
    "text": "some cloud providers don't even let you",
    "start": "52239",
    "end": "54399"
  },
  {
    "text": "span across availability zones within",
    "start": "54399",
    "end": "57039"
  },
  {
    "text": "the same region",
    "start": "57039",
    "end": "59760"
  },
  {
    "text": "almost everyone wants a multi-location",
    "start": "59760",
    "end": "62879"
  },
  {
    "text": "deployment for some reason be it",
    "start": "62879",
    "end": "65840"
  },
  {
    "text": "disaster recovery or high availability",
    "start": "65840",
    "end": "70000"
  },
  {
    "text": "performance or localization",
    "start": "70000",
    "end": "72640"
  },
  {
    "text": "perhaps mixing on-demand high-cost",
    "start": "72640",
    "end": "75840"
  },
  {
    "text": "resources with fixed low-cost",
    "start": "75840",
    "end": "78720"
  },
  {
    "text": "infrastructure",
    "start": "78720",
    "end": "81280"
  },
  {
    "text": "physical you point of use point of",
    "start": "81280",
    "end": "83520"
  },
  {
    "text": "source requirements for instance cash",
    "start": "83520",
    "end": "86000"
  },
  {
    "text": "registers",
    "start": "86000",
    "end": "87439"
  },
  {
    "text": "data collection hardware physical",
    "start": "87439",
    "end": "89759"
  },
  {
    "text": "storage",
    "start": "89759",
    "end": "91680"
  },
  {
    "text": "or just simply to avoid vendor lock-in",
    "start": "91680",
    "end": "95680"
  },
  {
    "text": "some examples from our user user",
    "start": "95680",
    "end": "98840"
  },
  {
    "text": "base a voice systems provider with high",
    "start": "98840",
    "end": "102320"
  },
  {
    "text": "volumes and low margins",
    "start": "102320",
    "end": "104720"
  },
  {
    "text": "needs to get the greatest value for his",
    "start": "104720",
    "end": "106720"
  },
  {
    "text": "core workloads",
    "start": "106720",
    "end": "108240"
  },
  {
    "text": "which mandates a bare metal",
    "start": "108240",
    "end": "109840"
  },
  {
    "text": "infrastructure",
    "start": "109840",
    "end": "111280"
  },
  {
    "text": "however they also need to be able to",
    "start": "111280",
    "end": "113840"
  },
  {
    "text": "scale quickly out to the cloud when",
    "start": "113840",
    "end": "116479"
  },
  {
    "text": "there is a sudden rush such as during",
    "start": "116479",
    "end": "119200"
  },
  {
    "text": "emergencies or popular events",
    "start": "119200",
    "end": "123040"
  },
  {
    "text": "a large retailer needs a needs to manage",
    "start": "123040",
    "end": "126240"
  },
  {
    "text": "local compute resources for",
    "start": "126240",
    "end": "128000"
  },
  {
    "text": "point-of-sale equipment but their core",
    "start": "128000",
    "end": "130800"
  },
  {
    "text": "applications and database run in the",
    "start": "130800",
    "end": "133040"
  },
  {
    "text": "cloud",
    "start": "133040",
    "end": "134720"
  },
  {
    "text": "they want to have management free",
    "start": "134720",
    "end": "136720"
  },
  {
    "text": "resources in the store controlled",
    "start": "136720",
    "end": "139440"
  },
  {
    "text": "entirely by kubernetes in the cloud",
    "start": "139440",
    "end": "143840"
  },
  {
    "text": "a large public transportation company",
    "start": "144080",
    "end": "146720"
  },
  {
    "text": "has a number of mandates which require",
    "start": "146720",
    "end": "148959"
  },
  {
    "text": "them to use specific compute resources",
    "start": "148959",
    "end": "152480"
  },
  {
    "text": "store writer data in specific",
    "start": "152480",
    "end": "155840"
  },
  {
    "text": "specific places",
    "start": "155840",
    "end": "157680"
  },
  {
    "text": "and have a large number of point of use",
    "start": "157680",
    "end": "160080"
  },
  {
    "text": "display systems which all need to be",
    "start": "160080",
    "end": "162879"
  },
  {
    "text": "tied together",
    "start": "162879",
    "end": "165040"
  },
  {
    "text": "everything is built on kubernetes but",
    "start": "165040",
    "end": "167440"
  },
  {
    "text": "they don't want to have to manage",
    "start": "167440",
    "end": "170160"
  },
  {
    "text": "multiple hundreds of clusters",
    "start": "170160",
    "end": "173200"
  },
  {
    "text": "when each site only has a very few nodes",
    "start": "173200",
    "end": "178239"
  },
  {
    "text": "so while there is a lot of demand for",
    "start": "178239",
    "end": "180560"
  },
  {
    "text": "this freedom",
    "start": "180560",
    "end": "181760"
  },
  {
    "text": "the problem is that current off the",
    "start": "181760",
    "end": "183920"
  },
  {
    "text": "shelf solution set is",
    "start": "183920",
    "end": "187519"
  },
  {
    "text": "now this isn't to say that it can't be",
    "start": "189599",
    "end": "191599"
  },
  {
    "text": "done",
    "start": "191599",
    "end": "192879"
  },
  {
    "text": "ultimately",
    "start": "192879",
    "end": "194080"
  },
  {
    "text": "the requirement for most cni plugins is",
    "start": "194080",
    "end": "196959"
  },
  {
    "text": "that each node needs free and direct",
    "start": "196959",
    "end": "199599"
  },
  {
    "text": "communication to each other node",
    "start": "199599",
    "end": "202080"
  },
  {
    "text": "this can be achieved in a number of ways",
    "start": "202080",
    "end": "205360"
  },
  {
    "text": "full native ipv6 though good luck with",
    "start": "205360",
    "end": "208879"
  },
  {
    "text": "the universality of this option",
    "start": "208879",
    "end": "211120"
  },
  {
    "text": "particularly in cloud environments",
    "start": "211120",
    "end": "213760"
  },
  {
    "text": "and make sure your firewall works",
    "start": "213760",
    "end": "217280"
  },
  {
    "text": "all nodes with direct public ipv6",
    "start": "217280",
    "end": "220080"
  },
  {
    "text": "addresses",
    "start": "220080",
    "end": "221200"
  },
  {
    "text": "just in case you have an unnatural",
    "start": "221200",
    "end": "223120"
  },
  {
    "text": "number of free public ipv4 addresses",
    "start": "223120",
    "end": "227760"
  },
  {
    "text": "vpn solutions",
    "start": "227760",
    "end": "230239"
  },
  {
    "text": "these are frequently difficult or",
    "start": "230239",
    "end": "232080"
  },
  {
    "text": "expensive in the cloud",
    "start": "232080",
    "end": "234319"
  },
  {
    "text": "and they may require extra tooling or",
    "start": "234319",
    "end": "237200"
  },
  {
    "text": "maybe even extra hardware",
    "start": "237200",
    "end": "239599"
  },
  {
    "text": "mostly these require some amount of",
    "start": "239599",
    "end": "242480"
  },
  {
    "text": "external coordination",
    "start": "242480",
    "end": "244319"
  },
  {
    "text": "which is difficult or expensive to",
    "start": "244319",
    "end": "246480"
  },
  {
    "text": "achieve universally in many environments",
    "start": "246480",
    "end": "250640"
  },
  {
    "text": "ideally",
    "start": "250640",
    "end": "251920"
  },
  {
    "text": "each node should be able to securely and",
    "start": "251920",
    "end": "254400"
  },
  {
    "text": "directly communicate with each other",
    "start": "254400",
    "end": "256479"
  },
  {
    "text": "node regardless of where it is",
    "start": "256479",
    "end": "259359"
  },
  {
    "text": "regardless of what network it's on and",
    "start": "259359",
    "end": "262320"
  },
  {
    "text": "regardless of the external features",
    "start": "262320",
    "end": "264320"
  },
  {
    "text": "available to its location",
    "start": "264320",
    "end": "267280"
  },
  {
    "text": "this sounds like a job",
    "start": "267280",
    "end": "269600"
  },
  {
    "text": "for wireguard",
    "start": "269600",
    "end": "271680"
  },
  {
    "text": "like ipsec before it",
    "start": "271680",
    "end": "273840"
  },
  {
    "text": "wireguard seeks to provide secure",
    "start": "273840",
    "end": "276080"
  },
  {
    "text": "transport between two endpoints",
    "start": "276080",
    "end": "279040"
  },
  {
    "text": "unlike ipsec it does this with much more",
    "start": "279040",
    "end": "282479"
  },
  {
    "text": "standard tooling is vastly easier to use",
    "start": "282479",
    "end": "286400"
  },
  {
    "text": "and is even higher performance while",
    "start": "286400",
    "end": "288639"
  },
  {
    "text": "offering better security and more modern",
    "start": "288639",
    "end": "291600"
  },
  {
    "text": "encryption algorithms",
    "start": "291600",
    "end": "294720"
  },
  {
    "text": "equally importantly",
    "start": "294720",
    "end": "296400"
  },
  {
    "text": "wireguard is an efficient protocol for",
    "start": "296400",
    "end": "299280"
  },
  {
    "text": "full mesh systems",
    "start": "299280",
    "end": "301039"
  },
  {
    "text": "while traditional vpns scale poorly to",
    "start": "301039",
    "end": "304080"
  },
  {
    "text": "full mesh deployments due to their",
    "start": "304080",
    "end": "306080"
  },
  {
    "text": "overhead both administrative and",
    "start": "306080",
    "end": "308840"
  },
  {
    "text": "operational wireguard uses a very simple",
    "start": "308840",
    "end": "312240"
  },
  {
    "text": "and efficient mechanism for managing a",
    "start": "312240",
    "end": "314720"
  },
  {
    "text": "large number of direct peers",
    "start": "314720",
    "end": "318320"
  },
  {
    "text": "so if wireguard is so great why isn't",
    "start": "318320",
    "end": "321199"
  },
  {
    "text": "everyone using it already",
    "start": "321199",
    "end": "323600"
  },
  {
    "text": "the main difficulty with wireguard",
    "start": "323600",
    "end": "326240"
  },
  {
    "text": "is with key distribution",
    "start": "326240",
    "end": "328400"
  },
  {
    "text": "and pure discovery",
    "start": "328400",
    "end": "331280"
  },
  {
    "text": "with a highly dynamic system like",
    "start": "331280",
    "end": "333280"
  },
  {
    "text": "kubernetes where nodes should be treated",
    "start": "333280",
    "end": "335680"
  },
  {
    "text": "as cattle and not as pets",
    "start": "335680",
    "end": "338400"
  },
  {
    "text": "individually collecting and maintaining",
    "start": "338400",
    "end": "340720"
  },
  {
    "text": "and coordinating",
    "start": "340720",
    "end": "342400"
  },
  {
    "text": "communication between them is cumbersome",
    "start": "342400",
    "end": "346000"
  },
  {
    "text": "there are offerings such as tail scale",
    "start": "346000",
    "end": "348800"
  },
  {
    "text": "which make this easy for desktop and",
    "start": "348800",
    "end": "351039"
  },
  {
    "text": "mobile devices",
    "start": "351039",
    "end": "352800"
  },
  {
    "text": "but the market for this on the server",
    "start": "352800",
    "end": "354479"
  },
  {
    "text": "side is as yet",
    "start": "354479",
    "end": "356160"
  },
  {
    "text": "fairly small",
    "start": "356160",
    "end": "358720"
  },
  {
    "text": "there are a number of new wireguard",
    "start": "358720",
    "end": "361039"
  },
  {
    "text": "native cni's popping up but none is",
    "start": "361039",
    "end": "364479"
  },
  {
    "text": "quite ready for general use and mostly",
    "start": "364479",
    "end": "367600"
  },
  {
    "text": "they rely on externally",
    "start": "367600",
    "end": "369759"
  },
  {
    "text": "usually manually driven systems for",
    "start": "369759",
    "end": "373120"
  },
  {
    "text": "coordination",
    "start": "373120",
    "end": "375840"
  },
  {
    "text": "talos systems is building talos the",
    "start": "376560",
    "end": "379680"
  },
  {
    "text": "kubernetes os",
    "start": "379680",
    "end": "381360"
  },
  {
    "text": "as well as a great deal of tooling to",
    "start": "381360",
    "end": "383360"
  },
  {
    "text": "automate and manage large and disparate",
    "start": "383360",
    "end": "386000"
  },
  {
    "text": "sets of compute resources on bare metal",
    "start": "386000",
    "end": "389520"
  },
  {
    "text": "on premise",
    "start": "389520",
    "end": "391199"
  },
  {
    "text": "and in the cloud",
    "start": "391199",
    "end": "393680"
  },
  {
    "text": "our core product is an extremely",
    "start": "393680",
    "end": "396000"
  },
  {
    "text": "lightweight",
    "start": "396000",
    "end": "397120"
  },
  {
    "text": "read-only image-based linux operating",
    "start": "397120",
    "end": "399919"
  },
  {
    "text": "system highly optimized to running",
    "start": "399919",
    "end": "402560"
  },
  {
    "text": "kubernetes",
    "start": "402560",
    "end": "404080"
  },
  {
    "text": "it has no shell no ssh and its operation",
    "start": "404080",
    "end": "407600"
  },
  {
    "text": "is entirely defined",
    "start": "407600",
    "end": "409680"
  },
  {
    "text": "by a static manifest",
    "start": "409680",
    "end": "411840"
  },
  {
    "text": "and solely managed by api",
    "start": "411840",
    "end": "415680"
  },
  {
    "text": "if you are wanting to manage your own",
    "start": "415680",
    "end": "417919"
  },
  {
    "text": "kubernetes clusters you want to be",
    "start": "417919",
    "end": "420560"
  },
  {
    "text": "running those clusters on talos",
    "start": "420560",
    "end": "424479"
  },
  {
    "text": "we hear constantly about the need for",
    "start": "424479",
    "end": "426720"
  },
  {
    "text": "hybrid and distributed kubernetes",
    "start": "426720",
    "end": "428960"
  },
  {
    "text": "deployments and we have been developing",
    "start": "428960",
    "end": "431360"
  },
  {
    "text": "a solution to this coordination and key",
    "start": "431360",
    "end": "434080"
  },
  {
    "text": "exchange problem as of the upcoming",
    "start": "434080",
    "end": "437039"
  },
  {
    "text": "release version 0.12",
    "start": "437039",
    "end": "439360"
  },
  {
    "text": "we include support for automatic node",
    "start": "439360",
    "end": "442479"
  },
  {
    "text": "automatic full mesh",
    "start": "442479",
    "end": "444720"
  },
  {
    "text": "wire guard deployments requiring no",
    "start": "444720",
    "end": "447440"
  },
  {
    "text": "additional external tooling or",
    "start": "447440",
    "end": "449120"
  },
  {
    "text": "configuration",
    "start": "449120",
    "end": "450960"
  },
  {
    "text": "users need only set a single",
    "start": "450960",
    "end": "453039"
  },
  {
    "text": "configuration flag and all communication",
    "start": "453039",
    "end": "455840"
  },
  {
    "text": "between their nodes will be",
    "start": "455840",
    "end": "457759"
  },
  {
    "text": "transparently automatically encrypted",
    "start": "457759",
    "end": "460960"
  },
  {
    "text": "and transported over wireguard",
    "start": "460960",
    "end": "464560"
  },
  {
    "text": "we call this system kubespan",
    "start": "464560",
    "end": "468639"
  },
  {
    "text": "the method we have developed is also",
    "start": "469280",
    "end": "471440"
  },
  {
    "text": "entirely",
    "start": "471440",
    "end": "473120"
  },
  {
    "text": "impact free",
    "start": "473120",
    "end": "474960"
  },
  {
    "text": "we do not manipulate",
    "start": "474960",
    "end": "477120"
  },
  {
    "text": "tables we do not manipulate main routes",
    "start": "477120",
    "end": "480800"
  },
  {
    "text": "we don't interfere with kubernetes view",
    "start": "480800",
    "end": "483199"
  },
  {
    "text": "of the node ip address in any way",
    "start": "483199",
    "end": "486080"
  },
  {
    "text": "we simply interact with the kernel's net",
    "start": "486080",
    "end": "488240"
  },
  {
    "text": "filter and core routing systems",
    "start": "488240",
    "end": "490879"
  },
  {
    "text": "to redirect traffic",
    "start": "490879",
    "end": "492960"
  },
  {
    "text": "to nodes and pods through the wireguard",
    "start": "492960",
    "end": "496240"
  },
  {
    "text": "interface",
    "start": "496240",
    "end": "498800"
  },
  {
    "text": "as with all communication and code we",
    "start": "498800",
    "end": "501199"
  },
  {
    "text": "write",
    "start": "501199",
    "end": "502400"
  },
  {
    "text": "the entirety of this system is open",
    "start": "502400",
    "end": "504960"
  },
  {
    "text": "source and it comes with the permissive",
    "start": "504960",
    "end": "507520"
  },
  {
    "text": "mozilla public license",
    "start": "507520",
    "end": "510800"
  },
  {
    "text": "the key pieces of information needed for",
    "start": "511039",
    "end": "513360"
  },
  {
    "text": "wireguard generally are",
    "start": "513360",
    "end": "515279"
  },
  {
    "text": "the public key of the host you wish to",
    "start": "515279",
    "end": "516959"
  },
  {
    "text": "connect to",
    "start": "516959",
    "end": "518640"
  },
  {
    "text": "and the ip address and port or the",
    "start": "518640",
    "end": "521360"
  },
  {
    "text": "endpoint of the host",
    "start": "521360",
    "end": "524080"
  },
  {
    "text": "the latter is really only required of",
    "start": "524080",
    "end": "526560"
  },
  {
    "text": "one side of the pair",
    "start": "526560",
    "end": "529200"
  },
  {
    "text": "once traffic is received that",
    "start": "529200",
    "end": "531040"
  },
  {
    "text": "information is known and updated by",
    "start": "531040",
    "end": "533200"
  },
  {
    "text": "wireguard automatically and internally",
    "start": "533200",
    "end": "536959"
  },
  {
    "text": "for kubernetes though this is not quite",
    "start": "536959",
    "end": "539200"
  },
  {
    "text": "sufficient",
    "start": "539200",
    "end": "540880"
  },
  {
    "text": "kubernetes also needs to know which",
    "start": "540880",
    "end": "543600"
  },
  {
    "text": "traffic goes to the wire guard piers",
    "start": "543600",
    "end": "547600"
  },
  {
    "text": "because this information may be dynamic",
    "start": "547600",
    "end": "550720"
  },
  {
    "text": "we need a way to be able to constantly",
    "start": "550720",
    "end": "553120"
  },
  {
    "text": "update and keep in sync this information",
    "start": "553120",
    "end": "556640"
  },
  {
    "text": "through all the nodes",
    "start": "556640",
    "end": "558959"
  },
  {
    "text": "if we have a functional connection to",
    "start": "558959",
    "end": "560959"
  },
  {
    "text": "kubernetes otherwise this is fairly easy",
    "start": "560959",
    "end": "564080"
  },
  {
    "text": "we can just keep that cube at that",
    "start": "564080",
    "end": "565920"
  },
  {
    "text": "information in kubernetes",
    "start": "565920",
    "end": "568800"
  },
  {
    "text": "otherwise though we have to have some",
    "start": "568800",
    "end": "571040"
  },
  {
    "text": "way of discovering it",
    "start": "571040",
    "end": "573200"
  },
  {
    "text": "in our solution",
    "start": "573200",
    "end": "574880"
  },
  {
    "text": "we use a multi-tiered approach to",
    "start": "574880",
    "end": "577920"
  },
  {
    "text": "gathering this information",
    "start": "577920",
    "end": "579839"
  },
  {
    "text": "each tier can operate independently",
    "start": "579839",
    "end": "583200"
  },
  {
    "text": "but the amalgamation of the peers of the",
    "start": "583200",
    "end": "585920"
  },
  {
    "text": "tiers produces a more robust set of",
    "start": "585920",
    "end": "589120"
  },
  {
    "text": "connection criteria",
    "start": "589120",
    "end": "591200"
  },
  {
    "text": "for this discussion we'll point out two",
    "start": "591200",
    "end": "593680"
  },
  {
    "text": "of these tiers",
    "start": "593680",
    "end": "595040"
  },
  {
    "text": "an external service",
    "start": "595040",
    "end": "597360"
  },
  {
    "text": "and a kubernetes based system",
    "start": "597360",
    "end": "601040"
  },
  {
    "text": "the external service we maintain",
    "start": "601040",
    "end": "603760"
  },
  {
    "text": "a public discovery service by which",
    "start": "603760",
    "end": "607040"
  },
  {
    "text": "members of your cluster can use a common",
    "start": "607040",
    "end": "610480"
  },
  {
    "text": "and unique key",
    "start": "610480",
    "end": "612240"
  },
  {
    "text": "to coordinate the most basic connection",
    "start": "612240",
    "end": "614720"
  },
  {
    "text": "information to get the wireguard link up",
    "start": "614720",
    "end": "618000"
  },
  {
    "text": "the public key and the set of possible",
    "start": "618000",
    "end": "620320"
  },
  {
    "text": "endpoints",
    "start": "620320",
    "end": "621839"
  },
  {
    "text": "while we offer this as a public service",
    "start": "621839",
    "end": "624959"
  },
  {
    "text": "the same code is open source and may be",
    "start": "624959",
    "end": "628320"
  },
  {
    "text": "run on your own internal equipment",
    "start": "628320",
    "end": "631760"
  },
  {
    "text": "we offer a simple configuration",
    "start": "631760",
    "end": "633600"
  },
  {
    "text": "mechanism by which you can select a",
    "start": "633600",
    "end": "636000"
  },
  {
    "text": "non-default discovery service",
    "start": "636000",
    "end": "639920"
  },
  {
    "text": "the kubernetes system utilizes",
    "start": "639920",
    "end": "642560"
  },
  {
    "text": "annotations on kubernetes nodes which",
    "start": "642560",
    "end": "646000"
  },
  {
    "text": "describe each node's public key and",
    "start": "646000",
    "end": "648480"
  },
  {
    "text": "local addresses",
    "start": "648480",
    "end": "650320"
  },
  {
    "text": "on top of this we also route pod subnets",
    "start": "650320",
    "end": "654399"
  },
  {
    "text": "this is often maybe even usually taken",
    "start": "654399",
    "end": "657360"
  },
  {
    "text": "care of by the cni but there are many",
    "start": "657360",
    "end": "659680"
  },
  {
    "text": "situations where the cni fails to be",
    "start": "659680",
    "end": "662000"
  },
  {
    "text": "able to do this itself especially when",
    "start": "662000",
    "end": "665040"
  },
  {
    "text": "this is done across networks",
    "start": "665040",
    "end": "667600"
  },
  {
    "text": "so we also scrape the kubernetes node",
    "start": "667600",
    "end": "670800"
  },
  {
    "text": "resource to discover its podcidrs",
    "start": "670800",
    "end": "675480"
  },
  {
    "text": "one of the difficulties in communicating",
    "start": "676800",
    "end": "679120"
  },
  {
    "text": "across networks is that there is often",
    "start": "679120",
    "end": "681839"
  },
  {
    "text": "not a single address and port which can",
    "start": "681839",
    "end": "684480"
  },
  {
    "text": "identify a connection for each node on",
    "start": "684480",
    "end": "686959"
  },
  {
    "text": "the system for instance",
    "start": "686959",
    "end": "689600"
  },
  {
    "text": "a node sitting in the same network might",
    "start": "689600",
    "end": "691920"
  },
  {
    "text": "see its peer as 192 168 2.10",
    "start": "691920",
    "end": "697600"
  },
  {
    "text": "but a node across the internet may see",
    "start": "697600",
    "end": "699920"
  },
  {
    "text": "the same node as",
    "start": "699920",
    "end": "701760"
  },
  {
    "text": "2001 db8 1ef1 10.",
    "start": "701760",
    "end": "706959"
  },
  {
    "text": "we need a way to be able to handle any",
    "start": "706959",
    "end": "709279"
  },
  {
    "text": "number of addresses and ports",
    "start": "709279",
    "end": "711760"
  },
  {
    "text": "and also have a mechanism to try each of",
    "start": "711760",
    "end": "715200"
  },
  {
    "text": "them wireguard only allows us to select",
    "start": "715200",
    "end": "718320"
  },
  {
    "text": "one at a time",
    "start": "718320",
    "end": "719760"
  },
  {
    "text": "for our implementation then",
    "start": "719760",
    "end": "721839"
  },
  {
    "text": "we have built a controller which",
    "start": "721839",
    "end": "723440"
  },
  {
    "text": "continuously discovers and rotates these",
    "start": "723440",
    "end": "726959"
  },
  {
    "text": "ip port pairs until a connection is",
    "start": "726959",
    "end": "729600"
  },
  {
    "text": "established",
    "start": "729600",
    "end": "731040"
  },
  {
    "text": "it then starts trying again if that",
    "start": "731040",
    "end": "733519"
  },
  {
    "text": "connection is ever lost",
    "start": "733519",
    "end": "736800"
  },
  {
    "text": "after we have established a wireguard",
    "start": "738160",
    "end": "740800"
  },
  {
    "text": "connection",
    "start": "740800",
    "end": "742000"
  },
  {
    "text": "our work is not yet done we still have",
    "start": "742000",
    "end": "744880"
  },
  {
    "text": "to make sure that the right packets get",
    "start": "744880",
    "end": "747200"
  },
  {
    "text": "sent to the wireguard interface",
    "start": "747200",
    "end": "750560"
  },
  {
    "text": "wireguard supplies a convenient facility",
    "start": "750560",
    "end": "752880"
  },
  {
    "text": "for tagging packets which come from it",
    "start": "752880",
    "end": "756160"
  },
  {
    "text": "which is great but in our case we need",
    "start": "756160",
    "end": "759600"
  },
  {
    "text": "to also be able to allow traffic which",
    "start": "759600",
    "end": "762720"
  },
  {
    "text": "both does not come from wireguard and is",
    "start": "762720",
    "end": "765600"
  },
  {
    "text": "also not destiny destined for another",
    "start": "765600",
    "end": "768720"
  },
  {
    "text": "kubernetes node",
    "start": "768720",
    "end": "770399"
  },
  {
    "text": "to flow through the normal traffic",
    "start": "770399",
    "end": "772480"
  },
  {
    "text": "mechanisms",
    "start": "772480",
    "end": "774000"
  },
  {
    "text": "unlike corporate or policy a privacy",
    "start": "774000",
    "end": "776959"
  },
  {
    "text": "oriented vpns",
    "start": "776959",
    "end": "778959"
  },
  {
    "text": "we need to allow general internet",
    "start": "778959",
    "end": "781200"
  },
  {
    "text": "traffic to flow normally",
    "start": "781200",
    "end": "784000"
  },
  {
    "text": "also",
    "start": "784000",
    "end": "784959"
  },
  {
    "text": "as our cluster grows",
    "start": "784959",
    "end": "787040"
  },
  {
    "text": "this set of ip addresses can become",
    "start": "787040",
    "end": "789040"
  },
  {
    "text": "quite large and quite dynamic",
    "start": "789040",
    "end": "791600"
  },
  {
    "text": "this would be very cumbersome and slow",
    "start": "791600",
    "end": "793839"
  },
  {
    "text": "to maintain in ip tables luckily the",
    "start": "793839",
    "end": "797360"
  },
  {
    "text": "kernel supplies a convenient mechanism",
    "start": "797360",
    "end": "799920"
  },
  {
    "text": "by which to define this arbitrarily",
    "start": "799920",
    "end": "802399"
  },
  {
    "text": "large set of ip addresses",
    "start": "802399",
    "end": "804880"
  },
  {
    "text": "ipsets",
    "start": "804880",
    "end": "807680"
  },
  {
    "text": "talos collects all of these ips and",
    "start": "807760",
    "end": "809839"
  },
  {
    "text": "subnets",
    "start": "809839",
    "end": "810959"
  },
  {
    "text": "which are considered in cluster",
    "start": "810959",
    "end": "813680"
  },
  {
    "text": "and maintains these in the kernel as an",
    "start": "813680",
    "end": "816800"
  },
  {
    "text": "ip set",
    "start": "816800",
    "end": "819199"
  },
  {
    "text": "so now that we have an ip set defined we",
    "start": "819199",
    "end": "821600"
  },
  {
    "text": "need to tell the kernel how to use it",
    "start": "821600",
    "end": "824480"
  },
  {
    "text": "the traditional way of doing this would",
    "start": "824480",
    "end": "826240"
  },
  {
    "text": "be to use iptables however there's a big",
    "start": "826240",
    "end": "829279"
  },
  {
    "text": "problem with iptables",
    "start": "829279",
    "end": "831279"
  },
  {
    "text": "it is a common namespace in which any",
    "start": "831279",
    "end": "833680"
  },
  {
    "text": "number of other pieces of software may",
    "start": "833680",
    "end": "836480"
  },
  {
    "text": "dump things",
    "start": "836480",
    "end": "837920"
  },
  {
    "text": "we have no surety that what we add in",
    "start": "837920",
    "end": "840800"
  },
  {
    "text": "there will not be wiped out by something",
    "start": "840800",
    "end": "842959"
  },
  {
    "text": "else be it from kubernetes itself",
    "start": "842959",
    "end": "845760"
  },
  {
    "text": "to the cni to some workload application",
    "start": "845760",
    "end": "849760"
  },
  {
    "text": "be rendered unusable by higher priority",
    "start": "849760",
    "end": "852800"
  },
  {
    "text": "rules",
    "start": "852800",
    "end": "853920"
  },
  {
    "text": "or just generally cause trouble and",
    "start": "853920",
    "end": "856240"
  },
  {
    "text": "conflicts",
    "start": "856240",
    "end": "857760"
  },
  {
    "text": "so instead we use a three-pronged system",
    "start": "857760",
    "end": "861040"
  },
  {
    "text": "which is both more foundational and less",
    "start": "861040",
    "end": "863760"
  },
  {
    "text": "centralized",
    "start": "863760",
    "end": "865360"
  },
  {
    "text": "nf tables offers a separately namespaced",
    "start": "865360",
    "end": "868720"
  },
  {
    "text": "decentralized way of marking packets for",
    "start": "868720",
    "end": "871440"
  },
  {
    "text": "later processing based on ip sets",
    "start": "871440",
    "end": "875040"
  },
  {
    "text": "instead of a common set of well-known",
    "start": "875040",
    "end": "877519"
  },
  {
    "text": "tables",
    "start": "877519",
    "end": "878880"
  },
  {
    "text": "nf tables uses hooks into the kernel's",
    "start": "878880",
    "end": "881760"
  },
  {
    "text": "net filter system which are less",
    "start": "881760",
    "end": "883920"
  },
  {
    "text": "vulnerable to being usurped bypassed",
    "start": "883920",
    "end": "887360"
  },
  {
    "text": "or a source of interference than",
    "start": "887360",
    "end": "889760"
  },
  {
    "text": "iptables",
    "start": "889760",
    "end": "891839"
  },
  {
    "text": "but",
    "start": "891839",
    "end": "892639"
  },
  {
    "text": "they're rendered down by the kernel to",
    "start": "892639",
    "end": "895120"
  },
  {
    "text": "the same underlying x table system",
    "start": "895120",
    "end": "898959"
  },
  {
    "text": "our nf table system is where we store",
    "start": "898959",
    "end": "901519"
  },
  {
    "text": "the ip sets",
    "start": "901519",
    "end": "903760"
  },
  {
    "text": "any packet which enters the system",
    "start": "903760",
    "end": "906000"
  },
  {
    "text": "either by forward from inside kubernetes",
    "start": "906000",
    "end": "909040"
  },
  {
    "text": "or by generation from the host itself",
    "start": "909040",
    "end": "912639"
  },
  {
    "text": "is compared against a hash table of this",
    "start": "912639",
    "end": "915519"
  },
  {
    "text": "ip set",
    "start": "915519",
    "end": "917120"
  },
  {
    "text": "if it matches",
    "start": "917120",
    "end": "918480"
  },
  {
    "text": "it is marked for later processing by our",
    "start": "918480",
    "end": "920880"
  },
  {
    "text": "next stage",
    "start": "920880",
    "end": "923040"
  },
  {
    "text": "this is a high performance system which",
    "start": "923040",
    "end": "926000"
  },
  {
    "text": "exists fully in the kernel and which",
    "start": "926000",
    "end": "928320"
  },
  {
    "text": "ultimately becomes an ebpf program so it",
    "start": "928320",
    "end": "931759"
  },
  {
    "text": "scales well to hundreds of nodes",
    "start": "931759",
    "end": "934959"
  },
  {
    "text": "the next stage is the kernel",
    "start": "934959",
    "end": "937759"
  },
  {
    "text": "router's route rules",
    "start": "937759",
    "end": "940720"
  },
  {
    "text": "these are defined as a common ordered",
    "start": "940720",
    "end": "943199"
  },
  {
    "text": "list of operations for the whole",
    "start": "943199",
    "end": "945279"
  },
  {
    "text": "operating system",
    "start": "945279",
    "end": "946800"
  },
  {
    "text": "but they are intended to be tightly",
    "start": "946800",
    "end": "949040"
  },
  {
    "text": "constrained",
    "start": "949040",
    "end": "950320"
  },
  {
    "text": "and are rarely used by applications in",
    "start": "950320",
    "end": "952480"
  },
  {
    "text": "any case",
    "start": "952480",
    "end": "954480"
  },
  {
    "text": "the rules we add are very simple",
    "start": "954480",
    "end": "957040"
  },
  {
    "text": "if a packet is marked by our inf table",
    "start": "957040",
    "end": "959759"
  },
  {
    "text": "system",
    "start": "959759",
    "end": "960800"
  },
  {
    "text": "then it is sent to an alternate routing",
    "start": "960800",
    "end": "963680"
  },
  {
    "text": "table",
    "start": "963680",
    "end": "965199"
  },
  {
    "text": "this leads us to our third and final",
    "start": "965199",
    "end": "967680"
  },
  {
    "text": "stage of packet wrangling",
    "start": "967680",
    "end": "970240"
  },
  {
    "text": "we have a custom routing table with two",
    "start": "970240",
    "end": "972720"
  },
  {
    "text": "rules",
    "start": "972720",
    "end": "974399"
  },
  {
    "text": "send all ipv4 traffic to the wireguard",
    "start": "974399",
    "end": "977440"
  },
  {
    "text": "interface",
    "start": "977440",
    "end": "978560"
  },
  {
    "text": "and send all ipv6 traffic to the",
    "start": "978560",
    "end": "981360"
  },
  {
    "text": "wireguard interface",
    "start": "981360",
    "end": "984000"
  },
  {
    "text": "so",
    "start": "984000",
    "end": "984800"
  },
  {
    "text": "in summary",
    "start": "984800",
    "end": "986079"
  },
  {
    "text": "we",
    "start": "986079",
    "end": "986880"
  },
  {
    "text": "mark packets destined for kubernetes",
    "start": "986880",
    "end": "989040"
  },
  {
    "text": "applications or kubernetes nodes",
    "start": "989040",
    "end": "992160"
  },
  {
    "text": "send those marked packets to a special",
    "start": "992160",
    "end": "995040"
  },
  {
    "text": "routing table",
    "start": "995040",
    "end": "997120"
  },
  {
    "text": "and then send anything which is sent to",
    "start": "997120",
    "end": "999680"
  },
  {
    "text": "that routing table through the wireguard",
    "start": "999680",
    "end": "1002320"
  },
  {
    "text": "interface",
    "start": "1002320",
    "end": "1003839"
  },
  {
    "text": "this gives us an isolated resilient",
    "start": "1003839",
    "end": "1007120"
  },
  {
    "text": "tolerant and non-invasive way to route",
    "start": "1007120",
    "end": "1010880"
  },
  {
    "text": "kubernetes traffic safely automatically",
    "start": "1010880",
    "end": "1014399"
  },
  {
    "text": "and transparently through wireguard",
    "start": "1014399",
    "end": "1016639"
  },
  {
    "text": "across almost any set of network",
    "start": "1016639",
    "end": "1019199"
  },
  {
    "text": "topologies",
    "start": "1019199",
    "end": "1021680"
  },
  {
    "text": "with kubespan",
    "start": "1021680",
    "end": "1023360"
  },
  {
    "text": "we can easily handle a huge set of",
    "start": "1023360",
    "end": "1026959"
  },
  {
    "text": "hybrid and multi-location",
    "start": "1026959",
    "end": "1029438"
  },
  {
    "text": "kubernetes solutions",
    "start": "1029439",
    "end": "1031678"
  },
  {
    "text": "taking a look at our example scenarios",
    "start": "1031679",
    "end": "1033839"
  },
  {
    "text": "from the beginning of this talk",
    "start": "1033839",
    "end": "1035918"
  },
  {
    "text": "we can easily see how wireguard and",
    "start": "1035919",
    "end": "1038558"
  },
  {
    "text": "kubernetes solve their use cases",
    "start": "1038559",
    "end": "1042319"
  },
  {
    "text": "the voice provider can run their core",
    "start": "1042319",
    "end": "1044558"
  },
  {
    "text": "infrastructure in their data center",
    "start": "1044559",
    "end": "1047360"
  },
  {
    "text": "processing using their fixed cost assets",
    "start": "1047360",
    "end": "1050799"
  },
  {
    "text": "most of the time utilizing no cloud",
    "start": "1050799",
    "end": "1053760"
  },
  {
    "text": "resources",
    "start": "1053760",
    "end": "1055280"
  },
  {
    "text": "if they are wise they will have used our",
    "start": "1055280",
    "end": "1058000"
  },
  {
    "text": "cedero",
    "start": "1058000",
    "end": "1059360"
  },
  {
    "text": "bare metal resource management system",
    "start": "1059360",
    "end": "1061679"
  },
  {
    "text": "which gives them a powerful cluster api",
    "start": "1061679",
    "end": "1064240"
  },
  {
    "text": "management plane and fully automated",
    "start": "1064240",
    "end": "1066480"
  },
  {
    "text": "network boot servers",
    "start": "1066480",
    "end": "1068240"
  },
  {
    "text": "but in any case",
    "start": "1068240",
    "end": "1070640"
  },
  {
    "text": "their normal workload is run entirely",
    "start": "1070640",
    "end": "1073520"
  },
  {
    "text": "within their own hardware",
    "start": "1073520",
    "end": "1076960"
  },
  {
    "text": "when a high traffic event occurs say one",
    "start": "1076960",
    "end": "1079600"
  },
  {
    "text": "of their bank customers needs to notify",
    "start": "1079600",
    "end": "1082640"
  },
  {
    "text": "a large number of their customers in a",
    "start": "1082640",
    "end": "1084880"
  },
  {
    "text": "short period of time",
    "start": "1084880",
    "end": "1087440"
  },
  {
    "text": "they can add in additional resources",
    "start": "1087440",
    "end": "1090080"
  },
  {
    "text": "from aws",
    "start": "1090080",
    "end": "1092160"
  },
  {
    "text": "they have a simple autoscaling group",
    "start": "1092160",
    "end": "1094400"
  },
  {
    "text": "defined there which adds nodes very",
    "start": "1094400",
    "end": "1097600"
  },
  {
    "text": "quickly if they're using talos which",
    "start": "1097600",
    "end": "1099679"
  },
  {
    "text": "installs and boots into kubernetes",
    "start": "1099679",
    "end": "1101679"
  },
  {
    "text": "faster than just about anything else out",
    "start": "1101679",
    "end": "1103840"
  },
  {
    "text": "there",
    "start": "1103840",
    "end": "1104799"
  },
  {
    "text": "to the cluster",
    "start": "1104799",
    "end": "1106640"
  },
  {
    "text": "when each of those nodes comes up",
    "start": "1106640",
    "end": "1109679"
  },
  {
    "text": "it discovers the wireguard connection",
    "start": "1109679",
    "end": "1112160"
  },
  {
    "text": "information for every other node in the",
    "start": "1112160",
    "end": "1114240"
  },
  {
    "text": "cluster and they in turn discover the",
    "start": "1114240",
    "end": "1117520"
  },
  {
    "text": "new node",
    "start": "1117520",
    "end": "1118960"
  },
  {
    "text": "everyone connects to everyone else",
    "start": "1118960",
    "end": "1121760"
  },
  {
    "text": "and even though some of the nodes are in",
    "start": "1121760",
    "end": "1123840"
  },
  {
    "text": "aws and some are in the private data",
    "start": "1123840",
    "end": "1126720"
  },
  {
    "text": "center",
    "start": "1126720",
    "end": "1127679"
  },
  {
    "text": "everyone talks as if they're in the same",
    "start": "1127679",
    "end": "1130000"
  },
  {
    "text": "place",
    "start": "1130000",
    "end": "1132320"
  },
  {
    "text": "the large retailer has their control",
    "start": "1132880",
    "end": "1135360"
  },
  {
    "text": "plane database and most of their",
    "start": "1135360",
    "end": "1138240"
  },
  {
    "text": "resources in gcp",
    "start": "1138240",
    "end": "1141039"
  },
  {
    "text": "at each store",
    "start": "1141039",
    "end": "1142720"
  },
  {
    "text": "they have a number of point-of-sale",
    "start": "1142720",
    "end": "1144480"
  },
  {
    "text": "terminals and back-office workstations",
    "start": "1144480",
    "end": "1147200"
  },
  {
    "text": "which are run by a few local servers for",
    "start": "1147200",
    "end": "1149760"
  },
  {
    "text": "redundancy",
    "start": "1149760",
    "end": "1151760"
  },
  {
    "text": "the workloads on those local servers are",
    "start": "1151760",
    "end": "1154480"
  },
  {
    "text": "all managed by the control plane in the",
    "start": "1154480",
    "end": "1156720"
  },
  {
    "text": "cloud",
    "start": "1156720",
    "end": "1157760"
  },
  {
    "text": "but if their spotty local internet goes",
    "start": "1157760",
    "end": "1160799"
  },
  {
    "text": "down",
    "start": "1160799",
    "end": "1161919"
  },
  {
    "text": "they can still operate because those",
    "start": "1161919",
    "end": "1164160"
  },
  {
    "text": "servers don't need a constant connection",
    "start": "1164160",
    "end": "1167200"
  },
  {
    "text": "to the cloud control plane",
    "start": "1167200",
    "end": "1169440"
  },
  {
    "text": "they simply",
    "start": "1169440",
    "end": "1170880"
  },
  {
    "text": "cache the new data",
    "start": "1170880",
    "end": "1172799"
  },
  {
    "text": "and reconcile when the internet comes",
    "start": "1172799",
    "end": "1174960"
  },
  {
    "text": "back up",
    "start": "1174960",
    "end": "1176080"
  },
  {
    "text": "receiving any new workload orders at the",
    "start": "1176080",
    "end": "1178720"
  },
  {
    "text": "same time",
    "start": "1178720",
    "end": "1180400"
  },
  {
    "text": "even better",
    "start": "1180400",
    "end": "1181600"
  },
  {
    "text": "if the network doesn't come back up",
    "start": "1181600",
    "end": "1183679"
  },
  {
    "text": "quickly",
    "start": "1183679",
    "end": "1184720"
  },
  {
    "text": "they connect their router",
    "start": "1184720",
    "end": "1186559"
  },
  {
    "text": "to an lte modem and they don't even have",
    "start": "1186559",
    "end": "1189280"
  },
  {
    "text": "to change anything else",
    "start": "1189280",
    "end": "1191200"
  },
  {
    "text": "the nodes just connect up however they",
    "start": "1191200",
    "end": "1193440"
  },
  {
    "text": "can and continue working",
    "start": "1193440",
    "end": "1197279"
  },
  {
    "text": "the public transport organization",
    "start": "1198160",
    "end": "1200880"
  },
  {
    "text": "has their kubernetes control plane",
    "start": "1200880",
    "end": "1203840"
  },
  {
    "text": "running in a in an approved cloud",
    "start": "1203840",
    "end": "1206960"
  },
  {
    "text": "provider",
    "start": "1206960",
    "end": "1208400"
  },
  {
    "text": "but all of their writer data is stored",
    "start": "1208400",
    "end": "1210960"
  },
  {
    "text": "on physical machines at a data center",
    "start": "1210960",
    "end": "1213600"
  },
  {
    "text": "inside their authority's borders",
    "start": "1213600",
    "end": "1216880"
  },
  {
    "text": "each of their transportation hubs has",
    "start": "1216880",
    "end": "1219039"
  },
  {
    "text": "several display boards which regularly",
    "start": "1219039",
    "end": "1221360"
  },
  {
    "text": "receive updates of times and locations",
    "start": "1221360",
    "end": "1224480"
  },
  {
    "text": "of their buses and trains",
    "start": "1224480",
    "end": "1227200"
  },
  {
    "text": "they even have sensors and detectors",
    "start": "1227200",
    "end": "1229679"
  },
  {
    "text": "connected over public wi-fi and",
    "start": "1229679",
    "end": "1231679"
  },
  {
    "text": "dispersed across a large number of",
    "start": "1231679",
    "end": "1233520"
  },
  {
    "text": "locations",
    "start": "1233520",
    "end": "1235280"
  },
  {
    "text": "and all of this is coordinated by a",
    "start": "1235280",
    "end": "1238000"
  },
  {
    "text": "single kubernetes cluster",
    "start": "1238000",
    "end": "1240240"
  },
  {
    "text": "all of it communicates securely to the",
    "start": "1240240",
    "end": "1242880"
  },
  {
    "text": "other resources in the cluster",
    "start": "1242880",
    "end": "1245440"
  },
  {
    "text": "even over public wi-fi and common",
    "start": "1245440",
    "end": "1247760"
  },
  {
    "text": "network links",
    "start": "1247760",
    "end": "1249440"
  },
  {
    "text": "wireguard secures everything",
    "start": "1249440",
    "end": "1252960"
  },
  {
    "text": "all regulations are followed",
    "start": "1252960",
    "end": "1255120"
  },
  {
    "text": "but they are able to leverage the best",
    "start": "1255120",
    "end": "1257360"
  },
  {
    "text": "resources for each component across a",
    "start": "1257360",
    "end": "1260480"
  },
  {
    "text": "wide variety of locations",
    "start": "1260480",
    "end": "1263840"
  },
  {
    "text": "there are myriad other use cases for",
    "start": "1264240",
    "end": "1266880"
  },
  {
    "text": "using wireguard to tie kubernetes",
    "start": "1266880",
    "end": "1269280"
  },
  {
    "text": "together",
    "start": "1269280",
    "end": "1270559"
  },
  {
    "text": "and we are building solutions for them",
    "start": "1270559",
    "end": "1274080"
  },
  {
    "text": "join us",
    "start": "1274080",
    "end": "1275200"
  },
  {
    "text": "explore our products and tools and let",
    "start": "1275200",
    "end": "1278320"
  },
  {
    "text": "us help you build the systems you want",
    "start": "1278320",
    "end": "1281760"
  },
  {
    "text": "to build",
    "start": "1281760",
    "end": "1282960"
  },
  {
    "text": "in the way you want to build them",
    "start": "1282960",
    "end": "1285919"
  },
  {
    "text": "we have the public room talos on",
    "start": "1285919",
    "end": "1288240"
  },
  {
    "text": "matrix.org",
    "start": "1288240",
    "end": "1290400"
  },
  {
    "text": "if you prefer proprietary communications",
    "start": "1290400",
    "end": "1292880"
  },
  {
    "text": "platforms join our slack",
    "start": "1292880",
    "end": "1296480"
  },
  {
    "text": "have we have a great deal of",
    "start": "1296480",
    "end": "1298159"
  },
  {
    "text": "documentation examples tutorials and",
    "start": "1298159",
    "end": "1301440"
  },
  {
    "text": "other information on our website",
    "start": "1301440",
    "end": "1304320"
  },
  {
    "text": "pull our code from github give us a try",
    "start": "1304320",
    "end": "1307200"
  },
  {
    "text": "and reach out",
    "start": "1307200",
    "end": "1308720"
  },
  {
    "text": "thanks for your time",
    "start": "1308720",
    "end": "1312360"
  }
]