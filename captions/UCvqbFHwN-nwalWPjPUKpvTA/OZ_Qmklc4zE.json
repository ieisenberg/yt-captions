[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "good morning everybody thank you for coming there are lots of great choices for you to attend today and thanks for",
    "start": "30",
    "end": "7379"
  },
  {
    "text": "coming for listening to me about introduction of GR PC before I start to",
    "start": "7379",
    "end": "15990"
  },
  {
    "text": "make sure what level of familiarity the audience has I wanted to do a quick show",
    "start": "15990",
    "end": "21869"
  },
  {
    "text": "of hands how many of you have not heard of GR PC or have just heard of gr PC and",
    "start": "21869",
    "end": "28740"
  },
  {
    "text": "I here to find out more about it Frank tastic so that's the largest group",
    "start": "28740",
    "end": "36110"
  },
  {
    "text": "so it's also great so that I'll go to the next because I wanted to introduce so in this talk I'll be covering just",
    "start": "36110",
    "end": "44579"
  },
  {
    "start": "39000",
    "end": "39000"
  },
  {
    "text": "basic beginner level information or what is gr PC what do you get out of it there",
    "start": "44579",
    "end": "49950"
  },
  {
    "text": "are a few other talks today there is another talk at 2:45 which talks about similar basic levels but how to apply gr",
    "start": "49950",
    "end": "57090"
  },
  {
    "text": "PC for IOT applications and then immediately after that if you're running",
    "start": "57090",
    "end": "62820"
  },
  {
    "text": "gr PC and if you want to scale gr PC application want to learn about how to do load balancing with cuban it is then",
    "start": "62820",
    "end": "70590"
  },
  {
    "text": "my teammate yan would be talking at 11:45 in auditorium 15 about how to",
    "start": "70590",
    "end": "76229"
  },
  {
    "text": "scale your PC services and/or balance them across kubernetes and then tomorrow",
    "start": "76229",
    "end": "82409"
  },
  {
    "text": "at 433 my code partner here would be doing a deep dive and that session is",
    "start": "82409",
    "end": "88290"
  },
  {
    "text": "mostly if you are excited you want to contribute or you're contributing or",
    "start": "88290",
    "end": "94369"
  },
  {
    "text": "your power user when you want to dive into the stack below that it will cover",
    "start": "94369",
    "end": "100140"
  },
  {
    "text": "time so great so let's get started what is gr PC some macro need for later",
    "start": "100140",
    "end": "107790"
  },
  {
    "start": "103000",
    "end": "103000"
  },
  {
    "text": "acronym well it's a recursive definition gr PC remote procedure calls so",
    "start": "107790",
    "end": "114180"
  },
  {
    "text": "basically it's a remote procedure call library it's meant to be a high",
    "start": "114180",
    "end": "120840"
  },
  {
    "text": "performance standard based open source framework it's you we bait it so that",
    "start": "120840",
    "end": "129149"
  },
  {
    "text": "it's ubiquitous it works in cloud native applications in your data center on you desktops in your mobile phones in your I",
    "start": "129149",
    "end": "136680"
  },
  {
    "text": "Oh T devices it's meant to run everywhere and gives you a same",
    "start": "136680",
    "end": "141930"
  },
  {
    "text": "framework to develop your applications in that scenario it CN CF s-- RPC",
    "start": "141930",
    "end": "148320"
  },
  {
    "text": "framework it's been in cnc for more than a year used to build cloud native apps",
    "start": "148320",
    "end": "155520"
  },
  {
    "text": "and it's been a next-generation of a",
    "start": "155520",
    "end": "160550"
  },
  {
    "text": "system called stubby that we've been using at Google for over a decade big it's actively developed",
    "start": "160550",
    "end": "167280"
  },
  {
    "text": "production-ready and it's we just did a release we've been doing six weekly",
    "start": "167280",
    "end": "172950"
  },
  {
    "text": "releases and it's recent most releases 1.11 so so what's a remote procedure",
    "start": "172950",
    "end": "181140"
  },
  {
    "text": "call you make a call to a remote service",
    "start": "181140",
    "end": "187080"
  },
  {
    "text": "just like your procedure call what does G RPC give you if you are developing an application the green boxes here",
    "start": "187080",
    "end": "193680"
  },
  {
    "text": "consider a service you are running you are running a C++ service and then you have a Ruby client animal bodies land",
    "start": "193680",
    "end": "200280"
  },
  {
    "text": "which are talking to this service so the green boxes are what you get out of the box from G RPC and then you develop your",
    "start": "200280",
    "end": "207480"
  },
  {
    "text": "application logic around the ER PC and we'll walk through an example getting it",
    "start": "207480",
    "end": "214739"
  },
  {
    "text": "getting into details of what it does so when I came last year at Berlin and I",
    "start": "214739",
    "end": "222269"
  },
  {
    "text": "started talking and the first question was hey you know that RPC that's a 70s concept old concept there have been some",
    "start": "222269",
    "end": "229860"
  },
  {
    "text": "failures like CORBA etc what are you bringing new or listening so we've been",
    "start": "229860",
    "end": "236040"
  },
  {
    "text": "using at Google our pcs for 10 plus years we've built more than we have",
    "start": "236040",
    "end": "241230"
  },
  {
    "text": "actively we're actively running tens of thousands of services with tens of",
    "start": "241230",
    "end": "246540"
  },
  {
    "text": "billions of our pcs per second so this is not over a day or overtime resistance",
    "start": "246540",
    "end": "252150"
  },
  {
    "text": "of billions of our pcs per second from those we have learnt a lot and this being the next generation we brought in",
    "start": "252150",
    "end": "259470"
  },
  {
    "text": "all the use cases and things that we have learnt into this",
    "start": "259470",
    "end": "264890"
  },
  {
    "text": "so so we'll walk through a small example",
    "start": "265730",
    "end": "270900"
  },
  {
    "start": "267000",
    "end": "267000"
  },
  {
    "text": "of to explain further what do you get how do you build and how do you go for",
    "start": "270900",
    "end": "277650"
  },
  {
    "text": "what so this is just outline and we'll",
    "start": "277650",
    "end": "283110"
  },
  {
    "text": "go through each of these steps in detail but when you want to start building you",
    "start": "283110",
    "end": "289680"
  },
  {
    "text": "start defining what am i building what service am i building you write a profile and we'll know but I'll talk",
    "start": "289680",
    "end": "296880"
  },
  {
    "text": "about that soon and that then you run a compiler it generates a service and a stub for me",
    "start": "296880",
    "end": "305370"
  },
  {
    "text": "the service is what you use to build your service stub is what you use to make a call you know you're building",
    "start": "305370",
    "end": "311970"
  },
  {
    "text": "your application around this and then you're up and going within minutes to",
    "start": "311970",
    "end": "318450"
  },
  {
    "text": "with your distributed application so I'll take a slight detour into protocol",
    "start": "318450",
    "end": "326430"
  },
  {
    "start": "321000",
    "end": "321000"
  },
  {
    "text": "buffers protocol buffers in here PC go hand-in-hand they can be used without each other people use protocol buffers",
    "start": "326430",
    "end": "333270"
  },
  {
    "text": "without gr PC or stubby and people use gr be seen without protocol buffers but together they make it very easy to use",
    "start": "333270",
    "end": "339510"
  },
  {
    "text": "and give much more value at to people it's been a lingua franca of Google for serializing and for our pcs in storage",
    "start": "339510",
    "end": "348090"
  },
  {
    "text": "I've been using for a long time it's a binary data representation so it's",
    "start": "348090",
    "end": "353220"
  },
  {
    "text": "compact the structures in the protobufs",
    "start": "353220",
    "end": "358230"
  },
  {
    "text": "can be extended in forward backward compatible way you have to maintain certain conventions and you can maintain",
    "start": "358230",
    "end": "365280"
  },
  {
    "text": "your sir you can upgrade your services or you can have support old clients and",
    "start": "365280",
    "end": "371130"
  },
  {
    "text": "new clients simultaneously if you follow certain conventions",
    "start": "371130",
    "end": "376310"
  },
  {
    "text": "you define your ideal and the code generator takes care of creating a",
    "start": "376310",
    "end": "381320"
  },
  {
    "text": "custom library for you using that ideal and then from your perspective it looks",
    "start": "381320",
    "end": "387500"
  },
  {
    "text": "like you are programming to your application logic so if you are developing for example a banking app",
    "start": "387500",
    "end": "392530"
  },
  {
    "text": "once you've run you once you have defined and you have run it looks as if you're writing ad this money we draw",
    "start": "392530",
    "end": "400040"
  },
  {
    "text": "money from ATM those type you can think in terms of you don't have to think it takes away the distributed nature from",
    "start": "400040",
    "end": "408110"
  },
  {
    "text": "your application you don't have to think when you scale you will need to still think but when you start it gets you",
    "start": "408110",
    "end": "414980"
  },
  {
    "text": "started quickly and protocol buffers are strongly typed that gives you that lets",
    "start": "414980",
    "end": "424160"
  },
  {
    "text": "you create string contracts between your kinds and servers benefit of that is if",
    "start": "424160",
    "end": "430790"
  },
  {
    "text": "there are go and attacked the errors at the compiler this thing rather than running it and stumbling into problems",
    "start": "430790",
    "end": "437780"
  },
  {
    "text": "you detect problems early and it also allows efficient optimization because",
    "start": "437780",
    "end": "444110"
  },
  {
    "text": "what it lets you do is you once you have",
    "start": "444110",
    "end": "449300"
  },
  {
    "text": "written then you can take that ideal and create a very compact binary",
    "start": "449300",
    "end": "454630"
  },
  {
    "text": "representations from it there are other integrations of G RPC with flatbuffers and Microsoft Bond and those are in open",
    "start": "454630",
    "end": "462350"
  },
  {
    "text": "source if you want to see the protocol buffers has a rich data type system and",
    "start": "462350",
    "end": "468080"
  },
  {
    "text": "you can see over here that there is a message with some enumerated types and then some repeated messages being",
    "start": "468080",
    "end": "475550"
  },
  {
    "text": "specified as a list or array of messages",
    "start": "475550",
    "end": "481270"
  },
  {
    "start": "481000",
    "end": "481000"
  },
  {
    "text": "so now we know basic blocks we are going",
    "start": "481499",
    "end": "487949"
  },
  {
    "text": "to use let's walk through an example let's say that I want to build an example called route guide and it's a",
    "start": "487949",
    "end": "494759"
  },
  {
    "text": "simple application I'm traveling around my application is such that there are",
    "start": "494759",
    "end": "503309"
  },
  {
    "text": "clients traveling around a route and they are communicating with a service with some notes and information etc or",
    "start": "503309",
    "end": "512250"
  },
  {
    "text": "it could be between two friends traveling around two different routes and talking to each other doesn't need",
    "start": "512250",
    "end": "517740"
  },
  {
    "text": "to be it can be a symmetric model too so the first thing you need to think about",
    "start": "517740",
    "end": "524159"
  },
  {
    "text": "is what messages am I going to send right as you start building your application you start thinking what",
    "start": "524159",
    "end": "530190"
  },
  {
    "text": "messages do I need to say what type of service do I need to export so in talk",
    "start": "530190",
    "end": "537570"
  },
  {
    "text": "you need to define your API one of the anecdotic will save saying that Google",
    "start": "537570",
    "end": "544230"
  },
  {
    "text": "is as you grow up in ladder in engineering at Google the more senior",
    "start": "544230",
    "end": "549269"
  },
  {
    "text": "you become the more time you spend just writing protocol buffers because that's",
    "start": "549269",
    "end": "554699"
  },
  {
    "text": "the one of the most important thing if you design your API right you're going",
    "start": "554699",
    "end": "560670"
  },
  {
    "text": "to build a very long sustainable this thing you have to think through all the corner cases etc so you want to think",
    "start": "560670",
    "end": "568740"
  },
  {
    "text": "come up with all the questions do your design so here I'm talking about a right guide I'm thinking of messages I say I",
    "start": "568740",
    "end": "576720"
  },
  {
    "text": "need a point location like if your longitude I need a feature well feature is",
    "start": "576720",
    "end": "582779"
  },
  {
    "text": "probably name of a place at a point and route node now is a note that I'm",
    "start": "582779",
    "end": "588690"
  },
  {
    "text": "sending from a point across along the route and then I think about service well I need I'm going to do a very",
    "start": "588690",
    "end": "595050"
  },
  {
    "text": "simple service I just need two things given a point I need to know what feet is there a feature at this point and",
    "start": "595050",
    "end": "601079"
  },
  {
    "text": "what the feature is and then saying some chat message to say Sri walking along",
    "start": "601079",
    "end": "606959"
  },
  {
    "text": "his own route and explaining him what point I'm at and",
    "start": "606959",
    "end": "612430"
  },
  {
    "text": "what feature I'm using etc so very basic service but so as I said you define your",
    "start": "612430",
    "end": "622300"
  },
  {
    "start": "618000",
    "end": "618000"
  },
  {
    "text": "messages very simple those funny-looking equal to one to tag IDs those are the",
    "start": "622300",
    "end": "629170"
  },
  {
    "text": "tag IDs that are required and those are the ones that help you maintain forward",
    "start": "629170",
    "end": "634780"
  },
  {
    "text": "and backward compatible nature of TR pieces if you follow certain convention so the golden rule is never reused a tag",
    "start": "634780",
    "end": "642070"
  },
  {
    "text": "if you don't every user tag if you want to add a new they say after six months",
    "start": "642070",
    "end": "648250"
  },
  {
    "text": "you add more functionality add more tags what that does is this format on the",
    "start": "648250",
    "end": "654550"
  },
  {
    "text": "wire stays backward and forward compatible and then it's up to your server logic when you want to handle and",
    "start": "654550",
    "end": "661420"
  },
  {
    "text": "you maybe try to give an error but you won't you will be able to handle",
    "start": "661420",
    "end": "667540"
  },
  {
    "text": "multiple versions simultaneously so once you've defined your messages",
    "start": "667540",
    "end": "673150"
  },
  {
    "text": "these are the objects that you are going to sing then you need to start thinking about the definition service G RPC",
    "start": "673150",
    "end": "681040"
  },
  {
    "text": "allows two basic types of our pcs unary and streaming so unary is client sends a",
    "start": "681040",
    "end": "688870"
  },
  {
    "text": "message and the server sends a response crying screaming is client starts",
    "start": "688870",
    "end": "694240"
  },
  {
    "text": "sending list of messages one after other and once you it's done server sends a",
    "start": "694240",
    "end": "699790"
  },
  {
    "text": "response server streaming is a positive that server keeps on you send Eric Ryan",
    "start": "699790",
    "end": "705460"
  },
  {
    "text": "sends a request and server keeps sending responses and then bi-directional",
    "start": "705460",
    "end": "710590"
  },
  {
    "text": "streaming is similar to a synchronous communication I am talking to Sir Ian",
    "start": "710590",
    "end": "716350"
  },
  {
    "text": "she is talking to me I don't know when he's going to talk to me he doesn't know when I'm he's going I am doing to have",
    "start": "716350",
    "end": "722140"
  },
  {
    "text": "to talk to him so clients and servers say multiple messages are synchronously to each other so in this case I'm going",
    "start": "722140",
    "end": "730570"
  },
  {
    "text": "to add to our pcs just one gate feature get given a point returns a feature and",
    "start": "730570",
    "end": "738720"
  },
  {
    "text": "say notes this is synchronous can mutation so this is what I do in the",
    "start": "738720",
    "end": "746460"
  },
  {
    "text": "proto file and then I ran proto compiler that's all you do so I write my protocol",
    "start": "746460",
    "end": "754240"
  },
  {
    "start": "753000",
    "end": "753000"
  },
  {
    "text": "buffer and I service definition and I run a compiler and I can generate code",
    "start": "754240",
    "end": "761110"
  },
  {
    "start": "757000",
    "end": "757000"
  },
  {
    "text": "for any language that GRP see in protocol buffer support so 10 plus",
    "start": "761110",
    "end": "766180"
  },
  {
    "text": "languages and get libraries to do that and it creates idiomatic objects in",
    "start": "766180",
    "end": "772569"
  },
  {
    "text": "those languages for these messages it gives me getters and setters for all",
    "start": "772569",
    "end": "777670"
  },
  {
    "text": "the types and all the message types and it creates abstract interface for my",
    "start": "777670",
    "end": "784600"
  },
  {
    "text": "service so all I need to do is derive from this service class and create my",
    "start": "784600",
    "end": "791829"
  },
  {
    "start": "790000",
    "end": "790000"
  },
  {
    "text": "service so Alta so what does it look I ran this one C++ with a C++ option and I got a",
    "start": "791829",
    "end": "800519"
  },
  {
    "text": "service object and I got a stub object the stub I'll talk more about desktop a",
    "start": "800519",
    "end": "808300"
  },
  {
    "text": "little bit so what do i do from here so the I wrote my proto I ran the compiler",
    "start": "808300",
    "end": "813970"
  },
  {
    "text": "I got this then I write my application code for service creating a derived",
    "start": "813970",
    "end": "820540"
  },
  {
    "text": "class from this class and implement some handlers in that RTC class so that that",
    "start": "820540",
    "end": "826149"
  },
  {
    "text": "service has bunch of handlers that I can extend and that create builds my service",
    "start": "826149",
    "end": "831670"
  },
  {
    "text": "so you from your perspective you wrote your proto and then you focused on how",
    "start": "831670",
    "end": "838199"
  },
  {
    "text": "the application logic for your service works sorry and then when you want to",
    "start": "838199",
    "end": "846279"
  },
  {
    "text": "make a call you use that stub the word stub or a client stub you can think of",
    "start": "846279",
    "end": "852819"
  },
  {
    "text": "it as write I use that stub and say get feature that sends a message across to",
    "start": "852819",
    "end": "859389"
  },
  {
    "text": "the on the wire to the service and so if you think about it from an application",
    "start": "859389",
    "end": "865449"
  },
  {
    "text": "developers perspective this is a much simpler model because you wrote your service contract you defined it well",
    "start": "865449",
    "end": "871779"
  },
  {
    "text": "please whenever you write make sure you take your time to design your API as",
    "start": "871779",
    "end": "876939"
  },
  {
    "text": "well and after that the G RPC protocol pilers will take care of generating all",
    "start": "876939",
    "end": "883000"
  },
  {
    "text": "the underneath serialization or your PC will do all the security",
    "start": "883000",
    "end": "889710"
  },
  {
    "text": "underneath as we talk further it will do other features that this allows you to",
    "start": "889710",
    "end": "895110"
  },
  {
    "text": "at one place to things like stats tracing monitoring when you need to get",
    "start": "895110",
    "end": "900750"
  },
  {
    "text": "this in deployment you can do all of those things hook those things into gr PC library and then your developers are",
    "start": "900750",
    "end": "908010"
  },
  {
    "text": "just building their application logic and they are getting analyze the analytics Azure consistent monitoring is",
    "start": "908010",
    "end": "916050"
  },
  {
    "text": "consistent you can hook in load balancing and all kinds of good things can come to you so that was my quick",
    "start": "916050",
    "end": "923089"
  },
  {
    "text": "example in a nutshell you we had an idea to describe service API we once then we",
    "start": "923089",
    "end": "932730"
  },
  {
    "start": "924000",
    "end": "924000"
  },
  {
    "text": "ran our proto compiler generated the client stubs and server classes extended those to create my service and and this",
    "start": "932730",
    "end": "941190"
  },
  {
    "text": "example is present in across languages on our github repo so you just took the",
    "start": "941190",
    "end": "946980"
  },
  {
    "text": "same example in case you need to give and this takes I'll go into more about",
    "start": "946980",
    "end": "952860"
  },
  {
    "text": "HTTP to feature site etc now and the",
    "start": "952860",
    "end": "958130"
  },
  {
    "text": "organization is at github calm GRP see there is a sister organization also github.com G RPC ecosystem and we have",
    "start": "958130",
    "end": "968700"
  },
  {
    "text": "I'll have more contact info etcetera so now I'm going to switch gear as in sure",
    "start": "968700",
    "end": "977610"
  },
  {
    "text": "so there is our PC library etc there are other ways of doing all communication",
    "start": "977610",
    "end": "983670"
  },
  {
    "text": "between services messaging between the services so you need to know what do I get by using G RPC so I'm going to focus",
    "start": "983670",
    "end": "990540"
  },
  {
    "text": "more now on what do you get when you use G RPC so",
    "start": "990540",
    "end": "996240"
  },
  {
    "start": "996000",
    "end": "996000"
  },
  {
    "text": "dear PC speaks your language we have at Google for last ten plus years have had",
    "start": "996240",
    "end": "1004250"
  },
  {
    "text": "development in four plus languages and having a consistent development where each team can independently choose their",
    "start": "1004250",
    "end": "1011270"
  },
  {
    "text": "language and still not worry about what the other team is developing has been a big benefit to us we've extended that",
    "start": "1011270",
    "end": "1018560"
  },
  {
    "text": "when we build your PC there are 12 plus languages today how how increasing and",
    "start": "1018560",
    "end": "1024530"
  },
  {
    "text": "few more in the implementation which are adding support for G RPC so just a list",
    "start": "1024530",
    "end": "1034910"
  },
  {
    "text": "of languages the the recent one has been dart and Swift Haskell rest those are",
    "start": "1034910",
    "end": "1041720"
  },
  {
    "text": "being added but most common languages are handled here and just shows you that",
    "start": "1041720",
    "end": "1049730"
  },
  {
    "text": "you can in a company you can have different teams using different",
    "start": "1049730",
    "end": "1055670"
  },
  {
    "text": "languages and basing their logic independent of each other and still",
    "start": "1055670",
    "end": "1062330"
  },
  {
    "text": "communicating efficiently across each of them G RPC is ubiquitous it's available",
    "start": "1062330",
    "end": "1070850"
  },
  {
    "start": "1067000",
    "end": "1067000"
  },
  {
    "text": "on every platform or we've been trying to expand the its bait such that it can",
    "start": "1070850",
    "end": "1076520"
  },
  {
    "text": "be available on any platform and we've been explained expanding our platforms",
    "start": "1076520",
    "end": "1081590"
  },
  {
    "text": "as these things go and so if you think about it it were runs on Linux Mac",
    "start": "1081590",
    "end": "1087560"
  },
  {
    "text": "Windows your desktop operating systems runs in your data centers runs on your",
    "start": "1087560",
    "end": "1093500"
  },
  {
    "text": "desktop runs on your phone we use mobile G our pcs used today in several Google",
    "start": "1093500",
    "end": "1099590"
  },
  {
    "text": "applications for example and few other external applications to communicate",
    "start": "1099590",
    "end": "1104750"
  },
  {
    "text": "with our friends or servers Android iOS",
    "start": "1104750",
    "end": "1109940"
  },
  {
    "text": "and it's being used by several embedded devices also including routers etc so we",
    "start": "1109940",
    "end": "1119900"
  },
  {
    "text": "do need help from the community here saying ubiquitous is not being",
    "start": "1119900",
    "end": "1124970"
  },
  {
    "text": "ubiquitous that's a goal to be your Vic witness and really we as people working on gr PC",
    "start": "1124970",
    "end": "1132960"
  },
  {
    "text": "don't have access to every different platform to test try these things out",
    "start": "1132960",
    "end": "1138429"
  },
  {
    "text": "etc so and there are always new languages coming up the Kotlin came",
    "start": "1138429",
    "end": "1144070"
  },
  {
    "text": "people wanted to use hot link so to create bindings for these new languages",
    "start": "1144070",
    "end": "1150700"
  },
  {
    "text": "and your environments right LVM or more platforms somebody wants comes up with a",
    "start": "1150700",
    "end": "1156639"
  },
  {
    "text": "new one example of this was alpine linux we didn't have support for it so so we",
    "start": "1156639",
    "end": "1162219"
  },
  {
    "text": "need help on these things usually this just ends up making builds work and",
    "start": "1162219",
    "end": "1168479"
  },
  {
    "text": "maybe running fixing certain API calls that are going down to the system and",
    "start": "1168479",
    "end": "1174940"
  },
  {
    "text": "testing testing is very important testing it on that platform so if you're",
    "start": "1174940",
    "end": "1180070"
  },
  {
    "text": "interested in contributing we would love any help here what is G RPC praying it",
    "start": "1180070",
    "end": "1187809"
  },
  {
    "start": "1184000",
    "end": "1184000"
  },
  {
    "text": "brings strongly-typed service contacts one of the problems in distributed",
    "start": "1187809",
    "end": "1193749"
  },
  {
    "text": "systems building distributed applications is mismatch between mismatch or mismatch of assumptions",
    "start": "1193749",
    "end": "1200919"
  },
  {
    "text": "between different components talking to each other and and and it's very hard",
    "start": "1200919",
    "end": "1206679"
  },
  {
    "text": "once you run into those problems they can they can be obvious to a client",
    "start": "1206679",
    "end": "1213759"
  },
  {
    "text": "doesn't talk to sir where it's catastrophic but you can debug it or",
    "start": "1213759",
    "end": "1218830"
  },
  {
    "text": "they can either exhibit themselves in a very complicated way where your tail",
    "start": "1218830",
    "end": "1224649"
  },
  {
    "text": "latency increases by a large amount of time because some assumption was not well valid so having strict API script",
    "start": "1224649",
    "end": "1232929"
  },
  {
    "text": "service contracts is a great thing G RPC along with protocol buffers gives you",
    "start": "1232929",
    "end": "1238389"
  },
  {
    "start": "1235000",
    "end": "1235000"
  },
  {
    "text": "that it gives you backward and forward convention so for example if you don't reuse your tags then you can always keep",
    "start": "1238389",
    "end": "1245559"
  },
  {
    "text": "extending your service we have services running which have been extended over",
    "start": "1245559",
    "end": "1251529"
  },
  {
    "text": "eight to ten years at Google and it successfully works yes you do need to",
    "start": "1251529",
    "end": "1256779"
  },
  {
    "text": "handle in your application logic at some point of time you do need to have convention like semantic versioning and this thing",
    "start": "1256779",
    "end": "1264169"
  },
  {
    "text": "but it gives you a good mechanism to",
    "start": "1264169",
    "end": "1269630"
  },
  {
    "text": "seamlessly give forward and backward compatible api's you can use your own",
    "start": "1269630",
    "end": "1276529"
  },
  {
    "text": "conventions with G RPC it doesn't end force necessarily so you can have restful services for many use cases",
    "start": "1276529",
    "end": "1282919"
  },
  {
    "text": "that's the right thing to do you should bid restful services we also have",
    "start": "1282919",
    "end": "1288890"
  },
  {
    "text": "conventions like just have one service per proto definition at times many",
    "start": "1288890",
    "end": "1294049"
  },
  {
    "text": "people find it very convenient to have just one RPC per service so you can have your frame your policies and conventions",
    "start": "1294049",
    "end": "1302090"
  },
  {
    "text": "around proto's and they make different policies and different conventions make",
    "start": "1302090",
    "end": "1307279"
  },
  {
    "text": "sense for example if you wanted to build a credit system you can always enforce that every service definition of an api",
    "start": "1307279",
    "end": "1314659"
  },
  {
    "text": "has four methods and and then all your developers will build a crud like system",
    "start": "1314659",
    "end": "1320659"
  },
  {
    "text": "using grdc",
    "start": "1320659",
    "end": "1324279"
  },
  {
    "start": "1324000",
    "end": "1324000"
  },
  {
    "text": "Jia Jia PC gives you performance and efficiency on wire so er PC is based on",
    "start": "1326010",
    "end": "1332490"
  },
  {
    "text": "HTTP 2 and HTTP 2 has several benefits over HTTP and this quick demo developed",
    "start": "1332490",
    "end": "1340380"
  },
  {
    "text": "by HTTP 2 demo guys just visually shows",
    "start": "1340380",
    "end": "1346140"
  },
  {
    "text": "what type of performance benefits you get because of multiplexing and binary",
    "start": "1346140",
    "end": "1351270"
  },
  {
    "text": "framing etcetera it has binary proto's which are compact",
    "start": "1351270",
    "end": "1359010"
  },
  {
    "text": "so size on the wire is much smaller and there are two people have been asked this question hey I can use a good",
    "start": "1359010",
    "end": "1366240"
  },
  {
    "text": "compression mechanism and then reduce the wire but yes the compressing takes CPU cycle so so if when you think of",
    "start": "1366240",
    "end": "1372600"
  },
  {
    "text": "efficiency you need to think of both I need to create this representation efficiently I want to get out of this",
    "start": "1372600",
    "end": "1379620"
  },
  {
    "text": "representation efficiently and I want to have smallest number of bytes and and we've been using proto's lot of people",
    "start": "1379620",
    "end": "1386460"
  },
  {
    "text": "have used proto's and people have seen amazing improvements if you are using HTTP JSON or rest you can see that this",
    "start": "1386460",
    "end": "1395100"
  },
  {
    "text": "blog post talks about 3x improvement in throughput 11x improvement in CPU so you",
    "start": "1395100",
    "end": "1400620"
  },
  {
    "text": "can get lots of performance benefits through over say HTTP JSON risk using",
    "start": "1400620",
    "end": "1407250"
  },
  {
    "text": "this and then the libraries have been built and performance is a key priority",
    "start": "1407250",
    "end": "1412710"
  },
  {
    "text": "for us and we've been building the libraries with performance in mind so you do so next G RPC libraries are built",
    "start": "1412710",
    "end": "1423000"
  },
  {
    "start": "1419000",
    "end": "1419000"
  },
  {
    "text": "from ground up as a plug-in framework so they are very",
    "start": "1423000",
    "end": "1428340"
  },
  {
    "text": "extensible customizable this is what we've learned that different people have",
    "start": "1428340",
    "end": "1433910"
  },
  {
    "text": "so we've had multiple but different frameworks have different policies they",
    "start": "1433910",
    "end": "1440370"
  },
  {
    "text": "want to enforce so they need to intercept during the RPC flow so we have",
    "start": "1440370",
    "end": "1445650"
  },
  {
    "text": "interceptors we have different transports so we built HTTP to transport but internally we have another bare",
    "start": "1445650",
    "end": "1452550"
  },
  {
    "text": "metal transport that we you are using building you can build it on top of",
    "start": "1452550",
    "end": "1459920"
  },
  {
    "text": "another file based mechanism if you need to or thanks acuity one benefit of jer",
    "start": "1459920",
    "end": "1468780"
  },
  {
    "text": "basis it can encapsulate all the authen security underneath so we internally use",
    "start": "1468780",
    "end": "1476040"
  },
  {
    "text": "Louis and Louis too and developers don't need to know we can upgrade the whole",
    "start": "1476040",
    "end": "1482430"
  },
  {
    "text": "Google just because they're using stubby from Louis 1/2 Louis to seamlessly not",
    "start": "1482430",
    "end": "1488100"
  },
  {
    "text": "every application didn't need to make a change that has been a big benefit and there is a plug in my cut mechanism so",
    "start": "1488100",
    "end": "1494940"
  },
  {
    "text": "we have mutual TLS an auth based authentication and you can bring your say Kerberos you use Kerberos you can",
    "start": "1494940",
    "end": "1501960"
  },
  {
    "text": "bring in your auth mechanism and plug it in yes you will have to do the work but all the abstractions are built into the",
    "start": "1501960",
    "end": "1508980"
  },
  {
    "text": "framework same for scratch tracing monitoring several integrations exist",
    "start": "1508980",
    "end": "1515750"
  },
  {
    "text": "Prometheus lipkin open sensors internally we use sensors which is the",
    "start": "1515750",
    "end": "1522020"
  },
  {
    "text": "equivalent of open sensors open tracing etcetera you can use whatever your plan",
    "start": "1522020",
    "end": "1527070"
  },
  {
    "text": "you've been using you don't have to change all of that infrastructure if you start using your PC all you have to do",
    "start": "1527070",
    "end": "1533250"
  },
  {
    "text": "is hook it up through the clean extraction same for service discovery and gr PC work with lots of supported",
    "start": "1533250",
    "end": "1541170"
  },
  {
    "text": "proxies envoy has been a great partner nginx recently added support for gr PC",
    "start": "1541170",
    "end": "1546330"
  },
  {
    "text": "so you can use all these load balancing proxies or whatever proxy you're using",
    "start": "1546330",
    "end": "1551610"
  },
  {
    "text": "you can use it with your gr PC applications it's easy to use as I demonstrated",
    "start": "1551610",
    "end": "1558850"
  },
  {
    "start": "1555000",
    "end": "1555000"
  },
  {
    "text": "through example hopefully it was clear that you think of your application logic and you build a distributed application",
    "start": "1558850",
    "end": "1564749"
  },
  {
    "text": "without spending a lot of time upfront on worrying about networking and",
    "start": "1564749",
    "end": "1571809"
  },
  {
    "text": "distributed systems but a few other things if you take ERP C libraries",
    "start": "1571809",
    "end": "1580659"
  },
  {
    "text": "they're super easy to install we have published packages across languages api's are idiomatic",
    "start": "1580659",
    "end": "1588129"
  },
  {
    "text": "there are several concepts like errors errors are we well standardized in G RPC",
    "start": "1588129",
    "end": "1594609"
  },
  {
    "text": "so and they are propagated so if you have a big graph of this you're talking through it's very important that that",
    "start": "1594609",
    "end": "1600940"
  },
  {
    "text": "error gets propagated to the client because otherwise they don't know what happened and so error propagation reconnecting",
    "start": "1600940",
    "end": "1608889"
  },
  {
    "text": "when there are any breakages of connections a cancellation propagation so there's another concept and the three",
    "start": "1608889",
    "end": "1615909"
  },
  {
    "text": "and yan will cover in future talks these but if you cancel RPC you need to cancel it across all the graph it's going to",
    "start": "1615909",
    "end": "1623109"
  },
  {
    "text": "traverse it's not just two points the way I was talking effectively when you have a complex scenario you would have a",
    "start": "1623109",
    "end": "1629529"
  },
  {
    "text": "complex graph through which were RPC will travel and then you want to cancel you want to propagate that cancellation",
    "start": "1629529",
    "end": "1635379"
  },
  {
    "text": "same thing for deadlines every in every distributed call should have a deadline",
    "start": "1635379",
    "end": "1641409"
  },
  {
    "text": "because you don't know what's going to happen and then if it's going to make subsequent calls that are PC is going to",
    "start": "1641409",
    "end": "1648549"
  },
  {
    "text": "create multiple a graph of our pieces you need to propagate that deadline with appropriate values and these are some",
    "start": "1648549",
    "end": "1655539"
  },
  {
    "text": "things which are when you start writing application get very complex and having all these facilities makes it super easy",
    "start": "1655539",
    "end": "1662799"
  },
  {
    "text": "to use and build applications using G RPC another",
    "start": "1662799",
    "end": "1670259"
  },
  {
    "text": "traditionally our pcs are thought as procedure calls or function calls but G",
    "start": "1670259",
    "end": "1676720"
  },
  {
    "text": "RPC extends it streaming is to streaming streaming is native to G RPC streaming",
    "start": "1676720",
    "end": "1683049"
  },
  {
    "text": "is native to HTTP to also and so what that allows you to do is all the other",
    "start": "1683049",
    "end": "1688960"
  },
  {
    "text": "cases you can frame your use case and use the type of RPC if you just want to send some data and",
    "start": "1688960",
    "end": "1695380"
  },
  {
    "text": "get some response back you use you Nerys if you are going to sing lots of messages created over time you you use",
    "start": "1695380",
    "end": "1703030"
  },
  {
    "text": "client streaming if you want to get a bunch of updates from somebody use server screaming and if you have a",
    "start": "1703030",
    "end": "1710620"
  },
  {
    "text": "complex or synchronous chat life application where two parties are going to send each other messages or",
    "start": "1710620",
    "end": "1715840"
  },
  {
    "text": "synchronously you use by Derek streaming our pcs having all those concepts means",
    "start": "1715840",
    "end": "1721000"
  },
  {
    "text": "that you don't have to have build it on top of your networking protocol just the",
    "start": "1721000",
    "end": "1727030"
  },
  {
    "text": "way I was showing you you write your proto ideal and you have a single RPC",
    "start": "1727030",
    "end": "1733120"
  },
  {
    "text": "that you can keep listening on or sending messages using it's open",
    "start": "1733120",
    "end": "1738760"
  },
  {
    "start": "1737000",
    "end": "1737000"
  },
  {
    "text": "standards compliant it's been developed on github it's been in CNC F for over a",
    "start": "1738760",
    "end": "1743890"
  },
  {
    "text": "year we welcome all the contributions we have RFC like process for discussing all",
    "start": "1743890",
    "end": "1751000"
  },
  {
    "text": "changes that come up because and it's a the wire protocol is Wells backed out",
    "start": "1751000",
    "end": "1758560"
  },
  {
    "text": "based on HTTP - it's a protocol defined on top of HTTP - published so having",
    "start": "1758560",
    "end": "1764320"
  },
  {
    "text": "that makes the very easy to debug or understand build tooling or you have",
    "start": "1764320",
    "end": "1770590"
  },
  {
    "text": "ecosystem extendable so when nginx added their support for G RPC they didn't have",
    "start": "1770590",
    "end": "1776020"
  },
  {
    "text": "to even talk to us because we had developed the spec really well and that",
    "start": "1776020",
    "end": "1781510"
  },
  {
    "text": "really matters when as the ecosystem grows and finally it's a production",
    "start": "1781510",
    "end": "1787630"
  },
  {
    "start": "1786000",
    "end": "1786000"
  },
  {
    "text": "ready set of libraries very tested we have large number of whenever for every",
    "start": "1787630",
    "end": "1794920"
  },
  {
    "text": "change we are running large number of tests see a continuous integration we've",
    "start": "1794920",
    "end": "1801010"
  },
  {
    "text": "been running for xing tests for almost eight to ten months now the auto phaser",
    "start": "1801010",
    "end": "1807370"
  },
  {
    "text": "developed at Google that has helped us find so many corner cases because in",
    "start": "1807370",
    "end": "1812790"
  },
  {
    "text": "communication i/o threading race conditions and those things are very",
    "start": "1812790",
    "end": "1818260"
  },
  {
    "text": "common all of those are taken care of for you by are busy libraries but for the same",
    "start": "1818260",
    "end": "1825530"
  },
  {
    "text": "reason we need to worry about those internally a lot because we need to know all the use case patterns by users and",
    "start": "1825530",
    "end": "1832760"
  },
  {
    "text": "we have a we've had a lot of success with the fuzzing test ourselves Jer PC",
    "start": "1832760",
    "end": "1839600"
  },
  {
    "text": "has production debugging support our hooks for production debugging support based on what you use recently we added",
    "start": "1839600",
    "end": "1847220"
  },
  {
    "text": "a feature called channel Z which allows you to see on a service how many channels are have been created to my",
    "start": "1847220",
    "end": "1853880"
  },
  {
    "text": "service what's the traffic on all of those which are active which are inactive and all kinds of things and it's been",
    "start": "1853880",
    "end": "1861170"
  },
  {
    "text": "used by in production by lots of companies outside Google and lot at Google and so you can use it so in a",
    "start": "1861170",
    "end": "1871190"
  },
  {
    "start": "1870000",
    "end": "1870000"
  },
  {
    "text": "nutshell I think I don't have to go over this I covered most of this so I'm going to open it up for question and answers",
    "start": "1871190",
    "end": "1878510"
  },
  {
    "text": "and I'm going to invite three my colleague here to join me for Q&A he'll be covering the deep dive tomorrow thank",
    "start": "1878510",
    "end": "1886520"
  },
  {
    "text": "you and just",
    "start": "1886520",
    "end": "1890260"
  },
  {
    "text": "I'll leave the all the information for you in case you need to contact or you",
    "start": "1893350",
    "end": "1898370"
  },
  {
    "text": "need contacting or I can repeat I think",
    "start": "1898370",
    "end": "1906169"
  },
  {
    "text": "the question was do you still use to be at Google migrates or have you been using G RPC we still use to be and we",
    "start": "1906169",
    "end": "1914090"
  },
  {
    "text": "use GRP see both at Google the migration is going to take us a if you think about it as I was saying there are I can't",
    "start": "1914090",
    "end": "1922640"
  },
  {
    "text": "give exact number but multiples of tens of thousands of active binaries being",
    "start": "1922640",
    "end": "1928970"
  },
  {
    "text": "built every day in Google moving all of these is going to take time so right now",
    "start": "1928970",
    "end": "1934279"
  },
  {
    "text": "we are in this hybrid scenario where where you're using stub ing RPC both internally at Google",
    "start": "1934279",
    "end": "1941230"
  },
  {
    "text": "okay",
    "start": "1941840",
    "end": "1944840"
  },
  {
    "text": "you mentioned before that architects should take the time to design their their API and let's assume then someone",
    "start": "1947660",
    "end": "1955400"
  },
  {
    "text": "evolved in the API didn't take the time and didn't do the homework properly are",
    "start": "1955400",
    "end": "1962270"
  },
  {
    "text": "there feature in the in the protocol spec to evolve the API like deprecated",
    "start": "1962270",
    "end": "1969770"
  },
  {
    "text": "certain things and things like that twelve yeah so I think there is a two-phase answer to it",
    "start": "1969770",
    "end": "1976520"
  },
  {
    "text": "one is a minor changes and evolving for minor changes and second is major",
    "start": "1976520",
    "end": "1983990"
  },
  {
    "text": "changes what you want is you want to have flexibility of doing minor changes",
    "start": "1983990",
    "end": "1990170"
  },
  {
    "text": "without really revamping completely the API otherwise your every six months",
    "start": "1990170",
    "end": "1995330"
  },
  {
    "text": "revamping the API and that's not fun thing for these minor changes there are lots of facilities in this as I was",
    "start": "1995330",
    "end": "2002830"
  },
  {
    "text": "showing all those tagged numbers in the protocol buffers if you follow a simple convention that you never want to reuse",
    "start": "2002830",
    "end": "2010240"
  },
  {
    "text": "a tag number you can stop sending you can have the field present in your proto don't remove",
    "start": "2010240",
    "end": "2018820"
  },
  {
    "text": "it just add on new features you don't have to populate it and as it works fine",
    "start": "2018820",
    "end": "2025360"
  },
  {
    "text": "for those type of changes you do need semantic versioning typically what we have found at Google is three to five",
    "start": "2025360",
    "end": "2032290"
  },
  {
    "text": "years is a good time for a well-designed system that's the time when you should",
    "start": "2032290",
    "end": "2037810"
  },
  {
    "text": "need a semantics major version depending on how much time you can spend up front",
    "start": "2037810",
    "end": "2043420"
  },
  {
    "text": "that your mileage may vary but you can enforce semantic versioning through",
    "start": "2043420",
    "end": "2048790"
  },
  {
    "text": "protobufs through your server saying that hey you know this is my proto for v1 and v2 and then you have a server",
    "start": "2048790",
    "end": "2055899"
  },
  {
    "text": "which you can have multiple servers or same server handling both services and proto's",
    "start": "2055900",
    "end": "2062230"
  },
  {
    "text": "yes my question is since G RPC requires a schema what is the recommended best",
    "start": "2062230",
    "end": "2069530"
  },
  {
    "text": "practice for public API is how do a provider of the service publish publishes the schema maybe the second",
    "start": "2069530",
    "end": "2076490"
  },
  {
    "text": "part of the question is how do you deal how it does a consumer of the API deal with the essentially unknown version of",
    "start": "2076490",
    "end": "2084320"
  },
  {
    "text": "the service and how do you debug you know serialization issues that results",
    "start": "2084320",
    "end": "2089450"
  },
  {
    "text": "from it so so to these things for designing the system we do require",
    "start": "2089450",
    "end": "2096530"
  },
  {
    "text": "schema the that schema is also useful for building documentation etc if you",
    "start": "2096530",
    "end": "2105950"
  },
  {
    "text": "wanted to build documentation and we have we use clergy RPC for our cloud product client libraries etc and we have",
    "start": "2105950",
    "end": "2113420"
  },
  {
    "text": "tools that generate documentation now I'll go into some minor details G RPC as",
    "start": "2113420",
    "end": "2119630"
  },
  {
    "text": "such if not used with protocol buffers is agnostic of schema so you can the",
    "start": "2119630",
    "end": "2125990"
  },
  {
    "text": "schema comes in when you use it in conjunction with protocol buffers to G",
    "start": "2125990",
    "end": "2133160"
  },
  {
    "text": "RPC also most of the languages have this feature of reflection so you can discover the service for methods if you",
    "start": "2133160",
    "end": "2143240"
  },
  {
    "text": "want it from a client if you didn't want to you use predefined stubs that are",
    "start": "2143240",
    "end": "2150859"
  },
  {
    "text": "created so if you thought about it there was a service class and server that GPC",
    "start": "2150859",
    "end": "2156320"
  },
  {
    "text": "created and the stubs created a typical way of using would be stubs and creating",
    "start": "2156320",
    "end": "2163550"
  },
  {
    "text": "documentation for your stubs you should put lots of dogs that's the best practice I would recommend but if",
    "start": "2163550",
    "end": "2169640"
  },
  {
    "text": "you don't want to use the stubs or if you are building a proxy like application etc G RPC has a facility of",
    "start": "2169640",
    "end": "2175970"
  },
  {
    "text": "reflecting so you can find out what services it opens up and proto also has",
    "start": "2175970",
    "end": "2181369"
  },
  {
    "text": "a reflection so you can find out what message types etc are there you don't get all the benefits but you get the",
    "start": "2181369",
    "end": "2187490"
  },
  {
    "text": "flexibility see all right thank you everybody",
    "start": "2187490",
    "end": "2195809"
  }
]