[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "all right we're gonna go get started here in just a second you hear me in the back up back there - sounds good all",
    "start": "30",
    "end": "6420"
  },
  {
    "text": "right okay let's get started so this talk is a deep dive on Brooke",
    "start": "6420",
    "end": "14190"
  },
  {
    "text": "and my name is Jared watts I'm one of the founders and a senior maintainer on the rook project and I'm also a founding",
    "start": "14190",
    "end": "21390"
  },
  {
    "text": "engineer at a Seattle based startup called upbound and we are hiring said",
    "start": "21390",
    "end": "26760"
  },
  {
    "text": "that last talk to see I think a number of you just came from the last talk so",
    "start": "26760",
    "end": "32040"
  },
  {
    "start": "27000",
    "end": "27000"
  },
  {
    "text": "you might be as just as flustered as I am where I just spoke downstairs somewhere and then the escalator is in",
    "start": "32040",
    "end": "38160"
  },
  {
    "text": "this place - like you only have choices of going only up on one and only down on other ones and they always have seemed",
    "start": "38160",
    "end": "43320"
  },
  {
    "text": "that the woman where I want to go in a direction it's on the other side of the room so I was like Ari this is the direction the room is in but the",
    "start": "43320",
    "end": "48539"
  },
  {
    "text": "escalators back that way what we're all here and that's good sorry so let's talk",
    "start": "48539",
    "end": "53699"
  },
  {
    "text": "about what rook is you know do we're not gonna spend much time on that because you all probably at the intro session",
    "start": "53699",
    "end": "58739"
  },
  {
    "text": "yesterday but let's do some level setting so rook is a cloud native storage Orchestrator and what that means",
    "start": "58739",
    "end": "65128"
  },
  {
    "text": "that we've extended kubernetes with new custom types and custom controllers in order to add a lot of software",
    "start": "65129",
    "end": "72000"
  },
  {
    "text": "automation around operational tasks that a human would normally do to manage",
    "start": "72000",
    "end": "77460"
  },
  {
    "text": "storage systems so for instance there's a number of tasks on the screen they're about you know bootstrapping configuring",
    "start": "77460",
    "end": "84720"
  },
  {
    "text": "deploying managing failover all these sort of things these operational tasks that require have traditionally required",
    "start": "84720",
    "end": "91680"
  },
  {
    "text": "a human operator to perform them we can use software we can automate those tasks with software and be able to make our",
    "start": "91680",
    "end": "99600"
  },
  {
    "text": "lives a little bit easier so in addition to being a storage Orchestrator or a control plane for data services it's",
    "start": "99600",
    "end": "107729"
  },
  {
    "text": "also a framework for making the task of integrating new storage systems into",
    "start": "107729",
    "end": "113700"
  },
  {
    "text": "kubernetes environments much easier we'll talk more about that in a second so it's also an open source project and",
    "start": "113700",
    "end": "120270"
  },
  {
    "text": "it's hosted by the cloud native computing foundation we first donated it to the TNCs back in January of 2018 and",
    "start": "120270",
    "end": "126450"
  },
  {
    "text": "then we were graduated to the incubation level in September of last year so let's",
    "start": "126450",
    "end": "132660"
  },
  {
    "start": "132000",
    "end": "132000"
  },
  {
    "text": "talk a little bit more about that framework I was talking about so you know rook is more than just a collection",
    "start": "132660",
    "end": "137970"
  },
  {
    "text": "of operators and custom resource definitions it's also this framework that you know allows storage providers",
    "start": "137970",
    "end": "144450"
  },
  {
    "text": "an easier job of integrating their storage system into cloud native environments such as kubernetes it",
    "start": "144450",
    "end": "151349"
  },
  {
    "text": "provides a couple of different features to make that easier one of them is like what we call storage resource normalization and that means that",
    "start": "151349",
    "end": "157920"
  },
  {
    "text": "there's a common set a common set of specs and configuration and logic around",
    "start": "157920",
    "end": "164129"
  },
  {
    "text": "what does it mean to declare a storage fabric you know lots of different storage systems need to be able to use a",
    "start": "164129",
    "end": "172769"
  },
  {
    "text": "certain set of raw disks or persistent volumes or folders on host machines",
    "start": "172769",
    "end": "178739"
  },
  {
    "text": "whatever it may be but do you having a single common way to declare that the",
    "start": "178739",
    "end": "184050"
  },
  {
    "text": "storage fabric for the underlying storage system and bring them into the cluster you know there's the the rook",
    "start": "184050",
    "end": "189239"
  },
  {
    "text": "operators have the whole little framework around events and listening for CR DS and Reconciliation loops in",
    "start": "189239",
    "end": "197580"
  },
  {
    "text": "order to watch for new events related to storage and take action upon them and then we have a like a big testing and",
    "start": "197580",
    "end": "205170"
  },
  {
    "text": "integration testing environment that launches lots of different kubernetes clusters across different versions of kubernetes and perform testing and",
    "start": "205170",
    "end": "212310"
  },
  {
    "text": "integration amongst those to make sure that storage is working so this whole set of framework and specs and policy",
    "start": "212310",
    "end": "218610"
  },
  {
    "text": "and testing etc can be used by different storage providers to make their job easier so we have right now Steph is the",
    "start": "218610",
    "end": "225090"
  },
  {
    "text": "first one that we started with we started the Brook project with only SEF and so it is the most mature it's the",
    "start": "225090",
    "end": "230790"
  },
  {
    "text": "most stable it has the most contributors we've also since making this rook framework we've added new storage types",
    "start": "230790",
    "end": "237180"
  },
  {
    "text": "as well as cockroach DB min IO NFS Cassandra edge FS and there's more on the way so today we're gonna talk about",
    "start": "237180",
    "end": "244769"
  },
  {
    "start": "244000",
    "end": "244000"
  },
  {
    "text": "some of the newer operators that I haven't yet had a much of a chance until today to talk about so I'm kind of",
    "start": "244769",
    "end": "250260"
  },
  {
    "text": "excited about that I also wanted to call out the the Brooke project we released",
    "start": "250260",
    "end": "255330"
  },
  {
    "text": "1.0 just a few weeks ago and as part of that you know there's a lot of features",
    "start": "255330",
    "end": "260549"
  },
  {
    "text": "and code and whatnot they got included in that release but my favorite things is actually the",
    "start": "260549",
    "end": "266680"
  },
  {
    "text": "artwork so all these cool little like night designs and stuff that we have in the slides do a designer named Chris did",
    "start": "266680",
    "end": "274090"
  },
  {
    "text": "all those for us and I think he did an awesome job with the artwork and the stickers and t-shirts we had we're gone within I think like 20 minutes or",
    "start": "274090",
    "end": "280690"
  },
  {
    "text": "something at that so either people like the artwork or we bought way too few",
    "start": "280690",
    "end": "285910"
  },
  {
    "text": "stickers but one of the one of those is probably true all right so let's talk about the Apache Cassandra operator so",
    "start": "285910",
    "end": "293350"
  },
  {
    "start": "290000",
    "end": "290000"
  },
  {
    "text": "Cassandra is also an open-source project but it's a distributed no sequel database and so what I really like about",
    "start": "293350",
    "end": "300400"
  },
  {
    "text": "Cassandra is that it can handle a large amount of data you can throw a whole",
    "start": "300400",
    "end": "306010"
  },
  {
    "text": "bunch of data at it and because it scales across a whole bunch of cheap",
    "start": "306010",
    "end": "311620"
  },
  {
    "text": "commodity hardware you can just continue throwing cheap hardware at it instead of vertically scaling with expensive",
    "start": "311620",
    "end": "317800"
  },
  {
    "text": "machines you can horizontally scale with a bunch of you know less expensive machines and then you get high",
    "start": "317800",
    "end": "323530"
  },
  {
    "text": "availability you get the entire you know super large data sets and no single point of failure for that no sequel",
    "start": "323530",
    "end": "329890"
  },
  {
    "text": "database to to die on that say so Cassandra's a complicated system most",
    "start": "329890",
    "end": "335530"
  },
  {
    "text": "distributed storage systems are complicated that's F that's complicated that's what we started with Seth but",
    "start": "335530",
    "end": "341580"
  },
  {
    "text": "Cassandra is not really that much less complicated I would say so I think that's a great candidate for building an",
    "start": "341580",
    "end": "347950"
  },
  {
    "text": "operator around it to be able to bring Cassandra into our kubernetes clusters and have operational expertise in",
    "start": "347950",
    "end": "354910"
  },
  {
    "text": "automation to manage it for us so I definitely want to call out that the the",
    "start": "354910",
    "end": "360610"
  },
  {
    "text": "rooks Apache Cassandra operator was designed and implemented by a guy named",
    "start": "360610",
    "end": "366070"
  },
  {
    "text": "Yanni's Jana cicadas as part of his graduate thesis so I think that he did an awesome",
    "start": "366070",
    "end": "372100"
  },
  {
    "text": "job with it and you know he actually went and presented and defended his thesis about the Kassandra operator that",
    "start": "372100",
    "end": "377410"
  },
  {
    "text": "he wrote I didn't do anything nearly that cool when I was in school so I think that Yanis is uh that was really",
    "start": "377410",
    "end": "383110"
  },
  {
    "text": "cool for him to do that he's a great is a very valued member of the rook community now and he was sponsored by a",
    "start": "383110",
    "end": "388330"
  },
  {
    "text": "company called our Aikido that has a booth here in the trade show floor trade show floor and Yanis actually works",
    "start": "388330",
    "end": "394060"
  },
  {
    "text": "there now we got to show you in the room they might not be but he did a great job",
    "start": "394060",
    "end": "399400"
  },
  {
    "text": "all right so so Cassandra we could the first question we want to ask is do we",
    "start": "399400",
    "end": "404770"
  },
  {
    "start": "400000",
    "end": "400000"
  },
  {
    "text": "need an operator we could maybe just try to throw some stateful sets at it and see if that can manage Sandra for us",
    "start": "404770",
    "end": "411460"
  },
  {
    "text": "appropriately but there's a couple of different downsides to that one is that",
    "start": "411460",
    "end": "416610"
  },
  {
    "text": "the stateful set doesn't really give us a hierarchical topology model that we",
    "start": "416610",
    "end": "423010"
  },
  {
    "text": "can use to define a complicated Cassandra cluster but the staple set just kind of confined you to one rack",
    "start": "423010",
    "end": "428710"
  },
  {
    "text": "and you can't do this different hierarchy and multiple racks and expand out the cluster that way another thing",
    "start": "428710",
    "end": "434169"
  },
  {
    "text": "is that scaling down a Cassandra cluster you're safely removing one of the nodes is a process that you don't want to take",
    "start": "434169",
    "end": "442389"
  },
  {
    "text": "lightly you need to first do Commission the node and then you've got to stream all the data off of it to get it safely copied",
    "start": "442389",
    "end": "448900"
  },
  {
    "text": "around the cluster and then you let the member leave so that's not really a great facility in stateful sets to let",
    "start": "448900",
    "end": "454600"
  },
  {
    "text": "you do complicated operations like that in which you want to maintain the integrity of your cluster and then",
    "start": "454600",
    "end": "460030"
  },
  {
    "text": "there's other issues too with seeds and multi zone deployments backups restores the general extensibility of staple sets",
    "start": "460030",
    "end": "467710"
  },
  {
    "text": "just as a part of its design so I think that makes a good case for Cassandra to",
    "start": "467710",
    "end": "473289"
  },
  {
    "text": "get its own operator which is why Yanis did that work so let's take a quick look",
    "start": "473289",
    "end": "479229"
  },
  {
    "text": "at this diagram here about the architecture or the the setup here of",
    "start": "479229",
    "end": "484539"
  },
  {
    "text": "the Cassandra operator so just like any of the other rook operators it's sitting there in one of those reconciliation",
    "start": "484539",
    "end": "490870"
  },
  {
    "text": "loops where it first observes the the state of the cluster in the state of the",
    "start": "490870",
    "end": "497169"
  },
  {
    "text": "the desired state that the user has specified they want the Cassandra to look like than it does an analysis step",
    "start": "497169",
    "end": "503199"
  },
  {
    "text": "where it compares what the user wants Cassandra to look like versus what's actually in the cluster and then it acts",
    "start": "503199",
    "end": "509380"
  },
  {
    "text": "to bring reality bring the actual state of the cluster in line with the users desired state for their Cassandra so",
    "start": "509380",
    "end": "517419"
  },
  {
    "text": "let's think about how we model it the set of concepts and resources in",
    "start": "517419",
    "end": "522610"
  },
  {
    "text": "Cassandra how do we model those to kubernetes primitives that the operator the Cassandra operator can act",
    "start": "522610",
    "end": "529030"
  },
  {
    "text": "the pond so let's start at the bottom let's start at just the individual",
    "start": "529030",
    "end": "535000"
  },
  {
    "text": "members of the Cassandra cluster we can model those with pods each one each member in the cluster can be mapped at a",
    "start": "535000",
    "end": "540910"
  },
  {
    "text": "single pod in our in our kubernetes then we go up from a single member to an",
    "start": "540910",
    "end": "546490"
  },
  {
    "text": "entire rack of members and we can model that with the stateful set and so we're gonna kind of keep expanding out here as",
    "start": "546490",
    "end": "553420"
  },
  {
    "text": "as we're moving along and then if we move up to the data center we can do that as a collection of stateful sets",
    "start": "553420",
    "end": "559180"
  },
  {
    "text": "mini stateful sets working together to represent the racks and members that are part of a data center and then finally",
    "start": "559180",
    "end": "565630"
  },
  {
    "text": "at the top an entire cluster can be modeled with a custom resource definition a CRD that represents what it",
    "start": "565630",
    "end": "572590"
  },
  {
    "text": "means to be a fully fledged Cassandra cluster and you you could tell that I",
    "start": "572590",
    "end": "578620"
  },
  {
    "text": "didn't do this slide because it has animations this is Yanis is slide minor pretty pretty broke looking compared to",
    "start": "578620",
    "end": "584620"
  },
  {
    "text": "his Oh back to when a Jared slides okay no animations so the Cassandra operator it's got a lot of neat functionality",
    "start": "584620",
    "end": "591340"
  },
  {
    "start": "585000",
    "end": "585000"
  },
  {
    "text": "that that Yanis coded into it so the first one obviously is cluster creation",
    "start": "591340",
    "end": "596830"
  },
  {
    "text": "and bootstrapping starting with a plain vanilla kubernetes cluster no resources",
    "start": "596830",
    "end": "601870"
  },
  {
    "text": "no Cassandra the operator will take the steps to identify the storage resources",
    "start": "601870",
    "end": "606970"
  },
  {
    "text": "that could be included in the cluster be able to bring up members upon each one of them have them start talking to each",
    "start": "606970",
    "end": "613870"
  },
  {
    "text": "other and form a cluster and then once you have a cluster running it can do both scale up and scale down where you",
    "start": "613870",
    "end": "621060"
  },
  {
    "text": "you know you add more resources like a new node to the cluster or a new storage device and you'll be able to grow that",
    "start": "621060",
    "end": "628210"
  },
  {
    "text": "cluster scale it up with more members and basically that horizontal scaling we were talking about for Cassandra the",
    "start": "628210",
    "end": "634480"
  },
  {
    "text": "operator could do that for us automatically and we also talked about scale down too and how important it is",
    "start": "634480",
    "end": "639700"
  },
  {
    "text": "to do that safely we have to decommission the member stream it's data and then allow the member to leave the",
    "start": "639700",
    "end": "644920"
  },
  {
    "text": "operator does all this for us in software automation another feature that I actually think that this one sitting",
    "start": "644920",
    "end": "651790"
  },
  {
    "text": "in a pull request and it's not part of master yet so I don't want to mislead you here that one is work that's should",
    "start": "651790",
    "end": "658060"
  },
  {
    "text": "be merged into master soon but basically when a note and tired goes down we have the the Cassandra",
    "start": "658060",
    "end": "663480"
  },
  {
    "text": "operator we'll be able to detect that and then take steps to bring up on the new node or a new node the members to",
    "start": "663480",
    "end": "670829"
  },
  {
    "text": "replace them and rebalance the cluster and make sure that everything is happy so being able to handle these feel over",
    "start": "670829",
    "end": "675899"
  },
  {
    "text": "scenarios where you don't have to get a human involved is really useful and that really starts talking about or showing",
    "start": "675899",
    "end": "681750"
  },
  {
    "text": "demonstrating the power of operators here and why we built a Cassandra operator inside of rook alright now",
    "start": "681750",
    "end": "689459"
  },
  {
    "text": "let's talk about edge of s so these slides may be familiar to people that were at the the last globally",
    "start": "689459",
    "end": "695430"
  },
  {
    "text": "distributed global scalability talk that I just did on rook but edge FS is another storage system or",
    "start": "695430",
    "end": "702029"
  },
  {
    "text": "a data plane that rook provides orchestration services for and so edge",
    "start": "702029",
    "end": "707040"
  },
  {
    "text": "FS is it's got a really neat architecture so from the ground up edge FS is natively designed to be globally",
    "start": "707040",
    "end": "714269"
  },
  {
    "text": "distributed and globally scaled and so the way it does that is that it works on",
    "start": "714269",
    "end": "719370"
  },
  {
    "text": "a series of immutable blocks similar to how git works and so when I say git I don't necessarily in blocks for that I",
    "start": "719370",
    "end": "725579"
  },
  {
    "text": "don't mean block chain a chain of blocks but I mean that blocks of data you know that make up files etc are modeled and",
    "start": "725579",
    "end": "732750"
  },
  {
    "text": "they are immutable such that if you change a block and a file system or in a file that that that block gets a whole",
    "start": "732750",
    "end": "740459"
  },
  {
    "text": "totally new identity for it it makes it globally unique it's versioned etc and",
    "start": "740459",
    "end": "747000"
  },
  {
    "text": "so that starts allowing the edge of s storage system to always have their",
    "start": "747000",
    "end": "752130"
  },
  {
    "text": "caches at each one of the globally distributed sites to be to be in a consistent state it allows global fault",
    "start": "752130",
    "end": "758519"
  },
  {
    "text": "tolerance and global reliability and scalability as well so for the terminology of edge of s they're called",
    "start": "758519",
    "end": "765510"
  },
  {
    "text": "segments like when you have a edge of s cluster here in Asia and an edge of s cluster in Europe each one of those is",
    "start": "765510",
    "end": "771240"
  },
  {
    "text": "the segments and it's able to stitch those together into a single transparent",
    "start": "771240",
    "end": "776459"
  },
  {
    "text": "geo namespace via what they call is GW which is an intersect McDade so they",
    "start": "776459",
    "end": "781589"
  },
  {
    "text": "have these gateways that are connecting and linking all of the different edge FS clusters that rook provides orchestration services for so I think",
    "start": "781589",
    "end": "790019"
  },
  {
    "start": "789000",
    "end": "789000"
  },
  {
    "text": "this is a really cool feature of edge FS and the edge FS operator is that you can configure it to be in a",
    "start": "790019",
    "end": "796540"
  },
  {
    "text": "metadata only mode and what that means is that say you have one site in Asia and then you want to also have another",
    "start": "796540",
    "end": "804579"
  },
  {
    "text": "site of data in let's say Europe so what you can do is that you can stream only",
    "start": "804579",
    "end": "811480"
  },
  {
    "text": "the metadata of the files across the two sites so I'm talking about what the file",
    "start": "811480",
    "end": "816639"
  },
  {
    "text": "names are the file structure hierarchy like the file system tree the sizes of files the modification time stamps etc",
    "start": "816639",
    "end": "825069"
  },
  {
    "text": "so you can stream all that across and so if you think about it metadata for files is like kilobyte size right and then the",
    "start": "825069",
    "end": "832389"
  },
  {
    "text": "data itself is you know gigabytes or terabytes so what this allows you to do is this allows you to almost immediately",
    "start": "832389",
    "end": "839259"
  },
  {
    "text": "be able on a different site to start using the file system in a useful manner because you know what files are there",
    "start": "839259",
    "end": "845019"
  },
  {
    "text": "you know their time stamps you know the whole hierarchy of them you can start a client on another site can start",
    "start": "845019",
    "end": "851079"
  },
  {
    "text": "fetching a reading and writing files and the data is not even there yet when the client wants to use one of those files",
    "start": "851079",
    "end": "857589"
  },
  {
    "text": "the data will be lazily populated or fetched on demand so start filling in",
    "start": "857589",
    "end": "862990"
  },
  {
    "text": "that site so it's not just you don't have to wait for file a file B if I'll see and then finally file D you",
    "start": "862990",
    "end": "868509"
  },
  {
    "text": "immediately know that it's got files a through D and you can ask for file D and then that's the one that'll start",
    "start": "868509",
    "end": "874029"
  },
  {
    "text": "streaming and using up bandwidth immediately so it gets you the files that you need quicker IGFs also does the",
    "start": "874029",
    "end": "882100"
  },
  {
    "start": "880000",
    "end": "880000"
  },
  {
    "text": "global deduplication so since each block has its own unique identity and when you modify the block it gets a whole brand",
    "start": "882100",
    "end": "888639"
  },
  {
    "text": "new identity we can do things like a deduplication if we've got multiple copies of the exact same data chunk",
    "start": "888639",
    "end": "895089"
  },
  {
    "text": "we're only gonna store that one time or store it as many times as we need to for the redundancy that we want but",
    "start": "895089",
    "end": "900730"
  },
  {
    "text": "basically if you've got you know 3000 copies of the same block you don't have to duplicate it and we saw that storage",
    "start": "900730",
    "end": "906490"
  },
  {
    "text": "space for 3,000 of them you can make it much more constrained down to just the number that you need to maintain",
    "start": "906490",
    "end": "911699"
  },
  {
    "text": "availability and then another cool thing that edge FS does inside a book is that",
    "start": "911699",
    "end": "918420"
  },
  {
    "text": "it's got built-in disaster recovery so if you lose some data on one edge FS",
    "start": "918420",
    "end": "924189"
  },
  {
    "text": "site or one edge FS cluster then you can be a to recover that or fetch it from another",
    "start": "924189",
    "end": "930020"
  },
  {
    "text": "cluster another segment completely transparently to the to the client or to the user so that when they do a fetch or",
    "start": "930020",
    "end": "937880"
  },
  {
    "text": "sorry a read for a data that's not actually there locally you lost it the hard drive is gone whatever it may be it",
    "start": "937880",
    "end": "943610"
  },
  {
    "text": "can fetch it from one of the other globally distributed sites and there will be a little bit of loss in in throughput necessarily but you'll won't",
    "start": "943610",
    "end": "950870"
  },
  {
    "text": "get an error on the client you'll get that data back and then your local cache then gets repopulated with that data and",
    "start": "950870",
    "end": "957440"
  },
  {
    "text": "to recover automatically from the the data loss that we had all right so those",
    "start": "957440",
    "end": "965210"
  },
  {
    "start": "962000",
    "end": "962000"
  },
  {
    "text": "are the two new operators in Brooke or two of the newer ones at GFS has been",
    "start": "965210",
    "end": "971630"
  },
  {
    "text": "declared beta now with the Brooke 1.0 so edgy fest is maturing it's got a good",
    "start": "971630",
    "end": "977690"
  },
  {
    "text": "set of contributors working on it and really happy with the progress for a GFS in Cassandra if we could get more",
    "start": "977690",
    "end": "985190"
  },
  {
    "text": "contributors on that or get more Jana sazon it then that would be awesome as well we could continue to grow the",
    "start": "985190",
    "end": "990290"
  },
  {
    "text": "Cassandra support as well but it's a whole lot of really good support in the Alpha alpha version of Cassandra's",
    "start": "990290",
    "end": "997130"
  },
  {
    "text": "operator okay so software in general runs in many different environments right kubernetes",
    "start": "997130",
    "end": "1004300"
  },
  {
    "text": "itself runs great pretty much anywhere you can you know it's it's ubiquitous now right it runs in all the major cloud providers",
    "start": "1004300",
    "end": "1010540"
  },
  {
    "text": "you can run it on bare metal you can run it on you know on-premises things like that kubernetes is everywhere and that's why there's like 12,000 people here in",
    "start": "1010540",
    "end": "1017080"
  },
  {
    "text": "Barcelona or basically right rook is I think Brooke really shines the best in",
    "start": "1017080",
    "end": "1022180"
  },
  {
    "text": "on-premises scenario so for instance if you're running on a cluster you don't have access to EBS or at a Google",
    "start": "1022180",
    "end": "1028329"
  },
  {
    "text": "persistent disk right you don't have any of those nice cloud provider services and so with the bare metal you have",
    "start": "1028330",
    "end": "1034420"
  },
  {
    "text": "there you can use rook to orchestrate you know various sets of data services like",
    "start": "1034420",
    "end": "1040920"
  },
  {
    "text": "Cassandra or SEF or edge FS to give you highly reliable highly available durable",
    "start": "1040920",
    "end": "1047410"
  },
  {
    "text": "storage etc services in your cluster so Brooke is great for on-premises I think",
    "start": "1047410",
    "end": "1052600"
  },
  {
    "text": "though that the cloud providers they are they're managed services that they run are great in the cloud",
    "start": "1052600",
    "end": "1058030"
  },
  {
    "text": "they have like a full team of engineers behind them like with an SLA etc so the manda services that cloud",
    "start": "1058030",
    "end": "1063549"
  },
  {
    "text": "providers write those are good too so we've got kubernetes everywhere we've got rookies great on-premises we've got cloud provider services are",
    "start": "1063549",
    "end": "1070210"
  },
  {
    "text": "great in the cloud but can't we have both can we have all that together why do we have to settle for just one so",
    "start": "1070210",
    "end": "1076479"
  },
  {
    "text": "maybe we could manage our infrastructure our platform services our resources our",
    "start": "1076479",
    "end": "1083429"
  },
  {
    "text": "applications maybe we could manage those all from kubernetes and from a single",
    "start": "1083429",
    "end": "1088450"
  },
  {
    "text": "place and I say cute control but what I really mean is the kubernetes api such that you know if it's in the",
    "start": "1088450",
    "end": "1094389"
  },
  {
    "text": "criminalities api and integrated that way you can use any of the tools in the ecosystem or libraries or frameworks",
    "start": "1094389",
    "end": "1100629"
  },
  {
    "text": "that or whatever to start managing all of these services you know queue control is obviously one of them but you know",
    "start": "1100629",
    "end": "1106749"
  },
  {
    "text": "the client go or the rest api or web dashboard if it's in the kubernetes api",
    "start": "1106749",
    "end": "1112299"
  },
  {
    "text": "it's exposed you know in a uniform way across all of our surfaces there",
    "start": "1112299",
    "end": "1117989"
  },
  {
    "text": "additionally we could start defining some portable abstractions for some of our storage needs that go beyond",
    "start": "1117989",
    "end": "1124179"
  },
  {
    "text": "blocking objects or sorry block and also containers as well so let's talk about",
    "start": "1124179",
    "end": "1130479"
  },
  {
    "start": "1130000",
    "end": "1130000"
  },
  {
    "text": "portability so portability is important I think because if we're running in multiple environments or multiple clouds",
    "start": "1130479",
    "end": "1136479"
  },
  {
    "text": "etc we want to be able to choose which one of those clouds are services that we're running in right we want to take",
    "start": "1136479",
    "end": "1142149"
  },
  {
    "text": "our data wherever kubernetes goes and so I think that kubernetes did a really",
    "start": "1142149",
    "end": "1147460"
  },
  {
    "text": "good job at two different abstractions the pod abstraction and the volume abstraction so pods run containers and",
    "start": "1147460",
    "end": "1155349"
  },
  {
    "text": "that allows us to run our applications basically anywhere kubernetes runs and then volumes volumes provide us with if",
    "start": "1155349",
    "end": "1162249"
  },
  {
    "text": "your pod needs persistent data and you all it needs is a file system or a block device then volume is the great",
    "start": "1162249",
    "end": "1169479"
  },
  {
    "text": "abstraction that kubernetes made that the your pod doesn't have to know where that data is coming from it could be EBS",
    "start": "1169479",
    "end": "1176320"
  },
  {
    "text": "it could be an azure disk it could be Google persistent disk it you're kind of Ceph RBD it doesn't matter the pod",
    "start": "1176320",
    "end": "1182469"
  },
  {
    "text": "doesn't have to know and the pod doesn't have to change either to use that volume right so those are great abstractions",
    "start": "1182469",
    "end": "1188889"
  },
  {
    "text": "pods and volumes but applications are more than just pods and volumes right",
    "start": "1188889",
    "end": "1193899"
  },
  {
    "text": "there's also databases buckets caches message queues you know AI ml pipelines all sorts of stuff right",
    "start": "1193899",
    "end": "1200220"
  },
  {
    "text": "and so that's why I we're also gonna talk about and start showing you here some integration with rook as in this a",
    "start": "1200220",
    "end": "1207430"
  },
  {
    "text": "new open source project called cross plain that we open sourced in right before cube con Seattle so about five",
    "start": "1207430",
    "end": "1214180"
  },
  {
    "text": "months ago so let's let's take this idea a little bit further here make it a little bit more concrete so everyone's",
    "start": "1214180",
    "end": "1220780"
  },
  {
    "start": "1216000",
    "end": "1216000"
  },
  {
    "text": "familiar with storage classes and persistent volume claims inside of kubernetes right so a you know those",
    "start": "1220780",
    "end": "1228010"
  },
  {
    "text": "concepts there we can take those from just from volumes and to apply them to the other types of storage so generalize",
    "start": "1228010",
    "end": "1234370"
  },
  {
    "text": "a resource class similar to a storage class can be thought of as a blueprint",
    "start": "1234370",
    "end": "1239710"
  },
  {
    "text": "that would be created by the administrator and then the administrator they know all the environment details",
    "start": "1239710",
    "end": "1244960"
  },
  {
    "text": "they can set the policy you know they own these clusters so they can define these blueprints for how we might want",
    "start": "1244960",
    "end": "1251170"
  },
  {
    "text": "to create an entire class of different types of storage your buckets and databases etc right for example a fast",
    "start": "1251170",
    "end": "1258040"
  },
  {
    "text": "class a standard class a cheap class as well and then very similar to persistent",
    "start": "1258040",
    "end": "1264160"
  },
  {
    "text": "volume claims we could do resource claims general resource claims so",
    "start": "1264160",
    "end": "1269290"
  },
  {
    "text": "instead of just volumes we could do claims for all these other types of resources that users can make to say I",
    "start": "1269290",
    "end": "1275380"
  },
  {
    "text": "just generally need a Postgres database please give me one of those and we can the application doesn't have to know",
    "start": "1275380",
    "end": "1281800"
  },
  {
    "text": "where it's coming from just like an application or a pod doesn't have to know where its volume is coming from a pod shouldn't necessarily have to know",
    "start": "1281800",
    "end": "1288190"
  },
  {
    "text": "where its database is coming from and so through these classes and claims just like storage classes and persistent",
    "start": "1288190",
    "end": "1293530"
  },
  {
    "text": "volume claims we can start doing that on demand not a design time or compile time",
    "start": "1293530",
    "end": "1299260"
  },
  {
    "text": "but it on demand at deployment time your applications could get those resources",
    "start": "1299260",
    "end": "1304510"
  },
  {
    "text": "that they need fulfilled and now this is what I think really does enable portability across the different cloud",
    "start": "1304510",
    "end": "1310840"
  },
  {
    "text": "environments and on-premises gives us the power of choice and this whole manager of right rolling at once and run",
    "start": "1310840",
    "end": "1316390"
  },
  {
    "text": "anywhere can really start becoming true I think all right so that cross plane project I was talking about you know a",
    "start": "1316390",
    "end": "1322780"
  },
  {
    "start": "1319000",
    "end": "1319000"
  },
  {
    "text": "multi cloud control plane to be able to you know extend kubernetes with the",
    "start": "1322780",
    "end": "1329800"
  },
  {
    "text": "ability to manage multiple clusters multiple clouds deploy your platform services your databases etc to any one",
    "start": "1329800",
    "end": "1338800"
  },
  {
    "text": "of the cloud providers let's talk about what it looks like to integrate rook with crossplane and start doing new",
    "start": "1338800",
    "end": "1345610"
  },
  {
    "text": "interesting scenarios right so crossplane has some new functionality where you can extend it with out of tree",
    "start": "1345610",
    "end": "1352660"
  },
  {
    "text": "functionality so you know there's the main repo for crossplane and you know everything gets compiled in there and",
    "start": "1352660",
    "end": "1358180"
  },
  {
    "text": "launches a container etc but we can also from the rook project we can compile and",
    "start": "1358180",
    "end": "1363730"
  },
  {
    "text": "build a functionality for crossplane and then an extend install the crossplane",
    "start": "1363730",
    "end": "1369160"
  },
  {
    "text": "multi-cloud control plane that's spanning all of these cloud providers with new functionality such as rook and",
    "start": "1369160",
    "end": "1376390"
  },
  {
    "text": "then that will give us the ability which we'll see here of how to dynamically provision all these new types of storage",
    "start": "1376390",
    "end": "1382950"
  },
  {
    "text": "and the key here is since it's we're using rook to do this is that we'll be able to do this on premises as well",
    "start": "1382950",
    "end": "1388900"
  },
  {
    "text": "because it's one thing to light up a database in or a block volume or whatever in a cloud provider but it's",
    "start": "1388900",
    "end": "1395980"
  },
  {
    "text": "another thing entirely to be able to do that on bare metal right alright so what we're looking at here is just some yam",
    "start": "1395980",
    "end": "1401740"
  },
  {
    "text": "bolts saying it's an extension request you please take the cross plane multi-cloud control plane and extend it",
    "start": "1401740",
    "end": "1407590"
  },
  {
    "text": "with rooks cockroach operator so we are going to look at some of the details",
    "start": "1407590",
    "end": "1413590"
  },
  {
    "start": "1412000",
    "end": "1412000"
  },
  {
    "text": "about that so cockroach DB there's you know the brook has an operator for cockroach we're gonna look at the three steps of a",
    "start": "1413590",
    "end": "1421060"
  },
  {
    "text": "traditional operator the observe the analyze and the act step but for this is",
    "start": "1421060",
    "end": "1426340"
  },
  {
    "text": "for dynamic provisioning of cockroach which is implements the Postgres",
    "start": "1426340",
    "end": "1432090"
  },
  {
    "text": "protocol on the wire so here's some code this is a deep dive so we're getting into a little bit of go lane code here",
    "start": "1432090",
    "end": "1438100"
  },
  {
    "text": "not surface level introductory stuff but basically what I'm getting across in this slide here is that this step here",
    "start": "1438100",
    "end": "1444850"
  },
  {
    "text": "is the observed step of an operator so the important part is this line here where we are setting up a custom",
    "start": "1444850",
    "end": "1452110"
  },
  {
    "text": "controller for cockroach DB to watch for events on a general Postgres claim so",
    "start": "1452110",
    "end": "1460120"
  },
  {
    "text": "when says I want Postgres cockroach is gonna be watching here Brooks cockroach will be watching and ready for that",
    "start": "1460120",
    "end": "1466150"
  },
  {
    "text": "so the analyze step in this reconciliation loop is we see that",
    "start": "1466150",
    "end": "1471320"
  },
  {
    "start": "1467000",
    "end": "1467000"
  },
  {
    "text": "there's a new request for Postgres inside of our local cluster here and we're going to check and see",
    "start": "1471320",
    "end": "1477140"
  },
  {
    "text": "are we being deleted and handled that with the deletion function do we have a",
    "start": "1477140",
    "end": "1482630"
  },
  {
    "text": "resource a cockroach resource already created if we don't we're gonna go ahead and provision it and after all that's",
    "start": "1482630",
    "end": "1488510"
  },
  {
    "text": "done we'll bind the two together the Postgres claim and the cockroach resource and here's the final act step",
    "start": "1488510",
    "end": "1496850"
  },
  {
    "text": "the observe analyze act act is when we actually provision and create the cockroach instance that will fulfill the",
    "start": "1496850",
    "end": "1503450"
  },
  {
    "text": "request for Postgres so we're saying here we're creating a cockroach DB cluster object and we're calling create",
    "start": "1503450",
    "end": "1510080"
  },
  {
    "text": "on the community's API to kick in the machinery of the regular cockroach operator this is the cockroach operator",
    "start": "1510080",
    "end": "1516050"
  },
  {
    "text": "part the provisions dynamically provisioned storage and in the cockroach operator will kick in and bring up a",
    "start": "1516050",
    "end": "1521270"
  },
  {
    "text": "whole cockroach cluster so let's actually look at this thing let's let's let's see it in action all right and I",
    "start": "1521270",
    "end": "1529840"
  },
  {
    "text": "doing two talks in a row I hope I don't confuse things so I'm going to go back",
    "start": "1529840",
    "end": "1535100"
  },
  {
    "text": "to this copy paste this is not for you all this is for me to copy and paste and",
    "start": "1535100",
    "end": "1540350"
  },
  {
    "text": "so what are we looking at here we are looking at the crossplane multi-cloud control plane and what we",
    "start": "1540350",
    "end": "1546110"
  },
  {
    "text": "see here is where the main crossplane pod is running we can point it at any of the cloud providers but we can also",
    "start": "1546110",
    "end": "1551420"
  },
  {
    "text": "point it locally to the on-premises bare-metal cluster and bear with me here when I say bare-metal what I really mean",
    "start": "1551420",
    "end": "1557000"
  },
  {
    "text": "is my macbook but the concept is the same of on-premises no cloud provider",
    "start": "1557000",
    "end": "1562130"
  },
  {
    "text": "stuff involved here at all the second pod we have here is the extension manager pod for crossplane so this is",
    "start": "1562130",
    "end": "1568550"
  },
  {
    "text": "how we can build new functionality or integrate rook into this multi cloud control plane and open up new scenarios",
    "start": "1568550",
    "end": "1574820"
  },
  {
    "text": "with this extension manager here all right so I'm going to do two commands",
    "start": "1574820",
    "end": "1581480"
  },
  {
    "text": "here I'm going to create a namespace and I'm going to create a cockroach",
    "start": "1581480",
    "end": "1587090"
  },
  {
    "text": "extension so let's look at what that cockroach extension looks like this should be familiar because it was on a previous slide if I'm asking crossplane",
    "start": "1587090",
    "end": "1594469"
  },
  {
    "text": "requesting to extend it with rook cockroach functionality so this is how",
    "start": "1594469",
    "end": "1600749"
  },
  {
    "text": "we're gonna teach the multi-cloud control plane a new rook cockroach trick so we applied that and so now what we",
    "start": "1600749",
    "end": "1607559"
  },
  {
    "text": "should see is we should be able to check on our extension request and the rook cockroach DB package has been downloaded",
    "start": "1607559",
    "end": "1615599"
  },
  {
    "text": "and applied to the cross plane cluster so it's ready to go and then we can get",
    "start": "1615599",
    "end": "1621359"
  },
  {
    "text": "more details to about the the specific cross plane extension that it's ready",
    "start": "1621359",
    "end": "1626849"
  },
  {
    "text": "it's ready to go and service cockroach requests so another thing to look at",
    "start": "1626849",
    "end": "1632820"
  },
  {
    "text": "here is that when we taught this multi clock control plane what cockroach and rook really is it also taught it some",
    "start": "1632820",
    "end": "1639839"
  },
  {
    "text": "new CR DS so now there's a new CR d4 rooks cockroach as well this didn't exist before but now it does because we",
    "start": "1639839",
    "end": "1646019"
  },
  {
    "text": "extended the control plane with that and then now in addition to that oops in",
    "start": "1646019",
    "end": "1653339"
  },
  {
    "text": "addition to that CR d4 cockroach we also created a cockroach operator so now",
    "start": "1653339",
    "end": "1658499"
  },
  {
    "text": "we've got everything running up and running in the cloud in the multi clock control plane here to start doing",
    "start": "1658499",
    "end": "1664019"
  },
  {
    "text": "cockroach stuff alright so let's do cockroach stuff and oh boy I hope this",
    "start": "1664019",
    "end": "1672239"
  },
  {
    "text": "is the right repo compared to the the last demo so if I and actually when I was practicing I accidentally ran a cube",
    "start": "1672239",
    "end": "1679499"
  },
  {
    "text": "cotrona helm commands on the wrong cluster so I hope that did not mess up any of these clusters here so we're",
    "start": "1679499",
    "end": "1685889"
  },
  {
    "text": "gonna see what happens okay so let's do first remember we're talking about storage",
    "start": "1685889",
    "end": "1691019"
  },
  {
    "text": "classes and persistent volume claims right so resource classes and resource",
    "start": "1691019",
    "end": "1697619"
  },
  {
    "text": "claims here this should be very familiar to what a storage class looks like right now but basically we're declaring a",
    "start": "1697619",
    "end": "1703859"
  },
  {
    "text": "Postgres resource class and this is specifically for a cockroach right so",
    "start": "1703859",
    "end": "1708929"
  },
  {
    "text": "when somebody asks for Postgres we're going to give them the cockroach local cockroach rook implementation with you",
    "start": "1708929",
    "end": "1714899"
  },
  {
    "text": "know various parameters here of just a gig because it's tiny like three node three replicas count you know how much",
    "start": "1714899",
    "end": "1721409"
  },
  {
    "text": "cash to use etc but basically that's the blueprints when somebody asks for Postgres that will be able to fulfill",
    "start": "1721409",
    "end": "1727860"
  },
  {
    "text": "that with and here's the final step to kick off this whole thing from end to end so what I'm gonna do is I'm also",
    "start": "1727860",
    "end": "1735270"
  },
  {
    "text": "going to create the resource claim so here we go so the resource claim is a general",
    "start": "1735270",
    "end": "1742830"
  },
  {
    "text": "Postgres instance and I'm saying please give me Postgres and use this resource",
    "start": "1742830",
    "end": "1748380"
  },
  {
    "text": "class here please the the Postgres resource class to fulfill that the administrator has created a Postgres you",
    "start": "1748380",
    "end": "1756090"
  },
  {
    "text": "know resource class that we just saw and now that we're going to ask for Postgres and we're going to get cockroach in",
    "start": "1756090",
    "end": "1761910"
  },
  {
    "text": "response locally on our bare metal cluster so let's look at it did that",
    "start": "1761910",
    "end": "1768000"
  },
  {
    "text": "work what happened cool it does look like it worked so we asked for a",
    "start": "1768000",
    "end": "1774059"
  },
  {
    "text": "Postgres we got cockroach we have a three node cockroaches cluster orchestrated by rook up and running and",
    "start": "1774059",
    "end": "1779429"
  },
  {
    "text": "ready to do stuff and notice this was we did this old in a generic way the entire way we could have asked for post crests",
    "start": "1779429",
    "end": "1785549"
  },
  {
    "text": "and we could have gotten cloud sequel if that's what our administrator had made the choice of if their resource class said use cloud sequel instead that's",
    "start": "1785549",
    "end": "1792150"
  },
  {
    "text": "what we would have gotten so for instance here this pote we asked for Postgres and it's bound now it's bound",
    "start": "1792150",
    "end": "1799230"
  },
  {
    "text": "to",
    "start": "1799230",
    "end": "1801770"
  },
  {
    "text": "good way",
    "start": "1808640",
    "end": "1811330"
  },
  {
    "text": "it is the Postgres instance is bound to the cockroach instance just like dynamic",
    "start": "1815110",
    "end": "1821649"
  },
  {
    "text": "provisioning for volumes all right so let's use the thing the cockroach should",
    "start": "1821649",
    "end": "1827590"
  },
  {
    "text": "be up and running so I'm going to exact to it and we got a beautiful cockroach interface here where I'm going to say",
    "start": "1827590",
    "end": "1833140"
  },
  {
    "text": "show me the databases and this shows that we have a system database up in",
    "start": "1833140",
    "end": "1838299"
  },
  {
    "text": "provision the three node cockroach cluster is up running talking to each other we've got data we've got Postgres",
    "start": "1838299",
    "end": "1843309"
  },
  {
    "text": "we've got we've got cockroach so now let's start feeding data into it so I'm",
    "start": "1843309",
    "end": "1849970"
  },
  {
    "text": "gonna start up a load generator program here that's targeted at cockroach and so this is gonna spin up a pod that's just",
    "start": "1849970",
    "end": "1855820"
  },
  {
    "text": "going to keep writing random data to the cockroach cluster and if we look at the logs at it it's you know doing write",
    "start": "1855820",
    "end": "1861250"
  },
  {
    "text": "operations it's doing benchmarking it's testing the the speed and throughput and",
    "start": "1861250",
    "end": "1867250"
  },
  {
    "text": "if we actually do a database query we can look at that data that it's throwing in the cockroach right now - so",
    "start": "1867250",
    "end": "1872679"
  },
  {
    "text": "basically we see here that to throw it all together and wrap it up here we asked for cockroach re we asked for",
    "start": "1872679",
    "end": "1879250"
  },
  {
    "text": "Postgres in a general way through a resource class that was the administrator specified that that should",
    "start": "1879250",
    "end": "1884559"
  },
  {
    "text": "be cockroach with rook on a local cluster and with the crossplane multi-cloud control plane we get all",
    "start": "1884559",
    "end": "1890620"
  },
  {
    "text": "this put together so that our general resource needs are now portable and we can do databases caches object storage",
    "start": "1890620",
    "end": "1898120"
  },
  {
    "text": "you know message queues all sorts of stuff in general ways just like we can do with volumes all right so let's",
    "start": "1898120",
    "end": "1907720"
  },
  {
    "text": "switch back to the slides here and quick summary we covered that rook is a cloud",
    "start": "1907720",
    "end": "1913720"
  },
  {
    "text": "native storage Orchestrator you should know that by now and then we have a framework here that it has enabled new operators like the cassandra operator in",
    "start": "1913720",
    "end": "1920679"
  },
  {
    "text": "the edge FS operator storage services inside your kubernetes cluster orchestrated by rook and we also learned",
    "start": "1920679",
    "end": "1926649"
  },
  {
    "text": "how we can extend cross planes multi-cloud control plane with new functionality to deploy new types of",
    "start": "1926649",
    "end": "1931840"
  },
  {
    "text": "resources in addition to volumes that we already have already in the cloud and on-premises rook and cross the planner",
    "start": "1931840",
    "end": "1939010"
  },
  {
    "text": "both open source projects we have 150 or plus contributors on rook we want more always we're growing the",
    "start": "1939010",
    "end": "1944860"
  },
  {
    "text": "community I'm really happy to see all of you guys here and probably a lot of you were at the intro yesterday active on slack Twitter etc",
    "start": "1944860",
    "end": "1951990"
  },
  {
    "text": "please join us and we have a couple more sessions at cube con today they're all",
    "start": "1951990",
    "end": "1957850"
  },
  {
    "start": "1953000",
    "end": "1953000"
  },
  {
    "text": "today there's a meet the maintainer session that starts in two minutes oh damn excuse me so we will be down at",
    "start": "1957850",
    "end": "1965050"
  },
  {
    "text": "the CN CF answer bar to be answering questions down on the trade show floor and then we also have a couple more",
    "start": "1965050",
    "end": "1970720"
  },
  {
    "text": "talks later on today and I think that would be thank you very much I appreciate everyone so I think yeah if",
    "start": "1970720",
    "end": "1981850"
  },
  {
    "text": "anybody does have questions thing we have two minutes or so as I've stated before we go down to the CNC and Safari yes I think I saw your head first",
    "start": "1981850",
    "end": "1988740"
  },
  {
    "text": "yeah so the question they think that boy yeah the question was that there's actually enough code out there to take",
    "start": "1993960",
    "end": "1999700"
  },
  {
    "text": "that data base CRT and start using it on premises and on all across all the clouds so what I showed here all the",
    "start": "1999700",
    "end": "2006390"
  },
  {
    "text": "cloud ones are available like those are your part of the cross plane project so you can do you know my sequel and post crest etc across Google Amazon and Azure",
    "start": "2006390",
    "end": "2013910"
  },
  {
    "text": "in a general way but this local rook on cluster sorry in cluster on-premises",
    "start": "2013910",
    "end": "2019050"
  },
  {
    "text": "functionality it's still in a prototype thing I was decoding some of it last night actually so that should be coming soon yes",
    "start": "2019050",
    "end": "2027110"
  },
  {
    "text": "oh that's yeah that's so that's a great question so the question was since Brook",
    "start": "2033580",
    "end": "2039010"
  },
  {
    "text": "supports more than just Seth now it supports multiple types of storage systems and operators if will be able to",
    "start": "2039010",
    "end": "2044590"
  },
  {
    "text": "enable out of tree operators etc for rook as well and that that's a good question because we're starting actually",
    "start": "2044590",
    "end": "2050649"
  },
  {
    "text": "to feel the pains now of having everything in tree and having to manage releases for multiple storage systems",
    "start": "2050650",
    "end": "2057669"
  },
  {
    "text": "and get everyone coordinated and get the code out you know all in the same day and all that stuff and tying people",
    "start": "2057670",
    "end": "2063159"
  },
  {
    "text": "storage systems tying their release dates to rook release dates we're feeling the pain of that right now and",
    "start": "2063160",
    "end": "2068500"
  },
  {
    "text": "kubernetes did the same thing with all their entries storage plugins and they move to an out of tree model as well so",
    "start": "2068500",
    "end": "2074409"
  },
  {
    "text": "I think we're kind of moving towards there yet we haven't done it yet but we're starting to feel that pain and that's gonna be something that we need",
    "start": "2074410",
    "end": "2080230"
  },
  {
    "text": "to discuss as a community and find out the right solution that works for everyone and so we have community meetings every Tuesday every other",
    "start": "2080230",
    "end": "2086800"
  },
  {
    "text": "Tuesday and that's a great topic that we'd be able to talk about there so oh yeah yeah so yeah there is local PBS",
    "start": "2086800",
    "end": "2095740"
  },
  {
    "text": "support so in the rook framework you can specify you know what storage you want to to be involved in the cluster and so",
    "start": "2095740",
    "end": "2103330"
  },
  {
    "text": "you can there's all different types of ways to pick and choose that class that's storage and one of them is persistent volumes or local PBS as well",
    "start": "2103330",
    "end": "2109960"
  },
  {
    "text": "so you can include those as part of your storage system and you have a question - before we have to go to the CNC F bar",
    "start": "2109960",
    "end": "2117750"
  },
  {
    "text": "yeah so the question is how do these operators work with cloud and local and ephemeral nvme storage so you know we",
    "start": "2122450",
    "end": "2130410"
  },
  {
    "text": "wrote a blog post maybe a year or so ago about running rook in an Amazon with a a",
    "start": "2130410",
    "end": "2137820"
  },
  {
    "text": "situ instance using instant storage which is locally attached SSD drives and the performance benefits you get from it",
    "start": "2137820",
    "end": "2144210"
  },
  {
    "text": "the cost benefits there was actually a pretty compelling story where you got really good throughput you got really",
    "start": "2144210",
    "end": "2149670"
  },
  {
    "text": "really good cost as well and it was you know compared very nicely to what you",
    "start": "2149670",
    "end": "2154740"
  },
  {
    "text": "get an EBS so you know you could the rook is an Orchestrator in all these different storage systems as data planes",
    "start": "2154740",
    "end": "2161630"
  },
  {
    "text": "they can use anything they want and we're specifi have that common code to specify and pick up and absorb all these",
    "start": "2161630",
    "end": "2168060"
  },
  {
    "text": "volumes and devices etc into your cluster and so that means to in the cloud you can do the same thing",
    "start": "2168060",
    "end": "2173340"
  },
  {
    "text": "whatever's on them on your cloud instance you can suck that up into the cluster tank and include that the question where it gets kind of",
    "start": "2173340",
    "end": "2178740"
  },
  {
    "text": "interesting though is that in the cloud for use the EBS you know you've got a whole team of engineers in Amazon that's",
    "start": "2178740",
    "end": "2184200"
  },
  {
    "text": "managing it there's an SLA maybe EBS isn't the best example because I think everyone has their own abs horror story",
    "start": "2184200",
    "end": "2191369"
  },
  {
    "text": "but you know then general you've got a whole team managing it when you're running your own rook cluster inside the",
    "start": "2191369",
    "end": "2197070"
  },
  {
    "text": "cloud provider definitely you can do it and you get good results but still at the end of the day it's your responsibility you're managing that",
    "start": "2197070",
    "end": "2203310"
  },
  {
    "text": "cluster you have to be on point and on-call for making sure it's working so that's the trade-off cool thank you I get going down to the",
    "start": "2203310",
    "end": "2210330"
  },
  {
    "text": "CN CF answer bar now",
    "start": "2210330",
    "end": "2213290"
  }
]