[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "before we get to the meat of uh this",
    "start": "120",
    "end": "2159"
  },
  {
    "text": "presentation I want to kind of set the",
    "start": "2159",
    "end": "3800"
  },
  {
    "text": "scene a little bit um and uh kind of",
    "start": "3800",
    "end": "6520"
  },
  {
    "text": "frame where we are in Computing history",
    "start": "6520",
    "end": "9800"
  },
  {
    "text": "so let's go back a little bit to 1971",
    "start": "9800",
    "end": "13599"
  },
  {
    "start": "10000",
    "end": "148000"
  },
  {
    "text": "and Intel writes Computing history by",
    "start": "13599",
    "end": "16480"
  },
  {
    "text": "releasing the first commercially",
    "start": "16480",
    "end": "18199"
  },
  {
    "text": "produced U microprocessor the Intel",
    "start": "18199",
    "end": "21720"
  },
  {
    "text": "44 um and this was like I said pretty",
    "start": "21720",
    "end": "24439"
  },
  {
    "text": "significant because it was the first",
    "start": "24439",
    "end": "26039"
  },
  {
    "text": "commercially produced um",
    "start": "26039",
    "end": "28560"
  },
  {
    "text": "microprocessor and didn't stop there",
    "start": "28560",
    "end": "31160"
  },
  {
    "text": "they uh you know as we all know kept uh",
    "start": "31160",
    "end": "33559"
  },
  {
    "text": "producing more and more chips and just",
    "start": "33559",
    "end": "35640"
  },
  {
    "text": "in those 3 years between um the 4004 and",
    "start": "35640",
    "end": "40079"
  },
  {
    "text": "the 8080 they more than doubled the",
    "start": "40079",
    "end": "42559"
  },
  {
    "text": "number of transistors in um in these",
    "start": "42559",
    "end": "45480"
  },
  {
    "text": "chips um just a few years after that",
    "start": "45480",
    "end": "48559"
  },
  {
    "text": "again uh you know they produced one of",
    "start": "48559",
    "end": "50680"
  },
  {
    "text": "the most um Infamous um chips ever",
    "start": "50680",
    "end": "53680"
  },
  {
    "text": "produced the 86 with 29,000 transistors",
    "start": "53680",
    "end": "58000"
  },
  {
    "text": "um you probably already understand where",
    "start": "58000",
    "end": "59480"
  },
  {
    "text": "I'm going with with this this is",
    "start": "59480",
    "end": "61120"
  },
  {
    "text": "something that one of the Intel",
    "start": "61120",
    "end": "63239"
  },
  {
    "text": "co-founders Gordon Moore coined as U",
    "start": "63239",
    "end": "66360"
  },
  {
    "text": "Mo's law initially he said every every",
    "start": "66360",
    "end": "68840"
  },
  {
    "text": "year the number of transistors are going",
    "start": "68840",
    "end": "70720"
  },
  {
    "text": "to double eventually he kind of",
    "start": "70720",
    "end": "72360"
  },
  {
    "text": "retracted that statement and said okay",
    "start": "72360",
    "end": "73840"
  },
  {
    "text": "maybe only every two years but basically",
    "start": "73840",
    "end": "76640"
  },
  {
    "text": "throughout Computing history so far this",
    "start": "76640",
    "end": "79200"
  },
  {
    "text": "pretty much um held true um more or less",
    "start": "79200",
    "end": "82439"
  },
  {
    "text": "until now um last year Apple gave a",
    "start": "82439",
    "end": "85240"
  },
  {
    "text": "really cool keynote um when they were",
    "start": "85240",
    "end": "87360"
  },
  {
    "text": "releasing the M2 Chip where they using",
    "start": "87360",
    "end": "90439"
  },
  {
    "text": "this is kind of a marketing term the 5",
    "start": "90439",
    "end": "92320"
  },
  {
    "text": "nanometer uh technology nothing's",
    "start": "92320",
    "end": "94280"
  },
  {
    "text": "actually 5 nanometers in this stuff um",
    "start": "94280",
    "end": "97360"
  },
  {
    "text": "they're actually the but they made a",
    "start": "97360",
    "end": "99200"
  },
  {
    "text": "really interesting statement in this",
    "start": "99200",
    "end": "101399"
  },
  {
    "text": "keynote they said some of the components",
    "start": "101399",
    "end": "104000"
  },
  {
    "text": "in these chips are now 12 nanometers",
    "start": "104000",
    "end": "107200"
  },
  {
    "text": "wide um and the reason uh this is",
    "start": "107200",
    "end": "110479"
  },
  {
    "text": "important is uh we have known physical",
    "start": "110479",
    "end": "113520"
  },
  {
    "text": "limits of how small we think transistors",
    "start": "113520",
    "end": "116240"
  },
  {
    "text": "can get you know unless there's a",
    "start": "116240",
    "end": "117479"
  },
  {
    "text": "completely new breakthrough and we may",
    "start": "117479",
    "end": "120320"
  },
  {
    "text": "not be producing silicon chips at all",
    "start": "120320",
    "end": "122719"
  },
  {
    "text": "anymore and a single silicon chip a",
    "start": "122719",
    "end": "124799"
  },
  {
    "text": "single silicon atom is what we think is",
    "start": "124799",
    "end": "126920"
  },
  {
    "text": "the theoretical physical limits of how",
    "start": "126920",
    "end": "129599"
  },
  {
    "text": "small we can make a single transistor",
    "start": "129599",
    "end": "131920"
  },
  {
    "text": "and so you know going um after more law",
    "start": "131920",
    "end": "136239"
  },
  {
    "text": "assuming that we can actually still",
    "start": "136239",
    "end": "138280"
  },
  {
    "text": "economically uh produce chips that go",
    "start": "138280",
    "end": "140760"
  },
  {
    "text": "get smaller and smaller we're still",
    "start": "140760",
    "end": "142519"
  },
  {
    "text": "pretty close actually to you know the",
    "start": "142519",
    "end": "144840"
  },
  {
    "text": "physical limits um known known to us and",
    "start": "144840",
    "end": "149040"
  },
  {
    "start": "148000",
    "end": "340000"
  },
  {
    "text": "so uh that means you know at least the",
    "start": "149040",
    "end": "151080"
  },
  {
    "text": "way that we know Morse law it is",
    "start": "151080",
    "end": "153040"
  },
  {
    "text": "definitely ending however um my thesis",
    "start": "153040",
    "end": "156319"
  },
  {
    "text": "is basically um Long Live mors law",
    "start": "156319",
    "end": "160080"
  },
  {
    "text": "although not in the way you know that it",
    "start": "160080",
    "end": "162360"
  },
  {
    "text": "originally was uh stated and basically",
    "start": "162360",
    "end": "165959"
  },
  {
    "text": "the way I think uh Computing history is",
    "start": "165959",
    "end": "168200"
  },
  {
    "text": "going to continue from this point",
    "start": "168200",
    "end": "169959"
  },
  {
    "text": "onwards is in two ways we're going to",
    "start": "169959",
    "end": "172400"
  },
  {
    "text": "continue to build faster systems through",
    "start": "172400",
    "end": "175239"
  },
  {
    "text": "either building specialized hardware and",
    "start": "175239",
    "end": "177519"
  },
  {
    "text": "we're already seeing this in the AI",
    "start": "177519",
    "end": "179040"
  },
  {
    "text": "space there's a super interesting",
    "start": "179040",
    "end": "180319"
  },
  {
    "text": "company called Gro grq uh that are",
    "start": "180319",
    "end": "183280"
  },
  {
    "text": "producing specialized chips only to do",
    "start": "183280",
    "end": "186080"
  },
  {
    "text": "one very specific task which is",
    "start": "186080",
    "end": "187599"
  },
  {
    "text": "inference for example for the Llama",
    "start": "187599",
    "end": "190440"
  },
  {
    "text": "models and they're three times faster",
    "start": "190440",
    "end": "192040"
  },
  {
    "text": "than any anyone else using you know the",
    "start": "192040",
    "end": "193959"
  },
  {
    "text": "most high performance Nvidia chips at",
    "start": "193959",
    "end": "196360"
  },
  {
    "text": "the moment um and so that's something",
    "start": "196360",
    "end": "199440"
  },
  {
    "text": "that I I have no no expertise in so I",
    "start": "199440",
    "end": "202760"
  },
  {
    "text": "chose not to solve that problem and uh",
    "start": "202760",
    "end": "205599"
  },
  {
    "text": "the other thing that I think is going to",
    "start": "205599",
    "end": "206840"
  },
  {
    "text": "happen is that we'll actually use the",
    "start": "206840",
    "end": "208680"
  },
  {
    "text": "hardware that we have much more",
    "start": "208680",
    "end": "210319"
  },
  {
    "text": "efficiently and so this is basically uh",
    "start": "210319",
    "end": "213360"
  },
  {
    "text": "where I think we are in Computing",
    "start": "213360",
    "end": "215439"
  },
  {
    "text": "history and something that we need to",
    "start": "215439",
    "end": "217319"
  },
  {
    "text": "solve and the way that we can solve this",
    "start": "217319",
    "end": "219720"
  },
  {
    "text": "is through actually understanding where",
    "start": "219720",
    "end": "221920"
  },
  {
    "text": "our resources are being spent and",
    "start": "221920",
    "end": "223959"
  },
  {
    "text": "therefore we can do something about that",
    "start": "223959",
    "end": "226040"
  },
  {
    "text": "because up until now we kind of didn't",
    "start": "226040",
    "end": "227959"
  },
  {
    "text": "really have to care about how fast um",
    "start": "227959",
    "end": "230480"
  },
  {
    "text": "you know how much CPU resources are",
    "start": "230480",
    "end": "232760"
  },
  {
    "text": "being spent by our applications because",
    "start": "232760",
    "end": "235159"
  },
  {
    "text": "you know they were doubling in resources",
    "start": "235159",
    "end": "237439"
  },
  {
    "text": "every couple of years anyway so uh I'm",
    "start": "237439",
    "end": "240120"
  },
  {
    "text": "Frederick uh I've kind of dedicated the",
    "start": "240120",
    "end": "242280"
  },
  {
    "text": "last three years uh of my life to",
    "start": "242280",
    "end": "244120"
  },
  {
    "text": "solving this problem and probably the",
    "start": "244120",
    "end": "245840"
  },
  {
    "text": "foreseeable future of my life as well um",
    "start": "245840",
    "end": "248280"
  },
  {
    "text": "you may know me through my work um on",
    "start": "248280",
    "end": "249920"
  },
  {
    "text": "Prometheus I created the Prometheus",
    "start": "249920",
    "end": "251560"
  },
  {
    "text": "operator as well kind of a lot of things",
    "start": "251560",
    "end": "253840"
  },
  {
    "text": "that connected uh kubernetes and",
    "start": "253840",
    "end": "256079"
  },
  {
    "text": "Prometheus I worked on for a very long",
    "start": "256079",
    "end": "257880"
  },
  {
    "text": "time I was architect for all things",
    "start": "257880",
    "end": "259199"
  },
  {
    "text": "observability at rad uh for a while",
    "start": "259199",
    "end": "262280"
  },
  {
    "text": "everything databases distributed systems",
    "start": "262280",
    "end": "264840"
  },
  {
    "text": "um performance engineering is kind of my",
    "start": "264840",
    "end": "266960"
  },
  {
    "text": "thing and the reason why um we're here",
    "start": "266960",
    "end": "269240"
  },
  {
    "text": "today is because of this live stream",
    "start": "269240",
    "end": "271160"
  },
  {
    "text": "that we've been doing on a weekly basis",
    "start": "271160",
    "end": "274320"
  },
  {
    "text": "where we pick an open source uh project",
    "start": "274320",
    "end": "277360"
  },
  {
    "text": "probably we'll we'll see a lot of the um",
    "start": "277360",
    "end": "280600"
  },
  {
    "text": "projects that you know you're probably",
    "start": "280600",
    "end": "282039"
  },
  {
    "text": "using or that you've seen at this",
    "start": "282039",
    "end": "284080"
  },
  {
    "text": "conference already um and we try to run",
    "start": "284080",
    "end": "287280"
  },
  {
    "text": "them probably we already run them",
    "start": "287280",
    "end": "288880"
  },
  {
    "text": "ourselves in production if we don't we",
    "start": "288880",
    "end": "290800"
  },
  {
    "text": "try to find someone in the community who",
    "start": "290800",
    "end": "292520"
  },
  {
    "text": "does uh so that we can get some real um",
    "start": "292520",
    "end": "295919"
  },
  {
    "text": "you know representative profiling data",
    "start": "295919",
    "end": "298960"
  },
  {
    "text": "um from these from these projects uh to",
    "start": "298960",
    "end": "301919"
  },
  {
    "text": "analyze to improve and then ultimately",
    "start": "301919",
    "end": "304199"
  },
  {
    "text": "hopefully you know to merge those PO",
    "start": "304199",
    "end": "306360"
  },
  {
    "text": "requests and make um all infrastructure",
    "start": "306360",
    "end": "309680"
  },
  {
    "text": "in the world less use less uh CPU so",
    "start": "309680",
    "end": "312600"
  },
  {
    "text": "we've had a a bunch of really awesome",
    "start": "312600",
    "end": "314360"
  },
  {
    "text": "successes with this we uh kind of",
    "start": "314360",
    "end": "316479"
  },
  {
    "text": "reduced the Baseline of all cium",
    "start": "316479",
    "end": "318520"
  },
  {
    "text": "installs worldwide by 4% uh We've made",
    "start": "318520",
    "end": "321800"
  },
  {
    "text": "some of the software we write 99% faster",
    "start": "321800",
    "end": "325199"
  },
  {
    "text": "um we made container D installs",
    "start": "325199",
    "end": "327479"
  },
  {
    "text": "worldwide uh use less 4% less resources",
    "start": "327479",
    "end": "331360"
  },
  {
    "text": "um we made coul diff 10 times faster uh",
    "start": "331360",
    "end": "334440"
  },
  {
    "text": "so a bunch of um a bunch of really cool",
    "start": "334440",
    "end": "337160"
  },
  {
    "text": "wins that we've already gotten just in a",
    "start": "337160",
    "end": "338880"
  },
  {
    "text": "couple of um episodes and how did we do",
    "start": "338880",
    "end": "342319"
  },
  {
    "start": "340000",
    "end": "421000"
  },
  {
    "text": "this uh like I said um we do this using",
    "start": "342319",
    "end": "345440"
  },
  {
    "text": "profiling and just to make sure we pick",
    "start": "345440",
    "end": "347160"
  },
  {
    "text": "up everyone uh kind of from zero um",
    "start": "347160",
    "end": "350400"
  },
  {
    "text": "profiling basically the way profiling",
    "start": "350400",
    "end": "352479"
  },
  {
    "text": "works is that we x amount of times per",
    "start": "352479",
    "end": "354880"
  },
  {
    "text": "second we look at what is the current",
    "start": "354880",
    "end": "357080"
  },
  {
    "text": "function call stack right and using this",
    "start": "357080",
    "end": "360120"
  },
  {
    "text": "we if we see the same function call",
    "start": "360120",
    "end": "361840"
  },
  {
    "text": "stack multiple times we can build",
    "start": "361840",
    "end": "363440"
  },
  {
    "text": "statistics and essentially infer okay if",
    "start": "363440",
    "end": "366080"
  },
  {
    "text": "we're seeing the same thing multiple",
    "start": "366080",
    "end": "367880"
  },
  {
    "text": "times that statistically means we spend",
    "start": "367880",
    "end": "370319"
  },
  {
    "text": "more time processing this function and",
    "start": "370319",
    "end": "373240"
  },
  {
    "text": "the longer we do this the better you",
    "start": "373240",
    "end": "374800"
  },
  {
    "text": "know statistical significance we get the",
    "start": "374800",
    "end": "376720"
  },
  {
    "text": "more representative it becomes basically",
    "start": "376720",
    "end": "379360"
  },
  {
    "text": "we can then use that and do some really",
    "start": "379360",
    "end": "381520"
  },
  {
    "text": "interesting analysis so that we can",
    "start": "381520",
    "end": "383479"
  },
  {
    "text": "aggregate this and understand where is",
    "start": "383479",
    "end": "385479"
  },
  {
    "text": "all of this time being spent so a",
    "start": "385479",
    "end": "388520"
  },
  {
    "text": "typical let's Prof episode we've done",
    "start": "388520",
    "end": "391360"
  },
  {
    "text": "just about 20 of the of these so far uh",
    "start": "391360",
    "end": "394120"
  },
  {
    "text": "look something like this we find some",
    "start": "394120",
    "end": "396039"
  },
  {
    "text": "profiling data like I said either from",
    "start": "396039",
    "end": "397639"
  },
  {
    "text": "someone in the community like you um or",
    "start": "397639",
    "end": "401000"
  },
  {
    "text": "we run it ourselves already uh we then",
    "start": "401000",
    "end": "403639"
  },
  {
    "text": "use this profiling data uh to kind of",
    "start": "403639",
    "end": "406160"
  },
  {
    "text": "figure out what is the thing that we",
    "start": "406160",
    "end": "407840"
  },
  {
    "text": "want to optimize uh because we have you",
    "start": "407840",
    "end": "410440"
  },
  {
    "text": "know actual production use that this",
    "start": "410440",
    "end": "412880"
  },
  {
    "text": "profiling data is describing to us uh we",
    "start": "412880",
    "end": "415840"
  },
  {
    "text": "write a benchmark for this particular",
    "start": "415840",
    "end": "417840"
  },
  {
    "text": "function for example and then we try to",
    "start": "417840",
    "end": "419720"
  },
  {
    "text": "optimize it and most of the time we're",
    "start": "419720",
    "end": "422319"
  },
  {
    "start": "421000",
    "end": "526000"
  },
  {
    "text": "kind of successful with this but um",
    "start": "422319",
    "end": "425080"
  },
  {
    "text": "sometimes also not it's completely",
    "start": "425080",
    "end": "426400"
  },
  {
    "text": "unscripted by the way we only grab the",
    "start": "426400",
    "end": "429160"
  },
  {
    "text": "profiling data beforehand we don't try",
    "start": "429160",
    "end": "431280"
  },
  {
    "text": "out uh to optimize anything there have",
    "start": "431280",
    "end": "433360"
  },
  {
    "text": "been episodes where we were not",
    "start": "433360",
    "end": "434520"
  },
  {
    "text": "particularly successful but I've already",
    "start": "434520",
    "end": "436360"
  },
  {
    "text": "shown you um a bunch of examples where",
    "start": "436360",
    "end": "439080"
  },
  {
    "text": "we were very successful let me quickly",
    "start": "439080",
    "end": "441919"
  },
  {
    "text": "give you an example of what this might",
    "start": "441919",
    "end": "444720"
  },
  {
    "text": "look like I'll pull up um our demo",
    "start": "444720",
    "end": "448360"
  },
  {
    "text": "instance from uh the parka server here",
    "start": "448360",
    "end": "451520"
  },
  {
    "text": "this is an open source project that we",
    "start": "451520",
    "end": "453280"
  },
  {
    "text": "uh created at polar signals where we",
    "start": "453280",
    "end": "455440"
  },
  {
    "text": "kind of profile all of your production",
    "start": "455440",
    "end": "457560"
  },
  {
    "text": "infrastructure all the time and then",
    "start": "457560",
    "end": "460479"
  },
  {
    "text": "down here we can basically see where all",
    "start": "460479",
    "end": "462680"
  },
  {
    "text": "this CPU time is being spent and then we",
    "start": "462680",
    "end": "464520"
  },
  {
    "text": "can do stuff like uh you know we want to",
    "start": "464520",
    "end": "467039"
  },
  {
    "text": "look at all the",
    "start": "467039",
    "end": "469879"
  },
  {
    "text": "whoops profiling data for container DM",
    "start": "469879",
    "end": "473039"
  },
  {
    "text": "and then we can kind of dive into this",
    "start": "473039",
    "end": "475159"
  },
  {
    "text": "um and figure out what is the function",
    "start": "475159",
    "end": "476879"
  },
  {
    "text": "that we want to optimize like I said and",
    "start": "476879",
    "end": "478720"
  },
  {
    "text": "then WR we write a benchmark and try to",
    "start": "478720",
    "end": "480879"
  },
  {
    "text": "optimize that typically what we try to",
    "start": "480879",
    "end": "483720"
  },
  {
    "text": "do is we try to uh publish the Prof",
    "start": "483720",
    "end": "486680"
  },
  {
    "text": "profiling data like a day in advance or",
    "start": "486680",
    "end": "488479"
  },
  {
    "text": "something and publicize it on Twitter",
    "start": "488479",
    "end": "490400"
  },
  {
    "text": "and uh let uh the audience kind of",
    "start": "490400",
    "end": "492639"
  },
  {
    "text": "participate in this it's kind of a fun",
    "start": "492639",
    "end": "495039"
  },
  {
    "text": "format uh but yeah this is B basically",
    "start": "495039",
    "end": "497319"
  },
  {
    "text": "our starting point um and from there let",
    "start": "497319",
    "end": "500840"
  },
  {
    "text": "me restart it from",
    "start": "500840",
    "end": "503280"
  },
  {
    "text": "here um we then uh like I said create a",
    "start": "503280",
    "end": "506400"
  },
  {
    "text": "benchmark that may look like something",
    "start": "506400",
    "end": "508440"
  },
  {
    "text": "like this this is actually an a real",
    "start": "508440",
    "end": "510240"
  },
  {
    "text": "example of when we optimize container D",
    "start": "510240",
    "end": "512880"
  },
  {
    "text": "like I like I mentioned earlier we",
    "start": "512880",
    "end": "515159"
  },
  {
    "text": "create a benchmark we run it so that we",
    "start": "515159",
    "end": "517240"
  },
  {
    "text": "have a baseline you know where we're",
    "start": "517240",
    "end": "518640"
  },
  {
    "text": "starting so that we can then have a",
    "start": "518640",
    "end": "520518"
  },
  {
    "text": "quick feedback cycle uh to know whether",
    "start": "520519",
    "end": "523599"
  },
  {
    "text": "we're actually improving how much we're",
    "start": "523599",
    "end": "525120"
  },
  {
    "text": "improving and so on and then we come to",
    "start": "525120",
    "end": "528120"
  },
  {
    "start": "526000",
    "end": "709000"
  },
  {
    "text": "the actual",
    "start": "528120",
    "end": "530040"
  },
  {
    "text": "optimizations um and we've kind of",
    "start": "530040",
    "end": "532399"
  },
  {
    "text": "grouped all of the optimizations in a",
    "start": "532399",
    "end": "534640"
  },
  {
    "text": "couple of um categories the first one",
    "start": "534640",
    "end": "537920"
  },
  {
    "text": "that you're always going to want to make",
    "start": "537920",
    "end": "539040"
  },
  {
    "text": "sure is is that you're actually using",
    "start": "539040",
    "end": "540680"
  },
  {
    "text": "the correct approach the right data",
    "start": "540680",
    "end": "542240"
  },
  {
    "text": "structures the right right algorith",
    "start": "542240",
    "end": "544040"
  },
  {
    "text": "algorithms this is kind of the highest",
    "start": "544040",
    "end": "546000"
  },
  {
    "text": "level right you always want to make sure",
    "start": "546000",
    "end": "547560"
  },
  {
    "text": "this is where uh you start with this is",
    "start": "547560",
    "end": "549680"
  },
  {
    "text": "also typically where you get the biggest",
    "start": "549680",
    "end": "551519"
  },
  {
    "text": "wins um however um it doesn't hurt to",
    "start": "551519",
    "end": "555200"
  },
  {
    "text": "all always just have a look at the",
    "start": "555200",
    "end": "557240"
  },
  {
    "text": "profiling data across your entire",
    "start": "557240",
    "end": "558760"
  },
  {
    "text": "infrastructure because there's always",
    "start": "558760",
    "end": "560279"
  },
  {
    "text": "something that um you know we may not",
    "start": "560279",
    "end": "563720"
  },
  {
    "text": "anticipate um while we're writing the",
    "start": "563720",
    "end": "565920"
  },
  {
    "text": "code um of how the software is going to",
    "start": "565920",
    "end": "569519"
  },
  {
    "text": "behave and we've definitely seen a fair",
    "start": "569519",
    "end": "571160"
  },
  {
    "text": "share of allocations like memory",
    "start": "571160",
    "end": "573720"
  },
  {
    "text": "allocations that people didn't intend",
    "start": "573720",
    "end": "575600"
  },
  {
    "text": "for there to be there but you know",
    "start": "575600",
    "end": "578320"
  },
  {
    "text": "software writing software is hard um so",
    "start": "578320",
    "end": "580880"
  },
  {
    "text": "you definitely always want to then check",
    "start": "580880",
    "end": "582320"
  },
  {
    "text": "out um removing allocations inlining and",
    "start": "582320",
    "end": "586160"
  },
  {
    "text": "uh some eventually vectorizing your your",
    "start": "586160",
    "end": "588800"
  },
  {
    "text": "code but I'll go into each of these um",
    "start": "588800",
    "end": "591200"
  },
  {
    "text": "with examples so the first one we were",
    "start": "591200",
    "end": "593959"
  },
  {
    "text": "actually this is one of our uh earlier",
    "start": "593959",
    "end": "596920"
  },
  {
    "text": "episodes where we were optimizing the",
    "start": "596920",
    "end": "598720"
  },
  {
    "text": "kubernetes C CET um and we figured out",
    "start": "598720",
    "end": "601279"
  },
  {
    "text": "that one of the really like resource",
    "start": "601279",
    "end": "603200"
  },
  {
    "text": "intensive things that the kuet does is",
    "start": "603200",
    "end": "606079"
  },
  {
    "text": "it basically keeps checking uh what are",
    "start": "606079",
    "end": "608519"
  },
  {
    "text": "all the volumes that need to be mounted",
    "start": "608519",
    "end": "610640"
  },
  {
    "text": "right I guess this makes sense right we",
    "start": "610640",
    "end": "612360"
  },
  {
    "text": "have a bunch of uh kubernetes pods that",
    "start": "612360",
    "end": "614240"
  },
  {
    "text": "are running on our hosts and we it needs",
    "start": "614240",
    "end": "616440"
  },
  {
    "text": "to make sure that all the volumes that",
    "start": "616440",
    "end": "618200"
  },
  {
    "text": "these pods may be mounting um into you",
    "start": "618200",
    "end": "621120"
  },
  {
    "text": "know containers actually need to be um",
    "start": "621120",
    "end": "624320"
  },
  {
    "text": "available um and it turns out even",
    "start": "624320",
    "end": "627399"
  },
  {
    "text": "though you know there's probably not a",
    "start": "627399",
    "end": "629800"
  },
  {
    "text": "whole lot of um volumes on every node it",
    "start": "629800",
    "end": "633120"
  },
  {
    "text": "still uses uh data structure that is",
    "start": "633120",
    "end": "636240"
  },
  {
    "text": "meant to to store a lot of um a lot of",
    "start": "636240",
    "end": "639720"
  },
  {
    "text": "items and so there's actually a",
    "start": "639720",
    "end": "642639"
  },
  {
    "text": "possibility to optimize this because it",
    "start": "642639",
    "end": "645959"
  },
  {
    "text": "typically deals with relatively few",
    "start": "645959",
    "end": "648040"
  },
  {
    "text": "entries you know maybe in the tens of",
    "start": "648040",
    "end": "649839"
  },
  {
    "text": "thousands but not in the hundreds or",
    "start": "649839",
    "end": "651320"
  },
  {
    "text": "millions of entries um so this is",
    "start": "651320",
    "end": "653800"
  },
  {
    "text": "roughly what the code looks like but",
    "start": "653800",
    "end": "655360"
  },
  {
    "text": "it's not really all that important the",
    "start": "655360",
    "end": "657040"
  },
  {
    "text": "more important part is this is what the",
    "start": "657040",
    "end": "660320"
  },
  {
    "text": "data structure looks like um or",
    "start": "660320",
    "end": "663320"
  },
  {
    "text": "conceptually what um Maps look like in",
    "start": "663320",
    "end": "665480"
  },
  {
    "text": "go um you have kind of an array of",
    "start": "665480",
    "end": "667839"
  },
  {
    "text": "buckets and then you follow a linked",
    "start": "667839",
    "end": "670639"
  },
  {
    "text": "list or this more a generic example of",
    "start": "670639",
    "end": "673000"
  },
  {
    "text": "any hashmap however because basically",
    "start": "673000",
    "end": "676480"
  },
  {
    "text": "all the volumes are just um file system",
    "start": "676480",
    "end": "679480"
  },
  {
    "text": "paths right we can actually do way",
    "start": "679480",
    "end": "682079"
  },
  {
    "text": "better with data structures that are",
    "start": "682079",
    "end": "684680"
  },
  {
    "text": "optimized for prefixes right so these",
    "start": "684680",
    "end": "687120"
  },
  {
    "text": "are called trees TR i e um where the",
    "start": "687120",
    "end": "690240"
  },
  {
    "text": "tree essentially have has all of these",
    "start": "690240",
    "end": "691880"
  },
  {
    "text": "prefixes and it just walks the tree it's",
    "start": "691880",
    "end": "693920"
  },
  {
    "text": "way cheaper to walk this this tree than",
    "start": "693920",
    "end": "696480"
  },
  {
    "text": "to um iterate over a map and go and so",
    "start": "696480",
    "end": "699760"
  },
  {
    "text": "this actually resulted in a 10% Baseline",
    "start": "699760",
    "end": "702880"
  },
  {
    "text": "Improvement on the coulet this means",
    "start": "702880",
    "end": "705320"
  },
  {
    "text": "every CET in the world uses less 10%",
    "start": "705320",
    "end": "708240"
  },
  {
    "text": "less resources this means it uses less",
    "start": "708240",
    "end": "710680"
  },
  {
    "start": "709000",
    "end": "821000"
  },
  {
    "text": "energy you know there's more uh space on",
    "start": "710680",
    "end": "713079"
  },
  {
    "text": "our nodes for our actual workloads and",
    "start": "713079",
    "end": "715680"
  },
  {
    "text": "all of these things the next thing that",
    "start": "715680",
    "end": "718480"
  },
  {
    "text": "we keep seeing in over over and over and",
    "start": "718480",
    "end": "721000"
  },
  {
    "text": "over again in many episodes is uh memory",
    "start": "721000",
    "end": "724160"
  },
  {
    "text": "allocations or generically we can talk",
    "start": "724160",
    "end": "726440"
  },
  {
    "text": "talk about this as um Escape analysis",
    "start": "726440",
    "end": "728920"
  },
  {
    "text": "because basically what happens in a",
    "start": "728920",
    "end": "730639"
  },
  {
    "text": "garbage collected language like go the",
    "start": "730639",
    "end": "732760"
  },
  {
    "text": "compiler decides at compilation time",
    "start": "732760",
    "end": "734760"
  },
  {
    "text": "more or less where um memory is going to",
    "start": "734760",
    "end": "737399"
  },
  {
    "text": "be allocated can it be allocated on the",
    "start": "737399",
    "end": "739160"
  },
  {
    "text": "stack or do we have to kind of go into",
    "start": "739160",
    "end": "741519"
  },
  {
    "text": "main memory and um allocate on the Heap",
    "start": "741519",
    "end": "744839"
  },
  {
    "text": "and that is an expensive um operation so",
    "start": "744839",
    "end": "748560"
  },
  {
    "text": "to kind of prioritize that one of the",
    "start": "748560",
    "end": "750480"
  },
  {
    "text": "good things that you can do is to",
    "start": "750480",
    "end": "752079"
  },
  {
    "text": "pre-allocate all the memory that you're",
    "start": "752079",
    "end": "753480"
  },
  {
    "text": "going to need so that you don't need to",
    "start": "753480",
    "end": "754880"
  },
  {
    "text": "make all of these tiny allocations all",
    "start": "754880",
    "end": "756600"
  },
  {
    "text": "over the place that are all very",
    "start": "756600",
    "end": "757920"
  },
  {
    "text": "expensive you can kind of do one very",
    "start": "757920",
    "end": "760000"
  },
  {
    "text": "big allocation and therefore save um",
    "start": "760000",
    "end": "762959"
  },
  {
    "text": "doing all these very expensive small",
    "start": "762959",
    "end": "765040"
  },
  {
    "text": "allocations um I have uh another one",
    "start": "765040",
    "end": "767760"
  },
  {
    "text": "example of how this can be solved which",
    "start": "767760",
    "end": "769440"
  },
  {
    "text": "is just by reusing a um uh a piece of",
    "start": "769440",
    "end": "774959"
  },
  {
    "text": "memory that you just allocate once and",
    "start": "774959",
    "end": "776560"
  },
  {
    "text": "you keep reusing the same buffer this is",
    "start": "776560",
    "end": "778880"
  },
  {
    "text": "one way that uh that you can also or",
    "start": "778880",
    "end": "780800"
  },
  {
    "text": "another way that you can solve this um",
    "start": "780800",
    "end": "782959"
  },
  {
    "text": "what's kind of problematic about this is",
    "start": "782959",
    "end": "785160"
  },
  {
    "text": "if you're in a multi-threaded",
    "start": "785160",
    "end": "786639"
  },
  {
    "text": "environment um this is not threat safe",
    "start": "786639",
    "end": "789480"
  },
  {
    "text": "and so in that kind of case you would",
    "start": "789480",
    "end": "790839"
  },
  {
    "text": "want to use something like a buffer pool",
    "start": "790839",
    "end": "793760"
  },
  {
    "text": "where every time that you require a",
    "start": "793760",
    "end": "795360"
  },
  {
    "text": "buffer you take it out of the pool you",
    "start": "795360",
    "end": "797760"
  },
  {
    "text": "do your operation and then put it back",
    "start": "797760",
    "end": "799560"
  },
  {
    "text": "into into the pool but what this still",
    "start": "799560",
    "end": "801920"
  },
  {
    "text": "prevents is that you keep doing new",
    "start": "801920",
    "end": "803480"
  },
  {
    "text": "allocations every time um you need you",
    "start": "803480",
    "end": "807279"
  },
  {
    "text": "need a buffer and uh this is essentially",
    "start": "807279",
    "end": "810880"
  },
  {
    "text": "the optimization that we used for",
    "start": "810880",
    "end": "812800"
  },
  {
    "text": "container D again made all Container D",
    "start": "812800",
    "end": "815120"
  },
  {
    "text": "installs on the planet by about 4% um uh",
    "start": "815120",
    "end": "819480"
  },
  {
    "text": "you use 4% less CPU again more space for",
    "start": "819480",
    "end": "822880"
  },
  {
    "start": "821000",
    "end": "1027000"
  },
  {
    "text": "our actual applications on our nodes",
    "start": "822880",
    "end": "825120"
  },
  {
    "text": "that we're paying good money for to our",
    "start": "825120",
    "end": "827040"
  },
  {
    "text": "uh to the cloud providers um the next",
    "start": "827040",
    "end": "829639"
  },
  {
    "text": "one um is inlining this is actually a",
    "start": "829639",
    "end": "832440"
  },
  {
    "text": "compiler optimization where the compiler",
    "start": "832440",
    "end": "835040"
  },
  {
    "text": "decides okay actually it's not worth uh",
    "start": "835040",
    "end": "837240"
  },
  {
    "text": "doing an an entire function call to this",
    "start": "837240",
    "end": "839480"
  },
  {
    "text": "next function I'm just going to include",
    "start": "839480",
    "end": "841320"
  },
  {
    "text": "all the executable code in this function",
    "start": "841320",
    "end": "843360"
  },
  {
    "text": "that is um that it is calling uh that",
    "start": "843360",
    "end": "846920"
  },
  {
    "text": "yeah um and this is actually",
    "start": "846920",
    "end": "849800"
  },
  {
    "text": "surprisingly um effective of an",
    "start": "849800",
    "end": "853079"
  },
  {
    "text": "optimization um because we don't need to",
    "start": "853079",
    "end": "855560"
  },
  {
    "text": "do all of this uh work of setting up",
    "start": "855560",
    "end": "857839"
  },
  {
    "text": "this stack and returning back to uh you",
    "start": "857839",
    "end": "860279"
  },
  {
    "text": "know executing the code that we left off",
    "start": "860279",
    "end": "862160"
  },
  {
    "text": "from so in this case I um forced the",
    "start": "862160",
    "end": "865920"
  },
  {
    "text": "compiler not to inline the ad function",
    "start": "865920",
    "end": "868320"
  },
  {
    "text": "over here so what it does is you know it",
    "start": "868320",
    "end": "871120"
  },
  {
    "text": "does the setup of the stack over here it",
    "start": "871120",
    "end": "873600"
  },
  {
    "text": "then calls um the ad function the ad",
    "start": "873600",
    "end": "876160"
  },
  {
    "text": "function does its thing returns and you",
    "start": "876160",
    "end": "878759"
  },
  {
    "text": "know all this uh back and forth is super",
    "start": "878759",
    "end": "881680"
  },
  {
    "text": "super expensive and when the compiler",
    "start": "881680",
    "end": "884160"
  },
  {
    "text": "decides that it it inlines then we can",
    "start": "884160",
    "end": "886800"
  },
  {
    "text": "see over here all of this is just all",
    "start": "886800",
    "end": "889720"
  },
  {
    "text": "part of this main function so there was",
    "start": "889720",
    "end": "892519"
  },
  {
    "text": "no need to set up a stack there was no",
    "start": "892519",
    "end": "894120"
  },
  {
    "text": "need to return from the other function",
    "start": "894120",
    "end": "896360"
  },
  {
    "text": "um and if this all of this happens in a",
    "start": "896360",
    "end": "898079"
  },
  {
    "text": "hot Loop for example this can be very",
    "start": "898079",
    "end": "900199"
  },
  {
    "text": "very um effective of an",
    "start": "900199",
    "end": "902800"
  },
  {
    "text": "optimization um let me give you an",
    "start": "902800",
    "end": "904800"
  },
  {
    "text": "example um where this can be um and how",
    "start": "904800",
    "end": "907959"
  },
  {
    "text": "this can be super um effective so in in",
    "start": "907959",
    "end": "911079"
  },
  {
    "text": "this case I have a function accepts",
    "start": "911079",
    "end": "913920"
  },
  {
    "text": "interface um that you know accepts some",
    "start": "913920",
    "end": "916759"
  },
  {
    "text": "some random interface and it calls some",
    "start": "916759",
    "end": "919920"
  },
  {
    "text": "function on this and we do this a",
    "start": "919920",
    "end": "921839"
  },
  {
    "text": "million times um obviously this is not",
    "start": "921839",
    "end": "924720"
  },
  {
    "text": "this is just conceptual but um what has",
    "start": "924720",
    "end": "927800"
  },
  {
    "text": "to happen if I uh don't have inlining in",
    "start": "927800",
    "end": "930360"
  },
  {
    "text": "this case um uh sorry what happens here",
    "start": "930360",
    "end": "932720"
  },
  {
    "text": "is uh something called Dynamic dispatch",
    "start": "932720",
    "end": "935360"
  },
  {
    "text": "the program needs to figure out which",
    "start": "935360",
    "end": "937800"
  },
  {
    "text": "implementation of the in interface do I",
    "start": "937800",
    "end": "939880"
  },
  {
    "text": "need to call to then call it and this",
    "start": "939880",
    "end": "942480"
  },
  {
    "text": "prevents us from doing inlining so in",
    "start": "942480",
    "end": "944680"
  },
  {
    "text": "this case we have to do Dynamic uh",
    "start": "944680",
    "end": "946800"
  },
  {
    "text": "dispatch a million times instead of",
    "start": "946800",
    "end": "949680"
  },
  {
    "text": "being just able to call something and",
    "start": "949680",
    "end": "952000"
  },
  {
    "text": "inline it within this hot Loop um and",
    "start": "952000",
    "end": "956279"
  },
  {
    "text": "you know if you're doing doing something",
    "start": "956279",
    "end": "957720"
  },
  {
    "text": "like this there can be a huge huge",
    "start": "957720",
    "end": "960399"
  },
  {
    "text": "saving if you can just skip that and how",
    "start": "960399",
    "end": "962639"
  },
  {
    "text": "can we do that well um there's a really",
    "start": "962639",
    "end": "965519"
  },
  {
    "text": "cool feature that most recently landed",
    "start": "965519",
    "end": "967720"
  },
  {
    "text": "in the go compiler but just about any",
    "start": "967720",
    "end": "969800"
  },
  {
    "text": "compiler um out there can do stuff like",
    "start": "969800",
    "end": "972160"
  },
  {
    "text": "this where you can feed the compiler",
    "start": "972160",
    "end": "975000"
  },
  {
    "text": "profiling information right um because",
    "start": "975000",
    "end": "978800"
  },
  {
    "text": "then the compiler knows ah actually one",
    "start": "978800",
    "end": "981360"
  },
  {
    "text": "of the most common ways of how of which",
    "start": "981360",
    "end": "984120"
  },
  {
    "text": "interface is being called in this hot",
    "start": "984120",
    "end": "986199"
  },
  {
    "text": "Loop is actually this specific",
    "start": "986199",
    "end": "987920"
  },
  {
    "text": "implementation um and it's essentially",
    "start": "987920",
    "end": "990399"
  },
  {
    "text": "the same thing as introducing a type",
    "start": "990399",
    "end": "992480"
  },
  {
    "text": "Switch and Go or you know just making",
    "start": "992480",
    "end": "994880"
  },
  {
    "text": "sure okay one of the things that we're",
    "start": "994880",
    "end": "996880"
  },
  {
    "text": "we definitely see often is this specific",
    "start": "996880",
    "end": "999199"
  },
  {
    "text": "implementation and that allows us to do",
    "start": "999199",
    "end": "1002000"
  },
  {
    "text": "inlining again and so what we can see",
    "start": "1002000",
    "end": "1004519"
  },
  {
    "text": "here in this particular case we could",
    "start": "1004519",
    "end": "1006680"
  },
  {
    "text": "save 66% um of CPU time simply because",
    "start": "1006680",
    "end": "1010880"
  },
  {
    "text": "we've given our compiler profiling",
    "start": "1010880",
    "end": "1013120"
  },
  {
    "text": "information we've not actually changed",
    "start": "1013120",
    "end": "1014759"
  },
  {
    "text": "any code here we've only done you know",
    "start": "1014759",
    "end": "1017440"
  },
  {
    "text": "profiling and production and we've given",
    "start": "1017440",
    "end": "1019240"
  },
  {
    "text": "our uh compiler um representative code",
    "start": "1019240",
    "end": "1022600"
  },
  {
    "text": "for our um sorry representative",
    "start": "1022600",
    "end": "1026199"
  },
  {
    "text": "profiling data for our code and once",
    "start": "1026199",
    "end": "1029199"
  },
  {
    "start": "1027000",
    "end": "1111000"
  },
  {
    "text": "you've done all of these things that's",
    "start": "1029199",
    "end": "1031640"
  },
  {
    "text": "when you can think about um vectorizing",
    "start": "1031640",
    "end": "1034240"
  },
  {
    "text": "your um your code and I'm not going to",
    "start": "1034240",
    "end": "1036678"
  },
  {
    "text": "talk about um all of this in a lot of",
    "start": "1036679",
    "end": "1038640"
  },
  {
    "text": "detail because this would be like five",
    "start": "1038640",
    "end": "1040720"
  },
  {
    "text": "Talks by themselves but long story short",
    "start": "1040720",
    "end": "1043520"
  },
  {
    "text": "is um uh Hardware these days can",
    "start": "1043520",
    "end": "1046798"
  },
  {
    "text": "actually perform um instru that uh",
    "start": "1046799",
    "end": "1051039"
  },
  {
    "text": "perform multiple tasks all in one",
    "start": "1051039",
    "end": "1053000"
  },
  {
    "text": "instruction cycle and so we can actually",
    "start": "1053000",
    "end": "1055600"
  },
  {
    "text": "squeeze quite a bit more performance out",
    "start": "1055600",
    "end": "1058280"
  },
  {
    "text": "of um existing Hardware today simply by",
    "start": "1058280",
    "end": "1061480"
  },
  {
    "text": "you know doing multiple things all in",
    "start": "1061480",
    "end": "1063120"
  },
  {
    "text": "one cycle um if you're interested in",
    "start": "1063120",
    "end": "1065520"
  },
  {
    "text": "this kind of stuff um I recommend",
    "start": "1065520",
    "end": "1067039"
  },
  {
    "text": "checking out Daniel leir's um blog he",
    "start": "1067039",
    "end": "1069760"
  },
  {
    "text": "blogs about this kind of stuff",
    "start": "1069760",
    "end": "1070960"
  },
  {
    "text": "especially also in uh relation with go",
    "start": "1070960",
    "end": "1073880"
  },
  {
    "text": "all the time but he talks about",
    "start": "1073880",
    "end": "1076320"
  },
  {
    "text": "vectorization um and you know very gen",
    "start": "1076320",
    "end": "1078840"
  },
  {
    "text": "General sense as well so kind of going",
    "start": "1078840",
    "end": "1082120"
  },
  {
    "text": "back um this is our cheat sheet for uh",
    "start": "1082120",
    "end": "1085640"
  },
  {
    "text": "profiling and optimizing just about",
    "start": "1085640",
    "end": "1087720"
  },
  {
    "text": "anything um you profile you Benchmark",
    "start": "1087720",
    "end": "1091000"
  },
  {
    "text": "you optimize um and the way that you're",
    "start": "1091000",
    "end": "1093840"
  },
  {
    "text": "most successful at optimizing this first",
    "start": "1093840",
    "end": "1095760"
  },
  {
    "text": "you want to make sure you're using the",
    "start": "1095760",
    "end": "1096919"
  },
  {
    "text": "right approach the right data structures",
    "start": "1096919",
    "end": "1099039"
  },
  {
    "text": "the right",
    "start": "1099039",
    "end": "1099919"
  },
  {
    "text": "algorithms and only then do you go on to",
    "start": "1099919",
    "end": "1103159"
  },
  {
    "text": "avoiding allocations uh make sure that",
    "start": "1103159",
    "end": "1105960"
  },
  {
    "text": "inlining is performed where it makes",
    "start": "1105960",
    "end": "1107600"
  },
  {
    "text": "sense and then very last you vectorize",
    "start": "1107600",
    "end": "1111159"
  },
  {
    "start": "1111000",
    "end": "1147000"
  },
  {
    "text": "your code so um we've been doing this",
    "start": "1111159",
    "end": "1114600"
  },
  {
    "text": "for a very long time um on our code as",
    "start": "1114600",
    "end": "1117640"
  },
  {
    "text": "well and even even then we see on like a",
    "start": "1117640",
    "end": "1121120"
  },
  {
    "text": "weekly bi-weekly basis still 25 30 uh",
    "start": "1121120",
    "end": "1125600"
  },
  {
    "text": "50% sometimes improvements simply",
    "start": "1125600",
    "end": "1128240"
  },
  {
    "text": "because we're always doing this always",
    "start": "1128240",
    "end": "1129919"
  },
  {
    "text": "having this data and we can immediately",
    "start": "1129919",
    "end": "1131559"
  },
  {
    "text": "jump into our data in production and see",
    "start": "1131559",
    "end": "1134440"
  },
  {
    "text": "where all the CPU time is being spent so",
    "start": "1134440",
    "end": "1137880"
  },
  {
    "text": "now you also have the tools um to deal",
    "start": "1137880",
    "end": "1142039"
  },
  {
    "text": "with the end of moris law so long live",
    "start": "1142039",
    "end": "1144480"
  },
  {
    "text": "mois law and let's",
    "start": "1144480",
    "end": "1147159"
  },
  {
    "start": "1147000",
    "end": "1526000"
  },
  {
    "text": "profile um please subscribe to our",
    "start": "1147159",
    "end": "1149840"
  },
  {
    "text": "YouTube channel um and tell us what we",
    "start": "1149840",
    "end": "1152000"
  },
  {
    "text": "should profile next thank",
    "start": "1152000",
    "end": "1154540"
  },
  {
    "text": "[Applause]",
    "start": "1154540",
    "end": "1158520"
  },
  {
    "text": "you I think we have a couple of minutes",
    "start": "1160640",
    "end": "1163080"
  },
  {
    "text": "for",
    "start": "1163080",
    "end": "1165279"
  },
  {
    "text": "questions",
    "start": "1167720",
    "end": "1170720"
  },
  {
    "text": "thanks for the talk uh can you share",
    "start": "1177720",
    "end": "1179600"
  },
  {
    "text": "which versions were you fixed in cupet",
    "start": "1179600",
    "end": "1181559"
  },
  {
    "text": "and in container D and so on or do you",
    "start": "1181559",
    "end": "1183640"
  },
  {
    "text": "have it somewhere in the slides as well",
    "start": "1183640",
    "end": "1185960"
  },
  {
    "text": "um be very helpful so um the kuet um",
    "start": "1185960",
    "end": "1191120"
  },
  {
    "text": "patches have not been merged yet um the",
    "start": "1191120",
    "end": "1194280"
  },
  {
    "text": "container d1s have been merged but I",
    "start": "1194280",
    "end": "1196320"
  },
  {
    "text": "don't know exactly in which version um I",
    "start": "1196320",
    "end": "1199000"
  },
  {
    "text": "believe in the mo it's rolled out in the",
    "start": "1199000",
    "end": "1201280"
  },
  {
    "text": "most recent um like gke version so like",
    "start": "1201280",
    "end": "1204360"
  },
  {
    "text": "128 I think we didn't see this anymore",
    "start": "1204360",
    "end": "1207720"
  },
  {
    "text": "um but yeah it takes a while for this",
    "start": "1207720",
    "end": "1209159"
  },
  {
    "text": "stuff to to land in production so do it",
    "start": "1209159",
    "end": "1210919"
  },
  {
    "text": "as early as possible so that we can you",
    "start": "1210919",
    "end": "1212880"
  },
  {
    "text": "know keep getting more re resources for",
    "start": "1212880",
    "end": "1215400"
  },
  {
    "text": "ourselves to spend and not on these",
    "start": "1215400",
    "end": "1217520"
  },
  {
    "text": "infrastructure",
    "start": "1217520",
    "end": "1220159"
  },
  {
    "text": "components hello uh thanks for the talk",
    "start": "1220320",
    "end": "1222960"
  },
  {
    "text": "it was very nice I have a question how",
    "start": "1222960",
    "end": "1224880"
  },
  {
    "text": "are you like checking how thep analis",
    "start": "1224880",
    "end": "1227799"
  },
  {
    "text": "working go do you have any like",
    "start": "1227799",
    "end": "1229400"
  },
  {
    "text": "techniques how you approaching it",
    "start": "1229400",
    "end": "1230760"
  },
  {
    "text": "because I think that if you look at",
    "start": "1230760",
    "end": "1232320"
  },
  {
    "text": "everything it may be hard any tips and",
    "start": "1232320",
    "end": "1234280"
  },
  {
    "text": "tricks that you want to share sorry",
    "start": "1234280",
    "end": "1236320"
  },
  {
    "text": "where are you sitting I don't Des here",
    "start": "1236320",
    "end": "1239280"
  },
  {
    "text": "ah okay sorry can you repeat the",
    "start": "1239280",
    "end": "1241200"
  },
  {
    "text": "question one more time sure uh basically",
    "start": "1241200",
    "end": "1242799"
  },
  {
    "text": "I want to ask you how you approach the",
    "start": "1242799",
    "end": "1244880"
  },
  {
    "text": "analysis of the Escape analysis in go do",
    "start": "1244880",
    "end": "1247559"
  },
  {
    "text": "you have any tips and tricks because in",
    "start": "1247559",
    "end": "1249559"
  },
  {
    "text": "my experience it could be a lot of",
    "start": "1249559",
    "end": "1251120"
  },
  {
    "text": "basically noise and how you approach to",
    "start": "1251120",
    "end": "1253559"
  },
  {
    "text": "to basically just check the things that",
    "start": "1253559",
    "end": "1255640"
  },
  {
    "text": "you're mostly interested in yeah great",
    "start": "1255640",
    "end": "1257840"
  },
  {
    "text": "question so um one there's actually a",
    "start": "1257840",
    "end": "1260159"
  },
  {
    "text": "compiler flag uh that you can pass um I",
    "start": "1260159",
    "end": "1263480"
  },
  {
    "text": "don't know it off the top of my head but",
    "start": "1263480",
    "end": "1264840"
  },
  {
    "text": "if you search for this you'll find it um",
    "start": "1264840",
    "end": "1266840"
  },
  {
    "text": "that basically prints out all the",
    "start": "1266840",
    "end": "1268799"
  },
  {
    "text": "decisions that the go compiler makes um",
    "start": "1268799",
    "end": "1271440"
  },
  {
    "text": "in in relation to escape analysis and",
    "start": "1271440",
    "end": "1274279"
  },
  {
    "text": "basically you know the way that you you",
    "start": "1274279",
    "end": "1275960"
  },
  {
    "text": "need to think about it is the go",
    "start": "1275960",
    "end": "1277840"
  },
  {
    "text": "compiler needs to make a decision of is",
    "start": "1277840",
    "end": "1279960"
  },
  {
    "text": "this going to fit on the stack um and if",
    "start": "1279960",
    "end": "1283000"
  },
  {
    "text": "it basically says no or I don't know the",
    "start": "1283000",
    "end": "1285840"
  },
  {
    "text": "size of this thing um I can't predict",
    "start": "1285840",
    "end": "1288279"
  },
  {
    "text": "the size of this thing then it's going",
    "start": "1288279",
    "end": "1289640"
  },
  {
    "text": "to go on the Heap right um and so that's",
    "start": "1289640",
    "end": "1292480"
  },
  {
    "text": "kind of I think conceptually how I",
    "start": "1292480",
    "end": "1294320"
  },
  {
    "text": "mostly think about it and then then I",
    "start": "1294320",
    "end": "1295840"
  },
  {
    "text": "use the tools that tell me you know this",
    "start": "1295840",
    "end": "1297440"
  },
  {
    "text": "thing went onto the Heap because I think",
    "start": "1297440",
    "end": "1299480"
  },
  {
    "text": "it's going to be too",
    "start": "1299480",
    "end": "1300960"
  },
  {
    "text": "large okay but the thing is that when",
    "start": "1300960",
    "end": "1303320"
  },
  {
    "text": "you use it you get the out of the of the",
    "start": "1303320",
    "end": "1305720"
  },
  {
    "text": "whole for example application right like",
    "start": "1305720",
    "end": "1307960"
  },
  {
    "text": "it's a very big kind of file so my",
    "start": "1307960",
    "end": "1310200"
  },
  {
    "text": "question is how to filter out you the",
    "start": "1310200",
    "end": "1311600"
  },
  {
    "text": "only thing the part that you want to",
    "start": "1311600",
    "end": "1313600"
  },
  {
    "text": "optimize yeah fair fair enough so I I",
    "start": "1313600",
    "end": "1316120"
  },
  {
    "text": "think there um it's it's not really",
    "start": "1316120",
    "end": "1318240"
  },
  {
    "text": "magic I try to build the smallest uh",
    "start": "1318240",
    "end": "1320720"
  },
  {
    "text": "Benchmark that I possibly can uh so that",
    "start": "1320720",
    "end": "1323480"
  },
  {
    "text": "you know it also outputs as little um uh",
    "start": "1323480",
    "end": "1328120"
  },
  {
    "text": "as possible yeah",
    "start": "1328120",
    "end": "1331600"
  },
  {
    "text": "thanks yeah oh okay yeah thank you uh",
    "start": "1334960",
    "end": "1337640"
  },
  {
    "text": "great talk uh so I think uh my question",
    "start": "1337640",
    "end": "1340080"
  },
  {
    "text": "is that you mentioned PG so is there any",
    "start": "1340080",
    "end": "1343159"
  },
  {
    "text": "like best practice uh like how we can",
    "start": "1343159",
    "end": "1346039"
  },
  {
    "text": "integrate p uh into our pipeline Maybe",
    "start": "1346039",
    "end": "1348520"
  },
  {
    "text": "maybe CI and improve our um maybe",
    "start": "1348520",
    "end": "1352320"
  },
  {
    "text": "performance over time across maybe",
    "start": "1352320",
    "end": "1354320"
  },
  {
    "text": "different releases yeah great question",
    "start": "1354320",
    "end": "1356600"
  },
  {
    "text": "so um actually the go implementation of",
    "start": "1356600",
    "end": "1360080"
  },
  {
    "text": "pgo is like completely state-ofthe-art",
    "start": "1360080",
    "end": "1362159"
  },
  {
    "text": "and one of the really cool things that",
    "start": "1362159",
    "end": "1364720"
  },
  {
    "text": "the go compiler can do that many other",
    "start": "1364720",
    "end": "1367240"
  },
  {
    "text": "PG implementations struggle with is uh",
    "start": "1367240",
    "end": "1370120"
  },
  {
    "text": "Source stability um and more",
    "start": "1370120",
    "end": "1372520"
  },
  {
    "text": "specifically it doesn't require Source",
    "start": "1372520",
    "end": "1374520"
  },
  {
    "text": "stability so in other implementations",
    "start": "1374520",
    "end": "1376840"
  },
  {
    "text": "let's say in lvm you have to compile",
    "start": "1376840",
    "end": "1380000"
  },
  {
    "text": "your code profile it and uh recompile",
    "start": "1380000",
    "end": "1383520"
  },
  {
    "text": "exactly the same code um as you profiled",
    "start": "1383520",
    "end": "1388279"
  },
  {
    "text": "right so this is this can be complicated",
    "start": "1388279",
    "end": "1390400"
  },
  {
    "text": "because if you actually want production",
    "start": "1390400",
    "end": "1392600"
  },
  {
    "text": "uh profiling data it's kind of",
    "start": "1392600",
    "end": "1394159"
  },
  {
    "text": "conflicting right in go this is not a",
    "start": "1394159",
    "end": "1397039"
  },
  {
    "text": "requirement and so um basically it just",
    "start": "1397039",
    "end": "1400520"
  },
  {
    "text": "tries to search for which code hasn't",
    "start": "1400520",
    "end": "1403360"
  },
  {
    "text": "changed and tries to apply pgo to all of",
    "start": "1403360",
    "end": "1405880"
  },
  {
    "text": "those things because it basically",
    "start": "1405880",
    "end": "1407159"
  },
  {
    "text": "acknowledges that most most of the time",
    "start": "1407159",
    "end": "1409159"
  },
  {
    "text": "your patches are relatively small code",
    "start": "1409159",
    "end": "1411120"
  },
  {
    "text": "changes are relatively small and so PG",
    "start": "1411120",
    "end": "1413480"
  },
  {
    "text": "still ends up being applied to just",
    "start": "1413480",
    "end": "1415000"
  },
  {
    "text": "about anything like 95% of all of your",
    "start": "1415000",
    "end": "1417799"
  },
  {
    "text": "code right um and so this means that you",
    "start": "1417799",
    "end": "1421200"
  },
  {
    "text": "can basically take a weekly snapshot of",
    "start": "1421200",
    "end": "1423679"
  },
  {
    "text": "all of your production profiling data um",
    "start": "1423679",
    "end": "1425919"
  },
  {
    "text": "put it you know on an S3 bucket or",
    "start": "1425919",
    "end": "1428679"
  },
  {
    "text": "whatever um and then download that in",
    "start": "1428679",
    "end": "1431720"
  },
  {
    "text": "your cicd pipeline compile it and you",
    "start": "1431720",
    "end": "1434320"
  },
  {
    "text": "know a weekly snapshot is actually",
    "start": "1434320",
    "end": "1435919"
  },
  {
    "text": "sufficient to optimize most of the code",
    "start": "1435919",
    "end": "1438600"
  },
  {
    "text": "path for that",
    "start": "1438600",
    "end": "1439840"
  },
  {
    "text": "week okay gotcha thank",
    "start": "1439840",
    "end": "1443600"
  },
  {
    "text": "you yeah I wanted to build on PG",
    "start": "1450159",
    "end": "1452840"
  },
  {
    "text": "question how do you think open source",
    "start": "1452840",
    "end": "1455240"
  },
  {
    "text": "project can use it as part of their",
    "start": "1455240",
    "end": "1457080"
  },
  {
    "text": "pipelines how do we know which",
    "start": "1457080",
    "end": "1458799"
  },
  {
    "text": "production is the best production um",
    "start": "1458799",
    "end": "1461480"
  },
  {
    "text": "great question so the the cool thing",
    "start": "1461480",
    "end": "1463120"
  },
  {
    "text": "about pgo is that it most of the time",
    "start": "1463120",
    "end": "1465760"
  },
  {
    "text": "isn't evaluating the profiling data",
    "start": "1465760",
    "end": "1469279"
  },
  {
    "text": "itself it just wants to understand what",
    "start": "1469279",
    "end": "1470919"
  },
  {
    "text": "are the code paths that have actually",
    "start": "1470919",
    "end": "1472640"
  },
  {
    "text": "been taken right um and so actually the",
    "start": "1472640",
    "end": "1476360"
  },
  {
    "text": "best thing as a community that we can do",
    "start": "1476360",
    "end": "1478600"
  },
  {
    "text": "is collect all of our profiling data",
    "start": "1478600",
    "end": "1481000"
  },
  {
    "text": "together give it to I know you're an ETD",
    "start": "1481000",
    "end": "1483600"
  },
  {
    "text": "maintainer give it to the ETD maintainer",
    "start": "1483600",
    "end": "1486120"
  },
  {
    "text": "um and therefore ETD for the entire",
    "start": "1486120",
    "end": "1488240"
  },
  {
    "text": "Community can be built using pggo with",
    "start": "1488240",
    "end": "1490399"
  },
  {
    "text": "all the possible code paths that",
    "start": "1490399",
    "end": "1492120"
  },
  {
    "text": "actually exist um in reality and the",
    "start": "1492120",
    "end": "1495039"
  },
  {
    "text": "cool thing about pgo is you can",
    "start": "1495039",
    "end": "1497039"
  },
  {
    "text": "basically um",
    "start": "1497039",
    "end": "1499159"
  },
  {
    "text": "only win like the worst thing that can",
    "start": "1499159",
    "end": "1501360"
  },
  {
    "text": "happen is that the binary gets a tiny",
    "start": "1501360",
    "end": "1502919"
  },
  {
    "text": "bit larger but you know it's doesn't",
    "start": "1502919",
    "end": "1505600"
  },
  {
    "text": "doesn't hurt to optimize the code paths",
    "start": "1505600",
    "end": "1507399"
  },
  {
    "text": "that have actually been taken in reality",
    "start": "1507399",
    "end": "1509919"
  },
  {
    "text": "right so basically as a community we can",
    "start": "1509919",
    "end": "1511960"
  },
  {
    "text": "only win what we should do is all put",
    "start": "1511960",
    "end": "1513880"
  },
  {
    "text": "all of our profiling data together and",
    "start": "1513880",
    "end": "1516360"
  },
  {
    "text": "give it back to the maintainers of all",
    "start": "1516360",
    "end": "1518480"
  },
  {
    "text": "these projects awesome thanks so when",
    "start": "1518480",
    "end": "1521480"
  },
  {
    "text": "will be let's profile for SD come join",
    "start": "1521480",
    "end": "1524720"
  },
  {
    "text": "us next week",
    "start": "1524720",
    "end": "1528278"
  }
]