[
  {
    "text": "hello uh my name is uh sanjay pujari",
    "start": "240",
    "end": "5279"
  },
  {
    "text": "i'm in google cloud engineering and i am a lead in the grpc team",
    "start": "5279",
    "end": "12000"
  },
  {
    "text": "so in this session i'm going to talk about what grpc is",
    "start": "12880",
    "end": "18000"
  },
  {
    "text": "and some history behind it then i'll discuss microservices and",
    "start": "18000",
    "end": "23439"
  },
  {
    "text": "service mesh and grpc's role in that evolution",
    "start": "23439",
    "end": "29199"
  },
  {
    "text": "one of the main stages in the evolution of service mesh is proxima service mesh and i'll cover that",
    "start": "29199",
    "end": "36800"
  },
  {
    "text": "then there are a few slides about main tenets of proximal service mesh",
    "start": "36800",
    "end": "43520"
  },
  {
    "text": "traffic management and security i'll mention xds and how traffic",
    "start": "43520",
    "end": "48800"
  },
  {
    "text": "management and security works in the proxima service mesh with xds",
    "start": "48800",
    "end": "55680"
  },
  {
    "text": "i'll describe how to use proxyres grpc with an example in java",
    "start": "55680",
    "end": "62480"
  },
  {
    "text": "then i'll talk about one of the main developments in grpc observability and",
    "start": "62480",
    "end": "69119"
  },
  {
    "text": "what's happening there and then we'll end end with questions and answers",
    "start": "69119",
    "end": "75680"
  },
  {
    "text": "so what's grpc grpc was created by google based on",
    "start": "76479",
    "end": "82080"
  },
  {
    "text": "their experience off and the next version of study study is the",
    "start": "82080",
    "end": "88320"
  },
  {
    "text": "internal rpc framework google has been using successfully to operate google",
    "start": "88320",
    "end": "93840"
  },
  {
    "text": "scale of microservices one of the numbers i heard mentioned is",
    "start": "93840",
    "end": "99520"
  },
  {
    "text": "something like order of 10 to the power of 10 about 10 billion rpcs per second",
    "start": "99520",
    "end": "106640"
  },
  {
    "text": "one of the improvements of grpc over stubby is use of http 2",
    "start": "106640",
    "end": "112960"
  },
  {
    "text": "and the benefits we get are binary framing multiplexing streaming and h-back compression for",
    "start": "112960",
    "end": "120960"
  },
  {
    "text": "headers i'll also talk about protocol buffers in a later slide",
    "start": "120960",
    "end": "127040"
  },
  {
    "text": "protocol buffer is also known as protobuf and that's the term i'll",
    "start": "127040",
    "end": "133520"
  },
  {
    "text": "use in the arrest of this presentation uh protobuf is used as the",
    "start": "133520",
    "end": "140239"
  },
  {
    "text": "serialization framework with grpc so how does one use grpc",
    "start": "140239",
    "end": "148640"
  },
  {
    "text": "at a high level you define your interface using the protobuf idl",
    "start": "148640",
    "end": "155280"
  },
  {
    "text": "in a dot profile dot proto is the extension for such files",
    "start": "155280",
    "end": "160480"
  },
  {
    "text": "i use the protoc compiler to generate client and server stubs",
    "start": "160480",
    "end": "167120"
  },
  {
    "text": "oh by the way protocol buffers is a separate project and the protoc compiler uses",
    "start": "167120",
    "end": "173920"
  },
  {
    "text": "a language specific plugin to generate code for a target language",
    "start": "173920",
    "end": "179280"
  },
  {
    "text": "so for example there is a java plugin for protoc and that's how protoc generates java",
    "start": "179280",
    "end": "186159"
  },
  {
    "text": "code uh so anyway after the code is generated and stuffs",
    "start": "186159",
    "end": "192000"
  },
  {
    "text": "are extended or implemented you can use the client stub",
    "start": "192000",
    "end": "197360"
  },
  {
    "text": "to simply make a call to the server strictly speaking",
    "start": "197360",
    "end": "203440"
  },
  {
    "text": "grpc can be used with another serialization framework",
    "start": "203440",
    "end": "209200"
  },
  {
    "text": "protobuf is not strictly speaking mandatory but is the most popular",
    "start": "209200",
    "end": "215680"
  },
  {
    "text": "and de facto framework for grpc",
    "start": "215680",
    "end": "220959"
  },
  {
    "text": "uh so what's provost protobuf predates grpc since",
    "start": "220959",
    "end": "227840"
  },
  {
    "text": "google has been using it with stubby for quite some time",
    "start": "227840",
    "end": "233200"
  },
  {
    "text": "uh as you can see its advantages are that it is strongly typed",
    "start": "233200",
    "end": "239040"
  },
  {
    "text": "it has a binary format for compactness and is highly extensive",
    "start": "239040",
    "end": "244799"
  },
  {
    "text": "in a backward compatible way i had already mentioned",
    "start": "244799",
    "end": "250239"
  },
  {
    "text": "the code generator plugins for various grpc languages like java c plus plus and",
    "start": "250239",
    "end": "256000"
  },
  {
    "text": "go there are code generators for other languages as well",
    "start": "256000",
    "end": "262400"
  },
  {
    "text": "i have shown here a sample snippet of product of idl",
    "start": "262400",
    "end": "268400"
  },
  {
    "text": "that shows a struct with string enum and entries",
    "start": "268400",
    "end": "275600"
  },
  {
    "text": "uh this slide captures in a nutshell why grpc is so good",
    "start": "276800",
    "end": "285840"
  },
  {
    "text": "most of these things follow from what i have discussed so far",
    "start": "286720",
    "end": "293600"
  },
  {
    "text": "now just a couple of things i would like to add",
    "start": "293600",
    "end": "298880"
  },
  {
    "text": "grpc is not only used for unary rpcs",
    "start": "298880",
    "end": "304479"
  },
  {
    "text": "a unity rpc is where you send a single request and get a response",
    "start": "304479",
    "end": "309759"
  },
  {
    "text": "but it is also used for the streaming paradigm where",
    "start": "309759",
    "end": "315120"
  },
  {
    "text": "you do client streaming or server streaming or bi-directional streaming rpcs",
    "start": "315120",
    "end": "322240"
  },
  {
    "text": "now a stream is an unbounded stream of messages",
    "start": "322240",
    "end": "327360"
  },
  {
    "text": "uh for using streams grpc provides an asynchronous uh",
    "start": "327360",
    "end": "334560"
  },
  {
    "text": "framework for processing our streams another thing",
    "start": "334560",
    "end": "340800"
  },
  {
    "text": "that i would like to talk about is extensibility and customizability are",
    "start": "340800",
    "end": "346479"
  },
  {
    "text": "using what we call interceptors these interceptors are present both on",
    "start": "346479",
    "end": "352479"
  },
  {
    "text": "the client and the server side uh using an interceptor",
    "start": "352479",
    "end": "357919"
  },
  {
    "text": "a client or server can intercept rpcs to",
    "start": "357919",
    "end": "363199"
  },
  {
    "text": "decorate the calls or it can perform some cross-cutting",
    "start": "363199",
    "end": "368479"
  },
  {
    "text": "functionality such as authentication or authorization or logging",
    "start": "368479",
    "end": "375440"
  },
  {
    "text": "uh i'll talk up more about using interceptors for logging when we",
    "start": "375440",
    "end": "381759"
  },
  {
    "text": "get to observability now this wraps up",
    "start": "381759",
    "end": "388240"
  },
  {
    "text": "the introduction to grpc part of the presentation in case you want to know",
    "start": "388240",
    "end": "395360"
  },
  {
    "text": "more about grpc here are the uh here are some of the links or resources",
    "start": "395360",
    "end": "402319"
  },
  {
    "text": "you can look up uh the first one is a link to a very useful presentation uh covering",
    "start": "402319",
    "end": "408960"
  },
  {
    "text": "introduction to grpc in a previous q con conference",
    "start": "408960",
    "end": "415680"
  },
  {
    "text": "let's move on to the next section of the presentation now grpc enables remote procedure calls",
    "start": "416400",
    "end": "424160"
  },
  {
    "text": "to make them almost as simple to use as in process direct calls",
    "start": "424160",
    "end": "430560"
  },
  {
    "text": "this has enabled the microservice architecture where a monolithic application",
    "start": "430560",
    "end": "437520"
  },
  {
    "text": "is broken up into multiple microservices what used to be in process communication",
    "start": "437520",
    "end": "445280"
  },
  {
    "text": "inside the monolith is now rpcs over the network",
    "start": "445280",
    "end": "450639"
  },
  {
    "text": "in this picture the yellow layer talks to the red layer which talks to the green layer",
    "start": "450639",
    "end": "457840"
  },
  {
    "text": "and these rpcs cross network and infrastructure boundaries",
    "start": "457840",
    "end": "465560"
  },
  {
    "text": "the dotted lines in the cloud-like shape",
    "start": "465599",
    "end": "472160"
  },
  {
    "text": "show the various boundaries the rpcs have to cross",
    "start": "472160",
    "end": "478879"
  },
  {
    "text": "one advantage of microservice architecture is the ability to scale",
    "start": "478879",
    "end": "485440"
  },
  {
    "text": "various infrastructure resources such as vms clusters or networks are added as",
    "start": "485440",
    "end": "492240"
  },
  {
    "text": "the application scaling requirements go up and the rpcs have to be routed or load",
    "start": "492240",
    "end": "498720"
  },
  {
    "text": "balanced or secured as part of that scaling up so how can all this be automated or",
    "start": "498720",
    "end": "506800"
  },
  {
    "text": "managed so this is where the service mesh comes up",
    "start": "506800",
    "end": "515120"
  },
  {
    "text": "a service mesh has a control plane like sto shown here in the yellow box",
    "start": "515120",
    "end": "521680"
  },
  {
    "text": "that is managing the data plane that is the bunch of microservices that",
    "start": "521680",
    "end": "527360"
  },
  {
    "text": "make up an application the control plane maintains and manages",
    "start": "527360",
    "end": "533040"
  },
  {
    "text": "policies for traffic management and security these policies are enforced or",
    "start": "533040",
    "end": "540320"
  },
  {
    "text": "implemented by data frame entities called proxies",
    "start": "540320",
    "end": "545519"
  },
  {
    "text": "now this is the proxy mode in this picture grpc traffic flows through these proxies",
    "start": "545519",
    "end": "553200"
  },
  {
    "text": "and the proxies are responsible for routing the traffic and enforcing security based on policies",
    "start": "553200",
    "end": "560240"
  },
  {
    "text": "from the control plane the proxy is transparent that is",
    "start": "560240",
    "end": "567759"
  },
  {
    "text": "the grpc application is not aware of their presence and communicates as if",
    "start": "570240",
    "end": "578080"
  },
  {
    "text": "the proxies are not present the proxy is also used for http and",
    "start": "578080",
    "end": "584000"
  },
  {
    "text": "other application level traffic such as redis or sequel",
    "start": "584000",
    "end": "591040"
  },
  {
    "text": "uh but with grpc we can do away with the proxies if we implemented the same",
    "start": "591040",
    "end": "596480"
  },
  {
    "text": "functionality uh in the grpc layer so this is the so-called proximalist",
    "start": "596480",
    "end": "602240"
  },
  {
    "text": "model uh we enhanced grpc",
    "start": "602240",
    "end": "608560"
  },
  {
    "text": "to have the same traffic management and security functionality as the proxy",
    "start": "608560",
    "end": "615120"
  },
  {
    "text": "specifically the on by proxy that is most commonly used in istio or",
    "start": "615120",
    "end": "621920"
  },
  {
    "text": "xes based service measures uh the control frame",
    "start": "621920",
    "end": "627760"
  },
  {
    "text": "istio in this case sends the same policies to grpc instead of the proxies",
    "start": "627760",
    "end": "634079"
  },
  {
    "text": "and the grpc client and server enforce these policies",
    "start": "634079",
    "end": "639600"
  },
  {
    "text": "within the grpc library the services in the mesh talk to each",
    "start": "639600",
    "end": "646399"
  },
  {
    "text": "other directly without the proxies uh so this is of course true for grpc",
    "start": "646399",
    "end": "651680"
  },
  {
    "text": "classic but if you have other kinds of traffic say http or redis",
    "start": "651680",
    "end": "656959"
  },
  {
    "text": "then proxies might still be needed in your service mesh",
    "start": "656959",
    "end": "662720"
  },
  {
    "text": "so let's look at the advantages of the proximal service mesh",
    "start": "663760",
    "end": "669440"
  },
  {
    "text": "in this slide you can see the latency gains as the result of the proxies mode",
    "start": "669440",
    "end": "676560"
  },
  {
    "text": "uh now some background on this experiment setup uh this was set up",
    "start": "676560",
    "end": "681600"
  },
  {
    "text": "using fortio which is a go based load testing app",
    "start": "681600",
    "end": "687120"
  },
  {
    "text": "uh the infrastructure resources used are as follows uh",
    "start": "687120",
    "end": "692959"
  },
  {
    "text": "a gk cluster version 1.20 with three e2 standard 16 nodes uh these nodes have 16",
    "start": "692959",
    "end": "701839"
  },
  {
    "text": "cpus and 64 gigabyte memory each uh this experiment uh uses the fortio",
    "start": "701839",
    "end": "710079"
  },
  {
    "text": "client and server apps in the application container which has 1.5",
    "start": "710079",
    "end": "715360"
  },
  {
    "text": "virtual cpu and 1000 megabytes memory allocated to it",
    "start": "715360",
    "end": "720639"
  },
  {
    "text": "uh then we also have the sidecar container uh for the istio agent and the on y proxy",
    "start": "720639",
    "end": "728320"
  },
  {
    "text": "which has one virtual cpu and 512 megabytes memory allocated to it",
    "start": "728320",
    "end": "734720"
  },
  {
    "text": "the experiment included uh both the with and without mtls enabled modes",
    "start": "734720",
    "end": "742800"
  },
  {
    "text": "and with and without the unripe proxy uh now a little bit about the sidecar",
    "start": "742800",
    "end": "748720"
  },
  {
    "text": "container uh if this is proximalis mode why is there a cycle container uh note that",
    "start": "748720",
    "end": "755360"
  },
  {
    "text": "we did the experiment to measure the performance for both the cases now in case of rock service there is no on y",
    "start": "755360",
    "end": "762240"
  },
  {
    "text": "proxy but we have the sidecar container for something called an sqo agent",
    "start": "762240",
    "end": "768560"
  },
  {
    "text": "so even though we don't need the on y proxy we need the istio agent",
    "start": "768560",
    "end": "774399"
  },
  {
    "text": "now let's compare the performance now compared to the on y case there is a massive improvement",
    "start": "774399",
    "end": "781680"
  },
  {
    "text": "with mpls at 64 connections the latency improvement is from 6 to 16",
    "start": "781680",
    "end": "787519"
  },
  {
    "text": "times and that is about 500 percent to 1500 improvement",
    "start": "787519",
    "end": "793440"
  },
  {
    "text": "depending on whether you are looking at a p50 rp 99 latency numbers uh note that",
    "start": "793440",
    "end": "800800"
  },
  {
    "text": "this still supports advanced traffic management and mpls but without the onboard proxy",
    "start": "800800",
    "end": "809040"
  },
  {
    "text": "uh let's also look at the resource usage uh as mentioned earlier",
    "start": "810320",
    "end": "815600"
  },
  {
    "text": "the proximized experiment still requires an agent called the istio agent",
    "start": "815600",
    "end": "820720"
  },
  {
    "text": "uh even if we still require an sql agent the agent uses less than 0.1 percent of",
    "start": "820720",
    "end": "826240"
  },
  {
    "text": "the full vcbo and only 25 megabytes of memory",
    "start": "826240",
    "end": "831680"
  },
  {
    "text": "which is less than half of what envoy requires note that these metrics don't include",
    "start": "831680",
    "end": "838399"
  },
  {
    "text": "the additional resource usage by grpc in the application container but this",
    "start": "838399",
    "end": "844639"
  },
  {
    "text": "serves to demonstrate the resource usage impact of the issue agent when running",
    "start": "844639",
    "end": "850720"
  },
  {
    "text": "in this mode",
    "start": "850720",
    "end": "853360"
  },
  {
    "text": "i think i had mentioned xps before so let me expand on that a little bit",
    "start": "855760",
    "end": "861519"
  },
  {
    "text": "xps is a protocol for control plane to talk to uh the data plane entities",
    "start": "861519",
    "end": "868079"
  },
  {
    "text": "that's why it's called a data plane api xts uh now xps where x stands for some data",
    "start": "868079",
    "end": "876480"
  },
  {
    "text": "print entity like x in algebra and ds is discovery service",
    "start": "876480",
    "end": "883279"
  },
  {
    "text": "for example cvs for discovery of clusters rds for routes lds",
    "start": "883279",
    "end": "890959"
  },
  {
    "text": "for listeners and so on xts was",
    "start": "890959",
    "end": "896480"
  },
  {
    "text": "developed for envoy but is pretty open and extensible for any kind of",
    "start": "896480",
    "end": "903600"
  },
  {
    "text": "service mesh grpc adopted it and extended it",
    "start": "903600",
    "end": "909360"
  },
  {
    "text": "for the proximal service mesh this slide mainly shows how",
    "start": "909360",
    "end": "916880"
  },
  {
    "text": "xts works for traffic management in the service mesh the lds",
    "start": "916880",
    "end": "922800"
  },
  {
    "text": "which is the listener discovery service is used to discover the configuration rule for any grpc service",
    "start": "922800",
    "end": "930320"
  },
  {
    "text": "a client is trying to reach such as payment service.mydomain.com",
    "start": "930320",
    "end": "936600"
  },
  {
    "text": "lds is the root of the configuration and it points to other artifacts specifically rds",
    "start": "936720",
    "end": "944240"
  },
  {
    "text": "for routes now rds contains the routing information things such as",
    "start": "944240",
    "end": "950160"
  },
  {
    "text": "how to process the host path and other http headers",
    "start": "950160",
    "end": "956560"
  },
  {
    "text": "to route a request so this is the place where routing and traffic policies",
    "start": "956560",
    "end": "962880"
  },
  {
    "text": "are enforced rds further points to cvs cds has",
    "start": "962880",
    "end": "969360"
  },
  {
    "text": "constructed information a cluster is a set of backends that are part of the same infrastructure",
    "start": "969360",
    "end": "976800"
  },
  {
    "text": "such as the same geography or the same network and",
    "start": "976800",
    "end": "983040"
  },
  {
    "text": "the all the backends in the cluster share the same security configuration such as certificates and keys",
    "start": "983040",
    "end": "990639"
  },
  {
    "text": "now cvs has references to what is called edf",
    "start": "990639",
    "end": "996000"
  },
  {
    "text": "endpoint discovery service eds has the actual backends that a",
    "start": "996000",
    "end": "1001040"
  },
  {
    "text": "client connects to so cds and eds together are used for",
    "start": "1001040",
    "end": "1006880"
  },
  {
    "text": "load balancing uh having covered uh traffic management",
    "start": "1006880",
    "end": "1012959"
  },
  {
    "text": "uh let's look at security so why is security so important in a",
    "start": "1012959",
    "end": "1018240"
  },
  {
    "text": "service mesh uh remember that a service mesh is the",
    "start": "1018240",
    "end": "1023279"
  },
  {
    "text": "result of breaking up a monolithic application what used to be in process communication",
    "start": "1023279",
    "end": "1030640"
  },
  {
    "text": "inside the monolith is now rpcs over the network and as a result they need to be secure",
    "start": "1030640",
    "end": "1038079"
  },
  {
    "text": "these rpcs are routed or load balanced as part of the",
    "start": "1038079",
    "end": "1043120"
  },
  {
    "text": "service mesh orchestration we need security that's well integrated",
    "start": "1043120",
    "end": "1048880"
  },
  {
    "text": "with things like routing road balancing and service discovery for example",
    "start": "1048880",
    "end": "1054799"
  },
  {
    "text": "each endpoint needs to be able to evaluate its peer certificate and identity using the control plane",
    "start": "1054799",
    "end": "1062160"
  },
  {
    "text": "provided information security also includes authorization",
    "start": "1062160",
    "end": "1067520"
  },
  {
    "text": "where a server authorizes a client before accepting",
    "start": "1067520",
    "end": "1073840"
  },
  {
    "text": "the rpcs so how is all this done and who does it",
    "start": "1073840",
    "end": "1082080"
  },
  {
    "text": "the answer is service mesh with security uh this is a",
    "start": "1082480",
    "end": "1089520"
  },
  {
    "text": "diagrammatic representation of how it all works you have the client in the",
    "start": "1089520",
    "end": "1095760"
  },
  {
    "text": "yellow box on the left sending rpcs to the server in the red box over a secured channel",
    "start": "1095760",
    "end": "1103360"
  },
  {
    "text": "the blue lock on that line indicates a secure channel both client and server are xvs enabled",
    "start": "1103360",
    "end": "1111200"
  },
  {
    "text": "and get their security configuration from the xts control drain shown in blue",
    "start": "1111200",
    "end": "1116960"
  },
  {
    "text": "at the top the client and server need certificates and keys that are",
    "start": "1116960",
    "end": "1123840"
  },
  {
    "text": "provided by the certificate and deployment infrastructure to make it all happen",
    "start": "1123840",
    "end": "1130640"
  },
  {
    "text": "the green box represents the various infrastructure components which include",
    "start": "1130640",
    "end": "1137600"
  },
  {
    "text": "certification authorities also known as cas to make certificates",
    "start": "1137600",
    "end": "1143679"
  },
  {
    "text": "a process to continuously generate csrs and use them to make these",
    "start": "1143679",
    "end": "1150000"
  },
  {
    "text": "certificates a mechanism to make these certificates and keys",
    "start": "1150000",
    "end": "1155360"
  },
  {
    "text": "available to grpc workloads using the grpc's plugin feature",
    "start": "1155360",
    "end": "1162080"
  },
  {
    "text": "now for implementing security uh we implemented a certificate plugin feature",
    "start": "1162080",
    "end": "1167840"
  },
  {
    "text": "in grpc and we also added the required extension points",
    "start": "1167840",
    "end": "1174000"
  },
  {
    "text": "uh for the plugins uh in xds when all of these things are in place",
    "start": "1174000",
    "end": "1180320"
  },
  {
    "text": "the client and server secure their grpc traffic",
    "start": "1180320",
    "end": "1186080"
  },
  {
    "text": "let's recap service mesh security the control train uses a transport",
    "start": "1186880",
    "end": "1193280"
  },
  {
    "text": "socket abstraction within a cds or lds to configure security in grpc",
    "start": "1193280",
    "end": "1200080"
  },
  {
    "text": "but there are external components like the security infrastructure to provide certificates",
    "start": "1200080",
    "end": "1205280"
  },
  {
    "text": "and keys when mtls is involved grpc uses the",
    "start": "1205280",
    "end": "1210960"
  },
  {
    "text": "provided certificates and certain other bits from the transport socket configuration",
    "start": "1210960",
    "end": "1217360"
  },
  {
    "text": "to create the empty address configuration or to create mpls connection",
    "start": "1217360",
    "end": "1223520"
  },
  {
    "text": "we get authentication encryption and something called server authorization",
    "start": "1223520",
    "end": "1229280"
  },
  {
    "text": "with mpls server authorization is somewhat like the host name check in http tls",
    "start": "1229280",
    "end": "1238960"
  },
  {
    "text": "then as part of security we also have a regular authorization or client",
    "start": "1238960",
    "end": "1245200"
  },
  {
    "text": "authorization implemented on the server side where a user can use authorization",
    "start": "1245200",
    "end": "1253120"
  },
  {
    "text": "policies also known as rbac to authorize rpcs based on various",
    "start": "1253120",
    "end": "1260000"
  },
  {
    "text": "things including client identities",
    "start": "1260000",
    "end": "1264240"
  },
  {
    "text": "so how does one use this stuff say in java the example in this slide is from the",
    "start": "1265760",
    "end": "1272720"
  },
  {
    "text": "security grfc mentioned here xts trs security.md",
    "start": "1272720",
    "end": "1279039"
  },
  {
    "text": "now a grsc is an rfc or a proposal in the rp grpc ecosystem",
    "start": "1279039",
    "end": "1286480"
  },
  {
    "text": "uh this example is in java but the usage in c plus plus",
    "start": "1286480",
    "end": "1291600"
  },
  {
    "text": "and python and go is similar there is something called xts channel",
    "start": "1291600",
    "end": "1298240"
  },
  {
    "text": "credential that you supply to your channel builder and this credential tells grpc to use xts supplied security",
    "start": "1298240",
    "end": "1305600"
  },
  {
    "text": "configuration there is something called a server credential",
    "start": "1305600",
    "end": "1311440"
  },
  {
    "text": "on the server side which instructs grpc to use xts supplied security configuration on the server",
    "start": "1311440",
    "end": "1318000"
  },
  {
    "text": "side and i wonder what the insecure channel credentials used inside create is doing",
    "start": "1318000",
    "end": "1325200"
  },
  {
    "text": "and this is a fallback credential and what is that i'll come to that in a",
    "start": "1325200",
    "end": "1330720"
  },
  {
    "text": "bit now that xts channel conventional is uh",
    "start": "1330720",
    "end": "1336720"
  },
  {
    "text": "uh note that the xts channel credential is a way for a caller",
    "start": "1336720",
    "end": "1341760"
  },
  {
    "text": "to obtain the use of xds security conflict note that a caller can use a different",
    "start": "1341760",
    "end": "1347919"
  },
  {
    "text": "credential for example a keyr's current share with a channel in which case the xts separate",
    "start": "1347919",
    "end": "1353919"
  },
  {
    "text": "security config is ignored even if the rest of the configuration from xts",
    "start": "1353919",
    "end": "1359679"
  },
  {
    "text": "is used now back to fallback credential an xts credential also takes something",
    "start": "1359679",
    "end": "1366159"
  },
  {
    "text": "called a fallback credential which kicks in if xds doesn't supply any security configuration",
    "start": "1366159",
    "end": "1373760"
  },
  {
    "text": "so instead of choosing this uh choosing to treat this as a plain text or in secret communication",
    "start": "1373760",
    "end": "1380640"
  },
  {
    "text": "a caller can tell grpc to use fallback qrs credential",
    "start": "1380640",
    "end": "1386840"
  },
  {
    "text": "uh if we had used key res credential in in this particular uh",
    "start": "1386840",
    "end": "1393360"
  },
  {
    "text": "xps credentials ah this wraps up the",
    "start": "1393360",
    "end": "1399919"
  },
  {
    "text": "grpc and service mesh part of the presentation for more information you can look up a",
    "start": "1399919",
    "end": "1405919"
  },
  {
    "text": "previous coupon presentation that talks about",
    "start": "1405919",
    "end": "1412480"
  },
  {
    "text": "approximate grpc address in some detail",
    "start": "1412480",
    "end": "1417600"
  },
  {
    "text": "i have also included another coupon presentation last year that focused on",
    "start": "1417600",
    "end": "1422799"
  },
  {
    "text": "uh security in proxima service flash both of these talk about using the",
    "start": "1422799",
    "end": "1428080"
  },
  {
    "text": "proxima grpc service mesh in google cloud using google service mesh products",
    "start": "1428080",
    "end": "1433760"
  },
  {
    "text": "i have also included an sql block that talks about proximal service mesh in istio",
    "start": "1433760",
    "end": "1442159"
  },
  {
    "text": "uh now let's look at another aspect of microservices or the service mesh where effective use",
    "start": "1443520",
    "end": "1451200"
  },
  {
    "text": "of this paradigm could be handled by what we call observability or lack of it",
    "start": "1451200",
    "end": "1459600"
  },
  {
    "text": "observability in simple words is visibility into the internal goings-on in your service mesh",
    "start": "1459600",
    "end": "1467919"
  },
  {
    "text": "to the extent that you need that visibility for reliability and efficiency",
    "start": "1467919",
    "end": "1475279"
  },
  {
    "text": "for example if something breaks in your complex service mesh",
    "start": "1475279",
    "end": "1480880"
  },
  {
    "text": "or it is performing poorly how do you figure out where the problem is",
    "start": "1480880",
    "end": "1488159"
  },
  {
    "text": "is there any way the infrastructure or the software components can provide that required visibility",
    "start": "1488159",
    "end": "1496880"
  },
  {
    "text": "so let's talk about grpc observability and how that comes into play here",
    "start": "1496880",
    "end": "1504320"
  },
  {
    "text": "we in the grpc team are about to release grpc observability",
    "start": "1505679",
    "end": "1512000"
  },
  {
    "text": "which consists of logs metrics and traces the three main",
    "start": "1512000",
    "end": "1518320"
  },
  {
    "text": "pillars of observability i had talked about",
    "start": "1518320",
    "end": "1525039"
  },
  {
    "text": "grpc interceptors before we use the grpc interceptor framework",
    "start": "1525039",
    "end": "1532960"
  },
  {
    "text": "to inject our observability interceptors which generate the required raw data",
    "start": "1532960",
    "end": "1539760"
  },
  {
    "text": "for the three pillars this part is then integrated with exporters and backends",
    "start": "1539760",
    "end": "1547200"
  },
  {
    "text": "so that the raw data is massaged and sent through the exporter pipeline",
    "start": "1547200",
    "end": "1552880"
  },
  {
    "text": "to an appropriate analytics back end this integration provides",
    "start": "1552880",
    "end": "1559760"
  },
  {
    "text": "the end-to-end grpc observability",
    "start": "1559760",
    "end": "1564320"
  },
  {
    "text": "some more information about grpc observability or o11y as we",
    "start": "1565120",
    "end": "1572080"
  },
  {
    "text": "like to call it uh you have the app",
    "start": "1572080",
    "end": "1577679"
  },
  {
    "text": "developer uh the character uh the icon on the left left hand side in green",
    "start": "1577679",
    "end": "1584880"
  },
  {
    "text": "uh the app developer is building grpc applications using the latest grpc artifacts",
    "start": "1584880",
    "end": "1592480"
  },
  {
    "text": "that support observability the running apps are provided with",
    "start": "1592480",
    "end": "1597840"
  },
  {
    "text": "appropriate observability configuration by the developer or the sre",
    "start": "1597840",
    "end": "1606080"
  },
  {
    "text": "the grpc interceptors pump the relevant raw data",
    "start": "1606080",
    "end": "1613200"
  },
  {
    "text": "i mean the logs metrics and trace information through the",
    "start": "1613200",
    "end": "1619120"
  },
  {
    "text": "related exporters into the respective backends",
    "start": "1619120",
    "end": "1624159"
  },
  {
    "text": "here you see a logging back end and metrics backhand and that trace back in",
    "start": "1624159",
    "end": "1629840"
  },
  {
    "text": "these back ends then produce the required dashboards that are used by the consumer in this",
    "start": "1629840",
    "end": "1636400"
  },
  {
    "text": "case the sre uh to get the visibility",
    "start": "1636400",
    "end": "1642559"
  },
  {
    "text": "into the internal state of the application specifically as it is",
    "start": "1642559",
    "end": "1648880"
  },
  {
    "text": "related to grpc traffic",
    "start": "1648880",
    "end": "1653320"
  },
  {
    "text": "the grpc observability product runs in google cloud uh platform",
    "start": "1657440",
    "end": "1664080"
  },
  {
    "text": "on the producer side it has plugins for logging metrics and traces on the producer side you also include",
    "start": "1664080",
    "end": "1671360"
  },
  {
    "text": "the required exporters in the application namely the stackdriver exporters configured to send data to the google",
    "start": "1671360",
    "end": "1678320"
  },
  {
    "text": "cloud ops backend the product also has an admin console to",
    "start": "1678320",
    "end": "1683360"
  },
  {
    "text": "enable or otherwise administer the feature and then we have consumer dashboards",
    "start": "1683360",
    "end": "1689520"
  },
  {
    "text": "that provide some popular canned views or allow you to configure or customize",
    "start": "1689520",
    "end": "1694640"
  },
  {
    "text": "the views with customizable queries",
    "start": "1694640",
    "end": "1699760"
  },
  {
    "text": "let's see how all this works in java in java there is an artifact called grpc",
    "start": "1700320",
    "end": "1705679"
  },
  {
    "text": "gcp observability that you use in your application the artifact also pulls in other required",
    "start": "1705679",
    "end": "1713120"
  },
  {
    "text": "dependencies such as the stackdriver exporter in your java app you call an init",
    "start": "1713120",
    "end": "1720399"
  },
  {
    "text": "function at the beginning when the application is run in gcp and",
    "start": "1720399",
    "end": "1725840"
  },
  {
    "text": "an appropriate configuration is provided it automatically sends the required raw",
    "start": "1725840",
    "end": "1731279"
  },
  {
    "text": "data to the google cloud ops backend and you have observability",
    "start": "1731279",
    "end": "1738360"
  },
  {
    "text": "let's look at the java code snippet for an actual example in your main application uh class there",
    "start": "1738480",
    "end": "1745200"
  },
  {
    "text": "is a main method uh you call gcp observability.grpc init",
    "start": "1745200",
    "end": "1751440"
  },
  {
    "text": "to start observability in this case we are using try with resources so when the",
    "start": "1751440",
    "end": "1756640"
  },
  {
    "text": "try block exits close is also is automatically called",
    "start": "1756640",
    "end": "1762880"
  },
  {
    "text": "the whole application execution is inside the try block now you may choose to call pros",
    "start": "1762880",
    "end": "1769039"
  },
  {
    "text": "explicitly if you don't want to use try with resources",
    "start": "1769039",
    "end": "1775200"
  },
  {
    "text": "this is what the grpc observability configuration looks like there are enable disable flags for the",
    "start": "1776480",
    "end": "1783120"
  },
  {
    "text": "three pillars for logging there are filtering options to limit or filter the kind of rpc you",
    "start": "1783120",
    "end": "1790960"
  },
  {
    "text": "want to log we also have provided a filter to filter the kind of events you want to",
    "start": "1790960",
    "end": "1797360"
  },
  {
    "text": "log and finally there is a probabilistic sampler configuration where you specify",
    "start": "1797360",
    "end": "1803520"
  },
  {
    "text": "the sampling rate so with 0.5 uh",
    "start": "1803520",
    "end": "1808640"
  },
  {
    "text": "it will send only 50 of the cards which are underneath selected",
    "start": "1808640",
    "end": "1814880"
  },
  {
    "text": "uh to be for generating the trace data",
    "start": "1814880",
    "end": "1820158"
  },
  {
    "text": "and now one more thing about observability uh there is something called tags uh which are labels",
    "start": "1821279",
    "end": "1827840"
  },
  {
    "text": "attached to the lot and metrics data we automatically attach location tags",
    "start": "1827840",
    "end": "1833840"
  },
  {
    "text": "which identify the location or source information of where the data was generated for",
    "start": "1833840",
    "end": "1840559"
  },
  {
    "text": "example the vm name or the kubernetes cluster name or the namespace",
    "start": "1840559",
    "end": "1846640"
  },
  {
    "text": "we also allow the user to provide additional custom tags that could be used to provide additional",
    "start": "1846640",
    "end": "1854880"
  },
  {
    "text": "identification information such as the app id or the data center",
    "start": "1854880",
    "end": "1861360"
  },
  {
    "text": "and so on uh this is a screenshot of the consumer",
    "start": "1861360",
    "end": "1866559"
  },
  {
    "text": "dashboard as you can see we automatically provide suggested queries based on the",
    "start": "1866559",
    "end": "1873039"
  },
  {
    "text": "suggested date from the based on the ingested data and clicking on a suggested query will generate that",
    "start": "1873039",
    "end": "1879760"
  },
  {
    "text": "dashboard for example log records of grpcs that had errors",
    "start": "1879760",
    "end": "1887279"
  },
  {
    "text": "this is a screenshot of a log record of one of the grpcs that failed with the",
    "start": "1887279",
    "end": "1893120"
  },
  {
    "text": "deadline exceeded error the screenshot of a log record shows",
    "start": "1893120",
    "end": "1900320"
  },
  {
    "text": "the location and custom tags called labels are here the location tags have the cluster name",
    "start": "1900320",
    "end": "1907679"
  },
  {
    "text": "pod name project id and so on the custom custom tags contain the app",
    "start": "1907679",
    "end": "1914159"
  },
  {
    "text": "id and data center as supplied by the user's environment or the configuration",
    "start": "1914159",
    "end": "1922480"
  },
  {
    "text": "for grpc observability we have already released the login",
    "start": "1923919",
    "end": "1929519"
  },
  {
    "text": "feature in private preview the metrics and traces are coming soon",
    "start": "1929519",
    "end": "1937039"
  },
  {
    "text": "on almost as we speak uh these will be integrated with google",
    "start": "1937039",
    "end": "1942159"
  },
  {
    "text": "cloud monitoring entries",
    "start": "1942159",
    "end": "1945919"
  },
  {
    "text": "uh this is a screenshot of the upcoming metrics part of observability",
    "start": "1947440",
    "end": "1953360"
  },
  {
    "text": "you can filter by specific workloads such as the vm name",
    "start": "1953360",
    "end": "1958799"
  },
  {
    "text": "or vm instances or by uh location or custom tags",
    "start": "1958799",
    "end": "1965679"
  },
  {
    "text": "uh so that wraps up the whole presentation uh before closing",
    "start": "1965679",
    "end": "1971200"
  },
  {
    "text": "uh i would like uh those of you who are interested uh to know more about uh anything i mentioned here",
    "start": "1971200",
    "end": "1977919"
  },
  {
    "text": "or if you just want to meet the grpc maintainers you can go to grpc dot io slash meet",
    "start": "1977919",
    "end": "1985840"
  },
  {
    "text": "uh to submit a form and to get started uh grpc dot io",
    "start": "1985840",
    "end": "1992559"
  },
  {
    "text": "is a good starting point to get more information about grpc",
    "start": "1992559",
    "end": "1998000"
  },
  {
    "text": "uh thanks everyone so let me know if you have any questions",
    "start": "1998000",
    "end": "2005799"
  }
]