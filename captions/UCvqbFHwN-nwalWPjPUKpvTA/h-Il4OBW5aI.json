[
  {
    "text": "all right hello um good afternoon uh thank you all for coming to this presentation today",
    "start": "60",
    "end": "6540"
  },
  {
    "text": "um so today I'd like to talk about the titles beyond orchestration the cloud native runtimes ecosystem for",
    "start": "6540",
    "end": "12540"
  },
  {
    "text": "performance and security uh my name is Alexander um I'm from a project called unicraft",
    "start": "12540",
    "end": "19080"
  },
  {
    "text": "we're an open source uh Library operating system today I'm going to make a comparison between existing run times",
    "start": "19080",
    "end": "25800"
  },
  {
    "text": "for the cloud what they look like what it kind of looks like to deploy a",
    "start": "25800",
    "end": "31820"
  },
  {
    "text": "runtime in the cloud what it means for security and performance and how unicraft is trying to change the status",
    "start": "31820",
    "end": "37380"
  },
  {
    "text": "quo of what it is to have a performant and a secure application in the cloud",
    "start": "37380",
    "end": "43320"
  },
  {
    "text": "so the themes that I've noticed over the last few days here at kubecon going down",
    "start": "43320",
    "end": "48840"
  },
  {
    "text": "booze and going at lots of different uh talks is that there's a lot of cve",
    "start": "48840",
    "end": "54539"
  },
  {
    "text": "scanning package scanning there's applications that are you know we look",
    "start": "54539",
    "end": "59760"
  },
  {
    "text": "at a particular item and then we have some system to introspect it and we can do this in a number of different ways",
    "start": "59760",
    "end": "65880"
  },
  {
    "text": "and so there's also a number of Open Source projects that are doing this but there are also a number of you know",
    "start": "65880",
    "end": "71220"
  },
  {
    "text": "companies that are offering this as a service and this is sort of the idea here is we're",
    "start": "71220",
    "end": "77520"
  },
  {
    "text": "going to step back and kind of what's the problem here uh in overall right in the sense that we are looking at a",
    "start": "77520",
    "end": "84360"
  },
  {
    "text": "traditional system and the other one is performance and how",
    "start": "84360",
    "end": "89460"
  },
  {
    "text": "we tackle this and again it's a lot of introspection it's a lot of you know there's some different",
    "start": "89460",
    "end": "94860"
  },
  {
    "text": "themes here like we have ai models to look at traffic detection and then we optimize that way or we look at inside",
    "start": "94860",
    "end": "101880"
  },
  {
    "text": "and we change the libraries we compile them to make them more Specialized or we",
    "start": "101880",
    "end": "107280"
  },
  {
    "text": "have like slimmers like there's darker slim slim AI out of this there are a",
    "start": "107280",
    "end": "113640"
  },
  {
    "text": "number of ways that we can reduce what we have already to make it smaller",
    "start": "113640",
    "end": "119100"
  },
  {
    "text": "and therefore more performant and so overall in general what we're doing is we're introspecting and we're",
    "start": "119100",
    "end": "125399"
  },
  {
    "text": "looking at something and we're trying to find out ways to make it more secure and ways to make it more performant",
    "start": "125399",
    "end": "132360"
  },
  {
    "text": "and when we look at how we approach the runtime of things in the cloud",
    "start": "132360",
    "end": "138680"
  },
  {
    "text": "there are a number of different sort of solutions that are lightweight if you",
    "start": "138680",
    "end": "144780"
  },
  {
    "text": "look at some projects K3 Os from Rancher Venture RS of course this Linux kit and",
    "start": "144780",
    "end": "150300"
  },
  {
    "text": "this from VMware photon sort of a container runtime platform and these",
    "start": "150300",
    "end": "156959"
  },
  {
    "text": "projects they basically still rely on the traditional kernel stack",
    "start": "156959",
    "end": "162980"
  },
  {
    "text": "and they still run on top of a hypervisor and so what I'm trying to get at here is",
    "start": "162980",
    "end": "168780"
  },
  {
    "text": "that both the security and the performance are reliant on a traditional fashion that is the large kernel",
    "start": "168780",
    "end": "174900"
  },
  {
    "text": "hypervisor kernel the large Linux kernel right and there's a lot of problems with",
    "start": "174900",
    "end": "180720"
  },
  {
    "text": "this particular stack right and if we look at the container runtime",
    "start": "180720",
    "end": "185760"
  },
  {
    "text": "container D there's some new projects like lip k run run J Etc and they're",
    "start": "185760",
    "end": "190860"
  },
  {
    "text": "still sort of probing underneath it the operating system so as much as you're trying to tune this particular model",
    "start": "190860",
    "end": "197819"
  },
  {
    "text": "you're still relying on a sort of flat base that is sort of homogeneous across",
    "start": "197819",
    "end": "203099"
  },
  {
    "text": "the industry this is the living's kernel right um the problem I'm trying to get at",
    "start": "203099",
    "end": "208620"
  },
  {
    "text": "ultimately is that there's lots of layers of indirection lots of virtualization involved here that you",
    "start": "208620",
    "end": "214680"
  },
  {
    "text": "are so far away from your application your application so far away from the metal that is actually running on so",
    "start": "214680",
    "end": "220799"
  },
  {
    "text": "your pod is usually containing an application sometimes this you know it's",
    "start": "220799",
    "end": "226019"
  },
  {
    "text": "you can't even put two applications in it you like if you start a bash script and it spawns multiple processes",
    "start": "226019",
    "end": "232019"
  },
  {
    "text": "um this is then separated by namespace by the operating systems container runtime the container runtime is doing",
    "start": "232019",
    "end": "237299"
  },
  {
    "text": "Communications with the OS and then finally it's running on top of a hypervisor lots of indirection and this is creating",
    "start": "237299",
    "end": "244500"
  },
  {
    "text": "the problem here this is the security that we have to look at now across many different layers and there's the",
    "start": "244500",
    "end": "251040"
  },
  {
    "text": "performance penalty of having all of those layers um and of course you know the security",
    "start": "251040",
    "end": "256979"
  },
  {
    "text": "part here your Cube system things mingling with your pods so if we try and tackle the problem",
    "start": "256979",
    "end": "264180"
  },
  {
    "text": "sort of at the lowest level we try and reduce Linux so the you know the monolithic kernel that we have we find",
    "start": "264180",
    "end": "271020"
  },
  {
    "text": "that it's actually very difficult and so we did a study where we looked at the",
    "start": "271020",
    "end": "276240"
  },
  {
    "text": "dependencies between different modules inside of the Linux kernel we use a program called C scope if one function",
    "start": "276240",
    "end": "282479"
  },
  {
    "text": "was referenced in another module then we counted that as a individual reference",
    "start": "282479",
    "end": "287520"
  },
  {
    "text": "and then you can see this sort of maze of graphs between major you know subsystems within Linux so it's very",
    "start": "287520",
    "end": "293220"
  },
  {
    "text": "difficult actually to pull apart the Linux kernel despite there being tools to optimize it despite their being",
    "start": "293220",
    "end": "299100"
  },
  {
    "text": "systems to try and reduce it further um this is where I get to introduce to",
    "start": "299100",
    "end": "305100"
  },
  {
    "text": "you the concept of unicorns a uni kernel is a way of approaching",
    "start": "305100",
    "end": "310820"
  },
  {
    "text": "looking at the deployment model for your application and rethinking about what we",
    "start": "310820",
    "end": "318780"
  },
  {
    "text": "need to actually run the application truly so if you look at the full stack application here you have your",
    "start": "318780",
    "end": "325620"
  },
  {
    "text": "application of course its third party libraries and dependencies that you need for it to run but then of course on top",
    "start": "325620",
    "end": "331139"
  },
  {
    "text": "of it is the traditional stack that is the kernel it's the operating system this might be a distribution for example",
    "start": "331139",
    "end": "337560"
  },
  {
    "text": "and then finally it's sitting on top of platform and Hardware stepping back from the 30 years of",
    "start": "337560",
    "end": "343979"
  },
  {
    "text": "research and development that's gone into Linux and to all other operating systems and picking apart the different",
    "start": "343979",
    "end": "349800"
  },
  {
    "text": "parts that we need we can sort of think about it as a library of os Colonel Os",
    "start": "349800",
    "end": "356880"
  },
  {
    "text": "or kernel libraries right and you can pick and choose and so the uni kernel model is where you select the necessary",
    "start": "356880",
    "end": "363539"
  },
  {
    "text": "libraries for it to become a kernel and then go through a process of building it and constructing it to result in what is",
    "start": "363539",
    "end": "370500"
  },
  {
    "text": "a final unicorn or binary image the Unicorn binary image has a number of",
    "start": "370500",
    "end": "376500"
  },
  {
    "text": "different properties it's something called compile time specialization where you are taking",
    "start": "376500",
    "end": "382440"
  },
  {
    "text": "application and you're making it during a CI CD process for example more specialized towards its Target",
    "start": "382440",
    "end": "389880"
  },
  {
    "text": "it is a lightweight virtual machine so it is capable of booting by itself it's",
    "start": "389880",
    "end": "395400"
  },
  {
    "text": "if you think about compiling something with GCC or go build it's a similar process where the end result this is a",
    "start": "395400",
    "end": "402120"
  },
  {
    "text": "binary that can boot right in the same way that you have VM Linux",
    "start": "402120",
    "end": "407819"
  },
  {
    "text": "it has a single sealed address space so there's no longer a separation between",
    "start": "407819",
    "end": "413100"
  },
  {
    "text": "kernel space and user space they're all one of the same which means every Cisco",
    "start": "413100",
    "end": "418440"
  },
  {
    "text": "is no longer a guard between a permission check it is just a it's just",
    "start": "418440",
    "end": "423720"
  },
  {
    "text": "a function call so what was for example 300 CPU Cycles to make that check is now",
    "start": "423720",
    "end": "430560"
  },
  {
    "text": "only a few CPU Cycles no syscals right it only does one thing so there are no",
    "start": "430560",
    "end": "438660"
  },
  {
    "text": "other processes that are running at a single process there's no SSH there's no",
    "start": "438660",
    "end": "444300"
  },
  {
    "text": "system D it is literally just your application",
    "start": "444300",
    "end": "449000"
  },
  {
    "text": "um and then it was also targeted directly for a hardware platform combination so",
    "start": "449340",
    "end": "456539"
  },
  {
    "text": "um it will if you're you know Target for an architecture but then also for the hypervisor that it will ultimately run",
    "start": "456539",
    "end": "462900"
  },
  {
    "text": "on whether that's KVM for example or Zen VMware hyper-v Etc",
    "start": "462900",
    "end": "469259"
  },
  {
    "text": "so this is what unicraft does unicraft is a uni kernel development kit we started as a Zen incubator project",
    "start": "469259",
    "end": "476039"
  },
  {
    "text": "around 2017 and we're actually Linux Foundation",
    "start": "476039",
    "end": "481979"
  },
  {
    "text": "um but we're trying to break in sort of into the cloud native space because it makes quite a good use case for example",
    "start": "481979",
    "end": "488099"
  },
  {
    "text": "for lightweight serverless functions lambdas Etc um so there's a little bit about our",
    "start": "488099",
    "end": "495120"
  },
  {
    "text": "community um so we started off as research we have a lot of industrial Partners a lot of",
    "start": "495120",
    "end": "500639"
  },
  {
    "text": "universities that we work with and a lot of contributors that are still with us",
    "start": "500639",
    "end": "507199"
  },
  {
    "text": "um the complexity and so the next few slides are just a little bit about the result of building something as a",
    "start": "507780",
    "end": "513959"
  },
  {
    "text": "unicorn the complexity of your final kernel image is a lot simpler and makes",
    "start": "513959",
    "end": "519120"
  },
  {
    "text": "it a lot easier to debug for example so if you remember that sort of mesh graph that we showed before for Linux this is",
    "start": "519120",
    "end": "526020"
  },
  {
    "text": "that same program running now only for unicraft and this is nginx compiled",
    "start": "526020",
    "end": "531380"
  },
  {
    "text": "against unique craft so it's now an nginx uni kernel and there's also just a",
    "start": "531380",
    "end": "536640"
  },
  {
    "text": "hello world that just simply boots and prints the words hello world um we did a performance comparison",
    "start": "536640",
    "end": "543180"
  },
  {
    "text": "against unicraft and then a number of other Technologies and of course Docker",
    "start": "543180",
    "end": "548220"
  },
  {
    "text": "running on container D and then Linux bare metal for example this is we have a",
    "start": "548220",
    "end": "555000"
  },
  {
    "text": "physical machine we installed Linux we ran nginx on it we pinned nginx to a core and then in comparison here it sort",
    "start": "555000",
    "end": "562740"
  },
  {
    "text": "of really demonstrates that the cost between jumping from the user space",
    "start": "562740",
    "end": "567779"
  },
  {
    "text": "space right if you're doing like a read or a right or you know doing some i o path into kernel space really has a",
    "start": "567779",
    "end": "574260"
  },
  {
    "text": "performance penalty so there's a 82 percent increase in comparison compared",
    "start": "574260",
    "end": "579540"
  },
  {
    "text": "to docker memory requirements of course also go down so unicraft here on the far left",
    "start": "579540",
    "end": "585260"
  },
  {
    "text": "only using a few megabytes of memory that are required to run any particular application here the different",
    "start": "585260",
    "end": "591120"
  },
  {
    "text": "applications and we also support a number of",
    "start": "591120",
    "end": "596279"
  },
  {
    "text": "different virtual machine monitors platforms basically so we can run on firecracker and here you can see that",
    "start": "596279",
    "end": "603420"
  },
  {
    "text": "you can boot a simple hello world application and this little 3.1 milliseconds this was as a virtual",
    "start": "603420",
    "end": "609600"
  },
  {
    "text": "machine um just for fun um we were playing around with Edge",
    "start": "609600",
    "end": "615120"
  },
  {
    "text": "devices it makes sense um it's given the sort of low resource capabilities so this is on Raspberry Pi",
    "start": "615120",
    "end": "622320"
  },
  {
    "text": "the amount of time it takes to boot actually and get something to work so here we have nginx for example",
    "start": "622320",
    "end": "628320"
  },
  {
    "text": "booting in only 92 milliseconds compared to when we installed Alpine Linux and here we even you know customized the",
    "start": "628320",
    "end": "635279"
  },
  {
    "text": "Linux kernel so that it had for example um security mitigations turned off so",
    "start": "635279",
    "end": "641700"
  },
  {
    "text": "that there weren't extra guards in between different process calls a little bit of comparison for CPU",
    "start": "641700",
    "end": "649500"
  },
  {
    "text": "cycles and how long it takes uh Linux and KVM is sort of generally this 200",
    "start": "649500",
    "end": "654720"
  },
  {
    "text": "CPU cycles and then a unicraft is a lot less because there's no uh check now between the memory and user",
    "start": "654720",
    "end": "664019"
  },
  {
    "text": "space in kernel space um the transport is obviously now a lot smaller because you're no longer having",
    "start": "664019",
    "end": "670500"
  },
  {
    "text": "to ship a full file system containing shared libraries with things that you might not necessarily actually use for",
    "start": "670500",
    "end": "676980"
  },
  {
    "text": "your application so if you looked at nginx and we pulled the same version here it contains shared libraries that are",
    "start": "676980",
    "end": "683760"
  },
  {
    "text": "not statically linked against the nginx binary so they're required and they contain functionality that you don't",
    "start": "683760",
    "end": "689459"
  },
  {
    "text": "necessarily need but with unicraft you literally compile all the necessary libraries that you need and then you can",
    "start": "689459",
    "end": "695279"
  },
  {
    "text": "go even further you can actually do compile time specialization strategies such as link time optimization dead code",
    "start": "695279",
    "end": "701220"
  },
  {
    "text": "elimination Etc um as a result there's a reduced attack",
    "start": "701220",
    "end": "706980"
  },
  {
    "text": "surface so you have no shell there's no way to penetrate sort of externally if there's exposed",
    "start": "706980",
    "end": "713700"
  },
  {
    "text": "ports there we have the opportunity to specialize the the memory so you can do",
    "start": "713700",
    "end": "719459"
  },
  {
    "text": "aslr every time you rebuild the kernel you can make it a unique",
    "start": "719459",
    "end": "725040"
  },
  {
    "text": "and you get now the lowest level of isolation that is provided by to you",
    "start": "725040",
    "end": "730920"
  },
  {
    "text": "that is Hardware right the virtual machine is still the standard unit of security in the cloud and you still",
    "start": "730920",
    "end": "736260"
  },
  {
    "text": "provision containers inside of virtual machines and now you get actually this but without the overhead and then",
    "start": "736260",
    "end": "742920"
  },
  {
    "text": "there's lots of specific CPU security features that you can",
    "start": "742920",
    "end": "748920"
  },
  {
    "text": "enable given a certain use case so we have a lot of arm support we have a",
    "start": "748920",
    "end": "755940"
  },
  {
    "text": "partner that uses it in automobile for example in an automobile use case and they sort of adds additional security",
    "start": "755940",
    "end": "762660"
  },
  {
    "text": "features based on the arm architecture um and then actually as of today we",
    "start": "762660",
    "end": "768720"
  },
  {
    "text": "released a new tool called craft kit um and it's a command line companion",
    "start": "768720",
    "end": "773940"
  },
  {
    "text": "tool that helps you build uni kernels uh quickly and easily so the idea is here",
    "start": "773940",
    "end": "779279"
  },
  {
    "text": "alongside the Library operating system is that you have um like a tool that basically lets you",
    "start": "779279",
    "end": "786720"
  },
  {
    "text": "grab all the libraries that you do need and also you you know you add a simple craft file to your repository it looks a little bit",
    "start": "786720",
    "end": "794040"
  },
  {
    "text": "like this you can then list all the libraries that you will necessarily need you know if you need TCP IP stack or if",
    "start": "794040",
    "end": "800579"
  },
  {
    "text": "you need this is new lib which is a lib C which provides basic functionality at your application the idea is that you",
    "start": "800579",
    "end": "806760"
  },
  {
    "text": "didn't go fetch those libraries with this tool called crafted and then just build it and out pops a unique kernel",
    "start": "806760",
    "end": "813060"
  },
  {
    "text": "you can then also use the same tool to build different packages so you can make",
    "start": "813060",
    "end": "819180"
  },
  {
    "text": "it OCR make it look like an OCA archive or you can also then push it to a",
    "start": "819180",
    "end": "824220"
  },
  {
    "text": "registry and then you can then use it sort of in production",
    "start": "824220",
    "end": "829510"
  },
  {
    "text": "[Music] um our goal with unicraft is to try and be the new unit of runtime so that people",
    "start": "829510",
    "end": "837779"
  },
  {
    "text": "can leverage not only better performance but better security and to do this we want to introduce",
    "start": "837779",
    "end": "844860"
  },
  {
    "text": "unicraft into this ecosystem by making lots of Integrations and today I'll quickly go over one of those",
    "start": "844860",
    "end": "850560"
  },
  {
    "text": "Integrations and this is for running on kubernetes so there's a lot of tools out there that",
    "start": "850560",
    "end": "857820"
  },
  {
    "text": "already allow you to run virtual machines or manage virtual machines through kubernetes",
    "start": "857820",
    "end": "863579"
  },
  {
    "text": "Lima is a new addition to the cncf space and there's also cute bird that's kind of containers and and they still rely",
    "start": "863579",
    "end": "871500"
  },
  {
    "text": "however on the idea that you are running your container within a virtual machine",
    "start": "871500",
    "end": "877740"
  },
  {
    "text": "and so if you deep dig deep dive into the source code it still has this",
    "start": "877740",
    "end": "883019"
  },
  {
    "text": "requirement to SSH into that virtual machine and launch a container right so",
    "start": "883019",
    "end": "888720"
  },
  {
    "text": "it looks you know it looks like a part it shows up as a pod it has all the right sort of characteristics of feeling like it's Cloud native but you're still",
    "start": "888720",
    "end": "894600"
  },
  {
    "text": "managing this big bulky Linux kernel with a container inside of it and so",
    "start": "894600",
    "end": "901440"
  },
  {
    "text": "obviously you're still going to have the negative effects of performance and then by total implicit because SSH is",
    "start": "901440",
    "end": "909540"
  },
  {
    "text": "required you're now exposing an additional attack vector so we investigated how best to approach",
    "start": "909540",
    "end": "916860"
  },
  {
    "text": "making this integration and to do this one of the ways we can do this with",
    "start": "916860",
    "end": "922680"
  },
  {
    "text": "container D and by making the unicorn look and feel like a container and then",
    "start": "922680",
    "end": "929279"
  },
  {
    "text": "that's by wrapping it in oci image and using the oci runtime specification",
    "start": "929279",
    "end": "936180"
  },
  {
    "text": "um so maybe you're familiar with wonk we're making something called run you um",
    "start": "936180",
    "end": "941880"
  },
  {
    "text": "it's a very high level right this is uh showing how we sort of connect between a",
    "start": "941880",
    "end": "947399"
  },
  {
    "text": "controller node and physical nodes or virtual you know worker nodes what's important here is the interaction",
    "start": "947399",
    "end": "953639"
  },
  {
    "text": "between the container runtime and the host and so the rest of it is just",
    "start": "953639",
    "end": "959760"
  },
  {
    "text": "exposing the right apis so that contains so that kubernetes looks and sees things",
    "start": "959760",
    "end": "966540"
  },
  {
    "text": "as pods or services but we have to manipulate the host itself to be able to",
    "start": "966540",
    "end": "974579"
  },
  {
    "text": "run the Unicorn so we have to install additional tools and I'm going to show you what that looks like so this is sort",
    "start": "974579",
    "end": "980399"
  },
  {
    "text": "of the only bit that needs to be changed right in the whole model um so the basic process goes along where",
    "start": "980399",
    "end": "987000"
  },
  {
    "text": "we have the kubernetes control plane which has a request to create a pod and then goes to cubelet creates a Sandbox",
    "start": "987000",
    "end": "993360"
  },
  {
    "text": "plug with container D and this invokes actually something called a shim",
    "start": "993360",
    "end": "999180"
  },
  {
    "text": "program right so basically a binary and it accepts ttrbc requests or it could also be grbc",
    "start": "999180",
    "end": "1006500"
  },
  {
    "text": "requests um and this binary basically invokes a run something program and then this",
    "start": "1006500",
    "end": "1013639"
  },
  {
    "text": "invokes the ultimate uh like system that's creating it previously a",
    "start": "1013639",
    "end": "1019220"
  },
  {
    "text": "container but in this case a uni kernel and so in the previous case or in the normal cases invoking run C run C then",
    "start": "1019220",
    "end": "1027079"
  },
  {
    "text": "starts a namespace you know it's agreement it does truth creates this file system for you and offloads",
    "start": "1027079",
    "end": "1034699"
  },
  {
    "text": "everything into the file system from the Otay archive and then starts the process with the given environment but this is",
    "start": "1034699",
    "end": "1041058"
  },
  {
    "text": "where we inject ourselves in the whole process we create a run new shim the run",
    "start": "1041059",
    "end": "1046100"
  },
  {
    "text": "new shim then invokes the instantiation of a kernel using whatever virtual",
    "start": "1046100",
    "end": "1051140"
  },
  {
    "text": "machine monitor tool that you would like for example for example kmu or firecracker",
    "start": "1051140",
    "end": "1057140"
  },
  {
    "text": "um it's very simple to install you basically add one line under this",
    "start": "1057140",
    "end": "1062240"
  },
  {
    "text": "prefix saying uh this and then it knows where to get",
    "start": "1062240",
    "end": "1067480"
  },
  {
    "text": "the binary because you've also listed the binary name and this is important because then you can then specify that",
    "start": "1067480",
    "end": "1074120"
  },
  {
    "text": "you would like to run a unicorn as opposed to a container later on in your kubernetes manifest",
    "start": "1074120",
    "end": "1080980"
  },
  {
    "text": "then all you have to do is build a binary this is so we built a binary code run you it'll the interface",
    "start": "1081280",
    "end": "1088039"
  },
  {
    "text": "is basically creating sub commands and these are the sub commands necessary to start an instance based in this whole",
    "start": "1088039",
    "end": "1095419"
  },
  {
    "text": "life cycle and then these basically map to the instantiation of a virtual machine",
    "start": "1095419",
    "end": "1103240"
  },
  {
    "text": "um so to then make the uni kernel feel like it's a container we used oci which",
    "start": "1103640",
    "end": "1109460"
  },
  {
    "text": "is basically a turbo and inside the turbo you put things inside of it um so we put the kernel but that means",
    "start": "1109460",
    "end": "1116000"
  },
  {
    "text": "that we're complicit with the rest of the space it means we can put this unit",
    "start": "1116000",
    "end": "1121580"
  },
  {
    "text": "kernel into existing oci Registries and we actually use a tool called oras that",
    "start": "1121580",
    "end": "1126740"
  },
  {
    "text": "they're here actually a kubecon um that basically allows you to take arbitrary files and put them into the",
    "start": "1126740",
    "end": "1133220"
  },
  {
    "text": "registry and so if you follow the tree you basically end up getting this is what",
    "start": "1133220",
    "end": "1139760"
  },
  {
    "text": "the binary looks like its file name and then you can also have an init RAM for example and the process here is that containerd",
    "start": "1139760",
    "end": "1147380"
  },
  {
    "text": "goes to the Oscar registry retrieves it unpacks it and then goes through",
    "start": "1147380",
    "end": "1153860"
  },
  {
    "text": "actually craft kit to then unbundle it and have the file system where the",
    "start": "1153860",
    "end": "1159020"
  },
  {
    "text": "Unicorn is available and so the result here so I showed you",
    "start": "1159020",
    "end": "1165320"
  },
  {
    "text": "previously that we had this virtual machine and inside the virtual machine with the container here we now have",
    "start": "1165320",
    "end": "1171440"
  },
  {
    "text": "direct access to the hardware so this is what the model finally looks like",
    "start": "1171440",
    "end": "1176500"
  },
  {
    "text": "so we're still working on this there's a lot of work to still do there's still uh",
    "start": "1178820",
    "end": "1184340"
  },
  {
    "text": "um when we're having regular meetings and we're sort of building more Integrations with more Cloud native uh",
    "start": "1184340",
    "end": "1191240"
  },
  {
    "text": "tools and so one of the things that we found was that the oci archive",
    "start": "1191240",
    "end": "1197120"
  },
  {
    "text": "specification was very limiting it has there's a lot of opportunity to put more",
    "start": "1197120",
    "end": "1202880"
  },
  {
    "text": "metadata into the oci archive for example if you look at the specification",
    "start": "1202880",
    "end": "1208039"
  },
  {
    "text": "provided by the runtime spec the runtime spec has very limited information about",
    "start": "1208039",
    "end": "1213980"
  },
  {
    "text": "what the host is capable of doing and you basically just specify for example that there is an OS and what OS its name",
    "start": "1213980",
    "end": "1222440"
  },
  {
    "text": "is and that basically is a map of like Linux FreeBSD Windows Mac or something like this and but this is very",
    "start": "1222440",
    "end": "1229700"
  },
  {
    "text": "a closed view of what's actually capable in the hardware you could for example expose more information about what",
    "start": "1229700",
    "end": "1236240"
  },
  {
    "text": "capabilities the hardware have or what drivers are available what system services are available",
    "start": "1236240",
    "end": "1242480"
  },
  {
    "text": "um for example whether you have a particular file system available to you or not or how much of that file system",
    "start": "1242480",
    "end": "1248900"
  },
  {
    "text": "and of course it also indicates what architecture is is but it doesn't indicate for example which architecture",
    "start": "1248900",
    "end": "1255320"
  },
  {
    "text": "extension it is for example for arm so there's more information there's a lack",
    "start": "1255320",
    "end": "1260600"
  },
  {
    "text": "of information we found with the oci specification and we'd love to be able to collaborate and find Opportunities to",
    "start": "1260600",
    "end": "1266480"
  },
  {
    "text": "make this more rich um of course with uni kernels since there are specialized Services",
    "start": "1266480",
    "end": "1273080"
  },
  {
    "text": "um and their compile time specialization means that you can do there's",
    "start": "1273080",
    "end": "1278840"
  },
  {
    "text": "opportunity to make it even more performant or even more secure if you really know what is happening at the end",
    "start": "1278840",
    "end": "1284419"
  },
  {
    "text": "so unicorns usually find a good place in the edge where Hardware resources are",
    "start": "1284419",
    "end": "1289760"
  },
  {
    "text": "limited but at the same time if you are understanding what the scheduling of services might be for example if you're",
    "start": "1289760",
    "end": "1297020"
  },
  {
    "text": "co-locating Services you could specialize those uni kernels to be better co-located for example you could",
    "start": "1297020",
    "end": "1303799"
  },
  {
    "text": "do shared memory Pages by compiling a special library that then allows you to",
    "start": "1303799",
    "end": "1309260"
  },
  {
    "text": "do shared memory rings um so being able to tap in for example",
    "start": "1309260",
    "end": "1315200"
  },
  {
    "text": "to the scheduling or the scheduler for kubernetes for example and understand how it's going to schedule Services",
    "start": "1315200",
    "end": "1321620"
  },
  {
    "text": "could benefit unit kernels but there's some open challenges here like you have",
    "start": "1321620",
    "end": "1326659"
  },
  {
    "text": "to pre-compile it or you know how does it how what does the deployment model look like do you put this into the oci archive for example",
    "start": "1326659",
    "end": "1333440"
  },
  {
    "text": "and then of course the same problem before about the host like there's lots of opportunities to create",
    "start": "1333440",
    "end": "1339520"
  },
  {
    "text": "many permutations for a given unique kernel in the same way that you have",
    "start": "1339520",
    "end": "1344840"
  },
  {
    "text": "several permutations for a normal OCR archive for when you compile it against several different architectures",
    "start": "1344840",
    "end": "1352460"
  },
  {
    "text": "so this kind of is the result of the talk thank you so much for listening um please do join our Discord or give us",
    "start": "1352460",
    "end": "1359539"
  },
  {
    "text": "a star on GitHub uh yeah my name is Alexander and I'm happy to listen to any questions and answer them thank you",
    "start": "1359539",
    "end": "1367510"
  },
  {
    "text": "[Applause]",
    "start": "1367510",
    "end": "1372079"
  },
  {
    "text": "thank you for the talk it's great I have a question regarding like debugging and",
    "start": "1383120",
    "end": "1388940"
  },
  {
    "text": "just logging in general so in this case sounds like the Unicorno just have very",
    "start": "1388940",
    "end": "1394280"
  },
  {
    "text": "limited number of processes and how if I'm a user or develop how do I",
    "start": "1394280",
    "end": "1400640"
  },
  {
    "text": "debug or log in things or metrics obserability in this kind of sure yeah so I mean with unicraft particularly we",
    "start": "1400640",
    "end": "1408799"
  },
  {
    "text": "have a built-in GDP server so if you wanted to like debug it it would feel like a normal experience with you know",
    "start": "1408799",
    "end": "1415520"
  },
  {
    "text": "debugging a program and so this is if you're if you're you know debugging a compile time language",
    "start": "1415520",
    "end": "1422320"
  },
  {
    "text": "such as C Rost go for example you could use these features and it would feel very normal to you but at the same time",
    "start": "1422320",
    "end": "1430460"
  },
  {
    "text": "you can also just debug it in the normal user space environment and then the last",
    "start": "1430460",
    "end": "1435679"
  },
  {
    "text": "step would be to compile it as a uni kernel um it's really only if you wanted to compile you know debug the kernel itself",
    "start": "1435679",
    "end": "1442640"
  },
  {
    "text": "um and then for runtime languages such as JavaScript and python we have pre-built unique kernel images for those",
    "start": "1442640",
    "end": "1449240"
  },
  {
    "text": "runtimes so you would just Mount those files into a file system and then they would start executing in the normal way",
    "start": "1449240",
    "end": "1455059"
  },
  {
    "text": "that you invoke you know Python and then your program name this is on to your question",
    "start": "1455059",
    "end": "1462039"
  },
  {
    "text": "is is there a way like during the runtime can I be able to I guess I",
    "start": "1463720",
    "end": "1469700"
  },
  {
    "text": "cannot access into the workload right so so there's a number of observability",
    "start": "1469700",
    "end": "1475360"
  },
  {
    "text": "systems that we can attach to unicraft as well such as Prometheus and then you",
    "start": "1475360",
    "end": "1480559"
  },
  {
    "text": "get really fine-grained access to the whole kernel and what's happening as well so for example you could look at",
    "start": "1480559",
    "end": "1486320"
  },
  {
    "text": "the way the TCP IP stack is handling your load as well um it really depends on what you want to",
    "start": "1486320",
    "end": "1492140"
  },
  {
    "text": "see and when if you want to just try and debug it because you're getting like a program error it would be a different",
    "start": "1492140",
    "end": "1498039"
  },
  {
    "text": "sort of model here maybe locally as opposed to when you're doing in production then you would have you know",
    "start": "1498039",
    "end": "1503539"
  },
  {
    "text": "these monitorings exposed and as for example as a library I see okay uh and I have another",
    "start": "1503539",
    "end": "1510500"
  },
  {
    "text": "question so for the i o disk IO Network in this",
    "start": "1510500",
    "end": "1517580"
  },
  {
    "text": "case do you and do you just add more like a kind of module like how do you enable for",
    "start": "1517580",
    "end": "1524240"
  },
  {
    "text": "example but I will now work and also the disk IO yep so virtio is supported",
    "start": "1524240",
    "end": "1531679"
  },
  {
    "text": "number of different fertile platform drivers um and so if you know what your target",
    "start": "1531679",
    "end": "1538220"
  },
  {
    "text": "is if you want to for example use KVM with vertio you would then use those",
    "start": "1538220",
    "end": "1543679"
  },
  {
    "text": "particular libraries you would enable them we have similar have you ever seen like make menuconfig you open up and",
    "start": "1543679",
    "end": "1550159"
  },
  {
    "text": "make menu config this is one of the configuration systems for unicraft it's K conflict base and you can go in there",
    "start": "1550159",
    "end": "1555440"
  },
  {
    "text": "and select the different libraries that you want on the different platforms and based on the platform you have selected",
    "start": "1555440",
    "end": "1561320"
  },
  {
    "text": "it will unlock other different configuration options that you can then set um but there's a number of different",
    "start": "1561320",
    "end": "1567260"
  },
  {
    "text": "file systems that we do support nine PFS for example this um so this goes over",
    "start": "1567260",
    "end": "1573380"
  },
  {
    "text": "the vertio you can also run things in init Ram this is the most performant as",
    "start": "1573380",
    "end": "1578659"
  },
  {
    "text": "a ram file system um yeah so in that case given normally you have",
    "start": "1578659",
    "end": "1587059"
  },
  {
    "text": "this kernel space and user space acceleration but with unique kernel assumes you don't have the acceleration",
    "start": "1587059",
    "end": "1592460"
  },
  {
    "text": "is there any that actually has security implication now with all these different uh well our",
    "start": "1592460",
    "end": "1601159"
  },
  {
    "text": "protocols potentially the application can more easily to explore that if there's",
    "start": "1601159",
    "end": "1609140"
  },
  {
    "text": "any bugs in these protocols right so when you are now the building your",
    "start": "1609140",
    "end": "1614659"
  },
  {
    "text": "application as a unicorn you trust more of the code base because you it is only the few libraries that are necessary for",
    "start": "1614659",
    "end": "1621559"
  },
  {
    "text": "it to be a virtual machine you are no longer reliant on the full Linux kernel",
    "start": "1621559",
    "end": "1626900"
  },
  {
    "text": "that has its vulnerabilities or it's you know it's a there's ways to exploit this for example um",
    "start": "1626900",
    "end": "1632360"
  },
  {
    "text": "but there are a number of security mechanisms that you can also enable like ubisan KSN there's also specific",
    "start": "1632360",
    "end": "1641740"
  },
  {
    "text": "architectural security features like on peoth that you can enable for the",
    "start": "1641740",
    "end": "1647539"
  },
  {
    "text": "Unicorn that adds security or increase the security of the image at the end you",
    "start": "1647539",
    "end": "1653960"
  },
  {
    "text": "can also do image signing for example when you do transportation thank you of course",
    "start": "1653960",
    "end": "1661000"
  },
  {
    "text": "any other questions what are the most popular use cases for",
    "start": "1661520",
    "end": "1668480"
  },
  {
    "text": "unit kernels today yeah so um either a cloud application things that",
    "start": "1668480",
    "end": "1675980"
  },
  {
    "text": "are usually High IO um so web servers caches",
    "start": "1675980",
    "end": "1681700"
  },
  {
    "text": "in-memory key value stores we also found that anything that runs on",
    "start": "1681700",
    "end": "1687080"
  },
  {
    "text": "low resource usage a low resource capable devices so closer to the edge",
    "start": "1687080",
    "end": "1693340"
  },
  {
    "text": "they perform very well um but you can build for example your",
    "start": "1693340",
    "end": "1699140"
  },
  {
    "text": "golang application or rust application in like normally and make it a unicorn",
    "start": "1699140",
    "end": "1704659"
  },
  {
    "text": "at the end and then you can run this and we also support major Cloud vendors such as AWS gcp Etc so you can deploy your",
    "start": "1704659",
    "end": "1712220"
  },
  {
    "text": "uni kernel as a virtual machine there and then you don't have to use as much resources as well compared to running it",
    "start": "1712220",
    "end": "1719299"
  },
  {
    "text": "as a full virtual machine so you can save on costs compared to installing a traditionally bloated kernel within a",
    "start": "1719299",
    "end": "1726320"
  },
  {
    "text": "container runtime and and then your application or just you know your application",
    "start": "1726320",
    "end": "1732820"
  },
  {
    "text": "hi hi um so you said that you support uh major",
    "start": "1738260",
    "end": "1743360"
  },
  {
    "text": "Cloud providers um can I take that virtual machine and throw it in a kubernetes cluster on any",
    "start": "1743360",
    "end": "1749840"
  },
  {
    "text": "of these Cloud providers it's a good question so some of these Cloud providers do not offer uh nested",
    "start": "1749840",
    "end": "1755960"
  },
  {
    "text": "virtualization such as AWS but we are working on a mechanism that allows you",
    "start": "1755960",
    "end": "1761299"
  },
  {
    "text": "to run for example an ec2 instance that's managed by a kubernetes instance so this whole workflow that I showed you",
    "start": "1761299",
    "end": "1766940"
  },
  {
    "text": "with this container a shim layer and you know it's managing the virtual machine",
    "start": "1766940",
    "end": "1772580"
  },
  {
    "text": "monitor underneath one of the ways we will extend this in the future is to be able to add support for cloud vendors",
    "start": "1772580",
    "end": "1778760"
  },
  {
    "text": "and so it would provision as an ec2 instance and it would look like a pod still makes sense thank you no worries",
    "start": "1778760",
    "end": "1787778"
  },
  {
    "text": "any other questions it's pretty much good perfect thank you so much",
    "start": "1791419",
    "end": "1798880"
  }
]