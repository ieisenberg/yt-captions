[
  {
    "text": "welcome everyone thanks for joining me in this session about bus service about",
    "start": "260",
    "end": "6120"
  },
  {
    "text": "service and in particular stateful service a more descriptive title would",
    "start": "6120",
    "end": "12090"
  },
  {
    "text": "probably been towards stateful service but once I figured that out it was too",
    "start": "12090",
    "end": "17850"
  },
  {
    "text": "late to change the abstract anyway my name is Jonas blue near I'm the CTO and co-founder of light urban decay's",
    "start": "17850",
    "end": "24750"
  },
  {
    "text": "it's a company behind Scala programming language you might have heard of ARCA play web framework and some other and",
    "start": "24750",
    "end": "31830"
  },
  {
    "text": "some of the tools and I'll start this",
    "start": "31830",
    "end": "36870"
  },
  {
    "text": "discussion by trying to frame it to explain to you you know sort of the title of the title of applications that",
    "start": "36870",
    "end": "45270"
  },
  {
    "text": "I think really needs to live a really really leveraged stateful stateful",
    "start": "45270",
    "end": "51180"
  },
  {
    "text": "design and a stateful thinking so you so we can sort of frame it this discussion",
    "start": "51180",
    "end": "56340"
  },
  {
    "text": "to the type of systems that it's most applicable to so starting with some",
    "start": "56340",
    "end": "62190"
  },
  {
    "text": "industry trends I mean the last 10 15 years have radically changed for us as developers we use it drastically new new",
    "start": "62190",
    "end": "70380"
  },
  {
    "text": "world you know we started sir we've started from you know it was not that long time ago that we would develop for",
    "start": "70380",
    "end": "76530"
  },
  {
    "text": "single core machines running on C no single core developers or bus or a single core processor running a single",
    "start": "76530",
    "end": "82229"
  },
  {
    "text": "zone single machines with you know we're late to see it was you within within",
    "start": "82229",
    "end": "87270"
  },
  {
    "text": "seconds was fine and we we had to tackle sir moderate amounts of data but today",
    "start": "87270",
    "end": "92850"
  },
  {
    "text": "it's a radically different world I mean distributed systems is here to stay when you embark on macro services you can't",
    "start": "92850",
    "end": "100590"
  },
  {
    "text": "avoid it you know you're entering this world of distributive systems where there's a lot of uncertainty between the nodes you know and you know messages can",
    "start": "100590",
    "end": "107100"
  },
  {
    "text": "fail and and we'd be reordered and all these things and you know we have a so",
    "start": "107100",
    "end": "112740"
  },
  {
    "text": "and we are multi-core we have cloud computing with IOT and mobile you know we have this called the whole sort of",
    "start": "112740",
    "end": "118500"
  },
  {
    "text": "category of streaming apps and big data apps and an AI and all of those things it's radically different you know and we",
    "start": "118500",
    "end": "125219"
  },
  {
    "text": "remove of course a lot of apps need to tackle these this deserve you know never-ending",
    "start": "125219",
    "end": "130869"
  },
  {
    "text": "stream of data in the real-time fashions so we have this whole category of apps having to tackle you know real time data",
    "start": "130869",
    "end": "137830"
  },
  {
    "text": "centric streaming type of applications serving students to grab data while it flies by and be able to present the user",
    "start": "137830",
    "end": "145120"
  },
  {
    "text": "with intelligent answers almost immediately and finally we're moving towards a world where we are sort of",
    "start": "145120",
    "end": "151810"
  },
  {
    "text": "automated operations I I tend to call them ops less you know some people call it different things but this is the",
    "start": "151810",
    "end": "158080"
  },
  {
    "text": "world of service the server lists are really shown us the path that was possible when it comes to these things",
    "start": "158080",
    "end": "164440"
  },
  {
    "text": "and you know them I think the monolith and the three-tier architecture has really served as well but it's it's um",
    "start": "164440",
    "end": "171430"
  },
  {
    "text": "it's death is really overdue I believe you know the classic three-tier architecture is usually have to has a",
    "start": "171430",
    "end": "177610"
  },
  {
    "text": "lot of problems it's usually asked like to highlight to see all these round trip down to the database you know with transactions and locks sort of stop the",
    "start": "177610",
    "end": "184630"
  },
  {
    "text": "world type of traffic typo locks makes it really really hard to to build really high throughput highlight really low",
    "start": "184630",
    "end": "190930"
  },
  {
    "text": "latency type of systems and that might be fine sometimes in your pub but for a lot of these new new tackle use cases",
    "start": "190930",
    "end": "197290"
  },
  {
    "text": "it's actually offered to slow you know you have to high contention too much coupling between components it's really",
    "start": "197290",
    "end": "203620"
  },
  {
    "text": "hard to build through truly available systems because you can easily get into this problem with cascading failures one",
    "start": "203620",
    "end": "209470"
  },
  {
    "text": "server is taking down the next when they sit when they are too tightly coupled in terms with with synchronous coupling",
    "start": "209470",
    "end": "214989"
  },
  {
    "text": "between them and between your services and the database and I think that we",
    "start": "214989",
    "end": "220750"
  },
  {
    "text": "need through new tools and new ways of thinking new practices in order to deal with these things and stateful is really",
    "start": "220750",
    "end": "226540"
  },
  {
    "text": "at the heart of all of this because it's because you know data locality means",
    "start": "226540",
    "end": "231910"
  },
  {
    "text": "that users are putting data close to its processing context means that we can actually serve serve users with",
    "start": "231910",
    "end": "240220"
  },
  {
    "text": "intelligent answers faster and faster or or as fast as as needed you know but but",
    "start": "240220",
    "end": "246340"
  },
  {
    "text": "there's a lot of problems that comes with that I mean data now needs to be replicated between nodes for availability realities shoving it down",
    "start": "246340",
    "end": "252700"
  },
  {
    "text": "to the database all the time and you and you need to fully embrace asynchronous processing as well as",
    "start": "252700",
    "end": "259150"
  },
  {
    "text": "asynchronous i/o and asynchronous communication and you know we activists really started to become the framework",
    "start": "259150",
    "end": "266050"
  },
  {
    "text": "or that a lot of people use or frameworks use in order to conceptualize",
    "start": "266050",
    "end": "272830"
  },
  {
    "text": "you know what's needed the design practice and the practices that's needed to tackle these new challenges to react",
    "start": "272830",
    "end": "278740"
  },
  {
    "text": "to manifested was created but five years ago to try to frame this discussion so to speak and and you know you know we",
    "start": "278740",
    "end": "286090"
  },
  {
    "text": "move into world or through a world where we're data is king I mean data's have been important for a",
    "start": "286090",
    "end": "291729"
  },
  {
    "text": "long time and the companies have been storing down you know vast amounts of data down as data lakes but but a lot of",
    "start": "291729",
    "end": "297430"
  },
  {
    "text": "people a lot of companies really don't know what to do with it and and and if some have so embarked on over the years",
    "start": "297430",
    "end": "303910"
  },
  {
    "text": "to do service for batch processing overnight but that proves to be too slow nowadays I mean speed has really become",
    "start": "303910",
    "end": "311620"
  },
  {
    "text": "the competitive advantage how fast can you can you deliver through intelligence or knowledge about the data that you",
    "start": "311620",
    "end": "318039"
  },
  {
    "text": "receive intelligent answers to your users and and and and we started to see",
    "start": "318039",
    "end": "324340"
  },
  {
    "text": "sir this convergence between the market services or the app application development world were that that often",
    "start": "324340",
    "end": "331780"
  },
  {
    "text": "needs to be very data-centric in the bird data focused as well as the big data it also need to need to store reply",
    "start": "331780",
    "end": "339280"
  },
  {
    "text": "with intelligently in in in short and short term space so we see this convergence into what we call what I",
    "start": "339280",
    "end": "345250"
  },
  {
    "text": "call fast data applications so this is sort of the new type of apps that I'm",
    "start": "345250",
    "end": "350440"
  },
  {
    "text": "sure discussing that we need to tackle and again can fall short when with this",
    "start": "350440",
    "end": "356970"
  },
  {
    "text": "with with the current incarnation of service so to speak you know I took this",
    "start": "356970",
    "end": "364240"
  },
  {
    "text": "this quote from from him from a positioning paper by Berkley that came out a couple of months ago where this",
    "start": "364240",
    "end": "370180"
  },
  {
    "text": "where they say that I'm and I quote we predict the service computing will grow to dominate the future of cloud",
    "start": "370180",
    "end": "375400"
  },
  {
    "text": "computing I really believe this is true even though the title might have well my",
    "start": "375400",
    "end": "381370"
  },
  {
    "text": "talk might have bish you know I was less enthusiastic when I when I wrote the",
    "start": "381370",
    "end": "386710"
  },
  {
    "text": "abstract perhaps you know I really believe the service is great because it gives us sort of this",
    "start": "386710",
    "end": "391840"
  },
  {
    "text": "unified solution to both sir sir sir in",
    "start": "391840",
    "end": "397330"
  },
  {
    "text": "throw a one way to catching operational costs as well as development costs you",
    "start": "397330",
    "end": "402490"
  },
  {
    "text": "know you know you know being a beast or cost efficient pay-as-you-go scales scaled down to zero as way as well as",
    "start": "402490",
    "end": "409090"
  },
  {
    "text": "scalar asked the pastor of the the load varies which is very often will do when",
    "start": "409090",
    "end": "415210"
  },
  {
    "text": "you put them on the on on line you know with the users are unpredictable in you",
    "start": "415210",
    "end": "421840"
  },
  {
    "text": "know a slash dot it will used to be turned when I when I started but it's really developing there's really",
    "start": "421840",
    "end": "427330"
  },
  {
    "text": "becoming more and more important today you know Black Friday or whatever you know I'm probably both unpredictable",
    "start": "427330",
    "end": "433180"
  },
  {
    "text": "load as well as predictable load that you can plan for so you know an automation is one thing that really is",
    "start": "433180",
    "end": "439960"
  },
  {
    "text": "really a it has made serve really really great with when it comes to service",
    "start": "439960",
    "end": "446830"
  },
  {
    "text": "automation of scale automation of failure handling automation of recovery and in general the great developer",
    "start": "446830",
    "end": "452889"
  },
  {
    "text": "experience you know to actually moving to the cloud because that's hard and it and you know this is a lifted shift",
    "start": "452889",
    "end": "460450"
  },
  {
    "text": "model where you bring along along a law along a lot of your you know historic",
    "start": "460450",
    "end": "466990"
  },
  {
    "text": "knowledge patterns and and and even tools and products you know really that doesn't work",
    "start": "466990",
    "end": "472180"
  },
  {
    "text": "and the answer LS you know shows the way here but I can actually be a simpler a simpler world moving to the cloud not a",
    "start": "472180",
    "end": "479080"
  },
  {
    "text": "more complex one by cyril doing a lot of the heavy lifting and finally in the reduced time complexity risk but but I",
    "start": "479080",
    "end": "487180"
  },
  {
    "text": "think it's very important you know a lot of people they confuse server lists with",
    "start": "487180",
    "end": "492669"
  },
  {
    "text": "function as a service you know they're overlap absolutely I think I think I",
    "start": "492669",
    "end": "498099"
  },
  {
    "text": "think for us I think function as a service is a great first step you know to worse this Nirvana there are this",
    "start": "498099",
    "end": "505120"
  },
  {
    "text": "utopia of service of ops lists but I I think it's just the first step and I",
    "start": "505120",
    "end": "510580"
  },
  {
    "text": "would be really sad if if you know if if only you know function as a service had all the fun so to speak I think I think",
    "start": "510580",
    "end": "518020"
  },
  {
    "text": "service really shows a glimpse of the future of cloud computing what's possible and we see a lot of",
    "start": "518020",
    "end": "523630"
  },
  {
    "text": "initiatives like like the KNAT product for example trying to expand on",
    "start": "523630",
    "end": "528940"
  },
  {
    "text": "this or the notion of a survey list means and and and put that into into",
    "start": "528940",
    "end": "534250"
  },
  {
    "text": "sort of a context that is that that's broader than then function as a service which is great you know I don't know I'm",
    "start": "534250",
    "end": "540550"
  },
  {
    "text": "not really here to pick about functions or service per se but I think I just try to explain what I think is good and bad",
    "start": "540550",
    "end": "546100"
  },
  {
    "text": "about it anyway so we know where I'm starting from here so I said it's I think it's really good that it's repaid",
    "start": "546100",
    "end": "552130"
  },
  {
    "text": "the way for service shown was possible but it's just one incarnation of the service idea I believe the first step",
    "start": "552130",
    "end": "559030"
  },
  {
    "text": "but it's or showed us it's possible to scale on demand from zero to tens of",
    "start": "559030",
    "end": "564280"
  },
  {
    "text": "thousands of requests you know in a really cost-efficient manner you know the economical scale you can",
    "start": "564280",
    "end": "570760"
  },
  {
    "text": "really play at your advantage here the realists simplify its delivery of scaleable and available applications you",
    "start": "570760",
    "end": "577390"
  },
  {
    "text": "know makes it actually possible to move to the cloud and reduce risk instead of increasing risk so it encourages good",
    "start": "577390",
    "end": "584020"
  },
  {
    "text": "distributed system design you know forces you to focus on a known event an event driven all events first",
    "start": "584020",
    "end": "590380"
  },
  {
    "text": "to design I don't know if you heard open of events for DDD but it's something that's proven to work very very well you",
    "start": "590380",
    "end": "596230"
  },
  {
    "text": "know gives you you know by default we loose coupling and that opens up for scale and availability it worked great",
    "start": "596230",
    "end": "603580"
  },
  {
    "text": "as a sort of an integration layer between various ephemeral or durable data sources it's is great for a",
    "start": "603580",
    "end": "610390"
  },
  {
    "text": "stateless type of work we are processing centric use cases okay and finally you",
    "start": "610390",
    "end": "617740"
  },
  {
    "text": "know it's great to sort of the general back we're moving data from A to B doing transformations along the way so some",
    "start": "617740",
    "end": "626530"
  },
  {
    "text": "use cases that sort of fits in this I mean in general I think is generally use cases where throughput is key rather",
    "start": "626530",
    "end": "633550"
  },
  {
    "text": "than the low latency that this is really important and the large category of use",
    "start": "633550",
    "end": "638740"
  },
  {
    "text": "cases fit this very well and requests can be completed in a reasonably short time window okay",
    "start": "638740",
    "end": "645810"
  },
  {
    "text": "applications of this or use cases of this is like low traffic applications like like IT back-end systems for",
    "start": "645810",
    "end": "652270"
  },
  {
    "text": "example stateless web applications where you can serve the content from s3 for example or",
    "start": "652270",
    "end": "658270"
  },
  {
    "text": "embarrassingly parallel processing tasks where there's really no coupling between your your tasks but they keep meaning no",
    "start": "658270",
    "end": "665200"
  },
  {
    "text": "contention there's new this is really no need to coordinate but you can just scale it out in what is called you know",
    "start": "665200",
    "end": "672370"
  },
  {
    "text": "in academia you would embarrassingly parallel sort of type of patterns",
    "start": "672370",
    "end": "677560"
  },
  {
    "text": "examples of this like is like resizing images you know orbit recognition and log analysis etc it's great for",
    "start": "677560",
    "end": "685360"
  },
  {
    "text": "orchestrating functions like integration coordinating or a set of third-party services and also some composing chains",
    "start": "685360",
    "end": "691150"
  },
  {
    "text": "of functions to serve that where you were very sort composed and Beto's on data dependencies or driven through",
    "start": "691150",
    "end": "698110"
  },
  {
    "text": "through the need of the data also job scheduling of course like a Crone type",
    "start": "698110",
    "end": "704260"
  },
  {
    "text": "of jobs and things like that but then what's bad with function as a service and I think I think it's really really",
    "start": "704260",
    "end": "710410"
  },
  {
    "text": "hard to build general purpose applications most of the use cases we've seen here I mean are are usually part of",
    "start": "710410",
    "end": "716440"
  },
  {
    "text": "a larger application so you see that this means that that that for that part",
    "start": "716440",
    "end": "722230"
  },
  {
    "text": "of your app it's a great fit for service but but what about I mean building",
    "start": "722230",
    "end": "728140"
  },
  {
    "text": "general applications I mean ideally I'd like to see everything moved to the serverless idea if you don't need to",
    "start": "728140",
    "end": "734020"
  },
  {
    "text": "have to manage service really means sort of having knobs to turn you know in instead of all the hassles of of",
    "start": "734020",
    "end": "740680"
  },
  {
    "text": "distribute systems and operations of the cloud some of some of the problems in",
    "start": "740680",
    "end": "748030"
  },
  {
    "text": "more in more detail is that I I think it retains a lot of a lot of limitations with all the three-tier architecture",
    "start": "748030",
    "end": "753040"
  },
  {
    "text": "that are talking about one of the problems is that that's all for the advantage I have to say but in general",
    "start": "753040",
    "end": "760030"
  },
  {
    "text": "purpose applications one of the problems is that functions are stateless ephemeral and short-lived I'll be I'll get back to that now is that there's no",
    "start": "760030",
    "end": "767650"
  },
  {
    "text": "direct addressability you always need to communicate over some sort of storage",
    "start": "767650",
    "end": "772810"
  },
  {
    "text": "medium which is great you know for durability and and things like that but it is actually",
    "start": "772810",
    "end": "778209"
  },
  {
    "text": "possible to me to make it as as as reliable with point to point and and you",
    "start": "778209",
    "end": "785230"
  },
  {
    "text": "know without having to pay the latency of always going down the communicating over some message broker you know did as",
    "start": "785230",
    "end": "791529"
  },
  {
    "text": "I said different use cases have different requirements but always have them do that is quite bad for general",
    "start": "791529",
    "end": "797079"
  },
  {
    "text": "purpose the distributed systems another thing is that there's really no notion of collocation where I can physically",
    "start": "797079",
    "end": "802809"
  },
  {
    "text": "say I would like to co-locate processing and state over there so it doesn't need to go fetch it every single time you",
    "start": "802809",
    "end": "808420"
  },
  {
    "text": "know you know location location look how that your reference is something that we where we value a lot",
    "start": "808420",
    "end": "813670"
  },
  {
    "text": "you know when we when we working with more low-level type of programming and it's I mean and it's actually the cost",
    "start": "813670",
    "end": "818709"
  },
  {
    "text": "is even is even greater with the higher up collaterally we client we also have",
    "start": "818709",
    "end": "825519"
  },
  {
    "text": "limited options for managing and coordinating distributed state in a state management is a hardest thing in",
    "start": "825519",
    "end": "830559"
  },
  {
    "text": "distributed systems right now I would like to have more wider range of options for managing these things supporting",
    "start": "830559",
    "end": "836619"
  },
  {
    "text": "more use cases limiting more options from modeling consistency guarantees it's not a one-size-fits-all everything",
    "start": "836619",
    "end": "842829"
  },
  {
    "text": "is drawing the consistence or everything is eventually consistent you know but I'd like to you note be able to use",
    "start": "842829",
    "end": "849129"
  },
  {
    "text": "whatever is needed for the actual problem you know strong consistency should not be the default in my opinion",
    "start": "849129",
    "end": "854589"
  },
  {
    "text": "in distributed systems because there's just too much drawbacks even though it makes the world easier for us program is when we're critical in one we code you",
    "start": "854589",
    "end": "861579"
  },
  {
    "text": "know it makes the system more brittle more less available as things like that on the other hand always having it eventually persistence it's not good",
    "start": "861579",
    "end": "868300"
  },
  {
    "text": "either because there are certain type or use cases that require strong consistency so more consistency our cart",
    "start": "868300",
    "end": "873970"
  },
  {
    "text": "would be nice okay also limited options for managing durable state in general",
    "start": "873970",
    "end": "879029"
  },
  {
    "text": "okay so what I want if I should try to like capture it very very briefly is I",
    "start": "879029",
    "end": "888279"
  },
  {
    "text": "like the server less experience but for general purpose applications I'd like to put all our clients at like meant that",
    "start": "888279",
    "end": "894429"
  },
  {
    "text": "that's using ARCA you know fast data on server less eventually that's not an option today you know and I sir I'd like",
    "start": "894429",
    "end": "902980"
  },
  {
    "text": "to have you know some sort of abstraction for stateful functions which I will dive into more what I mean",
    "start": "902980",
    "end": "908480"
  },
  {
    "text": "come complementing stateless you know not replacing them I would like to have more tools in the toolbox essentially",
    "start": "908480",
    "end": "915670"
  },
  {
    "text": "supporting more more broader range of use cases but I want to do that you know",
    "start": "915670",
    "end": "923300"
  },
  {
    "text": "with not throwing off the baby with the bathwater you know a lot of the nice a lot of the reason why people will",
    "start": "923300",
    "end": "930170"
  },
  {
    "text": "gravitate towards herbalists is for the cost efficiencies right so we still need to maintain the cost efficiency so",
    "start": "930170",
    "end": "936440"
  },
  {
    "text": "function as a service of the officer of serve less but but but perhaps having",
    "start": "936440",
    "end": "942860"
  },
  {
    "text": "ways to dial them in you know all guarantees said that you add on top has",
    "start": "942860",
    "end": "948380"
  },
  {
    "text": "costs you know so having a way to dial in that as a user the trade-off between",
    "start": "948380",
    "end": "954400"
  },
  {
    "text": "consistency and availability etcetera will be nice okay and in a list of some",
    "start": "954400",
    "end": "962090"
  },
  {
    "text": "of the use cases that would like to have support for that I find hard not impossible you know a service most malls",
    "start": "962090",
    "end": "968450"
  },
  {
    "text": "are turing-complete so you can essentially do everything if you follow me but but being able to support these",
    "start": "968450",
    "end": "974240"
  },
  {
    "text": "use cases in in a really available fashion or our use cases like for example training is serving on machine",
    "start": "974240",
    "end": "980180"
  },
  {
    "text": "learning models and essentially any dynamic sort of in in memory model that",
    "start": "980180",
    "end": "985940"
  },
  {
    "text": "that's constantly being updated and needs to be served okay real time to distribute the stream processing you",
    "start": "985940",
    "end": "994250"
  },
  {
    "text": "know concrete problems like like like prediction recommendation engines anomaly detection fraud detection and",
    "start": "994250",
    "end": "1000880"
  },
  {
    "text": "these type of things modeling user session or shopping carts and and and you know caching essentially",
    "start": "1000880",
    "end": "1007090"
  },
  {
    "text": "any sort of in-memory data in memory serve construct that throughout lives",
    "start": "1007090",
    "end": "1013960"
  },
  {
    "text": "you know requests that has its own you can model your own sort of life cycle",
    "start": "1013960",
    "end": "1020830"
  },
  {
    "text": "for so it's available until you explicitly destroy it and and in you",
    "start": "1020830",
    "end": "1027069"
  },
  {
    "text": "know things like distributed resilient transaction workflows like in event-driven programming talked a lot",
    "start": "1027070",
    "end": "1033339"
  },
  {
    "text": "about the saga patter which is which is which is a really nice way of modeling you know distributed workflows in a",
    "start": "1033339",
    "end": "1040089"
  },
  {
    "text": "reliable fashion without having to go back to XA transactions you know",
    "start": "1040089",
    "end": "1045538"
  },
  {
    "text": "which will doom us Modelling shared collaborative workspaces you know things",
    "start": "1045539",
    "end": "1052510"
  },
  {
    "text": "like document editing blackboards type of systems and and also being able to in",
    "start": "1052510",
    "end": "1059140"
  },
  {
    "text": "a good way ma you know sir modeling class eg distributed computing patterns",
    "start": "1059140",
    "end": "1064780"
  },
  {
    "text": "like leader election etc would be nice as well so some of the technical requirements in order to get here I",
    "start": "1064780",
    "end": "1070990"
  },
  {
    "text": "think is that first we need to have some sort of abstraction some sort of possibility to create stateful long",
    "start": "1070990",
    "end": "1078190"
  },
  {
    "text": "lived addressable virtual components or functions you know and what I mean what",
    "start": "1078190",
    "end": "1085270"
  },
  {
    "text": "and what do I mean by that yeah first stateful I mean in memory durable resilient state not necessarily stay",
    "start": "1085270",
    "end": "1091690"
  },
  {
    "text": "down there you know or not stay down there but stayed up here but they're still backed by durable state",
    "start": "1091690",
    "end": "1097059"
  },
  {
    "text": "well let's explain more how long lived I mean that it's actually outlived specific you know an individual requests",
    "start": "1097059",
    "end": "1103750"
  },
  {
    "text": "it's more tied to specific session that's available until explicitly destroyed okay addressable mean it means",
    "start": "1103750",
    "end": "1110260"
  },
  {
    "text": "that it should be referenced through stable address that's always available even though I send the rent they address",
    "start": "1110260",
    "end": "1115990"
  },
  {
    "text": "around even though you know I them they actually the actual instance of the function might be might be moved around",
    "start": "1115990",
    "end": "1123070"
  },
  {
    "text": "you know when Windows joined it needs to be reallocated to cross all nodes for example and things like that and and and",
    "start": "1123070",
    "end": "1130000"
  },
  {
    "text": "virtually it's what I is what I mean by allocating with virtual I mean location",
    "start": "1130000",
    "end": "1135789"
  },
  {
    "text": "traffic transparency that that the user of the service doesn't really shouldn't really need to know where it is some of",
    "start": "1135789",
    "end": "1142270"
  },
  {
    "text": "these problems kubernetes in sort of things like a native stalls for us right obvious not i also would like to have",
    "start": "1142270",
    "end": "1148179"
  },
  {
    "text": "sort of support for a wide range of communications and coordination patterns",
    "start": "1148179",
    "end": "1153429"
  },
  {
    "text": "and also as I talked before options for managing consistency you know managing",
    "start": "1153429",
    "end": "1159309"
  },
  {
    "text": "distributed state at scale while not giving up the guarantees that we have set once once set you know also things",
    "start": "1159309",
    "end": "1167919"
  },
  {
    "text": "like intelligent and adapted placing or functions being able to do that in intelligent fashion",
    "start": "1167919",
    "end": "1173690"
  },
  {
    "text": "I mean where the state currently is and vice versa so you can have colocation physical",
    "start": "1173690",
    "end": "1179299"
  },
  {
    "text": "colocation of stage and processing for really really low latency not everyone is that but some really do you know okay",
    "start": "1179299",
    "end": "1196600"
  },
  {
    "text": "oops okay is that my sign okay so waste of also",
    "start": "1196720",
    "end": "1204559"
  },
  {
    "text": "one way so managing end to end correctness not just thinking about each individual function but actually",
    "start": "1204559",
    "end": "1209809"
  },
  {
    "text": "thinking about you know the larger scope oh and then being able to reason about",
    "start": "1209809",
    "end": "1214820"
  },
  {
    "text": "the guarantees that the whole workflow has as a whole I think it's extremely important task complexity grows and of",
    "start": "1214820",
    "end": "1221120"
  },
  {
    "text": "course I don't predict the performance latency and throughput so you know what one of the great things with function as",
    "start": "1221120",
    "end": "1226309"
  },
  {
    "text": "a service is that it gives the way away a very nice way of abstracting overcome or overcome communication you know you",
    "start": "1226309",
    "end": "1232850"
  },
  {
    "text": "have you have sort of enable in a really abstract way message coming in and",
    "start": "1232850",
    "end": "1239110"
  },
  {
    "text": "message going going and going out you're in and you know and and the framework or the runtime man is all the nitty-gritty",
    "start": "1239110",
    "end": "1245630"
  },
  {
    "text": "details for making this happen that's great you know but it and this is a perfect model for stateless type of type",
    "start": "1245630",
    "end": "1251660"
  },
  {
    "text": "of type of work but sometimes you you do have to manage state you know and and but the problem is that if your function",
    "start": "1251660",
    "end": "1259130"
  },
  {
    "text": "then talk directly to the database you know you're essentially moving all the operational concerns all the things that",
    "start": "1259130",
    "end": "1265280"
  },
  {
    "text": "we wanted to abstract away into the user function it's himself and this makes it very hard for the framework to to do any",
    "start": "1265280",
    "end": "1274010"
  },
  {
    "text": "any useful work you know because it really doesn't know anything about how you're actually using the database you",
    "start": "1274010",
    "end": "1279679"
  },
  {
    "text": "can't really do a lot of scaling for example I mean if it function response slowly is it because because the",
    "start": "1279679",
    "end": "1286640"
  },
  {
    "text": "function is overloaded or is it because the database is overloaded the framework a really really can't know okay so I",
    "start": "1286640",
    "end": "1295880"
  },
  {
    "text": "really don't believe that this is is true service service in general I think I'm sure unconstrained database access",
    "start": "1295880",
    "end": "1302900"
  },
  {
    "text": "makes it really really hard to automate operations and and in a crud create read update delete",
    "start": "1302900",
    "end": "1307929"
  },
  {
    "text": "that we use with with with with single databases it is really a problem here",
    "start": "1307929",
    "end": "1313570"
  },
  {
    "text": "because it makes it really hard to understand the intention of each each each request is it is it a read or is it",
    "start": "1313570",
    "end": "1318849"
  },
  {
    "text": "a right you know can it be cached can't the consistence really requirements be relaxed or not you know etc right if we",
    "start": "1318849",
    "end": "1327219"
  },
  {
    "text": "understand these these things then we can make better decisions and if your framework and runtime understands it can",
    "start": "1327219",
    "end": "1332919"
  },
  {
    "text": "make better decisions okay for example the writer operations are fast read operations are slow you might",
    "start": "1332919",
    "end": "1338200"
  },
  {
    "text": "have any dad more member to the to the to the database if I'm constantly reading only immutable values listed",
    "start": "1338200",
    "end": "1344320"
  },
  {
    "text": "let's add caching for example you know writes might be serializable or must be serializable looking at shorting and and",
    "start": "1344320",
    "end": "1351609"
  },
  {
    "text": "sort of making sure they would relay every single request to that entity on that pod every single time for example",
    "start": "1351609",
    "end": "1358149"
  },
  {
    "text": "and you know as ruin of the artisan since said it's a friend of mine from a scholar community you know it said the",
    "start": "1358149",
    "end": "1363820"
  },
  {
    "text": "constraints liberate Liberty Liberty is constrained and we all know the constraints can really be liberating you",
    "start": "1363820",
    "end": "1369789"
  },
  {
    "text": "know analyst up options can kill productivity we kill urgency you know so",
    "start": "1369789",
    "end": "1376570"
  },
  {
    "text": "so I think I think that sir limiting the options for state and database management is a connection would be a",
    "start": "1376570",
    "end": "1382299"
  },
  {
    "text": "good thing and we can do that by trying to sir abstract over state instead okay we already have an abstraction from",
    "start": "1382299",
    "end": "1388929"
  },
  {
    "text": "messaging a message out okay what if we have an abstraction way of abstracting for state in and state out instead and",
    "start": "1388929",
    "end": "1397029"
  },
  {
    "text": "having an having sort of the the framework manage all the neat degree to details of this before us okay you know",
    "start": "1397029",
    "end": "1402429"
  },
  {
    "text": "crud really doesn't work that well in this mall because we can't pass the whole database in and out every single",
    "start": "1402429",
    "end": "1407979"
  },
  {
    "text": "time so the question is if we can't use crud then what can we use in experience",
    "start": "1407979",
    "end": "1413950"
  },
  {
    "text": "to really good models for modeling distributed state scale you know or our",
    "start": "1413950",
    "end": "1419169"
  },
  {
    "text": "event sourcing and see our duties how many have heard about event sourcing and knows what it is okay almost everyone",
    "start": "1419169",
    "end": "1426639"
  },
  {
    "text": "that's great what about CR DTS they stand for conflict-free replicated they attacked less so okay I'll try to just",
    "start": "1426639",
    "end": "1431739"
  },
  {
    "text": "explain briefly anyway for those that they don't know what it is - so you at least some some context okay and",
    "start": "1431739",
    "end": "1438780"
  },
  {
    "text": "let's say we have an events the worst function now what would that look like like we have one user sending a command",
    "start": "1438780",
    "end": "1445679"
  },
  {
    "text": "because with event sourcing you tend to have commands and events commands are",
    "start": "1445679",
    "end": "1451740"
  },
  {
    "text": "framed in the in the imperative or phrased in the imperative for example create the order so an create order",
    "start": "1451740",
    "end": "1458970"
  },
  {
    "text": "command is sent down to this function it sort of ended up in his mailbox or wherever it's a nice trigger some sort",
    "start": "1458970",
    "end": "1464549"
  },
  {
    "text": "of action creating the order you know out of that order you know when we have",
    "start": "1464549",
    "end": "1469710"
  },
  {
    "text": "done that then we create an event which is like a fact you know the fact that we",
    "start": "1469710",
    "end": "1474990"
  },
  {
    "text": "already have created an order so events are usually named order created the fact",
    "start": "1474990",
    "end": "1480780"
  },
  {
    "text": "that the order has already been created and any events or see what we do is that we just store all these state changing",
    "start": "1480780",
    "end": "1487559"
  },
  {
    "text": "events or or for events representing a state change in an event log durable on",
    "start": "1487559",
    "end": "1493980"
  },
  {
    "text": "disk in the order they arrived okay we",
    "start": "1493980",
    "end": "1499140"
  },
  {
    "text": "can also you know have others subscribe to to to that event log if other parties are interested in knowing what you know",
    "start": "1499140",
    "end": "1507240"
  },
  {
    "text": "the updates or the events created by that function okay this is a similar to",
    "start": "1507240",
    "end": "1513299"
  },
  {
    "text": "functions as a service today this is a happy path then what happens any of",
    "start": "1513299",
    "end": "1518789"
  },
  {
    "text": "things the sort of fail you know or if you just need to activate and passivate",
    "start": "1518789",
    "end": "1524460"
  },
  {
    "text": "the function so the sad path when we now recover from failure the only thing we need to do is sort of replay the event",
    "start": "1524460",
    "end": "1530460"
  },
  {
    "text": "log in the order the events arrived you know they're of course optimized a soccer persistence is what is there a",
    "start": "1530460",
    "end": "1538770"
  },
  {
    "text": "event frame or their events forcing frame we have an akka you know allows you to do count periodic snapshotting in",
    "start": "1538770",
    "end": "1545669"
  },
  {
    "text": "which is a wish on replay if the research for the first nap short instantiate that a replay the event log from there but the beauty of this that",
    "start": "1545669",
    "end": "1552210"
  },
  {
    "text": "that they have one single source of truth for all history that ever happens system we never do destructive updates",
    "start": "1552210",
    "end": "1557760"
  },
  {
    "text": "or compare us or update in place like we do with with with sequel databases but",
    "start": "1557760",
    "end": "1562919"
  },
  {
    "text": "all everything that ever happened in the system is there you know in the order you know it happened",
    "start": "1562919",
    "end": "1568510"
  },
  {
    "text": "even better this allows us to work with the durable in a memory state you know",
    "start": "1568510",
    "end": "1574400"
  },
  {
    "text": "without having to do any object-oriented mapping we never need to go to our fetch the state every single time we want to",
    "start": "1574400",
    "end": "1581060"
  },
  {
    "text": "use it is there it's in memory but still backed by durable event log things go fail with just three instance or",
    "start": "1581060",
    "end": "1587560"
  },
  {
    "text": "rehydrate okay it also allows others to subscribe to state changes it's really good",
    "start": "1587560",
    "end": "1593450"
  },
  {
    "text": "mechanical sympathy what that means it is in line with modern hardware you know if you have single right you're just riding down very very fast works perfect",
    "start": "1593450",
    "end": "1601760"
  },
  {
    "text": "with SSDs you know down into the event log and you have and you can replay this log not just when things go fail you can",
    "start": "1601760",
    "end": "1607610"
  },
  {
    "text": "do it for all it reasons you know debugging research you know replication you have multiple hot replicas and",
    "start": "1607610",
    "end": "1613730"
  },
  {
    "text": "things like that so the question is then how does the event sourcing fit into this state model yeah you have state in",
    "start": "1613730",
    "end": "1619660"
  },
  {
    "text": "your event log your if the replay all them in one by one the events the syrup",
    "start": "1619660",
    "end": "1626150"
  },
  {
    "text": "arrived up to this point and and state out this essentially the event that you",
    "start": "1626150",
    "end": "1632540"
  },
  {
    "text": "emitted so as representing the latest state change okay so this is great to",
    "start": "1632540",
    "end": "1639920"
  },
  {
    "text": "use as a model to model you know what you normally will use crowd for for your",
    "start": "1639920",
    "end": "1646400"
  },
  {
    "text": "your your source of truth your domain model that type of persistence okay I've",
    "start": "1646400",
    "end": "1653000"
  },
  {
    "text": "also mentioned that C or DTS are also great I mean these they are also a really good way of mounting state but",
    "start": "1653000",
    "end": "1659570"
  },
  {
    "text": "probably but in but for slightly other the other other type of use case okay so",
    "start": "1659570",
    "end": "1664880"
  },
  {
    "text": "so it's very implements the ideal asset Udo I don't know if you heard about that",
    "start": "1664880",
    "end": "1670280"
  },
  {
    "text": "for a funky funky acronym for sort of it stands for it's really good in really",
    "start": "1670280",
    "end": "1677360"
  },
  {
    "text": "nice what you're thinking about the state in distributed systems so a here stands for associative meaning that",
    "start": "1677360",
    "end": "1682760"
  },
  {
    "text": "grouping doesn't matter okay that's that's really good property C stands for commutative meaning ordering doesn't",
    "start": "1682760",
    "end": "1688670"
  },
  {
    "text": "matter is of the great property and distributed system and I stands for idempotent meaning the duplication doesn't matter you can actually receive",
    "start": "1688670",
    "end": "1694790"
  },
  {
    "text": "the same this is the same request more than one more than once and see it and see here the T stands for conflict-free",
    "start": "1694790",
    "end": "1700790"
  },
  {
    "text": "replicate data types it's a fairly recent research but we abuse it in ARCA and our clients",
    "start": "1700790",
    "end": "1706799"
  },
  {
    "text": "and customers abuse it for quite a few years now it's a term if you know reactive if you remember that database",
    "start": "1706799",
    "end": "1712730"
  },
  {
    "text": "cellular that it went away it was one of the first actually to implement CEO duties in production environments so",
    "start": "1712730",
    "end": "1720059"
  },
  {
    "text": "it's or CEO duties essentially is editing implements attitude that oh it has strong eventual consistency is",
    "start": "1720059",
    "end": "1725970"
  },
  {
    "text": "replicated and decentralized and and you know and then what the really nice property is it has this it's always",
    "start": "1725970",
    "end": "1731639"
  },
  {
    "text": "converged correctly so you cannot oldc or do these data types flowing around and eventually they will always converge",
    "start": "1731639",
    "end": "1737279"
  },
  {
    "text": "in a correct fashion okay which makes it extremely available and extremely",
    "start": "1737279",
    "end": "1742500"
  },
  {
    "text": "scalable okay and you know the the data types that are catalysts are discovered",
    "start": "1742500",
    "end": "1748260"
  },
  {
    "text": "by the research community that we have implemented it slice counter register sets Maps even graphs and the nice thing",
    "start": "1748260",
    "end": "1754919"
  },
  {
    "text": "with these you know as if they are a certainty they compose so you can have a map of counter for example or a set of",
    "start": "1754919",
    "end": "1761850"
  },
  {
    "text": "maps of counters or registers or something and they all adhere to the same type tab properties okay so what",
    "start": "1761850",
    "end": "1770639"
  },
  {
    "text": "does that look into our state state model here that yeah we will have he said the event log in now we have we",
    "start": "1770639",
    "end": "1776669"
  },
  {
    "text": "have the deltas in the deltas the changes between the different updates of",
    "start": "1776669",
    "end": "1782070"
  },
  {
    "text": "the CRE T's and out we have the deltas out you know so it's nicely abstracts over CR DTS as well and sincere duties",
    "start": "1782070",
    "end": "1789750"
  },
  {
    "text": "are great for for doing distributed coordination of state for example without ever going to serve a durable",
    "start": "1789750",
    "end": "1797130"
  },
  {
    "text": "medium you can do that we have options for that in akka and many many implementations too but if you just have",
    "start": "1797130",
    "end": "1802679"
  },
  {
    "text": "enough knows enough replicas that you replicate to it's available enough so you never have to really persist it on",
    "start": "1802679",
    "end": "1808440"
  },
  {
    "text": "disk it's great for coordination for snapshots a fourth session type of state you know shopping cart user sessions and",
    "start": "1808440",
    "end": "1815039"
  },
  {
    "text": "that type of work okay so this was a long rat and some hints and how and how",
    "start": "1815039",
    "end": "1822179"
  },
  {
    "text": "things could be done differently so what are we doing about it here I mean that we actually try to do try to do some",
    "start": "1822179",
    "end": "1828450"
  },
  {
    "text": "work around this as well at Lightman so currently working on POC it's all open source",
    "start": "1828450",
    "end": "1834050"
  },
  {
    "text": "I'll link to it in the end on top okay okay an ATM on top of kubernetes on top",
    "start": "1834050",
    "end": "1839960"
  },
  {
    "text": "okay an ad with an around gr PC and ARCA then but but first then before I dive in",
    "start": "1839960",
    "end": "1846980"
  },
  {
    "text": "a little bit about how we've done this how many knows well know what our Chi is first about about half so I'll just",
    "start": "1846980",
    "end": "1854570"
  },
  {
    "text": "explain it very briefly sort of an implementation of the action model if you heard about Erlang I mean that's like I created ARCA some time ago and I",
    "start": "1854570",
    "end": "1861800"
  },
  {
    "text": "was heavily inspired by buyer buyer line so and it has this notion of ARCA cluster that's sort of decentralized",
    "start": "1861800",
    "end": "1868000"
  },
  {
    "text": "self-organizing very simple to do that the Dynamo model for for for for",
    "start": "1868000",
    "end": "1873790"
  },
  {
    "text": "organized for having so these these actors for self-organizing and making",
    "start": "1873790",
    "end": "1878870"
  },
  {
    "text": "the very very available and and and and scalable so it's and this is really high proof high throughput we implement a ton",
    "start": "1878870",
    "end": "1884720"
  },
  {
    "text": "of different protocols but the most important thing is that we have really good support for distributed state management",
    "start": "1884720",
    "end": "1889850"
  },
  {
    "text": "that's what ARCA does well you know and that's that also one of the hardest thing you can do in distributed systems",
    "start": "1889850",
    "end": "1896180"
  },
  {
    "text": "if you want to find out more look at you can go to our code IO but what we're doing here now is the vision is I don't",
    "start": "1896180",
    "end": "1902780"
  },
  {
    "text": "know if you know about kn8 it became ADA have can ad be serving so it said we will have a new component called a",
    "start": "1902780",
    "end": "1909170"
  },
  {
    "text": "native stateful serving okay in addition to kn8 observing for serving stateless",
    "start": "1909170",
    "end": "1915140"
  },
  {
    "text": "were closed and and and and and and and so you have a bunch of functions then",
    "start": "1915140",
    "end": "1920330"
  },
  {
    "text": "surround short it on different kubernetes spots here and and all communicating then over over G RPC",
    "start": "1920330",
    "end": "1927590"
  },
  {
    "text": "working as a proxy for these functions for the user okay the role of state for",
    "start": "1927590",
    "end": "1933920"
  },
  {
    "text": "serving is that it speaks TR proceed with these functions it rouse inbound communication to from the these",
    "start": "1933920",
    "end": "1940610"
  },
  {
    "text": "functions it communicates with the database on behalf of the of the of the functions abstracting away all that hard",
    "start": "1940610",
    "end": "1946580"
  },
  {
    "text": "things and it also meets events to K native events for public consumption",
    "start": "1946580",
    "end": "1951650"
  },
  {
    "text": "okay so if we dive into Canada serving then how does it really look inside then",
    "start": "1951650",
    "end": "1956960"
  },
  {
    "text": "yeah inside there we have we inject one octa sidecar instead of the regular k native side for you know into into the",
    "start": "1956960",
    "end": "1963830"
  },
  {
    "text": "user function that works the source it's as a proxy on behalf of each these functions these manages the state",
    "start": "1963830",
    "end": "1970820"
  },
  {
    "text": "and the communication on behalf of these of all these functions and then one thing that ARCA does really really well",
    "start": "1970820",
    "end": "1976160"
  },
  {
    "text": "is for example cluster shorting so so so in this case we have we have for each",
    "start": "1976160",
    "end": "1982250"
  },
  {
    "text": "function that we call an entity then has an entity key anarchic arca archa an octave an arc a cluster actually shirts",
    "start": "1982250",
    "end": "1989960"
  },
  {
    "text": "or shorts these across all the pods and making sure the we have Steve's sticky routing to for for each one of these",
    "start": "1989960",
    "end": "1996020"
  },
  {
    "text": "functions so if we have really good they data locality on each one of these two of these pods for each request coming in",
    "start": "1996020",
    "end": "2001980"
  },
  {
    "text": "okay so so so a cluster by the way is it sort of a gossip based decentralized",
    "start": "2001980",
    "end": "2007000"
  },
  {
    "text": "masterless peer-to-peer tack book of implementation so Sokka here abstracts",
    "start": "2007000",
    "end": "2015820"
  },
  {
    "text": "in managing all the distributed state even if you use for example event logging see an or see our duties or any",
    "start": "2015820",
    "end": "2022870"
  },
  {
    "text": "future type of distributed state type or management okay and and of course these",
    "start": "2022870",
    "end": "2029080"
  },
  {
    "text": "functions can be implemented in any type of language so just just to wrap up you",
    "start": "2029080",
    "end": "2035590"
  },
  {
    "text": "know I really believe that the service is revolutionary I think it shows blimps",
    "start": "2035590",
    "end": "2040780"
  },
  {
    "text": "of as possible with cloud computing I think fractional service is a great first step but I would be so devastating",
    "start": "2040780",
    "end": "2047740"
  },
  {
    "text": "it was it was the only step I think it shows what's possible but it's only the first step we need to take it where it I",
    "start": "2047740",
    "end": "2054250"
  },
  {
    "text": "mean to make it live up to its promise so to speak okay and and I think service to the row or whatever you want you want",
    "start": "2054250",
    "end": "2060760"
  },
  {
    "text": "it to you would you want to call it knees around time programming molar for general purpose applications I want to",
    "start": "2060760",
    "end": "2066010"
  },
  {
    "text": "build everything in this new within this new style right and we have said be we've started working on it with K",
    "start": "2066010",
    "end": "2072730"
  },
  {
    "text": "native our kanji our PC and we need we need your help you know it's it's open source we need feedback you know our ideas or if you if",
    "start": "2072730",
    "end": "2079870"
  },
  {
    "text": "you're interested in hacking learn to roll up your sleeves and hack on we we created a little it's about a month old",
    "start": "2079870",
    "end": "2085060"
  },
  {
    "text": "this is this big bitly link is to your little little demo if I would have had an hour here I would have given the demo",
    "start": "2085060",
    "end": "2091810"
  },
  {
    "text": "but now we recorded it instead so if you wanted to find out a little bit more what we're thinking about what the user",
    "start": "2091810",
    "end": "2096820"
  },
  {
    "text": "experience could look like and the github repo is right there so you can just check it out and clone it",
    "start": "2096820",
    "end": "2103029"
  },
  {
    "text": "or and and get started if you're interested in these things file issues",
    "start": "2103029",
    "end": "2108789"
  },
  {
    "text": "or whatever thank you",
    "start": "2108789",
    "end": "2113099"
  },
  {
    "text": "I don't think there's any time for questions but I'll wait right outside there if you're interested in in in in",
    "start": "2118840",
    "end": "2124930"
  },
  {
    "text": "chatting about these things so thanks a lot",
    "start": "2124930",
    "end": "2129599"
  }
]