[
  {
    "text": "so thank you so much for coming today um I'm really excited to be here my name is Kate Osborne I work at enginex I'm a",
    "start": "80",
    "end": "7359"
  },
  {
    "text": "software engineer there on the enginex Gateway fabric team which is a free and open- Source implementation of the",
    "start": "7359",
    "end": "13240"
  },
  {
    "text": "Gateway API so today I'm going to talk about extending the Gateway Pi in particular one type of extension",
    "start": "13240",
    "end": "19520"
  },
  {
    "text": "mechanism called policy attachment I'm going to go uh explain what it is the",
    "start": "19520",
    "end": "24960"
  },
  {
    "text": "two different types and then finish with some of the challenges okay okay so to start what is",
    "start": "24960",
    "end": "31560"
  },
  {
    "text": "the Gateway API well straight from the docs it's the next generation of communities Ingress load balancing and",
    "start": "31560",
    "end": "37320"
  },
  {
    "text": "service mes apis what I want to focus on today though is that next generation of communities Ingress piece so why do we",
    "start": "37320",
    "end": "45039"
  },
  {
    "text": "need a new generation of Ingress what problems in the Ingress API is the Gateway API trying to solve and there",
    "start": "45039",
    "end": "52199"
  },
  {
    "text": "are several answers to that question but today we're talking about extensibility so how do you extend Ingress today well",
    "start": "52199",
    "end": "60320"
  },
  {
    "text": "Ingress API like the Gateway API is a universal specification it boasts numerous implementations so it has to be",
    "start": "60320",
    "end": "66880"
  },
  {
    "text": "portable but the Ingress API has a pretty basic feature set it doesn't support common routing capabilities like",
    "start": "66880",
    "end": "74000"
  },
  {
    "text": "traffic waiting header manipulation rewrites redirects out of the box so",
    "start": "74000",
    "end": "79280"
  },
  {
    "text": "when users want those features or they want to enable some proprietary configuration for their implementation",
    "start": "79280",
    "end": "86079"
  },
  {
    "text": "of Ingress what do they do well they add an annotations to their Ingress",
    "start": "86079",
    "end": "92000"
  },
  {
    "text": "resources and more annotations and more annotations so you might ask I hope not",
    "start": "92000",
    "end": "98840"
  },
  {
    "text": "but you might ask what's wrong with annotations well first of all they're not portable right these implementations",
    "start": "98840",
    "end": "105439"
  },
  {
    "text": "up on the screen here these are enginex Ingress controller annotations and if I wanted to switch",
    "start": "105439",
    "end": "111439"
  },
  {
    "text": "from enginex Ingress controller to another Ingress controller let's say that even uses engine X under the hood",
    "start": "111439",
    "end": "117320"
  },
  {
    "text": "all of those annotations would be different so you'd be mapping one to one all these annotations and both in",
    "start": "117320",
    "end": "124039"
  },
  {
    "text": "controllers might not support the same thing right so it's definitely not portable what else well these are",
    "start": "124039",
    "end": "131000"
  },
  {
    "text": "strings to Strings so they're unstructured they're harder to validate you can't apply a schema to them like",
    "start": "131000",
    "end": "137519"
  },
  {
    "text": "you can the spec of a crd um they're also a little bit harder to use when you're dealing with more advanced",
    "start": "137519",
    "end": "143680"
  },
  {
    "text": "features for example let's look at how you configure rewrites with inex angress controller that's pretty challenging",
    "start": "143680",
    "end": "150599"
  },
  {
    "text": "right I mean that's almost like learning a domain specific language just to configure rewrites and you can imagine",
    "start": "150599",
    "end": "155800"
  },
  {
    "text": "you might mess something up so they're harder to use what else well this is an example of",
    "start": "155800",
    "end": "162159"
  },
  {
    "text": "an Ingress resource with some annotations on it um and what I want to point out here is where the annotations",
    "start": "162159",
    "end": "167879"
  },
  {
    "text": "are they're all grouped at the top of the resource under the metadata field",
    "start": "167879",
    "end": "173120"
  },
  {
    "text": "but they aren't by the relevant parts of the spec that they're modifying and you can imagine as you add more and more",
    "start": "173120",
    "end": "179280"
  },
  {
    "text": "annotation as you add more and more Ingress rules that this gets harder and harder to",
    "start": "179280",
    "end": "185920"
  },
  {
    "text": "understand so what is the Gateway Pi doing about extensibility well it came up with this",
    "start": "185920",
    "end": "191280"
  },
  {
    "text": "resource model so instead of just having an Ingress class and an Ingress we now have more resources okay it's also role",
    "start": "191280",
    "end": "199920"
  },
  {
    "text": "oriented so you can see we have the roles there on the Le hand side of the screen we have infrastructure providers",
    "start": "199920",
    "end": "205959"
  },
  {
    "text": "cluster operators and application developers now each of these roles are responsible for their own resources and",
    "start": "205959",
    "end": "213480"
  },
  {
    "text": "all of these resources attach and relate to one another forming a type of hierarchy that is going to be important",
    "start": "213480",
    "end": "219560"
  },
  {
    "text": "when we get to policy attachment so what does this role oriented model do for extensibility well",
    "start": "219560",
    "end": "227680"
  },
  {
    "text": "it gives us more layers to extend from right so instead of just having that Ingress resource with annotations maybe",
    "start": "227680",
    "end": "234000"
  },
  {
    "text": "we can extend from the Gateway class if you're a cluster infrastructure provider or from the Gateway and we'll see what",
    "start": "234000",
    "end": "239120"
  },
  {
    "text": "that looks like in a second so next up it's expressive so those Advanced",
    "start": "239120",
    "end": "244840"
  },
  {
    "text": "routing capabilities that I mentioned that Ingress doesn't support out of the box well the Gateway API does support a",
    "start": "244840",
    "end": "250560"
  },
  {
    "text": "lot of those features so by becoming a more featur Rich API you need to extend",
    "start": "250560",
    "end": "257120"
  },
  {
    "text": "it less often it's portable this is table Stakes it has to be portable just like the",
    "start": "257120",
    "end": "262199"
  },
  {
    "text": "Ingress is supposed to be portable and then finally the Gateway API was designed with extensibility in",
    "start": "262199",
    "end": "269240"
  },
  {
    "text": "mind so despite the intention to make the Gateway API more expressive and feature",
    "start": "269240",
    "end": "275199"
  },
  {
    "text": "Rich it's inevitable that given the about 30 implementations that implement",
    "start": "275199",
    "end": "281000"
  },
  {
    "text": "the Gateway API and the numerous discret data plane technologies that power them",
    "start": "281000",
    "end": "286560"
  },
  {
    "text": "that all features can't be standard right and then on top of that there's always going to be proprietary",
    "start": "286560",
    "end": "292400"
  },
  {
    "text": "configuration that these implementations want to deliver to their users so the Gateway API added extension points to",
    "start": "292400",
    "end": "298639"
  },
  {
    "text": "their API to support these inevitabilities so let's take a look at what those",
    "start": "298639",
    "end": "304320"
  },
  {
    "text": "are okay we're going to start at the very top with Gateway class so you can extend the Gateway class if you're an",
    "start": "304320",
    "end": "309680"
  },
  {
    "text": "infrastructure Provider by referencing an external resource like a crd or",
    "start": "309680",
    "end": "314960"
  },
  {
    "text": "config map this contains arbitrary config of the implementation the controller you're",
    "start": "314960",
    "end": "321240"
  },
  {
    "text": "using this configuration is applied at the top of this resource model and so it",
    "start": "321240",
    "end": "326319"
  },
  {
    "text": "affects all the gateways that are under that Gateway class well let's say you only want to apply",
    "start": "326319",
    "end": "332160"
  },
  {
    "text": "this arbitrary configuration to a single Gateway well you can use this field on the Gateway object if you're the cluster",
    "start": "332160",
    "end": "338880"
  },
  {
    "text": "operator very similar also called parameters ref and reference an external crd or config map okay what about lower",
    "start": "338880",
    "end": "346840"
  },
  {
    "text": "down so if you're an application developer and you own your HTP route",
    "start": "346840",
    "end": "351960"
  },
  {
    "text": "maybe you want to add a route filter so HP routes have routing rules on them um",
    "start": "351960",
    "end": "358160"
  },
  {
    "text": "so these route filters are reference from an individual routing rule they don't apply to the entire route and they",
    "start": "358160",
    "end": "364080"
  },
  {
    "text": "Define processing steps for the request to response life cycle so some of these are built into the API like URL rewrite",
    "start": "364080",
    "end": "370319"
  },
  {
    "text": "or header manipulation but you can also reference an implementation specific filter um a lot of examples I hear",
    "start": "370319",
    "end": "376400"
  },
  {
    "text": "thrown around are authentication filters or rate limiting filters what else do we have well this",
    "start": "376400",
    "end": "382840"
  },
  {
    "text": "is actually something that the Ingress API supports you don't have to route to a service type you can route to a custom",
    "start": "382840",
    "end": "389240"
  },
  {
    "text": "back type uh common example here is an S3 bucket you can also just create your own",
    "start": "389240",
    "end": "395800"
  },
  {
    "text": "type of Route so if HTTP route or a grpc route doesn't work for you maybe you have some special protocol that you",
    "start": "395800",
    "end": "401639"
  },
  {
    "text": "support you can create your own route type so long as it implements some of the common routing Fields it'll plug",
    "start": "401639",
    "end": "407440"
  },
  {
    "text": "right into the system so this is really great right we have extensibility at every point of that hierarchy but is it",
    "start": "407440",
    "end": "415120"
  },
  {
    "text": "enough um I'm going to make the argument that it's not so what else do we need",
    "start": "415120",
    "end": "420599"
  },
  {
    "text": "well let's say I'm a cluster operator I'm in control of setting up the cluster for all the application developer team",
    "start": "420599",
    "end": "426840"
  },
  {
    "text": "that are using it I want some measure of control over the entire system I care about security I want to mandate",
    "start": "426840",
    "end": "433919"
  },
  {
    "text": "security policies for all the applications I also want to make it easier for application developer teams",
    "start": "433919",
    "end": "439879"
  },
  {
    "text": "to roll out their apps so I want to set some sayane defaults for all these applications or I'm an application",
    "start": "439879",
    "end": "447199"
  },
  {
    "text": "developer and I know my application better than the cluster operator and I want to be able to fine-tune the",
    "start": "447199",
    "end": "453080"
  },
  {
    "text": "settings that the cluster operator has defined for me or any of these roles",
    "start": "453080",
    "end": "458840"
  },
  {
    "text": "maybe you want to change the behavior of services or name spaces without changing the spec and how can we do that right and",
    "start": "458840",
    "end": "467080"
  },
  {
    "text": "more importantly how can we do that while maintaining consistent user experience across all implementations",
    "start": "467080",
    "end": "473120"
  },
  {
    "text": "can we get more extensibility without sacrificing portability that's where policy",
    "start": "473120",
    "end": "478879"
  },
  {
    "text": "attachment comes in now quick disclaimer here policy attachment is currently a work in progress and some of these",
    "start": "478879",
    "end": "484520"
  },
  {
    "text": "details may change okay so let's start with some definitions what is policy attachment um and I want to point out",
    "start": "484520",
    "end": "491520"
  },
  {
    "text": "that a lot of this information comes from the uh the Gateway enhancement proposal on policy attachment and meta",
    "start": "491520",
    "end": "496560"
  },
  {
    "text": "resources which is linked in the back of my slides okay so policy attachment it's a",
    "start": "496560",
    "end": "501879"
  },
  {
    "text": "specific type of meta resource that can affect specific settings across either one object that's direct policy",
    "start": "501879",
    "end": "507919"
  },
  {
    "text": "attachment or objects in a higher that's inherited so what's meta resource well it's a kuat object that augments",
    "start": "507919",
    "end": "514959"
  },
  {
    "text": "the behavior of another object in a standard way and finally what's a policy",
    "start": "514959",
    "end": "520518"
  },
  {
    "text": "well it's a meta resource but it's also just a crd so two things I want to point out here is that policies they can be",
    "start": "520519",
    "end": "527320"
  },
  {
    "text": "owned by the Gateway API or they can be owned by implementations like engine X",
    "start": "527320",
    "end": "533160"
  },
  {
    "text": "but policy attachment that's a pattern that's a set of rules that's written by the Gateway API",
    "start": "533160",
    "end": "540320"
  },
  {
    "text": "and it governs how the policies can affect the resources in the Gateway API",
    "start": "540320",
    "end": "546120"
  },
  {
    "text": "hierarchy and again the goal here is to give the user a consistent user",
    "start": "546120",
    "end": "551720"
  },
  {
    "text": "experience across implementations even when the content of the policies change okay so let's take a look at the",
    "start": "551720",
    "end": "558760"
  },
  {
    "text": "first type of policy attachment direct policies so this is simpler than inherited supposed to be easier to use",
    "start": "558760",
    "end": "565640"
  },
  {
    "text": "and easier to understand um and let's start by taking a look at an example so here we",
    "start": "565640",
    "end": "572839"
  },
  {
    "text": "have uh a diagram that shows the request flow from a client through the various Gateway API resources to some backend",
    "start": "572839",
    "end": "579959"
  },
  {
    "text": "pods if I want to enable TLS termination between the client and the Gateway I can do that with the Gateway resource itself",
    "start": "579959",
    "end": "587360"
  },
  {
    "text": "but what if I want backend TLS termination what if the pods that back that service have their own certificate",
    "start": "587360",
    "end": "594680"
  },
  {
    "text": "how can I tell the Gateway or kind of the route um how to connect with those pots",
    "start": "594680",
    "end": "600320"
  },
  {
    "text": "and the answer that the Gateway API come up with is by creating a backend TLS policy and targeting that service so",
    "start": "600320",
    "end": "607600"
  },
  {
    "text": "what does this look like well here's the yaml of it and first thing I want to",
    "start": "607600",
    "end": "612880"
  },
  {
    "text": "point out here is this is a gateway API type so the API version has the Gateway API Group it's named clearly to indicate",
    "start": "612880",
    "end": "620000"
  },
  {
    "text": "that it's a policy back in TLS policy and then the in the spec we have",
    "start": "620000",
    "end": "625800"
  },
  {
    "text": "the target ref so the target ref identifies the object who apply the policy too this policy targets the",
    "start": "625800",
    "end": "632880"
  },
  {
    "text": "service Fu um but it can Target more than one service but it is tightly bound to the kind service meaning you can only",
    "start": "632880",
    "end": "640120"
  },
  {
    "text": "target services with this policy and then next up we have the validation the backend TS validation",
    "start": "640120",
    "end": "646079"
  },
  {
    "text": "config that we want to apply to the services that we're targeting so why is this",
    "start": "646079",
    "end": "652360"
  },
  {
    "text": "direct and before I get into the details and why it's direct I want to highlight a key difference between policies and",
    "start": "652360",
    "end": "658800"
  },
  {
    "text": "the other extension mechanisms I've already gone through and the difference is which resource is doing the",
    "start": "658800",
    "end": "664079"
  },
  {
    "text": "referencing so with extensions like route filters backend refs parameters",
    "start": "664079",
    "end": "669200"
  },
  {
    "text": "ref um the Gateway API resource is referencing an external resource like a crd but with policies the policy or the",
    "start": "669200",
    "end": "677399"
  },
  {
    "text": "crd is doing the referencing it's targeting a resource in this Gateway AP pii resource",
    "start": "677399",
    "end": "683519"
  },
  {
    "text": "model okay so why is it direct well first of all it only targets the it only",
    "start": "683519",
    "end": "688600"
  },
  {
    "text": "affects the service it targets so the other services the backend TLS policy is not pointing to in this diagram will not",
    "start": "688600",
    "end": "695800"
  },
  {
    "text": "have the configuration applied to them what else it's tightly bound to the kind",
    "start": "695800",
    "end": "700839"
  },
  {
    "text": "service you can only attach these policies to services and then this is kind of",
    "start": "700839",
    "end": "706320"
  },
  {
    "text": "similar to the second point but it attaches to a single layer in the hierarchy all right so what about",
    "start": "706320",
    "end": "713360"
  },
  {
    "text": "inherited so if you recall inherited policy affects objects in a hierarchy so",
    "start": "713360",
    "end": "718440"
  },
  {
    "text": "this slide shows the Ingress hierarchy there is a sidecar hierarchy as well but for this talk I'm focusing on the",
    "start": "718440",
    "end": "724399"
  },
  {
    "text": "Ingress use case here so there are two types of settings for inherited policies",
    "start": "724399",
    "end": "730120"
  },
  {
    "text": "we have defaults which set defaults for something and overrides which set",
    "start": "730120",
    "end": "735279"
  },
  {
    "text": "mandates requirements or constraints defaults are given precedence from the bottom up so what",
    "start": "735279",
    "end": "742120"
  },
  {
    "text": "does this mean well it means that if you apply a default to a Gateway and you apply a different default to a route the",
    "start": "742120",
    "end": "749560"
  },
  {
    "text": "route default will win because it's lower in the hierarchy overrides work the opposite",
    "start": "749560",
    "end": "755399"
  },
  {
    "text": "way so they're given precedence from the top down so let's take that same example except use overrides so I've applied an",
    "start": "755399",
    "end": "762360"
  },
  {
    "text": "override to the Gateway and a different one to the route the one at the Gateway will win because it's higher",
    "start": "762360",
    "end": "768160"
  },
  {
    "text": "up this also means that the default attached the back end will have the highest precedence among all default",
    "start": "768160",
    "end": "773880"
  },
  {
    "text": "values whereas the override attached to the Gateway class will have the highest precedence over all including",
    "start": "773880",
    "end": "781519"
  },
  {
    "text": "defaults all right so to explain more about inherited policies I want to take you through enginex Gateway Fabric's",
    "start": "781519",
    "end": "788519"
  },
  {
    "text": "first policy that we created and it starts with an issue where a user wants",
    "start": "788519",
    "end": "793839"
  },
  {
    "text": "to be able to set the client Max body size for their application and for those of you who aren't familiar with enginex",
    "start": "793839",
    "end": "799519"
  },
  {
    "text": "client Max body size is an enginex setting that allows you to set an upper limit for the client request body okay",
    "start": "799519",
    "end": "806600"
  },
  {
    "text": "so when we got this issue we got together as a team and we wrote up some user stories here's what we came up with",
    "start": "806600",
    "end": "812560"
  },
  {
    "text": "number one as a cluster operator I want to be able to set San defaults for client body settings like client Max",
    "start": "812560",
    "end": "818880"
  },
  {
    "text": "body size and client body timeout that will work for most applications and as an application",
    "start": "818880",
    "end": "825480"
  },
  {
    "text": "developer who knows my app I want to be able to configure these values as well and then finally and this one kind",
    "start": "825480",
    "end": "831720"
  },
  {
    "text": "of is the same thing as number two but I think it's important to keep it separate if I'm an application developer I want",
    "start": "831720",
    "end": "837519"
  },
  {
    "text": "to fine-tune the defaults that my cluster operator set for me okay so we had all these user stories and we",
    "start": "837519",
    "end": "844040"
  },
  {
    "text": "started looking through the available Gateway API extension mechanisms and we were looking at the",
    "start": "844040",
    "end": "850920"
  },
  {
    "text": "fact that we have multiple roles up here um we want to set saying defaults and we want to be able to fine-tune those",
    "start": "850920",
    "end": "856639"
  },
  {
    "text": "settings and it really seemed like policy was the best choice but which type of",
    "start": "856639",
    "end": "862839"
  },
  {
    "text": "policy I was reading the gap on policy and I read that direct is direct policy",
    "start": "863000",
    "end": "869399"
  },
  {
    "text": "is simpler it's easier to understand it's easier to use and I just really wanted to write a direct policy so I",
    "start": "869399",
    "end": "877720"
  },
  {
    "text": "started going through the use cases and trying to figure out well where would the policy attach so for the first use",
    "start": "877720",
    "end": "884399"
  },
  {
    "text": "case we're dealing with cluster operators they own gateways so it makes sense that it would attach to the",
    "start": "884399",
    "end": "889759"
  },
  {
    "text": "Gateway okay and then what about the other two well those are application of elers they own routes so it makes sense",
    "start": "889759",
    "end": "897160"
  },
  {
    "text": "that both of those would attach to the route now you might be looking at this diagram and be saying Kate this is obviously an",
    "start": "897160",
    "end": "904120"
  },
  {
    "text": "inherited policy we have policies attached at multiple layers of the hierarchy right but I still wasn't",
    "start": "904120",
    "end": "910040"
  },
  {
    "text": "convinced I still really wanted this to be a direct policy and so I jumped into the gateway Pi slack Channel and I I",
    "start": "910040",
    "end": "917079"
  },
  {
    "text": "gave them my use cases and I said is this direct or inherited but really I wanted to hear that it was direct and",
    "start": "917079",
    "end": "923320"
  },
  {
    "text": "Nick one of the maintainers jumped on and he said well let me ask you this does the policy affect any other object",
    "start": "923320",
    "end": "929639"
  },
  {
    "text": "aside from the one it targets and I say it depends right if",
    "start": "929639",
    "end": "934759"
  },
  {
    "text": "you attach it to an HTTP route well it really only affects that HTP route if you attach it at the Gateway level I",
    "start": "934759",
    "end": "942560"
  },
  {
    "text": "guess technically it will affect both of those HTTP routes that are attached to it because that's where client Max body",
    "start": "942560",
    "end": "949319"
  },
  {
    "text": "size is enforced but I still just want to use direct policies maybe I can write",
    "start": "949319",
    "end": "955160"
  },
  {
    "text": "multiple direct policies maybe I can just tell the user just use it as a direct policy uh but then I came back",
    "start": "955160",
    "end": "962079"
  },
  {
    "text": "and he said if a policy can be used as an inherited policy it must be treated as one and in hindsight this really",
    "start": "962079",
    "end": "968199"
  },
  {
    "text": "makes sense right like if I attach a policy to the Gateway that configures client Max body size to say two Megs and",
    "start": "968199",
    "end": "976519"
  },
  {
    "text": "then I attach one to the H Tob route and set the client Max body size to 10 Megs",
    "start": "976519",
    "end": "981639"
  },
  {
    "text": "well which one wins and I can come up with the answer to that and I can document it it can be implementation",
    "start": "981639",
    "end": "987639"
  },
  {
    "text": "specific but that's not not standard and it's certainly not portable right this is why we have inherited policy okay so",
    "start": "987639",
    "end": "994759"
  },
  {
    "text": "I'm finally convinced I'm writing an inherited policy and I'm going through the spec again and I'm just looking at all the",
    "start": "994759",
    "end": "1001720"
  },
  {
    "text": "rules and we're just going to write this policy together so it must be a crd easy can do that it may be included in the",
    "start": "1001720",
    "end": "1008360"
  },
  {
    "text": "Gateway API Group or defined by implementations so we've already seen a policy that's in the Gateway API Group",
    "start": "1008360",
    "end": "1014480"
  },
  {
    "text": "this one's going to be an engine X's group so we'll add that to the API version",
    "start": "1014480",
    "end": "1019519"
  },
  {
    "text": "must be clearly named to indicate that it's a policy meta resource we'll copy what back in TLS policy did we'll call",
    "start": "1019519",
    "end": "1025600"
  },
  {
    "text": "it client settings policy add some metadata next up all right so it must include a label on the crd that",
    "start": "1025600",
    "end": "1032558"
  },
  {
    "text": "specifies it's an inherited policy um conversely if it was if it was direct it would have to specify direct we're going",
    "start": "1032559",
    "end": "1040000"
  },
  {
    "text": "to cheat a little bit and show this on our example even though it would be technically on the crd itself but that's",
    "start": "1040000",
    "end": "1045199"
  },
  {
    "text": "what the label looks like and then it needs a spec in a status let's go ahead and add those now let's dive deeper into",
    "start": "1045199",
    "end": "1052880"
  },
  {
    "text": "spec okay so for the spec we need a Target ref we've seen this already but",
    "start": "1052880",
    "end": "1058080"
  },
  {
    "text": "for this particular policy we want to support attaching to http routes and gateways so we're going to cheat a",
    "start": "1058080",
    "end": "1063200"
  },
  {
    "text": "little bit again and show them both there you may specify a default stanza",
    "start": "1063200",
    "end": "1069799"
  },
  {
    "text": "an override stanza or both okay so let's think back defaults set default values",
    "start": "1069799",
    "end": "1075280"
  },
  {
    "text": "overrides mandate something they set a requirement they set a con constraint our use cases are setting say defaults",
    "start": "1075280",
    "end": "1083360"
  },
  {
    "text": "and fine-tuning those defaults lower down in the route level well I think we",
    "start": "1083360",
    "end": "1088799"
  },
  {
    "text": "can get all of those done with defaults we don't need any overrides in this case",
    "start": "1088799",
    "end": "1094120"
  },
  {
    "text": "so let's look at what this could look like so you have a default and then nested under that you have the settings",
    "start": "1094120",
    "end": "1100440"
  },
  {
    "text": "that we want to expose but we're only setting defaults here and this uh",
    "start": "1100440",
    "end": "1106400"
  },
  {
    "text": "instruction from The Gap is a may not a must so we can omit default in this case and just document that these values are",
    "start": "1106400",
    "end": "1113640"
  },
  {
    "text": "treated like defaults so let's do that keep it a little bit more streamline okay so what about status so",
    "start": "1113640",
    "end": "1120400"
  },
  {
    "text": "when a user creates a client settings policy they give us the desired State um through the spec of that policy and then",
    "start": "1120400",
    "end": "1128120"
  },
  {
    "text": "the controller that processes the policy in this case INX Gateway fabric well they're going to write the actual state",
    "start": "1128120",
    "end": "1133919"
  },
  {
    "text": "to the status but what the Gateway API does is it prescribes what that status should look like like so one thing that",
    "start": "1133919",
    "end": "1140840"
  },
  {
    "text": "it prescribes or actually recommends in this case is that you should use the policy ancestor status struct in the",
    "start": "1140840",
    "end": "1147520"
  },
  {
    "text": "status stanza now this is something that's used by the backend TLS policy um",
    "start": "1147520",
    "end": "1152760"
  },
  {
    "text": "and we wanted to use it in our inherited policy as well and let's take a look so",
    "start": "1152760",
    "end": "1158880"
  },
  {
    "text": "we have ancestors ancestors are resources that are associated with this policy ancestors contain an ancestor ref",
    "start": "1158880",
    "end": "1166559"
  },
  {
    "text": "so this is the actual ancestor um and this is like what the ancestor is is is",
    "start": "1166559",
    "end": "1171600"
  },
  {
    "text": "left up to the implementation a little bit they recommend gateways but in our case we thought it would be more helpful",
    "start": "1171600",
    "end": "1177960"
  },
  {
    "text": "to set the ancestor ref to the resource that the policy targets so if the resource targets an HTTP route the",
    "start": "1177960",
    "end": "1185520"
  },
  {
    "text": "ancestor ref will be that HTP route and if it's a if it targets a Gateway the ancestor ref will be the Gateway and",
    "start": "1185520",
    "end": "1192280"
  },
  {
    "text": "then what else do we need well we need some conditions in this case it'll be nested",
    "start": "1192280",
    "end": "1197360"
  },
  {
    "text": "under that ancestor entry and what this says is the ancestor let's say it's a",
    "start": "1197360",
    "end": "1202919"
  },
  {
    "text": "route the HT route resource name accepts the policy that you've created if it",
    "start": "1202919",
    "end": "1208919"
  },
  {
    "text": "didn't accept the policy you'd expect that status to be false and the message to contain some helpful information",
    "start": "1208919",
    "end": "1215039"
  },
  {
    "text": "hopefully okay so that's it I mean we wrote our policy here it is so what does",
    "start": "1215039",
    "end": "1220520"
  },
  {
    "text": "this look like in practice let's look at an example we have a Gateway and then",
    "start": "1220520",
    "end": "1226000"
  },
  {
    "text": "three different htb routes attached to that Gateway now let's say I'm a cluster operator",
    "start": "1226000",
    "end": "1231200"
  },
  {
    "text": "again and I want to set some same defaults for all of these routes so I create a client settings policy and I",
    "start": "1231200",
    "end": "1238559"
  },
  {
    "text": "set the client Max body size to two Megs and the body timeout to 5 Seconds what",
    "start": "1238559",
    "end": "1244559"
  },
  {
    "text": "this looks like is that all of those routes attached to the Gateway will inherit those settings but let's say I'm",
    "start": "1244559",
    "end": "1252799"
  },
  {
    "text": "now the application developer in charge of the bar HTP route and that client Max",
    "start": "1252799",
    "end": "1258799"
  },
  {
    "text": "body size isn't going to cut it for me I need it to be bigger so I can create my own policy and I'll Target my route bar",
    "start": "1258799",
    "end": "1266360"
  },
  {
    "text": "and I'll increase that Max size to five Megs and because the route is lower than the Gateway in the hierarchy my value",
    "start": "1266360",
    "end": "1273760"
  },
  {
    "text": "wins and I can replace it there but you'll notice that the timeout Remains the Same because how we calculate this",
    "start": "1273760",
    "end": "1280640"
  },
  {
    "text": "is effective policy is going to be done on a field my field basis here okay so",
    "start": "1280640",
    "end": "1286120"
  },
  {
    "text": "what about baz what if I'm the application about for the baz route I don't like either of those settings so",
    "start": "1286120",
    "end": "1292159"
  },
  {
    "text": "I'm going to create my own policy I'm going to Target the baz route and again because we're dealing with defaults and",
    "start": "1292159",
    "end": "1297720"
  },
  {
    "text": "because routes are lower than gateways both those values will win so what's left is Foo and and Fu",
    "start": "1297720",
    "end": "1304240"
  },
  {
    "text": "doesn't have any special needs and the same defaults work for them so they",
    "start": "1304240",
    "end": "1309279"
  },
  {
    "text": "don't create any policy and they still inherit the settings from the same default set or targeting the",
    "start": "1309279",
    "end": "1315960"
  },
  {
    "text": "Gateway okay so that's policy attachment as simply as I can put",
    "start": "1315960",
    "end": "1321559"
  },
  {
    "text": "it what have we achieved with policy attachment what kind of extensibility have we gained well let's revisit this",
    "start": "1321559",
    "end": "1327640"
  },
  {
    "text": "case for more extensibility so with inherited policies we can now mandate security",
    "start": "1327640",
    "end": "1335000"
  },
  {
    "text": "policies across all our applications using overrides and using defaults with",
    "start": "1335000",
    "end": "1340600"
  },
  {
    "text": "inherited policies we can also set saying defaults and allow application",
    "start": "1340600",
    "end": "1345919"
  },
  {
    "text": "developers lower down in that hierarchy to change them so we have satisfied both",
    "start": "1345919",
    "end": "1351640"
  },
  {
    "text": "of these use cases um we can also Target resources that aren't Gateway API",
    "start": "1351640",
    "end": "1357520"
  },
  {
    "text": "resources we can Target services like we saw with the backend TS policy so we've satisfied that as well so we've added",
    "start": "1357520",
    "end": "1364840"
  },
  {
    "text": "more extensibility but how's the user experience this brings us to the",
    "start": "1364840",
    "end": "1370120"
  },
  {
    "text": "challenges so first of all it's complex right I think it's a fair statement um",
    "start": "1370120",
    "end": "1377760"
  },
  {
    "text": "what I've shown you today is just a fraction of what's laid out in the gap",
    "start": "1377760",
    "end": "1382799"
  },
  {
    "text": "on policy attachment but if you still aren't convinced that policy attachment is complex let me show you",
    "start": "1382799",
    "end": "1389600"
  },
  {
    "text": "this so let's consider how you configure client Max body size with the Ingress",
    "start": "1389600",
    "end": "1395840"
  },
  {
    "text": "API and an enginex Ingress controller it's just that one line right",
    "start": "1395840",
    "end": "1402159"
  },
  {
    "text": "pretty simple now let's consider how you do the same thing with the Gateway API",
    "start": "1402159",
    "end": "1407720"
  },
  {
    "text": "policy attached and another engine x controller so on its face I mean it's",
    "start": "1407720",
    "end": "1413760"
  },
  {
    "text": "certainly more text I think you can agree um it's also a completely different resource right it's a",
    "start": "1413760",
    "end": "1421039"
  },
  {
    "text": "crd you need to know what Target ref is you need to know what happens when you",
    "start": "1421039",
    "end": "1426120"
  },
  {
    "text": "target a Gateway or when you target a route you need to know what happens if you target both a Gateway and a route so",
    "start": "1426120",
    "end": "1432080"
  },
  {
    "text": "you need to understand the rules right it's complex there's also Al what's been",
    "start": "1432080",
    "end": "1439279"
  },
  {
    "text": "coined the discoverability problem and I don't have enough time to do this problem justice so I really recommend if",
    "start": "1439279",
    "end": "1444919"
  },
  {
    "text": "you're interested reading the parable in the gap on policy attachment again linked in the back of these slides okay",
    "start": "1444919",
    "end": "1451120"
  },
  {
    "text": "but I'm going to give it a shot so let's say we're the application developer team working on the fu HTTP route and let's",
    "start": "1451120",
    "end": "1457600"
  },
  {
    "text": "further say we don't know that client settings policies exist we don't have",
    "start": "1457600",
    "end": "1462880"
  },
  {
    "text": "permission to view them edit them create them or anything so we have no idea that any policy is affecting our route so we",
    "start": "1462880",
    "end": "1470880"
  },
  {
    "text": "don't have the complete picture and if something goes wrong we might make the wrong decision because we don't know",
    "start": "1470880",
    "end": "1477279"
  },
  {
    "text": "everything about our system we don't know what's affecting our route in an Ideal World you'd be able to",
    "start": "1477279",
    "end": "1485279"
  },
  {
    "text": "know that client settings policy existed that it was affecting your route and",
    "start": "1485279",
    "end": "1491120"
  },
  {
    "text": "you'd be able to know exactly how was affecting your route you'd be able to know what the settings",
    "start": "1491120",
    "end": "1496600"
  },
  {
    "text": "are so what's the Gateway API doing about that well it turns out they're doing a lot so there's a tool called",
    "start": "1497320",
    "end": "1503320"
  },
  {
    "text": "Gateway cuddle or Gateway CTL however you prefer um that's a command line tool for the Gateway API and you can describe",
    "start": "1503320",
    "end": "1510760"
  },
  {
    "text": "Gateway API resources you can even see how policies are affecting that resource",
    "start": "1510760",
    "end": "1515880"
  },
  {
    "text": "I believe you can ev even see the effective policy like the settings and I don't want to steal too much Thunder",
    "start": "1515880",
    "end": "1521919"
  },
  {
    "text": "from Gateway cuddle because they do have a talk this Friday that I recommend you guys go to I'll definitely be there so",
    "start": "1521919",
    "end": "1528840"
  },
  {
    "text": "what else um well status so this is something that actually Gateway cuddle uses in order to build um their",
    "start": "1528840",
    "end": "1537120"
  },
  {
    "text": "responses but C CTL describe is your friend make sure that you're describing your policy resources and you're looking",
    "start": "1537120",
    "end": "1544320"
  },
  {
    "text": "at the status and if you don't see a status it's a sign that something's wrong with the resource that you're",
    "start": "1544320",
    "end": "1549760"
  },
  {
    "text": "targeting so go describe that resource um one status that I didn't mention",
    "start": "1549760",
    "end": "1557279"
  },
  {
    "text": "earlier in this talk is something called policy affected and this is meant to be a sort of breadcrumb that the controller",
    "start": "1557279",
    "end": "1564240"
  },
  {
    "text": "can leave on resources that are affected by a policy so maybe you describe your right your route sorry and it says",
    "start": "1564240",
    "end": "1571279"
  },
  {
    "text": "policy affected and then it gives you the type of policy it's like client settings policy so at least you know that client settings policy exists and",
    "start": "1571279",
    "end": "1578000"
  },
  {
    "text": "then it affects your route and you can go to your cluster operating and be like what is this right so status is your",
    "start": "1578000",
    "end": "1583880"
  },
  {
    "text": "friend and then finally I mean knowledge is power so understanding the rules a policy attachment will make you a better",
    "start": "1583880",
    "end": "1590200"
  },
  {
    "text": "policy user Okay so we've added extensibility",
    "start": "1590200",
    "end": "1596279"
  },
  {
    "text": "but how has that affected portability is this better than",
    "start": "1596279",
    "end": "1601640"
  },
  {
    "text": "annotations have we replaced annotations with crds how many crds is too many",
    "start": "1601640",
    "end": "1607720"
  },
  {
    "text": "crds and I don't think I can answer this question I think it's up to you I think it's up to the users but I can give you",
    "start": "1607720",
    "end": "1614320"
  },
  {
    "text": "my opinion and I think this solution is better than annotations it's more powerful gives you a system of defaults",
    "start": "1614320",
    "end": "1621679"
  },
  {
    "text": "and overrides that is consistent across implementations it allows you to change",
    "start": "1621679",
    "end": "1627279"
  },
  {
    "text": "the behavior of services and name spaces without changing their specs this combined with the efforts of",
    "start": "1627279",
    "end": "1634440"
  },
  {
    "text": "the Gateway API to be expressive to standardize as many popular routing features as possible and",
    "start": "1634440",
    "end": "1641679"
  },
  {
    "text": "to add standard policy types like backend TLS policy should make implementation specific policies less",
    "start": "1641679",
    "end": "1647880"
  },
  {
    "text": "common but when evitably those policies are created the rules will be standard which",
    "start": "1647880",
    "end": "1653679"
  },
  {
    "text": "allows for common tooling like Gateway cuddle which makes policy attachment more",
    "start": "1653679",
    "end": "1659679"
  },
  {
    "text": "portable so what's next well there's an open GitHub discussion around potential",
    "start": "1659679",
    "end": "1665519"
  },
  {
    "text": "changes for policy attachment also linked in the back of my slides if you want to participate improved discoverability",
    "start": "1665519",
    "end": "1672480"
  },
  {
    "text": "Gateway cutle is just on its first release so I expect it to bring better things more policies so the Gateway API",
    "start": "1672480",
    "end": "1680640"
  },
  {
    "text": "has already added another standard policy called um backend lb policy I say",
    "start": "1680640",
    "end": "1686640"
  },
  {
    "text": "standard but is technically experimental um and other implementations are adding policies",
    "start": "1686640",
    "end": "1692960"
  },
  {
    "text": "too what else I want to give a shout out to quadrant quadrants been doing a lot",
    "start": "1692960",
    "end": "1698039"
  },
  {
    "text": "of great work with policy attachment in the Gateway pii working group and they've actually created this",
    "start": "1698039",
    "end": "1704200"
  },
  {
    "text": "open-source framework for implementers to use to spin uh policy controllers and",
    "start": "1704200",
    "end": "1709720"
  },
  {
    "text": "more generically processed policies and then finally you tell us we",
    "start": "1709720",
    "end": "1715120"
  },
  {
    "text": "want your feedback we want you to use policies and let us know what you think is it portable is it powerful does it",
    "start": "1715120",
    "end": "1721519"
  },
  {
    "text": "provide you with value okay so if you want more of the Gateway API there are tons of talks this",
    "start": "1721519",
    "end": "1728679"
  },
  {
    "text": "year at cubec con so I'll leave that up for just a second for you to look",
    "start": "1728679",
    "end": "1735679"
  },
  {
    "text": "through and finally the Gateway API wants your feedback no matter where you're at in your user",
    "start": "1736320",
    "end": "1741919"
  },
  {
    "text": "Journey the Gateway API wants to know about it so please take the survey if",
    "start": "1741919",
    "end": "1746960"
  },
  {
    "text": "you can um and wow I really like sped read through that so I have a little over five minutes for questions if",
    "start": "1746960",
    "end": "1753000"
  },
  {
    "text": "anyone has any thank you for [Applause]",
    "start": "1753000",
    "end": "1764440"
  },
  {
    "text": "listening hi do you have any tool to help diva when a request and uh what",
    "start": "1764440",
    "end": "1770240"
  },
  {
    "text": "policy is affecting that request so let me see if I heard that correctly do we have any tools to debug a request and if",
    "start": "1770240",
    "end": "1777320"
  },
  {
    "text": "that request has been affected by any of the policies oh good question um I don't",
    "start": "1777320",
    "end": "1783519"
  },
  {
    "text": "think nothing for a specific request no um the Gateway cutle tool can describe like the custom resources can look at",
    "start": "1783519",
    "end": "1790320"
  },
  {
    "text": "everything that's stored in the API but it can't no it can't look at a specific request even it cannot log at the Quan",
    "start": "1790320",
    "end": "1797760"
  },
  {
    "text": "level it can't log at the what level KU level like as a debug log or something that",
    "start": "1797760",
    "end": "1804120"
  },
  {
    "text": "this Gateway cuddle itself yeah or or whenever the request is arriving it can",
    "start": "1804120",
    "end": "1810200"
  },
  {
    "text": "actually log that this request is filling at this layer at the gate I",
    "start": "1810200",
    "end": "1815480"
  },
  {
    "text": "think yeah I think individual like Gateway implementations could do something like that right yeah but I think that would be up to the individual",
    "start": "1815480",
    "end": "1821840"
  },
  {
    "text": "in implementations there's nothing prescribed by the Gateway API it says they must do that thank you yeah thank",
    "start": "1821840",
    "end": "1827799"
  },
  {
    "text": "you for the question oh yep so the the overrides give the application teams the freedom",
    "start": "1827799",
    "end": "1834120"
  },
  {
    "text": "to adjust from the default inherited policies right so overrides sorry my",
    "start": "1834120",
    "end": "1840679"
  },
  {
    "text": "next my question is um with this policy design or is engine X or whoever's",
    "start": "1840679",
    "end": "1848039"
  },
  {
    "text": "creating this stuff are you going to be able to have configurable boundaries of what that samean threshold may be so the",
    "start": "1848039",
    "end": "1854799"
  },
  {
    "text": "application teams can adjust within the same range right but not go like not go",
    "start": "1854799",
    "end": "1861240"
  },
  {
    "text": "nuts and in certain areas I was wondering if there's going to be any sort of like a range there of what's",
    "start": "1861240",
    "end": "1866440"
  },
  {
    "text": "allowed Downstream yeah so that's that's a really interesting question and I believe that quadrant has brought that",
    "start": "1866440",
    "end": "1872279"
  },
  {
    "text": "up and is something that um they might be discussing on that GitHub discussion",
    "start": "1872279",
    "end": "1877600"
  },
  {
    "text": "I linked in the back of the slides this idea of constraints and mins and Max I believe that's true okay so it might be",
    "start": "1877600",
    "end": "1884000"
  },
  {
    "text": "coming as of right now no um and then to answer your question about overrides so overrides they mandate",
    "start": "1884000",
    "end": "1891919"
  },
  {
    "text": "things they set requirements so if you as a cluster operator want to mandate",
    "start": "1891919",
    "end": "1897320"
  },
  {
    "text": "something or even high up as an infrastructure provider you can set an override at the Gateway class level and",
    "start": "1897320",
    "end": "1902840"
  },
  {
    "text": "no one can change that value so as an application developer I cannot fine-tune",
    "start": "1902840",
    "end": "1909159"
  },
  {
    "text": "that override if you set it as a default though then I as an application",
    "start": "1909159",
    "end": "1914200"
  },
  {
    "text": "developer can change that does that make sense",
    "start": "1914200",
    "end": "1919840"
  },
  {
    "text": "okay yeah exactly and I'll point out if you set an override low enough so if you set an override at the route and then",
    "start": "1926559",
    "end": "1933120"
  },
  {
    "text": "someone comes in and says to override at the Gateway the Gateway will win so it just matters where you are in that",
    "start": "1933120",
    "end": "1939519"
  },
  {
    "text": "hierarchy yeah okay anyone else",
    "start": "1939519",
    "end": "1948320"
  },
  {
    "text": "oh sure um so if one of the problems with",
    "start": "1948320",
    "end": "1955639"
  },
  {
    "text": "the Ingress API is that you force people to write annotations and then the",
    "start": "1955639",
    "end": "1960960"
  },
  {
    "text": "annotations don't uh easily migrate between Ingress controller",
    "start": "1960960",
    "end": "1966000"
  },
  {
    "text": "implementations do you not get the same issue if you're defining the policies",
    "start": "1966000",
    "end": "1971320"
  },
  {
    "text": "within like an engine X CID absolutely you do yeah so the content and the",
    "start": "1971320",
    "end": "1977480"
  },
  {
    "text": "policy will change if you move from controller to a controller but the idea is that hopefully the set of rules that",
    "start": "1977480",
    "end": "1984000"
  },
  {
    "text": "govern how the policy affects the Gateway API resources um is enough to maintain some of that portability so you",
    "start": "1984000",
    "end": "1990960"
  },
  {
    "text": "have to learn a new policy you have to learn a new crd but you should already understand how Target refs work you",
    "start": "1990960",
    "end": "1996039"
  },
  {
    "text": "should understand how defaults and overrides work right so you just need to learn like the configuration that's contained in that policy great thank you",
    "start": "1996039",
    "end": "2003639"
  },
  {
    "text": "yeah",
    "start": "2003639",
    "end": "2006639"
  },
  {
    "text": "in that uh first slide you showed off or one of the earlier slides you showed off a whole lot of annotations um what is there a public",
    "start": "2010840",
    "end": "2018960"
  },
  {
    "text": "place where engine X is talking about the specific support for some of those many many annotations uh coming to a",
    "start": "2018960",
    "end": "2027000"
  },
  {
    "text": "policy resource oh like mapping to a policy good question um no so we have",
    "start": "2027000",
    "end": "2032760"
  },
  {
    "text": "documentation for all of those annotations just on our normal doc site but we don't yet have feature parody",
    "start": "2032760",
    "end": "2038679"
  },
  {
    "text": "with our own Ingress controller so we don't have like a one toone mapping of annotations to policy but that's a good",
    "start": "2038679",
    "end": "2044320"
  },
  {
    "text": "idea basically the question is there a plan to get to that point uh or is there",
    "start": "2044320",
    "end": "2051358"
  },
  {
    "text": "any information that's available that we can look at on you know C or wherever else yeah see what the kind of progress",
    "start": "2051359",
    "end": "2056679"
  },
  {
    "text": "is for something like that yes absolutely um so we have our own version of enhancement proposals in our repo and",
    "start": "2056679",
    "end": "2062800"
  },
  {
    "text": "gen next Gateway fabric there you can find our whole plan on policies moving forward and which enginex features we",
    "start": "2062800",
    "end": "2068919"
  },
  {
    "text": "want to expose through policies okay thanks very much",
    "start": "2068919",
    "end": "2073879"
  },
  {
    "text": "yeah yeah so what he was saying is that there's a project called Ingress to Gateway which helps users migrate from",
    "start": "2080720",
    "end": "2086560"
  },
  {
    "text": "Ingress to Gateway controllers that might help you out and check that out as well",
    "start": "2086560",
    "end": "2093320"
  }
]