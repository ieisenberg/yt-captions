[
  {
    "text": "welcome to continuous performance benchmarking for vitesse maintainer talk my name is alkin",
    "start": "240",
    "end": "6319"
  },
  {
    "text": "and i'll be your host today and today's agenda i'll be doing an introduction to with tess and manan will",
    "start": "6319",
    "end": "12799"
  },
  {
    "text": "do benchmarking as a product information and florent will give you benchmarking on internals",
    "start": "12799",
    "end": "18560"
  },
  {
    "text": "from the bts project a little bit about the tests is it is a database clustering system for the horizontal scaling of mysql it is a",
    "start": "18560",
    "end": "25680"
  },
  {
    "text": "known cncf graduate project an open source licensed and we have contributors around the world",
    "start": "25680",
    "end": "32078"
  },
  {
    "text": "and more on vtes is a single illusion of a database actually dedicated connection",
    "start": "32079",
    "end": "37360"
  },
  {
    "text": "that can work on microscope 5.7 or 800 and it is compatible with the frameworks like an rms uh common frameworks and",
    "start": "37360",
    "end": "43440"
  },
  {
    "text": "rams and it is known to be scalable also provides high availability and durability guarantees of the database",
    "start": "43440",
    "end": "51760"
  },
  {
    "text": "very highly adopted and serves millions of qps around the world you might be using day-to-day",
    "start": "51760",
    "end": "56840"
  },
  {
    "text": "and mostly a very large implementations are are there to be known also other",
    "start": "56840",
    "end": "62640"
  },
  {
    "text": "implementations are in the market right now so let's go into the concepts of office and with this because it's a sharded",
    "start": "62640",
    "end": "69119"
  },
  {
    "text": "system has a key space concept for a logical database and provides a shard as a logical database and it comes with a",
    "start": "69119",
    "end": "76560"
  },
  {
    "text": "with a concept called cell for a failure domain with this architecture actually serves with a",
    "start": "76560",
    "end": "83119"
  },
  {
    "text": "primary and replicas it uses the mysql primary and replica concept and mainly",
    "start": "83119",
    "end": "89520"
  },
  {
    "text": "um comes with a vt tablet and a vt tablet is a is a as a side car to a mysql d",
    "start": "89520",
    "end": "95759"
  },
  {
    "text": "process it usually sits next to the mysql d and and drives the test process",
    "start": "95759",
    "end": "100960"
  },
  {
    "text": "against the mysql here's an example of multiple clusters and you can have",
    "start": "100960",
    "end": "106479"
  },
  {
    "text": "be running under with tests for the large uh implementations so we need a concept like vtgate vtgate is a",
    "start": "106479",
    "end": "112960"
  },
  {
    "text": "stickless proxy speaks to mysql protocol and impersonates monolithic mysql server",
    "start": "112960",
    "end": "118000"
  },
  {
    "text": "this allows applications to speak to vt tablets from the test standpoint",
    "start": "118000",
    "end": "124960"
  },
  {
    "text": "if you have even a larger deployment you will actually deploy multiple vt gates to access these clusters and in this way",
    "start": "124960",
    "end": "131280"
  },
  {
    "text": "you will have an access that is also scalable from the proxy standpoint and connection standpoint",
    "start": "131280",
    "end": "138640"
  },
  {
    "text": "application how does the application access the sharded system so in this example you will see vtgate routes the traffic to",
    "start": "138640",
    "end": "146000"
  },
  {
    "text": "the sharded clusters in our example we have two shards in commerce database and one internal chart on an uncharted space",
    "start": "146000",
    "end": "152160"
  },
  {
    "text": "and this way you can actually have an access to the target environment with the access from the application",
    "start": "152160",
    "end": "158160"
  },
  {
    "text": "so in our example over here we have a commerce database and and then we want to search by",
    "start": "158160",
    "end": "165040"
  },
  {
    "text": "the orders in customer id and then application sends the query as always it",
    "start": "165040",
    "end": "170480"
  },
  {
    "text": "does to a regular database connection to in this case the mysql but the vtgate understand and knows where where the",
    "start": "170480",
    "end": "177120"
  },
  {
    "text": "customer id uh parts will fall in and it will route the traffic to those in this way you can actually scale indefinitely",
    "start": "177120",
    "end": "185480"
  },
  {
    "text": "and also another component from the test architecture important component in the",
    "start": "186000",
    "end": "191599"
  },
  {
    "text": "test architecture is the topo topo is a is a state of where the the mysql and database",
    "start": "191599",
    "end": "198720"
  },
  {
    "text": "components are as well as the test components sits so um there are multiple implementations of",
    "start": "198720",
    "end": "204159"
  },
  {
    "text": "toppo that you can choose um favorite ones are hcd zookeeper and kubernetes and and the known console is also a topo",
    "start": "204159",
    "end": "211440"
  },
  {
    "text": "manager that was used in the past",
    "start": "211440",
    "end": "215120"
  },
  {
    "text": "vtc dld is another component of vtest it's a control daemon",
    "start": "216799",
    "end": "221840"
  },
  {
    "text": "and it runs the ad hoc operations that serves as an api server and then interacts with it with the topo so they",
    "start": "221840",
    "end": "227920"
  },
  {
    "text": "all come together in this architecture summary so you have an application server that connects the load balancer",
    "start": "227920",
    "end": "233040"
  },
  {
    "text": "load balancer actually speaks to vtgate which interacts with ctld and topo server and and and serves the incoming",
    "start": "233040",
    "end": "239519"
  },
  {
    "text": "queries from the sharded clusters behind the scenes we test also have very new and upcoming",
    "start": "239519",
    "end": "244879"
  },
  {
    "text": "features um as of today we have a 12.0 release in nga",
    "start": "244879",
    "end": "250080"
  },
  {
    "text": "and we support online ddl operations without locking and bts comes with an",
    "start": "250080",
    "end": "256239"
  },
  {
    "text": "experimental version of the gen 4 planet which is a very new and highly improved and we do continuous",
    "start": "256239",
    "end": "262240"
  },
  {
    "text": "benchmarking which is the subject of the talk today and we have ongoing performance improvements and also tools",
    "start": "262240",
    "end": "268320"
  },
  {
    "text": "like vt admin and are coming up in the next releases so um we will continue with the next",
    "start": "268320",
    "end": "274400"
  },
  {
    "text": "section and uh thank you very much thank you elgin i am vanu gupta and i",
    "start": "274400",
    "end": "280000"
  },
  {
    "text": "will be taking you through the next part of our presentation i am going to introduce re fast yet which is the nightly benchmarking tool",
    "start": "280000",
    "end": "285440"
  },
  {
    "text": "for the test and then eventually i'm going to show you the website of refaster which i have linked over here as well and the results that it has",
    "start": "285440",
    "end": "291600"
  },
  {
    "text": "produced i've also linked the code over here please go through it after the after the presentation",
    "start": "291600",
    "end": "298160"
  },
  {
    "text": "so let's dive in first things first what is benchmarking benchmarking is a way to measure and compare the performance of one software",
    "start": "298160",
    "end": "304479"
  },
  {
    "text": "version against another so when we're building a test we have the main branch we have different releases of data as release 12 release 11 we have different",
    "start": "304479",
    "end": "311440"
  },
  {
    "text": "patch releases we have prs which are changing some part of the code base and we want to measure the performance of each of these and compare that which one",
    "start": "311440",
    "end": "318160"
  },
  {
    "text": "is better so this is what enables us as developers to know that if a code change that we've done is it improving the",
    "start": "318160",
    "end": "323280"
  },
  {
    "text": "performance of some part of the code or not this is the benchmark this is the benchmarking tool that we have re fast yet which is what we use for building",
    "start": "323280",
    "end": "329440"
  },
  {
    "text": "high performance for tests largely benchmarks can be broken into two parts micro benchmarks and micro",
    "start": "329440",
    "end": "334880"
  },
  {
    "text": "benchmarks let's go over both of these so micro benchmarks like the name suggests micro benchmarks they measure a",
    "start": "334880",
    "end": "341039"
  },
  {
    "text": "small part of the code base usually this is done by isolating a single function call and you doing it repeatedly what we",
    "start": "341039",
    "end": "346880"
  },
  {
    "text": "mean is let's say that we have a benchmark and we run it for two seconds within those two seconds we keep calling the same",
    "start": "346880",
    "end": "352560"
  },
  {
    "text": "function again and again with the same parameter values and the number of times that the function is able to run within those two seconds is how fast the",
    "start": "352560",
    "end": "358560"
  },
  {
    "text": "function is able to run now we have a wide array of micro benchmarks in vitesse which tests the",
    "start": "358560",
    "end": "363840"
  },
  {
    "text": "planner the parser rpc calls and these are the things that are on the top of my head among others so we have a very extensive code coverage and micro",
    "start": "363840",
    "end": "369919"
  },
  {
    "text": "benchmarks if you want to take a look you can go over the witness code base and within the testing files of go local unit testing files of go you'll find",
    "start": "369919",
    "end": "376160"
  },
  {
    "text": "benchmark tests which is what a micro benchmarks are the macro benchmarks measure the",
    "start": "376160",
    "end": "381199"
  },
  {
    "text": "performance of a code base as a whole so when a user ex when a user uses the test they're not going to be able to see what",
    "start": "381199",
    "end": "386800"
  },
  {
    "text": "the what is the amount of time that the parser took or what was the amount of time that the query was planned for or uh what was the execution type what they",
    "start": "386800",
    "end": "393120"
  },
  {
    "text": "generally see is just the latency of the of the result set that they get back when they query the database and this is",
    "start": "393120",
    "end": "398560"
  },
  {
    "text": "what we measure via our macro benchmarks so they measure the performance of the entirety of the of the entire code base",
    "start": "398560",
    "end": "404000"
  },
  {
    "text": "and they run in an environment which is very similar to what the end users experience we're not going to go over how we could bring up that environment",
    "start": "404000",
    "end": "409680"
  },
  {
    "text": "or how this is all done because that is something that flora will cover in the next part of the code base when he dives into how re fast it is built and uh the",
    "start": "409680",
    "end": "416720"
  },
  {
    "text": "way that we bring up the infrastructure and how to run the macro and micro benchmarks the micro benchmarks that we run we have",
    "start": "416720",
    "end": "423360"
  },
  {
    "text": "two categories for them otp and tpcc again we won't go into much detail florian will cover that later",
    "start": "423360",
    "end": "429599"
  },
  {
    "text": "now the next question that arises is what all do we benchmark we have several cron jobs which are configured to run",
    "start": "429599",
    "end": "434720"
  },
  {
    "text": "daily and these cron jobs keep tab of the main branch the release branches the tags and the pr's which have the",
    "start": "434720",
    "end": "440160"
  },
  {
    "text": "benchmark me label so every day if there is any any pr which has been merged into the main branch of your test we check",
    "start": "440160",
    "end": "446000"
  },
  {
    "text": "that the commit hash state for the main branch and we run the benchmarks for it both micro and micro benchmarks same is",
    "start": "446000",
    "end": "451440"
  },
  {
    "text": "what we do for release branches different tags and we also do that for all the pr's which have the benchmark meetable so even before you even you",
    "start": "451440",
    "end": "458720"
  },
  {
    "text": "merge your pr you want to know the performance impact that it is going to have both on the unit that you're trying to change and also on the whole whole",
    "start": "458720",
    "end": "464800"
  },
  {
    "text": "code base of a test this is what makes the user experience the developer experience a lot better",
    "start": "464800",
    "end": "469919"
  },
  {
    "text": "taking that a step further we also have slack integration so rv fast yet once it has run the micro benchmarks and the",
    "start": "469919",
    "end": "475520"
  },
  {
    "text": "macro benchmarks and stored those results we use those results and compare them against each other for example we'll take the main branch and we",
    "start": "475520",
    "end": "481599"
  },
  {
    "text": "compare it against the results of the previous day run of the main branch same we'll do it for the main branch against the release and we'll do it for prs also",
    "start": "481599",
    "end": "487840"
  },
  {
    "text": "against the base of the head of the pr once we have these comparisons if there is any regression then we send a slack",
    "start": "487840",
    "end": "493280"
  },
  {
    "text": "notification on the benchmarking testing channel and then the developers can look at this they can check out what the",
    "start": "493280",
    "end": "498639"
  },
  {
    "text": "regression was when which benchmark the regression came and they can then figure out what was the change that made the",
    "start": "498639",
    "end": "504080"
  },
  {
    "text": "regression or that caused the regression i'm going to dive and share a little bit and talk about the general planner so",
    "start": "504080",
    "end": "510400"
  },
  {
    "text": "what is the general planner gen 4 is a new btg planner which is meant to succeed b3 so this is something that",
    "start": "510400",
    "end": "516320"
  },
  {
    "text": "we've been working on with test lately and currently it is an experimental feature but eventually we are going to make it the default",
    "start": "516320",
    "end": "522159"
  },
  {
    "text": "and gen4 is a much more advanced planner than v3 it provides a larger query support a bunch of coordinate sub",
    "start": "522159",
    "end": "527279"
  },
  {
    "text": "queries will start working with gen4 there are newer primitives semi join has been introduced and",
    "start": "527279",
    "end": "532640"
  },
  {
    "text": "work for supporting filtering on the bt gate level is also ongoing so eventually gen 4 is going to become much more",
    "start": "532640",
    "end": "538880"
  },
  {
    "text": "powerful than what v3 is not only that it also creates optimized plans which are much faster while execution",
    "start": "538880",
    "end": "545200"
  },
  {
    "text": "but how can we say for certainty that the optimized plans are faster or the plans that jennifer produces are actually better how do we gain",
    "start": "545200",
    "end": "551200"
  },
  {
    "text": "confidence that gen 4 is indeed a much as a successful vpn and we can replace uh the default on the webtest website",
    "start": "551200",
    "end": "558480"
  },
  {
    "text": "the way that we do that is via the benchmarks so we run the benchmarks the macro benchmarks for both v3 and gen4",
    "start": "558480",
    "end": "564720"
  },
  {
    "text": "and then we compare the results we look at the queries that they've sold per second the amount of user memory usages that they have on pd tablet the amount",
    "start": "564720",
    "end": "570640"
  },
  {
    "text": "of cpu users that they have on mitigates and all these metrics and then we take a look at does gen4 actually improve the",
    "start": "570640",
    "end": "576240"
  },
  {
    "text": "latency that the user is going to see enough talk we've talked about what benchmarks are the different type of benchmarks how gen 4 and j4 is and how",
    "start": "576240",
    "end": "584000"
  },
  {
    "text": "we're supposed to use my benchmarks for gen4 i think it's time that we look at the website are we fast yet and we ought",
    "start": "584000",
    "end": "589519"
  },
  {
    "text": "to talk about what the users are going to gain from it we've already divulged into what the developers gained from it",
    "start": "589519",
    "end": "594560"
  },
  {
    "text": "how pr's run against that and it exp it improves the developer experience it's time to take a look at what the user end",
    "start": "594560",
    "end": "600160"
  },
  {
    "text": "users can gain from rb fast here so this is the main home page for rv fast here and here we have a brief",
    "start": "600160",
    "end": "606079"
  },
  {
    "text": "overview of what rb5 kind of what like i gave you and here we're also looking at the server that we're using actually to",
    "start": "606079",
    "end": "612079"
  },
  {
    "text": "run the macro benchmarks it's an equinex m2 x large x86 server and for the most",
    "start": "612079",
    "end": "617279"
  },
  {
    "text": "more enthusiasts of you guys you can actually take a look at the server specifications and",
    "start": "617279",
    "end": "622399"
  },
  {
    "text": "see what what hardware we're actually using to run our macro benchmarks and micro benchmarks",
    "start": "622399",
    "end": "628320"
  },
  {
    "text": "more on this later the next page that i'm going to show you is the front page of of this page so we",
    "start": "628320",
    "end": "634320"
  },
  {
    "text": "talked about prawns a little while ago wherein we track the main branch and we run uh the macro and micro benchmarks",
    "start": "634320",
    "end": "640240"
  },
  {
    "text": "for it every day if the kit has changes and those results for the previous month are actually shown here for the past 30",
    "start": "640240",
    "end": "646000"
  },
  {
    "text": "days so this tracks the oltp runs the transactions per second the qps the latency all of this are shown over here",
    "start": "646000",
    "end": "652399"
  },
  {
    "text": "over the past month and the same we do for tpcc as well",
    "start": "652399",
    "end": "657600"
  },
  {
    "text": "so the next page that i'm going to show you is the search page over here you can actually give a very specific github",
    "start": "659519",
    "end": "664640"
  },
  {
    "text": "hash that you're looking for so you can take a github hash from github and look for the uh for for results for that",
    "start": "664640",
    "end": "670800"
  },
  {
    "text": "specific hash uh if you have those results for it then we're going to display them over here and you can look at the micro benchmark results over ltp",
    "start": "670800",
    "end": "677200"
  },
  {
    "text": "runs we also track the world cpu time uh individually for what the cpu time for vtg gate was really tablet was the",
    "start": "677200",
    "end": "682959"
  },
  {
    "text": "amount of alloy bytes it was it allocated on vtgate the amount of bytes are allocated on the tablet all of this",
    "start": "682959",
    "end": "688720"
  },
  {
    "text": "information is available over here for both micro and macro micro benchmarks of ppc oltp and we also have a bunch of",
    "start": "688720",
    "end": "695040"
  },
  {
    "text": "micro benchmarks over here which show their runs the number of iterations all the information that you need now i can even go over in one of these",
    "start": "695040",
    "end": "702240"
  },
  {
    "text": "uh micro benchmarks and it will show the runs of the past five days of past few iterations of that",
    "start": "702240",
    "end": "709279"
  },
  {
    "text": "uh micro benchmark so these are the past iterations of the past ten ten or so runs for this micro benchmark that we're",
    "start": "709279",
    "end": "715120"
  },
  {
    "text": "looking at it will also have the start time and uh exactly at what time these were benchmarked the github references",
    "start": "715120",
    "end": "720800"
  },
  {
    "text": "for them so you can take a look at this as well now this page for specifically catering",
    "start": "720800",
    "end": "726639"
  },
  {
    "text": "to one github hash what if you wanted to compare two git hashes together and that's what this page does so the",
    "start": "726639",
    "end": "732000"
  },
  {
    "text": "compare page of uh of this website you can actually go over and give two bit of ashes and you will have their",
    "start": "732000",
    "end": "737120"
  },
  {
    "text": "comparisons for macro and micro benchmarks along with some nice graphs which will show you graphically of what the differences are",
    "start": "737120",
    "end": "743760"
  },
  {
    "text": "so this is actually a much older commit and aa79 is actually a later coverage so this later commit uh you'll see that",
    "start": "743760",
    "end": "750399"
  },
  {
    "text": "actually there has been some performance improvement we'll talk about that a little later as well uh the amount of cpu time that we were using actually",
    "start": "750399",
    "end": "755920"
  },
  {
    "text": "decreased and so this is where you can see the comparison",
    "start": "755920",
    "end": "761040"
  },
  {
    "text": "between two uh two commit hashes along with this is the comparison between their uh micro benchmarks as well so",
    "start": "761040",
    "end": "766880"
  },
  {
    "text": "like all the information but that you would need for comparing two two hashes is over here all of this is all great and such but",
    "start": "766880",
    "end": "772959"
  },
  {
    "text": "there's actually something which is even more useful so on the micro benchmark page a dedicated micro benchmark page",
    "start": "772959",
    "end": "778079"
  },
  {
    "text": "here you can compare the results for different tags of your test for example like your company who's upgrading from",
    "start": "778079",
    "end": "785040"
  },
  {
    "text": "version 10 of the test or release 10 of a test and you're actually looking to upgrade to release 11. and you want to look at what all differences or what all",
    "start": "785040",
    "end": "791519"
  },
  {
    "text": "performance improve you can expect when you go from release 10 to release 11. so over here in drop down boxes you can just select the version that you're on",
    "start": "791519",
    "end": "798079"
  },
  {
    "text": "and select the version that you want to get to or what you want to compare it against and just go over here i'm currently showing results",
    "start": "798079",
    "end": "803920"
  },
  {
    "text": "for the comparison between 10 and version 11 and here you'll see the micro macro benchmark or micro benchmark results for all of them",
    "start": "803920",
    "end": "810320"
  },
  {
    "text": "so this interfaces are actually very similar that we have for the macro benchmarks as well where you have the results for two tags that you can",
    "start": "810320",
    "end": "816240"
  },
  {
    "text": "compare you don't specifically need to search for the github hash and use those you can directly uh compare different tags here i'm comparing",
    "start": "816240",
    "end": "823519"
  },
  {
    "text": "release 10 versus release 11. and if you look here there is actually a five percent increase between between the qps",
    "start": "823519",
    "end": "829760"
  },
  {
    "text": "that vs 11 was able to serve against east end for the oltp workload it is because of this micro benchmarking tool",
    "start": "829760",
    "end": "835360"
  },
  {
    "text": "that we have that we can say with confidence that actually if if the users who have a workload which is very similar to oltp if they move from",
    "start": "835360",
    "end": "842399"
  },
  {
    "text": "release 10 to release 11 of a test they can expect a performance improve of 5.3",
    "start": "842399",
    "end": "847440"
  },
  {
    "text": "similarly if someone has a workload which is closer to ppcc they can actually expect the improvement of 3.4 percent so the confidence that we say",
    "start": "847440",
    "end": "853839"
  },
  {
    "text": "that there has actually been a performance improvement from release 10 to release 11 comes from these numbers",
    "start": "853839",
    "end": "858880"
  },
  {
    "text": "that we're seeing over here finally we've created one special tab the one that i talked about that gen 4",
    "start": "858880",
    "end": "864480"
  },
  {
    "text": "is a new planet we also need to benchmark what that new planner is doing so we have a specific page for it which is called v3 versus gen4 and this page",
    "start": "864480",
    "end": "871600"
  },
  {
    "text": "shows the results of the comparisons between v3 and z4 here as well you can select which tag you want to check the comparison for you want to check it on",
    "start": "871600",
    "end": "877760"
  },
  {
    "text": "main on some other release for example let's say that you are on release 12 and you want to look at what",
    "start": "877760",
    "end": "884639"
  },
  {
    "text": "the uh what was the comparison between v3 and gen4 for release 12. you can take a look at that as well",
    "start": "884639",
    "end": "890000"
  },
  {
    "text": "so here you can see that gen4 is slightly better than v3 but most of its capability as of now in gen 4 is",
    "start": "890000",
    "end": "895839"
  },
  {
    "text": "actually coming from the fact that it can support a lot more queries than v3 so here you can compare the",
    "start": "895839",
    "end": "901600"
  },
  {
    "text": "results if you go over to uh if you click here to see actually see the query plans",
    "start": "901600",
    "end": "907120"
  },
  {
    "text": "this is kind of a beta feature it's not entirely developed kind of in production work in development but over here we",
    "start": "907120",
    "end": "912959"
  },
  {
    "text": "actually have all the queries you can look at the queries that we're running in the oltp workload these are generally point queries and you can look at the",
    "start": "912959",
    "end": "918959"
  },
  {
    "text": "plan that we get and we that that v3 and gen4 fallback built for it so this is the query that you got select c it's a",
    "start": "918959",
    "end": "925760"
  },
  {
    "text": "normalized query so all input arguments have been converted to bind variables and then you can actually look at what",
    "start": "925760",
    "end": "931519"
  },
  {
    "text": "uh vtgate is going to do with it it's going to actually send it to a single chart because it's a select equal unique query and this is also a place where you",
    "start": "931519",
    "end": "938720"
  },
  {
    "text": "can look at the plants that they're going to that vitigate is going to create so you can have different plants for",
    "start": "938720",
    "end": "945360"
  },
  {
    "text": "gen 4 and v3 as well which is where the optimizations will come into play",
    "start": "945360",
    "end": "950399"
  },
  {
    "text": "this is the dpcc page for the same thing um so you can look at this and you'll see",
    "start": "950399",
    "end": "956000"
  },
  {
    "text": "that the plans are different for v3 and gen4 um yep",
    "start": "956000",
    "end": "961040"
  },
  {
    "text": "this is pretty much all that is there on the website but this allows the users to actually know beforehand even before",
    "start": "961040",
    "end": "966959"
  },
  {
    "text": "they start testing their own local environment what differences they can expect or what performance improvement they can expect whether the mini tablet",
    "start": "966959",
    "end": "973360"
  },
  {
    "text": "will actually start using more cpu time will it start allocating more bytes is is the gen 4 planner actually worth it",
    "start": "973360",
    "end": "979040"
  },
  {
    "text": "will it give you more uh will it give you better performance all of that can be answered and with high confidence",
    "start": "979040",
    "end": "984320"
  },
  {
    "text": "because of the benchmark tool that we have in rb fast yet before i pass the bit on to fluoron",
    "start": "984320",
    "end": "989759"
  },
  {
    "text": "there's just one more thing i would like to add j4 right now is an active development and we're looking for ways to improve its performance so if any of",
    "start": "989759",
    "end": "996240"
  },
  {
    "text": "you guys are running with us in production we we would love if you would be able to share your production queries with us and we we then optimize gen4 to",
    "start": "996240",
    "end": "1003199"
  },
  {
    "text": "actually work as best as possible like produce as optimal plans as possible for your specific workload",
    "start": "1003199",
    "end": "1009279"
  },
  {
    "text": "if any of you guys are willing to take us up on our offer please find us in the beta slab this is all from my side and",
    "start": "1009279",
    "end": "1014720"
  },
  {
    "text": "floral will now take over and talk about the benchmarking and how we build it up built it from the ground up",
    "start": "1014720",
    "end": "1020720"
  },
  {
    "text": "thank you very much hello everyone my name is florent and today i'll be talking to you about the",
    "start": "1020720",
    "end": "1026558"
  },
  {
    "text": "internals of a benchmarking system so let's get started first with the",
    "start": "1026559",
    "end": "1031918"
  },
  {
    "text": "implementation that we use for our fast yet um so we have two permanent server the first one is the website",
    "start": "1031919",
    "end": "1039120"
  },
  {
    "text": "its goal is to serve the web ui that manager showed you earlier and its secondary goal is to",
    "start": "1039120",
    "end": "1045678"
  },
  {
    "text": "handle and manage the whole execution of benchmark when i say the whole execution of benchmark i mean the",
    "start": "1045679",
    "end": "1051200"
  },
  {
    "text": "the chrome schedules and um and that's it just the current schedules um secondly we have the matrix server",
    "start": "1051200",
    "end": "1059200"
  },
  {
    "text": "this one is scrapping the benchmark results and storing the data",
    "start": "1059200",
    "end": "1065039"
  },
  {
    "text": "um another key point of our implementation is the fact that we spawn a new server for each benchmark that we",
    "start": "1065039",
    "end": "1070720"
  },
  {
    "text": "have um this allows us to have more reliable results and make sure that the",
    "start": "1070720",
    "end": "1075760"
  },
  {
    "text": "benchmark is not influenced by anything else when it runs um each new server is based on the",
    "start": "1075760",
    "end": "1082400"
  },
  {
    "text": "equinix metal service um cncf has a partnership with equitix metal for projects like vtests",
    "start": "1082400",
    "end": "1090080"
  },
  {
    "text": "and final key point of our implementation we store all the benchmark results and metadata in mysql",
    "start": "1090320",
    "end": "1096240"
  },
  {
    "text": "in fact it's not directly mysql but we store it in a v-test cluster",
    "start": "1096240",
    "end": "1102000"
  },
  {
    "text": "um let's talk about the execution pipeline it's a very important part of",
    "start": "1102000",
    "end": "1107200"
  },
  {
    "text": "of the implementation and rfs yet uh the goal of it is to manage the whole existing workflow from start to finish",
    "start": "1107200",
    "end": "1115200"
  },
  {
    "text": "so we'll get to what the whole execution workflow means in a bit um the pipeline is configurable through",
    "start": "1115200",
    "end": "1121039"
  },
  {
    "text": "a yaml file meaning that we can have tons of different execution we want to have so",
    "start": "1121039",
    "end": "1127919"
  },
  {
    "text": "for example micro benchmark and macro benchmark like manon just explained before",
    "start": "1127919",
    "end": "1133120"
  },
  {
    "text": "and those two different types of benchmark will have different yaml files so",
    "start": "1133120",
    "end": "1138960"
  },
  {
    "text": "the whole execution workflow what is it what are the responsibilities",
    "start": "1138960",
    "end": "1144000"
  },
  {
    "text": "first the creation and configuration of the new server this is the very basic step",
    "start": "1144000",
    "end": "1149440"
  },
  {
    "text": "we want to make sure that we create a server we configure it based on a very detailed and explicit uh",
    "start": "1149440",
    "end": "1155919"
  },
  {
    "text": "configuration and uh that's it another point is another responsibility is the setup of a",
    "start": "1155919",
    "end": "1163039"
  },
  {
    "text": "test cluster uh depending on the type of benchmark we might or might not want to have um a vts cluster",
    "start": "1163039",
    "end": "1169679"
  },
  {
    "text": "so this is a part of the execution pipeline responsibilities um another one is the actual execution",
    "start": "1169679",
    "end": "1176000"
  },
  {
    "text": "of a benchmark when i say actual execution of benchmark i mean running the benchmark uh then we need to store the results and",
    "start": "1176000",
    "end": "1182320"
  },
  {
    "text": "the metrics and finally we need to upload and publish those results um and there's kind of like a",
    "start": "1182320",
    "end": "1187919"
  },
  {
    "text": "intermediate steps between those two responsibilities which is aggregating the results um compiling",
    "start": "1187919",
    "end": "1194320"
  },
  {
    "text": "them and checking if there is any regression or not this is a whole part um like everything is part of the",
    "start": "1194320",
    "end": "1200320"
  },
  {
    "text": "execution pipeline um this is the architecture of our existing pipeline uh we have seven steps",
    "start": "1200320",
    "end": "1207520"
  },
  {
    "text": "i'm gonna go through them quickly uh so the first one like i said it's the configuration file we feed the execution",
    "start": "1207520",
    "end": "1213760"
  },
  {
    "text": "pipeline with a configuration and then everything gets created like magic",
    "start": "1213760",
    "end": "1219440"
  },
  {
    "text": "um so we feed the configuration and then second step is the provision we create uh the execution server using terraform",
    "start": "1219440",
    "end": "1227360"
  },
  {
    "text": "so this is just to provision and and configure the very basic steps very basic things about the server",
    "start": "1227360",
    "end": "1233600"
  },
  {
    "text": "and this is provisioning on equinix metal like i just said third step is the configuration of the",
    "start": "1233600",
    "end": "1240480"
  },
  {
    "text": "server when i say configuration i mean the installation of packets installation of",
    "start": "1240480",
    "end": "1246400"
  },
  {
    "text": "of tools that we need um setting up the network setting up the disk anything",
    "start": "1246400",
    "end": "1252880"
  },
  {
    "text": "um this is done using ansible so for those that don't know ansible it's basically a configuration tooling that",
    "start": "1252880",
    "end": "1259520"
  },
  {
    "text": "allows us to automate and easily do a bunch of configuration things on on servers",
    "start": "1259520",
    "end": "1267039"
  },
  {
    "text": "fourth step is the the start of a benchmark um so we actually want to start the benchmark",
    "start": "1267039",
    "end": "1272720"
  },
  {
    "text": "start recording the results then we have a benchmark running which is the red square here the red rectangle",
    "start": "1272720",
    "end": "1279039"
  },
  {
    "text": "um so the benchmark can be either a macro benchmark or micro benchmark the fifth step is actually storing the",
    "start": "1279039",
    "end": "1285679"
  },
  {
    "text": "results so this can be done either at the end of the benchmark or during the benchmark like throughout the whole",
    "start": "1285679",
    "end": "1290880"
  },
  {
    "text": "execution process of a benchmark um we store the results in different locations um",
    "start": "1290880",
    "end": "1296400"
  },
  {
    "text": "most basic one is my sequel this is gonna be like very basic information for example the type the type of benchmark",
    "start": "1296400",
    "end": "1301919"
  },
  {
    "text": "um i don't know the idea of the benchmark everything like that like the sha for example the git shop",
    "start": "1301919",
    "end": "1308559"
  },
  {
    "text": "then we store information on prometheus um then",
    "start": "1308559",
    "end": "1313679"
  },
  {
    "text": "the information that we store from it is obviously time series data and this is all the metrics for example",
    "start": "1313679",
    "end": "1319760"
  },
  {
    "text": "the cpu usage that we that we had for a specific benchmark at a specific time",
    "start": "1319760",
    "end": "1325840"
  },
  {
    "text": "um we store the matrix uh that we have in the front db in uh information sorry we",
    "start": "1325840",
    "end": "1333120"
  },
  {
    "text": "the data that we have there we store it in an influx db server later on this is done to keep data a bit longer um keep",
    "start": "1333120",
    "end": "1340720"
  },
  {
    "text": "as little as possible inside from the host then store for longer term inside influx db",
    "start": "1340720",
    "end": "1346559"
  },
  {
    "text": "and that's it sixth step is uh actually destroying tearing down",
    "start": "1346559",
    "end": "1352960"
  },
  {
    "text": "the execution server so again this is done using terraform um seventh step is the",
    "start": "1352960",
    "end": "1360799"
  },
  {
    "text": "publishing like it's actually publishing the results so like i said before right before publishing the results we",
    "start": "1360799",
    "end": "1367360"
  },
  {
    "text": "have to compile them aggregating them uh making sure there's a regression or not",
    "start": "1367360",
    "end": "1372559"
  },
  {
    "text": "we have to calculate this and depending on all those outcomes we might or might not want to notify people on slack um",
    "start": "1372559",
    "end": "1380559"
  },
  {
    "text": "the web ui will show up differently differ based on those outputs etc",
    "start": "1380559",
    "end": "1386240"
  },
  {
    "text": "so this is the the architecture um i'm going to move on to how we do a micro benchmarks a micro",
    "start": "1386240",
    "end": "1392480"
  },
  {
    "text": "benchmark um so this is out of the two types of benchmarks that we have this is the simplest one uh why",
    "start": "1392480",
    "end": "1399520"
  },
  {
    "text": "because is coded in golden um and go has an amazing testing framework",
    "start": "1399520",
    "end": "1406000"
  },
  {
    "text": "which include a micro benchmark tool so you know when you write code and go you can in specific when you write test and",
    "start": "1406000",
    "end": "1414000"
  },
  {
    "text": "go you can either have like an actual unit test or you can have a benchmark test",
    "start": "1414000",
    "end": "1419039"
  },
  {
    "text": "and we have a bunch of those inside inside the code of your test and the goal is just the goal of the",
    "start": "1419039",
    "end": "1425360"
  },
  {
    "text": "micro benchmark it just is just to execute all of those benchmark test we get an output every time that we",
    "start": "1425360",
    "end": "1431760"
  },
  {
    "text": "execute one we parse the output we keep the relevant information and then",
    "start": "1431760",
    "end": "1437440"
  },
  {
    "text": "we aggregate all the information from all the different microbenchmark and and finally we store them um so like",
    "start": "1437440",
    "end": "1446080"
  },
  {
    "text": "mentioned earlier we have a multitude of relevant or important information inside",
    "start": "1446080",
    "end": "1451919"
  },
  {
    "text": "a micro benchmark for example the time it takes for a function to get to get executed um the memory usage of a",
    "start": "1451919",
    "end": "1458880"
  },
  {
    "text": "function and and so on so this is all part of the micrometer i'll",
    "start": "1458880",
    "end": "1464000"
  },
  {
    "text": "get back to them um during the demo um macro benchmarks uh second type of",
    "start": "1464000",
    "end": "1470400"
  },
  {
    "text": "benchmarks um that type has a longer execution time why because it's",
    "start": "1470400",
    "end": "1476559"
  },
  {
    "text": "well first of all we have to install a lot more packages for example mysql etcd um",
    "start": "1476559",
    "end": "1482559"
  },
  {
    "text": "etc we have to install more stuff we have to set up more stuff um for example the vtest cluster needs to",
    "start": "1482559",
    "end": "1488000"
  },
  {
    "text": "be created uh it has to be up running um so yeah longer execution time",
    "start": "1488000",
    "end": "1493279"
  },
  {
    "text": "that's it and then second point we use sales bench to actually do the",
    "start": "1493279",
    "end": "1498880"
  },
  {
    "text": "benchmark of the v-test cluster so sysbench is a widely known tool um which i'll get back to it uh in a coming",
    "start": "1498880",
    "end": "1505840"
  },
  {
    "text": "slide um another important part of a micro benchmark is actually distinguishing the",
    "start": "1505840",
    "end": "1512000"
  },
  {
    "text": "different types of benchmark that means that we're going to get a lot of different results uh for all of our",
    "start": "1512000",
    "end": "1517520"
  },
  {
    "text": "macro benchmarks and we have to make sure that oh this result is from this type of macro benchmark this other",
    "start": "1517520",
    "end": "1524320"
  },
  {
    "text": "type of micro benchmark you know like we can have tons of different types and all the types is going to measure",
    "start": "1524320",
    "end": "1530400"
  },
  {
    "text": "specific space is going to benchmark a specific thing about vtes",
    "start": "1530400",
    "end": "1536080"
  },
  {
    "text": "and uh final big part of the macro benchmark is the aggregation and starting of metrics",
    "start": "1536080",
    "end": "1544159"
  },
  {
    "text": "so you know measuring the result of a macro benchmark is easily done using sysbench",
    "start": "1544159",
    "end": "1550880"
  },
  {
    "text": "but it's usually not enough we have to get more information for example the cpu",
    "start": "1550880",
    "end": "1557520"
  },
  {
    "text": "usage of the host while we were in the benchmark this is very important for",
    "start": "1557520",
    "end": "1562720"
  },
  {
    "text": "like we want to know in the 20 minutes that the benchmark run um how much like how long the cpu was",
    "start": "1562720",
    "end": "1568799"
  },
  {
    "text": "used for this is important to compare across different versions",
    "start": "1568799",
    "end": "1574240"
  },
  {
    "text": "um like i say we set up a vtest cluster for the micro benchmarks and the topology that we use for it is two vt",
    "start": "1574240",
    "end": "1580559"
  },
  {
    "text": "gates six tablets and the topology server that we have is etcd",
    "start": "1580559",
    "end": "1586240"
  },
  {
    "text": "um this is the configuration that we use so far and we're aiming to change it we want to",
    "start": "1586240",
    "end": "1592320"
  },
  {
    "text": "make some tests discover which topology might or might not be the best for the benchmarks which",
    "start": "1592320",
    "end": "1599200"
  },
  {
    "text": "one is giving us more reliable and more accurate result um",
    "start": "1599200",
    "end": "1604880"
  },
  {
    "text": "sis bench so i talked about it it like i say widely known tool it's also highly configurable it's based in",
    "start": "1604880",
    "end": "1611760"
  },
  {
    "text": "lua and also in c the c language that means that you can add different",
    "start": "1611760",
    "end": "1616960"
  },
  {
    "text": "workload so different type of benchmarks using lua files",
    "start": "1616960",
    "end": "1622080"
  },
  {
    "text": "it has three steps at least we use the we we use three steps in inside our facet but",
    "start": "1622080",
    "end": "1628320"
  },
  {
    "text": "there are a lot more incident those three steps that we use are the preparation this step is basically going to create",
    "start": "1628320",
    "end": "1634960"
  },
  {
    "text": "the database create the tables insert the data into them etc the second step that we have is the",
    "start": "1634960",
    "end": "1641200"
  },
  {
    "text": "warm-up so this is going to do like an actual benchmark but the results",
    "start": "1641200",
    "end": "1646480"
  },
  {
    "text": "of it won't count the goal is just to warm up the system get get the cash flowing get um the network",
    "start": "1646480",
    "end": "1653360"
  },
  {
    "text": "flowing everything ready and everything looking almost like an actual like a",
    "start": "1653360",
    "end": "1658960"
  },
  {
    "text": "like an actual end-to-end situation and final step is the execution it's also called as the run step inside sales",
    "start": "1658960",
    "end": "1666559"
  },
  {
    "text": "bench um so the execution is where we actually send a lot of queries to vtes and where",
    "start": "1666559",
    "end": "1672559"
  },
  {
    "text": "we measure the performance um we have two custom forks of cisbench uh",
    "start": "1672559",
    "end": "1678399"
  },
  {
    "text": "one of which is uh the first link here the plan skills is slash sysbench this",
    "start": "1678399",
    "end": "1684480"
  },
  {
    "text": "fork includes a tpch benchmark and it includes a different way of formatting",
    "start": "1684480",
    "end": "1690159"
  },
  {
    "text": "the results sysbench usually format the results using text just plain plain text and",
    "start": "1690159",
    "end": "1696080"
  },
  {
    "text": "what we do instead is just display them using json um and second fork is just a bunch of",
    "start": "1696080",
    "end": "1703120"
  },
  {
    "text": "lua files for tpc benchmark tpc and tbch benchmarks are two",
    "start": "1703120",
    "end": "1709279"
  },
  {
    "text": "big benchmarks using the database word they're part of the tpc family um if you",
    "start": "1709279",
    "end": "1714480"
  },
  {
    "text": "know a bit databases and performance of databases you might know them",
    "start": "1714480",
    "end": "1719760"
  },
  {
    "text": "um here is a sample of a seismic result like we can like we can see it's pretty",
    "start": "1719760",
    "end": "1725440"
  },
  {
    "text": "simple pretty pretty straightforward we just have the time that the benchmark run in that case it's 10",
    "start": "1725440",
    "end": "1730880"
  },
  {
    "text": "seconds uh the number of threads that we used um the number of transactions per second tps and then we have a block with",
    "start": "1730880",
    "end": "1739200"
  },
  {
    "text": "qps query per second so we have the total the number of reads the number of writes and then other which is for",
    "start": "1739200",
    "end": "1744720"
  },
  {
    "text": "example begin commit um etc we also have the latency and the number",
    "start": "1744720",
    "end": "1750080"
  },
  {
    "text": "of errors per second that we had and uh same thing for reconnects the number of reconnection that we had",
    "start": "1750080",
    "end": "1755919"
  },
  {
    "text": "um but like we can see it's not enough for us to tell if there's a regression between",
    "start": "1755919",
    "end": "1761760"
  },
  {
    "text": "version a and version b of test it's it's already good a lot of data but it's not enough so we've added support for",
    "start": "1761760",
    "end": "1768320"
  },
  {
    "text": "matrix um so inside each uh inside each execution server we",
    "start": "1768320",
    "end": "1775200"
  },
  {
    "text": "start a prometheus server which will scrap scrape data from the different components of the tests and the host",
    "start": "1775200",
    "end": "1782559"
  },
  {
    "text": "different components being the vtgate dvt tablets um vtc tld etc",
    "start": "1782559",
    "end": "1788559"
  },
  {
    "text": "so some of the interesting metrics that we that we want to look at are the cpu memory usage also has the",
    "start": "1788559",
    "end": "1795279"
  },
  {
    "text": "also the golang metrics uh for example core routines etc and finally the disk io the network um",
    "start": "1795279",
    "end": "1802080"
  },
  {
    "text": "those are all the different types of metrics that we don't want to keep and that might be interesting if we want if it",
    "start": "1802080",
    "end": "1807919"
  },
  {
    "text": "we see a regression um so an important part of the matrix is",
    "start": "1807919",
    "end": "1814000"
  },
  {
    "text": "obviously getting the metrics producing the metrics and then we have to scrape them and store them",
    "start": "1814000",
    "end": "1820240"
  },
  {
    "text": "so to export the matrix from a benchmark server we will",
    "start": "1820240",
    "end": "1826399"
  },
  {
    "text": "like we use prometheus so to gather all the metrics this is inside the execution server and then because the execution",
    "start": "1826399",
    "end": "1833360"
  },
  {
    "text": "server is going to eventually get killed like get get destroyed at the end of the benchmark we",
    "start": "1833360",
    "end": "1839440"
  },
  {
    "text": "want to make sure that the matrix we collected stays for a long time so we can use them we can analyze them in the",
    "start": "1839440",
    "end": "1844880"
  },
  {
    "text": "long run and so for that we use the matrix server which is just we just create and store the matrix",
    "start": "1844880",
    "end": "1850559"
  },
  {
    "text": "um like i said before metrics are going to be duplicated to an influx db server for longevity and uh finally matrix can",
    "start": "1850559",
    "end": "1857360"
  },
  {
    "text": "be visualized um on the web using grafana um so we have a couple of dashboards",
    "start": "1857360",
    "end": "1862640"
  },
  {
    "text": "that allows us to say show me for example i don't like the network usage for this benchmark at that time",
    "start": "1862640",
    "end": "1870559"
  },
  {
    "text": "i'm now going to move on to a demo uh where i'm going to present um the execution of the micro and micro",
    "start": "1876320",
    "end": "1883519"
  },
  {
    "text": "and macro benchmark and um and show you a bit about the graphene ui and the matrix",
    "start": "1883519",
    "end": "1889600"
  },
  {
    "text": "all right so here we can see a configuration file um this is a yaml file and",
    "start": "1889600",
    "end": "1894720"
  },
  {
    "text": "we're going to use this file to feed the execution pipeline and configure the",
    "start": "1894720",
    "end": "1900399"
  },
  {
    "text": "whole benchmark so this benchmark here is an oltp benchmark",
    "start": "1900399",
    "end": "1906960"
  },
  {
    "text": "so it is a macro benchmark and as you can see we have to define",
    "start": "1906960",
    "end": "1913440"
  },
  {
    "text": "for example all the equinix configurations the token the project that we want and the",
    "start": "1913440",
    "end": "1919440"
  },
  {
    "text": "instance type that we want to use then we have to feed for example the",
    "start": "1919440",
    "end": "1924559"
  },
  {
    "text": "commit that we want to benchmark the the type the type like the name of the benchmark",
    "start": "1924559",
    "end": "1930080"
  },
  {
    "text": "and um then we have the database where we're going to store all the results um",
    "start": "1930080",
    "end": "1936159"
  },
  {
    "text": "the different time series databases that we use this one is prometheus this one is",
    "start": "1936159",
    "end": "1941519"
  },
  {
    "text": "influx db um and then a little bit down we have all the macro",
    "start": "1941519",
    "end": "1947200"
  },
  {
    "text": "benchmark configuration so all this part here is what we're going to give to sysbench to",
    "start": "1947200",
    "end": "1954399"
  },
  {
    "text": "configure it so for example here we want to have 50 tables with",
    "start": "1954399",
    "end": "1960640"
  },
  {
    "text": "a certain size we want to have we want to use a hundred a hundred threads and then we configure the different",
    "start": "1960640",
    "end": "1968080"
  },
  {
    "text": "steps of cisbench so like i said before we have the previous step the warm-up step and then the run step all of which",
    "start": "1968080",
    "end": "1975039"
  },
  {
    "text": "are configured differently for example we have a different time here it's 30 seconds 10 seconds and then",
    "start": "1975039",
    "end": "1981360"
  },
  {
    "text": "900 seconds and then and then here we have",
    "start": "1981360",
    "end": "1987279"
  },
  {
    "text": "an ansible file that defines most of the variables and configuration that we want",
    "start": "1987279",
    "end": "1993279"
  },
  {
    "text": "to configure the server that we create so let's focus on",
    "start": "1993279",
    "end": "2000240"
  },
  {
    "text": "this part here which are all the host children and if we look at here we have",
    "start": "2000240",
    "end": "2006080"
  },
  {
    "text": "vtgate and here we're going to define all the different vt gates that we want how many vitigates the number",
    "start": "2006080",
    "end": "2011679"
  },
  {
    "text": "like the number of each port and etc so here we can see that we have six getaways so six different videos",
    "start": "2011679",
    "end": "2019279"
  },
  {
    "text": "and here we have the same thing for the tablets and we can see that we want to define two different vt tablets",
    "start": "2019279",
    "end": "2027679"
  },
  {
    "text": "all right so now i'm going to use that configuration file to actually start a benchmark",
    "start": "2028000",
    "end": "2033840"
  },
  {
    "text": "um so i'm just going to use the command line here manually",
    "start": "2033840",
    "end": "2038880"
  },
  {
    "text": "and fit it feed the the configuration file that we have um usually all of this happens within",
    "start": "2038880",
    "end": "2045600"
  },
  {
    "text": "the chromes and we don't have to start the benchmark manually using the cli",
    "start": "2045600",
    "end": "2050720"
  },
  {
    "text": "but um yeah just for the purpose of this demo i'm gonna start it uh manually so",
    "start": "2050720",
    "end": "2055919"
  },
  {
    "text": "i just type this comment then i press enter and then what happens here is that it's going to",
    "start": "2055919",
    "end": "2061200"
  },
  {
    "text": "start creating the server it's going to use terraform um to build and provision the infrastructure",
    "start": "2061200",
    "end": "2068000"
  },
  {
    "text": "on equinix metal and once this is ready um ansible is",
    "start": "2068000",
    "end": "2073200"
  },
  {
    "text": "going to start configure um the benchmark itself and as we can see now um ansible is",
    "start": "2073200",
    "end": "2079760"
  },
  {
    "text": "configuring the host so the server where we're going to run the benchmark",
    "start": "2079760",
    "end": "2085200"
  },
  {
    "text": "at the moment it's um downloading all the dependencies um to run vtes",
    "start": "2085200",
    "end": "2091919"
  },
  {
    "text": "specifically at the moment it's downloading mysql um then it's going to build the actual",
    "start": "2091919",
    "end": "2098720"
  },
  {
    "text": "vtest binaries and then it's going to create and start the v-test server with",
    "start": "2098720",
    "end": "2104160"
  },
  {
    "text": "the topology that we saw in the ansible file and once this is done it's going to",
    "start": "2104160",
    "end": "2109440"
  },
  {
    "text": "start the actual benchmark using sysbench all right as we can see here the",
    "start": "2109440",
    "end": "2115119"
  },
  {
    "text": "benchmark has finished um it lasted 50 minutes and now we'll be able to",
    "start": "2115119",
    "end": "2122240"
  },
  {
    "text": "check out the results so i'm looking into my sql and then i'm going to learn a specific query to get",
    "start": "2122240",
    "end": "2129119"
  },
  {
    "text": "the result for my benchmark um i can start by this query to get the",
    "start": "2129119",
    "end": "2135599"
  },
  {
    "text": "latest um execution the latest benchmark we can see the unique id here which is",
    "start": "2135599",
    "end": "2141280"
  },
  {
    "text": "the one that we're going to use to retrieve the different the different results",
    "start": "2141280",
    "end": "2146400"
  },
  {
    "text": "and here we can see the transaction per second the latency the number of errors the time it took for the benchmark the",
    "start": "2147280",
    "end": "2154560"
  },
  {
    "text": "number of qps the number of reads per second and rights um",
    "start": "2154560",
    "end": "2160079"
  },
  {
    "text": "so all of these results are displayed in the website that management showed you",
    "start": "2160079",
    "end": "2165119"
  },
  {
    "text": "and now i'm going to show you on grafana what it looks like so",
    "start": "2165119",
    "end": "2170400"
  },
  {
    "text": "on grafana we can visualize all the different metrics that we collected during the benchmark",
    "start": "2170400",
    "end": "2176000"
  },
  {
    "text": "as we can see here we have all the host metrics so the cpu usage memory network",
    "start": "2176000",
    "end": "2181119"
  },
  {
    "text": "etc um we can also take a look at the different queries like the",
    "start": "2181119",
    "end": "2186880"
  },
  {
    "text": "queries in my sequel or v-test related matrix for example qps um the number of",
    "start": "2186880",
    "end": "2192000"
  },
  {
    "text": "such like the success rate um the time it takes for each um queries",
    "start": "2192000",
    "end": "2199520"
  },
  {
    "text": "and we can also see like a more general overview of of the might of the vtest cluster that",
    "start": "2199520",
    "end": "2205359"
  },
  {
    "text": "we had for the benchmark that's it for me um thank you very much",
    "start": "2205359",
    "end": "2211920"
  }
]