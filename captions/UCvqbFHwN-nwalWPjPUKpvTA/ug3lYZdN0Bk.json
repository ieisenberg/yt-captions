[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "I'll be talking about low overhead",
    "start": "89",
    "end": "2520"
  },
  {
    "text": "dressing in Linux environment and how we",
    "start": "2520",
    "end": "5940"
  },
  {
    "text": "can use EVP F to deploy tools into Cuba",
    "start": "5940",
    "end": "9030"
  },
  {
    "text": "knitters and clusters my name is Gaurav",
    "start": "9030",
    "end": "13380"
  },
  {
    "text": "Gupta",
    "start": "13380",
    "end": "14009"
  },
  {
    "text": "I work in SA P as a developer so today",
    "start": "14009",
    "end": "20070"
  },
  {
    "text": "I'll be talking about EBP F what is EBP",
    "start": "20070",
    "end": "23880"
  },
  {
    "text": "F and how we can use EBP F to develop",
    "start": "23880",
    "end": "26820"
  },
  {
    "text": "our own tools which can then be deployed",
    "start": "26820",
    "end": "29429"
  },
  {
    "text": "in even in production environments for",
    "start": "29429",
    "end": "33480"
  },
  {
    "text": "monitoring and tracing purposes so EVP",
    "start": "33480",
    "end": "45840"
  },
  {
    "start": "43000",
    "end": "205000"
  },
  {
    "text": "f4 takes its name from BP F which stands",
    "start": "45840",
    "end": "49860"
  },
  {
    "text": "for Berkeley packet filter this is a",
    "start": "49860",
    "end": "52949"
  },
  {
    "text": "technology from 90s which was developed",
    "start": "52949",
    "end": "54930"
  },
  {
    "text": "to filter packets in the kernel it was",
    "start": "54930",
    "end": "57480"
  },
  {
    "text": "used by TCP dump and Wireshark to filter",
    "start": "57480",
    "end": "63449"
  },
  {
    "text": "the packets based on certain criteria",
    "start": "63449",
    "end": "64890"
  },
  {
    "text": "like IP or the port name this has been",
    "start": "64890",
    "end": "68850"
  },
  {
    "text": "termed as the next linux superpower the",
    "start": "68850",
    "end": "73979"
  },
  {
    "text": "BPF was extended into various other",
    "start": "73979",
    "end": "77100"
  },
  {
    "text": "systems that's why the name extended BPF",
    "start": "77100",
    "end": "81770"
  },
  {
    "text": "so what is BPF for BPF is part of the",
    "start": "81770",
    "end": "87060"
  },
  {
    "text": "Linux kernel and as we see here BPF is a",
    "start": "87060",
    "end": "92850"
  },
  {
    "text": "Linux kernel virtual machine which runs",
    "start": "92850",
    "end": "96090"
  },
  {
    "text": "inside the kernel and which helps user",
    "start": "96090",
    "end": "100290"
  },
  {
    "text": "to attach handlers or programs to K",
    "start": "100290",
    "end": "102990"
  },
  {
    "text": "probes you probes or trace points and",
    "start": "102990",
    "end": "104700"
  },
  {
    "text": "perfo vents so user rights BPF program",
    "start": "104700",
    "end": "109049"
  },
  {
    "text": "in the user space and compiles it to BPM",
    "start": "109049",
    "end": "113100"
  },
  {
    "text": "bytecode and loads into the BPF kernel",
    "start": "113100",
    "end": "115229"
  },
  {
    "text": "machine kernel virtual machine through",
    "start": "115229",
    "end": "117930"
  },
  {
    "text": "verifier verifier checks for the",
    "start": "117930",
    "end": "120090"
  },
  {
    "text": "validity of the BPF program that is",
    "start": "120090",
    "end": "123570"
  },
  {
    "text": "submitted by the user there are certain",
    "start": "123570",
    "end": "126420"
  },
  {
    "text": "things you are not allowed to do in BPF",
    "start": "126420",
    "end": "128940"
  },
  {
    "text": "programs for example you can turn loops",
    "start": "128940",
    "end": "132810"
  },
  {
    "text": "in BPF program",
    "start": "132810",
    "end": "134969"
  },
  {
    "text": "and to read any of the kernel variables",
    "start": "134969",
    "end": "138000"
  },
  {
    "text": "you need to first copy it to the BPF",
    "start": "138000",
    "end": "140909"
  },
  {
    "text": "stack so that there are no security",
    "start": "140909",
    "end": "144329"
  },
  {
    "text": "holes so in in in the code also it has",
    "start": "144329",
    "end": "150180"
  },
  {
    "text": "its own jet compiler which makes it",
    "start": "150180",
    "end": "152310"
  },
  {
    "text": "really efficient to run in the",
    "start": "152310",
    "end": "153900"
  },
  {
    "text": "production environment so it reduces its",
    "start": "153900",
    "end": "156390"
  },
  {
    "text": "own overhead when this program is run in",
    "start": "156390",
    "end": "162260"
  },
  {
    "text": "today's functions of kernel or the user",
    "start": "162260",
    "end": "165870"
  },
  {
    "text": "space BPF system also provides kernel",
    "start": "165870",
    "end": "169799"
  },
  {
    "text": "Maps now BPF maps in which data can be",
    "start": "169799",
    "end": "174720"
  },
  {
    "text": "aggregated into the kernel itself which",
    "start": "174720",
    "end": "177599"
  },
  {
    "text": "can then be read from the user space or",
    "start": "177599",
    "end": "180989"
  },
  {
    "text": "synchronously it into a particular",
    "start": "180989",
    "end": "183299"
  },
  {
    "text": "interval of times so that way you have",
    "start": "183299",
    "end": "187879"
  },
  {
    "text": "that way the not all the data is copied",
    "start": "188299",
    "end": "191549"
  },
  {
    "text": "to the users user space only the summary",
    "start": "191549",
    "end": "195989"
  },
  {
    "text": "of the data can be copied to the user",
    "start": "195989",
    "end": "197549"
  },
  {
    "text": "space further reducing the overhead of",
    "start": "197549",
    "end": "199500"
  },
  {
    "text": "the tracer tools some of the tools that",
    "start": "199500",
    "end": "208099"
  },
  {
    "text": "use EBP F for like seccomp",
    "start": "208099",
    "end": "212609"
  },
  {
    "text": "which uses EVP F to sandbox applications",
    "start": "212609",
    "end": "218418"
  },
  {
    "text": "to send box the applications and so it",
    "start": "219169",
    "end": "227069"
  },
  {
    "text": "helps to run third-party applications in",
    "start": "227069",
    "end": "229650"
  },
  {
    "text": "safer manner by restricting some of the",
    "start": "229650",
    "end": "232139"
  },
  {
    "text": "SIS calls that the process is allowed to",
    "start": "232139",
    "end": "233940"
  },
  {
    "text": "do another good example is cilium which",
    "start": "233940",
    "end": "237599"
  },
  {
    "text": "provides networking solutions which also",
    "start": "237599",
    "end": "241829"
  },
  {
    "text": "provided the security load balancing to",
    "start": "241829",
    "end": "244799"
  },
  {
    "text": "the application containers this here is",
    "start": "244799",
    "end": "248909"
  },
  {
    "text": "a link provided or is a page on Cuba",
    "start": "248909",
    "end": "253229"
  },
  {
    "text": "native blog which which talks about",
    "start": "253229",
    "end": "256289"
  },
  {
    "text": "different EVPs projects and how they can",
    "start": "256289",
    "end": "258630"
  },
  {
    "text": "be used in Cuba notice this is a",
    "start": "258630",
    "end": "262109"
  },
  {
    "text": "screenshot from V scope here we see that",
    "start": "262109",
    "end": "266279"
  },
  {
    "text": "they are different part",
    "start": "266279",
    "end": "267480"
  },
  {
    "text": "I own the edges that we see here are the",
    "start": "267480",
    "end": "270930"
  },
  {
    "text": "connections between different parts",
    "start": "270930",
    "end": "272940"
  },
  {
    "text": "these edges can also be drawn using Eva",
    "start": "272940",
    "end": "275580"
  },
  {
    "text": "TFO program by by tracking or tracing",
    "start": "275580",
    "end": "283950"
  },
  {
    "text": "the socket connections that processes",
    "start": "283950",
    "end": "285720"
  },
  {
    "text": "our parts are making now writing these",
    "start": "285720",
    "end": "292980"
  },
  {
    "start": "289000",
    "end": "429000"
  },
  {
    "text": "BPF programs can be hard so there are",
    "start": "292980",
    "end": "296040"
  },
  {
    "text": "tools that help us write BPF program in",
    "start": "296040",
    "end": "299220"
  },
  {
    "text": "higher-level languages like Python or",
    "start": "299220",
    "end": "302100"
  },
  {
    "text": "C++ and so in the image that we saw",
    "start": "302100",
    "end": "308790"
  },
  {
    "text": "earlier one of the tools that we'll be",
    "start": "308790",
    "end": "312660"
  },
  {
    "text": "talking about is BCC and in the in the",
    "start": "312660",
    "end": "317480"
  },
  {
    "text": "image that we saw earlier BCC is the",
    "start": "317480",
    "end": "320160"
  },
  {
    "text": "user space component which provides us",
    "start": "320160",
    "end": "322320"
  },
  {
    "text": "the front-end libraries through which",
    "start": "322320",
    "end": "324420"
  },
  {
    "text": "VPS program from the higher-level",
    "start": "324420",
    "end": "326910"
  },
  {
    "text": "languages can be compiled into vpf",
    "start": "326910",
    "end": "329760"
  },
  {
    "text": "programs it also provides helper",
    "start": "329760",
    "end": "333000"
  },
  {
    "text": "functions to read the maps or the data",
    "start": "333000",
    "end": "337470"
  },
  {
    "text": "that is aggregated from vpf code into",
    "start": "337470",
    "end": "341610"
  },
  {
    "text": "the user space ascend honestly so these",
    "start": "341610",
    "end": "348090"
  },
  {
    "text": "are some of the tools that are already",
    "start": "348090",
    "end": "350670"
  },
  {
    "text": "available as part of BCC toolchain so as",
    "start": "350670",
    "end": "354300"
  },
  {
    "text": "we can see here that almost all the",
    "start": "354300",
    "end": "356130"
  },
  {
    "text": "Linux stacks are covered by these tools",
    "start": "356130",
    "end": "360450"
  },
  {
    "text": "by these tools so for example this open",
    "start": "360450",
    "end": "365370"
  },
  {
    "text": "snoop we can use to track the files that",
    "start": "365370",
    "end": "368820"
  },
  {
    "text": "are getting open in the in the system or",
    "start": "368820",
    "end": "373430"
  },
  {
    "text": "bio snoop can help us get details of the",
    "start": "373430",
    "end": "380190"
  },
  {
    "text": "i/o operations happening a disk",
    "start": "380190",
    "end": "382200"
  },
  {
    "text": "operations happening in the system and",
    "start": "382200",
    "end": "383820"
  },
  {
    "text": "it can tell us details like which",
    "start": "383820",
    "end": "387210"
  },
  {
    "text": "process is trying to do the iowa and",
    "start": "387210",
    "end": "389490"
  },
  {
    "text": "what is the latency that that particular",
    "start": "389490",
    "end": "392880"
  },
  {
    "text": "process is seeing when doing the i/o",
    "start": "392880",
    "end": "395180"
  },
  {
    "text": "similarly there is a tool profile that",
    "start": "395180",
    "end": "397860"
  },
  {
    "text": "is available which can tell you the on",
    "start": "397860",
    "end": "400380"
  },
  {
    "text": "CPU",
    "start": "400380",
    "end": "401370"
  },
  {
    "text": "profile of our different processes which",
    "start": "401370",
    "end": "406560"
  },
  {
    "text": "which which are translates to how much",
    "start": "406560",
    "end": "410400"
  },
  {
    "text": "process is consuming how much of the CPU",
    "start": "410400",
    "end": "414440"
  },
  {
    "text": "similarly there is EXE for slower which",
    "start": "414440",
    "end": "418650"
  },
  {
    "text": "tracks the ext4 operations and shows the",
    "start": "418650",
    "end": "422550"
  },
  {
    "text": "latencies of of those exe for operations",
    "start": "422550",
    "end": "428930"
  },
  {
    "text": "there are various use cases of EBP F for",
    "start": "428930",
    "end": "433110"
  },
  {
    "start": "429000",
    "end": "521000"
  },
  {
    "text": "example BPA filter so Linux community is",
    "start": "433110",
    "end": "438110"
  },
  {
    "text": "working on replacing the internal",
    "start": "438110",
    "end": "441150"
  },
  {
    "text": "implementation of IP tables and replace",
    "start": "441150",
    "end": "444870"
  },
  {
    "text": "it with BPA filters so the so that",
    "start": "444870",
    "end": "449580"
  },
  {
    "text": "network packets can be dropped based on",
    "start": "449580",
    "end": "452039"
  },
  {
    "text": "the IP table rules early into the",
    "start": "452039",
    "end": "454020"
  },
  {
    "text": "network chain",
    "start": "454020",
    "end": "456360"
  },
  {
    "text": "similarly BPA programs can also be used",
    "start": "456360",
    "end": "459539"
  },
  {
    "text": "for DDoS mitigation or for checking",
    "start": "459539",
    "end": "465840"
  },
  {
    "text": "security vulnerabilities today we will",
    "start": "465840",
    "end": "470760"
  },
  {
    "text": "be focusing on security aspect and the",
    "start": "470760",
    "end": "474750"
  },
  {
    "text": "observability aspect of it",
    "start": "474750",
    "end": "476250"
  },
  {
    "text": "so using EVP F programs we can track new",
    "start": "476250",
    "end": "481680"
  },
  {
    "text": "processes that are getting spawned in",
    "start": "481680",
    "end": "483870"
  },
  {
    "text": "the system and also we can monitor the",
    "start": "483870",
    "end": "486720"
  },
  {
    "text": "PT write it order TTY or the pts devices",
    "start": "486720",
    "end": "489750"
  },
  {
    "text": "that that are open when some user takes",
    "start": "489750",
    "end": "494220"
  },
  {
    "text": "a shell login for example and for",
    "start": "494220",
    "end": "497430"
  },
  {
    "text": "observability EVP F programs can also",
    "start": "497430",
    "end": "503940"
  },
  {
    "text": "help us to get the function Layton sees",
    "start": "503940",
    "end": "506510"
  },
  {
    "text": "at the function level and also helps us",
    "start": "506510",
    "end": "510510"
  },
  {
    "text": "in monitoring hardware software events",
    "start": "510510",
    "end": "512520"
  },
  {
    "text": "we can also generate on CPU and off CPU",
    "start": "512520",
    "end": "515130"
  },
  {
    "text": "profiles with very little overhead of",
    "start": "515130",
    "end": "518310"
  },
  {
    "text": "the BPF programs itself this is a",
    "start": "518310",
    "end": "522719"
  },
  {
    "start": "521000",
    "end": "611000"
  },
  {
    "text": "typical example of BCC code snippet",
    "start": "522719",
    "end": "526100"
  },
  {
    "text": "which is taken from one of the tools",
    "start": "526100",
    "end": "528540"
  },
  {
    "text": "available in BCC",
    "start": "528540",
    "end": "529790"
  },
  {
    "text": "toolchain which is called func latency",
    "start": "529790",
    "end": "532740"
  },
  {
    "text": "so here we see that",
    "start": "532740",
    "end": "535180"
  },
  {
    "text": "we are attaching a que probe to the",
    "start": "535180",
    "end": "539680"
  },
  {
    "text": "function VFS read we register a handler",
    "start": "539680",
    "end": "542260"
  },
  {
    "text": "trace func entry which is called",
    "start": "542260",
    "end": "544990"
  },
  {
    "text": "whenever VFS read is called this",
    "start": "544990",
    "end": "548320"
  },
  {
    "text": "function gets the PID and the timestamp",
    "start": "548320",
    "end": "552010"
  },
  {
    "text": "at which this was called and stores it",
    "start": "552010",
    "end": "554890"
  },
  {
    "text": "in a associative array into the BPF map",
    "start": "554890",
    "end": "561040"
  },
  {
    "text": "which is in the kernel itself this tool",
    "start": "561040",
    "end": "563620"
  },
  {
    "text": "also registers a return probe and the",
    "start": "563620",
    "end": "568450"
  },
  {
    "text": "handler is trace func return which is",
    "start": "568450",
    "end": "571210"
  },
  {
    "text": "called whenever the VFS read returns",
    "start": "571210",
    "end": "574230"
  },
  {
    "text": "what this function does is that it it it",
    "start": "574230",
    "end": "578110"
  },
  {
    "text": "takes the PID it looks up that PID into",
    "start": "578110",
    "end": "581050"
  },
  {
    "text": "the storage map which was which was",
    "start": "581050",
    "end": "583930"
  },
  {
    "text": "saved by the entry function and it finds",
    "start": "583930",
    "end": "587260"
  },
  {
    "text": "out the Delta and then it has the",
    "start": "587260",
    "end": "589630"
  },
  {
    "text": "latency of the function that was seen by",
    "start": "589630",
    "end": "591460"
  },
  {
    "text": "VFS read ended further stores in another",
    "start": "591460",
    "end": "594810"
  },
  {
    "text": "map provided by BPF which can be read",
    "start": "594810",
    "end": "601360"
  },
  {
    "text": "from the bcc is user comparing",
    "start": "601360",
    "end": "604710"
  },
  {
    "text": "synchronously after every particular",
    "start": "604710",
    "end": "606940"
  },
  {
    "text": "interval a time interval so here we see",
    "start": "606940",
    "end": "612640"
  },
  {
    "start": "611000",
    "end": "653000"
  },
  {
    "text": "a typical output of the of the code that",
    "start": "612640",
    "end": "615760"
  },
  {
    "text": "we saw earlier that code saved the data",
    "start": "615760",
    "end": "619750"
  },
  {
    "text": "in a histogram which is also provided by",
    "start": "619750",
    "end": "623020"
  },
  {
    "text": "BPF in the kernel so here it's very easy",
    "start": "623020",
    "end": "627160"
  },
  {
    "text": "to visualize that around 200 calls fell",
    "start": "627160",
    "end": "631240"
  },
  {
    "text": "into the bucket of 500 nanosecond to 1",
    "start": "631240",
    "end": "633490"
  },
  {
    "text": "milliseconds of latency another output",
    "start": "633490",
    "end": "638740"
  },
  {
    "text": "example from another tool called VFS",
    "start": "638740",
    "end": "641800"
  },
  {
    "text": "state from the same tool chain is which",
    "start": "641800",
    "end": "645310"
  },
  {
    "text": "shows the number of DFS operations",
    "start": "645310",
    "end": "647620"
  },
  {
    "text": "happening per second and the same tools",
    "start": "647620",
    "end": "656740"
  },
  {
    "start": "653000",
    "end": "774000"
  },
  {
    "text": "also can provide output in the format",
    "start": "656740",
    "end": "660460"
  },
  {
    "text": "that is understood by flame graphs tool",
    "start": "660460",
    "end": "662980"
  },
  {
    "text": "which was developed by Brandon red flame",
    "start": "662980",
    "end": "666880"
  },
  {
    "text": "graphs are a great way of visualizing",
    "start": "666880",
    "end": "668410"
  },
  {
    "text": "stack",
    "start": "668410",
    "end": "670480"
  },
  {
    "text": "so this is an example of off CPU ting",
    "start": "670480",
    "end": "675370"
  },
  {
    "text": "flame graph which shows the Java stack",
    "start": "675370",
    "end": "679690"
  },
  {
    "text": "of a offer process the vertical columns",
    "start": "679690",
    "end": "685570"
  },
  {
    "text": "that we see here are individual stack",
    "start": "685570",
    "end": "687880"
  },
  {
    "text": "traces so each column here from the top",
    "start": "687880",
    "end": "691890"
  },
  {
    "text": "is a stack trace and the x-axis is",
    "start": "691890",
    "end": "697750"
  },
  {
    "text": "nothing but these stack traces are just",
    "start": "697750",
    "end": "700390"
  },
  {
    "text": "sorted alphabetically but the width of",
    "start": "700390",
    "end": "703450"
  },
  {
    "text": "each column shows the or is proportional",
    "start": "703450",
    "end": "706630"
  },
  {
    "text": "to the time taken or the time a",
    "start": "706630",
    "end": "709750"
  },
  {
    "text": "particular stack was scheduled of the",
    "start": "709750",
    "end": "712330"
  },
  {
    "text": "CPU so for on the CPU frame graph the",
    "start": "712330",
    "end": "715180"
  },
  {
    "text": "width will denote how much time it it",
    "start": "715180",
    "end": "716830"
  },
  {
    "text": "spent on the CPU and for foreign of CPU",
    "start": "716830",
    "end": "720820"
  },
  {
    "text": "flame graph it denotes how much time it",
    "start": "720820",
    "end": "722800"
  },
  {
    "text": "spent of the CPU so here for example we",
    "start": "722800",
    "end": "725950"
  },
  {
    "text": "can see that the thread bun which was",
    "start": "725950",
    "end": "729190"
  },
  {
    "text": "the heavy thread spent some time of the",
    "start": "729190",
    "end": "731560"
  },
  {
    "text": "CPU around 50 percent of the time and",
    "start": "731560",
    "end": "734220"
  },
  {
    "text": "for proportionally this much amount of",
    "start": "734220",
    "end": "736960"
  },
  {
    "text": "time it was looking for memory the",
    "start": "736960",
    "end": "742780"
  },
  {
    "text": "thread to also was she dueled out mostly",
    "start": "742780",
    "end": "746920"
  },
  {
    "text": "because sleep was called and through",
    "start": "746920",
    "end": "750880"
  },
  {
    "text": "this we can easily visualize that which",
    "start": "750880",
    "end": "753010"
  },
  {
    "text": "part of the code which thread was is not",
    "start": "753010",
    "end": "757300"
  },
  {
    "text": "optimized here we see the garbage",
    "start": "757300",
    "end": "760060"
  },
  {
    "text": "collection stack also here too so",
    "start": "760060",
    "end": "765010"
  },
  {
    "text": "details like this we can get from BPF",
    "start": "765010",
    "end": "768460"
  },
  {
    "text": "tools with a very low overhead of its",
    "start": "768460",
    "end": "770650"
  },
  {
    "text": "own so EBP F can also be used with the",
    "start": "770650",
    "end": "779920"
  },
  {
    "text": "containers EVP F programs can be",
    "start": "779920",
    "end": "783400"
  },
  {
    "text": "attached to see groups one of the",
    "start": "783400",
    "end": "785590"
  },
  {
    "text": "projects from Ken woke season 8 which",
    "start": "785590",
    "end": "789910"
  },
  {
    "text": "attaches EVP F programs to containers or",
    "start": "789910",
    "end": "792580"
  },
  {
    "text": "pods and it gathers the network starts",
    "start": "792580",
    "end": "797800"
  },
  {
    "text": "from the pod and then pushes it to",
    "start": "797800",
    "end": "800560"
  },
  {
    "text": "prometheus",
    "start": "800560",
    "end": "801999"
  },
  {
    "text": "which can so this is a great way of",
    "start": "801999",
    "end": "804669"
  },
  {
    "text": "visualizing networks now network states",
    "start": "804669",
    "end": "806979"
  },
  {
    "text": "per part with minimal overhead now how",
    "start": "806979",
    "end": "812559"
  },
  {
    "text": "so in in in a host where we have access",
    "start": "812559",
    "end": "815769"
  },
  {
    "text": "where we can login into the system we",
    "start": "815769",
    "end": "817629"
  },
  {
    "text": "have a easy way of deploying these tools",
    "start": "817629",
    "end": "819209"
  },
  {
    "text": "install the dependencies but how do we",
    "start": "819209",
    "end": "821769"
  },
  {
    "text": "deploy it and given it is so we do it",
    "start": "821769",
    "end": "824679"
  },
  {
    "text": "the given it is way of course so we run",
    "start": "824679",
    "end": "829599"
  },
  {
    "text": "a privileged part which shares the host",
    "start": "829599",
    "end": "833619"
  },
  {
    "text": "PID and the volume so that is required",
    "start": "833619",
    "end": "838389"
  },
  {
    "text": "in that part will be Lib modules and",
    "start": "838389",
    "end": "840429"
  },
  {
    "text": "talks so that it has access to the",
    "start": "840429",
    "end": "842619"
  },
  {
    "text": "kernel symbols and the processes running",
    "start": "842619",
    "end": "845169"
  },
  {
    "text": "in various containers in the host and we",
    "start": "845169",
    "end": "851439"
  },
  {
    "text": "can expose HTTP endpoints which can be",
    "start": "851439",
    "end": "854619"
  },
  {
    "text": "hit to collect particular matrices so",
    "start": "854619",
    "end": "862799"
  },
  {
    "start": "861000",
    "end": "1048000"
  },
  {
    "text": "let's go through demo so what I have for",
    "start": "862799",
    "end": "876129"
  },
  {
    "text": "the demo is a cluster that is deployed",
    "start": "876129",
    "end": "878139"
  },
  {
    "text": "using gardener and for the first demo",
    "start": "878139",
    "end": "883509"
  },
  {
    "text": "what we'll be doing is we'll be",
    "start": "883509",
    "end": "885339"
  },
  {
    "text": "generating of CPU time flame graph for",
    "start": "885339",
    "end": "887649"
  },
  {
    "text": "the processes running on the host so for",
    "start": "887649",
    "end": "890679"
  },
  {
    "text": "example",
    "start": "890679",
    "end": "892439"
  },
  {
    "text": "tom has a post-race instance running in",
    "start": "892439",
    "end": "895569"
  },
  {
    "text": "a node in in inside a pod and he is",
    "start": "895569",
    "end": "899679"
  },
  {
    "text": "using another web app to use that",
    "start": "899679",
    "end": "903220"
  },
  {
    "text": "Postgres instance in another part and he",
    "start": "903220",
    "end": "906099"
  },
  {
    "text": "sees that there is some lag or latency",
    "start": "906099",
    "end": "907929"
  },
  {
    "text": "in in in the system so he goes to bob",
    "start": "907929",
    "end": "912939"
  },
  {
    "text": "from operations and then he asked him ok",
    "start": "912939",
    "end": "915579"
  },
  {
    "text": "there is some problem with the instance",
    "start": "915579",
    "end": "917139"
  },
  {
    "text": "how do i figure out where the problem is",
    "start": "917139",
    "end": "918819"
  },
  {
    "text": "Bob looks at the dashboard and sees okay",
    "start": "918819",
    "end": "923259"
  },
  {
    "text": "you know there is a CPU high CPU",
    "start": "923259",
    "end": "926859"
  },
  {
    "text": "utilization or or the process or",
    "start": "926859",
    "end": "931059"
  },
  {
    "text": "particular process is consuming this",
    "start": "931059",
    "end": "932649"
  },
  {
    "text": "much of CPU but",
    "start": "932649",
    "end": "935500"
  },
  {
    "text": "still doesn't even answer that what is",
    "start": "935500",
    "end": "937210"
  },
  {
    "text": "wrong with the process running why it is",
    "start": "937210",
    "end": "939760"
  },
  {
    "text": "taking so much of CPU or details like",
    "start": "939760",
    "end": "942430"
  },
  {
    "text": "that so what what Tom can do is that he",
    "start": "942430",
    "end": "948220"
  },
  {
    "text": "can deploy this BPF tools in in a pod",
    "start": "948220",
    "end": "953530"
  },
  {
    "text": "and then query those HTTP endpoints to",
    "start": "953530",
    "end": "955840"
  },
  {
    "text": "gather particular specific detailed",
    "start": "955840",
    "end": "960750"
  },
  {
    "text": "matrices from the system so here I have",
    "start": "960750",
    "end": "968130"
  },
  {
    "text": "two yeah",
    "start": "968130",
    "end": "979950"
  },
  {
    "text": "okay",
    "start": "982860",
    "end": "985579"
  },
  {
    "text": "no I can't you okay",
    "start": "991270",
    "end": "996180"
  },
  {
    "text": "just a second",
    "start": "1001570",
    "end": "1004800"
  },
  {
    "text": "okay yeah",
    "start": "1030870",
    "end": "1035040"
  },
  {
    "text": "Thank You vision okay so but so here I",
    "start": "1047900",
    "end": "1052910"
  },
  {
    "start": "1048000",
    "end": "1461000"
  },
  {
    "text": "have two terminals in one terminal I'll",
    "start": "1052910",
    "end": "1056480"
  },
  {
    "text": "be logging into the PG Postgres instance",
    "start": "1056480",
    "end": "1061010"
  },
  {
    "text": "and running a benchmark tool PG bench",
    "start": "1061010",
    "end": "1065470"
  },
  {
    "text": "and in in second terminal I will be",
    "start": "1065470",
    "end": "1069140"
  },
  {
    "text": "running the the of CPU time tool that",
    "start": "1069140",
    "end": "1074540"
  },
  {
    "text": "will collect the of CPU time and",
    "start": "1074540",
    "end": "1077030"
  },
  {
    "text": "generate the flame graph for it",
    "start": "1077030",
    "end": "1079940"
  },
  {
    "text": "correspondingly so what I will do is",
    "start": "1079940",
    "end": "1085670"
  },
  {
    "text": "I'll start so this is the URL that is",
    "start": "1085670",
    "end": "1092020"
  },
  {
    "text": "that is the load balancers load balancer",
    "start": "1092020",
    "end": "1095120"
  },
  {
    "text": "service URL which and the off CPU time",
    "start": "1095120",
    "end": "1099980"
  },
  {
    "text": "tool is exported on this end point I",
    "start": "1099980",
    "end": "1102950"
  },
  {
    "text": "will run this tool for 10 second",
    "start": "1102950",
    "end": "1105080"
  },
  {
    "text": "duration and expect the output in the",
    "start": "1105080",
    "end": "1109220"
  },
  {
    "text": "flame graph format and on another",
    "start": "1109220",
    "end": "1112820"
  },
  {
    "text": "terminal from the Postgres instance I",
    "start": "1112820",
    "end": "1116210"
  },
  {
    "text": "have launched the load for Postgres and",
    "start": "1116210",
    "end": "1123290"
  },
  {
    "text": "let's see what this of CPU time flame",
    "start": "1123290",
    "end": "1125120"
  },
  {
    "text": "graph looks like",
    "start": "1125120",
    "end": "1125809"
  },
  {
    "text": "so here okay so I was maybe just just",
    "start": "1125809",
    "end": "1137169"
  },
  {
    "text": "okay so I'll start the collection again",
    "start": "1140840",
    "end": "1143520"
  },
  {
    "text": "because there were some delays before I",
    "start": "1143520",
    "end": "1147320"
  },
  {
    "text": "was describing about the about the tool",
    "start": "1147320",
    "end": "1150960"
  },
  {
    "text": "and I started the load so I'll just keep",
    "start": "1150960",
    "end": "1153420"
  },
  {
    "text": "running the load until it key collects",
    "start": "1153420",
    "end": "1158040"
  },
  {
    "text": "edit ow",
    "start": "1158040",
    "end": "1160430"
  },
  {
    "text": "so here we see the Postgres process",
    "start": "1170860",
    "end": "1173310"
  },
  {
    "text": "showing up okay so and there are a lot",
    "start": "1173310",
    "end": "1179440"
  },
  {
    "text": "of unknown symbols but what I'll do is",
    "start": "1179440",
    "end": "1186340"
  },
  {
    "text": "I'll start this gathering again",
    "start": "1186340",
    "end": "1191760"
  },
  {
    "text": "so what what of CPU time to this tool",
    "start": "1202360",
    "end": "1207080"
  },
  {
    "text": "does is that it traps or it races the",
    "start": "1207080",
    "end": "1209930"
  },
  {
    "text": "scheduler process of the Linux kernel",
    "start": "1209930",
    "end": "1212900"
  },
  {
    "text": "and whenever the scheduler schedules out",
    "start": "1212900",
    "end": "1215840"
  },
  {
    "text": "to any process it saves it stack and",
    "start": "1215840",
    "end": "1219010"
  },
  {
    "text": "saves the time at which it was scheduled",
    "start": "1219010",
    "end": "1222860"
  },
  {
    "text": "out and whenever that process is",
    "start": "1222860",
    "end": "1224480"
  },
  {
    "text": "scheduled back into the system",
    "start": "1224480",
    "end": "1226730"
  },
  {
    "text": "it calculates the time difference at for",
    "start": "1226730",
    "end": "1229850"
  },
  {
    "text": "which this stack was off the CPU and it",
    "start": "1229850",
    "end": "1232610"
  },
  {
    "text": "keeps aggregating that data in the",
    "start": "1232610",
    "end": "1234170"
  },
  {
    "text": "kernel and which is read from the user",
    "start": "1234170",
    "end": "1236300"
  },
  {
    "text": "space and that data is fed to the flame",
    "start": "1236300",
    "end": "1239600"
  },
  {
    "text": "rough tool that I talked about earlier",
    "start": "1239600",
    "end": "1242810"
  },
  {
    "text": "and then it sends the data to this back",
    "start": "1242810",
    "end": "1249140"
  },
  {
    "text": "to the requester so here we see that the",
    "start": "1249140",
    "end": "1252890"
  },
  {
    "text": "Postgres process",
    "start": "1252890",
    "end": "1254120"
  },
  {
    "text": "spent most of the time of the CPU",
    "start": "1254120",
    "end": "1256100"
  },
  {
    "text": "because it was running this function PQ",
    "start": "1256100",
    "end": "1258980"
  },
  {
    "text": "flush so details like this we can gather",
    "start": "1258980",
    "end": "1262610"
  },
  {
    "text": "and similarly there is a Java part that",
    "start": "1262610",
    "end": "1266240"
  },
  {
    "text": "is also running we can get details like",
    "start": "1266240",
    "end": "1268190"
  },
  {
    "text": "this that we saw earlier the two threads",
    "start": "1268190",
    "end": "1271790"
  },
  {
    "text": "the light thread and the heavy thread",
    "start": "1271790",
    "end": "1273290"
  },
  {
    "text": "then why they were scheduled of the CPU",
    "start": "1273290",
    "end": "1275810"
  },
  {
    "text": "we see that sleep here again because why",
    "start": "1275810",
    "end": "1278510"
  },
  {
    "text": "it was ruled out on similarly I can also",
    "start": "1278510",
    "end": "1284030"
  },
  {
    "text": "use these EBP of tools for security",
    "start": "1284030",
    "end": "1286940"
  },
  {
    "text": "purposes so what I want is that whenever",
    "start": "1286940",
    "end": "1291050"
  },
  {
    "text": "someone logs into the node of cuban it",
    "start": "1291050",
    "end": "1294020"
  },
  {
    "text": "is node i i generate an alert maybe some",
    "start": "1294020",
    "end": "1299090"
  },
  {
    "text": "siren goes off somewhere maybe i get an",
    "start": "1299090",
    "end": "1301820"
  },
  {
    "text": "SMS or a call so what i'll be showing",
    "start": "1301820",
    "end": "1304940"
  },
  {
    "text": "here is that i'll try to log in in the",
    "start": "1304940",
    "end": "1307610"
  },
  {
    "text": "node and what i will be expecting is a",
    "start": "1307610",
    "end": "1310070"
  },
  {
    "text": "call on my phone that says that there",
    "start": "1310070",
    "end": "1311930"
  },
  {
    "text": "was a login attempt on the node so yeah",
    "start": "1311930",
    "end": "1315110"
  },
  {
    "text": "let's do that so this is a part from",
    "start": "1315110",
    "end": "1324620"
  },
  {
    "text": "which i will be logging in and what I am",
    "start": "1324620",
    "end": "1327920"
  },
  {
    "text": "expecting is a call on this phone",
    "start": "1327920",
    "end": "1330260"
  },
  {
    "text": "here soon",
    "start": "1330260",
    "end": "1335200"
  },
  {
    "text": "yeah here it is",
    "start": "1336400",
    "end": "1338330"
  },
  {
    "text": "so when I pick this up what it says is",
    "start": "1338330",
    "end": "1344470"
  },
  {
    "text": "so here it was I I hope it was audible",
    "start": "1344470",
    "end": "1349520"
  },
  {
    "text": "so these kind of full alerts can be",
    "start": "1349520",
    "end": "1353630"
  },
  {
    "text": "generated what it does is whenever",
    "start": "1353630",
    "end": "1355370"
  },
  {
    "text": "someone logs in it the handler is called",
    "start": "1355370",
    "end": "1358490"
  },
  {
    "text": "which submits and even to the user space",
    "start": "1358490",
    "end": "1360530"
  },
  {
    "text": "and the user-space component handles",
    "start": "1360530",
    "end": "1363710"
  },
  {
    "text": "that event or synchronously makes the",
    "start": "1363710",
    "end": "1365630"
  },
  {
    "text": "call to the number provided",
    "start": "1365630",
    "end": "1367190"
  },
  {
    "text": "pre-programmed number provided in the in",
    "start": "1367190",
    "end": "1369710"
  },
  {
    "text": "the tool chain now this tool can also be",
    "start": "1369710",
    "end": "1374180"
  },
  {
    "text": "used to log what the horse is doing or",
    "start": "1374180",
    "end": "1379820"
  },
  {
    "text": "so someone has was able to login into",
    "start": "1379820",
    "end": "1383270"
  },
  {
    "text": "the system now I want to log what that",
    "start": "1383270",
    "end": "1385130"
  },
  {
    "text": "user was doing on on that on that pts",
    "start": "1385130",
    "end": "1389630"
  },
  {
    "text": "device that it opened so for that I can",
    "start": "1389630",
    "end": "1395390"
  },
  {
    "text": "I can run this another tool tty snow for",
    "start": "1395390",
    "end": "1400070"
  },
  {
    "text": "n log whatever was happening on that",
    "start": "1400070",
    "end": "1402740"
  },
  {
    "text": "particular character device so I'll run",
    "start": "1402740",
    "end": "1405800"
  },
  {
    "text": "it for 20 minutes duration but this can",
    "start": "1405800",
    "end": "1407930"
  },
  {
    "text": "as well be triggered when someone was",
    "start": "1407930",
    "end": "1409760"
  },
  {
    "text": "able to login into the system so here we",
    "start": "1409760",
    "end": "1413240"
  },
  {
    "text": "run this so hit the end point TTY snoop",
    "start": "1413240",
    "end": "1415850"
  },
  {
    "text": "which starts recording what the user was",
    "start": "1415850",
    "end": "1419870"
  },
  {
    "text": "doing after logging in I am doing some",
    "start": "1419870",
    "end": "1421850"
  },
  {
    "text": "random steps in the terminal of",
    "start": "1421850",
    "end": "1426309"
  },
  {
    "text": "something and after the duration of 20",
    "start": "1427600",
    "end": "1430960"
  },
  {
    "text": "20 seconds after the duration of 20",
    "start": "1430960",
    "end": "1435830"
  },
  {
    "text": "seconds I see that whatever the user was",
    "start": "1435830",
    "end": "1439190"
  },
  {
    "text": "doing in after taking the shell terminal",
    "start": "1439190",
    "end": "1441440"
  },
  {
    "text": "is duplicated or I get the log of what",
    "start": "1441440",
    "end": "1445190"
  },
  {
    "text": "that user was seen now this can be",
    "start": "1445190",
    "end": "1448100"
  },
  {
    "text": "utilized to replay what the user did and",
    "start": "1448100",
    "end": "1451600"
  },
  {
    "text": "what the effects were of his actions",
    "start": "1451600",
    "end": "1456850"
  },
  {
    "start": "1461000",
    "end": "1643000"
  },
  {
    "text": "so this was the demo of our generating",
    "start": "1461660",
    "end": "1466470"
  },
  {
    "text": "of CPU flame graphs on the demand",
    "start": "1466470",
    "end": "1468590"
  },
  {
    "text": "generating alerts when someone takes a",
    "start": "1468590",
    "end": "1470730"
  },
  {
    "text": "shower logging on monitoring or pts",
    "start": "1470730",
    "end": "1472230"
  },
  {
    "text": "devices and these are some of the",
    "start": "1472230",
    "end": "1476610"
  },
  {
    "text": "references that I okay and thank you for",
    "start": "1476610",
    "end": "1497910"
  },
  {
    "text": "attending the talk any questions",
    "start": "1497910",
    "end": "1502220"
  },
  {
    "text": "[Applause]",
    "start": "1503280",
    "end": "1512970"
  },
  {
    "text": "can you okay",
    "start": "1535170",
    "end": "1542380"
  },
  {
    "text": "so the question is that you can trace",
    "start": "1542380",
    "end": "1547180"
  },
  {
    "text": "the calls but can you also modify based",
    "start": "1547180",
    "end": "1550120"
  },
  {
    "text": "on what is the what the call is doing so",
    "start": "1550120",
    "end": "1552880"
  },
  {
    "text": "yes BPF also provides BPF actions based",
    "start": "1552880",
    "end": "1555490"
  },
  {
    "text": "on that the parameters can be modified",
    "start": "1555490",
    "end": "1558970"
  },
  {
    "text": "or can be dropped it doesn't necessarily",
    "start": "1558970",
    "end": "1561820"
  },
  {
    "text": "have to go through the whole process of",
    "start": "1561820",
    "end": "1565769"
  },
  {
    "text": "try to do something similar about kind",
    "start": "1569970",
    "end": "1574270"
  },
  {
    "text": "of streaming back the session and but I",
    "start": "1574270",
    "end": "1576820"
  },
  {
    "text": "couldn't work out how or where to hook",
    "start": "1576820",
    "end": "1581080"
  },
  {
    "text": "into the system to firstly know when a",
    "start": "1581080",
    "end": "1584560"
  },
  {
    "text": "new session has started and secondly",
    "start": "1584560",
    "end": "1586210"
  },
  {
    "text": "what to used to track and the session so",
    "start": "1586210",
    "end": "1589420"
  },
  {
    "text": "what kind of M BPF folks are using to",
    "start": "1589420",
    "end": "1593320"
  },
  {
    "text": "track the session itself and keep",
    "start": "1593320",
    "end": "1596140"
  },
  {
    "text": "streaming the the output back okay so I",
    "start": "1596140",
    "end": "1599650"
  },
  {
    "text": "believe the functions name is TTY right",
    "start": "1599650",
    "end": "1602820"
  },
  {
    "text": "from the kernel yeah so and it gets all",
    "start": "1602820",
    "end": "1607450"
  },
  {
    "text": "the data that is being written on the",
    "start": "1607450",
    "end": "1609040"
  },
  {
    "text": "terminal and that data you gather either",
    "start": "1609040",
    "end": "1612820"
  },
  {
    "text": "in the in the kernel maps or you submit",
    "start": "1612820",
    "end": "1616360"
  },
  {
    "text": "an event for it which can then be",
    "start": "1616360",
    "end": "1618610"
  },
  {
    "text": "handled from the user space component",
    "start": "1618610",
    "end": "1620500"
  },
  {
    "text": "and can further be saved in data",
    "start": "1620500",
    "end": "1622900"
  },
  {
    "text": "structure which can be returned back so",
    "start": "1622900",
    "end": "1626050"
  },
  {
    "text": "I believe TTY right is the correct",
    "start": "1626050",
    "end": "1628720"
  },
  {
    "text": "function but any other questions",
    "start": "1628720",
    "end": "1637530"
  },
  {
    "text": "thank you very much that goes",
    "start": "1639790",
    "end": "1644400"
  }
]