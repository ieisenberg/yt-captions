[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "hello everyone i'm rafael and i'm speaking to you from poland from krakow and i will tell you",
    "start": "80",
    "end": "6799"
  },
  {
    "text": "about caching and especially about caching in the context of microservices deployed on kubernetes",
    "start": "6799",
    "end": "15200"
  },
  {
    "text": "but first a few words about myself i'm a cloud software engineer at hazelcast before i work",
    "start": "15200",
    "end": "22400"
  },
  {
    "text": "at google and cern i'm also an author of the book continuous delivery with docker and",
    "start": "22400",
    "end": "27920"
  },
  {
    "text": "jenkins from time to time i do training and speaking but my main job is",
    "start": "27920",
    "end": "33040"
  },
  {
    "text": "i'm a software engineer and as i said i live in krakow in poland",
    "start": "33040",
    "end": "39120"
  },
  {
    "text": "also a few words about hazelcast so hazelcast is a distributed company we",
    "start": "39120",
    "end": "44960"
  },
  {
    "start": "40000",
    "end": "40000"
  },
  {
    "text": "produce open source software and we have three products first one is the most known hazelcast",
    "start": "44960",
    "end": "52480"
  },
  {
    "text": "in-memory data grid this is what people usually use for caching",
    "start": "52480",
    "end": "57680"
  },
  {
    "text": "our second product is hazelcutjet which is a library for stream processing",
    "start": "57680",
    "end": "63199"
  },
  {
    "text": "and the last product is is quite new is hazelcast put into the as a service in",
    "start": "63199",
    "end": "68400"
  },
  {
    "text": "the cloud our agenda for today is pretty",
    "start": "68400",
    "end": "73680"
  },
  {
    "text": "straightforward so there will be a very short introduction about caching and the",
    "start": "73680",
    "end": "78720"
  },
  {
    "text": "microservices and then we will walk through all possible caching patterns then you can that you",
    "start": "78720",
    "end": "85759"
  },
  {
    "text": "can use in your microservices deployed on kubernetes",
    "start": "85759",
    "end": "91920"
  },
  {
    "text": "when i'll be talking i would like you to think about two things first thing is",
    "start": "93040",
    "end": "100799"
  },
  {
    "text": "in your software which of this pattern do you use because this list is complete so you",
    "start": "100799",
    "end": "107040"
  },
  {
    "text": "must use one of this pattern and the second thing i would like you to think about",
    "start": "107040",
    "end": "113200"
  },
  {
    "text": "is would it make sense to change to any other pattern would it make sense for my system for my",
    "start": "113200",
    "end": "119439"
  },
  {
    "text": "architecture okay let's start so this is a short",
    "start": "119439",
    "end": "124479"
  },
  {
    "start": "122000",
    "end": "122000"
  },
  {
    "text": "introduction so in general that's how that's a diagram for micro service world",
    "start": "124479",
    "end": "131599"
  },
  {
    "text": "so you have we have a lot of micro services they have different versions they can be written in a different programming",
    "start": "131680",
    "end": "137680"
  },
  {
    "text": "languages and they use each other and now the main",
    "start": "137680",
    "end": "142959"
  },
  {
    "text": "question when it comes to caching is where where is the right place to put",
    "start": "142959",
    "end": "150000"
  },
  {
    "text": "your caching layer is it inside of each microservice or",
    "start": "150000",
    "end": "156160"
  },
  {
    "text": "maybe as a separate unit in our separate deployment or maybe we can",
    "start": "156160",
    "end": "162000"
  },
  {
    "text": "put cash in front of the microservices and that's what this talk will be about",
    "start": "162000",
    "end": "170480"
  },
  {
    "text": "starting from the first caching pattern is the simplest thing you can imagine it's embedded cache",
    "start": "170480",
    "end": "178560"
  },
  {
    "text": "so embedded cache is when you put your cache as a library inside your",
    "start": "178560",
    "end": "185120"
  },
  {
    "text": "application so the flow is as follows request goes",
    "start": "185120",
    "end": "190560"
  },
  {
    "text": "to our kubernetes service which forwards the request to one of the kubernetes port",
    "start": "190560",
    "end": "196239"
  },
  {
    "text": "and application receives the request then the application check checks in the cache which is embedded",
    "start": "196239",
    "end": "203440"
  },
  {
    "text": "have i already executed such a request if yes return it from cash if if no do some business logic put it",
    "start": "203440",
    "end": "211120"
  },
  {
    "text": "into cache and return the response so the idea is very simple",
    "start": "211120",
    "end": "216640"
  },
  {
    "text": "it the cache goes together with the application it's that simple that we could think even about",
    "start": "216640",
    "end": "222640"
  },
  {
    "text": "implementing this on our own if you use java that that is probably",
    "start": "222640",
    "end": "227840"
  },
  {
    "start": "224000",
    "end": "224000"
  },
  {
    "text": "how how your code could look like so we create a concurrent hashmap then",
    "start": "227840",
    "end": "232879"
  },
  {
    "text": "we process the request check if the request is in the cache if yes",
    "start": "232879",
    "end": "238319"
  },
  {
    "text": "get the value from the cash if no do some processing put into cash and return the response",
    "start": "238319",
    "end": "244640"
  },
  {
    "text": "so you can implement it your yourself however please don't please don't do it",
    "start": "244640",
    "end": "251760"
  },
  {
    "text": "don't do it because a simple collection in java or any programming language is",
    "start": "251760",
    "end": "257280"
  },
  {
    "text": "not a cache it's not a cache because it has no eviction policy no max size limit no",
    "start": "257280",
    "end": "262639"
  },
  {
    "text": "statistic no billion cash loaders no expiration time no notification mechanism so it's it's lacks a lot of",
    "start": "262639",
    "end": "268160"
  },
  {
    "text": "features that you will need later so you are better way better off by",
    "start": "268160",
    "end": "274639"
  },
  {
    "text": "using some caching library so what is a good caching library for java",
    "start": "274639",
    "end": "280000"
  },
  {
    "text": "a very simple if you just need anything as a library is like guava cache is a very very very good",
    "start": "280000",
    "end": "286639"
  },
  {
    "start": "284000",
    "end": "284000"
  },
  {
    "text": "caching solution where you can define all these parameters",
    "start": "286639",
    "end": "291840"
  },
  {
    "text": "up front in the in the while building the cache another good solution is eh cache",
    "start": "291840",
    "end": "300560"
  },
  {
    "text": "we can even take this idea of caching one layer higher and put the",
    "start": "300560",
    "end": "307199"
  },
  {
    "text": "cache into application layer so if you happen to use spring that is how how your",
    "start": "307199",
    "end": "312960"
  },
  {
    "start": "308000",
    "end": "308000"
  },
  {
    "text": "caching could look like so you just add a cachable keyword now every call to the method getbook",
    "start": "312960",
    "end": "319280"
  },
  {
    "text": "name by isbn will first check in a books cache if there is such value if yes return it from the cache only if there",
    "start": "319280",
    "end": "326240"
  },
  {
    "text": "is no cached value we will execute the method find book in slow source",
    "start": "326240",
    "end": "332560"
  },
  {
    "text": "but be careful because spring for some reason uses concurrent hashmap by default",
    "start": "332560",
    "end": "337759"
  },
  {
    "text": "so you are better off first thing you do in a spring application change your cache manager for example to",
    "start": "337759",
    "end": "343840"
  },
  {
    "text": "guava or any other caching library so this is our diagram",
    "start": "343840",
    "end": "350400"
  },
  {
    "text": "for for embedded cache so this is pretty simple but there's one there's",
    "start": "350400",
    "end": "357440"
  },
  {
    "text": "one big problem about this caching imagine that the first request goes to kubernetes service",
    "start": "357440",
    "end": "364639"
  },
  {
    "text": "and it's forwarded to the pot on the top we do some we do some business logic we",
    "start": "364639",
    "end": "372080"
  },
  {
    "text": "put value into the cache and so on now there is a second request which is",
    "start": "372080",
    "end": "378240"
  },
  {
    "text": "the same it goes to kubernetes service but this time it's forwarded to the application",
    "start": "378240",
    "end": "383520"
  },
  {
    "text": "at the bottom so the application needs to do this business logic once again because",
    "start": "383520",
    "end": "392080"
  },
  {
    "text": "these caches are completely separate they don't know about each other",
    "start": "392080",
    "end": "397520"
  },
  {
    "text": "that is why one of the improvement to the embedded cache is embedded distributed cache so it's",
    "start": "397520",
    "end": "404000"
  },
  {
    "text": "still the same idea if you think about the patterns it's still the same pattern however this time we'll use a different",
    "start": "404000",
    "end": "410960"
  },
  {
    "text": "caching library so this time we will use for caching we will use hazelcast which is the",
    "start": "410960",
    "end": "417280"
  },
  {
    "text": "distributed cache and this time it it looks exactly uh",
    "start": "417280",
    "end": "424080"
  },
  {
    "text": "the same flow is exactly the same but all caches all embedded caches in all applications",
    "start": "424080",
    "end": "430800"
  },
  {
    "text": "they form one consistent caching cluster so this is how",
    "start": "430800",
    "end": "439280"
  },
  {
    "text": "how it would look like in your spring application if we stick to this spring example if you would like to use for oreo",
    "start": "439280",
    "end": "445280"
  },
  {
    "text": "cachable would like to use hazelcast as a cache all you need to change is to add",
    "start": "445280",
    "end": "451520"
  },
  {
    "text": "hazelcast as a cache manager and then as a for the caching layer",
    "start": "451520",
    "end": "456880"
  },
  {
    "text": "hazelcast is used now you may think like okay i start my",
    "start": "456880",
    "end": "463599"
  },
  {
    "text": "applications like my i start two instances of my applications",
    "start": "463599",
    "end": "469759"
  },
  {
    "text": "they both have like cache and now how do they form the cluster how",
    "start": "469759",
    "end": "475759"
  },
  {
    "text": "do i configure this because you see on this on this slide there is no configuration but they will still from the cluster and",
    "start": "475759",
    "end": "483440"
  },
  {
    "text": "we thought how to make it very convenient to the users and we came up with the idea of the",
    "start": "483440",
    "end": "488879"
  },
  {
    "start": "488000",
    "end": "488000"
  },
  {
    "text": "discovery plugins so now for every like deployment",
    "start": "488879",
    "end": "495199"
  },
  {
    "text": "environment we have a discovery plugin which uses api of the given",
    "start": "495199",
    "end": "501199"
  },
  {
    "text": "environment to discover other members and to form a cluster it's not only to discover members it's",
    "start": "501199",
    "end": "507680"
  },
  {
    "text": "also to provide like high availability to distribute across distribute the",
    "start": "507680",
    "end": "513518"
  },
  {
    "text": "partitions across the zones and so on so",
    "start": "513519",
    "end": "518959"
  },
  {
    "text": "you can choose for the um from the plugins there is like now very trending like",
    "start": "518959",
    "end": "525360"
  },
  {
    "text": "kubernetes plugin which is the most relevant to this uh presentation uh so if you are interested in details",
    "start": "525360",
    "end": "533360"
  },
  {
    "text": "how how to use it we publish blog posts but in general there are two modes you can use one is",
    "start": "533360",
    "end": "540480"
  },
  {
    "text": "that plugin uses kubernetes api and queries the kubernetes mastered for",
    "start": "540480",
    "end": "545600"
  },
  {
    "text": "to detect other members and the second mode is to use dns resolution",
    "start": "545600",
    "end": "551600"
  },
  {
    "text": "so we read records from the dns to also to to find other members and it's all done",
    "start": "551600",
    "end": "557760"
  },
  {
    "text": "dynamically automatically so that is the good the good part so that is our diagram for",
    "start": "557760",
    "end": "565360"
  },
  {
    "text": "embedded distributed cache it works really good actually kubernetes is like",
    "start": "565360",
    "end": "570399"
  },
  {
    "text": "very good for that so short pros and cons of embedded cache",
    "start": "570399",
    "end": "577440"
  },
  {
    "text": "so from the good sides configuration is very simple because the cache goes together with",
    "start": "577440",
    "end": "583600"
  },
  {
    "text": "applications so you don't really need to do anything the latency of the data is is very low",
    "start": "583600",
    "end": "589760"
  },
  {
    "text": "because it the cache goes together with your application again and there is no ops team or ops effort",
    "start": "589760",
    "end": "596720"
  },
  {
    "text": "needed because it goes together with your application however from the downsides",
    "start": "596720",
    "end": "602560"
  },
  {
    "text": "the cache management is not flexible if you would like to scale up your cache i would like now not to have two nodes",
    "start": "602560",
    "end": "609200"
  },
  {
    "text": "but i would like to have five nodes of cache you can do it only together with your application because it's embedded",
    "start": "609200",
    "end": "616640"
  },
  {
    "text": "it's also limited to the your language of choice if you if you write in java then it will",
    "start": "616640",
    "end": "622079"
  },
  {
    "text": "be limited to the jvm-based solutions and the last the last downside is that",
    "start": "622079",
    "end": "630399"
  },
  {
    "text": "data is collocated with your application which may be a bit maybe a bad thing or",
    "start": "630399",
    "end": "636560"
  },
  {
    "text": "not such a big deal that would depend on your probably your enterprise from our experience like big enterprises",
    "start": "636560",
    "end": "644800"
  },
  {
    "text": "they don't want to have their data to get rid of the application",
    "start": "644800",
    "end": "649839"
  },
  {
    "text": "even if it does a cache no they just want it separate",
    "start": "649839",
    "end": "654959"
  },
  {
    "text": "okay we covered embedded cache now the next one is",
    "start": "655920",
    "end": "662320"
  },
  {
    "text": "client server topology so client server is a little bit like a",
    "start": "662320",
    "end": "668720"
  },
  {
    "text": "database so we set up a caching server and application connects to the caching",
    "start": "668720",
    "end": "675519"
  },
  {
    "start": "670000",
    "end": "670000"
  },
  {
    "text": "server flow is like this",
    "start": "675519",
    "end": "681440"
  },
  {
    "text": "request go to kubernetes service it goes to the kubernetes port to the application and then application uses cache client",
    "start": "681440",
    "end": "688079"
  },
  {
    "text": "to connect to the cache server we just deployed completely separate completely separate from the application",
    "start": "688079",
    "end": "696480"
  },
  {
    "text": "and if you think for a moment like what is the difference between this diagram and this diagram",
    "start": "697200",
    "end": "703360"
  },
  {
    "text": "like from embedded cache there are two main differences first one is",
    "start": "703360",
    "end": "709760"
  },
  {
    "text": "obvious we have this guy on the this guy on the on the diagram",
    "start": "709760",
    "end": "715600"
  },
  {
    "text": "and this guy is this guy needs separate like management but it also gives us",
    "start": "715600",
    "end": "722720"
  },
  {
    "text": "flexibility we can scale it up down as we want we can do whatever we want with the cache server",
    "start": "722720",
    "end": "730000"
  },
  {
    "text": "that will also mean you will usually need some ops team to manage this or just set",
    "start": "730000",
    "end": "736399"
  },
  {
    "text": "or just part of the developer's time like it can be a devops team it can be like a that",
    "start": "736399",
    "end": "742240"
  },
  {
    "text": "doesn't necessarily need to be a separate theme but definitely some time to manage this to maintain this",
    "start": "742240",
    "end": "748000"
  },
  {
    "text": "server now there's a second thing on this diagram that is very different from the",
    "start": "748000",
    "end": "753760"
  },
  {
    "text": "embedded cache and this is this part so now we use",
    "start": "753760",
    "end": "760240"
  },
  {
    "text": "now we use cache client to connect to cache server",
    "start": "760240",
    "end": "765519"
  },
  {
    "text": "and the thing is that cache client can be written in totally different language than car",
    "start": "765519",
    "end": "771360"
  },
  {
    "text": "server because there is a well-defined protocol and you can use use it com like in a",
    "start": "771360",
    "end": "777360"
  },
  {
    "text": "different different language and that is a very common strategy that you set up the cache cluster or",
    "start": "777360",
    "end": "783839"
  },
  {
    "text": "a lot of cache clusters and then there are a lot of applications written in different programming",
    "start": "783839",
    "end": "789040"
  },
  {
    "text": "languages and they use this cache that is a very common approach and",
    "start": "789040",
    "end": "794560"
  },
  {
    "text": "a micro service world it's so common that",
    "start": "794560",
    "end": "799839"
  },
  {
    "text": "most caching solutions like the most popular redis or a little old school bus still popular",
    "start": "799839",
    "end": "805519"
  },
  {
    "text": "memcache they are they're designed to work from from client server mode",
    "start": "805519",
    "end": "810880"
  },
  {
    "text": "and they it's actually the only way they can work like red is i guess written in c so you can",
    "start": "810880",
    "end": "818560"
  },
  {
    "text": "cannot really embed it in a in a natural way into your application",
    "start": "818560",
    "end": "824320"
  },
  {
    "text": "now how to deploy like cache server and cache client if we stick to the hazelcast example and",
    "start": "824800",
    "end": "831199"
  },
  {
    "text": "we would like to deploy it on kubernetes so obviously for kubernetes we provide a",
    "start": "831199",
    "end": "836639"
  },
  {
    "text": "hand chart or an operator where you can just start the cache server and scale it up",
    "start": "836639",
    "end": "842480"
  },
  {
    "text": "down upgrade whatever you want now for the client part",
    "start": "842480",
    "end": "849440"
  },
  {
    "text": "if we stick to the java example in spring boot and spread spring that this will this is how it would look",
    "start": "849440",
    "end": "855680"
  },
  {
    "text": "like the cache manager so we defined like client config and then we say use this kubernetes plugin",
    "start": "855680",
    "end": "861839"
  },
  {
    "text": "this is what i described before to discover the cache server so it's dynamically discovered",
    "start": "861839",
    "end": "867519"
  },
  {
    "text": "discovered and like you don't you you see there is no static configuration here",
    "start": "867519",
    "end": "873120"
  },
  {
    "text": "so that is the whole beauty it will the client will use the discovery strategy to find the server",
    "start": "873120",
    "end": "880959"
  },
  {
    "text": "now all good like we have server and",
    "start": "882839",
    "end": "888880"
  },
  {
    "text": "as a separate separate thing on our diagram we can do can manage this it's it's it's all good",
    "start": "888880",
    "end": "896399"
  },
  {
    "text": "now if you think about like usually in a big enterprise this cache server will be",
    "start": "896399",
    "end": "904480"
  },
  {
    "text": "managed by a separate team and if it's already managed by a",
    "start": "904480",
    "end": "909600"
  },
  {
    "text": "separate team we can move one level",
    "start": "909600",
    "end": "914720"
  },
  {
    "text": "one step further and put this part into the cloud",
    "start": "914720",
    "end": "920240"
  },
  {
    "text": "so cloud is still like a client server but it's very specific",
    "start": "920240",
    "end": "925440"
  },
  {
    "text": "it's so specific that it can be considered as a separate caching pattern and it's specific because the cloud part",
    "start": "925440",
    "end": "933360"
  },
  {
    "text": "is outside of our organization so we have this cloud thing which we",
    "start": "933360",
    "end": "941759"
  },
  {
    "start": "934000",
    "end": "934000"
  },
  {
    "text": "which we ask some service provider like in the case of hazelcast hazelcast",
    "start": "941759",
    "end": "948320"
  },
  {
    "text": "cloud create a caching cluster for us and give us the way to connect into this",
    "start": "948320",
    "end": "955199"
  },
  {
    "text": "but it's so all these parts we mentioned before like management or you don't you don't need it because",
    "start": "955199",
    "end": "961920"
  },
  {
    "text": "you just pay cloud provider to provide you a cash",
    "start": "961920",
    "end": "967120"
  },
  {
    "text": "to provide a cash for you now the thing is like you know like",
    "start": "967120",
    "end": "973839"
  },
  {
    "text": "um we are in the in the caching domain is like",
    "start": "973839",
    "end": "981440"
  },
  {
    "text": "it's very strict in terms of latency it's even more strict than a databases",
    "start": "981440",
    "end": "990639"
  },
  {
    "text": "so so you know like when you someone creates a caching cluster for you you must be sure that you the",
    "start": "990639",
    "end": "997519"
  },
  {
    "text": "latency is low and now how we do it like",
    "start": "997519",
    "end": "1003040"
  },
  {
    "text": "so the first thing we don't own the infrastructure we our hazelcast cloud is based on based",
    "start": "1003040",
    "end": "1009920"
  },
  {
    "text": "on aws gcp and azure you can choose now the thing is you should choose the",
    "start": "1009920",
    "end": "1015519"
  },
  {
    "text": "same cloud provider on which your kubernetes cluster is run so that they are you know they use the",
    "start": "1015519",
    "end": "1023040"
  },
  {
    "text": "same cloud provider so then you should select the same region so they are in the same",
    "start": "1023040",
    "end": "1029199"
  },
  {
    "text": "region in the same cloud provider and then we even go one step one step further",
    "start": "1029199",
    "end": "1036480"
  },
  {
    "text": "and provide you a way to do a vpc ring so that they are really in the same",
    "start": "1036480",
    "end": "1041760"
  },
  {
    "text": "virtual network your kubernetes cluster and your your caching",
    "start": "1041760",
    "end": "1048079"
  },
  {
    "text": "cluster and then there is no even one router hope between your application and caching cluster",
    "start": "1048079",
    "end": "1056640"
  },
  {
    "text": "and that is very important no matter if you set up your cache server or use a cloud",
    "start": "1056640",
    "end": "1061760"
  },
  {
    "text": "solution you you must think about latency because here latency is what matters",
    "start": "1061760",
    "end": "1069279"
  },
  {
    "text": "for hazelcast cloud if we stick to this if we stick to this example of spring",
    "start": "1070480",
    "end": "1077120"
  },
  {
    "text": "that that is the configuration would you which you gonna use so you click",
    "start": "1077120",
    "end": "1083440"
  },
  {
    "text": "for to clear create a cluster and we provide you the discovery token cluster name and password you put it",
    "start": "1083440",
    "end": "1089440"
  },
  {
    "text": "into your configuration and that's it so there is no static ip configuration",
    "start": "1089440",
    "end": "1095280"
  },
  {
    "text": "and that way with discovery tokens that is mo like most cloud solution works right now",
    "start": "1095280",
    "end": "1101039"
  },
  {
    "text": "i think mongodb or anything like that that's the way like for for discovery you get discovery token",
    "start": "1101039",
    "end": "1107520"
  },
  {
    "text": "and that that's all pros and cons of client server and cache",
    "start": "1107520",
    "end": "1114480"
  },
  {
    "start": "1112000",
    "end": "1112000"
  },
  {
    "text": "and cloud cache from the good sides data is separate from the applications",
    "start": "1114480",
    "end": "1120960"
  },
  {
    "text": "it's usually a must for big enterprises from my experience",
    "start": "1120960",
    "end": "1126320"
  },
  {
    "text": "we have separate management so we scale up backup it's all separate from your application it's programming language agnostic",
    "start": "1126320",
    "end": "1132480"
  },
  {
    "text": "because we use client cache client clicker server with well-defined protocol",
    "start": "1132480",
    "end": "1138880"
  },
  {
    "text": "from the downsides we need some ops effort needed or pay for the cloud solution latency",
    "start": "1138880",
    "end": "1145520"
  },
  {
    "text": "can be higher i mean you should con you must think more about it that that that's the thing",
    "start": "1145520",
    "end": "1152960"
  },
  {
    "text": "and yeah if you if you set up your client server client you're by by yourself think about region the pc",
    "start": "1153039",
    "end": "1160400"
  },
  {
    "text": "and and so on okay we we covered like the the more",
    "start": "1160400",
    "end": "1168400"
  },
  {
    "text": "classic like approaches to the caching so now something a little a little more",
    "start": "1168400",
    "end": "1174160"
  },
  {
    "text": "modern which fits very well into kubernetes world so cash as a sidecar",
    "start": "1174160",
    "end": "1182640"
  },
  {
    "text": "this is the diagram for cash as a citer so the flaws look as follows request",
    "start": "1182960",
    "end": "1188640"
  },
  {
    "text": "goes to kubernetes service it goes to the kubernetes port it goes to the application but now the cache is",
    "start": "1188640",
    "end": "1196320"
  },
  {
    "text": "not a separate thing on this diagram it's also not embedded into application but it's in",
    "start": "1196320",
    "end": "1201919"
  },
  {
    "text": "the same port it's a cache server run in the same port as application container",
    "start": "1201919",
    "end": "1208400"
  },
  {
    "text": "that's it so the application can access the cache always on the local host because it's",
    "start": "1208400",
    "end": "1213600"
  },
  {
    "text": "the same port but technically it uses cache client to connect to the cache server",
    "start": "1213600",
    "end": "1221039"
  },
  {
    "text": "so it's kind of a mixture between embedded mode and client server mode it's a mixture",
    "start": "1221039",
    "end": "1227360"
  },
  {
    "text": "because like it's similar to embedded because we it's around the same physical machine because it's the same kubernetes",
    "start": "1227360",
    "end": "1233840"
  },
  {
    "text": "but it can share the same resource pool scale up and down",
    "start": "1233840",
    "end": "1238880"
  },
  {
    "text": "together and there is no discovery needed because we use localhost but it's also similar to",
    "start": "1238880",
    "end": "1245039"
  },
  {
    "text": "client server because after all we use cache client to connect",
    "start": "1245039",
    "end": "1250159"
  },
  {
    "text": "to the cache server so it can be any programming language and there is some kind of isolation",
    "start": "1250159",
    "end": "1257120"
  },
  {
    "text": "between application and the cache which may be good enough or maybe not good enough it's on the container level",
    "start": "1257120",
    "end": "1264799"
  },
  {
    "text": "how it looks like in the in the code so again sticking to the spring example",
    "start": "1266240",
    "end": "1272159"
  },
  {
    "text": "cache manager we specify the static configuration for localhost but you know it's not static after all",
    "start": "1272159",
    "end": "1279440"
  },
  {
    "text": "because we know that the whole system is dynamic we just know that cache server is run on the localhost in the same kubernetes spot",
    "start": "1279440",
    "end": "1288320"
  },
  {
    "text": "how the kubernetes configuration looks like it we just run two containers in the same in the",
    "start": "1289360",
    "end": "1295679"
  },
  {
    "text": "same pot so we specify deployment we specify the pot template and two two separate containers the first",
    "start": "1295679",
    "end": "1303360"
  },
  {
    "text": "one is our business logic so this is your application that will this will differ from use k to use case",
    "start": "1303360",
    "end": "1309039"
  },
  {
    "text": "and the second one hazel cost is always the same as the cash server pros and cons of using sidecar",
    "start": "1309039",
    "end": "1317760"
  },
  {
    "text": "configuration is again very simple because you you you've seen that was all the configuration you had to do",
    "start": "1317760",
    "end": "1324640"
  },
  {
    "text": "it's programming language agnostic latency is low there is some isolation of data and",
    "start": "1324640",
    "end": "1330080"
  },
  {
    "text": "applications from the downsides again the management is not super flexible because",
    "start": "1330080",
    "end": "1336159"
  },
  {
    "text": "scaling up down it goes together with your application and after all the data is collocated in",
    "start": "1336159",
    "end": "1341919"
  },
  {
    "text": "the same application port which again maybe a big thing may not be a big thing dependent use k",
    "start": "1341919",
    "end": "1348159"
  },
  {
    "text": "on your use case uh it may be a big deal for you or not",
    "start": "1348159",
    "end": "1355840"
  },
  {
    "text": "the last caching pattern for for today is reverse proxy caching",
    "start": "1356880",
    "end": "1363840"
  },
  {
    "text": "and this will be something totally different because in all these patterns so far",
    "start": "1363840",
    "end": "1371520"
  },
  {
    "text": "in every pattern application was aware of the cache so it knew that such thing as a cache",
    "start": "1371520",
    "end": "1377679"
  },
  {
    "text": "exists this time we will be different we'll put cache in front of the application so this is",
    "start": "1377679",
    "end": "1385280"
  },
  {
    "text": "our diagram so request before going to the kubernetes service it goes to the cache and",
    "start": "1385280",
    "end": "1393360"
  },
  {
    "text": "if this request is found in the cache we don't even um we don't even go to the kubernetes",
    "start": "1393360",
    "end": "1399360"
  },
  {
    "text": "service or to the application just returning value from the cache only if the value if the request is not found",
    "start": "1399360",
    "end": "1405840"
  },
  {
    "text": "in the cache we go to the kubernetes service to the application and do some business logic",
    "start": "1405840",
    "end": "1414158"
  },
  {
    "text": "as of now if you would like to use reverse proxy caching nginx will be your way to go",
    "start": "1415360",
    "end": "1422799"
  },
  {
    "text": "anyway nginx is used everywhere like in kubernetes so you can uh you can tweak it with caching like",
    "start": "1422799",
    "end": "1430159"
  },
  {
    "text": "uh like this simple configuration will add http caching to your nginx",
    "start": "1430159",
    "end": "1437679"
  },
  {
    "text": "um and nginx is good you know because like the thing about nginx is it's very mature solution so you can trust",
    "start": "1437679",
    "end": "1444000"
  },
  {
    "text": "trust it you know you can implement it right now into your production system and you are",
    "start": "1444000",
    "end": "1450799"
  },
  {
    "text": "safe however nginx also has has some drawbacks",
    "start": "1450799",
    "end": "1456159"
  },
  {
    "start": "1454000",
    "end": "1454000"
  },
  {
    "text": "like uh it's only for http but that's probably fine but it's not distributed it's not heavy",
    "start": "1456159",
    "end": "1462640"
  },
  {
    "text": "highly available uh that is that is a problem",
    "start": "1462640",
    "end": "1468480"
  },
  {
    "text": "data stored to the disk it's it's like actually it's stored in memory but it can be offloaded to the",
    "start": "1468480",
    "end": "1473840"
  },
  {
    "text": "disk so it's a little different like with hazelcast you were sure that your data is in memory so it's",
    "start": "1473840",
    "end": "1479760"
  },
  {
    "text": "accessed fast in case of nginx it can be offloaded to the disk so you have to be",
    "start": "1479760",
    "end": "1484960"
  },
  {
    "text": "careful but it's nginx is a very good tool",
    "start": "1484960",
    "end": "1490080"
  },
  {
    "text": "so you can you can start using this but we can even go one step further and",
    "start": "1490080",
    "end": "1498880"
  },
  {
    "text": "connect this idea combine this idea of reverse proxy caching with a sidecar and create reverse proxy",
    "start": "1498880",
    "end": "1506880"
  },
  {
    "text": "sidecar cache and this will be the last variant for for this talk",
    "start": "1506880",
    "end": "1513279"
  },
  {
    "text": "so reverse proxy sidecar caching this works like on this diagram so request goes to",
    "start": "1513279",
    "end": "1520320"
  },
  {
    "text": "kubernetes service then it goes to this ferrari to the kubernetes spot",
    "start": "1520320",
    "end": "1526000"
  },
  {
    "text": "but this time it's not the application container that receives the request but it's some i call the reverse proxy",
    "start": "1526000",
    "end": "1533760"
  },
  {
    "text": "cache container which is an interceptor for for the requests so we inject a sidecar which is interceptor of",
    "start": "1533760",
    "end": "1541120"
  },
  {
    "text": "our of all our calls and only if it does not find cached value then it forwards the",
    "start": "1541120",
    "end": "1548799"
  },
  {
    "text": "request to the application container and needless to say they should form one",
    "start": "1548799",
    "end": "1554840"
  },
  {
    "text": "um one class caching distributed caching cluster because we still want to have",
    "start": "1554840",
    "end": "1561360"
  },
  {
    "text": "our cache distributed and this like",
    "start": "1561360",
    "end": "1570240"
  },
  {
    "text": "this whole idea like that like we put cash in front of the application and not",
    "start": "1570240",
    "end": "1576559"
  },
  {
    "text": "like the this whole idea that application is not aware of caching",
    "start": "1576559",
    "end": "1581600"
  },
  {
    "text": "it has some good sides and bad sides and we need to mention both",
    "start": "1581600",
    "end": "1589039"
  },
  {
    "text": "starting from the good side so the good side is that",
    "start": "1589039",
    "end": "1595200"
  },
  {
    "text": "you remember this diagram from from from the beginning of the presentation so we have a lot of micro services they",
    "start": "1595840",
    "end": "1602320"
  },
  {
    "text": "use each other they have versions they are different in program different they are written in different programming languages",
    "start": "1602320",
    "end": "1607919"
  },
  {
    "text": "and this is a small diagram this is generally a mess quickly your system becomes a mess",
    "start": "1607919",
    "end": "1615520"
  },
  {
    "text": "now you can look at such a diagram in your system measure this and you can look at this",
    "start": "1615520",
    "end": "1623760"
  },
  {
    "text": "and say i would i think i need to introduce caching for service to version one and service one",
    "start": "1623760",
    "end": "1631200"
  },
  {
    "text": "and you can do it in a declarative manner you don't even touch the code of the service",
    "start": "1631200",
    "end": "1636960"
  },
  {
    "text": "all you change is the configuration of your system and say i would like to inject",
    "start": "1636960",
    "end": "1642159"
  },
  {
    "text": "caching here and there and that's it that is the whole beauty of the reverse",
    "start": "1642159",
    "end": "1647440"
  },
  {
    "text": "proxy caching so how we would inject it in like kubernetes configuration",
    "start": "1647440",
    "end": "1654320"
  },
  {
    "text": "so this time like this could be a this is actually this is actually a",
    "start": "1654320",
    "end": "1659600"
  },
  {
    "text": "configuration of what we did we did a reverse proxy sidecar prototype with hazel cast and that is the",
    "start": "1659600",
    "end": "1666880"
  },
  {
    "text": "kubernetes but it is a prototype it's not something you can use on the production right now",
    "start": "1666880",
    "end": "1671919"
  },
  {
    "text": "so this this was our configuration so at the bottom we have the our application",
    "start": "1671919",
    "end": "1677440"
  },
  {
    "text": "that's clear then we have this caching interceptor the caching proxy this is the whole",
    "start": "1677440",
    "end": "1682559"
  },
  {
    "text": "thing it does it intercept the network if there is a cache value return the cache value if no",
    "start": "1682559",
    "end": "1689520"
  },
  {
    "text": "forward into the to the application but we also needed like init container",
    "start": "1689520",
    "end": "1695679"
  },
  {
    "text": "an additional internet con networking container like this container what it did it",
    "start": "1695679",
    "end": "1701520"
  },
  {
    "text": "changed the ip tables so that the any request from outside would go to the",
    "start": "1701520",
    "end": "1706640"
  },
  {
    "text": "caching proxy and any request from inside would go to the application container because otherwise it would be",
    "start": "1706640",
    "end": "1713520"
  },
  {
    "text": "application that would receive uh all the requests",
    "start": "1713520",
    "end": "1719360"
  },
  {
    "text": "now if you think about this diagram it you may say okay i already seen i've",
    "start": "1721440",
    "end": "1727360"
  },
  {
    "text": "already seen somewhere a diagonal direct diagram like this and you could be right it's very similar",
    "start": "1727360",
    "end": "1734880"
  },
  {
    "text": "to the idea of istio so the whole ideas of istio is like here we have and",
    "start": "1734880",
    "end": "1741760"
  },
  {
    "text": "some some network interceptor cycler container and it does some additional",
    "start": "1741760",
    "end": "1747120"
  },
  {
    "text": "logic and and actually that's it like",
    "start": "1747120",
    "end": "1753840"
  },
  {
    "text": "as of now there is no metro solution for reverse proxy side car caching",
    "start": "1753840",
    "end": "1759200"
  },
  {
    "start": "1759000",
    "end": "1759000"
  },
  {
    "text": "i the this was the issue like um",
    "start": "1759200",
    "end": "1764480"
  },
  {
    "text": "opened in re in envoy proxy and uh very recently this year",
    "start": "1764480",
    "end": "1772720"
  },
  {
    "text": "this issue was actually closed so the the caching",
    "start": "1772720",
    "end": "1778559"
  },
  {
    "text": "was implemented in istio and i think like when it when you finally it",
    "start": "1778559",
    "end": "1784559"
  },
  {
    "text": "gets major a little more mature easter is used everywhere uh so it's getting",
    "start": "1784559",
    "end": "1792399"
  },
  {
    "text": "more and more popular so i really believe that this with the with the adoption of istio and",
    "start": "1792399",
    "end": "1799279"
  },
  {
    "text": "this feature implemented reverse proxy sidecar caching this will be the way to go",
    "start": "1799279",
    "end": "1804720"
  },
  {
    "text": "this will be the way how we do caching in a lot of you use cases",
    "start": "1804720",
    "end": "1811278"
  },
  {
    "text": "so as of now reverse proxy sidecar caching is is is",
    "start": "1811840",
    "end": "1820159"
  },
  {
    "text": "at the face of not mature thing but i think it will become very popular",
    "start": "1820159",
    "end": "1826960"
  },
  {
    "text": "but i also mentioned like before that this idea of putting cash in front of our application",
    "start": "1826960",
    "end": "1832399"
  },
  {
    "text": "also has some bad sites so if the application is not aware of the caching",
    "start": "1832399",
    "end": "1838159"
  },
  {
    "text": "there is one thing that becomes way more difficult and if you",
    "start": "1838159",
    "end": "1844320"
  },
  {
    "text": "look on the internet anywhere on the internet what is the biggest problem with caching in general",
    "start": "1844320",
    "end": "1849919"
  },
  {
    "text": "everyone will tell you the same that is the cash invalidation meaning when to decide that my cash is",
    "start": "1849919",
    "end": "1858480"
  },
  {
    "text": "stale that i should update my cash and when your application is aware of",
    "start": "1858480",
    "end": "1864399"
  },
  {
    "text": "the caching you can use some application business logic to say okay i would like to invalidate this part of cache",
    "start": "1864399",
    "end": "1871600"
  },
  {
    "text": "however when your cache is in front of your application then you are limited to the standard http things like timeouts",
    "start": "1871600",
    "end": "1878480"
  },
  {
    "text": "it tags basically timeouts to force to invalidate the cache and this may be good enough or not good",
    "start": "1878480",
    "end": "1884960"
  },
  {
    "text": "enough for you depending on your use case but this is like something you have to think about",
    "start": "1884960",
    "end": "1891360"
  },
  {
    "start": "1891000",
    "end": "1891000"
  },
  {
    "text": "pros and cons of reverse proxy and reverse proxy sidecar caching so the biggest pros is and the reason",
    "start": "1891600",
    "end": "1898640"
  },
  {
    "text": "why you will use it is it's configuration based so you there is no need to change applications",
    "start": "1898640",
    "end": "1904159"
  },
  {
    "text": "to introduce it it's also programming agnostic is everything agnostic application does not even know about it",
    "start": "1904159",
    "end": "1911279"
  },
  {
    "text": "and it's very consistent with the microservices world kubernetes easter eggs that's where the world is going that",
    "start": "1911279",
    "end": "1917600"
  },
  {
    "text": "that's why i really trust in this in this thing from the downsides we",
    "start": "1917600",
    "end": "1922720"
  },
  {
    "text": "mentioned in validation there is no major solution yet and it's protocol based which may be",
    "start": "1922720",
    "end": "1928640"
  },
  {
    "text": "a problem for you so with this last pattern we we are almost done with",
    "start": "1928640",
    "end": "1936480"
  },
  {
    "text": "the presentation so as a short summary uh i don't want to repeat anything i said",
    "start": "1936480",
    "end": "1943600"
  },
  {
    "text": "before befo because it would be boring for you so as a summary what i",
    "start": "1943600",
    "end": "1948880"
  },
  {
    "text": "propose as a summary is a very short oversimplified decision tree",
    "start": "1948880",
    "end": "1956720"
  },
  {
    "text": "which will which can help you decide which caching solution is for me",
    "start": "1956720",
    "end": "1963440"
  },
  {
    "text": "so first thing you can ask is does my application need to be aware of",
    "start": "1963440",
    "end": "1969679"
  },
  {
    "text": "caching if no am i an early adopter if no use reverse proxy with nginx",
    "start": "1969679",
    "end": "1977440"
  },
  {
    "text": "if yes use reverse proxy sidecar with this eq implementation or use a",
    "start": "1977440",
    "end": "1982720"
  },
  {
    "text": "prototype for hazelcast if you are brave enough now if your",
    "start": "1982720",
    "end": "1988000"
  },
  {
    "text": "application needs to be aware of the caching then do i have a lot of data or some security restrictions",
    "start": "1988000",
    "end": "1994399"
  },
  {
    "text": "if no do i need to be language agnostic if no use embedded and by the",
    "start": "1994399",
    "end": "1999679"
  },
  {
    "text": "distributed cache if yes use sidecar now you have a lot of data or security restrictions",
    "start": "1999679",
    "end": "2006080"
  },
  {
    "text": "then the last question for you is is my deployment already in the cloud",
    "start": "2006080",
    "end": "2012720"
  },
  {
    "text": "do i run on aws and kubernetes on aws or or do i deploy kubernetes on my own",
    "start": "2014080",
    "end": "2020960"
  },
  {
    "text": "servers if you don't run in the cloud use client server if you run in the cloud",
    "start": "2020960",
    "end": "2026559"
  },
  {
    "text": "use cache as a service now this diagram is obviously a little",
    "start": "2026559",
    "end": "2033760"
  },
  {
    "text": "oversimplified but it gives you at least idea where to look for for the right caching solution",
    "start": "2033760",
    "end": "2041600"
  },
  {
    "text": "and as the last last slide i would like to recommend some resources so the first one is blog post",
    "start": "2041919",
    "end": "2049358"
  },
  {
    "text": "on how to configure hazelcast as a sidecar second one is this prototype i mentioned",
    "start": "2049359",
    "end": "2054878"
  },
  {
    "text": "mentioned we did for hazelcast reverse proxy sidecar caching",
    "start": "2054879",
    "end": "2060878"
  },
  {
    "text": "the third one is not related to the stock but it's very good blog post about caching in general",
    "start": "2060879",
    "end": "2068079"
  },
  {
    "text": "and the last link is a very good video talk from nginx on reverse proxy site reverse trophy",
    "start": "2068079",
    "end": "2074800"
  },
  {
    "text": "caching from nginx and with this slide i would like",
    "start": "2074800",
    "end": "2079839"
  },
  {
    "text": "to thank you a lot for listening it was a pleasure to speak here",
    "start": "2079839",
    "end": "2088398"
  }
]