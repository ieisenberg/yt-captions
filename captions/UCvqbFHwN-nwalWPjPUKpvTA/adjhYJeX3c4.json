[
  {
    "text": "myself we need can duty this is my co-founder and brother Prashant country and we're here to talk to you about",
    "start": "30",
    "end": "5790"
  },
  {
    "text": "Diffie and before we talk to you about the fee I want to ask the audience a",
    "start": "5790",
    "end": "11309"
  },
  {
    "text": "question it's a yes/no answer so if the answer is yes put your hand up November",
    "start": "11309",
    "end": "18170"
  },
  {
    "text": "2015 Twitter stock was down 5% because new",
    "start": "18170",
    "end": "24119"
  },
  {
    "text": "user signup was broken for two days and users were trying to sign-in trying to",
    "start": "24119",
    "end": "29490"
  },
  {
    "text": "get a particular handle and they just couldn't how many people remember that",
    "start": "29490",
    "end": "35390"
  },
  {
    "text": "okay so first the people who raised their hands you should put your hand",
    "start": "35390",
    "end": "41190"
  },
  {
    "text": "down because that never happened and it never happened because we caught the bug before it caught shipped into",
    "start": "41190",
    "end": "47190"
  },
  {
    "text": "production and Diffie was the tool that we we used to do that most of you didn't",
    "start": "47190",
    "end": "53579"
  },
  {
    "text": "raise your hand so good job alright so",
    "start": "53579",
    "end": "60920"
  },
  {
    "text": "as a developer if you own any back-end services your shipping new features all",
    "start": "60920",
    "end": "67260"
  },
  {
    "text": "the time right whether you follow a sprint model or some sort of a Kanban model you're always creating new",
    "start": "67260",
    "end": "74670"
  },
  {
    "text": "features and as you're creating new features in your code base your refactoring existing code to make it you",
    "start": "74670",
    "end": "82110"
  },
  {
    "text": "know make the class hierarchies more coherent and it is almost always impossible to ship a new feature without",
    "start": "82110",
    "end": "89420"
  },
  {
    "text": "modifying code that effects other features as well so you're constantly worried about hey you know with the two",
    "start": "89420",
    "end": "98189"
  },
  {
    "text": "new features that I'm shipping into production this release have I broken anything with the other 40 existing",
    "start": "98189",
    "end": "103829"
  },
  {
    "text": "features that are already out in production have I accidentally modified their behavior and if you're an SRE site",
    "start": "103829",
    "end": "113729"
  },
  {
    "text": "reliability engineer or you're a DevOps engineer then you have an even bigger problem because you don't even know what",
    "start": "113729",
    "end": "123090"
  },
  {
    "text": "the changes are that are getting shipped into production right you have this abstract docker image or a jar or an",
    "start": "123090",
    "end": "131009"
  },
  {
    "text": "artifact that you need to listen to production and you know you have all the risk and an accountability",
    "start": "131009",
    "end": "138610"
  },
  {
    "text": "without any of the understanding and authority as to you know what the change is that is being shipped out so you're",
    "start": "138610",
    "end": "144069"
  },
  {
    "text": "worried about like you know how do I make sure that the change that I'm about to roll out in production is this going",
    "start": "144069",
    "end": "149590"
  },
  {
    "text": "to cost me another three four hours to sort of revert back roll back and go",
    "start": "149590",
    "end": "156370"
  },
  {
    "text": "back to the previous version and how can I prevent that from happening in the first place altogether and you try to",
    "start": "156370",
    "end": "162910"
  },
  {
    "text": "address this using a bunch of approaches like canary so you send you know 1% of the traffic to the new code and then if",
    "start": "162910",
    "end": "169209"
  },
  {
    "text": "there aren't any exceptions you move forward and you know deploy to the whole cluster the problem is that if the",
    "start": "169209",
    "end": "177549"
  },
  {
    "text": "business logic is broken in a subtle way then there is no way for you to know you",
    "start": "177549",
    "end": "183310"
  },
  {
    "text": "know at the high level by looking at exception logs or other kinds of metrics because it's it's business logic right",
    "start": "183310",
    "end": "190480"
  },
  {
    "text": "like it's not throwing exceptions or anything and then for a lot of",
    "start": "190480",
    "end": "196180"
  },
  {
    "text": "organizations the tipping point typically happens when they have to break a legacy monolith and move into",
    "start": "196180",
    "end": "202810"
  },
  {
    "text": "microservices which is also what happened at Twitter and what we've seen at at a lot of customers happening so",
    "start": "202810",
    "end": "210430"
  },
  {
    "text": "now you have the problem that you've got this legacy monolith that has some functionality and you know it's horrible",
    "start": "210430",
    "end": "216370"
  },
  {
    "text": "you hate it but it works right and you want to move into a microservices architecture but how do you prove that",
    "start": "216370",
    "end": "223269"
  },
  {
    "text": "the microservices implementation is equivalent to the monolith and how can you provide those guarantees you know",
    "start": "223269",
    "end": "230590"
  },
  {
    "text": "before you remove all of your traffic over so you know these are sort of",
    "start": "230590",
    "end": "236650"
  },
  {
    "text": "situations when the risk ends up being extremely high for companies and they need some sort of specialized mechanisms",
    "start": "236650",
    "end": "243280"
  },
  {
    "text": "to get large amounts of coverage and guarantees to make sure that things won't break when they make these radical",
    "start": "243280",
    "end": "249880"
  },
  {
    "text": "changes to their environments so with that I'll ask Prashant my brother to",
    "start": "249880",
    "end": "256799"
  },
  {
    "text": "take presentation forward so at the end of the day so far what we're trying to",
    "start": "256799",
    "end": "262450"
  },
  {
    "text": "get to is gain confidence over the coaching that we're shipping how do we gain confidence over the code changes and",
    "start": "262450",
    "end": "268880"
  },
  {
    "text": "then there are certain standards some standard practices that developers have sort of developed over time the basic",
    "start": "268880",
    "end": "276140"
  },
  {
    "text": "tr0 approaches let's say we write a function or a method to a class we end",
    "start": "276140",
    "end": "282350"
  },
  {
    "text": "up writing unit tests for it so let's take this example and let's make the",
    "start": "282350",
    "end": "287780"
  },
  {
    "text": "assumption that we have five independent code paths to a function that we've just written to get 100% coverage we have to",
    "start": "287780",
    "end": "294050"
  },
  {
    "text": "write five tests a single test gives us 20% coverage developers typically or",
    "start": "294050",
    "end": "299870"
  },
  {
    "text": "whoever's writing the test they're good at this level getting hundred percent coverage is relatively easy the next",
    "start": "299870",
    "end": "307370"
  },
  {
    "text": "step the next year is within a service boundary the the component test boundary",
    "start": "307370",
    "end": "314690"
  },
  {
    "text": "so if we have five such functions or starting six such independent functions",
    "start": "314690",
    "end": "320690"
  },
  {
    "text": "each function having five independent code paths all of a sudden the the problem scale just expanded from five",
    "start": "320690",
    "end": "327110"
  },
  {
    "text": "test cases to 15,000 test cases to get hundred percent coverage a single test",
    "start": "327110",
    "end": "332330"
  },
  {
    "text": "is just giving you point zero six percent coverage this is where things start to break for us not a lot of",
    "start": "332330",
    "end": "339950"
  },
  {
    "text": "people are writing 15,000 test cases for a single service and let's take it a step further ah at the integration test",
    "start": "339950",
    "end": "347750"
  },
  {
    "text": "layer when you're looking at the request the the request path where you're going",
    "start": "347750",
    "end": "353360"
  },
  {
    "text": "through four such services each service having six methods to go through each",
    "start": "353360",
    "end": "358610"
  },
  {
    "text": "method having five independent code paths the problem just explodes 60",
    "start": "358610",
    "end": "364660"
  },
  {
    "text": "quadrillion tests to write to get one percent coverage even if you put a QA",
    "start": "364660",
    "end": "369890"
  },
  {
    "text": "army behind to write tests the this is just not scalable whatsoever a single",
    "start": "369890",
    "end": "376220"
  },
  {
    "text": "test is barely giving you any coverage so hopefully you were already convinced if not these slides may have convinced",
    "start": "376220",
    "end": "381350"
  },
  {
    "text": "you that the cyclomatic complexity grows exponentially as you're you know adding",
    "start": "381350",
    "end": "387110"
  },
  {
    "text": "more complexity to the system so how do you address this problem because you",
    "start": "387110",
    "end": "392180"
  },
  {
    "text": "cannot solve it manually this is why if he comes in so diffie's",
    "start": "392180",
    "end": "398090"
  },
  {
    "text": "goal here to get more coverage for free the key here is for free but to understand the",
    "start": "398090",
    "end": "404210"
  },
  {
    "text": "for free part part we first have to understand where is the cost now if we look at the anatomy of a test a test is",
    "start": "404210",
    "end": "411230"
  },
  {
    "text": "expensive because of two variables because of two reasons the input because you have to think about what are the",
    "start": "411230",
    "end": "417260"
  },
  {
    "text": "different inputs that would trigger the different code paths and how would each one of those triggers behave their",
    "start": "417260",
    "end": "423890"
  },
  {
    "text": "assertions these are three components the input and the assertions so if we could somehow get free input and free",
    "start": "423890",
    "end": "431150"
  },
  {
    "text": "assertions maybe we can get more coverage so with Diffie we address the",
    "start": "431150",
    "end": "436310"
  },
  {
    "text": "free input side by just looking at production traffic your production users are actually exercising all these code",
    "start": "436310",
    "end": "442820"
  },
  {
    "text": "paths for you so if you were to replay that live production traffic in a safe",
    "start": "442820",
    "end": "447830"
  },
  {
    "text": "separate environment you get the free inputs now for the free assertions if",
    "start": "447830",
    "end": "453920"
  },
  {
    "text": "you replay the production as your known good code let's make the assumption that",
    "start": "453920",
    "end": "460370"
  },
  {
    "text": "production right now has the known good code and the delta you're trying to ship is the change you want to check if you",
    "start": "460370",
    "end": "467240"
  },
  {
    "text": "look at these two responses and compare them together that becomes your assertion did it the behavior change or",
    "start": "467240",
    "end": "474050"
  },
  {
    "text": "not if the behavior did not change what your shipping is correct it's solid if the behavior did change you need some",
    "start": "474050",
    "end": "480050"
  },
  {
    "text": "sort of a manual check that says this change is a required change it's a wanted change it's not an unwanted",
    "start": "480050",
    "end": "486710"
  },
  {
    "text": "change unwanted changes are basically bugs so with these two simple",
    "start": "486710",
    "end": "492200"
  },
  {
    "text": "comparisons there's still one other problem that lies in front of us which is what these two responses contain some",
    "start": "492200",
    "end": "499070"
  },
  {
    "text": "packet information that are noisy in nature what if there's some undetermined istic behavior within the application",
    "start": "499070",
    "end": "505160"
  },
  {
    "text": "and that noise will always bubble up as bug as unwanted change some examples are",
    "start": "505160",
    "end": "511130"
  },
  {
    "text": "survey generated time stamps if your response packet has a time stamp that's being generated in production and",
    "start": "511130",
    "end": "517159"
  },
  {
    "text": "different times time being generated in the gnome change code those two",
    "start": "517160",
    "end": "523460"
  },
  {
    "text": "differences will show up but that's just noise we don't want to put our focus there is that's not your business logics",
    "start": "523460",
    "end": "529010"
  },
  {
    "text": "mistake similar same goes with generators or downstream",
    "start": "529010",
    "end": "534579"
  },
  {
    "text": "non-deterministic behavior or any race condition so let's take a look at how",
    "start": "534579",
    "end": "539829"
  },
  {
    "text": "defeat solves that by first taking a deeper dive into the defeat apology and I'll let my brother come back in for",
    "start": "539829",
    "end": "546249"
  },
  {
    "text": "describing the defeat of the defeat apology so as we source traffic from our",
    "start": "546249",
    "end": "552519"
  },
  {
    "text": "production cluster the production cluster here remains undisturbed right",
    "start": "552519",
    "end": "558179"
  },
  {
    "text": "Diffie is not in the critical path tiffie is in a separate staging environment and all the analysis that if",
    "start": "558179",
    "end": "564009"
  },
  {
    "text": "he is doing is in an isolated staging environment that has nothing to do with production what we are doing with",
    "start": "564009",
    "end": "569410"
  },
  {
    "text": "production is that were instrumenting your production cluster to sample some percentage of traffic so that we can use",
    "start": "569410",
    "end": "575410"
  },
  {
    "text": "it to do the kind of comparison that Prashant just described right so you're getting a live stream of production",
    "start": "575410",
    "end": "581290"
  },
  {
    "text": "traffic to Diffie and then Diffie multicast every single request that it receives to three instances of your code",
    "start": "581290",
    "end": "588999"
  },
  {
    "text": "and let's talk about this a little bit so the first instance at the top here",
    "start": "588999",
    "end": "594040"
  },
  {
    "text": "this is the candidate this is the code that needs to be tested and you know",
    "start": "594040",
    "end": "599379"
  },
  {
    "text": "it's a release candidate that might be deployed into production the primary and secondary here are instances of code",
    "start": "599379",
    "end": "607240"
  },
  {
    "text": "that is already deployed in production right it's the same code that's deployed in production but it's deployed on two",
    "start": "607240",
    "end": "614290"
  },
  {
    "text": "instances here and when we get the responses back from candidate and",
    "start": "614290",
    "end": "619629"
  },
  {
    "text": "primary we compare those two and of course like these are the raw differences that we're getting and and",
    "start": "619629",
    "end": "624970"
  },
  {
    "text": "they will have a lot of noise in them right so how do we cancel the noise out well we compare the old code to itself",
    "start": "624970",
    "end": "632470"
  },
  {
    "text": "so the code that's in production we're comparing that code to itself by comparing the responses that are coming",
    "start": "632470",
    "end": "638439"
  },
  {
    "text": "back from primary and secondary here and by definition any differences over a",
    "start": "638439",
    "end": "643540"
  },
  {
    "text": "large volume of requests that surface here are non deterministic noise right",
    "start": "643540",
    "end": "648939"
  },
  {
    "text": "if the old code can't agree with itself on some aspects of the response then",
    "start": "648939",
    "end": "654490"
  },
  {
    "text": "it's okay for the new code to not be able to agree with the old code on those things right and so we subtract all of",
    "start": "654490",
    "end": "662290"
  },
  {
    "text": "that noise out we boil it down to a filtered set of differences that are actionable for the",
    "start": "662290",
    "end": "668980"
  },
  {
    "text": "developer right so let's do a quick demo to to see what this actually looks like",
    "start": "668980",
    "end": "676360"
  },
  {
    "text": "and get a better feel for it so keep this this image in your head we",
    "start": "676360",
    "end": "685330"
  },
  {
    "text": "have a candidate primary and secondary that we're going to deploy we also have a diff instance that we're going to",
    "start": "685330",
    "end": "691420"
  },
  {
    "text": "deploy and then we're going to send some traffic to it and then we're going to look at the results we're going to look at the raw differences and we're going",
    "start": "691420",
    "end": "697930"
  },
  {
    "text": "to look at the filtered differences so let's run this",
    "start": "697930",
    "end": "704759"
  },
  {
    "text": "by the way if you download the project from github which I encourage all of you",
    "start": "712620",
    "end": "717810"
  },
  {
    "text": "to do and play around with Divi this is exactly what you need to do to run this particular example this is something",
    "start": "717810",
    "end": "724410"
  },
  {
    "text": "that we ship with the code and so if you decide to play around with the fee if",
    "start": "724410",
    "end": "729510"
  },
  {
    "text": "you want to make any contributions to do fee this example is a great way for you",
    "start": "729510",
    "end": "734640"
  },
  {
    "text": "to see the results of your changes and also run defy out of the box",
    "start": "734640",
    "end": "739680"
  },
  {
    "text": "so now des filles deployed all the primary secondary and candidate",
    "start": "739680",
    "end": "744960"
  },
  {
    "text": "instances are deployed and we've also sent some traffic to the defeat instance",
    "start": "744960",
    "end": "750450"
  },
  {
    "text": "and let's see so this is an endpoint",
    "start": "750450",
    "end": "756990"
  },
  {
    "text": "whose name very creatively came up with as JSON where we sent a bunch of",
    "start": "756990",
    "end": "762090"
  },
  {
    "text": "requests we sent a hundred requests and we're seeing some differences here so these differences are aggregated at",
    "start": "762090",
    "end": "769260"
  },
  {
    "text": "every node in your schema right so the cardinality of things that you would see",
    "start": "769260",
    "end": "775230"
  },
  {
    "text": "in this UI is bounded by the size of your schema right it doesn't like if you",
    "start": "775230",
    "end": "782010"
  },
  {
    "text": "send 10,000 requests this wouldn't change right because this is an aggregate view so there's obviously",
    "start": "782010",
    "end": "788370"
  },
  {
    "text": "something weird going on here because you know the expected value for",
    "start": "788370",
    "end": "793530"
  },
  {
    "text": "this particular field was all lowercase but the actual value that we received",
    "start": "793530",
    "end": "799050"
  },
  {
    "text": "back was all uppercase so obviously there's something weird happening here there's another thing that's happening",
    "start": "799050",
    "end": "805020"
  },
  {
    "text": "here which is the timestamps are never agreeing with each other right so those",
    "start": "805020",
    "end": "810030"
  },
  {
    "text": "are also potential regressions that are being reported now this is the raw",
    "start": "810030",
    "end": "815460"
  },
  {
    "text": "differences that we described earlier so now let's turn on the noise cancellation part so when we turned the noise",
    "start": "815460",
    "end": "821910"
  },
  {
    "text": "cancellation part on they feel smart enough to figure out that hey these timestamps that I just create out these",
    "start": "821910",
    "end": "828120"
  },
  {
    "text": "are okay to ignore and I don't need to worry about them but these named things that we're looking at there's something",
    "start": "828120",
    "end": "834840"
  },
  {
    "text": "weird going on here so you know the developer better look at this or you know the QA better look at it and in",
    "start": "834840",
    "end": "841650"
  },
  {
    "text": "order to make this more actionable you know we want to give concrete ampuls to the developer right so you can",
    "start": "841650",
    "end": "848180"
  },
  {
    "text": "pick any of these examples here and you know we can get the full-blown requests",
    "start": "848180",
    "end": "855350"
  },
  {
    "text": "that caused this behavior to trigger so this was a get request with this path",
    "start": "855350",
    "end": "861440"
  },
  {
    "text": "that caused this regression to appear and this is the primary response which",
    "start": "861440",
    "end": "868130"
  },
  {
    "text": "is the expected response that that we received from the primary instance and this is the full-blown response that we",
    "start": "868130",
    "end": "875540"
  },
  {
    "text": "received back from the candidate right so this kind of insight you know a developer is able to look at this and",
    "start": "875540",
    "end": "881750"
  },
  {
    "text": "say hey you know I made this code change where you know I changed the to lowercase bit to to uppercase and I know",
    "start": "881750",
    "end": "888019"
  },
  {
    "text": "exactly where to go in and fix it and they can do that right and if one example isn't enough they can look at",
    "start": "888019",
    "end": "894829"
  },
  {
    "text": "other examples until they're convinced that you know there is a pattern here",
    "start": "894829",
    "end": "900550"
  },
  {
    "text": "so this is you know Diffie at a high",
    "start": "900550",
    "end": "905630"
  },
  {
    "text": "level and let's move back to the presentation here so the first thing",
    "start": "905630",
    "end": "914029"
  },
  {
    "text": "that people start working on as soon as they tried if he out is automating it",
    "start": "914029",
    "end": "920690"
  },
  {
    "text": "right and you know when we saw this pattern happening we noticed that this",
    "start": "920690",
    "end": "925940"
  },
  {
    "text": "was a real need so we ended up supporting this use case where you know you can automatically deploy whatever",
    "start": "925940",
    "end": "933680"
  },
  {
    "text": "the last production tag was to primary and secondary and then the latest",
    "start": "933680",
    "end": "939589"
  },
  {
    "text": "whatever is in master as candidate and run this as an ongoing comparison right",
    "start": "939589",
    "end": "945889"
  },
  {
    "text": "at whatever cadence you want and the report that if he sends out is typically",
    "start": "945889",
    "end": "951290"
  },
  {
    "text": "of the form that hey you know we did this comparison and if master were",
    "start": "951290",
    "end": "956360"
  },
  {
    "text": "deployed in production for the last 30 minutes or for the last hour here's how",
    "start": "956360",
    "end": "961550"
  },
  {
    "text": "the world would have been different right so it's giving developers the ability to see the future right master",
    "start": "961550",
    "end": "968180"
  },
  {
    "text": "is going to be deployed either you know in the next release whichever whenever it happens it could be you know next",
    "start": "968180",
    "end": "973910"
  },
  {
    "text": "week it could be tomorrow it could be in a few hours but if he allows the",
    "start": "973910",
    "end": "979160"
  },
  {
    "text": "purrs to see the future and be able to say here's how the world would change when this release actually happens",
    "start": "979160",
    "end": "984680"
  },
  {
    "text": "without the release ever happening right so if in these email reports you see any",
    "start": "984680",
    "end": "989899"
  },
  {
    "text": "of the regressions after later the reports include all the regressions after noise cancellation has been",
    "start": "989899",
    "end": "995660"
  },
  {
    "text": "applied then you have the opportunity go to go fix things before they make their",
    "start": "995660",
    "end": "1001000"
  },
  {
    "text": "way into production and in sort of CI CD integrations that we've done you know",
    "start": "1001000",
    "end": "1007689"
  },
  {
    "text": "and our customers have done what we've seen is that you know when they have",
    "start": "1007689",
    "end": "1013180"
  },
  {
    "text": "this ability they're able to automatically promote the artifact if he doesn't find any regressions so in the",
    "start": "1013180",
    "end": "1020230"
  },
  {
    "text": "CI CD pipeline there's a diffi step where if you don't find any regressions if you automatically promotes the",
    "start": "1020230",
    "end": "1026949"
  },
  {
    "text": "artifact and if there are any regressions found then and you still",
    "start": "1026949",
    "end": "1032199"
  },
  {
    "text": "want to promote the artifact then a human has to override and sign off on it right so that in that case like",
    "start": "1032199",
    "end": "1039130"
  },
  {
    "text": "typically either an engineering manager or a product manager or a tech lead will come in and sign off on the release and",
    "start": "1039130",
    "end": "1045909"
  },
  {
    "text": "say that I know what I'm doing I really want this change to go out into production it's okay to ship this regression out so our story so far is",
    "start": "1045909",
    "end": "1056020"
  },
  {
    "text": "the following rate I first developed this for personal use when I was working",
    "start": "1056020",
    "end": "1062260"
  },
  {
    "text": "at Twitter and we were trying to move away from a Ruby on Rails monolith to a",
    "start": "1062260",
    "end": "1067659"
  },
  {
    "text": "microservices architecture and the bug that I talked about earlier was a bug",
    "start": "1067659",
    "end": "1073929"
  },
  {
    "text": "that I wrote myself and I was able to catch it before it got shipped into production and what it did for my team",
    "start": "1073929",
    "end": "1081880"
  },
  {
    "text": "was that it allowed me to ship changes a lot faster because a lot of other people",
    "start": "1081880",
    "end": "1088210"
  },
  {
    "text": "on my team were spending a lot of time just doing testing manually right because the cost of writing all these",
    "start": "1088210",
    "end": "1094539"
  },
  {
    "text": "tests was so huge they just wanted to you know try a few requests out and staging and then they would get into",
    "start": "1094539",
    "end": "1100570"
  },
  {
    "text": "this loop off hey did you try that use case hey did you try that use case and that ended up slowing them down to the",
    "start": "1100570",
    "end": "1106090"
  },
  {
    "text": "point where it took only two days to write the code but then two weeks to actually ship it out into production because they were stuck doing testing",
    "start": "1106090",
    "end": "1112640"
  },
  {
    "text": "so in this sort of situation when they saw me shipping code you know basically",
    "start": "1112640",
    "end": "1117890"
  },
  {
    "text": "within two days they also wanted to use it and that led to the request that hey",
    "start": "1117890",
    "end": "1123950"
  },
  {
    "text": "you know it works for your service at Twitter we were using thrift services for our binary service interface so",
    "start": "1123950",
    "end": "1133070"
  },
  {
    "text": "other thrift services also wanted to use this so we ended up making it generic",
    "start": "1133070",
    "end": "1138260"
  },
  {
    "text": "for any thrift service in a first iteration then HTTP service owners came",
    "start": "1138260",
    "end": "1144950"
  },
  {
    "text": "along and said that hey you know we want to use this for HTTP services too so we ended up adding HTTP support to it and",
    "start": "1144950",
    "end": "1150789"
  },
  {
    "text": "at that point we realized that we'd build something that was you know generally useful so we ended up open",
    "start": "1150789",
    "end": "1157220"
  },
  {
    "text": "sourcing it and since then you know there's been tremendous traction across the industry you know other large",
    "start": "1157220",
    "end": "1163909"
  },
  {
    "text": "companies have also started using it and they started reaching out to us for",
    "start": "1163909",
    "end": "1169309"
  },
  {
    "text": "support and pretty soon I found that you know if I wanted to do justice to two",
    "start": "1169309",
    "end": "1175580"
  },
  {
    "text": "Diffie I had to now spin this out of Twitter and work on it full-time and so",
    "start": "1175580",
    "end": "1181669"
  },
  {
    "text": "that led to the formation of our company around a fee so Prashant and I have been working on this for the past few months",
    "start": "1181669",
    "end": "1187520"
  },
  {
    "text": "full-time gathering requirements from users and focusing on the open-source version as well as for users who don't",
    "start": "1187520",
    "end": "1194780"
  },
  {
    "text": "want to run this on premise offering a hosted solution so if you didn't catch",
    "start": "1194780",
    "end": "1201740"
  },
  {
    "text": "anything else from this presentation one thing to remember is that go to github",
    "start": "1201740",
    "end": "1207860"
  },
  {
    "text": "and check out you know open Diffie slash Diffie and you know give us some stars",
    "start": "1207860",
    "end": "1213230"
  },
  {
    "text": "show us some love and we'd be more than happy to work with you if you have any",
    "start": "1213230",
    "end": "1218630"
  },
  {
    "text": "questions take it out for a spin if you liked it give us feedback if you don't like it you know your feedback is even",
    "start": "1218630",
    "end": "1224570"
  },
  {
    "text": "more valuable to us and this is that twitter handle where you can contact us",
    "start": "1224570",
    "end": "1229820"
  },
  {
    "text": "and you can always reach out to us for any kind of support help feature request anything you need at info at the fee dot",
    "start": "1229820",
    "end": "1236960"
  },
  {
    "text": "a I so thank you so much for your time at this point we'd like to open it up for questions thank you",
    "start": "1236960",
    "end": "1242950"
  },
  {
    "text": "I was wondering a little bit about",
    "start": "1242950",
    "end": "1253920"
  },
  {
    "text": "anonymizing production data because part of complexity with production non",
    "start": "1253920",
    "end": "1259510"
  },
  {
    "text": "production is it's sensitive and you can't you know ship it any way do you",
    "start": "1259510",
    "end": "1264940"
  },
  {
    "text": "have any way to deal with sensitive data and still making this work that's a",
    "start": "1264940",
    "end": "1271900"
  },
  {
    "text": "great question almost every single large company that is already using different production is",
    "start": "1271900",
    "end": "1277420"
  },
  {
    "text": "asking us so this because it's a compliance requirement that they run into from their security teams like we",
    "start": "1277420",
    "end": "1284470"
  },
  {
    "text": "don't see any of the data in the hosted solution right well because all we're doing is we're looking at aggregates but",
    "start": "1284470",
    "end": "1290950"
  },
  {
    "text": "the developers have access to all the examples that that we showed you right so they can see that a question even",
    "start": "1290950",
    "end": "1296950"
  },
  {
    "text": "though the requests are randomly sample they can see those things and they want us to provide a feature around PII",
    "start": "1296950",
    "end": "1303340"
  },
  {
    "text": "scrubbing right so that is something that is in the works that you know we are planning on releasing which will",
    "start": "1303340",
    "end": "1309760"
  },
  {
    "text": "allow users to specify criterias for you know which parts of their schema need to",
    "start": "1309760",
    "end": "1315400"
  },
  {
    "text": "be obfuscated so sensitive PII data doesn't get exposed to even their own",
    "start": "1315400",
    "end": "1320950"
  },
  {
    "text": "developers so that's definitely something that's on our radar that were working on sounds good thank you hi my",
    "start": "1320950",
    "end": "1334030"
  },
  {
    "text": "question is this the application needs to be version thomas api to able to run",
    "start": "1334030",
    "end": "1341410"
  },
  {
    "text": "the release candidate and the primary candidate at the same time on the same system",
    "start": "1341410",
    "end": "1346660"
  },
  {
    "text": "so we actually don't require the api to",
    "start": "1346660",
    "end": "1351700"
  },
  {
    "text": "be versioned and the way we are able to do this is by actually having two",
    "start": "1351700",
    "end": "1356860"
  },
  {
    "text": "separate network addresses for the different instances of the code that get deployed right so the API version can be",
    "start": "1356860",
    "end": "1364480"
  },
  {
    "text": "identical right and the code can be different and because the request is",
    "start": "1364480",
    "end": "1370030"
  },
  {
    "text": "being multicast we know which response is coming from which version of the code",
    "start": "1370030",
    "end": "1375090"
  },
  {
    "text": "so the versioning doesn't need to be part of the API we are able to deal with",
    "start": "1375090",
    "end": "1380249"
  },
  {
    "text": "that just by having isolation at the network level okay dearly this should be completely disconnected with your logic",
    "start": "1380249",
    "end": "1386940"
  },
  {
    "text": "itself the business logic and the logic that you've set so that we're just multi casting and looking at the replies by",
    "start": "1386940",
    "end": "1394100"
  },
  {
    "text": "other questions so how do you handle the",
    "start": "1394100",
    "end": "1400620"
  },
  {
    "text": "state differences like when you're tested the state could be different than the service right so how how do you",
    "start": "1400620",
    "end": "1407879"
  },
  {
    "text": "actually hate that flu testing yeah so that's that's an interesting one",
    "start": "1407879",
    "end": "1414889"
  },
  {
    "text": "sometimes you run into that issue if your primary and secondary instances are",
    "start": "1414889",
    "end": "1420840"
  },
  {
    "text": "not deployed in staging and you're actually using live production instances because the latency characteristics can",
    "start": "1420840",
    "end": "1427110"
  },
  {
    "text": "be very different in production versus in staging right so as you pointed out data could have changed between you know",
    "start": "1427110",
    "end": "1433049"
  },
  {
    "text": "the responses coming back from production and you're just you know requests going into staging right so that's cue in the the time can cause",
    "start": "1433049",
    "end": "1440309"
  },
  {
    "text": "data to change and what do we do to eliminate that so what we do is we actually deploy primary and secondary so",
    "start": "1440309",
    "end": "1448169"
  },
  {
    "text": "the production code is deployed in staging and we make the environment symmetric across the new code and the",
    "start": "1448169",
    "end": "1455100"
  },
  {
    "text": "old code so all the downstream view of the environment that they're seeing is identical so that basically eliminates",
    "start": "1455100",
    "end": "1461759"
  },
  {
    "text": "all the you know requests Q times Q that that we have and if there is anything",
    "start": "1461759",
    "end": "1467429"
  },
  {
    "text": "left over in terms of randomness then that gets eliminated through the noise cancellation because the downstream data",
    "start": "1467429",
    "end": "1473610"
  },
  {
    "text": "changing is also a kind of noise right and because the environment is symmetric",
    "start": "1473610",
    "end": "1478649"
  },
  {
    "text": "across all three instances when you see differences in you know in the view of",
    "start": "1478649",
    "end": "1483869"
  },
  {
    "text": "data across your candidate code and your primary code you will also see over a large enough number of samples the same",
    "start": "1483869",
    "end": "1491100"
  },
  {
    "text": "difference across the views that are seen between the two versions of the old code itself so primary and secondary",
    "start": "1491100",
    "end": "1497129"
  },
  {
    "text": "will also have sometimes different views of the same underlying data right so",
    "start": "1497129",
    "end": "1503039"
  },
  {
    "text": "then noise cancellation is able to take care of that and automatically eliminate those those regressions",
    "start": "1503039",
    "end": "1509390"
  },
  {
    "text": "great thank you another question yeah I really like your your approach have you",
    "start": "1509390",
    "end": "1515220"
  },
  {
    "text": "ever thought about integrated with Apache kafka so I think it could play",
    "start": "1515220",
    "end": "1520440"
  },
  {
    "text": "very well with the event sourcing where you could even go further and not just dump in some let's say recorded input",
    "start": "1520440",
    "end": "1527280"
  },
  {
    "text": "traffic but you could go back to the the beginning of time of your application or",
    "start": "1527280",
    "end": "1532710"
  },
  {
    "text": "of your whole services landscape and just replay everything through it yeah",
    "start": "1532710",
    "end": "1537840"
  },
  {
    "text": "get even more insights absolutely great observation we have a few friends at",
    "start": "1537840",
    "end": "1544470"
  },
  {
    "text": "confluent and some customers who actually are using Kafka very",
    "start": "1544470",
    "end": "1550200"
  },
  {
    "text": "aggressively so we ended up supporting Kafka as well for these customers so",
    "start": "1550200",
    "end": "1555210"
  },
  {
    "text": "they're basically logging requests into a Kafka stream and then replaying traffic from the Kafka stream so there",
    "start": "1555210",
    "end": "1560970"
  },
  {
    "text": "is there exists a version of this which supports Kafka we piloted it with one customer so the the reason why we we",
    "start": "1560970",
    "end": "1569970"
  },
  {
    "text": "didn't put it up here though is that like you know we don't want to be opinionated about like what you know",
    "start": "1569970",
    "end": "1577700"
  },
  {
    "text": "infrastructure choices our customers should make so when a customer already has Kafka in their environment you know",
    "start": "1577700",
    "end": "1585330"
  },
  {
    "text": "we're happy to support it but if even if they don't have Kafka you know the live request pattern that we have where we",
    "start": "1585330",
    "end": "1591390"
  },
  {
    "text": "just proxy like through instrumentation into the production cluster we're able to get live traffic that doesn't require",
    "start": "1591390",
    "end": "1597810"
  },
  {
    "text": "any Kafka specific infrastructure right so that works broadly across the board for for pretty much everyone but for",
    "start": "1597810",
    "end": "1604620"
  },
  {
    "text": "customers who are comfortable owning Kafka infrastructure we definitely support that you know as a way for them",
    "start": "1604620",
    "end": "1611100"
  },
  {
    "text": "to consume it because one of the things that you're able to do then that's that's sort of beautiful about Kafka is",
    "start": "1611100",
    "end": "1616590"
  },
  {
    "text": "that you can have multiple subscribers right and so when an engineering team needs to source like read the same",
    "start": "1616590",
    "end": "1624330"
  },
  {
    "text": "stream from production right there's only one stream to which the production cluster is writing but then everybody",
    "start": "1624330",
    "end": "1630060"
  },
  {
    "text": "can spin up their own diffidence every engineer on the team can spin up their own deafie instance to read from that",
    "start": "1630060",
    "end": "1635190"
  },
  {
    "text": "stream and replay that traffic so that that use case automatically gets supported so yeah we",
    "start": "1635190",
    "end": "1641690"
  },
  {
    "text": "support Kafka for users who have Kafka in their infrastructure it's this pluggable so I can just write some code",
    "start": "1641690",
    "end": "1648019"
  },
  {
    "text": "to let's say integrate pops up or some other maybe a proprietary message broker",
    "start": "1648019",
    "end": "1655639"
  },
  {
    "text": "I have if you have a proprietary message broker we can have a conversation about",
    "start": "1655639",
    "end": "1662149"
  },
  {
    "text": "how to do that but yes the code is definitely extensible enough where at some layer it's possible to plug it in",
    "start": "1662149",
    "end": "1668980"
  },
  {
    "text": "but it's we we you would need to talk to",
    "start": "1668980",
    "end": "1674629"
  },
  {
    "text": "us a little bit or you're welcome to dive into the code and and and do it yourself but it's definitely possible to",
    "start": "1674629",
    "end": "1680000"
  },
  {
    "text": "do that Thanks ok thank you very much",
    "start": "1680000",
    "end": "1691070"
  },
  {
    "text": "was really good I have a question about kind of you are recording production",
    "start": "1691070",
    "end": "1697370"
  },
  {
    "text": "requests and kind of reproducing it on your staging environment what if that production request doesn't actually make",
    "start": "1697370",
    "end": "1704870"
  },
  {
    "text": "sense in the staging environment because you have different data for example you make a request to get user number one",
    "start": "1704870",
    "end": "1711710"
  },
  {
    "text": "two three and that doesn't exist in staging how do you make it consistent how do you deal with that right so what",
    "start": "1711710",
    "end": "1718399"
  },
  {
    "text": "most of our customers do is that you know the services themselves are stateless and then for any kind of state",
    "start": "1718399",
    "end": "1724549"
  },
  {
    "text": "that they need to read they're accessing underlying data stores right so what they typically end up doing is they end",
    "start": "1724549",
    "end": "1730279"
  },
  {
    "text": "up using production data stores and have their staging instances talk to the production data stores so in because of",
    "start": "1730279",
    "end": "1737659"
  },
  {
    "text": "that you know the the request makes sense in staging because staging is also pointing back to production downstream",
    "start": "1737659",
    "end": "1743990"
  },
  {
    "text": "the only sort of diversion from production you're taking is you're sort of going out into staging so that the",
    "start": "1743990",
    "end": "1751220"
  },
  {
    "text": "request can be replayed on these three instances that are going to be used for your defy an ALICE Asst but then it",
    "start": "1751220",
    "end": "1758000"
  },
  {
    "text": "comes back into production and and reads from production data stores",
    "start": "1758000",
    "end": "1763299"
  },
  {
    "text": "hi are you familiar with a little bit different approach that github as a",
    "start": "1767470",
    "end": "1772760"
  },
  {
    "text": "company uses for the same reason it's a instrumenting source code with",
    "start": "1772760",
    "end": "1778640"
  },
  {
    "text": "library named scientists sorry no they are instrumenting source code and you",
    "start": "1778640",
    "end": "1785780"
  },
  {
    "text": "are using it like ready to deploy a defect so in the approach developers are",
    "start": "1785780",
    "end": "1794300"
  },
  {
    "text": "responsible for comparing different code passes between them and in your approach",
    "start": "1794300",
    "end": "1800420"
  },
  {
    "text": "it's more like operational guys are responsible for it and then they will",
    "start": "1800420",
    "end": "1805730"
  },
  {
    "text": "need to convince developers that something is going wrong do you have",
    "start": "1805730",
    "end": "1812110"
  },
  {
    "text": "maybe like idea why your approach is better because as soon as I know it's",
    "start": "1812110",
    "end": "1820040"
  },
  {
    "text": "better to detect potential problems left side yeah as well as possible yeah yeah",
    "start": "1820040",
    "end": "1826220"
  },
  {
    "text": "yeah so we definitely believe in being as far left as possible and I don't mean",
    "start": "1826220",
    "end": "1831830"
  },
  {
    "text": "that in a political sense I mean that in in you know the sense that you're talking about but what we're seeing is",
    "start": "1831830",
    "end": "1838370"
  },
  {
    "text": "that you know initially it was the sres who were you know big fans of this tool they really wanted to use it and you",
    "start": "1838370",
    "end": "1845420"
  },
  {
    "text": "know because it gave them a lot of confidence for release over release like what's going on we also noticed then",
    "start": "1845420",
    "end": "1851150"
  },
  {
    "text": "that you know any people any teams that had embedded QA engineers that were responsible for doing a lot of",
    "start": "1851150",
    "end": "1857420"
  },
  {
    "text": "regression testing manually then started using defeat to do this kind of thing and then give feedback to developers and",
    "start": "1857420",
    "end": "1863240"
  },
  {
    "text": "then what we saw was that developers started asking each other for defeat links in their code reviews that hey can",
    "start": "1863240",
    "end": "1869780"
  },
  {
    "text": "I see what this difference actually means in terms of you know the change in production can you run a diff instance",
    "start": "1869780",
    "end": "1875540"
  },
  {
    "text": "and paste it in the code review right so it's already making its way left all the way to the developer where developers",
    "start": "1875540",
    "end": "1881270"
  },
  {
    "text": "are you know comparing their unmerged branches to master to show what the difference looks like because people",
    "start": "1881270",
    "end": "1886850"
  },
  {
    "text": "want to see what this difference means so we definitely believe in in the same view that you describe that that github",
    "start": "1886850",
    "end": "1893570"
  },
  {
    "text": "does right that you know we want to be as close to the developer as possible because obvious",
    "start": "1893570",
    "end": "1898669"
  },
  {
    "text": "the cost of catching a bug earlier is a lot lower than catching it later in the process it just happens to be the case",
    "start": "1898669",
    "end": "1905840"
  },
  {
    "text": "that you know if the developers are being lazy and they they're not using defeat then at least before production sres will catch it right thank you just",
    "start": "1905840",
    "end": "1915139"
  },
  {
    "text": "one quick thing to add to that I think you also mentioned there's some instrumentation component that the developer has to look into to try and",
    "start": "1915139",
    "end": "1921320"
  },
  {
    "text": "hook into the code right but it's a library that you'll have to hook in and you'll have to probably sprinkle",
    "start": "1921320",
    "end": "1926509"
  },
  {
    "text": "something in the code is that correct okay so I think another like difference",
    "start": "1926509",
    "end": "1935570"
  },
  {
    "text": "here to point out is when you're sprinkling something in the code there's potential of leaving blind spots in the",
    "start": "1935570",
    "end": "1941659"
  },
  {
    "text": "code itself so if for whatever reason if you either do not include the",
    "start": "1941659",
    "end": "1946820"
  },
  {
    "text": "instrumentation on the path that you actually want to trigger or in the future.there iterations that change that",
    "start": "1946820",
    "end": "1952850"
  },
  {
    "text": "if we should be able to catch that but if you miss the sprinkle essentially is when you're going to miss it",
    "start": "1952850",
    "end": "1958850"
  },
  {
    "text": "if I understood the library correctly but yeah we had another question yeah",
    "start": "1958850",
    "end": "1966350"
  },
  {
    "text": "I'm just following up under what the other guy said regarding a staging versus production data so what you",
    "start": "1966350",
    "end": "1971720"
  },
  {
    "text": "mentioned would not be possible for some places like us we work in banks and financial institutions so I can't just",
    "start": "1971720",
    "end": "1977749"
  },
  {
    "text": "use the staging application to access the production database so what what other options do we have",
    "start": "1977749",
    "end": "1983059"
  },
  {
    "text": "I mean can you so sorry how transform and they use mocked backends or what what have we seen in practice so the the",
    "start": "1983059",
    "end": "1992899"
  },
  {
    "text": "we were having the same conversation with a bank and the phrase they used was like if Mohammed can't walk to the",
    "start": "1992899",
    "end": "2000070"
  },
  {
    "text": "mountain the mountain walks to Mohammed and what they meant was that they were going to deployed Fe introduction so",
    "start": "2000070",
    "end": "2005950"
  },
  {
    "text": "because they're pii constraints and like the data constraints were so rigid that their own data could not go to their own",
    "start": "2005950",
    "end": "2012639"
  },
  {
    "text": "staging environment they then chose to deploy Diffie in their production environment so the production",
    "start": "2012639",
    "end": "2018279"
  },
  {
    "text": "environment is where now the testing is happening for this under ployed code",
    "start": "2018279",
    "end": "2024970"
  },
  {
    "text": "you're not deploying you know the diff II instance and the primary/secondary candidate in staging you're deploying it",
    "start": "2024970",
    "end": "2031989"
  },
  {
    "text": "in the production environment which is secure and then the data never leaves that environment what you're seeing at the",
    "start": "2031989",
    "end": "2038459"
  },
  {
    "text": "end is the aggregate analysis that if he produces and that analysis is devoid of",
    "start": "2038459",
    "end": "2043709"
  },
  {
    "text": "any kind of data because it's basically giving you histograms and frequencies about your schema it is basically",
    "start": "2043709",
    "end": "2050608"
  },
  {
    "text": "telling you that hey this part of your schema is where the bug is happening but it doesn't tell you anything about like the data right so that aggregate is then",
    "start": "2050609",
    "end": "2059368"
  },
  {
    "text": "you know exposed out of production and they're able to use it great hey it's",
    "start": "2059369",
    "end": "2068250"
  },
  {
    "text": "really interesting so like in our case let's say we have like a hundred micro",
    "start": "2068250",
    "end": "2073679"
  },
  {
    "text": "services and the starting kind of advocated like sort of that this might",
    "start": "2073679",
    "end": "2079079"
  },
  {
    "text": "be a solution that could be used to test an entire system other than just a single micro service so how do you see",
    "start": "2079079",
    "end": "2086549"
  },
  {
    "text": "it used by customers today do they try and capture all of the inputs that come in to those hundred micro services and",
    "start": "2086549",
    "end": "2093240"
  },
  {
    "text": "although the outputs on the way out and then do the diff in the middle or is it do try and do a mic receivers level or",
    "start": "2093240",
    "end": "2099480"
  },
  {
    "text": "do you try and group slightly higher like 10 micro services together so what",
    "start": "2099480",
    "end": "2105210"
  },
  {
    "text": "we've seen is that typically Diffie starts off at the top so when in terms",
    "start": "2105210",
    "end": "2110670"
  },
  {
    "text": "of adoption right a company will typically have an isolated staging environment where all the new versions",
    "start": "2110670",
    "end": "2116220"
  },
  {
    "text": "of the services are are being maintained right and what they do is they test the top level API right and through that top",
    "start": "2116220",
    "end": "2123690"
  },
  {
    "text": "level API they're able to see some top level regressions that ok there might be a regression at a service that's like",
    "start": "2123690",
    "end": "2130109"
  },
  {
    "text": "five layers deep but it is indirectly exposed to you at the top level where the front end request is coming in right",
    "start": "2130109",
    "end": "2137180"
  },
  {
    "text": "the problem then becomes that you know they need to trace it right now you know that there is a regression but you don't",
    "start": "2137180",
    "end": "2143309"
  },
  {
    "text": "know where it is because you know it's you the fee is not able to see beyond the API boundary so then we see the you",
    "start": "2143309",
    "end": "2150180"
  },
  {
    "text": "know other teams downstream starting to adopt a fee right so it's then ends up your service graph in a lot of ways ends",
    "start": "2150180",
    "end": "2156510"
  },
  {
    "text": "up dictating how your the field option within the company will grow and it's very easy to predict like what are the next services that are going to get on",
    "start": "2156510",
    "end": "2162900"
  },
  {
    "text": "borders to divvy and then soon what happens is that like every service across the stack ends up having",
    "start": "2162900",
    "end": "2169079"
  },
  {
    "text": "you know I directly feel air so that they're able to see you know whether it",
    "start": "2169079",
    "end": "2174599"
  },
  {
    "text": "was their regression or whether it was another team's regression but the the fact whether there is a regression or",
    "start": "2174599",
    "end": "2180479"
  },
  {
    "text": "not can be determined at the top level if you want to know where exactly it is in the stack then you have to go",
    "start": "2180479",
    "end": "2186179"
  },
  {
    "text": "instrument all of those services with if you yeah okay cheers okay so do you guys",
    "start": "2186179",
    "end": "2200579"
  },
  {
    "text": "have some gonna tie in or into the instrumentation question essentially where there's some kind of swagger",
    "start": "2200579",
    "end": "2207149"
  },
  {
    "text": "ization that happens for any new API that comes in where the Arsenal of your",
    "start": "2207149",
    "end": "2212369"
  },
  {
    "text": "API based validations also constantly increases as people are adding new api's",
    "start": "2212369",
    "end": "2219139"
  },
  {
    "text": "okay so this will have to be the last question I think have you added way out of time but I didn't quite understand",
    "start": "2222169",
    "end": "2230579"
  },
  {
    "text": "the question so do you kind of have some kind of annotations at the code level as well",
    "start": "2230579",
    "end": "2235739"
  },
  {
    "text": "that you suggest recommend for people to start adding test cases when there are",
    "start": "2235739",
    "end": "2241169"
  },
  {
    "text": "new API is coming in as well because from a different point of view any new API is essentially different from the",
    "start": "2241169",
    "end": "2247289"
  },
  {
    "text": "previous production side right right right so with new API is unfortunately we're not able to offer any coverage",
    "start": "2247289",
    "end": "2253499"
  },
  {
    "text": "because the first time a new API gets introduced in the previous version that",
    "start": "2253499",
    "end": "2258509"
  },
  {
    "text": "is in production right now there is no traffic for that API right and so you don't have any traffic you don't and you",
    "start": "2258509",
    "end": "2265529"
  },
  {
    "text": "don't have a baseline to compare against right so for new API is unfortunately we're not able to provide coverage and",
    "start": "2265529",
    "end": "2270719"
  },
  {
    "text": "that's where you know you end up having to do the traditional manual you know integration testing unit testing and all",
    "start": "2270719",
    "end": "2276929"
  },
  {
    "text": "of that okay thank you so much we're happy to stick around and answer other questions if you have any thank you",
    "start": "2276929",
    "end": "2283079"
  },
  {
    "text": "thanks",
    "start": "2283079",
    "end": "2285709"
  }
]