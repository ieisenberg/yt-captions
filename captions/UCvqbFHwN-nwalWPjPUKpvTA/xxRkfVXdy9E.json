[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "hi everyone uh I'm Alex Catz I'm a",
    "start": "399",
    "end": "2600"
  },
  {
    "text": "senior software engineer at Capital One",
    "start": "2600",
    "end": "5120"
  },
  {
    "text": "and I'm going to be talking about",
    "start": "5120",
    "end": "6120"
  },
  {
    "text": "minimizing data loss within the open",
    "start": "6120",
    "end": "8000"
  },
  {
    "text": "function",
    "start": "8000",
    "end": "9639"
  },
  {
    "text": "colletive um so to First give a quick",
    "start": "9639",
    "end": "12080"
  },
  {
    "start": "10000",
    "end": "46000"
  },
  {
    "text": "overview of the problem that we're",
    "start": "12080",
    "end": "13519"
  },
  {
    "text": "trying to solve um as owners of the",
    "start": "13519",
    "end": "16080"
  },
  {
    "text": "collective process we have much more",
    "start": "16080",
    "end": "18560"
  },
  {
    "text": "control over the resiliency of The",
    "start": "18560",
    "end": "20519"
  },
  {
    "text": "Collector itself than we do our data",
    "start": "20519",
    "end": "22840"
  },
  {
    "text": "right um we can make the collector",
    "start": "22840",
    "end": "25599"
  },
  {
    "text": "process itself resilient but the issue",
    "start": "25599",
    "end": "28199"
  },
  {
    "text": "with these types of distributor data",
    "start": "28199",
    "end": "30560"
  },
  {
    "text": "pipelines is that they're only as",
    "start": "30560",
    "end": "32520"
  },
  {
    "text": "resilient as the we chain right so um if",
    "start": "32520",
    "end": "36280"
  },
  {
    "text": "I can guarantee that my collector is",
    "start": "36280",
    "end": "38040"
  },
  {
    "text": "available 100% of the time but my",
    "start": "38040",
    "end": "40000"
  },
  {
    "text": "observability back in is only up 90 or",
    "start": "40000",
    "end": "41960"
  },
  {
    "text": "99% of the time that's my actual upline",
    "start": "41960",
    "end": "45239"
  },
  {
    "text": "right um so to talk about the current",
    "start": "45239",
    "end": "47920"
  },
  {
    "start": "46000",
    "end": "107000"
  },
  {
    "text": "state of resiliency um within the",
    "start": "47920",
    "end": "50640"
  },
  {
    "text": "collector especially when it comes to",
    "start": "50640",
    "end": "51760"
  },
  {
    "text": "permanent Downstream failures um so data",
    "start": "51760",
    "end": "54600"
  },
  {
    "text": "resiliency is explicitely handled by",
    "start": "54600",
    "end": "56480"
  },
  {
    "text": "exporters right so exporters are fully",
    "start": "56480",
    "end": "58640"
  },
  {
    "text": "responsible for insuring better data",
    "start": "58640",
    "end": "60359"
  },
  {
    "text": "successfully makes it to its Target",
    "start": "60359",
    "end": "62320"
  },
  {
    "text": "destination um and exports tend to have",
    "start": "62320",
    "end": "64760"
  },
  {
    "text": "some out of the boox uh features uh that",
    "start": "64760",
    "end": "69240"
  },
  {
    "text": "or do kind of benefit resiliency like uh",
    "start": "69240",
    "end": "71560"
  },
  {
    "text": "you know uh ret retry settings memory",
    "start": "71560",
    "end": "74880"
  },
  {
    "text": "queue and optional persistent queue but",
    "start": "74880",
    "end": "78159"
  },
  {
    "text": "all of those are more so geared towards",
    "start": "78159",
    "end": "80439"
  },
  {
    "text": "retry order kind of um temporary errors",
    "start": "80439",
    "end": "83759"
  },
  {
    "text": "like great liit or timeouts uh in the",
    "start": "83759",
    "end": "86479"
  },
  {
    "text": "case of the persistent queue um you know",
    "start": "86479",
    "end": "88640"
  },
  {
    "text": "if my collector crashes and I have data",
    "start": "88640",
    "end": "90759"
  },
  {
    "text": "in atq when the collector SPS back up",
    "start": "90759",
    "end": "93000"
  },
  {
    "text": "that data won't be lost right but none",
    "start": "93000",
    "end": "95240"
  },
  {
    "text": "of these really address the issue of you",
    "start": "95240",
    "end": "98960"
  },
  {
    "text": "know Downstream failures how do I not",
    "start": "98960",
    "end": "101399"
  },
  {
    "text": "let my service failing Downstream that",
    "start": "101399",
    "end": "104719"
  },
  {
    "text": "cause all my data to go out the door um",
    "start": "104719",
    "end": "107360"
  },
  {
    "start": "107000",
    "end": "162000"
  },
  {
    "text": "so enter connectors um I'm going to give",
    "start": "107360",
    "end": "110280"
  },
  {
    "text": "like a 30 second overview of connectors",
    "start": "110280",
    "end": "112799"
  },
  {
    "text": "um but I'm going to be barely scratching",
    "start": "112799",
    "end": "114399"
  },
  {
    "text": "the surface uh I think there was a very",
    "start": "114399",
    "end": "116360"
  },
  {
    "text": "good talk on connectors at last year's",
    "start": "116360",
    "end": "117920"
  },
  {
    "text": "cucon so if you're interested definitely",
    "start": "117920",
    "end": "120560"
  },
  {
    "text": "take uh give that one a listen um so for",
    "start": "120560",
    "end": "123280"
  },
  {
    "text": "our purposes though connectors are just",
    "start": "123280",
    "end": "125520"
  },
  {
    "text": "a way to connect multiple pipelines in a",
    "start": "125520",
    "end": "127039"
  },
  {
    "text": "single collector right so traditionally",
    "start": "127039",
    "end": "129039"
  },
  {
    "text": "data enters uh The Collector through a",
    "start": "129039",
    "end": "131440"
  },
  {
    "text": "receiver goes through the processor",
    "start": "131440",
    "end": "133040"
  },
  {
    "text": "Pipeline and exits the collector through",
    "start": "133040",
    "end": "135280"
  },
  {
    "text": "an exporter right but instead of having",
    "start": "135280",
    "end": "137920"
  },
  {
    "text": "data exit the uh The Collector through",
    "start": "137920",
    "end": "140280"
  },
  {
    "text": "the exporter you can actually have it",
    "start": "140280",
    "end": "141720"
  },
  {
    "text": "consumed by essentially the start of",
    "start": "141720",
    "end": "143680"
  },
  {
    "text": "another pipeline um and another kind of",
    "start": "143680",
    "end": "146400"
  },
  {
    "text": "cool thing about this is that um it",
    "start": "146400",
    "end": "148519"
  },
  {
    "text": "doesn't have to be a Ono one map right",
    "start": "148519",
    "end": "150120"
  },
  {
    "text": "so you can have actually have one kind",
    "start": "150120",
    "end": "151560"
  },
  {
    "text": "of exporter portion mapped to let's say",
    "start": "151560",
    "end": "154959"
  },
  {
    "text": "five different uh starts of different",
    "start": "154959",
    "end": "157280"
  },
  {
    "text": "pipelines right um so that opens the",
    "start": "157280",
    "end": "159920"
  },
  {
    "text": "door to essentially the failover",
    "start": "159920",
    "end": "161640"
  },
  {
    "text": "connector right so the failover",
    "start": "161640",
    "end": "164120"
  },
  {
    "start": "162000",
    "end": "187000"
  },
  {
    "text": "connector pretty intuitive uh is",
    "start": "164120",
    "end": "166080"
  },
  {
    "text": "essentially just a health-based router",
    "start": "166080",
    "end": "168239"
  },
  {
    "text": "uh in The Collector that is going to",
    "start": "168239",
    "end": "169879"
  },
  {
    "text": "route your traffic and determine kind of",
    "start": "169879",
    "end": "172040"
  },
  {
    "text": "which path is hot based off the uh the",
    "start": "172040",
    "end": "175040"
  },
  {
    "text": "health status of each pipeline so it'll",
    "start": "175040",
    "end": "177280"
  },
  {
    "text": "always try to export to the highest",
    "start": "177280",
    "end": "179560"
  },
  {
    "text": "prior pipeline that's healthy um so in",
    "start": "179560",
    "end": "182360"
  },
  {
    "text": "this case for example we can assume that",
    "start": "182360",
    "end": "183840"
  },
  {
    "text": "the first two went down so now it's",
    "start": "183840",
    "end": "185799"
  },
  {
    "text": "export to the to the third um so to",
    "start": "185799",
    "end": "190440"
  },
  {
    "start": "187000",
    "end": "251000"
  },
  {
    "text": "quickly go over the configuration for",
    "start": "190440",
    "end": "192760"
  },
  {
    "text": "the connector uh just so that we have an",
    "start": "192760",
    "end": "194480"
  },
  {
    "text": "idea of how it works so the main and",
    "start": "194480",
    "end": "196799"
  },
  {
    "text": "kind of only required uh parameter is",
    "start": "196799",
    "end": "198840"
  },
  {
    "text": "priority level so uh it's an array of",
    "start": "198840",
    "end": "201680"
  },
  {
    "text": "arrays that um you can put multiple",
    "start": "201680",
    "end": "204640"
  },
  {
    "text": "pipelines at each level uh the one",
    "start": "204640",
    "end": "206760"
  },
  {
    "text": "caveat there is that if a single",
    "start": "206760",
    "end": "208319"
  },
  {
    "text": "pipeline goes unhealthy then that entire",
    "start": "208319",
    "end": "210519"
  },
  {
    "text": "level is viewed as unhealthy and it'll",
    "start": "210519",
    "end": "211959"
  },
  {
    "text": "fail over to the next level uh retry",
    "start": "211959",
    "end": "214360"
  },
  {
    "text": "interval is how often the connector will",
    "start": "214360",
    "end": "217200"
  },
  {
    "text": "go back up to the top uh top of the list",
    "start": "217200",
    "end": "220360"
  },
  {
    "text": "and again work its way down trying to",
    "start": "220360",
    "end": "222000"
  },
  {
    "text": "reestablish a healthy connection retry",
    "start": "222000",
    "end": "224560"
  },
  {
    "text": "Gap is how long it'll wait between two",
    "start": "224560",
    "end": "226760"
  },
  {
    "text": "levels so for example um if I'm uh",
    "start": "226760",
    "end": "229879"
  },
  {
    "text": "currently on level three when it goes to",
    "start": "229879",
    "end": "231959"
  },
  {
    "text": "the retry interval it'll first start uh",
    "start": "231959",
    "end": "234439"
  },
  {
    "text": "it'll retry level one if that fails",
    "start": "234439",
    "end": "236400"
  },
  {
    "text": "it'll wait the retry Gap and then try",
    "start": "236400",
    "end": "238239"
  },
  {
    "text": "level two and then Max R tries is how",
    "start": "238239",
    "end": "240599"
  },
  {
    "text": "many retries before we say that this is",
    "start": "240599",
    "end": "242360"
  },
  {
    "text": "permanently um permanently unhealthy uh",
    "start": "242360",
    "end": "245280"
  },
  {
    "text": "that we won't try won't rryy uh within",
    "start": "245280",
    "end": "247599"
  },
  {
    "text": "this collector run um and this could be",
    "start": "247599",
    "end": "250120"
  },
  {
    "text": "disabled um so what can I do with this",
    "start": "250120",
    "end": "253640"
  },
  {
    "text": "um so going back to the problem that we",
    "start": "253640",
    "end": "254879"
  },
  {
    "text": "were trying to solve um is that we want",
    "start": "254879",
    "end": "257919"
  },
  {
    "text": "to um we want a way to handle prolonged",
    "start": "257919",
    "end": "260320"
  },
  {
    "text": "Downstream failures um and that's",
    "start": "260320",
    "end": "262680"
  },
  {
    "text": "exactly what the fail over connector",
    "start": "262680",
    "end": "263880"
  },
  {
    "text": "allows us to do um so I'll quickly go",
    "start": "263880",
    "end": "266520"
  },
  {
    "text": "over a few potential",
    "start": "266520",
    "end": "268280"
  },
  {
    "text": "architectures um and this list is",
    "start": "268280",
    "end": "270160"
  },
  {
    "text": "definitely not exhaustive but um so",
    "start": "270160",
    "end": "272240"
  },
  {
    "text": "first probably the simplest one cross",
    "start": "272240",
    "end": "273919"
  },
  {
    "text": "region failover right you're running",
    "start": "273919",
    "end": "275560"
  },
  {
    "text": "active active in multiple regions uh one",
    "start": "275560",
    "end": "278120"
  },
  {
    "text": "of them goes down assuming you're scaled",
    "start": "278120",
    "end": "280240"
  },
  {
    "text": "properly to handle that uh increase in",
    "start": "280240",
    "end": "282919"
  },
  {
    "text": "traffic you now can out route all of",
    "start": "282919",
    "end": "284600"
  },
  {
    "text": "your data to the to the other region um",
    "start": "284600",
    "end": "287479"
  },
  {
    "text": "bypassing the next Target let's say",
    "start": "287479",
    "end": "289000"
  },
  {
    "text": "you're using the agent Gateway collector",
    "start": "289000",
    "end": "291400"
  },
  {
    "text": "model um and you have an issue with your",
    "start": "291400",
    "end": "293280"
  },
  {
    "text": "gateways uh you can actually set like a",
    "start": "293280",
    "end": "295240"
  },
  {
    "text": "last priority uh like rule in the",
    "start": "295240",
    "end": "298960"
  },
  {
    "text": "connector that um export directly to my",
    "start": "298960",
    "end": "301840"
  },
  {
    "text": "observability backend like you might",
    "start": "301840",
    "end": "303039"
  },
  {
    "text": "lose some optimizations uh some",
    "start": "303039",
    "end": "304800"
  },
  {
    "text": "enhancements or whatever else you're",
    "start": "304800",
    "end": "305840"
  },
  {
    "text": "doing on the Gateway side but important",
    "start": "305840",
    "end": "307680"
  },
  {
    "text": "part is that the data won't be lost uh",
    "start": "307680",
    "end": "310199"
  },
  {
    "text": "third uh High uptime Target um so this",
    "start": "310199",
    "end": "313440"
  },
  {
    "text": "would be something like an AWS you know",
    "start": "313440",
    "end": "315160"
  },
  {
    "text": "S3 or Kinesis maybe Pub sub and gcp or",
    "start": "315160",
    "end": "318520"
  },
  {
    "text": "if you have like a well-managed kfka",
    "start": "318520",
    "end": "320240"
  },
  {
    "text": "cluster that's definitely an option so",
    "start": "320240",
    "end": "321840"
  },
  {
    "text": "the idea is that it might not be the",
    "start": "321840",
    "end": "324000"
  },
  {
    "text": "best route for your data to take it",
    "start": "324000",
    "end": "325240"
  },
  {
    "text": "might not be the best in terms of cost",
    "start": "325240",
    "end": "326639"
  },
  {
    "text": "or uh latency but the data won't be lost",
    "start": "326639",
    "end": "330440"
  },
  {
    "text": "that that's the important part um so",
    "start": "330440",
    "end": "333240"
  },
  {
    "text": "that's about it um out of time um the",
    "start": "333240",
    "end": "337440"
  },
  {
    "text": "tldr and this is if you have an",
    "start": "337440",
    "end": "339400"
  },
  {
    "text": "applicable use case use the failover",
    "start": "339400",
    "end": "340720"
  },
  {
    "text": "connector uh that way we can kind of you",
    "start": "340720",
    "end": "343440"
  },
  {
    "text": "know make feature requests and continue",
    "start": "343440",
    "end": "345440"
  },
  {
    "text": "to enhance of going forward thank you",
    "start": "345440",
    "end": "346880"
  },
  {
    "text": "everyone",
    "start": "346880",
    "end": "349880"
  }
]