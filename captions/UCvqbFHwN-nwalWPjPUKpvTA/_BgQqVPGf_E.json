[
  {
    "text": "good morning",
    "start": "1280",
    "end": "2280"
  },
  {
    "text": "everybody welcome to Kubernetes on edge",
    "start": "2280",
    "end": "5560"
  },
  {
    "text": "day i hope you have enjoyed all the",
    "start": "5560",
    "end": "8160"
  },
  {
    "text": "awesome talks in the morning i",
    "start": "8160",
    "end": "10800"
  },
  {
    "text": "personally have learned so much from all",
    "start": "10800",
    "end": "12400"
  },
  {
    "text": "of them and we're going to talk about",
    "start": "12400",
    "end": "14960"
  },
  {
    "text": "even processing on the edge my name is",
    "start": "14960",
    "end": "18160"
  },
  {
    "text": "Derek Wong i'm a software engineer",
    "start": "18160",
    "end": "20800"
  },
  {
    "text": "working for into it i'm also open source",
    "start": "20800",
    "end": "24160"
  },
  {
    "text": "community contributor mainline working",
    "start": "24160",
    "end": "26080"
  },
  {
    "text": "on Argo project community and the Nemo",
    "start": "26080",
    "end": "28160"
  },
  {
    "text": "project community",
    "start": "28160",
    "end": "30640"
  },
  {
    "text": "since we got the last minute",
    "start": "30640",
    "end": "32078"
  },
  {
    "text": "confirmation on the slot uh my coworker",
    "start": "32079",
    "end": "35440"
  },
  {
    "text": "Shrih Harsha wasn't able to get enough",
    "start": "35440",
    "end": "37440"
  },
  {
    "text": "time to work on his paperwork for for",
    "start": "37440",
    "end": "39360"
  },
  {
    "text": "travel so I'm going to be the only one",
    "start": "39360",
    "end": "41600"
  },
  {
    "text": "standing on the",
    "start": "41600",
    "end": "44239"
  },
  {
    "text": "stage here's today's agenda we're going",
    "start": "45160",
    "end": "48480"
  },
  {
    "text": "to start with the brief introduction",
    "start": "48480",
    "end": "50160"
  },
  {
    "text": "about who we are and what we do and then",
    "start": "50160",
    "end": "53039"
  },
  {
    "text": "we're going to talk about even",
    "start": "53039",
    "end": "53920"
  },
  {
    "text": "processing on the edge talking about the",
    "start": "53920",
    "end": "56000"
  },
  {
    "text": "challenges and",
    "start": "56000",
    "end": "57559"
  },
  {
    "text": "difficulties and then we're going to",
    "start": "57559",
    "end": "59280"
  },
  {
    "text": "discuss our solution open source project",
    "start": "59280",
    "end": "63400"
  },
  {
    "text": "namelow followed by a demo and then in",
    "start": "63400",
    "end": "66560"
  },
  {
    "text": "the",
    "start": "66560",
    "end": "67240"
  },
  {
    "text": "end if time permits we're going to take",
    "start": "67240",
    "end": "71680"
  },
  {
    "text": "Q&A a little bit more uh a little in",
    "start": "73880",
    "end": "77119"
  },
  {
    "text": "about in it my",
    "start": "77119",
    "end": "78759"
  },
  {
    "text": "employer so in it is a US-based global",
    "start": "78759",
    "end": "82479"
  },
  {
    "text": "fintech company it's famous for its u",
    "start": "82479",
    "end": "86000"
  },
  {
    "text": "flagship products like Turboax Credit",
    "start": "86000",
    "end": "88400"
  },
  {
    "text": "Karma QuickBooks and Mailchimp and",
    "start": "88400",
    "end": "91680"
  },
  {
    "text": "here's our operational scale we have 100",
    "start": "91680",
    "end": "94240"
  },
  {
    "text": "million customers using our Turboax with",
    "start": "94240",
    "end": "97119"
  },
  {
    "text": "tax return every year which get $17",
    "start": "97119",
    "end": "100159"
  },
  {
    "text": "billion involved and we have 18 million",
    "start": "100159",
    "end": "104159"
  },
  {
    "text": "US workers get paid by our QuickBook",
    "start": "104159",
    "end": "109000"
  },
  {
    "text": "etc intuit is also a large open source",
    "start": "109479",
    "end": "113200"
  },
  {
    "text": "community",
    "start": "113200",
    "end": "114920"
  },
  {
    "text": "player as many of you",
    "start": "114920",
    "end": "117320"
  },
  {
    "text": "know intuitives creator of Argo which is",
    "start": "117320",
    "end": "119920"
  },
  {
    "text": "one of the most popular CNCF project we",
    "start": "119920",
    "end": "122240"
  },
  {
    "text": "also open source a lot of other projects",
    "start": "122240",
    "end": "124799"
  },
  {
    "text": "the one we're going to talk about today",
    "start": "124799",
    "end": "126320"
  },
  {
    "text": "Numaflow is one of them and we also got",
    "start": "126320",
    "end": "129200"
  },
  {
    "text": "two times CNCF end user award in 2019",
    "start": "129200",
    "end": "132080"
  },
  {
    "text": "and",
    "start": "132080",
    "end": "134319"
  },
  {
    "text": "2022 now let's move on to talk about",
    "start": "134680",
    "end": "137040"
  },
  {
    "text": "event processing on",
    "start": "137040",
    "end": "140079"
  },
  {
    "text": "edge starting with the event driven",
    "start": "140599",
    "end": "143879"
  },
  {
    "text": "architecture for anyone who is not very",
    "start": "143879",
    "end": "146319"
  },
  {
    "text": "familiar what is event driven",
    "start": "146319",
    "end": "148520"
  },
  {
    "text": "architecture at a very high level",
    "start": "148520",
    "end": "151520"
  },
  {
    "text": "everything is synchronous everything is",
    "start": "151520",
    "end": "154400"
  },
  {
    "text": "event or message based",
    "start": "154400",
    "end": "157840"
  },
  {
    "text": "so we are all very familiar with the",
    "start": "157840",
    "end": "159599"
  },
  {
    "text": "rest",
    "start": "159599",
    "end": "160760"
  },
  {
    "text": "paradigm you get a request you send a",
    "start": "160760",
    "end": "163200"
  },
  {
    "text": "response and then you are done but for",
    "start": "163200",
    "end": "166080"
  },
  {
    "text": "events it's a little bit more",
    "start": "166080",
    "end": "169160"
  },
  {
    "text": "complicated it start with the event",
    "start": "169160",
    "end": "171280"
  },
  {
    "text": "broker people use Kafka pauser or any",
    "start": "171280",
    "end": "173840"
  },
  {
    "text": "other pop popsup",
    "start": "173840",
    "end": "175560"
  },
  {
    "text": "system and if there's something happens",
    "start": "175560",
    "end": "178640"
  },
  {
    "text": "or something interesting you publish a",
    "start": "178640",
    "end": "182040"
  },
  {
    "text": "message if anyone who is interested in",
    "start": "182040",
    "end": "184640"
  },
  {
    "text": "the message you can subscribe to this",
    "start": "184640",
    "end": "186480"
  },
  {
    "text": "message and once you receive the message",
    "start": "186480",
    "end": "188239"
  },
  {
    "text": "you you do some",
    "start": "188239",
    "end": "189720"
  },
  {
    "text": "processing you either say all right I'm",
    "start": "189720",
    "end": "192720"
  },
  {
    "text": "done or you can do something else say",
    "start": "192720",
    "end": "194879"
  },
  {
    "text": "you publish another message to your",
    "start": "194879",
    "end": "197440"
  },
  {
    "text": "downstream could be another data store",
    "start": "197440",
    "end": "199040"
  },
  {
    "text": "or another popup system so that get the",
    "start": "199040",
    "end": "201120"
  },
  {
    "text": "message propagated all the way through",
    "start": "201120",
    "end": "203280"
  },
  {
    "text": "the system and anyone who is interest",
    "start": "203280",
    "end": "206159"
  },
  {
    "text": "knows what's happening what's going on",
    "start": "206159",
    "end": "207760"
  },
  {
    "text": "in the system and can get things",
    "start": "207760",
    "end": "209519"
  },
  {
    "text": "processed quickly and scalably right so",
    "start": "209519",
    "end": "212480"
  },
  {
    "text": "this It's a very high level introduction",
    "start": "212480",
    "end": "214480"
  },
  {
    "text": "about event- driven",
    "start": "214480",
    "end": "217000"
  },
  {
    "text": "architecture now let's look at some real",
    "start": "217000",
    "end": "219440"
  },
  {
    "text": "world",
    "start": "219440",
    "end": "220280"
  },
  {
    "text": "example using eventdriven architecture",
    "start": "220280",
    "end": "222959"
  },
  {
    "text": "uh especially on the",
    "start": "222959",
    "end": "226280"
  },
  {
    "text": "edge assume you run a retail store you",
    "start": "226280",
    "end": "230239"
  },
  {
    "text": "want to do some automation for your",
    "start": "230239",
    "end": "232840"
  },
  {
    "text": "inventory so you're probably going to",
    "start": "232840",
    "end": "234799"
  },
  {
    "text": "install some sensors on the shelf to see",
    "start": "234799",
    "end": "238239"
  },
  {
    "text": "if the inventory level if the inventory",
    "start": "238239",
    "end": "240319"
  },
  {
    "text": "level is low you're going to uh send",
    "start": "240319",
    "end": "242879"
  },
  {
    "text": "some message to your edge device and the",
    "start": "242879",
    "end": "245920"
  },
  {
    "text": "edge will trigger some alert or maybe",
    "start": "245920",
    "end": "248959"
  },
  {
    "text": "you're doing something smarter you're",
    "start": "248959",
    "end": "250560"
  },
  {
    "text": "going to place an order automatically",
    "start": "250560",
    "end": "252560"
  },
  {
    "text": "right so think about the whole end to",
    "start": "252560",
    "end": "254560"
  },
  {
    "text": "end process most of the thing happened",
    "start": "254560",
    "end": "258000"
  },
  {
    "text": "on the edge it's event driven",
    "start": "258000",
    "end": "262359"
  },
  {
    "text": "some other examples this is a real",
    "start": "262800",
    "end": "264880"
  },
  {
    "text": "example that our open source community",
    "start": "264880",
    "end": "266720"
  },
  {
    "text": "user are using Animalow to process",
    "start": "266720",
    "end": "270240"
  },
  {
    "text": "they're doing predictive maintenance so",
    "start": "270240",
    "end": "272639"
  },
  {
    "text": "they're using some sensors to detect the",
    "start": "272639",
    "end": "276080"
  },
  {
    "text": "device health by checking the",
    "start": "276080",
    "end": "277960"
  },
  {
    "text": "temperature and the vibration levels if",
    "start": "277960",
    "end": "281280"
  },
  {
    "text": "the temperature is too high or vibration",
    "start": "281280",
    "end": "283280"
  },
  {
    "text": "is too much they're going to do some",
    "start": "283280",
    "end": "285520"
  },
  {
    "text": "crazy calculation data",
    "start": "285520",
    "end": "288199"
  },
  {
    "text": "processing and then to see if it's over",
    "start": "288199",
    "end": "290960"
  },
  {
    "text": "the limit and then maybe they're going",
    "start": "290960",
    "end": "293120"
  },
  {
    "text": "to put in the safety protocol or",
    "start": "293120",
    "end": "294960"
  },
  {
    "text": "initiating some",
    "start": "294960",
    "end": "297479"
  },
  {
    "text": "antennas some other examples using event",
    "start": "297479",
    "end": "300560"
  },
  {
    "text": "driven architecture on the edge device",
    "start": "300560",
    "end": "302800"
  },
  {
    "text": "smart traffic right so the left turn",
    "start": "302800",
    "end": "307360"
  },
  {
    "text": "traffic light will never be green if",
    "start": "307360",
    "end": "309600"
  },
  {
    "text": "there are no left hand if there's no car",
    "start": "309600",
    "end": "311600"
  },
  {
    "text": "on the left turn lanes right or if you",
    "start": "311600",
    "end": "314160"
  },
  {
    "text": "do do not push the button on the",
    "start": "314160",
    "end": "315919"
  },
  {
    "text": "pedestrian you'll never get a chance to",
    "start": "315919",
    "end": "317280"
  },
  {
    "text": "cross the",
    "start": "317280",
    "end": "319320"
  },
  {
    "text": "street smart surveillance so all the",
    "start": "319320",
    "end": "322240"
  },
  {
    "text": "cameras they have motion detection once",
    "start": "322240",
    "end": "324880"
  },
  {
    "text": "the motion is detected you're going to",
    "start": "324880",
    "end": "326400"
  },
  {
    "text": "do some you know recording or facial",
    "start": "326400",
    "end": "330080"
  },
  {
    "text": "recognition things like all of these are",
    "start": "330080",
    "end": "332320"
  },
  {
    "text": "event driven actor running on the edge",
    "start": "332320",
    "end": "336080"
  },
  {
    "text": "Now let's look at the challenges and",
    "start": "337120",
    "end": "338720"
  },
  {
    "text": "difficulties to run eventual processing",
    "start": "338720",
    "end": "340240"
  },
  {
    "text": "on the edge so first of",
    "start": "340240",
    "end": "342520"
  },
  {
    "text": "all there are many different kind of",
    "start": "342520",
    "end": "344560"
  },
  {
    "text": "event sources so the events on the edge",
    "start": "344560",
    "end": "347680"
  },
  {
    "text": "devices come from different sensor",
    "start": "347680",
    "end": "349520"
  },
  {
    "text": "different hardares so you need to get",
    "start": "349520",
    "end": "352560"
  },
  {
    "text": "very familiar with those kind of",
    "start": "352560",
    "end": "354199"
  },
  {
    "text": "particles to integrate them right so",
    "start": "354199",
    "end": "357440"
  },
  {
    "text": "that's the first challenge",
    "start": "357440",
    "end": "360160"
  },
  {
    "text": "second challenge if you are doing some",
    "start": "360160",
    "end": "364479"
  },
  {
    "text": "advanced or real-time data processing",
    "start": "364479",
    "end": "366639"
  },
  {
    "text": "with the events you",
    "start": "366639",
    "end": "368280"
  },
  {
    "text": "detected and there's some language",
    "start": "368280",
    "end": "371120"
  },
  {
    "text": "there's some you",
    "start": "371120",
    "end": "373080"
  },
  {
    "text": "know there so usually in a cloud-based",
    "start": "373080",
    "end": "376479"
  },
  {
    "text": "AR architecture you can do this kind of",
    "start": "376479",
    "end": "378319"
  },
  {
    "text": "real time data processing by using uh",
    "start": "378319",
    "end": "380160"
  },
  {
    "text": "tools like uh spark streams or flink but",
    "start": "380160",
    "end": "384160"
  },
  {
    "text": "on edge twice it's very difficult to do",
    "start": "384160",
    "end": "387960"
  },
  {
    "text": "that and then language language",
    "start": "387960",
    "end": "389919"
  },
  {
    "text": "constraints to do those kind of complex",
    "start": "389919",
    "end": "391520"
  },
  {
    "text": "data processing usually people use uh",
    "start": "391520",
    "end": "394240"
  },
  {
    "text": "language like Java or J JDK based",
    "start": "394240",
    "end": "397000"
  },
  {
    "text": "applications to do it flink sparse",
    "start": "397000",
    "end": "400560"
  },
  {
    "text": "stream they are all in JVM based you",
    "start": "400560",
    "end": "402880"
  },
  {
    "text": "either write Java application or scale",
    "start": "402880",
    "end": "404319"
  },
  {
    "text": "application to do those kind of",
    "start": "404319",
    "end": "405600"
  },
  {
    "text": "complication but on edge device is",
    "start": "405600",
    "end": "408479"
  },
  {
    "text": "pretty",
    "start": "408479",
    "end": "409479"
  },
  {
    "text": "hard and",
    "start": "409479",
    "end": "412520"
  },
  {
    "text": "lastly we all know on edge devices the",
    "start": "412520",
    "end": "416319"
  },
  {
    "text": "resources are very limited the CPU",
    "start": "416319",
    "end": "418800"
  },
  {
    "text": "memory is not much so for example you",
    "start": "418800",
    "end": "421919"
  },
  {
    "text": "want to run compensated processing",
    "start": "421919",
    "end": "424240"
  },
  {
    "text": "there's no way to run flink on edge wise",
    "start": "424240",
    "end": "426800"
  },
  {
    "text": "to do it I saw someone on YouTube saying",
    "start": "426800",
    "end": "430479"
  },
  {
    "text": "you know get flinky installing on on",
    "start": "430479",
    "end": "433360"
  },
  {
    "text": "edge device but I don't know if anyone",
    "start": "433360",
    "end": "435280"
  },
  {
    "text": "ever succeeded doing that I don't know",
    "start": "435280",
    "end": "437360"
  },
  {
    "text": "how many how much resource going to use",
    "start": "437360",
    "end": "440000"
  },
  {
    "text": "so those are the challenges for uh event",
    "start": "440000",
    "end": "442160"
  },
  {
    "text": "processing on edge and now let's see um",
    "start": "442160",
    "end": "445759"
  },
  {
    "text": "our solutions to address this",
    "start": "445759",
    "end": "449080"
  },
  {
    "text": "challenges",
    "start": "449080",
    "end": "451319"
  },
  {
    "text": "numaflow numaflow is an open source",
    "start": "451319",
    "end": "453599"
  },
  {
    "text": "project we're working",
    "start": "453599",
    "end": "455000"
  },
  {
    "text": "on it's a kubernetes native platform use",
    "start": "455000",
    "end": "458720"
  },
  {
    "text": "your own uh event processing or complex",
    "start": "458720",
    "end": "461360"
  },
  {
    "text": "streaming data",
    "start": "461360",
    "end": "463400"
  },
  {
    "text": "processing and our design philosophy is",
    "start": "463400",
    "end": "467199"
  },
  {
    "text": "to get even processing or complex stream",
    "start": "467199",
    "end": "469759"
  },
  {
    "text": "data processing just like running",
    "start": "469759",
    "end": "471039"
  },
  {
    "text": "serverless",
    "start": "471039",
    "end": "472039"
  },
  {
    "text": "applications everyone knows lambda from",
    "start": "472039",
    "end": "474840"
  },
  {
    "text": "adab you don't need to worry about",
    "start": "474840",
    "end": "476800"
  },
  {
    "text": "infrastructure just write your code then",
    "start": "476800",
    "end": "478560"
  },
  {
    "text": "get the things processed right that's",
    "start": "478560",
    "end": "479919"
  },
  {
    "text": "our design philosophy for",
    "start": "479919",
    "end": "483599"
  },
  {
    "text": "flow so it's a kubernetes platform So",
    "start": "484280",
    "end": "488240"
  },
  {
    "text": "it's it's going to be very lightweight",
    "start": "488240",
    "end": "489919"
  },
  {
    "text": "and very easy to use as long as you have",
    "start": "489919",
    "end": "492639"
  },
  {
    "text": "a Kubernetes cluster no matter it's a",
    "start": "492639",
    "end": "494240"
  },
  {
    "text": "cloud-based Kubernetes cluster like EKS",
    "start": "494240",
    "end": "495840"
  },
  {
    "text": "or GKE or any lightweight cluster like",
    "start": "495840",
    "end": "498960"
  },
  {
    "text": "kind or",
    "start": "498960",
    "end": "500520"
  },
  {
    "text": "K3S you can use Neimaflow to do even",
    "start": "500520",
    "end": "503120"
  },
  {
    "text": "pressing or stream data",
    "start": "503120",
    "end": "505479"
  },
  {
    "text": "processing as long as you know some",
    "start": "505479",
    "end": "507520"
  },
  {
    "text": "basic Kubernetes operation you can use",
    "start": "507520",
    "end": "509280"
  },
  {
    "text": "Neimaflow to process events or do stream",
    "start": "509280",
    "end": "512320"
  },
  {
    "text": "and data processing just like running a",
    "start": "512320",
    "end": "515599"
  },
  {
    "text": "simple KES deployment",
    "start": "515599",
    "end": "519120"
  },
  {
    "text": "and we decoupled we decoupled the",
    "start": "519360",
    "end": "521360"
  },
  {
    "text": "processing logic from the source and",
    "start": "521360",
    "end": "524920"
  },
  {
    "text": "destination you just write your code",
    "start": "524920",
    "end": "527040"
  },
  {
    "text": "once can be used anywhere plug-in and",
    "start": "527040",
    "end": "529279"
  },
  {
    "text": "play and can use whatever language you",
    "start": "529279",
    "end": "531279"
  },
  {
    "text": "want to use to write your data",
    "start": "531279",
    "end": "532560"
  },
  {
    "text": "processing logic so we make it as a",
    "start": "532560",
    "end": "534720"
  },
  {
    "text": "language agnostic",
    "start": "534720",
    "end": "537480"
  },
  {
    "text": "platform and lastly we make it a",
    "start": "537480",
    "end": "540880"
  },
  {
    "text": "scalable reliable and a",
    "start": "540880",
    "end": "542680"
  },
  {
    "text": "secure so we provide out of the box",
    "start": "542680",
    "end": "544800"
  },
  {
    "text": "autoscaling",
    "start": "544800",
    "end": "546320"
  },
  {
    "text": "it could be autoscaling from zero to end",
    "start": "546320",
    "end": "548480"
  },
  {
    "text": "based on traffic and load if there's no",
    "start": "548480",
    "end": "550320"
  },
  {
    "text": "traffic we're autoscaling it down to",
    "start": "550320",
    "end": "553000"
  },
  {
    "text": "zero that makes it cost",
    "start": "553000",
    "end": "557040"
  },
  {
    "text": "efficient in Neimoflow we have two",
    "start": "558839",
    "end": "561920"
  },
  {
    "text": "different kind of abstractions for uh",
    "start": "561920",
    "end": "564080"
  },
  {
    "text": "event processing and stream data",
    "start": "564080",
    "end": "565920"
  },
  {
    "text": "processing for simple event processing",
    "start": "565920",
    "end": "568640"
  },
  {
    "text": "since we are Kubernetes native project",
    "start": "568640",
    "end": "570560"
  },
  {
    "text": "we use CRD to",
    "start": "570560",
    "end": "573399"
  },
  {
    "text": "abstract the workload over there we",
    "start": "573399",
    "end": "575519"
  },
  {
    "text": "named it as",
    "start": "575519",
    "end": "576600"
  },
  {
    "text": "monvertex so here on this",
    "start": "576600",
    "end": "579000"
  },
  {
    "text": "diagram you can consider this box as a",
    "start": "579000",
    "end": "582080"
  },
  {
    "text": "mono vertex it's nothing but consist of",
    "start": "582080",
    "end": "584399"
  },
  {
    "text": "multiple different paths and we",
    "start": "584399",
    "end": "586560"
  },
  {
    "text": "autoscale this pause based on",
    "start": "586560",
    "end": "588839"
  },
  {
    "text": "traffic and within each of pod there are",
    "start": "588839",
    "end": "591839"
  },
  {
    "text": "multiple containers running over there",
    "start": "591839",
    "end": "593760"
  },
  {
    "text": "there's a source container which used to",
    "start": "593760",
    "end": "595360"
  },
  {
    "text": "read data from data source and you can",
    "start": "595360",
    "end": "598160"
  },
  {
    "text": "have some another container called",
    "start": "598160",
    "end": "599600"
  },
  {
    "text": "transformer to write your own data",
    "start": "599600",
    "end": "601200"
  },
  {
    "text": "parsing logic and separately there's a",
    "start": "601200",
    "end": "603920"
  },
  {
    "text": "sync container used to forward process",
    "start": "603920",
    "end": "605600"
  },
  {
    "text": "data to some other data sync or doing",
    "start": "605600",
    "end": "608000"
  },
  {
    "text": "some other",
    "start": "608000",
    "end": "611200"
  },
  {
    "text": "operations and if you look at the mon",
    "start": "612279",
    "end": "614880"
  },
  {
    "text": "spec it looks like this so there's a",
    "start": "614880",
    "end": "617560"
  },
  {
    "text": "source where you can define a container",
    "start": "617560",
    "end": "620640"
  },
  {
    "text": "similarly for transformer as sync you",
    "start": "620640",
    "end": "622880"
  },
  {
    "text": "have some other containers to do it and",
    "start": "622880",
    "end": "624720"
  },
  {
    "text": "we provide SDKs in different language",
    "start": "624720",
    "end": "627440"
  },
  {
    "text": "for you to easily write processing logic",
    "start": "627440",
    "end": "629440"
  },
  {
    "text": "in those containers and we have Java",
    "start": "629440",
    "end": "632480"
  },
  {
    "text": "Python Golang and Rusta support",
    "start": "632480",
    "end": "634720"
  },
  {
    "text": "technically you can use any language to",
    "start": "634720",
    "end": "636720"
  },
  {
    "text": "do it we are using uh gRBC over Unix",
    "start": "636720",
    "end": "640640"
  },
  {
    "text": "domain socket do the communication",
    "start": "640640",
    "end": "642560"
  },
  {
    "text": "between those containers within one pot",
    "start": "642560",
    "end": "644480"
  },
  {
    "text": "so technically any language is",
    "start": "644480",
    "end": "647240"
  },
  {
    "text": "supported and for complex streaming data",
    "start": "647240",
    "end": "650079"
  },
  {
    "text": "processing we have another different u",
    "start": "650079",
    "end": "652640"
  },
  {
    "text": "terminology named the",
    "start": "652640",
    "end": "655000"
  },
  {
    "text": "pipeline so a pipeline consists of",
    "start": "655000",
    "end": "657519"
  },
  {
    "text": "multiple different u vertices this is",
    "start": "657519",
    "end": "660480"
  },
  {
    "text": "the um",
    "start": "660480",
    "end": "662760"
  },
  {
    "text": "pipeline this this a pipeline with like",
    "start": "662760",
    "end": "665360"
  },
  {
    "text": "one source two syncs and two",
    "start": "665360",
    "end": "668600"
  },
  {
    "text": "udfs each a box represent a vertex a",
    "start": "668600",
    "end": "671839"
  },
  {
    "text": "vertex is nothing but um a set of paths",
    "start": "671839",
    "end": "674480"
  },
  {
    "text": "we autoscale each of vertex",
    "start": "674480",
    "end": "676240"
  },
  {
    "text": "independently based on traffic and load",
    "start": "676240",
    "end": "678000"
  },
  {
    "text": "and back",
    "start": "678000",
    "end": "680040"
  },
  {
    "text": "pressure so it provides exactly one",
    "start": "680040",
    "end": "683720"
  },
  {
    "text": "symmetrics and here the source is used",
    "start": "683720",
    "end": "686160"
  },
  {
    "text": "to ingest data from data source and you",
    "start": "686160",
    "end": "688959"
  },
  {
    "text": "can use either our inbuilt data inbu",
    "start": "688959",
    "end": "692320"
  },
  {
    "text": "data from Kafka or any other you know",
    "start": "692320",
    "end": "694320"
  },
  {
    "text": "popular data source or you write your",
    "start": "694320",
    "end": "695600"
  },
  {
    "text": "own data processing logic with the user",
    "start": "695600",
    "end": "697839"
  },
  {
    "text": "defined",
    "start": "697839",
    "end": "698839"
  },
  {
    "text": "source sync similarly you can write your",
    "start": "698839",
    "end": "701440"
  },
  {
    "text": "own user trans sync or inbuilt sync and",
    "start": "701440",
    "end": "703760"
  },
  {
    "text": "for UDF stands for user trans",
    "start": "703760",
    "end": "706440"
  },
  {
    "text": "functions here we support map reduce out",
    "start": "706440",
    "end": "709120"
  },
  {
    "text": "of the box which means you can either",
    "start": "709120",
    "end": "710880"
  },
  {
    "text": "write a map udf or a reduce udf and we",
    "start": "710880",
    "end": "713440"
  },
  {
    "text": "support",
    "start": "713440",
    "end": "714600"
  },
  {
    "text": "uh group by windows fixed window slider",
    "start": "714600",
    "end": "717680"
  },
  {
    "text": "window and session window so we can do",
    "start": "717680",
    "end": "719440"
  },
  {
    "text": "things like group by some sort of keys",
    "start": "719440",
    "end": "721360"
  },
  {
    "text": "uh every let's say 10 minutes uh fixed",
    "start": "721360",
    "end": "725600"
  },
  {
    "text": "window or every two minutes with the 10",
    "start": "725600",
    "end": "727920"
  },
  {
    "text": "minutes window sliding window things",
    "start": "727920",
    "end": "730079"
  },
  {
    "text": "like",
    "start": "730079",
    "end": "731560"
  },
  {
    "text": "that so if you look at the sample spec",
    "start": "731560",
    "end": "734720"
  },
  {
    "text": "of a pipeline it's something like this",
    "start": "734720",
    "end": "738079"
  },
  {
    "text": "within the spec there are two major",
    "start": "738079",
    "end": "739440"
  },
  {
    "text": "section one is called vertices where you",
    "start": "739440",
    "end": "741279"
  },
  {
    "text": "define uh the vert vertices here in this",
    "start": "741279",
    "end": "744959"
  },
  {
    "text": "example you have a there's in which used",
    "start": "744959",
    "end": "747440"
  },
  {
    "text": "in justest data from a ca topic and then",
    "start": "747440",
    "end": "750320"
  },
  {
    "text": "you have an enrich step which is which",
    "start": "750320",
    "end": "752320"
  },
  {
    "text": "is map function and there it's followed",
    "start": "752320",
    "end": "754959"
  },
  {
    "text": "by",
    "start": "754959",
    "end": "756440"
  },
  {
    "text": "aggregation and then in the end there's",
    "start": "756440",
    "end": "758800"
  },
  {
    "text": "a output function which write to the",
    "start": "758800",
    "end": "760800"
  },
  {
    "text": "kafka then you have edge define the",
    "start": "760800",
    "end": "762720"
  },
  {
    "text": "relation for the uh",
    "start": "762720",
    "end": "765560"
  },
  {
    "text": "vertices and quickly look into um the",
    "start": "765560",
    "end": "769200"
  },
  {
    "text": "code running in the container so this is",
    "start": "769200",
    "end": "771200"
  },
  {
    "text": "the sample code for a map function if",
    "start": "771200",
    "end": "774240"
  },
  {
    "text": "you look at the function signature the",
    "start": "774240",
    "end": "776320"
  },
  {
    "text": "most important thing is something called",
    "start": "776320",
    "end": "777800"
  },
  {
    "text": "datm and the data if you look at the",
    "start": "777800",
    "end": "781279"
  },
  {
    "text": "functions you don't see anything related",
    "start": "781279",
    "end": "782800"
  },
  {
    "text": "to your upstream or data source the",
    "start": "782800",
    "end": "785680"
  },
  {
    "text": "platform will make sure all the data",
    "start": "785680",
    "end": "787680"
  },
  {
    "text": "coming from data source or your",
    "start": "787680",
    "end": "788800"
  },
  {
    "text": "downstream will be forwarded to the",
    "start": "788800",
    "end": "790000"
  },
  {
    "text": "function and then you only need to write",
    "start": "790000",
    "end": "791760"
  },
  {
    "text": "data processing logic",
    "start": "791760",
    "end": "793639"
  },
  {
    "text": "here and after processing the message",
    "start": "793639",
    "end": "796240"
  },
  {
    "text": "your data you're going to return list",
    "start": "796240",
    "end": "798000"
  },
  {
    "text": "messages and you're not seeing any",
    "start": "798000",
    "end": "799920"
  },
  {
    "text": "downstream as you return the downstream",
    "start": "799920",
    "end": "802000"
  },
  {
    "text": "message the platform make sure the data",
    "start": "802000",
    "end": "803680"
  },
  {
    "text": "will be right to the",
    "start": "803680",
    "end": "806720"
  },
  {
    "text": "syncs and now let's go to a demo",
    "start": "806920",
    "end": "811440"
  },
  {
    "text": "So I'm going to run a um stream data",
    "start": "814959",
    "end": "818160"
  },
  {
    "text": "processing pipeline on my laptop in a",
    "start": "818160",
    "end": "820560"
  },
  {
    "text": "K3S cluster this is actually",
    "start": "820560",
    "end": "823560"
  },
  {
    "text": "uh a couple open sourc user are using on",
    "start": "823560",
    "end": "827120"
  },
  {
    "text": "their edge devices so what am I doing on",
    "start": "827120",
    "end": "830560"
  },
  {
    "text": "on this uh krix s cluster I have a",
    "start": "830560",
    "end": "834720"
  },
  {
    "text": "complex data processing pipeline which",
    "start": "834720",
    "end": "836320"
  },
  {
    "text": "has four vertices and um I have a in",
    "start": "836320",
    "end": "840320"
  },
  {
    "text": "which is a source which is going to use",
    "start": "840320",
    "end": "842079"
  },
  {
    "text": "to ingest some data and I use a hb",
    "start": "842079",
    "end": "844560"
  },
  {
    "text": "source here and so I'm going to you know",
    "start": "844560",
    "end": "846000"
  },
  {
    "text": "have a script running in the back end to",
    "start": "846000",
    "end": "847440"
  },
  {
    "text": "post some data to this HP source to",
    "start": "847440",
    "end": "850240"
  },
  {
    "text": "simulate the data source",
    "start": "850240",
    "end": "851959"
  },
  {
    "text": "right and then I have a map udf which",
    "start": "851959",
    "end": "855519"
  },
  {
    "text": "used to uh give some tag to this",
    "start": "855519",
    "end": "858079"
  },
  {
    "text": "incoming coming data uh here the com",
    "start": "858079",
    "end": "860240"
  },
  {
    "text": "data is some sort of integers so I'm",
    "start": "860240",
    "end": "862079"
  },
  {
    "text": "going to give a even or odd those kind",
    "start": "862079",
    "end": "863519"
  },
  {
    "text": "of keys in this uh map udf and then I'm",
    "start": "863519",
    "end": "866720"
  },
  {
    "text": "going to do an aggregation in the",
    "start": "866720",
    "end": "867839"
  },
  {
    "text": "followup",
    "start": "867839",
    "end": "869240"
  },
  {
    "text": "uh compute sum vertic vertex it will do",
    "start": "869240",
    "end": "873680"
  },
  {
    "text": "a sum um for those inputting data and if",
    "start": "873680",
    "end": "878720"
  },
  {
    "text": "you look at the spec is doing every five",
    "start": "878720",
    "end": "881199"
  },
  {
    "text": "minutes doing a sum right and then in",
    "start": "881199",
    "end": "885279"
  },
  {
    "text": "the end it's going to write to the sync",
    "start": "885279",
    "end": "887680"
  },
  {
    "text": "it's The sync right here is a uh lock",
    "start": "887680",
    "end": "891440"
  },
  {
    "text": "sync so if we look at the",
    "start": "891440",
    "end": "895839"
  },
  {
    "text": "sync so you're going to see every",
    "start": "898279",
    "end": "901920"
  },
  {
    "text": "several seconds you're going to see some",
    "start": "901920",
    "end": "904000"
  },
  {
    "text": "output here uh for even keys the sum is",
    "start": "904000",
    "end": "908880"
  },
  {
    "text": "168 and odd keys 63 something like that",
    "start": "908880",
    "end": "913519"
  },
  {
    "text": "so I'm running um a script in the back",
    "start": "913519",
    "end": "916800"
  },
  {
    "text": "end to send some random data to the",
    "start": "916800",
    "end": "921600"
  },
  {
    "text": "source so this is something running on",
    "start": "921639",
    "end": "924959"
  },
  {
    "text": "my local laptop KS class you can run",
    "start": "924959",
    "end": "927440"
  },
  {
    "text": "this anywhere as long as the edge device",
    "start": "927440",
    "end": "929920"
  },
  {
    "text": "supports Kra cluster right or any other",
    "start": "929920",
    "end": "932320"
  },
  {
    "text": "lightweight Case cluster now I'm going",
    "start": "932320",
    "end": "935040"
  },
  {
    "text": "to show you some real example running",
    "start": "935040",
    "end": "936639"
  },
  {
    "text": "into the production",
    "start": "936639",
    "end": "940120"
  },
  {
    "text": "this is a lightweight uh",
    "start": "943680",
    "end": "946680"
  },
  {
    "text": "monovex to do simple even processing and",
    "start": "946680",
    "end": "950079"
  },
  {
    "text": "here you can see there's 11 parts around",
    "start": "950079",
    "end": "952320"
  },
  {
    "text": "this for the transactions and the this",
    "start": "952320",
    "end": "954560"
  },
  {
    "text": "this throughput is like 4K per",
    "start": "954560",
    "end": "957000"
  },
  {
    "text": "second and a complex example like this",
    "start": "957000",
    "end": "961600"
  },
  {
    "text": "this is a pipeline to power into it",
    "start": "961600",
    "end": "964320"
  },
  {
    "text": "knowledge application knowledge",
    "start": "964320",
    "end": "965839"
  },
  {
    "text": "detection and then it's kind of crazy uh",
    "start": "965839",
    "end": "968000"
  },
  {
    "text": "topological pipeline and it's used to do",
    "start": "968000",
    "end": "971920"
  },
  {
    "text": "things like you know uh inference you",
    "start": "971920",
    "end": "975440"
  },
  {
    "text": "know to do analog detection to do",
    "start": "975440",
    "end": "976880"
  },
  {
    "text": "inference and have training in the same",
    "start": "976880",
    "end": "979040"
  },
  {
    "text": "pipeline and they read in different",
    "start": "979040",
    "end": "981320"
  },
  {
    "text": "languages right into different",
    "start": "981320",
    "end": "985000"
  },
  {
    "text": "things",
    "start": "985000",
    "end": "987079"
  },
  {
    "text": "okay and coming back to the",
    "start": "987079",
    "end": "992000"
  },
  {
    "text": "slides and let's do a quick summary",
    "start": "992440",
    "end": "994480"
  },
  {
    "text": "about Neimaflow it's a serverless",
    "start": "994480",
    "end": "997040"
  },
  {
    "text": "platform running scalable reliable",
    "start": "997040",
    "end": "998399"
  },
  {
    "text": "inventory applications or stream",
    "start": "998399",
    "end": "1000480"
  },
  {
    "text": "processing platform it's Kubernetes",
    "start": "1000480",
    "end": "1002959"
  },
  {
    "text": "native which means it's not only",
    "start": "1002959",
    "end": "1005440"
  },
  {
    "text": "something running in Kubernetes but also",
    "start": "1005440",
    "end": "1007120"
  },
  {
    "text": "use Kubernetes native feature to build",
    "start": "1007120",
    "end": "1008639"
  },
  {
    "text": "the platform it's very lightweight can",
    "start": "1008639",
    "end": "1010320"
  },
  {
    "text": "be used either uh on the edge on on",
    "start": "1010320",
    "end": "1015759"
  },
  {
    "text": "prem and we it's a language agnostic",
    "start": "1016120",
    "end": "1019000"
  },
  {
    "text": "platform we have different language",
    "start": "1019000",
    "end": "1021320"
  },
  {
    "text": "support reading SDK to help you write",
    "start": "1021320",
    "end": "1023519"
  },
  {
    "text": "your own user defined function either",
    "start": "1023519",
    "end": "1024959"
  },
  {
    "text": "sources or",
    "start": "1024959",
    "end": "1026678"
  },
  {
    "text": "syncs it's scalable and cost efficient",
    "start": "1026679",
    "end": "1029959"
  },
  {
    "text": "autoscale from zero to",
    "start": "1029959",
    "end": "1032760"
  },
  {
    "text": "end so it's capable to of running on",
    "start": "1032760",
    "end": "1035760"
  },
  {
    "text": "edge with a low resource footprint",
    "start": "1035760",
    "end": "1039760"
  },
  {
    "text": "And these are open source community",
    "start": "1041439",
    "end": "1044038"
  },
  {
    "text": "users um I want to highlight two of them",
    "start": "1044039",
    "end": "1047520"
  },
  {
    "text": "uh one is called a BCube it's a it's a",
    "start": "1047520",
    "end": "1052000"
  },
  {
    "text": "organization in the US which uh it's a",
    "start": "1052000",
    "end": "1054960"
  },
  {
    "text": "vendor for US defense uh defense",
    "start": "1054960",
    "end": "1057840"
  },
  {
    "text": "department and they are using flow to do",
    "start": "1057840",
    "end": "1060559"
  },
  {
    "text": "signal processing on their edge devices",
    "start": "1060559",
    "end": "1064000"
  },
  {
    "text": "actually their edge device has no",
    "start": "1064000",
    "end": "1065679"
  },
  {
    "text": "internet access that's kind of",
    "start": "1065679",
    "end": "1068840"
  },
  {
    "text": "interesting the other one um is called",
    "start": "1068840",
    "end": "1071679"
  },
  {
    "text": "Boomer Groups i think this is a company",
    "start": "1071679",
    "end": "1074320"
  },
  {
    "text": "uh based in Europe they're also that's",
    "start": "1074320",
    "end": "1077120"
  },
  {
    "text": "the one I mentioned in the you know in",
    "start": "1077120",
    "end": "1078799"
  },
  {
    "text": "the example that they're using inflow to",
    "start": "1078799",
    "end": "1081440"
  },
  {
    "text": "do temperature uh detection those kind",
    "start": "1081440",
    "end": "1084960"
  },
  {
    "text": "of detect the health status of their",
    "start": "1084960",
    "end": "1087280"
  },
  {
    "text": "devices",
    "start": "1087280",
    "end": "1090280"
  },
  {
    "text": "and we also have NT which is Nepon",
    "start": "1091320",
    "end": "1095600"
  },
  {
    "text": "Telegraph and Telecom from Japan and",
    "start": "1095600",
    "end": "1098480"
  },
  {
    "text": "we're have another session tomorrow",
    "start": "1098480",
    "end": "1099760"
  },
  {
    "text": "afternoon at 1:30 and they're going to",
    "start": "1099760",
    "end": "1103039"
  },
  {
    "text": "uh showcase how to use Numaflow to do AR",
    "start": "1103039",
    "end": "1106559"
  },
  {
    "text": "machine learning to achieve accelerator",
    "start": "1106559",
    "end": "1110600"
  },
  {
    "text": "chaining it's going to be in the",
    "start": "1110600",
    "end": "1112480"
  },
  {
    "text": "solution use solution showcase room",
    "start": "1112480",
    "end": "1117320"
  },
  {
    "text": "yeah I think uh that's all for my",
    "start": "1118480",
    "end": "1121120"
  },
  {
    "text": "presentation and if you are interested",
    "start": "1121120",
    "end": "1122720"
  },
  {
    "text": "in Neimaflow you want to bring it to to",
    "start": "1122720",
    "end": "1124880"
  },
  {
    "text": "edge and here is our GitHub repository",
    "start": "1124880",
    "end": "1128400"
  },
  {
    "text": "and there's a QR code if you're",
    "start": "1128400",
    "end": "1129840"
  },
  {
    "text": "interesting just scan it and then you",
    "start": "1129840",
    "end": "1131360"
  },
  {
    "text": "know you're going to find uh GitH over",
    "start": "1131360",
    "end": "1133679"
  },
  {
    "text": "there and if you have any question you",
    "start": "1133679",
    "end": "1135840"
  },
  {
    "text": "can can join our community or Slack",
    "start": "1135840",
    "end": "1137919"
  },
  {
    "text": "channel you can find those links from",
    "start": "1137919",
    "end": "1139720"
  },
  {
    "text": "there",
    "start": "1139720",
    "end": "1141960"
  },
  {
    "text": "and I'm happy to take questions",
    "start": "1141960",
    "end": "1147559"
  },
  {
    "text": "no",
    "start": "1155039",
    "end": "1157279"
  },
  {
    "text": "question all right thank you",
    "start": "1157640",
    "end": "1161300"
  },
  {
    "text": "[Applause]",
    "start": "1161300",
    "end": "1165170"
  }
]