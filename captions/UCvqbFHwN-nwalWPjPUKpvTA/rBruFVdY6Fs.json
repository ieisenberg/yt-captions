[
  {
    "text": "hello my name is Andre Wapel and today's presentation about Kubernetes is a new",
    "start": "5759",
    "end": "11360"
  },
  {
    "text": "Skynet or the rise of Kubernetes automation uh in this presentation I'm",
    "start": "11360",
    "end": "17440"
  },
  {
    "text": "going to show you some sort of technologies we used uh for building our",
    "start": "17440",
    "end": "22480"
  },
  {
    "text": "own platform such technologies as talis linux cube weird kamaji and things like",
    "start": "22480",
    "end": "29920"
  },
  {
    "text": "that uh I will explain how they works and how we used actually our approaches",
    "start": "29920",
    "end": "36480"
  },
  {
    "text": "how we used them to prepare the platform uh a few words about me um I start my",
    "start": "36480",
    "end": "43760"
  },
  {
    "text": "Kubernetes experience for a long time ago since 2023 I founded new company uh",
    "start": "43760",
    "end": "50960"
  },
  {
    "text": "for developing open-source platform for provisioning managed services the main",
    "start": "50960",
    "end": "56640"
  },
  {
    "text": "target audience for this product is uh hosting providers or internet service",
    "start": "56640",
    "end": "62039"
  },
  {
    "text": "providers uh we help them to extend their profile with managed Kubernetes",
    "start": "62039",
    "end": "67479"
  },
  {
    "text": "services and um managed databases queries and things like so um so let's",
    "start": "67479",
    "end": "76320"
  },
  {
    "text": "talk about how you can build your own platform and we can split this presentation for four different topics",
    "start": "76320",
    "end": "82880"
  },
  {
    "text": "the first one is Kubernetes on prem challenge uh and first let me ask if you",
    "start": "82880",
    "end": "88960"
  },
  {
    "text": "like using Kubernetes in cloud i guess yes but there is a joke that there is no cloud it's just someone else computer",
    "start": "88960",
    "end": "96640"
  },
  {
    "text": "so uh if you're internet service provider or if you're just ordinary Kubernetes user if you're ordinary",
    "start": "96640",
    "end": "102799"
  },
  {
    "text": "Kubernetes user you just you just work with smallest Kubernetes part actually Kubernetes API the rest part are usually",
    "start": "102799",
    "end": "111040"
  },
  {
    "text": "done by crow cloud provider and they uh should solve a lot of things like how to",
    "start": "111040",
    "end": "117119"
  },
  {
    "text": "provision bare metal nodes how to configure uh persistent volume provisioning networking uh kernel",
    "start": "117119",
    "end": "125040"
  },
  {
    "text": "updates etc management and things like so so if you're Kubernetes user you",
    "start": "125040",
    "end": "130160"
  },
  {
    "text": "don't want to take care about this but if we talk from the cloud provider",
    "start": "130160",
    "end": "135840"
  },
  {
    "text": "perspective you should know how to do that the best uh way so my presentation",
    "start": "135840",
    "end": "142239"
  },
  {
    "text": "is more about for internet service providers if you want to build your own cloud for",
    "start": "142239",
    "end": "147879"
  },
  {
    "text": "Kubernetes and let me explain how it works so if you if you work with",
    "start": "147879",
    "end": "153440"
  },
  {
    "text": "Kubernetes in cloud you usually work with such scheme when you have Kubernetes control plane uh you",
    "start": "153440",
    "end": "160239"
  },
  {
    "text": "communicate direct directly with it and you have worker nodes persistent volumes",
    "start": "160239",
    "end": "165840"
  },
  {
    "text": "and load balancers which are balancing uh the load to your the traffic to your",
    "start": "165840",
    "end": "173560"
  },
  {
    "text": "workload you can scale this cluster down you can scale this cluster up with",
    "start": "173560",
    "end": "179680"
  },
  {
    "text": "autoscaler you can even remove all of your worker nodes then run them again",
    "start": "179680",
    "end": "186000"
  },
  {
    "text": "your application will continue working um after the nodes are created the same",
    "start": "186000",
    "end": "192239"
  },
  {
    "text": "persistent volumes which are managed externally and the same load balancer will continue uh routing this traffic",
    "start": "192239",
    "end": "198959"
  },
  {
    "text": "into the worker nodes which are handling your workload so nothing will be broken",
    "start": "198959",
    "end": "205519"
  },
  {
    "text": "and this he is very granular and it works very well um but in case if you want to create",
    "start": "205519",
    "end": "212159"
  },
  {
    "text": "your own cloud for Kubernetes you have few options uh by the way if we talk",
    "start": "212159",
    "end": "217760"
  },
  {
    "text": "about Kubernetes on bare metal we usually means that we have some bare metal nodes and we install Kubernetes on",
    "start": "217760",
    "end": "224920"
  },
  {
    "text": "them um you can use various tools for example K3s or cube button or cube spray",
    "start": "224920",
    "end": "232000"
  },
  {
    "text": "there are a lot of options but uh instead of this amazing scheme on bare",
    "start": "232000",
    "end": "238159"
  },
  {
    "text": "metal you usually get something like this and this he is little bit more complicated I would",
    "start": "238159",
    "end": "245360"
  },
  {
    "text": "say uh because it have no convenient management uh the updates are quite",
    "start": "245360",
    "end": "251200"
  },
  {
    "text": "painful because the workloads running on these bare metal nodes it should be um",
    "start": "251200",
    "end": "257120"
  },
  {
    "text": "prepared to be running uh in such way and be ready to migrate to another nodes",
    "start": "257120",
    "end": "263360"
  },
  {
    "text": "handle high ability and things like so and of course uh those bare metal nodes",
    "start": "263360",
    "end": "269440"
  },
  {
    "text": "are difficult to scale um you might have some options to configure after scaling",
    "start": "269440",
    "end": "275520"
  },
  {
    "text": "for bare metal nodes but it is not so flexible like for BL machines and of",
    "start": "275520",
    "end": "280560"
  },
  {
    "text": "course you have no multi-tenency kubernetes is nice um platform but it",
    "start": "280560",
    "end": "286400"
  },
  {
    "text": "was never considered as platform like OpenStack or Open Nebula to to implement",
    "start": "286400",
    "end": "293680"
  },
  {
    "text": "hard multi-tenency model hard multi-tenency means that your um tenants cannot affect each other and",
    "start": "293680",
    "end": "302240"
  },
  {
    "text": "they actually knows nothing about each other and can affect each other uh in",
    "start": "302240",
    "end": "307520"
  },
  {
    "text": "Kubernetes we have soft multi-tenency model and it might work not so very well on bare metal nodes when you let totally",
    "start": "307520",
    "end": "317039"
  },
  {
    "text": "different users to access your cluster so um in this way if you're trying to",
    "start": "317039",
    "end": "324080"
  },
  {
    "text": "solve this um usually means that you need to have separate Kubernetes cluster",
    "start": "324080",
    "end": "329560"
  },
  {
    "text": "for each development team for each project and if you're trying to solve",
    "start": "329560",
    "end": "334960"
  },
  {
    "text": "this case you usually become to the idea of using private cloud um in this way",
    "start": "334960",
    "end": "340880"
  },
  {
    "text": "you can use OpenStack to bootstrap uh OpenStack on your bare metal nodes and",
    "start": "340880",
    "end": "346880"
  },
  {
    "text": "then start um spawning multiple Kubernetes clusters right in it just for",
    "start": "346880",
    "end": "353039"
  },
  {
    "text": "Kubernetes for every project Kubernetes for development team uh in this way OpenStack provides you really nice level",
    "start": "353039",
    "end": "360080"
  },
  {
    "text": "of isolation uh but the problem who is responsible for OpenStack",
    "start": "360080",
    "end": "366880"
  },
  {
    "text": "uh if you want to keep OpenStack uh in your infrastructure you should know that",
    "start": "366880",
    "end": "372080"
  },
  {
    "text": "it is very difficult it consists of many",
    "start": "372080",
    "end": "377319"
  },
  {
    "text": "um many microservices which are connected to each other and it might be",
    "start": "377319",
    "end": "382880"
  },
  {
    "text": "really difficult to manage usually means if you have OpenStack in your infrastructure that you have dedicated",
    "start": "382880",
    "end": "389199"
  },
  {
    "text": "specialists who are responsible for updating and maintaining this OpenStack",
    "start": "389199",
    "end": "395160"
  },
  {
    "text": "system uh and now I just want to say that there is other options so you can use",
    "start": "395160",
    "end": "402479"
  },
  {
    "text": "Kubernetes to run Kubernetes for now nowadays Kubernetes already um have",
    "start": "402479",
    "end": "410319"
  },
  {
    "text": "everything need to run virtual machines and other virtualizated Kubernetes",
    "start": "410319",
    "end": "415600"
  },
  {
    "text": "clusters right in it so you you can replace your OpenStack with ordinary Kubernetes distribution and start",
    "start": "415600",
    "end": "423319"
  },
  {
    "text": "creating separate tenant Kubernetes clusters in it so we even call it like",
    "start": "423319",
    "end": "428800"
  },
  {
    "text": "management kubernetes cluster uh the cluster you install on bare metal that's",
    "start": "428800",
    "end": "435360"
  },
  {
    "text": "actually kubernetes cluster for which your infrastructure team is responsible",
    "start": "435360",
    "end": "441199"
  },
  {
    "text": "and um you can have multiple tenant clusters which are running actual",
    "start": "441199",
    "end": "446560"
  },
  {
    "text": "workloads and you can just cut separate kubernetes cluster and give to your",
    "start": "446560",
    "end": "452240"
  },
  {
    "text": "developers they will be happy to use it uh this h is works fine because first",
    "start": "452240",
    "end": "458800"
  },
  {
    "text": "you have same ecosystem for both uh you can use the same tool set um like you",
    "start": "458800",
    "end": "465599"
  },
  {
    "text": "can use helm or standard approaches like cicd for deploying the workloads on both",
    "start": "465599",
    "end": "471759"
  },
  {
    "text": "and managing both clusters uh here we have really hard multi-tenencies so",
    "start": "471759",
    "end": "478080"
  },
  {
    "text": "since our clusters are running in virtual machines that allows you to",
    "start": "478080",
    "end": "483560"
  },
  {
    "text": "um to isolate the workloads between tenants and they can't affect each other",
    "start": "483560",
    "end": "490319"
  },
  {
    "text": "the tenant clusters implement the same cloud pattern so you have Kubernetes control plane running separately you",
    "start": "490319",
    "end": "496800"
  },
  {
    "text": "have separate worker nodes separate PVS and load balancer that works pretty fine",
    "start": "496800",
    "end": "503120"
  },
  {
    "text": "almost for every application and management cluster still use this where you have stacked storage",
    "start": "503120",
    "end": "510400"
  },
  {
    "text": "and load balancer and control pane uh but for now it is not a big deal because",
    "start": "510400",
    "end": "516959"
  },
  {
    "text": "uh this cluster um runs only certain set of workloads",
    "start": "516959",
    "end": "522320"
  },
  {
    "text": "uh and you can be sure that they can handle this kind of working in this kind",
    "start": "522320",
    "end": "527360"
  },
  {
    "text": "of team so it is usually responsible only for running virtual machines",
    "start": "527360",
    "end": "532720"
  },
  {
    "text": "Kubernetes clusters and databases as a service uh the rest stuff like user",
    "start": "532720",
    "end": "539680"
  },
  {
    "text": "based workloads they usually put to your their own kubernetes clusters or their",
    "start": "539680",
    "end": "544720"
  },
  {
    "text": "own virtual machines in this way we decided to create platform which would allow you to",
    "start": "544720",
    "end": "552080"
  },
  {
    "text": "uh share our experience by simple box solution which you can get and install",
    "start": "552080",
    "end": "557200"
  },
  {
    "text": "on your hardware so the main idea of our platform that you can take bunch of your",
    "start": "557200",
    "end": "562880"
  },
  {
    "text": "servers and simply transform them into intelligent system where you can order managed services like kubernetes as a",
    "start": "562880",
    "end": "570480"
  },
  {
    "text": "service posgress as a service virtual machines and things like so uh those",
    "start": "570480",
    "end": "576000"
  },
  {
    "text": "services already have monitoring configured um and you can interact with the",
    "start": "576000",
    "end": "581600"
  },
  {
    "text": "platform using ordinary Kubernetes API um this is how it looks like so we",
    "start": "581600",
    "end": "588080"
  },
  {
    "text": "have dashboard with the tiles and some applications which you want you can just",
    "start": "588080",
    "end": "594800"
  },
  {
    "text": "choose them click and install for example if you want virtual machine you set some parameters every",
    "start": "594800",
    "end": "601760"
  },
  {
    "text": "parameter also can be defined in YAML form and then um it get deploys the",
    "start": "601760",
    "end": "607360"
  },
  {
    "text": "virtual machine in Kubernetes itself now let's talk about how does this work we",
    "start": "607360",
    "end": "613760"
  },
  {
    "text": "can split our platform for four different layers on layer one we have operating system and hardware that means",
    "start": "613760",
    "end": "621600"
  },
  {
    "text": "um on this layer we managing Linux kernel uh the basic system uh and also",
    "start": "621600",
    "end": "628000"
  },
  {
    "text": "this layer is providing us um Kubernetes the main Kubernetes API which we can use",
    "start": "628000",
    "end": "634399"
  },
  {
    "text": "for deliver all the rest components um the rest components we use is actually",
    "start": "634399",
    "end": "640560"
  },
  {
    "text": "storage uh we use lin store for this uh networking based on OVN and",
    "start": "640560",
    "end": "647360"
  },
  {
    "text": "virtualization based on cube on layer three we have uh operators for provisioning our databases cluster API",
    "start": "647360",
    "end": "655360"
  },
  {
    "text": "and monitoring on layer four uh it's more likely userface layer um we have",
    "start": "655360",
    "end": "662399"
  },
  {
    "text": "this amazing dashboard where you can click and install some applications like virtual machines databases and",
    "start": "662399",
    "end": "668560"
  },
  {
    "text": "kubernetes so the layer one is um done by Talis Linux uh it is smallest operating system",
    "start": "668560",
    "end": "677279"
  },
  {
    "text": "dedicated for installing Kubernetes uh it is very interesting because it have no any binaries inside it is purely",
    "start": "677279",
    "end": "685360"
  },
  {
    "text": "written on Go it have Kubernetes similar API and it allows you to configure your",
    "start": "685360",
    "end": "692160"
  },
  {
    "text": "machine um write the similar way like you configure in Kubernetes",
    "start": "692160",
    "end": "698000"
  },
  {
    "text": "uh the rest layers like layer 2 and three uh they are handled by fluxid so",
    "start": "698000",
    "end": "703120"
  },
  {
    "text": "we use fluxid and the library helm charts uh we have system ones and we have um application layer layer 4 it is",
    "start": "703120",
    "end": "711600"
  },
  {
    "text": "also backed by fluxid but it also have our own customized kubernetes API server",
    "start": "711600",
    "end": "718000"
  },
  {
    "text": "uh which shows all of these helm charts as uh kubernetes objects uh let's talk about the layer",
    "start": "718000",
    "end": "725440"
  },
  {
    "text": "one and talis linux itself and let's switch to the next topic uh hardware and",
    "start": "725440",
    "end": "731360"
  },
  {
    "text": "operating system management uh let's say you have infrastructure it could be virtual",
    "start": "731360",
    "end": "738040"
  },
  {
    "text": "machines um those virtual machines can be running in cloud or on prem or that",
    "start": "738040",
    "end": "744560"
  },
  {
    "text": "could be bare metal servers itself uh Talis Linux has ready made ready made",
    "start": "744560",
    "end": "750480"
  },
  {
    "text": "images for everything so you can use um some",
    "start": "750480",
    "end": "755680"
  },
  {
    "text": "providers for example Proximus or OpenStack you can just simply download Talis Linux image import it and start",
    "start": "755680",
    "end": "763600"
  },
  {
    "text": "using immediately the only thing you need to do afterwards is just to apply",
    "start": "763600",
    "end": "768639"
  },
  {
    "text": "configuration to this uh running Talis Linux system uh in case if you want to",
    "start": "768639",
    "end": "775120"
  },
  {
    "text": "use bare metal nodes you can use some more basic methods like ISO installation",
    "start": "775120",
    "end": "780320"
  },
  {
    "text": "or Pixim booting method uh you can also try to on your local",
    "start": "780320",
    "end": "785600"
  },
  {
    "text": "platform like docker it can work inside of your uh docker u but it is more",
    "start": "785600",
    "end": "792399"
  },
  {
    "text": "likely for development needs uh so if you want to use talis linux let me explain how it works uh you",
    "start": "792399",
    "end": "800880"
  },
  {
    "text": "just boot this image in your machines and then you can configure it with single configuration file this single",
    "start": "800880",
    "end": "807760"
  },
  {
    "text": "configuration file looks like this uh it consists of two sections the",
    "start": "807760",
    "end": "814079"
  },
  {
    "text": "machine section which describes specific machine and the cluster section which describes the configuration for whole",
    "start": "814079",
    "end": "821560"
  },
  {
    "text": "cluster um in machine section you can specify the type of machine uh",
    "start": "821560",
    "end": "826959"
  },
  {
    "text": "certificate settings networking settings and disk to install in cluster section",
    "start": "826959",
    "end": "833440"
  },
  {
    "text": "you can specify control plane for Kubernetes the same as certificates for",
    "start": "833440",
    "end": "838480"
  },
  {
    "text": "Kubernetes various components um configuration like API server cublet",
    "start": "838480",
    "end": "844839"
  },
  {
    "text": "etc and afterwards after you filling all of these settings you can just usel the",
    "start": "844839",
    "end": "851440"
  },
  {
    "text": "similar tool like cubectl and apply this configuration to the node so this node",
    "start": "851440",
    "end": "857040"
  },
  {
    "text": "after applying this node get configured uh there are similar to kubernetes",
    "start": "857040",
    "end": "862720"
  },
  {
    "text": "controllers which um moving the real state to desired state you described in",
    "start": "862720",
    "end": "868800"
  },
  {
    "text": "configuration file so if you want to bootstrap the whole cluster you usually need to run commands like ttl get",
    "start": "868800",
    "end": "876639"
  },
  {
    "text": "secrets it will create secrets file with all the secrets for your cluster and",
    "start": "876639",
    "end": "882160"
  },
  {
    "text": "then you can use this class this uh file for generating configuration for the",
    "start": "882160",
    "end": "887440"
  },
  {
    "text": "other nodes so you can uh run command gen configuration with secrets and",
    "start": "887440",
    "end": "893040"
  },
  {
    "text": "you'll get three separate um configuration files first is talis",
    "start": "893040",
    "end": "898519"
  },
  {
    "text": "config um this is pretty similar to cube config uh you can use to access talis",
    "start": "898519",
    "end": "904399"
  },
  {
    "text": "API itself and you have two examples for control plane node and for worker if you",
    "start": "904399",
    "end": "911519"
  },
  {
    "text": "want to bootstrap your node you can just apply this configuration using talisl apply command and specify the node where",
    "start": "911519",
    "end": "920160"
  },
  {
    "text": "you want to apply this uh configuration so if you want to bootstrap the cluster you have to apply",
    "start": "920160",
    "end": "926800"
  },
  {
    "text": "the configuration to multiple nodes and then run talisl bootstrap command on one",
    "start": "926800",
    "end": "932079"
  },
  {
    "text": "of the node it will actually initiate the new etc cluster so the nodes will",
    "start": "932079",
    "end": "938000"
  },
  {
    "text": "find each other and they will start uh kubernetes cluster so you can actually",
    "start": "938000",
    "end": "944320"
  },
  {
    "text": "access it if you want to update some node you just apply the configuration again uh and run tacl upgrade command it",
    "start": "944320",
    "end": "952320"
  },
  {
    "text": "will gracefully remove all the workloads from the cluster upgrade itself and then",
    "start": "952320",
    "end": "957680"
  },
  {
    "text": "join back to the cluster okay how can we access this Kubernetes",
    "start": "957680",
    "end": "962920"
  },
  {
    "text": "cluster in Talis configuration you have this VIP setting uh you can assign it",
    "start": "962920",
    "end": "969680"
  },
  {
    "text": "only for control plane node for some specific interface it works pretty similar like VRP but it is not VRP it's",
    "start": "969680",
    "end": "978000"
  },
  {
    "text": "fully controlled in user space by checking ATCD state so uh you can",
    "start": "978000",
    "end": "983759"
  },
  {
    "text": "specify your virtual IP address here it will create floating IP which will move",
    "start": "983759",
    "end": "988959"
  },
  {
    "text": "between the uh nodes so in your cube config you can have uh this virtual IP",
    "start": "988959",
    "end": "995120"
  },
  {
    "text": "address specified so if you access your cluster uh you will always go through",
    "start": "995120",
    "end": "1000480"
  },
  {
    "text": "this floating IP address it will be moved automatically every time if you put your node to maintenance if you",
    "start": "1000480",
    "end": "1007279"
  },
  {
    "text": "reboot so your cluster will continue be available um seems pretty simple that's probably",
    "start": "1007279",
    "end": "1016279"
  },
  {
    "text": "it uh we also found that many users don't want to understand this talis",
    "start": "1016279",
    "end": "1022480"
  },
  {
    "text": "configuration they just want to try and we wanted to automate it somehow so we",
    "start": "1022480",
    "end": "1028880"
  },
  {
    "text": "built our own method for installation it's called talis bootstrap um it works pretty similar it",
    "start": "1028880",
    "end": "1035678"
  },
  {
    "text": "actually shell script which allows you to bootstrap your nodes first we proide",
    "start": "1035679",
    "end": "1042240"
  },
  {
    "text": "DCP and Pixie server in docker images that allows you to boot your",
    "start": "1042240",
    "end": "1047798"
  },
  {
    "text": "nodes so they get boot talis linux into maintenance no mode and then you can use",
    "start": "1047799",
    "end": "1054720"
  },
  {
    "text": "talis bootstrap to create cluster communicating through it let's see how it works so after your nodes get booted",
    "start": "1054720",
    "end": "1062960"
  },
  {
    "text": "it allows you to find all the nodes in the network you can choose the node enter host name choose disk to install",
    "start": "1062960",
    "end": "1070799"
  },
  {
    "text": "enter IP address virtual IP address and finally you get a configuration file",
    "start": "1070799",
    "end": "1076960"
  },
  {
    "text": "which you just apply to your node then it get rebooted and then you repeat that",
    "start": "1076960",
    "end": "1084320"
  },
  {
    "text": "uh every time for every node and in five minutes you can get ready cluster",
    "start": "1084320",
    "end": "1089840"
  },
  {
    "text": "um also we prepare our own um Talis Linux image which includes all the",
    "start": "1089840",
    "end": "1096480"
  },
  {
    "text": "needed kernel modules which you use in our system that actually allows us to",
    "start": "1096480",
    "end": "1102240"
  },
  {
    "text": "create basic um and stable layer one for our platform so we can be sure that this",
    "start": "1102240",
    "end": "1109440"
  },
  {
    "text": "layer always consists of needed kernel modules u always running the similar",
    "start": "1109440",
    "end": "1115600"
  },
  {
    "text": "kernel version so we can be sure that it is stable base for our",
    "start": "1115600",
    "end": "1121000"
  },
  {
    "text": "platform and now let's talk about the rest stuff um actually system components",
    "start": "1121000",
    "end": "1127840"
  },
  {
    "text": "how we deliver our system components so usually if you have some",
    "start": "1127840",
    "end": "1133039"
  },
  {
    "text": "system components uh such search manager rollar success control CI monitoring",
    "start": "1133039",
    "end": "1140000"
  },
  {
    "text": "stuff all of these things um can be delivered using fluxid and talis Linux",
    "start": "1140000",
    "end": "1146320"
  },
  {
    "text": "works very well with fluxid uh so fluxidity can take uh your",
    "start": "1146320",
    "end": "1152240"
  },
  {
    "text": "helm charts and just simply install on your cluster uh even in talis Linux",
    "start": "1152240",
    "end": "1157600"
  },
  {
    "text": "configuration you can specify extra manifests which are should be applied to your uh cluster um the only thing it",
    "start": "1157600",
    "end": "1166480"
  },
  {
    "text": "works not very well because um we found that sometimes it might be better to do",
    "start": "1166480",
    "end": "1173520"
  },
  {
    "text": "intentionally uh rather than providing the configuration such way so our method is",
    "start": "1173520",
    "end": "1179760"
  },
  {
    "text": "slightly different because we don't use g we actually want to make box solution",
    "start": "1179760",
    "end": "1184880"
  },
  {
    "text": "and we did this box solution and we utilized flux for that let me explain how it works so we let user to create um",
    "start": "1184880",
    "end": "1194320"
  },
  {
    "text": "single yaml configuration after their talis linux um cluster get bootstrapped",
    "start": "1194320",
    "end": "1201120"
  },
  {
    "text": "they only create single yaml file creates actually the uh container and",
    "start": "1201120",
    "end": "1207520"
  },
  {
    "text": "this container contains all the needed helm charts to use in our system it also installs it also have",
    "start": "1207520",
    "end": "1215840"
  },
  {
    "text": "small script to install fluxid and then all the rest stuff like installing",
    "start": "1215840",
    "end": "1221039"
  },
  {
    "text": "components is done by fluxid so fluxid takes those those helm charts from the",
    "start": "1221039",
    "end": "1226960"
  },
  {
    "text": "container and bootstraps and installs them into existing kubernetes cluster if",
    "start": "1226960",
    "end": "1232960"
  },
  {
    "text": "we want to update the platform we just replace this container with new helm charts and flux just um updates them in",
    "start": "1232960",
    "end": "1241120"
  },
  {
    "text": "a in a cluster very simple such way we deliver um the storage our storage is",
    "start": "1241120",
    "end": "1248640"
  },
  {
    "text": "based on din store which is pretty um reliable solution because it works",
    "start": "1248640",
    "end": "1255039"
  },
  {
    "text": "with time- tested technologies like LVM and ZFS and in case if you need",
    "start": "1255039",
    "end": "1260640"
  },
  {
    "text": "replication it also can enable it using DRBD uh we also deliver OVN uh the thing",
    "start": "1260640",
    "end": "1268799"
  },
  {
    "text": "we use for running virtual machines it allows you to move IP addresses between",
    "start": "1268799",
    "end": "1274400"
  },
  {
    "text": "the nodes which are ordinary CI plugins in Kubernetes can't do um so cube virt",
    "start": "1274400",
    "end": "1283039"
  },
  {
    "text": "also coming such way uh monitoring stack based on victory matrix and things like",
    "start": "1283039",
    "end": "1289440"
  },
  {
    "text": "so so we deliver all the system components using fluxid and now let's",
    "start": "1289440",
    "end": "1295440"
  },
  {
    "text": "talk about the most interesting part how user uh working with our application so",
    "start": "1295440",
    "end": "1301840"
  },
  {
    "text": "we have um user applications such as managed kubernetes managed databases vual",
    "start": "1301840",
    "end": "1309880"
  },
  {
    "text": "machines S3 storage uh all of them are listed in this dashboard and uh managed",
    "start": "1309880",
    "end": "1317200"
  },
  {
    "text": "by Flaxity but as I mentioned before we have our own customized Kubernetes API",
    "start": "1317200",
    "end": "1322880"
  },
  {
    "text": "server uh we prepared using Kubernetes API aggregation technology um so we can",
    "start": "1322880",
    "end": "1328960"
  },
  {
    "text": "dynamically extend the Kubernetes with new kinds which are not CRDs they kind",
    "start": "1328960",
    "end": "1334480"
  },
  {
    "text": "of CRDs but they not CRDs uh they actually simply transcode it into flux",
    "start": "1334480",
    "end": "1340960"
  },
  {
    "text": "resources you can operate with such resources like virtual machine posgress",
    "start": "1340960",
    "end": "1346159"
  },
  {
    "text": "kubernetes uh but anytime if you create such resources in kubernetes API they",
    "start": "1346159",
    "end": "1352320"
  },
  {
    "text": "automatically translate it to flaxd helm releases so in this way you can simply",
    "start": "1352320",
    "end": "1357520"
  },
  {
    "text": "extend the platform with new kinds you can prepare you can use helm to prepare",
    "start": "1357520",
    "end": "1362640"
  },
  {
    "text": "um the any application and specify uh new kind for it uh let me show how it",
    "start": "1362640",
    "end": "1370960"
  },
  {
    "text": "works let's start from the virtual machine uh if you create virtual machine",
    "start": "1370960",
    "end": "1376159"
  },
  {
    "text": "you usually create this kind of uh resource you can see we have apps cozy",
    "start": "1376159",
    "end": "1381760"
  },
  {
    "text": "stack io this kind virtual machine inspec we have some",
    "start": "1381760",
    "end": "1387720"
  },
  {
    "text": "values after you create this resource it get managed by Helm itself uh it also",
    "start": "1387720",
    "end": "1394240"
  },
  {
    "text": "creates virtual machine for cube and it is still managed by cube and this is",
    "start": "1394240",
    "end": "1399360"
  },
  {
    "text": "very important because helm does not provide you full life cycle management um only operator can provide you and",
    "start": "1399360",
    "end": "1407039"
  },
  {
    "text": "cube such operator for virtual machines if we will take for example database as",
    "start": "1407039",
    "end": "1412559"
  },
  {
    "text": "a service uh we also provide such opportunities to create posgress mari",
    "start": "1412559",
    "end": "1418400"
  },
  {
    "text": "radius and things like so uh all of these databases are managed by operators",
    "start": "1418400",
    "end": "1424559"
  },
  {
    "text": "but our um API still based on Helm that",
    "start": "1424559",
    "end": "1429840"
  },
  {
    "text": "allows you to create this uh standardized um options for the users so",
    "start": "1429840",
    "end": "1436480"
  },
  {
    "text": "they are capable to change only specific parameters and the more important that",
    "start": "1436480",
    "end": "1442799"
  },
  {
    "text": "you can uh extend the platform very quickly so anytime when they create new radius it actually creates",
    "start": "1442799",
    "end": "1450919"
  },
  {
    "text": "um the resources for this database and it is still managed by operators for",
    "start": "1450919",
    "end": "1456320"
  },
  {
    "text": "example radius cluster it creates free extra yaml like radius failover for",
    "start": "1456320",
    "end": "1462400"
  },
  {
    "text": "spotome operator the service for accessing and VM scrape for scraping the",
    "start": "1462400",
    "end": "1469000"
  },
  {
    "text": "metrics uh this is how it works the more interested part how Kubernetes is",
    "start": "1469000",
    "end": "1474520"
  },
  {
    "text": "organized uh since we provide fully functional Kubernetes cluster",
    "start": "1474520",
    "end": "1480159"
  },
  {
    "text": "um what is what does it mean fully functional uh actually it is not just",
    "start": "1480159",
    "end": "1486720"
  },
  {
    "text": "simple install Kubernetes on virtual machines and give it to the user you need to enable persistent volume",
    "start": "1486720",
    "end": "1493000"
  },
  {
    "text": "provisioners uh you need to have load balancers cluster to scaling and all of",
    "start": "1493000",
    "end": "1498640"
  },
  {
    "text": "these things uh we provide them uh for control plane we use such project as",
    "start": "1498640",
    "end": "1506320"
  },
  {
    "text": "kamaji kamaji actually allows you to run your control plane components like API",
    "start": "1506320",
    "end": "1512159"
  },
  {
    "text": "serverware controller manager uh scheduleuler and connectivity as simple",
    "start": "1512159",
    "end": "1517520"
  },
  {
    "text": "pods uh you can run your control plane components as spots and then you can",
    "start": "1517520",
    "end": "1523440"
  },
  {
    "text": "create virtual machines and join those virtual machines to this created control",
    "start": "1523440",
    "end": "1529480"
  },
  {
    "text": "plane um the logic is the same kubernetes is the same helm chart",
    "start": "1529480",
    "end": "1535159"
  },
  {
    "text": "application which is which creates set of resources managed by other operators",
    "start": "1535159",
    "end": "1541200"
  },
  {
    "text": "um for example if you create such resource like kubernetes application it creates cluster kamagi control plane",
    "start": "1541200",
    "end": "1548960"
  },
  {
    "text": "cube v cluster machine deployment cube v machine template and cube cube button",
    "start": "1548960",
    "end": "1554000"
  },
  {
    "text": "config template those entities are managed by various providers in terms of",
    "start": "1554000",
    "end": "1559279"
  },
  {
    "text": "uh cluster API uh so Kamaji control plane managed by Kamachi control plane",
    "start": "1559279",
    "end": "1565039"
  },
  {
    "text": "provider the cube uh cluster and cube machine template managed by cube",
    "start": "1565039",
    "end": "1570480"
  },
  {
    "text": "infrastructure provider and cube button config template managed by uh cube",
    "start": "1570480",
    "end": "1575760"
  },
  {
    "text": "button bootstrap provider actually the logic of this is um bootstrap provider",
    "start": "1575760",
    "end": "1582400"
  },
  {
    "text": "out of cube button config template create a secret for virtual machine which has",
    "start": "1582400",
    "end": "1588760"
  },
  {
    "text": "um a cube button join command with a token which allows you to run if you run virtual machine with this uh cloud init",
    "start": "1588760",
    "end": "1596720"
  },
  {
    "text": "configuration it will just simply join to the um to the kubernetes control plane while",
    "start": "1596720",
    "end": "1605679"
  },
  {
    "text": "machine deployment is pretty similar resource in cube uh it actually creates",
    "start": "1605679",
    "end": "1611600"
  },
  {
    "text": "machine set and machine and this machine is actually managed by uh cube or any",
    "start": "1611600",
    "end": "1618799"
  },
  {
    "text": "other cluster API operator in our case we use cube uh because it allows you to",
    "start": "1618799",
    "end": "1624320"
  },
  {
    "text": "run virtual machines as spots in your cluster and what about multi-tenency uh so we were constructing",
    "start": "1624320",
    "end": "1632080"
  },
  {
    "text": "our system uh with design that user have no access to management cluster user can",
    "start": "1632080",
    "end": "1638559"
  },
  {
    "text": "have access to your their own tenant Kubernetes clusters they can request load balancers persistent volumes right",
    "start": "1638559",
    "end": "1646000"
  },
  {
    "text": "from this but um have no access to the controllers managing this so all of",
    "start": "1646000",
    "end": "1652080"
  },
  {
    "text": "these controllers are running outside of the tenant Kubernetes cluster um they can order PVC for example they",
    "start": "1652080",
    "end": "1659520"
  },
  {
    "text": "will magically appear in their cluster but uh they will not see controller communicating with management Kubernetes",
    "start": "1659520",
    "end": "1666919"
  },
  {
    "text": "cluster uh so the main logic was that user can access only their provision",
    "start": "1666919",
    "end": "1674080"
  },
  {
    "text": "services or order new services through the some um middleware for example",
    "start": "1674080",
    "end": "1680559"
  },
  {
    "text": "website or your billing system for now we changed this logic a little bit so it allows you to also to give user access",
    "start": "1680559",
    "end": "1688000"
  },
  {
    "text": "to the Kubernetes API management cluster so they will have this dashboard where",
    "start": "1688000",
    "end": "1693840"
  },
  {
    "text": "they can order the services uh if we talk about multi-tenency we implement",
    "start": "1693840",
    "end": "1700640"
  },
  {
    "text": "such model model like um Unix way if we can say uh by default we have tenant",
    "start": "1700640",
    "end": "1707440"
  },
  {
    "text": "root like root user in Linux um but every tenant also have also a specific",
    "start": "1707440",
    "end": "1714399"
  },
  {
    "text": "domain assigned so for example tenant root can have example orc and if you",
    "start": "1714399",
    "end": "1719919"
  },
  {
    "text": "create new tenant you can create them uh hierarchally um so you can create new",
    "start": "1719919",
    "end": "1725600"
  },
  {
    "text": "tenant uh for example tenant food it will get new subdomain um as name of",
    "start": "1725600",
    "end": "1731840"
  },
  {
    "text": "tenant to this um default domain and the",
    "start": "1731840",
    "end": "1737200"
  },
  {
    "text": "next um tenant also I will create another subdomain that is used for",
    "start": "1737200",
    "end": "1742240"
  },
  {
    "text": "automatic configuration so if you create um actually all the tenants are particularly um Kubernetes name spaces",
    "start": "1742240",
    "end": "1750159"
  },
  {
    "text": "and if you deploy some applications inside of these application inside of these name spaces they automatically get",
    "start": "1750159",
    "end": "1756799"
  },
  {
    "text": "a host name for accessing these services according to the tenant host name also",
    "start": "1756799",
    "end": "1764240"
  },
  {
    "text": "uh we reimplemented Linux kernel name spaces in terms of uh tenant isolation",
    "start": "1764240",
    "end": "1771679"
  },
  {
    "text": "that means that you can have tenant root which holds uh these kind of specific",
    "start": "1771679",
    "end": "1777760"
  },
  {
    "text": "services uh like etc for storing kubernetes monitoring hub inress and also we have",
    "start": "1777760",
    "end": "1784480"
  },
  {
    "text": "cvidfs for s3 uh every time when you create new tenant",
    "start": "1784480",
    "end": "1789679"
  },
  {
    "text": "you can say if you want to have them isolated uh etc or monitoring or this kind of",
    "start": "1789679",
    "end": "1797559"
  },
  {
    "text": "services if you run tenant without isolation so you can create tenant without isolation by monitoring uh the",
    "start": "1797559",
    "end": "1805279"
  },
  {
    "text": "applications running in this tenant they will automatically configure to use um",
    "start": "1805279",
    "end": "1810799"
  },
  {
    "text": "monitoring of upper tenants yeah by default the tenants from the top always have access to tenants in the bottom but",
    "start": "1810799",
    "end": "1818640"
  },
  {
    "text": "tenants from the bottom have no access to tenants in the top so in this way you",
    "start": "1818640",
    "end": "1823760"
  },
  {
    "text": "can simply create uh the same when you have one organization",
    "start": "1823760",
    "end": "1828799"
  },
  {
    "text": "uh with single graphana and you can have isolation by developer teams they can",
    "start": "1828799",
    "end": "1834159"
  },
  {
    "text": "have separate services running and still have access to the same graphana this",
    "start": "1834159",
    "end": "1840159"
  },
  {
    "text": "might be really convenient and allows you to save resources if you don't want to have separation by TCD or monitoring",
    "start": "1840159",
    "end": "1848159"
  },
  {
    "text": "you can actually run everything in tenant route and still have isolation between the",
    "start": "1848159",
    "end": "1853480"
  },
  {
    "text": "users so finally we got uh the scheme where our all our environments are",
    "start": "1853480",
    "end": "1859120"
  },
  {
    "text": "unified and reproducible uh we have simple installation to try for our users um our",
    "start": "1859120",
    "end": "1867520"
  },
  {
    "text": "platform covers all the infrastructure st uh needed to build your own cloud it",
    "start": "1867520",
    "end": "1873120"
  },
  {
    "text": "is easy to extend and we are open source come to our GitHub project and give",
    "start": "1873120",
    "end": "1880000"
  },
  {
    "text": "stars i will provide you links to the projects mentioned in this presentation",
    "start": "1880000",
    "end": "1885440"
  },
  {
    "text": "the first one is Talis Linux the second is our platform uh of course Kama which",
    "start": "1885440",
    "end": "1892320"
  },
  {
    "text": "allows you to provision Kubernetes control planes and the set of my articles on kubernetes.io io which",
    "start": "1892320",
    "end": "1899120"
  },
  {
    "text": "describes how the things work and if you're interested in commercial support",
    "start": "1899120",
    "end": "1904399"
  },
  {
    "text": "feel free to contact us we will provide you all type of services for building",
    "start": "1904399",
    "end": "1909760"
  },
  {
    "text": "your own cloud",
    "start": "1909760",
    "end": "1912559"
  }
]