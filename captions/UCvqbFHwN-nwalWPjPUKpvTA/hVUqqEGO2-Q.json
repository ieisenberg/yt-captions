[
  {
    "text": "okay so uh hello guys",
    "start": "60",
    "end": "4319"
  },
  {
    "text": "my name is",
    "start": "4319",
    "end": "6180"
  },
  {
    "text": "I am a software engineer from daily",
    "start": "6180",
    "end": "8400"
  },
  {
    "text": "bricks and today my topic is uh",
    "start": "8400",
    "end": "12240"
  },
  {
    "text": "experience with heart multi-tennessee in",
    "start": "12240",
    "end": "14160"
  },
  {
    "text": "kubernetes using Color container",
    "start": "14160",
    "end": "16859"
  },
  {
    "text": "um",
    "start": "16859",
    "end": "18420"
  },
  {
    "text": "so starting from some introduction of",
    "start": "18420",
    "end": "22199"
  },
  {
    "text": "Who We Are",
    "start": "22199",
    "end": "23699"
  },
  {
    "text": "so database provides a unified and open",
    "start": "23699",
    "end": "28500"
  },
  {
    "text": "platform for data and Analytics",
    "start": "28500",
    "end": "31380"
  },
  {
    "text": "so we have our own data storage solution",
    "start": "31380",
    "end": "34100"
  },
  {
    "text": "which combines the data warehouse and",
    "start": "34100",
    "end": "37079"
  },
  {
    "text": "the data Lighthouse as a single concept",
    "start": "37079",
    "end": "38880"
  },
  {
    "text": "and we call it lake house",
    "start": "38880",
    "end": "41640"
  },
  {
    "text": "and meanwhile many of our services are",
    "start": "41640",
    "end": "44520"
  },
  {
    "text": "built on top of spark for data analyzing",
    "start": "44520",
    "end": "47640"
  },
  {
    "text": "and we also have our own machine",
    "start": "47640",
    "end": "49920"
  },
  {
    "text": "learning products for AI and data model",
    "start": "49920",
    "end": "52260"
  },
  {
    "text": "training",
    "start": "52260",
    "end": "54020"
  },
  {
    "text": "so you know we're classic infrastructure",
    "start": "54020",
    "end": "56520"
  },
  {
    "text": "model",
    "start": "56520",
    "end": "57600"
  },
  {
    "text": "we separate our own services and",
    "start": "57600",
    "end": "60360"
  },
  {
    "text": "customers infrastructure infrastructure",
    "start": "60360",
    "end": "63300"
  },
  {
    "text": "so we integrate with cloud storage",
    "start": "63300",
    "end": "66140"
  },
  {
    "text": "compute and Security in our customer's",
    "start": "66140",
    "end": "69240"
  },
  {
    "text": "cloud account",
    "start": "69240",
    "end": "70500"
  },
  {
    "text": "and we manage and deploy those cloud",
    "start": "70500",
    "end": "73380"
  },
  {
    "text": "infrastructures and customers we have",
    "start": "73380",
    "end": "76380"
  },
  {
    "text": "and also we always provide services on",
    "start": "76380",
    "end": "79619"
  },
  {
    "text": "top of multiple Cloud providers such as",
    "start": "79619",
    "end": "82320"
  },
  {
    "text": "like AWS Azure or gcp for example",
    "start": "82320",
    "end": "87420"
  },
  {
    "text": "so that's the traditional way that we",
    "start": "87420",
    "end": "89159"
  },
  {
    "text": "provide our services",
    "start": "89159",
    "end": "91020"
  },
  {
    "text": "and recently one of our revolutionary",
    "start": "91020",
    "end": "94140"
  },
  {
    "text": "aspects of our products is moving our",
    "start": "94140",
    "end": "96840"
  },
  {
    "text": "services to a serverless mode so what is",
    "start": "96840",
    "end": "100200"
  },
  {
    "text": "Thrill is mode uh the meaning of the",
    "start": "100200",
    "end": "102659"
  },
  {
    "text": "server list is we migrate all the info",
    "start": "102659",
    "end": "105840"
  },
  {
    "text": "infrastructure management to our own",
    "start": "105840",
    "end": "108360"
  },
  {
    "text": "account instead of like inside a",
    "start": "108360",
    "end": "110220"
  },
  {
    "text": "customer account",
    "start": "110220",
    "end": "111840"
  },
  {
    "text": "so that it eliminates that over has to",
    "start": "111840",
    "end": "115560"
  },
  {
    "text": "manage those core providers assets",
    "start": "115560",
    "end": "118439"
  },
  {
    "text": "from the customer account",
    "start": "118439",
    "end": "120540"
  },
  {
    "text": "meanwhile there are a lot of benefits",
    "start": "120540",
    "end": "122820"
  },
  {
    "text": "for surveys such as the service",
    "start": "122820",
    "end": "124820"
  },
  {
    "text": "provisioning time will be super fast and",
    "start": "124820",
    "end": "127380"
  },
  {
    "text": "the service will be super elastic",
    "start": "127380",
    "end": "130200"
  },
  {
    "text": "so with serverless we usually can",
    "start": "130200",
    "end": "132420"
  },
  {
    "text": "provide our spark cluster to customer in",
    "start": "132420",
    "end": "134580"
  },
  {
    "text": "less than five seconds",
    "start": "134580",
    "end": "136500"
  },
  {
    "text": "also since we take the ownership of the",
    "start": "136500",
    "end": "139620"
  },
  {
    "text": "new fraud management",
    "start": "139620",
    "end": "141000"
  },
  {
    "text": "we would have some more flexibility to",
    "start": "141000",
    "end": "143580"
  },
  {
    "text": "play with it and lower customer's",
    "start": "143580",
    "end": "145980"
  },
  {
    "text": "infrastructure cost",
    "start": "145980",
    "end": "148940"
  },
  {
    "text": "so with these serverless mode",
    "start": "150180",
    "end": "153120"
  },
  {
    "text": "we want to use kubernetes as our",
    "start": "153120",
    "end": "155400"
  },
  {
    "text": "infrastructure infrastructure due to its",
    "start": "155400",
    "end": "157680"
  },
  {
    "text": "great portability and accessibility for",
    "start": "157680",
    "end": "160620"
  },
  {
    "text": "continuous workflows and the kubernetes",
    "start": "160620",
    "end": "163800"
  },
  {
    "text": "is cloud and agnostic and it has a rapid",
    "start": "163800",
    "end": "166980"
  },
  {
    "text": "growing ecosystem",
    "start": "166980",
    "end": "168780"
  },
  {
    "text": "so we mark it as our number one",
    "start": "168780",
    "end": "171060"
  },
  {
    "text": "candidate",
    "start": "171060",
    "end": "172980"
  },
  {
    "text": "each customer's workloads will be a",
    "start": "172980",
    "end": "175560"
  },
  {
    "text": "single pod or a set of PODS basically a",
    "start": "175560",
    "end": "178560"
  },
  {
    "text": "deployment or a demon set in um",
    "start": "178560",
    "end": "181680"
  },
  {
    "text": "you know or kubernetes cluster",
    "start": "181680",
    "end": "183840"
  },
  {
    "text": "however like one of the main difference",
    "start": "183840",
    "end": "186000"
  },
  {
    "text": "with traditional kubernetes cluster is",
    "start": "186000",
    "end": "189140"
  },
  {
    "text": "requires the hard money tenancy so what",
    "start": "189140",
    "end": "192360"
  },
  {
    "text": "is hormon tendency it means that",
    "start": "192360",
    "end": "194519"
  },
  {
    "text": "basically the tenants within a single",
    "start": "194519",
    "end": "196620"
  },
  {
    "text": "querness cluster",
    "start": "196620",
    "end": "198120"
  },
  {
    "text": "might comes from different companies and",
    "start": "198120",
    "end": "200819"
  },
  {
    "text": "they do not trust each other",
    "start": "200819",
    "end": "202680"
  },
  {
    "text": "and also the infra infrastructure do not",
    "start": "202680",
    "end": "205500"
  },
  {
    "text": "trust the tenant",
    "start": "205500",
    "end": "207360"
  },
  {
    "text": "so in this case",
    "start": "207360",
    "end": "209760"
  },
  {
    "text": "isolation of the data plane and the",
    "start": "209760",
    "end": "213000"
  },
  {
    "text": "control plane are both very critical",
    "start": "213000",
    "end": "216000"
  },
  {
    "text": "and meanwhile data breaks also deploys",
    "start": "216000",
    "end": "219060"
  },
  {
    "text": "our own service into the same cluster",
    "start": "219060",
    "end": "221940"
  },
  {
    "text": "so we differentiate the service into two",
    "start": "221940",
    "end": "224400"
  },
  {
    "text": "parts",
    "start": "224400",
    "end": "226319"
  },
  {
    "text": "the services deployed by our team our",
    "start": "226319",
    "end": "228900"
  },
  {
    "text": "company is a first Party Services which",
    "start": "228900",
    "end": "230879"
  },
  {
    "text": "is in trusted group",
    "start": "230879",
    "end": "232799"
  },
  {
    "text": "and any pass that is running customers",
    "start": "232799",
    "end": "235799"
  },
  {
    "text": "workloads are untrusted",
    "start": "235799",
    "end": "239360"
  },
  {
    "text": "so the default security boundary between",
    "start": "239519",
    "end": "241680"
  },
  {
    "text": "Niche paths are the container laundry",
    "start": "241680",
    "end": "243420"
  },
  {
    "text": "basically in the traditional kubernetes",
    "start": "243420",
    "end": "245280"
  },
  {
    "text": "environments and the tricky part is in",
    "start": "245280",
    "end": "247980"
  },
  {
    "text": "our environments customer can run",
    "start": "247980",
    "end": "250260"
  },
  {
    "text": "arbitrary code",
    "start": "250260",
    "end": "251640"
  },
  {
    "text": "like whatever they want",
    "start": "251640",
    "end": "253439"
  },
  {
    "text": "one example is like",
    "start": "253439",
    "end": "256440"
  },
  {
    "text": "the recent products that we recently",
    "start": "256440",
    "end": "258900"
  },
  {
    "text": "released is our machine learning",
    "start": "258900",
    "end": "260699"
  },
  {
    "text": "products where a customer can train in",
    "start": "260699",
    "end": "262800"
  },
  {
    "text": "their own machine learning models in",
    "start": "262800",
    "end": "265460"
  },
  {
    "text": "shared environments with other customers",
    "start": "265460",
    "end": "268500"
  },
  {
    "text": "and databricks has no idea like what",
    "start": "268500",
    "end": "270600"
  },
  {
    "text": "customer is doing",
    "start": "270600",
    "end": "272699"
  },
  {
    "text": "so in this case the container boundary",
    "start": "272699",
    "end": "275520"
  },
  {
    "text": "might not be good enough because it has",
    "start": "275520",
    "end": "277740"
  },
  {
    "text": "a pretty large attack surface and it's",
    "start": "277740",
    "end": "280380"
  },
  {
    "text": "not safe for a hard multi-tenant",
    "start": "280380",
    "end": "282419"
  },
  {
    "text": "environment",
    "start": "282419",
    "end": "284699"
  },
  {
    "text": "so think about case if there is a",
    "start": "284699",
    "end": "286800"
  },
  {
    "text": "malicious user",
    "start": "286800",
    "end": "288360"
  },
  {
    "text": "uh that write a program to break out and",
    "start": "288360",
    "end": "291300"
  },
  {
    "text": "break out a container what it can do so",
    "start": "291300",
    "end": "294900"
  },
  {
    "text": "basically like they can enter basically",
    "start": "294900",
    "end": "297000"
  },
  {
    "text": "they can enter other customers container",
    "start": "297000",
    "end": "299400"
  },
  {
    "text": "and access their data",
    "start": "299400",
    "end": "301199"
  },
  {
    "text": "they can attack the node kernel to",
    "start": "301199",
    "end": "303660"
  },
  {
    "text": "affect the services inside other",
    "start": "303660",
    "end": "305639"
  },
  {
    "text": "customers pod",
    "start": "305639",
    "end": "307380"
  },
  {
    "text": "or they can directly attack the",
    "start": "307380",
    "end": "309240"
  },
  {
    "text": "kubernetes control plane for example or",
    "start": "309240",
    "end": "311460"
  },
  {
    "text": "they can even like attack the database",
    "start": "311460",
    "end": "313800"
  },
  {
    "text": "trusted services",
    "start": "313800",
    "end": "316320"
  },
  {
    "text": "basically like after the container",
    "start": "316320",
    "end": "318840"
  },
  {
    "text": "breakout they can do whatever they want",
    "start": "318840",
    "end": "321840"
  },
  {
    "text": "as a result we need to build additional",
    "start": "321840",
    "end": "324720"
  },
  {
    "text": "security boundary around the traditional",
    "start": "324720",
    "end": "326699"
  },
  {
    "text": "container and pause",
    "start": "326699",
    "end": "328500"
  },
  {
    "text": "to ensure the hard multi-tenancy",
    "start": "328500",
    "end": "332520"
  },
  {
    "text": "so one of the solution is using a cloud",
    "start": "332520",
    "end": "334919"
  },
  {
    "text": "provider provided services for example",
    "start": "334919",
    "end": "337199"
  },
  {
    "text": "like the fargate from AWS",
    "start": "337199",
    "end": "339600"
  },
  {
    "text": "however it turns out that those Services",
    "start": "339600",
    "end": "342180"
  },
  {
    "text": "cannot 100 fit our requirements",
    "start": "342180",
    "end": "345240"
  },
  {
    "text": "for example like some of our spark",
    "start": "345240",
    "end": "348300"
  },
  {
    "text": "workloads requests to build a spark",
    "start": "348300",
    "end": "350160"
  },
  {
    "text": "cluster with multiple paths right and uh",
    "start": "350160",
    "end": "353580"
  },
  {
    "text": "each part needs to connect to each other",
    "start": "353580",
    "end": "355979"
  },
  {
    "text": "to serve as a single spark cluster",
    "start": "355979",
    "end": "359720"
  },
  {
    "text": "so using the cloud provider Services is",
    "start": "359720",
    "end": "363419"
  },
  {
    "text": "not that flexible for us to build our",
    "start": "363419",
    "end": "365639"
  },
  {
    "text": "own Logic on top of it",
    "start": "365639",
    "end": "367740"
  },
  {
    "text": "as a result",
    "start": "367740",
    "end": "369300"
  },
  {
    "text": "we want to seek our own hard",
    "start": "369300",
    "end": "371820"
  },
  {
    "text": "multi-tenancy Solution on top of",
    "start": "371820",
    "end": "373440"
  },
  {
    "text": "kubernetes",
    "start": "373440",
    "end": "375979"
  },
  {
    "text": "so we do some Exploration with multiple",
    "start": "377699",
    "end": "380280"
  },
  {
    "text": "directions and one of the direction that",
    "start": "380280",
    "end": "383520"
  },
  {
    "text": "we explore to achieve this hard",
    "start": "383520",
    "end": "386280"
  },
  {
    "text": "multi-tenancy solution is",
    "start": "386280",
    "end": "389639"
  },
  {
    "text": "by using Color container",
    "start": "389639",
    "end": "393199"
  },
  {
    "text": "so what is color container the high",
    "start": "393300",
    "end": "395639"
  },
  {
    "text": "level description of product container",
    "start": "395639",
    "end": "397199"
  },
  {
    "text": "is it is a secure container runtime",
    "start": "397199",
    "end": "400139"
  },
  {
    "text": "with lightweight virtual machines that",
    "start": "400139",
    "end": "402479"
  },
  {
    "text": "feel and perform light containers with",
    "start": "402479",
    "end": "404460"
  },
  {
    "text": "the macro VM",
    "start": "404460",
    "end": "406620"
  },
  {
    "text": "it provides stronger workloads isolation",
    "start": "406620",
    "end": "408900"
  },
  {
    "text": "using hardware virtualization technology",
    "start": "408900",
    "end": "411120"
  },
  {
    "text": "as a second layer of the best instead of",
    "start": "411120",
    "end": "413340"
  },
  {
    "text": "like a traditional Criterium boundary",
    "start": "413340",
    "end": "415380"
  },
  {
    "text": "which is based on the software solution",
    "start": "415380",
    "end": "418680"
  },
  {
    "text": "so the security Advantage provided by",
    "start": "418680",
    "end": "420780"
  },
  {
    "text": "cat eye is obvious it is provides a VM",
    "start": "420780",
    "end": "423720"
  },
  {
    "text": "boundary instead of a container boundary",
    "start": "423720",
    "end": "426600"
  },
  {
    "text": "however like one of the trade-off here",
    "start": "426600",
    "end": "429120"
  },
  {
    "text": "is",
    "start": "429120",
    "end": "430199"
  },
  {
    "text": "uh when we use a color container",
    "start": "430199",
    "end": "433440"
  },
  {
    "text": "we require the club providers VM has the",
    "start": "433440",
    "end": "436440"
  },
  {
    "text": "capability for the virtualization",
    "start": "436440",
    "end": "439259"
  },
  {
    "text": "basically it means that we can create",
    "start": "439259",
    "end": "441180"
  },
  {
    "text": "VMS inside Cloud providers node as a",
    "start": "441180",
    "end": "443880"
  },
  {
    "text": "result not all the instance types from",
    "start": "443880",
    "end": "446160"
  },
  {
    "text": "different Cloud providers can support",
    "start": "446160",
    "end": "447599"
  },
  {
    "text": "that",
    "start": "447599",
    "end": "450020"
  },
  {
    "text": "so with the cutter container each part",
    "start": "450900",
    "end": "453900"
  },
  {
    "text": "will has its own CPU its own memory and",
    "start": "453900",
    "end": "457259"
  },
  {
    "text": "it has its dedicated disks kernel and it",
    "start": "457259",
    "end": "460620"
  },
  {
    "text": "is pretty hard for customers to break",
    "start": "460620",
    "end": "462539"
  },
  {
    "text": "out a VM boundary",
    "start": "462539",
    "end": "465240"
  },
  {
    "text": "so that is for the computation security",
    "start": "465240",
    "end": "467599"
  },
  {
    "text": "and meanwhile for the network access",
    "start": "467599",
    "end": "470460"
  },
  {
    "text": "control we rely on the kubernetes native",
    "start": "470460",
    "end": "473220"
  },
  {
    "text": "solution which is Network policy to ship",
    "start": "473220",
    "end": "475740"
  },
  {
    "text": "shape the customer's traffic",
    "start": "475740",
    "end": "478800"
  },
  {
    "text": "we also build a simple layer with uh",
    "start": "478800",
    "end": "481380"
  },
  {
    "text": "Cloud providers native firewall",
    "start": "481380",
    "end": "483000"
  },
  {
    "text": "Solutions such as the network security",
    "start": "483000",
    "end": "485039"
  },
  {
    "text": "group",
    "start": "485039",
    "end": "486000"
  },
  {
    "text": "it's just for the defense in-depth",
    "start": "486000",
    "end": "487800"
  },
  {
    "text": "purpose",
    "start": "487800",
    "end": "490159"
  },
  {
    "text": "so",
    "start": "492360",
    "end": "494699"
  },
  {
    "text": "this is a single note view after",
    "start": "494699",
    "end": "496800"
  },
  {
    "text": "onboarding color container",
    "start": "496800",
    "end": "499740"
  },
  {
    "text": "so we use larger machine machines to",
    "start": "499740",
    "end": "502919"
  },
  {
    "text": "hold multiple color VMS from different",
    "start": "502919",
    "end": "505919"
  },
  {
    "text": "customers",
    "start": "505919",
    "end": "507060"
  },
  {
    "text": "each color VM will consume their own",
    "start": "507060",
    "end": "509879"
  },
  {
    "text": "compute and storage resources",
    "start": "509879",
    "end": "512760"
  },
  {
    "text": "for each machine we also need to reserve",
    "start": "512760",
    "end": "515399"
  },
  {
    "text": "some cores for the system and database",
    "start": "515399",
    "end": "517860"
  },
  {
    "text": "sources such as kubelight Community for",
    "start": "517860",
    "end": "521039"
  },
  {
    "text": "example like there is logging services",
    "start": "521039",
    "end": "522479"
  },
  {
    "text": "and our metrics emitting Services Etc",
    "start": "522479",
    "end": "525959"
  },
  {
    "text": "so as you can see in the right graph the",
    "start": "525959",
    "end": "528660"
  },
  {
    "text": "boundary between each paths are from",
    "start": "528660",
    "end": "531440"
  },
  {
    "text": "Caribbean and there are no shared",
    "start": "531440",
    "end": "534240"
  },
  {
    "text": "resources between Niche customers as",
    "start": "534240",
    "end": "536220"
  },
  {
    "text": "well as with our first Friday services",
    "start": "536220",
    "end": "539959"
  },
  {
    "text": "so along with the uh Kara this is the",
    "start": "541080",
    "end": "544980"
  },
  {
    "text": "network policy layer that we built",
    "start": "544980",
    "end": "547560"
  },
  {
    "text": "so basically",
    "start": "547560",
    "end": "549300"
  },
  {
    "text": "a pod can only talk to pause from the",
    "start": "549300",
    "end": "552600"
  },
  {
    "text": "same customer so we build the network",
    "start": "552600",
    "end": "554519"
  },
  {
    "text": "policy basically disabled network",
    "start": "554519",
    "end": "556260"
  },
  {
    "text": "connections between different customers",
    "start": "556260",
    "end": "558180"
  },
  {
    "text": "we also disable the access of the",
    "start": "558180",
    "end": "560700"
  },
  {
    "text": "kubernetes control plane",
    "start": "560700",
    "end": "562320"
  },
  {
    "text": "and we also disable the Pod to talk to",
    "start": "562320",
    "end": "565080"
  },
  {
    "text": "any other Cloud providers VMS especially",
    "start": "565080",
    "end": "567839"
  },
  {
    "text": "like the open ports of the equivalent",
    "start": "567839",
    "end": "569760"
  },
  {
    "text": "from like the nodes in the in the fleet",
    "start": "569760",
    "end": "573180"
  },
  {
    "text": "and we also only allow a one-way",
    "start": "573180",
    "end": "575640"
  },
  {
    "text": "connection from our trusted services to",
    "start": "575640",
    "end": "578040"
  },
  {
    "text": "the customer's part",
    "start": "578040",
    "end": "580820"
  },
  {
    "text": "so one additional thing that I want to",
    "start": "582380",
    "end": "584820"
  },
  {
    "text": "mention is color Container makes the",
    "start": "584820",
    "end": "587160"
  },
  {
    "text": "network policy more secure in",
    "start": "587160",
    "end": "589080"
  },
  {
    "text": "multi-tenancy environments",
    "start": "589080",
    "end": "591839"
  },
  {
    "text": "so the way that thing I really handles",
    "start": "591839",
    "end": "594000"
  },
  {
    "text": "Network policy is by translating the",
    "start": "594000",
    "end": "595920"
  },
  {
    "text": "policy rules into either iptable rules",
    "start": "595920",
    "end": "598620"
  },
  {
    "text": "or like the ebpf functions and apply",
    "start": "598620",
    "end": "601260"
  },
  {
    "text": "those rules onto the host directly",
    "start": "601260",
    "end": "604200"
  },
  {
    "text": "however like without kind of container",
    "start": "604200",
    "end": "606240"
  },
  {
    "text": "if a customer breaks out a container and",
    "start": "606240",
    "end": "609240"
  },
  {
    "text": "earn the host a root privilege",
    "start": "609240",
    "end": "612720"
  },
  {
    "text": "it would be pretty easy for them to",
    "start": "612720",
    "end": "614640"
  },
  {
    "text": "modify the iptable rules and then bypass",
    "start": "614640",
    "end": "617339"
  },
  {
    "text": "the network policy",
    "start": "617339",
    "end": "619080"
  },
  {
    "text": "however like after using Color container",
    "start": "619080",
    "end": "621300"
  },
  {
    "text": "the VM boundary makes it almost",
    "start": "621300",
    "end": "623820"
  },
  {
    "text": "impossible",
    "start": "623820",
    "end": "625080"
  },
  {
    "text": "even the customer breaks out its own",
    "start": "625080",
    "end": "626880"
  },
  {
    "text": "container it can only access the iptable",
    "start": "626880",
    "end": "629279"
  },
  {
    "text": "rules for its own Caribbean",
    "start": "629279",
    "end": "631920"
  },
  {
    "text": "the host IB table rules is almost",
    "start": "631920",
    "end": "634200"
  },
  {
    "text": "immutable by any processes inside the",
    "start": "634200",
    "end": "637140"
  },
  {
    "text": "Caribbean",
    "start": "637140",
    "end": "639740"
  },
  {
    "text": "so that's for the uh how we build the",
    "start": "640620",
    "end": "643080"
  },
  {
    "text": "network and integrate with zakata",
    "start": "643080",
    "end": "646680"
  },
  {
    "text": "so due to the high compatibility between",
    "start": "646680",
    "end": "648959"
  },
  {
    "text": "color container and kubernetes",
    "start": "648959",
    "end": "651060"
  },
  {
    "text": "onboarding color is pretty simple",
    "start": "651060",
    "end": "653399"
  },
  {
    "text": "it's just a special container runtime",
    "start": "653399",
    "end": "655440"
  },
  {
    "text": "right so what we did is after installing",
    "start": "655440",
    "end": "658740"
  },
  {
    "text": "the Cara artifacts on the Node we just",
    "start": "658740",
    "end": "661079"
  },
  {
    "text": "add a special runtime name inside our",
    "start": "661079",
    "end": "663300"
  },
  {
    "text": "pulse back",
    "start": "663300",
    "end": "665220"
  },
  {
    "text": "and also at the runtime handlers inside",
    "start": "665220",
    "end": "667860"
  },
  {
    "text": "our connected configuration",
    "start": "667860",
    "end": "670079"
  },
  {
    "text": "and then",
    "start": "670079",
    "end": "671459"
  },
  {
    "text": "like in the runtime the community can",
    "start": "671459",
    "end": "673440"
  },
  {
    "text": "automatically figure out the right",
    "start": "673440",
    "end": "674880"
  },
  {
    "text": "runtime and create the kind of VM as the",
    "start": "674880",
    "end": "676980"
  },
  {
    "text": "power sandbox",
    "start": "676980",
    "end": "678300"
  },
  {
    "text": "and function net wise it just works",
    "start": "678300",
    "end": "681779"
  },
  {
    "text": "but",
    "start": "681779",
    "end": "684060"
  },
  {
    "text": "is that good enough for Kara to directly",
    "start": "684060",
    "end": "686459"
  },
  {
    "text": "running inside of our production",
    "start": "686459",
    "end": "688320"
  },
  {
    "text": "environments and the answer is",
    "start": "688320",
    "end": "690360"
  },
  {
    "text": "definitely no",
    "start": "690360",
    "end": "691620"
  },
  {
    "text": "I will talk about the main challenges",
    "start": "691620",
    "end": "693899"
  },
  {
    "text": "that we explore during weeks for the",
    "start": "693899",
    "end": "696899"
  },
  {
    "text": "direction of the color container",
    "start": "696899",
    "end": "698880"
  },
  {
    "text": "let's start from the biggest problem",
    "start": "698880",
    "end": "700920"
  },
  {
    "text": "which is the performance",
    "start": "700920",
    "end": "705019"
  },
  {
    "text": "so after onboarding vanilla we find out",
    "start": "705019",
    "end": "708480"
  },
  {
    "text": "that our spark work clothes has 3x to 6X",
    "start": "708480",
    "end": "711660"
  },
  {
    "text": "performance Slowdown",
    "start": "711660",
    "end": "713760"
  },
  {
    "text": "this means that we definitely cannot",
    "start": "713760",
    "end": "716279"
  },
  {
    "text": "directly use a vanilla color inside our",
    "start": "716279",
    "end": "718320"
  },
  {
    "text": "production environment",
    "start": "718320",
    "end": "720660"
  },
  {
    "text": "so",
    "start": "720660",
    "end": "722040"
  },
  {
    "text": "what is the reason that",
    "start": "722040",
    "end": "725160"
  },
  {
    "text": "um there's a performance problem",
    "start": "725160",
    "end": "726899"
  },
  {
    "text": "why there are slow down so the nature of",
    "start": "726899",
    "end": "730079"
  },
  {
    "text": "our spark workflows are both Computing",
    "start": "730079",
    "end": "732060"
  },
  {
    "text": "as if memory intensive and I O intensive",
    "start": "732060",
    "end": "736320"
  },
  {
    "text": "so by after onboarding Kara it",
    "start": "736320",
    "end": "739440"
  },
  {
    "text": "introduced additional virtualization",
    "start": "739440",
    "end": "741180"
  },
  {
    "text": "layer and it makes all of these aspects",
    "start": "741180",
    "end": "745560"
  },
  {
    "text": "more complex",
    "start": "745560",
    "end": "747180"
  },
  {
    "text": "for example",
    "start": "747180",
    "end": "748680"
  },
  {
    "text": "our workload will run on another layer",
    "start": "748680",
    "end": "751620"
  },
  {
    "text": "of virtual CPU instead of like the CPU",
    "start": "751620",
    "end": "753720"
  },
  {
    "text": "on the host",
    "start": "753720",
    "end": "754980"
  },
  {
    "text": "when executing instructions the CPU has",
    "start": "754980",
    "end": "757920"
  },
  {
    "text": "to jump between kind of guest VM and",
    "start": "757920",
    "end": "760440"
  },
  {
    "text": "host VM we call it VM exit",
    "start": "760440",
    "end": "764700"
  },
  {
    "text": "and it took time",
    "start": "764700",
    "end": "766440"
  },
  {
    "text": "and also we have to rely on the word IO",
    "start": "766440",
    "end": "769320"
  },
  {
    "text": "protocol to provide our virtual block",
    "start": "769320",
    "end": "771600"
  },
  {
    "text": "devices into color VM so all of these",
    "start": "771600",
    "end": "774480"
  },
  {
    "text": "vectors will introduce additional",
    "start": "774480",
    "end": "776339"
  },
  {
    "text": "overhead for both the computation and",
    "start": "776339",
    "end": "778860"
  },
  {
    "text": "the arrow path",
    "start": "778860",
    "end": "780959"
  },
  {
    "text": "so how do we solve this problem",
    "start": "780959",
    "end": "784399"
  },
  {
    "text": "let's start from the storage performance",
    "start": "785459",
    "end": "787560"
  },
  {
    "text": "tune",
    "start": "787560",
    "end": "789120"
  },
  {
    "text": "so spark requires a pretty fast disk for",
    "start": "789120",
    "end": "792180"
  },
  {
    "text": "the i o intensive workloads as a result",
    "start": "792180",
    "end": "794940"
  },
  {
    "text": "instead of like using a call providers",
    "start": "794940",
    "end": "797339"
  },
  {
    "text": "remote disk we are leveraging the local",
    "start": "797339",
    "end": "800399"
  },
  {
    "text": "SSD on each machine to support such",
    "start": "800399",
    "end": "803519"
  },
  {
    "text": "space",
    "start": "803519",
    "end": "804480"
  },
  {
    "text": "so you know our current Passback we have",
    "start": "804480",
    "end": "807540"
  },
  {
    "text": "a PVC statement to ask kubernetes to",
    "start": "807540",
    "end": "810540"
  },
  {
    "text": "handle this special amount",
    "start": "810540",
    "end": "812760"
  },
  {
    "text": "so without kala the vanilla story",
    "start": "812760",
    "end": "814680"
  },
  {
    "text": "support for PV and PVC is just the",
    "start": "814680",
    "end": "817860"
  },
  {
    "text": "amount that local SSD to a folder on the",
    "start": "817860",
    "end": "820260"
  },
  {
    "text": "host namespace and then bind Mount this",
    "start": "820260",
    "end": "823680"
  },
  {
    "text": "folder into the container namespace",
    "start": "823680",
    "end": "827480"
  },
  {
    "text": "but after using Kata the default way to",
    "start": "827639",
    "end": "830519"
  },
  {
    "text": "support such scenario is by using a",
    "start": "830519",
    "end": "833760"
  },
  {
    "text": "component called lfs",
    "start": "833760",
    "end": "836339"
  },
  {
    "text": "so this complement virtualizes our file",
    "start": "836339",
    "end": "838980"
  },
  {
    "text": "system on the host and build a shared",
    "start": "838980",
    "end": "841320"
  },
  {
    "text": "process inside the Caribbean",
    "start": "841320",
    "end": "843660"
  },
  {
    "text": "as a result any i o happens on either",
    "start": "843660",
    "end": "847019"
  },
  {
    "text": "host or gas will be synced in real time",
    "start": "847019",
    "end": "850980"
  },
  {
    "text": "so this is similar to like Brian Bond",
    "start": "850980",
    "end": "852980"
  },
  {
    "text": "photo inside the container however like",
    "start": "852980",
    "end": "856380"
  },
  {
    "text": "the performance is not that good because",
    "start": "856380",
    "end": "858180"
  },
  {
    "text": "like during a single IO",
    "start": "858180",
    "end": "860579"
  },
  {
    "text": "there are multiple connect switches",
    "start": "860579",
    "end": "862620"
  },
  {
    "text": "between host user and kernel space and",
    "start": "862620",
    "end": "865980"
  },
  {
    "text": "the hour packet will go through multiple",
    "start": "865980",
    "end": "867899"
  },
  {
    "text": "files and layers like one layer is from",
    "start": "867899",
    "end": "869880"
  },
  {
    "text": "the gas then we have to go to go through",
    "start": "869880",
    "end": "872339"
  },
  {
    "text": "another layer inside a host",
    "start": "872339",
    "end": "874560"
  },
  {
    "text": "so these facts will introduce additional",
    "start": "874560",
    "end": "876720"
  },
  {
    "text": "latency for every single IO and it also",
    "start": "876720",
    "end": "880920"
  },
  {
    "text": "shrinks the total throughput",
    "start": "880920",
    "end": "884779"
  },
  {
    "text": "so here the technology that we use to",
    "start": "885660",
    "end": "888540"
  },
  {
    "text": "solve the problem is called spdk so uh",
    "start": "888540",
    "end": "891720"
  },
  {
    "text": "what is stdk",
    "start": "891720",
    "end": "893220"
  },
  {
    "text": "so the full name is called storage",
    "start": "893220",
    "end": "895800"
  },
  {
    "text": "performance development kit",
    "start": "895800",
    "end": "898260"
  },
  {
    "text": "so it is a open source project which",
    "start": "898260",
    "end": "901139"
  },
  {
    "text": "provides a set of tools and Libs for",
    "start": "901139",
    "end": "904560"
  },
  {
    "text": "writing high performance scalable user",
    "start": "904560",
    "end": "907380"
  },
  {
    "text": "mode storage application",
    "start": "907380",
    "end": "909839"
  },
  {
    "text": "so the most advantage that sddk can",
    "start": "909839",
    "end": "912899"
  },
  {
    "text": "provide us are first it introduce a",
    "start": "912899",
    "end": "915720"
  },
  {
    "text": "polling mode instead of like the",
    "start": "915720",
    "end": "917279"
  },
  {
    "text": "traditional mode like creating the",
    "start": "917279",
    "end": "918600"
  },
  {
    "text": "system interrupts to trigger the actual",
    "start": "918600",
    "end": "921000"
  },
  {
    "text": "i o",
    "start": "921000",
    "end": "922380"
  },
  {
    "text": "second",
    "start": "922380",
    "end": "923760"
  },
  {
    "text": "it can bypass the Kernel's file system",
    "start": "923760",
    "end": "926100"
  },
  {
    "text": "layer on the host and directly talk to",
    "start": "926100",
    "end": "928680"
  },
  {
    "text": "the current device driver or like",
    "start": "928680",
    "end": "930420"
  },
  {
    "text": "directly talk to the device itself for",
    "start": "930420",
    "end": "932880"
  },
  {
    "text": "example like the meme device so with",
    "start": "932880",
    "end": "935699"
  },
  {
    "text": "these Technologies the io path can be",
    "start": "935699",
    "end": "938399"
  },
  {
    "text": "extremely simplified and the performance",
    "start": "938399",
    "end": "940920"
  },
  {
    "text": "improves a lot",
    "start": "940920",
    "end": "943880"
  },
  {
    "text": "so the way that we integrate with sbdk",
    "start": "944820",
    "end": "947220"
  },
  {
    "text": "data container and kubernetes is by",
    "start": "947220",
    "end": "949620"
  },
  {
    "text": "implementing our own CSI",
    "start": "949620",
    "end": "952680"
  },
  {
    "text": "so with our own CSI when the new part",
    "start": "952680",
    "end": "955800"
  },
  {
    "text": "creation request cards the Google ad",
    "start": "955800",
    "end": "958260"
  },
  {
    "text": "will first ask our CSI to prepare the PV",
    "start": "958260",
    "end": "961380"
  },
  {
    "text": "for their pod so during this preparation",
    "start": "961380",
    "end": "964019"
  },
  {
    "text": "process our CSI will talk to sddk to",
    "start": "964019",
    "end": "967560"
  },
  {
    "text": "create the necessary virtual block",
    "start": "967560",
    "end": "969120"
  },
  {
    "text": "device the control circuits Etc",
    "start": "969120",
    "end": "972360"
  },
  {
    "text": "and then it will utilize the direct",
    "start": "972360",
    "end": "974880"
  },
  {
    "text": "quality functionality provided by the",
    "start": "974880",
    "end": "977100"
  },
  {
    "text": "color runtime to record such virtual",
    "start": "977100",
    "end": "979380"
  },
  {
    "text": "block device for that specific pod",
    "start": "979380",
    "end": "983459"
  },
  {
    "text": "and then",
    "start": "983459",
    "end": "985079"
  },
  {
    "text": "the coupon will Max call the CRI to",
    "start": "985079",
    "end": "987839"
  },
  {
    "text": "create the sandbox and the containers",
    "start": "987839",
    "end": "989399"
  },
  {
    "text": "and during the sandbox creation the",
    "start": "989399",
    "end": "992279"
  },
  {
    "text": "kalashim will hot plug the virtual block",
    "start": "992279",
    "end": "995160"
  },
  {
    "text": "devices directly into the color VM and",
    "start": "995160",
    "end": "997680"
  },
  {
    "text": "more on that bind on that into the",
    "start": "997680",
    "end": "999240"
  },
  {
    "text": "container namespace",
    "start": "999240",
    "end": "1001100"
  },
  {
    "text": "so that it the any all the process can",
    "start": "1001100",
    "end": "1003800"
  },
  {
    "text": "see such",
    "start": "1003800",
    "end": "1005540"
  },
  {
    "text": "block devices mounting to a specific",
    "start": "1005540",
    "end": "1007519"
  },
  {
    "text": "folder",
    "start": "1007519",
    "end": "1009019"
  },
  {
    "text": "so that is the whole process like how we",
    "start": "1009019",
    "end": "1011660"
  },
  {
    "text": "iterate SDK inside the Caribbean and the",
    "start": "1011660",
    "end": "1015139"
  },
  {
    "text": "container inside kind of VM",
    "start": "1015139",
    "end": "1018079"
  },
  {
    "text": "so with the integration of the sbdk this",
    "start": "1018079",
    "end": "1021380"
  },
  {
    "text": "is the disk performance we tested",
    "start": "1021380",
    "end": "1023480"
  },
  {
    "text": "we saw that both read and write has",
    "start": "1023480",
    "end": "1026780"
  },
  {
    "text": "significant performance improvements and",
    "start": "1026780",
    "end": "1029360"
  },
  {
    "text": "the SDK disk performance is pretty close",
    "start": "1029360",
    "end": "1031699"
  },
  {
    "text": "to what we have with uh Native disks",
    "start": "1031699",
    "end": "1034040"
  },
  {
    "text": "outside of the color container",
    "start": "1034040",
    "end": "1037419"
  },
  {
    "text": "so besides the storage we also did some",
    "start": "1039020",
    "end": "1041660"
  },
  {
    "text": "exploration for the CPU and memory",
    "start": "1041660",
    "end": "1043520"
  },
  {
    "text": "tuning",
    "start": "1043520",
    "end": "1044540"
  },
  {
    "text": "first",
    "start": "1044540",
    "end": "1046040"
  },
  {
    "text": "for all the CPUs that we got assigned to",
    "start": "1046040",
    "end": "1048500"
  },
  {
    "text": "the color VM we isolated them from the",
    "start": "1048500",
    "end": "1051380"
  },
  {
    "text": "latest scheduling",
    "start": "1051380",
    "end": "1052880"
  },
  {
    "text": "it prevents the scheduler to assign",
    "start": "1052880",
    "end": "1055220"
  },
  {
    "text": "other host processes onto this set of",
    "start": "1055220",
    "end": "1057500"
  },
  {
    "text": "CPUs",
    "start": "1057500",
    "end": "1059360"
  },
  {
    "text": "and also repeat Niche color vm's virtual",
    "start": "1059360",
    "end": "1062240"
  },
  {
    "text": "CPU to a dedicated and isolated core so",
    "start": "1062240",
    "end": "1066020"
  },
  {
    "text": "that every single virtual CPU the",
    "start": "1066020",
    "end": "1067940"
  },
  {
    "text": "process get assigned inside the color VM",
    "start": "1067940",
    "end": "1069919"
  },
  {
    "text": "can statically get assigned to a fixed",
    "start": "1069919",
    "end": "1073160"
  },
  {
    "text": "according on the host",
    "start": "1073160",
    "end": "1075380"
  },
  {
    "text": "so these two tunings can benefit us a",
    "start": "1075380",
    "end": "1077900"
  },
  {
    "text": "lot from both performance perspective",
    "start": "1077900",
    "end": "1079760"
  },
  {
    "text": "and the security perspective",
    "start": "1079760",
    "end": "1082299"
  },
  {
    "text": "it prevents the frequent contact",
    "start": "1082299",
    "end": "1085100"
  },
  {
    "text": "switching between each threads on each",
    "start": "1085100",
    "end": "1087980"
  },
  {
    "text": "single host core so that the CPU can",
    "start": "1087980",
    "end": "1090260"
  },
  {
    "text": "have be more focused on a single color",
    "start": "1090260",
    "end": "1092720"
  },
  {
    "text": "VMS workflows and has a better",
    "start": "1092720",
    "end": "1096039"
  },
  {
    "text": "locality meanwhile it prevents the",
    "start": "1096039",
    "end": "1099860"
  },
  {
    "text": "customer share any computation Resources",
    "start": "1099860",
    "end": "1102020"
  },
  {
    "text": "with each other which further prevents",
    "start": "1102020",
    "end": "1104720"
  },
  {
    "text": "some side Channel attacks for example",
    "start": "1104720",
    "end": "1108700"
  },
  {
    "text": "and meanwhile also we we did some CPU",
    "start": "1108700",
    "end": "1112100"
  },
  {
    "text": "stay tuned including for example like",
    "start": "1112100",
    "end": "1113840"
  },
  {
    "text": "enable the CPU performance mode and tune",
    "start": "1113840",
    "end": "1116600"
  },
  {
    "text": "the CPU power management side option for",
    "start": "1116600",
    "end": "1119960"
  },
  {
    "text": "like lower SQL latencies",
    "start": "1119960",
    "end": "1123820"
  },
  {
    "text": "and another interesting",
    "start": "1124880",
    "end": "1127160"
  },
  {
    "text": "optimization that we explore is about",
    "start": "1127160",
    "end": "1129980"
  },
  {
    "text": "the pneuma control so",
    "start": "1129980",
    "end": "1132559"
  },
  {
    "text": "so I'm basically introduction of what is",
    "start": "1132559",
    "end": "1134480"
  },
  {
    "text": "pneuma so the full name is called",
    "start": "1134480",
    "end": "1137000"
  },
  {
    "text": "non-uniform memory access",
    "start": "1137000",
    "end": "1139640"
  },
  {
    "text": "basically like when cloud provider",
    "start": "1139640",
    "end": "1141860"
  },
  {
    "text": "provides us a large instance type it",
    "start": "1141860",
    "end": "1144500"
  },
  {
    "text": "usually contains multiple physical",
    "start": "1144500",
    "end": "1145820"
  },
  {
    "text": "processors and multiple memory slots",
    "start": "1145820",
    "end": "1148580"
  },
  {
    "text": "some processors is basically closer to",
    "start": "1148580",
    "end": "1151880"
  },
  {
    "text": "some memory slots",
    "start": "1151880",
    "end": "1153559"
  },
  {
    "text": "which can provide the best memory access",
    "start": "1153559",
    "end": "1155960"
  },
  {
    "text": "latency",
    "start": "1155960",
    "end": "1157580"
  },
  {
    "text": "however like when a processor is trying",
    "start": "1157580",
    "end": "1159799"
  },
  {
    "text": "to access a remote memory slot it will",
    "start": "1159799",
    "end": "1163160"
  },
  {
    "text": "has longer latency",
    "start": "1163160",
    "end": "1164900"
  },
  {
    "text": "so a single pneuma node contains",
    "start": "1164900",
    "end": "1167600"
  },
  {
    "text": "processors and memories close with each",
    "start": "1167600",
    "end": "1170120"
  },
  {
    "text": "other",
    "start": "1170120",
    "end": "1171260"
  },
  {
    "text": "and with a large instance type or like",
    "start": "1171260",
    "end": "1174260"
  },
  {
    "text": "environmental machines called provided",
    "start": "1174260",
    "end": "1176539"
  },
  {
    "text": "by the call provider",
    "start": "1176539",
    "end": "1178580"
  },
  {
    "text": "the node really contains multiple",
    "start": "1178580",
    "end": "1180740"
  },
  {
    "text": "numerals",
    "start": "1180740",
    "end": "1182480"
  },
  {
    "text": "as a result like when we try to do",
    "start": "1182480",
    "end": "1186140"
  },
  {
    "text": "what we try to do is to make sure that",
    "start": "1186140",
    "end": "1188539"
  },
  {
    "text": "for every single calendar",
    "start": "1188539",
    "end": "1191000"
  },
  {
    "text": "the CPU and memory resources that",
    "start": "1191000",
    "end": "1193520"
  },
  {
    "text": "assigned to it comes from a single",
    "start": "1193520",
    "end": "1195260"
  },
  {
    "text": "pneuma node",
    "start": "1195260",
    "end": "1196760"
  },
  {
    "text": "so in this case the memory access",
    "start": "1196760",
    "end": "1198740"
  },
  {
    "text": "latency will be short and consistent",
    "start": "1198740",
    "end": "1201980"
  },
  {
    "text": "and meanwhile we are also trying to",
    "start": "1201980",
    "end": "1204440"
  },
  {
    "text": "balance the load between different",
    "start": "1204440",
    "end": "1205820"
  },
  {
    "text": "nominals on the same host",
    "start": "1205820",
    "end": "1207860"
  },
  {
    "text": "for example like in this case we saw",
    "start": "1207860",
    "end": "1210320"
  },
  {
    "text": "that pneuma 0 has two VMS but new model",
    "start": "1210320",
    "end": "1213140"
  },
  {
    "text": "one has only one VM and when there is a",
    "start": "1213140",
    "end": "1215840"
  },
  {
    "text": "new Caravan comes we will make sure make",
    "start": "1215840",
    "end": "1219140"
  },
  {
    "text": "sure the upcoming rvm falls into number",
    "start": "1219140",
    "end": "1221780"
  },
  {
    "text": "one to balance the load",
    "start": "1221780",
    "end": "1225700"
  },
  {
    "text": "so the way that we Implement such",
    "start": "1226580",
    "end": "1228260"
  },
  {
    "text": "scenarios by introducing an unknown",
    "start": "1228260",
    "end": "1230600"
  },
  {
    "text": "services for physical resource",
    "start": "1230600",
    "end": "1232880"
  },
  {
    "text": "management",
    "start": "1232880",
    "end": "1234260"
  },
  {
    "text": "the Resource Management Services is",
    "start": "1234260",
    "end": "1236179"
  },
  {
    "text": "responsible for bookkeeping the physical",
    "start": "1236179",
    "end": "1238520"
  },
  {
    "text": "resource usage metadata",
    "start": "1238520",
    "end": "1240860"
  },
  {
    "text": "it will record which color VM is using",
    "start": "1240860",
    "end": "1244400"
  },
  {
    "text": "which core and which numas memory",
    "start": "1244400",
    "end": "1247280"
  },
  {
    "text": "then every time the color runtime",
    "start": "1247280",
    "end": "1249140"
  },
  {
    "text": "creates a new VM it will first ask this",
    "start": "1249140",
    "end": "1252500"
  },
  {
    "text": "service for a hint",
    "start": "1252500",
    "end": "1254860"
  },
  {
    "text": "and the hint contains a set of course",
    "start": "1254860",
    "end": "1257600"
  },
  {
    "text": "that we want to Ping to this color VM as",
    "start": "1257600",
    "end": "1260179"
  },
  {
    "text": "well as like for example the Numa ID",
    "start": "1260179",
    "end": "1262580"
  },
  {
    "text": "and then the color runtime will use this",
    "start": "1262580",
    "end": "1265400"
  },
  {
    "text": "hint to call the hypervisor with",
    "start": "1265400",
    "end": "1267559"
  },
  {
    "text": "additional parameters",
    "start": "1267559",
    "end": "1269120"
  },
  {
    "text": "in the newly created kind of VM will",
    "start": "1269120",
    "end": "1271220"
  },
  {
    "text": "consume their targeted resource that we",
    "start": "1271220",
    "end": "1273860"
  },
  {
    "text": "specified",
    "start": "1273860",
    "end": "1276220"
  },
  {
    "text": "so",
    "start": "1276860",
    "end": "1278000"
  },
  {
    "text": "for the human control we also explore",
    "start": "1278000",
    "end": "1281299"
  },
  {
    "text": "some kubernetes native Solutions",
    "start": "1281299",
    "end": "1283820"
  },
  {
    "text": "such as like CPU manager or like",
    "start": "1283820",
    "end": "1286400"
  },
  {
    "text": "topology manager but it turns out that",
    "start": "1286400",
    "end": "1289580"
  },
  {
    "text": "they cannot meet all of our requirements",
    "start": "1289580",
    "end": "1292100"
  },
  {
    "text": "for example like for the CPU manager the",
    "start": "1292100",
    "end": "1294799"
  },
  {
    "text": "smooth manager can specify like which",
    "start": "1294799",
    "end": "1296480"
  },
  {
    "text": "color VM use which CPU says by specified",
    "start": "1296480",
    "end": "1299240"
  },
  {
    "text": "inside the C group however it cannot pin",
    "start": "1299240",
    "end": "1302600"
  },
  {
    "text": "each virtual CPU to a dedicated core",
    "start": "1302600",
    "end": "1305179"
  },
  {
    "text": "and also like the topology manager is",
    "start": "1305179",
    "end": "1307340"
  },
  {
    "text": "not compatible with kind of container as",
    "start": "1307340",
    "end": "1309320"
  },
  {
    "text": "well",
    "start": "1309320",
    "end": "1310039"
  },
  {
    "text": "so we finally like decide to implement",
    "start": "1310039",
    "end": "1313159"
  },
  {
    "text": "our own services on load Services",
    "start": "1313159",
    "end": "1315740"
  },
  {
    "text": "instead of like using a native solution",
    "start": "1315740",
    "end": "1320380"
  },
  {
    "text": "so with all the performance improvements",
    "start": "1321020",
    "end": "1323419"
  },
  {
    "text": "uh that I introduced before we improve",
    "start": "1323419",
    "end": "1326419"
  },
  {
    "text": "our workloads end-to-end performance",
    "start": "1326419",
    "end": "1328580"
  },
  {
    "text": "from 3x to 6X slow down to less than",
    "start": "1328580",
    "end": "1331760"
  },
  {
    "text": "five percent slow down",
    "start": "1331760",
    "end": "1333400"
  },
  {
    "text": "so",
    "start": "1333400",
    "end": "1335000"
  },
  {
    "text": "this indicates that performance wise",
    "start": "1335000",
    "end": "1337159"
  },
  {
    "text": "Kata is qualified to support our hard",
    "start": "1337159",
    "end": "1340640"
  },
  {
    "text": "multi-tenancy infrastructure",
    "start": "1340640",
    "end": "1344539"
  },
  {
    "text": "so in our exploration of character",
    "start": "1346159",
    "end": "1348200"
  },
  {
    "text": "container we also Identify some",
    "start": "1348200",
    "end": "1350240"
  },
  {
    "text": "potential risks",
    "start": "1350240",
    "end": "1351980"
  },
  {
    "text": "besides the performance",
    "start": "1351980",
    "end": "1354080"
  },
  {
    "text": "for example like the noise neighbor",
    "start": "1354080",
    "end": "1356059"
  },
  {
    "text": "problem so inside a single node",
    "start": "1356059",
    "end": "1358880"
  },
  {
    "text": "there are still some resources that will",
    "start": "1358880",
    "end": "1361280"
  },
  {
    "text": "be shared by multiple kind of VMS for",
    "start": "1361280",
    "end": "1363679"
  },
  {
    "text": "example like the L3 cache the memory",
    "start": "1363679",
    "end": "1366080"
  },
  {
    "text": "bandwidth",
    "start": "1366080",
    "end": "1367159"
  },
  {
    "text": "and maybe like different partitions from",
    "start": "1367159",
    "end": "1369440"
  },
  {
    "text": "the same disk or like the network",
    "start": "1369440",
    "end": "1371480"
  },
  {
    "text": "bandwidth from the same Nic exact word",
    "start": "1371480",
    "end": "1374539"
  },
  {
    "text": "so when multiple kind of VM for access",
    "start": "1374539",
    "end": "1377240"
  },
  {
    "text": "these shared resources at the same time",
    "start": "1377240",
    "end": "1379940"
  },
  {
    "text": "it is possible that a resource",
    "start": "1379940",
    "end": "1382039"
  },
  {
    "text": "contention will happen and it might",
    "start": "1382039",
    "end": "1384260"
  },
  {
    "text": "cause a performance variation",
    "start": "1384260",
    "end": "1387580"
  },
  {
    "text": "so that's one of the potential risk and",
    "start": "1388159",
    "end": "1390799"
  },
  {
    "text": "another risk is the additional cost of",
    "start": "1390799",
    "end": "1394159"
  },
  {
    "text": "the infrastructure",
    "start": "1394159",
    "end": "1395860"
  },
  {
    "text": "so",
    "start": "1395860",
    "end": "1397400"
  },
  {
    "text": "our original architecture is like",
    "start": "1397400",
    "end": "1399820"
  },
  {
    "text": "assigning a single pod onto a single VM",
    "start": "1399820",
    "end": "1403820"
  },
  {
    "text": "and the VM size is just to fit the size",
    "start": "1403820",
    "end": "1406340"
  },
  {
    "text": "of my Single part",
    "start": "1406340",
    "end": "1408200"
  },
  {
    "text": "but after using Color we have to use",
    "start": "1408200",
    "end": "1410179"
  },
  {
    "text": "large machines available machines and we",
    "start": "1410179",
    "end": "1413659"
  },
  {
    "text": "have to allocate multiple color VMS on",
    "start": "1413659",
    "end": "1417080"
  },
  {
    "text": "top of a single machine",
    "start": "1417080",
    "end": "1419240"
  },
  {
    "text": "so",
    "start": "1419240",
    "end": "1420440"
  },
  {
    "text": "the scheduler by default will balance",
    "start": "1420440",
    "end": "1422960"
  },
  {
    "text": "the load across the node within the",
    "start": "1422960",
    "end": "1424940"
  },
  {
    "text": "kubernetes cluster",
    "start": "1424940",
    "end": "1426860"
  },
  {
    "text": "and as the time goes by sample will come",
    "start": "1426860",
    "end": "1429980"
  },
  {
    "text": "and some some part will go",
    "start": "1429980",
    "end": "1432260"
  },
  {
    "text": "and the node cannot always be fully",
    "start": "1432260",
    "end": "1435799"
  },
  {
    "text": "utilized like the graph are showing",
    "start": "1435799",
    "end": "1437840"
  },
  {
    "text": "below some of the node might have some",
    "start": "1437840",
    "end": "1440840"
  },
  {
    "text": "fragmentations and these fragmentations",
    "start": "1440840",
    "end": "1444020"
  },
  {
    "text": "makes more infrastructure costs from uh",
    "start": "1444020",
    "end": "1447500"
  },
  {
    "text": "or like the SAS company like us",
    "start": "1447500",
    "end": "1450380"
  },
  {
    "text": "so those are some concerns and potential",
    "start": "1450380",
    "end": "1453140"
  },
  {
    "text": "risk that we found during our",
    "start": "1453140",
    "end": "1454760"
  },
  {
    "text": "exploration",
    "start": "1454760",
    "end": "1457220"
  },
  {
    "text": "and there might be some other problems",
    "start": "1457220",
    "end": "1459080"
  },
  {
    "text": "for example like uh when if we onboard a",
    "start": "1459080",
    "end": "1462980"
  },
  {
    "text": "color container into AWS we have to use",
    "start": "1462980",
    "end": "1464960"
  },
  {
    "text": "the variable machine and it turns out",
    "start": "1464960",
    "end": "1466760"
  },
  {
    "text": "that the instance type capacity may not",
    "start": "1466760",
    "end": "1469280"
  },
  {
    "text": "that large enough for the bare metal",
    "start": "1469280",
    "end": "1471080"
  },
  {
    "text": "machine compared with uh like the normal",
    "start": "1471080",
    "end": "1473299"
  },
  {
    "text": "VM",
    "start": "1473299",
    "end": "1474679"
  },
  {
    "text": "and um allocate additional we we also",
    "start": "1474679",
    "end": "1478580"
  },
  {
    "text": "need to allocate a digital resource in",
    "start": "1478580",
    "end": "1480320"
  },
  {
    "text": "the node to cover the virtualization",
    "start": "1480320",
    "end": "1481820"
  },
  {
    "text": "costs for example like after onboarding",
    "start": "1481820",
    "end": "1484159"
  },
  {
    "text": "spdk there are additional CPUs that will",
    "start": "1484159",
    "end": "1487159"
  },
  {
    "text": "be used to busy pulling the iOS and we",
    "start": "1487159",
    "end": "1490340"
  },
  {
    "text": "also need to allocate memorys and CPUs",
    "start": "1490340",
    "end": "1493220"
  },
  {
    "text": "for the hypervisors",
    "start": "1493220",
    "end": "1496100"
  },
  {
    "text": "and some of our product scenario is not",
    "start": "1496100",
    "end": "1500120"
  },
  {
    "text": "well covered by the current color VMS",
    "start": "1500120",
    "end": "1502400"
  },
  {
    "text": "such as like what if we want to do some",
    "start": "1502400",
    "end": "1505039"
  },
  {
    "text": "machine learning data training model",
    "start": "1505039",
    "end": "1507020"
  },
  {
    "text": "with the GPU we have to device password",
    "start": "1507020",
    "end": "1509840"
  },
  {
    "text": "do the device password for the GPU",
    "start": "1509840",
    "end": "1511820"
  },
  {
    "text": "inside a card at the end so those",
    "start": "1511820",
    "end": "1513320"
  },
  {
    "text": "scenario is not well supported",
    "start": "1513320",
    "end": "1514880"
  },
  {
    "text": "apparently in a kind of Upstream",
    "start": "1514880",
    "end": "1518799"
  },
  {
    "text": "so but well it's a conclusion then so",
    "start": "1519100",
    "end": "1522080"
  },
  {
    "text": "the conclusion is",
    "start": "1522080",
    "end": "1523520"
  },
  {
    "text": "the color container is a great project",
    "start": "1523520",
    "end": "1525799"
  },
  {
    "text": "to support the hard multitudency",
    "start": "1525799",
    "end": "1528080"
  },
  {
    "text": "equivalents it provides the VM",
    "start": "1528080",
    "end": "1530179"
  },
  {
    "text": "boundaries of a container boundary and",
    "start": "1530179",
    "end": "1532880"
  },
  {
    "text": "make the container make the customer",
    "start": "1532880",
    "end": "1534740"
  },
  {
    "text": "hard to break out again break out a",
    "start": "1534740",
    "end": "1537380"
  },
  {
    "text": "container",
    "start": "1537380",
    "end": "1538580"
  },
  {
    "text": "and by fine-tuning the performance",
    "start": "1538580",
    "end": "1541100"
  },
  {
    "text": "color container can reach similar",
    "start": "1541100",
    "end": "1543200"
  },
  {
    "text": "performance level to Native technology",
    "start": "1543200",
    "end": "1547220"
  },
  {
    "text": "however on the other side color",
    "start": "1547220",
    "end": "1549440"
  },
  {
    "text": "container brings its own complexity",
    "start": "1549440",
    "end": "1552080"
  },
  {
    "text": "if we want to use it in production some",
    "start": "1552080",
    "end": "1555020"
  },
  {
    "text": "additional efforts is required to make",
    "start": "1555020",
    "end": "1557240"
  },
  {
    "text": "the infrastructure as consistent",
    "start": "1557240",
    "end": "1559460"
  },
  {
    "text": "performance and cost efficient",
    "start": "1559460",
    "end": "1563480"
  },
  {
    "text": "so that's all for today's share and",
    "start": "1563480",
    "end": "1566419"
  },
  {
    "text": "finally I will do a short advertisement",
    "start": "1566419",
    "end": "1569600"
  },
  {
    "text": "so databrick server list is now in",
    "start": "1569600",
    "end": "1572240"
  },
  {
    "text": "public preview for both ALS and azure",
    "start": "1572240",
    "end": "1575120"
  },
  {
    "text": "and we were short goes to GA and welcome",
    "start": "1575120",
    "end": "1578960"
  },
  {
    "text": "to shoot a trip our products and it's",
    "start": "1578960",
    "end": "1581179"
  },
  {
    "text": "super amazing",
    "start": "1581179",
    "end": "1583840"
  },
  {
    "text": "so that's it for today thanks for",
    "start": "1584720",
    "end": "1587419"
  },
  {
    "text": "attending the talk",
    "start": "1587419",
    "end": "1590139"
  }
]