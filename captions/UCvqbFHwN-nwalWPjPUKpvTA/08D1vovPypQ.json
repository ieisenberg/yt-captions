[
  {
    "start": "0",
    "end": "124000"
  },
  {
    "text": "welcome to our talk about low latency",
    "start": "80",
    "end": "1760"
  },
  {
    "text": "and session oriented serverless",
    "start": "1760",
    "end": "2879"
  },
  {
    "text": "workflows",
    "start": "2879",
    "end": "3760"
  },
  {
    "text": "my name is manuel and i'm here with my",
    "start": "3760",
    "end": "5200"
  },
  {
    "text": "colleague parkerchart in this talk",
    "start": "5200",
    "end": "7440"
  },
  {
    "text": "we want to explore how a serverless",
    "start": "7440",
    "end": "8800"
  },
  {
    "text": "platform can support two important",
    "start": "8800",
    "end": "10320"
  },
  {
    "text": "aspects of applications the need for low",
    "start": "10320",
    "end": "12320"
  },
  {
    "text": "latency",
    "start": "12320",
    "end": "13040"
  },
  {
    "text": "and handling of state serverless has a",
    "start": "13040",
    "end": "15759"
  },
  {
    "text": "great prospect that says",
    "start": "15759",
    "end": "17199"
  },
  {
    "text": "developers should focus on application",
    "start": "17199",
    "end": "18640"
  },
  {
    "text": "logic while the platform performs",
    "start": "18640",
    "end": "20080"
  },
  {
    "text": "everything necessary to run it",
    "start": "20080",
    "end": "22240"
  },
  {
    "text": "and writing large distributed",
    "start": "22240",
    "end": "23519"
  },
  {
    "text": "applications does not come easily",
    "start": "23519",
    "end": "25439"
  },
  {
    "text": "so i always like the idea of an",
    "start": "25439",
    "end": "27039"
  },
  {
    "text": "intelligent platform that would cover",
    "start": "27039",
    "end": "28560"
  },
  {
    "text": "all the plumbing",
    "start": "28560",
    "end": "29599"
  },
  {
    "text": "but what i especially liked about",
    "start": "29599",
    "end": "30960"
  },
  {
    "text": "serverless when it was coming up in 2015",
    "start": "30960",
    "end": "33040"
  },
  {
    "text": "is that",
    "start": "33040",
    "end": "33760"
  },
  {
    "text": "whenever some part of my application is",
    "start": "33760",
    "end": "35520"
  },
  {
    "text": "no longer needed the platform would take",
    "start": "35520",
    "end": "37360"
  },
  {
    "text": "it out",
    "start": "37360",
    "end": "38239"
  },
  {
    "text": "and the reason i want that from a",
    "start": "38239",
    "end": "39520"
  },
  {
    "text": "platform are zombies",
    "start": "39520",
    "end": "41600"
  },
  {
    "text": "back in 2008 an estimated 30 of servers",
    "start": "41600",
    "end": "44399"
  },
  {
    "text": "and data centers were functionally dead",
    "start": "44399",
    "end": "46640"
  },
  {
    "text": "that means they appear alive but the",
    "start": "46640",
    "end": "48399"
  },
  {
    "text": "applications they're running haven't",
    "start": "48399",
    "end": "49600"
  },
  {
    "text": "been accessed in at least six months",
    "start": "49600",
    "end": "51520"
  },
  {
    "text": "despite all of our efforts in cloud",
    "start": "51520",
    "end": "52960"
  },
  {
    "text": "computing over the years that figure",
    "start": "52960",
    "end": "54960"
  },
  {
    "text": "still remain the same",
    "start": "54960",
    "end": "56480"
  },
  {
    "text": "one third of the capacity in data",
    "start": "56480",
    "end": "58000"
  },
  {
    "text": "centers is blocked by applications",
    "start": "58000",
    "end": "59680"
  },
  {
    "text": "that no longer have a purpose and have",
    "start": "59680",
    "end": "61280"
  },
  {
    "text": "been abandoned by their developers and",
    "start": "61280",
    "end": "62800"
  },
  {
    "text": "their users",
    "start": "62800",
    "end": "65198"
  },
  {
    "text": "when we develop our pet applications we",
    "start": "65199",
    "end": "66880"
  },
  {
    "text": "want them to have enough resources to",
    "start": "66880",
    "end": "68400"
  },
  {
    "text": "survive and be healthy",
    "start": "68400",
    "end": "69920"
  },
  {
    "text": "but we can't afford to have them run all",
    "start": "69920",
    "end": "71439"
  },
  {
    "text": "over the place so a good engineer would",
    "start": "71439",
    "end": "73439"
  },
  {
    "text": "care for applications by overseeing that",
    "start": "73439",
    "end": "75200"
  },
  {
    "text": "they will behave",
    "start": "75200",
    "end": "76560"
  },
  {
    "text": "that's also known to be a good part of",
    "start": "76560",
    "end": "78000"
  },
  {
    "text": "devops with every iteration the",
    "start": "78000",
    "end": "80240"
  },
  {
    "text": "automation improves",
    "start": "80240",
    "end": "81280"
  },
  {
    "text": "but it also causes a lot of distraction",
    "start": "81280",
    "end": "83119"
  },
  {
    "text": "from developing new use cases",
    "start": "83119",
    "end": "85119"
  },
  {
    "text": "at nokia bellaps we had developed",
    "start": "85119",
    "end": "86799"
  },
  {
    "text": "methods to augment the devops lifecycle",
    "start": "86799",
    "end": "88560"
  },
  {
    "text": "by correlating metrics for root cause",
    "start": "88560",
    "end": "90240"
  },
  {
    "text": "analysis load prediction models to meet",
    "start": "90240",
    "end": "92320"
  },
  {
    "text": "usage patterns",
    "start": "92320",
    "end": "93520"
  },
  {
    "text": "order configuration tools and of course",
    "start": "93520",
    "end": "95119"
  },
  {
    "text": "deep reinforcement learning to manage",
    "start": "95119",
    "end": "96720"
  },
  {
    "text": "applications",
    "start": "96720",
    "end": "97680"
  },
  {
    "text": "but there are many pitfalls because",
    "start": "97680",
    "end": "99040"
  },
  {
    "text": "every application is different and more",
    "start": "99040",
    "end": "100720"
  },
  {
    "text": "so",
    "start": "100720",
    "end": "101200"
  },
  {
    "text": "multiple deployments of the same",
    "start": "101200",
    "end": "102479"
  },
  {
    "text": "application may see different usage and",
    "start": "102479",
    "end": "104079"
  },
  {
    "text": "different resource consumption",
    "start": "104079",
    "end": "105840"
  },
  {
    "text": "with the human in the loop the devops",
    "start": "105840",
    "end": "107360"
  },
  {
    "text": "lifecycle is expensive to keep up with",
    "start": "107360",
    "end": "109119"
  },
  {
    "text": "multiple production environments",
    "start": "109119",
    "end": "111119"
  },
  {
    "text": "eventually when developers and users",
    "start": "111119",
    "end": "112720"
  },
  {
    "text": "have moved on to other services",
    "start": "112720",
    "end": "114640"
  },
  {
    "text": "the deployments often remain and turn",
    "start": "114640",
    "end": "116399"
  },
  {
    "text": "servers into zombies",
    "start": "116399",
    "end": "118079"
  },
  {
    "text": "but serverless is different because it",
    "start": "118079",
    "end": "119840"
  },
  {
    "text": "takes full control over the execution",
    "start": "119840",
    "end": "121759"
  },
  {
    "text": "and the deployment lifecycle",
    "start": "121759",
    "end": "124719"
  },
  {
    "start": "124000",
    "end": "427000"
  },
  {
    "text": "the function as a service model is a",
    "start": "124719",
    "end": "126000"
  },
  {
    "text": "good start to offer a serverless",
    "start": "126000",
    "end": "127280"
  },
  {
    "text": "platform",
    "start": "127280",
    "end": "128239"
  },
  {
    "text": "it asks developers to model the",
    "start": "128239",
    "end": "129759"
  },
  {
    "text": "application around invocations which",
    "start": "129759",
    "end": "131599"
  },
  {
    "text": "allows the platform to do demand scaling",
    "start": "131599",
    "end": "134160"
  },
  {
    "text": "the first generation of platforms would",
    "start": "134160",
    "end": "135760"
  },
  {
    "text": "use one container for every request",
    "start": "135760",
    "end": "138400"
  },
  {
    "text": "admitting only one request at a time",
    "start": "138400",
    "end": "140400"
  },
  {
    "text": "gives each execution a consistent",
    "start": "140400",
    "end": "142000"
  },
  {
    "text": "amount of resources and that is",
    "start": "142000",
    "end": "143680"
  },
  {
    "text": "important when the platform charges by",
    "start": "143680",
    "end": "145280"
  },
  {
    "text": "the resource time of an invocation",
    "start": "145280",
    "end": "147840"
  },
  {
    "text": "but it also causes cold starts every",
    "start": "147840",
    "end": "150239"
  },
  {
    "text": "sudden increase on concurrency would",
    "start": "150239",
    "end": "152000"
  },
  {
    "text": "face long queuing delays",
    "start": "152000",
    "end": "153519"
  },
  {
    "text": "and developers have gone to great",
    "start": "153519",
    "end": "154800"
  },
  {
    "text": "lengths and same progress invocations",
    "start": "154800",
    "end": "156480"
  },
  {
    "text": "just to have the platform keep their",
    "start": "156480",
    "end": "157840"
  },
  {
    "text": "instances warm",
    "start": "157840",
    "end": "159200"
  },
  {
    "text": "that model works well for batch type",
    "start": "159200",
    "end": "160720"
  },
  {
    "text": "jobs like data collection analysis or",
    "start": "160720",
    "end": "162720"
  },
  {
    "text": "report generation",
    "start": "162720",
    "end": "164000"
  },
  {
    "text": "but in a telecom space our functions are",
    "start": "164000",
    "end": "166400"
  },
  {
    "text": "often on the control path",
    "start": "166400",
    "end": "168239"
  },
  {
    "text": "they need to respond fast and have only",
    "start": "168239",
    "end": "169920"
  },
  {
    "text": "a short execution time",
    "start": "169920",
    "end": "171840"
  },
  {
    "text": "that's why back in 2016 we had started",
    "start": "171840",
    "end": "173920"
  },
  {
    "text": "to build our own platform",
    "start": "173920",
    "end": "175840"
  },
  {
    "text": "we'd allow more than one request at a",
    "start": "175840",
    "end": "177760"
  },
  {
    "text": "time and we'd use forking for process",
    "start": "177760",
    "end": "179680"
  },
  {
    "text": "level isolation",
    "start": "179680",
    "end": "180800"
  },
  {
    "text": "nucleo and the open fast watch stock had",
    "start": "180800",
    "end": "182480"
  },
  {
    "text": "implemented similar event loops",
    "start": "182480",
    "end": "184319"
  },
  {
    "text": "process isolation is a good trade-off",
    "start": "184319",
    "end": "186080"
  },
  {
    "text": "between fault isolation and startup time",
    "start": "186080",
    "end": "188720"
  },
  {
    "text": "when we admit more than one request per",
    "start": "188720",
    "end": "190560"
  },
  {
    "text": "container we can decouple the scaling",
    "start": "190560",
    "end": "192480"
  },
  {
    "text": "decision and tune it for better response",
    "start": "192480",
    "end": "194640"
  },
  {
    "text": "time distribution",
    "start": "194640",
    "end": "195920"
  },
  {
    "text": "today the same can be found in canadia",
    "start": "195920",
    "end": "197680"
  },
  {
    "text": "of autoscaling and kedar",
    "start": "197680",
    "end": "199920"
  },
  {
    "text": "but now we've created a new challenge",
    "start": "199920",
    "end": "202239"
  },
  {
    "text": "now we need to select the right event",
    "start": "202239",
    "end": "203920"
  },
  {
    "text": "loop and tuned demand driven scaling",
    "start": "203920",
    "end": "206400"
  },
  {
    "text": "we can either choose to scale closer to",
    "start": "206400",
    "end": "208319"
  },
  {
    "text": "demand and accept the occasional code",
    "start": "208319",
    "end": "209920"
  },
  {
    "text": "start",
    "start": "209920",
    "end": "210480"
  },
  {
    "text": "or allocate larger containers in advance",
    "start": "210480",
    "end": "212480"
  },
  {
    "text": "and have better multiplexing gain",
    "start": "212480",
    "end": "214720"
  },
  {
    "text": "when building a serverless platform we",
    "start": "214720",
    "end": "216480"
  },
  {
    "text": "don't want to expose this to the",
    "start": "216480",
    "end": "217840"
  },
  {
    "text": "developer",
    "start": "217840",
    "end": "218640"
  },
  {
    "text": "we want a platform that can take a",
    "start": "218640",
    "end": "220159"
  },
  {
    "text": "business objective and find the right",
    "start": "220159",
    "end": "221840"
  },
  {
    "text": "trade-off between queueing delays and",
    "start": "221840",
    "end": "223360"
  },
  {
    "text": "resource provisioning",
    "start": "223360",
    "end": "225360"
  },
  {
    "text": "but it doesn't stop with the function",
    "start": "225360",
    "end": "227040"
  },
  {
    "text": "we've looked further to reduce latencies",
    "start": "227040",
    "end": "228720"
  },
  {
    "text": "in serverless applications",
    "start": "228720",
    "end": "230560"
  },
  {
    "text": "an application would comprise more than",
    "start": "230560",
    "end": "232319"
  },
  {
    "text": "just one function",
    "start": "232319",
    "end": "234000"
  },
  {
    "text": "to build entire applications on",
    "start": "234000",
    "end": "235360"
  },
  {
    "text": "serverless we need a way to compose them",
    "start": "235360",
    "end": "238000"
  },
  {
    "text": "and a workflow isn't the worst idea",
    "start": "238000",
    "end": "240159"
  },
  {
    "text": "workflows give functions a common",
    "start": "240159",
    "end": "241760"
  },
  {
    "text": "context",
    "start": "241760",
    "end": "242640"
  },
  {
    "text": "a workflow describes which data are used",
    "start": "242640",
    "end": "244400"
  },
  {
    "text": "as function inputs and what to do with",
    "start": "244400",
    "end": "246159"
  },
  {
    "text": "the result",
    "start": "246159",
    "end": "247280"
  },
  {
    "text": "and the workflow also models a control",
    "start": "247280",
    "end": "248959"
  },
  {
    "text": "flow that defines the order of",
    "start": "248959",
    "end": "250239"
  },
  {
    "text": "invocations or even branching",
    "start": "250239",
    "end": "252799"
  },
  {
    "text": "depending on the workflow language the",
    "start": "252799",
    "end": "254400"
  },
  {
    "text": "model may use a task graph a flowchart",
    "start": "254400",
    "end": "256400"
  },
  {
    "text": "or state chart",
    "start": "256400",
    "end": "258160"
  },
  {
    "text": "the cncf has given serverless workflows",
    "start": "258160",
    "end": "260079"
  },
  {
    "text": "a sandbox project",
    "start": "260079",
    "end": "261280"
  },
  {
    "text": "to create a community-driven workflow",
    "start": "261280",
    "end": "263040"
  },
  {
    "text": "language that meets our requirements as",
    "start": "263040",
    "end": "264800"
  },
  {
    "text": "serverless practitioners",
    "start": "264800",
    "end": "266240"
  },
  {
    "text": "i think the foundation is the perfect",
    "start": "266240",
    "end": "267680"
  },
  {
    "text": "environment to create a vendor neutral",
    "start": "267680",
    "end": "269360"
  },
  {
    "text": "specification",
    "start": "269360",
    "end": "270160"
  },
  {
    "text": "but how should the platform run a",
    "start": "270160",
    "end": "271520"
  },
  {
    "text": "serverless workflow we need to maintain",
    "start": "271520",
    "end": "273759"
  },
  {
    "text": "the context of each activation",
    "start": "273759",
    "end": "275440"
  },
  {
    "text": "and we need to execute those small",
    "start": "275440",
    "end": "277040"
  },
  {
    "text": "pieces of orchestration logic",
    "start": "277040",
    "end": "279759"
  },
  {
    "text": "let's take this tiny workflow it",
    "start": "279759",
    "end": "281600"
  },
  {
    "text": "receives an event executes function 1",
    "start": "281600",
    "end": "284080"
  },
  {
    "text": "makes a choice to execute either",
    "start": "284080",
    "end": "285680"
  },
  {
    "text": "function 2 or 3",
    "start": "285680",
    "end": "287199"
  },
  {
    "text": "and emits a result let's assume most",
    "start": "287199",
    "end": "290000"
  },
  {
    "text": "invocations would run function 1 and",
    "start": "290000",
    "end": "291680"
  },
  {
    "text": "feed the result to function 2.",
    "start": "291680",
    "end": "293600"
  },
  {
    "text": "only some inputs would take the",
    "start": "293600",
    "end": "295280"
  },
  {
    "text": "alternate path",
    "start": "295280",
    "end": "296880"
  },
  {
    "text": "a common way to orchestrate workflows is",
    "start": "296880",
    "end": "298800"
  },
  {
    "text": "to run the workflow logic in one place",
    "start": "298800",
    "end": "300960"
  },
  {
    "text": "the engine would receive the request",
    "start": "300960",
    "end": "302720"
  },
  {
    "text": "evaluate the workflow and call functions",
    "start": "302720",
    "end": "305039"
  },
  {
    "text": "this may bear the risk of double billing",
    "start": "305039",
    "end": "306800"
  },
  {
    "text": "and that requires invocations to go back",
    "start": "306800",
    "end": "308639"
  },
  {
    "text": "and forth through the engine",
    "start": "308639",
    "end": "311120"
  },
  {
    "text": "another approach is to distribute the",
    "start": "311120",
    "end": "312639"
  },
  {
    "text": "workflow logic we chop up the workflow",
    "start": "312639",
    "end": "315039"
  },
  {
    "text": "into little pieces",
    "start": "315039",
    "end": "316400"
  },
  {
    "text": "and deploy them alongside the functions",
    "start": "316400",
    "end": "318960"
  },
  {
    "text": "we could even set up an event chain here",
    "start": "318960",
    "end": "320720"
  },
  {
    "text": "and use event routing to pass messages",
    "start": "320720",
    "end": "322400"
  },
  {
    "text": "from container to container",
    "start": "322400",
    "end": "324080"
  },
  {
    "text": "this model yields a good throughput as",
    "start": "324080",
    "end": "325600"
  },
  {
    "text": "it can benefit from pipelining",
    "start": "325600",
    "end": "327120"
  },
  {
    "text": "but latency wise it has a lot of",
    "start": "327120",
    "end": "328800"
  },
  {
    "text": "messaging overhead given that the",
    "start": "328800",
    "end": "330160"
  },
  {
    "text": "functions and the logic pieces are very",
    "start": "330160",
    "end": "331840"
  },
  {
    "text": "short executions",
    "start": "331840",
    "end": "333919"
  },
  {
    "text": "in this particular case it might",
    "start": "333919",
    "end": "335360"
  },
  {
    "text": "actually be affordable to collocate",
    "start": "335360",
    "end": "337039"
  },
  {
    "text": "function 1 and function 2",
    "start": "337039",
    "end": "338720"
  },
  {
    "text": "and use very conservative scaling for",
    "start": "338720",
    "end": "340479"
  },
  {
    "text": "fast completion time",
    "start": "340479",
    "end": "342000"
  },
  {
    "text": "and we can package function 3 separately",
    "start": "342000",
    "end": "344000"
  },
  {
    "text": "with a very dynamic and adhoc scaling",
    "start": "344000",
    "end": "346479"
  },
  {
    "text": "these are optimizations that devops",
    "start": "346479",
    "end": "348080"
  },
  {
    "text": "would go through to refactor and",
    "start": "348080",
    "end": "349759"
  },
  {
    "text": "optimize an application",
    "start": "349759",
    "end": "351600"
  },
  {
    "text": "in this example the majority of",
    "start": "351600",
    "end": "353039"
  },
  {
    "text": "invocations requires function too",
    "start": "353039",
    "end": "354960"
  },
  {
    "text": "but we also might want to co-locate",
    "start": "354960",
    "end": "356560"
  },
  {
    "text": "functions when they share the same",
    "start": "356560",
    "end": "358400"
  },
  {
    "text": "dependencies to save resources",
    "start": "358400",
    "end": "360160"
  },
  {
    "text": "or when volatile data is passed between",
    "start": "360160",
    "end": "362080"
  },
  {
    "text": "them that is not worth externalization",
    "start": "362080",
    "end": "364880"
  },
  {
    "text": "serverless no longer tweets the",
    "start": "364880",
    "end": "366080"
  },
  {
    "text": "application as a black box it takes",
    "start": "366080",
    "end": "367919"
  },
  {
    "text": "control of the execution the scaling the",
    "start": "367919",
    "end": "370080"
  },
  {
    "text": "load distribution and the packaging of",
    "start": "370080",
    "end": "371919"
  },
  {
    "text": "code",
    "start": "371919",
    "end": "372639"
  },
  {
    "text": "we want our platform to provide the same",
    "start": "372639",
    "end": "374560"
  },
  {
    "text": "comfort to developers of low latency",
    "start": "374560",
    "end": "376400"
  },
  {
    "text": "applications",
    "start": "376400",
    "end": "377759"
  },
  {
    "text": "here are my key takeaways we want",
    "start": "377759",
    "end": "379680"
  },
  {
    "text": "serverless to support low latency",
    "start": "379680",
    "end": "381199"
  },
  {
    "text": "applications",
    "start": "381199",
    "end": "382240"
  },
  {
    "text": "and we think function as a service is",
    "start": "382240",
    "end": "383759"
  },
  {
    "text": "not there yet admitting one request at a",
    "start": "383759",
    "end": "386319"
  },
  {
    "text": "time into a container didn't cut it",
    "start": "386319",
    "end": "388160"
  },
  {
    "text": "and packaging each function into a",
    "start": "388160",
    "end": "389600"
  },
  {
    "text": "separate container still has a lot of",
    "start": "389600",
    "end": "391360"
  },
  {
    "text": "optimization potential",
    "start": "391360",
    "end": "393199"
  },
  {
    "text": "to achieve our goal we need the platform",
    "start": "393199",
    "end": "395039"
  },
  {
    "text": "to not only manage functions but entire",
    "start": "395039",
    "end": "397199"
  },
  {
    "text": "workflows",
    "start": "397199",
    "end": "398160"
  },
  {
    "text": "and we're no longer going to hide in the",
    "start": "398160",
    "end": "399840"
  },
  {
    "text": "dark from the zombies",
    "start": "399840",
    "end": "401759"
  },
  {
    "text": "now in the next part of our presentation",
    "start": "401759",
    "end": "403759"
  },
  {
    "text": "my colleague biochart is going to look",
    "start": "403759",
    "end": "405280"
  },
  {
    "text": "at different solutions to manage",
    "start": "405280",
    "end": "406639"
  },
  {
    "text": "application state",
    "start": "406639",
    "end": "407680"
  },
  {
    "text": "for session oriented workflows so till",
    "start": "407680",
    "end": "410800"
  },
  {
    "text": "now we have discussed",
    "start": "410800",
    "end": "412000"
  },
  {
    "text": "optimizations for isolating function",
    "start": "412000",
    "end": "414240"
  },
  {
    "text": "instances and creating function",
    "start": "414240",
    "end": "415840"
  },
  {
    "text": "compositions",
    "start": "415840",
    "end": "417199"
  },
  {
    "text": "in that discussion we also implicitly",
    "start": "417199",
    "end": "419280"
  },
  {
    "text": "assumed that these function invocations",
    "start": "419280",
    "end": "421440"
  },
  {
    "text": "are stateless",
    "start": "421440",
    "end": "422400"
  },
  {
    "text": "that is an invocation to a function does",
    "start": "422400",
    "end": "424400"
  },
  {
    "text": "not depend on its previous invocations",
    "start": "424400",
    "end": "427360"
  },
  {
    "start": "427000",
    "end": "561000"
  },
  {
    "text": "but often apps need to model stateful",
    "start": "427360",
    "end": "430319"
  },
  {
    "text": "entities",
    "start": "430319",
    "end": "431280"
  },
  {
    "text": "and in these scenarios which i will",
    "start": "431280",
    "end": "432960"
  },
  {
    "text": "describe next",
    "start": "432960",
    "end": "434319"
  },
  {
    "text": "the optimizations we have discussed till",
    "start": "434319",
    "end": "436400"
  },
  {
    "text": "now do not help",
    "start": "436400",
    "end": "438000"
  },
  {
    "text": "with efficient state management so take",
    "start": "438000",
    "end": "440720"
  },
  {
    "text": "for example let's say you want to model",
    "start": "440720",
    "end": "442560"
  },
  {
    "text": "a stateful entity in your function such",
    "start": "442560",
    "end": "444479"
  },
  {
    "text": "as",
    "start": "444479",
    "end": "444720"
  },
  {
    "text": "a shopping cart or a chatroom in this",
    "start": "444720",
    "end": "447680"
  },
  {
    "text": "scenario",
    "start": "447680",
    "end": "448720"
  },
  {
    "text": "you need to maintain some state such as",
    "start": "448720",
    "end": "451440"
  },
  {
    "text": "the list of users inside the chatroom",
    "start": "451440",
    "end": "453759"
  },
  {
    "text": "and the history of messages exchanged",
    "start": "453759",
    "end": "456000"
  },
  {
    "text": "and then you need to allow that state to",
    "start": "456000",
    "end": "457919"
  },
  {
    "text": "be repeatedly modified",
    "start": "457919",
    "end": "459919"
  },
  {
    "text": "depending on external actions such as",
    "start": "459919",
    "end": "462479"
  },
  {
    "text": "addition or deletion of a user",
    "start": "462479",
    "end": "464400"
  },
  {
    "text": "or sending or deleting a message so the",
    "start": "464400",
    "end": "467360"
  },
  {
    "text": "function modeling this",
    "start": "467360",
    "end": "468800"
  },
  {
    "text": "needs repeated access to the state that",
    "start": "468800",
    "end": "471280"
  },
  {
    "text": "is encapsulated",
    "start": "471280",
    "end": "472479"
  },
  {
    "text": "and then allow that state to be modified",
    "start": "472479",
    "end": "474960"
  },
  {
    "text": "in a way such that the order of actions",
    "start": "474960",
    "end": "477039"
  },
  {
    "text": "is important",
    "start": "477039",
    "end": "478400"
  },
  {
    "text": "so that the modeled entity moves from",
    "start": "478400",
    "end": "480319"
  },
  {
    "text": "one consistent state to another",
    "start": "480319",
    "end": "482720"
  },
  {
    "text": "so that is an example of a stateful",
    "start": "482720",
    "end": "484720"
  },
  {
    "text": "function",
    "start": "484720",
    "end": "486000"
  },
  {
    "text": "another example could be when you're",
    "start": "486000",
    "end": "487440"
  },
  {
    "text": "doing machine learning training",
    "start": "487440",
    "end": "489039"
  },
  {
    "text": "such as in reinforcement learning where",
    "start": "489039",
    "end": "491360"
  },
  {
    "text": "you need to model a physical system",
    "start": "491360",
    "end": "493759"
  },
  {
    "text": "maintained as a state and then you feed",
    "start": "493759",
    "end": "495919"
  },
  {
    "text": "in a series of actions",
    "start": "495919",
    "end": "497759"
  },
  {
    "text": "moving the state step by step towards an",
    "start": "497759",
    "end": "500080"
  },
  {
    "text": "ultimate reward",
    "start": "500080",
    "end": "501520"
  },
  {
    "text": "once again here the function would need",
    "start": "501520",
    "end": "504080"
  },
  {
    "text": "repeated quick",
    "start": "504080",
    "end": "505039"
  },
  {
    "text": "access to the state and then allow that",
    "start": "505039",
    "end": "507440"
  },
  {
    "text": "state to be modified such that the order",
    "start": "507440",
    "end": "509360"
  },
  {
    "text": "of actions is important",
    "start": "509360",
    "end": "511759"
  },
  {
    "text": "now one simple way of managing state",
    "start": "511759",
    "end": "513680"
  },
  {
    "text": "could be that",
    "start": "513680",
    "end": "515120"
  },
  {
    "text": "every function invocation before it",
    "start": "515120",
    "end": "517120"
  },
  {
    "text": "finishes externalizes its state",
    "start": "517120",
    "end": "519279"
  },
  {
    "text": "and the next invocation reads that state",
    "start": "519279",
    "end": "522000"
  },
  {
    "text": "back in before proceeding ahead",
    "start": "522000",
    "end": "524399"
  },
  {
    "text": "now this keeps the function stateless",
    "start": "524399",
    "end": "526880"
  },
  {
    "text": "but it may also incur high latency or",
    "start": "526880",
    "end": "529279"
  },
  {
    "text": "resource overheads",
    "start": "529279",
    "end": "530560"
  },
  {
    "text": "depending on how big a state you need to",
    "start": "530560",
    "end": "532720"
  },
  {
    "text": "externalize",
    "start": "532720",
    "end": "533760"
  },
  {
    "text": "and how often you need to access it",
    "start": "533760",
    "end": "536800"
  },
  {
    "text": "and furthermore if you allow this state",
    "start": "536800",
    "end": "539200"
  },
  {
    "text": "to be concurrently updated from",
    "start": "539200",
    "end": "540959"
  },
  {
    "text": "different function",
    "start": "540959",
    "end": "541760"
  },
  {
    "text": "instances it may lead to conflicting",
    "start": "541760",
    "end": "544240"
  },
  {
    "text": "updates",
    "start": "544240",
    "end": "545360"
  },
  {
    "text": "and it may make it harder for you to",
    "start": "545360",
    "end": "547519"
  },
  {
    "text": "reason about the consistency",
    "start": "547519",
    "end": "549440"
  },
  {
    "text": "of this data so given these limitations",
    "start": "549440",
    "end": "553279"
  },
  {
    "text": "serverless platform providers have",
    "start": "553279",
    "end": "554959"
  },
  {
    "text": "increasingly started providing built-in",
    "start": "554959",
    "end": "556800"
  },
  {
    "text": "support for state management",
    "start": "556800",
    "end": "558560"
  },
  {
    "text": "as well as stateful or session-oriented",
    "start": "558560",
    "end": "560560"
  },
  {
    "text": "functions",
    "start": "560560",
    "end": "561760"
  },
  {
    "start": "561000",
    "end": "625000"
  },
  {
    "text": "and one such example is to provide",
    "start": "561760",
    "end": "563760"
  },
  {
    "text": "support for long-running function",
    "start": "563760",
    "end": "565680"
  },
  {
    "text": "instances which do not terminate and",
    "start": "565680",
    "end": "568240"
  },
  {
    "text": "furthermore",
    "start": "568240",
    "end": "569120"
  },
  {
    "text": "these function instances are uniquely",
    "start": "569120",
    "end": "571040"
  },
  {
    "text": "addressable so that the very same",
    "start": "571040",
    "end": "573200"
  },
  {
    "text": "instance",
    "start": "573200",
    "end": "573839"
  },
  {
    "text": "can be invoked multiple times without",
    "start": "573839",
    "end": "576560"
  },
  {
    "text": "having that instance lose its internal",
    "start": "576560",
    "end": "578480"
  },
  {
    "text": "state",
    "start": "578480",
    "end": "579200"
  },
  {
    "text": "so essentially the function instance",
    "start": "579200",
    "end": "581120"
  },
  {
    "text": "maintains in memory the state across",
    "start": "581120",
    "end": "583120"
  },
  {
    "text": "function invocations",
    "start": "583120",
    "end": "584800"
  },
  {
    "text": "and furthermore all the external events",
    "start": "584800",
    "end": "587279"
  },
  {
    "text": "are processed in a serial manner by this",
    "start": "587279",
    "end": "589519"
  },
  {
    "text": "function",
    "start": "589519",
    "end": "590000"
  },
  {
    "text": "instance so such a supported provided by",
    "start": "590000",
    "end": "592640"
  },
  {
    "text": "knx micro functions platform",
    "start": "592640",
    "end": "595360"
  },
  {
    "text": "now what this gives you is a low latency",
    "start": "595360",
    "end": "598560"
  },
  {
    "text": "way of",
    "start": "598560",
    "end": "599200"
  },
  {
    "text": "accessing strongly consistent data from",
    "start": "599200",
    "end": "602399"
  },
  {
    "text": "the function instance",
    "start": "602399",
    "end": "604160"
  },
  {
    "text": "but this may also create a scalability",
    "start": "604160",
    "end": "606399"
  },
  {
    "text": "bottleneck because now there is a single",
    "start": "606399",
    "end": "608320"
  },
  {
    "text": "instance which is serially processing",
    "start": "608320",
    "end": "610240"
  },
  {
    "text": "all the incoming events and furthermore",
    "start": "610240",
    "end": "614240"
  },
  {
    "text": "this approach may not be resource",
    "start": "614240",
    "end": "616000"
  },
  {
    "text": "efficient depending on how big a state",
    "start": "616000",
    "end": "618640"
  },
  {
    "text": "that you're trying to store because",
    "start": "618640",
    "end": "620640"
  },
  {
    "text": "there is a function instance that is",
    "start": "620640",
    "end": "622560"
  },
  {
    "text": "always running",
    "start": "622560",
    "end": "625360"
  },
  {
    "start": "625000",
    "end": "710000"
  },
  {
    "text": "now another framework that provides",
    "start": "625440",
    "end": "627040"
  },
  {
    "text": "support for stateful serverless",
    "start": "627040",
    "end": "628720"
  },
  {
    "text": "functions",
    "start": "628720",
    "end": "629279"
  },
  {
    "text": "is the azure entity functions framework",
    "start": "629279",
    "end": "632079"
  },
  {
    "text": "so here the user can specify stateful",
    "start": "632079",
    "end": "634399"
  },
  {
    "text": "entities by specifying which data",
    "start": "634399",
    "end": "636880"
  },
  {
    "text": "it is encapsulating and it also",
    "start": "636880",
    "end": "638640"
  },
  {
    "text": "specifies what",
    "start": "638640",
    "end": "640160"
  },
  {
    "text": "actions can modify or read this data",
    "start": "640160",
    "end": "643200"
  },
  {
    "text": "and furthermore this data is maintained",
    "start": "643200",
    "end": "645200"
  },
  {
    "text": "both in memory",
    "start": "645200",
    "end": "646560"
  },
  {
    "text": "and also made durable on a persistent",
    "start": "646560",
    "end": "648959"
  },
  {
    "text": "store",
    "start": "648959",
    "end": "650000"
  },
  {
    "text": "and to avoid conflicts while updating",
    "start": "650000",
    "end": "652000"
  },
  {
    "text": "this data",
    "start": "652000",
    "end": "653440"
  },
  {
    "text": "all the external events are handled in a",
    "start": "653440",
    "end": "655760"
  },
  {
    "text": "serialized manner by the stateful entity",
    "start": "655760",
    "end": "659200"
  },
  {
    "text": "so what that gives the developer is a",
    "start": "659200",
    "end": "661760"
  },
  {
    "text": "low latency way",
    "start": "661760",
    "end": "662959"
  },
  {
    "text": "of accessing strongly consistent data",
    "start": "662959",
    "end": "665920"
  },
  {
    "text": "repeatedly over time",
    "start": "665920",
    "end": "667440"
  },
  {
    "text": "without having to go to a durable store",
    "start": "667440",
    "end": "670320"
  },
  {
    "text": "and",
    "start": "670320",
    "end": "670640"
  },
  {
    "text": "also these entities could be completely",
    "start": "670640",
    "end": "673600"
  },
  {
    "text": "swapped out of memory",
    "start": "673600",
    "end": "674959"
  },
  {
    "text": "if they are idle to make this approach",
    "start": "674959",
    "end": "677519"
  },
  {
    "text": "resource efficient",
    "start": "677519",
    "end": "679600"
  },
  {
    "text": "but what you have lost out is that now",
    "start": "679600",
    "end": "682079"
  },
  {
    "text": "that all the events are being processed",
    "start": "682079",
    "end": "683920"
  },
  {
    "text": "in a serialized manner by a single",
    "start": "683920",
    "end": "685600"
  },
  {
    "text": "entity",
    "start": "685600",
    "end": "686399"
  },
  {
    "text": "a scalability of this approach might be",
    "start": "686399",
    "end": "688480"
  },
  {
    "text": "a concern",
    "start": "688480",
    "end": "689600"
  },
  {
    "text": "and furthermore azure entity functions",
    "start": "689600",
    "end": "691839"
  },
  {
    "text": "themselves claim",
    "start": "691839",
    "end": "693200"
  },
  {
    "text": "that they favor the durability of this",
    "start": "693200",
    "end": "695680"
  },
  {
    "text": "data encapsulated by the entity",
    "start": "695680",
    "end": "698320"
  },
  {
    "text": "over the latency of access of this data",
    "start": "698320",
    "end": "701120"
  },
  {
    "text": "so",
    "start": "701120",
    "end": "701760"
  },
  {
    "text": "it is possible that it narrows down the",
    "start": "701760",
    "end": "703760"
  },
  {
    "text": "scope of applications",
    "start": "703760",
    "end": "705200"
  },
  {
    "text": "that can be modeled by azure entity",
    "start": "705200",
    "end": "707680"
  },
  {
    "text": "functions",
    "start": "707680",
    "end": "709920"
  },
  {
    "text": "another platform for stateful serverless",
    "start": "709920",
    "end": "711920"
  },
  {
    "start": "710000",
    "end": "870000"
  },
  {
    "text": "computing is the cloud state platform",
    "start": "711920",
    "end": "714079"
  },
  {
    "text": "from lightweight",
    "start": "714079",
    "end": "715360"
  },
  {
    "text": "and they push the idea of modeling",
    "start": "715360",
    "end": "717120"
  },
  {
    "text": "stateful entities a step further",
    "start": "717120",
    "end": "719600"
  },
  {
    "text": "here again the user specifies a stateful",
    "start": "719600",
    "end": "721760"
  },
  {
    "text": "entity by specifying what is the",
    "start": "721760",
    "end": "723440"
  },
  {
    "text": "encapsulated state",
    "start": "723440",
    "end": "724720"
  },
  {
    "text": "which actions can modify that state but",
    "start": "724720",
    "end": "727279"
  },
  {
    "text": "the cloud state platform can now create",
    "start": "727279",
    "end": "729600"
  },
  {
    "text": "replicas of that",
    "start": "729600",
    "end": "730800"
  },
  {
    "text": "entity in different pods and can",
    "start": "730800",
    "end": "733200"
  },
  {
    "text": "potentially load balance external events",
    "start": "733200",
    "end": "736079"
  },
  {
    "text": "on top of these replicas so what you",
    "start": "736079",
    "end": "738560"
  },
  {
    "text": "have here",
    "start": "738560",
    "end": "739519"
  },
  {
    "text": "is that the user function that is",
    "start": "739519",
    "end": "741519"
  },
  {
    "text": "modeling the entity",
    "start": "741519",
    "end": "742959"
  },
  {
    "text": "can independently modify or the read the",
    "start": "742959",
    "end": "746079"
  },
  {
    "text": "state of that entity",
    "start": "746079",
    "end": "747680"
  },
  {
    "text": "independent of other replicas and to",
    "start": "747680",
    "end": "750560"
  },
  {
    "text": "avoid",
    "start": "750560",
    "end": "751360"
  },
  {
    "text": "a conflicts created due to concurrent",
    "start": "751360",
    "end": "754160"
  },
  {
    "text": "updates to that entity",
    "start": "754160",
    "end": "755920"
  },
  {
    "text": "cloud state platform provides built-in",
    "start": "755920",
    "end": "758000"
  },
  {
    "text": "support for crdts which are conflictly",
    "start": "758000",
    "end": "760959"
  },
  {
    "text": "replicated data types and they encourage",
    "start": "760959",
    "end": "763440"
  },
  {
    "text": "users to use crdts to model the internal",
    "start": "763440",
    "end": "766079"
  },
  {
    "text": "state",
    "start": "766079",
    "end": "766560"
  },
  {
    "text": "of the entity under the hood",
    "start": "766560",
    "end": "769600"
  },
  {
    "text": "inside each pod which is hosting this",
    "start": "769600",
    "end": "772240"
  },
  {
    "text": "user function modeling the entity",
    "start": "772240",
    "end": "774399"
  },
  {
    "text": "there is an akka proxy running as a",
    "start": "774399",
    "end": "776639"
  },
  {
    "text": "sidecar",
    "start": "776639",
    "end": "777760"
  },
  {
    "text": "and these sidecars form a cluster within",
    "start": "777760",
    "end": "780399"
  },
  {
    "text": "themselves",
    "start": "780399",
    "end": "781279"
  },
  {
    "text": "with all the replica pods of that entity",
    "start": "781279",
    "end": "784639"
  },
  {
    "text": "and these side cars in their memory",
    "start": "784639",
    "end": "786399"
  },
  {
    "text": "maintain the internal state of that",
    "start": "786399",
    "end": "788240"
  },
  {
    "text": "entity",
    "start": "788240",
    "end": "789120"
  },
  {
    "text": "they synchronize themselves with each",
    "start": "789120",
    "end": "791040"
  },
  {
    "text": "other propagate state updates and",
    "start": "791040",
    "end": "793040"
  },
  {
    "text": "provide support for crdts",
    "start": "793040",
    "end": "796079"
  },
  {
    "text": "so what you get in this approach is that",
    "start": "796079",
    "end": "798320"
  },
  {
    "text": "each entity instance has",
    "start": "798320",
    "end": "800320"
  },
  {
    "text": "low latency access to read or update the",
    "start": "800320",
    "end": "803040"
  },
  {
    "text": "locally available data",
    "start": "803040",
    "end": "805200"
  },
  {
    "text": "replicas of these entities can be",
    "start": "805200",
    "end": "807040"
  },
  {
    "text": "created so this approach",
    "start": "807040",
    "end": "808720"
  },
  {
    "text": "is scalable and also idle entities may",
    "start": "808720",
    "end": "811920"
  },
  {
    "text": "be swapped out",
    "start": "811920",
    "end": "813040"
  },
  {
    "text": "to durable store to make it resource",
    "start": "813040",
    "end": "815120"
  },
  {
    "text": "efficient as well",
    "start": "815120",
    "end": "816880"
  },
  {
    "text": "but you what you lose out on this",
    "start": "816880",
    "end": "818639"
  },
  {
    "text": "approach is that now",
    "start": "818639",
    "end": "820399"
  },
  {
    "text": "updates can happen on concurrent sites",
    "start": "820399",
    "end": "822800"
  },
  {
    "text": "at multiple sites",
    "start": "822800",
    "end": "824399"
  },
  {
    "text": "so the system has to settle down for",
    "start": "824399",
    "end": "826639"
  },
  {
    "text": "eventually consistent state",
    "start": "826639",
    "end": "828399"
  },
  {
    "text": "because it is possible that these side",
    "start": "828399",
    "end": "830399"
  },
  {
    "text": "cars may take some time in propagating",
    "start": "830399",
    "end": "832240"
  },
  {
    "text": "states to each other",
    "start": "832240",
    "end": "833760"
  },
  {
    "text": "so the entity instance may sometimes see",
    "start": "833760",
    "end": "836320"
  },
  {
    "text": "stale data",
    "start": "836320",
    "end": "838000"
  },
  {
    "text": "and furthermore this particular",
    "start": "838000",
    "end": "839519"
  },
  {
    "text": "implementation based on aka side cars",
    "start": "839519",
    "end": "842399"
  },
  {
    "text": "cloud state says that if you quickly",
    "start": "842399",
    "end": "844880"
  },
  {
    "text": "scale in or scale out a pod",
    "start": "844880",
    "end": "846959"
  },
  {
    "text": "then every time you do that it leads to",
    "start": "846959",
    "end": "848800"
  },
  {
    "text": "a expensive cluster rebalancing",
    "start": "848800",
    "end": "850880"
  },
  {
    "text": "operation",
    "start": "850880",
    "end": "851839"
  },
  {
    "text": "that may lead to significant latency",
    "start": "851839",
    "end": "854079"
  },
  {
    "text": "overhead in this approach",
    "start": "854079",
    "end": "857680"
  },
  {
    "text": "so overall i have described three",
    "start": "857680",
    "end": "859519"
  },
  {
    "text": "serverless platforms that provide",
    "start": "859519",
    "end": "861199"
  },
  {
    "text": "built-in support for stateful functions",
    "start": "861199",
    "end": "864000"
  },
  {
    "text": "this list is by no means exhaustive and",
    "start": "864000",
    "end": "866480"
  },
  {
    "text": "i believe that stateful serverless is",
    "start": "866480",
    "end": "868560"
  },
  {
    "text": "not a solved problem yet",
    "start": "868560",
    "end": "870560"
  },
  {
    "start": "870000",
    "end": "1198000"
  },
  {
    "text": "and there are numerous research projects",
    "start": "870560",
    "end": "872320"
  },
  {
    "text": "that are also investigating stateful",
    "start": "872320",
    "end": "874480"
  },
  {
    "text": "serverless",
    "start": "874480",
    "end": "875440"
  },
  {
    "text": "essentially trying to bring the function",
    "start": "875440",
    "end": "877760"
  },
  {
    "text": "execution and the data it operates on",
    "start": "877760",
    "end": "880079"
  },
  {
    "text": "as close as possible to each other and",
    "start": "880079",
    "end": "882639"
  },
  {
    "text": "one such project is called the cloud",
    "start": "882639",
    "end": "884560"
  },
  {
    "text": "burst project",
    "start": "884560",
    "end": "885600"
  },
  {
    "text": "and it essentially provides a data cache",
    "start": "885600",
    "end": "888160"
  },
  {
    "text": "on every node where a function can",
    "start": "888160",
    "end": "890160"
  },
  {
    "text": "execute",
    "start": "890160",
    "end": "891199"
  },
  {
    "text": "and it ensures that this function",
    "start": "891199",
    "end": "893040"
  },
  {
    "text": "instance only interacts with this data",
    "start": "893040",
    "end": "895120"
  },
  {
    "text": "cache for reads and writes",
    "start": "895120",
    "end": "896800"
  },
  {
    "text": "and if there is a data item not in the",
    "start": "896800",
    "end": "898720"
  },
  {
    "text": "cache then it's pulled from the data",
    "start": "898720",
    "end": "900320"
  },
  {
    "text": "global data store",
    "start": "900320",
    "end": "902800"
  },
  {
    "text": "the cloud pers platform can also create",
    "start": "902800",
    "end": "905040"
  },
  {
    "text": "replicas of these function instances and",
    "start": "905040",
    "end": "907360"
  },
  {
    "text": "allow these replicas to independently",
    "start": "907360",
    "end": "909760"
  },
  {
    "text": "modify",
    "start": "909760",
    "end": "910399"
  },
  {
    "text": "the shared common state and to avoid",
    "start": "910399",
    "end": "913279"
  },
  {
    "text": "conflicts arising from these concrete",
    "start": "913279",
    "end": "915279"
  },
  {
    "text": "updates",
    "start": "915279",
    "end": "916000"
  },
  {
    "text": "it provides supports for lattice data",
    "start": "916000",
    "end": "918240"
  },
  {
    "text": "lattice data types which are very",
    "start": "918240",
    "end": "919760"
  },
  {
    "text": "similar to conflict-free replicated data",
    "start": "919760",
    "end": "922160"
  },
  {
    "text": "types",
    "start": "922160",
    "end": "923680"
  },
  {
    "text": "so these caches essentially synchronize",
    "start": "923680",
    "end": "926160"
  },
  {
    "text": "themselves with each other periodically",
    "start": "926160",
    "end": "929680"
  },
  {
    "text": "so what you have here in the cloud bus",
    "start": "929680",
    "end": "931519"
  },
  {
    "text": "platform is that",
    "start": "931519",
    "end": "933040"
  },
  {
    "text": "you can create replicas of these",
    "start": "933040",
    "end": "934560"
  },
  {
    "text": "function instances so they provide some",
    "start": "934560",
    "end": "936320"
  },
  {
    "text": "scalability for stateful serverless",
    "start": "936320",
    "end": "938800"
  },
  {
    "text": "and these function instances can access",
    "start": "938800",
    "end": "941040"
  },
  {
    "text": "data in a low latency manner from a",
    "start": "941040",
    "end": "943199"
  },
  {
    "text": "local cache",
    "start": "943199",
    "end": "944399"
  },
  {
    "text": "and this cache can also be used for",
    "start": "944399",
    "end": "947120"
  },
  {
    "text": "efficiently sharing data",
    "start": "947120",
    "end": "949040"
  },
  {
    "text": "between co-located function instances",
    "start": "949040",
    "end": "952560"
  },
  {
    "text": "and cloud cloudburst additionally",
    "start": "952560",
    "end": "954079"
  },
  {
    "text": "provides consistency guarantees",
    "start": "954079",
    "end": "957360"
  },
  {
    "text": "for functions that are part of a",
    "start": "957360",
    "end": "958959"
  },
  {
    "text": "workflow and they provide repeatable",
    "start": "958959",
    "end": "961360"
  },
  {
    "text": "reads and causal consistency guarantees",
    "start": "961360",
    "end": "963440"
  },
  {
    "text": "for those functions",
    "start": "963440",
    "end": "964720"
  },
  {
    "text": "and i encourage you to read their paper",
    "start": "964720",
    "end": "966480"
  },
  {
    "text": "about this",
    "start": "966480",
    "end": "968480"
  },
  {
    "text": "but what they have to trade off here is",
    "start": "968480",
    "end": "971279"
  },
  {
    "text": "that since the rights",
    "start": "971279",
    "end": "972560"
  },
  {
    "text": "have can occur concurrently on multiple",
    "start": "972560",
    "end": "974880"
  },
  {
    "text": "sites",
    "start": "974880",
    "end": "975680"
  },
  {
    "text": "they too have to settle down for",
    "start": "975680",
    "end": "977360"
  },
  {
    "text": "providing eventually consistent state",
    "start": "977360",
    "end": "979920"
  },
  {
    "text": "because it can take some time for these",
    "start": "979920",
    "end": "981759"
  },
  {
    "text": "caches to synchronize themselves",
    "start": "981759",
    "end": "983839"
  },
  {
    "text": "so function instances may sometimes",
    "start": "983839",
    "end": "986399"
  },
  {
    "text": "access tail data",
    "start": "986399",
    "end": "989440"
  },
  {
    "text": "another project called faasm also offers",
    "start": "989920",
    "end": "993680"
  },
  {
    "text": "a two-tiered state management system but",
    "start": "993680",
    "end": "996320"
  },
  {
    "text": "what they do differently is that they",
    "start": "996320",
    "end": "997759"
  },
  {
    "text": "have a local data cache",
    "start": "997759",
    "end": "999440"
  },
  {
    "text": "but this cache uses shared memory",
    "start": "999440",
    "end": "1001680"
  },
  {
    "text": "mechanisms",
    "start": "1001680",
    "end": "1002639"
  },
  {
    "text": "for exchanging data between co-locating",
    "start": "1002639",
    "end": "1005199"
  },
  {
    "text": "collocated function instances",
    "start": "1005199",
    "end": "1007199"
  },
  {
    "text": "so essentially it is really fast and",
    "start": "1007199",
    "end": "1009040"
  },
  {
    "text": "there is no memory copying that is",
    "start": "1009040",
    "end": "1010959"
  },
  {
    "text": "happening",
    "start": "1010959",
    "end": "1011839"
  },
  {
    "text": "when this exchange takes place",
    "start": "1011839",
    "end": "1014880"
  },
  {
    "text": "they do not offer they do not offer",
    "start": "1014880",
    "end": "1016800"
  },
  {
    "text": "support for crdts",
    "start": "1016800",
    "end": "1018959"
  },
  {
    "text": "and they let the function access a",
    "start": "1018959",
    "end": "1021120"
  },
  {
    "text": "strongly consistent snapshot of the data",
    "start": "1021120",
    "end": "1023680"
  },
  {
    "text": "because they use global read write logs",
    "start": "1023680",
    "end": "1027280"
  },
  {
    "text": "the platform also offers a lightweight",
    "start": "1027280",
    "end": "1029678"
  },
  {
    "text": "function isolation mechanisms based on",
    "start": "1029679",
    "end": "1031760"
  },
  {
    "text": "webassembly",
    "start": "1031760",
    "end": "1033038"
  },
  {
    "text": "which also helps them with this shared",
    "start": "1033039",
    "end": "1035678"
  },
  {
    "text": "memory based exchange of data",
    "start": "1035679",
    "end": "1038558"
  },
  {
    "text": "so both these projects cloud burst and",
    "start": "1038559",
    "end": "1040880"
  },
  {
    "text": "faasm",
    "start": "1040880",
    "end": "1042558"
  },
  {
    "text": "essentially try to ship data close to",
    "start": "1042559",
    "end": "1045280"
  },
  {
    "text": "where the function is executing",
    "start": "1045280",
    "end": "1047360"
  },
  {
    "text": "and it also provides an efficient way of",
    "start": "1047360",
    "end": "1050400"
  },
  {
    "text": "sharing data between co-located function",
    "start": "1050400",
    "end": "1052640"
  },
  {
    "text": "instances",
    "start": "1052640",
    "end": "1054559"
  },
  {
    "text": "and finally the third project which is",
    "start": "1054559",
    "end": "1056320"
  },
  {
    "text": "called shredder actually reverses this",
    "start": "1056320",
    "end": "1058480"
  },
  {
    "text": "paradigm",
    "start": "1058480",
    "end": "1059360"
  },
  {
    "text": "and says that instead of shipping data",
    "start": "1059360",
    "end": "1061760"
  },
  {
    "text": "let us ship the function code",
    "start": "1061760",
    "end": "1063679"
  },
  {
    "text": "to the node where the data resides and",
    "start": "1063679",
    "end": "1065919"
  },
  {
    "text": "then instantiate the function there",
    "start": "1065919",
    "end": "1068000"
  },
  {
    "text": "so essentially in order to avoid",
    "start": "1068000",
    "end": "1069919"
  },
  {
    "text": "shipping large amounts of data",
    "start": "1069919",
    "end": "1072480"
  },
  {
    "text": "and since the function code is executing",
    "start": "1072480",
    "end": "1074559"
  },
  {
    "text": "on the data node",
    "start": "1074559",
    "end": "1076000"
  },
  {
    "text": "to keep the function instance isolation",
    "start": "1076000",
    "end": "1078480"
  },
  {
    "text": "overhead low",
    "start": "1078480",
    "end": "1079679"
  },
  {
    "text": "they use the concept of isolates that is",
    "start": "1079679",
    "end": "1082480"
  },
  {
    "text": "provided by the v8 javascript engine and",
    "start": "1082480",
    "end": "1084720"
  },
  {
    "text": "then instantiate functions using that",
    "start": "1084720",
    "end": "1088000"
  },
  {
    "text": "so overall with all of this i'd like to",
    "start": "1088000",
    "end": "1090080"
  },
  {
    "text": "reiterate the point",
    "start": "1090080",
    "end": "1091760"
  },
  {
    "text": "that serverless platform providers",
    "start": "1091760",
    "end": "1094160"
  },
  {
    "text": "should seriously consider",
    "start": "1094160",
    "end": "1095600"
  },
  {
    "text": "providing built-in support for state",
    "start": "1095600",
    "end": "1097919"
  },
  {
    "text": "management",
    "start": "1097919",
    "end": "1098720"
  },
  {
    "text": "and stateful functions because numerous",
    "start": "1098720",
    "end": "1101360"
  },
  {
    "text": "applications require that",
    "start": "1101360",
    "end": "1103679"
  },
  {
    "text": "and there are various approaches that",
    "start": "1103679",
    "end": "1105280"
  },
  {
    "text": "are being experimented",
    "start": "1105280",
    "end": "1106960"
  },
  {
    "text": "with in both in industry and academia",
    "start": "1106960",
    "end": "1110160"
  },
  {
    "text": "and i believe that this topic of",
    "start": "1110160",
    "end": "1112400"
  },
  {
    "text": "stateful serverless will remain hot in",
    "start": "1112400",
    "end": "1114400"
  },
  {
    "text": "the serverless domain",
    "start": "1114400",
    "end": "1116160"
  },
  {
    "text": "in the near future so before i conclude",
    "start": "1116160",
    "end": "1120000"
  },
  {
    "text": "i'd like to introduce knx micro",
    "start": "1120000",
    "end": "1121919"
  },
  {
    "text": "functions",
    "start": "1121919",
    "end": "1122640"
  },
  {
    "text": "which is a serverless platform that we",
    "start": "1122640",
    "end": "1124480"
  },
  {
    "text": "have been developing for some time",
    "start": "1124480",
    "end": "1126960"
  },
  {
    "text": "knx actually instantiates some of the",
    "start": "1126960",
    "end": "1128960"
  },
  {
    "text": "optimizations we have discussed in this",
    "start": "1128960",
    "end": "1130720"
  },
  {
    "text": "presentation",
    "start": "1130720",
    "end": "1131840"
  },
  {
    "text": "and we are broadly targeting very low",
    "start": "1131840",
    "end": "1133840"
  },
  {
    "text": "latency execution of serverless",
    "start": "1133840",
    "end": "1135840"
  },
  {
    "text": "workflows",
    "start": "1135840",
    "end": "1137200"
  },
  {
    "text": "so very briefly we allow concurrent",
    "start": "1137200",
    "end": "1139600"
  },
  {
    "text": "executions of the same functions",
    "start": "1139600",
    "end": "1141520"
  },
  {
    "text": "to hit the same container and within the",
    "start": "1141520",
    "end": "1143919"
  },
  {
    "text": "container we isolate function",
    "start": "1143919",
    "end": "1145679"
  },
  {
    "text": "invocations",
    "start": "1145679",
    "end": "1146720"
  },
  {
    "text": "uses using process forking we",
    "start": "1146720",
    "end": "1150080"
  },
  {
    "text": "additionally provide explicit support",
    "start": "1150080",
    "end": "1152400"
  },
  {
    "text": "for function compositions or workflows",
    "start": "1152400",
    "end": "1155120"
  },
  {
    "text": "and we actually co-locate functions of a",
    "start": "1155120",
    "end": "1157280"
  },
  {
    "text": "workflow inside a single container",
    "start": "1157280",
    "end": "1159600"
  },
  {
    "text": "and we then provide a low latency",
    "start": "1159600",
    "end": "1161840"
  },
  {
    "text": "communication mechanisms for these",
    "start": "1161840",
    "end": "1163760"
  },
  {
    "text": "co-located functions",
    "start": "1163760",
    "end": "1166160"
  },
  {
    "text": "we use a distributed workflow logic",
    "start": "1166160",
    "end": "1168240"
  },
  {
    "text": "instead of a centralized controller",
    "start": "1168240",
    "end": "1170160"
  },
  {
    "text": "and we also provide support for state",
    "start": "1170160",
    "end": "1172640"
  },
  {
    "text": "management",
    "start": "1172640",
    "end": "1173679"
  },
  {
    "text": "we have support for session functions",
    "start": "1173679",
    "end": "1175440"
  },
  {
    "text": "which are essentially long-running",
    "start": "1175440",
    "end": "1177120"
  },
  {
    "text": "addressable function instances and we",
    "start": "1177120",
    "end": "1179600"
  },
  {
    "text": "also provide a data store that supports",
    "start": "1179600",
    "end": "1181760"
  },
  {
    "text": "crdts for the developers to use",
    "start": "1181760",
    "end": "1185200"
  },
  {
    "text": "please go to knx.io for more information",
    "start": "1185200",
    "end": "1188240"
  },
  {
    "text": "and we are also open source on github",
    "start": "1188240",
    "end": "1191679"
  },
  {
    "text": "so with that we conclude this",
    "start": "1191679",
    "end": "1193360"
  },
  {
    "text": "presentations we thank you for your",
    "start": "1193360",
    "end": "1195200"
  },
  {
    "text": "attention",
    "start": "1195200",
    "end": "1196000"
  },
  {
    "text": "and we are happy to take more questions",
    "start": "1196000",
    "end": "1200640"
  }
]