[
  {
    "text": "hey welcome guess the evening crowd",
    "start": "0",
    "end": "5659"
  },
  {
    "text": "tonight I'm going to be talking a bit about composability for cloud native applications and theme of the talk plays",
    "start": "5720",
    "end": "14730"
  },
  {
    "text": "well with others when I was growing up in school children were graded young",
    "start": "14730",
    "end": "20820"
  },
  {
    "text": "children were graded on how well they played with other kids in the school yard and we want to make sure that when",
    "start": "20820",
    "end": "29250"
  },
  {
    "text": "they grow up they're capable of working well with others and in different environments so we think we've seen a",
    "start": "29250",
    "end": "36719"
  },
  {
    "text": "lot of learn lessons learned from the open source kubernetes project on how to",
    "start": "36719",
    "end": "42180"
  },
  {
    "text": "build cloud native applications that work well with others and have greater",
    "start": "42180",
    "end": "47820"
  },
  {
    "text": "composability and reuse so as it matures we hope to see more of that and that's",
    "start": "47820",
    "end": "54690"
  },
  {
    "text": "what I'm going to be talking about I'm Steve Jenkins and I'm a program manager at upbound in Seattle and we love",
    "start": "54690",
    "end": "63750"
  },
  {
    "text": "kubernetes you all probably are aware of and love kubernetes as well or you",
    "start": "63750",
    "end": "69689"
  },
  {
    "text": "wouldn't be here so I'll be talking a bit about the benefits of container",
    "start": "69689",
    "end": "75810"
  },
  {
    "text": "orchestration for scaling your own software deployments but that's not all",
    "start": "75810",
    "end": "81450"
  },
  {
    "text": "that kubernetes brings to the table it also makes it easy to use",
    "start": "81450",
    "end": "86640"
  },
  {
    "text": "declarative management API and these active state controllers can reconcile",
    "start": "86640",
    "end": "93960"
  },
  {
    "text": "the actual state of your application with the desired state so this has shown",
    "start": "93960",
    "end": "99119"
  },
  {
    "text": "how great it can be for complex apps and but there's even more there's it's",
    "start": "99119",
    "end": "106680"
  },
  {
    "text": "extensible kubernetes lets us define custom resource definitions and",
    "start": "106680",
    "end": "113180"
  },
  {
    "text": "implementing controllers is for the right way to extend kubernetes so we can",
    "start": "113180",
    "end": "118409"
  },
  {
    "text": "manage more things within our infrastructure than we have been",
    "start": "118409",
    "end": "123950"
  },
  {
    "text": "so if we took a look at like the modern cloud application you're probably",
    "start": "123950",
    "end": "129050"
  },
  {
    "text": "leveraging kubernetes in your apps it just makes sense to deploy our apps to",
    "start": "129050",
    "end": "134420"
  },
  {
    "text": "containers like many companies you've probably built these apps you've",
    "start": "134420",
    "end": "139670"
  },
  {
    "text": "deployed them to a cluster it's just like the big container ship here when we",
    "start": "139670",
    "end": "145220"
  },
  {
    "text": "talk about deploying with kubernetes those are running in your own cluster and you have responsibility for managing",
    "start": "145220",
    "end": "152150"
  },
  {
    "text": "that cluster so most of us want to take advantage of cloud platforms and the",
    "start": "152150",
    "end": "157640"
  },
  {
    "text": "cloud providers have built these big beautiful cities with lots of infrastructure they have an SLA they can",
    "start": "157640",
    "end": "164030"
  },
  {
    "text": "give you and so in order to take advantage of that you know to manage",
    "start": "164030",
    "end": "172040"
  },
  {
    "text": "databases we can then have scaleable databases that manage backups",
    "start": "172040",
    "end": "178900"
  },
  {
    "text": "replication disaster recovery there's just a lot of features there that we",
    "start": "178900",
    "end": "185120"
  },
  {
    "text": "don't have to manage when we're deploying to our own cluster so you know",
    "start": "185120",
    "end": "191600"
  },
  {
    "text": "and of course public cloud providers have been rolling out new features advanced features at an amazing rate so",
    "start": "191600",
    "end": "198590"
  },
  {
    "text": "if you want to take advantage of those differentiated services like search AI",
    "start": "198590",
    "end": "204620"
  },
  {
    "text": "and it's kind of a pain to manage those in your own cluster so kind of what's",
    "start": "204620",
    "end": "212570"
  },
  {
    "text": "wrong with the picture modern applications are basically composed more than just the services that we're",
    "start": "212570",
    "end": "218269"
  },
  {
    "text": "writing and maintaining you're gonna have dependencies on databases object",
    "start": "218269",
    "end": "224959"
  },
  {
    "text": "storage buckets pub/sub search monitoring sort of the typical application components but do you really",
    "start": "224959",
    "end": "232220"
  },
  {
    "text": "want these all running in your cluster do you want to be paged at midnight I don't so the other aspect of this is",
    "start": "232220",
    "end": "241940"
  },
  {
    "text": "that your IT and DevOps groups are typically running a completely different set of tools for orchestrating or",
    "start": "241940",
    "end": "249190"
  },
  {
    "text": "provisioning infrastructure so that has kind of become this dumpster fire of",
    "start": "249190",
    "end": "254480"
  },
  {
    "text": "tools that don't align with all the great kubernetes work that's been going on so",
    "start": "254480",
    "end": "265460"
  },
  {
    "text": "can we solve this in an elegant way if we take a moment to look at the",
    "start": "265460",
    "end": "271070"
  },
  {
    "text": "different approaches to infrastructure orchestration that are out in the wild we'll see some patterns so I kind of",
    "start": "271070",
    "end": "278389"
  },
  {
    "text": "find it useful to categorize these components in in this way so along the",
    "start": "278389",
    "end": "284960"
  },
  {
    "text": "vertical axis you have your services and those running in your kubernetes cluster",
    "start": "284960",
    "end": "290560"
  },
  {
    "text": "which you might have deployed with helm you might have basic cloud provider",
    "start": "290560",
    "end": "296479"
  },
  {
    "text": "services that you're taking advantage of and if you need something like cloud",
    "start": "296479",
    "end": "303380"
  },
  {
    "text": "formation that can cover the gamut of AWS but doesn't extend to other cloud providers at the top of that axis is",
    "start": "303380",
    "end": "312820"
  },
  {
    "text": "utilizing different differentiated clouds provider services across multiple",
    "start": "312820",
    "end": "318520"
  },
  {
    "text": "cloud providers and something like terraform you know HCl allows you to",
    "start": "318520",
    "end": "324560"
  },
  {
    "text": "basically do that kind of thing for installation and some upgrade cycles on",
    "start": "324560",
    "end": "331190"
  },
  {
    "text": "this axis you have write the whole resource lifecycle management and many",
    "start": "331190",
    "end": "337160"
  },
  {
    "text": "of these tools like ansible and chef and puppet have gotten you closer to the install and upgrade path but when we",
    "start": "337160",
    "end": "344180"
  },
  {
    "text": "look at core LS you know who introduced the operator framework we see what it means to have the entire lifecycle",
    "start": "344180",
    "end": "351740"
  },
  {
    "text": "manage within an active state controller and there been some you know projects like AWS service operators that have",
    "start": "351740",
    "end": "358430"
  },
  {
    "text": "taken that into different cloud providers but nothing has really reached",
    "start": "358430",
    "end": "364160"
  },
  {
    "text": "that target of having all of the complex managed services available in cloud",
    "start": "364160",
    "end": "370849"
  },
  {
    "text": "providers across all the cloud providers or managed services and for the entire lifecycle",
    "start": "370849",
    "end": "377979"
  },
  {
    "text": "so how could we solve this in an elegant way if it were based on the communities engine and it brings those cloud",
    "start": "378759",
    "end": "387279"
  },
  {
    "text": "provider services and infrastructure into kubernetes gives you one API to",
    "start": "387279",
    "end": "394150"
  },
  {
    "text": "manage everything and provides portability for those workloads that you",
    "start": "394150",
    "end": "399789"
  },
  {
    "text": "have beyond containers it'd be nice wouldn't it so if we look back from a",
    "start": "399789",
    "end": "407860"
  },
  {
    "text": "moment the time feels right for this we're kind of an interesting moment in",
    "start": "407860",
    "end": "413259"
  },
  {
    "text": "the evolution of cloud native the level of abstraction is increased over time if",
    "start": "413259",
    "end": "420789"
  },
  {
    "text": "we go back to virtual machines you know OpenStack and AWS ec2 got us into infra",
    "start": "420789",
    "end": "427930"
  },
  {
    "text": "as a service and gave us operability and resiliency and elasticity and when",
    "start": "427930",
    "end": "435580"
  },
  {
    "text": "kubernetes came along with managed kubernetes and GE and es you know we",
    "start": "435580",
    "end": "442059"
  },
  {
    "text": "have containers as a service so we're now getting into more modularity and you",
    "start": "442059",
    "end": "450310"
  },
  {
    "text": "know with with modularity and we saw the evolution of lambdas and functions as a",
    "start": "450310",
    "end": "456370"
  },
  {
    "text": "service but I think now we're at a state where we can start to get some of the",
    "start": "456370",
    "end": "461949"
  },
  {
    "text": "benefits of Portability and modularity out of this we have all the pieces in",
    "start": "461949",
    "end": "467259"
  },
  {
    "text": "place within kubernetes to start billing what what I think of as portable resources and in a workload central",
    "start": "467259",
    "end": "475419"
  },
  {
    "text": "centric model those portable resources can be span things that we're writing",
    "start": "475419",
    "end": "482229"
  },
  {
    "text": "and in applications that we have dependencies on so",
    "start": "482229",
    "end": "489820"
  },
  {
    "text": "when we look at building this on the kubernetes engine you know there's lots",
    "start": "489820",
    "end": "495040"
  },
  {
    "text": "of advantages and lessons learned in kubernetes including a declarative API which is great",
    "start": "495040",
    "end": "502000"
  },
  {
    "text": "cube CTL for native integration with other tools libraries in UI rich",
    "start": "502000",
    "end": "509290"
  },
  {
    "text": "ecosystem and community around this obviously and letting us apply some of",
    "start": "509290",
    "end": "515409"
  },
  {
    "text": "the lessons learned from container orchestration to multi-cloud workloads and resources so when we look at the",
    "start": "515410",
    "end": "525070"
  },
  {
    "text": "resource lifecycle management piece of this kubernetes has custom resources and",
    "start": "525070",
    "end": "530830"
  },
  {
    "text": "that we can use to model cloud provider services as well and we can use custom",
    "start": "530830",
    "end": "540060"
  },
  {
    "text": "controllers to provision configure scale monitor upgrade provide failover and",
    "start": "540060",
    "end": "547060"
  },
  {
    "text": "back up all of those lifecycle management things can be that logic can be put into a controller and that",
    "start": "547060",
    "end": "552840"
  },
  {
    "text": "control can handle active reconciliation so that we essentially hands-up have",
    "start": "552840",
    "end": "558340"
  },
  {
    "text": "hands-off management of those cloud provider services",
    "start": "558340",
    "end": "565230"
  },
  {
    "text": "we also have this portable resource abstraction notion so you know",
    "start": "568050",
    "end": "573530"
  },
  {
    "text": "kubernetes has a powerful volume abstraction it's a give its portability",
    "start": "573530",
    "end": "579570"
  },
  {
    "text": "for stateful applications but what about other resources cloud provider resources",
    "start": "579570",
    "end": "585510"
  },
  {
    "text": "might include databases buckets clusters caches message queues data pipelines",
    "start": "585510",
    "end": "591350"
  },
  {
    "text": "everything there so let's abstract those two we really want to get to writing",
    "start": "591350",
    "end": "597900"
  },
  {
    "text": "once and running anywhere and how do we do that so",
    "start": "597900",
    "end": "605660"
  },
  {
    "text": "so about seven months ago a pound introduced crossplane it's an",
    "start": "609370",
    "end": "616390"
  },
  {
    "text": "open-source multi-cloud control plane and it was released where it's still",
    "start": "616390",
    "end": "623590"
  },
  {
    "text": "young it's a version 0.2 but what this does is it leverages the kubernetes api",
    "start": "623590",
    "end": "631090"
  },
  {
    "text": "machinery at CD the workload scheduler and introduces resource controllers for",
    "start": "631090",
    "end": "641170"
  },
  {
    "text": "both we support the three cloud providers AWS Azure and Google cloud",
    "start": "641170",
    "end": "647190"
  },
  {
    "text": "there are other cloud providers we'd like to extend that support to and it",
    "start": "647190",
    "end": "653110"
  },
  {
    "text": "can also provide controllers for actively managing other third-party",
    "start": "653110",
    "end": "658270"
  },
  {
    "text": "software we'd like to see that extended to you things like elastic confluent",
    "start": "658270",
    "end": "665650"
  },
  {
    "text": "data bricks other typical apps the typical frameworks that your apps going",
    "start": "665650",
    "end": "670870"
  },
  {
    "text": "to manage and of course by building on the kubernetes api machinery you have",
    "start": "670870",
    "end": "676210"
  },
  {
    "text": "all the same user interfaces and client libraries that you've grown to love and",
    "start": "676210",
    "end": "683200"
  },
  {
    "text": "use and so when we look at one of the",
    "start": "683200",
    "end": "690910"
  },
  {
    "text": "concepts that we're introducing here to do this as called separation of concerns",
    "start": "690910",
    "end": "696850"
  },
  {
    "text": "where we look at developer who can compose their app and resources in a",
    "start": "696850",
    "end": "705310"
  },
  {
    "text": "general way think about the dependencies that they have and at development time make sure that they're less tightly",
    "start": "705310",
    "end": "711700"
  },
  {
    "text": "coupled and I kind of think of it like this image from Todd McLean who",
    "start": "711700",
    "end": "718380"
  },
  {
    "text": "deconstructs common consumer items or household items and you see just how",
    "start": "718380",
    "end": "724510"
  },
  {
    "text": "complex some of these simple items have become but when we think about how we",
    "start": "724510",
    "end": "731100"
  },
  {
    "text": "build upon the machinery of software we have to get to the point where we have a",
    "start": "731100",
    "end": "736900"
  },
  {
    "text": "factory model of components that we want to reuse and design to be modular and reused in",
    "start": "736900",
    "end": "746020"
  },
  {
    "text": "other applications regardless of where those applications are intended to run",
    "start": "746020",
    "end": "751440"
  },
  {
    "text": "so the separation of concerns also lets",
    "start": "751440",
    "end": "756730"
  },
  {
    "text": "an administrator define the environment specifics and policies so at development",
    "start": "756730",
    "end": "763450"
  },
  {
    "text": "time I might be running this in mini cube and installing crossplane using",
    "start": "763450",
    "end": "769600"
  },
  {
    "text": "cloud resources but when I go to production that environment can be",
    "start": "769600",
    "end": "774610"
  },
  {
    "text": "maintained by an administrator that can set policies I don't necessarily see secrets I just need a connection string",
    "start": "774610",
    "end": "782230"
  },
  {
    "text": "or you know the secret references for a database request so how do we model that",
    "start": "782230",
    "end": "790690"
  },
  {
    "text": "we we we looked at persistent volume claims and storage class and kubernetes",
    "start": "790690",
    "end": "796840"
  },
  {
    "text": "and that's a model for creating resource claims and resource classes so if I have",
    "start": "796840",
    "end": "803830"
  },
  {
    "text": "a resource class that is a database I can make a claim on that as an app developer and this allows us to do some",
    "start": "803830",
    "end": "811810"
  },
  {
    "text": "dynamic on-demand provisioning of resources when we deploy to a specific environment so if we look at how this",
    "start": "811810",
    "end": "823020"
  },
  {
    "text": "enables us to get to a get up style cloud native development pipeline we're",
    "start": "823020",
    "end": "830140"
  },
  {
    "text": "going to have essentially app owners who are developing their yeah Mille for",
    "start": "830140",
    "end": "838600"
  },
  {
    "text": "their application that includes resource claims and workloads will have",
    "start": "838600",
    "end": "843750"
  },
  {
    "text": "administrators who are also provisioning the environment where the resource",
    "start": "843750",
    "end": "851590"
  },
  {
    "text": "classes that are available within that environment they'll be choosing",
    "start": "851590",
    "end": "856990"
  },
  {
    "text": "providers that basically can be used for that they might choose to use AWS or GCP",
    "start": "856990",
    "end": "865780"
  },
  {
    "text": "and they'll be defining concrete or resources like secrets",
    "start": "865780",
    "end": "871050"
  },
  {
    "text": "and be pcs and other things within that environment so as an app developer I'm",
    "start": "871050",
    "end": "876480"
  },
  {
    "text": "going to be insulated from that and I think in this way the the dev and the Ops world converged on a single API",
    "start": "876480",
    "end": "884360"
  },
  {
    "text": "kubernetes api based resource for that that stack or app definition that's",
    "start": "884360",
    "end": "891450"
  },
  {
    "text": "composed of those two different things so just to give you an example of what a",
    "start": "891450",
    "end": "898680"
  },
  {
    "text": "resource claim would look like as an app owner",
    "start": "898680",
    "end": "904769"
  },
  {
    "text": "here's Postgres where the request for",
    "start": "904769",
    "end": "910050"
  },
  {
    "text": "Postgres it doesn't have a whole lot of the environment specifics I don't yet say where this is going to run and I",
    "start": "910050",
    "end": "917550"
  },
  {
    "text": "basically can specify the engine version that I need and that it's going to come",
    "start": "917550",
    "end": "923550"
  },
  {
    "text": "from a cloud Postgres provider",
    "start": "923550",
    "end": "927709"
  },
  {
    "text": "the resource class as defined I there are defaults that are installed when",
    "start": "930070",
    "end": "936430"
  },
  {
    "text": "crossplane is installed but the system administrator can go in and update those defaults but this is going to contain",
    "start": "936430",
    "end": "943530"
  },
  {
    "text": "properties that are defined that are specific to that cloud provider it might",
    "start": "943530",
    "end": "949420"
  },
  {
    "text": "on a dia AWS be using a certain instance",
    "start": "949420",
    "end": "954730"
  },
  {
    "text": "size or database size they're going to be able to define policy and allow apps",
    "start": "954730",
    "end": "964510"
  },
  {
    "text": "to default to that so one of the",
    "start": "964510",
    "end": "972190"
  },
  {
    "text": "partners we've been extremely fortunate to be working with is gitlab we wanted",
    "start": "972190",
    "end": "978580"
  },
  {
    "text": "to choose a partner that has a fairly complex real-world application to prove",
    "start": "978580",
    "end": "984490"
  },
  {
    "text": "out cross plains model and we're learning a lot about how to design the",
    "start": "984490",
    "end": "992620"
  },
  {
    "text": "controllers and the workloads so just to give you an example get lab is currently",
    "start": "992620",
    "end": "999430"
  },
  {
    "text": "deployed it's a helmet art it has about 48 hundred lines of yamo it consists of",
    "start": "999430",
    "end": "1005580"
  },
  {
    "text": "14 deployment three jobs nine services 16 config maps so there's a lot going on",
    "start": "1005580",
    "end": "1012240"
  },
  {
    "text": "in there their main dependencies are on Postgres Redis and object storage so",
    "start": "1012240",
    "end": "1019650"
  },
  {
    "text": "they wanted to have this run across be able to deploy across different cloud providers and we were starting to look",
    "start": "1019650",
    "end": "1028920"
  },
  {
    "text": "at their current install and how could we make this better so with a custom",
    "start": "1028920",
    "end": "1034020"
  },
  {
    "text": "resource definition there's a simple configured speery ins with the custom get lab controller we",
    "start": "1034020",
    "end": "1041400"
  },
  {
    "text": "can generate these artifacts and essentially manage the state of the deployment and get to the point where",
    "start": "1041400",
    "end": "1047850"
  },
  {
    "text": "the deployment of get lab is a fully automated and portable multi cloud deployment so this is how it kind of",
    "start": "1047850",
    "end": "1055830"
  },
  {
    "text": "looks when you look at what we've design design forget lab and by the way this is",
    "start": "1055830",
    "end": "1060990"
  },
  {
    "text": "all out on our open source site so you can review how this is the examples for this you'll",
    "start": "1060990",
    "end": "1069590"
  },
  {
    "text": "see that basically the Postgres controller Redis controller and bucket",
    "start": "1069590",
    "end": "1075620"
  },
  {
    "text": "controller are pulled in as resource claims within gitlab the on AWS or GC P",
    "start": "1075620",
    "end": "1084680"
  },
  {
    "text": "or Azure those are mapped to the different cloud provider specific services so it might be buckets on AWS",
    "start": "1084680",
    "end": "1092960"
  },
  {
    "text": "and you know we're gonna also be spinning up and deploying to it managed",
    "start": "1092960",
    "end": "1099590"
  },
  {
    "text": "cluster so it's G key or a KS or whatever the cloud provider specific",
    "start": "1099590",
    "end": "1106450"
  },
  {
    "text": "resource is so crossplane just manages this for you so right now kind of show",
    "start": "1106450",
    "end": "1116420"
  },
  {
    "text": "you a demo that steps through this step-by-step it kind of decomposes it the app would normally bundle these",
    "start": "1116420",
    "end": "1123890"
  },
  {
    "text": "things together but I think this will give you an idea of what it looks like",
    "start": "1123890",
    "end": "1130090"
  },
  {
    "text": "switch over",
    "start": "1130090",
    "end": "1133419"
  },
  {
    "text": "so first we're going to basically install crossplane in this case it's my",
    "start": "1141270",
    "end": "1147750"
  },
  {
    "text": "local mini cube cluster I'm going to run",
    "start": "1147750",
    "end": "1152910"
  },
  {
    "text": "it you know you might just run it where your workloads are gonna run for tests",
    "start": "1152910",
    "end": "1159000"
  },
  {
    "text": "and staging so we grab crossplane from the master channel and by the way I",
    "start": "1159000",
    "end": "1166140"
  },
  {
    "text": "could never type this fast and I don't want to screw up the demo so it's a video for you so we'll install the",
    "start": "1166140",
    "end": "1174930"
  },
  {
    "text": "helmet chart from our master channel to get crossplane installed and the key",
    "start": "1174930",
    "end": "1182520"
  },
  {
    "text": "third part of this is once we've installed crossplane we will have on our system custom resources for a set of",
    "start": "1182520",
    "end": "1190760"
  },
  {
    "text": "classes so you can see here when we do a cube CTL to get those CR DS that we now",
    "start": "1190760",
    "end": "1198150"
  },
  {
    "text": "have various CR DS for buckets and",
    "start": "1198150",
    "end": "1204530"
  },
  {
    "text": "databases memory caches and other things that have been installed and are",
    "start": "1204530",
    "end": "1210390"
  },
  {
    "text": "available from different all three cloud providers",
    "start": "1210390",
    "end": "1215450"
  },
  {
    "text": "and once we've installed crossplane now we want to basically start to grab",
    "start": "1219550",
    "end": "1228430"
  },
  {
    "text": "our cloud provider credentials and for this example we're just going to do the",
    "start": "1228430",
    "end": "1235630"
  },
  {
    "text": "simplest possible thing we're going to grab our credentials from GCP and stuff",
    "start": "1235630",
    "end": "1244510"
  },
  {
    "text": "them into a yamo file so here we grab",
    "start": "1244510",
    "end": "1251440"
  },
  {
    "text": "the credentials and just copy them into",
    "start": "1251440",
    "end": "1256960"
  },
  {
    "text": "our provider yeah Mille so now we have those credentials and we're going to",
    "start": "1256960",
    "end": "1267370"
  },
  {
    "text": "deploy those to our cluster of secrets so with the secrets available we can",
    "start": "1267370",
    "end": "1276810"
  },
  {
    "text": "then provision some resource classes",
    "start": "1276810",
    "end": "1284220"
  },
  {
    "text": "so the process of provisioning resource classes is really the domain of the",
    "start": "1290309",
    "end": "1296249"
  },
  {
    "text": "administrator if you're playing administrator and app developer you can put these two together but an",
    "start": "1296249",
    "end": "1303080"
  },
  {
    "text": "administrator in this case might decide they're going to make available the resource classes for AWS only if you're",
    "start": "1303080",
    "end": "1310229"
  },
  {
    "text": "an AWS shop and so you can go in and set",
    "start": "1310229",
    "end": "1315690"
  },
  {
    "text": "various properties within this in this case back there we were setting the the",
    "start": "1315690",
    "end": "1323690"
  },
  {
    "text": "storage size and region for our for our storage for the standard cloud sequel",
    "start": "1323690",
    "end": "1333239"
  },
  {
    "text": "instance in GCP but we can come in and",
    "start": "1333239",
    "end": "1338729"
  },
  {
    "text": "and basically configure these defaults in this case that was the Postgres configuration also look at the bucket",
    "start": "1338729",
    "end": "1347070"
  },
  {
    "text": "configuration here and just make sure that it's good to go before I start",
    "start": "1347070",
    "end": "1352289"
  },
  {
    "text": "having apps unleashed into our buckets so once that's set up I now basically",
    "start": "1352289",
    "end": "1360659"
  },
  {
    "text": "can keep CTL create on those resource",
    "start": "1360659",
    "end": "1367049"
  },
  {
    "text": "classes those are now created and they're essentially provisioned in that crossplane instance and available to any",
    "start": "1367049",
    "end": "1373919"
  },
  {
    "text": "apps that want to consume them so now we go back to what does the app developer",
    "start": "1373919",
    "end": "1379739"
  },
  {
    "text": "do in this case we're going to provisions to manage services in Google",
    "start": "1379739",
    "end": "1386190"
  },
  {
    "text": "Cloud and then I'll show you an AWS so",
    "start": "1386190",
    "end": "1391249"
  },
  {
    "text": "this is this is the dependencies for forget lap we basically make use of",
    "start": "1391249",
    "end": "1398549"
  },
  {
    "text": "kubernetes so we're gonna spin up a cluster that we're going to deploy get lab two we're gonna make an instant",
    "start": "1398549",
    "end": "1406440"
  },
  {
    "text": "reference to Postgres and Redis and so what we did was basically deploy the",
    "start": "1406440",
    "end": "1414179"
  },
  {
    "text": "buckets they have about nine different buckets they use since we basically keep CTL applied the",
    "start": "1414179",
    "end": "1422520"
  },
  {
    "text": "bucket resource we now basically have that controller going out and spinning",
    "start": "1422520",
    "end": "1429480"
  },
  {
    "text": "up the buckets in GCP and once those are reconciled they'll be bound within the resource so",
    "start": "1429480",
    "end": "1436740"
  },
  {
    "text": "you can kind of see that there right now only one of the buckets is bound but the",
    "start": "1436740",
    "end": "1443280"
  },
  {
    "text": "others are still being created so if we switch over and look we can just keep",
    "start": "1443280",
    "end": "1449850"
  },
  {
    "text": "pulling this where you can go get a coffee and just wait the buckets are fast other things might take a few",
    "start": "1449850",
    "end": "1456270"
  },
  {
    "text": "minutes and but now you've got a reconciler that's just doing that work for you it's a hands off so here I kind",
    "start": "1456270",
    "end": "1464310"
  },
  {
    "text": "of just switched through the console and kind of look and see what the state of things is making sure that things are",
    "start": "1464310",
    "end": "1471480"
  },
  {
    "text": "spinning up but really I don't have to do this it's just to show you and so",
    "start": "1471480",
    "end": "1481860"
  },
  {
    "text": "once those resources are created and bound within kubernetes we can basically",
    "start": "1481860",
    "end": "1489960"
  },
  {
    "text": "then come and take those resource claims that we have and export them to our git",
    "start": "1489960",
    "end": "1495960"
  },
  {
    "text": "lab help chart this these two steps would generally be bundled together in",
    "start": "1495960",
    "end": "1501510"
  },
  {
    "text": "your application but we're showing them here so that you can kind of see what's going on under the covers so here we",
    "start": "1501510",
    "end": "1509310"
  },
  {
    "text": "basically have the git lab resource claims that we made in our default",
    "start": "1509310",
    "end": "1515760"
  },
  {
    "text": "namespace we're going to copy those to our target cluster and make sure they're",
    "start": "1515760",
    "end": "1522600"
  },
  {
    "text": "available in the get lab namespace and then we're going to update the helm",
    "start": "1522600",
    "end": "1529050"
  },
  {
    "text": "chart make sure we have a values file that has all of our secrets and is or references",
    "start": "1529050",
    "end": "1537760"
  },
  {
    "text": "to our secrets and is ready to go so there we go we've copied over everything",
    "start": "1537760",
    "end": "1546100"
  },
  {
    "text": "into the target cluster",
    "start": "1546100",
    "end": "1549360"
  },
  {
    "text": "and that is ready to go so now if we grab a helmet chart and everything from",
    "start": "1557029",
    "end": "1566269"
  },
  {
    "text": "the get lab repo we are basically ready",
    "start": "1566269",
    "end": "1572359"
  },
  {
    "text": "to install and update it with our values",
    "start": "1572359",
    "end": "1577389"
  },
  {
    "text": "so that's it now we were ready to install get lab",
    "start": "1577389",
    "end": "1583989"
  },
  {
    "text": "so this essentially will be installing gitlab to our target cluster that we provision as a resource claim and we go",
    "start": "1590240",
    "end": "1602870"
  },
  {
    "text": "ahead and run that get lab but takes a",
    "start": "1602870",
    "end": "1609320"
  },
  {
    "text": "little while to spin up so we can either go get coffee again or we could",
    "start": "1609320",
    "end": "1616490"
  },
  {
    "text": "basically watch as it spins these services up so now we're waiting for",
    "start": "1616490",
    "end": "1622570"
  },
  {
    "text": "we're using kubernetes of course to check the status of whether these",
    "start": "1622570",
    "end": "1628940"
  },
  {
    "text": "services are bound and you can see here the services that are being initialized",
    "start": "1628940",
    "end": "1634960"
  },
  {
    "text": "including the buckets and Postgres so",
    "start": "1634960",
    "end": "1641500"
  },
  {
    "text": "once those are spun up we will have an address an IP address that we can grab",
    "start": "1641740",
    "end": "1648880"
  },
  {
    "text": "crossplane doesn't yet provision the things like V pcs and other open ports",
    "start": "1648880",
    "end": "1656690"
  },
  {
    "text": "and other things like that we'd like to extend it to manage those things so",
    "start": "1656690",
    "end": "1661850"
  },
  {
    "text": "you'll see here that I just grabbed the IP address and manually open that up",
    "start": "1661850",
    "end": "1668049"
  },
  {
    "text": "drop that in and create a new DNS entry and Google",
    "start": "1671900",
    "end": "1678640"
  },
  {
    "text": "and keep waiting here and we'll see what the state of our pot is you now see that the",
    "start": "1683030",
    "end": "1690180"
  },
  {
    "text": "status is running or completed on everything except for their test things",
    "start": "1690180",
    "end": "1695580"
  },
  {
    "text": "so we are basically ready to go we can then grab the status URL from the",
    "start": "1695580",
    "end": "1701990"
  },
  {
    "text": "controller basically fire up the console and we are ready to go so basically that",
    "start": "1701990",
    "end": "1707520"
  },
  {
    "text": "took a complex app and made it hands off with the get lab controller to handle",
    "start": "1707520",
    "end": "1713580"
  },
  {
    "text": "all of that reconciliation and that controller can also you know continue to monitor the health and status of that",
    "start": "1713580",
    "end": "1721050"
  },
  {
    "text": "good lab deployment so that is get lab",
    "start": "1721050",
    "end": "1728180"
  },
  {
    "text": "with crossplane is so we'd love to",
    "start": "1734360",
    "end": "1743660"
  },
  {
    "text": "welcome the community to continue to grow cross flane we're just about to hit a dot three release and but the would",
    "start": "1743660",
    "end": "1752660"
  },
  {
    "text": "love to see folks get involved i put some resources up here if you want to take a look at the get lab deployment",
    "start": "1752660",
    "end": "1760970"
  },
  {
    "text": "and other sample applications like woodward press on the site we have",
    "start": "1760970",
    "end": "1766040"
  },
  {
    "text": "regular community meetings and would love to extend crossplane into",
    "start": "1766040",
    "end": "1772270"
  },
  {
    "text": "infrastructure provisioning and other cloud providers thank you anybody else",
    "start": "1772270",
    "end": "1779090"
  },
  {
    "text": "any questions from the audience",
    "start": "1779090",
    "end": "1783250"
  },
  {
    "text": "okay thanks everybody oh did you have a question yeah",
    "start": "1786460",
    "end": "1793139"
  },
  {
    "text": "[Music] first of all I'm a newbie to you two",
    "start": "1807600",
    "end": "1813050"
  },
  {
    "text": "about containers and kubernetes so my",
    "start": "1813050",
    "end": "1818950"
  },
  {
    "text": "questions might be ridiculous one but what is biggest advantage of introducing",
    "start": "1818950",
    "end": "1829070"
  },
  {
    "text": "much crowd introducing your product",
    "start": "1829070",
    "end": "1834320"
  },
  {
    "text": "I mean is it correct or understanding that by using your product the",
    "start": "1834320",
    "end": "1843670"
  },
  {
    "text": "application code portability is guaranteed right right right",
    "start": "1843670",
    "end": "1848780"
  },
  {
    "text": "so one advantage being you know all different sides of your house your",
    "start": "1848780",
    "end": "1854030"
  },
  {
    "text": "administration and developers are converging on kubernetes but also the",
    "start": "1854030",
    "end": "1860120"
  },
  {
    "text": "application things that you're deploying may not live in a cluster they may be",
    "start": "1860120",
    "end": "1865640"
  },
  {
    "text": "managing things across clouds so your application spans that with a single",
    "start": "1865640",
    "end": "1870950"
  },
  {
    "text": "development framework most in most",
    "start": "1870950",
    "end": "1877100"
  },
  {
    "text": "applications today are essentially targeting a cluster or doing multi cluster deployments but it's still",
    "start": "1877100",
    "end": "1883190"
  },
  {
    "text": "limited to your cluster are there any activities to minimize such gaps or",
    "start": "1883190",
    "end": "1895330"
  },
  {
    "text": "products like your product activity",
    "start": "1895330",
    "end": "1900400"
  },
  {
    "text": "provided by you it's recommended for the feature I think that there are two",
    "start": "1900400",
    "end": "1907960"
  },
  {
    "text": "alternatives in the future like from",
    "start": "1907960",
    "end": "1913900"
  },
  {
    "text": "application developer point of view if there is no gap between two clouds with",
    "start": "1913900",
    "end": "1926480"
  },
  {
    "text": "regard to the application growing programming point of view no problem so",
    "start": "1926480",
    "end": "1932360"
  },
  {
    "text": "I think there is a way to minimize such gaps but",
    "start": "1932360",
    "end": "1938110"
  },
  {
    "text": "is there any activities to minimize gap",
    "start": "1938289",
    "end": "1943580"
  },
  {
    "text": "or there's no activities well I think you know if I understand your question the there are going to continue be",
    "start": "1943580",
    "end": "1951070"
  },
  {
    "text": "differences across cloud providers the they're creating walled gardens and their incentive is to have",
    "start": "1951070",
    "end": "1957820"
  },
  {
    "text": "differentiated services but for many of the services like particularly services",
    "start": "1957820",
    "end": "1965029"
  },
  {
    "text": "that have been taken from open source and you know put into the walled garden like databases you have compatibility at",
    "start": "1965029",
    "end": "1973940"
  },
  {
    "text": "a wire protocol level like if I want Postgres you know it doesn't really matter that it's RDS so taking those and",
    "start": "1973940",
    "end": "1982159"
  },
  {
    "text": "creating a portable abstraction for requesting a sequel database and",
    "start": "1982159",
    "end": "1987220"
  },
  {
    "text": "allowing apps to essentially for the 80% scenario use portable extractions before",
    "start": "1987220",
    "end": "1995659"
  },
  {
    "text": "you get into cloud provider specifics is a great way to essentially reduce the",
    "start": "1995659",
    "end": "2002799"
  },
  {
    "text": "development time right and give people a common set of controllers that are well",
    "start": "2002799",
    "end": "2010539"
  },
  {
    "text": "tested and and very rich in their active state management you can certainly go",
    "start": "2010539",
    "end": "2015999"
  },
  {
    "text": "and develop a controller that is specific to a cloud provider and has all",
    "start": "2015999",
    "end": "2021429"
  },
  {
    "text": "of the rich features and and so breadth and the ability to sort of configure",
    "start": "2021429",
    "end": "2027749"
  },
  {
    "text": "specific features is there so ok thank you thank you",
    "start": "2027749",
    "end": "2033309"
  },
  {
    "text": "and I think we're out of time yep a one to one question ok",
    "start": "2033309",
    "end": "2041399"
  },
  {
    "text": "coming from that question I thought there is some service provide a",
    "start": "2041700",
    "end": "2046910"
  },
  {
    "text": "controller they've been developed as an interface being developed for each service provider cloud provider is that",
    "start": "2046910",
    "end": "2053730"
  },
  {
    "text": "isn't it helping to alleviate some of the issue with compatibility right so we",
    "start": "2053730",
    "end": "2059610"
  },
  {
    "text": "do have resource classes for AWS Google cloud and Azure and and so there is",
    "start": "2059610",
    "end": "2068179"
  },
  {
    "text": "support directly for for those it doesn't extend to the full breadth of",
    "start": "2068179",
    "end": "2074240"
  },
  {
    "text": "api's and that would be something that we would continue to evolve as",
    "start": "2074240",
    "end": "2079590"
  },
  {
    "text": "crossplane matures okay thank you cool thank you very much",
    "start": "2079590",
    "end": "2087140"
  }
]