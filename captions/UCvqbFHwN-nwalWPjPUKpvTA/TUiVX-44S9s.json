[
  {
    "text": "so you want to write memory with",
    "start": "240",
    "end": "3440"
  },
  {
    "text": "ebpf um hopefully that's why you're here",
    "start": "3440",
    "end": "6960"
  },
  {
    "text": "or at least you want to hear about how",
    "start": "6960",
    "end": "8040"
  },
  {
    "text": "we tried to do it uh my name is Mike",
    "start": "8040",
    "end": "10320"
  },
  {
    "text": "Dame uh up until recently I was a",
    "start": "10320",
    "end": "12200"
  },
  {
    "text": "software engineer at Google I'm now at",
    "start": "12200",
    "end": "14080"
  },
  {
    "text": "odigos and my name is n gesy I'm a",
    "start": "14080",
    "end": "16720"
  },
  {
    "text": "software engineer with graphon labs and",
    "start": "16720",
    "end": "19080"
  },
  {
    "text": "we're both maintainers of an open source",
    "start": "19080",
    "end": "21160"
  },
  {
    "text": "project that's using ebpf to uh write to",
    "start": "21160",
    "end": "24439"
  },
  {
    "text": "user space from the colonel and we'll",
    "start": "24439",
    "end": "25920"
  },
  {
    "text": "get into a little bit more details about",
    "start": "25920",
    "end": "27560"
  },
  {
    "text": "that but um just to kind of go over what",
    "start": "27560",
    "end": "30080"
  },
  {
    "text": "we're going to show in this talk um the",
    "start": "30080",
    "end": "32360"
  },
  {
    "text": "goal is to kind of show our Jour our use",
    "start": "32360",
    "end": "35079"
  },
  {
    "text": "case and then our our journey with",
    "start": "35079",
    "end": "36680"
  },
  {
    "text": "trying to solve that use case within",
    "start": "36680",
    "end": "38600"
  },
  {
    "text": "ebpf of why are we writing to user space",
    "start": "38600",
    "end": "42000"
  },
  {
    "text": "memory uh the sort of problems that we",
    "start": "42000",
    "end": "44239"
  },
  {
    "text": "ran into with like the current options",
    "start": "44239",
    "end": "46360"
  },
  {
    "text": "that are available um go through the",
    "start": "46360",
    "end": "48960"
  },
  {
    "text": "Alternatives that we've looked at at",
    "start": "48960",
    "end": "50600"
  },
  {
    "text": "different layers of the application and",
    "start": "50600",
    "end": "52520"
  },
  {
    "text": "then kind of wrap it all up and think",
    "start": "52520",
    "end": "53800"
  },
  {
    "text": "about like what does this mean for ebpf",
    "start": "53800",
    "end": "55840"
  },
  {
    "text": "what does it mean for us going forward",
    "start": "55840",
    "end": "58160"
  },
  {
    "text": "um and all that so um why write user",
    "start": "58160",
    "end": "63600"
  },
  {
    "text": "space memory with ebpf the thing is that",
    "start": "63600",
    "end": "66080"
  },
  {
    "text": "a lot of traditional or classical ebpf",
    "start": "66080",
    "end": "68799"
  },
  {
    "text": "programs don't really need to do this",
    "start": "68799",
    "end": "70840"
  },
  {
    "text": "they don't need to write into user space",
    "start": "70840",
    "end": "72439"
  },
  {
    "text": "for most of like security networking or",
    "start": "72439",
    "end": "75240"
  },
  {
    "text": "even observability use cases you can get",
    "start": "75240",
    "end": "77200"
  },
  {
    "text": "most of what you want done uh either",
    "start": "77200",
    "end": "78960"
  },
  {
    "text": "before or after the request has hit the",
    "start": "78960",
    "end": "81000"
  },
  {
    "text": "user space um if you think about",
    "start": "81000",
    "end": "82880"
  },
  {
    "text": "security that just kind of broadly",
    "start": "82880",
    "end": "84320"
  },
  {
    "text": "speaking falls into like allowing and",
    "start": "84320",
    "end": "86159"
  },
  {
    "text": "denying or rerouting um networking you",
    "start": "86159",
    "end": "88759"
  },
  {
    "text": "can obviously rewrite packets you know",
    "start": "88759",
    "end": "91000"
  },
  {
    "text": "write a load balancer that ebpf supports",
    "start": "91000",
    "end": "92960"
  },
  {
    "text": "that great and even a lot of",
    "start": "92960",
    "end": "94399"
  },
  {
    "text": "observability signals if you're talking",
    "start": "94399",
    "end": "96159"
  },
  {
    "text": "about like uh metrics or profiles can",
    "start": "96159",
    "end": "98439"
  },
  {
    "text": "kind of be done readon um you don't",
    "start": "98439",
    "end": "100560"
  },
  {
    "text": "really need to uh write into the uh",
    "start": "100560",
    "end": "103840"
  },
  {
    "text": "application itself uh except for one",
    "start": "103840",
    "end": "107560"
  },
  {
    "text": "signal and that is uh distributed",
    "start": "107560",
    "end": "109880"
  },
  {
    "text": "tracing which is our project and that",
    "start": "109880",
    "end": "112320"
  },
  {
    "text": "fundamentally uh requires you to write",
    "start": "112320",
    "end": "114479"
  },
  {
    "text": "into the signal which makes it kind of",
    "start": "114479",
    "end": "115920"
  },
  {
    "text": "unique for it to be functional so uh",
    "start": "115920",
    "end": "117960"
  },
  {
    "text": "Nicha talk a little bit about uh what",
    "start": "117960",
    "end": "120320"
  },
  {
    "text": "makes tracing unique yeah so if you see",
    "start": "120320",
    "end": "122600"
  },
  {
    "text": "this picture here essentially what we",
    "start": "122600",
    "end": "124759"
  },
  {
    "text": "want to find is actually track a request",
    "start": "124759",
    "end": "128239"
  },
  {
    "text": "going through one service then going",
    "start": "128239",
    "end": "130319"
  },
  {
    "text": "through another service and eventually",
    "start": "130319",
    "end": "132319"
  },
  {
    "text": "making it somewhere else so we can",
    "start": "132319",
    "end": "134040"
  },
  {
    "text": "produce distributed tracing uh this is",
    "start": "134040",
    "end": "136599"
  },
  {
    "text": "typical how distributed tracing Works",
    "start": "136599",
    "end": "138599"
  },
  {
    "text": "open Telemetry has many sdks Auto",
    "start": "138599",
    "end": "141120"
  },
  {
    "text": "instrumentation manual instrumentation",
    "start": "141120",
    "end": "143239"
  },
  {
    "text": "that do this approach one way or another",
    "start": "143239",
    "end": "145920"
  },
  {
    "text": "so what does this distributed tracing",
    "start": "145920",
    "end": "147680"
  },
  {
    "text": "actually do um can go to next slide how",
    "start": "147680",
    "end": "150959"
  },
  {
    "text": "it works is that uh we use this w3c",
    "start": "150959",
    "end": "154080"
  },
  {
    "text": "standard for uh Trace ID which consists",
    "start": "154080",
    "end": "157160"
  },
  {
    "text": "of couple of Parts uh one is the main",
    "start": "157160",
    "end": "159560"
  },
  {
    "text": "part Trace ID which is common across all",
    "start": "159560",
    "end": "162080"
  },
  {
    "text": "the different parts of this request",
    "start": "162080",
    "end": "164200"
  },
  {
    "text": "making it through the system and then we",
    "start": "164200",
    "end": "165920"
  },
  {
    "text": "have a span ID which is used to create",
    "start": "165920",
    "end": "168480"
  },
  {
    "text": "this parent child relationship what came",
    "start": "168480",
    "end": "170840"
  },
  {
    "text": "before what so we can find the",
    "start": "170840",
    "end": "172599"
  },
  {
    "text": "distribute actually aspect of traces all",
    "start": "172599",
    "end": "175519"
  },
  {
    "text": "tie up together this is later than",
    "start": "175519",
    "end": "177920"
  },
  {
    "text": "typically displayed in some sort of",
    "start": "177920",
    "end": "179879"
  },
  {
    "text": "database that does tracing and it can be",
    "start": "179879",
    "end": "182159"
  },
  {
    "text": "visualized and explored by end users",
    "start": "182159",
    "end": "185720"
  },
  {
    "text": "so yeah so in practice what does this",
    "start": "185720",
    "end": "189239"
  },
  {
    "text": "look like and we're talking about doing",
    "start": "189239",
    "end": "190680"
  },
  {
    "text": "it in go because the real challenge here",
    "start": "190680",
    "end": "192760"
  },
  {
    "text": "is um you know go is kind of a other",
    "start": "192760",
    "end": "195200"
  },
  {
    "text": "languages sort of have this problem that",
    "start": "195200",
    "end": "197200"
  },
  {
    "text": "we'll talk about handle but go is you",
    "start": "197200",
    "end": "198920"
  },
  {
    "text": "know being statically compiled uh",
    "start": "198920",
    "end": "201080"
  },
  {
    "text": "creates its own challenges but in",
    "start": "201080",
    "end": "203640"
  },
  {
    "text": "general if you're going to write this",
    "start": "203640",
    "end": "205239"
  },
  {
    "text": "into a go Application um the pseudo code",
    "start": "205239",
    "end": "207840"
  },
  {
    "text": "looks like you have a a request handl",
    "start": "207840",
    "end": "210000"
  },
  {
    "text": "that parses a trace parent header out of",
    "start": "210000",
    "end": "212159"
  },
  {
    "text": "your request um reads the the span",
    "start": "212159",
    "end": "214959"
  },
  {
    "text": "context from that you make a a function",
    "start": "214959",
    "end": "217239"
  },
  {
    "text": "call to start a new span context and",
    "start": "217239",
    "end": "219400"
  },
  {
    "text": "then whenever you make a a new request",
    "start": "219400",
    "end": "221360"
  },
  {
    "text": "from that or if you're making your",
    "start": "221360",
    "end": "223280"
  },
  {
    "text": "response um you have to update the",
    "start": "223280",
    "end": "225560"
  },
  {
    "text": "headers with the new ID um and so on",
    "start": "225560",
    "end": "229000"
  },
  {
    "text": "here this looks pretty simple but if",
    "start": "229000",
    "end": "230840"
  },
  {
    "text": "you're familiar with open Telemetry at",
    "start": "230840",
    "end": "233040"
  },
  {
    "text": "all you know that there's a lot more",
    "start": "233040",
    "end": "234159"
  },
  {
    "text": "involved than just that and if you're",
    "start": "234159",
    "end": "235599"
  },
  {
    "text": "not familiar with open Telemetry I",
    "start": "235599",
    "end": "237000"
  },
  {
    "text": "definitely recommend checking it out um",
    "start": "237000",
    "end": "239280"
  },
  {
    "text": "to at least understand the pain that",
    "start": "239280",
    "end": "241280"
  },
  {
    "text": "we're talking about um so what we want",
    "start": "241280",
    "end": "243599"
  },
  {
    "text": "to do is do this more automatically um",
    "start": "243599",
    "end": "247319"
  },
  {
    "text": "with ebpf um like I mentioned go is",
    "start": "247319",
    "end": "250799"
  },
  {
    "text": "statically compiled so you're there's no",
    "start": "250799",
    "end": "252680"
  },
  {
    "text": "Dynamic runtime that you can hook into",
    "start": "252680",
    "end": "255079"
  },
  {
    "text": "and inject these function calls um but",
    "start": "255079",
    "end": "258000"
  },
  {
    "text": "we do have known sets of function calls",
    "start": "258000",
    "end": "260040"
  },
  {
    "text": "for like the net HTTP libraries um grpc",
    "start": "260040",
    "end": "263280"
  },
  {
    "text": "libraries where we could in theory and",
    "start": "263280",
    "end": "265400"
  },
  {
    "text": "we do um read these functions and just",
    "start": "265400",
    "end": "268400"
  },
  {
    "text": "handle that like boiler PL um span",
    "start": "268400",
    "end": "270720"
  },
  {
    "text": "context propagation uh generating the",
    "start": "270720",
    "end": "273000"
  },
  {
    "text": "new span contexts uh so this is what you",
    "start": "273000",
    "end": "276560"
  },
  {
    "text": "know where we would where we do insert",
    "start": "276560",
    "end": "278479"
  },
  {
    "text": "those sort of function calls uh in the",
    "start": "278479",
    "end": "280880"
  },
  {
    "text": "kernel and so what you end up getting",
    "start": "280880",
    "end": "282960"
  },
  {
    "text": "out of it is uh you know a trace that",
    "start": "282960",
    "end": "284720"
  },
  {
    "text": "looks like this and this uh if you're",
    "start": "284720",
    "end": "286639"
  },
  {
    "text": "familiar with tracing doesn't look too",
    "start": "286639",
    "end": "288360"
  },
  {
    "text": "special but this is actually something",
    "start": "288360",
    "end": "290120"
  },
  {
    "text": "that we got without writing any uh",
    "start": "290120",
    "end": "292240"
  },
  {
    "text": "instrumentation code in our application",
    "start": "292240",
    "end": "294240"
  },
  {
    "text": "at all you can see that we're actually",
    "start": "294240",
    "end": "296560"
  },
  {
    "text": "um you know through multiple Services",
    "start": "296560",
    "end": "299080"
  },
  {
    "text": "able to track a specific single request",
    "start": "299080",
    "end": "301280"
  },
  {
    "text": "this isn't just like black box tracing",
    "start": "301280",
    "end": "303600"
  },
  {
    "text": "or like a service map or anything this",
    "start": "303600",
    "end": "305639"
  },
  {
    "text": "is a real um you know propagated context",
    "start": "305639",
    "end": "308840"
  },
  {
    "text": "throughout one single uh request um and",
    "start": "308840",
    "end": "312400"
  },
  {
    "text": "so the project that we're doing that",
    "start": "312400",
    "end": "313800"
  },
  {
    "text": "with is this uh the Ops the Upstream",
    "start": "313800",
    "end": "316320"
  },
  {
    "text": "open Telemetry uh go instrumentation",
    "start": "316320",
    "end": "319199"
  },
  {
    "text": "project which is uh kind of the um the",
    "start": "319199",
    "end": "321720"
  },
  {
    "text": "main library kernel uh you know",
    "start": "321720",
    "end": "324759"
  },
  {
    "text": "framework to uh do this um both odos and",
    "start": "324759",
    "end": "328560"
  },
  {
    "text": "balea from of fork off of this uh to you",
    "start": "328560",
    "end": "332080"
  },
  {
    "text": "know add more functionality and um just",
    "start": "332080",
    "end": "335000"
  },
  {
    "text": "to kind of mention this isn't like a",
    "start": "335000",
    "end": "336680"
  },
  {
    "text": "totally uh you know novel approach it's",
    "start": "336680",
    "end": "340240"
  },
  {
    "text": "got some interest uh you know enough to",
    "start": "340240",
    "end": "342560"
  },
  {
    "text": "raise an eyebrow people are pretty",
    "start": "342560",
    "end": "343880"
  },
  {
    "text": "interested in trying to do this um but",
    "start": "343880",
    "end": "346319"
  },
  {
    "text": "the the uh ability to write that memory",
    "start": "346319",
    "end": "349639"
  },
  {
    "text": "with ebpf is a itself a pretty novel use",
    "start": "349639",
    "end": "353440"
  },
  {
    "text": "case of ebpf um so that's where we",
    "start": "353440",
    "end": "356400"
  },
  {
    "text": "started to um ask about our approach a",
    "start": "356400",
    "end": "359240"
  },
  {
    "text": "little bit so how do we do it we use",
    "start": "359240",
    "end": "362039"
  },
  {
    "text": "this um helper BPF prob right user uh",
    "start": "362039",
    "end": "365880"
  },
  {
    "text": "which exists in the BPF um libraries to",
    "start": "365880",
    "end": "369280"
  },
  {
    "text": "be able to write to any arbitrary user",
    "start": "369280",
    "end": "372880"
  },
  {
    "text": "space memory uh which has its own um you",
    "start": "372880",
    "end": "376000"
  },
  {
    "text": "know gotas uh it isn't doesn't have a",
    "start": "376000",
    "end": "379800"
  },
  {
    "text": "great level of support from the",
    "start": "379800",
    "end": "381840"
  },
  {
    "text": "maintainers because uh it has the",
    "start": "381840",
    "end": "384639"
  },
  {
    "text": "potential to you know write out of",
    "start": "384639",
    "end": "386240"
  },
  {
    "text": "memory um you know you can crash your",
    "start": "386240",
    "end": "388639"
  },
  {
    "text": "system if you're not care ful with it",
    "start": "388639",
    "end": "390800"
  },
  {
    "text": "and what we found is that there aren't",
    "start": "390800",
    "end": "391960"
  },
  {
    "text": "actually a lot of other um really any",
    "start": "391960",
    "end": "394120"
  },
  {
    "text": "other legitimate use cases of this",
    "start": "394120",
    "end": "396120"
  },
  {
    "text": "helper we think that we might be maybe",
    "start": "396120",
    "end": "398080"
  },
  {
    "text": "the first one um trying to look through",
    "start": "398080",
    "end": "400440"
  },
  {
    "text": "just public use cases on GitHub a lot of",
    "start": "400440",
    "end": "402680"
  },
  {
    "text": "them are making like root kits or hacks",
    "start": "402680",
    "end": "405080"
  },
  {
    "text": "with it um so trying to actually use it",
    "start": "405080",
    "end": "407960"
  },
  {
    "text": "for good um observability is uh pretty",
    "start": "407960",
    "end": "411560"
  },
  {
    "text": "new uh in this space um but",
    "start": "411560",
    "end": "414759"
  },
  {
    "text": "unfortunately because of the lack of",
    "start": "414759",
    "end": "416520"
  },
  {
    "text": "real use cases for it it's been um",
    "start": "416520",
    "end": "418919"
  },
  {
    "text": "additionally locked down within the",
    "start": "418919",
    "end": "420560"
  },
  {
    "text": "kernel where it's uh in a secure boot",
    "start": "420560",
    "end": "422680"
  },
  {
    "text": "mode it uh isn't even going to be",
    "start": "422680",
    "end": "424599"
  },
  {
    "text": "available by default um so looking at",
    "start": "424599",
    "end": "428080"
  },
  {
    "text": "all of this we started to kind of",
    "start": "428080",
    "end": "430000"
  },
  {
    "text": "scratch our heads and say okay if this",
    "start": "430000",
    "end": "432080"
  },
  {
    "text": "isn't like maybe this isn't the best",
    "start": "432080",
    "end": "434080"
  },
  {
    "text": "option that is available maybe it's not",
    "start": "434080",
    "end": "435800"
  },
  {
    "text": "just the only one what else has been",
    "start": "435800",
    "end": "438160"
  },
  {
    "text": "proposed and what have people looked at",
    "start": "438160",
    "end": "439560"
  },
  {
    "text": "and um what other options are available",
    "start": "439560",
    "end": "441280"
  },
  {
    "text": "for us to achieve this in process",
    "start": "441280",
    "end": "443280"
  },
  {
    "text": "context",
    "start": "443280",
    "end": "444440"
  },
  {
    "text": "propagation um so this was an",
    "start": "444440",
    "end": "447479"
  },
  {
    "text": "interesting proposal by someone from",
    "start": "447479",
    "end": "449199"
  },
  {
    "text": "Google",
    "start": "449199",
    "end": "450479"
  },
  {
    "text": "um who they said that they need a use",
    "start": "450479",
    "end": "452960"
  },
  {
    "text": "case for this um what we know is that",
    "start": "452960",
    "end": "456000"
  },
  {
    "text": "they're working on some high performance",
    "start": "456000",
    "end": "457479"
  },
  {
    "text": "scheduler where they need a fast way to",
    "start": "457479",
    "end": "459720"
  },
  {
    "text": "communicate between the kernel and user",
    "start": "459720",
    "end": "461440"
  },
  {
    "text": "space applications so they use this",
    "start": "461440",
    "end": "463319"
  },
  {
    "text": "helper uh but because it's protected uh",
    "start": "463319",
    "end": "466759"
  },
  {
    "text": "they um they asked to introduce a new",
    "start": "466759",
    "end": "469520"
  },
  {
    "text": "helper which is BPF prob right user",
    "start": "469520",
    "end": "472199"
  },
  {
    "text": "registered uh where the applications",
    "start": "472199",
    "end": "474560"
  },
  {
    "text": "kind of register memory regions which",
    "start": "474560",
    "end": "476720"
  },
  {
    "text": "are safe to write to so it's not the",
    "start": "476720",
    "end": "478800"
  },
  {
    "text": "full virtual address space of the",
    "start": "478800",
    "end": "481280"
  },
  {
    "text": "process but it's something that is",
    "start": "481280",
    "end": "483720"
  },
  {
    "text": "carefully considered by the application",
    "start": "483720",
    "end": "486120"
  },
  {
    "text": "themselves now unfortunately that",
    "start": "486120",
    "end": "489360"
  },
  {
    "text": "particular uh request was not actually",
    "start": "489360",
    "end": "492159"
  },
  {
    "text": "accepted by the colel uh to be added as",
    "start": "492159",
    "end": "494840"
  },
  {
    "text": "a new API or modify the previous API and",
    "start": "494840",
    "end": "499280"
  },
  {
    "text": "um a suggested better fit was maybe use",
    "start": "499280",
    "end": "502000"
  },
  {
    "text": "a BPF Arena which is a very new feature",
    "start": "502000",
    "end": "504520"
  },
  {
    "text": "added since Colonel 6.9 I believe uh",
    "start": "504520",
    "end": "507360"
  },
  {
    "text": "that exists as an option for BP to use",
    "start": "507360",
    "end": "510560"
  },
  {
    "text": "so we explored BPF Arena we said okay",
    "start": "510560",
    "end": "513479"
  },
  {
    "text": "well that BPF Pro right user register",
    "start": "513479",
    "end": "515959"
  },
  {
    "text": "would have worked for us but maybe we",
    "start": "515959",
    "end": "518279"
  },
  {
    "text": "can use BPF Arena so what BPF arena is",
    "start": "518279",
    "end": "521560"
  },
  {
    "text": "it's like a BPF map the ones that we",
    "start": "521560",
    "end": "524120"
  },
  {
    "text": "maybe know and use already but it's a",
    "start": "524120",
    "end": "526959"
  },
  {
    "text": "flat just Heap region with no structure",
    "start": "526959",
    "end": "530440"
  },
  {
    "text": "that the user space and the kernel can",
    "start": "530440",
    "end": "532000"
  },
  {
    "text": "share and write any way they like so",
    "start": "532000",
    "end": "534240"
  },
  {
    "text": "sounds like a pretty good use case right",
    "start": "534240",
    "end": "535920"
  },
  {
    "text": "I mean it is a mem region it's not",
    "start": "535920",
    "end": "538440"
  },
  {
    "text": "formatted in any way way and whatnot but",
    "start": "538440",
    "end": "542040"
  },
  {
    "text": "the difference here is that in our case",
    "start": "542040",
    "end": "544040"
  },
  {
    "text": "if you look at a picture here it's like",
    "start": "544040",
    "end": "546120"
  },
  {
    "text": "how are we going to use uh this BPF",
    "start": "546120",
    "end": "548240"
  },
  {
    "text": "arena for a go program so the memory",
    "start": "548240",
    "end": "552200"
  },
  {
    "text": "shared by the BPF user space and the BPF",
    "start": "552200",
    "end": "555760"
  },
  {
    "text": "kernel space but what about the user",
    "start": "555760",
    "end": "557600"
  },
  {
    "text": "space application we want to monitor how",
    "start": "557600",
    "end": "560040"
  },
  {
    "text": "do we make that use of the Arena",
    "start": "560040",
    "end": "562480"
  },
  {
    "text": "potentially you can say well maybe we",
    "start": "562480",
    "end": "564640"
  },
  {
    "text": "can make our program the BPF user Space",
    "start": "564640",
    "end": "568880"
  },
  {
    "text": "Program somehow magically make it use",
    "start": "568880",
    "end": "572000"
  },
  {
    "text": "this but at the same time that elevates",
    "start": "572000",
    "end": "574839"
  },
  {
    "text": "the permission because BPF does need",
    "start": "574839",
    "end": "576600"
  },
  {
    "text": "elevated permissions to some extent so",
    "start": "576600",
    "end": "578680"
  },
  {
    "text": "it's not actually a good choice for any",
    "start": "578680",
    "end": "580480"
  },
  {
    "text": "like HTP service running on the web",
    "start": "580480",
    "end": "582480"
  },
  {
    "text": "being also a BPF user Space Program",
    "start": "582480",
    "end": "584880"
  },
  {
    "text": "could potentially be compromised now at",
    "start": "584880",
    "end": "587240"
  },
  {
    "text": "the same time the BPF maps are zeroed",
    "start": "587240",
    "end": "591120"
  },
  {
    "text": "out by default so you can't just put the",
    "start": "591120",
    "end": "594360"
  },
  {
    "text": "hole of go Heap where you want to write",
    "start": "594360",
    "end": "597120"
  },
  {
    "text": "because as soon as you map your go Heap",
    "start": "597120",
    "end": "598600"
  },
  {
    "text": "to the BPF enena it gets whack with zero",
    "start": "598600",
    "end": "601160"
  },
  {
    "text": "so your program crashes therefore not",
    "start": "601160",
    "end": "604079"
  },
  {
    "text": "the use case we we have in this case can",
    "start": "604079",
    "end": "607000"
  },
  {
    "text": "be replace with uh BPF fora would",
    "start": "607000",
    "end": "610680"
  },
  {
    "text": "think yeah so at this point we started",
    "start": "610680",
    "end": "612880"
  },
  {
    "text": "to kind of feel like we were hitting a",
    "start": "612880",
    "end": "614240"
  },
  {
    "text": "roadblock and trying to find a better",
    "start": "614240",
    "end": "615680"
  },
  {
    "text": "alternative to BPF prober user I mean we",
    "start": "615680",
    "end": "618279"
  },
  {
    "text": "looked at you know there is the option",
    "start": "618279",
    "end": "619880"
  },
  {
    "text": "that's available now it doesn't have",
    "start": "619880",
    "end": "621200"
  },
  {
    "text": "great support and we looked at other use",
    "start": "621200",
    "end": "623040"
  },
  {
    "text": "cases that had been publicly proposed um",
    "start": "623040",
    "end": "625920"
  },
  {
    "text": "and then we even started to think about",
    "start": "625920",
    "end": "627279"
  },
  {
    "text": "what if we allocate the entire go Heap",
    "start": "627279",
    "end": "629959"
  },
  {
    "text": "as a memory space um so we start to",
    "start": "629959",
    "end": "632720"
  },
  {
    "text": "think well is this even really a memory",
    "start": "632720",
    "end": "635560"
  },
  {
    "text": "problem so let's take another step back",
    "start": "635560",
    "end": "637160"
  },
  {
    "text": "and like you know Trace context is",
    "start": "637160",
    "end": "638880"
  },
  {
    "text": "fundamentally a network issue they're",
    "start": "638880",
    "end": "641079"
  },
  {
    "text": "propagated by headers on the requests so",
    "start": "641079",
    "end": "644480"
  },
  {
    "text": "um ebpf really supports networking stuff",
    "start": "644480",
    "end": "647480"
  },
  {
    "text": "so uh maybe there's something there that",
    "start": "647480",
    "end": "649279"
  },
  {
    "text": "we can use and so we started to look in",
    "start": "649279",
    "end": "651040"
  },
  {
    "text": "some uh use cases with that yeah so we",
    "start": "651040",
    "end": "654120"
  },
  {
    "text": "mentioned previous slides the BPF uh Pro",
    "start": "654120",
    "end": "656560"
  },
  {
    "text": "SKB right buffer which is a normal way",
    "start": "656560",
    "end": "658880"
  },
  {
    "text": "that at the networking layer either XDP",
    "start": "658880",
    "end": "661880"
  },
  {
    "text": "or traffic control uh you can write",
    "start": "661880",
    "end": "664600"
  },
  {
    "text": "memory there for packets so TCP packets",
    "start": "664600",
    "end": "667560"
  },
  {
    "text": "UDP packets and so on so we said well",
    "start": "667560",
    "end": "670839"
  },
  {
    "text": "maybe we can actually do level four",
    "start": "670839",
    "end": "673959"
  },
  {
    "text": "context propagation and we've prototyped",
    "start": "673959",
    "end": "676000"
  },
  {
    "text": "this so this means is that well we could",
    "start": "676000",
    "end": "679680"
  },
  {
    "text": "potentially encapsulate the trace",
    "start": "679680",
    "end": "681360"
  },
  {
    "text": "context within TCP IP options places",
    "start": "681360",
    "end": "685680"
  },
  {
    "text": "that nobody ever looks at they're not",
    "start": "685680",
    "end": "687839"
  },
  {
    "text": "part of the typical applications stack",
    "start": "687839",
    "end": "689639"
  },
  {
    "text": "there at the networking level of the OS",
    "start": "689639",
    "end": "692079"
  },
  {
    "text": "as long as they make it through to the",
    "start": "692079",
    "end": "693240"
  },
  {
    "text": "other side and you have the agent",
    "start": "693240",
    "end": "694959"
  },
  {
    "text": "running on all sides then you can",
    "start": "694959",
    "end": "697000"
  },
  {
    "text": "extract the context when you when the",
    "start": "697000",
    "end": "698680"
  },
  {
    "text": "packet arrives providing it to the other",
    "start": "698680",
    "end": "701000"
  },
  {
    "text": "side allowing the tracing to work so",
    "start": "701000",
    "end": "704560"
  },
  {
    "text": "it's kind of cool idea but it has some",
    "start": "704560",
    "end": "707360"
  },
  {
    "text": "drawbacks well one thing is that uh",
    "start": "707360",
    "end": "711079"
  },
  {
    "text": "these TCP packets uh they have to be you",
    "start": "711079",
    "end": "714639"
  },
  {
    "text": "know like read and written by the same",
    "start": "714639",
    "end": "717519"
  },
  {
    "text": "program otherwise it doesn't work which",
    "start": "717519",
    "end": "719320"
  },
  {
    "text": "means there's no interoperability",
    "start": "719320",
    "end": "721680"
  },
  {
    "text": "between us and the open Telemetry as the",
    "start": "721680",
    "end": "724360"
  },
  {
    "text": "case which sort of defeats the purpose",
    "start": "724360",
    "end": "726399"
  },
  {
    "text": "like we're open Telemetry but yeah we",
    "start": "726399",
    "end": "728279"
  },
  {
    "text": "can give the data to another open",
    "start": "728279",
    "end": "730320"
  },
  {
    "text": "Telemetry instrument application and",
    "start": "730320",
    "end": "732959"
  },
  {
    "text": "obviously any level seven proxies which",
    "start": "732959",
    "end": "735199"
  },
  {
    "text": "replay packets discard the original",
    "start": "735199",
    "end": "737320"
  },
  {
    "text": "packets start a new one like load",
    "start": "737320",
    "end": "738839"
  },
  {
    "text": "balancer or something like that it will",
    "start": "738839",
    "end": "740639"
  },
  {
    "text": "not work unless those are instrumented",
    "start": "740639",
    "end": "743240"
  },
  {
    "text": "as well with the same sort of",
    "start": "743240",
    "end": "745680"
  },
  {
    "text": "approach so not an ideal solution so",
    "start": "745680",
    "end": "748440"
  },
  {
    "text": "then we looked at some else um so we",
    "start": "748440",
    "end": "751120"
  },
  {
    "text": "said well if we kind of have this",
    "start": "751120",
    "end": "753040"
  },
  {
    "text": "limitation about level four context",
    "start": "753040",
    "end": "755560"
  },
  {
    "text": "propagation because we have all this",
    "start": "755560",
    "end": "757160"
  },
  {
    "text": "requirements can we actually inject this",
    "start": "757160",
    "end": "760600"
  },
  {
    "text": "uh Trace context information using at",
    "start": "760600",
    "end": "763920"
  },
  {
    "text": "level seven so HTTP maybe we can add",
    "start": "763920",
    "end": "766519"
  },
  {
    "text": "this header ourselves so uh initial",
    "start": "766519",
    "end": "769240"
  },
  {
    "text": "prototype for this actually worked fully",
    "start": "769240",
    "end": "771720"
  },
  {
    "text": "at uh the traffic control level with",
    "start": "771720",
    "end": "774480"
  },
  {
    "text": "Linux traffic control and but that was",
    "start": "774480",
    "end": "776920"
  },
  {
    "text": "actually pretty nasty because we had to",
    "start": "776920",
    "end": "778600"
  },
  {
    "text": "make sure that that the sequence numbers",
    "start": "778600",
    "end": "780480"
  },
  {
    "text": "and the ACT numbers are properly",
    "start": "780480",
    "end": "782160"
  },
  {
    "text": "adjusted across uh the P like when we",
    "start": "782160",
    "end": "786079"
  },
  {
    "text": "actually cheat about the sequence number",
    "start": "786079",
    "end": "788199"
  },
  {
    "text": "we have to cheat it back and reverse it",
    "start": "788199",
    "end": "790040"
  },
  {
    "text": "and so on which wasn't ideal it worked",
    "start": "790040",
    "end": "792959"
  },
  {
    "text": "however restarting the profiling the",
    "start": "792959",
    "end": "795160"
  },
  {
    "text": "monitoring agent here would have",
    "start": "795160",
    "end": "796680"
  },
  {
    "text": "actually break existing connections",
    "start": "796680",
    "end": "798760"
  },
  {
    "text": "which is not an ideal solution but then",
    "start": "798760",
    "end": "801240"
  },
  {
    "text": "we discovered that we can actually have",
    "start": "801240",
    "end": "803040"
  },
  {
    "text": "a different program type which is this",
    "start": "803040",
    "end": "805120"
  },
  {
    "text": "SK message that is used for monitoring",
    "start": "805120",
    "end": "807760"
  },
  {
    "text": "sockets where we can actually actually",
    "start": "807760",
    "end": "809959"
  },
  {
    "text": "push the data there's an API that was",
    "start": "809959",
    "end": "812320"
  },
  {
    "text": "contributed by cloudflare I believe that",
    "start": "812320",
    "end": "814560"
  },
  {
    "text": "can actually space the packet before it",
    "start": "814560",
    "end": "816480"
  },
  {
    "text": "reaches the TCP stack and then we use",
    "start": "816480",
    "end": "818519"
  },
  {
    "text": "traffic control to write this actually",
    "start": "818519",
    "end": "820360"
  },
  {
    "text": "works well except it uh with encryption",
    "start": "820360",
    "end": "824959"
  },
  {
    "text": "it doesn't work because at the end of",
    "start": "824959",
    "end": "826600"
  },
  {
    "text": "the day we have to see this data",
    "start": "826600",
    "end": "829279"
  },
  {
    "text": "unencrypted to know where to add our",
    "start": "829279",
    "end": "831399"
  },
  {
    "text": "Trace parent sort of Trace context right",
    "start": "831399",
    "end": "834720"
  },
  {
    "text": "which was not the case where we had the",
    "start": "834720",
    "end": "836600"
  },
  {
    "text": "ability to write memory at go level",
    "start": "836600",
    "end": "838800"
  },
  {
    "text": "because we write the memory before even",
    "start": "838800",
    "end": "840800"
  },
  {
    "text": "the the SSL or TLS layer in the gold",
    "start": "840800",
    "end": "843839"
  },
  {
    "text": "libraries takes over so at higher level",
    "start": "843839",
    "end": "847800"
  },
  {
    "text": "it was a bit easier to work around these",
    "start": "847800",
    "end": "849639"
  },
  {
    "text": "problems yeah and so on that note we",
    "start": "849639",
    "end": "851959"
  },
  {
    "text": "thought you know moving even further",
    "start": "851959",
    "end": "854519"
  },
  {
    "text": "away from the network level um if we",
    "start": "854519",
    "end": "857079"
  },
  {
    "text": "wrote some sort of like sidecar agent",
    "start": "857079",
    "end": "859680"
  },
  {
    "text": "that could you know act as almost a",
    "start": "859680",
    "end": "861839"
  },
  {
    "text": "Gateway router um for all the requests",
    "start": "861839",
    "end": "864720"
  },
  {
    "text": "that are going in and out of a pod then",
    "start": "864720",
    "end": "866639"
  },
  {
    "text": "we could handle the uh the headers at",
    "start": "866639",
    "end": "869399"
  },
  {
    "text": "the user Space level without having to",
    "start": "869399",
    "end": "871519"
  },
  {
    "text": "worry about encryption um but obviously",
    "start": "871519",
    "end": "873959"
  },
  {
    "text": "this adds its own levels of complexity",
    "start": "873959",
    "end": "876959"
  },
  {
    "text": "um you'd have to make the networking",
    "start": "876959",
    "end": "879000"
  },
  {
    "text": "updates to make sure that all your",
    "start": "879000",
    "end": "880240"
  },
  {
    "text": "requests are passing through this",
    "start": "880240",
    "end": "881680"
  },
  {
    "text": "Gateway agent and it also adds more hops",
    "start": "881680",
    "end": "884240"
  },
  {
    "text": "per um requests that go through it so uh",
    "start": "884240",
    "end": "888160"
  },
  {
    "text": "yeah we've gone further and further away",
    "start": "888160",
    "end": "890320"
  },
  {
    "text": "from the uh you know original question",
    "start": "890320",
    "end": "893399"
  },
  {
    "text": "of using ebpf to write memory to the",
    "start": "893399",
    "end": "895680"
  },
  {
    "text": "point where now we're even asking",
    "start": "895680",
    "end": "897079"
  },
  {
    "text": "ourselves do we need to use ebpf for",
    "start": "897079",
    "end": "900040"
  },
  {
    "text": "this at all um you know we are we trying",
    "start": "900040",
    "end": "903320"
  },
  {
    "text": "to just force ebpf too hard for this it",
    "start": "903320",
    "end": "905639"
  },
  {
    "text": "would be really nice it makes the most",
    "start": "905639",
    "end": "907079"
  },
  {
    "text": "sense because of go residing on the",
    "start": "907079",
    "end": "909360"
  },
  {
    "text": "colel or on the host um so what other",
    "start": "909360",
    "end": "913160"
  },
  {
    "text": "options do we have besides using evf to",
    "start": "913160",
    "end": "915160"
  },
  {
    "text": "do this I'm just trying to cover all of",
    "start": "915160",
    "end": "916720"
  },
  {
    "text": "our bases yeah so maybe we thought EF",
    "start": "916720",
    "end": "920199"
  },
  {
    "text": "school this is why we would implement",
    "start": "920199",
    "end": "921639"
  },
  {
    "text": "this so we thought well maybe we use the",
    "start": "921639",
    "end": "923680"
  },
  {
    "text": "standard approach how people used to do",
    "start": "923680",
    "end": "925360"
  },
  {
    "text": "this in the past use uh library",
    "start": "925360",
    "end": "927399"
  },
  {
    "text": "interpositioning on Linux where you can",
    "start": "927399",
    "end": "929199"
  },
  {
    "text": "kind of hijack resistant",
    "start": "929199",
    "end": "931120"
  },
  {
    "text": "calls um if they're in a shared Library",
    "start": "931120",
    "end": "934319"
  },
  {
    "text": "so pre-load your version that as an",
    "start": "934319",
    "end": "937000"
  },
  {
    "text": "example here we have SSL right or SSL",
    "start": "937000",
    "end": "939800"
  },
  {
    "text": "read um that you can kind of just change",
    "start": "939800",
    "end": "942319"
  },
  {
    "text": "to be doing your own logic rather than",
    "start": "942319",
    "end": "945279"
  },
  {
    "text": "anything else and if the application",
    "start": "945279",
    "end": "948319"
  },
  {
    "text": "actually doesn't use a shared library",
    "start": "948319",
    "end": "949839"
  },
  {
    "text": "but is statically linked then we have to",
    "start": "949839",
    "end": "951560"
  },
  {
    "text": "use some sort of level of patching uh",
    "start": "951560",
    "end": "953920"
  },
  {
    "text": "change the code uh stop the application",
    "start": "953920",
    "end": "956399"
  },
  {
    "text": "and so on which is you know how I things",
    "start": "956399",
    "end": "959279"
  },
  {
    "text": "work and um yeah this does work to some",
    "start": "959279",
    "end": "963360"
  },
  {
    "text": "extent however it doesn't have all of",
    "start": "963360",
    "end": "965519"
  },
  {
    "text": "the benefits that we get with evf which",
    "start": "965519",
    "end": "967639"
  },
  {
    "text": "is why we chose in the first place um we",
    "start": "967639",
    "end": "970880"
  },
  {
    "text": "have to use all this logic and write all",
    "start": "970880",
    "end": "972800"
  },
  {
    "text": "this stuff at the same time cleanup is",
    "start": "972800",
    "end": "974519"
  },
  {
    "text": "not actually nearly as easy as you know",
    "start": "974519",
    "end": "977079"
  },
  {
    "text": "shutting down you probe and have the uh",
    "start": "977079",
    "end": "979880"
  },
  {
    "text": "the kernel support just simply whack",
    "start": "979880",
    "end": "981800"
  },
  {
    "text": "them for you and unload everything it's",
    "start": "981800",
    "end": "983680"
  },
  {
    "text": "kind of nice doesn't destabilize",
    "start": "983680",
    "end": "985600"
  },
  {
    "text": "anything and um you know statically",
    "start": "985600",
    "end": "988480"
  },
  {
    "text": "linked code is difficult to patch",
    "start": "988480",
    "end": "991199"
  },
  {
    "text": "fortunately there is this Library fre",
    "start": "991199",
    "end": "992880"
  },
  {
    "text": "core that everybody likes using um and",
    "start": "992880",
    "end": "995480"
  },
  {
    "text": "it's pretty cool but having said that is",
    "start": "995480",
    "end": "998199"
  },
  {
    "text": "not as nearly as easy as actually have",
    "start": "998199",
    "end": "1000040"
  },
  {
    "text": "an ebpf uh do this for us um so then we",
    "start": "1000040",
    "end": "1004920"
  },
  {
    "text": "found this at project it's called BPF",
    "start": "1004920",
    "end": "1007199"
  },
  {
    "text": "time um and it's actually a user space",
    "start": "1007199",
    "end": "1011040"
  },
  {
    "text": "implementation of the of the ebpf uh",
    "start": "1011040",
    "end": "1015880"
  },
  {
    "text": "parts of the ebpf that can be in user",
    "start": "1015880",
    "end": "1017639"
  },
  {
    "text": "space for example you approach it do",
    "start": "1017639",
    "end": "1019519"
  },
  {
    "text": "done in user space some Trace points I",
    "start": "1019519",
    "end": "1022160"
  },
  {
    "text": "believe um obviously none of the kernel",
    "start": "1022160",
    "end": "1025038"
  },
  {
    "text": "stuff like kros and so on and this",
    "start": "1025039",
    "end": "1027120"
  },
  {
    "text": "actually works well if people are",
    "start": "1027120",
    "end": "1028558"
  },
  {
    "text": "willing to accept that this is not going",
    "start": "1028559",
    "end": "1030000"
  },
  {
    "text": "to run their usual uh BPF runtime that",
    "start": "1030000",
    "end": "1033079"
  },
  {
    "text": "every loves and uses uh you can still",
    "start": "1033079",
    "end": "1036120"
  },
  {
    "text": "run through the verifier and so on but",
    "start": "1036120",
    "end": "1037720"
  },
  {
    "text": "we have to understand that this is",
    "start": "1037720",
    "end": "1039038"
  },
  {
    "text": "actually a very different runtime at all",
    "start": "1039039",
    "end": "1042520"
  },
  {
    "text": "uh which comes with a own set of",
    "start": "1042520",
    "end": "1044000"
  },
  {
    "text": "problems are people willing to run that",
    "start": "1044000",
    "end": "1046880"
  },
  {
    "text": "you know um and it's great for testing",
    "start": "1046880",
    "end": "1049600"
  },
  {
    "text": "though um having something that's easy",
    "start": "1049600",
    "end": "1051520"
  },
  {
    "text": "to uh kind of manipulate in user space",
    "start": "1051520",
    "end": "1055120"
  },
  {
    "text": "uh this is kind of where it all came",
    "start": "1055120",
    "end": "1057360"
  },
  {
    "text": "full full circle for us because we",
    "start": "1057360",
    "end": "1059240"
  },
  {
    "text": "started with a pretty simple problem",
    "start": "1059240",
    "end": "1061039"
  },
  {
    "text": "that seemed like ebpf could solve um",
    "start": "1061039",
    "end": "1063440"
  },
  {
    "text": "just updating these headers in the user",
    "start": "1063440",
    "end": "1065400"
  },
  {
    "text": "space before they go out on a request",
    "start": "1065400",
    "end": "1067280"
  },
  {
    "text": "and then we looked at doing it further",
    "start": "1067280",
    "end": "1069200"
  },
  {
    "text": "at the network level to fit within ebpf",
    "start": "1069200",
    "end": "1071120"
  },
  {
    "text": "and then we looked at not even using",
    "start": "1071120",
    "end": "1072360"
  },
  {
    "text": "ebpf and just trying to patch those",
    "start": "1072360",
    "end": "1074160"
  },
  {
    "text": "libraries in ultimately coming back to",
    "start": "1074160",
    "end": "1076760"
  },
  {
    "text": "using a user space re implementation of",
    "start": "1076760",
    "end": "1079880"
  },
  {
    "text": "ebpf that we've gone so far from the",
    "start": "1079880",
    "end": "1081960"
  },
  {
    "text": "original ebpf that we're still using it",
    "start": "1081960",
    "end": "1084840"
  },
  {
    "text": "um so uh that kind of left us thinking",
    "start": "1084840",
    "end": "1088760"
  },
  {
    "text": "like you know just re reanalyzing this",
    "start": "1088760",
    "end": "1091360"
  },
  {
    "text": "whole problem saying like so we want to",
    "start": "1091360",
    "end": "1093559"
  },
  {
    "text": "write memory with ebpf um it's possible",
    "start": "1093559",
    "end": "1097240"
  },
  {
    "text": "you can do it uh but the problems are",
    "start": "1097240",
    "end": "1099960"
  },
  {
    "text": "that the current best options in ebpf",
    "start": "1099960",
    "end": "1103760"
  },
  {
    "text": "lack a lot of strong Upstream support",
    "start": "1103760",
    "end": "1105520"
  },
  {
    "text": "using this probe right user helper isn't",
    "start": "1105520",
    "end": "1107840"
  },
  {
    "text": "really uh supported and encouraged um",
    "start": "1107840",
    "end": "1111840"
  },
  {
    "text": "but all the Alternatives that are",
    "start": "1111840",
    "end": "1113320"
  },
  {
    "text": "available and we think we've gone",
    "start": "1113320",
    "end": "1114640"
  },
  {
    "text": "through a lot of them have their own",
    "start": "1114640",
    "end": "1116200"
  },
  {
    "text": "tradeoffs and both in security and just",
    "start": "1116200",
    "end": "1118720"
  },
  {
    "text": "the general user experience you know the",
    "start": "1118720",
    "end": "1120320"
  },
  {
    "text": "further you get from that like native",
    "start": "1120320",
    "end": "1122280"
  },
  {
    "text": "ebpf experience um the more you lose",
    "start": "1122280",
    "end": "1125159"
  },
  {
    "text": "like the benefits of ebpf that kernel",
    "start": "1125159",
    "end": "1127120"
  },
  {
    "text": "portability it's you know available by",
    "start": "1127120",
    "end": "1129159"
  },
  {
    "text": "default everywhere um the verifier",
    "start": "1129159",
    "end": "1132200"
  },
  {
    "text": "making sure that your program is safe um",
    "start": "1132200",
    "end": "1135039"
  },
  {
    "text": "and so it it's really you know I put",
    "start": "1135039",
    "end": "1137400"
  },
  {
    "text": "this um Captain America meme up there",
    "start": "1137400",
    "end": "1139720"
  },
  {
    "text": "because it's you know so you want to",
    "start": "1139720",
    "end": "1141520"
  },
  {
    "text": "write memory with ebpf but he also says",
    "start": "1141520",
    "end": "1143440"
  },
  {
    "text": "in this scene that I noticed the only",
    "start": "1143440",
    "end": "1145520"
  },
  {
    "text": "way to really be cool with this is to",
    "start": "1145520",
    "end": "1148320"
  },
  {
    "text": "follow the rules which you know if what",
    "start": "1148320",
    "end": "1150120"
  },
  {
    "text": "we're talking about was um really",
    "start": "1150120",
    "end": "1152520"
  },
  {
    "text": "supported and available in the colel it",
    "start": "1152520",
    "end": "1155640"
  },
  {
    "text": "would be much cooler to do um so that's",
    "start": "1155640",
    "end": "1159640"
  },
  {
    "text": "kind of where we sit we went through all",
    "start": "1159640",
    "end": "1161000"
  },
  {
    "text": "these Alternatives and we have a couple",
    "start": "1161000",
    "end": "1162400"
  },
  {
    "text": "plausible options uh we don't have a",
    "start": "1162400",
    "end": "1164520"
  },
  {
    "text": "strong answer for it but kind of looking",
    "start": "1164520",
    "end": "1166400"
  },
  {
    "text": "ahead for what this means for us and",
    "start": "1166400",
    "end": "1168760"
  },
  {
    "text": "just for ebpf in general we're wondering",
    "start": "1168760",
    "end": "1171320"
  },
  {
    "text": "if there are more valid use cases for",
    "start": "1171320",
    "end": "1173520"
  },
  {
    "text": "being able to write to user space memory",
    "start": "1173520",
    "end": "1175400"
  },
  {
    "text": "in ebpf and we think so um at least",
    "start": "1175400",
    "end": "1178080"
  },
  {
    "text": "because we think our use case is valid",
    "start": "1178080",
    "end": "1180520"
  },
  {
    "text": "uh but up until this point there hasn't",
    "start": "1180520",
    "end": "1183000"
  },
  {
    "text": "been a lot of vocal um you know solid",
    "start": "1183000",
    "end": "1185640"
  },
  {
    "text": "use cases for it uh but potentially",
    "start": "1185640",
    "end": "1188520"
  },
  {
    "text": "could there be someday as ebpf grows and",
    "start": "1188520",
    "end": "1190559"
  },
  {
    "text": "if there are how would this be addressed",
    "start": "1190559",
    "end": "1193480"
  },
  {
    "text": "in a way that is you know strong",
    "start": "1193480",
    "end": "1195679"
  },
  {
    "text": "supportable reliable um you know it",
    "start": "1195679",
    "end": "1199080"
  },
  {
    "text": "seems like something where you're",
    "start": "1199080",
    "end": "1200480"
  },
  {
    "text": "coordinating between uh the ebpf program",
    "start": "1200480",
    "end": "1203760"
  },
  {
    "text": "and the user space program is kind of a",
    "start": "1203760",
    "end": "1205600"
  },
  {
    "text": "theme that has come up um with the BPF",
    "start": "1205600",
    "end": "1208520"
  },
  {
    "text": "probe right or the registered right user",
    "start": "1208520",
    "end": "1211000"
  },
  {
    "text": "call um the BPF Arena both kind of",
    "start": "1211000",
    "end": "1213400"
  },
  {
    "text": "defining safe areas to do it could be",
    "start": "1213400",
    "end": "1216120"
  },
  {
    "text": "something like that in general the",
    "start": "1216120",
    "end": "1218080"
  },
  {
    "text": "question that we have that's leaving us",
    "start": "1218080",
    "end": "1219400"
  },
  {
    "text": "like scratching our heads is how can we",
    "start": "1219400",
    "end": "1221080"
  },
  {
    "text": "build stronger native support for this",
    "start": "1221080",
    "end": "1223600"
  },
  {
    "text": "into the colonel um and the community",
    "start": "1223600",
    "end": "1226080"
  },
  {
    "text": "itself so um kind of want wrap up with",
    "start": "1226080",
    "end": "1229919"
  },
  {
    "text": "those questions for you um yeah that's",
    "start": "1229919",
    "end": "1233360"
  },
  {
    "text": "that's really all we had toh talk about",
    "start": "1233360",
    "end": "1235720"
  },
  {
    "text": "this is our journey with this um if you",
    "start": "1235720",
    "end": "1237720"
  },
  {
    "text": "have any questions feel free to join us",
    "start": "1237720",
    "end": "1239840"
  },
  {
    "text": "on any of these slack channels or I",
    "start": "1239840",
    "end": "1241280"
  },
  {
    "text": "think we probably have a couple minutes",
    "start": "1241280",
    "end": "1242679"
  },
  {
    "text": "to take some questions now too but uh",
    "start": "1242679",
    "end": "1245400"
  },
  {
    "text": "thank you",
    "start": "1245400",
    "end": "1248159"
  }
]