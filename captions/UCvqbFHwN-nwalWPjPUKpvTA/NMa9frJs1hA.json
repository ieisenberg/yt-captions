[
  {
    "text": "welcome thanks for for joining me this afternoon my name is Danny and Hanson",
    "start": "60",
    "end": "5069"
  },
  {
    "text": "I'm a software engineer with Cisco contributor to COO kubernetes and",
    "start": "5069",
    "end": "10490"
  },
  {
    "text": "recently I've dove into sto have learned",
    "start": "10490",
    "end": "15690"
  },
  {
    "text": "a few things and thought it would be a good idea to share what I've learned with everyone um so let's uh let's get",
    "start": "15690",
    "end": "24330"
  },
  {
    "text": "this party started and just a quick level set for everyone",
    "start": "24330",
    "end": "30560"
  },
  {
    "text": "this is a deep dive so I'm not gonna be covering the high-level components and",
    "start": "30560",
    "end": "36239"
  },
  {
    "text": "what is tio is all about so if this is your first is tio session which I would be surprised this is probably not the",
    "start": "36239",
    "end": "43680"
  },
  {
    "text": "best introduction is tio for you but I want to make a quick reference to the sample application that I have running",
    "start": "43680",
    "end": "50430"
  },
  {
    "text": "in my Sto mesh if you've messed around Wistia or looked at the docs you've",
    "start": "50430",
    "end": "56910"
  },
  {
    "text": "probably seen this application called book info so quickly it is made up of",
    "start": "56910",
    "end": "62489"
  },
  {
    "text": "several micro services a product page front-end a detailed service rating",
    "start": "62489",
    "end": "68159"
  },
  {
    "text": "service and a review service that consists of multiple versions of that",
    "start": "68159",
    "end": "73979"
  },
  {
    "text": "service so each versions running a separate pod b1 shows no stars v2 shows black stars",
    "start": "73979",
    "end": "82009"
  },
  {
    "text": "v3 shows red stars it's the architecture right SEO is made up of a control plane",
    "start": "82009",
    "end": "89729"
  },
  {
    "text": "and a data flight right and so the control plane consists",
    "start": "89729",
    "end": "94880"
  },
  {
    "text": "consists of components called a mixer a pilot and the CA also references sto",
    "start": "94880",
    "end": "103500"
  },
  {
    "text": "security or ISTE OAuth and then the data plane consists of an enhanced version of",
    "start": "103500",
    "end": "110100"
  },
  {
    "text": "the Envoy proxy so if if you've been any",
    "start": "110100",
    "end": "118079"
  },
  {
    "text": "video sessions you know that this Envoy proxy gets deployed with every pod",
    "start": "118079",
    "end": "124680"
  },
  {
    "text": "within within your cluster right so to do that you can either do a manual",
    "start": "124680",
    "end": "131670"
  },
  {
    "text": "injection of that pod this is an example that actually creates the necessary resources within your manifest",
    "start": "131670",
    "end": "139860"
  },
  {
    "text": "on-the-fly right so you're another option is to use an initializer so starting with",
    "start": "139860",
    "end": "147750"
  },
  {
    "text": "kubernetes 1.7 there's this concept of an initializer if you're unfamiliar with",
    "start": "147750",
    "end": "154530"
  },
  {
    "text": "what an initializer is it really consists of two components one is pre initially initialization tasks that need",
    "start": "154530",
    "end": "161910"
  },
  {
    "text": "to be met before actually running containers that make up your pod as well",
    "start": "161910",
    "end": "167010"
  },
  {
    "text": "as initially and then as initialization controller that's responsible for",
    "start": "167010",
    "end": "172769"
  },
  {
    "text": "actually implementing those tasks and here are a couple flags that you would",
    "start": "172769",
    "end": "179370"
  },
  {
    "text": "need to enable on your kubernetes api server to to run the initialization",
    "start": "179370",
    "end": "185130"
  },
  {
    "text": "controller all right and the initialization controllers is a type of dynamic admission controller if you",
    "start": "185130",
    "end": "191580"
  },
  {
    "text": "think of an admission controller it really sits between when when an API",
    "start": "191580",
    "end": "197340"
  },
  {
    "text": "request comes into Kuby API server gets authenticated this piece of code this",
    "start": "197340",
    "end": "202920"
  },
  {
    "text": "admission controller gets called before actually persisting the object so if I",
    "start": "202920",
    "end": "210120"
  },
  {
    "text": "go ahead and say create deployment after that create deployment is authenticated",
    "start": "210120",
    "end": "215910"
  },
  {
    "text": "the initialization controller gets called so let's take a look at an",
    "start": "215910",
    "end": "222650"
  },
  {
    "text": "initializer pod and config you could see",
    "start": "222650",
    "end": "227850"
  },
  {
    "text": "in my cluster it's a simple development cluster got a master in a node you can",
    "start": "227850",
    "end": "235049"
  },
  {
    "text": "see the pods that are running in the ISTE au system namespace I have the",
    "start": "235049",
    "end": "243150"
  },
  {
    "text": "control plane components the CA the mixer the pilot a few additional",
    "start": "243150",
    "end": "249660"
  },
  {
    "text": "optional control plane components of the initializer which we've been talking about as well as an ingress and we'll",
    "start": "249660",
    "end": "255660"
  },
  {
    "text": "talk more about this but let's take a look at the initializer really quick okay and when you do a coop huddle get",
    "start": "255660",
    "end": "263030"
  },
  {
    "text": "Pio the initializer the sto namespace and then output it to llamo",
    "start": "263030",
    "end": "272300"
  },
  {
    "text": "and so one of the things to to go ahead and point out is that this initializer",
    "start": "278039",
    "end": "283740"
  },
  {
    "text": "is essentially a proxy or is it here I'm",
    "start": "283740",
    "end": "297270"
  },
  {
    "text": "sorry the initializer is simply a web server that's listening on port 80 83",
    "start": "297270",
    "end": "304159"
  },
  {
    "text": "and there's a couple things that I want to point out as well so there's a configuration that gets mounted at Etsy",
    "start": "304159",
    "end": "312509"
  },
  {
    "text": "sto config and so that configuration",
    "start": "312509",
    "end": "322020"
  },
  {
    "text": "actually comes from a config map you see config map here alright so let's look at",
    "start": "322020",
    "end": "327599"
  },
  {
    "text": "the config map",
    "start": "327599",
    "end": "330319"
  },
  {
    "text": "so this config map tells the initializer",
    "start": "350120",
    "end": "356060"
  },
  {
    "text": "a few things what image to use for the Annette and the proxy containers another important",
    "start": "356060",
    "end": "364550"
  },
  {
    "text": "piece I want to point out is that it actually daisy chains additional configuration components for the mesh",
    "start": "364550",
    "end": "371540"
  },
  {
    "text": "wide configuration using a config map alright so let's look at this config map really quickly as well and so again this",
    "start": "371540",
    "end": "383270"
  },
  {
    "text": "is the the mesh wide configuration do we want to enable mutual TLS this is for the control plane there's also a mutual",
    "start": "383270",
    "end": "390200"
  },
  {
    "text": "TLS option for the data plane so that the so that the proxies use TLS as they",
    "start": "390200",
    "end": "396290"
  },
  {
    "text": "communicate with one another do wanna enable tracing again you could use the",
    "start": "396290",
    "end": "402229"
  },
  {
    "text": "links that I provided to go through this in more detail provides things like how",
    "start": "402229",
    "end": "408530"
  },
  {
    "text": "do I reach a discovery address what's the address for Zipkin if I'm using",
    "start": "408530",
    "end": "413650"
  },
  {
    "text": "distributed tracing so on and so forth",
    "start": "413650",
    "end": "418060"
  },
  {
    "text": "let's look at the initializer logs right so that's basically an HTTP server listening on port 80 83 and here's a",
    "start": "422139",
    "end": "431270"
  },
  {
    "text": "configuration you see some of those configuration components that I pointed out right telling the initializer when",
    "start": "431270",
    "end": "436370"
  },
  {
    "text": "it initializes these these proxies here's the init and the proxy image that",
    "start": "436370",
    "end": "443750"
  },
  {
    "text": "I want you to use and one thing that I neglected to point out when we looked at",
    "start": "443750",
    "end": "449840"
  },
  {
    "text": "the pod let me let me just jump back there really quick and",
    "start": "449840",
    "end": "454479"
  },
  {
    "text": "so here is one of the application",
    "start": "467060",
    "end": "472300"
  },
  {
    "text": "containers running or the application pods it's made up of multiple containers",
    "start": "472300",
    "end": "478490"
  },
  {
    "text": "okay we've got our app container this one's the details you see that there's a",
    "start": "478490",
    "end": "485270"
  },
  {
    "text": "proxy container that's running in the details pod but there's also this an it",
    "start": "485270",
    "end": "490430"
  },
  {
    "text": "container that's running in the pod right and so when you look at the qu",
    "start": "490430",
    "end": "498470"
  },
  {
    "text": "cuddle get pods you only see two pods",
    "start": "498470",
    "end": "504890"
  },
  {
    "text": "running right if we weren't running an is Co mesh we would only see one pod one",
    "start": "504890",
    "end": "511700"
  },
  {
    "text": "container within the pod running but we actually see two containers within each of these pods running that's because not",
    "start": "511700",
    "end": "517849"
  },
  {
    "text": "only do we have that app container running in this example it's the details container but we also have the proxy",
    "start": "517850",
    "end": "527200"
  },
  {
    "text": "there's one other container that actually gets started it's just an it container but if you notice it actually",
    "start": "527200",
    "end": "533660"
  },
  {
    "text": "gets terminated this init container is part of that initialization right there's some things that we need to do",
    "start": "533660",
    "end": "539620"
  },
  {
    "text": "before actually running the proxy and the app container and what this init container does is it goes into IP tables",
    "start": "539620",
    "end": "546820"
  },
  {
    "text": "all right within the pot not the actual node or a host goes in there and says",
    "start": "546820",
    "end": "551900"
  },
  {
    "text": "redirect all inbound and outbound traffic to the proxy container and",
    "start": "551900",
    "end": "558860"
  },
  {
    "text": "that's exactly how the the Envoy proxy is able to intercept all traffic between",
    "start": "558860",
    "end": "565640"
  },
  {
    "text": "your app container and the rest of your service mesh and vice versa",
    "start": "565640",
    "end": "571690"
  },
  {
    "text": "and so I made mention that you know we",
    "start": "575780",
    "end": "581220"
  },
  {
    "text": "can use this initializer to automatically inject these sidecar pods but you can be granular on how you want",
    "start": "581220",
    "end": "587220"
  },
  {
    "text": "to do that and there's actually an initialization config that you go ahead and you say hey here's the API groups",
    "start": "587220",
    "end": "593610"
  },
  {
    "text": "that I want to use here's the type of objects that I want to use for",
    "start": "593610",
    "end": "599270"
  },
  {
    "text": "initializing for doing this initialization and if you see here I",
    "start": "599270",
    "end": "604740"
  },
  {
    "text": "point out deployment right if you look at any of the book info examples deployments are used for for deploying",
    "start": "604740",
    "end": "612060"
  },
  {
    "text": "the applications and so we see the the supported kinds we actually use an",
    "start": "612060",
    "end": "619230"
  },
  {
    "text": "initializer config to say here's what I want the type of resources that I want",
    "start": "619230",
    "end": "624870"
  },
  {
    "text": "to use for this pre initialization and",
    "start": "624870",
    "end": "629970"
  },
  {
    "text": "take a look here right well here's a kind deployment but it says false right",
    "start": "629970",
    "end": "635220"
  },
  {
    "text": "so what we do is we actually say within the deployment manifest we can use",
    "start": "635220",
    "end": "641610"
  },
  {
    "text": "annotations to say hey I don't want this deployment to be to be initialized with",
    "start": "641610",
    "end": "648930"
  },
  {
    "text": "a sidecar proxy but in this example with my book info services you see that the",
    "start": "648930",
    "end": "655140"
  },
  {
    "text": "side cars are actually getting initialized let's see so pod details for",
    "start": "655140",
    "end": "664950"
  },
  {
    "text": "the Envoy sidecar let's go back here again and look at this and we'll use the",
    "start": "664950",
    "end": "671400"
  },
  {
    "text": "details pod for example and I showed you",
    "start": "671400",
    "end": "678750"
  },
  {
    "text": "that there's a three containers - that are running the pod the the proxy as",
    "start": "678750",
    "end": "684330"
  },
  {
    "text": "well as the app container and we",
    "start": "684330",
    "end": "689790"
  },
  {
    "text": "actually pass in arguments to the proxy and we tell you and we basically are saying hey proxy what mode do I want you",
    "start": "689790",
    "end": "696390"
  },
  {
    "text": "to act in I want you to be in the sidecar mode and we'll talk a little bit about another mode but we're passing in",
    "start": "696390",
    "end": "703650"
  },
  {
    "text": "basically the bootstrap configuration of the proxy so the proxy knows hey where's",
    "start": "703650",
    "end": "709100"
  },
  {
    "text": "the path for my configuration file where can I find the binary you know where do",
    "start": "709100",
    "end": "715550"
  },
  {
    "text": "I go for discovery the pilot address so on and so forth and",
    "start": "715550",
    "end": "724699"
  },
  {
    "text": "then let's look at the runtime configuration of the proxy so I can exec",
    "start": "724699",
    "end": "732490"
  },
  {
    "text": "here I'm gonna exit into the details pod and get into the ischial proxy container",
    "start": "732490",
    "end": "740290"
  },
  {
    "text": "and I showed you the path to the configuration file you see here this",
    "start": "740290",
    "end": "746120"
  },
  {
    "text": "revision number and so you know after that bootstrap occurs the Envoy proxy",
    "start": "746120",
    "end": "754190"
  },
  {
    "text": "can now speak to pilot and get its configuration and maintain that",
    "start": "754190",
    "end": "759560"
  },
  {
    "text": "configuration so that as the mesh configuration changes we don't have to go out and reprogram these proxies",
    "start": "759560",
    "end": "767600"
  },
  {
    "text": "alright we push it to the pilot then pilot pushes it out any changes to to",
    "start": "767600",
    "end": "774380"
  },
  {
    "text": "the proxy and and the Envoy proxy supports this hot restart so it's able to change its configuration without",
    "start": "774380",
    "end": "781910"
  },
  {
    "text": "having to to be fully reloaded and so",
    "start": "781910",
    "end": "788680"
  },
  {
    "text": "you're gonna see a lot of those configuration parameters here that were",
    "start": "788680",
    "end": "794510"
  },
  {
    "text": "passed in via the the bootstrap configuration",
    "start": "794510",
    "end": "799360"
  },
  {
    "text": "and so uh you know the envoy proxy has one thing that I want to point out here",
    "start": "804760",
    "end": "811850"
  },
  {
    "text": "is you see this local admin port and address right so now that I'm actually",
    "start": "811850",
    "end": "817730"
  },
  {
    "text": "in the proxy I can go ahead and curl this endpoint and I could see that you",
    "start": "817730",
    "end": "826010"
  },
  {
    "text": "know it has several different end points such as okay listeners I want to here's",
    "start": "826010",
    "end": "835340"
  },
  {
    "text": "all the listeners that this proxy is is listening on and we're gonna pay close attention to this ninety eighty all",
    "start": "835340",
    "end": "842540"
  },
  {
    "text": "right because that's support that this sample book application uses for all those different services that I showed",
    "start": "842540",
    "end": "848720"
  },
  {
    "text": "in the diagram and so since it's since",
    "start": "848720",
    "end": "854660"
  },
  {
    "text": "it has a listener for ninety eighty and all these other listeners the proxy also has routes right so these are our routes",
    "start": "854660",
    "end": "861290"
  },
  {
    "text": "basically saying for this particular listener like ninety eighty I've got a",
    "start": "861290",
    "end": "866570"
  },
  {
    "text": "route table and what you're gonna see here is that there's tons of routes and there's tons of routes on ninety eighty",
    "start": "866570",
    "end": "872630"
  },
  {
    "text": "again because the sample book application all those different components are listening on ninety",
    "start": "872630",
    "end": "878960"
  },
  {
    "text": "eighty right so details is listening on ninety eighty the product page reviews",
    "start": "878960",
    "end": "884660"
  },
  {
    "text": "ratings so on and so forth right so what",
    "start": "884660",
    "end": "890360"
  },
  {
    "text": "we can do now is we can actually look at one of these routes right here's a route we're saying match everything from the",
    "start": "890360",
    "end": "897830"
  },
  {
    "text": "route path and send it out this particular cluster this is the out",
    "start": "897830",
    "end": "908720"
  },
  {
    "text": "details default service cluster and so now what I can do I'm going to copy that",
    "start": "908720",
    "end": "914330"
  },
  {
    "text": "and I can talk to the clusters endpoint on this admin port and what I'm going to",
    "start": "914330",
    "end": "920660"
  },
  {
    "text": "do is just output it to a file so we can grep alright and then we can grep",
    "start": "920660",
    "end": "930700"
  },
  {
    "text": "against clusters all right so it if we put ourselves in",
    "start": "930700",
    "end": "936740"
  },
  {
    "text": "the mind of the proxy we were listening for for those ports we're here in 90 80",
    "start": "936740",
    "end": "942970"
  },
  {
    "text": "requests come in we look up our route and we say oh you're supposed to go to",
    "start": "942970",
    "end": "948770"
  },
  {
    "text": "this cluster well here's the cluster that were that we're seeing for for for",
    "start": "948770",
    "end": "954380"
  },
  {
    "text": "details right so it gives us maximum connections you know all sorts of",
    "start": "954380",
    "end": "960170"
  },
  {
    "text": "settings is this canary no and you're",
    "start": "960170",
    "end": "965930"
  },
  {
    "text": "seeing an end point here too so this is how the proxy knows where to Ford the",
    "start": "965930",
    "end": "972200"
  },
  {
    "text": "traffic so this IP address is the IP address of the details pod",
    "start": "972200",
    "end": "981160"
  },
  {
    "text": "2.69 2.69 well this proxy can do load",
    "start": "995000",
    "end": "1004670"
  },
  {
    "text": "balancing it's not going to do load balancing here because we only have a single end point that the proxy can also",
    "start": "1004670",
    "end": "1009680"
  },
  {
    "text": "do health checking all right so it's doing this active health checking if you've got multiple if you've got",
    "start": "1009680",
    "end": "1016399"
  },
  {
    "text": "multiple endpoints within a cluster right it can you we can it can incorporate any policies we create on",
    "start": "1016399",
    "end": "1022790"
  },
  {
    "text": "how we want to load balance across those endpoints but again in this example we",
    "start": "1022790",
    "end": "1027860"
  },
  {
    "text": "only have a single endpoint so why don't we look at a different cluster and let's look at we set it to the reviews service",
    "start": "1027860",
    "end": "1034668"
  },
  {
    "text": "it has multiple pods in it so we now see that we've got multiple endpoints dot 71",
    "start": "1034669",
    "end": "1041418"
  },
  {
    "text": "72 and dot 73 right and if we have any type of policy again that setup saying I",
    "start": "1041419",
    "end": "1048950"
  },
  {
    "text": "want to load balance based on certain HTTP headers or based on certain labels",
    "start": "1048950",
    "end": "1056150"
  },
  {
    "text": "from kubernetes so on and so forth let's",
    "start": "1056150",
    "end": "1067040"
  },
  {
    "text": "see yeah so I think we covered that as well okay so that was the data plane",
    "start": "1067040",
    "end": "1072470"
  },
  {
    "text": "right and this enhanced version of the Envoy proxy is the key piece to the SEO",
    "start": "1072470",
    "end": "1079490"
  },
  {
    "text": "data plane but now let's talk about the control plane and the first component is pilot all right so pilot is responsible for",
    "start": "1079490",
    "end": "1086360"
  },
  {
    "text": "maintaining the canonical representation of the service model and it's the",
    "start": "1086360",
    "end": "1093380"
  },
  {
    "text": "responsibility of the adapters such as the kubernetes adapter to populate that model accordingly right so with the",
    "start": "1093380",
    "end": "1102080"
  },
  {
    "text": "kubernetes adapter for example the adapter implements a controller that",
    "start": "1102080",
    "end": "1107390"
  },
  {
    "text": "sits there and watches the kubernetes api server for certain resource",
    "start": "1107390",
    "end": "1112640"
  },
  {
    "text": "registrations like deployments like pods and it will take those resources and",
    "start": "1112640",
    "end": "1121130"
  },
  {
    "text": "then populate this model that that pilot maintains accordingly right and what",
    "start": "1121130",
    "end": "1127790"
  },
  {
    "text": "that does is is it allows Pilate to provide kind of an",
    "start": "1127790",
    "end": "1132890"
  },
  {
    "text": "interface that's neutral from any of these adaptors and not really locking you know the mesh down to a specific",
    "start": "1132890",
    "end": "1140500"
  },
  {
    "text": "implementation right and so Annette when that model is populated based on the",
    "start": "1140500",
    "end": "1145700"
  },
  {
    "text": "adapter then it allows us to take that information and push it out to the Envoy",
    "start": "1145700",
    "end": "1151010"
  },
  {
    "text": "proxies you know one of the key features of Pilate is service discovery right so",
    "start": "1151010",
    "end": "1158740"
  },
  {
    "text": "Pilate expects that there's a service registry that exists right like within",
    "start": "1158740",
    "end": "1164290"
  },
  {
    "text": "kubernetes using Kubb dns right and that expectation is that when services are",
    "start": "1164290",
    "end": "1169940"
  },
  {
    "text": "created the registry is updated when services are removed those sir those",
    "start": "1169940",
    "end": "1175610"
  },
  {
    "text": "services are removed from the registry as well right and this allows envoy to",
    "start": "1175610",
    "end": "1182690"
  },
  {
    "text": "dynamically again to dynamically find out which services exist within the mesh",
    "start": "1182690",
    "end": "1188420"
  },
  {
    "text": "and what's neat about envoy is that it doesn't just rely on what it's learning from this service discovery right so it",
    "start": "1188420",
    "end": "1196550"
  },
  {
    "text": "can populate all these different endpoints that we just saw right back here right it can populate all these",
    "start": "1196550",
    "end": "1203600"
  },
  {
    "text": "different endpoints based on that service discovery but again it's also doing this active health checking to",
    "start": "1203600",
    "end": "1208610"
  },
  {
    "text": "each one of those endpoints to ensure that they're healthy right and if they're not it's not going to load",
    "start": "1208610",
    "end": "1213800"
  },
  {
    "text": "balanced traffic to that endpoint so we",
    "start": "1213800",
    "end": "1221059"
  },
  {
    "text": "can take a quick look at the pilot configuration and so the first thing",
    "start": "1221059",
    "end": "1233150"
  },
  {
    "text": "that jumped out at me is well we've got a pilot container but we also have a",
    "start": "1233150",
    "end": "1238520"
  },
  {
    "text": "proxy container right so not only does the Envoy proxy get deployed with our",
    "start": "1238520",
    "end": "1244940"
  },
  {
    "text": "application pods like reviews or ratings but it actually gets deployed with the",
    "start": "1244940",
    "end": "1251960"
  },
  {
    "text": "pilot control plane component as well",
    "start": "1251960",
    "end": "1256179"
  },
  {
    "text": "you'll see here that pilot uses the secret mounts the secret so that it can",
    "start": "1258029",
    "end": "1263509"
  },
  {
    "text": "communicate with kubernetes api server so it's in cluster authentication that",
    "start": "1263509",
    "end": "1270090"
  },
  {
    "text": "occurs since pilot does need to speak to the kubernetes api server you'll see",
    "start": "1270090",
    "end": "1281159"
  },
  {
    "text": "that the cert set c search gets mounted so that the the proxy that gets deployed",
    "start": "1281159",
    "end": "1287759"
  },
  {
    "text": "with pilot is able to do that mutual TLS for the control plane traffic between the Envoy proxies and and pilot or",
    "start": "1287759",
    "end": "1296789"
  },
  {
    "text": "between pilot and mixer",
    "start": "1296789",
    "end": "1301248"
  },
  {
    "text": "you see here the logs of Pilate when it starts up I mentioned that mesh wide",
    "start": "1314919",
    "end": "1321610"
  },
  {
    "text": "configuration that the initializer uses well it's that that config map is not",
    "start": "1321610",
    "end": "1328070"
  },
  {
    "text": "only used for the initializer it's also used for each of the control plane components but since the control plane",
    "start": "1328070",
    "end": "1334880"
  },
  {
    "text": "components they don't get initialized by the initializer the only the only",
    "start": "1334880",
    "end": "1340669"
  },
  {
    "text": "components that get initialized by the initializer is those sidecar proxies right and so we still tell each of the",
    "start": "1340669",
    "end": "1347750"
  },
  {
    "text": "control plane components use this config map for your mesh config right so that",
    "start": "1347750",
    "end": "1352760"
  },
  {
    "text": "that mesh config for those proxies that sit with the control plane components",
    "start": "1352760",
    "end": "1358250"
  },
  {
    "text": "can communicate with with the sidecar proxies as well right so since we are",
    "start": "1358250",
    "end": "1367790"
  },
  {
    "text": "using the kubernetes adapter you see the deck adapter gets registered let's jump",
    "start": "1367790",
    "end": "1376280"
  },
  {
    "text": "over to the mixer so you know the mixer is essentially an attribute processing",
    "start": "1376280",
    "end": "1382360"
  },
  {
    "text": "engine so each of the Envoy sidecar proxies they go ahead and produce",
    "start": "1382360",
    "end": "1388730"
  },
  {
    "text": "attributes what attributes those proxies produce is dependent on the the user or",
    "start": "1388730",
    "end": "1395990"
  },
  {
    "text": "the operator right so you create these things called attribute manifests that say hey Envoy here's the important",
    "start": "1395990",
    "end": "1406820"
  },
  {
    "text": "attributes that I care about that for the traffic that comes through you and send this information to mixer well",
    "start": "1406820",
    "end": "1415760"
  },
  {
    "text": "mixer just like what we showed in Pilot has this pluggable back-end of",
    "start": "1415760",
    "end": "1422210"
  },
  {
    "text": "infrastructure components so pluggable backends could be for logging for telemetry authentication so on and so",
    "start": "1422210",
    "end": "1430429"
  },
  {
    "text": "forth right and mixer is responsible for taking those attributes from your",
    "start": "1430429",
    "end": "1436010"
  },
  {
    "text": "attribute producers again those producers being your Envoy proxies and then routing them accordingly to the",
    "start": "1436010",
    "end": "1444200"
  },
  {
    "text": "appropriate a back-end component making that component making its",
    "start": "1444200",
    "end": "1449679"
  },
  {
    "text": "decision if it's a policy decision providing it back to mixer which then",
    "start": "1449679",
    "end": "1455230"
  },
  {
    "text": "funnels it back down to your envoy let's",
    "start": "1455230",
    "end": "1462610"
  },
  {
    "text": "look at the mixer config",
    "start": "1462610",
    "end": "1465960"
  },
  {
    "text": "and the mixer configuration is gonna look very similar to the pilot",
    "start": "1474310",
    "end": "1479660"
  },
  {
    "text": "configuration the mixer also has the",
    "start": "1479660",
    "end": "1484720"
  },
  {
    "text": "proxy deployed with it",
    "start": "1484720",
    "end": "1488650"
  },
  {
    "text": "and as with the pilot we mount the service account secrets so that the",
    "start": "1490450",
    "end": "1499910"
  },
  {
    "text": "mixer can communicate with Kuby API server securely we also mount Etsy certs",
    "start": "1499910",
    "end": "1506240"
  },
  {
    "text": "and these are the certs that are used so that the proxy for the mixer can",
    "start": "1506240",
    "end": "1513050"
  },
  {
    "text": "communicate with the sidecar Envoy proxies and you see here this custom",
    "start": "1513050",
    "end": "1519920"
  },
  {
    "text": "config file I want to take a look at it really quick and I didn't show you for",
    "start": "1519920",
    "end": "1525920"
  },
  {
    "text": "the pilot but the pilot also has a custom configuration file write a few minutes or earlier in the presentation I",
    "start": "1525920",
    "end": "1533330"
  },
  {
    "text": "showed you the configuration file all the sidecar proxy and how that dynamically gets managed it gets",
    "start": "1533330",
    "end": "1539720"
  },
  {
    "text": "bootstrap but then gets managed by by the pilot well these control plane",
    "start": "1539720",
    "end": "1547340"
  },
  {
    "text": "components they have static configuration files so if we exact into",
    "start": "1547340",
    "end": "1554350"
  },
  {
    "text": "see let's get into mixture to cuddle IT",
    "start": "1554350",
    "end": "1578320"
  },
  {
    "text": "and let's get into a mixer",
    "start": "1581760",
    "end": "1588050"
  },
  {
    "text": "she is tio proxy hey it worked and what",
    "start": "1588230",
    "end": "1597810"
  },
  {
    "text": "did we say this config file was again here I'll find envoy or mixer here it is",
    "start": "1597810",
    "end": "1621750"
  },
  {
    "text": "so this is a static configuration file that that we pass into mixer and you",
    "start": "1621750",
    "end": "1628560"
  },
  {
    "text": "know looks a little bit different than the sidecar proxies we don't have tons of different clusters tons of different",
    "start": "1628560",
    "end": "1635340"
  },
  {
    "text": "services running so each of the Envoy proxies run cluster discovery service",
    "start": "1635340",
    "end": "1641460"
  },
  {
    "text": "service discovery service all these different services to help construct that chain between the listeners the",
    "start": "1641460",
    "end": "1649530"
  },
  {
    "text": "routes the clusters and having the the Envoy essentially do the proxying based",
    "start": "1649530",
    "end": "1655650"
  },
  {
    "text": "on that chain of configuration",
    "start": "1655650",
    "end": "1659900"
  },
  {
    "text": "that was the mixer off that we just showed you look at the mixture logs",
    "start": "1664920",
    "end": "1670530"
  },
  {
    "text": "we'll go I'm gonna speed things up a little bit just because we're down to our final 10 minutes to point out a few",
    "start": "1670530",
    "end": "1676830"
  },
  {
    "text": "things from the logs now that the mixer is listening on multiple ports something",
    "start": "1676830",
    "end": "1684240"
  },
  {
    "text": "here if you look at it and we're saying the control plane is doing this mutual TLS why is you know why is the mixer",
    "start": "1684240",
    "end": "1692850"
  },
  {
    "text": "container have no certificates or keys or anything like that in its configuration",
    "start": "1692850",
    "end": "1698100"
  },
  {
    "text": "well that's because again that sidecar the proxy gets deployed with the mixer",
    "start": "1698100",
    "end": "1703710"
  },
  {
    "text": "and it's responsible for doing the mutual TLS so you know between mixer and",
    "start": "1703710",
    "end": "1709170"
  },
  {
    "text": "the rest of the service meshmixer is not you know it's not actually doing any",
    "start": "1709170",
    "end": "1714390"
  },
  {
    "text": "type of TLS termination that's happening at the proxy that sits right next to it how do you see that this is an empty",
    "start": "1714390",
    "end": "1721320"
  },
  {
    "text": "config store and this basically says to use the in cluster configuration I showed you how that that secret gets",
    "start": "1721320",
    "end": "1728910"
  },
  {
    "text": "mounted into into the pod and this tells mixture to use that in cluster",
    "start": "1728910",
    "end": "1736380"
  },
  {
    "text": "configuration to authenticate to the kubernetes api server and here's just a",
    "start": "1736380",
    "end": "1741740"
  },
  {
    "text": "capture that I did of what we're seeing here is actually a non-void proxy sent",
    "start": "1741740",
    "end": "1749250"
  },
  {
    "text": "in some traffic to mixer and said hey you know take a look at this and we can",
    "start": "1749250",
    "end": "1754350"
  },
  {
    "text": "see that here's all these attributes that we configured for for mixer that",
    "start": "1754350",
    "end": "1760770"
  },
  {
    "text": "got pushed down to the proxies and just a few things right so when we create a policy within SCO we can say I want to",
    "start": "1760770",
    "end": "1768840"
  },
  {
    "text": "create some kind of policy based on source service and destination service or any of these other attributes that I",
    "start": "1768840",
    "end": "1775440"
  },
  {
    "text": "don't have highlighted right and because my environment has you know no route",
    "start": "1775440",
    "end": "1781680"
  },
  {
    "text": "rules nothing configured you see that there's zero actions here that are taking place",
    "start": "1781680",
    "end": "1787980"
  },
  {
    "text": "because there are no rules",
    "start": "1787980",
    "end": "1791510"
  },
  {
    "text": "so sto security there's a one of the pods as the ISTE OCA it's probably one",
    "start": "1794769",
    "end": "1802519"
  },
  {
    "text": "area that I'm not going to do a deep dive into but at a high level the the",
    "start": "1802519",
    "end": "1808369"
  },
  {
    "text": "ISTE of security is responsible for delivering that those TLS assets that we",
    "start": "1808369",
    "end": "1815779"
  },
  {
    "text": "saw right and the Etsy certs right so if we go and exact details curl instead of",
    "start": "1815779",
    "end": "1835159"
  },
  {
    "text": "looking at a cluster let's look at the certs right this information here was actually delivered from the sto CA right",
    "start": "1835159",
    "end": "1842359"
  },
  {
    "text": "so the sto security the key components is first the authentication right so or",
    "start": "1842359",
    "end": "1849999"
  },
  {
    "text": "you know the identity so without this T",
    "start": "1849999",
    "end": "1855169"
  },
  {
    "text": "of security we don't know any type of",
    "start": "1855169",
    "end": "1860179"
  },
  {
    "text": "identity information we see that here's a source service here is a destination service but actually attaching an x.509",
    "start": "1860179",
    "end": "1866709"
  },
  {
    "text": "certificate to each of these services gives a strong identity right we're able",
    "start": "1866709",
    "end": "1872149"
  },
  {
    "text": "to authenticate based on that identity right we're able to do things like mutual TLS",
    "start": "1872149",
    "end": "1879229"
  },
  {
    "text": "so that all the communication between the different services those services do",
    "start": "1879229",
    "end": "1884479"
  },
  {
    "text": "not have to be configured for TLS if we configure the mesh for T less than the",
    "start": "1884479",
    "end": "1890479"
  },
  {
    "text": "Envoy proxies as they intercept that traffic will then go ahead and create a",
    "start": "1890479",
    "end": "1896629"
  },
  {
    "text": "mutual TLS connection with any of the other proxies that it needs afford traffic to there's also the ingress",
    "start": "1896629",
    "end": "1904729"
  },
  {
    "text": "component right so how do I have services outside of my kubernetes",
    "start": "1904729",
    "end": "1910820"
  },
  {
    "text": "cluster communicate to these services running in my mesh right so SEO",
    "start": "1910820",
    "end": "1919129"
  },
  {
    "text": "leverages the ingress resource within kubernetes and if you're familiar with",
    "start": "1919129",
    "end": "1924259"
  },
  {
    "text": "ingress it needs an ingress controller right so when you do a coop cuddle get pods",
    "start": "1924259",
    "end": "1931210"
  },
  {
    "text": "from the Nishio namespace you're gonna see is steel ingress that's the ingress",
    "start": "1931210",
    "end": "1936260"
  },
  {
    "text": "controller that's responsible for watching the ingress resource right and",
    "start": "1936260",
    "end": "1941270"
  },
  {
    "text": "then based on the rules that you identify in the ingress resource",
    "start": "1941270",
    "end": "1946549"
  },
  {
    "text": "permitting that traffic into the mesh and it's the the ingress controller that",
    "start": "1946549",
    "end": "1955700"
  },
  {
    "text": "also runs as a proxy as an envoy proxy but instead of running it as a sidecar",
    "start": "1955700",
    "end": "1961280"
  },
  {
    "text": "proxy right the sidecar proxies they need IP tables by that init container to",
    "start": "1961280",
    "end": "1966409"
  },
  {
    "text": "intercept all traffic that comes that comes through the the ingress runs in",
    "start": "1966409",
    "end": "1972200"
  },
  {
    "text": "this ingress mode and it's only gonna capture traffic based on the rules that you put into that ingress resource the",
    "start": "1972200",
    "end": "1981260"
  },
  {
    "text": "ingress resource that I set up basically says you know all all sub paths from",
    "start": "1981260",
    "end": "1987350"
  },
  {
    "text": "route so for the product page example if it's a login logout the slash product",
    "start": "1987350",
    "end": "1992720"
  },
  {
    "text": "page any of those endpoints it's going to allow into the cluster o egress by",
    "start": "1992720",
    "end": "2001720"
  },
  {
    "text": "default your services cannot communicate outside of the mesh why is that it's",
    "start": "2001720",
    "end": "2007870"
  },
  {
    "text": "because those sidecar proxies again they're configured based on IP tables to",
    "start": "2007870",
    "end": "2015070"
  },
  {
    "text": "intercept all the traffic and those sidecar proxies know nothing about any type of networking outside of the mesh",
    "start": "2015070",
    "end": "2020770"
  },
  {
    "text": "right so we can create egress rules these egress rules support HTTP HTTPS",
    "start": "2020770",
    "end": "2027700"
  },
  {
    "text": "that allow you to select selectively allow outbound traffic ok if you don't",
    "start": "2027700",
    "end": "2033070"
  },
  {
    "text": "want to use an egress rule let's say it's a non HTTP traffic you can set up",
    "start": "2033070",
    "end": "2038620"
  },
  {
    "text": "include IP ranges okay that include IP ranges this would be a configuration",
    "start": "2038620",
    "end": "2046150"
  },
  {
    "text": "parameter that you add to that config map for the initializer all right so the",
    "start": "2046150",
    "end": "2052628"
  },
  {
    "text": "initializer when it's when when it initially zhe's the sidecar proxies it's going to say hey sidecar proxies only",
    "start": "2052629",
    "end": "2061329"
  },
  {
    "text": "only intercept this traffic and the way that it does that again is it's basically saying going into the iptables",
    "start": "2061329",
    "end": "2068479"
  },
  {
    "text": "tells that a knit container go in iptables instead of sending all traffic only sent traffic in this example from",
    "start": "2068479",
    "end": "2074809"
  },
  {
    "text": "the you know for the 1000 / 16 network",
    "start": "2074809",
    "end": "2079719"
  },
  {
    "text": "thank you",
    "start": "2082359",
    "end": "2085508"
  }
]