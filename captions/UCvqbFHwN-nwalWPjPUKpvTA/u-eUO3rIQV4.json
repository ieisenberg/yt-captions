[
  {
    "text": "good afternoon everyone thank you for being here and listening to us talk about leveraging EVPF and open telemetry",
    "start": "160",
    "end": "7759"
  },
  {
    "text": "to auto instrument exemplars so before we get started um I",
    "start": "7759",
    "end": "14160"
  },
  {
    "text": "just want to take a quick moment to introduce ourselves hi I'm Kitika and I'm a machine learning engineer at Apple",
    "start": "14160",
    "end": "21199"
  },
  {
    "text": "i uh work with the observability team and my experience is in observability uh",
    "start": "21199",
    "end": "26720"
  },
  {
    "text": "machine learning and data science and I've been at Apple for about six years u Charlie hi I'm Charlie I've uh worked at",
    "start": "26720",
    "end": "35520"
  },
  {
    "text": "Apple for about 8 and a half years um I've had roles from SR DevOps and",
    "start": "35520",
    "end": "41079"
  },
  {
    "text": "observability um I'm a software engineer at Apple today and I'm also a maintainer for Cortex a one of the projects in",
    "start": "41079",
    "end": "50718"
  },
  {
    "text": "CNCF all right so um if you're here today and it doesn't",
    "start": "50760",
    "end": "58399"
  },
  {
    "text": "matter what your background is if you're an S you're a developer you're a DevOps engineer you will take away how to use",
    "start": "58399",
    "end": "65040"
  },
  {
    "text": "exemplars to supercharge your observability and your debugging abilities so what are we going to cover",
    "start": "65040",
    "end": "71119"
  },
  {
    "text": "today we'll talk a little bit about um what exemplars are and what eBPF is uh",
    "start": "71119",
    "end": "77119"
  },
  {
    "text": "we'll go into how you can use eBPF to auto instrument exemplars and then we'll",
    "start": "77119",
    "end": "82960"
  },
  {
    "text": "talk about projects that use open telemetry to create exemplars with eBPF and we also have a demo for that and",
    "start": "82960",
    "end": "90479"
  },
  {
    "text": "finally we'll talk about how you",
    "start": "90479",
    "end": "95799"
  },
  {
    "text": "can okay um and how you can use machine learning to supercharge your exemplar",
    "start": "95799",
    "end": "103159"
  },
  {
    "text": "observability okay so imagine this can you guys still hear me okay uh imagine this that I have a",
    "start": "103159",
    "end": "111040"
  },
  {
    "text": "service and I'm noticing that the request latency there seems to be something off with that so what is the",
    "start": "111040",
    "end": "118240"
  },
  {
    "text": "first thing I do i go into my dashboard and I look at my request latency graph and indeed it looks like something is",
    "start": "118240",
    "end": "124479"
  },
  {
    "text": "wrong it seems to be going up but I just cannot use only this metric to debug",
    "start": "124479",
    "end": "130239"
  },
  {
    "text": "what's going wrong i still need more information so the next step that I do is I go to my distributed traces and now",
    "start": "130239",
    "end": "137520"
  },
  {
    "text": "I have to sift through this plethora of traces to figure out which request path",
    "start": "137520",
    "end": "142720"
  },
  {
    "text": "is that of the slow request and obviously we all know how tedious that is but what if there is a way for me to",
    "start": "142720",
    "end": "150720"
  },
  {
    "text": "go from metrics directly to traces and the answer is there is a way to do it",
    "start": "150720",
    "end": "156400"
  },
  {
    "text": "and that is through exemplars exemplars are time series data",
    "start": "156400",
    "end": "162959"
  },
  {
    "text": "points that essentially link metrics to traces and logs through the trace ID and",
    "start": "162959",
    "end": "169280"
  },
  {
    "text": "span ID and these are often stored alongside metrics in the metrics data",
    "start": "169280",
    "end": "174720"
  },
  {
    "text": "store they provide a lot of contextual information because it's not just the traces and logs you can add a lot of",
    "start": "174720",
    "end": "181280"
  },
  {
    "text": "other attributes to the exampler as",
    "start": "181280",
    "end": "186959"
  },
  {
    "text": "well okay so uh here is an example of what an exemplar uh looks like so let's",
    "start": "187800",
    "end": "195120"
  },
  {
    "text": "go through what attributes are there here so the first thing that we see here is the trace ID which is essentially",
    "start": "195120",
    "end": "200720"
  },
  {
    "text": "what you would use to go from the metric to the trace it it that is the link",
    "start": "200720",
    "end": "205840"
  },
  {
    "text": "between the metric and the trace uh we also see a value here which says 2016",
    "start": "205840",
    "end": "211680"
  },
  {
    "text": "which is the value of the metric itself and the metric is some sort of a histogram metric as we can see here it",
    "start": "211680",
    "end": "218319"
  },
  {
    "text": "says bucket so the bucket it belongs to is the 2500 bucket there is le uh on uh",
    "start": "218319",
    "end": "225519"
  },
  {
    "text": "in between that is the bucket and um the other attribute of importance is the",
    "start": "225519",
    "end": "231120"
  },
  {
    "text": "span ID so the trace ID and span ID is all that is there in this uh uh exemplar",
    "start": "231120",
    "end": "236959"
  },
  {
    "text": "to point you from the metric to the trace and the way that the exemplar is instrumented is you can see this um",
    "start": "236959",
    "end": "243680"
  },
  {
    "text": "little yellow dot i guess we went to the next slide",
    "start": "243680",
    "end": "248720"
  },
  {
    "text": "little yellow dot here that's the exemplar so that's how it it looks um on your",
    "start": "248720",
    "end": "254519"
  },
  {
    "text": "visualization okay so now um let's say that I'm convinced that I need to instrument my uh application for an",
    "start": "254519",
    "end": "261199"
  },
  {
    "text": "exemplar what do I do next i need to go and essentially instrument every single",
    "start": "261199",
    "end": "267600"
  },
  {
    "text": "application that I have to instrument the uh detailed telemetry that I need to collect for exemplar so I need metrics I",
    "start": "267600",
    "end": "274080"
  },
  {
    "text": "need traces and then maybe I want to add logs i will need to instrument all of this and it just doesn't end at my",
    "start": "274080",
    "end": "280720"
  },
  {
    "text": "application if I'm uh interacting with external applications I will have to",
    "start": "280720",
    "end": "285759"
  },
  {
    "text": "instrument those applications as well to collect these exemplars to get the complete picture and obviously you can",
    "start": "285759",
    "end": "292960"
  },
  {
    "text": "see that it's a lot of overhead not just time but also it could be a performance overhead",
    "start": "292960",
    "end": "298880"
  },
  {
    "text": "but what if I told you that there is a way for you to auto instrument your applications for",
    "start": "298880",
    "end": "304919"
  },
  {
    "text": "exemplars and the way to do that is through",
    "start": "304919",
    "end": "309520"
  },
  {
    "text": "ebpf ebpf is a superpower inside of the Linux kernel that lets you run small",
    "start": "310280",
    "end": "317199"
  },
  {
    "text": "programs within the kernel uh without actually modifying the code uh for the kernel or the application itself and",
    "start": "317199",
    "end": "324560"
  },
  {
    "text": "this can enable you to have high performance observability without modifying the application itself so what",
    "start": "324560",
    "end": "332400"
  },
  {
    "text": "is the advantages of having u ebpf for auto instrumentation one of the biggest",
    "start": "332400",
    "end": "338560"
  },
  {
    "text": "advantages is that you have to do zero code instrumentation for your application and even with that you get",
    "start": "338560",
    "end": "344800"
  },
  {
    "text": "high high resolution visibility into uh what's going on and they integrate pretty well with uh the Kubernetes",
    "start": "344800",
    "end": "351360"
  },
  {
    "text": "observability stack so you're improving the observability of your applications",
    "start": "351360",
    "end": "356400"
  },
  {
    "text": "and because it's at the kernel level they are event- driven and um highly",
    "start": "356400",
    "end": "361880"
  },
  {
    "text": "efficient so now let's uh look at a quick demo of how you can use EVPF to",
    "start": "361880",
    "end": "368479"
  },
  {
    "text": "auto instrument exemplars charlie thanks Kita all right so here's going to",
    "start": "368479",
    "end": "374800"
  },
  {
    "text": "be uh something exciting we're going to do a live demo um but I wanted to quickly give you a big picture of what",
    "start": "374800",
    "end": "381919"
  },
  {
    "text": "we're about to do in the demo so that it makes sense um so uh what I'm going to",
    "start": "381919",
    "end": "388319"
  },
  {
    "text": "do is uh set up a local Kubernetes cluster on my laptop um and then install",
    "start": "388319",
    "end": "394000"
  },
  {
    "text": "uh these components into the cluster uh and then have um uh traces and metrics",
    "start": "394000",
    "end": "400880"
  },
  {
    "text": "automatically be generated for all these services that are talking to each other without having to actually instrument",
    "start": "400880",
    "end": "406960"
  },
  {
    "text": "any of these services so these are just binaries that you can download upstream that haven't been up um um uh",
    "start": "406960",
    "end": "414720"
  },
  {
    "text": "instrumented with uh exemplars and I'm going to be using BA here uh which is a",
    "start": "414720",
    "end": "421120"
  },
  {
    "text": "a project uh from Graphfana that um lets you have auto instrumentation um and",
    "start": "421120",
    "end": "426880"
  },
  {
    "text": "then let you also generates um exemplars uh from the metrics and the traces um so",
    "start": "426880",
    "end": "433039"
  },
  {
    "text": "this is just a quick uh picture of what I'm going to do i'm going to change over to my terminal here to actually show you",
    "start": "433039",
    "end": "441199"
  },
  {
    "text": "what I'm going to do here so um let me make this",
    "start": "441199",
    "end": "446880"
  },
  {
    "text": "bigger okay so um I'm going to be using something called K Lima to uh set up my",
    "start": "448360",
    "end": "456400"
  },
  {
    "text": "Kubernetes cluster i already have one installed so I'm not going to run this again but um I'm just going to be using",
    "start": "456400",
    "end": "463120"
  },
  {
    "text": "K9S to show you that I have a cluster running on my machine um it just has uh",
    "start": "463120",
    "end": "469199"
  },
  {
    "text": "a couple of pods on there that are like essential to running the cluster but other than that nothing is really",
    "start": "469199",
    "end": "475879"
  },
  {
    "text": "installed on the left hand side I'm going to run Helmfile to um uh install",
    "start": "475879",
    "end": "482479"
  },
  {
    "text": "all of the charts that I'm going to be using to get this working uh this is probably going to take a couple of",
    "start": "482479",
    "end": "488240"
  },
  {
    "text": "seconds so I'm going to show you uh what I'm going to be installing here so um on",
    "start": "488240",
    "end": "495520"
  },
  {
    "text": "the left here you'll see that I'm using seaweed FS to emulate S3 on my laptop because I don't want to use Wi-Fi here",
    "start": "495520",
    "end": "502720"
  },
  {
    "text": "um BA is the project that I'm going to be using to uh have EVPF uh",
    "start": "502720",
    "end": "508800"
  },
  {
    "text": "instrumentation um Jäger is where I'm going to be storing all of the traces that gets",
    "start": "508800",
    "end": "515159"
  },
  {
    "text": "collected uh the open telemetry collector is what I'm using to route the metric and traces to the various uh um",
    "start": "515159",
    "end": "523479"
  },
  {
    "text": "backends um Prometheus is where I'm going to be storing the metrics uh with",
    "start": "523480",
    "end": "528640"
  },
  {
    "text": "the example data i'm using Graphana here to visualize the metrics and the traces",
    "start": "528640",
    "end": "535600"
  },
  {
    "text": "and then Cortex is a project that I am a maintainer for so I'm going to be using it to show how a microservices like",
    "start": "535600",
    "end": "543920"
  },
  {
    "text": "setup uh without any instrumentation for exemplars can be automatically",
    "start": "543920",
    "end": "549080"
  },
  {
    "text": "instrumented without any like manual instrumentation and this is kind of like",
    "start": "549080",
    "end": "554640"
  },
  {
    "text": "the magic here that I wanted to show so it looks like everything on the right side is up um you can see I have cortex",
    "start": "554640",
    "end": "562480"
  },
  {
    "text": "as a microservices uh uh setup uh installed in the cortex name space i",
    "start": "562480",
    "end": "568000"
  },
  {
    "text": "have BA here graphfana Jerger the collector uh the server and then the",
    "start": "568000",
    "end": "573440"
  },
  {
    "text": "three pods we started at uh with the beginning um I'm going to port forward here to uh the the local graphana",
    "start": "573440",
    "end": "580640"
  },
  {
    "text": "instance here so that I can interact with it from my laptop um and then I'm going to run a command to set up some",
    "start": "580640",
    "end": "587360"
  },
  {
    "text": "data sources and dashboards um so I don't have to do that here but uh so now that that's going I",
    "start": "587360",
    "end": "595360"
  },
  {
    "text": "can go over to my local host and then be able to visualize some dashboards here",
    "start": "595360",
    "end": "601760"
  },
  {
    "text": "so I've made this exemplars dashboard um here which uh is actually showing us",
    "start": "601760",
    "end": "608240"
  },
  {
    "text": "uh exemplars um so I have some metrics here that are coming from a cortex",
    "start": "608240",
    "end": "614480"
  },
  {
    "text": "binary that I did not touch at all and I was able to get metrics uh traces and",
    "start": "614480",
    "end": "620160"
  },
  {
    "text": "exemplars out of that so um the distributor is let me step back and talk",
    "start": "620160",
    "end": "626240"
  },
  {
    "text": "a bit about what this service is so Cortex is a um a project that allows",
    "start": "626240",
    "end": "633440"
  },
  {
    "text": "teams to have like a very horizontally scalable Prometheus so um it basically",
    "start": "633440",
    "end": "640560"
  },
  {
    "text": "lets you send metrics to Cortex uh and then um Cortex will able to manage that",
    "start": "640560",
    "end": "646560"
  },
  {
    "text": "for you at a very large scale so imagine just like being able to horizontally scale Prometheus across multiple nodes",
    "start": "646560",
    "end": "654240"
  },
  {
    "text": "um and then making it very highly available so the first thing that",
    "start": "654240",
    "end": "659640"
  },
  {
    "text": "usually metrics touches when it comes to cortex is the distributor service and that fans out um metrics into the",
    "start": "659640",
    "end": "668320"
  },
  {
    "text": "ingesttor service um which then stores the data but you don't really need to know all of that to kind of get the",
    "start": "668320",
    "end": "674880"
  },
  {
    "text": "picture here distributor here is one of the services that I'm showing here um",
    "start": "674880",
    "end": "680160"
  },
  {
    "text": "these are metrics that are coming out of BA um for this specific service so it's",
    "start": "680160",
    "end": "685519"
  },
  {
    "text": "showing me the specific post uh request method the status code the HTTP route um",
    "start": "685519",
    "end": "692480"
  },
  {
    "text": "this is nothing new but what is new is the idea that you can jump from this",
    "start": "692480",
    "end": "698399"
  },
  {
    "text": "metric to the trace like this for example I'm going to just filter for one of the uh series",
    "start": "698399",
    "end": "705519"
  },
  {
    "text": "here that I'm looking at which is an RPC uh uh client request um so this shows me",
    "start": "705519",
    "end": "713440"
  },
  {
    "text": "here here I'm just going to click on one of these exemplars here this shows me that uh uh the service name that I'm",
    "start": "713440",
    "end": "720240"
  },
  {
    "text": "looking at is the distributor it's talking to the ingesttor um this is the",
    "start": "720240",
    "end": "726079"
  },
  {
    "text": "value for how long it took so this is a latency metric um for how long this",
    "start": "726079",
    "end": "731279"
  },
  {
    "text": "specific RPC request took so in this case it was 5 milliseconds um it was in",
    "start": "731279",
    "end": "736959"
  },
  {
    "text": "this 10 millisecond bucket it's a so it's a histogram um this is the RPC",
    "start": "736959",
    "end": "742800"
  },
  {
    "text": "method that was called so you can see that this is these are the various attributes of the span that was in this",
    "start": "742800",
    "end": "749519"
  },
  {
    "text": "request to make this whole thing happen um and also if you click on view and",
    "start": "749519",
    "end": "755200"
  },
  {
    "text": "Jerger UI you can see the exact trace as well so from that metric I looked at an",
    "start": "755200",
    "end": "762680"
  },
  {
    "text": "exemplar and then jumped to that trace to see more information about it um and",
    "start": "762680",
    "end": "768480"
  },
  {
    "text": "I can drill in more here to see um okay in this specific span uh what were the",
    "start": "768480",
    "end": "774639"
  },
  {
    "text": "various attributes that were that were related to that request um and I just",
    "start": "774639",
    "end": "780000"
  },
  {
    "text": "wanted to re-emphasize here again I didn't have to instrument Cortex manually like BA was able to instrument",
    "start": "780000",
    "end": "786800"
  },
  {
    "text": "the kernel itself which all these different services are talking to to",
    "start": "786800",
    "end": "792399"
  },
  {
    "text": "collect that telemetry of which services was talking to what what kind of request",
    "start": "792399",
    "end": "798639"
  },
  {
    "text": "was it what was the status code um and Aya was collecting that and sending that off to Prometheus and Jerger to store it",
    "start": "798639",
    "end": "806560"
  },
  {
    "text": "um as its uh telemetry uh back end so",
    "start": "806560",
    "end": "813600"
  },
  {
    "text": "um that is the the quick um kind of thing that I wanted to show that was the",
    "start": "813600",
    "end": "820600"
  },
  {
    "text": "distributor um I can also look at another service that's here inside of Cortex so this is another so the",
    "start": "820600",
    "end": "827440"
  },
  {
    "text": "ingesttor is where the metrics actually go when it comes out of the distributor so I can see um here this is uh some of",
    "start": "827440",
    "end": "836079"
  },
  {
    "text": "the things that it's it's talking to so it's talking to seaweed fs to see if the blocks are there so it's doing all these",
    "start": "836079",
    "end": "842000"
  },
  {
    "text": "other things and you can kind of um kind of get a picture of what's going on without actually having to instrument",
    "start": "842000",
    "end": "847440"
  },
  {
    "text": "the service itself so this is like a superpower for free right so um if you're an S sur let's say you're",
    "start": "847440",
    "end": "854000"
  },
  {
    "text": "managing a bunch of services but you don't have a lot of context into it right this is sort of turning blackbox",
    "start": "854000",
    "end": "860320"
  },
  {
    "text": "mirroring into white box right you're able to see what's going on inside of a",
    "start": "860320",
    "end": "865360"
  },
  {
    "text": "specific service and then get more u understanding of what's going",
    "start": "865360",
    "end": "870680"
  },
  {
    "text": "on okay so um I also wanted to show the um the query side so these two things",
    "start": "870680",
    "end": "877920"
  },
  {
    "text": "were like the ingestion side so when you're sending metrics to Cortex that's the ingestion side I wanted to show if",
    "start": "877920",
    "end": "883839"
  },
  {
    "text": "you could query Cortex what would that look like so I'm going to go over here this is a nonsensical query really this",
    "start": "883839",
    "end": "890480"
  },
  {
    "text": "is a very expensive query i wouldn't recommend running this uh in production but what it's doing is essentially",
    "start": "890480",
    "end": "896880"
  },
  {
    "text": "summing up every single metric and grouping it by name and this is just to have some um payload on Cortex so I can",
    "start": "896880",
    "end": "904880"
  },
  {
    "text": "visualize some uh requests going on um but then in cortex you can actually see",
    "start": "904880",
    "end": "911279"
  },
  {
    "text": "some of these requests that are happening here so all of these are 200 um the query range request is the one",
    "start": "911279",
    "end": "918399"
  },
  {
    "text": "that I'm most interested in so I'm going to click on that and uh there's some exemplars here fortunately so um this is",
    "start": "918399",
    "end": "926720"
  },
  {
    "text": "uh what the graphana is talking to cortex and then um this is the exact",
    "start": "926720",
    "end": "933040"
  },
  {
    "text": "amount of time that the query front end took and I can click on view in Jerger so far this demo is working great",
    "start": "933040",
    "end": "940240"
  },
  {
    "text": "um so um uh so what we're actually seeing here is Graphfana itself which I",
    "start": "940240",
    "end": "945680"
  },
  {
    "text": "again did not touch or instrument it just has uh this instrument instrumentation generated for us out of",
    "start": "945680",
    "end": "952800"
  },
  {
    "text": "the box and I was able to collect all of that info and send it off to Prometheus",
    "start": "952800",
    "end": "958079"
  },
  {
    "text": "and Jerger to store it for us and then I'm using Graphfana itself to query so this is kind of like meta level thinking",
    "start": "958079",
    "end": "964000"
  },
  {
    "text": "here where I'm showing the thing that I'm instrumenting using the thing that I'm instrumenting it with um which is",
    "start": "964000",
    "end": "972079"
  },
  {
    "text": "really cool right so you can play around with it and then see how everything works and it's all in your laptop and",
    "start": "972079",
    "end": "977759"
  },
  {
    "text": "you can experiment more with it and the best thing is like it's all open telemetry right so um the stuff that's",
    "start": "977759",
    "end": "983759"
  },
  {
    "text": "coming out here is open telemetry native so um the events that are coming from the kernel they get translated into open",
    "start": "983759",
    "end": "990959"
  },
  {
    "text": "telemetry uh signals which then gets routed off into the backends that know",
    "start": "990959",
    "end": "996480"
  },
  {
    "text": "how to support open telemetry um which is really really cool so this is like a",
    "start": "996480",
    "end": "1001759"
  },
  {
    "text": "lot of work in the making here from many many people um so thank you to the open",
    "start": "1001759",
    "end": "1008240"
  },
  {
    "text": "telemetry community for you know making this possible okay so I wanted to stop there for the",
    "start": "1008240",
    "end": "1014240"
  },
  {
    "text": "demo and I think I wanted to hand it back to Guta to talk more about um how",
    "start": "1014240",
    "end": "1021199"
  },
  {
    "text": "everything works um uh maybe I'll just quickly recap what I just said so that it all makes sense",
    "start": "1021199",
    "end": "1027760"
  },
  {
    "text": "hopefully uh so I I deployed Cortex Graphana BA Prometheus Jerger all into a",
    "start": "1027760",
    "end": "1034319"
  },
  {
    "text": "local Kubernetes cluster so that I can just have everything here for the demo um and then BA here is listening or",
    "start": "1034319",
    "end": "1041199"
  },
  {
    "text": "basically telling the kernel hey send me these network events when they happen and then BA translates them into open",
    "start": "1041199",
    "end": "1047760"
  },
  {
    "text": "telemetry signals and because BA here uh is generating them the trace and the",
    "start": "1047760",
    "end": "1052960"
  },
  {
    "text": "metric it's able to inject that trace ID into the metric to create an exemplar",
    "start": "1052960",
    "end": "1058160"
  },
  {
    "text": "and then forward that off into Prometheus so that when you query that metric later it'll have that trace ID in",
    "start": "1058160",
    "end": "1064160"
  },
  {
    "text": "there so that you can find that trace in Jerger um okay now I will hand it back to Gria",
    "start": "1064160",
    "end": "1072799"
  },
  {
    "text": "thank you all right uh thanks Charlie so now that we've seen a demo of how you",
    "start": "1072799",
    "end": "1078720"
  },
  {
    "text": "can auto instrument uh exemplars with eBPF for any application he showed quite a few of them so that's pretty",
    "start": "1078720",
    "end": "1085120"
  },
  {
    "text": "impressive so now let's talk about what are some of the benefits of um exemplars",
    "start": "1085120",
    "end": "1090160"
  },
  {
    "text": "so the biggest benefit is that you get precision debugging because they link highle metrics to the traces directly",
    "start": "1090160",
    "end": "1097120"
  },
  {
    "text": "you're going straight from the alert that you get to the root cause itself and I'm not saying it gives you the root",
    "start": "1097120",
    "end": "1103200"
  },
  {
    "text": "cause can root cause the issue much faster and the down the uh opposite of",
    "start": "1103200",
    "end": "1108559"
  },
  {
    "text": "this would be that you're actually having to go and look into your uh uh traces and see which one is um the",
    "start": "1108559",
    "end": "1114720"
  },
  {
    "text": "relevant trace for you to figure out what's going wrong so it's really that powerful so the next one is that uh with",
    "start": "1114720",
    "end": "1122000"
  },
  {
    "text": "traditional metrics um any outliers that are in the data and that are momentary outliers usually get uh hidden because",
    "start": "1122000",
    "end": "1129200"
  },
  {
    "text": "there is some aggregations that most of these uh metric uh data stores uh apply so you may not see them uh when you're",
    "start": "1129200",
    "end": "1136240"
  },
  {
    "text": "trying to look for them but the great thing about exemplars is they highlight them because um as you saw it adds a",
    "start": "1136240",
    "end": "1141600"
  },
  {
    "text": "little um data point onto your graph and that really shows you that something went wrong and those outliers can be",
    "start": "1141600",
    "end": "1147760"
  },
  {
    "text": "caught more easily it has very context rich observability we saw the example we saw the uh uham",
    "start": "1147760",
    "end": "1155360"
  },
  {
    "text": "exemplar uh in the demo and you can see that it has so many attributes it's not just the um trace ID or the span ID",
    "start": "1155360",
    "end": "1162000"
  },
  {
    "text": "there's so much more information there which kind of it's telling you a story and it's not really just a data point",
    "start": "1162000",
    "end": "1167919"
  },
  {
    "text": "anymore um you can do faster incident response again because you're not flipping through you know a million",
    "start": "1167919",
    "end": "1173520"
  },
  {
    "text": "dashboards just to figure out what went wrong it's um it kind of helps engineers going from the symptoms uh to the uh",
    "start": "1173520",
    "end": "1180400"
  },
  {
    "text": "cause in just seconds and not minutes and finally it opens up a slew of uh ML",
    "start": "1180400",
    "end": "1188720"
  },
  {
    "text": "analysis that you can do on exemplars that give you even more uh observability into your applications and we'll talk a",
    "start": "1188720",
    "end": "1195840"
  },
  {
    "text": "little bit about this a little later so let's quickly talk about auto",
    "start": "1195840",
    "end": "1202720"
  },
  {
    "text": "instrumentation versus manual instrumentation so manual instrumentation is good the advantages",
    "start": "1202720",
    "end": "1208640"
  },
  {
    "text": "is that because you are the domain expert and you have full control of what you capture you can add a lot of domain",
    "start": "1208640",
    "end": "1216160"
  },
  {
    "text": "context into the exemplars that you're extracting and this just means that you",
    "start": "1216160",
    "end": "1221840"
  },
  {
    "text": "have more depth of uh information in the exemplars and they can also work across",
    "start": "1221840",
    "end": "1227200"
  },
  {
    "text": "many languages or libraries but for manual instrumentation you actually have to go and change the",
    "start": "1227200",
    "end": "1233840"
  },
  {
    "text": "application code itself and redeploy them so it requires code changes and redeploys and the risk of you missing",
    "start": "1233840",
    "end": "1241200"
  },
  {
    "text": "coverage is a little higher than if you were trying to auto instrument it because auto instrumentation would kind",
    "start": "1241200",
    "end": "1246559"
  },
  {
    "text": "of um cover most of the breadth of uh use cases that you would need so with",
    "start": "1246559",
    "end": "1251919"
  },
  {
    "text": "auto instrumentation the advantage is that you don't need to do any code changes for your application and it uh",
    "start": "1251919",
    "end": "1258159"
  },
  {
    "text": "captures more low-level signals like sis calls or network uh latency uh requests like we saw and it is ideal for blackbox",
    "start": "1258159",
    "end": "1267679"
  },
  {
    "text": "uh scenarios so for example I think um Charlie spoke about this uh if you are not familiar with an application and you",
    "start": "1267679",
    "end": "1274720"
  },
  {
    "text": "just want to have some more observability into that application it is great for that kind of a use case because you can implement uh implement",
    "start": "1274720",
    "end": "1281200"
  },
  {
    "text": "auto instrumentation at the kernel level and you'll get a lot of information there and it's also good for uh legacy",
    "start": "1281200",
    "end": "1287280"
  },
  {
    "text": "services but the downside is that it's limited to what the kernel sees and it's",
    "start": "1287280",
    "end": "1293600"
  },
  {
    "text": "harder to capture deep business uh impact level",
    "start": "1293600",
    "end": "1298840"
  },
  {
    "text": "semantics okay so now let's talk about how you can um supercharge your",
    "start": "1298840",
    "end": "1304400"
  },
  {
    "text": "observability or as I call it observability plus+ with uh adding ML on your exemplars",
    "start": "1304400",
    "end": "1312039"
  },
  {
    "text": "so when the worlds of exemplars and machine learning meet the most important uh fe feature that you get is labeled",
    "start": "1312159",
    "end": "1318880"
  },
  {
    "text": "anomaly detection as you know in real world applications labeled data is very",
    "start": "1318880",
    "end": "1324159"
  },
  {
    "text": "hard to get so most of our anomaly detection uh methods are unsupervised",
    "start": "1324159",
    "end": "1329440"
  },
  {
    "text": "which means they are not running on label data but the great thing about exemplars is because they mark outliers",
    "start": "1329440",
    "end": "1335520"
  },
  {
    "text": "in your data you already have label data of what is an anomaly so you can",
    "start": "1335520",
    "end": "1340720"
  },
  {
    "text": "actually perform labelled anomaly detection which is supervised anomaly detection and they are far more um",
    "start": "1340720",
    "end": "1346159"
  },
  {
    "text": "accurate than unsupervised uh methods you can do root cause recommendations or",
    "start": "1346159",
    "end": "1352080"
  },
  {
    "text": "even to an extent root cause analysis much better because you have more uh types of information you do not just",
    "start": "1352080",
    "end": "1358720"
  },
  {
    "text": "have metrics you also have the trace and the log that corresponds to that metric",
    "start": "1358720",
    "end": "1363840"
  },
  {
    "text": "so you're able to do root cause recommendation more easily you can do proactive alerting um and you can have",
    "start": "1363840",
    "end": "1370640"
  },
  {
    "text": "feedback loops which is you can say that an exemplar that um your auto instrumentation has marked is a real",
    "start": "1370640",
    "end": "1377280"
  },
  {
    "text": "exemplar a real outlier or not a real outlier so feeding that kind of data back into your um anomaly detection or",
    "start": "1377280",
    "end": "1383760"
  },
  {
    "text": "root cause recommendation uh services is a is very very um",
    "start": "1383760",
    "end": "1389360"
  },
  {
    "text": "essential and finally you also unlock multimodal analysis so let's talk about",
    "start": "1389360",
    "end": "1395360"
  },
  {
    "text": "what multimodal analysis means so today we live in the world of large language models where we all have now learned to",
    "start": "1395360",
    "end": "1402960"
  },
  {
    "text": "throw whatever data we have into the large language model and it often coughs up something that is valuable to you so",
    "start": "1402960",
    "end": "1410559"
  },
  {
    "text": "why not do the same thing with exemplars you have three modalities or three different types of very rich data you",
    "start": "1410559",
    "end": "1417039"
  },
  {
    "text": "have metrics logs and traces and not individually you have them linked with one another you have very very",
    "start": "1417039",
    "end": "1423360"
  },
  {
    "text": "contextual uh very very contextually rich information so throwing this at the",
    "start": "1423360",
    "end": "1428640"
  },
  {
    "text": "large language model unlocks again a large number of features for you like incident classification root cause",
    "start": "1428640",
    "end": "1434960"
  },
  {
    "text": "analysis incident summarization you can get uh the large language model to write your RCS for you",
    "start": "1434960",
    "end": "1441760"
  },
  {
    "text": "as incidents happen you can do a lot of other summarizations as well you can",
    "start": "1441760",
    "end": "1446960"
  },
  {
    "text": "also further take this u into doing root cause analysis and u finding you a fix",
    "start": "1446960",
    "end": "1453840"
  },
  {
    "text": "as well maybe you have some information that you've already documented RC previous RCAs runbooks all of those can",
    "start": "1453840",
    "end": "1461120"
  },
  {
    "text": "also be fed as metadata into the language model along with the informations that you're getting from the exemplars and this can take you from",
    "start": "1461120",
    "end": "1468400"
  },
  {
    "text": "root cause analysis to also recommending a fix which will reduce your MTR even",
    "start": "1468400",
    "end": "1473960"
  },
  {
    "text": "further so why can't you do this with uh metrics traces and logs individually you",
    "start": "1473960",
    "end": "1479600"
  },
  {
    "text": "can but the amount of data that you would throw at a language model would be more but in this case you are providing",
    "start": "1479600",
    "end": "1487039"
  },
  {
    "text": "very specific information about uh your application to the language model so",
    "start": "1487039",
    "end": "1492080"
  },
  {
    "text": "you'll get better in better uh output so that's what exemplars can do",
    "start": "1492080",
    "end": "1497600"
  },
  {
    "text": "for you in a nutshell with when you have uh machine learning applied to",
    "start": "1497600",
    "end": "1502679"
  },
  {
    "text": "them so before we close uh let's look at what our key takeaways were we looked at",
    "start": "1502679",
    "end": "1508240"
  },
  {
    "text": "what exemplars are and what ebpf is then we spoke about how you can use ebpf to",
    "start": "1508240",
    "end": "1514320"
  },
  {
    "text": "auto instrument your exemplars uh we also spoke about projects that use open telemetry to create exemplars with ebpf",
    "start": "1514320",
    "end": "1521679"
  },
  {
    "text": "and also saw a demo of how you can do that and finally we spoke a little bit about how you can use machine learning",
    "start": "1521679",
    "end": "1527840"
  },
  {
    "text": "to supercharge your um exemplar observability so we hope that you are",
    "start": "1527840",
    "end": "1533520"
  },
  {
    "text": "more uh motivated to use exemplars as part of your observability stack moving forward and yeah we're open to questions",
    "start": "1533520",
    "end": "1540600"
  },
  {
    "text": "now thank you",
    "start": "1540600",
    "end": "1544840"
  },
  {
    "text": "[Applause]",
    "start": "1546420",
    "end": "1550449"
  },
  {
    "text": "do we have time for questions maybe you can just come maybe you can just come i'll just come over there",
    "start": "1562320",
    "end": "1568880"
  },
  {
    "text": "all right hello oh hi hi um forgive me if this is",
    "start": "1570240",
    "end": "1575279"
  },
  {
    "text": "a naive question because all I know about EBPF is how to spell it but",
    "start": "1575279",
    "end": "1580760"
  },
  {
    "text": "um layer 7 protocol P parsing is famously difficult to do in a constrained compute environment like",
    "start": "1580760",
    "end": "1586880"
  },
  {
    "text": "EBPF um I know other CNCF projects I've tried and failed so is the magic",
    "start": "1586880",
    "end": "1592000"
  },
  {
    "text": "happening in BA like what is going on inside there is it actually parsing",
    "start": "1592000",
    "end": "1597520"
  },
  {
    "text": "layer 7 inside eB um so I'm not like a eBPF expert as well",
    "start": "1597520",
    "end": "1606880"
  },
  {
    "text": "um but I was able to work with the the maintainers of VPPF to add exemplars to",
    "start": "1606880",
    "end": "1611919"
  },
  {
    "text": "what they were doing so um underneath the hood for how it talks to the kernel",
    "start": "1611919",
    "end": "1617279"
  },
  {
    "text": "to like translate the network requests and then translates them into open telemetry signals like I know that's",
    "start": "1617279",
    "end": "1624799"
  },
  {
    "text": "like what happens in general but I don't know like if it's doing what you're asking if it's translating the layer 7",
    "start": "1624799",
    "end": "1631600"
  },
  {
    "text": "things directly um I mean it we saw that demo it was pretty I think uh",
    "start": "1631600",
    "end": "1637039"
  },
  {
    "text": "comprehensive of all the different services that it was able to automatically instrument whether it was",
    "start": "1637039",
    "end": "1642240"
  },
  {
    "text": "a C service or it was written in go um there are these hooks that bail knows",
    "start": "1642240",
    "end": "1648400"
  },
  {
    "text": "about because basically for each kernel um there are there's the map right where",
    "start": "1648400",
    "end": "1654559"
  },
  {
    "text": "um there are these function calls that it uh expects to call when it talks to the kernel and so bail has this",
    "start": "1654559",
    "end": "1661679"
  },
  {
    "text": "basically addiction ary of all these different function calls that it can call um and so it's able to recognize",
    "start": "1661679",
    "end": "1667600"
  },
  {
    "text": "when that happens and then translates it into something that makes sense for a human so either if it's an HTTP request",
    "start": "1667600",
    "end": "1674720"
  },
  {
    "text": "or a gRPC request um if you want to know more I would recommend talking to the maintainer of BA um he would tell",
    "start": "1674720",
    "end": "1681520"
  },
  {
    "text": "definitely tell you more about it but thanks for the question that's great i appreciate it thank you",
    "start": "1681520",
    "end": "1687720"
  },
  {
    "text": "hi thank you for the talk i was just wondering uh it wasn't entirely clear to me in the demo the metric series with",
    "start": "1689440",
    "end": "1695600"
  },
  {
    "text": "the exemplars are they newly created by BA or is it somehow correlating existing",
    "start": "1695600",
    "end": "1700640"
  },
  {
    "text": "histograms and somehow adding yeah so so the metric series were created by BA um",
    "start": "1700640",
    "end": "1707200"
  },
  {
    "text": "and uh the exemplars uh were attached to those metrics that it created um but the",
    "start": "1707200",
    "end": "1713440"
  },
  {
    "text": "metrics that it creates is an open telemetry metric as well so um it would",
    "start": "1713440",
    "end": "1719919"
  },
  {
    "text": "also conform to the um the semantic conventions that open telemetry proposes so if you have a dashboard that knows",
    "start": "1719919",
    "end": "1726640"
  },
  {
    "text": "how to like look at semantic conventioned you know regulated metrics then it should just work the same um and",
    "start": "1726640",
    "end": "1733120"
  },
  {
    "text": "there's a lot of work to make it possible to have the bailout be included",
    "start": "1733120",
    "end": "1738159"
  },
  {
    "text": "in projects that are already having manual instrumentation so there shouldn't be a lot of like collisions",
    "start": "1738159",
    "end": "1743679"
  },
  {
    "text": "between those two awesome thank you you're welcome",
    "start": "1743679",
    "end": "1749158"
  },
  {
    "text": "thank you for the talk um my question is you know in the time series there will",
    "start": "1750320",
    "end": "1756720"
  },
  {
    "text": "be trace ID to crosscorrelate between uh the metric and the traces i think that's",
    "start": "1756720",
    "end": "1762159"
  },
  {
    "text": "basic idea but uh and there's also I think the log relation right you know the both metrics and logs could be you",
    "start": "1762159",
    "end": "1769840"
  },
  {
    "text": "will be able to you know find the related uh event uh in traces or logs uh with a",
    "start": "1769840",
    "end": "1776799"
  },
  {
    "text": "certain outlier metric uh so uh when this things scale up because I think",
    "start": "1776799",
    "end": "1782640"
  },
  {
    "text": "this will be available for all data points and there will large cardalities",
    "start": "1782640",
    "end": "1788000"
  },
  {
    "text": "and you will need to query lots of logs and metrics and trace if it's not",
    "start": "1788000",
    "end": "1793679"
  },
  {
    "text": "embedded in the exampler itself uh for machine learning or you know other do the root cause analysis you you might",
    "start": "1793679",
    "end": "1800000"
  },
  {
    "text": "need to sift through uh lots of logs or traces just to get the complete picture",
    "start": "1800000",
    "end": "1806720"
  },
  {
    "text": "uh uh so uh wouldn't it be a problem or you know the the what will be the",
    "start": "1806720",
    "end": "1813120"
  },
  {
    "text": "strategy you know uh to get the complete picture embedding it into the exampler",
    "start": "1813120",
    "end": "1818159"
  },
  {
    "text": "already during the generation or uh is is is there any you know strategy",
    "start": "1818159",
    "end": "1824080"
  },
  {
    "text": "about that um so uh I think what you're asking is",
    "start": "1824080",
    "end": "1829679"
  },
  {
    "text": "because there's so much of logs and traces if you just embed an ID then would it be a lot of information to",
    "start": "1829679",
    "end": "1835919"
  },
  {
    "text": "fetch Yeah it will it will be hard to find the right trace ID between you know billions of traces billions of logs and you have",
    "start": "1835919",
    "end": "1843279"
  },
  {
    "text": "an exampler if it doesn't have the full context that's what I understood you want to let's say you know do do a root",
    "start": "1843279",
    "end": "1848720"
  },
  {
    "text": "cause analysis based on some outlier data points right and you want to get the full picture you need to find them",
    "start": "1848720",
    "end": "1855919"
  },
  {
    "text": "by trace ids right everything is not in exampler that that's the part I didn't get you know what should be the context",
    "start": "1855919",
    "end": "1861520"
  },
  {
    "text": "of exampler or how much you need to get from the other relevant events yeah so",
    "start": "1861520",
    "end": "1867120"
  },
  {
    "text": "that information is embedded within the exemplar so you have a trace ID which um",
    "start": "1867120",
    "end": "1872159"
  },
  {
    "text": "essentially points you to the particular trace that you need to look at and um the Same with logs you can look at a",
    "start": "1872159",
    "end": "1877440"
  },
  {
    "text": "particular log um which corresponds to that outlier uh time series data point",
    "start": "1877440",
    "end": "1882960"
  },
  {
    "text": "so with exemplars you get um all three of all three metrics traces and logs for",
    "start": "1882960",
    "end": "1889440"
  },
  {
    "text": "a particular uh time window and it's very limited uh context there but it's",
    "start": "1889440",
    "end": "1896080"
  },
  {
    "text": "very rich context so you don't really have to go and like sift through go ahead and fetch yeah okay thank you",
    "start": "1896080",
    "end": "1903559"
  },
  {
    "text": "hello very nice talk uh I have one simple question is there any alternative",
    "start": "1906559",
    "end": "1912320"
  },
  {
    "text": "dashboard for um showing the exemplars despite the graphana",
    "start": "1912320",
    "end": "1918880"
  },
  {
    "text": "um not that I'm aware of i did talk to the maintainers for Persus uh the other",
    "start": "1918880",
    "end": "1924640"
  },
  {
    "text": "sandbox I think project right now in CNCF that allows for querying metrics and traces um that was like a maybe a",
    "start": "1924640",
    "end": "1933120"
  },
  {
    "text": "couple months ago but they said they were looking into getting that uh working um but as far as I know there",
    "start": "1933120",
    "end": "1939679"
  },
  {
    "text": "this is just one dashboard or I think Graphfana is the only one that I'm aware",
    "start": "1939679",
    "end": "1944880"
  },
  {
    "text": "of that can show exemplars in a dashboard um the the Graphana itself",
    "start": "1944880",
    "end": "1950640"
  },
  {
    "text": "doesn't you don't need to necessarily use it the idea is that um it makes it",
    "start": "1950640",
    "end": "1956159"
  },
  {
    "text": "possible to visualize just like with an open- source uh uh project um the idea",
    "start": "1956159",
    "end": "1963679"
  },
  {
    "text": "of getting an exemplar is just in Prometheus right querying uh Prometheus",
    "start": "1963679",
    "end": "1968880"
  },
  {
    "text": "for the exemplar data you can take that um uh when you're querying the metric",
    "start": "1968880",
    "end": "1974799"
  },
  {
    "text": "and then just add it on top of whatever dashboard that you're visualizing to be",
    "start": "1974799",
    "end": "1980000"
  },
  {
    "text": "able to jump to the um to the trace so Graphfana isn't doing anything magical",
    "start": "1980000",
    "end": "1985919"
  },
  {
    "text": "here with viewing exemplars they're just one um company that's doing it right now",
    "start": "1985919",
    "end": "1991760"
  },
  {
    "text": "um it wouldn't be very hard to add it to persist i would I would argue thank you you're welcome",
    "start": "1991760",
    "end": "2000440"
  },
  {
    "text": "uh yeah thank you for the talk um I have a question that is related to previous question um and that's the the gRPC",
    "start": "2001440",
    "end": "2009360"
  },
  {
    "text": "method and also the HTTP uh path was included in the uh exampler as I saw so",
    "start": "2009360",
    "end": "2017080"
  },
  {
    "text": "uh do you have any recommendation regarding scaling uh because it would",
    "start": "2017080",
    "end": "2022880"
  },
  {
    "text": "increase the cardinality because if understood correct it's really within uh within the metric right right yeah so if",
    "start": "2022880",
    "end": "2031120"
  },
  {
    "text": "you know that um if if if you're basically allowing the route value to be",
    "start": "2031120",
    "end": "2038559"
  },
  {
    "text": "determined by anybody that makes these HTTP requests the cardality could explode pretty pretty quickly um so I",
    "start": "2038559",
    "end": "2045760"
  },
  {
    "text": "would only do that if you're tightly controlling what kind of requests can be uh made to these specific services um if",
    "start": "2045760",
    "end": "2053200"
  },
  {
    "text": "you know that it's like a opened u like service that anybody can send requests to I would add some filtering logic to",
    "start": "2053200",
    "end": "2060800"
  },
  {
    "text": "drop those specific attributes before they get sent over or do some pre-agregation before like that makes",
    "start": "2060800",
    "end": "2066720"
  },
  {
    "text": "sense so that you can still use it later um yeah you could then for example",
    "start": "2066720",
    "end": "2072158"
  },
  {
    "text": "correlate it and you could then for example correlate it to a trace and get the path from there would that work uh",
    "start": "2072159",
    "end": "2078960"
  },
  {
    "text": "uh yeah I mean if you're if you're if you're sampling every single trace yeah you that would be that would be poss",
    "start": "2078960",
    "end": "2084960"
  },
  {
    "text": "Yeah okay okay thank you yeah mhm i think that's all the questions thank you",
    "start": "2084960",
    "end": "2090560"
  },
  {
    "text": "thank you so much",
    "start": "2090560",
    "end": "2093359"
  }
]