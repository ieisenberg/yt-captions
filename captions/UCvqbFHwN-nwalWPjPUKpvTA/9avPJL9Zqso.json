[
  {
    "start": "0",
    "end": "78000"
  },
  {
    "text": "good afternoon and welcome my name is Dan Williams and I'm a member of the cube Con program committee and your track hosts for this session just a",
    "start": "30",
    "end": "7379"
  },
  {
    "text": "reminder if you could give your feedback for this talk after the talk via skate comm that would be greatly appreciated",
    "start": "7379",
    "end": "14809"
  },
  {
    "text": "Sam and Max both work on containers at AWS helping",
    "start": "14809",
    "end": "20460"
  },
  {
    "text": "build core components behind AWS Fargate Amazon eks and Amazon ECS Sam has been a",
    "start": "20460",
    "end": "26430"
  },
  {
    "text": "docker and mobi contributor since 2015 and a container D contributor since 2017 max is a container D maintainer and both",
    "start": "26430",
    "end": "34140"
  },
  {
    "text": "max and Sam currently help build fire cracker container D to rent containers with hypervisor provided isolation so",
    "start": "34140",
    "end": "41340"
  },
  {
    "text": "without further ado Sam and Max with extending container D cool so thanks for",
    "start": "41340",
    "end": "48120"
  },
  {
    "text": "that introduction I guess I don't have to really introduce myself anymore but we're really happy to be here today to",
    "start": "48120",
    "end": "54210"
  },
  {
    "text": "talk about extending container D so we can start with just a brief overview of",
    "start": "54210",
    "end": "60059"
  },
  {
    "text": "what we're going to talk about today first thing I'm gonna just a brief introduction of what container D is talk",
    "start": "60059",
    "end": "66180"
  },
  {
    "text": "a little bit about its architecture and the modularity of that architecture we'll move on to some of the extension",
    "start": "66180",
    "end": "72990"
  },
  {
    "text": "techniques and then we'll have some examples so first we're gonna talk about container D I hope that if you're at",
    "start": "72990",
    "end": "79710"
  },
  {
    "start": "78000",
    "end": "78000"
  },
  {
    "text": "this talk you're at least somewhat familiar with containers and maybe you've heard of container D or maybe you've used it or some of the people",
    "start": "79710",
    "end": "85320"
  },
  {
    "text": "here work on container D which is also really cool so just for anyone who's not",
    "start": "85320",
    "end": "90869"
  },
  {
    "text": "super familiar it's a really small and focused container runtime it has a really limited scope so it's a container",
    "start": "90869",
    "end": "99420"
  },
  {
    "text": "runtime that was built by many of the same folks who've worked on docker with",
    "start": "99420",
    "end": "104430"
  },
  {
    "text": "a lot of the lessons learned from things that worked really well in docker and things that were a little bit more challenging in docker so it has a bit of",
    "start": "104430",
    "end": "111360"
  },
  {
    "text": "a different focus it's really just focused on running containers and not any of the higher-level things that",
    "start": "111360",
    "end": "118290"
  },
  {
    "text": "docker does things like overlay networking or built in logging features or clustered storage or all out of scope",
    "start": "118290",
    "end": "123869"
  },
  {
    "text": "for container D so it's really just focused on the core problem of running and managing containers",
    "start": "123869",
    "end": "129929"
  },
  {
    "text": "and it's built out of these modular composable pieces that can be extended and that's the the main thing that we",
    "start": "129929",
    "end": "135180"
  },
  {
    "text": "really want to talk about today so I can give you a little bit of an overview of what the architecture looks like it's a",
    "start": "135180",
    "end": "141959"
  },
  {
    "text": "bunch of independent pieces that are meant to work well together the primary way that you interact with container D",
    "start": "141959",
    "end": "148469"
  },
  {
    "text": "is through the G RPC API or an adapter like a thick client library that's",
    "start": "148469",
    "end": "154379"
  },
  {
    "text": "provided by container D typically the users of container D are not someone",
    "start": "154379",
    "end": "159840"
  },
  {
    "text": "interacting on the command line but are rather a higher-level application like a container Orchestrator that's meant to integrate",
    "start": "159840",
    "end": "166019"
  },
  {
    "text": "with container D so this diagram shows some of the components and we're going to take a look at a couple of them the",
    "start": "166019",
    "end": "171989"
  },
  {
    "text": "first donut that I want to highlight is container DS contents store this is used for storing the raw content of images",
    "start": "171989",
    "end": "178799"
  },
  {
    "text": "that's usually things like compressed image layers when you pull an image with container D it ends up in the content",
    "start": "178799",
    "end": "184980"
  },
  {
    "text": "store and the layers are typically stored in an archive format like at R and R not extracted onto the filesystem",
    "start": "184980",
    "end": "191540"
  },
  {
    "text": "so what I want to talk a little bit about just what are layers because this",
    "start": "191540",
    "end": "197190"
  },
  {
    "start": "193000",
    "end": "193000"
  },
  {
    "text": "is a little bit interesting and relevant in container images you usually have some sort of concept of a union",
    "start": "197190",
    "end": "204870"
  },
  {
    "text": "filesystem that composes different layers together I've got a diagram here that tries to show this a little bit so",
    "start": "204870",
    "end": "211349"
  },
  {
    "text": "you can see that there's three layers in the bottom the one that's labeled the base layer is a read-only layer and has",
    "start": "211349",
    "end": "218099"
  },
  {
    "text": "a few files in it there's an intermediate layer above it that has one",
    "start": "218099",
    "end": "223109"
  },
  {
    "text": "of the files that goes straight through it another one that is modified or replaced and a third one that's deleted",
    "start": "223109",
    "end": "228569"
  },
  {
    "text": "and then there's a top layer which has another new file and shows two of the",
    "start": "228569",
    "end": "233759"
  },
  {
    "text": "files that are shown through from previous layers the way that layered",
    "start": "233759",
    "end": "241349"
  },
  {
    "text": "file systems work is that the files stay in the layer that they're originally written in so something that was in that",
    "start": "241349",
    "end": "247229"
  },
  {
    "text": "base layer doesn't have to be duplicated in the other ones this lets you enable things like sharing layers between",
    "start": "247229",
    "end": "253139"
  },
  {
    "text": "different images and lets you have a really fast cheap startup time because you put an empty writable layer on the",
    "start": "253139",
    "end": "259340"
  },
  {
    "text": "without having to copy all of the content so why am I talking about this",
    "start": "259340",
    "end": "264970"
  },
  {
    "text": "the contents store that we talked about stores layers in a compressed format and doesn't actually implement this",
    "start": "264970",
    "end": "270139"
  },
  {
    "text": "copy-on-write or the union of the file system so that's implemented by the next part of the container D stack which is the",
    "start": "270139",
    "end": "275990"
  },
  {
    "start": "274000",
    "end": "274000"
  },
  {
    "text": "snapshot or layers from the content store unpacked into a some sort of file",
    "start": "275990",
    "end": "281270"
  },
  {
    "text": "system in the snapshot ER and the snapshot is typically implementing copy-on-write functionality so you don't",
    "start": "281270",
    "end": "286760"
  },
  {
    "text": "have to duplicate all of the contents if you used docker before you've seen this in Dockers storage or graph drivers the",
    "start": "286760",
    "end": "293990"
  },
  {
    "text": "snapshot is in container d are similar but they have a little bit of different implementation choices just like docker",
    "start": "293990",
    "end": "300800"
  },
  {
    "text": "there can be multiple different implementations of snapchatters and the different implementations can do whatever they want as long as they",
    "start": "300800",
    "end": "306889"
  },
  {
    "text": "produce at the end of the day something that looks like a union of the file system together and you have different",
    "start": "306889",
    "end": "312169"
  },
  {
    "text": "implementations that can offer different trade-offs and things like speed or efficiency the next thing I want to look",
    "start": "312169",
    "end": "318860"
  },
  {
    "text": "at is when you want to actually run containers you use a runtime container d",
    "start": "318860",
    "end": "324110"
  },
  {
    "text": "will dispatch to some lower level runtime implementation that goes and implements the the parts of containers",
    "start": "324110",
    "end": "331010"
  },
  {
    "text": "that we're all familiar with things in Linux like C groups and namespaces seccomp capabilities in container D by",
    "start": "331010",
    "end": "337940"
  },
  {
    "text": "default there it uses the reference implementation of the OCI standard which is called run C and that does normal",
    "start": "337940",
    "end": "344120"
  },
  {
    "text": "Linux containers through all of those Linux technologies but you could plug in",
    "start": "344120",
    "end": "349729"
  },
  {
    "text": "something different and maybe something that wasn't even containers you could have it run anything that fits either the OCI standard that container D",
    "start": "349729",
    "end": "356479"
  },
  {
    "text": "supports or container D also has a version to a slightly different way of interacting with runtimes but it's built",
    "start": "356479",
    "end": "361940"
  },
  {
    "text": "to let you run something different than run C if you want the GRP C API is the",
    "start": "361940",
    "end": "369229"
  },
  {
    "text": "central interaction point for container D it mediates interaction with each of the parts of container D so a client",
    "start": "369229",
    "end": "375350"
  },
  {
    "text": "doesn't have to know about all of the different ways that container D is decomposed it has a central place where",
    "start": "375350",
    "end": "380570"
  },
  {
    "text": "it can interact and not have to call a bunch of different places there's also a client library that builds functionality",
    "start": "380570",
    "end": "387229"
  },
  {
    "text": "on top of the GRP C API that talks multiple services for example",
    "start": "387229",
    "end": "392780"
  },
  {
    "text": "the workflow for pulling an image actually involves a bunch of different API calls to different services as part",
    "start": "392780",
    "end": "398550"
  },
  {
    "text": "of container D through the GRP C API things like actually storing the content in the content store unpacking it into",
    "start": "398550",
    "end": "405270"
  },
  {
    "text": "the snapshot O's and so forth so what is container DS overall architecture it's a",
    "start": "405270",
    "end": "411750"
  },
  {
    "start": "409000",
    "end": "409000"
  },
  {
    "text": "modular core built of small separate services that are designed for extensibility and to make it functional you can use those services together you",
    "start": "411750",
    "end": "418740"
  },
  {
    "text": "have interactions that are modeled as interfaces through the ERP C API and plug-in mechanisms that make it easy to",
    "start": "418740",
    "end": "425039"
  },
  {
    "text": "replace different implementations when you want something different and there's a client library that hides that complexity from you and ties it all",
    "start": "425039",
    "end": "431039"
  },
  {
    "text": "together so now that we know a little bit about how container D works we can move on to some of the extension points",
    "start": "431039",
    "end": "437699"
  },
  {
    "text": "where you can customize it there's five basic extension points for container D the first one is the thick client",
    "start": "437699",
    "end": "444240"
  },
  {
    "start": "439000",
    "end": "439000"
  },
  {
    "text": "library that I talked about a little bit before in go that models interactions as in ergo interfaces and so it has the",
    "start": "444240",
    "end": "451979"
  },
  {
    "text": "ability to let you swap some of the implementations of those interfaces for different things when you want to change",
    "start": "451979",
    "end": "457080"
  },
  {
    "text": "the way that the client is working the next is what I call CLI or executable",
    "start": "457080",
    "end": "463860"
  },
  {
    "text": "plugins which are programs that container DX Acutes for you and you can tell it to run a different program",
    "start": "463860",
    "end": "469020"
  },
  {
    "text": "instead of the one that it's going to run by default the third is g RPC proxy plugins where you can implement the",
    "start": "469020",
    "end": "474930"
  },
  {
    "text": "entire interface of one of the container DS services in a separate program and have container D call into that program",
    "start": "474930",
    "end": "480990"
  },
  {
    "text": "for you the next one is dynamically linked go plugins these are dynamically",
    "start": "480990",
    "end": "486750"
  },
  {
    "text": "linked libraries shared object files that you can compile with go and load into container D and have it do",
    "start": "486750",
    "end": "492930"
  },
  {
    "text": "different things and the last one if you need something that is the most powerful you can run built-in plugins where",
    "start": "492930",
    "end": "499710"
  },
  {
    "text": "you've compiled your own build of container D and changed its functionality that way so let's go a",
    "start": "499710",
    "end": "504780"
  },
  {
    "text": "little bit into depth for these techniques and the first one that we're gonna talk about is the client library",
    "start": "504780",
    "end": "510000"
  },
  {
    "text": "so container D is built for programmatic interactions and models a lot of its functionality in this thick client",
    "start": "510000",
    "end": "515490"
  },
  {
    "text": "library written in go the client library orchestrates calls across container DS GRP C API but also implements",
    "start": "515490",
    "end": "522380"
  },
  {
    "text": "portions of common workflows like pulling images these common workflows are modeled with interfaces and you can",
    "start": "522380",
    "end": "528320"
  },
  {
    "text": "use your own implementation when you want behavior that is different from the standard behavior that container D has some of the downsides of this or that",
    "start": "528320",
    "end": "534950"
  },
  {
    "text": "you do actually need to control the calling code for it so if you're writing your own integration with container D",
    "start": "534950",
    "end": "540230"
  },
  {
    "text": "it's really easy to extend the client library and do something different but if you're using a an integration that",
    "start": "540230",
    "end": "546020"
  },
  {
    "text": "someone else is already written you're not going to be able to customize it that way so let's dig into the pull",
    "start": "546020",
    "end": "551690"
  },
  {
    "start": "550000",
    "end": "550000"
  },
  {
    "text": "workflow in community the actual network transfer of images happens inside the client library not in the container D",
    "start": "551690",
    "end": "558140"
  },
  {
    "text": "daemon itself this is really unlike docker so in docker there's a single API",
    "start": "558140",
    "end": "565520"
  },
  {
    "text": "call for pull and it handles all of the networking in container D it's decomposed into a bunch of different",
    "start": "565520",
    "end": "570680"
  },
  {
    "text": "steps and the client library handles orchestrating those steps for you so there's a default implementation that",
    "start": "570680",
    "end": "576710"
  },
  {
    "text": "can handle talking to a docker registry but it's really easy to customize if you need something that's different for",
    "start": "576710",
    "end": "582080"
  },
  {
    "text": "example if you want to use docker style image names but reference a different network endpoint or if you want to",
    "start": "582080",
    "end": "587390"
  },
  {
    "text": "customize encryption settings or timeouts it's really easy to do that from the client library or if you want something completely different like a",
    "start": "587390",
    "end": "593330"
  },
  {
    "text": "different transfer protocol say something like BitTorrent you could do that as well we ended up writing an",
    "start": "593330",
    "end": "598520"
  },
  {
    "text": "implementation for Amazon ECR the container registry that AWS offers that",
    "start": "598520",
    "end": "603530"
  },
  {
    "text": "uses the the ECR api directly instead of docker api and I'll show you a little",
    "start": "603530",
    "end": "609200"
  },
  {
    "text": "bit about how how we were able to do that so this is the default interaction",
    "start": "609200",
    "end": "615470"
  },
  {
    "start": "612000",
    "end": "612000"
  },
  {
    "text": "to pulling in to pull an image using the client library and this uses the default resolver which is the thing that knows",
    "start": "615470",
    "end": "621920"
  },
  {
    "text": "how to talk to the docker registry you can see here that there's it's fairly simple it's just calling a pull function",
    "start": "621920",
    "end": "628160"
  },
  {
    "text": "and passing the image and a couple of options that go along with it so use a",
    "start": "628160",
    "end": "633200"
  },
  {
    "start": "633000",
    "end": "633000"
  },
  {
    "text": "different resolver like the one that we wrote for ECR your call looks very similar the only differences here are that you construct the resolver object",
    "start": "633200",
    "end": "639860"
  },
  {
    "text": "that you want to use and then you pass that resolver object to the pull function and the poll function will know",
    "start": "639860",
    "end": "645320"
  },
  {
    "text": "how to use the capabilities that the resolver provides some resolvers are",
    "start": "645320",
    "end": "651380"
  },
  {
    "text": "going to require maybe a different image name format and so you may to change that as well so what does it",
    "start": "651380",
    "end": "656860"
  },
  {
    "text": "look like to go and build a resolver this is the resolver interface which is a the basic thing that needs to be",
    "start": "656860",
    "end": "664000"
  },
  {
    "start": "658000",
    "end": "658000"
  },
  {
    "text": "implemented and it has three methods so the first one is called resolve and that returns two things that are useful and",
    "start": "664000",
    "end": "670630"
  },
  {
    "text": "interesting the first is a canonicalized identifier for the image and that's in the docker implementation the thing that",
    "start": "670630",
    "end": "677800"
  },
  {
    "text": "will turn a name of an image that includes a tag into something that is identified by a digest it also returns a",
    "start": "677800",
    "end": "684730"
  },
  {
    "text": "descriptor object that community uses in subsequent calls there's two more functions here and they look really",
    "start": "684730",
    "end": "690880"
  },
  {
    "text": "similar to each other there's a fetcher and a pusher and these both return objects that know how to get content or",
    "start": "690880",
    "end": "697510"
  },
  {
    "text": "how to push object to a remote if you only really care about retrieving things",
    "start": "697510",
    "end": "703180"
  },
  {
    "text": "you can implement a resolver with just the fetcher you don't have to implement the pusher but if you want to put push",
    "start": "703180",
    "end": "709180"
  },
  {
    "text": "and pull images you need to implement all of these parts so let's look a little bit at the fetcher interface this",
    "start": "709180",
    "end": "715450"
  },
  {
    "text": "has one method that takes a descriptor and returns a reader for stream of data and the client can call this and then",
    "start": "715450",
    "end": "720910"
  },
  {
    "text": "have access to whatever it's trying to retrieve so the descriptor is what specifies the actual object that's",
    "start": "720910",
    "end": "726100"
  },
  {
    "text": "trying to be retrieved and images consist of a bunch of different objects things like an index and a manifests",
    "start": "726100",
    "end": "731470"
  },
  {
    "text": "some config and all of the actual layer contents and this fetch method will get",
    "start": "731470",
    "end": "736750"
  },
  {
    "text": "called once for each of those objects that needs to be retrieved some of the calls are going to involve so the for",
    "start": "736750",
    "end": "742840"
  },
  {
    "text": "example if you're calling fetch for the index the next call you're going to use the day that you retrieved from the",
    "start": "742840",
    "end": "748840"
  },
  {
    "text": "index to call and get the manifest and then the next call is going to use the data that you saved from the manifest to go and actually get the layers this",
    "start": "748840",
    "end": "755860"
  },
  {
    "text": "means that the same fetch method is used for all of the different objects that make up an image the reader that's",
    "start": "755860",
    "end": "761590"
  },
  {
    "text": "returned actually hides the implementation of the network activity from the client so it's a responsibility",
    "start": "761590",
    "end": "766900"
  },
  {
    "text": "of the fetcher to do whatever it wants to do in the ECR resolver that we wrote we have a fetcher that can make multiple",
    "start": "766900",
    "end": "772750"
  },
  {
    "text": "parallel requests for different content ranges in the same layer that gets us a lot faster downloads than the default if",
    "start": "772750",
    "end": "779310"
  },
  {
    "text": "you wanted your custom implementation to be able to push push images you also need to implement the pusher and this is",
    "start": "779310",
    "end": "785500"
  },
  {
    "text": "looks a lot like the fetcher they mean differ here's that it returns a writer where you write content instead of a reader",
    "start": "785500",
    "end": "791110"
  },
  {
    "text": "where you're reading content and you don't always have to use the same writer or return the same writer object out of",
    "start": "791110",
    "end": "796870"
  },
  {
    "text": "this in the ECR implementation for example we return different writers for different kinds of content so we have a",
    "start": "796870",
    "end": "801970"
  },
  {
    "text": "separate writer for manifest as opposed to the layer contents so at this point",
    "start": "801970",
    "end": "808600"
  },
  {
    "text": "I'm gonna hand it over to max and he's gonna tell you a little bit more hey",
    "start": "808600",
    "end": "815380"
  },
  {
    "text": "everyone so Sam talked about client-side extensibility let's discuss",
    "start": "815380",
    "end": "820750"
  },
  {
    "text": "server-side continued dick has notion of executable plugins and uses them in a",
    "start": "820750",
    "end": "826180"
  },
  {
    "text": "lot of places to extend its functionality essentially it's a separate binary invoked by continuity at",
    "start": "826180",
    "end": "832510"
  },
  {
    "text": "some point that conforms to certain conventions and depending on plug-in type conventions might be different",
    "start": "832510",
    "end": "838890"
  },
  {
    "text": "let's see how it works first example of such plugin is runtime continually",
    "start": "838890",
    "end": "845710"
  },
  {
    "start": "841000",
    "end": "841000"
  },
  {
    "text": "delegate the control of containers to an external binaries and communicates with",
    "start": "845710",
    "end": "851050"
  },
  {
    "text": "them through a DC channel runtime candles all implementation details how",
    "start": "851050",
    "end": "856420"
  },
  {
    "text": "to run your containers in continued either is run GB to run time that is",
    "start": "856420",
    "end": "861610"
  },
  {
    "text": "used by default and it uses Linux kernel primitive store on containers like namespaces in C groups and others but it",
    "start": "861610",
    "end": "869860"
  },
  {
    "text": "can be literally anything for instance in a gradual continuity project we have built our custom runtime",
    "start": "869860",
    "end": "875740"
  },
  {
    "text": "and it managed by a cracker micro VM instance SC instead of managing Linux kernel parameters and inside of these",
    "start": "875740",
    "end": "883180"
  },
  {
    "text": "VMs we run containers so what do we need to do to build our entire first",
    "start": "883180",
    "end": "890080"
  },
  {
    "start": "886000",
    "end": "886000"
  },
  {
    "text": "continuity expects name of the binary to be perfect this container do ship so it's easier for users to list running",
    "start": "890080",
    "end": "896440"
  },
  {
    "text": "processes on the system second a binary has to be at pass in order to be located",
    "start": "896440",
    "end": "902560"
  },
  {
    "text": "by continuity and the last one it should",
    "start": "902560",
    "end": "907750"
  },
  {
    "text": "support if you complain arguments when continue durant's you container it invokes binary with start argument this",
    "start": "907750",
    "end": "915340"
  },
  {
    "text": "indicates that we are about to start new container it is expected that you're on time start",
    "start": "915340",
    "end": "922949"
  },
  {
    "text": "the service in background and returns it's addressing STD out back to continuity it's up to run time whether",
    "start": "922949",
    "end": "929910"
  },
  {
    "text": "it runs a new background service for each container or it just really uses",
    "start": "929910",
    "end": "935010"
  },
  {
    "text": "existing instance similarly to start continuity we'll call a binary with deleted argument so run time",
    "start": "935010",
    "end": "941670"
  },
  {
    "text": "implementations have a chance to clean up resources so every run time must",
    "start": "941670",
    "end": "947850"
  },
  {
    "text": "implement a service interface over the domain socket this is how continued he controls container instances here's how",
    "start": "947850",
    "end": "956639"
  },
  {
    "text": "the service interface looks like there are lot of green one here but most of this correspond to a process lifecycle",
    "start": "956639",
    "end": "963380"
  },
  {
    "text": "so for instance create creates a new process and the container there is a",
    "start": "963380",
    "end": "968970"
  },
  {
    "text": "fire root the first fire container how to handle STD out a bunch of other options similarly start actually starts a",
    "start": "968970",
    "end": "975690"
  },
  {
    "text": "process way to a way to wait for the one to finish and so on you don't have to",
    "start": "975690",
    "end": "982680"
  },
  {
    "text": "write your own time intimidation from zero continually has helper packages to hide a lot of complexity from you like",
    "start": "982680",
    "end": "989750"
  },
  {
    "text": "handle complain arguments signals login events or running a TT OPC server so",
    "start": "989750",
    "end": "996360"
  },
  {
    "text": "instead you can focus on the service implementation itself the snippet",
    "start": "996360",
    "end": "1003740"
  },
  {
    "text": "demonstrates how runtime into point my tool pike here Shindo tran is continually helpers that hides all setup",
    "start": "1003740",
    "end": "1009560"
  },
  {
    "text": "complexity and you are only required to provide service implementation so when",
    "start": "1009560",
    "end": "1018110"
  },
  {
    "text": "you have your own time now you have to tell continue D to use it when running a new container instead of default one",
    "start": "1018110",
    "end": "1024370"
  },
  {
    "text": "this can be done either through continued decline that Sam mentioned or using CTR with random argument like in",
    "start": "1024370",
    "end": "1033438"
  },
  {
    "text": "this example another extensibility point is proxy",
    "start": "1033439",
    "end": "1040019"
  },
  {
    "text": "plugins they are similar to runtime plugins it's a separate process that",
    "start": "1040019",
    "end": "1045240"
  },
  {
    "text": "implements one of proxy interfaces the only difference is that now you are responsible for a process lifecycle that",
    "start": "1045240",
    "end": "1052200"
  },
  {
    "text": "means that continuity doesn't invoke binary for you and there are no started delete arguments instead you have to",
    "start": "1052200",
    "end": "1059220"
  },
  {
    "text": "configure continuity in advance and tell what kind of proxy plugin are you going",
    "start": "1059220",
    "end": "1064500"
  },
  {
    "text": "to run and how to communicate with it early development stages of Fagor",
    "start": "1064500",
    "end": "1070500"
  },
  {
    "text": "contain a deal we were developing the device mapper snapshot as proxy plugin and just simplify it other lives I give",
    "start": "1070500",
    "end": "1077460"
  },
  {
    "text": "a sort of room for experiments there are",
    "start": "1077460",
    "end": "1082649"
  },
  {
    "start": "1081000",
    "end": "1081000"
  },
  {
    "text": "two types of proxies plugins supported today it's a sneak shorter and content store this talk will focus on",
    "start": "1082649",
    "end": "1088889"
  },
  {
    "text": "controllers so sneak furthers our mechanism for providing file system to containers the implement layer unions as",
    "start": "1088889",
    "end": "1096240"
  },
  {
    "text": "I mentioned previously so difference in each other's implement different strategies how to deal with",
    "start": "1096240",
    "end": "1101250"
  },
  {
    "text": "layers so for instant there is no overlaid controller that witch cookies",
    "start": "1101250",
    "end": "1107250"
  },
  {
    "text": "entire file on each right and there is a bit of a that does more lightweight block level cookies",
    "start": "1107250",
    "end": "1112830"
  },
  {
    "text": "there are also offerings of block device based or others like device mapper and",
    "start": "1112830",
    "end": "1118169"
  },
  {
    "text": "LBM similar to run times continually",
    "start": "1118169",
    "end": "1123929"
  },
  {
    "text": "have helper packages that provide Jerry PC wrappers for you you would only need",
    "start": "1123929",
    "end": "1129960"
  },
  {
    "text": "to implement a flood or interface itself let's have a brief look how it would",
    "start": "1129960",
    "end": "1137100"
  },
  {
    "text": "fight these are used to control filesystem layers to be used by container there are two major function",
    "start": "1137100",
    "end": "1144000"
  },
  {
    "text": "that worth to highlight so for instance when continually pulling an image continued equals",
    "start": "1144000",
    "end": "1149389"
  },
  {
    "text": "prepare to create a new layer prepare return small structures that can be used",
    "start": "1149389",
    "end": "1155370"
  },
  {
    "text": "to mount snapshot for capturing changes after that container G will unpack their data from content store into the",
    "start": "1155370",
    "end": "1162299"
  },
  {
    "text": "snapshot and then continue Tico's commit to seal the snapshot so it cannot be",
    "start": "1162299",
    "end": "1168210"
  },
  {
    "text": "changed anymore but it can be used as a parent or available for reading using Buechel also a continually calls this",
    "start": "1168210",
    "end": "1177299"
  },
  {
    "text": "interface for each image layer to build change and chain of the snapshots when",
    "start": "1177299",
    "end": "1184049"
  },
  {
    "text": "running a new container continually will invoke prepare one more time to create a ridge where a read/write layer on top of",
    "start": "1184049",
    "end": "1190889"
  },
  {
    "text": "this chain of snapshots so when proxy",
    "start": "1190889",
    "end": "1195960"
  },
  {
    "text": "plugin is ready for use you need to register it in continuities configuration file here is called",
    "start": "1195960",
    "end": "1202649"
  },
  {
    "text": "typical proxy plug-in configuration would look like here type defines what kind of interface your plugin implements",
    "start": "1202649",
    "end": "1209220"
  },
  {
    "text": "and addresses local local socket file location which continually uses to communicate with your proxy plugin",
    "start": "1209220",
    "end": "1217610"
  },
  {
    "text": "similarly to run time you have to tell continually to use your proxy plugin you",
    "start": "1218059",
    "end": "1223529"
  },
  {
    "text": "can do that through client or using ctrl shutter command-line argument another",
    "start": "1223529",
    "end": "1231269"
  },
  {
    "start": "1229000",
    "end": "1229000"
  },
  {
    "text": "extensibility point is go plugins in Faragher contenido project we have built",
    "start": "1231269",
    "end": "1236490"
  },
  {
    "text": "a Jerry PC API extension for contain a team that would allow clients to manage micro VM instances and our original",
    "start": "1236490",
    "end": "1243929"
  },
  {
    "text": "intention was to implement it as go plugin but it turns out that there are a lot of compatibility change challenges",
    "start": "1243929",
    "end": "1251129"
  },
  {
    "text": "with go plugins today so for instance our compiler version that is used to",
    "start": "1251129",
    "end": "1257490"
  },
  {
    "text": "build continuity and your plugin should strictly match including major minor and",
    "start": "1257490",
    "end": "1262500"
  },
  {
    "text": "page numbers dependencies outside like standard libraries that are used by both",
    "start": "1262500",
    "end": "1268619"
  },
  {
    "text": "continuity and extension should also strictly major so you would need to have",
    "start": "1268619",
    "end": "1274379"
  },
  {
    "text": "a separate go plug-in version for each contain a diversion for each platform for each architecture and preferably you",
    "start": "1274379",
    "end": "1282059"
  },
  {
    "text": "would need an integration test to make sure it actually works because you won't get any errors at Build time so instead",
    "start": "1282059",
    "end": "1290340"
  },
  {
    "text": "we ended up with routine approach for our extension the majority of contenido",
    "start": "1290340",
    "end": "1296220"
  },
  {
    "text": "modules are built in plugins around 30 embedded plugins in 1.3 release of contain a deer this includes",
    "start": "1296220",
    "end": "1304769"
  },
  {
    "text": "default implementation of runtime law like currency be to bunch of intruders",
    "start": "1304769",
    "end": "1309990"
  },
  {
    "text": "and various components for orchestrating runtimes new coders and training containers every component can be",
    "start": "1309990",
    "end": "1317399"
  },
  {
    "text": "extended to replace or deleted but the downside is that this cannot be changed",
    "start": "1317399",
    "end": "1323490"
  },
  {
    "text": "at runtime and you have to rebuild a continuity binary you don't have to for",
    "start": "1323490",
    "end": "1331289"
  },
  {
    "start": "1328000",
    "end": "1328000"
  },
  {
    "text": "continue to build your built-in extension essentially you build your own program import existing pieces from",
    "start": "1331289",
    "end": "1338309"
  },
  {
    "text": "continuity add your extension and just have your compost needed functionality",
    "start": "1338309",
    "end": "1344600"
  },
  {
    "text": "so how to build your own continuity distribution essentially you have to",
    "start": "1344899",
    "end": "1350009"
  },
  {
    "text": "write your own main function and register needed plugins here's how main",
    "start": "1350009",
    "end": "1356519"
  },
  {
    "text": "would look like you define minimal and she went to spin a plug-in engine and run several listeners of continuity next",
    "start": "1356519",
    "end": "1364350"
  },
  {
    "text": "within same main that go file your register plugins by important CMS go packages not likely you would want to",
    "start": "1364350",
    "end": "1373200"
  },
  {
    "text": "reuse existing functionality of continuity so you import go packages provided by contingency first and this",
    "start": "1373200",
    "end": "1380610"
  },
  {
    "text": "can be pretty long list and after that you import your ears one in order to",
    "start": "1380610",
    "end": "1389220"
  },
  {
    "text": "make it work like that plug-in must register yourself in a neat package function and provide all details about",
    "start": "1389220",
    "end": "1395940"
  },
  {
    "text": "your plugin here's how a typical registration code would look like you",
    "start": "1395940",
    "end": "1401279"
  },
  {
    "text": "must specify the type of your plugin and identify our so other plugins know how to refer to it optionally you can",
    "start": "1401279",
    "end": "1408210"
  },
  {
    "text": "specify a list of dependencies it needs to be available to your plugin and at runtime continue to build in it a fan",
    "start": "1408210",
    "end": "1414450"
  },
  {
    "text": "function to initialize your plugin code and that's basically it so let's do some",
    "start": "1414450",
    "end": "1421620"
  },
  {
    "text": "demo to see how it works all together",
    "start": "1421620",
    "end": "1425690"
  },
  {
    "text": "that are already hearing yeah okay hopefully everyone can see on the screen",
    "start": "1429950",
    "end": "1436490"
  },
  {
    "text": "so what I have here is a your metal ec2 instance that's set up to run a bunch of",
    "start": "1436490",
    "end": "1443640"
  },
  {
    "text": "stuff with the various integration points that we've written with container",
    "start": "1443640",
    "end": "1449640"
  },
  {
    "text": "D so this is some programs that we've written that do all the stuff that we've",
    "start": "1449640",
    "end": "1456330"
  },
  {
    "text": "talked about so first thing that we're gonna do I'm just going to show you a little bit about what's installed here",
    "start": "1456330",
    "end": "1463400"
  },
  {
    "text": "so we've got a few things that are on there I don't think it's a little hard",
    "start": "1463400",
    "end": "1468690"
  },
  {
    "text": "to read but there's first thing that I want to draw your attention to is the thing called firecracker container D",
    "start": "1468690",
    "end": "1474690"
  },
  {
    "text": "this is our own custom build of container D with a plugin that's built into it so it was doing the process that",
    "start": "1474690",
    "end": "1481320"
  },
  {
    "text": "max was just talking about next thing that we can look at is there's a program here called firecracker this is actually",
    "start": "1481320",
    "end": "1487920"
  },
  {
    "text": "the Firecracker virtual machine monitor that ABS uses to run virtual machines we",
    "start": "1487920",
    "end": "1494370"
  },
  {
    "text": "also have something in here called container D shim a WS firecracker this is the runtime component that goes and",
    "start": "1494370",
    "end": "1501600"
  },
  {
    "text": "interacts with the firecracker process that's there and then there's a thing on in here called EC our poll that is able",
    "start": "1501600",
    "end": "1508050"
  },
  {
    "text": "to it uses a custom resolver to pull images from ECR let's see so we can do",
    "start": "1508050",
    "end": "1517950"
  },
  {
    "text": "is we can go ahead and look at this firecracker container D thing it is just",
    "start": "1517950",
    "end": "1523740"
  },
  {
    "text": "running as a system D unit right now we can go ahead and look at the system D",
    "start": "1523740",
    "end": "1530670"
  },
  {
    "text": "unit file if if you're curious about it just looks like a normal system D unit",
    "start": "1530670",
    "end": "1537530"
  },
  {
    "text": "so let's go ahead and look at what images are present on this instance that",
    "start": "1538580",
    "end": "1544260"
  },
  {
    "text": "I have set up and we're just gonna go ahead and list them and there's nothing there so we can go ahead and pull",
    "start": "1544260",
    "end": "1549600"
  },
  {
    "text": "something first and we're gonna use that ECR pull program that we wrote that's gonna pull the Amazon Linux image from",
    "start": "1549600",
    "end": "1557010"
  },
  {
    "text": "ECR and it can go ahead and pull that and it unpacked it into the device mapper",
    "start": "1557010",
    "end": "1563420"
  },
  {
    "text": "snapshot or that we're using so we can go ahead and see that that pulled properly you can see that it's there so",
    "start": "1563420",
    "end": "1570650"
  },
  {
    "text": "even though we didn't use the CTR command line to pull the image we were able to pull it through the container",
    "start": "1570650",
    "end": "1576650"
  },
  {
    "text": "dapi s and using the different resolver that we wrote so let's see what it looks",
    "start": "1576650",
    "end": "1582290"
  },
  {
    "text": "like to go ahead and run something first thing is it can you hear okay first",
    "start": "1582290",
    "end": "1589250"
  },
  {
    "text": "thing we can look at what this instances is running right now so this is a well",
    "start": "1589250",
    "end": "1595130"
  },
  {
    "text": "it looks like it's a Debian kernel and it's got a host name that looks like an ec2 instance and we can go ahead and",
    "start": "1595130",
    "end": "1601790"
  },
  {
    "text": "look at the OS release file and this just is a normal Debian thing so what",
    "start": "1601790",
    "end": "1608300"
  },
  {
    "text": "we'll do is we'll go ahead and run a container and we'll go look at the same stuff inside the container that we were looking at outside and we'll see what",
    "start": "1608300",
    "end": "1614660"
  },
  {
    "text": "looks different and we're just gonna call this container demo that's what",
    "start": "1614660",
    "end": "1620750"
  },
  {
    "text": "that's on there for so we've got a container running and we can do the same",
    "start": "1620750",
    "end": "1626480"
  },
  {
    "text": "thing that we were doing before we can look at the kernel that's running and you can see it's actually a different",
    "start": "1626480",
    "end": "1632330"
  },
  {
    "text": "kernel so this is the an Amazon Linux - kernel that's running inside a virtual machine it's got a host name that was",
    "start": "1632330",
    "end": "1638570"
  },
  {
    "text": "set to just a micro VM we can look at the same oh s release so and you can see",
    "start": "1638570",
    "end": "1648830"
  },
  {
    "text": "that this is an amazon linux image this is actually the same amazon linux image that you'd be able to run with docker",
    "start": "1648830",
    "end": "1654140"
  },
  {
    "text": "and so that this OS release file is the same file that you would see if you're running things with normal Linux containers but you could see that we're",
    "start": "1654140",
    "end": "1660890"
  },
  {
    "text": "actually running a different kernel which will distinguish it from running just a regular Linux container okay so",
    "start": "1660890",
    "end": "1669520"
  },
  {
    "text": "that was I think a little bit interesting but what we can also look at is what happens on the host when you're",
    "start": "1669520",
    "end": "1675170"
  },
  {
    "text": "running something like this so we can go ahead and run another container and we're just gonna let it sleep in the background for a little bit and we can",
    "start": "1675170",
    "end": "1681650"
  },
  {
    "text": "examine what is going on with the way that the processes are set up on the host so we've got a container and we're",
    "start": "1681650",
    "end": "1687470"
  },
  {
    "text": "running it and what we can look at is what's going on with the processes that are involved",
    "start": "1687470",
    "end": "1693320"
  },
  {
    "text": "so we'll look at the firecracker container D process and we're just gonna look at the processes that are run here",
    "start": "1693320",
    "end": "1698929"
  },
  {
    "text": "and you can actually see a little bit that's different here from a normal container is instead of you being able",
    "start": "1698929",
    "end": "1706130"
  },
  {
    "text": "to see the container processes that are running like you can't see anything here that's called sleep you actually just see this firecracker process and that's",
    "start": "1706130",
    "end": "1712520"
  },
  {
    "text": "the virtual machine monitor that's running and all of the things that are happening inside the VM are encapsulated by that and so that's pretty much the",
    "start": "1712520",
    "end": "1720980"
  },
  {
    "text": "end of the demo that I have here so we what we just to go over what we saw we",
    "start": "1720980",
    "end": "1727460"
  },
  {
    "start": "1724000",
    "end": "1724000"
  },
  {
    "text": "were able to pull an image from EC are using a custom resolver that we wrote then we were launching that container",
    "start": "1727460",
    "end": "1733669"
  },
  {
    "text": "inside a VM using the custom firecracker container D binary with this control",
    "start": "1733669",
    "end": "1738679"
  },
  {
    "text": "plug-in built-in and using the community shim nativist firecracker to go ahead",
    "start": "1738679",
    "end": "1743870"
  },
  {
    "text": "and control the container to control the firecracker process we use the device mapper snapshot or that we wrote and we",
    "start": "1743870",
    "end": "1750710"
  },
  {
    "text": "were able to contribute upstream and so that was running with the upstream installed version of the device mapper",
    "start": "1750710",
    "end": "1755870"
  },
  {
    "text": "driver and then inside the VM it uses the normal container D shim to go ahead",
    "start": "1755870",
    "end": "1761360"
  },
  {
    "text": "and run a container with run C so at this point I think we're ready for questions",
    "start": "1761360",
    "end": "1768070"
  },
  {
    "text": "what was that other uh go plugin type again the one Bix not a snapshot the the",
    "start": "1776350",
    "end": "1783830"
  },
  {
    "text": "other go plug-in type that's not a snapshot are you talking about like",
    "start": "1783830",
    "end": "1789289"
  },
  {
    "text": "being able to run a gr pc proxy plugin or the just like a normal go plugin so",
    "start": "1789289",
    "end": "1797450"
  },
  {
    "text": "gr pc proxy plugin the other so the I",
    "start": "1797450",
    "end": "1802850"
  },
  {
    "text": "think there's only two that are supported right now there's the snapshot us and the content store the only one that we implemented as a proxy plug-in",
    "start": "1802850",
    "end": "1809419"
  },
  {
    "text": "was the snapshot",
    "start": "1809419",
    "end": "1812470"
  },
  {
    "text": "this is great ooh what are your partisan plans or that you can disclose what are",
    "start": "1826140",
    "end": "1833340"
  },
  {
    "text": "you gonna do with the stuff looks great when can I use it so we've been building fire crackers and a nerdy to hopefully",
    "start": "1833340",
    "end": "1840179"
  },
  {
    "text": "help people run containers with a hypervisor boundary that gives you a",
    "start": "1840179",
    "end": "1845309"
  },
  {
    "text": "little bit of a different a little bit of a stronger isolation between different things that are running on the",
    "start": "1845309",
    "end": "1850950"
  },
  {
    "text": "same underlying host so in the way that we think about this is it's aimed at things like multi-tenancy and at",
    "start": "1850950",
    "end": "1858620"
  },
  {
    "text": "isolating workloads from each other that are operating in different security contexts you can see so firecracker was",
    "start": "1858620",
    "end": "1868350"
  },
  {
    "text": "something that was built for a Tobias lambda basically and for use cases that",
    "start": "1868350",
    "end": "1873630"
  },
  {
    "text": "are the same times use cases for Fargate so this is software that we're writing",
    "start": "1873630",
    "end": "1879419"
  },
  {
    "text": "to help make that available for other people that want to run that as well I think there's one in the back",
    "start": "1879419",
    "end": "1887720"
  },
  {
    "text": "does your continue the parking work with Cuba navies like you didn't show to",
    "start": "1894470",
    "end": "1900169"
  },
  {
    "text": "parked it out does it need to way back to qu many of these your I can't hear very well but you're asking if this",
    "start": "1900169",
    "end": "1906259"
  },
  {
    "text": "integrates with kubernetes is that correct yes how does it how does it work web community you didn't show that part so firecracker container T does not work",
    "start": "1906259",
    "end": "1913250"
  },
  {
    "text": "with kubernetes today the way that it will hopefully work eventually is through the CRI so container T has a",
    "start": "1913250",
    "end": "1920779"
  },
  {
    "text": "built-in plug-in called CRI container T that implements things with kubernetes there's a few design challenges that",
    "start": "1920779",
    "end": "1928129"
  },
  {
    "text": "we're still facing in order to get something working with kubernetes today but if you're not using kubernetes and",
    "start": "1928129",
    "end": "1933679"
  },
  {
    "text": "you're if you're entertaining directly with container d you're able to use this today",
    "start": "1933679",
    "end": "1939008"
  },
  {
    "text": "can you tell us about the different production issues you have seen using the firecracker so far you're asking",
    "start": "1944000",
    "end": "1951140"
  },
  {
    "text": "about different production issues that we have seen using firecracker I'm not sure what you mean by that question you",
    "start": "1951140",
    "end": "1957560"
  },
  {
    "text": "hit any red flags where you believe firecracker is not ready so firecracker itself is is being used",
    "start": "1957560",
    "end": "1965510"
  },
  {
    "text": "in production and is ready for production the firecracker container D project is",
    "start": "1965510",
    "end": "1970640"
  },
  {
    "text": "something that we're still working on so that's the integration with containers part so what are the top issues you have",
    "start": "1970640",
    "end": "1976670"
  },
  {
    "text": "seen so far I I can't hear very well what are the top issues that you have faced so far the top issues that we",
    "start": "1976670",
    "end": "1983930"
  },
  {
    "text": "faced running firecracker I don't think that I'm qualified to comment on that",
    "start": "1983930",
    "end": "1989030"
  },
  {
    "text": "right now",
    "start": "1989030",
    "end": "1991240"
  },
  {
    "text": "what do you see as the main benefits to using container D over docker I noticed she said that it was forked out of",
    "start": "1997460",
    "end": "2003760"
  },
  {
    "text": "docker but we're like so for me the things that I really like about",
    "start": "2003760",
    "end": "2009130"
  },
  {
    "text": "container D are the fact that it is a bunch of separate things that are composable and interchangeable and so I",
    "start": "2009130",
    "end": "2014830"
  },
  {
    "text": "can work out different things and build different things than were initially",
    "start": "2014830",
    "end": "2019930"
  },
  {
    "text": "envisioned by the people that wrote container D and so it led us build this whole thing with firecracker it let us",
    "start": "2019930",
    "end": "2024970"
  },
  {
    "text": "build the thing where we're able to pull things from ECR versus something like Dockers a little bit more of a monolith",
    "start": "2024970",
    "end": "2030490"
  },
  {
    "text": "it hides a lot of functionality behind a fairly high level API and so if you want",
    "start": "2030490",
    "end": "2035890"
  },
  {
    "text": "to do things that are not standard with docker it's a little bit harder I think",
    "start": "2035890",
    "end": "2043750"
  },
  {
    "text": "we've got time for one more question",
    "start": "2043750",
    "end": "2047040"
  },
  {
    "text": "where can I find all the Firecracker container these stuff so I can play with",
    "start": "2057909",
    "end": "2063970"
  },
  {
    "text": "it so all the firecracker container you stuff is on github if you go to github.com slash firecracker - micro VM",
    "start": "2063970",
    "end": "2072039"
  },
  {
    "text": "all of the firecracker code is under there so the main firecracker project is there as well as firecracker container",
    "start": "2072039",
    "end": "2077829"
  },
  {
    "text": "deep yeah everything that was shown on",
    "start": "2077829",
    "end": "2082839"
  },
  {
    "text": "the demo is open source and that's all on github the ECR thing is under the 80s labs github instead of the firecracker",
    "start": "2082839",
    "end": "2090220"
  },
  {
    "text": "one because it's not really related to firecracker but everything that we showed today was open source so I think",
    "start": "2090220",
    "end": "2097269"
  },
  {
    "text": "that's I think we're out of time at this point one last thing before we finish I would really appreciate it if you all",
    "start": "2097269",
    "end": "2103420"
  },
  {
    "text": "would fill out the survey that's on the sched website or the Sketchup",
    "start": "2103420",
    "end": "2108509"
  },
  {
    "start": "2104000",
    "end": "2104000"
  },
  {
    "text": "we really appreciate feedback hopefully they're gonna actually send it to us something to keep in mind is that if as",
    "start": "2108509",
    "end": "2115960"
  },
  {
    "text": "you're filling these out that everyone who's presenting here is a human just like you so hopefully don't be like to",
    "start": "2115960",
    "end": "2121269"
  },
  {
    "text": "mean to everyone if you didn't get a chance to ask a question here we're the hallway tracks open we're gonna be",
    "start": "2121269",
    "end": "2127539"
  },
  {
    "text": "around the whole week you can come up to us at the end of this session if you find us in the hallway feel free to come",
    "start": "2127539",
    "end": "2133869"
  },
  {
    "text": "say hi if you didn't get a chance to actually talk to us in person our email address and Twitter handles are up there",
    "start": "2133869",
    "end": "2140069"
  },
  {
    "text": "and so thank you [Applause]",
    "start": "2140069",
    "end": "2147029"
  }
]