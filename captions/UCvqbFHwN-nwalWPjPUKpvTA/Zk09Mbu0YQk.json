[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "hi everyone my name is Matt leer and this is how to export prometheus metrics from just about anything just to start",
    "start": "0",
    "end": "7830"
  },
  {
    "text": "here's a little bit about me I'm a senior engineer at digitalocean I'm a member of the Prometheus team you can",
    "start": "7830",
    "end": "14130"
  },
  {
    "text": "find me on github and twitter at md lair and all the content available in this talk will be linked to from this",
    "start": "14130",
    "end": "19980"
  },
  {
    "text": "repository here my talks repo and get up so just to start let's talk about a",
    "start": "19980",
    "end": "25289"
  },
  {
    "start": "24000",
    "end": "226000"
  },
  {
    "text": "crash course on Prometheus so how many folks here have deployed Prometheus in their environments quite a few it's",
    "start": "25289",
    "end": "31830"
  },
  {
    "text": "awesome that's really great so what is from ETS anyway prometheus is",
    "start": "31830",
    "end": "37020"
  },
  {
    "text": "an open-source systems monitoring and alerting toolkit it uses a pull based metrics gathering system over HTTP and a",
    "start": "37020",
    "end": "44460"
  },
  {
    "text": "simple text-based format for actually exposing those metrics to a Prometheus server over the network it also features prom QL which is a",
    "start": "44460",
    "end": "51180"
  },
  {
    "text": "powerful query language built right into Prometheus the Prometheus architecture",
    "start": "51180",
    "end": "56910"
  },
  {
    "text": "looks a little something like this but for the purposes of our talk all we really care about is the Prometheus server in the middle a display such as",
    "start": "56910",
    "end": "63690"
  },
  {
    "text": "graph on on the right and jobs and exporters and other sources of pull based metrics on the left this is an",
    "start": "63690",
    "end": "71189"
  },
  {
    "text": "example of the Prometheus text format so if I curl the node exporter running on my local machine we'll see a little bit",
    "start": "71189",
    "end": "76590"
  },
  {
    "text": "of information about metrics here so a metric has components such as a name possibly some labels that describe different dimensions of the metric a",
    "start": "76590",
    "end": "83250"
  },
  {
    "text": "value which is a raw float64 value and some metadata including help text that",
    "start": "83250",
    "end": "88320"
  },
  {
    "text": "helps you identify what a metrics purpose is and also the type such as counter guage summary or histogram this",
    "start": "88320",
    "end": "97619"
  },
  {
    "text": "is a super basic example of prom QL so I just say Prometheus give me the value of this time series from this instance over",
    "start": "97619",
    "end": "103110"
  },
  {
    "text": "the course of let's say a 24 hour period and this shows the hard drive temperatures on some of the machines at my house so what is a Prometheus",
    "start": "103110",
    "end": "111990"
  },
  {
    "text": "exporter anyway an exporter is a system that bridges the gap between Prometheus",
    "start": "111990",
    "end": "117329"
  },
  {
    "text": "and systems that do not speak the Prometheus metrics format so you might have some service and expose those",
    "start": "117329",
    "end": "122579"
  },
  {
    "text": "metrics to something like stance D or perhaps a head like its own custom JSON endpoint or axe far from go but",
    "start": "122579",
    "end": "128729"
  },
  {
    "text": "sometimes those systems aren't compatible with from a theist so that's where exporters come in and tip you would run these on the same machine",
    "start": "128729",
    "end": "134440"
  },
  {
    "text": "as the service itself but not always as we'll talk about later so some examples",
    "start": "134440",
    "end": "140230"
  },
  {
    "text": "of some extremely common exporters include the node exporter which exposes system metrics from unix-like machines",
    "start": "140230",
    "end": "145450"
  },
  {
    "text": "such as Linux and FreeBSD the mysqld exporter exposes metrics from a MySQL",
    "start": "145450",
    "end": "150910"
  },
  {
    "text": "server and the black box exporter and this is a unique one it actually dials out to remote systems",
    "start": "150910",
    "end": "156280"
  },
  {
    "text": "using things like HTTP or ICMP ping to probe these black box systems so let's",
    "start": "156280",
    "end": "163570"
  },
  {
    "text": "imagine rolled with a cloud and native future you've got your Prometheus and you've got your cloud and the clouds up it",
    "start": "163570",
    "end": "170410"
  },
  {
    "text": "exposes a metric that says everything's all good right so who has an environment that looks something like this Oh nobody",
    "start": "170410",
    "end": "177700"
  },
  {
    "text": "I was gonna ask Mike to come work with you but some of us live in a bare-metal reality we've got all these switches and",
    "start": "177700",
    "end": "185560"
  },
  {
    "text": "core routers and spine switches on top of rack switches we've got these wrecks of fine racks of bare metal servers so",
    "start": "185560",
    "end": "193540"
  },
  {
    "text": "naturally I log into the router and I say you know please give me Prometheus metrics seems like a very polite thing you would ask her router oh uh no such",
    "start": "193540",
    "end": "200560"
  },
  {
    "text": "luck what gives ok so you know Linux is pretty open-source friendly so there's probably like a Prometheus metrics device file",
    "start": "200560",
    "end": "206380"
  },
  {
    "text": "all right oh no no such luck so where can I find Prometheus metrics for these",
    "start": "206380",
    "end": "212620"
  },
  {
    "text": "systems if you want to find Prometheus exporters your best bet is the Prometheus website or you can scour the",
    "start": "212620",
    "end": "219070"
  },
  {
    "text": "internet the mailing lists the Prometheus wiki I github and etc or as a last resort you may just have to roll",
    "start": "219070",
    "end": "224800"
  },
  {
    "text": "your own and that's going to be the focus of our talk today so let's start with some of the basics of building an",
    "start": "224800",
    "end": "230440"
  },
  {
    "start": "226000",
    "end": "466000"
  },
  {
    "text": "exporter in the go programming language so to start your function main is going",
    "start": "230440",
    "end": "235600"
  },
  {
    "text": "to build your types wire up dependencies and start an HTTP server so first we",
    "start": "235600",
    "end": "241930"
  },
  {
    "text": "create this collector type we'll talk about shortly and we make the Prometheus client aware of the collector we set up",
    "start": "241930",
    "end": "247210"
  },
  {
    "text": "an HTTP handler and expose metrics over the standard / metrics endpoint and then we finally start listening for HTTP",
    "start": "247210",
    "end": "253720"
  },
  {
    "text": "connections for Prometheus so let's talk about the from atheist go client a",
    "start": "253720",
    "end": "259180"
  },
  {
    "text": "little bit the most important interface is probably the Prometheus collector interface and Prometheus client uses",
    "start": "259180",
    "end": "265030"
  },
  {
    "text": "this to actually expose metrics over the network so our collector structure here is going",
    "start": "265030",
    "end": "270610"
  },
  {
    "text": "to be our implementation of the Prometheus collector interface for some service and let's say we want to expose",
    "start": "270610",
    "end": "275950"
  },
  {
    "text": "a metric called requests total which is just the number of requests that go to some arbitrary system and also we're",
    "start": "275950",
    "end": "281710"
  },
  {
    "text": "going to explicitly pass a function dependency here so that we can swap this out for testing but this function is",
    "start": "281710",
    "end": "286990"
  },
  {
    "text": "going to return an integer that is the number of requests that have occurred and an error if anything goes wrong okay",
    "start": "286990",
    "end": "293940"
  },
  {
    "text": "so let's create our collector we have this constructor here we explicitly pass our dependencies makes things much",
    "start": "298870",
    "end": "303940"
  },
  {
    "text": "easier to test such as our request function so we can swap it out and also this is where we actually create the",
    "start": "303940",
    "end": "309460"
  },
  {
    "text": "meet of our metrics so we have our request total metric here we give it a name such as exporter requests total a",
    "start": "309460",
    "end": "315370"
  },
  {
    "text": "help text such as the total number of requests that occur meant for humans and also if we want some label dimensions",
    "start": "315370",
    "end": "321640"
  },
  {
    "text": "but in this particular case we don't need any variable or constant label dimensions so we go ahead and omit those",
    "start": "321640",
    "end": "327690"
  },
  {
    "text": "so the first method of the Prometheus collector interface is describe and describe accepts a channel of metrics",
    "start": "327690",
    "end": "333730"
  },
  {
    "text": "and our channel of metrics descriptions excuse me and then it gathers metadata about each metric so basically you can",
    "start": "333730",
    "end": "339610"
  },
  {
    "text": "collect them in a slice and iterate over that pass the descriptions on the channel and you're pretty much done",
    "start": "339610",
    "end": "344850"
  },
  {
    "text": "collect is a little more interesting and this is the second method of the Prometheus collector interface so I",
    "start": "344850",
    "end": "350470"
  },
  {
    "text": "collect accepts a channel of Prometheus metrics that you can send on and what we need to do first is take a metrics",
    "start": "350470",
    "end": "355900"
  },
  {
    "text": "snapshot using our function that we passed in and this must be concurrency safe so if you think about it you might",
    "start": "355900",
    "end": "361450"
  },
  {
    "text": "have one Prometheus server but you could have two or five or ten so you need to make sure that you lock appropriately so",
    "start": "361450",
    "end": "367060"
  },
  {
    "text": "that nothing can run into like a nasty data race so we retrieve the value or if it fails we can send an invalid metric",
    "start": "367060",
    "end": "372970"
  },
  {
    "text": "to notify Prometheus of the error and we can alert on that later on but if it succeeds we take that request value we",
    "start": "372970",
    "end": "379360"
  },
  {
    "text": "use this must new cosmetic constructor passed the name of our metric the fact that it is a counter type and the raw",
    "start": "379360",
    "end": "385720"
  },
  {
    "text": "value of the request will talk about Casta metrics shortly and why those are important so if you want to build an",
    "start": "385720",
    "end": "392020"
  },
  {
    "text": "exporter and go here my recommendations build reusable packages you don't want to mix low-level details of some file",
    "start": "392020",
    "end": "398260"
  },
  {
    "text": "format or binary Network protocol or filesystem traversal with actually x40 metrics if you separate these things",
    "start": "398260",
    "end": "404439"
  },
  {
    "text": "cleanly you're going to do yourself a lot of favors in the long run write unit tests if you think about it a Prometheus",
    "start": "404439",
    "end": "410139"
  },
  {
    "text": "exporter could be a pretty critical part of your production environment you need to make sure this thing functions appropriately so my recommendation is to",
    "start": "410139",
    "end": "416800"
  },
  {
    "text": "set it up in tests and perform HTTP GET using suck some fixed set of inputs and",
    "start": "416800",
    "end": "422709"
  },
  {
    "text": "a fixed set of outputs and compare the two and finally use prompt to we'll check metrics for linting your metrics so what",
    "start": "422709",
    "end": "429909"
  },
  {
    "text": "this does is if I curl some exporter and pipe it through this tool it will give me recommendations on how to make my metrics more standard so in this case we",
    "start": "429909",
    "end": "437229"
  },
  {
    "text": "have this metric called X gigabytes and this is a counter so counters by convention should have a total suffix",
    "start": "437229",
    "end": "442749"
  },
  {
    "text": "and also you'll notice that we use a unit of gigabytes instead you should use the base unit of bytes and leave that",
    "start": "442749",
    "end": "449139"
  },
  {
    "text": "conversion up to your display systems such as griffons with that being said",
    "start": "449139",
    "end": "454149"
  },
  {
    "text": "let's go get some metrics so some of the sources of metrics we're going to talk about today include files hardware",
    "start": "454149",
    "end": "461229"
  },
  {
    "text": "devices and system calls and there's definitely some overlap between the three to start let's talk about files in",
    "start": "461229",
    "end": "468309"
  },
  {
    "start": "466000",
    "end": "501000"
  },
  {
    "text": "particular gathering metrics from proc stat on Linux soap rocks that contains",
    "start": "468309",
    "end": "474369"
  },
  {
    "text": "kernel and system statistics that's a fun one to say so the numbers indicated here are the amount of time the CPU",
    "start": "474369",
    "end": "480069"
  },
  {
    "text": "spent in various states such as user system idle etc and these are in a",
    "start": "480069",
    "end": "485199"
  },
  {
    "text": "kernel internal unit called user Hertz but you can convert it to seconds later on so the top line shows us a summary of",
    "start": "485199",
    "end": "490930"
  },
  {
    "text": "all these times added together but we don't need that so we can skip that and like I said for the purposes of our talk",
    "start": "490930",
    "end": "496059"
  },
  {
    "text": "we're going to look at user system and idle even though they're I believe 11 different values here so to start let's",
    "start": "496059",
    "end": "502659"
  },
  {
    "start": "501000",
    "end": "578000"
  },
  {
    "text": "focus on creating a clear and concise exported API we create the CPU stat",
    "start": "502659",
    "end": "508779"
  },
  {
    "text": "structure and this contains stats for an individual CPU we give an ID which is in the string format so we can have CPU 0 1",
    "start": "508779",
    "end": "515529"
  },
  {
    "text": "2 or 3 and etc and then we export the values that we care about as integers here user system and idle so next we're",
    "start": "515529",
    "end": "525040"
  },
  {
    "text": "going to create this top-level function scan and scans job is to read and parse CPUs that information from i/o Reader",
    "start": "525040",
    "end": "530740"
  },
  {
    "text": "are if you're familiar with go IO reader is one of most fundamental interfaces in the NGO",
    "start": "530740",
    "end": "535900"
  },
  {
    "text": "standard library it essentially represents something like a file or a network stream or a byte buffer and this",
    "start": "535900",
    "end": "541420"
  },
  {
    "text": "is great because we can accept a file in our production code but we can also swap it out for a byte buffer or another",
    "start": "541420",
    "end": "546550"
  },
  {
    "text": "source later on for our tests so use interfaces they're very powerful and also as it turns out the buffaio scanner",
    "start": "546550",
    "end": "553630"
  },
  {
    "text": "type takes an i/o reader our and we can use that to easily scan over text-based input so we create this Bluff i/o",
    "start": "553630",
    "end": "559720"
  },
  {
    "text": "scanner we're gonna skip the first summarized line because we don't need it and then we enter this inner scanning loop if for some reason our scanning",
    "start": "559720",
    "end": "566529"
  },
  {
    "text": "loop exits early say for example we're reading from a network stream and there's a Oh F or something similar we",
    "start": "566529",
    "end": "571660"
  },
  {
    "text": "need to be sure we check the error from this scanner type this is important and often overlooked so be careful so within",
    "start": "571660",
    "end": "578920"
  },
  {
    "start": "578000",
    "end": "637000"
  },
  {
    "text": "the inner loop we need to carefully handle our slice boundaries of this file so within the loop we have these CPU",
    "start": "578920",
    "end": "585700"
  },
  {
    "text": "stat lines we know that each one should contain a CPU prefix and exactly 11 fields so we explicitly check for both",
    "start": "585700",
    "end": "591820"
  },
  {
    "text": "of those things if a line doesn't have a CPU prefix it's not related to CPU stats and we don't care but the lines that we",
    "start": "591820",
    "end": "598330"
  },
  {
    "text": "do expect we know they should have 11 fields so we make sure we check for that because otherwise if you access your",
    "start": "598330",
    "end": "603640"
  },
  {
    "text": "slice later on you could run into a nasty out of range panic that'll take down your program and nobody wants that",
    "start": "603640",
    "end": "610500"
  },
  {
    "text": "so now that we've gathered these values into this string slice we're going to parse the values we care about user",
    "start": "610530",
    "end": "616300"
  },
  {
    "text": "system at idle from indices 1 3 & 4 respectively and we're going to parse",
    "start": "616300",
    "end": "621310"
  },
  {
    "text": "them into an array of 3 values because we know exactly how many we need so we iterate over the indices we convert the",
    "start": "621310",
    "end": "627130"
  },
  {
    "text": "raw string into an integer and pack it into our array and finally we unpack it",
    "start": "627130",
    "end": "633190"
  },
  {
    "text": "all into a top-level CPU stat structure at the end of our loop so now that we've",
    "start": "633190",
    "end": "638709"
  },
  {
    "start": "637000",
    "end": "669000"
  },
  {
    "text": "put this all together let's build an example to try out our API and just see how it goes so we open a handle to proc",
    "start": "638709",
    "end": "644950"
  },
  {
    "text": "stat we defer closing it to make sure that we clean up after ourselves and we pass the file which is an i/o reader",
    "start": "644950",
    "end": "650980"
  },
  {
    "text": "directly to our CPU stat scan function if it succeeds we're going to iterate over all of those structures and print",
    "start": "650980",
    "end": "657610"
  },
  {
    "text": "them to the screen and as you'll see it seems to work just fine and like I said",
    "start": "657610",
    "end": "662620"
  },
  {
    "text": "all this code will be available in two slides as well as my tox repository so check that out later if you'd like to see full examples",
    "start": "662620",
    "end": "669209"
  },
  {
    "text": "so now that we've put this all together let's build a prometheus exporter so to start we need to wire up our",
    "start": "669209",
    "end": "674769"
  },
  {
    "text": "dependencies appropriately in our function main so we're going to create this stats function and this is a",
    "start": "674769",
    "end": "681429"
  },
  {
    "text": "closure it has no arguments and it returns a slice of these CPU stat structures and within each call to this",
    "start": "681429",
    "end": "687489"
  },
  {
    "text": "function we're going to open a unique handle to proc stat defer closing it to make sure that we clean up and then pass",
    "start": "687489",
    "end": "693189"
  },
  {
    "text": "it to our CPU stat scan function so this fulfills two purposes one every time this function is called by collector",
    "start": "693189",
    "end": "699189"
  },
  {
    "text": "collect we get a unique handle to proc stat so we're totally concurrency safe and two this is nice because we can swap",
    "start": "699189",
    "end": "705910"
  },
  {
    "text": "out this function right here for one that returns say a fixed set of values for our unit tests makes your life much",
    "start": "705910",
    "end": "711399"
  },
  {
    "text": "easier so we passed this function to our collector type and then we register it with Prometheus so this is our collector",
    "start": "711399",
    "end": "718720"
  },
  {
    "text": "type we're going to export a metric called time user Hertz total and we're also going to pass that function",
    "start": "718720",
    "end": "723850"
  },
  {
    "text": "explicitly as a dependency of the collector so here's a tip when you're",
    "start": "723850",
    "end": "729279"
  },
  {
    "start": "727000",
    "end": "800000"
  },
  {
    "text": "working with fields that have are structures that have repetitive fields such as user system at idle integers you",
    "start": "729279",
    "end": "735039"
  },
  {
    "text": "can use anonymous structures to simplify your code somewhat so we call our stats function here we get our stats we're",
    "start": "735039",
    "end": "741730"
  },
  {
    "text": "going to iterate over each entry and what we want to do here is we have this slice of anonymous structures if you've",
    "start": "741730",
    "end": "746980"
  },
  {
    "text": "ever done table driven tests and go you may be familiar with this but essentially we're going to associate",
    "start": "746980",
    "end": "751989"
  },
  {
    "text": "each of these mode strings with the raw value so the user string is associated with the user value and so on next we",
    "start": "751989",
    "end": "759879"
  },
  {
    "text": "iterate over all these tuples and unpack them and then we create the metrics using this must new constant metric constructor and we're going to associate",
    "start": "759879",
    "end": "766509"
  },
  {
    "text": "two labels the idea of the CPU and the current CPU mode so let's talk about cosmetics while we're here let's say for",
    "start": "766509",
    "end": "772959"
  },
  {
    "text": "example I have a system with two CPUs and they're hot swappable so your exporter is running along you're getting",
    "start": "772959",
    "end": "778269"
  },
  {
    "text": "metrics from those CPUs and suddenly one of the CPUs dies or you take it out of the system if you don't use the con",
    "start": "778269",
    "end": "783819"
  },
  {
    "text": "symmetric constructors the Prometheus client will continue to export the last value for those time series forever",
    "start": "783819",
    "end": "789399"
  },
  {
    "text": "so you need to make sure that if you're implementing the Prometheus collector interface you use the Const metric",
    "start": "789399",
    "end": "795069"
  },
  {
    "text": "constructors because they allow time series to come and go as time goes on",
    "start": "795069",
    "end": "800519"
  },
  {
    "start": "800000",
    "end": "849000"
  },
  {
    "text": "alright let's put this all together and give our egg for exporter a try it with curl and just see what happens so we",
    "start": "800519",
    "end": "807399"
  },
  {
    "text": "curl the exporter we run it and as we'll see we have some metrics available with our given labels such as the CPU ID and",
    "start": "807399",
    "end": "813610"
  },
  {
    "text": "the mode and these raw integer values so if you want to gather metrics from files",
    "start": "813610",
    "end": "819430"
  },
  {
    "text": "with go here my recommendations use IO reader whenever possible this is much more flexible than say accepting a file",
    "start": "819430",
    "end": "825970"
  },
  {
    "text": "path in your API the buffaio scanner type is super useful for all the files that reside in proc insists because",
    "start": "825970",
    "end": "832420"
  },
  {
    "text": "typically these are text files that are pretty easy to parse and that's a great type for doing so always check your",
    "start": "832420",
    "end": "837850"
  },
  {
    "text": "slice and array boundaries you don't want to run into an out of range panic in your exporter it's no fun for anybody",
    "start": "837850",
    "end": "842889"
  },
  {
    "text": "and also check out the Prometheus proc efest library we've done a lot of the work for you for these types alright",
    "start": "842889",
    "end": "850480"
  },
  {
    "start": "849000",
    "end": "927000"
  },
  {
    "text": "let's move on to the second part of our talk so let's gather metrics from some hardware devices in this case the silicon dust HD homerun so who here",
    "start": "850480",
    "end": "858670"
  },
  {
    "text": "still pays for cable TV wow just a few of us I love my cable TV ok I love NFL",
    "start": "858670",
    "end": "865240"
  },
  {
    "text": "and HBO and all those things but this is a pretty cool device if you have a cable subscription I understand it also works with over-the-air but this one's",
    "start": "865240",
    "end": "871389"
  },
  {
    "text": "specific to cable so you get your cable from your provider you plug it in you get a cable card to decrypt the signal",
    "start": "871389",
    "end": "876880"
  },
  {
    "text": "and you plug in an Ethernet cable and what this becomes is essentially a network TV tuner so you can use this to",
    "start": "876880",
    "end": "882760"
  },
  {
    "text": "watch live TV on different devices or also record to something like a plex media server so they also offer a linux",
    "start": "882760",
    "end": "890170"
  },
  {
    "text": "utility so I started poking around and I can discover the device of my network and use its ID to ask it questions such",
    "start": "890170",
    "end": "896170"
  },
  {
    "text": "as give me your tuner debugging information and as you'll see there's a lot of different statistics available here we have information about the",
    "start": "896170",
    "end": "902500"
  },
  {
    "text": "tuners such as the current channel and the channel it's trying to lock to the signal strength the signal-to-noise ratio",
    "start": "902500",
    "end": "908290"
  },
  {
    "text": "various bit rates it passed within the device and finally the network packets per second and error rates",
    "start": "908290",
    "end": "914610"
  },
  {
    "text": "so naturally I bust out TCP dump and start looking around at all these packets but it turns out I didn't ever",
    "start": "914610",
    "end": "920500"
  },
  {
    "text": "need to do that because silicon dust actually has an open source library called Lib HD homerun written in C so we",
    "start": "920500",
    "end": "927880"
  },
  {
    "start": "927000",
    "end": "952000"
  },
  {
    "text": "can use that as inspiration to create a go client so let's start by building a go network client API",
    "start": "927880",
    "end": "933760"
  },
  {
    "text": "we create this client type it has a mutex so we can serialize access to the device we're going to embed a connection",
    "start": "933760",
    "end": "940370"
  },
  {
    "text": "in there and we also give it a timeout if you're making a network connection and a timeout next we have this dial",
    "start": "940370",
    "end": "946190"
  },
  {
    "text": "constructor and dials job is to dial a TCP connection to an HD homerun device",
    "start": "946190",
    "end": "951850"
  },
  {
    "text": "so first we need to build up our low-level communications types the HD homerun speaks using these specialized",
    "start": "951850",
    "end": "958040"
  },
  {
    "start": "952000",
    "end": "994000"
  },
  {
    "text": "packets so this is what a packet looks like and go a packet has a type that",
    "start": "958040",
    "end": "963200"
  },
  {
    "text": "specifies the type of message it carries and tags and these specify optional attributes such as debugging information",
    "start": "963200",
    "end": "969440"
  },
  {
    "text": "or information about the device and lots of other things so then we create this",
    "start": "969440",
    "end": "974990"
  },
  {
    "text": "little function called execute an execute stub is to send a single packet and receive a single packet so we lock",
    "start": "974990",
    "end": "981140"
  },
  {
    "text": "the connections to the vice-marshal it's a binary format write it out wait for a response unpack it and then we're all",
    "start": "981140",
    "end": "987590"
  },
  {
    "text": "done and you'll notice I've omitted the error checking but don't ever do that in production code ever on top of that we",
    "start": "987590",
    "end": "995870"
  },
  {
    "start": "994000",
    "end": "1060000"
  },
  {
    "text": "can build a higher-level friendly API because who cares about like what the packets for this thing look like right",
    "start": "995870",
    "end": "1001920"
  },
  {
    "text": "so we create this high-level function called query and queries job is to perform a read-only query to retrieve",
    "start": "1001920",
    "end": "1007330"
  },
  {
    "text": "information from the device we accept this query string we put it into our packet and then we send it to the device",
    "start": "1007330",
    "end": "1013000"
  },
  {
    "text": "and while I'm here I want to mention this really cool tool called C forgo given a C header you can output pure go",
    "start": "1013000",
    "end": "1019150"
  },
  {
    "text": "constants so you don't have to like write down enumeration to my hand super useful if you ever work with a thing from the kernel would recommend but we",
    "start": "1019150",
    "end": "1027490"
  },
  {
    "text": "can do even better than that query function so we're gonna create this tuner debug type that contains debugging information about a tuner and then we",
    "start": "1027490",
    "end": "1035260"
  },
  {
    "text": "can add this tuner debug method to our client type we query for the debugging information from the device for tuner 0",
    "start": "1035260",
    "end": "1040720"
  },
  {
    "text": "for example we retrieve this raw bite slice and hey as it turns out a raw bite slice that's a lot like a text file so",
    "start": "1040720",
    "end": "1047319"
  },
  {
    "text": "it's pretty much this the same routine as we did last time we wrapped the bite slice and it bites reader so it adapts",
    "start": "1047319",
    "end": "1052480"
  },
  {
    "text": "to the i/o reader interface we can put an i/o reader into a buff i/o scanner scan through the file and hey we're all",
    "start": "1052480",
    "end": "1058600"
  },
  {
    "text": "done so now let's build an example program and just give this a shot and make sure it all actually works so I build and run",
    "start": "1058600",
    "end": "1066220"
  },
  {
    "start": "1060000",
    "end": "1171000"
  },
  {
    "text": "my program give it the my device asked it for the tuner zero debug menu and as you can see it seems to work just fine so let's move on we",
    "start": "1066220",
    "end": "1074860"
  },
  {
    "text": "want to export HD home run metrics using Prometheus so how do we do that well the",
    "start": "1074860",
    "end": "1080170"
  },
  {
    "text": "HD homerun device has this network API but we can't actually run our own code on it it's a lockdown little third-party",
    "start": "1080170",
    "end": "1085840"
  },
  {
    "text": "device so what we have to do is enable our Prometheus exporter to dial out to a remote device this is where things get",
    "start": "1085840",
    "end": "1093850"
  },
  {
    "text": "kind of interesting so we create this function dial and dial is used to connect to an HD homerun device given",
    "start": "1093850",
    "end": "1099340"
  },
  {
    "text": "some address string it's going to create the HD homerun client for us and within dial we're going to call our HD homerun",
    "start": "1099340",
    "end": "1105370"
  },
  {
    "text": "dial method or function and then we're going to make sure we set a timeout you want to always set a timeout on your",
    "start": "1105370",
    "end": "1110860"
  },
  {
    "text": "network communications because what happens if something goes wrong the device is down your network is down something in the middle of town you",
    "start": "1110860",
    "end": "1116679"
  },
  {
    "text": "don't want to necessarily leak file descriptors otherwise you've run out of file descriptors your exporter stops working you get paged nobody's happy ok",
    "start": "1116679",
    "end": "1124630"
  },
  {
    "text": "so we have our dial function we pass it as a dependency to our handler type and the handler is going to look something",
    "start": "1124630",
    "end": "1129910"
  },
  {
    "text": "like this so our handler is going to implement the HTTP handle handle our interface from the go standard library",
    "start": "1129910",
    "end": "1136000"
  },
  {
    "text": "and we're going to do that now so this is where this gets interesting we need to actually configure Prometheus to send",
    "start": "1136000",
    "end": "1142840"
  },
  {
    "text": "a target parameter with each scrape request so we're going to retrieve the target parameter here we're gonna",
    "start": "1142840",
    "end": "1148330"
  },
  {
    "text": "validate it and make sure it's got a valid port and if it doesn't we had the default we joined it back together and",
    "start": "1148330",
    "end": "1154179"
  },
  {
    "text": "we tried dialing out to whatever was passed as the target if it fails we return in HTTP 500 some Prometheus can",
    "start": "1154179",
    "end": "1160990"
  },
  {
    "text": "know something is wrong but if it's a seat if it succeeds we're going to defer closing the client we're gonna wrap it",
    "start": "1160990",
    "end": "1166780"
  },
  {
    "text": "in a small interface for testing and we're gonna actually serve the metrics for it so what might that interface look",
    "start": "1166780",
    "end": "1173320"
  },
  {
    "start": "1171000",
    "end": "1195000"
  },
  {
    "text": "like as it turns out our HD homerun client can do what's most of the work",
    "start": "1173320",
    "end": "1178390"
  },
  {
    "text": "for us actually so we create this device interface here and it's going to wrap the HD homerun device type or the client",
    "start": "1178390",
    "end": "1184120"
  },
  {
    "text": "type and it has the same method signature as our HD homerun client so by",
    "start": "1184120",
    "end": "1189309"
  },
  {
    "text": "the rules of go the HD homerun client type implements our device interface so",
    "start": "1189309",
    "end": "1196179"
  },
  {
    "start": "1195000",
    "end": "1226000"
  },
  {
    "text": "putting this all together let's give the exporter to try with curl and that target parameter and just see how things go",
    "start": "1196179",
    "end": "1202020"
  },
  {
    "text": "so we curl our exporter running on let's say my local machine and it dials out to the remote HD homerun device so we",
    "start": "1202020",
    "end": "1209169"
  },
  {
    "text": "exposed a couple of metrics here we have network packets per second that shows the packets per second rate for a given TV tuner and we also have this",
    "start": "1209169",
    "end": "1215830"
  },
  {
    "text": "interesting tuner info metric and this contains metadata about each of the tuners available to a device it exports",
    "start": "1215830",
    "end": "1222160"
  },
  {
    "text": "a constant value of one more on this shortly so if you want to configure Prometheus to actually use this thing",
    "start": "1222160",
    "end": "1228549"
  },
  {
    "start": "1226000",
    "end": "1279000"
  },
  {
    "text": "you have to make from athiest pass a target parameter so this configuration",
    "start": "1228549",
    "end": "1233950"
  },
  {
    "text": "is mostly taken from the black box exporter so definitely look at that repository for more information but the basic ideas are you have this targets",
    "start": "1233950",
    "end": "1240790"
  },
  {
    "text": "list and you pass a list of like say for example your HD homerun devices you create this reliable in configuration",
    "start": "1240790",
    "end": "1246010"
  },
  {
    "text": "and this tells Prometheus to pass the target parameter and also to replace I believe the address of the HD homerun",
    "start": "1246010",
    "end": "1251950"
  },
  {
    "text": "exporter in the metrics with the address of your HD homerun device so relabeling is a super powerful concept I definitely",
    "start": "1251950",
    "end": "1258850"
  },
  {
    "text": "recommend reading more about it particularly the robust perception blog is super useful putting this all",
    "start": "1258850",
    "end": "1264880"
  },
  {
    "text": "together it seems to work just fine Prometheus is up and running it is scraping our HD homerun exporter running",
    "start": "1264880",
    "end": "1270429"
  },
  {
    "text": "on some machine which reaches out to our HD homerun device itself gathers the metrics exports them in Prometheus",
    "start": "1270429",
    "end": "1276100"
  },
  {
    "text": "format and everything is good so let's go talk about that information metric",
    "start": "1276100",
    "end": "1281559"
  },
  {
    "start": "1279000",
    "end": "1303000"
  },
  {
    "text": "again that metadata you can use these synthetic information metrics for super powerful prom cue while queries so we",
    "start": "1281559",
    "end": "1289270"
  },
  {
    "text": "construct it like this we have these labels here that are the tuner the channel it is trying to lock to and the",
    "start": "1289270",
    "end": "1294820"
  },
  {
    "text": "channel it's actually locked too and we're going to export this metric it has a constant value of 1 it's a gauge and it just has these",
    "start": "1294820",
    "end": "1301570"
  },
  {
    "text": "labels so why is this useful as it turns out prompt QL is super",
    "start": "1301570",
    "end": "1307000"
  },
  {
    "start": "1303000",
    "end": "1394000"
  },
  {
    "text": "powerful and you can use this to effectively perform a relational join between different time series so if I",
    "start": "1307000",
    "end": "1313840"
  },
  {
    "text": "want to answer a question something like what is the packets per second rate for a given channel this query seems to work",
    "start": "1313840",
    "end": "1320350"
  },
  {
    "text": "so I'm effectively joining my network packets per second query on the channel ID with my HD homerun tuner info metric",
    "start": "1320350",
    "end": "1327850"
  },
  {
    "text": "and as we'll see on channel 3 for my HD homerun device on tuner 0 the packets",
    "start": "1327850",
    "end": "1333549"
  },
  {
    "text": "per second rate for that channel was 840 so this is another super-powerful prom qaul concept and in",
    "start": "1333549",
    "end": "1339700"
  },
  {
    "text": "particular if you learn more about this technique check out Bryon's blog and how to have labels for machine rolls so if",
    "start": "1339700",
    "end": "1347830"
  },
  {
    "text": "you want to gather metrics from hardware devices hear my tips set timeouts for network connections always just do it it",
    "start": "1347830",
    "end": "1354430"
  },
  {
    "text": "won't take you very much time just do it use interfaces for testing makes your life much easier you shouldn't have to dial out to an",
    "start": "1354430",
    "end": "1360910"
  },
  {
    "text": "actual hardware device to run your unit tests right create these synthetic information metrics so yeah you could",
    "start": "1360910",
    "end": "1366790"
  },
  {
    "text": "add these labels to every single one of your Prometheus metrics but then you can result in some very high cardinality",
    "start": "1366790",
    "end": "1371830"
  },
  {
    "text": "time series and that's no good for Prometheus so take advantage of prime ql export your labels as metadata on a",
    "start": "1371830",
    "end": "1377620"
  },
  {
    "text": "single metric and then join them together using from ql and finally learn a little bit about relabeling it's a",
    "start": "1377620",
    "end": "1383890"
  },
  {
    "text": "super powerful concept and one I'm in admittedly not very familiar with but it's super useful and that brings us to",
    "start": "1383890",
    "end": "1395650"
  },
  {
    "start": "1394000",
    "end": "1413000"
  },
  {
    "text": "the home stretch so let's talk about gathering metrics from some system calls in this case stan FS on Linux so state",
    "start": "1395650",
    "end": "1403450"
  },
  {
    "text": "FS is used to get filesystem statistics so given some mount point the function",
    "start": "1403450",
    "end": "1408550"
  },
  {
    "text": "stat FS returns information about a mounted filesystem so to start we want",
    "start": "1408550",
    "end": "1414790"
  },
  {
    "text": "to build a high level OS agnostic API because that's the friendly thing to do and go so we create this file system",
    "start": "1414790",
    "end": "1421540"
  },
  {
    "text": "structure it has a path or mount point a type which is an enumeration of filesystem types like ext4 or NFS or XFS",
    "start": "1421540",
    "end": "1429220"
  },
  {
    "text": "and the number of files that reside within that filesystem we create this",
    "start": "1429220",
    "end": "1434860"
  },
  {
    "text": "table all function get with a capital G and this retrieves stats for the filesystem mounted at path within get",
    "start": "1434860",
    "end": "1441100"
  },
  {
    "text": "we're going to call get with a lowercase G and this is going to be our operating system specific implementation of get so",
    "start": "1441100",
    "end": "1449620"
  },
  {
    "text": "if you want to make use of system calls and go you must always guard them with build tags your code won't compile on other",
    "start": "1449620",
    "end": "1455410"
  },
  {
    "text": "platforms if you're using system calls unless you're using build tags appropriately and this is one of Rob pikes go proverbs so let's talk about",
    "start": "1455410",
    "end": "1464530"
  },
  {
    "text": "the Linux implementation first we have our file stat FS underscore Linna that go and we have this Linux build tag",
    "start": "1464530",
    "end": "1470860"
  },
  {
    "text": "at the top you don't necessarily need the build tag just because of the file name but I like to add it just because it's more explicit and instead of using",
    "start": "1470860",
    "end": "1477490"
  },
  {
    "text": "the standard library syscall package we're going to use going org exorcist unix this is effectively the modern",
    "start": "1477490",
    "end": "1483640"
  },
  {
    "text": "replacement for syscall because cisco had to be frozen after a certain period in time so get once again lowercase G",
    "start": "1483640",
    "end": "1491080"
  },
  {
    "text": "this is going to be our Linux implementation of that function get the accepts a path and then we're going to",
    "start": "1491080",
    "end": "1496540"
  },
  {
    "text": "create this UNIX stat FST structure we call out to this UNIX stand FS system",
    "start": "1496540",
    "end": "1501700"
  },
  {
    "text": "call and provide it some mount point and we pass a pointer to the structure and as a result the kernel is able to",
    "start": "1501700",
    "end": "1507309"
  },
  {
    "text": "populate that structure so when our function call returns successfully we have a structure with all the information that we need",
    "start": "1507309",
    "end": "1512890"
  },
  {
    "text": "finally we unpack it into the OS agnostic structure remember system calls can't cross the boundary outside of",
    "start": "1512890",
    "end": "1519130"
  },
  {
    "text": "where your build tag is so we unpack the structure here within our Linux type to make sure that it's friendly for all",
    "start": "1519130",
    "end": "1524410"
  },
  {
    "text": "operating systems so next up we're going to talk about code that's not on Linux",
    "start": "1524410",
    "end": "1530080"
  },
  {
    "text": "so we have this file stat FS underscore others that go and at the top you have a build tag that says for every operating",
    "start": "1530080",
    "end": "1535840"
  },
  {
    "text": "system that is not Linux build this code and here we're just gonna leave the function get unimplemented perhaps there",
    "start": "1535840",
    "end": "1541510"
  },
  {
    "text": "are similar api's for other platforms but for the time being leaving it on influence it is fine and I definitely like to return an error that says",
    "start": "1541510",
    "end": "1547390"
  },
  {
    "text": "something like you know whatever this is is not implemented on your current platform such as windows Darwin etc so",
    "start": "1547390",
    "end": "1555370"
  },
  {
    "start": "1554000",
    "end": "1582000"
  },
  {
    "text": "next let's build an example program and give this a shot and just make sure it all works so we create our program we",
    "start": "1555370",
    "end": "1562059"
  },
  {
    "text": "call out to it we get the first argument and that's going to be our Mountain point path we've passed it to our Stanton FS gate function and this should",
    "start": "1562059",
    "end": "1568990"
  },
  {
    "text": "compile successfully in all the platforms even if it doesn't run and then we print the information to the screen and as you'll see it seems to",
    "start": "1568990",
    "end": "1575620"
  },
  {
    "text": "work just fine on Linux of course you can implement more platforms if you're able but for the time being Linux only",
    "start": "1575620",
    "end": "1581020"
  },
  {
    "text": "is okay if you want to export metrics for this well I'm a little short around",
    "start": "1581020",
    "end": "1586179"
  },
  {
    "text": "time that I might have thought so this is going to be an exercise for the reader if you want to gather metrics",
    "start": "1586179",
    "end": "1591970"
  },
  {
    "text": "with system calls and go hear my recommendations build a high-level easy to use API",
    "start": "1591970",
    "end": "1597520"
  },
  {
    "text": "your caller should not have to care about system calls or pointers or any of that kind of unsafe things so make sure that you make",
    "start": "1597520",
    "end": "1604150"
  },
  {
    "text": "it as easy to use as possible and take away as much of the complexity as possible from your color always use",
    "start": "1604150",
    "end": "1609580"
  },
  {
    "text": "build tags with system calls if you don't your code will not compile on all platforms and go is a great",
    "start": "1609580",
    "end": "1615220"
  },
  {
    "text": "cross-platform language so we should keep it that way and also be really careful about using elevated privileges with system calls it's pretty easy to do",
    "start": "1615220",
    "end": "1622240"
  },
  {
    "text": "something like I don't know overwrite your main disk or reboot your machine or something nasty so just be cautious",
    "start": "1622240",
    "end": "1627580"
  },
  {
    "text": "about using root so in conclusion if you're gonna build from easiest",
    "start": "1627580",
    "end": "1633430"
  },
  {
    "start": "1630000",
    "end": "1692000"
  },
  {
    "text": "exporters and go it mostly comes down to a set of typical software best practices",
    "start": "1633430",
    "end": "1638460"
  },
  {
    "text": "avoid global and package level state as much as possible and pass your dependencies explicitly as parameters",
    "start": "1638460",
    "end": "1644860"
  },
  {
    "text": "it's going to make your life much easier in the long run it makes your code easier to read easier for your",
    "start": "1644860",
    "end": "1650020"
  },
  {
    "text": "co-workers to review and easier to maintain in the future focus on creating simple and reusable package api's when",
    "start": "1650020",
    "end": "1656740"
  },
  {
    "text": "building exporters like I said you don't need to mix the details of exporting metrics with crawling a file system or",
    "start": "1656740",
    "end": "1662410"
  },
  {
    "text": "some binary format or some network protocol separate these things create nice reusable packages and then import",
    "start": "1662410",
    "end": "1668620"
  },
  {
    "text": "them into your exporter and finally read up on the Prometheus metrics best practices from Prometheus I oh these are",
    "start": "1668620",
    "end": "1675550"
  },
  {
    "text": "really great there's a lot to learn but apply them judiciously and your exporters and you'll be better off in the long run and finally I have a",
    "start": "1675550",
    "end": "1683650"
  },
  {
    "text": "special unrelated announcement digitalocean is working on a kubernetes product so if you're interested there",
    "start": "1683650",
    "end": "1688750"
  },
  {
    "text": "are some folks in here work on that or otherwise come see us on our booth and that's it thank you very much for your",
    "start": "1688750",
    "end": "1694660"
  },
  {
    "start": "1692000",
    "end": "1849000"
  },
  {
    "text": "time and I look forward to answering your questions",
    "start": "1694660",
    "end": "1698399"
  },
  {
    "text": "all right well I'm not sure where we're at on time right now but I'd be happy to take any questions if anybody has I otherwise just come find me in the hall",
    "start": "1702000",
    "end": "1708640"
  },
  {
    "text": "that's just fine to 7:00 okay sure",
    "start": "1708640",
    "end": "1716910"
  },
  {
    "text": "I'm sorry I think I missed some of that could just pick up a little bit yes yeah so the question was if you have",
    "start": "1725610",
    "end": "1737350"
  },
  {
    "text": "a bunch of metrics in a push format how can you best convert that to a pull format to start I believe there are lots",
    "start": "1737350",
    "end": "1742660"
  },
  {
    "text": "of Prometheus exporter adapters essentially for things like stance D graphite etc so if you wanted like a",
    "start": "1742660",
    "end": "1748150"
  },
  {
    "text": "stopgap solution you could push to those exporters instead and then those export native from a theist metrics but if you",
    "start": "1748150",
    "end": "1753850"
  },
  {
    "text": "want to actually swap it out it kind of depends in your application so you might have to go through and like I guess I",
    "start": "1753850",
    "end": "1759490"
  },
  {
    "text": "don't know which language is using her in your environment but many yeah sure so it's kind of tough but yes my",
    "start": "1759490",
    "end": "1764710"
  },
  {
    "text": "recommendation would be definitely look at the adaptor exporters things like the stance the exporter there are there are",
    "start": "1764710",
    "end": "1769780"
  },
  {
    "text": "several under the Prometheus organization so check those out and those will probably give you a good start anymore yeah okay nothing",
    "start": "1769780",
    "end": "1779350"
  },
  {
    "text": "uh yeah any more any more questions all",
    "start": "1779350",
    "end": "1784660"
  },
  {
    "text": "right cool thank you very much yeah Goan sorry",
    "start": "1784660",
    "end": "1788730"
  },
  {
    "text": "[Music]",
    "start": "1802320",
    "end": "1805470"
  },
  {
    "text": "yeah sure so the question is how easy is it to deploy Prometheus in a Cooper dies environment and if so do you have like",
    "start": "1816470",
    "end": "1822960"
  },
  {
    "text": "Hamill files prepared for deploying Prometheus in a kubernetes environment and truth be told I don't deploy for",
    "start": "1822960",
    "end": "1828240"
  },
  {
    "text": "meeting communities I have co-workers here who do I'm sure there are folks in the room I run this at my house I using system D and ansible",
    "start": "1828240",
    "end": "1834419"
  },
  {
    "text": "I'm bare metal native right but yes so unfortunately I'm not the best person to answer but I'm sure there are folks here",
    "start": "1834419",
    "end": "1839610"
  },
  {
    "text": "would be happy to help any more questions",
    "start": "1839610",
    "end": "1844880"
  },
  {
    "text": "cool thank you very much for attending my talk and I hope it was entertaining [Applause]",
    "start": "1844880",
    "end": "1851749"
  }
]