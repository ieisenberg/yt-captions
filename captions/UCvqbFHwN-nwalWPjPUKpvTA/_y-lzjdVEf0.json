[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "okay all right have a look welcome everybody I'm Doug Davis track host obviously Yanis gonna be talking about",
    "start": "0",
    "end": "6089"
  },
  {
    "text": "authentication and security for GR PC just one housekeeping thing please try to remember at the end of this session",
    "start": "6089",
    "end": "11969"
  },
  {
    "text": "rate it through the app itself so the organizers can know whether you liked it dislike tour whatever and with that I'll hand it over to yan",
    "start": "11969",
    "end": "19529"
  },
  {
    "text": "to give us take it okay so hello everyone thank you hello everyone so you",
    "start": "19529",
    "end": "29369"
  },
  {
    "text": "already know my name is Yan I'm software engineer at Google I'm also member of the gr PC team and",
    "start": "29369",
    "end": "35010"
  },
  {
    "text": "I'm proud owner of the G RPC implementation in the c-sharp language so today's talk is called authentication",
    "start": "35010",
    "end": "42300"
  },
  {
    "start": "38000",
    "end": "139000"
  },
  {
    "text": "and security in G RPC micro services so what's it gonna be about first I'll show",
    "start": "42300",
    "end": "48960"
  },
  {
    "text": "you some of the basic building blocks for securing G RPC services and I'll show you how they fit together",
    "start": "48960",
    "end": "55410"
  },
  {
    "text": "and oh sorry okay",
    "start": "55410",
    "end": "65780"
  },
  {
    "text": "okay sorry so I'll show you some of the",
    "start": "68030",
    "end": "75090"
  },
  {
    "text": "basic building blocks and how they fit together oh I'll start with the very basics that",
    "start": "75090",
    "end": "80909"
  },
  {
    "text": "might be familiar to many of you but I'll later get into a little bit more advanced scenarios because one thing is",
    "start": "80909",
    "end": "87270"
  },
  {
    "text": "knowing the concepts and the other one is securing a real life application part",
    "start": "87270",
    "end": "94049"
  },
  {
    "text": "of this presentation is also going to be a demo and in the demo I'll focus on",
    "start": "94049",
    "end": "100520"
  },
  {
    "text": "running micro services in our kubernetes cluster the expectations from you as the",
    "start": "100520",
    "end": "106740"
  },
  {
    "text": "audience is that you already know what G RPC is or you maybe run some RPC see you",
    "start": "106740",
    "end": "113580"
  },
  {
    "text": "friend the hello world example you know some of the basics you know just how to get around with your PC oh this thought",
    "start": "113580",
    "end": "120929"
  },
  {
    "text": "might feel a little bit basic to some but that's kind of working as intended",
    "start": "120929",
    "end": "126860"
  },
  {
    "text": "because security and authentication these are topics where the stakes are usually pretty high so we should really",
    "start": "126860",
    "end": "135510"
  },
  {
    "text": "understand what we're doing and that's the only way to avoid mistakes so first",
    "start": "135510",
    "end": "141720"
  },
  {
    "start": "139000",
    "end": "271000"
  },
  {
    "text": "I wanted to review some of the key ideas behind the G RPC security design I think",
    "start": "141720",
    "end": "146940"
  },
  {
    "text": "it's very useful for understanding the how and why so oh I already kind of said",
    "start": "146940",
    "end": "154410"
  },
  {
    "text": "that building authentication and security is a lot about avoiding mistakes so when our building G RPC we",
    "start": "154410",
    "end": "161940"
  },
  {
    "text": "wanted to build it on top of standard and proven technologies and then from",
    "start": "161940",
    "end": "167639"
  },
  {
    "text": "users perspective when you're actually writing the code we made the insecure option in the API explicit so that means",
    "start": "167639",
    "end": "174450"
  },
  {
    "text": "when you're browsing the code or you can immediately see maybe you know this channel is so set as an insecure Channel",
    "start": "174450",
    "end": "180239"
  },
  {
    "text": "so maybe it's not such a good idea to send some you know sensitive data over it ERP C is so also multi-language and",
    "start": "180239",
    "end": "190380"
  },
  {
    "text": "so despite every every language being different we try to provide a unified",
    "start": "190380",
    "end": "196919"
  },
  {
    "text": "experience or and kind of similar feel across multiple languages or while still making it feel",
    "start": "196919",
    "end": "204370"
  },
  {
    "text": "natural in every given language so the approach we took so er PC is extremely",
    "start": "204370",
    "end": "213269"
  },
  {
    "text": "versatile Universal and can run on multiple platforms it can run in different environments so we didn't want",
    "start": "213269",
    "end": "221799"
  },
  {
    "text": "to take the approach of basically imposing on you what's the specific authentication solution that you should",
    "start": "221799",
    "end": "226989"
  },
  {
    "text": "use but rather than that we provided kind of a general framework to do often",
    "start": "226989",
    "end": "232989"
  },
  {
    "text": "security Wow and to do it in a way that fits your use case and then the specific",
    "start": "232989",
    "end": "239409"
  },
  {
    "text": "technical solution would be the actual off method that you choose the code patterns that appear in your code or the",
    "start": "239409",
    "end": "246939"
  },
  {
    "text": "choice of the third-party tools that you use and the ecosystem around G RPC is so",
    "start": "246939",
    "end": "252400"
  },
  {
    "text": "already pretty big and it's a it's always growing so there's definitely options out there",
    "start": "252400",
    "end": "259199"
  },
  {
    "text": "we're also trying to provide best practice system recommendations the community helps us a lot with that and",
    "start": "259199",
    "end": "266590"
  },
  {
    "text": "there's already a lot of blog posts around a RPC authentication so I talked",
    "start": "266590",
    "end": "273970"
  },
  {
    "start": "271000",
    "end": "376000"
  },
  {
    "text": "about using standard and proven technologies and it's pretty well known",
    "start": "273970",
    "end": "279460"
  },
  {
    "text": "that G RPC is actually just a thin framing layer on top of the HCP 2",
    "start": "279460",
    "end": "284770"
  },
  {
    "text": "protocol version 2 oh and while HTTP 2 is still relatively new HTTP as a",
    "start": "284770",
    "end": "291639"
  },
  {
    "text": "protocol has been around for a long time so vast amount of knowledge and experience has been accumulated around",
    "start": "291639",
    "end": "299340"
  },
  {
    "text": "authenticating our HTTP traffic and the nice thing is with G RPC this knowledge",
    "start": "299340",
    "end": "306580"
  },
  {
    "text": "is not lost so most of what do you know about securing HTTP traffic still",
    "start": "306580",
    "end": "312009"
  },
  {
    "text": "applies for G RPC so if you have a solution that already works for HTTP",
    "start": "312009",
    "end": "317050"
  },
  {
    "text": "traffic or that you're familiar with chances are that's going to work well with G RPC - so using it won't feel like",
    "start": "317050",
    "end": "323880"
  },
  {
    "text": "rain wanting the wheel but maybe more like reapplying common knowledge and a",
    "start": "323880",
    "end": "330490"
  },
  {
    "text": "little bit of a new context and I have a little table here which shows so the basic concepts I'm not sure okay",
    "start": "330490",
    "end": "338139"
  },
  {
    "text": "laser pointer probably cannot be seen so on the left side there's a there's the",
    "start": "338139",
    "end": "345460"
  },
  {
    "text": "HTTP do concept so when you're doing a connection level security so basically encrypted connections with",
    "start": "345460",
    "end": "352419"
  },
  {
    "text": "HCP that corresponds to using a so-called secure channels in G RPC and",
    "start": "352419",
    "end": "357810"
  },
  {
    "text": "whenever you're using request headers for authentication that's going to",
    "start": "357810",
    "end": "363010"
  },
  {
    "text": "correspond to something that's called initial metadata and just as with request headers the RPC metadata is",
    "start": "363010",
    "end": "370210"
  },
  {
    "text": "actually multi-purpose so it can be used for all but it can be used for other things too so I kind of already started",
    "start": "370210",
    "end": "379090"
  },
  {
    "start": "376000",
    "end": "524000"
  },
  {
    "text": "but here's the 10,000 feet view of what",
    "start": "379090",
    "end": "384340"
  },
  {
    "text": "exists in the world of G RPC authentication so the first option is you can authenticate individual remote",
    "start": "384340",
    "end": "391060"
  },
  {
    "text": "calls and the way it works is you at a secret token in your cost method a DES",
    "start": "391060",
    "end": "398250"
  },
  {
    "text": "and this token allows the other side to verify that you are here you claim to me",
    "start": "398250",
    "end": "403720"
  },
  {
    "text": "and possibly to verify some other claims and to be able to send the secret token",
    "start": "403720",
    "end": "409900"
  },
  {
    "text": "over the wire you obviously need an encrypted medium to protect the token from being stolen which brings us to the",
    "start": "409900",
    "end": "415960"
  },
  {
    "text": "other authentication method which is channel level this means you basically",
    "start": "415960",
    "end": "422830"
  },
  {
    "text": "when you start your communication you establish an encrypted connection with with the peer and one or both sides",
    "start": "422830",
    "end": "431099"
  },
  {
    "text": "authenticate their peer during the initial handshake and after that that channel is known to be trusted and you",
    "start": "431099",
    "end": "438729"
  },
  {
    "text": "know that the data is coming from the other side you know is from who you expect it to be the standard way to",
    "start": "438729",
    "end": "445270"
  },
  {
    "text": "achieve this is through transport layer security for G RPC there are other ways",
    "start": "445270",
    "end": "450910"
  },
  {
    "text": "to there are other transport or besides TLS or but it's a little bit out of",
    "start": "450910",
    "end": "459160"
  },
  {
    "text": "scope for for this talk or RPC also it's also extensible so it's possible to add",
    "start": "459160",
    "end": "464229"
  },
  {
    "text": "new transport but that's so that's kind of a big investment it requires little effort so it's",
    "start": "464229",
    "end": "470169"
  },
  {
    "text": "definitely not recommended for 99% of the users the last way you can do",
    "start": "470169",
    "end": "475270"
  },
  {
    "text": "authentication is so called transparent and that basically means that you just",
    "start": "475270",
    "end": "482020"
  },
  {
    "text": "take the the heavy-lifting of authentication and you delegate it to some other component in your system and",
    "start": "482020",
    "end": "488499"
  },
  {
    "text": "it can be for example an intelligent proxy that's actually a nice way to",
    "start": "488499",
    "end": "493870"
  },
  {
    "text": "decouple your business logic and the security layer itself oh and it comes",
    "start": "493870",
    "end": "499809"
  },
  {
    "text": "handy especially when building micro services because with micro services you're gonna have multiple smaller",
    "start": "499809",
    "end": "505809"
  },
  {
    "text": "components and in those components you probably want to focus on business logic more then then on the authentication",
    "start": "505809",
    "end": "514268"
  },
  {
    "text": "itself and then you basically just want to add some or layer on top of it that",
    "start": "514269",
    "end": "519638"
  },
  {
    "text": "is gonna that's gonna magically add the authentication and security capabilities",
    "start": "519639",
    "end": "525269"
  },
  {
    "start": "524000",
    "end": "729000"
  },
  {
    "text": "so let's take a closer look at the per call authentication with tokens so in",
    "start": "525269",
    "end": "533019"
  },
  {
    "text": "this context when I talk about tokens I have the bearer tokens in mind so the",
    "start": "533019",
    "end": "539230"
  },
  {
    "text": "name bearer comes from the HTTP or Bearer authentication scheme and what it",
    "start": "539230",
    "end": "544510"
  },
  {
    "text": "means is is basically oh wait when you're sending the the bearer token what",
    "start": "544510",
    "end": "551199"
  },
  {
    "text": "you're saying is basically give access to some resource to bearer of you know this specific token that I'm sending",
    "start": "551199",
    "end": "556630"
  },
  {
    "text": "around the tokens come in many kinds they usually look like cryptic strings",
    "start": "556630",
    "end": "562870"
  },
  {
    "text": "they're usually base64 or some other encoding but the ones you'll see the",
    "start": "562870",
    "end": "568300"
  },
  {
    "text": "most commonly is earth-2 and jot tokens or the main difference between those is",
    "start": "568300",
    "end": "573370"
  },
  {
    "text": "that auth 2 is an is an opaque token it's so usually emitted by a third party",
    "start": "573370",
    "end": "580000"
  },
  {
    "text": "so you reach out to to some other party or you provide some credentials you get the two token in exchange you send it",
    "start": "580000",
    "end": "587800"
  },
  {
    "text": "along with your RPC calls and then on the server side once that tokens once",
    "start": "587800",
    "end": "592990"
  },
  {
    "text": "that token is received you reach out to the third party again to actually verify",
    "start": "592990",
    "end": "599160"
  },
  {
    "text": "you know that that token is actually valid and allows access to even resource the JSON",
    "start": "599160",
    "end": "607509"
  },
  {
    "text": "web token also called jot is is different in the sense that is it is self-contained and it does three parts",
    "start": "607509",
    "end": "614049"
  },
  {
    "text": "one of them is header which is not really important right now the other part is the actual is the actual token",
    "start": "614049",
    "end": "620829"
  },
  {
    "text": "that contains some some data that it's claiming about the owner of the token and the last part is signature soja",
    "start": "620829",
    "end": "630789"
  },
  {
    "text": "tokens are self-contained in the sense that when you received the Jo token you can just verify the cryptographic",
    "start": "630789",
    "end": "636549"
  },
  {
    "text": "signature of that token and you know if it's valid or not oh because I'm a G RPC",
    "start": "636549",
    "end": "643509"
  },
  {
    "text": "maintainer I've been following some of the public forums and user questions a lot so it",
    "start": "643509",
    "end": "650499"
  },
  {
    "text": "also turned out that some of the people actually think that when talking about tokens like sending a password over in",
    "start": "650499",
    "end": "657399"
  },
  {
    "text": "the metadata is a you know get good idea and it qualifies the token so please don't do that oh it's it's not such a",
    "start": "657399",
    "end": "665079"
  },
  {
    "text": "good idea you can actually with the same amount of work you can actually come up with an authentication scheme that's",
    "start": "665079",
    "end": "671379"
  },
  {
    "text": "much safer so for example using the jot tokens and you're not going to be sending you know your own passwords",
    "start": "671379",
    "end": "677349"
  },
  {
    "text": "around another interesting thing to note",
    "start": "677349",
    "end": "682629"
  },
  {
    "text": "is that it seems that when I'm sending an authentication token along with my",
    "start": "682629",
    "end": "688949"
  },
  {
    "text": "RPC call I'm basically gonna be sending you know the data over and over and especially for the jot tokens that can",
    "start": "688949",
    "end": "696429"
  },
  {
    "text": "be sizable that's gonna be a performance overhead but it's actually it turns out not to be",
    "start": "696429",
    "end": "702819"
  },
  {
    "text": "a problem because the HTTP to implements",
    "start": "702819",
    "end": "708369"
  },
  {
    "text": "something that's called HVAC and it's a scheme for a compression of the headers so when you're when you're sending the",
    "start": "708369",
    "end": "714970"
  },
  {
    "text": "same authentication token over and over with the with calls or HVAC is actually",
    "start": "714970",
    "end": "722319"
  },
  {
    "text": "gonna compress that away and you're not you're just gonna be sending like a reference to your compression table okay",
    "start": "722319",
    "end": "731349"
  },
  {
    "start": "729000",
    "end": "831000"
  },
  {
    "text": "over to securing channels so the concept of a channel exists in all G RPC",
    "start": "731349",
    "end": "736389"
  },
  {
    "text": "implementation patience or for simplicity or the GRP see connections are just HTTP to",
    "start": "736389",
    "end": "743560"
  },
  {
    "text": "connections and there are actually two kinds of there are two main kinds of ERP",
    "start": "743560",
    "end": "750730"
  },
  {
    "text": "C secure channels so one allows the client to verify that it's talking to",
    "start": "750730",
    "end": "757840"
  },
  {
    "text": "the right server and the other method is where both sides mutually authenticate",
    "start": "757840",
    "end": "763600"
  },
  {
    "text": "each other that they don't know that the counterpart is with who it claims to be note that there's no variant where none",
    "start": "763600",
    "end": "771880"
  },
  {
    "text": "of the parties authenticates authenticates each other because that's basically useless in practice so if",
    "start": "771880",
    "end": "778420"
  },
  {
    "text": "you're establishing a secure channel you're probably gonna be sent sending some confidential data and unless you",
    "start": "778420",
    "end": "784570"
  },
  {
    "text": "know what who the other side is there's there's no point of doing that so the",
    "start": "784570",
    "end": "789790"
  },
  {
    "text": "way it works with TLS which is the transport layer security and it's the",
    "start": "789790",
    "end": "794980"
  },
  {
    "text": "same idea as with HTTP to connections is that the client has certificate",
    "start": "794980",
    "end": "800260"
  },
  {
    "text": "authority routes and the server has a certificate I know private key and then using the certificate authority you can verify the",
    "start": "800260",
    "end": "807400"
  },
  {
    "text": "client or during the initial handshake and verify that it's talking to the right server and mutual TLS is kind of a",
    "start": "807400",
    "end": "814030"
  },
  {
    "text": "similar idea but the server also has the certificate authority and the client has",
    "start": "814030",
    "end": "820000"
  },
  {
    "text": "a certificate on its own and a private key so basically they can verify that",
    "start": "820000",
    "end": "825100"
  },
  {
    "text": "the certificate authority has signed the certificate of the other side and then it's basically genuine okay so mutual",
    "start": "825100",
    "end": "835120"
  },
  {
    "start": "831000",
    "end": "956000"
  },
  {
    "text": "TLS is so it's great and very secure if done right but unfortunately it requires",
    "start": "835120",
    "end": "842500"
  },
  {
    "text": "certificates to work so and the certificates they are easy to generate",
    "start": "842500",
    "end": "848950"
  },
  {
    "text": "when you're coming up with tests when you're writing your prototypes but it becomes much more challenging when",
    "start": "848950",
    "end": "855450"
  },
  {
    "text": "running a real application in production and the reality is that your MPLS secure",
    "start": "855450",
    "end": "863680"
  },
  {
    "text": "authentication scheme is so it's only going to be as secure as your key",
    "start": "863680",
    "end": "869470"
  },
  {
    "text": "management practices so if you rely on your private keys and",
    "start": "869470",
    "end": "874630"
  },
  {
    "text": "for authentication and then the keys leak you know you're basically done so",
    "start": "874630",
    "end": "881590"
  },
  {
    "text": "one of the practices that you know are recommended or is for example the",
    "start": "881590",
    "end": "888790"
  },
  {
    "text": "certificate rotation so even in the case when the attacker gets access to your to",
    "start": "888790",
    "end": "894760"
  },
  {
    "text": "your private keys and the certificates oh they can only use it for limited",
    "start": "894760",
    "end": "899950"
  },
  {
    "text": "amount of time and if you're managing your certificates yourself and you're",
    "start": "899950",
    "end": "905080"
  },
  {
    "text": "trying to do things like certificate rotation and do it like every day oh it's very easy to mismanage and then",
    "start": "905080",
    "end": "912250"
  },
  {
    "text": "you're basically opening up opening up yourself for you know security risks so",
    "start": "912250",
    "end": "917920"
  },
  {
    "text": "ideally we would want a solution that can do mutual TLS but takes away the pain of and risks associated with",
    "start": "917920",
    "end": "925180"
  },
  {
    "text": "certain management and the good news is such solution exists there's actually",
    "start": "925180",
    "end": "931120"
  },
  {
    "text": "multiple solution but but one of them is using a service match that's called a",
    "start": "931120",
    "end": "936220"
  },
  {
    "text": "steal can I just saw like how many people know about this TIA okay beautiful so I don't have to explain so",
    "start": "936220",
    "end": "944680"
  },
  {
    "text": "it still is an example of the transparent authentication that I talked about before where authentication can be",
    "start": "944680",
    "end": "951490"
  },
  {
    "text": "added to your application basically as a drop in feature without making any code changes so before explaining how the",
    "start": "951490",
    "end": "960430"
  },
  {
    "start": "956000",
    "end": "1088000"
  },
  {
    "text": "steal authentication works it's worth mentioning of a few useful primitives",
    "start": "960430",
    "end": "965500"
  },
  {
    "text": "that are provided by kubernetes itself as building blocks for a steal",
    "start": "965500",
    "end": "970900"
  },
  {
    "text": "authentication and these primitives can be actually used in simpler applications",
    "start": "970900",
    "end": "976210"
  },
  {
    "text": "separately as well so whenever you're working with authentication there is",
    "start": "976210",
    "end": "982180"
  },
  {
    "text": "necessarily gonna be some secret that one of the parties needs to have in order to prove to the other side that",
    "start": "982180",
    "end": "988450"
  },
  {
    "text": "you know it's it's genuine and kubernetes secrets are a super useful",
    "start": "988450",
    "end": "993880"
  },
  {
    "text": "concept that allows storing them storing these secrets and distributing them to",
    "start": "993880",
    "end": "999790"
  },
  {
    "text": "your deployments and the way it works is after storing the secret whenever you create a kubernetes service",
    "start": "999790",
    "end": "1005629"
  },
  {
    "text": "you specify it should have access to given secret and then kubernetes",
    "start": "1005629",
    "end": "1012369"
  },
  {
    "text": "transparently mounts that secret to your container kubernetes service accounts",
    "start": "1012369",
    "end": "1019699"
  },
  {
    "text": "are useful for like they're basically a",
    "start": "1019699",
    "end": "1024798"
  },
  {
    "text": "secure way to represent identities in your kubernetes cluster so with steel",
    "start": "1024799",
    "end": "1031510"
  },
  {
    "text": "and it's the authentication two main components come into play one of them is pilot and that's basically the component",
    "start": "1031510",
    "end": "1038209"
  },
  {
    "text": "that's knows about your services in your cluster and from the kubernetes service",
    "start": "1038209",
    "end": "1043909"
  },
  {
    "text": "accounts it can establish identities of those services and Citadel is kind of",
    "start": "1043909",
    "end": "1051440"
  },
  {
    "text": "the key and certificate management of heavy lifting part so that one actually",
    "start": "1051440",
    "end": "1058130"
  },
  {
    "text": "managed manages and rotates the TLS certificates and then the last piece of",
    "start": "1058130",
    "end": "1063980"
  },
  {
    "text": "the of the puzzle is are the envoi proxies that are deployed as sidecar proxies with along with your services",
    "start": "1063980",
    "end": "1071260"
  },
  {
    "text": "and these Android proxies obtain the certificates and and private keys in",
    "start": "1071260",
    "end": "1077870"
  },
  {
    "text": "form of a kubernetes secret and they establish the mutual TLS authentication",
    "start": "1077870",
    "end": "1084710"
  },
  {
    "text": "transparently between services in your cluster ok so I'm actually going to have",
    "start": "1084710",
    "end": "1094419"
  },
  {
    "start": "1088000",
    "end": "1167000"
  },
  {
    "text": "four little examples and it's gonna take",
    "start": "1094419",
    "end": "1099500"
  },
  {
    "text": "me a minute to set up so first example is going to be just connecting Sekulow",
    "start": "1099500",
    "end": "1106130"
  },
  {
    "text": "with TLS the other one is going to be",
    "start": "1106130",
    "end": "1112970"
  },
  {
    "text": "using a jot token then we will set up our mutual TLS but with manuals manually",
    "start": "1112970",
    "end": "1119809"
  },
  {
    "text": "provided certificates and then the last one is going to be the service mesh with steel and still doing the mutual TLS",
    "start": "1119809",
    "end": "1128539"
  },
  {
    "text": "authentication for us",
    "start": "1128539",
    "end": "1131559"
  },
  {
    "start": "1167000",
    "end": "1217000"
  },
  {
    "text": "okay so what I have here is so is so basically an example of kubernetes",
    "start": "1167340",
    "end": "1174419"
  },
  {
    "text": "cluster or nothing is currently running there we can make sure that's actually the case so it's just a regular",
    "start": "1174419",
    "end": "1183210"
  },
  {
    "text": "kubernetes cluster so what I'll have is a client that is very simple and the",
    "start": "1183210",
    "end": "1191340"
  },
  {
    "text": "only thing it does it creates a channel and it passes so called channel",
    "start": "1191340",
    "end": "1197669"
  },
  {
    "text": "credentials that's gonna be configured",
    "start": "1197669",
    "end": "1202830"
  },
  {
    "text": "based on the scenario that we want to run from that channel we create a client",
    "start": "1202830",
    "end": "1208259"
  },
  {
    "text": "for a greater service that only has one method and we are gonna keep invoking that single method you know until the",
    "start": "1208259",
    "end": "1216389"
  },
  {
    "text": "end of the time so I'm gonna show you so",
    "start": "1216389",
    "end": "1226379"
  },
  {
    "text": "this is the method that's creating the credentials in the first example the",
    "start": "1226379",
    "end": "1232350"
  },
  {
    "text": "mutual TLS is going to be not used so the only thing we basically do is create",
    "start": "1232350",
    "end": "1239970"
  },
  {
    "text": "the SSO credentials and we pass in the certificate authority which is going to be used to verify that we're talking to",
    "start": "1239970",
    "end": "1248129"
  },
  {
    "text": "the right server and besides that I have a server that's also very simple so for",
    "start": "1248129",
    "end": "1256710"
  },
  {
    "text": "the and you can see the implementation of the server is basically just start",
    "start": "1256710",
    "end": "1263909"
  },
  {
    "text": "the server on a port provide some kind of credentials and they're gonna be different based on each case in the",
    "start": "1263909",
    "end": "1271139"
  },
  {
    "text": "example and then for the case where",
    "start": "1271139",
    "end": "1277019"
  },
  {
    "text": "we're not going to be using mutual TLS yet so just a regular TLS we're gonna be providing the server side so certificate",
    "start": "1277019",
    "end": "1284490"
  },
  {
    "text": "and the corresponding private key so I",
    "start": "1284490",
    "end": "1289950"
  },
  {
    "start": "1286000",
    "end": "1435000"
  },
  {
    "text": "can now go ahead and deploy",
    "start": "1289950",
    "end": "1294258"
  },
  {
    "text": "okay so I just deployed the TLS version of my server and I'm also gonna deploy",
    "start": "1307710",
    "end": "1314130"
  },
  {
    "text": "the corresponding client okay and now I",
    "start": "1314130",
    "end": "1320460"
  },
  {
    "text": "need to wait a little bit but I'll show you",
    "start": "1320460",
    "end": "1324890"
  },
  {
    "text": "so if these services have already started so you can see that you know we've already been able to contact the",
    "start": "1336280",
    "end": "1341620"
  },
  {
    "text": "server and so this time we were connecting with TLS the other example is",
    "start": "1341620",
    "end": "1350350"
  },
  {
    "text": "so is going to be using the JSON web token authentication and as I said",
    "start": "1350350",
    "end": "1357340"
  },
  {
    "text": "before for that we actually need the we need the secure channel already so we're",
    "start": "1357340",
    "end": "1365080"
  },
  {
    "text": "still gonna be using the TLS secure Channel but we're also on top of it",
    "start": "1365080",
    "end": "1370300"
  },
  {
    "text": "gonna be providing a JSON web token so in my simple example I'm basically so",
    "start": "1370300",
    "end": "1380800"
  },
  {
    "text": "besides providing the channel credentials that's at this point only contains a certificate authority I'm",
    "start": "1380800",
    "end": "1387910"
  },
  {
    "text": "also going to be adding so-called call credentials and my oath auth interceptor",
    "start": "1387910",
    "end": "1395230"
  },
  {
    "text": "is going to be adding a initial metadata entry with the key authorization and",
    "start": "1395230",
    "end": "1403510"
  },
  {
    "text": "then at the bearer token which is going to be a job that I just generated and in",
    "start": "1403510",
    "end": "1408670"
  },
  {
    "text": "my example generating the job is pretty simple but you can see that I'm",
    "start": "1408670",
    "end": "1413680"
  },
  {
    "text": "generating a job that is so expiry or it",
    "start": "1413680",
    "end": "1419170"
  },
  {
    "text": "has so it is a subject which is me and it is audience and it's intended for the",
    "start": "1419170",
    "end": "1424510"
  },
  {
    "text": "helloworld service and then on the on the server side the server just verifies",
    "start": "1424510",
    "end": "1431620"
  },
  {
    "text": "that you know all these all these claims match up",
    "start": "1431620",
    "end": "1436980"
  },
  {
    "start": "1435000",
    "end": "1505000"
  },
  {
    "text": "okay so I'm creating the client and as soon as it starts I'm sure I should be able to get some responses from the",
    "start": "1454200",
    "end": "1462450"
  },
  {
    "text": "server okay and you can see it's basically the same example but this time",
    "start": "1462450",
    "end": "1467820"
  },
  {
    "text": "we've actually been able to authenticate as the subject of the token or with the",
    "start": "1467820",
    "end": "1475230"
  },
  {
    "text": "service and the service has verified that you know the Joe token was actually intended for it okay so that's jot the",
    "start": "1475230",
    "end": "1483749"
  },
  {
    "text": "next example is going to be using mutual TLS oh and this time we'll need to",
    "start": "1483749",
    "end": "1490230"
  },
  {
    "text": "replace the server because right now the current server doesn't have the certificate authority specified and it",
    "start": "1490230",
    "end": "1497009"
  },
  {
    "text": "so it's not verifying that it's connected that the connected client is",
    "start": "1497009",
    "end": "1502139"
  },
  {
    "text": "is the one that's allowed to connect",
    "start": "1502139",
    "end": "1506600"
  },
  {
    "start": "1505000",
    "end": "1558000"
  },
  {
    "text": "so I'm basically just going to replace the existing server with with the one",
    "start": "1516510",
    "end": "1524410"
  },
  {
    "text": "that uses M TLS and what is good what what this is going to do with the server",
    "start": "1524410",
    "end": "1530140"
  },
  {
    "text": "is besides the certificate and the private key it's also going to specify",
    "start": "1530140",
    "end": "1537370"
  },
  {
    "text": "the certificate authority that should be used to verify the client on the client",
    "start": "1537370",
    "end": "1543490"
  },
  {
    "text": "side I'll need to provide besides the certificate authority that I already",
    "start": "1543490",
    "end": "1549430"
  },
  {
    "text": "provided I'll need to provide the client-side certificate which is now going to be verified and the",
    "start": "1549430",
    "end": "1556540"
  },
  {
    "text": "corresponding private key so as now when",
    "start": "1556540",
    "end": "1564940"
  },
  {
    "start": "1558000",
    "end": "1591000"
  },
  {
    "text": "I actually replace the server with the one that requires mutual TLS the old",
    "start": "1564940",
    "end": "1571090"
  },
  {
    "text": "servers or the old clients actually stopped working because they know then they can no longer establish the",
    "start": "1571090",
    "end": "1576820"
  },
  {
    "text": "connection with the server but if I actually okay I haven't started the",
    "start": "1576820",
    "end": "1584800"
  },
  {
    "text": "client yet so if I actually start the mpls client you'll see that that one can",
    "start": "1584800",
    "end": "1592889"
  },
  {
    "start": "1591000",
    "end": "1673000"
  },
  {
    "text": "okay so I started the client and you can see that it's been able to authenticate via mutual TLS okay and the last example",
    "start": "1599540",
    "end": "1614000"
  },
  {
    "text": "that that I have is doing a mutual TLS with a steal so so the way it's going to",
    "start": "1614000",
    "end": "1628640"
  },
  {
    "text": "work is so that I specify a server that's actually uses no security at all",
    "start": "1628640",
    "end": "1636080"
  },
  {
    "text": "but I'm also going to use the sto CTL command to inject the sidecar proxy and",
    "start": "1636080",
    "end": "1641680"
  },
  {
    "text": "the sidecar proxy will take care of actually establishing the mutual TLS connection so I'm gonna replace the",
    "start": "1641680",
    "end": "1650120"
  },
  {
    "text": "existing server okay",
    "start": "1650120",
    "end": "1655809"
  },
  {
    "text": "okay and then I can also deploy the client",
    "start": "1669280",
    "end": "1674650"
  },
  {
    "text": "so this time when asking for the locks",
    "start": "1687640",
    "end": "1692429"
  },
  {
    "text": "I'll need to there's actually two containers running in my pot one of them",
    "start": "1693660",
    "end": "1699760"
  },
  {
    "text": "is the actual greeter client and the other one is the steel sidecar Pro is",
    "start": "1699760",
    "end": "1708910"
  },
  {
    "text": "the invoice ID card proxy so you can see that the client can connect to the",
    "start": "1708910",
    "end": "1716110"
  },
  {
    "text": "server and the way to verify that it's actually",
    "start": "1716110",
    "end": "1727590"
  },
  {
    "text": "authenticate 'add via mutual TLS",
    "start": "1727590",
    "end": "1732210"
  },
  {
    "text": "okay so not okay I'm actually not sure",
    "start": "1753470",
    "end": "1760820"
  },
  {
    "text": "what happened with this one but although examples are available on github so I",
    "start": "1760820",
    "end": "1767870"
  },
  {
    "text": "invite you to you know check them out and you know see how it's done and I",
    "start": "1767870",
    "end": "1773330"
  },
  {
    "text": "also don't have that much time left so",
    "start": "1773330",
    "end": "1777309"
  },
  {
    "start": "1776000",
    "end": "1858000"
  },
  {
    "text": "so I'm gonna thank you for attention oh and before you ask any questions I just",
    "start": "1786010",
    "end": "1793870"
  },
  {
    "text": "wanted to give a shout out to vicious talk tomorrow it's going to be about ERP C load",
    "start": "1793870",
    "end": "1799990"
  },
  {
    "text": "balancing it's in the CTO room or if you want to chat with me personally or you",
    "start": "1799990",
    "end": "1806650"
  },
  {
    "text": "know chat with other people that know about gr PC please meet me at the CN CF answer bar on Thursday oh it's in the",
    "start": "1806650",
    "end": "1814419"
  },
  {
    "text": "sponsor showcase hall or you can just chat to me you know after in the hallway",
    "start": "1814419",
    "end": "1819460"
  },
  {
    "text": "after this presentation and down there is a link to the demo repository that's",
    "start": "1819460",
    "end": "1826299"
  },
  {
    "text": "public and you know it has all the examples and all the comments that you need to run to try it for yourself yep",
    "start": "1826299",
    "end": "1833380"
  },
  {
    "text": "five we have five minutes for questions all right anybody have any questions",
    "start": "1833380",
    "end": "1843690"
  },
  {
    "text": "alright okay I guess let's think thank you guys very much don't forget please rate the rate they talk when you're through the app when you're done and",
    "start": "1846900",
    "end": "1852990"
  },
  {
    "text": "thank you very much thank you [Applause]",
    "start": "1852990",
    "end": "1860390"
  }
]