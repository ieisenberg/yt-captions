[
  {
    "start": "0",
    "end": "185000"
  },
  {
    "text": "okay let's get started welcome everyone thank you very much for taking time out of your day to join us",
    "start": "11759",
    "end": "17199"
  },
  {
    "text": "for today's cncf webinar transact transactional",
    "start": "17199",
    "end": "24080"
  },
  {
    "text": "excuse me transactional microservices with the test coordination without scale i'm jerry",
    "start": "24480",
    "end": "30000"
  },
  {
    "text": "fallon and i will be moderating today's webinar we would like to welcome our presenter today daniel kozlowski",
    "start": "30000",
    "end": "36239"
  },
  {
    "text": "minister of engineering at plan at planetscale just a few housekeeping items before we get started during the webinar you are",
    "start": "36239",
    "end": "42719"
  },
  {
    "text": "not able to talk as an attendee there is a q a box at the bottom of your screen please feel free to drop your",
    "start": "42719",
    "end": "48320"
  },
  {
    "text": "questions in there and we'll get to as many as we can at the end this is an official webinar of the cncf",
    "start": "48320",
    "end": "54000"
  },
  {
    "text": "and as such is subject to the cncf code of conduct please do not add anything to the chat",
    "start": "54000",
    "end": "59039"
  },
  {
    "text": "or questions that would be in violation of the code of conduct please be respectful of your fellow participants and presenters please also",
    "start": "59039",
    "end": "65198"
  },
  {
    "text": "note that the reporting on slides will be posted later today to the cncf webinar page at cncf dot io webinars",
    "start": "65199",
    "end": "72159"
  },
  {
    "text": "and with that i will hand it over to daniel for today's webinar great thank you so much as jerry said my",
    "start": "72159",
    "end": "80000"
  },
  {
    "text": "name is dan kozlowski i am a maintainer of the tess which is a cncf project i'm also the",
    "start": "80000",
    "end": "86479"
  },
  {
    "text": "minister of engineering at a company called planetscale planetscale was founded by one of the creators of the tess and",
    "start": "86479",
    "end": "92880"
  },
  {
    "text": "we work on the tests and we run a database as a service based off of it and one of the things we get asked a lot",
    "start": "92880",
    "end": "99360"
  },
  {
    "text": "is as people are looking at their services either trying to scale or thinking about",
    "start": "99360",
    "end": "104399"
  },
  {
    "text": "scale in the future a lot of times they're talking about moving to microservices this has been traditionally one of the",
    "start": "104399",
    "end": "110720"
  },
  {
    "text": "ways that you would get additional scale out of your application if you split it up then you can get more",
    "start": "110720",
    "end": "116560"
  },
  {
    "text": "thorough put so people come to us and talk to us all the time there are lots of problems that we see people face",
    "start": "116560",
    "end": "123360"
  },
  {
    "text": "and as database scaling experts we generally have some advice for them about what you",
    "start": "123360",
    "end": "128959"
  },
  {
    "text": "can do and how you can use the test to solve those problems but as we're developing the product the",
    "start": "128959",
    "end": "134239"
  },
  {
    "text": "test also brings some extra features to the database realm",
    "start": "134239",
    "end": "139440"
  },
  {
    "text": "that are really unique to the test that allow you to do some things that i don't think any other database lets you",
    "start": "139440",
    "end": "145040"
  },
  {
    "text": "do so i wanted to put together a demo of how we can use those this is",
    "start": "145040",
    "end": "151040"
  },
  {
    "text": "still not a widely used technology of the test the pieces have been around for a very",
    "start": "151040",
    "end": "156080"
  },
  {
    "text": "long time but we're really exploring uh what can be done here and we're kind of pushing",
    "start": "156080",
    "end": "161920"
  },
  {
    "text": "uh how you can use the tests with microservices so some of the things that you're going to see today are brand new",
    "start": "161920",
    "end": "168720"
  },
  {
    "text": "the code will be made available and please write down as many questions as you have uh i'm not used to this one-sided",
    "start": "168720",
    "end": "175920"
  },
  {
    "text": "talking thing i really like interactions so would love to answer your questions as we move through the presentation",
    "start": "175920",
    "end": "181280"
  },
  {
    "text": "but i have to wait till the end uh so let's get started um first what is what",
    "start": "181280",
    "end": "187280"
  },
  {
    "start": "185000",
    "end": "385000"
  },
  {
    "text": "do i mean when i say monolith and microservice right so a monolith i generally would define like",
    "start": "187280",
    "end": "192640"
  },
  {
    "text": "this it is a service which may be split into different modules depending on the size",
    "start": "192640",
    "end": "198319"
  },
  {
    "text": "of the service depending on the size of the team it may be split apart but generally the defining characteristic is it's built",
    "start": "198319",
    "end": "204959"
  },
  {
    "text": "and deployed as a single service as a single binary a single process",
    "start": "204959",
    "end": "210879"
  },
  {
    "text": "so this may be in java it may be in go could be in ruby could be in any language",
    "start": "210879",
    "end": "216159"
  },
  {
    "text": "but it's going to be one deployable that goes out and it doesn't mean it's it's singular",
    "start": "216159",
    "end": "223200"
  },
  {
    "text": "there may be multiple so you are obviously following best practices you have implemented the 12 factor",
    "start": "223200",
    "end": "228959"
  },
  {
    "text": "methodology um so you don't have any state in this service you can run as many of these as you want",
    "start": "228959",
    "end": "234799"
  },
  {
    "text": "to horizontally scale them however state is always pushed outside and traditionally that is to a database",
    "start": "234799",
    "end": "241599"
  },
  {
    "text": "uh either a relational or a non-relational database and so your monolithic architecture may look",
    "start": "241599",
    "end": "246879"
  },
  {
    "text": "like this the client comes in it'll hit the service all the module the service would communicate with the",
    "start": "246879",
    "end": "252840"
  },
  {
    "text": "database this is really useful because your",
    "start": "252840",
    "end": "258239"
  },
  {
    "text": "application probably has some transaction architecture built into it very common for any service that has",
    "start": "258239",
    "end": "265360"
  },
  {
    "text": "complex logic to require transactions and so your transaction architecture may look like this it may go to one module",
    "start": "265360",
    "end": "272160"
  },
  {
    "text": "which begins a transaction gets some data that uh connection",
    "start": "272160",
    "end": "277600"
  },
  {
    "text": "which contains the transaction information is passed to another module through ipc and then",
    "start": "277600",
    "end": "284560"
  },
  {
    "text": "we can do some more selects maybe an insert maybe an update finally we will commit the transaction and everything is either",
    "start": "284560",
    "end": "290880"
  },
  {
    "text": "going to happen or it's not going to happen we're going to have nice acid properties and our users are always going to see",
    "start": "290880",
    "end": "296560"
  },
  {
    "text": "consistent state so this might be our traditional transaction architecture in our",
    "start": "296560",
    "end": "302160"
  },
  {
    "text": "traditional monolith architecture well what happens when we move to microservices generally the best",
    "start": "302160",
    "end": "309919"
  },
  {
    "text": "practice when you're moving to microservices is to have an architecture that looks something like this you may have multiple services those",
    "start": "309919",
    "end": "317520"
  },
  {
    "text": "services will probably sit behind some sort of coordinator in this diagram here i have an api gateway but",
    "start": "317520",
    "end": "323280"
  },
  {
    "text": "there's lots of ways to do it and you're still following that great 12-factor methodology so you're not storing state",
    "start": "323280",
    "end": "330080"
  },
  {
    "text": "in your services you are pushing the state outside of your service into a database",
    "start": "330080",
    "end": "336320"
  },
  {
    "text": "you'll find a lot of different information about how this should be done because there really isn't a great way to do this there's",
    "start": "336320",
    "end": "342000"
  },
  {
    "text": "trade-offs on either side um i think the general recommendation if you were to ask",
    "start": "342000",
    "end": "347280"
  },
  {
    "text": "a hundred people most of them would say you do database per service this is what we have seen at planetscale",
    "start": "347280",
    "end": "353280"
  },
  {
    "text": "as people have come to us we have seen individuals going database per service so my modules have turned into services",
    "start": "353280",
    "end": "360960"
  },
  {
    "text": "the defining characteristic here is um i can have shared code i can have not shared code",
    "start": "360960",
    "end": "366400"
  },
  {
    "text": "but what i have is three separate deployable objects they're versioned independently they're deployed",
    "start": "366400",
    "end": "371440"
  },
  {
    "text": "independently i can life cycle them independently um and because of that",
    "start": "371440",
    "end": "376639"
  },
  {
    "text": "they're talking to databases independently that causes some issues when we're talking about our",
    "start": "376639",
    "end": "383600"
  },
  {
    "text": "transaction architecture because in the monolithic architecture",
    "start": "383600",
    "end": "388960"
  },
  {
    "start": "385000",
    "end": "510000"
  },
  {
    "text": "we were passing um we were passing our connection through ipc so we could actually maintain the same",
    "start": "388960",
    "end": "394639"
  },
  {
    "text": "database connection and we could maintain a transaction between right between the different",
    "start": "394639",
    "end": "399680"
  },
  {
    "text": "modules as soon as we moved to microservices we lose that capability you can't actually maintain the transaction",
    "start": "399680",
    "end": "406240"
  },
  {
    "text": "there are different databases so you have to do something else to have transactions or have any complex",
    "start": "406240",
    "end": "412160"
  },
  {
    "text": "business logic with your microservices but wait what if i just",
    "start": "412160",
    "end": "418639"
  },
  {
    "text": "use the same database um well this is not really uh going to solve any",
    "start": "418639",
    "end": "425280"
  },
  {
    "text": "of your problems what's going to happen here is your independent services while they",
    "start": "425280",
    "end": "430479"
  },
  {
    "text": "are still microservices they're still versioned and life cycled independently they now have a shared external",
    "start": "430479",
    "end": "437919"
  },
  {
    "text": "dependency which needs to be managed in unison with all of them so you have a",
    "start": "437919",
    "end": "442960"
  },
  {
    "text": "single point of failure you have something that is going to need to be managed not by one service but three services",
    "start": "442960",
    "end": "448720"
  },
  {
    "text": "so as you're doing management tasks like schema updates or if you're doing any",
    "start": "448720",
    "end": "455520"
  },
  {
    "text": "performance related issues they're all going to be shared by all of your services",
    "start": "455520",
    "end": "461039"
  },
  {
    "text": "also while you may be able to have all of your data in one spot um",
    "start": "461039",
    "end": "468240"
  },
  {
    "text": "nothing says that that data is going to remain consistent across multiple versions of your service it's very common in this scenario for",
    "start": "468240",
    "end": "475280"
  },
  {
    "text": "the user service to make a schema change but since the campaign service is a different module it may not know about",
    "start": "475280",
    "end": "481759"
  },
  {
    "text": "that schema change and all of a sudden its queries start failing so there's a lot of hidden problems",
    "start": "481759",
    "end": "487039"
  },
  {
    "text": "there and to make matters even worse you still can't do distributed transactions because the different",
    "start": "487039",
    "end": "493199"
  },
  {
    "text": "services can't actually share that connection each different process is going to have",
    "start": "493199",
    "end": "498400"
  },
  {
    "text": "a different connection to the database and there's no way for those processes to share that information",
    "start": "498400",
    "end": "504879"
  },
  {
    "text": "so um what this actually shows us is we've been lying to ourselves this",
    "start": "504879",
    "end": "511039"
  },
  {
    "start": "510000",
    "end": "590000"
  },
  {
    "text": "whole time right we've said we followed the 12 sec factor methodology we said that our services don't have state it's",
    "start": "511039",
    "end": "517039"
  },
  {
    "text": "all pushed out to the database that was a lie it was a horrible lie because we had this",
    "start": "517039",
    "end": "522959"
  },
  {
    "text": "this implicit state that we don't really think about and that's the connection our connection to the database actually",
    "start": "522959",
    "end": "529040"
  },
  {
    "text": "carries a good deal of state with it in the example that i just gave you that",
    "start": "529040",
    "end": "534959"
  },
  {
    "text": "is carrying information about your transaction that transaction only lives in that connection and we actually rely on that",
    "start": "534959",
    "end": "541360"
  },
  {
    "text": "for certain properties of acid transactions right if i make an insert in that transaction",
    "start": "541360",
    "end": "547040"
  },
  {
    "text": "depending on my isolation level nobody else outside of that transaction is going to see it until i commit it",
    "start": "547040",
    "end": "554160"
  },
  {
    "text": "and also we're going to have making sure that only one person can update rows we're going to",
    "start": "554160",
    "end": "559680"
  },
  {
    "text": "make sure that either the entire thing happens or nothing happens all the properties of acid they exist",
    "start": "559680",
    "end": "565440"
  },
  {
    "text": "because we have this implicit state there's also because of that",
    "start": "565440",
    "end": "570800"
  },
  {
    "text": "another implicit state and that's the tcp connection to the client so while yes you may horizontally scale",
    "start": "570800",
    "end": "576399"
  },
  {
    "text": "your your services um your load balancer probably has a session affinity in it",
    "start": "576399",
    "end": "581760"
  },
  {
    "text": "because your clients are going to need to hit the same service or they're not going to be able to do",
    "start": "581760",
    "end": "586800"
  },
  {
    "text": "any sort of complex interaction well so what is the solution well enter",
    "start": "586800",
    "end": "592640"
  },
  {
    "text": "the test so the test wasn't built to solve this problem uh but it turns out it does and it does",
    "start": "592640",
    "end": "598880"
  },
  {
    "text": "it really well so for those of you who are not familiar with what the tess is this is the architecture of the test",
    "start": "598880",
    "end": "606079"
  },
  {
    "text": "it is a fairly um it is a distributed database solution so people",
    "start": "606079",
    "end": "612160"
  },
  {
    "text": "will call it a new sql database people will call it a sharding system people will call it many things but",
    "start": "612160",
    "end": "618079"
  },
  {
    "text": "what it does is it takes the traditional database and it splits it up into a couple",
    "start": "618079",
    "end": "623519"
  },
  {
    "text": "different parts that we can then um have behave in interesting ways",
    "start": "623519",
    "end": "629120"
  },
  {
    "text": "so every test deployment has a few components that it needs at the very end of a test deployment",
    "start": "629120",
    "end": "635760"
  },
  {
    "text": "you're going to have a set of shards you can have one charge you can have many shards the shard is just",
    "start": "635760",
    "end": "641760"
  },
  {
    "text": "a portion of your database the shard is going to be made up of tablets and each tablet is going to have",
    "start": "641760",
    "end": "648800"
  },
  {
    "text": "a my sequel process that actually stores your data at the end of the day all data in the test is",
    "start": "648800",
    "end": "654640"
  },
  {
    "text": "stored on my sql in front of that mysql process there is a tender process",
    "start": "654640",
    "end": "659760"
  },
  {
    "text": "which we call vt tablet that is the process that actually connects to my sql",
    "start": "659760",
    "end": "665200"
  },
  {
    "text": "and actually handles the running of queries uh again and we can have as many shrouds",
    "start": "665200",
    "end": "671120"
  },
  {
    "text": "as we like at any point in time one of those tablets and one of those my sql processes",
    "start": "671120",
    "end": "676560"
  },
  {
    "text": "is going to be the leader of a shard and then there can be any number of replicas who are receiving updates via",
    "start": "676560",
    "end": "683839"
  },
  {
    "text": "binary logs the test actually manages that relationship there it knows how to switch between",
    "start": "683839",
    "end": "688959"
  },
  {
    "text": "which tablet is the leader and which tablets are the replicas and make sure that everything stays in sync",
    "start": "688959",
    "end": "694240"
  },
  {
    "text": "on top of that there is a number of stateless gateways we call these vt",
    "start": "694240",
    "end": "700000"
  },
  {
    "text": "gates you can have as many or a few of them as they like and this is where the magic in",
    "start": "700000",
    "end": "705200"
  },
  {
    "text": "this demonstration is going to happen vtgate exposes my sql",
    "start": "705200",
    "end": "711440"
  },
  {
    "text": "dialect so you can connect to it through port 3306 and you can speak the stock my sql protocol most",
    "start": "711440",
    "end": "717920"
  },
  {
    "text": "drivers that you'll find for most popular programming languages work directly with this as well as the",
    "start": "717920",
    "end": "723120"
  },
  {
    "text": "mysql command line tools it behaves generally like you would expect a traditional mysql database to behave it",
    "start": "723120",
    "end": "730560"
  },
  {
    "text": "takes ddl statements it takes the ml statements and it modifies your database",
    "start": "730560",
    "end": "735600"
  },
  {
    "text": "there are some other parts of a test cluster that aren't really important for",
    "start": "735600",
    "end": "741279"
  },
  {
    "text": "this demonstration so we will just ignore those for now while i'm still on this page",
    "start": "741279",
    "end": "746639"
  },
  {
    "text": "um it's important to note that this is a distributed database right these components are all running on different machines they could",
    "start": "746639",
    "end": "754000"
  },
  {
    "text": "be located in different continents in different data centers and so to communicate between them we",
    "start": "754000",
    "end": "760800"
  },
  {
    "text": "use grpc so the vt gates actually talk to the vt tablets over grpc",
    "start": "760800",
    "end": "766880"
  },
  {
    "text": "and the vt gates talk to the topology servers into the control plane all using this grpc service layer",
    "start": "766880",
    "end": "774399"
  },
  {
    "text": "well it turns out that the vt gate not only talks down to the",
    "start": "774399",
    "end": "780480"
  },
  {
    "text": "vt tablets with grpc but it also exposes its own grpc endpoint",
    "start": "780480",
    "end": "786880"
  },
  {
    "text": "so the grpc endpoint that it exposes has a number of different functions they",
    "start": "786880",
    "end": "792800"
  },
  {
    "start": "787000",
    "end": "853000"
  },
  {
    "text": "are all defined in the protocol buffers in the the test code base but the two",
    "start": "792800",
    "end": "798000"
  },
  {
    "text": "really important ones um are the execute request and execute response vtgate has",
    "start": "798000",
    "end": "804000"
  },
  {
    "text": "a rpc method called execute which is really what we're going to be abusing to do all this",
    "start": "804000",
    "end": "809120"
  },
  {
    "text": "and it looks like you would expect this request to look there is a bound query which is a query",
    "start": "809120",
    "end": "815680"
  },
  {
    "text": "with optionally bound parameters there is a caller id",
    "start": "815680",
    "end": "820800"
  },
  {
    "text": "which is a it's not the authentication method but it's actually a second level",
    "start": "820800",
    "end": "826079"
  },
  {
    "text": "of identification that you can use to sort of um further refine who is actually calling a",
    "start": "826079",
    "end": "832720"
  },
  {
    "text": "specific query and then there's that session object well it turns out that um because of grpc",
    "start": "832720",
    "end": "841279"
  },
  {
    "text": "what the test authors did is they took all of the information that is normally",
    "start": "841279",
    "end": "846880"
  },
  {
    "text": "implicitly shared in the database connection and they turned it into a session",
    "start": "846880",
    "end": "852240"
  },
  {
    "text": "and so the session object is exchanged like a cookie um and when the test authors wrote this",
    "start": "852240",
    "end": "860000"
  },
  {
    "start": "853000",
    "end": "955000"
  },
  {
    "text": "down they probably didn't mean actually like a cookie but when i read it",
    "start": "860000",
    "end": "865199"
  },
  {
    "text": "that's exactly how you can use it so we have this uh message this uh part of the rpc",
    "start": "865199",
    "end": "872160"
  },
  {
    "text": "transaction that actually maintains all of the state and what originally what this allows you to",
    "start": "872160",
    "end": "877440"
  },
  {
    "text": "do is this makes the vt gate actually stateless if you are using the grpc endpoint and if you are maintaining",
    "start": "877440",
    "end": "884240"
  },
  {
    "text": "the session your vt gates contain absolutely no state you can actually multiplex between them and you won't",
    "start": "884240",
    "end": "891600"
  },
  {
    "text": "notice any difference so if today you are using the the test drivers that are written",
    "start": "891600",
    "end": "897120"
  },
  {
    "text": "in golang or the jdbc drivers that use the grpc endpoint either one of those",
    "start": "897120",
    "end": "903199"
  },
  {
    "text": "you can use this grpcn grpc endpoint from your programming language and your vt gates will become completely",
    "start": "903199",
    "end": "910839"
  },
  {
    "text": "stateless well when you do that what actually happens is this session is stored",
    "start": "910839",
    "end": "917360"
  },
  {
    "text": "on the caller and then it's reused to the application it just looks like a",
    "start": "917360",
    "end": "922639"
  },
  {
    "text": "single database connection it's just that all the state has been fully pushed out into the client",
    "start": "922639",
    "end": "930560"
  },
  {
    "text": "but there's nothing that says it has to be used that way so while that is the way the jrpc",
    "start": "931440",
    "end": "939199"
  },
  {
    "text": "and uh um golang drivers work we're this is a normal grpc interface we",
    "start": "939199",
    "end": "946800"
  },
  {
    "text": "can do anything we'd like with it so what if we were to just pull that even a little farther out and move it outside of the service and",
    "start": "946800",
    "end": "952720"
  },
  {
    "text": "push it down to the client and so that's what i'm going to show um i have a theoretical micro service",
    "start": "952720",
    "end": "959120"
  },
  {
    "start": "955000",
    "end": "1156000"
  },
  {
    "text": "architecture that looks like this uh same thing except instead of having a database per",
    "start": "959120",
    "end": "964320"
  },
  {
    "text": "service we just have a single the test database uh i know what you're saying i just said",
    "start": "964320",
    "end": "970399"
  },
  {
    "text": "this was a bad idea it turns out that uh it's not just this grpc magic that allows if it has to",
    "start": "970399",
    "end": "976720"
  },
  {
    "text": "operate like this there's also a number of other features about the tests that make this a really good solution",
    "start": "976720",
    "end": "982880"
  },
  {
    "text": "the ones that i want to just touch on right now is that this allows you to scale because the test has a built-in sharding",
    "start": "982880",
    "end": "989279"
  },
  {
    "text": "and scaling solution so you get scale without complexity it also has built-in management features",
    "start": "989279",
    "end": "994480"
  },
  {
    "text": "so we can do things like online schema changes we can do things like transaction killers and query",
    "start": "994480",
    "end": "999600"
  },
  {
    "text": "watchers which help eliminate bad actors from bringing down your database",
    "start": "999600",
    "end": "1005040"
  },
  {
    "text": "all right so what does this look like um i'm going to walk you through an example here using javascript that is going to use",
    "start": "1005040",
    "end": "1012079"
  },
  {
    "text": "the grpc endpoint and is going to display some of these properties so i'm going to switch",
    "start": "1012079",
    "end": "1017440"
  },
  {
    "text": "to my text editor and what i've done here is i have written a",
    "start": "1017440",
    "end": "1023680"
  },
  {
    "text": "pretty quick typescript library here just to show how you could pull the grpc endpoint",
    "start": "1023680",
    "end": "1030079"
  },
  {
    "text": "into your programming language and you could use it to run queries like you would on any database",
    "start": "1030079",
    "end": "1035520"
  },
  {
    "text": "but then also how you can use it to explicitly pass state so walking you through this code here",
    "start": "1035520",
    "end": "1041678"
  },
  {
    "text": "what we see is i have a client class that's got two very important functions",
    "start": "1041679",
    "end": "1046880"
  },
  {
    "text": "one is just a connection class which gives you a standard database connection but then another one which",
    "start": "1046880",
    "end": "1053039"
  },
  {
    "text": "says i would like you to make a connection but i'm going to give you the session information um the way i have them wired up is if",
    "start": "1053039",
    "end": "1059840"
  },
  {
    "text": "you just ask for a stock uh connection then uh excuse me did you intend to show",
    "start": "1059840",
    "end": "1068320"
  },
  {
    "text": "an editor there's a comment with that yep absolutely",
    "start": "1068320",
    "end": "1074160"
  },
  {
    "text": "so um yeah so this is going to give you a uh a connection that already has the",
    "start": "1076640",
    "end": "1083280"
  },
  {
    "text": "session preloaded uh the rest of this is um fairly mundane just wiring",
    "start": "1083280",
    "end": "1088559"
  },
  {
    "text": "to wire up the ability to run queries and to wire up the ability to parse queries into result sets",
    "start": "1088559",
    "end": "1094720"
  },
  {
    "text": "so again this code will be made available online it is um not necessarily boilerplate",
    "start": "1094720",
    "end": "1101600"
  },
  {
    "text": "but it is a fairly straightforward wiring code to make all this work it all",
    "start": "1101600",
    "end": "1107679"
  },
  {
    "text": "starts out with a connection to our service so here is the lines of code that actually create a",
    "start": "1107679",
    "end": "1113039"
  },
  {
    "text": "connection to our service and this just establishes the grpc connection to our service at that point sending",
    "start": "1113039",
    "end": "1121200"
  },
  {
    "text": "queries is a matter of creating the correct objects and passing them",
    "start": "1121200",
    "end": "1126400"
  },
  {
    "text": "through right so what does this look like in practice so in practice we can have",
    "start": "1126400",
    "end": "1134480"
  },
  {
    "text": "a number of services which look like they're using a standard database so in this case i'm running a query um",
    "start": "1134480",
    "end": "1142320"
  },
  {
    "text": "because i have a single unified uh database i can actually can i interrupt yeah everyone is still",
    "start": "1142320",
    "end": "1149840"
  },
  {
    "text": "seeing only the slides",
    "start": "1149840",
    "end": "1153200"
  },
  {
    "text": "and not anything else i'm sorry about that let's try it again",
    "start": "1155840",
    "end": "1164400"
  },
  {
    "text": "yeah that's better awesome all right uh",
    "start": "1164400",
    "end": "1169760"
  },
  {
    "text": "well this was my lovely lovely text editor um the connection code is located here",
    "start": "1171280",
    "end": "1178080"
  },
  {
    "text": "again it's it's split into a standard connection and then a connection with session uh",
    "start": "1178080",
    "end": "1184000"
  },
  {
    "text": "and again stock grpc code um all the the uh code was generated with the grpc",
    "start": "1184000",
    "end": "1191600"
  },
  {
    "text": "code generator and then we just wired it up here again code will be online you will be able to see it let me go",
    "start": "1191600",
    "end": "1197360"
  },
  {
    "text": "back to my server great thing here is this is a standard mysql database so this is",
    "start": "1197360",
    "end": "1203200"
  },
  {
    "text": "a stock sql i'm even doing a join here to pull in some information across services great thing here is i",
    "start": "1203200",
    "end": "1211679"
  },
  {
    "text": "can do it this way where i'm actually joining in other tables or if i want to keep strong separation between these services",
    "start": "1211679",
    "end": "1218159"
  },
  {
    "text": "i can actually i can do that now because i have explicit state management so what i'm going to do is um in each of",
    "start": "1218159",
    "end": "1225840"
  },
  {
    "text": "my services whenever a request is made i'm going to check the headers to see if somebody passed in of a test",
    "start": "1225840",
    "end": "1232400"
  },
  {
    "text": "session if they did i'm going to continue on with that session if they didn't i'm going to go ahead and",
    "start": "1232400",
    "end": "1237840"
  },
  {
    "text": "create a new session and then do",
    "start": "1237840",
    "end": "1244880"
  },
  {
    "text": "the other thing that i'm going to do is when i am done i'm actually going to pass my session",
    "start": "1246799",
    "end": "1251919"
  },
  {
    "text": "out to uh the next caller so when a request comes in i'm actually",
    "start": "1251919",
    "end": "1258640"
  },
  {
    "text": "going to check that it's got a whether or not it has a session if it doesn't i'm going to",
    "start": "1258640",
    "end": "1264559"
  },
  {
    "text": "um create a new one and then when i'm done with it i'm going to pass the session back out all right well what does this look like",
    "start": "1264559",
    "end": "1272559"
  },
  {
    "text": "in practice i have a a sample javascript app here that i'm",
    "start": "1272559",
    "end": "1280159"
  },
  {
    "text": "going to run from the command line so you can do this one of two ways you could either do it with complete user",
    "start": "1280159",
    "end": "1285919"
  },
  {
    "text": "control this could be pushed all the way out to your user's browser and that's kind of how i have it set up or you can do it in a microservice that",
    "start": "1285919",
    "end": "1292720"
  },
  {
    "text": "microservice can just pass the transaction information to other services as it does coordination",
    "start": "1292720",
    "end": "1298559"
  },
  {
    "text": "locally so for the effect of this demo i've created a transaction microservice which will do",
    "start": "1298559",
    "end": "1305360"
  },
  {
    "text": "my begins and commits so i'm first going to ask for a transaction to begin",
    "start": "1305360",
    "end": "1310559"
  },
  {
    "text": "and then i'm going to insert some data and then i'm going to commit that transaction and again this is going to happen in two",
    "start": "1310559",
    "end": "1316400"
  },
  {
    "text": "separate microservices so i will just go ahead and copy this script",
    "start": "1316400",
    "end": "1323120"
  },
  {
    "text": "and you should all be seeing my terminal now",
    "start": "1323600",
    "end": "1330840"
  },
  {
    "text": "dp are you seeing my terminal now yes beautiful all right so i'm gonna paste",
    "start": "1330840",
    "end": "1336799"
  },
  {
    "text": "this script it's gonna do um some stuff but before that i'm gonna go ahead to",
    "start": "1336799",
    "end": "1342400"
  },
  {
    "text": "a mysql prompt this is standard mysql this is not um anything special to the",
    "start": "1342400",
    "end": "1348400"
  },
  {
    "text": "test although you can see that when i connected i connected to of a test server uh so i can say show tables hopefully",
    "start": "1348400",
    "end": "1355520"
  },
  {
    "text": "didn't drop my session nope and i can select star from campaign",
    "start": "1355520",
    "end": "1362320"
  },
  {
    "text": "and i don't have anything in there alright so what i'm going to do is i'm actually going to paste this",
    "start": "1362799",
    "end": "1368559"
  },
  {
    "text": "and all that text that just scrolled past your screens is me actually",
    "start": "1368559",
    "end": "1374240"
  },
  {
    "text": "running uh the the transaction so i have um created transaction i have",
    "start": "1374240",
    "end": "1380640"
  },
  {
    "text": "inserted some data and now i'm actually waiting at the commit stage and what's really cool here",
    "start": "1380640",
    "end": "1386000"
  },
  {
    "text": "is if i do that same select it's empty because even though i have inserted the data i haven't committed",
    "start": "1386000",
    "end": "1392640"
  },
  {
    "text": "yet so it's not crossing the boundaries of that connection if i go ahead and commit the data all",
    "start": "1392640",
    "end": "1398480"
  },
  {
    "text": "right my commit has happened i've gotten back at 200 okay now my data has made it in",
    "start": "1398480",
    "end": "1405919"
  },
  {
    "text": "my transaction has been committed and we can go along and this would work for again i've",
    "start": "1405919",
    "end": "1411679"
  },
  {
    "text": "pulled this all the way out to the user but this would work inside the service as well",
    "start": "1411679",
    "end": "1418880"
  },
  {
    "text": "uh so you can have any number of services we can pass around our sessions state has now become explicit by passing",
    "start": "1418960",
    "end": "1425760"
  },
  {
    "text": "this all the way to the user i don't even have to worry about session affinity to my services um i can upgrade my",
    "start": "1425760",
    "end": "1433200"
  },
  {
    "text": "services without dropping transactions without dropping any user requests um so i've pushed even more of my",
    "start": "1433200",
    "end": "1439760"
  },
  {
    "text": "maintenance burden off into the tests and then again uh the code to use this looks exactly",
    "start": "1439760",
    "end": "1447039"
  },
  {
    "text": "like database code in fact it's compatible with a lot of your orms and your other",
    "start": "1447039",
    "end": "1453760"
  },
  {
    "text": "tooling that you use for your database today with the extra features that you can",
    "start": "1453760",
    "end": "1460559"
  },
  {
    "text": "pull in things like this grbc endpoint to be able to do even more things that",
    "start": "1460559",
    "end": "1465679"
  },
  {
    "text": "you can't do with other database systems okay back to slides i'm gonna stop the stream",
    "start": "1465679",
    "end": "1472559"
  },
  {
    "text": "share and start again because that seems to give me the best result",
    "start": "1472559",
    "end": "1478159"
  },
  {
    "text": "cool so that is what a vitesse micro service architecture looks",
    "start": "1480799",
    "end": "1486960"
  },
  {
    "text": "like um but i hear you say my application is a monolith we're only",
    "start": "1486960",
    "end": "1493600"
  },
  {
    "start": "1489000",
    "end": "1539000"
  },
  {
    "text": "moving to microservices uh so this is actually really good fit",
    "start": "1493600",
    "end": "1499039"
  },
  {
    "text": "this is a great fit for the test because the test uh looks like a traditional database so",
    "start": "1499039",
    "end": "1504159"
  },
  {
    "text": "if you are running on mysql today you can actually deploy the test in front of it and have all the access to",
    "start": "1504159",
    "end": "1509760"
  },
  {
    "text": "your database and then as you move to microservices you can implement things like the strangler",
    "start": "1509760",
    "end": "1515840"
  },
  {
    "text": "pattern to actually pull out transactions and pull out complex logic from your monolith",
    "start": "1515840",
    "end": "1521760"
  },
  {
    "text": "into these microservices so you don't have to worry about doing an all or nothing or doing a database migration",
    "start": "1521760",
    "end": "1528480"
  },
  {
    "text": "with the tess you can actually move your monolith into microservices easier than if you were to adopt",
    "start": "1528480",
    "end": "1535840"
  },
  {
    "text": "a different style database but if you use the same database you",
    "start": "1535840",
    "end": "1541679"
  },
  {
    "text": "won't have independent services like i had said before the test actually takes all the problems that you would",
    "start": "1541679",
    "end": "1547840"
  },
  {
    "text": "have by using uh the same database and it removes all of them it has built-in sharding to",
    "start": "1547840",
    "end": "1554880"
  },
  {
    "text": "allow you to scale it has built in management like online schema change to allow you to do maintenance actions",
    "start": "1554880",
    "end": "1561200"
  },
  {
    "text": "without impacting other services and then it's got on it's got protections built in like query timeouts",
    "start": "1561200",
    "end": "1566880"
  },
  {
    "text": "and query throttling that will allow you to use a single database service but make sure that all",
    "start": "1566880",
    "end": "1572240"
  },
  {
    "text": "the independent services can't negatively affect each other and it also aside from all that by",
    "start": "1572240",
    "end": "1579520"
  },
  {
    "text": "having the test you also get additional visibility",
    "start": "1579520",
    "end": "1584799"
  },
  {
    "text": "into your database so how i said that i had that caller id well now i can actually see which",
    "start": "1584799",
    "end": "1593200"
  },
  {
    "text": "which service or which process is running those queries that are slowing down the database or that are causing my uh",
    "start": "1593200",
    "end": "1599919"
  },
  {
    "text": "are causing my response time to balloon it supports tracing so your tracing can go from your micro services",
    "start": "1599919",
    "end": "1606320"
  },
  {
    "text": "all the way down through your database and back up and it actually will give you a better",
    "start": "1606320",
    "end": "1611360"
  },
  {
    "text": "performing solution than if you did move to that database per service model",
    "start": "1611360",
    "end": "1617200"
  },
  {
    "text": "but you could do the same thing with cqrs or something like the saga pattern",
    "start": "1617760",
    "end": "1623039"
  },
  {
    "text": "this is entirely true and actually what you're seeing here is the same kind of functionality you",
    "start": "1623039",
    "end": "1628559"
  },
  {
    "text": "would get with cqrs or saga you're getting for free with the tests so you can have",
    "start": "1628559",
    "end": "1633840"
  },
  {
    "text": "a two-phase commit you can have a multi-shard best effort commit you can have rollbacks you can have acid",
    "start": "1633840",
    "end": "1639600"
  },
  {
    "text": "transactions but you don't actually have to take on the complexity of building out something",
    "start": "1639600",
    "end": "1644960"
  },
  {
    "text": "like cqrs or saga yourself you're getting it for free because you're using a database that",
    "start": "1644960",
    "end": "1650799"
  },
  {
    "text": "supports all these things natively so that's a little bit about running",
    "start": "1650799",
    "end": "1658559"
  },
  {
    "text": "microservices with the tess again this is not uh this is something that we hear a lot",
    "start": "1658559",
    "end": "1665520"
  },
  {
    "text": "of it is not necessarily something that a lot of people are doing today but this is functionality that has been",
    "start": "1665520",
    "end": "1671120"
  },
  {
    "text": "built into the test and has been used for a long time like i said the golang",
    "start": "1671120",
    "end": "1676480"
  },
  {
    "text": "and jdbc drivers both use this same interface and they use these same mechanisms it's just we're taking it a step farther",
    "start": "1676480",
    "end": "1682720"
  },
  {
    "text": "here um the code for this will be posted online there's there's obviously",
    "start": "1682720",
    "end": "1687760"
  },
  {
    "start": "1684000",
    "end": "1731000"
  },
  {
    "text": "lots we could do with it this was a simple demo to sort of just show a little bit of the techniques involved",
    "start": "1687760",
    "end": "1694240"
  },
  {
    "text": "um so with that i would love to open it up for questions",
    "start": "1694240",
    "end": "1701520"
  },
  {
    "text": "thank you very much daniel for a wonderful presentation our first question this is my first",
    "start": "1701679",
    "end": "1708399"
  },
  {
    "text": "encounter with the test i'm still a bit unclear what current problem with my sql the",
    "start": "1708399",
    "end": "1715120"
  },
  {
    "text": "test is trying to solve if i have a set of microservices talking to mysql",
    "start": "1715120",
    "end": "1720240"
  },
  {
    "text": "endpoint are there any concerns there if the sql client info is stored",
    "start": "1720240",
    "end": "1725279"
  },
  {
    "text": "in the microservice are there any problems with data integrity in this case",
    "start": "1725279",
    "end": "1731600"
  },
  {
    "start": "1731000",
    "end": "1827000"
  },
  {
    "text": "yes so there are and that's um that's kind of the point of this uh",
    "start": "1731600",
    "end": "1738000"
  },
  {
    "text": "slide if you are serving um if you're you're having a bunch of micro services",
    "start": "1738000",
    "end": "1743440"
  },
  {
    "text": "that are connecting to an external just stock my sql database you can't do this right you can't",
    "start": "1743440",
    "end": "1749279"
  },
  {
    "text": "actually have transactions that would cross service boundaries so if um if you're doing the you know one",
    "start": "1749279",
    "end": "1756799"
  },
  {
    "text": "of the stock examples for a microservice has always been the online store right",
    "start": "1756799",
    "end": "1762559"
  },
  {
    "text": "where a user wants to buy something and so you may have a user service and an inventory service",
    "start": "1762559",
    "end": "1768159"
  },
  {
    "text": "and then you may have something like a credit service that's determining if this transaction can go through",
    "start": "1768159",
    "end": "1773360"
  },
  {
    "text": "uh if you had a single database those three would be modules and that whole interaction would happen",
    "start": "1773360",
    "end": "1778559"
  },
  {
    "text": "in a transaction so either the user's order is going to go through we're going to check that they have credit and we're going to check that",
    "start": "1778559",
    "end": "1784320"
  },
  {
    "text": "they have inventory and then we're going to return back that yes the order completed and the user the user's order has",
    "start": "1784320",
    "end": "1791679"
  },
  {
    "text": "happened or something occurred either the credit was insufficient or we didn't have inventory",
    "start": "1791679",
    "end": "1798559"
  },
  {
    "text": "so we're actually going to roll back that transaction and that order isn't going to happen",
    "start": "1798559",
    "end": "1804399"
  },
  {
    "text": "you can't do that as soon as you move microservices even if you have the same database you can't do that transaction across",
    "start": "1804399",
    "end": "1810720"
  },
  {
    "text": "connections as soon as you switch connections the transaction is uh is going to be",
    "start": "1810720",
    "end": "1815840"
  },
  {
    "text": "invisible to the other connections to get around that that's why people would say well you use",
    "start": "1815840",
    "end": "1821360"
  },
  {
    "text": "cqrs or you use something like saga with an external coordinator",
    "start": "1821360",
    "end": "1827200"
  },
  {
    "start": "1827000",
    "end": "2022000"
  },
  {
    "text": "to make sure that you can have that transaction happen across those boundaries what i'm saying is with the tess you",
    "start": "1827200",
    "end": "1833279"
  },
  {
    "text": "actually you can do that you can have microservices where your transaction can cross microservice boundaries",
    "start": "1833279",
    "end": "1839279"
  },
  {
    "text": "and you'll get the same kind of acid transaction that you would expect off of a single connection across",
    "start": "1839279",
    "end": "1845679"
  },
  {
    "text": "your microservice mesh that you're using",
    "start": "1845679",
    "end": "1851600"
  },
  {
    "text": "awesome would you have been able would you be able to elaborate a bit",
    "start": "1851600",
    "end": "1856640"
  },
  {
    "text": "more on the comparison between the explicit session with the tests and the traditional",
    "start": "1856640",
    "end": "1862240"
  },
  {
    "text": "implicit handling yes so um the explicit session with the",
    "start": "1862240",
    "end": "1869279"
  },
  {
    "text": "tests is uh a bit of a complex object what it actually does is when the test",
    "start": "1869279",
    "end": "1875760"
  },
  {
    "text": "services your query the query will come in through the vt gate vtgate has a full sql parser in it",
    "start": "1875760",
    "end": "1882640"
  },
  {
    "text": "and it knows how to route your queries to either a single or multiple charts when your client sends that if you're",
    "start": "1882640",
    "end": "1889039"
  },
  {
    "text": "using the my sql port the connection is maintained inside of",
    "start": "1889039",
    "end": "1894399"
  },
  {
    "text": "vt gate that any packets coming across this any packets for this connection id are",
    "start": "1894399",
    "end": "1901200"
  },
  {
    "text": "going to go back to this client but then as soon as it goes down to the vt tablets it actually switches to grpc",
    "start": "1901200",
    "end": "1907440"
  },
  {
    "text": "internally which multiplexes all client connections across a single grpc tunnel between the",
    "start": "1907440",
    "end": "1914640"
  },
  {
    "text": "vt gate and the vt tablet to keep everything in line the vt tablet actually establishes a",
    "start": "1914640",
    "end": "1922240"
  },
  {
    "text": "connection id um for every single client connection that's inbound the vt tablet establishes a connection id",
    "start": "1922240",
    "end": "1928480"
  },
  {
    "text": "and it uses that to pass information down to the backing my sequel and then return",
    "start": "1928480",
    "end": "1934559"
  },
  {
    "text": "that back to the vt gate because that's all multiplexed it needs to pass along some information to the vt",
    "start": "1934559",
    "end": "1940960"
  },
  {
    "text": "gate so the vt gate knows which mysql connection to return the",
    "start": "1940960",
    "end": "1946000"
  },
  {
    "text": "information to what the grpc endpoint does is it takes that same",
    "start": "1946000",
    "end": "1951760"
  },
  {
    "text": "bit of information that the vt tablet sends the vtgate and allows you to just continue sending",
    "start": "1951760",
    "end": "1957200"
  },
  {
    "text": "that out to the client so that when the vt gate gets a query over the grpc interface",
    "start": "1957200",
    "end": "1965039"
  },
  {
    "text": "instead of associating the uh instead of associating that stream with",
    "start": "1965039",
    "end": "1970720"
  },
  {
    "text": "a particular uh client it actually just looks at the session and says okay i already have the",
    "start": "1970720",
    "end": "1976480"
  },
  {
    "text": "session information so i don't really need to know which my sql socket to send this out on",
    "start": "1976480",
    "end": "1982880"
  },
  {
    "text": "i'm just going to pass this down to my vt tablet and when it comes back i'm going to send it back up to the client",
    "start": "1982880",
    "end": "1989360"
  },
  {
    "text": "i know that's not the world's best explanation it's a lot better if you have a whiteboard or some code in",
    "start": "1989360",
    "end": "1995840"
  },
  {
    "text": "front of you so you can see how this is all being wired together but that is how it actually works",
    "start": "1995840",
    "end": "2003518"
  },
  {
    "text": "okay so plenty of time for questions ladies",
    "start": "2003679",
    "end": "2008799"
  },
  {
    "text": "and gentlemen so please feel free to drop in your questions into the q a box and we'll get to as many as we can",
    "start": "2008799",
    "end": "2019840"
  },
  {
    "start": "2022000",
    "end": "2049000"
  },
  {
    "text": "you tell us how this compares to the database cockroach db",
    "start": "2042559",
    "end": "2049200"
  },
  {
    "start": "2049000",
    "end": "2179000"
  },
  {
    "text": "yeah i mean so the tess and cockroach are similar in some ways that they are",
    "start": "2049200",
    "end": "2054720"
  },
  {
    "text": "both uh distributed in nature so they give you things like high availability and scale",
    "start": "2054720",
    "end": "2060720"
  },
  {
    "text": "the test is a little bit different we always say that vitesse is the world's only cloud native database because the test",
    "start": "2060720",
    "end": "2068000"
  },
  {
    "text": "is for focused more on transactionality and focused more on um being able to",
    "start": "2068000",
    "end": "2076079"
  },
  {
    "text": "get those aspects of a cloud native system um uh horizontal scalability uh",
    "start": "2076079",
    "end": "2083040"
  },
  {
    "text": "ease of management treating your uh treating your resources like they are uh",
    "start": "2083040",
    "end": "2089040"
  },
  {
    "text": "row crops and not gardens um whereas cockroach is a little bit more of a holistic",
    "start": "2089040",
    "end": "2094960"
  },
  {
    "text": "system so you'll see that in uh setting it up cockroach is generally a little bit easier to get online",
    "start": "2094960",
    "end": "2101839"
  },
  {
    "text": "but something like the tess is generally going to perform a little bit better when you",
    "start": "2101839",
    "end": "2107520"
  },
  {
    "text": "have lots of transactional data and you have a very dynamic runtime environment",
    "start": "2107520",
    "end": "2113119"
  },
  {
    "text": "works really well on things like kubernetes because it's kind of built for the idea that at any point in time",
    "start": "2113119",
    "end": "2118720"
  },
  {
    "text": "any single part of a test can go away and your queries are still going to be serviced and that's it's kind of what",
    "start": "2118720",
    "end": "2125599"
  },
  {
    "text": "has led to this kind of functionality because it is built with failure in mind",
    "start": "2125599",
    "end": "2130720"
  },
  {
    "text": "right it's built to know that at any point in time a single component could go down we have really tried hard to push state",
    "start": "2130720",
    "end": "2138079"
  },
  {
    "text": "out and to reduce single points of failure so that uh almost any part of your",
    "start": "2138079",
    "end": "2145440"
  },
  {
    "text": "database cluster can go down and your transactions are still going to be serviced your queries are still going to be serviced",
    "start": "2145440",
    "end": "2151280"
  },
  {
    "text": "um so when you think about it it's built for sort of the five nines uptime of very fast transactions",
    "start": "2151280",
    "end": "2158000"
  },
  {
    "text": "uh and that's you know that lends itself to be a little bit more complex but it also gives you a little bit more",
    "start": "2158000",
    "end": "2163680"
  },
  {
    "text": "flexibility okay there's now there's another",
    "start": "2163680",
    "end": "2168800"
  },
  {
    "text": "question here i believe this is in relation to the one you answered before the last one is there a performance penalty like a",
    "start": "2168800",
    "end": "2174960"
  },
  {
    "text": "database lock using transactions uh no well there there is locks get",
    "start": "2174960",
    "end": "2181920"
  },
  {
    "start": "2179000",
    "end": "2261000"
  },
  {
    "text": "established um like they would in a standard my sql database so if i did",
    "start": "2181920",
    "end": "2187520"
  },
  {
    "text": "uh an insert on a row and then i tried to delete all of the data in that table um",
    "start": "2187520",
    "end": "2194720"
  },
  {
    "text": "the delete wouldn't happen until the transaction lock cleared either by committing the transaction or allowing",
    "start": "2194720",
    "end": "2200160"
  },
  {
    "text": "the transaction timeout to occur um but it's uh it is not actually imposed by the test it's imposed at the",
    "start": "2200160",
    "end": "2206800"
  },
  {
    "text": "my sequel layer so it's the standard the standard locking that you would get in a 9odb database",
    "start": "2206800",
    "end": "2212480"
  },
  {
    "text": "um there's many different kinds of locking but there's no additional locking that happens because of a test there's a",
    "start": "2212480",
    "end": "2220160"
  },
  {
    "text": "bit of a performance penalty and that grpc is less performant than the my sequel",
    "start": "2220160",
    "end": "2226240"
  },
  {
    "text": "connection so if you were going even just the test against the tess",
    "start": "2226240",
    "end": "2231520"
  },
  {
    "text": "if you were benchmarking the vitesse my sequel server endpoint versus the the test grpc endpoint the",
    "start": "2231520",
    "end": "2239520"
  },
  {
    "text": "the test my sequel server endpoint is going to have higher thorough put than the grpc endpoint because",
    "start": "2239520",
    "end": "2247119"
  },
  {
    "text": "that grpc interaction does take a little bit more cpu than the stock mysql server",
    "start": "2247119",
    "end": "2253599"
  },
  {
    "text": "how does the test manage schema updates when multiple microservices are using different versions of this schema",
    "start": "2253839",
    "end": "2260720"
  },
  {
    "text": "yeah so um there's a couple different ways you can do this uh at the end of the day schema updates",
    "start": "2260720",
    "end": "2266800"
  },
  {
    "start": "2261000",
    "end": "2469000"
  },
  {
    "text": "are very much up to the user so if you want to completely decouple your schema of your",
    "start": "2266800",
    "end": "2273520"
  },
  {
    "text": "microservices this gives you a path to do it you can have completely decoupled schemas",
    "start": "2273520",
    "end": "2279280"
  },
  {
    "text": "uh and interactions between those can happen just at the microservice layer so in my",
    "start": "2279280",
    "end": "2285119"
  },
  {
    "text": "example i actually used a join to resolve a profile id to a profile name",
    "start": "2285119",
    "end": "2293200"
  },
  {
    "text": "if i wanted to keep my schema completely independent instead of doing that join when i got the data back for um the",
    "start": "2293200",
    "end": "2300640"
  },
  {
    "text": "profile id i would just make a call off to the profile service and i would get the profile for that id",
    "start": "2300640",
    "end": "2307040"
  },
  {
    "text": "via the service api um and then that would uh i would",
    "start": "2307040",
    "end": "2313680"
  },
  {
    "text": "merge those in the microservice and then return that to the user fully merged by me however",
    "start": "2313680",
    "end": "2322240"
  },
  {
    "text": "the test gives you some additional features that mean you don't have to do that and you can start to really use the",
    "start": "2322240",
    "end": "2327440"
  },
  {
    "text": "power of joins and use all the sql uh things that you would like because we can do some things to decouple",
    "start": "2327440",
    "end": "2333839"
  },
  {
    "text": "your services a little bit better um we can't make up for you know a user creating a schema change",
    "start": "2333839",
    "end": "2340480"
  },
  {
    "text": "that isn't updated in code and so your code queries break but what we can do is we can make those",
    "start": "2340480",
    "end": "2345760"
  },
  {
    "text": "schema changes completely transparent one of the problems that we see with microservices is even if you have robust",
    "start": "2345760",
    "end": "2351599"
  },
  {
    "text": "testing to make sure that schema changes don't break independent services",
    "start": "2351599",
    "end": "2356640"
  },
  {
    "text": "what will happen is as every single independent service releases you will start a schema change schema",
    "start": "2356640",
    "end": "2363200"
  },
  {
    "text": "changes are generally lock the world kind of operations so if i have a very large",
    "start": "2363200",
    "end": "2368480"
  },
  {
    "text": "table on the order of one to two terabytes and i have to add a column or drop a column that can take hours or",
    "start": "2368480",
    "end": "2375760"
  },
  {
    "text": "days where i cannot update that table so even if you have really good testing",
    "start": "2375760",
    "end": "2382560"
  },
  {
    "text": "and you know that nobody is going to change a schema to break your other services the fact that you now have",
    "start": "2382560",
    "end": "2388640"
  },
  {
    "text": "10 different services trying to make changes to the schema means that you're going to incur outages",
    "start": "2388640",
    "end": "2395119"
  },
  {
    "text": "what the test gives you is things like online schema change so we have been working on and releasing online schema",
    "start": "2395119",
    "end": "2401920"
  },
  {
    "text": "change functionality built into the test historically we've used external tools to do this but now",
    "start": "2401920",
    "end": "2407280"
  },
  {
    "text": "it is built into the test so as you make schema changes they happen online",
    "start": "2407280",
    "end": "2412880"
  },
  {
    "text": "um you can roll forwards and backwards between schema changes i believe deepti can correct me if that is not built in yet i believe",
    "start": "2412880",
    "end": "2420319"
  },
  {
    "text": "you can move forwards and backwards and schema changes so you can actually make your changes uh",
    "start": "2420319",
    "end": "2426000"
  },
  {
    "text": "with your services and then be completely transparent to your downstream services so that",
    "start": "2426000",
    "end": "2432800"
  },
  {
    "text": "frees you up to version and life cycle all of your services independently you do have to make sure that your schema is compatible",
    "start": "2432800",
    "end": "2439920"
  },
  {
    "text": "but once you've done that you now can get past that burden of having multiple maintenance windows",
    "start": "2439920",
    "end": "2445040"
  },
  {
    "text": "and sort of multiplying your maintenance windows for every microservice you bring online",
    "start": "2445040",
    "end": "2450560"
  },
  {
    "text": "okay can you elaborate a bit more about what happened can you elaborate a bit more about the",
    "start": "2451599",
    "end": "2457599"
  },
  {
    "text": "online schema changes my main doubt is what happens when i try to write the column currently the only solution i see with",
    "start": "2457599",
    "end": "2464400"
  },
  {
    "text": "native mysql is to duplicate it uh so the the online schema change",
    "start": "2464400",
    "end": "2473040"
  },
  {
    "start": "2469000",
    "end": "2552000"
  },
  {
    "text": "historically we've done online schema change with external tools like ptost or ghost the same functionality",
    "start": "2473040",
    "end": "2480240"
  },
  {
    "text": "that ghost brought to the cable the github online schema change tool i don't know what the t is for um we is now built into the test",
    "start": "2480240",
    "end": "2487760"
  },
  {
    "text": "and what it does is it utilizes v replication which is a the test technology we've been working on for about two years now",
    "start": "2487760",
    "end": "2495040"
  },
  {
    "text": "which actually allows you to modify your tables and columns",
    "start": "2495040",
    "end": "2500079"
  },
  {
    "text": "live using the replication to ensure that the modified columns are in sync with the existing columns or the",
    "start": "2500079",
    "end": "2507520"
  },
  {
    "text": "existing tables and then do a graceful transfer uh to the updated schema when you're",
    "start": "2507520",
    "end": "2514480"
  },
  {
    "text": "ready um it's in the tests if you have a recent version of the test i believe",
    "start": "2514480",
    "end": "2520160"
  },
  {
    "text": "you're going to have to have version 80. it actually is just an annotation on the",
    "start": "2520160",
    "end": "2525359"
  },
  {
    "text": "ddl statement which allows you to trigger an online schema change um and i believe if you join us on the",
    "start": "2525359",
    "end": "2532400"
  },
  {
    "text": "test slack channel which is on the screen now the test.io forward slash slack um we can explain to you in detail how",
    "start": "2532400",
    "end": "2539760"
  },
  {
    "text": "that whole process works and how to get started um again we've been doing it with outside tools but we recently as a",
    "start": "2539760",
    "end": "2545280"
  },
  {
    "text": "version 80 have pulled this natively into the tests",
    "start": "2545280",
    "end": "2551119"
  },
  {
    "text": "excellent still plenty of time for questions folks so please feel free to drop any other",
    "start": "2551119",
    "end": "2556880"
  },
  {
    "start": "2552000",
    "end": "2664000"
  },
  {
    "text": "questions into the q a box we have about 13 minutes left in the webinar so",
    "start": "2556880",
    "end": "2561920"
  },
  {
    "text": "please feel free to ask away",
    "start": "2561920",
    "end": "2579838"
  },
  {
    "text": "just to add a little bit to what dan said about the online schema changes um that work is still",
    "start": "2591599",
    "end": "2599200"
  },
  {
    "text": "experimental and we expect to merge it in the next few days and it will be available",
    "start": "2599200",
    "end": "2604560"
  },
  {
    "text": "in the daughter release that's coming up in a few weeks",
    "start": "2604560",
    "end": "2621838"
  },
  {
    "text": "anyone at all",
    "start": "2623599",
    "end": "2635839"
  },
  {
    "text": "does the test just support mysql or other backends available",
    "start": "2663760",
    "end": "2669599"
  },
  {
    "start": "2664000",
    "end": "2749000"
  },
  {
    "text": "it does not support other backends so it it is very mysql centric um the query",
    "start": "2669920",
    "end": "2676880"
  },
  {
    "text": "parser is the mysql dialect of the query parser and it is stored in a mysql database",
    "start": "2676880",
    "end": "2683760"
  },
  {
    "text": "that being said depending on your exact needs we actually do have multiple engines for my sequel that",
    "start": "2683760",
    "end": "2689920"
  },
  {
    "text": "are supported so we know that there's obviously people out there using inodb",
    "start": "2689920",
    "end": "2694960"
  },
  {
    "text": "the default engine but we also have quite a few users who are using my rocks so if you wanted that log structured",
    "start": "2694960",
    "end": "2702079"
  },
  {
    "text": "merge tree style storage engine myrocks would allow you to get that so",
    "start": "2702079",
    "end": "2707520"
  },
  {
    "text": "we don't support other storage systems but we do support a number of",
    "start": "2707520",
    "end": "2713119"
  },
  {
    "text": "database backends the plugable storage engine that my sql supports a lot of those will still work with the tests",
    "start": "2713119",
    "end": "2721119"
  },
  {
    "text": "we also support many mysql variants including mariadb percona",
    "start": "2721920",
    "end": "2727839"
  },
  {
    "text": "and oracle's mysql enterprise version and support for postgres is something",
    "start": "2727839",
    "end": "2734800"
  },
  {
    "text": "that has come up uh many times and that is in the long term roadmap",
    "start": "2734800",
    "end": "2740079"
  },
  {
    "text": "we are looking for contributors who might want to uh work with us on that",
    "start": "2740079",
    "end": "2747839"
  },
  {
    "start": "2749000",
    "end": "2929000"
  },
  {
    "text": "is the session object and header a big overhead",
    "start": "2749920",
    "end": "2754880"
  },
  {
    "text": "no not really yeah it's um i i have base64 encoded the header let me go ahead and",
    "start": "2755119",
    "end": "2761760"
  },
  {
    "text": "stop sharing my screen and then try to share my screen again",
    "start": "2761760",
    "end": "2766960"
  },
  {
    "text": "i can show you exactly what it looks like base64 encoded",
    "start": "2766960",
    "end": "2772240"
  },
  {
    "text": "so again here was that uh that session that i had ran um at its at its biggest here is what",
    "start": "2772400",
    "end": "2778800"
  },
  {
    "text": "the session looks like so um it's not terribly large uh it can if",
    "start": "2778800",
    "end": "2786160"
  },
  {
    "text": "you have a highly this this actually grows with the number of shards",
    "start": "2786160",
    "end": "2791599"
  },
  {
    "text": "so if you were doing a very complex multi-shard transaction it can get a little bit bigger than this",
    "start": "2791599",
    "end": "2798400"
  },
  {
    "text": "um but again this is the serialization of a protobuf object",
    "start": "2798400",
    "end": "2804079"
  },
  {
    "text": "it is very compact okay so i'll have about eight minutes",
    "start": "2804079",
    "end": "2811760"
  },
  {
    "text": "left for questions so please feel free to ask away",
    "start": "2811760",
    "end": "2817838"
  },
  {
    "text": "we have anyone else at all",
    "start": "2849920",
    "end": "2859838"
  },
  {
    "text": "anyone at all",
    "start": "2921440",
    "end": "2929838"
  },
  {
    "start": "2929000",
    "end": "3066000"
  },
  {
    "text": "are there any projects using the tests for saga it seems a little bit it seems a little technology to lock",
    "start": "2930720",
    "end": "2937680"
  },
  {
    "text": "in what are your ideas about this um well great thing about the tester it",
    "start": "2937680",
    "end": "2944880"
  },
  {
    "text": "is uh it is used by a large number of uh companies um but you wouldn't need to",
    "start": "2944880",
    "end": "2951440"
  },
  {
    "text": "use it with with saga the you can actually get the same functionality in native attest so most people who adopt",
    "start": "2951440",
    "end": "2958000"
  },
  {
    "text": "it aren't going to be implementing cqrs or another pattern on top of it",
    "start": "2958000",
    "end": "2963599"
  },
  {
    "text": "they're just going to use the tess in terms of lock-in is pretty",
    "start": "2963599",
    "end": "2969920"
  },
  {
    "text": "interesting because it is in fact a standard mysql database so",
    "start": "2969920",
    "end": "2974960"
  },
  {
    "text": "uh you can at any point in time stop using the tests and go back using my sql",
    "start": "2974960",
    "end": "2981040"
  },
  {
    "text": "there does however come a point where realistically you're locked in so there are people running the tests",
    "start": "2981040",
    "end": "2987520"
  },
  {
    "text": "who are doing 35 million queries per second across thousands of shards",
    "start": "2987520",
    "end": "2993839"
  },
  {
    "text": "that span tens of thousands of database servers at that point you really need like you",
    "start": "2993839",
    "end": "3000480"
  },
  {
    "text": "know you can't take your hundreds of terabytes of data and put that into pretty much any other",
    "start": "3000480",
    "end": "3006480"
  },
  {
    "text": "database system and get the same level of performance so um functionally",
    "start": "3006480",
    "end": "3012319"
  },
  {
    "text": "there is no lock-in you can go back to using stock my sql any point in time but um there's going to be some things",
    "start": "3012319",
    "end": "3018880"
  },
  {
    "text": "that once you start using the tests uh getting into other systems",
    "start": "3018880",
    "end": "3024640"
  },
  {
    "text": "there's just not too many alternatives out there right now uh so it really if you're using this simply",
    "start": "3024640",
    "end": "3030960"
  },
  {
    "text": "for the management and um some of the extra features and your database your data could be",
    "start": "3030960",
    "end": "3037920"
  },
  {
    "text": "serviced by a different mysql server then there's no lock-in you can actually just turn the",
    "start": "3037920",
    "end": "3043520"
  },
  {
    "text": "tess off and you'll have your mysql server in the background connect directly to it your queries will",
    "start": "3043520",
    "end": "3048800"
  },
  {
    "text": "stay the same your code will generally stay the same you would just have to remove the test specific functionality like",
    "start": "3048800",
    "end": "3055359"
  },
  {
    "text": "you know the grpc connection um the sessions and all those",
    "start": "3055359",
    "end": "3061920"
  },
  {
    "text": "awesome is there an interface exposed to implement other",
    "start": "3063920",
    "end": "3069200"
  },
  {
    "start": "3066000",
    "end": "3149000"
  },
  {
    "text": "back-ends say you were to implement these 20 methods and some guidance around it",
    "start": "3069200",
    "end": "3074559"
  },
  {
    "text": "then it should work around other back-ends non-mysql too",
    "start": "3074559",
    "end": "3081200"
  },
  {
    "text": "so there yes there is uh the the um there are interfaces where if",
    "start": "3081520",
    "end": "3088480"
  },
  {
    "text": "you were to implement that interface for a back end it would work with that back end um so uh dp you would know better than",
    "start": "3088480",
    "end": "3096559"
  },
  {
    "text": "me but i think if you were to implement the query server uh you could pretty much put whatever",
    "start": "3096559",
    "end": "3101760"
  },
  {
    "text": "you wanted behind that query server and it would yeah but yeah but",
    "start": "3101760",
    "end": "3107280"
  },
  {
    "text": "it would be a significant rewriting a significant portion of the code so uh there is the",
    "start": "3107280",
    "end": "3115040"
  },
  {
    "text": "interaction with the backend database for management functions which is one part of it but there's also",
    "start": "3115040",
    "end": "3121680"
  },
  {
    "text": "the parsing and the parser right now is a mysql compatible parser so we would need to",
    "start": "3121680",
    "end": "3130400"
  },
  {
    "text": "build a way of plugging in a different parser depending on the backend flavor uh the bottom line is",
    "start": "3130720",
    "end": "3138880"
  },
  {
    "text": "that that work of extracting and formalizing the interfaces required to plug in a",
    "start": "3138880",
    "end": "3144160"
  },
  {
    "text": "different database is still to be done and that the the parser the parser",
    "start": "3144160",
    "end": "3151440"
  },
  {
    "start": "3149000",
    "end": "3215000"
  },
  {
    "text": "planner construct which actually does most of the work because we have a mysql database as the back end",
    "start": "3151440",
    "end": "3158319"
  },
  {
    "text": "the planner in the test is going to look a little bit different than the planner in some other databases",
    "start": "3158319",
    "end": "3163599"
  },
  {
    "text": "we don't translate down to like a block fetch or to a key fetch um the way some other",
    "start": "3163599",
    "end": "3169440"
  },
  {
    "text": "distributed databases do where queries are parsed and then they're planned down to a key fetch",
    "start": "3169440",
    "end": "3174960"
  },
  {
    "text": "and then they're sent to the back end just for a key fetch we actually because we have a full database in the",
    "start": "3174960",
    "end": "3180400"
  },
  {
    "text": "background we will actually um parse the query and then the the result",
    "start": "3180400",
    "end": "3186000"
  },
  {
    "text": "of the planning of the query is actually another query and that's part of the reason why we can",
    "start": "3186000",
    "end": "3191440"
  },
  {
    "text": "be as fast as we are and as scalable as we are because we can push almost all the work down to the backing databases but then it also means that",
    "start": "3191440",
    "end": "3199040"
  },
  {
    "text": "as deepv said not only do you have to implement the query server which actually returns the data",
    "start": "3199040",
    "end": "3204960"
  },
  {
    "text": "but the parser and planner is very much tuned for the my simple dialect of sequel",
    "start": "3204960",
    "end": "3211520"
  },
  {
    "start": "3215000",
    "end": "3372000"
  },
  {
    "text": "time for about one more question i believe so if anyone has a last minute question they'd like to shoot daniel's way",
    "start": "3215839",
    "end": "3222559"
  },
  {
    "text": "please feel free to drop it in the q a",
    "start": "3222559",
    "end": "3226640"
  },
  {
    "text": "box",
    "start": "3234839",
    "end": "3237839"
  },
  {
    "text": "would you be able to elaborate a bit more on planner on the planner um",
    "start": "3240240",
    "end": "3248240"
  },
  {
    "text": "yes uh i'm i am definitely not the expert in the planner if you want um the nitty-gritty details",
    "start": "3248240",
    "end": "3255520"
  },
  {
    "text": "you want to go to the test ideo forward slash slack and join our slack channel and uh we can hook you up with the",
    "start": "3255520",
    "end": "3261440"
  },
  {
    "text": "people who spend most of their time working on the planner but what we do is we actually do a full",
    "start": "3261440",
    "end": "3267040"
  },
  {
    "text": "parse of the sql query uh so we have a custom written sql parser",
    "start": "3267040",
    "end": "3272079"
  },
  {
    "text": "which creates an ast and then that ast instead of again instead of going down",
    "start": "3272079",
    "end": "3277280"
  },
  {
    "text": "to a block fetch um the the planner translates it the planner uses",
    "start": "3277280",
    "end": "3282799"
  },
  {
    "text": "the v schema along with the shard information that is live updated",
    "start": "3282799",
    "end": "3288319"
  },
  {
    "text": "from the lock server which is one of those components that we sort of breezed over in the architecture diagram",
    "start": "3288319",
    "end": "3294079"
  },
  {
    "text": "to actually create a routing and execution plan the routing and execution plan is based",
    "start": "3294079",
    "end": "3299119"
  },
  {
    "text": "off of the currently serving live shards and the actual result of that like i said",
    "start": "3299119",
    "end": "3304559"
  },
  {
    "text": "is a sql query so much like you have query builders in a lot of orms",
    "start": "3304559",
    "end": "3309760"
  },
  {
    "text": "um we have almost the same thing inside of a test we can take that ast we can rewrite it and then",
    "start": "3309760",
    "end": "3318640"
  },
  {
    "text": "serialize it back to a query and pass it down to my sql um the exact steps of that are uh",
    "start": "3318640",
    "end": "3325920"
  },
  {
    "text": "no it's as it's as complex as any of your uh planners would be um which again i'm not the expert in the",
    "start": "3325920",
    "end": "3334240"
  },
  {
    "text": "actual details uh for that hit up the slack channel um and we can get you",
    "start": "3334240",
    "end": "3339520"
  },
  {
    "text": "uh online with somebody who does know more than me all right well thank you very much",
    "start": "3339520",
    "end": "3344640"
  },
  {
    "text": "daniel for all of your time today and thank you to everybody who took time out of the day for attending today's webinar as i said",
    "start": "3344640",
    "end": "3351920"
  },
  {
    "text": "before today's presentation will be available later on on the cncf webinar page at cncf dot io",
    "start": "3351920",
    "end": "3358400"
  },
  {
    "text": "slash webinars along with the slides that were used today thank you everyone for joining us",
    "start": "3358400",
    "end": "3363520"
  },
  {
    "text": "today please take care stay safe have a wonderful weekend and we'll see you all next time",
    "start": "3363520",
    "end": "3374799"
  }
]