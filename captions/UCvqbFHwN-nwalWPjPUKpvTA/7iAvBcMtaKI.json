[
  {
    "start": "0",
    "end": "103000"
  },
  {
    "text": "hi um welcome everyone to this talk my name is stefan ewan i'm one of the",
    "start": "160",
    "end": "7279"
  },
  {
    "text": "co-founders and cto at ververica the company founded by the creators of",
    "start": "7279",
    "end": "12639"
  },
  {
    "text": "apache link and i'm also one of the co-creators and pmc members of the apache link project",
    "start": "12639",
    "end": "18160"
  },
  {
    "text": "um i'm here today to talk about um some work we're doing in this project in the in the space of stateful serverless so",
    "start": "18160",
    "end": "24640"
  },
  {
    "text": "i'm gonna talk about yeah stateful serverless and and the elephant in the room",
    "start": "24640",
    "end": "30640"
  },
  {
    "text": "thanks for joining so um when kubecon was originally",
    "start": "30640",
    "end": "37360"
  },
  {
    "text": "scheduled as a physical event and i was i was starting to make my slides i had i had some introductory motivation slides",
    "start": "37360",
    "end": "43360"
  },
  {
    "text": "but then i came actually across something really nice of you um a few days ago and which actually",
    "start": "43360",
    "end": "48719"
  },
  {
    "text": "captures the motivation much better than what i had initially um laid out so i just decided to borrow that instead it's a",
    "start": "48719",
    "end": "56000"
  },
  {
    "text": "it's a quote from from kelsey and a dilbert comic and yeah what um what they're basically",
    "start": "56000",
    "end": "62399"
  },
  {
    "text": "saying if i can try and sum it up in my own words is that there's been a lot of like really cool",
    "start": "62399",
    "end": "67680"
  },
  {
    "text": "work done in projects like kubernetes about modernizing the infrastructure layer",
    "start": "67680",
    "end": "73439"
  },
  {
    "text": "um but it's it's also very important to to invest on the application layer so",
    "start": "73439",
    "end": "80320"
  },
  {
    "text": "the the ways we build the applications above the frameworks that the paradigms the libraries um because otherwise we're going to end",
    "start": "80320",
    "end": "87680"
  },
  {
    "text": "up with really cool infrastructure and and still you know not not really",
    "start": "87680",
    "end": "92799"
  },
  {
    "text": "well built scalable applications so trying to maybe illustrate this in my",
    "start": "92799",
    "end": "98159"
  },
  {
    "text": "my own words what um what they're saying here is um",
    "start": "98159",
    "end": "104079"
  },
  {
    "text": "if if we're starting out with the with the non-scalable application working together with let's say legacy",
    "start": "104079",
    "end": "110640"
  },
  {
    "text": "database and so on and we put this in on top of a really cool infrastructure",
    "start": "110640",
    "end": "116719"
  },
  {
    "text": "um you know no matter how fancy features of that infrastructure we use we're",
    "start": "116719",
    "end": "122479"
  },
  {
    "text": "we're pretty pretty much still ending up with a non-scalable application and um yeah so the",
    "start": "122479",
    "end": "130640"
  },
  {
    "text": "the idea in this and this um discussion that um that kelsey mentioned there is um we",
    "start": "130640",
    "end": "136959"
  },
  {
    "text": "should we should probably be looking or at least that's how i understand it we should probably be looking for for for something in the application",
    "start": "136959",
    "end": "143040"
  },
  {
    "text": "they are also invest in a new application uh frameworks and libraries and so on to",
    "start": "143040",
    "end": "148800"
  },
  {
    "text": "yeah to to kind of have an have a way to to make applications developed on top of these frameworks which may or",
    "start": "148800",
    "end": "156319"
  },
  {
    "text": "may not build on systems like kubernetes yeah something like magically scalable",
    "start": "156319",
    "end": "162000"
  },
  {
    "text": "um it's probably not going to be that magical in the end but um yeah just look at application frameworks",
    "start": "162000",
    "end": "168319"
  },
  {
    "text": "and libraries that help build these these distributed scalable applications and and scalability really is only one",
    "start": "168319",
    "end": "174560"
  },
  {
    "text": "aspect i think that's that's being um that's being mentioned here um there's there's a lot of other aspects",
    "start": "174560",
    "end": "180720"
  },
  {
    "text": "that that matter as well of course there's the scalability to computation and state there's consistency of the",
    "start": "180720",
    "end": "186159"
  },
  {
    "text": "application security observability um a lot of things that that currently despite",
    "start": "186159",
    "end": "191840"
  },
  {
    "text": "all the efforts on the infrastructure level we still have to worry a lot about doing the development of the of the",
    "start": "191840",
    "end": "196879"
  },
  {
    "text": "application layer and and that that is very much what um what i would like",
    "start": "196879",
    "end": "202319"
  },
  {
    "text": "like to talk about today and like an idea in which direction these um this distributed application",
    "start": "202319",
    "end": "208159"
  },
  {
    "text": "frameworks and libraries could go and we're we're we're building a project that falls into this category in the",
    "start": "208159",
    "end": "214560"
  },
  {
    "text": "in the apache flink project called called stateful functions that's looking at some of these aspects",
    "start": "214560",
    "end": "220319"
  },
  {
    "text": "not all of them i don't i don't think it's it's yet the holy grail but it has some some very interesting ideas or",
    "start": "220319",
    "end": "225519"
  },
  {
    "text": "interesting directions and thoughts that i would like to share and yeah hopefully also get some some comments and feedback on from the",
    "start": "225519",
    "end": "232560"
  },
  {
    "text": "community here so the the the project we're doing um initially focuses on let's say those",
    "start": "232560",
    "end": "239120"
  },
  {
    "text": "those three aspects of the of the problem space um how to build um applications that inherently scale",
    "start": "239120",
    "end": "245760"
  },
  {
    "text": "compute state and uh also deal with consistency or state consistency meaning you know don't do not get corruption or",
    "start": "245760",
    "end": "252159"
  },
  {
    "text": "duplicates in the presence of of crashes or network issues and so on",
    "start": "252159",
    "end": "258560"
  },
  {
    "text": "so um the the talk title says stateful stateful",
    "start": "258639",
    "end": "265120"
  },
  {
    "text": "serverless and the elephant in the room so stateful serverless is really kind of a way in which we're",
    "start": "265120",
    "end": "271759"
  },
  {
    "text": "thinking to build um to build this abstraction we're actually we're actually working on top of some of the um of the",
    "start": "271759",
    "end": "278320"
  },
  {
    "text": "serverless work that's being done um both in as part of for example the k",
    "start": "278320",
    "end": "283360"
  },
  {
    "text": "native project or um or you can use this together with serverless technologies from cloud",
    "start": "283360",
    "end": "288560"
  },
  {
    "text": "providers like uh with aws lambda the other part of the title the the is the elephant in the room",
    "start": "288560",
    "end": "294639"
  },
  {
    "text": "so what do i yeah what is what is the elephant in the room here",
    "start": "294639",
    "end": "299759"
  },
  {
    "text": "and um while we were working on this project one one thing that we that we came across repeatedly is that a",
    "start": "299759",
    "end": "307199"
  },
  {
    "text": "big part of why and and my my personal belief we're um",
    "start": "307199",
    "end": "313199"
  },
  {
    "text": "we're still struggling with with aspects like um scalable state and consistency and so on",
    "start": "313199",
    "end": "319919"
  },
  {
    "text": "all together is that we're somewhat still relying on on a bit of an an age old model with the traditional",
    "start": "319919",
    "end": "327440"
  },
  {
    "text": "request response databases it's not saying databases are are a bad thing here they're actually a pretty",
    "start": "327440",
    "end": "332720"
  },
  {
    "text": "amazing thing but i think we have to we have to rethink a few aspects of of the database to",
    "start": "332720",
    "end": "338080"
  },
  {
    "text": "to make it a like a really um fitting player for for this effort of inherently scalable",
    "start": "338080",
    "end": "345759"
  },
  {
    "text": "and and consistent applications that's what um that's what we're trying to do in the civil functions project",
    "start": "345759",
    "end": "353280"
  },
  {
    "text": "so one way to to to maybe give an idea in which direction it goes",
    "start": "353280",
    "end": "359440"
  },
  {
    "text": "is a lot of the a lot of the ideas you can you can think of are are motivated by this",
    "start": "359440",
    "end": "365840"
  },
  {
    "text": "by this paper that's that's already i think 15 years older or something like that but it's it",
    "start": "365840",
    "end": "370880"
  },
  {
    "text": "actually is it's always a pretty influential papers like some of you may have have come come across it as has been",
    "start": "370880",
    "end": "376800"
  },
  {
    "text": "pretty popular um it's a while all but it's a bit like a like a bob dylan song it's like it has",
    "start": "376800",
    "end": "382319"
  },
  {
    "text": "some some timeless truth in it and um i hope that patelland wouldn't",
    "start": "382319",
    "end": "387840"
  },
  {
    "text": "wouldn't kill me for summing it up in in such a in such a simple way but it it in my words it advocates for for",
    "start": "387840",
    "end": "394639"
  },
  {
    "text": "building applications based on stateful event-driven entities or stateful actors",
    "start": "394639",
    "end": "399840"
  },
  {
    "text": "and in some sense that's really the core of what we're what we're trying to do so to explain really the the ideas um",
    "start": "399840",
    "end": "407680"
  },
  {
    "text": "that we're trying to bring into this stateful surface space here um let me introduce you uh to the to the",
    "start": "407680",
    "end": "413680"
  },
  {
    "text": "staple functions project first describe what it is um and then then give give a brief example of how",
    "start": "413680",
    "end": "419280"
  },
  {
    "text": "how you can use this to build applications so stable functions the subtitle is a mouthful polyglot",
    "start": "419280",
    "end": "425759"
  },
  {
    "text": "event driven functions for distributed stateful applications i'll try to break this down into a few",
    "start": "425759",
    "end": "431199"
  },
  {
    "text": "more digestible units over the next slides",
    "start": "431199",
    "end": "437599"
  },
  {
    "text": "yeah as mentioned in the introduction the the core idea is to to try and build um like an api",
    "start": "437599",
    "end": "445599"
  },
  {
    "text": "framework that helps with building distributed stateful applications with enhanced scalability and consistency and",
    "start": "445599",
    "end": "452479"
  },
  {
    "text": "and very much like the the motivation in that in that paper that i that i mentioned we're starting out with",
    "start": "452479",
    "end": "458479"
  },
  {
    "text": "a with a building block that's as the name also suggests functions",
    "start": "458479",
    "end": "465360"
  },
  {
    "text": "so the the idea is to to model the model applications as very fine grained",
    "start": "465360",
    "end": "471919"
  },
  {
    "text": "functions that that represent entities and really represent them at a very fine grant level let's say there's one",
    "start": "471919",
    "end": "477919"
  },
  {
    "text": "function for each user that that is currently that exists in your system there's one",
    "start": "477919",
    "end": "484479"
  },
  {
    "text": "function for each let's say inventory item in your in your warehouse there's one function for each parcel being delivered at the",
    "start": "484479",
    "end": "491680"
  },
  {
    "text": "moment or so so very a very fine-grained um management where where a function really corresponds to",
    "start": "491680",
    "end": "497919"
  },
  {
    "text": "to an entity not not really a group of entities with you know like diverse diverse types of state",
    "start": "497919",
    "end": "505440"
  },
  {
    "text": "um the it really encourages to model it in such a fine-grained way by assuming",
    "start": "505440",
    "end": "510560"
  },
  {
    "text": "that as a function um doesn't consume any resources when they're when they're not not",
    "start": "510560",
    "end": "515919"
  },
  {
    "text": "invoked and yeah in some sense it bears some similarities to",
    "start": "515919",
    "end": "521360"
  },
  {
    "text": "if you wish also actor programming um with a similar fine grained modeling mechanism",
    "start": "521360",
    "end": "527279"
  },
  {
    "text": "the the really crucial thing here is as the other part of the name stateful function",
    "start": "527279",
    "end": "532959"
  },
  {
    "text": "suggests this is the stateful nature of this function so each function um contains uh or has",
    "start": "532959",
    "end": "539040"
  },
  {
    "text": "access to to local state you can almost think about it like a local variable each function can access",
    "start": "539040",
    "end": "544160"
  },
  {
    "text": "a local variable to to look at its current state and it has access only to that little bit of state so let's say the function modeling",
    "start": "544160",
    "end": "551200"
  },
  {
    "text": "the um i don't know the tennis socks inventory item um only has has access to that",
    "start": "551200",
    "end": "557040"
  },
  {
    "text": "particular state at any point in time but it has access to that state exclusively and consistently",
    "start": "557040",
    "end": "562160"
  },
  {
    "text": "and then these functions basically um message each other um again very much like like in in actor",
    "start": "562160",
    "end": "567839"
  },
  {
    "text": "programming so you can if you want to think of this whole thing a bit like a a transactionally consistent virtual",
    "start": "567839",
    "end": "575360"
  },
  {
    "text": "stateful actor actor system um stateful actors in the sense of stable functions",
    "start": "575360",
    "end": "581120"
  },
  {
    "text": "that message each other arbitrarily virtual in the sense that you don't have to assume that they occupy resources",
    "start": "581120",
    "end": "587360"
  },
  {
    "text": "when they're not active um so they're not like extending threads or even",
    "start": "587360",
    "end": "592399"
  },
  {
    "text": "you know entries in memory and um consistent because messaging and stator",
    "start": "592399",
    "end": "598399"
  },
  {
    "text": "are like transactionally integrated you don't have to worry about messages getting lost getting duplicated state getting um",
    "start": "598399",
    "end": "604320"
  },
  {
    "text": "messages in state getting out of sync and so on so all these all these issues like retrying um or yeah or",
    "start": "604320",
    "end": "611920"
  },
  {
    "text": "working with taking care that state uh updates are either item potent or retracted you don't have to worry about",
    "start": "611920",
    "end": "617839"
  },
  {
    "text": "these things um the way we the way we're building this is it might be a bit surprising",
    "start": "617839",
    "end": "624480"
  },
  {
    "start": "620000",
    "end": "703000"
  },
  {
    "text": "initially but it actually doesn't have a database behind it um instead it it actually um",
    "start": "624480",
    "end": "630320"
  },
  {
    "text": "rather than proxying all this data into a database it's actually working based on a distributed snapshot model so between all these",
    "start": "630320",
    "end": "636959"
  },
  {
    "text": "functions that are um that are there with all their with all the state um the system draws a",
    "start": "636959",
    "end": "642959"
  },
  {
    "text": "snapshot across all these functions and this snapshot is consistently taking care of current state and",
    "start": "642959",
    "end": "648000"
  },
  {
    "text": "and in-flight messages and so on to make sure that if we use this to recover from a failure we we don't duplicate or lose",
    "start": "648000",
    "end": "654000"
  },
  {
    "text": "messages or or anything communication with the um outside world is with in event",
    "start": "654000",
    "end": "660959"
  },
  {
    "text": "ingress and egresses so this is strictly an event-driven system and also this integration of the outside world is strictly transactional so um picking up events",
    "start": "660959",
    "end": "668880"
  },
  {
    "text": "from the ingress sending them between functions updating state and sending out messages through",
    "start": "668880",
    "end": "674000"
  },
  {
    "text": "the event increase is is inherently transactionally safe so you don't have to you don't have to worry about",
    "start": "674000",
    "end": "680320"
  },
  {
    "text": "um sending duplicate messages to the outside world or um or compensating for for any um",
    "start": "680320",
    "end": "686800"
  },
  {
    "text": "and any loss or change of state during failures which which is a which is a pretty neat",
    "start": "686800",
    "end": "692160"
  },
  {
    "text": "property that um that actually gets rid of quite a bit of complexity",
    "start": "692160",
    "end": "698720"
  },
  {
    "text": "um how does it look like if you if you use this system like this what what what components does it consist of if you",
    "start": "698720",
    "end": "704640"
  },
  {
    "start": "703000",
    "end": "825000"
  },
  {
    "text": "deploy it and um it it consists of yeah it consists pretty much like a",
    "start": "704640",
    "end": "710320"
  },
  {
    "text": "like a classical um disaggregated um architecture with you know with the",
    "start": "710320",
    "end": "715920"
  },
  {
    "text": "state and the database and the stateless application logic of these two parts also um we have the stateful part which is",
    "start": "715920",
    "end": "723279"
  },
  {
    "text": "the um the stafford functions cluster i'm running with running running on top of the apache",
    "start": "723279",
    "end": "729680"
  },
  {
    "text": "link system um here instead of of a database um and and being subscribed to the ingresses",
    "start": "729680",
    "end": "735760"
  },
  {
    "text": "and the egress streams and then we have we have our functions which we can deploy in",
    "start": "735760",
    "end": "741360"
  },
  {
    "text": "in pretty much in any way that you know that we that we can that we can deploy",
    "start": "741360",
    "end": "747680"
  },
  {
    "text": "state this piece of computation with so we can we can put this in a container um within with a request",
    "start": "747680",
    "end": "754639"
  },
  {
    "text": "handler http request handler behind a service and then deployed on kubernetes we can",
    "start": "754639",
    "end": "760399"
  },
  {
    "text": "we can take these functions and and put them onto um something like a function as a service",
    "start": "760399",
    "end": "766800"
  },
  {
    "text": "a platform like aws lambda or we can encapsulate them in in a different way",
    "start": "766800",
    "end": "772079"
  },
  {
    "text": "behind a microservice endpoint and the interesting thing to notice here is that these these functions really are",
    "start": "772079",
    "end": "778480"
  },
  {
    "text": "even though they they act in a stateful way they are they are actually completely stateless",
    "start": "778480",
    "end": "784880"
  },
  {
    "text": "all state that they work with is always supplied to them on demand as part of",
    "start": "784880",
    "end": "791040"
  },
  {
    "text": "the invocation and as part of the message so state and messages are given to the functions basically together as one unit",
    "start": "791040",
    "end": "797519"
  },
  {
    "text": "atomically and that makes the functions themselves really really pure and stable so they're",
    "start": "797519",
    "end": "803360"
  },
  {
    "text": "they're very easy to scale they're very easy to maintain there you can you can really operate them like a pure stateless application",
    "start": "803360",
    "end": "811040"
  },
  {
    "text": "this there's one core aspect in here in the in this philosophy that that i want to highlight which is which",
    "start": "811040",
    "end": "816399"
  },
  {
    "text": "is very interesting um and it goes back to to this whole elephant in the room the database we have to rethink a few of",
    "start": "816399",
    "end": "822160"
  },
  {
    "text": "these aspects there um and i tried to explain it um",
    "start": "822160",
    "end": "827519"
  },
  {
    "text": "maybe based on on this slide there's a slight type on the left hand side the second um stream of input events",
    "start": "827519",
    "end": "833760"
  },
  {
    "text": "should actually be the result or output events sorry about that um so",
    "start": "833760",
    "end": "840000"
  },
  {
    "text": "if we look at a if we look at a traditional database based architecture you know",
    "start": "840000",
    "end": "846320"
  },
  {
    "text": "computational part and a database part we we typically",
    "start": "846320",
    "end": "851440"
  },
  {
    "text": "start starting the application the application receives either the event or it receives the um the http request or",
    "start": "851440",
    "end": "859440"
  },
  {
    "text": "any other form of request with which it is invoked and then it it talks to the to the database and",
    "start": "859440",
    "end": "864880"
  },
  {
    "text": "and updates the stage gets a confirmation or a failure deals with that and then it you know",
    "start": "864880",
    "end": "870560"
  },
  {
    "text": "usually it responds to the request in some way now what we're doing in the state for functions projects actually something",
    "start": "870560",
    "end": "876959"
  },
  {
    "text": "something slightly different we're we're sort of turning this upside down we're saying everything starts actually in the in the",
    "start": "876959",
    "end": "883440"
  },
  {
    "text": "in the database if you wish the database is the part that receives the events and manages the state and then it",
    "start": "883440",
    "end": "889120"
  },
  {
    "text": "invokes the application logic with the state and the events together and it can decide when to involve the application logic",
    "start": "889120",
    "end": "894800"
  },
  {
    "text": "um for example when nobody else is currently working on that state so to make sure that that state is exclusively",
    "start": "894800",
    "end": "901199"
  },
  {
    "text": "used so in some sense we're we're changing the role of the of the driving party of",
    "start": "901199",
    "end": "906240"
  },
  {
    "text": "the application from from the from the application logic to to the database and the part that",
    "start": "906240",
    "end": "912560"
  },
  {
    "text": "reacts is the other part not the database reacts to requests from the application but the application actually",
    "start": "912560",
    "end": "917600"
  },
  {
    "text": "reacts to requests from the database that might seem a bit strange and unimportant initially but it has some",
    "start": "917600",
    "end": "923360"
  },
  {
    "text": "some really interesting properties that help with with solving some of these problems um it might not be a match for like every",
    "start": "923360",
    "end": "929839"
  },
  {
    "text": "possible situation but when you can actually um try to make this assumption it it actually can simplify a lot of things",
    "start": "929839",
    "end": "936959"
  },
  {
    "text": "um let's look in detail actually what happens if if an event flows through such a system and i'm going back to this example of um",
    "start": "936959",
    "end": "945199"
  },
  {
    "text": "of the shopping cart so let's assume some some user kim wants to",
    "start": "945199",
    "end": "951040"
  },
  {
    "text": "add some socks to her to her shopping cart so it received an event",
    "start": "951040",
    "end": "956399"
  },
  {
    "text": "designated ad the type card for kim to add to add socks and the system would",
    "start": "956399",
    "end": "962639"
  },
  {
    "text": "initially route this event to the chart that",
    "start": "962639",
    "end": "967680"
  },
  {
    "text": "that owns the that owns the shopping cart it would retrieve the state of the shopping cart and then supply the state and the",
    "start": "967680",
    "end": "974079"
  },
  {
    "text": "message to the function together the function would decide what to do with it typically you know in this case",
    "start": "974079",
    "end": "979279"
  },
  {
    "text": "just you know add this item to the card and then respond with the updated state and the set of messages that it wants to",
    "start": "979279",
    "end": "984320"
  },
  {
    "text": "send out which goes again back to the system so the system will then update the state and send the event and it will make sure",
    "start": "984320",
    "end": "990560"
  },
  {
    "text": "that this is a transactional unit so there's no failure i cannot be no failure in between once the function responded and this response",
    "start": "990560",
    "end": "996800"
  },
  {
    "text": "has been accepted like you're safe and um yeah then these events are routed to",
    "start": "996800",
    "end": "1003759"
  },
  {
    "text": "the charts that are responsible for owning in this case the the line item or the inventory entry for um",
    "start": "1003759",
    "end": "1010079"
  },
  {
    "text": "for the stocks and in this case we're invoking in the function with uh the current state which is let's",
    "start": "1010079",
    "end": "1015360"
  },
  {
    "text": "say the current stock um and and the action like you know uh withdraw or reserve three items from",
    "start": "1015360",
    "end": "1022839"
  },
  {
    "text": "that so the important thing here um would be that yeah everything is is",
    "start": "1022839",
    "end": "1029280"
  },
  {
    "text": "driven by is driven by the by the system that in one unit manages state and messaging together and",
    "start": "1029280",
    "end": "1035760"
  },
  {
    "text": "and the functions really become kind of pure and even though they're stayed full you can pretend they're stateless they",
    "start": "1035760",
    "end": "1041918"
  },
  {
    "text": "they are only stateful because state is supplied as part of the invocation on demand",
    "start": "1041919",
    "end": "1049039"
  },
  {
    "start": "1048000",
    "end": "1145000"
  },
  {
    "text": "if we try to you know not deploy such a system um how what what parts would we what we",
    "start": "1050320",
    "end": "1055679"
  },
  {
    "text": "need how does this look like actually using it on on on infrastructure like kubernetes",
    "start": "1055679",
    "end": "1061760"
  },
  {
    "text": "so we would actually need the the logic of the functions which we would put let's say just on a",
    "start": "1061760",
    "end": "1067520"
  },
  {
    "text": "deployment and create a service in front of them and we can even put a horizontal auto scaler",
    "start": "1067520",
    "end": "1073360"
  },
  {
    "text": "around them if you know if we expect um varying load then we would have our stateful function",
    "start": "1073360",
    "end": "1080400"
  },
  {
    "text": "um deployment that's that's that's an apache link deployment consisting of several processes",
    "start": "1080400",
    "end": "1086240"
  },
  {
    "text": "um it's actually a deployment here not a stateful set because um apache flink doesn't really work with",
    "start": "1086240",
    "end": "1091280"
  },
  {
    "text": "with um like stateful volumes or anything but instead it is persistence by snapshots through something uh to",
    "start": "1091280",
    "end": "1097120"
  },
  {
    "text": "something like s3 or hdfs or so so this is another part that we need but it's it's an interesting architectural",
    "start": "1097120",
    "end": "1103440"
  },
  {
    "text": "choice i think because it it makes some some things actually quite quite simple to not deal with the with these persistent volumes",
    "start": "1103440",
    "end": "1109520"
  },
  {
    "text": "and unstateful sets um the",
    "start": "1109520",
    "end": "1116720"
  },
  {
    "text": "the apache flink clusters also subscribe to the ingresses and egresses in order to receive the messages and send the",
    "start": "1116720",
    "end": "1123039"
  },
  {
    "text": "messages and the same thing actually you know maps pretty well also to other",
    "start": "1123039",
    "end": "1128480"
  },
  {
    "text": "infrastructures like if we for example would like to run this on the amazon stacker so we could just put our",
    "start": "1128480",
    "end": "1134240"
  },
  {
    "text": "functions in lambda we'd have an api gateway snapshot to s3 and ingress and egress with kinesis",
    "start": "1134240",
    "end": "1141840"
  },
  {
    "text": "all right um so let's actually look at a concrete example how would we for example um",
    "start": "1142640",
    "end": "1150320"
  },
  {
    "start": "1145000",
    "end": "1258000"
  },
  {
    "text": "build a billing application based on this um it's it's a very simple example in",
    "start": "1150320",
    "end": "1155840"
  },
  {
    "text": "order to to to make it um to make it uh suitable for for a short demo here um what we're",
    "start": "1155840",
    "end": "1162240"
  },
  {
    "text": "assuming is we're we're getting events about you know changes to the subscription status of the user let's say grabbed through change data",
    "start": "1162240",
    "end": "1169360"
  },
  {
    "text": "capture from something like the central user management database we would",
    "start": "1169360",
    "end": "1174559"
  },
  {
    "text": "actually have a stateful function where one function is subscribed to this set of events um being a user function",
    "start": "1174559",
    "end": "1181360"
  },
  {
    "text": "and this user function maintains you know state like what's the user id the subscription status and the billing",
    "start": "1181360",
    "end": "1186400"
  },
  {
    "text": "interval now billing is something that doesn't happen all the time so the first thing we actually need to",
    "start": "1186400",
    "end": "1192000"
  },
  {
    "text": "to to do is when do we want to do the building let's say we do it end of the month or beginning of the month always",
    "start": "1192000",
    "end": "1198480"
  },
  {
    "text": "and because we want functions only to be active when they really do something the first thing we do is we actually schedule a trigger payment message for let's say",
    "start": "1198480",
    "end": "1205840"
  },
  {
    "text": "for the end of the month so the function can go away and then this scheduled message is also part of",
    "start": "1205840",
    "end": "1211520"
  },
  {
    "text": "of the database and messaging system and basically re-invokes the function at this end of the month on point",
    "start": "1211520",
    "end": "1218880"
  },
  {
    "text": "in which case the um the user function would say okay i'm actually i'm actually um sending a new message",
    "start": "1218880",
    "end": "1226559"
  },
  {
    "text": "with a let's say a generated payment id or so to a payment function which if this if no function for this",
    "start": "1226559",
    "end": "1232799"
  },
  {
    "text": "specific payment id existed before it will you know it will be created um and this function would would own the",
    "start": "1232799",
    "end": "1239200"
  },
  {
    "text": "state of the current payment processing let's say um we've issued a request to the payment",
    "start": "1239200",
    "end": "1244559"
  },
  {
    "text": "provider with not yet heard a response or maybe it has failed twice we're trying to retry it later today",
    "start": "1244559",
    "end": "1249600"
  },
  {
    "text": "otherwise we're we're assuming that that it failed for this month so like the stateful processing um being",
    "start": "1249600",
    "end": "1255120"
  },
  {
    "text": "part of another function um here's a quick glimpse at at",
    "start": "1255120",
    "end": "1262640"
  },
  {
    "start": "1258000",
    "end": "1311000"
  },
  {
    "text": "a good part of the code it's not a lot of code that this application needs in the end um without going through every line of",
    "start": "1262640",
    "end": "1269280"
  },
  {
    "text": "code the the really important thing i want to point out here is that you can see it's just a bunch of",
    "start": "1269280",
    "end": "1275840"
  },
  {
    "text": "actually messaging um for those of you who recognize um protocol buffers you'll see a bit of",
    "start": "1275840",
    "end": "1282559"
  },
  {
    "text": "protocol buffer packaging and unpackaging messages instead for functions are inherently protocol buffers so the",
    "start": "1282559",
    "end": "1288880"
  },
  {
    "text": "system itself doesn't actually really see anything except the target address and some bytes and then the target functions",
    "start": "1288880",
    "end": "1294640"
  },
  {
    "text": "unwrap and wrap it into a protocol buffer any messages and then this application really",
    "start": "1294640",
    "end": "1300000"
  },
  {
    "text": "accesses just um the state pulls out um pulls out state sends the messages and sends a message and then",
    "start": "1300000",
    "end": "1306400"
  },
  {
    "text": "um this is done with the state so for um let's let's see this in action",
    "start": "1306400",
    "end": "1314080"
  },
  {
    "start": "1311000",
    "end": "1509000"
  },
  {
    "text": "actually so we've deployed this on on a sample kubernetes cluster",
    "start": "1314080",
    "end": "1320159"
  },
  {
    "text": "there are a bunch of parts running here um there's the therefore functions master and worker processes which are",
    "start": "1320159",
    "end": "1325760"
  },
  {
    "text": "the equivalent of the of the database of the state management system here we have two more deployments for the",
    "start": "1325760",
    "end": "1332159"
  },
  {
    "text": "payment workers and for the subscription workers these are the two functions that i just",
    "start": "1332159",
    "end": "1337280"
  },
  {
    "text": "explained in the example we we put them in separate deployments here we could have also put them",
    "start": "1337280",
    "end": "1342640"
  },
  {
    "text": "in the in on the same in the same deployment they're just um they're just different different request",
    "start": "1342640",
    "end": "1348799"
  },
  {
    "text": "handlers invoked through http and through different um we can you know through different uh",
    "start": "1348799",
    "end": "1354000"
  },
  {
    "text": "your eyes also have them in the in the exact same deployment there's a there's a log that actually",
    "start": "1354000",
    "end": "1360640"
  },
  {
    "text": "shows the output of the payment worker which we'll use for a later part of the demo so we can't see a lot of a lot",
    "start": "1360640",
    "end": "1366400"
  },
  {
    "text": "happening here but there's there's you know sample um data flowing around in the background some payments being processed",
    "start": "1366400",
    "end": "1372400"
  },
  {
    "text": "um switching to the apache link ui this is the this is the main operator from fling's perspective that handles the",
    "start": "1372400",
    "end": "1378640"
  },
  {
    "text": "stateful functions and and we can see from the from the different parallel charts a few hundred events per second going through",
    "start": "1378640",
    "end": "1384880"
  },
  {
    "text": "it's a it's a very it's a very tiny deployment just for um for the for the sample case here and i",
    "start": "1384880",
    "end": "1390720"
  },
  {
    "text": "think we're we're far under utilizing it we can use this you know you can use all",
    "start": "1390720",
    "end": "1395840"
  },
  {
    "text": "of of links tools to diagnose this application for example we can can look at the back pressure if our",
    "start": "1395840",
    "end": "1401039"
  },
  {
    "text": "functions cannot keep up with processing the events then no flink will eventually back pressure the whole system back to the um",
    "start": "1401039",
    "end": "1408320"
  },
  {
    "text": "back to the ingresses and not pick up events anymore from there",
    "start": "1408320",
    "end": "1413200"
  },
  {
    "text": "all right so one really important thing that we wanted to talk about is the consistency and",
    "start": "1413520",
    "end": "1419039"
  },
  {
    "text": "for for payment provider consistency is really important we don't want actually to trigger multiple payments um for the same user that's really",
    "start": "1419039",
    "end": "1425360"
  },
  {
    "text": "embarrassing thing then we have to you know handle it so we can simulate actually what happens if a duplicate payment",
    "start": "1425360",
    "end": "1431600"
  },
  {
    "text": "happens and we can we can see it in the in the bottom right window we inject it accidentally a duplicate message and we",
    "start": "1431600",
    "end": "1437200"
  },
  {
    "text": "can see that the payment functions immediately pick up this consistency um deviation there's you",
    "start": "1437200",
    "end": "1443840"
  },
  {
    "text": "know there's there's a response from the payment provider about the payment we didn't actually even initially initiate",
    "start": "1443840",
    "end": "1449120"
  },
  {
    "text": "so we can we can try this another time so this is just to show you that the system is um actually built up to detect or our",
    "start": "1449120",
    "end": "1456559"
  },
  {
    "text": "sample application detects these inconsistencies so usually this inconsistencies can",
    "start": "1456559",
    "end": "1462720"
  },
  {
    "text": "happen pretty easily if you you know you talk to the outside world let's say send some messages to kafka and also update",
    "start": "1462720",
    "end": "1468159"
  },
  {
    "text": "database date so if you actually crash everything at the same time you usually have to take some care in",
    "start": "1468159",
    "end": "1474159"
  },
  {
    "text": "order to not have any any duplicates but here we can really just crash all parts at the same time get them restarted and we can actually",
    "start": "1474159",
    "end": "1480400"
  },
  {
    "text": "see from the logs that there's no we cannot detect any inconsistency like we didn't really get",
    "start": "1480400",
    "end": "1486000"
  },
  {
    "text": "our internal state and the messages that we send to the outside world out of sync and this is really because",
    "start": "1486000",
    "end": "1491279"
  },
  {
    "text": "the the state updates the message sending it's all inherently transactionally integrated so you don't have to worry about",
    "start": "1491279",
    "end": "1496960"
  },
  {
    "text": "duplicates or anything there yeah that's that's actually um that's",
    "start": "1496960",
    "end": "1503120"
  },
  {
    "text": "actually the end of the short demo and that's also the end of the of the talk pretty much um i hope you",
    "start": "1503120",
    "end": "1508320"
  },
  {
    "text": "enjoyed it um what uh what i really want to you know to to tell you today is is this idea of",
    "start": "1508320",
    "end": "1514640"
  },
  {
    "start": "1509000",
    "end": "1552000"
  },
  {
    "text": "the stateful functions project trying to help build distributed scalable consistent applications",
    "start": "1514640",
    "end": "1520720"
  },
  {
    "text": "and it combines these two two ideas this idea of a programming abstraction based on",
    "start": "1520720",
    "end": "1526400"
  },
  {
    "text": "stateful entities and a distributed architecture that that that kind of",
    "start": "1526400",
    "end": "1531840"
  },
  {
    "text": "you know rethinks how to use databases and in this case doesn't use a database it uses a like an event-driven system",
    "start": "1531840",
    "end": "1537520"
  },
  {
    "text": "like apache flink um you can think of it almost as a combination of a database and and and the messaging system in one",
    "start": "1537520",
    "end": "1545440"
  },
  {
    "text": "and and by doing that we can actually get some some very interesting results so um",
    "start": "1545440",
    "end": "1553120"
  },
  {
    "start": "1552000",
    "end": "1573000"
  },
  {
    "text": "i want to acknowledge also very quickly a few other folks that work on this project i'm the one giving the talk but this is really um",
    "start": "1553120",
    "end": "1559120"
  },
  {
    "text": "developed by the apache flink community and especially those for folks here deserve a special shout out for",
    "start": "1559120",
    "end": "1564559"
  },
  {
    "text": "um for for being the ones that make this project um great so thank you very much",
    "start": "1564559",
    "end": "1572000"
  },
  {
    "text": "and um that is it i'm i'm very happy for you um to attend this talk and and",
    "start": "1572000",
    "end": "1577840"
  },
  {
    "start": "1573000",
    "end": "1774000"
  },
  {
    "text": "answer some interest in and what we're doing here thank you very much and i'm happy to take questions",
    "start": "1577840",
    "end": "1585840"
  },
  {
    "text": "hello yeah hi um so there thanks for listening to the um",
    "start": "1595360",
    "end": "1601440"
  },
  {
    "text": "to the talk there's um there's a bunch of questions that were asked in the in the box let me",
    "start": "1601440",
    "end": "1606880"
  },
  {
    "text": "actually go through um through them um through them one by one um the the first",
    "start": "1606880",
    "end": "1614720"
  },
  {
    "text": "question that came up is how do you differentiate stateful functions",
    "start": "1614720",
    "end": "1619760"
  },
  {
    "text": "from from cloud state i think that's a very good question um there is there's a lot of i think",
    "start": "1619760",
    "end": "1627279"
  },
  {
    "text": "similarities between the two projects in in in the problem that they want to solve",
    "start": "1627279",
    "end": "1632640"
  },
  {
    "text": "they both they both try to give you this stateful serverless abstraction where",
    "start": "1632640",
    "end": "1637760"
  },
  {
    "text": "the the application gets this gets this consistent state by by notion",
    "start": "1637760",
    "end": "1644640"
  },
  {
    "text": "of of integrated state and messaging um there's there's a few differences",
    "start": "1644640",
    "end": "1649919"
  },
  {
    "text": "though i think the i think the way that you define functions um",
    "start": "1649919",
    "end": "1654960"
  },
  {
    "text": "is um it follows slightly different different philosophies so in in stateful function basically a",
    "start": "1654960",
    "end": "1660480"
  },
  {
    "text": "function is a um this is an http request handler um",
    "start": "1660480",
    "end": "1665600"
  },
  {
    "text": "or if you use an an sdk that is included in the project you can you can basically just implement a",
    "start": "1665600",
    "end": "1672320"
  },
  {
    "text": "function annotate it with the um let's say with the uh with the type and namespace and then",
    "start": "1672320",
    "end": "1678399"
  },
  {
    "text": "the the sdks request handler will actually invoke that invoke that function um i'm not an",
    "start": "1678399",
    "end": "1685279"
  },
  {
    "text": "expert on on cloud state i think it's um it's a grpc protocol that you",
    "start": "1685279",
    "end": "1691120"
  },
  {
    "text": "that you develop in cloud state if you want if you want to state full entity there so there's",
    "start": "1691120",
    "end": "1696480"
  },
  {
    "text": "there's a there's a few differences i think the um i think the approach that we picked in stateful functions",
    "start": "1696480",
    "end": "1702960"
  },
  {
    "text": "has has this nice advantage that it it it works pretty easily to actually put this also behind something like an api",
    "start": "1702960",
    "end": "1709919"
  },
  {
    "text": "request gateway on um on on amazon and um and run the actual function logic um",
    "start": "1709919",
    "end": "1717679"
  },
  {
    "text": "as a as a lambda function as a service more similarly on kubernetes to",
    "start": "1717679",
    "end": "1722799"
  },
  {
    "text": "to put this in a similar deployment um put it behind the service and and scale it independently",
    "start": "1722799",
    "end": "1728480"
  },
  {
    "text": "i think the model that cloud state uses is that you strictly deploy these functions",
    "start": "1728480",
    "end": "1733919"
  },
  {
    "text": "as sidecar containers to the to the state to the system that manages",
    "start": "1733919",
    "end": "1739120"
  },
  {
    "text": "the state which in this case is um akka cluster um talking to",
    "start": "1739120",
    "end": "1744559"
  },
  {
    "text": "to a database in the background that is the persistence so so if you wish here um i mean tldr i",
    "start": "1744559",
    "end": "1750960"
  },
  {
    "text": "think the differences are the the decomposition between state and computers i think uh different in in stateful functions",
    "start": "1750960",
    "end": "1758240"
  },
  {
    "text": "and the other than that the the stack is different you know in this case it's it's",
    "start": "1758240",
    "end": "1763279"
  },
  {
    "text": "apache flink in the other case it's um it's akka plus some database that aggro persistence can",
    "start": "1763279",
    "end": "1768880"
  },
  {
    "text": "talk to like cassandra for example um there's another question is stateful",
    "start": "1768880",
    "end": "1776240"
  },
  {
    "start": "1774000",
    "end": "1863000"
  },
  {
    "text": "functions like an is a stateful function like an object from object-oriented programming encapsulating data and",
    "start": "1776240",
    "end": "1782480"
  },
  {
    "text": "behavior i i guess you can think of it like that um",
    "start": "1782480",
    "end": "1788399"
  },
  {
    "text": "i personally like to think of it more as an as an actor so the the notion of",
    "start": "1788399",
    "end": "1795600"
  },
  {
    "text": "you know processing messages or you know methods of the function being invoked",
    "start": "1795600",
    "end": "1802240"
  },
  {
    "text": "only only one at a time one after another at least per you know per entity key",
    "start": "1802240",
    "end": "1807600"
  },
  {
    "text": "is i think different so there's there's um there's no there's no parallelism um but yeah other than that i think that",
    "start": "1807600",
    "end": "1815600"
  },
  {
    "text": "the differences are probably the same as what you would say that are the differences between an actor and an object from",
    "start": "1815600",
    "end": "1821039"
  },
  {
    "text": "object-oriented programming the other the other thing may be worth pointing out is that um",
    "start": "1821039",
    "end": "1828720"
  },
  {
    "text": "an object from object-oriented programming like in the native way it's it's always around it's sitting somewhere and in your heap memory",
    "start": "1828720",
    "end": "1834880"
  },
  {
    "text": "versus a function isn't really isn't really active unless it's invoked right the only thing that let's say",
    "start": "1834880",
    "end": "1840320"
  },
  {
    "text": "permanently exists is the the state entry in in apache flink and when a message for this",
    "start": "1840320",
    "end": "1846720"
  },
  {
    "text": "function comes then the state is pulled out and the state and the message are delivered",
    "start": "1846720",
    "end": "1851919"
  },
  {
    "text": "to the function and for example if this function is running on a function as a service provider you may not have any resource occupied unless really",
    "start": "1851919",
    "end": "1858559"
  },
  {
    "text": "really a message comes um there's one question would it work",
    "start": "1858559",
    "end": "1866080"
  },
  {
    "start": "1863000",
    "end": "1982000"
  },
  {
    "text": "for multi-tenancy as well something like multiple users making the payment in absence of a database who handles",
    "start": "1866080",
    "end": "1872559"
  },
  {
    "text": "those i'm not 100 sure what the second part of the question refers to",
    "start": "1872559",
    "end": "1878000"
  },
  {
    "text": "but multi-tenancy um [Music] you can you can use this in a",
    "start": "1878000",
    "end": "1883519"
  },
  {
    "text": "multi-tenant fashion um i think pretty well if you assume that the let's say the the administrator of the",
    "start": "1883519",
    "end": "1891519"
  },
  {
    "text": "um of the apache flink part of the the system that you know that that handles the messaging",
    "start": "1891519",
    "end": "1896880"
  },
  {
    "text": "in the state that subscribes to the incoming events that this is like a trusted party then the the actual",
    "start": "1896880",
    "end": "1903200"
  },
  {
    "text": "function code can come from different parties that don't don't really um that don't really um",
    "start": "1903200",
    "end": "1910399"
  },
  {
    "text": "trust each other because they're they're running a separate deployment separate containers they can they cannot really um",
    "start": "1910399",
    "end": "1918080"
  },
  {
    "text": "that they cannot really interfere with uh with each other they don't have you know like direct",
    "start": "1918080",
    "end": "1923200"
  },
  {
    "text": "access to state in the system and so on they can really only um yeah they can really only communicate",
    "start": "1923200",
    "end": "1929840"
  },
  {
    "text": "um by sending messages and and thus they they cannot really interfere with the with the other",
    "start": "1929840",
    "end": "1935919"
  },
  {
    "text": "functions and they're running in separate processes so um yeah it's it's we haven't really yet",
    "start": "1935919",
    "end": "1941679"
  },
  {
    "text": "um spent a lot of time designing it into a strongly multi-tenant system so um there are probably a few you know",
    "start": "1941679",
    "end": "1948399"
  },
  {
    "text": "like a few quirks you'll run into in in let's say set up configuration aspects that aren't",
    "start": "1948399",
    "end": "1954399"
  },
  {
    "text": "that aren't absolutely optimized for multi-tenancy but i think the architecture as a whole is pretty promising for multi-tenancy",
    "start": "1954399",
    "end": "1960840"
  },
  {
    "text": "um especially because the computation in different surfaces is strongly isolated against each other",
    "start": "1960840",
    "end": "1966559"
  },
  {
    "text": "which is which is a very big part that that makes for example stream processing or um or other systems where",
    "start": "1966559",
    "end": "1973919"
  },
  {
    "text": "you know code from different parties really runs um in the same system which poses a big",
    "start": "1973919",
    "end": "1979760"
  },
  {
    "text": "challenge there there's a question how would the migration to stateful functions work",
    "start": "1979760",
    "end": "1987919"
  },
  {
    "start": "1982000",
    "end": "2087000"
  },
  {
    "text": "um that that is a very interesting one like how do you actually migrate an application to stateful functions um",
    "start": "1987919",
    "end": "1995580"
  },
  {
    "text": "[Music] so it's it's a bit of a different a different paradigm right so it's not as",
    "start": "1995580",
    "end": "2001679"
  },
  {
    "text": "easy as let's say it's swapping sequel for postgres or so underneath the hood and",
    "start": "2001679",
    "end": "2006799"
  },
  {
    "text": "um keeping everything else the same um if you do want an an application to to migrate to",
    "start": "2006799",
    "end": "2012559"
  },
  {
    "text": "stafford function you probably do have to to rewrite it first of all what one",
    "start": "2012559",
    "end": "2017840"
  },
  {
    "text": "thing that we're trying to um to add to the project is tools that that help with",
    "start": "2017840",
    "end": "2023440"
  },
  {
    "text": "let's say migrating the state from another um another application into state for functions meanings",
    "start": "2023440",
    "end": "2028480"
  },
  {
    "text": "meaning taking let's say a dump from a database and actually loading it into the into the into apache link so there's",
    "start": "2028480",
    "end": "2035760"
  },
  {
    "text": "there's some some early tooling for this already um it's called state bootstrapping where you can actually um you can take some",
    "start": "2035760",
    "end": "2043039"
  },
  {
    "text": "some input data and basically load it into into what's called a save point for flink which is basically",
    "start": "2043039",
    "end": "2048240"
  },
  {
    "text": "like um like a snapshot snapshot archive or so and then you can you can start the whole application from",
    "start": "2048240",
    "end": "2054320"
  },
  {
    "text": "there um but it's it's actually a bit of involved and involved procedures you actually",
    "start": "2054320",
    "end": "2060638"
  },
  {
    "text": "have to write an apache link data stream application for that at the moment to load the state in",
    "start": "2060639",
    "end": "2066000"
  },
  {
    "text": "there um we're working on making this easier to to add um to add tools like you know",
    "start": "2066000",
    "end": "2072720"
  },
  {
    "text": "just issue a sql query in order to to to import basically state into interstate 4 functions",
    "start": "2072720",
    "end": "2078560"
  },
  {
    "text": "um stay tuned there's there's going to be more releases in the future that that will make this easier",
    "start": "2078560",
    "end": "2085838"
  },
  {
    "text": "um this one question",
    "start": "2086399",
    "end": "2091598"
  },
  {
    "start": "2087000",
    "end": "2154000"
  },
  {
    "text": "do you have detailed comparison of your approach to scalable state to scalable state to other approaches",
    "start": "2091679",
    "end": "2097520"
  },
  {
    "text": "pros and cons um i mean as a scientific evaluation i",
    "start": "2097520",
    "end": "2102960"
  },
  {
    "text": "don't think we we we do have that um like this there's a there's a conceptual",
    "start": "2102960",
    "end": "2109119"
  },
  {
    "text": "like a pretty strong conceptual difference here that that i try to to motivate in the in the introduction like this um",
    "start": "2109119",
    "end": "2115359"
  },
  {
    "text": "switching the roads between application and database in terms of acting reacting um which which the the programming model",
    "start": "2115359",
    "end": "2123520"
  },
  {
    "text": "also inherently means that you really distribute by by entity um because each each set will",
    "start": "2123520",
    "end": "2129440"
  },
  {
    "text": "function by its address and so on um can basically live anywhere",
    "start": "2129440",
    "end": "2134960"
  },
  {
    "text": "um i think these are very good starting points for for like a detailed comparison",
    "start": "2134960",
    "end": "2140480"
  },
  {
    "text": "i don't know i think if somebody is looking for a for for research project some someone in academia so i think this",
    "start": "2140480",
    "end": "2145680"
  },
  {
    "text": "would actually be a very interesting one um i personally don't don't know um that something like this",
    "start": "2145680",
    "end": "2152160"
  },
  {
    "text": "already exists i think we might have time for for one more question",
    "start": "2152160",
    "end": "2158960"
  },
  {
    "start": "2154000",
    "end": "2226000"
  },
  {
    "text": "here's another one how high is the memory consumption of apache flink",
    "start": "2158960",
    "end": "2164240"
  },
  {
    "text": "um so hachi flink is is developed in java so there is a certain amount of memory consumption that just",
    "start": "2164240",
    "end": "2169599"
  },
  {
    "text": "comes with the jvm flink itself i think you can you can kind of",
    "start": "2169599",
    "end": "2177200"
  },
  {
    "text": "conf comfortably run the framework with something like half a gigabyte or so so the um",
    "start": "2177200",
    "end": "2184480"
  },
  {
    "text": "let's say the the main part of the of the of the framework the the coordination",
    "start": "2184480",
    "end": "2189520"
  },
  {
    "text": "part i think if you give it a 100 um 100 megabytes it should be actually fine and then",
    "start": "2189520",
    "end": "2195040"
  },
  {
    "text": "there's a good amount of memory that that should go to um the embedded rocksdb instance which is where the with the um where the local",
    "start": "2195040",
    "end": "2202720"
  },
  {
    "text": "state index is stored so this this should always have i would say maybe roughly half a gigabyte of memory for",
    "start": "2202720",
    "end": "2209040"
  },
  {
    "text": "for decent performance and so on so yeah the the memory footprint of link is pretty much that jvm with embedded rockstar you",
    "start": "2209040",
    "end": "2216400"
  },
  {
    "text": "can you can think about it like that so half a gigabyte's a good it's a good start um more obviously always helps",
    "start": "2216400",
    "end": "2222160"
  },
  {
    "text": "with with performance um there's one more question i'm i'm",
    "start": "2222160",
    "end": "2229200"
  },
  {
    "start": "2226000",
    "end": "2369000"
  },
  {
    "text": "just going to keep going unless the um unless the organizers cut me off here",
    "start": "2229200",
    "end": "2235040"
  },
  {
    "text": "so how do you handle synchronous communication like getting errors",
    "start": "2235040",
    "end": "2241440"
  },
  {
    "text": "um yeah um",
    "start": "2241440",
    "end": "2247520"
  },
  {
    "text": "how how do you deal with synchronous communication here um so there's um i think there's two two",
    "start": "2248079",
    "end": "2254800"
  },
  {
    "text": "two answers um to that just got the message this is our last question sorry about that um if you if you",
    "start": "2254800",
    "end": "2262400"
  },
  {
    "text": "actually deploy this in in a way that that your function invocation can can easily",
    "start": "2262400",
    "end": "2267760"
  },
  {
    "text": "can easily block because you can spawn a lot more you know processes that handle the different invocations like if you",
    "start": "2267760",
    "end": "2273359"
  },
  {
    "text": "put it for example on on a function as a service platform then you know just do synchronous communication in the um",
    "start": "2273359",
    "end": "2279920"
  },
  {
    "text": "the function it doesn't doesn't matter if it blocks if you actually are are limited to the number of",
    "start": "2279920",
    "end": "2285440"
  },
  {
    "text": "processes you you you are um you have then you you have some some facilities in stateful",
    "start": "2285440",
    "end": "2292079"
  },
  {
    "text": "functions to actually um to actually do asynchronous requests and asynchronously handle responses so",
    "start": "2292079",
    "end": "2298720"
  },
  {
    "text": "that's that's pretty i would say pretty much how in many reactive systems you would you do",
    "start": "2298720",
    "end": "2304000"
  },
  {
    "text": "you know you do do external requests um in terms of of consistency how do you",
    "start": "2304000",
    "end": "2309680"
  },
  {
    "text": "do synchronous requests if you if you were worried about consistency um you wouldn't all external",
    "start": "2309680",
    "end": "2316560"
  },
  {
    "text": "communication should actually go through egress events if you do that then consistency comes out of the box if you",
    "start": "2316560",
    "end": "2322000"
  },
  {
    "text": "do external communication that that affects side effects from within the function then basically it's your own game to",
    "start": "2322000",
    "end": "2328320"
  },
  {
    "text": "worry about consistency again all right um that um",
    "start": "2328320",
    "end": "2336320"
  },
  {
    "text": "that was it thank you very much for for listening and this like this very interesting questions very very cool",
    "start": "2336320",
    "end": "2341520"
  },
  {
    "text": "um there's a slack channel um kubecon serverless if you want to ask further",
    "start": "2341520",
    "end": "2347280"
  },
  {
    "text": "questions there i'd be um i'll be in that slack channel for for the next hour or so so",
    "start": "2347280",
    "end": "2352560"
  },
  {
    "text": "feel free to also ping me there if you have some follow-up questions thanks a lot for listening and yeah um",
    "start": "2352560",
    "end": "2361440"
  },
  {
    "text": "very i'm very happy for um for for you guys attending the session and asking these questions",
    "start": "2361440",
    "end": "2367599"
  },
  {
    "text": "thanks a lot",
    "start": "2367599",
    "end": "2371280"
  }
]