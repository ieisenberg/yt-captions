[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "hello and thank you very much uh for coming to this talk today um if you are watching this is a recording then",
    "start": "3120",
    "end": "9200"
  },
  {
    "text": "unfortunately i'm unable to be with you today however uh again uh thank you for coming to my",
    "start": "9200",
    "end": "14960"
  },
  {
    "text": "talk today today we're going to be talking about",
    "start": "14960",
    "end": "20000"
  },
  {
    "text": "rolling out the red carpet for production kubernetes clusters with a cube vip um my name is daniel finneran also known",
    "start": "20000",
    "end": "27599"
  },
  {
    "text": "as the bsd box on github and and twitter and other places and i'm currently leading the",
    "start": "27599",
    "end": "34480"
  },
  {
    "text": "engineering efforts in developer relations at equinix metal so to kick things off a bit of",
    "start": "34480",
    "end": "41040"
  },
  {
    "start": "39000",
    "end": "39000"
  },
  {
    "text": "background i guess into the the cube vip project many many roles ago i was predominantly",
    "start": "41040",
    "end": "48879"
  },
  {
    "text": "focused on helping customers and end users roll out bare metal kubernetes",
    "start": "48879",
    "end": "54399"
  },
  {
    "text": "servers and clusters and from that i i kind of spawned a bare",
    "start": "54399",
    "end": "59840"
  },
  {
    "text": "metal provisioning project in order to kind of alleviate a lot of the issues that i was finding getting these these",
    "start": "59840",
    "end": "64960"
  },
  {
    "text": "uh clusters rolled out so it's quite a simple project to automate the deployment of bare metal servers it would typically stand up the operating",
    "start": "64960",
    "end": "71360"
  },
  {
    "text": "system and then once i kind of got that automated it later kind of developed into a",
    "start": "71360",
    "end": "77119"
  },
  {
    "text": "provisioning engine um to not only stand up the operating system but then to stand up the kubernetes clusters that",
    "start": "77119",
    "end": "83119"
  },
  {
    "text": "sat on top of it i then started to kind of take it i guess to the next level by looking at",
    "start": "83119",
    "end": "88400"
  },
  {
    "text": "building a cappy so a cluster api provider to automate um the entire end-to-end platform and this",
    "start": "88400",
    "end": "95759"
  },
  {
    "text": "is typically where i i started to hit a number of problems mainly around kind of the the life cycle and",
    "start": "95759",
    "end": "101759"
  },
  {
    "text": "and turning these clusters into something that was a bit more kind of production ready so um",
    "start": "101759",
    "end": "108079"
  },
  {
    "text": "the you know the kind of typical architecture of kubernetes clusters are that we have a control plane which",
    "start": "108079",
    "end": "114240"
  },
  {
    "text": "should be made up of more than one control plane node and then typically as many workers as required in order to run",
    "start": "114240",
    "end": "121360"
  },
  {
    "text": "applications and workloads and things like that the high available in the production",
    "start": "121360",
    "end": "127119"
  },
  {
    "text": "kind of side of things typically mean that we need to really kind of protect the control plane because without the",
    "start": "127119",
    "end": "133280"
  },
  {
    "text": "control plane we no longer have access to do anything with that kubernetes cluster",
    "start": "133280",
    "end": "138800"
  },
  {
    "text": "your workloads more than likely will continue to carry on running however we can no longer change things we can no",
    "start": "138800",
    "end": "145120"
  },
  {
    "text": "longer get the state of everything that's actually running within that kubernetes cluster so we need to look at making the control",
    "start": "145120",
    "end": "150720"
  },
  {
    "text": "plane highly available so typically in order for a highly available kubernetes cluster we",
    "start": "150720",
    "end": "156959"
  },
  {
    "text": "obviously need more than one control plane node but we also need a number of other kind of components in order to provide highly",
    "start": "156959",
    "end": "163920"
  },
  {
    "text": "available access and redundancy in in the case of um",
    "start": "163920",
    "end": "169760"
  },
  {
    "text": "in the case of failure um previously or in a lot of examples um you will find people having additional",
    "start": "169760",
    "end": "176640"
  },
  {
    "text": "nodes that sit in front of their kubernetes clusters that provide things like load balancing or",
    "start": "176640",
    "end": "182000"
  },
  {
    "text": "highly available ip addresses so we we need to add additional capacity to",
    "start": "182000",
    "end": "187440"
  },
  {
    "text": "kind of cater for that and then they will effectively provide access then to the control plane nodes that sit beneath",
    "start": "187440",
    "end": "193280"
  },
  {
    "text": "them so what's kind of the bill of materials that that are required in order to",
    "start": "193280",
    "end": "199360"
  },
  {
    "text": "provide that highly available access so if we kind of drill down into",
    "start": "199360",
    "end": "204879"
  },
  {
    "text": "one of these nodes that sits before our kubernetes cluster and look kind of under the covers",
    "start": "204879",
    "end": "210799"
  },
  {
    "text": "we typically need a clustering technology that will ensure that one of these front-facing",
    "start": "210799",
    "end": "217840"
  },
  {
    "text": "nodes is elected the leader and in the event of that leadership",
    "start": "217840",
    "end": "222879"
  },
  {
    "text": "changing it needs to be able to reflect that change to the network so that traffic can",
    "start": "222879",
    "end": "228159"
  },
  {
    "text": "go to whichever node has now been elected to that leader and then uh the capability to perhaps",
    "start": "228159",
    "end": "234080"
  },
  {
    "text": "load balance to uh the control plane nodes that sit that sit beneath it",
    "start": "234080",
    "end": "241040"
  },
  {
    "text": "so um you know if we kind of look at all this and these are kind of the issues that i was facing this incurs kind of a lot of",
    "start": "241040",
    "end": "247200"
  },
  {
    "text": "operational overhead um from an automation perspective there are a lot of additional pieces of software",
    "start": "247200",
    "end": "252720"
  },
  {
    "text": "that are required to provide that functionality we need to automate the load balancing part of things we need to",
    "start": "252720",
    "end": "258160"
  },
  {
    "text": "load while we need to automate the clustering technology and and the the tooling that we use to provide",
    "start": "258160",
    "end": "265680"
  },
  {
    "text": "uh virtual ip addresses and things like that this requires kind of all the operational knowledge of that tooling in",
    "start": "265680",
    "end": "271600"
  },
  {
    "text": "order to design and implement that into the infrastructure but from a cluster lifecycle perspective",
    "start": "271600",
    "end": "278320"
  },
  {
    "text": "each of these specific bits of tooling have their own configuration their own life cycle",
    "start": "278320",
    "end": "284400"
  },
  {
    "text": "all of that makes it kind of quite hard to automate so that's kind of where the project kind of",
    "start": "284400",
    "end": "290080"
  },
  {
    "text": "spawned from and then you know kind of i realized that we could kind of take it a little",
    "start": "290080",
    "end": "295120"
  },
  {
    "start": "292000",
    "end": "292000"
  },
  {
    "text": "bit further so we have our kubernetes cluster up and running",
    "start": "295120",
    "end": "300880"
  },
  {
    "text": "um but you know pods inside of kubernetes cluster typically can't be accessed from outside the",
    "start": "300880",
    "end": "306720"
  },
  {
    "text": "cluster and prior we would need additional technologies in order to",
    "start": "306720",
    "end": "312080"
  },
  {
    "text": "expose these to uh outside worlds out the outside world so a service of type load balancer is",
    "start": "312080",
    "end": "319280"
  },
  {
    "text": "typically used in order to expose a collection of pods to the outside",
    "start": "319280",
    "end": "324639"
  },
  {
    "text": "world through an external ip address so i kind of realized that um you know kind of already implemented a lot of the",
    "start": "324639",
    "end": "330560"
  },
  {
    "text": "technology in order to do that and that is where cube vip went from not only providing just highly available",
    "start": "330560",
    "end": "336800"
  },
  {
    "text": "kubernetes clusters so production-ready kubernetes clusters but also being able to provide load balance of functionality to allow",
    "start": "336800",
    "end": "343759"
  },
  {
    "text": "external access to pods inside your kubernetes cluster so uh this is kind of what i'm going to be",
    "start": "343759",
    "end": "350080"
  },
  {
    "text": "talking about today so cuba background i've already done that um but we're going to be looking at kind of",
    "start": "350080",
    "end": "355840"
  },
  {
    "text": "the architecture of cube vip and the protocols that it uses in order to",
    "start": "355840",
    "end": "361600"
  },
  {
    "text": "expose things to the outside world we'll look at how the highly available",
    "start": "361600",
    "end": "366880"
  },
  {
    "text": "kubernetes clusters actually look like with cube vip we'll discuss kind of the load balancer services what that looks",
    "start": "366880",
    "end": "372000"
  },
  {
    "text": "like and how that works um a little bit of the road map in terms of things that we're working on next and",
    "start": "372000",
    "end": "377600"
  },
  {
    "text": "then um hopefully time for some questions so um in the initial uh design um",
    "start": "377600",
    "end": "384720"
  },
  {
    "start": "381000",
    "end": "381000"
  },
  {
    "text": "cubevip was designed to sit outside of the the kubernetes cluster and in order",
    "start": "384720",
    "end": "390080"
  },
  {
    "text": "for it to work we needed um a way of having a leadership election so",
    "start": "390080",
    "end": "396160"
  },
  {
    "text": "we originally opted for using raft which already runs inside kubernetes through",
    "start": "396160",
    "end": "401600"
  },
  {
    "text": "xcd raft requires an odd number of members in order for",
    "start": "401600",
    "end": "407600"
  },
  {
    "text": "the election process to actually work and raft effectively works by having",
    "start": "407600",
    "end": "413360"
  },
  {
    "text": "elections on a regular basis and if",
    "start": "413360",
    "end": "418880"
  },
  {
    "text": "one of the nodes becomes ill or doesn't respond in time etc then there will be a new leadership",
    "start": "418880",
    "end": "424800"
  },
  {
    "text": "election and one of the other nodes then will get will become the leader in the cluster",
    "start": "424800",
    "end": "430000"
  },
  {
    "text": "um unfortunately this worked in order of standing standing up kubernetes clusters and they would become leader and and do",
    "start": "430000",
    "end": "436880"
  },
  {
    "text": "all of the highly available side of things however unfortunately um things like upgrades and and and in some",
    "start": "436880",
    "end": "444720"
  },
  {
    "text": "cases node failures we would typically end up in a position where raft was unable to elect a leader",
    "start": "444720",
    "end": "450560"
  },
  {
    "text": "and without that being a leader there was no longer a running cluster so we decided to look at alternative ways",
    "start": "450560",
    "end": "457599"
  },
  {
    "text": "of having leader elections um it turned out that um there was an",
    "start": "457599",
    "end": "462880"
  },
  {
    "text": "easy way of doing this kubernetes the kubernetes api um actually provides a functionality called",
    "start": "462880",
    "end": "468960"
  },
  {
    "text": "leader election so um we can effectively make use of that in order to provide our leader election",
    "start": "468960",
    "end": "475599"
  },
  {
    "text": "so um using you know kind of things like the the kubernetes go sdk um",
    "start": "475599",
    "end": "482000"
  },
  {
    "text": "we can effectively have some code that will connect to the api and say that it",
    "start": "482000",
    "end": "487280"
  },
  {
    "text": "wants to it wants to participate in this leader election so typically cube vip has this code",
    "start": "487280",
    "end": "493199"
  },
  {
    "text": "within it um and a number of kind of cube instances will connect to the kubernetes api and say",
    "start": "493199",
    "end": "499680"
  },
  {
    "text": "uh i want to hold this lease i want to be um i want to be the leader",
    "start": "499680",
    "end": "505919"
  },
  {
    "text": "the kubernetes api will then make the decision um and say you can hold the lease at which point whichever instance",
    "start": "505919",
    "end": "512560"
  },
  {
    "text": "of the code holds the lease now is the leader within that election",
    "start": "512560",
    "end": "517680"
  },
  {
    "text": "and typically a node can relinquish that lease when it shuts down or if it",
    "start": "517680",
    "end": "524880"
  },
  {
    "text": "if it becomes unresponsive then a timeout will occur and the process will restart where all of the other nodes",
    "start": "524880",
    "end": "531120"
  },
  {
    "text": "that participate in that leader election will also ask for the lease and one of the other one nodes um will then get",
    "start": "531120",
    "end": "536480"
  },
  {
    "text": "that lease so this allows uh us to have that technology of um a having um one of",
    "start": "536480",
    "end": "543920"
  },
  {
    "text": "the participants become the leader and then in the event of failure or upgrades or or anything uh lifecycle related",
    "start": "543920",
    "end": "551680"
  },
  {
    "text": "um if something times out or fails one of the other nodes can can have that leader election and become the leader",
    "start": "551680",
    "end": "557600"
  },
  {
    "text": "within that cluster um so when a new node becomes a leader for the",
    "start": "557600",
    "end": "564560"
  },
  {
    "start": "559000",
    "end": "559000"
  },
  {
    "text": "first time um it will need to inform the network uh the wider network and the",
    "start": "564560",
    "end": "569839"
  },
  {
    "text": "traffic should come to its uh there are two distinguished there are two technologies",
    "start": "569839",
    "end": "574880"
  },
  {
    "text": "that we focus that we rely on within cube vip the first one is arp which is a layer 2",
    "start": "574880",
    "end": "580399"
  },
  {
    "text": "protocol and effectively arp allows a node on the network",
    "start": "580399",
    "end": "586399"
  },
  {
    "text": "to effectively broadcast and update that network so that that network knows to send traffic",
    "start": "586399",
    "end": "593040"
  },
  {
    "text": "to it when it is wanting to send traffic to a particular ip address so in this kind of quick example on the",
    "start": "593040",
    "end": "599279"
  },
  {
    "text": "left we have two nodes um and um",
    "start": "599279",
    "end": "605279"
  },
  {
    "text": "when onenote comes up for the first time and it wants to tell the network that its ip address is linked to this",
    "start": "605279",
    "end": "611600"
  },
  {
    "text": "particular mac address so a mac address is a hardware address that's built into",
    "start": "611600",
    "end": "617120"
  },
  {
    "text": "the network card it can broadcast to the network that to get to this ip",
    "start": "617120",
    "end": "624079"
  },
  {
    "text": "address send your layer to traffic to this mac address so it effectively",
    "start": "624079",
    "end": "629680"
  },
  {
    "text": "uh updates the network um to say ip address to this mac address and that",
    "start": "629680",
    "end": "636000"
  },
  {
    "text": "effectively is how layer 2 traffic actually works when we want to send traffic to an ip address we look up",
    "start": "636000",
    "end": "642399"
  },
  {
    "text": "on an internal table where which piece of hardware do we want to actually send the traffic to",
    "start": "642399",
    "end": "648079"
  },
  {
    "text": "um and in the event that we have a leader election we then do that layer 2 update so we know so the network knows",
    "start": "648079",
    "end": "653600"
  },
  {
    "text": "where traffic should actually go bgp is a layer 3 protocol so effectively",
    "start": "653600",
    "end": "662720"
  },
  {
    "text": "what that means is that devices can publish routes to a networking device",
    "start": "662720",
    "end": "669600"
  },
  {
    "text": "so that when traffic is rooted through them they hold the knowledge of where that",
    "start": "669600",
    "end": "674880"
  },
  {
    "text": "traffic should go as a as a next hop so um in this example we have uh we have a",
    "start": "674880",
    "end": "681279"
  },
  {
    "text": "number of servers that are all running um we have a top of rack uh router and",
    "start": "681279",
    "end": "686959"
  },
  {
    "text": "then we have a client device which in this case is a laptop all of the devices that that want to",
    "start": "686959",
    "end": "693120"
  },
  {
    "text": "share these routes will need to participate um in what's called peering so they will need to connect to that",
    "start": "693120",
    "end": "699839"
  },
  {
    "text": "router and advertise that in order to get to a particular address or range",
    "start": "699839",
    "end": "706240"
  },
  {
    "text": "then traffic should be routed to them so in this example we can see the second",
    "start": "706240",
    "end": "712480"
  },
  {
    "text": "server here the dot 21 server it also has additional ip addresses so",
    "start": "712480",
    "end": "718320"
  },
  {
    "text": "uh it has the ip address 10.0.2.5 and it is peering and advertising to the",
    "start": "718320",
    "end": "724880"
  },
  {
    "text": "router that all traffic that needs to get to that 10 address should be sent to the",
    "start": "724880",
    "end": "731800"
  },
  {
    "text": "192.21 address so what that allows the router to do is know which node to send traffic to in",
    "start": "731800",
    "end": "738720"
  },
  {
    "text": "order to get to that additional to that next step ip address so when the client wants to get to",
    "start": "738720",
    "end": "744480"
  },
  {
    "text": "10.0.2.5 it connects through that router which could be its default gateway",
    "start": "744480",
    "end": "749680"
  },
  {
    "text": "um the router then knows to send traffic to that.21 host which will then allow",
    "start": "749680",
    "end": "754880"
  },
  {
    "text": "the traffic to get to that 2.5 address",
    "start": "754880",
    "end": "759839"
  },
  {
    "text": "one additional benefit of bgp is that it typically offers load balancing out of",
    "start": "760160",
    "end": "765519"
  },
  {
    "text": "the box via the router so we can see we have multiple nodes all advertising that 10.0.2.5 address to the",
    "start": "765519",
    "end": "773440"
  },
  {
    "text": "router and then a client that goes to that address will be sent to one of those nodes um",
    "start": "773440",
    "end": "780639"
  },
  {
    "start": "780000",
    "end": "780000"
  },
  {
    "text": "that is participating in that peering so kind of a quick overview in terms of",
    "start": "780639",
    "end": "786560"
  },
  {
    "text": "kind of the pros and cons between the two um arp is a standard",
    "start": "786560",
    "end": "794240"
  },
  {
    "text": "protocol that's existed in network equipment for many years it doesn't require anything special",
    "start": "794240",
    "end": "801600"
  },
  {
    "text": "bgp however does require uh layer 3 routing so either top of rec switch or a",
    "start": "801600",
    "end": "806720"
  },
  {
    "text": "router that supports that is actually required and some hardware vendors may require",
    "start": "806720",
    "end": "812880"
  },
  {
    "text": "additional licenses in order for it to work um arp poisoning",
    "start": "812880",
    "end": "818079"
  },
  {
    "text": "can disrupt a network so arp poisoning is where a malicious actor on the network",
    "start": "818079",
    "end": "824240"
  },
  {
    "text": "starts advertising false ip addresses to false mac addresses and effectively what that",
    "start": "824240",
    "end": "830000"
  },
  {
    "text": "would allow a user to do is kind of black hole traffic so for instance um",
    "start": "830000",
    "end": "835839"
  },
  {
    "text": "i could tell everybody that in order to get to a particular ip address they need to go",
    "start": "835839",
    "end": "842240"
  },
  {
    "text": "to a fake mac address at which point people will start to see traffic failing because their arp tables have been",
    "start": "842240",
    "end": "848560"
  },
  {
    "text": "poisoned however bgp can mandate authentication",
    "start": "848560",
    "end": "853920"
  },
  {
    "text": "and you can have acls and rules on the routers which would stop malicious routes being advertised",
    "start": "853920",
    "end": "860639"
  },
  {
    "text": "um arp some switches in virtual software um and physical switches actually can restrict",
    "start": "860639",
    "end": "867680"
  },
  {
    "text": "uh our broad updates um so for instance if things are changing too",
    "start": "867680",
    "end": "872880"
  },
  {
    "text": "rapidly some switches will start denying um those broadcasts from it going going",
    "start": "872880",
    "end": "878480"
  },
  {
    "text": "further on the network bgp because it's layer 3 requires firewall access",
    "start": "878480",
    "end": "884639"
  },
  {
    "text": "possibly on a on a udp port to to the router arp is fantastic for small networks",
    "start": "884639",
    "end": "891760"
  },
  {
    "text": "doesn't require expensive or clever hardware so it's really good for edge",
    "start": "891760",
    "end": "897279"
  },
  {
    "text": "and smallish network segments whereas bgp you know ultimately kind of powers the internet um so",
    "start": "897279",
    "end": "903680"
  },
  {
    "text": "we can kind of see how well bgp scales so we've kind of discussed uh the",
    "start": "903680",
    "end": "909839"
  },
  {
    "text": "clustering technologies that power qvip we've discussed the networking protocols",
    "start": "909839",
    "end": "915279"
  },
  {
    "text": "that we use to update the network and allow access into into cube vip",
    "start": "915279",
    "end": "920720"
  },
  {
    "text": "we're going to discuss how you actually get qvi actually deployed so using leader election as part of the",
    "start": "920720",
    "end": "926880"
  },
  {
    "text": "cluster as part of the kubernetes api means that we actually run cube vip inside of kubernetes now so",
    "start": "926880",
    "end": "933120"
  },
  {
    "text": "uh raft has largely been deprecated because it was deemed kind of unstable now we run kubernetes as a pod",
    "start": "933120",
    "end": "939680"
  },
  {
    "text": "inside of kubernetes which connects up to the api server participating leader election etc",
    "start": "939680",
    "end": "945680"
  },
  {
    "text": "so two common methods either a static pod uh or a demon set and both of those",
    "start": "945680",
    "end": "951199"
  },
  {
    "text": "methods both come with their own unique quirks to a certain degree so um static pods um originally with",
    "start": "951199",
    "end": "959040"
  },
  {
    "start": "956000",
    "end": "956000"
  },
  {
    "text": "cube vip i was using cube adm but still i'm using cube adm um",
    "start": "959040",
    "end": "964240"
  },
  {
    "text": "but that effectively would come with a chicken and egg scenario in the cube adm",
    "start": "964240",
    "end": "969600"
  },
  {
    "text": "in it has a check which tries to connect to the virtual ip",
    "start": "969600",
    "end": "975279"
  },
  {
    "text": "this floating ip address as part of the installation procedure now",
    "start": "975279",
    "end": "981040"
  },
  {
    "text": "what that means is that cubit needs to be stood up and advertising this this virtual ip",
    "start": "981040",
    "end": "986639"
  },
  {
    "text": "address before the cube adm init fails however um",
    "start": "986639",
    "end": "992720"
  },
  {
    "text": "you know how can i deploy a pod to a cluster before the clusters installed and this is where kind of the static pod",
    "start": "992720",
    "end": "999360"
  },
  {
    "text": "mechanism kind of came in so what we can do is we can kind of simulate the the behavior of cube adm in",
    "start": "999360",
    "end": "1005839"
  },
  {
    "text": "it in the cube adm in it will effectively populate a number of manifests in the",
    "start": "1005839",
    "end": "1011759"
  },
  {
    "text": "the kubernetes manifests folder um and then kubelet is effectively told to start up by cube adm init and then",
    "start": "1011759",
    "end": "1018880"
  },
  {
    "text": "cube adm in it will start all of those static pods that are those manifests in the manifests folder",
    "start": "1018880",
    "end": "1025199"
  },
  {
    "text": "what we can do is we can add our own static manifest for cube vip inside the manifests folder",
    "start": "1025199",
    "end": "1032240"
  },
  {
    "text": "before we do the cube adm in it and this basically allows cube adm in it to sit alongside all of the control plane",
    "start": "1032240",
    "end": "1038798"
  },
  {
    "text": "components and cube that will just start up alongside of all of those so the api",
    "start": "1038799",
    "end": "1043918"
  },
  {
    "text": "server will start the schedule will start at cd will start and cube vip will also start at the same time",
    "start": "1043919",
    "end": "1049919"
  },
  {
    "text": "which means it can connect to the api server and it can expose that control plane ip address to the outside world",
    "start": "1049919",
    "end": "1057440"
  },
  {
    "text": "uh with a daemon set that's much simpler in this example we're using uh k3s from",
    "start": "1057440",
    "end": "1063760"
  },
  {
    "text": "rancher um and with this we've effectively uh given an additional piece of information",
    "start": "1063760",
    "end": "1070799"
  },
  {
    "text": "which is the tls san line which effectively means that k3s will add an",
    "start": "1070799",
    "end": "1077039"
  },
  {
    "text": "additional control plane ip address to our certificates for the api server",
    "start": "1077039",
    "end": "1084480"
  },
  {
    "text": "um so we can stand that cluster up and then once the the cluster is actually up",
    "start": "1084480",
    "end": "1089520"
  },
  {
    "text": "and running we can do a cubesat cubectl apply of the cubevip manifest as a daemon set",
    "start": "1089520",
    "end": "1097280"
  },
  {
    "text": "bring up those additional control plane nodes and it will just scale across it will come up and it will start",
    "start": "1097280",
    "end": "1103520"
  },
  {
    "text": "advertising that 10.0.2.5 address as a as a highly available virtual ip address",
    "start": "1103520",
    "end": "1111520"
  },
  {
    "text": "so it really depends on you know kind of a the kubernetes distro",
    "start": "1111520",
    "end": "1118080"
  },
  {
    "text": "that you're deploying or the installation mechanism that you're actually looking at going down",
    "start": "1118080",
    "end": "1124559"
  },
  {
    "text": "some of the cluster api providers that are using cubevip today typically rely on cube adm as part of",
    "start": "1124559",
    "end": "1130880"
  },
  {
    "text": "the bootstrap bootstrap process so they typically will deploy that manifest",
    "start": "1130880",
    "end": "1136080"
  },
  {
    "text": "inside the manifest folder as part of the the cluster api provider functionality",
    "start": "1136080",
    "end": "1142559"
  },
  {
    "text": "so um you know as i mentioned with some of the the technologies mentioned we now have all of the components required to",
    "start": "1142559",
    "end": "1148640"
  },
  {
    "text": "provide high availability we have that clustering algorithm that will ensure that in the in",
    "start": "1148640",
    "end": "1154880"
  },
  {
    "text": "node failure and upgrade another node will take leadership and continue to receive traffic",
    "start": "1154880",
    "end": "1160080"
  },
  {
    "text": "and the networking topologies will be updated should there be any changes",
    "start": "1160080",
    "end": "1165120"
  },
  {
    "start": "1165000",
    "end": "1165000"
  },
  {
    "text": "so what does it all actually look like um in this example we have our three control plane nodes we no longer require",
    "start": "1165120",
    "end": "1171600"
  },
  {
    "text": "additional nodes that sit atop to provide um high availability and things like that so we've already reduced",
    "start": "1171600",
    "end": "1178559"
  },
  {
    "text": "the amount of nodes that are actually required to provide that high availability so we can see we have our three nodes uh",
    "start": "1178559",
    "end": "1185039"
  },
  {
    "text": "as part of the control plane they're all running the control plane components they all have static pod manifests which",
    "start": "1185039",
    "end": "1191200"
  },
  {
    "text": "means that cube vip is actually running on them and we can also see the first node has",
    "start": "1191200",
    "end": "1196240"
  },
  {
    "text": "been elected leader which means that it carries the virtual ip address",
    "start": "1196240",
    "end": "1201440"
  },
  {
    "text": "so in the event that node number one is removed or as part of the upgrade",
    "start": "1201440",
    "end": "1207039"
  },
  {
    "text": "procedure the cube vip pod will uh be terminated at which point uh one of the other nodes",
    "start": "1207039",
    "end": "1213600"
  },
  {
    "text": "at the part of the the cluster will do that leader election they will",
    "start": "1213600",
    "end": "1219280"
  },
  {
    "text": "ultimately be given the lease once they have been given that lease they will start advertising that to to get to the",
    "start": "1219280",
    "end": "1225679"
  },
  {
    "text": "control plane um i have the vip and send traffic to me so",
    "start": "1225679",
    "end": "1231039"
  },
  {
    "text": "um from an end user perspective um you may see one or two ping loss during",
    "start": "1231039",
    "end": "1238640"
  },
  {
    "text": "the the failover but it is very quick in some cases almost instantaneous um the leader",
    "start": "1238640",
    "end": "1244640"
  },
  {
    "text": "election happens as soon as the other node is is removed and arp broadcasts will ultimately",
    "start": "1244640",
    "end": "1252000"
  },
  {
    "text": "update the network immediately from a bgp perspective um",
    "start": "1252000",
    "end": "1257919"
  },
  {
    "text": "either a demon set or we have static pods here all three of them carry the vip",
    "start": "1257919",
    "end": "1264720"
  },
  {
    "text": "but they carry it on a internal adapter so what that means is that that 10.0.2.5",
    "start": "1264720",
    "end": "1271039"
  },
  {
    "text": "address isn't directly accessible by the outside world otherwise we would end up in a position of conflicting ip",
    "start": "1271039",
    "end": "1277679"
  },
  {
    "text": "addresses that's something to to be aware of but it's not something that that would trouble you due to the architecture of this",
    "start": "1277679",
    "end": "1284799"
  },
  {
    "text": "and effectively um what that means is that and a client that wants to connect to",
    "start": "1284799",
    "end": "1290159"
  },
  {
    "text": "the kubernetes control plane that wants to get to 10.0.2.5 will connect uh through the router",
    "start": "1290159",
    "end": "1298960"
  },
  {
    "text": "um and that router will ultimately send traffic to one of any of the nodes that",
    "start": "1298960",
    "end": "1304559"
  },
  {
    "text": "is peering so we get load balancing from that router automatically in the event that one of the nodes dies",
    "start": "1304559",
    "end": "1310799"
  },
  {
    "text": "so we can see here number node node 1 has become unaccessible that node will stop advertising it will",
    "start": "1310799",
    "end": "1318960"
  },
  {
    "text": "stop being part of the peering for those those routes to the ip address at which point the router will no longer",
    "start": "1318960",
    "end": "1325440"
  },
  {
    "text": "be able or will no longer have that route and will no longer send traffic to that node so as soon as that node disappears um",
    "start": "1325440",
    "end": "1332960"
  },
  {
    "text": "from being able to appear traffic will no longer be sent to that node so this provides instantaneous failover in",
    "start": "1332960",
    "end": "1340400"
  },
  {
    "text": "the event of upgrades or failure and things like that so we've kind of covered um",
    "start": "1340400",
    "end": "1347120"
  },
  {
    "text": "you know kind of the highly available part of cube vip how it how it typically works typically it sits",
    "start": "1347120",
    "end": "1353120"
  },
  {
    "text": "um alongside the control plane components uh participates in leader elections and",
    "start": "1353120",
    "end": "1358400"
  },
  {
    "text": "advertises a control plane ip address to the outside world and updates in the event of failure and things like that",
    "start": "1358400",
    "end": "1364640"
  },
  {
    "text": "um taking it to the next step was effectively you know using those same",
    "start": "1364640",
    "end": "1369840"
  },
  {
    "start": "1365000",
    "end": "1365000"
  },
  {
    "text": "technologies for uh kubernetes services so there are two components that are",
    "start": "1369840",
    "end": "1375760"
  },
  {
    "text": "typically required in order to provide the functionality one is a ccm which is a cloud controller",
    "start": "1375760",
    "end": "1383120"
  },
  {
    "text": "manager and then the second is something to provide that networking magic so in this",
    "start": "1383120",
    "end": "1389039"
  },
  {
    "text": "example cube vip so what is a cloud controller well a cloud controller is effectively the",
    "start": "1389039",
    "end": "1395600"
  },
  {
    "text": "secret source um when you want to run a kubernetes cluster on your own or other people's",
    "start": "1395600",
    "end": "1401039"
  },
  {
    "text": "infrastructure so in most cloud providers it provides effectively that translation layer",
    "start": "1401039",
    "end": "1407039"
  },
  {
    "text": "between kubernetes objects and the infrastructure where it's actually running what does",
    "start": "1407039",
    "end": "1413280"
  },
  {
    "text": "that kind of mean it means that when i want to do something",
    "start": "1413280",
    "end": "1419679"
  },
  {
    "text": "in a kubernetes cluster the ccm can kind of translate that into the infrastructure of where it's running",
    "start": "1419679",
    "end": "1424799"
  },
  {
    "text": "so for instance on places like aws or google cloud and other cloud providers",
    "start": "1424799",
    "end": "1430159"
  },
  {
    "text": "um the cloud controller will allow us to speak directly to the",
    "start": "1430159",
    "end": "1436400"
  },
  {
    "text": "infrastructure of aws so if i require an external ip address an eip and things",
    "start": "1436400",
    "end": "1441679"
  },
  {
    "text": "like that that cloud controller can speak to the aws or cloud providers apis",
    "start": "1441679",
    "end": "1448159"
  },
  {
    "text": "and get that bit of information for us that's specific to that infrastructure",
    "start": "1448159",
    "end": "1453279"
  },
  {
    "text": "so a ccm for your infrastructure um is slightly different um",
    "start": "1453279",
    "end": "1458799"
  },
  {
    "text": "everybody especially on-prem has um different uh topologies uh different",
    "start": "1458799",
    "end": "1464559"
  },
  {
    "text": "network ranges different architectures and things like that so your own ccm needs to be very",
    "start": "1464559",
    "end": "1469919"
  },
  {
    "text": "flexible for a large number of different infrastructures it needs to be configurable for different networks and network ranges",
    "start": "1469919",
    "end": "1477200"
  },
  {
    "text": "um and ideally you know kind of capable of plugging into things like existing ipam or other",
    "start": "1477200",
    "end": "1482320"
  },
  {
    "text": "infrastructure management tooling so there is work that's taking place at the moment on the cluster api project um in",
    "start": "1482320",
    "end": "1489520"
  },
  {
    "text": "order of having an ipam controller which typically would allow you to you know give it the knowledge of your network uh",
    "start": "1489520",
    "end": "1495760"
  },
  {
    "text": "ranges and it will provide uh ipam functionality so um",
    "start": "1495760",
    "end": "1502240"
  },
  {
    "text": "a ccm how does it what does it do from a kubernetes services perspective so i'm doing cube ctl expose of nginx",
    "start": "1502240",
    "end": "1510640"
  },
  {
    "text": "and we're creating a load balancer service so if we look at what has been created",
    "start": "1510640",
    "end": "1516559"
  },
  {
    "text": "here we can do a get service and kind of describe it we can see here",
    "start": "1516559",
    "end": "1523279"
  },
  {
    "text": "that we have a service but it has not been given a load balance ip address so as i was saying with an eip from aws for",
    "start": "1523279",
    "end": "1530640"
  },
  {
    "text": "instance um the ccm's role is effectively to be able",
    "start": "1530640",
    "end": "1535679"
  },
  {
    "text": "to link the two together so you know kind of what what happens here",
    "start": "1535679",
    "end": "1542000"
  },
  {
    "text": "so we have cubic deployed on our workers um in this example we",
    "start": "1542000",
    "end": "1547520"
  },
  {
    "text": "could have it deployed as a daemon set or as a replica set tied to a specific set of nodes for",
    "start": "1547520",
    "end": "1552960"
  },
  {
    "text": "instance um so we have done that expose um",
    "start": "1552960",
    "end": "1559440"
  },
  {
    "text": "we have a ccm running so cube vip has its own ccm however qvi is designed in a",
    "start": "1559440",
    "end": "1564640"
  },
  {
    "text": "way that doesn't tie it to any particular ccm and i'll kind of show why in a second",
    "start": "1564640",
    "end": "1570880"
  },
  {
    "text": "but this allows uh end users to create their own ccms um and a number of people have done that",
    "start": "1570880",
    "end": "1577760"
  },
  {
    "text": "so harvester has its own ccm that cubevip will work with equinix metal has",
    "start": "1577760",
    "end": "1583039"
  },
  {
    "text": "a ccm that qvic will work with and cubic has its own ccm",
    "start": "1583039",
    "end": "1588559"
  },
  {
    "text": "and as mentioned the ccm's role really is that link between the",
    "start": "1588559",
    "end": "1593840"
  },
  {
    "text": "infrastructure and when we're talking about load balancer services here its role really",
    "start": "1593840",
    "end": "1599279"
  },
  {
    "text": "is to just update the spec and give it that load balancer ip address so how does qvi actually work with that",
    "start": "1599279",
    "end": "1606000"
  },
  {
    "text": "cubevip has what's known as a watch a watcher inside it which is code that speaks to",
    "start": "1606000",
    "end": "1612559"
  },
  {
    "text": "the kubernetes api and and can watch for changes of kubernetes objects when the ccm updates that load balancer",
    "start": "1612559",
    "end": "1619760"
  },
  {
    "text": "ip address with an ip address for the network uh cubevip will see that the ip address",
    "start": "1619760",
    "end": "1626080"
  },
  {
    "text": "has been added to the service and it will then use those technologies to advertise that to the outside world so",
    "start": "1626080",
    "end": "1632320"
  },
  {
    "text": "either through up or bgp that means that any traffic now to that load balancer ip address will be sent to",
    "start": "1632320",
    "end": "1639520"
  },
  {
    "text": "the cubevip pod which will then hit the services network and be sent to the pods",
    "start": "1639520",
    "end": "1644559"
  },
  {
    "text": "that are part of that service um so additionally um",
    "start": "1644559",
    "end": "1650640"
  },
  {
    "text": "cubevip was then kind of updated to work in a hybrid mode and this is mainly for kind of edge deployments",
    "start": "1650640",
    "end": "1656960"
  },
  {
    "text": "this allows cubevip to do both h a and services",
    "start": "1656960",
    "end": "1662080"
  },
  {
    "text": "through the control plane so they will all participate in that leader",
    "start": "1662080",
    "end": "1667840"
  },
  {
    "text": "election for for the highly available vip so uh traffic will go to the cubic",
    "start": "1667840",
    "end": "1673039"
  },
  {
    "text": "uh pods um when trying to hit the control plane but also uh",
    "start": "1673039",
    "end": "1679520"
  },
  {
    "text": "also when traffic is coming into a kubernetes service that traffic will hit those pods and be",
    "start": "1679520",
    "end": "1686640"
  },
  {
    "text": "pushed onto the services network where traffic will be then sent to those pods so effectively this allows us to",
    "start": "1686640",
    "end": "1692799"
  },
  {
    "text": "not only do ha but kubernetes services um on the control plane for kind of",
    "start": "1692799",
    "end": "1698640"
  },
  {
    "text": "hybrid and small deployments um one additional feature um that we added",
    "start": "1698640",
    "end": "1705760"
  },
  {
    "text": "was uh dhcp load balancers again this is kind of useful for edge deployments",
    "start": "1705760",
    "end": "1712480"
  },
  {
    "text": "so effectively what this allows us to do and we can see in the example there we've specified a load balancer ip",
    "start": "1712480",
    "end": "1718799"
  },
  {
    "text": "address of 0.0.0.0 which is a valid invalid ip address",
    "start": "1718799",
    "end": "1724559"
  },
  {
    "text": "but what that effectively means is that the kubernetes api will accept it as an ip address for a service",
    "start": "1724559",
    "end": "1730880"
  },
  {
    "text": "um and what actually happens here is when we specify a a service without ip",
    "start": "1730880",
    "end": "1737600"
  },
  {
    "text": "address the cubevip pod will actually do a dhcp request to the network",
    "start": "1737600",
    "end": "1743600"
  },
  {
    "text": "where it will be given a an ip address from a dhcp server on that network",
    "start": "1743600",
    "end": "1748799"
  },
  {
    "text": "uh in this example we have you know like a home router that typically provides dhcp",
    "start": "1748799",
    "end": "1754320"
  },
  {
    "text": "inside inside your house or inside an office and things like that it has given cube vip an ip address of",
    "start": "1754320",
    "end": "1761919"
  },
  {
    "text": "1.123 cubevip now will update the service with",
    "start": "1761919",
    "end": "1767760"
  },
  {
    "text": "the ip address and then use that to expose uh the service to the outside world so",
    "start": "1767760",
    "end": "1773440"
  },
  {
    "text": "we effectively get free topology information from the dhcp",
    "start": "1773440",
    "end": "1778720"
  },
  {
    "text": "server and this works great in small networks where edge environments where",
    "start": "1778720",
    "end": "1785120"
  },
  {
    "text": "we can leave all of the ipam knowledge to whatever it is that's providing dhcp functionality",
    "start": "1785120",
    "end": "1790480"
  },
  {
    "text": "inside that network so that's some of the additional functionality around cubic so we've",
    "start": "1790480",
    "end": "1795760"
  },
  {
    "text": "covered a bit of the back story we've covered how high the high availability works we've covered how",
    "start": "1795760",
    "end": "1802159"
  },
  {
    "text": "ccms work and how qbip can use that information then to expose access into the services network for",
    "start": "1802159",
    "end": "1809120"
  },
  {
    "text": "services of type load balancer so that's kind of where qvip is at the moment um from a roadmap perspective um",
    "start": "1809120",
    "end": "1816960"
  },
  {
    "start": "1814000",
    "end": "1814000"
  },
  {
    "text": "a few months ago we submitted cubevip to the cncf sandbox it has now been accepted as a sandbox uh",
    "start": "1816960",
    "end": "1824240"
  },
  {
    "text": "project which is fantastic and i'm very proud of that um",
    "start": "1824240",
    "end": "1829360"
  },
  {
    "text": "from a new features perspective we're looking at uh improved control",
    "start": "1829360",
    "end": "1834480"
  },
  {
    "text": "plane load balancing so at the moment um control plane load balancing is actually",
    "start": "1834480",
    "end": "1840159"
  },
  {
    "text": "not enabled by default um we're looking at either using ipvs or the maglev project in order to load balance across",
    "start": "1840159",
    "end": "1846720"
  },
  {
    "text": "nodes that are control plane nodes arp doesn't provide load balancing um",
    "start": "1846720",
    "end": "1853440"
  },
  {
    "text": "across multiple nodes so effectively what that means is that what whatever node is the leader receives all traffic",
    "start": "1853440",
    "end": "1860000"
  },
  {
    "text": "so we're looking at methods in order to distribute arp load balancers and",
    "start": "1860000",
    "end": "1865440"
  },
  {
    "text": "there's work that's actually happened there enhancements to bgp we've already started to work on",
    "start": "1865440",
    "end": "1871279"
  },
  {
    "text": "observability observability and monitoring ospf is an option for routing traffic",
    "start": "1871279",
    "end": "1879200"
  },
  {
    "text": "uh external dns updates for services so work has already began here where um we",
    "start": "1879200",
    "end": "1884320"
  },
  {
    "text": "can do a cubectl expose and cubevip can then update external dns providers",
    "start": "1884320",
    "end": "1891519"
  },
  {
    "text": "with both the vip and service name dot subdomain etc we've already done proof of concepts for",
    "start": "1891519",
    "end": "1898080"
  },
  {
    "text": "bind and cloudflare then additional improvements around ipv4 and ipv6 and then",
    "start": "1898080",
    "end": "1905039"
  },
  {
    "text": "a lot of work around documentation updates so all of the documentation is at",
    "start": "1905039",
    "end": "1910480"
  },
  {
    "text": "cubevip.io everything for code is all on the cubevip",
    "start": "1910480",
    "end": "1915760"
  },
  {
    "text": "repositories with that thank you very much and if you are using cube vip i hope you",
    "start": "1915760",
    "end": "1922799"
  },
  {
    "text": "enjoy it and it is doing what it is meant to be doing for you if not um please raise issues and let me",
    "start": "1922799",
    "end": "1928159"
  },
  {
    "text": "know uh thank you very much and enjoy load balancing with cubevip thank you",
    "start": "1928159",
    "end": "1935320"
  }
]