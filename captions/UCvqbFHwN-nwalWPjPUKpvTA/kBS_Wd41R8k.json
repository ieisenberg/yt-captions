[
  {
    "text": "good morning distel morning just my name is Simon and this is Anita and we're",
    "start": "50",
    "end": "5819"
  },
  {
    "text": "here to talk about continuous delivery on kubernetes that's a much simpler title than the official one up there",
    "start": "5819",
    "end": "11610"
  },
  {
    "text": "quite a mouthful I'm not going to try to pronounce it so I'm going to talk about",
    "start": "11610",
    "end": "17359"
  },
  {
    "text": "the journey that we went on through looking at all the different options in continuous delivery a new map what",
    "start": "17359",
    "end": "24900"
  },
  {
    "text": "worked for us and what didn't the neatest thing going to talk about the solution that we ultimately came up with which we have since open-source so as",
    "start": "24900",
    "end": "34110"
  },
  {
    "text": "you might be able to tell from our accents a lot but we're from Australia so thanks for having us here and this is",
    "start": "34110",
    "end": "41670"
  },
  {
    "text": "a picture of the Sydney Opera House for you but it is a top-down picture of the Sydney Opera House because we're from",
    "start": "41670",
    "end": "48090"
  },
  {
    "text": "the map we do high-definition aerial photography from aeroplanes none of this satellite garbage sorry",
    "start": "48090",
    "end": "57809"
  },
  {
    "text": "and then we make that available online through various services and we do a lot of 3d modeling and machine learning",
    "start": "57809",
    "end": "63719"
  },
  {
    "text": "around that as well we're not in Europe though unfortunately yet which is a shame because I'd love to see some of",
    "start": "63719",
    "end": "70170"
  },
  {
    "text": "that amazing European architecture up there like a lot of content providers we",
    "start": "70170",
    "end": "76500"
  },
  {
    "text": "store terabytes of data in the cloud in different regions depending on where we capture that data we run kubernetes in",
    "start": "76500",
    "end": "84479"
  },
  {
    "text": "each of those regions and we run micro services in those clusters are exposing a whole bunch of different api's we also",
    "start": "84479",
    "end": "92579"
  },
  {
    "text": "run multiple clusters in each region for things like testing environments and developer playgrounds and we do",
    "start": "92579",
    "end": "98369"
  },
  {
    "text": "continuous delivery we deploy software out multiple times a day so as you can",
    "start": "98369",
    "end": "103470"
  },
  {
    "text": "imagine this is a lot of services that we need to manage and deploy quba Dinis doesn't really help us with",
    "start": "103470",
    "end": "110399"
  },
  {
    "text": "this it specifically says that on their web page and it says that CI CD",
    "start": "110399",
    "end": "116460"
  },
  {
    "text": "workflows are determined by organization cultures preferences as well as the technical requirements which is a fancy",
    "start": "116460",
    "end": "122670"
  },
  {
    "text": "way of saying that there's no one-size-fits-all solution for this stuff that's a bit of a shame because it",
    "start": "122670",
    "end": "127680"
  },
  {
    "text": "is pretty easy to set up a kubernetes cluster these days but setting up a CD pipeline to go along with it",
    "start": "127680",
    "end": "133430"
  },
  {
    "text": "we've found this not so easy so we started off a lot like most people",
    "start": "133430",
    "end": "139220"
  },
  {
    "text": "probably do we use keep control to deploy our pods out we define a",
    "start": "139220",
    "end": "145159"
  },
  {
    "text": "container in a configuration file use the latest tag and to play that out there using the latest tags not such a",
    "start": "145159",
    "end": "152239"
  },
  {
    "text": "great idea we found that so we started parameterizing our configuration files",
    "start": "152239",
    "end": "158569"
  },
  {
    "text": "storing version numbers inside those we use get hashes for our version numbers we're talking about deploying internally",
    "start": "158569",
    "end": "166129"
  },
  {
    "text": "here so we don't need the overhead of semver but we have to manage that per cluster because they're all running",
    "start": "166129",
    "end": "171950"
  },
  {
    "text": "different versions and this is all very manual so we want to automate this with a CD pipeline here illustrated as a",
    "start": "171950",
    "end": "179390"
  },
  {
    "text": "series of verification steps that our software passes through in its way on",
    "start": "179390",
    "end": "184400"
  },
  {
    "text": "its way to production and that's just to ensure that it's fit for purpose the left side of this pipeline is well",
    "start": "184400",
    "end": "191720"
  },
  {
    "text": "understood people have been doing continuous integration for quite some time doing builds unit tests and getting",
    "start": "191720",
    "end": "198919"
  },
  {
    "text": "those feedback loops in place but the right-hand side the actual deployment out to your production environments",
    "start": "198919",
    "end": "204849"
  },
  {
    "text": "doing verification there it's not so well understood and that's what we're going to focus on today a lot of",
    "start": "204849",
    "end": "211700"
  },
  {
    "text": "organizations already have their own build service such as Jenkins there are plenty of other good ones as well so",
    "start": "211700",
    "end": "217910"
  },
  {
    "text": "here's a high-level view of a typical CD pipeline just looking at all the main actors involved so we have our",
    "start": "217910",
    "end": "223879"
  },
  {
    "text": "developers pushing code to a git repository Jenkins pulls that in builds it creates",
    "start": "223879",
    "end": "229430"
  },
  {
    "text": "a container image pushes that out to a container registry now we need to set up",
    "start": "229430",
    "end": "234560"
  },
  {
    "text": "some kind of workflow in Jenkins in order to do the deployment and it can do that using queue control or talking",
    "start": "234560",
    "end": "240019"
  },
  {
    "text": "directly to the API server we need to set some access controls in Jenkins but",
    "start": "240019",
    "end": "246019"
  },
  {
    "text": "that's okay it's part of our infrastructure so we trust it so does",
    "start": "246019",
    "end": "251359"
  },
  {
    "text": "the deployment and then our clusters ultimately pulling the container image and create the pods but we need to set",
    "start": "251359",
    "end": "257900"
  },
  {
    "text": "up with Jenkins server and maintain that so what we're calling these managed",
    "start": "257900",
    "end": "263960"
  },
  {
    "text": "build tools these things are becoming a lot more popular because they're just so easy to get up and running we use circle CI but there",
    "start": "263960",
    "end": "270229"
  },
  {
    "text": "are plenty of other really good ones out there so to get up and running you just commit some configuration to your git",
    "start": "270229",
    "end": "276290"
  },
  {
    "text": "repo you link your repo to the tool and you're off and away the problem here now",
    "start": "276290",
    "end": "282290"
  },
  {
    "text": "is that when you want to set up the similar sort of workflows to do a cube control to play into our clusters we",
    "start": "282290",
    "end": "288949"
  },
  {
    "text": "need to expose our API servers or the control plane of our clusters essentially to the world because these",
    "start": "288949",
    "end": "295550"
  },
  {
    "text": "services run in the cloud we also need to store those access credentials in these third-party services now this is",
    "start": "295550",
    "end": "302570"
  },
  {
    "text": "not ideal because these are our production services potentially containing sensitive customer data so",
    "start": "302570",
    "end": "310729"
  },
  {
    "text": "let's look at some other options now normally I'd run through these in a bit more detail but I don't at the time I'm",
    "start": "310729",
    "end": "316100"
  },
  {
    "text": "going to skim through them but generally these are all very good tools they just happen to focus on",
    "start": "316100",
    "end": "322699"
  },
  {
    "text": "different things that didn't quite fit our requirements but I will stop on this one because this is quite close to what",
    "start": "322699",
    "end": "328940"
  },
  {
    "text": "we were after if we flux you may have heard of it here our pipeline is",
    "start": "328940",
    "end": "334220"
  },
  {
    "text": "building container images pushing those to the container registry now we have some sort of config updater that's",
    "start": "334220",
    "end": "339620"
  },
  {
    "text": "monitoring their container registry for changes and when it detects those it pushes the configuration changes out to",
    "start": "339620",
    "end": "346550"
  },
  {
    "text": "a git repo which is a configuration stored there for our cluster another",
    "start": "346550",
    "end": "352310"
  },
  {
    "text": "process running inside the cluster of the player then the text layers changes out there pulls the config in and",
    "start": "352310",
    "end": "357919"
  },
  {
    "text": "initiates the deployment so let's talk a little bit about this approach you've probably heard it as well as been",
    "start": "357919",
    "end": "363050"
  },
  {
    "text": "mentioned a few times this get ops idea and there's a lot of advantages to using",
    "start": "363050",
    "end": "368960"
  },
  {
    "text": "git ops you've got all of your cluster changes in config history in history and",
    "start": "368960",
    "end": "376160"
  },
  {
    "text": "you can restore your cluster to any point in time that our experience of storing version numbers specifically in",
    "start": "376160",
    "end": "382820"
  },
  {
    "text": "source control is that it is very noisy and it tends to drown out the rest of your configuration history which is",
    "start": "382820",
    "end": "389330"
  },
  {
    "text": "arguably a lot more important so we're not against storing configuration in",
    "start": "389330",
    "end": "394669"
  },
  {
    "text": "source control we do that we store a very simplified single version of",
    "start": "394669",
    "end": "400080"
  },
  {
    "text": "our application configuration alongside the source code and we do that by removing all the cluster specifics from",
    "start": "400080",
    "end": "406740"
  },
  {
    "text": "it by using things like kubernetes DNS and external services allow you to do",
    "start": "406740",
    "end": "412110"
  },
  {
    "text": "that so if you're not again storing your",
    "start": "412110",
    "end": "417120"
  },
  {
    "text": "configuration in source control how do you deal with things like version number history and rollback so rollback first",
    "start": "417120",
    "end": "424259"
  },
  {
    "text": "we find that if we're delivering very frequently and doing small updates that",
    "start": "424259",
    "end": "431099"
  },
  {
    "text": "rollback is something that we very rarely need to do we tend to roll",
    "start": "431099",
    "end": "436440"
  },
  {
    "text": "forward when there's a problem that's gone out to production and because it's a small change we generally know what",
    "start": "436440",
    "end": "441960"
  },
  {
    "text": "what the issue is when it's gone out there so we'll cut a new release push it through our CD pipeline which is",
    "start": "441960",
    "end": "448590"
  },
  {
    "text": "completely automated and then get a fix out into production if your pipeline is",
    "start": "448590",
    "end": "454800"
  },
  {
    "text": "manual in any sort of way then that's going to be a lot harder to do because the turnaround time is not so great so",
    "start": "454800",
    "end": "461310"
  },
  {
    "text": "again we're not saying the rollback isn't necessary we just don't need to necessarily optimize for that so we",
    "start": "461310",
    "end": "468210"
  },
  {
    "text": "would tend to rollback by cutting a new release on an older commit and then just",
    "start": "468210",
    "end": "474210"
  },
  {
    "text": "pushing that through our CD pipeline again because it's all automated we can turn around that very quickly",
    "start": "474210",
    "end": "481370"
  },
  {
    "text": "finally the history history we store inside the cluster itself the version",
    "start": "482270",
    "end": "487740"
  },
  {
    "text": "history and we find that that's okay the main problem with doing that approach is",
    "start": "487740",
    "end": "493349"
  },
  {
    "text": "if you did happen to lose that information somehow if your cluster failed then if you've kind of lost that",
    "start": "493349",
    "end": "500909"
  },
  {
    "text": "history but we store all of our our master branches represent the current version of all our software so it's easy",
    "start": "500909",
    "end": "506729"
  },
  {
    "text": "to restore so none of these tools really fitted what we were after so we kind of",
    "start": "506729",
    "end": "512310"
  },
  {
    "text": "went back to basics and said okay how can we create a really simple CD pipeline and what would that look like",
    "start": "512310",
    "end": "520399"
  },
  {
    "text": "so first let's define some goals for this pipeline we want to be able to bring our own integration tool so these",
    "start": "520399",
    "end": "526890"
  },
  {
    "text": "are well known solve problems right people have been doing integration continuous integration for some time",
    "start": "526890",
    "end": "533920"
  },
  {
    "text": "we don't want to have to use any additional infrastructure so we already",
    "start": "533920",
    "end": "539439"
  },
  {
    "text": "have our build build server we have our container registry and we have our kubernetes cluster that should be enough",
    "start": "539439",
    "end": "546819"
  },
  {
    "text": "for us to build a pipeline we want to utilize existing kubernetes concepts as much as possible right so we're invested",
    "start": "546819",
    "end": "553480"
  },
  {
    "text": "in the platform we want to make whatever use of that we can to our advantage and we want to focus on supporting a full",
    "start": "553480",
    "end": "560379"
  },
  {
    "text": "automation although we do want to be able to allow manual steps where needed but we're aiming for that full automation and finally we want to",
    "start": "560379",
    "end": "566980"
  },
  {
    "text": "support best practices in the industry so we want our environments to be secure we've all wanna be able to do verifications as we do our deployments",
    "start": "566980",
    "end": "574269"
  },
  {
    "text": "through things like Bluegreen deployments we want to be able to solve urgent history and rollback and we want good visibility into what's going on in",
    "start": "574269",
    "end": "581169"
  },
  {
    "text": "our cluster so we want to be able to see what versions of our applications are running when rollouts are happening and",
    "start": "581169",
    "end": "587769"
  },
  {
    "text": "of course when failures occur so that we can respond to them so a simple pipeline",
    "start": "587769",
    "end": "592809"
  },
  {
    "text": "might look something like this so again we're building container images we're pushing those to a container registry",
    "start": "592809",
    "end": "598019"
  },
  {
    "text": "our cluster is pulling in the images as well in order to create pods the",
    "start": "598019",
    "end": "603249"
  },
  {
    "text": "difference here is we're now pushing version information directly into the container registry and we have a service",
    "start": "603249",
    "end": "609639"
  },
  {
    "text": "running inside the cluster that's monitoring the container registry for changes and initiating deployments when",
    "start": "609639",
    "end": "615790"
  },
  {
    "text": "it detects those and because this is a service running there we can add a lot more smarts to it as well so we can",
    "start": "615790",
    "end": "621850"
  },
  {
    "text": "start we can start doing verification steps as part of the deployments you can store the version history that we're",
    "start": "621850",
    "end": "627519"
  },
  {
    "text": "talking about we can also expose an API so that we can interrogate the state of",
    "start": "627519",
    "end": "632559"
  },
  {
    "text": "the cluster and find out what's going on so the advantages of this approach is that we don't need to set up any",
    "start": "632559",
    "end": "639129"
  },
  {
    "text": "additional resources in particular we don't need to access resources such as our cluster needing to access to get",
    "start": "639129",
    "end": "644649"
  },
  {
    "text": "repo this which is a bit of a problem when you're dealing with private repos we don't need all these separate config",
    "start": "644649",
    "end": "651279"
  },
  {
    "text": "repos around right we try to store a single version of our application configuration alongside the source code",
    "start": "651279",
    "end": "657129"
  },
  {
    "text": "and then that met also matches the releases as they go out so it's a simplified configuration and this whole",
    "start": "657129",
    "end": "663339"
  },
  {
    "text": "thing is easy to set up and manage so now we're going to talk about our",
    "start": "663339",
    "end": "668590"
  },
  {
    "text": "realization of this simple CD pipeline so tonight it's going to talk about that",
    "start": "668590",
    "end": "674320"
  },
  {
    "text": "and remember we've open-sourced out everything that she's talking about so please go away and do try this at home",
    "start": "674320",
    "end": "679710"
  },
  {
    "text": "Thank You Simon a CD pipeline that",
    "start": "679710",
    "end": "685480"
  },
  {
    "text": "easily integrates into your existing infrastructure sounds great isn't it and what would be a better way to",
    "start": "685480",
    "end": "691900"
  },
  {
    "text": "implement the CD solution on communities infrastructure then use intrinsic communities principle and leverage on",
    "start": "691900",
    "end": "697720"
  },
  {
    "text": "its strengths non right that's exactly what we thought enter the world of container version manager it does",
    "start": "697720",
    "end": "703330"
  },
  {
    "text": "exactly that it is build using communities extension point custom resource definition and custom",
    "start": "703330",
    "end": "709060"
  },
  {
    "text": "controller it also heavily relies on communities abstractions such as deployment config maps and many more to",
    "start": "709060",
    "end": "715930"
  },
  {
    "text": "manage and maintain the components of CD pipeline thinking about it more we should probably rename this solution",
    "start": "715930",
    "end": "721780"
  },
  {
    "text": "that we are calling container version manager to cube CD or even K CD but we'll think about that so let's see what",
    "start": "721780",
    "end": "729610"
  },
  {
    "text": "container version really is it defines set of rules for managing container version what you're looking at here is",
    "start": "729610",
    "end": "736540"
  },
  {
    "text": "is a CV spec example CV short for container version and what that declares",
    "start": "736540",
    "end": "741700"
  },
  {
    "text": "is that my app container of all the workload that's matching the selection",
    "start": "741700",
    "end": "746770"
  },
  {
    "text": "criteria should always be from image repository CVM example and that it",
    "start": "746770",
    "end": "752050"
  },
  {
    "text": "should be running a container version tag - demo environment tag and that this",
    "start": "752050",
    "end": "757780"
  },
  {
    "text": "state is at max allows to be out of date by 30 seconds and your cluster works",
    "start": "757780",
    "end": "762820"
  },
  {
    "text": "towards achieving that state and it covers all the workload so meaning all",
    "start": "762820",
    "end": "767920"
  },
  {
    "text": "up we won't work load and also batch workload including cronin jobs so let's",
    "start": "767920",
    "end": "774730"
  },
  {
    "text": "look at what makes this state achievable there are three components as a part of",
    "start": "774730",
    "end": "779770"
  },
  {
    "text": "the solution that works towards achieving that state we have got container version controller container",
    "start": "779770",
    "end": "785200"
  },
  {
    "text": "registry sinker in a set of command lines tool for you to easily integrate it into your existing CR infrastructure",
    "start": "785200",
    "end": "791200"
  },
  {
    "text": "and this is the high-level architecture that you are seeing controller on the left side is responsible for managing",
    "start": "791200",
    "end": "797410"
  },
  {
    "text": "and maintaining your CD pipeline and the thinker the one that's sitting in the middle that we have more",
    "start": "797410",
    "end": "802790"
  },
  {
    "text": "than one copy half they are responsible for managing and maintaining your workloads and making sure that they are",
    "start": "802790",
    "end": "809180"
  },
  {
    "text": "up to date so let's dive more into all these components specifically first off",
    "start": "809180",
    "end": "817040"
  },
  {
    "text": "controller controller reacts to any changes into CV resource and handle",
    "start": "817040",
    "end": "822560"
  },
  {
    "text": "handle them appropriately and just like any other custom controller of kubernetes it uses informal factory for",
    "start": "822560",
    "end": "829190"
  },
  {
    "text": "change notification and this is a snippet from informer Factory handle",
    "start": "829190",
    "end": "835010"
  },
  {
    "text": "that we have and this would probably be very familiar to all of you who have written custom controller at one point",
    "start": "835010",
    "end": "841370"
  },
  {
    "text": "but this just to illustrate that we are using informal factory for optimization",
    "start": "841370",
    "end": "847880"
  },
  {
    "text": "point of views the controller is also responsible for creating and updating CR",
    "start": "847880",
    "end": "853010"
  },
  {
    "text": "sinkers and it's very smart in a way that it deli it passes the onus of maintaining the sinkers to kubernetes by",
    "start": "853010",
    "end": "859760"
  },
  {
    "text": "creating a deployment for it as you can see here I'll add it in the section it also keeps the owner references to the",
    "start": "859760",
    "end": "866300"
  },
  {
    "text": "CV resource thereby letting kubernetes manage these thinkers but CV resource so",
    "start": "866300",
    "end": "872990"
  },
  {
    "text": "to illustrate more if a CV resource is deleted communities will implicitly drop",
    "start": "872990",
    "end": "878480"
  },
  {
    "text": "these thinkers and now little things like that is what's making these solution more native to kubernetes and",
    "start": "878480",
    "end": "885070"
  },
  {
    "text": "and letting it manage itself and it",
    "start": "885070",
    "end": "891080"
  },
  {
    "text": "that's not it it also provides visibility on the version status or at your cluster level that is you can come",
    "start": "891080",
    "end": "896750"
  },
  {
    "text": "in and interrogate for the versions of your resources that you are running in your cluster and controller would be",
    "start": "896750",
    "end": "902990"
  },
  {
    "text": "able to provide more detailed information on that so just summarizing",
    "start": "902990",
    "end": "908300"
  },
  {
    "text": "the controller here we're sitting right on the Left highlighted with the red mark and it deals with the API server",
    "start": "908300",
    "end": "914920"
  },
  {
    "text": "handles any changes into CV resources and by doing so it implicitly managing",
    "start": "914920",
    "end": "920270"
  },
  {
    "text": "sinkers sinkers they are responsible to ensure",
    "start": "920270",
    "end": "926390"
  },
  {
    "text": "that the container state has declared by severe source is always met and they are",
    "start": "926390",
    "end": "931520"
  },
  {
    "text": "the components it in the center it does so by pulling into or talking to container registry what it",
    "start": "931520",
    "end": "940220"
  },
  {
    "text": "does is it pulls into container registry looking for the version of the container that's tagged with the specified tag and",
    "start": "940220",
    "end": "946639"
  },
  {
    "text": "once it finds the version it compares it with all the versions that matching the selector expressions and any discrepancy",
    "start": "946639",
    "end": "954319"
  },
  {
    "text": "in this version check least to our rollout workflow so first off you would",
    "start": "954319",
    "end": "960769"
  },
  {
    "text": "like to validate what we are deploying and ensure that we are happy with it validations could be validations could",
    "start": "960769",
    "end": "967910"
  },
  {
    "text": "be very open-ended some of you would like to verify make sure that there isn't any code regression or quality",
    "start": "967910",
    "end": "974810"
  },
  {
    "text": "checks things like smoke tests or even looking at container vulnerability scans or verifying the signatures of the",
    "start": "974810",
    "end": "981589"
  },
  {
    "text": "container so there isn't an into what what individual or organization would",
    "start": "981589",
    "end": "987350"
  },
  {
    "text": "like to validate the image on and that's why we have hooks for validation that you could plug in and in a successful",
    "start": "987350",
    "end": "996079"
  },
  {
    "text": "validation would lead to a roll out operation so as a part of roll out what",
    "start": "996079",
    "end": "1003670"
  },
  {
    "text": "happens is we the part spec of the selected work workloads are patched we",
    "start": "1003670",
    "end": "1008709"
  },
  {
    "text": "use strategic merge as a batch strategy to allow for any external changes into parts back external changes could be in",
    "start": "1008709",
    "end": "1016630"
  },
  {
    "text": "terms of replica count or even resources the various conflicts that could be",
    "start": "1016630",
    "end": "1021790"
  },
  {
    "text": "changed but it shouldn't modify anything else other than version and the rollout",
    "start": "1021790",
    "end": "1028808"
  },
  {
    "text": "as part of the rule out the Native community strategies are honored because the sinkers doesn't perform the rollout",
    "start": "1028809",
    "end": "1035650"
  },
  {
    "text": "itself but passes the instruction to control panel of the cluster which performs the rollout and as a result all",
    "start": "1035650",
    "end": "1041949"
  },
  {
    "text": "the native strategies are honored if unspecified obviously default is assumed",
    "start": "1041949",
    "end": "1048720"
  },
  {
    "text": "so native simple rollout strategies are are noise but what about when we talk",
    "start": "1048720",
    "end": "1055120"
  },
  {
    "text": "about complex roll out roll out like canary and Bluegreen deployments so it's",
    "start": "1055120",
    "end": "1060429"
  },
  {
    "text": "possible to use its CV manager solution to realize these sort of deployment strategies however in some",
    "start": "1060429",
    "end": "1066400"
  },
  {
    "text": "cases there will be there may be a manual intervention that would be required we are actively working on",
    "start": "1066400",
    "end": "1071470"
  },
  {
    "text": "improving that and we will look at these a bit more detail so this is an example",
    "start": "1071470",
    "end": "1077650"
  },
  {
    "text": "of a connealy deployment that would look like here the blue is the is is a",
    "start": "1077650",
    "end": "1083440"
  },
  {
    "text": "different deployment and see and green shown in Green is a green deployment using two different cv resources to",
    "start": "1083440",
    "end": "1090880"
  },
  {
    "text": "match to match to the corresponding color of the deployment would allow for a separate version on these two",
    "start": "1090880",
    "end": "1097240"
  },
  {
    "text": "containers and then it's up to managing the the traffic or the number of parts under your deployment to realize",
    "start": "1097240",
    "end": "1103660"
  },
  {
    "text": "connealy deployment and this step of managing a number of parts is currently",
    "start": "1103660",
    "end": "1108960"
  },
  {
    "text": "manual as as I mentioned earlier and this is another Bluegreen names",
    "start": "1108960",
    "end": "1115570"
  },
  {
    "text": "deployment strategy where the segregation is that namespace level so your services and whole solution is",
    "start": "1115570",
    "end": "1121750"
  },
  {
    "text": "basically replicated at namespace level you should switch around from your DNS",
    "start": "1121750",
    "end": "1128380"
  },
  {
    "text": "records based on what namespaces in production and what's on the test and using similar approach can be used to",
    "start": "1128380",
    "end": "1135910"
  },
  {
    "text": "realize these sort of deployment we do however have an automated solution for",
    "start": "1135910",
    "end": "1141040"
  },
  {
    "text": "Bluegreen deployments but the deployment only support at this point at service level so as you can see in this figure",
    "start": "1141040",
    "end": "1148240"
  },
  {
    "text": "this service see blue the blue and green sea services using green and blue and",
    "start": "1148240",
    "end": "1154150"
  },
  {
    "text": "deployments all you have to do is opt in for a strategy in your CVD source",
    "start": "1154150",
    "end": "1160360"
  },
  {
    "text": "configuration saying that just blue blue green strategy you are adopting to not a",
    "start": "1160360",
    "end": "1165790"
  },
  {
    "text": "default strategy and and provide your very container images that will perform",
    "start": "1165790",
    "end": "1171100"
  },
  {
    "text": "the validation so that would be the container that has your system test and it will automatically update your test",
    "start": "1171100",
    "end": "1178800"
  },
  {
    "text": "workloads perform the tests are successful successful test results would",
    "start": "1178800",
    "end": "1184930"
  },
  {
    "text": "lead to flip of the switch where your test service will not become live so this is very standard Bluegreen",
    "start": "1184930",
    "end": "1190720"
  },
  {
    "text": "deployment it just very first level implementation that we have done for",
    "start": "1190720",
    "end": "1196270"
  },
  {
    "text": "blue green but we are actively working on the so um mistakes happens we all make",
    "start": "1196270",
    "end": "1203900"
  },
  {
    "text": "mistakes and they are interesting what happens when failure happens when a when",
    "start": "1203900",
    "end": "1208940"
  },
  {
    "text": "a rollout fails excuse me Oh we're all forward we fix our issues and we roll forward that's exactly what we",
    "start": "1208940",
    "end": "1215300"
  },
  {
    "text": "do at near map and CV Manager is also written with that philosophy in mind however um having said that it is it",
    "start": "1215300",
    "end": "1223250"
  },
  {
    "text": "does understood that roll out doesn't like roll forward doesn't fit all the use cases so optional roll back is also",
    "start": "1223250",
    "end": "1229430"
  },
  {
    "text": "supported wherein you could opt in for a roll back and if a roll roll out fails then it would roll back using the",
    "start": "1229430",
    "end": "1236120"
  },
  {
    "text": "historical version information that it has available but more importantly we notify for a fail on a failed not failed",
    "start": "1236120",
    "end": "1243980"
  },
  {
    "text": "rollout we notify and that could be plugged in into notification in any of your notification engine slack or pager",
    "start": "1243980",
    "end": "1250370"
  },
  {
    "text": "duty or any any of the system that you use so that's handy too to come in and",
    "start": "1250370",
    "end": "1256460"
  },
  {
    "text": "manually intervene should should the need be so just want to summarize on",
    "start": "1256460",
    "end": "1261980"
  },
  {
    "text": "sinkers these are the components sitting in in in the middle there would be as many thinkers a husband know for as many",
    "start": "1261980",
    "end": "1269060"
  },
  {
    "text": "see video sources you have the interface with the container registry and talk to API server and by doing that they",
    "start": "1269060",
    "end": "1275210"
  },
  {
    "text": "implicitly manage all you workloads CI twos these are the commands shown on the",
    "start": "1275210",
    "end": "1282350"
  },
  {
    "text": "right they they just set up a Dockers command line that you plug in into your",
    "start": "1282350",
    "end": "1287450"
  },
  {
    "text": "bash script of your choice of Co infrastructure and it's as simple as just calling CV manager CR tags add and",
    "start": "1287450",
    "end": "1294980"
  },
  {
    "text": "details of your image manifest so a simple pluggable CD pipeline should be",
    "start": "1294980",
    "end": "1301850"
  },
  {
    "text": "low maintenance and easy to install right we have got it down to the-- simple one-step install only which is",
    "start": "1301850",
    "end": "1308630"
  },
  {
    "text": "just about installing CV manager defining your CV resources for all the workloads and integrating into your",
    "start": "1308630",
    "end": "1315440"
  },
  {
    "text": "existing CI pipeline from this point onward the this the components of this",
    "start": "1315440",
    "end": "1321020"
  },
  {
    "text": "pipeline works towards achieving the cluster itself work towards achieving",
    "start": "1321020",
    "end": "1326360"
  },
  {
    "text": "this declared state itself and they also manage and maintain themselves so",
    "start": "1326360",
    "end": "1332020"
  },
  {
    "text": "periodically there didn't be any manual intervention required and they will adapt to the need",
    "start": "1332020",
    "end": "1338000"
  },
  {
    "text": "as it would be during the lifecycle and what that leads to is is a self managed",
    "start": "1338000",
    "end": "1344960"
  },
  {
    "text": "self feeling CI CD pipeline where heavy duty is done by communities infrastructure yes this infrastructure",
    "start": "1344960",
    "end": "1351440"
  },
  {
    "text": "that we all love so much so there are several other benefits to using this",
    "start": "1351440",
    "end": "1357680"
  },
  {
    "text": "it's obviously self managed as we talked about and low maintenance this approach allows for a clear separation of",
    "start": "1357680",
    "end": "1364700"
  },
  {
    "text": "concerns at all level the cluster again is responsible for managing the updates",
    "start": "1364700",
    "end": "1371630"
  },
  {
    "text": "or deployments and even the components of CD pipeline are clearly their",
    "start": "1371630",
    "end": "1376790"
  },
  {
    "text": "responsibility is clearly defined and separated and what that leads to us is leads us to his reduced security risk",
    "start": "1376790",
    "end": "1383720"
  },
  {
    "text": "and allows the possibility of using external we provided CI CD tool where",
    "start": "1383720",
    "end": "1390320"
  },
  {
    "text": "you don't have to expose your control panel or API server to external entities",
    "start": "1390320",
    "end": "1397130"
  },
  {
    "text": "it's completely open source we welcome feedback in contribution it's a very",
    "start": "1397130",
    "end": "1402170"
  },
  {
    "text": "native solution as I touched upon before yeah the we do capture monitoring we do",
    "start": "1402170",
    "end": "1408950"
  },
  {
    "text": "monitor the CD pipelines so they are various stats available and it provides more visibility into what's happening on",
    "start": "1408950",
    "end": "1416000"
  },
  {
    "text": "your cluster in terms of coercion updates so how do you maintain versions",
    "start": "1416000",
    "end": "1423200"
  },
  {
    "text": "of your service to you do you have a single point of contact where you come in and ask for the current version of",
    "start": "1423200",
    "end": "1429440"
  },
  {
    "text": "all your services or or even look at the historical records or do you manage it externally it varies organization to",
    "start": "1429440",
    "end": "1438260"
  },
  {
    "text": "organization but at near map we think it's the responsibility of the cluster to maintain that information and tell us",
    "start": "1438260",
    "end": "1444680"
  },
  {
    "text": "as in what version it is currently running and what are the previous versions that it has run before so",
    "start": "1444680",
    "end": "1451880"
  },
  {
    "text": "that's why controller or CV Manager exposes several rest interfaces to explore these information",
    "start": "1451880",
    "end": "1458500"
  },
  {
    "text": "these are couple of interfaces that we have that allows you to see the current versions of your cluster there are Jason",
    "start": "1458500",
    "end": "1465860"
  },
  {
    "text": "in HTM formats HTML is primarily provide to integrate into your monitoring system",
    "start": "1465860",
    "end": "1472180"
  },
  {
    "text": "should you have one and as mentioned early it's an opt-in feature for release",
    "start": "1472180",
    "end": "1477580"
  },
  {
    "text": "history that you can obtain it uses conflict map to maintain the real know the previous real release history and",
    "start": "1477580",
    "end": "1484990"
  },
  {
    "text": "this information is exposed or it's just interfaces for your use we also capture",
    "start": "1484990",
    "end": "1492040"
  },
  {
    "text": "a variety of starts including successful deployments and variety of failure failure deployment attempts and we also",
    "start": "1492040",
    "end": "1498610"
  },
  {
    "text": "kept our sensor several even notifications and service check from all these components our CD pipelines or",
    "start": "1498610",
    "end": "1505090"
  },
  {
    "text": "controller sinkers and what that all leads to leads us to is this beautiful thing called V we call deployment",
    "start": "1505090",
    "end": "1511930"
  },
  {
    "text": "dashboard that keeps reminding us how frictionless deployment can be and how",
    "start": "1511930",
    "end": "1518680"
  },
  {
    "text": "productive we are but we couldn't do anything about the friction of the desk chair unfortunately so you might wonder",
    "start": "1518680",
    "end": "1526720"
  },
  {
    "text": "if this approach would scale to demand because they could if you are running thousands of services then there might",
    "start": "1526720",
    "end": "1533200"
  },
  {
    "text": "be equal in number of sinkers that would run in your cluster we monitored the",
    "start": "1533200",
    "end": "1538450"
  },
  {
    "text": "resource utilization of these paths and they were very small this approach has worked really well for us we will we",
    "start": "1538450",
    "end": "1545680"
  },
  {
    "text": "would we think that it would work for very busy clusters as well but we would",
    "start": "1545680",
    "end": "1550750"
  },
  {
    "text": "like to see what happens when you when you guys try and see we do would like to",
    "start": "1550750",
    "end": "1556090"
  },
  {
    "text": "hear definitely we'd like to hear from you and see how how it goes so I can't",
    "start": "1556090",
    "end": "1562180"
  },
  {
    "text": "finish off before talking about the best practices using this solution we think that much to master is a is a is one of",
    "start": "1562180",
    "end": "1569200"
  },
  {
    "text": "the best practice that should be used when using CV Manager because it's a well understood trigger and keeps your",
    "start": "1569200",
    "end": "1574690"
  },
  {
    "text": "master branch a replica of your release and like us should you use should you",
    "start": "1574690",
    "end": "1581980"
  },
  {
    "text": "keep your config alongside of source code that's a very good way to to go back to a previous version if at all",
    "start": "1581980",
    "end": "1588550"
  },
  {
    "text": "that that need arise and also for it for your reference as well if you're not",
    "start": "1588550",
    "end": "1595000"
  },
  {
    "text": "distributing your services to external third parties then we recommend using git because a more readable versions like",
    "start": "1595000",
    "end": "1602170"
  },
  {
    "text": "somewhere or any other naming schemes are very parallel to get versions the",
    "start": "1602170",
    "end": "1607210"
  },
  {
    "text": "only benefit they provide is readability which probably is not that relevant if you are releasing very frequently like",
    "start": "1607210",
    "end": "1612880"
  },
  {
    "text": "us we do recommend using dashboard it gives us more insights into what's happening and your CD pipeline and can",
    "start": "1612880",
    "end": "1620800"
  },
  {
    "text": "tell you the sub can tell you the strength of your pipeline and obviously no CD pipeline is fully automated until",
    "start": "1620800",
    "end": "1628090"
  },
  {
    "text": "your services and applications are fully tested and automated and I do want to",
    "start": "1628090",
    "end": "1636250"
  },
  {
    "text": "mention that this solution is simple enough that even in our cluster CV Manager updates itself on which to",
    "start": "1636250",
    "end": "1642160"
  },
  {
    "text": "master CV Manager is completely open",
    "start": "1642160",
    "end": "1648130"
  },
  {
    "text": "source under available under MIT license the instructions to get you started is available on the blog near map are you",
    "start": "1648130",
    "end": "1655690"
  },
  {
    "text": "oh it's probably very easy to find but the last path is CVM intro and we also",
    "start": "1655690",
    "end": "1661690"
  },
  {
    "text": "have a sample example based on this solution that would give you an idea of the kind of configuration that's required and there is a video to get you",
    "start": "1661690",
    "end": "1669370"
  },
  {
    "text": "started that's also attached to the blog but Simon here will give you guys a",
    "start": "1669370",
    "end": "1674920"
  },
  {
    "text": "quick rundown and demo of the application ok great Thank You Sameera so we're running out of time so I'm",
    "start": "1674920",
    "end": "1682120"
  },
  {
    "text": "gonna try and do a very quick demo here just to show you how easy it is to get a CD pipeline up and running so I've",
    "start": "1682120",
    "end": "1690070"
  },
  {
    "text": "gotten a simple application here communities configuration with that we've got a deployments here and we've",
    "start": "1690070",
    "end": "1695950"
  },
  {
    "text": "got a our container image with the version as well we've also got a service",
    "start": "1695950",
    "end": "1701110"
  },
  {
    "text": "and an ingress in here just so we can access the application so if we look at",
    "start": "1701110",
    "end": "1706620"
  },
  {
    "text": "kubernetes what that looks like at the moment we're running a couple of pods in our dashboard and then the application",
    "start": "1706620",
    "end": "1713650"
  },
  {
    "text": "itself so it's just a simple echo service that goes back what we put in the URL and there's a dancing monkey for",
    "start": "1713650",
    "end": "1718930"
  },
  {
    "text": "some reason that's all good so we wanted to update our application",
    "start": "1718930",
    "end": "1725080"
  },
  {
    "text": "say we wanted to I don't know make the the message that we echo back uppercase",
    "start": "1725080",
    "end": "1731770"
  },
  {
    "text": "so normally then I would have to go and rebuild the image push that to a container registry - or cube control",
    "start": "1731770",
    "end": "1736840"
  },
  {
    "text": "apply all that stuff and I get the new version but that's very manual so we want to automate that by so that every",
    "start": "1736840",
    "end": "1744100"
  },
  {
    "text": "time we commit to the repo it will automatically get deployed out you know into our cluster so in order to do that",
    "start": "1744100",
    "end": "1750130"
  },
  {
    "text": "firstly I need to install CV Manager so we can do that with a simple cube",
    "start": "1750130",
    "end": "1755890"
  },
  {
    "text": "control apply there's also a helmet art for it as well then assuming everything",
    "start": "1755890",
    "end": "1762190"
  },
  {
    "text": "goes well so what we can see here is that we've created a custom resource",
    "start": "1762190",
    "end": "1767470"
  },
  {
    "text": "definition and a deployment for our CV manager app now something's happened to",
    "start": "1767470",
    "end": "1772510"
  },
  {
    "text": "you with a config map let me just quickly run that again good old demos",
    "start": "1772510",
    "end": "1778620"
  },
  {
    "text": "let's see if that worked that time okay so now if we go back into the cluster",
    "start": "1778620",
    "end": "1784510"
  },
  {
    "text": "we're going to go to the system namespace and we should see that CV",
    "start": "1784510",
    "end": "1790060"
  },
  {
    "text": "manager up there that's now started up and you'll see also a sink a pod has",
    "start": "1790060",
    "end": "1795250"
  },
  {
    "text": "also started so that's the pod that's neither mentioned earlier is actually managing the CV manager itself and",
    "start": "1795250",
    "end": "1801550"
  },
  {
    "text": "keeping it up to date so that's all up and running now that's good the next",
    "start": "1801550",
    "end": "1807190"
  },
  {
    "text": "step is that we need to add some configuration to our application to tell it that we want it to be managed by the",
    "start": "1807190",
    "end": "1813520"
  },
  {
    "text": "CV manager so here's some of the some example configuration for that we",
    "start": "1813520",
    "end": "1819700"
  },
  {
    "text": "basically define the repo that we wanted to monitor for changes the tag",
    "start": "1819700",
    "end": "1824830"
  },
  {
    "text": "represents the tag on the container image that is the current version for",
    "start": "1824830",
    "end": "1830080"
  },
  {
    "text": "this particular cluster the polling time was just how regularly we checked the",
    "start": "1830080",
    "end": "1836470"
  },
  {
    "text": "container registry now the select this is how we define what workload is",
    "start": "1836470",
    "end": "1841630"
  },
  {
    "text": "actually being managed by this resource so what we need to do is just go down to our deployment here and add a label that",
    "start": "1841630",
    "end": "1848160"
  },
  {
    "text": "matches that selector and finally we need to specify the container name",
    "start": "1848160",
    "end": "1853210"
  },
  {
    "text": "because obviously there can be multiple containers with different versions so that needs to match the name of the",
    "start": "1853210",
    "end": "1858490"
  },
  {
    "text": "container down here all right so that's all we need to do we can now just do a",
    "start": "1858490",
    "end": "1863890"
  },
  {
    "text": "queue control apply on that okay so now we can see we've created the",
    "start": "1863890",
    "end": "1871260"
  },
  {
    "text": "container version configuration there and we've updated dated the deployment",
    "start": "1871260",
    "end": "1876419"
  },
  {
    "text": "so let's go back into the cluster we'll jump back to our default namespace where",
    "start": "1876419",
    "end": "1881640"
  },
  {
    "text": "our application is and we can see now another sinker has appeared and that's now managing our final step is to go",
    "start": "1881640",
    "end": "1889830"
  },
  {
    "text": "into our build tool and set up our workflow step for that so here we're using circle CI we have a very basic",
    "start": "1889830",
    "end": "1897529"
  },
  {
    "text": "build that creates a container image pushes out to a registry so we just need to add an additional step here this is",
    "start": "1897529",
    "end": "1904980"
  },
  {
    "text": "invoking the CV Manager command inside a docker container just writing the the add tags sub command we specify the repo",
    "start": "1904980",
    "end": "1912470"
  },
  {
    "text": "the tag so you'll notice that this tag should match the tag that we defined",
    "start": "1912470",
    "end": "1918419"
  },
  {
    "text": "here in the CV manager resource and finally the we have to identify which",
    "start": "1918419",
    "end": "1924690"
  },
  {
    "text": "actual image we're updating so if we then go and commit all of that so if we",
    "start": "1924690",
    "end": "1936059"
  },
  {
    "text": "go to our build tool now which was circle CA we should see that appear there it is it will start running now",
    "start": "1936059",
    "end": "1942770"
  },
  {
    "text": "hopefully it's not going to pull though we'll have to build the whole container from scratch in which case it will take",
    "start": "1942770",
    "end": "1948690"
  },
  {
    "text": "a few minutes but generally this would take less than a minute to run and once",
    "start": "1948690",
    "end": "1953970"
  },
  {
    "text": "that completes that we'll have tagged the container image in the repo and our",
    "start": "1953970",
    "end": "1961440"
  },
  {
    "text": "CR stinker should pick that up and deploy out our new application so at",
    "start": "1961440",
    "end": "1969210"
  },
  {
    "text": "this point I should be saying it's telling some jokes or something but not prepared for that story so that's that's",
    "start": "1969210",
    "end": "1979590"
  },
  {
    "text": "what our cluster is currently looking like still waiting for the build to",
    "start": "1979590",
    "end": "1984720"
  },
  {
    "text": "complete [Music] and I think we're just gonna get in",
    "start": "1984720",
    "end": "1991450"
  },
  {
    "text": "before the time is ended it's like no more God is testing us oh there we go",
    "start": "1991450",
    "end": "1997750"
  },
  {
    "text": "success and you would be fine see now so",
    "start": "1997750",
    "end": "2003659"
  },
  {
    "text": "this is now polling every 30 seconds so very shortly we should see some action",
    "start": "2003659",
    "end": "2009450"
  },
  {
    "text": "here I'll just keep refreshing this oh",
    "start": "2009450",
    "end": "2015559"
  },
  {
    "text": "that's actually already updated ISM I love it oh there we go so we can see now",
    "start": "2016700",
    "end": "2025740"
  },
  {
    "text": "it's actually doing a rolling deployment there for those for those pods and that should be very quick I think yeah we're",
    "start": "2025740",
    "end": "2032940"
  },
  {
    "text": "pretty much there and if we go back to our demo application we should see everything being uppercase so that's",
    "start": "2032940",
    "end": "2039480"
  },
  {
    "text": "that's pretty much how quickly you can get that CD pipeline up and running all right thank you",
    "start": "2039480",
    "end": "2047210"
  },
  {
    "text": "[Applause]",
    "start": "2050870",
    "end": "2052949"
  }
]