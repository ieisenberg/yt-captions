[
  {
    "text": "okay yeah thanks doctor and everyone thanks for coming",
    "start": "30",
    "end": "5450"
  },
  {
    "text": "my name is Alan I'm a Support Engineer at engineered and base we have a book",
    "start": "5450",
    "end": "11759"
  },
  {
    "text": "day we make helm and work flow today I'll be talking about auto scaling and",
    "start": "11759",
    "end": "18600"
  },
  {
    "text": "how you can make your own with a bit of math this is a bit of a personal",
    "start": "18600",
    "end": "24180"
  },
  {
    "text": "epidemic ish project of mine that I mess around from",
    "start": "24180",
    "end": "29880"
  },
  {
    "text": "time to time so yeah a bit about me I wrote a docker book last January so it's",
    "start": "29880",
    "end": "37530"
  },
  {
    "text": "been out for a year now so it's mostly obsolete",
    "start": "37530",
    "end": "42920"
  },
  {
    "text": "I also wrote the the chef cookbook to launch a kubernetes cluster so I made",
    "start": "43940",
    "end": "52649"
  },
  {
    "text": "custom chef resources so if you want to learn about more about that you can look",
    "start": "52649",
    "end": "59309"
  },
  {
    "text": "me up in the hallway afterwards so today",
    "start": "59309",
    "end": "66350"
  },
  {
    "text": "I would like to talk about how we typically run and operate distributed",
    "start": "67250",
    "end": "73890"
  },
  {
    "text": "systems so typically we have op staff and we manage a server farm that",
    "start": "73890",
    "end": "80670"
  },
  {
    "text": "receives traffic and so for example we monitor the CPU usage and then it the",
    "start": "80670",
    "end": "88740"
  },
  {
    "text": "the actual usage gets fed into our monitoring system like hipster and then",
    "start": "88740",
    "end": "95040"
  },
  {
    "text": "pager Duty wakes it up at 2:00 a.m. and then asks us an ops person wakes up at",
    "start": "95040",
    "end": "101520"
  },
  {
    "text": "night then check if CPU utilization is too high or too low that's why we got",
    "start": "101520",
    "end": "108000"
  },
  {
    "text": "alerted so we check if our goal is different from the actual",
    "start": "108000",
    "end": "113820"
  },
  {
    "text": "reading and then we log into our fleet of servers or our cloud provisioning API",
    "start": "113820",
    "end": "120149"
  },
  {
    "text": "and spin up more instances so",
    "start": "120149",
    "end": "125990"
  },
  {
    "text": "you can see we have a similar structure for an your air conditioner so here",
    "start": "125990",
    "end": "133080"
  },
  {
    "text": "in an air-conditioner thermostat basically regulates the the coolant",
    "start": "133080",
    "end": "139330"
  },
  {
    "text": "which releases cool air which makes your room cold so you have your room",
    "start": "139330",
    "end": "145990"
  },
  {
    "text": "temperature your the weather and then it gets affected by the cooling a coolant",
    "start": "145990",
    "end": "152110"
  },
  {
    "text": "of the air-conditioner and then we get an actual temperature reading from our sensors and then the thermostats read",
    "start": "152110",
    "end": "159400"
  },
  {
    "text": "that and then it compares with the temperature we set in the thermostat and the actual temperature so if it's too",
    "start": "159400",
    "end": "166690"
  },
  {
    "text": "hot then it releases more coolant if it's too cold it'll be easy space so the difference here is that your air",
    "start": "166690",
    "end": "172810"
  },
  {
    "text": "conditioner doesn't have an ops team that gets paged to adjust the coolant",
    "start": "172810",
    "end": "178210"
  },
  {
    "text": "right so so we have this automation now right so we have in kubernetes you have",
    "start": "178210",
    "end": "185680"
  },
  {
    "text": "your your horizontal pod or the scalar which basically allows you to set the number",
    "start": "185680",
    "end": "193090"
  },
  {
    "text": "of replicas in your replica set or replication controller depending on the reading of the CPU utilization from from",
    "start": "193090",
    "end": "202600"
  },
  {
    "text": "hip-stir so you set a target on your HPA object and you scale it so",
    "start": "202600",
    "end": "208230"
  },
  {
    "text": "so we have that already it's working properly so so one of the things that",
    "start": "208230",
    "end": "213959"
  },
  {
    "text": "you can do is you can try to customize it but the current object only has so",
    "start": "213959",
    "end": "219550"
  },
  {
    "text": "much also by knowing the first principles on how an auto scaler works then you can",
    "start": "219550",
    "end": "226900"
  },
  {
    "text": "know if your auto scaling policy is effective or is it stable is it working",
    "start": "226900",
    "end": "234760"
  },
  {
    "text": "as expected or is it working good enough so",
    "start": "234760",
    "end": "239820"
  },
  {
    "text": "the math behind the air conditioner called control theory can help us figure out that so control",
    "start": "239820",
    "end": "248830"
  },
  {
    "text": "theory is discipline developed how systems are dynamically",
    "start": "248830",
    "end": "257760"
  },
  {
    "text": "affecting each other and using that information you can use",
    "start": "257760",
    "end": "265780"
  },
  {
    "text": "that to create feedback loops to correct the target behavior and then there's a",
    "start": "265780",
    "end": "272080"
  },
  {
    "text": "couple of results in math that describes how effective your feedback loops are",
    "start": "272080",
    "end": "278400"
  },
  {
    "text": "so so control theory was developed in the",
    "start": "278880",
    "end": "284980"
  },
  {
    "text": "early part of the Industrial Revolution so the core part in the Industrial",
    "start": "284980",
    "end": "291400"
  },
  {
    "text": "Revolution is the steam engines became more reliable by having like consistent performance so",
    "start": "291400",
    "end": "299320"
  },
  {
    "text": "this century centrifugal governor was made in order to regulate a steam engine",
    "start": "299320",
    "end": "304900"
  },
  {
    "text": "so a centrifugal governor works by having a",
    "start": "304900",
    "end": "310500"
  },
  {
    "text": "spinning disk connected to the engine so if your engine is fast this will rotate",
    "start": "310500",
    "end": "317320"
  },
  {
    "text": "fast and that spinning wheel is connected to two",
    "start": "317320",
    "end": "323410"
  },
  {
    "text": "fly balls that will rotate rotate so the faster these two",
    "start": "323410",
    "end": "330630"
  },
  {
    "text": "two weights rotate then it will go up and then when",
    "start": "330630",
    "end": "336280"
  },
  {
    "text": "it goes up it it it it manipulates some levers that's connected to a valve that",
    "start": "336280",
    "end": "342550"
  },
  {
    "text": "regulates the steam intake so if your steam engine is too fast so the weights",
    "start": "342550",
    "end": "350320"
  },
  {
    "text": "will go up and then it will close the valve so the amount of steam getting inside your steam engine is lower so it",
    "start": "350320",
    "end": "357100"
  },
  {
    "text": "will try to slow down so this this produces a self-correcting behavior",
    "start": "357100",
    "end": "367020"
  },
  {
    "text": "so that the centrifugal governor was invented around",
    "start": "367020",
    "end": "373020"
  },
  {
    "text": "17th or 18th century but then people did not really",
    "start": "373020",
    "end": "378270"
  },
  {
    "text": "know how it works so it's only in the 19th century",
    "start": "378270",
    "end": "384850"
  },
  {
    "text": "where people got the theory figured out so you can say that during the",
    "start": "384850",
    "end": "391470"
  },
  {
    "text": "Industrial Revolution people have been cargo coding technology for 100 years or",
    "start": "391470",
    "end": "397340"
  },
  {
    "text": "more so we're doing pretty good US tech industry so",
    "start": "397340",
    "end": "404139"
  },
  {
    "text": "so in control theory there's architectural II a few basic parts so",
    "start": "404139",
    "end": "410510"
  },
  {
    "text": "you have your target input the set value so in an auto scaler that's what's our",
    "start": "410510",
    "end": "416150"
  },
  {
    "text": "target CPU utilization for our system and then in the air conditioner that's",
    "start": "416150",
    "end": "421760"
  },
  {
    "text": "the set temperature in our thermostat then you have the output which is the actual one so the current CPU",
    "start": "421760",
    "end": "428660"
  },
  {
    "text": "utilization and then next you have the control input which is",
    "start": "428660",
    "end": "435729"
  },
  {
    "text": "dictating the number of replicas your your autoscaler sets and then the",
    "start": "435729",
    "end": "443300"
  },
  {
    "text": "traffic in this case is just modeled as a disturbance so the the traffic going",
    "start": "443300",
    "end": "449360"
  },
  {
    "text": "to your servers will change the CPU and then it will",
    "start": "449360",
    "end": "454180"
  },
  {
    "text": "your autoscaler will react according to that so there you have the basic structure",
    "start": "454570",
    "end": "461229"
  },
  {
    "text": "so this is a simple code that I wrote to illustrate that so you have your",
    "start": "461229",
    "end": "468680"
  },
  {
    "text": "output value that's read through a sensor so in the autoscaler I wrote it",
    "start": "468680",
    "end": "474349"
  },
  {
    "text": "reads off the value of hip-stir hip-stir and then from the output value the CPU",
    "start": "474349",
    "end": "481760"
  },
  {
    "text": "utilization I get the number of instances or the number of replicas or using my controller and then I have an",
    "start": "481760",
    "end": "490580"
  },
  {
    "text": "app to it or that make basically makes an API call that sets the instance then next I have a control loop to",
    "start": "490580",
    "end": "499210"
  },
  {
    "text": "periodically send off the values to to my monitoring system and then I do",
    "start": "499210",
    "end": "507110"
  },
  {
    "text": "that every five seconds so that's the control monitoring interval",
    "start": "507110",
    "end": "512770"
  },
  {
    "text": "so this is an example of how it works so I have my own autoscaler not the one",
    "start": "512770",
    "end": "520760"
  },
  {
    "text": "built in kubernetes so you have the blue line which is the CPU utilization and",
    "start": "520760",
    "end": "527150"
  },
  {
    "text": "then the number of replicas so at this point I increase traffic which correspondingly increase CPU and my",
    "start": "527150",
    "end": "535640"
  },
  {
    "text": "number of replicas increased corresponding same goes when I reduce",
    "start": "535640",
    "end": "540690"
  },
  {
    "text": "traffic then CPU goes down as well and then the number of replicas follow",
    "start": "540690",
    "end": "548690"
  },
  {
    "text": "and I'll show that later on in a small demo if we have time so why does",
    "start": "548690",
    "end": "555680"
  },
  {
    "text": "like this simple auto scaling work out scalar work so in systems you can make a",
    "start": "555680",
    "end": "563700"
  },
  {
    "text": "simple model if it's linear and time-invariant so as you scale up and",
    "start": "563700",
    "end": "569040"
  },
  {
    "text": "down then it's not affected when what it's scaled up or down the effects are",
    "start": "569040",
    "end": "575370"
  },
  {
    "text": "the same so in control theory you can model your autoscaler as a these",
    "start": "575370",
    "end": "581430"
  },
  {
    "text": "equations so these equations are the same they're just one is analog and one is a",
    "start": "581430",
    "end": "588090"
  },
  {
    "text": "digital form so basically Y is the output which is the CPU utilization and",
    "start": "588090",
    "end": "594570"
  },
  {
    "text": "then U is the control input which is the number of incense so this equation just",
    "start": "594570",
    "end": "599730"
  },
  {
    "text": "says that the number of instances you set in your replication controller is",
    "start": "599730",
    "end": "605300"
  },
  {
    "text": "dependent on the CPU utilization and a proportion of it and",
    "start": "605300",
    "end": "612140"
  },
  {
    "text": "the the change in CPU utilization that's why there's a derivative written there",
    "start": "612140",
    "end": "619820"
  },
  {
    "text": "in the digital form where so that you can code it you can model it such as the",
    "start": "619820",
    "end": "627450"
  },
  {
    "text": "CPU utilization at the next monitoring cycle is",
    "start": "627450",
    "end": "634490"
  },
  {
    "text": "is dependent on the current CPU utilization now and the number of instances you set",
    "start": "634490",
    "end": "643100"
  },
  {
    "text": "now as well okay so once you make a model of your",
    "start": "643100",
    "end": "651500"
  },
  {
    "text": "system that you want to auto scale then there's there are like four desired",
    "start": "651500",
    "end": "658140"
  },
  {
    "text": "properties that you want so even though you're not making your autoscaler you",
    "start": "658140",
    "end": "663240"
  },
  {
    "text": "can use these criteria to evaluate the built in horizontal path autoscaler",
    "start": "663240",
    "end": "670740"
  },
  {
    "text": "you said in kubernetes so first is stability",
    "start": "670740",
    "end": "676940"
  },
  {
    "text": "you want your scaling to be stable over time so here it's an example of an",
    "start": "676940",
    "end": "684180"
  },
  {
    "text": "unstable autoscaler so at first CPU usage increase so you add more instances but",
    "start": "684180",
    "end": "693209"
  },
  {
    "text": "then you add it too much so you scale down but then you scale down too much so you try to add more and then you remove",
    "start": "693209",
    "end": "701339"
  },
  {
    "text": "instances then you keep adding more so in the end like you keep adding more and",
    "start": "701339",
    "end": "706950"
  },
  {
    "text": "more and then reducing more and more which makes an unreliable performance",
    "start": "706950",
    "end": "712320"
  },
  {
    "text": "because from at one point you'll have a thousand instances and at some point you have one so it unless your traffic is",
    "start": "712320",
    "end": "718769"
  },
  {
    "text": "really like that then it doesn't make good of a system as it should be",
    "start": "718769",
    "end": "725209"
  },
  {
    "text": "so this is also another example of an unstable one so no matter how many instances you add like your utilization",
    "start": "725209",
    "end": "732660"
  },
  {
    "text": "still goes up through the roof so there's probably other problems in your application like the networking or the",
    "start": "732660",
    "end": "739410"
  },
  {
    "text": "database you depend on if such a thing happens so this is sort of stable but then it",
    "start": "739410",
    "end": "746399"
  },
  {
    "text": "oscillates through so you have the dashed line which is your target performance but then it",
    "start": "746399",
    "end": "751800"
  },
  {
    "text": "oscillates through like too much instances and not not",
    "start": "751800",
    "end": "758339"
  },
  {
    "text": "enough instances but it's within a certain range so it's stable but not yet",
    "start": "758339",
    "end": "763890"
  },
  {
    "text": "quite there then this is what you want so basically as time goes on then it the error",
    "start": "763890",
    "end": "772380"
  },
  {
    "text": "margins starts to decrease which is stable system",
    "start": "772380",
    "end": "778160"
  },
  {
    "text": "so here is another stable version which is a smoother one so it gradually",
    "start": "778160",
    "end": "785149"
  },
  {
    "text": "goes there so a problem with this it's sometimes it's",
    "start": "785149",
    "end": "790209"
  },
  {
    "text": "slow and alright before I going the slow like",
    "start": "790209",
    "end": "797350"
  },
  {
    "text": "another properties you want it to be accurate so it goes through the target",
    "start": "797350",
    "end": "802749"
  },
  {
    "text": "performance at some point so I want to go to let's say 70 percent utilization then after some point",
    "start": "802749",
    "end": "809939"
  },
  {
    "text": "your as you scale up then you reach you go back to the target value of 70",
    "start": "809939",
    "end": "815439"
  },
  {
    "text": "percent performance so when I talk about the system being",
    "start": "815439",
    "end": "820989"
  },
  {
    "text": "slow so when you when you scale out instances you want to",
    "start": "820989",
    "end": "827610"
  },
  {
    "text": "you want to settle a value that too fast enough to your target",
    "start": "827610",
    "end": "833889"
  },
  {
    "text": "performance if it's too slow then it means in auto scaling if you didn't have",
    "start": "833889",
    "end": "839170"
  },
  {
    "text": "enough instances then you already lost traffic so you want it to be fast in",
    "start": "839170",
    "end": "845739"
  },
  {
    "text": "terms of settling time then remember the oscillations I showed",
    "start": "845739",
    "end": "852939"
  },
  {
    "text": "earlier so you also want your system to not have overshoots me which means you",
    "start": "852939",
    "end": "859299"
  },
  {
    "text": "overcompensate and then you go back again in some designs of auto scalars",
    "start": "859299",
    "end": "866589"
  },
  {
    "text": "and/or controllers you may want that as a trade off so that it responds fast",
    "start": "866589",
    "end": "872199"
  },
  {
    "text": "with a faster settling time but depending on I guess your budget because",
    "start": "872199",
    "end": "877629"
  },
  {
    "text": "you added too much instances then you will probably not want that in your",
    "start": "877629",
    "end": "882819"
  },
  {
    "text": "system ok so let's go to the auto scalars and",
    "start": "882819",
    "end": "889540"
  },
  {
    "text": "how you can make one yourself so here we have our this is basically the replica",
    "start": "889540",
    "end": "895869"
  },
  {
    "text": "controller and then this is our auto scalar C so basically the",
    "start": "895869",
    "end": "903149"
  },
  {
    "text": "to figure out the number of instances to scale we need to get our goal which is",
    "start": "903149",
    "end": "910029"
  },
  {
    "text": "the reference value and then the current value so the target CPU and the current",
    "start": "910029",
    "end": "915309"
  },
  {
    "text": "CPU and get the difference of that and that would be our error and then use",
    "start": "915309",
    "end": "920589"
  },
  {
    "text": "that error to get the number of instances using some",
    "start": "920589",
    "end": "928290"
  },
  {
    "text": "like some kind of function so later on I will show what functions you can use in",
    "start": "928290",
    "end": "934329"
  },
  {
    "text": "making controllers so the first one is a proportional controller basically",
    "start": "934329",
    "end": "941459"
  },
  {
    "text": "then the number of instances you set is the difference in CP utilization times a",
    "start": "941459",
    "end": "950430"
  },
  {
    "text": "constant value so here's a graph of that so for example this is your target CPU",
    "start": "950430",
    "end": "958000"
  },
  {
    "text": "utilization which is let's say 70% and you're currently at 60% so it means you need to add less",
    "start": "958000",
    "end": "965829"
  },
  {
    "text": "instances so so you add a bit of that and then your",
    "start": "965829",
    "end": "973420"
  },
  {
    "text": "number of instances will decrease the graph is inverted but so there's an",
    "start": "973420",
    "end": "979810"
  },
  {
    "text": "overshoot and then at some point it will settle down so in this controller has certain",
    "start": "979810",
    "end": "987310"
  },
  {
    "text": "properties like the higher you set your proportional gain then you'll have more",
    "start": "987310",
    "end": "993130"
  },
  {
    "text": "overshoot but then you can have you can settle down faster but then proportional controllers have a",
    "start": "993130",
    "end": "1001800"
  },
  {
    "text": "limit of having a large error margin in the end so you the value will settle but",
    "start": "1001800",
    "end": "1009269"
  },
  {
    "text": "it's a bit of your target next okay I've talked about that already",
    "start": "1009269",
    "end": "1019100"
  },
  {
    "text": "next we have integral controller so basically the number of instances is",
    "start": "1019100",
    "end": "1025890"
  },
  {
    "text": "dependent on the number of instances you have previously plus the",
    "start": "1025890",
    "end": "1033410"
  },
  {
    "text": "lesson error value so basically you're averaging out the errors over time and",
    "start": "1033410",
    "end": "1039058"
  },
  {
    "text": "then multiplying that so if you're averaging your observations",
    "start": "1039059",
    "end": "1044730"
  },
  {
    "text": "then it means you're reducing the the error difference but then since you're",
    "start": "1044730",
    "end": "1049740"
  },
  {
    "text": "averaging as well then your system becomes less responsive",
    "start": "1049740",
    "end": "1056419"
  },
  {
    "text": "so another controller you can use to make it more responsive is you check for",
    "start": "1058730",
    "end": "1064140"
  },
  {
    "text": "the the change in error so if your CPU",
    "start": "1064140",
    "end": "1069210"
  },
  {
    "text": "utilization changes very fast then you can respond to it very fast but since",
    "start": "1069210",
    "end": "1075990"
  },
  {
    "text": "it's fast then it's also very sensitive to noise so in practice people",
    "start": "1075990",
    "end": "1085310"
  },
  {
    "text": "combine their proportional integral and derivative controllers to get the",
    "start": "1085310",
    "end": "1092420"
  },
  {
    "text": "performance they want in their controllers or in this example our auto",
    "start": "1092420",
    "end": "1097890"
  },
  {
    "text": "scalars okay so I discussed all the types of",
    "start": "1097890",
    "end": "1104930"
  },
  {
    "text": "controllers you can use for your auto scalars so you have based off the model",
    "start": "1104930",
    "end": "1110100"
  },
  {
    "text": "but then in the end computers are not like fully",
    "start": "1110100",
    "end": "1117330"
  },
  {
    "text": "deterministic so there's nonlinear behavior as well so if this",
    "start": "1117330",
    "end": "1123720"
  },
  {
    "text": "was a perfectly linear time-invariant systems then as I increase my number of",
    "start": "1123720",
    "end": "1129780"
  },
  {
    "text": "replicas then my CP CP utilisation should decrease proportionally but then in some",
    "start": "1129780",
    "end": "1137700"
  },
  {
    "text": "observations in generating my model it's not the same value here so there's like outliers here",
    "start": "1137700",
    "end": "1145410"
  },
  {
    "text": "so even though I model it as a straight line",
    "start": "1145410",
    "end": "1151290"
  },
  {
    "text": "there are error margin so there's a need to reevaluate the model to check if it's",
    "start": "1151290",
    "end": "1158940"
  },
  {
    "text": "really effective so the same goes if you're using kubernetes built-in autoscaler so you want to check if that",
    "start": "1158940",
    "end": "1167220"
  },
  {
    "text": "the values you said the target values you said in the HPA object is making",
    "start": "1167220",
    "end": "1173610"
  },
  {
    "text": "sense for your application",
    "start": "1173610",
    "end": "1177530"
  },
  {
    "text": "so you can use control theory not only in",
    "start": "1179240",
    "end": "1184330"
  },
  {
    "text": "auto scaling so people have like Auto tuning and auto configuration before",
    "start": "1184330",
    "end": "1192010"
  },
  {
    "text": "so for example people have configured their engine acts or Apache",
    "start": "1192010",
    "end": "1198850"
  },
  {
    "text": "services wherein they adjust the keep a lifetime out in response to the response",
    "start": "1198850",
    "end": "1206120"
  },
  {
    "text": "time of the application or in a or for nginx like the memory versus the",
    "start": "1206120",
    "end": "1214940"
  },
  {
    "text": "number of worker connections so your queue is",
    "start": "1214940",
    "end": "1220330"
  },
  {
    "text": "adjusted and then you can combine these parameters together to make more",
    "start": "1220330",
    "end": "1227270"
  },
  {
    "text": "sophisticated multiple-input and multiple-output systems",
    "start": "1227270",
    "end": "1233830"
  },
  {
    "text": "so in summary control theory is a model you can use to",
    "start": "1233830",
    "end": "1242270"
  },
  {
    "text": "iterate on the feedback being received from your monitoring system then control",
    "start": "1242270",
    "end": "1250909"
  },
  {
    "text": "theory also gives you a math framework to show if your feedback loops",
    "start": "1250909",
    "end": "1256940"
  },
  {
    "text": "are effective even next also simple models can go a long",
    "start": "1256940",
    "end": "1265159"
  },
  {
    "text": "way as well but then in the end like it's also important to keep reevaluating your",
    "start": "1265159",
    "end": "1273260"
  },
  {
    "text": "models if they are effective so if you want to learn more about",
    "start": "1273260",
    "end": "1279559"
  },
  {
    "text": "control theory these are two books I recommend the O'Reilly book on the left",
    "start": "1279559",
    "end": "1285529"
  },
  {
    "text": "is a good introductory book it has like simulations in Python that you can test out the",
    "start": "1285529",
    "end": "1291340"
  },
  {
    "text": "W book shows like very concrete examples so",
    "start": "1291340",
    "end": "1296360"
  },
  {
    "text": "that's where I got the the keep a lifetime out and response time",
    "start": "1296360",
    "end": "1302950"
  },
  {
    "text": "auto-configuration but this is like more like rigorous textbook ish academic",
    "start": "1302950",
    "end": "1308320"
  },
  {
    "text": "stuff but if you want something concrete to do in your experiments then this will",
    "start": "1308320",
    "end": "1315410"
  },
  {
    "text": "get your feet more wet just a few acknowledgments the demo I'll",
    "start": "1315410",
    "end": "1321140"
  },
  {
    "text": "show later and the benchmarks I did before were run on gke through",
    "start": "1321140",
    "end": "1328210"
  },
  {
    "text": "through developer relations credits provided by Kelsey Hightower",
    "start": "1328210",
    "end": "1334750"
  },
  {
    "text": "okay I'll show a bit of demo so here I have my",
    "start": "1334750",
    "end": "1342670"
  },
  {
    "text": "application which is",
    "start": "1342670",
    "end": "1346780"
  },
  {
    "text": "which basically serves a web app request and then I have a load generator so this",
    "start": "1348250",
    "end": "1354620"
  },
  {
    "text": "looks like the thousand women 1 million requests per second demo from Cooper net",
    "start": "1354620",
    "end": "1360650"
  },
  {
    "text": "from Cuba I think last year I so first we need to generate our",
    "start": "1360650",
    "end": "1369880"
  },
  {
    "text": "model so so I make a model by so by setting the",
    "start": "1369880",
    "end": "1379660"
  },
  {
    "text": "number of instances up and down using a simple sinusoid",
    "start": "1379660",
    "end": "1387700"
  },
  {
    "text": "so",
    "start": "1387700",
    "end": "1390700"
  },
  {
    "text": "so basically this is a graph I used to generate my model so basically I scale",
    "start": "1397510",
    "end": "1403540"
  },
  {
    "text": "up and down the number of instances against a constant traffic and then the",
    "start": "1403540",
    "end": "1408970"
  },
  {
    "text": "CPU utilization responds inversely so you can see that it's not a perfect counter sinusoid so",
    "start": "1408970",
    "end": "1417250"
  },
  {
    "text": "that's why there's a non-linearity in the behavior so to show that I'm not using kubernetes",
    "start": "1417250",
    "end": "1426040"
  },
  {
    "text": "built-in autoscaler I'll just show that",
    "start": "1426040",
    "end": "1432900"
  },
  {
    "text": "okay I'll just show off my sleeves are empty right",
    "start": "1432900",
    "end": "1438299"
  },
  {
    "text": "so after generating the model after",
    "start": "1438299",
    "end": "1443350"
  },
  {
    "text": "getting the data we generate a model so I just made an R script that basically",
    "start": "1443350",
    "end": "1451470"
  },
  {
    "text": "generates the model from the data",
    "start": "1453030",
    "end": "1457799"
  },
  {
    "text": "so I get my model so basically our model is that the CPU",
    "start": "1458370",
    "end": "1466419"
  },
  {
    "text": "utilization is the next value is 0.94 of the current utilization and",
    "start": "1466419",
    "end": "1475049"
  },
  {
    "text": "minus 0.2 of the number of instances so that's the so we'll use that and then we",
    "start": "1475049",
    "end": "1481900"
  },
  {
    "text": "will use that to identify what makes a our controller stable so I already made",
    "start": "1481900",
    "end": "1489929"
  },
  {
    "text": "controller for that so here's the controller loop loop I",
    "start": "1490200",
    "end": "1496929"
  },
  {
    "text": "showed earlier and this is the controller so basically I set my",
    "start": "1496929",
    "end": "1502900"
  },
  {
    "text": "proportional gain to minus 0.1 and my integral gain to be zero so it's a",
    "start": "1502900",
    "end": "1509380"
  },
  {
    "text": "simple proportional model and you can see my",
    "start": "1509380",
    "end": "1514500"
  },
  {
    "text": "controller here okay so basically the number of",
    "start": "1514500",
    "end": "1520450"
  },
  {
    "text": "instances is the proportional gain times the difference in CPU utilization",
    "start": "1520450",
    "end": "1526770"
  },
  {
    "text": "okay okay so I'll just show that these",
    "start": "1526770",
    "end": "1533280"
  },
  {
    "text": "libraries here are simple API calls to through kubernetes so our",
    "start": "1533280",
    "end": "1540730"
  },
  {
    "text": "sensor that gets the CP utilization is a basic API call to hipster so it gets the",
    "start": "1540730",
    "end": "1547990"
  },
  {
    "text": "list of number of pods in our object in our application and then gets the CPU",
    "start": "1547990",
    "end": "1554610"
  },
  {
    "text": "and then the actuate or the NAM the one who sets the number of instances is just",
    "start": "1554610",
    "end": "1561700"
  },
  {
    "text": "a an API call to the replication controller",
    "start": "1561700",
    "end": "1566789"
  },
  {
    "text": "so you can see our controller running here so it's taking a reading of the CPU",
    "start": "1567179",
    "end": "1573220"
  },
  {
    "text": "usage and then setting the number of instances so",
    "start": "1573220",
    "end": "1579299"
  },
  {
    "text": "you can see here",
    "start": "1579299",
    "end": "1583110"
  },
  {
    "text": "so here I have 71 instances",
    "start": "1584400",
    "end": "1590850"
  },
  {
    "text": "270 CPU cores or is that merely CP was",
    "start": "1590850",
    "end": "1597690"
  },
  {
    "text": "whatever hipster is giving you so so that's that and then it's receiving a",
    "start": "1597690",
    "end": "1605799"
  },
  {
    "text": "traffic at 20,000 queries per second so I will",
    "start": "1605799",
    "end": "1611980"
  },
  {
    "text": "scale so currently I have 20,000 queries per second so I will",
    "start": "1611980",
    "end": "1618059"
  },
  {
    "text": "double that 240 okay",
    "start": "1618059",
    "end": "1625770"
  },
  {
    "text": "double that so we'll just wait a bit for the number of requests per second to go",
    "start": "1625820",
    "end": "1631520"
  },
  {
    "text": "up and then we can check again on our monitoring system",
    "start": "1631520",
    "end": "1637029"
  },
  {
    "text": "one word",
    "start": "1639550",
    "end": "1642760"
  },
  {
    "text": "okay all right so the requests per second is",
    "start": "1663200",
    "end": "1668729"
  },
  {
    "text": "starting to pick up now that we generated more load generators",
    "start": "1668729",
    "end": "1674029"
  },
  {
    "text": "next we'll go on to our controller so the CPU utilization",
    "start": "1674029",
    "end": "1680179"
  },
  {
    "text": "will then start to increase because we're sending more requests",
    "start": "1680179",
    "end": "1687259"
  },
  {
    "text": "so currently it's at 273 then later it will increase as the",
    "start": "1687259",
    "end": "1694489"
  },
  {
    "text": "number of the pads in our replication controller starts receive more traffic then it will",
    "start": "1694489",
    "end": "1701570"
  },
  {
    "text": "start to consume more CPUs or so there you have it we're now at",
    "start": "1701570",
    "end": "1707210"
  },
  {
    "text": "400% CPU usage so we can check our",
    "start": "1707210",
    "end": "1714769"
  },
  {
    "text": "autoscaler here so the number of CPU increase and then our number of",
    "start": "1715580",
    "end": "1723059"
  },
  {
    "text": "instances is increased correspondingly so",
    "start": "1723059",
    "end": "1730489"
  },
  {
    "text": "yeah and then when I scale it down",
    "start": "1730820",
    "end": "1736940"
  },
  {
    "text": "okay so once the traffic decreases then the CPU utilization will go down so we",
    "start": "1748150",
    "end": "1756640"
  },
  {
    "text": "can just confirm first if our traffic goes down so it's starting to go down",
    "start": "1756640",
    "end": "1764550"
  },
  {
    "text": "to beat a bit more",
    "start": "1768280",
    "end": "1771360"
  },
  {
    "text": "okay I can just not wait for it",
    "start": "1812510",
    "end": "1819180"
  },
  {
    "text": "so so that's part of like controller design yourself when do you want to",
    "start": "1819180",
    "end": "1824410"
  },
  {
    "text": "respond so you can also model the delay in your measurement so",
    "start": "1824410",
    "end": "1831390"
  },
  {
    "text": "the reporting in hipster doesn't really register right away when you add more",
    "start": "1831390",
    "end": "1839140"
  },
  {
    "text": "instances so other so it won't register the CPUC so",
    "start": "1839140",
    "end": "1846630"
  },
  {
    "text": "sometimes there's delay in the control loop as well so when designing controllers you can model that and",
    "start": "1846630",
    "end": "1854020"
  },
  {
    "text": "design around that as well so if you want to",
    "start": "1854020",
    "end": "1860910"
  },
  {
    "text": "check it out it's in my github account so it's a Espinoza slash control theory",
    "start": "1860910",
    "end": "1867430"
  },
  {
    "text": "so you can play with it so that's it thank you for listening and I can take",
    "start": "1867430",
    "end": "1875570"
  },
  {
    "text": "[Applause]",
    "start": "1875570",
    "end": "1880710"
  },
  {
    "text": "anyone have some questions or something yes",
    "start": "1880710",
    "end": "1888480"
  },
  {
    "text": "yeah so the default I looked at the autoscaler code while working on this so",
    "start": "1895960",
    "end": "1902210"
  },
  {
    "text": "that so so again sorry the question was what's the model being used in the",
    "start": "1902210",
    "end": "1908600"
  },
  {
    "text": "default autoscaler so it's sort of a proportional controller if you look at",
    "start": "1908600",
    "end": "1916039"
  },
  {
    "text": "the code it's basically they check the CPU utilization and then the number of",
    "start": "1916039",
    "end": "1922970"
  },
  {
    "text": "instances is I forgot what's in the code but",
    "start": "1922970",
    "end": "1930519"
  },
  {
    "text": "it's I think it doesn't it doesn't do averaging of some sorts it does",
    "start": "1930519",
    "end": "1937369"
  },
  {
    "text": "averaging at the monitoring level but so if you probably put the model together",
    "start": "1937369",
    "end": "1943309"
  },
  {
    "text": "then it can have an integral component but if you look at just the control loop",
    "start": "1943309",
    "end": "1949419"
  },
  {
    "text": "not the sensor leading one then it's mostly proportional",
    "start": "1949419",
    "end": "1956440"
  },
  {
    "text": "yes",
    "start": "1956740",
    "end": "1959740"
  },
  {
    "text": "so right right so the question was is it possible to generate",
    "start": "1965590",
    "end": "1973200"
  },
  {
    "text": "yeah to make models using really world data like pokemon goes so",
    "start": "1973200",
    "end": "1979980"
  },
  {
    "text": "so when I made the the sinusoid like this was well I",
    "start": "1979980",
    "end": "1987670"
  },
  {
    "text": "pre-recorded it but I scale up and down the the instances against a certain load",
    "start": "1987670",
    "end": "1996370"
  },
  {
    "text": "and then I get the linear relationship so when you want to get a model from",
    "start": "1996370",
    "end": "2003410"
  },
  {
    "text": "from the from the real world then you you can you you basically get the two",
    "start": "2003410",
    "end": "2008910"
  },
  {
    "text": "matrix you want so for example you have your Pokemon go load so you get it from",
    "start": "2008910",
    "end": "2016290"
  },
  {
    "text": "your access logs right like the requests per second and then you get the other",
    "start": "2016290",
    "end": "2021830"
  },
  {
    "text": "variable which is the CPU load and then you basically do a linear correlation",
    "start": "2021830",
    "end": "2028590"
  },
  {
    "text": "between two so you just basically all the data you have there you just plot it on a scatter point",
    "start": "2028590",
    "end": "2035870"
  },
  {
    "text": "right right so yeah",
    "start": "2038540",
    "end": "2045800"
  },
  {
    "text": "so the the thing about control theory is that so for example a",
    "start": "2047530",
    "end": "2055810"
  },
  {
    "text": "proportional model doesn't really take samples so it's it's pretty much set",
    "start": "2055810",
    "end": "2065050"
  },
  {
    "text": "and then you can yeah",
    "start": "2065050",
    "end": "2071888"
  },
  {
    "text": "haven't really thought about",
    "start": "2071889",
    "end": "2075398"
  },
  {
    "text": "but yeah so if you have data then it only works in a certain region so you design against that operating region and",
    "start": "2079270",
    "end": "2086710"
  },
  {
    "text": "then just get enough data around that operating region so like your typical",
    "start": "2086710",
    "end": "2091889"
  },
  {
    "text": "operating case right and then but then if your traffic loads too much then your",
    "start": "2091890",
    "end": "2097810"
  },
  {
    "text": "model is already invalid so you need to regenerate yeah yeah yeah so I think",
    "start": "2097810",
    "end": "2105130"
  },
  {
    "text": "some people are doing that so that you you they combine multiple control loops so they have a",
    "start": "2105130",
    "end": "2111360"
  },
  {
    "text": "the fast loop which does stuff a lot of scaling and then there's a higher control loop which gives parameters to",
    "start": "2111360",
    "end": "2119050"
  },
  {
    "text": "the controller based on other data which is sampled at the larger amount of time",
    "start": "2119050",
    "end": "2125260"
  },
  {
    "text": "so they do that kind of model combinations",
    "start": "2125260",
    "end": "2132030"
  },
  {
    "text": "anyone else yeah so thank you everyone oh there soon",
    "start": "2136100",
    "end": "2143650"
  },
  {
    "text": "yeah",
    "start": "2158580",
    "end": "2161150"
  },
  {
    "text": "right right right so like so the question was is can you",
    "start": "2168950",
    "end": "2174560"
  },
  {
    "text": "make a more predictive control loop so so the answer there is that",
    "start": "2174560",
    "end": "2182260"
  },
  {
    "text": "so what people do is like for for example you're planning an event then",
    "start": "2182260",
    "end": "2187520"
  },
  {
    "text": "they change the target value so norm in my normal operation I'm targeting 70%",
    "start": "2187520",
    "end": "2194480"
  },
  {
    "text": "utilization but then on further we can for example for Black Friday I change my",
    "start": "2194480",
    "end": "2200300"
  },
  {
    "text": "target to 40% and the system will respond correspondingly because you change your",
    "start": "2200300",
    "end": "2206800"
  },
  {
    "text": "goal so another one so the the one I mentioned where you have multiple",
    "start": "2206800",
    "end": "2212870"
  },
  {
    "text": "cascaded control loops so they use that set up to change the target as well so",
    "start": "2212870",
    "end": "2223340"
  },
  {
    "text": "you can do a more sophisticated model that way",
    "start": "2223340",
    "end": "2229960"
  },
  {
    "text": "else yeah yeah",
    "start": "2234430",
    "end": "2240970"
  },
  {
    "text": "yeah yeah yeah it can be just like on so an unopened an open control loop which",
    "start": "2240970",
    "end": "2247400"
  },
  {
    "text": "you basically set the levers manually so in that case your",
    "start": "2247400",
    "end": "2253430"
  },
  {
    "text": "outer control loop is actually a human",
    "start": "2253430",
    "end": "2257770"
  },
  {
    "text": "yeah thank you [Applause]",
    "start": "2260320",
    "end": "2267700"
  }
]