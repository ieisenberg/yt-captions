[
  {
    "start": "0",
    "end": "52000"
  },
  {
    "text": "hi everyone thank you it's fantastic to see this security card",
    "start": "0",
    "end": "5440"
  },
  {
    "text": "turning into two days and so many people i'm really really pleased for this event so yes my name is liz rice i am chief",
    "start": "5440",
    "end": "12559"
  },
  {
    "text": "open source officer at iso valence and i was until recently chair of the",
    "start": "12559",
    "end": "18000"
  },
  {
    "text": "cncf's technical oversight committee some of you may have come across a book",
    "start": "18000",
    "end": "23279"
  },
  {
    "text": "that i wrote about container security um i've just recently written a new report",
    "start": "23279",
    "end": "29439"
  },
  {
    "text": "about ebpf hopefully we will be giving away copies later this week",
    "start": "29439",
    "end": "35280"
  },
  {
    "text": "apparently they have been released from customs and are on their way here now i hope",
    "start": "35280",
    "end": "40719"
  },
  {
    "text": "so if you want to hear more about or learn more about what ebpf is i hope that book",
    "start": "40719",
    "end": "46000"
  },
  {
    "text": "will be as useful to you as i know some of you have said the container security book was",
    "start": "46000",
    "end": "52079"
  },
  {
    "start": "52000",
    "end": "135000"
  },
  {
    "text": "so today i want to talk about how we can use evpf for runtime security",
    "start": "52079",
    "end": "59120"
  },
  {
    "text": "and how many of you were here for the loxi talk just a couple of talks ago okay so some of what was discussed there",
    "start": "59120",
    "end": "67119"
  },
  {
    "text": "we'll dive a little bit in more detail in this talk i'm going to show you some different",
    "start": "67119",
    "end": "73520"
  },
  {
    "text": "uses of ebpf and a new tool that we've added to the psyllium family",
    "start": "73520",
    "end": "81200"
  },
  {
    "text": "a lot of the discussions i think at security.com there's been lots of things about",
    "start": "81360",
    "end": "87200"
  },
  {
    "text": "supply chain and dependency management things that happen before you deploy",
    "start": "87200",
    "end": "93200"
  },
  {
    "text": "your workloads what i'm talking about now is the real time detection and prevention of",
    "start": "93200",
    "end": "100799"
  },
  {
    "text": "malicious activity while your workload's running so",
    "start": "100799",
    "end": "106320"
  },
  {
    "text": "we need a way of detecting when something that looks suspicious is happening in real",
    "start": "106320",
    "end": "113840"
  },
  {
    "text": "at a minimum we need to be able to report that perhaps that's going to generate alerts or it's going to go into",
    "start": "113840",
    "end": "119600"
  },
  {
    "text": "a sim or some kind of notification that something suspicious or malicious has happened",
    "start": "119600",
    "end": "126159"
  },
  {
    "text": "but even better if we can actually spot when something suspicious is about to",
    "start": "126159",
    "end": "131440"
  },
  {
    "text": "happen and we can prevent it",
    "start": "131440",
    "end": "135680"
  },
  {
    "start": "135000",
    "end": "271000"
  },
  {
    "text": "the kind of activity we're talking about i think falls largely into four main",
    "start": "136640",
    "end": "142000"
  },
  {
    "text": "categories we want to make sure that if there's network traffic to a suspicious",
    "start": "142000",
    "end": "148480"
  },
  {
    "text": "destination or from a suspicious address that we spot that",
    "start": "148480",
    "end": "155120"
  },
  {
    "text": "access to files we want to make sure that workloads are only accessing files that we expect them to access",
    "start": "155120",
    "end": "162560"
  },
  {
    "text": "we only expect our workloads to run a certain set of executables",
    "start": "162560",
    "end": "168239"
  },
  {
    "text": "i often use the example that if my nginx pod suddenly starts running a cryptocurrency minor executable that's",
    "start": "168239",
    "end": "174959"
  },
  {
    "text": "probably not what it was supposed to be doing so we can particularly in a",
    "start": "174959",
    "end": "180720"
  },
  {
    "text": "microservices environment in a cloud native environment we can often reason about what",
    "start": "180720",
    "end": "186879"
  },
  {
    "text": "executables we expect to be running and what file activity and network activity we expect",
    "start": "186879",
    "end": "194000"
  },
  {
    "text": "and also we're interested when an executable appears to have or",
    "start": "194000",
    "end": "200959"
  },
  {
    "text": "a process appears to have more privileges or appears to be trying to gain more privileges than we expected",
    "start": "200959",
    "end": "207840"
  },
  {
    "text": "that's often uh the the the way that an exploit of",
    "start": "207840",
    "end": "213360"
  },
  {
    "text": "vulnerability uh kind of takes hold is by escalating privileges",
    "start": "213360",
    "end": "219920"
  },
  {
    "text": "now all of these different types of activity require support from the kernel so just",
    "start": "219920",
    "end": "226720"
  },
  {
    "text": "to make sure that we're completely on the same page about user space and kernel we write application code in user space",
    "start": "226720",
    "end": "235040"
  },
  {
    "text": "but whenever we want to do anything interesting really certainly anything",
    "start": "235040",
    "end": "240319"
  },
  {
    "text": "that involves any hardware we have to ask the kernel to do that on our behalf",
    "start": "240319",
    "end": "245519"
  },
  {
    "text": "and we do that through the system call interface so those four categories of things that",
    "start": "245519",
    "end": "250640"
  },
  {
    "text": "i was talking about the file access the network access even memory access",
    "start": "250640",
    "end": "256479"
  },
  {
    "text": "and processes and privileges they're all accessed via system calls so whenever",
    "start": "256479",
    "end": "263759"
  },
  {
    "text": "we're doing any of those activities in an application the colonel will be involved",
    "start": "263759",
    "end": "271199"
  },
  {
    "start": "271000",
    "end": "399000"
  },
  {
    "text": "so if we want to spot those potentially suspicious activities",
    "start": "272000",
    "end": "277280"
  },
  {
    "text": "if we can look at how the kernels behaving then",
    "start": "277280",
    "end": "282720"
  },
  {
    "text": "that that could be a mechanism we can use to spot potentially malicious activity",
    "start": "282720",
    "end": "289199"
  },
  {
    "text": "and we've had several mechanisms for doing this over the years",
    "start": "289199",
    "end": "295120"
  },
  {
    "text": "and many of these are available in open source or proprietary tools today",
    "start": "295120",
    "end": "300160"
  },
  {
    "text": "um i'm gonna just run through these pretty quickly but um ld preload is anybody here familiar with ld preload",
    "start": "300160",
    "end": "307199"
  },
  {
    "text": "i'm guessing so it's quite often used for kind of red team work i think",
    "start": "307199",
    "end": "312960"
  },
  {
    "text": "ptrace i'm sure a lot of you have used ptrace setcomp i'm sure you've all come across",
    "start": "312960",
    "end": "318320"
  },
  {
    "text": "and then finally we will turn to some things we can do with evps",
    "start": "318320",
    "end": "324160"
  },
  {
    "text": "ld preload assumes that your application is using",
    "start": "324160",
    "end": "329280"
  },
  {
    "text": "the standard c library to make those system calls so whenever you're going to do those",
    "start": "329280",
    "end": "336080"
  },
  {
    "text": "operations that require support from the kernel you'll actually do that by making a",
    "start": "336080",
    "end": "341919"
  },
  {
    "text": "call via the standard c library which gives you an abstraction",
    "start": "341919",
    "end": "347520"
  },
  {
    "text": "for those system calls and with ld preload because that library is typically",
    "start": "347520",
    "end": "354720"
  },
  {
    "text": "dynamically linked we replace the standard one with an",
    "start": "354720",
    "end": "360639"
  },
  {
    "text": "alternative one which might just be a thin shim layer that does some detection and then passes through to the",
    "start": "360639",
    "end": "366720"
  },
  {
    "text": "the normal standard c library and that's all well and good except for",
    "start": "366720",
    "end": "373759"
  },
  {
    "text": "if you're using statically linked applications for example if you're using go applications they don't use the",
    "start": "373759",
    "end": "379840"
  },
  {
    "text": "standard c library they have their own statically linked interface to syscalls",
    "start": "379840",
    "end": "385280"
  },
  {
    "text": "so ld preload is a perfectly valid way of trying to intercept what the user space",
    "start": "385280",
    "end": "390479"
  },
  {
    "text": "application is asking your kernel to do but it can be pretty easily bypassed especially these days with lots of go",
    "start": "390479",
    "end": "397600"
  },
  {
    "text": "applications so then we get to the category of tools",
    "start": "397600",
    "end": "403360"
  },
  {
    "start": "399000",
    "end": "635000"
  },
  {
    "text": "that hook into the top layer if you like of a cisco",
    "start": "403360",
    "end": "409280"
  },
  {
    "text": "being processed within the kernel and p trace setcomp",
    "start": "409280",
    "end": "415599"
  },
  {
    "text": "and ebpf k pro what's called a k probe um that",
    "start": "415599",
    "end": "420880"
  },
  {
    "text": "hook into this sort of initial processing of a system call",
    "start": "420880",
    "end": "426639"
  },
  {
    "text": "and they all have the same problem that's actually been well understood in the kernel community for a",
    "start": "426639",
    "end": "432400"
  },
  {
    "text": "very long time and it's turned out to be uh you know it's the kernel working as",
    "start": "432400",
    "end": "437520"
  },
  {
    "text": "designed if you look at the system core parameters when",
    "start": "437520",
    "end": "442960"
  },
  {
    "text": "they're very first passed into the kernel the colonel has oops the kernel hasn't",
    "start": "442960",
    "end": "448400"
  },
  {
    "text": "had a chance to inspect those yet oh i've just remembered i was supposed to be doing a demo before i go into this",
    "start": "448400",
    "end": "454639"
  },
  {
    "text": "thing so let's let's just do detecting a system call with ebpf",
    "start": "454639",
    "end": "460240"
  },
  {
    "text": "so this is a very very simple the simplest",
    "start": "460240",
    "end": "465280"
  },
  {
    "text": "of um ebpf programs this is going to run in the kernel",
    "start": "465280",
    "end": "471759"
  },
  {
    "text": "and i'm going to attach this to the system call for changing the permissions mode of a file",
    "start": "471759",
    "end": "479599"
  },
  {
    "text": "i'm using a k probe k-pro is kernel probe it's attaching to the entry point",
    "start": "479599",
    "end": "485199"
  },
  {
    "text": "of this function and i also have some user space code",
    "start": "485199",
    "end": "490479"
  },
  {
    "text": "that loads this function that's not really that important for this demo so",
    "start": "490479",
    "end": "495520"
  },
  {
    "text": "let me just make make this tool let's make this little tool",
    "start": "495520",
    "end": "503199"
  },
  {
    "text": "okay this tracing that it's going to generate is going to go into a kernel trace file",
    "start": "503199",
    "end": "510720"
  },
  {
    "text": "that i'm going to just start piping the output from and i'm going to run my",
    "start": "510720",
    "end": "516800"
  },
  {
    "text": "little oops i have to be root to do this",
    "start": "516800",
    "end": "522240"
  },
  {
    "text": "hopefully i can type okay so that's running if i uh",
    "start": "526160",
    "end": "532959"
  },
  {
    "text": "look at the bpf programs that have been loaded into this virtual machine we can see one here it's",
    "start": "532959",
    "end": "540560"
  },
  {
    "text": "a k probe called hello that's my application successfully loaded into the kernel",
    "start": "540560",
    "end": "547040"
  },
  {
    "text": "and now if i try to change the mode of a file",
    "start": "547040",
    "end": "552480"
  },
  {
    "text": "we'll see some trace generated it's a very very simple trigger to detect that that system call has been triggered",
    "start": "552480",
    "end": "560560"
  },
  {
    "text": "so that ebpf program was triggered at the entry point to that",
    "start": "561440",
    "end": "568800"
  },
  {
    "text": "system call and it suffers from a well-known time of check to time of",
    "start": "568800",
    "end": "574000"
  },
  {
    "text": "use issue that affects all of these tools that hook into that sort of first",
    "start": "574000",
    "end": "579760"
  },
  {
    "text": "point where you start processing system calls this was very well explained by leo di",
    "start": "579760",
    "end": "585680"
  },
  {
    "text": "donato and kp singh at cloud native ebpf day last year",
    "start": "585680",
    "end": "591920"
  },
  {
    "text": "and the exploits that um or a demonstration of exploiting this was",
    "start": "591920",
    "end": "597440"
  },
  {
    "text": "shown at defcon 29 last year it's called phantom attacks and it can affect all of these",
    "start": "597440",
    "end": "604800"
  },
  {
    "text": "tools that inspect parameters before they've been copied into",
    "start": "604800",
    "end": "611360"
  },
  {
    "text": "kernel into kernel data structures what we need to do to avoid being",
    "start": "611360",
    "end": "617200"
  },
  {
    "text": "vulnerable to this time of check time of use issue is we need to",
    "start": "617200",
    "end": "622959"
  },
  {
    "text": "look at the parameters to assist call after they've been copied into kernel memory so there's no possibility that",
    "start": "622959",
    "end": "629760"
  },
  {
    "text": "the parameter has been changed before it gets copied into the kernel",
    "start": "629760",
    "end": "635680"
  },
  {
    "start": "635000",
    "end": "756000"
  },
  {
    "text": "and there is a well-known way to do this it's called linux security modules",
    "start": "636320",
    "end": "641920"
  },
  {
    "text": "so the lsm api is a stable interface within the kernel",
    "start": "641920",
    "end": "647519"
  },
  {
    "text": "that gives dozens of function call hooks",
    "start": "647519",
    "end": "652640"
  },
  {
    "text": "where relevant information has already been copied into kernel data structures",
    "start": "652640",
    "end": "658880"
  },
  {
    "text": "essentially all of these function calls on this api are the kernel saying here you are",
    "start": "658880",
    "end": "665760"
  },
  {
    "text": "here's a data structure perhaps that describes a file or describes a socket",
    "start": "665760",
    "end": "671200"
  },
  {
    "text": "here it is this is what i'm about to act on do you have an opinion on that is this",
    "start": "671200",
    "end": "677120"
  },
  {
    "text": "malicious in some way are you okay with me to go ahead and do this operation",
    "start": "677120",
    "end": "683279"
  },
  {
    "text": "so linux security module function calls are a safe place that",
    "start": "683279",
    "end": "688800"
  },
  {
    "text": "don't suffer from this time of check's time of use issue",
    "start": "688800",
    "end": "693839"
  },
  {
    "text": "with bpf lsm that you heard referred to with in the loxi talk",
    "start": "694720",
    "end": "700880"
  },
  {
    "text": "we don't have to use a kernel module we can use ebpf programs",
    "start": "700880",
    "end": "707360"
  },
  {
    "text": "hooked onto those lsm function calls so we're using that stable interface",
    "start": "707360",
    "end": "714000"
  },
  {
    "text": "we've got these kernel data structures that we can inspect we can run",
    "start": "714000",
    "end": "719360"
  },
  {
    "text": "dynamic programs we can load them into the kernel as we choose",
    "start": "719360",
    "end": "725279"
  },
  {
    "text": "to do our checks on whether or not we think that activity",
    "start": "725279",
    "end": "730560"
  },
  {
    "text": "looks suspicious in some way the other thing that's very cool if we're doing this with ebpf is",
    "start": "730560",
    "end": "737200"
  },
  {
    "text": "it protects any process it doesn't matter whether the process was already running when you load the ebpf program",
    "start": "737200",
    "end": "744560"
  },
  {
    "text": "it has visibility into everything that's running on that virtual machine so",
    "start": "744560",
    "end": "749839"
  },
  {
    "text": "we can protect against malicious behavior in pre-existing processes",
    "start": "749839",
    "end": "756320"
  },
  {
    "start": "756000",
    "end": "886000"
  },
  {
    "text": "so let's have a look at an ebpf program again a very simple ebpf program that",
    "start": "756639",
    "end": "762320"
  },
  {
    "text": "uses an lsm hook and i've actually got it in here already commented out",
    "start": "762320",
    "end": "769200"
  },
  {
    "text": "i'll just uncomment that and it's extremely similar to what i showed",
    "start": "769200",
    "end": "775600"
  },
  {
    "text": "you before with the k-probe ebpf program",
    "start": "775600",
    "end": "781920"
  },
  {
    "text": "again all i'm doing here is i'm just going to trace out some a message",
    "start": "781920",
    "end": "787200"
  },
  {
    "text": "but in this particular example for path to mod which is a function on that",
    "start": "787200",
    "end": "793120"
  },
  {
    "text": "lsm interface i get this path structure",
    "start": "793120",
    "end": "799040"
  },
  {
    "text": "let's just compare that to the the system call before where we just had a void pointer to a context structure",
    "start": "799040",
    "end": "806160"
  },
  {
    "text": "here we have a data structure that contains the kernel's pre-populated information",
    "start": "806160",
    "end": "812560"
  },
  {
    "text": "about the file that i want to change the permissions on and i can",
    "start": "812560",
    "end": "817839"
  },
  {
    "text": "it makes it very easy for me to find the name of that file so let me just",
    "start": "817839",
    "end": "824880"
  },
  {
    "text": "build this again and this time i've got",
    "start": "824880",
    "end": "831120"
  },
  {
    "text": "i didn't save it did i did i let me just remove that",
    "start": "831120",
    "end": "838160"
  },
  {
    "text": "i'm not confident whether that actually did the right thing so i'm just going to rebuild it",
    "start": "838160",
    "end": "843600"
  },
  {
    "text": "okay so let's go back bring up back the tracing",
    "start": "843600",
    "end": "850399"
  },
  {
    "text": "both my ebpf programs will be loaded this time so let's run the application",
    "start": "850399",
    "end": "858560"
  },
  {
    "text": "let's check the programs that have been loaded and yeah this time we've got",
    "start": "858560",
    "end": "863839"
  },
  {
    "text": "the k probe called hello and we've got an lsm hook called path to mod",
    "start": "863839",
    "end": "871199"
  },
  {
    "text": "so this time if i trace where i change the mode we get two",
    "start": "871199",
    "end": "876720"
  },
  {
    "text": "traces one for each entry point and we can see the name of the file that i",
    "start": "876720",
    "end": "882320"
  },
  {
    "text": "was operating on so that interface is super useful it's",
    "start": "882320",
    "end": "890880"
  },
  {
    "start": "886000",
    "end": "1053000"
  },
  {
    "text": "stable it doesn't suffer from any kind of known vulnerabilities but",
    "start": "890880",
    "end": "896399"
  },
  {
    "text": "it needs a modern kernel it was only introduced into 5.7 so unless you're running with that",
    "start": "896399",
    "end": "903120"
  },
  {
    "text": "kernel or newer you don't really have the option to use ebpf against",
    "start": "903120",
    "end": "909839"
  },
  {
    "text": "that lsm interface so do we have an alternative well yeah we",
    "start": "909839",
    "end": "916959"
  },
  {
    "text": "do just because that is a declared staple interface doesn't mean to say there",
    "start": "916959",
    "end": "923360"
  },
  {
    "text": "aren't plenty of other function calls in the kernel that haven't changed for quite a long time",
    "start": "923360",
    "end": "930399"
  },
  {
    "text": "with ebpf we can hook into anywhere in the kernel so",
    "start": "930399",
    "end": "936000"
  },
  {
    "text": "what if we were to pick other stable not by sort of declared this is",
    "start": "936000",
    "end": "943279"
  },
  {
    "text": "never going to change but stable in the sense that they haven't changed for a long time there's no expected reason why",
    "start": "943279",
    "end": "949680"
  },
  {
    "text": "these uh functions would change and hook ebpf programs into those and",
    "start": "949680",
    "end": "955600"
  },
  {
    "text": "that's what we're doing with a new project that we've added into the psyllium family called tetragon",
    "start": "955600",
    "end": "963199"
  },
  {
    "text": "tetragon is actually the open sourcing of something that as isovalent we've been including as part",
    "start": "963440",
    "end": "970399"
  },
  {
    "text": "of our commercial offering for quite a while so we're open sourcing something that has been used in production",
    "start": "970399",
    "end": "976880"
  },
  {
    "text": "in some pretty large scale deployments so we we know that this is useful and that it really does",
    "start": "976880",
    "end": "983680"
  },
  {
    "text": "help our customers or the commercial version has helped our customers detect",
    "start": "983680",
    "end": "989199"
  },
  {
    "text": "malicious activity but now we're making it into an open source project so that we can all use it",
    "start": "989199",
    "end": "998240"
  },
  {
    "text": "so it's using this knowledge of what functions in the kernel are",
    "start": "998240",
    "end": "1003680"
  },
  {
    "text": "safe to use and de facto stable enough that we don't",
    "start": "1003680",
    "end": "1008959"
  },
  {
    "text": "anticipate them changing and if they aren't if they do change in the future well we'll we'll deal with that but there's no expectation that they will",
    "start": "1008959",
    "end": "1016560"
  },
  {
    "text": "and we have the ability to coordinate many different ebpf programs to provide",
    "start": "1016560",
    "end": "1024000"
  },
  {
    "text": "security tooling in",
    "start": "1024000",
    "end": "1030240"
  },
  {
    "text": "in psyllium we have knowledge of kubernetes we have all this contextual",
    "start": "1030240",
    "end": "1036079"
  },
  {
    "text": "information about what processes are part of which pods which namespace",
    "start": "1036079",
    "end": "1042400"
  },
  {
    "text": "they're operating in and we can use that knowledge to make it very efficient",
    "start": "1042400",
    "end": "1049280"
  },
  {
    "text": "filtered in the kernel or filtered in user space",
    "start": "1049280",
    "end": "1053840"
  },
  {
    "start": "1053000",
    "end": "1100000"
  },
  {
    "text": "you might be wondering why it's called tetragon this is why the tetragoniska angustula is a kind of",
    "start": "1054640",
    "end": "1062160"
  },
  {
    "text": "bee there are a few other tetragoniska bees in this family",
    "start": "1062160",
    "end": "1067520"
  },
  {
    "text": "the if you look this up on wikipedia this particular bee is uh it's a very small",
    "start": "1067520",
    "end": "1073919"
  },
  {
    "text": "bee it builds unobtrusive nests it produces lots of honey and it's considered to not be a threat to humans",
    "start": "1073919",
    "end": "1081600"
  },
  {
    "text": "i feel like that's very apt as a name for a project that is very small efficient uh you know",
    "start": "1081600",
    "end": "1088960"
  },
  {
    "text": "resource unintensive and produces lots of really useful sweet information for",
    "start": "1088960",
    "end": "1095520"
  },
  {
    "text": "detecting security violations",
    "start": "1095520",
    "end": "1100639"
  },
  {
    "start": "1100000",
    "end": "1144000"
  },
  {
    "text": "so yeah context is everything when you get these if you define a policy for the kind of",
    "start": "1101440",
    "end": "1108559"
  },
  {
    "text": "security event that you might be interested in but you want to know what the context",
    "start": "1108559",
    "end": "1113760"
  },
  {
    "text": "was where that suspicious looking activity took place",
    "start": "1113760",
    "end": "1118960"
  },
  {
    "text": "so we can see that some suspicious activity happened we can",
    "start": "1118960",
    "end": "1124640"
  },
  {
    "text": "combine it with this information about the kubernetes context it's running in",
    "start": "1124640",
    "end": "1129760"
  },
  {
    "text": "and that will be really useful for both determining whether or not it really is",
    "start": "1129760",
    "end": "1135520"
  },
  {
    "text": "something to worry about and more importantly to as forensics for trying to track down",
    "start": "1135520",
    "end": "1141360"
  },
  {
    "text": "how the pod got compromised the other thing that's really different",
    "start": "1141360",
    "end": "1148160"
  },
  {
    "start": "1144000",
    "end": "1235000"
  },
  {
    "text": "from all of the other kind of approaches that we've seen is the",
    "start": "1148160",
    "end": "1153919"
  },
  {
    "text": "ability to prevent a malicious or suspicious activity",
    "start": "1153919",
    "end": "1160320"
  },
  {
    "text": "so the kind of kernel probes that we've talked about previously whether they're",
    "start": "1160320",
    "end": "1166960"
  },
  {
    "text": "ebpf kernel probes for cisco's or ptrace or",
    "start": "1166960",
    "end": "1172880"
  },
  {
    "text": "any of that kind of family that hook into the early point of system cause what they will",
    "start": "1172880",
    "end": "1178480"
  },
  {
    "text": "do is notify a user space application which can then take some preventative action",
    "start": "1178480",
    "end": "1185600"
  },
  {
    "text": "and that could be as simple as just killing the process that's responsible",
    "start": "1185600",
    "end": "1190960"
  },
  {
    "text": "but the problem with this approach is that it's asynchronous and between spotting that there's some",
    "start": "1190960",
    "end": "1196320"
  },
  {
    "text": "malicious activity if you have to notify something in user space and then",
    "start": "1196320",
    "end": "1202240"
  },
  {
    "text": "take your preventative action it may be too late there may have been time to",
    "start": "1202240",
    "end": "1208559"
  },
  {
    "text": "exfiltrate some data or change something that allows um",
    "start": "1208559",
    "end": "1215679"
  },
  {
    "text": "an exploit to kind of persist into the future what's different with tetragon",
    "start": "1215679",
    "end": "1222320"
  },
  {
    "text": "is that we can asynchronously trigger sid kill from within the kernel so as",
    "start": "1222320",
    "end": "1227360"
  },
  {
    "text": "soon as we detect a malicious event we can kill the process immediately",
    "start": "1227360",
    "end": "1234960"
  },
  {
    "text": "and if the demo gods are with me we will see that",
    "start": "1234960",
    "end": "1240000"
  },
  {
    "start": "1235000",
    "end": "1604000"
  },
  {
    "text": "in action okay so i have a kind cluster here with a few",
    "start": "1240000",
    "end": "1246799"
  },
  {
    "text": "pods running and i think at the moment i don't have any we have um",
    "start": "1246799",
    "end": "1253440"
  },
  {
    "text": "tracing policies as the name of security policies that tetragon enforces",
    "start": "1253440",
    "end": "1260880"
  },
  {
    "text": "and i'm just gonna run well i'll start by showing you the the raw logs from from tetragon there will",
    "start": "1260880",
    "end": "1267360"
  },
  {
    "text": "be some whatever's been happening in the past will will appear in this uh log already",
    "start": "1267360",
    "end": "1272799"
  },
  {
    "text": "so it's been generating a bunch of logs not very human readable but you can",
    "start": "1272799",
    "end": "1278880"
  },
  {
    "text": "probably make out these a json event or they're json structures",
    "start": "1278880",
    "end": "1284960"
  },
  {
    "text": "describing the event we can see here this one is a a process exit",
    "start": "1284960",
    "end": "1290400"
  },
  {
    "text": "by default tetragon will tell you about all of the process entries and exits that happen so",
    "start": "1290400",
    "end": "1296720"
  },
  {
    "text": "basically whenever a new executable is started or stopped you'll get a log so",
    "start": "1296720",
    "end": "1302799"
  },
  {
    "text": "what we can do with this output is pipe it into what we actually uh",
    "start": "1302799",
    "end": "1308400"
  },
  {
    "text": "internally for a long time before we knew we were going to call it tetragon we just called this the amazing cli",
    "start": "1308400",
    "end": "1315440"
  },
  {
    "text": "and i'm going to filter out so we just see oops",
    "start": "1315440",
    "end": "1320559"
  },
  {
    "text": "just see things happening in the default namespace so again there's some historical",
    "start": "1320559",
    "end": "1328240"
  },
  {
    "text": "what's been happening before going on so if i exact into uh",
    "start": "1328799",
    "end": "1335679"
  },
  {
    "text": "let's say an x-wing fighter and i'll run a",
    "start": "1335679",
    "end": "1341280"
  },
  {
    "text": "bash here and we can see immediately that we've seen a process started for",
    "start": "1341280",
    "end": "1346480"
  },
  {
    "text": "bash is that big enough for you all to see is it okay i see nodding that's good",
    "start": "1346480",
    "end": "1352240"
  },
  {
    "text": "okay so let's say we want to protect",
    "start": "1352559",
    "end": "1358080"
  },
  {
    "text": "files in the etc directory and i have a policy here that will",
    "start": "1358080",
    "end": "1364320"
  },
  {
    "text": "do that did i use underscore or dash let's see i'm in the wrong directory",
    "start": "1364320",
    "end": "1372679"
  },
  {
    "text": "examples so we have a bunch of example uh policies",
    "start": "1374240",
    "end": "1379600"
  },
  {
    "text": "and let's take a look at the etc one",
    "start": "1379600",
    "end": "1385200"
  },
  {
    "text": "now tetragon policies are actually pretty low level they allow us",
    "start": "1386400",
    "end": "1392640"
  },
  {
    "text": "we can think of tetragon as an engine that allows us to attach policies",
    "start": "1392640",
    "end": "1398159"
  },
  {
    "text": "into these generic points across the kernel in this example i'm using a kernel",
    "start": "1398159",
    "end": "1404960"
  },
  {
    "text": "called a kernel function called fd install and that's essentially when the kernel has a file descriptor that it",
    "start": "1404960",
    "end": "1411600"
  },
  {
    "text": "kind of has in its hands and we we're essentially going to follow",
    "start": "1411600",
    "end": "1417919"
  },
  {
    "text": "with this policy any actions that happen on that file descriptor and we're also going to be interested",
    "start": "1417919",
    "end": "1424559"
  },
  {
    "text": "if there are some read system calls closed system calls and if we go down to the end right",
    "start": "1424559",
    "end": "1431360"
  },
  {
    "text": "system calls so essentially with this policy we can track",
    "start": "1431360",
    "end": "1436799"
  },
  {
    "text": "when anybody opens the file oh i missed the bit where it matches on slash etc",
    "start": "1436799",
    "end": "1442400"
  },
  {
    "text": "okay so we'll see any file being opened reading writing and closing events on",
    "start": "1442400",
    "end": "1449360"
  },
  {
    "text": "files inside the et cetera directory so let me apply that",
    "start": "1449360",
    "end": "1454400"
  },
  {
    "text": "policy",
    "start": "1454400",
    "end": "1457400"
  },
  {
    "text": "okay and if i were in my x-wing fighter to",
    "start": "1460480",
    "end": "1466400"
  },
  {
    "text": "let's try and edit the password file okay we're allowed to there's nothing",
    "start": "1466400",
    "end": "1472640"
  },
  {
    "text": "preventing us from doing it but we can see data about it we can see that here the",
    "start": "1472640",
    "end": "1478720"
  },
  {
    "text": "file has been opened and then [Music] 1200 odd bytes have been read from it and then by apparently closes the file",
    "start": "1478720",
    "end": "1486240"
  },
  {
    "text": "while it's showing it to you okay so",
    "start": "1486240",
    "end": "1492080"
  },
  {
    "text": "suppose i am the uh i don't know rebel commander and i want to stop people from being able to change",
    "start": "1492080",
    "end": "1498320"
  },
  {
    "text": "passwords in my x-wing fighters perhaps what i should do",
    "start": "1498320",
    "end": "1504000"
  },
  {
    "text": "is have a policy that not only tells me that it's happening but that prevents it from happening",
    "start": "1504000",
    "end": "1510720"
  },
  {
    "text": "i have another version of basically the same policy",
    "start": "1510720",
    "end": "1515760"
  },
  {
    "text": "but this time i've added in a kill action this this is part of the",
    "start": "1515760",
    "end": "1521600"
  },
  {
    "text": "right so when we match on a right operation we're going to issue a kill to this process",
    "start": "1521600",
    "end": "1529919"
  },
  {
    "text": "so let me apply this version of the policy",
    "start": "1529919",
    "end": "1534799"
  },
  {
    "text": "kill okay and",
    "start": "1538480",
    "end": "1544400"
  },
  {
    "text": "i'm going to come along and we see the detection of open read and close",
    "start": "1544400",
    "end": "1550799"
  },
  {
    "text": "let's say we want to add in you know maybe i'm on the dark side and i want to",
    "start": "1550799",
    "end": "1555840"
  },
  {
    "text": "add an account for a stormtrooper",
    "start": "1555840",
    "end": "1560720"
  },
  {
    "text": "let me try and write that file and we can see here",
    "start": "1560960",
    "end": "1566480"
  },
  {
    "text": "sig kill did that happen in time let's find out let's look at that file",
    "start": "1566480",
    "end": "1574559"
  },
  {
    "text": "go to the end of the file there is no sign of permissions for the stormtrooper so we were able to intercept that right",
    "start": "1575600",
    "end": "1582240"
  },
  {
    "text": "operation before it took effect and killed the process that was trying to perform it",
    "start": "1582240",
    "end": "1589600"
  },
  {
    "text": "so file operations is just one example of the kind of things that we can build",
    "start": "1589840",
    "end": "1596960"
  },
  {
    "text": "profiles to protect against with tetragon we've got a ton of examples in the",
    "start": "1596960",
    "end": "1602559"
  },
  {
    "text": "repo we can protect against all of those",
    "start": "1602559",
    "end": "1607760"
  },
  {
    "start": "1604000",
    "end": "1701000"
  },
  {
    "text": "categories of suspicious or you know potentially",
    "start": "1607760",
    "end": "1613039"
  },
  {
    "text": "the kinds of behaviors that we might be we might find suspicious be that network activity",
    "start": "1613039",
    "end": "1618960"
  },
  {
    "text": "file access memory access privilege escalation if you come and find us later in the",
    "start": "1618960",
    "end": "1625520"
  },
  {
    "text": "week i think we will have on the uh on the stand for on the cilium stand we should have a demo for",
    "start": "1625520",
    "end": "1632320"
  },
  {
    "text": "detecting privilege escalation and there's you know example",
    "start": "1632320",
    "end": "1639039"
  },
  {
    "text": "tracing profiles for for a variety of different things you might want to protect against",
    "start": "1639039",
    "end": "1645679"
  },
  {
    "text": "one thing to be aware of though is because it's quite a general purpose engine you could write a policy that",
    "start": "1645679",
    "end": "1651679"
  },
  {
    "text": "just looks at the entry points to syscalls and would still have the same time of check to time of use issues that",
    "start": "1651679",
    "end": "1658640"
  },
  {
    "text": "we've seen with other tools so you do have to be a little bit careful about what policies you write",
    "start": "1658640",
    "end": "1663840"
  },
  {
    "text": "and how you apply them but we have lots of examples there so",
    "start": "1663840",
    "end": "1670640"
  },
  {
    "text": "go check out cillian tetragon put a star on it that would be great",
    "start": "1670640",
    "end": "1675919"
  },
  {
    "text": "it's ebpf based so it's very lightweight and high performance",
    "start": "1675919",
    "end": "1681120"
  },
  {
    "text": "it doesn't rely on a kernel that's so modern that none of you are using it i'm pretty sure that all of you will be",
    "start": "1681120",
    "end": "1686320"
  },
  {
    "text": "using kernels that are compatible with tetragon it gives you that contextual information",
    "start": "1686320",
    "end": "1691360"
  },
  {
    "text": "about kubernetes and i think most importantly and most excitingly we can",
    "start": "1691360",
    "end": "1696640"
  },
  {
    "text": "block events before they happen if they're suspicious",
    "start": "1696640",
    "end": "1702559"
  },
  {
    "start": "1701000",
    "end": "1751000"
  },
  {
    "text": "so yeah come and see us during the rest of this week check out the project on github",
    "start": "1702559",
    "end": "1708559"
  },
  {
    "text": "i also want to uh mention a book that my colleague natalia ivanko and",
    "start": "1708559",
    "end": "1715200"
  },
  {
    "text": "salazar worked on called security observability with ebpf which talks a lot about",
    "start": "1715200",
    "end": "1721760"
  },
  {
    "text": "tetragon and how you can use profiles to detect and prevent different",
    "start": "1721760",
    "end": "1727520"
  },
  {
    "text": "types of security relevant events so with that thank you very much i hope",
    "start": "1727520",
    "end": "1734240"
  },
  {
    "text": "you are excited about ebpf because i really am and do come and find me or my",
    "start": "1734240",
    "end": "1740000"
  },
  {
    "text": "colleagues during the the week and we will chew your ears off about how excited we",
    "start": "1740000",
    "end": "1745679"
  },
  {
    "text": "are about ebpf so thank you very much [Applause]",
    "start": "1745679",
    "end": "1757039"
  },
  {
    "start": "1751000",
    "end": "1931000"
  },
  {
    "text": "yeah i think we have time for a question do you have any questions",
    "start": "1757039",
    "end": "1762720"
  },
  {
    "text": "questions anybody",
    "start": "1763200",
    "end": "1766679"
  },
  {
    "text": "thank you thank you very much for the presentation i have the question about context uh is it easy to link",
    "start": "1778640",
    "end": "1787760"
  },
  {
    "text": "for example do two types of detections like for example would be an interactive session and then the process of spawning",
    "start": "1787760",
    "end": "1795520"
  },
  {
    "text": "doing suspicious activities or it needs to be events happening only on that syscall in",
    "start": "1795520",
    "end": "1802320"
  },
  {
    "text": "particular so um",
    "start": "1802320",
    "end": "1808200"
  },
  {
    "text": "because tetragon is so kind of general purpose you can write",
    "start": "1808320",
    "end": "1814080"
  },
  {
    "text": "the profile um to",
    "start": "1814080",
    "end": "1819600"
  },
  {
    "text": "i mean in the example that i showed there it had like three system calls because they're all related to that",
    "start": "1820000",
    "end": "1825520"
  },
  {
    "text": "particular file descriptor so it's not just any old file it's it starts with that fd",
    "start": "1825520",
    "end": "1831200"
  },
  {
    "text": "installed that says here is a file descriptor that i'm interested in because it matches etc",
    "start": "1831200",
    "end": "1837200"
  },
  {
    "text": "now if i see any subsequent activity related to that file descriptor",
    "start": "1837200",
    "end": "1842960"
  },
  {
    "text": "be it a reader write a close then i'm interested so it's kind of all in the way the profile is constructed how",
    "start": "1842960",
    "end": "1851120"
  },
  {
    "text": "you link the context of those different events in the profile if that makes sense yeah yeah perfect thank you very",
    "start": "1851120",
    "end": "1857519"
  },
  {
    "text": "much any more questions",
    "start": "1857519",
    "end": "1865158"
  },
  {
    "text": "okay just a quick one um just wondering for",
    "start": "1867519",
    "end": "1872799"
  },
  {
    "text": "um i'm not too familiar with the interface the sm api but how does it handle like",
    "start": "1872799",
    "end": "1879120"
  },
  {
    "text": "buffers in the kernel if you're writing to a file where you know you're writing one byte at a time",
    "start": "1879120",
    "end": "1885600"
  },
  {
    "text": "is it able to inspect the entire buffer um i would refer you to lsm hooks the",
    "start": "1885600",
    "end": "1892399"
  },
  {
    "text": "header file that will tell you all the different now actually that is that does make me think a sort of important point",
    "start": "1892399",
    "end": "1898159"
  },
  {
    "text": "where if you want to use the lsm interface you can but you don't have to and actually",
    "start": "1898159",
    "end": "1904320"
  },
  {
    "text": "what we've used in tetragon is not the lsm interface because we've chosen",
    "start": "1904320",
    "end": "1910000"
  },
  {
    "text": "to use some different entry points specifically about buffers i'm sure we can find someone to answer specifically",
    "start": "1910000",
    "end": "1916399"
  },
  {
    "text": "thank you yeah",
    "start": "1916399",
    "end": "1922799"
  },
  {
    "text": "all right thanks this was a great talk thank you [Applause]",
    "start": "1922799",
    "end": "1933029"
  }
]