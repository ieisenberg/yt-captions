[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "hello and thank you for joining this",
    "start": "80",
    "end": "1920"
  },
  {
    "text": "presentation",
    "start": "1920",
    "end": "3280"
  },
  {
    "text": "my name is srini polovarpu i am an",
    "start": "3280",
    "end": "6240"
  },
  {
    "text": "engineering manager at google",
    "start": "6240",
    "end": "8160"
  },
  {
    "text": "and i work on grpc and service mesh",
    "start": "8160",
    "end": "11040"
  },
  {
    "text": "technologies",
    "start": "11040",
    "end": "12960"
  },
  {
    "text": "so today i will be presenting the",
    "start": "12960",
    "end": "14799"
  },
  {
    "text": "exciting new development",
    "start": "14799",
    "end": "16400"
  },
  {
    "text": "happening in grpc in the area of service",
    "start": "16400",
    "end": "19279"
  },
  {
    "text": "mesh technologies",
    "start": "19279",
    "end": "21199"
  },
  {
    "text": "so let's dive right into it",
    "start": "21199",
    "end": "24640"
  },
  {
    "start": "24000",
    "end": "65000"
  },
  {
    "text": "so i'll start by saying that grp season",
    "start": "25359",
    "end": "28720"
  },
  {
    "text": "is an awesome rpc framework it is",
    "start": "28720",
    "end": "31760"
  },
  {
    "text": "a high performance open source framework",
    "start": "31760",
    "end": "34719"
  },
  {
    "text": "with a ton of features",
    "start": "34719",
    "end": "36640"
  },
  {
    "text": "and it has very high industry adoption",
    "start": "36640",
    "end": "40719"
  },
  {
    "text": "it has a sophisticated networking stack",
    "start": "40719",
    "end": "43360"
  },
  {
    "text": "that enables",
    "start": "43360",
    "end": "44960"
  },
  {
    "text": "connection management bi-directional",
    "start": "44960",
    "end": "46640"
  },
  {
    "text": "streaming flow control",
    "start": "46640",
    "end": "48320"
  },
  {
    "text": "and many more features it is available",
    "start": "48320",
    "end": "51520"
  },
  {
    "text": "in many languages",
    "start": "51520",
    "end": "52879"
  },
  {
    "text": "and works great with protocol buffers",
    "start": "52879",
    "end": "56640"
  },
  {
    "text": "so all this makes grpc an awesome",
    "start": "56640",
    "end": "60000"
  },
  {
    "text": "framework for building",
    "start": "60000",
    "end": "61359"
  },
  {
    "text": "microservices based applications",
    "start": "61359",
    "end": "65120"
  },
  {
    "start": "65000",
    "end": "119000"
  },
  {
    "text": "now i will also say that service meshes",
    "start": "67280",
    "end": "69920"
  },
  {
    "text": "are cool",
    "start": "69920",
    "end": "71119"
  },
  {
    "text": "as you know microservices is the name of",
    "start": "71119",
    "end": "73760"
  },
  {
    "text": "the game when you want to build",
    "start": "73760",
    "end": "75759"
  },
  {
    "text": "scalable and highly available",
    "start": "75759",
    "end": "77360"
  },
  {
    "text": "applications",
    "start": "77360",
    "end": "78799"
  },
  {
    "text": "so it is also known as service oriented",
    "start": "78799",
    "end": "82080"
  },
  {
    "text": "architecture",
    "start": "82080",
    "end": "83360"
  },
  {
    "text": "where a large application is divided",
    "start": "83360",
    "end": "86000"
  },
  {
    "text": "into",
    "start": "86000",
    "end": "86640"
  },
  {
    "text": "many small services that talk to each",
    "start": "86640",
    "end": "88799"
  },
  {
    "text": "other over the network",
    "start": "88799",
    "end": "90640"
  },
  {
    "text": "so this provides great agility in",
    "start": "90640",
    "end": "94000"
  },
  {
    "text": "developing and deploying parts of the",
    "start": "94000",
    "end": "96240"
  },
  {
    "text": "application independently",
    "start": "96240",
    "end": "98640"
  },
  {
    "text": "so but it comes with its own challenges",
    "start": "98640",
    "end": "101119"
  },
  {
    "text": "and complexities like",
    "start": "101119",
    "end": "102799"
  },
  {
    "text": "how to discover services um how requests",
    "start": "102799",
    "end": "106000"
  },
  {
    "text": "are load balanced to",
    "start": "106000",
    "end": "107600"
  },
  {
    "text": "many replicas of a service or how to",
    "start": "107600",
    "end": "110880"
  },
  {
    "text": "secure",
    "start": "110880",
    "end": "111600"
  },
  {
    "text": "the mesh or get insights into any issues",
    "start": "111600",
    "end": "115600"
  },
  {
    "text": "or",
    "start": "115600",
    "end": "116079"
  },
  {
    "text": "bottlenecks in the mesh",
    "start": "116079",
    "end": "119119"
  },
  {
    "start": "119000",
    "end": "144000"
  },
  {
    "text": "so these are common problems um on which",
    "start": "119680",
    "end": "122640"
  },
  {
    "text": "an",
    "start": "122640",
    "end": "122880"
  },
  {
    "text": "application developer should not be",
    "start": "122880",
    "end": "124399"
  },
  {
    "text": "wasting their time and that's where a",
    "start": "124399",
    "end": "126960"
  },
  {
    "text": "service mesh is very useful to solve",
    "start": "126960",
    "end": "130000"
  },
  {
    "text": "these issues",
    "start": "130000",
    "end": "130800"
  },
  {
    "text": "seamlessly so as an example um",
    "start": "130800",
    "end": "134000"
  },
  {
    "text": "check out istio which is an open source",
    "start": "134000",
    "end": "136560"
  },
  {
    "text": "service mesh",
    "start": "136560",
    "end": "137440"
  },
  {
    "text": "solution and that is gaining a lot of",
    "start": "137440",
    "end": "140400"
  },
  {
    "text": "popularity these days",
    "start": "140400",
    "end": "143840"
  },
  {
    "start": "144000",
    "end": "222000"
  },
  {
    "text": "um okay but where does grpc stand",
    "start": "144640",
    "end": "148560"
  },
  {
    "text": "with respect to service mesh",
    "start": "148560",
    "end": "150640"
  },
  {
    "text": "technologies",
    "start": "150640",
    "end": "152160"
  },
  {
    "text": "so out of the box grpc comes with a dns",
    "start": "152160",
    "end": "155680"
  },
  {
    "text": "resolver",
    "start": "155680",
    "end": "156959"
  },
  {
    "text": "and a very simple pick first or round",
    "start": "156959",
    "end": "160080"
  },
  {
    "text": "robin load balancing",
    "start": "160080",
    "end": "162080"
  },
  {
    "text": "so to do anything fancier um you have to",
    "start": "162080",
    "end": "165599"
  },
  {
    "text": "write your own resolver and load",
    "start": "165599",
    "end": "167200"
  },
  {
    "text": "balancing plugins",
    "start": "167200",
    "end": "168959"
  },
  {
    "text": "right the other option is to implement a",
    "start": "168959",
    "end": "172000"
  },
  {
    "text": "controller",
    "start": "172000",
    "end": "173200"
  },
  {
    "text": "that talks grpc lb protocol",
    "start": "173200",
    "end": "176720"
  },
  {
    "text": "and we also call it leukocyte load",
    "start": "176720",
    "end": "179440"
  },
  {
    "text": "balancer",
    "start": "179440",
    "end": "180560"
  },
  {
    "text": "and all the smartness is built into this",
    "start": "180560",
    "end": "182959"
  },
  {
    "text": "controller",
    "start": "182959",
    "end": "184239"
  },
  {
    "text": "which provides a flat list of end points",
    "start": "184239",
    "end": "187920"
  },
  {
    "text": "for a given service to a grpc client",
    "start": "187920",
    "end": "191280"
  },
  {
    "text": "which then does simple round robin load",
    "start": "191280",
    "end": "193599"
  },
  {
    "text": "balancing",
    "start": "193599",
    "end": "194959"
  },
  {
    "text": "right but unfortunately there is no open",
    "start": "194959",
    "end": "197840"
  },
  {
    "text": "source implementation available",
    "start": "197840",
    "end": "200000"
  },
  {
    "text": "so you will have to build your own such",
    "start": "200000",
    "end": "202000"
  },
  {
    "text": "controller",
    "start": "202000",
    "end": "203440"
  },
  {
    "text": "so also this protocol is very basic",
    "start": "203440",
    "end": "206480"
  },
  {
    "text": "and i would say it won't get you",
    "start": "206480",
    "end": "208640"
  },
  {
    "text": "anywhere close to",
    "start": "208640",
    "end": "209840"
  },
  {
    "text": "what a service mesh provides",
    "start": "209840",
    "end": "213040"
  },
  {
    "text": "so instead of evolving this protocol",
    "start": "213040",
    "end": "216400"
  },
  {
    "text": "it made sense to integrate with existing",
    "start": "216400",
    "end": "219120"
  },
  {
    "text": "mesh technologies",
    "start": "219120",
    "end": "222000"
  },
  {
    "start": "222000",
    "end": "288000"
  },
  {
    "text": "so before i talk about that",
    "start": "223599",
    "end": "227760"
  },
  {
    "text": "let's see how a grpc application is",
    "start": "227760",
    "end": "230879"
  },
  {
    "text": "deployed in a",
    "start": "230879",
    "end": "231840"
  },
  {
    "text": "service mesh today in a commonly used",
    "start": "231840",
    "end": "235840"
  },
  {
    "text": "model",
    "start": "235840",
    "end": "236879"
  },
  {
    "text": "and like any other application the grpc",
    "start": "236879",
    "end": "240000"
  },
  {
    "text": "application is deployed along with a",
    "start": "240000",
    "end": "242640"
  },
  {
    "text": "sidecar proxy",
    "start": "242640",
    "end": "244159"
  },
  {
    "text": "that intercepts the request the sidecar",
    "start": "244159",
    "end": "247200"
  },
  {
    "text": "proxy",
    "start": "247200",
    "end": "248560"
  },
  {
    "text": "gets service mesh policies from the",
    "start": "248560",
    "end": "250319"
  },
  {
    "text": "control plane",
    "start": "250319",
    "end": "251840"
  },
  {
    "text": "and apply them on the intercepted",
    "start": "251840",
    "end": "253360"
  },
  {
    "text": "requests so there is one",
    "start": "253360",
    "end": "255519"
  },
  {
    "text": "sidecar proxy on each end of the",
    "start": "255519",
    "end": "257680"
  },
  {
    "text": "connection",
    "start": "257680",
    "end": "258880"
  },
  {
    "text": "providing client-side and server-side",
    "start": "258880",
    "end": "261120"
  },
  {
    "text": "mesh functionality",
    "start": "261120",
    "end": "262880"
  },
  {
    "text": "right so like any other application",
    "start": "262880",
    "end": "266080"
  },
  {
    "text": "a grpc app client would do a",
    "start": "266080",
    "end": "269199"
  },
  {
    "text": "dns lookup of the service it is trying",
    "start": "269199",
    "end": "271680"
  },
  {
    "text": "to connect to",
    "start": "271680",
    "end": "272960"
  },
  {
    "text": "and open one connection to the virtual",
    "start": "272960",
    "end": "275120"
  },
  {
    "text": "ip of the service",
    "start": "275120",
    "end": "277520"
  },
  {
    "text": "so as you can see much of the",
    "start": "277520",
    "end": "280160"
  },
  {
    "text": "sophistication in the grpg stack",
    "start": "280160",
    "end": "282479"
  },
  {
    "text": "is not being used the sidecar proxy",
    "start": "282479",
    "end": "285360"
  },
  {
    "text": "takes care of everything",
    "start": "285360",
    "end": "288400"
  },
  {
    "start": "288000",
    "end": "338000"
  },
  {
    "text": "okay um with service mesh integration",
    "start": "288720",
    "end": "292560"
  },
  {
    "text": "um a grpc application would then",
    "start": "292560",
    "end": "296080"
  },
  {
    "text": "directly talk to the service mesh",
    "start": "296080",
    "end": "297600"
  },
  {
    "text": "control plane",
    "start": "297600",
    "end": "299280"
  },
  {
    "text": "now this looks similar to the look aside",
    "start": "299280",
    "end": "302639"
  },
  {
    "text": "grpc lb solution that i showed earlier",
    "start": "302639",
    "end": "306479"
  },
  {
    "text": "but here grpc would be talking a much",
    "start": "306479",
    "end": "309919"
  },
  {
    "text": "broader set of",
    "start": "309919",
    "end": "311919"
  },
  {
    "text": "data plane apis that enable supporting a",
    "start": "311919",
    "end": "314880"
  },
  {
    "text": "large number of features",
    "start": "314880",
    "end": "316720"
  },
  {
    "text": "available in a service mesh right so the",
    "start": "316720",
    "end": "319280"
  },
  {
    "text": "key thing to",
    "start": "319280",
    "end": "320240"
  },
  {
    "text": "note here is that we won't need a",
    "start": "320240",
    "end": "322720"
  },
  {
    "text": "sidecar proxy in the",
    "start": "322720",
    "end": "324000"
  },
  {
    "text": "middle so as you can see in the previous",
    "start": "324000",
    "end": "327039"
  },
  {
    "text": "um diagram there is a proxy on both",
    "start": "327039",
    "end": "329440"
  },
  {
    "text": "sides of the connection",
    "start": "329440",
    "end": "331360"
  },
  {
    "text": "and here we don't have it and that's why",
    "start": "331360",
    "end": "333840"
  },
  {
    "text": "we are calling it proxy less",
    "start": "333840",
    "end": "335280"
  },
  {
    "text": "grpc service mesh",
    "start": "335280",
    "end": "338400"
  },
  {
    "start": "338000",
    "end": "417000"
  },
  {
    "text": "so now the question is",
    "start": "338400",
    "end": "341680"
  },
  {
    "text": "which service mesh to use um so",
    "start": "341680",
    "end": "345039"
  },
  {
    "text": "it is not about picking a particular",
    "start": "345039",
    "end": "347280"
  },
  {
    "text": "service mesh solution",
    "start": "347280",
    "end": "349440"
  },
  {
    "text": "the lessons we learned from clb protocol",
    "start": "349440",
    "end": "352960"
  },
  {
    "text": "showed us that picking the right data",
    "start": "352960",
    "end": "354960"
  },
  {
    "text": "plane api is the most important thing",
    "start": "354960",
    "end": "357520"
  },
  {
    "text": "so data plane apis are used to exchange",
    "start": "357520",
    "end": "361520"
  },
  {
    "text": "configuration data between the control",
    "start": "361520",
    "end": "364160"
  },
  {
    "text": "plane",
    "start": "364160",
    "end": "364639"
  },
  {
    "text": "and the data plane components like the",
    "start": "364639",
    "end": "366560"
  },
  {
    "text": "proxies",
    "start": "366560",
    "end": "368639"
  },
  {
    "text": "in contrast control plane apis are used",
    "start": "368639",
    "end": "371360"
  },
  {
    "text": "to program the control plane itself",
    "start": "371360",
    "end": "374240"
  },
  {
    "text": "with information like what are the",
    "start": "374240",
    "end": "376880"
  },
  {
    "text": "services in the mesh",
    "start": "376880",
    "end": "378880"
  },
  {
    "text": "what are the routing policies and what",
    "start": "378880",
    "end": "381199"
  },
  {
    "text": "is the current state of the mesh",
    "start": "381199",
    "end": "383280"
  },
  {
    "text": "like which services are up which",
    "start": "383280",
    "end": "384639"
  },
  {
    "text": "services are down and so on",
    "start": "384639",
    "end": "386639"
  },
  {
    "text": "right so if we pick a widely used",
    "start": "386639",
    "end": "390319"
  },
  {
    "text": "data plane api then there will be",
    "start": "390319",
    "end": "393840"
  },
  {
    "text": "good choice of control planes to use",
    "start": "393840",
    "end": "396000"
  },
  {
    "text": "with your grpc applications",
    "start": "396000",
    "end": "398479"
  },
  {
    "text": "so obviously the api has to be open",
    "start": "398479",
    "end": "402560"
  },
  {
    "text": "and needs to have a strong community",
    "start": "402560",
    "end": "405199"
  },
  {
    "text": "support",
    "start": "405199",
    "end": "407120"
  },
  {
    "text": "also it should fit the current grpc",
    "start": "407120",
    "end": "410080"
  },
  {
    "text": "architecture",
    "start": "410080",
    "end": "411360"
  },
  {
    "text": "and align with our vision of no vendor",
    "start": "411360",
    "end": "414000"
  },
  {
    "text": "lock-in",
    "start": "414000",
    "end": "414639"
  },
  {
    "text": "right so",
    "start": "414639",
    "end": "417759"
  },
  {
    "start": "417000",
    "end": "453000"
  },
  {
    "text": "um xts apis fit the bill perfectly and",
    "start": "417840",
    "end": "422080"
  },
  {
    "text": "these apis were developed for",
    "start": "422080",
    "end": "424160"
  },
  {
    "text": "onboard proxy which is a very popular",
    "start": "424160",
    "end": "426880"
  },
  {
    "text": "proxy used in",
    "start": "426880",
    "end": "428160"
  },
  {
    "text": "many service mesh solutions like istio",
    "start": "428160",
    "end": "431360"
  },
  {
    "text": "and because of that xts apis have become",
    "start": "431360",
    "end": "434479"
  },
  {
    "text": "a",
    "start": "434479",
    "end": "435280"
  },
  {
    "text": "defect to standard for data plane apis",
    "start": "435280",
    "end": "439039"
  },
  {
    "text": "and there is also an effort going on to",
    "start": "439039",
    "end": "441759"
  },
  {
    "text": "evolve these apis",
    "start": "441759",
    "end": "443840"
  },
  {
    "text": "into universal data plane apis for",
    "start": "443840",
    "end": "446960"
  },
  {
    "text": "layer 4 to 7 data plane configuration",
    "start": "446960",
    "end": "451840"
  },
  {
    "start": "453000",
    "end": "620000"
  },
  {
    "text": "so i'll give you a quick overview of",
    "start": "454960",
    "end": "458319"
  },
  {
    "text": "what xts apis are so",
    "start": "458319",
    "end": "462000"
  },
  {
    "text": "these are a collection of apis to",
    "start": "462000",
    "end": "463919"
  },
  {
    "text": "discover various resources",
    "start": "463919",
    "end": "466000"
  },
  {
    "text": "in a service mesh hence the name xds",
    "start": "466000",
    "end": "469520"
  },
  {
    "text": "where",
    "start": "469520",
    "end": "470479"
  },
  {
    "text": "x stands for the type of resource like a",
    "start": "470479",
    "end": "473199"
  },
  {
    "text": "listener",
    "start": "473199",
    "end": "473759"
  },
  {
    "text": "a route a cluster or an endpoint",
    "start": "473759",
    "end": "477280"
  },
  {
    "text": "and and there is also a lot more",
    "start": "477280",
    "end": "479680"
  },
  {
    "text": "text-based apis than",
    "start": "479680",
    "end": "481520"
  },
  {
    "text": "what i'm showing in this diagram but",
    "start": "481520",
    "end": "483680"
  },
  {
    "text": "i'll keep it simple here",
    "start": "483680",
    "end": "486000"
  },
  {
    "text": "so you have a virtual service in a",
    "start": "486000",
    "end": "488560"
  },
  {
    "text": "service mesh",
    "start": "488560",
    "end": "490000"
  },
  {
    "text": "which is assigned a virtual ip and and",
    "start": "490000",
    "end": "493039"
  },
  {
    "text": "ports",
    "start": "493039",
    "end": "494080"
  },
  {
    "text": "on which the service listens and that is",
    "start": "494080",
    "end": "496560"
  },
  {
    "text": "called a whip",
    "start": "496560",
    "end": "498479"
  },
  {
    "text": "and when an application wants to send",
    "start": "498479",
    "end": "501039"
  },
  {
    "text": "request to a service",
    "start": "501039",
    "end": "502800"
  },
  {
    "text": "it does dns lookup and sends the request",
    "start": "502800",
    "end": "505440"
  },
  {
    "text": "to the virtual ip",
    "start": "505440",
    "end": "507120"
  },
  {
    "text": "which is the web here and this request",
    "start": "507120",
    "end": "509680"
  },
  {
    "text": "is then intercepted by the sidecar proxy",
    "start": "509680",
    "end": "513039"
  },
  {
    "text": "um so now the proxy needs to know uh",
    "start": "513039",
    "end": "515919"
  },
  {
    "text": "about such",
    "start": "515919",
    "end": "516800"
  },
  {
    "text": "virtual ips in the service mesh so it",
    "start": "516800",
    "end": "519599"
  },
  {
    "text": "can intercept such",
    "start": "519599",
    "end": "520560"
  },
  {
    "text": "traffic and apply the policies of those",
    "start": "520560",
    "end": "522959"
  },
  {
    "text": "services",
    "start": "522959",
    "end": "523680"
  },
  {
    "text": "correctly right um so that's where the",
    "start": "523680",
    "end": "526240"
  },
  {
    "text": "listener discovery request is used",
    "start": "526240",
    "end": "528800"
  },
  {
    "text": "to get the information about the virtual",
    "start": "528800",
    "end": "530640"
  },
  {
    "text": "ips",
    "start": "530640",
    "end": "532480"
  },
  {
    "text": "so now after intercepting the request",
    "start": "532480",
    "end": "535200"
  },
  {
    "text": "the proxy needs to know",
    "start": "535200",
    "end": "536959"
  },
  {
    "text": "how to route the traffic and what",
    "start": "536959",
    "end": "539760"
  },
  {
    "text": "policies to apply",
    "start": "539760",
    "end": "541279"
  },
  {
    "text": "so this information is obtained using",
    "start": "541279",
    "end": "544080"
  },
  {
    "text": "the",
    "start": "544080",
    "end": "544560"
  },
  {
    "text": "route discovery service the country",
    "start": "544560",
    "end": "548000"
  },
  {
    "text": "may include various rules like",
    "start": "548000",
    "end": "551120"
  },
  {
    "text": "match on header values um or a path",
    "start": "551120",
    "end": "554959"
  },
  {
    "text": "and then route to a particular cluster",
    "start": "554959",
    "end": "557680"
  },
  {
    "text": "and apply a particular timeout",
    "start": "557680",
    "end": "559600"
  },
  {
    "text": "or maybe insert a header right",
    "start": "559600",
    "end": "563279"
  },
  {
    "text": "so once the proxy knows which cluster",
    "start": "563279",
    "end": "565839"
  },
  {
    "text": "the",
    "start": "565839",
    "end": "566399"
  },
  {
    "text": "request needs to be sent to it then uses",
    "start": "566399",
    "end": "569600"
  },
  {
    "text": "cluster discovery service",
    "start": "569600",
    "end": "571440"
  },
  {
    "text": "to get cluster information like what is",
    "start": "571440",
    "end": "574720"
  },
  {
    "text": "the load balancing policies and what are",
    "start": "574720",
    "end": "576720"
  },
  {
    "text": "the",
    "start": "576720",
    "end": "577519"
  },
  {
    "text": "security policies if any right so",
    "start": "577519",
    "end": "580800"
  },
  {
    "text": "a cluster um is basically",
    "start": "580800",
    "end": "584160"
  },
  {
    "text": "the implementation of your service in",
    "start": "584160",
    "end": "586399"
  },
  {
    "text": "the form of end points",
    "start": "586399",
    "end": "588160"
  },
  {
    "text": "right so so the cluster is made up of",
    "start": "588160",
    "end": "590480"
  },
  {
    "text": "many endpoints",
    "start": "590480",
    "end": "591519"
  },
  {
    "text": "um that are the actual service instances",
    "start": "591519",
    "end": "594560"
  },
  {
    "text": "and these endpoints could be spread",
    "start": "594560",
    "end": "597440"
  },
  {
    "text": "across different zones on",
    "start": "597440",
    "end": "599040"
  },
  {
    "text": "and regions which are known as",
    "start": "599040",
    "end": "602000"
  },
  {
    "text": "localities",
    "start": "602000",
    "end": "602800"
  },
  {
    "text": "in in xds terms and that information is",
    "start": "602800",
    "end": "606560"
  },
  {
    "text": "obtained via",
    "start": "606560",
    "end": "607360"
  },
  {
    "text": "the endpoint discovery service so",
    "start": "607360",
    "end": "610399"
  },
  {
    "text": "as you can see um xts apis map very well",
    "start": "610399",
    "end": "614079"
  },
  {
    "text": "to",
    "start": "614079",
    "end": "614800"
  },
  {
    "text": "service mesh concepts that we are",
    "start": "614800",
    "end": "616720"
  },
  {
    "text": "familiar with right",
    "start": "616720",
    "end": "619839"
  },
  {
    "start": "620000",
    "end": "758000"
  },
  {
    "text": "so this is how the",
    "start": "620720",
    "end": "624079"
  },
  {
    "text": "implementation of xts in grpc looks like",
    "start": "624079",
    "end": "628000"
  },
  {
    "text": "it is not as scary as it looks",
    "start": "628000",
    "end": "631360"
  },
  {
    "text": "it is a very modular design that maps",
    "start": "631360",
    "end": "634880"
  },
  {
    "text": "the concepts of xts apis and integrates",
    "start": "634880",
    "end": "638000"
  },
  {
    "text": "well with the grpc client channel design",
    "start": "638000",
    "end": "641200"
  },
  {
    "text": "so there's a common xts client",
    "start": "641200",
    "end": "643760"
  },
  {
    "text": "implementation",
    "start": "643760",
    "end": "644959"
  },
  {
    "text": "on the left that talks to the xts server",
    "start": "644959",
    "end": "648480"
  },
  {
    "text": "so when you create a client channel in",
    "start": "648480",
    "end": "650320"
  },
  {
    "text": "grpc to connect to a service",
    "start": "650320",
    "end": "652880"
  },
  {
    "text": "you need to use the xds scheme instead",
    "start": "652880",
    "end": "655600"
  },
  {
    "text": "of the default",
    "start": "655600",
    "end": "656800"
  },
  {
    "text": "dns scheme and this scheme tells the",
    "start": "656800",
    "end": "660240"
  },
  {
    "text": "client channel",
    "start": "660240",
    "end": "661200"
  },
  {
    "text": "that an xts resolver needs to be created",
    "start": "661200",
    "end": "664240"
  },
  {
    "text": "in order to resolve the service name and",
    "start": "664240",
    "end": "667360"
  },
  {
    "text": "and then it sends an lds request to",
    "start": "667360",
    "end": "669360"
  },
  {
    "text": "resolve the name",
    "start": "669360",
    "end": "670800"
  },
  {
    "text": "so if the service exists then it uses",
    "start": "670800",
    "end": "673200"
  },
  {
    "text": "rds",
    "start": "673200",
    "end": "674560"
  },
  {
    "text": "to get the routing rules associated with",
    "start": "674560",
    "end": "677120"
  },
  {
    "text": "that service",
    "start": "677120",
    "end": "678880"
  },
  {
    "text": "so a routing lb policy is then created",
    "start": "678880",
    "end": "682160"
  },
  {
    "text": "to match the rpcs against the match",
    "start": "682160",
    "end": "684720"
  },
  {
    "text": "rules",
    "start": "684720",
    "end": "685600"
  },
  {
    "text": "right so so based on the route action of",
    "start": "685600",
    "end": "687680"
  },
  {
    "text": "the match rule",
    "start": "687680",
    "end": "689040"
  },
  {
    "text": "a traffic splitting policy or a a single",
    "start": "689040",
    "end": "692000"
  },
  {
    "text": "cluster load balancing policy is created",
    "start": "692000",
    "end": "694800"
  },
  {
    "text": "and as i said earlier a cluster is made",
    "start": "694800",
    "end": "697760"
  },
  {
    "text": "of end points in different localities",
    "start": "697760",
    "end": "700560"
  },
  {
    "text": "so the rest of the policies in the chain",
    "start": "700560",
    "end": "703120"
  },
  {
    "text": "map to picking",
    "start": "703120",
    "end": "704240"
  },
  {
    "text": "localities and then end points within",
    "start": "704240",
    "end": "706320"
  },
  {
    "text": "those localities",
    "start": "706320",
    "end": "707519"
  },
  {
    "text": "right so the common xts client instance",
    "start": "707519",
    "end": "711040"
  },
  {
    "text": "is responsible for talking to the xts",
    "start": "711040",
    "end": "713600"
  },
  {
    "text": "server",
    "start": "713600",
    "end": "714480"
  },
  {
    "text": "um and and then give the discovery",
    "start": "714480",
    "end": "717839"
  },
  {
    "text": "service data",
    "start": "717839",
    "end": "718800"
  },
  {
    "text": "to the resolver and the load balancing",
    "start": "718800",
    "end": "721040"
  },
  {
    "text": "plugins as needed",
    "start": "721040",
    "end": "723920"
  },
  {
    "text": "so the xts client keeps a bidirectional",
    "start": "723920",
    "end": "726800"
  },
  {
    "text": "grpc stream",
    "start": "726800",
    "end": "727920"
  },
  {
    "text": "open with the xds server so that the",
    "start": "727920",
    "end": "730240"
  },
  {
    "text": "server can push",
    "start": "730240",
    "end": "731920"
  },
  {
    "text": "configuration and state changes in real",
    "start": "731920",
    "end": "734399"
  },
  {
    "text": "time",
    "start": "734399",
    "end": "735920"
  },
  {
    "text": "so also the grpc client reports",
    "start": "735920",
    "end": "738959"
  },
  {
    "text": "some metrics to the xds server via the",
    "start": "738959",
    "end": "741760"
  },
  {
    "text": "load reporting service",
    "start": "741760",
    "end": "743519"
  },
  {
    "text": "which is also part of the xds apis so",
    "start": "743519",
    "end": "747120"
  },
  {
    "text": "i will not go into more details here but",
    "start": "747120",
    "end": "749680"
  },
  {
    "text": "feel free to",
    "start": "749680",
    "end": "750720"
  },
  {
    "text": "look up the design docs if you are",
    "start": "750720",
    "end": "752639"
  },
  {
    "text": "interested",
    "start": "752639",
    "end": "753760"
  },
  {
    "text": "the links are provided in the last slide",
    "start": "753760",
    "end": "759040"
  },
  {
    "start": "758000",
    "end": "836000"
  },
  {
    "text": "okay so how do you enable xts",
    "start": "759040",
    "end": "763040"
  },
  {
    "text": "in your grpc applications and go proxy",
    "start": "763040",
    "end": "765680"
  },
  {
    "text": "less",
    "start": "765680",
    "end": "766880"
  },
  {
    "text": "it is quite easy instead of using the",
    "start": "766880",
    "end": "770079"
  },
  {
    "text": "default scheme when you create a channel",
    "start": "770079",
    "end": "773200"
  },
  {
    "text": "um just use the new xds scheme that",
    "start": "773200",
    "end": "776079"
  },
  {
    "text": "tells the client channel",
    "start": "776079",
    "end": "777760"
  },
  {
    "text": "to start an xts resolver instead of a",
    "start": "777760",
    "end": "780160"
  },
  {
    "text": "dns resolver",
    "start": "780160",
    "end": "781519"
  },
  {
    "text": "right so in this example you can see how",
    "start": "781519",
    "end": "784399"
  },
  {
    "text": "xds scheme is used",
    "start": "784399",
    "end": "785760"
  },
  {
    "text": "to connect to a service called foo dot",
    "start": "785760",
    "end": "788800"
  },
  {
    "text": "my service",
    "start": "788800",
    "end": "790160"
  },
  {
    "text": "right but then how does a grpc",
    "start": "790160",
    "end": "792959"
  },
  {
    "text": "application know",
    "start": "792959",
    "end": "795600"
  },
  {
    "text": "which xts server to talk to so the",
    "start": "795600",
    "end": "798880"
  },
  {
    "text": "address and the credentials of the xts",
    "start": "798880",
    "end": "800880"
  },
  {
    "text": "server",
    "start": "800880",
    "end": "801600"
  },
  {
    "text": "needs to be provided via a bootstrap",
    "start": "801600",
    "end": "803760"
  },
  {
    "text": "file in the",
    "start": "803760",
    "end": "804639"
  },
  {
    "text": "local file system and the location of",
    "start": "804639",
    "end": "806959"
  },
  {
    "text": "the file is provided via",
    "start": "806959",
    "end": "808800"
  },
  {
    "text": "an environment variable called grpc",
    "start": "808800",
    "end": "812079"
  },
  {
    "text": "xts bootstrap so the bootstrap can",
    "start": "812079",
    "end": "815680"
  },
  {
    "text": "contain",
    "start": "815680",
    "end": "816880"
  },
  {
    "text": "some other information such as a unique",
    "start": "816880",
    "end": "819680"
  },
  {
    "text": "client id",
    "start": "819680",
    "end": "821519"
  },
  {
    "text": "its locality and any other data that is",
    "start": "821519",
    "end": "825120"
  },
  {
    "text": "relevant to a particular xds server",
    "start": "825120",
    "end": "827600"
  },
  {
    "text": "implementation",
    "start": "827600",
    "end": "829120"
  },
  {
    "text": "such as a project number or a or a",
    "start": "829120",
    "end": "832000"
  },
  {
    "text": "network number",
    "start": "832000",
    "end": "834000"
  },
  {
    "text": "so",
    "start": "834000",
    "end": "836240"
  },
  {
    "text": "and that's it and it is that simple",
    "start": "837040",
    "end": "840480"
  },
  {
    "text": "you can pick xts or dns resolver scheme",
    "start": "840480",
    "end": "843680"
  },
  {
    "text": "on a per channel basis so this means",
    "start": "843680",
    "end": "846720"
  },
  {
    "text": "you can connect to some services via a",
    "start": "846720",
    "end": "849040"
  },
  {
    "text": "proxy",
    "start": "849040",
    "end": "850480"
  },
  {
    "text": "while connecting to some other services",
    "start": "850480",
    "end": "852880"
  },
  {
    "text": "directly without a proxy",
    "start": "852880",
    "end": "855040"
  },
  {
    "text": "so this makes it easy to slowly migrate",
    "start": "855040",
    "end": "858079"
  },
  {
    "text": "to",
    "start": "858079",
    "end": "858720"
  },
  {
    "text": "proxy-less grpc right",
    "start": "858720",
    "end": "863040"
  },
  {
    "text": "so so what are the advantages of going",
    "start": "863680",
    "end": "865920"
  },
  {
    "start": "864000",
    "end": "975000"
  },
  {
    "text": "proxy-less",
    "start": "865920",
    "end": "867760"
  },
  {
    "text": "so well you get a better qps and",
    "start": "867760",
    "end": "871360"
  },
  {
    "text": "lower latency because you have two less",
    "start": "871360",
    "end": "873920"
  },
  {
    "text": "proxies in the path",
    "start": "873920",
    "end": "875920"
  },
  {
    "text": "and one on the client side and one on",
    "start": "875920",
    "end": "877600"
  },
  {
    "text": "the server side right",
    "start": "877600",
    "end": "879120"
  },
  {
    "text": "and as the size of your service mesh",
    "start": "879120",
    "end": "882079"
  },
  {
    "text": "grows",
    "start": "882079",
    "end": "883279"
  },
  {
    "text": "it becomes less efficient and scalable",
    "start": "883279",
    "end": "885519"
  },
  {
    "text": "to have a proxy",
    "start": "885519",
    "end": "887120"
  },
  {
    "text": "with each service and proxies require",
    "start": "887120",
    "end": "891120"
  },
  {
    "text": "some performance tuning to avoid",
    "start": "891120",
    "end": "893440"
  },
  {
    "text": "impedance mismatch with the applications",
    "start": "893440",
    "end": "896480"
  },
  {
    "text": "so you could have a fast application",
    "start": "896480",
    "end": "899120"
  },
  {
    "text": "bottlenecked by a slow proxy",
    "start": "899120",
    "end": "901199"
  },
  {
    "text": "right so and also a sidecar proxy",
    "start": "901199",
    "end": "903680"
  },
  {
    "text": "requires a",
    "start": "903680",
    "end": "904959"
  },
  {
    "text": "complex set of ip filter rules",
    "start": "904959",
    "end": "908000"
  },
  {
    "text": "for intercepting traffic that are not",
    "start": "908000",
    "end": "910160"
  },
  {
    "text": "needed in a",
    "start": "910160",
    "end": "911120"
  },
  {
    "text": "proxy list deployment and because the",
    "start": "911120",
    "end": "914399"
  },
  {
    "text": "grpc uses xts to resolve a service name",
    "start": "914399",
    "end": "918639"
  },
  {
    "text": "you can even get away without",
    "start": "918639",
    "end": "920079"
  },
  {
    "text": "configuring dns entries for the services",
    "start": "920079",
    "end": "924320"
  },
  {
    "text": "also proxies are additional binaries",
    "start": "924320",
    "end": "926800"
  },
  {
    "text": "running in your service mesh",
    "start": "926800",
    "end": "928880"
  },
  {
    "text": "so there is an overhead of life cycle",
    "start": "928880",
    "end": "931600"
  },
  {
    "text": "management",
    "start": "931600",
    "end": "932720"
  },
  {
    "text": "like deploying upgrading health checking",
    "start": "932720",
    "end": "936160"
  },
  {
    "text": "and dealing with security issues",
    "start": "936160",
    "end": "939839"
  },
  {
    "text": "and that also makes it harder to deploy",
    "start": "939839",
    "end": "941839"
  },
  {
    "text": "in vms",
    "start": "941839",
    "end": "943199"
  },
  {
    "text": "compared to parts so",
    "start": "943199",
    "end": "946560"
  },
  {
    "text": "with proxies grpc you don't have these",
    "start": "946560",
    "end": "948959"
  },
  {
    "text": "issues",
    "start": "948959",
    "end": "949759"
  },
  {
    "text": "which makes it easier to migrate your",
    "start": "949759",
    "end": "952240"
  },
  {
    "text": "grpc applications to a service",
    "start": "952240",
    "end": "954000"
  },
  {
    "text": "mesh and many service mesh solutions",
    "start": "954000",
    "end": "957360"
  },
  {
    "text": "use xts apis so there is a great value",
    "start": "957360",
    "end": "960720"
  },
  {
    "text": "add",
    "start": "960720",
    "end": "961360"
  },
  {
    "text": "if you are already invested in grpc",
    "start": "961360",
    "end": "965199"
  },
  {
    "text": "or if you are thinking of adopting it so",
    "start": "965199",
    "end": "968000"
  },
  {
    "text": "this kind of proxy less model",
    "start": "968000",
    "end": "969680"
  },
  {
    "text": "is used at many companies to build",
    "start": "969680",
    "end": "972320"
  },
  {
    "text": "global scale services",
    "start": "972320",
    "end": "975519"
  },
  {
    "start": "975000",
    "end": "1073000"
  },
  {
    "text": "so so what are the downsides um",
    "start": "975519",
    "end": "979279"
  },
  {
    "text": "so mature proxies like envoy are very",
    "start": "979279",
    "end": "982320"
  },
  {
    "text": "feature rich",
    "start": "982320",
    "end": "983360"
  },
  {
    "text": "and there is a large ecosystem of",
    "start": "983360",
    "end": "985600"
  },
  {
    "text": "third-party filters",
    "start": "985600",
    "end": "987519"
  },
  {
    "text": "and tools especially in the area of",
    "start": "987519",
    "end": "989680"
  },
  {
    "text": "observability",
    "start": "989680",
    "end": "991600"
  },
  {
    "text": "but we are actively working on adding",
    "start": "991600",
    "end": "993680"
  },
  {
    "text": "more features in grpc",
    "start": "993680",
    "end": "995519"
  },
  {
    "text": "to close the feature gap",
    "start": "995519",
    "end": "999040"
  },
  {
    "text": "so note that grpc provides extensibility",
    "start": "999040",
    "end": "1002880"
  },
  {
    "text": "with interceptors and there is a good",
    "start": "1002880",
    "end": "1006320"
  },
  {
    "text": "open sensors and open tracing",
    "start": "1006320",
    "end": "1008160"
  },
  {
    "text": "integration for observability",
    "start": "1008160",
    "end": "1011519"
  },
  {
    "text": "the other downside is to get xts",
    "start": "1011519",
    "end": "1013920"
  },
  {
    "text": "functionality",
    "start": "1013920",
    "end": "1014800"
  },
  {
    "text": "you will need to be able to upgrade grpc",
    "start": "1014800",
    "end": "1018320"
  },
  {
    "text": "version",
    "start": "1018320",
    "end": "1018959"
  },
  {
    "text": "and rebuild your applications so this is",
    "start": "1018959",
    "end": "1021839"
  },
  {
    "text": "usually not an issue",
    "start": "1021839",
    "end": "1023759"
  },
  {
    "text": "because developers building",
    "start": "1023759",
    "end": "1025678"
  },
  {
    "text": "microservices based applications",
    "start": "1025679",
    "end": "1028319"
  },
  {
    "text": "typically have a good ci cd",
    "start": "1028319",
    "end": "1030798"
  },
  {
    "text": "infrastructure",
    "start": "1030799",
    "end": "1032558"
  },
  {
    "text": "also you can continue to use proxies",
    "start": "1032559",
    "end": "1035600"
  },
  {
    "text": "with applications",
    "start": "1035600",
    "end": "1036720"
  },
  {
    "text": "that cannot be upgraded because as i",
    "start": "1036720",
    "end": "1039438"
  },
  {
    "text": "talked earlier",
    "start": "1039439",
    "end": "1040959"
  },
  {
    "text": "it is easy to mix and match proxy and",
    "start": "1040959",
    "end": "1044000"
  },
  {
    "text": "proxies deployments",
    "start": "1044000",
    "end": "1046640"
  },
  {
    "text": "so the language support may be an issue",
    "start": "1046640",
    "end": "1049200"
  },
  {
    "text": "for you",
    "start": "1049200",
    "end": "1050960"
  },
  {
    "text": "we already support c plus plus java",
    "start": "1050960",
    "end": "1054240"
  },
  {
    "text": "go python php uh ruby and c-sharp",
    "start": "1054240",
    "end": "1058240"
  },
  {
    "text": "um any grpc implementation that wraps",
    "start": "1058240",
    "end": "1061520"
  },
  {
    "text": "c core uh for example python",
    "start": "1061520",
    "end": "1064720"
  },
  {
    "text": "gets xtr support for free so such an",
    "start": "1064720",
    "end": "1067679"
  },
  {
    "text": "implementation",
    "start": "1067679",
    "end": "1068559"
  },
  {
    "text": "just needs to upgrade its core version",
    "start": "1068559",
    "end": "1073039"
  },
  {
    "start": "1073000",
    "end": "1124000"
  },
  {
    "text": "so so where are we now",
    "start": "1073039",
    "end": "1076160"
  },
  {
    "text": "um so in the past year",
    "start": "1076160",
    "end": "1079600"
  },
  {
    "text": "the grpc team at google has been working",
    "start": "1079600",
    "end": "1082880"
  },
  {
    "text": "hard to make",
    "start": "1082880",
    "end": "1084320"
  },
  {
    "text": "proxy less service measure reality right",
    "start": "1084320",
    "end": "1086880"
  },
  {
    "text": "and i'm happy to say that",
    "start": "1086880",
    "end": "1088559"
  },
  {
    "text": "we recently released a 1.30 version",
    "start": "1088559",
    "end": "1091760"
  },
  {
    "text": "that supports xts protocol for service",
    "start": "1091760",
    "end": "1094720"
  },
  {
    "text": "discovery and",
    "start": "1094720",
    "end": "1095600"
  },
  {
    "text": "endpoint load balancing we are also",
    "start": "1095600",
    "end": "1098559"
  },
  {
    "text": "making good progress on adding",
    "start": "1098559",
    "end": "1100880"
  },
  {
    "text": "route matching based on path and header",
    "start": "1100880",
    "end": "1102880"
  },
  {
    "text": "values",
    "start": "1102880",
    "end": "1104000"
  },
  {
    "text": "and splitting traffic to multiple",
    "start": "1104000",
    "end": "1106840"
  },
  {
    "text": "clusters",
    "start": "1106840",
    "end": "1108080"
  },
  {
    "text": "there are several other features in the",
    "start": "1108080",
    "end": "1110320"
  },
  {
    "text": "design phase",
    "start": "1110320",
    "end": "1111360"
  },
  {
    "text": "and we are migrating from xts version 2",
    "start": "1111360",
    "end": "1114160"
  },
  {
    "text": "to version 3",
    "start": "1114160",
    "end": "1115200"
  },
  {
    "text": "sometime this year so you can watch the",
    "start": "1115200",
    "end": "1117919"
  },
  {
    "text": "progress on github",
    "start": "1117919",
    "end": "1119600"
  },
  {
    "text": "and you are very welcome to contribute",
    "start": "1119600",
    "end": "1123840"
  },
  {
    "start": "1124000",
    "end": "1330000"
  },
  {
    "text": "so with this i will",
    "start": "1124080",
    "end": "1127200"
  },
  {
    "text": "switch to a demo of xts functionality",
    "start": "1127200",
    "end": "1130320"
  },
  {
    "text": "using",
    "start": "1130320",
    "end": "1131200"
  },
  {
    "text": "grpc hello world application i'll be",
    "start": "1131200",
    "end": "1134400"
  },
  {
    "text": "using",
    "start": "1134400",
    "end": "1135280"
  },
  {
    "text": "google cloud managed service mesh",
    "start": "1135280",
    "end": "1137360"
  },
  {
    "text": "controller called",
    "start": "1137360",
    "end": "1138640"
  },
  {
    "text": "traffic director that speaks xds",
    "start": "1138640",
    "end": "1141039"
  },
  {
    "text": "protocol",
    "start": "1141039",
    "end": "1143600"
  },
  {
    "text": "i will now do a quick demo using traffic",
    "start": "1144559",
    "end": "1146720"
  },
  {
    "text": "director which is a google cloud managed",
    "start": "1146720",
    "end": "1149679"
  },
  {
    "text": "service mesh control plane i have",
    "start": "1149679",
    "end": "1152320"
  },
  {
    "text": "pre-configured a service called hello",
    "start": "1152320",
    "end": "1154000"
  },
  {
    "text": "world gce in traffic director",
    "start": "1154000",
    "end": "1156640"
  },
  {
    "text": "and i have also configured a cluster for",
    "start": "1156640",
    "end": "1158480"
  },
  {
    "text": "this service",
    "start": "1158480",
    "end": "1159679"
  },
  {
    "text": "whose backend instances are in two",
    "start": "1159679",
    "end": "1161360"
  },
  {
    "text": "regions",
    "start": "1161360",
    "end": "1162960"
  },
  {
    "text": "the top left two windows are instances",
    "start": "1162960",
    "end": "1165039"
  },
  {
    "text": "in the central region",
    "start": "1165039",
    "end": "1166160"
  },
  {
    "text": "and the bottom two are instances in the",
    "start": "1166160",
    "end": "1168320"
  },
  {
    "text": "west region",
    "start": "1168320",
    "end": "1170080"
  },
  {
    "text": "the client is in the central region and",
    "start": "1170080",
    "end": "1172880"
  },
  {
    "text": "it is using the xds scheme",
    "start": "1172880",
    "end": "1174880"
  },
  {
    "text": "to connect to the hello world gce",
    "start": "1174880",
    "end": "1176840"
  },
  {
    "text": "service",
    "start": "1176840",
    "end": "1178480"
  },
  {
    "text": "since traffic director also speaks xds",
    "start": "1178480",
    "end": "1181520"
  },
  {
    "text": "the grpc client is able to get the",
    "start": "1181520",
    "end": "1184000"
  },
  {
    "text": "cluster and backend information from",
    "start": "1184000",
    "end": "1185760"
  },
  {
    "text": "traffic director",
    "start": "1185760",
    "end": "1187760"
  },
  {
    "text": "and traffic director also provides",
    "start": "1187760",
    "end": "1189760"
  },
  {
    "text": "global load balancing",
    "start": "1189760",
    "end": "1191440"
  },
  {
    "text": "such that the requests are sent to the",
    "start": "1191440",
    "end": "1193280"
  },
  {
    "text": "closest zone",
    "start": "1193280",
    "end": "1196000"
  },
  {
    "text": "you can see that the client is now",
    "start": "1196000",
    "end": "1198799"
  },
  {
    "text": "sending requests to back-ends",
    "start": "1198799",
    "end": "1200559"
  },
  {
    "text": "in the central zone as that is the",
    "start": "1200559",
    "end": "1202799"
  },
  {
    "text": "closest zone",
    "start": "1202799",
    "end": "1207840"
  },
  {
    "text": "now i will stop the back ends in the",
    "start": "1208480",
    "end": "1211120"
  },
  {
    "text": "central zone",
    "start": "1211120",
    "end": "1212960"
  },
  {
    "text": "and you will see that the requests have",
    "start": "1212960",
    "end": "1216159"
  },
  {
    "text": "immediately failed over to",
    "start": "1216159",
    "end": "1218880"
  },
  {
    "text": "the back ends in the west zone",
    "start": "1218880",
    "end": "1222480"
  },
  {
    "text": "the failover to another region is quite",
    "start": "1222640",
    "end": "1224559"
  },
  {
    "text": "fast",
    "start": "1224559",
    "end": "1225919"
  },
  {
    "text": "this is because the client received",
    "start": "1225919",
    "end": "1227840"
  },
  {
    "text": "assignments for all the zones",
    "start": "1227840",
    "end": "1230400"
  },
  {
    "text": "but with different priorities the",
    "start": "1230400",
    "end": "1232799"
  },
  {
    "text": "central zone was in the highest priority",
    "start": "1232799",
    "end": "1236559"
  },
  {
    "text": "because it was closest to the client and",
    "start": "1236559",
    "end": "1239039"
  },
  {
    "text": "once it failed",
    "start": "1239039",
    "end": "1240080"
  },
  {
    "text": "the client immediately switched to the",
    "start": "1240080",
    "end": "1241760"
  },
  {
    "text": "next priority zone",
    "start": "1241760",
    "end": "1244880"
  },
  {
    "text": "now i will restart the service in the",
    "start": "1244880",
    "end": "1247760"
  },
  {
    "text": "central zone",
    "start": "1247760",
    "end": "1249280"
  },
  {
    "text": "and we will see that in a few seconds",
    "start": "1249280",
    "end": "1253120"
  },
  {
    "text": "the request will fail back to the",
    "start": "1253120",
    "end": "1256640"
  },
  {
    "text": "central zone",
    "start": "1256640",
    "end": "1259360"
  },
  {
    "text": "i have configured grpc health health",
    "start": "1260480",
    "end": "1263520"
  },
  {
    "text": "check services here",
    "start": "1263520",
    "end": "1265039"
  },
  {
    "text": "to check the health of the backends the",
    "start": "1265039",
    "end": "1267520"
  },
  {
    "text": "traffic director looks at the health of",
    "start": "1267520",
    "end": "1269120"
  },
  {
    "text": "the backends",
    "start": "1269120",
    "end": "1269919"
  },
  {
    "text": "before including them in the eds",
    "start": "1269919",
    "end": "1272480"
  },
  {
    "text": "response",
    "start": "1272480",
    "end": "1274799"
  },
  {
    "text": "so here now you can see that the",
    "start": "1274799",
    "end": "1277120"
  },
  {
    "text": "requests have started",
    "start": "1277120",
    "end": "1279120"
  },
  {
    "text": "coming back to the central zone",
    "start": "1279120",
    "end": "1282400"
  },
  {
    "text": "and now the client is",
    "start": "1282400",
    "end": "1285760"
  },
  {
    "text": "not sending any request to the west zone",
    "start": "1285760",
    "end": "1291840"
  },
  {
    "text": "okay i would also like to quickly show",
    "start": "1292960",
    "end": "1295360"
  },
  {
    "text": "the",
    "start": "1295360",
    "end": "1296159"
  },
  {
    "text": "bootstrap file that this client is using",
    "start": "1296159",
    "end": "1300559"
  },
  {
    "text": "this is a sample bootstrap file you can",
    "start": "1300559",
    "end": "1303679"
  },
  {
    "text": "see that",
    "start": "1303679",
    "end": "1304880"
  },
  {
    "text": "there is an address to the xds server",
    "start": "1304880",
    "end": "1307919"
  },
  {
    "text": "and there is some node id which is",
    "start": "1307919",
    "end": "1310880"
  },
  {
    "text": "basically a unique string that you can",
    "start": "1310880",
    "end": "1312880"
  },
  {
    "text": "set to any value",
    "start": "1312880",
    "end": "1314559"
  },
  {
    "text": "and there is also a metadata which the",
    "start": "1314559",
    "end": "1318240"
  },
  {
    "text": "xts server uses to",
    "start": "1318240",
    "end": "1320080"
  },
  {
    "text": "identify the client for example the",
    "start": "1320080",
    "end": "1322960"
  },
  {
    "text": "project number",
    "start": "1322960",
    "end": "1324080"
  },
  {
    "text": "and the network name",
    "start": "1324080",
    "end": "1327200"
  },
  {
    "text": "and that concludes this demo",
    "start": "1327200",
    "end": "1330559"
  },
  {
    "start": "1330000",
    "end": "1349000"
  },
  {
    "text": "so uh that brings us to the end of this",
    "start": "1330559",
    "end": "1333280"
  },
  {
    "text": "presentation",
    "start": "1333280",
    "end": "1334080"
  },
  {
    "text": "um these are some useful links",
    "start": "1334080",
    "end": "1337520"
  },
  {
    "text": "uh if you have any questions or feedback",
    "start": "1337520",
    "end": "1339919"
  },
  {
    "text": "uh please use the link provided here to",
    "start": "1339919",
    "end": "1342000"
  },
  {
    "text": "reach me",
    "start": "1342000",
    "end": "1343039"
  },
  {
    "text": "um thank you for listening and we now",
    "start": "1343039",
    "end": "1345280"
  },
  {
    "text": "open up for questions",
    "start": "1345280",
    "end": "1351760"
  }
]