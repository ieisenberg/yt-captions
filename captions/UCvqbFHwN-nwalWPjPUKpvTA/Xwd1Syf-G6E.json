[
  {
    "text": "hello everyone welcome to design",
    "start": "399",
    "end": "2399"
  },
  {
    "text": "patterns for extensible scalable",
    "start": "2399",
    "end": "4319"
  },
  {
    "text": "kubernetes extensions",
    "start": "4319",
    "end": "6000"
  },
  {
    "text": "i'm rita jang i'm a software engineer at",
    "start": "6000",
    "end": "8320"
  },
  {
    "text": "microsoft",
    "start": "8320",
    "end": "9599"
  },
  {
    "text": "and i'm max smith a software engineer at",
    "start": "9599",
    "end": "12080"
  },
  {
    "text": "google",
    "start": "12080",
    "end": "13519"
  },
  {
    "text": "we are both maintainers of the",
    "start": "13519",
    "end": "15599"
  },
  {
    "text": "gatekeeper project",
    "start": "15599",
    "end": "16960"
  },
  {
    "text": "and today we wanted to take a look at",
    "start": "16960",
    "end": "19920"
  },
  {
    "text": "some of the design patterns underlying",
    "start": "19920",
    "end": "21680"
  },
  {
    "text": "gatekeeper and how they allowed us to",
    "start": "21680",
    "end": "23840"
  },
  {
    "text": "create",
    "start": "23840",
    "end": "24640"
  },
  {
    "text": "an extensible scalable kubernetes",
    "start": "24640",
    "end": "27279"
  },
  {
    "text": "extension",
    "start": "27279",
    "end": "28400"
  },
  {
    "text": "because there are a lot of topics to",
    "start": "28400",
    "end": "30080"
  },
  {
    "text": "cover this talk will mostly cover",
    "start": "30080",
    "end": "32398"
  },
  {
    "text": "high-level concepts but first what is",
    "start": "32399",
    "end": "35920"
  },
  {
    "text": "gatekeeper",
    "start": "35920",
    "end": "37200"
  },
  {
    "text": "gatekeeper is a customizable kubernetes",
    "start": "37200",
    "end": "40000"
  },
  {
    "text": "mission web hook that helps",
    "start": "40000",
    "end": "41760"
  },
  {
    "text": "enforce policies and strength and",
    "start": "41760",
    "end": "43520"
  },
  {
    "text": "governance let's take a look",
    "start": "43520",
    "end": "46239"
  },
  {
    "text": "at the way it does this before we dig",
    "start": "46239",
    "end": "48480"
  },
  {
    "text": "into how the pieces work",
    "start": "48480",
    "end": "51840"
  },
  {
    "text": "gatekeeper supports both audit time and",
    "start": "52000",
    "end": "55199"
  },
  {
    "text": "admission time checks",
    "start": "55199",
    "end": "56640"
  },
  {
    "text": "but today we're going to focus on",
    "start": "56640",
    "end": "58719"
  },
  {
    "text": "admission time specifically",
    "start": "58719",
    "end": "60559"
  },
  {
    "text": "serving the kubernetes admission web",
    "start": "60559",
    "end": "62640"
  },
  {
    "text": "hook",
    "start": "62640",
    "end": "63680"
  },
  {
    "text": "this diagram is a high level model",
    "start": "63680",
    "end": "66880"
  },
  {
    "text": "of how gatekeeper serves admission",
    "start": "66880",
    "end": "68799"
  },
  {
    "text": "requests",
    "start": "68799",
    "end": "70080"
  },
  {
    "text": "when something makes a request to the",
    "start": "70080",
    "end": "72479"
  },
  {
    "text": "api server so for example",
    "start": "72479",
    "end": "74560"
  },
  {
    "text": "a user making a cube cuddle request the",
    "start": "74560",
    "end": "77759"
  },
  {
    "text": "api",
    "start": "77759",
    "end": "78400"
  },
  {
    "text": "server receives that request and sends",
    "start": "78400",
    "end": "81200"
  },
  {
    "text": "an admission request",
    "start": "81200",
    "end": "82560"
  },
  {
    "text": "to gatekeepers validating webhook it's",
    "start": "82560",
    "end": "85759"
  },
  {
    "text": "asking gatekeeper hey should i allow",
    "start": "85759",
    "end": "88720"
  },
  {
    "text": "this request to proceed",
    "start": "88720",
    "end": "90240"
  },
  {
    "text": "right and gatekeeper must answer either",
    "start": "90240",
    "end": "92720"
  },
  {
    "text": "yes",
    "start": "92720",
    "end": "93520"
  },
  {
    "text": "or no and to do this gatekeeper consults",
    "start": "93520",
    "end": "97360"
  },
  {
    "text": "its policy configuration which is the",
    "start": "97360",
    "end": "99680"
  },
  {
    "text": "large gray box at the bottom of the",
    "start": "99680",
    "end": "102159"
  },
  {
    "text": "slide",
    "start": "102159",
    "end": "103439"
  },
  {
    "text": "the green objects that are labeled",
    "start": "103439",
    "end": "105439"
  },
  {
    "text": "constraint",
    "start": "105439",
    "end": "106720"
  },
  {
    "text": "tell the web hook what checks an admin",
    "start": "106720",
    "end": "109040"
  },
  {
    "text": "wants to perform",
    "start": "109040",
    "end": "110640"
  },
  {
    "text": "and constraints rely on templates which",
    "start": "110640",
    "end": "113680"
  },
  {
    "text": "are the blue documents",
    "start": "113680",
    "end": "115119"
  },
  {
    "text": "to tell the system exactly how to",
    "start": "115119",
    "end": "117520"
  },
  {
    "text": "perform the check",
    "start": "117520",
    "end": "118880"
  },
  {
    "text": "for example they might say labels live",
    "start": "118880",
    "end": "122000"
  },
  {
    "text": "in metadata.labels so that's where you",
    "start": "122000",
    "end": "124640"
  },
  {
    "text": "should",
    "start": "124640",
    "end": "125200"
  },
  {
    "text": "validate labels",
    "start": "125200",
    "end": "128640"
  },
  {
    "text": "the notions of gatekeeper the web hook",
    "start": "128640",
    "end": "130879"
  },
  {
    "text": "constraints and templates",
    "start": "130879",
    "end": "132640"
  },
  {
    "text": "underlie gatekeepers philosophy that",
    "start": "132640",
    "end": "135280"
  },
  {
    "text": "policy",
    "start": "135280",
    "end": "136000"
  },
  {
    "text": "is a team effort separating these roles",
    "start": "136000",
    "end": "138480"
  },
  {
    "text": "into discrete areas",
    "start": "138480",
    "end": "140319"
  },
  {
    "text": "allows for specialization where work in",
    "start": "140319",
    "end": "142640"
  },
  {
    "text": "each area benefits the others",
    "start": "142640",
    "end": "144800"
  },
  {
    "text": "increasing its scale for example a",
    "start": "144800",
    "end": "147520"
  },
  {
    "text": "change to gatekeepers platform has the",
    "start": "147520",
    "end": "149360"
  },
  {
    "text": "potential of increasing the utility",
    "start": "149360",
    "end": "151760"
  },
  {
    "text": "of all templates across the board with",
    "start": "151760",
    "end": "154000"
  },
  {
    "text": "zero extra work",
    "start": "154000",
    "end": "155280"
  },
  {
    "text": "on the template authors part",
    "start": "155280",
    "end": "158879"
  },
  {
    "text": "we rely on duct typing to give us this",
    "start": "158879",
    "end": "161840"
  },
  {
    "text": "separation of concerns",
    "start": "161840",
    "end": "163760"
  },
  {
    "text": "so let's take a brief look at duct",
    "start": "163760",
    "end": "165599"
  },
  {
    "text": "typing how it helps",
    "start": "165599",
    "end": "167040"
  },
  {
    "text": "and some of the patterns we found",
    "start": "167040",
    "end": "168560"
  },
  {
    "text": "helpful in our implementation",
    "start": "168560",
    "end": "171760"
  },
  {
    "text": "duct typing has been covered in previous",
    "start": "171760",
    "end": "174319"
  },
  {
    "text": "cube cons",
    "start": "174319",
    "end": "175360"
  },
  {
    "text": "so we won't get into the details but",
    "start": "175360",
    "end": "177599"
  },
  {
    "text": "generally speaking",
    "start": "177599",
    "end": "178879"
  },
  {
    "text": "if it walks like a duck and talks like a",
    "start": "178879",
    "end": "180879"
  },
  {
    "text": "duck a system",
    "start": "180879",
    "end": "181920"
  },
  {
    "text": "should treat it like a duck this is",
    "start": "181920",
    "end": "184400"
  },
  {
    "text": "similar to",
    "start": "184400",
    "end": "185360"
  },
  {
    "text": "polymorphism in object-oriented",
    "start": "185360",
    "end": "187599"
  },
  {
    "text": "programming",
    "start": "187599",
    "end": "188959"
  },
  {
    "text": "our ducts are constraints our goal for",
    "start": "188959",
    "end": "191599"
  },
  {
    "text": "ammons",
    "start": "191599",
    "end": "192480"
  },
  {
    "text": "is that they're able to define different",
    "start": "192480",
    "end": "194720"
  },
  {
    "text": "types of constraints",
    "start": "194720",
    "end": "196000"
  },
  {
    "text": "that share universal behavior for",
    "start": "196000",
    "end": "198480"
  },
  {
    "text": "instance",
    "start": "198480",
    "end": "199440"
  },
  {
    "text": "all constraints can use label selectors",
    "start": "199440",
    "end": "201760"
  },
  {
    "text": "we do this by creating a parent class",
    "start": "201760",
    "end": "204239"
  },
  {
    "text": "for the constraint that implements",
    "start": "204239",
    "end": "205920"
  },
  {
    "text": "universal behaviors",
    "start": "205920",
    "end": "208239"
  },
  {
    "text": "template authors are able to create",
    "start": "208239",
    "end": "210000"
  },
  {
    "text": "subclasses by injecting",
    "start": "210000",
    "end": "212400"
  },
  {
    "text": "their enforcement logic and its function",
    "start": "212400",
    "end": "215280"
  },
  {
    "text": "signature",
    "start": "215280",
    "end": "216080"
  },
  {
    "text": "by declaring a constraint template",
    "start": "216080",
    "end": "217840"
  },
  {
    "text": "resource the constraint template is",
    "start": "217840",
    "end": "219920"
  },
  {
    "text": "combined",
    "start": "219920",
    "end": "220560"
  },
  {
    "text": "with this universal behavior to create a",
    "start": "220560",
    "end": "223120"
  },
  {
    "text": "new constrained kind",
    "start": "223120",
    "end": "224799"
  },
  {
    "text": "how does this look inside gatekeepers",
    "start": "224799",
    "end": "226560"
  },
  {
    "text": "code",
    "start": "226560",
    "end": "227840"
  },
  {
    "text": "when gatekeeper receives an admission",
    "start": "227840",
    "end": "229519"
  },
  {
    "text": "request from the api server",
    "start": "229519",
    "end": "231280"
  },
  {
    "text": "the first thing it does is find the",
    "start": "231280",
    "end": "233599"
  },
  {
    "text": "matching kind",
    "start": "233599",
    "end": "234720"
  },
  {
    "text": "that define the matching constraints",
    "start": "234720",
    "end": "237120"
  },
  {
    "text": "using the match",
    "start": "237120",
    "end": "238239"
  },
  {
    "text": "criteria as defined by the admin it then",
    "start": "238239",
    "end": "241040"
  },
  {
    "text": "passes",
    "start": "241040",
    "end": "241599"
  },
  {
    "text": "off execution to the template logic",
    "start": "241599",
    "end": "244000"
  },
  {
    "text": "backing each constraint",
    "start": "244000",
    "end": "245519"
  },
  {
    "text": "which tells gatekeeper whether the",
    "start": "245519",
    "end": "247040"
  },
  {
    "text": "constraint was violated or not",
    "start": "247040",
    "end": "249760"
  },
  {
    "text": "gatekeeper then aggregates the results",
    "start": "249760",
    "end": "252080"
  },
  {
    "text": "and uses",
    "start": "252080",
    "end": "252799"
  },
  {
    "text": "enforcement actions on the constraint to",
    "start": "252799",
    "end": "254959"
  },
  {
    "text": "tell the api server how to proceed",
    "start": "254959",
    "end": "259040"
  },
  {
    "text": "now constraint templates are crds",
    "start": "259040",
    "end": "262560"
  },
  {
    "text": "and they create constraints which are",
    "start": "262560",
    "end": "264720"
  },
  {
    "text": "also crds",
    "start": "264720",
    "end": "266560"
  },
  {
    "text": "so really we have created a system where",
    "start": "266560",
    "end": "268880"
  },
  {
    "text": "crds",
    "start": "268880",
    "end": "269759"
  },
  {
    "text": "can create crds and",
    "start": "269759",
    "end": "272880"
  },
  {
    "text": "there are a few challenges with this",
    "start": "272880",
    "end": "275600"
  },
  {
    "text": "paradigm",
    "start": "275600",
    "end": "277360"
  },
  {
    "text": "first we need to have a generic",
    "start": "277360",
    "end": "280320"
  },
  {
    "text": "controller to handle constraints",
    "start": "280320",
    "end": "282800"
  },
  {
    "text": "right and we wrote ours using",
    "start": "282800",
    "end": "285280"
  },
  {
    "text": "unstructured resources",
    "start": "285280",
    "end": "287360"
  },
  {
    "text": "and wherever we needed to have strongly",
    "start": "287360",
    "end": "289919"
  },
  {
    "text": "typed sub schemas",
    "start": "289919",
    "end": "292000"
  },
  {
    "text": "uh you know for things like status we",
    "start": "292000",
    "end": "295199"
  },
  {
    "text": "serialize the json sub-tree we're",
    "start": "295199",
    "end": "297520"
  },
  {
    "text": "interested in",
    "start": "297520",
    "end": "298320"
  },
  {
    "text": "and then re-deserialize it into a",
    "start": "298320",
    "end": "301440"
  },
  {
    "text": "strongly typed length struct",
    "start": "301440",
    "end": "304160"
  },
  {
    "text": "now we also need a way to reliably merge",
    "start": "304160",
    "end": "307199"
  },
  {
    "text": "partial json schemas for the template",
    "start": "307199",
    "end": "310639"
  },
  {
    "text": "arguments",
    "start": "310639",
    "end": "311360"
  },
  {
    "text": "and the universal behavior into a fully",
    "start": "311360",
    "end": "314080"
  },
  {
    "text": "realized constraint schema",
    "start": "314080",
    "end": "316560"
  },
  {
    "text": "and keeping the two different sub",
    "start": "316560",
    "end": "319120"
  },
  {
    "text": "schemas like the template schema",
    "start": "319120",
    "end": "321360"
  },
  {
    "text": "in a special route avoids the",
    "start": "321360",
    "end": "325039"
  },
  {
    "text": "possibility",
    "start": "325039",
    "end": "326000"
  },
  {
    "text": "of collisions when the there's",
    "start": "326000",
    "end": "329120"
  },
  {
    "text": "overlap between the two schemas the most",
    "start": "329120",
    "end": "332400"
  },
  {
    "text": "difficult problem is handling dynamic",
    "start": "332400",
    "end": "334880"
  },
  {
    "text": "watches",
    "start": "334880",
    "end": "336080"
  },
  {
    "text": "originally we did this by creating a sub",
    "start": "336080",
    "end": "338560"
  },
  {
    "text": "manager that would restart",
    "start": "338560",
    "end": "340560"
  },
  {
    "text": "every time the set of watched resources",
    "start": "340560",
    "end": "342720"
  },
  {
    "text": "changed",
    "start": "342720",
    "end": "343759"
  },
  {
    "text": "and there were two big problems with",
    "start": "343759",
    "end": "346000"
  },
  {
    "text": "this approach",
    "start": "346000",
    "end": "347280"
  },
  {
    "text": "the first was that we had inefficient",
    "start": "347280",
    "end": "349840"
  },
  {
    "text": "memory usage",
    "start": "349840",
    "end": "351520"
  },
  {
    "text": "because the controller runtimes watch",
    "start": "351520",
    "end": "354160"
  },
  {
    "text": "cache",
    "start": "354160",
    "end": "355039"
  },
  {
    "text": "was duplicated across the two managers",
    "start": "355039",
    "end": "358240"
  },
  {
    "text": "and a larger problem for users was",
    "start": "358240",
    "end": "361360"
  },
  {
    "text": "that we needed to use finalizers so that",
    "start": "361360",
    "end": "364080"
  },
  {
    "text": "we could catch",
    "start": "364080",
    "end": "364960"
  },
  {
    "text": "delete events that may have been missed",
    "start": "364960",
    "end": "367120"
  },
  {
    "text": "because the sub manager was restarting",
    "start": "367120",
    "end": "370560"
  },
  {
    "text": "and we've since been able to move on",
    "start": "370560",
    "end": "372880"
  },
  {
    "text": "from this specific model",
    "start": "372880",
    "end": "374639"
  },
  {
    "text": "because oren shamron wrote a dynamic",
    "start": "374639",
    "end": "377680"
  },
  {
    "text": "watcher that",
    "start": "377680",
    "end": "378639"
  },
  {
    "text": "allows us to change the set of watched",
    "start": "378639",
    "end": "381039"
  },
  {
    "text": "resources without restarts",
    "start": "381039",
    "end": "383520"
  },
  {
    "text": "cache duplication or of course",
    "start": "383520",
    "end": "386400"
  },
  {
    "text": "finalizers",
    "start": "386400",
    "end": "389120"
  },
  {
    "text": "let's zoom in a bit and discuss how we",
    "start": "389759",
    "end": "392639"
  },
  {
    "text": "interact with this dynamic",
    "start": "392639",
    "end": "394160"
  },
  {
    "text": "watch manager gatekeeper has two sets of",
    "start": "394160",
    "end": "396800"
  },
  {
    "text": "dynamic watches",
    "start": "396800",
    "end": "398319"
  },
  {
    "text": "one for constraints and the other to",
    "start": "398319",
    "end": "400479"
  },
  {
    "text": "sync arbitrary data",
    "start": "400479",
    "end": "402400"
  },
  {
    "text": "for each one of these we have a main",
    "start": "402400",
    "end": "405919"
  },
  {
    "text": "controller and a dynamic controller",
    "start": "405919",
    "end": "408240"
  },
  {
    "text": "the main controller is responsible for",
    "start": "408240",
    "end": "410160"
  },
  {
    "text": "telling the dynamic controller what to",
    "start": "410160",
    "end": "412400"
  },
  {
    "text": "watch",
    "start": "412400",
    "end": "412880"
  },
  {
    "text": "the dynamic controller is a generic",
    "start": "412880",
    "end": "415120"
  },
  {
    "text": "controller that can understand",
    "start": "415120",
    "end": "416880"
  },
  {
    "text": "a duct type resource we have two",
    "start": "416880",
    "end": "419919"
  },
  {
    "text": "main controllers one watches constrain",
    "start": "419919",
    "end": "422560"
  },
  {
    "text": "templates",
    "start": "422560",
    "end": "423360"
  },
  {
    "text": "it tells the watch manager which",
    "start": "423360",
    "end": "424880"
  },
  {
    "text": "constrained kinds are available to watch",
    "start": "424880",
    "end": "427680"
  },
  {
    "text": "the other watch the other one watches",
    "start": "427680",
    "end": "430400"
  },
  {
    "text": "the config",
    "start": "430400",
    "end": "431360"
  },
  {
    "text": "resource as that's where users tell",
    "start": "431360",
    "end": "433919"
  },
  {
    "text": "gatekeeper",
    "start": "433919",
    "end": "434800"
  },
  {
    "text": "that they want to sync those resources",
    "start": "434800",
    "end": "438000"
  },
  {
    "text": "there is a potential problem here what",
    "start": "438000",
    "end": "440400"
  },
  {
    "text": "if two",
    "start": "440400",
    "end": "441039"
  },
  {
    "text": "main controllers are watching the same",
    "start": "441039",
    "end": "442960"
  },
  {
    "text": "resource and one stops",
    "start": "442960",
    "end": "444720"
  },
  {
    "text": "how do we prevent one dynamic watch from",
    "start": "444720",
    "end": "447599"
  },
  {
    "text": "interfering with another",
    "start": "447599",
    "end": "449759"
  },
  {
    "text": "we developed the registrar pattern to",
    "start": "449759",
    "end": "452000"
  },
  {
    "text": "provide isolation",
    "start": "452000",
    "end": "454960"
  },
  {
    "text": "here's an example of how a main",
    "start": "454960",
    "end": "457680"
  },
  {
    "text": "controller uses",
    "start": "457680",
    "end": "458880"
  },
  {
    "text": "the registrar first it would request a",
    "start": "458880",
    "end": "462400"
  },
  {
    "text": "new registrar from the watch manager",
    "start": "462400",
    "end": "464720"
  },
  {
    "text": "by providing the controller name and a",
    "start": "464720",
    "end": "467280"
  },
  {
    "text": "channel by which",
    "start": "467280",
    "end": "468240"
  },
  {
    "text": "watch events will be sent to the dynamic",
    "start": "468240",
    "end": "470400"
  },
  {
    "text": "controller",
    "start": "470400",
    "end": "471919"
  },
  {
    "text": "and when the main controller wants to",
    "start": "471919",
    "end": "474240"
  },
  {
    "text": "add or remove",
    "start": "474240",
    "end": "475520"
  },
  {
    "text": "a group version kind from the dynamic",
    "start": "475520",
    "end": "477440"
  },
  {
    "text": "controller it simply calls",
    "start": "477440",
    "end": "479599"
  },
  {
    "text": "add watch or remove watch",
    "start": "479599",
    "end": "484080"
  },
  {
    "text": "each register is namespace to the",
    "start": "485759",
    "end": "487919"
  },
  {
    "text": "controller",
    "start": "487919",
    "end": "488879"
  },
  {
    "text": "and is capable of adding or removing an",
    "start": "488879",
    "end": "491120"
  },
  {
    "text": "intent to watch",
    "start": "491120",
    "end": "492240"
  },
  {
    "text": "a gvk or replacing the set of watch dvks",
    "start": "492240",
    "end": "495759"
  },
  {
    "text": "altogether",
    "start": "495759",
    "end": "497199"
  },
  {
    "text": "the watch manager can then take the",
    "start": "497199",
    "end": "499280"
  },
  {
    "text": "union of all the intents",
    "start": "499280",
    "end": "500800"
  },
  {
    "text": "across all registers to figure out what",
    "start": "500800",
    "end": "503360"
  },
  {
    "text": "resources to watch",
    "start": "503360",
    "end": "505039"
  },
  {
    "text": "by adding a layer of indirection and",
    "start": "505039",
    "end": "507520"
  },
  {
    "text": "name spacing intent",
    "start": "507520",
    "end": "509039"
  },
  {
    "text": "we have made it significantly easier to",
    "start": "509039",
    "end": "511599"
  },
  {
    "text": "write multiple dynamic controllers that",
    "start": "511599",
    "end": "513599"
  },
  {
    "text": "watch potentially",
    "start": "513599",
    "end": "515120"
  },
  {
    "text": "overlapping sets of resources",
    "start": "515120",
    "end": "518560"
  },
  {
    "text": "now we've touched a lot on meta topics",
    "start": "518560",
    "end": "522159"
  },
  {
    "text": "right controllers that control",
    "start": "522159",
    "end": "524399"
  },
  {
    "text": "controllers crds that create crds",
    "start": "524399",
    "end": "527600"
  },
  {
    "text": "you know ducts that walk like",
    "start": "527600",
    "end": "529519"
  },
  {
    "text": "constraints",
    "start": "529519",
    "end": "531200"
  },
  {
    "text": "we could take this process to the",
    "start": "531200",
    "end": "533200"
  },
  {
    "text": "logical conclusion right we probably",
    "start": "533200",
    "end": "535200"
  },
  {
    "text": "should",
    "start": "535200",
    "end": "536320"
  },
  {
    "text": "we should go full meta",
    "start": "536320",
    "end": "541440"
  },
  {
    "text": "all right so let's take a look at the",
    "start": "541519",
    "end": "544080"
  },
  {
    "text": "policy enforcement",
    "start": "544080",
    "end": "545360"
  },
  {
    "text": "as a phenomenon right it follows",
    "start": "545360",
    "end": "548480"
  },
  {
    "text": "a pretty standard pattern generally",
    "start": "548480",
    "end": "551680"
  },
  {
    "text": "it's just looking at an object and",
    "start": "551680",
    "end": "553760"
  },
  {
    "text": "returning a yep",
    "start": "553760",
    "end": "554959"
  },
  {
    "text": "that looks good or no this is not good",
    "start": "554959",
    "end": "558640"
  },
  {
    "text": "right and is there any reason that",
    "start": "558640",
    "end": "562560"
  },
  {
    "text": "this must be done as uh kubernetes",
    "start": "562560",
    "end": "565760"
  },
  {
    "text": "admission controller",
    "start": "565760",
    "end": "566959"
  },
  {
    "text": "right do the resources even have to be",
    "start": "566959",
    "end": "568959"
  },
  {
    "text": "kubernetes resources",
    "start": "568959",
    "end": "572320"
  },
  {
    "text": "this is probably not true if you walk",
    "start": "572560",
    "end": "575839"
  },
  {
    "text": "one rung up the abstraction ladder and",
    "start": "575839",
    "end": "578480"
  },
  {
    "text": "duct type the decision process itself",
    "start": "578480",
    "end": "581440"
  },
  {
    "text": "right so let's see what that",
    "start": "581440",
    "end": "582959"
  },
  {
    "text": "might look like so",
    "start": "582959",
    "end": "586080"
  },
  {
    "text": "here we have the constraint framework",
    "start": "586080",
    "end": "588560"
  },
  {
    "text": "constraint framework",
    "start": "588560",
    "end": "589600"
  },
  {
    "text": "is the library that underlies gatekeeper",
    "start": "589600",
    "end": "592160"
  },
  {
    "text": "it coordinates",
    "start": "592160",
    "end": "592959"
  },
  {
    "text": "all of the doctyping logic we've covered",
    "start": "592959",
    "end": "595600"
  },
  {
    "text": "so far",
    "start": "595600",
    "end": "596959"
  },
  {
    "text": "it provides the execution flow",
    "start": "596959",
    "end": "598560"
  },
  {
    "text": "gatekeeper uses to render a decision to",
    "start": "598560",
    "end": "600640"
  },
  {
    "text": "the api server",
    "start": "600640",
    "end": "602079"
  },
  {
    "text": "it also provides two abstractions that",
    "start": "602079",
    "end": "604560"
  },
  {
    "text": "allow",
    "start": "604560",
    "end": "605200"
  },
  {
    "text": "us to define constrained templates and",
    "start": "605200",
    "end": "607200"
  },
  {
    "text": "constraints",
    "start": "607200",
    "end": "608320"
  },
  {
    "text": "enforcement points and targets",
    "start": "608320",
    "end": "612160"
  },
  {
    "text": "there are a few critical behaviors the",
    "start": "612240",
    "end": "614880"
  },
  {
    "text": "constraint slash template abstraction",
    "start": "614880",
    "end": "617200"
  },
  {
    "text": "relies on",
    "start": "617200",
    "end": "619040"
  },
  {
    "text": "some kind of match criteria schema and",
    "start": "619040",
    "end": "621680"
  },
  {
    "text": "logic",
    "start": "621680",
    "end": "622959"
  },
  {
    "text": "enforcement actions to tell the system",
    "start": "622959",
    "end": "625200"
  },
  {
    "text": "what to do when a constraint is unhappy",
    "start": "625200",
    "end": "628079"
  },
  {
    "text": "and an interface on which the",
    "start": "628079",
    "end": "629680"
  },
  {
    "text": "enforcement logic can rely",
    "start": "629680",
    "end": "633839"
  },
  {
    "text": "here we have the target a target",
    "start": "634000",
    "end": "636560"
  },
  {
    "text": "abstracts the notion of a platform",
    "start": "636560",
    "end": "639040"
  },
  {
    "text": "what do objects look like how are",
    "start": "639040",
    "end": "641279"
  },
  {
    "text": "policies bound to them",
    "start": "641279",
    "end": "642959"
  },
  {
    "text": "what request metadata do i have",
    "start": "642959",
    "end": "646720"
  },
  {
    "text": "targets give us our match criteria",
    "start": "646720",
    "end": "648959"
  },
  {
    "text": "schema and logic",
    "start": "648959",
    "end": "650720"
  },
  {
    "text": "such as what a label selector looks like",
    "start": "650720",
    "end": "653200"
  },
  {
    "text": "and how to test if a label selector",
    "start": "653200",
    "end": "655279"
  },
  {
    "text": "matches",
    "start": "655279",
    "end": "657680"
  },
  {
    "text": "targets also provide constrained",
    "start": "658240",
    "end": "659920"
  },
  {
    "text": "template authors with the information",
    "start": "659920",
    "end": "661760"
  },
  {
    "text": "they need",
    "start": "661760",
    "end": "662560"
  },
  {
    "text": "to evaluate a request like",
    "start": "662560",
    "end": "665600"
  },
  {
    "text": "what does the object i'm validating look",
    "start": "665600",
    "end": "667920"
  },
  {
    "text": "like",
    "start": "667920",
    "end": "668800"
  },
  {
    "text": "what kind of request metadata do i have",
    "start": "668800",
    "end": "671200"
  },
  {
    "text": "such as requesting user",
    "start": "671200",
    "end": "674880"
  },
  {
    "text": "an enforcement point is the system that",
    "start": "674880",
    "end": "677760"
  },
  {
    "text": "asks for a policy check",
    "start": "677760",
    "end": "679440"
  },
  {
    "text": "and knows what to do with any violations",
    "start": "679440",
    "end": "682480"
  },
  {
    "text": "gatekeepers web hook is an example of an",
    "start": "682480",
    "end": "684959"
  },
  {
    "text": "enforcement point",
    "start": "684959",
    "end": "686320"
  },
  {
    "text": "gatekeeper's audit process is another",
    "start": "686320",
    "end": "688560"
  },
  {
    "text": "enforcement point",
    "start": "688560",
    "end": "691440"
  },
  {
    "text": "putting all of this together gives us a",
    "start": "691760",
    "end": "694160"
  },
  {
    "text": "model for abstracting",
    "start": "694160",
    "end": "695760"
  },
  {
    "text": "policy enforcement itself we can use the",
    "start": "695760",
    "end": "698880"
  },
  {
    "text": "higher order abstractions of the",
    "start": "698880",
    "end": "700560"
  },
  {
    "text": "constraint framework",
    "start": "700560",
    "end": "702000"
  },
  {
    "text": "targets and enforcement points",
    "start": "702000",
    "end": "705040"
  },
  {
    "text": "to take the notion of constraints and",
    "start": "705040",
    "end": "707120"
  },
  {
    "text": "templates to",
    "start": "707120",
    "end": "708160"
  },
  {
    "text": "other venues for example",
    "start": "708160",
    "end": "712000"
  },
  {
    "text": "we have gatekeeper of course which uses",
    "start": "712000",
    "end": "714720"
  },
  {
    "text": "the constraint framework to serve",
    "start": "714720",
    "end": "716639"
  },
  {
    "text": "validating web hooks and for audit",
    "start": "716639",
    "end": "719519"
  },
  {
    "text": "capped provides a docker image that can",
    "start": "719519",
    "end": "722160"
  },
  {
    "text": "be used to validate kubernetes",
    "start": "722160",
    "end": "724000"
  },
  {
    "text": "configurations",
    "start": "724000",
    "end": "724959"
  },
  {
    "text": "at rest or as part of a ci cd pipeline",
    "start": "724959",
    "end": "729279"
  },
  {
    "text": "a cloud config validator wraps the",
    "start": "729279",
    "end": "732000"
  },
  {
    "text": "constraint framework",
    "start": "732000",
    "end": "733279"
  },
  {
    "text": "and a target that understands google",
    "start": "733279",
    "end": "735200"
  },
  {
    "text": "cloud it creates a library that has been",
    "start": "735200",
    "end": "738240"
  },
  {
    "text": "used for",
    "start": "738240",
    "end": "738959"
  },
  {
    "text": "a few things it can validate gcp",
    "start": "738959",
    "end": "742480"
  },
  {
    "text": "resources",
    "start": "742480",
    "end": "743279"
  },
  {
    "text": "as part of a for seti server deployment",
    "start": "743279",
    "end": "746320"
  },
  {
    "text": "it can validate gcp resources or",
    "start": "746320",
    "end": "749360"
  },
  {
    "text": "snapshots",
    "start": "749360",
    "end": "750240"
  },
  {
    "text": "at rest using cfd scorecard",
    "start": "750240",
    "end": "753839"
  },
  {
    "text": "and also it can validate terraform plans",
    "start": "753839",
    "end": "758079"
  },
  {
    "text": "by a project called terraform validator",
    "start": "758079",
    "end": "761120"
  },
  {
    "text": "now abstracting constraints and",
    "start": "761120",
    "end": "762959"
  },
  {
    "text": "templates into a library",
    "start": "762959",
    "end": "764720"
  },
  {
    "text": "has made it faster to bring them to",
    "start": "764720",
    "end": "766720"
  },
  {
    "text": "other platforms and other policy",
    "start": "766720",
    "end": "768800"
  },
  {
    "text": "enforcement points which",
    "start": "768800",
    "end": "770240"
  },
  {
    "text": "allows devs to give users a consistent",
    "start": "770240",
    "end": "773279"
  },
  {
    "text": "experience",
    "start": "773279",
    "end": "774560"
  },
  {
    "text": "and helps users execute the same policy",
    "start": "774560",
    "end": "778000"
  },
  {
    "text": "in many places so duct typing",
    "start": "778000",
    "end": "781360"
  },
  {
    "text": "has allowed us to bring kate's style",
    "start": "781360",
    "end": "784000"
  },
  {
    "text": "policies",
    "start": "784000",
    "end": "785279"
  },
  {
    "text": "outside of the kubernetes cluster",
    "start": "785279",
    "end": "787760"
  },
  {
    "text": "expanding the potential for",
    "start": "787760",
    "end": "789519"
  },
  {
    "text": "cool user experiences like rejecting bad",
    "start": "789519",
    "end": "792959"
  },
  {
    "text": "commits to a ci cd pipeline at the",
    "start": "792959",
    "end": "795360"
  },
  {
    "text": "pre-submit stage",
    "start": "795360",
    "end": "796480"
  },
  {
    "text": "which provides defense in depth",
    "start": "796480",
    "end": "801200"
  },
  {
    "text": "all right now we're going to take a 90",
    "start": "801200",
    "end": "803600"
  },
  {
    "text": "degree turn",
    "start": "803600",
    "end": "804639"
  },
  {
    "text": "and talk a bit about gatekeepers",
    "start": "804639",
    "end": "806720"
  },
  {
    "text": "infrastructure",
    "start": "806720",
    "end": "807920"
  },
  {
    "text": "let's talk about gatekeeper as a web",
    "start": "807920",
    "end": "809839"
  },
  {
    "text": "troller",
    "start": "809839",
    "end": "812240"
  },
  {
    "text": "so what do we mean by web troller",
    "start": "812240",
    "end": "815680"
  },
  {
    "text": "well gatekeeper is both a web hook",
    "start": "815680",
    "end": "818800"
  },
  {
    "text": "and a controller at the same time and",
    "start": "818800",
    "end": "821839"
  },
  {
    "text": "these two things are",
    "start": "821839",
    "end": "823199"
  },
  {
    "text": "usually very different beasts right when",
    "start": "823199",
    "end": "826000"
  },
  {
    "text": "we think about web hooks",
    "start": "826000",
    "end": "827600"
  },
  {
    "text": "well web hooks main job is to serve",
    "start": "827600",
    "end": "829920"
  },
  {
    "text": "requests",
    "start": "829920",
    "end": "830959"
  },
  {
    "text": "that means they need to be responsive",
    "start": "830959",
    "end": "833040"
  },
  {
    "text": "and therefore",
    "start": "833040",
    "end": "834000"
  },
  {
    "text": "generally intolerant of downtime and",
    "start": "834000",
    "end": "837440"
  },
  {
    "text": "web hooks also scale their availability",
    "start": "837440",
    "end": "840160"
  },
  {
    "text": "and serving capacity",
    "start": "840160",
    "end": "841600"
  },
  {
    "text": "by increasing the number of serving pots",
    "start": "841600",
    "end": "845199"
  },
  {
    "text": "and each of these pods are peers which",
    "start": "845199",
    "end": "847680"
  },
  {
    "text": "means there's no",
    "start": "847680",
    "end": "848639"
  },
  {
    "text": "leader or follower relationship and",
    "start": "848639",
    "end": "851360"
  },
  {
    "text": "everything is a flat hierarchy where",
    "start": "851360",
    "end": "853360"
  },
  {
    "text": "every pod is equally able to serve",
    "start": "853360",
    "end": "856720"
  },
  {
    "text": "any given request controllers",
    "start": "856720",
    "end": "860320"
  },
  {
    "text": "on the other hand observe and reconcile",
    "start": "860320",
    "end": "863680"
  },
  {
    "text": "resources",
    "start": "863680",
    "end": "864880"
  },
  {
    "text": "and come together to create an",
    "start": "864880",
    "end": "866800"
  },
  {
    "text": "eventually consistent system",
    "start": "866800",
    "end": "869199"
  },
  {
    "text": "because controllers are background",
    "start": "869199",
    "end": "871760"
  },
  {
    "text": "processes",
    "start": "871760",
    "end": "872720"
  },
  {
    "text": "they are a little more downtime tolerant",
    "start": "872720",
    "end": "875360"
  },
  {
    "text": "because the system only needs to",
    "start": "875360",
    "end": "876959"
  },
  {
    "text": "converge",
    "start": "876959",
    "end": "877600"
  },
  {
    "text": "in a reasonable amount of time and",
    "start": "877600",
    "end": "880720"
  },
  {
    "text": "controllers are generally singletons",
    "start": "880720",
    "end": "884079"
  },
  {
    "text": "they can use leader election but that",
    "start": "884079",
    "end": "887199"
  },
  {
    "text": "doesn't really add capacity",
    "start": "887199",
    "end": "889279"
  },
  {
    "text": "what we do there is extra pods and",
    "start": "889279",
    "end": "892000"
  },
  {
    "text": "leader election",
    "start": "892000",
    "end": "892880"
  },
  {
    "text": "usually approve availability by having",
    "start": "892880",
    "end": "895120"
  },
  {
    "text": "hot standbys that can take over",
    "start": "895120",
    "end": "897440"
  },
  {
    "text": "if the leader becomes unavailable",
    "start": "897440",
    "end": "900480"
  },
  {
    "text": "now because gatekeeper is a web hook",
    "start": "900480",
    "end": "904639"
  },
  {
    "text": "that serves results based off of",
    "start": "904639",
    "end": "907199"
  },
  {
    "text": "observed resources",
    "start": "907199",
    "end": "909120"
  },
  {
    "text": "it is a little bit web hook and a little",
    "start": "909120",
    "end": "911440"
  },
  {
    "text": "bit controller",
    "start": "911440",
    "end": "912720"
  },
  {
    "text": "therefore web troller",
    "start": "912720",
    "end": "916399"
  },
  {
    "text": "because of this tension between how web",
    "start": "916480",
    "end": "918480"
  },
  {
    "text": "plugs and controllers",
    "start": "918480",
    "end": "919760"
  },
  {
    "text": "usually scale it seems like they may be",
    "start": "919760",
    "end": "922720"
  },
  {
    "text": "incompatible models",
    "start": "922720",
    "end": "924480"
  },
  {
    "text": "this apparent conflict can be resolved",
    "start": "924480",
    "end": "926800"
  },
  {
    "text": "by observing",
    "start": "926800",
    "end": "927839"
  },
  {
    "text": "that idempotent controller processes",
    "start": "927839",
    "end": "930480"
  },
  {
    "text": "don't need to be singletons",
    "start": "930480",
    "end": "932480"
  },
  {
    "text": "if more than one controller is watching",
    "start": "932480",
    "end": "934959"
  },
  {
    "text": "the same resource",
    "start": "934959",
    "end": "936240"
  },
  {
    "text": "and they both agree on the end state the",
    "start": "936240",
    "end": "938800"
  },
  {
    "text": "first controller to write",
    "start": "938800",
    "end": "940399"
  },
  {
    "text": "the output will win the right other",
    "start": "940399",
    "end": "943680"
  },
  {
    "text": "controllers will either have not yet",
    "start": "943680",
    "end": "945920"
  },
  {
    "text": "processed",
    "start": "945920",
    "end": "946800"
  },
  {
    "text": "that resource or will have their rights",
    "start": "946800",
    "end": "948800"
  },
  {
    "text": "rejected",
    "start": "948800",
    "end": "950000"
  },
  {
    "text": "on retry those controllers will see the",
    "start": "950000",
    "end": "953040"
  },
  {
    "text": "correct state and will not attempt to",
    "start": "953040",
    "end": "954959"
  },
  {
    "text": "reconcile further",
    "start": "954959",
    "end": "956560"
  },
  {
    "text": "this is similar to how kubernetes leader",
    "start": "956560",
    "end": "958639"
  },
  {
    "text": "election works",
    "start": "958639",
    "end": "960079"
  },
  {
    "text": "this can lead to some extra traffic but",
    "start": "960079",
    "end": "962480"
  },
  {
    "text": "only when controllers need to write a",
    "start": "962480",
    "end": "964320"
  },
  {
    "text": "change",
    "start": "964320",
    "end": "966639"
  },
  {
    "text": "so with this observation we can create",
    "start": "967199",
    "end": "970000"
  },
  {
    "text": "web trollers",
    "start": "970000",
    "end": "970959"
  },
  {
    "text": "that leverage what we call leaderless",
    "start": "970959",
    "end": "973839"
  },
  {
    "text": "horizontal scalability",
    "start": "973839",
    "end": "976240"
  },
  {
    "text": "in this model a web troller scales",
    "start": "976240",
    "end": "978480"
  },
  {
    "text": "horizontally",
    "start": "978480",
    "end": "979440"
  },
  {
    "text": "like a normal web hook right controllers",
    "start": "979440",
    "end": "982959"
  },
  {
    "text": "are ident and they use this",
    "start": "982959",
    "end": "986320"
  },
  {
    "text": "first right wins model that we just",
    "start": "986320",
    "end": "988320"
  },
  {
    "text": "talked about",
    "start": "988320",
    "end": "989759"
  },
  {
    "text": "and each pod manages its own internal",
    "start": "989759",
    "end": "993199"
  },
  {
    "text": "cache of constraints",
    "start": "993199",
    "end": "994800"
  },
  {
    "text": "templates and data which makes every pod",
    "start": "994800",
    "end": "997759"
  },
  {
    "text": "appear of",
    "start": "997759",
    "end": "998480"
  },
  {
    "text": "every other pod now there are some",
    "start": "998480",
    "end": "1001759"
  },
  {
    "text": "limitations this model imposes on us",
    "start": "1001759",
    "end": "1004639"
  },
  {
    "text": "right we need to be sure",
    "start": "1004639",
    "end": "1006000"
  },
  {
    "text": "that non-idempotent operations like",
    "start": "1006000",
    "end": "1009120"
  },
  {
    "text": "audit run in a separate singleton pod",
    "start": "1009120",
    "end": "1013279"
  },
  {
    "text": "we also should avoid scaling right",
    "start": "1013279",
    "end": "1015519"
  },
  {
    "text": "contention quadratically with the number",
    "start": "1015519",
    "end": "1017519"
  },
  {
    "text": "of pods which",
    "start": "1017519",
    "end": "1018880"
  },
  {
    "text": "can happen if each pod needs to write",
    "start": "1018880",
    "end": "1021680"
  },
  {
    "text": "its own pod specific state",
    "start": "1021680",
    "end": "1024798"
  },
  {
    "text": "one thing we need to be sure about also",
    "start": "1024799",
    "end": "1027120"
  },
  {
    "text": "is that our controllers",
    "start": "1027120",
    "end": "1028880"
  },
  {
    "text": "are side effect free as there's no",
    "start": "1028880",
    "end": "1031678"
  },
  {
    "text": "guarantee that",
    "start": "1031679",
    "end": "1032959"
  },
  {
    "text": "side effects are ident",
    "start": "1032959",
    "end": "1036798"
  },
  {
    "text": "that was easy multiple parts on now what",
    "start": "1036880",
    "end": "1040640"
  },
  {
    "text": "i think are we done can can we go home",
    "start": "1040640",
    "end": "1045839"
  },
  {
    "text": "not quite people probably want to know",
    "start": "1045839",
    "end": "1048079"
  },
  {
    "text": "the status of their policies",
    "start": "1048079",
    "end": "1050000"
  },
  {
    "text": "whether they're enforced or not this is",
    "start": "1050000",
    "end": "1052240"
  },
  {
    "text": "hard because",
    "start": "1052240",
    "end": "1053200"
  },
  {
    "text": "kubernetes is eventually consistent",
    "start": "1053200",
    "end": "1057039"
  },
  {
    "text": "so multiple pods means multiple possible",
    "start": "1057039",
    "end": "1060880"
  },
  {
    "text": "enforcers",
    "start": "1060880",
    "end": "1061760"
  },
  {
    "text": "and policy is only as strong as its",
    "start": "1061760",
    "end": "1065200"
  },
  {
    "text": "weakest link",
    "start": "1065200",
    "end": "1066960"
  },
  {
    "text": "if we have three web hook pods to",
    "start": "1066960",
    "end": "1070160"
  },
  {
    "text": "enforcing a new policy",
    "start": "1070160",
    "end": "1072000"
  },
  {
    "text": "one not and an api server",
    "start": "1072000",
    "end": "1075280"
  },
  {
    "text": "that's going to choose a web hook bob",
    "start": "1075280",
    "end": "1077360"
  },
  {
    "text": "randomly",
    "start": "1077360",
    "end": "1078720"
  },
  {
    "text": "the policy only really has a 66 percent",
    "start": "1078720",
    "end": "1082080"
  },
  {
    "text": "percent chance of being enforced and",
    "start": "1082080",
    "end": "1085280"
  },
  {
    "text": "in order to reason about whether a",
    "start": "1085280",
    "end": "1086960"
  },
  {
    "text": "constraint is enforced therefore",
    "start": "1086960",
    "end": "1088880"
  },
  {
    "text": "we need to know whether it is recognized",
    "start": "1088880",
    "end": "1091440"
  },
  {
    "text": "by all pods",
    "start": "1091440",
    "end": "1094240"
  },
  {
    "text": "so to do this we implemented a bipod",
    "start": "1094240",
    "end": "1096880"
  },
  {
    "text": "status sub-resource",
    "start": "1096880",
    "end": "1098640"
  },
  {
    "text": "this resource tells us which pods have",
    "start": "1098640",
    "end": "1101280"
  },
  {
    "text": "ingested a given resource",
    "start": "1101280",
    "end": "1103120"
  },
  {
    "text": "and what roles like audit or web hook",
    "start": "1103120",
    "end": "1106559"
  },
  {
    "text": "those pots perform we also track the",
    "start": "1106559",
    "end": "1109679"
  },
  {
    "text": "observed generation of the resource",
    "start": "1109679",
    "end": "1112160"
  },
  {
    "text": "to make sure each pod is enforcing the",
    "start": "1112160",
    "end": "1114080"
  },
  {
    "text": "most current generation",
    "start": "1114080",
    "end": "1116480"
  },
  {
    "text": "the uid of the object to detect if they",
    "start": "1116480",
    "end": "1119280"
  },
  {
    "text": "if we are",
    "start": "1119280",
    "end": "1120000"
  },
  {
    "text": "actually seeing the status of a deleted",
    "start": "1120000",
    "end": "1121919"
  },
  {
    "text": "object that has since been",
    "start": "1121919",
    "end": "1123919"
  },
  {
    "text": "recreated and any errors a pod may have",
    "start": "1123919",
    "end": "1127280"
  },
  {
    "text": "encountered",
    "start": "1127280",
    "end": "1128000"
  },
  {
    "text": "ingesting the resource",
    "start": "1128000",
    "end": "1131120"
  },
  {
    "text": "we now have more information about the",
    "start": "1131360",
    "end": "1134240"
  },
  {
    "text": "state of the system",
    "start": "1134240",
    "end": "1135520"
  },
  {
    "text": "but how do we interpret it",
    "start": "1135520",
    "end": "1138240"
  },
  {
    "text": "pessimistically of course",
    "start": "1138240",
    "end": "1140559"
  },
  {
    "text": "so if a pod's entry is missing",
    "start": "1140559",
    "end": "1144240"
  },
  {
    "text": "we assume that that pod has not yet",
    "start": "1144240",
    "end": "1146559"
  },
  {
    "text": "ingested the resource",
    "start": "1146559",
    "end": "1148720"
  },
  {
    "text": "if a resources deletion timestamp is set",
    "start": "1148720",
    "end": "1152400"
  },
  {
    "text": "we assume that pods have already",
    "start": "1152400",
    "end": "1154240"
  },
  {
    "text": "processed that delete",
    "start": "1154240",
    "end": "1156320"
  },
  {
    "text": "and if the number of pods reporting",
    "start": "1156320",
    "end": "1159039"
  },
  {
    "text": "status",
    "start": "1159039",
    "end": "1160320"
  },
  {
    "text": "is equal to the number of pods serving",
    "start": "1160320",
    "end": "1162799"
  },
  {
    "text": "the web hook",
    "start": "1162799",
    "end": "1164400"
  },
  {
    "text": "well then we can assume that all pods",
    "start": "1164400",
    "end": "1167039"
  },
  {
    "text": "have ingested",
    "start": "1167039",
    "end": "1168240"
  },
  {
    "text": "and are enforcing that particular",
    "start": "1168240",
    "end": "1170799"
  },
  {
    "text": "constraint",
    "start": "1170799",
    "end": "1173440"
  },
  {
    "text": "so in order to make these observations",
    "start": "1173600",
    "end": "1176240"
  },
  {
    "text": "more meaningful",
    "start": "1176240",
    "end": "1177360"
  },
  {
    "text": "we need to enforce some invariants in",
    "start": "1177360",
    "end": "1179360"
  },
  {
    "text": "our project",
    "start": "1179360",
    "end": "1181039"
  },
  {
    "text": "one if we expect to have n pots",
    "start": "1181039",
    "end": "1184080"
  },
  {
    "text": "we must never have n plus one pot",
    "start": "1184080",
    "end": "1187360"
  },
  {
    "text": "otherwise counting in observations",
    "start": "1187360",
    "end": "1189520"
  },
  {
    "text": "leaves the possibility that there is",
    "start": "1189520",
    "end": "1191919"
  },
  {
    "text": "still one pod that has not",
    "start": "1191919",
    "end": "1193520"
  },
  {
    "text": "observed a new resource two",
    "start": "1193520",
    "end": "1196640"
  },
  {
    "text": "pods cannot serve until they have blue",
    "start": "1196640",
    "end": "1199360"
  },
  {
    "text": "strapped all resources",
    "start": "1199360",
    "end": "1201039"
  },
  {
    "text": "present during startup otherwise a new",
    "start": "1201039",
    "end": "1203600"
  },
  {
    "text": "pod would",
    "start": "1203600",
    "end": "1204320"
  },
  {
    "text": "put the assumption that n observations",
    "start": "1204320",
    "end": "1206960"
  },
  {
    "text": "means",
    "start": "1206960",
    "end": "1207760"
  },
  {
    "text": "in enforcing pots into question",
    "start": "1207760",
    "end": "1210880"
  },
  {
    "text": "and lastly we must design our resources",
    "start": "1210880",
    "end": "1214400"
  },
  {
    "text": "such that a",
    "start": "1214400",
    "end": "1215280"
  },
  {
    "text": "missing resource has a known impact on",
    "start": "1215280",
    "end": "1217440"
  },
  {
    "text": "the system",
    "start": "1217440",
    "end": "1218480"
  },
  {
    "text": "in this case a missing constraint means",
    "start": "1218480",
    "end": "1220960"
  },
  {
    "text": "that policy is enforced",
    "start": "1220960",
    "end": "1222880"
  },
  {
    "text": "more loosely than it would otherwise be",
    "start": "1222880",
    "end": "1226480"
  },
  {
    "text": "we should also know here that writing",
    "start": "1226480",
    "end": "1228799"
  },
  {
    "text": "referential constraints",
    "start": "1228799",
    "end": "1230799"
  },
  {
    "text": "which rely on cash data potentially",
    "start": "1230799",
    "end": "1234000"
  },
  {
    "text": "violates this principle for one thing",
    "start": "1234000",
    "end": "1236880"
  },
  {
    "text": "whether data has been cached",
    "start": "1236880",
    "end": "1238640"
  },
  {
    "text": "is unreported for another it's",
    "start": "1238640",
    "end": "1241360"
  },
  {
    "text": "impossible to know the significance of",
    "start": "1241360",
    "end": "1244080"
  },
  {
    "text": "missing data without knowing the",
    "start": "1244080",
    "end": "1245919"
  },
  {
    "text": "specifics of a constraint",
    "start": "1245919",
    "end": "1247600"
  },
  {
    "text": "logic the use cases for cache data",
    "start": "1247600",
    "end": "1250960"
  },
  {
    "text": "are too valuable to ignore but it's",
    "start": "1250960",
    "end": "1253440"
  },
  {
    "text": "worth calling out that such",
    "start": "1253440",
    "end": "1255679"
  },
  {
    "text": "templates necessarily have imperfect",
    "start": "1255679",
    "end": "1258320"
  },
  {
    "text": "enforcement at the webhook level",
    "start": "1258320",
    "end": "1262080"
  },
  {
    "text": "there are two potential problems with",
    "start": "1262080",
    "end": "1264480"
  },
  {
    "text": "reporting bipod status",
    "start": "1264480",
    "end": "1266799"
  },
  {
    "text": "which are right amplification and the",
    "start": "1266799",
    "end": "1269679"
  },
  {
    "text": "possibility of",
    "start": "1269679",
    "end": "1270559"
  },
  {
    "text": "zombie status right amplification can",
    "start": "1270559",
    "end": "1274000"
  },
  {
    "text": "occur when",
    "start": "1274000",
    "end": "1274720"
  },
  {
    "text": "all pods want to write status at the",
    "start": "1274720",
    "end": "1276799"
  },
  {
    "text": "same time",
    "start": "1276799",
    "end": "1278400"
  },
  {
    "text": "because of kubernetes optimus optimistic",
    "start": "1278400",
    "end": "1280799"
  },
  {
    "text": "concurrency",
    "start": "1280799",
    "end": "1281760"
  },
  {
    "text": "each pod may try to write the status at",
    "start": "1281760",
    "end": "1284400"
  },
  {
    "text": "the same time",
    "start": "1284400",
    "end": "1285760"
  },
  {
    "text": "and one will win leaving the other pods",
    "start": "1285760",
    "end": "1288640"
  },
  {
    "text": "to retry",
    "start": "1288640",
    "end": "1290080"
  },
  {
    "text": "which means that in the worst case there",
    "start": "1290080",
    "end": "1292559"
  },
  {
    "text": "will be n squared total write requests",
    "start": "1292559",
    "end": "1294960"
  },
  {
    "text": "where n is equal to the number of pods",
    "start": "1294960",
    "end": "1298559"
  },
  {
    "text": "zombie status can occur if removed pods",
    "start": "1298559",
    "end": "1301840"
  },
  {
    "text": "don't clean up their status",
    "start": "1301840",
    "end": "1304159"
  },
  {
    "text": "and so you'll start seeing that old",
    "start": "1304159",
    "end": "1305840"
  },
  {
    "text": "status and it'll just",
    "start": "1305840",
    "end": "1307280"
  },
  {
    "text": "be there perpetually gatekeeper solves",
    "start": "1307280",
    "end": "1310559"
  },
  {
    "text": "these problems",
    "start": "1310559",
    "end": "1311440"
  },
  {
    "text": "with a layer of indirection we create",
    "start": "1311440",
    "end": "1314799"
  },
  {
    "text": "a separate constraint pod status",
    "start": "1314799",
    "end": "1317919"
  },
  {
    "text": "resource",
    "start": "1317919",
    "end": "1319120"
  },
  {
    "text": "which is uh there where there's one of",
    "start": "1319120",
    "end": "1321600"
  },
  {
    "text": "them per",
    "start": "1321600",
    "end": "1322320"
  },
  {
    "text": "unique pod slash constraint tuple",
    "start": "1322320",
    "end": "1325360"
  },
  {
    "text": "and each pod will write to its own",
    "start": "1325360",
    "end": "1328080"
  },
  {
    "text": "constraint pod status resource",
    "start": "1328080",
    "end": "1330559"
  },
  {
    "text": "there's then a singleton controller",
    "start": "1330559",
    "end": "1332880"
  },
  {
    "text": "called the status controller",
    "start": "1332880",
    "end": "1334880"
  },
  {
    "text": "that aggregates these statuses and",
    "start": "1334880",
    "end": "1337280"
  },
  {
    "text": "writes them",
    "start": "1337280",
    "end": "1338080"
  },
  {
    "text": "to the constraints this model",
    "start": "1338080",
    "end": "1341440"
  },
  {
    "text": "lowers the worst case scaling of write",
    "start": "1341440",
    "end": "1343840"
  },
  {
    "text": "requests from quadratic",
    "start": "1343840",
    "end": "1345520"
  },
  {
    "text": "to linear and because each constraint",
    "start": "1345520",
    "end": "1348720"
  },
  {
    "text": "pod status",
    "start": "1348720",
    "end": "1349760"
  },
  {
    "text": "is owned by the corresponding pod we can",
    "start": "1349760",
    "end": "1352960"
  },
  {
    "text": "rely",
    "start": "1352960",
    "end": "1353520"
  },
  {
    "text": "on kubernetes garbage collection to",
    "start": "1353520",
    "end": "1355600"
  },
  {
    "text": "clean up any zombie data that's left by",
    "start": "1355600",
    "end": "1357919"
  },
  {
    "text": "old pots",
    "start": "1357919",
    "end": "1361760"
  },
  {
    "text": "and that's how we implemented web",
    "start": "1361760",
    "end": "1363600"
  },
  {
    "text": "troller all the way from scaling",
    "start": "1363600",
    "end": "1365840"
  },
  {
    "text": "web hook parts horizontally to managing",
    "start": "1365840",
    "end": "1368400"
  },
  {
    "text": "how they report status",
    "start": "1368400",
    "end": "1370240"
  },
  {
    "text": "let's take a look at how the reliability",
    "start": "1370240",
    "end": "1373280"
  },
  {
    "text": "and performance of the system may scale",
    "start": "1373280",
    "end": "1375840"
  },
  {
    "text": "with the number of pots",
    "start": "1375840",
    "end": "1377679"
  },
  {
    "text": "if we assume one serving pot is",
    "start": "1377679",
    "end": "1379760"
  },
  {
    "text": "sufficient to serve",
    "start": "1379760",
    "end": "1380880"
  },
  {
    "text": "all inbound traffic and that each pot",
    "start": "1380880",
    "end": "1383760"
  },
  {
    "text": "fails independently of every other pod",
    "start": "1383760",
    "end": "1386240"
  },
  {
    "text": "the probability of downtime decreases",
    "start": "1386240",
    "end": "1389039"
  },
  {
    "text": "exponentially",
    "start": "1389039",
    "end": "1390240"
  },
  {
    "text": "with the number of running pods on the",
    "start": "1390240",
    "end": "1392720"
  },
  {
    "text": "other hand",
    "start": "1392720",
    "end": "1393760"
  },
  {
    "text": "because we only consider a constraint as",
    "start": "1393760",
    "end": "1396159"
  },
  {
    "text": "being enforced when",
    "start": "1396159",
    "end": "1397360"
  },
  {
    "text": "all pots have observed it we lengthen",
    "start": "1397360",
    "end": "1400400"
  },
  {
    "text": "the mean time to enforcement as reported",
    "start": "1400400",
    "end": "1402559"
  },
  {
    "text": "by the system as a whole",
    "start": "1402559",
    "end": "1404159"
  },
  {
    "text": "unfortunately without knowing the exact",
    "start": "1404159",
    "end": "1406000"
  },
  {
    "text": "distribution of ingestion times",
    "start": "1406000",
    "end": "1408080"
  },
  {
    "text": "it's hard to say how by how much",
    "start": "1408080",
    "end": "1412559"
  },
  {
    "text": "to sum up we have covered design",
    "start": "1412559",
    "end": "1415039"
  },
  {
    "text": "patterns that have helped us create the",
    "start": "1415039",
    "end": "1416799"
  },
  {
    "text": "web troller model which",
    "start": "1416799",
    "end": "1418240"
  },
  {
    "text": "include doctyping and various patterns",
    "start": "1418240",
    "end": "1420960"
  },
  {
    "text": "we found helpful there",
    "start": "1420960",
    "end": "1422400"
  },
  {
    "text": "along with infrastructure and interface",
    "start": "1422400",
    "end": "1425039"
  },
  {
    "text": "development",
    "start": "1425039",
    "end": "1425679"
  },
  {
    "text": "that helps us both serve and reason",
    "start": "1425679",
    "end": "1427840"
  },
  {
    "text": "about our system",
    "start": "1427840",
    "end": "1429679"
  },
  {
    "text": "so hopefully some of these patterns will",
    "start": "1429679",
    "end": "1431760"
  },
  {
    "text": "be useful to you in your own projects",
    "start": "1431760",
    "end": "1433919"
  },
  {
    "text": "and if they do solve an issue for you we",
    "start": "1433919",
    "end": "1436880"
  },
  {
    "text": "would definitely love to hear about it",
    "start": "1436880",
    "end": "1440720"
  },
  {
    "text": "and with that thank you for attending",
    "start": "1440799",
    "end": "1442799"
  },
  {
    "text": "this session",
    "start": "1442799",
    "end": "1444000"
  },
  {
    "text": "we just want to thank the gatekeeper",
    "start": "1444000",
    "end": "1446240"
  },
  {
    "text": "community",
    "start": "1446240",
    "end": "1447120"
  },
  {
    "text": "all the users all the contributors for",
    "start": "1447120",
    "end": "1449520"
  },
  {
    "text": "your feedback",
    "start": "1449520",
    "end": "1450480"
  },
  {
    "text": "and all the feature requests to make",
    "start": "1450480",
    "end": "1452240"
  },
  {
    "text": "gatekeeper",
    "start": "1452240",
    "end": "1453600"
  },
  {
    "text": "the project it is today and we also want",
    "start": "1453600",
    "end": "1456240"
  },
  {
    "text": "to send our",
    "start": "1456240",
    "end": "1457039"
  },
  {
    "text": "thank you to the cube builder controller",
    "start": "1457039",
    "end": "1458960"
  },
  {
    "text": "runtime community",
    "start": "1458960",
    "end": "1460480"
  },
  {
    "text": "for all the awesome work that has",
    "start": "1460480",
    "end": "1462080"
  },
  {
    "text": "bootstrapped the gatekeeper",
    "start": "1462080",
    "end": "1463679"
  },
  {
    "text": "project and last but not least our",
    "start": "1463679",
    "end": "1466400"
  },
  {
    "text": "wonderful audience for attending this",
    "start": "1466400",
    "end": "1468080"
  },
  {
    "text": "session",
    "start": "1468080",
    "end": "1469440"
  },
  {
    "text": "thank you guys very much",
    "start": "1469440",
    "end": "1473840"
  }
]