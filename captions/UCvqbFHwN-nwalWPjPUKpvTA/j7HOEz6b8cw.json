[
  {
    "text": "hello thanks for taking the time to",
    "start": "1120",
    "end": "3439"
  },
  {
    "text": "watch the demo",
    "start": "3439",
    "end": "4799"
  },
  {
    "text": "in the following i'm going to run some",
    "start": "4799",
    "end": "7359"
  },
  {
    "text": "out of the box benchmarks against",
    "start": "7359",
    "end": "9360"
  },
  {
    "text": "several ingress controllers",
    "start": "9360",
    "end": "12480"
  },
  {
    "text": "first a little about me my name is",
    "start": "12480",
    "end": "15440"
  },
  {
    "text": "daniel corbett",
    "start": "15440",
    "end": "16320"
  },
  {
    "text": "and i'm the director of product at ha",
    "start": "16320",
    "end": "18240"
  },
  {
    "text": "proxy technologies",
    "start": "18240",
    "end": "20000"
  },
  {
    "text": "i'm a security nerd and a cheese",
    "start": "20000",
    "end": "21920"
  },
  {
    "text": "enthusiast",
    "start": "21920",
    "end": "24320"
  },
  {
    "text": "benchmarking is a science in and of",
    "start": "24320",
    "end": "26560"
  },
  {
    "text": "itself",
    "start": "26560",
    "end": "27519"
  },
  {
    "text": "but many users do not have the time",
    "start": "27519",
    "end": "29599"
  },
  {
    "text": "required to perform",
    "start": "29599",
    "end": "31039"
  },
  {
    "text": "head-to-head tests against the wide",
    "start": "31039",
    "end": "33520"
  },
  {
    "text": "range of ingress controllers",
    "start": "33520",
    "end": "35360"
  },
  {
    "text": "that are available understanding how",
    "start": "35360",
    "end": "38239"
  },
  {
    "text": "your angus controller and proxy performs",
    "start": "38239",
    "end": "40800"
  },
  {
    "text": "is important as poor performance can",
    "start": "40800",
    "end": "43440"
  },
  {
    "text": "cause you to use excessive resources",
    "start": "43440",
    "end": "45760"
  },
  {
    "text": "which ultimately translates to lost",
    "start": "45760",
    "end": "48079"
  },
  {
    "text": "money",
    "start": "48079",
    "end": "48800"
  },
  {
    "text": "especially in a cloud-native world",
    "start": "48800",
    "end": "52480"
  },
  {
    "text": "it can also lead to a sub-optimal user",
    "start": "52480",
    "end": "55440"
  },
  {
    "text": "experience for your end clients",
    "start": "55440",
    "end": "58399"
  },
  {
    "text": "however when it comes to tuning various",
    "start": "58399",
    "end": "60960"
  },
  {
    "text": "pieces of the infrastructure",
    "start": "60960",
    "end": "62879"
  },
  {
    "text": "many users get lost in the abyss of",
    "start": "62879",
    "end": "65360"
  },
  {
    "text": "information",
    "start": "65360",
    "end": "66320"
  },
  {
    "text": "online or just do not even think it's",
    "start": "66320",
    "end": "69119"
  },
  {
    "text": "something they need to do",
    "start": "69119",
    "end": "71200"
  },
  {
    "text": "this means that many users end up",
    "start": "71200",
    "end": "73200"
  },
  {
    "text": "running out of the box configurations",
    "start": "73200",
    "end": "76400"
  },
  {
    "text": "this demo is going to focus explicitly",
    "start": "76400",
    "end": "79439"
  },
  {
    "text": "on those out of the box configurations",
    "start": "79439",
    "end": "82000"
  },
  {
    "text": "to find out which ingress controller",
    "start": "82000",
    "end": "84640"
  },
  {
    "text": "performs the best",
    "start": "84640",
    "end": "86240"
  },
  {
    "text": "in a new setup i've included",
    "start": "86240",
    "end": "89600"
  },
  {
    "text": "a link to the full architecture setup",
    "start": "89600",
    "end": "92000"
  },
  {
    "text": "guide and",
    "start": "92000",
    "end": "92720"
  },
  {
    "text": "code to repeat reproduce these",
    "start": "92720",
    "end": "94640"
  },
  {
    "text": "benchmarks within the h a proxy",
    "start": "94640",
    "end": "97119"
  },
  {
    "text": "technologies github",
    "start": "97119",
    "end": "98560"
  },
  {
    "text": "located on the url at the top of this",
    "start": "98560",
    "end": "100799"
  },
  {
    "text": "slide",
    "start": "100799",
    "end": "102159"
  },
  {
    "text": "for this demo i've configured a six node",
    "start": "102159",
    "end": "104960"
  },
  {
    "text": "kubernetes cluster",
    "start": "104960",
    "end": "106479"
  },
  {
    "text": "running on an aws c5",
    "start": "106479",
    "end": "109600"
  },
  {
    "text": "x large instance one of the nodes",
    "start": "109600",
    "end": "113680"
  },
  {
    "text": "has been dedicated specifically to the",
    "start": "113680",
    "end": "116560"
  },
  {
    "text": "ingress controllers",
    "start": "116560",
    "end": "118479"
  },
  {
    "text": "the other five are where we will run our",
    "start": "118479",
    "end": "120960"
  },
  {
    "text": "traffic injectors",
    "start": "120960",
    "end": "123119"
  },
  {
    "text": "i have five pods running a standard echo",
    "start": "123119",
    "end": "125759"
  },
  {
    "text": "application",
    "start": "125759",
    "end": "126799"
  },
  {
    "text": "in which the ingress controllers will be",
    "start": "126799",
    "end": "129119"
  },
  {
    "text": "monitoring for changes in routing",
    "start": "129119",
    "end": "131120"
  },
  {
    "text": "traffic to",
    "start": "131120",
    "end": "133040"
  },
  {
    "text": "in these tests i'm testing envoy with",
    "start": "133040",
    "end": "135680"
  },
  {
    "text": "contour as the ingress controller",
    "start": "135680",
    "end": "137920"
  },
  {
    "text": "h a proxy two different nginx ingress",
    "start": "137920",
    "end": "141520"
  },
  {
    "text": "controllers",
    "start": "141520",
    "end": "142480"
  },
  {
    "text": "and traffic for each of these",
    "start": "142480",
    "end": "145520"
  },
  {
    "text": "i will be running the latest versions at",
    "start": "145520",
    "end": "147520"
  },
  {
    "text": "the time of this benchmark which are",
    "start": "147520",
    "end": "149280"
  },
  {
    "text": "shown in the table",
    "start": "149280",
    "end": "151040"
  },
  {
    "text": "you may be wondering why i have two",
    "start": "151040",
    "end": "152879"
  },
  {
    "text": "different nginx ingress controllers",
    "start": "152879",
    "end": "154720"
  },
  {
    "text": "listed",
    "start": "154720",
    "end": "155599"
  },
  {
    "text": "this is because there are two completely",
    "start": "155599",
    "end": "157599"
  },
  {
    "text": "different open source projects",
    "start": "157599",
    "end": "160080"
  },
  {
    "text": "one is a kubernetes community driven",
    "start": "160080",
    "end": "162239"
  },
  {
    "text": "project and the other",
    "start": "162239",
    "end": "163599"
  },
  {
    "text": "is directly from nginx inc",
    "start": "163599",
    "end": "166720"
  },
  {
    "text": "the biggest difference is the kubernetes",
    "start": "166720",
    "end": "169120"
  },
  {
    "text": "community driven",
    "start": "169120",
    "end": "170480"
  },
  {
    "text": "project has a very complex configuration",
    "start": "170480",
    "end": "173440"
  },
  {
    "text": "and harnesses lua for many of the",
    "start": "173440",
    "end": "175280"
  },
  {
    "text": "dynamic capabilities",
    "start": "175280",
    "end": "177200"
  },
  {
    "text": "while the nginx inc one is a bit more",
    "start": "177200",
    "end": "179680"
  },
  {
    "text": "slimmed down",
    "start": "179680",
    "end": "181120"
  },
  {
    "text": "and does not use lua from here on out",
    "start": "181120",
    "end": "184400"
  },
  {
    "text": "i'll refer to the kubernetes driven",
    "start": "184400",
    "end": "186800"
  },
  {
    "text": "project as",
    "start": "186800",
    "end": "187519"
  },
  {
    "text": "nginx and the other as nginx",
    "start": "187519",
    "end": "191200"
  },
  {
    "text": "inc",
    "start": "191200",
    "end": "193360"
  },
  {
    "text": "for the actual tests i will use the tool",
    "start": "194959",
    "end": "198319"
  },
  {
    "text": "hey",
    "start": "198319",
    "end": "199599"
  },
  {
    "text": "i will run two different tests in the",
    "start": "199599",
    "end": "202480"
  },
  {
    "text": "first test",
    "start": "202480",
    "end": "203440"
  },
  {
    "text": "i will maintain 250 concurrent workers",
    "start": "203440",
    "end": "207280"
  },
  {
    "text": "from",
    "start": "207280",
    "end": "207680"
  },
  {
    "text": "one traffic injecting pod",
    "start": "207680",
    "end": "211040"
  },
  {
    "text": "the second test will run 50 concurrent",
    "start": "211040",
    "end": "213519"
  },
  {
    "text": "workers",
    "start": "213519",
    "end": "214319"
  },
  {
    "text": "from five traffic injecting pods",
    "start": "214319",
    "end": "217360"
  },
  {
    "text": "each test will run for a total of 360",
    "start": "217360",
    "end": "220560"
  },
  {
    "text": "seconds",
    "start": "220560",
    "end": "221840"
  },
  {
    "text": "during this time i will scale the pods",
    "start": "221840",
    "end": "224159"
  },
  {
    "text": "up to 7",
    "start": "224159",
    "end": "225120"
  },
  {
    "text": "and back down to 5 with 30 second",
    "start": "225120",
    "end": "227760"
  },
  {
    "text": "intervals in between scale outs",
    "start": "227760",
    "end": "231519"
  },
  {
    "text": "i will do this 3 times in a row",
    "start": "231599",
    "end": "235360"
  },
  {
    "text": "and then i will make several changes to",
    "start": "235360",
    "end": "237599"
  },
  {
    "text": "the ingress controllers themselves",
    "start": "237599",
    "end": "239439"
  },
  {
    "text": "such as adding and removing course",
    "start": "239439",
    "end": "241120"
  },
  {
    "text": "headers and adding and removing path",
    "start": "241120",
    "end": "243280"
  },
  {
    "text": "rewrite rules",
    "start": "243280",
    "end": "244560"
  },
  {
    "text": "i will also sleep in between each change",
    "start": "244560",
    "end": "247360"
  },
  {
    "text": "for 30 seconds",
    "start": "247360",
    "end": "250400"
  },
  {
    "text": "at the end of the benchmarking we will",
    "start": "251120",
    "end": "253280"
  },
  {
    "text": "graph the average request per second",
    "start": "253280",
    "end": "255840"
  },
  {
    "text": "the 75th 95th and 99th",
    "start": "255840",
    "end": "259199"
  },
  {
    "text": "latency percentiles and user level cpu",
    "start": "259199",
    "end": "263040"
  },
  {
    "text": "usage",
    "start": "263040",
    "end": "264160"
  },
  {
    "text": "we'll also graph the number of http",
    "start": "264160",
    "end": "266800"
  },
  {
    "text": "error codes that we",
    "start": "266800",
    "end": "268000"
  },
  {
    "text": "receive let's get the benchmark started",
    "start": "268000",
    "end": "273919"
  },
  {
    "text": "i'll be running a shell script that will",
    "start": "281680",
    "end": "283440"
  },
  {
    "text": "handle running the",
    "start": "283440",
    "end": "284880"
  },
  {
    "text": "benchmark as well as collecting and",
    "start": "284880",
    "end": "286800"
  },
  {
    "text": "graphing the data",
    "start": "286800",
    "end": "288400"
  },
  {
    "text": "during the tests i'll also keep a",
    "start": "288400",
    "end": "290800"
  },
  {
    "text": "grafana dashboard open",
    "start": "290800",
    "end": "292400"
  },
  {
    "text": "showing the activity to each of the",
    "start": "292400",
    "end": "294840"
  },
  {
    "text": "servers",
    "start": "294840",
    "end": "297840"
  },
  {
    "text": "[Music]",
    "start": "308320",
    "end": "325910"
  },
  {
    "text": "[Music]",
    "start": "328860",
    "end": "334560"
  },
  {
    "text": "[Music]",
    "start": "345460",
    "end": "348630"
  },
  {
    "text": "[Music]",
    "start": "352160",
    "end": "357700"
  },
  {
    "text": "so",
    "start": "364840",
    "end": "367840"
  },
  {
    "text": "[Music]",
    "start": "370700",
    "end": "381720"
  },
  {
    "text": "[Music]",
    "start": "388120",
    "end": "392840"
  },
  {
    "text": "food",
    "start": "392840",
    "end": "395160"
  },
  {
    "text": "[Music]",
    "start": "395160",
    "end": "427650"
  },
  {
    "text": "[Music]",
    "start": "438530",
    "end": "441730"
  },
  {
    "text": "the first test has completed let's",
    "start": "442479",
    "end": "445680"
  },
  {
    "text": "examine the graph data",
    "start": "445680",
    "end": "448240"
  },
  {
    "text": "if we look at the first chart we're able",
    "start": "448240",
    "end": "451520"
  },
  {
    "text": "to see that h a proxy",
    "start": "451520",
    "end": "453199"
  },
  {
    "text": "came out on top averaging approximately",
    "start": "453199",
    "end": "456960"
  },
  {
    "text": "26 000 requests per second",
    "start": "456960",
    "end": "460479"
  },
  {
    "text": "with envoy in second place at just under",
    "start": "460479",
    "end": "463919"
  },
  {
    "text": "sixteen thousand",
    "start": "463919",
    "end": "466000"
  },
  {
    "text": "we can see that engine x came in last",
    "start": "466000",
    "end": "468879"
  },
  {
    "text": "with around ten",
    "start": "468879",
    "end": "469919"
  },
  {
    "text": "thousand connections per second",
    "start": "469919",
    "end": "473199"
  },
  {
    "text": "if we look at the latency percentiles",
    "start": "473199",
    "end": "477599"
  },
  {
    "text": "we can see that h.a proxy had the lowest",
    "start": "477599",
    "end": "481120"
  },
  {
    "text": "75th 95th and 99th percentiles",
    "start": "481120",
    "end": "486560"
  },
  {
    "text": "with envoy and traffic",
    "start": "486560",
    "end": "489759"
  },
  {
    "text": "neck and neck for second place",
    "start": "489759",
    "end": "492800"
  },
  {
    "text": "nginx inc came in at a close third",
    "start": "492800",
    "end": "496560"
  },
  {
    "text": "and engine x came in last with a massive",
    "start": "496560",
    "end": "499280"
  },
  {
    "text": "spike",
    "start": "499280",
    "end": "500000"
  },
  {
    "text": "for the 99th percentile metrics",
    "start": "500000",
    "end": "507680"
  },
  {
    "text": "looking over at user space cpu usage",
    "start": "507680",
    "end": "511039"
  },
  {
    "text": "we're able to see that h a proxy maxed",
    "start": "511039",
    "end": "513599"
  },
  {
    "text": "out roughly",
    "start": "513599",
    "end": "514719"
  },
  {
    "text": "around 40 percent cpu",
    "start": "514719",
    "end": "518560"
  },
  {
    "text": "nginx inc",
    "start": "518560",
    "end": "521599"
  },
  {
    "text": "came in close close second at 47",
    "start": "521599",
    "end": "527120"
  },
  {
    "text": "and engine x came in third with 63",
    "start": "527120",
    "end": "530880"
  },
  {
    "text": "percent",
    "start": "530880",
    "end": "533360"
  },
  {
    "text": "both envoy and traffic came in at around",
    "start": "533360",
    "end": "536880"
  },
  {
    "text": "70",
    "start": "536880",
    "end": "539519"
  },
  {
    "text": "we also have a graph showing us",
    "start": "540640",
    "end": "543839"
  },
  {
    "text": "how many http errors",
    "start": "543839",
    "end": "547120"
  },
  {
    "text": "were produced by each proxy",
    "start": "547120",
    "end": "551360"
  },
  {
    "text": "it appears that neither h a proxy",
    "start": "552160",
    "end": "555360"
  },
  {
    "text": "nor nginx inc produced any http errors",
    "start": "555360",
    "end": "560240"
  },
  {
    "text": "but traffic produced a little over 300",
    "start": "560240",
    "end": "563839"
  },
  {
    "text": "502 errors nginx produced",
    "start": "563839",
    "end": "567760"
  },
  {
    "text": "28 502 errors and envoy",
    "start": "567760",
    "end": "571279"
  },
  {
    "text": "produced 23 503",
    "start": "571279",
    "end": "575040"
  },
  {
    "text": "errors",
    "start": "575040",
    "end": "577839"
  },
  {
    "text": "now let's go ahead and start our second",
    "start": "578399",
    "end": "583519"
  },
  {
    "text": "test",
    "start": "588839",
    "end": "590800"
  },
  {
    "text": "this time we'll run 50 concurrent",
    "start": "590800",
    "end": "595120"
  },
  {
    "text": "workers",
    "start": "595120",
    "end": "596399"
  },
  {
    "text": "from five different traffic injecting",
    "start": "596399",
    "end": "598959"
  },
  {
    "text": "pods and let it run",
    "start": "598959",
    "end": "600240"
  },
  {
    "text": "for another 360 seconds",
    "start": "600240",
    "end": "605839"
  },
  {
    "text": "[Music]",
    "start": "610420",
    "end": "613470"
  },
  {
    "text": "[Music]",
    "start": "616180",
    "end": "630839"
  },
  {
    "text": "do",
    "start": "630839",
    "end": "633810"
  },
  {
    "text": "[Music]",
    "start": "633810",
    "end": "639519"
  },
  {
    "text": "[Music]",
    "start": "650410",
    "end": "653589"
  },
  {
    "text": "[Music]",
    "start": "659100",
    "end": "662649"
  },
  {
    "text": "[Music]",
    "start": "675650",
    "end": "683370"
  },
  {
    "text": "[Music]",
    "start": "694300",
    "end": "700720"
  },
  {
    "text": "so",
    "start": "700839",
    "end": "703500"
  },
  {
    "text": "[Music]",
    "start": "703500",
    "end": "712850"
  },
  {
    "text": "okay so the second test has completed",
    "start": "716160",
    "end": "719600"
  },
  {
    "text": "let's take a look at the results",
    "start": "719600",
    "end": "723279"
  },
  {
    "text": "so this time we can see the average",
    "start": "724959",
    "end": "727680"
  },
  {
    "text": "request for h a proxy",
    "start": "727680",
    "end": "730000"
  },
  {
    "text": "is about is that thirty seven thousand",
    "start": "730000",
    "end": "733200"
  },
  {
    "text": "which is about ten thousand higher than",
    "start": "733200",
    "end": "735200"
  },
  {
    "text": "the last",
    "start": "735200",
    "end": "735760"
  },
  {
    "text": "test um and",
    "start": "735760",
    "end": "738800"
  },
  {
    "text": "uh envoy again is is that second with",
    "start": "738800",
    "end": "741760"
  },
  {
    "text": "roughly around seventeen thousand",
    "start": "741760",
    "end": "743519"
  },
  {
    "text": "requests per second",
    "start": "743519",
    "end": "745120"
  },
  {
    "text": "nginx inc came in at third with around",
    "start": "745120",
    "end": "747920"
  },
  {
    "text": "fifteen thousand requests per second",
    "start": "747920",
    "end": "751360"
  },
  {
    "text": "looking at the latency percentile graphs",
    "start": "751360",
    "end": "754720"
  },
  {
    "text": "we see that h a proxy is again the",
    "start": "754720",
    "end": "757680"
  },
  {
    "text": "lowest across the board",
    "start": "757680",
    "end": "759440"
  },
  {
    "text": "for the 75th 95th and 99th percentile",
    "start": "759440",
    "end": "765040"
  },
  {
    "text": "envoy comes in second and nginx",
    "start": "765040",
    "end": "769279"
  },
  {
    "text": "inc and traffic are neck and neck for",
    "start": "769279",
    "end": "772079"
  },
  {
    "text": "third",
    "start": "772079",
    "end": "773519"
  },
  {
    "text": "however you'll note there are some",
    "start": "773519",
    "end": "776560"
  },
  {
    "text": "really drastic spikes in the 95th and",
    "start": "776560",
    "end": "779360"
  },
  {
    "text": "99th",
    "start": "779360",
    "end": "780079"
  },
  {
    "text": "percentile for nginx",
    "start": "780079",
    "end": "787839"
  },
  {
    "text": "in the user space cpu usage graphs",
    "start": "788560",
    "end": "792959"
  },
  {
    "text": "we see that nginx inc and ha proxy",
    "start": "792959",
    "end": "796399"
  },
  {
    "text": "are neck and neck with just under 50 cpu",
    "start": "796399",
    "end": "801120"
  },
  {
    "text": "envoy came in around 72",
    "start": "801120",
    "end": "804720"
  },
  {
    "text": "and traffic came in at 77",
    "start": "804720",
    "end": "808320"
  },
  {
    "text": "what's important to note is the",
    "start": "808320",
    "end": "810240"
  },
  {
    "text": "significant difference",
    "start": "810240",
    "end": "811600"
  },
  {
    "text": "in the request rate of h a proxy",
    "start": "811600",
    "end": "814880"
  },
  {
    "text": "compared to the others and yet it was",
    "start": "814880",
    "end": "817279"
  },
  {
    "text": "able to maintain",
    "start": "817279",
    "end": "818480"
  },
  {
    "text": "a consistently low cpu usage",
    "start": "818480",
    "end": "822000"
  },
  {
    "text": "ultimately resources cost money so if",
    "start": "822000",
    "end": "825040"
  },
  {
    "text": "you have an",
    "start": "825040",
    "end": "825600"
  },
  {
    "text": "ingress controller and proxy that are",
    "start": "825600",
    "end": "827920"
  },
  {
    "text": "able to handle more than",
    "start": "827920",
    "end": "829360"
  },
  {
    "text": "double of the closest alternative and do",
    "start": "829360",
    "end": "831920"
  },
  {
    "text": "so",
    "start": "831920",
    "end": "833040"
  },
  {
    "text": "with 30 to 40 percent cpu you're",
    "start": "833040",
    "end": "836320"
  },
  {
    "text": "definitely going to save money",
    "start": "836320",
    "end": "839920"
  },
  {
    "text": "looking down at the error rate",
    "start": "840560",
    "end": "844399"
  },
  {
    "text": "looking down at the error rate we could",
    "start": "845519",
    "end": "848800"
  },
  {
    "text": "see",
    "start": "848800",
    "end": "849920"
  },
  {
    "text": "that neither h a proxy nor",
    "start": "849920",
    "end": "852959"
  },
  {
    "text": "nginx per inc produced any http",
    "start": "852959",
    "end": "856639"
  },
  {
    "text": "errors traffic produced",
    "start": "856639",
    "end": "860000"
  },
  {
    "text": "approximately 630 502 errors",
    "start": "860000",
    "end": "864639"
  },
  {
    "text": "engine x produced 27 502 errors",
    "start": "864639",
    "end": "868399"
  },
  {
    "text": "and 504 errors",
    "start": "868399",
    "end": "871519"
  },
  {
    "text": "and envoy produced 14 503 errors",
    "start": "871519",
    "end": "877199"
  },
  {
    "text": "that concludes the demo aj proxy has a",
    "start": "877360",
    "end": "881279"
  },
  {
    "text": "reputation for being the world's fastest",
    "start": "881279",
    "end": "883680"
  },
  {
    "text": "and most widely used software load",
    "start": "883680",
    "end": "885680"
  },
  {
    "text": "bouncer in the world for a reason",
    "start": "885680",
    "end": "888160"
  },
  {
    "text": "give it a try today and you'll be",
    "start": "888160",
    "end": "890000"
  },
  {
    "text": "certain that it's out of the box",
    "start": "890000",
    "end": "892079"
  },
  {
    "text": "performance will supercharge your",
    "start": "892079",
    "end": "894639"
  },
  {
    "text": "kubernetes environment",
    "start": "894639",
    "end": "896399"
  },
  {
    "text": "thanks for watching",
    "start": "896399",
    "end": "899839"
  },
  {
    "text": "[Music]",
    "start": "900010",
    "end": "903080"
  }
]