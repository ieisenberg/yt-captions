[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "hello everyone thank you so much for coming",
    "start": "469",
    "end": "5600"
  },
  {
    "text": "this is my first talk ever and I'm so excited to share with you my talk about",
    "start": "5600",
    "end": "13590"
  },
  {
    "text": "what's the performance overhead in racing [Music]",
    "start": "13590",
    "end": "18680"
  },
  {
    "text": "I'm Gabriella Soria I'm a former outreach intern for CNCs",
    "start": "18680",
    "end": "24779"
  },
  {
    "start": "19000",
    "end": "19000"
  },
  {
    "text": "and I want to spend a few minutes to talk a little bit about our Ritchie",
    "start": "24779",
    "end": "31460"
  },
  {
    "text": "Ritchie is initiative of software freedom Conservancy and provides three",
    "start": "31460",
    "end": "39420"
  },
  {
    "text": "months paid internships for underrepresented people to work in free",
    "start": "39420",
    "end": "46100"
  },
  {
    "text": "and open-source software this talk will cover the results of my",
    "start": "46100",
    "end": "55260"
  },
  {
    "text": "internship working with open tracing and younger communities if it wasn't for the",
    "start": "55260",
    "end": "63090"
  },
  {
    "text": "opportunity that our Richie gave me the encouragement of my mentor to person",
    "start": "63090",
    "end": "69060"
  },
  {
    "text": "this talk the CNCs diverse scholarship I'll not be here and I want to say thank",
    "start": "69060",
    "end": "76830"
  },
  {
    "text": "you thank you thank you [Applause]",
    "start": "76830",
    "end": "83439"
  },
  {
    "text": "this is that they're not for dead topics that I'll be covering today fits for the",
    "start": "86560",
    "end": "93020"
  },
  {
    "text": "people here that are not familiar with some concepts I'll give you a brief",
    "start": "93020",
    "end": "100009"
  },
  {
    "text": "review about microservices distributed tracing open tracing and Jagger",
    "start": "100009",
    "end": "107829"
  },
  {
    "text": "then I'll representing how the tests were built showing an example and",
    "start": "107829",
    "end": "115579"
  },
  {
    "text": "presenting the results and then I'll share my opinion about what should be",
    "start": "115579",
    "end": "122119"
  },
  {
    "text": "the next steps for this work so a brief",
    "start": "122119",
    "end": "128450"
  },
  {
    "start": "126000",
    "end": "126000"
  },
  {
    "text": "introduction about micro services this Martine foulness Fuller's image is",
    "start": "128450",
    "end": "135470"
  },
  {
    "text": "probably one of the most famous images about micro services and helps to show",
    "start": "135470",
    "end": "142190"
  },
  {
    "text": "the big differences between a monolithic application and one micro service",
    "start": "142190",
    "end": "147470"
  },
  {
    "text": "application micro services are an architectural style that proposed to",
    "start": "147470",
    "end": "154489"
  },
  {
    "text": "have independence Lucie couple services respondent to a business responsibility",
    "start": "154489",
    "end": "161260"
  },
  {
    "text": "it means that the responsibilities of our entire application are spread into",
    "start": "161260",
    "end": "169370"
  },
  {
    "text": "multiple services this architecture has",
    "start": "169370",
    "end": "175730"
  },
  {
    "text": "so many benefits we can deploy more",
    "start": "175730",
    "end": "182660"
  },
  {
    "text": "frequently we have freedom to choose the",
    "start": "182660",
    "end": "187850"
  },
  {
    "text": "right technology for the problem problem we are solving but also this",
    "start": "187850",
    "end": "194269"
  },
  {
    "text": "architecture adds some challenges as for example understanding the transaction",
    "start": "194269",
    "end": "200060"
  },
  {
    "text": "flow from one request through all our system and that time of problem can be",
    "start": "200060",
    "end": "209239"
  },
  {
    "start": "206000",
    "end": "206000"
  },
  {
    "text": "solved use distributed tracing basically distributed tracing is a",
    "start": "209239",
    "end": "215900"
  },
  {
    "text": "method to profile and monitor or our applications it helps to understand",
    "start": "215900",
    "end": "223070"
  },
  {
    "text": "Durst and the behavior of our application and the flow or our transaction",
    "start": "223070",
    "end": "229270"
  },
  {
    "text": "but the most important to the tech performance issues on the other hand",
    "start": "229270",
    "end": "236090"
  },
  {
    "text": "open tracing is a project sponsored by CN CF that provides an standardized API",
    "start": "236090",
    "end": "243640"
  },
  {
    "text": "to allow to write the traces in a vendor neutral way this means that if we decide",
    "start": "243640",
    "end": "252950"
  },
  {
    "text": "to instrument our application today and today which is one tracer implementation",
    "start": "252950",
    "end": "260480"
  },
  {
    "text": "and in the future we need to change it we don't have to change anything in our",
    "start": "260480",
    "end": "266570"
  },
  {
    "text": "application except the tracer implementation and Jager there is an",
    "start": "266570",
    "end": "275450"
  },
  {
    "text": "open source distributed tracing system sponsored by CNCs which implements open",
    "start": "275450",
    "end": "281960"
  },
  {
    "text": "tracing this image shows traces and view",
    "start": "281960",
    "end": "287920"
  },
  {
    "text": "address can be thought as direct acyclic graph of response each row here is a",
    "start": "287920",
    "end": "296180"
  },
  {
    "text": "span the span is an unit of work and it has the operation name the start time",
    "start": "296180",
    "end": "302960"
  },
  {
    "text": "and the duration so let's move to talk",
    "start": "302960",
    "end": "310130"
  },
  {
    "start": "307000",
    "end": "307000"
  },
  {
    "text": "about the test we built these are some",
    "start": "310130",
    "end": "315260"
  },
  {
    "text": "consideration that we took before building the test we use a toolkit",
    "start": "315260",
    "end": "322370"
  },
  {
    "text": "created by open JDK to build been benchmark test it is called Java micro",
    "start": "322370",
    "end": "329750"
  },
  {
    "text": "benchmark harness or th the results that",
    "start": "329750",
    "end": "335390"
  },
  {
    "text": "we got after the execution of the test we process with the",
    "start": "335390",
    "end": "340680"
  },
  {
    "text": "amazing tool called gmh visualizer and the scope of the test that we built is",
    "start": "340680",
    "end": "350600"
  },
  {
    "text": "just for open release in Java and we hope to expand to another language in",
    "start": "350600",
    "end": "357690"
  },
  {
    "text": "the future and we have various benchmark",
    "start": "357690",
    "end": "364050"
  },
  {
    "text": "tests and for all that was possible we try to avoid Network calls in order to",
    "start": "364050",
    "end": "371669"
  },
  {
    "text": "have the del does the most isolated possible here you can see the command",
    "start": "371669",
    "end": "381990"
  },
  {
    "start": "377000",
    "end": "377000"
  },
  {
    "text": "for start a new GM age application this",
    "start": "381990",
    "end": "387120"
  },
  {
    "text": "is Ana standard mail in common and the important thing here is the archetype",
    "start": "387120",
    "end": "393720"
  },
  {
    "text": "group ID which is reference it to the image and with this common we create new",
    "start": "393720",
    "end": "402990"
  },
  {
    "text": "project with the required libraries and with the required client's 4G image and",
    "start": "402990",
    "end": "413690"
  },
  {
    "text": "this is how one of our test looks like",
    "start": "413690",
    "end": "419780"
  },
  {
    "text": "in this case this is a test for open",
    "start": "419780",
    "end": "425430"
  },
  {
    "text": "tracing for a spring cloud and here we",
    "start": "425430",
    "end": "433020"
  },
  {
    "text": "can see that is a normal double class with methods but the metals methods that",
    "start": "433020",
    "end": "441389"
  },
  {
    "text": "we want to benchmark have to be annotated with benchmark and",
    "start": "441389",
    "end": "446510"
  },
  {
    "text": "also we can put the mode of the benchmark for example if we want to",
    "start": "446510",
    "end": "454199"
  },
  {
    "text": "measure in the average or the simple time or the throughput in our case we",
    "start": "454199",
    "end": "462900"
  },
  {
    "text": "decided to separate the modes because",
    "start": "462900",
    "end": "467960"
  },
  {
    "text": "the results that we go separate the modes",
    "start": "467960",
    "end": "473240"
  },
  {
    "text": "[Music] words more easy to represent graphic",
    "start": "473240",
    "end": "481690"
  },
  {
    "text": "graphically with gmh visualizer and we",
    "start": "481690",
    "end": "488440"
  },
  {
    "text": "have one method with known instrumentation and one method for each",
    "start": "488440",
    "end": "496350"
  },
  {
    "text": "tracer implementation that we want to to test we want to benchmark this is",
    "start": "496350",
    "end": "507820"
  },
  {
    "text": "another important part of the benchmark test and sometimes you want to",
    "start": "507820",
    "end": "514860"
  },
  {
    "text": "initialize some variables that your benchmark commits but you don't want to",
    "start": "514860",
    "end": "522250"
  },
  {
    "text": "be part of the code that your bench core measures and for example in this case we",
    "start": "522250",
    "end": "530880"
  },
  {
    "text": "initialize the spring context and we assign a viral with the controller that",
    "start": "531180",
    "end": "539200"
  },
  {
    "text": "we need to use after in the execution of the test also after the test finish we",
    "start": "539200",
    "end": "548220"
  },
  {
    "text": "close the spring context and here we",
    "start": "548220",
    "end": "557230"
  },
  {
    "text": "have classes extending the state parallel classes that we seen before and",
    "start": "557230",
    "end": "565950"
  },
  {
    "text": "with these classes we use a spring profiles to set the property for",
    "start": "565950",
    "end": "577180"
  },
  {
    "text": "injector right tracer implementation for each test that we're trying to build",
    "start": "577180",
    "end": "584070"
  },
  {
    "text": "so after we have test we need to",
    "start": "586370",
    "end": "592940"
  },
  {
    "text": "generate the product with this maven standard common and we run the benchmark",
    "start": "592940",
    "end": "600420"
  },
  {
    "text": "with this simple Java common and the results of this are JSON files in a",
    "start": "600420",
    "end": "608970"
  },
  {
    "text": "subfolder of gmh sorry in a subfolder of",
    "start": "608970",
    "end": "614910"
  },
  {
    "text": "it each project and start with the prefix damaged something and these files",
    "start": "614910",
    "end": "622920"
  },
  {
    "text": "are the input for generate the graphics using geometry so later so this is the",
    "start": "622920",
    "end": "637290"
  },
  {
    "start": "634000",
    "end": "634000"
  },
  {
    "text": "list of the tests that we built we",
    "start": "637290",
    "end": "642960"
  },
  {
    "text": "started with a simple Java scenario without the with the instrumentation",
    "start": "642960",
    "end": "650570"
  },
  {
    "text": "written manually and this is scenario",
    "start": "650570",
    "end": "656209"
  },
  {
    "text": "only test an extreme compatible catenation like concatenate hello world",
    "start": "656209",
    "end": "663410"
  },
  {
    "text": "one iteration number and with this",
    "start": "663410",
    "end": "668600"
  },
  {
    "text": "scenario we don't have either HTTP calls",
    "start": "668600",
    "end": "674700"
  },
  {
    "text": "or frameworks involved this is scenario",
    "start": "674700",
    "end": "680270"
  },
  {
    "text": "doesn't represent a real use case but it provides a very good baseline of the",
    "start": "680270",
    "end": "687720"
  },
  {
    "text": "teracle limits of the to involve then we",
    "start": "687720",
    "end": "694140"
  },
  {
    "text": "have an extreme good project we did the",
    "start": "694140",
    "end": "700850"
  },
  {
    "text": "instrumentation manually to and in this",
    "start": "700850",
    "end": "706440"
  },
  {
    "text": "project will simulate a bidding process like generator",
    "start": "706440",
    "end": "713030"
  },
  {
    "text": "line-items notify the customer calculate the taxes etc another test is the spring",
    "start": "713030",
    "end": "725540"
  },
  {
    "text": "boat and here we use the dependency open",
    "start": "725540",
    "end": "732540"
  },
  {
    "text": "tracing the spring cloud started and we use the pet clinic example application",
    "start": "732540",
    "end": "739280"
  },
  {
    "text": "officially from spring and here there is",
    "start": "739280",
    "end": "748350"
  },
  {
    "text": "no HTTP calls involved that it means we",
    "start": "748350",
    "end": "753450"
  },
  {
    "text": "call in the test to the spring service directly another test is the JDBC we use",
    "start": "753450",
    "end": "764190"
  },
  {
    "text": "in memory database h2 and we instrument",
    "start": "764190",
    "end": "770100"
  },
  {
    "text": "the the application using the library open tracing JDBC this application is an",
    "start": "770100",
    "end": "782550"
  },
  {
    "text": "example of course mana management and in",
    "start": "782550",
    "end": "789090"
  },
  {
    "text": "this example we call in the test to the",
    "start": "789090",
    "end": "795180"
  },
  {
    "text": "direct directly to the spring services and for the last two tests to set of",
    "start": "795180",
    "end": "806790"
  },
  {
    "text": "test servlet filter and jax-rs we did",
    "start": "806790",
    "end": "815000"
  },
  {
    "text": "Network goals that the part of the test executes an HTTP call to perform this in",
    "start": "815000",
    "end": "827430"
  },
  {
    "text": "the case of servlet filter we use the dependency open dressing web server load",
    "start": "827430",
    "end": "835710"
  },
  {
    "text": "filter and in the case of jax-rs who use open",
    "start": "835710",
    "end": "840790"
  },
  {
    "text": "dressing jax-rs discovery and the tracer",
    "start": "840790",
    "end": "847270"
  },
  {
    "text": "in the last two tests is registered in",
    "start": "847270",
    "end": "854650"
  },
  {
    "text": "the global tracer using an application listener and on the startup of the web",
    "start": "854650",
    "end": "862930"
  },
  {
    "text": "application so let's see the results for",
    "start": "862930",
    "end": "872800"
  },
  {
    "start": "867000",
    "end": "867000"
  },
  {
    "text": "this simple java scenario with the the",
    "start": "872800",
    "end": "880450"
  },
  {
    "text": "test execute and simple in string",
    "start": "880450",
    "end": "885880"
  },
  {
    "text": "concatenation and the test compared our non instrumented a scenario with",
    "start": "885880",
    "end": "892980"
  },
  {
    "text": "instrumentation with different tracers we can see in the x-axis we can see we",
    "start": "892980",
    "end": "902590"
  },
  {
    "text": "use haystack tracer layer tracer mock tracer with without termination on knob",
    "start": "902590",
    "end": "910600"
  },
  {
    "text": "tracer let's analyze the numbers the",
    "start": "910600",
    "end": "916150"
  },
  {
    "text": "numbers for non instrumentation and note tracer are very close and equals in some",
    "start": "916150",
    "end": "923920"
  },
  {
    "text": "cases mock tracer is not a very good comparison because it's not intended to",
    "start": "923920",
    "end": "930490"
  },
  {
    "text": "be used in a production environment and keeps the sponge in in memory that",
    "start": "930490",
    "end": "939880"
  },
  {
    "text": "decorates the performance so for this and the other scenarios we will compare",
    "start": "939880",
    "end": "949420"
  },
  {
    "text": "the non instrumentation with Jaeger tracer we also have tested haystack",
    "start": "949420",
    "end": "958840"
  },
  {
    "text": "tracer but just as a reference point you can see in a blue lines here",
    "start": "958840",
    "end": "969839"
  },
  {
    "text": "I'm not showing the numbers in the slide but according to the numbers the simple",
    "start": "970620",
    "end": "978040"
  },
  {
    "text": "time increases around forty four hundred percent in this simple scenario and it's",
    "start": "978040",
    "end": "986650"
  },
  {
    "text": "not intended to sorry it's not easy to see here because the graph is distorted",
    "start": "986650",
    "end": "993190"
  },
  {
    "text": "by mock tracer and haystack tracer but that's the number and if we see the",
    "start": "993190",
    "end": "1001770"
  },
  {
    "start": "999000",
    "end": "999000"
  },
  {
    "text": "other metric the throughput we can see that the throughput decreases by around",
    "start": "1001770",
    "end": "1007560"
  },
  {
    "text": "ninety percent in this simple Java snart",
    "start": "1007560",
    "end": "1013580"
  },
  {
    "text": "this case does not represent a realist case but it provides a very good",
    "start": "1013580",
    "end": "1019710"
  },
  {
    "text": "baseline of the teracle limit of the truth symbols and the big big overhead",
    "start": "1019710",
    "end": "1026850"
  },
  {
    "text": "here that we see when using our Realtors tracer is indeed a specter and is a sign",
    "start": "1026850",
    "end": "1035069"
  },
  {
    "text": "that the benchmark is same so let's move to more real-world scenarios here we can",
    "start": "1035070",
    "end": "1047339"
  },
  {
    "start": "1041000",
    "end": "1041000"
  },
  {
    "text": "see the results for the spring good application containing a building",
    "start": "1047340",
    "end": "1053070"
  },
  {
    "text": "process the application is initialized in each test iteration and using",
    "start": "1053070",
    "end": "1060480"
  },
  {
    "text": "profiles the right tracer is injected the different test measured the process",
    "start": "1060480",
    "end": "1067440"
  },
  {
    "text": "of issuing an invoice in a non instrumented a scenario and instrumented with different tracers this simple time",
    "start": "1067440",
    "end": "1076310"
  },
  {
    "text": "increases around 200 percent in this Springwood scenario",
    "start": "1076310",
    "end": "1083810"
  },
  {
    "start": "1085000",
    "end": "1085000"
  },
  {
    "text": "and if we see the throughput the throughput decreases around 67% let's",
    "start": "1085130",
    "end": "1099230"
  },
  {
    "start": "1099000",
    "end": "1099000"
  },
  {
    "text": "move to see the results for spring cloud",
    "start": "1099230",
    "end": "1104290"
  },
  {
    "text": "this test used up a clinic simple spring based application and the application is",
    "start": "1104290",
    "end": "1111590"
  },
  {
    "text": "initialized for each test and using profiles the right tracer implementation",
    "start": "1111590",
    "end": "1117410"
  },
  {
    "text": "is injected and the different tests measure the process of finding a pet",
    "start": "1117410",
    "end": "1123230"
  },
  {
    "text": "owner by ID in a non instrumented the scenario an instrumented with different tracers the simple time increases in",
    "start": "1123230",
    "end": "1132040"
  },
  {
    "text": "around 4% in this scenario and the",
    "start": "1132040",
    "end": "1138770"
  },
  {
    "start": "1137000",
    "end": "1137000"
  },
  {
    "text": "throughput decreases around a person in the spring good scenario so let's move",
    "start": "1138770",
    "end": "1148520"
  },
  {
    "start": "1146000",
    "end": "1146000"
  },
  {
    "text": "to JDBC this test use a simple boot",
    "start": "1148520",
    "end": "1155800"
  },
  {
    "text": "application containing a basic course management process the application is",
    "start": "1155800",
    "end": "1161540"
  },
  {
    "text": "initialized in each test iteration on user profiles the tracer is injected and",
    "start": "1161540",
    "end": "1168440"
  },
  {
    "text": "the test measured the process of getting",
    "start": "1168440",
    "end": "1174950"
  },
  {
    "text": "all the list of all the courses in a non instrumented a scenario and instrument",
    "start": "1174950",
    "end": "1181100"
  },
  {
    "text": "that with different tracers and the simple time here increases in 13% and",
    "start": "1181100",
    "end": "1191140"
  },
  {
    "start": "1191000",
    "end": "1191000"
  },
  {
    "text": "the throughput decreases around 8% so if",
    "start": "1191140",
    "end": "1198890"
  },
  {
    "text": "we would move to the test that involves",
    "start": "1198890",
    "end": "1204100"
  },
  {
    "text": "HTTP calls like servlet filter for this",
    "start": "1204100",
    "end": "1210070"
  },
  {
    "text": "particular test we use a servlet simple application to",
    "start": "1210070",
    "end": "1216960"
  },
  {
    "text": "process again and return an HTML it sort HTML page with information of the",
    "start": "1216960",
    "end": "1224640"
  },
  {
    "text": "request and a random number and using understo api the servlet is deployed and",
    "start": "1224640",
    "end": "1234080"
  },
  {
    "start": "1227000",
    "end": "1227000"
  },
  {
    "text": "the write tracer is injected and with listeners we registered the tracer in",
    "start": "1234080",
    "end": "1241200"
  },
  {
    "text": "the royal treasury the test consists of making a simpler quest to get a hello",
    "start": "1241200",
    "end": "1248370"
  },
  {
    "text": "world page in a non instrumented scenario an instrumented with different",
    "start": "1248370",
    "end": "1253380"
  },
  {
    "text": "tracers the matrix here shows no evidence of overhead pass the deltas of",
    "start": "1253380",
    "end": "1261540"
  },
  {
    "text": "throughput and single time are no representative and here you can see the",
    "start": "1261540",
    "end": "1273030"
  },
  {
    "text": "graphic for the throughput for the case of servlet filter and the last scenario",
    "start": "1273030",
    "end": "1281429"
  },
  {
    "text": "is jax-rs the tests here use on jax-rs",
    "start": "1281429",
    "end": "1289910"
  },
  {
    "text": "with Springwood application containing a basic course management process this",
    "start": "1289910",
    "end": "1296880"
  },
  {
    "text": "application exposed jax-rs endpoint called",
    "start": "1296880",
    "end": "1301950"
  },
  {
    "text": "cursors and application is alicia initialized for each test iteration and",
    "start": "1301950",
    "end": "1307650"
  },
  {
    "text": "using profile the write tracer is injected the tracer is registered in a",
    "start": "1307650",
    "end": "1314100"
  },
  {
    "text": "global tracer at startup using a listener and the test consists of trying",
    "start": "1314100",
    "end": "1321750"
  },
  {
    "text": "dress code to get a list of all the courses in an non instrument that a",
    "start": "1321750",
    "end": "1328320"
  },
  {
    "text": "scenario and instrumented with different stressors and here also the matrix shows",
    "start": "1328320",
    "end": "1337080"
  },
  {
    "text": "no evidence of overhead as a deltas of simple time",
    "start": "1337080",
    "end": "1343570"
  },
  {
    "text": "and throw good are no representative",
    "start": "1343570",
    "end": "1349649"
  },
  {
    "text": "so in conclusion never head comes from",
    "start": "1349800",
    "end": "1357220"
  },
  {
    "start": "1353000",
    "end": "1353000"
  },
  {
    "text": "the actual tracer and is closely related to how they work on how they are",
    "start": "1357220",
    "end": "1363550"
  },
  {
    "text": "configured in simple java scenarios the throughput decreases around ninety",
    "start": "1363550",
    "end": "1369910"
  },
  {
    "text": "ninety percent and the simple time increases around forty four hundred percent in this case of the simple dial",
    "start": "1369910",
    "end": "1381730"
  },
  {
    "text": "scenarios is not a real use case and",
    "start": "1381730",
    "end": "1386790"
  },
  {
    "text": "they were head that we see here is indeed a specter and this sign that our",
    "start": "1386790",
    "end": "1396130"
  },
  {
    "text": "des is same in a scenario study include",
    "start": "1396130",
    "end": "1401920"
  },
  {
    "text": "calls through the frame world like spring would spring cloud or JDBC on",
    "start": "1401920",
    "end": "1407290"
  },
  {
    "text": "average the throughput decreases around twelve percent and the symbol time increases around four Reapers fourteen",
    "start": "1407290",
    "end": "1415630"
  },
  {
    "text": "percent I have to mention that these",
    "start": "1415630",
    "end": "1421690"
  },
  {
    "text": "numbers are comparing a non instrumentation a scenario and with",
    "start": "1421690",
    "end": "1429540"
  },
  {
    "text": "instrumented with dagger tracer and in",
    "start": "1429540",
    "end": "1436060"
  },
  {
    "text": "the scenarios with client calls through HTTP like servlet filter or jax-rs the",
    "start": "1436060",
    "end": "1444910"
  },
  {
    "text": "matrix shows no evidence of our head as a deltas of throughput on single time",
    "start": "1444910",
    "end": "1451060"
  },
  {
    "text": "are no representative so",
    "start": "1451060",
    "end": "1457510"
  },
  {
    "text": "the next steps in my opinion is death",
    "start": "1457510",
    "end": "1464300"
  },
  {
    "start": "1458000",
    "end": "1458000"
  },
  {
    "text": "with specific concrete tracers such",
    "start": "1464300",
    "end": "1469610"
  },
  {
    "text": "joggers or order to understand how much their head can be controlled with",
    "start": "1469610",
    "end": "1475070"
  },
  {
    "text": "modifying the configuration as for example sampling or different protocols",
    "start": "1475070",
    "end": "1481610"
  },
  {
    "text": "or different Perkins configs and this",
    "start": "1481610",
    "end": "1486800"
  },
  {
    "text": "test can be used with the margin of open dressing and open senses to understand",
    "start": "1486800",
    "end": "1493070"
  },
  {
    "text": "if the changes introduced it in the process effective performance thank you",
    "start": "1493070",
    "end": "1500140"
  },
  {
    "text": "here is the link of the report and with the results if you want to keep in touch",
    "start": "1500140",
    "end": "1508790"
  },
  {
    "text": "this is my Twitter thank you",
    "start": "1508790",
    "end": "1514150"
  },
  {
    "text": "are there any questions",
    "start": "1519810",
    "end": "1523320"
  },
  {
    "text": "I was wondering you said there were no evidence I've ever had - why are you doing the HTTP calls in the last two",
    "start": "1534060",
    "end": "1540000"
  },
  {
    "text": "test cases seems a bit odd seems a bit odd to me that there's no other overhead",
    "start": "1540000",
    "end": "1546150"
  },
  {
    "text": "into executing the additional code so did you consider that it could be a",
    "start": "1546150",
    "end": "1551220"
  },
  {
    "text": "problem of you did not put enough note on the viola network cards on the on the",
    "start": "1551220",
    "end": "1558330"
  },
  {
    "text": "system you try to measure or have you another explanation why there's no overt",
    "start": "1558330",
    "end": "1566750"
  },
  {
    "text": "I'm not sure about the answer of that question but I think if we considered it",
    "start": "1567380",
    "end": "1576000"
  },
  {
    "text": "the cost of the test proportionally to the cost of the network and IO the Delta",
    "start": "1576000",
    "end": "1585840"
  },
  {
    "text": "is not representative yeah but that can",
    "start": "1585840",
    "end": "1592860"
  },
  {
    "text": "be an improvement to the test yeah",
    "start": "1592860",
    "end": "1598580"
  },
  {
    "text": "so I know for tracing usually the advice is to sample like something like one in",
    "start": "1605000",
    "end": "1610350"
  },
  {
    "text": "a thousand requests for actual tracing based on this since real tracing",
    "start": "1610350",
    "end": "1617490"
  },
  {
    "text": "typically has HTTP requests it seems like the only reason for sampling would be to reduce the burden on the like",
    "start": "1617490",
    "end": "1625500"
  },
  {
    "text": "actual tracer not it there's really no risk like I guess would you say that it",
    "start": "1625500",
    "end": "1631380"
  },
  {
    "text": "would be okay to trace every request since there's no apparent overhead with",
    "start": "1631380",
    "end": "1636809"
  },
  {
    "text": "and that wouldn't like hurt your applications performance so all right I don't understand the question well I can",
    "start": "1636809",
    "end": "1644970"
  },
  {
    "text": "rephrase I was kind of wondering so I've wondered if it's okay to sample every",
    "start": "1644970",
    "end": "1652080"
  },
  {
    "text": "request for tracing or if that's risky because that could cause too much overhead would you say that it's okay",
    "start": "1652080",
    "end": "1658650"
  },
  {
    "text": "from a performance standpoint to trace it every request yeah [Applause] the approach that we use is simple",
    "start": "1658650",
    "end": "1668160"
  },
  {
    "text": "sampling the older request but maybe was",
    "start": "1668160",
    "end": "1673559"
  },
  {
    "text": "not the best actually that was one of my",
    "start": "1673559",
    "end": "1678660"
  },
  {
    "text": "points in the next steps it will be",
    "start": "1678660",
    "end": "1684179"
  },
  {
    "text": "important to understand if with assembly we have different deltas with different",
    "start": "1684179",
    "end": "1690929"
  },
  {
    "text": "numbers but with this configuration something all the requests the overhead",
    "start": "1690929",
    "end": "1698220"
  },
  {
    "text": "of the test with non-human tation",
    "start": "1698220",
    "end": "1703350"
  },
  {
    "text": "scenarios uninstrumented with yogurt were not representative i also think",
    "start": "1703350",
    "end": "1712530"
  },
  {
    "text": "that the load on tracer buckets might be problematic",
    "start": "1712530",
    "end": "1719029"
  },
  {
    "text": "thank you for talk I was wondering about the graphs that you showed what did you",
    "start": "1727890",
    "end": "1734380"
  },
  {
    "text": "show different run so what was the the x-axis and why was our graph drawn between the data points what was the",
    "start": "1734380",
    "end": "1740920"
  },
  {
    "text": "eastern meaning of that we didn't have proxies we tried to measure the most",
    "start": "1740920",
    "end": "1752440"
  },
  {
    "text": "isolated possible they were had having one application and instrumented that",
    "start": "1752440",
    "end": "1759730"
  },
  {
    "text": "application and cold calling to the spring service directly one was possible",
    "start": "1759730",
    "end": "1766720"
  },
  {
    "text": "and in a scenarios one that was impossible we use HTTP calls for the get",
    "start": "1766720",
    "end": "1778030"
  },
  {
    "text": "request or something like that but this is one of the scenarios that probably we",
    "start": "1778030",
    "end": "1785440"
  },
  {
    "text": "have to stand in the future okay yeah I I understand your test at that but I was",
    "start": "1785440",
    "end": "1790750"
  },
  {
    "text": "wondering did you consider showing the data in a table with error bars or what",
    "start": "1790750",
    "end": "1796390"
  },
  {
    "text": "is the significance of having the data points for one set up distributors of",
    "start": "1796390",
    "end": "1803680"
  },
  {
    "text": "the x axis if they signify different run",
    "start": "1803680",
    "end": "1809170"
  },
  {
    "text": "instances I don't know sorry",
    "start": "1809170",
    "end": "1819410"
  },
  {
    "text": "oh we we measured the the test multiple",
    "start": "1819410",
    "end": "1830570"
  },
  {
    "text": "times in the in the graph that we we",
    "start": "1830570",
    "end": "1836450"
  },
  {
    "text": "solve one let me show one of them each of of this",
    "start": "1836450",
    "end": "1847630"
  },
  {
    "text": "points where one execution and we compare with different configuration",
    "start": "1847630",
    "end": "1857150"
  },
  {
    "start": "1851000",
    "end": "1851000"
  },
  {
    "text": "with multiple executions and the",
    "start": "1857150",
    "end": "1864190"
  },
  {
    "text": "patterns were the same I think the",
    "start": "1864190",
    "end": "1870110"
  },
  {
    "text": "question was why you chose this representation instead of just like average and I care of ours sodium is",
    "start": "1870110",
    "end": "1881600"
  },
  {
    "text": "there jasira standard deviation as well so we have a lot of variation between the runs then we know we have to look into that",
    "start": "1881600",
    "end": "1889900"
  },
  {
    "text": "but if they are quite continues are quite linear then we know that it's",
    "start": "1889900",
    "end": "1895340"
  },
  {
    "text": "consistent the results are consistent because they're wrong with performance chess is you don't know if what you get",
    "start": "1895340",
    "end": "1901370"
  },
  {
    "text": "is really what you're testing but if you if you so if you have high balance then",
    "start": "1901370",
    "end": "1907250"
  },
  {
    "text": "you might not be testing the right thing yeah so that's maybe the reason why we",
    "start": "1907250",
    "end": "1912710"
  },
  {
    "text": "have multiple dots there",
    "start": "1912710",
    "end": "1916149"
  },
  {
    "text": "hey other questions if not thank you",
    "start": "1919919",
    "end": "1925960"
  },
  {
    "text": "again thank you [Applause]",
    "start": "1925960",
    "end": "1932950"
  }
]