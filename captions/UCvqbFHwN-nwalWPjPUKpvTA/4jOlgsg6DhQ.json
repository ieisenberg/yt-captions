[
  {
    "text": "welcome to this introduction to ask my name is kevin hoffman",
    "start": "399",
    "end": "8879"
  },
  {
    "text": "a little about me before i get started i have been using webassembly for a couple years now i'm",
    "start": "10000",
    "end": "17039"
  },
  {
    "text": "the creator of the wasc open source project the author of the book programming web",
    "start": "17039",
    "end": "22880"
  },
  {
    "text": "assembly with rust",
    "start": "22880",
    "end": "25759"
  },
  {
    "text": "so the agenda for this video is uh first thing i want to do is take a look",
    "start": "28960",
    "end": "34160"
  },
  {
    "text": "at some of the problems with software development today and how webassembly in general",
    "start": "34160",
    "end": "40719"
  },
  {
    "text": "or as a technology and technology standard might be able to help us and then i'll introduce",
    "start": "40719",
    "end": "47120"
  },
  {
    "text": "wasc and go over some last key concepts and how wasc aims to",
    "start": "47120",
    "end": "54480"
  },
  {
    "text": "improve on our software development experience today and then finally we'll get to the good",
    "start": "54480",
    "end": "60239"
  },
  {
    "text": "stuff which is the demos",
    "start": "60239",
    "end": "63840"
  },
  {
    "text": "so software development today is uh full of copy and pasted complexity",
    "start": "65439",
    "end": "72080"
  },
  {
    "text": "and this is where we have a solution to one problem another problem comes along and we often",
    "start": "72080",
    "end": "78720"
  },
  {
    "text": "tend to just copy and paste the solution from one problem to another and like any",
    "start": "78720",
    "end": "84320"
  },
  {
    "text": "good sci-fi movie about clones when you clone a clone you lose fidelity and we lose",
    "start": "84320",
    "end": "90560"
  },
  {
    "text": "that same type of fidelity when we continually reuse solutions reuse",
    "start": "90560",
    "end": "96720"
  },
  {
    "text": "solutions to problems we get further and further away from the problem that we were originally trying",
    "start": "96720",
    "end": "101920"
  },
  {
    "text": "to solve and uh the amount of boilerplate that",
    "start": "101920",
    "end": "107200"
  },
  {
    "text": "our code is filled with is partly to blame here because it's such a chore to rewrite",
    "start": "107200",
    "end": "114799"
  },
  {
    "text": "all of this all of the ceremony that our code normally needs we copy and paste it and so we copy and",
    "start": "114799",
    "end": "121040"
  },
  {
    "text": "paste the boilerplate and business logic because the boilerplate is usually",
    "start": "121040",
    "end": "127200"
  },
  {
    "text": "difficult to separate from the business logic and the development that we do these",
    "start": "127200",
    "end": "132720"
  },
  {
    "text": "days is often high friction especially when it comes to the operations",
    "start": "132720",
    "end": "138560"
  },
  {
    "text": "experience and i'll get more into that later and so i think the bottom line is that",
    "start": "138560",
    "end": "147120"
  },
  {
    "text": "while there are certainly exceptions one of the things that typifies today's development is that 90",
    "start": "147120",
    "end": "153200"
  },
  {
    "text": "of the time that we devote to software development is spent on satisfying non-functional",
    "start": "153200",
    "end": "158560"
  },
  {
    "text": "requirements whereas we only spend 10 of our time working on actual features",
    "start": "158560",
    "end": "164640"
  },
  {
    "text": "and hopefully what we want to do is invert that ratio but today we generally",
    "start": "164640",
    "end": "171519"
  },
  {
    "text": "have unhappy developers and unhappy developers burn out fast and we don't build the kinds of quality",
    "start": "171519",
    "end": "179680"
  },
  {
    "text": "products that we want to build so software development today to",
    "start": "179680",
    "end": "187120"
  },
  {
    "text": "summarize is not portable enough it's not secure enough by default it's not easy enough to deploy and it's",
    "start": "187120",
    "end": "193840"
  },
  {
    "text": "not easy enough to update and maintain and you know while we have you we have",
    "start": "193840",
    "end": "199760"
  },
  {
    "text": "technology like docker and kubernetes in many cases",
    "start": "199760",
    "end": "204799"
  },
  {
    "text": "those things actually add to the complexity and to the friction and the difficulty that developers have",
    "start": "204799",
    "end": "212239"
  },
  {
    "text": "in building and deploying and maintaining their applications and services",
    "start": "212239",
    "end": "218239"
  },
  {
    "text": "so how can web assembly help us with this problem first of all webassembly is portable",
    "start": "218720",
    "end": "224959"
  },
  {
    "text": "webassembly's instruction format uh in in its virtual machine is both",
    "start": "224959",
    "end": "232080"
  },
  {
    "text": "cpu and operating system agnostic that means that the same webassembly",
    "start": "232080",
    "end": "238319"
  },
  {
    "text": "module will operate the same no matter where it's run so long as it has a suitable",
    "start": "238319",
    "end": "244239"
  },
  {
    "text": "host runtime webassembly is fast it's a stack-based",
    "start": "244239",
    "end": "249439"
  },
  {
    "text": "virtual machine and so it's instruction execution is",
    "start": "249439",
    "end": "254799"
  },
  {
    "text": "extremely fast and as i'll explain a little bit later in the video we also",
    "start": "254799",
    "end": "260880"
  },
  {
    "text": "have the ability to compile ahead our webassembly instructions",
    "start": "260880",
    "end": "266320"
  },
  {
    "text": "into native machine instructions webassembly is secure by",
    "start": "266320",
    "end": "273520"
  },
  {
    "text": "definition the webassembly virtual machine is a sandbox and that sandbox has memory isolation",
    "start": "273520",
    "end": "281120"
  },
  {
    "text": "the instruction set for webassembly does not allow for executing instructions outside that",
    "start": "281120",
    "end": "287520"
  },
  {
    "text": "module and so by default this development target is more secure than most of what we're",
    "start": "287520",
    "end": "294800"
  },
  {
    "text": "doing these days the webassembly modules are lightweight",
    "start": "294800",
    "end": "302000"
  },
  {
    "text": "you know there are exceptions to all rules but most of the time when we're building",
    "start": "302000",
    "end": "307840"
  },
  {
    "text": "webassembly modules especially when we build actors like i'll show later in this",
    "start": "307840",
    "end": "313280"
  },
  {
    "text": "video they're extremely small",
    "start": "313280",
    "end": "317520"
  },
  {
    "text": "and finally i think one of the most important points here is that we can embrace the limitations and the",
    "start": "318400",
    "end": "326000"
  },
  {
    "text": "the hard boundaries around uh the webassembly machine format and turn those into",
    "start": "326000",
    "end": "332400"
  },
  {
    "text": "advantages that we can leverage for improving our own development experience",
    "start": "332400",
    "end": "339840"
  },
  {
    "text": "so what is wasc wasc is designed to improve the development",
    "start": "341120",
    "end": "346160"
  },
  {
    "text": "the developer experience while creating a safer safer and simpler operations model",
    "start": "346160",
    "end": "353840"
  },
  {
    "text": "first it stands for webassembly secure capabilities connector and as its name implies",
    "start": "356639",
    "end": "364639"
  },
  {
    "text": "the last host runtime is designed to securely connect capability providers with actors that",
    "start": "364639",
    "end": "372160"
  },
  {
    "text": "consume those capabilities you compose business features by writing",
    "start": "372160",
    "end": "378840"
  },
  {
    "text": "actors and i'll get more into what an actor is in a minute",
    "start": "378840",
    "end": "384160"
  },
  {
    "text": "we securely bind those actors to capabilities and we can run actors and capabilities",
    "start": "384160",
    "end": "390400"
  },
  {
    "text": "anywhere this is specifically to leverage the portability and the uh",
    "start": "390400",
    "end": "398639"
  },
  {
    "text": "size and speed of webassembly the other thing is west is cryptic",
    "start": "398639",
    "end": "405120"
  },
  {
    "text": "cryptographically secure i'll show this in one of the demos but",
    "start": "405120",
    "end": "411440"
  },
  {
    "text": "we can verify the creator of any webassembly module and and we can verify the chain of",
    "start": "411440",
    "end": "419120"
  },
  {
    "text": "prominence so a an actor built for the wask",
    "start": "419120",
    "end": "424160"
  },
  {
    "text": "ecosystem we know uh which entity signed that",
    "start": "424160",
    "end": "429759"
  },
  {
    "text": "actor and we know which entity uh assigned for that entity and so we",
    "start": "429759",
    "end": "435520"
  },
  {
    "text": "can trace the prominence as far back as we want and we also have an exact list of what",
    "start": "435520",
    "end": "441599"
  },
  {
    "text": "that actor is allowed to do if that actor is allowed to use an http server but",
    "start": "441599",
    "end": "447840"
  },
  {
    "text": "not talk to a database that's exactly what the host runtime will enforce",
    "start": "447840",
    "end": "454240"
  },
  {
    "text": "so let's take a look at the wasp stack because like any good open source project it is built on the shoulders of",
    "start": "454960",
    "end": "462880"
  },
  {
    "text": "other giants in the open source area so at the bottom the core of the west",
    "start": "462880",
    "end": "469919"
  },
  {
    "text": "stack is the webassembly engine and webassembly engines tend to come in two different varieties",
    "start": "469919",
    "end": "476400"
  },
  {
    "text": "we have the jitter or the compilers or the interpreters and the compilers as their name implies",
    "start": "476400",
    "end": "485440"
  },
  {
    "text": "take the webassembly instructions and compile them into native machine instructions for",
    "start": "485440",
    "end": "491039"
  },
  {
    "text": "whichever machine read that webassembly module at runtime",
    "start": "491039",
    "end": "496800"
  },
  {
    "text": "interpreters on the other hand don't convert the webassembly instructions they just",
    "start": "496800",
    "end": "502319"
  },
  {
    "text": "interpret them as they encounter them and",
    "start": "502319",
    "end": "507840"
  },
  {
    "text": "there are use cases where you you might want a jitter and use cases where you might want an",
    "start": "509520",
    "end": "515518"
  },
  {
    "text": "interpreter interpreters are going to have",
    "start": "515519",
    "end": "521518"
  },
  {
    "text": "less startup time as a penalty but they might have a higher latency on",
    "start": "521519",
    "end": "528880"
  },
  {
    "text": "individual function calls although the interpreters that we have access to",
    "start": "528880",
    "end": "534160"
  },
  {
    "text": "today are still extremely fast above this in the stack is",
    "start": "534160",
    "end": "541440"
  },
  {
    "text": "web assembly procedure calls and this is a standard that was created",
    "start": "541440",
    "end": "548320"
  },
  {
    "text": "to allow to allow code to invoke",
    "start": "548320",
    "end": "554880"
  },
  {
    "text": "functions inside a webassembly module that would allow the sending and",
    "start": "554880",
    "end": "560240"
  },
  {
    "text": "receiving of arbitrary binary payloads and one of the things one of the",
    "start": "560240",
    "end": "565760"
  },
  {
    "text": "limitations that the webassembly standard has is that it can only support",
    "start": "565760",
    "end": "571519"
  },
  {
    "text": "numeric parameters that functions and so we needed some way to allow us to",
    "start": "571519",
    "end": "578959"
  },
  {
    "text": "in combination with access to the webassembly module's memory",
    "start": "578959",
    "end": "584240"
  },
  {
    "text": "send and receive arbitrary payloads and another detail about wapc",
    "start": "584240",
    "end": "591760"
  },
  {
    "text": "is that it allows for the sending and receiving of these payloads in a way that is",
    "start": "591760",
    "end": "599360"
  },
  {
    "text": "blissfully unaware of the allocation patterns of any of the host or guest languages and so what that",
    "start": "599360",
    "end": "606560"
  },
  {
    "text": "means is a lot of times when we when we see webassembly modules that are generated",
    "start": "606560",
    "end": "613360"
  },
  {
    "text": "through code generation and javascript shims and things like that we'll see",
    "start": "613360",
    "end": "618800"
  },
  {
    "text": "that those modules rely on a javascript style memory allocation pattern for the host",
    "start": "618800",
    "end": "626160"
  },
  {
    "text": "runtime and so that limits that module's portability",
    "start": "626160",
    "end": "631279"
  },
  {
    "text": "wapc is designed specifically to avoid that situation",
    "start": "631279",
    "end": "636640"
  },
  {
    "text": "so as long so a language whether it's a guest or a host can",
    "start": "636640",
    "end": "642320"
  },
  {
    "text": "conform to wapc regardless of how memory is allocated in",
    "start": "642320",
    "end": "647839"
  },
  {
    "text": "that language and regardless of whether that language even has a garbage collector wapc also serves as an anti-corruption",
    "start": "647839",
    "end": "656160"
  },
  {
    "text": "layer between the webassembly engine and the higher levels so you should be able to swap out the",
    "start": "656160",
    "end": "663600"
  },
  {
    "text": "webassembly engine for purpose-built stacks depending on your",
    "start": "663600",
    "end": "669200"
  },
  {
    "text": "use case without having to rewrite any of the code that exists above the wapc level",
    "start": "669200",
    "end": "675839"
  },
  {
    "text": "so above wapc we have a rust crate called wascap and this crate provides capabilities",
    "start": "676000",
    "end": "683920"
  },
  {
    "text": "based security as i've mentioned this is where all of the code exists that embeds",
    "start": "683920",
    "end": "691440"
  },
  {
    "text": "cryptographically assigned json web tokens into webassembly modules reads them from the modules and performs",
    "start": "691440",
    "end": "699360"
  },
  {
    "text": "all the different verification checks that you need to perform on those tokens",
    "start": "699360",
    "end": "705360"
  },
  {
    "text": "above that is another trade called west coast and this is the core library that is used",
    "start": "706720",
    "end": "713600"
  },
  {
    "text": "as the host runtime for actors and capabilities in the wask ecosystem",
    "start": "713600",
    "end": "720959"
  },
  {
    "text": "and then finally we have a generic west coast binary so if your needs aren't all that",
    "start": "720959",
    "end": "727600"
  },
  {
    "text": "specific and what you're doing is just dynamically hosting actors and",
    "start": "727600",
    "end": "734000"
  },
  {
    "text": "capabilities then you should be able to use this host binary as your as the process that you schedule",
    "start": "734000",
    "end": "740399"
  },
  {
    "text": "in on whatever infrastructure you're using but it's also fairly easy to create your own custom",
    "start": "740399",
    "end": "745839"
  },
  {
    "text": "binaries that allow you to mix and match the set of features that are specific to your needs",
    "start": "745839",
    "end": "753680"
  },
  {
    "text": "so let's take a look at how microservice development looks today",
    "start": "754399",
    "end": "761120"
  },
  {
    "text": "first of all it's timely coupled and it's a tightly coupled experience and microservices by and large are not",
    "start": "761279",
    "end": "768639"
  },
  {
    "text": "composable as i said there's exception every rule but in general this is what a typical microservice looks like",
    "start": "768639",
    "end": "775279"
  },
  {
    "text": "we have a small amount of business logic but then we have the components that",
    "start": "775279",
    "end": "781360"
  },
  {
    "text": "we're all familiar with the components that often end up as part of that copy and pasted",
    "start": "781360",
    "end": "786560"
  },
  {
    "text": "boilerplate that we move from one project to the next and that's our http server our routing",
    "start": "786560",
    "end": "792240"
  },
  {
    "text": "rules all of our restful service baggage our http client our logging our analytics if we want to",
    "start": "792240",
    "end": "799839"
  },
  {
    "text": "improve performance with caching access to a relational database all of those things",
    "start": "799839",
    "end": "806480"
  },
  {
    "text": "add brittleness and type coupling to our microservices and they prevent us from allowing our",
    "start": "806480",
    "end": "812320"
  },
  {
    "text": "services to be neatly composable and",
    "start": "812320",
    "end": "818800"
  },
  {
    "text": "more importantly when we have lots and lots and lots of these services",
    "start": "818800",
    "end": "823839"
  },
  {
    "text": "we have essentially duplicates of all of these items in yellow here",
    "start": "823839",
    "end": "828880"
  },
  {
    "text": "all of these non-functional requirements there's no sharing involved",
    "start": "828880",
    "end": "834560"
  },
  {
    "text": "but what if we were to take a look at how we might build services with actors uh in",
    "start": "836079",
    "end": "843760"
  },
  {
    "text": "with actors we have loose coupling and actors are fully composable so",
    "start": "843760",
    "end": "850480"
  },
  {
    "text": "our actor code the core of what we write is should be 90 uh feature",
    "start": "850480",
    "end": "857920"
  },
  {
    "text": "it should be pure business logic and then when we want to use an http client",
    "start": "857920",
    "end": "865279"
  },
  {
    "text": "our code consumes a generic abstraction over http clients and",
    "start": "865279",
    "end": "872160"
  },
  {
    "text": "the was coast runtime is responsible for dynamically satisfying the requirements of an http client to our actor",
    "start": "872160",
    "end": "879839"
  },
  {
    "text": "our code is unaware of which http client were using or how that http client got configured",
    "start": "879839",
    "end": "887199"
  },
  {
    "text": "the last coaster on time takes care of all of that for us the same goes with the http server our",
    "start": "887199",
    "end": "894480"
  },
  {
    "text": "relational database client and our cache clients and any other capability we can dream up",
    "start": "894480",
    "end": "899519"
  },
  {
    "text": "our actors are isolated highly testable small units of deployment",
    "start": "899519",
    "end": "908240"
  },
  {
    "text": "so what does the development workflow look like when we're building actors in musk the first thing we do is we create an",
    "start": "909519",
    "end": "915600"
  },
  {
    "text": "actor and today we can create that actor in rust or assembly",
    "start": "915600",
    "end": "921040"
  },
  {
    "text": "scripts or zig hopefully soon we'll be able to create",
    "start": "921040",
    "end": "926639"
  },
  {
    "text": "one in go once goes webassembly integration gets a little bit better",
    "start": "926639",
    "end": "933519"
  },
  {
    "text": "we'll compile that actor to a wasm file and this is our this is our portable",
    "start": "933519",
    "end": "939600"
  },
  {
    "text": "unit of deployment we'll sign the actor with capability claims and those claims get embedded",
    "start": "939600",
    "end": "946959"
  },
  {
    "text": "directly into the wasm file and this is a different model than how we secure",
    "start": "946959",
    "end": "952959"
  },
  {
    "text": "some of our doctor-based environments today where the claims and the permissions and",
    "start": "952959",
    "end": "958800"
  },
  {
    "text": "the list of what can and cannot be done is stored separately and it's very easy to",
    "start": "958800",
    "end": "964959"
  },
  {
    "text": "accidentally separate the policies from the the targets of those policies a simple",
    "start": "964959",
    "end": "972240"
  },
  {
    "text": "typo can allow an entire suite of vulnerabilities to magically appear",
    "start": "972240",
    "end": "978240"
  },
  {
    "text": "and then we will host our actor in the last run time at run time the actors are bound to",
    "start": "979279",
    "end": "987199"
  },
  {
    "text": "capability providers with configuration and now let's take a look at what an",
    "start": "987199",
    "end": "994160"
  },
  {
    "text": "actor looks like this is using the rust sdk and",
    "start": "994160",
    "end": "1000480"
  },
  {
    "text": "in just a small amount of code you should be able to tell even if you",
    "start": "1000480",
    "end": "1005759"
  },
  {
    "text": "can't really read rust that what we're doing is handling two different messages",
    "start": "1005759",
    "end": "1010880"
  },
  {
    "text": "we're handling a health request and we're handling an http request and a pattern that is",
    "start": "1010880",
    "end": "1019600"
  },
  {
    "text": "pretty common uh as part of the actor model in general is the idea of being reactive",
    "start": "1019600",
    "end": "1027360"
  },
  {
    "text": "these actors can't do anything on their own they cannot initiate their own actions they can only react to things and so",
    "start": "1027360",
    "end": "1035600"
  },
  {
    "text": "these actors the actor that i've got on the screen here is reacting to an http request",
    "start": "1035600",
    "end": "1042798"
  },
  {
    "text": "and in response to that request it will increment a value stored in a key",
    "start": "1042799",
    "end": "1048640"
  },
  {
    "text": "value store and then return the new value of that in a json payload",
    "start": "1048640",
    "end": "1054160"
  },
  {
    "text": "and what's important about this code sample is what's not in here",
    "start": "1054160",
    "end": "1060160"
  },
  {
    "text": "there's no code to create configure or instantiate an http",
    "start": "1060160",
    "end": "1065200"
  },
  {
    "text": "endpoint there's no code to configure restful capabilities there's no code to create and configure",
    "start": "1065200",
    "end": "1072880"
  },
  {
    "text": "a key value store endpoint that code there's no there's nothing tightly",
    "start": "1072880",
    "end": "1077919"
  },
  {
    "text": "coupled to it so what you can't tell from this code is how the http server is satisfied",
    "start": "1077919",
    "end": "1084640"
  },
  {
    "text": "and how the key value store is satisfied this code has nothing in it that would tell you",
    "start": "1084640",
    "end": "1090480"
  },
  {
    "text": "that you're using dynamodb or redis or",
    "start": "1090480",
    "end": "1095840"
  },
  {
    "text": "console or any other form of key value store",
    "start": "1097120",
    "end": "1101840"
  },
  {
    "text": "and when the response is returned it's a data structure that describes an http response how that",
    "start": "1103039",
    "end": "1109840"
  },
  {
    "text": "response is physically delivered to a consumer is not your concern as an actor",
    "start": "1109840",
    "end": "1115120"
  },
  {
    "text": "developer this is this should be pure business logic and pure feature fulfillment and all of the",
    "start": "1115120",
    "end": "1121919"
  },
  {
    "text": "non-functional requirements are part of the wasp runtime",
    "start": "1121919",
    "end": "1127919"
  },
  {
    "text": "capability providers are very similar in that they're also reactive and they respond",
    "start": "1128160",
    "end": "1135039"
  },
  {
    "text": "to messages and so in this case what we have is a capability provider",
    "start": "1135039",
    "end": "1140880"
  },
  {
    "text": "for a key value store and we see the list of operations the list of messages that it can respond to",
    "start": "1140880",
    "end": "1150000"
  },
  {
    "text": "and so creating a capability provider is also fairly straightforward and fairly easy",
    "start": "1150000",
    "end": "1155840"
  },
  {
    "text": "to do so let's take a look at our first demo",
    "start": "1155840",
    "end": "1161120"
  },
  {
    "text": "and in this demo we're going to create our first actor to create a new actor",
    "start": "1161120",
    "end": "1166160"
  },
  {
    "text": "we could do a couple of different things we could do it from scratch or we can use a new template",
    "start": "1166160",
    "end": "1174080"
  },
  {
    "text": "and for the rust sdk actually we have a template for creating a new actor i've created a new",
    "start": "1174080",
    "end": "1180799"
  },
  {
    "text": "project called hello and i will go into that project directory",
    "start": "1180799",
    "end": "1185919"
  },
  {
    "text": "and let's take a look at what we got so we get cargo.tamo file",
    "start": "1185919",
    "end": "1192400"
  },
  {
    "text": "a make file and some source code and let's just take a look at the source",
    "start": "1192400",
    "end": "1198080"
  },
  {
    "text": "first and the vast majority of the sources",
    "start": "1198080",
    "end": "1203440"
  },
  {
    "text": "comments but if you look look at what we get out of the box",
    "start": "1203440",
    "end": "1209440"
  },
  {
    "text": "it's an actor that's handling two different messages it's handling the health request and it's handling an http request",
    "start": "1209440",
    "end": "1217600"
  },
  {
    "text": "and the response to the http request is an ok with no body and",
    "start": "1217600",
    "end": "1225120"
  },
  {
    "text": "as i've discussed in presentations what you don't see here is the code to",
    "start": "1225120",
    "end": "1233039"
  },
  {
    "text": "start an http server you don't see code that assigns",
    "start": "1233039",
    "end": "1238080"
  },
  {
    "text": "a port number and there's no routing rules it's just pure business logic",
    "start": "1238080",
    "end": "1246159"
  },
  {
    "text": "where you as the actor developer get to declare what it is your code is going to do in",
    "start": "1246159",
    "end": "1251200"
  },
  {
    "text": "response to an http request and so",
    "start": "1251200",
    "end": "1257760"
  },
  {
    "text": "what we need to do before we can run this is to compile it",
    "start": "1258320",
    "end": "1265200"
  },
  {
    "text": "and the video editing process that build",
    "start": "1265200",
    "end": "1270480"
  },
  {
    "text": "took much less time than usual and what i now have is a",
    "start": "1270480",
    "end": "1278000"
  },
  {
    "text": "webassembly module that i built and",
    "start": "1278000",
    "end": "1282559"
  },
  {
    "text": "before i can run this webassembly module in the wascoast runtime i need to embed",
    "start": "1283440",
    "end": "1291520"
  },
  {
    "text": "aj some web token in it so that i can assign it and attest to the capabilities",
    "start": "1291520",
    "end": "1297600"
  },
  {
    "text": "that i want it to have and if we look at the make file",
    "start": "1297600",
    "end": "1303200"
  },
  {
    "text": "we'll see that we have uh some of that stuff already taken care of for us",
    "start": "1303200",
    "end": "1308240"
  },
  {
    "text": "so if you look at the build and release tasks you'll see that i'm using the wascap cli",
    "start": "1308240",
    "end": "1314960"
  },
  {
    "text": "to sign the hello.wasm file using a account.nk",
    "start": "1314960",
    "end": "1321840"
  },
  {
    "text": "file for the issuer key and the module.nk file for the subject key",
    "start": "1321840",
    "end": "1330320"
  },
  {
    "text": "and so the makefile also comes with the ability to create keys",
    "start": "1330320",
    "end": "1336480"
  },
  {
    "text": "so first thing we see is the list of actors that we're going to run inside this west",
    "start": "1337520",
    "end": "1344240"
  },
  {
    "text": "coast it's probably an important detail to remember that west coasts are capable of",
    "start": "1344240",
    "end": "1349840"
  },
  {
    "text": "hosting many many actors and capabilities all in the same process that's another one of the goals of the",
    "start": "1349840",
    "end": "1357280"
  },
  {
    "text": "project is to achieve a greater workload density when we're deploying these things to the",
    "start": "1357280",
    "end": "1362559"
  },
  {
    "text": "cloud and so i've got the actor here i have",
    "start": "1362559",
    "end": "1368559"
  },
  {
    "text": "the capability that i want to load which is a linux",
    "start": "1368559",
    "end": "1374640"
  },
  {
    "text": "dynamically linked library that i'm using as a plugin",
    "start": "1374640",
    "end": "1379760"
  },
  {
    "text": "and then i have the bindings for my actor and this is the public key of the actor and",
    "start": "1379760",
    "end": "1384880"
  },
  {
    "text": "i'm binding it to the wasp http server capability with the configuration inside this",
    "start": "1384880",
    "end": "1390799"
  },
  {
    "text": "values tag and i'm assigning the port to 8081. now what's interesting here",
    "start": "1390799",
    "end": "1396640"
  },
  {
    "text": "is that this actor is not the same as the actor that i signed and that's",
    "start": "1396640",
    "end": "1402880"
  },
  {
    "text": "because i just generated a new set of private keys and every time i change",
    "start": "1402880",
    "end": "1408000"
  },
  {
    "text": "a private key it will change the public identity of a module and so when you are going through the",
    "start": "1408000",
    "end": "1415200"
  },
  {
    "text": "wesk samples and through the github repository and uh tutorials you'll notice that",
    "start": "1415200",
    "end": "1423039"
  },
  {
    "text": "there are a number of times where it mentions that the actors public key will not match what you have on your system",
    "start": "1423039",
    "end": "1429520"
  },
  {
    "text": "and that's because the private keys that we have on our system or in github",
    "start": "1429520",
    "end": "1434720"
  },
  {
    "text": "or in our ci pipeline are not going to be the private keys you have on your machine",
    "start": "1434720",
    "end": "1440640"
  },
  {
    "text": "so what i need to do is change this actor in this module so first thing i'm going",
    "start": "1440640",
    "end": "1446720"
  },
  {
    "text": "to do is copy the module that i got from examining the",
    "start": "1446720",
    "end": "1452720"
  },
  {
    "text": "capabilities and then i'm going to modify this manifest real quick",
    "start": "1452720",
    "end": "1459840"
  },
  {
    "text": "i'll replace that make sure that took so now i have a new module a new",
    "start": "1461520",
    "end": "1469600"
  },
  {
    "text": "module key in this manifest so let's try that again",
    "start": "1469600",
    "end": "1475600"
  },
  {
    "text": "and now i realize this isn't as interesting as a web ui or a video game but there are some",
    "start": "1475600",
    "end": "1482799"
  },
  {
    "text": "interesting things happening here the first thing we can see is that the westcoast discovered capability at the",
    "start": "1482799",
    "end": "1489520"
  },
  {
    "text": "stations for an actor and it says it is that it uses the wask http server",
    "start": "1489520",
    "end": "1496640"
  },
  {
    "text": "you can see that it's loading our http server which is provided by a rust rate called",
    "start": "1496640",
    "end": "1502880"
  },
  {
    "text": "active tactics and this is the capability provider and",
    "start": "1502880",
    "end": "1508799"
  },
  {
    "text": "the binding and i'll discuss bindings in another detailed session later",
    "start": "1508799",
    "end": "1514240"
  },
  {
    "text": "so this is up and running and so i should be able to open another terminal here",
    "start": "1514240",
    "end": "1522559"
  },
  {
    "text": "and curl the service running on port 8081 and as i discussed earlier",
    "start": "1522559",
    "end": "1530480"
  },
  {
    "text": "what was happening was we were just returning okay with no body so this is exactly what i would expect",
    "start": "1530480",
    "end": "1536400"
  },
  {
    "text": "to get and just to verify that that's that's why i got that answer let's stop the",
    "start": "1536400",
    "end": "1542720"
  },
  {
    "text": "west coast and try and trail that again and now i get connection refused so",
    "start": "1542720",
    "end": "1548240"
  },
  {
    "text": "what we're really looking at here is",
    "start": "1549919",
    "end": "1557279"
  },
  {
    "text": "this tiny little bit of code is now able to",
    "start": "1557279",
    "end": "1564000"
  },
  {
    "text": "respond to http requests but more importantly it's able to consume",
    "start": "1565120",
    "end": "1570400"
  },
  {
    "text": "capabilities over abstractions in a loosely coupled fashion where the",
    "start": "1570400",
    "end": "1576880"
  },
  {
    "text": "connection to that capability is cryptographically secure and can be",
    "start": "1576880",
    "end": "1581919"
  },
  {
    "text": "swapped out at runtime the actor can be swapped out at runtime and because the webassembly module is",
    "start": "1581919",
    "end": "1588720"
  },
  {
    "text": "portable our code can go anywhere from a raspberry pi to the cloud to an edge service",
    "start": "1588720",
    "end": "1596640"
  },
  {
    "text": "all without ever having to be recompiled and that's the demo for",
    "start": "1596640",
    "end": "1603120"
  },
  {
    "text": "creating a new actor in wasc",
    "start": "1603120",
    "end": "1613840"
  },
  {
    "text": "our second demo will be adding additional capabilities to the actor we created in the first",
    "start": "2044320",
    "end": "2050000"
  },
  {
    "text": "demo and finally we're going to do a demo",
    "start": "2050000",
    "end": "2055599"
  },
  {
    "text": "showing some of the more advanced features of the west coast runtime where we will allow actors to",
    "start": "2055599",
    "end": "2062320"
  },
  {
    "text": "participate in a distributed network called the lattice",
    "start": "2062320",
    "end": "2070320"
  }
]