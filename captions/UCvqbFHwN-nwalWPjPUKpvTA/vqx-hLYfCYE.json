[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "well hi everyone uh welcome to my talk",
    "start": "560",
    "end": "2879"
  },
  {
    "text": "uh i'm aditi i'm a software engineer",
    "start": "2879",
    "end": "5279"
  },
  {
    "text": "working at isovelyn",
    "start": "5279",
    "end": "7120"
  },
  {
    "text": "and this talk features a joint work with",
    "start": "7120",
    "end": "9599"
  },
  {
    "text": "martinez a",
    "start": "9599",
    "end": "11200"
  },
  {
    "text": "bit of context into why debugging",
    "start": "11200",
    "end": "13440"
  },
  {
    "text": "kubernetes networking is relevant for us",
    "start": "13440",
    "end": "17039"
  },
  {
    "text": "martinez and i work on psyllium",
    "start": "17039",
    "end": "20080"
  },
  {
    "text": "which is an open source cni",
    "start": "20080",
    "end": "22960"
  },
  {
    "text": "uh powered by ebpf",
    "start": "22960",
    "end": "26320"
  },
  {
    "text": "and we work with one of the most",
    "start": "26320",
    "end": "28720"
  },
  {
    "text": "sophisticated set of users uh",
    "start": "28720",
    "end": "31439"
  },
  {
    "text": "and to enable them to network and secure",
    "start": "31439",
    "end": "34800"
  },
  {
    "text": "their communities clusters",
    "start": "34800",
    "end": "37920"
  },
  {
    "text": "uh so yeah let's get started uh in this",
    "start": "37920",
    "end": "40559"
  },
  {
    "text": "talk i'm going to share our debugging",
    "start": "40559",
    "end": "42559"
  },
  {
    "text": "experiences and present a new tool that",
    "start": "42559",
    "end": "45120"
  },
  {
    "text": "we have developed using ebpf",
    "start": "45120",
    "end": "48559"
  },
  {
    "text": "so let's take a common kubernetes",
    "start": "48559",
    "end": "51680"
  },
  {
    "text": "cluster where our request is coming onto",
    "start": "51680",
    "end": "55600"
  },
  {
    "text": "kubernetes node and",
    "start": "55600",
    "end": "57199"
  },
  {
    "text": "it's being delivered to a service part",
    "start": "57199",
    "end": "60559"
  },
  {
    "text": "so the request traffic will first get",
    "start": "60559",
    "end": "62800"
  },
  {
    "text": "processed at neck",
    "start": "62800",
    "end": "64559"
  },
  {
    "text": "it'll then get routed to linux kernel",
    "start": "64559",
    "end": "67040"
  },
  {
    "text": "networking stack and then uh it'll",
    "start": "67040",
    "end": "69600"
  },
  {
    "text": "traverse from host network namespace to",
    "start": "69600",
    "end": "73040"
  },
  {
    "text": "report network namespace via a couple of",
    "start": "73040",
    "end": "75600"
  },
  {
    "text": "uh v",
    "start": "75600",
    "end": "77200"
  },
  {
    "text": "devices pair",
    "start": "77200",
    "end": "79280"
  },
  {
    "text": "so whenever there are network connect",
    "start": "79280",
    "end": "81200"
  },
  {
    "text": "connectivity issues we start with",
    "start": "81200",
    "end": "83439"
  },
  {
    "text": "control plane checking all the",
    "start": "83439",
    "end": "85119"
  },
  {
    "text": "configurations are correct our services",
    "start": "85119",
    "end": "87759"
  },
  {
    "text": "our services are deployed the service",
    "start": "87759",
    "end": "89920"
  },
  {
    "text": "part is up and running and we always",
    "start": "89920",
    "end": "92479"
  },
  {
    "text": "make sure that it's not the dns",
    "start": "92479",
    "end": "95280"
  },
  {
    "text": "but today i want to draw attention to a",
    "start": "95280",
    "end": "97680"
  },
  {
    "text": "key component that often are treated as",
    "start": "97680",
    "end": "100240"
  },
  {
    "text": "a black box and that's the linux kernel",
    "start": "100240",
    "end": "102640"
  },
  {
    "text": "network",
    "start": "102640",
    "end": "104079"
  },
  {
    "text": "debugging linux current networking is",
    "start": "104079",
    "end": "106159"
  },
  {
    "text": "hard and let's zoom in to see why that",
    "start": "106159",
    "end": "108960"
  },
  {
    "text": "is",
    "start": "108960",
    "end": "109840"
  },
  {
    "text": "so this is a detailed network flow",
    "start": "109840",
    "end": "112240"
  },
  {
    "text": "diagram of linux kernel network",
    "start": "112240",
    "end": "114399"
  },
  {
    "text": "internals",
    "start": "114399",
    "end": "115600"
  },
  {
    "text": "and as you can see there are",
    "start": "115600",
    "end": "117040"
  },
  {
    "text": "overwhelming number of uh",
    "start": "117040",
    "end": "119360"
  },
  {
    "text": "packet processing functions so",
    "start": "119360",
    "end": "121680"
  },
  {
    "text": "when you send a single packet",
    "start": "121680",
    "end": "124320"
  },
  {
    "text": "it requires many many hops until it",
    "start": "124320",
    "end": "126799"
  },
  {
    "text": "reaches its destination",
    "start": "126799",
    "end": "129440"
  },
  {
    "text": "uh so sure there are like packet",
    "start": "129440",
    "end": "131039"
  },
  {
    "text": "counters and uh",
    "start": "131039",
    "end": "133280"
  },
  {
    "text": "stats that you can observe uh",
    "start": "133280",
    "end": "135840"
  },
  {
    "text": "but these are not enough uh to get to",
    "start": "135840",
    "end": "138239"
  },
  {
    "text": "the root cause because kernel state",
    "start": "138239",
    "end": "141680"
  },
  {
    "text": "can't be observed",
    "start": "141680",
    "end": "143440"
  },
  {
    "text": "in real time uh in an easy manner",
    "start": "143440",
    "end": "146720"
  },
  {
    "text": "so we have this internal uh joke uh that",
    "start": "146720",
    "end": "150400"
  },
  {
    "text": "whenever we're trying to",
    "start": "150400",
    "end": "152319"
  },
  {
    "text": "track a packet in linux kernel uh it's",
    "start": "152319",
    "end": "154800"
  },
  {
    "text": "like finding waldo",
    "start": "154800",
    "end": "156800"
  },
  {
    "text": "one can easily feel lost when they uh",
    "start": "156800",
    "end": "159040"
  },
  {
    "text": "fall down the uh rabbit hole of linux",
    "start": "159040",
    "end": "161519"
  },
  {
    "text": "kernel networking",
    "start": "161519",
    "end": "163519"
  },
  {
    "text": "so next we are gonna look at some of our",
    "start": "163519",
    "end": "165920"
  },
  {
    "text": "uh uh most godo tools um so one of our",
    "start": "165920",
    "end": "169680"
  },
  {
    "text": "most favorite tools is tcp dump and you",
    "start": "169680",
    "end": "172879"
  },
  {
    "text": "always reach first whenever there are",
    "start": "172879",
    "end": "174640"
  },
  {
    "text": "like network connectivity issues and i",
    "start": "174640",
    "end": "176879"
  },
  {
    "text": "agree that uh it's a good tool to start",
    "start": "176879",
    "end": "179760"
  },
  {
    "text": "your debug routine",
    "start": "179760",
    "end": "182080"
  },
  {
    "text": "but the problem with tcp down is that it",
    "start": "182080",
    "end": "184560"
  },
  {
    "text": "only gives you high level information",
    "start": "184560",
    "end": "186879"
  },
  {
    "text": "because",
    "start": "186879",
    "end": "188159"
  },
  {
    "text": "uh the tcp tap tcp dump tap points are",
    "start": "188159",
    "end": "191280"
  },
  {
    "text": "at the periphery of linux kernel",
    "start": "191280",
    "end": "193360"
  },
  {
    "text": "networking stack",
    "start": "193360",
    "end": "194879"
  },
  {
    "text": "but in real life",
    "start": "194879",
    "end": "196800"
  },
  {
    "text": "situation is much more complex and",
    "start": "196800",
    "end": "199360"
  },
  {
    "text": "either the packets are dropped in the",
    "start": "199360",
    "end": "201280"
  },
  {
    "text": "neck or in the stack or in the pod",
    "start": "201280",
    "end": "203760"
  },
  {
    "text": "network name space",
    "start": "203760",
    "end": "205440"
  },
  {
    "text": "and so and so forth",
    "start": "205440",
    "end": "207680"
  },
  {
    "start": "207000",
    "end": "354000"
  },
  {
    "text": "so next up moving on to like",
    "start": "207680",
    "end": "210319"
  },
  {
    "text": "traditional logging based methods uh",
    "start": "210319",
    "end": "212319"
  },
  {
    "text": "whenever developers don't have access to",
    "start": "212319",
    "end": "214799"
  },
  {
    "text": "good uh debugger uh they always rely on",
    "start": "214799",
    "end": "218879"
  },
  {
    "text": "logging based uh",
    "start": "218879",
    "end": "221120"
  },
  {
    "text": "debugging so kernel exposes this print k",
    "start": "221120",
    "end": "224560"
  },
  {
    "text": "function which you can use to add",
    "start": "224560",
    "end": "226159"
  },
  {
    "text": "debugging statements in the kernel code",
    "start": "226159",
    "end": "228879"
  },
  {
    "text": "but it requires recompiling the kernel",
    "start": "228879",
    "end": "231680"
  },
  {
    "text": "and in many cases reboot so it's not a",
    "start": "231680",
    "end": "234879"
  },
  {
    "text": "viable option in production environments",
    "start": "234879",
    "end": "237760"
  },
  {
    "text": "if you're not careful with",
    "start": "237760",
    "end": "239760"
  },
  {
    "text": "your debug statements it can cause",
    "start": "239760",
    "end": "242640"
  },
  {
    "text": "kernel panics",
    "start": "242640",
    "end": "245599"
  },
  {
    "text": "in short it's it's very slow uh it has",
    "start": "247120",
    "end": "250000"
  },
  {
    "text": "very slow debugging cycles because it",
    "start": "250000",
    "end": "252640"
  },
  {
    "text": "requires many many iterations uh let's",
    "start": "252640",
    "end": "255280"
  },
  {
    "text": "say you ruled out that dns is not the",
    "start": "255280",
    "end": "257359"
  },
  {
    "text": "issue here and you wanna now trace",
    "start": "257359",
    "end": "259919"
  },
  {
    "text": "packets going to",
    "start": "259919",
    "end": "261759"
  },
  {
    "text": "the cube api server you can't easily do",
    "start": "261759",
    "end": "263840"
  },
  {
    "text": "that",
    "start": "263840",
    "end": "265759"
  },
  {
    "text": "so moving on to",
    "start": "265759",
    "end": "267440"
  },
  {
    "text": "some some of the generic tracing tools",
    "start": "267440",
    "end": "270320"
  },
  {
    "text": "so a couple of examples are perf or vpf",
    "start": "270320",
    "end": "273520"
  },
  {
    "text": "trace",
    "start": "273520",
    "end": "275199"
  },
  {
    "text": "superf is a performance measuring tool",
    "start": "275199",
    "end": "277440"
  },
  {
    "text": "that also allows you to trace calls to",
    "start": "277440",
    "end": "280720"
  },
  {
    "text": "some of the network uh",
    "start": "280720",
    "end": "282880"
  },
  {
    "text": "linux kernel network uh functions and if",
    "start": "282880",
    "end": "285600"
  },
  {
    "text": "you have used for before then you can",
    "start": "285600",
    "end": "287520"
  },
  {
    "text": "identify uh the snippet that i've added",
    "start": "287520",
    "end": "290000"
  },
  {
    "text": "uh on the slide",
    "start": "290000",
    "end": "292000"
  },
  {
    "text": "so in this case i'm using perf record to",
    "start": "292000",
    "end": "295360"
  },
  {
    "text": "record all the calls that are going to",
    "start": "295360",
    "end": "297520"
  },
  {
    "text": "uh skb uh",
    "start": "297520",
    "end": "300080"
  },
  {
    "text": "free uh skb free function that which is",
    "start": "300080",
    "end": "303120"
  },
  {
    "text": "which is invoked whenever a packet is",
    "start": "303120",
    "end": "304960"
  },
  {
    "text": "dropped in the kernel",
    "start": "304960",
    "end": "306720"
  },
  {
    "text": "and first script is then used to dump",
    "start": "306720",
    "end": "309280"
  },
  {
    "text": "traces uh that are collected from perf",
    "start": "309280",
    "end": "312160"
  },
  {
    "text": "record",
    "start": "312160",
    "end": "313520"
  },
  {
    "text": "and as you can see",
    "start": "313520",
    "end": "315360"
  },
  {
    "text": "uh the output",
    "start": "315360",
    "end": "317600"
  },
  {
    "text": "is very limited",
    "start": "317600",
    "end": "319280"
  },
  {
    "text": "uh it doesn't have uh",
    "start": "319280",
    "end": "321360"
  },
  {
    "text": "limit uh it has very limited filtering",
    "start": "321360",
    "end": "323600"
  },
  {
    "text": "capabilities so if you're trying to",
    "start": "323600",
    "end": "324960"
  },
  {
    "text": "debug a dns issue you can't specify hey",
    "start": "324960",
    "end": "327919"
  },
  {
    "text": "i want to trace all the packets that are",
    "start": "327919",
    "end": "330320"
  },
  {
    "text": "going to port 53.",
    "start": "330320",
    "end": "333360"
  },
  {
    "text": "there is no information about let's say",
    "start": "333360",
    "end": "335199"
  },
  {
    "text": "for example source or destination ip",
    "start": "335199",
    "end": "337120"
  },
  {
    "text": "addresses ports",
    "start": "337120",
    "end": "339039"
  },
  {
    "text": "uh and as i mentioned before whenever",
    "start": "339039",
    "end": "341600"
  },
  {
    "text": "you use sport record you have to specify",
    "start": "341600",
    "end": "343759"
  },
  {
    "text": "what function you're trying to trace",
    "start": "343759",
    "end": "345919"
  },
  {
    "text": "calls to and in many cases uh you don't",
    "start": "345919",
    "end": "349520"
  },
  {
    "text": "have that information when you're",
    "start": "349520",
    "end": "350880"
  },
  {
    "text": "starting out with debugging uh an issue",
    "start": "350880",
    "end": "354960"
  },
  {
    "start": "354000",
    "end": "409000"
  },
  {
    "text": "so we we approach this debugging uh",
    "start": "354960",
    "end": "358319"
  },
  {
    "text": "problem in a",
    "start": "358319",
    "end": "359919"
  },
  {
    "text": "very different manner",
    "start": "359919",
    "end": "362080"
  },
  {
    "text": "so",
    "start": "362080",
    "end": "363600"
  },
  {
    "text": "not all network connectivity issues",
    "start": "363600",
    "end": "365840"
  },
  {
    "text": "involve packet drops",
    "start": "365840",
    "end": "368240"
  },
  {
    "text": "and uh if i want to interest introspect",
    "start": "368240",
    "end": "371360"
  },
  {
    "text": "kernel uh network state in a",
    "start": "371360",
    "end": "374160"
  },
  {
    "text": "uh",
    "start": "374160",
    "end": "374960"
  },
  {
    "text": "in a fine-grained manner then",
    "start": "374960",
    "end": "377280"
  },
  {
    "text": "is there any uh way to get a list of all",
    "start": "377280",
    "end": "380479"
  },
  {
    "text": "packet processing functions",
    "start": "380479",
    "end": "383440"
  },
  {
    "text": "next up uh we want to get callbacks to",
    "start": "383440",
    "end": "386400"
  },
  {
    "text": "uh",
    "start": "386400",
    "end": "387600"
  },
  {
    "text": "whenever these functions are",
    "start": "387600",
    "end": "389440"
  },
  {
    "text": "executed so that",
    "start": "389440",
    "end": "391520"
  },
  {
    "text": "we can analyze kernel state uh",
    "start": "391520",
    "end": "394560"
  },
  {
    "text": "uh",
    "start": "394560",
    "end": "395840"
  },
  {
    "text": "in a more detailed uh fashion but more",
    "start": "395840",
    "end": "398880"
  },
  {
    "text": "importantly uh we're gonna filter this",
    "start": "398880",
    "end": "401440"
  },
  {
    "text": "callbacks only for traffic that's",
    "start": "401440",
    "end": "403440"
  },
  {
    "text": "relevant for us",
    "start": "403440",
    "end": "404800"
  },
  {
    "text": "so this is the wish list that martinez",
    "start": "404800",
    "end": "407039"
  },
  {
    "text": "and i came up with",
    "start": "407039",
    "end": "408639"
  },
  {
    "text": "and uh this brings to brings me to the",
    "start": "408639",
    "end": "411680"
  },
  {
    "start": "409000",
    "end": "467000"
  },
  {
    "text": "second part of my presentation where uh",
    "start": "411680",
    "end": "414319"
  },
  {
    "text": "where we are gonna find answers to these",
    "start": "414319",
    "end": "416080"
  },
  {
    "text": "questions uh using ebpf",
    "start": "416080",
    "end": "418960"
  },
  {
    "text": "so ebpf has captured the imagination of",
    "start": "418960",
    "end": "422400"
  },
  {
    "text": "many in recent years",
    "start": "422400",
    "end": "425039"
  },
  {
    "text": "and companies like facebook netflix",
    "start": "425039",
    "end": "428080"
  },
  {
    "text": "isovalene uh",
    "start": "428080",
    "end": "430000"
  },
  {
    "text": "are using ebpf to solve a spectrum of",
    "start": "430000",
    "end": "432960"
  },
  {
    "text": "use cases",
    "start": "432960",
    "end": "434400"
  },
  {
    "text": "uh to so so to set the context for our",
    "start": "434400",
    "end": "436800"
  },
  {
    "text": "new tool uh let's look at what ebpf is",
    "start": "436800",
    "end": "441039"
  },
  {
    "text": "so ebpf is an internal virtual machine",
    "start": "441039",
    "end": "443919"
  },
  {
    "text": "uh that safely executes native code on",
    "start": "443919",
    "end": "446960"
  },
  {
    "text": "certain events",
    "start": "446960",
    "end": "448800"
  },
  {
    "text": "it's highly programmable and it's",
    "start": "448800",
    "end": "450880"
  },
  {
    "text": "performant because the code is executed",
    "start": "450880",
    "end": "453360"
  },
  {
    "text": "directly in the kernel",
    "start": "453360",
    "end": "455120"
  },
  {
    "text": "and because of this reasons it's touted",
    "start": "455120",
    "end": "457840"
  },
  {
    "text": "as the javascript for the kernel",
    "start": "457840",
    "end": "461280"
  },
  {
    "text": "and",
    "start": "461280",
    "end": "462479"
  },
  {
    "text": "let's unpack this information uh with an",
    "start": "462479",
    "end": "464879"
  },
  {
    "text": "end to end workflow uh next",
    "start": "464879",
    "end": "467599"
  },
  {
    "start": "467000",
    "end": "693000"
  },
  {
    "text": "so here i have uh a simple uh bpf",
    "start": "467599",
    "end": "470960"
  },
  {
    "text": "program where i've added a cr k probe to",
    "start": "470960",
    "end": "474319"
  },
  {
    "text": "one of the uh network functions in linux",
    "start": "474319",
    "end": "476840"
  },
  {
    "text": "kernel and k probes is a debug mechanism",
    "start": "476840",
    "end": "480960"
  },
  {
    "text": "uh",
    "start": "480960",
    "end": "482560"
  },
  {
    "text": "in linux kernel where",
    "start": "482560",
    "end": "484560"
  },
  {
    "text": "uh it allows you to execute bpf programs",
    "start": "484560",
    "end": "487680"
  },
  {
    "text": "when whenever any kernel instruction is",
    "start": "487680",
    "end": "490319"
  },
  {
    "text": "executed so when you attach a k probe uh",
    "start": "490319",
    "end": "494800"
  },
  {
    "text": "in your bpf program to a linux runner",
    "start": "494800",
    "end": "496879"
  },
  {
    "text": "function",
    "start": "496879",
    "end": "497840"
  },
  {
    "text": "uh your bpf program will be executed",
    "start": "497840",
    "end": "500319"
  },
  {
    "text": "whenever uh that function is called so",
    "start": "500319",
    "end": "502479"
  },
  {
    "text": "in this case as you can see",
    "start": "502479",
    "end": "504800"
  },
  {
    "text": "uh",
    "start": "504800",
    "end": "505680"
  },
  {
    "text": "i'm getting call back uh",
    "start": "505680",
    "end": "507599"
  },
  {
    "text": "or rather i hope that i'll get call back",
    "start": "507599",
    "end": "509599"
  },
  {
    "text": "whenever ip local deliver function is",
    "start": "509599",
    "end": "511680"
  },
  {
    "text": "executed",
    "start": "511680",
    "end": "513039"
  },
  {
    "text": "and skb is the linux uh representation",
    "start": "513039",
    "end": "516719"
  },
  {
    "text": "of packet",
    "start": "516719",
    "end": "518640"
  },
  {
    "text": "so in this program uh i'm going to parse",
    "start": "518640",
    "end": "521279"
  },
  {
    "text": "that skb",
    "start": "521279",
    "end": "522560"
  },
  {
    "text": "uh dump some fields uh and let's look at",
    "start": "522560",
    "end": "525519"
  },
  {
    "text": "what how we can compile it next",
    "start": "525519",
    "end": "528480"
  },
  {
    "text": "so this program is compiled using clang",
    "start": "528480",
    "end": "531920"
  },
  {
    "text": "which outputs an elf binary that",
    "start": "531920",
    "end": "534959"
  },
  {
    "text": "contains bpf byte code",
    "start": "534959",
    "end": "537680"
  },
  {
    "text": "it's",
    "start": "537680",
    "end": "538399"
  },
  {
    "text": "it next fed to an ebpf loader",
    "start": "538399",
    "end": "541600"
  },
  {
    "text": "so the loader is going to parse the uh",
    "start": "541600",
    "end": "544720"
  },
  {
    "text": "elf file",
    "start": "544720",
    "end": "546560"
  },
  {
    "text": "and uh the binary and uh",
    "start": "546560",
    "end": "549760"
  },
  {
    "text": "is gonna uh set the context for this uh",
    "start": "549760",
    "end": "552720"
  },
  {
    "text": "uh program which includes like setting",
    "start": "552720",
    "end": "554560"
  },
  {
    "text": "the type so in this case the program",
    "start": "554560",
    "end": "556560"
  },
  {
    "text": "type is bpf prog type k probe and this",
    "start": "556560",
    "end": "559920"
  },
  {
    "text": "type is gonna decide what kernel state",
    "start": "559920",
    "end": "562480"
  },
  {
    "text": "this my program is going to have access",
    "start": "562480",
    "end": "564959"
  },
  {
    "text": "to",
    "start": "564959",
    "end": "565760"
  },
  {
    "text": "next the loader triggers loading and",
    "start": "565760",
    "end": "569040"
  },
  {
    "text": "verification of this program",
    "start": "569040",
    "end": "571120"
  },
  {
    "text": "so in the previous slide i mentioned",
    "start": "571120",
    "end": "573120"
  },
  {
    "text": "that",
    "start": "573120",
    "end": "574160"
  },
  {
    "text": "bpf the kernel ensures that",
    "start": "574160",
    "end": "577279"
  },
  {
    "text": "bpf programs are run safely so ebpm",
    "start": "577279",
    "end": "580320"
  },
  {
    "text": "verifier is tasked with ensuring that uh",
    "start": "580320",
    "end": "583360"
  },
  {
    "text": "the verifier will ensure that your",
    "start": "583360",
    "end": "585519"
  },
  {
    "text": "program doesn't have a",
    "start": "585519",
    "end": "587839"
  },
  {
    "text": "null pointer dereferences or it's not",
    "start": "587839",
    "end": "590640"
  },
  {
    "text": "trying to access any out of bound memory",
    "start": "590640",
    "end": "593440"
  },
  {
    "text": "uh",
    "start": "593440",
    "end": "594640"
  },
  {
    "text": "and whether your program terminates or",
    "start": "594640",
    "end": "596720"
  },
  {
    "text": "not",
    "start": "596720",
    "end": "597600"
  },
  {
    "text": "and if you have written fair amount of",
    "start": "597600",
    "end": "600560"
  },
  {
    "text": "vpf if you're done a fair amount of bpf",
    "start": "600560",
    "end": "603279"
  },
  {
    "text": "programming then i'm sure you have",
    "start": "603279",
    "end": "604959"
  },
  {
    "text": "interesting stories to tell about uh",
    "start": "604959",
    "end": "608399"
  },
  {
    "text": "how you fought with the verifier",
    "start": "608399",
    "end": "611120"
  },
  {
    "text": "so once",
    "start": "611120",
    "end": "612240"
  },
  {
    "text": "the verifier approves your program is",
    "start": "612240",
    "end": "614640"
  },
  {
    "text": "just compiled to native code",
    "start": "614640",
    "end": "617360"
  },
  {
    "text": "and i mentioned earlier that ebpf",
    "start": "617360",
    "end": "619600"
  },
  {
    "text": "follows an event-driven model so what",
    "start": "619600",
    "end": "622399"
  },
  {
    "text": "does it mean in this case",
    "start": "622399",
    "end": "624320"
  },
  {
    "text": "uh",
    "start": "624320",
    "end": "625440"
  },
  {
    "text": "in my program i've attached a k-probe to",
    "start": "625440",
    "end": "628519"
  },
  {
    "text": "iplocaldeliver function so",
    "start": "628519",
    "end": "631120"
  },
  {
    "text": "this function uh",
    "start": "631120",
    "end": "633680"
  },
  {
    "text": "delivers packet to a local destination",
    "start": "633680",
    "end": "636160"
  },
  {
    "text": "uh",
    "start": "636160",
    "end": "637040"
  },
  {
    "text": "so let's say a packet is delivered on",
    "start": "637040",
    "end": "640240"
  },
  {
    "text": "the eth0 interface on your kubernetes",
    "start": "640240",
    "end": "642399"
  },
  {
    "text": "node and uh it's supposed to be uh",
    "start": "642399",
    "end": "645600"
  },
  {
    "text": "delivered to a local leader in part then",
    "start": "645600",
    "end": "648480"
  },
  {
    "text": "uh the packet will be uh executed by ip",
    "start": "648480",
    "end": "651839"
  },
  {
    "text": "local deliver function where it",
    "start": "651839",
    "end": "653760"
  },
  {
    "text": "reassembles ip fragments and uh hands it",
    "start": "653760",
    "end": "657360"
  },
  {
    "text": "off to the uh next level",
    "start": "657360",
    "end": "659760"
  },
  {
    "text": "or layer excuse me which is the",
    "start": "659760",
    "end": "661440"
  },
  {
    "text": "transport layer",
    "start": "661440",
    "end": "662880"
  },
  {
    "text": "so uh in this case uh it's gonna",
    "start": "662880",
    "end": "665279"
  },
  {
    "text": "generate an event uh and my bpf program",
    "start": "665279",
    "end": "668160"
  },
  {
    "text": "is going to be executed",
    "start": "668160",
    "end": "671200"
  },
  {
    "text": "and as the bpf program if you uh",
    "start": "671200",
    "end": "674800"
  },
  {
    "text": "if you can see uh just before it returns",
    "start": "674800",
    "end": "677600"
  },
  {
    "text": "uh it writes this notification to bpf",
    "start": "677600",
    "end": "681360"
  },
  {
    "text": "map so bpf map is a shared data",
    "start": "681360",
    "end": "684079"
  },
  {
    "text": "structure between kernel and user space",
    "start": "684079",
    "end": "687120"
  },
  {
    "text": "and that's how kernel relays this",
    "start": "687120",
    "end": "689839"
  },
  {
    "text": "information into the",
    "start": "689839",
    "end": "691360"
  },
  {
    "text": "user space",
    "start": "691360",
    "end": "693680"
  },
  {
    "start": "693000",
    "end": "820000"
  },
  {
    "text": "so great yeah",
    "start": "693680",
    "end": "695760"
  },
  {
    "text": "just as we uh traced uh callbacks to the",
    "start": "695760",
    "end": "699519"
  },
  {
    "text": "ip local deliver function can we just",
    "start": "699519",
    "end": "702079"
  },
  {
    "text": "get a list of all the uh net kernel uh",
    "start": "702079",
    "end": "706079"
  },
  {
    "text": "network packet processing functions and",
    "start": "706079",
    "end": "708320"
  },
  {
    "text": "just keep like a hard-coded list",
    "start": "708320",
    "end": "711200"
  },
  {
    "text": "not exactly because kernel function",
    "start": "711200",
    "end": "713600"
  },
  {
    "text": "signature can change across kernel",
    "start": "713600",
    "end": "715839"
  },
  {
    "text": "versions",
    "start": "715839",
    "end": "716880"
  },
  {
    "text": "so k probe api is is considered unstable",
    "start": "716880",
    "end": "721040"
  },
  {
    "text": "so how do we reliably get debug",
    "start": "721040",
    "end": "724320"
  },
  {
    "text": "information about",
    "start": "724320",
    "end": "726000"
  },
  {
    "text": "different kernel",
    "start": "726000",
    "end": "727279"
  },
  {
    "text": "function signatures",
    "start": "727279",
    "end": "729279"
  },
  {
    "text": "so that's where btf comes into play uh",
    "start": "729279",
    "end": "731920"
  },
  {
    "text": "btf is short for",
    "start": "731920",
    "end": "734079"
  },
  {
    "text": "bpf type format",
    "start": "734079",
    "end": "736000"
  },
  {
    "text": "and it's a debug format that stores",
    "start": "736000",
    "end": "738880"
  },
  {
    "text": "information like function signatures",
    "start": "738880",
    "end": "741600"
  },
  {
    "text": "uh different data structures that are",
    "start": "741600",
    "end": "743680"
  },
  {
    "text": "defined in",
    "start": "743680",
    "end": "745120"
  },
  {
    "text": "kernel",
    "start": "745120",
    "end": "746800"
  },
  {
    "text": "and so and so forth but the cool thing",
    "start": "746800",
    "end": "748800"
  },
  {
    "text": "about btf is that it's super compact so",
    "start": "748800",
    "end": "751680"
  },
  {
    "text": "in recent kernels it's packaged in",
    "start": "751680",
    "end": "754639"
  },
  {
    "text": "kernels by default",
    "start": "754639",
    "end": "757200"
  },
  {
    "text": "so kernel exposes it exposes its own",
    "start": "757200",
    "end": "760480"
  },
  {
    "text": "debug information uh like function",
    "start": "760480",
    "end": "762480"
  },
  {
    "text": "signature and different data structure",
    "start": "762480",
    "end": "764800"
  },
  {
    "text": "types",
    "start": "764800",
    "end": "765680"
  },
  {
    "text": "via asus fs interface",
    "start": "765680",
    "end": "768160"
  },
  {
    "text": "uh and",
    "start": "768160",
    "end": "770240"
  },
  {
    "text": "yeah okay so uh just to get a sense of",
    "start": "770240",
    "end": "773600"
  },
  {
    "text": "what btf information looks like",
    "start": "773600",
    "end": "776079"
  },
  {
    "text": "uh i've dumped a uh uh",
    "start": "776079",
    "end": "779279"
  },
  {
    "text": "btf information for a simple uh function",
    "start": "779279",
    "end": "782160"
  },
  {
    "text": "that accesses the skb uh",
    "start": "782160",
    "end": "784839"
  },
  {
    "text": "structure",
    "start": "784839",
    "end": "786480"
  },
  {
    "text": "and on the right you can see that",
    "start": "786480",
    "end": "789040"
  },
  {
    "text": "it gives you information about various",
    "start": "789040",
    "end": "791040"
  },
  {
    "text": "types so if you start at the top",
    "start": "791040",
    "end": "793680"
  },
  {
    "text": "uh it tells you that there is a pointer",
    "start": "793680",
    "end": "796480"
  },
  {
    "text": "to the structure sk buff and what",
    "start": "796480",
    "end": "799200"
  },
  {
    "text": "different",
    "start": "799200",
    "end": "800079"
  },
  {
    "text": "members does the escape of structure has",
    "start": "800079",
    "end": "802399"
  },
  {
    "text": "and what are their respective offsets",
    "start": "802399",
    "end": "804800"
  },
  {
    "text": "but one important type then i want to",
    "start": "804800",
    "end": "807120"
  },
  {
    "text": "highlight here is the func proto uh func",
    "start": "807120",
    "end": "809920"
  },
  {
    "text": "proto defines a function signature so",
    "start": "809920",
    "end": "813279"
  },
  {
    "text": "what kind of arguments uh does a",
    "start": "813279",
    "end": "815519"
  },
  {
    "text": "function accept what what's the written",
    "start": "815519",
    "end": "817440"
  },
  {
    "text": "type is",
    "start": "817440",
    "end": "819839"
  },
  {
    "text": "so with this uh let's revisit our wish",
    "start": "819839",
    "end": "822639"
  },
  {
    "start": "820000",
    "end": "870000"
  },
  {
    "text": "list",
    "start": "822639",
    "end": "824000"
  },
  {
    "text": "so we mentioned that hey we wanted a",
    "start": "824000",
    "end": "826959"
  },
  {
    "text": "reliable way to get the list of all the",
    "start": "826959",
    "end": "829440"
  },
  {
    "text": "network",
    "start": "829440",
    "end": "830560"
  },
  {
    "text": "uh processing uh network packet",
    "start": "830560",
    "end": "832800"
  },
  {
    "text": "processing functions in the kernel and",
    "start": "832800",
    "end": "835120"
  },
  {
    "text": "we can easily get that information from",
    "start": "835120",
    "end": "837040"
  },
  {
    "text": "the btf file",
    "start": "837040",
    "end": "839120"
  },
  {
    "text": "next we can attach k probes to all of",
    "start": "839120",
    "end": "841760"
  },
  {
    "text": "them so",
    "start": "841760",
    "end": "843279"
  },
  {
    "text": "just as k probes allow you to execute",
    "start": "843279",
    "end": "845680"
  },
  {
    "text": "bpa function when a function is executed",
    "start": "845680",
    "end": "848160"
  },
  {
    "text": "k red probes uh",
    "start": "848160",
    "end": "850160"
  },
  {
    "text": "uh are allow you allow your bpf programs",
    "start": "850160",
    "end": "853040"
  },
  {
    "text": "to be executed uh when a function that",
    "start": "853040",
    "end": "855360"
  },
  {
    "text": "it's uh where the function where it the",
    "start": "855360",
    "end": "858000"
  },
  {
    "text": "k rate probe is attached is uh return",
    "start": "858000",
    "end": "861760"
  },
  {
    "text": "and uh more importantly we can easily uh",
    "start": "861760",
    "end": "865040"
  },
  {
    "text": "filter callbacks using with the help of",
    "start": "865040",
    "end": "867519"
  },
  {
    "text": "bps maps",
    "start": "867519",
    "end": "870240"
  },
  {
    "start": "870000",
    "end": "1042000"
  },
  {
    "text": "so with this background i'm really",
    "start": "870240",
    "end": "872079"
  },
  {
    "text": "excited to present peru",
    "start": "872079",
    "end": "874320"
  },
  {
    "text": "peru is an ebpf based linux kernel",
    "start": "874320",
    "end": "877440"
  },
  {
    "text": "debugger",
    "start": "877440",
    "end": "878639"
  },
  {
    "text": "and peru is short for packet where are",
    "start": "878639",
    "end": "881360"
  },
  {
    "text": "you",
    "start": "881360",
    "end": "882880"
  },
  {
    "text": "conceptualization of this tool uh the",
    "start": "882880",
    "end": "885440"
  },
  {
    "text": "credit for conceptualization of this",
    "start": "885440",
    "end": "887040"
  },
  {
    "text": "tool goes to uh martinez",
    "start": "887040",
    "end": "889279"
  },
  {
    "text": "and next we are going to uh",
    "start": "889279",
    "end": "891680"
  },
  {
    "text": "take a walk through of the uh peru",
    "start": "891680",
    "end": "894399"
  },
  {
    "text": "internals",
    "start": "894399",
    "end": "896720"
  },
  {
    "text": "so peru consists of a user space agent",
    "start": "896720",
    "end": "899839"
  },
  {
    "text": "uh written in go",
    "start": "899839",
    "end": "901600"
  },
  {
    "text": "and it interfaces with user to collect",
    "start": "901600",
    "end": "904560"
  },
  {
    "text": "uh filter information so",
    "start": "904560",
    "end": "907680"
  },
  {
    "text": "uh let's say i'm trying to debug traffic",
    "start": "907680",
    "end": "910560"
  },
  {
    "text": "that's going to the cube api server part",
    "start": "910560",
    "end": "913680"
  },
  {
    "text": "so",
    "start": "913680",
    "end": "914480"
  },
  {
    "text": "i run peru with this filter parameters",
    "start": "914480",
    "end": "916800"
  },
  {
    "text": "where i set the protocol to tcp",
    "start": "916800",
    "end": "920000"
  },
  {
    "text": "destination ipsec to the uh",
    "start": "920000",
    "end": "922880"
  },
  {
    "text": "cube api uh pod ip and the destination",
    "start": "922880",
    "end": "925920"
  },
  {
    "text": "port is set to",
    "start": "925920",
    "end": "927920"
  },
  {
    "text": "443",
    "start": "927920",
    "end": "930000"
  },
  {
    "text": "next peru goes ahead and programs this",
    "start": "930000",
    "end": "932800"
  },
  {
    "text": "information in this filter map which is",
    "start": "932800",
    "end": "934880"
  },
  {
    "text": "a bpf map",
    "start": "934880",
    "end": "937120"
  },
  {
    "text": "it then uses the celium excuse me sorry",
    "start": "937120",
    "end": "940639"
  },
  {
    "text": "it then uses the psyllium evpf loader",
    "start": "940639",
    "end": "944240"
  },
  {
    "text": "to collect uh btf information for the",
    "start": "944240",
    "end": "947519"
  },
  {
    "text": "underlying kernel so in this case it's",
    "start": "947519",
    "end": "949759"
  },
  {
    "text": "gonna do a call to this sysfs interface",
    "start": "949759",
    "end": "953360"
  },
  {
    "text": "uh it's gonna search all the kernel uh",
    "start": "953360",
    "end": "956480"
  },
  {
    "text": "functions and then it's just gonna",
    "start": "956480",
    "end": "959040"
  },
  {
    "text": "get",
    "start": "959040",
    "end": "959920"
  },
  {
    "text": "iterate over that list and uh filter",
    "start": "959920",
    "end": "962399"
  },
  {
    "text": "them to collect pack uh collect",
    "start": "962399",
    "end": "964720"
  },
  {
    "text": "functions that",
    "start": "964720",
    "end": "966000"
  },
  {
    "text": "accept skb as one of the parameters and",
    "start": "966000",
    "end": "968800"
  },
  {
    "text": "just a reminder skb is the",
    "start": "968800",
    "end": "971360"
  },
  {
    "text": "packet representation in the linux",
    "start": "971360",
    "end": "973040"
  },
  {
    "text": "kernel",
    "start": "973040",
    "end": "974720"
  },
  {
    "text": "it then goes ahead and loads our ebpf",
    "start": "974720",
    "end": "978399"
  },
  {
    "text": "programs to all these functions uh",
    "start": "978399",
    "end": "982800"
  },
  {
    "text": "so",
    "start": "982800",
    "end": "983680"
  },
  {
    "text": "in this particular case uh i'm",
    "start": "983680",
    "end": "985839"
  },
  {
    "text": "interested in getting uh callbacks from",
    "start": "985839",
    "end": "988320"
  },
  {
    "text": "the linux kernel whenever my packet goes",
    "start": "988320",
    "end": "990800"
  },
  {
    "text": "through",
    "start": "990800",
    "end": "991600"
  },
  {
    "text": "all the uh network functions",
    "start": "991600",
    "end": "994720"
  },
  {
    "text": "in the linux kernel",
    "start": "994720",
    "end": "996560"
  },
  {
    "text": "so uh for example uh in the previous",
    "start": "996560",
    "end": "999360"
  },
  {
    "text": "example we saw how my bpf program was",
    "start": "999360",
    "end": "1002160"
  },
  {
    "text": "executed or whenever i p local deliver",
    "start": "1002160",
    "end": "1004720"
  },
  {
    "text": "function was called",
    "start": "1004720",
    "end": "1006240"
  },
  {
    "text": "uh so the e0 for example is is the first",
    "start": "1006240",
    "end": "1009920"
  },
  {
    "text": "event that gets uh called whenever my",
    "start": "1009920",
    "end": "1012399"
  },
  {
    "text": "packet is",
    "start": "1012399",
    "end": "1013680"
  },
  {
    "text": "uh executed by ip local deliver ip local",
    "start": "1013680",
    "end": "1016800"
  },
  {
    "text": "deliver is then gonna hand off that",
    "start": "1016800",
    "end": "1018720"
  },
  {
    "text": "packet to uh parse t uh layer four which",
    "start": "1018720",
    "end": "1022240"
  },
  {
    "text": "is like tcp in this case so that's going",
    "start": "1022240",
    "end": "1024640"
  },
  {
    "text": "to be e1 uh",
    "start": "1024640",
    "end": "1026240"
  },
  {
    "text": "the one thing that i want to highlight",
    "start": "1026240",
    "end": "1027839"
  },
  {
    "text": "here is that uh",
    "start": "1027839",
    "end": "1029760"
  },
  {
    "text": "my bpf program is going to filter all",
    "start": "1029760",
    "end": "1032319"
  },
  {
    "text": "these callbacks based on the",
    "start": "1032319",
    "end": "1034880"
  },
  {
    "text": "filter information that it receives from",
    "start": "1034880",
    "end": "1037678"
  },
  {
    "text": "the bpf map",
    "start": "1037679",
    "end": "1040798"
  },
  {
    "text": "all right so uh",
    "start": "1041280",
    "end": "1043120"
  },
  {
    "start": "1042000",
    "end": "1225000"
  },
  {
    "text": "in the beginning of the presentation i",
    "start": "1043120",
    "end": "1044798"
  },
  {
    "text": "mentioned that linux kernel networking",
    "start": "1044799",
    "end": "1047360"
  },
  {
    "text": "is treated as a black box",
    "start": "1047360",
    "end": "1049520"
  },
  {
    "text": "and",
    "start": "1049520",
    "end": "1051039"
  },
  {
    "text": "because of the uh complexity that's",
    "start": "1051039",
    "end": "1053039"
  },
  {
    "text": "involved so",
    "start": "1053039",
    "end": "1054640"
  },
  {
    "text": "uh with the help of peru i hope i can",
    "start": "1054640",
    "end": "1056960"
  },
  {
    "text": "convince you to",
    "start": "1056960",
    "end": "1059039"
  },
  {
    "text": "give it a try and see how easy it is to",
    "start": "1059039",
    "end": "1061360"
  },
  {
    "text": "debug linux kernel networking issues so",
    "start": "1061360",
    "end": "1064240"
  },
  {
    "text": "in the lower half of uh",
    "start": "1064240",
    "end": "1066400"
  },
  {
    "text": "of the clip i'm running peru with a set",
    "start": "1066400",
    "end": "1069760"
  },
  {
    "text": "of filters uh so for example i'm",
    "start": "1069760",
    "end": "1071840"
  },
  {
    "text": "filtering traffic destined to 1.1.1.1",
    "start": "1071840",
    "end": "1075760"
  },
  {
    "text": "our destination port 80 and protocol is",
    "start": "1075760",
    "end": "1078160"
  },
  {
    "text": "set to tcp",
    "start": "1078160",
    "end": "1081559"
  },
  {
    "text": "so i have added an iptable rule here uh",
    "start": "1081840",
    "end": "1084720"
  },
  {
    "text": "which is going to drop packets to",
    "start": "1084720",
    "end": "1087520"
  },
  {
    "text": "this destination and port uh tapu and",
    "start": "1087520",
    "end": "1090480"
  },
  {
    "text": "whenever i run a call request it's going",
    "start": "1090480",
    "end": "1092640"
  },
  {
    "text": "to generate output trees",
    "start": "1092640",
    "end": "1096559"
  },
  {
    "text": "and i'm going to know that okay yeah",
    "start": "1096559",
    "end": "1098559"
  },
  {
    "text": "this is where my packet is getting",
    "start": "1098559",
    "end": "1100960"
  },
  {
    "text": "dropped",
    "start": "1100960",
    "end": "1102240"
  },
  {
    "text": "so in the next uh few slides we are",
    "start": "1102240",
    "end": "1104960"
  },
  {
    "text": "going to look at real world examples and",
    "start": "1104960",
    "end": "1107600"
  },
  {
    "text": "how peru helped us to debug",
    "start": "1107600",
    "end": "1110320"
  },
  {
    "text": "those",
    "start": "1110320",
    "end": "1112559"
  },
  {
    "text": "scenarios so the first example i have a",
    "start": "1113120",
    "end": "1116640"
  },
  {
    "text": "kubernetes cluster",
    "start": "1116640",
    "end": "1118480"
  },
  {
    "text": "where",
    "start": "1118480",
    "end": "1119360"
  },
  {
    "text": "i'm running a multi-homing setup what",
    "start": "1119360",
    "end": "1122240"
  },
  {
    "text": "does it mean so",
    "start": "1122240",
    "end": "1123760"
  },
  {
    "text": "in this setup a pod is assigned ip",
    "start": "1123760",
    "end": "1126160"
  },
  {
    "text": "addresses from uh two different ip",
    "start": "1126160",
    "end": "1128720"
  },
  {
    "text": "subnets",
    "start": "1128720",
    "end": "1130640"
  },
  {
    "text": "so let's uh do a request walkthrough",
    "start": "1130640",
    "end": "1133280"
  },
  {
    "text": "from right of the screen to the left",
    "start": "1133280",
    "end": "1136400"
  },
  {
    "text": "where a pod is trying to reach the queue",
    "start": "1136400",
    "end": "1139200"
  },
  {
    "text": "api server part in my cluster",
    "start": "1139200",
    "end": "1142240"
  },
  {
    "text": "so the port does a curve request",
    "start": "1142240",
    "end": "1146000"
  },
  {
    "text": "where the source ip address is set to",
    "start": "1146000",
    "end": "1147760"
  },
  {
    "text": "the power ip address and the destination",
    "start": "1147760",
    "end": "1149760"
  },
  {
    "text": "is the cube service cluster ip",
    "start": "1149760",
    "end": "1153200"
  },
  {
    "text": "this request is going to hit the iptable",
    "start": "1153200",
    "end": "1155840"
  },
  {
    "text": "rule that's installed by q proxy",
    "start": "1155840",
    "end": "1159280"
  },
  {
    "text": "and the rule says states that hey",
    "start": "1159280",
    "end": "1162720"
  },
  {
    "text": "all the traffic that's destined to uh",
    "start": "1162720",
    "end": "1165120"
  },
  {
    "text": "cube service cluster ip uh it needs to",
    "start": "1165120",
    "end": "1168000"
  },
  {
    "text": "be denatured to",
    "start": "1168000",
    "end": "1169520"
  },
  {
    "text": "cube api server pod ip address",
    "start": "1169520",
    "end": "1172160"
  },
  {
    "text": "so after the rule we can see that the",
    "start": "1172160",
    "end": "1174240"
  },
  {
    "text": "destination ip address has been",
    "start": "1174240",
    "end": "1176080"
  },
  {
    "text": "translated from the cluster ip to the ip",
    "start": "1176080",
    "end": "1179679"
  },
  {
    "text": "address of the cube api server part",
    "start": "1179679",
    "end": "1182960"
  },
  {
    "text": "this request reaches the destination",
    "start": "1182960",
    "end": "1184640"
  },
  {
    "text": "communities node",
    "start": "1184640",
    "end": "1186240"
  },
  {
    "text": "and it's routed through the eth1",
    "start": "1186240",
    "end": "1188320"
  },
  {
    "text": "interface and then it's delivered",
    "start": "1188320",
    "end": "1190799"
  },
  {
    "text": "to the cube api server part",
    "start": "1190799",
    "end": "1193360"
  },
  {
    "text": "now the cube api server pod is going to",
    "start": "1193360",
    "end": "1195440"
  },
  {
    "text": "send a reply back",
    "start": "1195440",
    "end": "1197200"
  },
  {
    "text": "the source ip address is uh correctly",
    "start": "1197200",
    "end": "1199679"
  },
  {
    "text": "set to the ip address of the cube api",
    "start": "1199679",
    "end": "1201760"
  },
  {
    "text": "server and the destination ip address is",
    "start": "1201760",
    "end": "1204400"
  },
  {
    "text": "the ip address that was",
    "start": "1204400",
    "end": "1206559"
  },
  {
    "text": "that was received in the request packet",
    "start": "1206559",
    "end": "1209679"
  },
  {
    "text": "and this packet is being routed through",
    "start": "1209679",
    "end": "1212080"
  },
  {
    "text": "e0 not eth1",
    "start": "1212080",
    "end": "1215120"
  },
  {
    "text": "and there is no surprise that this reply",
    "start": "1215120",
    "end": "1217440"
  },
  {
    "text": "never reaches the source so let's see",
    "start": "1217440",
    "end": "1220080"
  },
  {
    "text": "how peru helps and helps us in debugging",
    "start": "1220080",
    "end": "1222559"
  },
  {
    "text": "this uh issue",
    "start": "1222559",
    "end": "1225760"
  },
  {
    "start": "1225000",
    "end": "1499000"
  },
  {
    "text": "so here uh i'm right i'm running peru",
    "start": "1226320",
    "end": "1230159"
  },
  {
    "text": "with a bunch of filters",
    "start": "1230159",
    "end": "1232000"
  },
  {
    "text": "i'm filtering traffic going to uh",
    "start": "1232000",
    "end": "1234960"
  },
  {
    "text": "destination port 443 which is the uh",
    "start": "1234960",
    "end": "1238720"
  },
  {
    "text": "which is where cube api server pod is uh",
    "start": "1238720",
    "end": "1240960"
  },
  {
    "text": "listening on",
    "start": "1240960",
    "end": "1242159"
  },
  {
    "text": "and i've set the protocol to tcp",
    "start": "1242159",
    "end": "1245600"
  },
  {
    "text": "and i invite you to look at the output",
    "start": "1245600",
    "end": "1248320"
  },
  {
    "text": "of peru here",
    "start": "1248320",
    "end": "1250080"
  },
  {
    "text": "the nf",
    "start": "1250080",
    "end": "1251840"
  },
  {
    "text": "so",
    "start": "1251840",
    "end": "1252640"
  },
  {
    "text": "this is the trace of all the kernel",
    "start": "1252640",
    "end": "1255280"
  },
  {
    "text": "functions that my",
    "start": "1255280",
    "end": "1257520"
  },
  {
    "text": "traffic of interest is uh going through",
    "start": "1257520",
    "end": "1260400"
  },
  {
    "text": "so nf hook slow uh is the kernel",
    "start": "1260400",
    "end": "1263200"
  },
  {
    "text": "function that's executed to implement uh",
    "start": "1263200",
    "end": "1266000"
  },
  {
    "text": "iptable rules",
    "start": "1266000",
    "end": "1268080"
  },
  {
    "text": "and uh we can see that the source ip",
    "start": "1268080",
    "end": "1270799"
  },
  {
    "text": "address in this case is still set to 190",
    "start": "1270799",
    "end": "1273360"
  },
  {
    "text": "to 168 and not the ip address from",
    "start": "1273360",
    "end": "1277039"
  },
  {
    "text": "uh the the subnet where that's used to",
    "start": "1277039",
    "end": "1280240"
  },
  {
    "text": "connect to the cube api server so that's",
    "start": "1280240",
    "end": "1282880"
  },
  {
    "text": "why this packet will uh will be dropped",
    "start": "1282880",
    "end": "1285120"
  },
  {
    "text": "when when it's sent out of the eth1",
    "start": "1285120",
    "end": "1286960"
  },
  {
    "text": "interface",
    "start": "1286960",
    "end": "1288799"
  },
  {
    "text": "next up we frequently have mtu mis",
    "start": "1288799",
    "end": "1292159"
  },
  {
    "text": "configuration issues in our clusters so",
    "start": "1292159",
    "end": "1294799"
  },
  {
    "text": "i have a simple setup here where uh i",
    "start": "1294799",
    "end": "1297280"
  },
  {
    "text": "have a single node kubernetes cluster uh",
    "start": "1297280",
    "end": "1300559"
  },
  {
    "text": "my udp pod is",
    "start": "1300559",
    "end": "1303120"
  },
  {
    "text": "getting traffic from an external uh",
    "start": "1303120",
    "end": "1305360"
  },
  {
    "text": "entity",
    "start": "1305360",
    "end": "1306559"
  },
  {
    "text": "and that extra and the size of the udp",
    "start": "1306559",
    "end": "1309280"
  },
  {
    "text": "packet is",
    "start": "1309280",
    "end": "1310559"
  },
  {
    "text": "uh pretty large and uh the sender has",
    "start": "1310559",
    "end": "1314159"
  },
  {
    "text": "said uh don't fragment bit uh on this",
    "start": "1314159",
    "end": "1316960"
  },
  {
    "text": "request so this request is gonna",
    "start": "1316960",
    "end": "1319120"
  },
  {
    "text": "traverse through uh the ethernet",
    "start": "1319120",
    "end": "1320960"
  },
  {
    "text": "interface on the kubernetes node and",
    "start": "1320960",
    "end": "1323360"
  },
  {
    "text": "then uh it's gonna uh traverse through",
    "start": "1323360",
    "end": "1325840"
  },
  {
    "text": "the uh v uh devices pair and then uh",
    "start": "1325840",
    "end": "1329039"
  },
  {
    "text": "it's gonna be delivered to the udp pod",
    "start": "1329039",
    "end": "1331679"
  },
  {
    "text": "and uh based on the mtu information we",
    "start": "1331679",
    "end": "1334240"
  },
  {
    "text": "can see that there is a mismatch so",
    "start": "1334240",
    "end": "1337280"
  },
  {
    "text": "let's see what happens to the traffic",
    "start": "1337280",
    "end": "1340400"
  },
  {
    "text": "so again i'm running peru but this time",
    "start": "1340400",
    "end": "1342799"
  },
  {
    "text": "i have changed i've set the protocol to",
    "start": "1342799",
    "end": "1345039"
  },
  {
    "text": "udp",
    "start": "1345039",
    "end": "1346400"
  },
  {
    "text": "the destination port is 443 and",
    "start": "1346400",
    "end": "1349919"
  },
  {
    "text": "i have i have a new filter here which",
    "start": "1349919",
    "end": "1352400"
  },
  {
    "text": "says output mirror",
    "start": "1352400",
    "end": "1354480"
  },
  {
    "text": "which is going to print a bunch of skb",
    "start": "1354480",
    "end": "1357520"
  },
  {
    "text": "members here",
    "start": "1357520",
    "end": "1358799"
  },
  {
    "text": "so as you can see uh the there is a",
    "start": "1358799",
    "end": "1361280"
  },
  {
    "text": "mismatch between packet length and uh",
    "start": "1361280",
    "end": "1364480"
  },
  {
    "text": "mtu that's configured on the if index",
    "start": "1364480",
    "end": "1367200"
  },
  {
    "text": "and the if index uh",
    "start": "1367200",
    "end": "1369280"
  },
  {
    "text": "18 refers to the eth one and seven",
    "start": "1369280",
    "end": "1371840"
  },
  {
    "text": "refers to the v0 and as a result this",
    "start": "1371840",
    "end": "1375039"
  },
  {
    "text": "packet will be dropped",
    "start": "1375039",
    "end": "1377520"
  },
  {
    "text": "so lastly",
    "start": "1377520",
    "end": "1379760"
  },
  {
    "text": "there is a security mechanism in linux",
    "start": "1379760",
    "end": "1381919"
  },
  {
    "text": "kernel it's called reverse path filter",
    "start": "1381919",
    "end": "1385039"
  },
  {
    "text": "it essentially ensures that",
    "start": "1385039",
    "end": "1387280"
  },
  {
    "text": "the source",
    "start": "1387280",
    "end": "1389120"
  },
  {
    "text": "address set on packet a received packet",
    "start": "1389120",
    "end": "1391600"
  },
  {
    "text": "is routable via the same interface that",
    "start": "1391600",
    "end": "1393919"
  },
  {
    "text": "it came in and this is to ensure that",
    "start": "1393919",
    "end": "1396320"
  },
  {
    "text": "there are no spoofed uh",
    "start": "1396320",
    "end": "1398720"
  },
  {
    "text": "packets where ip address the source ip",
    "start": "1398720",
    "end": "1400799"
  },
  {
    "text": "address is spooked",
    "start": "1400799",
    "end": "1402720"
  },
  {
    "text": "so in this case uh i have a i have an",
    "start": "1402720",
    "end": "1404720"
  },
  {
    "text": "incoming request uh coming to my pod",
    "start": "1404720",
    "end": "1408159"
  },
  {
    "text": "uh",
    "start": "1408159",
    "end": "1409120"
  },
  {
    "text": "let's say this is my service pod and the",
    "start": "1409120",
    "end": "1411200"
  },
  {
    "text": "request is uh translated",
    "start": "1411200",
    "end": "1413760"
  },
  {
    "text": "uh deniated to my port so the",
    "start": "1413760",
    "end": "1415520"
  },
  {
    "text": "destination is set to the pod ip address",
    "start": "1415520",
    "end": "1418080"
  },
  {
    "text": "so when this request is received on the",
    "start": "1418080",
    "end": "1420799"
  },
  {
    "text": "ethernet interface on my",
    "start": "1420799",
    "end": "1423440"
  },
  {
    "text": "kubernetes node uh there is an rp filter",
    "start": "1423440",
    "end": "1426960"
  },
  {
    "text": "configured on this interface by default",
    "start": "1426960",
    "end": "1429600"
  },
  {
    "text": "and it's set in the strict mode",
    "start": "1429600",
    "end": "1431919"
  },
  {
    "text": "so this request will be dropped because",
    "start": "1431919",
    "end": "1434559"
  },
  {
    "text": "if you look at the uh ip route table",
    "start": "1434559",
    "end": "1437360"
  },
  {
    "text": "here",
    "start": "1437360",
    "end": "1438240"
  },
  {
    "text": "uh",
    "start": "1438240",
    "end": "1439520"
  },
  {
    "text": "it says that all the traffic that's uh",
    "start": "1439520",
    "end": "1442320"
  },
  {
    "text": "deleted",
    "start": "1442320",
    "end": "1443679"
  },
  {
    "text": "destined to",
    "start": "1443679",
    "end": "1445080"
  },
  {
    "text": "10.0.0 24 subnet uh it needs to be",
    "start": "1445080",
    "end": "1448559"
  },
  {
    "text": "received on the ve30 interface but in",
    "start": "1448559",
    "end": "1451679"
  },
  {
    "text": "this case we are receiving it.eth1 so",
    "start": "1451679",
    "end": "1455200"
  },
  {
    "text": "uh let's see",
    "start": "1455200",
    "end": "1456559"
  },
  {
    "text": "what information peru gives us here",
    "start": "1456559",
    "end": "1459840"
  },
  {
    "text": "so this time i have set the destination",
    "start": "1459840",
    "end": "1462480"
  },
  {
    "text": "ip filter",
    "start": "1462480",
    "end": "1463760"
  },
  {
    "text": "which is set to my pod ips",
    "start": "1463760",
    "end": "1466799"
  },
  {
    "text": "and",
    "start": "1466799",
    "end": "1468400"
  },
  {
    "text": "we can see that the packet is being",
    "start": "1468400",
    "end": "1470080"
  },
  {
    "text": "dropped",
    "start": "1470080",
    "end": "1471039"
  },
  {
    "text": "and let's see why that is",
    "start": "1471039",
    "end": "1473039"
  },
  {
    "text": "so just before the packet is dropped we",
    "start": "1473039",
    "end": "1475120"
  },
  {
    "text": "can see that uh there is a callback from",
    "start": "1475120",
    "end": "1478320"
  },
  {
    "text": "fib validate source uh function",
    "start": "1478320",
    "end": "1481279"
  },
  {
    "text": "so this kernel function essentially",
    "start": "1481279",
    "end": "1483360"
  },
  {
    "text": "executes the rpe reverse path filter",
    "start": "1483360",
    "end": "1486159"
  },
  {
    "text": "logic uh where it it it will uh check if",
    "start": "1486159",
    "end": "1490159"
  },
  {
    "text": "what the source ip address on this",
    "start": "1490159",
    "end": "1492480"
  },
  {
    "text": "packet is and if it's received on the",
    "start": "1492480",
    "end": "1494880"
  },
  {
    "text": "interface uh that it's expected",
    "start": "1494880",
    "end": "1498840"
  },
  {
    "text": "to so here are the peru highlights uh",
    "start": "1498840",
    "end": "1502720"
  },
  {
    "start": "1499000",
    "end": "1596000"
  },
  {
    "text": "peru is an ebps based open source tool",
    "start": "1502720",
    "end": "1505760"
  },
  {
    "text": "to debug kernel networking",
    "start": "1505760",
    "end": "1507919"
  },
  {
    "text": "and it does so by abstracting kernel",
    "start": "1507919",
    "end": "1510799"
  },
  {
    "text": "networking details",
    "start": "1510799",
    "end": "1512480"
  },
  {
    "text": "but more importantly peru",
    "start": "1512480",
    "end": "1515120"
  },
  {
    "text": "exposes advanced filtering uh",
    "start": "1515120",
    "end": "1517679"
  },
  {
    "text": "capabilities",
    "start": "1517679",
    "end": "1519200"
  },
  {
    "text": "uh",
    "start": "1519200",
    "end": "1520480"
  },
  {
    "text": "and it prints packet level metadata so",
    "start": "1520480",
    "end": "1522880"
  },
  {
    "text": "that you can introspect a kernel in a",
    "start": "1522880",
    "end": "1525919"
  },
  {
    "text": "fine grained manner",
    "start": "1525919",
    "end": "1527520"
  },
  {
    "text": "and it's portable across kernel versions",
    "start": "1527520",
    "end": "1531840"
  },
  {
    "text": "so some acknowledgements super",
    "start": "1531840",
    "end": "1534880"
  },
  {
    "text": "uses the ebpf",
    "start": "1534880",
    "end": "1537679"
  },
  {
    "text": "kernel functionality uh",
    "start": "1537679",
    "end": "1539760"
  },
  {
    "text": "and based on k-probe uh so uh thanks to",
    "start": "1539760",
    "end": "1543919"
  },
  {
    "text": "vpf kernel developers steven rostedt for",
    "start": "1543919",
    "end": "1547200"
  },
  {
    "text": "k probes uh we're using the bpf sn",
    "start": "1547200",
    "end": "1550240"
  },
  {
    "text": "printf btf function that's exposed in",
    "start": "1550240",
    "end": "1552240"
  },
  {
    "text": "the kernel",
    "start": "1552240",
    "end": "1553279"
  },
  {
    "text": "so that",
    "start": "1553279",
    "end": "1554559"
  },
  {
    "text": "we can print skb uh members in a safe",
    "start": "1554559",
    "end": "1557600"
  },
  {
    "text": "manner",
    "start": "1557600",
    "end": "1558640"
  },
  {
    "text": "and pero uses a psyllium evpf uh go",
    "start": "1558640",
    "end": "1562240"
  },
  {
    "text": "library as an ebpf loader to load our uh",
    "start": "1562240",
    "end": "1565360"
  },
  {
    "text": "to load ebpf uh functions",
    "start": "1565360",
    "end": "1568640"
  },
  {
    "text": "and lastly uh we recently discovered",
    "start": "1568640",
    "end": "1571600"
  },
  {
    "text": "that i there is this uh new function uh",
    "start": "1571600",
    "end": "1574240"
  },
  {
    "text": "new tool it's called ipv ipf ipf trace2",
    "start": "1574240",
    "end": "1579279"
  },
  {
    "text": "and it has some similar uh",
    "start": "1579279",
    "end": "1582880"
  },
  {
    "text": "functionalities as peru and it was",
    "start": "1582880",
    "end": "1585520"
  },
  {
    "text": "released before peru so we are",
    "start": "1585520",
    "end": "1587279"
  },
  {
    "text": "acknowledging it here",
    "start": "1587279",
    "end": "1589279"
  },
  {
    "text": "so yeah thanks for your time and i open",
    "start": "1589279",
    "end": "1591760"
  },
  {
    "text": "it for questions",
    "start": "1591760",
    "end": "1594360"
  },
  {
    "text": "[Applause]",
    "start": "1594360",
    "end": "1598400"
  }
]