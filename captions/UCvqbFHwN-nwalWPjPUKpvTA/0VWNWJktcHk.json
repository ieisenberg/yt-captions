[
  {
    "text": "hello kubernetes community welcome to our sig api machinery deep dive session",
    "start": "1439",
    "end": "7520"
  },
  {
    "text": "my name is federico von giovanni and i am the co-chair of seek api machinery our agenda today will have three topics",
    "start": "7520",
    "end": "14880"
  },
  {
    "text": "and a small bonus information at the end our first topic is going to be namespace termination",
    "start": "14880",
    "end": "20480"
  },
  {
    "text": "and daniel smith from google is going to walk us through it using his signature handmade",
    "start": "20480",
    "end": "25519"
  },
  {
    "text": "presentation style our second topic is going to be rest mappings and stefan shimansky from red",
    "start": "25519",
    "end": "32398"
  },
  {
    "text": "card is going to unveil all the secrets on how it works and how to deal with special situations",
    "start": "32399",
    "end": "38719"
  },
  {
    "text": "in our third topic david is from red hat will explain for us the mysteries of garbage collection",
    "start": "38719",
    "end": "44719"
  },
  {
    "text": "and how does it work in all the special cases finally i will give a farewell with some",
    "start": "44719",
    "end": "50480"
  },
  {
    "text": "quick info about the sig and our meetings so without any further delay",
    "start": "50480",
    "end": "55840"
  },
  {
    "text": "let's get to it and go to the deep waters of sig api machinery",
    "start": "55840",
    "end": "61839"
  },
  {
    "text": "hi everyone today i'd like to tell you a story a story is called 60807",
    "start": "65119",
    "end": "72080"
  },
  {
    "text": "i'm daniel smith i co-tl the api machinery sig",
    "start": "72080",
    "end": "78960"
  },
  {
    "text": "we're working on kubernetes since before was open source",
    "start": "79280",
    "end": "83680"
  },
  {
    "text": "so i'm wobbling up on github original lava lamp on twitter",
    "start": "84720",
    "end": "90560"
  },
  {
    "text": "i work for google software engineer i'm not speaking on behalf of google",
    "start": "90640",
    "end": "96240"
  },
  {
    "text": "other than they support my presence in open source",
    "start": "96240",
    "end": "101840"
  },
  {
    "text": "um i wrote daniel drawing my slides today turns out",
    "start": "102320",
    "end": "109280"
  },
  {
    "text": "i can't draw and talk at the same time so we're doing this in two steps",
    "start": "109280",
    "end": "115840"
  },
  {
    "text": "story begins with a user",
    "start": "118479",
    "end": "121520"
  },
  {
    "text": "you won't be surprised that there's also a kubernetes cluster in this story",
    "start": "124799",
    "end": "129840"
  },
  {
    "text": "and every cluster needs an api server",
    "start": "130479",
    "end": "135280"
  },
  {
    "text": "and of concern particular concern in our story today is the namespace which i'm going to draw in a",
    "start": "140959",
    "end": "146959"
  },
  {
    "text": "big fat line okay",
    "start": "146959",
    "end": "152799"
  },
  {
    "text": "to give this namespace some sort of name we'll call it s2020",
    "start": "155040",
    "end": "163760"
  },
  {
    "text": "because this user would like to delete this namespace",
    "start": "165200",
    "end": "171840"
  },
  {
    "text": "so here's the action user says delete api server says sure",
    "start": "172879",
    "end": "178640"
  },
  {
    "text": "that's the technical http response code these are posts to recreate maybe ir",
    "start": "178640",
    "end": "185120"
  },
  {
    "text": "server says no it still exists there's a conflict",
    "start": "185120",
    "end": "191280"
  },
  {
    "text": "api server is a villain how could this happen to us",
    "start": "191519",
    "end": "198480"
  },
  {
    "text": "this makes the user sad and angry how could we do this to the user",
    "start": "198480",
    "end": "206560"
  },
  {
    "text": "let's talk a little bit about how resources in kubernetes are deleted all objects and kubernetes are deleted",
    "start": "210159",
    "end": "216480"
  },
  {
    "text": "the same way so although we're talking about a namespace right now",
    "start": "216480",
    "end": "222480"
  },
  {
    "text": "there's some background information about deletion that might be useful as with many of",
    "start": "222480",
    "end": "230640"
  },
  {
    "text": "much of what i'm saying this is a simplification",
    "start": "230640",
    "end": "235439"
  },
  {
    "text": "because there's more to it for some particular objects but roughly speaking all kubernetes objects",
    "start": "236319",
    "end": "241360"
  },
  {
    "text": "have metadata and inside this metadata there's two fields relevant to deletion",
    "start": "241360",
    "end": "248000"
  },
  {
    "text": "first one is deletion timestamp if that has a non-empty value then the",
    "start": "248000",
    "end": "254239"
  },
  {
    "text": "deletion process has started for that resource and there's also a list of finalizers",
    "start": "254239",
    "end": "260720"
  },
  {
    "text": "and the deletion is not final until all of those finalizers have been removed",
    "start": "260720",
    "end": "267040"
  },
  {
    "text": "slightly confusing because the literal name of the finalizer that we care about today is kubernetes and this is the finalizer",
    "start": "267040",
    "end": "274320"
  },
  {
    "text": "that the that is removed when the namespace object is empty okay so until that is removed the",
    "start": "274320",
    "end": "280880"
  },
  {
    "text": "namespace is not deleted from the system i'm leaving out some details about",
    "start": "280880",
    "end": "286080"
  },
  {
    "text": "namespaces have special places they keep their finalizers roughly speaking",
    "start": "286080",
    "end": "291680"
  },
  {
    "text": "all objects work like this",
    "start": "291680",
    "end": "297840"
  },
  {
    "text": "so let's look at our scenario again the component in kubernetes responsible",
    "start": "298720",
    "end": "305520"
  },
  {
    "text": "for removing this finalizer is in controller manager it's the namespace lifecycle controller",
    "start": "305520",
    "end": "313198"
  },
  {
    "text": "its job is to watch namespaces that have begun the deletion process ensure that they are empty that all the",
    "start": "322960",
    "end": "329759"
  },
  {
    "text": "resources inside them have been deleted and then remove that finalizer the space",
    "start": "329759",
    "end": "335840"
  },
  {
    "text": "lifecycle controller is the villain now to list the resources inside of a namespace you need to know which",
    "start": "335840",
    "end": "342240"
  },
  {
    "text": "types of resources there are to be listed the process of figuring that out is called discovery",
    "start": "342240",
    "end": "349360"
  },
  {
    "text": "and at this point you might be asking yourself how does discovery work",
    "start": "351360",
    "end": "358319"
  },
  {
    "text": "well i'm about to tell you all api server all api requests in kubernetes uh have a",
    "start": "358639",
    "end": "365520"
  },
  {
    "text": "url path this is this identifies what exactly you're making the request about right and again i'm this is a",
    "start": "365520",
    "end": "371919"
  },
  {
    "text": "simplification but for our purposes all api requests start with the",
    "start": "371919",
    "end": "377520"
  },
  {
    "text": "word apis and the next thing that comes is a group the api group the next thing is a",
    "start": "377520",
    "end": "384479"
  },
  {
    "text": "version and after that is the resource",
    "start": "384479",
    "end": "389919"
  },
  {
    "text": "the resource is the thing that goes in the url path the kind is the is the the the type right in a type",
    "start": "391280",
    "end": "397680"
  },
  {
    "text": "system sense um so if you make an api request and you",
    "start": "397680",
    "end": "403199"
  },
  {
    "text": "just say apis if you stop there then you get a list of group versions that",
    "start": "403199",
    "end": "408800"
  },
  {
    "text": "api server knows about and if you list the group you get a list",
    "start": "408800",
    "end": "414720"
  },
  {
    "text": "of versions that are inside that group",
    "start": "414720",
    "end": "419599"
  },
  {
    "text": "right a list of versions and if you list a group and a version then api server will tell you which",
    "start": "419759",
    "end": "426479"
  },
  {
    "text": "kinds are inside that group version",
    "start": "426479",
    "end": "430400"
  },
  {
    "text": "and if you say more than that then you're making an actual api request which will do you some good like",
    "start": "435280",
    "end": "442720"
  },
  {
    "text": "list objects or just you know something useful",
    "start": "442720",
    "end": "450800"
  },
  {
    "text": "so how does the api server fulfill this contract to do that we should talk a",
    "start": "450800",
    "end": "458639"
  },
  {
    "text": "little bit about api server api server is actually three api servers in a trench code the first one is the",
    "start": "458639",
    "end": "464560"
  },
  {
    "text": "aggregator the second one is the built-ins it serves pods and services and stuff and the last",
    "start": "464560",
    "end": "470479"
  },
  {
    "text": "one is the extensions api server more commonly known as crds and if a",
    "start": "470479",
    "end": "476000"
  },
  {
    "text": "request can't be served by the aggregator it goes to the built-ins if that one doesn't want it it goes to the extensions and if that one doesn't",
    "start": "476000",
    "end": "482080"
  },
  {
    "text": "want it it gets a 404 which i've conveniently drawn off the bottom of the screen for",
    "start": "482080",
    "end": "487360"
  },
  {
    "text": "you now the aggregator may know what to do",
    "start": "487360",
    "end": "494400"
  },
  {
    "text": "with the request and it may be for a external api server",
    "start": "494400",
    "end": "499840"
  },
  {
    "text": "this means that that request must be proxied it is not served from the same process as the",
    "start": "499840",
    "end": "505919"
  },
  {
    "text": "kubernetes api server the aggregator is the villain",
    "start": "505919",
    "end": "511440"
  },
  {
    "text": "the canonical example is the metrics api server which kubernetes ships by default",
    "start": "511599",
    "end": "518320"
  },
  {
    "text": "this means that there's various things that could go wrong maybe your network is not working",
    "start": "518320",
    "end": "525040"
  },
  {
    "text": "um at least that link of your network or maybe the metrics api server is",
    "start": "525040",
    "end": "531600"
  },
  {
    "text": "co-located with a process that's hogging the node or",
    "start": "531600",
    "end": "537440"
  },
  {
    "text": "maybe it just has the wrong resource requirements",
    "start": "537440",
    "end": "542000"
  },
  {
    "text": "in any case the aggregator needs to get the kinds from",
    "start": "543680",
    "end": "549839"
  },
  {
    "text": "the target api server right only the groups and versions are registered with the system so uh if that",
    "start": "549839",
    "end": "557839"
  },
  {
    "text": "network if that external api server can't be reached then there's no way for the aggregator",
    "start": "557839",
    "end": "563040"
  },
  {
    "text": "to tell you which kinds are in the group version that you're asking about",
    "start": "563040",
    "end": "568320"
  },
  {
    "text": "the metrics api server is the villain that's kind of unfortunate but it is",
    "start": "568320",
    "end": "574880"
  },
  {
    "text": "also unavoidable because the extension api server is the only thing that knows what it",
    "start": "574880",
    "end": "580640"
  },
  {
    "text": "serves aggregator cannot know that it would be very heavy-handed to require",
    "start": "580640",
    "end": "587760"
  },
  {
    "text": "api authors to list that to pre-register that with the",
    "start": "587760",
    "end": "592720"
  },
  {
    "text": "aggregator it also wouldn't help the problem because even if you know what kinds if you can't actually go out and",
    "start": "593360",
    "end": "598480"
  },
  {
    "text": "list those things then you also can't confirm that they're deleted if the lifecycle controller",
    "start": "598480",
    "end": "604160"
  },
  {
    "text": "can't discover the the kinds that it should be deleting it is never certain that the namespace is",
    "start": "604160",
    "end": "609440"
  },
  {
    "text": "empty and if it's not certain that the namespace is empty then it can't remove that finalizer",
    "start": "609440",
    "end": "615440"
  },
  {
    "text": "so whose job is it to make sure that this thing is working anyway",
    "start": "615440",
    "end": "621120"
  },
  {
    "text": "i think it is the job of the system administrator the cluster administrator rather",
    "start": "621120",
    "end": "627360"
  },
  {
    "text": "and i think the cluster administrator should be performing this job by using some monitoring",
    "start": "627360",
    "end": "633839"
  },
  {
    "text": "the metrics api server is served by a regular kubernetes pod so it should be possible",
    "start": "634399",
    "end": "640240"
  },
  {
    "text": "to monitor it another way you can monitor the overall health and",
    "start": "640240",
    "end": "646079"
  },
  {
    "text": "like not just the specific metrics api server but if you just run the command cube control api resources once in a",
    "start": "646079",
    "end": "652160"
  },
  {
    "text": "while it does this discovery process and it'll tell you if some group is not working and then you can look at the",
    "start": "652160",
    "end": "658560"
  },
  {
    "text": "api service object for that group and figure out what component is not happy",
    "start": "658560",
    "end": "665920"
  },
  {
    "text": "so thank you for listening to my talk and watching robo daniel draw these",
    "start": "665920",
    "end": "671680"
  },
  {
    "text": "if you think that we could do better i'd encourage you to come help us improve our error messages",
    "start": "671680",
    "end": "678480"
  },
  {
    "text": "or our design yeah",
    "start": "678480",
    "end": "683600"
  },
  {
    "text": "thanks the system administrator is the villain",
    "start": "686839",
    "end": "694959"
  },
  {
    "text": "welcome to the second part of the seek api machinery deep live today i want to talk about a concept which is",
    "start": "696560",
    "end": "702640"
  },
  {
    "text": "pretty central in kubernetes but it's not well known to many people and maybe if they use client go",
    "start": "702640",
    "end": "708240"
  },
  {
    "text": "and build some non-trivial controllers they have read it but they they might have question marks around",
    "start": "708240",
    "end": "713760"
  },
  {
    "text": "that that mapping action is very simple just say cue cuddle get pots in your terminal",
    "start": "713760",
    "end": "719600"
  },
  {
    "text": "and get parts is a command which is generic so generic means that it doesn't know anything about pots it",
    "start": "719600",
    "end": "725200"
  },
  {
    "text": "has to work with any every resource that is available and known to the cluster and to make that uh happen it has to",
    "start": "725200",
    "end": "731839"
  },
  {
    "text": "query the discovery information of the cube api server so it has to ask it um what is the part and to do that",
    "start": "731839",
    "end": "737760"
  },
  {
    "text": "if you increase the velocity to at least six you will see what it does it can be slash api to get the versions",
    "start": "737760",
    "end": "743279"
  },
  {
    "text": "of the legacy api is queries apis to get api groups and their versions and then it continues in queries like",
    "start": "743279",
    "end": "749839"
  },
  {
    "text": "more than 30 api group versions so api slash v1 api slash apps search b1 and 30",
    "start": "749839",
    "end": "755519"
  },
  {
    "text": "more and after doing that it has all this information too to find out what the port is and it sees a part this resource which",
    "start": "755519",
    "end": "762480"
  },
  {
    "text": "shows up in the api slash v1 so it's a legacy core api version v1 resource and from this",
    "start": "762480",
    "end": "769279"
  },
  {
    "text": "information it also knows that it's namespace so part is namespace resource and from this information it can construct the url to to actually",
    "start": "769279",
    "end": "775839"
  },
  {
    "text": "list the ports in the system and it knows its name space so it adds the namespaces default default is code one the",
    "start": "775839",
    "end": "781920"
  },
  {
    "text": "namespace so it knows the url just by discovering information how to get supports that's what it does",
    "start": "781920",
    "end": "787120"
  },
  {
    "text": "in the types of kubernetes there are kinds and resources kinds are the upper case singular words",
    "start": "787120",
    "end": "792160"
  },
  {
    "text": "which you find in manifest usually and the resources they are components of",
    "start": "792160",
    "end": "797279"
  },
  {
    "text": "urls so the group version and the resource name plus information of the scope that's all",
    "start": "797279",
    "end": "804079"
  },
  {
    "text": "needed to build a url and the mapping between those two worlds it's called rest mapping and that's our topic today",
    "start": "804079",
    "end": "810000"
  },
  {
    "text": "google resources and google kind we call them fully qualified or complete if the group the version and the name",
    "start": "810000",
    "end": "816880"
  },
  {
    "text": "are provided if the group is empty it's a legal secret black for pots we have the same for clients and we can",
    "start": "816880",
    "end": "823519"
  },
  {
    "text": "also talk about partial resources and partial kinds so in the first case the version is missing so",
    "start": "823519",
    "end": "828560"
  },
  {
    "text": "abstractica said it's a partial kind v1 replica sets lower case it's a partial resource a group is",
    "start": "828560",
    "end": "834959"
  },
  {
    "text": "missing and if both information those kinds of information are missing it's also partial so replica sets the",
    "start": "834959",
    "end": "840560"
  },
  {
    "text": "loan has no group has no version and that's what we know everybody knows from qatar and usually you do it on the command",
    "start": "840560",
    "end": "846000"
  },
  {
    "text": "line you can get replica sets it's a partial resource and the last mapper is used to to fill the missing information and",
    "start": "846000",
    "end": "851680"
  },
  {
    "text": "to get a fully qualified resource which then can be used to query the replica sets there's a syntax to",
    "start": "851680",
    "end": "857680"
  },
  {
    "text": "couple syntax to say this is group apps so dot apps tell us q carter and the group is given you can even just",
    "start": "857680",
    "end": "864560"
  },
  {
    "text": "use a prefix and this is completed by the last mapper so dot a is completed to x v1 and of course you can have complete",
    "start": "864560",
    "end": "870160"
  },
  {
    "text": "group version resources.v1 dot apps if you try this prefix matching if you have a version it will fail because the",
    "start": "870160",
    "end": "876320"
  },
  {
    "text": "raspberry pi doesn't support that if you try dot v1 without a group two cutter parsing doesn't work so it's also",
    "start": "876320",
    "end": "881440"
  },
  {
    "text": "rejected everything i talked about here works for singular and plural so you can give a singular word here a singular partial",
    "start": "881440",
    "end": "887680"
  },
  {
    "text": "resource it's completed to a complete pure resource where are these members used so we saw",
    "start": "887680",
    "end": "894160"
  },
  {
    "text": "two cattle that we have server itself has some use of rest mappers so there are some gc garbage collection related admission",
    "start": "894160",
    "end": "900399"
  },
  {
    "text": "plugin here but the main consumer of those class mappers especially discovery based ones has",
    "start": "900399",
    "end": "905519"
  },
  {
    "text": "controllers controller manager horizontal port auto scaling can work for all the resources that have a scale",
    "start": "905519",
    "end": "911199"
  },
  {
    "text": "subresource so this is a polymorphic or generic use case that's why asthmatic is involved in port",
    "start": "911199",
    "end": "916240"
  },
  {
    "text": "disruption budget is also involved and the garbage collectors may be the most interesting case here and then we will",
    "start": "916240",
    "end": "922399"
  },
  {
    "text": "spend several slides talking about the garbage collector and this uses mapping at this core um quota doesn't",
    "start": "922399",
    "end": "928480"
  },
  {
    "text": "use last map being surprisingly but it uses discovery so it's not that surprising because discovery and last",
    "start": "928480",
    "end": "933920"
  },
  {
    "text": "nothing are deeply connected uh quick look on the respect interface and go",
    "start": "933920",
    "end": "939680"
  },
  {
    "text": "there are three kinds the yellow functions here they map partial resources to kinds they map the right ones partial",
    "start": "939680",
    "end": "947120"
  },
  {
    "text": "resources to complete resources for the qualified resources and the green ones take group kinds complete so who kind of cannot be",
    "start": "947120",
    "end": "953279"
  },
  {
    "text": "admitted complete group clients and versions to rest mappings and last mappings if you look here what ransomware is is",
    "start": "953279",
    "end": "958800"
  },
  {
    "text": "actually the resource the kind fully qualified and scope so basically the last one is kind to resource",
    "start": "958800",
    "end": "964399"
  },
  {
    "text": "and the green one is most interesting in the context of garbage collection because garbage creation uses that owner",
    "start": "964399",
    "end": "969759"
  },
  {
    "text": "perforances are group kinds and so everything which we talk about here makes a difference or has influence on",
    "start": "969759",
    "end": "975759"
  },
  {
    "text": "coverage collision so take let's take a look on the yellow and the right ones where we can have partial input",
    "start": "975759",
    "end": "981600"
  },
  {
    "text": "so partial input is completed if we already pass complete information so fully qualified resources of course we",
    "start": "981600",
    "end": "987040"
  },
  {
    "text": "get back fully fully qualified resources again not surprising what especially here if you have all three components and they're",
    "start": "987040",
    "end": "993279"
  },
  {
    "text": "not empty there's no prefix matching so if you have just a but you pass a version as well you get",
    "start": "993279",
    "end": "998880"
  },
  {
    "text": "an error this prefix matching only works if the version is submitted so yeah for the case reversion submitted",
    "start": "998880",
    "end": "1004639"
  },
  {
    "text": "but the group is complete obviously it's it looks through its formation of group versions and finds replica sets here in",
    "start": "1004639",
    "end": "1010639"
  },
  {
    "text": "this case mb1 and v1 beta1 of the apps group if you just have the a is the prefix matching which which you",
    "start": "1010639",
    "end": "1015839"
  },
  {
    "text": "already have seen happen so absolute one replica set is found and f v one beta one replica sets",
    "start": "1015839",
    "end": "1021279"
  },
  {
    "text": "the raspberry also looks an authentication k or s i o and probably some other groups with a",
    "start": "1021279",
    "end": "1027120"
  },
  {
    "text": "but there is no replica set so those are not returned by the last number the last one the group the group is missing it's",
    "start": "1027120",
    "end": "1033038"
  },
  {
    "text": "filled in as expected and if group and version are missing that's the usual case on the command line then group and version are added",
    "start": "1033039",
    "end": "1041199"
  },
  {
    "text": "the order of the results depends on the preferred group version order you saw that in the discovery information already",
    "start": "1041199",
    "end": "1047120"
  },
  {
    "text": "and other than that resource names are ordered alphabetically all right so discovery and rest mappings",
    "start": "1047120",
    "end": "1053440"
  },
  {
    "text": "are connected let's take a quick look on discovery information on the slash api's endpoint you get all",
    "start": "1053440",
    "end": "1058559"
  },
  {
    "text": "api groups and save versions and the preferred versions on slash apis apps you get basically the",
    "start": "1058559",
    "end": "1064160"
  },
  {
    "text": "same but just for the apps scoop in both cases you don't get resources so if you want to know about resources you",
    "start": "1064160",
    "end": "1069679"
  },
  {
    "text": "have to go to one level deeper apis apps you want and then you get everything about oil resources",
    "start": "1069679",
    "end": "1074720"
  },
  {
    "text": "in the case replica sets lowercase prover is the name of the resource singular name it's empty",
    "start": "1074720",
    "end": "1080160"
  },
  {
    "text": "so the rest method will fill in the lowercase kind the scope of this is the namespace so we",
    "start": "1080160",
    "end": "1085200"
  },
  {
    "text": "have to add the namespace to the ul the kind skeptica set uppercase as we expected the verbs are given so we",
    "start": "1085200",
    "end": "1092160"
  },
  {
    "text": "know what we can do with the resource short names are returned for crew cutters or aliases on the command line and cut categories so you can list all",
    "start": "1092160",
    "end": "1098960"
  },
  {
    "text": "resources and replica sets are among that all right so keep in mind to get resources you have to",
    "start": "1098960",
    "end": "1105120"
  },
  {
    "text": "have the third column as well from discovery info so you can use the discovery client",
    "start": "1105120",
    "end": "1110480"
  },
  {
    "text": "and you can grab it with a caching layer so there's a disk cache and a memcache discovery wrapper memcaches for",
    "start": "1110480",
    "end": "1116000"
  },
  {
    "text": "controllers because they are one long running and this cache is used by cubecutter for example and if you have a cached discovery",
    "start": "1116000",
    "end": "1122160"
  },
  {
    "text": "client you can pass that to the constructor for a discovery rest mapper and you get the last mapper as you expect implementing the interface we",
    "start": "1122160",
    "end": "1128559"
  },
  {
    "text": "have just seen there's a reset method on the lastmapper so you can evaluate the cache manually if you like",
    "start": "1128559",
    "end": "1134720"
  },
  {
    "text": "this also happens when you have a typo and a typo means the cache is the cache miss",
    "start": "1134720",
    "end": "1140559"
  },
  {
    "text": "and the cache is invalidated this means you get those 30 plus discovery calls again and again so",
    "start": "1140559",
    "end": "1146880"
  },
  {
    "text": "depending on your use case if you have a controller there's a risk of hot looping so keep this in mind this might be important so where it's",
    "start": "1146880",
    "end": "1154080"
  },
  {
    "text": "used for resources here what i want to highlight is that the controller manager calls reset every 30 seconds and",
    "start": "1154080",
    "end": "1159919"
  },
  {
    "text": "this is a way it gets to know about new resources so if you create a cid in the cluster it takes max 30 seconds",
    "start": "1159919",
    "end": "1165600"
  },
  {
    "text": "until garbage collection knows about the new cid we talked about",
    "start": "1165600",
    "end": "1170640"
  },
  {
    "text": "that we need this versioned discovery endpoint to get resources the consequence is if you have",
    "start": "1170640",
    "end": "1175919"
  },
  {
    "text": "aggregated api servers in the system you need this red arrow here to to know about the aggregated resources",
    "start": "1175919",
    "end": "1181840"
  },
  {
    "text": "if this breaks down for networking issues or because api server redeploys or something like",
    "start": "1181840",
    "end": "1187120"
  },
  {
    "text": "that discovery clients and rest members won't see the resources in aggregated vi everyone",
    "start": "1187120",
    "end": "1193039"
  },
  {
    "text": "this means that the discovery cloud will have an error with return error and the rest mapper will have incomplete",
    "start": "1193039",
    "end": "1199679"
  },
  {
    "text": "information and this might have consequences so keep this in mind the discovery client is kind of graceful so it it returns",
    "start": "1199679",
    "end": "1206640"
  },
  {
    "text": "errors directly but it also gives you the partial information it was able to gather from the cluster so always expect",
    "start": "1206640",
    "end": "1212559"
  },
  {
    "text": "a nominal first result even though the error is also bundled and co-present whatever this means in",
    "start": "1212559",
    "end": "1218320"
  },
  {
    "text": "your use case the discovery rest mapper is very graceful so it just continues with partial results",
    "start": "1218320",
    "end": "1223360"
  },
  {
    "text": "and ignores errors but obviously incomplete information might have consequences for your use case so think about your controller and",
    "start": "1223360",
    "end": "1229600"
  },
  {
    "text": "where you use the last mapper try to fail gracefully because you have to expect errors they happen and stay consistent in a way which",
    "start": "1229600",
    "end": "1237039"
  },
  {
    "text": "matches your use case so we saw a namespace controller which blocks rather than doing uh stupid things it",
    "start": "1237039",
    "end": "1242559"
  },
  {
    "text": "blocks the the work maybe this is much more important to stay consistent like that than continuing working gracefully",
    "start": "1242559",
    "end": "1248640"
  },
  {
    "text": "garbage collection david we'll talk about it in a second that's also important to cutter you can just print a warning or something like that that's",
    "start": "1248640",
    "end": "1254320"
  },
  {
    "text": "completely fine but depending on use cases behavior must be different and with that i pass over to david",
    "start": "1254320",
    "end": "1260159"
  },
  {
    "text": "now let's move on to garbage collection of kubernetes api resources",
    "start": "1260159",
    "end": "1265519"
  },
  {
    "text": "the first thing to consider is which binaries are involved and we have a cube api server which does basic crud on the",
    "start": "1266000",
    "end": "1272159"
  },
  {
    "text": "resource and tracks state like is the resource present has it been removed or does it have a",
    "start": "1272159",
    "end": "1277280"
  },
  {
    "text": "deletion time stamp set but finalizers that prevent it from being removed and then we have the",
    "start": "1277280",
    "end": "1282720"
  },
  {
    "text": "cube controller manager which runs a garbage collector garbage collector controller and it",
    "start": "1282720",
    "end": "1288240"
  },
  {
    "text": "looks for resources with absentee or missing owners and takes action on them and we'll get",
    "start": "1288240",
    "end": "1293679"
  },
  {
    "text": "to the particular actions later on in some examples to describe the relationship between the",
    "start": "1293679",
    "end": "1299120"
  },
  {
    "text": "resources we have owner references on children children list their parents",
    "start": "1299120",
    "end": "1304320"
  },
  {
    "text": "as an owner ref you can have more than one and a namespace child can only refer to",
    "start": "1304320",
    "end": "1310320"
  },
  {
    "text": "parents in the same name space or in cluster scope name spaces having the owner references on the child",
    "start": "1310320",
    "end": "1316240"
  },
  {
    "text": "allows permissions to be listed on the child and not on the parent which makes it",
    "start": "1316240",
    "end": "1321280"
  },
  {
    "text": "safer to express them via the api looking at an owner reference here's an",
    "start": "1321280",
    "end": "1329120"
  },
  {
    "text": "example in a resource manifest that shows a single owner reference there is a section that refers to",
    "start": "1329120",
    "end": "1336559"
  },
  {
    "text": "coordinates where to find the parent in this case we're looking for a config map named i3",
    "start": "1336559",
    "end": "1342960"
  },
  {
    "text": "you'll notice there is no namespace so this means that it has to be in the same namespace or clusterscope we have a block model",
    "start": "1342960",
    "end": "1350720"
  },
  {
    "text": "deletion field that only does something with foreground deletion of parents it has no effect in the default case",
    "start": "1350720",
    "end": "1358320"
  },
  {
    "text": "there is a controller field which doesn't actually affect gc behavior at all it's used by higher",
    "start": "1358320",
    "end": "1363600"
  },
  {
    "text": "order logic to control ownership uh of items and then there's a euid the uid",
    "start": "1363600",
    "end": "1370720"
  },
  {
    "text": "refers to the uid of the parent and it's necessary to handle name reuse of parents if you rapidly",
    "start": "1370720",
    "end": "1377200"
  },
  {
    "text": "delete and recreate parents we need to know if it's the same parent in which case",
    "start": "1377200",
    "end": "1382559"
  },
  {
    "text": "you need to be preserved or in a delete and recreate case it's different",
    "start": "1382559",
    "end": "1388000"
  },
  {
    "text": "and the owner ref is now invalid and the resource needs to be collected it does mean that",
    "start": "1388000",
    "end": "1393679"
  },
  {
    "text": "you can't hard code them into manifests which is a pain point but we don't know of",
    "start": "1393679",
    "end": "1398799"
  },
  {
    "text": "another way to solve the delete and recreate use case so the mechanics of actual deletion",
    "start": "1398799",
    "end": "1405919"
  },
  {
    "text": "there is an option to delete in the background this is the default case it means that resources are removed immediately",
    "start": "1405919",
    "end": "1413120"
  },
  {
    "text": "assuming you have no finalizers and the garbage collection controller finds child resources",
    "start": "1413120",
    "end": "1418559"
  },
  {
    "text": "that have no additional owners in the background and deletes them this is what happens when you run queue control delete a particular config map",
    "start": "1418559",
    "end": "1426480"
  },
  {
    "text": "so in this example we are going to delete i3 the delete command sends a propagation",
    "start": "1426480",
    "end": "1432559"
  },
  {
    "text": "policy of background to the cube api server and i3 is immediately removed from the",
    "start": "1432559",
    "end": "1438400"
  },
  {
    "text": "api the garbage collection controller notices and then deletes k3 because it no longer has a valid",
    "start": "1438400",
    "end": "1445440"
  },
  {
    "text": "owner reference then the garbage collection controller notices that o2 and o3",
    "start": "1445440",
    "end": "1450799"
  },
  {
    "text": "have no owner references and they get deleted in any order another option for deletion is to orphan",
    "start": "1450799",
    "end": "1458320"
  },
  {
    "text": "it you might use this means that resources are going to be deleted but instead of",
    "start": "1458320",
    "end": "1463919"
  },
  {
    "text": "cascading through garbage collection and deleting the children it'll simply remove the owner references",
    "start": "1463919",
    "end": "1469360"
  },
  {
    "text": "to the children this is something you might do if you want to replace a parent for some reason like maybe there's an immutable field and you",
    "start": "1469360",
    "end": "1475679"
  },
  {
    "text": "need to change what that immutable field is you have to delete and recreate but you",
    "start": "1475679",
    "end": "1481200"
  },
  {
    "text": "don't want to cascade through everything to do this you would use a cue control delete with a cascade equals false",
    "start": "1481200",
    "end": "1486880"
  },
  {
    "text": "and it would send a propagation policy of orphan so if we work through the same example only this time we're going to delete i3 with an orphan",
    "start": "1486880",
    "end": "1493840"
  },
  {
    "text": "policy then i3 is march relations deletion timestamp is set and an orphan finalizer is added to",
    "start": "1493840",
    "end": "1501120"
  },
  {
    "text": "the list the garbage collection controller notices this finds the children and removes their",
    "start": "1501120",
    "end": "1508000"
  },
  {
    "text": "owner references once the owner reference is removed then",
    "start": "1508000",
    "end": "1513039"
  },
  {
    "text": "the orphan finalizer is removed and i3 is deleted so you can see here we end up",
    "start": "1513039",
    "end": "1518320"
  },
  {
    "text": "k3 and the other owner references are still intact and now we can recreate i3 and re-link it if we wish",
    "start": "1518320",
    "end": "1526400"
  },
  {
    "text": "foreground the deletion of the foreground is one of the more complicated ones and",
    "start": "1526480",
    "end": "1531600"
  },
  {
    "text": "this is what block owner deletion is for it allows for more control",
    "start": "1531600",
    "end": "1537279"
  },
  {
    "text": "over the ordering in which resources are deleted this means that we're able to",
    "start": "1537279",
    "end": "1545200"
  },
  {
    "text": "have parents wait for children to be removed before they themselves are removed it's",
    "start": "1545440",
    "end": "1551360"
  },
  {
    "text": "important to note that this only works if the parent is deleted with foreground deletion if it isn't",
    "start": "1551360",
    "end": "1556960"
  },
  {
    "text": "then your block or deletion doesn't actually do anything so it's more of a hint",
    "start": "1556960",
    "end": "1563919"
  },
  {
    "text": "there's actually no command to trigger this so instead we have an example of using a",
    "start": "1563919",
    "end": "1570559"
  },
  {
    "text": "delete dash dash raw to send a propagation policy of foreground to the cube api server",
    "start": "1570559",
    "end": "1576320"
  },
  {
    "text": "so you can see here we have our same example we have owner references with block owner deletion",
    "start": "1576320",
    "end": "1581679"
  },
  {
    "text": "set for a couple of the cases and we're going to walk this through the first thing that happens is that i3",
    "start": "1581679",
    "end": "1587440"
  },
  {
    "text": "is marked for deletion and a foreground deletion is added to finalizer s the garbage collection controller",
    "start": "1587440",
    "end": "1593039"
  },
  {
    "text": "notices this and goes to the next level and marks k3 the same way",
    "start": "1593039",
    "end": "1600320"
  },
  {
    "text": "but k3 cannot be removed from the api yet because there's a block owner deletion",
    "start": "1600320",
    "end": "1606240"
  },
  {
    "text": "from o2 instead we actually have to go and remove o2 and",
    "start": "1606240",
    "end": "1611760"
  },
  {
    "text": "o3 first once o2 is removed it becomes possible to delete k3 and once k3 is",
    "start": "1611760",
    "end": "1619520"
  },
  {
    "text": "removed we can delete i3 you can see here that the ordering is actually the reverse of the background",
    "start": "1619520",
    "end": "1624840"
  },
  {
    "text": "deletion but remember it's optional if you deleted i3 with",
    "start": "1624840",
    "end": "1631200"
  },
  {
    "text": "background deletion you wouldn't get this order so if you need to preserve your resource you're going to want to set a finalizer",
    "start": "1631200",
    "end": "1638480"
  },
  {
    "text": "so bugs we do have bugs one of them is with block under deletion",
    "start": "1638480",
    "end": "1644159"
  },
  {
    "text": "if you have two parents of a child then it doesn't behave right",
    "start": "1644159",
    "end": "1652399"
  },
  {
    "text": "in fact i'll if you delete i3 in this case i'll just skip through the pieces we already know we're marked relation and now we're at",
    "start": "1652399",
    "end": "1658799"
  },
  {
    "text": "the point where k3 should not be deleted until o2 has been removed",
    "start": "1658799",
    "end": "1664880"
  },
  {
    "text": "o2 should not be removed early but",
    "start": "1664880",
    "end": "1670320"
  },
  {
    "text": "the garbage collection controller removes the owner reference from o2 to k3 by doing this it becomes a",
    "start": "1670320",
    "end": "1677520"
  },
  {
    "text": "valid target for lesion and k3 can be deleted this is a bug we end up",
    "start": "1677520",
    "end": "1684159"
  },
  {
    "text": "deleting i3 k3 and o3 because the owner reference from o2 no",
    "start": "1684159",
    "end": "1689520"
  },
  {
    "text": "longer exists we don't currently have a pr to fix this bug",
    "start": "1689520",
    "end": "1695039"
  },
  {
    "text": "it is less than ideal but i hit it again while creating this demo figured i'd",
    "start": "1695039",
    "end": "1700240"
  },
  {
    "text": "mention it there's another case where clustered namespace references",
    "start": "1700240",
    "end": "1705360"
  },
  {
    "text": "can cause deletion of of resources with valid owners so in",
    "start": "1705360",
    "end": "1711520"
  },
  {
    "text": "this case uh we have a cluster scope resource n2 which has which has taken",
    "start": "1711520",
    "end": "1716880"
  },
  {
    "text": "an owner ref against the name space resource and you recall i said you should never do this it's not",
    "start": "1716880",
    "end": "1722840"
  },
  {
    "text": "allowed the api doesn't prevent it and sometimes it appears to work because what will happen is i3 exists in the",
    "start": "1722840",
    "end": "1729120"
  },
  {
    "text": "cache in the garbage collector and n2 does an existence check uh with a ui and it matches i3 so it",
    "start": "1729120",
    "end": "1736640"
  },
  {
    "text": "appears to have a valid owner but on every restart the cube controller manager",
    "start": "1736640",
    "end": "1741840"
  },
  {
    "text": "effectively has a race it races to see whether it observes i3 before it observes n2",
    "start": "1741840",
    "end": "1748720"
  },
  {
    "text": "if you lose the race n2 is observed first there's an i3 existence check but there",
    "start": "1748720",
    "end": "1753840"
  },
  {
    "text": "is no i3 at the cluster scope remember there's no namespace so the cluster scoped resource can't",
    "start": "1753840",
    "end": "1759760"
  },
  {
    "text": "depend on a namespace scoped one that causes n2 to be deleted and that's probably okay because it has an invalid",
    "start": "1759760",
    "end": "1765279"
  },
  {
    "text": "owner reference but k3 was deleted as well even though it was well formed because we saw the uid disappear",
    "start": "1765279",
    "end": "1772080"
  },
  {
    "text": "this is a bug we have a pr to fix it that we'll be looking at doing in",
    "start": "1772080",
    "end": "1777360"
  },
  {
    "text": "120. in a related problem the same thing can happen across",
    "start": "1777360",
    "end": "1782480"
  },
  {
    "text": "namespace where if you race and i3 exists before you see",
    "start": "1782480",
    "end": "1788559"
  },
  {
    "text": "k2 then k2 won't be deleted but if the race goes the other way",
    "start": "1788559",
    "end": "1794080"
  },
  {
    "text": "the existence check fails because there's no i3 in namespace one and so k2 and k3 are both deleted",
    "start": "1794080",
    "end": "1802159"
  },
  {
    "text": "there's one more common case of seeing this and it's inside of a single namespace where the kind is set",
    "start": "1802159",
    "end": "1808080"
  },
  {
    "text": "incorrectly when this happens you end up with a deletion and it causes",
    "start": "1808080",
    "end": "1815440"
  },
  {
    "text": "k2 and k3 in the namespace to be deleted as i said we have a pr fixing this in 120",
    "start": "1815440",
    "end": "1820480"
  },
  {
    "text": "and it will prevent the good owner references from having their",
    "start": "1820480",
    "end": "1826080"
  },
  {
    "text": "resources removed it was a whirlwind tour through garbage collection",
    "start": "1826080",
    "end": "1832480"
  },
  {
    "text": "and if you want to ask more questions about it and you don't get them in the session",
    "start": "1832480",
    "end": "1837840"
  },
  {
    "text": "you can find us in slack and then in the community meeting and mailing list i've got links here",
    "start": "1837840",
    "end": "1845120"
  },
  {
    "text": "all right hello again i hope you enjoyed our did that topics",
    "start": "1845120",
    "end": "1850960"
  },
  {
    "text": "from our presenters personally i really did before ending this session i wanted to remind you",
    "start": "1850960",
    "end": "1856799"
  },
  {
    "text": "that we have regular sick meetings every two weeks and twice a week we do our bag and pull request three ashes for 30",
    "start": "1856799",
    "end": "1863200"
  },
  {
    "text": "minutes it's a great way to get involved join our mailing list to get the invites we also have cube",
    "start": "1863200",
    "end": "1870399"
  },
  {
    "text": "builder and api expression working groups as part of our c and they have their own",
    "start": "1870399",
    "end": "1875760"
  },
  {
    "text": "respective meetings twice a month we are all always in our slack channels finally",
    "start": "1875760",
    "end": "1882399"
  },
  {
    "text": "i will leave you this slide with contact and material information in case you want to know more or do more",
    "start": "1882399",
    "end": "1888320"
  },
  {
    "text": "with us in the name of the entire siege thank you for attending our session and we wish you a good and enjoyable",
    "start": "1888320",
    "end": "1895200"
  },
  {
    "text": "crypto bye bye",
    "start": "1895200",
    "end": "1898960"
  }
]