[
  {
    "text": "and we're going to move right along uh to our next session with Jonas boner uh",
    "start": "80",
    "end": "6319"
  },
  {
    "text": "transcending the barriers to elasticity which is sponsored by AA Jonas is the",
    "start": "6319",
    "end": "12320"
  },
  {
    "text": "inventor of AA and the CTO and co-founder of lightbend he's a distributed systems innovator and OSS",
    "start": "12320",
    "end": "19160"
  },
  {
    "text": "Community leader uh he wrote the very influential reactive Manifesto and reactive principles and numerous design",
    "start": "19160",
    "end": "25880"
  },
  {
    "text": "books that set the foundations for how we tend to think about and build systems today your active Manifesto in",
    "start": "25880",
    "end": "32160"
  },
  {
    "text": "particular uh really was U an eye opener for a lot of Architects about the way to",
    "start": "32160",
    "end": "38200"
  },
  {
    "text": "think about systems Jonas is the originator of AA the flagship solution from light bin for building operating",
    "start": "38200",
    "end": "44399"
  },
  {
    "text": "and securing distributed applications he's also an amateur jazz musician and a passionate skier who holds a Bachelor of",
    "start": "44399",
    "end": "50879"
  },
  {
    "text": "Science from mids Sweden University so please welcome me in joining",
    "start": "50879",
    "end": "56480"
  },
  {
    "text": "Jonas thanks a lot Neil yes I'm I'm I'm going to talk about elasticity here and",
    "start": "56480",
    "end": "61800"
  },
  {
    "text": "and and uh and how we as developers you know could help s transcending the",
    "start": "61800",
    "end": "68880"
  },
  {
    "text": "barriers to elstic because there there are many uh sort of to sort of free up the",
    "start": "68880",
    "end": "75400"
  },
  {
    "text": "infrastructure to do what is best you know by by doing you know U by sort of",
    "start": "75400",
    "end": "81000"
  },
  {
    "text": "leveraging good principles up in the application stack so but let's start with with with",
    "start": "81000",
    "end": "87240"
  },
  {
    "text": "some definitions you know what do really elastic mean Marin Webster defines it as",
    "start": "87240",
    "end": "93439"
  },
  {
    "text": "being capable of ready change or easy expansion and and and contraction and",
    "start": "93439",
    "end": "99759"
  },
  {
    "text": "you know I'd say that my sort of definition is that it's a system that stays responsive under any external",
    "start": "99759",
    "end": "106200"
  },
  {
    "text": "Factor you know workload operations failures by by scaling up or down on",
    "start": "106200",
    "end": "112479"
  },
  {
    "text": "demand so s being able to react it's really being able to react to changes by",
    "start": "112479",
    "end": "117719"
  },
  {
    "text": "sort of increasing or decreasing resources allocated to service you know the inputs that are arriving into into",
    "start": "117719",
    "end": "124719"
  },
  {
    "text": "the system and sort of allow the application to be to be sort of stretched out or contracted in a",
    "start": "124719",
    "end": "129879"
  },
  {
    "text": "transparent fashion as a reaction you know to to these changes of inputs and",
    "start": "129879",
    "end": "135040"
  },
  {
    "text": "and most people talk about you know elasticity to be able to really hand the workload and that and that's what or",
    "start": "135040",
    "end": "140680"
  },
  {
    "text": "sort changes in in workload and that's of course very very important being able to scale up or down compute scale in and",
    "start": "140680",
    "end": "146560"
  },
  {
    "text": "out servers you know scale data on and address VAR variations in in workload in in",
    "start": "146560",
    "end": "153000"
  },
  {
    "text": "general but I also think that it's it's quite important to think about Ops here as well you know how do operate how can",
    "start": "153000",
    "end": "158599"
  },
  {
    "text": "we make it easier for operations to things to rebalance and repartition workloads to enable S upgrades without",
    "start": "158599",
    "end": "166640"
  },
  {
    "text": "any any any downtime schema changes and maintenance events and so on and that sort ties very much also into",
    "start": "166640",
    "end": "174120"
  },
  {
    "text": "elasticity and of course failure as well being able to recover and move and replicate workloads you know as a react",
    "start": "174120",
    "end": "180560"
  },
  {
    "text": "as a response to to failure Hardware failure Network failures or system",
    "start": "180560",
    "end": "186280"
  },
  {
    "text": "failures so with that little bit sort of broader uh definition in mind um you",
    "start": "186280",
    "end": "192200"
  },
  {
    "text": "know I'll let's dive into you know some of some of the barriers to elasticity um you I like first I want to",
    "start": "192200",
    "end": "200200"
  },
  {
    "text": "say that I don't I I don't think that elastic Cloud infrastructure really translates to application elasticity I",
    "start": "200200",
    "end": "208040"
  },
  {
    "text": "see them as two different things that need to work in tandem um and and as developers we can",
    "start": "208040",
    "end": "214439"
  },
  {
    "text": "you know there are many barriers that we that we can run into you know and and and and unless we think ahead you know",
    "start": "214439",
    "end": "220799"
  },
  {
    "text": "we we we we as developers and also operations staff you might be forced to rethink and rewrite application to to",
    "start": "220799",
    "end": "227480"
  },
  {
    "text": "sort of transcend each one of these of these of these barriers you know the the the first one this of course very very",
    "start": "227480",
    "end": "234319"
  },
  {
    "text": "high level because I only have 30 minutes so the first thing to watch out for is compute saturation mean sort of",
    "start": "234319",
    "end": "240480"
  },
  {
    "text": "iio being being being sort of compute compute bound uh that usually you know means very poor resource you utilization",
    "start": "240480",
    "end": "249079"
  },
  {
    "text": "and it's and it's often due to sort of contention contention on on Shar on shared state mean mean U the this the",
    "start": "249079",
    "end": "256639"
  },
  {
    "text": "second sort of barrier that many run into is IO",
    "start": "256639",
    "end": "261799"
  },
  {
    "text": "saturation it's often due to her blocking iio and and synchronous messaging",
    "start": "261800",
    "end": "267759"
  },
  {
    "text": "synchronous art RPC and so between uh you know services and nodes and so on",
    "start": "267759",
    "end": "273160"
  },
  {
    "text": "and and it's you know it's partly what also drives database s s saturation and",
    "start": "273160",
    "end": "278440"
  },
  {
    "text": "it's unfortunate that we you know often see many high compute applications are",
    "start": "278440",
    "end": "283600"
  },
  {
    "text": "idling because the database is is is saturated uh the the third the third",
    "start": "283600",
    "end": "288880"
  },
  {
    "text": "thing to watch out for is is you know what I named here connection saturation it might not be the best name but but",
    "start": "288880",
    "end": "295240"
  },
  {
    "text": "what I what I mean here is like that you know where you end up in a s in a situation exhaust the connection pool",
    "start": "295240",
    "end": "301000"
  },
  {
    "text": "you know more compute nodes actually doesn't help you know they yield diminishing returns because there's too",
    "start": "301000",
    "end": "307320"
  },
  {
    "text": "much contention on on on the on the singal uh uh through database or",
    "start": "307320",
    "end": "313199"
  },
  {
    "text": "resource you know that you would like to to to connect to and and uh you know",
    "start": "313199",
    "end": "318400"
  },
  {
    "text": "that might also might make make make it hard to know you know when should you scale up or rather scale out and and",
    "start": "318400",
    "end": "325520"
  },
  {
    "text": "scale in and and stuff like that and finally you know how how how do we handle our Disaster Recovery you know we",
    "start": "325520",
    "end": "332720"
  },
  {
    "text": "here here here here we need to start thinking about things like region to region replication stretching out the",
    "start": "332720",
    "end": "338479"
  },
  {
    "text": "application up into multi- region sometimes onto multic Cloud as well and",
    "start": "338479",
    "end": "344520"
  },
  {
    "text": "and and and man is you know the RTO the recovery time which which if if not done correctly can be can be quite know no",
    "start": "344520",
    "end": "352039"
  },
  {
    "text": "High um and of course you know as As you move the application stretch it out across different geographic regions when",
    "start": "352039",
    "end": "359960"
  },
  {
    "text": "we you know we we need to think hard about security and regulations compliance and all of those",
    "start": "359960",
    "end": "366039"
  },
  {
    "text": "things um so you know the thing is that like",
    "start": "366039",
    "end": "371319"
  },
  {
    "text": "most most problems um in distributive systems evolve revolve around how we",
    "start": "371319",
    "end": "376440"
  },
  {
    "text": "manage distribute the data and uh and database replication you",
    "start": "376440",
    "end": "381720"
  },
  {
    "text": "know is it really really imposes a lot of application and app or an Ops limits",
    "start": "381720",
    "end": "388639"
  },
  {
    "text": "and and and uh you know the most common approach is to distribute the database and and and and and there are",
    "start": "388639",
    "end": "396080"
  },
  {
    "text": "sort of three different archetypes uh if we should be high level you know to to to this the first one is",
    "start": "396080",
    "end": "402800"
  },
  {
    "text": "physical replication uh sort of binary data down at the",
    "start": "402800",
    "end": "409280"
  },
  {
    "text": "infrastructure level you know this you know low level of a black box is liit inflexible you know sort of a Brute",
    "start": "409280",
    "end": "415919"
  },
  {
    "text": "Force approach it can be hard to do like things like rolling rolling up so long the second thing or the second archetype",
    "start": "415919",
    "end": "423039"
  },
  {
    "text": "is logical replication that is done at the database level you know and here you sort of replicate the DML the data",
    "start": "423039",
    "end": "429759"
  },
  {
    "text": "modification language and and one of the problems here is that you know since we don't have a",
    "start": "429759",
    "end": "435680"
  },
  {
    "text": "ddl replicated you you know we can't really replicate schema schema changes",
    "start": "435680",
    "end": "440919"
  },
  {
    "text": "like views know large object sequences you know foreign table you and and stuff",
    "start": "440919",
    "end": "446759"
  },
  {
    "text": "like that so so that leaves with like with with schema rep rep replication",
    "start": "446759",
    "end": "453080"
  },
  {
    "text": "which which you know sometimes can be hard to operate honestly and and U it's sort of it",
    "start": "453080",
    "end": "459560"
  },
  {
    "text": "sometimes you know have has a tendency to to modify application Behavior it's not it's not completely transparent it",
    "start": "459560",
    "end": "467080"
  },
  {
    "text": "can lead to to consistency conflicts and so on so in in in my experience you know",
    "start": "467080",
    "end": "472879"
  },
  {
    "text": "it's it's better to think about not Distributing the database per se you know low level down at structure level",
    "start": "472879",
    "end": "480120"
  },
  {
    "text": "but instead you know think how we write the application and write it in a way that we can distribute the data itself",
    "start": "480120",
    "end": "485680"
  },
  {
    "text": "up in the application tier and if we do this you know you know correctly um I'll talk a little bit",
    "start": "485680",
    "end": "492879"
  },
  {
    "text": "about it I don't have that much time but I'll talk a little bit about it you know it's like then we can let the in memory State you know the are your actual",
    "start": "492879",
    "end": "499440"
  },
  {
    "text": "domain model your your state in the in the actual microservices you know be the source of Truth and and uh and and then",
    "start": "499440",
    "end": "507039"
  },
  {
    "text": "you end up with a with a with a model that is where State replication and state persistence is actually",
    "start": "507039",
    "end": "512760"
  },
  {
    "text": "application and domain aware so you you don't need to map you know your your in memory State down to the actual",
    "start": "512760",
    "end": "519880"
  },
  {
    "text": "database instead you can use strong any any data structure uh uh and and and um it also",
    "start": "519880",
    "end": "527320"
  },
  {
    "text": "give makes it you know fairly easy to be to be to to to to divide and conquer you know working with smaller data sets that",
    "start": "527320",
    "end": "534320"
  },
  {
    "text": "leads to to to less contention and so on and and allows things like efficient char starting a replication and and um",
    "start": "534320",
    "end": "542399"
  },
  {
    "text": "as I as as I will talk about you know managing State you know in this way or persisten in this way up in the app tier",
    "start": "542399",
    "end": "548880"
  },
  {
    "text": "means that we can we can get lots lower latency because the data is right there",
    "start": "548880",
    "end": "554560"
  },
  {
    "text": "in your application instead of you need to do another Network up down to the database and all this go and fetch the state and when you when you're done with",
    "start": "554560",
    "end": "560560"
  },
  {
    "text": "it you always need to store it back into the database so so so uh it also helps",
    "start": "560560",
    "end": "565800"
  },
  {
    "text": "you know I think with with migrations stuff like that because everything you have you know is is is up in the app",
    "start": "565800",
    "end": "571920"
  },
  {
    "text": "tier you know in like under under the developer fingers and there's not not any mapping have to do down to the",
    "start": "571920",
    "end": "577920"
  },
  {
    "text": "database below and and in in in practice you know sort of a um a foundational s",
    "start": "577920",
    "end": "585200"
  },
  {
    "text": "sort tool or pattern here is to use event driven architecture you know that that gets us a long way you know",
    "start": "585200",
    "end": "590760"
  },
  {
    "text": "alongside things like event sourcing and so on I don't I don't have enough time to talk about these in detail here but",
    "start": "590760",
    "end": "596959"
  },
  {
    "text": "I'm just I'm just hinting at them so you know the biggest enemy of of elasticity",
    "start": "596959",
    "end": "603519"
  },
  {
    "text": "is contention you know and we really need to work hard at minimizing contention and and and um and and what I",
    "start": "603519",
    "end": "609680"
  },
  {
    "text": "say contention you I mean I mean access you know so parallel access to Shared resources in the system it's it's really",
    "start": "609680",
    "end": "616800"
  },
  {
    "text": "contention that kills scalability and also kills performance and and and be being able to be then asynchronous and",
    "start": "616800",
    "end": "623720"
  },
  {
    "text": "non-blocking using us non-blocking you know IO and so on you know that's s",
    "start": "623720",
    "end": "629320"
  },
  {
    "text": "gives the caller the option to to be able to perform other work asynchronously rather than being sort",
    "start": "629320",
    "end": "634959"
  },
  {
    "text": "blocked and waiting for resources to become available or queue up you s wait time and add weit time to this to the",
    "start": "634959",
    "end": "641720"
  },
  {
    "text": "system and that that means that we can we can be a lot more efficient in how we use resources we can be more cost",
    "start": "641720",
    "end": "647519"
  },
  {
    "text": "efficient being more energy efficient and and you know in practice it means you know it can be achieved by allowing",
    "start": "647519",
    "end": "654399"
  },
  {
    "text": "the call or to Simply put a request on the Queue and register a call back uh to be noted ified later when the result is",
    "start": "654399",
    "end": "660880"
  },
  {
    "text": "available and they return immediately after doing so you know and and sort of freeing up the thread or the resources",
    "start": "660880",
    "end": "667160"
  },
  {
    "text": "to be used by others in continue execution and then and then be called sort of called asynchronously when the",
    "start": "667160",
    "end": "672639"
  },
  {
    "text": "result arrives uh also things like you know data partitioning is extremely important here I mean being able to",
    "start": "672639",
    "end": "678519"
  },
  {
    "text": "partition your data into smaller data sets for minimizing contention and and",
    "start": "678519",
    "end": "683600"
  },
  {
    "text": "also you know I not really sharing mutable State you know freely because",
    "start": "683600",
    "end": "689000"
  },
  {
    "text": "this soon as you do that you need to introduce locks and weight times and cues and stuff like that instead share",
    "start": "689000",
    "end": "694079"
  },
  {
    "text": "immutable facts I'm going to get more into that later uh it's really you know it really",
    "start": "694079",
    "end": "700079"
  },
  {
    "text": "needs to be async and nonblocking all the way down you know so it's really the weakest link in the chain that matters",
    "start": "700079",
    "end": "707160"
  },
  {
    "text": "and there's two two there's two concepts are really important here to to be aware",
    "start": "707160",
    "end": "712240"
  },
  {
    "text": "of first we have contention you know that can be defined as the wait time waiting or queuing for shared resources",
    "start": "712240",
    "end": "718920"
  },
  {
    "text": "the second second thing uh that is also you know is important at play here is is what is called",
    "start": "718920",
    "end": "724680"
  },
  {
    "text": "coherency and that is or the delay for data to become consistent and we have",
    "start": "724680",
    "end": "730040"
  },
  {
    "text": "arm dolls law that talks about contention you know how how contention",
    "start": "730040",
    "end": "735360"
  },
  {
    "text": "affects a parallel system and how contention can sort of give diminishing returns as you add uh as you sort of uh",
    "start": "735360",
    "end": "744199"
  },
  {
    "text": "try to scale up the system as as you can see here you know the the more",
    "start": "744199",
    "end": "749480"
  },
  {
    "text": "it you know it it very very hard hits on how much speed up we have you know on",
    "start": "749480",
    "end": "756000"
  },
  {
    "text": "the vertical axis uh uh depending on on on how much uh sort paralyzation we have",
    "start": "756000",
    "end": "762800"
  },
  {
    "text": "we have in the system as we scale it out and and um but that's not the end of",
    "start": "762800",
    "end": "768000"
  },
  {
    "text": "the story we also have the universal scale scalability law which build in a ways are Builds on on armed out law by",
    "start": "768000",
    "end": "774839"
  },
  {
    "text": "adding coherency and as I said coherency can give negative results you so you",
    "start": "774839",
    "end": "780040"
  },
  {
    "text": "what we really want to achieve here is linear scalability that's the sort of the the the the this the straight line",
    "start": "780040",
    "end": "786360"
  },
  {
    "text": "there on those law as I said as as as con contention but but if you don't take",
    "start": "786360",
    "end": "791880"
  },
  {
    "text": "you know coherency into account or incoherency you know into account then then then you might miss that that that",
    "start": "791880",
    "end": "799519"
  },
  {
    "text": "is actually you know as you add resources to the system more nodes more course you can actually get negative",
    "start": "799519",
    "end": "805480"
  },
  {
    "text": "results uh so you know so this is something to really be aware of",
    "start": "805480",
    "end": "810760"
  },
  {
    "text": "um I really think this you know on a fundamental level systems need to be need to be decoupled I think we all can",
    "start": "810760",
    "end": "817160"
  },
  {
    "text": "agree with that and and they need to be decoupled you know in time that's you know decoupling systems in time is",
    "start": "817160",
    "end": "823519"
  },
  {
    "text": "really what gives us concurrency it's add sort of an asynchronous boundary and and and gives us loose coupling but we",
    "start": "823519",
    "end": "831079"
  },
  {
    "text": "also need to decouple the systems in space and decoupling in space is what gives us distribution you know is be",
    "start": "831079",
    "end": "837160"
  },
  {
    "text": "able to communicate across context across course across nodes across you know data centers clouds Etc and and and",
    "start": "837160",
    "end": "845959"
  },
  {
    "text": "and and these things really can provide the foundation for resiliency for mobility and for",
    "start": "845959",
    "end": "852320"
  },
  {
    "text": "elasticity uh you know I this might be a contentious one but but I I'm I'm I'm a",
    "start": "852320",
    "end": "857720"
  },
  {
    "text": "fir believe firm believer that you know strong consisten is the wrong default in distributed",
    "start": "857720",
    "end": "864399"
  },
  {
    "text": "systems mean we often use strong consistency just out of habit in in Ria",
    "start": "864399",
    "end": "869560"
  },
  {
    "text": "you know it's how we've always done things but it really adds a lot of contention it adds weight time it's",
    "start": "869560",
    "end": "875720"
  },
  {
    "text": "often too bristle and it's really hard to make available it's hard to make resilient as Pat Helen you know have",
    "start": "875720",
    "end": "882519"
  },
  {
    "text": "said numerous times these are actually two quotes from two different papers uh you know he he he's he said that",
    "start": "882519",
    "end": "889320"
  },
  {
    "text": "developers simply do not Implement large scalable applications assuming distributed transactions to face commit",
    "start": "889320",
    "end": "895639"
  },
  {
    "text": "is the anti- availability protocol and and when you when you think about it it's it's not really anything to be to",
    "start": "895639",
    "end": "902079"
  },
  {
    "text": "be surprised about because it's not really how the world works you know the world is inherently eventually",
    "start": "902079",
    "end": "907720"
  },
  {
    "text": "consistent you know with causality at play and pretending that is everything",
    "start": "907720",
    "end": "912959"
  },
  {
    "text": "is strongly consistent you know can sometimes makes things worse even though it is a very great developer convenience",
    "start": "912959",
    "end": "920160"
  },
  {
    "text": "it is a leaky abstraction you know don't get me wrong there's nothing wrong with strong consistency you know where it",
    "start": "920160",
    "end": "925800"
  },
  {
    "text": "works is just it's like magic you know it it it removes so many so problems for",
    "start": "925800",
    "end": "932360"
  },
  {
    "text": "us but I think it's a wrong default and it should be used like carefully and deliberately where you absolutely need",
    "start": "932360",
    "end": "939120"
  },
  {
    "text": "it you know so so you know to to to sum things up don't carry around more",
    "start": "939120",
    "end": "945319"
  },
  {
    "text": "guarantees than you than than you need you know since every guarantee that you add to your system has a price it has a",
    "start": "945319",
    "end": "952120"
  },
  {
    "text": "price in terms of scalability in terms of resilience reliability availability maintainability and so on so I I think",
    "start": "952120",
    "end": "960199"
  },
  {
    "text": "it's better to start with the weakest guarantees possible and then analyze the system and then thinking okay where do I",
    "start": "960199",
    "end": "966800"
  },
  {
    "text": "need to to to layer in stronger guarantees and do it in those places not",
    "start": "966800",
    "end": "972160"
  },
  {
    "text": "just as a like wet blanket across your whole system so to speak the truth is",
    "start": "972160",
    "end": "977720"
  },
  {
    "text": "actually that you know a distributed system is really an never ending stream towards convergence you know it's always",
    "start": "977720",
    "end": "985040"
  },
  {
    "text": "in the process of convergence but it never ever reaches the state as in final",
    "start": "985040",
    "end": "991680"
  },
  {
    "text": "state of convergence so so we can assume that we will never ever reach it if we",
    "start": "991680",
    "end": "997000"
  },
  {
    "text": "do you know it's usually just for brief moments in time and then it's back to sort of to to to the process of",
    "start": "997000",
    "end": "1003199"
  },
  {
    "text": "converence so the system in in distribut system is really constantly in motion",
    "start": "1003199",
    "end": "1008680"
  },
  {
    "text": "it's constantly in a state of change it's always trying to catch up to whatever happens over there or over",
    "start": "1008680",
    "end": "1014720"
  },
  {
    "text": "there and and there really know now you you know it's really no globally",
    "start": "1014720",
    "end": "1020720"
  },
  {
    "text": "consistent now no no globally consistent present you know it's as expression goes",
    "start": "1020720",
    "end": "1026199"
  },
  {
    "text": "it's all in the in the eye of of the beholder you know present and and the and now is really",
    "start": "1026199",
    "end": "1032880"
  },
  {
    "text": "subjective so so what I think we need to do is we need to think in terms of consistency boundaries decompose the",
    "start": "1032880",
    "end": "1038839"
  },
  {
    "text": "system into these small islands of strong consistency in sort of a river of constant change and change and",
    "start": "1038839",
    "end": "1045720"
  },
  {
    "text": "uncertainty and how do we do that then you know how can how can we then craft or these autonomous islands of",
    "start": "1045720",
    "end": "1052440"
  },
  {
    "text": "determinism and strong consistent in this s River of of uncertainty uh you know if we're able to",
    "start": "1052440",
    "end": "1059520"
  },
  {
    "text": "to to do that you know we we can actually live happily uh forever you",
    "start": "1059520",
    "end": "1064720"
  },
  {
    "text": "know under the illusion that time is absolute that there is a single president there is a single now and that",
    "start": "1064720",
    "end": "1070360"
  },
  {
    "text": "the word is deterministic because we we boxed that in in in into this island",
    "start": "1070360",
    "end": "1075520"
  },
  {
    "text": "within our consistency boundary we can really have this Atomic view on the state uh but it requires that we own our",
    "start": "1075520",
    "end": "1083320"
  },
  {
    "text": "data exclusively each service each component whatever you know you you you",
    "start": "1083320",
    "end": "1088760"
  },
  {
    "text": "treat as your as your consistency boundary really need to be to to own",
    "start": "1088760",
    "end": "1094159"
  },
  {
    "text": "this data exclusively and and you know to model this you know you know we can",
    "start": "1094159",
    "end": "1099799"
  },
  {
    "text": "we can work with bounded context micros Services of course entities is is is is",
    "start": "1099799",
    "end": "1105880"
  },
  {
    "text": "usually the best way to model these things and then map very well to actors you know that that I've been using for",
    "start": "1105880",
    "end": "1111520"
  },
  {
    "text": "for a decade now for these type of things and and thing is that if we're not if we then are able to craft these",
    "start": "1111520",
    "end": "1118679"
  },
  {
    "text": "of these units of consistency between them you know we we have to rely on on",
    "start": "1118679",
    "end": "1124360"
  },
  {
    "text": "on eventual consistency and you know don't be surprised it's really how how the world works as I said I don't think",
    "start": "1124360",
    "end": "1129559"
  },
  {
    "text": "we should fight reality we should embrace it and that can liberate ourselves in how we Design Systems better and you know patellen defines",
    "start": "1129559",
    "end": "1137000"
  },
  {
    "text": "this really nice conceptual model for how to think about this how to think about consistency in in a Distributive",
    "start": "1137000",
    "end": "1142280"
  },
  {
    "text": "system he talks about inside data as our as our current present you know our",
    "start": "1142280",
    "end": "1147960"
  },
  {
    "text": "current local present that's our state that's the state we have inside our consistency boundary then we have",
    "start": "1147960",
    "end": "1154280"
  },
  {
    "text": "outside data that that it calls Blast from the Past you know that's that's are",
    "start": "1154280",
    "end": "1159760"
  },
  {
    "text": "facts you know arriving as events into our system or and that we are emitting out to the world uh you know if you if",
    "start": "1159760",
    "end": "1168120"
  },
  {
    "text": "you're able to to to to to do that you can really work with values between these these uh uh consistency boundaries",
    "start": "1168120",
    "end": "1176280"
  },
  {
    "text": "which gives other components you know a really good solid foundation for reasoning about what's going on because",
    "start": "1176280",
    "end": "1183120"
  },
  {
    "text": "immutability you know is is is name of the game there facts don't",
    "start": "1183120",
    "end": "1188159"
  },
  {
    "text": "change and and and and and between Services you know he calls that hope for",
    "start": "1188159",
    "end": "1193520"
  },
  {
    "text": "the future which is almost poetic in a way uh that's our commands and request you know that that that's someone asking",
    "start": "1193520",
    "end": "1200559"
  },
  {
    "text": "someone else to do something and and and you know so why does he call why does he",
    "start": "1200559",
    "end": "1205960"
  },
  {
    "text": "call it hope you know I think it's I think it's really around that you know there's no promises here you know com",
    "start": "1205960",
    "end": "1212240"
  },
  {
    "text": "you know commands and requests they can get dropped content can get get garbled on the on the on the network they can",
    "start": "1212240",
    "end": "1219159"
  },
  {
    "text": "even be you know rejected by the receiver because they're invalid or or or",
    "start": "1219159",
    "end": "1225120"
  },
  {
    "text": "whatever so you know shared state so shared mutable State as as as as I",
    "start": "1225120",
    "end": "1231600"
  },
  {
    "text": "talked about is unfortunately still the norm and and the reason why it's why it's why it's problematic is that update",
    "start": "1231600",
    "end": "1237720"
  },
  {
    "text": "in place you know you know you know can really get us into trouble especially if",
    "start": "1237720",
    "end": "1243280"
  },
  {
    "text": "that's if if this mutable state is is is is globally shared because it needs to be guarded and and and so on and things",
    "start": "1243280",
    "end": "1250159"
  },
  {
    "text": "can just can just you can receive an object and you look at it and it's one value and the next second is another one",
    "start": "1250159",
    "end": "1255360"
  },
  {
    "text": "you know it's really hard to to do reasoning on this on on on such a fragile foundation so so and it leads to",
    "start": "1255360",
    "end": "1262760"
  },
  {
    "text": "really increased contention coordination way time and so on so so you know I really think we we need to contain",
    "start": "1262760",
    "end": "1269000"
  },
  {
    "text": "mutable State and and the best way to think about it is that we need to make it nonobservable to to the rest of the",
    "start": "1269000",
    "end": "1275120"
  },
  {
    "text": "world you know fully contained in in this Safe Haven you know of of of strong",
    "start": "1275120",
    "end": "1280279"
  },
  {
    "text": "consistency but only used for local computations so when you're done with",
    "start": "1280279",
    "end": "1287120"
  },
  {
    "text": "your processing then you know using mutable state in your business logic in the in your component and you're ready",
    "start": "1287120",
    "end": "1293039"
  },
  {
    "text": "to tell the world about the results then we can you know take the result we create an immutable value based on that",
    "start": "1293039",
    "end": "1300279"
  },
  {
    "text": "and then we publish that as a fact for the outside world to act on or to or or",
    "start": "1300279",
    "end": "1306559"
  },
  {
    "text": "or or we feel if we if we store it to to to an A L to an event log for example",
    "start": "1306559",
    "end": "1312159"
  },
  {
    "text": "then you have a full like the the full history in you know of of the all the",
    "start": "1312159",
    "end": "1318760"
  },
  {
    "text": "state changes that ever happened to that component in order so it can be replayed you know it can it can it can be",
    "start": "1318760",
    "end": "1324279"
  },
  {
    "text": "replayed for replication for failure recovery and so on and as I said you",
    "start": "1324279",
    "end": "1329720"
  },
  {
    "text": "know one of the best things with this is that then others can can have like can base reasoning on stable values that",
    "start": "1329720",
    "end": "1335919"
  },
  {
    "text": "that simply don't just change and and good tools for this as I said is like actors entities eventory architecture",
    "start": "1335919",
    "end": "1342320"
  },
  {
    "text": "event sourcing cqrs and and so on uh another very",
    "start": "1342320",
    "end": "1347720"
  },
  {
    "text": "important you know piece in the pule is is location transparency you know and",
    "start": "1347720",
    "end": "1352799"
  },
  {
    "text": "and async message passing in in my op in my sort of experience uh it gives us a",
    "start": "1352799",
    "end": "1358799"
  },
  {
    "text": "one communication abstraction across all dimensions of scale and and and and what",
    "start": "1358799",
    "end": "1364000"
  },
  {
    "text": "I mean by that yeah we have one sort of programming model one way of doing communication with unified semantics",
    "start": "1364000",
    "end": "1370760"
  },
  {
    "text": "regardless how the system is currently deployed regardless of which which which topology it it currently has which",
    "start": "1370760",
    "end": "1377039"
  },
  {
    "text": "actually can can change so instead of relying on different tools and semantics for for different levels of scale",
    "start": "1377039",
    "end": "1383200"
  },
  {
    "text": "meaning if we're working core to core or container to container server to server data center to Data Center you know uh",
    "start": "1383200",
    "end": "1390679"
  },
  {
    "text": "uh you know we can we can we can U like for example using callbacks for a single core for example you know or we use",
    "start": "1390679",
    "end": "1397360"
  },
  {
    "text": "threads of locks across course so we use messaging or some pops up across course and data center instead we can sort of",
    "start": "1397360",
    "end": "1404440"
  },
  {
    "text": "if we use async message passing you know we get location transparency as a",
    "start": "1404440",
    "end": "1410720"
  },
  {
    "text": "unifier of all of these sort of dimensions of scale from core socket to CPU to container to server to Rack to",
    "start": "1410720",
    "end": "1416679"
  },
  {
    "text": "Data Center to region Global it all looks and feels and behaves the same according to to to the to the same",
    "start": "1416679",
    "end": "1423919"
  },
  {
    "text": "semantics so another really important thing is that we really need to distribute data and logic together and",
    "start": "1423919",
    "end": "1430200"
  },
  {
    "text": "and here I'm going to to talk a little bit our experiences you know designing AKA as sort of a template how how how it",
    "start": "1430200",
    "end": "1436240"
  },
  {
    "text": "all can be put together so let's us learn from you know thousands of of of of of users um that we've been helping",
    "start": "1436240",
    "end": "1444200"
  },
  {
    "text": "so there are S three important principles here that you should always bundle State and logic so sort State",
    "start": "1444200",
    "end": "1449960"
  },
  {
    "text": "should be embedded sort in the application sort of in a sort of in memory database and and and and you know",
    "start": "1449960",
    "end": "1456000"
  },
  {
    "text": "that sounds more overkilled than it is because these right patterns like event sourcing and and and so on can really",
    "start": "1456000",
    "end": "1461720"
  },
  {
    "text": "give you that the the benefit of this is like the application then is a system",
    "start": "1461720",
    "end": "1467320"
  },
  {
    "text": "record not the database and you distribute the data and not the database you know and these things map if you",
    "start": "1467320",
    "end": "1473919"
  },
  {
    "text": "have logic and state you know fully fully fully coupled you know in or sort",
    "start": "1473919",
    "end": "1479480"
  },
  {
    "text": "or bundled together it Maps very well to actors to microservices and so on and",
    "start": "1479480",
    "end": "1484760"
  },
  {
    "text": "one of the really good things is that that you can run it any any anywhere since it's exposed to the world through",
    "start": "1484760",
    "end": "1490480"
  },
  {
    "text": "location transparency you know it can actually be moved out you know to the end users running in the cloud or even",
    "start": "1490480",
    "end": "1496440"
  },
  {
    "text": "even out at the edge for extremely low latency and and and and you get sort of resilience almost built in because",
    "start": "1496440",
    "end": "1502919"
  },
  {
    "text": "because if you if you move the component out to the outside to the to the furthest out Edge you know you can",
    "start": "1502919",
    "end": "1509039"
  },
  {
    "text": "actually lose the connection to the to the backend cloud and still continue to to function as nothing happen because",
    "start": "1509039",
    "end": "1514720"
  },
  {
    "text": "you have the state you have the processing and you have the user that you want to serve right at the same physical location then then then as the",
    "start": "1514720",
    "end": "1522919"
  },
  {
    "text": "if if the if the connection to the to the backend cloud is restored you you can just start making use of that for",
    "start": "1522919",
    "end": "1528840"
  },
  {
    "text": "for for for backup propagation for communicating with peers for replication and stuff like that the other thing is",
    "start": "1528840",
    "end": "1535559"
  },
  {
    "text": "that that I found really important is like no node should really be be special they should all be masterless",
    "start": "1535559",
    "end": "1541000"
  },
  {
    "text": "peer-to-peer communication and every node really needs to be able to serve serve both reads and writes you know",
    "start": "1541000",
    "end": "1547640"
  },
  {
    "text": "that eliminates bottleneck and performance degradation as as you scale this system",
    "start": "1547640",
    "end": "1553360"
  },
  {
    "text": "out uh and F and finally you know you know being able to have masterless cloud",
    "start": "1553360",
    "end": "1558399"
  },
  {
    "text": "to Cloud replication you know being able to to have a system that is where have",
    "start": "1558399",
    "end": "1563520"
  },
  {
    "text": "homogeneous execution across heterogeneous locations being able to to scale replicas you know across you know",
    "start": "1563520",
    "end": "1571240"
  },
  {
    "text": "all these all these dimensions of scale that I that that that I talked about and and and you know we we provide in the",
    "start": "1571240",
    "end": "1578399"
  },
  {
    "text": "the backbone for that with with aaer distributed data mesh that that sits",
    "start": "1578399",
    "end": "1583600"
  },
  {
    "text": "under right underneath your your application above the infrastructure and doing all the magic",
    "start": "1583600",
    "end": "1589880"
  },
  {
    "text": "so how are we implementing this yeah a few a few important patterns here is is is like data data sharding for example",
    "start": "1589880",
    "end": "1596559"
  },
  {
    "text": "you know each service here is s cluster from within where we have sort of a and sort of forming an EP like like a like a",
    "start": "1596559",
    "end": "1603919"
  },
  {
    "text": "noing using epidemic gossiping and and this means that nodes can join and leave as needed for for truly transparent",
    "start": "1603919",
    "end": "1611039"
  },
  {
    "text": "scalability and we use consistent hashing here to sort of to to to to sort of spread out all the data across",
    "start": "1611039",
    "end": "1617360"
  },
  {
    "text": "buckets in in each one of these nodes and and um and if there's a miss you",
    "start": "1617360",
    "end": "1623200"
  },
  {
    "text": "know request miss you know then was do order ring to to the correct instance",
    "start": "1623200",
    "end": "1629240"
  },
  {
    "text": "another very important you know thing is that since node can can come and go and S of this this node ring can can can",
    "start": "1629240",
    "end": "1636200"
  },
  {
    "text": "sort of grow and Shrink it's extremely important to be able to do data rebalancing be able to be to to to to to",
    "start": "1636200",
    "end": "1643520"
  },
  {
    "text": "sort of re rebalance the data across all the current available nodes",
    "start": "1643520",
    "end": "1649080"
  },
  {
    "text": "and finally a very important thing is also that we we separate like queries",
    "start": "1649080",
    "end": "1654520"
  },
  {
    "text": "from rights meaning reads from rights this means that we can that that that the system can rightfully uncontended",
    "start": "1654520",
    "end": "1661320"
  },
  {
    "text": "you know down to the event log storing all the events in the system you really employing the single writer principle",
    "start": "1661320",
    "end": "1668640"
  },
  {
    "text": "and and then you can we can scale the reads you know separately from the from the rights you know this is really",
    "start": "1668640",
    "end": "1674760"
  },
  {
    "text": "important because because you know sometimes you have a right mostly syst and sometimes you have a read most system and bundling it all together into",
    "start": "1674760",
    "end": "1681760"
  },
  {
    "text": "one single database can make can make it hard to to know like optimize your resources and and and it",
    "start": "1681760",
    "end": "1689039"
  },
  {
    "text": "also like sort of as a as a as a nice side effect of this it also supports multiple quer quer query model since all",
    "start": "1689039",
    "end": "1696120"
  },
  {
    "text": "the changes are then are replicated over to to to the query side on the side that",
    "start": "1696120",
    "end": "1701480"
  },
  {
    "text": "means that you can have multiple subscribers to that to to those change sets so to speak to to these facts",
    "start": "1701480",
    "end": "1709360"
  },
  {
    "text": "flowing and and U in practice you can have a graph database you know you might",
    "start": "1709360",
    "end": "1714840"
  },
  {
    "text": "you might want to put things in in into post res for back offs you might want to push things into spark for for for more",
    "start": "1714840",
    "end": "1721399"
  },
  {
    "text": "thorough processing and so on and they can all run in parallel uh uh you know without really really affecting to the",
    "start": "1721399",
    "end": "1728679"
  },
  {
    "text": "right side at all you know this pattern is called C cqrs and is something that is is that is quite",
    "start": "1728679",
    "end": "1734720"
  },
  {
    "text": "useful uh you know I think Ops elasticity is also equally important to",
    "start": "1734720",
    "end": "1739799"
  },
  {
    "text": "workload as elasticity as I as I talked about in the beginning you know being able to to have Ops you know migrate and",
    "start": "1739799",
    "end": "1747960"
  },
  {
    "text": "upgrade without without down time and and to support this you know we have through three different replication",
    "start": "1747960",
    "end": "1753080"
  },
  {
    "text": "schemes in AKA we have was s pinned for for for ensuring data sovereignty we",
    "start": "1753080",
    "end": "1758399"
  },
  {
    "text": "have multiplay with replicated read for Global ha that's sort of active passive and we have multiplace replicated right",
    "start": "1758399",
    "end": "1765039"
  },
  {
    "text": "for for like really continuous landbased application where all where all replicas are fully active serving both reads and",
    "start": "1765039",
    "end": "1772360"
  },
  {
    "text": "and rights and this and these different models really means that you that that that Ops can can can can can get a lot",
    "start": "1772360",
    "end": "1779360"
  },
  {
    "text": "of flexibility of of of managing the application without any downtime you know changing the application the data",
    "start": "1779360",
    "end": "1784840"
  },
  {
    "text": "Chang the topology even moving from single region to multi to multi region",
    "start": "1784840",
    "end": "1790200"
  },
  {
    "text": "you know things like version and schema changes and so on and even update the underlying infrastructure because that's",
    "start": "1790200",
    "end": "1795840"
  },
  {
    "text": "completely decoupled to for from how the application is is is doing all of all of",
    "start": "1795840",
    "end": "1801360"
  },
  {
    "text": "this so so you know to sum to to sum things up you know using these",
    "start": "1801360",
    "end": "1806760"
  },
  {
    "text": "principles aka's really been able to to to support elastically completely transparently across this whole",
    "start": "1806760",
    "end": "1812919"
  },
  {
    "text": "application stack like from from from bottom up you scaling Compu up and down we usually like actors and streaming for",
    "start": "1812919",
    "end": "1819360"
  },
  {
    "text": "the stuff like that scaling data you know automatic rebalancing or replication of data using things like",
    "start": "1819360",
    "end": "1825360"
  },
  {
    "text": "event sourcing say streaming projections like s materialized views uh on the on",
    "start": "1825360",
    "end": "1830600"
  },
  {
    "text": "the on the on the on the app level you know we have S masterless clustering as I talked about you know with with",
    "start": "1830600",
    "end": "1836279"
  },
  {
    "text": "completely you know every all all replicas will been able to to serve",
    "start": "1836279",
    "end": "1841519"
  },
  {
    "text": "those rights and reads and on the network level you know being able to to to stretch this out geographically",
    "start": "1841519",
    "end": "1847840"
  },
  {
    "text": "across regions across multicloud you know all provided you know by this by this data fabric uh and this sort of",
    "start": "1847840",
    "end": "1855320"
  },
  {
    "text": "single unified programming model that can really help you scale across all these abstractions you know so so uh",
    "start": "1855320",
    "end": "1864480"
  },
  {
    "text": "there's some stats there you know as well I'm not going to go into those but but but but I just want to you know",
    "start": "1864480",
    "end": "1869559"
  },
  {
    "text": "close with you know these design principles uh that I just talked about",
    "start": "1869559",
    "end": "1874799"
  },
  {
    "text": "can really in my experience give you a ton for your for your work you know really really really amazing work so",
    "start": "1874799",
    "end": "1882600"
  },
  {
    "text": "really yield amazing results uh you know things like you know removing all the barriers to elasticity you know shock",
    "start": "1882600",
    "end": "1888080"
  },
  {
    "text": "proof resilience and easy way to manage data and Cloud uh uh sovereignty you",
    "start": "1888080",
    "end": "1893320"
  },
  {
    "text": "know that that many needs now with gdpr and other things look and really being able to serve your clients with this",
    "start": "1893320",
    "end": "1899200"
  },
  {
    "text": "with the small with the shortest response time you know with the highest throughput",
    "start": "1899200",
    "end": "1905679"
  }
]