[
  {
    "text": "all right I'm gonna get started people file in that's that's cool there's a bunch of stuff to get through so thanks",
    "start": "0",
    "end": "6359"
  },
  {
    "text": "for coming this is the deep dive session for the open policy agent project I'm Tauron I'm one of the cofounders of",
    "start": "6359",
    "end": "14009"
  },
  {
    "text": "the project and one of the core contributors to it today I'm also an engineer at steerer steer is",
    "start": "14009",
    "end": "19109"
  },
  {
    "text": "the one of the companies that supports the project I'm actually I'm based in NSF and so if you want to meet up or",
    "start": "19109",
    "end": "25769"
  },
  {
    "text": "something like that and talk about policy or authorization or OPA feel free to just reach out reach out to me that's my twitter handle you can get",
    "start": "25769",
    "end": "31920"
  },
  {
    "text": "ahold of me there and the the Unicode for the Canadian flag and the rain",
    "start": "31920",
    "end": "37739"
  },
  {
    "text": "droplet didn't seem to show up properly but I'm happy to be in Seattle and see some rain for once because there are no",
    "start": "37739",
    "end": "43020"
  },
  {
    "text": "seasons in the Bay Area so anyway what I'm gonna do today is kind of jump into",
    "start": "43020",
    "end": "48719"
  },
  {
    "text": "how opal works and to do that what I want to do is just set up a little bit of an example so this is like a",
    "start": "48719",
    "end": "54059"
  },
  {
    "text": "hypothetical architecture for an online retailer that sells pet supplies or things like dog food to people over the",
    "start": "54059",
    "end": "60390"
  },
  {
    "text": "internet and so there are kind of two personas that are that are involved in this so there's there's Bob he's a",
    "start": "60390",
    "end": "65939"
  },
  {
    "text": "customer he likes to login to pets calm and purchased dog food and cat food and so on and then there's Alice and Alice",
    "start": "65939",
    "end": "72750"
  },
  {
    "text": "is a customer service rep she kind of answers questions that bob has and she also debugs problems in the system when",
    "start": "72750",
    "end": "80070"
  },
  {
    "text": "Bob can't order pet food and so we've built this backend for pets comm",
    "start": "80070",
    "end": "85430"
  },
  {
    "text": "following you know a micro service architecture so we have a service that handles payments and a service that handles user accounts and and promotions",
    "start": "85430",
    "end": "92729"
  },
  {
    "text": "and notifications and all these things and we we run our own database we run Postgres for account data and promotion",
    "start": "92729",
    "end": "98250"
  },
  {
    "text": "data and we also leverage some cloud services like s3 and you know notification services and so on and so",
    "start": "98250",
    "end": "104610"
  },
  {
    "text": "sometimes Alice has to you know access these services to figure out what's going on and to you know handle customer",
    "start": "104610",
    "end": "110759"
  },
  {
    "text": "queries and the problem with that is that today she has full access in the system right so she can just open up her",
    "start": "110759",
    "end": "117450"
  },
  {
    "text": "terminal and start executing API requests against payments or accounts and whatnot there's like no protection",
    "start": "117450",
    "end": "123420"
  },
  {
    "text": "in place they do authenticate those requests they do check that alice is who she says she is but there are no",
    "start": "123420",
    "end": "129030"
  },
  {
    "text": "controls over what Alice can actually do in the system and so this is not great right like if Alice",
    "start": "129030",
    "end": "134799"
  },
  {
    "text": "gets disgruntled and she decides to take down the payment service then we're no longer selling pet food online and our",
    "start": "134799",
    "end": "140769"
  },
  {
    "text": "customers are unhappy also if she decides to like look up where Bob lives she can just do that she can go into the",
    "start": "140769",
    "end": "146739"
  },
  {
    "text": "pet detour the account service and find out all of his personally identifiable information right again this is not",
    "start": "146739",
    "end": "152349"
  },
  {
    "text": "ideal so what we want to do is kind of put some guardrails into the system to",
    "start": "152349",
    "end": "157480"
  },
  {
    "text": "prevent these kinds of things from happening right so this is like an example of a policy that people might want to enforce right they want to say",
    "start": "157480",
    "end": "163629"
  },
  {
    "text": "that support staff can view customer data if they're assigned to an open ticket for that customer right so this",
    "start": "163629",
    "end": "169660"
  },
  {
    "text": "helps us put some guardrail in place that you know Alice can still do her job she can still support Bob but she can't",
    "start": "169660",
    "end": "175840"
  },
  {
    "text": "you know do anything right so we've got a little bit of protection in place now in order to do that what we have to do",
    "start": "175840",
    "end": "182230"
  },
  {
    "text": "is go into all of these different components these parts of the system these services and basically implement authorization right we need to write",
    "start": "182230",
    "end": "188140"
  },
  {
    "text": "code that checks whether alice should be able to do the thing she's asking to do and so you might decide to do that by",
    "start": "188140",
    "end": "195459"
  },
  {
    "text": "just writing you know code you might go to the payment service which is written in Python and add the check there and the account service that's written in",
    "start": "195459",
    "end": "201310"
  },
  {
    "text": "Java and add the check there and so on and so forth right the problem with that approach is that it raises a number of",
    "start": "201310",
    "end": "207459"
  },
  {
    "text": "questions right so what happens when the policy changes right what happens when InfoSec or compliance or the legal",
    "start": "207459",
    "end": "213819"
  },
  {
    "text": "department comes along and they say now you have to check you know the geographic region that alice is connecting from or you need to check the",
    "start": "213819",
    "end": "219940"
  },
  {
    "text": "device that she's connecting on or you need to do something based on the current time of day like she shouldn't be looking at Bob's account outside of",
    "start": "219940",
    "end": "225639"
  },
  {
    "text": "work hours right so how do you handle those kinds of changes to the policy moreover what happens if bob says that",
    "start": "225639",
    "end": "231400"
  },
  {
    "text": "he wants to have some kind of control over the permissions that are granted to his data right how do you delegate control over the policy to your",
    "start": "231400",
    "end": "238569"
  },
  {
    "text": "end-users how do you roll out policy changes when they need to get updated how do you leverage external context how",
    "start": "238569",
    "end": "243940"
  },
  {
    "text": "you pull in data from an external data source like a you know a ticketing system or page your duty or you know ad",
    "start": "243940",
    "end": "249010"
  },
  {
    "text": "and so on right but then there are even more fundamental problems so for example how do you test",
    "start": "249010",
    "end": "254139"
  },
  {
    "text": "that your policies are actually implemented correctly right if you have hundreds of services written in dozens of languages using all",
    "start": "254139",
    "end": "260650"
  },
  {
    "text": "kinds of different protocols running in containers and VMs and bare-metal and server lists and whatever",
    "start": "260650",
    "end": "265910"
  },
  {
    "text": "how do you actually know that you've implemented this policy correctly across this wide range of Technology and so",
    "start": "265910",
    "end": "273140"
  },
  {
    "text": "these are some of the problems that we set out to help solve when we started the project so the open policy agent or OPA as we call it is a policy engine and",
    "start": "273140",
    "end": "280220"
  },
  {
    "text": "what that means is that you can take OPA and you can use it to help unify policy enforcement across a wide range of",
    "start": "280220",
    "end": "286820"
  },
  {
    "text": "technology so the goal of the project is a unified policy enforcement at in any service in any system at any layer of",
    "start": "286820",
    "end": "293690"
  },
  {
    "text": "the stack and so we started the project in 2016 and today three years later we",
    "start": "293690",
    "end": "298850"
  },
  {
    "text": "have quite a few people using the project companies like Netflix chef Medallia State Street Intuit and Capital",
    "start": "298850",
    "end": "304760"
  },
  {
    "text": "One talked yesterday at the intro session about how they're doing admission control in kubernetes with OPA oh and so we have all these companies",
    "start": "304760",
    "end": "310580"
  },
  {
    "text": "using OPA for a variety of different use cases like admission control API authorization with you know ackles and",
    "start": "310580",
    "end": "316790"
  },
  {
    "text": "role based access control and I am and a vac as well as other use cases like risk management on infrastructure data",
    "start": "316790",
    "end": "321950"
  },
  {
    "text": "protection and more so how does OPA you know actually work how do we how do we",
    "start": "321950",
    "end": "328220"
  },
  {
    "text": "achieve all of this well at the core of OPA there's this idea that policy",
    "start": "328220",
    "end": "334430"
  },
  {
    "text": "decision-making should be decoupled from policy enforcement ok so if we were",
    "start": "334430",
    "end": "339530"
  },
  {
    "text": "gonna go build the account service we would have to implement an API right that allows people to view you know user",
    "start": "339530",
    "end": "346340"
  },
  {
    "text": "account information and so if you wanted to look up the account information for Bob you would do a get on slash accounts",
    "start": "346340",
    "end": "351530"
  },
  {
    "text": "slash Bob and then you provide your credentials now when that happen when that request comes in to the account",
    "start": "351530",
    "end": "357050"
  },
  {
    "text": "service it has to make a decision about whether or not to allow or deny the request and so when you use open what",
    "start": "357050",
    "end": "362300"
  },
  {
    "text": "you're doing is you're offloading that decision-making process to to OPA to a dedicated engine and so the way this",
    "start": "362300",
    "end": "368540"
  },
  {
    "text": "works is that the account service would execute a query and in that query it would supply a bunch of attributes so",
    "start": "368540",
    "end": "373640"
  },
  {
    "text": "it's gonna supply things like the method and the path and the you know the authenticated user that's making the",
    "start": "373640",
    "end": "378800"
  },
  {
    "text": "request and then opens gonna take those attributes and it's gonna evaluate them against the policy and the data that it",
    "start": "378800",
    "end": "384890"
  },
  {
    "text": "has access to in order to produce a decision like allow or deny which here we've represented is true or false and",
    "start": "384890",
    "end": "390560"
  },
  {
    "text": "then that decision gets sent back to the service in the response and the service can enforce it so if it wasn't allow it",
    "start": "390560",
    "end": "395960"
  },
  {
    "text": "would continue processing the request normally if it was a deny that it would reject the request right so this is this is it",
    "start": "395960",
    "end": "401280"
  },
  {
    "text": "this is at the fundamental level this is what oppa is helping you do now it's important to keep in mind here that the",
    "start": "401280",
    "end": "406980"
  },
  {
    "text": "service can be any number of different kinds of you know services or components or parts of the stack right so it could be a container Orchestrator like",
    "start": "406980",
    "end": "413520"
  },
  {
    "text": "kubernetes it could be an api gateway like kong it could be sto envoy it could",
    "start": "413520",
    "end": "418980"
  },
  {
    "text": "be Linux Pam at the host level right protecting SSH and sudo access on the machines or it could be something around",
    "start": "418980",
    "end": "424770"
  },
  {
    "text": "you know message broker or a database or something like that right so these are actually all examples of projects and",
    "start": "424770",
    "end": "430530"
  },
  {
    "text": "services that we have integrations with today now that's why we call it general purpose now in order to make that happen",
    "start": "430530",
    "end": "436950"
  },
  {
    "text": "in order to realize this goal we made certain design decisions when we started the project and one of the fundamental",
    "start": "436950",
    "end": "442380"
  },
  {
    "text": "design decisions was that the attributes that you provide to OPA can actually be arbitrary JSON data so you can provide",
    "start": "442380",
    "end": "448770"
  },
  {
    "text": "arbitrary or any JSON value to OPA when you execute a policy query",
    "start": "448770",
    "end": "453890"
  },
  {
    "text": "similarly the decisions that OPA generates can be arbitrary or and you can generate any JSON value from your",
    "start": "453890",
    "end": "459810"
  },
  {
    "text": "policies okay so in a simple authorization case you might generate you know allow or deny represent that",
    "start": "459810",
    "end": "465960"
  },
  {
    "text": "it's true or false but in like an admission control use case you might need to generate like a complex structured object that represents the",
    "start": "465960",
    "end": "472080"
  },
  {
    "text": "admission webhook response now obviously the policy needs to be",
    "start": "472080",
    "end": "477930"
  },
  {
    "text": "able to apply meaning to the input the attributes that are coming in it needs to know that that input is a pod spec or a deployment or an API or attributes",
    "start": "477930",
    "end": "485130"
  },
  {
    "text": "representing an API request and similarly the service needs to know how to interpret the result meaning like",
    "start": "485130",
    "end": "491280"
  },
  {
    "text": "true maps to allow and false maps to deny but on its own OPA doesn't really care all it sees is JSON coming in JSON",
    "start": "491280",
    "end": "499050"
  },
  {
    "text": "being evaluated and JSON going back ok so let's take a look at how we would",
    "start": "499050",
    "end": "505350"
  },
  {
    "text": "actually implement one of these policies for pets comm so what we want to do is say that users should be allowed to view",
    "start": "505350",
    "end": "511500"
  },
  {
    "text": "their own accounts and secondly that support should be allowed to view accounts if they're assigned to an open",
    "start": "511500",
    "end": "517020"
  },
  {
    "text": "ticket on that account ok so what I'm gonna do here is switch over to my BS",
    "start": "517020",
    "end": "522930"
  },
  {
    "text": "code IDE and I have a policy here that I've written in opus policy language so",
    "start": "522930",
    "end": "529560"
  },
  {
    "text": "this is an example of a policy written in Rago which is a purpose-built declarative language for answering the kinds of",
    "start": "529560",
    "end": "535520"
  },
  {
    "text": "questions that you have to address all the time when you're working with policy so it's really good at answering questions like can this user perform",
    "start": "535520",
    "end": "541610"
  },
  {
    "text": "this action on this resource and so in this case we basically created two rules to codify that high-level policy so the",
    "start": "541610",
    "end": "548510"
  },
  {
    "text": "first rule basically allows customers to access their own accounts and the second rule allows support to access the",
    "start": "548510",
    "end": "554390"
  },
  {
    "text": "accounts of customers that they're assisting so the way that you can kind",
    "start": "554390",
    "end": "560000"
  },
  {
    "text": "of understand this first rule is as follows so allow is true if input method",
    "start": "560000",
    "end": "565070"
  },
  {
    "text": "matches get an input path matches accounts user name and input subject",
    "start": "565070",
    "end": "571370"
  },
  {
    "text": "user matches user name so in order for allowed to be true all of the statements",
    "start": "571370",
    "end": "576830"
  },
  {
    "text": "in the body need to be true okay so opens gonna basically and those expressions together in order to decide whether or not the request should be",
    "start": "576830",
    "end": "582230"
  },
  {
    "text": "allowed the second rule is is similar it says allow is true if input method matches get an input path matches",
    "start": "582230",
    "end": "589580"
  },
  {
    "text": "accounts user name and input subject groups contains customer service and input subject user matches tickets of",
    "start": "589580",
    "end": "597140"
  },
  {
    "text": "user name of underscore of assignee so again the statements and the bodies of",
    "start": "597140",
    "end": "602779"
  },
  {
    "text": "the rules get ANDed together and then in this case if either of the allow rules were true then the request",
    "start": "602779",
    "end": "608209"
  },
  {
    "text": "will be allowed if neither of them matched then the request would be denied now there are a couple interesting",
    "start": "608209",
    "end": "614690"
  },
  {
    "text": "things going on inside of this policy and I'm gonna kind of dive into them so the first thing that's kind of interesting is this last line in the",
    "start": "614690",
    "end": "621829"
  },
  {
    "text": "second rule input subject user must match tickets of user name of underscore of assignee in this case what that's",
    "start": "621829",
    "end": "631339"
  },
  {
    "text": "doing is it's looking up context that would be cashed inside of OPA that represents the open tickets in the",
    "start": "631339",
    "end": "637700"
  },
  {
    "text": "system and so I've got some data here some JSON data and this would just basically be loaded into OPA so you can",
    "start": "637700",
    "end": "645500"
  },
  {
    "text": "see it's just JSON it's organized hierarchically it basically sets up a mapping of users to open tickets for",
    "start": "645500",
    "end": "652310"
  },
  {
    "text": "those users so here in this case bob has two open tickets one is assigned to",
    "start": "652310",
    "end": "657440"
  },
  {
    "text": "alice the other is assigned to Karen and then Janet has one open ticket which is assigned to Karen so in this case Karen",
    "start": "657440",
    "end": "664610"
  },
  {
    "text": "can basically access her own account as well as the accounts of Bob and Janet and then Alice is only allowed to access her own account and",
    "start": "664610",
    "end": "670850"
  },
  {
    "text": "Bob's account okay now one of the nice",
    "start": "670850",
    "end": "676519"
  },
  {
    "text": "things about opus policy language is that because it's written in this declarative fashion you can actually",
    "start": "676519",
    "end": "681920"
  },
  {
    "text": "just query it and you can dry run it and you can ask questions of it in your development environment so for example right now I can just select the allow",
    "start": "681920",
    "end": "689060"
  },
  {
    "text": "rule and evaluate that and right now it's true the reason why it's true is because I've set up some input data to",
    "start": "689060",
    "end": "696079"
  },
  {
    "text": "use and so right now I have basically a request for Bob's account on behalf of",
    "start": "696079",
    "end": "703310"
  },
  {
    "text": "Bob right and so allow should obviously be true if I change the the user to",
    "start": "703310",
    "end": "708470"
  },
  {
    "text": "Alice and I rerun that query now the decision is false right she should not",
    "start": "708470",
    "end": "714079"
  },
  {
    "text": "wait oops yeah wait a second that's not what I was expecting oh right because I don't have",
    "start": "714079",
    "end": "719959"
  },
  {
    "text": "the customer service group on our subject okay that makes sense good but you can also select other parts of the",
    "start": "719959",
    "end": "725690"
  },
  {
    "text": "policy so you can actually select just arbitrary parts here so if I said like data pets pet store tickets and I",
    "start": "725690",
    "end": "730790"
  },
  {
    "text": "evaluate that you can see that it just produces the value that open would see when it's evaluating the policy now you",
    "start": "730790",
    "end": "739940"
  },
  {
    "text": "can do even further than that so I can actually just select parts of this rule I can select the first expression in the first rule and evaluate that and sure",
    "start": "739940",
    "end": "745910"
  },
  {
    "text": "enough the answer is true because the input method is get but I can also select the entire rule body or even just",
    "start": "745910",
    "end": "752959"
  },
  {
    "text": "subsets of it now what's interesting in this case is that we've got this user name variable inside of the rule body",
    "start": "752959",
    "end": "759800"
  },
  {
    "text": "and so what happens when oppa evaluates these rules is it is trying to find values for the variables that make the",
    "start": "759800",
    "end": "767000"
  },
  {
    "text": "statements true okay so when oppa evaluates this rule it's gonna bind username to a value that makes all of",
    "start": "767000",
    "end": "773569"
  },
  {
    "text": "the expressions in the body true and so if we evaluate this right now the first just the first two lines you can see",
    "start": "773569",
    "end": "779420"
  },
  {
    "text": "that the user name is bound to Bob right because that's what was in the path but",
    "start": "779420",
    "end": "784639"
  },
  {
    "text": "if we go and we try to evaluate this last line here as well there are no results right and so the reason why",
    "start": "784639",
    "end": "791779"
  },
  {
    "text": "there are no results is because the subject user is Alice",
    "start": "791779",
    "end": "797089"
  },
  {
    "text": "and that does not equal the username right so there's no way that oppa can find a way to prove that allow should be",
    "start": "797089",
    "end": "802669"
  },
  {
    "text": "true if I go back and I switch this to Bob and I really again all three",
    "start": "802669",
    "end": "811159"
  },
  {
    "text": "statements are true and that's why it would be allowed okay so how do you actually integrate with overwrite this",
    "start": "811159",
    "end": "817249"
  },
  {
    "text": "is great this is like a development environment but how do you actually use oppa so let me dive in here and make",
    "start": "817249",
    "end": "824749"
  },
  {
    "text": "sure this is the right terminal which it's not okay",
    "start": "824749",
    "end": "829909"
  },
  {
    "text": "so what I have here is a simple program written and go and I'm gonna show how how you can kind of integrate oppa as a",
    "start": "829909",
    "end": "835609"
  },
  {
    "text": "library so if I run this program right now it's just waiting for oh it actually is gonna complain it's gonna say that it",
    "start": "835609",
    "end": "842479"
  },
  {
    "text": "needs some bundle and within open we have this concept of a bundle it's basically just a gzip tar ball that contains these policy files and these",
    "start": "842479",
    "end": "849499"
  },
  {
    "text": "JSON data files and so I can just create that bundle that it needs on the command line by passing in the data and the",
    "start": "849499",
    "end": "856159"
  },
  {
    "text": "policy and now if I run this and I pass in the bundle it's gonna wait for input okay so it's waiting for me to give it",
    "start": "856159",
    "end": "862249"
  },
  {
    "text": "some input and so if i just type garbage it's gonna complain that it's not valid json but if i give it like the number 10",
    "start": "862249",
    "end": "868279"
  },
  {
    "text": "which is a valid json value it's gonna evaluate the policy with the number 10 assigned to input and so obviously in",
    "start": "868279",
    "end": "876649"
  },
  {
    "text": "that case the policy does the decision is deny right there's no way that the number 10 can satisfy all of those constraints in those rules but I",
    "start": "876649",
    "end": "883069"
  },
  {
    "text": "actually have some other inputs here that are a little bit more interesting so for example this is an example of a",
    "start": "883069",
    "end": "888949"
  },
  {
    "text": "request from Alice with the customer service group on her subject for Bob's account right so that should be allowed",
    "start": "888949",
    "end": "895389"
  },
  {
    "text": "and similar and so if I run this I can just go so I'll go run main pass in the",
    "start": "895389",
    "end": "900919"
  },
  {
    "text": "bundle and then pass in that over standard in right and so sure enough",
    "start": "900919",
    "end": "907819"
  },
  {
    "text": "that gets allowed but I also have a case that would get denied here all right so this is a person request from Alice for",
    "start": "907819",
    "end": "915319"
  },
  {
    "text": "Janet's account right she's not assigned a ticket for Janet and in this case it's missing the customer service group so it",
    "start": "915319",
    "end": "920899"
  },
  {
    "text": "would get denied for that reason as well but just to drive the point home in that case it gets denied so how does this actually work",
    "start": "920899",
    "end": "926029"
  },
  {
    "text": "well it's not that complicated actually so when you're embedding open as a",
    "start": "926029",
    "end": "931420"
  },
  {
    "text": "what you're doing is you're interacting with this this Rago package that it exposes so Rago is the language and it's a high level api that you used to",
    "start": "931420",
    "end": "937960"
  },
  {
    "text": "evaluate policies and so what this programs going to do is it's going to load the bundle off disk it's gonna",
    "start": "937960",
    "end": "945010"
  },
  {
    "text": "instantiate opus compiler and storage layer these are like data structures that are used during the evaluation",
    "start": "945010",
    "end": "950410"
  },
  {
    "text": "process and then it's going to decode the input that I provided over standard in and then it's gonna construct this",
    "start": "950410",
    "end": "957220"
  },
  {
    "text": "Rago object that's gonna get used for evaluation and so when you construct the Rago object you pass in things like the compiler and the store and the input and",
    "start": "957220",
    "end": "964630"
  },
  {
    "text": "then you also provide the query that you want to run so in this case we're asking for the value of allow and we're binding",
    "start": "964630",
    "end": "970450"
  },
  {
    "text": "it to a variable called allowed now there are other inputs that you can bribed you can provide things for like",
    "start": "970450",
    "end": "976180"
  },
  {
    "text": "tracing and profiling and metrics and so on and instrumentation but in this case",
    "start": "976180",
    "end": "982180"
  },
  {
    "text": "we're just basically providing the the core necessities and so then you run evaluation and you interpret the result",
    "start": "982180",
    "end": "988930"
  },
  {
    "text": "and so in this case if there were no results if the policy decision was undefined we would just bail out we",
    "start": "988930",
    "end": "994270"
  },
  {
    "text": "would say there's there's an error the reason for that is because in this case we've said that the default value for allow is false right so if there's no",
    "start": "994270",
    "end": "1001440"
  },
  {
    "text": "other value that's coming back from one of these rules it should use fault it should send back false and so if there are no answers coming back then that's",
    "start": "1001440",
    "end": "1007770"
  },
  {
    "text": "it that's an error you'd rely with like a 500 or something like that but otherwise you just look at the value of",
    "start": "1007770",
    "end": "1013050"
  },
  {
    "text": "the allowed variable and so if it's true you interpret that as allow if it's false you interpret that as deny okay",
    "start": "1013050",
    "end": "1021690"
  },
  {
    "text": "now one of the things that comes up when you start working with these policies is that you know you can end up with more",
    "start": "1021690",
    "end": "1026880"
  },
  {
    "text": "than two rules obviously you can end up with you know tens or hundreds of rules and some of those rules might be",
    "start": "1026880",
    "end": "1032310"
  },
  {
    "text": "complicated and so you don't really want to be manually querying the policy to understand whether it's correct and so",
    "start": "1032310",
    "end": "1038579"
  },
  {
    "text": "what we have in Opa to help you verify that your policies are correct is a unit testing framework so you can actually",
    "start": "1038579",
    "end": "1044819"
  },
  {
    "text": "write unit tests for your policies and this is what they look like so you",
    "start": "1044819",
    "end": "1050190"
  },
  {
    "text": "create a rule called test and this case a rule that starts the name test and I'm",
    "start": "1050190",
    "end": "1055710"
  },
  {
    "text": "gonna create two cases here a positive test and a negative test and so I'm gonna check that you know Bob is allowed",
    "start": "1055710",
    "end": "1060870"
  },
  {
    "text": "to access his own account and Alice is allowed to access accounts if she's in customer service and assigned a",
    "start": "1060870",
    "end": "1066060"
  },
  {
    "text": "ticket and then I'm gonna test the the opposites right that you don't have full access or whatever and then you can just",
    "start": "1066060",
    "end": "1072750"
  },
  {
    "text": "run these inside of on the command line or inside of tools like BS code and so if I run these tests getting an error",
    "start": "1072750",
    "end": "1079800"
  },
  {
    "text": "here oh it's complaining about the fact that I've got duplicates because I had that",
    "start": "1079800",
    "end": "1085530"
  },
  {
    "text": "bundle created so if I run that again you can see that the tests are passing",
    "start": "1085530",
    "end": "1091230"
  },
  {
    "text": "right now which is great but you can go further than that you can actually tell what parts of your policy are being hit",
    "start": "1091230",
    "end": "1096630"
  },
  {
    "text": "by these tests so if you run you can compute the coverage and have that visualized this is telling me that",
    "start": "1096630",
    "end": "1101850"
  },
  {
    "text": "basically the the tests themselves are being covered because they're being executed but if we look at our example policy here again all of the parts of",
    "start": "1101850",
    "end": "1108690"
  },
  {
    "text": "the policy are being hit right so we've exercised all of these cases if I go back into the policy and say I disabled",
    "start": "1108690",
    "end": "1114660"
  },
  {
    "text": "the the part that's based on context based on the tickets and I save that and",
    "start": "1114660",
    "end": "1122090"
  },
  {
    "text": "rerun it now you can see that we're never actually exercising the second rule fully right so we never made it to",
    "start": "1122090",
    "end": "1128640"
  },
  {
    "text": "the last line on the policy right so with OPA you know you can use the",
    "start": "1128640",
    "end": "1134100"
  },
  {
    "text": "policies in every ways right you can obviously use them at enforcement time but you can also dry run them you can write tests for them and you can query",
    "start": "1134100",
    "end": "1139320"
  },
  {
    "text": "them in different ways to to audit and to debug and so on okay so what I want",
    "start": "1139320",
    "end": "1148680"
  },
  {
    "text": "to do also here is talk about some of the new use cases and features that we've been working on in OPA",
    "start": "1148680",
    "end": "1154440"
  },
  {
    "text": "so I will kind of give a Cabot here that these are still in early stages of development they're sort of in at an",
    "start": "1154440",
    "end": "1159840"
  },
  {
    "text": "alpha stage but they're usable you can try them out and we're looking for feedback on these features in these use cases so the first use case that we",
    "start": "1159840",
    "end": "1168330"
  },
  {
    "text": "started looking into earlier this year is around data filtering so suppose that",
    "start": "1168330",
    "end": "1173880"
  },
  {
    "text": "the pets comm business is doing great and we want to expand to help you you",
    "start": "1173880",
    "end": "1180090"
  },
  {
    "text": "know keep track of your pets right now keep talking of their health right so we create a service that that stores you",
    "start": "1180090",
    "end": "1185850"
  },
  {
    "text": "know health information on your pets and we also have a staff of veterinarians that can kind of like you know treat",
    "start": "1185850",
    "end": "1191490"
  },
  {
    "text": "your pets and do diagnosis and so on and so what we're gonna do is build a service that keeps track of all that",
    "start": "1191490",
    "end": "1196800"
  },
  {
    "text": "information and it's going to suppose an API that allows you to get access to that data and it's gonna store",
    "start": "1196800",
    "end": "1201870"
  },
  {
    "text": "that data in a sequel database right so whenever you ask for you know the pets that you you know should see the pet",
    "start": "1201870",
    "end": "1210000"
  },
  {
    "text": "details service is gonna go and actually get a query against its database it's gonna select star from pets and that's",
    "start": "1210000",
    "end": "1215250"
  },
  {
    "text": "gonna return a bunch of records that go back that ultimately go back by the API and so the question becomes what if we",
    "start": "1215250",
    "end": "1221730"
  },
  {
    "text": "want to enforce a policy that says that veterinarians are only allowed to see the details of pets that they're treating right that information about",
    "start": "1221730",
    "end": "1229770"
  },
  {
    "text": "which veterinarians are treating which pets is not contained in the request",
    "start": "1229770",
    "end": "1235280"
  },
  {
    "text": "right so it's not readily available when the pet details service would execute",
    "start": "1235280",
    "end": "1241170"
  },
  {
    "text": "the policy query right we could change the pet details service to call out to",
    "start": "1241170",
    "end": "1246960"
  },
  {
    "text": "the database and get the data and then pass it in the input or we could try to replicate the data from the database",
    "start": "1246960",
    "end": "1251970"
  },
  {
    "text": "into oppa but when you start doing that at a large scale you're gonna find that there are certain challenges around",
    "start": "1251970",
    "end": "1258330"
  },
  {
    "text": "performance and scalability that are hard to overcome you're gonna find that it's difficult to maintain and that it",
    "start": "1258330",
    "end": "1263880"
  },
  {
    "text": "violates certain consistency guarantees you might expect from the system so what",
    "start": "1263880",
    "end": "1269580"
  },
  {
    "text": "are we gonna do well we're probably going to just go and do this in our application right we're gonna stick a where clause on to that query that's",
    "start": "1269580",
    "end": "1275460"
  },
  {
    "text": "gonna filter the results for us and then we could just declare a job done except the problem is that at this point the",
    "start": "1275460",
    "end": "1282630"
  },
  {
    "text": "logic that decides whether or not you're allowed to see a row in the database is now hard-coded into the pet details",
    "start": "1282630",
    "end": "1289380"
  },
  {
    "text": "service right and so if we want to change this policy in any way we have to",
    "start": "1289380",
    "end": "1295350"
  },
  {
    "text": "go into that service and understand it at a very fundamental level in order to do anything and so what you really want",
    "start": "1295350",
    "end": "1303330"
  },
  {
    "text": "to be able to do is control that query that's running through policy right",
    "start": "1303330",
    "end": "1310110"
  },
  {
    "text": "because that way we don't have to replicate all the data into OPA we can avoid the performance and the scalability bottlenecks that are",
    "start": "1310110",
    "end": "1316020"
  },
  {
    "text": "inherent in that and we don't have to worry so much about the maintainability and the correctness over time so I've",
    "start": "1316020",
    "end": "1322800"
  },
  {
    "text": "got a little demo about this that shows how this works so for example this is a",
    "start": "1322800",
    "end": "1327990"
  },
  {
    "text": "little sample app that we have it's the sample app for the pet clinic that pet calm is",
    "start": "1327990",
    "end": "1333800"
  },
  {
    "text": "trialing and so you can see that right now we're logged in but we can see or we're not logged in rather and we can",
    "start": "1333800",
    "end": "1338910"
  },
  {
    "text": "see all the pets right so we can see Bob's pets and and Liz's pets and and John's pet and so on and even if we log",
    "start": "1338910",
    "end": "1346710"
  },
  {
    "text": "in right now it doesn't really change anything we're logged in this Bob we can see everything the reason why that's the",
    "start": "1346710",
    "end": "1353040"
  },
  {
    "text": "case is because the policy here hasn't put any constraints over the data that can be returned to the user it's just",
    "start": "1353040",
    "end": "1359070"
  },
  {
    "text": "saying that basically any pet can be returned to any user and so if we wanted to restrict this return value to say",
    "start": "1359070",
    "end": "1366450"
  },
  {
    "text": "that you know you can only see pets that you own we would add a condition into this policy so we would say that the pet",
    "start": "1366450",
    "end": "1371820"
  },
  {
    "text": "clinic the clinic for the pet must match or rather the owner of the pet must match the user in the request and now if",
    "start": "1371820",
    "end": "1379950"
  },
  {
    "text": "we refresh the page you can see that we're only seeing the valid the pets for Bob right and so if we go in and we log",
    "start": "1379950",
    "end": "1386010"
  },
  {
    "text": "in as Liz we see her pets if we log in as John we see his pets okay so this is",
    "start": "1386010",
    "end": "1392760"
  },
  {
    "text": "a super simple example of a policy that just says that you know you should be allowed to see the pets that you own but what about the veterinarians right if I",
    "start": "1392760",
    "end": "1398970"
  },
  {
    "text": "log in as Alice here she can't see anything and so in order to get Alice access to the data what we're gonna do",
    "start": "1398970",
    "end": "1406200"
  },
  {
    "text": "is add another rule so we're gonna say that data pets can be displayed if the",
    "start": "1406200",
    "end": "1413610"
  },
  {
    "text": "pet veterinarian hopefully I can spell this correctly is equal to the subject user and now if I save that and refresh",
    "start": "1413610",
    "end": "1422580"
  },
  {
    "text": "you can see that alice is able to see the pets that she's treating similarly teri the other veterinarian is able to",
    "start": "1422580",
    "end": "1429870"
  },
  {
    "text": "see the pets the she's treating right",
    "start": "1429870",
    "end": "1434750"
  },
  {
    "text": "but what if we want to go further than this what if we want to say that you know you should only be pets that you're treating at the clinic that you're",
    "start": "1435230",
    "end": "1440970"
  },
  {
    "text": "working at right well you just extend the policy with another condition that says that the pet clinic must be equal",
    "start": "1440970",
    "end": "1446400"
  },
  {
    "text": "to the location that was you know determined when the user authenticated for example right and so now if we sign",
    "start": "1446400",
    "end": "1453630"
  },
  {
    "text": "back in as Alice she can only see the pets at shady bluffs where she's currently signed in okay so",
    "start": "1453630",
    "end": "1462950"
  },
  {
    "text": "that's data filtering with though but the way this works is slightly different from the other examples that I showed so",
    "start": "1463590",
    "end": "1469060"
  },
  {
    "text": "when the pet detail Service receives the the incoming API request it's still queries OVA it still supplies a bunch of",
    "start": "1469060",
    "end": "1474790"
  },
  {
    "text": "attributes but now instead of replying with just simply true or false what OPA does is it evaluates the policy",
    "start": "1474790",
    "end": "1481750"
  },
  {
    "text": "with certain unknowns in account so for example the pets data would be treated as unknown and then any conditions that",
    "start": "1481750",
    "end": "1488650"
  },
  {
    "text": "depend on those unknowns get returned back to the pet details service so that they can be applied to the request processing later in the chain and so in",
    "start": "1488650",
    "end": "1495640"
  },
  {
    "text": "this case you know if the if bob was accessing his his pets then he would you know we generate this condition that",
    "start": "1495640",
    "end": "1501790"
  },
  {
    "text": "says pets not owner must be able to Bob so this is a quick example of how this",
    "start": "1501790",
    "end": "1506800"
  },
  {
    "text": "is how this works we have a blog for the project there's a post on there called write policy and OPA enforce policy in",
    "start": "1506800",
    "end": "1512800"
  },
  {
    "text": "SQL if you're interested in these kind of data filtering use cases I recommend that you take a look at that and if you",
    "start": "1512800",
    "end": "1519040"
  },
  {
    "text": "have ideas about how this can be used or you know your feedback we'd love to hear it and we'd love to talk with you okay",
    "start": "1519040",
    "end": "1526840"
  },
  {
    "text": "the last thing that I want to talk about is something that I'm super excited about which is OPA and web assembly so I",
    "start": "1526840",
    "end": "1534100"
  },
  {
    "text": "don't know how many people here are familiar with web assembly but I'll just give it kind of a really quick overview so web assembly is basically a binary",
    "start": "1534100",
    "end": "1540610"
  },
  {
    "text": "instruction format for building you know stack based virtual machines so just like you know x86 assembly exists and",
    "start": "1540610",
    "end": "1546820"
  },
  {
    "text": "you can compile C and C++ down to x86 and run it you know natively you can compile C C++ rust and go and a bunch of",
    "start": "1546820",
    "end": "1553840"
  },
  {
    "text": "other languages down to web assembly and then run that code in a web assembly vm in the browser or elsewhere and so today",
    "start": "1553840",
    "end": "1561010"
  },
  {
    "text": "web assembly supported in the major browsers and it's getting a lot of traction outside of the browser",
    "start": "1561010",
    "end": "1566440"
  },
  {
    "text": "ecosystem as well because it has certain properties that make it very good for extensibility use cases whenever you",
    "start": "1566440",
    "end": "1571900"
  },
  {
    "text": "need to kind of implement plugins or implement some kind of extensibility web assembly has certain properties around memory safety and its efficiency in",
    "start": "1571900",
    "end": "1579370"
  },
  {
    "text": "terms of the size of the binaries and the fact that it's you know being kind of defined by by a large number of you",
    "start": "1579370",
    "end": "1585880"
  },
  {
    "text": "know organizations makes it kind of this open platform and so there are all these non web and beddings that they call it",
    "start": "1585880",
    "end": "1592390"
  },
  {
    "text": "as so called non web embeddings like iot and dust and servers and even blockchain but what",
    "start": "1592390",
    "end": "1598180"
  },
  {
    "text": "I'm mainly interested in is how webassembly can be applied to this problem of policy enforcement and you",
    "start": "1598180",
    "end": "1603280"
  },
  {
    "text": "know servers and data centers and so on so what does webassembly have to do with OPA well you know over the last three",
    "start": "1603280",
    "end": "1610090"
  },
  {
    "text": "years we've found certain things after talking to a large number people that are using OPA and one of those things is",
    "start": "1610090",
    "end": "1615100"
  },
  {
    "text": "that library integrations can often be a lot simpler right as opposed to having to stand up a separate daemon in the",
    "start": "1615100",
    "end": "1621309"
  },
  {
    "text": "system the library integrations have a little bit you a little bit more control with a library integration you know",
    "start": "1621309",
    "end": "1627280"
  },
  {
    "text": "there's less overhead there's fewer context switches there's less copies happening so it's more performant",
    "start": "1627280",
    "end": "1632470"
  },
  {
    "text": "there's a little bit less operational complexity you don't have to worry about securing this daemon that's running on",
    "start": "1632470",
    "end": "1637750"
  },
  {
    "text": "every machine you don't have to necessarily worry about monitoring and so on so or as much so having the",
    "start": "1637750",
    "end": "1644170"
  },
  {
    "text": "ability to you know evaluate open policies via a librarian Edition is compelling for a lot of people and",
    "start": "1644170",
    "end": "1650130"
  },
  {
    "text": "webassembly will make this possible because today opens written and go so it's only really embeddable as a library",
    "start": "1650130",
    "end": "1655300"
  },
  {
    "text": "and go applications but with webassembly runtimes popping up in go and rust and obviously you know VA and other popular",
    "start": "1655300",
    "end": "1662590"
  },
  {
    "text": "engines it's likely that you'll be able to embed web assembly in any language in",
    "start": "1662590",
    "end": "1667750"
  },
  {
    "text": "the near future the other aspect is that some platforms are unlikely to necessarily embed open runtimes but they",
    "start": "1667750",
    "end": "1674110"
  },
  {
    "text": "are likely to embed web assembly runtimes so for example CloudFlare recently announced that they would",
    "start": "1674110",
    "end": "1680170"
  },
  {
    "text": "support web assembly executables on their workers so you can take web assembly you can you can compile code",
    "start": "1680170",
    "end": "1685330"
  },
  {
    "text": "down to web assembly and then distribute it out to the edge to the points of presence the cloud floor has and have it",
    "start": "1685330",
    "end": "1691600"
  },
  {
    "text": "run you know very close to your customers right on voice the service proxy is also considering adding you",
    "start": "1691600",
    "end": "1698260"
  },
  {
    "text": "know web assembly support to the service proxy right and so I think that web assembly is it's super interesting and",
    "start": "1698260",
    "end": "1705790"
  },
  {
    "text": "it kind of might help answer the question of how do I enforce policies in a server less or edge computing",
    "start": "1705790",
    "end": "1710950"
  },
  {
    "text": "environment and so we actually have an initial version of this working today",
    "start": "1710950",
    "end": "1716650"
  },
  {
    "text": "you can compile down a fragment of the language today and so the right terminal",
    "start": "1716650",
    "end": "1724330"
  },
  {
    "text": "yep so it's a simple fragment of the language but basic ACLS you can compile",
    "start": "1724330",
    "end": "1731340"
  },
  {
    "text": "down basic forms of iteration get compiled down and we're gonna kind of flesh this out in the next few months",
    "start": "1731340",
    "end": "1736830"
  },
  {
    "text": "but here I've got a simple policy that is basically implementing you know an access control list effectively on a",
    "start": "1736830",
    "end": "1742470"
  },
  {
    "text": "HTTP API and what I can do now is I can compile this down into web assembly so",
    "start": "1742470",
    "end": "1748140"
  },
  {
    "text": "I'm going to pass in the policy and I'm gonna pass in a query to run in this",
    "start": "1748140",
    "end": "1754110"
  },
  {
    "text": "case I want to check whether allow is true and what that's gonna do is emit a webassembly binary so you can see it's",
    "start": "1754110",
    "end": "1759480"
  },
  {
    "text": "just created this policy dot wasum file on disk and now I can load that up into",
    "start": "1759480",
    "end": "1766560"
  },
  {
    "text": "a node.js app so I have this note app here and if I run this with like the",
    "start": "1766560",
    "end": "1772500"
  },
  {
    "text": "value 1 it's gonna basically load the the policy off disk initialize the web",
    "start": "1772500",
    "end": "1777900"
  },
  {
    "text": "assembly address space and then evaluate the policy and in this case the value 1 gets denied but if I pass in the value",
    "start": "1777900",
    "end": "1783450"
  },
  {
    "text": "you know get and path trades that should be allowed right but similarly if I try",
    "start": "1783450",
    "end": "1790860"
  },
  {
    "text": "to post and I'm not an admin then I'll be denied all right so I think this is",
    "start": "1790860",
    "end": "1796440"
  },
  {
    "text": "super cool because the integration is really simple for the app right so there's a bit of boilerplate here just ignore that basically the way this works",
    "start": "1796440",
    "end": "1804210"
  },
  {
    "text": "is that you instantiate the web assembly address space you can give it a size so you can put a bound on the actual amount",
    "start": "1804210",
    "end": "1810300"
  },
  {
    "text": "of memory that the policy evaluation can consume and then you and you blowed the policy off disk or off the off the wire",
    "start": "1810300",
    "end": "1816830"
  },
  {
    "text": "and evaluate it right and so here I'm just parsing the JSON input and then interpreting the output there's not too",
    "start": "1816830",
    "end": "1824130"
  },
  {
    "text": "much interesting about the actual evaluation there's a little bit of setup that has to happen on the address space but after that it's it's pretty",
    "start": "1824130",
    "end": "1830400"
  },
  {
    "text": "straightforward so this is obviously proof of concept we would probably wrap this in an SDK or something like that or",
    "start": "1830400",
    "end": "1835860"
  },
  {
    "text": "a library that presents a little bit of a higher-level interface but this gives you a sense of how this how this works",
    "start": "1835860",
    "end": "1841370"
  },
  {
    "text": "cool so that's it thank you very much if",
    "start": "1841370",
    "end": "1847710"
  },
  {
    "text": "you're interested in the project check out the slack organization we have about 450 people on there",
    "start": "1847710",
    "end": "1852810"
  },
  {
    "text": "check it out on github start the project we love we love more stars I'm gonna push all of the code from this talk up",
    "start": "1852810",
    "end": "1858330"
  },
  {
    "text": "to github later today and if you're interested in contributing please come say hello I'd",
    "start": "1858330",
    "end": "1863880"
  },
  {
    "text": "love to chat if you want to contribute integrations or tooling or work on the core part of the language I'd love to chat with you we also have tickets that",
    "start": "1863880",
    "end": "1870179"
  },
  {
    "text": "are assigned or that have labels like low-hanging fruit that are super easy to get started with or Help Wanted some of",
    "start": "1870179",
    "end": "1875190"
  },
  {
    "text": "those are little bit bigger but yeah thank you very much [Music]",
    "start": "1875190",
    "end": "1881119"
  }
]