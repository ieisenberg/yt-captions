[
  {
    "text": "okay thank you everyone for joining us welcome to today's cncf live webinar",
    "start": "3679",
    "end": "9360"
  },
  {
    "text": "growl vm native image low footprint java in the cloud i'm livi schultz and i'll",
    "start": "9360",
    "end": "14480"
  },
  {
    "text": "be moderating today's webinar i'm going to read our code of conduct and then hand over to chris foster principal",
    "start": "14480",
    "end": "19760"
  },
  {
    "text": "product manager at oracle and eli shilling head of developer relations content at oracle",
    "start": "19760",
    "end": "25279"
  },
  {
    "text": "a few housekeeping items before we get started during the webinar you're not able to speak as an attendee there's a",
    "start": "25279",
    "end": "31039"
  },
  {
    "text": "chat box on the right hand side of your screen please feel free to drop your questions there and we'll get to as many as we can at the end",
    "start": "31039",
    "end": "37840"
  },
  {
    "text": "this is an official webinar of the cncf and as such is subject to the cncf code of conduct please do not add anything to",
    "start": "37840",
    "end": "44640"
  },
  {
    "text": "the chat or questions that would be in violation of that code of conduct and please be respectful of all of your",
    "start": "44640",
    "end": "50320"
  },
  {
    "text": "fellow participants and presenters please also note that the recording and slides will be posted later today to the",
    "start": "50320",
    "end": "56960"
  },
  {
    "text": "cncf online programs page at community.cncf.io under online programs they are also",
    "start": "56960",
    "end": "63840"
  },
  {
    "text": "available via your registration link you use today and the recording is available on our",
    "start": "63840",
    "end": "68960"
  },
  {
    "text": "online programs youtube playlist with that i will hand it over to chris and eli to kick things off and take us",
    "start": "68960",
    "end": "76159"
  },
  {
    "text": "through yeah thank you very much hi my name is",
    "start": "76159",
    "end": "81200"
  },
  {
    "text": "chris foster i work at oracle labs um for the gra vm team i work in product",
    "start": "81200",
    "end": "86479"
  },
  {
    "text": "management so i create a lot of content and do a lot of talks about gravim",
    "start": "86479",
    "end": "91680"
  },
  {
    "text": "native image um it's a technology some of you may have heard of i guess but hopefully in this session we'll go into",
    "start": "91680",
    "end": "99200"
  },
  {
    "text": "what gravim native image is and what some of its benefits are okay",
    "start": "99200",
    "end": "104640"
  },
  {
    "text": "so what is graviem and why should i care this is going to be a mix of slides and",
    "start": "104640",
    "end": "110240"
  },
  {
    "text": "some live stuff some live coding and some deploying things to the cloud so i'm hoping there won't be too many um",
    "start": "110240",
    "end": "116960"
  },
  {
    "text": "mess-ups along the way but bear with me if there are so what is graviem it's a number of things it's a java runtime so",
    "start": "116960",
    "end": "123840"
  },
  {
    "text": "we have jdk 11 jdk 17. you could just think of it as a drop in replacement for",
    "start": "123840",
    "end": "129119"
  },
  {
    "text": "whatever java runtime you're using at the moment and the benefit of it certainly in the enterprise edition is",
    "start": "129119",
    "end": "134879"
  },
  {
    "text": "that we have a new an entirely new jit compiler so it's entirely written in",
    "start": "134879",
    "end": "140319"
  },
  {
    "text": "java it's very fast very efficient and it's got you know it it can make your application significantly faster if",
    "start": "140319",
    "end": "146800"
  },
  {
    "text": "you're using the paid enterprise version we're not going to talk about that today another feature which is the one you may",
    "start": "146800",
    "end": "153360"
  },
  {
    "text": "have heard the most about is native image this is where we take an application your application and",
    "start": "153360",
    "end": "159440"
  },
  {
    "text": "generate a native executable from it and by native executable i mean",
    "start": "159440",
    "end": "164720"
  },
  {
    "text": "uh a binary that will run natively on whatever platform you're building on so if you're using a mac you end up with a",
    "start": "164720",
    "end": "170640"
  },
  {
    "text": "mac x binary executable file a single file that you run and has no dependencies on the jvm so it's very",
    "start": "170640",
    "end": "177760"
  },
  {
    "text": "easy to distribute it's ideal for containers so if you're building on linux and you you package this binary up",
    "start": "177760",
    "end": "183680"
  },
  {
    "text": "in a container you can get a very small docker container for instance with your application in it so that's going to be",
    "start": "183680",
    "end": "189760"
  },
  {
    "text": "the main focus of this talk but we'll talk about some of the other things that graviem is before we move on to that so",
    "start": "189760",
    "end": "195840"
  },
  {
    "text": "it's multi-language we've added an api to the the java runtime towards the jdk",
    "start": "195840",
    "end": "201760"
  },
  {
    "text": "that lets you run many languages on top of the uh the grail java runtime so you can run currently",
    "start": "201760",
    "end": "208720"
  },
  {
    "text": "python you can run node.js and javascript you can run r c c plus plus",
    "start": "208720",
    "end": "214959"
  },
  {
    "text": "lots of different um languages uh you can run them natively there's no sort of cross compilations so you don't end up",
    "start": "214959",
    "end": "222720"
  },
  {
    "text": "basically using some kind of compiler that generates bytecode that then runs you have an interpreter for the language",
    "start": "222720",
    "end": "229120"
  },
  {
    "text": "that you can install into the jvm very interesting but we won't talk about that today and finally it's um it's an open",
    "start": "229120",
    "end": "235599"
  },
  {
    "text": "source project so we have a free totally free community edition and we have a",
    "start": "235599",
    "end": "240640"
  },
  {
    "text": "enterprise edition which is pay for support basically there is a",
    "start": "240640",
    "end": "246319"
  },
  {
    "text": "number of optimizations performance optimizations you get with that but basically it's at the performance plus",
    "start": "246319",
    "end": "252080"
  },
  {
    "text": "support but the community edition as i said is it's free to use and is developed in the uh",
    "start": "252080",
    "end": "259759"
  },
  {
    "text": "so why should i care i've covered some of these points already but really about if you're thinking about graviem as a java runtime",
    "start": "261600",
    "end": "268960"
  },
  {
    "text": "it's improved performance if you're thinking about native executables and you want to be able to build these fast",
    "start": "268960",
    "end": "275040"
  },
  {
    "text": "starting low footprint and native executables then the native image part of graviem is the thing that's",
    "start": "275040",
    "end": "281600"
  },
  {
    "text": "interesting to you and that's what we're focusing on today the best way to do it to explain this",
    "start": "281600",
    "end": "288000"
  },
  {
    "text": "really is if i try and show you some examples so we're going to sort of iteratively build up",
    "start": "288000",
    "end": "293759"
  },
  {
    "text": "some applications and then look at how we turn them into native images how we deploy them and",
    "start": "293759",
    "end": "298960"
  },
  {
    "text": "kind of compare and contrast the kind of the performance we get from our java version and our native executable",
    "start": "298960",
    "end": "305919"
  },
  {
    "text": "so we need um we need a basic app like a model play thing to demonstrate these",
    "start": "305919",
    "end": "311600"
  },
  {
    "text": "ideas so i've got a java application that uses something called a markov",
    "start": "311600",
    "end": "316720"
  },
  {
    "text": "model to generate random text so i've taken the jabberwocky poem and i've wrapped it",
    "start": "316720",
    "end": "323280"
  },
  {
    "text": "up in a java class and i'm using a library which we'll see in a minute when we look at the code write data",
    "start": "323280",
    "end": "330000"
  },
  {
    "text": "that lets you generate random text from an original piece of text so it's it's a relatively simple",
    "start": "330000",
    "end": "336479"
  },
  {
    "text": "application but it's kind of fun and it um has you know various moving parts which",
    "start": "336479",
    "end": "341840"
  },
  {
    "text": "are great we're going to build it into a spring application with a rest api that will allow us to call a url and get back",
    "start": "341840",
    "end": "349199"
  },
  {
    "text": "on nonsense verse that resembles the jabberwocky poem and as i said we're going to build",
    "start": "349199",
    "end": "355840"
  },
  {
    "text": "initially a java version of the application and we're going to look at that now there's a little note on metrics",
    "start": "355840",
    "end": "361919"
  },
  {
    "text": "and in order to compare and contrast like our native application and our java application we",
    "start": "361919",
    "end": "367759"
  },
  {
    "text": "need to get some figures about performance and in order to do that i'm using the",
    "start": "367759",
    "end": "373520"
  },
  {
    "text": "spring framework actuator like the spring boot actuator which gathers",
    "start": "373520",
    "end": "378880"
  },
  {
    "text": "statistics and facts about your running application and is able to serve them up on a url and then i'm using prometheus",
    "start": "378880",
    "end": "386319"
  },
  {
    "text": "which is like a time series uh data engine that lets you grab those uh grab",
    "start": "386319",
    "end": "392160"
  },
  {
    "text": "sorry it calls those urls uh there's actually green scrapes like the information from",
    "start": "392160",
    "end": "398720"
  },
  {
    "text": "them and stores them in time series and then at the very end of that i'm using grafana to uh pull this data together to",
    "start": "398720",
    "end": "406240"
  },
  {
    "text": "make nice visual dashboards which we'll see in a second",
    "start": "406240",
    "end": "412160"
  },
  {
    "text": "so let's look at the code so i'm going to jump to my code editor",
    "start": "412160",
    "end": "417360"
  },
  {
    "text": "and here you are i've got a i've got my spring boot project",
    "start": "417360",
    "end": "422960"
  },
  {
    "text": "let's take a look at the java application it's very very simple like i said um we've got a basic spring boot um",
    "start": "422960",
    "end": "431039"
  },
  {
    "text": "starter class like a main class we have a utility class",
    "start": "431039",
    "end": "437479"
  },
  {
    "text": "jabberwocky.java which contains the um the main logic of our application",
    "start": "437479",
    "end": "444319"
  },
  {
    "text": "here's the text for the poem the jabberwocky i mentioned we build this uh markov",
    "start": "445199",
    "end": "451280"
  },
  {
    "text": "model this is basically just a model of the text and then we store it in this utility object this object is created as",
    "start": "451280",
    "end": "458160"
  },
  {
    "text": "a singleton so there should only be one of them running inside our application and whenever we want some nonsense first",
    "start": "458160",
    "end": "463840"
  },
  {
    "text": "we're going to hit some methods in this class generate or generate with a number of lines that's",
    "start": "463840",
    "end": "469919"
  },
  {
    "text": "going to query that model and using a string buffer build up a number",
    "start": "469919",
    "end": "475440"
  },
  {
    "text": "of lines of text for us and then return that to us so that's our simple that's the functional part of the application",
    "start": "475440",
    "end": "482240"
  },
  {
    "text": "and then we need to wrap it in a controller so we have very simple spring controller here",
    "start": "482240",
    "end": "489520"
  },
  {
    "text": "it's a rest controller we've given it a url to listen to slash jibber to bind to",
    "start": "489599",
    "end": "494879"
  },
  {
    "text": "and we have some methods that let us you know uh that basically serve the content for",
    "start": "494879",
    "end": "499919"
  },
  {
    "text": "that so if we just call slash jibber we we gen we get our model and we generate some text and return that but we can",
    "start": "499919",
    "end": "505919"
  },
  {
    "text": "also optionally you know ask for a number of lines of text 10 100 200",
    "start": "505919",
    "end": "510960"
  },
  {
    "text": "whatever so that's our java application very simple we can build it from the command line so",
    "start": "510960",
    "end": "518399"
  },
  {
    "text": "uh i'm in my terminal on my server so if i do",
    "start": "518399",
    "end": "524240"
  },
  {
    "text": "maven clean package it's going to build the application",
    "start": "524240",
    "end": "532600"
  },
  {
    "text": "and you'll notice in a second that it also um builds uh a docker container with the application in it i'm using the",
    "start": "534000",
    "end": "541519"
  },
  {
    "text": "um the spotify docker maven plugin to",
    "start": "541519",
    "end": "546959"
  },
  {
    "text": "automatically generate a docker container for me a docker image from",
    "start": "546959",
    "end": "552080"
  },
  {
    "text": "a docker file so anyway we've built our application we've built our container",
    "start": "552080",
    "end": "557760"
  },
  {
    "text": "and if we look in our target directory surprise surprise we've got a jar file",
    "start": "557760",
    "end": "563839"
  },
  {
    "text": "so let's run this and we're going to put it into the background and we'll call the url",
    "start": "563839",
    "end": "570160"
  },
  {
    "text": "and from that benchmark",
    "start": "570160",
    "end": "575800"
  },
  {
    "text": "so the application's starting up you can see the stack of spring output and yeah it started up",
    "start": "576320",
    "end": "583120"
  },
  {
    "text": "in about two seconds so now i've i've got my application running",
    "start": "583120",
    "end": "588240"
  },
  {
    "text": "i can use curl to hit the um to hit the end point",
    "start": "588240",
    "end": "596399"
  },
  {
    "text": "and with any luck i should if i could type",
    "start": "596959",
    "end": "602399"
  },
  {
    "text": "i should get some uh nonsense first back",
    "start": "602399",
    "end": "607519"
  },
  {
    "text": "brilliant so we saw some logging there from spring but here we have some text that was generated by our custom",
    "start": "607519",
    "end": "613839"
  },
  {
    "text": "application and if i call it again i get slightly different text back",
    "start": "613839",
    "end": "619760"
  },
  {
    "text": "beware the jab walking this time it starts with uh what does it start with actually no it starts with and as if and before it",
    "start": "619760",
    "end": "626240"
  },
  {
    "text": "was um starting with uh where was my car yeah and hast thou",
    "start": "626240",
    "end": "632000"
  },
  {
    "text": "so every time i call my url endpoint i get a new like non piece of nonsense first that's modeled on uh the",
    "start": "632000",
    "end": "638959"
  },
  {
    "text": "jabberwocky poem so my application's running we've got an idea of what it does and we can see that",
    "start": "638959",
    "end": "644240"
  },
  {
    "text": "it generates the text that we want to so i'm going to bring it back into the foreground and kill it i also said that i'm i'm using maven and",
    "start": "644240",
    "end": "652640"
  },
  {
    "text": "the spotify plugin to generate a container for me um",
    "start": "652640",
    "end": "657839"
  },
  {
    "text": "automatically so if i call docker images",
    "start": "657839",
    "end": "664000"
  },
  {
    "text": "yeah i can see that i created a container and i can run that container and that will also",
    "start": "665120",
    "end": "671760"
  },
  {
    "text": "that will also um do exactly the same thing but let's run the container just to show that the",
    "start": "672720",
    "end": "678160"
  },
  {
    "text": "the app is now successfully packaged into my my docker image",
    "start": "678160",
    "end": "684000"
  },
  {
    "text": "so i've got to map some ports to make it available locally i'm just going to copy the name of the",
    "start": "685440",
    "end": "690560"
  },
  {
    "text": "repository it's got a very long repository name the reason for that will become clear",
    "start": "690560",
    "end": "695600"
  },
  {
    "text": "in a second and then i've tagged tagged it to describe which version of",
    "start": "695600",
    "end": "700640"
  },
  {
    "text": "the app it is as we go through this we're going to build different versions of the application",
    "start": "700640",
    "end": "707600"
  },
  {
    "text": "ah am i already running containers okay no",
    "start": "708160",
    "end": "713279"
  },
  {
    "text": "i know what i'll do",
    "start": "713279",
    "end": "716839"
  },
  {
    "text": "we'll call it jibber jdk one i'll sort that out in a second so my application started so now if i",
    "start": "719120",
    "end": "726639"
  },
  {
    "text": "were to hit curl i get nonsense text back",
    "start": "726639",
    "end": "732959"
  },
  {
    "text": "ah typos okay so",
    "start": "740160",
    "end": "745920"
  },
  {
    "text": "we've built our application we've tested it from the command line we can run our jar using java and we see it starts in",
    "start": "745920",
    "end": "752560"
  },
  {
    "text": "about two seconds uh returns us our text we've seen that it's packaged up in a docker container",
    "start": "752560",
    "end": "758880"
  },
  {
    "text": "perfect and we can also um we can also quickly look at the size of the jar etc",
    "start": "758880",
    "end": "766560"
  },
  {
    "text": "so this is a little script i've written that generates a bar chart that shows you how big the jar is and how big the",
    "start": "766560",
    "end": "772399"
  },
  {
    "text": "jdk container is so my jar's 21 meg in size but my",
    "start": "772399",
    "end": "777839"
  },
  {
    "text": "docker container containing my java runtime and my jar and everything else that java needs is about 600 meg in size",
    "start": "777839",
    "end": "786399"
  },
  {
    "text": "so that's not that's not very slimmed down yet we could make that smaller using a slimmer container and um using",
    "start": "786399",
    "end": "793600"
  },
  {
    "text": "j-link to build a slim down jvm but to my eye that's you know there's not a",
    "start": "793600",
    "end": "799120"
  },
  {
    "text": "ridiculous size container for a like an application packaged uh a java application package that's a docker",
    "start": "799120",
    "end": "805279"
  },
  {
    "text": "container so about 600 meg for the container about 20 meg for the application",
    "start": "805279",
    "end": "812240"
  },
  {
    "text": "for the application code so we're going to switch back to my slides so we've seen the application",
    "start": "812240",
    "end": "820959"
  },
  {
    "text": "we're seeing that it runs and now we're going to get to the topic of native executables in containers",
    "start": "821040",
    "end": "827440"
  },
  {
    "text": "so we we talked about some of the benefits of like native image and these native executables previously but just",
    "start": "827440",
    "end": "833519"
  },
  {
    "text": "to recap on that i mean why do we want to do this we want to do it because we want our applications to start faster in",
    "start": "833519",
    "end": "840079"
  },
  {
    "text": "the containers and we want them also to have a smaller footprint by smaller footprint we can mean a number of",
    "start": "840079",
    "end": "845279"
  },
  {
    "text": "different things one would be the container size so the less in the container you know the the better you have to",
    "start": "845279",
    "end": "851760"
  },
  {
    "text": "store these right the less that's in the container also arguably like the more secure the container would be faster",
    "start": "851760",
    "end": "858240"
  },
  {
    "text": "starting means that you know um you're more likely you you may be able to scale",
    "start": "858240",
    "end": "863279"
  },
  {
    "text": "to zero and then bring instances up in to to handle calls to request but it",
    "start": "863279",
    "end": "868720"
  },
  {
    "text": "means it's easier to scale the application dynamically another area of uh another area we can talk about the",
    "start": "868720",
    "end": "875440"
  },
  {
    "text": "footprint as well is the memory consumption of the application obviously in the cloud you pay for everything so if you're using more memory you know",
    "start": "875440",
    "end": "881760"
  },
  {
    "text": "you're to run your an instance of your application the more memory you use the more expensive it's going to be so if you can use less memory for the same um",
    "start": "881760",
    "end": "889519"
  },
  {
    "text": "for the same throughput the same performance or very similar performance then that might be interesting",
    "start": "889519",
    "end": "895600"
  },
  {
    "text": "so i've got a little graphic i built here earlier today to talk about to help people visualize what native images on",
    "start": "895600",
    "end": "902240"
  },
  {
    "text": "the left we can see we've got some java files what typically happens is you you",
    "start": "902240",
    "end": "908160"
  },
  {
    "text": "compile those with java scene you get some class files and then you run those class files you",
    "start": "908160",
    "end": "913839"
  },
  {
    "text": "might package them up in a docker container etc but at some point you're going to say java class part this or jar this and",
    "start": "913839",
    "end": "921040"
  },
  {
    "text": "and actually call the the main entry point for that application and that's what we would call like the jit way of",
    "start": "921040",
    "end": "927360"
  },
  {
    "text": "running your java code you take a java runtime your class files and you run the class files on the java runtime what",
    "start": "927360",
    "end": "934480"
  },
  {
    "text": "we're looking at here is ahead of time compilation which adds another build",
    "start": "934480",
    "end": "941199"
  },
  {
    "text": "phase in so we take the class files we run a tool called native image against",
    "start": "941199",
    "end": "946320"
  },
  {
    "text": "them and that generates our single native executable our single binary",
    "start": "946320",
    "end": "952560"
  },
  {
    "text": "so that's aot or ahead of time compilation you can do this by hand you know you can",
    "start": "952560",
    "end": "958240"
  },
  {
    "text": "use the native image tool directly from the command line but um you don't need to support for that is now you know it",
    "start": "958240",
    "end": "965440"
  },
  {
    "text": "has been available in inside maven and gradle for quite some time now the gravim team has a native build tools",
    "start": "965440",
    "end": "972959"
  },
  {
    "text": "project that provides support for maven and gradle there's plugins for maven for instance which we will look at today and",
    "start": "972959",
    "end": "979759"
  },
  {
    "text": "these help you automate the the process of building your native image so you don't need to think about that you add some configuration to your",
    "start": "979759",
    "end": "986880"
  },
  {
    "text": "maven pom file and from that you can then automatically generate",
    "start": "986880",
    "end": "992399"
  },
  {
    "text": "a native executable of your java application so two things to think about you've got the jit approach to running",
    "start": "992399",
    "end": "997759"
  },
  {
    "text": "your application you're gonna have java in a container and your class files and then we have this extra build step for",
    "start": "997759",
    "end": "1004399"
  },
  {
    "text": "ahead of time compilation where we build a native binary and then that is the",
    "start": "1004399",
    "end": "1009600"
  },
  {
    "text": "thing that we deploy we run we package",
    "start": "1009600",
    "end": "1014399"
  },
  {
    "text": "so i'm using a spring app so it's probably important to talk about the spring native projects now um so the",
    "start": "1014639",
    "end": "1021279"
  },
  {
    "text": "spring native is an experimental project that's working to",
    "start": "1021279",
    "end": "1027600"
  },
  {
    "text": "make using spring apps and turning them into native executables very easy",
    "start": "1027919",
    "end": "1033918"
  },
  {
    "text": "so that you don't have to do anything so if you've got a spring app sorry you can add this dependency add the aot plugin",
    "start": "1033919",
    "end": "1042319"
  },
  {
    "text": "to your pom file and these plugins and this dependency will automatically solve",
    "start": "1042319",
    "end": "1048319"
  },
  {
    "text": "all of the the any issues result related to making the application the spring parts of the application work",
    "start": "1048319",
    "end": "1054880"
  },
  {
    "text": "with gravim native image so for every spring uh component you use the aot plugin is",
    "start": "1054880",
    "end": "1062559"
  },
  {
    "text": "going to generate required config and a few other things to make that seamlessly work with gravim native image this is",
    "start": "1062559",
    "end": "1070000"
  },
  {
    "text": "going to be part of spring boot 3 very soon i haven't updated my application to work with that yet but you know when um",
    "start": "1070000",
    "end": "1077280"
  },
  {
    "text": "it's when spring boot 3 is released you won't need to add these at all i don't believe",
    "start": "1077280",
    "end": "1082480"
  },
  {
    "text": "i think you can just have a spring boot 3 application and you will be able to like ask for the application to be",
    "start": "1082480",
    "end": "1089039"
  },
  {
    "text": "packaged as a native executable i think i think certainly in maven uh",
    "start": "1089039",
    "end": "1094240"
  },
  {
    "text": "using uh profiles so we've looked",
    "start": "1094240",
    "end": "1099760"
  },
  {
    "text": "at what native images we're going to jump back to the code we're going to have a look at how we take that same",
    "start": "1099760",
    "end": "1104960"
  },
  {
    "text": "application that we just wrote and turn it into a native executable i'm not going to need to change the application",
    "start": "1104960",
    "end": "1111120"
  },
  {
    "text": "in any way my java application is going to stay the same but i'm just going to change how we build it and deploy it so",
    "start": "1111120",
    "end": "1117840"
  },
  {
    "text": "if i switch back to my code editor we'll look at the pom.xml i'm just going",
    "start": "1117840",
    "end": "1124880"
  },
  {
    "text": "to resize this window",
    "start": "1124880",
    "end": "1128160"
  },
  {
    "text": "so i've added a profile to the pom.xml and maven profiles allow you to",
    "start": "1131039",
    "end": "1138320"
  },
  {
    "text": "have specific configurations for build so in this case when i type maven package i want it to build my jar file",
    "start": "1138320",
    "end": "1145360"
  },
  {
    "text": "and i want to package that as a docker container with java in it",
    "start": "1145360",
    "end": "1150799"
  },
  {
    "text": "but if i if i call the native profile i want it to package my application as a",
    "start": "1150799",
    "end": "1155840"
  },
  {
    "text": "binary executable for linux and i want to package that binary executable into a",
    "start": "1155840",
    "end": "1162320"
  },
  {
    "text": "docker container so if we take a quick look at this uh maven profile",
    "start": "1162320",
    "end": "1168000"
  },
  {
    "text": "we've added a new plugin here this is the native maven plugin that i talked about this",
    "start": "1168000",
    "end": "1173840"
  },
  {
    "text": "simplifies using native image from inside maven there's a gradle plug-in as well",
    "start": "1173840",
    "end": "1179120"
  },
  {
    "text": "it's very easy to fit in you can pass some configurations so for instance i'm using",
    "start": "1179120",
    "end": "1184960"
  },
  {
    "text": "a property in my maven file to say what the output executable name should be",
    "start": "1184960",
    "end": "1190720"
  },
  {
    "text": "and we can also this is quite important passing extra flags to native image with this build art parameter",
    "start": "1190720",
    "end": "1196400"
  },
  {
    "text": "um for instance i'm asking it you know to give full um exception stack",
    "start": "1196400",
    "end": "1201600"
  },
  {
    "text": "traces if anything goes wrong always a handy thing when you're trying to debug something and i'm also passing in a flag",
    "start": "1201600",
    "end": "1209360"
  },
  {
    "text": "to tell it to create a mostly statically linked executable because we're generating a binary executable we have",
    "start": "1209360",
    "end": "1216799"
  },
  {
    "text": "the ability to statically link it what does that mean it means that any system libraries or",
    "start": "1216799",
    "end": "1222799"
  },
  {
    "text": "any libraries basically that the application needs outside of the javascript can be statically linked into",
    "start": "1222799",
    "end": "1228640"
  },
  {
    "text": "the executable they can become part of the executable so theoretically if you build a fully",
    "start": "1228640",
    "end": "1234159"
  },
  {
    "text": "statically linked executable you can deploy it in a from scratch container an empty container",
    "start": "1234159",
    "end": "1239919"
  },
  {
    "text": "the single executable will contain everything you need for it to run that's today and that",
    "start": "1239919",
    "end": "1247120"
  },
  {
    "text": "the lib muscle tool chain i haven't got that set up on this machine but a nice kind of halfway house is that you can",
    "start": "1247120",
    "end": "1253840"
  },
  {
    "text": "statically link all of the other libraries apart from glib c so on most linux",
    "start": "1253840",
    "end": "1259360"
  },
  {
    "text": "distros glibc is the standard c library it isn't suited to being uh not to being",
    "start": "1259360",
    "end": "1266799"
  },
  {
    "text": "sorry it isn't suited to being statically linked certain parts of it rely on being rely on it being",
    "start": "1266799",
    "end": "1272960"
  },
  {
    "text": "dynamically linked into the application there are some bugs open on glibc relating to this so if you use the",
    "start": "1272960",
    "end": "1280720"
  },
  {
    "text": "mostly statically linked executable you get the a lot of the benefits most of",
    "start": "1280720",
    "end": "1286000"
  },
  {
    "text": "the libraries are baked in and that also means that you can use a very small um container image so in my uh",
    "start": "1286000",
    "end": "1293360"
  },
  {
    "text": "in my docker file i'm going to base that on distributor so i'm going to use a distrolus container to package my native",
    "start": "1293360",
    "end": "1298880"
  },
  {
    "text": "executable basically because distrolus contains glibc but not a lot else you",
    "start": "1298880",
    "end": "1304240"
  },
  {
    "text": "know some configuration etc but it's a very uh very minimalist container the",
    "start": "1304240",
    "end": "1309520"
  },
  {
    "text": "less in the container the smaller arguably the more secure it is and you know the fewer things you have",
    "start": "1309520",
    "end": "1315919"
  },
  {
    "text": "in there that can be hacked so that's the first thing we're using the native maven plug-in to to make building the",
    "start": "1315919",
    "end": "1323280"
  },
  {
    "text": "binary executable easy and again i'm using this spotify plug-in to package",
    "start": "1323280",
    "end": "1328400"
  },
  {
    "text": "that up as a native executable package that up as a docker container",
    "start": "1328400",
    "end": "1334640"
  },
  {
    "text": "sorry so i've written a script to do this but really all this is doing is just calling",
    "start": "1334640",
    "end": "1341039"
  },
  {
    "text": "maven saying correctly yeah calling maven passing in a a profile and a few",
    "start": "1341039",
    "end": "1349120"
  },
  {
    "text": "properties i want to tag my image differently i want this one to be called tagged with",
    "start": "1349120",
    "end": "1354799"
  },
  {
    "text": "so i know this is my native container that's useful so when i push the kubernetes i can start up an instance of",
    "start": "1354799",
    "end": "1361600"
  },
  {
    "text": "the app that contains the native executable and another instance of the app that's based",
    "start": "1361600",
    "end": "1366960"
  },
  {
    "text": "on the java container and i can have them running concurrently in my cluster and you know hit them with requests hit",
    "start": "1366960",
    "end": "1373679"
  },
  {
    "text": "them with requests and then query them to see how they're performing and i'm also able to specify um a docker",
    "start": "1373679",
    "end": "1381280"
  },
  {
    "text": "file so it's worth having a quick look whilst this is building you can see that the output from the native image build",
    "start": "1381280",
    "end": "1388320"
  },
  {
    "text": "is shown below so we're almost done stage five is seven uh my native oh",
    "start": "1388320",
    "end": "1394240"
  },
  {
    "text": "sorry that's my kubernetes my native uh dockerfile is very simple",
    "start": "1394240",
    "end": "1399840"
  },
  {
    "text": "i'm basing it on distrelus bass i've got an argument that lets me pass",
    "start": "1399840",
    "end": "1404880"
  },
  {
    "text": "in the name of the executable i want to load expose a port and then i just copy that",
    "start": "1404880",
    "end": "1410000"
  },
  {
    "text": "into uh copy and rename basically that into the root and then my entry point is slash app so i could use this docker",
    "start": "1410000",
    "end": "1417840"
  },
  {
    "text": "file for you know running almost any binary application that i want to pass in so we're just creating the image now",
    "start": "1417840",
    "end": "1425679"
  },
  {
    "text": "native image is creating the image below it's finished it's been packaged up next",
    "start": "1425679",
    "end": "1431039"
  },
  {
    "text": "in its docker container and when that's run we'll just take a look see if the docker container's been built",
    "start": "1431039",
    "end": "1438399"
  },
  {
    "text": "great okay so that completed without any error messages if i do docker images",
    "start": "1440640",
    "end": "1447520"
  },
  {
    "text": "yeah so there's my native container jibber native so now i've got a native version of the",
    "start": "1449600",
    "end": "1456080"
  },
  {
    "text": "application packaged as docker container and a java version so i said the first",
    "start": "1456080",
    "end": "1461760"
  },
  {
    "text": "thing it does is build the native executable so if we look in our target directory",
    "start": "1461760",
    "end": "1467760"
  },
  {
    "text": "we can see here the jibber application",
    "start": "1467760",
    "end": "1473480"
  },
  {
    "text": "oh sorry",
    "start": "1475520",
    "end": "1478080"
  },
  {
    "text": "such a bad typer there we go so it is just a binary application",
    "start": "1482960",
    "end": "1489840"
  },
  {
    "text": "there's not um it's it has no dependency on the jvm at all",
    "start": "1489840",
    "end": "1495440"
  },
  {
    "text": "so let's run that just to see how it um performs just to show that it can be run",
    "start": "1495440",
    "end": "1500640"
  },
  {
    "text": "so i'm going to run that binary executable put it into the background so it starts really fast 0.04 seconds okay",
    "start": "1500640",
    "end": "1506559"
  },
  {
    "text": "so it's finished i'm starting up in 0.04 seconds and i can just",
    "start": "1506559",
    "end": "1513279"
  },
  {
    "text": "hit the end points again",
    "start": "1513279",
    "end": "1517440"
  },
  {
    "text": "damn my typing is really poor",
    "start": "1521840",
    "end": "1527720"
  },
  {
    "text": "yeah so we've got our application running as a native executable and returning gibberish text",
    "start": "1531520",
    "end": "1539279"
  },
  {
    "text": "which is what we want so it also wasn't very difficult we needed to change some things we'll",
    "start": "1539279",
    "end": "1545039"
  },
  {
    "text": "basically add some uh configuration to our pom file and through the you know adding the spring native plugins and",
    "start": "1545039",
    "end": "1553840"
  },
  {
    "text": "the gravie m plugins to our um our pawn file very easily we were able to take this",
    "start": "1553840",
    "end": "1560640"
  },
  {
    "text": "spring spring boot application and turn it into a native executable so last time",
    "start": "1560640",
    "end": "1565840"
  },
  {
    "text": "when we built the java application we took a look at the size of the um the jar versus the size of the container",
    "start": "1565840",
    "end": "1573600"
  },
  {
    "text": "and we can do the same um now with uh",
    "start": "1573600",
    "end": "1578640"
  },
  {
    "text": "our native executable so this script returns the size of the jar 21 meg the native executable size which is 82 meg",
    "start": "1578640",
    "end": "1586880"
  },
  {
    "text": "the size of our container with the native executable and that's the third row down which is 106 meg and the size",
    "start": "1586880",
    "end": "1595120"
  },
  {
    "text": "of our jdk container so we can see our native container is significantly already significantly",
    "start": "1595120",
    "end": "1602559"
  },
  {
    "text": "smaller so that's that's one of the one way of looking at the footprint i suppose of what your application is how",
    "start": "1602559",
    "end": "1608960"
  },
  {
    "text": "big is its container size okay so we're going to switch back to the slides i hope",
    "start": "1608960",
    "end": "1615760"
  },
  {
    "text": "you're all following along no one's getting seasick with this switching from the editor to the slides",
    "start": "1615760",
    "end": "1622320"
  },
  {
    "text": "i thought it's probably worth having a bit of a recap again we've built a java application we've",
    "start": "1622320",
    "end": "1628000"
  },
  {
    "text": "containerized it that was easy native app and containerized that that",
    "start": "1628000",
    "end": "1633360"
  },
  {
    "text": "actually wasn't that much more difficult we've seen that the native application starts really quickly",
    "start": "1633360",
    "end": "1639679"
  },
  {
    "text": "and we've seen that the containers are smaller so they've got very little in",
    "start": "1639679",
    "end": "1646320"
  },
  {
    "text": "so now we're going to think about you know how we might deploy this um it's kind of interesting to deploy it to",
    "start": "1647600",
    "end": "1654960"
  },
  {
    "text": "kubernetes so that we can look at these metrics that i talked about at the start and so we can have a dashboard that like",
    "start": "1654960",
    "end": "1661039"
  },
  {
    "text": "compares and contrasts the application's performance so we can see if you know using a native xp executable instead of",
    "start": "1661039",
    "end": "1668320"
  },
  {
    "text": "the java runtime to run our application is a sensible choice so if we look at this diagram over on the left you know",
    "start": "1668320",
    "end": "1674799"
  },
  {
    "text": "we've got two streams basically the top we've got our native executable we can see the diagram shows that that's turned",
    "start": "1674799",
    "end": "1681120"
  },
  {
    "text": "into a container and then underneath that we've got our class files and we turn that into a",
    "start": "1681120",
    "end": "1686240"
  },
  {
    "text": "container and then we push those to a container registry so i'm using a container registry uh in oci in the",
    "start": "1686240",
    "end": "1693520"
  },
  {
    "text": "oracle cloud i've also pre-set up",
    "start": "1693520",
    "end": "1698559"
  },
  {
    "text": "an oracle container engine cluster so an okay cluster that's just kubernetes cluster so that kubernetes cluster is",
    "start": "1698559",
    "end": "1706480"
  },
  {
    "text": "going to pull my containers from my container registry and i've pre-deployed",
    "start": "1706480",
    "end": "1711679"
  },
  {
    "text": "to this um excuse me this kubernetes cluster prometheus and grafana and i've",
    "start": "1711679",
    "end": "1718320"
  },
  {
    "text": "wired them all up correctly so that we're able to go to the dashboard and those dashboards know how to you know uh",
    "start": "1718320",
    "end": "1726000"
  },
  {
    "text": "extract information reporting information from the applications deployed to the kubernetes cluster and",
    "start": "1726000",
    "end": "1732159"
  },
  {
    "text": "then finally on the right hand side we've got an api that's fronted like a",
    "start": "1732159",
    "end": "1737440"
  },
  {
    "text": "service that's fronting the the native version of the rest application so we can call that",
    "start": "1737440",
    "end": "1743760"
  },
  {
    "text": "and uh we can get our nonsense text returned from the native version of the containerized application and the same",
    "start": "1743760",
    "end": "1750559"
  },
  {
    "text": "for the java and into that cluster i'm going to deploy some stress testing cron",
    "start": "1750559",
    "end": "1755919"
  },
  {
    "text": "jobs that are going to hit both of those endpoints continuously so that the applications will be running under load",
    "start": "1755919",
    "end": "1762320"
  },
  {
    "text": "and when they're running under load that's going to help us look at the the metrics that we get on graph on our",
    "start": "1762320",
    "end": "1767520"
  },
  {
    "text": "grafana dashboard at the end um and that will help us understand you know what the trade-offs are whether it makes",
    "start": "1767520",
    "end": "1773279"
  },
  {
    "text": "sense to run the application as a native application or as a java runtime or talk",
    "start": "1773279",
    "end": "1778320"
  },
  {
    "text": "for java runtime there's a quick note on um the stress test in the apps when",
    "start": "1778320",
    "end": "1783440"
  },
  {
    "text": "stress testing the apps it's important to try and keep things um fair",
    "start": "1783440",
    "end": "1788720"
  },
  {
    "text": "so the java application um in my kubernetes description for",
    "start": "1788720",
    "end": "1793760"
  },
  {
    "text": "deploying the application i'm fixing the memory i'm giving it 256 meg but i'm allowing it to creep up to 512. the",
    "start": "1793760",
    "end": "1801360"
  },
  {
    "text": "native application i'm fixing its memory at 128 meg and not allowing it to increase and i'm giving the java",
    "start": "1801360",
    "end": "1808559"
  },
  {
    "text": "application and the native application two cores to work with so i'm trying to keep things fair i'm",
    "start": "1808559",
    "end": "1815039"
  },
  {
    "text": "giving the native application a handicap and giving it much less memory but i kind of want to to like you know",
    "start": "1815039",
    "end": "1822080"
  },
  {
    "text": "the um native image can run with a smaller memory footprint and finally i'm",
    "start": "1822080",
    "end": "1827120"
  },
  {
    "text": "using a tool called hey to do the stress testing of both of the applications",
    "start": "1827120",
    "end": "1832799"
  },
  {
    "text": "so we're going to jump back to my brow to my edit circuit editor and",
    "start": "1832799",
    "end": "1838720"
  },
  {
    "text": "terminal and we're going to look at deploying the scripts look at the scripts that deploy the application push the containers",
    "start": "1838720",
    "end": "1844960"
  },
  {
    "text": "and deploy my application to my kubernetes cluster",
    "start": "1844960",
    "end": "1851600"
  },
  {
    "text": "so i'm going to just kick off the script that pushes the containers",
    "start": "1851600",
    "end": "1858159"
  },
  {
    "text": "i've done this earlier so probably it's going to say that they're already there so",
    "start": "1858159",
    "end": "1863279"
  },
  {
    "text": "if i look at the push script not really doing a great deal docker push to my oci repository",
    "start": "1863279",
    "end": "1869679"
  },
  {
    "text": "and then i'm going to look at the deploy script",
    "start": "1869679",
    "end": "1875279"
  },
  {
    "text": "so the way i've written this application in the queue i wanted",
    "start": "1875279",
    "end": "1880559"
  },
  {
    "text": "people to be able to clone it and use their own repository so the solution i've i've used is to put a template in",
    "start": "1880559",
    "end": "1889120"
  },
  {
    "text": "for the um the container registry repo name so that allows you to set this",
    "start": "1889120",
    "end": "1894799"
  },
  {
    "text": "environment variable and um you know for your own container registry",
    "start": "1894799",
    "end": "1900000"
  },
  {
    "text": "so your container registry isn't going to be the same as mine if you're deploying it to cloudx you know oracle cloud aws whatever",
    "start": "1900000",
    "end": "1906480"
  },
  {
    "text": "and then i've used um and the msubs command to replace those templated uh",
    "start": "1906480",
    "end": "1912640"
  },
  {
    "text": "repository names with the real name which exists as an environment variable and then pipe that into",
    "start": "1912640",
    "end": "1918320"
  },
  {
    "text": "cubecontrol so let me just check before i run this that my repo path variable exists yeah okay cool so i",
    "start": "1918320",
    "end": "1926000"
  },
  {
    "text": "can deploy my application to the cloud now this is going to deploy the java application so",
    "start": "1926000",
    "end": "1932960"
  },
  {
    "text": "first it's creating a namespace to deploy everything to that already exists it's then deploying the",
    "start": "1932960",
    "end": "1939440"
  },
  {
    "text": "java version along with the service to frontier the native version and the same for that",
    "start": "1939440",
    "end": "1945600"
  },
  {
    "text": "and in my kubernetes description i can quickly show you these that there's nothing you know",
    "start": "1945600",
    "end": "1950880"
  },
  {
    "text": "very exciting in here",
    "start": "1950880",
    "end": "1953919"
  },
  {
    "text": "i've basically created a specification for the deployment i have",
    "start": "1956240",
    "end": "1962399"
  },
  {
    "text": "given it a name my my container so this is going to use my open jdk version of the app container",
    "start": "1962399",
    "end": "1969120"
  },
  {
    "text": "i've constrained the memory like we talked about i'm opening up a port and then i'm also opening up the um",
    "start": "1969120",
    "end": "1977760"
  },
  {
    "text": "the endpoint the 8080 endpoint to the outside world and i'm using the annotations from oci the load",
    "start": "1977760",
    "end": "1985440"
  },
  {
    "text": "balancer annotations to automatically open up a to automatically sorry spin up",
    "start": "1985440",
    "end": "1991679"
  },
  {
    "text": "the load balancer for me which will handle incoming traffic and i've done the same for exactly the same for the",
    "start": "1991679",
    "end": "1998000"
  },
  {
    "text": "native image the only difference here is that i've constrained the memory sorry i can put it at 128 but i'm allowing it to",
    "start": "1998000",
    "end": "2004960"
  },
  {
    "text": "creep up to 256. so we've deployed the application we really want to see if",
    "start": "2004960",
    "end": "2012240"
  },
  {
    "text": "my app's up and running so i can use cube control to get my services in my namespace",
    "start": "2012240",
    "end": "2020000"
  },
  {
    "text": "this namespace contains just the versions of my applications so my java application and my native",
    "start": "2020000",
    "end": "2027600"
  },
  {
    "text": "image application you can see that there's three rows there rather than the two i've been talking about because i've",
    "start": "2027600",
    "end": "2033039"
  },
  {
    "text": "already deployed um an enterprise gravium enterprise version of the application",
    "start": "2033039",
    "end": "2038159"
  },
  {
    "text": "um if i was going to talk about you know the jit performance that would be interesting but i'm not so let's",
    "start": "2038159",
    "end": "2044000"
  },
  {
    "text": "let's hit that end point for the native version the public endpoint for the native version",
    "start": "2044000",
    "end": "2050480"
  },
  {
    "text": "so i'm going to take the ip address for my load balancer that's",
    "start": "2050480",
    "end": "2056720"
  },
  {
    "text": "fronting out the um the native executable and i can call it",
    "start": "2056720",
    "end": "2063599"
  },
  {
    "text": "and i get some text back and i can do the same as well for the",
    "start": "2063599",
    "end": "2070638"
  },
  {
    "text": "java version except i've got rid of my ip addresses",
    "start": "2071119",
    "end": "2076240"
  },
  {
    "text": "no let's do that again",
    "start": "2076240",
    "end": "2079280"
  },
  {
    "text": "so this one's going to hit the load balancer for the java",
    "start": "2087520",
    "end": "2093040"
  },
  {
    "text": "application yep 8080 and we should get some nonsense",
    "start": "2093040",
    "end": "2098800"
  },
  {
    "text": "first back brilliant so we know our applications are up and running i've also set up a namespace you know i",
    "start": "2098800",
    "end": "2105839"
  },
  {
    "text": "said that i had pre-configured [Music]",
    "start": "2105839",
    "end": "2111609"
  },
  {
    "text": "kubernetes sorry in kubernetes i'd already pre-configured prometheus and",
    "start": "2113760",
    "end": "2119520"
  },
  {
    "text": "grafana so that i would have a way of grabbing uh information about the running applications and displaying it",
    "start": "2119520",
    "end": "2125119"
  },
  {
    "text": "in a dashboard so i've got my my url here for my grafana instance",
    "start": "2125119",
    "end": "2130640"
  },
  {
    "text": "and if i jump to the web browser up i've already got it",
    "start": "2130640",
    "end": "2137280"
  },
  {
    "text": "open so let's run it and take a look at this dashboard so there are three components to this",
    "start": "2137280",
    "end": "2143520"
  },
  {
    "text": "dashboard and i should explain what they do so the first one is measuring the",
    "start": "2143520",
    "end": "2148560"
  },
  {
    "text": "throughput and it's measuring the throughput of the the native executable running inside a container",
    "start": "2148560",
    "end": "2156000"
  },
  {
    "text": "that we deployed to my kubernetes cluster and also the uh performance of the java",
    "start": "2156000",
    "end": "2162240"
  },
  {
    "text": "version of the application the throughput i should say the java application running in a container so i've got two containers my native one",
    "start": "2162240",
    "end": "2169599"
  },
  {
    "text": "and my java version of the application and i'm hitting both of those concurrently",
    "start": "2169599",
    "end": "2174960"
  },
  {
    "text": "with a stress test request so i'm hitting the url for the jibber app jibber endpoint",
    "start": "2174960",
    "end": "2180720"
  },
  {
    "text": "and asking for nonsense first continuously so both apps are under load and we can see that",
    "start": "2180720",
    "end": "2186880"
  },
  {
    "text": "basically they've got very similar performance the yellow line on the top graph the throughput graph which is in",
    "start": "2186880",
    "end": "2194480"
  },
  {
    "text": "numbers of requests per second is the native images throughput so the",
    "start": "2194480",
    "end": "2200720"
  },
  {
    "text": "native executable is slightly on average slightly better than the um version of",
    "start": "2200720",
    "end": "2206400"
  },
  {
    "text": "the application running on open jdk but we're guessing it looks to me roughly about 770 requests per second",
    "start": "2206400",
    "end": "2214160"
  },
  {
    "text": "have been served by either application your mileage may vary with this",
    "start": "2214160",
    "end": "2220320"
  },
  {
    "text": "obviously you know your performance uh will depend on what the application is doing some applications native image may",
    "start": "2220320",
    "end": "2227440"
  },
  {
    "text": "the native executable will perform exactly the same some applications it might perform slightly better other applications it",
    "start": "2227440",
    "end": "2233760"
  },
  {
    "text": "might perform slightly worse but we're aiming to get the performance of the native executable that's generated with",
    "start": "2233760",
    "end": "2240560"
  },
  {
    "text": "native image up to and approaching the same performance that you would get on open jdk we've got some optimization",
    "start": "2240560",
    "end": "2248079"
  },
  {
    "text": "tools that can really push the performance there won't have time to talk about those in depth in this talk",
    "start": "2248079",
    "end": "2254240"
  },
  {
    "text": "but i'll mention them a little at the end so key thing about the top graph we're getting very similar um",
    "start": "2254240",
    "end": "2259280"
  },
  {
    "text": "performance in fact slightly better for native image the next graph down is there",
    "start": "2259280",
    "end": "2265760"
  },
  {
    "text": "if i can interject really quickly there's a question in the chat uh now might be a good time to kind of to work",
    "start": "2265760",
    "end": "2271760"
  },
  {
    "text": "this answer in are there any gotchas to be aware of given all of the improvements uh",
    "start": "2271760",
    "end": "2277440"
  },
  {
    "text": "i.e reduction in size of the jar and the jdk",
    "start": "2277440",
    "end": "2282560"
  },
  {
    "text": "yes they're definitely they definitely are and that's what the spring native um tooling is kind of trying is hiding from",
    "start": "2282560",
    "end": "2288560"
  },
  {
    "text": "you so i tell you what i'll do eli i'll finish talking about this graph and then i'll i'll i'll talk about that topic",
    "start": "2288560",
    "end": "2294800"
  },
  {
    "text": "actually i might actually just talk about that at the end because only got a couple of slides to go but i think that's a very important point",
    "start": "2294800",
    "end": "2301680"
  },
  {
    "text": "so um the so it's a very good question thank you for asking it so the next graph down is the uh the container",
    "start": "2301680",
    "end": "2308240"
  },
  {
    "text": "memory so how much memory resident set size is each container using and in this",
    "start": "2308240",
    "end": "2313920"
  },
  {
    "text": "case really it would have been ideal if i had kept the same colors for the same containers but i haven't i've just",
    "start": "2313920",
    "end": "2319680"
  },
  {
    "text": "noticed the graviem native executable is in green",
    "start": "2319680",
    "end": "2325280"
  },
  {
    "text": "and that's using about 100 yeah slightly over 100 meg 116 meg",
    "start": "2325280",
    "end": "2331920"
  },
  {
    "text": "um in 115 meg in resident set size the java application is using 238",
    "start": "2331920",
    "end": "2338640"
  },
  {
    "text": "so we're using half the memory for a very similar performance um the final uh graph is the startup",
    "start": "2338640",
    "end": "2346160"
  },
  {
    "text": "times well we knew that they you know native the native executable would start much faster because we'd seen that when",
    "start": "2346160",
    "end": "2351760"
  },
  {
    "text": "we looked at the command line but this information again has been pulled from like the spring actuator so 35",
    "start": "2351760",
    "end": "2359040"
  },
  {
    "text": "milliseconds for um the gravim native executable to start up",
    "start": "2359040",
    "end": "2364720"
  },
  {
    "text": "and the java application you know two to three seconds to start up so realistic times for the spring application really",
    "start": "2364720",
    "end": "2371599"
  },
  {
    "text": "you know what we would expect for a java spring application to start up in you know second time spans one to two to",
    "start": "2371599",
    "end": "2377440"
  },
  {
    "text": "three and the native executable is starting up in you know significantly under you know",
    "start": "2377440",
    "end": "2382800"
  },
  {
    "text": "the tenth of a second so i'm gonna quickly jump back to the slides",
    "start": "2382800",
    "end": "2388640"
  },
  {
    "text": "again you know this is just what i've shown you the cont different ways we can look at the footprint contain a footprint you",
    "start": "2388640",
    "end": "2396000"
  },
  {
    "text": "know the containers got smaller but we can also think about like the memory usage in the cloud when we've deployed",
    "start": "2396000",
    "end": "2401119"
  },
  {
    "text": "that application in this example again your mileage may vary and we got the same performance for half",
    "start": "2401119",
    "end": "2407760"
  },
  {
    "text": "the memory and it wasn't that difficult to make a native executable from the application",
    "start": "2407760",
    "end": "2415119"
  },
  {
    "text": "so this is just one example i think that's a key takeaway you know low footprint if you're interested in low",
    "start": "2415119",
    "end": "2420319"
  },
  {
    "text": "footprint native images it is definitely an interesting technology and can provide that for you if you have long",
    "start": "2420319",
    "end": "2426560"
  },
  {
    "text": "running applications you know days months years um",
    "start": "2426560",
    "end": "2431680"
  },
  {
    "text": "uh the graveyard enterprise edition jvm would probably make sense because you've got the jit compiler in there and its",
    "start": "2431680",
    "end": "2437359"
  },
  {
    "text": "performance is going to be very very good so very long running applications we you don't care about the footprint so",
    "start": "2437359",
    "end": "2443119"
  },
  {
    "text": "much perhaps you know a traditional jit mode would make sense we've got different uh we support different",
    "start": "2443119",
    "end": "2449119"
  },
  {
    "text": "garbage collection um garbage collectors i suppose you'd say inside native image",
    "start": "2449119",
    "end": "2455920"
  },
  {
    "text": "in the enterprise edition you can have epsilon serial gc and g1 g1 is our",
    "start": "2455920",
    "end": "2461119"
  },
  {
    "text": "implementation of the g1 gc in java throughput if you really care about",
    "start": "2461119",
    "end": "2466720"
  },
  {
    "text": "performance with native image you can use g1 to ensure you get consistent latencies in",
    "start": "2466720",
    "end": "2472960"
  },
  {
    "text": "responses there's no stop the world pauses that you can see with our serial gc uh pgo our profile guided optimizations",
    "start": "2472960",
    "end": "2481440"
  },
  {
    "text": "with that you can really improve the throughput and performance of the application like drastically",
    "start": "2481440",
    "end": "2487760"
  },
  {
    "text": "we talked a bit about static linking and finally it's supported by you know lots of different frameworks spring native",
    "start": "2487760",
    "end": "2494079"
  },
  {
    "text": "that's what i'm showing you here but micronaut um which is an independent project helidom from oracle and quarkus from red",
    "start": "2494079",
    "end": "2501359"
  },
  {
    "text": "hat all of these target uh gravim native image as a deployment target they want to build a",
    "start": "2501359",
    "end": "2507359"
  },
  {
    "text": "native executable that starts fast and has a low footprint as a way of packaging their applications",
    "start": "2507359",
    "end": "2513680"
  },
  {
    "text": "so gotchas i'll go back to the question that eli asked i think it's very important question",
    "start": "2513680",
    "end": "2518800"
  },
  {
    "text": "and yes there are native image in order to get a lot of these benefits native image makes certain assumptions",
    "start": "2518800",
    "end": "2525520"
  },
  {
    "text": "it operates under what's called the closed world assumption so i'm in a java is a very dynamic",
    "start": "2525520",
    "end": "2531040"
  },
  {
    "text": "language you can load classes in your application you can build up the name of the class",
    "start": "2531040",
    "end": "2538079"
  },
  {
    "text": "you know programmatically you can load resources off the class path there's all kinds of you can do reflection",
    "start": "2538079",
    "end": "2543920"
  },
  {
    "text": "you can find out about oops sorry you can find out about the methods an object has or you know what objects are",
    "start": "2543920",
    "end": "2550560"
  },
  {
    "text": "available in a package for instance all sorts of things it's a very dynamic language native image",
    "start": "2550560",
    "end": "2556720"
  },
  {
    "text": "comes at the comes at this with the assumption that it's a closed world imagine that you can't do any of those",
    "start": "2556720",
    "end": "2562319"
  },
  {
    "text": "dynamic things you can't load classes you know dynamically you can't use reflection etc",
    "start": "2562319",
    "end": "2568400"
  },
  {
    "text": "you would think that you wouldn't really be able to generate many java applications but um it turns out that you can and the",
    "start": "2568400",
    "end": "2575200"
  },
  {
    "text": "way we've been able to do that is through making",
    "start": "2575200",
    "end": "2580960"
  },
  {
    "text": "been able to tell basically the build time for native image about like these dynamic features of the language say for",
    "start": "2580960",
    "end": "2587040"
  },
  {
    "text": "instance your your java program uses reflection to look up a certain class and to find out",
    "start": "2587040",
    "end": "2593040"
  },
  {
    "text": "what methods are available well if we know that that's going to happen we can build configuration files that tell",
    "start": "2593040",
    "end": "2599599"
  },
  {
    "text": "native image that this is going to happen so when it builds it knows that it happens it knows it can add that class",
    "start": "2599599",
    "end": "2606400"
  },
  {
    "text": "that's going to be accessed reflectively to like the closed world that it's operating on",
    "start": "2606400",
    "end": "2613280"
  },
  {
    "text": "um same goes for class loading you know loading resources of the class path",
    "start": "2613280",
    "end": "2619200"
  },
  {
    "text": "and that sounds like it might be kind of a laborious process to build all this configuration for yourself but we um we",
    "start": "2619200",
    "end": "2624720"
  },
  {
    "text": "have a java agent so when you run your application um you run it as a java application you can",
    "start": "2624720",
    "end": "2631359"
  },
  {
    "text": "pass you can run it with this java the native image java agent that basically traces your application looks for",
    "start": "2631359",
    "end": "2638640"
  },
  {
    "text": "instances of you know uh reflection um you know dynamic class loading any",
    "start": "2638640",
    "end": "2644560"
  },
  {
    "text": "anything like that uh serialization and it saves the configuration that you would have had to write by hand",
    "start": "2644560",
    "end": "2650640"
  },
  {
    "text": "automatically directly to these configuration files then when you build these configuration",
    "start": "2650640",
    "end": "2656560"
  },
  {
    "text": "files are used to provide this kind of missing information to native image lots of libraries are packaging this",
    "start": "2656560",
    "end": "2663920"
  },
  {
    "text": "information directly with the the jar for the um the library so that",
    "start": "2663920",
    "end": "2669040"
  },
  {
    "text": "i mean that's kind of what the the spring native stuff is doing it's providing this missing configuration to",
    "start": "2669040",
    "end": "2675200"
  },
  {
    "text": "you so when you run the application there's a step where the spring native",
    "start": "2675200",
    "end": "2680400"
  },
  {
    "text": "um plug-in looks at the application looks at the class path looks at what's going on and builds extra",
    "start": "2680400",
    "end": "2687200"
  },
  {
    "text": "classes and extra configuration that your application will need the spring application will need in order to be",
    "start": "2687200",
    "end": "2693040"
  },
  {
    "text": "turned into like a native executable so there's lots of tooling that's been put",
    "start": "2693040",
    "end": "2698560"
  },
  {
    "text": "in place certainly in the frameworks that i mentioned previously spring uh spring boots sorry uh micron or",
    "start": "2698560",
    "end": "2705680"
  },
  {
    "text": "helizon and quarkus to make this like as easy as possible if you're using a library that isn't you know native image",
    "start": "2705680",
    "end": "2712319"
  },
  {
    "text": "friendly yet you may have to resolve some of these issues you know by using the java agent to generate the config",
    "start": "2712319",
    "end": "2718560"
  },
  {
    "text": "for you and you can get applications to work the you know maybe use libraries that use a",
    "start": "2718560",
    "end": "2723760"
  },
  {
    "text": "lot of reflection so i'm going to see if there are other questions in the chats",
    "start": "2723760",
    "end": "2731640"
  },
  {
    "text": "so that was a good question",
    "start": "2732480",
    "end": "2736079"
  },
  {
    "text": "yes the gotchas i mean if anyone has any further questions you know please feel free to ask an eli i'll go back to my",
    "start": "2738079",
    "end": "2744319"
  },
  {
    "text": "slide because it's better to look at really than this if you want to read out if anyone has any questions if not thank",
    "start": "2744319",
    "end": "2750000"
  },
  {
    "text": "you very much for your time today attending i hope um i hope it made sense what i was talking",
    "start": "2750000",
    "end": "2755200"
  },
  {
    "text": "about and you know the slides will be available all the code is available in a",
    "start": "2755200",
    "end": "2760400"
  },
  {
    "text": "repository on github as well if you want to play with it and if there are any errors or you know",
    "start": "2760400",
    "end": "2766160"
  },
  {
    "text": "sharp edges please feel free to make a pr i would be very grateful",
    "start": "2766160",
    "end": "2772640"
  },
  {
    "text": "yes anyone else any questions",
    "start": "2773040",
    "end": "2776880"
  },
  {
    "text": "all right well chris and eli thank you both so much thanks for a great presentation um",
    "start": "2780800",
    "end": "2789359"
  },
  {
    "text": "and everyone thanks for joining us like chris said this will be posted to the website via your registration link",
    "start": "2789359",
    "end": "2796160"
  },
  {
    "text": "also on the uh cncf youtube uh playlist for online programs",
    "start": "2796160",
    "end": "2802560"
  },
  {
    "text": "and up there's one more question we'll hang tight are there any frameworks or spring",
    "start": "2802560",
    "end": "2807760"
  },
  {
    "text": "modules that are known to be unsupported uh at the moment i'm not entirely sure",
    "start": "2807760",
    "end": "2814800"
  },
  {
    "text": "if you go to the spring native um site for instance i think there's documentation on there that why don't we",
    "start": "2814800",
    "end": "2821760"
  },
  {
    "text": "do that let's just",
    "start": "2821760",
    "end": "2825880"
  },
  {
    "text": "so this is the documentation for the spring native site uh for the spring native project sorry",
    "start": "2834960",
    "end": "2840319"
  },
  {
    "text": "it it's pretty good documentation it's worth looking through because it can explain in detail how to use",
    "start": "2840319",
    "end": "2846720"
  },
  {
    "text": "um how to use this and how to build native images i thought there was a list of",
    "start": "2846720",
    "end": "2852800"
  },
  {
    "text": "things that are known to be supported the other thing you can do",
    "start": "2852800",
    "end": "2858319"
  },
  {
    "text": "yeah here we go so these things require no special build configuration they will just work i i",
    "start": "2858319",
    "end": "2864319"
  },
  {
    "text": "guess that's what they're saying you know jpa for instance data jpa like neo4j",
    "start": "2864319",
    "end": "2870480"
  },
  {
    "text": "and logging jdbc so there's lots and lots of things that are known to be working",
    "start": "2870480",
    "end": "2876720"
  },
  {
    "text": "i'm sure that if there are things that aren't working that's also documented somewhere",
    "start": "2876720",
    "end": "2883520"
  },
  {
    "text": "uh my typically also go to um",
    "start": "2883520",
    "end": "2889440"
  },
  {
    "text": "the spring native",
    "start": "2889440",
    "end": "2892400"
  },
  {
    "text": "repo and in the samples",
    "start": "2895280",
    "end": "2902720"
  },
  {
    "text": "um project there's a quite an exhaustive list of um sample",
    "start": "2902720",
    "end": "2909599"
  },
  {
    "text": "project samples that are known to work so for instance if you're interested in kafka kafka streams rabbit mq",
    "start": "2909599",
    "end": "2916160"
  },
  {
    "text": "you could let's take this one you could go into there and there should be a working project that shows you how to",
    "start": "2916160",
    "end": "2922480"
  },
  {
    "text": "use that particular spring module with uh native with native image that is",
    "start": "2922480",
    "end": "2930000"
  },
  {
    "text": "meaning to generate like a native executable i hope that answers the question i think i probably answered that quite a",
    "start": "2930000",
    "end": "2936400"
  },
  {
    "text": "long-winded way sorry that's great",
    "start": "2936400",
    "end": "2943359"
  },
  {
    "text": "all right last call for anyone else",
    "start": "2943359",
    "end": "2947680"
  },
  {
    "text": "no i think we're good right all right i think so thank you both again so much thank you",
    "start": "2952400",
    "end": "2958640"
  },
  {
    "text": "everyone for joining us um everything will get posted shortly and we'll see you next time for another",
    "start": "2958640",
    "end": "2965440"
  },
  {
    "text": "live webinar with cncf",
    "start": "2965440",
    "end": "2969240"
  }
]