[
  {
    "text": "hi everyone thank you for coming to our talk my name is iron Schneider I'm the",
    "start": "480",
    "end": "5640"
  },
  {
    "text": "CTO and co-founder of a company called diagrid and we are commercializing the Dapper open source project which I",
    "start": "5640",
    "end": "12200"
  },
  {
    "text": "helped create uh while I was at Microsoft before diagrid and the grer with me here we",
    "start": "12200",
    "end": "17800"
  },
  {
    "text": "have arker I'm engineering for Di and also Dapper yes we're both maintainers",
    "start": "17800",
    "end": "24800"
  },
  {
    "text": "of dapper um I'm a steering committee member of the project Arthur was a steering committee member of the project in the past",
    "start": "24800",
    "end": "30480"
  },
  {
    "text": "we're happy to be here and help you talk about how we do quality control and testing um in what we call a multicloud",
    "start": "30480",
    "end": "36960"
  },
  {
    "text": "runtime so what is a multicloud runtime Dapper is an example of one but it might",
    "start": "36960",
    "end": "42079"
  },
  {
    "text": "just be any sort of application that is deployed to a multicloud environment needs to talk to uh multiples of you",
    "start": "42079",
    "end": "48520"
  },
  {
    "text": "know Services Cloud providers libraries they interact with the underlying Cloud infrastructure it's essentially anything",
    "start": "48520",
    "end": "54039"
  },
  {
    "text": "that can run in a cloud environment needs to interact with either multiple services within that cloud environment",
    "start": "54039",
    "end": "59559"
  },
  {
    "text": "or across Cloud environments and so this comes with lots of challenges because you need to start writing you know",
    "start": "59559",
    "end": "66920"
  },
  {
    "text": "different lay in your application to interact with that infrastructure to secure it to make it reliable and",
    "start": "66920",
    "end": "72759"
  },
  {
    "text": "there's lots of you know examples from that let's take kubernetes for example kinetes is obviously a multicloud",
    "start": "72759",
    "end": "78520"
  },
  {
    "text": "runtime because well it interacts with the cloud infrastructure kinetes has a cloud provider uh layer that interacts",
    "start": "78520",
    "end": "85240"
  },
  {
    "text": "with things like Network compute and storage from the cloud provider uh upon which you run Dapper is a really good",
    "start": "85240",
    "end": "91040"
  },
  {
    "text": "example um because it does over 150 different connecting connections to all",
    "start": "91040",
    "end": "96799"
  },
  {
    "text": "of these cloud services and uh if we really look at Dapper and we're going to talk about how we're doing testing in",
    "start": "96799",
    "end": "102680"
  },
  {
    "text": "dapper today but I assure you you can take all of the lessons here to your applications uh whether they're using",
    "start": "102680",
    "end": "108000"
  },
  {
    "text": "Dapper or not um Dapper is a set of apis for developers to encapsulate distributed systems challenges instead",
    "start": "108000",
    "end": "115240"
  },
  {
    "text": "of you needing to write the same old Border plate code that needs to interact with a database or pubs or a",
    "start": "115240",
    "end": "120520"
  },
  {
    "text": "configuration store or a Secrets management store Dapper gives you these best practices encapsulated in a set of",
    "start": "120520",
    "end": "126560"
  },
  {
    "text": "apis that you can use to run on top of any cloud or Edge infrastructure it can",
    "start": "126560",
    "end": "131599"
  },
  {
    "text": "run as a single binary on your machine on a VM um or on kinetes with a control",
    "start": "131599",
    "end": "137680"
  },
  {
    "text": "plane and you can really use it from any type of program language um and this is essentially what Dapper does you have",
    "start": "137680",
    "end": "143599"
  },
  {
    "text": "your application here on the left you have a Dapper instance can really run anywhere on the right and you have a bunch of apis the dapper exposes for",
    "start": "143599",
    "end": "150480"
  },
  {
    "text": "example to discover services or to get State and save State uh to publish And subscribe to topic messages and do",
    "start": "150480",
    "end": "157200"
  },
  {
    "text": "Secrets management this is four apis out of nine that thater has including leader election uh workflows as code kind of",
    "start": "157200",
    "end": "164120"
  },
  {
    "text": "like a temporal uh kind of thing and um behind all of these things there is a",
    "start": "164120",
    "end": "170239"
  },
  {
    "text": "wide array of different infrastructure components that you can hook up dapper too so for example if you're running in",
    "start": "170239",
    "end": "176599"
  },
  {
    "text": "AWS as a developer you get a single consistent API can basically tell Dapper hey Dapper I want you to work against",
    "start": "176599",
    "end": "183120"
  },
  {
    "text": "Dynamo Tob then once you deploy to a different environment for example let's say you're deploying to open shift on",
    "start": "183120",
    "end": "188159"
  },
  {
    "text": "premises you can tell Dapper hey I want you to work against Cassandra and if we're deploying to Azure it can be Azure",
    "start": "188159",
    "end": "193640"
  },
  {
    "text": "C Tob Google Firebase you get the gist the these are just some examples here on the right but as I said earlier Dapper",
    "start": "193640",
    "end": "200000"
  },
  {
    "text": "supports over 150 um of these components this Tex is outdated we should change",
    "start": "200000",
    "end": "205080"
  },
  {
    "text": "that um and so new components are getting added by the community as the community grows and Dapper really is a",
    "start": "205080",
    "end": "211840"
  },
  {
    "text": "very large project in cncf I think we're the 12th largest project today um lots of companies are investing in it uh",
    "start": "211840",
    "end": "218720"
  },
  {
    "text": "contributing to the different Cloud connectivity components that Dapper has and we need to assert control over that",
    "start": "218720",
    "end": "225840"
  },
  {
    "text": "we need to make sure that everything is properly tested and that it's you know uh that it's uh meeting our quality why",
    "start": "225840",
    "end": "232200"
  },
  {
    "text": "because very large organizations including NASA Nvidia PWC and many others are using dint production today",
    "start": "232200",
    "end": "238840"
  },
  {
    "text": "it's powering up the entire Cloud infrastructure for f for Alibaba Cloud um also Microsoft Azure running it as a",
    "start": "238840",
    "end": "245439"
  },
  {
    "text": "man service so it's firing up some pretty critical infrastructure today and we as open source maintainers need to",
    "start": "245439",
    "end": "250599"
  },
  {
    "text": "make sure that every line of code that gets committed in the project is very very well tested um and that we check",
    "start": "250599",
    "end": "256519"
  },
  {
    "text": "for regressions and so how do we do that um well we start off with unit tests",
    "start": "256519",
    "end": "261880"
  },
  {
    "text": "right that's the most basic form of testing that we can have and you know one of the things that I like the most",
    "start": "261880",
    "end": "268040"
  },
  {
    "text": "and of course I'm being very cynical here just want to make that clear um is you know discussions like oh we should",
    "start": "268040",
    "end": "273440"
  },
  {
    "text": "have 80% of code tested or 75% and you come up with a magic number that's",
    "start": "273440",
    "end": "278479"
  },
  {
    "text": "basically like oh we should have you know 95% some people the you know very brave people are like oh we should have",
    "start": "278479",
    "end": "284280"
  },
  {
    "text": "all of our code unit tested literally every function um that's very difficult to achieve um and so there's additional",
    "start": "284280",
    "end": "290600"
  },
  {
    "text": "forms of testing that you know can make up for these very unrealistic expectations to test a percent of your",
    "start": "290600",
    "end": "295840"
  },
  {
    "text": "code and we're going to talk about that um but really you know if we're looking at at the entire pipeline for you know",
    "start": "295840",
    "end": "301000"
  },
  {
    "text": "build your code test your code um then provide the infrastructure that's being tested by this code it gets deployed and",
    "start": "301000",
    "end": "306880"
  },
  {
    "text": "then you run into issues because obviously there's one thing the one thing you didn't test for broken production and then you're going to",
    "start": "306880",
    "end": "312759"
  },
  {
    "text": "write test for it retroactively which is you know an unfortunate reality of life",
    "start": "312759",
    "end": "317960"
  },
  {
    "text": "like you know the Earth being not flat for example um which leads to time zones",
    "start": "317960",
    "end": "323360"
  },
  {
    "text": "issues you know especially with remote work well I'm digesting here um writing tests in with different granular",
    "start": "323360",
    "end": "330120"
  },
  {
    "text": "this one is a doozy because once you start talking about unit tests um you know you're suddenly like oh I need to",
    "start": "330120",
    "end": "336919"
  },
  {
    "text": "spin up a web server and how do I do that and so we introduce end to end tests which are at the top of the",
    "start": "336919",
    "end": "342600"
  },
  {
    "text": "pyramid if you need test you really test you know the most granular type of uh testing than end to endend tests are",
    "start": "342600",
    "end": "348360"
  },
  {
    "text": "literally what they say they are they test your system end to end and Arthur I think you can talk about that yes thank",
    "start": "348360",
    "end": "355400"
  },
  {
    "text": "you Adam for the great introduction and here's the clicker you're probably going to need it uh we're not mind synced yet",
    "start": "355400",
    "end": "361199"
  },
  {
    "text": "we're almost there so um yeah so we start with um entn tests and in this",
    "start": "361199",
    "end": "366240"
  },
  {
    "text": "presentation we're going to build together this pyramid you're going to see all type of layers that we have in our test infrastructure for Dapper and",
    "start": "366240",
    "end": "373479"
  },
  {
    "text": "uh we expect that you can take some of those also for your project um and you're going to notice that like",
    "start": "373479",
    "end": "379639"
  },
  {
    "text": "automation uh really your test coverage for unit test does not really mean a whole lot because what we're really",
    "start": "379639",
    "end": "385400"
  },
  {
    "text": "looking for is coverage of scenarios uh what are the scenarios that a user are",
    "start": "385400",
    "end": "391639"
  },
  {
    "text": "using that will uh actually be tested for example are using Tas with cators",
    "start": "391639",
    "end": "396800"
  },
  {
    "text": "with kind with version commat are using so so many combinations that can go uh in the N2 tests um so let's start with",
    "start": "396800",
    "end": "403560"
  },
  {
    "text": "how we started that route the the journey um first we deploy communi",
    "start": "403560",
    "end": "410840"
  },
  {
    "text": "cluster we have the daa control plan installed we have daa with an an",
    "start": "410840",
    "end": "417199"
  },
  {
    "text": "application a few applications running we have a database because we want to implement the daer building blocks so",
    "start": "417199",
    "end": "423319"
  },
  {
    "text": "let's say Stage store so you a database for that you need a broker because you might be using uh you might be testing",
    "start": "423319",
    "end": "429440"
  },
  {
    "text": "uh Pub up uh so and then we go here above and we have a test code the test",
    "start": "429440",
    "end": "435360"
  },
  {
    "text": "code runs on GitHub actions but you can use whatever technology you want and that will exercise multiple scenarios in",
    "start": "435360",
    "end": "441800"
  },
  {
    "text": "this complete installation of dapper on top of communities but just commun is not enough so we run this on kind and on",
    "start": "441800",
    "end": "450120"
  },
  {
    "text": "Azure and kind Here Comes really handy and that's one thing I highly recommend which is it allow us to test the",
    "start": "450120",
    "end": "456440"
  },
  {
    "text": "entrance tests at the PO request we don't need to actually provision anything on Azure or any other Cloud",
    "start": "456440",
    "end": "463520"
  },
  {
    "text": "that we can add here because count kind allow us to run to get a shorter term feedback a shorter feedback from the PO",
    "start": "463520",
    "end": "470240"
  },
  {
    "text": "request so we have a PO request in oper we make sure that the ENT test pass even",
    "start": "470240",
    "end": "475400"
  },
  {
    "text": "before we merge so we want to have that was like the very basic uh Foundation that we started testing daer and I will",
    "start": "475400",
    "end": "482440"
  },
  {
    "text": "just say uh GitHub action Runners do not like kind they're like go away every",
    "start": "482440",
    "end": "488039"
  },
  {
    "text": "time they see a kind of C it's like I'm going to do everything I can to destroy you I'm G to mess up the network I'm",
    "start": "488039",
    "end": "494360"
  },
  {
    "text": "going to you know screw up the file system everything can go wrong can go wrong but in the end it's a really really good thing so yes I do recommend",
    "start": "494360",
    "end": "501360"
  },
  {
    "text": "putting kind inside of gate of actions because it's much cheaper than you know uh running the entire thing in a cloud",
    "start": "501360",
    "end": "507599"
  },
  {
    "text": "which might bankrupt you exact exactly so thanks for for so as you can see going back to the slide U that means",
    "start": "507599",
    "end": "515479"
  },
  {
    "text": "that the upper you are in the pyamid more integration it's slower but also",
    "start": "515479",
    "end": "522000"
  },
  {
    "text": "flakier so we cannot just put everything on the ENT test uh",
    "start": "522000",
    "end": "527160"
  },
  {
    "text": "Port uh so next step performance test want to yeah I'll talk about performance test because I implemented them in Deer",
    "start": "527160",
    "end": "534279"
  },
  {
    "text": "and I'm really proud of them um so obviously you know want to test scenarios want to test that certain",
    "start": "534279",
    "end": "539760"
  },
  {
    "text": "actions of the or certain aspects of the code aren't broken but Dapper also really fronts your interactions with the",
    "start": "539760",
    "end": "545600"
  },
  {
    "text": "underlying infrastructure you use it to connect to your database and your pubsub and uh to make them more secure but we",
    "start": "545600",
    "end": "552200"
  },
  {
    "text": "really want to make sure the Dapper is as performant as possible and that new code that gets checked in doesn't",
    "start": "552200",
    "end": "557519"
  },
  {
    "text": "actually uh cause regressions in terms of performance so we have a performance tests and these look kind of familiar or",
    "start": "557519",
    "end": "564040"
  },
  {
    "text": "similar to uh the ones in the Inn test and what we're doing is we have applications that are talking the Dapper",
    "start": "564040",
    "end": "569680"
  },
  {
    "text": "apis they saving State and we run something called a baseline um as",
    "start": "569680",
    "end": "575200"
  },
  {
    "text": "opposed to the the Dapper test so we have a baseline test which is the application goes to something like radis",
    "start": "575200",
    "end": "581079"
  },
  {
    "text": "directly then we have the same app goes go to radis through Dapper to basically be able to measure the added latency and",
    "start": "581079",
    "end": "587720"
  },
  {
    "text": "throughput uh that Dapper is adding or degrading to uh for that uh specific",
    "start": "587720",
    "end": "592959"
  },
  {
    "text": "scenario and we are using um foro which is a project that is doing performance",
    "start": "592959",
    "end": "599519"
  },
  {
    "text": "test for Io um and we're moving that over to k6s which is a a load testing",
    "start": "599519",
    "end": "604640"
  },
  {
    "text": "tool on kubernetes highly recommend using that one the reason we moved from foro which is used by stto to k6x is",
    "start": "604640",
    "end": "611440"
  },
  {
    "text": "because foro doesn't have really good support for grpc um all the way uh",
    "start": "611440",
    "end": "616480"
  },
  {
    "text": "through so the hdp is really good with 4o grpc less of an experience so we're moving everything to uh k6x and um that",
    "start": "616480",
    "end": "625519"
  },
  {
    "text": "allows us really to test the different daper building blocks end to end and see how latency and or throughput Dapper",
    "start": "625519",
    "end": "631680"
  },
  {
    "text": "adds to each one of these scenarios so in terms of their place in",
    "start": "631680",
    "end": "637360"
  },
  {
    "text": "the stack we're placing them right underneath end to endend tests the also mention that for forio foro uh we also",
    "start": "637360",
    "end": "644920"
  },
  {
    "text": "contributed to a feature as our work on Dapper uh if you go to foro you can generate a dynamically URL with your uid",
    "start": "644920",
    "end": "652399"
  },
  {
    "text": "that was a feature contributed by us as part of our work with them yes we like to contribute features to many",
    "start": "652399",
    "end": "658440"
  },
  {
    "text": "Frameworks we use in Dapper and make them better for our use cases all right and then we have l hole",
    "start": "658440",
    "end": "666160"
  },
  {
    "text": "tests okay um so lold tests um it's we",
    "start": "666160",
    "end": "671959"
  },
  {
    "text": "notice that ENT test and promise test are not enough uh again go back to scenarios why",
    "start": "671959",
    "end": "678079"
  },
  {
    "text": "because you run your tests they might run for an hour maybe two uh ideally",
    "start": "678079",
    "end": "683399"
  },
  {
    "text": "less than that and then the end and the stop but you don't really catch problems",
    "start": "683399",
    "end": "688800"
  },
  {
    "text": "where the customer actually is running for a long time so long haul means just",
    "start": "688800",
    "end": "694160"
  },
  {
    "text": "running for a long period of time so what we do is we created an U simulate an application using as many features of",
    "start": "694160",
    "end": "702279"
  },
  {
    "text": "dare as we could uh and emitting messages publishing messages uh using binding",
    "start": "702279",
    "end": "709079"
  },
  {
    "text": "using actors um using Stage store and that application is deployed on a real",
    "start": "709079",
    "end": "715480"
  },
  {
    "text": "cluster cator cluster same deployment entry and test but it keeps running for",
    "start": "715480",
    "end": "720760"
  },
  {
    "text": "like one day two days and we collect Matrix throughout the period of of this",
    "start": "720760",
    "end": "726079"
  },
  {
    "text": "execution and we are we look at the uh regressions for example do we have a memory leak do we have a go routine leak",
    "start": "726079",
    "end": "733680"
  },
  {
    "text": "and these things don't you you cannot it's very hard to catch those on end to end tests uh because it might take a",
    "start": "733680",
    "end": "739560"
  },
  {
    "text": "while until you notice the leak it might not be right away it might take like hours for that to show up and uh these",
    "start": "739560",
    "end": "746120"
  },
  {
    "text": "things of course don't the PO request does not get blocked R by this of course is is unsustainable uh we have this as",
    "start": "746120",
    "end": "754040"
  },
  {
    "text": "part of our release processing topper where we put a release candidate into the low environment but to reduce the",
    "start": "754040",
    "end": "760959"
  },
  {
    "text": "feedback uh time we also have uh daily Long Haul environment where every day we",
    "start": "760959",
    "end": "767399"
  },
  {
    "text": "deploy uh a build from Master for the master Branch into a different environment and we assess at least on a",
    "start": "767399",
    "end": "774760"
  },
  {
    "text": "weekly basis if there was any regression um on these numbers your base Bally here simulating uh a customer using your",
    "start": "774760",
    "end": "781920"
  },
  {
    "text": "application your your um platform or your framework in production anything want you add yes we",
    "start": "781920",
    "end": "789440"
  },
  {
    "text": "are tracking metrics through Prometheus endpoints of the Dapper side cars as well as the Dapper control plane and",
    "start": "789440",
    "end": "796680"
  },
  {
    "text": "we're looking at things that are very low level it's not like you know test case scenarios we're not looking at",
    "start": "796680",
    "end": "801839"
  },
  {
    "text": "response error codes for you know hdtp jpn available or anything like that looking at CPU memory number of go",
    "start": "801839",
    "end": "808040"
  },
  {
    "text": "routines file descriptors in the file system things that really show up when you're running a process at scale for a",
    "start": "808040",
    "end": "815399"
  },
  {
    "text": "very long time there is true and one thing I would like to add halfway through here is that you can see why",
    "start": "815399",
    "end": "821519"
  },
  {
    "text": "reusability is a it brings far more benefits than just moving light of code",
    "start": "821519",
    "end": "827160"
  },
  {
    "text": "from the application to the side car because if you're building all of this yourself all the connectivity to your to",
    "start": "827160",
    "end": "832360"
  },
  {
    "text": "your broker uh or Stage store the abstractions you have to set up a lot of",
    "start": "832360",
    "end": "837440"
  },
  {
    "text": "this test yourself so when when you were using the daos car you're not only we using the features you also were using all the test infrast structure that we",
    "start": "837440",
    "end": "843519"
  },
  {
    "text": "set up and to guarantee that quality so how do you guarantee C",
    "start": "843519",
    "end": "848600"
  },
  {
    "text": "Behavior across components yep I'll take that one Dapper has a concept of components that's what connects the daer",
    "start": "848600",
    "end": "855240"
  },
  {
    "text": "runtime into the different clouds you know for example there is a pub sub component for kofka or a pub sub",
    "start": "855240",
    "end": "860600"
  },
  {
    "text": "component for rabbit mq or a state store component for uh my seq and as I mentioned before we have over 150 of",
    "start": "860600",
    "end": "867519"
  },
  {
    "text": "these and have their own interfaces because they interact with the dep runtime so how do we make sure that each",
    "start": "867519",
    "end": "873880"
  },
  {
    "text": "one of these Cloud implementations adhere to the behavior we want to see uh them exhibit in depper um we have uh for",
    "start": "873880",
    "end": "882040"
  },
  {
    "text": "example here an an application that is trying to get state from Dapper and there's two different databases here but",
    "start": "882040",
    "end": "887759"
  },
  {
    "text": "they report uh a keyn note found um differently one might return an empty result while the other one might return",
    "start": "887759",
    "end": "893920"
  },
  {
    "text": "it as an error so we don't want the user who's calling into the API that's abstra abstracting these two different s stores",
    "start": "893920",
    "end": "900040"
  },
  {
    "text": "to get two different uh examples or two different responses and so Dapper really",
    "start": "900040",
    "end": "905079"
  },
  {
    "text": "uh provides a single consistent Behavior but we need to test these underlying implementations and components to make",
    "start": "905079",
    "end": "910519"
  },
  {
    "text": "sure that we know that they behave according or that their implementations inapp or behave according to what we",
    "start": "910519",
    "end": "916079"
  },
  {
    "text": "need them to do and so we have cor forant tests uh here and these are",
    "start": "916079",
    "end": "921839"
  },
  {
    "text": "really type of contract tests you can think about them so we have the state stores we have the pubsub we're not",
    "start": "921839",
    "end": "927160"
  },
  {
    "text": "running any form of kues cluster is here this is the nice thing we have a completely separate repository outside",
    "start": "927160",
    "end": "933800"
  },
  {
    "text": "of the daap run time that just has the implementation for these um you know pulser for example and so anytime we add",
    "start": "933800",
    "end": "941199"
  },
  {
    "text": "a new uh addition or feature to pulser for example um we add a new test that",
    "start": "941199",
    "end": "946880"
  },
  {
    "text": "basically verifies that pulser still behaves according to the same interface that Dapper um should did hereby and so",
    "start": "946880",
    "end": "955319"
  },
  {
    "text": "we have this nice animation here done by Arthur you're going to have to teach te me that to do that I yes um and so you",
    "start": "955319",
    "end": "961639"
  },
  {
    "text": "know we run mongodb and uh then we run Kafka and we basically iterate over uh",
    "start": "961639",
    "end": "967199"
  },
  {
    "text": "each of these um and we basically make sure that each one of them adheres to the uh same conforming test and these",
    "start": "967199",
    "end": "973759"
  },
  {
    "text": "run also in GitHub actions we're not running it in kubernetes because this is go code so we have a framework that",
    "start": "973759",
    "end": "980000"
  },
  {
    "text": "we've written that basically um kind of like mimics Dapper it's not actually Dapper that's calling into these",
    "start": "980000",
    "end": "985440"
  },
  {
    "text": "interfaces um because these are individual implementations you Even build them into their own binaries and run them if you want to uh but we make",
    "start": "985440",
    "end": "992600"
  },
  {
    "text": "sure that uh we test them and these conform tests are really quick I think a whole Suite of 150 tests today finishes",
    "start": "992600",
    "end": "1000240"
  },
  {
    "text": "in under 15 minutes am I lying to these fine people or I don't know I have to yeah I I haven't looked at them in a",
    "start": "1000240",
    "end": "1006199"
  },
  {
    "text": "while because they run so well you know I don't have to look how long it takes them to pass but it's something like 15 minutes for the whole",
    "start": "1006199",
    "end": "1013160"
  },
  {
    "text": "150 um and so components confirm and tests we put uh above unit test because",
    "start": "1013160",
    "end": "1019319"
  },
  {
    "text": "they are still in code they're not running in an actual compute environment they're testing for more things than",
    "start": "1019319",
    "end": "1024918"
  },
  {
    "text": "just individual functions they're testing a component as a whole but you know they're not running inside of you",
    "start": "1024919",
    "end": "1030120"
  },
  {
    "text": "know in Compu environments like kinetes so they are still in the lower part of the pyramid here um yes and but is that",
    "start": "1030120",
    "end": "1038438"
  },
  {
    "text": "enough Arthur answer that question well apparently never is enough so what you",
    "start": "1038439",
    "end": "1045400"
  },
  {
    "text": "can see is what we notice is that some people were trying to use upper components let's say Kafka or or mqtt",
    "start": "1045400",
    "end": "1053760"
  },
  {
    "text": "and the question was well it's can I rely on that because you test it with",
    "start": "1053760",
    "end": "1059440"
  },
  {
    "text": "the conformance test but haven't test as necessar end to end test um and we also notice that there's",
    "start": "1059440",
    "end": "1065679"
  },
  {
    "text": "some Behavior that's specific to each component for example each component might have their own unique ways to",
    "start": "1065679",
    "end": "1070880"
  },
  {
    "text": "provide authentication uh will all those authentication Solutions work for that component um and also they have",
    "start": "1070880",
    "end": "1077960"
  },
  {
    "text": "different material level some of them have might just have started implementation of the daa interface some of them might be maybe have battle",
    "start": "1077960",
    "end": "1084200"
  },
  {
    "text": "tested even us in production some cases uh so to fix like this chicken neck problem like some people want to use a a",
    "start": "1084200",
    "end": "1090840"
  },
  {
    "text": "component uh but only if it's stable and we were waiting to for people to use it to call it stable we decided to solve",
    "start": "1090840",
    "end": "1097280"
  },
  {
    "text": "that with more tests uh surprise surprise so these are different type of",
    "start": "1097280",
    "end": "1103520"
  },
  {
    "text": "test uh we call certific certification tests which is the last uh thing that",
    "start": "1103520",
    "end": "1108640"
  },
  {
    "text": "guarantees quality uh for a given component and in this case it's a",
    "start": "1108640",
    "end": "1113799"
  },
  {
    "text": "different approach uh we have first we start with a test plan uh has anyone here written a",
    "start": "1113799",
    "end": "1119760"
  },
  {
    "text": "test Plan before a few people have okay good so you're basically plan your test that's",
    "start": "1119760",
    "end": "1126000"
  },
  {
    "text": "what it does um and in this case the a montainer will contributor will subm a",
    "start": "1126000",
    "end": "1132600"
  },
  {
    "text": "uh test plan uh montainer will review it to see if the scope of the test is sufficient to guarantee quality",
    "start": "1132600",
    "end": "1139360"
  },
  {
    "text": "and the certification test are per are written customized per component using",
    "start": "1139360",
    "end": "1145120"
  },
  {
    "text": "the daer apis so we actually load a an entire side car as a library in in the",
    "start": "1145120",
    "end": "1151880"
  },
  {
    "text": "in the test framework we have and test each component one by one and uh this",
    "start": "1151880",
    "end": "1157760"
  },
  {
    "text": "process also runs as part of the PO requests um in some cases if you if Case",
    "start": "1157760",
    "end": "1163159"
  },
  {
    "text": "of CF for example it will hit against um a particular container if we talk",
    "start": "1163159",
    "end": "1169559"
  },
  {
    "text": "about service for example we use local stack and before you merge after you",
    "start": "1169559",
    "end": "1175080"
  },
  {
    "text": "merge we run that against a real AWS uh endpoint um so this is a way for us to",
    "start": "1175080",
    "end": "1181679"
  },
  {
    "text": "guarantee that there is quality against a given component there's any regression or any new bug found it either usually",
    "start": "1181679",
    "end": "1189240"
  },
  {
    "text": "becomes a new test scenario in the certification test or it can be um a",
    "start": "1189240",
    "end": "1194919"
  },
  {
    "text": "missed scenario back in the conformance test that we saw before the advantage that once you change your conformance",
    "start": "1194919",
    "end": "1201080"
  },
  {
    "text": "test we haven't talked about that you end up having to update multiple components because you're basically",
    "start": "1201080",
    "end": "1206679"
  },
  {
    "text": "adding a new test to the contract that not every component aderes to so you",
    "start": "1206679",
    "end": "1211760"
  },
  {
    "text": "might only fix one component but multiple implementations and that's go back to the Matrix where like we have",
    "start": "1211760",
    "end": "1217480"
  },
  {
    "text": "Dapper with multiple uh components multiple SDC case it's kind of a complex",
    "start": "1217480",
    "end": "1222520"
  },
  {
    "text": "uh um mix of scenarios should be tested so it's basically never is enough uh so we put this right of conformance test",
    "start": "1222520",
    "end": "1229240"
  },
  {
    "text": "because again it's using with the Dapper side car as a library so that's more",
    "start": "1229240",
    "end": "1235720"
  },
  {
    "text": "integration and that gave us this uh was a top very requested feature in uh uh uh",
    "start": "1235799",
    "end": "1243000"
  },
  {
    "text": "U processing Dapper where people say can I use this particular component and you can contribute with a",
    "start": "1243000",
    "end": "1250400"
  },
  {
    "text": "component it start with Alpha which means you don't guarant don't guarantee even that it behaves that supposed to",
    "start": "1250400",
    "end": "1256280"
  },
  {
    "text": "behave uh but it's a way for which you get rest started you can quickly add it to the confirmance tests and that give",
    "start": "1256280",
    "end": "1261559"
  },
  {
    "text": "you beta status and then once you add a CER uh certification test um and it's",
    "start": "1261559",
    "end": "1266880"
  },
  {
    "text": "approv maintainer it becomes stable and automatically you also get a",
    "start": "1266880",
    "end": "1272039"
  },
  {
    "text": "guarantee of no breaking change so there's no breaking change between uh version upgrades in oper there's a",
    "start": "1272039",
    "end": "1277799"
  },
  {
    "text": "deprecation path of course when once you remove things but you don't have you don't do have it doesn't happen within a",
    "start": "1277799",
    "end": "1283880"
  },
  {
    "text": "single version upgrade you want to add anything no no okay um luckily um but",
    "start": "1283880",
    "end": "1290400"
  },
  {
    "text": "still found bugs I want to rush up a little more because of the time uh but have more",
    "start": "1290400",
    "end": "1295840"
  },
  {
    "text": "automation we had integration test as decays so I'm I'm the author and",
    "start": "1295840",
    "end": "1300960"
  },
  {
    "text": "maintainer of the Javas CC and we added something called integration test in this case where you write the test for",
    "start": "1300960",
    "end": "1308400"
  },
  {
    "text": "the Java SDK which means the test also written in Java you have Java apps running using the scar but you don't run",
    "start": "1308400",
    "end": "1315120"
  },
  {
    "text": "kubernetes anymore you run in standal mode so if uh so there's less integration than enter and test it's",
    "start": "1315120",
    "end": "1321600"
  },
  {
    "text": "faster to run and what we notice multiple times that as testing from the client perspective because imagine the",
    "start": "1321600",
    "end": "1328240"
  },
  {
    "text": "SDK test are you testing from the client's perspective we end up catching bugs that were not caught in the run time so the",
    "start": "1328240",
    "end": "1334960"
  },
  {
    "text": "Javas SDK end up having additional scenario coverages to the end to end test so was one more layer of testing to",
    "start": "1334960",
    "end": "1341799"
  },
  {
    "text": "protect against bugs uh to our users and our other sdks also end up",
    "start": "1341799",
    "end": "1347640"
  },
  {
    "text": "having um integration test in the future uh so we put it right above cation test because you exercise components he",
    "start": "1347640",
    "end": "1354240"
  },
  {
    "text": "exercises the side car running stand L mode but it's not quite as integrated as ENT test which is a a complete vertical",
    "start": "1354240",
    "end": "1362279"
  },
  {
    "text": "stack uh what about C well CLI has its own test pyramid and we don't have time",
    "start": "1362279",
    "end": "1367720"
  },
  {
    "text": "to talk about CLI today so that will be probably another talk uh what about quick start tutorials",
    "start": "1367720",
    "end": "1374360"
  },
  {
    "text": "maybe that's one of the things that uh we can also take from this talk uh we we have automation for that as well because",
    "start": "1374360",
    "end": "1380000"
  },
  {
    "text": "imagine releasing dopper and have to retest all the quick starts and and getting started guides manually uh I'm",
    "start": "1380000",
    "end": "1386880"
  },
  {
    "text": "pretty sure who here has uh any kind of gu ins started or manual instructions in in",
    "start": "1386880",
    "end": "1392600"
  },
  {
    "text": "markdown no people use Mark now okay so people use Mark now great we have automated test for that on",
    "start": "1392600",
    "end": "1399640"
  },
  {
    "text": "a new tool that retive new tool that we build as part of the working Dapper is",
    "start": "1399640",
    "end": "1404679"
  },
  {
    "text": "unrelated to Dapper you can use that without using a project at all it's called mechanical markdown uh you",
    "start": "1404679",
    "end": "1410360"
  },
  {
    "text": "basically automate test for markdown documents with shell commands so if you want to get started",
    "start": "1410360",
    "end": "1415640"
  },
  {
    "text": "of automating your instructions or your commands you can even have a quick end",
    "start": "1415640",
    "end": "1420720"
  },
  {
    "text": "to endend test just with markdown file here's how it works you it's written in",
    "start": "1420720",
    "end": "1426120"
  },
  {
    "text": "Python so you just start with Pip install or pip 3 depends on how you use your environment setup you run with mmpy",
    "start": "1426120",
    "end": "1432400"
  },
  {
    "text": "and the markdown file in your markdown file you going to have bash commands in",
    "start": "1432400",
    "end": "1437600"
  },
  {
    "text": "this case case just do hello word but you can have things more complex than that and you annotate with this com",
    "start": "1437600",
    "end": "1444000"
  },
  {
    "text": "comment here call step and you put the name and put what is the expectations",
    "start": "1444000",
    "end": "1449080"
  },
  {
    "text": "there are more configurations where we cannot go deep too much into this today uh and then you end the annotation here",
    "start": "1449080",
    "end": "1454159"
  },
  {
    "text": "and what it does is mechanical markdown will understand this uh annotation and will execute this command and assert the",
    "start": "1454159",
    "end": "1461279"
  },
  {
    "text": "output is the same as you have put uh so there's a quick way to automate uh documentation testing in your project um",
    "start": "1461279",
    "end": "1469000"
  },
  {
    "text": "so if even if you don't want to use the oper or you don't know about the oper is meon markdown is a core part of our",
    "start": "1469000",
    "end": "1474480"
  },
  {
    "text": "project and we think all the open source projects even private uh projects can also benefit from it um and this is an",
    "start": "1474480",
    "end": "1480880"
  },
  {
    "text": "example how it looks you can validate the cop quick starts the go quick starts the Java the JavaScript the python",
    "start": "1480880",
    "end": "1487559"
  },
  {
    "text": "imagine all of that multiplied by all the building blocks that daa has it will be impossible to test manually on every",
    "start": "1487559",
    "end": "1493960"
  },
  {
    "text": "release so this give us a really good Automation and is one of our most stable stats right now because there's there's",
    "start": "1493960",
    "end": "1500320"
  },
  {
    "text": "some flak in this as well you be tackled um and how does it look like the mark don't looks the same there's no",
    "start": "1500320",
    "end": "1507080"
  },
  {
    "text": "difference so when you look at the Mark now you absolutely look at don't see any difference the these are all the",
    "start": "1507080",
    "end": "1512360"
  },
  {
    "text": "commands that the the mechanic Market down will execute just as the your user will use will run their terminal and",
    "start": "1512360",
    "end": "1518679"
  },
  {
    "text": "then we run Dapper it doesn't need to be Dapper just an example and then the output it can even assert complex log",
    "start": "1518679",
    "end": "1524120"
  },
  {
    "text": "outputs uh even if things are out of order me kind marown can make assertions for outputs out of order it's just a",
    "start": "1524120",
    "end": "1530919"
  },
  {
    "text": "different flag and how it works there's a d c this case d c end",
    "start": "1530919",
    "end": "1539279"
  },
  {
    "text": "enters the equation mechanical markdown We R the the file ex all the commands on the CLI and the C will run those uh",
    "start": "1539279",
    "end": "1546480"
  },
  {
    "text": "against the d control plane and the apps that are running it can be Java it can be JavaScript and in this case runs",
    "start": "1546480",
    "end": "1552440"
  },
  {
    "text": "Standalone mode uh we don't test this necessarily on kues but it can it's just a matter of your",
    "start": "1552440",
    "end": "1558960"
  },
  {
    "text": "choice so we put ex I call example tests uh right above SDK integration it's a",
    "start": "1558960",
    "end": "1565039"
  },
  {
    "text": "deeper level of integration but not as much as as entn tests so and want to talk about the ice",
    "start": "1565039",
    "end": "1571320"
  },
  {
    "text": "cream cone yes I love ice cream so I kind of hijacked that uh slide from you",
    "start": "1571320",
    "end": "1576760"
  },
  {
    "text": "um n2n tests are slow they take an hour to an hour and a half today to run in",
    "start": "1576760",
    "end": "1582760"
  },
  {
    "text": "depper they consume a lot of power and energy of course and you know Dapper is",
    "start": "1582760",
    "end": "1588399"
  },
  {
    "text": "a fast-paced project we have more than 3,000 individual contributors we have multiple PRS coming in every day it's a",
    "start": "1588399",
    "end": "1595440"
  },
  {
    "text": "very thriving project and we need to make sure that tests do not become a bottleneck so end to endend tests once",
    "start": "1595440",
    "end": "1602080"
  },
  {
    "text": "they become too big you know the more features you add the longer they will take because you're testing for more uh",
    "start": "1602080",
    "end": "1607279"
  },
  {
    "text": "scenarios so we've decided to add more tests to solve that we're fighting tests",
    "start": "1607279",
    "end": "1612600"
  },
  {
    "text": "with tests ladies and gentlemen yes um and so we have integration tests and integ ation tests allow us to automate",
    "start": "1612600",
    "end": "1620080"
  },
  {
    "text": "the side card process outside of kinetes kinetes is the slow thing is anyone here",
    "start": "1620080",
    "end": "1625919"
  },
  {
    "text": "is surprised probably not so we can actually run something very similar to",
    "start": "1625919",
    "end": "1631159"
  },
  {
    "text": "the n21 infrastructure U just by automating the side car itself from within a GitHub actions Runner but that",
    "start": "1631159",
    "end": "1638279"
  },
  {
    "text": "doesn't have to be a GitHub actions Runner it can be literally anything um if you want to run your own CD stack for",
    "start": "1638279",
    "end": "1644320"
  },
  {
    "text": "example and so we are now adding more and more integration tests um because they are faster and they're less flaky",
    "start": "1644320",
    "end": "1651720"
  },
  {
    "text": "than end to end tests so in many respects they're actually more reliable and the logs output they give us are",
    "start": "1651720",
    "end": "1657640"
  },
  {
    "text": "sometimes much more accurate than the log outputs we're getting from an n2n test that is failing and so this is the",
    "start": "1657640",
    "end": "1664559"
  },
  {
    "text": "end of the pyramid where we show you the different trade-offs between integration and isolation but we think we've covered",
    "start": "1664559",
    "end": "1670880"
  },
  {
    "text": "pretty much everything um we would love it if someone told us now what kind of tests we didn't add because because we",
    "start": "1670880",
    "end": "1677880"
  },
  {
    "text": "love to add tests so yes if there is any form of test you think we should be adding please come and talk to us we",
    "start": "1677880",
    "end": "1683679"
  },
  {
    "text": "will probably do that um let's talk about refactorings not really necessarily uh you know related to uh",
    "start": "1683679",
    "end": "1690320"
  },
  {
    "text": "testing but refactoring code is a major pain and we we don't like to do that um",
    "start": "1690320",
    "end": "1696080"
  },
  {
    "text": "for Dapper specifically sometimes someone would come with a PR and they would go like oh I refactor 2,000 lines",
    "start": "1696080",
    "end": "1702519"
  },
  {
    "text": "of code and then we maintainers sometimes become the you know the bad cops because we're like well you know",
    "start": "1702519",
    "end": "1708080"
  },
  {
    "text": "what that's that might actually reduce the stability of the project and then people might get offended sometimes and",
    "start": "1708080",
    "end": "1713440"
  },
  {
    "text": "so we need to have very clear and established rules about when do we do refactorings when do you communicate",
    "start": "1713440",
    "end": "1719559"
  },
  {
    "text": "those how do you communicate those so that there is a clear setting of expectation about what the refactoring is doing you know sometimes developers",
    "start": "1719559",
    "end": "1726320"
  },
  {
    "text": "like to refactor things just because they can and so we can't allow that to happen in depper um and yes so there's",
    "start": "1726320",
    "end": "1733320"
  },
  {
    "text": "this list of uh dos and don'ts you can read that here I don't think we have enough time to cover everything arter is",
    "start": "1733320",
    "end": "1739200"
  },
  {
    "text": "there anything you that's important for you to say for this list yes yeah don't Mi change uh intentional change with",
    "start": "1739200",
    "end": "1746679"
  },
  {
    "text": "refractor so if you the refractor should have no Behavior change in your code if you mix that it becomes a mess because",
    "start": "1746679",
    "end": "1752840"
  },
  {
    "text": "now you don't know if it's a regression or it's intended change yeah it's it's the greatest Temptation right you're",
    "start": "1752840",
    "end": "1758039"
  },
  {
    "text": "working on a feature but then you notice like you notice this small piece of code",
    "start": "1758039",
    "end": "1763200"
  },
  {
    "text": "that you're like oh I can make that better it has nothing to do with my change but I I I'm I can make that",
    "start": "1763200",
    "end": "1769320"
  },
  {
    "text": "algorithm so much better I can improve the the time space complexity I'm just going to do that and push that with my",
    "start": "1769320",
    "end": "1774840"
  },
  {
    "text": "code and that's all just going to be fine and then you wake up at 2 a.m. and you find out that basically when you've",
    "start": "1774840",
    "end": "1781120"
  },
  {
    "text": "decided to make that change you've s a deal with the Devil the devil was yourself so we want to avoid that very",
    "start": "1781120",
    "end": "1788000"
  },
  {
    "text": "much and yes you need to be intentional do you want to do a refactor that's great do the feature change you wanted",
    "start": "1788000",
    "end": "1793720"
  },
  {
    "text": "to do then issue another PR talk to a maintainer ask if that's okay you know it doesn't have to be a maintainer if if",
    "start": "1793720",
    "end": "1799120"
  },
  {
    "text": "you're taking this approach in your own environment talk to the the team leader the developer who last worked on the",
    "start": "1799120",
    "end": "1805000"
  },
  {
    "text": "code or the developer who's you know on the hook to uh maintain that code longterm and discuss the refactor",
    "start": "1805000",
    "end": "1810960"
  },
  {
    "text": "refactorings are dangerous they should have really good reasons we can go move forward all right now flaky tests Arthur",
    "start": "1810960",
    "end": "1818320"
  },
  {
    "text": "um so flaky test is an ongoing effort it doesn't stop and they actually became as",
    "start": "1818320",
    "end": "1823360"
  },
  {
    "text": "you saw we added so many tests uh scenarios that and test levels that uh flick became a part of our day-to-day",
    "start": "1823360",
    "end": "1829559"
  },
  {
    "text": "Tri training uh it still not perfect so there's a lot of a long road ahead of us",
    "start": "1829559",
    "end": "1834760"
  },
  {
    "text": "to get that with a stable uh uh test Suite um but uh some some things that",
    "start": "1834760",
    "end": "1841000"
  },
  {
    "text": "people might remember but still good call out don't do a unit test so if your unit test to do serviceing vocation",
    "start": "1841000",
    "end": "1846799"
  },
  {
    "text": "write your dis read read from dis um it's not a unit test it's integration",
    "start": "1846799",
    "end": "1852559"
  },
  {
    "text": "test at least so make sure you don't do any IO unit test just work",
    "start": "1852559",
    "end": "1858200"
  },
  {
    "text": "um and then also don't rerun fail tests until they pass without looking at the test failures why some bugs especially",
    "start": "1858200",
    "end": "1865960"
  },
  {
    "text": "in the distributed runtime are not deterministic which means that might be some RIS condition that you might not be",
    "start": "1865960",
    "end": "1871639"
  },
  {
    "text": "handling correctly and just by running that you hide the risk condition thinking is a test flak problem uh test",
    "start": "1871639",
    "end": "1877960"
  },
  {
    "text": "flakiness problem um another thing it's possible run init test and integration",
    "start": "1877960",
    "end": "1883080"
  },
  {
    "text": "test multiple times before merging PRS uh some IDs actually have this feature you can write you can configure your IDE",
    "start": "1883080",
    "end": "1889159"
  },
  {
    "text": "to run the same test 10 times so try to run your same test 10 times in a row see how many times it passes if it's 100%",
    "start": "1889159",
    "end": "1896240"
  },
  {
    "text": "you have higher chance of that not being flaking uh and uh it's also interesting",
    "start": "1896240",
    "end": "1902919"
  },
  {
    "text": "to build reports of fliss test scenarios because sometimes in most systems only",
    "start": "1902919",
    "end": "1908360"
  },
  {
    "text": "one test failure is enough to fail the whole run so you call you're seeing like",
    "start": "1908360",
    "end": "1913399"
  },
  {
    "text": "50 70 80% test failure uh rate in your test Suite but it might be caused by only one or",
    "start": "1913399",
    "end": "1919399"
  },
  {
    "text": "two tests so don't be scared that your test is like super flaky it might be just one or two culprits uh and look at",
    "start": "1919399",
    "end": "1926399"
  },
  {
    "text": "good for issues to help the community if you're doing with open source project and um takeaways yep so the",
    "start": "1926399",
    "end": "1935159"
  },
  {
    "text": "takeaways uh from today's talk uh have contract tests to guarantee consistent Behavior across clouds uh so in a mul",
    "start": "1935159",
    "end": "1942360"
  },
  {
    "text": "Cloud run time the behavior might not be consistent across clouds so you you need to have those those type of tests um run",
    "start": "1942360",
    "end": "1949000"
  },
  {
    "text": "your n test in multiple clouds uh that is one thing that's ongoing for us where we want to take the NN test and run on",
    "start": "1949000",
    "end": "1955200"
  },
  {
    "text": "AWS as well uh we don't we run today on kind which is Local Host and we also run on a on on Azure but that's mostly a",
    "start": "1955200",
    "end": "1961639"
  },
  {
    "text": "cost thing uh as soon as we get more credits we're going to put on Azure as well and AWS sorry and AWS and N gcp um",
    "start": "1961639",
    "end": "1969880"
  },
  {
    "text": "wait wait wa wait we we we need to plug ourselves in here if there's any Amazon or AWS people in the crowd please give",
    "start": "1969880",
    "end": "1975440"
  },
  {
    "text": "us credits that's it okay we accept yeah that's a great call help open source and",
    "start": "1975440",
    "end": "1980639"
  },
  {
    "text": "then yeah so diverse set of tests know your test scenarios before ref Factor writing avoid the ice cream cone problem",
    "start": "1980639",
    "end": "1987080"
  },
  {
    "text": "which when you have too many tests on the top layer you want to have more tests at the bottom than at the top and",
    "start": "1987080",
    "end": "1993360"
  },
  {
    "text": "automated you're getting started your documentation with mechanical markdown and get claim your supporter",
    "start": "1993360",
    "end": "2000480"
  },
  {
    "text": "icon if you have that you can SC QR code CL aaper supporter claim that and you",
    "start": "2000480",
    "end": "2005880"
  },
  {
    "text": "can give us feedback here thank you very much thank you very",
    "start": "2005880",
    "end": "2009960"
  },
  {
    "text": "much any questions um yeah thanks for the talk guys amazing stuff too much",
    "start": "2011919",
    "end": "2017600"
  },
  {
    "text": "testing to be honest thank you um just curious how you analyze results of lold",
    "start": "2017600",
    "end": "2023240"
  },
  {
    "text": "tests do you also have toate the analysis of the results because it's very tricky one um can I take that there",
    "start": "2023240",
    "end": "2030799"
  },
  {
    "text": "we go okay so long haul tests um it can be automated to look at the results especially the obvious problems like CP",
    "start": "2030799",
    "end": "2038360"
  },
  {
    "text": "memory CPU memory number of goroutines uh we did look at bringing some of the",
    "start": "2038360",
    "end": "2044919"
  },
  {
    "text": "scenario test for Long Haul uh lower into the pyramid where we run like a simple side car for like 10 minutes to",
    "start": "2044919",
    "end": "2052720"
  },
  {
    "text": "DET attack uh obvious uh go routine leak um but you can autate some of that",
    "start": "2052720",
    "end": "2058358"
  },
  {
    "text": "through matric and alerts so if you have alerts for your system you can plug that in uh into your long haul test and you",
    "start": "2058359",
    "end": "2064919"
  },
  {
    "text": "can look at the alerts that get fired and that will be a re close to automation like you should see like zero",
    "start": "2064919",
    "end": "2070358"
  },
  {
    "text": "alerts depends on the alerts you have so having alerts and monitoring can help you also automate the long whole test",
    "start": "2070359",
    "end": "2075520"
  },
  {
    "text": "results set yeah but rest of the stuff you just review manually periodically right now we do manually because just a",
    "start": "2075520",
    "end": "2081240"
  },
  {
    "text": "few tests a few spots we look at the graph and say okay it's it's good or bad uh but you can automate as well it's a",
    "start": "2081240",
    "end": "2087240"
  },
  {
    "text": "possibility to automate every release we have a long hole test lead and that person basically looks at the long hole",
    "start": "2087240",
    "end": "2092638"
  },
  {
    "text": "test they look at the metrics and they analyze it yeah thank you and and last but not least you mentioned what type of",
    "start": "2092639",
    "end": "2099760"
  },
  {
    "text": "testing is missing it's house testing you didn't do yeah chaos chaos testing oh chaos",
    "start": "2099760",
    "end": "2106000"
  },
  {
    "text": "tests Yes actually that's right um yes y we have that actually CH do list and we",
    "start": "2106000",
    "end": "2111520"
  },
  {
    "text": "have an issue for that Y and nobody pick it up yet but yes we don't have chos testing yes thank you for bringing it up",
    "start": "2111520",
    "end": "2117760"
  },
  {
    "text": "and that's really important thanks again yeah great questions okay all right anything",
    "start": "2117760",
    "end": "2125359"
  },
  {
    "text": "else no looks like we're good so thank you again thank",
    "start": "2125359",
    "end": "2130960"
  },
  {
    "text": "you",
    "start": "2131680",
    "end": "2134680"
  }
]