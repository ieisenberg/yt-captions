[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "essentially if you look at the source mesh capabilities today we generally",
    "start": "380",
    "end": "7350"
  },
  {
    "text": "talk about identity we talk about service discovery routing as well as",
    "start": "7350",
    "end": "12780"
  },
  {
    "start": "10000",
    "end": "62000"
  },
  {
    "text": "policy but oftentimes what's forgotten about is that there is something that",
    "start": "12780",
    "end": "20820"
  },
  {
    "text": "that also exists which is DNS which is an integral part of service discovery",
    "start": "20820",
    "end": "26789"
  },
  {
    "text": "and it kind of opens up another set of",
    "start": "26789",
    "end": "32790"
  },
  {
    "text": "use cases that people kind of need to think about and that's essentially the",
    "start": "32790",
    "end": "41219"
  },
  {
    "text": "premise of our presentation today I'll talk about use cases while Vanille here",
    "start": "41219",
    "end": "48030"
  },
  {
    "text": "we'll go more into how we are looking at it from kubernetes and envoy and",
    "start": "48030",
    "end": "54390"
  },
  {
    "text": "hopefully SEO as well so going a little bit more into how we look at it",
    "start": "54390",
    "end": "63719"
  },
  {
    "start": "62000",
    "end": "107000"
  },
  {
    "text": "so naming in general for applications is it's very complicated in the sense that",
    "start": "63719",
    "end": "71310"
  },
  {
    "text": "as you go through your development cycle and applications progress to staging",
    "start": "71310",
    "end": "77400"
  },
  {
    "text": "rather death staging and then towards production the heart of the application",
    "start": "77400",
    "end": "84570"
  },
  {
    "text": "itself remains the same but but the name might change and as a developer generally you don't want to worry about",
    "start": "84570",
    "end": "91200"
  },
  {
    "text": "these things and how can you how can you",
    "start": "91200",
    "end": "96659"
  },
  {
    "text": "make it kind of simple in terms of deploying an application so one of the",
    "start": "96659",
    "end": "103020"
  },
  {
    "text": "things that we have we have kind of tried to start to look at it is can can",
    "start": "103020",
    "end": "109470"
  },
  {
    "start": "107000",
    "end": "142000"
  },
  {
    "text": "we kind of use DNS so to simplify this whole process by simply naming your",
    "start": "109470",
    "end": "117689"
  },
  {
    "text": "applications the same but when you when you kind of deploy it across multiple clusters or multiple clouds as long as",
    "start": "117689",
    "end": "124680"
  },
  {
    "text": "the name remains the same and you use Alaia saying or naming conventions",
    "start": "124680",
    "end": "131200"
  },
  {
    "text": "which are generic enough for an application you can kind of simplify the whole process taking this also why",
    "start": "131200",
    "end": "140349"
  },
  {
    "text": "despair spread towards multi cluster and",
    "start": "140349",
    "end": "146860"
  },
  {
    "start": "142000",
    "end": "264000"
  },
  {
    "text": "multi clouds one of the one of the things that also comes up is that I can't keep bringing",
    "start": "146860",
    "end": "154780"
  },
  {
    "text": "up multi-tenant in the sense that you you don't generally just have a single",
    "start": "154780",
    "end": "161110"
  },
  {
    "text": "user that is accessing the services whereas also you might have an",
    "start": "161110",
    "end": "166300"
  },
  {
    "text": "application or the same application deployed across multiple namespaces within a kubernetes cluster not",
    "start": "166300",
    "end": "172720"
  },
  {
    "text": "specifically tied to a cluster but across multiple clusters as well and",
    "start": "172720",
    "end": "178720"
  },
  {
    "text": "then you kind of don't want there to be a name caching as well as you don't want",
    "start": "178720",
    "end": "185769"
  },
  {
    "text": "services across different different namespaces to be able to discover each other how do you solve that today within",
    "start": "185769",
    "end": "193630"
  },
  {
    "text": "the bounds of kubernetes there is no way to do that so that's one of the things",
    "start": "193630",
    "end": "199959"
  },
  {
    "text": "that we as a team have been thinking about how to solve and what we were",
    "start": "199959",
    "end": "207459"
  },
  {
    "text": "thinking was that you could potentially have a group of namespaces bound",
    "start": "207459",
    "end": "213220"
  },
  {
    "text": "together and then combine that and have a DNS kind of servicing that set of",
    "start": "213220",
    "end": "221200"
  },
  {
    "text": "namespaces and in general by doing that you're kind of isolating your service",
    "start": "221200",
    "end": "228549"
  },
  {
    "text": "discovery to those groups or a single namespace a few bills and then then you",
    "start": "228549",
    "end": "234640"
  },
  {
    "text": "you you potentially cannot have a way of different applications or different",
    "start": "234640",
    "end": "239709"
  },
  {
    "text": "services kind of trampling each other as well as if if I am it's working in the",
    "start": "239709",
    "end": "250359"
  },
  {
    "text": "staging environment while someone else is working in the production environment there",
    "start": "250359",
    "end": "256900"
  },
  {
    "text": "strong isolation in terms of service discovery going into more of the use",
    "start": "256900",
    "end": "266290"
  },
  {
    "start": "264000",
    "end": "370000"
  },
  {
    "text": "cases then as a DevOps and you know when you're when you when you're deploying an",
    "start": "266290",
    "end": "271690"
  },
  {
    "text": "application and kind of looking at it from the view of whether the application",
    "start": "271690",
    "end": "278080"
  },
  {
    "text": "is working well typically we look at the elementary data but what we look at is is HDPE statistics or the RPC stats but",
    "start": "278080",
    "end": "287620"
  },
  {
    "text": "no one kind of thinks about cases where DNS is actually not working and how do",
    "start": "287620",
    "end": "292810"
  },
  {
    "text": "you kind of build some tooling around trying to see whether your application",
    "start": "292810",
    "end": "298180"
  },
  {
    "text": "is sluggish because of DNS very simple example is that sometimes v6 might",
    "start": "298180",
    "end": "306220"
  },
  {
    "text": "trample before in terms of queries and slowly or slower your application down",
    "start": "306220",
    "end": "313060"
  },
  {
    "text": "how do you solve that so one of the things that we've been thinking about is that can you can you have something in",
    "start": "313060",
    "end": "321190"
  },
  {
    "text": "between your application and a telemetry agent kind of collecting statistics",
    "start": "321190",
    "end": "326980"
  },
  {
    "text": "around DNS measuring requests and",
    "start": "326980",
    "end": "333670"
  },
  {
    "text": "response times of measuring also who is trying to access that specific service",
    "start": "333670",
    "end": "341560"
  },
  {
    "text": "in terms of DNS essentially these are the kind of problems that we've been",
    "start": "341560",
    "end": "348730"
  },
  {
    "text": "thinking about and solutions around it having having collected all that elementary data but you can eventually",
    "start": "348730",
    "end": "354910"
  },
  {
    "text": "also do is do some variable analysis around it and essentially it opens up",
    "start": "354910",
    "end": "361330"
  },
  {
    "text": "the door for city already use cases so this one of the topics that we we kind",
    "start": "361330",
    "end": "366880"
  },
  {
    "text": "of have in - well then now that we've",
    "start": "366880",
    "end": "373000"
  },
  {
    "start": "370000",
    "end": "440000"
  },
  {
    "text": "talked about security sometimes also DevOps engineer one of the things that",
    "start": "373000",
    "end": "378280"
  },
  {
    "text": "you want to look into is that as services are accessing other services",
    "start": "378280",
    "end": "384220"
  },
  {
    "text": "within a cluster you might not want your so is to access anything which is outside",
    "start": "384220",
    "end": "390920"
  },
  {
    "text": "your organization and how can you achieve that so a simplistic example is that I want to deny my front-end service",
    "start": "390920",
    "end": "398480"
  },
  {
    "text": "from any accessing any of the dot-com sites as a security measure another",
    "start": "398480",
    "end": "403610"
  },
  {
    "text": "example would be going back to the tenant isolation case if you also want to restrict it in terms of policy you",
    "start": "403610",
    "end": "410300"
  },
  {
    "text": "could potentially say that tenant day is not allowed to access and be services from from a service discovery point of",
    "start": "410300",
    "end": "417290"
  },
  {
    "text": "view rather than once the request is actually sent out so yeah so so within",
    "start": "417290",
    "end": "424700"
  },
  {
    "text": "the bounds of this one of the things that we have been looking at is that can you put a proxy in front of this doing",
    "start": "424700",
    "end": "430850"
  },
  {
    "text": "some kind of layer 7 filtering and achieving these kind of use cases so",
    "start": "430850",
    "end": "438110"
  },
  {
    "text": "yeah I'll dive into the last use case and then I'll give the podium to when'll who",
    "start": "438110",
    "end": "445310"
  },
  {
    "text": "will talk more about the implementation now this this is a little more evolutionary where the the ITF and the",
    "start": "445310",
    "end": "457250"
  },
  {
    "text": "community have been starting to talk about the toh kind of adding some some",
    "start": "457250",
    "end": "464600"
  },
  {
    "text": "some kind of color to it essentially or we were thinking us now that we have a proxy can you can you kind of make your",
    "start": "464600",
    "end": "471320"
  },
  {
    "text": "space also private in the sense that a tenant when you think in terms of tenant",
    "start": "471320",
    "end": "477290"
  },
  {
    "text": "isolation you also want to think about privacy where within the bounds of",
    "start": "477290",
    "end": "483140"
  },
  {
    "text": "tenancy you should let's say for some",
    "start": "483140",
    "end": "488450"
  },
  {
    "text": "reason you are able to to look at the NS queries can you encrypt it and maintain",
    "start": "488450",
    "end": "494210"
  },
  {
    "text": "privacy across what you're actually accessing so this is one of the use",
    "start": "494210",
    "end": "501650"
  },
  {
    "text": "cases that we've been kind of thinking that would be useful within the bounds of the topic around DNS and yeah so here",
    "start": "501650",
    "end": "512930"
  },
  {
    "text": "again essentially the idea was that we were during the discovery process",
    "start": "512930",
    "end": "520890"
  },
  {
    "text": "redirecting the traffic through a proxy allows you to do some l7 encryption and forward the DNS query along to any DNS",
    "start": "520890",
    "end": "528940"
  },
  {
    "text": "server which might be behind that core DNS or coop DNS if you will so yeah but",
    "start": "528940",
    "end": "536320"
  },
  {
    "text": "that I'll have when L started talk about",
    "start": "536320",
    "end": "542230"
  },
  {
    "text": "some of the implementation details but before I do I kind of wanted to bring up",
    "start": "542230",
    "end": "549640"
  },
  {
    "text": "the current state of DNS within kubernetes where essentially to",
    "start": "549640",
    "end": "554890"
  },
  {
    "start": "553000",
    "end": "578000"
  },
  {
    "text": "summarize many of these things are not possible with coop DNS alone especially",
    "start": "554890",
    "end": "560860"
  },
  {
    "text": "because any kind of configuration to DNS requires you to restart pods or redeploy",
    "start": "560860",
    "end": "567130"
  },
  {
    "text": "or deployments definitely there's no policy or any of the evolutionary",
    "start": "567130",
    "end": "572650"
  },
  {
    "text": "features so yeah but the dad I'll give it to when oh sure okay before I dive",
    "start": "572650",
    "end": "584290"
  },
  {
    "text": "into the solutions I want to ask a couple of questions who here knows what",
    "start": "584290",
    "end": "589330"
  },
  {
    "text": "a service mesh is there's a lot of hands who here really understands what a",
    "start": "589330",
    "end": "595270"
  },
  {
    "text": "service mesh is exactly so but the good",
    "start": "595270",
    "end": "600760"
  },
  {
    "text": "thing is there are a lot of learnings that you can take from service mesh and one of the key learnings that I love",
    "start": "600760",
    "end": "606880"
  },
  {
    "text": "about Suri smashes the sidecar proxy pattern and I will be using that pattern",
    "start": "606880",
    "end": "612040"
  },
  {
    "text": "to showcase the solutions that we came up with first let's look at the",
    "start": "612040",
    "end": "618640"
  },
  {
    "text": "kubernetes DNS as it stands today we have a couple of services here a and B",
    "start": "618640",
    "end": "624880"
  },
  {
    "text": "and let's say we want service yet to discover service B and in order to do",
    "start": "624880",
    "end": "630190"
  },
  {
    "text": "that it will send a request to the cube DNS or Co DNS pod in the cube system",
    "start": "630190",
    "end": "635980"
  },
  {
    "text": "namespace and it will have a IP or a cluster IP and the request is typically",
    "start": "635980",
    "end": "641920"
  },
  {
    "text": "UDP or TCP and once the response is received from the DNS server service EA",
    "start": "641920",
    "end": "649270"
  },
  {
    "text": "can connect to service B using its IP the first use case I want",
    "start": "649270",
    "end": "655870"
  },
  {
    "start": "654000",
    "end": "770000"
  },
  {
    "text": "to go into is the DNS isolation use case we essentially want to segregate DNS",
    "start": "655870",
    "end": "661899"
  },
  {
    "text": "servers for a bunch of namespaces or a selective number of applications and",
    "start": "661899",
    "end": "666910"
  },
  {
    "text": "here is a draft CRD that we came up with and it's only drafted right now we want",
    "start": "666910",
    "end": "673509"
  },
  {
    "text": "to contribute this to the upstream projects like st or envoy and what we do",
    "start": "673509",
    "end": "679389"
  },
  {
    "text": "here is we select a bunch of namespaces using the namespace selector label and then we pick all the namespaces having",
    "start": "679389",
    "end": "687339"
  },
  {
    "text": "the label a and V with value staging one and for all these namespaces we want to",
    "start": "687339",
    "end": "693670"
  },
  {
    "text": "use the DNS server located at tenant one dot DNS dot SVC so how does this look in",
    "start": "693670",
    "end": "701019"
  },
  {
    "text": "real for example we have the payment gateway service here and it wants to",
    "start": "701019",
    "end": "708610"
  },
  {
    "text": "access the users API service and all of this is a part of the staging one",
    "start": "708610",
    "end": "713980"
  },
  {
    "text": "deployment we have our tenants our DNS server here and the on web proxy which",
    "start": "713980",
    "end": "721420"
  },
  {
    "text": "is the sidecar proxy for the payment gateway here is an open source DNS",
    "start": "721420",
    "end": "728949"
  },
  {
    "text": "filter that we used in order to get here and the payment gateway when it sends a",
    "start": "728949",
    "end": "734410"
  },
  {
    "text": "UDP request or the DNS query it gets trapped into the DNS filter in the",
    "start": "734410",
    "end": "739930"
  },
  {
    "text": "sidecar proxy and then the DNS filter forwards the UDP DNS query into the DNS",
    "start": "739930",
    "end": "746230"
  },
  {
    "text": "server and once it gets a response it can connect with the users API we can",
    "start": "746230",
    "end": "752470"
  },
  {
    "text": "apply a similar policy to another staging environment running in the same kubernetes cluster and the services in",
    "start": "752470",
    "end": "760360"
  },
  {
    "text": "both of these clusters will not be able to access or even discover the services in other other namespaces the second use",
    "start": "760360",
    "end": "770769"
  },
  {
    "start": "770000",
    "end": "868000"
  },
  {
    "text": "case is a DNS observability here what I have is the core OS Prometheus operator",
    "start": "770769",
    "end": "777189"
  },
  {
    "text": "and there is a CRD named service monitor which allows Prometheus to scrape metrics from different endpoints",
    "start": "777189",
    "end": "784150"
  },
  {
    "text": "in onward there is important names stats / Prometheus and here we run it on port",
    "start": "784150",
    "end": "790779"
  },
  {
    "text": "8000 and since we have the DNS filter accessing all the DNS queries we can",
    "start": "790779",
    "end": "797320"
  },
  {
    "text": "monitor and we can measure every query and we can also log queries that are",
    "start": "797320",
    "end": "802900"
  },
  {
    "text": "going to external services or internal services and all of that could be exposed into Prometheus using this",
    "start": "802900",
    "end": "809200"
  },
  {
    "text": "operator we need to specify the application we want to track and here is",
    "start": "809200",
    "end": "815470"
  },
  {
    "text": "the payment gateway application we want to track running in the payments namespace and in real it looks like this",
    "start": "815470",
    "end": "823330"
  },
  {
    "text": "so we have the payment gateway and the proxy in front of it the DNS server for",
    "start": "823330",
    "end": "828730"
  },
  {
    "text": "that tenant and the DNS filter the payment gateway sends a DNS query to the",
    "start": "828730",
    "end": "834670"
  },
  {
    "text": "DNS filter which forwards it to the tenant as before but now we generate",
    "start": "834670",
    "end": "839830"
  },
  {
    "text": "statistics into the Envoy stats module and using our operator Prometheus can",
    "start": "839830",
    "end": "846339"
  },
  {
    "text": "scrape these metrics and then you can integrate from ETS with third-party solutions like graph Anna or some other",
    "start": "846339",
    "end": "853060"
  },
  {
    "text": "dashboards and by absorbing these kind of metrics you can make sure that your",
    "start": "853060",
    "end": "859000"
  },
  {
    "text": "applications are requesting for the right services or you can see if there is some malicious requests going out",
    "start": "859000",
    "end": "864700"
  },
  {
    "text": "from your system the next next use case",
    "start": "864700",
    "end": "870279"
  },
  {
    "start": "868000",
    "end": "1050000"
  },
  {
    "text": "is the DNS filtering use case here we want to whitelist and blacklist certain",
    "start": "870279",
    "end": "876190"
  },
  {
    "text": "domains and we do that by specifying the policy here and in the whitelist we",
    "start": "876190",
    "end": "882700"
  },
  {
    "text": "select all the services running in the payments namespace and we applied this",
    "start": "882700",
    "end": "887740"
  },
  {
    "text": "policy on the payments workload and we want to route all the DNS queries to",
    "start": "887740",
    "end": "893680"
  },
  {
    "text": "tenant one so specifically if there is a query that wants to access something",
    "start": "893680",
    "end": "898870"
  },
  {
    "text": "outside of the payments namespace it would be matched here and probably it",
    "start": "898870",
    "end": "904420"
  },
  {
    "text": "would be denied there is also a blacklist where we where you can specify a set of domains that you don't want",
    "start": "904420",
    "end": "911260"
  },
  {
    "text": "your services to discover in this case it's a started for calm and",
    "start": "911260",
    "end": "917570"
  },
  {
    "text": "if the domain matches this URL it would fail to even identify the IP address for",
    "start": "917570",
    "end": "923209"
  },
  {
    "text": "it and the last configuration here is the default action so let's say we",
    "start": "923209",
    "end": "928910"
  },
  {
    "text": "haven't listed any domain which the service is trying to access and in that",
    "start": "928910",
    "end": "934279"
  },
  {
    "text": "case we just want the proxy to log with an error message we could also specify",
    "start": "934279",
    "end": "941180"
  },
  {
    "text": "whether the domain should be allowed or denied even so in reality it would look",
    "start": "941180",
    "end": "947899"
  },
  {
    "text": "something like this there is the payment gateway which wants to access the payment info service there is the proxy",
    "start": "947899",
    "end": "955069"
  },
  {
    "text": "and the dns server for the tenant and here is the dns policy filter so",
    "start": "955069",
    "end": "961250"
  },
  {
    "text": "whenever there is a UDP dns query it would be trapped by the dns policy filter and it would consult the policies",
    "start": "961250",
    "end": "968269"
  },
  {
    "text": "database and in the previous spec that I showed we we write the policies down in",
    "start": "968269",
    "end": "975170"
  },
  {
    "text": "the ml file itself but this could also be an external database and once your",
    "start": "975170",
    "end": "980839"
  },
  {
    "text": "decides to accept that DNS query it can then forward the DNS query to the tenant",
    "start": "980839",
    "end": "986899"
  },
  {
    "text": "specific DNS server and once the payment gateway receives the response back from",
    "start": "986899",
    "end": "992510"
  },
  {
    "text": "the DNS server it can then connect with the payment info service but let's say",
    "start": "992510",
    "end": "998089"
  },
  {
    "text": "if the payment gateways trying to access malicious website for example API dot foo.com and in that case that dns filter",
    "start": "998089",
    "end": "1005529"
  },
  {
    "text": "can quickly terminate such DNS requests and the connection will not even happen",
    "start": "1005529",
    "end": "1011790"
  },
  {
    "text": "but there is a catch here let's say the payment gateway is kind of smart and it already knows the IP address for the",
    "start": "1011790",
    "end": "1018100"
  },
  {
    "text": "external service which is API dot foo.com here in that case we can't do anything at the DNS level but we need to",
    "start": "1018100",
    "end": "1025449"
  },
  {
    "text": "apply some sort of network policies to get rid of such requests one other thing",
    "start": "1025449",
    "end": "1030640"
  },
  {
    "text": "we can do is we can observe the connect the connections that are initiated and",
    "start": "1030640",
    "end": "1036069"
  },
  {
    "text": "if there was a DNS query done right before the connection was initiated then we can allow and probably deny all the",
    "start": "1036069",
    "end": "1043089"
  },
  {
    "text": "requests that originated without any DNS query right before them",
    "start": "1043089",
    "end": "1048900"
  },
  {
    "text": "here is an extensible model of the DNS filtering spec in this case we route all",
    "start": "1049780",
    "end": "1056780"
  },
  {
    "start": "1050000",
    "end": "1097000"
  },
  {
    "text": "the DNS policy queries to an external policy server which understands the G",
    "start": "1056780",
    "end": "1062840"
  },
  {
    "text": "RPC protocol and whenever a DNS query enters into the proxy we consult this",
    "start": "1062840",
    "end": "1068240"
  },
  {
    "text": "external service and by default we can deny any domains that the policy server doesn't understand and one other thing",
    "start": "1068240",
    "end": "1075980"
  },
  {
    "text": "we can do here in the spec is we can specify the specific application we want to apply this policy over and in this",
    "start": "1075980",
    "end": "1083720"
  },
  {
    "text": "case it's payment gateway in the payments workload so along with the",
    "start": "1083720",
    "end": "1088880"
  },
  {
    "text": "namespace selector we also can specify an application selector the last use",
    "start": "1088880",
    "end": "1097970"
  },
  {
    "start": "1097000",
    "end": "1199000"
  },
  {
    "text": "case I want to touch upon is the DNS evolution essentially UDP queries or the",
    "start": "1097970",
    "end": "1103340"
  },
  {
    "text": "DNS queries are plaintext they could be UDP or TCP but we want to upgrade such protocols to DNS over HTTP or DNS over",
    "start": "1103340",
    "end": "1112340"
  },
  {
    "text": "TLS and we can do that very easily with the own web proxy so again we select the",
    "start": "1112340",
    "end": "1117940"
  },
  {
    "text": "workload payment using the namespace selector and this time we're out such",
    "start": "1117940",
    "end": "1123170"
  },
  {
    "text": "DNS queries to the encryption supporting DNS server here and we can upgrade the",
    "start": "1123170",
    "end": "1129290"
  },
  {
    "text": "protocol by specifying the protocol field here and we can specify what kind",
    "start": "1129290",
    "end": "1134780"
  },
  {
    "text": "of protocol we want to use or we want to upgrade to so in this case it is DNS",
    "start": "1134780",
    "end": "1139850"
  },
  {
    "text": "over HTTPS or it could also be DNS over TLS for example so in reality it would",
    "start": "1139850",
    "end": "1147290"
  },
  {
    "text": "look something like this there is a payment gateway and the payment info service we have the proxy like before",
    "start": "1147290",
    "end": "1154580"
  },
  {
    "text": "and the DNS tenant and in this case the tenant supports encrypted queries and",
    "start": "1154580",
    "end": "1160190"
  },
  {
    "text": "whenever the payment gateway makes UDP requests it gets trapped by the DNS",
    "start": "1160190",
    "end": "1165320"
  },
  {
    "text": "filter and this time the DNS filter originates encrypted connection to the",
    "start": "1165320",
    "end": "1170570"
  },
  {
    "text": "DNS service st dns over HTTPS is typically done over HTTP - and that's",
    "start": "1170570",
    "end": "1177980"
  },
  {
    "text": "also good for the network and once the response is obtained back",
    "start": "1177980",
    "end": "1183200"
  },
  {
    "text": "to the from the DNA server in the DNS filter it can then send it UDP responds",
    "start": "1183200",
    "end": "1189020"
  },
  {
    "text": "back to the payment gateway and once it gets the response it can connect to the",
    "start": "1189020",
    "end": "1195290"
  },
  {
    "text": "payment in for service that's it and for the demo I have a simple application",
    "start": "1195290",
    "end": "1203510"
  },
  {
    "start": "1199000",
    "end": "1297000"
  },
  {
    "text": "running called the HTTP bin and a sleep pod running we are which I'm going to make queries for the HTTP service I have",
    "start": "1203510",
    "end": "1212420"
  },
  {
    "text": "the same application running as a clone in a different namespace so the first namespace is acne calm and the second",
    "start": "1212420",
    "end": "1219620"
  },
  {
    "text": "one is foo.com we have the tenant specific DNS services",
    "start": "1219620",
    "end": "1226130"
  },
  {
    "text": "here and both have their own unique IPS we also have the own web proxy running",
    "start": "1226130",
    "end": "1231440"
  },
  {
    "text": "in front of the sleep service we don't really need the on web proxy in front of the HTTP service for now and whenever",
    "start": "1231440",
    "end": "1238040"
  },
  {
    "text": "the sleep service in the acne a namespace wants to discover the HTTP bin",
    "start": "1238040",
    "end": "1243710"
  },
  {
    "text": "service in the acne namespace it would make a DNS query to the Envoy proxy the",
    "start": "1243710",
    "end": "1249380"
  },
  {
    "text": "on web proxy will then send it to the DNS service and in this case we want the",
    "start": "1249380",
    "end": "1254510"
  },
  {
    "text": "HTTP bin service to be discoverable by the sleep service and its own namespace",
    "start": "1254510",
    "end": "1259810"
  },
  {
    "text": "in the second case if the sleep board in the full name space makes a query for",
    "start": "1259810",
    "end": "1266660"
  },
  {
    "text": "the HTTP bin service in the food namespace we want to allow such request as well but if the steep part in the",
    "start": "1266660",
    "end": "1274370"
  },
  {
    "text": "acne namespace makes a query for the HTTP bin service in the foo namespace we",
    "start": "1274370",
    "end": "1280160"
  },
  {
    "text": "don't want to allow such requests and the same is true for the other way round",
    "start": "1280160",
    "end": "1285230"
  },
  {
    "text": "so we don't want the HTTP server running in the acne namespace even to be discovered by the sleep service in the",
    "start": "1285230",
    "end": "1292250"
  },
  {
    "text": "full namespace let's see that for real so I have this deployment on kubernetes",
    "start": "1292250",
    "end": "1299060"
  },
  {
    "start": "1297000",
    "end": "1329000"
  },
  {
    "text": "and have the three pods corresponding to each service that I showed earlier and I",
    "start": "1299060",
    "end": "1305540"
  },
  {
    "text": "am running the same set of pods in both namespaces so if you notice core DNS has",
    "start": "1305540",
    "end": "1310550"
  },
  {
    "text": "just one container the HTTP bin service also has one container but the sleep pods in both",
    "start": "1310550",
    "end": "1316250"
  },
  {
    "text": "namespaces have two containers one container corresponds to the slip container and the other one is the proxy",
    "start": "1316250",
    "end": "1325779"
  },
  {
    "text": "now when I make queries from the sleep services you will notice the difference",
    "start": "1328420",
    "end": "1336070"
  },
  {
    "text": "so here I'm making a query which is a nslookup query for HTTP bin not acme",
    "start": "1336490",
    "end": "1341780"
  },
  {
    "text": "comm from the sleep container within the Acme namespace so this should work and",
    "start": "1341780",
    "end": "1348410"
  },
  {
    "text": "as you see we received a an IP address corresponding to that service in the",
    "start": "1348410",
    "end": "1354320"
  },
  {
    "text": "second case we are doing a similar query but in the Foo namespace so from the Foo namespace in the sleep container we make",
    "start": "1354320",
    "end": "1361370"
  },
  {
    "text": "up query for the HTTP bin service in the same namespace and we received an IP for that but in the third case it fails",
    "start": "1361370",
    "end": "1368870"
  },
  {
    "text": "because the sleep service in Acme cannot access the HDD we've been in foo and the",
    "start": "1368870",
    "end": "1375590"
  },
  {
    "text": "other way around as well so sleep service in foo cannot access it should have been in Acme and this is all",
    "start": "1375590",
    "end": "1381470"
  },
  {
    "text": "done by using the DNS filter that I spoke of earlier and we can do all sort of creative things with the filter I",
    "start": "1381470",
    "end": "1389890"
  },
  {
    "start": "1390000",
    "end": "1502000"
  },
  {
    "text": "wanted to show you the code that I use it in order to get this working so we have the DNS policy configuration here",
    "start": "1390370",
    "end": "1396980"
  },
  {
    "text": "for the sleep service and this time we are looking at the sleep service for the foo namespace and for the name server we",
    "start": "1396980",
    "end": "1404420"
  },
  {
    "text": "drop the cube DNS IP address and instead use a local host IP address and we don't",
    "start": "1404420",
    "end": "1410690"
  },
  {
    "text": "have any search domains and we have some other configuration here and in the same",
    "start": "1410690",
    "end": "1416470"
  },
  {
    "text": "part we are running the Envoy container and this is the Envoy configuration so",
    "start": "1416470",
    "end": "1422840"
  },
  {
    "text": "if you see right here we are running the listener on port 53 which is supporting",
    "start": "1422840",
    "end": "1429170"
  },
  {
    "text": "UDP queries and here is the configuration for the UDP dns filter and",
    "start": "1429170",
    "end": "1436120"
  },
  {
    "text": "we list all the domains that we want to track and here we list both ahmed calm",
    "start": "1436120",
    "end": "1442070"
  },
  {
    "text": "and food calm and if you see here on on this line you'll notice that we route",
    "start": "1442070",
    "end": "1448730"
  },
  {
    "text": "all the HTTP web Ben Rockne comm queries to no cluster which means that we don't want to have",
    "start": "1448730",
    "end": "1455750"
  },
  {
    "text": "the sleep service discover this particular H today bin service and then",
    "start": "1455750",
    "end": "1461450"
  },
  {
    "text": "the other service running in the full namespace will be routed to the HTTP bin",
    "start": "1461450",
    "end": "1466520"
  },
  {
    "text": "foo cluster and that's defined right here where we also update its name to",
    "start": "1466520",
    "end": "1473690"
  },
  {
    "text": "HTTP bin not food or the entire fqdn in the kubernetes matrix and then we're out",
    "start": "1473690",
    "end": "1481670"
  },
  {
    "text": "this query to a core DNS server and that's being set up right here and in",
    "start": "1481670",
    "end": "1488150"
  },
  {
    "text": "the core DNS for now we are routing it to the cube DNS actually but we can use a different kind of DNS server instead",
    "start": "1488150",
    "end": "1494480"
  },
  {
    "text": "of core DNS and do more contextual queries or more contextual responses",
    "start": "1494480",
    "end": "1502000"
  },
  {
    "start": "1502000",
    "end": "1582000"
  },
  {
    "text": "with that I want to summarize by saying that DNS plays a very important role for",
    "start": "1502570",
    "end": "1508070"
  },
  {
    "text": "service discovery and application migration and then current Enterprise Systems multi-tenancy is extremely",
    "start": "1508070",
    "end": "1514730"
  },
  {
    "text": "important and it's also very critical at the DNS layer and as I showed you in the",
    "start": "1514730",
    "end": "1521990"
  },
  {
    "text": "demo the on web proxy can solve some of these interesting challenges with DNS using a filter like the DNS filter and",
    "start": "1521990",
    "end": "1529420"
  },
  {
    "text": "the best part about envoy is that you can configure it at runtime by using its",
    "start": "1529420",
    "end": "1535040"
  },
  {
    "text": "XDS api's so you don't need to restart the proxy nor any of your services and",
    "start": "1535040",
    "end": "1540550"
  },
  {
    "text": "everything will work so if you have new policies that you want to apply at runtime on Y will take care of it pretty",
    "start": "1540550",
    "end": "1547370"
  },
  {
    "text": "easily you can also integrate these DNS filters along with third-party systems",
    "start": "1547370",
    "end": "1554630"
  },
  {
    "text": "to provide richer observability security and filtering so I spoke about Prometheus and graph on ax we could also",
    "start": "1554630",
    "end": "1561650"
  },
  {
    "text": "consider other options here and finally I want to mention that we want to contribute this work to the open source",
    "start": "1561650",
    "end": "1568760"
  },
  {
    "text": "and existing projects like sto and Envoy and if you have a use case for this work",
    "start": "1568760",
    "end": "1575150"
  },
  {
    "text": "then please get in touch with us and we would love to collaborate with you and if you have any questions we can speak",
    "start": "1575150",
    "end": "1582230"
  },
  {
    "start": "1582000",
    "end": "2025000"
  },
  {
    "text": "now or also be available at the booth right after the stock thank you",
    "start": "1582230",
    "end": "1589170"
  },
  {
    "text": "[Applause]",
    "start": "1589170",
    "end": "1596390"
  },
  {
    "text": "[Music]",
    "start": "1596390",
    "end": "1602270"
  },
  {
    "text": "yeah anyways for questions and answers I won't run them around in whatever order I can see them so hello so just curious",
    "start": "1603050",
    "end": "1614480"
  },
  {
    "text": "how does this differ from using kubernetes Network policies and when",
    "start": "1614480",
    "end": "1620010"
  },
  {
    "text": "would I want to use envoy instead of that allow you to go per say if you want",
    "start": "1620010",
    "end": "1633840"
  },
  {
    "text": "if you want to kind of look at the DNS queries and responses and also build",
    "start": "1633840",
    "end": "1639000"
  },
  {
    "text": "some telemetry around it that's when you you know you look at this versus just play network policies but having said",
    "start": "1639000",
    "end": "1645570"
  },
  {
    "text": "that it's useful to even have the Netta guardrails at the neck network layer and",
    "start": "1645570",
    "end": "1650580"
  },
  {
    "text": "I had this on top God thank you in",
    "start": "1650580",
    "end": "1657930"
  },
  {
    "text": "regards to making multiple DNS servers everywhere as they need lots of these",
    "start": "1657930",
    "end": "1663510"
  },
  {
    "text": "proxies like what type of impact would you be looking at obviously you're putting down lots more core DNS pods",
    "start": "1663510",
    "end": "1670500"
  },
  {
    "text": "you're putting all of these filters down how much of an impact you talking about if you've got a really large cluster",
    "start": "1670500",
    "end": "1675750"
  },
  {
    "text": "you're gonna have a lot of containers that are running so the boundary around",
    "start": "1675750",
    "end": "1681090"
  },
  {
    "text": "that is a group of namespaces so it just depends upon how many names namespaces",
    "start": "1681090",
    "end": "1686520"
  },
  {
    "text": "you wanna have the DNS serving so the dimension is not at the level of the",
    "start": "1686520",
    "end": "1692190"
  },
  {
    "text": "services or the pods but it's more at a higher level so it just depends upon how",
    "start": "1692190",
    "end": "1698340"
  },
  {
    "text": "many namespaces you will have on that cluster or across clusters as well yeah I haven't tried looking at even at",
    "start": "1698340",
    "end": "1704970"
  },
  {
    "text": "deployment level going beyond known spaces going even deeper down I'm sorry did you think about going into",
    "start": "1704970",
    "end": "1711510"
  },
  {
    "text": "deployment going deep it down not just namespace level but deeper into actual deployments having their own DNS service",
    "start": "1711510",
    "end": "1718740"
  },
  {
    "text": "that could be a not the den scale would be a challenge there",
    "start": "1718740",
    "end": "1724059"
  },
  {
    "text": "so my question also was similar to the network policy so that is one second",
    "start": "1729580",
    "end": "1734809"
  },
  {
    "text": "thing is like eesti also provides our back right so that can also do a denial of service for the service levels so you",
    "start": "1734809",
    "end": "1741290"
  },
  {
    "text": "can restrict like which service can call which service we can put various filters there itself right yeah but you can't do",
    "start": "1741290",
    "end": "1747860"
  },
  {
    "text": "it at a DNS layer today and this is what we want to bring in interest here as well you can do it you can put l7",
    "start": "1747860",
    "end": "1753950"
  },
  {
    "text": "policies on HTTP and G RPC requests but not at the service discovery layer in",
    "start": "1753950",
    "end": "1759799"
  },
  {
    "text": "terms of DNS so this would be an add-on and yeah be lightly leveraged our back",
    "start": "1759799",
    "end": "1765230"
  },
  {
    "text": "but but yeah no my question is like it throw it's the same experience only",
    "start": "1765230",
    "end": "1771590"
  },
  {
    "text": "right I mean I mean is it add any value add any more value to that so let's say you are running some secure applications",
    "start": "1771590",
    "end": "1778040"
  },
  {
    "text": "like in a single cluster and you don't even want the other like tenant to",
    "start": "1778040",
    "end": "1783770"
  },
  {
    "text": "discover these applications or even the IP address so this is just adding an extra level of security in that sense",
    "start": "1783770",
    "end": "1790250"
  },
  {
    "text": "yeah so it kind of ties in well it adds a layer on top again as I said for alpha",
    "start": "1790250",
    "end": "1798280"
  },
  {
    "text": "so kind of adding to what you were saying so with sto when you have like service entries or you have the registry",
    "start": "1805030",
    "end": "1811010"
  },
  {
    "text": "only mode you kind of can do this kind of DNS filtering because you're limited to the namespace or whatever you are",
    "start": "1811010",
    "end": "1816890"
  },
  {
    "text": "trying to expose to your Envoy proxy so why is this sort I mean this would be including like a new CID or something",
    "start": "1816890",
    "end": "1823640"
  },
  {
    "text": "like that but why isn't it something that we can expand using the registry only mode for example you're talking",
    "start": "1823640",
    "end": "1832970"
  },
  {
    "text": "about the specifically in terms of isolating DNS so it's it kind of boils",
    "start": "1832970",
    "end": "1838820"
  },
  {
    "text": "down to DNS in a sense because what you can do with Sto and you have the registry only mode is that all the",
    "start": "1838820",
    "end": "1845120"
  },
  {
    "text": "outgoing requests are limited to the whatever you've actually white listed for your particular workload so what I",
    "start": "1845120",
    "end": "1851059"
  },
  {
    "text": "was visible within the namespace or visible to it within like another namespace for a particular application so it's already",
    "start": "1851059",
    "end": "1856740"
  },
  {
    "text": "kind of restricted and so anything that you're trying to resolve if envoy doesn't already know about it it's not",
    "start": "1856740",
    "end": "1862230"
  },
  {
    "text": "going to be able to route the request anyway yeah so this solution is not specific to sto I mean you can take this",
    "start": "1862230",
    "end": "1868080"
  },
  {
    "text": "and run it on like just on Moi's or yeah you don't even need a service mash per",
    "start": "1868080",
    "end": "1873510"
  },
  {
    "text": "say this is like a generic solution but you can adopt this in different ways I",
    "start": "1873510",
    "end": "1878789"
  },
  {
    "text": "mean these problems can also be solved in kubernetes or in core DNS so this is",
    "start": "1878789",
    "end": "1884039"
  },
  {
    "text": "one way that you problem at the heart",
    "start": "1884039",
    "end": "1896940"
  },
  {
    "text": "which is add the dns layer rather than add something on top to solve it so",
    "start": "1896940",
    "end": "1902370"
  },
  {
    "text": "we're kind of trying to go ground-up we've been playing around with safe service entry entry is quite a bit within the bounds of service mesh and",
    "start": "1902370",
    "end": "1909990"
  },
  {
    "text": "kind of kind of say ok if you had to rethink it and see if there's a different way where essentially okay dns",
    "start": "1909990",
    "end": "1916679"
  },
  {
    "text": "isolation is a piece they can even cross cluster but then with this you can also think about more use cases right like we",
    "start": "1916679",
    "end": "1923610"
  },
  {
    "text": "brought up telemetry and observability which is kind of not something you can do it the current is your code base",
    "start": "1923610",
    "end": "1929130"
  },
  {
    "text": "right now so I think thank you for the",
    "start": "1929130",
    "end": "1934500"
  },
  {
    "text": "presentation I was thinking of Grundy we there is the node local DNS cache that is currently",
    "start": "1934500",
    "end": "1941100"
  },
  {
    "text": "in beta right and I was thinking exactly what you're doing is kind of these like",
    "start": "1941100",
    "end": "1947780"
  },
  {
    "text": "decentralization of DNS but not at non level and rather at like namespace level",
    "start": "1947780",
    "end": "1953400"
  },
  {
    "text": "but in not local DNS there is CAF 8 that you lose every BT if your DNS is not",
    "start": "1953400",
    "end": "1962250"
  },
  {
    "text": "ready if your DNS server is not ready so how would you like solve this issue with",
    "start": "1962250",
    "end": "1968130"
  },
  {
    "text": "having this single point of failure in each name space for the local name space",
    "start": "1968130",
    "end": "1973230"
  },
  {
    "text": "resolution so are you saying that the DNS server for the tenant is not ready",
    "start": "1973230",
    "end": "1978780"
  },
  {
    "text": "and I mean I think that's like a bootstrap problem which which is a general I mean",
    "start": "1978780",
    "end": "1986930"
  },
  {
    "text": "it's a general problem I think with any of the DNS solutions we have right now one way I mean with the filter you can",
    "start": "1986930",
    "end": "1994670"
  },
  {
    "text": "do something like you can keep worrying for the uptime of the DNS server and",
    "start": "1994670",
    "end": "2000790"
  },
  {
    "text": "then you can probably start responding so and that could be a part of the health check of the proxy itself so you",
    "start": "2000790",
    "end": "2007690"
  },
  {
    "text": "can play around like that yeah all right I think that puts us right at time so if",
    "start": "2007690",
    "end": "2014410"
  },
  {
    "text": "you have any further questions or conversations always are great places for that I think it's lunchtime now actually so enjoy thanks everybody thank",
    "start": "2014410",
    "end": "2022210"
  },
  {
    "text": "you so much thank you so much for deep [Applause]",
    "start": "2022210",
    "end": "2027579"
  }
]