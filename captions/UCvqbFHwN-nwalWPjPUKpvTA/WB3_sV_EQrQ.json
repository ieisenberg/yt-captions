[
  {
    "start": "0",
    "end": "88000"
  },
  {
    "text": "hello and welcome to kubecon",
    "start": "1120",
    "end": "3040"
  },
  {
    "text": "cloudnativecon eu 2021",
    "start": "3040",
    "end": "5200"
  },
  {
    "text": "virtual this is resource requests and",
    "start": "5200",
    "end": "8400"
  },
  {
    "text": "limits under the hood",
    "start": "8400",
    "end": "9679"
  },
  {
    "text": "the journey of a pod spec i'm caslin",
    "start": "9679",
    "end": "12559"
  },
  {
    "text": "fields and i'm a developer advocate at",
    "start": "12559",
    "end": "14719"
  },
  {
    "text": "google",
    "start": "14719",
    "end": "15839"
  },
  {
    "text": "i'm also a cloud native computing",
    "start": "15839",
    "end": "17440"
  },
  {
    "text": "foundation ambassador and a member of",
    "start": "17440",
    "end": "19279"
  },
  {
    "text": "the",
    "start": "19279",
    "end": "19600"
  },
  {
    "text": "kubernetes special interest group for",
    "start": "19600",
    "end": "21600"
  },
  {
    "text": "contributor experience",
    "start": "21600",
    "end": "23680"
  },
  {
    "text": "i love to explain fun tech concepts with",
    "start": "23680",
    "end": "27199"
  },
  {
    "text": "analogies and illustrations so i do that",
    "start": "27199",
    "end": "30320"
  },
  {
    "text": "on my website at caslin.rocks and you'll",
    "start": "30320",
    "end": "32160"
  },
  {
    "text": "see a lot of that in today's",
    "start": "32160",
    "end": "33280"
  },
  {
    "text": "presentation",
    "start": "33280",
    "end": "34239"
  },
  {
    "text": "you can always find me on twitter at",
    "start": "34239",
    "end": "36480"
  },
  {
    "text": "caslin fields",
    "start": "36480",
    "end": "38960"
  },
  {
    "text": "and i am kohei ota i'm an architect at",
    "start": "38960",
    "end": "42079"
  },
  {
    "text": "hewlett packard enterprise",
    "start": "42079",
    "end": "44079"
  },
  {
    "text": "i'm also a cncf ambassador and in the",
    "start": "44079",
    "end": "47360"
  },
  {
    "text": "communities community",
    "start": "47360",
    "end": "48800"
  },
  {
    "text": "i'm the owner of sick doc's japanese",
    "start": "48800",
    "end": "51039"
  },
  {
    "text": "translation",
    "start": "51039",
    "end": "52160"
  },
  {
    "text": "so if you ever speak japanese and wants",
    "start": "52160",
    "end": "54719"
  },
  {
    "text": "to contribute to the quran's project",
    "start": "54719",
    "end": "56800"
  },
  {
    "text": "your per request are always welcome",
    "start": "56800",
    "end": "60239"
  },
  {
    "text": "i go by inductor on twitter and github",
    "start": "60239",
    "end": "64239"
  },
  {
    "text": "so that's us and let's get going",
    "start": "64239",
    "end": "67600"
  },
  {
    "text": "today we're going to use a fun analogy",
    "start": "67600",
    "end": "70080"
  },
  {
    "text": "to",
    "start": "70080",
    "end": "70799"
  },
  {
    "text": "help these concepts really stick and",
    "start": "70799",
    "end": "73040"
  },
  {
    "text": "help you remember them",
    "start": "73040",
    "end": "74400"
  },
  {
    "text": "so to start off our analogy for our talk",
    "start": "74400",
    "end": "77920"
  },
  {
    "text": "today",
    "start": "77920",
    "end": "79040"
  },
  {
    "text": "i want you to think about your app being",
    "start": "79040",
    "end": "81840"
  },
  {
    "text": "like a dog",
    "start": "81840",
    "end": "83840"
  },
  {
    "text": "and in this case your dog is going to be",
    "start": "83840",
    "end": "88479"
  },
  {
    "start": "88000",
    "end": "88000"
  },
  {
    "text": "going into the doggy daycare",
    "start": "88479",
    "end": "91680"
  },
  {
    "text": "i've used this analogy before as a way",
    "start": "91680",
    "end": "93439"
  },
  {
    "text": "to help explain",
    "start": "93439",
    "end": "95119"
  },
  {
    "text": "container primitives that will come into",
    "start": "95119",
    "end": "97119"
  },
  {
    "text": "play here a little bit later",
    "start": "97119",
    "end": "98799"
  },
  {
    "text": "but the main idea i want you to get here",
    "start": "98799",
    "end": "101600"
  },
  {
    "text": "is",
    "start": "101600",
    "end": "102159"
  },
  {
    "text": "that your application when you put it",
    "start": "102159",
    "end": "105119"
  },
  {
    "text": "into kubernetes for kubernetes to run",
    "start": "105119",
    "end": "107520"
  },
  {
    "text": "is going to be running alongside lots of",
    "start": "107520",
    "end": "110079"
  },
  {
    "text": "other applications being run in",
    "start": "110079",
    "end": "111759"
  },
  {
    "text": "containers",
    "start": "111759",
    "end": "112640"
  },
  {
    "text": "and our goal here is to make sure that",
    "start": "112640",
    "end": "114320"
  },
  {
    "text": "all of our applications have",
    "start": "114320",
    "end": "115680"
  },
  {
    "text": "everything that they need to be able to",
    "start": "115680",
    "end": "117439"
  },
  {
    "text": "run successfully",
    "start": "117439",
    "end": "118960"
  },
  {
    "text": "however apps don't always play nicely",
    "start": "118960",
    "end": "121119"
  },
  {
    "text": "with each other",
    "start": "121119",
    "end": "122159"
  },
  {
    "text": "so resource requests and limits can help",
    "start": "122159",
    "end": "125200"
  },
  {
    "text": "us make sure that they have",
    "start": "125200",
    "end": "126479"
  },
  {
    "text": "everything that they need without",
    "start": "126479",
    "end": "128239"
  },
  {
    "text": "getting in each other's way",
    "start": "128239",
    "end": "131120"
  },
  {
    "text": "and since we're talking about kubernetes",
    "start": "131120",
    "end": "133120"
  },
  {
    "text": "kubernetes is container orchestration",
    "start": "133120",
    "end": "135040"
  },
  {
    "text": "which means",
    "start": "135040",
    "end": "136400"
  },
  {
    "text": "containers and applications at scale so",
    "start": "136400",
    "end": "138959"
  },
  {
    "text": "we're going to be talking about our",
    "start": "138959",
    "end": "140080"
  },
  {
    "text": "doggy daycare",
    "start": "140080",
    "end": "141280"
  },
  {
    "text": "and all of the many people and pieces",
    "start": "141280",
    "end": "143840"
  },
  {
    "text": "that make up our doggy daycare and how",
    "start": "143840",
    "end": "146640"
  },
  {
    "text": "how kubernetes takes care of our apps",
    "start": "146640",
    "end": "149120"
  },
  {
    "text": "essentially",
    "start": "149120",
    "end": "151680"
  },
  {
    "text": "so let's dive into resource requests and",
    "start": "151840",
    "end": "154840"
  },
  {
    "text": "limits",
    "start": "154840",
    "end": "156239"
  },
  {
    "start": "156000",
    "end": "156000"
  },
  {
    "text": "first here's a look at an ordinary pod",
    "start": "156239",
    "end": "158640"
  },
  {
    "text": "spec",
    "start": "158640",
    "end": "159840"
  },
  {
    "text": "you may have seen one of these before",
    "start": "159840",
    "end": "162400"
  },
  {
    "text": "here",
    "start": "162400",
    "end": "163040"
  },
  {
    "text": "is our app our dog is going to be",
    "start": "163040",
    "end": "166640"
  },
  {
    "text": "within the image for our container that",
    "start": "166640",
    "end": "169360"
  },
  {
    "text": "we're actually going to be running",
    "start": "169360",
    "end": "170319"
  },
  {
    "text": "within our pod",
    "start": "170319",
    "end": "172000"
  },
  {
    "text": "and you can see below our container",
    "start": "172000",
    "end": "174000"
  },
  {
    "text": "image we have defined",
    "start": "174000",
    "end": "176160"
  },
  {
    "text": "a resource request and a resource limit",
    "start": "176160",
    "end": "179840"
  },
  {
    "text": "so we're going to start off talking",
    "start": "179840",
    "end": "181280"
  },
  {
    "text": "about the request and you can see here",
    "start": "181280",
    "end": "183680"
  },
  {
    "text": "we have a memory request defined of",
    "start": "183680",
    "end": "187200"
  },
  {
    "text": "64 megabytes and a cpu request of 250m",
    "start": "187200",
    "end": "191920"
  },
  {
    "text": "there so let's look at what happens",
    "start": "191920",
    "end": "195200"
  },
  {
    "text": "when we actually send this pod spec",
    "start": "195200",
    "end": "198640"
  },
  {
    "text": "to kubernetes to run",
    "start": "198640",
    "end": "201920"
  },
  {
    "start": "201000",
    "end": "201000"
  },
  {
    "text": "first thing i want you to think about is",
    "start": "202000",
    "end": "204000"
  },
  {
    "text": "that requests are used by kubernetes",
    "start": "204000",
    "end": "206400"
  },
  {
    "text": "for planning so in the doggy daycare",
    "start": "206400",
    "end": "209280"
  },
  {
    "text": "analogy this might be kind of like",
    "start": "209280",
    "end": "211120"
  },
  {
    "text": "planning out how much space the doggy",
    "start": "211120",
    "end": "212640"
  },
  {
    "text": "daycare is going to need in order to",
    "start": "212640",
    "end": "214080"
  },
  {
    "text": "take care of your",
    "start": "214080",
    "end": "215519"
  },
  {
    "text": "precious app so let's go through the",
    "start": "215519",
    "end": "217760"
  },
  {
    "text": "whole journey that that",
    "start": "217760",
    "end": "219360"
  },
  {
    "text": "request goes through when it goes into",
    "start": "219360",
    "end": "221440"
  },
  {
    "text": "kubernetes",
    "start": "221440",
    "end": "224159"
  },
  {
    "text": "so you as the developer you have your",
    "start": "224159",
    "end": "226080"
  },
  {
    "text": "app that you love",
    "start": "226080",
    "end": "227440"
  },
  {
    "text": "so very much and you know exactly what",
    "start": "227440",
    "end": "229519"
  },
  {
    "text": "it needs and you want to make sure that",
    "start": "229519",
    "end": "231200"
  },
  {
    "text": "the doggy daycare is going to do",
    "start": "231200",
    "end": "232959"
  },
  {
    "text": "its very best job taking care of it so",
    "start": "232959",
    "end": "235920"
  },
  {
    "text": "you want to put your app",
    "start": "235920",
    "end": "237280"
  },
  {
    "text": "in a pod in the doggy daycare so",
    "start": "237280",
    "end": "240560"
  },
  {
    "text": "kubernetes says okay we can help uh take",
    "start": "240560",
    "end": "244000"
  },
  {
    "text": "care of your app",
    "start": "244000",
    "end": "246799"
  },
  {
    "start": "246000",
    "end": "246000"
  },
  {
    "text": "our developer says that this app will",
    "start": "247439",
    "end": "249840"
  },
  {
    "text": "need two cpu",
    "start": "249840",
    "end": "251200"
  },
  {
    "text": "and four gigabytes of memory in order to",
    "start": "251200",
    "end": "252959"
  },
  {
    "text": "run properly",
    "start": "252959",
    "end": "254480"
  },
  {
    "text": "our doggydicker of course knows how to",
    "start": "254480",
    "end": "257040"
  },
  {
    "text": "take care of apps",
    "start": "257040",
    "end": "258479"
  },
  {
    "text": "and can make sure that that happens so",
    "start": "258479",
    "end": "260959"
  },
  {
    "text": "it makes a note",
    "start": "260959",
    "end": "262079"
  },
  {
    "text": "of the app's needs to make sure that",
    "start": "262079",
    "end": "264000"
  },
  {
    "text": "they'll be met once",
    "start": "264000",
    "end": "265280"
  },
  {
    "text": "the application is actually running in",
    "start": "265280",
    "end": "267360"
  },
  {
    "text": "kubernetes",
    "start": "267360",
    "end": "268479"
  },
  {
    "text": "and it does that by recording to etcd",
    "start": "268479",
    "end": "271919"
  },
  {
    "text": "etcd is the key value store component",
    "start": "271919",
    "end": "274400"
  },
  {
    "text": "used by kubernetes",
    "start": "274400",
    "end": "275840"
  },
  {
    "text": "it functions as a single source of truth",
    "start": "275840",
    "end": "277840"
  },
  {
    "text": "for the entire cluster",
    "start": "277840",
    "end": "279919"
  },
  {
    "text": "so any important key notes of how to",
    "start": "279919",
    "end": "282639"
  },
  {
    "text": "take care of your app",
    "start": "282639",
    "end": "283759"
  },
  {
    "text": "need to be reflected in cd",
    "start": "283759",
    "end": "287680"
  },
  {
    "text": "so the next thing that needs to happen",
    "start": "287759",
    "end": "289120"
  },
  {
    "text": "is we need to figure out which node",
    "start": "289120",
    "end": "291040"
  },
  {
    "text": "there is infrastructure underlying this",
    "start": "291040",
    "end": "292880"
  },
  {
    "text": "kubernetes cluster so which actual",
    "start": "292880",
    "end": "294720"
  },
  {
    "text": "compute",
    "start": "294720",
    "end": "295280"
  },
  {
    "text": "node is this application going to run on",
    "start": "295280",
    "end": "299440"
  },
  {
    "text": "so that goes to the kubernetes scheduler",
    "start": "299440",
    "end": "302240"
  },
  {
    "text": "the scheduler says oh",
    "start": "302240",
    "end": "303520"
  },
  {
    "text": "i see a new pod is coming in and that",
    "start": "303520",
    "end": "306240"
  },
  {
    "text": "pod requires two cpu and four gigabytes",
    "start": "306240",
    "end": "308240"
  },
  {
    "text": "of memory",
    "start": "308240",
    "end": "309360"
  },
  {
    "text": "i'll take that into account and make",
    "start": "309360",
    "end": "311759"
  },
  {
    "text": "sure that i put it on a node that can",
    "start": "311759",
    "end": "313280"
  },
  {
    "text": "handle that",
    "start": "313280",
    "end": "315680"
  },
  {
    "start": "315000",
    "end": "315000"
  },
  {
    "text": "so the scheduler is a kubernetes",
    "start": "315680",
    "end": "317120"
  },
  {
    "text": "component that evaluates nodes",
    "start": "317120",
    "end": "320160"
  },
  {
    "text": "to assign a pod to resource request",
    "start": "320160",
    "end": "323759"
  },
  {
    "text": "is one of the parameters that the",
    "start": "323759",
    "end": "325280"
  },
  {
    "text": "scheduler takes into account when it's",
    "start": "325280",
    "end": "327199"
  },
  {
    "text": "ranking which nodes could possibly hold",
    "start": "327199",
    "end": "329360"
  },
  {
    "text": "this pod",
    "start": "329360",
    "end": "332000"
  },
  {
    "text": "so now we've gone through the scheduler",
    "start": "332080",
    "end": "334960"
  },
  {
    "text": "we",
    "start": "334960",
    "end": "335440"
  },
  {
    "text": "have figured out which node we're going",
    "start": "335440",
    "end": "336880"
  },
  {
    "text": "to place that pod on so now we need to",
    "start": "336880",
    "end": "338880"
  },
  {
    "text": "talk to the cubelet which is the",
    "start": "338880",
    "end": "340400"
  },
  {
    "text": "kubernetes control plane component which",
    "start": "340400",
    "end": "342560"
  },
  {
    "text": "is running on",
    "start": "342560",
    "end": "343919"
  },
  {
    "text": "the node and we kind of hand off",
    "start": "343919",
    "end": "347199"
  },
  {
    "start": "347000",
    "end": "347000"
  },
  {
    "text": "our pod spec to that cubelet and",
    "start": "347199",
    "end": "350400"
  },
  {
    "text": "say hey let go make this pod real make",
    "start": "350400",
    "end": "353840"
  },
  {
    "text": "it a thing",
    "start": "353840",
    "end": "354479"
  },
  {
    "text": "run the application so that's what our",
    "start": "354479",
    "end": "356800"
  },
  {
    "text": "cubelet does",
    "start": "356800",
    "end": "359360"
  },
  {
    "start": "359000",
    "end": "359000"
  },
  {
    "text": "so all in all this is kind of what the",
    "start": "359360",
    "end": "360880"
  },
  {
    "text": "journey of our request looked like",
    "start": "360880",
    "end": "363280"
  },
  {
    "text": "a new request came into our api server",
    "start": "363280",
    "end": "366000"
  },
  {
    "text": "on the control plane",
    "start": "366000",
    "end": "368319"
  },
  {
    "text": "and that passed",
    "start": "368319",
    "end": "371440"
  },
  {
    "text": "the the request off to the scheduler",
    "start": "371440",
    "end": "374000"
  },
  {
    "text": "saying hey there's a new pod that needs",
    "start": "374000",
    "end": "375680"
  },
  {
    "text": "to be assigned to a node",
    "start": "375680",
    "end": "377360"
  },
  {
    "text": "the scheduler figured out which node to",
    "start": "377360",
    "end": "380240"
  },
  {
    "text": "assign that to",
    "start": "380240",
    "end": "381759"
  },
  {
    "text": "and then that got passed on to the",
    "start": "381759",
    "end": "384479"
  },
  {
    "text": "cubelet",
    "start": "384479",
    "end": "385199"
  },
  {
    "text": "which actually took care of running our",
    "start": "385199",
    "end": "387520"
  },
  {
    "text": "pod",
    "start": "387520",
    "end": "389918"
  },
  {
    "start": "390000",
    "end": "390000"
  },
  {
    "text": "here's a little bit more information",
    "start": "390240",
    "end": "391759"
  },
  {
    "text": "kohei is going to tell you about",
    "start": "391759",
    "end": "393039"
  },
  {
    "text": "requests",
    "start": "393039",
    "end": "395759"
  },
  {
    "text": "thank you caslin okay so let's talk",
    "start": "395759",
    "end": "398639"
  },
  {
    "text": "about",
    "start": "398639",
    "end": "399280"
  },
  {
    "text": "what cube scheduler does internally",
    "start": "399280",
    "end": "402400"
  },
  {
    "text": "so cube scheduler evaluates node",
    "start": "402400",
    "end": "405360"
  },
  {
    "text": "resource usage",
    "start": "405360",
    "end": "406560"
  },
  {
    "text": "and it knows capacity based on the node",
    "start": "406560",
    "end": "409199"
  },
  {
    "text": "metrics",
    "start": "409199",
    "end": "410479"
  },
  {
    "text": "if a node does not have enough resources",
    "start": "410479",
    "end": "413440"
  },
  {
    "text": "scheduler will not assign a part with",
    "start": "413440",
    "end": "415599"
  },
  {
    "text": "the request value",
    "start": "415599",
    "end": "417759"
  },
  {
    "text": "you can see the node resource",
    "start": "417759",
    "end": "419440"
  },
  {
    "text": "information by executing cubicado",
    "start": "419440",
    "end": "421919"
  },
  {
    "text": "describe",
    "start": "421919",
    "end": "422560"
  },
  {
    "text": "node command if you ever encounter a",
    "start": "422560",
    "end": "425360"
  },
  {
    "text": "problem with the",
    "start": "425360",
    "end": "426639"
  },
  {
    "text": "assignment",
    "start": "426639",
    "end": "429199"
  },
  {
    "start": "429000",
    "end": "429000"
  },
  {
    "text": "so here's the summary of pod requests",
    "start": "431039",
    "end": "434400"
  },
  {
    "text": "request values are used when kubernetes",
    "start": "434400",
    "end": "436720"
  },
  {
    "text": "creates a pod",
    "start": "436720",
    "end": "438160"
  },
  {
    "text": "cube scheduler uses those parameters to",
    "start": "438160",
    "end": "440639"
  },
  {
    "text": "evaluate nodes to match the pod",
    "start": "440639",
    "end": "442479"
  },
  {
    "text": "requirement",
    "start": "442479",
    "end": "444000"
  },
  {
    "text": "we will explain deeply later but cpa",
    "start": "444000",
    "end": "447120"
  },
  {
    "text": "request",
    "start": "447120",
    "end": "447680"
  },
  {
    "text": "is also an important value to limit cpu",
    "start": "447680",
    "end": "450160"
  },
  {
    "text": "resource",
    "start": "450160",
    "end": "451120"
  },
  {
    "text": "in case the cpu usage is 100 percent",
    "start": "451120",
    "end": "455440"
  },
  {
    "text": "if a pot uses more resources than the",
    "start": "455440",
    "end": "457840"
  },
  {
    "text": "request value",
    "start": "457840",
    "end": "459039"
  },
  {
    "text": "and node resources are being used up",
    "start": "459039",
    "end": "461840"
  },
  {
    "text": "that means",
    "start": "461840",
    "end": "462800"
  },
  {
    "text": "there is potential of pot eviction",
    "start": "462800",
    "end": "465840"
  },
  {
    "text": "your pods can be removed from your node",
    "start": "465840",
    "end": "469280"
  },
  {
    "text": "if you want to control the priority you",
    "start": "469280",
    "end": "471680"
  },
  {
    "text": "should understand about qos class in",
    "start": "471680",
    "end": "474000"
  },
  {
    "text": "kubernetes",
    "start": "474000",
    "end": "476720"
  },
  {
    "start": "476000",
    "end": "476000"
  },
  {
    "text": "the qos class is used when a pot is",
    "start": "476960",
    "end": "479680"
  },
  {
    "text": "being created",
    "start": "479680",
    "end": "480639"
  },
  {
    "text": "and evicted every pod has a qs class",
    "start": "480639",
    "end": "484400"
  },
  {
    "text": "based on the request and limit values",
    "start": "484400",
    "end": "486639"
  },
  {
    "text": "you set",
    "start": "486639",
    "end": "488240"
  },
  {
    "text": "there are three types if you set the",
    "start": "488240",
    "end": "490639"
  },
  {
    "text": "limit and request for all containers in",
    "start": "490639",
    "end": "493039"
  },
  {
    "text": "a pod",
    "start": "493039",
    "end": "494240"
  },
  {
    "text": "then limit and request values are equal",
    "start": "494240",
    "end": "497599"
  },
  {
    "text": "kubernetes sets the qs class as",
    "start": "497599",
    "end": "499520"
  },
  {
    "text": "guaranteed",
    "start": "499520",
    "end": "500639"
  },
  {
    "text": "which is the top priority if you do not",
    "start": "500639",
    "end": "504000"
  },
  {
    "text": "set any resource request on limit",
    "start": "504000",
    "end": "506400"
  },
  {
    "text": "kubernetes labels the pod as best effort",
    "start": "506400",
    "end": "508800"
  },
  {
    "text": "qos class automatically",
    "start": "508800",
    "end": "511360"
  },
  {
    "text": "this is the least priority so based on",
    "start": "511360",
    "end": "514000"
  },
  {
    "text": "the priority",
    "start": "514000",
    "end": "514880"
  },
  {
    "text": "kubernetes decides which pod should be",
    "start": "514880",
    "end": "517440"
  },
  {
    "text": "removed first",
    "start": "517440",
    "end": "518719"
  },
  {
    "text": "when a node resource is about to be",
    "start": "518719",
    "end": "520399"
  },
  {
    "text": "exhausted",
    "start": "520399",
    "end": "523039"
  },
  {
    "start": "524000",
    "end": "524000"
  },
  {
    "text": "so now we're going to start talking more",
    "start": "525440",
    "end": "527279"
  },
  {
    "text": "about limits",
    "start": "527279",
    "end": "528560"
  },
  {
    "text": "this is a look at our pod spec from",
    "start": "528560",
    "end": "530399"
  },
  {
    "text": "earlier and you can see that we're now",
    "start": "530399",
    "end": "532080"
  },
  {
    "text": "talking about the limits",
    "start": "532080",
    "end": "533279"
  },
  {
    "text": "section of our pod spec where we have",
    "start": "533279",
    "end": "535360"
  },
  {
    "text": "defined",
    "start": "535360",
    "end": "536320"
  },
  {
    "text": "a limit on our memory and a limit on our",
    "start": "536320",
    "end": "538480"
  },
  {
    "text": "cpu",
    "start": "538480",
    "end": "541120"
  },
  {
    "start": "541000",
    "end": "541000"
  },
  {
    "text": "main thing i want you to know about",
    "start": "541760",
    "end": "542880"
  },
  {
    "text": "limits is that limits are for enforcing",
    "start": "542880",
    "end": "545200"
  },
  {
    "text": "the rules",
    "start": "545200",
    "end": "546320"
  },
  {
    "text": "we want to say that this pod cannot go",
    "start": "546320",
    "end": "548880"
  },
  {
    "text": "over",
    "start": "548880",
    "end": "550160"
  },
  {
    "text": "this limit of of resources so let's take",
    "start": "550160",
    "end": "553360"
  },
  {
    "text": "a look at what happens when a limit",
    "start": "553360",
    "end": "555200"
  },
  {
    "text": "comes into kubernetes",
    "start": "555200",
    "end": "556800"
  },
  {
    "text": "the journey that it goes through to",
    "start": "556800",
    "end": "559040"
  },
  {
    "text": "actually happen",
    "start": "559040",
    "end": "560480"
  },
  {
    "text": "so once again we've got our developer",
    "start": "560480",
    "end": "562080"
  },
  {
    "text": "with his precious app",
    "start": "562080",
    "end": "563760"
  },
  {
    "text": "who says i want to make sure that my pod",
    "start": "563760",
    "end": "566399"
  },
  {
    "text": "doesn't consume more than",
    "start": "566399",
    "end": "568320"
  },
  {
    "text": "two cpu and four gigabytes of memory",
    "start": "568320",
    "end": "571760"
  },
  {
    "text": "kubernetes says okay we can limit your",
    "start": "571760",
    "end": "574000"
  },
  {
    "text": "pods resource usage",
    "start": "574000",
    "end": "576800"
  },
  {
    "start": "576000",
    "end": "576000"
  },
  {
    "text": "so that gets passed off to the scheduler",
    "start": "576800",
    "end": "578640"
  },
  {
    "text": "once again it still needs to be assigned",
    "start": "578640",
    "end": "580560"
  },
  {
    "text": "to a compute node",
    "start": "580560",
    "end": "582399"
  },
  {
    "text": "so this new pod needs to be limited to 2",
    "start": "582399",
    "end": "584880"
  },
  {
    "text": "cpu and 4 gigabytes",
    "start": "584880",
    "end": "587040"
  },
  {
    "text": "the scheduler is going to make sure that",
    "start": "587040",
    "end": "588720"
  },
  {
    "text": "the node knows about that limit so that",
    "start": "588720",
    "end": "591200"
  },
  {
    "text": "it can enforce it",
    "start": "591200",
    "end": "594080"
  },
  {
    "text": "so the scheduler has picked a node to",
    "start": "594160",
    "end": "596880"
  },
  {
    "text": "run the pod on",
    "start": "596880",
    "end": "598080"
  },
  {
    "text": "that's passed on to the node and the",
    "start": "598080",
    "end": "601279"
  },
  {
    "text": "node",
    "start": "601279",
    "end": "601680"
  },
  {
    "text": "sees that there is a limit on the pod",
    "start": "601680",
    "end": "604640"
  },
  {
    "text": "and",
    "start": "604640",
    "end": "605200"
  },
  {
    "text": "the cubelet the control plane component",
    "start": "605200",
    "end": "607839"
  },
  {
    "text": "of kubernetes that's running on the node",
    "start": "607839",
    "end": "609600"
  },
  {
    "text": "actually needs help from another system",
    "start": "609600",
    "end": "612240"
  },
  {
    "text": "component",
    "start": "612240",
    "end": "613120"
  },
  {
    "text": "in order to do this so the cubelet",
    "start": "613120",
    "end": "616480"
  },
  {
    "start": "615000",
    "end": "615000"
  },
  {
    "text": "talks to the container runtime that's",
    "start": "616480",
    "end": "618880"
  },
  {
    "text": "actually going to run your containers",
    "start": "618880",
    "end": "621040"
  },
  {
    "text": "for your pod and",
    "start": "621040",
    "end": "624640"
  },
  {
    "text": "it says i have a pod coming in that",
    "start": "624640",
    "end": "626800"
  },
  {
    "text": "needs its resources limited",
    "start": "626800",
    "end": "629200"
  },
  {
    "text": "our container runtime has the tools to",
    "start": "629200",
    "end": "631200"
  },
  {
    "text": "actually limit",
    "start": "631200",
    "end": "632480"
  },
  {
    "text": "uh the resources available to that",
    "start": "632480",
    "end": "634480"
  },
  {
    "text": "container so it says okay",
    "start": "634480",
    "end": "636720"
  },
  {
    "text": "i can use c groups to make that happen",
    "start": "636720",
    "end": "639760"
  },
  {
    "text": "we'll dive into that a little bit more",
    "start": "639760",
    "end": "641279"
  },
  {
    "text": "deeply here in a second",
    "start": "641279",
    "end": "643440"
  },
  {
    "text": "so at a high level i want you to",
    "start": "643440",
    "end": "645040"
  },
  {
    "text": "remember that requests are for planning",
    "start": "645040",
    "end": "647360"
  },
  {
    "text": "and limits are for enforcing",
    "start": "647360",
    "end": "650399"
  },
  {
    "text": "so now let's dive a little bit deeper",
    "start": "650399",
    "end": "652480"
  },
  {
    "start": "651000",
    "end": "651000"
  },
  {
    "text": "into",
    "start": "652480",
    "end": "653519"
  },
  {
    "text": "limits and c groups i was just talking",
    "start": "653519",
    "end": "655519"
  },
  {
    "text": "about",
    "start": "655519",
    "end": "657760"
  },
  {
    "text": "so let's summarize uh what resource",
    "start": "658800",
    "end": "661440"
  },
  {
    "text": "limits does",
    "start": "661440",
    "end": "663200"
  },
  {
    "text": "so resource limit is used to limit",
    "start": "663200",
    "end": "665279"
  },
  {
    "text": "resources on a pod",
    "start": "665279",
    "end": "666959"
  },
  {
    "text": "so if a pot tries to use more resources",
    "start": "666959",
    "end": "670320"
  },
  {
    "text": "than the value",
    "start": "670320",
    "end": "671600"
  },
  {
    "text": "you will encounter some issues if a",
    "start": "671600",
    "end": "674640"
  },
  {
    "text": "container",
    "start": "674640",
    "end": "676000"
  },
  {
    "text": "process tries to use over the limit of",
    "start": "676000",
    "end": "678480"
  },
  {
    "text": "the assigned cpu",
    "start": "678480",
    "end": "680399"
  },
  {
    "text": "you will have the cpu throttling problem",
    "start": "680399",
    "end": "683279"
  },
  {
    "text": "this will not immediately delete the pod",
    "start": "683279",
    "end": "685839"
  },
  {
    "text": "however the process gets stuck and the",
    "start": "685839",
    "end": "688240"
  },
  {
    "text": "program has to wait until the cpu",
    "start": "688240",
    "end": "690160"
  },
  {
    "text": "resource is ready",
    "start": "690160",
    "end": "692240"
  },
  {
    "text": "if a container tries to use more memory",
    "start": "692240",
    "end": "694720"
  },
  {
    "text": "than the limit",
    "start": "694720",
    "end": "695920"
  },
  {
    "text": "it simply gets out of memory error and",
    "start": "695920",
    "end": "699040"
  },
  {
    "text": "the container will be killed by",
    "start": "699040",
    "end": "700640"
  },
  {
    "text": "the ohm killer kubernetes and the",
    "start": "700640",
    "end": "703920"
  },
  {
    "text": "container technologies",
    "start": "703920",
    "end": "705360"
  },
  {
    "text": "used the linux kernel feature called c",
    "start": "705360",
    "end": "707440"
  },
  {
    "text": "groups to implement the container",
    "start": "707440",
    "end": "709440"
  },
  {
    "text": "resource limitation",
    "start": "709440",
    "end": "711120"
  },
  {
    "text": "we will explain more about this later",
    "start": "711120",
    "end": "715279"
  },
  {
    "start": "715000",
    "end": "715000"
  },
  {
    "text": "let's see how resource limit value is",
    "start": "715600",
    "end": "717279"
  },
  {
    "text": "being used in kubernetes",
    "start": "717279",
    "end": "719279"
  },
  {
    "text": "once pod spec is registered to",
    "start": "719279",
    "end": "720959"
  },
  {
    "text": "kubernetes cube scheduler",
    "start": "720959",
    "end": "723040"
  },
  {
    "text": "fetches the new pod specs then assign a",
    "start": "723040",
    "end": "726399"
  },
  {
    "text": "node to the pod",
    "start": "726399",
    "end": "728000"
  },
  {
    "text": "you want to create keep scheduler",
    "start": "728000",
    "end": "731120"
  },
  {
    "text": "as the node information in std",
    "start": "731120",
    "end": "735279"
  },
  {
    "text": "but the limit value is not directly used",
    "start": "735440",
    "end": "738720"
  },
  {
    "text": "at this moment yet cubelet",
    "start": "738720",
    "end": "741920"
  },
  {
    "text": "on each node runs the sync process to",
    "start": "741920",
    "end": "744560"
  },
  {
    "text": "fetch the latest information of the pod",
    "start": "744560",
    "end": "747440"
  },
  {
    "text": "that are assigned cubelet sees the limit",
    "start": "747440",
    "end": "751440"
  },
  {
    "text": "value from podspec",
    "start": "751440",
    "end": "753440"
  },
  {
    "text": "then converts the cpu cores value into",
    "start": "753440",
    "end": "756720"
  },
  {
    "text": "cfs period",
    "start": "756720",
    "end": "758079"
  },
  {
    "text": "and quarter milliseconds then cablet",
    "start": "758079",
    "end": "761600"
  },
  {
    "text": "calls container runtime interface to",
    "start": "761600",
    "end": "763360"
  },
  {
    "text": "create actual containers on the linux",
    "start": "763360",
    "end": "765519"
  },
  {
    "text": "host",
    "start": "765519",
    "end": "766639"
  },
  {
    "text": "once container runtime gets the entry",
    "start": "766639",
    "end": "768959"
  },
  {
    "text": "from cubelet",
    "start": "768959",
    "end": "770320"
  },
  {
    "text": "it executes the container creation by",
    "start": "770320",
    "end": "773200"
  },
  {
    "text": "calling c",
    "start": "773200",
    "end": "773839"
  },
  {
    "text": "groups",
    "start": "773839",
    "end": "776160"
  },
  {
    "text": "now let's deep dive into the three parts",
    "start": "777279",
    "end": "780160"
  },
  {
    "text": "here",
    "start": "780160",
    "end": "781600"
  },
  {
    "text": "cfs period and quota container runtimes",
    "start": "781600",
    "end": "785279"
  },
  {
    "text": "and cgroups",
    "start": "785279",
    "end": "788079"
  },
  {
    "start": "788000",
    "end": "788000"
  },
  {
    "text": "when we talk about containers it is",
    "start": "789040",
    "end": "791519"
  },
  {
    "text": "actually implemented with",
    "start": "791519",
    "end": "793200"
  },
  {
    "text": "linux kernel feature that is called c",
    "start": "793200",
    "end": "796079"
  },
  {
    "text": "groups",
    "start": "796079",
    "end": "796639"
  },
  {
    "text": "and namespaces namespace",
    "start": "796639",
    "end": "799920"
  },
  {
    "text": "is used to isolated processed on linux",
    "start": "799920",
    "end": "802720"
  },
  {
    "text": "host",
    "start": "802720",
    "end": "803760"
  },
  {
    "text": "and cgrips is used to limit resources",
    "start": "803760",
    "end": "808399"
  },
  {
    "text": "this time we talk about resource",
    "start": "808399",
    "end": "809920"
  },
  {
    "text": "management on communities",
    "start": "809920",
    "end": "811600"
  },
  {
    "text": "so we are not going to talk about",
    "start": "811600",
    "end": "813440"
  },
  {
    "text": "namespaces",
    "start": "813440",
    "end": "816160"
  },
  {
    "text": "so just like this cute diagram dogs as",
    "start": "816720",
    "end": "819920"
  },
  {
    "text": "in your pods will try to",
    "start": "819920",
    "end": "821760"
  },
  {
    "text": "fight over resources like toys and food",
    "start": "821760",
    "end": "824800"
  },
  {
    "text": "so we can solve that by allocating",
    "start": "824800",
    "end": "827120"
  },
  {
    "text": "thousand food to each dog",
    "start": "827120",
    "end": "830000"
  },
  {
    "text": "let's see how kubernetes does in the",
    "start": "830000",
    "end": "832160"
  },
  {
    "text": "technical aspect",
    "start": "832160",
    "end": "835120"
  },
  {
    "text": "c groups is a linux kernel feature and",
    "start": "835680",
    "end": "838720"
  },
  {
    "text": "you can limit resources such as cpu",
    "start": "838720",
    "end": "841120"
  },
  {
    "text": "memory network bandwidth or you can even",
    "start": "841120",
    "end": "844560"
  },
  {
    "text": "combine those",
    "start": "844560",
    "end": "846720"
  },
  {
    "text": "cpu request value that you set in",
    "start": "846720",
    "end": "848959"
  },
  {
    "text": "kubernetes",
    "start": "848959",
    "end": "850000"
  },
  {
    "text": "will be converted to cpu shares in c",
    "start": "850000",
    "end": "852720"
  },
  {
    "text": "groups world",
    "start": "852720",
    "end": "854320"
  },
  {
    "text": "cpu limit will be converted from cpu",
    "start": "854320",
    "end": "857519"
  },
  {
    "text": "core numbers",
    "start": "857519",
    "end": "858399"
  },
  {
    "text": "to cpu time value of cfs then",
    "start": "858399",
    "end": "861760"
  },
  {
    "text": "stored in c groups as cfs period and",
    "start": "861760",
    "end": "864079"
  },
  {
    "text": "quota",
    "start": "864079",
    "end": "865760"
  },
  {
    "text": "you can also see those c groups value",
    "start": "865760",
    "end": "868079"
  },
  {
    "text": "for your running pods on each node",
    "start": "868079",
    "end": "870160"
  },
  {
    "text": "by seeing files under slash sys",
    "start": "870160",
    "end": "873600"
  },
  {
    "text": "fs slash c groups directory",
    "start": "873600",
    "end": "878079"
  },
  {
    "text": "memory limit is also stored in c groups",
    "start": "878399",
    "end": "882240"
  },
  {
    "text": "one difference between cpu and memory",
    "start": "882240",
    "end": "884480"
  },
  {
    "text": "here is that",
    "start": "884480",
    "end": "885680"
  },
  {
    "text": "only cpu has the request value that is",
    "start": "885680",
    "end": "888399"
  },
  {
    "text": "stored",
    "start": "888399",
    "end": "889279"
  },
  {
    "text": "in c groups so that also means that",
    "start": "889279",
    "end": "893279"
  },
  {
    "text": "um memory it does not have",
    "start": "893279",
    "end": "896320"
  },
  {
    "text": "request value in the c groups",
    "start": "896320",
    "end": "899440"
  },
  {
    "text": "i was really confused when i noticed",
    "start": "899440",
    "end": "901600"
  },
  {
    "text": "this for the first time",
    "start": "901600",
    "end": "904240"
  },
  {
    "text": "and here is the reason cpu share",
    "start": "904240",
    "end": "907680"
  },
  {
    "text": "is a relative value if there's",
    "start": "907680",
    "end": "910959"
  },
  {
    "text": "four existing containers with one and a",
    "start": "910959",
    "end": "913519"
  },
  {
    "text": "half",
    "start": "913519",
    "end": "914880"
  },
  {
    "text": "half one and one cpu limit on each",
    "start": "914880",
    "end": "919360"
  },
  {
    "text": "they will share the whole allocatable",
    "start": "919360",
    "end": "921600"
  },
  {
    "text": "cpu",
    "start": "921600",
    "end": "922480"
  },
  {
    "text": "on the node one cpu has enough space",
    "start": "922480",
    "end": "926160"
  },
  {
    "text": "and there's no cpu limit cpu resource",
    "start": "926160",
    "end": "929279"
  },
  {
    "text": "can be over committed but",
    "start": "929279",
    "end": "932480"
  },
  {
    "text": "when cpu is busy the cpi request value",
    "start": "932480",
    "end": "935120"
  },
  {
    "text": "will be used to keep the the application",
    "start": "935120",
    "end": "937279"
  },
  {
    "text": "have enough cpu results for themselves",
    "start": "937279",
    "end": "940639"
  },
  {
    "text": "if another application with tcp request",
    "start": "940639",
    "end": "943360"
  },
  {
    "text": "is assigned to",
    "start": "943360",
    "end": "944320"
  },
  {
    "text": "this node kubernetes recalculate this",
    "start": "944320",
    "end": "947279"
  },
  {
    "text": "percentage",
    "start": "947279",
    "end": "948320"
  },
  {
    "text": "and reassign all the allocated resources",
    "start": "948320",
    "end": "950720"
  },
  {
    "text": "for when it's busy",
    "start": "950720",
    "end": "953600"
  },
  {
    "text": "now let's learn about cfs",
    "start": "953600",
    "end": "956880"
  },
  {
    "start": "954000",
    "end": "954000"
  },
  {
    "text": "cfs is a process scheduler in linux",
    "start": "956880",
    "end": "959920"
  },
  {
    "text": "it's the default linux process scheduler",
    "start": "959920",
    "end": "963199"
  },
  {
    "text": "container isolation is based on c groups",
    "start": "963199",
    "end": "966240"
  },
  {
    "text": "but secrets actually uses cfs to",
    "start": "966240",
    "end": "968880"
  },
  {
    "text": "implement cpu resource limitation",
    "start": "968880",
    "end": "972320"
  },
  {
    "text": "cfs has each cycle to process data and",
    "start": "972320",
    "end": "975279"
  },
  {
    "text": "its default cycle period is every 100",
    "start": "975279",
    "end": "977680"
  },
  {
    "text": "milliseconds",
    "start": "977680",
    "end": "979360"
  },
  {
    "text": "that also means an application can be",
    "start": "979360",
    "end": "981920"
  },
  {
    "text": "assigned",
    "start": "981920",
    "end": "982720"
  },
  {
    "text": "to one cpu core every 100 millisecond",
    "start": "982720",
    "end": "985759"
  },
  {
    "text": "and cfs handles it",
    "start": "985759",
    "end": "989279"
  },
  {
    "text": "if you set 500 m which means",
    "start": "989839",
    "end": "993920"
  },
  {
    "text": "a half court on kubernetes for cpu",
    "start": "993920",
    "end": "997279"
  },
  {
    "text": "limits",
    "start": "997279",
    "end": "997839"
  },
  {
    "text": "on your pod spec cfs quota becomes",
    "start": "997839",
    "end": "1001839"
  },
  {
    "text": "50 milliseconds which means it can use",
    "start": "1001839",
    "end": "1004720"
  },
  {
    "text": "50 milliseconds",
    "start": "1004720",
    "end": "1005920"
  },
  {
    "text": "out of 100 milliseconds of cpu time",
    "start": "1005920",
    "end": "1008639"
  },
  {
    "text": "every period",
    "start": "1008639",
    "end": "1010480"
  },
  {
    "text": "if you set 2000 m which is 2 core",
    "start": "1010480",
    "end": "1014480"
  },
  {
    "text": "a cfs quota becomes 200 milliseconds",
    "start": "1014480",
    "end": "1017680"
  },
  {
    "text": "which means you can use two cycles for",
    "start": "1017680",
    "end": "1020240"
  },
  {
    "text": "the process",
    "start": "1020240",
    "end": "1022800"
  },
  {
    "text": "so what if you don't set any cpu limit",
    "start": "1023440",
    "end": "1026558"
  },
  {
    "text": "in that case cfs quota becomes -1",
    "start": "1026559",
    "end": "1030000"
  },
  {
    "text": "which means unlimited",
    "start": "1030000",
    "end": "1033120"
  },
  {
    "start": "1033000",
    "end": "1033000"
  },
  {
    "text": "and at last let's look at container",
    "start": "1033760",
    "end": "1036079"
  },
  {
    "text": "runtimes",
    "start": "1036079",
    "end": "1037520"
  },
  {
    "text": "kubernetes has two types of container",
    "start": "1037520",
    "end": "1039918"
  },
  {
    "text": "antennas and they are called cri",
    "start": "1039919",
    "end": "1042400"
  },
  {
    "text": "analcia runtimes you may remember the",
    "start": "1042400",
    "end": "1045760"
  },
  {
    "text": "docker deprecation use",
    "start": "1045760",
    "end": "1047678"
  },
  {
    "text": "it was about sierra runtimes but not",
    "start": "1047679",
    "end": "1050559"
  },
  {
    "text": "ocean",
    "start": "1050559",
    "end": "1051200"
  },
  {
    "text": "times when kubernetes tries to create a",
    "start": "1051200",
    "end": "1054799"
  },
  {
    "text": "container",
    "start": "1054799",
    "end": "1056160"
  },
  {
    "text": "cubelet executes create container grpc",
    "start": "1056160",
    "end": "1058799"
  },
  {
    "text": "call",
    "start": "1058799",
    "end": "1059200"
  },
  {
    "text": "towards cr runtime when sierra runtime",
    "start": "1059200",
    "end": "1062880"
  },
  {
    "text": "gets",
    "start": "1062880",
    "end": "1063280"
  },
  {
    "text": "the create request it executes ocr",
    "start": "1063280",
    "end": "1066720"
  },
  {
    "text": "runtime binary",
    "start": "1066720",
    "end": "1068320"
  },
  {
    "text": "with the json file that includes all the",
    "start": "1068320",
    "end": "1070480"
  },
  {
    "text": "necessary information when creating a",
    "start": "1070480",
    "end": "1072240"
  },
  {
    "text": "container",
    "start": "1072240",
    "end": "1072960"
  },
  {
    "text": "such as c group limit parameters and so",
    "start": "1072960",
    "end": "1075200"
  },
  {
    "text": "on",
    "start": "1075200",
    "end": "1076720"
  },
  {
    "text": "then finally ocr runtime is qc groups",
    "start": "1076720",
    "end": "1079440"
  },
  {
    "text": "api inside",
    "start": "1079440",
    "end": "1080880"
  },
  {
    "text": "now you have a new container running",
    "start": "1080880",
    "end": "1085120"
  },
  {
    "text": "we are not going to any deeper about",
    "start": "1085440",
    "end": "1087520"
  },
  {
    "text": "runtimes here",
    "start": "1087520",
    "end": "1088960"
  },
  {
    "text": "but you can think of sierra runtime as a",
    "start": "1088960",
    "end": "1091679"
  },
  {
    "text": "runtime that runs",
    "start": "1091679",
    "end": "1092799"
  },
  {
    "text": "at a kubernetes level and also runtime",
    "start": "1092799",
    "end": "1096799"
  },
  {
    "text": "as a runtime that runs at linux kernel",
    "start": "1096799",
    "end": "1099840"
  },
  {
    "text": "level",
    "start": "1099840",
    "end": "1101200"
  },
  {
    "text": "if you are curious about container",
    "start": "1101200",
    "end": "1103039"
  },
  {
    "text": "runtimes under the hood",
    "start": "1103039",
    "end": "1104799"
  },
  {
    "text": "i highly recommend checking out the",
    "start": "1104799",
    "end": "1107039"
  },
  {
    "text": "maintainer trucks",
    "start": "1107039",
    "end": "1108000"
  },
  {
    "text": "about cryo and container d which are",
    "start": "1108000",
    "end": "1110960"
  },
  {
    "text": "also cncf projects",
    "start": "1110960",
    "end": "1114240"
  },
  {
    "text": "so to close this out i want to leave you",
    "start": "1116000",
    "end": "1118799"
  },
  {
    "text": "with",
    "start": "1118799",
    "end": "1119440"
  },
  {
    "text": "a tool to answer a question that you",
    "start": "1119440",
    "end": "1121200"
  },
  {
    "text": "might have been asking yourself which is",
    "start": "1121200",
    "end": "1123520"
  },
  {
    "text": "so now i know what requests and limits",
    "start": "1123520",
    "end": "1125280"
  },
  {
    "text": "are and i know why they're important and",
    "start": "1125280",
    "end": "1127120"
  },
  {
    "text": "how they work but how do",
    "start": "1127120",
    "end": "1128799"
  },
  {
    "text": "i set the right requests and limits for",
    "start": "1128799",
    "end": "1131280"
  },
  {
    "text": "my applications",
    "start": "1131280",
    "end": "1134080"
  },
  {
    "start": "1134000",
    "end": "1134000"
  },
  {
    "text": "for this i want to introduce you to pod",
    "start": "1134080",
    "end": "1136160"
  },
  {
    "text": "auto scaling",
    "start": "1136160",
    "end": "1137600"
  },
  {
    "text": "so kubernetes has two types of auto",
    "start": "1137600",
    "end": "1140559"
  },
  {
    "text": "scalers available",
    "start": "1140559",
    "end": "1141679"
  },
  {
    "text": "the first is horizontal plot auto",
    "start": "1141679",
    "end": "1143280"
  },
  {
    "text": "scaling which means",
    "start": "1143280",
    "end": "1144880"
  },
  {
    "text": "creating more or fewer replicas of your",
    "start": "1144880",
    "end": "1148160"
  },
  {
    "text": "pods",
    "start": "1148160",
    "end": "1148799"
  },
  {
    "text": "to handle traffic so if you have a big",
    "start": "1148799",
    "end": "1150960"
  },
  {
    "text": "spike in traffic",
    "start": "1150960",
    "end": "1151919"
  },
  {
    "text": "kubernetes can use a horizontal pod auto",
    "start": "1151919",
    "end": "1154240"
  },
  {
    "text": "scaler to spin",
    "start": "1154240",
    "end": "1155280"
  },
  {
    "text": "up more uh replicas of your pod to",
    "start": "1155280",
    "end": "1158400"
  },
  {
    "text": "handle that traffic",
    "start": "1158400",
    "end": "1159760"
  },
  {
    "text": "if you're kind of in a lull of traffic",
    "start": "1159760",
    "end": "1162000"
  },
  {
    "text": "and you don't need so many pods it can",
    "start": "1162000",
    "end": "1164160"
  },
  {
    "text": "also scale down so that you don't have",
    "start": "1164160",
    "end": "1165760"
  },
  {
    "text": "as many pods running",
    "start": "1165760",
    "end": "1167600"
  },
  {
    "text": "uh and then there's also this vertical",
    "start": "1167600",
    "end": "1169840"
  },
  {
    "text": "pod autoscaler which is about",
    "start": "1169840",
    "end": "1171600"
  },
  {
    "text": "changing the size of your pods when i",
    "start": "1171600",
    "end": "1174640"
  },
  {
    "text": "first saw this i was a little bit",
    "start": "1174640",
    "end": "1175840"
  },
  {
    "text": "confused because",
    "start": "1175840",
    "end": "1177039"
  },
  {
    "text": "what does it really mean to change the",
    "start": "1177039",
    "end": "1178799"
  },
  {
    "text": "size of a pod",
    "start": "1178799",
    "end": "1182080"
  },
  {
    "start": "1182000",
    "end": "1182000"
  },
  {
    "text": "and in kubernetes what that means is",
    "start": "1182080",
    "end": "1184960"
  },
  {
    "text": "giving you recommendations for how to",
    "start": "1184960",
    "end": "1186559"
  },
  {
    "text": "set your requests and limits",
    "start": "1186559",
    "end": "1188000"
  },
  {
    "text": "for that pod so there are three modes",
    "start": "1188000",
    "end": "1190799"
  },
  {
    "text": "for a vertical pad auto scaler",
    "start": "1190799",
    "end": "1193200"
  },
  {
    "text": "in kubernetes and those modes are off",
    "start": "1193200",
    "end": "1195679"
  },
  {
    "text": "initial and auto",
    "start": "1195679",
    "end": "1197200"
  },
  {
    "text": "in off mode the vertical pod auto scaler",
    "start": "1197200",
    "end": "1199520"
  },
  {
    "text": "will monitor what's happening with your",
    "start": "1199520",
    "end": "1201039"
  },
  {
    "text": "pod and how many resources it's using",
    "start": "1201039",
    "end": "1203919"
  },
  {
    "text": "and it'll make recommendations for how",
    "start": "1203919",
    "end": "1206080"
  },
  {
    "text": "you should set",
    "start": "1206080",
    "end": "1207440"
  },
  {
    "text": "your requests and limits for cpu in",
    "start": "1207440",
    "end": "1209520"
  },
  {
    "text": "memory",
    "start": "1209520",
    "end": "1210880"
  },
  {
    "text": "but it won't implement those for you you",
    "start": "1210880",
    "end": "1212960"
  },
  {
    "text": "would have to go in",
    "start": "1212960",
    "end": "1213919"
  },
  {
    "text": "and check what those recommendations are",
    "start": "1213919",
    "end": "1215760"
  },
  {
    "text": "and then implement them yourself",
    "start": "1215760",
    "end": "1218480"
  },
  {
    "text": "initial mode means that the vertical pod",
    "start": "1218480",
    "end": "1220559"
  },
  {
    "text": "autoscaler will",
    "start": "1220559",
    "end": "1222000"
  },
  {
    "text": "kind of watch what's going on with your",
    "start": "1222000",
    "end": "1223360"
  },
  {
    "text": "pods for a while and get",
    "start": "1223360",
    "end": "1225440"
  },
  {
    "text": "uh some some recommendations on what you",
    "start": "1225440",
    "end": "1227360"
  },
  {
    "text": "should set those requests and limits to",
    "start": "1227360",
    "end": "1229360"
  },
  {
    "text": "and then it'll implement those for you",
    "start": "1229360",
    "end": "1231360"
  },
  {
    "text": "once on those pods",
    "start": "1231360",
    "end": "1233600"
  },
  {
    "text": "but then any time after that if you ever",
    "start": "1233600",
    "end": "1236000"
  },
  {
    "text": "want to change",
    "start": "1236000",
    "end": "1237360"
  },
  {
    "text": "the requests and limits of your pod if",
    "start": "1237360",
    "end": "1239360"
  },
  {
    "text": "it needs to change size",
    "start": "1239360",
    "end": "1240799"
  },
  {
    "text": "then you'll have to go in and check what",
    "start": "1240799",
    "end": "1242080"
  },
  {
    "text": "the vertical pod autoscaler is",
    "start": "1242080",
    "end": "1243280"
  },
  {
    "text": "recommending and then",
    "start": "1243280",
    "end": "1244480"
  },
  {
    "text": "implement those manually then auto mode",
    "start": "1244480",
    "end": "1248720"
  },
  {
    "text": "the vertical pod auto scaler will",
    "start": "1248720",
    "end": "1250480"
  },
  {
    "text": "continuously monitor your pods and try",
    "start": "1250480",
    "end": "1252799"
  },
  {
    "text": "to understand what they're doing",
    "start": "1252799",
    "end": "1254320"
  },
  {
    "text": "make its recommendations and then",
    "start": "1254320",
    "end": "1256000"
  },
  {
    "text": "implement those recommendations for you",
    "start": "1256000",
    "end": "1257679"
  },
  {
    "text": "which means that it will be continuously",
    "start": "1257679",
    "end": "1260000"
  },
  {
    "text": "creating and deleting your pods when it",
    "start": "1260000",
    "end": "1262480"
  },
  {
    "text": "makes a new recommendation it will spin",
    "start": "1262480",
    "end": "1264400"
  },
  {
    "text": "down the existing pods",
    "start": "1264400",
    "end": "1266159"
  },
  {
    "text": "and spin up new pods of the new size so",
    "start": "1266159",
    "end": "1269280"
  },
  {
    "text": "that can be a bit disruptive and you",
    "start": "1269280",
    "end": "1270640"
  },
  {
    "text": "have to make sure that you're managing",
    "start": "1270640",
    "end": "1271840"
  },
  {
    "text": "that",
    "start": "1271840",
    "end": "1272400"
  },
  {
    "text": "uh disruption pod disruption budgets and",
    "start": "1272400",
    "end": "1274480"
  },
  {
    "text": "the like",
    "start": "1274480",
    "end": "1275440"
  },
  {
    "text": "um but that is also an option for",
    "start": "1275440",
    "end": "1277840"
  },
  {
    "text": "vertical pod auto scalers",
    "start": "1277840",
    "end": "1279840"
  },
  {
    "text": "so the way vertical pot auto scaler",
    "start": "1279840",
    "end": "1281360"
  },
  {
    "text": "recommendations work",
    "start": "1281360",
    "end": "1282880"
  },
  {
    "text": "is they have a few different uh types of",
    "start": "1282880",
    "end": "1285840"
  },
  {
    "text": "recommendations they give",
    "start": "1285840",
    "end": "1287200"
  },
  {
    "text": "target lower bound upper bound and",
    "start": "1287200",
    "end": "1289280"
  },
  {
    "text": "uncapped target",
    "start": "1289280",
    "end": "1291919"
  },
  {
    "text": "so the target is the value that the",
    "start": "1291919",
    "end": "1294159"
  },
  {
    "text": "vertical pot auto scaler will use",
    "start": "1294159",
    "end": "1296000"
  },
  {
    "text": "when resizing the pod the lower bound",
    "start": "1296000",
    "end": "1299679"
  },
  {
    "text": "is the lower bound number that vertical",
    "start": "1299679",
    "end": "1301440"
  },
  {
    "text": "part auto scaler looks at for triggering",
    "start": "1301440",
    "end": "1303440"
  },
  {
    "text": "a resize",
    "start": "1303440",
    "end": "1304559"
  },
  {
    "text": "if your pod utilization goes below that",
    "start": "1304559",
    "end": "1306640"
  },
  {
    "text": "then vertical pod autoscaler will delete",
    "start": "1306640",
    "end": "1308559"
  },
  {
    "text": "the pod and scale it down",
    "start": "1308559",
    "end": "1311679"
  },
  {
    "text": "your upper bound is the",
    "start": "1311679",
    "end": "1315679"
  },
  {
    "text": "number that vertical pod autoscaler",
    "start": "1315679",
    "end": "1317280"
  },
  {
    "text": "looks at for triggering a resize",
    "start": "1317280",
    "end": "1319200"
  },
  {
    "text": "in the upward direction if your pod",
    "start": "1319200",
    "end": "1321039"
  },
  {
    "text": "utilization goes above that then",
    "start": "1321039",
    "end": "1322720"
  },
  {
    "text": "vpa will delete the pod and scale it up",
    "start": "1322720",
    "end": "1324640"
  },
  {
    "text": "if you're in auto mode of course",
    "start": "1324640",
    "end": "1326240"
  },
  {
    "text": "this is saying and then uncapped target",
    "start": "1326240",
    "end": "1329120"
  },
  {
    "text": "if no minimum or maximum capacity is",
    "start": "1329120",
    "end": "1331280"
  },
  {
    "text": "assigned to the vertical pod autoscaler",
    "start": "1331280",
    "end": "1333840"
  },
  {
    "text": "then the uncapped target will be the",
    "start": "1333840",
    "end": "1335760"
  },
  {
    "text": "target utilization for the",
    "start": "1335760",
    "end": "1337360"
  },
  {
    "text": "vertical pod auto scaler so let's review",
    "start": "1337360",
    "end": "1341760"
  },
  {
    "start": "1341000",
    "end": "1341000"
  },
  {
    "text": "congratulations you've just been through",
    "start": "1341760",
    "end": "1344880"
  },
  {
    "text": "the container request and limit bootcamp",
    "start": "1344880",
    "end": "1348000"
  },
  {
    "text": "on kubernetes",
    "start": "1348000",
    "end": "1350000"
  },
  {
    "text": "so let's see what we learned today",
    "start": "1350000",
    "end": "1353600"
  },
  {
    "text": "so pod spec is registered once you",
    "start": "1353600",
    "end": "1357200"
  },
  {
    "text": "apply your pot manifest into kubernetes",
    "start": "1357200",
    "end": "1361200"
  },
  {
    "text": "through cube api server then",
    "start": "1361200",
    "end": "1364400"
  },
  {
    "text": "give scheduler fetches newly registered",
    "start": "1364400",
    "end": "1367200"
  },
  {
    "text": "pods from",
    "start": "1367200",
    "end": "1367919"
  },
  {
    "text": "scd and assign a node to each spot",
    "start": "1367919",
    "end": "1371200"
  },
  {
    "text": "referring to",
    "start": "1371200",
    "end": "1372080"
  },
  {
    "text": "resource requests and cubelet",
    "start": "1372080",
    "end": "1375280"
  },
  {
    "text": "fetches assigned pod in every sync",
    "start": "1375280",
    "end": "1378320"
  },
  {
    "text": "period and calculate this between",
    "start": "1378320",
    "end": "1380240"
  },
  {
    "text": "running containers and pod spec then",
    "start": "1380240",
    "end": "1383760"
  },
  {
    "text": "cubelet calls create container",
    "start": "1383760",
    "end": "1387840"
  },
  {
    "text": "towards cr runtime after converting cpu",
    "start": "1387840",
    "end": "1391520"
  },
  {
    "text": "cores into periods",
    "start": "1391520",
    "end": "1394559"
  },
  {
    "text": "then cr runtime executes ocr runtime",
    "start": "1394559",
    "end": "1397360"
  },
  {
    "text": "binary to create a container",
    "start": "1397360",
    "end": "1399440"
  },
  {
    "text": "with oc i spec json",
    "start": "1399440",
    "end": "1402799"
  },
  {
    "text": "oci runtime manages c groups file system",
    "start": "1402799",
    "end": "1406400"
  },
  {
    "text": "so it can create and delete azure",
    "start": "1406400",
    "end": "1408640"
  },
  {
    "text": "containers",
    "start": "1408640",
    "end": "1410880"
  },
  {
    "text": "then finally uh we also learned about",
    "start": "1410880",
    "end": "1414480"
  },
  {
    "text": "pod auto scaling and especially",
    "start": "1414480",
    "end": "1418000"
  },
  {
    "text": "vertical part of auto scaler is not",
    "start": "1418000",
    "end": "1420240"
  },
  {
    "text": "simply",
    "start": "1420240",
    "end": "1421120"
  },
  {
    "text": "a resource that you can auto scale your",
    "start": "1421120",
    "end": "1423600"
  },
  {
    "text": "applications",
    "start": "1423600",
    "end": "1424799"
  },
  {
    "text": "but also provide recommendations for",
    "start": "1424799",
    "end": "1427840"
  },
  {
    "text": "your",
    "start": "1427840",
    "end": "1428320"
  },
  {
    "text": "applications resource requests and",
    "start": "1428320",
    "end": "1431120"
  },
  {
    "text": "limits",
    "start": "1431120",
    "end": "1433520"
  },
  {
    "text": "so thanks for joining us today to learn",
    "start": "1433840",
    "end": "1435600"
  },
  {
    "text": "about pod requests and limits i hope you",
    "start": "1435600",
    "end": "1437760"
  },
  {
    "text": "learned a lot of fun new stuff",
    "start": "1437760",
    "end": "1439520"
  },
  {
    "text": "if you have any questions for us please",
    "start": "1439520",
    "end": "1441679"
  },
  {
    "text": "post them in the q a",
    "start": "1441679",
    "end": "1443360"
  },
  {
    "text": "hopefully you've been doing that this",
    "start": "1443360",
    "end": "1444559"
  },
  {
    "text": "whole time and if you have any questions",
    "start": "1444559",
    "end": "1446480"
  },
  {
    "text": "after this",
    "start": "1446480",
    "end": "1447120"
  },
  {
    "text": "do feel free to reach out to me on",
    "start": "1447120",
    "end": "1449200"
  },
  {
    "text": "twitter at caslin fields",
    "start": "1449200",
    "end": "1450720"
  },
  {
    "text": "and inductor again thank you for joining",
    "start": "1450720",
    "end": "1454400"
  },
  {
    "text": "us today",
    "start": "1454400",
    "end": "1456080"
  },
  {
    "text": "thank you so much have a great day",
    "start": "1456080",
    "end": "1460559"
  }
]