[
  {
    "text": "welcome to our talk uh about life or death i think we have to go away from",
    "start": "320",
    "end": "5759"
  },
  {
    "text": "the speakers uh life or death of a Kubernetes request API request i'm",
    "start": "5759",
    "end": "10800"
  },
  {
    "text": "Stefan Shimanssky working on API server since ages 10 years or something um have",
    "start": "10800",
    "end": "17039"
  },
  {
    "text": "touched a lot of the things we will show here and I have with me Abu I'm a",
    "start": "17039",
    "end": "22080"
  },
  {
    "text": "software engineer at Red Hat and a similar history about API servers so um",
    "start": "22080",
    "end": "28960"
  },
  {
    "text": "what we want to do today we want to talk about API requests obviously but imagine",
    "start": "28960",
    "end": "34000"
  },
  {
    "text": "you're sitting in this interview right you want to apply for a job or you're applying and there's this interviewer next to you and a very um common",
    "start": "34000",
    "end": "41920"
  },
  {
    "text": "question is um and you will maybe experience something in a similar context API server is of course a topic",
    "start": "41920",
    "end": "49039"
  },
  {
    "text": "but um you get asked so you do that right you you type qle create minus v9",
    "start": "49039",
    "end": "55680"
  },
  {
    "text": "and um pass some manifest and what happens right you press enter what happens that's the question and we are",
    "start": "55680",
    "end": "62239"
  },
  {
    "text": "all in that interview situation now so we want to talk about the interesting bits of the API server and Q cuttle what",
    "start": "62239",
    "end": "68799"
  },
  {
    "text": "happens if we do that and um not everything is new so there was a old",
    "start": "68799",
    "end": "74400"
  },
  {
    "text": "talk from Daniel Smith years ago many years ago I'm not sure maybe eight years ago or so with a similar title but of",
    "start": "74400",
    "end": "81840"
  },
  {
    "text": "course cube has changed um has become much more complex and I bet um 80% of",
    "start": "81840",
    "end": "87040"
  },
  {
    "text": "the audience um has joined the the project after that talk so will be lots of new stuff anyway this is a um the",
    "start": "87040",
    "end": "95040"
  },
  {
    "text": "start of the conversation here and um most of you will done have done minus",
    "start": "95040",
    "end": "100240"
  },
  {
    "text": "minus v something like 7 8 9 something this dimension and you get logging right so you see the the cube cutle does",
    "start": "100240",
    "end": "107360"
  },
  {
    "text": "something and um in particular it's doing this request right the request here and this looks super innocent um",
    "start": "107360",
    "end": "114079"
  },
  {
    "text": "you find the batch the word batch the word v1 and on the first view you you",
    "start": "114079",
    "end": "119680"
  },
  {
    "text": "see job right but there's the first detail which is super interesting this is jobs lowerase plural and this one is",
    "start": "119680",
    "end": "126719"
  },
  {
    "text": "an uppercase word singular and this is already not trivial in Kubernetes um how",
    "start": "126719",
    "end": "132239"
  },
  {
    "text": "this mapping actually happens and of course um when the request is done it's a post request to a URL and there's a",
    "start": "132239",
    "end": "138640"
  },
  {
    "text": "2021 uh returned and this means success so a batch is created but everything in",
    "start": "138640",
    "end": "144319"
  },
  {
    "text": "between we want to talk through now so um this mapping um you will have",
    "start": "144319",
    "end": "150959"
  },
  {
    "text": "heard about kinds and resources in kubernetes And um the kind is the one in the manifest resource is the one in the in",
    "start": "150959",
    "end": "157840"
  },
  {
    "text": "the API path here um they look different um but they don't have to be um similar",
    "start": "157840",
    "end": "164160"
  },
  {
    "text": "they can be completely different word uh words and for example this could be the job and this could be elephants or",
    "start": "164160",
    "end": "170080"
  },
  {
    "text": "something right there's no connection between them so connection is done by discovery there's discovery the API",
    "start": "170080",
    "end": "175599"
  },
  {
    "text": "server serves discovery and QC cuttle will query that which um returns all",
    "start": "175599",
    "end": "181040"
  },
  {
    "text": "resources with the kinds served under the resources and lots of other meta",
    "start": "181040",
    "end": "186360"
  },
  {
    "text": "information and in kubernetus we call that a rest mapping rest mapping is so",
    "start": "186360",
    "end": "191760"
  },
  {
    "text": "cube cut takes a manifest passes the yl um passes out the cube version kind so",
    "start": "191760",
    "end": "198319"
  },
  {
    "text": "batch v1 job singular and then rest mapping happens and it has group version",
    "start": "198319",
    "end": "203560"
  },
  {
    "text": "resource and this is basically just the the the words the terms here in the path and it can do its request but even here",
    "start": "203560",
    "end": "210799"
  },
  {
    "text": "something is happening and this is rest mapping and then the request is sent to",
    "start": "210799",
    "end": "216080"
  },
  {
    "text": "the API server so let's see what the API server does so our request is now making its way to the",
    "start": "216080",
    "end": "223360"
  },
  {
    "text": "go STP server that is basically listening to and serving all um incoming",
    "start": "223360",
    "end": "228480"
  },
  {
    "text": "SLP requests so this is rather a very simplistic view of of what the STP",
    "start": "228480",
    "end": "233680"
  },
  {
    "text": "server does when it accepts our request uh in step two of the figure you can see",
    "start": "233680",
    "end": "239519"
  },
  {
    "text": "that it creates a new HTTP request object uh that represents our request on",
    "start": "239519",
    "end": "245439"
  },
  {
    "text": "the server uh it has the request parameters the headers and also the body that we provided and then it creates a",
    "start": "245439",
    "end": "252799"
  },
  {
    "text": "new response writer object that can be used to construct an STP response it",
    "start": "252799",
    "end": "258560"
  },
  {
    "text": "then invokes the user provided handler uh with the request and the writer um so",
    "start": "258560",
    "end": "264720"
  },
  {
    "text": "a handler is a user provided function that is responsible for uh responding to the request and it uses the the writer",
    "start": "264720",
    "end": "272080"
  },
  {
    "text": "object to construct the HTTP response um a little segue into a go routine um so a",
    "start": "272080",
    "end": "278880"
  },
  {
    "text": "go routine is basically a um lightweight uh thread managed by the go runtime uh",
    "start": "278880",
    "end": "284960"
  },
  {
    "text": "this allows a go application to have concurrently executing functions um",
    "start": "284960",
    "end": "291000"
  },
  {
    "text": "so the question is like how does the HTTP server uh invoke the handler does it invoke it on a new go routine uh the",
    "start": "291000",
    "end": "298400"
  },
  {
    "text": "answer depends on if you look at the uh standard library implementation for HTTP version one it executes the handler in",
    "start": "298400",
    "end": "305520"
  },
  {
    "text": "the same go routine for HTTP version two uh the SCP server executes the handler",
    "start": "305520",
    "end": "311039"
  },
  {
    "text": "in a new go routine um so the API server does not have like a",
    "start": "311039",
    "end": "319520"
  },
  {
    "text": "single monolithic handler function that serves the entirety of the request",
    "start": "319520",
    "end": "324800"
  },
  {
    "text": "rather we have a chain of handler functions each of which is responsible for like serving uh certain aspect of",
    "start": "324800",
    "end": "333039"
  },
  {
    "text": "the request right and the AP server builds the handler chain when it starts",
    "start": "333039",
    "end": "340880"
  },
  {
    "text": "Um so this is a more comprehensive view of the handler chain we have we have omitted some handlers uh for simplicity",
    "start": "341080",
    "end": "348880"
  },
  {
    "text": "um so the request object has a context um and it has uh deadlines it has uh",
    "start": "348880",
    "end": "356479"
  },
  {
    "text": "cancellation signals and also request scoped values um so and a handler",
    "start": "356479",
    "end": "362960"
  },
  {
    "text": "function can attach value to the request context this enables like a future handler um to access that value in order",
    "start": "362960",
    "end": "371520"
  },
  {
    "text": "to serve the request u so when the first handler receives the",
    "start": "371520",
    "end": "378639"
  },
  {
    "text": "request uh the context is bare minimum it has no deadline it has a cancellation",
    "start": "378639",
    "end": "385199"
  },
  {
    "text": "signal uh prepared by the HTTP server u so that the server can uh abort the",
    "start": "385199",
    "end": "392000"
  },
  {
    "text": "request on any error um as the request passes through the handler chain uh the",
    "start": "392000",
    "end": "399120"
  },
  {
    "text": "context gets populated with information like deadline user information so",
    "start": "399120",
    "end": "404720"
  },
  {
    "text": "request information and audit events so the first stop at the panic",
    "start": "404720",
    "end": "412479"
  },
  {
    "text": "recovery handler um it is responsible for managing panics thrown by a request",
    "start": "412479",
    "end": "418479"
  },
  {
    "text": "handling code right um this figure basically sketches out the path that",
    "start": "418479",
    "end": "424479"
  },
  {
    "text": "let's try this um the path that that a panicking uh request takes so we start at the uh um",
    "start": "424479",
    "end": "432800"
  },
  {
    "text": "at the god server it invokes the the complete request handler um in a new go",
    "start": "432800",
    "end": "440039"
  },
  {
    "text": "routine and then at some point the panic handler panic recovery handler starts",
    "start": "440039",
    "end": "446400"
  },
  {
    "text": "executing and then it takes the rest of the handler uh chain and then it invokes it in the same go routine and on the",
    "start": "446400",
    "end": "453039"
  },
  {
    "text": "this is the rightmost timeline and we can see here the first panic this is basically request handling code",
    "start": "453039",
    "end": "459560"
  },
  {
    "text": "unexpectedly unexpectedly panicking and as The panicking go routine unwinds the",
    "start": "459560",
    "end": "466880"
  },
  {
    "text": "panic recovery handler stops the panic recovers the error it also captures the",
    "start": "466880",
    "end": "472800"
  },
  {
    "text": "stack trace so we basically pinpoint the exact location where the panic was where",
    "start": "472800",
    "end": "478319"
  },
  {
    "text": "where the panic originated from and then it logs the u error and the stack trace and then it also panics here and this is",
    "start": "478319",
    "end": "485520"
  },
  {
    "text": "by design so that it can let the HTTP server decide what to do with the panic",
    "start": "485520",
    "end": "490639"
  },
  {
    "text": "so the HTTP server u recovers from the panic it also logs and then it basically sends an error",
    "start": "490639",
    "end": "497440"
  },
  {
    "text": "reply um to the uh to the user so how does a request that panics on the server",
    "start": "497440",
    "end": "505039"
  },
  {
    "text": "what does the client observe and what also like how does the how does it manifest on the server side right so",
    "start": "505039",
    "end": "510720"
  },
  {
    "text": "what if the example request that we sent using couple um it panicked on the server um so if we used HTTP1 we would",
    "start": "510720",
    "end": "518959"
  },
  {
    "text": "see an error like end of file uh it's because the handler didn't have a chance",
    "start": "518959",
    "end": "525519"
  },
  {
    "text": "to write any bytes to the response yet um we see unexpected end of file when",
    "start": "525519",
    "end": "530640"
  },
  {
    "text": "the handler wrote some bytes to the writer and then it panicked um but for HTTP2 uh we see a stream reset error",
    "start": "530640",
    "end": "538959"
  },
  {
    "text": "with the internal error code now these errors are not exclusively meant to communicate a panic so they could be for",
    "start": "538959",
    "end": "546080"
  },
  {
    "text": "other reasons too so how how do we distinguish so we can look at the server logs which will tell you that the",
    "start": "546080",
    "end": "553040"
  },
  {
    "text": "request panicked it also prints the uh the request path for you and on the audit ID it also we can see here the the",
    "start": "553040",
    "end": "560160"
  },
  {
    "text": "stack trace from the panic so we can pinpoint the the actual line that caused the panic and the matching order event",
    "start": "560160",
    "end": "567519"
  },
  {
    "text": "it has um a reason timeout error and we can see 500 so this tell us that this",
    "start": "567519",
    "end": "573440"
  },
  {
    "text": "request panicked uh on the server i think it's you yeah the next part of",
    "start": "573440",
    "end": "580080"
  },
  {
    "text": "the chain is um passing the request so in a logical way like um yeah understand",
    "start": "580080",
    "end": "586880"
  },
  {
    "text": "the URL the path of the URL understanding certain parameters um of the of the URL and the verbs in",
    "start": "586880",
    "end": "594240"
  },
  {
    "text": "particular and um this is a very common strct if you look into API server code every many many parts of the um oh I",
    "start": "594240",
    "end": "601680"
  },
  {
    "text": "lost the laser it seems no it's back so um this request info is in the context and you can always just ask for it and",
    "start": "601680",
    "end": "608399"
  },
  {
    "text": "you have the the past um logical structure of a request here and um the",
    "start": "608399",
    "end": "613760"
  },
  {
    "text": "most interesting bit is is probably the verb and um we use logical verbs in Kubernetes so we have get list watch but",
    "start": "613760",
    "end": "620240"
  },
  {
    "text": "they actually are all get um verbs for for HTTP the others map quite naturally",
    "start": "620240",
    "end": "626240"
  },
  {
    "text": "um but yeah those things are stored in the request info and for our request",
    "start": "626240",
    "end": "631680"
  },
  {
    "text": "here um at hand we have a create for a job in the batch group and you you will see the expected information so batch v1",
    "start": "631680",
    "end": "639120"
  },
  {
    "text": "namespace is extracted it's fu it's jobs and it's a resource request so it's not something like metrics or healthy or",
    "start": "639120",
    "end": "645839"
  },
  {
    "text": "something it's a real qu operation so that's why resource request is true and you might um yeah if you have written",
    "start": "645839",
    "end": "653600"
  },
  {
    "text": "web hooks for admission you will see similar values which come basically from this strct um requests also have a lifespan",
    "start": "653600",
    "end": "661600"
  },
  {
    "text": "and there are two kinds of requests um we call them longunning watches are long running because um they run at least",
    "start": "661600",
    "end": "668480"
  },
  {
    "text": "half an hour or something or maybe even longer and if you do cube cut lock you will uh and you follow the lock um it",
    "start": "668480",
    "end": "674959"
  },
  {
    "text": "never terminates at best right so it's a long long request and watch proxy are",
    "start": "674959",
    "end": "680079"
  },
  {
    "text": "two verbs which we consider long running and we have some sub resources which we consider longunning but this is",
    "start": "680079",
    "end": "685279"
  },
  {
    "text": "basically hardcoded in cube API server so if you write another API server behind an aggregated one basically this",
    "start": "685279",
    "end": "690880"
  },
  {
    "text": "is what you have right those are longunning everything else is is cut off eventually and Abu will show in a second",
    "start": "690880",
    "end": "696880"
  },
  {
    "text": "um how this cutting off works with how timeouts work yeah so we have stopped at",
    "start": "696880",
    "end": "702880"
  },
  {
    "text": "the latency latency tracking handler so um it tracks the latency incurred by an invite",
    "start": "702880",
    "end": "710720"
  },
  {
    "text": "request at various layers within the API server um and it's recorded as an annot as annotations in the audit uh event uh",
    "start": "710720",
    "end": "718720"
  },
  {
    "text": "but we only record it when the request exceeds like a threshold of 500 millisecond some of the fields these",
    "start": "718720",
    "end": "725200"
  },
  {
    "text": "lists some of the audit annotations that we have today um and um I can go through",
    "start": "725200",
    "end": "731279"
  },
  {
    "text": "some of them like for example the amount of time we spent in the authentication and the authorization phase um we also",
    "start": "731279",
    "end": "738560"
  },
  {
    "text": "have like how much time the requests spent in the mutating and the validating web hooks um this one is very",
    "start": "738560",
    "end": "744639"
  },
  {
    "text": "interesting cd it tracks the latency incurred at the storage layer and usually a single",
    "start": "744639",
    "end": "750360"
  },
  {
    "text": "request may involve multiple round trips to CD uh so this shows the total amount",
    "start": "750360",
    "end": "755839"
  },
  {
    "text": "of time uh the request spends in the storage layer we also have uh latency",
    "start": "755839",
    "end": "761200"
  },
  {
    "text": "tracker for how long it took us to serialize the um the um uh the the",
    "start": "761200",
    "end": "768079"
  },
  {
    "text": "request and also how long it took to write to to the response writer object",
    "start": "768079",
    "end": "773680"
  },
  {
    "text": "right so this could be a very helpful uh tool for debugging um like cluster",
    "start": "773680",
    "end": "778720"
  },
  {
    "text": "issues for example uh if you have the audit ID and if you are looking at if the customer is complaining about like",
    "start": "778720",
    "end": "784399"
  },
  {
    "text": "slow API you could actually look at these um audit annotations and would give you some clues as to what's going",
    "start": "784399",
    "end": "789839"
  },
  {
    "text": "on under the hood next the next one is the HTTP log handler uh it prints it",
    "start": "789839",
    "end": "798000"
  },
  {
    "text": "prints uh attributes of all the incoming requests it's only available if you run the API server at log level three or",
    "start": "798000",
    "end": "804639"
  },
  {
    "text": "more uh but the interesting thing is if you look at the uh the coupe cuddle log",
    "start": "804639",
    "end": "810480"
  },
  {
    "text": "it prints the audit ID uh which represents the request and if we take",
    "start": "810480",
    "end": "815519"
  },
  {
    "text": "the audit ID and grab for it in the AP server log we can find a matching STP",
    "start": "815519",
    "end": "820560"
  },
  {
    "text": "log entry which shows the uh the request path and also u the status code that it",
    "start": "820560",
    "end": "827200"
  },
  {
    "text": "it returned and how much time it took to execute so this also can be very um like",
    "start": "827200",
    "end": "832720"
  },
  {
    "text": "a a tool that can aid in cluster debugging okay now I our request has",
    "start": "832720",
    "end": "838480"
  },
  {
    "text": "made it to the u the the dead um the deadline handler u so this um this this",
    "start": "838480",
    "end": "845040"
  },
  {
    "text": "handler allocates a deadline to non-longunning requests and is attaches",
    "start": "845040",
    "end": "850240"
  },
  {
    "text": "it to the request context um so if if the client doesn't specify a timeout for",
    "start": "850240",
    "end": "856079"
  },
  {
    "text": "the request uh the handler will use a default of 60 seconds today and a",
    "start": "856079",
    "end": "861519"
  },
  {
    "text": "cluster admin can optionally override this value uh through the request timeout um command line option of the",
    "start": "861519",
    "end": "868959"
  },
  {
    "text": "API server um so what happens what if we wanted to",
    "start": "868959",
    "end": "877440"
  },
  {
    "text": "specify timeout for our request um so here we can actually use the option provided by cook cuddle uh request",
    "start": "877440",
    "end": "884480"
  },
  {
    "text": "timeout and we're saying that oh the request should complete within 30 seconds so the our handler will",
    "start": "884480",
    "end": "890800"
  },
  {
    "text": "basically use 30 seconds as the deadline for this request okay so next is the um the",
    "start": "890800",
    "end": "899839"
  },
  {
    "text": "timeout handler so why do you need a timeout handler so like the request handling code may",
    "start": "899839",
    "end": "906240"
  },
  {
    "text": "not respect the the the deadline in the context right so we need a timeout the",
    "start": "906240",
    "end": "911760"
  },
  {
    "text": "timeout hand is basically responsible for enforcing the timeout um so this diagram shows",
    "start": "911760",
    "end": "918199"
  },
  {
    "text": "um in red it shows the path that a request takes when it times out so if",
    "start": "918199",
    "end": "925360"
  },
  {
    "text": "you go through the events and they're already listed chronologically um so the the godp server takes the complete",
    "start": "925360",
    "end": "932320"
  },
  {
    "text": "handler chain and it executes in a new go routine uh and that's the go routine",
    "start": "932320",
    "end": "938320"
  },
  {
    "text": "a we see here and then the handler chain executes and then we have the timeout handler here it takes the rest of the",
    "start": "938320",
    "end": "944560"
  },
  {
    "text": "handler chain and then it executes it in a separate go routine here and then it waits for the the handler chain to to",
    "start": "944560",
    "end": "953040"
  },
  {
    "text": "return for 30 seconds like it will wait at at most for 30 seconds so what",
    "start": "953040",
    "end": "958320"
  },
  {
    "text": "happens here this handler chain is executing and it's taking more than 30",
    "start": "958320",
    "end": "963440"
  },
  {
    "text": "seconds that's D1 in in this diagram right so the timeout handler then will",
    "start": "963440",
    "end": "968880"
  },
  {
    "text": "not wait for it any further because the deadline has exceeded and then it basically prepares a timeout response uh",
    "start": "968880",
    "end": "975680"
  },
  {
    "text": "for for this request and then it returns and then the go to the server takes",
    "start": "975680",
    "end": "980880"
  },
  {
    "text": "control and then it returns the reply to the user so that's how the timeout handler works uh within the Coupe pay",
    "start": "980880",
    "end": "986240"
  },
  {
    "text": "server so it is necessary because sometimes the client doesn't have any timeout and if we don't have a timeout",
    "start": "986240",
    "end": "991680"
  },
  {
    "text": "enforcer in the APA server the client could hang indefinitely and that's not what something we want um so what if we",
    "start": "991680",
    "end": "999600"
  },
  {
    "text": "had um what if we like our we had our request to time out um so we can choose",
    "start": "999600",
    "end": "1005759"
  },
  {
    "text": "a timeout value that is um long enough that coupe cuddle will send the request",
    "start": "1005759",
    "end": "1012560"
  },
  {
    "text": "to the server but then it'll immediately uh abort with a context deadline error",
    "start": "1012560",
    "end": "1018800"
  },
  {
    "text": "so I was able to do that with a timeout of you can see here six millisecond right um and then it's short enough that",
    "start": "1018800",
    "end": "1026319"
  },
  {
    "text": "on the server it will not be able to finish in time and then if you look at the server logs it we can see that um",
    "start": "1026319",
    "end": "1032640"
  },
  {
    "text": "the matching HTTP log entry shows that it it it basically timed out which is",
    "start": "1032640",
    "end": "1038558"
  },
  {
    "text": "504 gateway timeout and then if you look at the matching uh audit event it will tell you that the request timed out it's",
    "start": "1038559",
    "end": "1047000"
  },
  {
    "text": "50504 so Like if you have an audit ids that you debugging cluster with you can",
    "start": "1047000",
    "end": "1053120"
  },
  {
    "text": "just you know this information could be very useful so the next stop is the priority",
    "start": "1053120",
    "end": "1060320"
  },
  {
    "text": "and fairness uh handler so API pri and fairness is a self-defense mechanism uh",
    "start": "1060320",
    "end": "1067520"
  },
  {
    "text": "of the API server it regulates the load on the server and it uses like a um fair",
    "start": "1067520",
    "end": "1074320"
  },
  {
    "text": "queuing algorithm to schedule the requests so when our request enters the",
    "start": "1074320",
    "end": "1079600"
  },
  {
    "text": "uh the filter the handler um we have here the classifier basically it it",
    "start": "1079600",
    "end": "1085520"
  },
  {
    "text": "finds a matching flow for our request and then it uses shuffleing to select a",
    "start": "1085520",
    "end": "1090960"
  },
  {
    "text": "queue and then the request gets put into this queue and then the request basically goes into a waiting state and",
    "start": "1090960",
    "end": "1097039"
  },
  {
    "text": "we have an we have auler in the proud and fairness that asynchronously decides on the request if it decides if the",
    "start": "1097039",
    "end": "1104320"
  },
  {
    "text": "decision is accept the request basically the rest of the handler chain gets executed otherwise um like the request",
    "start": "1104320",
    "end": "1111919"
  },
  {
    "text": "waits in the queue so the question is how long do we allow the request to stay in the queue the answer today is 1/4 of",
    "start": "1111919",
    "end": "1119520"
  },
  {
    "text": "its allotted deadline and then once the deadline exceeds um theuler will remove",
    "start": "1119520",
    "end": "1124960"
  },
  {
    "text": "the request from the queue and it will send a reject reply to the user and today the reject reply looks like it",
    "start": "1124960",
    "end": "1131440"
  },
  {
    "text": "like it has a status code of 429 and then it'll have a um in the response it",
    "start": "1131440",
    "end": "1137200"
  },
  {
    "text": "will have a header called retry after it'll have a value n this represents the number of seconds the the client should",
    "start": "1137200",
    "end": "1143679"
  },
  {
    "text": "wait before it retries okay so what if we get our request to",
    "start": "1143679",
    "end": "1150559"
  },
  {
    "text": "get rejected by by PR and fairness so um this is what we'll see in the log we can",
    "start": "1150559",
    "end": "1157919"
  },
  {
    "text": "see that oh man um in the response you can see is 4 to9",
    "start": "1157919",
    "end": "1164240"
  },
  {
    "text": "which indicates too many requests and it sees a retry after header in the",
    "start": "1164240",
    "end": "1169760"
  },
  {
    "text": "response which has one that means it should wait 1 second before the next retry and that's what cube cut logs here",
    "start": "1169760",
    "end": "1176559"
  },
  {
    "text": "and it keeps retrying and then um if within the retry parameter if it",
    "start": "1176559",
    "end": "1182799"
  },
  {
    "text": "succeeds otherwise it fails right and then we can there's a very interesting observation here uh this server",
    "start": "1182799",
    "end": "1190160"
  },
  {
    "text": "processing milliseconds it's it shows 1500 here so it's uh um sorry 15,000 so",
    "start": "1190160",
    "end": "1196960"
  },
  {
    "text": "it is equal is equal to 15 second so could it be that the request waited in",
    "start": "1196960",
    "end": "1202480"
  },
  {
    "text": "the queue for 15 seconds because if you notice here when we did cook we didn't",
    "start": "1202480",
    "end": "1208799"
  },
  {
    "text": "specify any timeout and the default is 60cond today and 1/4 of of that is 15",
    "start": "1208799",
    "end": "1214160"
  },
  {
    "text": "second so it could be that the request were in the queue for 15 seconds and then it was rejected right so I think we",
    "start": "1214160",
    "end": "1220880"
  },
  {
    "text": "can be sure if you look at the audit event for it if you go to the audit event there is an audit annotation for",
    "start": "1220880",
    "end": "1227120"
  },
  {
    "text": "the latency tracker and you can see APF request timeout it is very close to 15",
    "start": "1227120",
    "end": "1232559"
  },
  {
    "text": "second so this proves that our request in the queue for 15 second and it it was",
    "start": "1232559",
    "end": "1237679"
  },
  {
    "text": "rejected by APF all right so we have passed the first",
    "start": "1237679",
    "end": "1244000"
  },
  {
    "text": "part of the API server the handle chain on the left and now the actual um quad processing happened so now we have",
    "start": "1244000",
    "end": "1250400"
  },
  {
    "text": "attached stuff to the context we have validated we have authorized all those things but now we want to have a a job",
    "start": "1250400",
    "end": "1256400"
  },
  {
    "text": "right we want to create a job in the batch API group so there's a multiplexer in front um it knows about all the paths",
    "start": "1256400",
    "end": "1262400"
  },
  {
    "text": "for different resources among them there's APIs batch v1 jobs and there's a",
    "start": "1262400",
    "end": "1268080"
  },
  {
    "text": "pipeline for the actual request processing behind and for each of them this thing um exists most of them are",
    "start": "1268080",
    "end": "1274159"
  },
  {
    "text": "very very similar so there's a generic registry implementation it's called we see it in a second and um one of those",
    "start": "1274159",
    "end": "1281200"
  },
  {
    "text": "is is for jobs here that's the first one so let's look at the at the pipeline for jobs um we create a v1 batch uh job and",
    "start": "1281200",
    "end": "1289440"
  },
  {
    "text": "v1 is a g version and one could imagine there's just v1 but in the past there",
    "start": "1289440",
    "end": "1294480"
  },
  {
    "text": "was a v1 beta one for example and um versions are everywhere here and we annotated the um the path of the request",
    "start": "1294480",
    "end": "1301120"
  },
  {
    "text": "in this picture and you will find something i mean v1 beta one is gone because we are GA for a long time but",
    "start": "1301120",
    "end": "1307360"
  },
  {
    "text": "there's still this int and int stands for internal there's an internal version internal representation and uh it looks",
    "start": "1307360",
    "end": "1314080"
  },
  {
    "text": "very similar to v1 but it's an internal go type it's another go type uh in the implementation and um yeah you see there",
    "start": "1314080",
    "end": "1321120"
  },
  {
    "text": "are there are transitions from v1 to internal and if you call out to admission for example it's translated",
    "start": "1321120",
    "end": "1326480"
  },
  {
    "text": "back to v1 and the same happens when you write to cd so lots of transitions and",
    "start": "1326480",
    "end": "1331520"
  },
  {
    "text": "when v v2 is um int introduced at some some point then there even more transitions more conversions so",
    "start": "1331520",
    "end": "1337600"
  },
  {
    "text": "conversions is important conversion is a lossless transformation and they are just about representation of the job",
    "start": "1337600",
    "end": "1343600"
  },
  {
    "text": "object but basically just a different shape it's the same data just um represented a bit differently um it's",
    "start": "1343600",
    "end": "1349760"
  },
  {
    "text": "lossless and you can transform between all of them without losing any data um and you get back the same object when",
    "start": "1349760",
    "end": "1355520"
  },
  {
    "text": "you go back um the transformation and there's also one transformation going to SCD and we will see it in a second um",
    "start": "1355520",
    "end": "1361280"
  },
  {
    "text": "which translates to the storage version jobs are stored in V1 um but this doesn't have to be they can be very",
    "start": "1361280",
    "end": "1367200"
  },
  {
    "text": "different and eventually maring happens and we write to SCD and a job is an",
    "start": "1367200",
    "end": "1372320"
  },
  {
    "text": "internal a native resource we use protobuff for that by default but it can be JSON a C is stored in JSON for",
    "start": "1372320",
    "end": "1379480"
  },
  {
    "text": "example all right so this is a picture and um another super important concept",
    "start": "1379480",
    "end": "1385200"
  },
  {
    "text": "you find everywhere in Kubernetes and if you have written controllers for example you will also encounter the scheme the",
    "start": "1385200",
    "end": "1390799"
  },
  {
    "text": "scheme is basically this like this very central registration object and it knows about all conversions all go functions",
    "start": "1390799",
    "end": "1396720"
  },
  {
    "text": "which convert it knows about the kinds group versions it connects them to the",
    "start": "1396720",
    "end": "1401760"
  },
  {
    "text": "go type which is associated to that so basically all the knowledge about the type system is encoded in a scheme and",
    "start": "1401760",
    "end": "1407919"
  },
  {
    "text": "attached to that is a codeex uh construct which knows how to unmar marshall to JSON to protobuff and knows",
    "start": "1407919",
    "end": "1414880"
  },
  {
    "text": "how to call conversions all right so let's um look at the first phase so we have the",
    "start": "1414880",
    "end": "1421760"
  },
  {
    "text": "request has a body um there's a binary blob so the JSON here in our example coming from cucle um our context is",
    "start": "1421760",
    "end": "1429520"
  },
  {
    "text": "completely filled we know the user we know the audit event request info everything um we know from the header",
    "start": "1429520",
    "end": "1435520"
  },
  {
    "text": "it's JSON so we we call the codeex data structure decode that thing and create a",
    "start": "1435520",
    "end": "1440960"
  },
  {
    "text": "go object batch v1 job and um after creating that we call a defaulting um",
    "start": "1440960",
    "end": "1447600"
  },
  {
    "text": "function which at some fields user our ourselves in this case haven't added to",
    "start": "1447600",
    "end": "1453039"
  },
  {
    "text": "the manifest right we didn't specify all of them so the defaulting make sure those things are are set that's the",
    "start": "1453039",
    "end": "1459600"
  },
  {
    "text": "first phase now we have a go object a v1 go object but um you have seen here there's a internal type so we have to to",
    "start": "1459600",
    "end": "1466559"
  },
  {
    "text": "convert to internal so there's a converter converter is registered in the scheme so it's called and we have the",
    "start": "1466559",
    "end": "1472400"
  },
  {
    "text": "internal object and if you're interested into the code here there's a package it's deep in the cube uh repository it's",
    "start": "1472400",
    "end": "1478799"
  },
  {
    "text": "not exposed in the API package but it looks very similar to the v1 and then we have a concept called registry this is",
    "start": "1478799",
    "end": "1485279"
  },
  {
    "text": "really the the logic of cut what is implemented here create delete update",
    "start": "1485279",
    "end": "1490320"
  },
  {
    "text": "all those um uh methods and there's a strategy for a job and um the author of",
    "start": "1490320",
    "end": "1496320"
  },
  {
    "text": "the job resource can add things they want to do um during create so it's another defaulting phase and if you know",
    "start": "1496320",
    "end": "1503200"
  },
  {
    "text": "feature gates uh you can enable feature gates and then certain things can be set if they are disabled um you can't set",
    "start": "1503200",
    "end": "1509120"
  },
  {
    "text": "them right you can give values but they just dropped um during processing and these kind of things happen here in the",
    "start": "1509120",
    "end": "1515039"
  },
  {
    "text": "um prepare for create here in the example I looked into the job resource and um yeah it set some fields so the",
    "start": "1515039",
    "end": "1521360"
  },
  {
    "text": "pot failure policy is a new thing it seems this is um set to the default value",
    "start": "1521360",
    "end": "1526760"
  },
  {
    "text": "here then um validation admission happens Um everybody of you will have experienced that um there's mutating",
    "start": "1526760",
    "end": "1533520"
  },
  {
    "text": "admissions so you can add web hooks there's a admission chain here and you can add web hooks you can add cell",
    "start": "1533520",
    "end": "1539919"
  },
  {
    "text": "policies there's an alpha feature for that and of course it can go wrong then you get this 4 to2 unprocessable entity",
    "start": "1539919",
    "end": "1546559"
  },
  {
    "text": "for all of them actually then there's an API validate phase this is go code again",
    "start": "1546559",
    "end": "1551600"
  },
  {
    "text": "in the strategy here in the create strategy um it it checks like the name that it's proper um as expected and the",
    "start": "1551600",
    "end": "1558159"
  },
  {
    "text": "fields have the right values and then admission is called again and admission um might call your web hook does other",
    "start": "1558159",
    "end": "1564400"
  },
  {
    "text": "things checking for namespaces for example um checks the CL rules and then we are basically um yeah we are ready",
    "start": "1564400",
    "end": "1571440"
  },
  {
    "text": "with a with a validated object and now we want to store now the interesting bit comes we want to create",
    "start": "1571440",
    "end": "1577679"
  },
  {
    "text": "an object so this means write tod so what happens here we have the batch object and we translate that to to a key",
    "start": "1577679",
    "end": "1584080"
  },
  {
    "text": "for for sd is a key value store so the key is registry jobs the name space uh",
    "start": "1584080",
    "end": "1590640"
  },
  {
    "text": "pi is the name of the object then there's another registry function prepare object for storage super boring",
    "start": "1590640",
    "end": "1596640"
  },
  {
    "text": "it just overrides the um it wipes the resource version because the resource version is stored in a different way",
    "start": "1596640",
    "end": "1602880"
  },
  {
    "text": "then we call the codeex again so this time reversely we encode so we convert our internal object to v1 and um then we",
    "start": "1602880",
    "end": "1611039"
  },
  {
    "text": "have a go object and then marsh running happens because um we want a JSON object because the accept header says JSON um",
    "start": "1611039",
    "end": "1618320"
  },
  {
    "text": "oh no sorry um I'm too too fast we are storing here in Etsy so it's about the storage version and we know jobs are um",
    "start": "1618320",
    "end": "1626080"
  },
  {
    "text": "stored in Porto so we get Portobuff here um KMS encryption is the last step a",
    "start": "1626080",
    "end": "1631279"
  },
  {
    "text": "binary transformation so if you want to encrypt this happens here and then the SCD client is called with an optim",
    "start": "1631279",
    "end": "1636799"
  },
  {
    "text": "optimistic put and optimistic means everything we done before like all the 20 minutes before they were optimistic",
    "start": "1636799",
    "end": "1643279"
  },
  {
    "text": "like we hoped that the push will succeed and as you know when you create you you might get an already exist and this is",
    "start": "1643279",
    "end": "1649600"
  },
  {
    "text": "an error that client returns when the key already exists and um if it exists it's translated in this 40 409 error and",
    "start": "1649600",
    "end": "1656480"
  },
  {
    "text": "returned to the client um we are nearly finished so um is",
    "start": "1656480",
    "end": "1662159"
  },
  {
    "text": "updated but we want to tell something about the success to the cube cuttle so we take again the internal object here",
    "start": "1662159",
    "end": "1668880"
  },
  {
    "text": "the the batch um job the go object we convert it back to the request version",
    "start": "1668880",
    "end": "1674000"
  },
  {
    "text": "which might differ from the storage version here it doesn't it's suppose v1 we encode according to the to the header",
    "start": "1674000",
    "end": "1680559"
  },
  {
    "text": "here there's accept header attached to the request we encode we write it to the response um writer and basically yeah",
    "start": "1680559",
    "end": "1688799"
  },
  {
    "text": "the pipeline is done with that right and uh we are nearly finished with the API",
    "start": "1688799",
    "end": "1693840"
  },
  {
    "text": "server processing of this request yes and As these steps are being",
    "start": "1693840",
    "end": "1700640"
  },
  {
    "text": "executed uh the the audit event in the context are being updated as as um and",
    "start": "1700640",
    "end": "1706799"
  },
  {
    "text": "then it's time for the request to leave but not just yet um because the handle",
    "start": "1706799",
    "end": "1711840"
  },
  {
    "text": "chain are already in the stack so the request goes through the flight the handle chain but in reverse order and at",
    "start": "1711840",
    "end": "1719840"
  },
  {
    "text": "this point the audit handler has a chance to persist the audit entry the",
    "start": "1719840",
    "end": "1724960"
  },
  {
    "text": "completed audit entry um using the back end and usually it's a it's a log file",
    "start": "1724960",
    "end": "1730240"
  },
  {
    "text": "also the STP log handler has a chance to to flush the uh the the STB log entry to",
    "start": "1730240",
    "end": "1736000"
  },
  {
    "text": "the to the log um and so at this point",
    "start": "1736000",
    "end": "1741200"
  },
  {
    "text": "the handler chain is complete it returns and then the HTTP server resumes control",
    "start": "1741200",
    "end": "1746720"
  },
  {
    "text": "and it sends a reply to couple so depending on the reply from the server couple may have more steps to do uh for",
    "start": "1746720",
    "end": "1754159"
  },
  {
    "text": "example if the coup if coupddle receives a network error um and the request is readon it may retry the request or if",
    "start": "1754159",
    "end": "1761919"
  },
  {
    "text": "couple receives a response and the response status code is 429 or 5xx and",
    "start": "1761919",
    "end": "1767840"
  },
  {
    "text": "it has a response header uh named retry after it will retry um so client go",
    "start": "1767840",
    "end": "1774720"
  },
  {
    "text": "basically is the official client for talking to Kubernetes cluster and it has this built-in um retry lo logic built",
    "start": "1774720",
    "end": "1782399"
  },
  {
    "text": "into it and if we build our application is doing client go our our application will automatically retry on our behalf",
    "start": "1782399",
    "end": "1789559"
  },
  {
    "text": "um so in our case the request was successful and uh the kuddle completed",
    "start": "1789559",
    "end": "1795600"
  },
  {
    "text": "the the the request and we see a response that you know the job was",
    "start": "1795600",
    "end": "1800679"
  },
  {
    "text": "created i think yeah and with that we have oops yeah passed our hopefully",
    "start": "1800679",
    "end": "1806399"
  },
  {
    "text": "passed our interview question and uh I hope some of you have learned something about what happens really when a cube",
    "start": "1806399",
    "end": "1813200"
  },
  {
    "text": "cutle is executed cube cutle create in this case um of course every box deserves its talk in its own right",
    "start": "1813200",
    "end": "1819919"
  },
  {
    "text": "there's lots of stuff behind um so if you have questions um of course ask them I think we are out of time I'm not sure",
    "start": "1819919",
    "end": "1825919"
  },
  {
    "text": "whether we have time um time to the next talk um yeah we are here uh otherwise as",
    "start": "1825919",
    "end": "1831919"
  },
  {
    "text": "yeah so the usual channels um there is this code here so if you have feedback",
    "start": "1831919",
    "end": "1837279"
  },
  {
    "text": "um this goes to the scat page please give feedback bad or or good um anything you want to tell us um yeah that's all I",
    "start": "1837279",
    "end": "1845200"
  },
  {
    "text": "wanted to tell thank you thank [Applause]",
    "start": "1845200",
    "end": "1850369"
  }
]