[
  {
    "text": "okay I think we'll get started hello everyone maybe don't have to use the mic can you hear me in the",
    "start": "640",
    "end": "7400"
  },
  {
    "text": "back all right hi i do for stream yes sorry people",
    "start": "7400",
    "end": "13280"
  },
  {
    "text": "watching online i apologize uh my name is Schneider core maintainer of the Dapper project streaming committee",
    "start": "13280",
    "end": "18960"
  },
  {
    "text": "member also uh CTO co-founder at DIG Grid and together with me we have Roberto yes so my name is Roberto",
    "start": "18960",
    "end": "24960"
  },
  {
    "text": "Rodriguez um I'm also a new Dapper maintainer creator of the Dapper Agents",
    "start": "24960",
    "end": "30080"
  },
  {
    "text": "project and I'm also part of the Nvidia uh team um so I'm going to be doing how",
    "start": "30080",
    "end": "36079"
  },
  {
    "text": "to enable autonomy how to enable AI agents into security operations to defend Nvidia's you know products",
    "start": "36079",
    "end": "43280"
  },
  {
    "text": "okay I'm going to take the first section of our talk let's start with community updates",
    "start": "43280",
    "end": "48960"
  },
  {
    "text": "the Dapper project has been through a lot uh it's gained new contributors new end users um and one of the most",
    "start": "48960",
    "end": "56160"
  },
  {
    "text": "important things that we've seen during the last year is that now we're a graduated CNCF project since November 12",
    "start": "56160",
    "end": "62000"
  },
  {
    "text": "uh 2024 and this is really a testament to the validity of the project it's broad user adoption the number of",
    "start": "62000",
    "end": "68880"
  },
  {
    "text": "contributors that are contributing to the project and um it's been a a journey to get there but if you ever contributed",
    "start": "68880",
    "end": "75040"
  },
  {
    "text": "to Dapper opened an issue communicated with maintainers you have our thanks um",
    "start": "75040",
    "end": "80880"
  },
  {
    "text": "beyond this we are one of the fastest growing projects in CNCF currently 14th largest over 700,000 Docker hub pools a",
    "start": "80880",
    "end": "88479"
  },
  {
    "text": "month uh more than 300,000 unique doc views and our Discord community recently",
    "start": "88479",
    "end": "94079"
  },
  {
    "text": "surpassed 8,000 members and we're closing up on 4,000 individual contributors this is great and um beyond",
    "start": "94079",
    "end": "101040"
  },
  {
    "text": "all that the most important thing for us is to actually measure end user adoption so this has been pretty much off the",
    "start": "101040",
    "end": "107600"
  },
  {
    "text": "charts um the Python SDK grew 151% I believe um year-over-year uh which is",
    "start": "107600",
    "end": "114320"
  },
  {
    "text": "very much fueled by AI workloads that we'll talk about in a second umnet continues to see almost I I think it's",
    "start": "114320",
    "end": "120799"
  },
  {
    "text": "actually over 200,000 uh downloads per week now um which is pretty great and of",
    "start": "120799",
    "end": "126240"
  },
  {
    "text": "course we have other languages using Dapper but we don't have uh great ways to track them this is obviously public",
    "start": "126240",
    "end": "131360"
  },
  {
    "text": "metrics that we're taking um we're seeing amazing uh use cases this is my own personal favorite nasa running",
    "start": "131360",
    "end": "137760"
  },
  {
    "text": "Dapper on the International Space Station um what it's doing there is Dapper is being used as the message bus",
    "start": "137760",
    "end": "144160"
  },
  {
    "text": "layer to take pictures of astronaut suits um and then fire those off to a",
    "start": "144160",
    "end": "149680"
  },
  {
    "text": "machine learning model that decides if the suit needs fixing in this case we can see the glove so essentially check",
    "start": "149680",
    "end": "155040"
  },
  {
    "text": "for tear and wear um this is the ultimate edge deployment in our opinion all the way to companies like Grafana um",
    "start": "155040",
    "end": "161120"
  },
  {
    "text": "that built their uh secure supply chain on top of Dapper on AWS uh using",
    "start": "161120",
    "end": "166319"
  },
  {
    "text": "graphana cloud this is essentially the basis for their entire infrastructure stack scanning container images for",
    "start": "166319",
    "end": "172000"
  },
  {
    "text": "CVEes and there's many more we've released dozens of these case studies these are uh just two that I",
    "start": "172000",
    "end": "177920"
  },
  {
    "text": "particularly like recently we've released Dapper 115 a really important release because uh it saw some pretty",
    "start": "177920",
    "end": "185200"
  },
  {
    "text": "interesting additions and also improvements to the Dapper project we've added conversation API which is a way",
    "start": "185200",
    "end": "191200"
  },
  {
    "text": "for developers to securely and reliably talk to underlying LLMs and of course this isn't just a pass through",
    "start": "191200",
    "end": "198239"
  },
  {
    "text": "essentially when your application talks to any of these models using Dapper you can apply circuit breakers and retries",
    "start": "198239",
    "end": "204159"
  },
  {
    "text": "and timeouts and you can kick authentication middleware you can do authorization all before talking to the",
    "start": "204159",
    "end": "209840"
  },
  {
    "text": "actual LLM and on top of that we add enterprise features like sensitive data offiscation which means if you want to",
    "start": "209840",
    "end": "216080"
  },
  {
    "text": "make sure that the user prompt which can really be anything doesn't contain any sort of personal information like credit",
    "start": "216080",
    "end": "221599"
  },
  {
    "text": "card numbers um social security numbers names emails Dapper will do that for you and that's a very hard problem to solve",
    "start": "221599",
    "end": "228000"
  },
  {
    "text": "also we can offiscate data coming out of the LLM if you have your own uh personally trained model and you're",
    "start": "228000",
    "end": "233599"
  },
  {
    "text": "afraid you might have put some data that shouldn't be there um Dapper can actually make sure that we offiscate that data going out and then prompt",
    "start": "233599",
    "end": "239760"
  },
  {
    "text": "caching which is great a lot of L&M providers do have prompt caching but without prompt caching you still need to",
    "start": "239760",
    "end": "246159"
  },
  {
    "text": "send the request out of your cluster so you still need to pay for network charges when hitting those and even if",
    "start": "246159",
    "end": "252480"
  },
  {
    "text": "you hit the cache you will still pay about 50% of the charge um for that cloud provider with Dapper all of that",
    "start": "252480",
    "end": "258160"
  },
  {
    "text": "is gone you don't need to do that anymore all of the caches are actually saved in the Dapper sidecore locally",
    "start": "258160",
    "end": "263520"
  },
  {
    "text": "latency is extremely low because nothing ever leaves your cluster um not even your your VPC so um this conversation",
    "start": "263520",
    "end": "271280"
  },
  {
    "text": "API is new and it's garnered a lot of attention we've released with these providers that you can see here but ever",
    "start": "271280",
    "end": "276800"
  },
  {
    "text": "since we've released we actually had community contributions to add um uh uh Google Gemini and Olama to Dapper so",
    "start": "276800",
    "end": "282960"
  },
  {
    "text": "come 116 at least these models will also be introduced our community is very enthusiastic about adding them",
    "start": "282960",
    "end": "289759"
  },
  {
    "text": "uh workflows has now become stable workflows has certainly been the most interesting building block for",
    "start": "289759",
    "end": "294800"
  },
  {
    "text": "developers since we first announced it in Dapper 112 there's many large companies that took it to production",
    "start": "294800",
    "end": "300960"
  },
  {
    "text": "even though we told them not to take it into production which is interesting um just because of the value ads that it",
    "start": "300960",
    "end": "306400"
  },
  {
    "text": "provides now it's production ready so now you can take into production if you're watching and you did take it into production and you're having issues then",
    "start": "306400",
    "end": "314160"
  },
  {
    "text": "these issues should be gone now if you're still having issues please come talk to us um the maintainers we like to",
    "start": "314160",
    "end": "320000"
  },
  {
    "text": "fix things so um please if you find workflows interesting if you didn't use workflows up until now because it wasn't",
    "start": "320000",
    "end": "326320"
  },
  {
    "text": "stable um please go ahead and take them out for a spin we support Java Python Go C um JavaScript TypeScript and PHP is",
    "start": "326320",
    "end": "333919"
  },
  {
    "text": "coming it's we have a community contributor who's creating a PHP SDK for workflows it's going to be really",
    "start": "333919",
    "end": "338960"
  },
  {
    "text": "interesting to see how the web meets um these durable workflows and we're going to cover them uh more soon it's now",
    "start": "338960",
    "end": "345120"
  },
  {
    "text": "ready for pretty much anything you want to do it's the programming model is so general purpose you can essentially use",
    "start": "345120",
    "end": "350639"
  },
  {
    "text": "it to do anything from data processing to notifications to timers and reminders to even writing your own Kubernetes like",
    "start": "350639",
    "end": "357280"
  },
  {
    "text": "server and also AI agentic systems which we will cover more in this talk um so",
    "start": "357280",
    "end": "363199"
  },
  {
    "text": "what do workflows allow you to do it allows you to create very complex distributed systems pattern in a very",
    "start": "363199",
    "end": "369520"
  },
  {
    "text": "easy way so task chaining for example is where you have one activity that's followed by the other that's followed by",
    "start": "369520",
    "end": "375120"
  },
  {
    "text": "others and we take the input from one and we feed it back again um one example that I like to use is a morning routine",
    "start": "375120",
    "end": "382080"
  },
  {
    "text": "actually used it yesterday so I really like using it and you essentially wake up you hit the shower you brush your teeth and then you go make your coffee",
    "start": "382080",
    "end": "388400"
  },
  {
    "text": "if for example you couldn't make your coffee you don't want need to go all the way back to the shower this is essentially the guarantee that Dapper",
    "start": "388400",
    "end": "394479"
  },
  {
    "text": "gives you you can fire off tens of thousands of those activities dapper has a very smart efficient and efficient uh",
    "start": "394479",
    "end": "400639"
  },
  {
    "text": "event sourcing mechanism which allows it to track the state of each individual activity it'll know where it needs to",
    "start": "400639",
    "end": "406400"
  },
  {
    "text": "pick off again and it will continue the execution from essentially where it left off uh fan infinout that's your standard",
    "start": "406400",
    "end": "414000"
  },
  {
    "text": "map reduceuc like pattern you can fire off again tens of thousands of these um in parallel so imagine you're firing",
    "start": "414000",
    "end": "421440"
  },
  {
    "text": "1,000 batch jobs with Dapper and one fails and 999 succeeds dapper will",
    "start": "421440",
    "end": "427599"
  },
  {
    "text": "actually track the state for each and every one of those and it'll make sure that only the one that failed actually retries so this can lower costs you if",
    "start": "427599",
    "end": "435120"
  },
  {
    "text": "you have IO operations or you're hitting you know things like LM providers for example which cause you to pay Dapper",
    "start": "435120",
    "end": "442400"
  },
  {
    "text": "will make sure that well that just doesn't happen because it will not kick off again uh activities that actually",
    "start": "442400",
    "end": "448240"
  },
  {
    "text": "run to completion successfully and then you can aggregate those results the monitor pattern allows you to create",
    "start": "448240",
    "end": "454000"
  },
  {
    "text": "durable timers so it's something like you know an alarm clock for applications remind me in one week one year Dapper",
    "start": "454000",
    "end": "460800"
  },
  {
    "text": "since 115 can actually sleep to um infinity so you can have something that",
    "start": "460800",
    "end": "466000"
  },
  {
    "text": "will just wait for years and years and then wake up and it's a loted time and hit your application and this is durable",
    "start": "466000",
    "end": "472160"
  },
  {
    "text": "the cluster goes down the database goes down this thing will remain so um it's a pretty nice",
    "start": "472160",
    "end": "478800"
  },
  {
    "text": "scheduling semantics for lots of applications external system interaction this is something extremely important",
    "start": "478800",
    "end": "485440"
  },
  {
    "text": "because this is essentially a human in the loop or today humans and AI agents",
    "start": "485440",
    "end": "490560"
  },
  {
    "text": "in the loop where your system needs to execute a workflow and then pause because it's waiting on an external event to come in something like a human",
    "start": "490560",
    "end": "497520"
  },
  {
    "text": "approval someone needs to approve a form or an order that went through or you want to give it off to an AA agent",
    "start": "497520",
    "end": "503120"
  },
  {
    "text": "that's going to make a decision that's going to resume the workflow so that approval event can actually come from",
    "start": "503120",
    "end": "508400"
  },
  {
    "text": "any system um and again Dapper can sleep for a long while and survive network",
    "start": "508400",
    "end": "513440"
  },
  {
    "text": "interruptions pod disruptions complete shutdowns and once the system gets back up and the approval um is being uh",
    "start": "513440",
    "end": "520000"
  },
  {
    "text": "forwarded to Dapper the workflow will continue so now let's switch gears and",
    "start": "520000",
    "end": "525200"
  },
  {
    "text": "talk about how all of that relates to AI agents um the very basic concept of an agent is that it's autonomous and this",
    "start": "525200",
    "end": "532240"
  },
  {
    "text": "is why they're actually useful um you have a user here now these users granted they can be processes they can be other",
    "start": "532240",
    "end": "538720"
  },
  {
    "text": "agents in this case it's a user and we issue a prompt into the agent and then the agent kicks off a workflow we",
    "start": "538720",
    "end": "545760"
  },
  {
    "text": "essentially reason about what we want to do or what the agent wants to do because it's not really us and then it plans um",
    "start": "545760",
    "end": "552480"
  },
  {
    "text": "then that plan goes into an execution phase which is called action and to be able to deliver the best action the",
    "start": "552480",
    "end": "558880"
  },
  {
    "text": "agent needs to choose the correct tool that is best for the job then it will",
    "start": "558880",
    "end": "565279"
  },
  {
    "text": "essentially fire that off and observe the result feed it back to the LLM send it back to the user and hopefully",
    "start": "565279",
    "end": "571440"
  },
  {
    "text": "everything uh executed to completion successfully and those tools can interact with anything it can be your",
    "start": "571440",
    "end": "577680"
  },
  {
    "text": "internal systems it can be external systems um it can be pretty much uh systems that even give you a dynamic",
    "start": "577680",
    "end": "585440"
  },
  {
    "text": "list of tools while the ex execution is going so you don't necessarily know in advance which tool you're going to be uh",
    "start": "585440",
    "end": "590480"
  },
  {
    "text": "kicking off and so these workflows are extremely important but workflows as",
    "start": "590480",
    "end": "596160"
  },
  {
    "text": "we've come to know them since pretty much software has existed are very different from agentic workflows because",
    "start": "596160",
    "end": "601680"
  },
  {
    "text": "regular workflows are structured they are predefined predetermined steps we essentially code stuff um and we know",
    "start": "601680",
    "end": "608399"
  },
  {
    "text": "how the code's going to work we expect that if we launch the same code again we're going to get the same result",
    "start": "608399",
    "end": "613839"
  },
  {
    "text": "because otherwise it would have been insanity Einstein said so this rule-based orchestration um doesn't have",
    "start": "613839",
    "end": "620800"
  },
  {
    "text": "real-time adaptation yes parameters can change the data can change but the workflow remains the same the number of",
    "start": "620800",
    "end": "626240"
  },
  {
    "text": "steps remains the same the the tools that you use and hardcode into your workflow they remain the same it's repeatable and it's structured and this",
    "start": "626240",
    "end": "632880"
  },
  {
    "text": "is what we've been spending the last 40 years writing software for software that makes these structured executions",
    "start": "632880",
    "end": "639600"
  },
  {
    "text": "reliable and secure but now everything's a little bit flipping on its head because agentic workflows are not that",
    "start": "639600",
    "end": "646959"
  },
  {
    "text": "anymore imagine your brain as a developer was connected to the code you write and you examining the execution",
    "start": "646959",
    "end": "653519"
  },
  {
    "text": "state and the input output state at any given stage and then making decisions based on what it is decisions that are",
    "start": "653519",
    "end": "659279"
  },
  {
    "text": "not hard-coded so agenda is essentially like that it'll take uh blends it blends",
    "start": "659279",
    "end": "664640"
  },
  {
    "text": "workflows structured workflows with AI decision-driven making which means that it can make a choice about what activity",
    "start": "664640",
    "end": "671760"
  },
  {
    "text": "to run next and that might not be the execution that it ran last this thing is highly unpredictable um it uses",
    "start": "671760",
    "end": "678240"
  },
  {
    "text": "reasoning which we don't fully understand um to dynamically choose the best path based on the incoming data and",
    "start": "678240",
    "end": "685519"
  },
  {
    "text": "all that needs to enable autonomy because agents are only really useful if they're autonomous but the more autonomy",
    "start": "685519",
    "end": "691519"
  },
  {
    "text": "they have the more things can go wrong because the more autonomy we give them the more choices they have the more",
    "start": "691519",
    "end": "696959"
  },
  {
    "text": "choices the more permutations of different situations and activities that that can occur um and so this becomes a",
    "start": "696959",
    "end": "703360"
  },
  {
    "text": "problem because as I said we've been writing software to deal with structured execution and now we need to deal with",
    "start": "703360",
    "end": "709519"
  },
  {
    "text": "something completely different which is adaptive and intelligent and one of the main things about agents is that it's",
    "start": "709519",
    "end": "715200"
  },
  {
    "text": "not really hitting production systems yet but it will soon and when you take them into production you're going to be running into issues keeping those things",
    "start": "715200",
    "end": "722000"
  },
  {
    "text": "reliable making sure that if you have 200 operations now that the AI agent",
    "start": "722000",
    "end": "727120"
  },
  {
    "text": "essentially kicked off that they all complete in in the time that uh they need to complete it by or that they",
    "start": "727120",
    "end": "733360"
  },
  {
    "text": "retry based on where it left off because your workflow might be dynamic in nature",
    "start": "733360",
    "end": "738720"
  },
  {
    "text": "it might not be item potent um you might need you know things like exactly once executions of these systems and the more",
    "start": "738720",
    "end": "745920"
  },
  {
    "text": "responsibilities you assign to it the more can go wrong so having a very uh",
    "start": "745920",
    "end": "751600"
  },
  {
    "text": "resilient foundation and infrastructure to these AI agents is crucial and if we look at a lot of AI agent frameworks out",
    "start": "751600",
    "end": "758560"
  },
  {
    "text": "there today um they're great for demos great for PC's of course I'm not going to name any names but you know it's good",
    "start": "758560",
    "end": "764160"
  },
  {
    "text": "to get things going but they don't have the same level of durability and uh",
    "start": "764160",
    "end": "769440"
  },
  {
    "text": "resiliency that Dapper has with workflows so how do we combine these two things how do we combine these easy",
    "start": "769440",
    "end": "775120"
  },
  {
    "text": "interfaces for developers to write AI agents with these um durable workflows that Dapper has in a way that is",
    "start": "775120",
    "end": "781120"
  },
  {
    "text": "adaptive to things that are dynamically changing um there's other top challenges",
    "start": "781120",
    "end": "786880"
  },
  {
    "text": "here except for reliability which we've talked about because again with reliability the chances of failure",
    "start": "786880",
    "end": "792720"
  },
  {
    "text": "increases with the level of autonomy um security is another one how do we encrypt communication between agents if",
    "start": "792720",
    "end": "798560"
  },
  {
    "text": "you think about agents they're like the perfect microservices right every developer tries to decide how to best",
    "start": "798560",
    "end": "804720"
  },
  {
    "text": "model their application and encapsulate their business logic and we want to do domain driven design where we",
    "start": "804720",
    "end": "810079"
  },
  {
    "text": "encapsulate all of our domain into a single class or a bunch of classes or a service and every time something bleeds",
    "start": "810079",
    "end": "817040"
  },
  {
    "text": "through the interface this will never ever stop but with a agents it's actually pretty easy to arrive at",
    "start": "817040",
    "end": "822360"
  },
  {
    "text": "architectures that really make them reusable and repeatable so you can think about having many agents each one doing",
    "start": "822360",
    "end": "828160"
  },
  {
    "text": "its own task and then an orchestrator agent that picks the best agent for the job and these agents can dynamically",
    "start": "828160",
    "end": "834079"
  },
  {
    "text": "scale up and down um instead of running a monolith agent which is going to be extremely problematic especially as it",
    "start": "834079",
    "end": "841040"
  },
  {
    "text": "becomes a single point of failure if you've got many different scenarios to run with a single agent if the agent",
    "start": "841040",
    "end": "846480"
  },
  {
    "text": "essentially fails um then all of the underlying activities all of the underlying executions well they're not",
    "start": "846480",
    "end": "851680"
  },
  {
    "text": "kicking off anymore it's it's a very problematic noisy neighbor problem so how do we um actually encrypt these",
    "start": "851680",
    "end": "858800"
  },
  {
    "text": "agent agent communications because we want to have multiple agents each bounded to their own context how do we",
    "start": "858800",
    "end": "864000"
  },
  {
    "text": "do authentication between agents that's a problem um they don't necessarily adhere to you know standard uh standard",
    "start": "864000",
    "end": "870079"
  },
  {
    "text": "protocols how do you authorize these agent-to-ag communications and of course cost efficiency we all want to be very",
    "start": "870079",
    "end": "877440"
  },
  {
    "text": "much aware of the costs it takes to run our software um and these agents can",
    "start": "877440",
    "end": "882480"
  },
  {
    "text": "become very very expensive to run in terms of CPU and memory consumption um in the Dapper project um",
    "start": "882480",
    "end": "889600"
  },
  {
    "text": "we have come up with a project that we announced recently called Dapper agents and it is essentially a solution to",
    "start": "889600",
    "end": "896720"
  },
  {
    "text": "answer all of those needs it's an agentic framework built on top of Dapper workflows it is a unified programming",
    "start": "896720",
    "end": "902560"
  },
  {
    "text": "model with Dapper you can use all of the Dapper APIs with it it facilitates multi-agent collaboration it allows for",
    "start": "902560",
    "end": "908639"
  },
  {
    "text": "authentication authorization all of the Dapper APIs and building blocks that you use for resiliency can be applied to",
    "start": "908639",
    "end": "914880"
  },
  {
    "text": "these agents and you can also run thousands of agents on a single core because these uh this agent framework is",
    "start": "914880",
    "end": "921199"
  },
  {
    "text": "built on Dapper workflows and Dapper workflows itself is built on a concept in Dapper called actors which is a very",
    "start": "921199",
    "end": "927600"
  },
  {
    "text": "very lightweight process that encapsulates computing state and Dapper can essentially move millions of those",
    "start": "927600",
    "end": "933120"
  },
  {
    "text": "within even a five pod Kubernetes cluster with four cores um and so we",
    "start": "933120",
    "end": "938560"
  },
  {
    "text": "talked before also about workflows and full autonomy versus deterministic well",
    "start": "938560",
    "end": "943839"
  },
  {
    "text": "with Dapper agents you don't have to give up one architecture for the other you can actually choose whether you want",
    "start": "943839",
    "end": "949120"
  },
  {
    "text": "to allow the agent to fully uh fully autonomously handle the task or if you want to write your own type of workflow",
    "start": "949120",
    "end": "956000"
  },
  {
    "text": "manually and then connect it to a task that is autonomous using a different agent but Dapper will guarantee",
    "start": "956000",
    "end": "961199"
  },
  {
    "text": "durability all the same it doesn't matter if you're giving the agent full autonomy that will make sure that even",
    "start": "961199",
    "end": "966240"
  },
  {
    "text": "if you connect it to thousands of tasks each one of these tasks will essentially be a durable activity that finishes and",
    "start": "966240",
    "end": "973360"
  },
  {
    "text": "uh picks up where it left off even in the face of the most catastrophic failures you can think of to your",
    "start": "973360",
    "end": "978480"
  },
  {
    "text": "underlying infrastructure um and to talk to us more about Dapper agents I'm going to let the original author of it who",
    "start": "978480",
    "end": "984399"
  },
  {
    "text": "contributed it to the Dapper project Roberto um take us forward thank you all right thank you very much all right so",
    "start": "984399",
    "end": "991600"
  },
  {
    "text": "let's go to our next one I guess but um so before I guess we started talking about this the Dapper agents project um",
    "start": "991600",
    "end": "998079"
  },
  {
    "text": "it was something that first I wanted to figure out how to build my own agent so as a security researcher I wanted just",
    "start": "998079",
    "end": "1004160"
  },
  {
    "text": "to learn and kind of like reinvent the wheel a little bit just to learn how every component was working together but",
    "start": "1004160",
    "end": "1010160"
  },
  {
    "text": "at the same time as part of research I wanted to figure out what was out there that I could use right built on the top",
    "start": "1010160",
    "end": "1015440"
  },
  {
    "text": "of something that has been proven to work in production and that's how I got to Dapper and the whole ecosystem so",
    "start": "1015440",
    "end": "1021600"
  },
  {
    "text": "when you start thinking about agents there is multiple components of an agent right you have the concept of memory the",
    "start": "1021600",
    "end": "1027280"
  },
  {
    "text": "concept of tools state how they communicate once again how they plan how do you save the plan and then distribute",
    "start": "1027280",
    "end": "1034160"
  },
  {
    "text": "that plan across all the other agents that are part of your multi- aent collaboration system right so there's a",
    "start": "1034160",
    "end": "1040319"
  },
  {
    "text": "lot of things that we have to consider every time we start thinking about agents now when you think about the",
    "start": "1040319",
    "end": "1046760"
  },
  {
    "text": "workflow concepts there is actually this this is known as an agentic pattern",
    "start": "1046760",
    "end": "1052320"
  },
  {
    "text": "right so instead of saying agentic workflows in the community in the AI community I guess is an agentic pattern",
    "start": "1052320",
    "end": "1058160"
  },
  {
    "text": "and there was this one that came out in uh this one was in October 2022 this was actually before Chat GPT which was",
    "start": "1058160",
    "end": "1064640"
  },
  {
    "text": "November 2022 um and and this was kind of showing that we do not just have to",
    "start": "1064640",
    "end": "1070960"
  },
  {
    "text": "talk to an LLM and get facts all the time in this iterative loop right can we",
    "start": "1070960",
    "end": "1076000"
  },
  {
    "text": "actually make a system to interact with the outside world so this agentic pattern was proposed in this paper so",
    "start": "1076000",
    "end": "1082960"
  },
  {
    "text": "you have to make it think so have the language model think about your question figure out how to act in the real world",
    "start": "1082960",
    "end": "1089520"
  },
  {
    "text": "through tools this could be applications you know functions such as you know python function for example and then try",
    "start": "1089520",
    "end": "1095039"
  },
  {
    "text": "to get that observation so that then you could make the language model try to figure out do I have to continue this",
    "start": "1095039",
    "end": "1100320"
  },
  {
    "text": "loop do I pick the next tool or maybe I'm ready to answer the question that was a basic basic enentic pattern but",
    "start": "1100320",
    "end": "1107280"
  },
  {
    "text": "when you start thinking about this pattern this is a basic workflow right this is a set of sequential or just",
    "start": "1107280",
    "end": "1114320"
  },
  {
    "text": "multiple steps that you can run one after the other one trying to get the output of the first one the second one",
    "start": "1114320",
    "end": "1120960"
  },
  {
    "text": "third one so on and then at the end you create this loop where the language",
    "start": "1120960",
    "end": "1126480"
  },
  {
    "text": "model is the one that is going to reason and once again it can continue the loop or it can stop the loop so this is",
    "start": "1126480",
    "end": "1132880"
  },
  {
    "text": "something that in my opinion in the community we in my opinion we were not thinking about this just as a workflow",
    "start": "1132880",
    "end": "1139520"
  },
  {
    "text": "that we can simply define how we going to execute all of this now this took us to multiple different agentic patterns",
    "start": "1139520",
    "end": "1146799"
  },
  {
    "text": "where you can have your basic loop where you execute something you can critique that uh input and then you can just go",
    "start": "1146799",
    "end": "1154080"
  },
  {
    "text": "back until you feel comfortable or maybe you say I want you to critique this uh output like 10 times right you can also",
    "start": "1154080",
    "end": "1161360"
  },
  {
    "text": "add planning so you can add an step where you want to make sure that you define initial steps and then go through",
    "start": "1161360",
    "end": "1166559"
  },
  {
    "text": "the whole loop again the most known of course uh at the bottom left is the tool calling tool calling means that I just",
    "start": "1166559",
    "end": "1173679"
  },
  {
    "text": "want to know what tool is the best tool to choose to execute for each iteration",
    "start": "1173679",
    "end": "1179360"
  },
  {
    "text": "and that could be combined with the critique it can be combined with the planning before you start that flow or",
    "start": "1179360",
    "end": "1185600"
  },
  {
    "text": "agentic pattern and then at the end the one that is super interesting is can you have all of these agentic patterns as",
    "start": "1185600",
    "end": "1191679"
  },
  {
    "text": "let's say microservices and then have all of them communicate where you can define the tools for each service you",
    "start": "1191679",
    "end": "1198320"
  },
  {
    "text": "could say you're going to be for example as a security researcher you're going to be the threat intelligence analyst",
    "start": "1198320",
    "end": "1204240"
  },
  {
    "text": "you're going to be the reverse engineer the incident responder the security analyst you can provide multiple tools",
    "start": "1204240",
    "end": "1209280"
  },
  {
    "text": "and you can have them all communicate uh right with each other of course when you start thinking about these patterns once",
    "start": "1209280",
    "end": "1215120"
  },
  {
    "text": "again this is what we all see in the community but you can use the fundamentals task chaining fan out fan",
    "start": "1215120",
    "end": "1221120"
  },
  {
    "text": "in all the way to monitor right you can mix them up and you're going to start building your own agentic patterns that",
    "start": "1221120",
    "end": "1228000"
  },
  {
    "text": "of course caught my attention and when I found out about Dapper workflows and all these different patterns I was like this",
    "start": "1228000",
    "end": "1233440"
  },
  {
    "text": "is the tool that I need to use to start building my own agentic you know workflow um you know engine right and of",
    "start": "1233440",
    "end": "1239679"
  },
  {
    "text": "course Dapper workflow has the durable task uh you know concept which you know which you know Yon already explained a",
    "start": "1239679",
    "end": "1246000"
  },
  {
    "text": "little bit so it was very interesting to try to define my workflows or my agentic patterns in a easy you know programming",
    "start": "1246000",
    "end": "1253760"
  },
  {
    "text": "friendly type of mode as if I was writing just you know a Python script and try to figure out how all of these",
    "start": "1253760",
    "end": "1260480"
  },
  {
    "text": "tasks or activities were connected right so when you start thinking about dapper workflows right um for those that have",
    "start": "1260480",
    "end": "1267760"
  },
  {
    "text": "used dapper workflows on the left you can see what it would look like if you just want to directly use the concept of",
    "start": "1267760",
    "end": "1273520"
  },
  {
    "text": "a workflow the concept of an activity and then define maybe a client to",
    "start": "1273520",
    "end": "1278720"
  },
  {
    "text": "interact with you know these providers for language models in the concept of",
    "start": "1278720",
    "end": "1284320"
  },
  {
    "text": "Dapper agents uh we come up with a concept of a task and a task is a wrapper um around the activity where you",
    "start": "1284320",
    "end": "1291520"
  },
  {
    "text": "can define I want to run this task with this you know LLM provider or this specific language model and if you can",
    "start": "1291520",
    "end": "1299120"
  },
  {
    "text": "use the concept of a you know Python function right using dock strings using a decorator so it is easy to say I want",
    "start": "1299120",
    "end": "1306640"
  },
  {
    "text": "to run this task the description of the task is going to be this and then Dapper agents will take it as a oh this is",
    "start": "1306640",
    "end": "1313120"
  },
  {
    "text": "going be an LLM based task let's take the description of the task as a prompt and let's execute it with an LLM that's",
    "start": "1313120",
    "end": "1319840"
  },
  {
    "text": "the the fundamentals of trying to use these concepts create this abstraction",
    "start": "1319840",
    "end": "1325679"
  },
  {
    "text": "layer where you can define LLM based uh tasks now of course the beauty of this",
    "start": "1325679",
    "end": "1330799"
  },
  {
    "text": "is that every single agent that you build right is connected to multiple components that if you run for example",
    "start": "1330799",
    "end": "1336320"
  },
  {
    "text": "this locally you already have access to multiple things that you can use through right testing such as you know zipkin",
    "start": "1336320",
    "end": "1343200"
  },
  {
    "text": "you know reddis to uh you kind of keep the state of the agent all the way to of",
    "start": "1343200",
    "end": "1348400"
  },
  {
    "text": "course the whole ecosystem of dapper which was something that to me I don't have to you know rewrite once again I",
    "start": "1348400",
    "end": "1354240"
  },
  {
    "text": "love to reinvent the wheel to learn but my main learning thing was I want to",
    "start": "1354240",
    "end": "1359440"
  },
  {
    "text": "learn how agents work not so much how to build all the architecture and all the services that and all these standard",
    "start": "1359440",
    "end": "1365760"
  },
  {
    "text": "APIs that I could use to communicate with multiple things right so that was kind of like the thought process of",
    "start": "1365760",
    "end": "1371679"
  },
  {
    "text": "course just having durable tasks is not enough we want these systems to communicate right because we want to",
    "start": "1371679",
    "end": "1378400"
  },
  {
    "text": "make sure that each one has its own personality its own role its own tools its own goals for example and for that",
    "start": "1378400",
    "end": "1384640"
  },
  {
    "text": "we use the right popsup APIs there's a lot of conversations on on creating even",
    "start": "1384640",
    "end": "1390400"
  },
  {
    "text": "a standards into how to how to make these agents to communicate well there is cloud events already which is an",
    "start": "1390400",
    "end": "1396880"
  },
  {
    "text": "standard that we could use and it's pretty good at tracking more metadata than the things sometimes that I see",
    "start": "1396880",
    "end": "1403360"
  },
  {
    "text": "multiple frameworks trying to track when they communicate so this is just an example how we can have agents simply",
    "start": "1403360",
    "end": "1409120"
  },
  {
    "text": "using that API and try to exchange you know messages the other concept of course which was amazing right is that I",
    "start": "1409120",
    "end": "1416400"
  },
  {
    "text": "don't want to think about on building multiple clients and modules to interact with multiple architectures out there so",
    "start": "1416400",
    "end": "1422960"
  },
  {
    "text": "trying to make it agnostic to all of this was amazing right because there is multiple components that you need as",
    "start": "1422960",
    "end": "1430000"
  },
  {
    "text": "core components of an agent that it would be great just to swap right if I'm working in different environments so the",
    "start": "1430000",
    "end": "1436159"
  },
  {
    "text": "previous example think about this that I don't have to change the logic of how they communicate i can simply swap the",
    "start": "1436159",
    "end": "1442000"
  },
  {
    "text": "main component in this case if I like to use radius great if somebody else wants to use other components in here that's",
    "start": "1442000",
    "end": "1448799"
  },
  {
    "text": "also possible just by swapping the right components and then at the end we try to",
    "start": "1448799",
    "end": "1453919"
  },
  {
    "text": "mix other concepts of Dapper in this case every single agent must have its own state and the way how it works this",
    "start": "1453919",
    "end": "1461120"
  },
  {
    "text": "is very basic example is that when you interact with multiple agents one approach is to say I want everyone to",
    "start": "1461120",
    "end": "1469360"
  },
  {
    "text": "know what's happening at the same time everyone so if the one on the left the",
    "start": "1469360",
    "end": "1474640"
  },
  {
    "text": "green one is the orchestrator the orchestrator will send a plan to everybody it's going to send messages to",
    "start": "1474640",
    "end": "1480400"
  },
  {
    "text": "everybody and then the orchestrator could say \"Now you go next.\" So he can point to a specific agent and now the",
    "start": "1480400",
    "end": "1487039"
  },
  {
    "text": "agent has all the previous messages the history of of like what's going on and every time the agent stops right",
    "start": "1487039",
    "end": "1494000"
  },
  {
    "text": "finishes the the execution of the task it can broadcast that message so everybody is aware of of what's going on",
    "start": "1494000",
    "end": "1500960"
  },
  {
    "text": "so trying to keep uh the the communication through popsup and also use the state APIs super powerful to",
    "start": "1500960",
    "end": "1508240"
  },
  {
    "text": "start building all these agentic systems and let's um go to the demo which I",
    "start": "1508240",
    "end": "1513679"
  },
  {
    "text": "guess first the the demo is going to be we're going to use this basic agentic pattern which is uh or yeah let's say",
    "start": "1513679",
    "end": "1520960"
  },
  {
    "text": "the whole pattern which is the concept of an orchestrator and then assistance",
    "start": "1520960",
    "end": "1526000"
  },
  {
    "text": "okay so how does that work uh the orchestrator is going to get the main task it's going to generate a plan it's",
    "start": "1526000",
    "end": "1533760"
  },
  {
    "text": "going to send a plan it's going to then trigger agents and agents are going to send a response back to the orchestrator",
    "start": "1533760",
    "end": "1540240"
  },
  {
    "text": "and that will be broadcasted to everybody else the orchestrator is going to figure out if we can pick another",
    "start": "1540240",
    "end": "1546480"
  },
  {
    "text": "agent to execute the next step or maybe we're good to go and we just respond",
    "start": "1546480",
    "end": "1551679"
  },
  {
    "text": "back to the user right i want you to think about this as a workflow for each micros service each",
    "start": "1551679",
    "end": "1558880"
  },
  {
    "text": "component of this whole ecosystem the orchestrator is going to take the task as I mentioned before and you can take",
    "start": "1558880",
    "end": "1565679"
  },
  {
    "text": "the purple um let's say rectangles um as the tasks right and then you can see",
    "start": "1565679",
    "end": "1571919"
  },
  {
    "text": "that once it gets to the checking the progress it's going to decide the model",
    "start": "1571919",
    "end": "1579360"
  },
  {
    "text": "behind the orchestrator it's going to say based on the input based on the current man uh messages in my state I",
    "start": "1579360",
    "end": "1587279"
  },
  {
    "text": "can continue so we use the continue as new API I which is part of the monitoring right pattern from from",
    "start": "1587279",
    "end": "1593679"
  },
  {
    "text": "Dapper workflows or we can simply stop and then talk to the user very simple",
    "start": "1593679",
    "end": "1598799"
  },
  {
    "text": "pattern that where we are using multiple um you know Dapper workflow patterns as",
    "start": "1598799",
    "end": "1604320"
  },
  {
    "text": "well this one is the assistant all the assistant is doing is getting a message",
    "start": "1604320",
    "end": "1609360"
  },
  {
    "text": "from someone in this case the orchestrator it's going to take the message look at the state of what's",
    "start": "1609360",
    "end": "1615200"
  },
  {
    "text": "going on it's going to execute a task and this assistant can suggest a tool to",
    "start": "1615200",
    "end": "1622400"
  },
  {
    "text": "execute or it can simply respond back to the whoever sent the task if it is about",
    "start": "1622400",
    "end": "1629279"
  },
  {
    "text": "to suggest tools to execute it's going to execute them either in parallel using",
    "start": "1629279",
    "end": "1635120"
  },
  {
    "text": "the Dapper workflow fan out fan in parents right or it can execute one tool at a time depending on how the model",
    "start": "1635120",
    "end": "1641440"
  },
  {
    "text": "decides to do it and this is the whole flow back and forth into how this model",
    "start": "1641440",
    "end": "1646799"
  },
  {
    "text": "this uh agent is is using the Dapper workflow tasks um and also some APIs",
    "start": "1646799",
    "end": "1652400"
  },
  {
    "text": "like the continue as new how do you define an orchestrator that's on the left very simple we",
    "start": "1652400",
    "end": "1658799"
  },
  {
    "text": "already have some you know built-in classes that you can just define an orchestrator provide the attributes the",
    "start": "1658799",
    "end": "1664320"
  },
  {
    "text": "name how it communicates with the state uh stores and then you can expose it as a service for example so that you can",
    "start": "1664320",
    "end": "1670880"
  },
  {
    "text": "have someone sending a request to an HTTP endpoint and that's how you would trigger the orchestrator and the concept",
    "start": "1670880",
    "end": "1677679"
  },
  {
    "text": "of an assistant we also have the assistant class where you can define the name the goal the role instructions",
    "start": "1677679",
    "end": "1684640"
  },
  {
    "text": "tools etc and we pack all of these workflow those into these classes so",
    "start": "1684640",
    "end": "1689679"
  },
  {
    "text": "it's easy to to allow you to describe all of this in a type of microser way",
    "start": "1689679",
    "end": "1695760"
  },
  {
    "text": "and then of course we use concepts such as uh running multiple apps at the same time so you can see how we have every",
    "start": "1695760",
    "end": "1703039"
  },
  {
    "text": "single uh assistant right pointing to its own Python script with their own",
    "start": "1703039",
    "end": "1708559"
  },
  {
    "text": "assistant classes and at the end we have our also workflow orchestrator which is going to run the other workflow that has",
    "start": "1708559",
    "end": "1715840"
  },
  {
    "text": "the the decision of who speaks next and try to send the plan etc so let's um run",
    "start": "1715840",
    "end": "1723520"
  },
  {
    "text": "this real quick the way how this works is um so let me just make sure I have",
    "start": "1723520",
    "end": "1730159"
  },
  {
    "text": "this Uh hopefully you can you can see it but if you go to the GitHub repo there is a",
    "start": "1730159",
    "end": "1736559"
  },
  {
    "text": "quick starts and there is the Dapper YAML files let me just make sure this one is easy to read maybe I'll do this",
    "start": "1736559",
    "end": "1744320"
  },
  {
    "text": "as I mentioned before you can just explore every single application that it's in the folders and if we go for",
    "start": "1744320",
    "end": "1751279"
  },
  {
    "text": "example to the Dapper Workflow LLM this one we can even change the uh the max",
    "start": "1751279",
    "end": "1757919"
  },
  {
    "text": "iterations you could say I want this to run for 10 iterations and then we are",
    "start": "1757919",
    "end": "1763039"
  },
  {
    "text": "ready to execute this but before that uh you could actually use the you know built-in um you know docker containers I",
    "start": "1763039",
    "end": "1770960"
  },
  {
    "text": "guess when you deploy it locally where are going to keep track of your state and they're also going to you know we",
    "start": "1770960",
    "end": "1776799"
  },
  {
    "text": "can see how all of these tasks are being executed so let's run this so we go to",
    "start": "1776799",
    "end": "1782080"
  },
  {
    "text": "the folder where this exists we're going to do dapper run f and we're going to",
    "start": "1782080",
    "end": "1788000"
  },
  {
    "text": "run the dapper llm yaml we're going to run this um and then we're going to make",
    "start": "1788000",
    "end": "1794240"
  },
  {
    "text": "this one a little bigger so you know this one uh this one right here is trying to to uh as you can see listening",
    "start": "1794240",
    "end": "1802799"
  },
  {
    "text": "to the client there is a client that we define in order to automatically trigger an event in this case the event was",
    "start": "1802799",
    "end": "1810320"
  },
  {
    "text": "let's take the ring to Mordor i'm a you know big fan of Lord of the Rings so all the microservices were our characters",
    "start": "1810320",
    "end": "1817520"
  },
  {
    "text": "like Gandalf as a wizard agent the hobbit Froto uh and the orchestrator is just trying to figure out how to",
    "start": "1817520",
    "end": "1824399"
  },
  {
    "text": "communicate with all of them if we go to the and and get the best plan for how to",
    "start": "1824399",
    "end": "1829679"
  },
  {
    "text": "run and or take the ring to Mordor um but we're all smarter than the LM and",
    "start": "1829679",
    "end": "1834720"
  },
  {
    "text": "the agent because what's the easiest way to take the ring to Mordor the eagle the eagle yes thank you all right exactly",
    "start": "1834720",
    "end": "1840480"
  },
  {
    "text": "the LM is not going to tell us that so one thing that you can do uh let's make sure I have this in here so one thing",
    "start": "1840480",
    "end": "1846720"
  },
  {
    "text": "that you can see automatically we're using this state to first trying to keep track of what were the agents that",
    "start": "1846720",
    "end": "1852480"
  },
  {
    "text": "actually are part of this whole ecosystem that way everyone tracks of like who is available to actually speak",
    "start": "1852480",
    "end": "1859440"
  },
  {
    "text": "we can see if we go back uh here we can have uh the concept of a beacon channel which the beacon channel pretty much",
    "start": "1859440",
    "end": "1865760"
  },
  {
    "text": "what it does uh let me make sure I uh zoom in here a little bit uh so the the",
    "start": "1865760",
    "end": "1871440"
  },
  {
    "text": "beacon channel pretty much is saying everyone who is connected to this uh",
    "start": "1871440",
    "end": "1877159"
  },
  {
    "text": "specific um let me just make sure this is bigger to this specific topic so you can see all the microservices are",
    "start": "1877159",
    "end": "1883919"
  },
  {
    "text": "connected to it so they're just waiting if anybody broadcasts anything I'm going to act on it right and all of these",
    "start": "1883919",
    "end": "1889120"
  },
  {
    "text": "classes are listening on all of these uh you know topics right now as this is",
    "start": "1889120",
    "end": "1894240"
  },
  {
    "text": "executing right it's kind of going through the whole loop one by one we can uh probably talk a little bit about this",
    "start": "1894240",
    "end": "1900640"
  },
  {
    "text": "where you can see that there is broadcast messages being validated etc but one way to look at this is Dapper",
    "start": "1900640",
    "end": "1908080"
  },
  {
    "text": "agents provides a file that is going to be created for every single application",
    "start": "1908080",
    "end": "1913519"
  },
  {
    "text": "that is being part of this whole agentic system and we're going to keep track of like what's going on and this is all",
    "start": "1913519",
    "end": "1919600"
  },
  {
    "text": "structure output and this is actually was created by the model so let me just go straight to the first part this is a",
    "start": "1919600",
    "end": "1926480"
  },
  {
    "text": "concept of a plan for example let me just make this a little bit bigger so you can see it there is a concept of a",
    "start": "1926480",
    "end": "1932640"
  },
  {
    "text": "plan uh where is the plan right here where it's saying uh step number one we need to assemble and prepare all the",
    "start": "1932640",
    "end": "1939279"
  },
  {
    "text": "necessary supplies it the model itself says we need to have substeps we need to make sure that we are provide more um uh",
    "start": "1939279",
    "end": "1947600"
  },
  {
    "text": "information into what needs to happen and then this plan is being iterated over and over being passed across all",
    "start": "1947600",
    "end": "1954240"
  },
  {
    "text": "the agents and as you can see it's also some of them are completed already so what does that mean every time we check",
    "start": "1954240",
    "end": "1960960"
  },
  {
    "text": "progress we assess the current state of everyone we assess the plan and the",
    "start": "1960960",
    "end": "1966000"
  },
  {
    "text": "question and we start making the model to produce updates to the whole plan and",
    "start": "1966000",
    "end": "1971840"
  },
  {
    "text": "that's so we can say we're completed we're still in progress we need to probably give it to another agent and",
    "start": "1971840",
    "end": "1977679"
  },
  {
    "text": "then as you can see at the bottom if we scroll more down we can see the task history and in this case what that means",
    "start": "1977679",
    "end": "1983440"
  },
  {
    "text": "is every single agent like Gandalf Legololis Gandalf again um all of them",
    "start": "1983440",
    "end": "1989279"
  },
  {
    "text": "are tied to the tasks so the model itself is a language model is reading",
    "start": "1989279",
    "end": "1994799"
  },
  {
    "text": "the output of all the services it's going through the whole iteration process and it's trying to to to figure",
    "start": "1994799",
    "end": "2001200"
  },
  {
    "text": "out like who did it right uh who actually was assigned the task and you can see that it's going step by step and",
    "start": "2001200",
    "end": "2008159"
  },
  {
    "text": "this file is being updated in real time one thing that is pretty interesting is that some tasks this is was actually an",
    "start": "2008159",
    "end": "2015880"
  },
  {
    "text": "interesting result where the unpredictable you know happens for",
    "start": "2015880",
    "end": "2022159"
  },
  {
    "text": "example some tasks were being completed subtasks without the the actual agent",
    "start": "2022159",
    "end": "2028000"
  },
  {
    "text": "completing it and that's because the model was assessing that based on what",
    "start": "2028000",
    "end": "2033519"
  },
  {
    "text": "these other agents did these other tasks are already completed so we have a",
    "start": "2033519",
    "end": "2038720"
  },
  {
    "text": "prompt that says you need to validate if whatever information you have in the current state is going to support other",
    "start": "2038720",
    "end": "2044640"
  },
  {
    "text": "operation and all of that is happening autonomously right and then this one I would assume it just finished because my",
    "start": "2044640",
    "end": "2050560"
  },
  {
    "text": "output was NA before but this was updated in real time and this kind of tell you exactly um you know what",
    "start": "2050560",
    "end": "2057200"
  },
  {
    "text": "happened at the end producing an structure report um and all of this is possible by having all of these systems",
    "start": "2057200",
    "end": "2063839"
  },
  {
    "text": "communicating with each other keeping the plan the state across all of them using in this case a reddis local docker",
    "start": "2063839",
    "end": "2070960"
  },
  {
    "text": "container and then you can have this output that then you can probably use it to validate how good this agent is at a",
    "start": "2070960",
    "end": "2077760"
  },
  {
    "text": "specific task or not which is what we do in security we're trying to validate how close the report was to what a security",
    "start": "2077760",
    "end": "2084638"
  },
  {
    "text": "analyst would do for example when they investigate an alert right so having this structure output allows us to then",
    "start": "2084639",
    "end": "2090720"
  },
  {
    "text": "take this and see how efficient it was or not and that was it",
    "start": "2090720",
    "end": "2095919"
  },
  {
    "text": "so this is the end of our maintainer track please try out Dapper agents join the Dapper Discord um talk to us and",
    "start": "2095919",
    "end": "2103200"
  },
  {
    "text": "we're happy to talk about whatever um Dapper use cases you think you might have or yeah just anything else so thank",
    "start": "2103200",
    "end": "2110560"
  },
  {
    "text": "you so much for coming here thank you for your time thank you thank you",
    "start": "2110560",
    "end": "2116440"
  },
  {
    "text": "okay you have questions no questions and we're here for questions we we will",
    "start": "2120079",
    "end": "2125119"
  },
  {
    "text": "remain here",
    "start": "2125119",
    "end": "2128359"
  },
  {
    "text": "huh like this i think they have a mic in there yeah question i think it's for the",
    "start": "2136000",
    "end": "2142079"
  },
  {
    "text": "recording",
    "start": "2142079",
    "end": "2145079"
  },
  {
    "text": "one two three there you go yep okay um thanks for great talk uh really good to to see how um AIS or agents are tackled",
    "start": "2155040",
    "end": "2164480"
  },
  {
    "text": "from sort of a microservices perspective instead that's great uh I'm Morton Forfang from a consultancy at Norway um",
    "start": "2164480",
    "end": "2172160"
  },
  {
    "text": "anyway I was just wondering you know if the the upper part takes care of the",
    "start": "2172160",
    "end": "2179359"
  },
  {
    "text": "planning that you know I'm the orchestrator and you guys get all everybody gets the plan right but these",
    "start": "2179359",
    "end": "2184880"
  },
  {
    "text": "are agents so one of them might come up raise their hand and say \"I got a better",
    "start": "2184880",
    "end": "2190720"
  },
  {
    "text": "bet better plan you know we should stay in Riendell we shouldn't actually go to mortar.\" Um how does the",
    "start": "2190720",
    "end": "2197480"
  },
  {
    "text": "approach possibly accommodate a more kind of a dynamic the the plan has",
    "start": "2197480",
    "end": "2203520"
  },
  {
    "text": "changed kind of scenario that was my question yeah it's going to be an iterative loop yeah exactly so we keep the same concept of an iterative loop in",
    "start": "2203520",
    "end": "2210960"
  },
  {
    "text": "this pattern that we show we have the orchestrator with the language model deciding what to do next what not to do",
    "start": "2210960",
    "end": "2217200"
  },
  {
    "text": "next what updates actually need to happen so there is already the orchestrator trying to figure out what's",
    "start": "2217200",
    "end": "2222960"
  },
  {
    "text": "the best path based on the current um state and the current tasks that are being completed so that that's kind of",
    "start": "2222960",
    "end": "2229520"
  },
  {
    "text": "being taken care of already but I also like your your question when it comes to what if an agent just decides to update",
    "start": "2229520",
    "end": "2236720"
  },
  {
    "text": "it right that's possible and that's a pattern that we're working on which is the swarm uh pattern where all the the",
    "start": "2236720",
    "end": "2244000"
  },
  {
    "text": "agents themselves based on their own tools their own goals their own roles they could actually propose even changes",
    "start": "2244000",
    "end": "2250480"
  },
  {
    "text": "to like what's going on across the whole ecosystem so there is different patterns same concept you just move the reasoning",
    "start": "2250480",
    "end": "2257280"
  },
  {
    "text": "of what's next to the agents versus having an orchestrator like a manager",
    "start": "2257280",
    "end": "2262320"
  },
  {
    "text": "trying to send the tasks to everybody and there is of course um you know",
    "start": "2262320",
    "end": "2268000"
  },
  {
    "text": "papers that talk about which one might be more efficient to specific uh you know use cases right so I think it",
    "start": "2268000",
    "end": "2274079"
  },
  {
    "text": "depends on what you're trying to do uh for us trying to have one orchestrator",
    "start": "2274079",
    "end": "2280240"
  },
  {
    "text": "with a reasoning model those that are like for example like 01 03 in in u you",
    "start": "2280240",
    "end": "2285920"
  },
  {
    "text": "know openai for example uh or deepseek right like you reasoning models are great as orchestrators because they can",
    "start": "2285920",
    "end": "2292560"
  },
  {
    "text": "reason a little bit more than maybe you just want your agents to be the typical give me some input i'll decide what what",
    "start": "2292560",
    "end": "2298720"
  },
  {
    "text": "to run execute it and I'll send you back the result that's probably more efficient if you have hundreds of those",
    "start": "2298720",
    "end": "2304720"
  },
  {
    "text": "trying to do things and the orchestrator will be the one you know sharing things but good question you can still you know",
    "start": "2304720",
    "end": "2310400"
  },
  {
    "text": "push the reasoning to each uh you know agent yeah",
    "start": "2310400",
    "end": "2315680"
  },
  {
    "text": "any more questions any more questions we have the mic in here okay we have the mic",
    "start": "2315680",
    "end": "2322880"
  },
  {
    "text": "uh no questions all right",
    "start": "2323160",
    "end": "2328320"
  },
  {
    "text": "all right cool well thank you thank you very much again appreciate it [Applause]",
    "start": "2328320",
    "end": "2335400"
  }
]