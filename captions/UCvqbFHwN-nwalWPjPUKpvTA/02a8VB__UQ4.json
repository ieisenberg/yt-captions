[
  {
    "text": "i guess we are ready to start hola bueno almondo hello everyone",
    "start": "11040",
    "end": "17920"
  },
  {
    "text": "my name is pavel and um i'm here to talk to you about high",
    "start": "17920",
    "end": "23199"
  },
  {
    "text": "availability and high reliability in a distributed",
    "start": "23199",
    "end": "28320"
  },
  {
    "text": "cloud native infrastructure and i believe that everybody in this",
    "start": "28320",
    "end": "35360"
  },
  {
    "text": "room at one point or another has had problems with cloud outages these things happen",
    "start": "35360",
    "end": "41600"
  },
  {
    "text": "they're inevitable it is really difficult to avoid them",
    "start": "41600",
    "end": "47600"
  },
  {
    "text": "and no cloud provider can guarantee 100 uptime just because there are so many things",
    "start": "47600",
    "end": "53920"
  },
  {
    "text": "that even the best teams can't avoid because they don't depend on themselves",
    "start": "53920",
    "end": "59520"
  },
  {
    "text": "there are external factors like upstream provider internet connection issues",
    "start": "59520",
    "end": "65920"
  },
  {
    "text": "there is the human factor and sometimes we can make mistakes in our deployments or code that we deploy there are natural",
    "start": "65920",
    "end": "72400"
  },
  {
    "text": "disasters that can take regions down or cause major trouble for all kinds of",
    "start": "72400",
    "end": "78159"
  },
  {
    "text": "services around the globe and it is prohibitively expensive no matter what",
    "start": "78159",
    "end": "83200"
  },
  {
    "text": "type of business you are to deploy your applications everywhere around the world",
    "start": "83200",
    "end": "88320"
  },
  {
    "text": "at the same time so it is not a question of",
    "start": "88320",
    "end": "94000"
  },
  {
    "text": "if your servers will go down or services it is a question of when and",
    "start": "94000",
    "end": "99680"
  },
  {
    "text": "usually these things happen when you least expect it or you're not prepared for them and",
    "start": "99680",
    "end": "106399"
  },
  {
    "text": "somebody gets paged in your company and they have to figure out in probably in the middle of the night if they're",
    "start": "106880",
    "end": "112640"
  },
  {
    "text": "lucky during business hours how to solve a problem um and",
    "start": "112640",
    "end": "118159"
  },
  {
    "text": "even major things like your dns can go down and your team can make you know a mistake",
    "start": "118159",
    "end": "124880"
  },
  {
    "text": "that is difficult to roll back so",
    "start": "124880",
    "end": "130160"
  },
  {
    "text": "many of us usually deal with these things with disaster recovery and the vast majority of people fall in one of",
    "start": "131120",
    "end": "136959"
  },
  {
    "text": "these four categories when it comes to disaster recovery you either have some form of active active um deployment",
    "start": "136959",
    "end": "144720"
  },
  {
    "text": "which means you know if your primary server goes down you flip the switch in",
    "start": "144720",
    "end": "150160"
  },
  {
    "text": "your dns and your request go to the second one the which is active if you're in this",
    "start": "150160",
    "end": "156720"
  },
  {
    "text": "category probably or one of the lucky guys the other one is active passive it is similar to the previous one but it's",
    "start": "156720",
    "end": "162400"
  },
  {
    "text": "cheaper because you don't pay for the hosting for the passive instance or cluster or whatever it might be",
    "start": "162400",
    "end": "169040"
  },
  {
    "text": "and you have to spin up the passive instance then you flip the switch in",
    "start": "169040",
    "end": "174080"
  },
  {
    "text": "your dns and now you have happy users no more complaints in you know social media",
    "start": "174080",
    "end": "179519"
  },
  {
    "text": "that your services are down or maybe your customers aren't happy another option is",
    "start": "179519",
    "end": "185040"
  },
  {
    "text": "again to have a periodic backups of your databases and then when things go down",
    "start": "185040",
    "end": "190640"
  },
  {
    "text": "you spin up your code somewhere you restore the backups and then you continue serving as normal and the",
    "start": "190640",
    "end": "197040"
  },
  {
    "text": "final category is you don't have any disaster recovery whatsoever whatsoever because you're busy building features",
    "start": "197040",
    "end": "204080"
  },
  {
    "text": "and when things go down you'll figure it out and unfortunately there are way too many",
    "start": "204080",
    "end": "209200"
  },
  {
    "text": "people in that category uh even people who used to be in the active active one",
    "start": "209200",
    "end": "215519"
  },
  {
    "text": "they tend to fall down the the category list because",
    "start": "215760",
    "end": "221200"
  },
  {
    "text": "it requires extremely high discipline and and human factor the",
    "start": "221200",
    "end": "226640"
  },
  {
    "text": "reason i've titled this slide like this is because your entire team needs to be",
    "start": "226640",
    "end": "232640"
  },
  {
    "text": "responsible about what will happen in case of a disaster",
    "start": "232640",
    "end": "238319"
  },
  {
    "text": "because disasters will happen disaster recovery",
    "start": "238319",
    "end": "243840"
  },
  {
    "text": "usually requires to be played you know you have some kind of run books or some kind of script something that you have",
    "start": "243840",
    "end": "249200"
  },
  {
    "text": "to execute in a case of a disaster or some system of yours that's the best case no people are involved some system",
    "start": "249200",
    "end": "255120"
  },
  {
    "text": "will execute it when some metrics you know hit",
    "start": "255120",
    "end": "260400"
  },
  {
    "text": "on reasonable low or high level whatever the metric might be",
    "start": "262079",
    "end": "267759"
  },
  {
    "text": "you still have to replay your disaster recovery plan over and over again because as you keep adding new features",
    "start": "267759",
    "end": "273199"
  },
  {
    "text": "and new components to your system your disaster recovery might change so it's not created once and be comfortable",
    "start": "273199",
    "end": "280560"
  },
  {
    "text": "forever you have to replay your disaster recovery plan maybe every month every quarter",
    "start": "280560",
    "end": "286720"
  },
  {
    "text": "or as often as you can not all the companies can afford to have",
    "start": "286720",
    "end": "292400"
  },
  {
    "text": "a dedicated sra team that costs money not everybody can you know",
    "start": "292400",
    "end": "298160"
  },
  {
    "text": "be like the big guys out there like big companies i won't mention names but you know they have huge sra teams not",
    "start": "298160",
    "end": "305120"
  },
  {
    "text": "especially startups you can't afford to have a huge sre or devops team that is only responsible",
    "start": "305120",
    "end": "310960"
  },
  {
    "text": "about this and does your disaster recovery require",
    "start": "310960",
    "end": "316720"
  },
  {
    "text": "manual intervention intervention even if you have you know",
    "start": "316720",
    "end": "321919"
  },
  {
    "text": "reasonably good disaster recovery plan oftentimes somebody has to wake up or",
    "start": "321919",
    "end": "328240"
  },
  {
    "text": "step in or open their laptop in the middle of a trip or whatever and",
    "start": "328240",
    "end": "333600"
  },
  {
    "text": "type in some magic in the terminal and things get restored if they get notified on",
    "start": "333600",
    "end": "339039"
  },
  {
    "text": "time or and so on and so on so there is a human factor oftentimes involved during an incident or disaster recovery",
    "start": "339039",
    "end": "347520"
  },
  {
    "text": "and it all boils down to these two terms rto and rpo",
    "start": "347919",
    "end": "353120"
  },
  {
    "text": "they are extremely important in solutions architecture world or even management meetings the rto",
    "start": "353120",
    "end": "360880"
  },
  {
    "text": "is recovery time objective and many times you have a talk with your service provider or you know some",
    "start": "360880",
    "end": "368240"
  },
  {
    "text": "some some form of cloud provider what is their rto like what is the recovery time",
    "start": "368240",
    "end": "373680"
  },
  {
    "text": "objective in case of a disaster how soon can you recover from the disaster guaranteed like there is nothing",
    "start": "373680",
    "end": "379360"
  },
  {
    "text": "guaranteed in this world but we have some goals they give you some soas and the rpo is how much data can you afford",
    "start": "379360",
    "end": "386479"
  },
  {
    "text": "to lose during an incident so if you talk to your",
    "start": "386479",
    "end": "392240"
  },
  {
    "text": "high management or your customers they will always want you know recovery time objective immediately actually they",
    "start": "392240",
    "end": "398400"
  },
  {
    "text": "don't want any downtime and recovery point objective in some industries",
    "start": "398400",
    "end": "403520"
  },
  {
    "text": "actually you're not allowed to lose data financial industry for example healthcare industry you're not allowed",
    "start": "403520",
    "end": "409440"
  },
  {
    "text": "to lose data that that could that could lead to serious compliance issues if you lose data in these industries and during",
    "start": "409440",
    "end": "416479"
  },
  {
    "text": "an incident you can't predict what will go down so these two terms",
    "start": "416479",
    "end": "422800"
  },
  {
    "text": "you can hear sre teams talking about these things over and over again",
    "start": "422800",
    "end": "429599"
  },
  {
    "text": "so what if there is a different approach to disaster recovery an approach that is self-healing",
    "start": "429680",
    "end": "435520"
  },
  {
    "text": "does not require any human intervention whatsoever",
    "start": "435520",
    "end": "441599"
  },
  {
    "text": "i repeat whatsoever no human intervention a an approach that",
    "start": "441599",
    "end": "446720"
  },
  {
    "text": "there is that doesn't involve any single point of failures and expect that anything could go down including",
    "start": "446720",
    "end": "453599"
  },
  {
    "text": "your dns servers the things that you rely on to switch to something else in case of a disaster",
    "start": "453599",
    "end": "461360"
  },
  {
    "text": "so i have my opinionated view that this type of problems can be solved with",
    "start": "461360",
    "end": "468319"
  },
  {
    "text": "bgp uh specifically any anycast ip addresses and",
    "start": "468319",
    "end": "473919"
  },
  {
    "text": "how many people in the room are familiar with bgp or any cast okay we have half the room that is super",
    "start": "473919",
    "end": "480400"
  },
  {
    "text": "cool um so for those that don't know what bgp is",
    "start": "480400",
    "end": "485680"
  },
  {
    "text": "i'll mention it very quickly the internet is like a network of networks",
    "start": "485680",
    "end": "492479"
  },
  {
    "text": "and bgp is excuse my drawing skills but bgp is like",
    "start": "492479",
    "end": "498479"
  },
  {
    "text": "um make sure that these networks which are called autonomous systems",
    "start": "498479",
    "end": "504080"
  },
  {
    "text": "each communicate between each other uh in the most efficient way so if there is",
    "start": "504080",
    "end": "509440"
  },
  {
    "text": "um one server that needs to reach another server bgp makes sure that these tcp packets from server a to its",
    "start": "509440",
    "end": "516800"
  },
  {
    "text": "destination find the most efficient route on the internet",
    "start": "516800",
    "end": "522800"
  },
  {
    "text": "that doesn't always mean the shortest path but in the vast majority of cases it's the shortest path",
    "start": "522800",
    "end": "529680"
  },
  {
    "text": "each of these dark dots on the map they are let's call them",
    "start": "529680",
    "end": "534880"
  },
  {
    "text": "um bgp actors they announced some ip range",
    "start": "534880",
    "end": "541600"
  },
  {
    "text": "and each of them tells to their their peer peers their neighbors hey this this ip",
    "start": "541600",
    "end": "548720"
  },
  {
    "text": "range lives in my autonomous system tell it to your peers and then each autonomous system propagates that",
    "start": "548720",
    "end": "555200"
  },
  {
    "text": "message to everyone else so when a server announces an ip address",
    "start": "555200",
    "end": "562399"
  },
  {
    "text": "bgp makes sure that in couple of seconds the whole internet knows where this ip range lives",
    "start": "562399",
    "end": "569839"
  },
  {
    "text": "then when there is a packet that needs to reach one ip from dust range",
    "start": "569839",
    "end": "574959"
  },
  {
    "text": "everybody in the world knows where to send that ip to and when it reaches this guy then it uses internal routing to",
    "start": "574959",
    "end": "581519"
  },
  {
    "text": "find the exact server with the exact ip address and send your packets there if that server exists",
    "start": "581519",
    "end": "588880"
  },
  {
    "text": "and it will be the shortest path this is important because um",
    "start": "589040",
    "end": "596160"
  },
  {
    "text": "it is what i'm going to be using in my demo and what is any cast ip that's another",
    "start": "596160",
    "end": "602880"
  },
  {
    "text": "thing that you need to understand there are different uh",
    "start": "602880",
    "end": "608720"
  },
  {
    "text": "tcp packets on the network there is unica unicast packets and these are one-to-one packets",
    "start": "608720",
    "end": "615680"
  },
  {
    "text": "you have one server that sends a message over the network and that message is",
    "start": "615680",
    "end": "620959"
  },
  {
    "text": "supposed to reach exactly one destination they are both somewhere on the internet",
    "start": "620959",
    "end": "626000"
  },
  {
    "text": "bgp will make sure that this packet will reach the destination server in the most most efficient way",
    "start": "626000",
    "end": "633120"
  },
  {
    "text": "there is also multicast multicast is",
    "start": "633120",
    "end": "638560"
  },
  {
    "text": "different in that again there is one source of the iep packet but there are multiple destinations think of it as a chat room",
    "start": "638560",
    "end": "645920"
  },
  {
    "text": "you type a message in the chat room you don't set send the same tcp packets to let's say",
    "start": "645920",
    "end": "652079"
  },
  {
    "text": "all of the hundreds of members of the chat room and when you send it these packets reach",
    "start": "652079",
    "end": "657360"
  },
  {
    "text": "all of the members and they get multiplexed that's multicast and anycast",
    "start": "657360",
    "end": "662720"
  },
  {
    "text": "which is what is what is the most interesting this is where the magic happens",
    "start": "662720",
    "end": "668160"
  },
  {
    "text": "any cast is one to nearest which in simple words mean there are",
    "start": "668160",
    "end": "674320"
  },
  {
    "text": "many servers around the world with the same ip address i will repeat",
    "start": "674320",
    "end": "681519"
  },
  {
    "text": "that because it's extremely important there are multiple servers online with the same public ip and your pockets",
    "start": "681519",
    "end": "689680"
  },
  {
    "text": "are guaranteed to find the nearest one this thing opens endless possibilities",
    "start": "689680",
    "end": "698160"
  },
  {
    "text": "the benefits of using bgp for failover over dns are",
    "start": "699360",
    "end": "704720"
  },
  {
    "text": "basically dns has ttl and apart from your dns can go down you know the server can",
    "start": "704720",
    "end": "710240"
  },
  {
    "text": "go down it has ttl and we've tried in production with dns servers that have extremely low",
    "start": "710240",
    "end": "716639"
  },
  {
    "text": "ttl but not all isp providers honor that they don't respect it we still have had",
    "start": "716639",
    "end": "722720"
  },
  {
    "text": "to wait like five and more minutes to recover from a disaster that doesn't depend on us we've set proper ttl we",
    "start": "722720",
    "end": "730720"
  },
  {
    "text": "tried to recover and it just doesn't happen because somewhere around the world there is somebody who didn't own our tto and the customers happen to be",
    "start": "730720",
    "end": "737600"
  },
  {
    "text": "just on the other side and there they say oh it's your fault",
    "start": "737600",
    "end": "743040"
  },
  {
    "text": "bgp convergence take seconds so you announce an ip address the whole world knows about it you stop announcing",
    "start": "743040",
    "end": "750079"
  },
  {
    "text": "it the whole world knows about it as simple as that",
    "start": "750079",
    "end": "754880"
  },
  {
    "text": "the downsides of bgp well you have to have your own ip range but the good thing is you buy it only once",
    "start": "755839",
    "end": "762240"
  },
  {
    "text": "and your cloud provider has to support bring your own ip address but most of them do majority the vast majority of cloud",
    "start": "762240",
    "end": "769360"
  },
  {
    "text": "providers support that and of course there is learning curve like if you don't have the expertise in your team",
    "start": "769360",
    "end": "775760"
  },
  {
    "text": "you have to invest a little bit in in you know getting your feet wet with that",
    "start": "775760",
    "end": "783440"
  },
  {
    "text": "and now i'm going to demo three kubernetes clusters in these three locations on the map",
    "start": "783440",
    "end": "790320"
  },
  {
    "text": "i have one cluster in in new york one cluster in amsterdam and",
    "start": "790320",
    "end": "795600"
  },
  {
    "text": "one closer in sydney and i'll try to send requests to them and they're supposed to reach the",
    "start": "795600",
    "end": "801040"
  },
  {
    "text": "nearest one then i'm going to kill the nearest one and our request should go to the other one which is closest",
    "start": "801040",
    "end": "808320"
  },
  {
    "text": "i've created single nose clusters because i'm lazy i've used k3s just to",
    "start": "808320",
    "end": "814560"
  },
  {
    "text": "deploy some bare metal instances i've created the kubernetes cluster there and let's show",
    "start": "814560",
    "end": "821600"
  },
  {
    "text": "that i've recorded my demos because actually i had to record it 11 times because i",
    "start": "821600",
    "end": "827279"
  },
  {
    "text": "wanted to show something and it happens only in certain circumstances so without further ado i'm gonna play the demo and",
    "start": "827279",
    "end": "833680"
  },
  {
    "text": "i will talk it over okay",
    "start": "833680",
    "end": "840160"
  },
  {
    "text": "i hope that you can see can everyone see it",
    "start": "840160",
    "end": "846560"
  },
  {
    "text": "okay what we are looking at is my yaml file of a simple deployment it is a simple golang application that has a",
    "start": "846560",
    "end": "853040"
  },
  {
    "text": "small graphql server and i've deployed that to all three kubernetes clusters it is exactly the same everywhere with one",
    "start": "853040",
    "end": "859279"
  },
  {
    "text": "little difference it has this environment variable which is location and i've created that just to know",
    "start": "859279",
    "end": "865279"
  },
  {
    "text": "where my responses are coming from okay i overwrite in my customization",
    "start": "865279",
    "end": "870959"
  },
  {
    "text": "yaml i override just the value of that variable everything else is the same in all my clusters",
    "start": "870959",
    "end": "877600"
  },
  {
    "text": "and this um simple demo will now show you i'm",
    "start": "877680",
    "end": "884079"
  },
  {
    "text": "accessing i'm intentionally not using a domain name i'm using ips to show you that i don't use dns okay",
    "start": "884079",
    "end": "890560"
  },
  {
    "text": "i'm now accessing my servers using the ip that was provided to me by the cloud provider okay and i see that this",
    "start": "890560",
    "end": "896480"
  },
  {
    "text": "response comes from new york then i access the next server and i see",
    "start": "896480",
    "end": "901680"
  },
  {
    "text": "that my response comes from sydney and then the next one and my response comes from amsterdam",
    "start": "901680",
    "end": "907360"
  },
  {
    "text": "now i'm going to ssh into all of these clusters",
    "start": "907360",
    "end": "912680"
  },
  {
    "text": "i will prove to you that they all have the same public type they actually have",
    "start": "913040",
    "end": "918959"
  },
  {
    "text": "two public ip addresses the one that was given to me and another one that i announced and i",
    "start": "918959",
    "end": "924399"
  },
  {
    "text": "added myself so i grabbed the response from ip address and i look for that particular ip",
    "start": "924399",
    "end": "930079"
  },
  {
    "text": "address and the rating on this directing on the screen shows you that all three of them",
    "start": "930079",
    "end": "935839"
  },
  {
    "text": "they have the same public ip address that's on any anycast ip address",
    "start": "935839",
    "end": "941519"
  },
  {
    "text": "so if i were to send a request to that ip address theoretically speaking it should reach the nearest server",
    "start": "941519",
    "end": "948399"
  },
  {
    "text": "and since we are in valencia voila i'm getting a response from amsterdam which is exactly what i expect to happen",
    "start": "948399",
    "end": "956480"
  },
  {
    "text": "this this is so powerful and it does not involve moving pieces this is how the internet works",
    "start": "957360",
    "end": "964079"
  },
  {
    "text": "so if i execute the same request from curl i get the same response i still get amsterdam so i'm gonna",
    "start": "964079",
    "end": "970160"
  },
  {
    "text": "start executing these requests every second and i'll take one of the clusters down",
    "start": "970160",
    "end": "976240"
  },
  {
    "text": "so while true every second send the request to my cluster my little application",
    "start": "976240",
    "end": "983199"
  },
  {
    "text": "and tell me where the responses are coming from and i start getting responses from amsterdam i'm using the",
    "start": "983199",
    "end": "989120"
  },
  {
    "text": "bird demon 2 to announce my ip range and i stopped announcing my ip range which",
    "start": "989120",
    "end": "995759"
  },
  {
    "text": "simulates your region going down and then you see a little uh error i",
    "start": "995759",
    "end": "1001680"
  },
  {
    "text": "want to commend this error because i recorded this demo 11 times to show there but you see that in less than a second i started getting responses from",
    "start": "1001680",
    "end": "1008320"
  },
  {
    "text": "new york i did not touch anything i didn't have to do anything i don't",
    "start": "1008320",
    "end": "1014639"
  },
  {
    "text": "even get paid if i don't want to right then i took down new york and i started",
    "start": "1014639",
    "end": "1020079"
  },
  {
    "text": "getting responses from sydney without touching anything my system is hundred percent uptime",
    "start": "1020079",
    "end": "1026319"
  },
  {
    "text": "and this is how the internet works i'm using the backbone of the internet bgp is the backbone of the internet i didn't",
    "start": "1026319",
    "end": "1032160"
  },
  {
    "text": "have to disaster disaster recovery bgp does it for me",
    "start": "1032160",
    "end": "1037918"
  },
  {
    "text": "and the reason i got this error this little error and the reason i recorded my demo",
    "start": "1037919",
    "end": "1042959"
  },
  {
    "text": "11 times is i wanted to show an error",
    "start": "1042959",
    "end": "1048240"
  },
  {
    "text": "it can happen during long lift connections the reason i got that error is that curl got to the server started",
    "start": "1048559",
    "end": "1055600"
  },
  {
    "text": "getting the response during that time it got some packets of the response but then",
    "start": "1055600",
    "end": "1061120"
  },
  {
    "text": "that region died and it couldn't get the rest so i get the error so if you have a",
    "start": "1061120",
    "end": "1066160"
  },
  {
    "text": "long-running connections with certain setup you have to just configure your client",
    "start": "1066160",
    "end": "1071200"
  },
  {
    "text": "tell your developers to just retry and reconnect so if you're using something like",
    "start": "1071200",
    "end": "1077039"
  },
  {
    "text": "grpc some some other uh long lift connections or database connections or some kind of",
    "start": "1077039",
    "end": "1083440"
  },
  {
    "text": "streaming you just have to reconnect and then continue as normal so that's why you can't guarantee hundred percent of",
    "start": "1083440",
    "end": "1089679"
  },
  {
    "text": "time but it's pretty close it took less than a second for the same continent is going to be milliseconds",
    "start": "1089679",
    "end": "1096240"
  },
  {
    "text": "and my system recovered like how cool is that",
    "start": "1096240",
    "end": "1102720"
  },
  {
    "text": "just remember that long-running connections have to be",
    "start": "1106000",
    "end": "1111840"
  },
  {
    "text": "reconnected that is important and you can't have a peace of mind oh this thing will save me in all",
    "start": "1111840",
    "end": "1117520"
  },
  {
    "text": "situations this has you know serious implications and you have to be prepared and you have to recommend reconnect and",
    "start": "1117520",
    "end": "1123679"
  },
  {
    "text": "your developers just need to know about this they don't need to be low level network experts they need to understand how this thing works",
    "start": "1123679",
    "end": "1132000"
  },
  {
    "text": "okay and now the elephant in the room the",
    "start": "1132320",
    "end": "1137760"
  },
  {
    "text": "question that i get after showing this to someone always always what about my",
    "start": "1137760",
    "end": "1142799"
  },
  {
    "text": "data like you just killed one region but",
    "start": "1142799",
    "end": "1148880"
  },
  {
    "text": "you promise low latencies but your latency is as low as the nearest data right if",
    "start": "1148880",
    "end": "1155520"
  },
  {
    "text": "you know you're adding and removing clusters on the map what do we do it with with data",
    "start": "1155520",
    "end": "1160720"
  },
  {
    "text": "especially data consistency and here i'm going to present my highly",
    "start": "1160720",
    "end": "1166320"
  },
  {
    "text": "opinionated view of this problem and",
    "start": "1166320",
    "end": "1172960"
  },
  {
    "text": "i believe that in the vast majority of cases especially micro service",
    "start": "1174960",
    "end": "1180400"
  },
  {
    "text": "deployment i'm a developer especially in microservices deployment the answer to the data consistency problem and latency",
    "start": "1180400",
    "end": "1187120"
  },
  {
    "text": "problem reliability problem and disaster recovery problem is eventual consistency",
    "start": "1187120",
    "end": "1193919"
  },
  {
    "text": "and there is this cup theorem diagram how many people in the room are familiar",
    "start": "1193919",
    "end": "1199679"
  },
  {
    "text": "with the cup theorem okay quite quite some people okay for the remaining half which are not",
    "start": "1199679",
    "end": "1206640"
  },
  {
    "text": "which didn't raise their hands every database or data store solution",
    "start": "1206640",
    "end": "1213039"
  },
  {
    "text": "that exists out there can have at most two of these three features",
    "start": "1213039",
    "end": "1218960"
  },
  {
    "text": "availability being always online partition tolerance meaning your",
    "start": "1218960",
    "end": "1224320"
  },
  {
    "text": "cl your nodes can go up and down at any time like in",
    "start": "1224320",
    "end": "1229360"
  },
  {
    "text": "in our team being an edge compute platform all clusters appear and disappear on the map at any time",
    "start": "1229360",
    "end": "1235280"
  },
  {
    "text": "and then the third one is consistency all your users see exactly the same data at",
    "start": "1235280",
    "end": "1240799"
  },
  {
    "text": "all time so you can't have all three of these and because my talk is about availability and reliability",
    "start": "1240799",
    "end": "1248159"
  },
  {
    "text": "i have only one option to choose eventual consistency that is not always",
    "start": "1248159",
    "end": "1254159"
  },
  {
    "text": "the case there are some applications that cannot ever sacrifice consistency like low latency financial trading for",
    "start": "1254159",
    "end": "1261440"
  },
  {
    "text": "example and there are other examples but the last the vast majority of",
    "start": "1261440",
    "end": "1267120"
  },
  {
    "text": "applications and services that i've been working with can tolerate eventual consistency and as",
    "start": "1267120",
    "end": "1274320"
  },
  {
    "text": "a matter of fact they do and you will be surprised how many services you use online are using",
    "start": "1274320",
    "end": "1280400"
  },
  {
    "text": "eventual consistency you can use a hosted db solution that",
    "start": "1280400",
    "end": "1286480"
  },
  {
    "text": "promises you know high availability but this is yet another moving part in your big picture right",
    "start": "1286480",
    "end": "1291679"
  },
  {
    "text": "and do they do they provide 100 guarantee chances are they will until you sign a contract um do they have",
    "start": "1291679",
    "end": "1298240"
  },
  {
    "text": "hundred percent consistency some of them do um how much do they cost and are they",
    "start": "1298240",
    "end": "1304320"
  },
  {
    "text": "yet another single point of failure in your system okay so",
    "start": "1304320",
    "end": "1309440"
  },
  {
    "text": "again i'll drop a grenade under the table in a lot of micro services deployments",
    "start": "1309440",
    "end": "1317520"
  },
  {
    "text": "i would say the half of the microservices that i've ever built in my life for the past 16 or 17 years do not",
    "start": "1317520",
    "end": "1324240"
  },
  {
    "text": "need a database i know that this is extremely bold statement and my highly opinionated view",
    "start": "1324240",
    "end": "1329840"
  },
  {
    "text": "but i'll explain further i fancy using event sourcing what is event",
    "start": "1329840",
    "end": "1335520"
  },
  {
    "text": "sourcing it is ideal for microservices because your microservice can",
    "start": "1335520",
    "end": "1341760"
  },
  {
    "text": "use first a cqrs pattern which is",
    "start": "1341760",
    "end": "1347039"
  },
  {
    "text": "you're you're producing events and somebody is consuming them but the producers do not need to know who is consuming them and",
    "start": "1347039",
    "end": "1353760"
  },
  {
    "text": "the consumers do not know where the event comes from came from and in a micro service world where technically speaking in order to",
    "start": "1353760",
    "end": "1360720"
  },
  {
    "text": "keep up with good practices you have to have at most one service using one database so every database has exactly",
    "start": "1360720",
    "end": "1366799"
  },
  {
    "text": "one owner if you need a report from multiple databases they're in trouble because you have to use you know data",
    "start": "1366799",
    "end": "1372799"
  },
  {
    "text": "from more than one database and how do you guarantee consistency well with eventually eventual",
    "start": "1372799",
    "end": "1378960"
  },
  {
    "text": "consistency if you're consuming events you will consume the events since since the",
    "start": "1378960",
    "end": "1384320"
  },
  {
    "text": "beginning of time and then you end up with the current state of the world",
    "start": "1384320",
    "end": "1389600"
  },
  {
    "text": "it requires a durable event store something like nuts jet stream my favorite or kafka whatever you fancy",
    "start": "1389600",
    "end": "1396159"
  },
  {
    "text": "there are other options as well one benefit with that is that your data",
    "start": "1396159",
    "end": "1401360"
  },
  {
    "text": "is immutable you never have a delete in your system like you keep appending data forever your",
    "start": "1401360",
    "end": "1407520"
  },
  {
    "text": "bugs and data and requests are repeatable you can replay the events since beginning of time",
    "start": "1407520",
    "end": "1413679"
  },
  {
    "text": "at any at any point in time and you reproduce the problem that you had and of course it results in eventual",
    "start": "1413679",
    "end": "1420240"
  },
  {
    "text": "consistency which fits exactly what i'm talking about how does it work",
    "start": "1420240",
    "end": "1426240"
  },
  {
    "text": "well imagine that you have let's say git you start working in a",
    "start": "1426240",
    "end": "1432799"
  },
  {
    "text": "company and this is your first day and you want to write some code but you have to download the project on your computer",
    "start": "1432799",
    "end": "1438880"
  },
  {
    "text": "so you get check out the project you consume the commit since beginning of time which is just events then git",
    "start": "1438880",
    "end": "1445039"
  },
  {
    "text": "builds the materialized view current state of the world current files on your file system you start editing them and",
    "start": "1445039",
    "end": "1451360"
  },
  {
    "text": "when you're done you start sending commits your colleagues start sending commits everybody's sending commits you",
    "start": "1451360",
    "end": "1456720"
  },
  {
    "text": "don't know where the commits came from you don't care who put them there but if you consume the commit since beginning of",
    "start": "1456720",
    "end": "1463200"
  },
  {
    "text": "time you will always get to the current state they're repeatable they're always there",
    "start": "1463200",
    "end": "1468480"
  },
  {
    "text": "um and provided that nobody in your team is doing force push um",
    "start": "1468480",
    "end": "1474000"
  },
  {
    "text": "and this is how event sourcing works in simple terms you have immutable event",
    "start": "1474000",
    "end": "1480720"
  },
  {
    "text": "log just they the events keep on that picture i keep a pending remote one on one end",
    "start": "1480720",
    "end": "1487440"
  },
  {
    "text": "and you know you can always replay them you do not have to replay all the events you only replay the significant events",
    "start": "1487440",
    "end": "1495120"
  },
  {
    "text": "you know imagine that events are things that happened okay",
    "start": "1495120",
    "end": "1501840"
  },
  {
    "text": "you're sitting in your office and somebody is doing something somebody turned on their computer somebody went",
    "start": "1501840",
    "end": "1506880"
  },
  {
    "text": "for coffee somebody is doing something you can ignore all these events there are events that happen but you don't care about them suddenly your boss",
    "start": "1506880",
    "end": "1513440"
  },
  {
    "text": "enters the office everybody's pretending that they're working that's a significant event so your app can only react to a significant event the events",
    "start": "1513440",
    "end": "1520799"
  },
  {
    "text": "that it cares about it can ignore all the rest which means that you can always consume the event since beginning of",
    "start": "1520799",
    "end": "1526559"
  },
  {
    "text": "time in seconds even if you have a lot of events it's",
    "start": "1526559",
    "end": "1531679"
  },
  {
    "text": "still possible to consume them pretty fast and then start responding to your requests",
    "start": "1531679",
    "end": "1537919"
  },
  {
    "text": "when does my pod become ready okay if i start my pod",
    "start": "1537919",
    "end": "1543279"
  },
  {
    "text": "and i start serving requests immediately we have a problem because i don't have the data yet",
    "start": "1543279",
    "end": "1549520"
  },
  {
    "text": "so what i do is i check the last event the one that is the last in the queue",
    "start": "1549520",
    "end": "1555600"
  },
  {
    "text": "my readiness probe is false i start consuming events since beginning of time when i reach that one event i",
    "start": "1555600",
    "end": "1561440"
  },
  {
    "text": "turn my readiness probe to true i start serving requests and then i continue consuming events from that point on as",
    "start": "1561440",
    "end": "1568159"
  },
  {
    "text": "normal i build my materialized view like my view of the world in a local variable",
    "start": "1568159",
    "end": "1574240"
  },
  {
    "text": "like in a map or whatever it might be you can even use like in memory full text search option so that you have",
    "start": "1574240",
    "end": "1581600"
  },
  {
    "text": "the response to every single query ready to serve you don't have to make database connections",
    "start": "1581600",
    "end": "1587279"
  },
  {
    "text": "and then if your pod dies it consumes events in the beginning of time just like git commits when you join a company or a project and then you continue from",
    "start": "1587279",
    "end": "1593760"
  },
  {
    "text": "there and here i have a",
    "start": "1593760",
    "end": "1599760"
  },
  {
    "text": "second demo this time i will try to show that same uh graphql application",
    "start": "1599760",
    "end": "1606720"
  },
  {
    "text": "which is deployed to those three clusters and i will create some",
    "start": "1606720",
    "end": "1612880"
  },
  {
    "text": "events some data crude operations i will queue again one of my clusters and see if there are any downtime for my",
    "start": "1612880",
    "end": "1619679"
  },
  {
    "text": "users okay",
    "start": "1619679",
    "end": "1626279"
  },
  {
    "text": "what we're looking at is i'm trying to hit my data in my new york cluster there",
    "start": "1629760",
    "end": "1635279"
  },
  {
    "text": "isn't anything there because it's a clean slate empty cluster empty application nothing there",
    "start": "1635279",
    "end": "1640559"
  },
  {
    "text": "no events and no articles this is an article application",
    "start": "1640559",
    "end": "1646159"
  },
  {
    "text": "and if i try the same thing from my anycast ip address again i'm hitting amsterdam because that it's the close it",
    "start": "1646159",
    "end": "1652399"
  },
  {
    "text": "is the closest location to to valencia i paste from my uh",
    "start": "1652399",
    "end": "1659760"
  },
  {
    "text": "clipboard some articles that i i want to insert and",
    "start": "1659760",
    "end": "1665039"
  },
  {
    "text": "that will generate some events for me um i will try to probably update some of them",
    "start": "1665039",
    "end": "1670480"
  },
  {
    "text": "delete some of them just to create some more events i want to create events that get propagated",
    "start": "1670480",
    "end": "1676320"
  },
  {
    "text": "nuts jet stream make sure that these events will get propagated to all the other clusters in",
    "start": "1676320",
    "end": "1682799"
  },
  {
    "text": "the nuts mesh i change my title",
    "start": "1682799",
    "end": "1688559"
  },
  {
    "text": "to something i change my body of my article and",
    "start": "1688559",
    "end": "1693919"
  },
  {
    "text": "generate some more events these things are eventually consistent because they don't",
    "start": "1693919",
    "end": "1699679"
  },
  {
    "text": "change everywhere at the exact same same time but within milliseconds or seconds",
    "start": "1699679",
    "end": "1706000"
  },
  {
    "text": "all my data will be the same everywhere i can even delete that article if i",
    "start": "1706000",
    "end": "1711760"
  },
  {
    "text": "wanted to i can change uh check what what i have currently i have like five five articles in my database and my",
    "start": "1711760",
    "end": "1718159"
  },
  {
    "text": "database is a variable a map simple map in my memory when i hit that request i",
    "start": "1718159",
    "end": "1725360"
  },
  {
    "text": "request the data in memory i don't have to make a database connections connection",
    "start": "1725360",
    "end": "1731440"
  },
  {
    "text": "let's delete some article again i send the request that request goes to nuts then it the event comes back i",
    "start": "1731440",
    "end": "1738399"
  },
  {
    "text": "consume the event and i change my map variable with with my articles and i'm left with only four articles now let's",
    "start": "1738399",
    "end": "1744799"
  },
  {
    "text": "kill this server okay uh let's queue i'm stopping i'm using bird the bgp",
    "start": "1744799",
    "end": "1750880"
  },
  {
    "text": "demon which is open source everything in this session is open source and iq my k3s server because um i kill",
    "start": "1750880",
    "end": "1758799"
  },
  {
    "text": "kubernetes just to simulate region going down and at this point we don't have a",
    "start": "1758799",
    "end": "1765520"
  },
  {
    "text": "ip announcement and we don't have the kubernetes cluster and now i'm accessing again anycast ip but my users are seeing",
    "start": "1765520",
    "end": "1773039"
  },
  {
    "text": "new york there was no downtime for my users and because browsers tend to retry until",
    "start": "1773039",
    "end": "1778720"
  },
  {
    "text": "they connect you actually will almost never have a downtime in your browser",
    "start": "1778720",
    "end": "1784480"
  },
  {
    "text": "and all the data that i created in my amsterdam cluster is now in my new york",
    "start": "1784480",
    "end": "1790559"
  },
  {
    "text": "cluster and in my sydney cluster and i didn't have to do anything about it that's how nuts jet",
    "start": "1790559",
    "end": "1797200"
  },
  {
    "text": "stream works like there were other talks in this conference i well i linked one of them from a previous conference it",
    "start": "1797200",
    "end": "1802960"
  },
  {
    "text": "explains how this work and it's a bit outside of the scope of this talk but it is impressive",
    "start": "1802960",
    "end": "1809600"
  },
  {
    "text": "how i have extremely high availability super low latency because the data is always",
    "start": "1809600",
    "end": "1816960"
  },
  {
    "text": "in my memory i can give an another example i could build like a micro service to this",
    "start": "1816960",
    "end": "1823200"
  },
  {
    "text": "publishing platform that is let's say an rss service rss service let's say it only has the",
    "start": "1823200",
    "end": "1830080"
  },
  {
    "text": "last 20 articles that my team has published",
    "start": "1830080",
    "end": "1835360"
  },
  {
    "text": "every time i start this i don't even need to consume the events since beginning of time because if the company is publishing let's say 500 articles a",
    "start": "1835360",
    "end": "1841840"
  },
  {
    "text": "day i can only consume the events since yesterday for example and",
    "start": "1841840",
    "end": "1847840"
  },
  {
    "text": "i can build my materialized view which can be like a queue in my in in a variable and then keep adding uh",
    "start": "1847840",
    "end": "1855440"
  },
  {
    "text": "one article at the top of the queue when a new article event arrives and removing one if i reach the",
    "start": "1855440",
    "end": "1861919"
  },
  {
    "text": "20 articles limit so i will always have i can even render that as xml and i can return i will have the response to every",
    "start": "1861919",
    "end": "1868720"
  },
  {
    "text": "possible query and i'll have some millisecond responses without ever making requests to any database whatsoever",
    "start": "1868720",
    "end": "1876559"
  },
  {
    "text": "so that service will will be unlikely to ever go down in any situation",
    "start": "1876559",
    "end": "1884000"
  },
  {
    "text": "in summary outages will happen sooner or later um it is expensive and non-trivial to",
    "start": "1890320",
    "end": "1896799"
  },
  {
    "text": "keep up-to-date disaster recovery plan that will guarantee low um",
    "start": "1896799",
    "end": "1902240"
  },
  {
    "text": "uh you know short rto and zero lost rpo and anycast",
    "start": "1902240",
    "end": "1908960"
  },
  {
    "text": "and event sourcing are really good fit to help you solve these problems as a given benefit",
    "start": "1908960",
    "end": "1915600"
  },
  {
    "text": "because any cast ip addresses have the same address for many servers around the world if you get",
    "start": "1915600",
    "end": "1921760"
  },
  {
    "text": "ddosed guess what happen you load balance the request to all your servers",
    "start": "1921760",
    "end": "1927360"
  },
  {
    "text": "or if the requests come if it's a dos attack coming from one location you spin up a cluster next to that and all those",
    "start": "1927360",
    "end": "1933120"
  },
  {
    "text": "attacks go to that one cluster which doesn't even need to have any workload and the remaining servers are not even not touched",
    "start": "1933120",
    "end": "1939919"
  },
  {
    "text": "so that gives you even more control of protecting of yet another problem that might happen",
    "start": "1939919",
    "end": "1948200"
  },
  {
    "text": "all the resources in this demo that i've used are open source no proprietary solution uh i'm going to share the the",
    "start": "1948240",
    "end": "1955279"
  },
  {
    "text": "the code that i've written in in my github profile i've used bgp the border gateway",
    "start": "1955279",
    "end": "1960399"
  },
  {
    "text": "protocol which is the backbone of the internet not my favorite cncf project and this video over there is highly",
    "start": "1960399",
    "end": "1967120"
  },
  {
    "text": "recommended bird is the that i've used to announce the ip",
    "start": "1967120",
    "end": "1974640"
  },
  {
    "text": "range and probably your favorite cloud provider has some documentation how to announce your own ip like it's outside",
    "start": "1974799",
    "end": "1981120"
  },
  {
    "text": "of the scope of this talk i just wanted to mention that yeah it's possible to have same ip address in multiple servers",
    "start": "1981120",
    "end": "1987679"
  },
  {
    "text": "um i use k3s um which helped me build this demo in in hours instead of you",
    "start": "1987679",
    "end": "1992960"
  },
  {
    "text": "know a lot more time in the graph graphql library i'm i'm maintaining that library",
    "start": "1992960",
    "end": "1998240"
  },
  {
    "text": "so i'm a bit like disclaimer i chose it because i had an existing app that i tweeted a",
    "start": "1998240",
    "end": "2003840"
  },
  {
    "text": "little bit and with all that being said",
    "start": "2003840",
    "end": "2009840"
  },
  {
    "text": "i believe that there is some time for questions if anyone wants to ask anything",
    "start": "2009840",
    "end": "2017080"
  },
  {
    "text": "[Applause]",
    "start": "2018510",
    "end": "2024619"
  },
  {
    "text": "okay we have a question over here thank you i just have one question",
    "start": "2027919",
    "end": "2034080"
  },
  {
    "text": "really which is just about the persistence behind the scenes so you mentioned that about cqrs and you're",
    "start": "2034080",
    "end": "2039600"
  },
  {
    "text": "obviously interrogating something which is durable somewhere yep how how in a cloud",
    "start": "2039600",
    "end": "2044960"
  },
  {
    "text": "scenario when potentially you've got an outage and then the storage is gone as well how do you",
    "start": "2044960",
    "end": "2050320"
  },
  {
    "text": "how do you manage that okay that use case so the question is what happens if my durable queue goes",
    "start": "2050320",
    "end": "2056638"
  },
  {
    "text": "down uh which in my case is in this demo is not jet stream",
    "start": "2056639",
    "end": "2062240"
  },
  {
    "text": "not jet stream was designed to have zero points of failure which means that in all my kubernetes",
    "start": "2062240",
    "end": "2068800"
  },
  {
    "text": "clusters i can have a nuts cluster with three or more instances and they can use you know persistent",
    "start": "2068800",
    "end": "2075839"
  },
  {
    "text": "volume claims and if that goes down i will have some kind of health check it would detect that my system has a",
    "start": "2075839",
    "end": "2083520"
  },
  {
    "text": "problem with one of its components and it will turn off the bgp announcement that server stops accepting requests in",
    "start": "2083520",
    "end": "2090480"
  },
  {
    "text": "seconds this is what we do in production in in my team like if something in our system we have a health checker which is",
    "start": "2090480",
    "end": "2097599"
  },
  {
    "text": "checking for way too many things but that's necessary and if one of these things some things in your big picture goes",
    "start": "2097599",
    "end": "2104240"
  },
  {
    "text": "down we turn off the bgp announcement in that region or in that cloud provider because we have different column",
    "start": "2104240",
    "end": "2109599"
  },
  {
    "text": "providers in different regions and we are multi-tenancy systems so things are going down all the time",
    "start": "2109599",
    "end": "2115520"
  },
  {
    "text": "and if we had to fix those things manually probably we had to double our team and only have people that are doing disaster",
    "start": "2115520",
    "end": "2122320"
  },
  {
    "text": "recovery but because we have a health checker we",
    "start": "2122320",
    "end": "2127440"
  },
  {
    "text": "turn off the bgp announcement and then that cluster is off the network it doesn't accept requests anymore our user",
    "start": "2127440",
    "end": "2134320"
  },
  {
    "text": "requests go to the nearest cluster to them which is ideally in the same region but if not in",
    "start": "2134320",
    "end": "2140079"
  },
  {
    "text": "a different region or a different cloud provider and then we we don't have to care about this pro it's a problem for another day",
    "start": "2140079",
    "end": "2145599"
  },
  {
    "text": "so these problems happen that's why we have bgp to take care of them for us",
    "start": "2145599",
    "end": "2151920"
  },
  {
    "text": "does this answer the question but you've got presume that only works",
    "start": "2151920",
    "end": "2158079"
  },
  {
    "text": "as long as in the other region so that you're failing over okay all of that data has been propagated okay so if there is an event",
    "start": "2158079",
    "end": "2166000"
  },
  {
    "text": "uh the way nuts works to my understanding is you have to configure um the you you have way too many like a",
    "start": "2166000",
    "end": "2173760"
  },
  {
    "text": "lot of things to configure in in nuts but you can configure how many acknowledgements in the clusters",
    "start": "2173760",
    "end": "2178880"
  },
  {
    "text": "you want before that event is considered acknowledged so you might",
    "start": "2178880",
    "end": "2184560"
  },
  {
    "text": "uh configure for full cluster mesh which means every node in every cluster around",
    "start": "2184560",
    "end": "2189920"
  },
  {
    "text": "the world needs to acknowledge the event before you consider it's published or maybe you can say i want at least",
    "start": "2189920",
    "end": "2196240"
  },
  {
    "text": "let's say two clusters in two cloud providers in two different regions to acknowledge it and then i consider the event published",
    "start": "2196240",
    "end": "2203760"
  },
  {
    "text": "so there was there was really really interesting um nuts talk i believe",
    "start": "2203760",
    "end": "2210800"
  },
  {
    "text": "not the previous cncf but uh conf there are many many talks expected",
    "start": "2210800",
    "end": "2216480"
  },
  {
    "text": "explaining exactly how nuts works it's outside of the scope of this talk but nuts is really amazing for these types",
    "start": "2216480",
    "end": "2222079"
  },
  {
    "text": "of problems we have a question over there",
    "start": "2222079",
    "end": "2229480"
  },
  {
    "text": "hi so my question is would something like this work on the load balancer whatever lever okay",
    "start": "2234480",
    "end": "2240640"
  },
  {
    "text": "when we [Music] in front of the load balancers",
    "start": "2240640",
    "end": "2247040"
  },
  {
    "text": "uh can you repeat the last part of the question yeah when you have like in front of the load balancers you have a",
    "start": "2247040",
    "end": "2252560"
  },
  {
    "text": "cloudflare which is handling your ip addresses yes it does work",
    "start": "2252560",
    "end": "2258560"
  },
  {
    "text": "and many people use it this way you can you can have somebody",
    "start": "2258560",
    "end": "2263599"
  },
  {
    "text": "else uh in front of your bgp announcements or after your bgp announcements there",
    "start": "2263599",
    "end": "2269200"
  },
  {
    "text": "are many many talks uh uh explaining different scenarios there i'm just in in my presentation i'm just saying hey it's",
    "start": "2269200",
    "end": "2275520"
  },
  {
    "text": "possible to have two servers with the same ip address there are really a lot of solutions that you can you can work",
    "start": "2275520",
    "end": "2281839"
  },
  {
    "text": "with in our case we have our bgp and and after that we have a load balancer that goes to all of our ingress nodes",
    "start": "2281839",
    "end": "2289200"
  },
  {
    "text": "but you can play with it and the scenarios are endless the sky is the limit you can use it in that particular",
    "start": "2289200",
    "end": "2295520"
  },
  {
    "text": "scenario it's possible",
    "start": "2295520",
    "end": "2299079"
  },
  {
    "text": "any other questions",
    "start": "2304720",
    "end": "2307680"
  },
  {
    "text": "well thank you for coming to my session",
    "start": "2310240",
    "end": "2316599"
  }
]